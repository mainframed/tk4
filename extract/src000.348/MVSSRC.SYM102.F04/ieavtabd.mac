         TITLE 'IEAVTABD  - ABDUMP                                     *
                        '
IEAVTABD CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IEAVTABD  78.086'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @06,0                                               0001
@PSTART  LA    @05,4095(,@06)                                      0001
         USING @PSTART,@06                                         0001
         USING @PSTART+4095,@05                                    0001
*   RTM2PTR=PARMPTR;                /* GET ADDRESS OF RTM2 WORK AREA */
         LR    RTM2PTR,PARMPTR                                     0148
*   RTM2SFWA=RTM2SFWA&&RTM2SFWA;    /* ZERO AREA                     */
         XC    RTM2SFWA(16,RTM2PTR),RTM2SFWA(RTM2PTR)              0149
*   GEN(GETMAIN R,LV=@ENDDATD-@DATD,SP=253);/* GETMAIN DATA AREA   0150
*                                                            @G33SPHW*/
         GETMAIN R,LV=@ENDDATD-@DATD,SP=253
*   AUTOPTR=PARMPTR;                /* PUT GETMAINED ADDRESS IN R1 0151
*                                                            @G33SPHW*/
         LR    AUTOPTR,PARMPTR                                     0151
*   GEN(XC  0(@ENDDATD-@DATD,AUTOPTR),0(AUTOPTR));/* ZERO STORAGE  0152
*                                                            @G33SPHW*/
         XC  0(@ENDDATD-@DATD,AUTOPTR),0(AUTOPTR)
*   GEN(USING @DATD,AUTOPTR);                                      0153
         USING @DATD,AUTOPTR
*   RTM2WARG=8;                     /* INDICATE REG7 CONTAINS ADDR OF
*                                      RTM2WA                        */
         MVI   RTM2WARG(RTM2PTR),X'08'                             0154
*   TCBPTR=RTM2TCBC;                /* GET ADDR OF CURRENT TCB       */
         MVC   TCBPTR(4),RTM2TCBC(RTM2PTR)                         0155
*   GENERATE REFS(RTM2RREG);                                       0156
         STM   0,15,RTM2RREG(RTM2PTR) SAVE REGS FOR USE BY RECOVERY RTN
*   RTM2TRRA=ADDR(ADRECOV);         /* GET ADDR OF ABDUMP RECOVERY 0157
*                                      RTN                           */
         LA    @14,ADRECOV                                         0157
         ST    @14,RTM2TRRA(,RTM2PTR)                              0157
*ADDCHK:                                                           0158
*   IF(RTCTISAB='1'B&               /* ARE SYSABEND          @G33NPHE*/
*       RTCTISYU='1'B&              /* SYSUDUMP AND                  */
*       RTCTISYM='1'B)              /* SYMDUMP DUMPS BEING IGNORED 0158
*                                                            @G33SPHW*/
*       ×RTM2NODP=ON                /* OR HAS SLIP REQUESTED THAT ALL
*                                      DUMP REQUESTS FOR THIS CALL TO
*                                      RTM BE IGNORED?       @G33NPHE*/
*     THEN                                                         0158
ADDCHK   LA    @14,236                                             0158
         L     @09,CVTPTR                                          0158
         AL    @14,CVTRTMCT(,@09)                                  0158
         TM    RTCTISAB(@14),B'00000001'                           0158
         BNO   @GL00001                                            0158
         TM    RTCTISYU(@14),B'00000001'                           0158
         BNO   @GL00001                                            0158
         TM    RTCTISYM(@14),B'00000001'                           0158
         BO    @RT00158                                            0158
@GL00001 TM    RTM2NODP(RTM2PTR),B'00010000'                       0158
         BNO   @RF00158                                            0158
@RT00158 DS    0H                                                  0159
*     RTM2SNCC=0;                   /* YES, RETURN TO RTM2           */
         SLR   @14,@14                                             0159
         ST    @14,RTM2SNCC(,RTM2PTR)                              0159
*   ELSE                                                           0160
*     DO;                                                          0160
*                                                                  0160
         B     @RC00158                                            0160
@RF00158 DS    0H                                                  0161
*       /*************************************************************/
*       /*                                                           */
*       /* THIS SECTION OF CODE DETERMINES WHETHER THE TIOT CONTAINS */
*       /* THE APPRORIATE INFORMATION TO PROVIDE A SYSABEND OR       */
*       /* SYSUDUMP DUMP. THE FOLLOWING CONDITIONS MUST EXIST: 1. THE*/
*       /* TCB MUST CONTAIN A TIOT POINTER 2. TIOT MUST CONTAIN A    */
*       /* SYSABEND ,SYSUDUMP OR SYSMDUMP ENTRY 3. THE ADDR OF THE   */
*       /* UCB IN THE TIOT ENTRY MUST BE NON-ZERO. (ZERO INDICATES A */
*       /* DD DUMMY DATA SET. 4. THE TIOT ENTRY ADDR FOR THE DATA SET*/
*       /* MUST BE NON-ZERO. NOTE: THE LAST OCCURANCE OF EITHER      */
*       /* SYSABEND ,SYSUDUMP OR SYSMDUMP IS TAKEN AS THE DEFINITION */
*       /* OF THE DUMP DATA SET                                      */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0161
*       IF TCBTIO=0 THEN            /* DOES TIOT EXIST               */
         L     @14,TCBPTR                                          0161
         ICM   @09,15,TCBTIO(@14)                                  0161
         BNZ   @RF00161                                            0161
*         RTM2NDMP='1'B;            /* NO, INDICATE NO DUMP          */
         OI    RTM2NDMP(RTM2PTR),B'10000000'                       0162
*       ELSE                                                       0163
*         DO;                                                      0163
         B     @RC00161                                            0163
@RF00161 DS    0H                                                  0164
*           TIOTPTR=TCBTIO;         /* GET ADDR. OF TIOT             */
*                                                                  0164
         L     @14,TCBPTR                                          0164
         L     TIOTPTR,TCBTIO(,@14)                                0164
*           /*********************************************************/
*           /*                                                       */
*           /* LOOP THRU ALL ENTRIES OF TIOT USE LAST DUMP DD FOUND  */
*           /* ON THE TIOT AS DUMP TYPE(SYSABEND,SYSUDUMP,SYSMDUMP). */
*           /*                                               @G33SPHW*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0165
*           DMPTIOTA=0;             /* INIT ADDR OF TIOT ENTRY TO 0  */
         SLR   DMPTIOTA,DMPTIOTA                                   0165
*           DO WHILE(TIOELNGH^='00'X);/* LOOP THROUGH TIOT ENTRIES 0166
*                                      UNTIL SYSABEND , SYSUDUMP OR
*                                      SYSMDUMP DD IS FOUND  @G33SPHW*/
         B     @DE00166                                            0166
@DL00166 DS    0H                                                  0167
*             IF TIOEDDNM='SYSABEND'×TIOEDDNM='SYSUDUMP'×/* IS ENTRY
*                                                            @G33SPHW*/
*                 TIOEDDNM='SYSMDUMP'/* FOR                  @G33SPHW*/
*               THEN                /* DUMP DATA SET                 */
         CLC   TIOEDDNM(8,TIOTPTR),@CC03621                        0167
         BE    @RT00167                                            0167
         CLC   TIOEDDNM(8,TIOTPTR),@CC03622                        0167
         BE    @RT00167                                            0167
         CLC   TIOEDDNM(8,TIOTPTR),@CC03623                        0167
         BNE   @RF00167                                            0167
@RT00167 DS    0H                                                  0168
*               DMPTIOTA=TIOTPTR;   /* YES, SAVE ADDR OF TIOT ENTRY  */
         LR    DMPTIOTA,TIOTPTR                                    0168
*             TIOTPTR=TIOTPTR+TIOELNGH;/* GET ADDR OF NEXT TIOT ENTRY*/
@RF00167 SLR   @14,@14                                             0169
         IC    @14,TIOELNGH(,TIOTPTR)                              0169
         ALR   TIOTPTR,@14                                         0169
*           END;                                                   0170
@DE00166 CLI   TIOELNGH(TIOTPTR),0                                 0170
         BNE   @DL00166                                            0170
*           TIOTPTR=DMPTIOTA;       /* GET ADDR OF TIOT ENTRY FOR  0171
*                                      DUMP DATASET                  */
         LR    TIOTPTR,DMPTIOTA                                    0171
*           IF TIOTPTR=0×TIOEFSRT=0&/* IF TIOT ENTRY ADDR IS ZERO OR
*                                      UCB ADDR IS ZERO AND          */
*               TIOTTERM='0'B&      /* DEVICE IS TERMINAL            */
*               TIOEDYNM='0'B&      /* DYNAMIC ALLOC ENTRY           */
*               TIOESYIN='0'B&      /* SYSIN ENTRY                   */
*               TIOESYOT='0'B       /* SYSOUT ENTRY                  */
*             THEN                  /* ABSENCE OF INDICATOR INDICATES
*                                      DD DUMMY                      */
         LTR   TIOTPTR,TIOTPTR                                     0172
         BZ    @RT00172                                            0172
         ICM   @14,7,TIOEFSRT(TIOTPTR)                             0172
         BNZ   @RF00172                                            0172
         TM    TIOTTERM(TIOTPTR),B'00110110'                       0172
         BNZ   @RF00172                                            0172
@RT00172 DS    0H                                                  0173
*             RTM2NDMP='1'B;        /* INDICATE NO DUMP TO BE TAKEN  */
         OI    RTM2NDMP(RTM2PTR),B'10000000'                       0173
*           ELSE                                                   0174
*             DO;                                                  0174
         B     @RC00172                                            0174
@RF00172 DS    0H                                                  0175
*               RTM2DD=TIOEDDNM;    /* SAVE DDNAME IN RTM2WA         */
         MVC   RTM2DD(8,RTM2PTR),TIOEDDNM(TIOTPTR)                 0175
*               IF RTM2DD='SYSABEND'&/* SYSABEND DD AND              */
*                   RTCTISAB='1'B THEN/* IGNORE SYSABEND DUMPS       */
         CLC   RTM2DD(8,RTM2PTR),@CC03621                          0176
         BNE   @RF00176                                            0176
         L     @14,CVTPTR                                          0176
         L     @14,CVTRTMCT(,@14)                                  0176
         TM    RTCTISAB+236(@14),B'00000001'                       0176
         BNO   @RF00176                                            0176
*                 RTM2NDMP='1'B;    /* INDICATE NO DUMP TO BE TAKEN  */
         OI    RTM2NDMP(RTM2PTR),B'10000000'                       0177
*               ELSE                                               0178
*                 IF RTM2DD='SYSUDUMP'&/* SYSUDUMP DD AND            */
*                     RTCTISYU='1'B THEN/* IGNORE SYSUDUMP DUMPS     */
         B     @RC00176                                            0178
@RF00176 CLC   RTM2DD(8,RTM2PTR),@CC03622                          0178
         BNE   @RF00178                                            0178
         L     @14,CVTPTR                                          0178
         L     @14,CVTRTMCT(,@14)                                  0178
         TM    RTCTISYU+236(@14),B'00000001'                       0178
         BNO   @RF00178                                            0178
*                   RTM2NDMP='1'B;  /* INDICATE NO DUMP TO BE TAKEN  */
         OI    RTM2NDMP(RTM2PTR),B'10000000'                       0179
*                 ELSE              /*                       @G33SPHW*/
*                   IF RTM2DD='SYSMDUMP'&/* SYSMDUMP DD AND  @G33SPHW*/
*                       RTCTISYM='1'B THEN/* IGNORE SYSMDUMP DUMPS 0180
*                                                            @G33SPHW*/
         B     @RC00178                                            0180
@RF00178 CLC   RTM2DD(8,RTM2PTR),@CC03623                          0180
         BNE   @RF00180                                            0180
         L     @14,CVTPTR                                          0180
         L     @14,CVTRTMCT(,@14)                                  0180
         TM    RTCTISYM+236(@14),B'00000001'                       0180
         BNO   @RF00180                                            0180
*                     RTM2NDMP='1'B;/* INDICATE NO DUMP TAKEN      0181
*                                                            @G33SPHW*/
         OI    RTM2NDMP(RTM2PTR),B'10000000'                       0181
*             END;                                                 0182
@RF00180 DS    0H                                                  0182
@RC00178 DS    0H                                                  0182
@RC00176 DS    0H                                                  0183
*         END;                                                     0183
@RC00172 DS    0H                                                  0184
*       IF RTM2NDMP='1'B THEN       /* SHOULD DUMP BE TAKEN          */
@RC00161 TM    RTM2NDMP(RTM2PTR),B'10000000'                       0184
         BNO   @RF00184                                            0184
*         RTM2SNCC=0;               /* NO, EITHER NO SYSABEND      0185
*                                      ,SYSUDUMP OR SYSMDUMP DD FOUND
*                                                            @G33SPHW*/
         SLR   @14,@14                                             0185
         ST    @14,RTM2SNCC(,RTM2PTR)                              0185
*       ELSE                                                       0186
*         DO;                                                      0186
*                                                                  0186
         B     @RC00184                                            0186
@RF00184 DS    0H                                                  0187
*           /*********************************************************/
*           /*                                                       */
*           /* THE DUMP DATA SET IS ENQUEUED UPON USING A MAJOR NAME */
*           /* OF SYSIEA01 AND A MINOR NAME OF IEA. THE ENQ PARAMETER*/
*           /* LIST IS BUILT IN THE RTM2 WORK AREA.                  */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0187
*           ENQFLAGS='FF030000'X;   /* INDICATE ONE ENTRY & MINOR  0187
*                                      NAME LENGTH OF 3              */
         MVC   ENQFLAGS(4,RTM2PTR),@CB03624                        0187
*           MAJORAD=ADDR(MAJOR);    /* GET ADDRESS OF MAJOR NAME     */
         LA    @14,MAJOR(,RTM2PTR)                                 0188
         ST    @14,MAJORAD(,RTM2PTR)                               0188
*           MINORAD=ADDR(MINOR);    /* GET ADDRESS OF MINOR NAME     */
         LA    @14,MINOR(,RTM2PTR)                                 0189
         ST    @14,MINORAD(,RTM2PTR)                               0189
*           MAJOR='SYSIEA01';       /* MAJOR NAME                    */
         MVC   MAJOR(8,RTM2PTR),@CC03625                           0190
*           MINOR='IEA';            /* MINOR NAME                    */
         MVC   MINOR(3,RTM2PTR),@CC03626                           0191
*           PARMPTR=ADDR(ENQPARMS); /* PUT POINTER TO PARMETER LIST
*                                      IN R1                         */
         LA    PARMPTR,ENQPARMS(,RTM2PTR)                          0192
*           RTM2EENQ='1'B;          /* INDICATE ENQ IN CNTRL         */
*                                                                  0193
         OI    RTM2EENQ(RTM2PTR),B'10000000'                       0193
*           /*********************************************************/
*           /*                                                       */
*           /* IF THIS ENTRY IS FOR CANCEL, DO ENQUEUE TEST FIRST TO */
*           /* ENSURE THAT DUMP DATASET IS REALLY FREE. NORMAL ENQ   */
*           /* WILL CAUSE ENQ STEAL BECAUSE SUBTASKS ARE             */
*           /* NON-DISPATCHABLE                              @ZA05491*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0194
*           IF RTM2CNCL='1'B THEN   /* SUBTASKS NON-DISPATCHABLE?  0194
*                                                            @ZA05491*/
         TM    RTM2CNCL(RTM2PTR),B'01000000'                       0194
         BNO   @RF00194                                            0194
*             DO;                   /*                       @ZA05491*/
*               GEN(ENQ   (,,E,,STEP),RET=TEST,MF=(E,(PARMPTR)));/*
*                                                            @ZA05491*/
         ENQ   (,,E,,STEP),RET=TEST,MF=(E,(PARMPTR))
*               ENQFLAGS='FF030000'X;/* RESET PARM FLAGS     @ZA05491*/
         MVC   ENQFLAGS(4,RTM2PTR),@CB03624                        0197
*               PARMPTR=ADDR(ENQPARMS);/* RESET PARAMETER REG      0198
*                                                            @ZA05491*/
         LA    PARMPTR,ENQPARMS(,RTM2PTR)                          0198
*             END;                  /* END OF CANCEL PROCESSING    0199
*                                                            @ZA05491*/
*           IF RETCODE=0            /* ENQUEUE TEST SUCCESSFUL     0200
*                                                            @ZA05491*/
*               ×RTM2CNCL='0'B THEN /* OR NOT NEEDED         @ZA05491*/
@RF00194 LTR   RETCODE,RETCODE                                     0200
         BZ    @RT00200                                            0200
         TM    RTM2CNCL(RTM2PTR),B'01000000'                       0200
         BNZ   @RF00200                                            0200
@RT00200 DS    0H                                                  0201
*             GENERATE;                                            0201
         ENQ   (,,E,,STEP),RET=HAVE,MF=(E,(PARMPTR))
*             RTM2SNCC=RETCODE;     /* SAVE RESTURN CODE             */
@RF00200 ST    RETCODE,RTM2SNCC(,RTM2PTR)                          0202
*           IF RETCODE=0 THEN       /* WAS ENQ SUCCESSFUL            */
         LTR   RETCODE,RETCODE                                     0203
         BNZ   @RF00203                                            0203
*             DO;                   /* YES                           */
*               RTM2EENQ='0'B;      /* TURN OFF ENQ IN CNTRL BIT     */
         NI    RTM2EENQ(RTM2PTR),B'01111111'                       0205
*               RTM2DENQ='1'B;      /* INDICATE ENQ COMPLETED        */
         OI    RTM2DENQ(RTM2PTR),B'10000000'                       0206
*             END;                                                 0207
*           ELSE                                                   0208
*             DO;                                                  0208
         B     @RC00203                                            0208
@RF00203 DS    0H                                                  0209
*               PARMPTR=ADDR(SDUMPE);/* ENG FAILURE                  */
         LA    PARMPTR,SDUMPE                                      0209
*               GEN(SDUMP MF=(E,(1)));                             0210
         SDUMP MF=(E,(1))
*             END;                                                 0211
*           IF RTM2SNCC=0 THEN      /* WAS ENQ WUCCESSFUL            */
@RC00203 ICM   @14,15,RTM2SNCC(RTM2PTR)                            0212
         BNZ   @RF00212                                            0212
*             DO;                   /* YES                           */
*                                                                  0213
*               /*****************************************************/
*               /*                                                   */
*               /* CORE FOR THE DUMP DATA SET DCB & PARMLIST IS      */
*               /* OBTAINED FROM SP230. (88 BYTES FOR DCB, 8 BYTES   */
*               /* FOR PARMLIST)                             @YM01200*/
*               /* CORE IS ALSO NEEDED FOR THE QMNGRIO WORKAREA AND  */
*               /* PARMLIST, AND AN AREA TO READ IN THE JFCB AND     */
*               /* JFCBE                                     @Z40MPXH*/
*               /* IF CORE IS NOT AVAILABLE, RETURN TO RTM2 WITH     */
*               /* EIGHT RETURN CODE. OTHERWISE , FOR SYSABEND OR    */
*               /* SYSUDUMPS THE DCB IS INITALIZED WITH DSORG=PS,    */
*               /* MACRF=W, RECFM=VBA, BLKSIZE=1632, LRECL=125,      */
*               /* DDNAME=SYSABEND/SYSUDUMP FOR SYSMDUMPS THE DCB IS */
*               /* INITIALIZED FOR SDUMP LRECL=4104,                 */
*               /* BLKSIZE=4104,RECFM=FB,MACRF=W,DDNAME=SYSMDUMP     */
*               /*                                           @G33SPHW*/
*               /*                                                   */
*               /*****************************************************/
*                                                                  0214
*               GENERATE REFS(RTM2RREG);                           0214
         STM   0,15,RTM2RREG(RTM2PTR) SAVE REGS FOR USE BY RECOVERY RTN
*ADGET:                                                            0215
*               RFY                                                0215
*                (RTM2SWA) RSTD;                                   0215
ADGET    DS    0H                                                  0216
*               RFY                                                0216
*                 R3 RSTD;                                         0216
*               R3=TCBPKF;          /* GET TCB KEY           @YM01200*/
         L     @14,TCBPTR                                          0217
         SLR   R3,R3                                               0217
         IC    R3,TCBPKF(,@14)                                     0217
*               RFY                                                0218
*                 R0 RSTD;                                         0218
*               R0=LENGTH(COREAREA);/* AREAS MENTIONED ABOVE @Z40MPXH*/
         LA    R0,503                                              0219
*               RTM2EGET='1'B;      /* INDICATE GETMAIN IN CNTRL     */
         OI    RTM2EGET(RTM2PTR),B'01000000'                       0220
*               RTM2SWA=RTM2PTR;    /* SAVE WKAREA ADDR      @YM01200*/
         LR    RTM2SWA,RTM2PTR                                     0221
*               RFY                                                0222
*                 ASCBPTR RSTD;     /*                       @G33SPHW*/
*               ASCBPTR=PSAAOLD;    /* GET CURRENT ASCB PTR  @YM01200*/
         L     ASCBPTR,PSAAOLD                                     0223
*               RFY                                                0224
*                 R4 RSTD;          /*                       @G33SPHW*/
*               R4=TCBPTR;          /* PUT TCB ADDRESS IN R4 FOR   0225
*                                      GETMAIN               @G33SPHW*/
         LR    R4,@14                                              0225
*               GENERATE REFS(CVTPTR,CVTCRMN,CVTMAP,RTM2RMSA);     0226
*                                                          /*@YM01200*/
         STM R11,R14,RTM2RMSA(RTM2SWA)
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=('IEAVTABD')
         GETMAIN RC,LV=(R0),SP=230,BRANCH=YES,KEY=(3)          @YM01200
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=('IEAVTABD')       @YM01200
         LM R11,R14,RTM2RMSA(RTM2SWA)                          @YM01200
*               RFY                                                0227
*                (ASCBPTR,                                         0227
*                 R4) UNRSTD;       /*                       @G33SPHW*/
*               RFY                                                0228
*                (R3,                                              0228
*                 R0) UNRSTD;                                      0228
*               RTM2PTR=RTM2SWA;    /* RESTORE RTM2 WKAREA ADDR    0229
*                                                            @YM01200*/
         LR    RTM2PTR,RTM2SWA                                     0229
*               RFY                                                0230
*                 RTM2SWA UNRSTD;   /*                       @YM01200*/
*               RTM2EGET='0'B;      /* TURN OFF GETMAIN IN CNTRL BIT */
         NI    RTM2EGET(RTM2PTR),B'10111111'                       0231
*               RTM2DGET='1'B;      /* INDICATE GETMAIN FOR DCB    0232
*                                      COMPLETED                     */
         OI    RTM2DGET(RTM2PTR),B'01000000'                       0232
*               IF RETCODE^=0       /* WAS GETMAIN SUCCESSFUL        */
*                 THEN              /* NO                            */
         LTR   RETCODE,RETCODE                                     0233
         BZ    @RF00233                                            0233
*                 DO;                                              0234
*                   PARMPTR=ADDR(ENQPARMS);/* GET ADDR OF DEQUEUE  0235
*                                      PARAMETER LIST                */
         LA    PARMPTR,ENQPARMS(,RTM2PTR)                          0235
*                   GEN                                            0236
*(DEQ   (,,,STEP),RET=HAVE,MF=(E,(PARMPTR)) DEQ FROM DATA SET);    0236
         DEQ   (,,,STEP),RET=HAVE,MF=(E,(PARMPTR)) DEQ FROM DATA SET
*                   RTM2SNCC=8;     /* INDICATE CORE NOT AVAILABLE TO
*                                      RTM2                          */
         MVC   RTM2SNCC(4,RTM2PTR),@CF00094                        0237
*                 END;                                             0238
*               ELSE                                               0239
*                 DO;                                              0239
         B     @RC00233                                            0239
@RF00233 DS    0H                                                  0240
*                   COREPTR=PARMPTR;/* SAVE ADDRESS OF GOTTEN CORE 0240
*                                                            @Z40MPXH*/
         ST    PARMPTR,COREPTR                                     0240
*                   RFY                                            0241
*                     COREAREA BASED(COREPTR);/*             @Z40MPXH*/
*                   COREAREA(1:256)=''B;/* CLEAR GETMAINED AREA    0242
*                                                            @Z40MPXH*/
         L     @14,COREPTR                                         0242
         XC    COREAREA(256,@14),COREAREA(@14)                     0242
*                   COREAREA(257:LENGTH(COREAREA))=''B;/*    @G33SPHW*/
         XC    COREAREA+256(247,@14),COREAREA+256(@14)             0243
*                   RFY                                            0244
*                    (R2,                                          0244
*                     R11) RSTD;    /*                       @Z40MPXH*/
*                   DCBPTR=ADDR(DCBAREA);/* GET DCB ADDRESS FROM   0245
*                                      COREAREA              @G33SPHW*/
         ST    @14,DCBPTR                                          0245
*                   SDUMPPTR=ADDR(SDAREA);/* ADDRESS OF SDUMP      0246
*                                      PARMLIST              @G33SPHW*/
         LA    @10,SDAREA(,@14)                                    0246
         ST    @10,SDUMPPTR                                        0246
*                   MDHDPTR=ADDR(SHEAD);/* GET ADDRESS OF HEADER   0247
*                                      BUFFER.               @G33SPHW*/
         LA    @10,SHEAD(,@14)                                     0247
         ST    @10,MDHDPTR                                         0247
*                   DCBSAVE=DCBPTR; /* SAVE DCB ADDR         @YM01200*/
         ST    @14,DCBSAVE                                         0248
         EJECT
*                                                                  0249
*                   /*************************************************/
*                   /*                                               */
*                   /* QMNGRIO IS ISSUED TO READ IN THE JFCB AND     */
*                   /* JFCBE,IF ONE EXISTS DETERMINE IF THE CONDENSED*/
*                   /* LINE OPTION IS REQUESTED.             @Z40MPXH*/
*                   /*                                               */
*                   /*************************************************/
*                                                                  0249
*                   QMIOPPTR=ADDR(QMIPARM);/* SET BASE PTR TO      0249
*                                      PARMLIST              @Z40MPXH*/
         LA    QMIOPPTR,QMIPARM(,@14)                              0249
*                   QMITCBAD=RTM2TCBC;/* CURRENT TCB ADDRESS @Z40MPXH*/
         MVC   QMITCBAD(4,QMIOPPTR),RTM2TCBC(RTM2PTR)              0250
*                   QMIRECAD=ADDR(JFCBAREA);/* AREA TO READ IN JFCB
*                                                            @Z40MPXH*/
         LA    @10,JFCBAREA(,@14)                                  0251
         ST    @10,QMIRECAD(,QMIOPPTR)                             0251
*                   QMIWRKAD=ADDR(QMIAREA);/* WORK AREA FOR QMNGRIO
*                                                            @Z40MPXH*/
         LA    @14,QMIAREA(,@14)                                   0252
         ST    @14,QMIWRKAD(,QMIOPPTR)                             0252
*                   QMIRECL=LENGTH(JFCBAREA);/* READ RECORD LENGTH 0253
*                                                            @Z40MPXH*/
         MVC   QMIRECL(2,QMIOPPTR),@CH03737                        0253
*                   RFY                                            0254
*                     R14 RSTD;     /*                       @Z40MPXH*/
*                   R14=TIOEJFCB;   /* DISK ADDRESS OF JFCB  @Z40MPXH*/
         SLR   R14,R14                                             0255
         ICM   R14,7,TIOEJFCB(TIOTPTR)                             0255
*                   SLL(R14,8);     /* SHIFT TO HIGH ORDER END     0256
*                                                            @Z40MPXH*/
         SLL   R14,8                                               0256
*                   QMIDSKAD=R14;   /* SAVE SVA ADDR IN PARM LIST  0257
*                                                            @Z40MPXH*/
         ST    R14,QMIDSKAD(,QMIOPPTR)                             0257
*                   RFY                                            0258
*                     R14 UNRSTD;   /*                       @Z40MPXH*/
*                   RFY                                            0259
*                     R13 RSTD;     /*                       @Z40MPXH*/
*                   RTM2RMSA(2)=R13;/* SAVE CURRENT SA PTR   @Z40MPXH*/
         ST    R13,RTM2RMSA+4(,RTM2PTR)                            0260
*                   R13=ADDR(RTM2RMSA);/* POINT TO NEXT SAVEAREA   0261
*                                                            @Z40MPXH*/
         LA    R13,RTM2RMSA(,RTM2PTR)                              0261
*                   QMIOREAD='1'B;  /* INDICATE READ REQUEST @Z40MPXH*/
         OI    QMIOREAD(QMIOPPTR),B'10000000'                      0262
*                   PARMPTR=QMIOPPTR;/* READY PARM LIST PTR TO R1  0263
*                                                            @Z40MPXH*/
         LR    PARMPTR,QMIOPPTR                                    0263
*                   RTM2EQMN='1'B;  /* QMNGRIO IN CONTROL NOW      0264
*                                                            @Z40MPXH*/
         OI    RTM2EQMN(RTM2PTR),B'00000001'                       0264
*                   RTM2TRRA=ADDR(ADQMRCV);/* RECURSION ADDRESS SET
*                                                            @Z40MPXH*/
         LA    @14,ADQMRCV                                         0265
         ST    @14,RTM2TRRA(,RTM2PTR)                              0265
*                   GENERATE REFS(RTM2RREG,RTM2PTR,CVTJESCT,JESCT, 0266
*                       JESRESQM);                                 0266
*                                                          /*@Z40MPXH*/
      STM 0,15,RTM2RREG(RTM2PTR)          SAVE REGS           Z40MPXH
      QMNGRIO                             ISSUE READ MACRO    Z40MPXH
*                   RTM2EQMN='0'B;  /* QMNGRIO COMPLETE      @Z40MPXH*/
         NI    RTM2EQMN(RTM2PTR),B'11111110'                       0267
*                   R13=RTM2RMSA(2);/* RESET R13 TO ABD'S SAVEAREA 0268
*                                                            @Z40MPXH*/
         L     R13,RTM2RMSA+4(,RTM2PTR)                            0268
*                   RFY                                            0269
*                     R13 UNRSTD;   /*                       @Z40MPXH*/
*                   JFCBPTR=ADDR(JFCBAREA);/* SET JFCB BASE POINTER
*                                                            @Z40MPXH*/
         L     @14,COREPTR                                         0270
         LA    @14,JFCBAREA(,@14)                                  0270
         ST    @14,JFCBPTR                                         0270
         EJECT
*                                                                  0271
*                   /*************************************************/
*                   /*                                               */
*                   /* IF SYSMDUMP REQUESTED DUMP TYPE BYPASS READ   */
*                   /* JFCBE NOT NEEDED FOR SYSMDUMP DUMPS.  @G33SPHW*/
*                   /*                                               */
*                   /*************************************************/
*                                                                  0271
*                   IF RTM2DD^='SYSMDUMP' THEN/* NOT SYSMDUMP REQUEST
*                                                            @G33SPHW*/
         CLC   RTM2DD(8,RTM2PTR),@CC03623                          0271
         BE    @RF00271                                            0271
*                     DO;           /* THEN CHECK FOR JFCBE  @G33SPHW*/
*                       IF JFCBEXTP='1'B THEN/* DOES JFCBE EXIST?  0273
*                                                            @Z40MPXH*/
         TM    JFCBEXTP(@14),B'10000000'                           0273
         BNO   @RF00273                                            0273
*                         DO;       /* YES, REISSUE MACRO    @Z40MPXH*/
*                           QMIOREAD='1'B;/* INDICATE READ REQUEST 0275
*                                                            @Z40MPXH*/
         OI    QMIOREAD(QMIOPPTR),B'10000000'                      0275
*                           RFY                                    0276
*                            (R14,                                 0276
*                             R13) RSTD;/*                   @Z40MPXH*/
*                           R14=JFCBEXAD;/* DISK ADDRESS OF JFCBE  0277
*                                                            @Z40MPXH*/
         L     @10,JFCBPTR                                         0277
         SLR   R14,R14                                             0277
         ICM   R14,7,JFCBEXAD(@10)                                 0277
*                           SLL(R14,8);/* SHIFT TO HIGH ORDER END  0278
*                                                            @Z40MPXH*/
         SLL   R14,8                                               0278
*                           QMIDSKAD=R14;/* SET SVA INTO PARMLIST  0279
*                                                            @Z40MPXH*/
         ST    R14,QMIDSKAD(,QMIOPPTR)                             0279
*                           RFY                                    0280
*                             R14 UNRSTD;/*                  @Z40MPXH*/
*                           RTM2RMSA(2)=R13;/* SAVE CURRENT SAVEAREA
*                                      PTR                   @Z40MPXH*/
         ST    R13,RTM2RMSA+4(,RTM2PTR)                            0281
*                           R13=ADDR(RTM2RMSA);/* SET 13 TO PRESENT
*                                      SAVEAREA              @Z40MPXH*/
         LA    R13,RTM2RMSA(,RTM2PTR)                              0282
*                           RTM2EQMN='1'B;/* QMNGRIO IN CONTROL    0283
*                                                            @Z40MPXH*/
         OI    RTM2EQMN(RTM2PTR),B'00000001'                       0283
*                           PARMPTR=QMIOPPTR;/* SET PARM LIST ADDRESS
*                                                            @Z40MPXH*/
         LR    PARMPTR,QMIOPPTR                                    0284
*                           GENERATE REFS(CVTJESCT,JESCT,JESRESQM);
*                                                        /*  @Z40MPXH*/
      QMNGRIO                   ISSUE MACRO TO READ JFCBE    @Z40MPXH
*                           RFY                                    0286
*                            (R13) UNRSTD;/*                 @Z40MPXH*/
*                           RTM2EQMN='0'B;/* QMNGRIO COMPLETE      0287
*                                                            @Z40MPXH*/
         NI    RTM2EQMN(RTM2PTR),B'11111110'                       0287
*                           R13=RTM2RMSA(2);/* RESTORE ABD'S SAVEAREA
*                                      PTR                   @Z40MPXH*/
         L     R13,RTM2RMSA+4(,RTM2PTR)                            0288
*                           JFCBEPTR=ADDR(JFCBAREA);/* SET ADDRESS OF
*                                      JFCBE                 @Z40MPXH*/
         L     @14,COREPTR                                         0289
         LA    JFCBEPTR,JFCBAREA(,@14)                             0289
*                           PARMPTR=COREPTR;/* DCB BASED ON PARMPTR
*                                                            @Z40MPXH*/
         LR    PARMPTR,@14                                         0290
*                           IF JFCBTRS1=DUMP THEN/* CONDENSED LINE 0291
*                                      REQUESTED?            @Z40MPXH*/
         CLC   JFCBTRS1(4,JFCBEPTR),DUMP                           0291
         BNE   @RF00291                                            0291
*                             DCBBUF=DCBIMAG2;/* MOVE CONDENSED DUMP
*                                      DCBIMAGE INTO THE DCB @Z40MPXH*/
         L     @14,DCBPTR                                          0292
         MVC   DCBBUF(88,@14),DCBIMAG2                             0292
*                           ELSE    /*                       @Z40MPXH*/
*                             DCBBUF=DCBIMAGE;/* MOVE STANDARD DCB IN
*                                                            @Z40MPXH*/
         B     @RC00291                                            0293
@RF00291 L     @14,DCBPTR                                          0293
         MVC   DCBBUF(88,@14),DCBIMAGE                             0293
*                         END;      /*                       @Z40MPXH*/
*                       ELSE        /* JFCBE DOES NOT EXIST  @Z40MPXH*/
*                         DCBBUF=DCBIMAGE;/* USE STANDARD FORMAT DCB
*                                                            @Z40MPXH*/
         B     @RC00273                                            0295
@RF00273 L     @14,DCBPTR                                          0295
         MVC   DCBBUF(88,@14),DCBIMAGE                             0295
*                     END;          /* END... NOT SYSMDUMP   @G33SPHW*/
*                   ELSE            /* SYSMDUMP REQUEST      @G33SPHW*/
*                     DCBBUF=DCBMDUMP;/* MOVE SYSMDUMP DCB IN      0297
*                                                            @G33SPHW*/
         B     @RC00271                                            0297
@RF00271 L     @14,DCBPTR                                          0297
         MVC   DCBBUF(88,@14),DCBMDUMP                             0297
*                   DCBDDNAM=RTM2DD;/* MOVE DNAME INTO DCB           */
@RC00271 L     @14,DCBPTR                                          0298
         MVC   DCBDDNAM+40(8,@14),RTM2DD(RTM2PTR)                  0298
*                 END;              /* CORE NOT AVAILABLE    @G33SPHW*/
*             END;                                                 0300
@RC00233 DS    0H                                                  0301
*ADQMEND:                                                          0301
*           RTM2TRRA=ADDR(ADRECOV); /* RESET RECOVERY ADDR   @Z40MPXH*/
@RF00212 DS    0H                                                  0301
ADQMEND  LA    @14,ADRECOV                                         0301
         ST    @14,RTM2TRRA(,RTM2PTR)                              0301
*           IF RTM2SNCC=0 THEN      /* WAS DCB SPACE AVAILABLE       */
         ICM   @14,15,RTM2SNCC(RTM2PTR)                            0302
         BNZ   @RF00302                                            0302
*             DO;                   /* YES, CONTINUS PROCESSING      */
*                                                                  0303
*               /*****************************************************/
*               /*                                                   */
*               /* THE KEY OF THE CALLER OF OPEN DETERMINES THE KEY  */
*               /* OF IOBS AND CHANNEL PROGRAMS. THEREFORE, ISSUE    */
*               /* MODESET TO GET IN PROBLEM PROGRAM KEY TO OPEN DUMP*/
*               /* DATA SET. THIS WILL PREVENT PROGRAM CHECKS IN SNAP*/
*               /* PROCESSING WHEN THE WRITE MACRO IS ISSUED.        */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0304
*               GENERATE REFS(RTM2RREG);                           0304
         STM   0,15,RTM2RREG(RTM2PTR) SAVE REGS FOR USE BY RECOVERY RTN
*ADOPEND:                                                          0305
*               RESPECIFY                                          0305
*                (R9,                                              0305
*                 R11) RESTRICTED;                                 0305
ADOPEND  DS    0H                                                  0306
*               OCDCBAD=DCBPTR;     /* INITIALIZE PARMLIST WIT DCB 0306
*                                      ADDR                          */
         L     @14,DCBPTR                                          0306
         LA    @10,88                                              0306
         ALR   @10,@14                                             0306
         ST    @14,OCDCBAD(,@10)                                   0306
*               OCDCBFL='8F'X;      /* INDICATE ONE ENTRY IN LIST AND
*                                      OPEN DATA SET FOR OUTPUT      */
         MVI   OCDCBFL(@10),X'8F'                                  0307
*               R11=ADDR(OCDCBAD);  /* GET ADDRESS OF OPEN PARMLIST  */
         LR    R11,@10                                             0308
*               RTM2EOPN='1'B;      /* INDICATE OPEN IN CONTROL      */
         OI    RTM2EOPN(RTM2PTR),B'00100000'                       0309
*               DO;                 /* MODESET SAVEKEY(RTM2PKEY)   0310
*                                      EXTKEY(TCB) WORKREG(R9)       */
*                 RESPECIFY                                        0311
*                  (GPR02F) RESTRICTED;                            0311
*                 R9=GPR02F;        /* SAVE REGISTER 2               */
         LR    R9,GPR02F                                           0312
*                 IPK;              /* SAVE CURRENT PSW KEY          */
         IPK                                                       0313
*                 RTM2PKEY=GPR02F;                                 0314
         STC   GPR02F,RTM2PKEY(,RTM2PTR)                           0314
*                 GPR02F=R9;        /* RESTORE REGISTER 2            */
         LR    GPR02F,R9                                           0315
*                 R9=TCBPKF;        /* GET KEY FROM TCB              */
         L     @14,TCBPTR                                          0316
         SLR   R9,R9                                               0316
         IC    R9,TCBPKF(,@14)                                     0316
*                 SPKA(R9);         /* SET PSW KEY                   */
         SPKA  0(R9)                                               0317
*                 RESPECIFY                                        0318
*                  (GPR02F) UNRESTRICTED;                          0318
*               END;                /* MODESET SAVEKEY(RTM2PKEY)   0319
*                                      EXTKEY(TCB) WORKREG(R9)     0319
*                                                            @YM00100*/
*               GEN(OPEN  MF=(E,(R11))  OPEN DUMP DATA SET);       0320
         OPEN  MF=(E,(R11))  OPEN DUMP DATA SET
*               DO;                 /* MODESET KEYADDR(RTM2PKEY)   0321
*                                      WORKREG(R9)                   */
*                 R9=RTM2PKEY;      /* GET KEY FORM SAVE LOCATION    */
         SLR   R9,R9                                               0322
         IC    R9,RTM2PKEY(,RTM2PTR)                               0322
*                 SPKA(R9);         /* SET PSW KEY                   */
         SPKA  0(R9)                                               0323
*               END;                /* MODESET KEYADDR(RTM2PKEY)   0324
*                                      WORKREG(R9) RETURN KEY0     0324
*                                                            @YM00100*/
*               RFY                                                0325
*                (R9,                                              0325
*                 R11) UNRSTD;                                     0325
*               RTM2EOPN='0'B;      /* TURN OFF OPEN IN CNTRL BIT    */
         NI    RTM2EOPN(RTM2PTR),B'11011111'                       0326
*               RTM2DOPN='1'B;      /* INDICATE OPEN COMPLETED       */
         OI    RTM2DOPN(RTM2PTR),B'00100000'                       0327
*             END;                  /* NOT SYSMDUMP          @G33SPHW*/
*           IF DCBOFOPN='0'B        /* WAS OPEN SUCCESSFUL           */
*             THEN                                                 0329
@RF00302 L     @14,DCBPTR                                          0329
         TM    DCBOFOPN+40(@14),B'00010000'                        0329
         BNZ   @RF00329                                            0329
*             DO;                   /* NO, ISSUE OPEN FAIL MESSAGE   */
*                                                                  0331
*               /*****************************************************/
*               /*                                                   */
*               /* IF OPEN IS NOT SUCCESSFUL, MESSAGE 'IEA030I OPEN  */
*               /* FAILED FOR DUMP DATA SET FOR JS IS ROUTED TO      */
*               /* SYSOUT AND CONTROL RETURNS TO RTM2 WITH A RETURN  */
*               /* CODE OF FOUR. STORAGE FOR THE MESSAGE BUFFER IS   */
*               /* OBTIANED FROM SUBPOOL 253                         */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0331
*               RTM2TRRA=0;         /* INDICATE ABDUMP NOT TO BE   0331
*                                      ENTERED DURING RECURSION      */
         SLR   @14,@14                                             0331
         ST    @14,RTM2TRRA(,RTM2PTR)                              0331
*               RFY                                                0332
*                (R0) RSTD;                                        0332
*               R0=80;              /* INDICATE LENGTH OF MESSAGE  0333
*                                      BUFFER                        */
         LA    R0,80                                               0333
*               GENERATE REFS(R0);                                 0334
         GETMAIN RC,LV=(R0),SP=253   GET CORE FOR MESSAGE BUFFER
*               RFY                                                0335
*                 R0 UNRSTD;                                       0335
*               IF RETCODE=0 THEN                                  0336
         LTR   RETCODE,RETCODE                                     0336
         BNZ   @RF00336                                            0336
*                 DO;                                              0337
*                   RESPECIFY                                      0338
*                    (R11) RESTRICTED;                             0338
*                   R11=PARMPTR;    /* SAVE ADDR OF BUFFER           */
         LR    R11,PARMPTR                                         0339
*                   BUFFER(1:65)=OPENMSG;/* MOVE MESSAGE TO BUFFER 0340
*                                                            @YM07271*/
         MVC   BUFFER(65,PARMPTR),OPENMSG                          0340
*                   JSTCBPTR=TCBJSTCA;/* PICK UP JS-TCB POINTER      */
         L     @14,TCBPTR                                          0341
         SLR   JSTCBPTR,JSTCBPTR                                   0341
         ICM   JSTCBPTR,7,TCBJSTCA(@14)                            0341
*                   IF TCBPTR^=JSTCBPTR/* DETERMINE WHICH TCB      0342
*                                      REQUESTED DUMP: SUBTASK OR  0342
*                                      JOBSTEP                       */
*                     THEN                                         0342
         CR    @14,JSTCBPTR                                        0342
         BE    @RF00342                                            0342
*                     OPMSGST='ST'; /* INDICATE SUBTASK IN MESSAGE   */
         MVC   OPMSGST+46(2,PARMPTR),@CC03643                      0343
*                   BUFFER(50:61)=' ';/* CLEAR DUE TO PORTION OF BUF
*                                                            @YM07271*/
@RF00342 MVI   BUFFER+50(PARMPTR),C' '                             0344
         MVC   BUFFER+51(10,PARMPTR),BUFFER+50(PARMPTR)            0344
         MVI   BUFFER+49(PARMPTR),C' '                             0344
*                   GENERATE;                                      0345
         WTO   MF=(E,(PARMPTR))    ROUTE MESSAGE TO PROGRAMMER
         FREEMAIN R,LV=80,SP=253,A=(11)  FREE CORE
*                   PARMPTR=OCDCBADR;/* GET ADDRESS OF DCB & PARMLIST*/
         L     @14,DCBPTR                                          0346
         SLR   PARMPTR,PARMPTR                                     0346
         ICM   PARMPTR,7,OCDCBADR+88(@14)                          0346
*                   RFY                                            0347
*                     R3 RSTD;                                     0347
*                   R3=TCBPKF;      /* GET TCB KEY           @YM01200*/
         L     @14,TCBPTR                                          0348
         SLR   R3,R3                                               0348
         IC    R3,TCBPKF(,@14)                                     0348
*                   RTM2EFRM='1'B;  /* INDICATE FREEMAIN IN CONTRL   */
         OI    RTM2EFRM(RTM2PTR),B'00000100'                       0349
*                   RFY                                            0350
*                     RTM2SWA RSTD; /*                       @YM01200*/
*/*   RELEASE THE CORE USED FOR DCB, OPEN PARM LIST, QMNGRIO         */
*/*   WORKAREA AND PARM LIST, AND JFCB/JFCBE READ IN AREA    @Z40MPXH*/
*                                                                  0351
*                   RFY                                            0351
*                     R0 RSTD;                                     0351
*                   R0=LENGTH(COREAREA);/* GETMAINED AREA OF CORE  0352
*                                                            @Z40MPXH*/
         LA    R0,503                                              0352
*                   RTM2SWA=RTM2PTR;/* SAVE WKAREA ADDR      @YM01200*/
         LR    RTM2SWA,RTM2PTR                                     0353
*                   ASCBPTR=PSAAOLD;/* GET CURRENT ASCB PTR  @YM01200*/
         L     ASCBPTR,PSAAOLD                                     0354
*                   RFY                                            0355
*                     R4 RSTD;      /*                       @G33SPHW*/
*                   R4=TCBPTR;      /* PUT TCB ADDRESS IN R4 FOR   0356
*                                      FREEMAIN              @G33SPHW*/
         LR    R4,@14                                              0356
*                   GENERATE;                                      0357
         STM R11,R14,RTM2RMSA(RTM2SWA)                         @YM01200
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=('IEAVTABD')
         FREEMAIN RC,LV=(R0),A=(1),SP=230,BRANCH=YES,KEY=(3)   @YM01200
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=('IEAVTABD')       @YM01200
         LM R11,R14,RTM2RMSA(RTM2SWA)                          @YM01200
*                   RFY                                            0358
*                     R4 UNRSTD;    /*                       @G33SPHW*/
*                   RFY                                            0359
*                    (R3,                                          0359
*                     R0) UNRSTD;                                  0359
*                   RTM2PTR=RTM2SWA;/* RESTORE RTM2 WKAREA ADDR    0360
*                                                            @YM01200*/
         LR    RTM2PTR,RTM2SWA                                     0360
*                   RFY                                            0361
*                     RTM2SWA UNRSTD;/*                      @YM01200*/
*                 END;                                             0362
*               RTM2SNCC=4;         /* INDICATE OPEN FAILURE TO RTM2 */
@RF00336 MVC   RTM2SNCC(4,RTM2PTR),@CF00103                        0363
*               PARMPTR=ADDR(ENQPARMS);/* GET ADDRESS OF DEQ       0364
*                                      PARAMETER LIST                */
         LA    PARMPTR,ENQPARMS(,RTM2PTR)                          0364
*               GENERATE;                                          0365
         DEQ   (,,,STEP),RET=HAVE,MF=(E,(PARMPTR)) DEQ OFF DUMP DATASET
*               RESPECIFY                                          0366
*                (R11) UNRESTRICTED;                               0366
*             END;                                                 0367
         EJECT
*           ELSE                                                   0368
*             IF RTM2DD='SYSMDUMP' THEN/* SYSMDUMP REQUEST   @G33SPHW*/
         B     @RC00329                                            0368
@RF00329 CLC   RTM2DD(8,RTM2PTR),@CC03623                          0368
         BNE   @RF00368                                            0368
*               DO;                 /* YES...                @G33SPHW*/
*                                                                  0369
*                 /***************************************************/
*                 /*                                                 */
*                 /* FUNCTION OF THIS ROUTINE IS TO BUILD THE        */
*                 /* PARMLIST FOR SDUMP AND OBTAIN THE WORKAREAS     */
*                 /* REQUIRED BY SDUMP TO TAKE A DUMP. A BUFFER THE  */
*                 /* LENGTH OF SDCNTRL PORTION OF SDWORKAREA IS      */
*                 /* OBTAINED FROM LSQA AND A BUFFER THE SIZE OF     */
*                 /* SDBUFFER PORTION OF SDWORKAREA + THE HEADER     */
*                 /* LENGTH(MRMQHEAD) IS OBTAINED FROM CSA IN THE KEY*/
*                 /* OF THE TCB. THE ADDRESS OF THE CSA AREA IS PUT  */
*                 /* IN THE SDCNTRL SECTION OF SDWORK. THE ADDRESS OF*/
*                 /* THE CSA AREA IS CHAINED TO A FIELD IN THE RTCT  */
*                 /* (RTCTMRMQ) THE ADDRESS IS CHAINED OFF THE RTCT  */
*                 /* IN CASE OF MEMTERM HAPPENING WHEN SYSMDUMP IS   */
*                 /* RUNNING. IF MEMTERM OCCURS IEAVTMRM(RTM RESOURCE*/
*                 /* MGR.) WILL USE THIS QUEUE TO FREE THE CSA       */
*                 /* STORAGE USING THE HEADER INFORMATION FOR KEY    */
*                 /* LENGTH AND ADDRESS. THIS QUEUE WILL KEEP ITS    */
*                 /* INTEGRITY BY HAVING USERS OF QUEUE TO OBTAIN CMS*/
*                 /* LOCK BEFORE REF. UNDER NORMAL CLEANUP IEAVTABD  */
*                 /* WILL FREE THE CSA STORAGE AND REMOVE ENTRY FROM */
*                 /* QUEUE. ANOTHER AREA OF STORAGE WILL BE OBTAINED */
*                 /* FROM LSQA A 4096 BYTE SDUMP BUFFER. A DECB WILL */
*                 /* BE OBTAINED FROM SP250 UNPROTECTED STORAGE AND  */
*                 /* PASSED TO SDUMP TO BE USED WHEN WRITING OUT THE */
*                 /* SYSMDUMP. ALL STORAGE WILL BE FREED BY IEAVTABD.*/
*                 /*                                         @G33SPHW*/
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0370
*/********************************************************************/
*/*                    SYSMDUMP AQQUIRED STORAGE                     */
*/*                    _________________________                     */
*/*     SDUMP        SDCNTRL      SDBUFF      DECB        WORK       */
*/*     PARMLIST     (SDWORK)     (SDWORK)                AREA       */
*/*     --------     --------     --------    --------    --------   */
*/*     ×FROM  ×     ×FROM  ×     × FROM ×    ×FROM  ×    ×FROM  ×   */
*/*     ×LSQA  ×     ×LSQA  ×     × CSA  ×    ×SP250 ×    × LSQA ×   */
*/*     × 24   ×     ×      ×     × USER ×    ×32    ×    × 4096 ×   */
*/*     × BYTES×     ×      ×     × KEY  ×    ×BYTES ×    × BYTES×   */
*/*     ×      ×     ×      ×     × 4104 ×    ×      ×    ×      ×   */
*/*     ×SDCNTR×->   ×      ×     × BYTES×    × DCB  ×->  ×      ×   */
*/*     ×WORKA ×->   ×      ×     ×      ×    ×SDBUFF×->  ×      ×   */
*/*     --------     ×      ×     ×      ×    ×      ×    ×      ×   */
*/*                  ×      ×     ×      ×    --------    ×      ×   */
*/*                  ×SDBUFF×->   ×      ×                ×      ×   */
*/*                  × DECB ×->   ×      ×                ×      ×   */
*/*                  --------     --------                --------   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0370
*                 RFY                                              0370
*                  (R0) RSTD;                                      0370
*                 R0=4096;          /* SIZE OF BUFFER IN R0  @G33SPHW*/
         LH    R0,@CH03647                                         0371
*                 RTM2EGET='1'B;    /* GETMAIN IN CONTROL    @G33SPHW*/
         OI    RTM2EGET(RTM2PTR),B'01000000'                       0372
*                 GENERATE REFS(R0);                               0373
        GETMAIN RC,LV=(R0),SP=253  GETMAIN 4K BUFFER AREA     G33SPHW
*                 RFY                                              0374
*                   R0 UNRSTD;                                     0374
*                 RTM2EGET='0'B;    /* GETMAIN NOT IN CONTROL      0375
*                                                            @G33SPHW*/
         NI    RTM2EGET(RTM2PTR),B'10111111'                       0375
*                 IF RETCODE^=0 THEN/* GETMAIN UNSUCCESSFUL  @G33SPHW*/
         LTR   RETCODE,RETCODE                                     0376
         BZ    @RF00376                                            0376
*                   DO;             /* YES - FAILED          @G33SPHW*/
*                     RTM2NDMP=ON;  /* INDICATE NO DUMP      @G33SPHW*/
         OI    RTM2NDMP(RTM2PTR),B'10000000'                       0378
*                     CALL ADSPFAIL;/* FAILED MESSAGE        @G33SPHW*/
         BAL   @14,ADSPFAIL                                        0379
*                   END;            /* END GETMAIN FAILED    @G33SPHW*/
*                 ELSE              /* GETMAIN OK            @G33SPHW*/
*                   DO;             /* OBTAIN 4K WORKAREA    @G33SPHW*/
*                                                                  0381
         B     @RC00376                                            0381
@RF00376 DS    0H                                                  0382
*                     /***********************************************/
*                     /*                                             */
*                     /* GETMAIN SDCNTRL PORTION OF SDWORK FROM LSQA */
*                     /* PUT ADDRESS IN SDUMP PARMLIST(SDUSYSMC).    */
*                     /*                                     @G33SPHW*/
*                     /*                                             */
*                     /***********************************************/
*                                                                  0382
*                     RFY                                          0382
*                       R0 RSTD;                                   0382
*                     SDUSYSMS=PARMPTR;/* SAVE 4K WORKAREA ADDR IN 0383
*                                      SDUMP PARMLIST        @G33SPHW*/
         L     @14,SDUMPPTR                                        0383
         ST    PARMPTR,SDUSYSMS(,@14)                              0383
*                     R0=LENGTH(SDCNTRL);/* LENGTH OF CONTROL SECTION
*                                      OF SDWORK USED BY SDUMP     0384
*                                      PROCESSING SYSMDUMPS  @G33SPHW*/
         LA    R0,432                                              0384
*                     RTM2EGET='1'B;/* GETMAIN IN CONTROL    @G33SPHW*/
         OI    RTM2EGET(RTM2PTR),B'01000000'                       0385
*                     GENERATE REFS(R0,PARMPTR);                   0386
         GETMAIN RC,LV=(R0),SP=253    GETMAIN LSQA SDUMP CONTROL
*                     RTM2EGET='0'B;/* GETMAIN NOT IN CONTROL      0387
*                                                            @G33SPHW*/
         NI    RTM2EGET(RTM2PTR),B'10111111'                       0387
*                     IF RETCODE^=0 THEN/* GETMAIN SUCCESSFUL      0388
*                                                            @G33SPHW*/
         LTR   RETCODE,RETCODE                                     0388
         BZ    @RF00388                                            0388
*                       DO;         /* NO ... FREE UP STORAGE      0389
*                                                            @G33SPHW*/
*                         RTM2NDMP=ON;/* INDICATE NO DUMP    @G33SPHW*/
         OI    RTM2NDMP(RTM2PTR),B'10000000'                       0390
*                         CALL ADSPFAIL;/* ERROR MESSAGE     @G33SPHW*/
         BAL   @14,ADSPFAIL                                        0391
*                       END;        /* END GETMAIN FAILED    @G33SPHW*/
*                     ELSE          /* GETMAIN OK            @G33SPHW*/
*                       DO;         /* ISSUE SDUMP           @G33SPHW*/
         B     @RC00388                                            0393
@RF00388 DS    0H                                                  0394
*                         SDUSYSMC=PARMPTR;/* PUT ADDRESS OF SDUMP 0394
*                                      WORKAREA IN PARMLIST  @G33SPHW*/
         L     @14,SDUMPPTR                                        0394
         ST    PARMPTR,SDUSYSMC(,@14)                              0394
*                                                                  0395
*                         /*******************************************/
*                         /*                                         */
*                         /* OBTAIN STORAGE FOR AN UNPROTECTED DECB  */
*                         /* AND SAVEAREA FOR USE BY SDUMP WHEN      */
*                         /* CALLING WRITE ROUTINE IEAVAD12. THE     */
*                         /* ADDRESS OF THE DECB WILL BE PUT IN      */
*                         /* SDCNTRL(SDSMDECB).              @G33SPHW*/
*                         /*                                         */
*                         /*******************************************/
*                                                                  0395
*                         RTM2EGET='1'B;/* GETMAIN IN CONTROL      0395
*                                                            @G33SPHW*/
         OI    RTM2EGET(RTM2PTR),B'01000000'                       0395
*                         GENERATE REFS(PARMPTR);                  0396
         GETMAIN RC,LV=104,SP=250    GETMAIN DECB AND SAVEAREA G33SPHW
*                         RTM2EGET='0'B;/* GETMAIN NOT IN CONTROL  0397
*                                                            @G33SPHW*/
         NI    RTM2EGET(RTM2PTR),B'10111111'                       0397
*                         IF RETCODE^=0 THEN/* GETMAIN SUCCESSFUL  0398
*                                                            @G33SPHW*/
         LTR   RETCODE,RETCODE                                     0398
         BZ    @RF00398                                            0398
*                           DO;     /* NO ... FREE UP STORAGE      0399
*                                                            @G33SPHW*/
*                             RTM2NDMP=ON;/* INDICATE NO DUMP      0400
*                                                            @G33SPHW*/
         OI    RTM2NDMP(RTM2PTR),B'10000000'                       0400
*                             CALL ADSPFAIL;/* ERROR MESSAGE @G33SPHW*/
         BAL   @14,ADSPFAIL                                        0401
*                           END;    /* END GETMAIN FAILED    @G33SPHW*/
*                         ELSE      /* GETMAIN OK            @G33SPHW*/
*                           DO;     /* CONTINUE SYSMDUMP     @G33SPHW*/
         B     @RC00398                                            0403
@RF00398 DS    0H                                                  0404
*                             MDECBPTR=PARMPTR;/* PUT BUFFER ADDRESS
*                                      IN DECB POINTER       @G33SPHW*/
         ST    PARMPTR,MDECBPTR                                    0404
*                             MDDECB(1:LENGTH(MDDECB))=''B;/* ZERO 0405
*                                      BUFFER                @G33SPHW*/
         L     @14,MDECBPTR                                        0405
         XC    MDDECB(104,@14),MDDECB(@14)                         0405
*                             SDSMDECB=MDECBPTR;/* ADDRESS OF SDUMP
*                                      DECB                  @G33SPHW*/
         L     @04,SDUMPPTR                                        0406
         L     @04,SDUSYSMC(,@04)                                  0406
         ST    @14,SDSMDECB(,@04)                                  0406
*                                                                  0407
*                             /***************************************/
*                             /*                                     */
*                             /* OBTAIN STORAGE FOR SDBUFFER PORTION */
*                             /* OF SDWORK. STORAGE WILL BE OUT OF   */
*                             /* SP231(CSA) IN THE TCBKEY. THE       */
*                             /* ADDRESS OF THIS BUFFER WILL BE PUT  */
*                             /* IN THE SDCNTRL(SDSMBUFF) PORTION OF */
*                             /* SDWORK. THE BUFFER WILL BE QUEUED   */
*                             /* OFF RTCT(RTCTMRMQ) THIS QUEUE WILL  */
*                             /* BE MODIFIED UNDER CMS LOCK. @G33SPHW*/
*                             /*                                     */
*                             /***************************************/
*                                                                  0407
*                             RESPECIFY                            0407
*                              (R3,                                0407
*                               ASCBPTR,                           0407
*                               R4,                                0407
*                               R0,                                0407
*                               RTM2SWA) RESTRICTED;               0407
*                             RTM2SWA=RTM2PTR;/* SAVE RTM2 POINTER 0408
*                                                            @G33SPHW*/
         LR    RTM2SWA,RTM2PTR                                     0408
*                             R3=TCBPKF;/* PUT TCB KEY IN R3 @G33SPHW*/
         L     @14,TCBPTR                                          0409
         SLR   R3,R3                                               0409
         IC    R3,TCBPKF(,@14)                                     0409
*                             RTM2EGET='1'B;/* GETMAIN IN CONTROL  0410
*                                                            @G33SPHW*/
         OI    RTM2EGET(RTM2PTR),B'01000000'                       0410
*                             ASCBPTR=PSAAOLD;/* PUT ASCB POINTER IN
*                                      R7                    @G33SPHW*/
         L     ASCBPTR,PSAAOLD                                     0411
*                             R4=TCBPTR;/* PUT TCB ADDRESS IN R4   0412
*                                                            @G33SPHW*/
         LR    R4,@14                                              0412
*                             R0=LENGTH(SDBUFFER)+LENGTH(MRMQHEAD);/*
*                                      SDUMP BUFFER + HEADER @G33SPHW*/
         LH    R0,@CH03741                                         0413
*                             GENERATE REFS(CVTPTR,CVTCRMN,CVTMAP, 0414
*                                 RTM2RMSA);                       0414
*                                                          /*@YM01200*/
         STM R11,R14,RTM2RMSA(RTM2SWA)
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=('IEAVTABD')
         GETMAIN RC,LV=(R0),SP=231,BRANCH=YES,KEY=(3)          @G33SPHW
         LM R11,R14,RTM2RMSA(RTM2SWA)                          @G33SPHW
*                             RESPECIFY                            0415
*                              (R3,                                0415
*                               ASCBPTR,                           0415
*                               R4,                                0415
*                               R0) UNRSTD;/*                @G33SPHW*/
*                             RTM2PTR=RTM2SWA;/* RESTORE RTM2 POINTER
*                                                            @G33SPHW*/
         LR    RTM2PTR,RTM2SWA                                     0416
*                             RTM2EGET='0'B;/* GETMAIN NOT IN CONTROL
*                                                            @G33SPHW*/
         NI    RTM2EGET(RTM2PTR),B'10111111'                       0417
*                             IF RETCODE^=0 THEN/* GETMAIN SUCCESSFUL
*                                                            @G33SPHW*/
         LTR   RETCODE,RETCODE                                     0418
         BZ    @RF00418                                            0418
*                               DO; /* NO ... FREE UP STORAGE      0419
*                                                            @G33SPHW*/
*                                 GENERATE REFS(CVTPTR,CVTCRMN,CVTMAP,
*                                     RTM2RMSA);                   0420
*                                                         /* @G33SPHW*/
         STM R11,R14,RTM2RMSA(RTM2SWA)
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=('IEAVTABD')       @G33SPHW
         LM R11,R14,RTM2RMSA(RTM2SWA)                          @G33SPHW
*                                 RTM2PTR=RTM2SWA;/* RESTORE RTM2  0421
*                                      POINTER               @G33SPHW*/
         LR    RTM2PTR,RTM2SWA                                     0421
*                                 RTM2NDMP=ON;/* INDICATE NO DUMP  0422
*                                                            @G33SPHW*/
         OI    RTM2NDMP(RTM2PTR),B'10000000'                       0422
*                                 CALL ADSPFAIL;/* ERROR MESSAGE   0423
*                                                            @G33SPHW*/
         BAL   @14,ADSPFAIL                                        0423
*                               END;/* END GETMAIN FAILED    @G33SPHW*/
*                             ELSE  /* GETMAIN OK            @G33SPHW*/
*                               DO; /* ISSUE SDUMP           @G33SPHW*/
         B     @RC00418                                            0425
@RF00418 DS    0H                                                  0426
*                                 MRMQPTR=R1;/* SAVE BUFFER ADDRESS
*                                                            @G33SPHW*/
         ST    R1,MRMQPTR                                          0426
*                                 MRMQCHN=0;/* ZERO CHAIN POINTER  0427
*                                                            @G33SPHW*/
         L     @14,MRMQPTR                                         0427
         SLR   @11,@11                                             0427
         ST    @11,MRMQCHN(,@14)                                   0427
*                                 MRMQLEN=LENGTH(SDBUFFER)+LENGTH( 0428
*                                     MRMQHEAD);/* LENGTH OF BUFFER
*                                                            @G33SPHW*/
         MVC   MRMQLEN(2,@14),@CH03741                             0428
*                                 MRMQSP=231;/* PUT SUBPOOOL NUMBER
*                                      IN HEADER             @G33SPHW*/
         MVI   MRMQSP(@14),X'E7'                                   0429
*                                 MRMQKEY=TCBPKF;/* PUT KEY IN HEADER
*                                                            @G33SPHW*/
         L     @11,TCBPTR                                          0430
         MVC   MRMQKEY(1,@14),TCBPKF(@11)                          0430
*                                 MRMQASID=ASCBASID;/* PUT ASID IN 0431
*                                      HEADER                @G33SPHW*/
         MVC   MRMQASID(2,@14),ASCBASID(ASCBPTR)                   0431
*                                 SYSMBUF=R1+LENGTH(MRMQHEAD);/* BUFF
*                                      ADDRESS IN DECB       @G33SPHW*/
         L     @14,MDECBPTR                                        0432
         LA    @11,12                                              0432
         ALR   @11,R1                                              0432
         ST    @11,SYSMBUF(,@14)                                   0432
*                                 SYSMDCB=DCBPTR;/* PUT DCB ADDRESS
*                                      IN DECB               @G33SPHW*/
         MVC   SYSMDCB(4,@14),DCBPTR                               0433
*                                 SDSMBUFF=SYSMBUF;/* PUT BUFFER   0434
*                                      ADDRESS IN FIRST HALF OF SDUMP
*                                      BUFFER                @G33SPHW*/
         L     @14,SDUMPPTR                                        0434
         L     @14,SDUSYSMC(,@14)                                  0434
         ST    @11,SDSMBUFF(,@14)                                  0434
*                                 GENERATE REFS(CVTPTR,CVTCRMN,CVTMAP,
*                                     RTM2RMSA);                   0435
*                                                          /*@YM01200*/
         STM R11,R14,RTM2RMSA(RTM2SWA)                         @G33SPHW
     SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,RELATED=('IEAVTABD')  @G33SPHW
         LM R11,R14,RTM2RMSA(RTM2SWA)                          @G33SPHW
*                                 IF RTCTMRMQ=0 THEN/* ANY SDUMP   0436
*                                      BUFFERS ON RTCT       @G33SPHW*/
         L     @14,CVTPTR                                          0436
         L     @14,CVTRTMCT(,@14)                                  0436
         ICM   @11,15,RTCTMRMQ(@14)                                0436
         BNZ   @RF00436                                            0436
*                                   DO;/* NO... ADD ENTRY    @G33SPHW*/
*                                    RTCTMRMQ=MRMQPTR;/* PUT ENTRY ON
*                                      RTCT                  @G33SPHW*/
         MVC   RTCTMRMQ(4,@14),MRMQPTR                             0438
*                                   END;/* END NO ENTRIES    @G33SPHW*/
*                                 ELSE/* NOT ZERO            @G33SPHW*/
*                                   DO;/* PUT ENTRY AT END OF CHAIN
*                                                            @G33SPHW*/
         B     @RC00436                                            0440
@RF00436 DS    0H                                                  0441
*                                    SAVMRMQ=RTCTMRMQ;/* GET FIRST 0441
*                                      ENTRY                 @G33SPHW*/
         L     @14,CVTPTR                                          0441
         L     @14,CVTRTMCT(,@14)                                  0441
         L     SAVMRMQ,RTCTMRMQ(,@14)                              0441
*                                    DO WHILE SAVMRMQ->MRMQCHN^=0;/*
*                                      END OF CHAIN          @G33SPHW*/
         B     @DE00442                                            0442
@DL00442 DS    0H                                                  0443
*                                     SAVMRMQ=SAVMRMQ->MRMQCHN;/*  0443
*                                      NEXT ENTRY            @G33SPHW*/
         L     SAVMRMQ,MRMQCHN(,SAVMRMQ)                           0443
*                                    END;/* END... DOWHILE   @G33SPHW*/
@DE00442 ICM   @14,15,MRMQCHN(SAVMRMQ)                             0444
         BNZ   @DL00442                                            0444
*                                    SAVMRMQ->MRMQCHN=MRMQPTR;/*   0445
*                                      ENTRY ON CHAIN        @G33SPHW*/
         MVC   MRMQCHN(4,SAVMRMQ),MRMQPTR                          0445
*                                   END;/* END.. MULTI ENTRIES     0446
*                                                            @G33SPHW*/
*                                 GENERATE REFS(CVTPTR,CVTCRMN,CVTMAP,
*                                     RTM2RMSA);                   0447
*                                                                  0447
@RC00436 DS    0H                                                  0447
*                                                          /*@YM01200*/
         STM R11,R14,RTM2RMSA(RTM2SWA)
         SETLOCK RELEASE,TYPE=CMS,RELATED=('IEAVTABD')       @YM01200
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=('IEAVTABD')       @YM01200
         LM R11,R14,RTM2RMSA(RTM2SWA)                          @YM01200
*                                 /***********************************/
*                                 /*                                 */
*                                 /* INITIALIZE SDUMP PARMLIST       */
*                                 /*                         @G33SPHW*/
*                                 /*                                 */
*                                 /***********************************/
*                                                                  0448
*                                 SDUABEND=ON;/* INDICATE SYSMDUMP 0448
*                                      CALLER                @G33SPHW*/
*                                 SDUNEW=ON;/* ENHANCED SVC DUMP   0449
*                                                            @G33SPHW*/
         L     @14,SDUMPPTR                                        0449
         OI    SDUABEND(@14),B'01100000'                           0449
*                                 SDUDCB=ON;/* DCB SPECIFIED @G33SPHW*/
*                                 SDUHDR=ON;/* HEADER SPECIFIED    0451
*                                                            @G33SPHW*/
         OI    SDUDCB(@14),B'10010000'                             0451
*                                 DUMPTYPE=ON;/* SVC DUMP REQUEST  0452
*                                                            @G33SPHW*/
         OI    DUMPTYPE(@14),B'10000000'                           0452
*                                 SDUDCBAD=DCBPTR;/* DCB ADDRESS   0453
*                                                            @G33SPHW*/
         MVC   SDUDCBAD(4,@14),DCBPTR                              0453
         EJECT
*                                                                  0454
*                                 /***********************************/
*                                 /*                                 */
*                                 /* GET DUMP OPTIONS FOR SYSMDUMP.  */
*                                 /* THE DUMP OPTIONS ARE OBTAINED   */
*                                 /* FROM THE RTCT AND THE DUMP      */
*                                 /* OPTIONS IN THE RTM2WA.  @G33SPHW*/
*                                 /*                                 */
*                                 /***********************************/
*                                                                  0454
*                                 IF MDTYPE='0'B THEN/* ADD OPTION ON
*                                                            @G33SPHW*/
         L     @11,CVTPTR                                          0454
         L     @11,CVTRTMCT(,@11)                                  0454
         TM    MDTYPE+244(@11),B'00000010'                         0454
         BNZ   @RF00454                                            0454
*                                   DO;/* YES-PROCESS RTM2WA OPTIONS
*                                                            @G33SPHW*/
*                                    IF SNPSDATA^=0 THEN/* ANY     0456
*                                      OPTIONS               @G33SPHW*/
         LA    @11,256                                             0456
         ALR   @11,RTM2PTR                                         0456
         ICM   @04,3,SNPSDATA(@11)                                 0456
         BZ    @RF00456                                            0456
*                                     DO;/* YES..            @G33SPHW*/
*                                      IF SNPNUC=ON THEN/* NUCLEUS 0458
*                                      REQUESTED             @G33SPHW*/
         TM    SNPNUC(@11),B'10000000'                             0458
         BNO   @RF00458                                            0458
*                                       DO;/*                @G33SPHW*/
*                                        SDUNUC=ON;/* DUMP NUCLEUS 0460
*                                      SQA                   @G33SPHW*/
*                                        SDUSQA=ON;/* LSQA AND PSA TO
*                                                            @G33SPHW*/
*                                        SDULSQA=ON;/* STAY        0462
*                                      COMPATIBLE WITH       @G33SPHW*/
*                                        SDUPSA=ON;/* VS1    @G33SPHW*/
         OI    SDUNUC(@14),B'01111000'                             0463
*                                       END;/* END NUC SPECIFIED   0464
*                                                            @G33SPHW*/
*                                      ELSE/* NUC NOT SPECIFIED    0465
*                                                            @G33SPHW*/
*                                       DO;/* CHECK FOR SQA OR LSQA
*                                                            @G33SPHW*/
         B     @RC00458                                            0465
@RF00458 DS    0H                                                  0466
*                                        IF SNPSQA=ON THEN/* SQA   0466
*                                      REQUESTED             @G33SPHW*/
         TM    SNPSQA+256(RTM2PTR),B'01000000'                     0466
         BNO   @RF00466                                            0466
*                                         SDUSQA=ON;/* SET SQA OPTION
*                                      ON                    @G33SPHW*/
         L     @14,SDUMPPTR                                        0467
         OI    SDUSQA(@14),B'00010000'                             0467
*                                        IF SNPLSQA=ON THEN/* LSQA 0468
*                                      REQUESTED             @G33SPHW*/
@RF00466 TM    SNPLSQA+256(RTM2PTR),B'00100000'                    0468
         BNO   @RF00468                                            0468
*                                         SDULSQA=ON;/* SET LSQA   0469
*                                      OPTION ON             @G33SPHW*/
         L     @14,SDUMPPTR                                        0469
         OI    SDULSQA(@14),B'00001000'                            0469
*                                       END;/* END NUC NOT SPECIFIED
*                                                            @G33SPHW*/
@RF00468 DS    0H                                                  0471
*                                      IF SNPSWA=ON THEN/* SWA     0471
*                                      REQUESTED             @G33SPHW*/
@RC00458 TM    SNPSWA+256(RTM2PTR),B'00010000'                     0471
         BNO   @RF00471                                            0471
*                                       SDUSWA=ON;/* SET SWA ON    0472
*                                                            @G33SPHW*/
         L     @14,SDUMPPTR                                        0472
         OI    SDUSWA(@14),B'01000000'                             0472
*                                      IF SNPTRT=ON THEN/* TRACE   0473
*                                      REQUESTED OPTION      @G33SPHW*/
@RF00471 TM    SNPTRT+256(RTM2PTR),B'00001000'                     0473
         BNO   @RF00473                                            0473
*                                       SDUTRT=ON;/* SET TRACE OPTION
*                                      ON                    @G33SPHW*/
         L     @14,SDUMPPTR                                        0474
         OI    SDUTRT(@14),B'00000001'                             0474
*                                      IF SNPLPA=ON THEN/* LPA     0475
*                                      REQUESTED OPTION      @G33SPHW*/
@RF00473 TM    SNPLPA+256(RTM2PTR),B'00010000'                     0475
         BNO   @RF00475                                            0475
*                                       SDULPA=ON;/* SET LPA OPTION
*                                      ON                    @G33SPHW*/
         L     @14,SDUMPPTR                                        0476
         OI    SDULPA(@14),B'00000010'                             0476
*                                      IF SNPQCB=ON THEN/* QCB     0477
*                                      REQUESTED             @G33SPHW*/
@RF00475 TM    SNPQCB+256(RTM2PTR),B'00000010'                     0477
         BNO   @RF00477                                            0477
*                                       SDUSQA=ON;/* SET SQA ON    0478
*                                                            @G33SPHW*/
         L     @14,SDUMPPTR                                        0478
         OI    SDUSQA(@14),B'00010000'                             0478
*                                      IF SNPCB=ON THEN/* CONTROL  0479
*                                      BLOCKS REQUESTED      @G33SPHW*/
@RF00477 TM    SNPCB+256(RTM2PTR),B'00000100'                      0479
         BNO   @RF00479                                            0479
*                                       SDULSQA=ON;/* REQUEST LSQA 0480
*                                                            @G33SPHW*/
         L     @14,SDUMPPTR                                        0480
         OI    SDULSQA(@14),B'00001000'                            0480
*                                      IF SNPDM=ON THEN/* DATA     0481
*                                      MANAGEMENT REQUESTED  @G33SPHW*/
@RF00479 TM    SNPDM+256(RTM2PTR),B'00000001'                      0481
         BNO   @RF00481                                            0481
*                                       SDURGN=ON;/* REQUEST REGION
*                                                            @G33SPHW*/
         L     @14,SDUMPPTR                                        0482
         OI    SDURGN(@14),B'00000100'                             0482
*                                      IF SNPIO=ON THEN/* IOS CONTROL
*                                      BLOCKS REQUESTED      @G33SPHW*/
@RF00481 TM    SNPIO+256(RTM2PTR),B'10000000'                      0483
         BNO   @RF00483                                            0483
*                                       SDURGN=ON;/* REQUEST REGION
*                                                            @G33SPHW*/
         L     @14,SDUMPPTR                                        0484
         OI    SDURGN(@14),B'00000100'                             0484
*                                      IF SNPERR=ON THEN/* RTM     0485
*                                      CONTROL BLOCKS REQUESTED    0485
*                                                            @G33SPHW*/
@RF00483 TM    SNPERR+256(RTM2PTR),B'01000000'                     0485
         BNO   @RF00485                                            0485
*                                       SDULSQA=ON;/* REQUEST LSQA 0486
*                                                            @G33SPHW*/
         L     @14,SDUMPPTR                                        0486
         OI    SDULSQA(@14),B'00001000'                            0486
*                                      IF SNPPDATA^=0 THEN/* ANY   0487
*                                      PDATA OPTIONS REQUESTED     0487
*                                                            @G33SPHW*/
@RF00485 CLI   SNPPDATA+256(RTM2PTR),0                             0487
         BE    @RF00487                                            0487
*                                       SDURGN=ON;/* SET REGION    0488
*                                      OPTION ON             @G33SPHW*/
         L     @14,SDUMPPTR                                        0488
         OI    SDURGN(@14),B'00000100'                             0488
*                                     END;/* END TYPE EQUAL ADD    0489
*                                                            @G33SPHW*/
@RF00487 DS    0H                                                  0490
*                                   END;/* NO OPTIONS        @G33SPHW*/
@RF00456 DS    0H                                                  0491
*                                 IF MDNUC=ON THEN/* NUCLEUS       0491
*                                      REQUESTED             @G33SPHW*/
@RF00454 L     @14,CVTPTR                                          0491
         L     @14,CVTRTMCT(,@14)                                  0491
         TM    MDNUC+244(@14),B'10000000'                          0491
         BNO   @RF00491                                            0491
*                                   DO;/* YES .. SET NUC AND PSA ON
*                                                            @G33SPHW*/
*                                    SDUNUC=ON;/* SET NUCLEUS OPTION
*                                      ON                    @G33SPHW*/
*                                    SDUPSA=ON;/* SET PSA OPTION ON
*                                                            @G33SPHW*/
         L     @14,SDUMPPTR                                        0494
         OI    SDUNUC(@14),B'01100000'                             0494
*                                   END;/* END NUC REQUESTED @G33SPHW*/
*                                 IF MDSQA=ON THEN/* SQA REQUESTED 0496
*                                                            @G33SPHW*/
@RF00491 L     @14,CVTPTR                                          0496
         L     @14,CVTRTMCT(,@14)                                  0496
         TM    MDSQA+244(@14),B'01000000'                          0496
         BNO   @RF00496                                            0496
*                                   SDUSQA=ON;/* SET SQA OPTION ON 0497
*                                                            @G33SPHW*/
         L     @14,SDUMPPTR                                        0497
         OI    SDUSQA(@14),B'00010000'                             0497
*                                 IF MDLSQA=ON THEN/* LSQA REQUESTED
*                                                            @G33SPHW*/
@RF00496 L     @14,CVTPTR                                          0498
         L     @14,CVTRTMCT(,@14)                                  0498
         TM    MDLSQA+244(@14),B'00100000'                         0498
         BNO   @RF00498                                            0498
*                                   SDULSQA=ON;/* SET LSQA OPTION ON
*                                                            @G33SPHW*/
         L     @14,SDUMPPTR                                        0499
         OI    SDULSQA(@14),B'00001000'                            0499
*                                 IF MDSWA=ON THEN/* SWA REQUESTED 0500
*                                                            @G33SPHW*/
@RF00498 L     @14,CVTPTR                                          0500
         L     @14,CVTRTMCT(,@14)                                  0500
         TM    MDSWA+244(@14),B'00010000'                          0500
         BNO   @RF00500                                            0500
*                                   SDUSWA=ON;/* SET SWA OPTION AND
*                                                            @G33SPHW*/
         L     @14,SDUMPPTR                                        0501
         OI    SDUSWA(@14),B'01000000'                             0501
*                                 IF MDTRT=ON THEN/* TRACE REQUESTED
*                                                            @G33SPHW*/
@RF00500 L     @14,CVTPTR                                          0502
         L     @14,CVTRTMCT(,@14)                                  0502
         TM    MDTRT+244(@14),B'00001000'                          0502
         BNO   @RF00502                                            0502
*                                   SDUTRT=ON;/* SET TRACE OPTION ON
*                                                            @G33SPHW*/
         L     @14,SDUMPPTR                                        0503
         OI    SDUTRT(@14),B'00000001'                             0503
*                                 IF MDRGN=ON THEN/* REGION REQUESTED
*                                                            @G33SPHW*/
@RF00502 L     @14,CVTPTR                                          0504
         L     @14,CVTRTMCT(,@14)                                  0504
         TM    MDRGN+244(@14),B'00000100'                          0504
         BNO   @RF00504                                            0504
*                                   SDURGN=ON;/* SET REGION OPTION ON
*                                                            @G33SPHW*/
         L     @14,SDUMPPTR                                        0505
         OI    SDURGN(@14),B'00000100'                             0505
*                                 IF MDLPA=ON THEN/* LPA REQUESTED 0506
*                                                            @G33SPHW*/
@RF00504 L     @14,CVTPTR                                          0506
         L     @14,CVTRTMCT(,@14)                                  0506
         TM    MDLPA+244(@14),B'00000010'                          0506
         BNO   @RF00506                                            0506
*                                   SDULPA=ON;/* SET LPA OPTIONS ON
*                                                            @G33SPHW*/
         L     @14,SDUMPPTR                                        0507
         OI    SDULPA(@14),B'00000010'                             0507
*                                 IF MDCSA=ON THEN/* CSA REQUESTED 0508
*                                                            @G33SPHW*/
@RF00506 L     @14,CVTPTR                                          0508
         L     @14,CVTRTMCT(,@14)                                  0508
         TM    MDCSA+244(@14),B'00000001'                          0508
         BNO   @RF00508                                            0508
*                                   SDUCSA=ON;/* SET CSA OPTION ON 0509
*                                                            @G33SPHW*/
         L     @14,SDUMPPTR                                        0509
         OI    SDUCSA(@14),B'10000000'                             0509
*                                 IF SDUSDAT1='00'X&/* ANY OPTIONS 0510
*                                      REQUESTED             @G33SPHW*/
*                                     SDUSDAT2='00'X THEN/* FOR    0510
*                                      SYSMDUMP              @G33SPHW*/
@RF00508 L     @14,SDUMPPTR                                        0510
         CLI   SDUSDAT1(@14),X'00'                                 0510
         BNE   @RF00510                                            0510
         CLI   SDUSDAT2(@14),X'00'                                 0510
         BNE   @RF00510                                            0510
*                                   DO;/* ANY OPTIONS REQUESTED    0511
*                                                            @G33SPHW*/
*                                    RTM2NDMP='1'B;/* NO-SET NO DUMP
*                                      TAKEN IN RTM2WA       @G33SPHW*/
         OI    RTM2NDMP(RTM2PTR),B'10000000'                       0512
*                                   END;/* END NO DUMP REQUESTED   0513
*                                                            @G33SPHW*/
*                                                                  0513
*                                 /***********************************/
*                                 /*                                 */
*                                 /* CHECK FOR ABSENCE OF OPTIONS AND*/
*                                 /* SET NO OPT KEYWORDS     @G33SPHW*/
*                                 /*                                 */
*                                 /***********************************/
*                                                                  0514
*                                 ELSE/* OPTIONS REQUESTED   @G33SPHW*/
*                                   DO;/* YES... CHECK NO OPTIONS  0514
*                                                            @G33SPHW*/
         B     @RC00510                                            0514
@RF00510 DS    0H                                                  0515
*                                    SDUPSA=ON;/* SET PSA OPTION   0515
*                                      ALWAYS REQUEST PSA IF ANY   0515
*                                      OPTIONS REQUESTED     @G33SPHW*/
         L     @14,SDUMPPTR                                        0515
         OI    SDUPSA(@14),B'01000000'                             0515
*                                    SDUSTOR='0'B;/* NO STORAGE LIST
*                                      FLAG                  @G33SPHW*/
         NI    SDUSTOR(@14),B'11011111'                            0516
*                                    SDUSTORA=0;/* ZERO STORAGE    0517
*                                      ADDRESS               @G33SPHW*/
         SLR   @11,@11                                             0517
         ST    @11,SDUSTORA(,@14)                                  0517
*                                    SDUECB='0'B;/* NO ECB SUPPLIED
*                                      FLAG                  @G33SPHW*/
         NI    SDUECB(@14),B'11110111'                             0518
*                                    SDUECBAD=0;/* ZERO ECB ADDRESS
*                                                            @G33SPHW*/
         ST    @11,SDUECBAD(,@14)                                  0519
*                                    SDUASID='0'B;/* NOASID FLAG SET
*                                                            @G33SPHW*/
*                                    SDUQUIET='0'B;/* SET NO QUIESE
*                                      FLAG                  @G33SPHW*/
*                                    SDUBRANH='0'B;/* SET NO BRANCH
*                                      CALL                  @G33SPHW*/
*                                    SDUBUF='0'B;/* NO 4K AREA TO BE
*                                      DUMPED                @G33SPHW*/
         NI    SDUASID(@14),B'10111000'                            0523
*                                    SDUNSMDP='1'B;/* SET NO SUMMARY
*                                      DUMP                  @G33SPHW*/
*                                    SDUNAPSA='1'B;/* SET NO ALLPSA
*                                      ON                    @G33SPHW*/
         OI    SDUNSMDP(@14),B'00011000'                           0525
*                                    IF SDUSQA='0'B THEN/* SQA NOT 0526
*                                      REQUESTED             @G33SPHW*/
         TM    SDUSQA(@14),B'00010000'                             0526
         BNZ   @RF00526                                            0526
*                                     SDUNASQA='1'B;/* SET NO SQA ON
*                                                            @G33SPHW*/
         OI    SDUNASQA(@14),B'00000100'                           0527
*                                   END;/* END... OPTIONS SPECIFIED
*                                                            @G33SPHW*/
@RF00526 DS    0H                                                  0529
         EJECT
*                                 IF RTM2NDMP=OFF THEN/* DUMP OPTIONS
*                                      OK                    @G33SPHW*/
@RC00510 TM    RTM2NDMP(RTM2PTR),B'10000000'                       0529
         BNZ   @RF00529                                            0529
*                                   DO;/* YES....            @G33SPHW*/
*                                                                  0530
*                                    /********************************/
*                                    /*                              */
*                                    /* BUILD THE SYSMDUMP HEADER    */
*                                    /* RECORD, USED AS HEADER IN    */
*                                    /* DUMP DATASET. RECORD CONTAINS*/
*                                    /* JOBNAME, STEPNAME, COMPLETION*/
*                                    /* CODE. THE JOBNAME IS OBTAINED*/
*                                    /* FROM THE TIOT. THE STEPNAME  */
*                                    /* FROM THE TIOT AND THE        */
*                                    /* COMPLETION CODE FROM THE TCB.*/
*                                    /* OBTAIN               @G33SPHW*/
*                                    /*                              */
*                                    /********************************/
*                                                                  0531
*                                    RFY                           0531
*                                     (R3,                         0531
*                                      R2,                         0531
*                                      SYSTEM,                     0531
*                                      USER) RSTD;                 0531
*                                    SDUHDRAD=MDHDPTR;/* PUT HEADER
*                                      ADDRESS IN SDUMP PARMLIST   0532
*                                                            @G33SPHW*/
         L     @14,MDHDPTR                                         0532
         L     @11,SDUMPPTR                                        0532
         ST    @14,SDUHDRAD(,@11)                                  0532
*                                    TIOTPTR=TCBTIO;/* TIOT POINTER
*                                      FROM TCB              @G33SPHW*/
         L     @11,TCBPTR                                          0533
         L     TIOTPTR,TCBTIO(,@11)                                0533
*                                    TITLEN=LENGTH(MDHEAD)-1;/*    0534
*                                      LENGTH OF HEADER      @G33SPHW*/
         MVI   TITLEN(@14),X'36'                                   0534
*                                    JOBHEAD=JOBCHAR;/* MOVE JOBNAME
*                                      INSERT TO HEADER      @G33SPHW*/
         MVC   JOBHEAD(8,@14),JOBCHAR                              0535
*                                    JOBNAME=TIOCNJOB;/* MOVE JOBNAME
*                                      TO HEADER             @G33SPHW*/
         MVC   JOBNAME(8,@14),TIOCNJOB(TIOTPTR)                    0536
*                                    STEPHEAD=STEPCHAR;/* MOVE     0537
*                                      STEPNAME INSERT TO HEADER   0537
*                                                            @G33SPHW*/
         MVC   STEPHEAD(10,@14),STEPCHAR                           0537
*                                    STEPNAME=TIOCSTEP;/* MOVE     0538
*                                      STEPNAME TO HEADER    @G33SPHW*/
*                                                                  0538
         MVC   STEPNAME(16,@14),TIOCSTEP(TIOTPTR)                  0538
*                                    /********************************/
*                                    /*                              */
*                                    /* USER AND SYSTEM = '00SSSUUU' */
*                                    /*                              */
*                                    /********************************/
*                                                                  0539
*                                    RFY                           0539
*                                      R0 RSTD;                    0539
*                                    USER=TCBCMPC;/* GET CODE INTO 0540
*                                      REGISTER              @G33SPHW*/
         SLR   USER,USER                                           0540
         ICM   USER,7,TCBCMPC(@11)                                 0540
*                                    R0=SYSTEM;/* SAVE COMPLETION  0541
*                                      CODE                  @G33SPHW*/
         LR    R0,SYSTEM                                           0541
*                                    GEN(SRL SYSTEM,12);/* ISOLATE 0542
*                                      SYSTEM CODE           @G33SPHW*/
         SRL SYSTEM,12
*                                    IF SYSTEM=0 THEN/* SYSTEM ERROR
*                                                            @G33SPHW*/
         LTR   SYSTEM,SYSTEM                                       0543
         BNZ   @RF00543                                            0543
*                                     DO;/* NO...PROCESS USER CODE 0544
*                                                            @G33SPHW*/
*                                      R3=R0;/* RESTORE USER CODE    */
         LR    R3,R0                                               0545
*                                      CVD(R3,COMPCODE);/* CONVERT 0546
*                                      USER CC TO DECIMAL    @YM07271*/
         CVD   R3,COMPCODE                                         0546
*                                      UNPK(COMPCODE(1:5),COMPCODE(6:8)
*                                          );/* UNPACK IT    @YM07271*/
         UNPK  COMPCODE(5),COMPCODE+5(3)                           0547
*                                      COMPCODE(5:5)=COMPCODE(5:5)×'F0'
*                                          ;/* FIX UP SIGN BYTE    0548
*                                                            @YM07271*/
         OI    COMPCODE+4,X'F0'                                    0548
*                                      COMPTYPE=USERCHAR;/* PUT USER
*                                      CODE HEADER           @G33SPHW*/
         L     @14,MDHDPTR                                         0549
         MVC   COMPTYPE(8,@14),USERCHAR                            0549
*                                      COMPCDE=COMPCODE(2:5);/* MOVE
*                                      IN CONDITION CODE     @G33SPHW*/
         MVC   COMPCDE(4,@14),COMPCODE+1                           0550
*                                     END;/* END...USER CODE @G33SPHW*/
*                                    ELSE/* PROCESS SYSTEM CODE    0552
*                                                            @G33SPHW*/
*                                     DO;/*                  @G33SPHW*/
         B     @RC00543                                            0552
@RF00543 DS    0H                                                  0553
*                                      R3=R3*256;/* SHIFT CC TO NEXT
*                                      BYTE FOR UNPACK       @YM07271*/
         SLL   R3,8                                                0553
*                                      COMPCODE(5:8)=R3;/* STORE IT
*                                      TO WORK ON IT         @YM07271*/
         ST    R3,COMPCODE+4                                       0554
*                                      UNPK(COMPCODE(1:5),COMPCODE(6:8)
*                                          );/* UNPACK SYS CODE    0555
*                                                            @YM07271*/
         UNPK  COMPCODE(5),COMPCODE+5(3)                           0555
*                                      TR(COMPCODE(1:4),TRANSTBL);/*
*                                      TRANS TO PRINT        @YM07271*/
         LA    @14,TRANMASK                                        0556
         AL    @14,@CF03784                                        0556
         TR    COMPCODE(4),TRANSTBL(@14)                           0556
*                                      COMPTYPE=SYSCHAR;/* SYSTEM  0557
*                                      HEADER                @G33SPHW*/
         L     @14,MDHDPTR                                         0557
         MVC   COMPTYPE(8,@14),SYSCHAR                             0557
*                                      COMPCDE=COMPCODE(2:4);/* MOVE
*                                      SYSTEM CODE TO HEADER @G33SPHW*/
         MVI   COMPCDE+3(@14),C' '                                 0558
         MVC   COMPCDE(3,@14),COMPCODE+1                           0558
*                                     END;/* END...SYSTEM CODE     0559
*                                                            @G33SPHW*/
*                                    RFY                           0560
*                                     (R3,                         0560
*                                      R2,                         0560
*                                      SYSTEM,                     0560
*                                      USER,                       0560
*                                      R0) UNRSTD;                 0560
@RC00543 DS    0H                                                  0561
         EJECT
*                                                                  0561
*                                    /********************************/
*                                    /*                              */
*                                    /* INVOKE SDUMP TO TAKE A       */
*                                    /* SYSMDUMP. INPUT TO SDUMP WILL*/
*                                    /* BE R1 POINTING AT SDUMP      */
*                                    /* PARMLIST. IF A ZERO RETURN   */
*                                    /* CODE COMES BACK FROM SDUMP   */
*                                    /* MSG IEA993I IS ISSUED. IF    */
*                                    /* RETCODE FOUR IS RETURNED FROM*/
*                                    /* SDUMP MSG IEA998I IS IS      */
*                                    /* ISSUED. IF ANY OTHER RETURN  */
*                                    /* CODE IS RECEIVED FROM SDUMP  */
*                                    /* MSG IEA912I IS ISSUED. THIS  */
*                                    /* ROUTINE AT COMPLETION WILL   */
*                                    /* EXIT TO ADRCLN TO DO CLEAN-UP*/
*                                    /* AND RETURN           @ZM45062*/
*                                    /*                              */
*                                    /********************************/
*                                                                  0561
*                                    RFY                           0561
*                                     (R2) RSTD;                   0561
*                                    PARMPTR=SDUMPPTR;/* POINT R1 TO
*                                      SDUMP PARMLIST        @G33SPHW*/
         L     PARMPTR,SDUMPPTR                                    0562
*                                    RTM2SMDP='1'B;/* SET SYSMDUMP 0563
*                                      FOOTPRINT             @G33SPHW*/
         OI    RTM2SMDP(RTM2PTR),B'01000000'                       0563
*                                    RTM2DSNP=ON;/* SNAP COMPLETE  0564
*                                                            @G33SPHW*/
*                                                                  0564
         OI    RTM2DSNP(RTM2PTR),B'00010000'                       0564
*                                    /********************************/
*                                    /*                              */
*                                    /* ISSUE SDUMP TO OBTAIN A      */
*                                    /* UNFORMATTED DUMP IF RETURN   */
*                                    /* CODE EQUAL 0 COMPLETE DUMP   */
*                                    /* TAKEN OR RETURN CODE EQUAL 4 */
*                                    /* PARTIAL DUMP TAKEN THEN WRITE*/
*                                    /* MSG DUMP COMPLETE TO         */
*                                    /* REQUESTOR.           @G33SPHW*/
*                                    /*                              */
*                                    /********************************/
*                                                                  0565
*                                    GEN(SDUMP MF=(E,(1)));/* ISSUE
*                                      SDUMP                 @G33SPHW*/
         SDUMP MF=(E,(1))
*                                    RTM2SMDP='0'B;/* RESET SYSMDUMP
*                                      FOOTPRINT             @G33SPHW*/
         NI    RTM2SMDP(RTM2PTR),B'10111111'                       0566
*                                    SAVMRET=RETCODE;/* SAVE MDUMP 0567
*                                      RETCODE               @ZM45062*/
         LR    SAVMRET,RETCODE                                     0567
*                                    IF RETCODE=0×RETCODE=4 THEN/* 0568
*                                      SDUMP SUCCESSFUL OR PARTIAL 0568
*                                      DUMP TAKEN TO SYSMDUMP DATASET
*                                                            @G33SPHW*/
         LTR   RETCODE,RETCODE                                     0568
         BZ    @RT00568                                            0568
         CH    RETCODE,@CH00103                                    0568
         BNE   @RF00568                                            0568
@RT00568 DS    0H                                                  0569
*                                     DO;/* YES... WRITE SUCCESS MSG
*                                                            @G33SPHW*/
*                                      DO;/* GETMAIN (RC) LV(88)   0570
*                                      SP(253)                       */
*                                       RESPECIFY                  0571
*                                        (GPR01F,                  0571
*                                         GPR15F,                  0571
*                                         GPR00F) RESTRICTED;      0571
*                                       GPR01F=0;/* REG 1 MUST BE  0572
*                                      ZERO                          */
         SLR   GPR01F,GPR01F                                       0572
*                                       GPR15F=0;/* RC-TYPE GETMAIN  */
         SLR   GPR15F,GPR15F                                       0573
*                                       GPR00F=88;/* LENGTH REQUESTED*/
         LA    GPR00F,88                                           0574
*                                       GPR15F=GPR15F×((253)*256);/*
*                                      SP IN BYTE 2                  */
         O     GPR15F,@CF03743                                     0575
*                                       SVC(120);/* RC/RU-FORM OF  0576
*                                      GETMAIN                       */
         SVC   120                                                 0576
*                                       RESPECIFY                  0577
*                                        (GPR01F,                  0577
*                                         GPR15F,                  0577
*                                         GPR00F) UNRESTRICTED;    0577
*                                      END;/* GETMAIN (RC) LV(88)  0578
*                                      SP(253) GETMAIN MSG BUFFER  0578
*                                                            @ZM45062*/
*                                      IF RETCODE=0 THEN/* GETMAIN 0579
*                                      SUCCESSFUL            @G33SPHW*/
         SLR   @14,@14                                             0579
         CR    RETCODE,@14                                         0579
         BNE   @RF00579                                            0579
*                                       DO;/* YES...         @G33SPHW*/
*                                        R2=PARMPTR;/* SAVE GETMAINED
*                                      ADDRESS               @G33SPHW*/
         LR    R2,PARMPTR                                          0581
*                                        IF SAVMRET=0 THEN/* COMPLETE
*                                      SYSMDUMP              @ZM45062*/
         CR    SAVMRET,@14                                         0582
         BNE   @RF00582                                            0582
*                                         DO;/* YES....      @ZM45062*/
*                                          BUFFER1(1:78)=MDUMPMSG;/*
*                                      MOVE SYSMDUMP SUCCESS MSG   0584
*                                                            @ZM45062*/
         MVC   BUFFER1(78,PARMPTR),MDUMPMSG                        0584
*                                          BUFFER1(31:74)=JFCBDSNM;/*
*                                      MOVE DSNAME TO MSG BUFFER   0585
*                                                            @ZM45062*/
         L     @14,JFCBPTR                                         0585
         MVC   BUFFER1+30(44,PARMPTR),JFCBDSNM(@14)                0585
*                                          GEN(WTO MF=(E,(PARMPTR)));
         WTO MF=(E,(PARMPTR))
*                                          /* WRITE MSG IEA993I    0587
*                                                            @G33SPHW*/
*                                         END;/* RETCODE EQUAL ZERO
*                                                            @ZM45062*/
*                                        ELSE/* RETCODE EQUAL 4    0588
*                                                            @ZM45062*/
*                                         DO;/* PUT OUT PARTIAL    0588
*                                      MESSAGE               @ZM45062*/
         B     @RC00582                                            0588
@RF00582 DS    0H                                                  0589
*                                          BUFFER1(1:86)=MDUMPPAR;/*
*                                      MOVE SYSMDUMP PARTIAL MSG   0589
*                                                            @ZM45062*/
         MVC   BUFFER1(86,PARMPTR),MDUMPPAR                        0589
*                                          BUFFER1(39:82)=JFCBDSNM;/*
*                                      MOVE DSNAME TO MSG BUFFER   0590
*                                                            @ZM45062*/
         L     @14,JFCBPTR                                         0590
         MVC   BUFFER1+38(44,PARMPTR),JFCBDSNM(@14)                0590
*                                          GEN(WTO MF=(E,(PARMPTR)));
         WTO MF=(E,(PARMPTR))
*                                          /* WRITE MSG IEA998I    0592
*                                                            @ZM45062*/
*                                         END;/* RETCODE EQUAL FOUR
*                                                            @ZM45062*/
*                                        DO;/* FREEMAIN(R)         0593
*                                      LV(88)SP(253)A(R2->BUFFER1)   */
@RC00582 DS    0H                                                  0594
*                                         RESPECIFY                0594
*                                          (GPR01F,                0594
*                                           GPR00F) RESTRICTED;    0594
*                                         GPR00F=88;/* LENGTH      0595
*                                      REQUESTED                     */
         LA    GPR00F,88                                           0595
*                                         GPR01F=253;/* SP IN REG 1  */
         LA    GPR01F,253                                          0596
*                                         GEN(SLL   GPR01F,24)     0597
*                                         NODEFS NOREFS NOSETS NOEXIT
*                                             NOFLOWS SEQFLOW;     0597
         SLL   GPR01F,24
*                                         GPR00F=GPR00F×GPR01F;/* SP
*                                      IN HI BYTE                    */
         OR    GPR00F,GPR01F                                       0598
*                                         GPR01F=ADDR(R2->BUFFER1);/*
*                                      SET REGISTER ONE              */
         LR    GPR01F,R2                                           0599
*                                         SVC(10);/* R-FORM OF     0600
*                                      GETMAIN                       */
         SVC   10                                                  0600
*                                         RESPECIFY                0601
*                                          (GPR01F,                0601
*                                           GPR00F) UNRESTRICTED;  0601
*                                        END;/* FREEMAIN(R)        0602
*                                      LV(88)SP(253)A(R2->BUFFER1) 0602
*                                      FREE BUFFER           @ZM45062*/
*                                       END;/* END...GETMAIN OK    0603
*                                                            @G33SPHW*/
*                                      ELSE                        0604
*                                       ;/* GETMAIN UNSUCCESSFUL   0604
*                                                            @G33SPHW*/
@RF00579 DS    0H                                                  0605
*                                     END;/* END...MDUMP OK  @G33SPHW*/
*                                    ELSE/* SYSMDUMP FAILED  @G33SPHW*/
*                                     DO;                          0606
         B     @RC00568                                            0606
@RF00568 DS    0H                                                  0607
*                                      CALL ADSPFAIL;/* WRITE OUT  0607
*                                      FAIL MSG              @G33SPHW*/
         BAL   @14,ADSPFAIL                                        0607
*                                     END;                         0608
*                                    RFY                           0609
*                                     (R2) UNRSTD;                 0609
@RC00568 DS    0H                                                  0610
*                                   END;/* END RTM2NDMP OFF  @G33SPHW*/
*                               END;/* GETMAIN OK WORKAREA   @G33SPHW*/
@RF00529 DS    0H                                                  0612
*                           END;    /* GETMAIN OK 4K BUFFER  @G33SPHW*/
@RC00418 DS    0H                                                  0613
*                       END;        /* GETMAIN OK            @G33SPHW*/
@RC00398 DS    0H                                                  0614
*                   END;            /* GETMAIN OK            @G33SPHW*/
@RC00388 DS    0H                                                  0615
*                 CALL ADCLEAN;     /* CLEANUP               @G33SPHW*/
@RC00376 BAL   @14,ADCLEAN                                         0615
*               END;                /* END...SYSMDUMP        @G33SPHW*/
         EJECT
*                                                                  0617
*           /*********************************************************/
*           /*                                                       */
*           /* NOT SYSMDUMP PROCESS SYSABEND OR SYSUDUMP     @G33SPHW*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0617
*             ELSE                                                 0617
*               DO;                 /* CONTINUE              @G33SPHW*/
         B     @RC00368                                            0617
@RF00368 DS    0H                                                  0618
*                 SNPDCB=DCBPTR;    /* PUT DCB ADDRESS IN SNAP PARM
*                                      LIST                          */
         MVC   SNPDCB+256(4,RTM2PTR),DCBPTR                        0618
*                 IF RTM2SNCC=0 THEN/* OPEN SUCCESSFUL               */
         ICM   @14,15,RTM2SNCC(RTM2PTR)                            0619
         BNZ   @RF00619                                            0619
*                   DO;                                            0620
*                                                                  0620
*                     /***********************************************/
*                     /*                                             */
*                     /* DUMP OPTIONS ARE DETERMINED FROM THREE      */
*                     /* SOURCES: REQUESTOR OPTIONS SPECIFIED IN THE */
*                     /* RTM2WA. CHNGDUMP OPTIONS SPECIFIED IN THE   */
*                     /* RTM CONTROL TABLE. AND PARMLIB OPTIONS      */
*                     /* SPECIFIED IN THE RTM CONTROL TABLE. THE     */
*                     /* ORDER OF SELECTION IS AS FOLLOWS: 1.        */
*                     /* CHNGDUMP OPTIONS WILL BE SELECTED IF        */
*                     /* OVERRIDE WAS REQUESTED ON CHNGDUMP. @G33SPHW*/
*                     /* 2. REQUESTOR OPTIONS WILL BE MERGED WITH    */
*                     /* PARMLIB OPTIONS                             */
*                     /*                                             */
*                     /***********************************************/
*                                                                  0621
*                     GENERATE REFS(RTM2RREG);                     0621
         STM   0,15,RTM2RREG(RTM2PTR) SAVE REGS FOR USE BY RECOVERY RTN
*ADDOPT:                                                           0622
*                     IF RTM2DD='SYSABEND'/* WAS A SYSABEND DUMP   0622
*                                      REQUESTED                     */
*                       THEN        /* YES                           */
ADDOPT   CLC   RTM2DD(8,RTM2PTR),@CC03621                          0622
         BNE   @RF00622                                            0622
*                       DO;                                        0623
*                         IF RTCTSAOV='1'B/* OVERIDE USER OPTIONS  0624
*                                                            @G33SPHW*/
*                           THEN    /* YES.. MOVE RTCT OPTIONS     0624
*                                                            @G33SPHW*/
         LA    @14,236                                             0624
         L     @11,CVTPTR                                          0624
         AL    @14,CVTRTMCT(,@11)                                  0624
         TM    RTCTSAOV(@14),B'00000010'                           0624
         BNO   @RF00624                                            0624
*                           DO;     /* TO THE SNAP PARMLIST  @G33SPHW*/
*                             SNPSDAT0=RTCTSAO1;/* SDATA OPTIONS   0626
*                                      FIRST BYTE            @G33SPHW*/
         LA    @11,256                                             0626
         ALR   @11,RTM2PTR                                         0626
         MVC   SNPSDAT0(1,@11),RTCTSAO1(@14)                       0626
*                             SNPSDAT1=RTCTSAO2;/* SDATA OPTIONS   0627
*                                      SECOND FLAG           @G33SPHW*/
         MVC   SNPSDAT1(1,@11),RTCTSAO2(@14)                       0627
*                             SNPPDATA=RTCTSAO3;/* PDATA OPTIONS TO
*                                      SNAP PARMS            @G33SPHW*/
         MVC   SNPPDATA(1,@11),RTCTSAO3(@14)                       0628
*                           END;                                   0629
*                         ELSE      /* MERGE OPTIONS                 */
*                           DO;                                    0630
         B     @RC00624                                            0630
@RF00624 DS    0H                                                  0631
*                             SNPSDAT0=SNPSDAT0×/* MERGE SDATA     0631
*                                      REQUESTOR AND PARMLIB         */
*                                 RTCTSAO1;/* OPTIONS                */
         LA    @14,256                                             0631
         ALR   @14,RTM2PTR                                         0631
         LA    @11,236                                             0631
         L     @04,CVTPTR                                          0631
         AL    @11,CVTRTMCT(,@04)                                  0631
         OC    SNPSDAT0(1,@14),RTCTSAO1(@11)                       0631
*                             SNPSDAT1=SNPSDAT1×/* MERGE SECOND SDATA
*                                      FLAGS AND@G33SPHW             */
*                                 RTCTSAO2;/* PARMLIB OPTIONS      0632
*                                                            @G33SPHW*/
         OC    SNPSDAT1(1,@14),RTCTSAO2(@11)                       0632
*                             SNPPDATA=SNPPDATA×/* MERGE PDATA     0633
*                                      REQUESTOR AND PARMLIB         */
*                                 RTCTSAO3;/* OPTIONS        @G33SPHW*/
         OC    SNPPDATA(1,@14),RTCTSAO3(@11)                       0633
*                           END;                                   0634
*                       END;                                       0635
*                     ELSE          /* A SYSUDUMP WAS REQUESTED      */
*                       DO;                                        0636
         B     @RC00622                                            0636
@RF00622 DS    0H                                                  0637
*                         IF RTCTSUOV='1'B/* OVERRIDE DUMP OPTIONS 0637
*                                                            @G33SPHW*/
*                           THEN    /* YES                           */
         LA    @14,236                                             0637
         L     @11,CVTPTR                                          0637
         AL    @14,CVTRTMCT(,@11)                                  0637
         TM    RTCTSUOV(@14),B'00000010'                           0637
         BNO   @RF00637                                            0637
*                           DO;                                    0638
*                             SNPSDAT0=RTCTSUO1;/* MOVE 1ST BYTE OF
*                                      SDATA OPTS            @G33SPHW*/
         LA    @11,256                                             0639
         ALR   @11,RTM2PTR                                         0639
         MVC   SNPSDAT0(1,@11),RTCTSUO1(@14)                       0639
*                             SNPSDAT1=RTCTSUO2;/* MOVE 2EN BYTE OF
*                                      SDATA OPTS            @G33SPHW*/
         MVC   SNPSDAT1(1,@11),RTCTSUO2(@14)                       0640
*                             SNPPDATA=RTCTSUO3;/* MOVE PDATA OPTIONS
*                                                            @G33SPHW*/
         MVC   SNPPDATA(1,@11),RTCTSUO3(@14)                       0641
*                           END;                                   0642
*                         ELSE      /* MERGE OPTIONS                 */
*                           DO;                                    0643
         B     @RC00637                                            0643
@RF00637 DS    0H                                                  0644
*                             SNPSDAT0=SNPSDAT0×/* MERGE SDATA     0644
*                                      REQUESTOR AND PARMLIB         */
*                                 RTCTSUO1;/* OPTIONS                */
         LA    @14,256                                             0644
         ALR   @14,RTM2PTR                                         0644
         LA    @11,236                                             0644
         L     @04,CVTPTR                                          0644
         AL    @11,CVTRTMCT(,@04)                                  0644
         OC    SNPSDAT0(1,@14),RTCTSUO1(@11)                       0644
*                             SNPSDAT1=SNPSDAT1×/* MERGE SDATA     0645
*                                      OPTIONS WITH          @G33SPHW*/
*                                 RTCTSUO2;/* PARMLIB OPTIONS      0645
*                                                            @G33SPHW*/
         OC    SNPSDAT1(1,@14),RTCTSUO2(@11)                       0645
*                             SNPPDATA=SNPPDATA×/* MERGE PDATA     0646
*                                      REQUESTOR AND PARMLIB         */
*                                 RTCTSUO3;/* OPTIONS                */
         OC    SNPPDATA(1,@14),RTCTSUO3(@11)                       0646
*                           END;                                   0647
*                       END;                                       0648
*                                                                  0648
@RC00637 DS    0H                                                  0649
*                     /***********************************************/
*                     /*                                             */
*                     /* IF AN ABEND IS IN PROGRESS, THE INPUT TCB   */
*                     /* WILL BE DUMPED, THEN THE SUBTASKS OF THE    */
*                     /* ABENDING TASK WILL BE DUMPED FOLLOWED BY THE*/
*                     /* MOTHER OF THE FAILING TASK. WHEN AN ABEND IS*/
*                     /* IN PROGRESS THE FOLLOW OPTIONS ARE DUMPED   */
*                     /* FOR THE SUBTASKS AND MOTHER IF REQUESTED:   */
*                     /* CONTROL BLOCKS, ENQUEUE CONTROL BLOCKS, PSW */
*                     /* REGISTERS, AND SAVE AREAS. ALL REQUESTED    */
*                     /* OPTIONS ARE DUMPED FOR THE INPUT TCB.       */
*                     /*                                             */
*                     /***********************************************/
*                                                                  0649
*                     IF RTM2DMP1='0'B/* IS AN ABEND IN PROGRESS     */
*                       THEN                                       0649
@RC00622 TM    RTM2DMP1(RTM2PTR),B'10000000'                       0649
         BNZ   @RF00649                                            0649
*                       DO;         /* YES, INITIALIZE NON-CONSTANT
*                                      OPTIONS                       */
*                         IF SNPCB='1'B THEN/* CONTROL BLOCKS        */
         TM    SNPCB+256(RTM2PTR),B'00000100'                      0651
         BNO   @RF00651                                            0651
*                           RTM2CB='1'B;                           0652
         OI    RTM2CB(RTM2PTR),B'10000000'                         0652
*                         IF SNPQCB='1'B THEN/* ENQUEUE CONTROL    0653
*                                      BLOCKS                        */
@RF00651 TM    SNPQCB+256(RTM2PTR),B'00000010'                     0653
         BNO   @RF00653                                            0653
*                           RTM2ENQ='1'B;                          0654
         OI    RTM2ENQ(RTM2PTR),B'01000000'                        0654
*                         IF SNPPSW='1'B THEN/* PSW, ILC, INTERRUPT
*                                      CODE                          */
@RF00653 TM    SNPPSW+256(RTM2PTR),B'00000100'                     0655
         BNO   @RF00655                                            0655
*                           RTM2PSW='1'B;                          0656
         OI    RTM2PSW(RTM2PTR),B'00100000'                        0656
*                         IF SNPREGS='1'B THEN/* REGISTERS           */
@RF00655 TM    SNPREGS+256(RTM2PTR),B'00100000'                    0657
         BNO   @RF00657                                            0657
*                           RTM2REG='1'B;                          0658
         OI    RTM2REG(RTM2PTR),B'00010000'                        0658
*                         IF SNPSAVE='1'B THEN/* SAVE AREAS          */
@RF00657 TM    SNPSAVE+256(RTM2PTR),B'10000000'                    0659
         BNO   @RF00659                                            0659
*                           RTM2SAVE='1'B;                         0660
         OI    RTM2SAVE(RTM2PTR),B'00001000'                       0660
*                         IF SNPSAVE2='1'B THEN/* SAVE AREA HEADINGS */
@RF00659 TM    SNPSAVE2+256(RTM2PTR),B'01000000'                   0661
         BNO   @RF00661                                            0661
*                           RTM2SAV2='1'B;                         0662
         OI    RTM2SAV2(RTM2PTR),B'00000100'                       0662
*                         IF SNPERR='1'B THEN/* ERROR CONTROL BLOCKS
*                                                            @G33SPHW*/
@RF00661 TM    SNPERR+256(RTM2PTR),B'01000000'                     0663
         BNO   @RF00663                                            0663
*                           RTM2OERR='1'B;/*                 @G33SPHW*/
         OI    RTM2OERR(RTM2PTR),B'00000010'                       0664
*                       END;                                       0665
@RF00663 DS    0H                                                  0666
*                     IF SNPTRT='1'B/* WAS GTF REQUESTED             */
*                       THEN                                       0666
@RF00649 LA    @14,256                                             0666
         ALR   @14,RTM2PTR                                         0666
         TM    SNPTRT(@14),B'00001000'                             0666
         BNO   @RF00666                                            0666
*                       DO;         /* YES, ISSUE HOOK               */
*                         PARMPTR=SNPTCBA;/* GET TCB ADDRESS         */
         L     PARMPTR,SNPTCBA(,@14)                               0668
*                         GENERATE;                                0669
         HOOK  EID=IEAABOF,TYPE=P  INDICATE TO GTF THAT CURRENT BUFFER
*                                  CONTENTS ARE TO BE SAVED
*                       END;                                       0670
*                                                                  0670
*                     /***********************************************/
*                     /*                                             */
*                     /* COMPLETE INITIALIZATION OF SNAP PARAMETER   */
*                     /* LIST                                        */
*                     /*                                             */
*                     /***********************************************/
*                                                                  0671
*                     SNPIDENT=0;   /* ID FOR DUMP OF INPUT TCB      */
@RF00666 LA    @14,256                                             0671
         ALR   @14,RTM2PTR                                         0671
         MVI   SNPIDENT(@14),X'00'                                 0671
*                     SNPVS2='1'B;  /* OS/VS2 REL.2 PARAMETER LIST   */
*                     SNPID='1'B;   /* ID SPECIFIED                  */
*                     SNPTCB='1'B;  /* TCB SPECIFIED                 */
*                     SNPABEND='0'B;/* TURN OFF SNAP CALLER INDICATOR*/
*                     SNPVS2EN='1'B;/* TURN ON ENHANCED SNAP FLAG  0676
*                                                            @G33SPHW*/
         OI    SNPVS2(@14),B'01101100'                             0676
         NI    SNPABEND(@14),B'11101111'                           0676
*                                                                  0677
*                     /***********************************************/
*                     /*                                             */
*                     /* THIS SECTION OF CODE ISSUES SNAP AND CHECKS */
*                     /* SNAP'S RETURN CODE. IF THE CODE IS GREATER  */
*                     /* THAN ZERO, CLEAN-UP PROCESSING IS INVOKED   */
*                     /* AND CONTROL IS RETURNED TO RTM2. OTHERWISE A*/
*                     /* CHECK IS MADE TO DETERMINE WHETHER AN ABEND */
*                     /* IS IN PROGRESS. IF SO, SUBSEQUENT TCBS ARE  */
*                     /* SELECTED AND SNAP IS REINVOKED. OTHERWISE   */
*                     /* CLEAN-UP PROCESSING IS REQUESTED AND CONTROL*/
*                     /* RETURNS TO RTM2                             */
*                     /*                                             */
*                     /***********************************************/
*                                                                  0677
*                     PARMPTR=RTM2DPLA;/* GET ADDR OF SNAP PARAMETER
*                                      LIST                          */
         L     PARMPTR,RTM2DPLA(,RTM2PTR)                          0677
*                     RTM2ESNP='1'B;/* INDICATE SNAP IN CONTROL      */
         OI    RTM2ESNP(RTM2PTR),B'00010000'                       0678
*                     GENERATE;                                    0679
         SVC 51    ISSUE SNAP
*                     RTM2ESNP='0'B;/* TURN OFF SNAP IN CNTRL BIT    */
         NI    RTM2ESNP(RTM2PTR),B'11101111'                       0680
*                     RTM2SNCC=RETCODE;/* SET RETCODE FOR RTM2       */
         ST    RETCODE,RTM2SNCC(,RTM2PTR)                          0681
*                     IF RETCODE>0  /* WAS SNAP SUCCESSFUL?          */
*                       THEN        /* NO                            */
         LTR   RETCODE,RETCODE                                     0682
         BNP   @RF00682                                            0682
*                       DO;                                        0683
*                         CALL ADSPFAIL;/* PUT OUT MESSAGE TO      0684
*                                      PROGRAMMER                    */
         BAL   @14,ADSPFAIL                                        0684
*                       END;                                       0685
*                     ELSE                                         0686
*                       DO;                                        0686
         B     @RC00682                                            0686
@RF00682 DS    0H                                                  0687
*                         RTM2DTCB->TCBFS='1'B;/* INDICATE TCB HAS 0687
*                                      BEEN DUMPED           @YM07641*/
         L     @14,RTM2DTCB(,RTM2PTR)                              0687
         OI    TCBFS(@14),B'00000010'                              0687
*                         IF RTM2DMP1='0'B THEN/* IS AN ABEND IN   0688
*                                      PROGRESS                      */
         TM    RTM2DMP1(RTM2PTR),B'10000000'                       0688
         BNZ   @RF00688                                            0688
*                           DO;     /* YES                           */
*                             IF RTM2ABID^=0 THEN/* ARE THERE      0690
*                                      DUMPOPTS                      */
         CLI   RTM2ABID(RTM2PTR),0                                 0690
         BE    @RF00690                                            0690
*                               DO; /* YES                           */
*                                 RTM2DFTK='1'B;/* INDICATE FIRST TCB
*                                      HAS BEEN DUMPED ON AN ABEND   */
         OI    RTM2DFTK(RTM2PTR),B'00000001'                       0692
*                                 SNPSDATA='00'X;/* RE-INITIALIZE  0693
*                                      SDATA OPTIONS TO ZERO         */
         LA    @14,256                                             0693
         ALR   @14,RTM2PTR                                         0693
         MVI   SNPSDATA+1(@14),X'00'                               0693
         MVI   SNPSDATA(@14),X'00'                                 0693
*                                 SNPPDATA='00'X;/* RE-INITIALIZE  0694
*                                      PDATA OPTIONS TO ZERO         */
         MVI   SNPPDATA(@14),X'00'                                 0694
*                                 SNPIDENT=1;/* SET ID FOR SUBTASKS  */
         MVI   SNPIDENT(@14),X'01'                                 0695
*                                 SNPSLIST='0'B;/* TURN OFF STORAGE
*                                      LIST INDIC                    */
         NI    SNPSLIST(@14),B'11111101'                           0696
*                                 IF RTM2CB='1'B THEN/* WERE CNTRL 0697
*                                      BLKS REQUESTED                */
         TM    RTM2CB(RTM2PTR),B'10000000'                         0697
         BNO   @RF00697                                            0697
*                                   SNPCB='1'B;/* YES                */
         OI    SNPCB(@14),B'00000100'                              0698
*                                 IF RTM2ENQ='1'B THEN/* WERE ENQ  0699
*                                      CNTRL BLKS REQUESTED          */
@RF00697 TM    RTM2ENQ(RTM2PTR),B'01000000'                        0699
         BNO   @RF00699                                            0699
*                                   SNPQCB='1'B;/* YES               */
         OI    SNPQCB+256(RTM2PTR),B'00000010'                     0700
*                                 IF RTM2SAVE='1'B THEN/* WERE SAVE
*                                      AREAS REQUESTED               */
@RF00699 TM    RTM2SAVE(RTM2PTR),B'00001000'                       0701
         BNO   @RF00701                                            0701
*                                   SNPSAVE='1'B;/* YES              */
         OI    SNPSAVE+256(RTM2PTR),B'10000000'                    0702
*                                 IF RTM2SAV2='1'B THEN/* WERE ONLY
*                                      HEADINGS REQUESTED            */
@RF00701 TM    RTM2SAV2(RTM2PTR),B'00000100'                       0703
         BNO   @RF00703                                            0703
*                                   SNPSAVE2='1'B;/* YES             */
         OI    SNPSAVE2+256(RTM2PTR),B'01000000'                   0704
*                                 IF RTM2REG='1'B THEN/* WERE      0705
*                                      REGISTERS REQUESTED           */
@RF00703 TM    RTM2REG(RTM2PTR),B'00010000'                        0705
         BNO   @RF00705                                            0705
*                                   SNPREGS='1'B;/* YES              */
         OI    SNPREGS+256(RTM2PTR),B'00100000'                    0706
*                                 IF RTM2PSW='1'B THEN/* WERE PSW, 0707
*                                      ILC, ETC REQUESTED            */
@RF00705 TM    RTM2PSW(RTM2PTR),B'00100000'                        0707
         BNO   @RF00707                                            0707
*                                   SNPPSW='1'B;/* YES               */
         OI    SNPPSW+256(RTM2PTR),B'00000100'                     0708
*                                 IF RTM2OERR='1'B THEN/* WERE ERROR
*                                      CONTROL BLKS REQUESTED      0709
*                                                            @G33SPHW*/
@RF00707 TM    RTM2OERR(RTM2PTR),B'00000010'                       0709
         BNO   @RF00709                                            0709
*                                   SNPERR='1'B;/* YES...    @G33SPHW*/
         OI    SNPERR+256(RTM2PTR),B'01000000'                     0710
*                                 GENERATE REFS(RTM2RREG);         0711
@RF00709 DS    0H                                                  0711
         STM   0,15,RTM2RREG(RTM2PTR) SAVE REGS FOR USE BY RECOVERY RTN
*ADRTCB:                                                           0712
*                                 RFY                              0712
*                                  (R13,                           0712
*                                   R2,                            0712
*                                   R11) RSTD;                     0712
ADRTCB   DS    0H                                                  0713
*                                 R11=TCBPTR;/* PUT TCB ADDRESS IN 0713
*                                      R11                           */
         L     R11,TCBPTR                                          0713
*                                 GEN(STATUS SET,ND,(R11),(8));/* SET
*                                      SUBTASKS ND TO PREVENT THEIR
*                                      GOING AWAY DURING DUMP      0714
*                                      PROCESSING            @ZA01871*/
         STATUS SET,ND,(R11),(8)
*                                 RFY                              0715
*                                   R11 UNRSTD;                    0715
*                                 RFY                              0716
*                                  (INTCB,                         0716
*                                   SELECTCB) RSTD;                0716
*                                 RTM2STAT='1'B;/* INDICATE STATUS 0717
*                                      ISSUED                        */
         OI    RTM2STAT(RTM2PTR),B'01000000'                       0717
*                                 TCBPTR=RTM2DTCB;/* PUT TCB PTR IN
*                                      R4 FOR USE BY TSLO            */
         L     @14,RTM2DTCB(,RTM2PTR)                              0718
         ST    @14,TCBPTR                                          0718
*                                 INTCB=-TCBPTR;/* COMPLEMENT TCB  0719
*                                      ADDR TO INDICATE FIRST ENTRY  */
         LCR   @14,@14                                             0719
         LR    INTCB,@14                                           0719
*                                 RTM2RMSA(2)=R13;/* SAVE ADDR OF  0720
*                                      CURRENT SAVE AREA             */
         ST    R13,RTM2RMSA+4(,RTM2PTR)                            0720
*                                 R13=ADDR(RTM2RMSA);/* PASS ADDR OF
*                                      SAVE AREA TO BE USED BY TSLO
*                                      IN R13                        */
         LA    R13,RTM2RMSA(,RTM2PTR)                              0721
*                                 SELECTCB=0;                      0722
         SLR   SELECTCB,SELECTCB                                   0722
*                                 DO WHILE(SELECTCB^=TCBPTR);/* LOOP
*                                      UNTIL ALL SUBTASKS ARE DUMPED */
         B     @DE00723                                            0723
@DL00723 DS    0H                                                  0724
*                                   CALL TSLO;/* SELECT NEXT TCB TO
*                                      BE DISPLAYED                  */
         BAL   @14,TSLO                                            0724
*                                   INTCB=SELECTCB;/* SET REG FOR  0725
*                                      RE-ENTRY TO TSLO              */
         LR    INTCB,SELECTCB                                      0725
*                                   RESPECIFY                      0726
*                                     TCB BASED(SELECTCB);         0726
*                                   IF TCBFS^='1'B THEN/* HAS TCB  0727
*                                      BEEN DISPLAYED                */
         TM    TCBFS(SELECTCB),B'00000010'                         0727
         BO    @RF00727                                            0727
*                                    DO;/* NO                        */
*                                     TCBPTR=RTM2TCBC;/* RESTORE   0729
*                                      CURRENT TCB TCB ADDR          */
         MVC   TCBPTR(4),RTM2TCBC(RTM2PTR)                         0729
*                                     SNPTCBA=SELECTCB;/* PUT TCB TO
*                                      BE DISPLAYED IN SNAP PARAMETER
*                                      LIST                          */
         ST    SELECTCB,SNPTCBA+256(,RTM2PTR)                      0730
*                                     PARMPTR=RTM2DPLA;/* PUT PTR TO
*                                      PARMLIST IN REG 1             */
         L     PARMPTR,RTM2DPLA(,RTM2PTR)                          0731
*                                     GEN                          0732
*(SVC   51                  ISSUE SNAP);                           0732
         SVC   51                  ISSUE SNAP
*                                     RTM2SNCC=RETCODE;/* PUT RETURN
*                                      CODE IN RTM2WA                */
         ST    RETCODE,RTM2SNCC(,RTM2PTR)                          0733
*                                     IF RETCODE>0 THEN/* WAS RETURN
*                                      CODE NONZERO                  */
         LTR   RETCODE,RETCODE                                     0734
         BNP   @RF00734                                            0734
*                                      DO;/* YES                     */
*                                       CALL ADSPFAIL;/* ROUTE MSG TO
*                                      PROGRAMMER                    */
         BAL   @14,ADSPFAIL                                        0736
*                                       SELECTCB=RTM2DTCB;/* BREAK 0737
*                                      LOOP                          */
         L     SELECTCB,RTM2DTCB(,RTM2PTR)                         0737
*                                      END;                        0738
*                                    END;                          0739
@RF00734 DS    0H                                                  0740
*                                   TCBFS='1'B;/* INDICATE TCB HAS 0740
*                                      BEEN DUMPED                   */
@RF00727 OI    TCBFS(SELECTCB),B'00000010'                         0740
*                                   TCBPTR=RTM2DTCB;/* RE-INIT.    0741
*                                      TCBPTR FOR TSLO RTN.          */
         MVC   TCBPTR(4),RTM2DTCB(RTM2PTR)                         0741
*                                   RESPECIFY                      0742
*                                     TCB BASED(TCBPTR);           0742
*                                 END;/* END DO WHILE LOOP           */
@DE00723 L     @14,TCBPTR                                          0743
         CR    SELECTCB,@14                                        0743
         BNE   @DL00723                                            0743
*                                 RFY                              0744
*                                  (INTCB,                         0744
*                                   SELECTCB) UNRSTD;              0744
*                                 TSLOMTH=TCBOTC;/* GET MOTHER TCB   */
         L     TSLOMTH,TCBOTC(,@14)                                0745
*                                 RFY                              0746
*                                   TCB BASED(TSLOMTH);            0746
*                                 IF TCBLTC^=0&/* DOES TASK HAVE   0747
*                                      DAUGHTER                      */
*                                     TCBLTC->TCBJSTCB=TCBLTC/* WHICH
*                                      IS A JOB-STEP TASK            */
*                                   THEN                           0747
         L     @14,TCBLTC(,TSLOMTH)                                0747
         LTR   @14,@14                                             0747
         BZ    @RF00747                                            0747
         C     @14,TCBJSTCB(,@14)                                  0747
         BE    @RT00747                                            0747
*                                   ;/* YES, DO NOT DUMP             */
*                                 ELSE                             0749
*                                   DO;                            0749
@RF00747 DS    0H                                                  0750
*                                    RFY                           0750
*                                      TCB BASED(TCBPTR);          0750
*                                    SNPTCBA=TCBOTC;/* PASS MOTHER 0751
*                                      TCB TO SNAP                   */
         LA    @14,256                                             0751
         ALR   @14,RTM2PTR                                         0751
         L     @11,TCBPTR                                          0751
         MVC   SNPTCBA(4,@14),TCBOTC(@11)                          0751
*                                    SNPIDENT=2;/* ID FOR DUMP OF  0752
*                                      MOTHER TCB                    */
         MVI   SNPIDENT(@14),X'02'                                 0752
*                                    TCBPTR=RTM2TCBC;/* RESTORE    0753
*                                      CURRENT TCB ADDRESS           */
         MVC   TCBPTR(4),RTM2TCBC(RTM2PTR)                         0753
*                                    PARMPTR=RTM2DPLA;/* ADDR. OF  0754
*                                      SNAP PARAMETER LIST           */
         L     PARMPTR,RTM2DPLA(,RTM2PTR)                          0754
*                                    GEN                           0755
*(SVC   51                     ISSUE SNAP);                        0755
         SVC   51                     ISSUE SNAP
*                                    RTM2SNCC=RETCODE;/* PUT RETURN
*                                      CODE IN RTM2WA                */
         ST    RETCODE,RTM2SNCC(,RTM2PTR)                          0756
*                                    IF RETCODE>0 THEN/* WAS RETURN
*                                      CODE NONZERO                  */
         LTR   RETCODE,RETCODE                                     0757
         BNP   @RF00757                                            0757
*                                     CALL ADSPFAIL;/* YES, ROUTE MSG
*                                      TO PROGRAMMER                 */
         BAL   @14,ADSPFAIL                                        0758
*                                   END;                           0759
@RF00757 DS    0H                                                  0760
*                                 R13=RTM2RMSA(2);/* RESTORE SAVE  0760
*                                      AREA PTR                      */
@RT00747 L     R13,RTM2RMSA+4(,RTM2PTR)                            0760
*                               END;                               0761
*                           END;                                   0762
@RF00690 DS    0H                                                  0763
*                       END;                                       0763
@RF00688 DS    0H                                                  0764
*                     RTM2DSNP='1'B;/* INDICATE SNAP COMPLETE        */
@RC00682 OI    RTM2DSNP(RTM2PTR),B'00010000'                       0764
*                     RTM2ESNP='0'B;/* TURN OFF SNAP IN CNTRL      0765
*                                      INDICATOR                     */
         NI    RTM2ESNP(RTM2PTR),B'11101111'                       0765
*                     CALL ADCLEAN; /* CLEAN-UP                      */
         BAL   @14,ADCLEAN                                         0766
*                   END;                                           0767
*               END;                                               0768
@RF00619 DS    0H                                                  0769
*         END;                                                     0769
@RC00368 DS    0H                                                  0769
@RC00329 DS    0H                                                  0770
*     END;                                                         0770
*                                                                  0770
@RC00184 DS    0H                                                  0771
*   /*****************************************************************/
*   /*                                                               */
*   /* FREE AUTOMATIC DATA AREA AND RETURN                   @G33SPHW*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0771
*   GENERATE REFS(AUTOPTR);                                        0771
@RC00158 DS    0H                                                  0771
         FREEMAIN R,LV=@ENDDATD-@DATD,SP=253,A=(AUTOPTR)
*   RTM2TRRA=0;                     /* ZERO ADDR OF RECOVERY RTN     */
         SLR   @14,@14                                             0772
         ST    @14,RTM2TRRA(,RTM2PTR)                              0772
*   RTM2WARG=0;                     /* ZERO ADDR OF RTM2WA           */
         MVI   RTM2WARG(RTM2PTR),X'00'                             0773
         EJECT
*ADCLEAN:                                                          0774
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0774
*                                                                  0774
         B     @PB00002                                            0774
ADCLEAN  DS    0H                                                  0775
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION OF CODE CLOSES THE DUMP DATA SET, FREES THE DCB, */
*   /* AND DEQUEUES OFF THE DUMP DATA SET. IT ALSO TURNS OFF THE     */
*   /* DUMPED INDICATOR IN ALL TCB'S IN THE TREE AND SETS THE TASK   */
*   /* DISPATCHABLE.                                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0775
*   GENERATE REFS(RTM2RREG);                                       0775
         STM   0,15,RTM2RREG(RTM2PTR) SAVE REGS FOR USE BY RECOVERY RTN
*   RFY                                                            0776
*    (R9,                                                          0776
*     R11,                                                         0776
*     R14) RSTD;                    /*                       @YM01200*/
*   SAVERTN=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,SAVERTN                                         0777
*ADCLOSE:                                                          0778
*   DCBPTR=DCBSAVE;                 /* RESTORE DCB           @YM01200*/
ADCLOSE  L     @08,DCBSAVE                                         0778
         ST    @08,DCBPTR                                          0778
*   OCDCBFL='80'X;                  /* INDICATE ONE ENTRY IN OPEN  0779
*                                      PARMLIST                      */
         AH    @08,@CH00137                                        0779
         MVI   OCDCBFL(@08),X'80'                                  0779
*   R11=ADDR(OCDCBAD);              /* GET ADDR OF DCB               */
         LR    R11,@08                                             0780
*   RTM2ECLS='1'B;                  /* INDICATE CLOSE IN CNTRL       */
         OI    RTM2ECLS(RTM2PTR),B'00001000'                       0781
*   DO;                             /* MODESET SAVEKEY(RTM2PKEY)   0782
*                                      EXTKEY(TCB) WORKREG(R9)       */
*     RESPECIFY                                                    0783
*      (GPR02F) RESTRICTED;                                        0783
*     R9=GPR02F;                    /* SAVE REGISTER 2               */
         LR    R9,GPR02F                                           0784
*     IPK;                          /* SAVE CURRENT PSW KEY          */
         IPK                                                       0785
*     RTM2PKEY=GPR02F;                                             0786
         STC   GPR02F,RTM2PKEY(,RTM2PTR)                           0786
*     GPR02F=R9;                    /* RESTORE REGISTER 2            */
         LR    GPR02F,R9                                           0787
*     R9=TCBPKF;                    /* GET KEY FROM TCB              */
         L     @04,TCBPTR                                          0788
         SLR   R9,R9                                               0788
         IC    R9,TCBPKF(,@04)                                     0788
*     SPKA(R9);                     /* SET PSW KEY                   */
         SPKA  0(R9)                                               0789
*     RESPECIFY                                                    0790
*      (GPR02F) UNRESTRICTED;                                      0790
*   END;                            /* MODESET SAVEKEY(RTM2PKEY)   0791
*                                      EXTKEY(TCB) WORKREG(R9)       */
*   GENERATE;                                                      0792
         CLOSE MF=(E,(R11))    CLOSE DUMP DATA SET
*   DO;                             /* MODESET KEYADDR(RTM2PKEY)   0793
*                                      WORKREG(R9)                   */
*     R9=RTM2PKEY;                  /* GET KEY FORM SAVE LOCATION    */
         SLR   R9,R9                                               0794
         IC    R9,RTM2PKEY(,RTM2PTR)                               0794
*     SPKA(R9);                     /* SET PSW KEY                   */
         SPKA  0(R9)                                               0795
*   END;                            /* MODESET KEYADDR(RTM2PKEY)   0796
*                                      WORKREG(R9)                   */
*   RTM2ECLS='0'B;                  /* TURN OFF CLOSE IN CNTRL BIT   */
         NI    RTM2ECLS(RTM2PTR),B'11110111'                       0797
*   RTM2DCLS='1'B;                  /* INDICATE CLOSE COMPLETED      */
         OI    RTM2DCLS(RTM2PTR),B'00001000'                       0798
*ADFREE:                                                           0799
*   IF RTM2TRTB^=0 THEN             /* COPIED TRACE AVAILABLE      0799
*                                                            @G33SPHW*/
ADFREE   L     @08,RTM2TRTB(,RTM2PTR)                              0799
         LTR   @08,@08                                             0799
         BZ    @RF00799                                            0799
*     DO;                           /* YES... FREE STORAGE   @G33SPHW*/
*       RFY                                                        0801
*         R0 RSTD;                                                 0801
*       R0=RTM2TRLN;                /* LENGTH OF TRACE TABLE @G33SPHW*/
         L     R0,RTM2TRLN(,RTM2PTR)                               0802
*       DO;                         /* FREEMAIN(RC)                0803
*                                      LV(R0)A(RTM2TRTB->I256C)    0803
*                                      SP(230)                       */
*         RESPECIFY                                                0804
*          (GPR01F,                                                0804
*           GPR15F,                                                0804
*           GPR00F) RESTRICTED;                                    0804
*         GPR01F=0;                 /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0805
*         GPR15F=1;                 /* SET TYPE                      */
         LA    GPR15F,1                                            0806
*         GPR00F=R0;                /* LENGTH REQUESTED              */
*         GPR01F=ADDR(RTM2TRTB->I256C);/* SET REGISTER ONE           */
         LR    GPR01F,@08                                          0808
*         GPR15F=GPR15F+((230)*256);/* SUBPOOL VALUE                 */
         AL    GPR15F,@CF03745                                     0809
*         SVC(120);                 /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0810
*         RESPECIFY                                                0811
*          (GPR01F,                                                0811
*           GPR15F,                                                0811
*           GPR00F) UNRESTRICTED;                                  0811
*       END;                        /* FREEMAIN(RC)                0812
*                                      LV(R0)A(RTM2TRTB->I256C)    0812
*                                      SP(230)               @VS4XXXX*/
*       RFY                                                        0813
*         R0 UNRSTD;                                               0813
*       RTM2TRTB=0;                 /* ZERO TRACE ADDRESS    @G33SPHW*/
         SLR   @08,@08                                             0814
         ST    @08,RTM2TRTB(,RTM2PTR)                              0814
*       RTM2TRLN=0;                 /* ZERO TRACE LENGTH     @G33SPHW*/
         ST    @08,RTM2TRLN(,RTM2PTR)                              0815
*       RTM2TRCU=0;                 /* ZERO CURRENT TRACE ADDRESS  0816
*                                                            @G33SPHW*/
         ST    @08,RTM2TRCU(,RTM2PTR)                              0816
*       RTM2TRFS=0;                 /* ZERO FIRST TRACE ADDRESS    0817
*                                                            @G33SPHW*/
         ST    @08,RTM2TRFS(,RTM2PTR)                              0817
*       RTM2TRLS=0;                 /* ZERO LAST TRACE ADDRESS     0818
*                                                            @G33SPHW*/
         ST    @08,RTM2TRLS(,RTM2PTR)                              0818
*     END;                          /* END TRACE AVAILABLE   @G33SPHW*/
*ADMDWK:                                                           0820
*   IF SDUSYSMS^=0 THEN             /* SYSMDUMP BUFFER FREED @G33SPHW*/
@RF00799 DS    0H                                                  0820
ADMDWK   L     @08,SDUMPPTR                                        0820
         L     @08,SDUSYSMS(,@08)                                  0820
         LTR   @08,@08                                             0820
         BZ    @RF00820                                            0820
*     DO;                           /* NO... FREE STORAGE    @G33SPHW*/
*       DO;                         /* FREEMAIN(RC)                0822
*                                      LV(4096)A(SDUSYSMS->I256C)  0822
*                                      SP(253)                       */
*         RESPECIFY                                                0823
*          (GPR01F,                                                0823
*           GPR15F,                                                0823
*           GPR00F) RESTRICTED;                                    0823
*         GPR01F=0;                 /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0824
*         GPR15F=1;                 /* SET TYPE                      */
         LA    GPR15F,1                                            0825
*         GPR00F=4096;              /* LENGTH REQUESTED              */
         LH    GPR00F,@CH03647                                     0826
*         GPR01F=ADDR(SDUSYSMS->I256C);/* SET REGISTER ONE           */
         LR    GPR01F,@08                                          0827
*         GPR15F=GPR15F+((253)*256);/* SUBPOOL VALUE                 */
         AL    GPR15F,@CF03743                                     0828
*         SVC(120);                 /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0829
*         RESPECIFY                                                0830
*          (GPR01F,                                                0830
*           GPR15F,                                                0830
*           GPR00F) UNRESTRICTED;                                  0830
*       END;                        /* FREEMAIN(RC)                0831
*                                      LV(4096)A(SDUSYSMS->I256C)  0831
*                                      SP(253)                       */
*       SDUSYSMS=0;                 /* ZERO BUFFER ADDRESS   @G33SPHW*/
         L     @08,SDUMPPTR                                        0832
         SLR   @04,@04                                             0832
         ST    @04,SDUSYSMS(,@08)                                  0832
*     END;                          /* END BUFFER NOT FREED  @G33SPHW*/
*   IF SDUSYSMC^=0 THEN             /* SYSMDUMP WORKAREA FREED     0834
*                                                            @G33SPHW*/
@RF00820 L     @08,SDUMPPTR                                        0834
         L     @08,SDUSYSMC(,@08)                                  0834
         LTR   @08,@08                                             0834
         BZ    @RF00834                                            0834
*     DO;                           /* NO.... FREE STORAGE   @G33SPHW*/
*       DO;                         /* FREEMAIN(RC) LV(LENGTH(SDCNTRL
*                                      ))A(SDUSYSMC->I256C) SP(253)  */
*         RESPECIFY                                                0837
*          (GPR01F,                                                0837
*           GPR15F,                                                0837
*           GPR00F) RESTRICTED;                                    0837
*         GPR01F=0;                 /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0838
*         GPR15F=1;                 /* SET TYPE                      */
         LA    GPR15F,1                                            0839
*         GPR00F=LENGTH(SDCNTRL);   /* LENGTH REQUESTED              */
         LA    GPR00F,432                                          0840
*         GPR01F=ADDR(SDUSYSMC->I256C);/* SET REGISTER ONE           */
         LR    GPR01F,@08                                          0841
*         GPR15F=GPR15F+((253)*256);/* SUBPOOL VALUE                 */
         AL    GPR15F,@CF03743                                     0842
*         SVC(120);                 /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0843
*         RESPECIFY                                                0844
*          (GPR01F,                                                0844
*           GPR15F,                                                0844
*           GPR00F) UNRESTRICTED;                                  0844
*       END;                        /* FREEMAIN(RC) LV(LENGTH(SDCNTRL
*                                      ))A(SDUSYSMC->I256C) SP(253)  */
*       SDUSYSMC=0;                 /* ZERO ADDRESS OF WORKAREA    0846
*                                                            @G33SPHW*/
         L     @08,SDUMPPTR                                        0846
         SLR   @04,@04                                             0846
         ST    @04,SDUSYSMC(,@08)                                  0846
*     END;                          /* END WORKAREA AVAILABLE      0847
*                                                            @G33SPHW*/
*   IF MDECBPTR^=0 THEN             /* DECB OBTAINED         @G33SPHW*/
@RF00834 L     @08,MDECBPTR                                        0848
         SLR   @04,@04                                             0848
         CR    @08,@04                                             0848
         BE    @RF00848                                            0848
*     DO;                           /* YES....               @G33SPHW*/
*       IF SYSMBUF^=0 THEN          /* USER KEY SYSMDUMP BUFFER    0850
*                                      AVAILABLE             @G33SPHW*/
         C     @04,SYSMBUF(,@08)                                   0850
         BE    @RF00850                                            0850
*         DO;                       /* YES... FREE UP AREA   @G33SPHW*/
*           RFY                                                    0852
*            (RTM2SWA) RSTD;        /*                       @G33SPHW*/
*           RTM2SWA=RTM2PTR;        /* SAVE RTM2 POINTER     @G33SPHW*/
         LR    RTM2SWA,RTM2PTR                                     0853
*           GENERATE;                                              0854
         STM R11,R14,RTM2RMSA(RTM2SWA)                         @G33SPHW
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=('IEAVTABD')
         SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,RELATED=('IEAVTABD')
         LM R11,R14,RTM2RMSA(RTM2SWA)                          @G33SPHW
*           IF RTCTMRMQ=MRMQPTR THEN/* FIRST ENTRY THE ENTRY TO    0855
*                                      REMOVE FROM MRMQ QUEUE      0855
*                                                            @G33SPHW*/
         L     @08,MRMQPTR                                         0855
         L     @04,CVTPTR                                          0855
         L     @04,CVTRTMCT(,@04)                                  0855
         C     @08,RTCTMRMQ(,@04)                                  0855
         BNE   @RF00855                                            0855
*             DO;                   /* YES...                @G33SPHW*/
*               RTCTMRMQ=MRMQCHN;   /* PUT RTCT TO CHAIN VALUE     0857
*                                                            @G33SPHW*/
         MVC   RTCTMRMQ(4,@04),MRMQCHN(@08)                        0857
*             END;                  /* END .. FIRST ENTRY    @G33SPHW*/
*           ELSE                    /* NOT FIRST ENTRY       @G33SPHW*/
*             DO;                   /* FIND ENTRY TO REMOVE  @G33SPHW*/
         B     @RC00855                                            0859
@RF00855 DS    0H                                                  0860
*               LASTMRMQ=RTCTMRMQ;  /* GET RTCT BUFFER POINTERS    0860
*                                                            @G33SPHW*/
         L     @03,CVTPTR                                          0860
         L     @03,CVTRTMCT(,@03)                                  0860
         L     @03,RTCTMRMQ(,@03)                                  0860
         LR    LASTMRMQ,@03                                        0860
*               SAVMRMQ=RTCTMRMQ;   /* GET RTCT BUFFER ANCHOR      0861
*                                                            @G33SPHW*/
         LR    SAVMRMQ,@03                                         0861
*               DO WHILE SAVMRMQ^=MRMQPTR;/* FIND ENTRY TO FREE    0862
*                                                            @G33SPHW*/
         B     @DE00862                                            0862
@DL00862 DS    0H                                                  0863
*                 LASTMRMQ=SAVMRMQ; /* SAVE LAST MRMQ        @G33SPHW*/
         LR    LASTMRMQ,SAVMRMQ                                    0863
*                 SAVMRMQ=SAVMRMQ->MRMQCHN;/* NEXT ENTRY ON CHAIN  0864
*                                                            @G33SPHW*/
         L     SAVMRMQ,MRMQCHN(,SAVMRMQ)                           0864
*               END;                /* END ...DO WHILE NOT FOUND   0865
*                                                            @G33SPHW*/
@DE00862 C     SAVMRMQ,MRMQPTR                                     0865
         BNE   @DL00862                                            0865
*               LASTMRMQ->MRMQCHN=SAVMRMQ->MRMQCHN;/* TAKE ENTRY OFF
*                                      CHAIN                 @G33SPHW*/
         MVC   MRMQCHN(4,LASTMRMQ),MRMQCHN(SAVMRMQ)                0866
*             END;                  /* END.. MORE THAN ONE ENTRY   0867
*                                                            @G33SPHW*/
*           GENERATE;                                              0868
@RC00855 DS    0H                                                  0868
         STM R11,R14,RTM2RMSA(RTM2SWA)                         @G33SPHW
         SETLOCK RELEASE,TYPE=CMS,RELATED=('IEAVTABD')       @G33SPHW
         LM R11,R14,RTM2RMSA(RTM2SWA)                          @G33SPHW
*           RFY                                                    0869
*            (R3,                                                  0869
*             R4,                                                  0869
*             ASCBPTR,                                             0869
*             R0) RSTD;             /*                       @G33SPHW*/
*           ASCBPTR=PSAAOLD;        /* GET CURRENT ASCB PTR  @G33SPHW*/
         L     ASCBPTR,PSAAOLD                                     0870
*           R4=TCBPTR;              /* PUT TCB ADDRESS IN R4 FOR   0871
*                                      FREEMAIN              @G33SPHW*/
         L     @08,TCBPTR                                          0871
         LR    R4,@08                                              0871
*           R3=TCBPKF;              /* PUT TCB KEY IN R3     @G33SPHW*/
         SLR   R3,R3                                               0872
         IC    R3,TCBPKF(,@08)                                     0872
*           PARMPTR=MRMQPTR;        /* GET ADDRESS TO FREE   @G33SPHW*/
         L     @08,MRMQPTR                                         0873
         LR    PARMPTR,@08                                         0873
*           R0=MRMQLEN;             /* PUT LENGTH IN R0      @G33SPHW*/
         LH    R0,MRMQLEN(,@08)                                    0874
*           GENERATE;                                              0875
         FREEMAIN RC,LV=(R0),A=(1),SP=231,BRANCH=YES,KEY=(3)   @G33SPHW
         STM R11,R14,RTM2RMSA(RTM2SWA)                         @G33SPHW
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=('IEAVTABD')       @G33SPHW
         LM R11,R14,RTM2RMSA(RTM2SWA)                          @G33SPHW
*           RTM2PTR=RTM2SWA;        /* RESTORE RTM2 POINTER  @G33SPHW*/
         LR    RTM2PTR,RTM2SWA                                     0876
*           RFY                                                    0877
*            (R3,                                                  0877
*             R4,                                                  0877
*             ASCBPTR,                                             0877
*             RTM2SWA) UNRSTD;      /*                       @G33SPHW*/
*           SYSMBUF=0;              /* ZERO BUFFER POINTER   @G33SPHW*/
         L     @10,MDECBPTR                                        0878
         SLR   @08,@08                                             0878
         ST    @08,SYSMBUF(,@10)                                   0878
*         END;                      /* END... BUFFER AVAILABLE     0879
*                                                            @G33SPHW*/
*                                                                  0879
*       /*************************************************************/
*       /*                                                           */
*       /* FREE STORAGE FOR AN UNPROTECTED DECB AND SAVEAREA USED BY */
*       /* SDUMP WHEN CALLING WRITE ROUTINE IEAVAD12         @G33SPHW*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0880
*       GENERATE REFS(PARMPTR);                                    0880
@RF00850 DS    0H                                                  0880
        FREEMAIN RC,LV=104,SP=250,A=MDECBPTR DECB AND SAVEAREA G33SPHW
*       MDECBPTR=0;                 /* ZERO DECB POINTER     @G33SPHW*/
         SLR   @10,@10                                             0881
         ST    @10,MDECBPTR                                        0881
*     END;                          /* END... DECB AVAILABLE @G33SPHW*/
*   PARMPTR=OCDCBADR;               /* GET ADDRESS OF DCB & PARMLIST */
@RF00848 L     @10,DCBPTR                                          0883
         SLR   PARMPTR,PARMPTR                                     0883
         ICM   PARMPTR,7,OCDCBADR+88(@10)                          0883
*   RFY                                                            0884
*     R3 RSTD;                                                     0884
*   R3=TCBPKF;                      /* GET TCB KEY           @YM01200*/
         L     @10,TCBPTR                                          0885
         SLR   R3,R3                                               0885
         IC    R3,TCBPKF(,@10)                                     0885
*   RTM2EFRM='1'B;                  /* INDICATE FREEMAIN IN CONTRL   */
         OI    RTM2EFRM(RTM2PTR),B'00000100'                       0886
*   RFY                                                            0887
*    (RTM2SWA,                                                     0887
*     R0) RSTD;                     /*                       @YM01200*/
*   R0=LENGTH(COREAREA);            /* SP230 GETMAINED AREA  @Z40MPXH*/
         LA    R0,503                                              0888
*   RTM2SWA=RTM2PTR;                /* SAVE WKAREA ADDR      @YM01200*/
         LR    RTM2SWA,RTM2PTR                                     0889
*   ASCBPTR=PSAAOLD;                /* GET CURRENT ASCB PTR  @YM01200*/
         L     ASCBPTR,PSAAOLD                                     0890
*   RFY                                                            0891
*     R4 RSTD;                      /*                       @G33SPHW*/
*   R4=TCBPTR;                      /* PUT TCB ADDRESS IN R4 FOR   0892
*                                      FREEMAIN              @G33SPHW*/
         L     @08,TCBPTR                                          0892
         LR    R4,@08                                              0892
*   GENERATE;                                                      0893
         STM R11,R14,RTM2RMSA(RTM2SWA)                         @YM01200
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=('IEAVTABD')
         FREEMAIN RC,LV=(R0),A=(1),SP=230,BRANCH=YES,KEY=(3)   @YM01200
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=('IEAVTABD')       @YM01200
         LM R11,R14,RTM2RMSA(RTM2SWA)                          @YM01200
*   RFY                                                            0894
*     R4 UNRSTD;                    /*                       @G33SPHW*/
*   RTM2PTR=RTM2SWA;                /* RESTORE RTM2 WKAREA ADDR    0895
*                                                            @YM01200*/
         LR    RTM2PTR,RTM2SWA                                     0895
*   RFY                                                            0896
*    (RTM2SWA,                                                     0896
*     R0) UNRSTD;                   /*                       @YM01200*/
*   RTM2EFRM='0'B;                  /* TURN OFF FREEMAIN BIT         */
         NI    RTM2EFRM(RTM2PTR),B'11111011'                       0897
*   RTM2DFRM='1'B;                  /* INDICATE FREEMAIN FOR DCB   0898
*                                      COMPLETED                     */
         OI    RTM2DFRM(RTM2PTR),B'00000100'                       0898
*   RTM2DTCB->TCBFS='0'B;           /* RESET DUMPED FLAG IN TOP TCB  */
         L     @10,RTM2DTCB(,RTM2PTR)                              0899
         NI    TCBFS(@10),B'11111101'                              0899
*   IF RTM2DMP1='0'B THEN           /* WAS AN ABEND IN PROGRESS      */
         TM    RTM2DMP1(RTM2PTR),B'10000000'                       0900
         BNZ   @RF00900                                            0900
*     DO;                           /* YES                           */
*       GEN REFS(PSALITA,RTM2RMSA);                                0902
         STM 11,14,RTM2RMSA(RTM2PTR)
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                        C
               RELATED=(TCB,IEAVTABD(ADCLEAN))
         LM 11,14,RTM2RMSA(RTM2PTR)
*       RFY                                                        0903
*        (R7,                                                      0903
*         R9,                                                      0903
*         R11,                                                     0903
*         R14) RSTD;                /* RESTRICT REGS USED BY IEATRSCN*/
*       RFY                                                        0904
*        (TOPTCB,                                                  0904
*         NEXTTCB) RSTD;                                           0904
*       NEXTTCB=RTM2DTCB;           /* GET STARTING TCB ADDRESS      */
         L     NEXTTCB,RTM2DTCB(,RTM2PTR)                          0905
*       TOPTCB=NEXTTCB;             /* GET ADDR OF TOP TCB           */
         LR    TOPTCB,NEXTTCB                                      0906
*       R11=ADDR(SRCHEND);          /* RETURN ADDR, NO MORE TCB'S    */
         LA    R11,SRCHEND                                         0907
*       RTM2WRK2=RTM2PTR;           /* SAVE WORK AREA ADDR   @YM02761*/
         LR    RTM2WRK2,RTM2PTR                                    0908
*       DO WHILE(NEXTTCB^=0);                                      0909
         B     @DE00909                                            0909
@DL00909 DS    0H                                                  0910
*         CALL IEATRSCN;            /* GET TCB                       */
         L     @15,CVTPTR                                          0910
         L     @15,CVTRSCN(,@15)                                   0910
         BALR  @14,@15                                             0910
*         NEXTTCB->TCBFS='0'B;      /* TURN OFF DUMP COMPLETE FLAG   */
         NI    TCBFS(NEXTTCB),B'11111101'                          0911
*       END;                                                       0912
@DE00909 LTR   NEXTTCB,NEXTTCB                                     0912
         BNZ   @DL00909                                            0912
*SRCHEND:                                                          0913
*       RTM2PTR=RTM2WRK2;           /* RESTORE WORK AREA ADDR      0913
*                                                            @YM02761*/
SRCHEND  LR    RTM2PTR,RTM2WRK2                                    0913
*       GEN;                                                       0914
         STM 11,12,RTM2RMSA(RTM2PTR)                           @YM01200
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=(TCB,IEAVTABD(ADCLEAN))
         LM 11,14,RTM2RMSA(RTM2PTR)                            @YM01200
*     END;                                                         0915
*ADDEQ:                                                            0916
*   PARMPTR=ADDR(ENQPARMS);         /* GET ADDR OF DEQ PARAMETER LIST*/
@RF00900 DS    0H                                                  0916
ADDEQ    LA    PARMPTR,ENQPARMS(,RTM2PTR)                          0916
*   RTM2EDEQ='1'B;                  /* INDICATE DEQ IN CNTRL         */
         OI    RTM2EDEQ(RTM2PTR),B'00000010'                       0917
*   GENERATE;                                                      0918
         DEQ   (,,,STEP),RET=HAVE,MF=(E,(PARMPTR)) DEQ FROM DATA SET
*   RTM2EDEQ='0'B;                  /* TURN OFF DEQ IN CNTRL BIT     */
         NI    RTM2EDEQ(RTM2PTR),B'11111101'                       0919
*   RTM2DDEQ='1'B;                  /* INDICATE DEQ COMPLETED        */
         OI    RTM2DDEQ(RTM2PTR),B'00000010'                       0920
*   R11=TCBPTR;                     /* PUT TCB ADDRESS IN R11        */
         L     R11,TCBPTR                                          0921
*   IF RTM2STAT='1'B THEN           /* WAS STATUS ISSUED             */
         TM    RTM2STAT(RTM2PTR),B'01000000'                       0922
         BNO   @RF00922                                            0922
*     GEN(STATUS RESET,ND,(R11),(8));/* YES                  @ZA01871*/
         STATUS RESET,ND,(R11),(8)
*   R14=SAVERTN;                    /* RESTORE RETURN ADDRESS        */
@RF00922 L     R14,SAVERTN                                         0924
*   RETURN;                         /* RETURN TO CALLER              */
@EL00002 DS    0H                                                  0925
@EF00002 DS    0H                                                  0925
@ER00002 BR    @14                                                 0925
*   RFY                                                            0926
*    (R11,                                                         0926
*     R7,                                                          0926
*     TOPTCB,                                                      0926
*     R9,                                                          0926
*     NEXTTCB) UNRSTD;              /*                       @YM01200*/
*   END ADCLEAN;                                                   0927
         EJECT
*ADSPFAIL:                                                         0928
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0928
*                                                                  0928
ADSPFAIL DS    0H                                                  0929
*   /*****************************************************************/
*   /*                                                               */
*   /* IF SNAP IS UNSUCCESSFUL MESSAGE 'IEA912I RECOVERY/TERMINATION */
*   /* DUMP FAILED IS ROUTED TO SYSOUT. CLEAN-UP PROCESSING IS       */
*   /* PERFORMED AND CONTROL RETURNS TO RTM2                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0929
*   RFY                                                            0929
*    (R0) RSTD;                                                    0929
*   R0=80;                          /* INDICATE LENGTH OF MSG BUFFER */
         LA    R0,80                                               0930
*   RTM2TRRA=0;                     /* INDICATE ABDUMP NOT TO BE   0931
*                                      ENTERED DURING RECURSION      */
         SLR   @04,@04                                             0931
         ST    @04,RTM2TRRA(,RTM2PTR)                              0931
*   GENERATE REFS(R0);                                             0932
         GETMAIN RC,LV=(R0),SP=253   GET CORE FOR MESSAGE BUFFER
*   RFY                                                            0933
*     R0 UNRSTD;                                                   0933
*   IF RETCODE=0 THEN                                              0934
         LTR   RETCODE,RETCODE                                     0934
         BNZ   @RF00934                                            0934
*     DO;                                                          0935
*       RESPECIFY                                                  0936
*        (R11) RESTRICTED;                                         0936
*       R11=PARMPTR;                /* SAVE ADDR OF BUFFER           */
         LR    R11,PARMPTR                                         0937
*       BUFFER(1:61)=SNAPMSG;       /* MOVE MESSAGE TO BUFFER      0938
*                                                            @YM07271*/
         MVC   BUFFER(61,PARMPTR),SNAPMSG                          0938
*       BUFFER(46:57)=' ';          /* CLEAR DUE TO PORTION OF BUF 0939
*                                                            @YM07271*/
         MVI   BUFFER+46(PARMPTR),C' '                             0939
         MVC   BUFFER+47(10,PARMPTR),BUFFER+46(PARMPTR)            0939
         MVI   BUFFER+45(PARMPTR),C' '                             0939
*       GENERATE;                                                  0940
         WTO   MF=(E,(PARMPTR))    ROUTE MESSAGE TO PROGRAMMER
         FREEMAIN R,LV=80,SP=253,A=(11)
*     END;                                                         0941
*   RFY                                                            0942
*    (R11) UNRSTD;                                                 0942
*   END ADSPFAIL;                                                  0943
@EL00003 DS    0H                                                  0943
@EF00003 DS    0H                                                  0943
@ER00003 BR    @14                                                 0943
         EJECT
*TSLO:                                                             0944
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0944
*                                                                  0944
TSLO     DS    0H                                                  0945
*   /*****************************************************************/
*   /*                                                               */
*   /* TSLO - SUBROUTINE OF ABDUMP TSLO SELECTS AND RETURNS TO THE   */
*   /* CALLER THE ADDRESS OF THE LOWEST LEVEL TCB IN THE TREE TO BE  */
*   /* SEARCHED. ON THE FIRST CALL TO TSLO, THE INPUT TCB ADDRESS    */
*   /* MUST BE THE COMPLEMENT OF THE ADDRESS OF THE TOP TCB IN THE   */
*   /* TREE BEING SEARCHED. TSLO RETURNS THE ADDRESS OF THE LOWEST   */
*   /* LEVEL                                                  SUBTASK*/
*   /* IN A DIRECT LINE FROM THE INPUT TCB. ON SUBSEQUENT CALLS TO   */
*   /* TSLO, THE INPUT TCB ADDRESS SHOULD BE THE SAME AS THAT LAST   */
*   /* RETURNED TO THE CALLER. IF THE TCB PASSED AS INPUT TO TSLO HAS*/
*   /* A SISTER TASK, TSLO RETURNS THE ADDRESS OF THE LOWEST LEVEL   */
*   /* SUBTASK OF THE SISTER (IF ANY). IF THE SISTER DOES NOT HAVE   */
*   /* ANY SUBTASKS, TSLO RE- TURNS THE ADDRESS OF THE SISTER TCB. IF*/
*   /* THE INPUT TCB DOES NOT HAVE A SISTER, TSLO RETURNS THE ADDRESS*/
*   /* OF ITS MOTHER TCB. INPUT: R9 - ADDRESS OF TCB AT WHICH TO     */
*   /* START SEARCH R13- ADDRESS OF REGISTER SAVE AREA R14- RETURN   */
*   /* ADDRESS OUTPUT: R8 - ADDRESS OF SELECTED TCB                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0945
*   RFY                                                            0945
*    (TSLORETR,                                                    0945
*     TSLOTCBP) RSTD;                                              0945
*   RFY                                                            0946
*     R0 RSTD;                                                     0946
*   R0=R13;                         /* SAVE SAVE AREA REG            */
         LR    R0,R13                                              0947
*   GENERATE REFS(PSALITA);                                        0948
         STM  R14,R12,12(R13)     SAVE REGISTERS
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=('ABDUMP')
*   R13=R0;                         /* RESTORE R13                   */
         LR    R13,R0                                              0949
*   RFY                                                            0950
*     R0 UNRSTD;                                                   0950
*   RESPECIFY                                                      0951
*     TCB BASED(TSLOTCBP);                                         0951
*   TSLOMTH=0;                      /* INIT REG TO HOLD TBCOTC TO 0  */
         SLR   TSLOMTH,TSLOMTH                                     0952
*   TSLOZERO=0;                     /* INIT. TCB COMPARE REG TO 0    */
         SLR   TSLOZERO,TSLOZERO                                   0953
*   IF TSLOTCBP<TSLOZERO THEN       /* IS THIS THE FIRST ENTRY       */
         CR    TSLOTCBP,TSLOZERO                                   0954
         BNL   @RF00954                                            0954
*     TSLOTCBP=-TSLOTCBP;           /* MAKE INPUT TCB ADDR POSITIVE  */
         LCR   TSLOTCBP,TSLOTCBP                                   0955
*   ELSE                            /* NOT FIRST ENTRY               */
*     DO;                                                          0956
         B     @RC00954                                            0956
@RF00954 DS    0H                                                  0957
*       IF TCBNTC^=TSLOZERO THEN    /* DOES INPUT TCB HAVE A SISTER  */
         L     @04,TCBNTC(,TSLOTCBP)                               0957
         CR    @04,TSLOZERO                                        0957
         BE    @RF00957                                            0957
*         TSLOTCBP=TCBNTC;          /* YES, SET TCB PTR TO SISTER OF */
         LR    TSLOTCBP,@04                                        0958
*       ELSE                        /* INPUT TCB                     */
*         DO;                                                      0959
         B     @RC00957                                            0959
@RF00957 DS    0H                                                  0960
*           TSLOMTH=TCBOTC;         /* NO, SET TCB PTR TO MOTHER OF
*                                      INPUT TCB PREVENT LOOP EXEC.  */
         L     TSLOMTH,TCBOTC(,TSLOTCBP)                           0960
*           TSLORETR=TSLOMTH;       /* RETURN MOTHER                 */
         LR    TSLORETR,TSLOMTH                                    0961
*         END;                                                     0962
*     END;                                                         0963
@RC00957 DS    0H                                                  0964
*   IF TSLOMTH^=TCBOTC THEN         /* HAS MOTHER TCBPTR BEEN      0964
*                                      OBTAINED                      */
@RC00954 C     TSLOMTH,TCBOTC(,TSLOTCBP)                           0964
         BE    @RF00964                                            0964
*     DO;                                                          0965
*       DO WHILE(TCBLTC^=TSLOZERO); /* NO, LOOK FOR SUBTASKS         */
         B     @DE00966                                            0966
@DL00966 DS    0H                                                  0967
*         TSLOTCBP=TCBLTC;          /* GET DAUGHTER OF TCB           */
         L     TSLOTCBP,TCBLTC(,TSLOTCBP)                          0967
*       END;                                                       0968
@DE00966 C     TSLOZERO,TCBLTC(,TSLOTCBP)                          0968
         BNE   @DL00966                                            0968
*       TSLORETR=TSLOTCBP;          /* RETURN TCB ADDR TO CALLER     */
         LR    TSLORETR,TSLOTCBP                                   0969
*     END;                                                         0970
*   RFY                                                            0971
*     R0 RSTD;                                                     0971
@RF00964 DS    0H                                                  0972
*   R0=R13;                         /* SAVE R13                      */
         LR    R0,R13                                              0972
*   GENERATE REFS(PSALITA);                                        0973
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=('ABDUMP')
*   R13=R0;                         /* RESTORE R13                   */
         LR    R13,R0                                              0974
*   RFY                                                            0975
*     R0 UNRSTD;                                                   0975
*   GENERATE;                                                      0976
         LM    R14,R7,12(R13)      DO NOT RESTORE  R8
         LM    R9,R12,56(R13)
*   RETURN;                                                        0977
@EL00004 DS    0H                                                  0977
@EF00004 DS    0H                                                  0977
@ER00004 BR    @14                                                 0977
*   RFY                                                            0978
*    (TSLOTCBP,                                                    0978
*     TSLORETR) UNRSTD;                                            0978
*   END TSLO;                                                      0979
         EJECT
*ADQMRCV:                                                          0980
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);/*                       @Z40MPXH*/
ADQMRCV  DS    0H                                                  0981
*/* THE ABDUMP QMNGRIO RECOVERY ROUTINE IS CALLED ONLY ON QMNGRIO    */
*/* FAILURES.  IT IS STILL POSSIBLE TO TAKE A STANDARD DUMP,         */
*/* THEREFORE THE MESSAGE 'READ FOR JFCB/JCFCBE FAILED, STANDARD DUMP*/
*/* FORMAT ASSUMED' IS ISSUED.                               @Z40MPXH*/
*                                                                  0981
*   RFY                                                            0981
*     R11 RSTD;                     /*                       @Z40MPXH*/
*   R11=RTM2PRWA;                   /* GET PTR TO PREVIOUS WORK AREA
*                                                            @Z40MPXH*/
         L     R11,RTM2PRWA(,RTM2PTR)                              0982
*   RTM2TRRA=0;                     /* PREVENT RECURSIVE ENTRY THRU
*                                      ABDUMP                @Z40MPXH*/
         SLR   @10,@10                                             0983
         ST    @10,RTM2TRRA(,RTM2PTR)                              0983
*   RTM2WARG=0;                     /* ZERO WORKAREA ADDR    @Z40MPXH*/
         MVI   RTM2WARG(RTM2PTR),X'00'                             0984
*   RTM2EQMN='0'B;                  /* TURN OFF QMIO IN CNTRL@Z40MPXH*/
         NI    RTM2EQMN(RTM2PTR),B'11111110'                       0985
*   IF RTM2MCHK='1'B THEN           /* MACHINE CHECK OCCUR?  @Z40MPXH*/
         TM    RTM2MCHK(RTM2PTR),B'10000000'                       0986
         BNO   @RF00986                                            0986
*     DO;                           /* YES,                  @Z40MPXH*/
*       RESPECIFY                                                  0988
*         RTM2WA BASED(R11);        /* GET PREVIOUS WORK AREA POINTER
*                                                            @Z40MPXH*/
*       CALL ADRCLN;                /* CLEAN UP ONLY         @Z40MPXH*/
         BAL   @14,ADRCLN                                          0989
*       GEN(LM 14,12,12(13));       /* RESTORE REGS          @Z40MPXH*/
         LM 14,12,12(13)
*       RETURN;                     /* RETURN TO RTM2        @Z40MPXH*/
@EL00005 DS    0H                                                  0991
@EF00005 DS    0H                                                  0991
@ER00005 BR    @14                                                 0991
*     END;                          /*                       @Z40MPXH*/
*   ELSE                            /* OTHER QMNGRIO FAILURE @Z40MPXH*/
*     DO;                           /* PREPARE TO RETRY      @Z40MPXH*/
@RF00986 DS    0H                                                  0994
*/* REFRESH ALL FIELDS FOR ABDUMP IN CURRENT WORKAREA        @Z40MPXH*/
*                                                                  0994
*       RFY                                                        0994
*         R1 RSTD;                                                 0994
*       RTM2PTR->RTM2DTCB=R11->RTM2DTCB;/* TASK BEING DUMPED @Z40MPXH*/
         MVC   RTM2DTCB(4,RTM2PTR),RTM2DTCB(R11)                   0995
*       RTM2PTR->RTM2SPRM=R11->RTM2SPRM;/* BASE OF SNAP PARM LIST  0996
*                                                            @Z40MPXH*/
         MVC   RTM2SPRM(20,RTM2PTR),RTM2SPRM(R11)                  0996
*       PARMPTR=ADDR(RTM2PTR->RTM2SPRM);/* PTR TO SNAP PARM LIST   0997
*                                                            @Z40MPXH*/
         LA    PARMPTR,RTM2SPRM(,RTM2PTR)                          0997
*       RTM2PTR->RTM2DPLA=R1;       /*                       @Z40MPXH*/
         ST    R1,RTM2DPLA(,RTM2PTR)                               0998
*       RTM2PTR->RTM2DD=R11->RTM2DD;/* DDNAME FOR DUMP DS    @Z40MPXH*/
         MVC   RTM2DD(8,RTM2PTR),RTM2DD(R11)                       0999
*       RTM2PTR->RTM2ABDR=R11->RTM2ABDR;/* ABDUMP FLAGS      @Z40MPXH*/
         MVC   RTM2ABDR(2,RTM2PTR),RTM2ABDR(R11)                   1000
*       RTM2PTR->RTM2DCTL=R11->RTM2DCTL;/* FUNCTIONS COMPLETED     1001
*                                                            @Z40MPXH*/
         MVC   RTM2DCTL(1,RTM2PTR),RTM2DCTL(R11)                   1001
*       RTM2PTR->RTM2ECTL=R11->RTM2ECTL;/* EXTERNAL ROUTINES @Z40MPXH*/
         MVC   RTM2ECTL(1,RTM2PTR),RTM2ECTL(R11)                   1002
*       RTM2PTR->RTM2RMWS(1)=R11->RTM2RMWS(1);/* ENQ,GETMAIN,OPEN  1003
*                                                            @Z40MPXH*/
         MVC   RTM2RMWS(4,RTM2PTR),RTM2RMWS(R11)                   1003
*       RTM2PTR->RTM2SNCC=R11->RTM2SNCC;/* RETURN CODE       @Z40MPXH*/
         MVC   RTM2SNCC(4,RTM2PTR),RTM2SNCC(R11)                   1004
*       RFY                                                        1005
*         R0 RSTD;                                                 1005
*       R0=80;                      /* MESSAGE BUFFER LENGTH @Z40MPXH*/
         LA    R0,80                                               1006
*       GENERATE REFS(R0);                                         1007
*                                                          /*@Z40MPXH*/
    GETMAIN  RC,LV=(R0),SP=253                               @Z40MPXH
*       RFY                                                        1008
*         R0 UNRSTD;                                               1008
*       IF RETCODE=0 THEN           /* SUCCESSFUL GETMAIN    @Z40MPXH*/
         LTR   RETCODE,RETCODE                                     1009
         BNZ   @RF01009                                            1009
*         DO;                       /* ISSUE MESSAGE         @Z40MPXH*/
*           RFY                                                    1011
*            (R10) RSTD;            /*                       @Z40MPXH*/
*           R10=PARMPTR;            /* SAVE ADDR OF BUFFER   @Z40MPXH*/
         LR    R10,PARMPTR                                         1012
*           BUFFER(1:72)=QMIOMSG;   /* MOVE MSG INTO BUFFER  @Z40MPXH*/
*                                                                  1013
         MVC   BUFFER(72,PARMPTR),QMIOMSG                          1013
*           /*********************************************************/
*           /*                                                       */
*           /* ISSUE MESSAGE AND FREE BUFFER                 @Z40MPXH*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  1014
*           GENERATE;                                              1014
*                                                          /*@Z40MPXH*/
     WTO   MF=(E,(PARMPTR)),          ROUTE MESSAGE TO PROG   Z40MPXH
     FREEMAIN  R,LV=80,SP=253,A=(10)   FREE MSG BUFFER        Z40MPXH
*         END;                      /*                       @Z40MPXH*/
*       DCBPTR=ADDR(DCBAREA);       /*                       @Z40MPXH*/
@RF01009 L     @04,COREPTR                                         1016
         ST    @04,DCBPTR                                          1016
*       DCBBUF=DCBIMAGE;            /* USE STANDARD FORMAT   @Z40MPXH*/
         MVC   DCBBUF(88,@04),DCBIMAGE                             1017
*       DCBDDNAM=R7->RTM2DD;        /* MOVE DDNAME INTO DCB  @Z40MPXH*/
         MVC   DCBDDNAM+40(8,@04),RTM2DD(R7)                       1018
*       RTM2WARG=8;                 /* WORKAREA REG          @G33SPHW*/
         MVI   RTM2WARG(R11),X'08'                                 1019
*       GOTO ADQMEND;               /* RETRY TO TAKE DUMP    @Z40MPXH*/
         B     ADQMEND                                             1020
*       RFY                                                        1021
*        (R10) UNRSTD;              /*                       @Z40MPXH*/
*     END;                          /* END RETRY SETUP       @Z40MPXH*/
*   END ADQMRCV;                    /* END QMNGRIO RECOVERY  @Z40MPXH*/
         EJECT
*ADRECOV:                                                          1024
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               1024
*                                                                  1024
ADRECOV  DS    0H                                                  1025
*   /*****************************************************************/
*   /*                                                               */
*   /* THE ABDUMP RECOVERY ROUTINE IS CALLED BY THE RTM2 RECURSION   */
*   /* HANDLER. ADRECOV DETERMINES FROM INDICATORS SET IN THE MAIN-  */
*   /* LINE ROUTINE WHAT PROCESSING WAS IN PROGRESS OR HAD COMPLETED */
*   /* SUCCESSFULLY WHEN ABDUMP GAVE UP CONTROL. ON A RETRY CONDITION*/
*   /* CONTROL RETURNS TO MAINLINE ABDUMP. OTHERWISE, CONTROL RETURNS*/
*   /* TO THE RTM2 RECURSION HANDLER. INPUT: R7 ADDR OF CURRENT      */
*   /* RTM2WA R13 ADDR OF SAVE AREA(RTM2) PASSED TO MAINLINE ABDUMP  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1025
*   RFY                                                            1025
*     R11 RSTD;                                                    1025
*   R11=R7->RTM2PRWA;               /* GET PTR TO PREVIOUS WORK AREA
*                                                            @ZM40320*/
         L     R11,RTM2PRWA(,R7)                                   1026
*   RTM2TRRA=0;                     /* PREVENT ABDUMP FROM BEING   1027
*                                      ENTERED RECURSIVELY           */
         SLR   @10,@10                                             1027
         ST    @10,RTM2TRRA(,R11)                                  1027
*   RTM2WARG=0;                     /* ZERO WORK AREA ADDRESS        */
         MVI   RTM2WARG(R11),X'00'                                 1028
*   IF RTM2MCHK='1'B×               /* DID MACHINE CHECK OR          */
*       RTM2PCHK='1'B THEN          /* PROGRAM CHECK OCCUR           */
         TM    RTM2MCHK(R11),B'11000000'                           1029
         BZ    @RF01029                                            1029
*     DO;                           /* YES                           */
*       RESPECIFY                                                  1031
*         RTM2WA BASED(R11);        /* GET PREVIOUS WORK AREA PTR    */
*       CALL ADRCLN;                /* DETERMINE CLEAN-UP TO BE DONE */
         BAL   @14,ADRCLN                                          1032
*     END;                                                         1033
*   ELSE                            /* DETERMINE IF AN EXTERNAL    1034
*                                      ROUTINE CALLED BY ABDUMP    1034
*                                      SUFFERED AN ERROR. IF SO,   1034
*                                      CONTINUE WITH TERMINATION     */
*AD1:                                                              1034
*     DO;                           /* PREV WORKAREA BEING EXAMINED  */
         B     @RC01029                                            1034
@RF01029 DS    0H                                                  1034
AD1      DS    0H                                                  1035
*       IF RTM2EGET='1'B×           /* GETMAIN FOR DCB IN CONTROL?   */
*           RTM2EOPN='1'B×          /* OPEN IN CONTROL?              */
*           RTM2ESNP='1'B×          /* SNAP IN CONTROL?              */
*           RTM2ECLS='1'B×          /* CLOSE IN CONTROL?             */
*           RTM2EFRM='1'B×          /* FREEMAIN FOR DCB IN CONTROL?  */
*           RTM2SMDP='1'B×          /* SYSMDUMP IN CONTROL?  @G33SPHW*/
*           RTM2EDEQ='1'B THEN      /* DEQ IN CONTROL                */
         TM    RTM2EGET(R11),B'01111100'                           1035
         BNZ   @RT01035                                            1035
         TM    RTM2SMDP(R11),B'01000000'                           1035
         BO    @RT01035                                            1035
         TM    RTM2EDEQ(R11),B'00000010'                           1035
         BNO   @RF01035                                            1035
@RT01035 DS    0H                                                  1036
*         CALL ADRCLN;              /* PERFORM CLEAN-UP IF NECESSARY */
         BAL   @14,ADRCLN                                          1036
*       ELSE                                                       1037
*AD2:                                                              1037
*         DO;                                                      1037
         B     @RC01035                                            1037
@RF01035 DS    0H                                                  1037
AD2      DS    0H                                                  1038
*           IF RTM2DDEQ='1'B        /* DID DEQ COMPLETE?             */
*             THEN                                                 1038
         TM    RTM2DDEQ(R11),B'00000010'                           1038
         BO    @RT01038                                            1038
*             ;                     /* YES, RETURN TO RTM2           */
*           ELSE                                                   1040
*AD3:                                                              1040
*             DO;                                                  1040
*                                                                  1040
AD3      DS    0H                                                  1041
*               /*****************************************************/
*               /*                                                   */
*               /* REFRESH ALL FIELDS USED BY ABDUMP IN CURRENT      */
*               /* WORKAREA                                          */
*               /*                                                   */
*               /*****************************************************/
*                                                                  1041
*               RTM2PTR->RTM2DTCB=R11->RTM2DTCB;/* TASK BEING DMPED  */
         MVC   RTM2DTCB(4,RTM2PTR),RTM2DTCB(R11)                   1041
*               RTM2PTR->RTM2SPRM=R11->RTM2SPRM;/* BASE OF SNAPPARM
*                                      LIST                  @YM04727*/
         MVC   RTM2SPRM(20,RTM2PTR),RTM2SPRM(R11)                  1042
*               PARMPTR=ADDR(RTM2PTR->RTM2SPRM);/* PTR TO PARM LIST
*                                      FOR SNAP              @YM04727*/
         LA    PARMPTR,RTM2SPRM(,RTM2PTR)                          1043
*               RTM2PTR->RTM2DPLA=PARMPTR;                         1044
         ST    PARMPTR,RTM2DPLA(,RTM2PTR)                          1044
*               RTM2PTR->RTM2DD=R11->RTM2DD;/* DDNAME FOR DUMP DATA
*                                      SET                           */
         MVC   RTM2DD(8,RTM2PTR),RTM2DD(R11)                       1045
*               RTM2PTR->RTM2ABDR=R11->RTM2ABDR;/* ABDUMP FLAGS      */
         MVC   RTM2ABDR(2,RTM2PTR),RTM2ABDR(R11)                   1046
*               RTM2PTR->RTM2DCTL=R11->RTM2DCTL;/* FUNCTIONS COMPLE-
*                                      TED IN ABDUMP                 */
         MVC   RTM2DCTL(1,RTM2PTR),RTM2DCTL(R11)                   1047
*               RTM2PTR->RTM2ECTL=R11->RTM2ECTL;/* EXT. RTNS CALLED  */
         MVC   RTM2ECTL(1,RTM2PTR),RTM2ECTL(R11)                   1048
*               RTM2PTR->RTM2RMWS(1)=R11->RTM2RMWS(1);/* ENQ,      1049
*                                      GETMAIN, OPEN PARMLISTS       */
         MVC   RTM2RMWS(4,RTM2PTR),RTM2RMWS(R11)                   1049
*               RTM2PTR->RTM2SNCC=R11->RTM2SNCC;/* RETURN CODE       */
         MVC   RTM2SNCC(4,RTM2PTR),RTM2SNCC(R11)                   1050
*               IF RTM2DFRM='1'B THEN/* DID FREEMAIN COMPLETE?       */
         TM    RTM2DFRM(R11),B'00000100'                           1051
         BO    @RT01051                                            1051
*                 GOTO ADDEQ;       /* DEQ FROM DUMP DATA SET        */
*               ELSE                                               1053
*                 IF RTM2DCLS='1'B THEN/* DID CLOSE COMPLETE?        */
         TM    RTM2DCLS(R11),B'00001000'                           1053
         BO    @RT01053                                            1053
*                   GOTO ADFREE;    /* FREE DCB CORE & DEQ           */
*                 ELSE                                             1055
*                   IF RTM2DSNP='1'B THEN/* DID SNAP COMPLETE?       */
         TM    RTM2DSNP(R11),B'00010000'                           1055
         BO    @RT01055                                            1055
*                     GOTO ADCLOSE; /* CLOSE DUMP DATA SET, FREE CORE
*                                      AND DEQ                       */
*                   ELSE                                           1057
*                     IF RTM2DFTK='1'B THEN/* WAS FIRST TCB DUMPED ON*/
         TM    RTM2DFTK(R11),B'00000001'                           1057
         BO    @RT01057                                            1057
*                       GOTO ADRTCB;/* PROCESS REMAINING TCBS FOR  1058
*                                      ABEND IN PROGRESS             */
*                     ELSE                                         1059
*                       IF RTM2DOPN='1'B THEN/* DID OPEN COMPLETE?   */
         TM    RTM2DOPN(R11),B'00100000'                           1059
         BO    @RT01059                                            1059
*                         GOTO ADDOPT;/* GO DETERMINE DUMP OPTS      */
*                       ELSE                                       1061
*                         IF RTM2DGET='1'B THEN/* DID GETMAIN FOR DCB
*                                      COMPLETE?                     */
         TM    RTM2DGET(R11),B'01000000'                           1061
         BO    @RT01061                                            1061
*                           GOTO ADOPEND;/* OPEN DUMP DATA SET       */
*                         ELSE                                     1063
*                           IF RTM2DENQ='1'B THEN/* DID ENQ COMPLETE */
         TM    RTM2DENQ(R11),B'10000000'                           1063
         BO    @RT01063                                            1063
*                             GOTO ADGET;/* GET CORE FOR DCB         */
*                           ELSE                                   1065
*                             GOTO ADDCHK;/* SCAN FOR DD             */
         B     ADDCHK                                              1065
*             END AD3;                                             1066
*         END AD2;                                                 1067
@RT01038 DS    0H                                                  1068
*     END AD1;                                                     1068
@RC01035 DS    0H                                                  1069
*   GEN(LM 14,12,12(13));           /* RESTORE RTM2 REGS             */
@RC01029 DS    0H                                                  1069
         LM 14,12,12(13)
*   RETURN;                         /* RETURN TO RTM2                */
@EL00006 DS    0H                                                  1070
@EF00006 DS    0H                                                  1070
@ER00006 BR    @14                                                 1070
*   END ADRECOV;                                                   1071
         EJECT
*                                                                  1072
*   /*****************************************************************/
*   /*                                                               */
*   /* BASED ON OPTIONS SET IN THE RTM2DCTL FIELD OF THE RTM2WA THIS */
*   /* ROUTINE DETERMINES WHETHER 1) THE DUMP DATA SET HAS BEEN      */
*   /* CLOSED. 2) THE DCB CORE HAS BEEN FREED. 3) THE DUMP DATA SET  */
*   /* HAS BEEN DEQUEUED FROM. ADRCLN PERFORMS THE CLEAN-UP REQUIRED */
*   /* TO CONTINUE WITH TERMINATION.                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1072
*ADRCLN:                                                           1072
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1072
ADRCLN   DS    0H                                                  1073
*   RFY                                                            1073
*    (R3) RSTD;                                                    1073
*   RFY                                                            1074
*     RTM2WA BASED(R11);                                           1074
*   RFY                                                            1075
*     TCB BASED(TCBPTR);                                           1075
*   RFY                                                            1076
*     R14 RSTD;                                                    1076
*   SAVERTN=R14;                    /* SAVE RETURN ADDR      @YM04727*/
         ST    R14,SAVERTN                                         1077
*   RFY                                                            1078
*     R14 UNRSTD;                                                  1078
*   TCBPTR=R11->RTM2TCBC;           /* GET CURRENT TCB       @YM01200*/
         MVC   TCBPTR(4),RTM2TCBC(R11)                             1079
*   DCBPTR=DCBSAVE;                 /* RESTORE DCB ADDR      @YM01200*/
         MVC   DCBPTR(4),DCBSAVE                                   1080
*   IF RTM2EOPN='1'B THEN           /* WAS OPEN IN CONTROL           */
         TM    RTM2EOPN(R11),B'00100000'                           1081
         BNO   @RF01081                                            1081
*     DO;                           /* YES, ISSUE MSG IEA030I        */
*       RFY                                                        1083
*         R2 RSTD;                                                 1083
*       DO;                         /* GETMAIN (RC) LV(80) SP(253)   */
*         RESPECIFY                                                1085
*          (GPR01F,                                                1085
*           GPR15F,                                                1085
*           GPR00F) RESTRICTED;                                    1085
*         GPR01F=0;                 /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       1086
*         GPR15F=0;                 /* RC-TYPE GETMAIN               */
         SLR   GPR15F,GPR15F                                       1087
*         GPR00F=80;                /* LENGTH REQUESTED              */
         LA    GPR00F,80                                           1088
*         GPR15F=GPR15F×((253)*256);/* SP IN BYTE 2                  */
         O     GPR15F,@CF03743                                     1089
*         SVC(120);                 /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 1090
*         RESPECIFY                                                1091
*          (GPR01F,                                                1091
*           GPR15F,                                                1091
*           GPR00F) UNRESTRICTED;                                  1091
*       END;                        /* GETMAIN (RC) LV(80) SP(253)   */
*       IF RETCODE=0 THEN           /* WAS GETMAIN SUCCESSFUL        */
         LTR   RETCODE,RETCODE                                     1093
         BNZ   @RF01093                                            1093
*         DO;                       /* YES                           */
*           R2=PARMPTR;             /* SAVE PTR TO BUFFER            */
         LR    R2,PARMPTR                                          1095
*           BUFFER(1:65)=OPENMSG;   /* MOVE MSG TO BUFFER    @YM07271*/
         MVC   BUFFER(65,PARMPTR),OPENMSG                          1096
*           IF TCBPTR^=TCBJSTCA THEN/* DETERMINE WHETHER JS OR     1097
*                                                             SUBTASK*/
         L     @14,TCBPTR                                          1097
         SLR   @10,@10                                             1097
         ICM   @10,7,TCBJSTCA(@14)                                 1097
         CR    @14,@10                                             1097
         BE    @RF01097                                            1097
*             OPMSGST='ST';         /* SUBTASK ABEND                 */
         MVC   OPMSGST+46(2,PARMPTR),@CC03643                      1098
*           R3=RTM2PTR->RTM2CC;     /* GET COMPLETION CODE   @YM07271*/
@RF01097 SLR   R3,R3                                               1099
         ICM   R3,7,RTM2CC(RTM2PTR)                                1099
*           IF R3=0 THEN            /* WAS THERE A COMP CODE @YM07271*/
         LTR   R3,R3                                               1100
         BNZ   @RF01100                                            1100
*             BUFFER(50:61)=' ';    /* NO,BLANK DUE TO PORTION OF MSG
*                                                            @YM07271*/
         MVI   BUFFER+50(PARMPTR),C' '                             1101
         MVC   BUFFER+51(10,PARMPTR),BUFFER+50(PARMPTR)            1101
         MVI   BUFFER+49(PARMPTR),C' '                             1101
*           ELSE                                                   1102
*             DO;                   /* PROCESS COMPLETION          1102
*                                      CODE@YM07271                  */
         B     @RC01100                                            1102
@RF01100 DS    0H                                                  1103
*               RFY                                                1103
*                 R0 RSTD;                                         1103
*               R0=R3;              /* SAVE CC OVER SHIFT    @YM07271*/
         LR    R0,R3                                               1104
*               GEN(SRL R3,12);     /* ISOLATE SYSTEM CODE   @YM07271*/
         SRL R3,12
*               IF R3=0 THEN        /* IS THERE A SYSTEM CODE      1106
*                                                            @YM07271*/
         LTR   R3,R3                                               1106
         BNZ   @RF01106                                            1106
*                 DO;               /* NO, PROCESS USER CODE @YM07271*/
*                   R3=R0;          /* RESTORE USER CODE             */
         LR    R3,R0                                               1108
*                   CVD(R3,COMPCODE);/* CONVERT USER CC TO DECIMAL 1109
*                                                            @YM07271*/
         CVD   R3,COMPCODE                                         1109
*                   UNPK(COMPCODE(1:5),COMPCODE(6:8));/* UNPACK IT 1110
*                                                            @YM07271*/
         UNPK  COMPCODE(5),COMPCODE+5(3)                           1110
*                   COMPCODE(5:5)=COMPCODE(5:5)×'F0'X;/* FIX UP SIGN
*                                      BYTE                  @YM07271*/
         OI    COMPCODE+4,X'F0'                                    1111
*                   BUFFER(57:57)='U';/* INDICATE USER CODE  @YM07271*/
         MVI   BUFFER+56(PARMPTR),C'U'                             1112
*                   BUFFER(58:61)=COMPCODE(2:5);/* MOVE COMP CODE TO
*                                      BUFFER                @YM07271*/
         MVC   BUFFER+57(4,PARMPTR),COMPCODE+1                     1113
*                 END;                                             1114
*               ELSE                                               1115
*                 DO;               /* PROCESS SYS CODE      @YM07271*/
         B     @RC01106                                            1115
@RF01106 DS    0H                                                  1116
*                   R3=R3*256;      /* SHIFT CC TO NEXT BYTE FOR   1116
*                                      UNPACK                @YM07271*/
         SLL   R3,8                                                1116
*                   COMPCODE(5:8)=R3;/* STORE IT TO WORK ON IT     1117
*                                                            @YM07271*/
         ST    R3,COMPCODE+4                                       1117
*                   UNPK(COMPCODE(1:5),COMPCODE(6:8));/* UNPACK SYS
*                                      CODE                  @YM07271*/
         UNPK  COMPCODE(5),COMPCODE+5(3)                           1118
*                   TR(COMPCODE(1:4),TRANSTBL);/* TRANS TO PRINT   1119
*                                                            @YM07271*/
         LA    @14,TRANMASK                                        1119
         AL    @14,@CF03784                                        1119
         TR    COMPCODE(4),TRANSTBL(@14)                           1119
*                   BUFFER(57:57)='S';/* INDICATE SYSTEM CODE      1120
*                                                            @YM07271*/
         MVI   BUFFER+56(PARMPTR),C'S'                             1120
*                   BUFFER(59:61)=COMPCODE(2:4);/* MOVE COMP CODE TO
*                                      BUFFER                @YM07271*/
         MVC   BUFFER+58(3,PARMPTR),COMPCODE+1                     1121
*                   BUFFER(58:58)=' ';/* BLANK GARBAGE BYTE  @YM07271*/
         MVI   BUFFER+57(PARMPTR),C' '                             1122
*                 END;                                             1123
*               RFY                                                1124
*                 R0 UNRSTD;                                       1124
@RC01106 DS    0H                                                  1125
*             END;                                                 1125
*           GEN(WTO MF=(E,(PARMPTR)));/* ISSUE MSG                   */
@RC01100 DS    0H                                                  1126
         WTO MF=(E,(PARMPTR))
*           DO;                     /* FREEMAIN(R)                 1127
*                                      LV(80)SP(253)A(R2->BUFFER)    */
*             RESPECIFY                                            1128
*              (GPR01F,                                            1128
*               GPR00F) RESTRICTED;                                1128
*             GPR00F=80;            /* LENGTH REQUESTED              */
         LA    GPR00F,80                                           1129
*             GPR01F=253;           /* SP IN REG 1                   */
         LA    GPR01F,253                                          1130
*             GEN(SLL   GPR01F,24)                                 1131
*             NODEFS NOREFS NOSETS NOEXIT NOFLOWS SEQFLOW;         1131
         SLL   GPR01F,24
*             GPR00F=GPR00F×GPR01F; /* SP IN HI BYTE                 */
         OR    GPR00F,GPR01F                                       1132
*             GPR01F=ADDR(R2->BUFFER);/* SET REGISTER ONE            */
         LR    GPR01F,R2                                           1133
*             SVC(10);              /* R-FORM OF GETMAIN             */
         SVC   10                                                  1134
*             RESPECIFY                                            1135
*              (GPR01F,                                            1135
*               GPR00F) UNRESTRICTED;                              1135
*           END;                    /* FREEMAIN(R)                 1136
*                                      LV(80)SP(253)A(R2->BUFFER)  1136
*                                      FREE BUFFER                   */
*         END;                                                     1137
*     END;                                                         1138
@RF01093 DS    0H                                                  1139
*   IF RTM2TRTB^=0 THEN             /* COPIED TRACE AVAILABLE      1139
*                                                            @G33SPHW*/
@RF01081 L     @14,RTM2TRTB(,R11)                                  1139
         LTR   @14,@14                                             1139
         BZ    @RF01139                                            1139
*     DO;                           /* YES... FREE STORAGE   @G33SPHW*/
*       RFY                                                        1141
*         R0 RSTD;                                                 1141
*       R0=RTM2TRLN;                /* LENGTH OF TRACE TABLE @G33SPHW*/
         L     R0,RTM2TRLN(,R11)                                   1142
*       DO;                         /* FREEMAIN(RC)                1143
*                                      LV(R0)A(RTM2TRTB->I256C)    1143
*                                      SP(230)                       */
*         RESPECIFY                                                1144
*          (GPR01F,                                                1144
*           GPR15F,                                                1144
*           GPR00F) RESTRICTED;                                    1144
*         GPR01F=0;                 /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       1145
*         GPR15F=1;                 /* SET TYPE                      */
         LA    GPR15F,1                                            1146
*         GPR00F=R0;                /* LENGTH REQUESTED              */
*         GPR01F=ADDR(RTM2TRTB->I256C);/* SET REGISTER ONE           */
         LR    GPR01F,@14                                          1148
*         GPR15F=GPR15F+((230)*256);/* SUBPOOL VALUE                 */
         AL    GPR15F,@CF03745                                     1149
*         SVC(120);                 /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 1150
*         RESPECIFY                                                1151
*          (GPR01F,                                                1151
*           GPR15F,                                                1151
*           GPR00F) UNRESTRICTED;                                  1151
*       END;                        /* FREEMAIN(RC)                1152
*                                      LV(R0)A(RTM2TRTB->I256C)    1152
*                                      SP(230)                       */
*       RFY                                                        1153
*         R0 UNRSTD;                                               1153
*       RTM2TRTB=0;                 /* ZERO TRACE ADDRESS    @G33SPHW*/
         SLR   @14,@14                                             1154
         ST    @14,RTM2TRTB(,R11)                                  1154
*       RTM2TRLN=0;                 /* ZERO TRACE LENGTH     @G33SPHW*/
         ST    @14,RTM2TRLN(,R11)                                  1155
*       RTM2TRCU=0;                 /* ZERO CURRENT TRACE ADDRESS  1156
*                                                            @G33SPHW*/
         ST    @14,RTM2TRCU(,R11)                                  1156
*       RTM2TRFS=0;                 /* ZERO FIRST TRACE ADDRESS    1157
*                                                            @G33SPHW*/
         ST    @14,RTM2TRFS(,R11)                                  1157
*       RTM2TRLS=0;                 /* ZERO LAST TRACE ADDRESS     1158
*                                                            @G33SPHW*/
         ST    @14,RTM2TRLS(,R11)                                  1158
*     END;                          /* END TRACE AVAILABLE   @G33SPHW*/
*   IF SDUSYSMS^=0 THEN             /* SYSMDUMP BUFFER FREED @G33SPHW*/
@RF01139 L     @14,SDUMPPTR                                        1160
         L     @14,SDUSYSMS(,@14)                                  1160
         LTR   @14,@14                                             1160
         BZ    @RF01160                                            1160
*     DO;                           /* NO... FREE STORAGE    @G33SPHW*/
*       DO;                         /* FREEMAIN(RC)                1162
*                                      LV(4096)A(SDUSYSMS->I256C)  1162
*                                      SP(253)                       */
*         RESPECIFY                                                1163
*          (GPR01F,                                                1163
*           GPR15F,                                                1163
*           GPR00F) RESTRICTED;                                    1163
*         GPR01F=0;                 /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       1164
*         GPR15F=1;                 /* SET TYPE                      */
         LA    GPR15F,1                                            1165
*         GPR00F=4096;              /* LENGTH REQUESTED              */
         LH    GPR00F,@CH03647                                     1166
*         GPR01F=ADDR(SDUSYSMS->I256C);/* SET REGISTER ONE           */
         LR    GPR01F,@14                                          1167
*         GPR15F=GPR15F+((253)*256);/* SUBPOOL VALUE                 */
         AL    GPR15F,@CF03743                                     1168
*         SVC(120);                 /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 1169
*         RESPECIFY                                                1170
*          (GPR01F,                                                1170
*           GPR15F,                                                1170
*           GPR00F) UNRESTRICTED;                                  1170
*       END;                        /* FREEMAIN(RC)                1171
*                                      LV(4096)A(SDUSYSMS->I256C)  1171
*                                      SP(253)                       */
*       SDUSYSMS=0;                 /* ZERO BUFFER ADDRESS   @G33SPHW*/
         L     @14,SDUMPPTR                                        1172
         SLR   @10,@10                                             1172
         ST    @10,SDUSYSMS(,@14)                                  1172
*     END;                          /* END BUFFER NOT FREED  @G33SPHW*/
*   IF SDUSYSMC^=0 THEN             /* SYSMDUMP WORKAREA FREED     1174
*                                                            @G33SPHW*/
@RF01160 L     @14,SDUMPPTR                                        1174
         L     @14,SDUSYSMC(,@14)                                  1174
         LTR   @14,@14                                             1174
         BZ    @RF01174                                            1174
*     DO;                           /* NO.... FREE STORAGE   @G33SPHW*/
*       DO;                         /* FREEMAIN(RC) LV(LENGTH(SDCNTRL
*                                      ))A(SDUSYSMC->I256C) SP(253)  */
*         RESPECIFY                                                1177
*          (GPR01F,                                                1177
*           GPR15F,                                                1177
*           GPR00F) RESTRICTED;                                    1177
*         GPR01F=0;                 /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       1178
*         GPR15F=1;                 /* SET TYPE                      */
         LA    GPR15F,1                                            1179
*         GPR00F=LENGTH(SDCNTRL);   /* LENGTH REQUESTED              */
         LA    GPR00F,432                                          1180
*         GPR01F=ADDR(SDUSYSMC->I256C);/* SET REGISTER ONE           */
         LR    GPR01F,@14                                          1181
*         GPR15F=GPR15F+((253)*256);/* SUBPOOL VALUE                 */
         AL    GPR15F,@CF03743                                     1182
*         SVC(120);                 /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 1183
*         RESPECIFY                                                1184
*          (GPR01F,                                                1184
*           GPR15F,                                                1184
*           GPR00F) UNRESTRICTED;                                  1184
*       END;                        /* FREEMAIN(RC) LV(LENGTH(SDCNTRL
*                                      ))A(SDUSYSMC->I256C) SP(253)  */
*       SDUSYSMC=0;                 /* ZERO ADDRESS OF WORKAREA    1186
*                                                            @G33SPHW*/
         L     @14,SDUMPPTR                                        1186
         SLR   @10,@10                                             1186
         ST    @10,SDUSYSMC(,@14)                                  1186
*     END;                          /* END WORKAREA AVAILABLE      1187
*                                                            @G33SPHW*/
*   IF MDECBPTR^=0 THEN             /* DECB AND SAVEAREA AVAILABLE 1188
*                                                            @G33SPHW*/
@RF01174 L     @14,MDECBPTR                                        1188
         SLR   @10,@10                                             1188
         CR    @14,@10                                             1188
         BE    @RF01188                                            1188
*     DO;                           /* YES... FREE STORAGE   @G33SPHW*/
*       IF SYSMBUF^=0 THEN          /* USER KEY SYSMDUMP BUFFER    1190
*                                      AVAILABLE             @G33SPHW*/
         C     @10,SYSMBUF(,@14)                                   1190
         BE    @RF01190                                            1190
*         DO;                       /* YES... FREE UP AREA   @G33SPHW*/
*           RFY                                                    1192
*             RTM2SWA RSTD;         /*                       @G33SPHW*/
*           RTM2SWA=RTM2PTR;        /* SAVE RTM2 POINTER     @G33SPHW*/
         LR    RTM2SWA,RTM2PTR                                     1193
*           GENERATE;                                              1194
         STM R11,R14,RTM2RMSA(RTM2SWA)                         @YM01200
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=('IEAVTABD')
         SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,RELATED=('IEAVTABD')
         LM R11,R14,RTM2RMSA(RTM2SWA)                          @YM01200
*           LASTMRMQ=RTCTMRMQ;      /* GET RTCT BUFFER POINTERS    1195
*                                                            @G33SPHW*/
         L     @14,CVTPTR                                          1195
         L     @14,CVTRTMCT(,@14)                                  1195
         L     @09,RTCTMRMQ(,@14)                                  1195
         LR    LASTMRMQ,@09                                        1195
*           SAVMRMQ=RTCTMRMQ;       /* GET RTCT BUFFER ANCHOR      1196
*                                                            @G33SPHW*/
         LR    SAVMRMQ,@09                                         1196
*           IF RTCTMRMQ=MRMQPTR THEN/* FIRST ENTRY THE ENTRY TO    1197
*                                      REMOVE FROM MRMQ QUEUE      1197
*                                                            @G33SPHW*/
         L     @04,MRMQPTR                                         1197
         CR    @09,@04                                             1197
         BNE   @RF01197                                            1197
*             DO;                   /* YES...                @G33SPHW*/
*               RTCTMRMQ=MRMQCHN;   /* PUT RTCT TO CHAIN VALUE     1199
*                                                            @G33SPHW*/
         MVC   RTCTMRMQ(4,@14),MRMQCHN(@04)                        1199
*             END;                  /* END .. FIRST ENTRY    @G33SPHW*/
*           ELSE                    /* NOT FIRST ENTRY       @G33SPHW*/
*             DO;                   /* FIND ENTRY TO REMOVE  @G33SPHW*/
         B     @RC01197                                            1201
@RF01197 DS    0H                                                  1202
*               LASTMRMQ=RTCTMRMQ;  /* GET RTCT BUFFER POINTERS    1202
*                                                            @G33SPHW*/
         L     @14,CVTPTR                                          1202
         L     @14,CVTRTMCT(,@14)                                  1202
         L     @14,RTCTMRMQ(,@14)                                  1202
         LR    LASTMRMQ,@14                                        1202
*               SAVMRMQ=RTCTMRMQ;   /* GET RTCT BUFFER ANCHOR      1203
*                                                            @G33SPHW*/
         LR    SAVMRMQ,@14                                         1203
*               DO WHILE SAVMRMQ^=MRMQPTR;/* FIND ENTRY TO FREE    1204
*                                                            @G33SPHW*/
         B     @DE01204                                            1204
@DL01204 DS    0H                                                  1205
*                 LASTMRMQ=SAVMRMQ; /* SAVE LAST MRMQ        @G33SPHW*/
         LR    LASTMRMQ,SAVMRMQ                                    1205
*                 SAVMRMQ=SAVMRMQ->MRMQCHN;/* NEXT ENTRY ON CHAIN  1206
*                                                            @G33SPHW*/
         L     SAVMRMQ,MRMQCHN(,SAVMRMQ)                           1206
*               END;                /* END ...DO WHILE NOT FOUND   1207
*                                                            @G33SPHW*/
@DE01204 C     SAVMRMQ,MRMQPTR                                     1207
         BNE   @DL01204                                            1207
*               LASTMRMQ->MRMQCHN=SAVMRMQ->MRMQCHN;/* TAKE ENTRY OFF
*                                      CHAIN                 @G33SPHW*/
         MVC   MRMQCHN(4,LASTMRMQ),MRMQCHN(SAVMRMQ)                1208
*             END;                  /* END.. MORE THAN ONE ENTRY   1209
*                                                            @G33SPHW*/
*           GENERATE;                                              1210
@RC01197 DS    0H                                                  1210
         STM R11,R14,RTM2RMSA(RTM2SWA)                         @G33SPHW
         SETLOCK RELEASE,TYPE=CMS,RELATED=('IEAVTABD')         @G33SPHW
         LM R11,R14,RTM2RMSA(RTM2SWA)                          @G33SPHW
*           RFY                                                    1211
*             R0 RSTD;              /*                       @G33SPHW*/
*           PARMPTR=MRMQPTR;        /* GET ADDRESS TO FREE   @G33SPHW*/
         L     @14,MRMQPTR                                         1212
         LR    PARMPTR,@14                                         1212
*           R0=MRMQLEN;             /* PUT LENGTH IN R0      @G33SPHW*/
         LH    R0,MRMQLEN(,@14)                                    1213
*           RFY                                                    1214
*             ASCBPTR RSTD;         /*                       @G33SPHW*/
*           ASCBPTR=PSAAOLD;        /* GET CURRENT ASCB PTR  @G33SPHW*/
         L     ASCBPTR,PSAAOLD                                     1215
*           RFY                                                    1216
*            (R3,                                                  1216
*             R4) RSTD;             /*                       @G33SPHW*/
*           R4=TCBPTR;              /* PUT TCB ADDRESS IN R4 FOR   1217
*                                      FREEMAIN              @G33SPHW*/
         L     @14,TCBPTR                                          1217
         LR    R4,@14                                              1217
*           R3=TCBPKF;              /* PUT TCB KEY IN R3     @G33SPHW*/
         SLR   R3,R3                                               1218
         IC    R3,TCBPKF(,@14)                                     1218
*           GENERATE;                                              1219
         FREEMAIN RC,LV=(R0),A=(1),SP=231,BRANCH=YES,KEY=(3)   @G33SPHW
         STM R11,R14,RTM2RMSA(RTM2SWA)                         @G33SPHW
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=('IEAVTABD')       @G33SPHW
         LM R11,R14,RTM2RMSA(RTM2SWA)                          @G33SPHW
*           RTM2PTR=RTM2SWA;        /* RESTOR RTM2 POINTER   @G33SPHW*/
         LR    RTM2PTR,RTM2SWA                                     1220
*           RFY                                                    1221
*            (R3,                                                  1221
*             R4,                                                  1221
*             R0,                                                  1221
*             ASCBPTR,                                             1221
*             RTM2SWA) UNRSTD;      /*                       @G33SPHW*/
*           RFY                                                    1222
*             ASCBPTR UNRSTD;                                      1222
*           SYSMBUF=0;              /* ZERO BUFFER POINTER   @G33SPHW*/
         L     @14,MDECBPTR                                        1223
         SLR   @10,@10                                             1223
         ST    @10,SYSMBUF(,@14)                                   1223
*         END;                      /* END... BUFFER AVAILABLE     1224
*                                                            @G33SPHW*/
*                                                                  1224
*       /*************************************************************/
*       /*                                                           */
*       /* FREE STORAGE FOR AN UNPROTECTED DECB AND SAVEAREA USED BY */
*       /* SDUMP WHEN CALLING WRITE ROUTINE IEAVAD12         @G33SPHW*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  1225
*       GENERATE REFS(PARMPTR);                                    1225
@RF01190 DS    0H                                                  1225
        FREEMAIN RC,LV=104,SP=250,A=MDECBPTR DECB AND SAVEAREA G33SPHW
*       MDECBPTR=0;                 /* ZERO DECB POINTER     @G33SPHW*/
         SLR   @14,@14                                             1226
         ST    @14,MDECBPTR                                        1226
*     END;                          /* END... DECB AVAILABLE @G33SPHW*/
*   IF RTM2ESNP='1'B THEN           /* WAS SNAP IN CONTROL           */
@RF01188 TM    RTM2ESNP(R11),B'00010000'                           1228
         BNO   @RF01228                                            1228
*     DO;                           /* YES, ISSUE MSG IEA912I        */
*       DO;                         /* GETMAIN (RC) LV(80) SP(253)   */
*         RESPECIFY                                                1231
*          (GPR01F,                                                1231
*           GPR15F,                                                1231
*           GPR00F) RESTRICTED;                                    1231
*         GPR01F=0;                 /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       1232
*         GPR15F=0;                 /* RC-TYPE GETMAIN               */
         SLR   GPR15F,GPR15F                                       1233
*         GPR00F=80;                /* LENGTH REQUESTED              */
         LA    GPR00F,80                                           1234
*         GPR15F=GPR15F×((253)*256);/* SP IN BYTE 2                  */
         O     GPR15F,@CF03743                                     1235
*         SVC(120);                 /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 1236
*         RESPECIFY                                                1237
*          (GPR01F,                                                1237
*           GPR15F,                                                1237
*           GPR00F) UNRESTRICTED;                                  1237
*       END;                        /* GETMAIN (RC) LV(80) SP(253)   */
*       IF RETCODE=0 THEN           /* WAS GETMAIN SUCCESSFUL        */
         SLR   @14,@14                                             1239
         CR    RETCODE,@14                                         1239
         BNE   @RF01239                                            1239
*         DO;                       /* YES                           */
*           R2=PARMPTR;             /* SAVE PTR TO BUFFER            */
         LR    R2,PARMPTR                                          1241
*           RFY                                                    1242
*             R3 RSTD;                                             1242
*           BUFFER(1:61)=SNAPMSG;   /* MOVE MSG TO BUFFER    @YM07271*/
         MVC   BUFFER(61,PARMPTR),SNAPMSG                          1243
*           R3=RTM2PTR->RTM2CC;     /* GET COMPLETION CODE   @YM07271*/
         SLR   R3,R3                                               1244
         ICM   R3,7,RTM2CC(RTM2PTR)                                1244
*           IF R3=0 THEN            /* WAS THERE A COMP CODE @YM07271*/
         CR    R3,@14                                              1245
         BNE   @RF01245                                            1245
*             BUFFER(46:57)=' ';    /* NO,BLANK DUE TO PORTION OF MSG
*                                                            @YM07271*/
         MVI   BUFFER+46(PARMPTR),C' '                             1246
         MVC   BUFFER+47(10,PARMPTR),BUFFER+46(PARMPTR)            1246
         MVI   BUFFER+45(PARMPTR),C' '                             1246
*           ELSE                                                   1247
*             DO;                   /* PROCESS COMPLETION          1247
*                                      CODE@YM07271                  */
         B     @RC01245                                            1247
@RF01245 DS    0H                                                  1248
*               RFY                                                1248
*                 R0 RSTD;                                         1248
*               R0=R3;              /* SAVE COMP CODE OVER SHIFT     */
         LR    R0,R3                                               1249
*               GEN(SRL R3,12);     /* ISOLATE SYSTEM CODE           */
         SRL R3,12
*               IF R3=0 THEN        /* IS THERE A SYSTEM CODE        */
         LTR   R3,R3                                               1251
         BNZ   @RF01251                                            1251
*                 DO;               /* NO, PROCESS USER CODE         */
*                   R3=R0;          /* RESTORE USER CODE             */
         LR    R3,R0                                               1253
*                   CVD(R3,COMPCODE);/* CONVERT USER CC TO DECIMAL 1254
*                                                            @YM07271*/
         CVD   R3,COMPCODE                                         1254
*                   UNPK(COMPCODE(1:5),COMPCODE(6:8));/* UNPACK IT 1255
*                                                            @YM07271*/
         UNPK  COMPCODE(5),COMPCODE+5(3)                           1255
*                   COMPCODE(5:5)=COMPCODE(5:5)×'F0'X;/* FIX UP SIGN
*                                      BYTE                  @YM07271*/
         OI    COMPCODE+4,X'F0'                                    1256
*                   BUFFER(53:53)='U';/* INDICATE USER CODE  @YM07271*/
         MVI   BUFFER+52(PARMPTR),C'U'                             1257
*                   BUFFER(54:57)=COMPCODE(2:5);/* MOVE IN CC      1258
*                                                            @YM07271*/
         MVC   BUFFER+53(4,PARMPTR),COMPCODE+1                     1258
*                 END;                                             1259
*               ELSE                                               1260
*                 DO;               /* PROCESS SYSTEM CODE           */
         B     @RC01251                                            1260
@RF01251 DS    0H                                                  1261
*                   R3=R3*256;      /* SHIFT CC TO NEXT BYTE FOR   1261
*                                      UNPACK                @YM07271*/
         SLL   R3,8                                                1261
*                   COMPCODE(5:8)=R3;/* STORE IT TO WORK ON IT     1262
*                                                            @YM07271*/
         ST    R3,COMPCODE+4                                       1262
*                   UNPK(COMPCODE(1:5),COMPCODE(6:8));/* UNPACK SYS
*                                      CODE                  @YM07271*/
         UNPK  COMPCODE(5),COMPCODE+5(3)                           1263
*                   TR(COMPCODE(1:4),TRANSTBL);/* TRANS TO PRINT   1264
*                                                            @YM07271*/
         LA    @14,TRANMASK                                        1264
         AL    @14,@CF03784                                        1264
         TR    COMPCODE(4),TRANSTBL(@14)                           1264
*                   BUFFER(53:53)='S';/* INDICATE SYSTEM CODE      1265
*                                                            @YM07271*/
         MVI   BUFFER+52(PARMPTR),C'S'                             1265
*                   BUFFER(55:57)=COMPCODE(2:4);/* MOVE IN CC      1266
*                                                            @YM07271*/
         MVC   BUFFER+54(3,PARMPTR),COMPCODE+1                     1266
*                   BUFFER(54:54)=' ';/* BLANK GARBAGE BYTE  @YM07271*/
         MVI   BUFFER+53(PARMPTR),C' '                             1267
*                 END;                                             1268
*               RFY                                                1269
*                 R0 UNRSTD;                                       1269
@RC01251 DS    0H                                                  1270
*             END;                                                 1270
*           GEN(WTO MF=(E,(PARMPTR)));/* ISSUE MSG                   */
@RC01245 DS    0H                                                  1271
         WTO MF=(E,(PARMPTR))
*           DO;                     /* FREEMAIN(R)                 1272
*                                      LV(80)SP(253)A(R2->BUFFER)    */
*             RESPECIFY                                            1273
*              (GPR01F,                                            1273
*               GPR00F) RESTRICTED;                                1273
*             GPR00F=80;            /* LENGTH REQUESTED              */
         LA    GPR00F,80                                           1274
*             GPR01F=253;           /* SP IN REG 1                   */
         LA    GPR01F,253                                          1275
*             GEN(SLL   GPR01F,24)                                 1276
*             NODEFS NOREFS NOSETS NOEXIT NOFLOWS SEQFLOW;         1276
         SLL   GPR01F,24
*             GPR00F=GPR00F×GPR01F; /* SP IN HI BYTE                 */
         OR    GPR00F,GPR01F                                       1277
*             GPR01F=ADDR(R2->BUFFER);/* SET REGISTER ONE            */
         LR    GPR01F,R2                                           1278
*             SVC(10);              /* R-FORM OF GETMAIN             */
         SVC   10                                                  1279
*             RESPECIFY                                            1280
*              (GPR01F,                                            1280
*               GPR00F) UNRESTRICTED;                              1280
*           END;                    /* FREEMAIN(R)                 1281
*                                      LV(80)SP(253)A(R2->BUFFER)  1281
*                                      FREE BUFFER                   */
*           RFY                                                    1282
*             R3 UNRSTD;                                           1282
*         END;                                                     1283
*     END;                                                         1284
@RF01239 DS    0H                                                  1285
*   RFY                                                            1285
*    (R2) UNRSTD;                                                  1285
@RF01228 DS    0H                                                  1286
*   IF RTM2DOPN='1'B&               /* WAS DUMP DATA SET OPENED BUT  */
*       RTM2DCLS='0'B THEN          /* NOT CLOSED?                   */
         TM    RTM2DOPN(R11),B'00100000'                           1286
         BNO   @RF01286                                            1286
         TM    RTM2DCLS(R11),B'00001000'                           1286
         BNZ   @RF01286                                            1286
*     DO;                           /* YES                           */
*       OCDCBFL='80'X;              /* INDICATE ONE ENTRY IN CLOSE 1288
*                                      PARMLIST                      */
         LA    @14,88                                              1288
         AL    @14,DCBPTR                                          1288
         MVI   OCDCBFL(@14),X'80'                                  1288
*       PARMPTR=ADDR(OCDCBAD);      /* GET ADDR OF CLOSE PARMLIST    */
         LR    PARMPTR,@14                                         1289
*       RFY                                                        1290
*         R9 RSTD;                                                 1290
*       DO;                         /* MODESET SAVEKEY(RTM2PKEY)   1291
*                                      EXTKEY(TCB) WORKREG(R9)       */
*         RESPECIFY                                                1292
*          (GPR02F) RESTRICTED;                                    1292
*         R9=GPR02F;                /* SAVE REGISTER 2               */
         LR    R9,GPR02F                                           1293
*         IPK;                      /* SAVE CURRENT PSW KEY          */
         IPK                                                       1294
*         RTM2PKEY=GPR02F;                                         1295
         STC   GPR02F,RTM2PKEY(,R11)                               1295
*         GPR02F=R9;                /* RESTORE REGISTER 2            */
         LR    GPR02F,R9                                           1296
*         R9=TCBPKF;                /* GET KEY FROM TCB              */
         L     @14,TCBPTR                                          1297
         SLR   R9,R9                                               1297
         IC    R9,TCBPKF(,@14)                                     1297
*         SPKA(R9);                 /* SET PSW KEY                   */
         SPKA  0(R9)                                               1298
*         RESPECIFY                                                1299
*          (GPR02F) UNRESTRICTED;                                  1299
*       END;                        /* MODESET SAVEKEY(RTM2PKEY)   1300
*                                      EXTKEY(TCB) WORKREG(R9)       */
*       GEN(CLOSE MF=(E,(PARMPTR)));/* CLOSE DUMP DATASET            */
         CLOSE MF=(E,(PARMPTR))
*       DO;                         /* MODESET KEYADDR(RTM2PKEY)   1302
*                                      WORKREG(R9)                   */
*         R9=RTM2PKEY;              /* GET KEY FORM SAVE LOCATION    */
         SLR   R9,R9                                               1303
         IC    R9,RTM2PKEY(,R11)                                   1303
*         SPKA(R9);                 /* SET PSW KEY                   */
         SPKA  0(R9)                                               1304
*       END;                        /* MODESET KEYADDR(RTM2PKEY)   1305
*                                      WORKREG(R9)                   */
*     END;                                                         1306
*   RFY                                                            1307
*     R9 UNRSTD;                                                   1307
@RF01286 DS    0H                                                  1308
*   RFY                                                            1308
*     RTM2SWA RSTD;                                                1308
*   IF RTM2DGET='1'B&               /* WAS GETMAIN FOR DCB COMPLETED */
*       RTM2DFRM='0'B THEN          /* BUT FREEMAIN NOT ISSUED?      */
         TM    RTM2DGET(R11),B'01000000'                           1309
         BNO   @RF01309                                            1309
         TM    RTM2DFRM(R11),B'00000100'                           1309
         BNZ   @RF01309                                            1309
*     DO;                           /* YES                           */
*       IF DCBSAVE^=0 THEN          /* IS THERE A DCB                */
         L     @14,DCBSAVE                                         1311
         LTR   @14,@14                                             1311
         BZ    @RF01311                                            1311
*         DO;                       /* YES, FREE IT                  */
*           RFY                                                    1313
*            (R0,                                                  1313
*             R3) RSTD;             /*                       @G33SPHW*/
*           R3=TCBPKF;              /* GET TCB KEY           @YM01200*/
         L     @04,TCBPTR                                          1314
         SLR   R3,R3                                               1314
         IC    R3,TCBPKF(,@04)                                     1314
*           R0=LENGTH(COREAREA);    /* DCB & PARMLIST CORE   @Z40MPXH*/
         LA    R0,503                                              1315
*           PARMPTR=DCBSAVE;        /* GET ADDR OF DCB               */
         LR    PARMPTR,@14                                         1316
*           RTM2SWA=RTM2PTR;        /* SAVE WKAREA ADDR      @YM01200*/
         LR    RTM2SWA,RTM2PTR                                     1317
*           ASCBPTR=PSAAOLD;        /* GET CURRENT ASCB PTR  @YM01200*/
         L     ASCBPTR,PSAAOLD                                     1318
*           RFY                                                    1319
*             R4 RSTD;              /*                       @G33SPHW*/
*           R4=TCBPTR;              /* TCB ADDRESS IN R4 FOR FREEMAIN
*                                                            @G33SPHW*/
         L     @14,TCBPTR                                          1320
         LR    R4,@14                                              1320
*           GENERATE;                                              1321
         STM R11,R14,RTM2RMSA(RTM2SWA)                         @YM01200
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=('IEAVTABD')
         FREEMAIN RC,LV=(R0),A=(1),SP=230,BRANCH=YES,KEY=(3)   @YM01200
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=('IEAVTABD')       @YM01200
         LM R11,R14,RTM2RMSA(RTM2SWA)                          @YM01200
*           RFY                                                    1322
*            (R4,                                                  1322
*             R3) UNRSTD;           /*                       @G33SPHW*/
*           RFY                                                    1323
*             R0 UNRSTD;                                           1323
*           RTM2PTR=RTM2SWA;        /* RESTORE RTM2 WKAREA ADDR    1324
*                                                            @YM01200*/
         LR    RTM2PTR,RTM2SWA                                     1324
*           RFY                                                    1325
*             RTM2SWA UNRSTD;       /*                       @YM01200*/
*         END;                                                     1326
*     END;                                                         1327
@RF01311 DS    0H                                                  1328
*   IF RTM2DENQ='1'B&RTM2DDEQ='0'B THEN/* WAS ENQ ISSUED BUT NO DEQ  */
@RF01309 TM    RTM2DENQ(R11),B'10000000'                           1328
         BNO   @RF01328                                            1328
         TM    RTM2DDEQ(R11),B'00000010'                           1328
         BNZ   @RF01328                                            1328
*     DO;                                                          1329
*       PARMPTR=ADDR(ENQPARMS);     /* GET ADDR OF ENQ PARMLIST      */
         LA    PARMPTR,ENQPARMS(,R11)                              1330
*       GEN                                                        1331
*(DEQ   (,,,STEP),RET=HAVE,MF=(E,(PARMPTR)) DEQ FROM DATA SET);    1331
         DEQ   (,,,STEP),RET=HAVE,MF=(E,(PARMPTR)) DEQ FROM DATA SET
*       RFY                                                        1332
*         R4 RSTD;                                                 1332
*       R4=TCBPTR;                  /* PUT TCBPTR IN R4      @ZA27517*/
         L     R4,TCBPTR                                           1333
*       IF RTM2STAT='1'B THEN       /* WAS STATUS ISSUED             */
         TM    RTM2STAT(R11),B'01000000'                           1334
         BNO   @RF01334                                            1334
*         GEN(STATUS RESET,ND,(R4),(8));/* YES               @ZA27517*/
         STATUS RESET,ND,(R4),(8)
*     END;                                                         1336
@RF01334 DS    0H                                                  1337
*   RFY                                                            1337
*     R4 UNRSTD;                                                   1337
@RF01328 DS    0H                                                  1338
*   PARMPTR=ADDR(SDUMPR);           /* GET ADDR OF SDUMP OPTIONS     */
         LA    PARMPTR,SDUMPR                                      1338
*   GENERATE;                                                      1339
*                                   /* ABDUMP ERROR                  */
         SDUMP MF=(E,(1))
*   RFY                                                            1340
*     R14 RSTD;                                                    1340
*   R14=SAVERTN;                    /* RESTORE RETURN ADDR   @YM04727*/
         L     R14,SAVERTN                                         1341
*   RETURN;                         /* RETURN TO ADRECOV             */
@EL00007 DS    0H                                                  1342
@EF00007 DS    0H                                                  1342
@ER00007 BR    @14                                                 1342
*   RFY                                                            1343
*     R14 UNRSTD;                                                  1343
*   END ADRCLN;                                                    1344
@PB00007 DS    0H                                                  1345
*   RFY                                                            1345
*    (R3,                                                          1345
*     R11) UNRSTD;                                                 1345
         EJECT
*   DCL                                                            1346
*     PATCHLOC FIXED(31) STATIC;                                   1346
*   GEN DATA DEFS(PATCHLOC);                                       1347
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00F FIXED(31) REG(0),                                     1348
*     GPR01F FIXED(31) REG(1),                                     1348
*     GPR02F FIXED(31) REG(2),                                     1348
*     GPR15F FIXED(31) REG(15);                                    1348
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       1349
*     I031F FIXED(31) BASED,                                       1349
*     I031P PTR(31) BASED,                                         1349
*     I015F FIXED(15) BASED,                                       1349
*     I015P PTR(15) BASED,                                         1349
*     I008P PTR(8) BASED,                                          1349
*     I001C CHAR(1) BASED;                                         1349
*   GENERATE DATA DEFS(DCBIMAGE);                                  1350
*   END IEAVTABD                                                   1351
*                                                                  1351
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (ABDSPEC )                                       */
*/*%INCLUDE SYSLIB  (ABDDCL  )                                       */
*/*%INCLUDE SYSLIB  (MODESET )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHADCBDF)                                       */
*/*%INCLUDE SYSLIB  (IHADCB  )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHARTCT )                                       */
*/*%INCLUDE SYSLIB  (IHARTM2A)                                       */
*/*%INCLUDE SYSLIB  (IHASNP  )                                       */
*/*%INCLUDE SYSLIB  (IHARMPL )                                       */
*/*%INCLUDE SYSLIB  (IHASDUMP)                                       */
*/*%INCLUDE SYSLIB  (IHASDWRK)                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IEFQMIOP)                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBN)                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBE)                                       */
*/*%INCLUDE SYSLIB  (IEFJESCT)                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IEFTIOT1)                                       */
*/*%INCLUDE SYSLIB  (IHADECB )                                       */
*/*%INCLUDE SYSLIB  (ADDSCAN )                                       */
*/*%INCLUDE SYSLIB  (ADENQ   )                                       */
*/*%INCLUDE SYSLIB  (ADIDCB  )                                       */
*/*%INCLUDE SYSLIB  (ADOPEN  )                                       */
*/*%INCLUDE SYSLIB  (ADOPFAIL)                                       */
*/*%INCLUDE SYSLIB  (ADBLDSDM)                                       */
*/*%INCLUDE SYSLIB  (ADOPTION)                                       */
*/*%INCLUDE SYSLIB  (ADHEADER)                                       */
*/*%INCLUDE SYSLIB  (ADUCODE )                                       */
*/*%INCLUDE SYSLIB  (ADUCODE )                                       */
*/*%INCLUDE SYSLIB  (ADUCODE )                                       */
*/*%INCLUDE SYSLIB  (ADSCODE )                                       */
*/*%INCLUDE SYSLIB  (ADSCODE )                                       */
*/*%INCLUDE SYSLIB  (ADSCODE )                                       */
*/*%INCLUDE SYSLIB  (ADSYSMDP)                                       */
*/*%INCLUDE SYSLIB  (ADETOPT )                                       */
*/*%INCLUDE SYSLIB  (ADSNAP  )                                       */
*/*%INCLUDE SYSLIB  (ADCLEAN )                                       */
*/*%INCLUDE SYSLIB  (ADSPFAIL)                                       */
*/*%INCLUDE SYSLIB  (ADTSLO  )                                       */
*/*%INCLUDE SYSLIB  (ADQMRCV )                                       */
*/*%INCLUDE SYSLIB  (ADRECOV )                                       */
*/*%INCLUDE SYSLIB  (ADRCLN  )                                       */
*                                                                  1351
*       ;                                                          1351
@EL00001 DS    0H                                                  1351
@EF00001 DS    0H                                                  1351
@ER00001 LM    @14,@12,12(@13)                                     1351
         BR    @14                                                 1351
@DATA    DS    0H
@CH00137 DC    H'88'
@CH03737 DC    H'176'
@CH03647 DC    H'4096'
@CH03741 DC    H'4116'
@DATD    DSECT
         DS    0F
IEAVTABD CSECT
         DS    0F
@CF00103 DC    F'4'
@CH00103 EQU   @CF00103+2
@CF00094 DC    F'8'
@CF03745 DC    F'58880'
@CF03743 DC    F'64768'
@CF03784 DC    F'-240'
@DATD    DSECT
         DS    0D
DCBPTR   DS    A
TCBPTR   DS    A
SAVERTN  DS    A
DECBPT   DS    A
MDHDPTR  DS    A
MDECBPTR DS    A
MRMQPTR  DS    A
SDUMPPTR DS    A
JFCBPTR  DS    A
COREPTR  DS    A
WORKA    DS    CL12
         ORG   WORKA
COMPCODE DS    CL8
DCBSAVE  DS    AL4
         ORG   WORKA+12
IEAVTABD CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CC03621 DC    C'SYSABEND'
@CC03622 DC    C'SYSUDUMP'
@CC03623 DC    C'SYSMDUMP'
@CC03625 DC    C'SYSIEA01'
@CC03626 DC    C'IEA'
@CC03643 DC    C'ST'
@CB03624 DC    X'FF030000'
JOBCHAR  DC    CL8'JOBNAME '
STEPCHAR DC    CL10' STEPNAME '
SYSCHAR  DC    CL8' SYSTEM '
USERCHAR DC    CL8'  USER  '
TRANMASK DC    CL16'0123456789ABCDEF'
DUMP     DC    CL4'DUMP'
IEAVTABD CSECT
SDUMPE   SDUMP HDR='ENQUEUE FAILURE IN ABDUMP',                        C
               SDATA=(LPA,LSQA,RGN,SQA),MF=L                   @ZA05491
SDUMPR   SDUMP HDR='ABDUMP ERROR',SDATA=(LPA,LSQA,RGN),MF=L
IEAVTABD CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
IEAVTABD CSECT
DCBIMAGE DCB   DSORG=PS,MACRF=W,DDNAME=SYSABEND,RECFM=VBA,BLKSIZE=1632,C
               LRECL=125
DCBIMAG2 DCB   DSORG=PS,MACRF=W,DDNAME=SYSABEND,RECFM=VBA,BLKSIZE=2724,C
               LRECL=209                                        Z40MPXH
DCBMDUMP DCB   DDNAME=SYSMDUMP,MACRF=W,DSORG=PS,LRECL=4104,            C
               BLKSIZE=4104,RECFM=FB
OPENMSG WTO 'IEA030I OPEN FAILED FOR DUMP DATA SET FOR JS DUE TO XXXXX'C
               ,MF=L,ROUTCDE=(11)
SNAPMSG  WTO   'IEA912I RECOVERY/TERMINATION DUMP FAILED DUE TO XXXXX',C
               MF=L,ROUTCDE=(11)
QMIOMSG  WTO  'IEA996I READ FOR JFCB/JFCBE FAILED, STANDARD DUMP FORMATC
                ASSUMED',MF=L,ROUTCDE=(11)                     Z40MPXH
MDUMPMSG WTO 'IEA993I SYSMDUMP TAKEN TO XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXC
               XXXXXXXXXXXXX',MF=L,ROUTCDE=(11)              @G33SPHW
MDUMPPAR WTO 'IEA998I PARTIAL SYSMDUMP TAKEN TO XXXXXXXXXXXXXXXXXXXXXXXC
               XXXXXXXXXXXXXXXXXXXXX',MF=L,ROUTCDE=(11)      @ZM45062
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEAVTABD CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
JFCBEPTR EQU   @03
DMPTIOTA EQU   @02
JSTCBPTR EQU   @03
SAVMRET  EQU   @08
LASTMRMQ EQU   @04
SAVMRMQ  EQU   @08
RTM2WRK2 EQU   @04
TSLOZERO EQU   @10
TSLOMTH  EQU   @11
TIOTPTR  EQU   @08
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R7       EQU   @07
R9       EQU   @09
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
PARMPTR  EQU   @01
USER     EQU   @03
SYSTEM   EQU   @03
RTM2PTR  EQU   @07
ASCBPTR  EQU   @07
TSLORETR EQU   @08
SELECTCB EQU   @08
TOPTCB   EQU   @08
INTCB    EQU   @09
TSLOTCBP EQU   @09
RTM2SWA  EQU   @10
NEXTTCB  EQU   @10
QMIOPPTR EQU   @11
AUTOPTR  EQU   @12
SAVRREG  EQU   @13
RETCODE  EQU   @15
GPR02F   EQU   @02
GPR01F   EQU   @01
GPR15F   EQU   @15
GPR00F   EQU   @00
R15      EQU   @15
R5       EQU   @05
R6       EQU   @06
R8       EQU   @08
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
MDHEAD   EQU   0
TITLEN   EQU   MDHEAD
JOBHEAD  EQU   MDHEAD+1
JOBNAME  EQU   MDHEAD+9
STEPHEAD EQU   MDHEAD+17
STEPNAME EQU   MDHEAD+27
COMPTYPE EQU   MDHEAD+43
COMPCDE  EQU   MDHEAD+51
MDDECB   EQU   0
SYSMDCB  EQU   MDDECB+8
SYSMBUF  EQU   MDDECB+12
MRMQHEAD EQU   0
MRMQCHN  EQU   MRMQHEAD
MRMQLEN  EQU   MRMQHEAD+4
MRMQSP   EQU   MRMQHEAD+8
MRMQKEY  EQU   MRMQHEAD+9
MRMQASID EQU   MRMQHEAD+10
BUFFER   EQU   0
BUFFER1  EQU   0
DCBBUF   EQU   0
OPMSGST  EQU   0
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTJESCT EQU   CVTMAP+296
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
IHADCB   EQU   0
IHADCS00 EQU   0
DCBFDAD  EQU   IHADCS00+5
IHADCS01 EQU   0
DCBDVTBL EQU   IHADCS01
IHADCS11 EQU   0
DCBRELB  EQU   IHADCS11
DCBREL   EQU   DCBRELB+1
DCBBUFCB EQU   IHADCS11+4
DCBDSORG EQU   IHADCS11+10
DCBDSRG1 EQU   DCBDSORG
DCBDSRG2 EQU   DCBDSORG+1
DCBIOBAD EQU   IHADCS11+12
DCBODEB  EQU   DCBIOBAD
DCBLNP   EQU   DCBODEB
DCBQSLM  EQU   DCBLNP
DCBIOBAA EQU   DCBODEB+1
IHADCS50 EQU   0
DCBSVCXL EQU   IHADCS50
DCBEODAD EQU   IHADCS50+4
DCBBFALN EQU   DCBEODAD
DCBHIARC EQU   DCBBFALN
DCBBFTEK EQU   DCBHIARC
DCBBFT   EQU   DCBBFTEK
DCBEXLST EQU   IHADCS50+8
DCBRECFM EQU   DCBEXLST
DCBRECLA EQU   DCBRECFM
IHADCS24 EQU   0
DCBDDNAM EQU   IHADCS24
DCBOFLGS EQU   IHADCS24+8
DCBOFLWR EQU   DCBOFLGS
DCBOFOPN EQU   DCBOFLGS
DCBIFLG  EQU   IHADCS24+9
DCBIBPCT EQU   DCBIFLG
DCBMACR  EQU   IHADCS24+10
DCBMACR1 EQU   DCBMACR
DCBMRFE  EQU   DCBMACR1
DCBMRGET EQU   DCBMRFE
DCBMRAPG EQU   DCBMACR1
DCBMRRD  EQU   DCBMRAPG
DCBMRCI  EQU   DCBMACR1
DCBMRMVG EQU   DCBMRCI
DCBMRLCG EQU   DCBMACR1
DCBMRABC EQU   DCBMACR1
DCBMRPT1 EQU   DCBMRABC
DCBMRSBG EQU   DCBMRPT1
DCBMRCRL EQU   DCBMACR1
DCBMRCHK EQU   DCBMRCRL
DCBMRRDX EQU   DCBMRCHK
DCBMRDMG EQU   DCBMACR1
DCBMACR2 EQU   DCBMACR+1
DCBMRPUT EQU   DCBMACR2
DCBMRWRT EQU   DCBMACR2
DCBMRMVP EQU   DCBMACR2
DCBMR5WD EQU   DCBMACR2
DCBMRLDM EQU   DCBMR5WD
DCBMRLCP EQU   DCBMRLDM
DCBMR4WD EQU   DCBMACR2
DCBMRPT2 EQU   DCBMR4WD
DCBMRTMD EQU   DCBMRPT2
DCBMR3WD EQU   DCBMACR2
DCBMRCTL EQU   DCBMR3WD
DCBMRSTK EQU   DCBMRCTL
DCBMR1WD EQU   DCBMACR2
DCBMRSWA EQU   DCBMR1WD
DCBMRDMD EQU   DCBMRSWA
IHADCS25 EQU   0
DCBMACRF EQU   IHADCS25+2
DCBMACF1 EQU   DCBMACRF
DCBMFFE  EQU   DCBMACF1
DCBMFGET EQU   DCBMFFE
DCBMFAPG EQU   DCBMACF1
DCBMFRD  EQU   DCBMFAPG
DCBMFCI  EQU   DCBMACF1
DCBMFMVG EQU   DCBMFCI
DCBMFLCG EQU   DCBMACF1
DCBMFABC EQU   DCBMACF1
DCBMFPT1 EQU   DCBMFABC
DCBMFSBG EQU   DCBMFPT1
DCBMFCRL EQU   DCBMACF1
DCBMFCHK EQU   DCBMFCRL
DCBMFDMG EQU   DCBMACF1
DCBMACF2 EQU   DCBMACRF+1
DCBMFPUT EQU   DCBMACF2
DCBMFWRT EQU   DCBMACF2
DCBMFMVP EQU   DCBMACF2
DCBMF5WD EQU   DCBMACF2
DCBMFLDM EQU   DCBMF5WD
DCBMFLCP EQU   DCBMFLDM
DCBMF4WD EQU   DCBMACF2
DCBMFPT2 EQU   DCBMF4WD
DCBMFTMD EQU   DCBMFPT2
DCBMF3WD EQU   DCBMACF2
DCBMFCTL EQU   DCBMF3WD
DCBMFSTK EQU   DCBMFCTL
DCBMF1WD EQU   DCBMACF2
DCBMFSWA EQU   DCBMF1WD
DCBMFDMD EQU   DCBMFSWA
DCBDEBAD EQU   IHADCS25+4
DCBIFLGS EQU   DCBDEBAD
DCBIFPCT EQU   DCBIFLGS
IHADCS26 EQU   0
DCBWRITE EQU   IHADCS26
DCBREAD  EQU   DCBWRITE
DCBWRITA EQU   DCBREAD+1
IHADCS27 EQU   0
DCBGET   EQU   IHADCS27
DCBPUT   EQU   DCBGET
DCBGETA  EQU   DCBPUT+1
IHADCS36 EQU   0
DCBGERR  EQU   IHADCS36
DCBPERR  EQU   DCBGERR
DCBCHECK EQU   DCBPERR
DCBOPTCD EQU   DCBCHECK
DCBOPTH  EQU   DCBOPTCD
DCBOPTO  EQU   DCBOPTH
DCBOPTZ  EQU   DCBOPTCD
DCBGERRA EQU   DCBCHECK+1
DCBPERRA EQU   DCBGERRA
DCBSYNAD EQU   IHADCS36+4
DCBCIND1 EQU   IHADCS36+8
DCBCIND2 EQU   IHADCS36+9
DCBIOBA  EQU   IHADCS36+16
DCBCICB  EQU   DCBIOBA
IHADCS52 EQU   0
DCBDIRCT EQU   IHADCS52
DCBQSWS  EQU   DCBDIRCT
DCBUSASI EQU   DCBQSWS
DCBQADFS EQU   DCBUSASI
DCBBUFOF EQU   DCBDIRCT+1
IHADCS37 EQU   0
DCBFLAG1 EQU   IHADCS37
IHADCS38 EQU   0
DCBEOBR  EQU   IHADCS38
DCBPOINT EQU   IHADCS38+12
DCBCNTRL EQU   DCBPOINT
IHADCS40 EQU   0
DCBEOBAD EQU   IHADCS40
DCBCCCW  EQU   IHADCS40+4
DCBRECAD EQU   DCBCCCW
DCBRECBT EQU   DCBRECAD
DCBRCREL EQU   DCBRECBT
@NM00030 EQU   IHADCS40+12
DCBEROPT EQU   @NM00030
RTCT     EQU   0
RTCTPLIB EQU   RTCT+4
RTCTSAP  EQU   RTCTPLIB
RTCTSAP1 EQU   RTCTSAP
RTCTSAP2 EQU   RTCTSAP+1
RTCTSAP3 EQU   RTCTSAP+2
RTCTSUP  EQU   RTCTPLIB+4
RTCTSUP1 EQU   RTCTSUP
RTCTSUP2 EQU   RTCTSUP+1
RTCTSUP3 EQU   RTCTSUP+2
RTCTSYD  EQU   RTCTPLIB+8
RTCTSY01 EQU   RTCTSYD
RTCTSDDS EQU   RTCT+36
RTCTFLG  EQU   RTCTSDDS+3
RTCTSDPL EQU   RTCT+156
RTCTRFLG EQU   RTCT+176
RTCTERID EQU   RTCT+224
RTCTOPT  EQU   RTCT+236
RTCTSYO  EQU   RTCTOPT+8
RTCTASO  EQU   RTCT+252
RTCTASO1 EQU   RTCTASO
RTCTASO2 EQU   RTCTASO+1
RTCTSDI  EQU   RTCT+254
RTCTSDF  EQU   RTCT+264
RTCTSDF1 EQU   RTCTSDF
RTCTSDF2 EQU   RTCTSDF+1
RTCTSDF3 EQU   RTCT+268
RTCTSDF4 EQU   RTCTSDF3+2
RTCTMRMQ EQU   RTCT+332
RTCTMOPT EQU   0
RTCTMSAO EQU   RTCTMOPT
RTCTSASD EQU   RTCTMSAO
RTCTSAO1 EQU   RTCTSASD
RTCTSAO2 EQU   RTCTSASD+1
RTCTSAPD EQU   RTCTMSAO+2
RTCTSAO3 EQU   RTCTSAPD
RTCTSAO4 EQU   RTCTSAPD+1
RTCTSAMG EQU   RTCTSAO4
RTCTSAOV EQU   RTCTSAMG
RTCTISAB EQU   RTCTSAO4
RTCTMSUO EQU   RTCTMOPT+4
RTCTSUSD EQU   RTCTMSUO
RTCTSUO1 EQU   RTCTSUSD
RTCTSUO2 EQU   RTCTSUSD+1
RTCTSUPD EQU   RTCTMSUO+2
RTCTSUO3 EQU   RTCTSUPD
RTCTSUO4 EQU   RTCTSUPD+1
RTCTSUMG EQU   RTCTSUO4
RTCTSUOV EQU   RTCTSUMG
RTCTISYU EQU   RTCTSUO4
RTCTMSYO EQU   RTCTMOPT+8
RTCTSD01 EQU   RTCTMSYO
RTCTSD04 EQU   RTCTMSYO+3
RTCTSMMG EQU   RTCTSD04
RTCTISYM EQU   RTCTSD04
RTCTMSDO EQU   RTCTMOPT+12
RTCTSDOD EQU   RTCTMSDO
RTCTSDO1 EQU   RTCTSDOD
RTCTSDO2 EQU   RTCTSDOD+1
RTCTSDO3 EQU   RTCTMSDO+2
RTCTSDO4 EQU   RTCTMSDO+3
RTCTSDMG EQU   RTCTSDO4
SNPPARMS EQU   0
SNPIDENT EQU   SNPPARMS
SNPFLAG  EQU   SNPPARMS+1
SNPVS2   EQU   SNPFLAG
SNPVS2EN EQU   SNPFLAG
SNPABEND EQU   SNPFLAG
SNPID    EQU   SNPFLAG
SNPTCB   EQU   SNPFLAG
SNPSLIST EQU   SNPFLAG
SNPSDATA EQU   SNPPARMS+4
SNPSDAT0 EQU   SNPSDATA
SNPNUC   EQU   SNPSDAT0
SNPSQA   EQU   SNPSDAT0
SNPLSQA  EQU   SNPSDAT0
SNPSWA   EQU   SNPSDAT0
SNPTRT   EQU   SNPSDAT0
SNPCB    EQU   SNPSDAT0
SNPQCB   EQU   SNPSDAT0
SNPDM    EQU   SNPSDAT0
SNPSDAT1 EQU   SNPSDATA+1
SNPIO    EQU   SNPSDAT1
SNPERR   EQU   SNPSDAT1
SNPPDATA EQU   SNPPARMS+6
SNPSAVE  EQU   SNPPDATA
SNPSAVE2 EQU   SNPPDATA
SNPREGS  EQU   SNPPDATA
SNPLPA   EQU   SNPPDATA
SNPPSW   EQU   SNPPDATA
SNPDCB   EQU   SNPPARMS+8
SNPTCBA  EQU   SNPPARMS+12
RMPL     EQU   0
RMPLFLG1 EQU   RMPL
RTM2WA   EQU   0
RTM2DESC EQU   RTM2WA
RTM2RT2D EQU   RTM2DESC+8
RTM2TCBC EQU   RTM2WA+16
RTM2CODE EQU   RTM2WA+28
RTM2CCF  EQU   RTM2CODE
RTM2CC   EQU   RTM2CODE+1
RTM2SFWA EQU   RTM2WA+32
RTM2PGCY EQU   RTM2WA+60
RTM2TRRY EQU   RTM2PGCY
RTM2EEDR EQU   RTM2TRRY
RTM2EREG EQU   RTM2EEDR
RTM2APSW EQU   RTM2EEDR+64
RTM2EPSW EQU   RTM2APSW
RTM2EMK1 EQU   RTM2EPSW
RTM2MWP1 EQU   RTM2EPSW+1
RTM2INT1 EQU   RTM2EPSW+2
RTM2NXT1 EQU   RTM2EPSW+4
RTM2AEC1 EQU   RTM2APSW+8
RTM2ILC1 EQU   RTM2AEC1+1
RTM2INC1 EQU   RTM2AEC1+2
RTM2ICD1 EQU   RTM2INC1+1
RTM2EEDH EQU   RTM2TRRY+92
RTM2STCK EQU   RTM2EEDH
RTM2MCHI EQU   RTM2EEDH+8
RTM2MCHS EQU   RTM2MCHI
RTM2MCHD EQU   RTM2MCHI+1
RTM2RSR1 EQU   RTM2EEDH+12
RTM2RSR2 EQU   RTM2EEDH+13
RTM2FLGS EQU   RTM2TRRY+120
RTM2ERRA EQU   RTM2FLGS
RTM2MCHK EQU   RTM2ERRA
RTM2PCHK EQU   RTM2ERRA
RTM2ERRB EQU   RTM2FLGS+1
RTM2ERRC EQU   RTM2FLGS+2
RTM2ERRD EQU   RTM2FLGS+3
RTM2CVER EQU   RTM2WA+186
RTM2TRRC EQU   RTM2CVER
RTM2IOFS EQU   RTM2TRRC
RTM2IOBP EQU   RTM2TRRC+2
RTM2SCBS EQU   RTM2TRRC+14
RTM2RTCD EQU   RTM2TRRC+26
RTM2SPLL EQU   RTM2RTCD+4
RTM2PARQ EQU   RTM2TRRC+46
RTM2CTL1 EQU   RTM2CVER+50
RTM2CMKA EQU   RTM2CTL1
RTM2MWPA EQU   RTM2CTL1+1
RTM2PMKA EQU   RTM2CTL1+4
RTM2CTL2 EQU   RTM2CVER+58
RTM2CMKP EQU   RTM2CTL2
RTM2MWPP EQU   RTM2CTL2+1
RTM2PMKP EQU   RTM2CTL2+4
RTM2SNAP EQU   RTM2CVER+66
RTM2DPLA EQU   RTM2SNAP
RTM2SPRM EQU   RTM2SNAP+4
RTM2DPSL EQU   RTM2SNAP+24
RTM2FRM1 EQU   RTM2DPSL
RTM2TO1  EQU   RTM2DPSL+4
RTM2FRM2 EQU   RTM2DPSL+8
RTM2TO2  EQU   RTM2DPSL+12
RTM2FRM3 EQU   RTM2DPSL+16
RTM2TO3  EQU   RTM2DPSL+20
RTM2FRM4 EQU   RTM2DPSL+24
RTM2TO4  EQU   RTM2DPSL+28
RTM2DD   EQU   RTM2SNAP+56
RTM2SNCC EQU   RTM2SNAP+64
RTM2DTCB EQU   RTM2SNAP+68
RTM2SECB EQU   RTM2CVER+138
RTM2ECBA EQU   RTM2SECB
RTM2PRWA EQU   RTM2CVER+182
RTM2SFRG EQU   RTM2CVER+186
RTM2PKEY EQU   RTM2CVER+258
RTM2SCTL EQU   RTM2CVER+259
RTM2CCTL EQU   RTM2SCTL
RTM2CNCL EQU   RTM2CCTL
RTM2NODP EQU   RTM2CCTL+1
RTM2ABDR EQU   RTM2SCTL+4
RTM2ABID EQU   RTM2ABDR
RTM2CB   EQU   RTM2ABID
RTM2ENQ  EQU   RTM2ABID
RTM2PSW  EQU   RTM2ABID
RTM2REG  EQU   RTM2ABID
RTM2SAVE EQU   RTM2ABID
RTM2SAV2 EQU   RTM2ABID
RTM2OERR EQU   RTM2ABID
RTM2ABND EQU   RTM2ABDR+1
RTM2NDMP EQU   RTM2ABND
RTM2STAT EQU   RTM2ABND
RTM2RCTL EQU   RTM2SCTL+6
RTM2INTF EQU   RTM2CVER+266
RTM2CTLR EQU   RTM2INTF
RTM2TSKT EQU   RTM2INTF+2
RTM2ABDP EQU   RTM2INTF+4
RTM2DMP1 EQU   RTM2ABDP
RTM2SMDP EQU   RTM2ABDP
RTM2ASIR EQU   RTM2INTF+5
RTM2FLX  EQU   RTM2INTF+6
RTM2FLX1 EQU   RTM2FLX
RTM2FLX2 EQU   RTM2FLX+1
RTM2RECL EQU   RTM2CVER+274
RTM2DCTL EQU   RTM2RECL+12
RTM2DENQ EQU   RTM2DCTL
RTM2DGET EQU   RTM2DCTL
RTM2DOPN EQU   RTM2DCTL
RTM2DSNP EQU   RTM2DCTL
RTM2DCLS EQU   RTM2DCTL
RTM2DFRM EQU   RTM2DCTL
RTM2DDEQ EQU   RTM2DCTL
RTM2DFTK EQU   RTM2DCTL
RTM2ECTL EQU   RTM2RECL+13
RTM2EENQ EQU   RTM2ECTL
RTM2EGET EQU   RTM2ECTL
RTM2EOPN EQU   RTM2ECTL
RTM2ESNP EQU   RTM2ECTL
RTM2ECLS EQU   RTM2ECTL
RTM2EFRM EQU   RTM2ECTL
RTM2EDEQ EQU   RTM2ECTL
RTM2EQMN EQU   RTM2ECTL
RTM2TRYR EQU   RTM2RECL+16
RTM2TRF1 EQU   RTM2TRYR
RTM2TRF2 EQU   RTM2TRYR+2
RTM2RECH EQU   RTM2CVER+294
RTM2TRRA EQU   RTM2RECH
RTM2WARG EQU   RTM2CVER+312
RTM2RRG  EQU   RTM2CVER+314
RTM2RREG EQU   RTM2RRG
RTM2CRG  EQU   RTM2CVER+378
RTM2RMIN EQU   RTM2WA+708
RTM2RMPL EQU   RTM2RMIN+4
RTM2RMWA EQU   RTM2RMIN+28
RTM2RMWS EQU   RTM2RMWA
RTM2RMSA EQU   RTM2RMIN+92
RTM2ERID EQU   RTM2WA+872
RTM2ENSN EQU   RTM2WA+884
RTM2SNLN EQU   RTM2ENSN
RTM2TRLN EQU   RTM2SNLN
RTM2TRTB EQU   RTM2ENSN+4
RTM2TRCU EQU   RTM2ENSN+8
RTM2TRFS EQU   RTM2ENSN+12
RTM2TRLS EQU   RTM2ENSN+16
RTM2RYRG EQU   RTM2WA+904
STORAGE  EQU   0
STORFRM  EQU   STORAGE
STORTO   EQU   STORAGE+4
SDUMP    EQU   0
SDUFLAG0 EQU   SDUMP
SDUDCB   EQU   SDUFLAG0
SDUBUF   EQU   SDUFLAG0
SDUSTOR  EQU   SDUFLAG0
SDUHDR   EQU   SDUFLAG0
SDUECB   EQU   SDUFLAG0
SDUASID  EQU   SDUFLAG0
SDUQUIET EQU   SDUFLAG0
SDUBRANH EQU   SDUFLAG0
SDUFLAG1 EQU   SDUMP+1
DUMPTYPE EQU   SDUFLAG1
SDUABEND EQU   SDUFLAG1
SDUNEW   EQU   SDUFLAG1
SDUSDAT1 EQU   SDUMP+2
SDUPSA   EQU   SDUSDAT1
SDUNUC   EQU   SDUSDAT1
SDUSQA   EQU   SDUSDAT1
SDULSQA  EQU   SDUSDAT1
SDURGN   EQU   SDUSDAT1
SDULPA   EQU   SDUSDAT1
SDUTRT   EQU   SDUSDAT1
SDUSDAT2 EQU   SDUMP+3
SDUCSA   EQU   SDUSDAT2
SDUSWA   EQU   SDUSDAT2
SDUNSMDP EQU   SDUSDAT2
SDUNAPSA EQU   SDUSDAT2
SDUNASQA EQU   SDUSDAT2
SDUDCBAD EQU   SDUMP+4
SDUSTORA EQU   SDUMP+8
SDUHDRAD EQU   SDUMP+12
SDUECBAD EQU   SDUMP+16
SDUMASID EQU   SDUMP+20
SDUSYSMS EQU   SDUMP+32
SDUSYSMC EQU   SDUMP+36
SDWORK   EQU   0
SDCNTRL  EQU   SDWORK
SVCDOPTS EQU   SDCNTRL+100
SVCDOPT1 EQU   SVCDOPTS
SVCDOPT2 EQU   SVCDOPTS+1
FLAGSONE EQU   SDCNTRL+102
CVRT11   EQU   SDCNTRL+368
CVRT1    EQU   CVRT11+4
CVRT2    EQU   SDCNTRL+376
SDCVRT4  EQU   CVRT2+2
SVCNAME  EQU   SDCNTRL+392
SVCNM1T5 EQU   SVCNAME
SVCNM6T8 EQU   SVCNAME+5
SVCNM7T8 EQU   SVCNM6T8+1
CCWCHAIN EQU   SDCNTRL+400
CCW1     EQU   CCWCHAIN
FLAGS1   EQU   CCW1+4
CCW2     EQU   CCWCHAIN+8
FLAGS2   EQU   CCW2+4
CCW3     EQU   CCWCHAIN+16
FLAGS3   EQU   CCW3+4
SDSMBUFF EQU   SDCNTRL+424
SDSMDECB EQU   SDCNTRL+428
SDOUTBUF EQU   SDWORK+432
RCDCCHH  EQU   SDOUTBUF
SDBUFFER EQU   SDWORK+440
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBASID EQU   ASCB+36
ASCBRSM  EQU   ASCB+52
ASCBRSMF EQU   ASCBRSM
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
OPENPARM EQU   0
OCDCBAD  EQU   OPENPARM
OCDCBFL  EQU   OCDCBAD
OCDCBADR EQU   OCDCBAD+1
TRANSTBL EQU   0
MDUMPOPT EQU   0
MDOPT1   EQU   MDUMPOPT
MDNUC    EQU   MDOPT1
MDSQA    EQU   MDOPT1
MDLSQA   EQU   MDOPT1
MDSWA    EQU   MDOPT1
MDTRT    EQU   MDOPT1
MDRGN    EQU   MDOPT1
MDLPA    EQU   MDOPT1
MDCSA    EQU   MDOPT1
MDOPT4   EQU   MDUMPOPT+3
MDTYPE   EQU   MDOPT4
QMIOP    EQU   0
QMITCBAD EQU   QMIOP
QMIRECAD EQU   QMIOP+4
QMIWRKAD EQU   QMIOP+8
QMIDSKAD EQU   QMIOP+12
QMIRECL  EQU   QMIOP+16
QMIFLAGS EQU   QMIOP+18
QMIOREAD EQU   QMIFLAGS
INFMJFCB EQU   0
JFCBDSNM EQU   INFMJFCB
JFCBELNM EQU   INFMJFCB+44
JFCBTSDM EQU   INFMJFCB+52
JFCFCBID EQU   INFMJFCB+56
JFCBFRID EQU   JFCFCBID
JFCBLTYP EQU   INFMJFCB+66
JFCBOTTR EQU   INFMJFCB+67
JFCBUFOF EQU   JFCBOTTR
JFCBFLSQ EQU   JFCBOTTR+1
JFCFUNC  EQU   JFCBFLSQ
JFCBMASK EQU   INFMJFCB+72
JFCBFLG1 EQU   JFCBMASK+5
JFCOPEN  EQU   JFCBFLG1
JFCBFLG2 EQU   JFCBMASK+6
JFCDEFER EQU   JFCBFLG2
JFCBIND1 EQU   INFMJFCB+86
JFCBIND2 EQU   INFMJFCB+87
JFCAMPTR EQU   INFMJFCB+88
JFCBUFRQ EQU   JFCAMPTR
JFCBUFNO EQU   JFCBUFRQ
JFCBGNCP EQU   JFCAMPTR+1
JFCBHIAR EQU   JFCBGNCP
JFCBFALN EQU   JFCBHIAR
JFCBFTEK EQU   JFCBFALN
JFCBBFTA EQU   JFCBFTEK
JFCEROPT EQU   INFMJFCB+92
JFCTRTCH EQU   INFMJFCB+93
JFCBE    EQU   0
JFCBFLAG EQU   JFCBE+4
JFCBTRS1 EQU   JFCBE+20
JFCGROUP EQU   JFCBE+36
JESCT    EQU   0
JESWAA   EQU   JESCT+8
JESRESQM EQU   JESCT+16
JESSSREQ EQU   JESCT+20
JESALLOC EQU   JESCT+32
JESUNALC EQU   JESCT+36
JESCATL  EQU   JESCT+40
COREAREA EQU   0
DCBAREA  EQU   COREAREA
QMIPARM  EQU   COREAREA+92
QMIAREA  EQU   COREAREA+112
JFCBAREA EQU   COREAREA+232
SDAREA   EQU   COREAREA+408
SHEAD    EQU   COREAREA+448
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBTIO   EQU   TCB+12
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBCMPC  EQU   TCBCMP+1
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFS    EQU   TCBFLGS1
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBJSTCA EQU   TCBJSTCB+1
TCBNTC   EQU   TCB+128
TCBOTC   EQU   TCB+132
TCBLTC   EQU   TCB+136
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBXSCT  EQU   TCB+240
TCBXSCT1 EQU   TCBXSCT
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
TIOT1    EQU   0
TIOCNJOB EQU   TIOT1
TIOCSTEP EQU   TIOT1+8
DECB     EQU   0
DECBPTR  EQU   DECB+4
DECTYPE  EQU   DECBPTR
DECTYPE1 EQU   DECTYPE
DECTYPE2 EQU   DECTYPE+1
DECNEXT  EQU   DECB+20
DECBS01  EQU   0
DECBECB  EQU   DECBS01
DECBRB   EQU   DECBECB
DECBECBF EQU   DECBRB
DECBTYP1 EQU   DECBS01+4
DECBTYP2 EQU   DECBS01+5
DECBEXC1 EQU   DECBS01+24
DECBEXC2 EQU   DECBS01+25
DECBS02  EQU   0
@NM00140 EQU   DECBS02
DECCC2   EQU   @NM00140+1
DECCC3   EQU   @NM00140+2
@NM00142 EQU   DECBS02+4
@NM00143 EQU   @NM00142
@NM00144 EQU   @NM00142+1
DECTYPRU EQU   @NM00144
DECNA    EQU   DECBS02+28
DECBS03  EQU   0
DECCPOL  EQU   DECBS03+20
@NM00152 EQU   DECBS03+36
DECBS04  EQU   0
@NM00155 EQU   DECBS04+4
@NM00156 EQU   @NM00155
@NM00159 EQU   DECBS04+8
DECBUFCT EQU   @NM00159
DECONLTT EQU   DECBUFCT
DECENTRY EQU   DECBS04+20
DECFLAGS EQU   DECBS04+24
DECWACK  EQU   DECFLAGS
DECREVRS EQU   DECFLAGS
DECERRST EQU   DECBS04+29
DECPOLPT EQU   DECBS04+36
IEATRSCN EQU   0
I256C    EQU   0
IEFAB4F5 EQU   0
IEFBB410 EQU   0
IEFW21SD EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
SSREQ    EQU   0
SWAMGR   EQU   0
CVTPTR   EQU   FLCCVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRSCN  EQU   CVTS01+56
CVTCRMN  EQU   CVTS01+156
CVTRTMCT EQU   CVTS01+224
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
PSARSVTE EQU   PSARSVT
ENQPARMS EQU   RTM2RMWS
ENQFLAGS EQU   ENQPARMS
MAJORAD  EQU   ENQPARMS+4
MINORAD  EQU   ENQPARMS+8
MAJOR    EQU   ENQPARMS+12
MINOR    EQU   ENQPARMS+20
JFCKEYLE EQU   JFCTRTCH
JFCCODE  EQU   JFCKEYLE
JFCSTACK EQU   JFCTRTCH
JFCMODE  EQU   JFCSTACK
JFCSPPRT EQU   JFCTRTCH
JFCBABFS EQU   JFCSPPRT+2
JFCLIMCT EQU   JFCBABFS
JFCDSORG EQU   JFCSPPRT+5
JFCDSRG1 EQU   JFCDSORG
JFCDSRG2 EQU   JFCDSORG+1
JFCRECFM EQU   JFCSPPRT+7
JFCRCFM  EQU   JFCRECFM
JFCOPTCD EQU   JFCSPPRT+8
JFCWVCSP EQU   JFCOPTCD
JFCWVCIS EQU   JFCWVCSP
JFCWVCBD EQU   JFCWVCIS
JFCALLOW EQU   JFCOPTCD
JFCRSV17 EQU   JFCALLOW
JFCOVER  EQU   JFCRSV17
JFCPCIBT EQU   JFCOPTCD
JFCMAST  EQU   JFCPCIBT
JFCEXT   EQU   JFCMAST
JFCBCKPT EQU   JFCOPTCD
JFCIND   EQU   JFCBCKPT
JFCRSV18 EQU   JFCOPTCD
JFCCYL   EQU   JFCRSV18
JFCACT   EQU   JFCCYL
JFCREDUC EQU   JFCOPTCD
JFCRSV19 EQU   JFCREDUC
JFCRSV20 EQU   JFCRSV19
JFCRSV21 EQU   JFCOPTCD
JFCDEL   EQU   JFCRSV21
JFCOPTJ  EQU   JFCOPTCD
JFCREORG EQU   JFCOPTJ
JFCBLKSI EQU   JFCSPPRT+9
JFCBUFSI EQU   JFCBLKSI
JFCAMSYN EQU   JFCSPPRT+11
JFCNCP   EQU   JFCAMSYN+2
JFCNTM   EQU   JFCAMSYN+3
JFCBFSEQ EQU   JFCNTM
JFCPCI   EQU   JFCBFSEQ
JFCRESRV EQU   JFCAMSYN+4
JFCUCSEG EQU   JFCRESRV
JFCUCSOP EQU   JFCUCSEG+4
JFCBEXTP EQU   JFCUCSOP
JFCOUTLI EQU   JFCUCSEG+5
JFCTHRSH EQU   JFCOUTLI
JFCCPRI  EQU   JFCTHRSH
JFCBVOLS EQU   JFCUCSEG+10
JFCBS001 EQU   JFCBVOLS
JFCBEXAD EQU   JFCBS001+31
JFCBPQTY EQU   JFCBS001+34
JFCBCTRI EQU   JFCBS001+37
JFCBSQTY EQU   JFCBS001+38
JFCFLGS1 EQU   JFCBS001+41
JFCBSPNM EQU   JFCBS001+45
JFCBFLG3 EQU   JFCBSPNM
TIOENTRY EQU   TIOT1+24
TIOELNGH EQU   TIOENTRY
TIOESTTA EQU   TIOENTRY+1
TIOERLOC EQU   TIOENTRY+2
TIOELINK EQU   TIOERLOC+1
TIOTTERM EQU   TIOELINK
TIOEDYNM EQU   TIOELINK
TIOESYIN EQU   TIOELINK
TIOESYOT EQU   TIOELINK
TIOEDDNM EQU   TIOENTRY+4
TIOEJFCB EQU   TIOENTRY+12
TIOESTTC EQU   TIOENTRY+15
TIOESTTB EQU   TIOENTRY+16
TIOEFSRT EQU   TIOENTRY+17
POOLSTAR EQU   TIOENTRY+20
TIOEDEVE EQU   TIOESTTB
TIOSTTB  EQU   TIOEDEVE
DECBS05  EQU   DECNEXT
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
DECBLFMT EQU   DECBS05+8
DECBLNNM EQU   DECBS05+4
DECBHDRA EQU   DECBS05
TIOUCBP  EQU   TIOEDEVE+1
TIOVERF  EQU   TIOSTTB
TIOUNLD  EQU   TIOSTTB
TIOMNTD  EQU   TIOSTTB
TIOSETU  EQU   TIOSTTB
TIOVLSR  EQU   TIOSTTB
TIOPVIO  EQU   TIOSTTB
TIOREQD  EQU   TIOSTTB
TIOUSED  EQU   TIOSTTB
TIOTFEND EQU   POOLSTAR+16
TIOPSLOT EQU   POOLSTAR+13
TIOPSTTB EQU   POOLSTAR+12
TIOPPOOL EQU   POOLSTAR+4
TIOPNSRT EQU   POOLSTAR+3
@NM00139 EQU   POOLSTAR+2
TIOPNSLT EQU   POOLSTAR+1
@NM00138 EQU   POOLSTAR
TIOSVERF EQU   TIOESTTB
TIOSUNLD EQU   TIOESTTB
TIOSMNTD EQU   TIOESTTB
TIOSSETU EQU   TIOESTTB
TIOSVLSR EQU   TIOESTTB
TIOSPVIO EQU   TIOESTTB
TIOSREQD EQU   TIOESTTB
TIOSUSED EQU   TIOESTTB
TIOSBALS EQU   TIOESTTC
TIOSBALP EQU   TIOESTTC
TIOSVOLS EQU   TIOESTTC
TIOSVOLP EQU   TIOESTTC
TIOSAFFS EQU   TIOESTTC
TIOSAFFP EQU   TIOESTTC
TIOSDEFR EQU   TIOESTTC
TIOSDKCR EQU   TIOESTTC
TIOTREM  EQU   TIOELINK
TIOESSDS EQU   TIOESYOT
TIOEQNAM EQU   TIOELINK
TIOTRV01 EQU   TIOELINK
TIOSYOUT EQU   TIOELINK
TIOEWTCT EQU   TIOERLOC
TIOSDSP2 EQU   TIOESTTA
TIOSDSP1 EQU   TIOESTTA
TIOSLABL EQU   TIOESTTA
TIOSDADS EQU   TIOESTTA
TIOSJBLB EQU   TIOESTTA
TIOSPLTS EQU   TIOESTTA
TIOSPLTP EQU   TIOESTTA
TIOSLTYP EQU   TIOESTTA
JFCBEND  EQU   JFCBS001+58
JFCBSPTN EQU   JFCBS001+57
JFCBVLCT EQU   JFCBS001+56
JFCBDRLH EQU   JFCBS001+53
JFCBSBNM EQU   JFCBS001+50
JFCBABST EQU   JFCBS001+48
JFCBRV08 EQU   JFCBSPNM+1
JFCBRV07 EQU   JFCBFLG3
JFCBRV06 EQU   JFCBFLG3
JFCBRV05 EQU   JFCBFLG3
JFCBRV04 EQU   JFCBFLG3
JFCBRV03 EQU   JFCBFLG3
JFCBRV02 EQU   JFCBFLG3
JFCBEXP  EQU   JFCBFLG3
JFCDQDSP EQU   JFCBFLG3
JFCBDQTY EQU   JFCBS001+42
JFCBUAFF EQU   JFCFLGS1
JFCRSV45 EQU   JFCFLGS1
JFCVRDS  EQU   JFCFLGS1
JFCBCEOV EQU   JFCFLGS1
JFCRSV42 EQU   JFCFLGS1
JFCBADSP EQU   JFCFLGS1
JFCTOPEN EQU   JFCFLGS1
JFCBDLET EQU   JFCFLGS1
JFCRQID  EQU   JFCBSQTY
JFCROUND EQU   JFCBCTRI
JFCALX   EQU   JFCBCTRI
JFCMIXG  EQU   JFCBCTRI
JFCONTIG EQU   JFCBCTRI
JFCRSV29 EQU   JFCBCTRI
JFCBMSGP EQU   JFCBCTRI
JFCBSPAC EQU   JFCBCTRI
JFCRUNIT EQU   JFCBPQTY
JFCBEXTL EQU   JFCBS001+30
JFCMSVGP EQU   JFCBS001+22
@NM00132 EQU   JFCBS001
JFCAVOLS EQU   JFCBVOLS
JFCBNVOL EQU   JFCUCSEG+9
JFCBNTCS EQU   JFCUCSEG+8
JFCSOWA  EQU   JFCOUTLI+1
JFCSEND  EQU   JFCCPRI
JFCEQUAL EQU   JFCCPRI
JFCRECV  EQU   JFCCPRI
JFCRSV34 EQU   JFCCPRI
JFCRSV33 EQU   JFCCPRI
JFCRSV55 EQU   JFCCPRI
JFCRSV54 EQU   JFCCPRI
JFCRSV53 EQU   JFCCPRI
JFCRSV27 EQU   JFCUCSOP
JFCRSV26 EQU   JFCUCSOP
JFCFCBVR EQU   JFCUCSOP
JFCFCBAL EQU   JFCUCSOP
JFCVER   EQU   JFCUCSOP
JFCRSV25 EQU   JFCUCSOP
JFCFOLD  EQU   JFCUCSOP
JFCUCSID EQU   JFCUCSEG
JFCINTVL EQU   JFCSPPRT+19
JFCDBUFN EQU   JFCRESRV+3
JFCCYLOF EQU   JFCRESRV+2
JFCRKP   EQU   JFCRESRV
JFCPCIR2 EQU   JFCPCI
JFCPCIR1 EQU   JFCPCI
JFCPCIN2 EQU   JFCPCI
JFCPCIN1 EQU   JFCPCI
JFCPCIA2 EQU   JFCPCI
JFCPCIA1 EQU   JFCPCI
JFCPCIX2 EQU   JFCPCI
JFCPCIX1 EQU   JFCPCI
JFCBUFMX EQU   JFCNCP
JFCLRECL EQU   JFCAMSYN
JFCBAXBF EQU   JFCBUFSI
JFCREL   EQU   JFCREORG
JFCRSV22 EQU   JFCDEL
JFCSRCHD EQU   JFCRSV20
JFCOPTQ  EQU   JFCACT
JFCFEED  EQU   JFCIND
JFCCBWU  EQU   JFCEXT
JFCWUMSG EQU   JFCOVER
JFCSDNAM EQU   JFCWVCBD
@NM00131 EQU   JFCRECFM
JFCCHAR  EQU   JFCRECFM
JFCRFS   EQU   JFCRECFM
JFCRFB   EQU   JFCRECFM
JFCRFO   EQU   JFCRCFM
JFCFMREC EQU   JFCRCFM
JFCRSV16 EQU   JFCDSRG2
JFCRSV15 EQU   JFCDSRG2
JFCORGTR EQU   JFCDSRG2
JFCORGAM EQU   JFCDSRG2
JFCRSV13 EQU   JFCDSRG2
JFCORGTQ EQU   JFCDSRG2
JFCORGTX EQU   JFCDSRG2
JFCORGGS EQU   JFCDSRG2
JFCORGU  EQU   JFCDSRG1
JFCORGPO EQU   JFCDSRG1
JFCORGMQ EQU   JFCDSRG1
JFCORGCQ EQU   JFCDSRG1
JFCORGCX EQU   JFCDSRG1
JFCORGDA EQU   JFCDSRG1
JFCORGPS EQU   JFCDSRG1
JFCORGIS EQU   JFCDSRG1
JFCTRKBL EQU   JFCLIMCT+1
@NM00130 EQU   JFCLIMCT
JFCDEN   EQU   JFCSPPRT+1
JFCPRTSP EQU   JFCSPPRT
JFCONE   EQU   JFCMODE
JFCTWO   EQU   JFCMODE
JFCRSV07 EQU   JFCMODE
JFCRSV06 EQU   JFCMODE
JFCMODER EQU   JFCMODE
JFCMODEO EQU   JFCMODE
JFCEBCD  EQU   JFCMODE
JFCBIN   EQU   JFCMODE
JFCRSV32 EQU   JFCCODE
JFCTTY   EQU   JFCCODE
JFCASCII EQU   JFCCODE
JFCNCR   EQU   JFCCODE
JFCBUR   EQU   JFCCODE
JFCFRI   EQU   JFCCODE
JFCBCD   EQU   JFCCODE
JFCNOCON EQU   JFCCODE
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
DECWAREA EQU   DECBS04+44
DECWLNG  EQU   DECBS04+42
DECRSV56 EQU   DECBS04+40
DECPOLPA EQU   DECPOLPT+1
DECNDXPL EQU   DECPOLPT
DECADRPT EQU   DECBS04+32
DECCSWST EQU   DECBS04+30
DECRSV55 EQU   DECERRST
DECRSV54 EQU   DECERRST
DECRSV53 EQU   DECERRST
DECDSABL EQU   DECERRST
DECDIAGN EQU   DECERRST
DECERPER EQU   DECERRST
DECUNDEF EQU   DECERRST
DECSIO3  EQU   DECERRST
DECTPCOD EQU   DECBS04+28
DECRESPN EQU   DECBS04+26
DECRLN   EQU   DECBS04+25
DECSTXNQ EQU   DECFLAGS
DECSSMSG EQU   DECREVRS
DECNEGRP EQU   DECFLAGS
DECNOBUF EQU   DECFLAGS
DECBADID EQU   DECFLAGS
DECALTAC EQU   DECFLAGS
DECDIFAC EQU   DECWACK
DECERRMS EQU   DECWACK
DECENTRA EQU   DECENTRY+1
DECCMCOD EQU   DECENTRY
DECCOUNT EQU   DECBS04+18
DECSENS1 EQU   DECBS04+17
DECSENS0 EQU   DECBS04+16
@NM00160 EQU   DECBS04+12
DECDCBAA EQU   @NM00159+1
DECRSV52 EQU   DECONLTT
DECRSV51 EQU   DECONLTT
DECRSV50 EQU   DECONLTT
DECRSV49 EQU   DECONLTT
DECRSV48 EQU   DECONLTT
DECRSV47 EQU   DECONLTT
DECRCVMS EQU   DECONLTT
DECONLTS EQU   DECONLTT
@NM00158 EQU   DECBS04+6
@NM00157 EQU   @NM00155+1
DECSLNTH EQU   @NM00156
DECSAREA EQU   @NM00156
DECSTRME EQU   @NM00156
DECRSV46 EQU   @NM00156
DECRSV45 EQU   @NM00156
DECRSV44 EQU   @NM00156
DECRSV43 EQU   @NM00156
DECRDAPL EQU   @NM00156
@NM00154 EQU   DECBS04
@NM00153 EQU   @NM00152+1
DECRSV42 EQU   @NM00152
DECADRCH EQU   DECBS03+32
DECRSV41 EQU   DECBS03+28
DECRSV40 EQU   DECBS03+26
DECUCBDX EQU   DECBS03+25
DECRSV39 EQU   DECBS03+24
DECCPOLA EQU   DECCPOL+1
DECNMMSG EQU   DECCPOL
DECRSV38 EQU   DECBS03+16
@NM00151 EQU   DECBS03+12
@NM00150 EQU   DECBS03+8
@NM00149 EQU   DECBS03+6
DECOPCOD EQU   DECBS03+5
DECRSV37 EQU   DECBS03+4
LINEDECB EQU   DECBS03
DECNAA   EQU   DECNA+1
DECRSV36 EQU   DECNA
DECRECPT EQU   DECBS02+24
DECKYADR EQU   DECBS02+20
@NM00148 EQU   DECBS02+16
@NM00147 EQU   DECBS02+12
@NM00146 EQU   DECBS02+8
@NM00145 EQU   DECBS02+6
DECRSV35 EQU   @NM00144
DECWRADD EQU   @NM00144
DECSRKEY EQU   @NM00144
DECOPRD  EQU   @NM00144
DECTYPR  EQU   DECTYPRU
DECTYPU  EQU   DECTYPRU
DECBKLNS EQU   @NM00144
DECKEYS  EQU   @NM00144
DECRELBA EQU   @NM00143
DECRDEX  EQU   @NM00143
DECDYNBF EQU   @NM00143
DECACTAD EQU   @NM00143
DECFDBCK EQU   @NM00143
DECEXSRC EQU   @NM00143
DECOFLOW EQU   @NM00143
DECVERFY EQU   @NM00143
DECRSV34 EQU   @NM00140+3
DECCCKFF EQU   DECCC3
DECCCOPT EQU   DECCC3
DECCCSDK EQU   DECCC3
DECCCWDI EQU   DECCC3
DECCCNBK EQU   DECCC3
DECCCEXS EQU   DECCC3
DECCCWRI EQU   DECCC3
DECRSV33 EQU   DECCC3
DECCCREX EQU   DECCC2
DECCCUER EQU   DECCC2
DECCCEOD EQU   DECCC2
DECCCERR EQU   DECCC2
DECCCINV EQU   DECCC2
DECCCNSP EQU   DECCC2
DECCCRLC EQU   DECCC2
DECCCRNF EQU   DECCC2
@NM00141 EQU   @NM00140
DECEXRKU EQU   DECBEXC2
DECEXASR EQU   DECBEXC2
DECRSV32 EQU   DECBEXC2
DECRSV31 EQU   DECBEXC2
DECRSV30 EQU   DECBEXC2
DECRSV29 EQU   DECBEXC2
DECRSV28 EQU   DECBEXC2
DECRSV27 EQU   DECBEXC2
DECEXDUP EQU   DECBEXC1
DECEXOFL EQU   DECBEXC1
DECEXUBK EQU   DECBEXC1
DECEXERR EQU   DECBEXC1
DECEXINV EQU   DECBEXC1
DECEXNSP EQU   DECBEXC1
DECEXRLC EQU   DECBEXC1
DECEXRNF EQU   DECBEXC1
DECBKEY  EQU   DECBS01+20
DECBLOGR EQU   DECBS01+16
DECBAREA EQU   DECBS01+12
DECBDCBA EQU   DECBS01+8
DECBLGTH EQU   DECBS01+6
DECRSV26 EQU   DECBTYP2
DECRSV25 EQU   DECBTYP2
DECBWRKN EQU   DECBTYP2
DECBWRK  EQU   DECBTYP2
DECRSV24 EQU   DECBTYP2
DECBRDKU EQU   DECBTYP2
DECRSV23 EQU   DECBTYP2
DECBRDK  EQU   DECBTYP2
DECBARS  EQU   DECBTYP1
DECBLNS  EQU   DECBTYP1
DECRSV22 EQU   DECBTYP1
DECRSV21 EQU   DECBTYP1
DECRSV20 EQU   DECBTYP1
DECRSV19 EQU   DECBTYP1
DECRSV18 EQU   DECBTYP1
DECRSV17 EQU   DECBTYP1
DECBRBA  EQU   DECBRB+1
DECRSV16 EQU   DECBECBF
DECRSV15 EQU   DECBECBF
DECRSV14 EQU   DECBECBF
DECRSV13 EQU   DECBECBF
DECRSV12 EQU   DECBECBF
DECRSV11 EQU   DECBECBF
DECBPOST EQU   DECBECBF
DECBWAIT EQU   DECBECBF
DECNEXTA EQU   DECNEXT+1
DECRSV10 EQU   DECNEXT
DECIOBPT EQU   DECB+16
DECAREA  EQU   DECB+12
DECDCBAD EQU   DECB+8
DECLNGTH EQU   DECBPTR+2
DECWRSFR EQU   DECTYPE2
DECRSV09 EQU   DECTYPE2
DECWRSZ  EQU   DECTYPE2
DECRSV08 EQU   DECTYPE2
DECWRSD  EQU   DECTYPE2
DECWRSF  EQU   DECTYPE2
DECRDSB  EQU   DECTYPE2
DECRDSF  EQU   DECTYPE2
DECRSV07 EQU   DECTYPE1
DECRSV06 EQU   DECTYPE1
DECRSV05 EQU   DECTYPE1
DECRSV04 EQU   DECTYPE1
DECRSV03 EQU   DECTYPE1
DECRSV02 EQU   DECTYPE1
DECRSV01 EQU   DECTYPE1
DECLNS   EQU   DECTYPE1
DECSDECB EQU   DECB
@NM00137 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBRV143 EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00136 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBRV327 EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBRV326 EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBSTAWA EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBCCPVI EQU   TCBXSCT+2
TCBRV325 EQU   TCBXSCT+1
TCBRV324 EQU   TCBXSCT1
TCBRV323 EQU   TCBXSCT1
TCBRV322 EQU   TCBXSCT1
TCBRV321 EQU   TCBXSCT1
TCBRV320 EQU   TCBXSCT1
TCBRV319 EQU   TCBXSCT1
TCBS3A   EQU   TCBXSCT1
TCBACTIV EQU   TCBXSCT1
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00135 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00134 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
OPENAREA EQU   COREAREA+88
JESSASTA EQU   JESCT+48
JESNUCBS EQU   JESCT+44
JESPJESN EQU   JESCT+28
JESSSCT  EQU   JESCT+24
JESQMGR  EQU   JESCT+12
JESUNITS EQU   JESCT+4
@NM00133 EQU   JESCT
JFCBE010 EQU   JFCBE+44
JFCGRP8  EQU   JFCGROUP+7
JFCGRP7  EQU   JFCGROUP+6
JFCGRP6  EQU   JFCGROUP+5
JFCGRP5  EQU   JFCGROUP+4
JFCGRP4  EQU   JFCGROUP+3
JFCGRP3  EQU   JFCGROUP+2
JFCGRP2  EQU   JFCGROUP+1
JFCGRP1  EQU   JFCGROUP
JFCBTRS4 EQU   JFCBE+32
JFCBTRS3 EQU   JFCBE+28
JFCBTRS2 EQU   JFCBE+24
JFCBE009 EQU   JFCBE+16
JFCMODIF EQU   JFCBE+12
JFCBMAGT EQU   JFCBE+8
JFCIMTOT EQU   JFCBE+7
JFCBE008 EQU   JFCBE+6
JFCIDTRC EQU   JFCBE+5
JFCBE007 EQU   JFCBFLAG
JFCBBST  EQU   JFCBFLAG
JFCBCFS  EQU   JFCBFLAG
JFCBE006 EQU   JFCBFLAG
JFCBE005 EQU   JFCBFLAG
JFCBE004 EQU   JFCBFLAG
JFCBE003 EQU   JFCBFLAG
JFCBEOPN EQU   JFCBFLAG
JFCBE001 EQU   JFCBE+3
JFCBEXTR EQU   JFCBE
JFCRSV05 EQU   JFCEROPT
JFCRSV04 EQU   JFCEROPT
JFCRSV03 EQU   JFCEROPT
JFCRSV02 EQU   JFCEROPT
JFCTOPT  EQU   JFCEROPT
JFCABN   EQU   JFCEROPT
JFCSKP   EQU   JFCEROPT
JFCACC   EQU   JFCEROPT
JFCBUFL  EQU   JFCAMPTR+2
JFCFWORD EQU   JFCBFTEK
JFCDWORD EQU   JFCBFTEK
JFCHIER1 EQU   JFCBFTEK
JFCDYN   EQU   JFCBFTEK
JFCEXC   EQU   JFCBFTEK
JFCBBFTR EQU   JFCBBFTA
JFCSIM   EQU   JFCBBFTA
JFCHIER  EQU   JFCBFTEK
JFCBFOUT EQU   JFCBUFNO
JFCBUFIN EQU   JFCBUFNO
JFCTEMP  EQU   JFCBIND2
JFCREQ   EQU   JFCBIND2
JFCENT   EQU   JFCBIND2
JFCSHARE EQU   JFCBIND2
JFCSECUR EQU   JFCBIND2
JFCDISP  EQU   JFCBIND2
JFCPDS   EQU   JFCBIND1
JFCGDG   EQU   JFCBIND1
JFCADDED EQU   JFCBIND1
JFCLOC   EQU   JFCBIND1
JFCRLSE  EQU   JFCBIND1
JFCBXPDT EQU   INFMJFCB+83
JFCBCRDT EQU   INFMJFCB+80
JFCBOPS2 EQU   JFCBMASK+7
JFCRCTLG EQU   JFCBFLG2
JFCBBUFF EQU   JFCBFLG2
JFCTRACE EQU   JFCBFLG2
JFCSDRPS EQU   JFCBFLG2
JFCMODNW EQU   JFCBFLG2
JFCNRPS  EQU   JFCDEFER
JFCOUTOP EQU   JFCBFLG2
JFCINOP  EQU   JFCBFLG2
JFCBPWBP EQU   JFCOPEN
@NM00129 EQU   JFCOPEN
JFCDUAL  EQU   JFCBFLG1
JFCSLDES EQU   JFCBFLG1
JFCSLCRE EQU   JFCBFLG1
JFCSTAND EQU   JFCBFLG1
JFCBOPS1 EQU   JFCBMASK
JFCBVLSQ EQU   INFMJFCB+70
JFCRSV31 EQU   JFCFUNC
JFCFNCBT EQU   JFCFUNC
JFCFNCBX EQU   JFCFUNC
JFCFNCBD EQU   JFCFUNC
JFCFNCBW EQU   JFCFUNC
JFCFNCBP EQU   JFCFUNC
JFCFNCBR EQU   JFCFUNC
JFCFNCBI EQU   JFCFUNC
JFCBFOFL EQU   JFCBUFOF
JFCNL    EQU   JFCBLTYP
JFCSL    EQU   JFCBLTYP
JFCNSL   EQU   JFCBLTYP
JFCSUL   EQU   JFCBLTYP
JFCBLP   EQU   JFCBLTYP
JFCBLTM  EQU   JFCBLTYP
JFCBAL   EQU   JFCBLTYP
JFCRSV38 EQU   JFCBLTYP
JFCVINDX EQU   INFMJFCB+64
JFCNLREC EQU   INFMJFCB+62
JFCBADBF EQU   INFMJFCB+60
JFCAMSTR EQU   JFCBFRID+2
JFCAMCRO EQU   JFCBFRID
JFCBDSCB EQU   INFMJFCB+53
JFCPAT   EQU   JFCBTSDM
JFCNDCB  EQU   JFCBTSDM
JFCNDSCB EQU   JFCBTSDM
JFCNWRIT EQU   JFCBTSDM
JFCTTR   EQU   JFCBTSDM
JFCSDS   EQU   JFCBTSDM
JFCVSL   EQU   JFCBTSDM
JFCCAT   EQU   JFCBTSDM
JFCIPLTX EQU   JFCBELNM
JFCBQNAM EQU   JFCBDSNM
@NM00128 EQU   QMIOP+19
@NM00127 EQU   QMIFLAGS
@NM00126 EQU   QMIFLAGS
@NM00125 EQU   QMIFLAGS
@NM00124 EQU   QMIFLAGS
@NM00123 EQU   QMIFLAGS
@NM00122 EQU   QMIFLAGS
QMIOWRTE EQU   QMIFLAGS
MDIGNORE EQU   MDOPT4
@NM00121 EQU   MDOPT4
MDOPT3   EQU   MDUMPOPT+2
MDOPT2   EQU   MDUMPOPT+1
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSMA EQU   ASCBRSM+1
ASCBRV54 EQU   ASCBRSMF
ASCBRV53 EQU   ASCBRSMF
ASCBRV52 EQU   ASCBRSMF
ASCBRV51 EQU   ASCBRSMF
ASCBVEQR EQU   ASCBRSMF
ASCBN2LP EQU   ASCBRSMF
ASCB1LPU EQU   ASCBRSMF
ASCB2LPU EQU   ASCBRSMF
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
DATALEN  EQU   SDOUTBUF+6
KEYLEN   EQU   SDOUTBUF+5
RECORDNO EQU   SDOUTBUF+4
RCDHH    EQU   RCDCCHH+2
RCDCC    EQU   RCDCCHH
BYTECNT3 EQU   CCW3+6
@NM00120 EQU   CCW3+5
PCI3     EQU   FLAGS3
SKIP3    EQU   FLAGS3
SLI3     EQU   FLAGS3
CC3      EQU   FLAGS3
CD3      EQU   FLAGS3
DATAADR3 EQU   CCW3+1
CMDCODE3 EQU   CCW3
BYTECNT2 EQU   CCW2+6
@NM00119 EQU   CCW2+5
PCI2     EQU   FLAGS2
SKIP2    EQU   FLAGS2
SLI2     EQU   FLAGS2
CC2      EQU   FLAGS2
CD2      EQU   FLAGS2
DATAADR2 EQU   CCW2+1
CMDCODE2 EQU   CCW2
BYTECNT1 EQU   CCW1+6
@NM00118 EQU   CCW1+5
PCI1     EQU   FLAGS1
SKIP1    EQU   FLAGS1
SLI1     EQU   FLAGS1
CMDC1    EQU   FLAGS1
CD1      EQU   FLAGS1
DATAADR1 EQU   CCW1+1
CMDCODE1 EQU   CCW1
SVCNM8   EQU   SVCNM7T8+1
SVCNM7   EQU   SVCNM7T8
SVCNM6   EQU   SVCNM6T8
SVCNM1T4 EQU   SVCNM1T5
@NM00117 EQU   SDCNTRL+388
SVC994ID EQU   SDCNTRL+384
CVRT2SGN EQU   SDCVRT4+5
@NM00116 EQU   SDCVRT4
@NM00115 EQU   CVRT2
SDCVRT1  EQU   CVRT1+2
@NM00114 EQU   CVRT1
@NM00113 EQU   CVRT11
CHCNT    EQU   SDCNTRL+366
TIMCNT   EQU   SDCNTRL+364
DSTINDEX EQU   SDCNTRL+360
SDWRGSV2 EQU   SDCNTRL+288
SDWRGSV1 EQU   SDCNTRL+216
SDRETCOD EQU   SDCNTRL+212
ADDADRWD EQU   SDCNTRL+208
ADDADRWC EQU   SDCNTRL+204
ADDADRWB EQU   SDCNTRL+200
ADDADRWA EQU   SDCNTRL+196
USEEND   EQU   SDCNTRL+192
USESTART EQU   SDCNTRL+188
SPQEADDR EQU   SDCNTRL+184
USERRETA EQU   SDCNTRL+180
PGFRRETA EQU   SDCNTRL+176
SPQERETA EQU   SDCNTRL+172
@NM00112 EQU   SDCNTRL+171
SDWKEY   EQU   SDCNTRL+170
AFFNSAV  EQU   SDCNTRL+168
FREERETA EQU   SDCNTRL+164
LPDERETA EQU   SDCNTRL+160
CDERETA  EQU   SDCNTRL+156
DISPRETA EQU   SDCNTRL+152
SDIORETA EQU   SDCNTRL+148
SVCDLPST EQU   SDCNTRL+136
SVCDMPNM EQU   SDCNTRL+128
ERRORWK  EQU   SDCNTRL+104
FLAGSTWO EQU   SDCNTRL+103
SDWPAGOT EQU   FLAGSONE
FLGFLAST EQU   FLAGSONE
FLGTAPEE EQU   FLAGSONE
FLGRTFUL EQU   FLAGSONE
SVCDNSQA EQU   SVCDOPT2
SVCDNAPA EQU   SVCDOPT2
SVCDNSMD EQU   SVCDOPT2
SVCDSMDP EQU   SVCDOPT2
SVCDSWA  EQU   SVCDOPT2
SVCDCSA  EQU   SVCDOPT2
SVCDTRT  EQU   SVCDOPT1
SVCDLPA  EQU   SVCDOPT1
SVCDRGN  EQU   SVCDOPT1
SVCDLSQA EQU   SVCDOPT1
SVCDSQA  EQU   SVCDOPT1
SVCDNUC  EQU   SVCDOPT1
SVCDPSA  EQU   SVCDOPT1
SVCDAPSA EQU   SVCDOPT1
SDWSDPL  EQU   SDCNTRL+96
SDSRBBAS EQU   SDCNTRL+92
SDSRBADR EQU   SDCNTRL+88
SVCDSRBA EQU   SDCNTRL+84
ENDADRNT EQU   SDCNTRL+80
RANGEPTR EQU   SDCNTRL+76
GLOBADDR EQU   SDCNTRL+72
LOCALADR EQU   SDCNTRL+68
NUCADDR  EQU   SDCNTRL+64
DACHARAD EQU   SDCNTRL+60
LSTESTAE EQU   SDCNTRL+44
SDIOB    EQU   SDCNTRL+4
SDECB    EQU   SDCNTRL
SDUSUMLP EQU   SDUMP+28
SDUASIDP EQU   SDUMP+24
SDUTASID EQU   SDUMASID+2
SDUCASID EQU   SDUMASID
@NM00111 EQU   SDUSDAT2
SDUSMDMP EQU   SDUSDAT2
SDUALPSA EQU   SDUSDAT1
@NM00110 EQU   SDUFLAG1
SDUSLIP  EQU   SDUFLAG1
SDUSULST EQU   SDUFLAG1
SDUASLST EQU   SDUFLAG1
STORBTO  EQU   STORTO
STORB    EQU   STORFRM
RTM2TECB EQU   RTM2RYRG+64
RTM2RYRS EQU   RTM2RYRG
@NM00109 EQU   RTM2WA+882
RTM2ERTM EQU   RTM2ERID+6
RTM2ERAS EQU   RTM2ERID+4
RTM2CPUI EQU   RTM2ERID+2
RTM2SEQ# EQU   RTM2ERID
RTM2RMPS EQU   RTM2RMIN
RTM2TRSA EQU   RTM2CVER+450
RTM2CREG EQU   RTM2CRG
RTM2RBRG EQU   RTM2CVER+313
@NM00108 EQU   RTM2CVER+310
RTM2CTRA EQU   RTM2RECH+12
RTM2STRA EQU   RTM2RECH+8
RTM2SKRA EQU   RTM2RECH+4
@NM00107 EQU   RTM2TRYR+3
@NM00106 EQU   RTM2TRF2
RTM2GMR  EQU   RTM2TRF2
RTM2PPR  EQU   RTM2TRF2
RTM2IOR  EQU   RTM2TRF2
RTM2AS3R EQU   RTM2TRF1+1
RTM2AS2R EQU   RTM2TRF1+1
RTM2AS1R EQU   RTM2TRF1+1
RTM2XFLG EQU   RTM2TRF1+1
RTM2XABD EQU   RTM2TRF1+1
RTM2XIP  EQU   RTM2TRF1+1
RTM2RTYS EQU   RTM2TRF1+1
RTM2RCD  EQU   RTM2TRF1+1
RTM2FMS  EQU   RTM2TRF1
RTM2VLDY EQU   RTM2TRF1
RTM2HOOK EQU   RTM2TRF1
RTM2PPS  EQU   RTM2TRF1
RTM2GMS  EQU   RTM2TRF1
RTM2IORS EQU   RTM2TRF1
RTM2IOHS EQU   RTM2TRF1
RTM2IOQS EQU   RTM2TRF1
RTM2TMER EQU   RTM2RECL+14
RTM2SCTX EQU   RTM2RECL+8
RTM2SCTR EQU   RTM2RECL+4
RTM2SCTC EQU   RTM2RECL
@NM00105 EQU   RTM2FLX2
RTM2CERX EQU   RTM2FLX2
RTM2RCRX EQU   RTM2FLX2
RTM2RTRX EQU   RTM2FLX1
RTM2LTX  EQU   RTM2FLX1
RTM2PRX  EQU   RTM2FLX1
RTM2CVX  EQU   RTM2FLX1
RTM2DWX  EQU   RTM2FLX1
RTM2ABX  EQU   RTM2FLX1
RTM2EOTX EQU   RTM2FLX1
RTM2MTX  EQU   RTM2FLX1
@NM00104 EQU   RTM2ASIR
RTM2UPRG EQU   RTM2ASIR
RTM2TRME EQU   RTM2ASIR
@NM00103 EQU   RTM2ABDP
RTM2MEMT EQU   RTM2INTF+3
@NM00102 EQU   RTM2TSKT
RTM2PURG EQU   RTM2TSKT
@NM00101 EQU   RTM2INTF+1
@NM00100 EQU   RTM2CTLR
RTM2WRAP EQU   RTM2CTLR
RTM2TMEM EQU   RTM2CTLR
RTM2RETR EQU   RTM2CTLR
RTM2RECR EQU   RTM2CTLR
@NM00099 EQU   RTM2RCTL
RTM2JPAQ EQU   RTM2RCTL
RTM2LPAQ EQU   RTM2RCTL
RTM2BFTL EQU   RTM2RCTL
RTM2TRSW EQU   RTM2RCTL
RTM2WANA EQU   RTM2RCTL
RTM2WAIN EQU   RTM2RCTL
RTM2STA2 EQU   RTM2RCTL
@NM00098 EQU   RTM2ABID
RTM2MCTL EQU   RTM2SCTL+3
RTM2TCTL EQU   RTM2SCTL+2
@NM00097 EQU   RTM2CCTL+1
RTM2RGEB EQU   RTM2CCTL+1
RTM2DEND EQU   RTM2CCTL+1
RTM2RSCN EQU   RTM2CCTL+1
RTM2CONT EQU   RTM2CCTL
RTM2SLIP EQU   RTM2CCTL
RTM2HEED EQU   RTM2CCTL
RTM2REED EQU   RTM2CCTL
RTM2ISPC EQU   RTM2CCTL
RTM2SQS  EQU   RTM2CCTL
RTM2STPT EQU   RTM2CCTL
RTM2SFSA EQU   RTM2SFRG
RTM2PREV EQU   RTM2CVER+178
RTM2SPWA EQU   RTM2CVER+174
RTM2DCBA EQU   RTM2CVER+170
RTM2ECBS EQU   RTM2SECB+16
RTM2LECB EQU   RTM2ECBA
RTM2LTO4 EQU   RTM2TO4
RTM2LFR4 EQU   RTM2FRM4
RTM2LTO3 EQU   RTM2TO3
RTM2LFR3 EQU   RTM2FRM3
RTM2LTO2 EQU   RTM2TO2
RTM2LFR2 EQU   RTM2FRM2
RTM2LTO1 EQU   RTM2TO1
RTM2LFR1 EQU   RTM2FRM1
RTM2NXTP EQU   RTM2CTL2+5
RTM2SGP  EQU   RTM2PMKP
RTM2EUP  EQU   RTM2PMKP
RTM2DOP  EQU   RTM2PMKP
RTM2FPP  EQU   RTM2PMKP
RTM2CCP  EQU   RTM2PMKP
RTM2ILP  EQU   RTM2PMKP
RTM2INTP EQU   RTM2CTL2+2
RTM2SPVP EQU   RTM2MWPP
RTM2WATP EQU   RTM2MWPP
RTM2MCKP EQU   RTM2MWPP
@NM00096 EQU   RTM2MWPP
RTM2KEYP EQU   RTM2MWPP
RTM2EXTP EQU   RTM2CMKP
RTM2IOP  EQU   RTM2CMKP
RTM2NXTA EQU   RTM2CTL1+5
RTM2SGA  EQU   RTM2PMKA
RTM2EUA  EQU   RTM2PMKA
RTM2DOA  EQU   RTM2PMKA
RTM2FPA  EQU   RTM2PMKA
RTM2CCA  EQU   RTM2PMKA
RTM2ILA  EQU   RTM2PMKA
RTM2INTA EQU   RTM2CTL1+2
RTM2SPVA EQU   RTM2MWPA
RTM2WATA EQU   RTM2MWPA
RTM2MCKA EQU   RTM2MWPA
@NM00095 EQU   RTM2MWPA
RTM2KEYA EQU   RTM2MWPA
RTM2EXTA EQU   RTM2CMKA
RTM2IOA  EQU   RTM2CMKA
@NM00094 EQU   RTM2PARQ+1
RTM2RCDE EQU   RTM2PARQ
RTM2RYRB EQU   RTM2TRRC+42
RTM2RTYA EQU   RTM2TRRC+38
RTM2COMP EQU   RTM2TRRC+34
RTM2SIZE EQU   RTM2SPLL+1
RTM2SUBP EQU   RTM2SPLL
RTM2RTCA EQU   RTM2RTCD
RTM2SCBO EQU   RTM2SCBS+8
RTM2SCBN EQU   RTM2SCBS+4
RTM2SCBC EQU   RTM2SCBS
RTM2STAR EQU   RTM2TRRC+10
RTM2RBST EQU   RTM2TRRC+6
RTM2FIOB EQU   RTM2IOBP+1
@NM00093 EQU   RTM2IOBP
@NM00092 EQU   RTM2TRRC+1
@NM00091 EQU   RTM2IOFS
RTM2NIOP EQU   RTM2IOFS
RTM2NOIO EQU   RTM2IOFS
RTM2IOHT EQU   RTM2IOFS
RTM2IOQR EQU   RTM2IOFS
RTM2FMID EQU   RTM2TRRY+124
RTM2ERFL EQU   RTM2ERRD
RTM2MCIV EQU   RTM2ERRD
RTM2RPIV EQU   RTM2ERRD
RTM2MABD EQU   RTM2ERRD
RTM2CTS  EQU   RTM2ERRD
RTM2STAE EQU   RTM2ERRD
RTM2NRBE EQU   RTM2ERRD
RTM2CLUP EQU   RTM2ERRD
@NM00090 EQU   RTM2ERRC
RTM2EAS  EQU   RTM2ERRC
RTM2PERC EQU   RTM2ERRC
RTM2IRB  EQU   RTM2ERRC
RTM2STAI EQU   RTM2ERRC
RTM2STAF EQU   RTM2ERRC
RTM2SRBM EQU   RTM2ERRB
RTM2LDIS EQU   RTM2ERRB
RTM2ENRB EQU   RTM2ERRB
RTM2TYP1 EQU   RTM2ERRB
@NM00089 EQU   RTM2ERRB
RTM2PGIO EQU   RTM2ERRA
RTM2TEXC EQU   RTM2ERRA
RTM2SVCE EQU   RTM2ERRA
RTM2ABTM EQU   RTM2ERRA
RTM2SVCD EQU   RTM2ERRA
RTM2RKEY EQU   RTM2ERRA
RTM2TIME EQU   RTM2EEDH+20
RTM2RFSA EQU   RTM2EEDH+16
@NM00088 EQU   RTM2EEDH+14
RTM2VEQR EQU   RTM2RSR2
RTM2PGFX EQU   RTM2RSR2
RTM2FLSQ EQU   RTM2RSR2
RTM2FSQA EQU   RTM2RSR2
RTM2NUCL EQU   RTM2RSR2
RTM2SPER EQU   RTM2RSR2
RTM2INTC EQU   RTM2RSR2
RTM2OFLN EQU   RTM2RSR2
RTM2CHNG EQU   RTM2RSR1
RTM2MSER EQU   RTM2RSR1
@NM00087 EQU   RTM2RSR1
RTM2CPID EQU   RTM2EEDH+10
RTM2TERR EQU   RTM2MCHD
RTM2SOFT EQU   RTM2MCHD
RTM2INSF EQU   RTM2MCHD
RTM2ACR  EQU   RTM2MCHD
RTM2SCK  EQU   RTM2MCHD
RTM2PSWU EQU   RTM2MCHD
RTM2REGU EQU   RTM2MCHD
RTM2SKYF EQU   RTM2MCHD
@NM00086 EQU   RTM2MCHS
RTM2RSRF EQU   RTM2MCHS
RTM2RSRC EQU   RTM2MCHS
RTM2INVP EQU   RTM2MCHS
RTM2TSVL EQU   RTM2MCHS
RTM2RCDF EQU   RTM2MCHS
RTM2SRVL EQU   RTM2MCHS
RTM2SCKE EQU   RTM2STCK+4
RTM2SCKB EQU   RTM2STCK
RTM2ABEP EQU   RTM2TRRY+88
RTM2ABNM EQU   RTM2TRRY+80
RTM2TRAN EQU   RTM2AEC1+4
RTM2IPC1 EQU   RTM2ICD1
RTM2IMC1 EQU   RTM2ICD1
RTM2IPR1 EQU   RTM2ICD1
@NM00085 EQU   RTM2INC1
@NM00084 EQU   RTM2ILC1
RTM2IL1  EQU   RTM2ILC1
@NM00083 EQU   RTM2ILC1
@NM00082 EQU   RTM2AEC1
RTM2ADD1 EQU   RTM2NXT1+1
@NM00081 EQU   RTM2NXT1
@NM00080 EQU   RTM2EPSW+3
RTM2SGN1 EQU   RTM2INT1
RTM2EXP1 EQU   RTM2INT1
RTM2DEC1 EQU   RTM2INT1
RTM2FPO1 EQU   RTM2INT1
RTM2CC1  EQU   RTM2INT1
@NM00079 EQU   RTM2INT1
RTM2PGM1 EQU   RTM2MWP1
RTM2WAT1 EQU   RTM2MWP1
RTM2MCK1 EQU   RTM2MWP1
RTM2ECT1 EQU   RTM2MWP1
RTM2KEY1 EQU   RTM2MWP1
RTM2EXT1 EQU   RTM2EMK1
RTM2AIO1 EQU   RTM2EMK1
RTM2TRM1 EQU   RTM2EMK1
RTM2EAM1 EQU   RTM2EMK1
@NM00078 EQU   RTM2EMK1
RTM2PER1 EQU   RTM2EMK1
@NM00077 EQU   RTM2EMK1
RTM2ER15 EQU   RTM2EREG+60
RTM2ER14 EQU   RTM2EREG+56
RTM2ER13 EQU   RTM2EREG+52
RTM2ER12 EQU   RTM2EREG+48
RTM2ER11 EQU   RTM2EREG+44
RTM2ER10 EQU   RTM2EREG+40
RTM2ER9  EQU   RTM2EREG+36
RTM2ER8  EQU   RTM2EREG+32
RTM2ER7  EQU   RTM2EREG+28
RTM2ER6  EQU   RTM2EREG+24
RTM2ER5  EQU   RTM2EREG+20
RTM2ER4  EQU   RTM2EREG+16
RTM2ER3  EQU   RTM2EREG+12
RTM2ER2  EQU   RTM2EREG+8
RTM2ER1  EQU   RTM2EREG+4
RTM2ER0  EQU   RTM2EREG
RTM2CT   EQU   RTM2WA+56
RTM2VRBT EQU   RTM2WA+52
RTM2TCBT EQU   RTM2WA+48
@NM00076 EQU   RTM2CCF
RTM2EOT  EQU   RTM2CCF
RTM2EOM  EQU   RTM2CCF
RTM2R0DP EQU   RTM2CCF
RTM2STEP EQU   RTM2CCF
RTM2DREQ EQU   RTM2CCF
RTM2ASC  EQU   RTM2WA+24
RTM2VRBC EQU   RTM2WA+20
RTM2CVT  EQU   RTM2WA+12
RTM2LGTH EQU   RTM2RT2D+1
RTM2SPID EQU   RTM2RT2D
RTM2ADDR EQU   RTM2DESC+4
RTM2ID   EQU   RTM2DESC
RMPLDCBL EQU   RMPL+20
RMPLRMWA EQU   RMPL+16
RMPLRBPA EQU   RMPL+12
RMPLTCBA EQU   RMPL+8
RMPLASCB EQU   RMPL+4
RMPLASID EQU   RMPL+2
RMPLFLG2 EQU   RMPL+1
@NM00075 EQU   RMPLFLG1
RMPLWT1M EQU   RMPLFLG1
RMPLJST  EQU   RMPLFLG1
RMPLRCOV EQU   RMPLFLG1
RMPLIPUF EQU   RMPLFLG1
RMPLRBPP EQU   RMPLFLG1
RMPLTERM EQU   RMPLFLG1
RMPLTYPE EQU   RMPLFLG1
SNPHDRA  EQU   SNPPARMS+20
SNPSTOR  EQU   SNPPARMS+16
@NM00074 EQU   SNPPARMS+7
@NM00073 EQU   SNPPDATA
SNPSPLS  EQU   SNPPDATA
SNPJPA   EQU   SNPPDATA
@NM00072 EQU   SNPSDAT1
@NM00071 EQU   SNPPARMS+2
SNPHDR   EQU   SNPFLAG
SNPSNAP  EQU   SNPFLAG
RTCTISVC EQU   RTCTSDO4
RTCTSDOV EQU   RTCTSDMG
@NM00070 EQU   RTCTSDO4
@NM00069 EQU   RTCTSDO3
RTCTSDPH EQU   RTCTSDO3
RTCTSDPG EQU   RTCTSDO3
@NM00068 EQU   RTCTSDO2
RTCTSDPD EQU   RTCTSDO2
RTCTSDPC EQU   RTCTSDO2
RTCTSDPB EQU   RTCTSDO2
RTCTSDPA EQU   RTCTSDO2
RTCTSDP9 EQU   RTCTSDO2
RTCTSDP8 EQU   RTCTSDO2
RTCTSDP7 EQU   RTCTSDO1
RTCTSDP6 EQU   RTCTSDO1
RTCTSDP5 EQU   RTCTSDO1
RTCTSDP4 EQU   RTCTSDO1
RTCTSDP3 EQU   RTCTSDO1
RTCTSDP2 EQU   RTCTSDO1
RTCTSDP1 EQU   RTCTSDO1
RTCTSDP0 EQU   RTCTSDO1
RTCTSMOV EQU   RTCTSMMG
@NM00067 EQU   RTCTSD04
RTCTSD03 EQU   RTCTMSYO+2
RTCTSD02 EQU   RTCTMSYO+1
RTCTSDS7 EQU   RTCTSD01
RTCTSDS6 EQU   RTCTSD01
RTCTSDS5 EQU   RTCTSD01
RTCTSDS4 EQU   RTCTSD01
RTCTSDS3 EQU   RTCTSD01
RTCTSDS2 EQU   RTCTSD01
RTCTSDS1 EQU   RTCTSD01
RTCTSDS0 EQU   RTCTSD01
@NM00066 EQU   RTCTSUO4
RTCTSYDF EQU   RTCTSUO3
RTCTSYDE EQU   RTCTSUO3
RTCTSYDD EQU   RTCTSUO3
RTCTSYDC EQU   RTCTSUO3
RTCTSYDB EQU   RTCTSUO3
RTCTSYDA EQU   RTCTSUO3
RTCTSYD9 EQU   RTCTSUO3
RTCTSYD8 EQU   RTCTSUO3
@NM00065 EQU   RTCTSUO2
RTCTSYDH EQU   RTCTSUO2
RTCTSYDG EQU   RTCTSUO2
RTCTSYD7 EQU   RTCTSUO1
RTCTSYD6 EQU   RTCTSUO1
RTCTSYD5 EQU   RTCTSUO1
RTCTSYD4 EQU   RTCTSUO1
RTCTSYD3 EQU   RTCTSUO1
RTCTSYD2 EQU   RTCTSUO1
RTCTSYD1 EQU   RTCTSUO1
RTCTSYD0 EQU   RTCTSUO1
@NM00064 EQU   RTCTSAO4
RTCTSADF EQU   RTCTSAO3
RTCTSADE EQU   RTCTSAO3
RTCTSADD EQU   RTCTSAO3
RTCTSADC EQU   RTCTSAO3
RTCTSADB EQU   RTCTSAO3
RTCTSADA EQU   RTCTSAO3
RTCTSAD9 EQU   RTCTSAO3
RTCTSAD8 EQU   RTCTSAO3
@NM00063 EQU   RTCTSAO2
RTCTSADH EQU   RTCTSAO2
RTCTSADG EQU   RTCTSAO2
RTCTSAD7 EQU   RTCTSAO1
RTCTSAD6 EQU   RTCTSAO1
RTCTSAD5 EQU   RTCTSAO1
RTCTSAD4 EQU   RTCTSAO1
RTCTSAD3 EQU   RTCTSAO1
RTCTSAD2 EQU   RTCTSAO1
RTCTSAD1 EQU   RTCTSAO1
RTCTSAD0 EQU   RTCTSAO1
RTCTZZZ5 EQU   RTCT+340
RTCTZZZ4 EQU   RTCT+336
RTCTSDF5 EQU   RTCTSDF3+3
RTCTSDDO EQU   RTCTSDF4
RTCTSDEN EQU   RTCTSDF4
RTCTSDEQ EQU   RTCTSDF4
RTCTSDTR EQU   RTCTSDF4
RTCTSDRM EQU   RTCTSDF4
RTCTSDAN EQU   RTCTSDF4
RTCTSDNC EQU   RTCTSDF4
RTCTSDSS EQU   RTCTSDF4
RTCTSDAS EQU   RTCTSDF3
RTCTZZZ3 EQU   RTCT+266
RTCTSDFX EQU   RTCTSDF2
RTCTSDRW EQU   RTCTSDF2
RTCTSDSL EQU   RTCTSDF2
RTCTSDWF EQU   RTCTSDF2
RTCTSDLA EQU   RTCTSDF2
RTCTSDDI EQU   RTCTSDF2
RTCTSDTQ EQU   RTCTSDF2
RTCTSDMR EQU   RTCTSDF2
RTCTSDSC EQU   RTCTSDF1
RTCTSDRS EQU   RTCTSDF1
RTCTSDSD EQU   RTCTSDF1
RTCTSDEP EQU   RTCTSDF1
RTCTSDMA EQU   RTCTSDF1
RTCTSDSH EQU   RTCTSDF1
RTCTSDND EQU   RTCTSDF1
RTCTSDNO EQU   RTCTSDF1
RTCTZZZ2 EQU   RTCT+257
RTCTSDPR EQU   RTCTSDI+2
RTCTINDX EQU   RTCTSDI+1
RTCTSDNA EQU   RTCTSDI
@NM00062 EQU   RTCTASO2
RTCTASNQ EQU   RTCTASO2
RTCTASNA EQU   RTCTASO2
RTCTASNS EQU   RTCTASO2
RTCTASSU EQU   RTCTASO2
RTCTASSW EQU   RTCTASO2
RTCTASCS EQU   RTCTASO2
RTCTASTR EQU   RTCTASO1
RTCTASLP EQU   RTCTASO1
RTCTASRG EQU   RTCTASO1
RTCTASLS EQU   RTCTASO1
RTCTASSQ EQU   RTCTASO1
RTCTASNU EQU   RTCTASO1
RTCTASPS EQU   RTCTASO1
RTCTASAL EQU   RTCTASO1
RTCTSDO  EQU   RTCTOPT+12
RTCTSUO  EQU   RTCTOPT+4
RTCTSAO  EQU   RTCTOPT
RTCTXXX2 EQU   RTCT+234
RTCTETIM EQU   RTCTERID+6
RTCTEASD EQU   RTCTERID+4
RTCTECPU EQU   RTCTERID+2
RTCTESEQ EQU   RTCTERID
RTCTSDWK EQU   RTCT+220
RTCTTDCB EQU   RTCT+184
RTCTSDSW EQU   RTCT+180
RTCTSEQ# EQU   RTCT+178
RTCTXXX1 EQU   RTCT+177
@NM00061 EQU   RTCTRFLG
RTCTRSTF EQU   RTCTRFLG
RTCTRPER EQU   RTCTRFLG
RTCTRTER EQU   RTCTRFLG
RTCTTEST EQU   RTCT+172
RTCTMSRB EQU   RTCT+168
RTCTMLCK EQU   RTCT+164
RTCTFMT  EQU   RTCT+160
RTCTSDIP EQU   RTCTSDPL
RTCTDEV  EQU   RTCTSDDS+8
RTCTDCB  EQU   RTCTSDDS+4
RTCTDTND EQU   RTCTFLG
@NM00060 EQU   RTCTFLG
RTCTDETP EQU   RTCTFLG
RTCTDSUS EQU   RTCTFLG
RTCTDSST EQU   RTCTFLG
RTCTDSNM EQU   RTCTSDDS
RTCTRCB  EQU   RTCT+32
RTCTRECB EQU   RTCT+28
RTCTFASB EQU   RTCT+24
RTCTMECB EQU   RTCT+20
RTCTSDID EQU   RTCT+18
RTCTYYY1 EQU   RTCT+16
RTCTSY04 EQU   RTCTSYD+3
RTCTSY03 EQU   RTCTSYD+2
RTCTSY02 EQU   RTCTSYD+1
RTCTSYM7 EQU   RTCTSY01
RTCTSYM6 EQU   RTCTSY01
RTCTSYM5 EQU   RTCTSY01
RTCTSYM4 EQU   RTCTSY01
RTCTSYM3 EQU   RTCTSY01
RTCTSYM2 EQU   RTCTSY01
RTCTSYM1 EQU   RTCTSY01
RTCTSYM0 EQU   RTCTSY01
RTCTSUP4 EQU   RTCTSUP+3
RTCTSUDF EQU   RTCTSUP3
RTCTSUDE EQU   RTCTSUP3
RTCTSUDD EQU   RTCTSUP3
RTCTSUDC EQU   RTCTSUP3
RTCTSUDB EQU   RTCTSUP3
RTCTSUDA EQU   RTCTSUP3
RTCTSUD9 EQU   RTCTSUP3
RTCTSUD8 EQU   RTCTSUP3
@NM00059 EQU   RTCTSUP2
RTCTSUDH EQU   RTCTSUP2
RTCTSUDG EQU   RTCTSUP2
RTCTSUD7 EQU   RTCTSUP1
RTCTSUD6 EQU   RTCTSUP1
RTCTSUD5 EQU   RTCTSUP1
RTCTSUD4 EQU   RTCTSUP1
RTCTSUD3 EQU   RTCTSUP1
RTCTSUD2 EQU   RTCTSUP1
RTCTSUD1 EQU   RTCTSUP1
RTCTSUD0 EQU   RTCTSUP1
RTCTSAP4 EQU   RTCTSAP+3
RTCTSABF EQU   RTCTSAP3
RTCTSABE EQU   RTCTSAP3
RTCTSABD EQU   RTCTSAP3
RTCTSABC EQU   RTCTSAP3
RTCTSABB EQU   RTCTSAP3
RTCTSABA EQU   RTCTSAP3
RTCTSAB9 EQU   RTCTSAP3
RTCTSAB8 EQU   RTCTSAP3
@NM00058 EQU   RTCTSAP2
RTCTSABH EQU   RTCTSAP2
RTCTSABG EQU   RTCTSAP2
RTCTSAB7 EQU   RTCTSAP1
RTCTSAB6 EQU   RTCTSAP1
RTCTSAB5 EQU   RTCTSAP1
RTCTSAB4 EQU   RTCTSAP1
RTCTSAB3 EQU   RTCTSAP1
RTCTSAB2 EQU   RTCTSAP1
RTCTSAB1 EQU   RTCTSAP1
RTCTSAB0 EQU   RTCTSAP1
RTCTNAME EQU   RTCT
DCBEOB   EQU   IHADCS40+20
DCBPRECL EQU   IHADCS40+18
@NM00033 EQU   IHADCS40+16
@NM00032 EQU   @NM00030+1
@NM00031 EQU   DCBEROPT
DCBERABE EQU   DCBEROPT
DCBERSKP EQU   DCBEROPT
DCBERACC EQU   DCBEROPT
@NM00029 EQU   IHADCS40+10
@NM00028 EQU   IHADCS40+9
@NM00027 EQU   IHADCS40+8
DCBRECA  EQU   DCBRECAD+1
@NM00026 EQU   DCBRECBT
DCBRCFGT EQU   DCBRCREL
DCBRCTRU EQU   DCBRCREL
DCBLCCW  EQU   DCBEOBAD
DCBNOTE  EQU   DCBCNTRL
DCBLRECL EQU   IHADCS38+10
@NM00025 EQU   IHADCS38+8
DCBEOBW  EQU   IHADCS38+4
DCBEOBRA EQU   DCBEOBR+1
DCBNCP   EQU   DCBEOBR
@NM00024 EQU   DCBFLAG1
DCBSTFLS EQU   DCBFLAG1
DCBSTQCK EQU   DCBFLAG1
DCBDIRCQ EQU   DCBBUFOF
DCBQSTRU EQU   DCBUSASI
@NM00023 EQU   DCBUSASI
DCBQADF3 EQU   DCBQADFS
DCBQADF2 EQU   DCBQADFS
DCBQADF1 EQU   DCBQADFS
DCBBLBP  EQU   DCBUSASI
@NM00022 EQU   DCBUSASI
DCBCICBA EQU   DCBCICB+1
@NM00021 EQU   DCBCICB
DCBOFFSW EQU   IHADCS36+15
DCBOFFSR EQU   IHADCS36+14
DCBWCPL  EQU   IHADCS36+13
DCBWCPO  EQU   IHADCS36+12
DCBBLKSI EQU   IHADCS36+10
DCBCNQSM EQU   DCBCIND2
DCBCNFEO EQU   DCBCIND2
DCBCNCHS EQU   DCBCIND2
DCBCNBFP EQU   DCBCIND2
DCBCNIOE EQU   DCBCIND2
DCBCNCLO EQU   DCBCIND2
DCBCNWRO EQU   DCBCIND2
DCBCNSTO EQU   DCBCIND2
DCBCNEXB EQU   DCBCIND1
@NM00020 EQU   DCBCIND1
DCBCNBRM EQU   DCBCIND1
@NM00019 EQU   DCBCIND1
DCBCNEVA EQU   DCBCIND1
DCBCNEVB EQU   DCBCIND1
DCBCNSRD EQU   DCBCIND1
DCBCNTOV EQU   DCBCIND1
DCBSYNA  EQU   DCBSYNAD+1
DCBIOBL  EQU   DCBSYNAD
DCBCHCKA EQU   DCBPERRA
DCBOPTJ  EQU   DCBOPTCD
DCBOPTT  EQU   DCBOPTCD
DCBSRCHD EQU   DCBOPTZ
DCBOPTQ  EQU   DCBOPTCD
DCBBCKPT EQU   DCBOPTO
DCBOPTC  EQU   DCBOPTCD
DCBOPTU  EQU   DCBOPTCD
DCBOPTW  EQU   DCBOPTCD
DCBPUTA  EQU   DCBGETA
@NM00018 EQU   DCBPUT
DCBREADA EQU   DCBWRITA
@NM00017 EQU   DCBREAD
DCBDEBA  EQU   DCBDEBAD+1
@NM00016 EQU   DCBIFLGS
DCBIFIOE EQU   DCBIFLGS
DCBCH12  EQU   DCBIFPCT
DCBCH9   EQU   DCBIFPCT
DCBIFEC  EQU   DCBIFLGS
DCBMFSTI EQU   DCBMFDMD
DCBMFAWR EQU   DCBMFSTK
DCBMFUIP EQU   DCBMFTMD
DCBMFIDW EQU   DCBMFLCP
DCBMFWRK EQU   DCBMFMVP
DCBMFRDQ EQU   DCBMFWRT
DCBMFGTQ EQU   DCBMFPUT
DCBMFSTL EQU   DCBMACF2
DCBMFCK  EQU   DCBMFDMG
DCBMFRDX EQU   DCBMFCHK
DCBMFDBF EQU   DCBMFSBG
DCBMFRDI EQU   DCBMFLCG
DCBMFRDK EQU   DCBMFMVG
DCBMFWRQ EQU   DCBMFRD
DCBMFPTQ EQU   DCBMFGET
DCBMFECP EQU   DCBMACF1
DCBTIOT  EQU   IHADCS25
DCBMRSTI EQU   DCBMRDMD
DCBMRAWR EQU   DCBMRSTK
DCBMRUIP EQU   DCBMRTMD
DCBMRIDW EQU   DCBMRLCP
DCBMRWRK EQU   DCBMRMVP
DCBMRRDQ EQU   DCBMRWRT
DCBMRGTQ EQU   DCBMRPUT
DCBMRSTL EQU   DCBMACR2
DCBMRCK  EQU   DCBMRDMG
DCBPGFXA EQU   DCBMRRDX
DCBMRDBF EQU   DCBMRSBG
DCBMRRDI EQU   DCBMRLCG
DCBMRRDK EQU   DCBMRMVG
DCBMRWRQ EQU   DCBMRRD
DCBMRPTQ EQU   DCBMRGET
DCBMRECP EQU   DCBMACR1
@NM00015 EQU   DCBIFLG
DCBIBIOE EQU   DCBIFLG
DCBICH12 EQU   DCBIBPCT
DCBICH9  EQU   DCBIBPCT
DCBIBEC  EQU   DCBIFLG
DCBOFIOF EQU   DCBOFLGS
DCBOFUEX EQU   DCBOFLGS
DCBOFTM  EQU   DCBOFLGS
DCBOFPPC EQU   DCBOFLGS
DCBOFEOV EQU   DCBOFLGS
DCBOFLRB EQU   DCBOFLGS
DCBOFIOD EQU   DCBOFLWR
DCBEXLSA EQU   DCBEXLST+1
DCBRECKL EQU   DCBRECFM
DCBRECCC EQU   DCBRECFM
DCBRECSB EQU   DCBRECFM
DCBRECBR EQU   DCBRECFM
DCBRECTO EQU   DCBRECLA
DCBRECL  EQU   DCBRECLA
DCBEODA  EQU   DCBEODAD+1
DCBBFA   EQU   DCBBFTEK
DCBH0    EQU   DCBBFTEK
DCBBFTKD EQU   DCBBFTEK
DCBBFTE  EQU   DCBBFT
DCBBFTKR EQU   DCBBFT
DCBBFTS  EQU   DCBBFT
DCBH1    EQU   DCBBFTEK
DCBSVCXA EQU   DCBSVCXL+1
@NM00014 EQU   DCBSVCXL
DCBODEBA EQU   DCBIOBAA
@NM00013 EQU   DCBQSLM
DCBUPDBT EQU   DCBQSLM
DCBUPDCM EQU   DCBQSLM
DCB1DVDS EQU   DCBQSLM
@NM00012 EQU   DCBDSRG2
DCBDSGTR EQU   DCBDSRG2
DCBACBM  EQU   DCBDSRG2
@NM00011 EQU   DCBDSRG2
DCBDSGTQ EQU   DCBDSRG2
DCBDSGTX EQU   DCBDSRG2
DCBDSGGS EQU   DCBDSRG2
DCBDSGU  EQU   DCBDSRG1
DCBDSGPO EQU   DCBDSRG1
@NM00010 EQU   DCBDSRG1
@NM00009 EQU   DCBDSRG1
DCBDSGCX EQU   DCBDSRG1
DCBDSGDA EQU   DCBDSRG1
DCBDSGPS EQU   DCBDSRG1
DCBDSGIS EQU   DCBDSRG1
DCBBUFL  EQU   IHADCS11+8
DCBBUFCA EQU   DCBBUFCB+1
DCBBUFNO EQU   DCBBUFCB
DCBDEVT  EQU   DCBREL
DCBKEYLE EQU   DCBRELB
DCBTRBAL EQU   IHADCS01+6
@NM00008 EQU   IHADCS01+5
@NM00007 EQU   IHADCS01+4
DCBDVTBA EQU   DCBDVTBL+1
@NM00006 EQU   DCBDVTBL
DCBKEYCN EQU   IHADCS00+4
DCBRELAD EQU   IHADCS00
@NM00005 EQU   IHADCB
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00004 EQU   CVTFIX+248
@NM00003 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTBAH   EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTRV490 EQU   CVTMAP+388
CVTSU    EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTVS1B  EQU   CVTOPTB
CVTVS1A  EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00002 EQU   MRMQHEAD+6
MDECBSAV EQU   MDDECB+32
@NM00001 EQU   MDDECB+16
SYSMLEN  EQU   MDDECB+6
SYSMTYPE EQU   MDDECB+4
SYSMECB  EQU   MDDECB
@NM00057 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00056 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00055 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00054 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSAULCMS EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00053 EQU   FLCFSA
@NM00052 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00051 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00050 EQU   FLCIOA
@NM00049 EQU   FLCMCLA+15
@NM00048 EQU   FLCMCLA+14
@NM00047 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00046 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00045 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00044 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00043 EQU   FLCPER
@NM00042 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00041 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00040 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00039 EQU   FLCPIILC
@NM00038 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00037 EQU   FLCSVILC
@NM00036 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00035 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00034 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00273 EQU   @RC00271
@RC00624 EQU   @RC00622
@RF00934 EQU   @EL00003
@RT01051 EQU   ADDEQ
@RT01053 EQU   ADFREE
@RT01055 EQU   ADCLOSE
@RT01057 EQU   ADRTCB
@RT01059 EQU   ADDOPT
@RT01061 EQU   ADOPEND
@RT01063 EQU   ADGET
@RF01063 EQU   ADDCHK
@PB00006 EQU   @PB00007
@RC00291 EQU   @RC00273
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IEAVTABD,(C'PLS1300',0701,78086)
