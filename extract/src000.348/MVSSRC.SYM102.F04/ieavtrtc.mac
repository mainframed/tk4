         TITLE 'IEAVTRTC RTM2 CONTROLLER                               *
                        '
IEAVTRTC CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IEAVTRTC  77.180'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @06,0                                               0001
@PSTART  LA    @03,4095(,@06)                                      0001
         USING @PSTART,@06                                         0001
         USING @PSTART+4095,@03                                    0001
RBPRFXLN EQU 64
RBPRFLNA EQU 32
PRBLEN   EQU 136
SIRBLEN  EQU 200
TIRBLEN  EQU 136
IRBLEN   EQU 128
SVRBLEN  EQU 224
*                                                                  0054
*   /*****************************************************************/
*   /*                                                               */
*   /* SEGMENT IEAVTRTC CONTROLS THE MAIN PATH PROCESSING IN RTM2. IT*/
*   /* INCLUDES SEGMENT RTCMTINT TO SET UP THE INTERFACE TO MEMORY   */
*   /* TERMINATION PURGES AND RTCTTINT TO SET UP THE INTERFACE FOR   */
*   /* NORMAL EOT PURGES. IF ENTRY WAS NOT FOR THESE, SEGMENT        */
*   /* RTCTLRCR DETERMINES IF THE ENTRY IS RECURSIVE AND IF THE      */
*   /* RECURSION EXIT SHOULD BE TAKEN IMMEDIATELY. IF NOT, SEGMENT   */
*   /* RTCRVRB DOES PROCESSING IF THE ENTRY IS POTENTIALLY           */
*   /* RECOVERABLE OR SEGMENT RTCCNCL DOES PROCESSING IF IT IS NOT.  */
*   /* IF RECOVERY EXITS WERE ENTERED BUT DID NOT REQUEST RETRY OR IF*/
*   /* THE ERROR WAS NOT RECOVERABLE, SEGMENT RT2NORTY IS ENTERED TO */
*   /* PERFORM INITIAL PURGES. IN EITHER CASE, IF A DUMP WAS         */
*   /* REQUESTED AND IS PERMITTED SEGMENT RTCADINT IS INCLUDED TO DO */
*   /* DUMP PROCESSING. FINALLY SEGMENT RTCAOR IS INCLUDED TO        */
*   /* DETERMINE IF RETRY IS PERMITTED AND TO CONTROL THE ABEND PATH.*/
*   /* ON ENTRY REG 5 LOCATES THE SVRB, REG 4 LOCATES THE TCB AND    */
*   /* REGISTER 8 LOCATES THE RTM2WA. SEGMENT RTCTLRCR DETERMINES    */
*   /* WHETHER THIS ENTRY IS A RECURSION IN CONNECTING CODE OF RTM2. */
*   /* IF IT IS, THE RECURSION EXIT IS TAKEN IMMEDIATELY TO PREVENT  */
*   /* ATTEMPTING TO EXECUTE THE CODE AGAIN. OTHERWISE, A RECURSION  */
*   /* LOOP COULD OCCUR.                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0054
*   DO;                             /* START OF RTCTLRCR             */
*     IF ESARTCR=ON THEN                                           0055
         TM    ESARTCR+96(R5),B'00000100'                          0055
         BNO   @RF00055                                            0055
*       RTM2RCRX=ON;                                               0056
         OI    RTM2RCRX(R8),B'10000000'                            0056
*     ELSE                                                         0057
*       DO;                                                        0057
         B     @RC00055                                            0057
@RF00055 DS    0H                                                  0058
*         ESARTCR=ON;                                              0058
         OI    ESARTCR+96(R5),B'00000100'                          0058
*         RESPECIFY                                                0059
*           R9 RESTRICTED;                                         0059
*         R9=RTM2CODE&CNCLMASK;     /* ISOLATE CANCEL CODE           */
         L     R9,RTM2CODE(,R8)                                    0060
         N     R9,@CF00052                                         0060
*         IF RTM2CC=CNVRCODE        /* ENTRY BECAUSE OF ERROR      0061
*                                      CONVERSION TO STEP            */
*             ×(R9=CNCLCODE&R4=TCBJSTCA&RTM2ABTM=ON) THEN          0061
*                                                                  0061
         CLC   RTM2CC(3,R8),@CB00057                               0061
         BE    @RT00061                                            0061
         C     R9,@CF00050                                         0061
         BNE   @RF00061                                            0061
         L     @12,TCBJSTCA-1(,R4)                                 0061
         LA    @12,0(,@12)                                         0061
         CR    R4,@12                                              0061
         BNE   @RF00061                                            0061
         TM    RTM2ABTM(R8),B'00001000'                            0061
         BNO   @RF00061                                            0061
@RT00061 DS    0H                                                  0062
*           /*********************************************************/
*           /*                                                       */
*           /* ENTRY DUE TO CANCEL                           @ZA05956*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0062
*           DO;                     /*                       @YM03570*/
*             RTM2CNCL=ON;          /* MARK WORKAREA AS DUE TO CANCEL*/
         OI    RTM2CNCL(R8),B'01000000'                            0063
*             IF ESADREQ=OFF THEN   /* IF CANCEL WITHOUT DUMP,     0064
*                                      SUPRESS DUMP          @YM03570*/
         TM    ESADREQ+96(R5),B'10000000'                          0064
         BNZ   @RF00064                                            0064
*               RTM2DREQ=OFF;       /*                       @YM03570*/
         NI    RTM2DREQ(R8),B'01111111'                            0065
*           END;                    /*                       @YM03570*/
*         ELSE                                                     0067
*           ;                       /* NOT CANCEL-TYPE ENTRY         */
@RF00061 DS    0H                                                  0068
*         RESPECIFY                                                0068
*           R9 UNRESTRICTED;                                       0068
@RC00061 DS    0H                                                  0069
*         IF RTM2RECR=ON THEN       /* RECURSIVE ENTRY               */
         TM    RTM2RECR(R8),B'10000000'                            0069
         BNO   @RF00069                                            0069
*           IF RTM2CNCL=ON THEN     /* CANCEL-TYPE ENTRY             */
         TM    RTM2CNCL(R8),B'01000000'                            0070
         BNO   @RF00070                                            0070
*             IF TCBCNCB=ON&RTM2PREV->RTM2SCTC=NOSECTN THEN/* SECOND
*                                      CANCEL AND NOT IN ANY SECTION */
         TM    TCBCNCB(R4),B'10000000'                             0071
         BNO   @RF00071                                            0071
         L     @12,RTM2PREV(,R8)                                   0071
         CLC   RTM2SCTC(4,@12),@CB00073                            0071
         BNE   @RF00071                                            0071
*               RTM2RCRX=ON;        /* TAKE RECURSION EXIT - NO    0072
*                                      RECOVERY IS PROVIDED          */
         OI    RTM2RCRX(R8),B'10000000'                            0072
*             ELSE                                                 0073
*               ;                   /* FIRST CANCEL - NOT TREATED AS
*                                      RECURSION UNLESS FAILING    0073
*                                      SECTION IS REACHED            */
@RF00071 DS    0H                                                  0074
*           ELSE                    /* NOT CANCEL ENTRY              */
*             IF ESAPGNLY=OFF       /* NOT PURGE ONLY                */
*                 &RTM2PREV->RTM2SCTC=NOSECTN THEN/* PREVIOUS FAILURE
*                                      NOT IN ANY SECTION            */
         B     @RC00070                                            0074
@RF00070 TM    ESAPGNLY+96(R5),B'00100000'                         0074
         BNZ   @RF00074                                            0074
         L     @12,RTM2PREV(,R8)                                   0074
         CLC   RTM2SCTC(4,@12),@CB00073                            0074
         BNE   @RF00074                                            0074
*               RTM2RCRX=ON;        /* TAKE RECURSION EXIT           */
         OI    RTM2RCRX(R8),B'10000000'                            0075
*             ELSE                                                 0076
*               ;                   /* PURGE ONLY OR FAILURE WITHIN
*                                      SECTION                       */
@RF00074 DS    0H                                                  0077
*         ELSE                                                     0077
*           ;                       /* NOT RECURSIVE ENTRY           */
@RF00069 DS    0H                                                  0078
*         IF RTM2CNCL=ON THEN       /* CANCEL ENTRY                  */
@RC00069 TM    RTM2CNCL(R8),B'01000000'                            0078
         BNO   @RF00078                                            0078
*           TCBCNCB=ON;             /* MARK TCB AS CNACELLED         */
         OI    TCBCNCB(R4),B'10000000'                             0079
*         ESARTCR=OFF;                                             0080
@RF00078 NI    ESARTCR+96(R5),B'11111011'                          0080
*       END;                                                       0081
*   END;                            /* END OF RTCTLRCR               */
@RC00055 DS    0H                                                  0083
*   IF RTM2FLX=NONE THEN            /* IF AN EXIT NOT REQUESTED    0083
*                                      CONTINUE PROCESSING           */
         CLC   RTM2FLX(2,R8),@CB00069                              0083
         BNE   @RF00083                                            0083
*     DO;                                                          0084
*       IF ESAPGNLY=OFF&RTM2CNCL=OFF THEN/* THIS ENTRY IS POTENTIALLY
*                                      RECOVERABLE                   */
*                                                                  0085
         TM    ESAPGNLY+96(R5),B'00100000'                         0085
         BNZ   @RF00085                                            0085
         TM    RTM2CNCL(R8),B'01000000'                            0085
         BNZ   @RF00085                                            0085
*         /***********************************************************/
*         /*                                                         */
*         /* SEGMENT RTCRVRB DOES PROCESSING THAT IS PERTINENT ONLY  */
*         /* TO ERRORS THAT ARE POTENTIALLY RECOVERABLE. IF DUMP     */
*         /* OPTIONS WERE PASSED BY THE USER IT ENSURES THEY ARE NOT */
*         /* IN PROTECTED STORAGE BEFORE MOVING THEM INTO THE RTM2WA.*/
*         /* IT THEN INCLUDES SEGMENT RTCTRINT TO BEGIN THE          */
*         /* PROCESSING NECESSARY TO GO TO RECOVERY EXITS. WHEN ALL  */
*         /* RECOVERY ROUTINES HAVE BEEN PROCESSED, IF THE ERROR HAS */
*         /* NOT BEEN RECOVERED,SEGMENT RTCSCOPE DETERMINES IF THE   */
*         /* SCOPE OF THE ABEND IS THE CURRENT TASK AND ITS SUBTASKS */
*         /* OR THE ENTIRE JOB STEP TREE. ADDITIONALLY, THE IQE CHAIN*/
*         /* IS SEARCHED AND ANY THAT EXIST FOR THE CURRENT TASK ARE */
*         /* FLAGGED TO PREVENT THEIR EVER BEING SCHEDULED. ON ENTRY */
*         /* REGISTER 8 LOCATES THE RTM2WA, REGISTER 4,THE TCB,      */
*         /* REGISTER 5, THE SVRB.                                   */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0086
*         DO;                       /* BEGIN SEGMENT RTCRVRB         */
*           IF RTM2RECR='1'B&RTM2SCTR(RTM2DMPS)='1'B THEN/* RECURSION
*                                      IN THIS SECTION               */
         TM    RTM2RECR(R8),B'10000000'                            0087
         BNO   @RF00087                                            0087
         TM    RTM2SCTR(R8),B'00100000'                            0087
         BNO   @RF00087                                            0087
*             DO;                                                  0088
*               RTM2RCRX='1'B;      /* SET RECURSION EXIT FLAG       */
         OI    RTM2RCRX(R8),B'10000000'                            0089
*               RTM2SCTX(RTM2DMPS)='1'B;/* SET SECTION FLAG FOR EXIT */
         OI    RTM2SCTX(R8),B'00100000'                            0090
*             END;                                                 0091
*           ELSE                    /* NO RECURSION IN THIS SECTION  */
*             DO;                                                  0092
         B     @RC00087                                            0092
@RF00087 DS    0H                                                  0093
*               RTM2SCTC(RTM2DMPS)='1'B;/* SET CURRENT SECTION FLAG  */
         OI    RTM2SCTC(R8),B'00100000'                            0093
*               GEN REFS(R8) SETS(RTM2SFSA)                        0094
*                   (STM R14,R12,RTM2SFSA+12(R8));/* SAVE REGISTERS  */
         STM R14,R12,RTM2SFSA+12(R8)
*               RTM2SKRA=ADDR(RCR0004);/* SET UP RECURSION ADDRESS 0095
*                                      TEST FOR RECURSION ACCESSING
*                                      DUMP OPTIONS                  */
         LA    @12,RCR0004                                         0095
         ST    @12,RTM2SKRA(,R8)                                   0095
*               IF ESAABTRM=OFF&RTM2R0DP=ON THEN/* ENTRY VIA SVC 13,
*                                      DUMP OPTIONS PASSED           */
         TM    ESAABTRM+96(R5),B'01000000'                         0096
         BNZ   @RF00096                                            0096
         TM    RTM2R0DP(R8),B'00100000'                            0096
         BNO   @RF00096                                            0096
*                 DO;                                              0097
*                                                                  0097
*                   /*************************************************/
*                   /*                                               */
*                   /* VALIDITY CHECK DUMP OPTIONS                   */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0098
*                   RESPECIFY                                      0098
*                    (R10,                                         0098
*                     R2) RESTRICTED;/* RESTRICT REGS USED BY MODESET*/
*                                                                  0098
*                   /*************************************************/
*                   /*                                               */
*                   /* ASSUME KEY AT TIME OF ERROR                   */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0099
*                   R2=RTM2EPSW(2);                                0099
         SLR   R2,R2                                               0099
         IC    R2,RTM2EPSW+1(,R8)                                  0099
*                   GENERATE SETS(R10,R2,RTM2PKEY);                0100
         MODESET KEYADDR=(2),SAVEKEY=RTM2PKEY(R8),WORKREG=10
*                   RESPECIFY                                      0101
*                    (R10,                                         0101
*                     R2) UNRESTRICTED;                            0101
*                   RESPECIFY                                      0102
*                     R11 RESTRICTED;                              0102
*                   R11=ESAR0->SNPPARMS(1);/* ACCESS FIRST BYTE OF 0103
*                                      DUMP PARAMETER LIST           */
         L     @12,ESAR0+96(,R5)                                   0103
         SLR   R11,R11                                             0103
         IC    R11,SNPPARMS(,@12)                                  0103
*                   R11=ESAR0->SNPPARMS(LENGTH(SNPPARMS));/* ACCESS
*                                      LAST BYTE                     */
         SLR   R11,R11                                             0104
         IC    R11,SNPPARMS+23(,@12)                               0104
*                   IF ESAR0->SNPSLIST=ON THEN/* STORAGE LIST      0105
*                                      SUPPLIED                      */
         TM    SNPSLIST(@12),B'00000010'                           0105
         BNO   @RF00105                                            0105
*                     DO;                                          0106
*                       R11=ESAR0->SNPSTOR->STORFRM(1);/* TEST FIRST
*                                      BYTE                          */
         L     @12,SNPSTOR(,@12)                                   0107
         L     R11,STORFRM(,@12)                                   0107
*                       RESPECIFY                                  0108
*                         R9 RESTRICTED;                           0108
*                       DO R9=1 TO RGENO WHILE(ESAR0->SNPSTOR->STORBTO(
*                             R9)=OFF);/*                    @YM02793*/
         LA    R9,1                                                0109
@DL00109 LR    @12,R9                                              0109
         SLA   @12,3                                               0109
         L     @10,ESAR0+96(,R5)                                   0109
         L     @10,SNPSTOR(,@10)                                   0109
         ALR   @10,@12                                             0109
         AL    @10,@CF02720                                        0109
         TM    STORBTO-4(@10),B'10000000'                          0109
         BNZ   @DC00109                                            0109
*                       END;                                       0110
         AL    R9,@CF00071                                         0110
         C     R9,@CF00102                                         0110
         BNH   @DL00109                                            0110
@DC00109 DS    0H                                                  0111
*                       RESPECIFY                                  0111
*                         R9 UNRESTRICTED;                         0111
*                     END;                                         0112
*                   ELSE                                           0113
*                     ;             /* STORAGE LIST NOT SUPPLIED     */
@RF00105 DS    0H                                                  0114
*                   RESPECIFY                                      0114
*                     R11 UNRESTRICTED;                            0114
*                   RESPECIFY                                      0115
*                    (R10,                                         0115
*                     R2) RESTRICTED;                              0115
*                                                                  0115
*                   /*************************************************/
*                   /*                                               */
*                   /* RESTORE RTM2 PROTECT KEY                      */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0116
*                   GENERATE REFS(RTM2PKEY) SETS(R10,R2);          0116
         MODESET KEYADDR=RTM2PKEY(R8),WORKREG=10               @YM01515
*                   RESPECIFY                                      0117
*                    (R10,                                         0117
*                     R2) UNRESTRICTED;                            0117
*                                                                  0117
*                   /*************************************************/
*                   /*                                               */
*                   /* PROCESS DUMP OPTIONS                          */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0118
*                   SNPSDATA=SNPSDATA×ESAR0->SNPSDATA;/* COPY SDATA
*                                      OPTIONS FROM INPUT LIST     0118
*                                                            @YM03570*/
         LA    @12,256                                             0118
         ALR   @12,R8                                              0118
         L     @09,ESAR0+96(,R5)                                   0118
         OC    SNPSDATA(2,@12),SNPSDATA(@09)                       0118
*                   SNPPDATA=SNPPDATA×ESAR0->SNPPDATA;/* COPY PDATA
*                                      OPTIONS FROM INPUT LIST     0119
*                                                            @YM03570*/
         OC    SNPPDATA(1,@12),SNPPDATA(@09)                       0119
*                   IF ESAR0->SNPSLIST=ON&ESAR0->SNPSTOR^=0 THEN/* 0120
*                                      STORAGE LIST SUPPLIED @YM03570*/
         TM    SNPSLIST(@09),B'00000010'                           0120
         BNO   @RF00120                                            0120
         L     @09,SNPSTOR(,@09)                                   0120
         LTR   @09,@09                                             0120
         BZ    @RF00120                                            0120
*                     DO;                                          0121
*                       RFY                                        0122
*                        (R9,                                      0122
*                         R10) RSTD;/* RESTRICT LOOP COUNTERS      0122
*                                                            @YM03570*/
*                       IF SNPSLIST=ON THEN/* SLIST ALREADY EXISTS 0123
*                                                            @YM03570*/
         TM    SNPSLIST(@12),B'00000010'                           0123
         BNO   @RF00123                                            0123
*                         DO;       /*                       @YM03570*/
*                           R9=1;   /* START WITH FIRST      @YM03570*/
         LA    R9,1                                                0125
*                           DO WHILE(STORBTO(R9)=OFF);/* LOCATE LAST
*                                      RANGE IN CURRENT LIST @YM03570*/
         B     @DE00126                                            0126
@DL00126 DS    0H                                                  0127
*                             R9=R9+1;/*                     @YM03570*/
         AL    R9,@CF00071                                         0127
*                           END;    /*                       @YM03570*/
@DE00126 LR    @12,R9                                              0128
         SLA   @12,3                                               0128
         ALR   @12,R8                                              0128
         TM    STORBTO+268(@12),B'10000000'                        0128
         BZ    @DL00126                                            0128
*LRTCA:                                                            0129
*                           ;       /* PREVENT USE OF COMPILER     0129
*                                      TEMPORARY             @YM03570*/
LRTCA    DS    0H                                                  0130
*                           STORBTO(R9)=OFF;/* CLEAR LAST ENTRY FLAG
*                                      IN CURRENT LIST       @YM03570*/
         LR    @12,R9                                              0130
         SLA   @12,3                                               0130
         ALR   @12,R8                                              0130
         NI    STORBTO+268(@12),B'01111111'                        0130
*                           R9=R9+1;/* SET COUNTER TO FIRST ENTRY TO
*                                      BE ADDED              @YM03570*/
         AL    R9,@CF00071                                         0131
*                         END;      /* END OF CURRENT SLIST        0132
*                                      PROCESSING            @YM03570*/
*                       ELSE        /* NO STORAGE LIST YET   @YM03570*/
*                         R9=1;     /* FIRST ENTRY WILL BE FIRST ONE
*                                      USED                  @YM03570*/
         B     @RC00123                                            0133
@RF00123 LA    R9,1                                                0133
*                       RTM2DEND=OFF;/* FORCE ENTRY INTO LOOP      0134
*                                                            @YM03570*/
@RC00123 NI    RTM2DEND(R8),B'10111111'                            0134
*                       DO R10=1 TO RGENO WHILE(RTM2DEND=OFF);/* LOOP
*                                      OVER INPUT LIST       @YM03570*/
         LA    R10,1                                               0135
@DL00135 TM    RTM2DEND(R8),B'01000000'                            0135
         BNZ   @DC00135                                            0135
*                         IF R9>RGENO THEN/* PAST END OF OUTPUT LIST
*                                      -- START AGAIN FROM TOP     0136
*                                                            @YM03570*/
         C     R9,@CF00102                                         0136
         BNH   @RF00136                                            0136
*                           DO;     /*                       @YM03570*/
*                             R9=1; /* START WITH FIRST ENTRY      0138
*                                                            @YM03570*/
         LA    R9,1                                                0138
*                             RTM2WRAP=ON;/* INDICATE ENTRIES HAVE 0139
*                                      WRAPPED AROUND        @YM03570*/
         OI    RTM2WRAP(R8),B'00010000'                            0139
*                           END;    /*                       @YM03570*/
*                         STORAGE(R9)=ESAR0->SNPSTOR->STORAGE(R10);/*
*                                      COPY ONE STORAGE RANGE      0141
*                                                            @YM03570*/
@RF00136 LR    @12,R9                                              0141
         SLA   @12,3                                               0141
         ALR   @12,R8                                              0141
         LR    @11,R10                                             0141
         SLA   @11,3                                               0141
         L     @07,ESAR0+96(,R5)                                   0141
         L     @07,SNPSTOR(,@07)                                   0141
         ALR   @07,@11                                             0141
         AL    @07,@CF02723                                        0141
         MVC   STORAGE+268(8,@12),STORAGE(@07)                     0141
*LRTCB:                                                            0142
*                         ;         /* PREVENT USE OF COMPILER     0142
*                                      TEMPORARY             @YM03570*/
LRTCB    DS    0H                                                  0143
*                         IF STORBTO(R9)=ON×R10=RGENO THEN/* END OF
*                                      INPUT LIST            @YM03570*/
         LR    @12,R9                                              0143
         SLA   @12,3                                               0143
         ALR   @12,R8                                              0143
         TM    STORBTO+268(@12),B'10000000'                        0143
         BO    @RT00143                                            0143
         C     R10,@CF00102                                        0143
         BNE   @RF00143                                            0143
@RT00143 DS    0H                                                  0144
*                           DO;     /*                       @YM03570*/
*                             STORBTO(R9)=ON;/* INDICATE NEW END OF
*                                      LIST                  @YM03570*/
         LR    @12,R9                                              0145
         SLA   @12,3                                               0145
         ALR   @12,R8                                              0145
         OI    STORBTO+268(@12),B'10000000'                        0145
*                             RTM2DEND=ON;/* FORCE EXIT FROM LOOP  0146
*                                                            @YM03570*/
         OI    RTM2DEND(R8),B'01000000'                            0146
*                           END;    /*                       @YM03570*/
*                         R9=R9+1;  /* SET COUNTER TO NEXT ENTRY OF
*                                      OUTPUT LIST           @YM03570*/
@RF00143 AL    R9,@CF00071                                         0148
*                       END;        /* END OF PROCESSING OF INPUT  0149
*                                      LIST                  @YM03570*/
         AL    R10,@CF00071                                        0149
         C     R10,@CF00102                                        0149
         BNH   @DL00135                                            0149
@DC00135 DS    0H                                                  0150
*                       SNPSLIST=ON;/* INDICATE STORAGE RANGES     0150
*                                                            @YM03570*/
         LA    @12,256                                             0150
         ALR   @12,R8                                              0150
         OI    SNPSLIST(@12),B'00000010'                           0150
*                       SNPSTOR=ADDR(RTM2DPSL);/* SET PTR IN       0151
*                                      PARAMETER LIST TO LOCATE    0151
*                                      STORAGE RANGES        @YM03570*/
         LA    @11,RTM2DPSL(,R8)                                   0151
         ST    @11,SNPSTOR(,@12)                                   0151
*                       RESPECIFY                                  0152
*                        (R9,                                      0152
*                         R10) UNRSTD;/* RELEASE REGS        @YM03570*/
*                     END;                                         0153
*                   ELSE                                           0154
*                     ;             /* NO LIST SUPPLIED      @YM03570*/
@RF00120 DS    0H                                                  0155
*                 END;                                             0155
*               ELSE                                               0156
*                 ;                 /* DUMP OPTIONS NOT PASSED       */
@RF00096 DS    0H                                                  0157
*               RTM2SKRA=0;         /* CLEAR RECURSION ADDRESS       */
         SLR   @12,@12                                             0157
         ST    @12,RTM2SKRA(,R8)                                   0157
*               RTM2SCTC(RTM2DMPS)='0'B;/* CLEAR SECTION FLAG        */
         NI    RTM2SCTC(R8),B'11011111'                            0158
*             END;                                                 0159
*RCR0004:                           /* RESET RECURSION FLAGS         */
*           IF RTM2FLX=NONE THEN    /* NO EXIT HAS BEEN REQUESTED    */
@RC00087 DS    0H                                                  0160
RCR0004  CLC   RTM2FLX(2,R8),@CB00069                              0160
         BNE   @RF00160                                            0160
*             DO;                                                  0161
*                                                                  0161
*               /*****************************************************/
*               /*                                                   */
*               /* SEGMENT RTCTRINT INTERFACES WITH TASK RECOVERY. IT*/
*               /* ESTABLISHES RECURSION CONTROL AND THEN DETERMINES */
*               /* IF EXITS EXIST AND SHOULD BE ENTERED. (EXITS WILL */
*               /* NOT BE ENTERED IF THE COMPLETION CODE WAS 13E OR  */
*               /* 20D AS THESE ERRORS ARE NOT RECOVERABLE). IF THE  */
*               /* COMPLETION CODE IS 33E IT INDICATES THAT CLEAN-UP */
*               /* ONLY IS PERMITTED. IT THEN INVOKES TASK RECOVERY. */
*               /* ON RETURN IT ENSURES THAT TCB FLAGS WHICH MAY HAVE*/
*               /* BEEN ALTERED BY TASK RECOVERY PROCESSING ARE      */
*               /* PROPERLY SET                                      */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0162
*               DO;                 /* BEGIN SEGMENT RTCTRINT        */
*                 IF TCBSTABB^=0    /* (E)STA EXITS EXIST            */
*                     &ESACC^=CNVCODE&RTM2CC^=SMCCODE&RTM2CC^=DET13E
*                   THEN            /* (E)STA EXITS ALLOWED TO GET 0163
*                                      CONTROL AT THIS TIME          */
         L     @12,TCBSTABB-1(,R4)                                 0163
         LA    @12,0(,@12)                                         0163
         LTR   @12,@12                                             0163
         BZ    @RF00163                                            0163
         CLC   ESACC+96(3,R5),@CB00055                             0163
         BE    @RF00163                                            0163
         CLC   RTM2CC(3,R8),@CB00083                               0163
         BE    @RF00163                                            0163
         CLC   RTM2CC(3,R8),@CB00059                               0163
         BE    @RF00163                                            0163
*                   DO;                                            0164
*                     IF RTM2CC=DET33E THEN/* COMP CODE IS SYSTEM  0165
*                                      33E, ONLY CLEAN UP IS ALLOWED */
         CLC   RTM2CC(3,R8),@CB00061                               0165
         BNE   @RF00165                                            0165
*                       TCB33E=ON;  /* SET TCB FLAG TO REMEMBER    0166
*                                      CONDITION ON RECURSION        */
         OI    TCB33E(R4),B'00100000'                              0166
*                     ELSE                                         0167
*                       ;           /* THIS ENTRY NOT 33E            */
@RF00165 DS    0H                                                  0168
*                     IF TCB33E=ON THEN/* SOME ENTRY WAS A 33E ABEND */
         TM    TCB33E(R4),B'00100000'                              0168
         BNO   @RF00168                                            0168
*                       RTM2CLUP=ON;/* INDICATE CLEAN UP ONLY        */
         OI    RTM2CLUP(R8),B'10000000'                            0169
*                     ELSE                                         0170
*                       ;           /* NO ENTRY WAS FOR 33E          */
@RF00168 DS    0H                                                  0171
*                     TCBFPRAP=OFF; /* PERMIT ASYNCHRONOUS ABENDS TO
*                                      PERCOLATE TO THE TASK         */
         NI    TCBFPRAP(R4),B'11101111'                            0171
*                     IF RTM2RECR=ON&RTM2SCTR(RTM2TRS)=ON THEN/*   0172
*                                      RECOVERY EXIT PROCESSING HAS
*                                      RECURSED                      */
         TM    RTM2RECR(R8),B'10000000'                            0172
         BNO   @RF00172                                            0172
         TM    RTM2SCTR+1(R8),B'00100000'                          0172
         BNO   @RF00172                                            0172
*                       DO;                                        0173
*                         RTM2RCRX=ON;/* SET RECURSION EXIT FLAG     */
         OI    RTM2RCRX(R8),B'10000000'                            0174
*                         RTM2SCTX(RTM2TRS)=ON;/* SET SECTION FLAG 0175
*                                      FOR EXIT                      */
*                                                                  0175
         OI    RTM2SCTX+1(R8),B'00100000'                          0175
*                         /*******************************************/
*                         /*                                         */
*                         /* LOCATE PREVIOUS TASK RECOVERY WORKAREA  */
*                         /* AND UPDATE RETURN ADDRESS AND RECURSION */
*                         /* ADDRESS SO THAT EXECUTION WITH RESUME ON*/
*                         /* CORRECT PATH (TASK RECOVERY IS CALLED   */
*                         /* FROM BOTH RECOVERABLE AND UNRECOVERABLE */
*                         /* PATHS.)                                 */
*                         /*                                         */
*                         /*******************************************/
*                                                                  0176
*                         RESPECIFY                                0176
*                           R9 RESTRICTED;                         0176
*                         R9=RTM2PREV;/* START WITH IMMEDIATELY    0177
*                                      PREVIOUS WORK AREA            */
         L     R9,RTM2PREV(,R8)                                    0177
*                         RTM2PRWA=0;/* CLEAR FIELD FROM PREVIOUS  0178
*                                      RECUR                         */
         SLR   @12,@12                                             0178
         ST    @12,RTM2PRWA(,R8)                                   0178
*                         DO WHILE(RTM2PRWA=0);                    0179
         B     @DE00179                                            0179
@DL00179 DS    0H                                                  0180
*                           IF RTM2SCTX=R9->RTM2SCTC THEN/* WORK AREA
*                                      BELONGED TO TASK RECOVERY     */
         CLC   RTM2SCTX(4,R8),RTM2SCTC(R9)                         0180
         BNE   @RF00180                                            0180
*                             RTM2PRWA=R9;/* SAVE ADDR OF WORK AREA  */
         ST    R9,RTM2PRWA(,R8)                                    0181
*                           ELSE    /* WORK AREA DID NOT BELONG TO 0182
*                                      TASK RECOVERY                 */
*                             R9=R9->RTM2PREV;/* LOCATE PREVIOUS   0182
*                                      WORKAREA                      */
         B     @RC00180                                            0182
@RF00180 L     R9,RTM2PREV(,R9)                                    0182
*                         END;      /* END OF SCAN FOR PREVIOUS ASIR
*                                      WORK AREA                     */
@RC00180 DS    0H                                                  0183
@DE00179 L     @12,RTM2PRWA(,R8)                                   0183
         LTR   @12,@12                                             0183
         BZ    @DL00179                                            0183
*                         RESPECIFY                                0184
*                           R9 UNRESTRICTED;                       0184
*                         RTM2PRWA->RTM2SKRA=ADDR(RTCTRREC);/* UPDATE
*                                      RECURSION ADDR                */
         LA    @09,RTCTRREC                                        0185
         ST    @09,RTM2SKRA(,@12)                                  0185
*                         RTM2PRWA->RTM2SFSA(4)=ADDR(LTASKREC);/*  0186
*                                      UPDATE RETURN ADDR IN R14 SLOT
*                                      IN SAVE AREA                  */
         LA    @09,LTASKREC                                        0186
         ST    @09,RTM2SFSA+12(,@12)                               0186
*                       END;                                       0187
*                     ELSE          /* ENTRY NOT RECURSIVE           */
*                       DO;                                        0188
         B     @RC00172                                            0188
@RF00172 DS    0H                                                  0189
*                         RTM2SCTC(RTM2TRS)=ON;/* SET SECTION FLAG 0189
*                                      FOR RECURSION CONTROL         */
         OI    RTM2SCTC+1(R8),B'00100000'                          0189
*                         GENERATE REFS(RTM2SFSA,R8);              0190
          STM   14,12,RTM2SFSA+12(R8) -  SAVE REGISTERS
*                         RTM2SKRA=ADDR(RTCTRREC);/* SET RECURSION 0191
*                                      SKIP ADDRESS                  */
         LA    @12,RTCTRREC                                        0191
         ST    @12,RTM2SKRA(,R8)                                   0191
*                         RESPECIFY                                0192
*                          (R1) RESTRICTED;/* RESTRICT REGS USED TO
*                                      INTERFACE WITH TASK RECOVERY  */
*                         R1=ADDR(RTM2WA);/* SET R1 WITH ADDRESS OF
*                                      RTM2WA                        */
         LR    R1,R8                                               0193
*                         R13=ADDR(RTM2SFSA);/* SET R13 WITH ADDRESS
*                                      OF SAVE AREA                  */
         LA    R13,RTM2SFSA(,R8)                                   0194
*                         CALL IEAVTAS1;/* INVOKE TASK RECOVERY      */
         L     @15,@CV00099                                        0195
         BALR  @14,@15                                             0195
*LTASKREC:                                                         0196
*                         ;                                        0196
LTASKREC DS    0H                                                  0197
*                         RESPECIFY                                0197
*                          (R1) UNRESTRICTED;/* RELEASE REGS USED TO
*                                      INTERFACE WITH TASK RECOVERY  */
*                         TCBCMPC=RTM2CC;/* COPY COMPLETION CODE   0198
*                                      WHICH MAY HAVE BEEN UPDATED BY
*                                      EXIT                   @YM4164*/
         MVC   TCBCMPC(3,R4),RTM2CC(R8)                            0198
*                       END;                                       0199
*                   END;                                           0200
*                 ELSE                                             0201
*                   ;               /* RECOVERY EXITS DO NOT EXIST OR
*                                      ARE NOT PERMITTED FOR THIS  0201
*                                      ERROR                         */
@RF00163 DS    0H                                                  0202
*                 RTM2SCTC(RTM2TRS)=OFF;/* CLEAR SECTION FLAG        */
@RC00163 NI    RTM2SCTC+1(R8),B'11011111'                          0202
*                 RTM2SKRA=0;       /* CLEAR RECURSION ADDRESS       */
         SLR   @12,@12                                             0203
         ST    @12,RTM2SKRA(,R8)                                   0203
*RTCTRREC:                                                         0204
*                 ;                                                0204
RTCTRREC DS    0H                                                  0205
*                 IF RTM2FLX=NONE THEN/* NO EXIT REQUESTED           */
         CLC   RTM2FLX(2,R8),@CB00069                              0205
         BNE   @RF00205                                            0205
*                   DO;                                            0206
*                     TCBFPRAP=ON;  /* PREVENT PERCOLATION OF      0207
*                                      ASYNCHRONOUS ABENDS           */
         OI    TCBFPRAP(R4),B'00010000'                            0207
*                     TCBFX=ON;     /* PREVENT ASYNCHRONOUS EXITS    */
         OI    TCBFX(R4),B'00000001'                               0208
*                     TCBATT=ON;                                   0209
         OI    TCBATT(R4),B'00100000'                              0209
*                     TCB33E=OFF;   /* PERMIT RESOURCE MGRS TO     0210
*                                      REQUEST RETRY                 */
         NI    TCB33E(R4),B'11011111'                              0210
*                   END;                                           0211
*                 ELSE                                             0212
*                   ;               /* BYPASS ALL PROCESSING IF EXIT
*                                      REQUESTED                     */
@RF00205 DS    0H                                                  0213
*               END;                /* END SEGMENT RTCTRINT          */
*               IF RTM2RETR=OFF&RTM2FLX=NONE THEN/* NEITHER RETRY NOR
*                                      EXIT REQUESTED                */
         TM    RTM2RETR(R8),B'01000000'                            0214
         BNZ   @RF00214                                            0214
         CLC   RTM2FLX(2,R8),@CB00069                              0214
         BNE   @RF00214                                            0214
*                 DO;                                              0215
*                                                                  0215
*                   /*************************************************/
*                   /*                                               */
*                   /* SEGMENT RTCSCOPE DETERMINES WHETHER THIS ERROR*/
*                   /* SHOULD BE EXTENDED TO INCLUDE THE ENTIRE      */
*                   /* JOBSTEP. THE FAILURE SHOULD BE EXTENDED IF THE*/
*                   /* STEP OPTION WAS SPECIFIED OR IF IT OCCURRED   */
*                   /* WHILE A STEP-MUST-COMPLETE RESOURCE IS HELD. A*/
*                   /* PREVIOUS FAILURE MAY HAVE SPECIFIED 'STEP.' IF*/
*                   /* SO, THE SCOPE REMAINS 'STEP.'                 */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0216
*                   DO;             /* START OF RTCSCOPE             */
*                                                                  0216
*                     /***********************************************/
*                     /*                                             */
*                     /* HANDLE RECURSION SETUP                      */
*                     /*                                             */
*                     /***********************************************/
*                                                                  0217
*                     IF RTM2RECR='1'B&RTM2SCTR(RTM2SMCS)='1'B THEN/*
*                                      RECURSION IN THIS SECTION     */
         TM    RTM2RECR(R8),B'10000000'                            0217
         BNO   @RF00217                                            0217
         TM    RTM2SCTR(R8),B'00001000'                            0217
         BNO   @RF00217                                            0217
*                       DO;                                        0218
*                         RTM2RCRX='1'B;/* SET RECURSION EXIT FLAG   */
         OI    RTM2RCRX(R8),B'10000000'                            0219
*                         RTM2SCTX(RTM2SMCS)='1'B;/* SET SECTION FLAG
*                                      FOR EXIT                      */
         OI    RTM2SCTX(R8),B'00001000'                            0220
*                       END;                                       0221
*                     ELSE          /* NO RECURSION IN THIS SECTION  */
*                       DO;                                        0222
         B     @RC00217                                            0222
@RF00217 DS    0H                                                  0223
*                         RTM2SCTC(RTM2SMCS)='1'B;/* SET CURRENT   0223
*                                      SECTION FLAG                  */
         OI    RTM2SCTC(R8),B'00001000'                            0223
*                         GEN REFS(R8) SETS(RTM2SFSA)              0224
*                             (STM R14,R12,RTM2SFSA+12(R8));/* SAVE
*                                      REGISTERS                     */
         STM R14,R12,RTM2SFSA+12(R8)
*                         RTM2SKRA=ADDR(RCR0006);/* SET UP RECURSION
*                                      ADDRESS                       */
*                                                                  0225
         LA    @12,RCR0006                                         0225
         ST    @12,RTM2SKRA(,R8)                                   0225
*                         /*******************************************/
*                         /*                                         */
*                         /* DETERMINE WHETHER TASK IS IN            */
*                         /* STEP-MUST-COMPLETE                      */
*                         /*                                         */
*                         /*******************************************/
*                                                                  0226
*                         IF TCBFJMC=ON THEN                       0226
         TM    TCBFJMC(R4),B'00001000'                             0226
         BNO   @RF00226                                            0226
*                           DO;                                    0227
*                             RTM2STPT=ON;/* SCOPE IS STEP           */
         OI    RTM2STPT(R8),B'10000000'                            0228
*                             RTM2SKRA=RTM2CTRA;/* IF UNRECOVERED  0229
*                                      FAILURE OCCURS WHILE PURGING
*                                      ENQUEUED RESOURCES, THE MEMORY
*                                      IS TERMINATED                 */
*                                                                  0229
         L     @12,RTM2CTRA(,R8)                                   0229
         ST    @12,RTM2SKRA(,R8)                                   0229
*                             /***************************************/
*                             /*                                     */
*                             /* PURGE ENQUEUED RESOURCES            */
*                             /*                                     */
*                             /***************************************/
*                                                                  0230
*                             RESPECIFY                            0230
*                              (R1) RESTRICTED;/* RESTRICT INTERFACE
*                                      REGISTERS TO ENQUEUE PURGE    */
*                             R1=ADDR(RTM2RMPS);/* LOCATE PARAMETER
*                                      LIST                          */
         LA    R1,RTM2RMPS(,R8)                                    0231
*                             RMPLTCBA=R4;/* CURRENT TASK IS ONE TO
*                                      BE PURGED                     */
         ST    R4,RMPLTCBA+712(,R8)                                0232
*                             R13=ADDR(RTM2RMSA);/* LOCATE SAVEAREA
*                                      TO BE USED                    */
         LA    R13,RTM2RMSA(,R8)                                   0233
*                             CALL MANPURGE;/* PURGE ENQUEUED      0234
*                                      RESOURCES                     */
         L     @12,CVTPTR                                          0234
         L     @15,CVTRENQ(,@12)                                   0234
         BALR  @14,@15                                             0234
*                             RESPECIFY                            0235
*                              (R1) UNRESTRICTED;/* RELEASE R.M.   0235
*                                      INTERFACE REGS                */
*                             RTM2SKRA=0;/* IF FAILURE OCCURS, THE 0236
*                                      ENTIRE STEP WILL BE ABTERMED
*                                      OR THE MEMORY WILL BE       0236
*                                      TERMINATED                    */
         SLR   @12,@12                                             0236
         ST    @12,RTM2SKRA(,R8)                                   0236
*                           END;                                   0237
*                         ELSE      /* TASK IS NOT IN SMC            */
*                           IF RTM2STEP=ON THEN/* STEP REQUESTED BY
*                                      ISSUOR OF ABEND               */
         B     @RC00226                                            0238
@RF00226 TM    RTM2STEP(R8),B'01000000'                            0238
         BNO   @RF00238                                            0238
*                             RTM2STPT=ON;/* SCOPE IS STEP           */
         OI    RTM2STPT(R8),B'10000000'                            0239
*                           ELSE                                   0240
*                             ;     /* STEP NOT REQUESTED FOR THIS 0240
*                                      FAILURE                       */
@RF00238 DS    0H                                                  0241
*                         IF TCBJSTCA=R4 THEN/* IF CURRENT TASK IS 0241
*                                      JOBSTEP, CONVERSION IS NOT  0241
*                                      NECESSARY                     */
@RC00226 L     @12,TCBJSTCA-1(,R4)                                 0241
         LA    @12,0(,@12)                                         0241
         CR    R4,@12                                              0241
         BNE   @RF00241                                            0241
*                           RTM2STPT=OFF;                          0242
         NI    RTM2STPT(R8),B'01111111'                            0242
*                         ELSE                                     0243
*                           ;       /* CURRENT IS NOT JOBSTEP        */
@RF00241 DS    0H                                                  0244
*                         RTM2SKRA=0;/* CLEAR RECURSION ADDRESS      */
         SLR   @12,@12                                             0244
         ST    @12,RTM2SKRA(,R8)                                   0244
*                         RTM2SCTC(RTM2SMCS)='0'B;/* CLEAR SECTION 0245
*                                      FLAG                          */
         NI    RTM2SCTC(R8),B'11110111'                            0245
*                       END;                                       0246
*RCR0006:                                                          0247
*                   END;                                           0247
@RC00217 DS    0H                                                  0247
RCR0006  DS    0H                                                  0248
*                   IF RTM2FLX=NONE THEN/* EXIT WAS NOT REQUESTED    */
         CLC   RTM2FLX(2,R8),@CB00069                              0248
         BNE   @RF00248                                            0248
*                     DO;                                          0249
*                       IF RTM2RECR='1'B&RTM2SCTR(RTM2ASYS)='1'B THEN
         TM    RTM2RECR(R8),B'10000000'                            0250
         BNO   @RF00250                                            0250
         TM    RTM2SCTR(R8),B'00010000'                            0250
         BNO   @RF00250                                            0250
*                                   /* RECURSION IN THIS SECTION     */
*                         DO;                                      0251
*                           RTM2RCRX='1'B;/* SET RECURSION EXIT FLAG */
         OI    RTM2RCRX(R8),B'10000000'                            0252
*                           RTM2SCTX(RTM2ASYS)='1'B;/* SET SECTION 0253
*                                      FLAG FOR EXIT                 */
         OI    RTM2SCTX(R8),B'00010000'                            0253
*                         END;                                     0254
*                       ELSE        /* NO RECURSION IN THIS SECTION  */
*                         DO;                                      0255
         B     @RC00250                                            0255
@RF00250 DS    0H                                                  0256
*                           RTM2SCTC(RTM2ASYS)='1'B;/* SET CURRENT 0256
*                                      SECTION FLAG                  */
         OI    RTM2SCTC(R8),B'00010000'                            0256
*                           GEN REFS(R8) SETS(RTM2SFSA)            0257
*                               (STM R14,R12,RTM2SFSA+12(R8));/* SAVE
*                                      REGISTERS                     */
         STM R14,R12,RTM2SFSA+12(R8)
*                           RTM2SKRA=ADDR(RCR0009);/* SET UP       0258
*                                      RECURSION ADDRESS ESTABLISH 0258
*                                      RECURSION CONTROL             */
*                                                                  0258
         LA    @12,RCR0009                                         0258
         ST    @12,RTM2SKRA(,R8)                                   0258
*                           /*****************************************/
*                           /*                                       */
*                           /* OBTAIN LOCAL LOCK                     */
*                           /*                                       */
*                           /*****************************************/
*                                                                  0259
*                           ESAGLREC=ON;                           0259
         OI    ESAGLREC+96(R5),B'00010000'                         0259
*                           DO;     /* SETLOCK OBTAIN TYPE(LOCAL)MODE
*                                      (UNCOND)RELATED(IQES,IEAVTRTC(
*                                      RTCRVRB))                     */
*                             RESPECIFY                            0261
*                              (GPR11P,                            0261
*                               GPR12P,                            0261
*                               GPR13P,                            0261
*                               GPR14P) RESTRICTED;/* RESTRICT REGS
*                                      USED BY SETLOCK               */
*                             GENERATE REFS(PSALITA,FLC) SETS(GPR11P,
*                                 GPR12P,GPR13P,GPR14P);           0262
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                        C
               RELATED=(IQES,IEAVTRTC(RTCRVRB))
*                             RESPECIFY                            0263
*                              (GPR11P,                            0263
*                               GPR12P,                            0263
*                               GPR13P,                            0263
*                               GPR14P) UNRESTRICTED;/* RELEASE REGS
*                                      USED BY SETLOCK               */
*                           END;    /* SETLOCK OBTAIN TYPE(LOCAL)MODE
*                                      (UNCOND)RELATED(IQES,IEAVTRTC(
*                                      RTCRVRB))                     */
*                           ESAGLREC=OFF;                          0265
*                                                                  0265
         NI    ESAGLREC+96(R5),B'11101111'                         0265
*                           /*****************************************/
*                           /*                                       */
*                           /* SEGMENT RTCFIQE FLAGS ALL IQES RELATED*/
*                           /* TO THE CURRENT TASK TO PREVENT THEIR  */
*                           /* BEING SCHEDULED. THE CHAIN OF IQES    */
*                           /* FROM THE ASXB IS SCANNED, AND EACH    */
*                           /* IQE'S TCB POINTER IS COMPARED TO THE  */
*                           /* ADDRESS OF THE CURRENT TCB. IF IT     */
*                           /* MATCHES, THE IQE IS FLAGGED. THE LOCAL*/
*                           /* LOCK MUST BE HELD TO PREVENT IQES FROM*/
*                           /* BEING ADDED TO THE QUEUE              */
*                           /*                                       */
*                           /*****************************************/
*                                                                  0266
*                           DO;     /* BEGIN SEGMENT RTCFIQE         */
*                             RESPECIFY                            0267
*                               R10 RESTRICTED;/* RESTRICT IQE     0267
*                                      REGISTER                      */
*                             R10=ASXBFIQE;/* SET REG TO ADDR OF   0268
*                                      FIRST IQE                     */
         L     @12,ASCBPTR(,R8)                                    0268
         L     @12,ASXBPTR(,@12)                                   0268
         L     R10,ASXBFIQE(,@12)                                  0268
*                             IF R10^=0 THEN/* AN IQE EXISTS         */
         LTR   R10,R10                                             0269
         BZ    @RF00269                                            0269
*                               DO;                                0270
*                                 DO WHILE(R10^=ASXBLIQE);/* LOOP  0271
*                                      UNTIL LAST IQE FOUND          */
         B     @DE00271                                            0271
@DL00271 DS    0H                                                  0272
*                                   IF IQETCBA=R4 THEN/* IQE RELATED
*                                      TO CURRENT TCB                */
         L     @12,IQETCBA-1(,R10)                                 0272
         LA    @12,0(,@12)                                         0272
         CR    R4,@12                                              0272
         BNE   @RF00272                                            0272
*                                    IQEPURGE=ON;/* SET PURGE FLAG TO
*                                      PREVENT IT FROM BEING       0273
*                                      SCHEDULED                     */
         OI    IQEPURGE(R10),B'10000000'                           0273
*                                   ELSE                           0274
*                                    ;/* IQE NOT RELATED TO CURRENT
*                                      TCB                           */
@RF00272 DS    0H                                                  0275
*                                   R10=IQELNKA;/* GET NEXT IQE ON 0275
*                                      CHAIN                         */
         L     @12,IQELNKA-1(,R10)                                 0275
         LA    @12,0(,@12)                                         0275
         LR    R10,@12                                             0275
*                                 END;                             0276
@DE00271 L     @12,ASCBPTR(,R8)                                    0276
         L     @12,ASXBPTR(,@12)                                   0276
         C     R10,ASXBLIQE(,@12)                                  0276
         BNE   @DL00271                                            0276
*                                 IF IQETCBA=R4 THEN/* LAST IQE IS 0277
*                                      RELATED TO THE CURRENT TCB    */
         L     @12,IQETCBA-1(,R10)                                 0277
         LA    @12,0(,@12)                                         0277
         CR    R4,@12                                              0277
         BNE   @RF00277                                            0277
*                                   IQEPURGE=ON;/* SET PURGE FLAG TO
*                                      PREVENT SCHEDULING            */
         OI    IQEPURGE(R10),B'10000000'                           0278
*                                 ELSE                             0279
*                                   ;/* IQE NOT FOR CURRENT TCB      */
@RF00277 DS    0H                                                  0280
*                               END;                               0280
*                             ELSE                                 0281
*                               ;   /* NO IQE ON CHAIN               */
@RF00269 DS    0H                                                  0282
*                             RESPECIFY                            0282
*                               R10 UNRESTRICTED;                  0282
*                           END;    /* END SEGMENT RTCFIQE           */
*                                                                  0283
*                           /*****************************************/
*                           /*                                       */
*                           /* RELEASE LOCAL LOCK                    */
*                           /*                                       */
*                           /*****************************************/
*                                                                  0284
*                           ESAGLREC=ON;                           0284
         OI    ESAGLREC+96(R5),B'00010000'                         0284
*                           DO;     /* SETLOCK RELEASE TYPE(LOCAL)REL
*                                      ATED(IQES,IEAVTRTC(RTCRVRB))  */
*                             RESPECIFY                            0286
*                              (GPR11P,                            0286
*                               GPR12P,                            0286
*                               GPR13P,                            0286
*                               GPR14P) RESTRICTED;/* RESTRICT REGS
*                                      USED BY SETLOCK               */
*                             GENERATE REFS(PSALITA,FLC) SETS(GPR11P,
*                                 GPR12P,GPR13P,GPR14P);           0287
         SETLOCK RELEASE,TYPE=LOCAL,                                   C
               RELATED=(IQES,IEAVTRTC(RTCRVRB))
*                             RESPECIFY                            0288
*                              (GPR11P,                            0288
*                               GPR12P,                            0288
*                               GPR13P,                            0288
*                               GPR14P) UNRESTRICTED;/* RELEASE REGS
*                                      USED BY SETLOCK               */
*                           END;    /* SETLOCK RELEASE TYPE(LOCAL)REL
*                                      ATED(IQES,IEAVTRTC(RTCRVRB))  */
*                           ESAGLREC=OFF;                          0290
         NI    ESAGLREC+96(R5),B'11101111'                         0290
*                           RTM2SKRA=0;/* CLEAR RECURSION ADDRESS    */
         SLR   @12,@12                                             0291
         ST    @12,RTM2SKRA(,R8)                                   0291
*                           RTM2SCTC(RTM2ASYS)='0'B;/* CLEAR SECTION
*                                      FLAG                          */
         NI    RTM2SCTC(R8),B'11101111'                            0292
*                         END;                                     0293
*RCR0009:                           /* RESET RECURSION CONTROL       */
*                     END;                                         0294
*                   ELSE                                           0295
*                     ;             /* BYPASS PROCESSING IF EXIT   0295
*                                      REQUESTED                     */
@RF00248 DS    0H                                                  0296
*                 END;              /* END NO RETRY PROCESSING       */
*               ELSE                                               0297
*                 ;                 /* BYPASS PROCESSING IF EXIT OR
*                                      RETRY REQUESTED               */
@RF00214 DS    0H                                                  0298
*             END;                                                 0298
*           ELSE                                                   0299
*             ;                     /* BYPASS PROCESSING IF EXIT   0299
*                                      REQUESTED                     */
@RF00160 DS    0H                                                  0300
*         END;                      /* END SEGMENT RTCRVRB           */
*       ELSE                                                       0301
*         ;                         /* FALL THROUGH TO NEXT TEST     */
@RF00085 DS    0H                                                  0302
*       IF RTM2RETR=OFF&RTM2FLX=NONE THEN/* IF NEITHER RETRY NOR AN
*                                      EXIT REQUESTED TEST TO SEE IF
*                                      EXPRESS PATH SHOULD BE ENTERED*/
@RC00085 TM    RTM2RETR(R8),B'01000000'                            0302
         BNZ   @RF00302                                            0302
         CLC   RTM2FLX(2,R8),@CB00069                              0302
         BNE   @RF00302                                            0302
*         DO;                                                      0303
*                                                                  0303
*           /*********************************************************/
*           /*                                                       */
*           /* ESAPGNLY AND RTM2CNCL FLAGS ARE TESTED. IF EITHER IS  */
*           /* ON THEN THIS ENTRY TO RTM2 IS AN EXPRESS ENTRY AND THE*/
*           /* EXPRESS PATH IS TAKEN. TCBCNCB IS ALSO TESTED. IF THIS*/
*           /* FLAG IS ON THEN A PREVIOUS ENTRY TO RTM2 WAS FOR      */
*           /* EXPRESS SO THE EXPRESS PATH IS RESUMED NOW.           */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0304
*           IF ESAPGNLY=ON×RTM2CNCL=ON×TCBCNCB=ON THEN/* USE EXPRESS
*                                      PATH IF ANY ON                */
*                                                                  0304
         TM    ESAPGNLY+96(R5),B'00100000'                         0304
         BO    @RT00304                                            0304
         TM    RTM2CNCL(R8),B'01000000'                            0304
         BO    @RT00304                                            0304
         TM    TCBCNCB(R4),B'10000000'                             0304
         BNO   @RF00304                                            0304
@RT00304 DS    0H                                                  0305
*             /*******************************************************/
*             /*                                                     */
*             /* SEGMENT RTCCNCL PERFORMS PRELIMINARY PROCESSING FOR */
*             /* FAILURES WHICH CANNOT BE RECOVERED. IT SETS THE     */
*             /* NON-RECOVERABLE FLAGS IN THE TCB, PREVENTS EXISTING */
*             /* ASYNCHRONOUS EXITS FROM BEING SCHEDULED, AND        */
*             /* INCLUDES SEGMENT RTCCSUB TO STOP ALL SUBTASKS AND   */
*             /* PERFORM INITIAL PURGES FOR EACH ONE.                */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0305
*             DO;                   /* START OF RTCCNCL              */
*                                                                  0305
*               /*****************************************************/
*               /*                                                   */
*               /* OBTAIN LOCAL LOCK                                 */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0306
*               ESAGLREC=ON;        /* SET FLAG SO THAT RECURSION  0306
*                                      WILL BE RECOGNIZED            */
         OI    ESAGLREC+96(R5),B'00010000'                         0306
*               DO;                 /* SETLOCK OBTAIN TYPE(LOCAL)MODE
*                                      (UNCOND)RELATED(TCB,IEAVTRTC(R
*                                      TCCSUB))                      */
*                 RESPECIFY                                        0308
*                  (GPR11P,                                        0308
*                   GPR12P,                                        0308
*                   GPR13P,                                        0308
*                   GPR14P) RESTRICTED;/* RESTRICT REGS USED BY    0308
*                                      SETLOCK                       */
*                 GENERATE REFS(PSALITA,FLC) SETS(GPR11P,GPR12P,GPR13P,
*                     GPR14P);                                     0309
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                        C
               RELATED=(TCB,IEAVTRTC(RTCCSUB))
*                 RESPECIFY                                        0310
*                  (GPR11P,                                        0310
*                   GPR12P,                                        0310
*                   GPR13P,                                        0310
*                   GPR14P) UNRESTRICTED;/* RELEASE REGS USED BY   0310
*                                      SETLOCK                       */
*               END;                /* SETLOCK OBTAIN TYPE(LOCAL)MODE
*                                      (UNCOND)RELATED(TCB,IEAVTRTC(R
*                                      TCCSUB)) OBTAIN LOCAL LOCK    */
*               ESAGLREC=OFF;       /* SETLOCK COMPLETED WITHOUT   0312
*                                      ERROR                         */
*                                                                  0312
         NI    ESAGLREC+96(R5),B'11101111'                         0312
*               /*****************************************************/
*               /*                                                   */
*               /* SET ABEND FLAGS IN CURRENT TASK                   */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0313
*               TCBFA=ON;           /* INDICATE TASK CANNOT BE     0313
*                                      RECOVERED                     */
         OI    TCBFA(R4),B'10000000'                               0313
*               TCBEOTFM=ON;        /* PREVENT CONDITONAL GETMAIN  0314
*                                      ABENDS FOR THIS TASK  @YM01942*/
         OI    TCBEOTFM(R4),B'10000000'                            0314
*               IF RTM2CNCL=ON THEN /* CANCEL ENTRY                  */
         TM    RTM2CNCL(R8),B'01000000'                            0315
         BNO   @RF00315                                            0315
*                 DO;                                              0316
*                   TCBFT=ON;       /* INDICATE CURRENT TASK IS TOP
*                                      OF TREE                       */
         OI    TCBFT(R4),B'00000100'                               0317
*                 END;                                             0318
*               ELSE                                               0319
*                 ;                 /* PURGE-ONLY: CURRENT TASK IS 0319
*                                      NOT TOP OF TREE               */
*                                                                  0319
@RF00315 DS    0H                                                  0320
*               /*****************************************************/
*               /*                                                   */
*               /* PREVENT EXISTING ASYNCHRONOUS ROUTINES FROM BEING */
*               /* SCHEDULED                                         */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0320
*               IF RTM2RECR='1'B&RTM2SCTR(RTM2IQES)='1'B THEN/*    0320
*                                      RECURSION IN THIS SECTION     */
         TM    RTM2RECR(R8),B'10000000'                            0320
         BNO   @RF00320                                            0320
         TM    RTM2SCTR(R8),B'00000100'                            0320
         BNO   @RF00320                                            0320
*                 DO;                                              0321
*                   RTM2RCRX='1'B;  /* SET RECURSION EXIT FLAG       */
         OI    RTM2RCRX(R8),B'10000000'                            0322
*                   RTM2SCTX(RTM2IQES)='1'B;/* SET SECTION FLAG FOR
*                                      EXIT                          */
         OI    RTM2SCTX(R8),B'00000100'                            0323
*                 END;                                             0324
*               ELSE                /* NO RECURSION IN THIS SECTION  */
*                 DO;                                              0325
         B     @RC00320                                            0325
@RF00320 DS    0H                                                  0326
*                   RTM2SCTC(RTM2IQES)='1'B;/* SET CURRENT SECTION 0326
*                                      FLAG                          */
         OI    RTM2SCTC(R8),B'00000100'                            0326
*                   GEN REFS(R8) SETS(RTM2SFSA)                    0327
*                       (STM R14,R12,RTM2SFSA+12(R8));/* SAVE      0327
*                                      REGISTERS                     */
         STM R14,R12,RTM2SFSA+12(R8)
*                   RTM2SKRA=ADDR(RCR0015);/* SET UP RECURSION     0328
*                                      ADDRESS SET UP RECURSION    0328
*                                      CONTROL                       */
*                                                                  0328
         LA    @12,RCR0015                                         0328
         ST    @12,RTM2SKRA(,R8)                                   0328
*                   /*************************************************/
*                   /*                                               */
*                   /* SEGMENT RTCFIQE FLAGS ALL IQES RELATED TO THE */
*                   /* CURRENT TASK TO PREVENT THEIR BEING SCHEDULED.*/
*                   /* THE CHAIN OF IQES FROM THE ASXB IS SCANNED,   */
*                   /* AND EACH IQE'S TCB POINTER IS COMPARED TO THE */
*                   /* ADDRESS OF THE CURRENT TCB. IF IT MATCHES, THE*/
*                   /* IQE IS FLAGGED. THE LOCAL LOCK MUST BE HELD TO*/
*                   /* PREVENT IQES FROM BEING ADDED TO THE QUEUE    */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0329
*                   DO;             /* BEGIN SEGMENT RTCFIQE         */
*                     RESPECIFY                                    0330
*                       R10 RESTRICTED;/* RESTRICT IQE REGISTER      */
*                     R10=ASXBFIQE; /* SET REG TO ADDR OF FIRST IQE  */
         L     @12,ASCBPTR(,R8)                                    0331
         L     @12,ASXBPTR(,@12)                                   0331
         L     R10,ASXBFIQE(,@12)                                  0331
*                     IF R10^=0 THEN/* AN IQE EXISTS                 */
         LTR   R10,R10                                             0332
         BZ    @RF00332                                            0332
*                       DO;                                        0333
*                         DO WHILE(R10^=ASXBLIQE);/* LOOP UNTIL LAST
*                                      IQE FOUND                     */
         B     @DE00334                                            0334
@DL00334 DS    0H                                                  0335
*                           IF IQETCBA=R4 THEN/* IQE RELATED TO    0335
*                                      CURRENT TCB                   */
         L     @12,IQETCBA-1(,R10)                                 0335
         LA    @12,0(,@12)                                         0335
         CR    R4,@12                                              0335
         BNE   @RF00335                                            0335
*                             IQEPURGE=ON;/* SET PURGE FLAG TO     0336
*                                      PREVENT IT FROM BEING       0336
*                                      SCHEDULED                     */
         OI    IQEPURGE(R10),B'10000000'                           0336
*                           ELSE                                   0337
*                             ;     /* IQE NOT RELATED TO CURRENT TCB*/
@RF00335 DS    0H                                                  0338
*                           R10=IQELNKA;/* GET NEXT IQE ON CHAIN     */
         L     @12,IQELNKA-1(,R10)                                 0338
         LA    @12,0(,@12)                                         0338
         LR    R10,@12                                             0338
*                         END;                                     0339
@DE00334 L     @12,ASCBPTR(,R8)                                    0339
         L     @12,ASXBPTR(,@12)                                   0339
         C     R10,ASXBLIQE(,@12)                                  0339
         BNE   @DL00334                                            0339
*                         IF IQETCBA=R4 THEN/* LAST IQE IS RELATED TO
*                                      THE CURRENT TCB               */
         L     @12,IQETCBA-1(,R10)                                 0340
         LA    @12,0(,@12)                                         0340
         CR    R4,@12                                              0340
         BNE   @RF00340                                            0340
*                           IQEPURGE=ON;/* SET PURGE FLAG TO PREVENT
*                                      SCHEDULING                    */
         OI    IQEPURGE(R10),B'10000000'                           0341
*                         ELSE                                     0342
*                           ;       /* IQE NOT FOR CURRENT TCB       */
@RF00340 DS    0H                                                  0343
*                       END;                                       0343
*                     ELSE                                         0344
*                       ;           /* NO IQE ON CHAIN               */
@RF00332 DS    0H                                                  0345
*                     RESPECIFY                                    0345
*                       R10 UNRESTRICTED;                          0345
*                   END;            /* END SEGMENT RTCFIQE           */
*                   RTM2SKRA=0;     /* CLEAR RECURSION ADDRESS       */
         SLR   @12,@12                                             0347
         ST    @12,RTM2SKRA(,R8)                                   0347
*                   RTM2SCTC(RTM2IQES)='0'B;/* CLEAR SECTION FLAG    */
         NI    RTM2SCTC(R8),B'11111011'                            0348
*                 END;                                             0349
*RCR0015:                           /* CLEAR RECURSION CONTROL       */
*                                                                  0350
*               /*****************************************************/
*               /*                                                   */
*               /* PERFORM INITIAL SUBTASK PROCESSING                */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0350
*               IF RTM2FLX=NONE THEN/* NO SECTION HAS REQUESTED EXIT */
@RC00320 DS    0H                                                  0350
RCR0015  CLC   RTM2FLX(2,R8),@CB00069                              0350
         BNE   @RF00350                                            0350
*                 IF RTM2ISPC=OFF&TCBLTC^=0 THEN/* SUBTASKS EXIST AND
*                                      WERE NOT YET STOPPED   YM00132*/
         TM    RTM2ISPC(R8),B'00010000'                            0351
         BNZ   @RF00351                                            0351
         L     @12,TCBLTC(,R4)                                     0351
         LTR   @12,@12                                             0351
         BZ    @RF00351                                            0351
*                   DO;                                            0352
*                     IF RTM2RECR='1'B&RTM2SCTR(RTM2EPS)='1'B THEN/*
*                                      RECURSION IN THIS SECTION     */
         TM    RTM2RECR(R8),B'10000000'                            0353
         BNO   @RF00353                                            0353
         TM    RTM2SCTR(R8),B'00000010'                            0353
         BNO   @RF00353                                            0353
*                       DO;                                        0354
*                         RTM2RCRX='1'B;/* SET RECURSION EXIT FLAG   */
         OI    RTM2RCRX(R8),B'10000000'                            0355
*                         RTM2SCTX(RTM2EPS)='1'B;/* SET SECTION FLAG
*                                      FOR EXIT                      */
         OI    RTM2SCTX(R8),B'00000010'                            0356
*                       END;                                       0357
*                     ELSE          /* NO RECURSION IN THIS SECTION  */
*                       DO;                                        0358
         B     @RC00353                                            0358
@RF00353 DS    0H                                                  0359
*                         RTM2SCTC(RTM2EPS)='1'B;/* SET CURRENT    0359
*                                      SECTION FLAG                  */
         OI    RTM2SCTC(R8),B'00000010'                            0359
*                         GEN REFS(R8) SETS(RTM2SFSA)              0360
*                             (STM R14,R12,RTM2SFSA+12(R8));/* SAVE
*                                      REGISTERS                     */
         STM R14,R12,RTM2SFSA+12(R8)
*                         RTM2SKRA=ADDR(RCR0018);/* SET UP RECURSION
*                                      ADDRESS                       */
         LA    @12,RCR0018                                         0361
         ST    @12,RTM2SKRA(,R8)                                   0361
*/* SET UP RECURSION CONTROL                                         */
*                                                                  0362
*                         /*******************************************/
*                         /*                                         */
*                         /* SEGMENT RTCCSUB STOPS ALL SUBTASKS AND  */
*                         /* PERFORMS THE INITIAL PURGES FOR EACH OF */
*                         /* THEM (I/O, PARTIALLY LOADED PROGRAMS,   */
*                         /* AND PAGING I/O.) IEATRSCN IS USED TO    */
*                         /* LOCATE EACH TASK IN TREE FOR INITIAL    */
*                         /* PURGES                                  */
*                         /*                                         */
*                         /*******************************************/
*                                                                  0362
*                         DO;       /* START OF RTCCSUB              */
*                                                                  0362
*                           /*****************************************/
*                           /*                                       */
*                           /* STOP ALL SUBTASKS                     */
*                           /*                                       */
*                           /*****************************************/
*                                                                  0363
*                           RESPECIFY                              0363
*                            (R0,                                  0363
*                             R1) RESTRICTED;/* RESTRICT STATUS    0363
*                                      INTERFACE REGS                */
*                           R0=STOPTREE;/* MASK AND ENTRY CODE FOR 0364
*                                      STATUS                        */
         L     R0,@CF00085                                         0364
*                           R1=R4;  /* TOP TCB OF TREE               */
         LR    R1,R4                                               0365
*                           R13=0;  /* INDICATE CURRENT MEMORY       */
         SLR   R13,R13                                             0366
*                           CALL STATUS;/* STOP SUBTASK TREE         */
         L     @12,CVTPTR                                          0367
         L     @12,SCVTSPTR(,@12)                                  0367
         L     @15,SCVTSTAT(,@12)                                  0367
         BALR  @14,@15                                             0367
*                           RESPECIFY                              0368
*                            (R0,                                  0368
*                             R1) UNRESTRICTED;                    0368
*                                                                  0368
*                           /*****************************************/
*                           /*                                       */
*                           /* SET ABEND FLAGS IN ALL SUBTASKS       */
*                           /*                                       */
*                           /*****************************************/
*                                                                  0369
*                           RESPECIFY                              0369
*                            (R10,                                 0369
*                             R8,                                  0369
*                             R11) RESTRICTED;/* INTERFACE REGS FOR
*                                      TREE SCAN                     */
*                           RESPECIFY                              0370
*                            (R7,                                  0370
*                             R9) RESTRICTED;/* RESTRICT REGISTERS 0370
*                                      USED AS BASE AND WORKREG BY 0370
*                                      TREESCAN                      */
*                           R8=R4;  /* ADDR OF TOP TCB IN TREE       */
         LR    R8,R4                                               0371
*                           R10=R4; /* ADDR OF FIRST TCB             */
         LR    R10,R4                                              0372
*                           R11=ADDR(LCNCL1);/* RETURN ADDRESS TO BE
*                                      USED AT END OF SCAN           */
         LA    R11,LCNCL1                                          0373
*                           DO WHILE(R10^=0);/* WILL LOOP UNTIL TRSCN
*                                      BRANCHES OUT                  */
         B     @DE00374                                            0374
@DL00374 DS    0H                                                  0375
*                             CALL IEATRSCN;/* LOCATE NEXT TCB ON  0375
*                                      TREE                          */
         L     @12,CVTPTR                                          0375
         L     @15,CVTRSCN(,@12)                                   0375
         BALR  @14,@15                                             0375
*                             IF R10->TCBFC^=ON THEN               0376
         TM    TCBFC(R10),B'10000000'                              0376
         BO    @RF00376                                            0376
*                               DO;                                0377
*                                 R10->TCBFA=ON;/* PREVENT TASK FROM
*                                      EVER BEING RECOVERED          */
         OI    TCBFA(R10),B'10000000'                              0378
*                                 R10->TCBEOTFM=ON;/* INDICATE     0379
*                                      END-OF-TASK FOR FREEMAIN    0379
*                                                            @YM01942*/
         OI    TCBEOTFM(R10),B'10000000'                           0379
*                                 R10->TCBFX=ON;/* SUPPRESS        0380
*                                      ASYNCHRONOUS EXITS            */
         OI    TCBFX(R10),B'00000001'                              0380
*                                 R10->TCBFPRAP=ON;/* SUPPRESS     0381
*                                      PERCOLATION OF ASYNCHRONOUS 0381
*                                      ERRORS                        */
         OI    TCBFPRAP(R10),B'00010000'                           0381
*                                 R10->TCBFT=OFF;/* SUBTASK TCB IS NO
*                                      LONGER TOP OF TREE            */
         NI    TCBFT(R10),B'11111011'                              0382
*                               END;                               0383
*                           END;                                   0384
@RF00376 DS    0H                                                  0384
@DE00374 LTR   R10,R10                                             0384
         BNZ   @DL00374                                            0384
*LCNCL1:                                                           0385
*                           ;       /* REACHED FROM IEATRSCN WHEN NO
*                                      MORE TCBS ON TREE             */
*                                                                  0385
LCNCL1   DS    0H                                                  0386
*                           /*****************************************/
*                           /*                                       */
*                           /* RELEASE LOCAL LOCK                    */
*                           /*                                       */
*                           /*****************************************/
*                                                                  0386
*                           ESAGLREC=ON;/* INDICATE SETLOCK IN     0386
*                                      CONTROL                       */
         OI    ESAGLREC+96(R5),B'00010000'                         0386
*                           DO;     /* SETLOCK RELEASE TYPE(LOCAL)REL
*                                      ATED(TCB,IEAVTRTC(RTCCNCL))   */
*                             RESPECIFY                            0388
*                              (GPR11P,                            0388
*                               GPR12P,                            0388
*                               GPR13P,                            0388
*                               GPR14P) RESTRICTED;/* RESTRICT REGS
*                                      USED BY SETLOCK               */
*                             GENERATE REFS(PSALITA,FLC) SETS(GPR11P,
*                                 GPR12P,GPR13P,GPR14P);           0389
         SETLOCK RELEASE,TYPE=LOCAL,                                   C
               RELATED=(TCB,IEAVTRTC(RTCCNCL))
*                             RESPECIFY                            0390
*                              (GPR11P,                            0390
*                               GPR12P,                            0390
*                               GPR13P,                            0390
*                               GPR14P) UNRESTRICTED;/* RELEASE REGS
*                                      USED BY SETLOCK               */
*                           END;    /* SETLOCK RELEASE TYPE(LOCAL)REL
*                                      ATED(TCB,IEAVTRTC(RTCCNCL))   */
*                           ESAGLREC=OFF;/* SETLOCK COMPLETED WITHOUT
*                                      FAILURE                       */
*                                                                  0392
         LA    @12,96                                              0392
         ALR   @12,R5                                              0392
         NI    ESAGLREC(@12),B'11101111'                           0392
*                           /*****************************************/
*                           /*                                       */
*                           /* PERFORM INITIAL PURGES FOR EACH       */
*                           /* SUBTASK                               */
*                           /*                                       */
*                           /*****************************************/
*                                                                  0393
*                           R13=ADDR(ESART2WA->RTM2SFSA);/* SET UP 0393
*                                      SAVEAREA PTR                  */
         L     R13,ESART2WA(,@12)                                  0393
         LA    R13,RTM2SFSA(,R13)                                  0393
*                           R10=R4; /* CURRENT TCB ADDRESS TO START
*                                      SCAN                          */
         LR    R10,R4                                              0394
*                           R8=R4;  /* CURRENT TCB IS TOP OF TREE    */
         LR    R8,R4                                               0395
*                           R11=ADDR(LCNCL2);                      0396
         LA    R11,LCNCL2                                          0396
*                           DO WHILE(R10^=0);/* CAUSE LOOP UNTIL   0397
*                                      TRSCN BRANCHES OUT OF IT      */
         B     @DE00397                                            0397
@DL00397 DS    0H                                                  0398
*                             CALL IEATRSCN;/* LOCATE NEXT SUBTASK 0398
*                                      TCB                           */
         L     @12,CVTPTR                                          0398
         L     @15,CVTRSCN(,@12)                                   0398
         BALR  @14,@15                                             0398
*                             R8=ESART2WA;/* RELOAD PTR FROM ESA   0399
*                                      BECAUSE DESTROYED BY TRSCN    */
         L     R8,ESART2WA+96(,R5)                                 0399
*                             IF R10->TCBFC^=ON THEN               0400
         TM    TCBFC(R10),B'10000000'                              0400
         BO    @RF00400                                            0400
*                               DO;                                0401
*                                 RMPLTCBA=R10;/* PUT TCB ADDRESS  0402
*                                      INTO RMPL FOR INITIAL PURGES  */
         ST    R10,RMPLTCBA+712(,R8)                               0402
*                                 CALL RTCINPRG;/* PERFORM INITIAL 0403
*                                      PURGES                        */
         BAL   @14,RTCINPRG                                        0403
*                               END;                               0404
*                             R8=R4;/* RELOAD BECAUSE OF REG.      0405
*                                      CONFLICT                      */
@RF00400 LR    R8,R4                                               0405
*                           END;                                   0406
@DE00397 LTR   R10,R10                                             0406
         BNZ   @DL00397                                            0406
*LCNCL2:                                                           0407
*                           ;       /* REACHED AT END OF SECOND TREE
*                                      SCAN                          */
LCNCL2   DS    0H                                                  0408
*                           RESPECIFY                              0408
*                            (R10,                                 0408
*                             R8,                                  0408
*                             R11) UNRESTRICTED;                   0408
*                           RESPECIFY                              0409
*                            (R7,                                  0409
*                             R9) UNRESTRICTED;                    0409
*                           RESPECIFY                              0410
*                             R8 RESTRICTED;                       0410
*                           R8=ESART2WA;/* RESTORE WORK AREA PTR     */
         L     R8,ESART2WA+96(,R5)                                 0411
*                           RMPLTCBA=RTM2TCBC;/* RESTORE RMPL TCB PTR
*                                      TO CURRENT TCB                */
         L     @12,RTM2TCBC(,R8)                                   0412
         ST    @12,RMPLTCBA+712(,R8)                               0412
*                         END;      /* END OF RTCCSUB                */
*                         RTM2ISPC=ON;/* INDICATE ALL SUBTASKS     0414
*                                      STOPPED                       */
         OI    RTM2ISPC(R8),B'00010000'                            0414
*                         RTM2SKRA=0;/* CLEAR RECURSION ADDRESS      */
         SLR   @12,@12                                             0415
         ST    @12,RTM2SKRA(,R8)                                   0415
*                         RTM2SCTC(RTM2EPS)='0'B;/* CLEAR SECTION  0416
*                                      FLAG                          */
         NI    RTM2SCTC(R8),B'11111101'                            0416
*                       END;                                       0417
*RCR0018:                           /* CLEAR RECURSION CONTROL       */
*                   END;                                           0418
*                 ELSE              /* SUBTASKS ALREADY STOPPED    0419
*                                                            @YM00132*/
*                   DO;             /*                       @YM00132*/
         B     @RC00351                                            0419
@RF00351 DS    0H                                                  0420
*                     ESAGLREC=ON;  /*                       @YM00132*/
         OI    ESAGLREC+96(R5),B'00010000'                         0420
*                     DO;           /* SETLOCK RELEASE TYPE(LOCAL)REL
*                                      ATED(TCB,IEAVTRTC(RTCCNCL))   */
*                       RESPECIFY                                  0422
*                        (GPR11P,                                  0422
*                         GPR12P,                                  0422
*                         GPR13P,                                  0422
*                         GPR14P) RESTRICTED;/* RESTRICT REGS USED BY
*                                      SETLOCK                       */
*                       GENERATE REFS(PSALITA,FLC) SETS(GPR11P,GPR12P,
*                           GPR13P,GPR14P);                        0423
         SETLOCK RELEASE,TYPE=LOCAL,                                   C
               RELATED=(TCB,IEAVTRTC(RTCCNCL))
*                       RESPECIFY                                  0424
*                        (GPR11P,                                  0424
*                         GPR12P,                                  0424
*                         GPR13P,                                  0424
*                         GPR14P) UNRESTRICTED;/* RELEASE REGS USED
*                                      BY SETLOCK                    */
*                     END;          /* SETLOCK RELEASE TYPE(LOCAL)REL
*                                      ATED(TCB,IEAVTRTC(RTCCNCL))   */
*                     ESAGLREC=OFF; /*                       @YM00132*/
         NI    ESAGLREC+96(R5),B'11101111'                         0426
*                   END;            /*                       @YM00132*/
*               ELSE                                               0428
*                 ;                 /* EXIT HAS BEEN REQUESTED       */
@RF00350 DS    0H                                                  0429
*             END;                  /* END OF RTCCNCL                */
*           ELSE                                                   0430
*             ;                     /* CONTINUE NO RETRY PROCESSING  */
@RF00304 DS    0H                                                  0431
*           IF RTM2FLX=NONE&ESAPGNLY=OFF THEN/* IF AN EXIT WAS NOT 0431
*                                      REQUESTED AND ENTRY WAS NOT 0431
*                                      FOR PURGE ONLY DO INITIAL   0431
*                                      PURGES.                       */
*                                                                  0431
@RC00304 CLC   RTM2FLX(2,R8),@CB00069                              0431
         BNE   @RF00431                                            0431
         TM    ESAPGNLY+96(R5),B'00100000'                         0431
         BNZ   @RF00431                                            0431
*             /*******************************************************/
*             /*                                                     */
*             /* SEGMENT RTCNORTY CONTROLS INITIAL PURGES REQUIRED   */
*             /* PRIOR TO DUMP PROCESSING IF RETRY WAS NOT REQUESTED.*/
*             /* IT CALLS RTCINPRG TO PURGE I/O, PAGING I/O AND      */
*             /* PARTIALLY LOADED PROGRAMS. IT THEN CALLS IEAVTPMT TO*/
*             /* WRITE THE TYPE 1 MESSAGES ASSOCIATED WITH THE       */
*             /* ABENDING TASK. ON ENTRY REGISTER 4 LOCATES THE TCB, */
*             /* REGISTER 5 LOCATES THE SVRB AND REGISTER 8 LOCATES  */
*             /* THE RTM2WA                                          */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0432
*             DO;                   /* BEGIN SEGMENT RTCNOTRY        */
*                                                                  0432
*               /*****************************************************/
*               /*                                                   */
*               /* PERFORM INITIAL PURGES                            */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0433
*               IF RTM2RECR='1'B&RTM2SCTR(RTM2IPCS)='1'B THEN/*    0433
*                                      RECURSION IN THIS SECTION     */
         TM    RTM2RECR(R8),B'10000000'                            0433
         BNO   @RF00433                                            0433
         TM    RTM2SCTR(R8),B'10000000'                            0433
         BNO   @RF00433                                            0433
*                 DO;                                              0434
*                   RTM2RCRX='1'B;  /* SET RECURSION EXIT FLAG       */
         OI    RTM2RCRX(R8),B'10000000'                            0435
*                   RTM2SCTX(RTM2IPCS)='1'B;/* SET SECTION FLAG FOR
*                                      EXIT                          */
         OI    RTM2SCTX(R8),B'10000000'                            0436
*                 END;                                             0437
*               ELSE                /* NO RECURSION IN THIS SECTION  */
*                 DO;                                              0438
         B     @RC00433                                            0438
@RF00433 DS    0H                                                  0439
*                   RTM2SCTC(RTM2IPCS)='1'B;/* SET CURRENT SECTION 0439
*                                      FLAG                          */
         OI    RTM2SCTC(R8),B'10000000'                            0439
*                   GEN REFS(R8) SETS(RTM2SFSA)                    0440
*                       (STM R14,R12,RTM2SFSA+12(R8));/* SAVE      0440
*                                      REGISTERS                     */
         STM R14,R12,RTM2SFSA+12(R8)
*                   RTM2SKRA=ADDR(RCR0022);/* SET UP RECURSION     0441
*                                      ADDRESS TEST FOR RECURSION IN
*                                      THIS PHASE                    */
*                                                                  0441
         LA    @12,RCR0022                                         0441
         ST    @12,RTM2SKRA(,R8)                                   0441
*                   /*************************************************/
*                   /*                                               */
*                   /* SET UP RESOURCE MANAGER PARAMETERS            */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0442
*                   RMPLTCBA=R4;    /* PUT CURRENT TCB ADDR IN RMPL  */
         ST    R4,RMPLTCBA+712(,R8)                                0442
*                   R13=ADDR(RTM2SFSA);/* PUT SAVE AREA ADDR IN REG
*                                      13                            */
         LA    R13,RTM2SFSA(,R8)                                   0443
*                   CALL RTCINPRG;  /* REQUEST INITIAL PURGES        */
         BAL   @14,RTCINPRG                                        0444
*                   RTM2SKRA=0;     /* CLEAR RECURSION ADDRESS       */
         SLR   @12,@12                                             0445
         ST    @12,RTM2SKRA(,R8)                                   0445
*                   RTM2SCTC(RTM2IPCS)='0'B;/* CLEAR SECTION FLAG    */
         NI    RTM2SCTC(R8),B'01111111'                            0446
*                 END;                                             0447
*RCR0022:                           /* CLEAR RECURSION INDICATORS    */
*               IF RTM2FLX=NONE THEN/* CONTINUE PROCESSING IF EXIT 0448
*                                      NOT REQUESTED                 */
@RC00433 DS    0H                                                  0448
RCR0022  CLC   RTM2FLX(2,R8),@CB00069                              0448
         BNE   @RF00448                                            0448
*                 DO;                                              0449
*                                                                  0449
*                   /*************************************************/
*                   /*                                               */
*                   /* WRITE TYPE 1 MESSAGES                         */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0450
*                   IF RTM2RECR='1'B&RTM2SCTR(RTM2T1MS)='1'B THEN/*
*                                      RECURSION IN THIS SECTION     */
         TM    RTM2RECR(R8),B'10000000'                            0450
         BNO   @RF00450                                            0450
         TM    RTM2SCTR(R8),B'01000000'                            0450
         BNO   @RF00450                                            0450
*                     DO;                                          0451
*                       RTM2RCRX='1'B;/* SET RECURSION EXIT FLAG     */
         OI    RTM2RCRX(R8),B'10000000'                            0452
*                       RTM2SCTX(RTM2T1MS)='1'B;/* SET SECTION FLAG
*                                      FOR EXIT                      */
         OI    RTM2SCTX(R8),B'01000000'                            0453
*                     END;                                         0454
*                   ELSE            /* NO RECURSION IN THIS SECTION  */
*                     DO;                                          0455
         B     @RC00450                                            0455
@RF00450 DS    0H                                                  0456
*                       RTM2SCTC(RTM2T1MS)='1'B;/* SET CURRENT     0456
*                                      SECTION FLAG                  */
         OI    RTM2SCTC(R8),B'01000000'                            0456
*                       GEN REFS(R8) SETS(RTM2SFSA)                0457
*                           (STM R14,R12,RTM2SFSA+12(R8));/* SAVE  0457
*                                      REGISTERS                     */
         STM R14,R12,RTM2SFSA+12(R8)
*                       RTM2SKRA=ADDR(RCR0024);/* SET UP RECURSION 0458
*                                      ADDRESS TEST FOR RECURSION IN
*                                      THIS PHASE                    */
*                                                                  0458
         LA    @12,RCR0024                                         0458
         ST    @12,RTM2SKRA(,R8)                                   0458
*                       /*********************************************/
*                       /*                                           */
*                       /* SET UP RESOURCE MANAGER PARAMETERS        */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0459
*                       RMPLWT1M=ON;/* INDICATE TO WRITE TYPE 1    0459
*                                      MESSAGES                      */
         LA    @12,712                                             0459
         ALR   @12,R8                                              0459
         OI    RMPLWT1M(@12),B'00000010'                           0459
*                       RMPLTCBA=R4;/* INDICATE CURRENT TCB          */
         ST    R4,RMPLTCBA(,@12)                                   0460
*                       IF RMPLTCBA->TCBJSTCA=RMPLTCBA THEN/* JOBSTEP
*                                      TCB                           */
         L     @09,RMPLTCBA+712(,R8)                               0461
         L     @07,TCBJSTCA-1(,@09)                                0461
         LA    @07,0(,@07)                                         0461
         CR    @09,@07                                             0461
         BNE   @RF00461                                            0461
*                         RMPLJST=ON;/* INDICATE JOBSTEP             */
         OI    RMPLJST(@12),B'00000100'                            0462
*                       ELSE                                       0463
*                         RMPLJST=OFF;/* INDICATE NOT JOBSTEP        */
         B     @RC00461                                            0463
@RF00461 NI    RMPLJST+712(R8),B'11111011'                         0463
*                       RESPECIFY                                  0464
*                        (R1) RESTRICTED;                          0464
@RC00461 DS    0H                                                  0465
*                       R1=ADDR(RTM2RMPS);/* ADDR OF RMPL IN REG 1   */
         LA    R1,RTM2RMPS(,R8)                                    0465
*                       R13=ADDR(RTM2RMSA);/* SAVE AREA ADDR IN REG
*                                      13                            */
         LA    R13,RTM2RMSA(,R8)                                   0466
*                       CALL IEAVTPMT;/* REQUEST TYPE 1 MESSAGES BE
*                                      WRITTEN                       */
         L     @15,@CV00100                                        0467
         BALR  @14,@15                                             0467
*                       RESPECIFY                                  0468
*                        (R1) UNRESTRICTED;                        0468
*                       RTM2SKRA=0; /* CLEAR RECURSION ADDRESS       */
         SLR   @12,@12                                             0469
         ST    @12,RTM2SKRA(,R8)                                   0469
*                       RTM2SCTC(RTM2T1MS)='0'B;/* CLEAR SECTION FLAG*/
         NI    RTM2SCTC(R8),B'10111111'                            0470
*                     END;                                         0471
*RCR0024:                           /* CLEAR RECURSION INDICATORS    */
*                   RMPLWT1M=OFF;   /* RESET WRITE INDICATOR         */
@RC00450 DS    0H                                                  0472
RCR0024  NI    RMPLWT1M+712(R8),B'11111101'                        0472
*                 END;              /* END TYPE 1 MESSAGE PROCESSING */
*               ELSE                                               0474
*                 ;                 /* BYPASS PROCESSING IF EXIT   0474
*                                      REQUESTED                     */
@RF00448 DS    0H                                                  0475
*             END;                  /* END SEGMENT RTCNORTY          */
*           ELSE                                                   0476
*             ;                     /* BYPASS ALL PROCESSING IF EXIT
*                                      REQUESTED OR PURGE ONLY       */
@RF00431 DS    0H                                                  0477
*         END;                      /* END NO RETRY, NO RECURSION  0477
*                                      PROCESSING                    */
*       ELSE                                                       0478
*         ;                         /* RETRY OR EXIT REQUESTED       */
@RF00302 DS    0H                                                  0479
*     END;                                                         0479
*   ELSE                                                           0480
*     ;                             /* BYPASS ALL PROCESSING IF EXIT
*                                      REQUESTED                     */
@RF00083 DS    0H                                                  0481
*   IF RTM2FLX=NONE THEN            /* IF EXIT NOT REQUESTED TEST FOR
*                                      DUMP REQUEST                  */
*                                                                  0481
         CLC   RTM2FLX(2,R8),@CB00069                              0481
         BNE   @RF00481                                            0481
*     /***************************************************************/
*     /*                                                             */
*     /* SEGMENT RTCADINT DETERMINES WHETHER DUMP PROCESSING IS      */
*     /* APPLICABLE, AND IF SO, DETERMINES THE SCOPE OF THE DUMP. IT */
*     /* INCLUDES SEGMENT RTCADINF TO ESTABLISH LINKAGE TO THE ABDUMP*/
*     /* ROUTINE. IT ALSO HANDLES THE RECURSION CONTROL FOR THE DUMP */
*     /* PHASE. IF IT IS A RECURSIVE ENTRY TO THIS SECTION AND IT IS */
*     /* NOT DUE TO A CANCEL OF DUMP AND A RETRY WAS NOT REQUESTED TO*/
*     /* WITHIN THE DUMP PHASE THEN THE RECURSION EXIT FLAGS ARE SET.*/
*     /* IF IT WAS A CANCEL OF DUMP THEN THE TCBPDUMP FLAG IS SET AND*/
*     /* NO FURTHER DUMPS WILL BE TAKEN FOR THIS JOBSTEP. IF IT WAS A*/
*     /* RETRY TO WITHIN THE DUMP PHASE THEN THE NEW REQUEST FOR DUMP*/
*     /* IS BYPASSED. ON ENTRY REGISTER 4 LOCATES THE TCB, REGISTER 5*/
*     /* LOCATES THE SVRB AND REGISTER 8 LOCATES THE RTM2WA          */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0482
*     DO;                           /* BEGIN SEGMENT RT2ADINT        */
*       IF RTM2SCTR(RTM2DPS)=OFF THEN/* THIS IS NOT A RECURSIVE ENTRY
*                                      TO THIS SEGMENT               */
         TM    RTM2SCTR+1(R8),B'00001000'                          0483
         BNZ   @RF00483                                            0483
*         IF RTM2DREQ=ON&ESACTS=OFF&ESAPGNLY=OFF&TCBJSTCB->TCBPDUMP=OFF
*           THEN                    /* DUMP REQUESTED AND ALLOWED. DO
*                                      DUMP PROCESSING       @YM04486*/
         TM    RTM2DREQ(R8),B'10000000'                            0484
         BNO   @RF00484                                            0484
         TM    ESACTS+96(R5),B'00110000'                           0484
         BNZ   @RF00484                                            0484
         L     @12,TCBJSTCB(,R4)                                   0484
         TM    TCBPDUMP(@12),B'00001000'                           0484
         BNZ   @RF00484                                            0484
*           DO;                                                    0485
*             RTM2SCTC(RTM2DPS)=ON; /* SET CURRENT SECTION FLAG FOR
*                                      RECURSION CONTROL             */
         OI    RTM2SCTC+1(R8),B'00001000'                          0486
*             GENERATE REFS(RTM2SFSA,R8);                          0487
          STM   14,12,RTM2SFSA+12(R8) - SAVE REGISTERS
*             RTM2SKRA=ADDR(RTCADRCR);/* SET RECURSION ADDRESS       */
         LA    @12,RTCADRCR                                        0488
         ST    @12,RTM2SKRA(,R8)                                   0488
*             RTM2DPLA=ADDR(SNPPARMS);/* SET POINTER TO SNAP       0489
*                                      PARAMETER LIST        @YM01516*/
*                                                                  0489
         LA    @12,256                                             0489
         ALR   @12,R8                                              0489
         ST    @12,RTM2DPLA(,R8)                                   0489
*             /*******************************************************/
*             /*                                                     */
*             /* RESET FLAGS IN STORAGE LIST IF NECESSARY            */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0490
*             IF RTM2WRAP=ON THEN   /* RANGES HAVE WRAPPED AROUND    */
         TM    RTM2WRAP(R8),B'00010000'                            0490
         BNO   @RF00490                                            0490
*               DO;                                                0491
*                 RESPECIFY                                        0492
*                   R9 RESTRICTED;                                 0492
*                 DO R9=1 TO RGENO WHILE(STORBTO(R9)=OFF);/* LOOP TO
*                                      FIND RANGE WITH END INDICATOR */
         LA    R9,1                                                0493
@DL00493 LR    @12,R9                                              0493
         SLA   @12,3                                               0493
         ALR   @12,R8                                              0493
         TM    STORBTO+268(@12),B'10000000'                        0493
         BNZ   @DC00493                                            0493
*                 END;                                             0494
         AL    R9,@CF00071                                         0494
         C     R9,@CF00102                                         0494
         BNH   @DL00493                                            0494
@DC00493 DS    0H                                                  0495
*                 STORBTO(R9)=OFF;  /* TURN OFF END INDICATOR        */
         LR    @12,R9                                              0495
         SLA   @12,3                                               0495
         LA    @07,276                                             0495
         ALR   @07,R8                                              0495
         ALR   @12,@07                                             0495
         AL    @12,@CF02720                                        0495
         NI    STORBTO-4(@12),B'01111111'                          0495
*                 STORBTO(RGENO)=ON;/* PUT END INDICATOR IN LAST     */
         OI    STORBTO+24(@07),B'10000000'                         0496
*               END;                                               0497
*             ELSE                                                 0498
*               ;                   /* LESS THAN FOUR RANGES       0498
*                                      SPECIFIED                     */
*                                                                  0498
@RF00490 DS    0H                                                  0499
*             /*******************************************************/
*             /*                                                     */
*             /* DETERMINE SCOPE OF DUMP. IF RETRY IS REQUESTED ONLY */
*             /* THE CURRENT TCB IS DUMPED. OTHERWISE THE ABENDING   */
*             /* TREE IS DUMPED UNLESS IT CONTAINS MULTIPLE JOBSTEPS */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0499
*             IF RTM2RETR=ON THEN   /* RETRY WITH DUMP REQUESTED     */
         TM    RTM2RETR(R8),B'01000000'                            0499
         BNO   @RF00499                                            0499
*               DO;                                                0500
*                 RTM2DMP1=ON;      /* INDICATE DUMP ONLY ONE TASK   */
         OI    RTM2DMP1(R8),B'10000000'                            0501
*                 SNPTCBA=R4;       /* INDICATE CURRENT TCB          */
         ST    R4,SNPTCBA+256(,R8)                                 0502
*               END;                                               0503
*             ELSE                                                 0504
*               SNPTCBA=R4;         /* INDICATE CURRENT TCB AS FIRST
*                                      TO BE DUMPED                  */
         B     @RC00499                                            0504
@RF00499 ST    R4,SNPTCBA+256(,R8)                                 0504
*             RESPECIFY                                            0505
*               TCB BASED(SNPTCBA);                                0505
@RC00499 DS    0H                                                  0506
*             IF TCBLTC^=0 THEN     /* DAUGHTER PRESENT              */
         L     @12,SNPTCBA+256(,R8)                                0506
         L     @07,TCBLTC(,@12)                                    0506
         LTR   @07,@07                                             0506
         BZ    @RF00506                                            0506
*               IF TCBJSTCA^=TCBLTC->TCBJSTCA THEN/* IMMEDIATE     0507
*                                      DAUGHTER IS A SEPARATE JOBSTEP
*                                      TASK                          */
         CLC   TCBJSTCA(3,@12),TCBJSTCA(@07)                       0507
         BE    @RF00507                                            0507
*                 RTM2DMP1=ON;      /* INDICATE DUMP ONLY ONE TASK AS
*                                      SNAP CANNOT DUMP TASKS IN   0508
*                                      JOBSTEP OTHER THAN THE CURRENT*/
         OI    RTM2DMP1(R8),B'10000000'                            0508
*               ELSE                                               0509
*                 ;                 /* THE ABENDING TREE IS A SINGLE
*                                      JOBSTEP TREE                  */
@RF00507 DS    0H                                                  0510
*             ELSE                                                 0510
*               ;                   /* NO SUBTASKS                   */
@RF00506 DS    0H                                                  0511
*             RESPECIFY                                            0511
*               TCB BASED(R4);                                     0511
*             RTM2DTCB=SNPTCBA;     /* SAVE TOP TASK TO BE DUMPED    */
*                                                                  0512
         L     @12,SNPTCBA+256(,R8)                                0512
         ST    @12,RTM2DTCB(,R8)                                   0512
*             /*******************************************************/
*             /*                                                     */
*             /* SEGMENT RTCADINF SETS UP THE INTERFACE TO ABDUMP AND*/
*             /* INVOKES IT. ASYNCHRONOUS EXITS AND PERCOLATION OF   */
*             /* ASYNCHRONOUS ERRORS IS AGAIN ALLOWED. THE INTERFACE */
*             /* REGISTERS ARE SET UP AND ABDUMP IS INVOKED. WHEN    */
*             /* CONTROL IS RETURNED, ASYNCHRONOUS EXITS AND         */
*             /* PERCOLATION OF ASYNCHRONOUS ERRORS ARE AGAIN        */
*             /* SUPPRESSED. THE DUMP-SUPPRESSION FLAG IS TURNED OFF */
*             /* FOR EACH TASK THAT WAS DUMPED. IF MORE THAN ONE TASK*/
*             /* WAS DUMPED, THE TCB TREE IS SCANNED USING IEATRSCN, */
*             /* AND TCBFS IS TURNED OFF IN EACH TASK FOUND          */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0513
*             DO;                                                  0513
*                                                                  0513
*               /*****************************************************/
*               /*                                                   */
*               /* ESTABLISH ABDUMP INTERFACE                        */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0514
*               TCBFPRAP=OFF;       /* PERMIT PERCOLATION OF       0514
*                                      ASYNCHRONOUS ABENDS TO TASK   */
         NI    TCBFPRAP(R4),B'11101111'                            0514
*               RESPECIFY                                          0515
*                (R1) RESTRICTED;   /* RESTRICT REGS USED IN ABDUMP
*                                      INTERFACE                     */
*               R1=ADDR(RTM2WA);    /* PUT ADDR OF RTM2WA IN REG 1   */
         LR    R1,R8                                               0516
*               R13=ADDR(RTM2SFSA); /* PUT ADDR OF REG SAVE AREA IN
*                                      REG 13                        */
         LA    R13,RTM2SFSA(,R8)                                   0517
*               CALL IEAVTABD;                                     0518
         L     @15,@CV00098                                        0518
         BALR  @14,@15                                             0518
*               RESPECIFY                                          0519
*                (R1) UNRESTRICTED;                                0519
*                                                                  0519
*               /*****************************************************/
*               /*                                                   */
*               /* CLEAR DUMP OPTIONS                        @YM03570*/
*               /*                                                   */
*               /*****************************************************/
*                                                                  0520
*               RTM2DREQ=OFF;       /*                       @YM03570*/
         NI    RTM2DREQ(R8),B'01111111'                            0520
*               SNPSLIST=OFF;       /*                       @YM03570*/
         LA    @12,256                                             0521
         ALR   @12,R8                                              0521
         NI    SNPSLIST(@12),B'11111101'                           0521
*               SNPSDATA=''B;       /*                       @YM03570*/
         XC    SNPSDATA(2,@12),SNPSDATA(@12)                       0522
*               SNPPDATA=''B;       /*                       @YM03570*/
         MVI   SNPPDATA(@12),X'00'                                 0523
*               RTM2DPSL=''B;       /*                       @YM03570*/
         XC    RTM2DPSL(32,R8),RTM2DPSL(R8)                        0524
*               RTM2WRAP=OFF;       /*                       @YM03570*/
         NI    RTM2WRAP(R8),B'11101111'                            0525
*             END;                  /* END SEGMENT RTCADINF          */
*                                                                  0526
*             /*******************************************************/
*             /*                                                     */
*             /* CLEAR RECURSION FIELDS                              */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0527
*             RTM2SKRA=0;           /* CLEAR RECURSION ADDRESS       */
         SLR   @12,@12                                             0527
         ST    @12,RTM2SKRA(,R8)                                   0527
*             RTM2SCTC(RTM2DPS)=OFF;/* CLEAR DUMP SECTION FLAG       */
         NI    RTM2SCTC+1(R8),B'11110111'                          0528
*RTCADRCR:                                                         0529
*             ;                                                    0529
*                                                                  0529
RTCADRCR DS    0H                                                  0530
*             /*******************************************************/
*             /*                                                     */
*             /* ENSURE TCB FLAGS ARE SET IF SKIP RECURSION ADDRESS  */
*             /* USED                                                */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0530
*             TCBFX=ON;             /* PREVENT ASYNCHRONOUS EXITS    */
         OI    TCBFX(R4),B'00000001'                               0530
*             TCBFPRAP=ON;          /* PREVENT PERCOLATION OF      0531
*                                      ASYNCHRONOUS ABENDS           */
         OI    TCBFPRAP(R4),B'00010000'                            0531
*           END;                                                   0532
*         ELSE                                                     0533
*           ;                       /* DUMP NOT REQUESTED    @YM04486*/
@RF00484 DS    0H                                                  0534
*       ELSE                        /* THIS IS A RECURSIVE ENTRY TO
*                                      THIS SECTION                  */
*         DO;                                                      0534
         B     @RC00483                                            0534
@RF00483 DS    0H                                                  0535
*           IF RTM2CNCL=OFF&RTM2RETR=OFF THEN/* ENTRY NOT DUE TO   0535
*                                      CANCEL AND RETRY NOT REQUESTED*/
         TM    RTM2CNCL(R8),B'01000000'                            0535
         BNZ   @RF00535                                            0535
         TM    RTM2RETR(R8),B'01000000'                            0535
         BNZ   @RF00535                                            0535
*             DO;                                                  0536
*               RTM2RCRX=ON;        /* SET RECURSION EXIT FLAG       */
         OI    RTM2RCRX(R8),B'10000000'                            0537
*               RTM2SCTX(RTM2DPS)=ON;/* SET SECTION FLAG FOR EXIT    */
         OI    RTM2SCTX+1(R8),B'00001000'                          0538
*             END;                                                 0539
*           ELSE                    /* ENTRY FOR CANCEL OR RETRY   0540
*                                      REQUESTED                     */
*             IF RTM2CNCL=ON THEN   /* CANCEL OCCURRED               */
         B     @RC00535                                            0540
@RF00535 TM    RTM2CNCL(R8),B'01000000'                            0540
         BNO   @RF00540                                            0540
*               IF RTM2PREV->RTM2SCTC(RTM2DPS)=ON THEN/* DUMP WAS IN
*                                      CONTROL AT TIME OF CANCEL     */
         L     @12,RTM2PREV(,R8)                                   0541
         TM    RTM2SCTC+1(@12),B'00001000'                         0541
         BNO   @RF00541                                            0541
*                 TCBPDUMP=ON;      /* PREVENT FUTURE DUMPS          */
         OI    TCBPDUMP(R4),B'00001000'                            0542
*               ELSE                /* DUMP NOT IN CONTROL AT TIME OF
*                                      CANCEL                        */
*                 DO;                                              0543
         B     @RC00541                                            0543
@RF00541 DS    0H                                                  0544
*                   RTM2RCRX=ON;    /* REQUEST RECURSION EXIT        */
         OI    RTM2RCRX(R8),B'10000000'                            0544
*                   RTM2SCTX(RTM2DPS)=ON;/* SET SECTION FLAG         */
         OI    RTM2SCTX+1(R8),B'00001000'                          0545
*                 END;                                             0546
*             ELSE                  /* RETRY REQUESTED               */
*               DO;                                                0547
*                                                                  0547
         B     @RC00540                                            0547
@RF00540 DS    0H                                                  0548
*                 /***************************************************/
*                 /*                                                 */
*                 /* DETERMINE IF THE RB WHICH IS RETRYING IS PART OF*/
*                 /* THE DUMP PROCESS OR NOT. IF IT IS PART OF THE   */
*                 /* DUMP PROCESS THEN THE DUMP IS SKIPPED AND THE   */
*                 /* RETRY SHOULD COMPLETE THE PREVIOUS DUMP. IF IT  */
*                 /* IS OUTSIDE THE DUMP PROCESS THE RECURSION EXIT  */
*                 /* IS TAKEN SO THAT DUMP CAN RELEASE ITS RESOURCES.*/
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0548
*                 DO;                                              0548
*                   RESPECIFY                                      0549
*                     R11 RESTRICTED;                              0549
*                   R11=RTM2RYRB;   /* LOCATE STARTING RB            */
*                                                                  0550
         L     R11,RTM2RYRB(,R8)                                   0550
*                   /*************************************************/
*                   /*                                               */
*                   /* SCAN FOR RB WITH RBABEND ON. SCAN TERMINATED  */
*                   /* WHEN RBTCBNXT ON                              */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0551
*                   DO WHILE(EVAL(R11-LENGTH(RBPRFX))->RBABEND='0'B&R11
*                         ->RBTCBNXT='0'B);                        0551
         B     @DE00551                                            0551
@DL00551 DS    0H                                                  0552
*                     R11=R11->RBLINKB;/* LOCATE NEXT RB             */
         L     @12,RBLINKB-1(,R11)                                 0552
         LA    @12,0(,@12)                                         0552
         LR    R11,@12                                             0552
*                   END;            /* END SCAN OF RBS               */
@DE00551 LR    @12,R11                                             0553
         SL    @12,@CF00470                                        0553
         TM    RBABEND(@12),B'00100000'                            0553
         BNZ   @DC00551                                            0553
         TM    RBTCBNXT(R11),B'10000000'                           0553
         BZ    @DL00551                                            0553
@DC00551 DS    0H                                                  0554
*                   IF EVAL(R11-LENGTH(RBPRFX))->RBABEND='0'B THEN/*
*                                      CHECK WHETHER ONE WAS FOUND   */
         LR    @12,R11                                             0554
         SL    @12,@CF00470                                        0554
         TM    RBABEND(@12),B'00100000'                            0554
         BNZ   @RF00554                                            0554
*                     R11=0;        /* NO RTM2 RB FOUND              */
         SLR   R11,R11                                             0555
*                 END;              /* DETERMINE IF RETRY RB IS    0556
*                                      PRECEDED BY RTM2SVRB          */
@RF00554 DS    0H                                                  0557
*                 IF R11=0×(ADDR(R11->RBEXSAVE)->ESART2WA->RTM2SCTR(
*                     RTM2DPS)=OFF&ADDR(R11->RBEXSAVE)->ESART2WA-> 0557
*                     RTM2SCTC(RTM2DPS)=OFF) THEN/* RETRY NOT WITHIN
*                                      DUMP PROCESS          @YM04486*/
         LTR   R11,R11                                             0557
         BZ    @RT00557                                            0557
         L     @12,ESART2WA+96(,R11)                               0557
         TM    RTM2SCTR+1(@12),B'00001000'                         0557
         BNZ   @RF00557                                            0557
         TM    RTM2SCTC+1(@12),B'00001000'                         0557
         BNZ   @RF00557                                            0557
@RT00557 DS    0H                                                  0558
*                   DO;                                            0558
*                     RTM2RCRX=ON;  /* SET EXIT FLAG                 */
         OI    RTM2RCRX(R8),B'10000000'                            0559
*                     RTM2SCTX(RTM2DPS)=ON;/* SET SECTION FLAG FOR 0560
*                                      EXIT                          */
         OI    RTM2SCTX+1(R8),B'00001000'                          0560
*                   END;                                           0561
*                 ELSE                                             0562
*                   ;               /* RETRY WITHIN DUMP PROCESS     */
@RF00557 DS    0H                                                  0563
*                 RESPECIFY                                        0563
*                   R11 UNRESTRICTED;/* RELEASE RBREG                */
*               END;                                               0564
*         END;                                                     0565
*     END;                          /* END SEGMENT RTCADINT          */
*   ELSE                                                           0567
*     ;                             /* BYPASS ALL PROCESSING IF EXIT
*                                      REQUESTED                     */
@RF00481 DS    0H                                                  0568
*   IF RTM2FLX=NONE THEN            /* CONTINUE PROCESSING UNLESS  0568
*                                      EXIT REQUESTED                */
*                                                                  0568
@RC00481 CLC   RTM2FLX(2,R8),@CB00069                              0568
         BNE   @RF00568                                            0568
*     /***************************************************************/
*     /*                                                             */
*     /* SEGMENT RTCAOR DETERMINES WHETHER RETRY WAS REQUESTED AND IS*/
*     /* PERMITTED. IF THE TASK IS ALREADY IN ABEND (TCBFA IS ON)    */
*     /* THEN RETRY IS PERMITTED AS ONLY THOSE EXITS ESTABLISHED     */
*     /* SINCE ABEND PROCESSING WAS INITIATED ARE ENTERED. OTHERWISE,*/
*     /* IF A MOTHER TASK IS IN ABEND (TCBFMW IS ON) RETRY IS NOT    */
*     /* PERMITTED. THIS TASK MUST ENTER ABEND PROCESSING. IF A      */
*     /* DAUGHTER TASK IS WAITING TO CONVERT ITS ABEND TO STEP       */
*     /* (TCBFDW IS ON) THEN RETRY IS BYPASSED AND THE DAUGHTER      */
*     /* WAITING EXIT FLAG IS SET. IF NONE OF THESE CONDITIONS EXIST */
*     /* AND RETRY IS REQUESTED THE RETRY EXIT FLAG IS SET. IF NO    */
*     /* EXITS FLAGS ARE ON THEN SEGMENT RTCABCTL IS ENTERED TO      */
*     /* PERFORM ABEND PROCESSING.                                   */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0569
*     DO;                           /* BEGIN SEGMENT RTCAOR          */
*       IF RTM2RETR=ON THEN         /* RETRY REQUESTED       @G33SPHW*/
         TM    RTM2RETR(R8),B'01000000'                            0570
         BNO   @RF00570                                            0570
*         DO;                       /* MUST SETUP RBS        @G33SPHW*/
*           IF RTM2RECR=ON&RTM2SCTR(RTM2SRBS)=ON THEN/* RECURSION IN
*                                      THIS SECTION          @G33SPHW*/
         TM    RTM2RECR(R8),B'10000000'                            0572
         BNO   @RF00572                                            0572
         TM    RTM2SCTR+1(R8),B'00000010'                          0572
         BNO   @RF00572                                            0572
*             DO;                   /*                       @G33SPHW*/
*               RTM2RCRX=ON;        /* SET RECURSION EXIT FLAG     0574
*                                                            @G33SPHW*/
         OI    RTM2RCRX(R8),B'10000000'                            0574
*               RTM2SCTX(RTM2SRBS)=ON;/* SET SECTION FLAG FOR EXIT 0575
*                                                            @G33SPHW*/
         OI    RTM2SCTX+1(R8),B'00000010'                          0575
*             END;                  /*                       @G33SPHW*/
*           ELSE                    /* NO RECURSION IN THIS SECTION
*                                                            @G33SPHW*/
*             DO;                   /*                       @G33SPHW*/
         B     @RC00572                                            0577
@RF00572 DS    0H                                                  0578
*               RTM2SCTC(RTM2SRBS)=ON;/* SET CURRENT SECTION @G33SPHW*/
         OI    RTM2SCTC+1(R8),B'00000010'                          0578
*               GEN REFS(R8) SETS(RTM2SFSA)                        0579
*                   (STM R14,R12,RTM2SFSA+12(R8));/* SAVE REGISTERS
*                                                            @G33SPHW*/
         STM R14,R12,RTM2SFSA+12(R8)
*               RTM2SKRA=ADDR(NORETR);/* SETUP RECURSION ADDR      0580
*                                                            @G33SPHW*/
         LA    @12,NORETR                                          0580
         ST    @12,RTM2SKRA(,R8)                                   0580
*               RFY                                                0581
*                 R1 RSTD;          /* PARM REGISTER         @G33SPHW*/
*               R1=ADDR(RTM2WA);    /* PASS WORKAREA ADDRESS @G33SPHW*/
         LR    R1,R8                                               0582
*               R13=ADDR(RTM2SFSA); /* SAVEAREA POINTER      @G33SPHW*/
         LA    R13,RTM2SFSA(,R8)                                   0583
*               CALL IEAVTAS1;      /* INVOKE ASIR TO SETUP RETRY  0584
*                                                            @G33SPHW*/
         L     @15,@CV00099                                        0584
         BALR  @14,@15                                             0584
*               RFY                                                0585
*                 R1 UNRSTD;        /* FREE PARM REG         @G33SPHW*/
*               RTM2SKRA=0;         /* CLEAR RECURSION ADDR  @G33SPHW*/
         SLR   @12,@12                                             0586
         ST    @12,RTM2SKRA(,R8)                                   0586
*               RTM2SCTC(RTM2SRBS)='0'B;/* CLEAR SECTION FLAG      0587
*                                                            @G33SPHW*/
         NI    RTM2SCTC+1(R8),B'11111101'                          0587
*             END;                  /*                       @G33SPHW*/
*         END;                      /* END SETUP OF RBS      @G33SPHW*/
*       ELSE                        /*                       @G33SPHW*/
*NORETR:                            /* RECURSION LABEL USED WHEN   0590
*                                      UNABLE TO SETUP RBS FOR RETRY.
*                                                            @G33SPHW*/
*         RTM2RETR=OFF;             /* CLEAR RETRY FLAG TO PREVENT 0590
*                                      CONFUSION IN SUBSEQUENT     0590
*                                      SECTIONS (NEEDED ONLY ON    0590
*                                      RECURSION).           @G33SPHW*/
         B     @RC00570                                            0590
@RF00570 DS    0H                                                  0590
NORETR   NI    RTM2RETR(R8),B'10111111'                            0590
*       IF RTM2FLX=NONE THEN        /* NO EXIT REQUESTED YET @G33SPHW*/
@RC00570 CLC   RTM2FLX(2,R8),@CB00069                              0591
         BNE   @RF00591                                            0591
*         DO;                       /* CHECK IF RETRY ALLOWED      0592
*                                                            @G33SPHW*/
*           IF TCBFA=OFF THEN       /* NOT ALREADY IN ABEND          */
         TM    TCBFA(R4),B'10000000'                               0593
         BNZ   @RF00593                                            0593
*             DO;                                                  0594
*               ESAGLREC=ON;        /* SET RECURSION FLAG FOR GETLOCK*/
         OI    ESAGLREC+96(R5),B'00010000'                         0595
*               DO;                 /* SETLOCK OBTAIN TYPE(LOCAL)MODE
*                                      (UNCOND)RELATED(TCB,IEAVTRTC(R
*                                      TCABCTL),IEAVTRTE(RTECMEX))   */
*                 RESPECIFY                                        0597
*                  (GPR11P,                                        0597
*                   GPR12P,                                        0597
*                   GPR13P,                                        0597
*                   GPR14P) RESTRICTED;/* RESTRICT REGS USED BY    0597
*                                      SETLOCK                       */
*                 GENERATE REFS(PSALITA,FLC) SETS(GPR11P,GPR12P,GPR13P,
*                     GPR14P);                                     0598
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                        C
               RELATED=(TCB,IEAVTRTC(RTCABCTL),IEAVTRTE(RTECMEX))
*                 RESPECIFY                                        0599
*                  (GPR11P,                                        0599
*                   GPR12P,                                        0599
*                   GPR13P,                                        0599
*                   GPR14P) UNRESTRICTED;/* RELEASE REGS USED BY   0599
*                                      SETLOCK                       */
*               END;                /* SETLOCK OBTAIN TYPE(LOCAL)MODE
*                                      (UNCOND)RELATED(TCB,IEAVTRTC(R
*                                      TCABCTL),IEAVTRTE(RTECMEX)) 0600
*                                      OBTAIN LOCAL LOCK             */
*               ESAGLREC=OFF;       /* CLEAR RECURSION FLAG          */
         NI    ESAGLREC+96(R5),B'11101111'                         0601
*               IF TCBFMW=ON&       /* A MOTHER TASK IS WAITING TO 0602
*                                      ABEND THIS TASK       @ZA01940*/
*                   RTM2AS1R=OFF THEN/* AND AS1 NOT RECURSING      0602
*                                                            @ZA01940*/
         TM    TCBFMW(R4),B'01000000'                              0602
         BNO   @RF00602                                            0602
         TM    RTM2AS1R(R8),B'00000100'                            0602
         BNZ   @RF00602                                            0602
*                 RTM2RETR=OFF;     /* PROHIBIT RETRY                */
         NI    RTM2RETR(R8),B'10111111'                            0603
*               ELSE                /* NO MOTHER TASK HAS ENTERED  0604
*                                      ABEND                         */
*                 IF TCBFDW=ON&     /* A DAUGHTER TASK IS WAITING TO
*                                      ABEND THIS TASK       @ZA01940*/
*                     RTM2AS1R=OFF THEN/* AND AS1 NOT RECURSING    0604
*                                                            @ZA01940*/
         B     @RC00602                                            0604
@RF00602 TM    TCBFDW(R4),B'00100000'                              0604
         BNO   @RF00604                                            0604
         TM    RTM2AS1R(R8),B'00000100'                            0604
         BNZ   @RF00604                                            0604
*                   DO;                                            0605
*                     RTM2RETR=OFF; /* PROHIBIT RETRY                */
         NI    RTM2RETR(R8),B'10111111'                            0606
*                     RTM2DWX=ON;   /* TAKE DAUGHTER WAITING EXIT    */
         OI    RTM2DWX(R8),B'00010000'                             0607
*                   END;                                           0608
*                 ELSE                                             0609
*                   IF RTM2RETR=ON THEN/* RETRY HAS BEEN REQUESTED 0609
*                                      AND IS PERMITTED              */
         B     @RC00604                                            0609
@RF00604 TM    RTM2RETR(R8),B'01000000'                            0609
         BNO   @RF00609                                            0609
*                     RTM2RTRX=ON;  /* TAKE RETRY EXIT               */
         OI    RTM2RTRX(R8),B'00000001'                            0610
*             END;                                                 0611
*           ELSE                    /* TASK IS ALREADY IN ABEND. FMW
*                                      AND FDW CANNOT BE ON. RETRY IS
*                                      PERMITTED IF REQUESTED        */
*             IF RTM2RETR=ON THEN   /* RETRY REQUESTED               */
         B     @RC00593                                            0612
@RF00593 TM    RTM2RETR(R8),B'01000000'                            0612
         BNO   @RF00612                                            0612
*               RTM2RTRX=ON;        /* TAKE RETRY EXIT               */
         OI    RTM2RTRX(R8),B'00000001'                            0613
*             ELSE                                                 0614
*               ;                   /* RETRY NOT REQUESTED, CONTINUE
*                                      ABEND                         */
@RF00612 DS    0H                                                  0615
*         END;                      /* END NO RECUSION             0615
*                                      PROCESS@G33SPHW               */
@RC00593 DS    0H                                                  0616
*       IF RTM2FLX=NONE THEN        /* NO EXIT REQUESTED             */
*                                                                  0616
@RF00591 CLC   RTM2FLX(2,R8),@CB00069                              0616
         BNE   @RF00616                                            0616
*         /***********************************************************/
*         /*                                                         */
*         /* SEGMENT RTCABCTL CONTROLS THE ABEND PROCESSING FOR A    */
*         /* TASK OR TASK TREE. IT INDICATES THE TASK IS IN ABEND AND*/
*         /* SETS A FLAG INDICATING IT IS THE TOP TASK IN THE FAILING*/
*         /* TREE (TCBFT) UNLESS THIS ENTRY IS FOR PURGE ONLY. IT    */
*         /* THEN INCLUDES SEGMENT RTCTEINT TO INTERFACE WITH TERM   */
*         /* EXIT PROCESSING. AFTER TERM EXITS HAVE BEEN EXECUTED IT */
*         /* STACKS BEHIND OTHER TASKS IN RTM2 UNLESS THE REASON FOR */
*         /* ENTRY AT THIS TASK LEVEL HAS EVER BEEN AN EXPRESS ENTRY */
*         /* OR A PURGE-ONLY ENTRY. RTM2 DOES NOT STACK IF ENTRY HAS */
*         /* EVER BEEN EXPRESS BECAUSE THE SUBTASKS HAVE BEEN SET    */
*         /* NON-DISPATCHABLE AND WILL NOT COMPLETE. IT DOES NOT     */
*         /* STACK IF ENTRY WAS FOR PURGE ONLY BECAUSE ANY SUBTASKS  */
*         /* THAT EXIST WERE CREATED BY A TERM EXIT. WHEN ALL        */
*         /* SUBTASKS IN RTM2 HAVE COMPLETED IF STACKING WAS DONE    */
*         /* SEGMENT RTCCSUB IS INCLUDED TO DO INITIAL SUBTASK       */
*         /* PROCESSING. THIS PROCESSING IS NOT REPEATED IF IT WERE  */
*         /* DONE DUE TO AN EARLIER PATH THROUGH RTM2. AT COMPLETION */
*         /* OF THIS PROCESSING SEGMENT RTCTTINT IS INCLUDED TO      */
*         /* INTERFACE WITH TASK TERMINATION PURGES. AFTER THE       */
*         /* CURRENT TASK AND ALL ITS SUBTASKS HAVE BEEN PURGED      */
*         /* SEGMENT RTCCONV CONTINUES THE ABEND AT THE JOBSTEP LEVEL*/
*         /* IF STEP WAS REQUESTED ON THE ABEND MACRO OR THE TASK WAS*/
*         /* IN STEP-MUST-COMPLETE AT THE TIME IT SUFFERED THE ERROR */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0617
*         DO;                       /* BEGIN SEGMENT RTCABCTL        */
*           IF TCBFA=OFF THEN       /* TASK WAS NOT PREVIOUSLY IN  0618
*                                      ABEND PROCESSING              */
         TM    TCBFA(R4),B'10000000'                               0618
         BNZ   @RF00618                                            0618
*             DO;                                                  0619
*               TCBFA=ON;           /* INDICATE TASK IN ABEND      0620
*                                      PROCESSING                    */
         OI    TCBFA(R4),B'10000000'                               0620
*               TCBEOTFM=ON;        /* INDICATE END OF TASK TO     0621
*                                      FREEMAIN              @YM01942*/
         OI    TCBEOTFM(R4),B'10000000'                            0621
*               IF RTM2PURG=OFF THEN/* NO ENTRY FOR PURGE ONLY       */
         TM    RTM2PURG(R8),B'10000000'                            0622
         BNZ   @RF00622                                            0622
*                 TCBFT=ON;         /* INDICATE TOP TASK IN TREE     */
         OI    TCBFT(R4),B'00000100'                               0623
*               ESAGLREC=ON;        /* SET FLAG FOR GETLOCK RECURSION*/
@RF00622 OI    ESAGLREC+96(R5),B'00010000'                         0624
*               DO;                 /* SETLOCK RELEASE TYPE(LOCAL)REL
*                                      ATED(TCB,IEAVTRTC(RTCAOR))    */
*                 RESPECIFY                                        0626
*                  (GPR11P,                                        0626
*                   GPR12P,                                        0626
*                   GPR13P,                                        0626
*                   GPR14P) RESTRICTED;/* RESTRICT REGS USED BY    0626
*                                      SETLOCK                       */
*                 GENERATE REFS(PSALITA,FLC) SETS(GPR11P,GPR12P,GPR13P,
*                     GPR14P);                                     0627
         SETLOCK RELEASE,TYPE=LOCAL,                                   C
               RELATED=(TCB,IEAVTRTC(RTCAOR))
*                 RESPECIFY                                        0628
*                  (GPR11P,                                        0628
*                   GPR12P,                                        0628
*                   GPR13P,                                        0628
*                   GPR14P) UNRESTRICTED;/* RELEASE REGS USED BY   0628
*                                      SETLOCK                       */
*               END;                /* SETLOCK RELEASE TYPE(LOCAL)REL
*                                      ATED(TCB,IEAVTRTC(RTCAOR))  0629
*                                      RELEASE LOCAL LOCK ACQUIRED TO
*                                      SERIALIZE TCB FLAGS           */
*               ESAGLREC=OFF;       /* CLEAR RECURSION FLAG          */
         NI    ESAGLREC+96(R5),B'11101111'                         0630
*             END;                                                 0631
*           ELSE                    /* LOCK NOT ACQUIRED IF TCBFA  0632
*                                      ALREADY ON                    */
*             IF RTM2PURG=OFF THEN  /* NO ENTRY HAS BEEN FOR PURGE 0632
*                                      ONLY                          */
         B     @RC00618                                            0632
@RF00618 TM    RTM2PURG(R8),B'10000000'                            0632
         BNZ   @RF00632                                            0632
*               TCBFT=ON;           /* INDICATE THIS IS TOP TASK IN
*                                      FAILING TREE                  */
         OI    TCBFT(R4),B'00000100'                               0633
*             ELSE                                                 0634
*               ;                   /* IF PURGE ONLY,CURRENT IS NEVER
*                                      TOP TASK                      */
*                                                                  0634
@RF00632 DS    0H                                                  0635
*           /*********************************************************/
*           /*                                                       */
*           /* SEGMENT RTCTEINT INTERFACES WITH TASK RECOVERY TERM   */
*           /* EXIT PROCESSING. IT ESTABLISHES RECURSION CONTROL AND */
*           /* THEN, IF ANY EXITS EXIST IT ENSURES THAT THE FULL     */
*           /* RANGE OF EXITS WILL GET CONTROL. (EARLIER RECURSIONS  */
*           /* MAY HAVE CAUSED RTM2 TO PERMIT ONLY EXITS ESTABLISHED */
*           /* SINCE THE LAST ABEND TO GET CONTROL.) IT THEN SETS    */
*           /* FLAGS FOR TERM EXIT PROCESSING AND INVOKES TASK       */
*           /* RECOVERY. ON RETURN IT ENSURES THAT TCB FLAGS WHICH   */
*           /* MAY HAVE BEEN ALTERED BY THIS PROCESSING ARE PROPERLY */
*           /* SET                                                   */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0635
*           DO;                     /* BEGIN SEGMENT RTCTEINT        */
@RC00618 DS    0H                                                  0636
*             IF TCBSTABB^=0 THEN   /* (E)STA EXITS EXIST            */
         L     @12,TCBSTABB-1(,R4)                                 0636
         LA    @12,0(,@12)                                         0636
         LTR   @12,@12                                             0636
         BZ    @RF00636                                            0636
*               DO;                                                0637
*                                                                  0637
*                 /***************************************************/
*                 /*                                                 */
*                 /* PERMIT FULL RANGE OF TERM EXITS                 */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0638
*                 RTM2SCBO=0;                                      0638
         SLR   @12,@12                                             0638
         ST    @12,RTM2SCBO(,R8)                                   0638
*                 RTM2SCBC=SCBSTART;                               0639
         MVC   RTM2SCBC(4,R8),@CF00071                             0639
*                 TCBETERM=ON;      /* INDICATE IN TERM EXITS VIA TCB
*                                      FOR SVC 60                    */
         OI    TCBETERM(R4),B'10000000'                            0640
*                 RTM2CLUP=ON;      /* INDICATE EXITS MAY CLEAN UP 0641
*                                      ONLY                          */
         OI    RTM2CLUP(R8),B'10000000'                            0641
*                 RTM2TRME=ON;      /* INDICATE IN TERM EXIT       0642
*                                      PROCESSING                    */
         OI    RTM2TRME(R8),B'10000000'                            0642
*                 TCBFPRAP=OFF;     /* PERMIT ASYNCHRONOUS ABENDS TO
*                                      PERCOLATE TO THE TASK         */
         NI    TCBFPRAP(R4),B'11101111'                            0643
*                 IF RTM2RECR=ON&RTM2SCTR(RTM2TRS)=ON THEN/* TERM  0644
*                                      EXIT PROCESSING HAS RECURSED  */
         TM    RTM2RECR(R8),B'10000000'                            0644
         BNO   @RF00644                                            0644
         TM    RTM2SCTR+1(R8),B'00100000'                          0644
         BNO   @RF00644                                            0644
*                   DO;                                            0645
*                     RTM2RCRX=ON;  /* SET RECURSION EXIT FLAG       */
         OI    RTM2RCRX(R8),B'10000000'                            0646
*                     RTM2SCTX(RTM2TRS)=ON;/* SET SECTION FLAG FOR 0647
*                                      EXIT                          */
*                                                                  0647
         OI    RTM2SCTX+1(R8),B'00100000'                          0647
*                     /***********************************************/
*                     /*                                             */
*                     /* LOCATE PREVIOUS TASK RECOVERY WORKAREA AND  */
*                     /* UPDATE RETURN ADDRESS AND RECURSION ADDRESS */
*                     /* SO THAT EXECUTION WILL RESUME ON CORRECT    */
*                     /* PATH (TASK RECOVERY IS CALLED FROM BOTH     */
*                     /* RECOVERABLE AND UNRECOVERABLE PATHS.)       */
*                     /*                                             */
*                     /***********************************************/
*                                                                  0648
*                     RESPECIFY                                    0648
*                       R9 RESTRICTED;                             0648
*                     R9=RTM2PREV;  /* START WITH IMMEDIATELY      0649
*                                      PREVIOUS WORK AREA            */
         L     R9,RTM2PREV(,R8)                                    0649
*                     RTM2PRWA=0;   /* CLEAR FIELD FROM PREVIOUS   0650
*                                      RECUR                         */
         ST    @12,RTM2PRWA(,R8)                                   0650
*                     DO WHILE(RTM2PRWA=0);                        0651
         B     @DE00651                                            0651
@DL00651 DS    0H                                                  0652
*                       IF RTM2SCTX=R9->RTM2SCTC THEN/* WORK AREA  0652
*                                      BELONGED TO TASK RECOVERY     */
         CLC   RTM2SCTX(4,R8),RTM2SCTC(R9)                         0652
         BNE   @RF00652                                            0652
*                         RTM2PRWA=R9;/* SAVE ADDR OF WORK AREA      */
         ST    R9,RTM2PRWA(,R8)                                    0653
*                       ELSE        /* WORK AREA DID NOT BELONG TO 0654
*                                      TASK RECOVERY                 */
*                         R9=R9->RTM2PREV;/* LOCATE PREVIOUS WORKAREA*/
         B     @RC00652                                            0654
@RF00652 L     R9,RTM2PREV(,R9)                                    0654
*                     END;          /* END OF SCAN FOR PREVIOUS ASIR
*                                      WORK AREA                     */
@RC00652 DS    0H                                                  0655
@DE00651 L     @12,RTM2PRWA(,R8)                                   0655
         LTR   @12,@12                                             0655
         BZ    @DL00651                                            0655
*                     RESPECIFY                                    0656
*                       R9 UNRESTRICTED;                           0656
*                     RTM2PRWA->RTM2SKRA=ADDR(RTCTEREC);/* UPDATE  0657
*                                      RECURSION ADDR                */
         LA    @09,RTCTEREC                                        0657
         ST    @09,RTM2SKRA(,@12)                                  0657
*                     RTM2PRWA->RTM2SFSA(4)=ADDR(LTERMEX);/* UPDATE
*                                      RETURN ADDR IN R14 SLOT IN  0658
*                                      SAVE AREA                     */
         LA    @09,LTERMEX                                         0658
         ST    @09,RTM2SFSA+12(,@12)                               0658
*                   END;                                           0659
*                 ELSE                                             0660
*                   DO;                                            0660
         B     @RC00644                                            0660
@RF00644 DS    0H                                                  0661
*                     RTM2SCTC(RTM2TRS)=ON;/* SET SECTION FLAG FOR 0661
*                                      RECURSION CONTROL             */
         OI    RTM2SCTC+1(R8),B'00100000'                          0661
*                     GENERATE REFS(RTM2SFSA,R8);                  0662
          STM   14,12,RTM2SFSA+12(R8) - SAVE REGISTERS
*                     RTM2SKRA=ADDR(RTCTEREC);/* SET RECURSION     0663
*                                      ADDRESS                       */
         LA    @12,RTCTEREC                                        0663
         ST    @12,RTM2SKRA(,R8)                                   0663
*                     RESPECIFY                                    0664
*                      (R1) RESTRICTED;/* RESTRICT REGS USED IN    0664
*                                      INTERFACE TO TERM EXIT      0664
*                                      PROCESSING                    */
*                     R1=ADDR(RTM2WA);/* SET R1 WITH ADDRESS OF    0665
*                                      RTM2WA                        */
         LR    R1,R8                                               0665
*                     R13=ADDR(RTM2SFSA);/* SET R13 WITH SAVE AREA 0666
*                                      ADDRESS                       */
         LA    R13,RTM2SFSA(,R8)                                   0666
*                     CALL IEAVTAS1;/* INVOKE TERM EXIT PROCESSOR    */
         L     @15,@CV00099                                        0667
         BALR  @14,@15                                             0667
*LTERMEX:                                                          0668
*                     ;             /* RETURN PT FOR IEAVTAS1 ON   0668
*                                      UNRECOVERABLE PATH            */
LTERMEX  DS    0H                                                  0669
*                     RESPECIFY                                    0669
*                      (R1) UNRESTRICTED;/* RELEASE REGS USED IN TERM
*                                      EXIT PROCESSOR INTERFACE      */
*                     TCBCMPC=RTM2CC;/* COPY COMPLETION CODE WHICH 0670
*                                      MAY HAVE BEEN UPDATED BY EXIT
*                                                             @YM4164*/
         MVC   TCBCMPC(3,R4),RTM2CC(R8)                            0670
*                   END;                                           0671
*               END;                                               0672
*             ELSE                                                 0673
*               ;                   /* NO EXITS EXIST                */
@RF00636 DS    0H                                                  0674
*             RTM2SCTC(RTM2TRS)=OFF;/* CLEAR SECTION FLAG            */
@RC00636 NI    RTM2SCTC+1(R8),B'11011111'                          0674
*             RTM2SKRA=0;           /* CLEAR RECURSION ADDRESS       */
         SLR   @12,@12                                             0675
         ST    @12,RTM2SKRA(,R8)                                   0675
*RTCTEREC:                                                         0676
*             ;                                                    0676
RTCTEREC DS    0H                                                  0677
*             IF RTM2FLX=NONE THEN                                 0677
         CLC   RTM2FLX(2,R8),@CB00069                              0677
         BNE   @RF00677                                            0677
*               DO;                                                0678
*                 TCBFPRAP=ON;      /* PREVENT PERCOLATION OF      0679
*                                      ASYNCHRONOUS ABENDS           */
         OI    TCBFPRAP(R4),B'00010000'                            0679
*                 TCBFX=ON;         /* PREVENT ASYNCHRONOUS EXITS    */
         OI    TCBFX(R4),B'00000001'                               0680
*                 TCBATT=ON;                                       0681
         OI    TCBATT(R4),B'00100000'                              0681
*                 TCBETERM=OFF;     /* PERMIT RESOURCE MGRS TO ISSUE
*                                      ESTAE WITH TERM OPTION        */
         NI    TCBETERM(R4),B'01111111'                            0682
*               END;                                               0683
*           END;                    /* END SEGMENT RTCTEINT          */
@RF00677 DS    0H                                                  0685
*           IF RTM2PURG=OFF         /* NO ENTRY HAS BEEN FOR PURGE 0685
*                                      ONLY                          */
*               &TCBCNCB=OFF THEN   /* NO ENTRY HAS BEEN EXPRESS     */
         TM    RTM2PURG(R8),B'10000000'                            0685
         BNZ   @RF00685                                            0685
         TM    TCBCNCB(R4),B'10000000'                             0685
         BNZ   @RF00685                                            0685
*             IF RTM2FLX=NONE THEN  /* EXIT HAS NOT BEEN REQUESTED   */
         CLC   RTM2FLX(2,R8),@CB00069                              0686
         BNE   @RF00686                                            0686
*               IF TCBLTC^=0 THEN   /* SUBTASKS EXIST                */
         L     @12,TCBLTC(,R4)                                     0687
         LTR   @12,@12                                             0687
         BZ    @RF00687                                            0687
*                 DO;                                              0688
*                   IF RTM2RECR='1'B&RTM2SCTR(RTM2STKS)='1'B THEN/*
*                                      RECURSION IN THIS SECTION     */
         TM    RTM2RECR(R8),B'10000000'                            0689
         BNO   @RF00689                                            0689
         TM    RTM2SCTR+1(R8),B'10000000'                          0689
         BNO   @RF00689                                            0689
*                     DO;                                          0690
*                       RTM2RCRX='1'B;/* SET RECURSION EXIT FLAG     */
         OI    RTM2RCRX(R8),B'10000000'                            0691
*                       RTM2SCTX(RTM2STKS)='1'B;/* SET SECTION FLAG
*                                      FOR EXIT                      */
         OI    RTM2SCTX+1(R8),B'10000000'                          0692
*                     END;                                         0693
*                   ELSE            /* NO RECURSION IN THIS SECTION  */
*                     DO;                                          0694
         B     @RC00689                                            0694
@RF00689 DS    0H                                                  0695
*                       RTM2SCTC(RTM2STKS)='1'B;/* SET CURRENT     0695
*                                      SECTION FLAG                  */
         OI    RTM2SCTC+1(R8),B'10000000'                          0695
*                       GEN REFS(R8) SETS(RTM2SFSA)                0696
*                           (STM R14,R12,RTM2SFSA+12(R8));/* SAVE  0696
*                                      REGISTERS                     */
         STM R14,R12,RTM2SFSA+12(R8)
*                       RTM2SKRA=ADDR(RCR0031);/* SET UP RECURSION 0697
*                                      ADDRESS ESTABLISH RECURSION 0697
*                                      CONTROL                       */
         LA    @12,RCR0031                                         0697
         ST    @12,RTM2SKRA(,R8)                                   0697
*/********************************************************************/
*/*                                                                  */
*/* PRELIMINARY                                                      */
*/*    THE LOCAL LOCK IS OBTAINED TO PREVENT ANY TASK FROM CHANGING  */
*/*    ITS STATUS WITH RESPECT TO RTM2.  (THE TCB FLAGS CONTROLLING  */
*/*    STATUS IN RTM2 ARE ALL SERIALIZED BY THE LOCAL LOCK.)  THE    */
*/*    COUNT OF TASKS ELIGIBLE FOR STACKING IS INITIALIZED TO 0.     */
*/*                                                                  */
*/* TREE SCAN                                                        */
*/*    THE SUBTASK TREE IS SCANNED FROM TOP TO BOTTOM.  WHEN A TASK  */
*/*    IN RTM2 IS FOUND(TCBRTM2=1), PROCESSING IS PERFORMED AS       */
*/*    DESCRIBED BELOW AND ITS SUBTASK TREE IS IGNORED.  A TASK IS   */
*/*    FORCED INTO RTM2 IF IT IS IN STEP-MUST-COMPLETE OR IS         */
*/*    NONDISPATCHABLE DUE TO STEP-MUST-COMPLETE.  THE SCAN STOPS    */
*/*    WHEN ALL TASKS HAVE BEEN SCANNED OR WHEN THE COUNT OF TASKS   */
*/*    ELIGIBLE FOR STACKING REACHES THE NUMBER OF ECBS AVAILABLE    */
*/*    FOR STACKING(FOUR).                                           */
*/*                                                                  */
*/* PROCESSING FOR TASK IN SMC                                       */
*/*    TASKS IN STEP-MUST-COMPLETE MUST BE FORCED TO TERMINATE TO    */
*/*    PREVENT THE CURRENT TASK FROM CAUSING AN INTERLOCK BY STOPPING*/
*/*    THE TASK TREE AND THEN DETACHING ITS LOWEST SUBTASK, WHICH    */
*/*    WOULD BE NONDISPATCHABLE.  THE JOBSTEP TASK WHICH IS          */
*/*    NONDISPATCHABLE BECAUSE A SUBTASK IS IN SMC IS TERMINATED     */
*/*    FOR A SIMILAR REASON.  THE TASK WILL END WHEN ITS SUBTASK     */
*/*    RELEASES ITS STEP-MUST-COMPLETE.  SUCH TASKS ARE ABTERMED IF  */
*/*    THEY ARE NOT ALREADY IN RTM2.  THEY ARE TREATED AS IF THEY    */
*/*    WERE IN RTM2.                                                 */
*/*                                                                  */
*/* PROCESSING FOR TASK IN RTM2                                      */
*/*    IF ANOTHER TASK IS STACKED BEHIND THIS TASK, THE ECB LOCATED  */
*/*    BY THE TCBECB FIELD IS POSTED.  THE ANCESTOR TASK WILL SCAN   */
*/*    ITS SUBTASK TREE AGAIN AND THIS TIME WILL STACK BEHIND THE    */
*/*    CURRENT TASK.  THE TCBECB FIELD OF THE SUBTASK IS THUS FREED  */
*/*    FOR THE CURRENT TASK'S USE.                                   */
*/*                                                                  */
*/*    STACKING CONSISTS OF INCREMENTING THE COUNT OF TASKS          */
*/*    ELIGIBLE FOR STACKING(ECB'S USED), CLEARING THE END-OF-LIST   */
*/*    FLAG FOR THE NEXT ECB, CLEARING THE NEXT ECB, CHANGING THE    */
*/*    TCBECB FIELD IN THE SUBTASK TO POINT TO THE NEXT ECB IN THE   */
*/*    LIST, AND TURNING ON THE TCBFMW FLAG IN THE SUBTASK'S TCB.    */
*/*    THEN THE SCAN OF THE SUBTASK TREE CONTINUES, IGNORING         */
*/*    SUBTASKS OF THE TASK JUST FOUND.                              */
*/*                                                                  */
*/* WAIT PROCESSING                                                  */
*/*    AFTER ALL SUBTASKS HAVE BEEN EXAMINED (OR ALL ECBS HAVE BEEN  */
*/*    USED), THE COUNT OF TASKS PREPARED FOR STACKING IS EXAMINED.  */
*/*    IF THE COUNT IF NOT ZERO, THE END-OF-LIST FLAG IS TURNED ON   */
*/*    FOR THE LAST ECB, THE LOCAL LOCK IS RELEASED, AND A WAIT IS   */
*/*    ISSUED ON THE ECB LIST FOR THE COUNT OF ECBS.  WHEN           */
*/*    PROCESSING IS RESUMED, CONTROL IS RETURNED TO THE TOP OF      */
*/*    THIS SEGMENT TO CHECK FOR MORE SUBTASKS IN RTM2.              */
*/*                                                                  */
*/* CONCLUSION                                                       */
*/*    WHEN THE COUNT IS ZERO, THERE ARE NO TASKS IN RTM2.  THE      */
*/*    LOCAL LOCK IS NOT RELEASED:  IT IS HELD UNTIL SUBTASKS HAVE   */
*/*    BEEN SET NONDISPATCHABLE.                                     */
*/*                                                                  */
*/********************************************************************/
*                                                                  0698
*                       /*********************************************/
*                       /*                                           */
*                       /* A SUBTASK CURRENTLY IN RTM2 CANNOT BE     */
*                       /* INTERRUPTED BECAUSE IT COULD BE IN THE    */
*                       /* MIDDLE OF A TERM EXIT OR A RESOURCE       */
*                       /* MANAGER. SUCH SUBTASKS ARE INFORMED BY A  */
*                       /* BIT IN THEIR TCB THAT AN ANCESTOR IS      */
*                       /* WAITING THEM. THE ANCESTOR TASK WAITS ON  */
*                       /* THE SUBTASK'S ATTACH ECB FOR THE SUBTASK  */
*                       /* TO COMPLETE. WHEN THE BIT IS ON IN ITS    */
*                       /* TCB, THE SUBTASK IS NOT ALLOWED TO RETRY: */
*                       /* THE SUBTASK MUST TERMINATE. EACH TASK IN  */
*                       /* RTM2 HANDLES ITS OWN SUBTASKS. THEREFORE, */
*                       /* NO SUBTASK OF A TASK IN RTM2 IS EXAMINED. */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0698
*                       DO;         /* START OF SEGMENT RTCSTACK     */
*                                                                  0698
*                         /*******************************************/
*                         /*                                         */
*                         /* LOCATE TASKS IN RTM2 OR                 */
*                         /* STEP-MUST-COMPLETE PROCESSING           */
*                         /*                                         */
*                         /*******************************************/
*                                                                  0699
*                         RESPECIFY                                0699
*                           R9 RESTRICTED;/* RESTRICT REGISTER FOR 0699
*                                      COUNT                         */
*                         R9=NONZERO;/* SET CONDITION TO FORCE LOOP
*                                      TO BE ENTERED                 */
*                                                                  0700
         LA    R9,1                                                0700
*                         /*******************************************/
*                         /*                                         */
*                         /* SCAN TREE UNTIL NO TASKS FOUND IN RTM2  */
*                         /*                                         */
*                         /*******************************************/
*                                                                  0701
*                         DO WHILE(R9^=0);                         0701
         B     @DE00701                                            0701
@DL00701 DS    0H                                                  0702
*                           R9=0;   /* SET COUNT TO ZERO. IF TASK  0702
*                                      FOUND TO STACK BEHIND IT WILL
*                                      BE INCREMENTED                */
*                                                                  0702
         SLR   R9,R9                                               0702
*                           /*****************************************/
*                           /*                                       */
*                           /* OBTAIN LOCAL LOCK TO PREVENT SUBTASKS */
*                           /* FROM ENTERING OR LEAVING RTM2 WHILE   */
*                           /* TREE SCAN IS TAKING PLACE             */
*                           /*                                       */
*                           /*****************************************/
*                                                                  0703
*                           ESAGLREC=ON;/* INDICATE SETLOCK IN     0703
*                                      CONTROL                       */
         OI    ESAGLREC+96(R5),B'00010000'                         0703
*                           DO;     /* SETLOCK OBTAIN TYPE(LOCAL)MODE
*                                      (UNCOND)RELATED(TCB,IEAVTRTC(R
*                                      TCSTACK,RTCCSUB))             */
*                             RESPECIFY                            0705
*                              (GPR11P,                            0705
*                               GPR12P,                            0705
*                               GPR13P,                            0705
*                               GPR14P) RESTRICTED;/* RESTRICT REGS
*                                      USED BY SETLOCK               */
*                             GENERATE REFS(PSALITA,FLC) SETS(GPR11P,
*                                 GPR12P,GPR13P,GPR14P);           0706
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                        C
               RELATED=(TCB,IEAVTRTC(RTCSTACK,RTCCSUB))
*                             RESPECIFY                            0707
*                              (GPR11P,                            0707
*                               GPR12P,                            0707
*                               GPR13P,                            0707
*                               GPR14P) UNRESTRICTED;/* RELEASE REGS
*                                      USED BY SETLOCK               */
*                           END;    /* SETLOCK OBTAIN TYPE(LOCAL)MODE
*                                      (UNCOND)RELATED(TCB,IEAVTRTC(R
*                                      TCSTACK,RTCCSUB))             */
*                           ESAGLREC=OFF;/* SETLOCK COMPLETED      0709
*                                      SUCCESSFULLY                  */
         NI    ESAGLREC+96(R5),B'11101111'                         0709
*                           RESPECIFY                              0710
*                             R7 RESTRICTED;/* RESTRICT REGISTER USED
*                                      FOR TCB TREE SCAN             */
*                           R7=R4;  /* INITIALIZE SCAN REGISTER TO 0711
*                                      CURRENT TCB                   */
*                                                                  0711
         LR    R7,R4                                               0711
*                           /*****************************************/
*                           /*                                       */
*                           /* SCAN TREE UNTIL IT IS EXHAUSTED OR ALL*/
*                           /* STACKING ECBS HAVE BEEN USED          */
*                           /*                                       */
*                           /*****************************************/
*                                                                  0712
*                           RTM2RSCN=OFF;/* RTM2 TCB NOT YET REACHED */
         NI    RTM2RSCN(R8),B'01111111'                            0712
*                           DO WHILE(R9<MAXECBS&R7^=0);            0713
         B     @DE00713                                            0713
@DL00713 DS    0H                                                  0714
*                             RESPECIFY                            0714
*                               TCB BASED(R7);                     0714
*                                                                  0714
*                             /***************************************/
*                             /*                                     */
*                             /* SEGMENT RTCFTCB SCANS A TASK TREE   */
*                             /* AND RETURNS THE ADDRESS OF A SINGLE */
*                             /* SUBTASK IF ANY EXIST. MULTIPLE CALLS*/
*                             /* WILL CAUSE EVERY SUBTASK OF A TREE  */
*                             /* TO BE RETURNED. HOWEVER, IF RTM2RSCN*/
*                             /* IS ON THEN THE SUBTASK TREE DEFINED */
*                             /* BY THE INPUT TCB IS NOT SEARCHED.   */
*                             /*                                     */
*                             /***************************************/
*                                                                  0715
*                             DO;   /* BEGIN SEGMENT RTCFTCB         */
*                               RTM2CONT=ON;/* INITIALIZE CONTROL  0716
*                                      FLAG                          */
         OI    RTM2CONT(R8),B'00000001'                            0716
*                               RESPECIFY                          0717
*                                 R11 RESTRICTED;/* RESTRICT REG USED
*                                      BY FIND TCB                   */
*                               R11=R7;/* SET WORKTCB REG EQUAL TO 0718
*                                      THE INPUT TCB                 */
         LR    R11,R7                                              0718
*                               IF RTM2RSCN=OFF THEN/* CONTINUE SCAN,
*                                      INPUT TCB NOT IN RTM2 NOR STEP
*                                      MUST COMPLETE                 */
         TM    RTM2RSCN(R8),B'10000000'                            0719
         BNZ   @RF00719                                            0719
*                                 R7=R11->TCBLTC;/* SET INPUT TCB REG
*                                      EQUAL TO DAUGHTER OF INPUT TCB*/
         L     R7,TCBLTC(,R11)                                     0720
*                               ELSE/* INPUT TCB IN RTM2 OR STEP MUST
*                                      COMPLETE. FORCE SUBSEQUENT  0721
*                                      CODE TO BELIEVE IT HAS NO   0721
*                                      DAUGHTERS                     */
*                                 R7=0;                            0721
         B     @RC00719                                            0721
@RF00719 SLR   R7,R7                                               0721
*                               DO WHILE(RTM2CONT=ON);/* LOOP UNTIL
*                                      NEXT TCB IN THE TREE FOUND OR
*                                      THE TREE IS EXHAUSTED         */
@RC00719 B     @DE00722                                            0722
@DL00722 DS    0H                                                  0723
*                                 IF R7=0 THEN/* NEXT TCB NOT FOUND  */
         LTR   R7,R7                                               0723
         BNZ   @RF00723                                            0723
*                                   DO;                            0724
*                                    R7=R11->TCBNTC;/* SET EQUAL TO
*                                      SISTER                        */
         L     R7,TCBNTC(,R11)                                     0725
*                                    IF R11^=RTM2TCBT THEN/* SCAN NOT
*                                      YET DONE                      */
         C     R11,RTM2TCBT(,R8)                                   0726
         BE    @RF00726                                            0726
*                                     R11=R11->TCBOTC;/* SET EQUAL TO
*                                      MOTHER                        */
         L     R11,TCBOTC(,R11)                                    0727
*                                    ELSE/* SCAN COMPLETE            */
*                                     DO;                          0728
         B     @RC00726                                            0728
@RF00726 DS    0H                                                  0729
*                                      RTM2CONT=OFF;/* RESET CONTROL
*                                      VARIABLE                      */
         NI    RTM2CONT(R8),B'11111110'                            0729
*                                      R7=0;/* INDICATE SCAN DONE    */
         SLR   R7,R7                                               0730
*                                     END;                         0731
*                                   END;                           0732
*                                 ELSE/* NEXT TCB FOUND              */
*                                   RTM2CONT=OFF;/* RESET CONTROL  0733
*                                      VARIABLE                      */
         B     @RC00723                                            0733
@RF00723 NI    RTM2CONT(R8),B'11111110'                            0733
*                               END;                               0734
@RC00723 DS    0H                                                  0734
@DE00722 TM    RTM2CONT(R8),B'00000001'                            0734
         BO    @DL00722                                            0734
*                               RESPECIFY                          0735
*                                 R11 UNRESTRICTED;/* RELEASE REG  0735
*                                      USED IN SCAN                  */
*                             END;  /* END SEGMENT RTCFTCB           */
*                             RTM2RSCN=OFF;/* ASSUME NOT RTM2 TCB    */
         NI    RTM2RSCN(R8),B'01111111'                            0737
*                             IF R7^=0 THEN/* SUBTASK TCB WAS FOUND  */
*                                                                  0738
         LTR   R7,R7                                               0738
         BZ    @RF00738                                            0738
*                               /*************************************/
*                               /*                                   */
*                               /* SEGMENT RTCPTCB DETERMINES WHETHER*/
*                               /* A TASK IS ELIGIBLE FOR STACKING   */
*                               /* AND PREPARES IT FOR STACKING IF IT*/
*                               /* IS. IF ANOTHER TASK IS ALREADY    */
*                               /* STACKED BEHIND THE SUBTASK, IT IS */
*                               /* POSTED TO RESUME AND RE-STACK     */
*                               /* BEHIND THE CURRENT TASK.          */
*                               /*                                   */
*                               /*************************************/
*                                                                  0739
*                               DO; /* START OF RTCPTCB              */
*                                                                  0739
*                                 /***********************************/
*                                 /*                                 */
*                                 /* ABTERM TASK IF IT IS IN         */
*                                 /* STEP-MUST-COMPLETE OR           */
*                                 /* NONDISPATCHABLE DUE TO SUBTASK  */
*                                 /* BEING IN SMC                    */
*                                 /*                                 */
*                                 /***********************************/
*                                                                  0740
*                                 IF TCBRTM2=OFF/* DON'T ABTERM TASK
*                                      ALREADY IN RTM2               */
*                                     &(TCBSTP=ON×TCBFJMC=ON) THEN 0740
         TM    TCBRTM2(R7),B'00001000'                             0740
         BNZ   @RF00740                                            0740
         TM    TCBSTP(R7),B'00000100'                              0740
         BO    @RT00740                                            0740
         TM    TCBFJMC(R7),B'00001000'                             0740
         BNO   @RF00740                                            0740
@RT00740 DS    0H                                                  0741
*                                   DO;                            0741
*                                    GEN REFS(R7,CVTBTERM,CVTMAP,  0742
*                                        CVTUSER)                  0742
*(CALLRTM TYPE=ABTERM,TCB=(R7),COMPCOD=X'10D',DUMP=NO);            0742
         CALLRTM TYPE=ABTERM,TCB=(R7),COMPCOD=X'10D',DUMP=NO
*                                    RTM2RSCN=ON;/* IGNORE TREE BELOW
*                                      THIS TASK                     */
         OI    RTM2RSCN(R8),B'10000000'                            0743
*                                   END;                           0744
*                                 ELSE                             0745
*                                   ;/* TASK ALREADY IN RTM2 OR NOT
*                                      IN SMC                        */
*                                                                  0745
@RF00740 DS    0H                                                  0746
*                                 /***********************************/
*                                 /*                                 */
*                                 /* PREPARE TO STACK BEHIND TASKS IN*/
*                                 /* RTM2                            */
*                                 /*                                 */
*                                 /***********************************/
*                                                                  0746
*                                 IF((TCBRTM2=ON×TCBABTRM=ON×EVAL( 0746
*                                     TCBRBP-LENGTH(RBPRFX))->RBABEND=
*                                     ON)&TCBFC=OFF)×RTM2RSCN=ON THEN
         TM    TCBRTM2(R7),B'00001000'                             0746
         BO    @GL00042                                            0746
         TM    TCBABTRM(R7),B'00100000'                            0746
         BO    @GL00042                                            0746
         L     @12,TCBRBP(,R7)                                     0746
         SL    @12,@CF00470                                        0746
         TM    RBABEND(@12),B'00100000'                            0746
         BNO   @GL00041                                            0746
@GL00042 TM    TCBFC(R7),B'10000000'                               0746
         BZ    @RT00746                                            0746
@GL00041 TM    RTM2RSCN(R8),B'10000000'                            0746
         BNO   @RF00746                                            0746
@RT00746 DS    0H                                                  0747
*                                   /* TASK IN RTM2 OR JUST ABTERMED
*                                                            @ZA07154*/
*                                   DO;                            0747
*                                    RTM2RSCN=ON;/* PREVENT TREE SCAN
*                                      FROM GOING BELOW THIS TASK    */
         OI    RTM2RSCN(R8),B'10000000'                            0748
*                                    IF TCBFMW=ON THEN/* ANOTHER TASK
*                                      IS ALREADY STACKED BEHIND THIS
*                                      ONE                           */
         TM    TCBFMW(R7),B'01000000'                              0749
         BNO   @RF00749                                            0749
*                                     DO;                          0750
*                                      RESPECIFY                   0751
*                                       (R10,                      0751
*                                        R11,                      0751
*                                        R12) RESTRICTED;/* RESTRICT
*                                      POST INTERFACE REGS           */
*                                      R10=0;/* POST CODE            */
         SLR   R10,R10                                             0752
*                                      R11=TCBECB;/* STACKING ECB    */
         L     R11,TCBECB(,R7)                                     0753
*                                      CALL POST;/* POST ANCESTOR TO
*                                      STACK AGAIN                   */
         L     @02,CVTPTR                                          0754
         L     @15,CVT0PT01(,@02)                                  0754
         BALR  @14,@15                                             0754
*                                      RESPECIFY                   0755
*                                       (R10,                      0755
*                                        R11,                      0755
*                                        R12) UNRESTRICTED;/* RELEASE
*                                      POST'S REGISTERS              */
*                                     END;                         0756
*                                    ELSE                          0757
*                                     ;/* NO OTHER TASK STACKED    0757
*                                      BEHIND THIS ONE               */
@RF00749 DS    0H                                                  0758
*                                    R9=R9+1;/* INCREMENT COUNT OF 0758
*                                      ECBS                          */
         AL    R9,@CF00071                                         0758
*                                    RTM2ECBS(R9)=0;/* CLEAR ECB     */
         LR    @12,R9                                              0759
         SLA   @12,2                                               0759
         SLR   @02,@02                                             0759
         ST    @02,RTM2ECBS-4(@12,R8)                              0759
*PTCBL1:                                                           0760
*                                    ;/* THE STATEMENT IS LABELLED TO
*                                      PREVENT THE USE OF A COMPILER
*                                      TEMPORARY                     */
PTCBL1   DS    0H                                                  0761
*                                    RTM2LECB(R9)=OFF;/* CLEAR FLAG
*                                      INDICATING END OF LIST        */
         LR    @12,R9                                              0761
         SLA   @12,2                                               0761
         ALR   @12,R8                                              0761
         NI    RTM2LECB-4(@12),B'01111111'                         0761
*PTCBL2:                                                           0762
*                                    ;                             0762
PTCBL2   DS    0H                                                  0763
*                                    TCBECB=ADDR(RTM2ECBS(R9));/* PUT
*                                      ADDRESS OF THIS ECB INTO    0763
*                                      END-OF-TASK SLOT              */
         LR    @12,R9                                              0763
         SLA   @12,2                                               0763
         LA    @12,RTM2ECBS-4(@12,R8)                              0763
         ST    @12,TCBECB(,R7)                                     0763
*                                    TCBFMW=ON;/* SIGNAL TASK THAT 0764
*                                      ANCESTOR IS WAITING           */
*                                    TCBECBNV=ON;/* PREVENT        0765
*                                      END-OF-TASK FROM VALIDITY   0765
*                                      CHECKING ECB                  */
         OI    TCBFMW(R7),B'01000100'                              0765
*                                   END;                           0766
*                                 ELSE                             0767
*                                   ;/* TASK NOT ELIGIBLE FOR      0767
*                                      STACKING                      */
@RF00746 DS    0H                                                  0768
*                               END;/* END OF RTCPTCB                */
*                             ELSE                                 0769
*                               ;   /* NO MORE SUBTASKS              */
@RF00738 DS    0H                                                  0770
*                           END;    /* END OF TREE SCAN              */
*                                                                  0770
@DE00713 C     R9,@CF00102                                         0770
         BNL   @DC00713                                            0770
         LTR   R7,R7                                               0770
         BNZ   @DL00713                                            0770
@DC00713 DS    0H                                                  0771
*                           /*****************************************/
*                           /*                                       */
*                           /* IF ANY TASKS IN RTM2 WERE FOUND, STACK*/
*                           /* BEHIND THEM                           */
*                           /*                                       */
*                           /*****************************************/
*                                                                  0771
*                           IF R9^=0 THEN/* TASK WAS PREPARED FOR  0771
*                                      STACKING                      */
         LTR   R9,R9                                               0771
         BZ    @RF00771                                            0771
*                             DO;                                  0772
*                               RTM2LECB(R9)=ON;/* MARK END OF LIST  */
         LR    @12,R9                                              0773
         SLA   @12,2                                               0773
         ALR   @12,R8                                              0773
         OI    RTM2LECB-4(@12),B'10000000'                         0773
*                               ESAGLREC=ON;/* INDICATE IN SETLOCK   */
         OI    ESAGLREC+96(R5),B'00010000'                         0774
*                               DO; /* SETLOCK RELEASE TYPE(LOCAL)REL
*                                      ATED(TCB,IEAVTRTC(RTCSTACK))  */
*                                 RESPECIFY                        0776
*                                  (GPR11P,                        0776
*                                   GPR12P,                        0776
*                                   GPR13P,                        0776
*                                   GPR14P) RESTRICTED;/* RESTRICT 0776
*                                      REGS USED BY SETLOCK          */
*                                 GENERATE REFS(PSALITA,FLC) SETS( 0777
*                                     GPR11P,GPR12P,GPR13P,GPR14P);
         SETLOCK RELEASE,TYPE=LOCAL,                                   C
               RELATED=(TCB,IEAVTRTC(RTCSTACK))
*                                 RESPECIFY                        0778
*                                  (GPR11P,                        0778
*                                   GPR12P,                        0778
*                                   GPR13P,                        0778
*                                   GPR14P) UNRESTRICTED;/* RELEASE
*                                      REGS USED BY SETLOCK          */
*                               END;/* SETLOCK RELEASE TYPE(LOCAL)REL
*                                      ATED(TCB,IEAVTRTC(RTCSTACK))  */
*                               ESAGLREC=OFF;/* SETLOCK COMPLETED  0780
*                                      SUCCESSFULLY                  */
         NI    ESAGLREC+96(R5),B'11101111'                         0780
*                               RESPECIFY                          0781
*                                (R1) RESTRICTED;/* RESTRICT PTR FOR
*                                      WAIT LIST                     */
*                               R1=ADDR(RTM2ECBA);                 0782
         LA    R1,RTM2ECBA(,R8)                                    0782
*                               GEN(WAIT (R9),ECBLIST=(1));/* WAIT 0783
*                                      FOR SUBTASKS TO COMPLETE      */
         WAIT (R9),ECBLIST=(1)
*                               RESPECIFY                          0784
*                                 R1 UNRESTRICTED;                 0784
*                             END;                                 0785
*                           ELSE                                   0786
*                             ;     /* NO SUBTASKS ELIGIBLE FOR    0786
*                                      STACKING                      */
@RF00771 DS    0H                                                  0787
*                           RESPECIFY                              0787
*                             TCB BASED(R4);                       0787
*                           RESPECIFY                              0788
*                             R7 UNRESTRICTED;                     0788
*                         END;      /* END OF STACKING               */
@DE00701 SLR   @12,@12                                             0789
         CR    R9,@12                                              0789
         BNE   @DL00701                                            0789
*                       END;        /* END OF RTCSTACK               */
*                       RTM2SKRA=0; /* CLEAR RECURSION ADDRESS       */
         ST    @12,RTM2SKRA(,R8)                                   0791
*                       RTM2SCTC(RTM2STKS)='0'B;/* CLEAR SECTION FLAG*/
         NI    RTM2SCTC+1(R8),B'01111111'                          0792
*                     END;                                         0793
*RCR0031:                           /* CLEAR RECURSION FLAGS         */
*                 END;                                             0794
*               ELSE                                               0795
*                 ;                 /* NO SUBTASKS EXIST             */
@RF00687 DS    0H                                                  0796
*             ELSE                                                 0796
*               ;                   /* DO NOT STACK IF EXIT REQUESTED*/
@RF00686 DS    0H                                                  0797
*           ELSE                                                   0797
*             ;                     /* DO NOT STACK IF ANY ENTRY WAS
*                                      EXPRESS AS SUBTASKS WHICH MAY
*                                      BE IN RTM2 HAVE BEEN SET    0797
*                                      NON-DISPATCHABLE              */
@RF00685 DS    0H                                                  0798
*           IF TCBLTC^=0 THEN       /* SUBTASKS EXIST                */
@RC00685 L     @12,TCBLTC(,R4)                                     0798
         LTR   @12,@12                                             0798
         BZ    @RF00798                                            0798
*             IF RTM2ISPC=OFF THEN  /* INITIAL SUBTASK PROCESSING HAS
*                                      NOT YET BEEN DONE             */
         TM    RTM2ISPC(R8),B'00010000'                            0799
         BNZ   @RF00799                                            0799
*               IF RTM2FLX=NONE THEN/* NO EXIT HAS BEEN REQUESTED    */
         CLC   RTM2FLX(2,R8),@CB00069                              0800
         BNE   @RF00800                                            0800
*                 DO;                                              0801
*                   IF RTM2RECR='1'B&RTM2SCTR(RTM2ISPS)='1'B THEN/*
*                                      RECURSION IN THIS SECTION     */
         TM    RTM2RECR(R8),B'10000000'                            0802
         BNO   @RF00802                                            0802
         TM    RTM2SCTR(R8),B'00000001'                            0802
         BNO   @RF00802                                            0802
*                     DO;                                          0803
*                       RTM2RCRX='1'B;/* SET RECURSION EXIT FLAG     */
         OI    RTM2RCRX(R8),B'10000000'                            0804
*                       RTM2SCTX(RTM2ISPS)='1'B;/* SET SECTION FLAG
*                                      FOR EXIT                      */
         OI    RTM2SCTX(R8),B'00000001'                            0805
*                     END;                                         0806
*                   ELSE            /* NO RECURSION IN THIS SECTION  */
*                     DO;                                          0807
         B     @RC00802                                            0807
@RF00802 DS    0H                                                  0808
*                       RTM2SCTC(RTM2ISPS)='1'B;/* SET CURRENT     0808
*                                      SECTION FLAG                  */
         OI    RTM2SCTC(R8),B'00000001'                            0808
*                       GEN REFS(R8) SETS(RTM2SFSA)                0809
*                           (STM R14,R12,RTM2SFSA+12(R8));/* SAVE  0809
*                                      REGISTERS                     */
         STM R14,R12,RTM2SFSA+12(R8)
*                       RTM2SKRA=ADDR(RCR0038);/* SET UP RECURSION 0810
*                                      ADDRESS ESTABLISH RECURSION 0810
*                                      CONTROL                       */
*                                                                  0810
         LA    @12,RCR0038                                         0810
         ST    @12,RTM2SKRA(,R8)                                   0810
*                       /*********************************************/
*                       /*                                           */
*                       /* SEGMENT RTCCSUB STOPS ALL SUBTASKS AND    */
*                       /* PERFORMS THE INITIAL PURGES FOR EACH OF   */
*                       /* THEM (I/O, PARTIALLY LOADED PROGRAMS, AND */
*                       /* PAGING I/O.) IEATRSCN IS USED TO LOCATE   */
*                       /* EACH TASK IN TREE FOR INITIAL PURGES      */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0811
*                       DO;         /* START OF RTCCSUB              */
*                                                                  0811
*                         /*******************************************/
*                         /*                                         */
*                         /* STOP ALL SUBTASKS                       */
*                         /*                                         */
*                         /*******************************************/
*                                                                  0812
*                         RESPECIFY                                0812
*                          (R0,                                    0812
*                           R1) RESTRICTED;/* RESTRICT STATUS      0812
*                                      INTERFACE REGS                */
*                         R0=STOPTREE;/* MASK AND ENTRY CODE FOR   0813
*                                      STATUS                        */
         L     R0,@CF00085                                         0813
*                         R1=R4;    /* TOP TCB OF TREE               */
         LR    R1,R4                                               0814
*                         R13=0;    /* INDICATE CURRENT MEMORY       */
         SLR   R13,R13                                             0815
*                         CALL STATUS;/* STOP SUBTASK TREE           */
         L     @12,CVTPTR                                          0816
         L     @12,SCVTSPTR(,@12)                                  0816
         L     @15,SCVTSTAT(,@12)                                  0816
         BALR  @14,@15                                             0816
*                         RESPECIFY                                0817
*                          (R0,                                    0817
*                           R1) UNRESTRICTED;                      0817
*                                                                  0817
*                         /*******************************************/
*                         /*                                         */
*                         /* SET ABEND FLAGS IN ALL SUBTASKS         */
*                         /*                                         */
*                         /*******************************************/
*                                                                  0818
*                         RESPECIFY                                0818
*                          (R10,                                   0818
*                           R8,                                    0818
*                           R11) RESTRICTED;/* INTERFACE REGS FOR  0818
*                                      TREE SCAN                     */
*                         RESPECIFY                                0819
*                          (R7,                                    0819
*                           R9) RESTRICTED;/* RESTRICT REGISTERS USED
*                                      AS BASE AND WORKREG BY      0819
*                                      TREESCAN                      */
*                         R8=R4;    /* ADDR OF TOP TCB IN TREE       */
         LR    R8,R4                                               0820
*                         R10=R4;   /* ADDR OF FIRST TCB             */
         LR    R10,R4                                              0821
*                         R11=ADDR(LABCTL1);/* RETURN ADDRESS TO BE
*                                      USED AT END OF SCAN           */
         LA    R11,LABCTL1                                         0822
*                         DO WHILE(R10^=0);/* WILL LOOP UNTIL TRSCN
*                                      BRANCHES OUT                  */
         B     @DE00823                                            0823
@DL00823 DS    0H                                                  0824
*                           CALL IEATRSCN;/* LOCATE NEXT TCB ON TREE */
         L     @12,CVTPTR                                          0824
         L     @15,CVTRSCN(,@12)                                   0824
         BALR  @14,@15                                             0824
*                           IF R10->TCBFC^=ON THEN                 0825
         TM    TCBFC(R10),B'10000000'                              0825
         BO    @RF00825                                            0825
*                             DO;                                  0826
*                               R10->TCBFA=ON;/* PREVENT TASK FROM 0827
*                                      EVER BEING RECOVERED          */
         OI    TCBFA(R10),B'10000000'                              0827
*                               R10->TCBEOTFM=ON;/* INDICATE       0828
*                                      END-OF-TASK FOR FREEMAIN    0828
*                                                            @YM01942*/
         OI    TCBEOTFM(R10),B'10000000'                           0828
*                               R10->TCBFX=ON;/* SUPPRESS          0829
*                                      ASYNCHRONOUS EXITS            */
         OI    TCBFX(R10),B'00000001'                              0829
*                               R10->TCBFPRAP=ON;/* SUPPRESS       0830
*                                      PERCOLATION OF ASYNCHRONOUS 0830
*                                      ERRORS                        */
         OI    TCBFPRAP(R10),B'00010000'                           0830
*                               R10->TCBFT=OFF;/* SUBTASK TCB IS NO
*                                      LONGER TOP OF TREE            */
         NI    TCBFT(R10),B'11111011'                              0831
*                             END;                                 0832
*                         END;                                     0833
@RF00825 DS    0H                                                  0833
@DE00823 LTR   R10,R10                                             0833
         BNZ   @DL00823                                            0833
*LABCTL1:                                                          0834
*                         ;         /* REACHED FROM IEATRSCN WHEN NO
*                                      MORE TCBS ON TREE             */
*                                                                  0834
LABCTL1  DS    0H                                                  0835
*                         /*******************************************/
*                         /*                                         */
*                         /* RELEASE LOCAL LOCK                      */
*                         /*                                         */
*                         /*******************************************/
*                                                                  0835
*                         ESAGLREC=ON;/* INDICATE SETLOCK IN CONTROL */
         OI    ESAGLREC+96(R5),B'00010000'                         0835
*                         DO;       /* SETLOCK RELEASE TYPE(LOCAL)REL
*                                      ATED(TCB,IEAVTRTC(RTCCNCL))   */
*                           RESPECIFY                              0837
*                            (GPR11P,                              0837
*                             GPR12P,                              0837
*                             GPR13P,                              0837
*                             GPR14P) RESTRICTED;/* RESTRICT REGS  0837
*                                      USED BY SETLOCK               */
*                           GENERATE REFS(PSALITA,FLC) SETS(GPR11P,
*                               GPR12P,GPR13P,GPR14P);             0838
         SETLOCK RELEASE,TYPE=LOCAL,                                   C
               RELATED=(TCB,IEAVTRTC(RTCCNCL))
*                           RESPECIFY                              0839
*                            (GPR11P,                              0839
*                             GPR12P,                              0839
*                             GPR13P,                              0839
*                             GPR14P) UNRESTRICTED;/* RELEASE REGS 0839
*                                      USED BY SETLOCK               */
*                         END;      /* SETLOCK RELEASE TYPE(LOCAL)REL
*                                      ATED(TCB,IEAVTRTC(RTCCNCL))   */
*                         ESAGLREC=OFF;/* SETLOCK COMPLETED WITHOUT
*                                      FAILURE                       */
*                                                                  0841
         LA    @12,96                                              0841
         ALR   @12,R5                                              0841
         NI    ESAGLREC(@12),B'11101111'                           0841
*                         /*******************************************/
*                         /*                                         */
*                         /* PERFORM INITIAL PURGES FOR EACH SUBTASK */
*                         /*                                         */
*                         /*******************************************/
*                                                                  0842
*                         R13=ADDR(ESART2WA->RTM2SFSA);/* SET UP   0842
*                                      SAVEAREA PTR                  */
         L     R13,ESART2WA(,@12)                                  0842
         LA    R13,RTM2SFSA(,R13)                                  0842
*                         R10=R4;   /* CURRENT TCB ADDRESS TO START
*                                      SCAN                          */
         LR    R10,R4                                              0843
*                         R8=R4;    /* CURRENT TCB IS TOP OF TREE    */
         LR    R8,R4                                               0844
*                         R11=ADDR(LABCTL2);                       0845
         LA    R11,LABCTL2                                         0845
*                         DO WHILE(R10^=0);/* CAUSE LOOP UNTIL TRSCN
*                                      BRANCHES OUT OF IT            */
         B     @DE00846                                            0846
@DL00846 DS    0H                                                  0847
*                           CALL IEATRSCN;/* LOCATE NEXT SUBTASK TCB */
         L     @12,CVTPTR                                          0847
         L     @15,CVTRSCN(,@12)                                   0847
         BALR  @14,@15                                             0847
*                           R8=ESART2WA;/* RELOAD PTR FROM ESA     0848
*                                      BECAUSE DESTROYED BY TRSCN    */
         L     R8,ESART2WA+96(,R5)                                 0848
*                           IF R10->TCBFC^=ON THEN                 0849
         TM    TCBFC(R10),B'10000000'                              0849
         BO    @RF00849                                            0849
*                             DO;                                  0850
*                               RMPLTCBA=R10;/* PUT TCB ADDRESS INTO
*                                      RMPL FOR INITIAL PURGES       */
         ST    R10,RMPLTCBA+712(,R8)                               0851
*                               CALL RTCINPRG;/* PERFORM INITIAL   0852
*                                      PURGES                        */
         BAL   @14,RTCINPRG                                        0852
*                             END;                                 0853
*                           R8=R4;  /* RELOAD BECAUSE OF REG.      0854
*                                      CONFLICT                      */
@RF00849 LR    R8,R4                                               0854
*                         END;                                     0855
@DE00846 LTR   R10,R10                                             0855
         BNZ   @DL00846                                            0855
*LABCTL2:                                                          0856
*                         ;         /* REACHED AT END OF SECOND TREE
*                                      SCAN                          */
LABCTL2  DS    0H                                                  0857
*                         RESPECIFY                                0857
*                          (R10,                                   0857
*                           R8,                                    0857
*                           R11) UNRESTRICTED;                     0857
*                         RESPECIFY                                0858
*                          (R7,                                    0858
*                           R9) UNRESTRICTED;                      0858
*                         RESPECIFY                                0859
*                           R8 RESTRICTED;                         0859
*                         R8=ESART2WA;/* RESTORE WORK AREA PTR       */
         L     R8,ESART2WA+96(,R5)                                 0860
*                         RMPLTCBA=RTM2TCBC;/* RESTORE RMPL TCB PTR
*                                      TO CURRENT TCB                */
         L     @12,RTM2TCBC(,R8)                                   0861
         ST    @12,RMPLTCBA+712(,R8)                               0861
*                       END;        /* END OF RTCCSUB                */
*                       RTM2ISPC=ON;/* INDICATE INITIAL SUBTASK    0863
*                                      PROCESSING DONE               */
         OI    RTM2ISPC(R8),B'00010000'                            0863
*                       RTM2SKRA=0; /* CLEAR RECURSION ADDRESS       */
         SLR   @12,@12                                             0864
         ST    @12,RTM2SKRA(,R8)                                   0864
*                       RTM2SCTC(RTM2ISPS)='0'B;/* CLEAR SECTION FLAG*/
         NI    RTM2SCTC(R8),B'11111110'                            0865
*                     END;                                         0866
*RCR0038:                           /* CLEAR RECURSION CONTROL       */
*                 END;                                             0867
*               ELSE                                               0868
*                 ;                 /* BYPASS PROCESSING IF EXIT   0868
*                                      REQUESTED                     */
@RF00800 DS    0H                                                  0869
*             ELSE                  /* BYPASS PROCESSING IF        0869
*                                      PREVIOUSLY DONE               */
*               DO;                                                0869
         B     @RC00799                                            0869
@RF00799 DS    0H                                                  0870
*                 ESAGLREC=ON;                                     0870
         OI    ESAGLREC+96(R5),B'00010000'                         0870
*                 DO;               /* SETLOCK RELEASE TYPE(LOCAL)REL
*                                      ATED(TCB,IEAVTRTC(RTCSTACK))  */
*                   RESPECIFY                                      0872
*                    (GPR11P,                                      0872
*                     GPR12P,                                      0872
*                     GPR13P,                                      0872
*                     GPR14P) RESTRICTED;/* RESTRICT REGS USED BY  0872
*                                      SETLOCK                       */
*                   GENERATE REFS(PSALITA,FLC) SETS(GPR11P,GPR12P, 0873
*                       GPR13P,GPR14P);                            0873
         SETLOCK RELEASE,TYPE=LOCAL,                                   C
               RELATED=(TCB,IEAVTRTC(RTCSTACK))
*                   RESPECIFY                                      0874
*                    (GPR11P,                                      0874
*                     GPR12P,                                      0874
*                     GPR13P,                                      0874
*                     GPR14P) UNRESTRICTED;/* RELEASE REGS USED BY 0874
*                                      SETLOCK                       */
*                 END;              /* SETLOCK RELEASE TYPE(LOCAL)REL
*                                      ATED(TCB,IEAVTRTC(RTCSTACK))  */
*                 ESAGLREC=OFF;                                    0876
         NI    ESAGLREC+96(R5),B'11101111'                         0876
*               END;                                               0877
*           ELSE                                                   0878
*             ;                     /* NO SUBTASKS EXIST - LOCK NOT
*                                      HELD                          */
@RF00798 DS    0H                                                  0879
*         END;                      /* END SEGMENT RTCABCTL          */
*       ELSE                                                       0880
*         ;                         /* BYPASS PROCESSING IF EXIT   0880
*                                      REQUESTED                     */
@RF00616 DS    0H                                                  0881
*     END;                          /* END SEGMENT RTCAOR            */
*   ELSE                                                           0882
*     ;                             /* BYPASS ALL PROCESSING IF EXIT
*                                      REQUESTED                     */
@RF00568 DS    0H                                                  0883
*   RESPECIFY                                                      0883
*     R15 RESTRICTED;                                              0883
@RC00568 DS    0H                                                  0884
*   IF RTM2CERX=ON THEN             /* CHECK IF UNRECOVERABLE ERROR
*                                      OCCURRED                      */
         TM    RTM2CERX(R8),B'01000000'                            0884
         BNO   @RF00884                                            0884
*     R15=4;                        /* IF SO, RC = 4                 */
         LA    R15,4                                               0885
*   ELSE                                                           0886
*     R15=0;                        /* OTHERWISE RC = 0              */
         B     @RC00884                                            0886
@RF00884 SLR   R15,R15                                             0886
*   RMPLTERM=OFF;                   /* ENSURE BIT SETTING ACCURATE   */
@RC00884 NI    RMPLTERM+712(R8),B'10111111'                        0887
*   R13=ADDR(RTM2CREG);                                            0888
         LA    R13,RTM2CREG(,R8)                                   0888
*   RETURN CODE(R15);               /* RETURN TO IEAVTRT2            */
         L     @14,12(,@13)                                        0889
         LM    @00,@12,20(@13)                                     0889
         BR    @14                                                 0889
*   RESPECIFY                                                      0890
*     R15 UNRESTRICTED;                                            0890
*                                                                  0890
*   /*****************************************************************/
*   /*                                                               */
*   /* INTERNAL PROCEDURE RTCINPRG PERFORMS THE INITIAL PURGES FOR   */
*   /* THE TASK WHOSE TCB ADDRESS APPEARS IN RMPLTCBA. IT INCLUDES   */
*   /* SEGMENT RTCPLP TO PURGE I/O AND PARTIALLY LOADED PROGRAMS. IT */
*   /* THEN PURGES PAGING I/O FOR THE TASK AND RETURNS               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0891
*RTCINPRG:                                                         0891
*   PROCEDURE OPTIONS(NOSAVEAREA);                                 0891
RTCINPRG STM   @14,@12,12(@13)                                     0891
*   IF RMPLTCBA->TCBJSTCA=RMPLTCBA THEN/* JOBSTEP TCB                */
         LA    @12,712                                             0892
         ALR   @12,R8                                              0892
         L     @09,RMPLTCBA(,@12)                                  0892
         L     @07,TCBJSTCA-1(,@09)                                0892
         LA    @07,0(,@07)                                         0892
         CR    @09,@07                                             0892
         BNE   @RF00892                                            0892
*     RMPLJST=ON;                   /* SET FLAG IN RMPL              */
         OI    RMPLJST(@12),B'00000100'                            0893
*   ELSE                            /* NOT JOBSTEP TCB               */
*     RMPLJST=OFF;                  /* CLEAR FLAG IN RMPL            */
         B     @RC00892                                            0894
@RF00892 NI    RMPLJST+712(R8),B'11111011'                         0894
*   RESPECIFY                                                      0895
*     R10 RSTD;                                                    0895
@RC00892 DS    0H                                                  0896
*   R10=RMPLTCBA;                   /* SAVE TCB PTR IN REG IN CASE OF
*                                      RECUR                         */
*                                                                  0896
         L     R10,RMPLTCBA+712(,R8)                               0896
*   /*****************************************************************/
*   /*                                                               */
*   /* SET RECURSION CONTROL                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0897
*   GEN SETS(RTM2RREG)(STM   R0,R15,RTM2RREG(R8));/* SAVE REGISTERS
*                                      IN CASE OF RECURSION          */
         STM   R0,R15,RTM2RREG(R8)
*   RTM2WARG=R8INDEX;               /* INDICATE RTM2PTR REG (+1 TO 0898
*                                      USE IN INDEXING)              */
         MVI   RTM2WARG(R8),X'09'                                  0898
*   RTM2RBRG=R5INDEX;               /* INDICATE SVRB PTR             */
         MVI   RTM2RBRG(R8),X'06'                                  0899
*   RTM2TRRA=ADDR(RTCLBL1);         /* SET UP RECURSION ADDRESS TO 0900
*                                      SKIP FIRST TWO PURGES         */
*                                                                  0900
         LA    @12,RTCLBL1                                         0900
         ST    @12,RTM2TRRA(,R8)                                   0900
*   /*****************************************************************/
*   /*                                                               */
*   /* SEGMENT RTCPLP PURGES I/O AND PARTIALLY LOADED PROGRAMS FOR   */
*   /* THE TASK WHOSE TCB ADDRESS IS PASSED IN THE RMPLTCBA FIELD.   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0901
*   DO;                             /* START OF RTCPLP               */
*                                                                  0901
*     /***************************************************************/
*     /*                                                             */
*     /* PURGE I/O                                                   */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0902
*     RESPECIFY                                                    0902
*       R1 RESTRICTED;                                             0902
*     R1=ADDR(RTM2RMWS);                                           0903
         LA    R1,RTM2RMWS(,R8)                                    0903
*     PPL=''B;                      /* CLEAR PURGE PARM LIST         */
         XC    PPL(16,R1),PPL(R1)                                  0904
*     PPLHIO=ON;                    /* REQUEST HALTING               */
*     PPLTASK=ON;                   /* PURGE SINGLE TCB              */
         OI    PPLHIO(R1),B'00100010'                              0906
*     PPLTCB=RMPLTCBA;              /* SET UP TCB ADDRESS OF TASK FOR
*                                      WHICH I/O IS TO BE HALTED     */
         L     @12,RMPLTCBA+712(,R8)                               0907
         ST    @12,PPLTCB(,R1)                                     0907
*     SVC(IOPURGE);                 /* PURGE I/O                     */
*                                                                  0908
         SVC   16                                                  0908
*     /***************************************************************/
*     /*                                                             */
*     /* PURGE PARTIALLY LOADED PROGRAMS                             */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0909
*     ESAGLREC=ON;                  /* SET FLAG TO DETECT RECURSION  */
         OI    ESAGLREC+96(R5),B'00010000'                         0909
*     DO;                           /* SETLOCK OBTAIN TYPE(LOCAL)MODE
*                                      (UNCOND)RELATED(CDE,IEAVTRTC(R
*                                      TCPLP))                       */
*       RESPECIFY                                                  0911
*        (GPR11P,                                                  0911
*         GPR12P,                                                  0911
*         GPR13P,                                                  0911
*         GPR14P) RESTRICTED;       /* RESTRICT REGS USED BY SETLOCK */
*       GENERATE REFS(PSALITA,FLC) SETS(GPR11P,GPR12P,GPR13P,GPR14P);
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                        C
               RELATED=(CDE,IEAVTRTC(RTCPLP))
*       RESPECIFY                                                  0913
*        (GPR11P,                                                  0913
*         GPR12P,                                                  0913
*         GPR13P,                                                  0913
*         GPR14P) UNRESTRICTED;     /* RELEASE REGS USED BY SETLOCK  */
*     END;                          /* SETLOCK OBTAIN TYPE(LOCAL)MODE
*                                      (UNCOND)RELATED(CDE,IEAVTRTC(R
*                                      TCPLP))                       */
*     ESAGLREC=OFF;                 /* SETLOCK COMPLETED SUCCESSFULLY*/
         NI    ESAGLREC+96(R5),B'11101111'                         0915
*     R1=ADDR(RTM2RMPS);            /* LOCATE ADDRESS OF RMPL        */
         LA    R1,RTM2RMPS(,R8)                                    0916
*     R13=ADDR(RTM2RMSA);                                          0917
         LA    R13,RTM2RMSA(,R8)                                   0917
*     CALL IEAPPGMA;                /* PURGE PARTIALLY LOADED      0918
*                                      PROGRAMS                      */
         L     @12,CVTPTR                                          0918
         L     @15,CVTPARRL(,@12)                                  0918
         BALR  @14,@15                                             0918
*     RESPECIFY                                                    0919
*      (R1) UNRESTRICTED;                                          0919
*     ESAGLREC=ON;                                                 0920
         OI    ESAGLREC+96(R5),B'00010000'                         0920
*     DO;                           /* SETLOCK RELEASE TYPE(LOCAL)REL
*                                      ATED(CDE,IEAVTRTC(RTCPLP))    */
*       RESPECIFY                                                  0922
*        (GPR11P,                                                  0922
*         GPR12P,                                                  0922
*         GPR13P,                                                  0922
*         GPR14P) RESTRICTED;       /* RESTRICT REGS USED BY SETLOCK */
*       GENERATE REFS(PSALITA,FLC) SETS(GPR11P,GPR12P,GPR13P,GPR14P);
         SETLOCK RELEASE,TYPE=LOCAL,                                   C
               RELATED=(CDE,IEAVTRTC(RTCPLP))
*       RESPECIFY                                                  0924
*        (GPR11P,                                                  0924
*         GPR12P,                                                  0924
*         GPR13P,                                                  0924
*         GPR14P) UNRESTRICTED;     /* RELEASE REGS USED BY SETLOCK  */
*     END;                          /* SETLOCK RELEASE TYPE(LOCAL)REL
*                                      ATED(CDE,IEAVTRTC(RTCPLP))    */
*     ESAGLREC=OFF;                                                0926
         NI    ESAGLREC+96(R5),B'11101111'                         0926
*   END;                            /* END OF RTCPLP                 */
*   RTM2TRRA=0;                     /* CLEAR RECURSION ADDRESS       */
         SLR   @12,@12                                             0928
         ST    @12,RTM2TRRA(,R8)                                   0928
*RTCLBL1:                           /* REACHED IF FAILURE OCCURS IN
*                                      FIRST PURGES                  */
*   RMPLTCBA=R10;                   /* RESTORE RMPL TCB PTR-NECESSARY
*                                      FOR RECURSION                 */
RTCLBL1  ST    R10,RMPLTCBA+712(,R8)                               0929
*   RESPECIFY                                                      0930
*     R10 UNRESTRICTED;                                            0930
*                                                                  0930
*   /*****************************************************************/
*   /*                                                               */
*   /* PURGE TASK'S PAGING I/O                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0931
*   GEN SETS(RTM2RREG)(STM   R0,R15,RTM2RREG(R8));/* SAVE REGISTERS
*                                      IN CASE OF RECURSION          */
         STM   R0,R15,RTM2RREG(R8)
*   RTM2TRRA=ADDR(RTCLBL2);         /* SET UP RECURSION ADDRESS TO 0932
*                                      SKIP THIS PURGE               */
         LA    @12,RTCLBL2                                         0932
         ST    @12,RTM2TRRA(,R8)                                   0932
*   RMPLIPUF=ON;                    /* SET FLAG TO PREVENT FREEING OF
*                                      FIXED PAGES                   */
         OI    RMPLIPUF+712(R8),B'00010000'                        0933
*   RESPECIFY                                                      0934
*    (R1) RESTRICTED;               /* RESTRICT INTERFACE REGISTERS  */
*   R1=ADDR(RTM2RMPS);              /* LOCATE POINTER TO RMPL        */
         LA    R1,RTM2RMPS(,R8)                                    0935
*   R13=ADDR(RTM2RMSA);             /* LOCATE RESOURCE MANAGER SAVE
*                                      AREA                          */
         LA    R13,RTM2RMSA(,R8)                                   0936
*   CALL IEAPTERM;                  /* PURGE PAGING I/O              */
         L     @12,CVTPTR                                          0937
         L     @12,SCVTSPTR(,@12)                                  0937
         L     @15,SCVTPTRM(,@12)                                  0937
         BALR  @14,@15                                             0937
*   RESPECIFY                                                      0938
*     R1 UNRESTRICTED;              /* RELEASE PARAMETER REGISTER    */
*   RTM2TRRA=0;                     /* CLEAR SUBFUNCTION RECURSION 0939
*                                      ENVIRONMENT                   */
         SLR   @12,@12                                             0939
         ST    @12,RTM2TRRA(,R8)                                   0939
*   RTM2WARG=0;                     /* CLEAR REG INDICATORS          */
         MVI   RTM2WARG(R8),X'00'                                  0940
*   RTM2RBRG=0;                                                    0941
         MVI   RTM2RBRG(R8),X'00'                                  0941
*RTCLBL2:                           /* REACHED WHEN PURGE FAILS      */
*   RMPLIPUF=OFF;                   /* CLEAR PARAMETER FLAG          */
RTCLBL2  NI    RMPLIPUF+712(R8),B'11101111'                        0942
*   R13=ADDR(RTM2SFSA);             /* RESTORE ADDRESS OF SAVEAREA 0943
*                                      PROVIDED BY CALLER            */
         LA    R13,RTM2SFSA(,R8)                                   0943
*   RETURN;                                                        0944
@EL00002 DS    0H                                                  0944
@EF00002 DS    0H                                                  0944
@ER00002 LM    @14,@12,12(@13)                                     0944
         BR    @14                                                 0944
*   END RTCINPRG;                                                  0945
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR11P PTR(31) REG(11),                                      0946
*     GPR12P PTR(31) REG(12),                                      0946
*     GPR13P PTR(31) REG(13),                                      0946
*     GPR14P PTR(31) REG(14);                                      0946
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0947
*     I031F FIXED(31) BASED,                                       0947
*     I031P PTR(31) BASED,                                         0947
*     I015F FIXED(15) BASED,                                       0947
*     I015P PTR(15) BASED,                                         0947
*     I008P PTR(8) BASED,                                          0947
*     I001C CHAR(1) BASED;                                         0947
*   END IEAVTRTC                                                   0948
*                                                                  0948
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (RTCTSTVR)                                       */
*/*%INCLUDE SYSLIB  (RTCSPEC )                                       */
*/*%INCLUDE SYSLIB  (RTCDCL  )                                       */
*/*%INCLUDE SYSLIB  (IHARTM2A)                                       */
*/*%INCLUDE SYSLIB  (IHASNP  )                                       */
*/*%INCLUDE SYSLIB  (IHARMPL )                                       */
*/*%INCLUDE SYSLIB  (RTM2ESA )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IHAASXB )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHASCVT )                                       */
*/*%INCLUDE SYSLIB  (IHAIQE  )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHARB   )                                       */
*/*%INCLUDE SYSLIB  (IKJRB   )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IECDPPL )                                       */
*/*%INCLUDE SYSLIB  (RTCPATCH)                                       */
*/*%INCLUDE SYSLIB  (RTCTLRCR)                                       */
*/*%INCLUDE SYSLIB  (RTCRVRB )                                       */
*/*%INCLUDE SYSLIB  (RTCTRINT)                                       */
*/*%INCLUDE SYSLIB  (RTCSCOPE)                                       */
*/*%INCLUDE SYSLIB  (RTCFIQE )                                       */
*/*%INCLUDE SYSLIB  (RTCFIQE )                                       */
*/*%INCLUDE SYSLIB  (RTCCNCL )                                       */
*/*%INCLUDE SYSLIB  (RTCCSUB )                                       */
*/*%INCLUDE SYSLIB  (RTCCSUB )                                       */
*/*%INCLUDE SYSLIB  (RTCNORTY)                                       */
*/*%INCLUDE SYSLIB  (RTCADINT)                                       */
*/*%INCLUDE SYSLIB  (RTCADINF)                                       */
*/*%INCLUDE SYSLIB  (RTCAOR  )                                       */
*/*%INCLUDE SYSLIB  (RTCABCTL)                                       */
*/*%INCLUDE SYSLIB  (RTCTEINT)                                       */
*/*%INCLUDE SYSLIB  (RTCSTACK)                                       */
*/*%INCLUDE SYSLIB  (RTCSTKPR)                                       */
*/*%INCLUDE SYSLIB  (RTCFTCB )                                       */
*/*%INCLUDE SYSLIB  (RTCPTCB )                                       */
*/*%INCLUDE SYSLIB  (RTCINPRG)                                       */
*/*%INCLUDE SYSLIB  (RTCPLP  )                                       */
*                                                                  0948
*       ;                                                          0948
@DATA    DS    0H
@DATD    DSECT
         DS    0F
IEAVTRTC CSECT
         DS    0F
@CF00071 DC    F'1'
@CF00102 DC    F'4'
@CF00470 DC    F'64'
@CF02723 DC    F'-8'
@CF02720 DC    F'-4'
@CF00050 DC    XL4'00022000'
@CF00052 DC    XL4'000FF000'
@CF00085 DC    XL4'00400005'
@DATD    DSECT
         DS    0D
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEAVTRTC CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00098 DC    V(IEAVTABD)
@CV00099 DC    V(IEAVTAS1)
@CV00100 DC    V(IEAVTPMT)
         DS    0D
@CB00073 DC    X'00000000'
@CB00055 DC    X'20D000'
@CB00057 DC    X'D0D000'
@CB00059 DC    X'13E000'
@CB00061 DC    X'33E000'
@CB00083 DC    X'10D000'
@CB00069 EQU   @CB00073
         DS    CL1
RTCPATCH DC    CL160'PATCH AREA'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
R6       EQU   @06
R3       EQU   @03
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R4       EQU   @04
R5       EQU   @05
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R15      EQU   @15
GPR11P   EQU   @11
GPR12P   EQU   @12
GPR13P   EQU   @13
GPR14P   EQU   @14
R14      EQU   @14
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
IEAPPGMA EQU   0
IEAPTERM EQU   0
IEATRSCN EQU   0
MANPURGE EQU   0
POST     EQU   0
STATUS   EQU   0
SNPPARMS EQU   0
SNPFLAG  EQU   SNPPARMS+1
SNPSLIST EQU   SNPFLAG
SNPSDATA EQU   SNPPARMS+4
SNPSDAT0 EQU   SNPSDATA
SNPSDAT1 EQU   SNPSDATA+1
SNPPDATA EQU   SNPPARMS+6
SNPTCBA  EQU   SNPPARMS+12
SNPSTOR  EQU   SNPPARMS+16
RMPL     EQU   0
RMPLFLG1 EQU   RMPL
RMPLTERM EQU   RMPLFLG1
RMPLIPUF EQU   RMPLFLG1
RMPLJST  EQU   RMPLFLG1
RMPLWT1M EQU   RMPLFLG1
RMPLTCBA EQU   RMPL+8
RTM2WA   EQU   0
RTM2DESC EQU   RTM2WA
RTM2RT2D EQU   RTM2DESC+8
RTM2TCBC EQU   RTM2WA+16
RTM2ASC  EQU   RTM2WA+24
RTM2CODE EQU   RTM2WA+28
RTM2CCF  EQU   RTM2CODE
RTM2DREQ EQU   RTM2CCF
RTM2STEP EQU   RTM2CCF
RTM2R0DP EQU   RTM2CCF
RTM2CC   EQU   RTM2CODE+1
RTM2TCBT EQU   RTM2WA+48
RTM2PGCY EQU   RTM2WA+60
RTM2TRRY EQU   RTM2PGCY
RTM2EEDR EQU   RTM2TRRY
RTM2EREG EQU   RTM2EEDR
RTM2APSW EQU   RTM2EEDR+64
RTM2EPSW EQU   RTM2APSW
RTM2EMK1 EQU   RTM2EPSW
RTM2MWP1 EQU   RTM2EPSW+1
RTM2INT1 EQU   RTM2EPSW+2
RTM2NXT1 EQU   RTM2EPSW+4
RTM2AEC1 EQU   RTM2APSW+8
RTM2ILC1 EQU   RTM2AEC1+1
RTM2INC1 EQU   RTM2AEC1+2
RTM2ICD1 EQU   RTM2INC1+1
RTM2EEDH EQU   RTM2TRRY+92
RTM2STCK EQU   RTM2EEDH
RTM2MCHI EQU   RTM2EEDH+8
RTM2MCHS EQU   RTM2MCHI
RTM2MCHD EQU   RTM2MCHI+1
RTM2RSR1 EQU   RTM2EEDH+12
RTM2RSR2 EQU   RTM2EEDH+13
RTM2FLGS EQU   RTM2TRRY+120
RTM2ERRA EQU   RTM2FLGS
RTM2ABTM EQU   RTM2ERRA
RTM2ERRB EQU   RTM2FLGS+1
RTM2ERRC EQU   RTM2FLGS+2
RTM2ERRD EQU   RTM2FLGS+3
RTM2CLUP EQU   RTM2ERRD
RTM2CVER EQU   RTM2WA+186
RTM2TRRC EQU   RTM2CVER
RTM2IOFS EQU   RTM2TRRC
RTM2IOBP EQU   RTM2TRRC+2
RTM2SCBS EQU   RTM2TRRC+14
RTM2SCBC EQU   RTM2SCBS
RTM2SCBO EQU   RTM2SCBS+8
RTM2RTCD EQU   RTM2TRRC+26
RTM2SPLL EQU   RTM2RTCD+4
RTM2RYRB EQU   RTM2TRRC+42
RTM2PARQ EQU   RTM2TRRC+46
RTM2CTL1 EQU   RTM2CVER+50
RTM2CMKA EQU   RTM2CTL1
RTM2MWPA EQU   RTM2CTL1+1
RTM2PMKA EQU   RTM2CTL1+4
RTM2CTL2 EQU   RTM2CVER+58
RTM2CMKP EQU   RTM2CTL2
RTM2MWPP EQU   RTM2CTL2+1
RTM2PMKP EQU   RTM2CTL2+4
RTM2SNAP EQU   RTM2CVER+66
RTM2DPLA EQU   RTM2SNAP
RTM2SPRM EQU   RTM2SNAP+4
RTM2DPSL EQU   RTM2SNAP+24
RTM2FRM1 EQU   RTM2DPSL
RTM2TO1  EQU   RTM2DPSL+4
RTM2FRM2 EQU   RTM2DPSL+8
RTM2TO2  EQU   RTM2DPSL+12
RTM2FRM3 EQU   RTM2DPSL+16
RTM2TO3  EQU   RTM2DPSL+20
RTM2FRM4 EQU   RTM2DPSL+24
RTM2TO4  EQU   RTM2DPSL+28
RTM2DTCB EQU   RTM2SNAP+68
RTM2SECB EQU   RTM2CVER+138
RTM2ECBA EQU   RTM2SECB
RTM2LECB EQU   RTM2ECBA
RTM2ECBS EQU   RTM2SECB+16
RTM2PREV EQU   RTM2CVER+178
RTM2PRWA EQU   RTM2CVER+182
RTM2SFRG EQU   RTM2CVER+186
RTM2SFSA EQU   RTM2SFRG
RTM2PKEY EQU   RTM2CVER+258
RTM2SCTL EQU   RTM2CVER+259
RTM2CCTL EQU   RTM2SCTL
RTM2STPT EQU   RTM2CCTL
RTM2CNCL EQU   RTM2CCTL
RTM2ISPC EQU   RTM2CCTL
RTM2CONT EQU   RTM2CCTL
RTM2RSCN EQU   RTM2CCTL+1
RTM2DEND EQU   RTM2CCTL+1
RTM2ABDR EQU   RTM2SCTL+4
RTM2ABID EQU   RTM2ABDR
RTM2ABND EQU   RTM2ABDR+1
RTM2RCTL EQU   RTM2SCTL+6
RTM2INTF EQU   RTM2CVER+266
RTM2CTLR EQU   RTM2INTF
RTM2RECR EQU   RTM2CTLR
RTM2RETR EQU   RTM2CTLR
RTM2WRAP EQU   RTM2CTLR
RTM2TSKT EQU   RTM2INTF+2
RTM2PURG EQU   RTM2TSKT
RTM2ABDP EQU   RTM2INTF+4
RTM2DMP1 EQU   RTM2ABDP
RTM2ASIR EQU   RTM2INTF+5
RTM2TRME EQU   RTM2ASIR
RTM2FLX  EQU   RTM2INTF+6
RTM2FLX1 EQU   RTM2FLX
RTM2DWX  EQU   RTM2FLX1
RTM2RTRX EQU   RTM2FLX1
RTM2FLX2 EQU   RTM2FLX+1
RTM2RCRX EQU   RTM2FLX2
RTM2CERX EQU   RTM2FLX2
RTM2RECL EQU   RTM2CVER+274
RTM2SCTC EQU   RTM2RECL
RTM2SCTR EQU   RTM2RECL+4
RTM2SCTX EQU   RTM2RECL+8
RTM2DCTL EQU   RTM2RECL+12
RTM2ECTL EQU   RTM2RECL+13
RTM2TRYR EQU   RTM2RECL+16
RTM2TRF1 EQU   RTM2TRYR
RTM2AS1R EQU   RTM2TRF1+1
RTM2TRF2 EQU   RTM2TRYR+2
RTM2RECH EQU   RTM2CVER+294
RTM2TRRA EQU   RTM2RECH
RTM2SKRA EQU   RTM2RECH+4
RTM2CTRA EQU   RTM2RECH+12
RTM2WARG EQU   RTM2CVER+312
RTM2RBRG EQU   RTM2CVER+313
RTM2RRG  EQU   RTM2CVER+314
RTM2RREG EQU   RTM2RRG
RTM2CRG  EQU   RTM2CVER+378
RTM2CREG EQU   RTM2CRG
RTM2RMIN EQU   RTM2WA+708
RTM2RMPS EQU   RTM2RMIN
RTM2RMPL EQU   RTM2RMIN+4
RTM2RMWA EQU   RTM2RMIN+28
RTM2RMWS EQU   RTM2RMWA
RTM2RMSA EQU   RTM2RMIN+92
RTM2ERID EQU   RTM2WA+872
RTM2ENSN EQU   RTM2WA+884
RTM2SNLN EQU   RTM2ENSN
RTM2RYRG EQU   RTM2WA+904
STORAGE  EQU   0
STORFRM  EQU   STORAGE
STORTO   EQU   STORAGE+4
STORBTO  EQU   STORTO
RTM2ESA  EQU   0
ESAREGS  EQU   RTM2ESA
ESAR0    EQU   ESAREGS
ESAR1    EQU   ESAREGS+4
ESACCF1  EQU   ESAR1
ESART2WA EQU   RTM2ESA+32
ESART2D  EQU   RTM2ESA+36
ESAFLAGS EQU   RTM2ESA+40
ESAABTRM EQU   ESAFLAGS
ESAPGNLY EQU   ESAFLAGS
ESACTS   EQU   ESAFLAGS
ESARFLAG EQU   RTM2ESA+41
ESAGLREC EQU   ESARFLAG
ESARTCR  EQU   ESARFLAG
ESACMP   EQU   RTM2ESA+44
ESACCF   EQU   ESACMP
ESADREQ  EQU   ESACCF
ESACC    EQU   ESACMP+1
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBRSM  EQU   ASCB+52
ASCBRSMF EQU   ASCBRSM
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBASXB EQU   ASCB+108
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
ASXB     EQU   0
ASXBAEQ  EQU   ASXB+168
ASXBFIQE EQU   ASXBAEQ
ASXBLIQE EQU   ASXBAEQ+4
ASXBSECR EQU   ASXB+199
ASCBSFLG EQU   ASXBSECR
ASXBCASW EQU   ASXB+216
ASXBCRB1 EQU   ASXBCASW
CVTMAP   EQU   0
CVTBTERM EQU   CVTMAP+52
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVT0PT01 EQU   CVTMAP+152
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTABEND EQU   CVTMAP+200
CVTUSER  EQU   CVTMAP+204
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
SCVTSECT EQU   0
SCVTSTAT EQU   SCVTSECT+148
SCVTPTRM EQU   SCVTSECT+164
IQESECT  EQU   0
IQELNK   EQU   IQESECT
IQELNKA  EQU   IQELNK+1
IQEIRB   EQU   IQESECT+8
IQEFLAGS EQU   IQEIRB
IQEPURGE EQU   IQEFLAGS
IQETCB   EQU   IQESECT+12
IQETCBA  EQU   IQETCB+1
RBPRFX   EQU   0
RBBASIC  EQU   0
RBEXRTNM EQU   RBBASIC
RBTMFLD  EQU   RBEXRTNM
RBSTAB   EQU   RBBASIC+10
XSTAB    EQU   RBSTAB
RBSTAB1  EQU   XSTAB
XSTAB1   EQU   RBSTAB1
RBFTCKPT EQU   XSTAB1
RBSTAB2  EQU   XSTAB+1
XSTAB2   EQU   RBSTAB2
RBTCBNXT EQU   XSTAB2
RBFACTV  EQU   XSTAB2
RBFDYN   EQU   XSTAB2
RBECBWT  EQU   XSTAB2
RBOPSW   EQU   RBBASIC+16
XRBPSW   EQU   RBOPSW
RBOPSWB2 EQU   XRBPSW+1
RBLINK   EQU   RBBASIC+28
XRBLNK   EQU   RBLINK
RBWCF    EQU   XRBLNK
RBLINKB  EQU   XRBLNK+1
RBGRSAVE EQU   RBBASIC+32
XRBREG   EQU   RBGRSAVE
RBGRS0   EQU   XRBREG
RBGRS1   EQU   XRBREG+4
RBGRS2   EQU   XRBREG+8
RBGRS3   EQU   XRBREG+12
RBGRS4   EQU   XRBREG+16
RBGRS5   EQU   XRBREG+20
RBGRS6   EQU   XRBREG+24
RBGRS7   EQU   XRBREG+28
RBGRS8   EQU   XRBREG+32
RBGRS9   EQU   XRBREG+36
RBGRS10  EQU   XRBREG+40
RBGRS11  EQU   XRBREG+44
RBGRS12  EQU   XRBREG+48
RBGRS13  EQU   XRBREG+52
RBGRS14  EQU   XRBREG+56
RBGRS15  EQU   XRBREG+60
XRBESA   EQU   RBBASIC+96
RBEXSAVE EQU   XRBESA
RBPREFIX EQU   0
RBRSV019 EQU   RBPREFIX+14
RBRSV028 EQU   RBPREFIX+15
RBRSV041 EQU   RBPREFIX+27
RBRSV054 EQU   RBPREFIX+39
RBRTOPSW EQU   RBPREFIX+40
RBRTPSW2 EQU   RBRTOPSW+8
RBRTICIL EQU   RBRTPSW2
RBFLAGS1 EQU   RBPREFIX+56
RBABEND  EQU   RBFLAGS1
RBINTCDA EQU   RBPREFIX+61
RBSECT   EQU   0
RBPPSAV  EQU   RBSECT
@NM00116 EQU   RBSECT+10
@NM00117 EQU   @NM00116
RBTRSVRB EQU   @NM00117
@NM00119 EQU   @NM00116+1
RBETXR   EQU   @NM00119
RBEP     EQU   RBSECT+12
RBPGMQ   EQU   RBSECT+24
@NM00126 EQU   RBSECT+28
@NM00127 EQU   @NM00126
IRBEND   EQU   RBSECT+96
@NM00130 EQU   RBSECT+96
RBRSV138 EQU   @NM00130+7
RBSCBB   EQU   RBSECT+144
RBSPARM  EQU   RBSCBB+8
RBSFLGS1 EQU   RBSPARM
RBSIOPRC EQU   RBSFLGS1
RBSOWNR  EQU   RBSCBB+12
RBSFLGS2 EQU   RBSOWNR
RBSDATA  EQU   RBSCBB+16
RBSFLG3  EQU   RBSDATA
RBRSV150 EQU   RBSECT+167
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBRBP   EQU   TCB
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBCMPC  EQU   TCBCMP+1
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFA    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBFX    EQU   TCBFLGS1
TCBFLGS2 EQU   TCBFLGS+1
TCBFJMC  EQU   TCBFLGS2
TCBFLGS3 EQU   TCBFLGS+2
TCBABTRM EQU   TCBFLGS3
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBFC    EQU   TCBFLGS5
TCBABWF  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBJSTCA EQU   TCBJSTCB+1
TCBNTC   EQU   TCB+128
TCBOTC   EQU   TCB+132
TCBLTC   EQU   TCB+136
TCBECB   EQU   TCB+144
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCB33E   EQU   TCBNSTAE
TCBSTABB EQU   TCBSTAB+1
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBXSCT  EQU   TCB+240
TCBXSCT1 EQU   TCBXSCT
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBETERM EQU   TCBESTRM
TCBFBYT1 EQU   TCB+276
TCBEOTFM EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBFBYT2 EQU   TCB+277
TCBCNCB  EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
PPL      EQU   0
PPLDSID  EQU   PPL
PPLOPT1  EQU   PPLDSID
PPLHIO   EQU   PPLOPT1
PPLTASK  EQU   PPLOPT1
PPLTCB   EQU   PPL+4
PPLPIRL  EQU   PPL+8
PPLOPT2  EQU   PPL+12
IQEEND   EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
ASCBPTR  EQU   RTM2ASC
ASXBPTR  EQU   ASCBASXB
CVTPTR   EQU   FLCCVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRSCN  EQU   CVTS01+56
CVTPARRL EQU   CVTS01+280
CVTRENQ  EQU   CVTS01+300
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
SCVTSPTR EQU   CVTABEND
FLC      EQU   PSA
PSARSVTE EQU   PSARSVT
RBSECS03 EQU   RBEP
RBCDE    EQU   RBSECS03
RBCDFLGS EQU   RBCDE
RBSECS05 EQU   RBPGMQ
RBSQE    EQU   RBSECS05
RBSECS06 EQU   RBPGMQ
RBIQE    EQU   RBSECS06
RBSECS07 EQU   RBPGMQ
RBIQE2   EQU   RBSECS07
RBSECS08 EQU   IRBEND
RBSECS09 EQU   IRBEND
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
RBRSV161 EQU   RBSECS09+64
RBSIRBWA EQU   RBSECS09
RBIQEWRK EQU   RBSECS08+4
RBNEXAV  EQU   RBSECS08
RBIQEA   EQU   RBIQE2
RBIQE1   EQU   RBIQE+1
RBUSE    EQU   RBIQE
RBSQEA   EQU   RBSQE+1
@NM00131 EQU   RBSQE
RBCDE1   EQU   RBCDE+1
RBCDLOAD EQU   RBCDFLGS
RBCDXCTL EQU   RBCDFLGS
RBCDSYNC EQU   RBCDFLGS
RBCDNODE EQU   RBCDFLGS
RBRSV010 EQU   RBCDFLGS
RBCDATCH EQU   RBCDFLGS
RBRSV009 EQU   RBCDFLGS
RBNOCELL EQU   RBCDFLGS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
PPLEND   EQU   PPL+16
PPLASID  EQU   PPL+14
@NM00139 EQU   PPL+13
@NM00138 EQU   PPLOPT2
PPLBSS   EQU   PPLOPT2
PPLTSKM  EQU   PPLOPT2
PPLOTCB  EQU   PPLOPT2
PPLVC    EQU   PPLOPT2
PPLMEM   EQU   PPLOPT2
@NM00137 EQU   PPLOPT2
PPLCAN   EQU   PPLOPT2
PPLPIRLA EQU   PPLPIRL+1
PPLDVRID EQU   PPLPIRL
PPLTCBA  EQU   PPLTCB+1
PPLCC    EQU   PPLTCB
PPLDSIDA EQU   PPLDSID+1
PPLEXR   EQU   PPLOPT1
PPLRB    EQU   PPLOPT1
@NM00136 EQU   PPLOPT1
PPLREL   EQU   PPLOPT1
PPLPOST  EQU   PPLOPT1
PPLDS    EQU   PPLOPT1
@NM00135 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBRV143 EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00134 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBRV327 EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBRV326 EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBSTAWA EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBCCPVI EQU   TCBXSCT+2
TCBRV325 EQU   TCBXSCT+1
TCBRV324 EQU   TCBXSCT1
TCBRV323 EQU   TCBXSCT1
TCBRV322 EQU   TCBXSCT1
TCBRV321 EQU   TCBXSCT1
TCBRV320 EQU   TCBXSCT1
TCBRV319 EQU   TCBXSCT1
TCBS3A   EQU   TCBXSCT1
TCBACTIV EQU   TCBXSCT1
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00133 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBIQE   EQU   TCB+140
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFS    EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00132 EQU   TCBPMASK
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
SVRBEND  EQU   RBSECT+192
RBFEPARM EQU   RBSECT+168
SIRBEND  EQU   RBSECT+168
RBRSV158 EQU   RBRSV150
RBRSV157 EQU   RBRSV150
RBRSV156 EQU   RBRSV150
RBRSV155 EQU   RBRSV150
RBRSV154 EQU   RBRSV150
RBRSV153 EQU   RBRSV150
RBRSV152 EQU   RBRSV150
RBRSV151 EQU   RBRSV150
RBRSV149 EQU   RBSECT+166
RBRSV148 EQU   RBSECT+164
RBRSV169 EQU   RBSDATA+3
RBSID    EQU   RBSDATA+2
RBSPKEY  EQU   RBSDATA+1
RBRSV168 EQU   RBSFLG3
RBSTERMO EQU   RBSFLG3
RBSBRNTR EQU   RBSFLG3
RBSPRNTR EQU   RBSFLG3
RBSCNCEL EQU   RBSFLG3
RBSRECRD EQU   RBSFLG3
RBSTERMI EQU   RBSFLG3
RBRSV167 EQU   RBSFLG3
RBSOWNRA EQU   RBSOWNR+1
RBSSUPER EQU   RBSFLGS2
RBSKEY0  EQU   RBSFLGS2
RBRSV166 EQU   RBSFLGS2
RBRSV165 EQU   RBSFLGS2
RBSINUSE EQU   RBSFLGS2
RBRSV164 EQU   RBSFLGS2
RBSXCTL2 EQU   RBSFLGS2
RBRSV163 EQU   RBSFLGS2
RBSPARMA EQU   RBSPARM+1
RBSHALT  EQU   RBSIOPRC
RBSNOIOP EQU   RBSIOPRC
RBSASYNC EQU   RBSFLGS1
RBRSV162 EQU   RBSFLGS1
RBSESTAE EQU   RBSFLGS1
RBSDUMMY EQU   RBSFLGS1
RBSSTAR  EQU   RBSFLGS1
RBSSTAI  EQU   RBSFLGS1
RBSEXIT  EQU   RBSCBB+4
RBSCHAIN EQU   RBSCBB
TIRBEND  EQU   @NM00130+8
PRBEND   EQU   @NM00130+8
RBRSV146 EQU   RBRSV138
RBRSV145 EQU   RBRSV138
RBRSV144 EQU   RBRSV138
RBRSV143 EQU   RBRSV138
RBRSV142 EQU   RBRSV138
RBRSV141 EQU   RBRSV138
RBRSV140 EQU   RBRSV138
RBRSV139 EQU   RBRSV138
RBRSV137 EQU   @NM00130+6
RBRSV136 EQU   @NM00130+4
RBRSV135 EQU   @NM00130
@NM00129 EQU   RBSECT+32
@NM00128 EQU   @NM00126+1
RBSCF    EQU   @NM00127
RBPGMQ1  EQU   RBPGMQ+1
@NM00125 EQU   RBPGMQ
@NM00124 EQU   RBSECT+16
@NM00123 EQU   @NM00119
@NM00122 EQU   @NM00119
RBIQETP  EQU   @NM00119
RBUSIQE  EQU   RBETXR
RBATTN   EQU   @NM00119
@NM00121 EQU   @NM00119
@NM00120 EQU   @NM00119
RBPMSVRB EQU   @NM00117
RBATNXIT EQU   @NM00117
@NM00118 EQU   @NM00117
RBWAITP  EQU   @NM00117
RBFNSVRB EQU   RBTRSVRB
RBFTP    EQU   @NM00117
RBSIZE   EQU   RBSECT+8
RBABOPSW EQU   RBSECT+4
RBPPSAV1 EQU   RBPPSAV+1
@NM00115 EQU   RBPPSAV
RBPRFXND EQU   RBPREFIX+64
RBINTCOD EQU   RBINTCDA+1
RBINLNTH EQU   RBINTCDA
RBWCSA   EQU   RBPREFIX+60
RBRSV004 EQU   RBPREFIX+57
RBSSSYN  EQU   RBFLAGS1
RBSCB    EQU   RBFLAGS1
RBLONGWT EQU   RBFLAGS1
RBASIR   EQU   RBFLAGS1
RBRSV159 EQU   RBFLAGS1
RBXWAIT  EQU   RBFLAGS1
RBSLOCK  EQU   RBFLAGS1
RBRTRAN  EQU   RBRTPSW2+4
RBRTINCD EQU   RBRTICIL+2
RBRTILC  EQU   RBRTICIL+1
RBRSV160 EQU   RBRTICIL
RBRTPSW1 EQU   RBRTOPSW
RBRSV062 EQU   RBRSV054
RBRSV061 EQU   RBRSV054
RBRSV060 EQU   RBRSV054
RBRSV059 EQU   RBRSV054
RBRSV058 EQU   RBRSV054
RBRSV057 EQU   RBRSV054
RBRSV056 EQU   RBRSV054
RBRSV055 EQU   RBRSV054
RBRSV053 EQU   RBPREFIX+38
RBRSV052 EQU   RBPREFIX+36
RBRSV051 EQU   RBPREFIX+32
RBPRFXST EQU   RBPREFIX+32
RBRSV050 EQU   RBPREFIX+28
RBRSV049 EQU   RBRSV041
RBRSV048 EQU   RBRSV041
RBRSV047 EQU   RBRSV041
RBRSV046 EQU   RBRSV041
RBRSV045 EQU   RBRSV041
RBRSV044 EQU   RBRSV041
RBRSV043 EQU   RBRSV041
RBRSV042 EQU   RBRSV041
RBRSV040 EQU   RBPREFIX+26
RBRSV039 EQU   RBPREFIX+24
RBRSV038 EQU   RBPREFIX+20
RBRSV037 EQU   RBPREFIX+16
RBRSV036 EQU   RBRSV028
RBRSV035 EQU   RBRSV028
RBRSV034 EQU   RBRSV028
RBRSV033 EQU   RBRSV028
RBRSV032 EQU   RBRSV028
RBRSV031 EQU   RBRSV028
RBRSV030 EQU   RBRSV028
RBRSV029 EQU   RBRSV028
RBRSV027 EQU   RBRSV019
RBRSV026 EQU   RBRSV019
RBRSV025 EQU   RBRSV019
RBRSV024 EQU   RBRSV019
RBRSV023 EQU   RBRSV019
RBRSV022 EQU   RBRSV019
RBRSV021 EQU   RBRSV019
RBRSV020 EQU   RBRSV019
RBRSV018 EQU   RBPREFIX+13
RBRSV017 EQU   RBPREFIX+12
RBSRV016 EQU   RBPREFIX+11
RBRSV015 EQU   RBPREFIX+10
RBRSV014 EQU   RBPREFIX+8
RBRSV013 EQU   RBPREFIX+4
RBRSV012 EQU   RBPREFIX
XRBREG15 EQU   RBGRS15
XRBREG14 EQU   RBGRS14
XRBREG13 EQU   RBGRS13
XRBREG12 EQU   RBGRS12
XRBREG11 EQU   RBGRS11
XRBREG10 EQU   RBGRS10
XRBREG9  EQU   RBGRS9
XRBREG8  EQU   RBGRS8
XRBREG7  EQU   RBGRS7
XRBREG6  EQU   RBGRS6
XRBREG5  EQU   RBGRS5
XRBREG4  EQU   RBGRS4
XRBREG3  EQU   RBGRS3
XRBREG2  EQU   RBGRS2
XRBREG1  EQU   RBGRS1
XRBREG0  EQU   RBGRS0
XRBLNKA  EQU   RBLINKB
XRBWT    EQU   RBWCF
@NM00114 EQU   RBBASIC+24
RBOPSWPS EQU   RBOPSWB2
@NM00113 EQU   RBOPSWB2
@NM00112 EQU   XRBPSW
@NM00111 EQU   RBBASIC+12
XRBWAIT  EQU   RBECBWT
XRBFRRB  EQU   RBFDYN
@NM00110 EQU   XSTAB2
XRBACTV  EQU   RBFACTV
XRBTCBP  EQU   RBTCBNXT
@NM00109 EQU   XSTAB1
XRBCKPT  EQU   RBFTCKPT
@NM00108 EQU   XSTAB1
@NM00107 EQU   RBBASIC+8
@NM00106 EQU   RBEXRTNM+1
RBTMIND3 EQU   RBTMFLD
RBTMIND2 EQU   RBTMFLD
RBTMCMP  EQU   RBTMFLD
RBWLIM   EQU   RBTMFLD
RBRSV005 EQU   RBTMFLD
RBTMTOD  EQU   RBTMFLD
RBTMQUE  EQU   RBTMFLD
@NM00105 EQU   RBPRFX
IQEOUTLM EQU   IQESECT+20
IQEDCB   EQU   IQESECT+16
IQESTAT2 EQU   IQETCB
IQEIRBA  EQU   IQEIRB+1
@NM00080 EQU   IQEFLAGS
@NM00079 EQU   IQEFLAGS
@NM00078 EQU   IQEFLAGS
@NM00077 EQU   IQEFLAGS
@NM00076 EQU   IQEFLAGS
@NM00075 EQU   IQEFLAGS
@NM00074 EQU   IQEFLAGS
IQEPARAM EQU   IQESECT+4
IQESTAT1 EQU   IQELNK
@NM00073 EQU   SCVTSECT+180
@NM00072 EQU   SCVTSECT+176
SCVTPIQE EQU   SCVTSECT+172
@NM00071 EQU   SCVTSECT+168
@NM00070 EQU   SCVTSECT+160
@NM00069 EQU   SCVTSECT+156
SCVTQCBR EQU   SCVTSECT+152
@NM00068 EQU   SCVTSECT+144
SCVTTQE  EQU   SCVTSECT+140
@NM00067 EQU   SCVTSECT+136
SCVTSVCT EQU   SCVTSECT+132
@NM00066 EQU   SCVTSECT+128
@NM00065 EQU   SCVTSECT+124
SCVTRXLQ EQU   SCVTSECT+120
@NM00064 EQU   SCVTSECT+116
SCVTCTCB EQU   SCVTSECT+112
@NM00063 EQU   SCVTSECT+108
@NM00062 EQU   SCVTSECT+104
@NM00061 EQU   SCVTSECT+100
@NM00060 EQU   SCVTSECT+96
SCVTCOMM EQU   SCVTSECT+92
@NM00059 EQU   SCVTSECT+88
@NM00058 EQU   SCVTSECT+84
@NM00057 EQU   SCVTSECT+80
@NM00056 EQU   SCVTSECT+76
@NM00055 EQU   SCVTSECT+72
SCVTGMBR EQU   SCVTSECT+68
SCVTRPTR EQU   SCVTSECT+64
SCVTHSKP EQU   SCVTSECT+60
@NM00054 EQU   SCVTSECT+56
@NM00053 EQU   SCVTSECT+52
SCVTLFRM EQU   SCVTSECT+48
SCVTCDCL EQU   SCVTSECT+44
@NM00052 EQU   SCVTSECT+40
SCVTRACE EQU   SCVTSECT+36
@NM00051 EQU   SCVTSECT+32
SCVTRMBR EQU   SCVTSECT+28
@NM00050 EQU   SCVTSECT+24
@NM00049 EQU   SCVTSECT+20
@NM00048 EQU   SCVTSECT+16
@NM00047 EQU   SCVTSECT+14
SCVTBR14 EQU   SCVTSECT+12
SCVTSPET EQU   SCVTSECT+8
SCVTPGWR EQU   SCVTSECT+4
SCVTPGTM EQU   SCVTSECT
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00046 EQU   CVTFIX+248
@NM00045 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTBAH   EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTRV490 EQU   CVTMAP+388
CVTSU    EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTVS1B  EQU   CVTOPTB
CVTVS1A  EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
ASXBEND  EQU   ASXB+232
ASXBRV25 EQU   ASXB+228
ASXBRV24 EQU   ASXB+224
ASXBPT0E EQU   ASXB+220
ASXBCRB4 EQU   ASXBCASW+3
ASXBCRB3 EQU   ASXBCASW+2
ASXBCRB2 EQU   ASXBCASW+1
ASXBCR06 EQU   ASXBCRB1
ASXBCR05 EQU   ASXBCRB1
ASXBCR04 EQU   ASXBCRB1
ASXBCR03 EQU   ASXBCRB1
ASXBCR02 EQU   ASXBCRB1
ASXBCR01 EQU   ASXBCRB1
ASXBTFD  EQU   ASXBCRB1
ASXBPIP  EQU   ASXBCRB1
ASXBCTDC EQU   ASXB+212
ASXBTDCB EQU   ASXB+208
ASXBRV19 EQU   ASXB+204
ASXBSENV EQU   ASXBSECR+1
ASXBRV34 EQU   ASCBSFLG
ASXBRV33 EQU   ASCBSFLG
ASXBRV32 EQU   ASCBSFLG
ASXBRV31 EQU   ASCBSFLG
ASXBRV30 EQU   ASCBSFLG
ASXBRV29 EQU   ASCBSFLG
ASXBRV28 EQU   ASCBSFLG
ASXBRV27 EQU   ASCBSFLG
ASXBUSER EQU   ASXB+192
ASXBLSRB EQU   ASXBAEQ+20
ASXBFSRB EQU   ASXBAEQ+16
ASXBLRQE EQU   ASXBAEQ+12
ASXBFRQE EQU   ASXBAEQ+8
ASXBETSK EQU   ASXB+164
ASXBSIRB EQU   ASXB+160
ASXBPSWD EQU   ASXB+152
ASXBPRG  EQU   ASXB+136
ASXBRV26 EQU   ASXB+132
ASXBOUSB EQU   ASXB+128
ASXBDDR  EQU   ASXB+124
ASXBRCTD EQU   ASXB+120
ASXBRSMD EQU   ASXB+116
ASXBSPSA EQU   ASXB+112
ASXBFRWA EQU   ASXB+108
ASXBFLSA EQU   ASXB+36
ASXBIHSA EQU   ASXB+32
ASXBRV15 EQU   ASXB+28
ASXBRV14 EQU   ASXB+24
ASXBLWA  EQU   ASXB+20
ASXBMPST EQU   ASXB+16
ASXBRS00 EQU   ASXB+14
ASXBTCBS EQU   ASXB+12
ASXBLTCB EQU   ASXB+8
ASXBFTCB EQU   ASXB+4
ASXBASXB EQU   ASXB
ASXBEGIN EQU   ASXB
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSMA EQU   ASCBRSM+1
ASCBRV54 EQU   ASCBRSMF
ASCBRV53 EQU   ASCBRSMF
ASCBRV52 EQU   ASCBRSMF
ASCBRV51 EQU   ASCBRSMF
ASCBVEQR EQU   ASCBRSMF
ASCBN2LP EQU   ASCBRSMF
ASCB1LPU EQU   ASCBRSMF
ASCB2LPU EQU   ASCBRSMF
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
@NM00044 EQU   ESACCF
ESAASID  EQU   ESACCF
ESANOCC  EQU   ESACCF
ESAR0DP  EQU   ESACCF
ESASTEP  EQU   ESACCF
ESAMODE  EQU   RTM2ESA+43
ESAERTYP EQU   RTM2ESA+42
@NM00043 EQU   ESARFLAG
ESASLIPR EQU   ESARFLAG
ESAFERR  EQU   ESARFLAG
ESAINREC EQU   ESARFLAG
ESASDREC EQU   ESARFLAG
ESAGMREC EQU   ESARFLAG
@NM00042 EQU   ESAFLAGS
ESAVEOM  EQU   ESAFLAGS
ESAEOT   EQU   ESAFLAGS
ESANEOT  EQU   ESAFLAGS
ESARTM2  EQU   ESAFLAGS
ESAWLEN  EQU   ESART2D+1
ESAWSPID EQU   ESART2D
ESAEEDQ  EQU   RTM2ESA+28
ESAR14   EQU   ESAREGS+24
ESAR7    EQU   ESAREGS+20
ESAR5    EQU   ESAREGS+16
ESAR4    EQU   ESAREGS+12
ESAR3    EQU   ESAREGS+8
ESACC1   EQU   ESAR1+1
@NM00041 EQU   ESACCF1
ESAEOT1  EQU   ESACCF1
ESAEOM1  EQU   ESACCF1
ESAR0DP1 EQU   ESACCF1
ESASTEP1 EQU   ESACCF1
ESADREQ1 EQU   ESACCF1
STORB    EQU   STORFRM
RTM2TECB EQU   RTM2RYRG+64
RTM2RYRS EQU   RTM2RYRG
RTM2TRLS EQU   RTM2ENSN+16
RTM2TRFS EQU   RTM2ENSN+12
RTM2TRCU EQU   RTM2ENSN+8
RTM2TRTB EQU   RTM2ENSN+4
@NM00040 EQU   RTM2SNLN+2
RTM2TRLN EQU   RTM2SNLN
@NM00039 EQU   RTM2WA+882
RTM2ERTM EQU   RTM2ERID+6
RTM2ERAS EQU   RTM2ERID+4
RTM2CPUI EQU   RTM2ERID+2
RTM2SEQ# EQU   RTM2ERID
RTM2TRSA EQU   RTM2CVER+450
@NM00038 EQU   RTM2CVER+310
RTM2STRA EQU   RTM2RECH+8
@NM00037 EQU   RTM2TRYR+3
@NM00036 EQU   RTM2TRF2
RTM2TREC EQU   RTM2TRF2
RTM2GMR  EQU   RTM2TRF2
RTM2PPR  EQU   RTM2TRF2
RTM2IOR  EQU   RTM2TRF2
RTM2AS3R EQU   RTM2TRF1+1
RTM2AS2R EQU   RTM2TRF1+1
RTM2XFLG EQU   RTM2TRF1+1
RTM2XABD EQU   RTM2TRF1+1
RTM2XIP  EQU   RTM2TRF1+1
RTM2RTYS EQU   RTM2TRF1+1
RTM2RCD  EQU   RTM2TRF1+1
RTM2FMS  EQU   RTM2TRF1
RTM2VLDY EQU   RTM2TRF1
RTM2HOOK EQU   RTM2TRF1
RTM2PPS  EQU   RTM2TRF1
RTM2GMS  EQU   RTM2TRF1
RTM2IORS EQU   RTM2TRF1
RTM2IOHS EQU   RTM2TRF1
RTM2IOQS EQU   RTM2TRF1
RTM2TMER EQU   RTM2RECL+14
RTM2EQMN EQU   RTM2ECTL
RTM2EDEQ EQU   RTM2ECTL
RTM2EFRM EQU   RTM2ECTL
RTM2ECLS EQU   RTM2ECTL
RTM2ESNP EQU   RTM2ECTL
RTM2EOPN EQU   RTM2ECTL
RTM2EGET EQU   RTM2ECTL
RTM2EENQ EQU   RTM2ECTL
RTM2DFTK EQU   RTM2DCTL
RTM2DDEQ EQU   RTM2DCTL
RTM2DFRM EQU   RTM2DCTL
RTM2DCLS EQU   RTM2DCTL
RTM2DSNP EQU   RTM2DCTL
RTM2DOPN EQU   RTM2DCTL
RTM2DGET EQU   RTM2DCTL
RTM2DENQ EQU   RTM2DCTL
@NM00035 EQU   RTM2FLX2
RTM2LTX  EQU   RTM2FLX1
RTM2PRX  EQU   RTM2FLX1
RTM2CVX  EQU   RTM2FLX1
RTM2ABX  EQU   RTM2FLX1
RTM2EOTX EQU   RTM2FLX1
RTM2MTX  EQU   RTM2FLX1
@NM00034 EQU   RTM2ASIR
RTM2UPRG EQU   RTM2ASIR
@NM00033 EQU   RTM2ABDP
RTM2SMDP EQU   RTM2ABDP
RTM2MEMT EQU   RTM2INTF+3
@NM00032 EQU   RTM2TSKT
@NM00031 EQU   RTM2INTF+1
@NM00030 EQU   RTM2CTLR
RTM2TMEM EQU   RTM2CTLR
@NM00029 EQU   RTM2RCTL
RTM2JPAQ EQU   RTM2RCTL
RTM2LPAQ EQU   RTM2RCTL
RTM2BFTL EQU   RTM2RCTL
RTM2TRSW EQU   RTM2RCTL
RTM2WANA EQU   RTM2RCTL
RTM2WAIN EQU   RTM2RCTL
RTM2STA2 EQU   RTM2RCTL
RTM2STAT EQU   RTM2ABND
RTM2NDMP EQU   RTM2ABND
@NM00028 EQU   RTM2ABID
RTM2OERR EQU   RTM2ABID
RTM2SAV2 EQU   RTM2ABID
RTM2SAVE EQU   RTM2ABID
RTM2REG  EQU   RTM2ABID
RTM2PSW  EQU   RTM2ABID
RTM2ENQ  EQU   RTM2ABID
RTM2CB   EQU   RTM2ABID
RTM2MCTL EQU   RTM2SCTL+3
RTM2TCTL EQU   RTM2SCTL+2
@NM00027 EQU   RTM2CCTL+1
RTM2NODP EQU   RTM2CCTL+1
RTM2RGEB EQU   RTM2CCTL+1
RTM2SLIP EQU   RTM2CCTL
RTM2HEED EQU   RTM2CCTL
RTM2REED EQU   RTM2CCTL
RTM2SQS  EQU   RTM2CCTL
RTM2SPWA EQU   RTM2CVER+174
RTM2DCBA EQU   RTM2CVER+170
RTM2SNCC EQU   RTM2SNAP+64
RTM2DD   EQU   RTM2SNAP+56
RTM2LTO4 EQU   RTM2TO4
RTM2LFR4 EQU   RTM2FRM4
RTM2LTO3 EQU   RTM2TO3
RTM2LFR3 EQU   RTM2FRM3
RTM2LTO2 EQU   RTM2TO2
RTM2LFR2 EQU   RTM2FRM2
RTM2LTO1 EQU   RTM2TO1
RTM2LFR1 EQU   RTM2FRM1
RTM2NXTP EQU   RTM2CTL2+5
RTM2SGP  EQU   RTM2PMKP
RTM2EUP  EQU   RTM2PMKP
RTM2DOP  EQU   RTM2PMKP
RTM2FPP  EQU   RTM2PMKP
RTM2CCP  EQU   RTM2PMKP
RTM2ILP  EQU   RTM2PMKP
RTM2INTP EQU   RTM2CTL2+2
RTM2SPVP EQU   RTM2MWPP
RTM2WATP EQU   RTM2MWPP
RTM2MCKP EQU   RTM2MWPP
@NM00026 EQU   RTM2MWPP
RTM2KEYP EQU   RTM2MWPP
RTM2EXTP EQU   RTM2CMKP
RTM2IOP  EQU   RTM2CMKP
RTM2NXTA EQU   RTM2CTL1+5
RTM2SGA  EQU   RTM2PMKA
RTM2EUA  EQU   RTM2PMKA
RTM2DOA  EQU   RTM2PMKA
RTM2FPA  EQU   RTM2PMKA
RTM2CCA  EQU   RTM2PMKA
RTM2ILA  EQU   RTM2PMKA
RTM2INTA EQU   RTM2CTL1+2
RTM2SPVA EQU   RTM2MWPA
RTM2WATA EQU   RTM2MWPA
RTM2MCKA EQU   RTM2MWPA
@NM00025 EQU   RTM2MWPA
RTM2KEYA EQU   RTM2MWPA
RTM2EXTA EQU   RTM2CMKA
RTM2IOA  EQU   RTM2CMKA
@NM00024 EQU   RTM2PARQ+1
RTM2RCDE EQU   RTM2PARQ
RTM2RTYA EQU   RTM2TRRC+38
RTM2COMP EQU   RTM2TRRC+34
RTM2SIZE EQU   RTM2SPLL+1
RTM2SUBP EQU   RTM2SPLL
RTM2RTCA EQU   RTM2RTCD
RTM2SCBN EQU   RTM2SCBS+4
RTM2STAR EQU   RTM2TRRC+10
RTM2RBST EQU   RTM2TRRC+6
RTM2FIOB EQU   RTM2IOBP+1
@NM00023 EQU   RTM2IOBP
@NM00022 EQU   RTM2TRRC+1
@NM00021 EQU   RTM2IOFS
RTM2NIOP EQU   RTM2IOFS
RTM2NOIO EQU   RTM2IOFS
RTM2IOHT EQU   RTM2IOFS
RTM2IOQR EQU   RTM2IOFS
RTM2FMID EQU   RTM2TRRY+124
RTM2ERFL EQU   RTM2ERRD
RTM2MCIV EQU   RTM2ERRD
RTM2RPIV EQU   RTM2ERRD
RTM2MABD EQU   RTM2ERRD
RTM2CTS  EQU   RTM2ERRD
RTM2STAE EQU   RTM2ERRD
RTM2NRBE EQU   RTM2ERRD
@NM00020 EQU   RTM2ERRC
RTM2EAS  EQU   RTM2ERRC
RTM2PERC EQU   RTM2ERRC
RTM2IRB  EQU   RTM2ERRC
RTM2STAI EQU   RTM2ERRC
RTM2STAF EQU   RTM2ERRC
RTM2SRBM EQU   RTM2ERRB
RTM2LDIS EQU   RTM2ERRB
RTM2ENRB EQU   RTM2ERRB
RTM2TYP1 EQU   RTM2ERRB
@NM00019 EQU   RTM2ERRB
RTM2PGIO EQU   RTM2ERRA
RTM2TEXC EQU   RTM2ERRA
RTM2SVCE EQU   RTM2ERRA
RTM2SVCD EQU   RTM2ERRA
RTM2RKEY EQU   RTM2ERRA
RTM2PCHK EQU   RTM2ERRA
RTM2MCHK EQU   RTM2ERRA
RTM2TIME EQU   RTM2EEDH+20
RTM2RFSA EQU   RTM2EEDH+16
@NM00018 EQU   RTM2EEDH+14
RTM2VEQR EQU   RTM2RSR2
RTM2PGFX EQU   RTM2RSR2
RTM2FLSQ EQU   RTM2RSR2
RTM2FSQA EQU   RTM2RSR2
RTM2NUCL EQU   RTM2RSR2
RTM2SPER EQU   RTM2RSR2
RTM2INTC EQU   RTM2RSR2
RTM2OFLN EQU   RTM2RSR2
RTM2CHNG EQU   RTM2RSR1
RTM2MSER EQU   RTM2RSR1
@NM00017 EQU   RTM2RSR1
RTM2CPID EQU   RTM2EEDH+10
RTM2TERR EQU   RTM2MCHD
RTM2SOFT EQU   RTM2MCHD
RTM2INSF EQU   RTM2MCHD
RTM2ACR  EQU   RTM2MCHD
RTM2SCK  EQU   RTM2MCHD
RTM2PSWU EQU   RTM2MCHD
RTM2REGU EQU   RTM2MCHD
RTM2SKYF EQU   RTM2MCHD
@NM00016 EQU   RTM2MCHS
RTM2RSRF EQU   RTM2MCHS
RTM2RSRC EQU   RTM2MCHS
RTM2INVP EQU   RTM2MCHS
RTM2TSVL EQU   RTM2MCHS
RTM2RCDF EQU   RTM2MCHS
RTM2SRVL EQU   RTM2MCHS
RTM2SCKE EQU   RTM2STCK+4
RTM2SCKB EQU   RTM2STCK
RTM2ABEP EQU   RTM2TRRY+88
RTM2ABNM EQU   RTM2TRRY+80
RTM2TRAN EQU   RTM2AEC1+4
RTM2IPC1 EQU   RTM2ICD1
RTM2IMC1 EQU   RTM2ICD1
RTM2IPR1 EQU   RTM2ICD1
@NM00015 EQU   RTM2INC1
@NM00014 EQU   RTM2ILC1
RTM2IL1  EQU   RTM2ILC1
@NM00013 EQU   RTM2ILC1
@NM00012 EQU   RTM2AEC1
RTM2ADD1 EQU   RTM2NXT1+1
@NM00011 EQU   RTM2NXT1
@NM00010 EQU   RTM2EPSW+3
RTM2SGN1 EQU   RTM2INT1
RTM2EXP1 EQU   RTM2INT1
RTM2DEC1 EQU   RTM2INT1
RTM2FPO1 EQU   RTM2INT1
RTM2CC1  EQU   RTM2INT1
@NM00009 EQU   RTM2INT1
RTM2PGM1 EQU   RTM2MWP1
RTM2WAT1 EQU   RTM2MWP1
RTM2MCK1 EQU   RTM2MWP1
RTM2ECT1 EQU   RTM2MWP1
RTM2KEY1 EQU   RTM2MWP1
RTM2EXT1 EQU   RTM2EMK1
RTM2AIO1 EQU   RTM2EMK1
RTM2TRM1 EQU   RTM2EMK1
RTM2EAM1 EQU   RTM2EMK1
@NM00008 EQU   RTM2EMK1
RTM2PER1 EQU   RTM2EMK1
@NM00007 EQU   RTM2EMK1
RTM2ER15 EQU   RTM2EREG+60
RTM2ER14 EQU   RTM2EREG+56
RTM2ER13 EQU   RTM2EREG+52
RTM2ER12 EQU   RTM2EREG+48
RTM2ER11 EQU   RTM2EREG+44
RTM2ER10 EQU   RTM2EREG+40
RTM2ER9  EQU   RTM2EREG+36
RTM2ER8  EQU   RTM2EREG+32
RTM2ER7  EQU   RTM2EREG+28
RTM2ER6  EQU   RTM2EREG+24
RTM2ER5  EQU   RTM2EREG+20
RTM2ER4  EQU   RTM2EREG+16
RTM2ER3  EQU   RTM2EREG+12
RTM2ER2  EQU   RTM2EREG+8
RTM2ER1  EQU   RTM2EREG+4
RTM2ER0  EQU   RTM2EREG
RTM2CT   EQU   RTM2WA+56
RTM2VRBT EQU   RTM2WA+52
RTM2SFWA EQU   RTM2WA+32
@NM00006 EQU   RTM2CCF
RTM2EOT  EQU   RTM2CCF
RTM2EOM  EQU   RTM2CCF
RTM2VRBC EQU   RTM2WA+20
RTM2CVT  EQU   RTM2WA+12
RTM2LGTH EQU   RTM2RT2D+1
RTM2SPID EQU   RTM2RT2D
RTM2ADDR EQU   RTM2DESC+4
RTM2ID   EQU   RTM2DESC
RMPLDCBL EQU   RMPL+20
RMPLRMWA EQU   RMPL+16
RMPLRBPA EQU   RMPL+12
RMPLASCB EQU   RMPL+4
RMPLASID EQU   RMPL+2
RMPLFLG2 EQU   RMPL+1
@NM00005 EQU   RMPLFLG1
RMPLRCOV EQU   RMPLFLG1
RMPLRBPP EQU   RMPLFLG1
RMPLTYPE EQU   RMPLFLG1
SNPHDRA  EQU   SNPPARMS+20
SNPDCB   EQU   SNPPARMS+8
@NM00004 EQU   SNPPARMS+7
@NM00003 EQU   SNPPDATA
SNPSPLS  EQU   SNPPDATA
SNPPSW   EQU   SNPPDATA
SNPJPA   EQU   SNPPDATA
SNPLPA   EQU   SNPPDATA
SNPREGS  EQU   SNPPDATA
SNPSAVE2 EQU   SNPPDATA
SNPSAVE  EQU   SNPPDATA
@NM00002 EQU   SNPSDAT1
SNPERR   EQU   SNPSDAT1
SNPIO    EQU   SNPSDAT1
SNPDM    EQU   SNPSDAT0
SNPQCB   EQU   SNPSDAT0
SNPCB    EQU   SNPSDAT0
SNPTRT   EQU   SNPSDAT0
SNPSWA   EQU   SNPSDAT0
SNPLSQA  EQU   SNPSDAT0
SNPSQA   EQU   SNPSDAT0
SNPNUC   EQU   SNPSDAT0
@NM00001 EQU   SNPPARMS+2
SNPHDR   EQU   SNPFLAG
SNPTCB   EQU   SNPFLAG
SNPID    EQU   SNPFLAG
SNPABEND EQU   SNPFLAG
SNPVS2EN EQU   SNPFLAG
SNPVS2   EQU   SNPFLAG
SNPSNAP  EQU   SNPFLAG
SNPIDENT EQU   SNPPARMS
@NM00104 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00103 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00102 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00101 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00100 EQU   FLCFSA
@NM00099 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00098 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00097 EQU   FLCIOA
@NM00096 EQU   FLCMCLA+15
@NM00095 EQU   FLCMCLA+14
@NM00094 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00093 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00092 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00091 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00090 EQU   FLCPER
@NM00089 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00088 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00087 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00086 EQU   FLCPIILC
@NM00085 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00084 EQU   FLCSVILC
@NM00083 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00082 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00081 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00064 EQU   @RC00061
@RC00070 EQU   @RC00069
@RC00172 EQU   @RC00163
@RC00160 EQU   @RC00085
@RC00350 EQU   @RC00304
@RC00483 EQU   @RC00481
@RC00540 EQU   @RC00481
@RC00535 EQU   @RC00481
@RC00572 EQU   @RC00570
@RF00609 EQU   @RC00593
@RC00604 EQU   @RC00593
@RC00602 EQU   @RC00593
@RC00644 EQU   @RC00636
@RC00726 EQU   @RC00723
@RC00686 EQU   @RC00685
@RC00616 EQU   @RC00568
@RC00214 EQU   @RC00160
@RC00351 EQU   @RC00350
@RC00541 EQU   @RC00540
@RC00687 EQU   @RC00686
@RC00798 EQU   @RC00616
@RC00248 EQU   @RC00214
@RC00353 EQU   @RC00351
RCR0018  EQU   @RC00351
@RC00689 EQU   @RC00687
RCR0031  EQU   @RC00687
@RC00799 EQU   @RC00798
@RC00250 EQU   @RC00248
RCR0009  EQU   @RC00248
@RC00800 EQU   @RC00799
@RC00802 EQU   @RC00800
RCR0038  EQU   @RC00800
@ENDDATA EQU   *
         END   IEAVTRTC,(C'PLS1856',0701,77180)
