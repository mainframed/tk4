         TITLE 'IEAVTMTC MEMORY TERMINATION CONTROLLER                 *
                        '
IEAVTMTC CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IEAVTMTC  76.090'                                 0001
         DROP  @15
@PROLOG  BALR  @08,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@08                                         0001
*   DO;                             /* SEGMENT MTCINIT BEGIN         */
*                                                                  0067
*     /***************************************************************/
*     /*                                                             */
*     /* SEGMENT MTCINIT INITIALIZES THE ENVIRONMENT THAT THE MEMTERM*/
*     /* CONTROLLER WILL RUN IN. ENTRY IS FROM THE MASTER SCHEDULER  */
*     /* INITIALIZATION ROUTINE WITH AN ECB TO BE POSTED ON          */
*     /* COMPLETION OF THE INITIALIZATION. A BLOCK OF CORE IN SP 245 */
*     /* IS OBTAINED TO CONTAIN TRACKING AREA, PARAMETER LIST FOR IOS*/
*     /* AND RSM, AND THE MEMTERM SRB. PGFIX IS USED TO FIX THE PAGES*/
*     /* OF MTC AND ITS ESTAE ROUTINE, AND THE MEMTERM SRB ROUTINE.  */
*     /* AN ESTAE ENVIRONMENT IS SET UP. IF ALL STEPS WERE           */
*     /* SUCCESSFUL, THE INPUTTED ECB IS POSTED WITH A CODE OF 0--   */
*     /* FAILURE CAUSES A POST OF 4.                                 */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0068
*     PSAPTR=ZERO;                  /* ORIGIN OF PSA                 */
*                                                                  0068
         L     PSAPTR,ZERO                                         0068
*     /***************************************************************/
*     /*                                                             */
*     /* SAVE ADDR OF INPUT ECB                                      */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0069
*     RFY                                                          0069
*      (ECBPTR,                                                    0069
*       REG1,                                                      0069
*       INITFLAG) RSTD;                                            0069
*     INITFLAG=0;                   /* SET TO SUCCESS INDICATION     */
         SLR   INITFLAG,INITFLAG                                   0070
*     ECBPTR=REG1;                  /* SET PTR TO INPUT ECB          */
*                                                                  0071
         LR    ECBPTR,REG1                                         0071
*     /***************************************************************/
*     /*                                                             */
*     /* GET CORE FOR SRB, RMPL, AND ERROR TRACKING AREA             */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0072
*     RFY                                                          0072
*      (REG0,                                                      0072
*       REG15) RSTD;                                               0072
*     REG0=LENGTH(GOTNCORE);        /* GET LENGTH FOR GETMAIN        */
         LA    REG0,284                                            0073
*     GEN REFS(REG0) SETS(REG0,REG1,REG14,REG15)                   0074
*         (GETMAIN RC,LV=(0),SP=245);/* OBTAIN STORAGE               */
         GETMAIN RC,LV=(0),SP=245
*     INITFLAG=INITFLAG×REG15;      /* OR IN RETURN CODE             */
         OR    INITFLAG,REG15                                      0075
*     IF INITFLAG=0 THEN            /* IF NO ERRORS, MORE INIT.      */
         SLR   @14,@14                                             0076
         CR    INITFLAG,@14                                        0076
         BNE   @RF00076                                            0076
*       DO;                         /* NO ERRORS                     */
*         GOTNPTR=REG1;             /* SAVE PTR TO GOTTEN CORE       */
         LR    GOTNPTR,REG1                                        0078
*         GOTNCORE(1:256)=''B;      /* ZERO OUT AREA                 */
         XC    GOTNCORE(256,GOTNPTR),GOTNCORE(GOTNPTR)             0079
*         GOTNCORE(257:LENGTH(GOTNCORE))=''B;/* ZERO REMAINDER       */
*                                                                  0080
         XC    GOTNCORE+256(28,GOTNPTR),GOTNCORE+256(GOTNPTR)      0080
*         /***********************************************************/
*         /*                                                         */
*         /* INITIALIZE POINTERS TO THE BLOCKS THAT ARE TO BE CARVED */
*         /* OUT OF THE GOTTEN CORE. THEN INITIALIZE THE AREA WITH   */
*         /* THE BLOCKS-- ERRAREA, RMPLPTR, RMPL, RESOURCE MGR       */
*         /* WORKAREA, AND SRB.                                      */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0081
*         RMPLPTR=ADDR(RMPL);       /* SET PTR TO RMPL               */
         LA    @12,152                                             0081
         ALR   @12,GOTNPTR                                         0081
         ST    @12,RMPLPTR(,GOTNPTR)                               0081
*         RMPLRMWA=ADDR(WORKAREA);  /* SET RMPL PTR TO WORKAREA      */
         LA    @09,WORKAREA(,GOTNPTR)                              0082
         ST    @09,RMPLRMWA(,@12)                                  0082
*         RTCTMSRB=ADDR(SRB);       /* SET RTMCT PTR TO SRB          */
*                                                                  0083
         L     @12,CVTPTR(,PSAPTR)                                 0083
         L     @12,CVTRTMCT(,@12)                                  0083
         LA    @09,240                                             0083
         ALR   @09,GOTNPTR                                         0083
         ST    @09,RTCTMSRB(,@12)                                  0083
*         /***********************************************************/
*         /*                                                         */
*         /* INITIALIZE MEMTERM SRB                                  */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0084
*         SRBID='SRB ';             /* IDENTIFIER                    */
         MVC   SRBID(4,@09),@CC02088                               0084
*         SRBASCB=PSAAOLD;          /* POINT TO CURRENT ASCB         */
         L     @12,PSAAOLD(,PSAPTR)                                0085
         ST    @12,SRBASCB(,@09)                                   0085
*         SRBPKF=0;                 /* PROTECT KEY 0                 */
         MVI   SRBPKF(@09),X'00'                                   0086
*         SRBEP=ADDR(MEMSRBEP);     /* PTR TO SRB ROUTINE            */
         LA    @06,MEMSRBEP                                        0087
         ST    @06,SRBEP(,@09)                                     0087
*         SRBSAVE=0;                /* NO SAVE AREA                  */
         ST    @14,SRBSAVE(,@09)                                   0088
*         SRBPARM=0;                /* NO PARAMETER AREA             */
         ST    @14,SRBPARM(,@09)                                   0089
*         SRBCPAFF=0;               /* NO CPU AFFINITY               */
         STH   @14,SRBCPAFF(,@09)                                  0090
*         SRBPRIOR=0;               /* SYSTEM PRIORITY               */
         MVI   SRBPRIOR(@09),X'00'                                 0091
*         SRBRMTR=0;                /* NO PURGDQ SHOULD BE ISSUED    */
         ST    @14,SRBRMTR(,@09)                                   0092
*         SRBPTCB=PSATOLD;          /* MTC TCB                       */
         L     @14,PSATOLD(,PSAPTR)                                0093
         ST    @14,SRBPTCB(,@09)                                   0093
*         SRBPASID=PSAAOLD->ASCBASID;/* M.S. ADDR SPACE              */
*                                                                  0094
         LH    @14,ASCBASID(,@12)                                  0094
         N     @14,@CF02133                                        0094
         STH   @14,SRBPASID(,@09)                                  0094
*         /***********************************************************/
*         /*                                                         */
*         /* FIX PAGES OF MTC, THE ESTAE EXIT, AND SRB ROUTINE       */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0095
*         DO;                       /* PGFIX (R) A(IEAVTMTC)       0095
*                                      EA(@ENDDATA) ECB(WORKWORD(1))
*                                      LONG(Y)                       */
*           RESPECIFY                                              0096
*            (GPR00P,                                              0096
*             GPR01P) RESTRICTED;                                  0096
*           GPR00P=ADDR(WORKWORD(1));/* ECB ADDR                     */
         LA    GPR00P,WORKWORD(,GOTNPTR)                           0097
*           GPR01P=ADDR(IEAVTMTC);  /* PAGE ADDR                     */
         L     GPR01P,@CA00028                                     0098
*           RESPECIFY                                              0099
*             GPR15P RESTRICTED;                                   0099
*           GPR15P=ADDR(@ENDDATA);  /* VSL ADDR                      */
         LA    GPR15P,@ENDDATA                                     0100
*           GPR01P=GPR01P×'52000000'X;/* R, PGFIX, RELEASE & LONG  0101
*                                      FLAGS                         */
         O     GPR01P,@CF02093                                     0101
*           SVC(113);               /* ISSUE PGFIX SVC               */
         SVC   113                                                 0102
*           RESPECIFY                                              0103
*            (GPR00P,                                              0103
*             GPR01P) UNRESTRICTED;                                0103
*           RESPECIFY                                              0104
*             GPR15P UNRESTRICTED;                                 0104
*         END;                      /* PGFIX (R) A(IEAVTMTC)       0105
*                                      EA(@ENDDATA) ECB(WORKWORD(1))
*                                      LONG(Y)                       */
*         REG1=ADDR(WORKWORD(1));   /* GET ADDR OF ECB BEING USED    */
         LA    REG1,WORKWORD(,GOTNPTR)                             0106
*         GEN(WAIT ECB=(1));        /* WAIT FOR PGFIX TO COMPLETE, 0107
*                                      ANY ERRORS ENCOUNTERED IN   0107
*                                      PGFIX ARE COMMUNICATED VIA AN
*                                      ABEND.                        */
*                                                                  0107
         WAIT ECB=(1)
*         /***********************************************************/
*         /*                                                         */
*         /* SET UP ESTAE RECOVERY ENVIRONMENT                       */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0108
*         REG1=ADDR(ESTAELST);      /* LOAD ESTAE PARM LIST          */
         LA    REG1,ESTAELST                                       0108
*         GEN(ESTAE MF=(E,(1)),PARAM=(GOTNPTR));                   0109
         ESTAE MF=(E,(1)),PARAM=(GOTNPTR)
*         INITFLAG=INITFLAG×REG15;  /* OR IN ANY ERROR CODE          */
         OR    INITFLAG,REG15                                      0110
*       END;                                                       0111
*                                                                  0111
*     /***************************************************************/
*     /*                                                             */
*     /* POST SUCCESS OR FAILURE TO INITIALIZATION ECB. IF SUCCESS,  */
*     /* POST INITIALIZATION ECB WITH CODE OF 0, AND SET SRB LOCK TO */
*     /* 'AVAILABLE'. IF A FAILURE HAS OCCURRED IN INITIALIZATION,   */
*     /* THE INITIALIZATION ECB IS POSTED WITH A CODE OF 4 AND THE   */
*     /* SRB LOCK IS LEFT UNAVAILABLE. THE SUBSEQUENT WAIT ON THE    */
*     /* MEMTERM ECB WILL NEVER BE POSTED.                           */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0112
*     IF INITFLAG=0 THEN            /* CHECK FOR INIT. SUCCESSFUL    */
@RF00076 LTR   INITFLAG,INITFLAG                                   0112
         BNZ   @RF00112                                            0112
*       DO;                         /* SUCCESSFUL                    */
*         GEN REFS(ECBPTR)(POST (ECBPTR),0);                       0114
         POST (ECBPTR),0
*         REG1=ADDR(RTCTMECB);      /* SHOW MEMTERM ECB AS ALREADY 0115
*                                      POSTED TO FORCE MAINLINE TO 0115
*                                      CHECK TERMINATION QUEUE       */
         L     @14,CVTPTR(,PSAPTR)                                 0115
         L     REG1,CVTRTMCT(,@14)                                 0115
         LA    REG1,RTCTMECB(,REG1)                                0115
*         GEN(POST (1),0);          /* POST MEMTERM ECB              */
         POST (1),0
*         RTCTMLCK=AVAILBLE;        /* SET LOCK TO AVAILABLE         */
         L     @14,CVTPTR(,PSAPTR)                                 0117
         L     @14,CVTRTMCT(,@14)                                  0117
         MVC   RTCTMLCK(4,@14),@CF00066                            0117
*       END;                                                       0118
*     ELSE                          /* INITIALIZATION UNSUCCESSFUL   */
*       DO;                                                        0119
         B     @RC00112                                            0119
@RF00112 DS    0H                                                  0120
*         GEN REFS(ECBPTR)(POST (ECBPTR),4);/* POST THE FAILURE      */
         POST (ECBPTR),4
*       END;                                                       0121
*     RFY                                                          0122
*      (REG0,                                                      0122
*       REG1,                                                      0122
*       ECBPTR,                                                    0122
*       INITFLAG,                                                  0122
*       REG15) UNRSTD;                                             0122
@RC00112 DS    0H                                                  0123
*   END;                                                           0123
*   RFY                                                            0124
*    (ASCBREG) RSTD;                                               0124
*   GEN REFS(ERREGS,GOTNPTR)(STM 0,15,ERREGS(GOTNPTR));/* SAVE REGS
*                                      FOR RECURSION                 */
         STM 0,15,ERREGS(GOTNPTR)
*   INITDONE=ON;                    /* INITIALIZATION COMPLETE       */
         OI    INITDONE(GOTNPTR),B'00100000'                       0126
*MTCMAIN:                           /* MAINLINE MTC WAITING LOOP     */
*   RFY                                                            0127
*    (REG1) RSTD;                                                  0127
MTCMAIN  DS    0H                                                  0128
*   REG1=ADDR(RTCTMECB);            /* MEMTERM ECB TO WAIT ON        */
         L     @12,CVTPTR(,PSAPTR)                                 0128
         L     REG1,CVTRTMCT(,@12)                                 0128
         LA    REG1,RTCTMECB(,REG1)                                0128
*   GEN(WAIT ECB=(1));              /* WAIT FOR MEMORY TERMINATION TO
*                                      BE REQUESTED                  */
         WAIT ECB=(1)
*   RFY                                                            0130
*    (REG1) UNRSTD;                                                0130
*   RTCTMECB=0;                     /* RESET ECB                     */
         L     @12,CVTPTR(,PSAPTR)                                 0131
         L     @12,CVTRTMCT(,@12)                                  0131
         SLR   @09,@09                                             0131
         ST    @09,RTCTMECB(,@12)                                  0131
*   DO WHILE(RTCTFASB^=0);          /* DO CONTINUES UNTIL NO ASCBS 0132
*                                      ARE LEFT ON TERMINATION QUEUE */
         B     @DE00132                                            0132
@DL00132 DS    0H                                                  0133
*     DO;                           /* SEGMENT DEQASCB BEGIN         */
*                                                                  0133
*       /*************************************************************/
*       /*                                                           */
*       /* SEGMENT DEQASCB REMOVES THE LAST ASCB FROM THE MEMORY     */
*       /* TERMINATION QUEUE. WHILE SEARCHING FOR THE LAST ASCB IT   */
*       /* KEEPS A PTR TO THE ASCB MOST RECENTLY ENCOUNTERED IN THE  */
*       /* SEARCH. THIS PTR (ERRASCB) IS USED TO TRUNCATE THE        */
*       /* TERMINATION QUEUE IF AN ERROR OCCURS DURING THE SEARCH. AT*/
*       /* THE BEGINNING POINT OF THE SEARCH IT IS KNOWN THAT        */
*       /* RTCTFASB IS NOT ZERO                                      */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0134
*       ERRASCB=0;                  /* INDICATE THAT SEARCH HAS NOT
*                                      STARTED                       */
         SLR   @12,@12                                             0134
         ST    @12,ERRASCB(,GOTNPTR)                               0134
*       ASCBREG=ADDR(RTCTFASB)-EVAL(ADDR(ASCBTMCH)-ADDR(ASCB));/*  0135
*                                      ASCBREG IS SET UP WITH THE  0135
*                                      FOLLOWING RESULT- AN ASCB IS
*                                      SUPERIMPOSED ONTO THE RTCT  0135
*                                      SUCH THAT THE ASCBTMCH FIELD
*                                      CONCIDES WITH THE RTCTFASB  0135
*                                      FIELD. THIS ALLOWS THE SEARCH
*                                      DOWN THE TERMINATION        0135
*                                      QUEUE(ASCBTMCH) TO NOT HAVE 0135
*                                      THE FIRST TIME LOGIC NECESSARY
*                                      TO HANDLE THE QUEUE PTR     0135
*                                      (RTCTFASB)                    */
         L     @12,CVTPTR(,PSAPTR)                                 0135
         L     @12,CVTRTMCT(,@12)                                  0135
         LA    @12,RTCTFASB(,@12)                                  0135
         SL    @12,@CF02128                                        0135
         LR    ASCBREG,@12                                         0135
*       RFY                                                        0136
*        (TEMPASCB,                                                0136
*         PREVASCB) RSTD;                                          0136
*       PREVASCB=0;                                                0137
         SLR   PREVASCB,PREVASCB                                   0137
*       QSEARCH=ON;                 /* INDICATE SEARCH IS IN       0138
*                                      PROGRESS(FOR RECURSION)       */
         OI    QSEARCH(GOTNPTR),B'01000000'                        0138
*       DO WHILE(ASCBTMCH^=0);      /* SEARCH TO END OF QUEUE        */
         B     @DE00139                                            0139
@DL00139 DS    0H                                                  0140
*         PREVASCB=ASCBREG;         /* SAVE PTR TO ASCB              */
         LR    PREVASCB,ASCBREG                                    0140
*         ASCBREG=ASCBTMCH;         /* BUMP TO NEXT ASCB ON QUEUE    */
         L     ASCBREG,ASCBTMCH(,ASCBREG)                          0141
*         ERRASCB=PREVASCB;         /* SAVE PREVIOUS ASCB PTR IN CASE
*                                      OF ERROR                      */
         ST    PREVASCB,ERRASCB(,GOTNPTR)                          0142
*       END;                        /* FALL THROUGH WHEN LAST ASCB ON
*                                      QUEUE IS FOUND. AT THIS TIME,
*                                      ASCBREG POINTS TO THE LAST  0143
*                                      ASCB AND PREVASCB POINTS TO 0143
*                                      THE NEXT-TO-LAST ASCB.        */
@DE00139 L     @12,ASCBTMCH(,ASCBREG)                              0143
         LTR   @12,@12                                             0143
         BNZ   @DL00139                                            0143
*       TEMPASCB=ASCBREG;           /* SAVE VALUE OF ASCBREG DURING
*                                      'CS'                          */
         LR    TEMPASCB,ASCBREG                                    0144
*       CS(ASCBREG,ZERO,PREVASCB->ASCBTMCH);/* IF CS SUCCEEDS, 0 WILL
*                                      BE STORED IN ASCBTMCH FIELD OF
*                                      NEXT-TO-LAST ASCB, IF CS    0145
*                                      FAILS, ASCBREG WILL BE      0145
*                                      UPDATED.                      */
         L     @12,ZERO                                            0145
         CS    ASCBREG,@12,ASCBTMCH(PREVASCB)                      0145
*       IF ASCBREG^=TEMPASCB THEN   /* DID CS SUCCEED                */
         CR    ASCBREG,TEMPASCB                                    0146
         BE    @RF00146                                            0146
*         ASCBREG=0;                /* CS FAILED. SET PTR TO ASCB TO
*                                      0. THIS WILL PREVENT MAINLINE
*                                      FROM USING ANY ASCB. IF THE 0147
*                                      QUEUE IS NOT EMPTY, THE     0147
*                                      DEQASCB CODE WILL BE INVOKED
*                                      AGAIN. THE ONLY EXPECTED    0147
*                                      FAILURE OF CS IS WHEN THERE IS
*                                      ONLY ONE ASCB ON THE QUEUE AND
*                                      ANOTHER CPU IS ADDING A NEW 0147
*                                      ONE TO THE QUEUE              */
         SLR   ASCBREG,ASCBREG                                     0147
*       ERRASCB=0;                  /* NO QUEUE TO TRUNCATE (FOR   0148
*                                      RECURSION)                    */
@RF00146 SLR   @12,@12                                             0148
         ST    @12,ERRASCB(,GOTNPTR)                               0148
*       QSEARCH=OFF;                /* INDICATE SEARCH IS FINISHED   */
         NI    QSEARCH(GOTNPTR),B'10111111'                        0149
*       RFY                                                        0150
*        (TEMPASCB,                                                0150
*         PREVASCB) UNRSTD;                                        0150
*     END;                          /* SEGMENT DEQASCB END           */
*     IF ASCBREG^=0 THEN            /* WAS ASCB FOUND ON TERM QUEUE  */
         CR    ASCBREG,@12                                         0152
         BE    @RF00152                                            0152
*       DO;                         /* ASCB FOUND                    */
*         DO;                       /* SEGMENT 'STOPACT' BEGINNING   */
*                                                                  0154
*           /*********************************************************/
*           /*                                                       */
*           /* SEGMENT STOPACT MAKES SURE THAT ALL ACTIVITY IN THE   */
*           /* TERMINATING MEMORY HAS BEEN STOPPED PRIOR TO PURGING  */
*           /* THE MEMORY'S RESOURCES. ON AN MP CONFIGURATION, IT IS */
*           /* POSSIBLE FOR ONE CPU TO BE RUNNING IN THE MEMORY      */
*           /* SUCCESSFULLY WHILE ANOTHER CPU HAS ENCOUNTERED AN     */
*           /* ERROR AND CALLED FOR MEMORY TERMINATION. GET LOCAL    */
*           /* LOCK PRIOR TO GETTING THE CMS LOCK                    */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0155
*           DO;                     /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL) RELATED(CMSLOCK,IE
*                                      AVTMTC(STOPACT))              */
*             RFY                                                  0156
*              (GPR11P,                                            0156
*               GPR12P,                                            0156
*               GPR13P,                                            0156
*               GPR14P) RSTD;                                      0156
*             GPR13P=PSALITA;       /* ADDRESS OF LOCK INTERFACE   0157
*                                      TABLE.                        */
         L     GPR13P,PSALITA(,PSAPTR)                             0157
*             GEN(LM GPR11P,GPR13P,576(GPR13P));/* LOAD LOCKWORD,  0158
*                                      CLHT AND ENTRY ADRS.          */
         LM GPR11P,GPR13P,576(GPR13P)
*             GEN(BALR GPR14P,GPR13P);/* BALR TO SETLOCK RTN.        */
         BALR GPR14P,GPR13P
*             RFY                                                  0160
*              (GPR11P,                                            0160
*               GPR12P,                                            0160
*               GPR13P,                                            0160
*               GPR14P) UNRSTD;                                    0160
*           END;                    /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL) RELATED(CMSLOCK,IE
*                                      AVTMTC(STOPACT))              */
*                                                                  0161
*           /*********************************************************/
*           /*                                                       */
*           /* GET CMS LOCK. WHEN MEMORY IS SET NON-DISPATCHABLE, IT */
*           /* WILL NOT NOW HAVE TASKS OR SRBS OWNING THE CMS LOCK   */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0162
*           DO;                     /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(CMS) RELATED('CMS NOT  0162
*                                      HELD BY FAILING MEMORY')      */
*             RFY                                                  0163
*              (GPR11P,                                            0163
*               GPR12P,                                            0163
*               GPR13P,                                            0163
*               GPR14P) RSTD;                                      0163
*             GPR13P=PSALITA;       /* ADDRESS OF LOCK INTERFACE   0164
*                                      TABLE.                        */
         L     GPR13P,PSALITA(,PSAPTR)                             0164
*             GEN(LM GPR11P,GPR13P,540(GPR13P));/* LOAD LOCKWORD,  0165
*                                      CLHT AND ENTRY ADRS.          */
         LM GPR11P,GPR13P,540(GPR13P)
*             GEN(BALR GPR14P,GPR13P);/* BALR TO SETLOCK RTN.        */
         BALR GPR14P,GPR13P
*             RFY                                                  0167
*              (GPR11P,                                            0167
*               GPR12P,                                            0167
*               GPR13P,                                            0167
*               GPR14P) UNRSTD;                                    0167
*           END;                    /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(CMS) RELATED('CMS NOT  0168
*                                      HELD BY FAILING MEMORY')      */
*           DO;                     /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(DISP)                  0169
*                                      RELATED(CSD,IEAVTMTC(STOPACT))*/
*             RFY                                                  0170
*              (GPR11P,                                            0170
*               GPR12P,                                            0170
*               GPR13P,                                            0170
*               GPR14P) RSTD;                                      0170
*             GPR13P=PSALITA;       /* ADDRESS OF LOCK INTERFACE   0171
*                                      TABLE.                        */
         L     GPR13P,PSALITA(,PSAPTR)                             0171
*             GEN(LM GPR11P,GPR13P,12(GPR13P));/* LOAD LOCKWORD, CLHT
*                                      AND ENTRY ADRS.               */
         LM GPR11P,GPR13P,12(GPR13P)
*             GEN(BALR GPR14P,GPR13P);/* BALR TO SETLOCK RTN.        */
         BALR GPR14P,GPR13P
*             RFY                                                  0174
*              (GPR11P,                                            0174
*               GPR12P,                                            0174
*               GPR13P,                                            0174
*               GPR14P) UNRSTD;                                    0174
*           END;                    /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(DISP)                  0175
*                                      RELATED(CSD,IEAVTMTC(STOPACT))*/
*           ASCBFAIL=ON;            /* SET MEMORY NON-DISPATCHABLE   */
         OI    ASCBFAIL(ASCBREG),B'01000000'                       0176
*           IF CSDCPUOL>1 THEN      /* CHECK # OF ON-LINE CPUS       */
         L     @12,CVTPTR(,PSAPTR)                                 0177
         L     @09,CVTCSD(,@12)                                    0177
         LH    @09,CSDCPUOL(,@09)                                  0177
         C     @09,@CF00066                                        0177
         BNH   @RF00177                                            0177
*             DO;                   /* MORE THAN ONE CPU, THEREFORE
*                                      THERE COULD BE CONCURRENT   0178
*                                      ACTIVITY IN THE MEMORY        */
*               IF ASCBCPUS>0 THEN  /* CHECK FOR CUNCURRENT TASK   0179
*                                      ACTIVITY                      */
         L     @09,ASCBCPUS(,ASCBREG)                              0179
         LTR   @09,@09                                             0179
         BNP   @RF00179                                            0179
*                 DO;               /* CONCURRENT ACTIVITY           */
*                                                                  0180
*                   /*************************************************/
*                   /*                                               */
*                   /* CALL MEMORY SWITCH TO SWITCH OTER CPUS AWAY   */
*                   /* FROM MEMORY                                   */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0181
*                   RFY                                            0181
*                    (REG1) RSTD;                                  0181
*                   REG1=0;         /* INDICATE SWITCH AWAY          */
         SLR   REG1,REG1                                           0182
*                   CALL MEMSWTCH;  /* GO TO MEMORY SWITCH           */
         L     @15,CVTVEMS0(,@12)                                  0183
         BALR  @14,@15                                             0183
*                   RFY                                            0184
*                    (REG1) UNRSTD;                                0184
*                                                                  0184
*                   /*************************************************/
*                   /*                                               */
*                   /* RELEASE DISP LOCK                             */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0185
*                   DO;             /* SETLOCK (RELEASE) TYPE(DISP)
*                                      RELATED(CSD,IEAVTMTC(STOPACT))*/
*                     RFY                                          0186
*                      (GPR11P,                                    0186
*                       GPR12P,                                    0186
*                       GPR13P,                                    0186
*                       GPR14P) RSTD;                              0186
*                     GPR13P=PSALITA;/* ADDRESS OF LOCK INTERFACE  0187
*                                      TABLE.                        */
         L     GPR13P,PSALITA(,PSAPTR)                             0187
*                     GEN(LM GPR11P,GPR13P,24(GPR13P));/* LOAD     0188
*                                      LOCKWORD, CLHT AND ENTRY ADRS.*/
         LM GPR11P,GPR13P,24(GPR13P)
*                     GEN(BALR GPR14P,GPR13P);/* BALR TO SETLOCK RTN.*/
         BALR GPR14P,GPR13P
*                     RFY                                          0190
*                      (GPR11P,                                    0190
*                       GPR12P,                                    0190
*                       GPR13P,                                    0190
*                       GPR14P) UNRSTD;                            0190
*                   END;            /* SETLOCK (RELEASE) TYPE(DISP)
*                                      RELATED(CSD,IEAVTMTC(STOPACT))*/
*                   DO WHILE(ASCBCPUS^=0);/* SPIN UNTIL NO TASK MODE
*                                      CPUS ARE ACTIVE IN THE MEMORY */
         B     @DE00192                                            0192
@DL00192 DS    0H                                                  0193
*                   END;            /* END OF SPIN                   */
@DE00192 L     @12,ASCBCPUS(,ASCBREG)                              0193
         LTR   @12,@12                                             0193
         BNZ   @DL00192                                            0193
*                 END;                                             0194
*               IF ASCBSRBS^=0 THEN /* IF THERE ARE SRBS IN MEMORY 0195
*                                      SOME MAY BE ACTIVE (SOME MAY
*                                      BE SUSPENDED FOR PAGING,    0195
*                                      LOCKS.                        */
@RF00179 LH    @12,ASCBSRBS(,ASCBREG)                              0195
         LTR   @12,@12                                             0195
         BZ    @RF00195                                            0195
*                 DO;                                              0196
*                   STOPFLAG=OFF;   /* INITIALIZE FOR DO WHILE       */
         NI    STOPFLAG(GOTNPTR),B'01111111'                       0197
*                   DO WHILE(STOPFLAG=OFF);/* WHEN SRBS ARE KNOWN TO
*                                      BE STOPPED, DO ENDS           */
         B     @DE00198                                            0198
@DL00198 DS    0H                                                  0199
*                     STOPFLAG=ON;  /* WILL BE SET TO OFF IN LOOP    */
         OI    STOPFLAG(GOTNPTR),B'10000000'                       0199
*                     RFY                                          0200
*                      (CPUFLAGS,                                  0200
*                       CPUMASK) RSTD;                             0200
*                                                                  0200
*                     /***********************************************/
*                     /*                                             */
*                     /* DISPATCHER LOCK IS OBTAINED HERE AT         */
*                     /* BEGINNING OF DO-WHILE AND RELEASED AT END OF*/
*                     /* DO-WHILE. THIS MEANS THAT THE LOOP CONTAINS */
*                     /* AN ENABLED WINDOW DURING WHICH ANOTHER CPU  */
*                     /* CAN ACQUIRE THE DISP LOCK. THIS WILL PREVENT*/
*                     /* DEADLOCKS FROM OTHER CPUS WAITING FOR THE   */
*                     /* DISP LOCK WHICH IS HELD ON THIS CPU.        */
*                     /*                                             */
*                     /***********************************************/
*                                                                  0201
*                     DO;           /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(DISP)                  0201
*                                      RELATED(CSD,IEAVTMTC(STOPACT))*/
*                       RFY                                        0202
*                        (GPR11P,                                  0202
*                         GPR12P,                                  0202
*                         GPR13P,                                  0202
*                         GPR14P) RSTD;                            0202
*                       GPR13P=PSALITA;/* ADDRESS OF LOCK INTERFACE
*                                      TABLE.                        */
         L     GPR13P,PSALITA(,PSAPTR)                             0203
*                       GEN(LM GPR11P,GPR13P,12(GPR13P));/* LOAD   0204
*                                      LOCKWORD, CLHT AND ENTRY ADRS.*/
         LM GPR11P,GPR13P,12(GPR13P)
*                       GEN(BALR GPR14P,GPR13P);/* BALR TO SETLOCK 0205
*                                      RTN.                          */
         BALR GPR14P,GPR13P
*                       RFY                                        0206
*                        (GPR11P,                                  0206
*                         GPR12P,                                  0206
*                         GPR13P,                                  0206
*                         GPR14P) UNRSTD;                          0206
*                     END;          /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(DISP)                  0207
*                                      RELATED(CSD,IEAVTMTC(STOPACT))*/
*                                                                  0207
*                     /***********************************************/
*                     /*                                             */
*                     /* USE CSDCPUAL BIT MASK TO DETERMINE ACTIVE   */
*                     /* CPUS                                        */
*                     /*                                             */
*                     /***********************************************/
*                                                                  0208
*                     CPUFLAGS=CSDCPUAL;/* PICK UP ACTIVE CPU FLAGS  */
         L     @12,CVTPTR(,PSAPTR)                                 0208
         L     @12,CVTCSD(,@12)                                    0208
         LH    CPUFLAGS,CSDCPUAL(,@12)                             0208
         N     CPUFLAGS,@CF02133                                   0208
*                     IF CSDACR=0 THEN/* IF ACR IS ACTIVE DON'T CHECK
*                                      PSA'S YET.(ACR MAY START    0209
*                                      PROCESSING WHILE PSA CHECKS 0209
*                                      ARE IN PROGRESS, BUT THIS WILL
*                                      BE CAUGHT AT END OF PSA CHECK */
         CLI   CSDACR(@12),0                                       0209
         BNE   @RF00209                                            0209
*                       DO;         /* ACR NOT ACTIVE                */
*                         CPUMASK='00010000'X;/* INITIALIZE MASK TO
*                                      BE COMPARED AGAINST 'CPU    0211
*                                      ALIVE' FLAGS.(2 TO THE 16TH)  */
         L     CPUMASK,@CF02104                                    0211
*                         DO I=1 TO 16 WHILE(STOPFLAG=ON);         0212
*                                                                  0212
         LA    @12,1                                               0212
         ST    @12,I(,GOTNPTR)                                     0212
@DL00212 TM    STOPFLAG(GOTNPTR),B'10000000'                       0212
         BNO   @DC00212                                            0212
*                           /*****************************************/
*                           /*                                       */
*                           /* UP TO 16 CPUS ALLOWED                 */
*                           /*                                       */
*                           /*****************************************/
*                                                                  0213
*                           CPUMASK=CPUMASK/2;/* SHIFT MASK ONE BIT
*                                      TO RIGHT                      */
         SRL   CPUMASK,1                                           0213
*                           IF(CPUFLAGS&CPUMASK)^=0 THEN/* CHECK MASK
*                                      AGAINST ALIVE FLAGS TO SEE IF
*                                      THIS CPU IS ALIVE             */
         LR    @12,CPUFLAGS                                        0214
         NR    @12,CPUMASK                                         0214
         LTR   @12,@12                                             0214
         BZ    @RF00214                                            0214
*                             DO;   /* CPU IS ALIVE                  */
*                               IF PCCAT00P(I)->PCCAPSAV->PSAAOLD= 0216
*                                   ASCBREG THEN/* CHECK THE CPU TO
*                                      SEE IF IT IS RUNNING IN THE 0216
*                                      MEMORY                        */
         L     @12,I(,GOTNPTR)                                     0216
         SLA   @12,2                                               0216
         L     @09,CVTPTR(,PSAPTR)                                 0216
         L     @09,CVTPCCAT(,@09)                                  0216
         AL    @09,@CF02139                                        0216
         L     @12,PCCAT00P(@12,@09)                               0216
         L     @12,PCCAPSAV(,@12)                                  0216
         C     ASCBREG,PSAAOLD(,@12)                               0216
         BNE   @RF00216                                            0216
*                                 STOPFLAG=OFF;/* YES, ACTIVITY IS 0217
*                                      NOT KNOWN TO BE STOPPED       */
         NI    STOPFLAG(GOTNPTR),B'01111111'                       0217
*                             END;                                 0218
@RF00216 DS    0H                                                  0219
*                         END;      /* END OF PSA CHECK LOOP         */
@RF00214 LA    @12,1                                               0219
         AL    @12,I(,GOTNPTR)                                     0219
         ST    @12,I(,GOTNPTR)                                     0219
         C     @12,@CF00126                                        0219
         BNH   @DL00212                                            0219
@DC00212 DS    0H                                                  0220
*                       END;                                       0220
*                     ELSE          /* ACR IS ACTIVE BEFORE PSA    0221
*                                      CHECKS ARE STARTED            */
*                       DO;                                        0221
         B     @RC00209                                            0221
@RF00209 DS    0H                                                  0222
*                         STOPFLAG=OFF;/* INDICATE SRBS ARE NOT KNOWN
*                                      TO BE STOPPED. IF ACR IS    0222
*                                      ACTIVE THEN IT IS POSSIBLE TO
*                                      HAVE A CPU THAT WILL BE USED
*                                      TO RECOVER A DEAD CPU'S WORK.
*                                      THIS WORK MAY BE FOR THE    0222
*                                      MEMORY BEING TERMINATED.      */
         NI    STOPFLAG(GOTNPTR),B'01111111'                       0222
*                       END;                                       0223
*                     IF CPUFLAGS^=CSDCPUAL THEN/* SEE IF ACR HAS  0224
*                                      CHANGED THE ALIVE STATUS OF 0224
*                                      ANY CPU WHILE PSA CHECK LOOP
*                                      WAS RUNNING                   */
@RC00209 L     @12,CVTPTR(,PSAPTR)                                 0224
         L     @12,CVTCSD(,@12)                                    0224
         LH    @12,CSDCPUAL(,@12)                                  0224
         N     @12,@CF02133                                        0224
         CLR   CPUFLAGS,@12                                        0224
         BE    @RF00224                                            0224
*                       DO;         /* CPU STATUS HAS CHANGED        */
*                         STOPFLAG=OFF;/* SRBS ARE NOT KNOWN TO BE 0226
*                                      STOPPED                       */
         NI    STOPFLAG(GOTNPTR),B'01111111'                       0226
*                       END;                                       0227
*                                                                  0227
*                     /***********************************************/
*                     /*                                             */
*                     /* RELEASE DISP LOCK                           */
*                     /*                                             */
*                     /***********************************************/
*                                                                  0228
*                     DO;           /* SETLOCK (RELEASE) TYPE(DISP)
*                                      RELATED(CSD,IEAVTMTC(STOPACT))*/
@RF00224 DS    0H                                                  0229
*                       RFY                                        0229
*                        (GPR11P,                                  0229
*                         GPR12P,                                  0229
*                         GPR13P,                                  0229
*                         GPR14P) RSTD;                            0229
*                       GPR13P=PSALITA;/* ADDRESS OF LOCK INTERFACE
*                                      TABLE.                        */
         L     GPR13P,PSALITA(,PSAPTR)                             0230
*                       GEN(LM GPR11P,GPR13P,24(GPR13P));/* LOAD   0231
*                                      LOCKWORD, CLHT AND ENTRY ADRS.*/
         LM GPR11P,GPR13P,24(GPR13P)
*                       GEN(BALR GPR14P,GPR13P);/* BALR TO SETLOCK 0232
*                                      RTN.                          */
         BALR GPR14P,GPR13P
*                       RFY                                        0233
*                        (GPR11P,                                  0233
*                         GPR12P,                                  0233
*                         GPR13P,                                  0233
*                         GPR14P) UNRSTD;                          0233
*                     END;          /* SETLOCK (RELEASE) TYPE(DISP)
*                                      RELATED(CSD,IEAVTMTC(STOPACT))*/
*                     RFY                                          0235
*                      (CPUFLAGS,                                  0235
*                       CPUMASK) UNRSTD;                           0235
*                   END;                                           0236
@DE00198 TM    STOPFLAG(GOTNPTR),B'10000000'                       0236
         BZ    @DL00198                                            0236
*                 END;                                             0237
*             END;                                                 0238
@RF00195 DS    0H                                                  0239
*           DO;                     /* SETLOCK (RELEASE) TYPE(DISP)
*                                      RELATED(CSD,IEAVTMTC(STOPACT))*/
@RF00177 DS    0H                                                  0240
*             RFY                                                  0240
*              (GPR11P,                                            0240
*               GPR12P,                                            0240
*               GPR13P,                                            0240
*               GPR14P) RSTD;                                      0240
*             GPR13P=PSALITA;       /* ADDRESS OF LOCK INTERFACE   0241
*                                      TABLE.                        */
         L     GPR13P,PSALITA(,PSAPTR)                             0241
*             GEN(LM GPR11P,GPR13P,24(GPR13P));/* LOAD LOCKWORD, CLHT
*                                      AND ENTRY ADRS.               */
         LM GPR11P,GPR13P,24(GPR13P)
*             GEN(BALR GPR14P,GPR13P);/* BALR TO SETLOCK RTN.        */
         BALR GPR14P,GPR13P
*             RFY                                                  0244
*              (GPR11P,                                            0244
*               GPR12P,                                            0244
*               GPR13P,                                            0244
*               GPR14P) UNRSTD;                                    0244
*           END;                    /* SETLOCK (RELEASE) TYPE(DISP)
*                                      RELATED(CSD,IEAVTMTC(STOPACT))*/
*           DO;                     /* SETLOCK (RELEASE) TYPE(CMS) 0246
*                                      RELATED('CMS NOT HELD BY OTHER
*                                      MEMORY')                      */
*             RFY                                                  0247
*              (GPR11P,                                            0247
*               GPR12P,                                            0247
*               GPR13P,                                            0247
*               GPR14P) RSTD;                                      0247
*             GPR13P=PSALITA;       /* ADDRESS OF LOCK INTERFACE   0248
*                                      TABLE.                        */
         L     GPR13P,PSALITA(,PSAPTR)                             0248
*             GEN(LM GPR11P,GPR13P,552(GPR13P));/* LOAD LOCKWORD,  0249
*                                      CLHT AND ENTRY ADRS.          */
         LM GPR11P,GPR13P,552(GPR13P)
*             GEN(BALR GPR14P,GPR13P);/* BALR TO SETLOCK RTN.        */
         BALR GPR14P,GPR13P
*             RFY                                                  0251
*              (GPR11P,                                            0251
*               GPR12P,                                            0251
*               GPR13P,                                            0251
*               GPR14P) UNRSTD;                                    0251
*           END;                    /* SETLOCK (RELEASE) TYPE(CMS) 0252
*                                      RELATED('CMS NOT HELD BY OTHER
*                                      MEMORY')                      */
*           DO;                     /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(CMSLOCK,IEAVTMTC(STOPA
*                                      CT))                          */
*             RFY                                                  0254
*              (GPR11P,                                            0254
*               GPR12P,                                            0254
*               GPR13P,                                            0254
*               GPR14P) RSTD;                                      0254
*             GPR13P=PSALITA;       /* ADDRESS OF LOCK INTERFACE   0255
*                                      TABLE.                        */
         L     GPR13P,PSALITA(,PSAPTR)                             0255
*             GEN(LM GPR11P,GPR13P,588(GPR13P));/* LOAD LOCKWORD,  0256
*                                      CLHT AND ENTRY ADRS.          */
         LM GPR11P,GPR13P,588(GPR13P)
*             GEN(BALR GPR14P,GPR13P);/* BALR TO SETLOCK RTN.        */
         BALR GPR14P,GPR13P
*             RFY                                                  0258
*              (GPR11P,                                            0258
*               GPR12P,                                            0258
*               GPR13P,                                            0258
*               GPR14P) UNRSTD;                                    0258
*           END;                    /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(CMSLOCK,IEAVTMTC(STOPA
*                                      CT))                          */
*         END;                      /* SEGMENT 'STOPACT' END         */
*                                                                  0260
*         /***********************************************************/
*         /*                                                         */
*         /* I/O FOR THE FAILING MEMORY IS STOPPED WITH SVC PURGE    */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0261
*         PPL=''B;                  /* ZERO PURGE LIST               */
         XC    PPL(16,GOTNPTR),PPL(GOTNPTR)                        0261
*         PPLHIO=ON;                /* HALT I/O                      */
*         PPLEXT=ON;                /* PPLOPT2 IS PRESENT            */
         OI    PPLHIO(GOTNPTR),B'00100001'                         0263
*         PPLMEM=ON;                /* MEMORY PURGE SPECIFIED        */
         OI    PPLMEM(GOTNPTR),B'00100000'                         0264
*         PPLASID=ASCBASID;         /* MEMORY TO BE PURGED           */
         LH    @12,ASCBASID(,ASCBREG)                              0265
         N     @12,@CF02133                                        0265
         STH   @12,PPLASID(,GOTNPTR)                               0265
*         RFY                                                      0266
*          (REG1) RSTD;                                            0266
*         REG1=ADDR(PPL);           /* INPUT TO SVC                  */
         LA    REG1,PPL(,GOTNPTR)                                  0267
*         SVC(PURGE);               /* SVC PURGE I/O                 */
         SVC   16                                                  0268
*         RFY                                                      0269
*          (REG1) UNRSTD;                                          0269
*                                                                  0269
*         /***********************************************************/
*         /*                                                         */
*         /* ALLOCATED REAL PAGE FRAMES AND AUX SPACE IS FREED       */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0270
*         RMPLTERM=MEMTERM;         /* INDICATE MEMTERM              */
         LA    @12,152                                             0270
         ALR   @12,GOTNPTR                                         0270
         OI    RMPLTERM(@12),B'01000000'                           0270
*         IF ASCBABNT=ON THEN       /* IF ABNORMAL MEMTERM, SET RMPL */
         TM    ASCBABNT(ASCBREG),B'00001000'                       0271
         BNO   @RF00271                                            0271
*           RMPLTYPE=ON;            /* ABNORMAL TERM                 */
         OI    RMPLTYPE(@12),B'10000000'                           0272
*         ELSE                      /* NOT ABNORMAL MEMTERM          */
*           RMPLTYPE=OFF;           /* NORMAL TERM                   */
         B     @RC00271                                            0273
@RF00271 NI    RMPLTYPE+152(GOTNPTR),B'01111111'                   0273
*         RMPLASCB=ADDR(ASCB);      /* SET ASCB PTR                  */
@RC00271 LA    @12,152                                             0274
         ALR   @12,GOTNPTR                                         0274
         ST    ASCBREG,RMPLASCB(,@12)                              0274
*         RMPLASID=ASCBASID;        /* SET ASID                      */
         MVC   RMPLASID(2,@12),ASCBASID(ASCBREG)                   0275
*         RFY                                                      0276
*          (REG1,                                                  0276
*           REG13) RSTD;            /*                       @VS02207*/
*         REG13=ADDR(RMGRSAVE(1));  /*                       @VS02207*/
         LA    REG13,RMGRSAVE(,GOTNPTR)                            0277
*         REG1=ADDR(RMPLPTR);       /* PARMS FOR RSM                 */
         LA    REG1,RMPLPTR(,GOTNPTR)                              0278
*/* FREE AUXILIARY STORAGE AND CLEAN UP ASM CONTROL BLOCKS   @Z40WPXH*/
*                                                                  0279
*         CALL ASMPURGE;            /* ASM RESOURCE MGR      @Z40WPXH*/
         L     @12,CVTPTR(,PSAPTR)                                 0279
         L     @15,CVTASMRM(,@12)                                  0279
         BALR  @14,@15                                             0279
*/* FREE ALLOCATED REAL PAGE FRAMES - RSM RESOURCE MGR       @Z40WPXH*/
*                                                                  0280
*         CALL RSMPURGE;                                           0280
         L     @12,CVTPTR(,PSAPTR)                                 0280
         L     @12,SCVTSPTR(,@12)                                  0280
         L     @15,SCVTPTRM(,@12)                                  0280
         BALR  @14,@15                                             0280
*         RFY                                                      0281
*          (REG1,                                                  0281
*           REG13) UNRSTD;          /*                       @VS02207*/
*                                                                  0281
*         /***********************************************************/
*         /*                                                         */
*         /* ATTACH IEAVTMTR TO ISSUE SVC 13. IGC0001C WILL USE      */
*         /* IEAVTMMT TO DO THE PURGES NECESSARY FOR THE MEMORY      */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0282
*         RFY                                                      0282
*          (REG15,                                                 0282
*           REG1) RSTD;                                            0282
*         REG15=ADDR(ATTCHLST);     /* ATTACH LIST FORM              */
         LA    REG15,ATTCHLST                                      0283
*         REG1=ADDR(ASCB);          /* ADDR OF ASCB INPUT TO IEAVTMTR*/
         LR    REG1,ASCBREG                                        0284
*         GEN(ATTACH SF=(E,(15)));                                 0285
         ATTACH SF=(E,(15))
*         RFY                                                      0286
*          (REG15,                                                 0286
*           REG1) UNRSTD;                                          0286
*       END;                        /* ASCB PROCESSED                */
*     ELSE                                                         0288
*       ;                           /* NO ASCB FOUND OR 'CS' FAILED  */
@RF00152 DS    0H                                                  0289
*   END;                            /* END OF DO WHILE, FALL THROUGH
*                                      IF NO MORE ASCBS TO PROCESS   */
@DE00132 L     @12,CVTPTR(,PSAPTR)                                 0289
         L     @12,CVTRTMCT(,@12)                                  0289
         L     @12,RTCTFASB(,@12)                                  0289
         LTR   @12,@12                                             0289
         BNZ   @DL00132                                            0289
*   GOTO MTCMAIN;                   /* GO BACK TO WAITING LOOP       */
         B     MTCMAIN                                             0290
*   RFY                                                            0291
*    (ASCBREG) UNRSTD;                                             0291
*MEMSRBEP:                                                         0292
*                                                                  0292
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ENTRY POINT GETS CONTROL UNDER THE MEMTERM SRB TO DO THE */
*   /* POST OF THE MEMTERM ECB.                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0292
*   RFY                                                            0292
*    (SRBEPBS,                                                     0292
*     REG10,                                                       0292
*     REG11,                                                       0292
*     REG12,                                                       0292
*     REG13,                                                       0292
*     REG14,                                                       0292
*     REG2) RSTD;                                                  0292
MEMSRBEP DS    0H                                                  0293
*   GEN SETS(SRBEPBS)(BALR SRBEPBS,0);                             0293
         BALR SRBEPBS,0
*   GEN REFS(SRBEPBS)(USING *,SRBEPBS);                            0294
         USING *,SRBEPBS
*   REG2=REG14;                     /* SAVE RETURN ADDR              */
         LR    REG2,REG14                                          0295
*   PSAPTR=ZERO;                    /* SET UP PTR TO PSA             */
         L     PSAPTR,ZERO                                         0296
*   RTCTMLCK=1;                     /* MAKE SRB AVAILABLE            */
*                                                                  0297
         L     @15,CVTPTR(,PSAPTR)                                 0297
         L     @15,CVTRTMCT(,@15)                                  0297
         MVC   RTCTMLCK(4,@15),@CF00066                            0297
*   /*****************************************************************/
*   /*                                                               */
*   /* GET LOCAL LOCK                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0298
*   DO;                             /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL) RELATED(POST,IEAVT
*                                      MTC(MEMSRBEP))                */
*     RFY                                                          0299
*      (GPR11P,                                                    0299
*       GPR12P,                                                    0299
*       GPR13P,                                                    0299
*       GPR14P) RSTD;                                              0299
*     GPR13P=PSALITA;               /* ADDRESS OF LOCK INTERFACE   0300
*                                      TABLE.                        */
         L     GPR13P,PSALITA(,PSAPTR)                             0300
*     GEN(LM GPR11P,GPR13P,576(GPR13P));/* LOAD LOCKWORD, CLHT AND 0301
*                                      ENTRY ADRS.                   */
         LM GPR11P,GPR13P,576(GPR13P)
*     GEN(BALR GPR14P,GPR13P);      /* BALR TO SETLOCK RTN.          */
         BALR GPR14P,GPR13P
*     RFY                                                          0303
*      (GPR11P,                                                    0303
*       GPR12P,                                                    0303
*       GPR13P,                                                    0303
*       GPR14P) UNRSTD;                                            0303
*   END;                            /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL) RELATED(POST,IEAVT
*                                      MTC(MEMSRBEP))                */
*                                                                  0304
*   /*****************************************************************/
*   /*                                                               */
*   /* POST MEMTERM ECB                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0305
*   REG10=0;                        /* CONDITION CODE = 0            */
         SLR   REG10,REG10                                         0305
*   REG11=ADDR(RTCTMECB);           /* PTR TO ECB,HI-BIT           0306
*                                      OFF=NOTXMPOST                 */
         L     @15,CVTPTR(,PSAPTR)                                 0306
         L     REG11,CVTRTMCT(,@15)                                0306
         LA    REG11,RTCTMECB(,REG11)                              0306
*   REG12=0;                        /* ERRET IF XMPOST               */
         SLR   REG12,REG12                                         0307
*   REG13=0;                        /* ASCB IF XMPOST                */
         SLR   REG13,REG13                                         0308
*   CALL POSTBR;                    /* POST ECB                      */
*                                                                  0309
         L     @15,CVT0PT01(,@15)                                  0309
         BALR  @14,@15                                             0309
*   /*****************************************************************/
*   /*                                                               */
*   /* RELEASE LOCAL LOCK                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0310
*   DO;                             /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(POST,IEAVTMTC(MEMSRBEP
*                                      ))                            */
*     RFY                                                          0311
*      (GPR11P,                                                    0311
*       GPR12P,                                                    0311
*       GPR13P,                                                    0311
*       GPR14P) RSTD;                                              0311
*     GPR13P=PSALITA;               /* ADDRESS OF LOCK INTERFACE   0312
*                                      TABLE.                        */
         L     GPR13P,PSALITA(,PSAPTR)                             0312
*     GEN(LM GPR11P,GPR13P,588(GPR13P));/* LOAD LOCKWORD, CLHT AND 0313
*                                      ENTRY ADRS.                   */
         LM GPR11P,GPR13P,588(GPR13P)
*     GEN(BALR GPR14P,GPR13P);      /* BALR TO SETLOCK RTN.          */
         BALR GPR14P,GPR13P
*     RFY                                                          0315
*      (GPR11P,                                                    0315
*       GPR12P,                                                    0315
*       GPR13P,                                                    0315
*       GPR14P) UNRSTD;                                            0315
*   END;                            /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(POST,IEAVTMTC(MEMSRBEP
*                                      ))                            */
*   REG14=REG2;                     /* RESTORE RETURN REG            */
         LR    REG14,REG2                                          0317
*   GEN REFS(REG14)(BR REG14);      /* RETURN                        */
         BR REG14
*   GEN REFS(SRBEPBS)(DROP SRBEPBS);                               0319
         DROP SRBEPBS
*   RFY                                                            0320
*    (SRBEPBS,                                                     0320
*     REG10,                                                       0320
*     REG11,                                                       0320
*     REG12,                                                       0320
*     REG13,                                                       0320
*     REG14,                                                       0320
*     REG2) UNRSTD;                                                0320
*MTCESTAE:                                                         0321
*   ;                                                              0321
MTCESTAE DS    0H                                                  0322
*   DO;                                                            0322
*                                                                  0322
*     /***************************************************************/
*     /*                                                             */
*     /* MTCESTAE RECOVERS FROM ERRORS IN MEMTERM CONTROLLER AND     */
*     /* MEMTERM SRB ROUTINE. ON ENTRY, AN ESTAE IS ISSUED TO PROTECT*/
*     /* THE PROCESSING OF THIS ESTAE EXIT (ON A SECONDARY ERROR,THE */
*     /* TERMINATION QUEUE PTR WILL BE ZEROED, THE MEMTERM ECB WILL  */
*     /* BE ZEROED AND RETRY WILL BE AT MAINLINE WAIT). THE MEMTERM  */
*     /* ECB IS MADE POSTED, THE TERMINATION QUEUE IS TRUNCATED AT   */
*     /* THE ASCB BEING REFERENCED, AND THE DISP LOCK IS RELEASED.   */
*     /* RETRY OCCURS AT THE WAIT IN MAINLINE MTC. IF THE ERROR TOOK */
*     /* PLACE IN THE SRB, THEN THE SRB LOCK IS MADE AVAILABLE, THE  */
*     /* MEMTERM ECB IS POSTED, AND RETRY OCCURS AT NSI IN MAINLINE  */
*     /* MTC.                                                        */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0323
*     RFY                                                          0323
*      (REG0,                                                      0323
*       REG1,                                                      0323
*       REG2,                                                      0323
*       SDWAPTR) RSTD;                                             0323
*     PSAPTR=0;                                                    0324
         SLR   PSAPTR,PSAPTR                                       0324
*     GEN;                                                         0325
         BALR  REG15,0
         USING *,REG15
*     IF REG0=12 THEN               /* FIND TRACK AREA               */
         C     REG0,@CF01102                                       0326
         BNE   @RF00326                                            0326
*       GOTNPTR=REG2;               /* IN REG2 IF NO SDWA            */
         LR    GOTNPTR,REG2                                        0327
*     ELSE                          /* SDWA AVAILABLE                */
*       GOTNPTR=SDWAPARM;           /* IN SDWAPARM IF SDWA EXISTS    */
         B     @RC00326                                            0328
@RF00326 L     GOTNPTR,SDWAPARM(,SDWAPTR)                          0328
*     BASEREG=ERREG(8+1);           /* RELOAD CODE REG               */
@RC00326 L     BASEREG,ERREG+32(,GOTNPTR)                          0329
*     GEN(DROP 15);                 /* BACK TO REGULAR CODEREG       */
         DROP 15
*     IF REG0=12 THEN               /* CHECK FOR NO SDWA             */
         C     REG0,@CF01102                                       0331
         BNE   @RF00331                                            0331
*       DO;                         /* NO SDWA                       */
*         IF INITDONE=OFF THEN      /* CHECK FOR INITIALIZATION    0333
*                                      FINISHED.                     */
         TM    INITDONE(GOTNPTR),B'00100000'                       0333
         BNZ   @RF00333                                            0333
*           DO;                     /* NOT INITIALIZED               */
*             REG15=0;              /* INDICATE CONTINUE WITH      0335
*                                      TERMINATION.                  */
         SLR   REG15,REG15                                         0335
*             GOTO REG14;           /* RETURN                        */
         BR    REG14                                               0336
*           END;                                                   0337
*         REG0=ADDR(MTCESTAX);      /* RETRY AT MTCESTAE EXTENSION   */
@RF00333 LA    REG0,MTCESTAX                                       0338
*         REG15=4;                  /* INDICATE RETRY                */
         LA    REG15,4                                             0339
*         GOTO REG14;               /* RETURN TO RTM2                */
         BR    REG14                                               0340
*       END;                                                       0341
*                                                                  0341
*     /***************************************************************/
*     /*                                                             */
*     /* SDWA AND REG SAVE AREA ARE AVAILABLE                        */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0342
*     GEN(STM 14,12,12(13));        /* SAVE RTM2 REGS                */
@RF00331 DS    0H                                                  0342
         STM 14,12,12(13)
*     IF INITDONE=OFF THEN          /* CHECK FOR INITIALIZATION    0343
*                                      FINISHED.                     */
         TM    INITDONE(GOTNPTR),B'00100000'                       0343
         BNZ   @RF00343                                            0343
*       DO;                         /* SETRP RC(0)REGS(14,12)        */
*         RESPECIFY                                                0345
*          (GPR00P,                                                0345
*           GPR01P,                                                0345
*           GPR14P,                                                0345
*           GPR15P) RSTD;                                          0345
*         GPR01P->SDWARCDE=0;       /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0346
*         GEN(RETURN (14,12));                                     0347
         RETURN (14,12)
*         RESPECIFY                                                0348
*          (GPR00P,                                                0348
*           GPR01P,                                                0348
*           GPR14P,                                                0348
*           GPR15P) UNRSTD;                                        0348
*       END;                        /* NOT FINISHED, SO CONTINUE WITH
*                                      TERMINATION                   */
*     RFY                                                          0350
*       TEMPSDWA RSTD;                                             0350
@RF00343 DS    0H                                                  0351
*     RFY                                                          0351
*       SDWA BASED(TEMPSDWA);                                      0351
*     TEMPSDWA=SDWAPTR;             /* MOVE SDWA PTR FROM REG 1      */
*                                                                  0352
         LR    TEMPSDWA,SDWAPTR                                    0352
*     /***************************************************************/
*     /*                                                             */
*     /* SET SDWA UP FOR RECORDING                                   */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0353
*     SDWAVRA=ERRAREA;              /* RECORD ERROR TRACKING AREA    */
         MVI   SDWAVRA+76(TEMPSDWA),C' '                           0353
         MVC   SDWAVRA+77(31,TEMPSDWA),SDWAVRA+76(TEMPSDWA)        0353
         MVC   SDWAVRA(76,TEMPSDWA),ERRAREA(GOTNPTR)               0353
*     SDWAURAL=LENGTH(ERRAREA);     /* INDICATE LENGTH OF DATA       */
         MVI   SDWAURAL(TEMPSDWA),X'4C'                            0354
*     SDWAHEX=ON;                   /* REQUEST HEX FORMAT OF DATA    */
         OI    SDWAHEX(TEMPSDWA),B'10000000'                       0355
*     SDWAMODN='IEAVTMTC';          /* NAME OF MODULE                */
         MVC   SDWAMODN(8,TEMPSDWA),@CC02109                       0356
*     SDWACSCT='IEAVTMTC';          /* NAME OF CSECT                 */
         MVC   SDWACSCT(8,TEMPSDWA),@CC02109                       0357
*     SDWAREXN='MTCESTAE';          /* NAME OF ESTAE EXIT            */
         MVC   SDWAREXN(8,TEMPSDWA),@CC02110                       0358
*     IF SDWASRBM=ON THEN           /* WAS ERROR IN AN SRB ?         */
         TM    SDWASRBM(TEMPSDWA),B'00000001'                      0359
         BNO   @RF00359                                            0359
*       DO;                         /* SRB FAILED                    */
*         IF SDWANRBE=OFF THEN      /* WAS TASK EXECUTING AT THIS RB
*                                      LEVEL WHEN THE ABEND CAME IN? */
         TM    SDWANRBE(TEMPSDWA),B'01000000'                      0361
         BNZ   @RF00361                                            0361
*           DO;                     /* YES, THIS MUST BE THE SRB   0362
*                                      ASSOCIATED WITH MTC. ATTEMPT
*                                      TO RETRY AT THE NEXT        0362
*                                      SEQUENTIAL INSTRUCTION        */
*             RTCTMLCK=AVAILBLE;    /* ALLOW SRB TO BE USED AGAIN    */
         L     @12,CVTPTR(,PSAPTR)                                 0363
         L     @12,CVTRTMCT(,@12)                                  0363
         MVC   RTCTMLCK(4,@12),@CF00066                            0363
*             DO;                   /* SETRP FRESDWA(YES)RETREGS(YES)
*                                      RECORD(YES)WKAREA(TEMPSDWA)RC(
*                                      4)RETADDR(SDWAADD2->ALABEL)REG
*                                      S(14,12)                      */
*               RESPECIFY                                          0365
*                (GPR00P,                                          0365
*                 GPR01P,                                          0365
*                 GPR14P,                                          0365
*                 GPR15P) RSTD;                                    0365
*               GPR01P=TEMPSDWA;                                   0366
         LR    GPR01P,TEMPSDWA                                     0366
*               GPR01P->SDWARCDE=4; /* STORE RC INTO SDWA            */
         MVI   SDWARCDE(GPR01P),X'04'                              0367
*               GPR01P->SDWARTYA=ADDR(SDWAADD2->ALABEL);/* SAVE RETRY
*                                      ADDRESS                       */
         L     @12,SDWAADD2-1(,TEMPSDWA)                           0368
         LA    @12,0(,@12)                                         0368
         ST    @12,SDWARTYA(,GPR01P)                               0368
*               GPR01P->SDWAFREE='1'B;/* SET FLAG TO FREE SDWA       */
*               GPR01P->SDWARCRD='1'B;/* TURN ON RECORD INDICATOR    */
*               GPR01P->SDWAUPRG='1'B;/* TURN ON RETREGS INDICATOR   */
         OI    SDWAFREE(GPR01P),B'10001100'                        0371
*               GEN(RETURN (14,12));                               0372
         RETURN (14,12)
*               RESPECIFY                                          0373
*                (GPR00P,                                          0373
*                 GPR01P,                                          0373
*                 GPR14P,                                          0373
*                 GPR15P) UNRSTD;                                  0373
*             END;                  /*                       @YM02694*/
*           END;                                                   0375
*         ELSE                                                     0376
*           ;                       /* TASK NOT EXECUTING AT THIS RB
*                                      LEVEL                         */
@RF00361 DS    0H                                                  0377
*       END;                                                       0377
*     GEN(ESTAE MTCESTA2,CT,PARAM=(GOTNPTR));/* SET SECONDARY      0378
*                                      PROTECT.                      */
@RF00359 DS    0H                                                  0378
         ESTAE MTCESTA2,CT,PARAM=(GOTNPTR)
*     IF ERRASCB^=0 THEN            /* WAS TERM QUEUE BEING SEARCHED?*/
         SLR   @12,@12                                             0379
         L     @09,ERRASCB(,GOTNPTR)                               0379
         CR    @09,@12                                             0379
         BE    @RF00379                                            0379
*       DO;                         /* BEING SEARCHED                */
*         QSEARCH=OFF;              /* TURN OFF SEARCH INDICATOR     */
         NI    QSEARCH(GOTNPTR),B'10111111'                        0381
*         ERRASCB->ASCBTMCH=0;      /* TRUNCATE QUEUE                */
         ST    @12,ASCBTMCH(,@09)                                  0382
*         ERRASCB=0;                /* RESET TRACKING                */
         ST    @12,ERRASCB(,GOTNPTR)                               0383
*       END;                                                       0384
*     GEN(ESTAE 0);                 /* DELETE SECONDARY PROTECTION   */
@RF00379 DS    0H                                                  0385
         ESTAE 0
*     RTCTMECB='40000000'X;         /* MAKE ECB 'POSTED'             */
         L     @12,CVTPTR(,PSAPTR)                                 0386
         L     @12,CVTRTMCT(,@12)                                  0386
         MVC   RTCTMECB(4,@12),@CB02111                            0386
*SECNDERR:                                                         0387
*     ;                             /* RETRY PT. FOR SECONDARY     0387
*                                      FAILURE                       */
SECNDERR DS    0H                                                  0388
*     SDWASRSV=ERREGS;              /* REGS STORED BY MTC MAINLINE   */
         MVC   SDWASRSV(64,TEMPSDWA),ERREGS(GOTNPTR)               0388
*     DO;                           /* SETRP RC(4)RETADDR(MTCMAIN)RET
*                                      REGS(YES)RECORD(YES)REGS(14,12
*                                      )FRESDWA(YES)WKAREA(TEMPSDWA) */
*       RESPECIFY                                                  0390
*        (GPR00P,                                                  0390
*         GPR01P,                                                  0390
*         GPR14P,                                                  0390
*         GPR15P) RSTD;                                            0390
*       GPR01P=TEMPSDWA;                                           0391
         LR    GPR01P,TEMPSDWA                                     0391
*       GPR01P->SDWARCDE=4;         /* STORE RC INTO SDWA            */
         MVI   SDWARCDE(GPR01P),X'04'                              0392
*       GPR01P->SDWARTYA=ADDR(MTCMAIN);/* SAVE RETRY ADDRESS         */
         LA    @12,MTCMAIN                                         0393
         ST    @12,SDWARTYA(,GPR01P)                               0393
*       GPR01P->SDWAFREE='1'B;      /* SET FLAG TO FREE SDWA         */
*       GPR01P->SDWARCRD='1'B;      /* TURN ON RECORD INDICATOR      */
*       GPR01P->SDWAUPRG='1'B;      /* TURN ON RETREGS INDICATOR     */
         OI    SDWAFREE(GPR01P),B'10001100'                        0396
*       GEN(RETURN (14,12));                                       0397
         RETURN (14,12)
*       RESPECIFY                                                  0398
*        (GPR00P,                                                  0398
*         GPR01P,                                                  0398
*         GPR14P,                                                  0398
*         GPR15P) UNRSTD;                                          0398
*     END;                                                         0399
*     RFY                                                          0400
*       TEMPSDWA UNRSTD;                                           0400
*     RFY                                                          0401
*       SDWA BASED(SDWAPTR);                                       0401
*MTCESTA2:                                                         0402
*     ;                             /* SECONDARY ESTAE EXIT          */
MTCESTA2 DS    0H                                                  0403
*     GEN(BALR REG15,0);            /* ADDRESSIBILITY                */
         BALR REG15,0
*     GEN(USING *,REG15);                                          0404
         USING *,REG15
*     PSAPTR=0;                     /* PSA LOC 0                     */
         SLR   PSAPTR,PSAPTR                                       0405
*     RTCTFASB=0;                   /* ZERO THE MEMTERM QUEUE PTR    */
         SLR   @12,@12                                             0406
         L     @09,CVTPTR(,PSAPTR)                                 0406
         L     @09,CVTRTMCT(,@09)                                  0406
         ST    @12,RTCTFASB(,@09)                                  0406
*     RTCTMECB=0;                   /* ZERO THE MEMTERM ECB          */
         ST    @12,RTCTMECB(,@09)                                  0407
*     IF REG0=12 THEN               /* FIND TRACK AREA PTR           */
         C     REG0,@CF01102                                       0408
         BNE   @RF00408                                            0408
*       GOTNPTR=REG2;               /* IN REG2 IF NO SDWA            */
         LR    GOTNPTR,REG2                                        0409
*     ELSE                          /* SDWA EXISTS                   */
*       GOTNPTR=SDWAPARM;           /* IN SDWAPARM IF SDWA           */
         B     @RC00408                                            0410
@RF00408 L     GOTNPTR,SDWAPARM(,SDWAPTR)                          0410
*     BASEREG=ERREG(8+1);           /* RELOAD CODEREG                */
@RC00408 L     BASEREG,ERREG+32(,GOTNPTR)                          0411
*     GEN(DROP REG15);              /* BACK TO REGULAR CODEREG       */
         DROP REG15
*     IF REG0=12 THEN               /* CHECK FOR NO SDWA             */
         C     REG0,@CF01102                                       0413
         BNE   @RF00413                                            0413
*       DO;                         /* NO SDWA                       */
*         REG0=ADDR(SECNDERR);      /* RETRY AT CODE IN FIRST ESTAE  */
         LA    REG0,SECNDERR                                       0415
*         REG15=4;                  /* INDICATE RETRY                */
         LA    REG15,4                                             0416
*         GOTO REG14;               /* RETURN                        */
         BR    REG14                                               0417
*       END;                                                       0418
*                                                                  0418
*     /***************************************************************/
*     /*                                                             */
*     /* SDWA AND REG SAVE AREA ARE AVAILABLE                        */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0419
*     GEN(STM 14,12,12(13));                                       0419
@RF00413 DS    0H                                                  0419
         STM 14,12,12(13)
*     SDWAMODN='IEAVTMTC';          /* MODULE NAME                   */
         MVC   SDWAMODN(8,SDWAPTR),@CC02109                        0420
*     SDWACSCT='IEAVTMTC';          /* CSECT NAME                    */
         MVC   SDWACSCT(8,SDWAPTR),@CC02109                        0421
*     SDWAREXN='MTCESTA2';          /* ESTAE EXIT NAME               */
         MVC   SDWAREXN(8,SDWAPTR),@CC02117                        0422
*     DO;                           /* SETRP RC(4)RETADDR(SECNDERR)RE
*                                      GS(14,12)FRESDWA(YES)RECORD(YE
*                                      S)RETREGS(YES)                */
*       RESPECIFY                                                  0424
*        (GPR00P,                                                  0424
*         GPR01P,                                                  0424
*         GPR14P,                                                  0424
*         GPR15P) RSTD;                                            0424
*       GPR01P->SDWARCDE=4;         /* STORE RC INTO SDWA            */
         MVI   SDWARCDE(GPR01P),X'04'                              0425
*       GPR01P->SDWARTYA=ADDR(SECNDERR);/* SAVE RETRY ADDRESS        */
         LA    @12,SECNDERR                                        0426
         ST    @12,SDWARTYA(,GPR01P)                               0426
*       GPR01P->SDWAFREE='1'B;      /* SET FLAG TO FREE SDWA         */
*       GPR01P->SDWARCRD='1'B;      /* TURN ON RECORD INDICATOR      */
*       GPR01P->SDWAUPRG='1'B;      /* TURN ON RETREGS INDICATOR     */
         OI    SDWAFREE(GPR01P),B'10001100'                        0429
*       GEN(RETURN (14,12));                                       0430
         RETURN (14,12)
*       RESPECIFY                                                  0431
*        (GPR00P,                                                  0431
*         GPR01P,                                                  0431
*         GPR14P,                                                  0431
*         GPR15P) UNRSTD;                                          0431
*     END;                                                         0432
*MTCESTAX:                                                         0433
*                                                                  0433
*     /***************************************************************/
*     /*                                                             */
*     /* ESTAE EXTENSION HANDLES RETRY WHEN NO SDWA EXISTS. EXTENSION*/
*     /* WILL HANDLE RELOADING OF REGS. ON ENTRY, REG1 POINTS TO     */
*     /* TRACKING AREA.                                              */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0433
*     GOTNPTR=REG1;                 /* PTR TO TRACK AREA             */
MTCESTAX LR    GOTNPTR,REG1                                        0433
*     GEN REFS(ERREGS,GOTNPTR)(LM 0,15,ERREGS(GOTNPTR));           0434
         LM 0,15,ERREGS(GOTNPTR)
*     GOTO MTCMAIN;                 /* GO TO RETRY POINT             */
         B     MTCMAIN                                             0435
*     RFY                                                          0436
*      (REG0,                                                      0436
*       REG1,                                                      0436
*       REG2,                                                      0436
*       SDWAPTR) UNRSTD;                                           0436
*   END;                                                           0437
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00P PTR(31) REG(0),                                       0438
*     GPR01P PTR(31) REG(1),                                       0438
*     GPR11P PTR(31) REG(11),                                      0438
*     GPR12P PTR(31) REG(12),                                      0438
*     GPR13P PTR(31) REG(13),                                      0438
*     GPR14P PTR(31) REG(14),                                      0438
*     GPR15P PTR(31) REG(15);                                      0438
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0439
*     I031F FIXED(31) BASED,                                       0439
*     I031P PTR(31) BASED,                                         0439
*     I015F FIXED(15) BASED,                                       0439
*     I015P PTR(15) BASED,                                         0439
*     I008P PTR(8) BASED,                                          0439
*     I001C CHAR(1) BASED;                                         0439
*   END IEAVTMTC                                                   0440
*                                                                  0440
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (MTCSPEC )                                       */
*/*%INCLUDE SYSLIB  (MTCDCL  )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHARTCT )                                       */
*/*%INCLUDE SYSLIB  (IHASRB  )                                       */
*/*%INCLUDE SYSLIB  (IHARMPL )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IHACSD  )                                       */
*/*%INCLUDE SYSLIB  (IHAPCCAT)                                       */
*/*%INCLUDE SYSLIB  (IHAPCCA )                                       */
*/*%INCLUDE SYSLIB  (IHASCVT )                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (MTCPATCH)                                       */
*/*%INCLUDE SYSLIB  (MTCINIT )                                       */
*/*%INCLUDE SYSLIB  (DEQASCB )                                       */
*/*%INCLUDE SYSLIB  (STOPACT )                                       */
*/*%INCLUDE SYSLIB  (SRBRTN  )                                       */
*/*%INCLUDE SYSLIB  (MTCESTAE)                                       */
*                                                                  0440
*       ;                                                          0440
@DATA    DS    0H
@DATD    DSECT
         DS    0F
IEAVTMTC CSECT
         DS    0F
@CF00066 DC    F'1'
@CF01102 DC    F'12'
@CF00126 DC    F'16'
@CF02128 DC    F'104'
@CF02139 DC    F'-4'
@CF02093 DC    XL4'52000000'
@CF02104 DC    XL4'00010000'
@CF02133 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
IEAVTMTC CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CA00028 DC    A(IEAVTMTC)
         DS    0D
ZERO     DC    A(0)
@CC02109 DC    C'IEAVTMTC'
@CC02110 DC    C'MTCESTAE'
@CC02117 DC    C'MTCESTA2'
@CC02088 DC    C'SRB '
@CB02111 DC    X'40000000'
MTCPATCH DS    10F
IEAVTMTC CSECT
ESTAELST ESTAE MTCESTAE,RECORD=YES,MF=L
ATTCHLST ATTACH EP=IEAVTMTR,DPMOD=-1,SF=L,JSTCB=YES
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEAVTMTC CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
PSAPTR   EQU   @07
ASCBREG  EQU   @05
SDWAPTR  EQU   @01
ECBPTR   EQU   @02
INITFLAG EQU   @05
GOTNPTR  EQU   @03
PREVASCB EQU   @02
TEMPASCB EQU   @06
CPUFLAGS EQU   @06
CPUMASK  EQU   @02
SRBEPBS  EQU   @05
TEMPSDWA EQU   @04
REG0     EQU   @00
REG1     EQU   @01
REG2     EQU   @02
BASEREG  EQU   @08
REG10    EQU   @10
REG11    EQU   @11
REG12    EQU   @12
REG13    EQU   @13
REG14    EQU   @14
REG15    EQU   @15
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR15P   EQU   @15
GPR11P   EQU   @11
GPR12P   EQU   @12
GPR13P   EQU   @13
GPR14P   EQU   @14
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVT0PT01 EQU   CVTMAP+152
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTABEND EQU   CVTMAP+200
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
RTCT     EQU   0
RTCTSAP  EQU   RTCT+4
RTCTSAP1 EQU   RTCTSAP
RTCTSAP2 EQU   RTCTSAP+1
RTCTSUP  EQU   RTCT+6
RTCTSUP1 EQU   RTCTSUP
RTCTSUP2 EQU   RTCTSUP+1
RTCTSAO  EQU   RTCT+8
RTCTSAO1 EQU   RTCTSAO
RTCTSAO2 EQU   RTCTSAO+1
RTCTSUO  EQU   RTCT+10
RTCTSUO1 EQU   RTCTSUO
RTCTSUO2 EQU   RTCTSUO+1
RTCTSDO  EQU   RTCT+12
RTCTSDO1 EQU   RTCTSDO
RTCTSDO2 EQU   RTCTSDO+1
RTCTABD  EQU   RTCT+14
RTCTIDMP EQU   RTCTABD
RTCTSDF  EQU   RTCT+16
RTCTSDF1 EQU   RTCTSDF
RTCTSDF2 EQU   RTCTSDF+1
RTCTMECB EQU   RTCT+20
RTCTFASB EQU   RTCT+24
RTCTSDDS EQU   RTCT+36
RTCTFLG  EQU   RTCTSDDS+3
RTCTMLCK EQU   RTCT+164
RTCTMSRB EQU   RTCT+168
RTCTRFLG EQU   RTCT+176
SRBSECT  EQU   0
SRB      EQU   SRBSECT
SRBID    EQU   SRB
SRBASCB  EQU   SRB+8
SRBFLC   EQU   SRB+12
SRBCPAFF EQU   SRBFLC
SRBPASID EQU   SRBFLC+2
SRBPTCB  EQU   SRBFLC+4
SRBEP    EQU   SRB+20
SRBRMTR  EQU   SRB+24
SRBPARM  EQU   SRB+28
SRBSAVE  EQU   SRB+32
SRBPKF   EQU   SRB+36
SRBPRIOR EQU   SRB+37
RMPL     EQU   0
RMPLFLG1 EQU   RMPL
RMPLTYPE EQU   RMPLFLG1
RMPLTERM EQU   RMPLFLG1
RMPLASID EQU   RMPL+2
RMPLASCB EQU   RMPL+4
RMPLRMWA EQU   RMPL+16
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBCPUS EQU   ASCB+32
ASCBASID EQU   ASCB+36
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBABNT EQU   ASCBFLG1
ASCBTMCH EQU   ASCB+104
ASCBDSP1 EQU   ASCB+114
ASCBFAIL EQU   ASCBDSP1
ASCBFLG2 EQU   ASCB+115
ASCBSRBS EQU   ASCB+118
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
CSD      EQU   0
CSDCPUAL EQU   CSD+8
CSDCPUOL EQU   CSD+10
CSDSCWRD EQU   CSD+12
CSDSCFL1 EQU   CSDSCWRD
CSDSCFL2 EQU   CSDSCWRD+1
CSDSCFL3 EQU   CSDSCWRD+2
CSDSCFL4 EQU   CSDSCWRD+3
CSDACR   EQU   CSD+22
CSDFLAGS EQU   CSD+23
PCCAVT   EQU   0
PCCAT00P EQU   PCCAVT
PCCA     EQU   0
PCCAPSAV EQU   PCCA+24
PCCATMST EQU   PCCA+128
PCCATMFL EQU   PCCATMST
PCCATODE EQU   PCCATMST+1
PCCACCE  EQU   PCCATMST+2
PCCAINTE EQU   PCCATMST+3
PCCAEMSB EQU   PCCA+136
PCCAEMSI EQU   PCCAEMSB
PCCARISP EQU   PCCAEMSI
PCCAEMS2 EQU   PCCAEMSI+1
PCCAEMS3 EQU   PCCAEMSI+2
PCCARMSB EQU   PCCAEMSI+3
PCCAWERP EQU   PCCA+280
PCCACHPF EQU   PCCAWERP+4
PCCACHBL EQU   PCCAWERP+5
PCCACHVA EQU   PCCAWERP+6
PCCACHTS EQU   PCCAWERP+7
PCCACHS1 EQU   PCCA+288
PCCACHS2 EQU   PCCA+289
PCCACHRB EQU   PCCA+290
PCCACHF1 EQU   PCCA+308
PCCACHF2 EQU   PCCA+309
PCCACHF3 EQU   PCCA+310
PCCACHF4 EQU   PCCA+311
PCCAPTR  EQU   0
SCVTSECT EQU   0
SCVTPTRM EQU   SCVTSECT+164
SDWA     EQU   0
SDWAPARM EQU   SDWA
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAADD2 EQU   SDWANXT2+1
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAERRB EQU   SDWAFLGS+1
SDWASRBM EQU   SDWAERRB
SDWAERRC EQU   SDWAFLGS+2
SDWAERRD EQU   SDWAFLGS+3
SDWANRBE EQU   SDWAERRD
SDWAIOFS EQU   SDWA+238
SDWARTYA EQU   SDWA+240
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWARCDE EQU   SDWAPARQ
SDWAACF2 EQU   SDWAPARQ+1
SDWARCRD EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWAMODN EQU   SDWARECP
SDWACSCT EQU   SDWARECP+8
SDWAREXN EQU   SDWARECP+16
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
SDWAHEX  EQU   SDWADPVA
SDWAURAL EQU   SDWARA+3
SDWAVRA  EQU   SDWARA+4
GOTNCORE EQU   0
ERRAREA  EQU   GOTNCORE
ERRASCB  EQU   ERRAREA
FLAGS    EQU   ERRAREA+4
STOPFLAG EQU   FLAGS
QSEARCH  EQU   FLAGS
INITDONE EQU   FLAGS
I        EQU   ERRAREA+8
ERREGS   EQU   ERRAREA+12
ERREG    EQU   ERREGS
RMGRSAVE EQU   GOTNCORE+76
RMPLPTR  EQU   GOTNCORE+148
RMPLCORE EQU   GOTNCORE+152
WORKAREA EQU   GOTNCORE+176
WORKWORD EQU   WORKAREA
SRBCORE  EQU   GOTNCORE+240
ASMPURGE EQU   0
RSMPURGE EQU   0
POSTBR   EQU   0
MEMSWTCH EQU   0
ALABEL   EQU   0
INPUTECB EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
PSARSVTE EQU   PSARSVT
CVTPTR   EQU   FLCCVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRTMCT EQU   CVTS01+224
CVTCSD   EQU   CVTS01+312
CVTPCCAT EQU   CVTS01+416
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTVEMS0 EQU   CVTS01+516
CVTGSDA  EQU   CVTS01+600
CVTASMRM EQU   CVTS01+668
SCVTSPTR EQU   CVTABEND
PPL      EQU   WORKAREA
PPLOPT1  EQU   PPL
PPLHIO   EQU   PPLOPT1
PPLEXT   EQU   PPLOPT1
PPLOPT2  EQU   PPL+12
PPLMEM   EQU   PPLOPT2
PPLASID  EQU   PPL+14
CSDPTR   EQU   CVTCSD
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00117 EQU   PPL+13
PPLTSKM  EQU   PPLOPT2
PRLOTCB  EQU   PPLOPT2
PPLBYPCV EQU   PPLOPT2
@NM00116 EQU   PPLOPT2
PPLPIRL  EQU   PPL+9
@NM00115 EQU   PPL+8
PPLTCB   EQU   PPL+5
PPLCC    EQU   PPL+4
PPLDSID  EQU   PPL+1
PPLTASK  EQU   PPLOPT1
PPLRB    EQU   PPLOPT1
@NM00114 EQU   PPLOPT1
PPLREL   EQU   PPLOPT1
PPLPOST  EQU   PPLOPT1
PPLDS    EQU   PPLOPT1
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
@NM00113 EQU   SDWA+512
@NM00112 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
@NM00111 EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00110 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00109 EQU   SDWADDAT+3
@NM00108 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00107 EQU   SDWADDAT+1
@NM00106 EQU   SDWASDAT
SDWAQQS  EQU   SDWASDAT
SDWACBS  EQU   SDWASDAT
SDWAGTF  EQU   SDWASDAT
SDWASWA  EQU   SDWASDAT
SDWALSQA EQU   SDWASDAT
SDWASQA  EQU   SDWASDAT
SDWANUC  EQU   SDWASDAT
@NM00105 EQU   SDWADUMP+2
@NM00104 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00103 EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
@NM00102 EQU   SDWA+290
SDWAASID EQU   SDWA+288
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00101 EQU   SDWAACF3
@NM00100 EQU   SDWAACF2
@NM00099 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00098 EQU   SDWAACF2
SDWALCPU EQU   SDWACPUA+2
@NM00097 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
@NM00096 EQU   SDWA+239
@NM00095 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
@NM00094 EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWACLUP EQU   SDWAERRD
@NM00093 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAPERC EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00092 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWAMCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00091 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00090 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00089 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00088 EQU   SDWAINC2
@NM00087 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00086 EQU   SDWAILC2
@NM00085 EQU   SDWAAEC2
@NM00084 EQU   SDWANXT2
@NM00083 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00082 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00081 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00080 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00079 EQU   SDWAINC1
@NM00078 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00077 EQU   SDWAILC1
@NM00076 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00075 EQU   SDWANXT1
@NM00074 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00073 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00072 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00071 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00070 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00069 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00068 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
SDWACMPC EQU   SDWAABCC+1
@NM00067 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00066 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAREQ  EQU   SDWACMPF
@NM00065 EQU   SCVTSECT+180
@NM00064 EQU   SCVTSECT+176
SCVTPIQE EQU   SCVTSECT+172
@NM00063 EQU   SCVTSECT+168
@NM00062 EQU   SCVTSECT+160
@NM00061 EQU   SCVTSECT+156
SCVTQCBR EQU   SCVTSECT+152
SCVTSTAT EQU   SCVTSECT+148
@NM00060 EQU   SCVTSECT+144
SCVTTQE  EQU   SCVTSECT+140
@NM00059 EQU   SCVTSECT+136
SCVTSVCT EQU   SCVTSECT+132
@NM00058 EQU   SCVTSECT+128
@NM00057 EQU   SCVTSECT+124
SCVTRXLQ EQU   SCVTSECT+120
@NM00056 EQU   SCVTSECT+116
SCVTCTCB EQU   SCVTSECT+112
@NM00055 EQU   SCVTSECT+108
@NM00054 EQU   SCVTSECT+104
@NM00053 EQU   SCVTSECT+100
@NM00052 EQU   SCVTSECT+96
SCVTCOMM EQU   SCVTSECT+92
@NM00051 EQU   SCVTSECT+88
@NM00050 EQU   SCVTSECT+84
@NM00049 EQU   SCVTSECT+80
@NM00048 EQU   SCVTSECT+76
@NM00047 EQU   SCVTSECT+72
SCVTGMBR EQU   SCVTSECT+68
SCVTRPTR EQU   SCVTSECT+64
SCVTHSKP EQU   SCVTSECT+60
@NM00046 EQU   SCVTSECT+56
@NM00045 EQU   SCVTSECT+52
SCVTLFRM EQU   SCVTSECT+48
SCVTCDCL EQU   SCVTSECT+44
@NM00044 EQU   SCVTSECT+40
SCVTRACE EQU   SCVTSECT+36
@NM00043 EQU   SCVTSECT+32
SCVTRMBR EQU   SCVTSECT+28
@NM00042 EQU   SCVTSECT+24
@NM00041 EQU   SCVTSECT+20
@NM00040 EQU   SCVTSECT+16
@NM00039 EQU   SCVTSECT+14
SCVTBR14 EQU   SCVTSECT+12
SCVTSPET EQU   SCVTSECT+8
SCVTPGWR EQU   SCVTSECT+4
SCVTPGTM EQU   SCVTSECT
@NM00038 EQU   PCCA+512
PCCACAT  EQU   PCCA+384
PCCARV36 EQU   PCCA+380
PCCARV35 EQU   PCCA+378
PCCARV01 EQU   PCCA+377
PCCACPUM EQU   PCCA+376
PCCARV63 EQU   PCCA+372
PCCARV62 EQU   PCCA+368
PCCARV61 EQU   PCCA+364
PCCARV60 EQU   PCCA+360
PCCARV59 EQU   PCCA+356
PCCARV58 EQU   PCCA+352
PCCARV57 EQU   PCCA+348
PCCARV56 EQU   PCCA+344
PCCARV55 EQU   PCCA+340
PCCARV54 EQU   PCCA+336
PCCALOGA EQU   PCCA+332
PCCACHID EQU   PCCA+324
PCCACHSV EQU   PCCA+312
PCCARV79 EQU   PCCACHF4
PCCARV78 EQU   PCCACHF4
PCCARV77 EQU   PCCACHF4
PCCARV76 EQU   PCCACHF4
PCCARV75 EQU   PCCACHF4
PCCARV74 EQU   PCCACHF4
PCCARV73 EQU   PCCACHF4
PCCARV72 EQU   PCCACHF4
PCCARV71 EQU   PCCACHF3
PCCARV70 EQU   PCCACHF3
PCCARV69 EQU   PCCACHF3
PCCARV68 EQU   PCCACHF3
PCCARV67 EQU   PCCACHF3
PCCARV66 EQU   PCCACHF3
PCCARV65 EQU   PCCACHF3
PCCARV64 EQU   PCCACHF3
PCCACF28 EQU   PCCACHF2
PCCACF27 EQU   PCCACHF2
PCCACF26 EQU   PCCACHF2
PCCACF25 EQU   PCCACHF2
PCCACF24 EQU   PCCACHF2
PCCACF23 EQU   PCCACHF2
PCCACF22 EQU   PCCACHF2
PCCACF21 EQU   PCCACHF2
PCCACF18 EQU   PCCACHF1
PCCACF17 EQU   PCCACHF1
PCCACF16 EQU   PCCACHF1
PCCACF15 EQU   PCCACHF1
PCCACF14 EQU   PCCACHF1
PCCACF13 EQU   PCCACHF1
PCCACF12 EQU   PCCACHF1
PCCACF11 EQU   PCCACHF1
PCCARV05 EQU   PCCA+306
PCCACHPB EQU   PCCA+305
PCCALGP2 EQU   PCCA+304
PCCALGP1 EQU   PCCA+303
PCCALOGL EQU   PCCA+302
PCCARV80 EQU   PCCA+300
PCCACHW2 EQU   PCCA+296
PCCACHW1 EQU   PCCA+292
PCCAIOSI EQU   PCCA+291
PCCACNRB EQU   PCCACHRB
PCCACCVB EQU   PCCACHRB
PCCACSNB EQU   PCCACHRB
PCCARV52 EQU   PCCACHRB
PCCACHIB EQU   PCCACHRB
PCCACTIB EQU   PCCACHRB
PCCACINB EQU   PCCACHRB
PCCACSIB EQU   PCCACHRB
PCCARV51 EQU   PCCACHS2
PCCARV50 EQU   PCCACHS2
PCCACCRA EQU   PCCACHS2
PCCACURC EQU   PCCACHS2
PCCACNLG EQU   PCCACHS2
PCCACMOD EQU   PCCACHS2
PCCACALT EQU   PCCACHS2
PCCACIOR EQU   PCCACHS2
PCCARV47 EQU   PCCACHS1
PCCACUCB EQU   PCCACHS1
PCCACIBC EQU   PCCACHS1
PCCACAND EQU   PCCACHS1
PCCACNLS EQU   PCCACHS1
PCCACFRR EQU   PCCACHS1
PCCACNRE EQU   PCCACHS1
PCCACCMP EQU   PCCACHS1
PCCACSEQ EQU   PCCACHTS
PCCACDIN EQU   PCCACHTS
PCCARV44 EQU   PCCACHTS
PCCARV43 EQU   PCCACHTS
PCCACTEC EQU   PCCACHTS
PCCACDAV EQU   PCCACHVA
PCCACCHV EQU   PCCACHVA
PCCACCMD EQU   PCCACHVA
PCCACUNS EQU   PCCACHVA
PCCACSQV EQU   PCCACHVA
PCCARV42 EQU   PCCACHVA
PCCARV41 EQU   PCCACHVA
PCCACITF EQU   PCCACHVA
PCCARV40 EQU   PCCACHBL
PCCARV39 EQU   PCCACHBL
PCCARV38 EQU   PCCACHBL
PCCACCUE EQU   PCCACHBL
PCCACSTG EQU   PCCACHBL
PCCACSCU EQU   PCCACHBL
PCCACCHA EQU   PCCACHBL
PCCACCPU EQU   PCCACHBL
PCCACNOR EQU   PCCACHPF
PCCACCNT EQU   PCCACHPF
PCCACSNS EQU   PCCACHPF
PCCARV37 EQU   PCCACHPF
PCCACHIO EQU   PCCACHPF
PCCACTIO EQU   PCCACHPF
PCCACINT EQU   PCCACHPF
PCCACSIO EQU   PCCACHPF
PCCACHUB EQU   PCCAWERP
PCCACHEL EQU   PCCA+168
PCCALRBR EQU   PCCA+164
PCCALRBV EQU   PCCA+160
PCCAPWAR EQU   PCCA+156
PCCAPWAV EQU   PCCA+152
PCCAEMSA EQU   PCCAEMSB+12
PCCAEMSE EQU   PCCAEMSB+8
PCCAEMSP EQU   PCCAEMSB+4
PCCARMS  EQU   PCCARMSB
PCCARV34 EQU   PCCARMSB
PCCARV33 EQU   PCCARMSB
PCCARV32 EQU   PCCARMSB
PCCARV31 EQU   PCCARMSB
PCCARV30 EQU   PCCARMSB
PCCARV29 EQU   PCCARMSB
PCCARV28 EQU   PCCARMSB
PCCARV27 EQU   PCCAEMS3
PCCARV26 EQU   PCCAEMS3
PCCARV25 EQU   PCCAEMS3
PCCARV24 EQU   PCCAEMS3
PCCARV23 EQU   PCCAEMS3
PCCARV22 EQU   PCCAEMS3
PCCARV21 EQU   PCCAEMS3
PCCARV20 EQU   PCCAEMS3
PCCARV19 EQU   PCCAEMS2
PCCARV18 EQU   PCCAEMS2
PCCARV17 EQU   PCCAEMS2
PCCARV16 EQU   PCCAEMS2
PCCARV15 EQU   PCCAEMS2
PCCARV14 EQU   PCCAEMS2
PCCARV13 EQU   PCCAEMS2
PCCARV12 EQU   PCCAEMS2
PCCARV11 EQU   PCCARISP
PCCARV10 EQU   PCCARISP
PCCARV09 EQU   PCCARISP
PCCARV08 EQU   PCCARISP
PCCARV07 EQU   PCCARISP
PCCARV06 EQU   PCCARISP
PCCASERL EQU   PCCARISP
PCCAPARL EQU   PCCARISP
PCCARPB  EQU   PCCA+132
PCCACTIN EQU   PCCAINTE
PCCANFIN EQU   PCCAINTE
PCCANUIN EQU   PCCAINTE
PCCACTCC EQU   PCCACCE
PCCANFCC EQU   PCCACCE
PCCANUCC EQU   PCCACCE
PCCACTTD EQU   PCCATODE
PCCANFTD EQU   PCCATODE
PCCANUTD EQU   PCCATODE
PCCARV04 EQU   PCCATMFL
PCCARV03 EQU   PCCATMFL
PCCARV02 EQU   PCCATMFL
PCCAMINT EQU   PCCATMFL
PCCAMCC  EQU   PCCATMFL
PCCAVKIL EQU   PCCATMFL
PCCASYNC EQU   PCCATMFL
PCCAINIT EQU   PCCATMFL
PCCARV9E EQU   PCCA+124
PCCARV9D EQU   PCCA+120
PCCARV9C EQU   PCCA+116
PCCARV9B EQU   PCCA+112
PCCARV9A EQU   PCCA+108
PCCARV99 EQU   PCCA+104
PCCARV98 EQU   PCCA+100
PCCARV97 EQU   PCCA+96
PCCARV96 EQU   PCCA+92
PCCARV95 EQU   PCCA+88
PCCARV94 EQU   PCCA+84
PCCARV93 EQU   PCCA+80
PCCARV92 EQU   PCCA+76
PCCARV91 EQU   PCCA+72
PCCARV90 EQU   PCCA+68
PCCARV89 EQU   PCCA+64
PCCARV88 EQU   PCCA+60
PCCARV87 EQU   PCCA+56
PCCARV86 EQU   PCCA+52
PCCARV85 EQU   PCCA+48
PCCARV84 EQU   PCCA+44
PCCARV83 EQU   PCCA+40
PCCARV82 EQU   PCCA+36
PCCARV81 EQU   PCCA+32
PCCAPSAR EQU   PCCA+28
PCCATQEP EQU   PCCA+20
PCCACAFM EQU   PCCA+18
PCCACPUA EQU   PCCA+16
PCCACPID EQU   PCCA+4
PCCAPCCA EQU   PCCA
@NM00037 EQU   CSD+160
CSDMASK  EQU   CSD+128
CSDUCNT  EQU   CSD+124
CSDTCNT  EQU   CSD+120
CSDGDTOD EQU   CSD+116
CSDGDINT EQU   CSD+112
CSDGDCC  EQU   CSD+108
CSDDDRCT EQU   CSD+106
CSDRV044 EQU   CSD+104
CSDMAFF  EQU   CSD+24
CSDRV038 EQU   CSDFLAGS
CSDRV037 EQU   CSDFLAGS
CSDRV036 EQU   CSDFLAGS
CSDRV035 EQU   CSDFLAGS
CSDRV034 EQU   CSDFLAGS
CSDRV033 EQU   CSDFLAGS
CSDRV032 EQU   CSDFLAGS
CSDMP    EQU   CSDFLAGS
CSDMF1CP EQU   CSD+20
CSDRV043 EQU   CSD+16
CSDRV030 EQU   CSDSCFL4
CSDRV029 EQU   CSDSCFL4
CSDRV028 EQU   CSDSCFL4
CSDRV027 EQU   CSDSCFL4
CSDRV026 EQU   CSDSCFL4
CSDRV025 EQU   CSDSCFL4
CSDRV024 EQU   CSDSCFL4
CSDRV023 EQU   CSDSCFL4
CSDRV022 EQU   CSDSCFL3
CSDRV021 EQU   CSDSCFL3
CSDRV020 EQU   CSDSCFL3
CSDRV019 EQU   CSDSCFL3
CSDRV018 EQU   CSDSCFL3
CSDRV017 EQU   CSDSCFL3
CSDRV016 EQU   CSDSCFL3
CSDRV015 EQU   CSDSCFL3
CSDRV014 EQU   CSDSCFL2
CSDRV013 EQU   CSDSCFL2
CSDRV012 EQU   CSDSCFL2
CSDRV011 EQU   CSDSCFL2
CSDRV010 EQU   CSDSCFL2
CSDRV009 EQU   CSDSCFL2
CSDRV008 EQU   CSDSCFL2
CSDRV007 EQU   CSDSCFL2
CSDRV006 EQU   CSDSCFL1
CSDRV005 EQU   CSDSCFL1
CSDRV004 EQU   CSDSCFL1
CSDRV003 EQU   CSDSCFL1
CSDRV002 EQU   CSDSCFL1
CSDRV001 EQU   CSDSCFL1
CSDSYSND EQU   CSDSCFL1
CSDRV042 EQU   CSDSCFL1
CSDSAFF  EQU   CSDCPUAL
CSDCHAD  EQU   CSD+6
CSDCPUJS EQU   CSD+4
CSDCSD   EQU   CSD
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSM  EQU   ASCB+52
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
RMPLDCBL EQU   RMPL+20
RMPLRBPA EQU   RMPL+12
RMPLTCBA EQU   RMPL+8
RMPLFLG2 EQU   RMPL+1
@NM00036 EQU   RMPLFLG1
RMPLWT1M EQU   RMPLFLG1
RMPLJST  EQU   RMPLFLG1
RMPLRCOV EQU   RMPLFLG1
RMPLIPUF EQU   RMPLFLG1
RMPLRBPP EQU   RMPLFLG1
@NM00035 EQU   SRB+40
@NM00034 EQU   SRB+38
SRBFLNK  EQU   SRB+4
RTCTSDWK EQU   RTCT+220
RTCTTDCB EQU   RTCT+184
RTCTXYX2 EQU   RTCT+180
RTCTXXX1 EQU   RTCT+177
@NM00033 EQU   RTCTRFLG
RTCTRSTF EQU   RTCTRFLG
RTCTRPER EQU   RTCTRFLG
RTCTRTER EQU   RTCTRFLG
RTCTTEST EQU   RTCT+172
RTCTFMT  EQU   RTCT+160
RTCTSDPL EQU   RTCT+156
RTCTDEV  EQU   RTCTSDDS+8
RTCTDCB  EQU   RTCTSDDS+4
@NM00032 EQU   RTCTFLG
RTCTDETP EQU   RTCTFLG
RTCTDSUS EQU   RTCTFLG
RTCTDSST EQU   RTCTFLG
RTCTDSNM EQU   RTCTSDDS
RTCTRCB  EQU   RTCT+32
RTCTRECB EQU   RTCT+28
RTCTSDID EQU   RTCT+18
RTCTSDEP EQU   RTCTSDF2
RTCTSDDO EQU   RTCTSDF2
RTCTSDEN EQU   RTCTSDF2
RTCTSDTR EQU   RTCTSDF2
RTCTSDPT EQU   RTCTSDF2
RTCTSDSR EQU   RTCTSDF2
RTCTSDSS EQU   RTCTSDF2
RTCTSDSH EQU   RTCTSDF2
@NM00031 EQU   RTCTSDF1
RTCTSDND EQU   RTCTSDF1
RTCTSDNO EQU   RTCTSDF1
@NM00030 EQU   RTCTABD+1
@NM00029 EQU   RTCTIDMP
RTCTISVC EQU   RTCTIDMP
RTCTISYU EQU   RTCTIDMP
RTCTISAB EQU   RTCTIDMP
@NM00028 EQU   RTCTIDMP
@NM00027 EQU   RTCTSDO2
RTCTSDPB EQU   RTCTSDO2
RTCTSDPA EQU   RTCTSDO2
RTCTSDP9 EQU   RTCTSDO2
RTCTSDP8 EQU   RTCTSDO2
RTCTSDP7 EQU   RTCTSDO1
RTCTSDP6 EQU   RTCTSDO1
RTCTSDP5 EQU   RTCTSDO1
RTCTSDP4 EQU   RTCTSDO1
RTCTSDP3 EQU   RTCTSDO1
RTCTSDP2 EQU   RTCTSDO1
RTCTSDP1 EQU   RTCTSDO1
RTCTSDP0 EQU   RTCTSDO1
RTCTSYDF EQU   RTCTSUO2
RTCTSYDE EQU   RTCTSUO2
RTCTSYDD EQU   RTCTSUO2
RTCTSYDC EQU   RTCTSUO2
RTCTSYDB EQU   RTCTSUO2
RTCTSYDA EQU   RTCTSUO2
RTCTSYD9 EQU   RTCTSUO2
RTCTSYD8 EQU   RTCTSUO2
RTCTSYD7 EQU   RTCTSUO1
RTCTSYD6 EQU   RTCTSUO1
RTCTSYD5 EQU   RTCTSUO1
RTCTSYD4 EQU   RTCTSUO1
RTCTSYD3 EQU   RTCTSUO1
RTCTSYD2 EQU   RTCTSUO1
RTCTSYD1 EQU   RTCTSUO1
RTCTSYD0 EQU   RTCTSUO1
RTCTSADF EQU   RTCTSAO2
RTCTSADE EQU   RTCTSAO2
RTCTSADD EQU   RTCTSAO2
RTCTSADC EQU   RTCTSAO2
RTCTSADB EQU   RTCTSAO2
RTCTSADA EQU   RTCTSAO2
RTCTSAD9 EQU   RTCTSAO2
RTCTSAD8 EQU   RTCTSAO2
RTCTSAD7 EQU   RTCTSAO1
RTCTSAD6 EQU   RTCTSAO1
RTCTSAD5 EQU   RTCTSAO1
RTCTSAD4 EQU   RTCTSAO1
RTCTSAD3 EQU   RTCTSAO1
RTCTSAD2 EQU   RTCTSAO1
RTCTSAD1 EQU   RTCTSAO1
RTCTSAD0 EQU   RTCTSAO1
RTCTSUDF EQU   RTCTSUP2
RTCTSUDE EQU   RTCTSUP2
RTCTSUDD EQU   RTCTSUP2
RTCTSUDC EQU   RTCTSUP2
RTCTSUDB EQU   RTCTSUP2
RTCTSUDA EQU   RTCTSUP2
RTCTSUD9 EQU   RTCTSUP2
RTCTSUD8 EQU   RTCTSUP2
RTCTSUD7 EQU   RTCTSUP1
RTCTSUD6 EQU   RTCTSUP1
RTCTSUD5 EQU   RTCTSUP1
RTCTSUD4 EQU   RTCTSUP1
RTCTSUD3 EQU   RTCTSUP1
RTCTSUD2 EQU   RTCTSUP1
RTCTSUD1 EQU   RTCTSUP1
RTCTSUD0 EQU   RTCTSUP1
RTCTSABF EQU   RTCTSAP2
RTCTSABE EQU   RTCTSAP2
RTCTSABD EQU   RTCTSAP2
RTCTSABC EQU   RTCTSAP2
RTCTSABB EQU   RTCTSAP2
RTCTSABA EQU   RTCTSAP2
RTCTSAB9 EQU   RTCTSAP2
RTCTSAB8 EQU   RTCTSAP2
RTCTSAB7 EQU   RTCTSAP1
RTCTSAB6 EQU   RTCTSAP1
RTCTSAB5 EQU   RTCTSAP1
RTCTSAB4 EQU   RTCTSAP1
RTCTSAB3 EQU   RTCTSAP1
RTCTSAB2 EQU   RTCTSAP1
RTCTSAB1 EQU   RTCTSAP1
RTCTSAB0 EQU   RTCTSAP1
RTCTNAME EQU   RTCT
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00026 EQU   CVTFIX+248
@NM00025 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00024 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00023 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00022 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00021 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00020 EQU   FLCFSA
@NM00019 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00018 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00017 EQU   FLCIOA
@NM00016 EQU   FLCMCLA+15
@NM00015 EQU   FLCMCLA+14
@NM00014 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00013 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00012 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00011 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00010 EQU   FLCPER
@NM00009 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00008 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00007 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00006 EQU   FLCPIILC
@NM00005 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00004 EQU   FLCSVILC
@NM00003 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00002 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00001 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@ENDDATA EQU   *
         END   IEAVTMTC,(C'PLS2126',0701,76090)
