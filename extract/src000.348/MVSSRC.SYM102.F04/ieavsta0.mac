         TITLE 'IGC00060 - STA/ESTA SERVICE ROUTINE (SVC 60)'
* SET UP THE SVC ENTRY POINT AND THE ADDRESS USED FOR BRANCH ENTRIES.
IGC00060 CSECT
         USING *,R6          BASE REG PRE-SET BY SVC SLIH
SVCEPT   B     SVCENTRY      IEAVSTA0+0 ENTER HERE ON SVC ENTRY
         DC    A(ESTAEBRE)   IEAVSTA0+4 = ADDRESS OF BRANCH ENTRY--
*                            MOVED TO -CVTSV60- DURING OUR NIP
*                            INITIALIZATION BY -IEAVNPA6-
*                            IF THE DISPLACEMENT OF THIS
*                            ADDRESS CONSTANT IS CHANGED IEAVNPA6
*                            MUST BE CHANGED ACCORDINGLY
         MODID BR=NO
         DROP  R6
         USING *,R15
         B     RETN               RETRY ENTRY POINT          @Z40FPXA
         DROP  R15
ESTAEBRE ST    R14,12(R13)      SAVE RETURN ADDRESS
         STM   R2,R12,28(R13)   SAVE REGS ON BRANCH ENTRY
PROLOG   BALR  R10,0         SET BASE FOR BOTH ENTRY TYPES
PSTART   DS    0H                                            @Z30EPXA
         USING PSTART,R10
         B     BRENTP                                        @Z30EPXA
SVCENTRY LA    R10,PSTART-SVCEPT(R6)                         @Z30EPXA
RBPRFXLN EQU 64
RBPRFLNA EQU 32
PRBLEN   EQU 136
SIRBLEN  EQU 200
TIRBLEN  EQU 136
IRBLEN   EQU 128
SVRBLEN  EQU 224
*                                      SAVE AREA (40 BYTES)          */
*SVCENTP:                                                          0078
*                                                                  0078
*   /*****************************************************************/
*   /*                                                               */
*   /* OBTAIN WORK AREA IN CURRENT SVRB                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0078
*   R9=ADDR(RBFEPARM);              /* ADDRESS OF WA IN SVRB.. WORK
*                                      AREA                  @Z40FPXA*/
SVCENTP  LA    R9,RBFEPARM(,RBSECPTR)                              0078
*   R7=R7->ASXBPTR->ASXBSPSA->WSALSTAE;/* FREE SCB QUEUE PTR @Z40FPXA*/
*                                                                  0079
         L     @15,ASXBPTR(,R7)                                    0079
         L     @15,ASXBSPSA(,@15)                                  0079
         L     @15,WSALSTAE(,@15)                                  0079
         LR    R7,@15                                              0079
*   /*****************************************************************/
*   /*                                                               */
*   /* INDICATE TO RTM THAT ESTAE IS IN CONTROL, RTM WILL ROUTE      */
*   /* CONTROL TO ESTAE'S RECOVERY ROUTINE IN EVENT OF ERROR         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0080
*   IF TCBFX^='1'B THEN             /* DISALLOW ASYNCRONOUS  @ZA24347*/
         TM    TCBFX(TCBPTR),B'00000001'                           0080
         BO    @RF00080                                            0080
*     DO;                           /* INTERRUPTS.           @ZA24347*/
*       TCBSTAFX='1'B;              /*                       @ZA24347*/
         OI    TCBSTAFX(TCBPTR),B'01000000'                        0082
*       TCBFX='1'B;                 /*                       @ZA24347*/
         OI    TCBFX(TCBPTR),B'00000001'                           0083
*     END;                          /*                       @ZA24347*/
*   ELSE                                                           0085
*     ;                             /*                       @ZA24347*/
@RF00080 DS    0H                                                  0086
*   TCBSTAWA=R9;                    /* SAVE WORK AREA POINTER      0086
*                                                            @Z40FPXA*/
         ST    R9,TCBSTAWA(,TCBPTR)                                0086
*   R14SAVE=R14;                    /* SAVE RETURN ADDRESS   @Z40FPXA*/
         ST    R14,R14SAVE(,R9)                                    0087
*   WKWORD=REG0;                    /* SAVE FUNCTION CODE AND CLEAR
*                                      WORK AREA             @Z40FPXA*/
         ST    REG0,WKWORD(,R9)                                    0088
*   IF FC='84'X×FC=4                /* NO PARM LIST IF CANCEL        */
*     THEN                          /* CANCEL IS REQUESTED           */
         CLI   FC(R9),X'84'                                        0089
         BE    @RT00089                                            0089
         CLI   FC(R9),4                                            0089
         BNE   @RF00089                                            0089
@RT00089 DS    0H                                                  0090
*     DO;                                                          0090
*       CANCELFL='1'B;              /* SET CANCEL FLAG       @Z30EPXA*/
         OI    CANCELFL(R9),B'00001000'                            0091
*     END;                                                         0092
*   ELSE                                                           0093
*     DO;                                                          0093
*                                                                  0093
         B     @RC00089                                            0093
@RF00089 DS    0H                                                  0094
*       /*************************************************************/
*       /*                                                           */
*       /* CHECK FOR PROP REQUEST                                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0094
*       IF FC=2 THEN                /* PROP REQUEST?         @Z40FPXA*/
         CLI   FC(R9),2                                            0094
         BNE   @RF00094                                            0094
*         DO;                       /*                       @Z40FPXA*/
*           IF(ESTASTAI='0'B×ESTASTAR='1'B×ESTAESTA='0'B)/* PROP ONLY
*                                      VALID WITH ESTAI      @Z30EPXA*/
*             THEN                  /*                       @YM01507*/
         TM    ESTASTAR(R1),B'01000000'                            0096
         BNZ   @RT00096                                            0096
         TM    ESTASTAI(R1),B'10010000'                            0096
         BO    @RF00096                                            0096
@RT00096 DS    0H                                                  0097
*             DO;                   /* INVALID REQUEST       @YM01507*/
*               REASON=8;           /*                       @YM01507*/
         MVI   REASON(R9),X'08'                                    0098
*               CALL INVALID;       /* ISSUE ABEND           @YM01507*/
         BAL   @14,INVALID                                         0099
*             END;                  /*                       @YM01507*/
*           ELSE                    /* VALID PROP REQUEST.. PROCESS
*                                      IT                    @Z40FPXA*/
*             GOTO PROPROC;         /* PROCESS PROP          @Z40FPXA*/
*         END;                      /* END OF PROP PROCESSING      0102
*                                                            @Z40FPXA*/
*                                                                  0102
*       /*************************************************************/
*       /*                                                           */
*       /* THIS SECTION DETERMINES IF A STA RECURSION HAS TAKEN PLACE*/
*       /* -VERIFIES STAI REQUESTS                                   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0103
*       IF ESTAESTA='0'B            /* STA TYPE REQUEST ?    @Z30EPXA*/
*         THEN                      /* YES- CHECK RECURSION          */
@RF00094 TM    ESTAESTA(R1),B'00010000'                            0103
         BNZ   @RF00103                                            0103
*         DO;                                                      0104
*           IF TCBSTABE='1'B        /* IS A STA EXIT IN PROGRESS     */
*             THEN                  /* YES- INVALID                  */
         TM    TCBSTABE(TCBPTR),B'10000000'                        0105
         BNO   @RF00105                                            0105
*             DO;                                                  0106
*               GOTO RETCOD8;       /*                       @Z40FPXA*/
         B     RETCOD8                                             0107
*             END;                                                 0108
*           ELSE                    /* NO- OKAY SO FAR               */
*             DO;                                                  0109
@RF00105 DS    0H                                                  0110
*               IF ESTASTAI='1'B    /* STAI REQUEST ?                */
*                 THEN              /* YES                           */
         TM    ESTASTAI(R1),B'10000000'                            0110
         BNO   @RF00110                                            0110
*                 DO;                                              0111
*                                                                  0111
*                   /*************************************************/
*                   /*                                               */
*                   /* THIS SECTION OF CODE INSURES THAT A CREATE    */
*                   /* REQUEST IS THE ONLY REQUEST THAT CAN BE       */
*                   /* HONORED FOR STAI-CONTROL IS THEN GIVEN TO     */
*                   /* VERATTCH TO INSURE ATTACH IS THE REQUESTOR    */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0112
*                   IF FC=0         /* CREATE REQUESTED ?            */
*                     THEN          /* YES                           */
         CLI   FC(R9),0                                            0112
         BNE   @RF00112                                            0112
*                     DO;                                          0113
*                       CALL VERATTCH;/* INSURE ATTACH CALLED        */
         BAL   @14,VERATTCH                                        0114
*                     END;                                         0115
*                   ELSE            /* CREATE IS NOT THE REQUEST     */
*                     DO;                                          0116
         B     @RC00112                                            0116
@RF00112 DS    0H                                                  0117
*                       GOTO RETCOD10;/* ONLY CREATE ALLOWED         */
         B     RETCOD10                                            0117
*                     END;                                         0118
*                 END;                                             0119
*               ELSE                /* NOT STAI                      */
*                 DO;               /* INSURE IT IS NOT A          0120
*                                      NON-SUPPORTED STAR REQUEST    */
         B     @RC00110                                            0120
@RF00110 DS    0H                                                  0121
*                   IF ESTASTAR='1'B/* STAR!!!                       */
*                     THEN          /* YES                           */
         TM    ESTASTAR(R1),B'01000000'                            0121
         BNO   @RF00121                                            0121
*                     DO;                                          0122
*                       GOTO RETCOD10;/* STAR NOT SUPPORTED  @Z40FPXA*/
         B     RETCOD10                                            0123
*                     END;                                         0124
*                 END;                                             0125
@RF00121 DS    0H                                                  0126
*             END;                                                 0126
*                                                                  0126
@RC00110 DS    0H                                                  0127
*           /*********************************************************/
*           /*                                                       */
*           /* THIS SECTION OF CODE INSURES THAT THE EXIT AND        */
*           /* PARAMETER LIST ADDRESSES SPECIFIED ON A STA CREATE OR */
*           /* OVERLAY ARE VALID                                     */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0127
*           IF FC=0×FC=8            /* STA CT OR OV ?        @Z40FPXA*/
*             THEN                  /* YES                           */
         CLI   FC(R9),0                                            0127
         BE    @RT00127                                            0127
         CLI   FC(R9),8                                            0127
         BNE   @RF00127                                            0127
@RT00127 DS    0H                                                  0128
*             DO;                                                  0128
*               IF ESTAEXIT=0       /* IMPLIED STAE CANCEL?          */
*                 THEN              /* YES                           */
         L     @15,ESTAEXIT-1(,R1)                                 0129
         LA    @15,0(,@15)                                         0129
         LTR   @15,@15                                             0129
         BNZ   @RF00129                                            0129
*                 DO;                                              0130
*                   FC=4;           /* INDICATE STAE CANCEL  @Z40FPXA*/
         MVI   FC(R9),X'04'                                        0131
*                   CANCELFL='1'B;  /* SET CANCEL FLAG       @Z30EPXA*/
         OI    CANCELFL(R9),B'00001000'                            0132
*                 END;                                             0133
*             END;                                                 0134
*         END;                                                     0135
*       ELSE                                                       0136
*         DO;                                                      0136
         B     @RC00103                                            0136
@RF00103 DS    0H                                                  0137
*           IF ESTASTAI='0'B&ESTASTAR='0'B/* ESTAE?          @Z40FPXA*/
*             THEN                  /* YES                           */
         TM    ESTASTAI(R1),B'11000000'                            0137
         BNZ   @RF00137                                            0137
*             DO;                                                  0138
*               IF ESTAEXIT=0       /* IMPLIED CANCEL?               */
*                 THEN              /* YES                           */
         L     @15,ESTAEXIT-1(,R1)                                 0139
         LA    @15,0(,@15)                                         0139
         LTR   @15,@15                                             0139
         BNZ   @RF00139                                            0139
*                 DO;                                              0140
*                   FC='84'X;       /* ESTAE CANCEL CODE             */
         MVI   FC(R9),X'84'                                        0141
*                   CANCELFL='1'B;  /* SET CANCEL FLAG       @Z30EPXA*/
         OI    CANCELFL(R9),B'00001000'                            0142
*                 END;                                             0143
*             END;                                                 0144
@RF00139 DS    0H                                                  0145
*         END;                                                     0145
@RF00137 DS    0H                                                  0146
*     END;                                                         0146
*                                                                  0146
@RC00103 DS    0H                                                  0147
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION OF CODE DETERMINES IF AN ESTAE CANCEL/OVERLAY OR */
*   /* STAE CANCEL/OV HAS BEEN REQUESTED AND ROUTES CONTROL TO       */
*   /* SPECIFIC VALIDITY ROUTINES                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0147
*   IF CANCELFL='1'B×FC=8           /* ANY CANCEL OR OVERLAY       0147
*                                      REQUESTED ?           @Z30EPXA*/
*     THEN                          /* YES                           */
@RC00089 TM    CANCELFL(R9),B'00001000'                            0147
         BO    @RT00147                                            0147
         CLI   FC(R9),8                                            0147
         BNE   @RF00147                                            0147
@RT00147 DS    0H                                                  0148
*     DO;                                                          0148
*       CALL SCBSRCH;               /* FIND LAST VALID SCB   @Z40FPXA*/
         BAL   @14,SCBSRCH                                         0149
*       IF FC='84'X THEN            /* ESTAE CANCEL?         @Z40FPXA*/
         CLI   FC(R9),X'84'                                        0150
         BNE   @RF00150                                            0150
*         DO;                                                      0151
*           CALL ESTCOVAL;          /* VERIFY ESTAE CANCEL REQUEST 0152
*                                                            @Z40FPXA*/
         BAL   @14,ESTCOVAL                                        0152
*           GOTO PERFCAN;           /* PROCESS CANCEL REQUEST      0153
*                                                            @Z40FPXA*/
         B     PERFCAN                                             0153
*         END;                                                     0154
*       IF FC^=4&ESTAESTA='1'B      /* ESTA REQUEST?         @ZM41808*/
*         THEN                      /* YES                           */
@RF00150 CLI   FC(R9),4                                            0155
         BE    @RF00155                                            0155
         TM    ESTAESTA(R1),B'00010000'                            0155
         BNO   @RF00155                                            0155
*         DO;                                                      0156
*           IF ESTASTAI='0'B&ESTASTAR='0'B/* ESTAE REQUEST ?         */
*             THEN                  /* YES                           */
         TM    ESTASTAI(R1),B'11000000'                            0157
         BNZ   @RF00157                                            0157
*             DO;                                                  0158
*               CALL ESTCOVAL;      /* VERIFY ESTAE CAN/OV REQ       */
         BAL   @14,ESTCOVAL                                        0159
*             END;                                                 0160
*         END;                                                     0161
*       ELSE                        /* STAE REQUESTED                */
*         DO;                                                      0162
*                                                                  0162
         B     @RC00155                                            0162
@RF00155 DS    0H                                                  0163
*           /*********************************************************/
*           /*                                                       */
*           /* IT HAS BEEN DETERMINED THAT THIS REQUEST IS EITHER A  */
*           /* STAE CANCEL OR OVERLAY TYPE OF REQUEST-IN ORDER FOR   */
*           /* THIS REQUEST TO BE VALID THE LAST VALID SCB POINTED TO*/
*           /* BY REGISTER 2 MUST BE A STAE SCB AND OWNED BY THE     */
*           /* INVOKING RB                                           */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0163
*           IF R2=0                 /* ANY SCB Q AT ALL TO CHECK ?   */
*             THEN                  /* NO-INVALID                    */
         LTR   R2,R2                                               0163
         BZ    @RT00163                                            0163
*             GOTO RETCOD8;         /* STAE RETURN CODE IS 8 @Z40FPXA*/
*           IF SCBESTAE='0'B&SCBSTAI='1'B/* IS THIS A STAI SCB?      */
*             THEN                  /* YES-INVALID                   */
         TM    SCBSTAI(R2),B'10000000'                             0165
         BNO   @RF00165                                            0165
         TM    SCBESTAE(R2),B'00010000'                            0165
         BZ    @RT00165                                            0165
*             GOTO RETCOD8;         /* STAE RETURN CODE IS 8 @Z40FPXA*/
*           IF SCBESTAE='1'B        /* IS IT A ESTA TYPE             */
*             THEN                  /* YES                           */
@RF00165 TM    SCBESTAE(R2),B'00010000'                            0167
         BO    @RT00167                                            0167
*             GOTO RETCOD10;        /* RETN CD FOR STAE REQ WITH ESTA
*                                      SCB                   @Z40FPXA*/
*           IF SCBOWNRA^=RBLINKB    /* DOES THE INVOKER OWN IT       */
*             THEN                  /* NO                            */
         CLC   SCBOWNRA(3,R2),RBLINKB(RBSECPTR)                    0169
         BNE   @RT00169                                            0169
*             GOTO RETCOD10;        /* SCB NOT OWNED BY INVOKER    0170
*                                                            @Z40FPXA*/
*         END;                                                     0171
*     END;                                                         0172
@RC00155 DS    0H                                                  0173
*   DO;                                                            0173
@RF00147 DS    0H                                                  0174
*     IF FC=4 THEN                  /* IF STAE CANCEL        @ZM41806*/
         CLI   FC(R9),4                                            0174
         BE    @RT00174                                            0174
*       GOTO PERFCAN;               /* THEN PROCESS          @ZM41806*/
*     IF ESTASTAR='1'B              /* ESTAR REQUEST ?               */
*       THEN                        /* YES                           */
         TM    ESTASTAR(R1),B'01000000'                            0176
         BNO   @RF00176                                            0176
*       DO;                                                        0177
*                                                                  0177
*/*  ****************************************************************
*                                                                  0178
*     ESTAR REQUESTS ARE VERIFIED BY                               0178
*                1- INSURING THAT THE INVOKER IS AUTHORIZED        0178
*                   VIA APF OR IS IN KEY 0 OR IS IN SUPERVISOR     0178
*                   STATE                                          0178
*                2- IF CREATE IS REQUESTED THERE MUST NOT BE       0178
*                   ANY SCBS ON THE QUEUE                          0178
*                3- IF OVERLAY IS REQUESTED THE LAST VALID SCB     0178
*                   MUST BE AN ESTAR TYPE                          0178
*                    A-IF A LAST VALID SCB IS NON EXISTANT         0178
*                      A CHECK IS MADE TO DETERMINE IF AN          0178
*                      SCB QUEUE EXISTS-IF THE QUEUE IS NON-EXISTANT
*                      A CREATE ESTAR WILL BE PERFORMED            0178
*     ALL INVALID ESTAR REQUESTS RESULT IN ABEND 13C AND A REASON  0178
*     CODE OF 4 IN REGISTER 15                                     0178
*                                                                  0178
*  ***************************************************************** */
*                                                                  0178
*         /***********************************************************/
*         /*                                                         */
*         /* ISSUE TESTAUTH TO VERIFY INVOKERS VALIDITY              */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0178
*         R6=R1;                    /* SAVE R1 ACROSS TESTAUTH     0178
*                                                            @Z40FPXA*/
         LR    R6,R1                                               0178
*         GENERATE;                                                0179
         TESTAUTH FCTN=1,STATE=YES,KEY=YES,RBLEVEL=2,BRANCH=YES
*         R1=R6;                    /* RESTORE REG 1         @Z40FPXA*/
         LR    R1,R6                                               0180
*         IF R15^=0×(FC^=0&FC^=8)×ESTAEXIT=0/* IS THE INVOKER VALID
*                                      AND IS THE ACTION REQUESTED 0181
*                                      CREATE OR OVERLAY             */
*           THEN                    /* NO- THIS REQUEST IS INVALID   */
         LTR   R15,R15                                             0181
         BNZ   @RT00181                                            0181
         CLI   FC(R9),0                                            0181
         BE    @GL00005                                            0181
         CLI   FC(R9),8                                            0181
         BNE   @RT00181                                            0181
@GL00005 L     @12,ESTAEXIT-1(,R1)                                 0181
         LA    @12,0(,@12)                                         0181
         LTR   @12,@12                                             0181
         BNZ   @RF00181                                            0181
@RT00181 DS    0H                                                  0182
*           DO;                                                    0182
*             REASON=4;             /* ABEND REASON CODE             */
         MVI   REASON(R9),X'04'                                    0183
*             CALL INVALID;         /* ISSUE ABEND                   */
         BAL   @14,INVALID                                         0184
*           END;                                                   0185
*                                                                  0185
*         /***********************************************************/
*         /*                                                         */
*         /* INVOKER IS VALID                                        */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0186
*         IF FC=8                   /* OVERLAY REQUEST ?             */
*           THEN                    /* YES                           */
@RF00181 CLI   FC(R9),8                                            0186
         BNE   @RF00186                                            0186
*           DO;                                                    0187
*             CALL SCBSRCH;         /* FIND LAST VALID SCB           */
         BAL   @14,SCBSRCH                                         0188
*             IF R2=0               /* IS A LAST VALID SCB EXISTANT  */
*               THEN                /* NO                            */
         LTR   R2,R2                                               0189
         BNZ   @RF00189                                            0189
*               DO;                                                0190
*                 RETCOD=4;         /* SET RETURN CODE 4 FOR MODIFIED
*                                      CREATE                @Z40FPXA*/
         MVI   RETCOD(R9),X'04'                                    0191
*                 FC='00'X;         /* CHANGE TO CREATE REQUEST    0192
*                                                            @Z40FPXA*/
         MVI   FC(R9),X'00'                                        0192
*               END;                                               0193
*             ELSE                  /* A VALID SCB EXISTS            */
*               DO;                                                0194
         B     @RC00189                                            0194
@RF00189 DS    0H                                                  0195
*                 IF SCBESTAE='0'B×SCBSTAR='0'B/* IS IT ESTAR TYPE   */
*                   THEN            /* NO                            */
         TM    SCBESTAE(R2),B'01010000'                            0195
         BO    @RF00195                                            0195
*                   DO;                                            0196
*                     REASON=4;                                    0197
         MVI   REASON(R9),X'04'                                    0197
*                     CALL INVALID; /* ISSUE ABEND                   */
         BAL   @14,INVALID                                         0198
*                   END;                                           0199
*               END;                                               0200
@RF00195 DS    0H                                                  0201
*           END;                                                   0201
@RC00189 DS    0H                                                  0202
*         IF FC=0                   /* IS CREATE OR MODIFIED CREATE
*                                      INDICATED                     */
*           THEN                    /* YES                           */
@RF00186 CLI   FC(R9),0                                            0202
         BNE   @RF00202                                            0202
*           DO;                                                    0203
*             IF TCBSTABB^=0        /* ANY SCBS EXIST ?              */
*               THEN                /* YES-INVALID REQUEST           */
         L     @15,TCBSTABB-1(,TCBPTR)                             0204
         LA    @15,0(,@15)                                         0204
         LTR   @15,@15                                             0204
         BZ    @RF00204                                            0204
*               DO;                                                0205
*                 REASON=4;                                        0206
         MVI   REASON(R9),X'04'                                    0206
*                 CALL INVALID;     /* ISSUE ABEND                   */
         BAL   @14,INVALID                                         0207
*               END;                                               0208
*           END;                                                   0209
@RF00204 DS    0H                                                  0210
*       END;                                                       0210
@RF00202 DS    0H                                                  0211
*     IF ESTAESTA='1'B&ESTASTAI='1'B/* ESTAI REQUEST?                */
*       THEN                        /* YES                           */
@RF00176 TM    ESTAESTA(R1),B'10010000'                            0211
         BNO   @RF00211                                            0211
*       DO;                                                        0212
*                                                                  0212
*         /***********************************************************/
*         /*                                                         */
*         /* THIS SECTION OF CODE INSURES THAT ONLY CREATE OR        */
*         /* PROPAGATE IS SPECIFIED WITH ESTAI REQUESTS-IF CT OR PROP*/
*         /* IS SPECIFIED A CALL TO VERATTCH IS ISSUED-IF ATTACH IS  */
*         /* NOT THE INVOKER AN ABEND WILL BE ISSUED                 */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0213
*         IF FC^=0&FC^=2            /* CT OR PROP ?                  */
*           THEN                    /* NO                            */
         CLI   FC(R9),0                                            0213
         BE    @RF00213                                            0213
         CLI   FC(R9),2                                            0213
         BE    @RF00213                                            0213
*           DO;                                                    0214
*             GOTO RETCOD8;         /* SET INVALID RETURN CODE     0215
*                                                            @Z40FPXA*/
         B     RETCOD8                                             0215
*           END;                                                   0216
*         ELSE                      /* CT OR PROP IS OKAY            */
*           DO;                                                    0217
@RF00213 DS    0H                                                  0218
*PROPROC:                                                          0218
*             ABNDFLG='1'B;         /* SET ABEND FLG         @Z40FPXA*/
PROPROC  OI    ABNDFLG(R9),B'00000010'                             0218
*             CALL VERATTCH;        /* INSURE ATTACH IS THE INVOKER  */
         BAL   @14,VERATTCH                                        0219
*           END;                                                   0220
*       END;                                                       0221
*   END;                                                           0222
*   GOTO PERFORM;                   /* BYPASS BRANCH PROCESSING      */
         B     PERFORM                                             0223
*BRENTP:                                                           0224
*                                                                  0224
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR VALID ENTRY IF THE ENTRY IS INVALID A 13C ABEND WILL*/
*   /* BE ISSUED WITH A VALUE OF HEX 0C IN REG 15                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0224
*   RFY                                                            0224
*     R1 RSTD;                      /*                       @Z30EPXA*/
BRENTP   DS    0H                                                  0225
*   R7=WSALSTAE;                    /* POINT TO LOCAL WORK AREA FOR
*                                      CELLS                 @Z40FPXA*/
         L     @15,ASCBPTR                                         0225
         L     @15,ASXBPTR(,@15)                                   0225
         L     @15,ASXBSPSA(,@15)                                  0225
         L     R7,WSALSTAE(,@15)                                   0225
*   TCBPTR=PSATOLD;                 /* PICK UP TCB ADDRESS   @Z40FPXA*/
*                                                                  0226
         L     TCBPTR,PSATOLD                                      0226
*   /*****************************************************************/
*   /*                                                               */
*   /* OBTAIN CELL FROM FREE SCB QUEUE TO USE AS WORK AREA           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0227
*TRYWA:                             /* OBTAIN WORK AREA FOR BRANCH 0227
*                                      ENTRY                 @Z40FPXA*/
*   R9=FREESCBQ;                    /* PICK UP FREE CELL ADDRESS   0227
*                                                            @Z40FPXA*/
TRYWA    L     R9,FREESCBQ(,R7)                                    0227
*   IF R9=0 THEN                    /* ANY CELLS AVAILABLE?  @Z40FPXA*/
         LTR   R9,R9                                               0228
         BNZ   @RF00228                                            0228
*     DO;                           /* NO.. GO OBTAIN MORE CELLS   0229
*                                                            @Z40FPXA*/
*       CALL GETSTOR;               /* GET NEW CELLS         @Z40FPXA*/
         BAL   @14,GETSTOR                                         0230
*       GOTO TRYWA;                 /* RETRY CELL OBTAIN     @Z40FPXA*/
         B     TRYWA                                               0231
*     END;                          /*                       @Z40FPXA*/
*   R3=R9->SCBCHAIN;                /* NEXT CELL ADDRESS     @Z40FPXA*/
@RF00228 L     R3,SCBCHAIN(,R9)                                    0233
*   CS(R9,R3,FREESCBQ);             /* DEQUEUE CELL          @Z40FPXA*/
         CS    R9,@03,FREESCBQ(R7)                                 0234
*   BC(7,TRYWA);                    /* RETRY IF FAILS        @Z40FPXA*/
         BC    7,TRYWA                                             0235
*   RBSECPTR=TCBRBP;                /* CURRENT RB ADDRESS            */
         L     RBSECPTR,TCBRBP(,TCBPTR)                            0236
*   IF TCBFX^='1'B THEN             /* DISALLOW ASYNCRO-     @ZA24347*/
         TM    TCBFX(TCBPTR),B'00000001'                           0237
         BO    @RF00237                                            0237
*     DO;                           /* NOUS INTERRUPTS.      @ZA24347*/
*       TCBSTAFX='1'B;              /*                       @ZA24347*/
         OI    TCBSTAFX(TCBPTR),B'01000000'                        0239
*       TCBFX='1'B;                 /*                       @ZA24347*/
         OI    TCBFX(TCBPTR),B'00000001'                           0240
*     END;                          /*                       @ZA24347*/
*   ELSE                                                           0242
*     ;                             /*                       @ZA24347*/
@RF00237 DS    0H                                                  0243
*   TCBSTAWA=R9;                    /* INDICATE ESTAE IN CONTROL TO
*                                      RTM                   @Z40FPXA*/
         ST    R9,TCBSTAWA(,TCBPTR)                                0243
*   WKWORD=REG0;                    /* SAVE FUNCTION CODE AND CLEAR
*                                      WORK AREA             @Z40FPXA*/
         ST    REG0,WKWORD(,R9)                                    0244
*   IF FC='94'X                     /* CANCEL REQUESTED?     @Z40FPXA*/
*     THEN                          /* YES-NO PARMS PASSED           */
         CLI   FC(R9),X'94'                                        0245
         BNE   @RF00245                                            0245
*     DO;                                                          0246
*CANPROC:                                                          0247
*       BRENTFLG='1'B;              /* SET BRANCH ENTRY FLAG @Z40FPXA*/
CANPROC  DS    0H                                                  0248
*       CANCELFL='1'B;              /* SET CANCEL FLAG       @Z30EPXA*/
         OI    BRENTFLG(R9),B'00001100'                            0248
*       CALL SCBSRCH;               /* FIND LAST VALID SCB   @Z40FPXA*/
         BAL   @14,SCBSRCH                                         0249
*       CALL ESTCOVAL;              /* VERIFY CANCEL REQUEST @Z40FPXA*/
         BAL   @14,ESTCOVAL                                        0250
*       GOTO PERFCAN;               /* PERFORM CANCEL PROC   @Z40FPXA*/
         B     PERFCAN                                             0251
*     END;                                                         0252
*   ELSE                            /* NOT CANCEL SO PARMS ARE PASSED*/
*     DO;                                                          0253
@RF00245 DS    0H                                                  0254
*       BRENTFLG='1'B;              /* SET BRANCH ENTRY FLAG @Z40FPXA*/
         OI    BRENTFLG(R9),B'00000100'                            0254
*/* *************************************************************  0255
*                                                                  0255
*      THIS SECTION OF CODE INSURES THAT THE BRANCH ENTRY REQUEST  0255
*      IS FOR ESTAE ONLY- IF ESTAE CANCEL OR OVERLAY IS REQUESTED  0255
*      A CALL TO ESTCOVAL IS EXECUTED TO VERIFY THE REQUEST-IF THE 0255
*      OVERLAY REQUEST IS INVALID ESTCOVAL CHANGES THE REQUEST TO  0255
*      A MODIFIED CREATE AND PROCESSING CONTINUES AS A NORMAL      0255
*      CREATE FOR A BRANCH ENTRY                                   0255
*                                                                  0255
* ****************************************************************** */
*                                                                  0255
*       IF(ESTAESTA='0'B×ESTASTAI='1'B×ESTASTAR='1'B)/*      @Z30EPXA
*                                      IS ESTAE REQUESTED            */
*         THEN                      /* NO-THIS REQUEST IS INVALID    */
         TM    ESTASTAI(R1),B'11000000'                            0255
         BNZ   @RT00255                                            0255
         TM    ESTAESTA(R1),B'00010000'                            0255
         BO    @RF00255                                            0255
@RT00255 DS    0H                                                  0256
*         DO;                                                      0256
*           REASON='0C'X;           /* ABEND CODE IS 12              */
         MVI   REASON(R9),X'0C'                                    0257
*           CALL INVALID;           /* ISSUE ABEND 13C               */
         BAL   @14,INVALID                                         0258
*         END;                                                     0259
*       IF ESTAEXIT=0               /* IS THIS AN IMPLIED CANCEL   0260
*                                      REQUEST                       */
*         THEN                      /* YES CHANGE ACTION CODE TO HEX
*                                      94                            */
@RF00255 L     @15,ESTAEXIT-1(,R1)                                 0260
         LA    @15,0(,@15)                                         0260
         LTR   @15,@15                                             0260
         BNZ   @RF00260                                            0260
*         DO;                                                      0261
*           FC='94'X;               /* SET CANCEL FUNCTION CODE    0262
*                                                            @Z40FPXA*/
         MVI   FC(R9),X'94'                                        0262
*           GOTO CANPROC;           /* GO DO CANCEL PROCESSING     0263
*                                                            @Z40FPXA*/
         B     CANPROC                                             0263
*         END;                                                     0264
*     END;                                                         0265
@RF00260 DS    0H                                                  0266
*   IF FC='00'X                     /* IS THIS A CREATE?     @Z40FPXA*/
*     THEN                          /* YES                           */
         CLI   FC(R9),X'00'                                        0266
         BNE   @RF00266                                            0266
*     DO;                           /* CREATE SCB FROM WORK AREA   0267
*                                                            @Z40FPXA*/
*       R2=R9;                      /* USE WORK AREA FOR SCB @Z40FPXA*/
         LR    R2,R9                                               0268
*       SCBFLGS3=ESTAFLG2;          /* COPY ESTA FLAG INTO SCB     0269
*                                                            @Z40FPXA*/
         MVC   SCBFLGS3(1,R2),ESTAFLG2(R1)                         0269
*       SCBOWNR=RBSECPTR;           /* SET OWNERS RB ADDRESS @Z40FPXA*/
         ST    RBSECPTR,SCBOWNR(,R2)                               0270
*       CALL FINSCB;                /* FINISH SCB            @Z40FPXA*/
         BAL   @14,FINSCB                                          0271
*       SCBKEY0='1'B;               /* SET KEY ZERO BYTE     @Z40FPXA*/
*       SCBSUPER='1'B;              /* SET SUPERVISOR OPTION @Z40FPXA*/
         OI    SCBKEY0(R2),B'00000011'                             0273
*       SCBPKEY='00'X;              /* SET KEY ZERO          @Z40FPXA*/
         MVI   SCBPKEY(R2),X'00'                                   0274
*       RBSCB='1'B;                 /* INDICATE RB OWNS SCB  @Z40FPXA*/
         LR    @15,RBSECPTR                                        0275
         AL    @15,@CF02220                                        0275
         OI    RBSCB-56(@15),B'00000010'                           0275
*       SCBCHAIN=TCBSTABB;          /* CHAIN UP SCB          @Z40FPXA*/
         L     @15,TCBSTABB-1(,TCBPTR)                             0276
         LA    @15,0(,@15)                                         0276
         ST    @15,SCBCHAIN(,R2)                                   0276
*       TCBSTABB=R2;                /* ADD TO TCB CHAIN      @Z40FPXA*/
         STCM  R2,7,TCBSTABB(TCBPTR)                               0277
*       R15=0;                      /* CLEAR REG 15          @Z40FPXA*/
         SLR   R15,R15                                             0278
*       IF TCBSTAFX='1'B THEN       /* ALLOW ASYNCRO-        @ZA24347*/
         TM    TCBSTAFX(TCBPTR),B'01000000'                        0279
         BNO   @RF00279                                            0279
*         DO;                       /* NOUS INTERRUPTS.      @ZA24347*/
*           TCBFX='0'B;             /*                       @ZA24347*/
         NI    TCBFX(TCBPTR),B'11111110'                           0281
*           TCBSTAFX='0'B;          /*                       @ZA24347*/
         NI    TCBSTAFX(TCBPTR),B'10111111'                        0282
*         END;                      /*                       @ZA24347*/
*       ELSE                                                       0284
*         ;                         /*                       @ZA24347*/
@RF00279 DS    0H                                                  0285
*       TCBSTAWA=R15;               /* ZERO ESTAE IN PROCESS FLAG  0285
*                                                            @Z40FPXA*/
         ST    R15,TCBSTAWA(,TCBPTR)                               0285
*       GENERATE;                                                  0286
*                                                       /* @Z40FPXA*/
      L     R14,12(R13)
      LM    R2,R12,28(R13)
      BR    R14
*     END;                                                         0287
*   ELSE                            /*                       @Z40FPXA*/
*     DO;                                                          0288
*                                                                  0288
         B     @RC00266                                            0288
@RF00266 DS    0H                                                  0289
*       /*************************************************************/
*       /*                                                           */
*       /* IF FUNCTION CODE IS NOT OVERLAY, THEN A INVALID FUNCTION  */
*       /* CODE WAS REQUESTED.. ABEND USER                           */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0289
*       IF FC^=8 THEN               /* OVERLAY REQUEST?      @Z40FPXA*/
         CLI   FC(R9),8                                            0289
         BE    @RF00289                                            0289
*         DO;                                                      0290
*           REASON='0C'X;           /* SET ABEND REASON CODE @Z40FPXA*/
         MVI   REASON(R9),X'0C'                                    0291
*           CALL INVALID;           /* ISSUE ABEND           @Z40FPXA*/
         BAL   @14,INVALID                                         0292
*         END;                                                     0293
*       CALL SCBSRCH;               /* FIND THE LAST VALID SCB       */
@RF00289 BAL   @14,SCBSRCH                                         0294
*       CALL ESTCOVAL;              /* VERIFY THE REQUEST AS BEING 0295
*                                      VALID                         */
         BAL   @14,ESTCOVAL                                        0295
*     END;                                                         0296
*PERFORM:                                                          0297
*                                                                  0297
*   /*****************************************************************/
*   /*                                                               */
*   /* BOTH BRANCH ENTRY AND SVC ENTRY REQUESTS ARE PROCESSED BY THIS*/
*   /* COMMON PATH TO PERFORM THE FUNCTION REQUESTED                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0297
*   DO;                                                            0297
*                                                                  0297
@RC00266 DS    0H                                                  0297
PERFORM  DS    0H                                                  0298
*     /***************************************************************/
*     /*                                                             */
*     /* THIS SECTION OF CODE ROUTES CONTROL TO SPECIFIC ROUTINES TO */
*     /* PERFORM THE REQUEST THAT WAS SPECIFIED                      */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0298
*     IF CANCELFL='1'B              /* CANCEL REQUEST ?      @Z30EPXA*/
*       THEN                        /* YES                           */
         TM    CANCELFL(R9),B'00001000'                            0298
         BNO   @RF00298                                            0298
*       DO;                                                        0299
*PERFCAN:                                                          0300
*         CALL CANCEL;              /* REMOVE AN SCB         @Z30EPXA*/
PERFCAN  BAL   @14,CANCEL                                          0300
*       END;                                                       0301
*     ELSE                                                         0302
*       DO;                                                        0302
         B     @RC00298                                            0302
@RF00298 DS    0H                                                  0303
*         IF FC=0                   /* CREATE REQUEST ?      @Z30EPXA*/
*           THEN                    /* YES                           */
         CLI   FC(R9),0                                            0303
         BNE   @RF00303                                            0303
*           DO;                                                    0304
*             CALL CREATE;          /* ADD AN SCB            @Z30EPXA*/
         BAL   @14,CREATE                                          0305
*           END;                                                   0306
*         ELSE                                                     0307
*           DO;                                                    0307
         B     @RC00303                                            0307
@RF00303 DS    0H                                                  0308
*             IF FC=8               /* OVERLAY REQUEST ?     @Z30EPXA*/
*               THEN                /* YES                           */
         CLI   FC(R9),8                                            0308
         BNE   @RF00308                                            0308
*               DO;                                                0309
*                 CALL OVERLAY;     /* OVERLAY AN SCB        @Z30EPXA*/
         BAL   @14,OVERLAY                                         0310
*               END;                                               0311
*             ELSE                                                 0312
*               DO;                                                0312
         B     @RC00308                                            0312
@RF00308 DS    0H                                                  0313
*                 IF FC=2           /* PROPAGATE REQUEST ?           */
*                   THEN            /* YES                           */
         CLI   FC(R9),2                                            0313
         BNE   @RF00313                                            0313
*                   DO;                                            0314
*                     CALL PROPA;   /* COPY (E)STAI SCB(S)           */
         BAL   @14,PROPA                                           0315
*                   END;                                           0316
*                 ELSE              /* CANNOT DETERMINE WHAT ACTION
*                                      TO BE PERFORMED RETURN CODE IS
*                                      HEX 10                        */
*                   DO;                                            0317
         B     @RC00313                                            0317
@RF00313 DS    0H                                                  0318
*RETCOD10:                                                         0318
*                     RETCOD=4;     /* SET INITIAL VALUE     @Z40FPXA*/
RETCOD10 MVI   RETCOD(R9),X'04'                                    0318
*RETCODC:                                                          0319
*                     RETCOD=RETCOD+4;/* INCREMENT RETURN CODE     0319
*                                                            @Z40FPXA*/
RETCODC  LA    @15,4                                               0319
         SLR   @12,@12                                             0319
         IC    @12,RETCOD(,R9)                                     0319
         ALR   @15,@12                                             0319
         STC   @15,RETCOD(,R9)                                     0319
*RETCOD8:                                                          0320
*                     RETCOD=RETCOD+4;/* INCREMENT RETURN CODE     0320
*                                                            @Z40FPXA*/
RETCOD8  LA    @15,4                                               0320
         SLR   @12,@12                                             0320
         IC    @12,RETCOD(,R9)                                     0320
         ALR   @15,@12                                             0320
         STC   @15,RETCOD(,R9)                                     0320
*RETCOD4:                                                          0321
*                     RETCOD=RETCOD+4;/* INCREMENT RETURN CODE     0321
*                                                            @Z40FPXA*/
RETCOD4  LA    @15,4                                               0321
         SLR   @12,@12                                             0321
         IC    @12,RETCOD(,R9)                                     0321
         ALR   @15,@12                                             0321
         STC   @15,RETCOD(,R9)                                     0321
*                   END;                                           0322
*               END;                                               0323
@RC00313 DS    0H                                                  0324
*           END;                                                   0324
@RC00308 DS    0H                                                  0325
*       END;                                                       0325
@RC00303 DS    0H                                                  0326
*   END;                                                           0326
*                                                                  0326
@RC00298 DS    0H                                                  0327
*   /*****************************************************************/
*   /*                                                               */
*   /* PREPARE FOR RETURN DETERMINE ENTRY TYPE                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0327
*   RFY                                                            0327
*    (R15) RSTD;                    /* RESTRICT REG 15       @Z40FPXA*/
*RETN:                                                             0328
*   R15=RETCOD;                     /* PICK UP RETURN CODE   @Z40FPXA*/
RETN     SLR   R15,R15                                             0328
         IC    R15,RETCOD(,R9)                                     0328
*   IF TCBSTAFX='1'B THEN           /* ALLOW FOR ASYNCRONOUS @ZA24347*/
         TM    TCBSTAFX(TCBPTR),B'01000000'                        0329
         BNO   @RF00329                                            0329
*     DO;                           /* INTERRUPTS.           @ZA24347*/
*       TCBFX='0'B;                 /*                       @ZA24347*/
         NI    TCBFX(TCBPTR),B'11111110'                           0331
*       TCBSTAFX='0'B;              /*                       @ZA24347*/
         NI    TCBSTAFX(TCBPTR),B'10111111'                        0332
*     END;                          /*                       @ZA24347*/
*   ELSE                                                           0334
*     ;                             /*                       @ZA24347*/
@RF00329 DS    0H                                                  0335
*   TCBSTAWA=0;                     /* CLEAR ESTAE IN PROCESS FLAG 0335
*                                                            @Z40FPXA*/
         SLR   @12,@12                                             0335
         ST    @12,TCBSTAWA(,TCBPTR)                               0335
*   IF BRENTFLG='1'B                /* BRANCH ENTRY TYPE?    @Z40FPXA*/
*     THEN                          /* YES- RESTORE REGS             */
         TM    BRENTFLG(R9),B'00000100'                            0336
         BNO   @RF00336                                            0336
*     DO;                                                          0337
*                                                                  0337
*       /*************************************************************/
*       /*                                                           */
*       /* RETURN BRANCH ENTRY WORK AREA TO SCB QUEUE                */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0338
*RETWA:                                                            0338
*       R5=FREESCBQ;                /* TOP OF CURRENT CELL QUEUE   0338
*                                                            @Z40FPXA*/
RETWA    L     R5,FREESCBQ(,R7)                                    0338
*       R9->SCBCHAIN=R5;            /* MAINTAIN QUEUE        @Z40FPXA*/
         ST    R5,SCBCHAIN(,R9)                                    0339
*       CS(R5,R9,FREESCBQ);         /* REPLACE CELL IN CHAIN @Z40FPXA*/
         CS    R5,@09,FREESCBQ(R7)                                 0340
*       BC(7,RETWA);                /* RETRY IF UNSUCCESSFUL @Z40FPXA*/
         BC    7,RETWA                                             0341
*NOWORKA:                                                          0342
*       GENERATE;                                                  0342
NOWORKA  DS    0H                                                  0342
*                                         /* @Z40FPXA*/
         L     R14,12(R13)
         LM    R2,R12,28(R13)
         BR    R14
*     END;                                                         0343
*   ELSE                            /* WAS NORMAL SVC ENTRY  @Z40FPXA*/
*     R14=R14SAVE;                  /* RESTORE RETURN ADDRESS      0344
*                                                            @Z40FPXA*/
         B     @RC00336                                            0344
@RF00336 L     R14,R14SAVE(,R9)                                    0344
*   RETURN;                                                        0345
@EL00001 DS    0H                                                  0345
@EF00001 DS    0H                                                  0345
@ER00001 BR    @14                                                 0345
*SCBSRCH:                                                          0346
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0346
         B     @EL00001                                            0346
SCBSRCH  DS    0H                                                  0347
*   R2=TCBSTABB;                    /* OBTAIN ADDRESS OF LAST SCB ON
*                                      THE QUEUE                     */
*                                                                  0347
         L     R2,TCBSTABB-1(,TCBPTR)                              0347
         LA    R2,0(,R2)                                           0347
*   /*****************************************************************/
*   /*                                                               */
*   /* FIND THE LAST SCB PLACED ON THE QUEUE-IF ANY EXIST- THAT IS   */
*   /* NOT MARKED AS LOGICALLY CANCELED AND NOT MARKED AS IN USE     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0348
*SRCHLOOP:                                                         0348
*   IF R2=0 THEN                    /* END OF LOOP?          @Z40FPXA*/
SRCHLOOP LTR   R2,R2                                               0348
         BZ    @RT00348                                            0348
*     RETURN;                       /* RETURN TO CALLER      @Z40FPXA*/
*   IF SCBID^='DB'X                 /* IS IT AN SCB                  */
*     THEN                          /* NO                            */
         CLI   SCBID(R2),X'DB'                                     0350
         BE    @RF00350                                            0350
*     DO;                                                          0351
*       R2=0;                                                      0352
         SLR   R2,R2                                               0352
*       TCBSTABB=R2;                /* TRUNCATE THE Q                */
         STCM  R2,7,TCBSTABB(TCBPTR)                               0353
*     END;                                                         0354
*   ELSE                            /* IT IS AN SCB                  */
*     DO;                                                          0355
         B     @RC00350                                            0355
@RF00350 DS    0H                                                  0356
*       IF SCBCNCEL='1'B×SCBINUSE='1'B THEN/* THIS SCB IS EITHER IN
*                                      USE OR LOGICALLY CANCELED     */
         TM    SCBCNCEL(R2),B'00010000'                            0356
         BO    @RT00356                                            0356
         TM    SCBINUSE(R2),B'00010000'                            0356
         BNO   @RF00356                                            0356
@RT00356 DS    0H                                                  0357
*         DO;                       /* GET NEXT SCB                  */
*           R2=SCBCHAIN;                                           0358
         L     R2,SCBCHAIN(,R2)                                    0358
*           GOTO SRCHLOOP;          /* CONTINUE SCAN         @Z40FPXA*/
         B     SRCHLOOP                                            0359
*         END;                                                     0360
*       ELSE                        /* USE THIS SCB                  */
*         DO;                                                      0361
@RF00356 DS    0H                                                  0362
*           RETURN;                 /* GET OUT OF DO WHILE   @Z30EPXA*/
@EL00002 DS    0H                                                  0362
@EF00002 DS    0H                                                  0362
@ER00002 BR    @14                                                 0362
*         END;                                                     0363
*     END;                                                         0364
*                                                                  0364
*   /*****************************************************************/
*   /*                                                               */
*   /* REGISTER 2 NOW CONTAINS EITHER THE ADDRESS OF THE LAST VALID  */
*   /* SCB PLACED ON THE QUEUE OR ZERO RETURN TO CALLING PROCEDURE   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0365
*   END SCBSRCH;                                                   0365
         B     @EL00002                                            0365
*ESTCOVAL:                                                         0366
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0366
*                                                                  0366
ESTCOVAL DS    0H                                                  0367
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE DETERMINES THE VALIDITY OF AN ESTAE CANCEL OR    */
*   /* OVERLAY REQUEST                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0367
*   IF R2=0                         /* ANY SCB TO CHECK              */
*     THEN                          /* NO                            */
         LTR   R2,R2                                               0367
         BZ    @RT00367                                            0367
*     GOTO CKRC4;                   /* INVALID               @Z40FPXA*/
*   IF SCBESTAE='0'B×SCBSTAI='1'B×SCBSTAR='1'B/* ESTAE TYPE ?        */
*     THEN                                                         0369
         TM    SCBSTAI(R2),B'11000000'                             0369
         BNZ   @RT00369                                            0369
         TM    SCBESTAE(R2),B'00010000'                            0369
         BNO   @RT00369                                            0369
*     GOTO CKRC4;                   /* INVALID               @Z40FPXA*/
*   IF BRENTFLG='1'B                /* BRANCH ENTERED BY INVOKER?  0371
*                                                            @Z40FPXA*/
*     THEN                          /* YES-INVOKER IS RB POINTED TO
*                                      BY THE TCB                    */
         TM    BRENTFLG(R9),B'00000100'                            0371
         BNO   @RF00371                                            0371
*     DO;                                                          0372
*       IF SCBOWNRA=RBSECPTR        /* IS SCB OWNED BY THE RB POINTED
*                                      TO BY THE TCB         @Z40FPXA*/
*         THEN                      /* YES                           */
         L     @12,SCBOWNRA-1(,R2)                                 0373
         LA    @12,0(,@12)                                         0373
         CR    RBSECPTR,@12                                        0373
         BE    @RT00373                                            0373
*         RETURN;                   /* OK.. RETURN TO CALLER @Z40FPXA*/
*     END;                                                         0375
*   ELSE                            /* SVC ENTERED-INVOKER IS THE  0376
*                                      SECOND RB ON THE RB Q         */
*     DO;                                                          0376
         B     @RC00371                                            0376
@RF00371 DS    0H                                                  0377
*       IF SCBOWNRA=RBLINKB         /* IS IT OWNED?          @Z40FPXA*/
*         THEN                      /* YES                           */
         CLC   SCBOWNRA(3,R2),RBLINKB(RBSECPTR)                    0377
         BE    @RT00377                                            0377
*         RETURN;                   /* OK.. RETURN TO CALLER @Z40FPXA*/
*     END;                                                         0379
*CKRC4:                                                            0380
*   IF FC=8                         /* INVALID OVERLAY ?     @Z40FPXA*/
*     THEN                          /* YES                           */
@RC00371 DS    0H                                                  0380
CKRC4    CLI   FC(R9),8                                            0380
         BNE   @RF00380                                            0380
*     DO;                                                          0381
*       RETCOD=4;                   /* ALLOW PROCESSING      @Z40FPXA*/
         MVI   RETCOD(R9),X'04'                                    0382
*       FC='00'X;                   /* BUT THE REQUEST IS CHANGED TO
*                                      A CREATE              @Z40FPXA*/
         MVI   FC(R9),X'00'                                        0383
*     END;                                                         0384
*   ELSE                                                           0385
*     GOTO RETCODC;                 /* RETURN TO CALLER WITH RET C 0385
*                                                            @Z40FPXA*/
*   END ESTCOVAL;                                                  0386
@EL00003 DS    0H                                                  0386
@EF00003 DS    0H                                                  0386
@ER00003 BR    @14                                                 0386
*VERATTCH:                                                         0387
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0387
*                                                                  0387
VERATTCH DS    0H                                                  0388
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS PROCEDURE INSURES THAT ATTACH IS THE INVOKER FOR ALL STAI*/
*   /* OR ESTAI REQUESTS IT ALSO INSURES THAT A VALID TCB ADDRESS IS */
*   /* PASSED BY ATTACH                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0388
*   RBSECPTR=RBLINK->RBLINKB;       /* ADDRESS OF THIRD RB   @Z40FPXA*/
         L     @12,RBLINK(,RBSECPTR)                               0388
         L     @12,RBLINKB-1(,@12)                                 0388
         LA    @12,0(,@12)                                         0388
         LR    RBSECPTR,@12                                        0388
*   IF RBSECPTR=TCBPTR×             /* ARE THERE 3 RBS ON Q  @Z40FPXA*/
*       RBINTCOD^='002A'X           /* IF SO DID THE THIRD RB ISSUE
*                                      ATTACH?               @Z40FPXA*/
*     THEN                                                         0389
         CR    RBSECPTR,TCBPTR                                     0389
         BE    @RT00389                                            0389
         LR    @12,RBSECPTR                                        0389
         BCTR  @12,0                                               0389
         BCTR  @12,0                                               0389
         CLC   RBINTCOD-62(2,@12),@CB02152                         0389
         BNE   @RT00389                                            0389
*     GOTO CKABND;                  /* RETURN CODE C         @Z40FPXA*/
*   IF ESTAOWNR=0                   /* TCB ADDRESS SUPPLIED ?        */
*     THEN                          /* NO                            */
         L     @12,ESTAOWNR(,R1)                                   0391
         LTR   @12,@12                                             0391
         BZ    @RT00391                                            0391
*     GOTO CKABND;                  /* RETURN CODE C                 */
*   IF FC='00'X&ESTAEXIT=0          /* CT WITH EXIT ADD?     @Z40FPXA*/
*     THEN                          /* NO                            */
         CLI   FC(R9),X'00'                                        0393
         BNE   @RF00393                                            0393
         L     @12,ESTAEXIT-1(,R1)                                 0393
         LA    @12,0(,@12)                                         0393
         LTR   @12,@12                                             0393
         BZ    @RT00393                                            0393
*     GOTO CKABND;                  /* RETURN CODE C         @Z40FPXA*/
*   RBSECPTR=TCBRBP;                /* RELOAD RB PTR         @Z40FPXA*/
@RF00393 L     RBSECPTR,TCBRBP(,TCBPTR)                            0395
*   RETURN;                                                        0396
@EL00004 DS    0H                                                  0396
@EF00004 DS    0H                                                  0396
@ER00004 BR    @14                                                 0396
*CKABND:                            /* DETERMINE IF ABEND SHOULD BE
*                                      ISSUED, OR RETURN CODE C      */
*   IF ABNDFLG='1'B THEN            /* SHOULD ABEND BE ISSUED?     0397
*                                                            @Z40FPXA*/
CKABND   TM    ABNDFLG(R9),B'00000010'                             0397
         BNO   @RF00397                                            0397
*     DO;                           /* YES.. ISSUE ABEND             */
*       REASON=8;                   /* SET ABEND REASON CODE @Z40FPXA*/
         MVI   REASON(R9),X'08'                                    0399
*       CALL INVALID;               /* GO ISSUE ABEND        @Z40FPXA*/
         BAL   @14,INVALID                                         0400
*     END;                                                         0401
*   ELSE                                                           0402
*     GOTO RETCODC;                 /* GO ISSUE RETURN CODE C      0402
*                                                            @Z40FPXA*/
*   END VERATTCH;                                                  0403
         B     @EL00004                                            0403
*CANCEL:                                                           0404
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0404
*                                                                  0404
CANCEL   DS    0H                                                  0405
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE DEQUEUES THE SCB ADDRESSED BY REGISTER 2 IT THEN */
*   /* DETERMINES IF THE SCB WAS CREATED VIA BRANCH ENTRY-IF IT WAS  */
*   /* IT IS CLEARED TO 0 IF IT WAS NOT THE CORE IS FREEMAINED       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0405
*   IF TCBSTABB=R2                  /* IS THE SCB POINTED TO BY THE
*                                      TCB THE ONE TO CANCEL         */
*     THEN                          /* YES                           */
         L     @12,TCBSTABB-1(,TCBPTR)                             0405
         LA    @12,0(,@12)                                         0405
         CR    R2,@12                                              0405
         BNE   @RF00405                                            0405
*     DO;                                                          0406
*       TCBSTABB=SCBCHAIN;          /* TCB POINTS TO NEXT SCB ON   0407
*                                      QUEUE                         */
         MVC   TCBSTABB(3,TCBPTR),SCBCHAIN+1(R2)                   0407
*     END;                                                         0408
*   ELSE                            /* THE SCB TO CANCEL IS NOT THE
*                                      LAST ONE ON THE QUEUE-IN ORDER
*                                      TO DEQUEUE THE SCB A SEARCH OF
*                                      THE QUEUE MUST BE MADE TO FIND
*                                      THE SCB THAT POINTS TO THE SCB
*                                      TO CANCEL                     */
*     DO;                                                          0409
         B     @RC00405                                            0409
@RF00405 DS    0H                                                  0410
*       R3=TCBSTAB;                 /* REG 3 IS USED TO ADDRESS THE
*                                      PREVIOUS SCB                  */
         L     R3,TCBSTAB(,TCBPTR)                                 0410
*       DO WHILE(R3->SCBCHAIN^=R2); /* DOES THIS SCB POINT TO THE SCB
*                                      TO CANCEL ?                   */
         B     @DE00411                                            0411
@DL00411 DS    0H                                                  0412
*         R3=R3->SCBCHAIN;          /* NO-GET NEXT SCB ADDRESS       */
         L     R3,SCBCHAIN(,R3)                                    0412
*       END;                        /* END OF DO WHILE               */
@DE00411 C     R2,SCBCHAIN(,R3)                                    0413
         BNE   @DL00411                                            0413
*       R3->SCBCHAIN=SCBCHAIN;      /* DEQUEUE SCB TO CANCEL         */
         L     @12,SCBCHAIN(,R2)                                   0414
         ST    @12,SCBCHAIN(,R3)                                   0414
*     END;                                                         0415
*   RBSECPTR=SCBOWNR;               /* SAVE OWNING RB        @Z40FPXA*/
*                                                                  0416
@RC00405 L     RBSECPTR,SCBOWNR(,R2)                               0416
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE IF THE INVOKING RB OWNS ANY MORE SCBS               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0417
*   IF TCBSTABB=0×TCBSTABB->SCBOWNRA^=R2->SCBOWNRA/* THE LAST ONE ON
*                                      QUEUE OWNED ALSO?             */
*     THEN                          /* NO                            */
         L     @12,TCBSTABB-1(,TCBPTR)                             0417
         LA    @12,0(,@12)                                         0417
         LTR   @12,@12                                             0417
         BZ    @RT00417                                            0417
         CLC   SCBOWNRA(3,@12),SCBOWNRA(R2)                        0417
         BE    @RF00417                                            0417
@RT00417 DS    0H                                                  0418
*     DO;                                                          0418
*       RBSCB='0'B;                 /* INDICATE THAT THE INVOKER DOES
*                                      NOT OWN AN SCB                */
         LR    @12,RBSECPTR                                        0419
         AL    @12,@CF02220                                        0419
         NI    RBSCB-56(@12),B'11111101'                           0419
*     END;                                                         0420
*                                                                  0420
*   /*****************************************************************/
*   /*                                                               */
*   /* SAVE THE SCB CELL FOR USE ON THE NEXT STAE ENTRY, PLACE ON    */
*   /* FREE SCB QUEUE                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0421
*   IF R2->SCBBRNTR='0'B THEN       /* IF SCB NOT IN SVRB    @ZA15748*/
@RF00417 TM    SCBBRNTR(R2),B'00000100'                            0421
         BNZ   @RF00421                                            0421
*     DO;                           /*                       @ZA15748*/
*RESTLP:                                                           0423
*       R3=FREESCBQ;                /* TOP OF QUEUE CHAIN    @Z40FPXA*/
RESTLP   L     R3,FREESCBQ(,R7)                                    0423
*       SCBCHAIN=R3;                /* MAINTAIN QUEUE        @Z40FPXA*/
         ST    R3,SCBCHAIN(,R2)                                    0424
*       CS(R3,R2,FREESCBQ);         /* ADD CELL TO FREE QUEUE      0425
*                                                            @Z40FPXA*/
         CS    R3,@02,FREESCBQ(R7)                                 0425
*       BC(7,RESTLP);               /* RETRY IF UNSUCESSFUL  @Z40FPXA*/
         BC    7,RESTLP                                            0426
*     END;                          /*                       @ZA15748*/
*   ELSE                            /* IF SCB IN SVRB        @ZA15748*/
*     R2->SCB(1:13)=''B;            /* JUST CLEAR IT         @ZA15748*/
         B     @RC00421                                            0428
@RF00421 XC    SCB(13,R2),SCB(R2)                                  0428
*   RETURN;                                                        0429
@EL00005 DS    0H                                                  0429
@EF00005 DS    0H                                                  0429
@ER00005 BR    @14                                                 0429
*   END CANCEL;                                                    0430
         B     @EL00005                                            0430
*OVERLAY:                                                          0431
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0431
*                                                                  0431
OVERLAY  DS    0H                                                  0432
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE REPLACES THE LAST VALID SCB CREATED FOR THE      */
*   /* INVOKER IT IS IN EFFECT A CREATE REQUEST EXCEPT THAT AN       */
*   /* EXISTING SCB IS REUSED                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0432
*   IF SCBBRNTR='1'B                /* IS THE SCB TO BE REPLACED IN
*                                      THE BRANCH AREA OF AN SVRB    */
*     THEN                          /* YES                           */
         TM    SCBBRNTR(R2),B'00000100'                            0432
         BNO   @RF00432                                            0432
*     DO;                                                          0433
*       FESTAFLG='1'B;              /* SET BRANCH ENTRY FLAG @Z40FPXA*/
         OI    FESTAFLG(R9),B'10000000'                            0434
*     END;                                                         0435
*   SCBCLEAR=''B;                   /* ZERO OUT SCB EXCEPT CHAIN FLD
*                                                            @Z30EPXA*/
@RF00432 XC    SCBCLEAR(5,R2),SCBCLEAR(R2)                         0436
*   WORK1=R14;                      /* SAVE RETURN ADDRESS   @Z40FPXA*/
         ST    R14,WORK1(,R9)                                      0437
*   CALL COMPLSCB;                  /* GO COMPLETE SCB       @Z40FPXA*/
         BAL   @14,COMPLSCB                                        0438
*   IF FESTAFLG='1'B                /* WAS IT FAST ESTAE?    @Z40FPXA*/
*     THEN                                                         0439
         TM    FESTAFLG(R9),B'10000000'                            0439
         BNO   @RF00439                                            0439
*     DO;                                                          0440
*       SCBBRNTR='1'B;              /* RESTORE BRANCH AREA INDICATOR */
         OI    SCBBRNTR(R2),B'00000100'                            0441
*     END;                                                         0442
*   R14=WORK1;                      /* RESTORE RETURN ADDRESS        */
@RF00439 L     R14,WORK1(,R9)                                      0443
*   RETURN;                         /* RETURN                        */
@EL00006 DS    0H                                                  0444
@EF00006 DS    0H                                                  0444
@ER00006 BR    @14                                                 0444
*   END OVERLAY;                                                   0445
*CREATE:                                                           0446
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0446
*                                                                  0446
CREATE   DS    0H                                                  0447
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS ENTERED TO CREATE AND ENQUEUE AN SCB OBTAINED */
*   /* FROM THE FREESCB QUEUE IN SP 255. IF THE REQUEST IS FOR STAI  */
*   /* OR ESTAI CONTROL IS THEN ROUTED TO THE PROPA ROUTINE REGISTERS*/
*   /* UPON ENTRY 1- ADDRESS OF PARAMETER LIST 4- CURRENT TCB ADDRESS*/
*   /* 5- CURRENT RB ADDRESS 14- RETURN ADDRESS                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0447
*   WORK1=R14;                      /* SAVE RETURN ADDRESS           */
         ST    R14,WORK1(,R9)                                      0447
*   DO;                                                            0448
*                                                                  0448
*     /***************************************************************/
*     /*                                                             */
*     /* CHECK FOR FREE SCB TO USE                                   */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0449
*TRYA:                                                             0449
*     R2=FREESCBQ;                                                 0449
TRYA     L     R2,FREESCBQ(,R7)                                    0449
*     IF R2=0 THEN                  /* FREE SCB?             @Z30EPXA*/
         LTR   R2,R2                                               0450
         BNZ   @RF00450                                            0450
*       DO;                                                        0451
*         CALL GETSTOR;             /* GET STORAGE FOR SCB   @Z30EPXA*/
         BAL   @14,GETSTOR                                         0452
*         GOTO TRYA;                /* RETRY CELL OBTAIN     @Z40FPXA*/
         B     TRYA                                                0453
*       END;                                                       0454
*     R3=SCBCHAIN;                  /* PICK UP LINK FIELD    @Z40FPXA*/
@RF00450 L     R3,SCBCHAIN(,R2)                                    0455
*     CS(R2,R3,FREESCBQ);           /* DEQUEUE FROM CHAIN    @Z40FPXA*/
         CS    R2,@03,FREESCBQ(R7)                                 0456
*     BC(7,TRYA);                   /* GO TRY OBTAIN AGAIN   @Z40FPXA*/
         BC    7,TRYA                                              0457
*   END;                                                           0458
*   DO;                                                            0459
*     SCBFLGS2=0;                   /* CLEAR FLAG BYTE IN SCB      0460
*                                                            @Z40FPXA*/
         MVI   SCBFLGS2(R2),X'00'                                  0460
*     CALL COMPLSCB;                /* BUILD COMMON SECTION OF SCB   */
         BAL   @14,COMPLSCB                                        0461
*     DO;                                                          0462
*       IF ESTASTAI='1'B            /* STAI OR ESTAI ?               */
*         THEN                      /* YES                           */
         TM    ESTASTAI(R1),B'10000000'                            0463
         BNO   @RF00463                                            0463
*         DO;                                                      0464
*           SCBCHAIN=0;             /* CLEAR LINK FIELD      @Z40FPXA*/
         SLR   @12,@12                                             0465
         ST    @12,SCBCHAIN(,R2)                                   0465
*           SCBOWNRA=TCBPTR;        /* THE CURRENT TCB IS OWNER      */
         STCM  TCBPTR,7,SCBOWNRA(R2)                               0466
*           ESTAOWNR->TCBSTABB=R2;  /* ENQUEUE ON NEW TCB            */
         L     @12,ESTAOWNR(,R1)                                   0467
         STCM  R2,7,TCBSTABB(@12)                                  0467
*           CALL PROPA;             /* COPY MOMS SCB Q               */
         BAL   @14,PROPA                                           0468
*         END;                                                     0469
*       ELSE                                                       0470
*         DO;                                                      0470
         B     @RC00463                                            0470
@RF00463 DS    0H                                                  0471
*           IF ESTASTAR='0'B        /* ESTAR REQUEST                 */
*             THEN                  /* NO                            */
         TM    ESTASTAR(R1),B'01000000'                            0471
         BNZ   @RF00471                                            0471
*             DO;                   /* SET OWNER ADDRESS             */
*               RBSECPTR=RBLINK;                                   0473
         L     RBSECPTR,RBLINK(,RBSECPTR)                          0473
*               SCBOWNRA=RBSECPTR;                                 0474
         STCM  RBSECPTR,7,SCBOWNRA(R2)                             0474
*               RBSCB='1'B;                                        0475
         LR    @12,RBSECPTR                                        0475
         AL    @12,@CF02220                                        0475
         OI    RBSCB-56(@12),B'00000010'                           0475
*             END;                                                 0476
*           ELSE                    /* CLEAR SCBOWNRA FIELD FOR ESTAR
*                                                            @Z40FPXA*/
*             SCBOWNRA=0;           /* CLEAR FIELD           @Z40FPXA*/
         B     @RC00471                                            0477
@RF00471 SLR   @12,@12                                             0477
         STCM  @12,7,SCBOWNRA(R2)                                  0477
*           SCBCHAIN=TCBSTABB;      /* POINT TO NEXT SCB             */
@RC00471 L     @12,TCBSTABB-1(,TCBPTR)                             0478
         LA    @12,0(,@12)                                         0478
         ST    @12,SCBCHAIN(,R2)                                   0478
*           TCBSTABB=R2;            /* PLACE SCB ON QUEUE            */
         STCM  R2,7,TCBSTABB(TCBPTR)                               0479
*         END;                                                     0480
*     END;                                                         0481
@RC00463 DS    0H                                                  0482
*   END;                                                           0482
*CREATEXT:                                                         0483
*   R14=WORK1;                      /* RESTORE REG 14        @Z30EPXA*/
CREATEXT L     R14,WORK1(,R9)                                      0483
*   RETURN;                                                        0484
@EL00007 DS    0H                                                  0484
@EF00007 DS    0H                                                  0484
@ER00007 BR    @14                                                 0484
*   END CREATE;                                                    0485
*COMPLSCB:                                                         0486
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0486
*                                                                  0486
COMPLSCB DS    0H                                                  0487
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE OBTAINS THE KEY AND STATE OF THE INVOKER FOR THIS*/
*   /* REQUEST-IF SVC 60 IS BRANCH ENTERED THE INVOKER IS IN KEY 0   */
*   /* SUPERVISOR STATE. FOR SVC ENTRY THE KEY AND STATE ARE OBTAINED*/
*   /* FROM THE RBOPSW FIELD FROM THE INVOKING RB                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0487
*   IF ESTAESTA='1'B THEN           /* IF ESTA REQUEST THEN  @ZA15766*/
         TM    ESTAESTA(R1),B'00010000'                            0487
         BNO   @RF00487                                            0487
*     SCBFLGS3=ESTAFLG2;            /* COPY FLAGS FROM ESTA PARM LIST
*                                                            @Z40FPXA*/
         MVC   SCBFLGS3(1,R2),ESTAFLG2(R1)                         0488
*   ELSE                            /* IF STA REQUEST THEN   @ZA15766*/
*     SCBFLGS3=''B;                 /* SET ESTA FLAGS TO ZERO      0489
*                                                            @ZA15766*/
         B     @RC00487                                            0489
@RF00487 MVI   SCBFLGS3(R2),X'00'                                  0489
*   IF BRENTFLG='1'B                /* BRANCH ENTERED?       @Z40FPXA*/
*     THEN                          /* YES                           */
@RC00487 TM    BRENTFLG(R9),B'00000100'                            0490
         BNO   @RF00490                                            0490
*     DO;                                                          0491
*       SCBKEY0='1'B;               /* INDICATE CONTROL PROGRAM KEY  */
*       SCBSUPER='1'B;              /* INDICATE SUPERVISOR STATE     */
         OI    SCBKEY0(R2),B'00000011'                             0493
*       SCBPKEY='00'X;              /* KEY VALUE IS ZERO             */
         MVI   SCBPKEY(R2),X'00'                                   0494
*     END;                                                         0495
*   ELSE                            /* SVC ENTERED                   */
*     DO;                                                          0496
         B     @RC00490                                            0496
@RF00490 DS    0H                                                  0497
*       IF ESTASTAI='1'B            /* FOR STAI OR ESTAI THE INVOKER
*                                      IS THE THIRD RB ON THE QUEUE  */
*         THEN                                                     0497
         TM    ESTASTAI(R1),B'10000000'                            0497
         BNO   @RF00497                                            0497
*         DO;                                                      0498
*           R3=RBLINK->RBLINK;      /* OBTAIN INVOKERS RB ADD      0499
*                                                            @Z40FPXA*/
         L     @12,RBLINK(,RBSECPTR)                               0499
         L     R3,RBLINK(,@12)                                     0499
*         END;                                                     0500
*       ELSE                        /* NOT STAI OR ESTAI SO USE THE
*                                      SECOND RB                     */
*         DO;                                                      0501
         B     @RC00497                                            0501
@RF00497 DS    0H                                                  0502
*           R3=RBLINK;              /* RB ADD                @Z40FPXA*/
         L     R3,RBLINK(,RBSECPTR)                                0502
*         END;                                                     0503
*       MVZ(SCBPKEY,R3->KEYWMP);    /* PLACE KEY IN SCB FIELD      0504
*                                                            @Z40FPXA*/
@RC00497 MVZ   SCBPKEY(1,R2),KEYWMP(R3)                            0504
*       SCBPKEY=SCBPKEY&'F0'X;      /* CLEAR UNUSED BYTE     @Z40FPXA*/
         NI    SCBPKEY(R2),X'F0'                                   0505
*       IF SCBPKEY<'80'X            /* IS THE KEY 0-7 ?              */
*         THEN                      /* YES                           */
         CLI   SCBPKEY(R2),X'80'                                   0506
         BNL   @RF00506                                            0506
*         DO;                                                      0507
*           SCBKEY0='1'B;           /* INDICATE CONTROL PROGRAM KEY  */
         OI    SCBKEY0(R2),B'00000010'                             0508
*         END;                                                     0509
*       IF R3->PPMODE^='1'B         /* PROBLEM PROGRM MODE?  @Z40FPXA*/
*         THEN                      /* YES                           */
@RF00506 TM    PPMODE(R3),B'00000001'                              0510
         BO    @RF00510                                            0510
*         DO;                                                      0511
*           SCBSUPER='1'B;          /* INDICATE SUPERVISOR STATE     */
         OI    SCBSUPER(R2),B'00000001'                            0512
*         END;                                                     0513
*     END;                                                         0514
*                                                                  0514
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE COMPLETES THE COMMON CREATE AND OVERLAY          */
*   /* PROCESSING BY INITIALIZING THE REMAINING SCB FIELDS           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0515
*FINSCB:                                                           0515
*   ENTRY;                                                         0515
         B     @EC00515                                            0515
FINSCB   DS    0H                                                  0515
@EC00515 DS    0H                                                  0516
*   SCBEXIT=0;                      /* ZERO HIGH ORDER BYTE OF     0516
*                                      SCBEXIT               @ZA15390*/
         SLR   @12,@12                                             0516
         ST    @12,SCBEXIT(,R2)                                    0516
*   SCBFLDS=ESTAFLDS;               /* MOVE PARMS INTO SCB   @Z40FPXA*/
         MVC   SCBFLDS(7,R2),ESTAFLDS(R1)                          0517
*   SCBFLGS1=ESTAFLG1;              /* BUILD SCB FLAG 1              */
         MVC   SCBFLGS1(1,R2),ESTAFLG1(R1)                         0518
*   IF XCTLIN<0                     /* WAS XCTL =YES SPECIFIED       */
*     THEN                          /* YES                           */
         CR    XCTLIN,@12                                          0519
         BNL   @RF00519                                            0519
*     DO;                                                          0520
*       SCBXCTL2='1'B;              /* INDICATE XCTL OPTION          */
         OI    SCBXCTL2(R2),B'01000000'                            0521
*     END;                                                         0522
*   IF TCBETERM='1'B                /* IS A SPECIAL TERM EXIT IN   0523
*                                      PROGRESS VIA RTM2             */
*     THEN                          /* YES                           */
@RF00519 TM    TCBETERM(TCBPTR),B'10000000'                        0523
         BNO   @RF00523                                            0523
*     DO;                                                          0524
*       SCBTERMI='0'B;              /* THEN IN ORDER TO PREVENT    0525
*                                      LOOPING IN AN INDEFINITE    0525
*                                      NUMBER OF SPECIAL TERM EXITS
*                                      THE TERM OPTION IS NOT ALLOWED*/
         NI    SCBTERMI(R2),B'10111111'                            0525
*     END;                                                         0526
*   SCBID='DB'X;                    /* SET SCB IDENTIFIER            */
@RF00523 MVI   SCBID(R2),X'DB'                                     0527
*   SCBBRNTR='0'B;                  /* RESET FAST ESTAE FLAG IN SCB
*                                                            @Z40FPXA*/
         NI    SCBBRNTR(R2),B'11111011'                            0528
*   RETURN;                                                        0529
@EL00008 DS    0H                                                  0529
@EF00008 DS    0H                                                  0529
@ER00008 BR    @14                                                 0529
*   END COMPLSCB;                                                  0530
*PROPA:                                                            0531
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0531
*                                                                  0531
PROPA    DS    0H                                                  0532
*   /*****************************************************************/
*   /*                                                               */
*   /* PROPA IS ENTERED TO COPY ALL STAI AND ESTAI SCBS FROM THE TCB */
*   /* THAT HAS REQUESTED ATTACH TO THE NEW TCB BEING CREATED BY THE */
*   /* ATTACH FUNCTION                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0532
*   WORK2=R14;                      /* SAVE RETURN ADDRESS           */
         ST    R14,WORK2(,R9)                                      0532
*   RESPECIFY                                                      0533
*    (R5) RSTD;                                                    0533
*   R2=TCBSTABB;                    /* START AT THE TOP OF THE SCB Q */
         L     R2,TCBSTABB-1(,TCBPTR)                              0534
         LA    R2,0(,R2)                                           0534
*   R5=0;                           /*                       @Z30EPXA*/
         SLR   R5,R5                                               0535
*   DO WHILE(R2^=0&R5=0);           /* FIND FIRST STAI SCB   @Z40FPXA*/
         B     @DE00536                                            0536
@DL00536 DS    0H                                                  0537
*     IF SCBID^='DB'X               /* IS IT AN SCB ?                */
*       THEN                        /* NO                            */
         CLI   SCBID(R2),X'DB'                                     0537
         BE    @RF00537                                            0537
*       DO;                         /* TRUNCATE THE SCB QUEUE        */
*         R2=0;                                                    0539
         SLR   R2,R2                                               0539
*         R5=0;                     /*                       @Z30EPXA*/
         SLR   R5,R5                                               0540
*         GOTO RETCODC;                                            0541
         B     RETCODC                                             0541
*       END;                                                       0542
*     ELSE                                                         0543
*       DO;                                                        0543
@RF00537 DS    0H                                                  0544
*         IF SCBSTAI='1'B           /* IS THIS A STAI OR ESTAI TYPE
*                                      SCB                           */
*           THEN                    /* YES-                          */
         TM    SCBSTAI(R2),B'10000000'                             0544
         BNO   @RF00544                                            0544
*           R5=R2;                  /*                       @Z30EPXA*/
         LR    R5,R2                                               0545
*         R2=SCBCHAIN;              /* ADDRESS OF NEXT SCB           */
@RF00544 L     R2,SCBCHAIN(,R2)                                    0546
*       END;                                                       0547
*   END;                                                           0548
@DE00536 SLR   @12,@12                                             0548
         CR    R2,@12                                              0548
         BE    @DC00536                                            0548
         CR    R5,@12                                              0548
         BE    @DL00536                                            0548
@DC00536 DS    0H                                                  0549
*   IF R5=0                         /* ANY SCB TO COPY               */
*     THEN                                                         0549
         LTR   R5,R5                                               0549
         BZ    @RT00549                                            0549
*     ;                             /* NO- BYPASS PROCESS            */
*   ELSE                            /* YES- OBTAIN STORAGE           */
*     DO;                                                          0551
*                                                                  0551
*       /*************************************************************/
*       /*                                                           */
*       /* CHECK IF FREE SCB CAN BE USED. IF NOT OBTAIN MORE SCB'S   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0552
*TRYA1:                                                            0552
*       R2=FREESCBQ;                                               0552
TRYA1    L     R2,FREESCBQ(,R7)                                    0552
*       IF R2=0 THEN                /* FREE Q EMPTY?         @Z30EPXA*/
         LTR   R2,R2                                               0553
         BNZ   @RF00553                                            0553
*         DO;                                                      0554
*           CALL GETSTOR;           /* OBTAIN SCB'S          @Z30EPXA*/
         BAL   @14,GETSTOR                                         0555
*           GOTO TRYA1;             /* GO RETRY CELL OBTAIN  @Z40FPXA*/
         B     TRYA1                                               0556
*         END;                                                     0557
*                                                                  0557
*       /*************************************************************/
*       /*                                                           */
*       /* PICK UP ADDRESS OF FREE SCB                               */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0558
*       R3=SCBCHAIN;                /* PICK UP CHAIN FIELD   @Z40FPXA*/
@RF00553 L     R3,SCBCHAIN(,R2)                                    0558
*       CS(R2,R3,FREESCBQ);         /* DEQUEUE ELEMENT       @Z40FPXA*/
         CS    R2,@03,FREESCBQ(R7)                                 0559
*       BC(7,TRYA1);                /* RETRY IF UNSUCCESSFUL @Z40FPXA*/
*                                                                  0560
         BC    7,TRYA1                                             0560
*       /*************************************************************/
*       /*                                                           */
*       /* NOW LOOK AT NEW TCB BEING PROP TO                         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0561
*       IF ESTAOWNR->TCBSTABB=0     /* WAS AN SCB CREATED ON THE TCB */
*         THEN                      /* NO                            */
         L     @12,ESTAOWNR(,R1)                                   0561
         L     @11,TCBSTABB-1(,@12)                                0561
         LA    @11,0(,@11)                                         0561
         LTR   @11,@11                                             0561
         BNZ   @RF00561                                            0561
*         ESTAOWNR->TCBSTABB=R2;    /* ENQUEUE ON THE TCB            */
         STCM  R2,7,TCBSTABB(@12)                                  0562
*       ELSE                                                       0563
*         ESTAOWNR->TCBSTAB->SCBCHAIN=R2;/* ENQUEUE AS SECOND SCB    */
         B     @RC00561                                            0563
@RF00561 L     @12,ESTAOWNR(,R1)                                   0563
         L     @12,TCBSTAB(,@12)                                   0563
         ST    R2,SCBCHAIN(,@12)                                   0563
*       DO WHILE(R5^=0);            /* COPY ALL STAI AND ESTAI SCBS
*                                      FROM MOMS QUEUE       @Z30EPXA*/
@RC00561 B     @DE00564                                            0564
@DL00564 DS    0H                                                  0565
*         SCB=R5->SCB;              /* COPY THE SCB          @Z30EPXA*/
         MVC   SCB(20,R2),SCB(R5)                                  0565
*         R5=R5->SCBCHAIN;          /* GET NEXT SCB ON MOTHER TCB  0566
*                                                            @Z30EPXA*/
         L     R5,SCBCHAIN(,R5)                                    0566
*         IF R5=0                   /* LAST ONE COPIED ?     @Z30EPXA*/
*           THEN                                                   0567
         LTR   R5,R5                                               0567
         BZ    @RT00567                                            0567
*           ;                       /* YES-BYPASS CHAIN UPDATING     */
*         ELSE                                                     0569
*           DO;                                                    0569
*                                                                  0569
*             /*******************************************************/
*             /*                                                     */
*             /* CHECK IF FREE SCB CAN BE USED. IF NOT OBTAIN NEW    */
*             /* SCB'S                                               */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0570
*TRY2:                                                             0570
*             R3=FREESCBQ;                                         0570
TRY2     L     R3,FREESCBQ(,R7)                                    0570
*             IF R3=0 THEN          /* FREE QUE EMPTY?       @Z30EPXA*/
         LTR   R3,R3                                               0571
         BNZ   @RF00571                                            0571
*               DO;                                                0572
*                 CALL GETSTOR;     /* GET NEW SCB'S         @Z30EPXA*/
         BAL   @14,GETSTOR                                         0573
*                 GOTO TRY2;        /* RETRY CELL OBTAIN     @Z40FPXA*/
         B     TRY2                                                0574
*               END;                                               0575
*             R13=R3->SCBCHAIN;     /* CHAIN FIELD           @Z40FPXA*/
@RF00571 L     R13,SCBCHAIN(,R3)                                   0576
*             CS(R3,R13,FREESCBQ);  /* DEQUEUE FROM CHAIN    @Z40FPXA*/
         CS    R3,@13,FREESCBQ(R7)                                 0577
*             BC(7,TRY2);           /* TRY AGAIN             @Z40FPXA*/
         BC    7,TRY2                                              0578
*             SCBCHAIN=R3;          /* UPDATE CHAIN POINTERS @Z30EPXA*/
         ST    R3,SCBCHAIN(,R2)                                    0579
*             R2=R3;                /* UPDATE SCB POINTER    @Z30EPXA*/
         LR    R2,R3                                               0580
*           END;                                                   0581
*       END;                                                       0582
@RT00567 DS    0H                                                  0582
@DE00564 LTR   R5,R5                                               0582
         BNZ   @DL00564                                            0582
*     END;                                                         0583
*EXITPROP:                                                         0584
*   R14=WORK2;                      /* RESTORE RETURN ADDR   @Z30EPXA*/
@RT00549 DS    0H                                                  0584
EXITPROP L     R14,WORK2(,R9)                                      0584
*   R5=TCBRBP;                      /* RESTORE RB POINTER    @Z40FPXA*/
         L     R5,TCBRBP(,TCBPTR)                                  0585
*   RETURN;                                                        0586
@EL00009 DS    0H                                                  0586
@EF00009 DS    0H                                                  0586
@ER00009 BR    @14                                                 0586
*   END PROPA;                                                     0587
*GETSTOR:                                                          0588
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                       @Z30EPXH*/
GETSTOR  DS    0H                                                  0589
*   RFY                                                            0589
*    (R1,                                                          0589
*     R6) RSTD;                     /* RESTRICT REGS         @Z40FPXA*/
*   R6=R14;                         /* SAVE RETURN ADDRESS   @Z40FPXA*/
         LR    R6,R14                                              0590
*   R8=0;                           /* CLEAR FLAG REGISTER   @Z40FPXA*/
*                                                                  0591
         SLR   R8,R8                                               0591
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK IF LOCAL LOCK IS CURRENTLY HELD, IF SO SKIP OBTAIN AND  */
*   /* DO GETMAIN DIRECTLY                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0592
*   GEN(SETLOCK TEST,TYPE=LOCAL,BRANCH=(NOTHELD,GETLOCK));/* @Z40FPXA*/
*                                                                  0592
         SETLOCK TEST,TYPE=LOCAL,BRANCH=(NOTHELD,GETLOCK)
*   /*****************************************************************/
*   /*                                                               */
*   /* LOCK IS HELD, GET STORAGE FOR 4 CELLS                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0593
*   R8=1;                           /* SET LOCK HELD FLAG    @Z40FPXA*/
         LA    R8,1                                                0593
*   GOTO HAVELOCK;                  /* GO OBTAIN STORAGE     @Z40FPXA*/
*                                                                  0594
         B     HAVELOCK                                            0594
*   /*****************************************************************/
*   /*                                                               */
*   /* LOCK WAS NOT HELD, OBTAIN LOCAL LOCK, THEN DO GETMAIN         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0595
*GETLOCK:                                                          0595
*   R15=R13;                        /* SAVE SAVE AREA PTR    @Z40FPXA*/
GETLOCK  LR    R15,R13                                             0595
*   GEN(SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=(YES));/*    0596
*                                                            @Z40FPXA*/
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=(YES)
*   R13=R15;                        /* RESTORE SAVE AREA PTR @Z40FPXA*/
*                                                                  0597
         LR    R13,R15                                             0597
*   /*****************************************************************/
*   /*                                                               */
*   /* LOCAL LOCK HAS BEEN OBTAINED, OBTAIN 4 CELLS AND ADD TO LOCAL */
*   /* FREESCB QUEUE                                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0598
*HAVELOCK:                                                         0598
*   GEN(STM  0,3,SAVEREGS(7));      /* SAVE REGISTERS IN WA  @Z40FPXA*/
HAVELOCK STM  0,3,SAVEREGS(7)
*   REG0=(LENGTH(SCB)*4);           /* LENGTH OF FOUR SCB'S  @Z30EPXH*/
         LA    REG0,80                                             0599
*   R7=ASCBPTR;                     /*                       @Z30EPXH*/
         L     R7,ASCBPTR                                          0600
*   GEN(GETMAIN RC,LV=(0),SP=255,KEY=0,BRANCH=YES);/*        @Z30EPXH*/
         GETMAIN RC,LV=(0),SP=255,KEY=0,BRANCH=YES
*   IF R8=0 THEN                    /* NEED TO FREE LOCK?    @Z40FPXA*/
         LTR   R8,R8                                               0602
         BNZ   @RF00602                                            0602
*     DO;                                                          0603
*       R3=R13;                     /* SAVE SAVE AREA POINTER      0604
*                                                            @Z40FPXA*/
         LR    R3,R13                                              0604
*       GEN REFS(CVT,CVTCRMN,PSALITA,SAVEREGS)                     0605
*           (SETLOCK  RELEASE,TYPE=LOCAL,RELATED=(YES));/*   @Z40FPXA*/
         SETLOCK  RELEASE,TYPE=LOCAL,RELATED=(YES)
*       R13=R3;                     /* RESTORE SAVE AREA POINTER   0606
*                                                            @Z40FPXA*/
         LR    R13,R3                                              0606
*     END;                                                         0607
*   RFY                                                            0608
*    (R14,                                                         0608
*     R15) RSTD;                                                   0608
@RF00602 DS    0H                                                  0609
*   R14=R6;                         /* RESTORE RETURN ADDR   @Z40FPXA*/
         LR    R14,R6                                              0609
*   R7=WSALSTAE;                    /* ADDRESS OF SAVE AREA  @Z40FPXA*/
         L     @12,ASCBPTR                                         0610
         L     @12,ASXBPTR(,@12)                                   0610
         L     @12,ASXBSPSA(,@12)                                  0610
         L     R7,WSALSTAE(,@12)                                   0610
*   IF R15=0 THEN                   /* SUCCESSFUL?           @Z30EPXH*/
         LTR   R15,R15                                             0611
         BNZ   @RF00611                                            0611
*     DO;                           /*                       @Z30EPXH*/
*       DO REG0=3 TO 0 BY-1;        /*                       @Z30EPXH*/
         LA    REG0,3                                              0613
@DL00613 DS    0H                                                  0614
*BLDLOOP:                                                          0614
*         R3=FREESCBQ;              /* CURRENT ANCHOR PTR    @Z40FPXA*/
BLDLOOP  L     R3,FREESCBQ(,R7)                                    0614
*         R1->SCBCHAIN=R3;          /* MAINTAIN CHAIN PTR    @Z40FPXA*/
         ST    R3,SCBCHAIN(,R1)                                    0615
*         CS(R3,R1,FREESCBQ);       /* ADD TO CHAIN          @Z40FPXA*/
         CS    R3,@01,FREESCBQ(R7)                                 0616
*         BC(7,BLDLOOP);            /* TRY AGAIN IF MISSED   @Z40FPXA*/
         BC    7,BLDLOOP                                           0617
*         R1=R1+LENGTH(SCB);        /* UPDATE POINTER        @Z40FPXA*/
         AL    R1,@CF00086                                         0618
*       END;                        /*                       @Z30EPXH*/
         BCTR  REG0,0                                              0619
         LTR   REG0,REG0                                           0619
         BNM   @DL00613                                            0619
*     END;                          /*                       @Z30EPXH*/
*   ELSE                            /*                       @Z30EPXH*/
*                                                                  0621
*     /***************************************************************/
*     /*                                                             */
*     /* GETMAIN WAS NOT SUCCESSFUL SET RETURN CODE          @Z30EPXH*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0621
*     DO;                           /*                       @Z30EPXH*/
*                                                                  0621
         B     @RC00611                                            0621
@RF00611 DS    0H                                                  0622
*       /*************************************************************/
*       /*                                                           */
*       /* DETERMINE IF GETMAIN FAILED ATTEMPTING TO OBTAIN WORK AREA*/
*       /* FOR BRANCH ENTRY                                          */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0622
*       IF R9=0 THEN                /* NO WORK AREA?         @Z40FPXA*/
         LTR   R9,R9                                               0622
         BNZ   @RF00622                                            0622
*         DO;                                                      0623
*           R15=20;                 /* SET RET CODE 20       @Z40FPXA*/
         LA    R15,20                                              0624
*           GOTO NOWORKA;           /* RETURN TO CALLER      @Z40FPXA*/
         B     NOWORKA                                             0625
*         END;                                                     0626
*       GEN(LM    0,3,SAVEREGS(7)); /* RESTORE REGISTERS     @Z40FPXA*/
@RF00622 DS    0H                                                  0627
         LM    0,3,SAVEREGS(7)
*       IF ESTAESTA='1'B THEN       /* ESTA REQUEST?         @Z30EPXH*/
         TM    ESTAESTA(R1),B'00010000'                            0628
         BNO   @RF00628                                            0628
*         DO;                       /* SET RETURN CODE 20            */
*           RETCOD=20;              /* PRIME FIELD           @Z40FPXA*/
         MVI   RETCOD(R9),X'14'                                    0630
*           GOTO RETN;              /* ISSUE RETURN CODE 20  @Z40FPXA*/
         B     RETN                                                0631
*         END;                                                     0632
*       ELSE                        /*                       @Z30EPXH*/
*         GOTO RETCOD4;             /* ISSUE RETURN CODE 4   @Z40FPXA*/
*     END;                          /*                       @Z30EPXH*/
*   GEN(LM  0,3,SAVEREGS(7));       /* RESTORE REGISTERS     @Z40FPXA*/
@RC00611 DS    0H                                                  0635
         LM  0,3,SAVEREGS(7)
*   END;                            /*                       @Z30EPXH*/
@EL00010 DS    0H                                                  0636
@EF00010 DS    0H                                                  0636
@ER00010 BR    @14                                                 0636
*INVALID:                                                          0637
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0637
*                                                                  0637
INVALID  DS    0H                                                  0638
*   /*****************************************************************/
*   /*                                                               */
*   /* ONCE THIS ROUTINE IS ENTERED AND ABEND IS ISSUED SVC 60 ENDS  */
*   /* ITS PROCESSING FOR THIS REQUEST THIS IS IN EFFECT AN EXIT FROM*/
*   /* SVC 60 THIS ROUTINE ABENDS INVALID REQUESTS-BEFORE ENTRY A    */
*   /* REASON CODE IS PLACED IN REG 15                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0638
*   IF TCBSTAFX='1'B THEN           /* ALLOW                 @ZA24347*/
         TM    TCBSTAFX(TCBPTR),B'01000000'                        0638
         BNO   @RF00638                                            0638
*     DO;                           /* ASYNCRONOUS           @ZA24347*/
*       TCBFX='0'B;                 /* INTERRUPTS.           @ZA24347*/
         NI    TCBFX(TCBPTR),B'11111110'                           0640
*       TCBSTAFX='0'B;              /*                       @ZA24347*/
         NI    TCBSTAFX(TCBPTR),B'10111111'                        0641
*     END;                          /*                       @ZA24347*/
*   ELSE                                                           0643
*     ;                             /*                       @ZA24347*/
@RF00638 DS    0H                                                  0644
*   TCBSTAWA=0;                     /* CLEAR ESTAE IN PROCESS FLAG 0644
*                                                            @Z40FPXA*/
         SLR   @12,@12                                             0644
         ST    @12,TCBSTAWA(,TCBPTR)                               0644
*   R15=REASON;                     /* PLACE ABEND REASON CODE IN REG
*                                      15                            */
*                                                                  0645
         SLR   R15,R15                                             0645
         IC    R15,REASON(,R9)                                     0645
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE ABEND                                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0646
*   GENERATE;                                                      0646
         ABEND 316,DUMP,,SYSTEM
*   END INVALID;                                                   0647
@EL00011 DS    0H                                                  0647
@EF00011 DS    0H                                                  0647
@ER00011 BR    @14                                                 0647
*   END IGC00060                                                   0648
*                                                                  0648
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSUT5  (TA0SPEC )                                       */
*/*%INCLUDE SYSUT5  (TA0DCL  )                                       */
*/*%INCLUDE SYSLIB  (IHAESTA )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHAFRRS )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IHARB   )                                       */
*/*%INCLUDE SYSLIB  (IKJRB   )                                       */
*/*%INCLUDE SYSLIB  (IHASCB  )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IHAASXB )                                       */
*/*%INCLUDE SYSLIB  (IHAWSAVT)                                       */
*/*%INCLUDE SYSUT5  (SVCVALRQ)                                       */
*/*%INCLUDE SYSUT5  (COPYPARM)                                       */
*/*%INCLUDE SYSUT5  (REQTYPE )                                       */
*/*%INCLUDE SYSUT5  (STIVALRQ)                                       */
*/*%INCLUDE SYSUT5  (ADDRCK  )                                       */
*/*%INCLUDE SYSUT5  (CANOV   )                                       */
*/*%INCLUDE SYSUT5  (STACOVAL)                                       */
*/*%INCLUDE SYSUT5  (ESTRVREQ)                                       */
*/*%INCLUDE SYSUT5  (ESTIVLRQ)                                       */
*/*%INCLUDE SYSUT5  (BRVALCAL)                                       */
*/*%INCLUDE SYSUT5  (BRVALREQ)                                       */
*/*%INCLUDE SYSUT5  (PERFMREQ)                                       */
*/*%INCLUDE SYSUT5  (SCBSRCH )                                       */
*/*%INCLUDE SYSUT5  (ESTCOVAL)                                       */
*/*%INCLUDE SYSUT5  (VERATTCH)                                       */
*/*%INCLUDE SYSUT5  (CANCEL  )                                       */
*/*%INCLUDE SYSUT5  (OVERLAY )                                       */
*/*%INCLUDE SYSUT5  (CREATE  )                                       */
*/*%INCLUDE SYSUT5  (COMPLSCB)                                       */
*/*%INCLUDE SYSUT5  (KEYSTATE)                                       */
*/*%INCLUDE SYSUT5  (PROPA   )                                       */
*/*%INCLUDE SYSUT5  (GETSTOR )                                       */
*/*%INCLUDE SYSUT5  (INVALID )                                       */
*                                                                  0648
*       ;                                                          0648
@DATA    DS    0H
@DATD    DSECT
         DS    0F
IGC00060 CSECT
         DS    0F
@CF00086 DC    F'20'
@CF02220 DC    F'-8'
@DATD    DSECT
         DS    0D
@ENDDATD EQU   *
IGC00060 CSECT
         NOPR  ((@ENDDATD-@DATD)*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CB02152 DC    X'002A'
TA0PATCH DS    CL30
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
R1       EQU   @01
REG0     EQU   @00
XCTLIN   EQU   @01
R2       EQU   @02
R3       EQU   @03
TCBPTR   EQU   @04
RBSECPTR EQU   @05
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
R10      EQU   @10
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
R11      EQU   @11
R12      EQU   @12
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
ESTA     EQU   0
ESTAEXT  EQU   ESTA
ESTAFLG1 EQU   ESTAEXT
ESTASTAI EQU   ESTAFLG1
ESTASTAR EQU   ESTAFLG1
ESTAESTA EQU   ESTAFLG1
ESTAIO   EQU   ESTAFLG1
ESTAEXIT EQU   ESTAEXT+1
ESTAOWNR EQU   ESTA+8
ESTAFGRS EQU   ESTA+12
ESTAFLG2 EQU   ESTAFGRS
ESTAWORK EQU   0
SAVEREGS EQU   ESTAWORK+72
FREESCBQ EQU   ESTAWORK+108
ESTAWRK  EQU   0
WORK1    EQU   ESTAWRK+4
WORK2    EQU   ESTAWRK+8
WKWORD   EQU   ESTAWRK+12
RETCOD   EQU   WKWORD
REASON   EQU   RETCOD
@NM00009 EQU   WKWORD+2
FESTAFLG EQU   @NM00009
CANCELFL EQU   @NM00009
BRENTFLG EQU   @NM00009
ABNDFLG  EQU   @NM00009
FC       EQU   WKWORD+3
R14SAVE  EQU   ESTAWRK+16
@NM00017 EQU   0
FRRS     EQU   0
FRRSHEAD EQU   FRRS
FRRSCURR EQU   FRRSHEAD+12
FRRSENTR EQU   0
FRRSFLGS EQU   FRRSENTR+4
FRRSFLG1 EQU   FRRSFLGS
CVTMAP   EQU   0
CVT      EQU   CVTMAP
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBRBP   EQU   TCB
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFX    EQU   TCBFLGS1
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBSTABE EQU   TCBNSTAE
TCBSTABB EQU   TCBSTAB+1
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBXSCT  EQU   TCB+240
TCBXSCT1 EQU   TCBXSCT
TCBFOE   EQU   TCB+244
TCBSTAWA EQU   TCB+252
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBETERM EQU   TCBESTRM
TCBSTAFX EQU   TCBESTRM
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
RBPRFX   EQU   0
RBBASIC  EQU   0
RBEXRTNM EQU   RBBASIC
RBTMFLD  EQU   RBEXRTNM
RBSTAB   EQU   RBBASIC+10
XSTAB    EQU   RBSTAB
RBSTAB1  EQU   XSTAB
XSTAB1   EQU   RBSTAB1
RBFTCKPT EQU   XSTAB1
RBSTAB2  EQU   XSTAB+1
XSTAB2   EQU   RBSTAB2
RBTCBNXT EQU   XSTAB2
RBFACTV  EQU   XSTAB2
RBFDYN   EQU   XSTAB2
RBECBWT  EQU   XSTAB2
RBOPSW   EQU   RBBASIC+16
XRBPSW   EQU   RBOPSW
RBOPSWB2 EQU   XRBPSW+1
RBLINK   EQU   RBBASIC+28
XRBLNK   EQU   RBLINK
RBWCF    EQU   XRBLNK
RBLINKB  EQU   XRBLNK+1
RBGRSAVE EQU   RBBASIC+32
XRBREG   EQU   RBGRSAVE
RBGRS0   EQU   XRBREG
RBGRS1   EQU   XRBREG+4
RBGRS2   EQU   XRBREG+8
RBGRS3   EQU   XRBREG+12
RBGRS4   EQU   XRBREG+16
RBGRS5   EQU   XRBREG+20
RBGRS6   EQU   XRBREG+24
RBGRS7   EQU   XRBREG+28
RBGRS8   EQU   XRBREG+32
RBGRS9   EQU   XRBREG+36
RBGRS10  EQU   XRBREG+40
RBGRS11  EQU   XRBREG+44
RBGRS12  EQU   XRBREG+48
RBGRS13  EQU   XRBREG+52
RBGRS14  EQU   XRBREG+56
RBGRS15  EQU   XRBREG+60
XRBESA   EQU   RBBASIC+96
RBPREFIX EQU   0
RBRSV019 EQU   RBPREFIX+14
RBRSV028 EQU   RBPREFIX+15
RBRSV041 EQU   RBPREFIX+27
RBRSV054 EQU   RBPREFIX+39
RBRTOPSW EQU   RBPREFIX+40
RBRTPSW2 EQU   RBRTOPSW+8
RBRTICIL EQU   RBRTPSW2
RBFLAGS1 EQU   RBPREFIX+56
RBSCB    EQU   RBFLAGS1
RBINTCDA EQU   RBPREFIX+61
RBINTCOD EQU   RBINTCDA+1
RBSECT   EQU   0
RBPPSAV  EQU   RBSECT
@NM00062 EQU   RBSECT+10
@NM00063 EQU   @NM00062
RBTRSVRB EQU   @NM00063
@NM00065 EQU   @NM00062+1
RBETXR   EQU   @NM00065
RBEP     EQU   RBSECT+12
RBPGMQ   EQU   RBSECT+24
@NM00072 EQU   RBSECT+28
@NM00073 EQU   @NM00072
IRBEND   EQU   RBSECT+96
@NM00076 EQU   RBSECT+96
RBRSV138 EQU   @NM00076+7
RBSCBB   EQU   RBSECT+144
RBSPARM  EQU   RBSCBB+8
RBSFLGS1 EQU   RBSPARM
RBSIOPRC EQU   RBSFLGS1
RBSOWNR  EQU   RBSCBB+12
RBSFLGS2 EQU   RBSOWNR
RBSDATA  EQU   RBSCBB+16
RBSFLG3  EQU   RBSDATA
RBRSV150 EQU   RBSECT+167
RBFEPARM EQU   RBSECT+168
SCB      EQU   0
SCBCHAIN EQU   SCB
SCBEXIT  EQU   SCB+4
SCBPARM  EQU   SCB+8
SCBFLGS1 EQU   SCBPARM
SCBSTAI  EQU   SCBFLGS1
SCBSTAR  EQU   SCBFLGS1
SCBESTAE EQU   SCBFLGS1
SCBIOPRC EQU   SCBFLGS1
SCBOWNR  EQU   SCB+12
SCBFLGS2 EQU   SCBOWNR
SCBXCTL2 EQU   SCBFLGS2
SCBINUSE EQU   SCBFLGS2
SCBKEY0  EQU   SCBFLGS2
SCBSUPER EQU   SCBFLGS2
SCBOWNRA EQU   SCBOWNR+1
SCBDATA  EQU   SCB+16
SCBFLGS3 EQU   SCBDATA
SCBTERMI EQU   SCBFLGS3
SCBCNCEL EQU   SCBFLGS3
SCBBRNTR EQU   SCBFLGS3
SCBPKEY  EQU   SCBDATA+1
SCBID    EQU   SCBDATA+2
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBRSM  EQU   ASCB+52
ASCBRSMF EQU   ASCBRSM
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBASXB EQU   ASCB+108
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
ASXB     EQU   0
ASXBSPSA EQU   ASXB+112
ASXBAEQ  EQU   ASXB+168
ASXBSECR EQU   ASXB+199
ASCBSFLG EQU   ASXBSECR
ASXBCASW EQU   ASXB+216
ASXBCRB1 EQU   ASXBCASW
WSAL     EQU   0
WSALSTAE EQU   WSAL+44
ESTATST  EQU   0
STPSW    EQU   RBOPSW
KEYWMP   EQU   STPSW+1
PPMODE   EQU   KEYWMP
CVTPTR   EQU   FLCCVT
ASCBPTR  EQU   PSAAOLD
ASXBPTR  EQU   ASCBASXB
PSARSVTE EQU   PSARSVT
PSACSTK  EQU   PSARSVTE
FRRSPTR  EQU   PSACSTK
FRREPTR  EQU   FRRSCURR
@NM00013 EQU   SCBEXIT
SCBEXT   EQU   @NM00013+1
@NM00015 EQU   SCBCHAIN
ESTAFLDS EQU   ESTAEXIT
SCBFLDS  EQU   SCBEXT
SCBCLEAR EQU   SCBFLGS1
CVTS01   EQU   CVTPGSIA
CVTPVTP  EQU   CVTS01+8
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTCRMN  EQU   CVTS01+156
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
RBSECS03 EQU   RBEP
RBCDE    EQU   RBSECS03
RBCDFLGS EQU   RBCDE
RBSECS05 EQU   RBPGMQ
RBSQE    EQU   RBSECS05
RBSECS06 EQU   RBPGMQ
RBIQE    EQU   RBSECS06
RBSECS07 EQU   RBPGMQ
RBIQE2   EQU   RBSECS07
RBSECS08 EQU   IRBEND
RBSECS09 EQU   IRBEND
FLC      EQU   PSA
PVTPTR   EQU   CVTPVTP
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
RBRSV161 EQU   RBSECS09+64
RBSIRBWA EQU   RBSECS09
RBIQEWRK EQU   RBSECS08+4
RBNEXAV  EQU   RBSECS08
RBIQEA   EQU   RBIQE2
RBIQE1   EQU   RBIQE+1
RBUSE    EQU   RBIQE
RBSQEA   EQU   RBSQE+1
@NM00077 EQU   RBSQE
RBCDE1   EQU   RBCDE+1
RBCDLOAD EQU   RBCDFLGS
RBCDXCTL EQU   RBCDFLGS
RBCDSYNC EQU   RBCDFLGS
RBCDNODE EQU   RBCDFLGS
RBCDSAVE EQU   RBCDFLGS
RBCDATCH EQU   RBCDFLGS
RBRSV009 EQU   RBCDFLGS
RBNOCELL EQU   RBCDFLGS
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
SCBCHN   EQU   @NM00015+1
@NM00016 EQU   @NM00015
@NM00014 EQU   @NM00013
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
@NM00012 EQU   STPSW+2
@NM00011 EQU   KEYWMP
PKEY     EQU   KEYWMP
MASKS    EQU   STPSW
WSALACHP EQU   WSAL+56
WSALRSM  EQU   WSAL+52
WSALEVNT EQU   WSAL+48
WSALSTAT EQU   WSAL+40
WSALWAIT EQU   WSAL+36
WSALPOST EQU   WSAL+32
WSALEXIT EQU   WSAL+28
WSALS2EE EQU   WSAL+24
WSALCIRB EQU   WSAL+20
WSALABTM EQU   WSAL+16
WSALSDMP EQU   WSAL+12
WSALRTM2 EQU   WSAL+8
WSALVALC EQU   WSAL+4
WSALCWSA EQU   WSAL
ASXBEND  EQU   ASXB+232
ASXBRV25 EQU   ASXB+228
ASXBRV24 EQU   ASXB+224
ASXBPT0E EQU   ASXB+220
ASXBCRB4 EQU   ASXBCASW+3
ASXBCRB3 EQU   ASXBCASW+2
ASXBCRB2 EQU   ASXBCASW+1
ASXBCR06 EQU   ASXBCRB1
ASXBCR05 EQU   ASXBCRB1
ASXBCR04 EQU   ASXBCRB1
ASXBCR03 EQU   ASXBCRB1
ASXBCR02 EQU   ASXBCRB1
ASXBCR01 EQU   ASXBCRB1
ASXBTFD  EQU   ASXBCRB1
ASXBPIP  EQU   ASXBCRB1
ASXBCTDC EQU   ASXB+212
ASXBTDCB EQU   ASXB+208
ASXBRV19 EQU   ASXB+204
ASXBSENV EQU   ASXBSECR+1
ASXBRV34 EQU   ASCBSFLG
ASXBRV33 EQU   ASCBSFLG
ASXBRV32 EQU   ASCBSFLG
ASXBRV31 EQU   ASCBSFLG
ASXBRV30 EQU   ASCBSFLG
ASXBRV29 EQU   ASCBSFLG
ASXBRV28 EQU   ASCBSFLG
ASXBRV27 EQU   ASCBSFLG
ASXBUSER EQU   ASXB+192
ASXBLSRB EQU   ASXBAEQ+20
ASXBFSRB EQU   ASXBAEQ+16
ASXBLRQE EQU   ASXBAEQ+12
ASXBFRQE EQU   ASXBAEQ+8
ASXBLIQE EQU   ASXBAEQ+4
ASXBFIQE EQU   ASXBAEQ
ASXBETSK EQU   ASXB+164
ASXBSIRB EQU   ASXB+160
ASXBPSWD EQU   ASXB+152
ASXBPRG  EQU   ASXB+136
ASXBRV26 EQU   ASXB+132
ASXBOUSB EQU   ASXB+128
ASXBDDR  EQU   ASXB+124
ASXBRCTD EQU   ASXB+120
ASXBRSMD EQU   ASXB+116
ASXBFRWA EQU   ASXB+108
ASXBFLSA EQU   ASXB+36
ASXBIHSA EQU   ASXB+32
ASXBRV15 EQU   ASXB+28
ASXBRV14 EQU   ASXB+24
ASXBLWA  EQU   ASXB+20
ASXBMPST EQU   ASXB+16
ASXBRS00 EQU   ASXB+14
ASXBTCBS EQU   ASXB+12
ASXBLTCB EQU   ASXB+8
ASXBFTCB EQU   ASXB+4
ASXBASXB EQU   ASXB
ASXBEGIN EQU   ASXB
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSMA EQU   ASCBRSM+1
ASCBRV54 EQU   ASCBRSMF
ASCBRV53 EQU   ASCBRSMF
ASCBRV52 EQU   ASCBRSMF
ASCBRV51 EQU   ASCBRSMF
ASCBVEQR EQU   ASCBRSMF
ASCBN2LP EQU   ASCBRSMF
ASCB1LPU EQU   ASCBRSMF
ASCB2LPU EQU   ASCBRSMF
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
SCBRSVRE EQU   SCBDATA+3
@NM00084 EQU   SCBFLGS3
SCBTERMO EQU   SCBFLGS3
SCBPRNTR EQU   SCBFLGS3
SCBRECRD EQU   SCBFLGS3
@NM00083 EQU   SCBFLGS3
@NM00082 EQU   SCBFLGS2
@NM00081 EQU   SCBFLGS2
@NM00080 EQU   SCBFLGS2
@NM00079 EQU   SCBFLGS2
SCBPARMA EQU   SCBPARM+1
SCBHALT  EQU   SCBIOPRC
SCBNOIOP EQU   SCBIOPRC
SCBASYNC EQU   SCBFLGS1
@NM00078 EQU   SCBFLGS1
SCBDUMMY EQU   SCBFLGS1
SVRBEND  EQU   RBSECT+192
SIRBEND  EQU   RBSECT+168
RBRSV158 EQU   RBRSV150
RBRSV157 EQU   RBRSV150
RBRSV156 EQU   RBRSV150
RBRSV155 EQU   RBRSV150
RBRSV154 EQU   RBRSV150
RBRSV153 EQU   RBRSV150
RBRSV152 EQU   RBRSV150
RBRSV151 EQU   RBRSV150
RBRSV149 EQU   RBSECT+166
RBRSV148 EQU   RBSECT+164
RBRSV169 EQU   RBSDATA+3
RBSID    EQU   RBSDATA+2
RBSPKEY  EQU   RBSDATA+1
RBRSV168 EQU   RBSFLG3
RBSTERMO EQU   RBSFLG3
RBSBRNTR EQU   RBSFLG3
RBSPRNTR EQU   RBSFLG3
RBSCNCEL EQU   RBSFLG3
RBSRECRD EQU   RBSFLG3
RBSTERMI EQU   RBSFLG3
RBRSV167 EQU   RBSFLG3
RBSOWNRA EQU   RBSOWNR+1
RBSSUPER EQU   RBSFLGS2
RBSKEY0  EQU   RBSFLGS2
RBRSV166 EQU   RBSFLGS2
RBRSV165 EQU   RBSFLGS2
RBSINUSE EQU   RBSFLGS2
RBRSV164 EQU   RBSFLGS2
RBSXCTL2 EQU   RBSFLGS2
RBRSV163 EQU   RBSFLGS2
RBSPARMA EQU   RBSPARM+1
RBSHALT  EQU   RBSIOPRC
RBSNOIOP EQU   RBSIOPRC
RBSASYNC EQU   RBSFLGS1
RBRSV162 EQU   RBSFLGS1
RBSESTAE EQU   RBSFLGS1
RBSDUMMY EQU   RBSFLGS1
RBSSTAR  EQU   RBSFLGS1
RBSSTAI  EQU   RBSFLGS1
RBSEXIT  EQU   RBSCBB+4
RBSCHAIN EQU   RBSCBB
TIRBEND  EQU   @NM00076+8
PRBEND   EQU   @NM00076+8
RBRSV146 EQU   RBRSV138
RBRSV145 EQU   RBRSV138
RBRSV144 EQU   RBRSV138
RBRSV143 EQU   RBRSV138
RBRSV142 EQU   RBRSV138
RBRSV141 EQU   RBRSV138
RBRSV140 EQU   RBRSV138
RBRSV139 EQU   RBRSV138
RBRSV137 EQU   @NM00076+6
RBRSV136 EQU   @NM00076+4
RBRSV135 EQU   @NM00076
@NM00075 EQU   RBSECT+32
@NM00074 EQU   @NM00072+1
RBSCF    EQU   @NM00073
RBPGMQ1  EQU   RBPGMQ+1
@NM00071 EQU   RBPGMQ
@NM00070 EQU   RBSECT+16
@NM00069 EQU   @NM00065
@NM00068 EQU   @NM00065
RBIQETP  EQU   @NM00065
RBUSIQE  EQU   RBETXR
RBATTN   EQU   @NM00065
@NM00067 EQU   @NM00065
@NM00066 EQU   @NM00065
RBPMSVRB EQU   @NM00063
RBATNXIT EQU   @NM00063
@NM00064 EQU   @NM00063
RBWAITP  EQU   @NM00063
RBFNSVRB EQU   RBTRSVRB
RBFTP    EQU   @NM00063
RBSIZE   EQU   RBSECT+8
RBABOPSW EQU   RBSECT+4
RBPPSAV1 EQU   RBPPSAV+1
@NM00061 EQU   RBPPSAV
RBPRFXND EQU   RBPREFIX+64
RBINLNTH EQU   RBINTCDA
RBWCSA   EQU   RBPREFIX+60
RBRSV004 EQU   RBPREFIX+57
RBSSSYN  EQU   RBFLAGS1
RBLONGWT EQU   RBFLAGS1
RBASIR   EQU   RBFLAGS1
RBRSV159 EQU   RBFLAGS1
RBABEND  EQU   RBFLAGS1
RBXWAIT  EQU   RBFLAGS1
RBSLOCK  EQU   RBFLAGS1
RBRTRAN  EQU   RBRTPSW2+4
RBRTINCD EQU   RBRTICIL+2
RBRTILC  EQU   RBRTICIL+1
RBRSV160 EQU   RBRTICIL
RBRTPSW1 EQU   RBRTOPSW
RBRSV062 EQU   RBRSV054
RBRSV061 EQU   RBRSV054
RBRSV060 EQU   RBRSV054
RBRSV059 EQU   RBRSV054
RBRSV058 EQU   RBRSV054
RBRSV057 EQU   RBRSV054
RBRSV056 EQU   RBRSV054
RBRSV055 EQU   RBRSV054
RBRSV053 EQU   RBPREFIX+38
RBRSV052 EQU   RBPREFIX+36
RBRSV051 EQU   RBPREFIX+32
RBPRFXST EQU   RBPREFIX+32
RBRSV050 EQU   RBPREFIX+28
RBRSV049 EQU   RBRSV041
RBRSV048 EQU   RBRSV041
RBRSV047 EQU   RBRSV041
RBRSV046 EQU   RBRSV041
RBRSV045 EQU   RBRSV041
RBRSV044 EQU   RBRSV041
RBRSV043 EQU   RBRSV041
RBRSV042 EQU   RBRSV041
RBRSV040 EQU   RBPREFIX+26
RBRSV039 EQU   RBPREFIX+24
RBRSV038 EQU   RBPREFIX+20
RBRSV037 EQU   RBPREFIX+16
RBRSV036 EQU   RBRSV028
RBRSV035 EQU   RBRSV028
RBRSV034 EQU   RBRSV028
RBRSV033 EQU   RBRSV028
RBRSV032 EQU   RBRSV028
RBRSV031 EQU   RBRSV028
RBRSV030 EQU   RBRSV028
RBRSV029 EQU   RBRSV028
RBRSV027 EQU   RBRSV019
RBRSV026 EQU   RBRSV019
RBRSV025 EQU   RBRSV019
RBRSV024 EQU   RBRSV019
RBRSV023 EQU   RBRSV019
RBRSV022 EQU   RBRSV019
RBRSV021 EQU   RBRSV019
RBRSV020 EQU   RBRSV019
RBRSV018 EQU   RBPREFIX+13
RBRSV017 EQU   RBPREFIX+12
RBSRV016 EQU   RBPREFIX+11
RBRSV015 EQU   RBPREFIX+10
RBRSV014 EQU   RBPREFIX+8
RBRSV013 EQU   RBPREFIX+4
RBRSV012 EQU   RBPREFIX
RBEXSAVE EQU   XRBESA
XRBREG15 EQU   RBGRS15
XRBREG14 EQU   RBGRS14
XRBREG13 EQU   RBGRS13
XRBREG12 EQU   RBGRS12
XRBREG11 EQU   RBGRS11
XRBREG10 EQU   RBGRS10
XRBREG9  EQU   RBGRS9
XRBREG8  EQU   RBGRS8
XRBREG7  EQU   RBGRS7
XRBREG6  EQU   RBGRS6
XRBREG5  EQU   RBGRS5
XRBREG4  EQU   RBGRS4
XRBREG3  EQU   RBGRS3
XRBREG2  EQU   RBGRS2
XRBREG1  EQU   RBGRS1
XRBREG0  EQU   RBGRS0
XRBLNKA  EQU   RBLINKB
XRBWT    EQU   RBWCF
@NM00060 EQU   RBBASIC+24
RBOPSWPS EQU   RBOPSWB2
@NM00059 EQU   RBOPSWB2
@NM00058 EQU   XRBPSW
@NM00057 EQU   RBBASIC+12
XRBWAIT  EQU   RBECBWT
XRBFRRB  EQU   RBFDYN
@NM00056 EQU   XSTAB2
XRBACTV  EQU   RBFACTV
XRBTCBP  EQU   RBTCBNXT
@NM00055 EQU   XSTAB1
XRBCKPT  EQU   RBFTCKPT
@NM00054 EQU   XSTAB1
@NM00053 EQU   RBBASIC+8
@NM00052 EQU   RBEXRTNM+1
RBTMIND3 EQU   RBTMFLD
RBTMIND2 EQU   RBTMFLD
RBTMCMP  EQU   RBTMFLD
RBWLIM   EQU   RBTMFLD
RBRSV005 EQU   RBTMFLD
RBTMTOD  EQU   RBTMFLD
RBTMQUE  EQU   RBTMFLD
@NM00051 EQU   RBPRFX
@NM00050 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBCAUF  EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00049 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBRV327 EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBRV326 EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBCCPVI EQU   TCBXSCT+2
TCBRV325 EQU   TCBXSCT+1
TCBRV324 EQU   TCBXSCT1
TCBRV323 EQU   TCBXSCT1
TCBRV322 EQU   TCBXSCT1
TCBRV321 EQU   TCBXSCT1
TCBRV320 EQU   TCBXSCT1
TCBRV319 EQU   TCBXSCT1
TCBS3A   EQU   TCBXSCT1
TCBACTIV EQU   TCBXSCT1
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00048 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00047 EQU   TCBPMASK
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00046 EQU   CVTFIX+248
@NM00045 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
FRRSPARM EQU   FRRSENTR+8
@NM00044 EQU   FRRSFLGS+1
@NM00043 EQU   FRRSFLG1
FRRSNEST EQU   FRRSFLG1
FRRSRCUR EQU   FRRSFLG1
FRRSFRRA EQU   FRRSENTR
FRRSENTS EQU   FRRS+84
FRRSRTMW EQU   FRRS+16
FRRSELEN EQU   FRRSHEAD+8
FRRSLAST EQU   FRRSHEAD+4
FRRSEMP  EQU   FRRSHEAD
ESTAFLGA EQU   @NM00017+12
@NM00018 EQU   @NM00017
NEWPRMS  EQU   @NM00009
@NM00010 EQU   @NM00009
@NM00008 EQU   WKWORD+1
@NM00007 EQU   ESTAWRK
@NM00006 EQU   ESTAWORK+88
GRSVEARA EQU   ESTAWORK
ESTARSVI EQU   ESTAFGRS+1
@NM00005 EQU   ESTAFLG2
ESTABRNT EQU   ESTAFLG2
@NM00004 EQU   ESTAFLG2
ESTAEREC EQU   ESTAFLG2
ESTATERM EQU   ESTAFLG2
@NM00003 EQU   ESTAFLG2
ESTAPARM EQU   ESTA+4
ESTAHALT EQU   ESTAIO
ESTANOIO EQU   ESTAIO
ESTASYNC EQU   ESTAFLG1
@NM00002 EQU   ESTAFLG1
@NM00001 EQU   ESTAFLG1
@NM00042 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00041 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00040 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00039 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSAULCMS EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00038 EQU   FLCFSA
@NM00037 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00036 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00035 EQU   FLCIOA
@NM00034 EQU   FLCMCLA+15
@NM00033 EQU   FLCMCLA+14
@NM00032 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00031 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00030 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00029 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00028 EQU   FLCPER
@NM00027 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00026 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00025 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00024 EQU   FLCPIILC
@NM00023 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00022 EQU   FLCSVILC
@NM00021 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00020 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00019 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00096 EQU   PROPROC
@RC00112 EQU   @RC00110
@RF00127 EQU   @RC00103
@RF00129 EQU   @RC00103
@RF00157 EQU   @RC00155
@RT00163 EQU   RETCOD8
@RT00165 EQU   RETCOD8
@RT00167 EQU   RETCOD10
@RT00169 EQU   RETCOD10
@RT00174 EQU   PERFCAN
@RF00211 EQU   PERFORM
@RC00336 EQU   @EL00001
@RT00348 EQU   @EL00002
@RC00350 EQU   @EL00002
@RT00367 EQU   CKRC4
@RT00369 EQU   CKRC4
@RT00373 EQU   @EL00003
@RT00377 EQU   @EL00003
@RF00380 EQU   RETCODC
@RT00389 EQU   CKABND
@RT00391 EQU   CKABND
@RT00393 EQU   CKABND
@RF00397 EQU   RETCODC
@RC00421 EQU   @EL00005
@RC00490 EQU   @EC00515
@RF00510 EQU   @EC00515
@RF00628 EQU   RETCOD4
@ENDDATA EQU   *
         END   IGC00060,(C'PLS1306',0800,78081)
