BERE     TITLE 'TSO EDIT COMMAND  RENUM SUBCOMMAND  IKJEBERE'
IKJEBERE CSECT
*A078800,216500,507700-507800,839300                             A42941
*C154800,175500,455600-455700                                    A42941
*A089600-090100,134620-134800,166520-167059,187700-189200        A45155
*A233300-233700,236700-238700,277700-280100,537800-538300        A45155
*A790220-794020,853210-853510,854200-854300,864100-864400        A45155
*A885620-886480                                                  A45155
*C106200,134600,157500,272700-273600,511200,552600,790200,914400 A45155
*D081000,090000-099000,188100-189900,236700-257400,278100-280800 A45155
*D538200-540900,792000-795300                                    A45155
*A574700-574800                                                  A50472
*C573300-574200                                                  A50472
*D572400,576000                                                  A50472
*A166320-166420,493300-494010                                  @YM03458
*A166414-166419                                                @YM08118
***********************************************************************
*                                                                     *
*STATUS  --  VERSION NO. 01, O/S RELEASE NO. 20                       *
*                                                                     *
*FUNCTION  --  THIS EDIT SUBCOMMAND PROCESSOR RENUMBERS PART OR ALL   *
*   OF, OR ASSIGNS LINE NUMBERS TO, THE DATA SET BEING EDITED.  IF    *
*   LINE NUMBER ASSIGNMENT FOR NON-NUMBERED RECORDS CAUSES A          *
*   RECORD TO BE TRUNCATED, A MESSAGE IS ISSUED.  IF IT CAUSES        *
*   OVERFLOW, EITHER A NEW RECORD IS CREATED FROM THE OVERFLOW (FOR   *
*   'TEXT' DATA SETS), OR THE OVERFLOW IS LOST.                       *
*                                                                     *
*   A NEW UTILITY DATA SET IS ALLOCATED, AND BECOMES THE EDIT DATA    *
*   SET UPON SUCCESSFUL RENUMBERING.  IF RENUMBERING IS UNSUCCESSFUL, *
*   THE OLD UTILITY DATA SET REMAINS THE EDIT DATA SET & THE NEW ONE  *
*   IS UNALLOCATED.                                                   *
*                                                                     *
*ENTRY POINT -- IKJEBERE                                              *
*                                                                     *
*INPUT  --  REGISTER 1 CONTAINS A POINTER TO EDIT'S COMMUNICATION     *
*   AREA, DEFINED IN THE IKJEBECA MACRO.  THIS AREA CONTAINS A        *
*  POINTER TO THE BUFFER CONTAINING THE RENUM SUBCOMMAND AND A        *
*   POINTER TO THE CURRENT UTILITY DATA CONTROL BLOCK.                *
*                                                                     *
*OUTPUT -- RETURN CODES POSSIBLE IN REGISTER 15 ARE --                *
*   00 - SUCCESSFUL OPERATION                                         *
*   08 - UNSUCCESSFUL OPERATION, FLUSH STACK                          *
*   12 - PERMANENT I/O ERROR ON UTILITY DATA SET                      *
*                                                                     *
*EXTERNAL REFERENCES  --                                              *
*       IKJPARS  - CHECKS SYNTAX OF SUBCOMMAND                        *
*       IKJEBESR - INVOKES EDIT SERVICE ROUTINES                      *
*       IKJEBEMS - SENDS MESSAGES TO USER                             *
*       IKJEBEUT - READS FROM & WRITES TO UTILITY DATA SET            *
*       IKJEBEUI - ALLOCATES & PREPARES AN OUTPUT DATA SET            *
*       IKJEBEEX - CLEANS UP & UNALLOCATES OLD UTILITY DATA SET       *
*       IKJEBEMR - RECONSTRUCTS POLISH DATASETS THROUGH SYNTAX CHKER  *
*       IKJEBERN - RENUMBERS BASIC DATA SETS                          *
*       MACROS USED --                                                *
*          IKJEBESV - GENERATES ENTRY LINKAGE ) CHAINED               *
*          IKJEBERT - GENERATES EXIT LINKAGE  )  SAVE AREAS           *
*          IKJEBECA - DUMMY SECTION FOR EDIT COMMUNICATION AREA       *
*          IKJEBEMG - BUILDS FORMATTED MESSAGE INSERTIONS             *
*          IKJEBEML - BUILDS PARM LIST FOR & CALLS IKJEBEMS           *
*          IKJEBESH - BUILDS PARM LIST AND CALLS SERVICE ROUTINES     *
*          IKJPARM  - ) CONSTRUCT PARAMETER CONTROL                   *
*          IKJIDENT - ) AND DESCRIPTOR LISTS (PCL,PDL)                *
*          IKJENDP  - ) FOR IKJPARS                                   *
*                                                                     *
*EXITS,NORMAL -- RETURN TO CALLER WITH RETURN CODE AS                 *
*   DESCRIBED UNDER OUTPUT.                                           *
*                                                                     *
*EXITS,ERROR  --  NONE                                                *
*                                                                     *
*TABLES/WORK AREAS  --                                                *
*   CASCWKA IN EDIT'S COMM AREA IS USED AS A WORK AREA.               *
*   CABFRPL IN EDIT'S COMM AREA IS USED TO FORMAT RECORDS.            *
*                                                                     *
*ATTRIBUTES  --  REFRESHABLE, ENABLED, NON-PRIVILEGED.                *
*                                                                     *
*NOTES  --  THERE IS CHARACTER-CODE INDEPENDENCE.                     *
*                                                                     *
*   THIS ROUTINE IS DESCRIBED IN PLM GY28-6773                        *
*                                                                     *
***********************************************************************
 EJECT
***********************************************************************
*                             ENTRY CODE                              *
***********************************************************************
         IKJEBESV (14,12),,*
         EJECT
 SPACE
***********************************************************************
*                             PROCESSING                              *
***********************************************************************
 SPACE
* INITIALIZE REGISTERS AND WORKAREA -
 SPACE
         LR    COMMREG,PARMREG1         KEEP PT EDIT COMM AREA
         LA    COMMREG,O(COMMREG)       ZERO HIGH ORDER BYTE
         USING IKJEBECA,COMMREG         ESTABLISH ADDRESSABILITY
         XC    REKODE(WD),REKODE        RET CODE ZERO FOR NOW
* BEFORE PROCEEDING ANY FURTHER, IF DATA LENGTH IS LESS THAN LINE NO.
* LENGTH, INFORM THE USER THAT RENUMBERING IS IMPOSSIBLE.
         SPACE
         SR    WR,WR
         IC    WR,CALENGTH              GET LINE NO. LENGTH
         LA    WR,WD(WR)                ADD LNG OF CONTROL WORD
         CH    WR,CALRECL               IS RESULT MORE THAN LRECL
         BNH   ENUFROOM                 IF NO, SKIP ERROR MSG
         MVC   RE10AREA(MSGLISTL),LIMPOSSI IF YES,ISSUE MSG
         IKJEBEML ,,,,MF=(E,RE10AREA)
         MVC   REKODE(WD),RET8          SET RC 8
         B     EGGSIT                   BRANCH TO EXIT CODE
ENUFROOM EQU   *
         SPACE
         MVI   REDATA,BLNK              BLANK INPUT AREA
         MVC   REDATA+BYTE(DATALNG),REDATA
         MVI   REMYFLAG,X'00'           ZERO CONTROL FLAG        Y02676
         SR    PDLBASE,PDLBASE          IND PARSE NOT CALLED YET
         L     LINELAST,REMAXNUM        OBTAIN HIGHEST POSSIBLE  Y02676
*                                       SEQUENCE NO. VALUE       Y02676
         LA    LINO,DEFLINUM            INITLZ NEW LINENUM TO 10
         LR    INCR,LINO                INITLZ INCREMENT TO 10
         BAL   OLDLINO,@@@@@@@@         IND NO OLD-LINENUM SPEC SO
*                                       FAR (ILC IN PSW=10,SO
*                                       REGISTER IS MADE NEGATIVE)
@@@@@@@@ EQU   *
         MVC   RECURLIN(WD),CACURNUM    SAVE CURRENT LINE REFERENCE
         MVC   RELINLIN(WD),CAIMLLNO    SAVE LAST INPUT LINE NO.
         MVC   RE1STLIN(WD),CASTNUM     SAVE STARTING LINE NO.
         TM    CACFLAG1,CANONUM         CHECK FOR NONUM DS       A45155
         BO    SETNONUM                 IF NONUM, BR TO SET      A45155
*                                       APPROPRIATE FLAG BITS    A45155
         OI    REMYFLAG,ORIGNUM         IF NUM, INDICATE DATA    A45155
*                                       SET ORIGINALLY NUMBERED  A45155
         B     OPQUEST                  BRANCH TO OPERAND SCAN   A45155
*                                       SECTION                  A45155
SETNONUM EQU   *                                                 A45155
         NI    REMYFLAG,X'FF'-ORIGNUM   DS ORIGINALLY NONUM      A45155
         NI    CACFLAG1,X'FF'-CANONUM   NEW DS WILL BE 'NUM'     A45155
 EJECT
***********************************************************************
* IF OPERANDS WERE ENTERED, CALL PARSE AND GET THEM.                  *
***********************************************************************
 SPACE
OPQUEST  EQU   *
         TM    CAPTIBFR,CAOPERND        ARE THERE OPERANDS
         BZ    REDATXCK                 IF NO,BRANCH TO PREPARE  Y02676
*                                       NEW OUTPUT DATA SET
*                                       IF YES,PREPARE FOR PARSING
         MVC   CATMPLST+PPLPCL-PPL(WD),PCL@ SET PT TO PCL
         LA    WR,CAPTPRSD              PTR TO ANSWER PLACE
         ST    WR,CATMPLST+PPLANS-PPL   SET PT TO ANSWER PLACE
         MVC   CATMPLST+PPLCBUF-PPL(WD),CAPTIBFR SET PT INPUT BFR
         ST    COMMREG,CATMPLST+PPLUWA-PPL SET USER WORK AREA    Y02676
*                                        PTR FOR VALIDITY        Y02676
*                                        CHECK EXIT ROUTINE      Y02676
         LA    PARMREG1,CATMPLST        SET PT TO PARM LIST
         LINK  EP=IKJPARS
         B     PARSBRTB(RETCDREG)       BRANCH ACCORDING TO
*                                       RETURN CODE -
PARSBRTB EQU   *
         B     PARSOK    00(SUCCESS         ) - GET ANSWER
         B     EGGSIT8   04(UNABLE TO PROMPT) - EXIT
         B     EGGSITA   08(ATTN ISSUED     ) - EXIT
         B     PARSERR   12(INVALID PARMS   ) - ISSUE ERR MSG
         B     CROWDED   16(NO SPACE        ) - ISSUE ERR MSG
         EJECT
EGGSIT8  EQU   *
         MVC   REKODE(WD),RET8          SET RC 8
         B     EGGSITA
CROWDED  EQU   *
         MVC   RE10AREA(MSGLISTL),LCROWDED
         IKJEBEML ,,,,MF=(E,RE10AREA)
         B     EGGSIT8             BRANCH TO EXIT
         EJECT
 SPACE
***********************************************************************
* INTERROGATE PARAMETER DESCRIPTOR LIST FROM PARSE                    *
***********************************************************************
 SPACE
PARSOK   EQU   *
         L     PDLBASE,CAPTPRSD         PICK UP PT PDL
         USING RENUMPDL,PDLBASE         ESTABLISH ADDRESSABILITY
         TM    OLDLINUM+OPRNDEX,CAOPERND WAS OLD-LINENUM SPEC
         BZ    INCRLOOK                 IF NO,BRANCH TO GET INCRE-
*                                       MENT
         TM    REMYFLAG,ORIGNUM         CHECK FOR NUMBERED       A45155
*                                       DATA SET                 A45155
         BZ    OLDSPEC                  IF NO, BRANCH TO         A45155
*                                       SEND ERROR MSG           A45155
         L     PARMREG1,OLDLINUM        IF YES,GET PT OLD-LINENUM
         LH    WR,OLDLINUM+OPRNDLNG     GET LNG OF OLD-LINENUM
         BCTR  WR,O                     MINUS 1 FOR 'EX' INSTRUC
         EX    WR,PAK                   CHANGE OLD-LINENUM TO
*                                       PACKED DECIMAL
         CVB   OLDLINO,CATEMPBF         BINARY OLD-LINENUM INTO
*                                       REGISTER
         TM    ENDLINUM+OPRNDEX,CAOPERND CHECK IF 'END LINENUM'  Y02676
*                                       SPECIFIED                Y02676
         BZ    INCRLOOK                 IF NOT BR TO PROCESS     Y02676
*                                       RENUM INCREMENT          Y02676
         CLI   CADSCODE,CABASIC         CHECK FOR BASIC DSTYPE   Y02676
         BNE   ENDCHECK                 IF NOT, BR TO CONTINUE   Y02676
*                                       PROCESSING               Y02676
         IKJEBEML ,,,,MF=(E,PARTBSIC)   ISSUE MESSAGE - BASIC    Y02676
         L     WR,RET8                  OBTAIN ERROR RETURN CODE Y02676
         ST    WR,REKODE                STORE IN TEMPORARY AREA  Y02676
         B     ERALR                    BR TO CLEANUP AND END    Y02676
ENDCHECK L     PARMREG1,ENDLINUM        OBTAIN ADDRESS OF OPRND  Y02676
         LH    WR,ENDLINUM+OPRNDLNG     OBTAIN OPERAND LENGTH    Y02676
         BCTR  WR,PARMREG0              DECREMENT LEN FOR PACK   Y02676
         EX    WR,PAK                   CONVERT OPERAND TO       Y02676
*                                       PACKED DECIMAL FORM      Y02676
         CVB   LINELAST,CATEMPBF        BINARY VALUE OF OPERAND  Y02676
         CLR   OLDLINO,LINELAST         CHECK FOR ASCENDING      Y02676
*                                       VALUES IN LINE RANGE     Y02676
         BNH   INCRLOOK                 VALID RANGE, BRANCH      Y02676
*                                       TO CHECK INCREMENT       Y02676
         SPACE
*        ISSUE MESSAGE FOR INVALID LINE RANGE AND RETURN         Y02676
         SPACE
         MVC   REMSLIST(MSGLISTL),LINVRANG MOVE LIST FORM OF     Y02676
*                                       MESSAGE PARAMETER LIST   Y02676
         LH    WR,ENDLINUM+OPRNDLNG     OBTAIN ENDLINUM LENGTH   Y02676
         LA    LINELAST,L4(,WR)         ADD 4 FOR CONTROL WORD   Y02676
         STH   LINELAST,REINS2LN        STORE IN LIST            Y02676
         LA    PARMREG1,REINS2TX        SET TO ADDRESS FOR MOVE  Y02676
         L     RETREG,ENDLINUM          SET TO ADDRESS FOR MOVE  Y02676
         BCTR  WR,PARMREG0              DECR. LENGTH FOR MOVE    Y02676
         EX    WR,REINSMVC              MOVE INSERTION TEXT      Y02676
         LA    WR,M503IN2               OBTAIN INSERTION OFFSET  Y02676
         STH   WR,REINS2OF              STORE IN LIST            Y02676
         SR    WR,WR                                             Y02676
         ST    WR,REINS2PT              SPECIFY 2 INSERTIONS     Y02676
         LH    WR,OLDLINUM+OPRNDLNG     OBTAIN OLD LINENUM LEN   Y02676
         LA    OLDLINO,L4(,WR)          ADD 4 FOR CONTROL WORD   Y02676
         STH   OLDLINO,REINS1LN         SET LENGTH IN LIST       Y02676
         LA    OLDLINO,M503IN1          OBTAIN INSERTION OFFSET  Y02676
         STH   OLDLINO,REINS1OF         STORE OFFSET IN LIST     Y02676
         LA    OLDLINO,REINS2PT         OBTAIN ADDRESS OF SECOND Y02676
*                                       INSERTION LIST           Y02676
         ST    OLDLINO,REINS1PT         CHAIN INSERTIONS         Y02676
         LA    OLDLINO,REINS1PT         OBTAIN ADDRESS OF FIRST  Y02676
*                                       INSERTION LIST           Y02676
         ST    OLDLINO,REMSINS1         SET FIRST-LEVEL CHAIN    Y02676
*                                       OF INSERTIONS            Y02676
         L     RETREG,OLDLINUM          OBTAIN ADDRESS OF 'OLD   Y02676
*                                       LINENUM' VALUE           Y02676
         LA    PARMREG1,REINS1TX        ADDR. OF INS. TEXT FIELD Y02676
         BCTR  WR,PARMREG0              DECREMENT LENGTH FOR MVC Y02676
         EX    WR,REINSMVC              MOVE INSERTION TEXT      Y02676
         IKJEBEML ,,,,MF=(E,REMSLIST)   ISSUE INV. RANGE MESSAGE Y02676
         L     WR,RET8                  SET ERROR RETURN CODE    Y02676
         ST    WR,REKODE                                         Y02676
         B     ERALR                    BRANCH TO TERM. RENUM    Y02676
INCRLOOK EQU   *
         TM    INCRMENT+OPRNDEX,CAOPERND WAS INCREMENT SPECIFIED
         BZ    LINOLOOK                 IF NO,BRANCH TO GET NEW-
*                                       LINENUM
         L     PARMREG1,INCRMENT        IF YES,GET PT TO INCREMENT
         LH    WR,INCRMENT+OPRNDLNG     GET LNG OF INCREMENT
         BCTR  WR,O                     MINUS 1 FOR 'EX' INSTRUC
         EX    WR,PAK                   CHANGE INCREMENT INTO
*                                       PACKED DECIMAL
         CVB   INCR,CATEMPBF            BINARY INCREMENT INTO REG
LINOLOOK EQU   *
         TM    NEWLINUM+OPRNDEX,CAOPERND WAS NEW-LINENUM SPECIFIED
         BZ    REDATXCK                 IF NOT, BRANCH TO CHECK  Y02676
*                                       FOR RENUM BY DATA EXIT   Y02676
         L     PARMREG1,NEWLINUM        IF YES,GET PT NEW-LINENUM
         LH    WR,NEWLINUM+OPRNDLNG     GET LNG OF NEW-LINENUM
         BCTR  WR,O                     MINUS 1 FOR 'OR'ING INTO
*                                       L-FIELD OF 'EX' INSTRUCTION
         EX    WR,PAK                   CHANGE NEW-LINENUM TO
*                                       PACKED DECIMAL
         CVB   LINO,CATEMPBF            BINARY NEW-LINENUM INTO
*                                       REGISTER
REDATXCK L     WR,CAPTPDXT              OBTAIN ADDR OF PROCESSOR Y02676
*                                       TABLE EXTENSION          Y02676
         USING IKJEBECX,WR              ESTABLISH ADDRESSABILITY Y02676
         OC    CXDATEXT,CXDATEXT        CHECK FOR NON-ZERO DATA  Y02676
*                                       EXIT NAME FIELD          Y02676
         BZ    RENONUM                  IF ZERO, CONTINUE NORMAL Y02676
*                                       RENUM PROCESSING         Y02676
         DROP  WR                       DROP ADDRESSABILITY      Y02676
         LTR   OLDLINO,OLDLINO          COMPLETE RENUMBER -      Y02676
         BM    RECAL2DX                 IF SO, BYPASS CONDITION  Y02676
*                                       CHECKING FOR PARTIAL     Y02676
*                                       RENUM                    Y02676
         OI    REMYFLAG,DATXFLAG        INDICATE DATA EXIT RENUM Y02676
         B     READOLD                  BRANCH TO VERIFY THAT    Y02676
*                                       'OLD LINENUM' IS PRESENT Y02676
RECAL2DX EQU   *                                                 Y02676
         BAL   BALREG,RECALLDX          CALL SUBROUTINE FOR      Y02676
*                                       RENUM BY DATA EXIT RTN   Y02676
         NI    REMYFLAG,X'FF'-DATXFLAG  TURN OFF DATA EXIT FLAG  Y02676
*                                       IN CASE STANDARD RENUM   Y02676
*                                       IS INVOKED               Y02676
         LA    WR,L4                    OBTAIN CONSTANT 4 FOR    Y02676
*                                       CHECKING RETURN CODES    Y02676
         CR    WR,RETCDREG              CHECK FOR SUCCESSFUL     Y02676
*                                       OPERATION                Y02676
         BE    RENONUM                  RC = 4, PROCESS RENUM    Y02676
*                                       REQUEST USING STANDARD   Y02676
*                                       TECHNIQUE                Y02676
         BL    REDXFAIL                 BRANCH TO EXIT WITH    @YM03458
*                                       FAILURE RETURN CODE    @YM03458
         SR    WR,WR                                           @YM03458
         ST    WR,CAIMLLNO              RESET LAST INPUT LINE  @YM03458
*                                       VALUE                  @YM03458
         NI    CACFLAG3,X'FF'-CAIMINPT  INDICATE INPUT MODE TO @YM03458
*                                       BEGIN AT END OF DATA   @YM03458
         L     WR,REDXINCR              OBTAIN RENUM INCREMENT @YM03458
         ST    WR,CAINCRE               RESET COMMAND INCREMENT@YM03458
         ST    WR,CAIMLINC              RESET INPUT INCREMENT  @YM03458
         TM    REMYFLAG,ORIGNUM         WAS DS LINE NUMBERED   @YM08118
         BO    SWITCHES                 IF SO, BRANCH          @YM08118
         OI    CAIMFLG,CAIMPT           TURN ON RPOMPT BIT     @YM08118
         B     SWITCHES                 BRANCH TO COMPLETE     @YM03458
*                                       NORMAL PROCESSING      @YM03458
REDXFAIL EQU   *
         ST    RETCDREG,REKODE          SAVE FAILURE RETURN CODE Y02676
         B     ERALR                    BRANCH TO ERROR EXIT     Y02676
 EJECT
**************************************************************** A45155
*                                                                A45155
*    BEFORE ALLOCATING A SECONDARY UTILITY DATA SET, A CHECK     A45155
*    IS MADE FOR A 'NONUM' DATA SET.  ( DATA LOSS IS POSSIBLE    A45155
*    FOR NONUM DATA SETS.)  THE IKJEBRE1 ROUTINE IS CALLED TO    A45155
*    DETERMINE IF RENUM SHOULD CONTINUE FOR NONUM DATA SETS.     A45155
*                                                                A45155
**************************************************************** A45155
RENONUM  EQU   *                                                 A45155
         TM    REMYFLAG,ORIGNUM         CHECK FOR NUMBERED DS    A45155
         BO    PREPNEW                  IF NUM, BR TO ALLOCATE   A45155
*                                       NEW UTILITY DATA SET     A45155
         CALL  IKJEBRE1                 CALL SUBROUTINE TO       A45155X
                                        DETERMINE IF RENUMBER IS A45155X
                                        TO CONTINUE              A45155
         B     NONUMTAB(RETCDREG)       BRANCH INTO TABLE        A45155
*                                       TO DETERMINE NEXT ACTION A45155
NONUMTAB EQU   *                                                 A45155
         B     PREPNEW                  CONTINUE RENUM           A45155
         B     ERALR1                   RC=4,EXIT TO CONTROLLER, A45155
*                                       RENUM SUSPENDED          A45155
         B     EGGSIT8                  RC=8, EXIT TO CONTROLLER A45155
*                                       SYSTEM ERROR             A45155
         EJECT
***********************************************************************
* CALL IKJEBEUI(UTILITY DATA SET INITIALIZATION ROUTINE) TO OBTAIN    *
* AND INITIALIZE A NEW OUTPUT UTILITY DATA SET                        *
***********************************************************************
 SPACE
PREPNEW  EQU   *
         IKJEBESH  (COMMREG),IKJEBEUI,PARAM=((COMMREG)),MF=(E,RESRPLST)
         LTR   RETCDREG,RETCDREG        WAS IKJEBEUI SUCCESSFUL
         BZ    CONTXR                   IF SO, CONTINUE
         MVC   REKODE(WD),RET8          SET RC 8
         B     ERALR                    EXIT                     A42941
CONTXR   EQU   *
         ST    PARMREG0,REDCB           IF YES,SAVE PT TO NEW DCB
 SPACE
***********************************************************************
* IF DATA SET TYPE IS BASIC, CALL THE SYNTAX CHECKER TO PERFORM       *
* RENUMBERING.  IF NOT, FIND WHETHER OR NOT THE 'OLD-LINENUM' OPERAND *
* WAS SPECIFIED, AND GO TO THE APPROPRIATE SECTION OF CODE TO PERFORM *
* RENUMBERING.                                                        *
***********************************************************************
 SPACE
         CLI   CADSCODE,CABASIC         IS THIS A BASIC DATA SET
         BE    XKBASIC                  IF YES,BRANCH TO USE
*                                       SYNTAX CHECKER TO RENUMBER
         LTR   OLDLINO,OLDLINO          IF NO,WAS OLD-LINENUM SPEC
         BM    RE000010                 IF NOT, BRANCH TO        A45155
*                                       ADJUST NEW LINENUM VALUE A45155
         B     READOLD                  BRANCH TO VALIDATE       A45155
*                                       OLD LINENUM              A45155
RE000010 EQU   *                                                 A45155
         ST    LINO,RE1STLIN            SAVE 'NEW LINENUM'       A45155
         SR    LINO,INCR                SUBTRACT INCREMENT FROM
*                                       NEW-LINENUM (TO BE ADDED
*                                       BACK LATER)
         EJECT
 SPACE
***********************************************************************
* CALL IKJEBEUT(UTILITY DATA SET INTERFACE ROUTINE) TO READ FIRST RCD *
* IN DATA SET.  IF DATA SET IS EMPTY ISSUE A MESSAGE.  OTHERWISE GO   *
* TO GENERATE LINE NUMBER.                                            *
***********************************************************************
 SPACE
         MVC   REDCB@(WD),CAPTCDCB      SET PT TO UTILITY DCB
         MVI   REUTPLST,READ1ST         IND READ 1ST RCD
         XC    REKEY@(WD),REKEY@        IND KEY IRRELEVANT
         LA    WR,REINAREA
         ST    WR,REBFR@                SET PT TO READ-IN AREA
         MVI   REBFR@,REFLAG            FLAG END OF LIST
         IKJEBESH (COMMREG),IKJEBEUT,PARAM=((COMMREG),REUTPLST),       C
               MF=(E,RESRPLST)
         B     UTBRTBL1(RETCDREG)       BRANCH ACCORDING TO RETURN
*                                       CODE
UTBRTBL1 EQU   *
         B     GENNUM    0(SUCCESS    ) - GENERATE LINE NUMBER
         B     MT        4(END OF DATA) - ISSUE MSG
         B     IOERR     8(I/O ERROR)   - SET RET CODE TO 12
IOERR    MVC   REKODE(WD),RC12          SET I/O ERROR RET CODE
         B     CLOZNEW                  BRANCH TO UNALLOC DCB
MT       EQU   *
         MVC   RE10AREA(MSGLISTL),LMT   INITLZ MSG PARM LIST
         IKJEBEML ,,,,MF=(E,RE10AREA)   ISSUE 'NO LINES IN DATA SET'
         OI    REMYFLAG,NOLINE          IND NO LINES IN DATA SET A42941
         B     CLOZNEW             GO TO CLOSE ROUTINE
         EJECT
 SPACE
***********************************************************************
* SAVE THE CURRENT KEY.                                               *
* GENERATE THE NEXT LINE-NUMBER, UPDATE THE CURRENT LINE POINTER IF   *
* THIS IS THE CURRENT LINE, AND, DEPENDING ON THE KIND OF RECORD      *
* FORMAT, GO TO THE APPROPRIATE SECTION OF CODE TO FORMAT THE RECORD  *
* SO THAT IKJEBEUT CAN INSERT THE LINE NUMBER FIELD.                  *
***********************************************************************
 SPACE
GENNUM   EQU   *
         MVC   REOLDKEY(WD),REKEY       SAVE THIS KEY
         AR    LINO,INCR                GENERATE NEXT LINE NUMBER
MAINLOOP EQU   *
         CLC   REKEY(WD),CACURNUM       IS THIS THE CURRENT LINE
         BNE   FMT                      IF NO,BRANCH TO FORMAT RCD
         ST    LINO,RECURLIN            IF YES,UPDATE CURRENT LINE
*                                       NUMBER
FMT      EQU   *
         TM    CACFLAG2,CARECFM         TEST RECORD FORMAT       A45155
         BO    RENUMBER                 IF FIXED, BRANCH TO      A45155
*                                       UPDATE KEY               A45155
         TM    REMYFLAG,ORIGNUM         IS DATA SET LINE-NUMBERED
         BO    RENUMBER                 IF YES,BRANCH TO UPDATE
*                                       KEY
*                                       IF NO, FALL THROUGH TO   A45155
*                                       HANDLE VARIABLE NONUM    A45155
*                                       RECORDS                  A45155
         EJECT
 SPACE
***********************************************************************
* THIS CODE TREATS VARIABLE-LENGTH, NON-NUMBERED RECORDS -            *
*      SHIFT THE DATA RIGHTWARD TO MAKE ROOM FOR THE SEQUENCE NUMBER, *
*      AND UPDATE THE LL FIELD.  IF LL IS MADE LARGER THAN CALRECL,
*      FIND OUT IF THIS IS A 'TEXT' TYPE DATA SET.                    *
***********************************************************************
 SPACE
VARIABLE EQU   *
         SR    LINOLENG,LINOLENG
         IC    LINOLENG,CALENGTH        GET LNG OF LINE NO.
         LA    WR,REDATA(LINOLENG)      CALC ADDR OF END OF SEQ FLD
         MVC   RETEMP(DATALNG),REDATA   SHIFT DATA RIGHT TO ACCOM-
         MVC   O(DATALNG,WR),RETEMP      MODATE SEQUENCE NUMBER
         AH    LINOLENG,RELL
         STH   LINOLENG,RELL            UPDATE LL-FIELD
         SH    LINOLENG,CALRECL         DETERMINE IF TRUNCATION  A45155
*                                       MAY BE NECESSARY         A45155
         BNP   RENUMBER                 IF NOT, BRANCH TO UPDATE A45155
*                                       KEY                      A45155
         MVC   RELL(HAFWD),CALRECL      SET LL OF MAIN RCD TO MAX
         CLI   CADSCODE,CATEXT          IF YES,IS THIS A TEXT DATA
*                                              SET
         BE    OFLO                       IF YES,BRANCH TO MAKE
*                                                OVERFLOW RCD
         LH    WR,CALRECL               OBTAIN MAXIMUM RECORD    A45155
*                                       LENGTH                   A45155
         LA    WR,RELL(WR)              OBTAIN ADDRESS OF FIRST  A45155
*                                       BYTE IN TRUNCATION       A45155
         BCTR  LINOLENG,0               DECREMENT LENGTH FOR CLC A45155
         EX    LINOLENG,NUMBCLC         DETERMINE IF TRUNCATION  A45155
*                                       PORTION IS ALL BLANKS    A45155
         BE    RENUMBER                 IF SO, NO MESSAGE        A45155
*                                       IS NECESSARY, BRANCH TO  A45155
*                                       UPDATE KEY               A45155
         OI    REMYFLAG,ISSTRUNK        OTHERWISE, REMEMBER TO   A45155
*                                       ISSUE MESSAGE            A45155
         B     RENUMBER                 BRANCH TO UPDATE KEY     A45155
         EJECT
 SPACE
***********************************************************************
* IF A VARIABLE-LENGTH, NON-NUMBERED TEXT RCD WAS MADE LARGER THAN    *
* CALRECL BYTES, CREATE AN OVERFLOW LINE BY BREAKING OFF THE PRESENT  *
* LINE (AT A BLANK, IF POSSIBLE).                                     *
***********************************************************************
 SPACE
OFLO     EQU   *
         LR    OVERFLOW,LINOLENG        SAVE LENGTH OF OVERFLOW  A45155
         SR    LINOLENG,LINOLENG
         IC    LINOLENG,CALENGTH        GET LINE NO. LNG AGAIN
         LA    BEGNG,REDATA(LINOLENG)   CALC LEFTMOST POINT OF THE
         LA    BEGNG,O(OVERFLOW,BEGNG)   SCAN FOR BLANK
         LA    WR,RELL
         AH    WR,CALRECL               START SCAN ST END OF BUFFER
BLNKSCAN EQU   *
         CLI   0(WR),BLNK               IS THIS CHAR A BLANK
         BE    SPLIT                    IF YES,BRANCH TO SPLIT OFF
*                                       OVERFLOW
         CR    WR,BEGNG                 IF NO,CAN SCAN CONTINUE
         BNH   NOBLANK                    IF NO,BRANCH TO BREAK AT
*                                               END OF BUFFER
         BCT   WR,BLNKSCAN                IF YES,CONTINUE SCANNING
NOBLANK  EQU   *
         LA    WR,RELL                  WHEN NO BLANK FOUND IN
         AH    WR,CALRECL               BUFFER, RESET PT TO END OF
*                                       BFR
         B     ORIGINAL                 BRANCH TO USE ORIGINAL
*                                       OVERFLOW LENGTH
SPLIT    EQU   *
         LA    BEGNG,RELL
         LR    WR2,WR
         SR    WR2,BEGNG                CALC NEW LL
         STH   WR2,RELL                 SET IT IN RCD
         LA    WR,BYTE(WR)
         LA    WR2,RELL
         AH    WR2,CALRECL              LOCATE END OF MAX RECORD
         SR    WR2,WR                   CALC ADDITIONAL OVERFLOW
         AR    OVERFLOW,WR2             CALC TOTAL OVERFLOW
ORIGINAL EQU   *                        WHEN NO BLANK FOUND IN
*                                       BFR,ORIGINAL OVERFLOW
*                                       VALUE IS STILL CORRECT
         LA    OVERFLOW,WD(OVERFLOW,LINOLENG)
*                                       CALC LL OF OVERFLOW RCD
         MVC   CATEMPBF(DATALNG),O(WR)
         LA    WR,REDATA2(LINOLENG)     CALC POSITION OF DATA IN
*                                       OVERFLOW RCD
         MVC   O(DATALNG,WR),CATEMPBF   MOVE OVERFLOW DATA INTO
*                                       OVERFLOW RCD
         SLL   OVERFLOW,HAFREG
         ST    OVERFLOW,RELL2           SET LL,00 IN OVERFLOW RCD
         ST    LINO,REKEY               SET NEW KEY IN MAIN RCD
         EJECT
 SPACE
***********************************************************************
* CALL IKJEBEUT TO WRITE THE MAIN PART OF THE LINE WHICH OVERFLOWED   *
***********************************************************************
 SPACE
         MVC   REDCB@(WD),REDCB         SET PT TO NEW UTILITY DCB
         MVI   REUTPLST,WRITERCD        IND WRITE RCD IN ASCENDING
*                                       ORDER BY KEY
         LA    WR,REINAREA
         ST    WR,REKEY@                SET PT TO RCD
         MVI   REKEY@,REFLAG            FLAG END OF LIST
         IKJEBESH (COMMREG),IKJEBEUT,PARAM=((COMMREG),REUTPLST),       C
               MF=(E,RESRPLST)
         B     UTBRTBL2(RETCDREG)       BRANCH ACCORDING TO RETURN
*                                       CODE
UTBRTBL2 EQU   *
         B     WRITOFLO  00(SUCCESS         )-CONTINUE
         B     CLOZNEW                  BR TO CLOSE DATA SET
         B     IOERR     08(I/O ERROR       )-SET RET CODE 12
         B     CLOZNEW   12(LINE NO. TOO BIG)-UNALLOC NEW UTIL DCB
         EJECT
***********************************************************************
* PREPARE TO WRITE THE OVERFLOW RCD AS IF IT WERE A NORMAL ONE        *
***********************************************************************
 SPACE
WRITOFLO EQU   *
         AR    LINO,INCR                GENERATE NEXT LINE NUMBER
         MVC   RELL(DATALNG+WD),RELL2   TRANSFER OVERFLOW DATA &
*                                       CONTROL WORD TO BUFFER
         EJECT
 SPACE
***********************************************************************
* CALL IKJEBEUT TO WRITE THE RENUMBERED LINE, AFTER UPDATING LAST     *
* INPUT LINE NUMBER (IF NECESSARY).                                   *
***********************************************************************
RENUMBER EQU   *
         ST    LINO,REKEY               SET NEW KEY IN RCD
         TM    CACFLAG3,CAIMINPT        CHECK INPUT PROCESSED   YA00040
         BNO   SKIPINPT                 IF NONE, SKIP LINE TEST YA00040
         CLC   REOLDKEY(WD),CAIMLLNO    WAS THIS LAST INPUT LINE
         BNE   SKIPINPT                 IF NO,SKIP INPUT LINE NO.
*                                       UPDATE
         ST    LINO,RELINLIN            IF YES,UPDATE LAST INPUT
*                                       LINE NO. TEMPORARILY
SKIPINPT EQU   *
         MVC   REDCB@(WD),REDCB         SET PT TO UTILITY DCB
         MVI   REUTPLST,WRITERCD        IND WRITE RCD IN ORDER
         LA    WR,REINAREA
         ST    WR,REKEY@                SET PT TO RCD
         MVI   REKEY@,REFLAG            FLAG END OF PARM LIST
         IKJEBESH (COMMREG),IKJEBEUT,PARAM=((COMMREG),REUTPLST),       C
               MF=(E,RESRPLST)
         B     UTBRTBL3(RETCDREG)       BRANCH ACC TO RET CODE
UTBRTBL3 EQU   *
         B     TRUNKQ    00(SUCCESS         )-CONTINUE
         B     CLOZNEW                  BR TO CLOSE DATA SET
         B     IOERR     08(I/O ERROR       )-SET RET CODE 12
         B     CLOZNEW   12(LINE NO. TOO BIG)-UNALLOC NEW DCB
 SPACE
***********************************************************************
* IF A LINE WAS JUST TRUNCATED, BUILD MSG INSERTIONS & INFORM THE USER*
***********************************************************************
 SPACE
TRUNKQ   EQU   *
         TM    REMYFLAG,ISSTRUNK        WAS A LINE TRUNCATED
         BNO   NEXTLINE                 IF NO,BRANCH TO READ NEXT
         NI    REMYFLAG,X'FF'-ISSTRUNK  IF YES,TURN OFF LINE-
*                                       TRUNCATED-SWITCH
 SPACE
* BUILD FIRST-LEVEL MESSAGE INSERTION -
 SPACE
         L     WR,REKEY                 PICK UP LINE NO.
         CVD   WR,CASCWKA               CONVERT TO PACKED DECIMAL
         MVC   M507INS(LINTRCL),LINTRC  INITLZ LINE NO. INSERTION
         LA    PARMREG1,M507INS+LINTRCL-BYTE INITLZ PT TO END OF
*                                            INSERTION
         EDMK  PATTERN1(PATTERNL),CASCWKA+HAFWD+BYTE UNPAK LINENUM
         MVC   PATTERN1(DUBLWD),0(PARMREG1) LEFT JUSTIFY
*                                                INSERTION
         LA    WR,M507INS+LINTRCL
         SR    WR,PARMREG1              CALC LNG OF INSERTION
         LA    WR,WD(WR)
         STH   WR,M507INS+WD            SET IT IN INSERTION
 SPACE
* BUILD SECOND LEVEL MESSAGE INSERTION -
 SPACE
         LH    WR,CALRECL               PICK UP LINE SIZE
         LA    WR2,WD                   SUBTRACT CONTROL WORD LNG
         SR    WR,WR2
         CVD   WR,CASCWKA               CONVERT LINE SIZE TO
*                                       PACKED DECIMAL
         MVC   M507INS2(LNGISL),LNGIS   INITLZ LINE LNG INSERTION
         EDMK  PATTERN2(WD),CASCWKA+WD+HAFWD UNPACK LINE LENGTH
         MVC   PATTERN2(HAFWD),O(PARMREG1) LEFT-JUSTIFY
*                                               INSERTION
         LA    WR,M507INS2+LNGISL
         SR    WR,PARMREG1              CALC LNG OF INSERTION
         LA    WR,WD(WR)
         STH   WR,M507INS2+WD           SET IT IN INSERTION
 SPACE
* ISSUE THE MESSAGE -
 SPACE
         IKJEBEML M507,M5071,M507INS,M507INS2,MF=(E,RE10AREA)
         EJECT
 SPACE
***********************************************************************
* CALL IKJEBEUT TO READ NEXT LINE.  IF FOUND, LOOP TO RENUMBER.  IF   *
* END OF DATA, CONTINUE PROCESSING.                                   *
***********************************************************************
 SPACE
NEXTLINE EQU   *
         MVI   REDATA,BLNK              BLANK INPUT AREA
         MVC   REDATA+BYTE(DATALNG),REDATA
         MVC   REDCB@(WD),CAPTCDCB      SET PT TO UTILITY DCB
         MVI   REUTPLST,READNEXT        IND READ NEXT RCD
         LA    WR,REOLDKEY
         ST    WR,REKEY@                SET PT TO PREVIOUS KEY
         LA    WR,REINAREA
         ST    WR,REBFR@                SET PT TO READ-IN AREA
         MVI   REBFR@,REFLAG            FLAG END OF PARM LIST
         IKJEBESH (COMMREG),IKJEBEUT,PARAM=((COMMREG),REUTPLST),       C
               MF=(E,RESRPLST)
         B     UTBRTBL4(RETCDREG)       BRANCH ACC TO RET CODE
UTBRTBL4 EQU   *
         B     TESTPART                 SUCCESSFUL, BR TO TEST   Y02676
*                                       FOR PARTIAL RENUM        Y02676
         B     IPLIQ     4(END OF DATA) - TEST FOR IPLI DSTYPE
         B     IOERR     8(I/O ERROR  ) - SET RET CODE 12
TESTPART EQU   *                                                 Y02676
         CL    LINELAST,REKEY           CHECK IF RECORD BEYOND   Y02676
*                                       END OF LINE RANGE        Y02676
         BNL   GENNUM                   IF NOT, BRANCH TO RENUM  Y02676
         CL    LINO,REKEY               IF SO, CHECK IF LAST     Y02676
*                                       RENUMBERED KEY IS LESS   Y02676
*                                       THAN THE KEY JUST READ   Y02676
         BNL   KEYERROR                 IF NOT, SEND ERROR MSG   Y02676
*                                       AND TERMINATE RENUM      Y02676
         L     WR,REKEY                 OBTAIN KEY JUST READ     Y02676
         ST    WR,REOLDKEY              SAVE KEY FOR NEXT READ   Y02676
         L     WR,REDCB                 OBTAIN NEW UTILITY WORK  Y02676
*                                       AREA POINTER             Y02676
         ST    WR,REDCB@                RESET WORK AREA ADDR.    Y02676
*                                       PARAMETER FOR IKJEBEUT   Y02676
         MVI   REUTPLST,WRITERCD        SET 'WRITE' OPERATION    Y02676
         LA    WR,REINAREA              OBTAIN READ BUFFER ADDR. Y02676
         ST    WR,REKEY@                ESTABLISH ADDRESS OF     Y02676
*                                       KEY FOR RECORD TO BE     Y02676
*                                       WRITTEN                  Y02676
         MVI   REKEY@,REFLAG            MARK END-OF-PARAMETERS   Y02676
         IKJEBESH (COMMREG),IKJEBEUT,                            Y02676X
               PARAM=((COMMREG),REUTPLST),MF=(E,RESRPLST)        Y02676
         B     PARTTAB(RETCDREG)        CONTINUE BASED ON R. C.  Y02676
PARTTAB  EQU   *                                                 Y02676
         B     NEXTLINE                 NORMAL RETURN, CONTINUE  Y02676
*                                       RENUM OPERATION          Y02676
         B     CLOZNEW                  LOGIC ERROR, TERMINATE   Y02676
         B     IOERR                    I/O ERROR,TERMINATE      Y02676
         B     CLOZNEW                  LOGIC ERROR, TERMINATE   Y02676
         SPACE 2
KEYERROR EQU   *                                                 Y02676
         IKJEBEML ,,,,MF=(E,PARTRNMS)   ISSUE MESSAGE INFORMING  Y02676X
                                        USER OF PARTIAL RENUM    Y02676X
                                        FAILURE                  Y02676
         B     CLOZNEW                  BR TO CLEANUP AND RETURN Y02676
*                                       TO MAINLINE              Y02676
         EJECT
 SPACE
***********************************************************************
* IF THIS IS AN IPL1 DATA SET, BRANCH TO THE SYNTAX CHECKER.          *
* OTHERWISE CALL IKJEBEEX TO CLOSE AND UNALLOCATE THE OLD UTILITY     *
* DCB, AND UPDATE THE COMMUNICATION AREA WITH A POINTER TO THE NEW    *
* UTILITY DCB.                                                        *
***********************************************************************
 SPACE
IPLIQ    EQU   *
         CLI   CADSCODE,CAIPLI          IS THIS DATA SET IPLI
         BE    XKIPLI                   IF YES,BRANCH TO CALL
*                                       SYNTAX CHECKER
CLOZOLD  EQU   *                        IF NO,CALL IKJEBEEX
         NI    CASYNCD2,X'FF'-RENOSW    RESET OPTION WD TO ZERO
         L     PARMREG0,CAPTCDCB
         IKJEBESH  (COMMREG),IKJEBEEX,PARAM=((COMMREG)),MF=(E,RESRPLST)
         NI    CASYNSW,X'FF'-CASYNLN INDICATE LINE NUM TO SYNTAX CHKR
         TM    REMYFLAG,ORIGNUM    WAS DS PREV NUMBERED          A42941
         BO    DONTFLP             IF SO DONT TURN ON INPUT BIT  A42941
         OI    CAIMFLG,CAIMPT      TURN ON PROMPT BIT FOR INPUT
DONTFLP  EQU   *
         MVC   CAPTPDCB(WD),CAPTCDCB    PUSH DOWN CURRENT DCB PT
         MVC   CAPTCDCB(WD),REDCB       SET PT NEW DCB IN COMMAREA
         EJECT
 SPACE
***********************************************************************
* UPDATE CURRENT LINE REFERENCE('*'), LAST LINE NUMBER USED IN INPUT  *
* MODE, LINE NUMBER INCREMENT, AND STARTING LINE NUMBER.  SET DATA-   *
* SET-LINE-NUMBERED AND DATA-SET-MODIFIED SWITCHES.                   *
***********************************************************************
 SPACE
         CLI   CADSCODE,CABASIC         IS DATA SET 'BASIC'
         BNE   ALL                      IF NO,PROCEED NORMALLY
         ST    INCR,CAIMLINC            IF YES,SET INCREMENT ONLY
         ST    INCR,CAINCRE
         B     SWITCHES                 GO SET SWITCHES
ALL      EQU   *
         MVC   CACURNUM(WD),RECURLIN    CURR LINE REFERENCE('*')
         MVC   CAIMLLNO(WD),RELINLIN    LAST INPUT LINE
         ST    INCR,CAIMLINC            INCREMENT
         ST    INCR,CAINCRE
         MVC   CASTNUM(WD),RE1STLIN     STARTING LINE NO.
SWITCHES EQU   *
         NI    CACFLAG1,X'FF'-CANONUM   DATA SET NOW LINE-NUMBERED
         OI    CACFLAG2,CADSMODS        DATA SET MODIFIED
         EJECT
 SPACE
***********************************************************************
* IF VERIFICATION IS IN EFFECT CALL IKJEBEUT TO READ CURRENT LINE,    *
* AND INDICATE THAT THERE IS A LINE TO BE VERIFIED.                   *
***********************************************************************
 SPACE
         TM    CACFLAG1,CAVRFYSW        IS VERIFY SW ON
         BNO   PARSASK                  IF NO,BRANCH TO FREE PARSE
*                                             CORE
         MVC   REDCB@(WD),CAPTCDCB      IF YES,SET PT TO UTIL DCB
         MVI   REUTPLST,READWKEY        IND READ W/ KEY
         LA    WR,CACURNUM
         ST    WR,REKEY@                SET PT TO KEY OF CURRENT
*                                        REFERENCE RECORD
         LA    WR,CATEMPBF+DUBLWD+WD
         ST    WR,REBFR@                SET PT TO READ-IN AREA
         MVI   REBFR@,REFLAG            FLAG END OF PARM LIST
         IKJEBESH (COMMREG),IKJEBEUT,PARAM=((COMMREG),REUTPLST),       C
               MF=(E,RESRPLST)
         LTR   RETCDREG,RETCDREG        WAS READ SUCCESSFUL
         BZ    NOPRB                    IF SO, BRANCH
         C     RETCDREG,RET8            CHECK IF I/O ERROR     @YM03458
         BNE   PARSASK                  NO,BRANCH TO COMPLETE  @YM03458
*                                       CLEANUP                @YM03458
         L     WR,RC12                  YES,OBTAIN R.C. 12     @YM03458
         ST    WR,REKODE                SET FINAL RETURN CODE  @YM03458
         B     PARSASK                  BRANCH TO COMPLETE     @YM03458
*                                       CLEANUP                @YM03458
NOPRB    EQU   *
         OI    CACFLAG1,CALNTOVF        IF YES,IND LINE-TO-BE-VERF
         B     PARSASK                  BRANCH TO FREE PARSE CORE,
*                                       IF NEED BE
CLOZOLDA EQU   *                   ITF SUCCESSFUL CLEANUP
         MVC   CAPTCDCB,CAPTPDCB   RESTORE CURRENT DCB PTR
         B     CLOZOLD        BRANCH TO CLOSE OLD (CURRENT) DCB
CLOZNEWA EQU   *              FAILURE IN ITF RENUM
         NI    CASYNCD2,X'FF'-RENOSW   RESET RENUM SW
         MVC   REDCB,CAPTPDCB     RESTORE OLD DCB POINTER
         EJECT
 SPACE
***********************************************************************
* WHENEVER RENUMBERING CANNOT BE ACCOMPLISHED, CALL IKJEBEEX TO CLOSE *
* AND UNALLOCATE THE NEW UTILITY DCB, AND RESTORE THE DATA-SET-LINE-  *
* NUMBERED SWITCH TO ITS ORIGINAL STATUS.                             *
***********************************************************************
 SPACE
CLOZNEW  EQU   *
         NI    CASYNCD2,X'FF'-RENOSW    RESET OPTION WD TO ZERO  Y02676
         TM    REMYFLAG,DATXFLAG        RENUM BY DATA EXIT RTN - Y02676
         BO    EGGSITA                  IF SO, BYPASS UNALLOC OF Y02676
*                                       SECONDARY UTILITY        Y02676
         L     PARMREG0,REDCB
         IKJEBESH  (COMMREG),IKJEBEEX,PARAM=((COMMREG)),MF=(E,RESRPLST)
         TM    REMYFLAG,NOLINE          IS DATA SET EMPTY        A42941
         BO    ERALR                    YES, LEAVE RETURN CODE=0 A42941
EGGSITA  EQU   *
         SR    RETCDREG,RETCDREG        ZERO REGISTER
         C     RETCDREG,REKODE          IS RC ZERO
         BNE   ERALR                    IF NOT, BRANCH
         MVC   REKODE(WD),RET8          SET RC 8
ERALR    EQU   *
         TM    REMYFLAG,ORIGNUM         WAS DATA SET ORIGINALLY
*                                       LINE-NUMBERED
         BO    PARSASK                  IF YES,BRANCH TO FREE PDL
ERALR1   OI    CACFLAG1,CANONUM         IF NO, INDICATE 'NONUM'  A45155
 SPACE
***********************************************************************
* IF PARSE WAS CALLED, FREE THE STORAGE FOR ITS PDL                   *
***********************************************************************
 SPACE
PARSASK  EQU   *
         LTR   PDLBASE,PDLBASE          WAS PARSE CALLED
         BZ    EGGSIT                   IF NO,BRANCH TO EXIT
         LA    PDLBASE,CAPTPRSD         IF YES,RELEASE PDL CORE
         IKJRLSA (PDLBASE)
         OI    CAPRSPDL,CAFREEDL        INDICATE PDL FREED
         EJECT
 SPACE
***********************************************************************
*                             EXIT CODE                               *
***********************************************************************
 SPACE
EGGSIT   EQU   *
         L     RETCDREG,REKODE          SET RETURN CODE
         IKJEBERT (14,12),RC=(15)  EXIT FROM PGM
         EJECT
***********************************************************************
* THE FOLLOWING CODE IS BRANCHED-TO (AFTER IKJEBEUI IS CALLED TO      *
* PREPARE A NEW OUTPUT DATA SET) WHEN AN OLD LINE NUMBER WAS SPECI-   *
* FIED.  IF THE SPECIFIED OLD & NEW LINE NUMBERS WOULD PUT THE        *
* NUMBERING OUT OF ASCENDING SEQUENCE, THE USER IS NOTIFIED.          *
* OTHERWISE ALL RECORDS WITH NUMBERS LESS THAN OLD-LINENUM ARE COPIED *
* INTO THE NEW UTILITY DATA SET.                                      *
***********************************************************************
 SPACE
OLDSPEC  EQU   *
*   ISSUE MESSAGE INDICATING THAT OLD LINE NUMBER SPECIFICATION  A45155
*   IS INVALID FOR NONUM DATA SETS                               A45155
         SPACE
         IKJEBEML M502,0,0,0,MF=(E,RE10AREA)
         B     EGGSITA                  BRANCH TO EXIT, RC = 08  A45155
READOLD  EQU   *
         MVC   REDCB@(WD),CAPTCDCB      SET PT TO UTILITY DCB
         MVI   REUTPLST,READWKEY        IND READ W/ KEY
         LA    WR,REUTKEY
         ST    WR,REKEY@                SET PT TO KEY
         ST    OLDLINO,REUTKEY          SET KEY (OLD-LINENUM)
         LA    WR,REINAREA
         ST    WR,REBFR@                SET PT INPUT BFR
         MVI   REBFR@,REFLAG            FLAG END OF PLIST
 SPACE
* CALL UTILITY DATA SET INTERFACE ROUTINE TO READ OLD-LINENUM -
 SPACE
         IKJEBESH (COMMREG),IKJEBEUT,PARAM=((COMMREG),REUTPLST),       C
               MF=(E,RESRPLST)
         B     UTBRTBL5(RETCDREG)       BRANCH ACC TO RET CODE
UTBRTBL5 EQU   *
         B     NEWOLDQ   0(SUCCESS  ) - CONTINUE
         B     NONESUCH  4(NOT FOUND) - ISSUE MESSAGE
         B     IOERR     8(I/O ERROR) - SET RET CODE 12
NONESUCH EQU   *
         L     WR,OLDLINUM              GET PT TO OLD-LINENUM
         MVC   PATTERN1(DUBLWD),O(WR)   MOVE IT TO FORMATTED     A50472
*                                       INSERTION AREA (LINE     A50472
*                                       NO. IS AS ENTERED WITH   A50472
*                                       MAXIMUM LENGTH OF 8)     A50472
         LH    WR,OLDLINUM+OPRNDLNG     GET LENGTH OF OLD-LINENUM
         LA    WR,WD(WR)                ADD LNG OF HEADER
         STH   WR,M507INS+WD            SET IT IN INSERTION
         LA    WR,M504IN1
         STH   WR,M507INS+WD+HAFWD      SET OFFSET
         XC    M507INS(WD),M507INS      NO 2ND INSERT
         IKJEBEML M504,0,M507INS,0,MF=(E,RE10AREA)
         B     CLOZNEW                  BRANCH TO UNALLOC NEW DCB
         EJECT
 SPACE
* IF NEW-LINENUM IS LESS THAN OLD-LINENUM, SEE IF THE RECORD NUMBER
* PRECEDING OLD-LINENUM IS LESS THAN NEW-LINENUM.  OTHERWISE BRANCH TO
* READ FIRST RECORD.
 SPACE
NEWOLDQ  EQU   *
         CR    LINO,OLDLINO             IS NEW-LINENUM LT OLD
         BNL   READFUST                 IF NO,BRANCH TO READ 1ST
         MVC   REDCB@(WD),CAPTCDCB      IF YES,SET PT TO DCB
         MVI   REUTPLST,READPREV        IND READ PREVIOUS
         LA    WR,REUTKEY
         ST    WR,REKEY@                SET PT TO KEY
         ST    OLDLINO,REUTKEY          SET KEY(OLD-LINENUM)
         LA    WR,REINAREA
         ST    WR,REBFR@                SET PT TO INPUT BUFFER
         MVI   REBFR@,REFLAG            FLAG END OF PARM LIST
         IKJEBESH (COMMREG),IKJEBEUT,PARAM=((COMMREG),REUTPLST),       C
               MF=(E,RESRPLST)
         B     UTBRTBL6(RETCDREG)       BRANCH ACC TO RET CODE
UTBRTBL6 EQU   *
         B     SEQQ      0(SUCCESS  ) - COMPARE LINE NUMBERS
         B     OLDIS1ST  4(NOT FOUND) - RENUMBER OLD-LINENUM
         B     IOERR     8(I/O ERROR) - SET RET CODE 12
OLDIS1ST EQU   *
         TM    REMYFLAG,DATXFLAG        RENUM BY DATA EXIT RTN - Y02676
         BO    RECAL2DX                 IF SO, BR TO RENUMBER    Y02676
         ST    LINO,RE1STLIN            UPDATE STARTING LINE NO.
         B     RENUMOLD                 BRANCH TO RENUMBER OLD-
*                                       LINENUM
SEQQ     EQU   *
         C     LINO,REKEY               IS NEW-LINENUM GT LINENUM
*                                       PRECEDING OLD-LINENUM
         BH    READFUST                 IF YES,BRANCH TO READ 1ST
*                                       IF NO,ISSUE ERROR MSG -
         MVC   REMSLIST(MSGLISTL),NEWLNERR MOVE MESSAGE          Y02676
*                                       PARAMETERS TO WORK AREA  Y02676
         SR    PARMREG0,PARMREG0        CLEAR REGISTER FOR LIST  Y02676
*                                       PROCESSING               Y02676
         SPACE 2
*        PROCESS 'NEW LINENUM' INSERTION HERE                    Y02676
         SPACE 2
         LA    PARMREG1,REINS1          OBTAIN INSERTION LIST    Y02676
*                                       ADDRESS                  Y02676
         ST    PARMREG1,REMSINS1        STORE IN PARAMETER LIST  Y02676
         ST    PARMREG0,REINS1PT        SPECIFY SINGLE FIRST-    Y02676
*                                       LEVEL INSERTION          Y02676
         LA    PARMREG1,M574IN1         OBTAIN INSERTION OFFSET  Y02676
         STH   PARMREG1,REINS1OF        STORE IN LIST            Y02676
         L     RETREG,NEWLINUM          OBTAIN ADDRESS OF TEXT   Y02676
         LH    WR,NEWLINUM+OPRNDLNG     OBTAIN LENGTH OF TEXT    Y02676
         LA    LINO,L4(,WR)             ADD 4 FOR CONTROL WORD   Y02676
         BCTR  WR,PARMREG0              DECREMENT LEN. FOR MOVE  Y02676
         LA    PARMREG1,REINS1TX        SET PTR TO INS. TEXT FLD Y02676
         EX    WR,REINSMVC              MOVE TEXT TO INSERT LIST Y02676
         STH   LINO,REINS1LN            SET INSERTION LENGTH     Y02676
         SPACE 2
*        PROCESS 'OLD LINENUM' INSERTION FOR LEVEL-2 MESSAGE     Y02676
         SPACE 2
         LA    PARMREG1,REINS2          OBTAIN ADDRESS OF SECOND Y02676
*                                       INSERTION LIST           Y02676
         ST    PARMREG1,REMSINS2        CHAIN INSERTION LIST TO  Y02676
*                                       PARAMETER LIST           Y02676
         LA    WR,M5741IN1              OBTAIN INSERTION OFFSET  Y02676
         STH   WR,REINS2OF              SET OFFSET IN LIST       Y02676
         L     RETREG,OLDLINUM          OBTAIN ADDRESS OF 'OLD   Y02676
*                                       LINENUM' OPERAND         Y02676
         LH    WR,OLDLINUM+OPRNDLNG     OBTAIN OPERAND LENGTH    Y02676
         LA    OLDLINO,L4(,WR)          ADD 4 FOR INSERTION LEN. Y02676
         STH   OLDLINO,REINS2LN         SET LENGTH IN LIST       Y02676
         LA    PARMREG1,REINS2TX        OBTAIN ADDRESS OF INS.   Y02676
*                                       TEXT FIELD               Y02676
         BCTR  WR,PARMREG0              DECREMENT LEN. FOR MOVE  Y02676
         EX    WR,REINSMVC              MOVE 'OLD LINENUM' TO    Y02676
*                                       INSERTION LIST           Y02676
         SPACE 2
*        PROCESS PREVIOUS LINE NUMBER INSERTION HERE             Y02676
         SPACE 2
         LA    WR,REINS3                OBTAIN INSERT LIST ADDR  Y02676
         ST    WR,REINS2PT              CHAIN THIS INSERTION TO  Y02676
*                                       FIRST INSERTION FOR      Y02676
*                                       SECOND-LEVEL MESSAGE     Y02676
         L     RETREG,REKEY             OBTAIN PREVIOUS LINE KEY Y02676
         CVD   RETREG,CASCWKA           CONVERT TO PACKED DEC.   Y02676
         MVC   REINS3(PRVLINSL),PRVLINS MOVE INSERTION LIST WITH Y02676
*                                       EDMK PATTERN TO WK. AREA Y02676
         LA    PARMREG1,REINS3TX        POINT TO EDMK PATTERN    Y02676
         EDMK  REINS3TX(L10),CASCWKA+L3 SUPPRESS LEADING ZEROS   Y02676
         MVC   REINS3TX(DUBLWD),D0(PARMREG1) LEFT-JUSTIFY INS.   Y02676
         LA    RETREG,REINS3+PRVLINSL                            Y02676
         SR    RETREG,PARMREG1          COMPUTE TEXT LENGTH.     Y02676
         LA    RETREG,WD(,RETREG)       ADD 4 FOR INSERTION LEN. Y02676
         STH   RETREG,REINS3LN          SET LENGTH IN LIST       Y02676
         IKJEBEML ,,,,MF=(E,REMSLIST)   ISSUE MESSAGE            Y02676
         B     CLOZNEW                  BRANCH TO UNALLOC NEW DCB
 SPACE
* COPY LINES FROM CURRENT UTILITY TO NEW UTILITY DATA SET UNTIL OLD-
* LINENUM IS ENCOUNTERED -
 SPACE
READFUST EQU   *
         TM    REMYFLAG,DATXFLAG        RENUM BY DATA EXIT RTN - Y02676
         BO    RECAL2DX                 IF SO, BR TO RENUMBER    Y02676
         MVC   REDCB@,CAPTCDCB          SET PT TO DCB
         MVI   REUTPLST,READ1ST         IND READ FIRST RCD
         XC    REKEY@(WD),REKEY@        IND KEY IRRELEVANT
         LA    WR,REINAREA
         ST    WR,REBFR@                SET PT TO INPUT BFR
         MVI   REBFR@,REFLAG            FLAG END OF PARM LIST
         IKJEBESH (COMMREG),IKJEBEUT,PARAM=((COMMREG),REUTPLST),       C
               MF=(E,RESRPLST)
         B     UTBRTBL7(RETCDREG)       BRANCH ACC TO RET CODE
UTBRTBL7 EQU   *
         B     EQOLDQ    0(SUCCESS  ) - CONTINUE
         B     CLOZNEW                  BR TO CLOSE DATA SET
         B     IOERR     8(I/O ERROR) - SET RET CODE 12
EQOLDQ   EQU   *
         C     OLDLINO,REKEY            DOES 1ST KEY EQ OLD-LINUM
         BNE   COPY                     IF NO,BRANCH TO WRITE RCD
         ST    LINO,RE1STLIN            IF YES,UPDATE STARTING
         B     RENUMOLD                 LINE NO. & BRANCH TO
*                                       RENUMBER OLD-LINENUM
LTOLDQ   EQU   *
         C     OLDLINO,REKEY            DOES THIS LINE PRECEDE
*                                       OLD-LINENUM
         BNH   RENUMOLD                 IF NO,BRANCH TO RENUMBER
*                                       OLD-LINENUM
COPY     EQU   *                        IF YES,COPY RCD INTO NEW
*                                       UTILITY DATA SET -
         MVC   REDCB@(WD),REDCB         SET PT TO DCB
         MVI   REUTPLST,WRITERCD        IND WRITE A RCD
         LA    WR,REINAREA
         ST    WR,REKEY@                SET PT TO RCD
         MVI   REKEY@,REFLAG            FLAG END OF PLIST
         IKJEBESH (COMMREG),IKJEBEUT,PARAM=((COMMREG),REUTPLST),       C
               MF=(E,RESRPLST)
         B     UTBRTBL8(RETCDREG)       BRANCH ACC TO RET CODE -
UTBRTBL8 EQU   *
         B     KEEPGOIN  0(SUCCESS   ) - CONTINUE
         B     CLOZNEW                  BR TO CLOSE DATA SET
         B     IOERR     8(I/O ERROR) - SET RET CODE 12
KEEPGOIN EQU   *
         MVC   REDCB@(WD),CAPTCDCB      SET PT DCB
         MVI   REUTPLST,READNEXT        IND READ NEXT RCD
         LA    WR,REUTKEY
         ST    WR,REKEY@                SET PT TO KEY
         MVC   REUTKEY(WD),REKEY        SET KEY(FROM PREVIOUS RCD)
         LA    WR,REINAREA
         ST    WR,REBFR@                SET PT TO INPUT BFR
         MVI   REBFR@,REFLAG            FLAG END OF PLIST
         IKJEBESH (COMMREG),IKJEBEUT,PARAM=((COMMREG),REUTPLST),       C
               MF=(E,RESRPLST)
         B     UTBRTBL9(RETCDREG)       BRANCH ACC TO RET CODE -
UTBRTBL9 EQU   *
         B     LTOLDQ    0(SUCCESS)   - LOOP TO COMPARE
         B     CLOZNEW                  BR TO CLOSE DATA SET
         B     CLOZNEW   8(I/O ERROR) - UNALLOC NEW DCB
 SPACE
***********************************************************************
* SAVE THE KEY FROM THE RECORD JUST READ & BRANCH BACK TO THE MAIN    *
* RENUMBERING LOOP, USING NEW-LINENUM AS THE GENERATED LINE-NUMBER    *
***********************************************************************
 SPACE
RENUMOLD EQU   *
         MVC   REOLDKEY(WD),REKEY
         B     MAINLOOP                 BRANCH BACK TO MAIN LOOP
 EJECT
***********************************************************************
* FOLLOWING CODE IS BRANCHED TO WHEN DATA SET TYPE IS IPLI OR BASIC   *
***********************************************************************
 SPACE
XKBASIC  EQU   *
XKIPLI   EQU   *
GOAHEAD  EQU   *
         LTR   OLDLINO,OLDLINO          WAS OLD-LINENUM SPEC
         BNM   SETVALUS                 IF YES,BRANCH TO SET VALUES
         MVC   REDCB@(WD),CAPTCDCB      IF NO,SET PT TO DCB
         MVI   REUTPLST,READ1ST         IND READ 1ST RECORD
         XC    REKEY@(WD),REKEY@        IND KEY IRRELEVANT
         LA    WR,REINAREA
         ST    WR,REBFR@                SET PT TO INPUT BFR
         MVI   REBFR@,REFLAG            FLAG END OF PARM LIST
         IKJEBESH (COMMREG),IKJEBEUT,PARAM=((COMMREG),REUTPLST),       C
               MF=(E,RESRPLST)
         B     UTBRTBLX(RETCDREG)       BRANCH ACC TO RET CODE -
UTBRTBLX EQU   *
         B     MOVEOLD    0(SUCCESS  ) -SET OLD-LINENUM
         B     MT         4(NOT FOUND) -ISSUE MSG
         B     IOERR      8(I/O ERROR) -SET RET CODE 12
MOVEOLD  EQU   *
         L     OLDLINO,REKEY
SETVALUS EQU   *
         ST    OLDLINO,XKOL             SET OLD-LINENUM,
         ST    LINO,XKNU                    NEW-LINENUM, AND
         ST    INCR,XKINK                   INCREMENT IN VALUE LIST
         EJECT
 SPACE
***********************************************************************
* IF THIS IS A 'BASIC' DATA SET, CALL THE MODULE WHICH RENUMBERS THE  *
* UTILITY DATA SET.                                                   *
***********************************************************************
 SPACE
         CLI   CADSCODE,CABASIC         IS THIS A 'BASIC' DATA SET
         BNE   RENUMRUN                 IF NO,BRANCH TO RENUMBER
*                                             RUN-TIME DATA SET.
         ST    COMMREG,BASICCOM         IF YES,SET PT TO EDIT COMM AREA
         LA    WR,XKOL
         ST    WR,BASICVAL              SET PT TO VALUES
         MVC   CAPTPDCB(WD),REDCB       SET PT TO NEW UTIL DCB
         IKJEBESH  (COMMREG),IKJEBERN,PARAM=(BASICLST),MF=(E,RESRPLST)
         B     RNCKIT(RETCDREG)        CHECK RETURN CODE
RNCKIT   EQU   *
         B     RENUMRUN                0 SUCCESSFUL
         B     CLOZNEW                 4 ERROR, NO RENUM DONE
         B     IOERR                   8 ERROR IN I/O, CLOSE DS DCB
RENUMRUN EQU   *                       IF YES,RENUM RUN-TIME DATA SET-
         MVC   CAPTPDCB,CAPTCDCB   MOVE CURRENT DCB TO PREVIOUS DCB
         MVC   CAPTCDCB,REDCB      MOVE NEW DCB INTO CURRENT DCB
         LR    PARMREG1,COMMREG    POINT TO COMMAREA
         SR    WR,WR                   ZERO REG
         C     WR,CAPTCHK              IS SYNTAX CHECKER THERE
         BE    NOMRX                   IF NOT, DONT REDO POLISH DS
         IKJEBESH  (COMMREG),IKJEBEMR,PARAM=((COMMREG)),MF=(E,RESRPLST)
         B     MRCKIT(RETCDREG)    CHECK RENUM RETCODE
NOMRX    SR    RETCDREG,RETCDREG       ZERO RETURN CODE REG
MRCKIT   EQU   *
         B     CLOZOLDA            RC 0 OK, CLEAN UP
         B     CLOZNEWA            RC 4 MR FAILED, CLEAN UP
         B     SETRC16                 RC 8 SET RC 16
         NI    CASYNCD2,X'FF'-RENOSW   RESET RENUM SW
         B     EGGSITA                 BRANCH TO EXIT
SETRC16  EQU   *
         LA    WR,HAFREG               SET RETURN CODE
         ST    WR,REKODE               TO 16
         B     CLOZNEWA                AND TERMINATE
         EJECT
RECALLDX EQU   *                                                 Y02676
**************************************************************** Y02676
*                                                                Y02676
* THE SUBROUTINE BELOW IS CALLED FOR RENUMBER OF A DATA SET TYPE Y02676
* HAVING AN ASSOCIATED DATA EXIT ROUTINE.                        Y02676
*                                                                Y02676
**************************************************************** Y02676
         SPACE 2
*        PARAMETERIZE IKJEBEDC INTERFACE AND CALL IKJEBEDC TO    Y02676
*        CREATE AN IN-CORE COPY OF THE UTILITY DATA SET          Y02676
         SPACE 2
         LA    PARMREG1,REDCPRML        OBTAIN PARMLIST ADDR.    Y02676
         ST    COMMREG,REDCPTCA         INIT. WORK AREA PTR.     Y02676
         LA    WR,REDCOUT               OBTAIN ADDR OF OUTPUT    Y02676
*                                       AREA FOR IKJEBEDC        Y02676
         ST    WR,REDCOUTP              STORE PTR IN PARMLIST    Y02676
         LA    PARMREG0,REDCEC4         SPECIFY ENTRY CODE 4     Y02676
*                                       TO OBTAIN IN-CORE DATA   Y02676
*                                       SET IN SUBPOOL 1.        Y02676
         CALL  IKJEBEDC                 INVOKE IN-CORE COPY RTN  Y02676
         LA    WR,L4                    OBTAIN A CONSTANT OF 4   Y02676
         CR    RETCDREG,WR              CHECK FOR NORMAL RETURN  Y02676
         BL    REDX0100                 IF SUCCESSFUL, BRANCH TO Y02676
*                                       CONTINUE PROCESSING      Y02676
         BCR   HIGH,BALREG              RETURN ON ERROR COND.    Y02676
         SPACE 2
*        FALL THROUGH ON RETURN CODE 4 TO ISSUE 'EMPTY DATA SET' Y02676
*        MESSAGE AND RETURN TO MAIN CSECT WITH ERROR CODE 8.     Y02676
         SPACE 2
         IKJEBEML ,,,,MF=(E,LMT)        ISSUE MESSAGE.           Y02676
         L     RETCDREG,RET8            SET ERROR CODE 8         Y02676
         BR    BALREG                   RETURN TO MAIN CSECT     Y02676
         EJECT
*        PARAMETERIZE FOR IKJEBEDX INTERFACE AND CALL IKJEBEDX   Y02676
*        TO INVOKE DATA EXIT ROUTINE.  UPON COMPLETION, RETURN   Y02676
*        MAINLINE CODE WITH IKJEBEDX RETURN CODE.                Y02676
         SPACE 2
REDX0100 EQU   *                                                 Y02676
         L     WR,CAPTUPT               OBTAIN ADDRESS OF UPT    Y02676
         ST    WR,REDXPUPT              STORE IN EXIT PARMLIST   Y02676
         L     WR,CAPTECT               OBTAIN ADDRESS OF ECT    Y02676
         ST    WR,REDXPECT              STORE IN EXIT PARMLIST   Y02676
         LA    WR,CAATTN                OBTAIN ADDR OF ATTN ECB  Y02676
         ST    WR,REDXPECB              STORE IN EXIT PARMLIST   Y02676
         L     WR,REDCPICD              OBTAIN IN-CORE DATA SET  Y02676
*                                       ADDRESS                  Y02676
         LA    WR,D0(,WR)               CLEAR HIGH-ORDER BYTE    Y02676
         ST    WR,REDXPICD              STORE IN EXIT PARMLIST   Y02676
         OI    REDXFLGS,REDXRNUM        SPECIFY RENUM OPERATION  Y02676
         TM    REMYFLAG,ORIGNUM         CHECK FOR 'NONUM' DATA   Y02676
*                                       SET TO RENUMBER          Y02676
         BO    REDX0200                 IF 'NUM', CONTINUE       Y02676
*                                       PROCESSING               Y02676
         OI    REDXFLGS,REDXNONM        IF 'NONUM', SET FLAG     Y02676
REDX0200 TM    CACFLAG2,CARECFM         CHECK FOR FIXED RECORDS  Y02676
         BZ    REDX0300                 IF VARIABLE, CONTINUE    Y02676
*                                       PROCESSING               Y02676
         OI    REDXFLGS,REDXRFMF        IF FIXED, SET FLAG       Y02676
REDX0300 L     WR,REDCDLEN              OBTAIN DATA SET LENGTH   Y02676
         ST    WR,REDXDLEN              STORE IN ATTRIBUTES AREA Y02676
         L     WR,REDCLRCL              OBTAIN LRECL OF DATA SET Y02676
         ST    WR,REDXLRCL              STORE IN ATTRIBUTES AREA Y02676
         LA    WR,REDXATTR              OBTAIN ADDRESS OF        Y02676
*                                       ATTRIBUTES AREA          Y02676
         ST    WR,REDXPATR              STORE IN EXIT PARMLIST   Y02676
         LA    WR,REDXSCIF              OBTAIN PTR TO SUBCOMMAND Y02676
*                                       INTERFACE AREA           Y02676
         ST    WR,REDXPSCI              STORE IN EXIT PARMLIST   Y02676
         SR    WR,WR                    CLEAR REG. FOR INSERT    Y02676
         IC    WR,CALINE                OBTAIN SEQUENCE NO. POS. Y02676
         ST    WR,REDXSPOS              STORE IN INTERFACE       Y02676
         IC    WR,CALENGTH              OBTAIN SEQUENCE NO. LEN. Y02676
         ST    WR,REDXSLEN              STORE IN INTERFACE       Y02676
         LTR   WR,OLDLINO               OBTAIN 'OLD LINENUM'     Y02676
         BNM   REDX0400                 IF SET, BR TO PROCESS    Y02676
         SR    WR,WR                    IF NOT, SET ZERO VALUE   Y02676
REDX0400 ST    WR,REDXOLDL              SET 'OLD LINENUM' VALUE  Y02676
         LR    WR,LINELAST              OBTAIN 'END LINENUM'     Y02676
         C     WR,REMAXNUM              COMPARE TO MAX VALUE     Y02676
         BNE   REDX0500                 IF NOT EQ., BYPASS RESET Y02676
         L     WR,REMAXPOS              RESET TO MAX. INTEGER    Y02676
REDX0500 ST    WR,REDXENDL              SET 'END LINENUM' VALUE  Y02676
         ST    LINO,REDXNEWL            SET 'NEW LINENUM' VALUE  Y02676
         ST    INCR,REDXINCR            SET INCREMENT VALUE      Y02676
         L     WR,REDCPCLR              OBTAIN ADDRESS OF        Y02676
*                                       CURRENT REFERENCE LINE   Y02676
*                                       (IN IN-CORE DATA SET)    Y02676
         ST    WR,REDXPCLR              STORE IN INTERFACE       Y02676
         LA    PARMREG1,REDXPLST        OBTAIN ADDR. OF IKJEBEDX Y02676
*                                       PARAMETER LIST           Y02676
         LA    WR,REDXELST              OBTAIN EXIT PARMLIST PTR Y02676
         ST    WR,REDXPPRM              STORE IN IKJEBEDX LIST   Y02676
         ST    COMMREG,REDXPTCA         SET WORK AREA PTR IN     Y02676
*                                       PARAMETER LIST           Y02676
         CALL  IKJEBEDX                 CALL DATA EXIT EXECUTOR  Y02676
         BR    BALREG                   RETURN TO MAIN LINE CODE Y02676
         EJECT
***********************************************************************
* THE FOLLOWING CODE ISSUES DIAGNOSTIC MESSAGES                       *
***********************************************************************
 SPACE
PARSERR  MVC   IN1(IN2-IN1),REPARSE     MOVE NAME OF ROUTINE TO INSERT
         B     SRERROR                  BR TO SET UP PARMLISTS
SYNCKERR MVC   IN1(IN2-IN1),RESCHK      MOVE NAME OF CHKR TO INSERTION
SRERROR  MVC   LEVEL1(MSGLISTL),SRERR   FILL IN LEV1 PARMLIST
         LA    WR,IN1                   CHAIN
         ST    WR,L2INPT                PARMLISTS
         LA    WR,IN2                   CHAIN
         ST    WR,IN1                   PARMLISTS
         MVC   IN2(DUBLWD),M313INB      FILL IN INSERT2 PLIST
         SRL   RETCDREG,PARMREG1        SHIFT R15 FOR INDEXING
         LH    WR,RECDTAB(RETCDREG)     PICK UP PRINTABLE CHARACTER
         STH   WR,IN2INS                STORE IN INSERTION
         IKJEBEML ,,,,MF=(E,RE10AREA)   LINK TO IKJEBEMS TO PUT ERR MSG
         B     EGGSITA             BRANCH TO EXIT
         EJECT
**************************************************************** Y02676
* THE FOLLOWING SUBROUTINE IS A PARSE VALIDITY CHECK EXIT FOR    Y02676
* THE 'INCREMENT' OPERAND.  THE EXIT ENSURES THAT THE TERMINAL   Y02676
* USER SUPPLIES A NON-ZERO INCREMENT VALUE.                      Y02676
**************************************************************** Y02676
         SPACE 2
REINCRCK EQU   *                                                 Y02676
         IKJEBESV (14,12),,,COMMREG=WD(PARMREG1) ENTRY LINKAGE   Y02676
         SR    RETCDREG,RETCDREG        SET TENTATIVE R. C.      Y02676
         L     RETREG,D0(,PARMREG1)     OBTAIN PDE PTR           Y02676
         LH    WR,OPRNDLNG(,RETREG)     OBTAIN OPERAND LENGTH    Y02676
         L     RETREG,D0(,RETREG)       OBTAIN OPERAND ADDRESS   Y02676
         BCTR  WR,PARMREG0              DECREMENT LEN. FOR CLC   Y02676
         EX    WR,REINCRCL              COMPARE OPERAND TO 0'S   Y02676
         BNE   REINCREX                 IF NON-ZERO, RETURN      Y02676
*                                       NORMALLY TO PARSE        Y02676
         LA    RETCDREG,L4              IF ZERO, REQUEST PARSE   Y02676
*                                       TO PROMPT FOR A VALID    Y02676
*                                       INCREMENT                Y02676
REINCREX IKJEBERT (14,12),,RC=(15)      RETURN TO IKJPARS        Y02676
         SPACE 2
* THE INSTRUCTION FOLLOWING IS THE CLC FOR THE VALIDITY CHECK    Y02676
* OF THE INCREMENT OPERAND                                       Y02676
REINCRCL CLC   RECHAR0(*-*),D0(RETREG)  CHECK FOR ZERO INCREMENT Y02676
         EJECT
***********************************************************************
*                             CONSTANTS                               *
***********************************************************************
 SPACE
* OBJECTS OF 'EXECUTE' INSTRUCTIONS -
 SPACE
PAK      PACK  CATEMPBF(DUBLWD),O(O,PARMREG1) CONVERT OLD-LINENUM,
*                                       NEW-LINENUM,OR INCREMENT
*                                       FROM ZONED TO PACKED
*                                       DECIMAL
NUMBCLC  CLC   O(O,WR),BLANKNUM         CMP SEQUENCE FIELD AREA OF
*                                       RECORD WITH BLANKS
REINSMVC MVC   D0(*-*,PARMREG1),D0(RETREG) MOVE INSERTION        Y02676
         EJECT
* MESSAGE SELECTION PARAMETER LISTS AND FORMATTED INSERTIONS -
 SPACE
LMSG0    DC    A(0)                    PT TO 2ND INSERTION
         DC    AL2(76)                 LNG OF MSG
         DC    AL2(0)                  OFFSET
LMT      IKJEBEML M501,0,0,0,MF=L
MSGLISTL EQU   *-LMT
LINTRC   IKJEBEMG 0,M507IN1,'0'        FILL CHAR FOR 'EDMK' INSTRUC
         DC    9X'20'                  DIGIT SELECT BYTE
LINTRCL  EQU   *-LINTRC
LNGIS    IKJEBEMG 0,M5071IN1,' ' FILL CHAR FOR 'EDMK'
         DC    3X'20'                  DIGIT SELECT BYTE
LNGISL   EQU   *-LNGIS
LCROWDED IKJEBEML M312,0,RENXX,0,MF=L
RENXX    IKJEBEMG ,M312IN1,'RENUM'
LINVRANG IKJEBEML M503,0,0,0,MF=L
SRERR    IKJEBEML M313,M3131,0,0,MF=L
NEWLNERR IKJEBEML M574,M5741,0,0,MF=L                            Y02676
PARTRNMS IKJEBEML M575,M5751,0,0,MF=L                            Y02676
PARTBSIC IKJEBEML M577,0,0,0,MF=L                                Y02676
PRVLINS  IKJEBEMG 0,M5741IN2,'0'        FILL CHAR. FOR EDMK OP.  Y02676
         DC    9X'20'                   DIGIT SELECT BYTE        Y02676
PRVLINSL EQU   *-PRVLINS                LENGTH OF INSERTION LIST Y02676
REPARSE  IKJEBEMG 0,M3131IN1,'PARSE'
RESCHK   IKJEBEMG 0,M3131IN1,'IXXXXXXX'
LIMPOSSI IKJEBEML M560,0,0,0,MF=L
MOLNZ    IKJEBEMG 0,M504IN1,'0'
 SPACE
* MISCELLANEOUS -                                                A45155
         SPACE
PCL@     DC    V(IKJEBRE4)    ADDRESS OF PARSE PCL               A45155
RC12     DC    F'12'          I/O ERROR RETURN CODE              A45155
BLANKNUM DC    CL8' '         BLNK FLD TO CMP W/ SEQ NO. FLD     A45155
RECDTAB  DS    0H                       TABLE OF PRINTABLE       A45155
         DC    C'  040812'              CHARACTERS               A45155
M313INB  DC    A(0)                     PTR TO SECOND INSERTION  A45155
         DC    AL2(OPRNDEX)             LENGTH OF INSERTION      A45155
         DC    AL2(M3131IN2)            PTR TO INSERTION POINT   A45155
RET8     DC    F'8'                     RC FOR FLUSH STACK       A45155
REMAXNUM DC    F'99999999'              MAXIMUM LINE NO. VALUE   Y02676
REMAXPOS DC    X'7FFFFFFF'              MAXIMUM INTEGER VALUE    Y02676
RECHAR0  DC    C'00000000'              STRING OF CHAR. ZEROS    Y02676
         EJECT
**************************************************************** A45155
*                                                                A45155
*    THE FOLLOWING SUBROUTINE IS CALLED WHEN RENUM IS ENTERED    A45155
*    FOR A NONUM DATA SET.  ITS PURPOSE IS TO DETERMINE, WITH    A45155
*    PROMPTING IF NECESSARY, WHETHER RENUMBERING OF THE DATA     A45155
*    SET SHOULD BE ALLOWED.                                      A45155
*                                                                A45155
*    RENUM IS ALLOWED TO CONTINUE WITHOUT PROMPTING WHEN --      A45155
*                                                                A45155
*         (1) THE USER IS A 'NOPROMPT' USER.                     A45155
*         (2) THE CURRENT SOURCE OF INPUT IS A COMMAND           A45155
*             PROCEDURE.                                         A45155
*         (3) THE DATA SET TYPE IS TEXT, AND THE RECORD FORMAT   A45155
*             IS VARIABLE.                                       A45155
*                                                                A45155
*    IF NONE OF THE ABOVE CONDITIONS PERTAINS, A WARNING         A45155
*    MESSAGE IS SENT TO THE TERMINAL EXPLAINING THAT DATA MAY    A45155
*    BE OVERLAID (RECFM=F) OR LINES MAY BE TRUNCATED (RECFM=V).  A45155
*    A MESSAGE IS THEN ISSUED VIA PUTGET, ENABLING THE USER TO   A45155
*        (1) CONTINUE RENUM OR                                   A45155
*        (2) ENTER ANOTHER SUBCOMMAND                            A45155
*                                                                A45155
*    RETURN CODES FOR THIS ROUTINE ARE AS FOLLOWS --             A45155
*                                                                A45155
*        00 - CONTINUE RENUMBER OPERATION                        A45155
*        04 - USER SUSPENDED RENUM BY ENTERING SUBCOMMAND        A45155
*        08 - COMMAND SYSTEM ERROR (DIAGNOSED WITH MESSAGE)      A45155
*                                                                A45155
**************************************************************** A45155
         SPACE 2
IKJEBRE1 CSECT                                                   A45155
         IKJEBESV (14,12),,*,COMMREG=NO ENTRY LINKAGE            A45155
         USING IKJEBECA,COMMREG        ESTABLISH ADDRESSABILITY  A45155
*                                      TO COMMUNICATION AREA     A45155
         SR    WR,WR                                             A45155
         STH   WR,RE1RCODE             SET TENTATIVE RC OF ZERO  A45155
         XC    RE1FLAG(L1),RE1FLAG     ZERO CONTROL FLAG BITS    A45155
         SR    ZEROREG,ZEROREG         INITIALIZE ONE REGISTER   A45155
*                                      TO BINARY ZEROES          A45155
         EJECT
*                                                                A45155
*    DETERMINE IF RENUM CAN CONTINUE WITHOUT PROMPTING           A45155
*                                                                A45155
         SPACE
         L     WR,CAPTUPT              OBTAIN ADDRESS OF UPT     A45155
         TM    UPTSWS-UPT(WR),UPTNPRM  CHECK FOR NOPROMPT USER   A45155
         BO    RE1EXIT                 IF SO, RETURN TO MAINLINE A45155
         TM    CACFLAG4,CAINPROC       CHECK FOR PROCEDURE INPUT A45155
         BO    RE1EXIT                 IF SO, RETURN TO MAINLINE A45155
         SR    WR,WR                                             A45155
         IC    WR,CALENGTH             OBTAIN SEQUENCE NUMBER    A45155
*                                      LENGTH                    A45155
         LH    WR1,CALRECL             OBTAIN LRECL              A45155
         TM    CACFLAG2,CARECFM        CHECK RECORD FORMAT       A45155
         BO    RE100500                IF FIXED, BRANCH TO ISSUE A45155
*                                      WARNING MESSAGE           A45155
         CLI   CADSCODE,CATEXT         CHECK FOR TYPE='TEXT'     A45155
         BE    RE1EXIT                 IF TEXT, RETURN TO        A45155
*                                      MAINLINE (FOR TEXT DATA   A45155
*                                      SETS OF VARIABLE RECORD   A45155
*                                      FORMAT, OVERFLOW LINES    A45155
*                                      ARE CREATED WHERE         A45155
*                                      REQUIRED, INSTEAD OF      A45155
*                                      TRUNCATING LINES.)        A45155
         SPACE
*                                                                A45155
*    ISSUE WARNING MESSAGE FOR FORMAT V DATA SETS.               A45155
*                                                                A45155
         SPACE
         LA    WR,L4(,WR)              OBTAIN NUMBER OF BYTES    A45155
*                                      IN CONTROL WORD AND       A45155
*                                      SEQUENCE FIELD            A45155
         SR    WR1,WR                  COMPUTE MAXIMUM NUMBER    A45155
*                                      OF DATA BYTES PER LINE    A45155
         LA    WR,M5692                SET LEVEL-2 RELATIVE MSG  A45155
         STH   WR,RE1LEV2              NO. IN IKJEBEMS PARMLIST  A45155
         LA    WR,M5692IN1             OBTAIN OFFSET AND STORE   A45155
         STH   WR,RE1OFF1              FOR LEVEL-2 INSERTION     A45155
         CVD   WR1,RE1DWORD            CONVERT INSERTION TEXT    A45155
*                                      TO DECIMAL                A45155
         UNPK  RE1TEXT1(L3),RE1DWORD+D6(L2) UNPACK RESULT        A45155
         MVZ   RE1TEXT1+D2(L1),RE1TEXT1+D1 INSURE CORRECTNESS OF A45155
*                                      LAST DIGIT                A45155
         LA    WR2,RE1TEXT1            OBTAIN ADDRESS OF         A45155
*                                      INSERTION TEXT FIELD FOR  A45155
*                                      ZERO SUPPRESSION SUBRTN   A45155
         BAL   RETREG,RE101000         BRANCH TO SUPPRESS ZEROES A45155
         STH   WR,RE1LEN1              STORE LENGTH IN           A45155
*                                      INSERTION LIST            A45155
         ST    ZEROREG,RE1PTR1         SPECIFY ONE INSERTION     A45155
*                                      ONLY                      A45155
         B     RE100520                BRANCH TO PROCESS FIRST-  A45155
*                                      LEVEL MESSAGE             A45155
         EJECT
*                                                                A45155
*   ISSUE WARNING MESSAGE FOR RECORD FORMAT F DATA SETS.         A45155
*                                                                A45155
RE100500 EQU   *                                                 A45155
         LA    WR,M5691                SET LEVEL-2 RELATIVE MSG  A45155
         STH   WR,RE1LEV2              NO. IN IKJEBEMS PARMLIST  A45155
         LA    WR,M5691IN1             OBTAIN OFFSET FOR FIRST   A45155
*                                      LEVEL-2 INSERTION         A45155
         STH   WR,RE1OFF1              STORE OFFSET IN LIST      A45155
         IC    WR,CALINE               OBTAIN SEQUENCE NUMBER    A45155
*                                      START POSITION            A45155
         LR    WR1,ZEROREG             CLEAR REGISTER FOR IC     A45155
         IC    WR1,CALENGTH            OBTAIN SEQ. NO. LENGTH    A45155
         AR    WR1,WR                  COMPUTE LAST POSITION     A45155
         BCTR  WR1,0                   FOR SEQUENCE NUMBER       A45155
         CVD   WR,RE1DWORD             CONVERT START POSITION TO A45155
*                                      DECIMAL                   A45155
         UNPK  RE1TEXT1(L3),RE1DWORD+D6(L2) UNPACK RESULT        A45155
         MVZ   RE1TEXT1+D2(L1),RE1TEXT1+D1 INSURE CORRECTNESS    A45155
*                                      OF LAST DIGIT             A45155
         LA    WR2,RE1TEXT1            OBTAIN ADDRESS OF         A45155
*                                      INSERTION TEXT FIELD      A45155
         BAL   RETREG,RE101000         BRANCH TO SUPPRESS ZEROES A45155
         STH   WR,RE1LEN1              STORE LENGTH OF FIRST     A45155
*                                      INSERTION                 A45155
         LA    WR,RE1PTR2              OBTAIN ADDRESS FOR        A45155
*                                      SECOND INSERTION          A45155
         ST    WR,RE1PTR1              CHAIN INSERTIONS          A45155
         LA    WR,M5691IN2             OBTAIN OFFSET FOR SECOND  A45155
         STH   WR,RE1OFF2              LEVEL-2 INS. AND STORE    A45155
         ST    ZEROREG,RE1PTR2         SPECIFY TWO INSERTIONS    A45155
         CVD   WR1,RE1DWORD            CONVERT END POSITION TO   A45155
*                                      DECIMAL                   A45155
         UNPK  RE1TEXT2(L3),RE1DWORD+D6(L2) UNPACK RESULT        A45155
         MVZ   RE1TEXT2+D2(L1),RE1TEXT2+D1 INSURE CORRECTNESS    A45155
*                                      OF LAST DIGIT             A45155
         LA    WR2,RE1TEXT2            OBTAIN ADDRESS OF INS.    A45155
*                                      TEXT FIELD                A45155
         BAL   RETREG,RE101000         BRANCH TO SUPPRESS ZEROES A45155
         STH   WR,RE1LEN2              STORE INSERTION LENGTH    A45155
*                                                                A45155
*   COMMON FIRST-LEVEL MESSAGE PROCESSING BEGINS HERE.           A45155
*                                                                A45155
RE100520 EQU   *                                                 A45155
         ST    ZEROREG,RE1INSL1        SPECIFY NO FIRST-LEVEL    A45155
*                                      INSERTIONS.               A45155
         LA    WR,RE1PTR1              OBTAIN ADDRESS OF LEVEL-2 A45155
*                                      INSERTION CHAIN           A45155
         ST    WR,RE1INSL2             STORE IN IKJEBEMS PLIST   A45155
         LA    WR,M569                 OBTAIN FIRST-LEVEL        A45155
*                                      RELATIVE MESSAGE NUMBER   A45155
         STH   WR,RE1LEV1              STORE IN PARM LIST        A45155
         BAL   RETREG,RE103000         BRANCH TO ISSUE WARNING   A45155
*                                      MESSAGE                   A45155
         OC    RE1RCODE(L2),RE1RCODE   CHECK IF ERROR OR         A45155
*                                      SUSPENSION BY USER        A45155
         BNZ   RE1EXIT                 IF SO, RETURN TO CALLER   A45155
*                                                                A45155
*    INVOKE PUTGET SERVICE ROUTINE WITH MODE MESSAGE TO          A45155
*    DETERMINE IF USER WISHES TO RENUMBER DATA SET               A45155
*                                                                A45155
RE100550 EQU   *                                                 A45155
         XC    RE1PGPB(L16),RE1PGPB    ZERO PARAMETER BLOCK      A45155
         L     WR,RE1PTRE2             ESTABLISH ADDRESSABILITY  A45155
         USING IKJEBRE2,WR             TO MESSAGE AREA           A45155
         PUTGET PARM=RE1PGPB,OUTPUT=(RE2PGMSG,SINGLE,MODE),      A45155X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),               A45155X
               TERMGET=(EDIT,WAIT),MF=(E,CATMPLST)               A45155
         DROP  WR                      DROP ADDRESSABILITY TO    A45155
*                                      MESSAGES                  A45155
         B     RE100600(RETCDREG)      BRANCH INTO TABLE TO      A45155
*                                      DETERMINE NEXT ACTION     A45155
*                                      BASED ON RETURN CODE      A45155
RE100600 EQU   *                                                 A45155
         B     RE100680                RC=0, BRANCH TO DETERMINE A45155
*                                      USER'S REQUEST            A45155
         B     RE100640                RC=4, INPUT FROM SOURCE   A45155
*                                      OTHER THAN TERMINAL IS    A45155
*                                      A COMMAND SYSTEM ERROR    A45155
         B     RE100695                RC=,, ATTENTION INTERRUPT A45155
         B     RE100620                RC=12, 2ND-LEVEL MESSAGES A45155
*                                      MUST BE FREED, BRANCH     A45155
*                                      TO SET ECT SWITCH AND     A45155
*                                      REISSUE PUTGET            A45155
         B     RE100640                RC=16, COMMAND SYS ERROR  A45155
         B     RE100640                RC=20, COMMAND SYS ERROR  A45155
         B     RE100640                RC=24, COMMAND SYS ERROR  A45155
         B     RE100660                RC=28, NOT ENOUGH MAIN    A45155
*                                      STORAGE                   A45155
RE100620 EQU   *                                                 A45155
         L     WR,CAPTECT              OBTAIN ADDRESS OF ECT     A45155
         OI    ECTMSGF-ECT(WR),REFLAG  SET MESSAGE FLUSH SWITCH  A45155
*                                      ON                        A45155
         B     RE100550                BRANCH TO REISSUE PUTGET  A45155
RE100640 EQU   *                                                 A45155
         OI    RE1FLAG,RE1PGSW         INDICATE PUTGET ERROR     A45155
         BAL   RETREG,RE102000         BRANCH TO FORMAT MESSAGE  A45155
         BAL   RETREG,RE103000         BRANCH TO ISSUE MESSAGE   A45155
         B     RE1EXIT                 BRANCH TO RETURN          A45155
RE100660 EQU   *                                                 A45155
         MVC   RE1MSLST(L12),RE1NOCOR  MOVE PARAMETER LIST TO    A45155
*                                      DYNAMIC AREA              A45155
         MVI   RE1RCODE+D1,RE1RC8      SET R. C. OF 8            A45155
         BAL   RETREG,RE103000         BRANCH TO ISSUE MESSAGE   A45155
         B     RE1EXIT                 BRANCH TO RETURN          A45155
RE100680 EQU   *                                                 A45155
         L     WR,CASRPLST             OBTAIN ADDRESS OF PGPB    A45155
         L     PARMREG1,PGPBIBUF-PGPB(WR) OBTAIN BUFFER ADDRESS  A45155
         LA    PARMREG0,L4             DETERMINE IF BUFFER       A45155
         CH    PARMREG0,D0(,PARMREG1)  CONTAINS A NULL LINE      A45155
         BNE   RE100690                IF NOT, BR TO SET UP      A45155
*                                      NEXT SUBCOMMAND           A45155
         O     PARMREG0,RE1SP1         INDICATE SUBPOOL 1        A45155
         FREEMAIN R,LV=(0),A=(1)       FREE NULL LINE            A45155
         B     RE1EXIT                 BRANCH TO RETURN          A45155
RE100690 EQU   *                                                 A45155
         ST    PARMREG1,CAPTNBFR       STORE ADDRESS OF NEXT     A45155
*                                      SUBCOMMAND IN APPROPRIATE A45155
*                                      BUFFER                    A45155
RE100695 EQU   *                                                 A45155
         OI    RE1RCODE+D1,RE1RC4      SET RC=4, USER ENTERED    A45155
*                                      NEW SUBCOMMAND            A45155
RE1EXIT  EQU   *                                                 A45155
         LH    RETCDREG,RE1RCODE       OBTAIN RETURN CODE FOR    A45155
*                                      MAINLINE IKJEBERE         A45155
         IKJEBERT (14,12),,RC=(15)     RETURN TO MAINLINE RTN    A45155
         EJECT
*                                                                A45155
*    THE FOLLOWING SUBROUTINE SUPPRESSES UP TO 2 LEADING ZEROES  A45155
*    FROM A 3-BYTE CHARACTER DIGIT FIELD                         A45155
*                                                                A45155
         SPACE
RE101000 EQU   *                                                 A45155
         LA    WR,C2                   OBTAIN MAXIMUM NUMBER OF  A45155
*                                      DIGITS TO BE SUPPRESSED   A45155
RE101300 EQU   *                                                 A45155
         CLI   D0(WR2),RE1CZERO        CHECK FOR LEADING ZERO    A45155
         BNE   RE101600                IF NOT, NO FURTHER        A45155
*                                      SUPPRESSION IS NECESSARY  A45155
         MVC   D0(L2,WR2),D1(WR2)      OVERLAY LEADING ZERO      A45155
         BCT   WR,RE101300             DECREMENT COUNT AND       A45155
*                                      BRANCH IF FURTHER         A45155
*                                      SUPPRESSION MAY BE        A45155
*                                      NECESSARY                 A45155
RE101600 EQU   *                                                 A45155
         LA    WR,L5(,WR)              COMPUTE LENGTH OF         A45155
*                                      INSERTION                 A45155
         BR    RETREG                  RETURN                    A45155
         EJECT
*                                                                A45155
*    THIS SUBROUTINE FORMATS ERROR MESSAGES FOR COMMAND SYSTEM   A45155
*    ERRORS.                                                     A45155
*                                                                A45155
         SPACE
RE102000 EQU   *                                                 A45155
         NI    RE1FLAG,X'FF'-RE1PGSW   TURN PUTGET SWITCH OFF    A45155
         BZ    RE102200                IF FIELD IS ZERO, PUTGET  A45155
*                                      SERVICE ROUTINE ERROR     A45155
         MVC   RE1INS1(L15),RE1PLINS   MOVE INSERTION LIST       A45155
*                                      FOR PUTLINE               A45155
         B     RE102400                BRANCH TO HANDLE SECOND   A45155
*                                      INSERTION                 A45155
RE102200 EQU   *                                                 A45155
         MVC   RE1INS1(L14),RE1PGINS   MOVE INSERTION LIST       A45155
*                                      FOR PUTGET                A45155
RE102400 EQU   *                                                 A45155
         CVD   RETCDREG,RE1DWORD       CONVERT SERVICE ROUTINE   A45155
*                                      RETURN CODE TO DECIMAL    A45155
         UNPK  RE1TEXT2-D1(L3),RE1DWORD+D6(L2) UNPACK TO         A45155
*                                      INSERTION AREA            A45155
         MVZ   RE1TEXT2+D1(L1),RE1TEXT2 INSURE CORRECTNESS OF    A45155
*                                      LAST DIGIT                A45155
         LA    WR,D6                   OBTAIN LENGTH OF INSERT   A45155
         STH   WR,RE1LEN2              STORE LENGTH IN LIST      A45155
         LA    WR,M3131IN2             OBTAIN OFFSET FOR INSERT  A45155
         STH   WR,RE1OFF2              STORE OFFSET IN LIST      A45155
         ST    ZEROREG,RE1PTR2         SPECIFY THIS AS LAST      A45155
*                                      INSERTION                 A45155
         LA    WR,RE1PTR2              OBTAIN ADDRESS OF SECOND  A45155
*                                      INSERTION                 A45155
         ST    WR,RE1PTR1              CHAIN SECOND INSERTION TO A45155
*                                      FIRST                     A45155
         LA    WR,M313                 OBTAIN RELATIVE MESSAGE   A45155
*                                      NUMBER FOR FIRST-LEVEL    A45155
         STH   WR,RE1LEV1              STORE MESSAGE NUMBER      A45155
*                                      IN PARAMETER LIST         A45155
         LA    WR,M3131                OBTAIN RELATIVE MESSAGE   A45155
*                                      NUMBER FOR SECOND-LEVEL   A45155
         STH   WR,RE1LEV2              STORE NUMBER IN PARAMETER A45155
*                                      LIST                      A45155
         ST    ZEROREG,RE1INSL1        SPECIFY NO FIRST-LEVEL    A45155
*                                      INSERTIONS                A45155
         LA    WR,RE1PTR1              OBTAIN ADDRESS OF SECOND- A45155
*                                      LEVEL MESSAGE INSERTION   A45155
*                                      CHAIN                     A45155
         ST    WR,RE1INSL2             STORE IN PARAMETER LIST   A45155
         MVI   RE1RCODE+D1,RE1RC8      SPECIFY RETURN CODE 8     A45155
*                                      TO IKJEBERE               A45155
         BR    RETREG                  RETURN                    A45155
         EJECT
*                                                                A45155
*    THE FOLLOWING SUBROUTINE INVOKES THE MESSAGE SELECT ROUTINE A45155
*    FOR TERMINAL OUTPUT OF MESSAGES AND DIAGNOSES ANY PUTLINE   A45155
*    ERRORS THAT MAY OCCUR.                                      A45155
*                                                                A45155
RE103000 EQU   *                       ENTRY LINKAGE             A45155
         IKJEBESV (14,12),,,COMMREG=NO,CODEREG=NO                A45155
         IKJEBEML ,,,,MF=(E,RE1MSLST)  INVOKE MESSAGE SELECT RTN A45155
         TM    RE1FLAG,RE1PLSW         CHECK IF PUTLINE ERROR    A45155
*                                      OCCURRED PREVIOUSLY       A45155
         BO    RE103900                IF SO, RETURN TO CALLER   A45155
         B     RE103100(RETCDREG)      OTHERWISE, BRANCH INTO    A45155
*                                      TABLE BASED ON THE        A45155
*                                      CURRENT PUTLINE R. C.     A45155
RE103100 EQU   *                                                 A45155
         B     RE103900                OUTPUT NORMAL, RETURN TO  A45155
*                                      CALLER                    A45155
         B     RE103900                ATTN ECB POSTED, RETURN   A45155
*                                      TO CALLER                 A45155
         B     RE103300                COMMAND SYSTEM ERROR,     A45155
*                                      DIAGNOSE                  A45155
         B     RE103300                COMMAND SYSTEM ERROR,     A45155
*                                      DIAGNOSE                  A45155
*    BRANCH TO NEXT INSTRUCTION OCCURS FOR GETMAIN FAILURES IN   A45155
*    PUTLINE.  THIS CONDITION IS DIAGNOSED WITH A MESSAGE.       A45155
         MVC   RE1MSLST(L12),RE1NOCOR  MOVE PARAMETERS TO        A45155
*                                      DYNAMIC AREA              A45155
         OI    RE1RCODE+D1,RE1RC8      SET RETURN CODE OF 8      A45155
         OI    RE1FLAG,RE1PLSW         INDICATE PUTLINE ERROR    A45155
         BAL   RETREG,RE103000         BRANCH TO ISSUE MESSAGE   A45155
         B     RE103900                RETURN TO CALLER          A45155
RE103300 EQU   *                                                 A45155
         OI    RE1FLAG,RE1PLSW         INDICATE PUTLINE ERROR    A45155
         BAL   RETREG,RE102000         BRANCH TO FORMAT MESSAGE  A45155
         BAL   RETREG,RE103000         BRANCH TO ISSUE MESSAGE   A45155
RE103900 EQU   *                                                 A45155
         IKJEBERT (14,12)              RETURN TO CALLER          A45155
         EJECT
**************************************************************** A45155
*                                                                A45155
*    LOCAL STORAGE CONSTANTS FOR THIS ROUTINE                    A45155
*                                                                A45155
**************************************************************** A45155
         SPACE
RE1NOCOR IKJEBEML M312,,RE1NCINS,,MF=L GENERATE PARAMETER LIST   A45155X
                                       FOR INSUFFICIENT STORAGE  A45155X
                                       MESSAGE                   A45155
         SPACE
RE1NCINS IKJEBEMG 0,M312IN1,'RENUM' INSERTION LIST FOR MESSAGE   A45155X
                                       ABOVE                     A45155
         SPACE
RE1PLINS IKJEBEMG 0,M3131IN1,'PUTLINE' INSERTION FOR COMMAND     A45155X
                                       SYSTEM ERROR MESSAGE      A45155
         SPACE
RE1PGINS IKJEBEMG 0,M3131IN1,'PUTGET'  INSERTION FOR COMMAND     A45155X
                                       SYSTEM ERROR MESSAGE      A45155
         SPACE
RE1PTRE2 DC    V(IKJEBRE2)             ADDRESS OF MESSAGE CSECT  A45155
*                                      FOR IKJEBERE              A45155
RE1SP1   DS    0F                      SUBPOOL 1 MAXK FOR        A45155
         DC    X'01000000'             SETTING HIGH ORDER BYTE   A45155
*                                      OF REGISTER TO HEX 01     A45155
         EJECT
IKJEBRE2 CSECT                         MESSAGE CSECT             A45155
         SPACE
RE2PGMSG DS    0F                      MODE MESSAGE OUTPUT DESC. A45155
RE2SEGNO DC    F'1'                    MESSAGE HAS ONE SEGMENT   A45155
RE2MSGPT DC    A(RE2TEXT)              ADDRESS OF MESSAGE PROPER A45155
RE2TEXT  DS    0F                      MESSAGE TEXT              A45155
         DC    AL2(RE2MSEND-*)         LENGTH OF SEGMENT         A45155
         DC    AL2(0)                  ALWAYS ZERO               A45155
         DC    C' HIT CARRIER RETURN TO RENUMBER OR ENTER A NEW SUBCOMMX
               AND-'                   MESSAGE TEXT              A45155
RE2MSEND EQU   *                       END OF LIST               A45155
 EJECT
***********************************************************************
* MACROS TO GENERATE PARAMETER CONTROL LIST AND PROVIDE SYMBOLIC      *
* REFERENCE TO PARAMETER DESCRIPTOR LIST                              *
***********************************************************************
IKJEBRE4 IKJPARM DSECT=RENUMPDL
NEWLINUM IKJIDENT 'LINE NUMBER',ASIS,MAXLNTH=8,FIRST=NUMERIC,          C
               OTHER=NUMERIC
INCRMENT IKJIDENT   'INCREMENT',ASIS,MAXLNTH=8,FIRST=NUMERIC,          C
               OTHER=NUMERIC,VALIDCK=REINCRCK,HELP='VALUE BETWEEN 1 ANDX
                THE MAXIMUM LINE NUMBER VALUE'                   Y02676
OLDLINUM IKJIDENT 'LINE NUMBER',ASIS,MAXLNTH=8,FIRST=NUMERIC,          C
               OTHER=NUMERIC
ENDLINUM IKJIDENT 'LINE NUMBER',ASIS,MAXLNTH=8,FIRST=NUMERIC,    Y02676X
               OTHER=NUMERIC                                     Y02676
         IKJENDP
 SPACE
 EJECT
         IKJEBECA
         EJECT
 SPACE
***********************************************************************
* STRUCTURE OF SUBCOMMAND WORKAREA AS USED BY IKJEBERE                *
***********************************************************************
 SPACE
         ORG   CASCWKA                 BEGNG OF WORKAREA
RESRPLST DS    5F                      SERVICE RTN PARM LISTT
 SPACE
REUTPLST DS    0F                      IKJEBEUT PARM LIST
REDCB@   DS    F                       PT TO UTILITY DCB
REKEY@   DS    F                       PT TO 4-BYTE BINARY KEY
REBFR@   DS    F                       PT TO BUFFER
REUTKEY  DS    F                       KEY
 SPACE
         ORG   CASCWKA                 BEGNG OF WORKAREA
RE10AREA DS    10F                     MSG SELECTION PARM LIST
LEVEL1   EQU   RE10AREA                BEGINNING OF MSG PARMLIST
L1INPT   EQU   LEVEL1+4                PTR TO LEV1 INSERT1 PLIST
L2INPT   EQU   LEVEL1+8                PTR TO LEV2 INSERT1 PLIST
IN1      EQU   LEVEL1+12               BEGINNING OF LEV1 INSERT1 PLIST
IN1INS   EQU   IN1+8                   INSERTION1
IN2      EQU   IN1INS+8                BEGINNING OF LEV2 INSERT1 PLIST
IN2INS   EQU   IN2+8                   INSERTION2
 SPACE
M507INS  DS    F                       MSG INSERTION
         DS    F                       LNG & OFFSET
PATTERN1 DS    10C                     PATTERN FLD FOR 'EDMK'
         DS    2C                      FILLER
M507INS2 DS    F                       MSG INSERTION
         DS    F                       LNG & OFFSET
PATTERN2 DS    F                       PATTRN FLD FOR 'EDMK'
         SPACE 2
         ORG   CASCWKA                                           Y02676
         DS    D                       RESERVED AREA FOR CVD OP. Y02676
REMSLIST DS    0F                      PARAMETER LIST - IKJEBEMS Y02676
REMSLEV1 DS    H                       RELATIVE LEVEL-1 MESSAGE  Y02676
REMSLEV2 DS    H                       RELATIVE LEVEL-2 MESSAGE  Y02676
REMSINS1 DS    A                       ADDRESS OF LEVEL-1        Y02676
*                                      INSERTION CHAIN           Y02676
REMSINS2 DS    A                       ADDRESS OF LEVEL-2        Y02676
*                                      INSERTION CHAIN           Y02676
REINS1   DS    0F                      INSERTION LIST 1          Y02676
REINS1PT DS    A                       NEXT INSERTION PTR        Y02676
REINS1LN DS    H                       INSERTION LENGTH          Y02676
REINS1OF DS    H                       INSERTION OFFSET          Y02676
REINS1TX DS    CL12                    INSERTION TEXT            Y02676
REINS2   DS    0F                      INSERTION LIST 2          Y02676
REINS2PT DS    A                       NEXT INSERTION PTR        Y02676
REINS2LN DS    H                       INSERTION LENGTH          Y02676
REINS2OF DS    H                       INSERTION OFFSET          Y02676
REINS2TX DS    CL12                    INSERTION TEXT            Y02676
REINS3   DS    0F                      INSERTION LIST 3          Y02676
REINS3PT DS    A                       NEXT INSERTION PTR        Y02676
REINS3LN DS    H                       INSERTION LENGTH          Y02676
REINS3OF DS    H                       INSERTION OFFSET          Y02676
REINS3TX DS    CL12                    INSERTION TEXT            Y02676
         SPACE 2
*        CONTROL INFORMATION FOR THIS ROUTINE                    Y02676
         SPACE 2
REKODE   DS    F                       RETURN CODE SAVE AREA
 SPACE
REDCB    DS    F                       PT TO NEW UTILITY DCB
REMYFLAG DS    X                       INTERNAL SWITCHES
NOLINE   EQU   X'01'                   ON-EMPTY DATA SET/OFF-NOT A42941
ORIGNUM  EQU   X'04'                   ON-DS ORIG NUMBERED/OFF-NOT
ISSTRUNK EQU   X'80'                   ON-ISSUE 'TRUNCATED' MSG
DATXFLAG EQU   X'40'                   ON-DATA EXIT RTN PRESENT  Y02676
         DS    3X                      FILLER
RE1STLIN DS    F                       STARTING LINE NO.
REOLDKEY DS    F                       KEY FROM LAST RECORD READ
RELINLIN DS    F                       LAST INPUT LINE NUMBER
RECURLIN DS    F                       CURRENT LINE REFERENCE
 SPACE
         SPACE 2
*        IKJEBERN (BASIC RENUM) INTERFACE                        Y02676
         SPACE 2
XKINTFAC DS    F                       INTERFACE WITH SYNTAX CHECKER
XKOL     DS    F                       OLD-LINENUM
XKNU     DS    F                       NEW-LINENUM
XKINK    DS    F                       INCREMENT
BASICLST DS    0F                      PARM LIST FOR 'BASIC' RENUM
BASICCOM DS    A                       PT EDIT'S COMM AREA
BASICVAL DS    A                       PT TO VALUES
         SPACE 2
*        WORK AREA FOR IKJEBRE1 CSECT                            Y02676
         SPACE 2
RE1MSLST DS    0F                      MESSAGE PARAMETER LIST    A45155
RE1LEV1  DS    H                       RELATIVE MESSAGE NUMBER   A45155
*                                      FOR LEVEL-1 MESSAGE       A45155
RE1LEV2  DS    H                       RELATIVE MESSAGE NUMBER   A45155
*                                      FOR LEVEL-2 MESSAGE       A45155
RE1INSL1 DS    A                       PTR TO FIRST-LEVEL        A45155
*                                      INSERTION CHAIN           A45155
RE1INSL2 DS    A                       PTR TO SECOND-LEVEL       A45155
*                                      INSERTION CHAIN           A45155
         SPACE
RE1INS1  DS    0F                      FIRST GENERAL AREA FOR    A45155
*                                      INSERTION LISTS           A45155
RE1PTR1  DS    A                       PTR TO NEXT INSERTION     A45155
RE1LEN1  DS    H                       LENGTH OF INSERTION       A45155
RE1OFF1  DS    H                       OFFSET OF INSERTION       A45155
RE1TEXT1 DS    8C                      TEXT OF INSERTION         A45155
         SPACE
RE1INS2  DS    0F                      SECOND GENERAL AREA       A45155
*                                      FOR INSERTION LIST        A45155
RE1PTR2  DS    A                       PTR TO NEXT INSERTION
RE1LEN2  DS    H                       LENGTH OF INSERTION       A45155
RE1OFF2  DS    H                       OFFSET OF INSERTION       A45155
RE1TEXT2 DS    8C                      TEXT OF INSERTION         A45155
         SPACE
RE1DWORD DS    D                       DOUBLE WORD FOR CVD OPS   A45155
RE1PGPB  DS    4F                      PUTGET PARM BLOCK         A45155
RE1RCODE DS    H                       RETURN CODE SAVE AREA     A45155
RE1FLAG  DS    X                       CONTROL FLAG FOR SUBRTN   A45155
RE1PGSW  EQU   X'80'                   INDICATES ERROR IN PUTGET A45155
RE1PLSW  EQU   X'40'                   INDICATES ERROR IN PUTL.  A45155
         SPACE 2
*        IKJEBEDC PARAMETERS                                     Y02676
         SPACE 2
REDCPRML DS    0F                       IKJEBEDC PARAMETER LIST  Y02676
REDCPTCA DS    A                        COMMUNICATION AREA PTR   Y02676
REDCOUTP DS    A                        ADDRESS OF OUTPUT AREA   Y02676
         SPACE 2
REDCOUT  DS    0F                       IKJEBEDC OUTPUT AREA     Y02676
REDCPICD DS    A                        IN-CORE D. S. ADDRESS    Y02676
REDCDLEN DS    F                        IN-CORE D. S. LENGTH     Y02676
REDCLRCL DS    F                        IN-CORE D. S. LRECL      Y02676
REDCPCLR DS    A                        ADDRESS OF CURRENT LINE  Y02676
         SPACE 2
REDCEC4  EQU   4                        ENTRY CODE 4 (SUBPOOL 1  Y02676
*                                       GETMAIN REQUEST)         Y02676
         SPACE 2
*        IKJEBEDX PARAMETERS                                     Y02676
         SPACE 2
REDXPLST DS    0A                       IKJEBEDX PARAMETER LIST  Y02676
REDXPPRM DS    A                        EXIT PARAMETER LIST PTR  Y02676
REDXPTCA DS    A                        COMMUNICATION AREA PTR   Y02676
         SPACE
REDXELST DS    0A                       EXIT ROUTINE PARMLIST    Y02676
REDXPUPT DS    A                        ADDRESS OF UPT           Y02676
REDXPECT DS    A                        ADDRESS OF ECT           Y02676
REDXPECB DS    A                        ATTENTION ECB ADDRESS    Y02676
REDXPICD DS    0A                       IN-CORE DATA SET PTR     Y02676
REDXFLGS DS    X                        FLAG BYTE                Y02676
REDXNONM EQU   X'80'                    LINE NUMBERED DATA SET - Y02676
*                                       1 - NO/ 0 - YES          Y02676
REDXRNUM EQU   X'40'                    RENUM SUBCOMMAND         Y02676
REDXRFMF EQU   X'04'                    FIXED RECORD FORMAT -    Y02676
*                                       1 - YES/ 0 - NO          Y02676
         DS    AL3                      IN-CORE DATA SET PTR     Y02676
REDXPSCI DS    A                        ADDRESS OF SUBCOMMAND    Y02676
*                                       INTERFACE                Y02676
REDXPATR DS    A                        ADDRESS OF DATA          Y02676
*                                       ATTRIBUTES AREA          Y02676
         SPACE
REDXATTR DS    0F                       DATA ATTRIBUTES AREA     Y02676
REDXLRCL DS    F                        DATA SET LRECL           Y02676
REDXDLEN DS    F                        DATA SET LENGTH          Y02676
         SPACE
REDXSCIF DS    0A                       SUBCOMMAND INTERFACE     Y02676
REDXSPOS DS    F                        SEQ. NO. POSITION        Y02676
REDXSLEN DS    F                        SEQ. NO. LENGTH          Y02676
REDXOLDL DS    F                        FIRST LINE TO BE         Y02676
*                                       RENUMBERED               Y02676
REDXENDL DS    F                        LAST LINE TO BE          Y02676
*                                       RENUMBERED               Y02676
REDXNEWL DS    F                        FIRST SEQUENCE NO. TO BE Y02676
*                                       ASSIGNED                 Y02676
REDXINCR DS    F                        INCREMENT VALUE          Y02676
REDXPCLR DS    A                        ADDRESS OF CURRENT LINE  Y02676
         EJECT
         IKJPPL
         IKJECT                        ECT MAPPING MACRO         A45155
         EJECT
         IKJPGPB                       PUTGET PARM BLOCK         A45155
         IKJUPT                        UPT MAPPING MACRO         A45155
         EJECT
IKJEBERE CSECT                         RESUME 'RENUMBER' CTRL SECT
 EJECT
***********************************************************************
*                             EQUATES                                 *
***********************************************************************
 SPACE
* REGISTERS -
 SPACE
PARMREG0 EQU   0                       PARAMETER REGISTER
PARMREG1 EQU   1                       PARAMETER REGISTER
WR1      EQU   1                       WORKING REGISTER          A45155
WR2      EQU   2                       WORKING REGISTER          A45155
BALREG   EQU   3                        LINKAGE REGISTER         Y02676
ZEROREG  EQU   3                       REGISTER TO CONTAIN       A45155
*                                      ZEROES FOR MSG FORMAT     A45155
LINELAST EQU   4                       ENDING LINE OF RANGE      Y02676
LINOLENG EQU   5                       LENGTH OF SEQUENCE FIELD
LINO     EQU   6                       'NEW-LINENUM'
INCR     EQU   7                       'INCREMENT'
OLDLINO  EQU   8                       'OLD-LINENUM'
BEGNG    EQU   8                       PTR TO LEFT DATA BYTE
COMMREG  EQU   9                       EDIT COMM AREA BASE REG
PDLBASE  EQU   10                      PARM DESCRIPTOR LIST BASE REG
BASEREG  EQU   11                      GENERAL BASE REGISTER
DATAREG  EQU   12                      NOT USED
WR       EQU   12                      WORKING REGISTER
SAVEREG  EQU   13                      SAVE AREA ADDRESS
RETREG   EQU   14                      RETURN POINT ADDRESS
RETCDREG EQU   15                      RETURN CODE
CALDRTN@ EQU   15                      ADDRESS OF CALLED ROUTINE
OVERFLOW EQU   15                      LENGTH OF OVERFLOW RECORD
 SPACE
* CONSTANTS -
 SPACE
O        EQU   0                       ZERO
BYTE     EQU   1                       LENGTH ONE
HAFWD    EQU   2                       LENGTH OF HALF WORD
WD       EQU   4                       LENGTH OF FULL WORD
DUBLWD   EQU   8                       LENGTH OF DOUBLE WORD
HAFREG   EQU   16                      LENGTH OF SHIFT
C2       EQU   2                       CONSTANT OF 2             A45155
L1       EQU   1                       LENGTH OF 1               A45155
L2       EQU   2                       LENGTH OF 2               A45155
L3       EQU   3                       LENGTH OF 3               A45155
L4       EQU   4                       LENGTH OF 4               A45155
L5       EQU   5                       LENGTH OF 5               A45155
L10      EQU   10                      LENGTH OF 10              Y02676
L12      EQU   12                      LENGTH OF 12              A45155
L14      EQU   14                      LENGTH OF 14              A45155
L15      EQU   15                      LENGTH OF 15              A45155
L16      EQU   16                      LENGTH OF 16              A45155
D0       EQU   0                       DISPLACEMENT OF 0         A45155
D1       EQU   1                       DISPLACEMENT OF 1         A45155
D2       EQU   2                       DISPLACEMENT OF 2         A45155
D6       EQU   6                       DISPLACEMENT OF 6         A45155
D7       EQU   7                       DISPLACEMENT OF 7         A45155
D8       EQU   8                       DISPLACEMENT OF 8         A45155
RE1RC4   EQU   X'04'                   RETURN CODE 4 INDIC.      A45155
RE1RC8   EQU   X'08'                   RETURN CODE 8 INDIC.      A45155
RE1CZERO EQU   C'0'                    CHARACTER ZERO            A45155
SP1      EQU   1                       INDICATION FOR SUBPOOL 1  A45155
DEFLINUM EQU   10                      DEFAULT NEW-LINENUM
DATALNG  EQU   251                     MAX DATA LENGTH
ZERO     EQU   C'0'                    ZERO
BLNK     EQU   C' '                    BLANK
REFLAG   EQU   X'80'                   FLAG FOR END OF PARM LIST
OPRNDLNG EQU   4                       OFFSET IN PDL FOR LNG
OPRNDEX  EQU   6                       OFFSET IN PDL FOR OPERAND
RENOSW   EQU   X'10'                   SWITCH TO IND RENUM
XKMSGL   EQU   72                      LNG OF SYN CHKR ERROR MSGS
HIGH     EQU   2                       HIGH CONDITION FOR COMP.  Y02676
 SPACE
* IKJEBEUT OPTION CODES -
READ1ST  EQU   X'04'                   READ 1ST RCD OF DATA SET
READPREV EQU   X'01'                   READ PREVIOUS
READNEXT EQU   X'02'                   READ CURRENT
WRITERCD EQU   X'21'                   WRITE SEQUENTIAL        @Y30NQKG
READWKEY EQU   X'00'                   READ CURRENT
 SPACE
* STRUCTURE OF BUFFER AREAS (IN EDIT COMMUNICATION AREA) -
 SPACE
REINAREA EQU   CABFRPL
REKEY    EQU   REINAREA
RELL     EQU   REINAREA+4
REDATA   EQU   REINAREA+8
RETEMP   EQU   CABFRPL+264
REOFLO   EQU   CABFRPL+264
REKEY2   EQU   REOFLO
RELL2    EQU   REOFLO+4
REDATA2  EQU   REOFLO+8
 SPACE
* MESSAGE NUMBERS AND OFFSETS -
 SPACE
         IKJEBEMI (0,312,313,501,502,503,504,507,560,569,        Y02676X
               574,575,577)            MESSAGE DEFINITIONS       Y02676
PATTERNL EQU   10                      LNG OF 'EDMK' PATTERN FIELD
         END   IKJEBERE
