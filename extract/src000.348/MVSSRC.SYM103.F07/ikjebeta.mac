BETA     TITLE 'TSO EDIT COMMAND  TABSET SUBCOMMAND  IKJEBETA'
IKJEBETA CSECT
***********************************************************************
*                                                                     *
*STATUS -- VERSION NO. 01, OS/360 RELEASE NO. 20                      *
*                                                                     *
*FUNCTION -- THIS EDIT SUBCOMMAND CONTROL TABULATION TABLE SETTINGS.  *
*   IT WILL TURN A TAB SWITCH ON OR OFF, ALLOW DEFAULT TAB SETTINGS   *
*   TO BE USED, ACCEPT A STRING OF NEW TAB SETTINGS (UP TO TEN)       *
*   OR ACCEPT A STRING OF 'T'S WHICH ARE TRANSLATED INTO TAB STOPS.   *
*                                                                     *
*ENTRY POINT -- IKJEBETA                                              *
*                                                                     *
*INPUT -- REGISTER 1 CONTAINS A POINTER TO THE EDIT COMMUNICATION     *
*   AREA, DEFINED IN THE IKJEBECA MACRO.                              *
*                                                                     *
*OUTPUT -- RETURN CODE IN REGISTER 15 --                              *
*   00 - NORMAL COMPLETION                                            *
*   08 - FLUSH STACK, PROCESSING INCOMPLETE                           *
*                                                                     *
*EXTERNAL REFERENCES                                                  *
*             IKJPARS  - CHECKS SYNTAX OF SUBCOMMAND                  *
*             IKJGETL  - GETS INPUT FROM TERMINAL                     *
*                                                                     *
*        MACROS USED --                                               *
*             IKJEBESV - ENTRY LINKAGE                                *
*             IKJEBERT - EXIT LINKAGE                                 *
*             IKJEBEML - MESSAGE SELECTION INTERFACE                  *
*             IKJEBEMI - EQU'S FOR MESSAGE SELECTION                  *
*             IKJRLSA  - RELEASE PARSE PDL CORE                       *
*             GETLINE  - SETS UP PARMS AND LINKS TO IKJGETL           *
*             FREEMAIN - FOR GETLINE CODE, FREES CORE FROM LINE       *
*             IKJPARM  - BEGINS PARSE PCL                             *
*             IKJKEYWD - DEFINES KEYWORDS TO PARSE PCL                *
*             IKJNAME  - DEFINES KEYWORD NAMES TO PARSE PCL           *
*             IKJSUBF  - DEFINES PARSE SUBFLDS FOR PCL                *
*             IKJIDENT - DEFINES INTEGER STRING FOR PARSE PCL         *
*             IKJEBEMG - DEFINES MESSAGE INSERTIONS                   *
*             IKJENDP  - END OF PARSE PCL                             *
*                                                                     *
*EXITS, NORMAL -- RETURN TO CALLER WITH RETURN CODE ZERO IN REG 15    *
*                                                                     *
*EXITS, ERROR -- NONE.                                                *
*                                                                     *
*TABLES/WORK AREAS -- THE CASCWKA FIELD OF THE EDIT COMMUNICATION     *
*   AREA IS USED FOR WORK AREAS.  THE CATABS FIELD OF THE EDIT        *
*   COMMUNICATION AREA IS UPDATED WITH NEW TABULATION PARAMETERS.     *
*                                                                     *
*ATTRIBUTES -- REFRESHABLE, ENABLED, NON-PRIVILEGED.                  *
*                                                                     *
*NOTES -- THERE IS NO CHARACTER CODE DEPENDENCY.                      *
***********************************************************************
               EJECT
*  REGISTER AND SPECIAL EQUATES
         SPACE
PARMREG0 EQU   0                   PARAMETER REG
PARMREG1 EQU   1                   PARAMETER REG
WORKREGA EQU   2                   GENERAL
WORKREGB EQU   3                        USAGE
WORKREGC EQU   4                              WORK
WORKREGD EQU   5                                    REGISTERS
WORKREGE EQU   6                           FOR
WORKREGF EQU   7                              PROGRAM
COMMREG  EQU   9                   BASE REG FOR COMM AREA DSECT
BASEREG  EQU   11                  BASEREG FOR PROG CSECT
DATAREG  EQU   12                  REGISTER
SAVEREG  EQU   13                  ADDR OF SAVE AREA REG
RETREG   EQU   14                  RETURN ADDRESS REG
RETCDREG EQU   15                  RETURN CODE REG
CHART    EQU   C'T'                CHARACTER T FOR IMAGE SEARCH
SCHART   EQU   C't'                SMALL CHAR T FOR IMAGE SEARCH
TABREG   EQU   8                   OFFSET REG FOR TAB TABLE
PARSREG  EQU   10                  BASE REG FOR PDL DSECT
TABOFFOP EQU   X'00'               IMMED OP TO TURN OFF TABSWITCH
TABONOP  EQU   X'FF'               IMMED OP TO TURN ON TABSWITCH
L255     EQU   255                 MAX LENGTH
INSOP    EQU   X'F0'               OP TO SET UP DIGIT FOR PRINT
ZERO     EQU   C'0'                CHARACTER ZERO
L5       EQU   5                   FIVE LENGTH
TABTESTO EQU   X'80'               INDICATOR FOR INTEGER LIST
RET16    EQU   16                  RETURN CODE FOR I/O ERROR
SEQ2     EQU   2                   SEQUENCE NUMBER 2
SEQ3     EQU   3                   SEQUENCE NUMBER 3
L1       EQU   1                   LENGTH
L6       EQU   6                   LENGTH
L4       EQU   4                   LENGTH
L0       EQU   0                   LENGTH
L8       EQU   8                   LENGTH
L11      EQU   11                  LENGTH
L3       EQU   3                   LENGTH
L2       EQU   2                   LENGTH
RET8     EQU   8                   RET CODE FOR STACK FLUSH
         IKJEBEMI  (0,312,313,556,557,562)
         EJECT
*  ENTRY LINKAGE
         IKJEBESV (14,12),,*
         USING IKJEBECA,COMMREG
         SPACE
         B     LROUT               PERFORM INTERNAL RTN TO GET LINELNT
         SPACE
*  IF NO OPERANDS ARE PRESENT, TURN ON TAB SWITCH AND EXIT
LL       TM    CAPTIBFR,CAOPERND   ANY OPERANDS
         BNZ   PARSIT              IF SO, BRANCH
         OI    CATABS,TABONOP      TURN ON TABSWITCH
         B     OUT                 AND EXIT
         EJECT
         SPACE
*  SET UP AND LINK TO IKJPARS TO SYNTAX CHECK COMMAND
PARSIT   LA    PARMREG1,CATMPLST   ADDR OF TMP PARM LIST
         USING PPL,PARMREG1        ADDRABILITY FOR PARSE PARMLIST
         L     WORKREGA,PRSAD      ADDR OF PARSE PCL
         ST    WORKREGA,PPLPCL     STORE IN PARMLIST
         LA    WORKREGA,CAPTPRSD   ADDR TO PUT PDL PTR IN
         ST    WORKREGA,PPLANS     STORE IN PARMLIST
         L     WORKREGA,CAPTIBFR   ADDR OF SUBCOMMAND BFR
         ST    WORKREGA,PPLCBUF    STORE IN PARMLIST
         ST    SAVEREG,PPLUWA      ADDR OF CURRENT SAVEAREA
         DROP  PARMREG1            DROP DSECT ADDRABILITY
         LINK  EP=IKJPARS
         B     RETCHKPA(RETCDREG)  HANDLE ROUTING UPON PARSE RETURN
*
*   CHECK RETURN CODE FROM PARSE
RETCHKPA EQU   *
         B     OFSPEC              RC 0, CONTINUE PROCESSING
         B     OUT8                RC 4, RETURN TO CALLER
         B     OUT                 RC 8, RETURN TO CALLER
         B     CMDERRPA            RC 12,SYSTEM COMMAND ERROR MESSAGE
         B     NOSPAC              RC 16, NO CORE MESSAGE
         EJECT
         SPACE
*  EXAMINE PARSE PDL
OFSPEC   L     PARSREG,CAPTPRSD    ADDR OF PDL
         USING IKJPARMD,PARSREG
         LA    WORKREGA,SEQ2       SEQ NUM OF 'OFF' PDL ENTRY
         CH    WORKREGA,POPNDS     IS 'OFF' SPECIFIED
         BNE   IMSPEC              IF NOT, BRANCH
         LA    PARSREG,CAPTPRSD    PTR TO PDL
         IKJRLSA  (PARSREG)
         OI    CAPRSPDL,CAFREEDL   INDICATE PDL FREED
         NI    CATABS,TABOFFOP     TURN OFF TAB SWITCH
         B     OUT                 AND EXIT
IMSPEC   OI    CATABS,TABONOP      TURN ON TAB SWITCH
         LA    WORKREGA,SEQ3       SEQ NUM OF 'IMAGE' PDL ENTRY
         CH    WORKREGA,POPNDS     IS 'IMAGE' SPECIFIED
         BE    PROCIM              IF SO, BRANCH
         EJECT
         SPACE
*  PROCESS INTEGER LIST, IF ANY
         LA    TABREG,CATABS+L1    ADDR OF BODY OF TAB TABLE
         L     WORKREGA,NUM1       ADDR OF FIRST TAB
         TM    NUM1+L6,TABTESTO    TEST FIRST INTEGER FLAG
         BZ    OUT                 IF NO TABS, EXIT
         LA    WORKREGE,NUM1       BEGINNING OF PDL ENTRIES
         LH    WORKREGB,L4(WORKREGE) FOR INTEGERS
         BAL   WORKREGF,CONVER     LINK TO CONVERT INTEGER
         LTR   WORKREGB,WORKREGB   TEST INTEGER
         BZ    LXA                 IF ZERO IGNORE DIGIT
         C     WORKREGB,LINELNTH
         BH    ERRLNTH             IF TOO LONG GO TO ERROR MSG
         STC   WORKREGB,L0(TABREG)  STORE TAB INTO TABLE
         LA    TABREG,L1(TABREG)    INCREMENT POINTER
LX       LA    WORKREGE,L8(WORKREGE) INCREMENT PDL POINTER
         L     WORKREGA,L0(WORKREGE) IF NO MORE TABS
         C     WORKREGA,FOXO       IS THIS LAST IKJIDENT PDE
         BE    PLUG                IF NO MORE TABS PLUG TABLE AND EXIT
         LR    WORKREGE,WORKREGA   SAVE INTEGER
         LA    WORKREGA,CATABS+L11  IF TAB TABLE FULL
         CR    TABREG,WORKREGA     BRANCH TO EXIT ROUTINE
         BE    TOOMTABS            IF FULL, ERROR MSG THEN EXIT
         L     WORKREGA,L0(WORKREGE)  PTR TO INTEGER
         LH    WORKREGB,L4(WORKREGE)  LENGTH OF INTEGER
         BAL   WORKREGF,CONVER     LINK TO CVB ROUTINE
         LTR   WORKREGB,WORKREGB   TEST INTEGER
         BZ    LXA                 IF ZERO, IGNORE
         C     WORKREGB,LINELNTH   IS TAB GT LINE LENGTH
         BH    ERRLNTH             IF SO, BRANCH
         LR    WORKREGA,TABREG     PTR TO NEW TAB ENTRY
         STC   WORKREGB,L0(TABREG)  STORE IN TAB TABLE
         LA    WORKREGD,CATABS     ADDR OF TAB SWITCH
INSLOOP  BCTR  WORKREGA,PARMREG0   DECREMENT POINTER
         CR    WORKREGA,WORKREGD   PTR AT BOTTOM OF TABLE
         BE    INSERT              IF SO, BRANCH
         CLC   L0(L1,WORKREGA),L0(TABREG)  COMPARE NEW TAB
         BE    LX                  IF EQUAL, BRANCH TO GET NEXT
         BH    INSLOOP             LOOP TILL FIND TABLE POSIT
INSERT   LR    WORKREGD,TABREG     SAVE PTR TO NEXT AVAIL TAB
LOOPIN   BCTR  WORKREGD,PARMREG0   DECREMENT COUNT
         CR    WORKREGD,WORKREGA   IS SEARCH AT BOTTOM OF TABLE
         BE    INSERTA             INSERT AT BOTTOM OF TABLE
         MVC   L1(L1,WORKREGD),L0(WORKREGD)
         B     LOOPIN              LOOP TILL INSERT PT FOUND
         SPACE
*  INSERTION POINT HAS BEEN FOUND
INSERTA  STC   WORKREGB,L1(WORKREGA)  INSERT TAB IN TABLE
         LA    TABREG,L1(TABREG)
         B     LX                  REPEAT FOR ALL TABS
CONVER   LA    WORKREGD,CONAREA+L3  ADDR OF END OF RECEIVING FIELD
         LA    WORKREGC,L0(WORKREGA,WORKREGB)
         BCTR  WORKREGC,PARMREG0   ADDR OF LAST DIGIT
         MVC   CONAREA(L4),CONZERS  ZERO AREA
CONLOOP  MVC   L0(L1,WORKREGD),L0(WORKREGC) MOVE LAST DIGIT
         BCTR  WORKREGD,PARMREG0   DECREMENT POINTERS
         BCTR  WORKREGC,PARMREG0   AND MOVE RIGHT TO LEFT
         BCT   WORKREGB,CONLOOP    DIGITS INTO AREA
         PACK  CONAREA,CONAREA     PACK THE DIGITS
         SR    WORKREGD,WORKREGD   LEADING
         ST    WORKREGD,CONAR      ZEROES IN DOUBLE WORD
         CVB   WORKREGB,CONAR      CONVERT TO BINARY
         BR    WORKREGF            AND RETURN
LXA      EQU   *                   PUT MSG IGNORING ZERO
         IKJEBEML  M562,0,0,0,MF=(E,AREAM)
         B     LX                  AND RETURN TO IGNORE ZERO
NOSPAC   EQU   *
         IKJEBEML M312,0,NONINS,0,MF=(E,AREAM)
         B     OUT8                EXIT
         EJECT
         SPACE
*  RTN TO DET LINE LENGTH
LROUT    EQU   *
         LH    WORKREGA,CALRECL    LOAD LRECL
         LA    WORKREGB,L4          LENGTH OF LL00
         SR    WORKREGA,WORKREGB   SUBTRACT
         TM    CACFLAG1,CANONUM    IS DS NUMBERED
         BNZ   NONUM               IF NOT, BRANCH
         SR    WORKREGB,WORKREGB   SUBT NUMBER LENGTH
         IC    WORKREGB,CALENGTH   SUBT LENGTH OF LINE NUMBER
         SR    WORKREGA,WORKREGB   FROM LRECL REMAINDER
NONUM    ST    WORKREGA,LINELNTH   STORE IN WORK AREA
         B     LL                  GO TO BEGINNING OF PROG
         EJECT
         SPACE
         SPACE
*  ROUTINE TO GET LINE OF T'S AND DETERMINE TABS
PROCIM   MVC   GETAREA(GETLEN-GETLIST),GETLIST MOVE PARAMS
         GETLINE PARM=GETAREA,MF=(E,CATMPLST)
         B     RETCHKGL(RETCDREG)  HANDLE ROUTING UPON GETLINE RETURN
*
*   CHECK RETURN CODE FROM GETLINE
RETCHKGL EQU   *
         B     PROCIMA             RC 0, CONTINUE PROCESSING
         B     PROCIMB             RC 4, INPUT LINE NOT FROM TERMINAL
         B     OUT                 RC 8, ATTENTION ISSUED
         B     CMDERRGL            RC 12, COMMAND SYSTEM ERROR
         B     PROCIM              RC 16, NO INPUT RETURNED
         B     CMDERRGL            RC 20, COMMAND SYSTEM ERROR
         B     NOSPAC              RC 24, NO SPACE AVAILABLE
PROCIMA  EQU   *
         NI    CACFLAG4,X'FF'-CAINPROC TURN OFF PROCEDURE BIT
         B     PROCIMM             CONTINUE PROCESSING
PROCIMB  OI    CACFLAG4,CAINPROC   TURN ON PROCEDURE BIT
PROCIMM  L     WORKREGA,GETAREA+L4  ADDR OF INPUT BUFFER
         LH    WORKREGB,L0(WORKREGA) LENGTH OF BUFFER
         ST    WORKREGB,BUFREELN
         ST    WORKREGA,BUFREEAR
         LA    TABREG,CATABS+L1     ADDR OF TABLE
         LR    WORKREGD,WORKREGA
         LA    WORKREGD,L3(WORKREGD) OFFSET CHECKER
         LA    WORKREGA,L4(WORKREGA) POINT TO DATA PORTION
         LA    WORKREGC,L4         LENGTH ADJUSTMENT
         SR    WORKREGB,WORKREGC   CORRECT LENGTH OF DATA PORTION
         LTR   WORKREGB,WORKREGB   WAS CR ENTERED
         BZ    FREET               IF SO, NO TABS IN EFFECT
IMLOOP   CLI   L0(WORKREGA),CHART   IS CHARACTER 'T'
         BE    IMINS               IF SO, BRANCH
         CLI   L0(WORKREGA),SCHART COMPARE FOR SMALL CHAR 'T'
         BE    IMINS               IF EQUAL BRANCH TO INSERT
CONTA    EQU   *
         LA    WORKREGA,L1(WORKREGA) INCREMENT POINTER
         BCT   WORKREGB,IMLOOP     LOOP UNTIL INPUT EXHAUSTED
FREET    EQU   *
         FREEMAIN  V,A=BUFREEAR,SP=1,MF=(E,FREEXX)
         EJECT
*  END OF TABLE PROCESS
PLUG     EQU   *
         SR    WORKREGA,WORKREGA   ZERO FLUSH INDICATOR
PLUG8    EQU   *
         MVI   L0(TABREG),TABOFFOP  PLUG END OF TAB TABLE
         LA    PARSREG,CAPTPRSD    PTR TO PDL
         IKJRLSA  (PARSREG)
         OI    CAPRSPDL,CAFREEDL   INDICATE PDL FREED
         LTR   WORKREGA,WORKREGA   TEST FOR FLUSH IND
         BNZ   OUT8                IF INDICATED, BRANCH
         B     OUT                 EXIT
IMINS    LR    WORKREGC,WORKREGA   PTR TO 'T'
         SR    WORKREGC,WORKREGD   GET OFFSET
         C     WORKREGC,LINELNTH   IS IT GT LINE LENGTH
         BH    ERRLNTH1            IF SO, BRANCH
         LA    WORKREGE,CATABS+L11  ADDR OF END OF TAB TABLE
         CR    TABREG,WORKREGE     IS TAB TABLE FULL
         BNL   TOOMTABS            IF SO, BRANCH
         STC   WORKREGC,L0(TABREG)  STORE TAB INTO TABLE
         LA    TABREG,L1(TABREG)    INCREMENT POINTER
         B     CONTA               LOOP TO FIND ALL TS
         EJECT
         SPACE
*  ERROR MESSAGE ROUTINES
CMDERRPA MVC   COMMAND,PARSE       PUT PARSE INSERT IN MACRO EXPANSION
         B     CMDERR              BRANCH TO COMPLETE DYNAMIC MACRO
CMDERRGL MVC   COMMAND,GETLINE     PUT GETLINE INSERT IN MACRO
CMDERR   EQU   *
         MVC   CSERINSA,CSERINS1   INITIALIZE DYNAMIC IKJEBEMG
         MVC   CSERINSB,CSERINS2   INITIALIZE DYNAMIC IKJEBEMG
         LA    WORKREGA,CSERINSB   MAKE FIRST DYNAMIC INSERT MACRO
         ST    WORKREGA,CSERINSA   POINT TO THE SECOND
         CVD   RETCDREG,CSERAREA   CONVERT PARSE RETURN CODE
         UNPK  CSERINS,CSERAREA      TO ZONED DECIMAL
         OI    CSERINZ,INSOP
         IKJEBEML M313,M3131,0,CSERINSA,MF=(E,AREAM)
*                                  PRODUCE ERROR MESSAGE
         B     OUT8                RETURN TO CALLER
TOOMTABS EQU   *
         IKJEBEML   M557,0,0,0,MF=(E,AREAM)
         B     PLUG                BRANCH TO PLUG AND EXIT
*  MESSAGE ROUTINE FOR TAB TOO LARGE FOR LINE
ERRLNTH1 EQU   *
         LR    WORKREGB,WORKREGC
ERRLNTH  EQU   *
         MVC   TOOMGA(TOOMGLN-TOOMG),TOOMG
         MVC   TOMGA(TOMGLN-TOMG),TOMG
         CVD   WORKREGB,CONAR      CONVERT TAB TO DECIMAL
         UNPK  CONAR(L4),CONAREA(L4) UNPACK NUMBER
         OI    CONAR+L3,INSOP      ZONE ON LAST DIGIT TO X'F'
         LA    WORKREGD,TOOMGA+L8  POINT TO TEXT AREA FOR INSERTION
         LA    WORKREGB,L3         LENGTH OF DIGIT STRING MINUS ONE
         LA    WORKREGA,CONAR      NUMBER WITHOUT ZERO SUPPRESS
DELZER   CLI   L0(WORKREGA),ZERO   IS DIGIT A ZERO
         BNE   ZERDEL              GET OUT OF LOOP WITH FIRST NONZERO
         LA    WORKREGA,L1(WORKREGA)  INCREMENT POINTER
         BCTR  WORKREGB,PARMREG0   DECREMENT COUNT OF SIG DIGITS
         B     DELZER              LOOP UNTIL FIRST NONZERO FOUND
ZERDEL   LA    WORKREGC,L5(WORKREGB)  TOT LENGTH OF INSERT
         STH   WORKREGC,TOOMGA+L4
         EX    WORKREGB,MOVINS     MOVE INSERT INTO INSERTION PARMLIST
         L     WORKREGC,LINELNTH   LINE LENGTH
         CVD   WORKREGC,CONAR      CONVERT TO DECIMAL
         UNPK  CONAR(L4),CONAREA(L4) UNPACK
         OI    CONAR+L3,INSOP      ZONE LAST DIGIT TO X'F'
         LA    WORKREGD,TOMGA+L8   POINT TO INSERTION AREA
         LA    WORKREGB,L3
         LA    WORKREGA,CONAR      NONZERO SUPPRESSED NUMBER
DELZER1  CLI   L0(WORKREGA),ZERO   IS DIGIT A ZERO
         BNE   ZERDEL1             IF NOT, EXIT LOOP
         LA    WORKREGA,L1(WORKREGA)  INCREMENT POINTER
         BCTR  WORKREGB,PARMREG0   DECREMENT SIGNIFICANT DIGIT COUNT
         B     DELZER1             LOOP UNTIL FIRST NONZERO FOUND
ZERDEL1  LA    WORKREGC,L5(WORKREGB)  LENGTH OF INSERT
         EX    WORKREGB,MOVINS     MOVE INSERTION INTO PARM BLOCK
         STH   WORKREGC,TOMGA+L4   STORE LENGTH INTO PARM BLOCK
         LA    WORKREGA,TOMGA      ADDR OF SECOND INSERTION
         ST    WORKREGA,TOOMGA     CHAIN INSERTION BLOCKS
LBLB     IKJEBEML   M556,0,TOOMGA,0,MF=(E,AREAM)
         SR    RETCDREG,RETCDREG
         LA    WORKREGA,RET8       IND FLUSH STACK
         B     PLUG8               GO TO PLUG AND EXIT
         EJECT
*  EXIT FROM PROGRAM
OUT8     EQU   *
         LA    RETCDREG,RET8       INDICATE FLUSH STACK
         B     OUTA                EXIT
OUT      EQU   *
         SR    RETCDREG,RETCDREG
OUTA     EQU   *
         IKJEBERT   (14,12),,RC=(15)
         EJECT
         SPACE
*  IKJPARS PCL
IKJEBTA0   IKJPARM
POPNDS   IKJKEYWD   DEFAULT='ON'
         IKJNAME    'ON',SUBFLD=PINT
         IKJNAME    'OFF'
         IKJNAME    'IMAGE'
PINT     IKJSUBF
NUM1     IKJIDENT 'INTEGER',LIST,MAXLNTH=3,FIRST=NUMERIC,OTHER=NUMERIC,X
               HELP=('NUMBER 3 OR LESS DIGITS IN LENGTH')
         IKJENDP
         EJECT
*  CONSTANTS AND MESSAGE CONSTANTS
PRSAD    DC         V(IKJEBTA0)      ADCON FOR PARSE PCL
CONZERS  DC    X'F0F0F0F0'         CHAR ZEROES FOR CONVER SUBRTN
GETLIST  GETLINE INPUT=(ISTACK),MF=L
GETLEN   EQU   *
CSERINS1 IKJEBEMG  0,M3131IN1,'    '
CSERINSX EQU   *
CSERINS2 IKJEBEMG  0,M3131IN2,'00'
CSERINSY EQU   *
PARSE    DC    CL5'PARSE'          INSERT FOR CMD SYS ERR MSG
GETLINE  DC    CL7'GETLINE'        INSERT FOR CMD SYS ERR MSG
NONINS IKJEBEMG  ,M312IN1,'TABSET'
TOOMG    IKJEBEMG   ,M556IN1,'    '
TOOMGLN  EQU   *
TOMG     IKJEBEMG   ,M556IN2,'    '
TOMGLN   EQU   *
MOVINS   MVC   L0(L0,WORKREGD),L0(WORKREGA)  MOVE FOR MSGS INSERTS
         DS     0F
FOXO     DC     X'FF000000'        END OF LIST INDICATOR FOR TAB PDE'S
         EJECT
         IKJEBECA
         EJECT
*  WORK AREAS
         ORG   CASCWKA             SUBCOMMAND WORKAREA
GETAREA  DS    CL(GETLEN-GETLIST)  GETMAIN LFORM SPACE
TOOMGA   DS    CL(TOOMGLN-TOOMG)   MSG INSERT LFORM SPACE
TOMGA    DS    CL(TOMGLN-TOMG)     MSG INSERT LFORM SPACE
LINELNTH DS    1F                  LENGTH OF LINE
         DS    0D
CONAR    DS    1F                  CONVERSION WORKAREA
CONAREA  DS    1F                  CONVERSION WORKAREA
AREAM    DS    10F                 MSG SELECT WORKAREA
         DS    0D
BUFREEAR DS    1F                  ADDR OF GETL BUFF TO FREE
BUFREELN DS    1F                  LENGTH OF GETLINE BUFFER TO FREE
FREEXX   DS    3F                  FREEMAIN WORKAREA
CSERAREA DS    D                   DECIMAL CONVERSION WORK AREA
CSERINSA DS    CL(CSERINSX-CSERINS1-L4)  MSG INSERT AREA
*                                  DYNAMIC CSE INSERTION MACRO, FIRST
COMMAND  DS    CL8                 SYSTEM ERROR COMMAND NAME
CSERINSB DS    CL(CSERINSY-CSERINS2-L2)  MSG INSERT WORKAREA
*                                  DYNAMIC CSE INSERTION MACRO, SECOND
CSERINS  DS    0CL2                PARSE RETURN CODE INSERT
         DS    CL1                 RETCODE INSERT
CSERINZ  DS    CL1                 SIGN INDICATOR ZONE
         ORG   ,                   RESTORE LOCATION COUNTER
         EJECT
         IKJPPL
         END
