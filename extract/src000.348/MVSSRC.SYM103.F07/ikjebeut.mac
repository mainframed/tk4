BEUT TITLE 'EDIT UTILITY DATA SET INTERFACE ROUTINE --- IKJEBEUT'
*C0-999999                                                     @Y30NQKG
IKJEBEUT CSECT
***********************************************************************
*                                                                     *
*STATUS -- VERSION NO. 02,VS2    RELEASE NO. 03                       *
*                                                                     *
*COPYRIGHT N/A                                                        *
*                                                                     *
*FUNCTION   -THIS ROUTINE SERVES AS AN INTERFACE BETWEEN ALL EDIT     *
*   SUBCOMMANDS AND COPY ROUTINES THAT MUST ACCESS THE UTILITY DATA   *
*   SET.  THIS ROUTINE MUST BE USED ANYTIME RECORDS ARE TO BE         *
*   PLACED IN THE DATA SET, DELETED FROM THE DATA SET, OR READ FROM   *
*   THE DATA SET.                                                     *
*       THE OPERATION THAT IS PERFORMED IS DETERMINED BY THE INPUT    *
*   PARAMETER LIST AS DESCRIBED BELOW.  THE ADDRESS OF THE DESIRED    *
*   ROUTINE IS SELECTED FROM A VECTOR TABLE WHICH IS THE FIRST CSECT  *
*   IN THE ACCESS METHOD LOAD MODULE AND WHOSE ADDRESS IS CONTAINED   *
*   IN THE UTILITY DATA SET WORK AREA.                                *
*       THE APPROPIATE ROUTINE (READ, WRITE, OR DELETE) IS CALLED     *
*   BY THIS ROUTINE WITH THE SAME INPUT PARAMETER LIST PASSED TO THEM.*
*       IF A DELETE OR WRITE OPERATION IS SUCCESSFUL, A SWITCH IS     *
*   SET (BIT CADSMODS OF CACFLAG2) IN THE EDIT COMMUNICATIONS AREA.   *
*   THIS SWITCH IS ALWAYS TURNED OFF BY THE SAVE SUBCOMMAND AND       *
*   INTERROGATED BY THE END SUBCOMMAND.                               *
*       ALL WRITE OPERATIONS WILL TEST TO SEE IF THE DATA SET IS LINE *
*   NUMBERED. IF THE RECORDS ARE TO BE NUMBERED, THIS ROUTINE TAKES   *
*   THE 4-BYTE BINARY KEY THAT PREFIXES EACH RECORD AND CONVERTS IT   *
*   TO DECIMAL-EBCDIC.  IT IS THEN MOVED INTO THE PROPER PLACE IN THE *
*   RECORD.  THIS NUMBER IS ALSO CHECKED TO SEE THAT FOR ITS          *
*   SPECIFIED LENGTH, THAT ITS VALUE DOES NOT EXCEED THE UPPER        *
*   LIMIT.  IF THE NUMBER IS TOO LARGE, A MESSAGE WILL BE ISSUED.     *
*        IN THE EVENT THAT AN I/O ERROR WAS ENCOUNTERED IN ONE OF     *
*   THE CALLED ROUTINES, THIS ROUTINE USES THE IKJEBEMS ROUTINE TO    *
*   WRITE OUT THE MESSAGE. THE SYNADAF ERROR INFORMATION WILL HAVE    *
*   BEEN PREVIOUSLY STORED IN THE UTILITY WORKAREA FOR USE BY THIS    *
*   ROUTINE.                                                          *
*                                                                     *
*ENTRY POINT-  AT IKJEBEUT VIA A LINK OR LOAD-CALL                    *
*                                                                     *
*INPUT-  REGISTER 0 POINTS TO THE EDIT COMMUNICATIONS AREA            *
*        A ONE TO THREE WORD PARAMETER LIST POINTED TO BY REGISTER 1. *
*        THE HIGH-ORDER BIT ON IN A PARAMETER INDICATES IT'S THE LAST *
*         ONE                                                         *
*   READ OPERATIONS                                                   *
*     WORD1-   CODE PLUS POINTER TO UTILITY WORKAREA-DCB              *
*        CODES- '00'  -READ RECORD LAST REFERENCED BY ACCESS METHOD   *
*               '01'  -READ RECORD PRIOR TO LAST REFERENCED           *
*               '02'  -READ RECORD AFTER LAST REFERENCED              *
*               '04'  -READ FIRST RECORD IN DATA SET                  *
*               '05'  -READ LAST RECORD IN DATA SET                   *
*     WORD2-   OPTIONALLY CONTAINS A POINTER TO A 4-BYTE BINARY KEY   *
*        THAT REPLACES THE LAST REFERENCED KEY IN THE ACCESS METHOD   *
*        BEFORE THE OPERATION TAKES PLACE                             *
*     WORD3-   OPTIONALLY CONTAINS A POINTER WHICH IS AN ADDRESS      *
*        OF WHERE THE RECORD IS TO BE PLACED                          *
*                                                                     *
*   DELETE OPERATIONS                                                 *
*     WORD1-   CODE PLUS POINTER TO UTILITY WORKAREA-DCB              *
*        CODE-  '10'  -DELETE LAST REFERENCED OR AS SPECIFIED         *
*                      BY THE KEY INDICATED IN WORD2                  *
*     WORD2-   OPTIONALLY CONTAINS A POINTER TO A 4-BYTE BINARY KEY   *
*        THAT REPLACES THE LAST REFERENCED KEY IN THE ACCESS METHOD   *
*        BEFORE THE OPERATION TAKES PLACE                             *
*     WORD3-   NOT USED                                               *
*                                                                     *
*   WRITE OPERATIONS                                                  *
*     WORD1-   CODE PLUS POINTER TO UTILITY WORKAREA-DCB              *
*        CODES- '20'  -WRITE THE INDICATED RECORD IN THE DATA SET     *
*               '21'  -WRITE SEQUENTIAL: WRITE THE INDICATED RECORD-  *
*                     USED TO WRITE A UTILITY DS FROM FIRST RECORD TO *
*                     LAST RECORD.                                    *
*                                                                     *
*     WORD2-   POINTER TO THE RECORD WHICH IS TO BE PLACED IN THE     *
*        DATA SET.                                                    *
*     WORD3-   NOT USED                                               *
*                                                                     *
*                                                                     *
*OUTPUT- REGISTERS AS DESCRIBED UNDER 'EXIT' BELOW                    *
*   USES THE IKJEBEMS ROUTINE TO WRITE OUT I/O ERROR OR INVALID       *
*   LINE NUMBER MESSAGES.                                             *
*                                                                     *
*EXTERNAL REFERENCES --                                               *
*       IKJEBEMS             WRITES OUT ERROR MESSAGES                *
*       IKJEBEDR             DELETES RECORDS                          *
*       IKJEBERR             READS RECORDS                            *
*       IKJEBEWR             WRITES RECORDS                           *
*       IKJEBEWS             WRITES SEQUENTIAL RECORDS                *
*                                                                     *
*EXITS,NORMAL-  A RETURN CODE IN REGISTER 15 AS FOLLOWS-              *
*        RETURN CODE = 0    THE READ, WRITE, OR DELETE OPERATION      *
*          WAS SUCCESSFUL.  FOR READ OPERATIONS, THE RECORD WAS       *
*          EITHER MOVED TO THE LOCATION SPECIFIED BY THE USER, OR     *
*          IF NO ADDRESS WAS SPECIFIED, REGISTER 1 POINTS AT THE      *
*          RECORD                                                     *
*                                                                     *
*        RETURN CODE = 4    THE SPECIFIED RECORD FOR A DELETE OR      *
*          READ OPERATION DOES NOT EXIST                              *
*                                                                     *
*EXITS,ERROR-   A RETURN CODE IN REGISTER 15 AS FOLLOWS-              *
*        RETURN CODE =  8  -I/O ERROR ENCOUNTERED                     *
*        RETURN CODE = 12  -INVALID LINE NUMBER                       *
*          THIS ROUTINE INITIATES THE WRITING OF THE ERROR MESSAGES   *
*          THIS ROUTINE WILL WRITE OUT THE I/O ERROR MESSAGE.         *
*                                                                     *
*TABLES/WORK AREAS --                                                 *
*       THIS ROUTINE IS DEPENDENT UPON THE EDIT COMMUNICATIONS        *
*   AREA, IKJEBECA, FOR THE FOLLOWING-                                *
*         -THE ADDRESS OF THE UTILITY WORKAREA/DCB                    *
*         -LINE NUMBER INFORMATION                                    *
*         -THE UTILITY DATA SET MODIFIED SWITCH                       *
*                                                                     *
*       THIS ROUINE IS DEPENDENT ON THE UTILITY WORKAREA, UTILWORK,   *
*   FOR THE FOLLOWING-                                                *
*         -ADDRESS OF THE EDIT ACCESS METHOD MODULE, IKJEBEAA.        *
*                                                                     *
*ATTRIBUTES- REFRESHABLE,ENABLED,NON-PRIVILEGED                       *
*                                                                     *
*NOTES- THE CONVERSION OF THE KEY VALUE INTO A STATEMENT SEQUENCE     *
*   NUMBER IS DEPENDENT ON THE EBCDIC CHARACTER SET                   *
*                                                                     *
***********************************************************************
         EJECT
*   THE FOLLOWING ARE REGISTER ASSIGNMENTS
PARMREG0 EQU   0                       PARM POINTER
PARMREG1 EQU   1                       PARM POINTER
WORK2    EQU   2                       WORK REGISTER
WORK3    EQU   3                       WORK REGISTER
LINK5    EQU   5                       LINK REGISTER
WORK4    EQU   4                       WORK REGISTER
WORK6    EQU   6                       WORK REGISTER
WORK8    EQU   8                       VECTOR TABLE ADDRESSING
COMMREG  EQU   9                       COMMUNICATION AREA ADDRESSING
BASEREG  EQU   11                      BASE REGISTER
DATAREG  EQU   12                      UTILITY WORK AREA ADDRESSING
SAVEREG  EQU   13                      SAVE AREA ADDRESSING
RETREG   EQU   14                      RETURN REGISTER
RETCDREG EQU   15                      RETURN CODE
ENTRY    EQU   15                      ENTRY POINT ADDRESS
         SPACE 2
*   DEFINITIONS
ONE      EQU   1                       CONSTANT OF ONE
LENL     EQU   4                       LENGTH OF LENGTH PREFIX
NRF      EQU   4                       RECORD DOES NOT EXIST CODE
MAXNO    EQU   8                       MAXIMUM LINE NUMBER LENGTH
IOERROR  EQU   8                       I/O ERROR CODE
EIGHT    EQU   8                       CONSTANT OF 8
INVALNUM EQU   12                      RETURN CODE, INVALID NUMBER
WORD1    EQU   0                       OFFSET TO 1ST PARM INPUT WORD
WORD2    EQU   4                       OFFSET TO 2ND PARM INPUT WORD
WORD3    EQU   8                       OFFSET TO 3RD PARM INPUT WORD
ALL      EQU   X'FF'                   ALL BITS//IN SWITCH
NUMZONE  EQU   X'F0'                   NUMERIC ZONE
LAST     EQU   X'80'                   LAST ENTRY INDICATOR
ZERO     EQU   0                       CONSTANT OF ZERO
X0       EQU   0                       OFFSET OF 0
L4       EQU   4                       LENGTH OF 4
X24      EQU   24                      OFFSET OF 24
TIMES4   EQU   2                       MULTIPLICATION FACTOR
         SPACE 2
*   MESSAGE REFERENCES
SYNADL   EQU   78                      LENGTH OF SYNAD MESSAGES
         SPACE
         IKJEBEMI (309,402)
         EJECT
*   PERFORM THE INITIALIZATION OPERATIONS HERE
         IKJEBESV  (14,12),T,*,COMMREG=(0)
         USING IKJEBECA,COMMREG
         L     DATAREG,WORD1(PARMREG1) UTILITY DATA SET WORKAREA
         USING UTILWORK,DATAREG
         L     WORK8,VTABLE            ADDRESS OF ACCESS METHOD//TABLE
         USING VECTABLE,WORK8
         SPACE 2
*   INSURE THAT THE ERROR SWITCH IS OFF
         NI    DCBSTATS,ALL-ERROR      INSURE ERROR SWITCH IS OFF
         SPACE
         SPACE
*   DETERMINE THE TYPE OF OPERATION HERE
         CLI   X0(PARMREG1),WRITEHS    THIS A WRITE SEQUENTIAL
         BE    UT9                     YES-BRANCH AND PROCESS
         TM    DCBSTATS,DCBSEQ         SEQ. LOAD JUST COMPLETE
         BZ    UT99                    NO--GO CHECK OPERATION
         L     ENTRY,WP                YES-GO PURGE BUFFERS
         BALR  RETREG,ENTRY            PURGE BUFFERS
         LTR   RETCDREG,RETCDREG       ANY ERRORS
         BNZ   UT7                     YES-GO TO ERROR EXIT
UT99     CLI   X0(PARMREG1),WRITE      THIS A NORMAL WRITE
         BE    UT9                     YES- GO PROCESS
         TM    X0(PARMREG1),DELETE     IS THIS A DELETE OPERATION
         BO    UT4                     YES-GO PROCESS
         SPACE 2
*   THIS IS A READ OPERATION                                          *
UT5      L     ENTRY,RR                ADDRESS OF READ ROUTINE
         BALR  RETREG,ENTRY            PERFORM THE READ OPERATION
         SPACE 2
*   DETERMINE IF ERROR MESSAGE IS REQUIRED
UT6      LA    WORK6,NRF               CONSTANT OF FOUR
         CLR   RETCDREG,WORK6          RETURN CODE LARGER THAN FOUR
         BH    UT7                     YES--GO GIVE ERROR MESSAGE
         EJECT
*   RETURN TO THE CALLING ROUTINE HERE
UT8      EQU   *
         L     DATAREG,WORD2(SAVEREG)  PREVIOUS SAVE AREA
         ST    PARMREG1,X24(DATAREG)   SET UP REGISTER 1 FOR RETURN
         IKJEBERT (14,12),T,RC=(15)    RESTORE THE REGISTERS
         SPACE 2
*   THIS IS A WRITE OPERATION                                         *
UT9      TM    CACFLAG1,CANONUM        IS THIS A NON-LINE NUMBERED DS
         BO    UT91                    YES-NO NUMBER PROCESSING
         SPACE 2
*   INSURE GIVEN LINE NUMBER VALUE IS NOT GREATER THAN LIMIT
         L     WORK2,WORD2(PARMREG1)   RECORD ADDRESS
         SR    WORK4,WORK4             ZERO REGISTER
         IC    WORK4,CALENGTH          LINE NO. LENGTH
         SLL   WORK4,TIMES4            LENGTH TIMES FOUR
         L     WORK3,UTTABLE-L4(WORK4) UPPER LIMIT FOR LENGTH NO.
         CL    WORK3,X0(WORK2)         IS TABLE ENTRY GREATER THAN
*                                        KEY VALUE ON RECORD
         BL    UT10                    NO--GO GIVE ERROR MESSAGE
         SPACE 2
*   CONVERT THE NUMBER TO DECIMAL-EBCDIC HERE
         MVC   UTNUMB(KEYL),X0(WORK2)   INSURE ALIGNMENT
         L     WORK3,UTNUMB            BINARY LINE NUMBER
         CVD   WORK3,UTNUMB            CONVERT TO DECIMAL
         UNPK  UTDEC(MAXNO),UTNUMB(MAXNO)  SET UP FOR EBCDIC
         OI    UTDECL,NUMZONE          INSURE CORRECT ZONE/LAST DOGIT
         SPACE
*   COMPUTE ADDRESS OF LINE NUMBER
         SR    WORK3,WORK3             ZERO
         IC    WORK3,CALINE            OFFSET TO LINE NUMBER
         LA    WORK2,KEYL+LENL-ONE(WORK3,WORK2) ADDRESS OF LINE NUMBER
         IC    WORK3,CALENGTH          LENGTH OF LINE NUMBER
         LA    WORK4,MAXNO             MAXIMUM LINE NUMBER LENGTH
         SR    WORK4,WORK3             POSITIONING INDEX FACTOR
         LA    WORK4,UTDEC(WORK4)      MOVE FROM ADDRESS
         BCTR  WORK3,ZERO              DECREMENT FOR EXECUTE
         EX    WORK3,UTMOVE            LINE NUMBER TO RECORD
         SPACE 2
*   PERFORM THE WRITE OPERATION HERE
UT91     L     ENTRY,WR                ADDRESS OF WRITE ROUTINE
         CLI   X0(PARMREG1),WRITEHS    SEQUENTIAL WRITE?
         BNE   UT92                    NO--SINGLE RECORD WRITE
         L     ENTRY,WS                ROUTINE ADDRESS
UT92     EQU   *                       PERFORM WRITE OPERATION
         BALR  RETREG,ENTRY            PERFORM THE WRITE OPERATION
         LTR   RETCDREG,RETCDREG       ANY ERRORS
         BNZ   UT7                     YES-GO GIVE MESSAGE
         B     UT3                     GO CHECK IF SUCCESSFUL
         SPACE 2
*   THIS IS A DELETE OPERATION                                        *
UT4      TM    ZERO(PARMREG1),LAST     MORE THAN ONE PARM
         BO    UT41                    NO--
         L     PARMREG0,WORD2(PARMREG1) YES-SET UP SECOND PARAMETER
         B     UT42                    KEY IS SET UP-CONTINUE
UT41     SR    PARMREG0,PARMREG0       SHOW NO KEY SPECIFIED
UT42     L     PARMREG1,WORD1(PARMREG1)  WORK AREA ADDRESS
         L     ENTRY,DR                ADDRESS OF DELETE ROUTINE
         BALR  RETREG,ENTRY            GO DELETE THE RECORD
         SPACE 2
*   CHECK IF THE DELETE OR WRITE WAS SUCCESSFUL HERE
UT3      LA    WORK6,NRF               CONSTANT OF FOUR
         CLR   RETCDREG,WORK6          RETURN CODE LARGER THAN FOUR
         BH    UT7                     YES-GO GIVE I/O ERROR MESSAGE
         BE    UT8                     RECORD DID NOT EXIST
         OI    CACFLAG2,CADSMODS       INDICATE DATA SET MODOFIED
         MVC   CAUTILNO(L'CAUTILNO),DCBRECNO FROM UTILWORK TO COMM AREA
         B     UT8                     RETURN
         SPACE 2
UT7      EQU   *
*   WRITE OUT THE I/O ERROR MESSAGE HERE                              *
         MVC   MSGAREA(IOERREND-IOERR),IOERR SET 1ST MESSAGE BLOCK
         XC    MGBUILD(EIGHT),MGBUILD  ZERO THE MESSAGE BLOCK
         LA    WORK2,MGBUILD           GET READY TO ATTACH BLOCKS
         ST    WORK2,MSGAREA+EIGHT     POINT TO 2ND LEVEL BLOCK
         LA    WORK2,M3092IN1          GET RELATIVE OFFSET
         STH   WORK2,MGBUILDO          SET IN BLOCK
         MVI   MGBUILDL,SYNADL+L4      SET LENGTH VALUE
         BAL   LINK5,MSG               GO PRINT MESSAGE
         SPACE
         LA    RETCDREG,IOERROR        SET I/O ERROR CODE
         B     UT8                     RETURN TO CALLER
         SPACE 2
*   ISSUE MESSAGE ABOUT TOO LARGE A LINE NUMBER
UT10     EQU   *
         MVC   MSGAREA(INVALEND-INVAL),INVAL  LIST FORM OF ML MACRO
         MVC   MGBUILD(INVALGE-INVALG),INVALG SET UP FOR INSERTION
         SRL   WORK4,TIMES4            RESET LINE NO. LENGTH
         LA    WORK4,L4(WORK4)         UP COUNT BY FOUR
         STC   WORK4,MGBUILDL          SET LENGTH OF INSERTION
         LA    WORK4,MGBUILD           GET ADDRESS OF 2ND LEVEL BLOCK
         ST    WORK4,MSGAREA+L4        CONNECT BLOCKS
         BAL   LINK5,MSG               GO PRINT MESSAGE
         LA    RETCDREG,INVALNUM       RETURN CODE FOR NUMBER TOO LARGE
         B     UT8                     RETURN
         SPACE 3
MSG      EQU   *
         IKJEBEML ,,,,MF=(E,MSGAREA)
         BR    LINK5                   RETURN TO CALLING POINT
         SPACE
***********************************************************************
*   CONSTANT AREA FOR THE IKJEBEUT ROUTINE
         SPACE
IOERR    IKJEBEML M309U,M3092,,,MF=L
IOERREND EQU   *
         SPACE 3
***********************************************************************
*   INSERTION BLOCK FOR TOO LARGE A LINE NUMBER
INVALG   IKJEBEMG 0,M402IN1,'99999999'
INVALGE  EQU   *
         SPACE 2
***********************************************************************
         SPACE 2
***********************************************************************
*   INVALID LINE NUMBER MESSAGE
INVAL    IKJEBEML M402,,,,MF=L
INVALEND EQU   *                       END OF LIST FORM
         SPACE
***********************************************************************
UTMOVE   MVC   X0(ONE,WORK2),X0(WORK4) MOVES NUMBERS INTO RECORDS
UTTABLE  DC    F'9'                    UPPER
         DC    F'99'                    LIMITS
         DC    F'999'                    FOR
         DC    F'9999'                    EACH
         DC    F'99999'                    LENGTH
         DC    F'999999'                    OF
         DC    F'9999999'                    LINE
         DC    F'99999999'                    NUMBER
UTPATCH  DC    C'ZAP HERE'             *********
         DC    7D'0'                   **********
         SPACE
         DROP  BASEREG,COMMREG,DATAREG,WORK8
         EJECT
         IKJEBEUW
         SPACE 2
***********************************************************************
*   DESCRIPTION ON USE OF 'TEMPAREA' FIELD OF UTILITY WORKAREA
UTNUMB   EQU   TEMPAREA                WORKAREA FOR CONVERT
UTDEC    EQU   TEMPAREA+8              CONTAINS DECIMAL NUMBER
UTDECL   EQU   UTDEC+7                 ADDRESS OF LAST CHARACTER
***********************************************************************
         EJECT
         IKJEBECA
         END
