         TITLE 'IKJEBERU - RUN SUBCOMMAND - TSO EDIT COMMAND           *
                        '
IKJEBERU CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKJEBERU  76.162'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  LA    @08,4095(,@11)                                      0001
         USING @PSTART,@11                                         0001
         USING @PSTART+4095,@08                                    0001
*          COMMREG = PARMREG1;       /* GET ADDR OF IKJEBECA         */
*                                                                  0054
         LR    COMMREG,PARMREG1                                    0054
*          RESPECIFY (GPR13P,GPR15P) RSTD;                         0055
*          GPR15P = CANXTSVA;        /* SAVE AREA FOR THIS MODULE    */
         L     GPR15P,CANXTSVA(,COMMREG)                           0056
*          EVAL(GPR15P + 4) -> CASAVPTR = GPR13P;   /* SET THIS      */
         LA    @14,4                                               0057
         ALR   @14,GPR15P                                          0057
         ST    GPR13P,CASAVPTR(,@14)                               0057
*                                    /* SAVEAREA BKWD PTR            */
*          EVAL(GPR13P + 8) -> CASAVPTR = GPR15P;   /* SET CALLER    */
         LA    @14,8                                               0058
         ALR   @14,GPR13P                                          0058
         ST    GPR15P,CASAVPTR(,@14)                               0058
*                                    /* FWD PTR                      */
*          GPR13P = GPR15P;          /* NEW SAVEAREA ADDR            */
         LR    GPR13P,GPR15P                                       0059
*          CANXTSVA = GPR13P + 72;   /* UPDATE NEX-SAVE-AREA PTR     */
         LA    @14,72                                              0060
         ALR   @14,GPR13P                                          0060
         ST    @14,CANXTSVA(,COMMREG)                              0060
*          RESPECIFY (GPR13P,GPR15P) UNRSTD;                       0061
*                                                                  0061
*          DATAREG = ADDR(CASCWKA);   /* SET BASE REG FOR WORK AREA  */
         LA    DATAREG,CASCWKA(,COMMREG)                           0062
*          GEN( USING @DATD,DATAREG);   /* SET ADDRESSABILITY TO     */
          USING @DATD,DATAREG
*                                    /* CASCWKA                      */
*          /* RESTRICT NEEDED REGISTERS IN MAIN LINE                  *
*          RESPECIFY(PARMREG1,COMMREG,BASEREG,BASEREG2,DATAREG) RSTD;
*          RETSAVE=0;                 /* INITIALIZE RETURN CODE AREA  *
         SLR   RETSAVE,RETSAVE                                     0065
*          SWITCHES= '00'X;           /* TURN OFF SWITCHES            *
         MVI   SWITCHES,X'00'                                      0066
*          IF CAOBJGEN = '1'B         /* IF OBJ TO BE GENERATED A50465*
*            THEN                     /* FOR THIS DATA TYPE     A50465*
         TM    CAOBJGEN(COMMREG),B'00100000'                       0067
         BNO   @RF00067                                            0067
*              RUOBJGEN = '1'B;       /* SET OBJ INDICATOR      A50465*
         OI    RUOBJGEN,B'00001000'                                0068
*          IF CARUN = '0'B            /* CHECK IF DS TYPE RUNABLE     *
*            THEN                     /* TYPE IS NOT RUNABLE          *
@RF00067 TM    CARUN(COMMREG),B'10000000'                          0069
         BNZ   @RF00069                                            0069
*              DO;                    /* DO THE FOLLOWING             *
*                RELMSG1= 777;        /* INDICATE FIRST LEVEL MSG     *
         MVC   RELMSG1(2),@CH01251                                 0071
*                RELMSG2= 0;          /* NO SECOND LEVEL MSG          *
         SLR   @12,@12                                             0072
         STH   @12,RELMSG2                                         0072
*                /* TAKE BLANKS OUT OF DS TYPE                        *
*                DO I=8 TO 1 BY -1 ;              /* LOOP IN TYPE     *
*                                                                  0073
         LA    I,8                                                 0073
@DL00073 DS    0H                                                  0074
*                  /* SEARCH FOR BLANK                                *
*                  IF CADSTYPE(I) ^= ' '                           0074
*                    THEN             /* IF NOT BLANK END LOOP        *
         LR    @12,COMMREG                                         0074
         ALR   @12,I                                               0074
         CLI   CADSTYPE-1(@12),C' '                                0074
         BNE   @RT00074                                            0074
*                      GO TO BLKFND;  /* GET OUT OF LOOP              *
*                END;                 /* END DO LOOP                  *
         BCTR  I,0                                                 0076
         LTR   I,I                                                 0076
         BP    @DL00073                                            0076
*BLKFND:         MSGPTR= 0;           /* NO SECOND INSERTION          *
BLKFND   SLR   @12,@12                                             0077
         ST    @12,MSGPTR                                          0077
*                MSGLEN= I + 4;       /* INDICATE MSG LENTH           *
         LA    @06,4(,I)                                           0078
         STH   @06,MSGLEN                                          0078
*                MSGTEXT= CADSTYPE;   /* GET MSG TEXT                 *
         MVC   MSGTEXT(8),CADSTYPE(COMMREG)                        0079
*                MSGOFF= 10;          /* GET MSG OFFSET               *
         MVC   MSGOFF(2),@CH00393                                  0080
*                LEV1INS= ADDR(MSGAREA);/* PUT TO INSERTION           *
         LA    @06,MSGAREA                                         0081
         ST    @06,LEV1INS                                         0081
*                LEV2INS= 0;          /* NO SECOND LEV INSERTION      *
         ST    @12,LEV2INS                                         0082
*                GENERATE;            /* GO TO MSG ROUTINE            *
         IKJEBEML   ,,,,MF=(E,AREAM)
*                RETSAVE= 8;          /* INDICATE BAD RETURN          *
         LA    RETSAVE,8                                           0084
*              END;                   /* END OF NON-RUNABLE ROUTINE   *
*            ELSE                     /* TEST FOR VARIOUS TYPES       *
*                                                                  0086
*              /* CHECK FOR ITF DATA SET TYPES                        *
*              IF CADSCODE=CABASIC × CADSCODE=CAIPLI               0086
*                THEN                 /* IF ITF DO ITF PROCESSING     *
         B     @RC00069                                            0086
@RF00069 CLI   CADSCODE(COMMREG),X'20'                             0086
         BE    @RT00086                                            0086
         CLI   CADSCODE(COMMREG),X'21'                             0086
         BNE   @RF00086                                            0086
@RT00086 DS    0H                                                  0087
*                  CALL ITFRTN;       /* GO TO ITF ROUTINE            *
         BAL   @14,ITFRTN                                          0087
*                ELSE                 /* IF NOT ITF CONTINUE CHECKS   *
*                  DO;                /* IF NOT ITF,KEEP CHECKING     *
*                                                                  0088
         B     @RC00086                                            0088
@RF00086 DS    0H                                                  0089
*                    CAMODMSG='1'B;   /*TURN ON MODMSG BIT            *
         OI    CAMODMSG(COMMREG),B'00010000'                       0089
*                    CALL BUFBUILD;   /* GOT TO BUILD COM BUFFER      *
*                                                                  0090
         BAL   @14,BUFBUILD                                        0090
*                    IF RETSAVE < 0    /* CHECK FOR ATTENTION DURING
*                                        PARSE               @OZ03856*/
*                      THEN GOTO EXITPT; /* GO TO EXIT POINT @OZ03856*/
         LTR   RETSAVE,RETSAVE                                     0091
         BM    @RT00091                                            0091
*                    IF RETSAVE = 8 /* IF ERROR FROM PARSE    @ZA09439*
*                        THEN GOTO EXITPT1; /* FINISH        @ZA09439*/
         CH    RETSAVE,@CH00058                                    0093
         BE    @RT00093                                            0093
*                    /* IS DATA SET TYPE GOFORT(FIXED)                *
*                    IF CADSCODE= CAGOFORT & CAFREE= '0'B          0095
*                      THEN           /* IF SO,MOVE IN FIXED          *
         CLI   CADSCODE(COMMREG),X'1F'                             0095
         BNE   @RF00095                                            0095
         TM    CAFREE(COMMREG),B'10000000'                         0095
         BNZ   @RF00095                                            0095
*                        COMFIX= 'FIXED';/* MOVE IN 'FIXED'           *
*                                                                  0096
         L     @12,COMBFPTR                                        0096
         MVC   COMFIX(5,@12),@CC01258                              0096
*                    /* CHECK IF DSTYPE RUNABLE INCORE                *
*                    IF CARUNDS= '1'B                              0097
*                      THEN           /* IF SO PERFORM INCORE RTN     *
@RF00095 TM    CARUNDS(COMMREG),B'00010000'                        0097
         BNO   @RF00097                                            0097
*                        DO;                                       0098
*                          COMFIELD=CAPRNAME;/* MOVE IN PROMTER NAME  *
         L     @12,COMBFPTR                                        0099
         MVC   COMFIELD(8,@12),CAPRNAME(COMMREG)                   0099
*                          CALL INCORRTN;/* GO TO ROUTINE             *
         BAL   @14,INCORRTN                                        0100
*                        END;                                      0101
*                    ELSE                /* IF INLIST APPLIES,  Y02676*
*                                        /* THEN                Y02676*
*                        IF CAINLIST = '1'B THEN  /*            Y02676*
         B     @RC00097                                            0102
@RF00097 TM    CAINLIST(COMMREG),B'00001000'                       0102
         BNO   @RF00102                                            0102
*                          DO;           /* PERFORM INLIST RTN  Y02676*
*                            COMFIELD = CAPRNAME;/* GET PROMPTERY02676*
         L     @12,COMBFPTR                                        0104
         MVC   COMFIELD(8,@12),CAPRNAME(COMMREG)                   0104
*                            CALL INLSTRTN; /* GO TO ROUTINE    Y02676*
         BAL   @14,INLSTRTN                                        0105
*                          END;                                    0106
*                      ELSE  /* IF NOT INCORE CONTINUE CHECKING       *
*                        DO;                                       0107
*                                                                  0107
         B     @RC00102                                            0107
@RF00102 DS    0H                                                  0108
*                          /* WILL OBJ BE GENERATED                   *
*                          IF RUOBJGEN= '1'B                 /* A50465*
*                            THEN     /* IF SO PERFORM OBJ WORK       *
         TM    RUOBJGEN,B'00001000'                                0108
         BNO   @RF00108                                            0108
*                              DO;                                 0109
*                                COMFIELD= 'RUN';/* MOVE IN COM RUN   *
         L     @12,COMBFPTR                                        0110
         MVI   COMFIELD+3(@12),C' '                                0110
         MVC   COMFIELD+4(4,@12),COMFIELD+3(@12)                   0110
         MVC   COMFIELD(3,@12),@CC01259                            0110
*                                COMTYPE=CADSQUAL;/* MOVE IN DS TYPE  *
         MVC   COMTYPE(8,@12),CADSQUAL(COMMREG)                    0111
*                                CAMODMSG= '0'B;  /* TURN OFF MOD BIT *
         NI    CAMODMSG(COMMREG),B'11101111'                       0112
*                              END;                                0113
*                            ELSE     /* OTHERWISE DO FOLLOWING       *
*                              COMFIELD=CAPRNAME;/* MOVE IN PR NAME   *
         B     @RC00108                                            0114
@RF00108 L     @12,COMBFPTR                                        0114
         MVC   COMFIELD(8,@12),CAPRNAME(COMMREG)                   0114
*                          CALL DSRTN;/* PERFORM ALLOCATION ROUTINES  *
@RC00108 BAL   @14,DSRTN                                           0115
*                        END;         /* END OF NON-INCORE ROUTINE    *
*                  END;               /*  END NOT-ITF ROUTINE         *
*                                                                  0117
@RC00102 DS    0H                                                  0117
@RC00097 DS    0H                                                  0118
*          /* CHECK IF CONDITION FOR RETURN CODE IS NEGATIVE          *
* EXITPT:                             /*      ERROR EXIT      @OZ03856*
*          IF RETSAVE < 0                                          0118
*            THEN                     /*  IF SO SET RC                *
@RC00086 DS    0H                                                  0118
@RC00069 DS    0H                                                  0118
EXITPT   LTR   RETSAVE,RETSAVE                                     0118
         BNM   @RF00118                                            0118
*              DO;                                                 0119
*                CAMODMSG= '0'B;      /* TURN OFF MODMSG BIT          *
         NI    CAMODMSG(COMMREG),B'11101111'                       0120
*                RETSAVE= 0;          /*  SET RC=0                    *
         SLR   RETSAVE,RETSAVE                                     0121
*              END;                                                0122
*                                                                  0122
*          /* CHECK IF ALLOCATION WAS DONE                            *
* EXITPT1:                          /* ERROR EXIT 1           @ZA09439*
*          IF ALLOC= '1'B                                          0123
*            THEN                     /*  IF SO, PERFORM UNALLOCATION *
@RF00118 DS    0H                                                  0123
EXITPT1  TM    ALLOC,B'01000000'                                   0123
         BNO   @RF00123                                            0123
*              DO;                                                 0124
*                CASADISP= '1'B;      /*  INDICATE UN-                *
*                CASAUNCG= '1'B;      /*             ALLOCATION       *
         OI    CASADISP(COMMREG),B'00010010'                       0126
*                CALL DA;             /*  CALL IKJEBEUT TO DO UNALLOC *
*                                                                  0127
         BAL   @14,DA                                              0127
*                /* CHECK IF OBJ TO BE UNALLOCATED                    *
*                IF RUOBJGEN= '1'B & OBJBIT= '1'B            /* A50465*
*                  THEN               /*  IF SO, PERFORM UNALLOC      *
         TM    RUOBJGEN,B'10001000'                                0128
         BNO   @RF00128                                            0128
*                    DO;                                           0129
*                      CASADISP= '1'B; /* INDICATE UN-                *
*                      CASAUNCG= '1'B; /*            ALLOCATION       *
*                                                                  0131
         OI    CASADISP(COMMREG),B'00010010'                       0131
*                      /* SCAN OFF DSTYPE                             *
*                      DO J= 9 TO 1 BY -1;                         0132
*                                                                  0132
         LA    J,9                                                 0132
@DL00132 DS    0H                                                  0133
*                        /* LOOK FOR PERIOD ON END OF DSNAME          *
*                        IF CASADSN(CASADSNL + J - 9) = '.'        0133
*                          THEN       /*  IF FOUND,GET OUT OF LOOP    *
         LR    @12,J                                               0133
         AH    @12,CASADSNL(,COMMREG)                              0133
         ALR   @12,COMMREG                                         0133
         CLI   CASADSN-10(@12),C'.'                                0133
         BE    @RT00133                                            0133
*                            GO TO DOTFND;/* BRANCH OUT               *
*                      END;           /*  END OF DO-LOOP              *
*                                                                  0135
         BCTR  J,0                                                 0135
         LTR   J,J                                                 0135
         BP    @DL00132                                            0135
*                      /* BLANK OUT DS QUALIFIER                      *
*DOTFND:               CASADSN(CASADSNL + J - 8) = ' ';            0136
*                                                                  0136
DOTFND   LH    @12,CASADSNL(,COMMREG)                              0136
         LR    @06,J                                               0136
         ALR   @06,@12                                             0136
         ST    @06,@TF00001                                        0136
         ALR   @06,COMMREG                                         0136
         MVI   CASADSN-9(@06),C' '                                 0136
*                      /* CHECK IF BLANKING IS NECESSARY              *
*                      IF J ^= 8                                   0137
*                        THEN         /*  CONTINUE TO BLANK           *
         CH    J,@CH00058                                          0137
         BE    @RF00137                                            0137
*                          CASADSN(CASADSNL + J - 7:CASADSNL) =    0138
*                            CASADSN(CASADSNL + J - 8:CASADSNL-1); 0138
         LR    @06,COMMREG                                         0138
         AL    @06,@TF00001                                        0138
         SL    @12,@TF00001                                        0138
         AH    @12,@CH00124                                        0138
         LR    @03,COMMREG                                         0138
         AL    @03,@TF00001                                        0138
         MVC   @TS00001(44),CASADSN-9(@03)                         0138
         EX    @12,@SM01420                                        0138
*                      /* STICK 'OBJ' ON END OF DSNAME                *
*                      CASADSN(CASADSNL +J - 8:CASADSNL + J - 6) = 0139
*                        'OBJ';                                    0139
@RF00137 LR    @12,J                                               0139
         AH    @12,CASADSNL(,COMMREG)                              0139
         ST    @12,@TF00001                                        0139
         ALR   @12,COMMREG                                         0139
         MVC   CASADSN-9(3,@12),@CC01265                           0139
*                      /* UPDATE THE LENGTH OF THE DS NAME            *
*                      CASADSNL = CASADSNL + J - 6;                0140
         L     @12,@TF00001                                        0140
         SH    @12,@CH01222                                        0140
         STH   @12,CASADSNL(,COMMREG)                              0140
*                      CALL DA;       /*  GO TO IKJEBEDA TO UNALLOCATE*
         BAL   @14,DA                                              0141
*                    END;             /*  END UNALLOC-OBJ ROUTINE     *
*              END;                   /*  END OF UNALLOCATION         *
*                                                                  0143
@RF00128 DS    0H                                                  0144
*          /* CHECK IF MOD MSG BIT SHOULD BE ON                       *
*          IF RETSAVE ^= 0                                         0144
*            THEN                     /* IF NOT TURN OFF MOD MSG BIT  *
@RF00123 LTR   RETSAVE,RETSAVE                                     0144
         BZ    @RF00144                                            0144
*              CAMODMSG= '0'B;        /* TURN IT OFF                  *
         NI    CAMODMSG(COMMREG),B'11101111'                       0145
*          RETCDREG= RETSAVE;         /* GET RETURN CODE VALUE        *
*                                                                  0146
@RF00144 LR    RETCDREG,RETSAVE                                    0146
*            RESPECIFY (GPR12P,GPR13P) RSTD;                       0147
*            CANXTSVA = GPR13P;      /* UPDATE NEXT-SAVE-AREA PTR    */
         ST    GPR13P,CANXTSVA(,COMMREG)                           0148
*            GPR12P = GPR13P;        /* SAVE PRESENT SAVE-AREA ADDR  */
         LR    GPR12P,GPR13P                                       0149
*            GPR13P = (GPR13P + 4) -> CASAVPTR; /* GET BACKWARD      */
         L     @00,CASAVPTR+4(,GPR13P)                             0150
         LR    GPR13P,@00                                          0150
*                                    /* SAVE-AREA PTR                */
*            RESPECIFY CASAVE BASED(GPR12P); /* CHANGE BASE FOR      */
*                                    /* SAVE-AREA                    */
*            CASAVE = CASAVE && CASAVE; /* ZERO OUT THIS SAVE-AREA   */
         XC    CASAVE(72,GPR12P),CASAVE(GPR12P)                    0152
*            RESPECIFY CASAVE BASED;                               0153
*            RETURN CODE(RETCDREG);  /* RETURN WITH RETURN CODE      */
         L     @14,12(,@13)                                        0154
         LM    @00,@12,20(@13)                                     0154
         BR    @14                                                 0154
*            RESPECIFY (GPR12P,GPR13P) UNRSTD;                     0155
*                                       /* RETURN                  0156
**/                                                                0156
*          GENERATE DATA DEFS(RUPCE); /* GENERATE PARSE MACROS        *
*INCORRTN: /***********************************************************
*          /* THIS SUB-STRUCTURE IS THE ROUTINE CALLED IF THE DATA SET*
*          /* TYPE ACCEPTS AN INCORE DATA SET. IT IS ENTERED ONLY     *
*          /* FROM THE MAIN STRUCTURE.                                *
*          /***********************************************************
*          PROC OPTIONS(NOSAVEAREA,NOSAVE);  /*INCORE SUBROUTINE      *
@EL00001 DS    0H                                                  0157
@EF00001 DS    0H                                                  0157
@ER00001 LM    @14,@12,12(@13)                                     0157
         BR    @14                                                 0157
INCORRTN DS    0H                                                  0158
*          /* RESTRICT NEEDED REGISTERS                               *
*          RESPECIFY (PARMREG1,COMMREG,DATAREG,BASEREG,BASEREG2) RSTD;
*          INCORSAV=RETREG;           /* SAVE R14                     *
*                                                                  0159
         ST    RETREG,INCORSAV                                     0159
*          /* SHOULD BUILD COMMENCE                                   *
*          IF RETSAVE = 0                                          0160
*            THEN                     /* IF SO CONTINUE               *
         LTR   RETSAVE,RETSAVE                                     0160
         BNZ   @RF00160                                            0160
*              DO;                                                 0161
*                UTWORD1= CAPTCDCB;   /* GET DCB ADDRESS              *
         MVC   UTWORD1(4),CAPTCDCB(COMMREG)                        0162
*                UTOPTION= '84'X;     /* INDICATE READ FIRST          *
         MVI   UTOPTION,X'84'                                      0163
*                CALL UT;             /* PERFORM READ OPERATION       *
*                                                                  0164
         BAL   @14,UT                                              0164
*                /* CHECK IF READ OK                                  *
*                IF RETSAVE = 0                                    0165
*                  THEN               /* CONTINUE PROCESSING          *
         LTR   RETSAVE,RETSAVE                                     0165
         BNZ   @RF00165                                            0165
*                    DO;                                           0166
*                      GETLEN= 4112;  /* INDICATE LENGTH OF GETMAIN   *
         MVC   GETLEN(4),@CF01275                                  0167
*                      GETMODE= '20'X;/* INDICATE TYPE OF GETMAIN     *
         MVI   GETMODE,X'20'                                       0168
*                      GETSP= 78;     /* INDICATE SUBPOOL FOR GETMAIN *
         MVI   GETSP,X'4E'                                         0169
*                      PARMREG1= ADDR(GETAREA);/* PT TO GETMAIN LIST  *
         LA    PARMREG1,GETAREA                                    0170
*                      GENERATE;      /* GEN THE GETMAIN              *
*                                                                  0171
          GETMAIN ,A=GETPTR,MF=(E,(1)) GET AREA FOR STACK
*                      /* CHECK IF GETMAIN WAS SUCCESSFUL             *
*                      IF RETCDREG= 0                              0172
*                        THEN         /* IF SO CONTINUE               *
         LTR   RETCDREG,RETCDREG                                   0172
         BNZ   @RF00172                                            0172
*                          DO;                                     0173
*                            BUFREELN= 4112;  /* INDICATE LENGTH TO FRE
*                                                IF IT BECOMES NEC    *
         MVC   BUFREELN(4),@CF01275                                0174
*                            GETWD= GETPTR + 16;    /* PT TO 4K AREA  *
*                                                                  0175
         LA    @12,16                                              0175
         AL    @12,GETPTR                                          0175
         ST    @12,GETWD                                           0175
*                            /* CHECK RECORD FORMAT                   *
*                            IF CARECFM= '1'B                      0176
*                              THEN   /* IF FIXED INITIALIZ AS FOLLOWS*
         TM    CARECFM(COMMREG),B'01000000'                        0176
         BNO   @RF00176                                            0176
*                                DO;                               0177
*                                  LENTHVAL= LL - 4;   /* SET LL FOR
*                                                         VARIBLE REC *
         LH    LENTHVAL,LL                                         0178
         SH    LENTHVAL,@CH00373                                   0178
*                                  TYPEOFF=9; /* OFFSET INTO REC      *
         LA    TYPEOFF,9                                           0179
*                                END;                              0180
*                              ELSE   /* ELSE,RECFM IS VAR            *
*                                DO;                               0181
         B     @RC00176                                            0181
@RF00176 DS    0H                                                  0182
*                                  LENTHVAL= LL;/* LL FOR VAR REC     *
         LH    LENTHVAL,LL                                         0182
*                                  TYPEOFF= 5; /* OFFSET INTO REC     *
         LA    TYPEOFF,5                                           0183
*                                END;                              0184
*                            SAVELEN= LENTHVAL;/* INIT END INDICATOR  *
@RC00176 ST    LENTHVAL,SAVELEN                                    0185
*                            /* PERFORM MOVE INTO 4K BUFFER           *
*                            DO BUFPTR=GETWD TO GETWD + 4096 - SAVELEN
*                                  BY LENTHVAL;                    0186
         L     @06,GETWD                                           0186
         B     @DE00186                                            0186
@DL00186 DS    0H                                                  0187
*                              /* PERFORM MOVE OF RECORD              *
*                              INCRAREA(1:SAVELEN)=                0187
*                                    RECORD(TYPEOFF:SAVELEN+TYPEOFF-1);
*                                                                  0187
         L     @05,SAVELEN                                         0187
         BCTR  @05,0                                               0187
         LA    @15,RECORD-1(TYPEOFF)                               0187
         EX    @05,@SM01422                                        0187
*                              /* ATTENTION CHECK                     *
*                              IF CAATTNIS = '1'B                  0188
*                                THEN /* IF SO SET RETURN INDICATOR   *
         TM    CAATTNIS(COMMREG),B'01000000'                       0188
         BNO   @RF00188                                            0188
*                                  RETSAVE = -1;    /* SET RC         *
         SLR   RETSAVE,RETSAVE                                     0189
         BCTR  RETSAVE,0                                           0189
*                                ELSE /* IF NO ATTN CONTINUE          *
*                                  DO;                             0190
         B     @RC00188                                            0190
@RF00188 DS    0H                                                  0191
*                                    UTWORD1=CAPTCDCB;/* SET DCB PTR  *
         MVC   UTWORD1(4),CAPTCDCB(COMMREG)                        0191
*                                    UTOPTION='82'X;/*             0192
*                                                     IND READ NEXT   *
         MVI   UTOPTION,X'82'                                      0192
*                                    CALL UT;/* PERFORM READ          *
         BAL   @14,UT                                              0193
*                                  END;                            0194
*                                                                  0194
*                              /* CHECK IF TO CONTINUE                *
*                              IF RETSAVE ^= 0                     0195
*                                THEN /*IF SO GET OUT OF LOOP         *
@RC00188 LTR   RETSAVE,RETSAVE                                     0195
         BNZ   @RT00195                                            0195
*                                  GO TO CHECK;/* CHECK WHY ENDED     *
*                                ELSE /* OTHERWISE CONTINUE LOOP      *
*                                                                  0197
*                                  /* CHECK RECORD FORMAT FOR VARIABLE*
*                                  IF CARECFM = '0'B               0197
*                                    THEN/* IF SO CHANGE VALUES       *
         TM    CARECFM(COMMREG),B'01000000'                        0197
         BNZ   @RF00197                                            0197
*                                      DO;                         0198
*                                        LENTHVAL=SAVELEN;/*UPDTE INCR*
         L     LENTHVAL,SAVELEN                                    0199
*                                        SAVELEN= LL;/*GET NEW REC LEN*
         LH    @06,LL                                              0200
         ST    @06,SAVELEN                                         0200
*                                      END;                        0201
*                            END;  /* END DO-LOOP                     *
*                                                                  0202
@RF00197 LR    @06,LENTHVAL                                        0202
         AL    @06,BUFPTR                                          0202
@DE00186 ST    @06,BUFPTR                                          0202
         LH    @05,@CH01277                                        0202
         AL    @05,GETWD                                           0202
         SL    @05,SAVELEN                                         0202
         CR    @06,@05                                             0202
         BNH   @DL00186                                            0202
*                            /* WAS AN ATTN OR I/O ERROR ENCOUNTERED  *
*CHECK:                      IF RETSAVE > -3                       0203
*                              THEN/* IF SO INDICATE FREEMAIN         *
CHECK    CH    RETSAVE,@CH01280                                    0203
         BNH   @RF00203                                            0203
*                                FREEBIT = '1'B; /* FLIP ON FREE BIT  *
         OI    FREEBIT,B'00100000'                                 0204
*                              ELSE/* OTHERWISE CHECK OTHER CONDITIONS*
*                                DO;                               0205
         B     @RC00203                                            0205
@RF00203 DS    0H                                                  0206
*                                  RETSAVE= 0;   /* SET GOOD RC       *
         SLR   RETSAVE,RETSAVE                                     0206
*                                  STACKBIT= '1'B; /* FLIP ON      0207
*                                                     STACK BIT       *
*                                                                  0207
         OI    STACKBIT,B'00010000'                                0207
*                                  /*CHECK FOR PARTIAL FREEMAIN       *
*                                  IF BUFPTR + SAVELEN <           0208
*                                      GETWD + 4096 - 7            0208
*                                    THEN/* IF SO RND TO DWORD        *
         L     @12,BUFPTR                                          0208
         AL    @12,SAVELEN                                         0208
         L     @06,GETWD                                           0208
         LR    @00,@06                                             0208
         SH    @00,@CH01411                                        0208
         CR    @12,@00                                             0208
         BNL   @RF00208                                            0208
*                                      DO;                         0209
*                                        /* ADD SEVEN TO END BUF      *
*                                        ENDWD= BUFPTR + SAVELEN + 0210
*                                                7;                0210
         AH    @12,@CH00124                                        0210
         LR    ENDWD,@12                                           0210
*                                        /* ROUND DOWN                *
*                                        GETPTR= ENDWD &           0211
*                                                 'FFFFFFF8'X;     0211
         LR    @12,ENDWD                                           0211
         N     @12,@CF01282                                        0211
         ST    @12,GETPTR                                          0211
*                                        /* GET LENGTH TO FREE        *
*                                        BUFREELN= GETWD +4096 -   0212
*                                                 GETPTR;          0212
         AH    @06,@CH01277                                        0212
         SLR   @06,@12                                             0212
         ST    @06,BUFREELN                                        0212
*                                        FREEBIT= '1'B; /* IND FREEING*
         OI    FREEBIT,B'00100000'                                 0213
*                                      END;/* END ROUND RTN     */ 0214
*                                END;/* END FREEBIT SET RTN           *
*                                                                  0215
@RF00208 DS    0H                                                  0216
*                            /* PERFORM FREEMAIN IF NECESSARY         *
*                            IF FREEBIT= '1'B                      0216
*                              THEN/* IF SO FREEMAIN                  *
@RC00203 TM    FREEBIT,B'00100000'                                 0216
         BNO   @RF00216                                            0216
*                                DO;                               0217
*                                  GENERATE;/* FREEMAIN               *
         FREEMAIN V,A=GETPTR,SP=78,MF=(E,FREEXX)
*                                END;                              0219
*                                                                  0219
*                            /* IS INCORE PROCESSING TO BE DONE       *
*                            IF STACKBIT= '1'B                     0220
*                              THEN/* IF SO CONT TO STACK             *
@RF00216 TM    STACKBIT,B'00010000'                                0220
         BNO   @RF00220                                            0220
*                                DO;                               0221
*                                  /* SET PTR TO LSD                  *
*                                  LSDPTR= GETWD - 16;             0222
         L     @12,GETWD                                           0222
         LR    @06,@12                                             0222
         SH    @06,@CH00233                                        0222
         ST    @06,LSDPTR                                          0222
*                                  LSDANEXT= GETWD;/* SET STACK PTR   *
         ST    @12,LSDANEXT(,@06)                                  0223
*                                  LSDADATA = GETWD; /* SET STACK PTR *
*                                                                  0224
         ST    @12,LSDADATA(,@06)                                  0224
*                                  /* CHECK RECORD FORMAT             *
*                                  IF CARECFM= '1'B                0225
*                                    THEN/* IF FIXED SET RECLEN       *
         TM    CARECFM(COMMREG),B'01000000'                        0225
         BNO   @RF00225                                            0225
*                                      /* SET REC LENGTH              *
*                                      LSDRCLEN= CALRECL - 4;      0226
         LH    @12,CALRECL(,COMMREG)                               0226
         SH    @12,@CH00373                                        0226
         STH   @12,LSDRCLEN(,@06)                                  0226
*                                    ELSE/* ELSE INDICATE VAR         *
*                                      /* SET ZERO REC LEN            *
*                                      LSDRCLEN= 0;                0227
         B     @RC00225                                            0227
@RF00225 L     @12,LSDPTR                                          0227
         SLR   @06,@06                                             0227
         STH   @06,LSDRCLEN(,@12)                                  0227
*                                  /* SET LENGTH OF INCORE BUFFER     *
*                                  LSDTOTLN= BUFPTR + SAVELEN - GETWD;
@RC00225 L     @12,LSDPTR                                          0228
         L     @06,BUFPTR                                          0228
         AL    @06,SAVELEN                                         0228
         SL    @06,GETWD                                           0228
         STH   @06,LSDTOTLN(,@12)                                  0228
*                                  /* ZERO RESERVED AREA              *
*                                  LSDRSVRD=LSDRSVRD && LSDRSVRD;  0229
         L     @06,LSDRSVRD                                        0229
         LR    @03,@06                                             0229
         XR    @03,@06                                             0229
         ST    @03,LSDRSVRD                                        0229
*                                  /* PT TO STACK WORK AREA           *
*                                  STPBPTR= ADDR(STPBWK);          0230
         LA    @06,STPBWK                                          0230
         ST    @06,STPBPTR                                         0230
*                                  /* PT TO TMPLST                    *
*                                  STPLPTR= ADDR(CATMPLST);        0231
         LA    @15,CATMPLST(,COMMREG)                              0231
         LR    STPLPTR,@15                                         0231
*                                  /* GET PTR TO PARM BLOCK           *
*                                  STPLSTPB= ADDR(STPB);           0232
         ST    @06,STPLSTPB(,STPLPTR)                              0232
*                                  /* GET PTR TO LSD                  *
*                                  STPBALSD= ADDR(LSD);            0233
         ST    @12,STPBALSD(,@06)                                  0233
*                                  /* ZERO RESERVED AREA IN PARM BLK  *
*                                  STACKRES= 0;                    0234
         SLR   @06,@06                                             0234
         ST    @06,STACKRES                                        0234
*                                  RESPECIFY(STACKREG)RSTD;/* NEED REG*
*                                  STACKREG=LSDPTR;/*GET LSD PTR      *
         LR    STACKREG,@12                                        0236
*                                  /* PUT PARMLIST IN REG1            *
*                                  PARMREG1= ADDR(CATMPLST);       0237
         LR    PARMREG1,@15                                        0237
*                                  /* GO TO STACK BUFFER              *
*                                  GEN REFS(STACKREG);             0238
*                                                                  0238
         STACK STORAGE=((STACKREG),SOURCE),MF=(E,(1))
*                                  RESPECIFY(STACKREG) UNRSTD;     0239
*                                  /* DON'T NEED REG                  *
*                                  /* WAS STACK UNSUCCESSFUL          *
*                                  IF RETCDREG ^= 0                0240
*                                    THEN/* IF SO CLEAN UP            *
         LTR   RETCDREG,RETCDREG                                   0240
         BZ    @RF00240                                            0240
*                                      DO;                         0241
*                                        RETSAVE= 8;               0242
         LA    RETSAVE,8                                           0242
*                                        MSGLEN= 9; /* IND MSG LENGTH *
         MVC   MSGLEN(2),@CH01237                                  0243
*                                        MSGTEXT= 'STACK';/* MOVE TEXT*
         MVI   MSGTEXT+5,C' '                                      0244
         MVC   MSGTEXT+6(2),MSGTEXT+5                              0244
         MVC   MSGTEXT(5),@CC01284                                 0244
*                                        MSGLEN2= 6; /* GET INS LENGTH*
         MVC   MSGLEN2(2),@CH01222                                 0245
*                                        MSGTEXT2= '04';/* MOVE TEXT  *
         MVI   MSGTEXT2+2,C' '                                     0246
         MVC   MSGTEXT2+3(5),MSGTEXT2+2                            0246
         MVC   MSGTEXT2(2),@CC01285                                0246
*                                        CALL SYSERR;/* PUT OUT MSG   *
*                                                                  0247
         BAL   @14,SYSERR                                          0247
*                                        /* CHECK IF PART FREEMAIN WAS
*                                           DONE */                0248
*                                        IF FREEBIT = '1'B         0248
*                                          THEN/* IF SO               *
         TM    FREEBIT,B'00100000'                                 0248
         BNO   @RF00248                                            0248
*                                            DO;                   0249
*                                              /* PT TO 4K BUFFER     *
*                                              GETPTR= GETWD - 16; 0250
         L     @12,GETWD                                           0250
         SH    @12,@CH00233                                        0250
         ST    @12,GETPTR                                          0250
*                                              /* GET LENGTH TO FREE  *
*                                              BUFREELN=BUFPTR +SAVELEN
*                                                     - GETPTR;    0251
         L     @06,BUFPTR                                          0251
         AL    @06,SAVELEN                                         0251
         SLR   @06,@12                                             0251
         ST    @06,BUFREELN                                        0251
*                                            END;                  0252
*                                        GENERATE;/* DO FREEMAIN      *
@RF00248 DS    0H                                                  0253
         FREEMAIN V,A=GETPTR,SP=78,MF=(E,FREEXX)
*                                      END;                        0254
*                                    ELSE/* IF STACK OK CONT          *
*                                      DO;                         0255
         B     @RC00240                                            0255
@RF00240 DS    0H                                                  0256
*                                        CMDNAME= '*';/* MOVE IN * IN
*                                                        COM BUFFER   *
         L     @12,COMBFPTR                                        0256
         MVI   CMDNAME+1(@12),C' '                                 0256
         MVC   CMDNAME+2(25,@12),CMDNAME+1(@12)                    0256
         MVI   CMDNAME(@12),C'*'                                   0256
*                                        /* PT TO COM AREA FOR CI     *
*                                        COMPTR= COMMREG;          0257
         ST    COMMREG,COMPTR                                      0257
*                                        /* PUT PTR TO PARMLST INREG1 *
*                                        PARMREG1= ADDR(CIPLST);   0258
         LA    PARMREG1,CIPLST                                     0258
*                                                 /* GO TO CI         *
*                                        GEN REFS(COMMREG,PARMREG1);
*                                                                  0259
         IKJEBESH   (COMMREG),IKJEBECI,PARAM=((PARMREG1)),MF=(E,AREAM)
*                                        /* CHECK BAD CI RETURN       *
*                                        IF RETCDREG ^= 0          0260
*                                          THEN/* IF BAD SET RC       *
         LTR   RETCDREG,RETCDREG                                   0260
         BZ    @RF00260                                            0260
*                                            RETSAVE = 8;    /* RC=8  *
         LA    RETSAVE,8                                           0261
*                                      END;/* END CI ROUTINE          *
*                                  END;/* END INCORE ROUTINE          *
*                                ELSE /* OTHERWISE CHECK CONDITIONS   *
*                                                                  0264
*                                /* WAS DS TOO BIG FOR 4K             *
*                                IF RETSAVE = 0                    0264
*                                  THEN/* IF SO GO TO ALLOC           *
         B     @RC00220                                            0264
@RF00220 LTR   RETSAVE,RETSAVE                                     0264
         BNZ   @RF00264                                            0264
*                                    CALL DSRTN;/* CALL ALLOC RTN     *
         BAL   @14,DSRTN                                           0265
*                          END;       /* END GETMAIN OK LOGIC         *
*                        ELSE                                      0267
*                          CALL DSRTN;/* CALL ALLOCATION ROUTINE      *
         B     @RC00172                                            0267
@RF00172 BAL   @14,DSRTN                                           0267
*                    END;             /* END READ-FIRST LOGIC         *
*                  ELSE               /* IF READ FIRST BAD CHECK WHY  *
*                                                                  0269
*                    /* WAS DATA SET EMPTY                            *
*                    IF RETSAVE = -3                               0269
*                      THEN           /* IF SO ISSUE EMPTY MSG        *
         B     @RC00165                                            0269
@RF00165 CH    RETSAVE,@CH01280                                    0269
         BNE   @RF00269                                            0269
*                        CALL EMPTYRTN;/* GO ISSUE MSG                *
         BAL   @14,EMPTYRTN                                        0270
*              END;                   /* END OF INIT RETSAVE=0 LOGIC  *
@RF00269 DS    0H                                                  0271
@RC00165 DS    0H                                                  0272
*            RETREG=INCORSAV;         /* RESTORE R14                  *
@RF00160 L     RETREG,INCORSAV                                     0272
*            RETURN;                                               0273
@EL00002 DS    0H                                                  0273
@EF00002 DS    0H                                                  0273
@ER00002 BR    @14                                                 0273
*          END INCORRTN;                                           0274
*UT:       /***********************************************************
*          /* THIS SUB-STRUCTURE IS THE ROUTINE CALLED TO EITHER READ *
*          /* THE FIRST RECORD OR DO A READ NEXT. IT IS ENTERED ONLY  *
*          /* FROM THE INCORRTN SUB-STRUCTURE.                        *
*          /***********************************************************
*          PROC OPTIONS(NOSAVEAREA,NOSAVE);  /* READ ROUTINE          *
UT       DS    0H                                                  0276
*          /* RESTRICT NEEDED REGISTERS                               *
*          RESPECIFY(PARMREG1,COMMREG,DATAREG,BASEREG,BASEREG2) RSTD;
*          UTSAV=RETREG;              /* SAVE R14                     *
         LR    UTSAV,RETREG                                        0277
*          GENERATE REFS(COMMREG);    /* GO TO IKJEBEUT TO READ       *
         IKJEBESH   (COMMREG),IKJEBEUT,PARAM=((COMMREG),UTWORD1),      X
               MF=(E,AREAM)
*          RESPECIFY (RETCDREG) RSTD;                              0279
*          /* WAS I/O ERROR ENCOUNTERED                               *
*          IF RETCDREG > 4                                         0280
*            THEN                     /* IF SO SET RC                 *
         CH    RETCDREG,@CH00373                                   0280
         BNH   @RF00280                                            0280
*              RETSAVE= 12;           /* SET RC=12                    *
         LA    RETSAVE,12                                          0281
*            ELSE                     /* CHECK OTHER RC VALUES        *
*                                                                  0282
*              /* WAS RECORD FOUND                                    *
*              IF RETCDREG =0                                      0282
*                THEN                 /* IF SO MOVE RECORD            *
         B     @RC00280                                            0282
@RF00280 LTR   RETCDREG,RETCDREG                                   0282
         BNZ   @RF00282                                            0282
*                  DO;                                             0283
*                    /* MOVE RECORD                                   *
*                    RECORD(1:256)= UTREC(1:256);                  0284
         MVC   RECORD(256),UTREC(PARMREG1)                         0284
*                    RECORD(257:263)= UTREC(257:263);              0285
         MVC   RECORD+256(7),UTREC+256(PARMREG1)                   0285
*                  END;                                            0286
*                ELSE                 /* OTHERWISE EOD HAS OCCURED    *
*                  RETSAVE= -3;       /* INDICATE EOD                 *
         B     @RC00282                                            0287
@RF00282 LH    RETSAVE,@CH01280                                    0287
*          RESPECIFY (RETCDREG) UNRSTD;                            0288
@RC00282 DS    0H                                                  0288
@RC00280 DS    0H                                                  0289
*          RETREG=UTSAV;              /* RESTORE R14                  *
         LR    RETREG,UTSAV                                        0289
*          RETURN;                    /* RETURN TO CALLER             *
@EL00003 DS    0H                                                  0290
@EF00003 DS    0H                                                  0290
@ER00003 BR    @14                                                 0290
*          END UT;                                                 0291
*    INLSTRTN:                                                     0292
*        /*************************************************************
*        /* THIS SUB-STRUCTURE IS THE ROUTINE CALLED IF THE     Y02676*
*        /* DATA SET TYPE ACCEPTS AN INLIST DATA SET (VSBASIC). Y02676*
*        /* IT IS ENTERED ONLY FROM THE MAIN STRUCTURE.         Y02676*
*        /*************************************************************
*        PROC OPTIONS(NOSAVEAREA,NOSAVE);                          0292
INLSTRTN DS    0H                                                  0293
*                                      /* RESTRICT REGISTERS    Y02676*
*      RFY (PARMREG0,PARMREG1,COMMREG,BASEREG,BASEREG2,DATAREG) RSTD;
*        INLSTSAV=RETREG;              /* SAVE R14                    *
*                                                                  0294
         ST    RETREG,INLSTSAV                                     0294
*        /* SET UP PARM LIST TO IKJEBEDC TO COPY UTILITY DATA   Y02676*
*        /* SET TO INCORE DATA SET                              Y02676*
*                                                                  0295
*        EDCCOMM = COMMREG;            /* COMM AREA PTR         Y02676*
         ST    COMMREG,EDCCOMM                                     0295
*        EDCOUTP = ADDR(EDCOUTA);      /* PTR TO OUTPUT AREA    Y02676*
         LA    @12,EDCOUTA                                         0296
         ST    @12,EDCOUTP                                         0296
*        PARMREG1 = ADDR(EDCPARMS);    /* PARMS ADDR IN REG 1   Y02676*
         LA    PARMREG1,EDCPARMS                                   0297
*        PARMREG0 = 0;                 /* ENTRY CODE IN REG 0   Y02676*
         SLR   PARMREG0,PARMREG0                                   0298
*        CALL IKJEBEDC;                /* INVOKE DC             Y02676*
         L     @15,@CV01204                                        0299
         BALR  @14,@15                                             0299
*        RESPECIFY (RETCDREG) RSTD;                                0300
*        IF RETCDREG = 0 THEN          /* IF COPY SUCCESSFUL,   Y02676*
         LTR   RETCDREG,RETCDREG                                   0301
         BNZ   @RF00301                                            0301
*          DO;                         /* THEN                  Y02676*
*        /* CONVERT ADDRESS OF PARAMETER LIST TO PRINTABLE HEX  Y02676*
*        /* AND STORE AS SUBFIELD OF INLIST KEYWORD IN COMMAND  Y02676*
*        /* BUFFER.                                             Y02676*
*                                                                  0303
*            CAPTICDS = ADDR(EDCOUTDS);/* PTR TO DS ADDR        Y02676*
         LA    @14,EDCOUTDS                                        0303
         ST    @14,CAPTICDS(,COMMREG)                              0303
*            CAPTICLN = ADDR(EDCOUTLN);/* PTR TO DS LENGTH      Y02676*
         LA    @14,EDCOUTLN                                        0304
         ST    @14,CAPTICLN(,COMMREG)                              0304
*            LSTADDR = ADDR(LSTPARMS); /* GET ADDR OF PARMLIST  Y02676*
         LA    @14,LSTPARMS                                        0305
         ST    @14,LSTADDR                                         0305
*            CATEMPBF(1:16) = TABLE;   /* TRANSLATE TABLE       Y02676*
         MVC   CATEMPBF(16,COMMREG),TABLE                          0306
*            GENERATE REFS(COMMREG);   /* CONVERT               Y02676*
             UNPK  ADDRUNPK(7),LSTADDR+1(4)                     Y02676
             TR    ADDRUNPK(7),CATEMPBF-X'F0'(COMMREG)          Y02676
*            COMINLST = 'INLIST(';     /* INLIST KEYWD IN BUF   Y02676*
         L     @14,COMBFPTR                                        0308
         MVI   COMINLST+7(@14),C' '                                0308
         MVC   COMINLST+8(7,@14),COMINLST+7(@14)                   0308
         MVC   COMINLST(7,@14),@CC01294                            0308
*            COMINLST(8:13)= ADDRUNPK(1:6); /* ADDR IN BUF    @YM03568*
         MVC   COMINLST+7(6,@14),ADDRUNPK                          0309
*            COMINLST(14:15)='.)';     /* RIGHT PAREN IN BUF    Y02676*
*                                                                  0310
         MVC   COMINLST+13(2,@14),@CC01297                         0310
*        /* MOVE DATA SET NAME TO A BUFFER                      Y02676*
*                                      /* MOVE DSNAME           Y02676*
*            EDTDSNME = CADSNREC(1:CADSNLEN-4);                    0311
         MVI   EDTDSNME+1,C' '                                     0311
         MVC   EDTDSNME+2(61),EDTDSNME+1                           0311
         LH    @14,CADSNLEN(,COMMREG)                              0311
         LR    @12,@14                                             0311
         SH    @12,@CH00130                                        0311
         EX    @12,@SM01425                                        0311
*            IF CAEDPSWD ^= '        ' THEN/*                      0312
*                                         IF PASSWORD PRESENT   Y02676*
         CLC   CAEDPSWD(8,COMMREG),@CC01298                        0312
         BE    @RF00312                                            0312
*              DO;                     /* THEN                  Y02676*
*                INDEX = CADSNLEN-3;                               0314
         SH    @14,@CH00101                                        0314
         STH   @14,INDEX                                           0314
*                                      /* MOVE IN SLASH         Y02676*
*                EDTDSNME(INDEX) = '/';                            0315
         LA    @12,EDTDSNME-1(@14)                                 0315
         MVI   0(@12),C'/'                                         0315
*                PSWDCTR = 0;          /* INIT COUNTER TO 0     Y02676*
         SLR   @14,@14                                             0316
         STH   @14,PSWDCTR                                         0316
*                DO I = 1 TO 8;        /* FIND LEN OF PASSWORD  Y02676*
         LA    I,1                                                 0317
@DL00317 DS    0H                                                  0318
*                  IF CAEDPSWD(I)^= ' ' THEN                       0318
         LR    @14,COMMREG                                         0318
         ALR   @14,I                                               0318
         CLI   CAEDPSWD-1(@14),C' '                                0318
         BE    @RF00318                                            0318
*                    PSWDCTR = PSWDCTR+1;                          0319
         LH    @14,PSWDCTR                                         0319
         LA    @14,1(,@14)                                         0319
         STH   @14,PSWDCTR                                         0319
*                END;                                              0320
@RF00318 AH    I,@CH00060                                          0320
         CH    I,@CH00058                                          0320
         BNH   @DL00317                                            0320
*                INDEX = INDEX + 1;                                0321
         LA    @14,1                                               0321
         AH    @14,INDEX                                           0321
         STH   @14,INDEX                                           0321
*                                      /* MOVE IN PASSWORD      Y02676*
*                EDTDSNME(INDEX:INDEX+PSWDCTR-1) = CAEDPSWD(1:PSWDCTR);
         LA    @12,EDTDSNME-1(@14)                                 0322
         LH    @14,PSWDCTR                                         0322
         LR    @06,@14                                             0322
         BCTR  @06,0                                               0322
         EX    @06,@SM01427                                        0322
*                EDTDSNLL = CADSNLEN-1+PSWDCTR;                    0323
         LH    @12,CADSNLEN(,COMMREG)                              0323
         BCTR  @12,0                                               0323
         ALR   @12,@14                                             0323
         STH   @12,EDTDSNLL                                        0323
*              END;                                                0324
*            ELSE                      /* IF NO PASSWORD,       Y02676*
*              EDTDSNLL = CADSNLEN-2;  /* SET DSNAME LENGTH     Y02676*
*                                                                  0325
         B     @RC00312                                            0325
@RF00312 LH    @14,CADSNLEN(,COMMREG)                              0325
         BCTR  @14,0                                               0325
         BCTR  @14,0                                               0325
         STH   @14,EDTDSNLL                                        0325
*        /* SET UP PARAMETER LIST POINTED TO BY SUBFIELD OF     Y02676*
*        /* INLIST KEYWORD.                                     Y02676*
*            LSTDSNAM = ADDR(EDTDSNAM);/* PTR TO DSNAME         Y02676*
@RC00312 LA    @14,EDTDSNAM                                        0326
         ST    @14,LSTDSNAM                                        0326
*            LSTCORDS = EDCOUTDS;      /* PTR TO INCORE DATASET Y02676*
         MVC   LSTCORDS(4),EDCOUTDS                                0327
*            LSTATTRB = ADDR(DSATTRB); /* PTR TO DS ATTRIBUTES  Y02676*
*                                                                  0328
         LA    @14,DSATTRB                                         0328
         ST    @14,LSTATTRB                                        0328
*        /* SET UP DATA SET ATTRIBUTES                          Y02676*
*            IF CARECFM = '1'B THEN    /* IF FIXED FORMAT     @YM03568*
         TM    CARECFM(COMMREG),B'01000000'                        0329
         BNO   @RF00329                                            0329
*              ATTRLRC = EDCOUTLR;     /* SET LRECL           @YM03568*
         MVC   ATTRLRC(4),EDCOUTLR                                 0330
*            ELSE                      /* IF VARIABLE         @YM03568*
*              ATTRLRC = 0;            /* SET LRECL TO 0      @YM03568*
         B     @RC00329                                            0331
@RF00329 SLR   @14,@14                                             0331
         ST    @14,ATTRLRC                                         0331
*            ATTRLEN = EDCOUTLN;       /* DATA SET LENGTH       Y02676*
*                                                                  0332
@RC00329 MVC   ATTRLEN(4),EDCOUTLN                                 0332
*        /* SET UP COMMAND BUFFER AND INVOKE VSBASIC            Y02676*
*            CMDNAME = '*';            /* DATA SET NAME FIELD   Y02676*
         L     @14,COMBFPTR                                        0333
         MVI   CMDNAME+1(@14),C' '                                 0333
         MVC   CMDNAME+2(25,@14),CMDNAME+1(@14)                    0333
         MVI   CMDNAME(@14),C'*'                                   0333
*            COMPTR = COMMREG;         /* PTR TO COMM AREA      Y02676*
         ST    COMMREG,COMPTR                                      0334
*            PARMREG1 = ADDR(CIPLST);  /* PARM LIST FOR CI      Y02676*
         LA    PARMREG1,CIPLST                                     0335
*            GENERATE REFS(COMMREG,PARMREG1);/* INVOKE VSBASIC  Y02676*
         IKJEBESH (COMMREG),IKJEBECI,PARAM=((PARMREG1)),MF=(E,AREAM)
*            IF RETCDREG ^= 0 THEN     /* IF VSBASIC FAILED     Y02676*
         SLR   @14,@14                                             0337
         CR    RETCDREG,@14                                        0337
         BE    @RF00337                                            0337
*              DO;                                                 0338
*                RETSAVE = 8;          /* SET RETURN CODE 8     Y02676*
         LA    RETSAVE,8                                           0339
*                                      /* IF NEED TO FREE CORE  Y02676*
*                IF LSTCORDS ^= 0 THEN    /*                  @OZ01895*
         C     @14,LSTCORDS                                        0340
         BE    @RF00340                                            0340
*                  DO;                 /* THEN                @YM08150*
*                    GETPTR = PTICDS;  /* PTR TO CORE TO FREE   Y02676*
         L     @14,CAPTICDS(,COMMREG)                              0342
         MVC   GETPTR(4),PTICDS(@14)                               0342
*                    BUFREELN = ICLEN; /* LEN OF CORE TO FREE   Y02676*
         L     @14,CAPTICLN(,COMMREG)                              0343
         MVC   BUFREELN(4),ICLEN(@14)                              0343
*                    GENERATE;         /* ISSUE FREEMAIN        Y02676*
         FREEMAIN V,A=GETPTR,SP=78,MF=(E,FREEXX)
*              END;                    /*                     @OZ01895*
*          END;                        /*                     @OZ01895*
@RF00340 DS    0H                                                  0347
*                    CAPTICDS = 0;     /* SET PTR TO 0        @YM08150*
@RF00337 SLR   @14,@14                                             0347
         ST    @14,CAPTICDS(,COMMREG)                              0347
*                    CAPTICLN = 0;     /* SET LEN TO 0        @YM08150*
         ST    @14,CAPTICLN(,COMMREG)                              0348
*          END;                                                    0349
*        ELSE                          /* IF DC FAILED          Y02676*
*          IF RETCDREG = 4 THEN        /* DUE TO EMPTY DATA SET Y02676*
         B     @RC00301                                            0350
@RF00301 CH    RETCDREG,@CH00373                                   0350
         BNE   @RF00350                                            0350
*            CALL EMPTYRTN;            /* GO TO ISSUE MSG       Y02676*
         BAL   @14,EMPTYRTN                                        0351
*          ELSE                        /* ANY OTHER DC ERROR,   Y02676*
*            RETSAVE = 8;              /* SET RETURN CODE 8     Y02676*
         B     @RC00350                                            0352
@RF00350 LA    RETSAVE,8                                           0352
*        RESPECIFY (RETCDREG) UNRSTD;                              0353
@RC00350 DS    0H                                                  0353
@RC00301 DS    0H                                                  0354
*        RETREG=INLSTSAV;                  /* RESTORE R14             *
         L     RETREG,INLSTSAV                                     0354
*        RETURN;                           /* RETURN TO CALLER        *
@EL00004 DS    0H                                                  0355
@EF00004 DS    0H                                                  0355
@ER00004 BR    @14                                                 0355
*        END INLSTRTN;                                             0356
*EMPTYRTN: /***********************************************************
*          /* THIS SUBSTRUCTURE IS CALLED FROM EITHER THE DSRTN SUB-  *
*          /* STRUCTURE OR THE INCORRTN SUB-STRUCTURE. IT SETS UP THE *
*          /* 'NO LINES IN DATA SET' MESSAGE.                         *
*          /***********************************************************
*          PROC OPTIONS(NOSAVEAREA,NOSAVE);/* DS EMPTY ROUTINE        *
EMPTYRTN DS    0H                                                  0358
*          /* RESTRICT NEEDED REGISTERS                               *
*          RESPECIFY(PARMREG1,DATAREG,COMMREG,BASEREG,BASEREG2) RSTD;
*          EMPTYSAV=RETREG;           /* SAVE R14                     *
         LR    EMPTYSAV,RETREG                                     0359
*          RELMSG1= 1287;             /* GET FIRST LEVEL MSG          *
         MVC   RELMSG1(2),@CH01303                                 0360
*          RELMSG2= 0;                /* NO SECOND LEVEL MSG          *
         SLR   @06,@06                                             0361
         STH   @06,RELMSG2                                         0361
*          LEV1INS= 0;                /* NO FIRST INSERTION           *
         ST    @06,LEV1INS                                         0362
*          LEV2INS= 0;                /* NO SECOND INSERTION          *
         ST    @06,LEV2INS                                         0363
*          GENERATE REFS(LEV1INS,LEV2INS); /* GO TO MESSAGE ROUTINE */
         IKJEBEML  ,,,,MF=(E,AREAM)
*          RETSAVE= -2;               /* INDICATE DATA SET EMPTY      *
         LH    RETSAVE,@CH01304                                    0365
*          RETREG=EMPTYSAV;           /* RESTORE R14                  *
         LR    RETREG,EMPTYSAV                                     0366
*          RETURN;                    /* RETURN TO CALLER             *
@EL00005 DS    0H                                                  0367
@EF00005 DS    0H                                                  0367
@ER00005 BR    @14                                                 0367
*          END EMPTYRTN;                                           0368
*DSRTN:    /***********************************************************
*          /* THIS SUB-STRUCTURE IS THE ALLOCATION PROCESSING ROUTINE.*
*          /* IT CAN BE ENTERED FROM THE MAIN STRUCTURE OR INCORRTN.  *
*          /***********************************************************
*          PROC OPTIONS(NOSAVEAREA,NOSAVE);/*   ALLOCATION SUBROUTINE *
DSRTN    DS    0H                                                  0370
*          /* RESTRICT NEEDED REGISTERS                               *
*          RESPECIFY(PARMREG1,COMMREG,DATAREG,BASEREG,BASEREG2) RSTD;
*          DSRTNSAV=RETREG;           /* SAVE R14                     *
*                                                                  0371
         LR    DSRTNSAV,RETREG                                     0371
*          /* SHOULD ALLOCATION ROUTINE BE DONE                       *
*          IF RETSAVE = 0                                          0372
*            THEN                     /* IF SO, CONTINUE              *
         LTR   RETSAVE,RETSAVE                                     0372
         BNZ   @RF00372                                            0372
*              DO;                                                 0373
*                CASADISP= '0'B;      /* INDICATE NEW DISP            *
*                CASAUNCG= '0'B;      /* INDICATE CATLG               *
         NI    CASADISP(COMMREG),B'11101101'                       0375
*                CALL DA;             /* GO TO IKJEBEDA TO ALLOC      *
*                                                                  0376
         BAL   @14,DA                                              0376
*                /* WAS ALLOC SUCCESSFUL                              *
*                IF RETSAVE = 0                                    0377
*                  THEN               /* IF SO CONTINUE               *
         LTR   RETSAVE,RETSAVE                                     0377
         BNZ   @RF00377                                            0377
*                    DO;                                           0378
*                      ALLOC= '1'B;   /* TURN ON ALLOC BIT            *
         OI    ALLOC,B'01000000'                                   0379
*                      /* SCAN OFF USERID                             *
*                      DO I= 8 TO 1 BY -1 ;                        0380
*                                                                  0380
         LA    I,8                                                 0380
@DL00380 DS    0H                                                  0381
*                        /* WAS PERIOD FOUND                          *
*                        IF CASADSN(9 - I) = '.'                   0381
*                          THEN       /* IF FOUND                     *
         LA    @06,9                                               0381
         SLR   @06,I                                               0381
         ALR   @06,COMMREG                                         0381
         CLI   CASADSN-1(@06),C'.'                                 0381
         BE    @RT00381                                            0381
*                            GO TO USERFND;/* EXIT FROM LOOP          *
*                      END;                                        0383
         BCTR  I,0                                                 0383
         LTR   I,I                                                 0383
         BP    @DL00380                                            0383
*                      /* SCAN OFF DSQUALIFIER                        *
*USERFND:              DO J= 9 TO 1 BY -1;                         0384
*                                                                  0384
USERFND  LA    J,9                                                 0384
@DL00384 DS    0H                                                  0385
*                        /* WAS PERIOD FOUND                          *
*                        IF CASADSN(CASADSNL + J - 9) = '.'        0385
*                          THEN       /* IF FOUND                     *
         LR    @06,J                                               0385
         AH    @06,CASADSNL(,COMMREG)                              0385
         ALR   @06,COMMREG                                         0385
         CLI   CASADSN-10(@06),C'.'                                0385
         BE    @RT00385                                            0385
*                            GO TO QUALFND;/* GET OUT OF LOOP         *
*                      END;                                        0387
         BCTR  J,0                                                 0387
         LTR   J,J                                                 0387
         BP    @DL00384                                            0387
*                      /* MOVE UNQUALIFIED DSNAME INTO COM-BUFFER     *
*QUALFND:              CMDNAME(1:CASADSNL + I + J - 19)=           0388
*                                     CASADSN(10-I:CASADSNL+J-10); 0388
QUALFND  L     @06,COMBFPTR                                        0388
         LR    @04,I                                               0388
         AH    @04,CASADSNL(,COMMREG)                              0388
         ALR   @04,J                                               0388
         SH    @04,@CH00134                                        0388
         LA    @03,10                                              0388
         SLR   @03,I                                               0388
         ALR   @03,COMMREG                                         0388
         EX    @04,@SM01430                                        0388
*                      GENERATE REFS(COMMREG);/* FINAL COPY DATA SET  *
         IKJEBESH  (COMMREG),IKJEBEFC,PARAM=((COMMREG)),MF=(E,AREAM)
*                      RESPECIFY (RETCDREG) RSTD;                  0390
*                      /* WAS THERE I/O ERROR                         *
*                      IF RETCDREG > 4                             0391
*                        THEN         /* IF SO                        *
         CH    RETCDREG,@CH00373                                   0391
         BNH   @RF00391                                            0391
*                          RETSAVE=RETCDREG;/* SET RETURN CODE        *
         LR    RETSAVE,RETCDREG                                    0392
*                        ELSE         /* ELSE FIND RC                 *
*                                                                  0393
*                          /* WAS DATA SET EMPTY                      *
*                          IF RETCDREG = 4                         0393
*                            THEN     /* IF SO                        *
         B     @RC00391                                            0393
@RF00391 CH    RETCDREG,@CH00373                                   0393
         BNE   @RF00393                                            0393
*                              CALL EMPTYRTN;/* DO EMPTY DS PROCCESS  *
         BAL   @14,EMPTYRTN                                        0394
*                            ELSE  /* CONT PROCESSING                 *
*                              DO;                                 0395
         B     @RC00393                                            0395
@RF00393 DS    0H                                                  0396
*                                CASADISP= '1'B; /* INDICATE OLD UNALC*
         OI    CASADISP(COMMREG),B'00010000'                       0396
*                                CALL DA;/* GO TO MARK DSE            *
*                                                                  0397
         BAL   @14,DA                                              0397
*                                /* WAS DA SUCCESSFUL                 *
*                                IF RETSAVE = 0                    0398
*                                  THEN/* IF SO                       *
         LTR   RETSAVE,RETSAVE                                     0398
         BNZ   @RF00398                                            0398
*                                    DO;                           0399
*                                      COMPTR= COMMREG;/* PT TO COM   *
         ST    COMMREG,COMPTR                                      0400
*                                      /* PUT PTR TO PARMLST IN REG1  *
*                                      PARMREG1= ADDR(CIPLST);     0401
         LA    PARMREG1,CIPLST                                     0401
*         GEN REFS(COMMREG,PARMREG1);            /* GO TO CI          *
*                                                                  0402
         IKJEBESH   (COMMREG),IKJEBECI,PARAM=((PARMREG1)),MF=(E,AREAM)
*                                      /* WAS CI SUCCESSFUL           *
*                                      IF RETCDREG ^= 0            0403
*                                        THEN/* IF NOT                *
         LTR   RETCDREG,RETCDREG                                   0403
         BZ    @RF00403                                            0403
*                                          RETSAVE = 8;    /*RC=8     *
         LA    RETSAVE,8                                           0404
*                                      OBJBIT='1'B; /*OBJ ON          *
@RF00403 OI    OBJBIT,B'10000000'                                  0405
*                                    END;/* END CI LOGIC              *
*                              END;   /* END FC LOGIC                 *
@RF00398 DS    0H                                                  0408
*                    END;             /* END ALLOC-SUCCESSFUL ROUTINE *
@RC00393 DS    0H                                                  0408
@RC00391 DS    0H                                                  0409
*              END;                   /* END DSRTN LOGIC              *
@RF00377 DS    0H                                                  0410
*                            RESPECIFY (RETCDREG) UNRSTD;          0410
@RF00372 DS    0H                                                  0411
*          /* FREEMAIN COMMAND BUFFER IF NECESSARY              YO1156*
*          IF COMBFPTR ^= ADDR(CABFRPL) + 201 /*              @YM07202*
*            THEN                     /* IF BFR IS NOT IN COMM  YO1156
*                                        AREA FOR EDIT COMMAND  YO1156*
         L     @06,COMBFPTR                                        0411
         LA    @15,CABFRPL(,COMMREG)                               0411
         AH    @15,@CH01215                                        0411
         CR    @06,@15                                             0411
         BE    @RF00411                                            0411
*              DO;                    /* FREE COMMAND BUFFER    YO1156*
*                GETPTR= COMBFPTR;    /* ADDRESS OF BUFFER      YO1156*
         ST    @06,GETPTR                                          0413
*                BUFREELN= LLFLD;     /* LENGTH OF BUFFER       YO1156*
         LH    @06,LLFLD(,@06)                                     0414
         ST    @06,BUFREELN                                        0414
*                GENERATE;            /*                        YO1156*
         FREEMAIN V,A=GETPTR,SP=1,MF=(E,FREEXX)              YO1156
*              END;                   /* END CMD BFR FREEMAIN   YO1156*
*           RETREG=DSRTNSAV;          /* RESTORE R14                  *
@RF00411 LR    RETREG,DSRTNSAV                                     0417
*           RETURN;                   /* RETURN TO CALLER             *
@EL00006 DS    0H                                                  0418
@EF00006 DS    0H                                                  0418
@ER00006 BR    @14                                                 0418
*          END DSRTN;                                              0419
*DA:       /***********************************************************
*          /* THIS SUB-STRUCTURE IS THE IKJEBEDA CALLING ROUTINE. IT  *
*          /* CAN BE ENTERED FROM DSRTN FOR ALLOCATION OR DSE ENTRY   *
*          /* NOT-INUSE MARKING, OR CAN BE ENTERED FROM THE MAIN STR- *
*          /* UCTURE TO UNALLOCATE.                                   *
*          /***********************************************************
*          PROC OPTIONS(NOSAVEAREA,NOSAVE);/* IKJEBEDA SUBROUTINE     *
DA       DS    0H                                                  0421
*          /* RESTRICT NEEDED REGISTERS                               *
*          DASAV=RETREG;              /* SAVE R14                     *
         LR    DASAV,RETREG                                        0421
*          RESPECIFY(PARMREG1,DATAREG,COMMREG,BASEREG,BASEREG2) RSTD;
*          GENERATE REFS(COMMREG);    /* ENTRY CODE,IKJEBEDA MACRO    *
*                                                                  0423
         IKJEBESH  (COMMREG),IKJEBEDA,PARAM=((COMMREG)),MF=(E,AREAM)
*          /* CHECK RETURN CODE FROM IKJEBEDA                         *
*          IF RETCDREG > RETSAVE                                   0424
*            THEN                     /* IF  ERROR HAS OCCUR SET RC   *
         CR    RETCDREG,RETSAVE                                    0424
         BNH   @RF00424                                            0424
*              RETSAVE= 8;            /* SET RC=8                     *
         LA    RETSAVE,8                                           0425
*             RETREG=DASAV;           /* RESTORE R14                  *
@RF00424 LR    RETREG,DASAV                                        0426
*             RETURN;                 /* RETURN TO CALLER             *
@EL00007 DS    0H                                                  0427
@EF00007 DS    0H                                                  0427
@ER00007 BR    @14                                                 0427
*          END DA;                                                 0428
*BUFBUILD: /***********************************************************
*          /* THIS SUB-STRUCTURE BUILDS THE COMMON COMMAND BUFFER OP- *
*          /* ERANDS. IT CAN BE ENTERED ONLY FROM THE MAIN STRUCTURE. *
*          /***********************************************************
*          PROC OPTIONS(NOSAVEAREA,NOSAVE);/* BUFFER BUILD ROUTINE    *
BUFBUILD DS    0H                                                  0430
*          /* RESTRICT NEEDED REGISTERS                               *
*          RESPECIFY(PARMREG1,DATAREG,COMMREG,BASEREG,BASEREG2) RSTD;
*                                                                  0430
*          BUFSAV=RETREG;             /* SAVE R14                     *
         ST    RETREG,BUFSAV                                       0431
*          /* SHOULD ROUTINE BE EXECUTED                              *
*          IF CAOPERND= '0'B          /*                        YO1156*
*            THEN                     /* IF NO OPERANDS, USE    YO1156*
         TM    CAOPERND(COMMREG),B'10000000'                       0432
         BNZ   @RF00432                                            0432
*              DO;                    /* FXD BFR ADDRESSABILITY YO1156*
*                COMBFPTR= ADDR(CABFRPL) + 201;/* POINT TO BFR  YO2676*
         LA    @12,CABFRPL(,COMMREG)                               0434
         AH    @12,@CH01215                                        0434
         ST    @12,COMBFPTR                                        0434
*                CMDBUF(1:255)= '';            /* BLANK OUT     YO1156*
         MVI   CMDBUF(@12),C' '                                    0435
         MVC   CMDBUF+1(254,@12),CMDBUF(@12)                       0435
*                CMDBUF(256:324)= '';          /* BUFFER        YO1156*
         MVI   CMDBUF+255(@12),C' '                                0436
         MVC   CMDBUF+256(68,@12),CMDBUF+255(@12)                  0436
*                LLFLD= 324;          /* SET FXD LENGTH FOR BFR YO1156*
         MVC   LLFLD(2,@12),@CH01321                               0437
*                F00= 0;              /* INIT 00 CONTROL FIELD  YO1156*
         SLR   @06,@06                                             0438
         STH   @06,F00(,@12)                                       0438
*              END;                   /* END- NO OPERANDS LOGIC YO1156*
*            ELSE                     /* CALL PARSE RTN         YO1156*
*              DO;                                                 0440
         B     @RC00432                                            0440
@RF00432 DS    0H                                                  0441
*                PPLPTR= ADDR(CATMPLST);/* PT TO TMP LST FOR PARSE    *
         LA    @12,CATMPLST(,COMMREG)                              0441
         ST    @12,PPLPTR                                          0441
*                PPLPCL= ADDR(IKJEBRU0);/* PT TO PDE DSECT            *
         L     @06,@CV00450                                        0442
         ST    @06,PPLPCL(,@12)                                    0442
*                PPLANS= ADDR(CAPTPRSD);/* PT TO ANSWER PLACE         *
         LA    @06,CAPTPRSD(,COMMREG)                              0443
         ST    @06,PPLANS(,@12)                                    0443
*                PPLCBUF= CAPTIBFR;   /* PT TO COMMAND BUFFER         *
         MVC   PPLCBUF(4,@12),CAPTIBFR(COMMREG)                    0444
*                PPLUWA= 0;           /* NO USER PARMS                *
         SLR   @06,@06                                             0445
         ST    @06,PPLUWA(,@12)                                    0445
*                PARMREG1= PPLPTR;    /* PUT PARM LST IN REG1         *
         LR    PARMREG1,@12                                        0446
*                  DO; /*CALLTSSR EP(IKJPARS)*/                    0447
*                    RESPECIFY GPR01P RSTD;                        0448
*                    IF CVTPARS = 0                                0449
*                      THEN                                        0449
         L     @12,CVTPTR                                          0449
         C     @06,CVTPARS(,@12)                                   0449
         BNE   @RF00449                                            0449
*                        GEN(LINK EP=IKJPARS);                     0450
         LINK EP=IKJPARS
*                      ELSE                                        0451
*                        CALL CVTPARS;                             0451
         B     @RC00449                                            0451
@RF00449 L     @12,CVTPTR                                          0451
         L     @15,CVTPARS(,@12)                                   0451
         BALR  @14,@15                                             0451
*                    RESPECIFY GPR01P UNRSTD;                      0452
@RC00449 DS    0H                                                  0453
*                  END; /* INVOKE PARSE              */            0453
*                RESPECIFY (RETCDREG) RSTD;                        0454
*                /* WAS BAD RC SENT BY PARSE                          *
*                IF RETCDREG ^= 0                                  0455
*                  THEN               /* IF SO ANNALYZE               *
*                                                                  0455
         LTR   RETCDREG,RETCDREG                                   0455
         BZ    @RF00455                                            0455
*                    /* WAS ATTENTION ISSUED                          *
*                    IF RETCDREG = 8                               0456
*                      THEN           /* IF SO SET RC                 *
         CH    RETCDREG,@CH00058                                   0456
         BNE   @RF00456                                            0456
*                        RETSAVE = -1;    /* SET RC NEGATIVE          *
         SLR   RETSAVE,RETSAVE                                     0457
         BCTR  RETSAVE,0                                           0457
*                      ELSE           /* IF NOT ATTN,CONT CHECKS      *
*                        DO;                                       0458
*                                                                  0458
         B     @RC00456                                            0458
@RF00456 DS    0H                                                  0459
*                          /* WAS RC=16,NOT ENOUGH CORE               *
*                          IF RETCDREG = 16                        0459
*                            THEN     /* IF SO, DO                    *
         CH    RETCDREG,@CH00233                                   0459
         BNE   @RF00459                                            0459
*                              CALL NOCOR;/* GO TO BUILD MSG          *
         BAL   @14,NOCOR                                           0460
*                            ELSE     /* IF NOT, KEEP CHECKING        *
*                                                                  0461
*                              /* WAS RC=12,COM. SYS. ERROR           *
*                              IF RETCDREG = 12                    0461
*                                THEN/* IF SO,BUILD MSG               *
         B     @RC00459                                            0461
@RF00459 CH    RETCDREG,@CH00143                                   0461
         BNE   @RF00461                                            0461
*                                  DO;                             0462
*                                    MSGLEN = 9; /* PUT IN INS LENGTH *
         MVC   MSGLEN(2),@CH01237                                  0463
*                                    MSGTEXT= 'PARSE';/* INS=PARSE    *
         MVI   MSGTEXT+5,C' '                                      0464
         MVC   MSGTEXT+6(2),MSGTEXT+5                              0464
         MVC   MSGTEXT(5),@CC01323                                 0464
*                                    MSGLEN2 = 6; /* PUT IN INS2 LGTH *
         MVC   MSGLEN2(2),@CH01222                                 0465
*                                    MSGTEXT2= '12';/* INS2=12        *
         MVI   MSGTEXT2+2,C' '                                     0466
         MVC   MSGTEXT2+3(5),MSGTEXT2+2                            0466
         MVC   MSGTEXT2(2),@CC01324                                0466
*                                    CALL SYSERR;/* GO TO ISSUE MSG   *
         BAL   @14,SYSERR                                          0467
*                                  END;                            0468
*                                ELSE;/* NULL ELSE- FOR LAST THEN     *
@RF00461 DS    0H                                                  0470
*                          RETSAVE = 8;    /* RC=8 FOR ERR CONDITIONS *
@RC00459 LA    RETSAVE,8                                           0470
*                        END;         /* END OF ERROR LOGIC           *
*                  ELSE               /* IF PARSE RC WAS OK THEN DO:  *
*                    DO;              /*                        YO1156*
         B     @RC00455                                            0472
@RF00455 DS    0H                                                  0473
*                      /* CHECK IF LIB KEYWORD SPECIFIED        YO1156*
*                      IF LIBOP = 1   /*                        YO1156*
*                        THEN         /* IF SO, CALL SUBRTN     YO1156*
         L     @14,CAPTPRSD(,COMMREG)                              0473
         CLC   LIBOP(2,@14),@CH00060                               0473
         BNE   @RF00473                                            0473
*                          DO;        /* FOR MORE PROCESSING    YO1156*
*                            CALL LIBSFRTN; /*                  YO1156*
         BAL   @14,LIBSFRTN                                        0475
*                            IF RETSAVE ^= 0 /* NORMAL END TEST YO1156*
*                              THEN   /* IF NOT SUCCESSFUL,     YO1156*
         LTR   RETSAVE,RETSAVE                                     0476
         BNZ   @RT00476                                            0476
*                                GO TO BUFEXIT; /* TERMINATE    YO1156*
*                          END;       /* END SUBRTN CALL LOGIC  YO1156*
*                        ELSE         /* OTHERWISE, PERFORM     YO1156*
*                          DO;        /* THE FOLLOWING -        YO1156*
         B     @RC00473                                            0479
@RF00473 DS    0H                                                  0480
*                            COMBFPTR=ADDR(CABFRPL)+201;/* SET  YO1156
*                                        BUFFER ADDRESSABILITY  YO1156
*                                        FOR FIXED CMD BUFFER   YO1156*
         LA    @14,CABFRPL(,COMMREG)                               0480
         AH    @14,@CH01215                                        0480
         ST    @14,COMBFPTR                                        0480
*                            CMDBUF(1:255)= '';     /* BLANK    YO1156*
         MVI   CMDBUF(@14),C' '                                    0481
         MVC   CMDBUF+1(254,@14),CMDBUF(@14)                       0481
*                            CMDBUF(256:324)= '';        /* CMD BUFFER
*                                                               Y01156*
         MVI   CMDBUF+255(@14),C' '                                0482
         MVC   CMDBUF+256(68,@14),CMDBUF+255(@14)                  0482
*                            LLFLD= 324;      /* SET LL FIELD   YO1156*
         MVC   LLFLD(2,@14),@CH01321                               0483
*                            F00= 0;    /* SET 00 FIELD IN BFR  YO1156*
         SLR   @12,@12                                             0484
         STH   @12,F00(,@14)                                       0484
*                          END;       /* END FIXED BFR LOGIC    YO1156*
*                          RESPECIFY (RETCDREG) UNRSTD;            0486
@RC00473 DS    0H                                                  0487
*                      /* WAS A PARM STRING SPECIFIED                 *
*                      IF PARMFLG = '1'B                           0487
*                        THEN         /* IF SO, SCAN PARM STRING      *
         L     @12,CAPTPRSD(,COMMREG)                              0487
         TM    PARMFLG(@12),B'10000000'                            0487
         BNO   @RF00487                                            0487
*                          DO;                                     0488
*                            COMQTE='''';/* INSERT 1ST QTE IN COM BUF *
         L     @12,COMBFPTR                                        0489
         MVI   COMQTE(@12),C''''                                   0489
*                            J=1;     /* INIT INDEX INTO COM BUFFER   *
         LA    @12,1                                               0490
         LR    J,@12                                               0490
*                            /* LOOP THROUGH THE PARM STRING          *
*                            DO I= 1 TO PARMLTH;                   0491
*                                                                  0491
         LR    I,@12                                               0491
         B     @DE00491                                            0491
@DL00491 DS    0H                                                  0492
*                              /* IS CHAR EQUAL TO QTE                *
*                              IF STRING(I)= ''''                  0492
*                                THEN /* IF SO, PLACE 2 QTES IN BUFFER*
         L     @12,CAPTPRSD(,COMMREG)                              0492
         L     @12,PARMADR(,@12)                                   0492
         ALR   @12,I                                               0492
         BCTR  @12,0                                               0492
         CLI   STRING(@12),C''''                                   0492
         BNE   @RF00492                                            0492
*                                  DO;                             0493
*                                    /* PLACE 2 QTES IN BUFFER        *
*                                    COMPARM(J:J+1)= '''''';       0494
         L     @12,COMBFPTR                                        0494
         ALR   @12,J                                               0494
         MVC   COMPARM-1(2,@12),@CC01327                           0494
*                                    J= J+2;  /* INCREMENT J BY 2     *
         AH    J,@CH00080                                          0495
*                                  END;                            0496
*                                ELSE /* IF NOT QTE,MOVE CHAR INTO BUF*
*                                  DO;                             0497
         B     @RC00492                                            0497
@RF00492 DS    0H                                                  0498
*                                    /* MOVE CHAR FROM STRING INTO BUF*
*                                    COMPARM(J)=STRING(I);         0498
         L     @12,COMBFPTR                                        0498
         ALR   @12,J                                               0498
         L     @06,CAPTPRSD(,COMMREG)                              0498
         L     @06,PARMADR(,@06)                                   0498
         ALR   @06,I                                               0498
         BCTR  @06,0                                               0498
         MVC   COMPARM-1(1,@12),STRING(@06)                        0498
*                                    J=J+1;  /* INCREMENT J BY 1      *
         AH    J,@CH00060                                          0499
*                                  END;                            0500
*                            END;     /* END DO-LOOP                  *
@RC00492 AH    I,@CH00060                                          0501
@DE00491 L     @12,CAPTPRSD(,COMMREG)                              0501
         CH    I,PARMLTH(,@12)                                     0501
         BNH   @DL00491                                            0501
*                            COMPARM(J)= '''';/* MOVE IN END QTE      *
         L     @12,COMBFPTR                                        0502
         ALR   @12,J                                               0502
         MVI   COMPARM-1(@12),C''''                                0502
*                          END;                                    0503
*                                                                  0503
*                      /* WAS TEST OPTION SPECIFIED                   *
*                      IF TESTOP = 1                               0504
*                        THEN         /* IF SO,MOVE IN TEST           *
@RF00487 L     @12,CAPTPRSD(,COMMREG)                              0504
         CLC   TESTOP(2,@12),@CH00060                              0504
         BNE   @RF00504                                            0504
*                          COMTEST= 'TEST';/* MOVE IN 'TEST'          *
         L     @12,COMBFPTR                                        0505
         MVI   COMTEST+4(@12),C' '                                 0505
         MVI   COMTEST+5(@12),C' '                                 0505
         MVC   COMTEST(4,@12),@CC01328                             0505
*                        ELSE         /* IF NOT,THEN                  *
*                                                                  0506
*                          /* WAS NOTEST SPECIFIED                    *
*                          IF TESTOP = 2                           0506
*                            THEN     /* IF SO,MOVE IN NOTEST         *
         B     @RC00504                                            0506
@RF00504 L     @12,CAPTPRSD(,COMMREG)                              0506
         CLC   TESTOP(2,@12),@CH00080                              0506
         BNE   @RF00506                                            0506
*                              COMTEST= 'NOTEST';/* MOVE IN 'NOTEST'  *
*                                                                  0507
         L     @12,COMBFPTR                                        0507
         MVC   COMTEST(6,@12),@CC01329                             0507
*                      /* WAS LMSG OPTION SPECIFIED                   *
*                      IF DMSGOP = 1                               0508
*                        THEN         /* IF SO MOVE IN LMSG           *
@RF00506 DS    0H                                                  0508
@RC00504 L     @12,CAPTPRSD(,COMMREG)                              0508
         CLC   DMSGOP(2,@12),@CH00060                              0508
         BNE   @RF00508                                            0508
*                          COMDMSG = 'LMSG';/* MOVE IN 'LMSG'         *
         L     @12,COMBFPTR                                        0509
         MVC   COMDMSG(4,@12),@CC01330                             0509
*                        ELSE         /* IF NOT,THEN                  *
*                                                                  0510
*                          /* WAS SMSG SPECIFIED                      *
*                          IF DMSGOP = 2                           0510
*                            THEN     /* IF SO, MOVE IN SMSG          *
         B     @RC00508                                            0510
@RF00508 L     @12,CAPTPRSD(,COMMREG)                              0510
         CLC   DMSGOP(2,@12),@CH00080                              0510
         BNE   @RF00510                                            0510
*                              COMDMSG= 'SMSG';/* MOVE IN 'SMSG'      *
*                                                                  0511
         L     @12,COMBFPTR                                        0511
         MVC   COMDMSG(4,@12),@CC01331                             0511
*                      /* WAS LPREC SPECIFIED                         *
*                      IF PRECOP = 1                               0512
*                        THEN         /* IF SO,MOVE IN LPREC          *
@RF00510 DS    0H                                                  0512
@RC00508 L     @12,CAPTPRSD(,COMMREG)                              0512
         CLC   PRECOP(2,@12),@CH00060                              0512
         BNE   @RF00512                                            0512
*                          COMPREC= 'LPREC';/* MOVE IN 'LPREC'        *
         L     @12,COMBFPTR                                        0513
         MVC   COMPREC(5,@12),@CC01332                             0513
*                        ELSE         /* IF NOT,THEN                  *
*                                                                  0514
*                          /* WAS SPREC SPECIFIED                     *
*                          IF PRECOP = 2                           0514
*                            THEN     /* IF SO,MOVE IN SPREC          *
         B     @RC00512                                            0514
@RF00512 L     @12,CAPTPRSD(,COMMREG)                              0514
         CLC   PRECOP(2,@12),@CH00080                              0514
         BNE   @RF00514                                            0514
*                              COMPREC= 'SPREC';/* MOVE IN 'SPREC'    *
*                                                                  0515
         L     @12,COMBFPTR                                        0515
         MVC   COMPREC(5,@12),@CC01333                             0515
*                      /* WAS CHECK SPECIFIED                         *
*                      IF CHKOP = 1                                0516
*                        THEN         /* IF SO, NO OBJ TO BE    A50465*
@RF00514 DS    0H                                                  0516
@RC00512 L     @12,CAPTPRSD(,COMMREG)                              0516
         CLC   CHKOP(2,@12),@CH00060                               0516
         BNE   @RF00516                                            0516
*                                     /* GENERATED              A50465*
*                          RUOBJGEN= '0'B;                   /* A50465*
         NI    RUOBJGEN,B'11110111'                                0517
*                        ELSE         /* IF NOT,THEN                  *
*                                                                  0518
*                          /* WAS OPT SPECIFIED                       *
*                          IF CHKOP = 2                            0518
*                            THEN     /* IF SO, MOVE IN OPT           *
         B     @RC00516                                            0518
@RF00516 L     @12,CAPTPRSD(,COMMREG)                              0518
         CLC   CHKOP(2,@12),@CH00080                               0518
         BNE   @RF00518                                            0518
*                              COMCHK= 'OPT';/* MOVE IN 'OPT'         *
         L     @12,COMBFPTR                                        0519
         MVI   COMCHK+3(@12),C' '                                  0519
         MVI   COMCHK+4(@12),C' '                                  0519
         MVC   COMCHK(3,@12),@CC01334                              0519
*                      /* WAS GO SPECIFIED                      Y02676*
*                      IF GOOP = 1             /* IF KEYWD = 1  Y02676*
*                        THEN                  /* THEN          Y02676*
@RF00518 DS    0H                                                  0520
@RC00516 L     @12,CAPTPRSD(,COMMREG)                              0520
         CLC   GOOP(2,@12),@CH00060                                0520
         BNE   @RF00520                                            0520
*                          COMGO = 'GO';       /* PUT GO IN BUF Y02676*
         L     @12,COMBFPTR                                        0521
         MVI   COMGO+2(@12),C' '                                   0521
         MVI   COMGO+3(@12),C' '                                   0521
         MVC   COMGO(2,@12),@CC01335                               0521
*                        ELSE                  /* ELSE          Y02676*
*                          /* WAS NOGO SPECIFIED                Y02676*
*                          IF GOOP = 2         /* IF KEYWD = 2  Y02676*
*                            THEN              /* THEN          Y02676*
         B     @RC00520                                            0522
@RF00520 L     @12,CAPTPRSD(,COMMREG)                              0522
         CLC   GOOP(2,@12),@CH00080                                0522
         BNE   @RF00522                                            0522
*                              COMGO = 'NOGO'; /* NOGO IN BUF   Y02676*
*                                                                  0523
         L     @12,COMBFPTR                                        0523
         MVC   COMGO(4,@12),@CC01336                               0523
*                      /* WAS STORE SPECIFIED                   Y02676*
*                      IF STOREOP = 1          /* IF KEYWD = 1  Y02676*
*                        THEN                  /* THEN          Y02676*
@RF00522 DS    0H                                                  0524
@RC00520 L     @12,CAPTPRSD(,COMMREG)                              0524
         CLC   STOREOP(2,@12),@CH00060                             0524
         BNE   @RF00524                                            0524
*                          COMSTORE = 'STORE'; /* STORE IN BUF  Y02676*
         L     @12,COMBFPTR                                        0525
         MVI   COMSTORE+5(@12),C' '                                0525
         MVI   COMSTORE+6(@12),C' '                                0525
         MVC   COMSTORE(5,@12),@CC01337                            0525
*                        ELSE                  /* ELSE          Y02676*
*                          /* WAS NOSTORE SPECIFIED             Y02676*
*                          IF STOREOP = 2      /* IF KEYWD = 2  Y02676*
*                            THEN              /* NOSTORE IN BUFY02676*
         B     @RC00524                                            0526
@RF00524 L     @12,CAPTPRSD(,COMMREG)                              0526
         CLC   STOREOP(2,@12),@CH00080                             0526
         BNE   @RF00526                                            0526
*                              COMSTORE = 'NOSTORE';   /*       Y02676*
*                                                                  0527
         L     @12,COMBFPTR                                        0527
         MVC   COMSTORE(7,@12),@CC01338                            0527
*                      /* WAS PAUSE SPECIFIED                   Y02676*
*                      IF PAUSEOP = 1          /* IF KEYWD = 1  Y02676*
*                        THEN                  /* THEN          Y02676*
@RF00526 DS    0H                                                  0528
@RC00524 L     @12,CAPTPRSD(,COMMREG)                              0528
         CLC   PAUSEOP(2,@12),@CH00060                             0528
         BNE   @RF00528                                            0528
*                          COMPAUSE = 'PAUSE'; /* PAUSE IN BUF  Y02676*
         L     @12,COMBFPTR                                        0529
         MVI   COMPAUSE+5(@12),C' '                                0529
         MVI   COMPAUSE+6(@12),C' '                                0529
         MVC   COMPAUSE(5,@12),@CC01339                            0529
*                        ELSE                  /* ELSE          Y02676*
*                          /* WAS NOPAUSE SPECIFIED             Y02676*
*                          IF PAUSEOP = 2      /* IF KEYWD = 2  Y02676*
*                            THEN              /* NOPAUSE IN BUFY02676*
         B     @RC00528                                            0530
@RF00528 L     @12,CAPTPRSD(,COMMREG)                              0530
         CLC   PAUSEOP(2,@12),@CH00080                             0530
         BNE   @RF00530                                            0530
*                              COMPAUSE = 'NOPAUSE';   /*       Y02676*
*                                                                  0531
         L     @12,COMBFPTR                                        0531
         MVC   COMPAUSE(7,@12),@CC01340                            0531
*                      /* WAS SIZE SPECIFIED                    Y02676*
*                      IF SIZEOP = 1           /* IF KEYWD = 1  Y02676*
*                        THEN                  /* THEN          Y02676*
@RF00530 DS    0H                                                  0532
@RC00528 L     @12,CAPTPRSD(,COMMREG)                              0532
         CLC   SIZEOP(2,@12),@CH00060                              0532
         BNE   @RF00532                                            0532
*                          DO;                 /* MOVE SIZE     Y02676*
*                            COMSIZE(1:5) = 'SIZE(';  /* AND    Y02676*
         L     @06,COMBFPTR                                        0534
         MVC   COMSIZE(5,@06),@CC01341                             0534
*                            COMSIZE(6:5+SIZELEN) = SIZENUM(1:SIZELEN);
         LH    @15,SIZELEN(,@12)                                   0535
         BCTR  @15,0                                               0535
         L     @12,SIZEPTR(,@12)                                   0535
         EX    @15,@SM01434                                        0535
*                                                    /* VALUE   Y02676*
*                            COMSIZE(9) = ')';       /* TO BUF  Y02676*
         MVI   COMSIZE+8(@06),C')'                                 0536
*                          END;                /*               Y02676*
*BUFEXIT:              PARMREG1=ADDR(CAPTPRSD); /*              YO1156*
@RF00532 DS    0H                                                  0538
BUFEXIT  LA    PARMREG1,CAPTPRSD(,COMMREG)                         0538
*                      GENERATE REFS(PARMREG1); /* RELEASE PDL CORE   *
         IKJRLSA (PARMREG1)
*                      CAFREEDL= '1'B; /* INDICATE PDL WAS FREED      *
         OI    CAFREEDL(COMMREG),B'10000000'                       0540
*                    END;             /* END PARSE OK LOGIC           *
*              END;                   /* END BUFFER BUILD LOGIC       *
@RC00455 DS    0H                                                  0543
*             RETREG=BUFSAV;          /* RESTORE R14                  *
@RC00432 L     RETREG,BUFSAV                                       0543
*             RETURN;                 /* RETURN TO CALLER             *
@EL00008 DS    0H                                                  0544
@EF00008 DS    0H                                                  0544
@ER00008 BR    @14                                                 0544
*          END BUFBUILD;                                           0545
*NOCOR:    /***********************************************************
*          /* THIS SUB-STRUCTURE SETS UP THE 'NOT ENOUGH CORE' MESSAGE*
*          /* IT CAN BE ENTERED FROM BUFBUILD, OR ITFRTN SUB-STRUCT-  *
*          /* URES.                                                   *
*          /***********************************************************
*          PROC OPTIONS(NOSAVEAREA,NOSAVE);/* NOCORE MSG ROUTINE      *
NOCOR    DS    0H                                                  0547
*          /* RESTRICT NEEDED REGISTERS                               *
*          RESPECIFY(PARMREG1,COMMREG,DATAREG,BASEREG,BASEREG2) RSTD;
*          NOCORSAV=RETREG;           /* SAVE R14                     *
         LR    NOCORSAV,RETREG                                     0548
*          RELMSG1= 270;              /* FIRST LEVEL MSG              *
         MVC   RELMSG1(2),@CH01347                                 0549
*          RELMSG2= 0;                /* NO SECOND LEVEL MSG          *
         SLR   @12,@12                                             0550
         STH   @12,RELMSG2                                         0550
*          MSGPTR= 0;                 /* NO SECOND INSERTION FOR FIRST
*                                        LEVEL                        *
         ST    @12,MSGPTR                                          0551
*          MSGLEN= 7;                 /* PUT IN INSERTION LENGTH      *
         MVC   MSGLEN(2),@CH00124                                  0552
*          MSGTEXT= 'RUN';            /* PUT IN TEXT                  *
         MVI   MSGTEXT+3,C' '                                      0553
         MVC   MSGTEXT+4(4),MSGTEXT+3                              0553
         MVC   MSGTEXT(3),@CC01259                                 0553
*          MSGOFF= 45;                /* PUT IN INSERTION OFFSET      *
         MVC   MSGOFF(2),@CH01348                                  0554
*          LEV1INS= ADDR(MSGAREA);    /* PT TO INSERTION              *
         LA    @04,MSGAREA                                         0555
         ST    @04,LEV1INS                                         0555
*          LEV2INS= 0;                /* NO SECOND LEVEL INSERTION    *
         ST    @12,LEV2INS                                         0556
*          GENERATE REFS(LEV1INS,LEV2INS) ; /* ISSUE MSG  */       0557
          IKJEBEML ,,,,MF=(E,AREAM)
*           RETREG=NOCORSAV;               /* RESTORE R14             *
         LR    RETREG,NOCORSAV                                     0558
*           RETURN;                        /* RETURN TO CALLER        *
@EL00009 DS    0H                                                  0559
@EF00009 DS    0H                                                  0559
@ER00009 BR    @14                                                 0559
*          END NOCOR;                                              0560
*SYSERR:   /***********************************************************
*          /* THIS SUB-STRUCTURE SETS UP THE 'COMMAND SYSTEM ERROR'   *
*          /* MESSAGE. IT CAN BE ENTERED FROM BUFBUILD,SYKER,OR IN-   *
*          /* CORRTN SUB-STRUCTURES.                                  *
*          /***********************************************************
*          PROC OPTIONS(NOSAVEAREA,NOSAVE);/* SYS ERROR ROUTINE       *
SYSERR   DS    0H                                                  0562
*          /* RESTRICT NEEDED REGISTERS                               *
*          RESPECIFY(PARMREG1,DATAREG,COMMREG,BASEREG,BASEREG2) RSTD;
*          SYSSAV=RETREG;             /* SAVE R14                     *
         LR    SYSSAV,RETREG                                       0563
*          RELMSG1= 271;              /* FIRST LEVEL MSG              *
         MVC   RELMSG1(2),@CH01352                                 0564
*          RELMSG2= 1;                /* SECOND LEVEL MSG             *
         MVC   RELMSG2(2),@CH00060                                 0565
*          LEV1INS= 0;                /* NO 1ST LEVEL INSERTION       *
         SLR   @06,@06                                             0566
         ST    @06,LEV1INS                                         0566
*          MSGPTR=ADDR(MSGPTR2);      /* PT TO SECOND INS FOR SECOND
*                                        LEVEL INSERTION              *
         LA    @04,MSGPTR2                                         0567
         ST    @04,MSGPTR                                          0567
*          MSGPTR2= 0;                /* NO FURTHER INSERTION         *
         ST    @06,MSGPTR2                                         0568
*          MSGOFF= 10;                /* SET MSG OFFSET               *
         MVC   MSGOFF(2),@CH00393                                  0569
*          MSGOFF2= 22;               /* SET SECOND INSERTION OFFSET  *
         MVC   MSGOFF2(2),@CH01353                                 0570
*          LEV2INS= ADDR(MSGAREA);    /* PT TO SECOND LEVEL INSERTION *
         LA    @06,MSGAREA                                         0571
         ST    @06,LEV2INS                                         0571
*          GENERATE REFS(LEV1INS,LEV2INS); /* ISSUE MSG */         0572
          IKJEBEML ,,,,MF=(E,AREAM)
*          RETREG=SYSSAV;              /* RESTORE R14                 *
         LR    RETREG,SYSSAV                                       0573
*          RETURN;                     /* RETURN TO CALLER            *
@EL00010 DS    0H                                                  0574
@EF00010 DS    0H                                                  0574
@ER00010 BR    @14                                                 0574
*          END SYSERR;                                             0575
*ITFRTN:   /***********************************************************
*          /* THIS SUB-STRUCTURE PROCESSES ITF DATA SET TYPES. IT CAN *
*          /* ONLY BE ENTERED FROM THE MAIN STRUCTURE.                *
*          /***********************************************************
*          PROC OPTIONS(NOSAVEAREA,NOSAVE);/* ITF SUBROUTINE          *
ITFRTN   DS    0H                                                  0577
*          /* RESTRICT NEEDED REGISTERS                               *
*          RESPECIFY(PARMREG1,DATAREG,COMMREG,BASEREG,BASEREG2) RSTD;
*                                                                  0577
*          ITFSAV=RETREG;             /* SAVE R14                     *
         ST    RETREG,ITFSAV                                       0578
*          /* IS SYNTAX CHECKER PRESENT                               *
*          IF CAPTCHK = 0                                          0579
*            THEN                     /* IF NOT PRESENT               *
         ICM   @12,15,CAPTCHK(COMMREG)                             0579
         BNZ   @RF00579                                            0579
*              CALL NOSYNCK;          /* ISSUE MSG                    *
         BAL   @14,NOSYNCK                                         0580
*            ELSE                     /* IF PRESENT PROCEED           *
*              DO;                                                 0581
         B     @RC00579                                            0581
@RF00579 DS    0H                                                  0582
*                CASYNBFR= ADDR(SYCKLST);/* PT TO PARM LST            *
         LA    @12,SYCKLST                                         0582
         ST    @12,CASYNBFR(,COMMREG)                              0582
*                SYNBYTE1(1:4)= '1000'B; /* ENTRY BITS FOR CHECKER    *
         NI    SYNBYTE1(COMMREG),B'10001111'                       0583
         OI    SYNBYTE1(COMMREG),B'10000000'                       0583
*                SYCKIBFR= CAPTIBFR;  /* PT TO INPUT BUFFER           *
         MVC   SYCKIBFR(4),CAPTIBFR(COMMREG)                       0584
*                SYCKTTMP= CAPTTMP;   /* PT TO TMP LIST               *
         MVC   SYCKTTMP(4),CAPTTMP(COMMREG)                        0585
*                SYNBYTE2(1:5)= '00001'B;/* MORE OPTION BITS          *
         NI    SYNBYTE2(COMMREG),B'00001111'                       0586
         OI    SYNBYTE2(COMMREG),B'00001000'                       0586
*                PARMREG1= ADDR(CASYNLST);/* PUT PARM LIST IN REG1    *
         LA    PARMREG1,CASYNLST(,COMMREG)                         0587
*                CALL CHECKER;        /* GO TO CHECKER                *
         L     @15,CAPTCHK(,COMMREG)                               0588
         BALR  @14,@15                                             0588
*                RESPECIFY (RETCDREG) RSTD;                        0589
*                SYNBYTE2(1:5)= '00000'B;/* RESET BITS                *
*                                                                  0590
         NI    SYNBYTE2(COMMREG),B'00000111'                       0590
*                /* WAS CHECKER SUCCESSFUL                            *
*                IF RETCDREG = 0                                   0591
*                  THEN               /* IF SO ,THEN                  *
         LTR   RETCDREG,RETCDREG                                   0591
         BNZ   @RF00591                                            0591
*                    DO;                                           0592
*                                                                  0592
*                      /* WAS ATTENTION ISSUED                        *
*                      IF CAATTNIS = '0'B                          0593
*                        THEN         /* IF SO,,THEN                  *
         TM    CAATTNIS(COMMREG),B'01000000'                       0593
         BNZ   @RF00593                                            0593
*                          CAMODMSG= '1'B; /* TURN ON MODMSG BIT      *
         OI    CAMODMSG(COMMREG),B'00010000'                       0594
*                    END;                                          0595
*                  ELSE               /* IF UNSUCCESSFUL,CHECK RC'S   *
*                    DO;                                           0596
*                                                                  0596
         B     @RC00591                                            0596
@RF00591 DS    0H                                                  0597
*                      /* WAS RC=20                                   *
*                      IF RETCDREG = 20                            0597
*                        THEN         /* IF SO,THEN                   *
         CH    RETCDREG,@CH00134                                   0597
         BNE   @RF00597                                            0597
*                          RETSAVE= 16;     /* SET RC=16              *
         LA    RETSAVE,16                                          0598
*                        ELSE         /* IF NOT,CONTINUE CHECKS       *
*                          DO;                                     0599
*                                                                  0599
         B     @RC00597                                            0599
@RF00597 DS    0H                                                  0600
*                            /* WAS RC NOT EQUAL TO 4                 *
*                            IF RETCDREG ^= 4                      0600
*                              THEN   /* IF SO WHICH RC               *
         CH    RETCDREG,@CH00373                                   0600
         BE    @RF00600                                            0600
*                                DO;                               0601
*                                                                  0601
*                                  /* WAS RC=16                       *
*                                  IF RETCDREG = 16                0602
*                                    THEN/* IF SO,ISSUE MSG           *
         CH    RETCDREG,@CH00233                                   0602
         BNE   @RF00602                                            0602
*                                      CALL NOCOR;/* ISSUE MSG        *
         BAL   @14,NOCOR                                           0603
*                                    ELSE/* IF NOT RC=12 OR 8         *
*                                      DO;                         0604
         B     @RC00602                                            0604
@RF00602 DS    0H                                                  0605
*                                        /* SAVE RETURN CODE          *
*                                        MSGLEN2= RETCDREG;        0605
         STH   RETCDREG,MSGLEN2                                    0605
*                                        CALL SYKER;/* CALL MSG RTN   *
         BAL   @14,SYKER                                           0606
*                                      END;                        0607
*                                END;                              0608
@RC00602 DS    0H                                                  0609
*                            RETSAVE= 8;    /*SET RC=8                *
@RF00600 LA    RETSAVE,8                                           0609
*                          END;       /* END ERROR ANALYSIS           *
*                    END;                                          0611
@RC00597 DS    0H                                                  0612
*              END;                   /* END SYNTAX CHECKER OK LOGIC  *
@RC00591 DS    0H                                                  0613
*             RESPECIFY (RETCDREG) UNRSTD;                         0613
@RC00579 DS    0H                                                  0614
*          RETREG=ITFSAV;             /* RESTORE R14                  *
         L     RETREG,ITFSAV                                       0614
*          RETURN;                    /* RETURN TO CALLER             *
@EL00011 DS    0H                                                  0615
@EF00011 DS    0H                                                  0615
@ER00011 BR    @14                                                 0615
*          END ITFRTN;                                             0616
*NOSYNCK:  /***********************************************************
*          /* THIS SUB-STRUCTURE SETS UP THE 'NO SYNTAX CHECKER' MES- *
*          /* SAGE. IT CAN BE ENTERED ONLY FROM ITFRTN.               *
*          /***********************************************************
*          PROC OPTIONS(NOSAVEAREA,NOSAVE);/* NO SYNTAX CHECKER RTN   *
NOSYNCK  DS    0H                                                  0618
*          /* RESTRICT NEEDED REGISTERS                               *
*          RESPECIFY(PARMREG1,COMMREG,BASEREG,BASEREG2,DATAREG) RSTD;
*          NOSYNSAV=RETREG;           /* SAVE R14                     *
         LR    NOSYNSAV,RETREG                                     0619
*          RELMSG1= 1797;             /* FIRST LEVEL MSG              *
         MVC   RELMSG1(2),@CH01363                                 0620
*          RELMSG2= 1;                /* SECOND LEVEL MSG             *
         MVC   RELMSG2(2),@CH00060                                 0621
*          MSGLEN= 7;                 /* LENGTH OF FIRST INSERTION    *
         MVC   MSGLEN(2),@CH00124                                  0622
*          MSGTEXT= 'RUN';            /* TEXT OF FIRST INSERTION      *
         MVI   MSGTEXT+3,C' '                                      0623
         MVC   MSGTEXT+4(4),MSGTEXT+3                              0623
         MVC   MSGTEXT(3),@CC01259                                 0623
*          MSGOFF= 10;                /* OFFSET OF FIRST INSERTION    *
         MVC   MSGOFF(2),@CH00393                                  0624
*          LEV1INS= ADDR(MSGAREA);    /* FIRST LEVEL INSERTION PT     *
         LA    @12,MSGAREA                                         0625
         ST    @12,LEV1INS                                         0625
*          LEV2INS= 0;                /* NO SECOND LEVEL INSERTION    *
         SLR   @12,@12                                             0626
         ST    @12,LEV2INS                                         0626
*          MSGPTR= ADDR(MSGPTR2);     /* PTR TO SECOND INSERTION PT   *
         LA    @04,MSGPTR2                                         0627
         ST    @04,MSGPTR                                          0627
*          MSGPTR2= 0;                /* NO THIRD INSERTION PT        *
         ST    @12,MSGPTR2                                         0628
*          MSGOFF2= 29;               /* OFFSET OF SECOND INSERTION   *
*                                                                  0629
         MVC   MSGOFF2(2),@CH01364                                 0629
*          /* WAS DATA SET TYPE BASIC                                 *
*          IF CADSCODE = CABASIC                                   0630
*            THEN                     /* IF SO,THEN                   *
         CLI   CADSCODE(COMMREG),X'20'                             0630
         BNE   @RF00630                                            0630
*              DO;                                                 0631
*                MSGLEN2= 9;          /* LENGTH OF SECOND INSERTION   *
         MVC   MSGLEN2(2),@CH01237                                 0632
*                MSGTEXT2= 'BASIC';   /* TEXT OF SECOND INSERTION     *
         MVI   MSGTEXT2+5,C' '                                     0633
         MVC   MSGTEXT2+6(2),MSGTEXT2+5                            0633
         MVC   MSGTEXT2(5),@CC01365                                0633
*              END;                                                0634
*            ELSE                     /* IF NOT BASIC,MUST BE IPLI    *
*              DO;                                                 0635
         B     @RC00630                                            0635
@RF00630 DS    0H                                                  0636
*                MSGLEN2= 8;          /* LENGTH OF SECOND INSERTION   *
         MVC   MSGLEN2(2),@CH00058                                 0636
*                MSGTEXT2= 'IPLI';    /* TEXT OF SECOND INSERTION     *
         MVI   MSGTEXT2+4,C' '                                     0637
         MVC   MSGTEXT2+5(3),MSGTEXT2+4                            0637
         MVC   MSGTEXT2(4),@CC01366                                0637
*              END;                                                0638
*          GENERATE REFS(LEV1INS,LEV2INS);        /* GO TO ISSUE MSG  *
@RC00630 DS    0H                                                  0639
          IKJEBEML ,,,,MF=(E,AREAM)
*          RETSAVE= 8;                                             0640
         LA    RETSAVE,8                                           0640
*          RETREG=NOSYNSAV;              /* RESTORE R14               *
         LR    RETREG,NOSYNSAV                                     0641
*          RETURN;                       /* RETURN TO CALLER          *
@EL00012 DS    0H                                                  0642
@EF00012 DS    0H                                                  0642
@ER00012 BR    @14                                                 0642
*          END NOSYNCK;                                            0643
*SYKER:    /***********************************************************
*          /* THIS SUB-STRUCTURE SETS UP THE PARAMETERS FOR THE 'COM- *
*          /* MAND SYSTEM ERROR' MESSAGE FOR ITF. IT CAN BE ENTERED   *
*          /* ONLY FROM ITFRTN.                                       *
*          /***********************************************************
*          PROC OPTIONS(NOSAVEAREA,NOSAVE);  /* SYS ERR FOR SYNTAX 0644
*                                               CHECKER ROUTINE       *
SYKER    DS    0H                                                  0645
*          /* RESTRICT NEEDED REGISTERS                               *
*          RESPECIFY(PARMREG1,COMMREG,BASEREG,BASEREG2,DATAREG) RSTD;
*                                                                  0645
*          SYKSAV=RETREG;             /* SAVE R14                     *
         LR    SYKSAV,RETREG                                       0646
*          /* WAS SYNTAX RETURN CODE 12                               *
*          IF MSGLEN2 = 12                                         0647
*            THEN                     /* IF SO,THEN                   *
         CLC   MSGLEN2(2),@CH00143                                 0647
         BNE   @RF00647                                            0647
*              MSGTEXT2= '12';        /* TEXT OF SECOND INSERTION     *
         MVI   MSGTEXT2+2,C' '                                     0648
         MVC   MSGTEXT2+3(5),MSGTEXT2+2                            0648
         MVC   MSGTEXT2(2),@CC01324                                0648
*            ELSE                     /* IF NOT 12,MUST BE 8          *
*              MSGTEXT2= '08';        /* TEXT OF SECOND INSERTION     *
         B     @RC00647                                            0649
@RF00647 MVI   MSGTEXT2+2,C' '                                     0649
         MVC   MSGTEXT2+3(5),MSGTEXT2+2                            0649
         MVC   MSGTEXT2(2),@CC01370                                0649
*          MSGLEN2= 6;                /* LENGTH OF SECOND INSERTION   *
@RC00647 MVC   MSGLEN2(2),@CH01222                                 0650
*          /* LOOP THROUGH SYNTAX CHECKER NAME TO GET OUT BLANKS      *
*          DO I= 8 TO 1 BY -1;                                     0651
*                                                                  0651
         LA    I,8                                                 0651
@DL00651 DS    0H                                                  0652
*            /* WAS BLANK ENCOUNTERED                                 *
*            IF CASYNAME(I) ^= ' '                                 0652
*              THEN                   /* IF SO,THEN                   *
         LR    @04,COMMREG                                         0652
         ALR   @04,I                                               0652
         CLI   CASYNAME-1(@04),C' '                                0652
         BNE   @RT00652                                            0652
*                GO TO SYNFND;        /* GET OUT OF LOOP              *
*          END;                                                    0654
         BCTR  I,0                                                 0654
         LTR   I,I                                                 0654
         BP    @DL00651                                            0654
*SYNFND:   MSGLEN= I + 4;             /* LENGTH OF FIRST INSERTION    *
SYNFND   LA    @04,4(,I)                                           0655
         STH   @04,MSGLEN                                          0655
*          MSGTEXT(1:I)= CASYNAME;    /* LENGTH OF FIRST INSERTION    *
         LR    @04,I                                               0656
         BCTR  @04,0                                               0656
         EX    @04,@SM01439                                        0656
*          CALL SYSERR;               /* GO TO ROUTINE TO PUT OUT SYS
*                                        ERROR MSG                    *
         BAL   @14,SYSERR                                          0657
*          RETREG=SYKSAV;             /* RESTORE R14                  *
         LR    RETREG,SYKSAV                                       0658
*          RETURN;                    /* RETURN TO CALLER             *
@EL00013 DS    0H                                                  0659
@EF00013 DS    0H                                                  0659
@ER00013 BR    @14                                                 0659
*          END SYKER;                                              0660
*VALIDCHK: /***********************************************************
*          /* THIS SUB-STRUCTURE IS THE PARAMETER STRING LENGTH VALID-*
*          /* ITY CHECKER. IT IS ENTERED FROM IKJPARS, IF NECESSARY,  *
*          /* VIA THE SUB-STRUCTURE BUFBUILD.                         *
*          /***********************************************************
*          PROC OPTIONS(NOSAVEAREA);  /* PARM STRING VALIDITY CHECKING
*                                        ROUTINE                      *
VALIDCHK STM   @14,@12,12(@13)                                     0661
*          DCL PDE PTR BASED(PARMREG1);/* PTR TO PDE OF PARM STRING   *
*                                                                  0662
*          /* STRUCTURE OF PDE                                        *
*          DCL 1 * BASED(PDE),         /* STRUCTURE                   *
*                2 * PTR,              /* PTR TO PARM STRING          *
*                2 LENTH FIXED(15),    /* LENGTH OF PARM STRING       *
*                2 * CHAR(2);          /* FLAG BYTES                  *
*          RESPECIFY(BASREG,PARMREG1,RETCDREG,ENTRYPT)RSTD; /*     0664
*                                         RESTRICT REGISTERS NEEDED   *
*          BASREG= ENTRYPT;            /* SAVE ENTRY PT OF THIS RTN   *
         LR    BASREG,ENTRYPT                                      0665
*          GENERATE REFS(BASEREG);     /* GENERATE ADDRESSABILITY     *
*                                                                  0666
         USING VALIDCHK,BASREG
*          /* WAS PARM STRING ENTERED TOO LONG                        *
*          IF LENTH > 100                                          0667
*            THEN                     /* IF SO,THEN                   *
         L     @14,PDE(,PARMREG1)                                  0667
         LH    @14,LENTH(,@14)                                     0667
         CH    @14,@CH00273                                        0667
         BNH   @RF00667                                            0667
*              RETCDREG= 4;           /* SET RC=4 ,BAD STRING         *
         LA    RETCDREG,4                                          0668
*            ELSE                     /* IF NOT,CONTINUE              *
*              RETCDREG= 0;           /* SET GOOD RETURN CODE         *
         B     @RC00667                                            0669
@RF00667 SLR   RETCDREG,RETCDREG                                   0669
*          RESPECIFY (BASREG,ENTRYPT) UNRSTD; /* RELEASE REGISTER     *
@RC00667 DS    0H                                                  0671
*          GENERATE(DROP BASREG);     /* DROP ADDRESSABILITY    YO1156*
         DROP BASREG
*          RETURN CODE(RETCDREG);     /* RETURN TO CALLER WITH RC     *
         L     @14,12(,@13)                                        0672
         LM    @00,@12,20(@13)                                     0672
         BR    @14                                                 0672
*          RESPECIFY (RETCDREG) UNRSTD;                            0673
*          END VALIDCHK;                                           0674
*LIBSFRTN: /*************************************************** YO1156*
*          /* THIS SUB-STRUCTURE PERFORMS ALL PROCESSING        YO1156*
*          /* RELATED TO THE 'LIB' KEYWORD AND ITS SUBFIELD.    YO1156*
*          /* IT IS ENTERED ONLY FROM THE 'BUFBUILD' STRUCTURE. YO1156*
*          /*************************************************** YO1156*
*          PROC OPTIONS(NOSAVEAREA,NOSAVE);   /* LIB KEYWD RTN  YO1156*
LIBSFRTN DS    0H                                                  0676
*          RESPECIFY(PARMREG1,COMMREG,DATAREG,BASEREG,BASEREG2) RSTD;
*          LIBSAV=RETREG;              /* SAVE R14                    *
         ST    RETREG,LIBSAV                                       0677
*          /* CHECK APPLICABILITY OF KEYWORD                    YO1156*
*          IF CADSCODE=CAPLI & CHKOP=1 /*                       YO1156*
*            THEN                      /* FOR TYPE PLI AND      YO1156
*                                         CHECK KEYWORD         YO1156*
         CLI   CADSCODE(COMMREG),X'22'                             0678
         BNE   @RF00678                                            0678
         L     @12,CAPTPRSD(,COMMREG)                              0678
         CLC   CHKOP(2,@12),@CH00060                               0678
         BNE   @RF00678                                            0678
*              RUOBJGEN= '0'B;         /* INDICATE NO OBJ TO    YO1156
*                                         BE GENERATED          YO1156*
         NI    RUOBJGEN,B'11110111'                                0679
*          IF RUOBJGEN= '0'B           /*                       YO1156*
*            THEN                      /* IF NON-APPLICABLE     YO1156*
@RF00678 TM    RUOBJGEN,B'00001000'                                0680
         BNZ   @RF00680                                            0680
*              DO;                     /* FOR TYPE BEING EDITED YO1156*
*                /* ISSUE MESSAGE INFORMING USER OF CONDITION   YO1156*
*                DO I=8 TO 1 BY -1;               /* SET LOOP   YO1156*
         LA    I,8                                                 0682
@DL00682 DS    0H                                                  0683
*                  IF CADSTYPE(I)^=' '   /* IF LAST SIGNIFICANT YO1156*
*                    THEN                /* CHAR FOUND, STOP    YO1156*
         LR    @12,COMMREG                                         0683
         ALR   @12,I                                               0683
         CLI   CADSTYPE-1(@12),C' '                                0683
         BNE   @RT00683                                            0683
*                      GO TO BLANKXT;    /* LAST CHAR IN DSTYPE YO1156
*                                           HAS BEEN LOCATED    YO1156*
*                END;                 /* END BLANK SUPPRESSION  YO1156*
         BCTR  I,0                                                 0685
         LTR   I,I                                                 0685
         BP    @DL00682                                            0685
*BLANKXT:        MSGLEN= I + 4;       /* LENGTH FOR DSTYPE      YO1156
*                                        INSERTION              YO1156*
BLANKXT  LA    @12,4(,I)                                           0686
         STH   @12,MSGLEN                                          0686
*                RELMSG1= 1294;       /* SET MSGID              YO1156*
         MVC   RELMSG1(2),@CH01386                                 0687
*                RELMSG2= 0;          /* NO SECOND-LEVEL MSG    YO1156*
         SLR   @12,@12                                             0688
         STH   @12,RELMSG2                                         0688
*                MSGTEXT= CADSTYPE;   /* DSTYPE IS INSERTION    YO1156*
         MVC   MSGTEXT(8),CADSTYPE(COMMREG)                        0689
*                MSGOFF= 34;          /* SET OFFSET FOR INSERT  YO1156*
         MVC   MSGOFF(2),@CH01387                                  0690
*                MSGPTR= 0;           /* SPECIFY 1 INSERT ONLY  YO1156*
         ST    @12,MSGPTR                                          0691
*                LEV1INS= ADDR(MSGAREA); /* ADDR OF INSERTION   YO1156*
         LA    @06,MSGAREA                                         0692
         ST    @06,LEV1INS                                         0692
*                LEV2INS= 0;          /* NO LEVEL-2 INSERTIONS  YO1156*
         ST    @12,LEV2INS                                         0693
*                GENERATE REFS(LEV1INS,LEV2INS);                   0694
         IKJEBEML ,,,,MF=(E,AREAM)
*                /* SPECIFY THAT COMMAND BFR IN WORK AREA USED  YO1156*
*                COMBFPTR= ADDR(CABFRPL) + 201; /* ADDRESS OF @YM07202
*                                                FIXED BUFFER @YM07202*
         LA    @12,CABFRPL(,COMMREG)                               0695
         AH    @12,@CH01215                                        0695
         ST    @12,COMBFPTR                                        0695
*                /* INITIALIZE BUFFER                           YO1156*
*                CMDBUF(1:255)= '';          /* BLANK FIXED     YO1156*
         MVI   CMDBUF(@12),C' '                                    0696
         MVC   CMDBUF+1(254,@12),CMDBUF(@12)                       0696
*                CMDBUF(256:324)= '';        /* LENGTH BUFFER   YO1156*
         MVI   CMDBUF+255(@12),C' '                                0697
         MVC   CMDBUF+256(68,@12),CMDBUF+255(@12)                  0697
*                LLFLD= 324;          /* SET LL FIELD IN BFR    YO1156*
         MVC   LLFLD(2,@12),@CH01321                               0698
*                F00= 0;              /* SET 00 FIELD IN BFR    YO1156*
         SLR   @06,@06                                             0699
         STH   @06,F00(,@12)                                       0699
*              END;                   /* END NON-APPLICABLE     YO1156
*                                        KEYWORD LOGIC          YO1156*
*            ELSE                                                  0701
*              DO;                    /* KEYWORD APPLICABLE     YO1156*
         B     @RC00680                                            0701
@RF00680 DS    0H                                                  0702
*                /* CALCULATE LENGTH OF BUFFER REQUIRED         YO1156*
*                LENTHVAL= 324 + 4;        /* SET MINIMUM LEN   YO1156*
         LA    LENTHVAL,328                                        0702
*                PARMREG1= ADDR(LIBOPSF);/* ADDR OF FIRST PDE   YO1156*
         L     PARMREG1,CAPTPRSD(,COMMREG)                         0703
         LA    PARMREG1,LIBOPSF(,PARMREG1)                         0703
*                DO I= 1 TO 255;      /* ASSUME 255 NAMES MAX.  YO1156*
         LA    I,1                                                 0704
@DL00704 DS    0H                                                  0705
*                  IF SPARMFLG= '1'B  /*                        YO1156*
*                    THEN             /* IF OPERAND EXISTS,     YO1156
*                                        UPDATE REQ. LENGTH     YO1156*
         TM    SPARMFLG(PARMREG1),B'10000000'                      0705
         BNO   @RF00705                                            0705
*                      LENTHVAL= LENTHVAL + SUBOPLN + 1;   /*   YO1156*
         LR    @06,LENTHVAL                                        0706
         AH    @06,SUBOPLN(,PARMREG1)                              0706
         AH    @06,@CH00060                                        0706
         LR    LENTHVAL,@06                                        0706
*                  IF SUBLAST= 'FF'X  /*                        YO1156*
*                    THEN             /* IF LAST PDE, EXIT LOOP YO1156*
@RF00705 CLI   SUBLAST(PARMREG1),X'FF'                             0707
         BE    @RT00707                                            0707
*                      GO TO LENEXIT; /* STOP LENGTH PROCESSING YO1156*
*                  PARMREG1= SUBCHAIN;/* CHAIN TO NEXT PDE      YO1156*
         SLR   @06,@06                                             0709
         ICM   @06,7,SUBCHAIN(PARMREG1)                            0709
         LR    PARMREG1,@06                                        0709
*                END;                 /* END LENGTH PROC. LOOP  YO1156*
         AH    I,@CH00060                                          0710
         CH    I,@CH01319                                          0710
         BNH   @DL00704                                            0710
*LENEXIT:        GETLEN= LENTHVAL;    /* SET GETMAIN LENGTH     YO1156*
LENEXIT  ST    LENTHVAL,GETLEN                                     0711
*                GETMODE= '20'X;      /* SET MODE FOR GETMAIN   YO1156*
         MVI   GETMODE,X'20'                                       0712
*                GETSP= 1;            /* SUBPOOL 1 FOR GETMAIN  YO1156*
         MVI   GETSP,X'01'                                         0713
*                PARMREG1= ADDR(GETAREA); /* ADDR OF PARMLIST   YO1156*
         LA    PARMREG1,GETAREA                                    0714
*                GENERATE;            /*                        YO1156*
         GETMAIN ,A=GETPTR,MF=(E,(1))                            YO1156
*                IF RETCDREG= 0       /*                        YO1156*
*                  THEN               /* IF GETMAIN SUCCESSFUL  YO1156*
         LTR   RETCDREG,RETCDREG                                   0716
         BNZ   @RF00716                                            0716
*                    COMBFPTR= GETPTR;/* SET ADDRESSABILITY     YO1156*
         MVC   COMBFPTR(4),GETPTR                                  0717
*                  ELSE               /* OTHERWISE --           YO1156*
*                    DO;              /* SEND MSG AND TERMINATE YO1156*
         B     @RC00716                                            0718
@RF00716 DS    0H                                                  0719
*                      CALL NOCOR;    /* ISSUE MESSAGE          YO1156*
         BAL   @14,NOCOR                                           0719
*                      RETSAVE= 8;    /* INDICATE ERROR COND.   YO1156*
         LA    RETSAVE,8                                           0720
*                      GO TO LIBEXIT; /* EXIT THIS SUBRTN       YO1156*
         B     LIBEXIT                                             0721
*                    END;             /* END GETMAIN FAIL LOGIC YO1156*
*                /* INITIALIZE BUFFER RETURNED BY GETMAIN       YO1156*
*                CMDBUF(1:255)= '';         /* SET FIRST PART   YO1156*
@RC00716 L     @06,COMBFPTR                                        0723
         MVI   CMDBUF(@06),C' '                                    0723
         MVC   CMDBUF+1(254,@06),CMDBUF(@06)                       0723
*                CMDBUF(256:324)= '';       /* OF BFR TO BLANKS YO1156*
         MVI   CMDBUF+255(@06),C' '                                0724
         MVC   CMDBUF+256(68,@06),CMDBUF+255(@06)                  0724
*                LLFLD= GETLEN;       /* INITIALIZE BFR LENGTH  YO1156*
         MVC   LLFLD(2,@06),GETLEN+2                               0725
*                F00= 0;              /* INITIALIZE 00 FIELD    YO1156*
         SLR   @15,@15                                             0726
         STH   @15,F00(,@06)                                       0726
*                COMLIB= 'LIB(';      /* MOVE KEYWORD TO BUFFER YO1156*
         MVC   COMLIB(4,@06),@CC01392                              0727
*                PARMREG1= ADDR(LIBOPSF); /* ADDR OF FIRST PDE  YO1156*
         L     PARMREG1,CAPTPRSD(,COMMREG)                         0728
         LA    PARMREG1,LIBOPSF(,PARMREG1)                         0728
*                LENTHVAL= 5;         /* INITIAL OFFSET FOR     YO1156
*                                        MOVING SUBFIELD OPNDS  YO1156*
         LA    LENTHVAL,5                                          0729
*                DO I= 1 TO 255;      /* ASSUME 255 NAMES MAX.  YO1156*
         LA    I,1                                                 0730
@DL00730 DS    0H                                                  0731
*                  IF SPARMFLG= '1'B  /*                        YO1156*
*                    THEN             /* OPERAND PRESENT, MOVE  YO1156*
         TM    SPARMFLG(PARMREG1),B'10000000'                      0731
         BNO   @RF00731                                            0731
*                      DO;            /* IT TO COMMAND BUFFER   YO1156*
*                        COMLIB(LENTHVAL:LENTHVAL+SUBOPLN-1)= DSNAME;
         L     @06,COMBFPTR                                        0733
         LR    @04,@06                                             0733
         ALR   @04,LENTHVAL                                        0733
         LH    @15,SUBOPLN(,PARMREG1)                              0733
         LR    @14,@15                                             0733
         BCTR  @14,0                                               0733
         L     @03,SUBOPPT(,PARMREG1)                              0733
         EX    @14,@SM01441                                        0733
*                        COMLIB(LENTHVAL+SUBOPLN)= '';   /*     YO1156*
         ALR   @15,LENTHVAL                                        0734
         ALR   @06,@15                                             0734
         MVI   COMLIB-1(@06),C' '                                  0734
*                        LENTHVAL=LENTHVAL+SUBOPLN+1;  /*UPDATE YO1156
*                                                        OFFSET YO1156*
         AH    @15,@CH00060                                        0735
         LR    LENTHVAL,@15                                        0735
*                      END;           /* END OPERAND MOVE       YO1156*
*                    ELSE             /*                        YO1156*
*                      GO TO LIBEXIT; /* EXIT LOOP IF NO OPND   YO1156*
*                  IF SUBLAST= 'FF'X  /*                        YO1156*
*                    THEN             /* IF LAST PDE IN CHAIN,  YO1156*
         CLI   SUBLAST(PARMREG1),X'FF'                             0738
         BE    @RT00738                                            0738
*                      GO TO LIBEXIT; /* EXIT FROM LOOP         YO1156*
*                  PARMREG1= SUBCHAIN;/* CHAIN TO NEXT PDE      YO1156*
         SLR   @06,@06                                             0740
         ICM   @06,7,SUBCHAIN(PARMREG1)                            0740
         LR    PARMREG1,@06                                        0740
*                END;                 /* END SUBFIELD MOVE LOOP YO1156*
         AH    I,@CH00060                                          0741
         CH    I,@CH01319                                          0741
         BNH   @DL00730                                            0741
*              END;                   /* END - KEYWORD APPLIES  YO1156*
*LIBEXIT:  RETREG=LIBSAV;             /* RESTORE R14                  *
@RC00680 DS    0H                                                  0743
LIBEXIT  L     RETREG,LIBSAV                                       0743
*          RETURN;                    /* RETURN LINKAGE         YO1156*
@EL00015 DS    0H                                                  0744
@EF00015 DS    0H                                                  0744
@ER00015 BR    @14                                                 0744
*          END LIBSFRTN;              /* END OF LIB KEYWORD     YO1156
*                                        PROCESSING ROUTINE     YO1156*
*                                                                  0745
*                                                                  0745
*            DECLARE /*GENERAL PURPOSE REGISTERS */                0746
*              GPR00P PTR(31) REG(0),                              0746
*              GPR01P PTR(31) REG(1),                              0746
*              GPR02P PTR(31) REG(2),                              0746
*              GPR03P PTR(31) REG(3),                              0746
*              GPR04P PTR(31) REG(4),                              0746
*              GPR05P PTR(31) REG(5),                              0746
*              GPR06P PTR(31) REG(6),                              0746
*              GPR07P PTR(31) REG(7),                              0746
*              GPR08P PTR(31) REG(8),                              0746
*              GPR09P PTR(31) REG(9),                              0746
*              GPR12P PTR(31) REG(12),                             0746
*              GPR13P PTR(31) REG(13),                             0746
*              GPR14P PTR(31) REG(14),                             0746
*              GPR15P PTR(31) REG(15);                             0746
*                                                                  0746
*            /* VARIABLES REQUIRED BY PL/S SYSTEM MACROS */        0747
*              DECLARE CASAVPTR PTR(31) BASED;/*SAVE AREA PTR FOR IKJEB
*SV*/          DECLARE COMMREG REG(9) PTR(31) RSTD;/*POINTER TO EDIT CO
*MO AREA*/     DECLARE DATAREG REG(10) PTR(31) RSTD;/*BASEREG FOR EDIT
*UBCOMMAND WORK AREA*/                                             0747
*              DECLARE CASAVE CHAR(72) BASED;/*SAVE AREA EDIT MODULE*/
*                                                                  0750
*            DECLARE /* COMMON VARIABLES */                        0751
*              I256C CHAR(256) BASED,                              0751
*              I031F FIXED(31) BASED,                              0751
*              I031P PTR(31)   BASED,                              0751
*              I015F FIXED(15) BASED,                              0751
*              I015P PTR(15)   BASED,                              0751
*              I008P PTR(8)    BASED,                              0751
*              I001C CHAR(1)   BASED;                              0751
*          END IKJEBERU                                            0752
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJEBECA)                                        *
*/*%INCLUDE SYSLIB  (IKJPPL  )                                        *
*/*%INCLUDE SYSLIB  (IKJSTPL )                                        *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*/*%INCLUDE SYSLIB  (IKJSTPB )                                        *
*/*%INCLUDE SYSLIB  (IKJLSD  )                                        *
*/*%INCLUDE SYSLIB  (IKJEBEMJ)                                        *
*;                                                                 0752
@DATA    DS    0H
@CH00060 DC    H'1'
@CH00080 DC    H'2'
@CH00101 DC    H'3'
@CH00373 DC    H'4'
@CH00130 DC    H'5'
@CH01222 DC    H'6'
@CH00124 DC    H'7'
@CH00058 DC    H'8'
@CH01237 DC    H'9'
@CH00393 DC    H'10'
@CH00143 DC    H'12'
@CH00233 DC    H'16'
@CH00134 DC    H'20'
@CH01353 DC    H'22'
@CH01364 DC    H'29'
@CH01387 DC    H'34'
@CH01348 DC    H'45'
@CH00273 DC    H'100'
@CH01215 DC    H'201'
@CH01319 DC    H'255'
@CH01347 DC    H'270'
@CH01352 DC    H'271'
@CH01321 DC    H'324'
@CH01251 DC    H'777'
@CH01303 DC    H'1287'
@CH01386 DC    H'1294'
@CH01363 DC    H'1797'
@CH01277 DC    H'4096'
@CH01411 DC    H'-4089'
@CH01280 DC    H'-3'
@CH01304 DC    H'-2'
@SM01420 MVC   CASADSN-8(0,@06),@TS00001
@SM01422 MVC   INCRAREA(0,@06),0(@15)
@SM01425 MVC   EDTDSNME(0),CADSNREC(COMMREG)
@SM01427 MVC   0(0,@12),CAEDPSWD(COMMREG)
@SM01430 MVC   CMDNAME(0,@06),CASADSN-1(@03)
@SM01434 MVC   COMSIZE+5(0,@06),SIZENUM(@12)
@SM01439 MVC   MSGTEXT(0),CASYNAME(COMMREG)
@SM01441 MVC   COMLIB-1(0,@04),DSNAME(@03)
@DATD    DSECT
         DS    0F
@TF00001 DS    F
IKJEBERU CSECT
         DS    0F
@CF01275 DC    F'4112'
@CF01282 DC    XL4'FFFFFFF8'
@DATD    DSECT
         DS    0D
SAVELEN  DS    F
PPLPTR   DS    A
BUFPTR   DS    A
GETWD    DS    A
INCORSAV DS    A
INLSTSAV DS    A
BUFSAV   DS    A
ITFSAV   DS    A
LIBSAV   DS    A
LSDRSVRD DS    F
@TS00001 DS    CL44
RUWKAREA DS    CL400
         ORG   RUWKAREA
FREEXX   DS    CL12
AREAM    DS    CL40
         ORG   AREAM
RELMSG1  DS    FL2
RELMSG2  DS    FL2
LEV1INS  DS    FL4
LEV2INS  DS    FL4
AREAM2   DS    CL28
         ORG   RUWKAREA+52
CIPLST   DS    CL8
         ORG   CIPLST
COMPTR   DS    AL4
COMBFPTR DS    AL4
         ORG   RUWKAREA+60
@NM00023 DS    CL8
         ORG   @NM00023
GETPTR   DS    AL4
BUFREELN DS    FL4
         ORG   RUWKAREA+68
UTPARMS  DS    CL4
         ORG   UTPARMS
UTWORD1  DS    AL4
         ORG   UTWORD1
UTOPTION DS    BL1
         ORG   RUWKAREA+72
@NM00024 DS    CL12
         ORG   @NM00024
SYCKLST  DS    FL4
SYCKIBFR DS    FL4
SYCKTTMP DS    FL4
         ORG   RUWKAREA+84
STPBWK   DS    CL8
         ORG   STPBWK
STACKRES DS    FL4
@NM00025 DS    AL4
         ORG   RUWKAREA+92
MSGAREA  DS    CL32
         ORG   MSGAREA
MSGPTR   DS    AL4
MSGLEN   DS    FL2
MSGOFF   DS    FL2
MSGTEXT  DS    CL8
MSGPTR2  DS    AL4
MSGLEN2  DS    FL2
MSGOFF2  DS    FL2
MSGTEXT2 DS    CL8
         ORG   RUWKAREA+124
GETAREA  DS    CL10
         ORG   GETAREA
GETLEN   DS    FL4
@NM00026 DS    CL1
@NM00027 DS    CL3
GETMODE  DS    BL1
GETSP    DS    AL1
         ORG   RUWKAREA+134
@NM00028 DS    CL2
RECORD   DS    CL263
         ORG   RECORD
KEYFIELD DS    CL4
LL       DS    FL2
@NM00029 DS    FL2
EDCPARMS DS    CL8
         ORG   EDCPARMS
EDCCOMM  DS    AL4
EDCOUTP  DS    AL4
         ORG   RECORD+16
EDCOUTA  DS    CL16
         ORG   EDCOUTA
EDCOUTDS DS    AL4
EDCOUTLN DS    FL4
EDCOUTLR DS    FL4
EDCOUTCL DS    AL4
         ORG   RECORD+32
LSTPARMS DS    CL12
         ORG   LSTPARMS
LSTCORDS DS    AL4
LSTATTRB DS    AL4
LSTDSNAM DS    AL4
         ORG   RECORD+44
DSATTRB  DS    CL8
         ORG   DSATTRB
ATTRLRC  DS    FL4
ATTRLEN  DS    FL4
         ORG   RECORD+52
EDTDSNAM DS    CL66
         ORG   EDTDSNAM
EDTDSNLL DS    FL2
EDTDSNME DS    CL63
@NM00030 DS    AL1
         ORG   RECORD+118
PSWDCTR  DS    FL2
LSTADDR  DS    AL4
INDEX    DS    FL2
ADDRUNPK DS    CL8
@NM00031 DS    CL129
         ORG   RUWKAREA+399
SWITCHES DS    BL1
         ORG   SWITCHES
OBJBIT   DS    BL1
ALLOC    EQU   SWITCHES+0
FREEBIT  EQU   SWITCHES+0
STACKBIT EQU   SWITCHES+0
RUOBJGEN EQU   SWITCHES+0
@NM00032 EQU   SWITCHES+0
         ORG   RUWKAREA+400
IKJEBERU CSECT
         NOPR  ((@ENDDATD-@DATD)/673*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00450 DC    V(IKJEBRU0)
@CV01204 DC    V(IKJEBEDC)
         DS    0D
@CC01298 DC    C'        '
@CC01294 DC    C'INLIST('
@CC01338 DC    C'NOSTORE'
@CC01340 DC    C'NOPAUSE'
@CC01329 DC    C'NOTEST'
@CC01258 DC    C'FIXED'
@CC01284 DC    C'STACK'
@CC01323 DC    C'PARSE'
@CC01332 DC    C'LPREC'
@CC01333 DC    C'SPREC'
@CC01337 DC    C'STORE'
@CC01339 DC    C'PAUSE'
@CC01341 DC    C'SIZE('
@CC01365 DC    C'BASIC'
@CC01328 DC    C'TEST'
@CC01330 DC    C'LMSG'
@CC01331 DC    C'SMSG'
@CC01336 DC    C'NOGO'
@CC01366 DC    C'IPLI'
@CC01392 DC    C'LIB('
@CC01259 DC    C'RUN'
@CC01265 DC    C'OBJ'
@CC01334 DC    C'OPT'
@CC01285 DC    C'04'
@CC01297 DC    C'.)'
@CC01324 DC    C'12'
@CC01327 DC    C''''''
@CC01335 DC    C'GO'
@CC01370 DC    C'08'
TABLE    DC    CL16'0123456789ABCDEF'
IKJEBERU CSECT
IKJEBRU0 IKJPARM
STRLBL   IKJPOSIT   QSTRING,VALIDCK=VALIDCHK,HELP=('PARAMETER STRING NOC
               T EXCEEDING 100 CHARACTERS')
TEST     IKJKEYWD
         IKJNAME    'TEST'
         IKJNAME    'NOTEST'
DMSG     IKJKEYWD
         IKJNAME    'LMSG'
         IKJNAME    'SMSG'
PREC     IKJKEYWD
         IKJNAME    'LPREC'
         IKJNAME    'SPREC'
CHK      IKJKEYWD
         IKJNAME    'CHECK'
         IKJNAME    'OPT'
*        OCIP ID FOR STATEMENT FOLLOWING                         YO1156
LIBE     IKJKEYWD
         IKJNAME    'LIB',SUBFLD=LIBEDSNS                        YO1156
GO       IKJKEYWD
         IKJNAME    'GO'                                         Y02676
         IKJNAME    'NOGO'                                       Y02676
STRE     IKJKEYWD
         IKJNAME    'STORE'                                      Y02676
         IKJNAME    'NOSTORE'                                    Y02676
PAUZ     IKJKEYWD
         IKJNAME    'PAUSE'                                      Y02676
         IKJNAME    'NOPAUSE'                                    Y02676
SIZ      IKJKEYWD
         IKJNAME    'SIZE',SUBFLD=SIZSUB                         Y02676
*        OCIP ID FOR STATEMENT FOLLOWING                         YO1156
LIBEDSNS IKJSUBF
LIBSUBF  IKJIDENT   'DSLIST',FIRST=ANY,OTHER=ANY,LIST,           YO1156X
               PROMPT='LIBRARY DATA SET NAME+',                  YO1156X
               HELP=('NAME OF LIBRARY CONTAINING ROUTINES USED BY YOUR X
               PROGRAM')                                         YO1156
SIZSUB   IKJSUBF
SIZSUBF  IKJIDENT   'SIZE VALUE',FIRST=NUMERIC,OTHER=NUMERIC,    Y02676X
               MAXLNTH=3,PROMPT='SIZE OF USER AREA',             Y02676X
               HELP='SIZE OF USER AREA'                          Y02676
         IKJENDP
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKJEBERU CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
SYKSAV   EQU   @12
NOSYNSAV EQU   @05
SYSSAV   EQU   @05
NOCORSAV EQU   @05
EMPTYSAV EQU   @05
DASAV    EQU   @05
DSRTNSAV EQU   @12
UTSAV    EQU   @05
J        EQU   @02
I        EQU   @05
LENTHVAL EQU   @12
ENDWD    EQU   @02
TYPEOFF  EQU   @04
STPLPTR  EQU   @02
RETSAVE  EQU   @07
BASEREG2 EQU   @08
PARMREG0 EQU   @00
PARMREG1 EQU   @01
BASREG   EQU   @05
STACKREG EQU   @05
BASEREG  EQU   @11
RETREG   EQU   @14
ENTRYPT  EQU   @15
RETCDREG EQU   @15
COMMREG  EQU   @09
GPR13P   EQU   @13
GPR15P   EQU   @15
DATAREG  EQU   @10
GPR12P   EQU   @12
GPR01P   EQU   @01
GPR00P   EQU   @00
GPR02P   EQU   @02
GPR03P   EQU   @03
GPR04P   EQU   @04
GPR05P   EQU   @05
GPR06P   EQU   @06
GPR07P   EQU   @07
GPR08P   EQU   @08
GPR09P   EQU   @09
GPR14P   EQU   @14
SAVEREG  EQU   @13
CVTPTR   EQU   16
IKJEBECA EQU   0
CAPTTMP  EQU   IKJEBECA
CAPTPRSD EQU   IKJEBECA+36
CAPRSPDL EQU   CAPTPRSD
CAFREEDL EQU   CAPRSPDL
CAPTIBFR EQU   IKJEBECA+40
CAOPERND EQU   CAPTIBFR
CAPTCDCB EQU   IKJEBECA+52
CAPTCHK  EQU   IKJEBECA+72
CAPTICDS EQU   IKJEBECA+80
CAPTICLN EQU   IKJEBECA+84
CAATTN   EQU   IKJEBECA+120
CAATTNIS EQU   CAATTN
CACFLAG  EQU   IKJEBECA+124
CACFLAG1 EQU   CACFLAG
CACFLAG2 EQU   CACFLAG+1
CARECFM  EQU   CACFLAG2
CAMODMSG EQU   CACFLAG2
CACFLAG3 EQU   CACFLAG+2
CAIMFLG  EQU   CACFLAG3
CACFLAG4 EQU   CACFLAG+3
CACFLAG5 EQU   CACFLAG+4
CACFLAG6 EQU   CACFLAG+5
CAFREE   EQU   CACFLAG6
CAPD     EQU   IKJEBECA+152
CADSTYPE EQU   CAPD
CADSQUAL EQU   CAPD+8
CASYNAME EQU   CAPD+32
CADSCODE EQU   CAPD+40
CADSATTR EQU   CAPD+41
CARUN    EQU   CADSATTR
CADSATR2 EQU   CAPD+42
CAOBJGEN EQU   CADSATR2
CARUNDS  EQU   CADSATR2
CAINLIST EQU   CADSATR2
CAPRNAME EQU   CAPD+58
CAPTPDXT EQU   IKJEBECA+228
CALRECL  EQU   IKJEBECA+232
CAEDFLAG EQU   IKJEBECA+236
CAEDFLG2 EQU   IKJEBECA+237
CAEDPSWD EQU   IKJEBECA+300
CADSNLEN EQU   IKJEBECA+316
CADSNREC EQU   IKJEBECA+320
CASAFLAG EQU   IKJEBECA+376
CASADISP EQU   CASAFLAG
CASAUNCG EQU   CASAFLAG
CASAFLG2 EQU   IKJEBECA+377
CASADSNL EQU   IKJEBECA+378
CASADSN  EQU   IKJEBECA+380
CASYNLST EQU   IKJEBECA+496
CASYNBFR EQU   CASYNLST
CASYNWA  EQU   IKJEBECA+508
CASYNECD EQU   CASYNWA
CASYNOPT EQU   IKJEBECA+524
CASYNCD2 EQU   CASYNOPT+1
CASYNSW  EQU   CASYNOPT+3
CATMPLST EQU   IKJEBECA+528
CAMAWKA  EQU   IKJEBECA+596
MACFLAGS EQU   CAMAWKA+28
MACFLAG2 EQU   CAMAWKA+29
CAMODEMG EQU   IKJEBECA+928
CASCWKA  EQU   IKJEBECA+1448
CABFRPL  EQU   IKJEBECA+2120
CATEMPBF EQU   IKJEBECA+2648
CANXTSVA EQU   IKJEBECA+3896
IKJEBECX EQU   0
CHECKER  EQU   0
PPL      EQU   0
PPLPCL   EQU   PPL+12
PPLANS   EQU   PPL+16
PPLCBUF  EQU   PPL+20
PPLUWA   EQU   PPL+24
@NM00033 EQU   0
@NM00035 EQU   @NM00033+8
PARMADR  EQU   @NM00035
PARMLTH  EQU   @NM00035+4
@NM00036 EQU   @NM00035+6
PARMFLG  EQU   @NM00036
TESTOP   EQU   @NM00033+16
DMSGOP   EQU   @NM00033+18
PRECOP   EQU   @NM00033+20
CHKOP    EQU   @NM00033+22
LIBOP    EQU   @NM00033+24
GOOP     EQU   @NM00033+26
STOREOP  EQU   @NM00033+28
PAUSEOP  EQU   @NM00033+30
SIZEOP   EQU   @NM00033+32
LIBOPSF  EQU   @NM00033+36
SIZEOPSF EQU   @NM00033+48
SIZEPTR  EQU   SIZEOPSF
SIZELEN  EQU   SIZEOPSF+4
SIZENUM  EQU   0
PTICDS   EQU   0
ICLEN    EQU   0
SUBOP    EQU   0
SUBOPPT  EQU   SUBOP
SUBOPLN  EQU   SUBOP+4
@NM00039 EQU   SUBOP+6
SPARMFLG EQU   @NM00039
SUBOPCHN EQU   SUBOP+8
SUBLAST  EQU   SUBOPCHN
SUBCHAIN EQU   SUBOPCHN+1
STRING   EQU   0
DSNAME   EQU   0
STPL     EQU   0
STPLSTPB EQU   STPL+12
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
STPB     EQU   0
@NM00044 EQU   STPB
STPBALSD EQU   STPB+4
LSD      EQU   0
LSDADATA EQU   LSD
LSDRCLEN EQU   LSD+4
LSDTOTLN EQU   LSD+6
LSDANEXT EQU   LSD+8
UTREC    EQU   0
INCRAREA EQU   0
CMDBUF   EQU   0
LLFLD    EQU   CMDBUF
F00      EQU   CMDBUF+2
COMFIELD EQU   CMDBUF+4
CMDNAME  EQU   CMDBUF+13
COMQTE   EQU   CMDBUF+41
COMPARM  EQU   CMDBUF+42
COMTYPE  EQU   CMDBUF+244
COMFIX   EQU   COMTYPE
COMTEST  EQU   CMDBUF+253
COMDMSG  EQU   CMDBUF+260
COMPREC  EQU   CMDBUF+265
COMCHK   EQU   CMDBUF+271
COMGO    EQU   CMDBUF+277
COMSTORE EQU   CMDBUF+282
COMPAUSE EQU   CMDBUF+290
COMSIZE  EQU   CMDBUF+298
COMINLST EQU   CMDBUF+308
COMLIB   EQU   CMDBUF+324
CASAVPTR EQU   0
CASAVE   EQU   0
PDE      EQU   0
@NM00062 EQU   0
LENTH    EQU   @NM00062+4
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
SYNBYTE1 EQU   CASYNECD
SYNBYTE2 EQU   CASYNCD2
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTPARS  EQU   CVTS01+176
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
STPBPTR  EQU   PPLPTR
LSDPTR   EQU   GETPTR
*                                      START UNREFERENCED COMPONENTS
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
@NM00064 EQU   @NM00062+6
@NM00063 EQU   @NM00062
@NM00061 EQU   CMDBUF+323
@NM00060 EQU   CMDBUF+307
@NM00059 EQU   CMDBUF+297
@NM00058 EQU   CMDBUF+289
@NM00057 EQU   CMDBUF+281
@NM00056 EQU   CMDBUF+276
@NM00055 EQU   CMDBUF+270
@NM00054 EQU   CMDBUF+264
@NM00053 EQU   CMDBUF+259
@NM00052 EQU   CMDBUF+252
@NM00051 EQU   COMTYPE+5
@NM00050 EQU   CMDBUF+243
@NM00049 EQU   CMDBUF+40
@NM00048 EQU   CMDBUF+12
LSDEXEC  EQU   LSD+12
STPBMBRN EQU   STPB+16
STPBOTDD EQU   STPB+12
STPBINDD EQU   STPB+8
@NM00047 EQU   @NM00044+1
SPBFLUSH EQU   @NM00044+1
@NM00046 EQU   @NM00044+1
@NM00045 EQU   @NM00044
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00043 EQU   CVTFIX+248
@NM00042 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
STPLECB  EQU   STPL+8
STPLECT  EQU   STPL+4
STPLUPT  EQU   STPL
@NM00041 EQU   SUBOP+7
@NM00040 EQU   @NM00039
SIZEFLG  EQU   SIZEOPSF+6
@NM00038 EQU   @NM00035+7
@NM00037 EQU   @NM00036
@NM00034 EQU   @NM00033
PPLECB   EQU   PPL+8
PPLECT   EQU   PPL+4
PPLUPT   EQU   PPL
CXDATEXT EQU   IKJEBECX
CAPDEXT  EQU   IKJEBECA+3984
CADSNRC2 EQU   IKJEBECA+3928
CADSNOF2 EQU   IKJEBECA+3926
CADSNLN2 EQU   IKJEBECA+3924
CADSNPT2 EQU   IKJEBECA+3920
@NM00022 EQU   IKJEBECA+3900
CASVAREA EQU   IKJEBECA+3176
CAFIBFR  EQU   IKJEBECA+1188
CAAEDCB  EQU   IKJEBECA+1096
CALDROP  EQU   IKJEBECA+1064
CAATNWKA EQU   IKJEBECA+956
CAATNBUF EQU   IKJEBECA+952
CAMODETX EQU   CAMODEMG+12
CAMODEOF EQU   CAMODEMG+10
CAMODELN EQU   CAMODEMG+8
CAMODEPT EQU   CAMODEMG+4
CAMODEIS EQU   CAMODEMG
CASRWKA  EQU   IKJEBECA+728
CAMSWKA  EQU   IKJEBECA+628
@NM00021 EQU   CAMAWKA+30
@NM00020 EQU   MACFLAG2
MATABLE1 EQU   MACFLAG2
@NM00019 EQU   MACFLAGS
MAENDPRC EQU   MACFLAGS
MAABBREV EQU   MACFLAGS
MAECTMOD EQU   MACFLAGS
@NM00018 EQU   CAMAWKA
CASTAEPL EQU   IKJEBECA+576
CASTAXPL EQU   IKJEBECA+556
CASRPLST EQU   CATMPLST+12
CAPTECB  EQU   CATMPLST+8
CAPTECT  EQU   CATMPLST+4
CAPTUPT  EQU   CATMPLST
CASYNSCN EQU   CASYNSW
CASYNML  EQU   CASYNSW
CASYNSF  EQU   CASYNSW
CASYNRFM EQU   CASYNSW
CASYNIS  EQU   CASYNSW
@NM00017 EQU   CASYNSW
CASYNLN  EQU   CASYNSW
@NM00016 EQU   CASYNSW
CASYNRCL EQU   CASYNOPT+2
CASYNCD1 EQU   CASYNOPT
CASYNTEM EQU   CASYNWA+12
CASYNMS2 EQU   CASYNWA+8
CASYNMS1 EQU   CASYNWA+4
CASYNWAP EQU   CASYNWA+1
CASYNPTO EQU   CASYNLST+8
CASYNPWA EQU   CASYNLST+4
@NM00015 EQU   IKJEBECA+484
CARECNO  EQU   IKJEBECA+480
CAINSAVE EQU   IKJEBECA+476
@NM00014 EQU   IKJEBECA+472
CAIMLINC EQU   IKJEBECA+468
CAIMLLNO EQU   IKJEBECA+464
CAINCRE  EQU   IKJEBECA+460
CACURNUM EQU   IKJEBECA+456
CANXTREC EQU   IKJEBECA+452
CASTNUM  EQU   IKJEBECA+448
CASAPSWD EQU   IKJEBECA+440
CASADDN  EQU   IKJEBECA+432
CASAMEMB EQU   IKJEBECA+424
CASADQTY EQU   CASAFLG2
CASANCTG EQU   CASAFLG2
CASAALOC EQU   CASAFLAG
CASADSOR EQU   CASAFLAG
CASAMEM  EQU   CASAFLAG
CASAINCP EQU   CASAFLAG
CASAFNCP EQU   CASAFLAG
CASAVEDS EQU   CASAFLAG
CADSNOFF EQU   IKJEBECA+318
CADSNPTR EQU   IKJEBECA+312
CAEDTSIZ EQU   IKJEBECA+308
CAEDDDN  EQU   IKJEBECA+292
CAEDMEMB EQU   IKJEBECA+284
CAEDDSN  EQU   IKJEBECA+240
CAEDDSNL EQU   IKJEBECA+238
CAEDPRTC EQU   CAEDFLG2
CAEDALOC EQU   CAEDFLAG
CAEDUNCG EQU   CAEDFLAG
CAEDDSOR EQU   CAEDFLAG
CAEDMEM  EQU   CAEDFLAG
CAEDDISP EQU   CAEDFLAG
CAEDINCP EQU   CAEDFLAG
CAEDFNCP EQU   CAEDFLAG
CAEDITDS EQU   CAEDFLAG
CABLK2   EQU   IKJEBECA+234
@NM00013 EQU   IKJEBECA+226
CAPDEND  EQU   CAPD+82
CADATEXT EQU   CAPD+74
CAEXTNAM EQU   CAPD+66
CACHKOPT EQU   CAPD+56
CAULRLMX EQU   CAPD+54
CAULRLDF EQU   CAPD+52
CAVLRLMX EQU   CAPD+50
CAVLRLDF EQU   CAPD+48
CAFLRLMX EQU   CAPD+46
CAFLRLDF EQU   CAPD+44
CARECFMD EQU   CAPD+43
@NM00012 EQU   CADSATR2
CADSNDEF EQU   CADSATR2
CALINTAB EQU   CADSATR2
@NM00011 EQU   CADSATTR
CALRECLX EQU   CADSATTR
CALNNUM  EQU   CADSATTR
CADSCONT EQU   CADSATTR
CACAPSDF EQU   CADSATTR
CACAPSRQ EQU   CADSATTR
CASCAN   EQU   CADSATTR
CATABS   EQU   CAPD+20
CALENGTH EQU   CAPD+19
CALINE   EQU   CAPD+18
CABLKS   EQU   CAPD+16
@NM00010 EQU   CACFLAG+8
CAPLIRTM EQU   CACFLAG+7
CAPLILFM EQU   CACFLAG+6
@NM00009 EQU   CACFLAG6
CACHAR60 EQU   CACFLAG6
CACHAR48 EQU   CACFLAG6
@NM00008 EQU   CACFLAG5
CAEDLNDP EQU   CACFLAG5
CADSUSED EQU   CACFLAG4
CARECURS EQU   CACFLAG4
CAINPROC EQU   CACFLAG4
CASCRC20 EQU   CACFLAG4
CAABEND  EQU   CACFLAG4
CATPUTVF EQU   CACFLAG4
CAPTGTBF EQU   CACFLAG4
CAFINDIS EQU   CACFLAG4
@NM00007 EQU   CAIMFLG
CAIMINPT EQU   CAIMFLG
CAIMSFPT EQU   CAIMFLG
CAIMCIN  EQU   CAIMFLG
CAIMIR   EQU   CAIMFLG
CAIMSC   EQU   CAIMFLG
CAIMINS  EQU   CAIMFLG
CAIMPT   EQU   CAIMFLG
@NM00006 EQU   CACFLAG2
CASEQCOL EQU   CACFLAG2
CASCANON EQU   CACFLAG2
CADSMODS EQU   CACFLAG2
CANONUM  EQU   CACFLAG1
CACAPS   EQU   CACFLAG1
CAENDSC  EQU   CACFLAG1
CAINITSC EQU   CACFLAG1
CASCANSW EQU   CACFLAG1
CAPROMPT EQU   CACFLAG1
CAVRFYSW EQU   CACFLAG1
CALNTOVF EQU   CACFLAG1
@NM00005 EQU   CAATTN
@NM00004 EQU   IKJEBECA+118
CAMAXBLK EQU   IKJEBECA+116
@NM00003 EQU   IKJEBECA+88
CAPTNBFR EQU   IKJEBECA+76
CACORELN EQU   IKJEBECA+68
CAPTCORE EQU   IKJEBECA+64
CAUTILNO EQU   IKJEBECA+60
CAPTPDCB EQU   IKJEBECA+56
@NM00002 EQU   IKJEBECA+50
CASCMDLN EQU   IKJEBECA+48
CAPTSCMD EQU   IKJEBECA+44
CAPTRTRY EQU   IKJEBECA+32
CAPTMSGM EQU   IKJEBECA+28
CAPTUT   EQU   IKJEBECA+24
CAPTMS   EQU   IKJEBECA+20
CAPTLE   EQU   IKJEBECA+16
CAPTAT   EQU   IKJEBECA+12
CAPTAE   EQU   IKJEBECA+8
@NM00001 EQU   IKJEBECA+4
*                                      END UNREFERENCED COMPONENTS
@RT00074 EQU   BLKFND
@RT00091 EQU   EXITPT
@RT00093 EQU   EXITPT1
@RT00133 EQU   DOTFND
@RT00195 EQU   CHECK
@RC00172 EQU   @RC00165
@RT00381 EQU   USERFND
@RT00385 EQU   QUALFND
@RC00456 EQU   @RC00455
@RT00476 EQU   BUFEXIT
@RF00593 EQU   @RC00591
@RT00652 EQU   SYNFND
@RT00683 EQU   BLANKXT
@RT00707 EQU   LENEXIT
@RF00731 EQU   LIBEXIT
@RT00738 EQU   LIBEXIT
@PB00015 EQU   @EL00001
@RF00264 EQU   @RC00172
@RC00220 EQU   @RC00172
@PB00014 EQU   @PB00015
@RC00240 EQU   @RC00220
@RF00260 EQU   @RC00220
@PB00013 EQU   @PB00014
@PB00012 EQU   @PB00013
@PB00011 EQU   @PB00012
@PB00010 EQU   @PB00011
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IKJEBERU,(C'PLS1935',0701,76162)
