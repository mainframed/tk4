EFC     TITLE 'EDIT SERVICE ROUTINE-FINAL COPY-IKJEBEFC'
***********************************************************************
*                                                                     *
*                                                                     *
*STATUS-  VERSION NO. 01. OS/360 RELEASE NO. 20                       *
*                                                                     *
*FUNCTION/OPERATION-  IKJEBEFC IS AN EDIT SERVICE ROUTINE WHICH IS    *
*   USED TO COPY THE UTILITY DATA SET BEING EDITED INTO A BSAM DATA   *
*   SET. THIS ROUTINE WILL READ THE RECORDS FROM THE UTILITY DATA SET,*
*   CHANGE THE RECORD FORMAT FROM WHAT EXISTS ON THE UTILITY DATA SET *
*   TO A FORMAT REQUIRED FOR THE BSAM DATA SET, AND WRITE THE RECORDS *
*   INTO THE BSAM DATA SET.                                           *
*                                                                     *
*ENTRY POINTS- IKJEBEFC IS THE MAIN AND ONLY ENTRY POINT.             *
*                                                                     *
*INPUT-  REGISTER 1 CONTAINS A POINTER TO EDIT'S COMMUNICATION AREA.  *
*                                                                     *
*OUTPUT-  A FORMATTED BSAM DATA SET IS WRITTEN.                       *
*         REGISTERS AS DESCRIBED UNDER EXITS BELOW.                   *
*                                                                     *
*EXTERNAL REFERENCES-                                                 *
*        IKJEBEUT        -PERFORMS READING OF RECORDS FROM UTILITY    *
*                         DATA SET                                    *
*        IKJEBEEX        -UTILITY DATA SET ACCESS TERMINATION         *
*        MACROS USED -                                                *
*          IKJEBESV      -SAVE CALLER'S REGISTERS AND ESTABLISH       *
*                         ADDRESSABILITY                              *
*          IKJEBERT      -RELOAD CALLER'S REGISTERS AND RETURN CONTROL*
*                         TO CALLER                                   *
*          IKJEBESH      -LINKAGE TO EDIT MODULES                     *
*          IKJEBEML      -STANDARD MESSAGE TO TERMINAL USER           *
*          IKJEBECA      -LAYOUT AND DESCRIPTION OF COMMUNICATION AREA*
*          FREEPOOL      -RELEASE BUFFER ACQUIRED BY OPEN MACRO TO    *
*                        -SYSTEM                                      *
*          OPEN          -OPEN BSAM DATA SET                          *
*          CLOSE         -CLOSE BSAM DATA SET                         *
*          DCBD          -LAYOUT OF DCB FOR BSAM DATA SET             *
*                                                                     *
*EXITS,NORMAL-  A RETURN CODE IN REGISTER 15 AS FOLLOWS-              *
*                                                                     *
*           RETURN CODE = 0  THE UTILITY DATA SET WAS COPIED          *
*             SUCCESSFULLY.                                           *
*                                                                     *
*           RETURN CODE = 4  THE UTILITY DATA SET CONTAINS NO LOGICAL *
*             RECORDS                                                 *
*                                                                     *
*EXITS,ERROR-   A RETURN CODE IN REGISTER 15 AS FOLLOWS-              *
*                                                                     *
*           RETURN CODE = 8  I/O ERROR ON BSAM DATA SET               *
*                                                                     *
*           RETURN CODE = 12  I/O ERROR ON UTILITY DATA SET           *
*                                                                     *
*TABLES/WORK AREAS - THE EDIT SERVICE ROUTINE WORK AREA OF FIFTY      *
*   FULLWORDS AND A BUFFER POOL OF 98 FULLWORDS IN THE COMMUNICATION  *
*   AREA ARE USED                                                     *
*                                                                     *
*ATTRIBUTES - REFRESHABLE, ENABLED, NON-PRIVILEGED                    *
*                                                                     *
*NOTES - THIS ROUTINE IS CHARACTER CODE INDEPENDENT                   *
*                                                                     *
***********************************************************************
IKJEBEFC CSECT
*
*A259000-265000,750500-751500                                    A45002
*D260000-266000                                                  A45002
*C413500,415000                                                 YA00038
*D411000-412000                                                 YA00038
*A410010-411140                                                  Y01676
*D410020-456000                                                  Y01676
*D750500-751500                                                  Y02676
*D410380-410480,410520,410540                                  @YA02797
*D238000-240000,572000,574000-592000,596000-622000,780000      @YM07645
*C728000,                                                      @YM07645
*A133000,141000,214600,215200,247500,363000,364000,373000,     @YM07645
*A374000,                                                      @YM07645
*A384200-385600,410005,410101,410102,410275,410277,            @YM07645
*A413140-427140,                                               @YM07645
*A428140-443140,552200-555400,564300-566000,                   @YM07645
*A568090-593000,722016,727000,727500,729000,774600,775200,     @YM07645
*A780100-781600                                                @YM07645
*A140500,410007-410103,410110                                  @OZ00809
*A571001,140501,571501-571503,593010-593020                    @ZA05967
*C630000,571340,589000-593000                                  @ZA05967
*D571400                                                       @ZA05967
*    CODE ADDED TO DEFAULT LRECL,BLKSIZE AND RECFM ONLY FOR    @ZA12422
*    NEW OR OLD, EMPTY DATA SETS.                              @ZA12422
         SPACE 2
***********************************************************************
*    EQUATES OF SYMBOLIC REGISTERS
***********************************************************************
PARMREG0 EQU   0                       PARAMETER POINTER
PARMREG1 EQU   1                       PARAMETER POINTER
TESTREG  EQU   2                       WORK REGISTER
ELEMENT  EQU   3                       INDEX PTR INTO A LIST   @YM07645
ADDREG   EQU   4                       WORK REGISTER
DCBREG   EQU   5                       WORK REGISTER
WORKREG  EQU   6                       WORK REGISTER
REG7     EQU   7                       WORK REGISTER           @OZ00809
LASTINDX EQU   7                       INDEX TO LAST DECB USED @ZA05967
BUFLEN   EQU   8                       LENGTH OF BUFFER        @YM07645
COMMREG  EQU   9                       COMMUNICATION AREA ADDRESSING
TEMPREG  EQU   10                      WORK REGISTER
BASEREG  EQU   11                      BASE REGISTER
DATAREG  EQU   12                      WORK REGISTER
SAVEREG  EQU   13                      SAVE AREA POINTER
RETREG   EQU   14                      RETURN REGISTER
RETCDREG EQU   15                      RETURN CODE
         SPACE 2
***********************************************************************
*    EQUATES OF SYMBOLIC CONSTANTS
***********************************************************************
FC0      EQU   0                       CONSTANT OF 0
FC1      EQU   1                       CONSTANT OF 1
FC2      EQU   2                       CONSTANT OF 2
FC3      EQU   3                       CONSTANT OD 3
FC4      EQU   4                       CONSTANT OF 4
FC6      EQU   6                       CONSTANT OF 6
FC8      EQU   8                       CONSTANT OF 8
FC10     EQU   10                      CONSTANT OF 10
FC12     EQU   12                      CONSTANT OF 12
FC16     EQU   16                      CONSTANT OF 16
FC20     EQU   20                      CONSTANT OF 20
FC29     EQU   29                      CONSTANT OF 29
FC50     EQU   50                      CONSTANT OF 50
FC78     EQU   78                      CONSTANT OF 78
DCBOPEN  EQU   X'10'                   OPEN TEST FLAG
FIXED    EQU   X'80'                   FIXED RECORD FORMAT TEST FLAG
VAR      EQU   X'40'                   VARIABLE RECORD FORMAT TEST FLAG
FIXEDBL  EQU   X'90'                   FIXED BLOCKED REC. FORMAT BIT
VARBL    EQU   X'50'                   VARIABLE BLOCKED REC. FORMAT BIT
RECFSBIT EQU   B'00001000'             STANDARD BLOCKS OR SPANNED
*                                      RECORDS BIT IN DCBRECFM.
END      EQU   X'80'                   END OF PARAMETER LIST CODE
FIRST    EQU   X'04'                   READ 1ST RECORD CODE
AFTER    EQU   X'02'                   READ NEXT RECORD FLAG
EXIST    EQU   X'C0'                   RECORD FORMAT TEST FLAG
ALL      EQU   X'FF'                   USED TO SET SWITCHES
MESS1    EQU   X'80'                   MESSAGE1 TEST SWITCH
         LCLA  &MAXBFRS                                        @YM07645
&MAXBFRS SETA  5                                               @YM07645
         SPACE 2
***********************************************************************
*    MESSAGE REFERENCES
***********************************************************************
         IKJEBEMI (309)
         EJECT
***********************************************************************
*    STANDARD ENTRY LINKAGE AND ESTABLISHMENT OF ADDRESSABILITY BOTH
*    IN THIS ROUTINE AND IN THE COMMUNICATION AREA
***********************************************************************
         IKJEBESV (14,12),T,*          SAVE CALLER'S REGISTERS AND
         USING IKJEBECA,COMMREG        ADDRESSABILITY IN COMMUNICATION
*                                      AREA
         MVI   SW,FC0                  TURN SWITCHES OFF
         MVI   FCSWITCH,FC0            ZERO OUT FC SWITCHES    @YM07645
         SPACE 2
***********************************************************************
*    MOVE DCB WHICH HAS BEEN INITIALIZED WITH DSORG, MACRF, A SYNAD
*    EXIT ADDRESS AND AN OPEN EXIT ADDRESS FOR BSAM DATA SET TO
*    THE COMMUNICATION AREA AND ESTABLISH ITS ADDRESSABILITY HERE
***********************************************************************
         TM    CACFLAG4,CAABEND     CHECK IF ABEND IN PROGRESS   A45002
         BO    FCAEDCB              IF ABEND, DON'T DESTROY THE  A45002
*                                   EXISTING DCB                 A45002
         LA    DCBREG,COFCDCB       NORMAL DCB ADDRESS           A45002
         B     MOVEDCB              BRANCH TO MOVE DCB           A45002
FCAEDCB  LA    DCBREG,CAAEDCB       ABEND DCB ADDRESS            A45002
MOVEDCB  MVC   FC0(FCDCBL,DCBREG),FCDCB MOVE DCB TO AREA         A45002
         USING IHADCB,DCBREG           ADDRESSABILITY IN DCB DSECT
         EJECT
***********************************************************************
*    DETERMINE WHETHER FINAL COPY IS TO BE PERFORMED ON EDIT OR SAVE
*    DATA SET
***********************************************************************
         TM    CAEDFLAG,CAEDFNCP       TEST WHETHER FINAL COPY IS TO
*                                      BE PERFORMED ON EDIT DATA SET
         BO    EDITDATA                IF YES,BRANCH TO MOVE EDIT DATA
*                                      SET DDNAME TO DCB              *
         SPACE 2
***********************************************************************
*    INITIALIZE DCB WITH THE APPROPRIATE DDNAME FROM COMMUNICATION
*    AREA HERE
***********************************************************************
         MVC   DCBDDNAM(FC8),CASADDN   MOVE SAVE DATA SET DDNAME FROM
*                                      COMM. AREA TO DCB
         B     NEXT                    BRANCH AROUND MOVE FOR EDIT DATA
*                                      SET DDNAME                     *
EDITDATA MVC   DCBDDNAM(FC8),CAEDDDN   MOVE EDIT DATA SET DDNAME FROM
*                                      COMM. AREA TO DCB
         SPACE 2
***********************************************************************
*    EDIT OR SAVE DATA IS OPENED AND TESTED IF OPEN IS SUCCESSFUL
***********************************************************************
NEXT     MVC   COOPENPL(FCOPENL),FCOPEN
         OPEN  ((DCBREG),(OUTPUT)),MF=(E,COOPENPL)  EXECUTE FORM OF
*                                      OPEN MACRO
         TM    DCBOFLGS,DCBOPEN        CHECK IF DATA SET OPENED
         BNO   MESSAGE1                BRANCH ON NOT OPEN TO MESSAGE1
         EJECT
***********************************************************************
*    IKJEBEUT IS CALLED THROUGH IKJEBESH MACRO TO READ FIRST RECORD OF
*    UTILITY DATA SET
***********************************************************************
         LA    PARMREG1,COOPENPL       GET PARM LIST ADDRESS  @ZA09473
         ST    PARMREG1,CAESDSPL       SAVE IT FOR FINAL COPY @ZA09473
         MVC   COWORD1(FC4),CAPTCDCB   PUT ADDR OF CURRENT UTILITY DCB
*                                      IN THE 3 LOW ORDER BYTES OF
*                                      1ST PARAM WORD
         MVI   COWORD1,FIRST           PUT X'04' IN HIGH ORDER BYTE OF
*                                      1ST PARAM WORD
         XC    COWORD2(FC4),COWORD2       2ND PARAM WORD DOES NOT
*                                         CONTAIN ANY POINTER
         LA    TESTREG,PUTAD
         ST    TESTREG,COWORD3         PUT POINTER TO BUFFER POOL
*                                      WHERE THE RECORD IS TO BE PLACED
*                                      IN 3 LOW ORDER BYTES OF 3RD
*                                      PARAM WORD
         MVI   COWORD3,END             PUT END OF PARAMETER LIST CODE
*                                      IN HIGH ORDER BYTE OF 3RD PARAM
*                                      WORD
         IKJEBESH (COMMREG),IKJEBEUT,MF=(E,A),                 @YM07645*
               PARAM=((COMMREG),COWORD1)                       @YM07645
         LTR   RETCDREG,RETCDREG       TEST RETURN CODE FROM IKJEBEUT
         BZ    CONT1                   BRANCH IF ZERO TO CONT1
         C     RETCDREG,FCDC4          TEST WHETHER R.C.=4
         BE    CLOSE4                  BRANCH TO SET R.C.=4    @YM07645
         B     CLOSE12                FREE BUFFER POOL RC=12  @YM07645
         EJECT
***********************************************************************
*    TERMINATION PROCESSING
***********************************************************************
CLOSE12  EQU   *                                               @YM07645
         LA    TEMPREG,FC12    RC=12                           @YM07645
         B     CLOSED          FREE BUFFER POOL                @YM07645
CLOSE4   EQU   *                                               @YM07645
         LA    TEMPREG,FC4     INDICATE DSN IS EMPTY         @YM07645
         B     CLOSED          FREE BUFFER POOL               @YM07645
CLOSE0  EQU   *                                                @YM07645
        SR    TEMPREG,TEMPREG  INCIDATE OK                     @YM07645
CLOSED   MVC   COOPENPL(FCCLOSEL),FCCLOSE
         CLOSE ((DCBREG)),MF=(E,COOPENPL)  EXECUTE FORM OF CLOSE MACRO
         FREEPOOL IHADCB               RELEASE BUFFER ACQUIRED TO
*                                      SYSTEM
EXIT     LR    RETCDREG,TEMPREG        PUT RET. CODE IN REG. 15
LINKAGE  IKJEBERT (14,12),T,RC=(15)    RELOAD CALLER'S REGISTERS
*                                      EXCEPT REG 15 AND RETURN CONTROL
*                                      TO CALLER
         EJECT
***********************************************************************
*    OPEN EXIT ROUTINE
***********************************************************************
OPENEXIT EQU   *
         ST    RETREG,SAVER14    SAVE REGISTER 14            @YM07645
         TM    CACFLAG5,CAEDLNDP   IS THIS A LINE DROP         @OZ00809
*                                  SITUATION                   @OZ00809
         BZ    NOTLNDP             NO- BYPASS SPECIAL BLOCK    @OZ00809
*                                  SIZE CREATION               @OZ00809
         SPACE 2
***********************************************************************
*    PROCESS THE BLOCK SIZE FOR 'USERID'.EDITSAVE.'QUALIFIER'  @OZ00809
*    DATASET. THIS ROUTINE INSURES THAT THE BLOCKSIZE WILL     @OZ00809
*    FIT ON THE TRACK LENGTH OF DEVICE SUPPORTED               @OZ00809
*    BY TSO EDIT                                               @OZ00809
***********************************************************************
         SPACE 2
FCEDSABK EQU   *                                               @OZ00809
         LH    WORKREG,CABLK2      GET THE EDITED DATASET'S    @OZ00809
*                                  BLOCKSIZE                   @OZ00809
         LH    REG7,CAMAXBLK       GET THE MAX TRACK CAPACITY  @OZ00809
*                                  SUPPORTED ON THIS DEVICE    @OZ00809
         LTR   REG7,REG7           CHECK IF CAMAXBLK USED      @OZ00809
         BZ    NOTLNDP             NO-NO CALCULATION NEEDED    @OZ00809
         CR    WORKREG,REG7        COMPARE THE SIZES           @OZ00809
         BNH   NOTLNDP             CURRENT BLOCKING IS OK      @OZ00809
         LH    TESTREG,CALRECL     GET LRECL OF ORIG DS        @OZ00809
         S     TESTREG,FCDC4       SUBTRACT 4 FOR REAL LRECL   @OZ00809
         SR    WORKREG,WORKREG     CLEAR THE REGISTER          @OZ00809
         DR    WORKREG,TESTREG     GET NO. LRECL'S / BLOCK     @OZ00809
         SR    WORKREG,WORKREG     CLEAR THE REGISTER          @OZ00809
         MR    WORKREG,TESTREG     DETERMINE LARGEST BLOCK     @OZ00809
*                                  CONTAINING INTEGRAL LRECL'S @OZ00809
         STH   REG7,DCBBLKSI       INSERT THE NEW BLOCKSIZE    @OZ00809
         BAL   WORKREG,RECFM       ESTABLISH THE RECFM         @OZ00809
         B     FCEDSAVE            FINISH SETTING UP THE DCB   @OZ00809
NOTLNDP  EQU   *                                               @OZ00809
         TM    CASAFLAG,CASADSOR   CHECK FOR FINAL COPY        @OZ00809
*                                  TO SAVE PDS                 @OZ00809
         BO    PDS                 IF SO, BR TO PROCESS        @OZ00809
         TM    CAEDFLAG,CAEDDISP   YES - IS IT OLD?            @ZA12422
         BNO   ESTRECFM            NO-GO ESTABLISH DEFAULTS    @ZA27583
*                                  YES-CHECK FOR BLKSIZE AND   @ZA27583
*                                  RECFM PRESENT- COULD BE AN  @ZA27583
*                                  ALLOCATED DSN W/O DCB INFO  @ZA27583
         LH    WORKREG,DCBBLKSI    GET BLOCKSIZE FROM DCB      @ZA27583
         LTR   WORKREG,WORKREG     ANY VALUE FOUND?            @ZA27583
         BZ    ESTRECFM            IF NONE GO SET DEFAULTS     @ZA27583
         LH    WORKREG,DCBLRECL    GET LRECL FROM DCB          @ZA27583
         LTR   WORKREG,WORKREG     ANY VALUE FOUND?            @ZA27583
         BZ    ESTRECFM            IF NONE GO SET DEFAULTS     @ZA27583
         B     DCBCOMP             VALUES PRESENT-CONT PROCESS @ZA27583
ESTRECFM EQU   *                                               @ZA12422
         BAL   WORKREG,RECFM           ESTABLISH RECFM           Y01676
         BAL   WORKREG,BLKSIZE         ESTABLISH BLOCKSIZE       Y01676
FCEDSAVE EQU   *                   COMPLETE THE DCB            @OZ00809
         BAL   WORKREG,LRECL           ESTABLISH LRECL           Y01676
DCBCOMP  EQU   *                   DEFAULTING COMPLETE         @ZA12422
         BAL   WORKREG,BUFNO           ESTABLISH NO. OF BUFFERS  Y01676
         BAL   WORKREG,GETPOOL         SET UP BUFFER POOL     @YM07645
         L     RETREG,SAVER14          RESTORE REGISTER 14    @YM07645
         BR    RETREG                  RETURN TO OPEN            Y01676
PDS      EQU   *                                                 Y01676
         TM    DCBRECFM,FIXED+VAR      RECFM ESTABLISHED FOR DS- Y01676
         BM    PDS2                    YES, BYPASS DEFAULTING    Y01676
         BAL   WORKREG,RECFM           NO, ESTABLISH RECFM       Y01676
PDS2     EQU   *                                                 Y01676
         LH    WORKREG,DCBLRECL        OBTAIN LRECL              Y01676
         LTR   WORKREG,WORKREG         TEST LRECL                Y01676
         BNZ   PDS3                    IF SET, BYPASS DEFAULT    Y01676
         BAL   WORKREG,LRECL           ESTABLISH LRECL FOR DS    Y01676
PDS3     EQU   *                                                 Y01676
         LH    WORKREG,DCBBLKSI        OBTAIN BLOCK SIZE         Y01676
         LTR   WORKREG,WORKREG         TEST BLKSIZE              Y01676
         BNZ   PDS4                    IF SET, BYPASS DEFAULT    Y01676
         BAL   WORKREG,BLKSIZEP        ESTABLISH BLKSIZE FOR DS  Y01676
PDS4     EQU   *                                                 Y01676
         BAL   WORKREG,BUFNO           SET NO. OF BFRS. FOR COPY Y01676
         BAL   WORKREG,GETPOOL         SET UP BUFFER POOL      @YM07645
         L     RETREG,SAVER14         RESTORE REGISTER 14    @YM07645
         BR    RETREG                  RETURN TO OPEN            Y01676
         SPACE 2
**************************************************************** Y01676
* THE FOLLOWING SECTION ESTABLISHES THE RECORD FORMAT FOR THE    Y01676
* OUTPUT DATA SET.                                               Y01676
**************************************************************** Y01676
RECFM    EQU   *                                                 Y01676
         TM    CACFLAG2,CARECFM        CHECK FOR EDITING OF      Y01676
*                                      VARIABLE RECORDS          Y01676
         BZ    RECFMVAR                IF SO, BR TO SET RECFM=VB Y01676
         MVI   DCBRECFM,FIXEDBL        IF NOT, ESTABLISH FIXED   Y01676
*                                      BLOCKED RECORD FORMAT     Y01676
         BR    WORKREG                 RETURN TO CALLER          Y01676
RECFMVAR EQU   *                                                 Y01676
         MVI   DCBRECFM,VARBL          SET RECFM= VB             Y01676
         BR    WORKREG                 RETURN TO CALLER          Y01676
         EJECT
**************************************************************** Y01676
* THE FOLLOWING SECTION ESTABLISHES THE BLKSIZE FOR THE OUTPUT   Y01676
* DATA SET.                                                      Y01676
**************************************************************** Y01676
BLKSIZE  EQU   *                                                 Y01676
         LH    PARMREG1,CABLK2         OBTAIN BLOCK SIZE DEFAULT Y01676
         STH   PARMREG1,DCBBLKSI       SET BLKSIZE IN DCB        Y01676
         BR    WORKREG                 RETURN TO CALLER          Y01676
         SPACE 2
**************************************************************** Y01676
*  THE FOLLOWING SECTION ESTABLISHES THE BLKSIZE FOR THE OUTPUT  Y01676
*  DATA SET WHEN DSORG=PO                                        Y01676
**************************************************************** Y01676
BLKSIZEP EQU   *                                                 Y01676
         TM    DCBRECFM,FIXED          CHECK FOR FIXED RECORDS   Y01676
         BO    BLKSIZP1                IF SO BRANCH TO PROCESS   Y01676
         TM    DCBRECFM,VARBL          CHECK FOR RECFM=VB        Y01676
         BO    BLKSIZE                 IF SO, BR TO SET DEFAULT  Y01676
*                                      BLKSIZE                   Y01676
         LH    PARMREG1,DCBLRECL       IF UNBLOCKED, OBTAIN LRECLY01676
         A     PARMREG1,FCDC4          ADD 4 FOR BLOCK CONTROL WDY01676
         STH   PARMREG1,DCBBLKSI       SET DCB BLKSIZE VALUE     Y01676
         BR    WORKREG                 RETURN TO CALLER          Y01676
BLKSIZP1 EQU   *
         TM    DCBRECFM,FIXEDBL        CHECK FOR BLOCKED RECORDS Y01676
         BO    BLKSIZE                 IF BLOCKED, BR TO DEFAULT Y01676
         LH    PARMREG1,DCBLRECL       UNBLOCKED, OBTAIN LRECL   Y01676
         STH   PARMREG1,DCBBLKSI       SET BLKSIZE TO LRECL      Y01676
         BR    WORKREG                 RETURN TO CALLER          Y01676
         SPACE 2
**************************************************************** Y01676
* THE FOLLOWING SECTION ESTABLISHES THE LRECL FOR THE OUTPUT     Y01676
* DATA SET.                                                      Y01676
**************************************************************** Y01676
LRECL    EQU   *                                                 Y01676
         LH    PARMREG1,CALRECL        OBTAIN EDIT LRECL         Y01676
         TM    CACFLAG2,CARECFM        CHECK IF VARIABLE RECORD  Y01676
*                                      EDITING                   Y01676
         BZ    LRECL2                  IF SO, NO ADJUSTMENT REQ. Y01676
         S     PARMREG1,FCDC4          SUBTRACT CONTROL WORD     Y01676
*                                      LENGTH FOR TRUE LRECL     Y01676
LRECL2   EQU   *                                                 Y01676
         STH   PARMREG1,DCBLRECL       SET LRECL IN DCB          Y01676
         BR    WORKREG                 RETURN TO CALLER          Y01676
         EJECT
**************************************************************** Y01676
* THE FOLLOWING SECTION ESTABLISHES THE NO. OF BFRS. FOR THE     Y01676
* COPY OPERATION.                                                Y01676
**************************************************************** Y01676
BUFNO    EQU   *                                                 Y01676
         SR    TEMPREG,TEMPREG                                   Y01676
         IC    TEMPREG,DCBBUFNO        OBTAIN BUFNO VALUE        Y01676
         LTR   TEMPREG,TEMPREG         CHECK FOR ZERO            Y01676
         BNZ   BUFNO1                  IF NOT, BYPASS TENTATIVE  Y01676
*                                      DEFAULT OF BUFNO VALUE    Y01676
         LA    TEMPREG,FC3             TENTATIVE BUFNO VAL. IS 3 Y01676
BUFNO1   EQU   *                                                 Y01676
         SR    PARMREG0,PARMREG0                                 Y01676
         LH    PARMREG1,FCMAXBUF       DIVIDEND IS MAX. BFR.     Y01676
*                                      STORAGE                   Y01676
         LH    RETCDREG,DCBBLKSI       DIVISOR IS BLKSIZE        Y01676
         DR    PARMREG0,RETCDREG       COMPUTE BUFNO VALUE BASED Y01676
*                                      ON MAX. BFR. STORAGE      Y01676
         CR    PARMREG1,TEMPREG                                  Y01676
         BL    BUFNO3                  IF COMPUTED<TENTATIVE,    Y01676
*                                      USE TENTATIVE VALUE       Y01676
         CH    PARMREG1,FCMBUFNO       CHECK FOR BUFNO<10        Y01676
         BL    BUFNO2                  IF SO, BR TO USE COMPUTED Y01676
*                                      VALUE                     Y01676
         MVC   DCBBUFNO,FCMBUFNO+FC1   SPECIFY 10 BUFFERS USED   Y01676
         BR    WORKREG                 RETURN TO CALLER          Y01676
BUFNO2   STC   PARMREG1,DCBBUFNO       STORE COMPUTED VALUE IN   Y01676
*                                      DCB.                      Y01676
         BR    WORKREG                 RETURN TO CALLER          Y01676
BUFNO3   LA    PARMREG1,FC3            OBTAIN MIN. BUFNO VALUE   Y01676
         CR    PARMREG1,TEMPREG        CHECK IF MIN. > TENTATIVE Y01676
         BH    BUFNO2                  IF SO, BRANCH TO USE MIN. Y01676
         STC   TEMPREG,DCBBUFNO        STORE DEFAULT (OR         Y01676
*                                      OR ORIGINAL) BUFNO IN DCB Y01676
         BR    WORKREG                 RETURN TO CALLER          Y01676
         EJECT
***                                                            @YM07645
*  GET A POOL OF BUFFERS AND BUILD BUFFER PTR & DECB QTR LISTS @YM07645
***                                                            @YM07645
GETPOOL  EQU   *                                               @YM07645
         SR    PARMREG0,PARMREG0       ZERO OUT REG 0          @YM07645
         ICM   PARMREG0,FC4,DCBBUFNO  REG0=X'00NN0000'        @YM07645
         ICM   PARMREG0,FC3,DCBBLKSI  REG0=X'00NNMMMM'        @YM07645
         GETPOOL IHADCB,(0)                                    @YM07645
*                                                              @YM07645
         LA    TESTREG,DECBS-WRTLEN    JUST BEFORE DECBLIST    @YM07645
         SR    ELEMENT,ELEMENT         START OF LISTS          @YM07645
*                                                              @YM07645
GETBUF   EQU   *                                               @YM07645
         GETBUF IHADCB,(ADDREG)                                @YM07645
         LTR   ADDREG,ADDREG           IS THERE A BUFFER ADDR  @YM07645
         BZ    ENDGBUF                 0 = NO MORE BUFFERS     @YM07645
         ST    ADDREG,BFRPTRS(ELEMENT) PUT ADDR IN BUFFER LIST @YM07645
         LA    TESTREG,WRTLEN(TESTREG) NEXT ADDR FOR L-FORM    @YM07645
         ST    TESTREG,DECBPTRS(ELEMENT) PUT ADDR IN DECB LIST @YM07645
         MVC   FC0(WRTLEN,TESTREG),WRITEL MOVE WRITE LIST FORM @YM07645
         LA    ELEMENT,FC4(,ELEMENT)   INCREMENT TO NEXT ELEM  @YM07645
         B     GETBUF                  GET ANOTHER BUFFER      @YM07645
*                                                              @YM07645
ENDGBUF  EQU   *                                               @YM07645
         ST     ADDREG,BFRPTRS(ELEMENT) ZERO IS END OF LIST    @YM07645
         ST     ADDREG,DECBPTRS(ELEMENT) ZERO IS END OF LIST   @YM07645
*                                                              @YM07645
         BR    WORKREG                 RETURN TO OPEN EXIT     @YM07645
         EJECT
***********************************************************************
*    MSG1- 'DATA SET (EDIT OR SAVE DSNAME) NOT USABLE+.  OPEN ERROR'
*    IS ISSUED HERE
***********************************************************************
MESSAGE1 OI    SW,MESS1                TURN MESSAGE1 SWITCH ON
M13      TM    CAEDFLAG,CAEDFNCP       TEST WHETHER IT IS EDIT DATA SET
*                                      OR SAVE DATA SET
         BO    EDSN1                   EDIT DATA SET THEN GO TO EDSN1
         SR    TESTREG,TESTREG         CLEAR TESTREG
         ST    TESTREG,CADSNPT2        SET CADSNPT2 TO ZERO
         LA    TESTREG,M309IN1
         STH   TESTREG,CADSNOF2        SET OFFSET VALUE IN CADSNOF2
         TM    SW,MESS1                TEST WHETHER MESSAGE1 IS ISSUED
         BO    COMBINE2                BRANCH IF ON TO COMBINE2
         B     COMBINE3                BRANCH TO COMBINE3 IF MESSAGE2
*                                      IS ISSUED
EDSN1    SR    TESTREG,TESTREG         CLEAR TESTREG
         ST    TESTREG,CADSNPTR        SET CADSNPTR TO ZERO
         LA    TESTREG,M309IN1
         STH   TESTREG,CADSNOFF        SET OFFSET VALUE IN CADSNOFF
         TM    SW,MESS1                TEST WHETHER MESSAGE1 IS ISSUED
         BO    COMBINE4                BRANCH TO COMBINE4 IF MESSAGE1
*                                      IS ISSUED
         B     COMBINE3                BRANCH TO COMBINE3 IF MESSAGE3
*                                      IS ISSUED
COMBINE2 MVC   B(FC12),INLIST1
ISSUE1   IKJEBEML M309,M3093,CADSNPT2,MF=(E,B)
COMBINE6 NI    SW,ALL-MESS1            TURN MESSAGE1 SWITCH OFF
         LA    TEMPREG,FC8             SET RETURN CODE TO 8
         B     EXIT                    BRANCH TO RETURN TO CALLING
*                                      ROUTINE
COMBINE4 MVC   B(FC12),INLIST1
ISSUE2   IKJEBEML M309,M3093,CADSNPTR,MF=(E,B)
         B     COMBINE6                BRANCH UNCOND. TO COMBINE6
         EJECT
***********************************************************************
*    EACH LINE IS FORMATTED FOR OUTPUT TO THE BSAM DATA SET AND
*    WRITTEN OUT
***********************************************************************
CONT1    EQU   *                                               @YM07645
         SR    ELEMENT,ELEMENT         FIRST BUFER AND DECB    @YM07645
         L     TEMPREG,BFRPTRS(ELEMENT)  GET BUFFER ADDR       @YM07645
         LR    PARMREG0,TEMPREG        THE BEGINNING OF BFR    @YM07645
         AH    PARMREG0,DCBBLKSI       THE END OF BUFFER       @YM07645
         ST    PARMREG0,BUFEND         SAVE END OF BFR         @YM07645
         TM    DCBRECFM,FIXED          TEST WHETHER BSAM DATA  @YM07645
*                                      SET IS FIXED OR VARIABLE@YM07645
         BO    FX                      BRANCH AROUND IF FIXED
VR       LA    ADDREG,PUTAD            FORMAT REC. FOR BSAM VAR.
*                                      DATA SET
         A     ADDREG,FCDC4            PUT ADDR FOR PUT MACRO IN ADDREG
         LA    TEMPREG,FC4(,TEMPREG)   MAKE ROOM FOR BDW       @YM07645
         B     ADDREC                  SKIP RECFM=F CODE       @YM07645
*                                                              @YM07645
FX       EQU   *                       FORMAT RECORD FOR ..    @YM07645
         LA    ADDREG,PUTAD            ..BSAM FIXED DSN        @YM07645
         A     ADDREG,FCDC8            NO X'LL00' FIELD NEEDED @YM07645
         EJECT
***************************************************************@YM07645
*    ADD A RECORD TO THE BUFFER. BEFORE CALLING EUT FOR        @YM07645
*    ANOTHER RECORD SEE IF THERE IS ROOM IN THE BUFFER FOR     @YM07645
*    ANOTHER RECORD. IF THERE IS NO ROOM THEN THE BUFFER IS    @YM07645
*    FULL SO GO SET THE BLOCK DESCRIPTOR WORD. IF THERE IS     @YM07645
*    ROOM FOR ANOTHER RECORD GET IT AND ADD IT TO THE BUFFER   @YM07645
***************************************************************@YM07645
ADDREC   EQU   *                                               @YM07645
         MVC   COKEYA(FC4),PUTAD       SAVE KEY OF LINE READ  @YM07645
         LH    PARMREG1,PUTAD+FC4      VAR LRECL=LL IN REC    @YM07645
         TM    DCBRECFM,VAR           IF VARIABLE FORMAT      @YM07645
         BO    TESTEND                THEN R1 ALREAD = LRECL  @YM07645
         LH    PARMREG1,DCBLRECL       GET RECORD LENGTH       @YM07645
TESTEND  EQU   *                                              @YM07645
         LA    PARMREG0,FC0(PARMREG1,TEMPREG) CALC END OF REC @YM07645
         C     PARMREG0,BUFEND      THIS REC PAST END OF BUF  @YM07645
         BH    SETBDW               PAST END,SET BLOCK...     @YM07645
*                       .....DESCRIPTOR WORD                  @YM07645
         BCTR  PARMREG1,0           LRECL=LRECL-ONE           @YM07645
         EX    PARMREG1,MOVEREC  MOVE FROM PUTAD TO BUFFER    @YM07645
*                                                             @YM07645
         LA    TEMPREG,FC1(PARMREG1,TEMPREG) NEXT POSITION    @YM07645
*                                            IN BUFFER        @YM07645
CALLEUT  EQU   *                                               @YM07645
         MVI   COWORD1,AFTER           PUT X'02' IN HIGH ORDER @YM07645
*                                      BYTE OF 1ST PARAM. WORD @YM07645
         LA    TESTREG,COKEYA          PUT POINTER TO KEY OF   @YM07645
*                                      LAST LINE REFERENCED    @YM07645
*                                      IN 2ND PARAM WORD       @YM07645
         ST    TESTREG,COWORD2                                 @YM07645
         IKJEBESH (COMMREG),IKJEBEUT,MF=(E,A),                 @YM07645*
               PARAM=((COMMREG),COWORD1)                       @YM07645
         LTR   RETCDREG,RETCDREG       TEST FOR ZERO           @YM07645
         BZ    ADDREC                  0 = ADD REC TO BUF      @YM07645
*                                                              @YM07645
         C     RETCDREG,FCDC4          TEST FOR EOF            @YM07645
         BNE   CLOSE12                 FREE BUFFER POOL RC=12  @YM07645
*                                                              @YM07645
         OI    FCSWITCH,FCEOF          INDICATE EOF            @YM07645
*                                                              @YM07645
         L     PARMREG0,BFRPTRS(ELEMENT)  START OF BUFFER      @YM07645
         LR    PARMREG1,TEMPREG        SAVE END OF BUFFER      @YM07645
         SR    PARMREG1,PARMREG0       CALC BUFFER LEN         @YM07645
         STH   PARMREG1,DCBBLKSI       SET NEW BLOCK SIZE      @YM07645
*                                                              @YM07645
         EJECT                                                 @YM07645
***************************************************************@YM07645
*    IF RECFM IS VARIABLE THEN SET THE BLOCK DESCRIPTOR WORD.  @YM07645
*    SET THE HIGH ORDER BIT IN THE DECB TO 1 TO INDICATE THAT  @YM07645
*    IT IS BEING USED BY A WRITE AND THEN WRITE THE BUFFER.    @YM07645
*    FOR END OF FILE WE WANT TO CHECK ALL DECBS THAT ARE BEING @YM07645
*    USED. ON OUR FIRST PATH THRU FILLING UP OUR BUFFERS WE    @YM07645
*    JUST FILL ONE THEN WRITE IT, FILL THE NEXT THEN WRITE IT. @YM07645
*    AFTER ALL THE BUFFERS HAVE BEEN FILLED ONCE THEN WE CHECK @YM07645
*    A DECB FOR AN ASSOCIATED BUFFER TO INSURE THAT THE I/O IS @YM07645
*    COMPLETE BEFORE WE USE THAT BUFFER. (SEE LABEL DECBCHK).  @YM07645
***************************************************************@YM07645
SETBDW   EQU   *                                               @YM07645
         TM    DCBRECFM,FIXED          IS IT FIXED DSN         @YM07645
         BO    WRTBUF                  IF FIXED, WRITE BUF     @YM07645
*                                                              @YM07645
         L     PARMREG1,BFRPTRS(ELEMENT)  GET BUFFER ADDRESS   @YM07645
         SR    TEMPREG,PARMREG1          CALCULATE LENGTH      @YM07645
         SLL   TEMPREG,FC16               SHIFT TO LEFT        @YM07645
         ST    TEMPREG,FC0(PARMREG1)      STORE X'LL00'        @YM07645
*                                                              @YM07645
WRTBUF   EQU   *                                               @YM07645
         LA    PARMREG1,DECBPTRS(ELEMENT) ADDR OF DECB PTR     @YM07645
         OI    FC0(PARMREG1),DECBUSE      DECB BEING USED      @YM07645
         L     PARMREG1,FC0(PARMREG1)     ADDR OF DECB         @YM07645
         XC    FC0(FC4,PARMREG1),FC0(PARMREG1) CLEAR DECB      @ZA05967
         L     PARMREG0,BFRPTRS(ELEMENT)  BUFFER ADDR          @YM07645
         WRITE (PARMREG1),SF,IHADCB,(PARMREG0),MF=E            @YM07645
     EJECT
***************************************************************@YM07645
*    AFTER HAVING WRITTEN OUT A BUFFER, IF END OF FILE WAS     @YM07645
*    ENCOUNTERED THEN ALL WE HAVE TO DO IS CHECK EACH DECB TO  @YM07645
*    INSURE THAT THE ASSOCIATED WRITE IS COMPLETE.             @YM07645
*    FOR NON EOF GET NEXT BUFFER POINTER. IF THE POINTER IS    @YM07645
*    ZERO THEN START AT TOP OF DECBPTR LIST TO CHECK FOR WRITE @YM07645
*    COMPLETION SO WE CAN REUSE A BUFFER.                      @YM07645
*    IF WE HAVE ANOTHER BUFFER IN THE LIST AND WE WANT TO CHECK@YM07645
*    IT BEFORE WE FILL IT THEN GO CHECK THE DECB. IF NO NEED   @YM07645
*    TO CHECK BECAUSE WE HAVEN'T FILLED IT BEFORE THEN GET     @YM07645
*    BEGINNING AND END OF BUFFER AND FILL IT UP.               @YM07645
***************************************************************@YM07645
*                                                              @YM07645
         LR    LASTINDX,ELEMENT        SAVE INDEX TO LAST DECB @ZA05967
         LA    ELEMENT,FC4(ELEMENT)    INCR TO NEXT PTR        @ZA05967
*                                                              @YM07645
*                                                              @YM07645
         L     TESTREG,BFRPTRS(ELEMENT)  GET NEXT BFR ADDR     @YM07645
         LTR   TESTREG,TESTREG           IS BFR PTR ZERO       @YM07645
         BZ    SETINDEX                  YES, GO TO SETINDEX   @YM07645
*                                                              @YM07645
         TM    FCSWITCH,FCEOF          EOF FROM INPUT DATASET  @ZA05967
         BO    DECBCHK                 CHECK ALL DECB'S        @ZA05967
*                                                              @ZA05967
         TM    FCSWITCH,FCWRTCHK       WANT CHECK AFTER WRITE  @YM07645
         BO    DECBCHK                 YES-CHECK DECB          @YM07645
*                                                              @YM07645
BUFADDR  EQU   *                                               @YM07645
         L     TEMPREG,BFRPTRS(ELEMENT)  GET BUFFER ADDR       @YM07645
         LR    PARMREG0,TEMPREG        THE BEGINNING OF BFR    @YM07645
         AH    PARMREG0,DCBBLKSI       THE END OF BUFFER       @YM07645
         ST    PARMREG0,BUFEND         SAVE END OF BFR         @YM07645
         TM    DCBRECFM,FIXED          IS IT FIXED DSN         @YM07645
         BO    ADDREC                  READ A RECORD           @YM07645
         LA    TEMPREG,FC4(,TEMPREG)   MAKE ROOM FOR BDW       @YM07645
         B     ADDREC                  GET REC1 FOR            @YM07645
*                                            BUFFER(ELEMENT)   @YM07645
         EJECT                                                 @YM07645
***************************************************************@YM07645
*    ONCE WE REACH THIS POINT WE HAVE FILLED ALL THE BUFFERS   @YM07645
*    ONCE AND NOW HAVE TO START CHECKING THEIR ASSOCIATE DECBS @YM07645
*    TO INSURE THAT THE BUFFER HAS BEEN WRITTEN OUT. NOW WE    @YM07645
*    START THE SEQUENCE OF CHECK BUFFER(N), FILL BUFFER(N),    @YM07645
*    WRITE BUFFER(N), CHECK BUFFER(N+1) ETC.                   @YM07645
*    WE ALSO COME HERE AT EOF BECAUSE WE WANT TO CHECK ALL     @YM07645
*    OUTSTANDING WRITES AND MAKE SURE THEY ARE COMPLETE BEFORE @YM06745
*    WE FREE UP THE BUFFER POOL AND CLOSE OUR OUTPUT DATASET   @YM07645
***************************************************************@YM07645
SETINDEX EQU   *                                               @YM07645
         SR    ELEMENT,ELEMENT         FIRST BUF AND DECB      @YM07645
*                                                              @YM07645
DECBCHK  EQU   *                                               @YM07645
         OI    FCSWITCH,FCWRTCHK       WANT CHECK AFTER WRITE  @YM07645
*                                                              @YM07645
         LA    PARMREG1,DECBPTRS(ELEMENT) ADDR OF DECB PTR     @YM07645
         TM    FC0(PARMREG1),DECBUSE   IS DECB BEING USED     @YM07645
         BZ    INCRELEM                   NOT USED,GET...      @YM07645
*                                             NEW DECB         @YM07645
         NI    FC0(PARMREG1),ALL-DECBUSE  DECB NOT BEING USED  @YM07645
         L     PARMREG1,FC0(PARMREG1)     ADDR OF DECB         @YM07645
         CHECK (PARMREG1)                 CHECK DECB           @YM07645
*                                                              @YM07645
         TM    FCSWITCH,FCEOF            TEST FOR EOF FROM EUT @YM07645
         BZ    BUFADDR                 FILL ANOTHER BUFFER     @YM07645
*                                                              @YM07645
INCRELEM EQU   *                                               @YM07645
         CR    ELEMENT,LASTINDX        ALL DECB'S CHECKED?     @ZA05967
         BE    CLOSE0                  FREE BUFFER POOL RC=0   @ZA05967
         LA    ELEMENT,FC4(ELEMENT)    UPDATE INDEX TO NEXT    @ZA05967
         L     TESTREG,DECBPTRS(ELEMENT)  DECB,SEE IF LAST     @ZA05967
         LTR   TESTREG,TESTREG         IF ZERO START AT TOP    @ZA05967
         BZ    SETINDEX                RESUME CHECKING AT TOP  @ZA05967
         B     DECBCHK                 CHECK NEXT DECB         @ZA05967
         EJECT                                                 @YM07645
***********************************************************************
*    SYNAD EXIT ROUTINE
***********************************************************************
FCSYNAD  SYNADAF ACSMETH=BSAM          DIAGNOSE I/O ERROR
         LA    TESTREG,M3092IN1
         STH   TESTREG,OFFSET2         PUT OFFSET VALUE IN OFFSET2
         B     M13                     BRANCH UNCOND. TO M13
COMBINE3 XC    COBUILD2(FC4),COBUILD2  PUT 0 IN PTR FIELD OF COBUILD2
         MVC   COBUILD2+FC4(FC2),FCDC82  PUT (LENGTH OF SYNADAF
*                                      MESSAGE) +4 IN 5TH & 6TH BYTES
*                                      COBUILD2
         MVC   COBUILD2+FC6(FC2),OFFSET2  PUT OFFSET IN 7TH & 8TH BYTES
*                                      OF COBUILD2
         MVC   COBUILD2+FC8(FC78),FC50(PARMREG1)  PUT SYNAD MESSAGE
*                                      IN COBUILD2
         SPACE 2
***********************************************************************
*    SYNADRLS MACRO IS ISSUED TO RELEASE THE BUFFER TO THE SYSTEM
***********************************************************************
         SYNADRLS
         TM    CAEDFLAG,CAEDFNCP       TEST WHETHER FINAL COPY IS TO
*                                      BE PERFORMED ON EDIT DATA SET
*                                      OR SAVE DATA SET
         BO    EDSN2                   EDIT DATA SET THEN GO TO EDSN2
***********************************************************************
*    MSG2- 'DATA SET (SAVE DSNAME) NOT USABLE+.  I/O SYNAD ERROR
*    (SYNADINFO)' IS ISSUED HERE
***********************************************************************
         MVC   B(FC12),INLIST3
ISSUE3   IKJEBEML M309,M3092,CADSNPT2,COBUILD2,MF=(E,B)
COMBINE7 LA    TEMPREG,FC8             SET R.C.=8
         B     CLOSED                  BRANCH TO CLOSE BSAM DATA SET
EDSN2    EQU   *
         SPACE 2
***********************************************************************
*    MESSAGE3- 'DATA SET (EDIT DSNAME) NOT USABLE+.  I/O SYNAD ERROR
*    (SYNADINFO) ' IS ISSUED HERE
***********************************************************************
         MVC   B(FC12),INLIST3
ISSUE4   IKJEBEML M309,M3092,CADSNPTR,COBUILD2,MF=(E,B)
         B     COMBINE7                BRANCH UNCOND. TO COMBINE7
         SPACE 3
***********************************************************************
*    CONSTANT AREA FOR IKJEBEFC
***********************************************************************
FCDC4    DC    F'4'                    FULWORD OF 4
FCDC8    DC    F'8'                    FULLWORD OF 8
FCEXLST  DC    X'85'                   HEX 85
         DC    AL3(OPENEXIT)           ADDR OF OPEN EXIT ROUTINE
FCDC82   DC    H'82'                   HALFWORD OF 82
FCMAXBUF DC    H'10240'                MAXIMUM BUFFER STORAGE    Y01676
*                                      BY THIS ROUTINE           Y01676
FCMBUFNO DC    H'&MAXBFRS'             MAXIMUM BUFNO VALUE     @YM07645
*                                      BY THIS ROUTINE           Y01676
MOVEREC  MVC   FC0(FC0,TEMPREG),FC0(ADDREG)  MOVE RECRD TO BUF @YM07645
*
INLIST1  IKJEBEML M309,M3091,,MF=L
INLIST3  IKJEBEML M309,M3092,,,MF=L
FCDCB    DCB   DSORG=PS,MACRF=W,SYNAD=FCSYNAD,EXLST=FCEXLST,   @YM07645*
               NCP=&MAXBFRS                                   @YM07645
         WRITE WRITEL,SF,MF=L                                  @YM07645
WRTLEN   EQU   *-WRITEL                LENGTH OF LIST FORM     @YM07645
FCDCBEND EQU   *
FCDCBL   EQU   FCDCBEND-FCDCB
FCOPEN   OPEN  (,(OUTPUT)),MF=L        LIST FORM OF OPEN MACRO
OPENEND  EQU   *
FCOPENL  EQU   OPENEND-FCOPEN
FCCLOSE  CLOSE (,),MF=L
CLOSEND  EQU   *
FCCLOSEL EQU   CLOSEND-FCCLOSE
         DCBD  DSORG=PS,DEVD=DA
         SPACE 2
         IKJEBECA
         ORG   CASRWKA                 ORG FOR CA'S SERVICE WORK AREA
COOPENPL DS    F                       ********************************
COWORD1  DS    F                       *     SERVICE                  *
COWORD2  DS    F                       *      ROUTINE                 *
COWORD3  DS    F                       *       WORK                   *
A        DS    5F                      *        AREA                  *
COKEYA   DS    F                       *         FOR ECA              *
COBUILD2 DS    22F                     ********************************
OFFSET2  DS    H                       1ST INSERTION FOR 2ND 2ND-
*                                      LEVEL OF MSG2 AND MSG3
SW       DS    X                       MESSAGE1 SWITCH
         ORG   CATEMPBF                *  ORG  FOR THE TEMPORARY      *
B        DS    10F           USED FOR MESSAGE SENDING         @YM07645
         ORG   CATEMPBF                                       @YM07645
PUTAD    DS    66F                     *  BUFFER POOL                 *
COFCDCB  DS    24F                     *  AVAILABLE                   *
DECBS    DS    0F                      FORCE FULL WORD BDY     @YM07645
         DS    (&MAXBFRS.*WRTLEN)C     RESERVE DECB SPACE      @YM07645
&MAXBFRS SETA  &MAXBFRS+1              1 EXTRA POINTER         @YM07645
DECBPTRS DS    &MAXBFRS.F              N+1 DECB PTRS           @YM07645
BFRPTRS  DS    &MAXBFRS.F              N+1 BUFFER POINTERS     @YM07645
FCSWITCH DS    X                       FC SWITCHS              @YM07645
FCEOF    EQU   X'80'                   1 = END OF FILE IN EUT  @YM07645
DECBUSE  EQU   X'80'                   1 = DECB BEING USED     @YM07645
FCWRTCHK EQU   X'10'                   1 = CHECK AFTER A WRITE @YM07645
BUFEND   DS    F                       END OF BUFFER           @YM07645
SAVER14  DS    F          SAVE ARE FOR REG 14 IN              @YM07645
*                         OPEN EXIT                           @YM07645
         NOPR  ((*-CATEMPBF)/529*16)                          @YM07645
         END
