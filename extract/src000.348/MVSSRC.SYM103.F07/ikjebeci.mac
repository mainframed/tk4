BECI     TITLE 'EDIT COMMAND - COMMAND INVOKER - IKJEBECI'
***********************************************************************
* MODULE NAME -- IKJEBECI                                            *
*                                                                    *
* DESCRIPTIVE NAME -- EDIT COMMAND INVOKER                           *
*                                                                    *
* COPYRIGHT -- N/A                                                   *
*                                                                    *
* CHANGE ACTIVITY -- SEE INFORMATION PRECEDING PROLOGUE              *
*                                                                     *
* STATUS -- VERSION NO. 02, VS2 RELEASE 3                             *
*                                                                     *
* FUNCTION -- THIS ROUTINE INVOKES COMMAND PROCESSORS FOR THE EDIT    *
*    SUBCOMMANDS- FORMAT, MERGE, RUN, ALLOCATE, PROFILE, SEND,        *
*    SUBMIT, EXEC, AND HELP. THE APPROPRIATE CP IS ATTACHED BY        *
*    IKJEBECI.                                                        *
*                                                                     *
* ENTRY POINTS --                                                     *
*         IKJEBECI - MAIN ENTRY POINT                                 *
*         STAIEXIT - STAI EXIT ROUTINE                                *
*         STAEEXIT - STAE EXIT ROUTINE                                *
*         STAERTRY - STAE RETRY ROUTINE                               *
*                                                                     *
* INPUT -- REGISTER 1 CONTAINS A POINTER TO A PARAMETER LIST WHICH    *
*    CONTAINS IN WORD ONE A POINTER TO THE COMMUNICATION AREA, AND IN *
*    WORD TWO A POINTER TO A COMMAND BUFFER.                          *
*                                                                     *
* OUTPUT -- RETURN CODE IN REGISTER 15.                               *
*    0 -- SUCCESSFUL COMPLETION                                       *
*    8 -- UNSUCCESSFUL COMPLETION                                     *
*                                                                     *
* EXTERNAL REFERENCES --                                              *
*         IKJEBEMS    - MESSAGES TO USER                              *
*         IKJPTGT     - READ IN-CORE COMMANDS                         *
*         IKJSTCK     - UNSTACK IN-CORE SOURCE OF INPUT               *
*         IKJDAIR     - CLEAN-UP OF DSE                               *
*         IKJSCAN     - SCAN COMMAND NAME                             *
*         MACROS USED -                                               *
*         GETMAIN     OBTAIN STACK AND LSD AREAS                      *
*         FREEMAIN    - FREE SUBPOOL 1 AND 78 CORE                    *
*         ATTACH      - ATTACH COMMAND PROCESSORS                     *
*         STAE        - ABNORMAL END EXIT                             *
*         LINK        CALL IKJSCAN                                    *
*         WAIT        WAIT ON SUBTASK COMPLETION OR ATTENTION         *
*         STATUS      - MAKE SUBTASKS NON-DISPATCHABLE                *
*         TCLEARQ     - CLEAR INPUT QUEUE                             *
*         CALLTSSR    - INVOKE IKJSCAN                        @Y30NQKK*
*                                                                     *
* EXITS, NORMAL -- THIS PROGRAM EXITS NORMALLY WITH A RETURN CODE OF  *
*    0 IN REGISTER 15.                                                *
*                                                                     *
* EXITS, ERROR -- THIS PROGRAM EXITS WITH A RETURN CODE OF 4 IN       *
*    REGISTER 15 FOR MERGE OR GOFORT ONLY.                            *
*                                                                     *
* TABLES/WORK AREAS --                                                *
*    IKJEBECA - EDIT COMMUNICATION AREA                               *
*    ABENDTAB - TRANSLATE TABLE FOR ABEND CODE                        *
*    CIRCTAB  - PRINTABLE CHARACTER RETURN CODES                      *
*                                                                     *
* ATTRIBUTES -- REFRESHABLE, ENABLED, NON-PRIVILEGED                  *
*                                                                     *
* CHARACTER CODE DEPENDENCY -- NONE                                   *
*                                                                     *
* NOTES -- STANDARD CONVENTIONS EXCEPT IN STAI EXIT WHERE ADDRESS-    *
*    ABILITY BASED ON REGISTER 15, NO SAVE AREAS AVAILABLE, AND ONLY  *
*    REGISTERS 0, 1, 14, 15 PREDICTABLE.                              *
***********************************************************************
         EJECT
IKJEBECI CSECT
*C907000                                                       @ZA28013
*A143100-143600                                                  A42942
*D685000-687000                                                  A45716
*D142000                                                         A45112
*C363000                                                         A50463
*A489500-490000                                                  A50473
*C489000                                                         A50473
*D478000-488000                                                  A50473
*A585100,625500,745100-745960                                   YA00037
*D585000-591000                                                 YA00037
*A155500-156500,169000,232050-232350,850500-851600,866300      @Y30NQKK
*A922600-925600                                                @Y30NQKK
***********************************************************************
*                                                                     *
*                          REGISTER EQUATES                           *
*                                                                     *
***********************************************************************
         SPACE 2
PARMREG0 EQU   0                  REGISTERS 0 AND 1 USED TO PASS
PARMREG1 EQU   1                  PARAMETERS
WORKREG1 EQU   2                  REGISTER 2 USED AS WORK REG
WORKREG2 EQU   3                  REGISTER 3 USED AS WORK REG
DSECTREG EQU   4                  BASE REGISTER FOR MAPPING DSECTS
MSGREG   EQU   6                  BASE REGISTER FOR MESSAGE CSECT
COMMREG  EQU   9                  BASE REGISTER FOR IKJEBECA DSECT
DATAREG  EQU   12                 WORK REGISTER
BASEREG  EQU   11                 BASE REGISTER FOR PROGRAM
SAVEREG  EQU   13                 ADDRESS OF SAVE AREA
RETREG   EQU   14                 ADDRESS OF RETURN POINT OF CALLER
RETCDREG EQU   15                 BRANCH AND RETURN CODE REGISTER
ENTRY    EQU   15                 ADDRESS OF ENTRY POINTS
         EJECT
***********************************************************************
*                                                                     *
*                           SPECIAL EQUATES                           *
*                                                                     *
***********************************************************************
         SPACE 2
ALLBITS  EQU   X'FF'              BIT MASK
HIORDBIT EQU   X'80'              BIT MASK
OPERANDS EQU   X'80'              OPERANDS PRESENT IN CMD BUF  @VS07290
COMPLETE EQU   X'40'              ECB COMPLETE BIT - WAIT POSTED IF ON
ZONEBITS EQU   X'0F'              EBCDIC CHARACTER ZONE BITS
CLEANDSE EQU   X'2C'              ENTRY CODE TO IKJDAIR
RETCD8   EQU   8                  UNSUCCESSFUL RC
BITS20   EQU   20                 SHIFT OF 20 BITS
BITS16   EQU   16                 SHIFT OF 16 BITS
BITS12   EQU   12                 SHIFT OF 12 BITS
BITS4    EQU   4                  SHIFT OF 4 BITS
OFFSET0  EQU   0                  DISPLACEMENT OF 0
OFFSET1  EQU   1                  DISPLACEMENT OF 1
OFFSET2  EQU   2                  DISPLACEMENT OF 2
OFFSET3  EQU   3                  DISPLACEMENT OF 3
OFFSET4  EQU   4                  DISPLACEMENT OF 4
OFFSET5  EQU   5                  DISPLACEMENT OF 5
OFFSET6  EQU   6                  DISPLACEMENT OF 6
OFFSET7  EQU   7                  DISPLACEMENT OF 7
OFFSET12 EQU   12                 DISPLACEMENT OF 12
LEN1     EQU   1                  LENGTH OF 1
LEN2     EQU   2                  LENGTH OF 2
LEN3     EQU   3                  LENGTH OF 3
LEN4     EQU   4                  LENGTH OF 4
LEN6     EQU   6                  LENGTH OF 6
LEN7     EQU   7                  LENGTH OF 7
LEN8     EQU   8                  LENGTH OF 8
STAICODE EQU   16                 RETURN CODE FROM STAI EXIT
STAECODE EQU   4                  RETURN CODE FROM STAE EXIT
CCX3E    EQU   X'3E'              DETACH ABEND CODE
SP01     EQU   1                  SUBPOOL NUMBER
SP78     EQU   78                 SUBPOOL NUMBER
CHAR0    EQU   C'0'               EBCDIC CHARACTER ZERO
BLANK    EQU   C' '               EBCDIC CHARACTER BLANK
CIOPCD   EQU   X'02'              OPTION CODE FOR DAIR 2C
K48      EQU   48                 BYTE LENGTH OF MSG PARMLIST
         EJECT
***********************************************************************
*                                                                     *
*                      EXECUTABLE CODE                                *
*                                                                     *
***********************************************************************
         SPACE 2
* SAVE CALLER'S REGISTERS, ESTABLISH PROGRAM ADDRESSIBILITY,
*     AND CHAIN SAVE AREA POINTERS
         IKJEBESV (14,12),,*,COMMREG=OFFSET0(PARMREG1)
*                                 ESTABLISH ADDRESSIBILITY
         USING IKJEBECA,COMMREG   TO COMMUNICATION AREA DSECT
         MVC   CICMDBFR(LEN4),OFFSET4(PARMREG1) SAVE PTR TO COMMAND BUF
         XC    CIRETCD,CIRETCD    INIT RETURN CODE TO ZERO
         NI    FREEBIT,ALLBITS-HIORDBIT INIT FREEMAIN SWITCH OFF
         MVC   CMDBUFF+OFFSET1(LEN3),CICMDBFR+OFFSET1 PTR TO COMMAND
         EJECT
***********************************************************************
*                                                                     *
*        BUILD ECB LIST FOR WAIT ON ATTACH WITH STAI AND ATTENTION    *
*                                                                     *
***********************************************************************
         SPACE 2
         LA    WORKREG1,CAATTN    INIT ADDRESS OF ATTENTION
         ST    WORKREG1,CIECBATT  ECB IN ECB LIST
         LA    WORKREG1,CINORECB  INIT ADDRESS OF NORMAL RETURN
         ST    WORKREG1,CIECBNOR  ECB IN ECB LIST
         OI    CIECBNOR,HIORDBIT  SET BIT TO MARK END OF ECB LIST
         SPACE 2
         L     DSECTREG,CAPTECT   ADDRESS OF ECT                 A42942
         USING ECT,DSECTREG       ADDRESSABILITY                 A42942
         XC    ECTRTCD,ECTRTCD    ZERO ECT RETURN CODE FIELD     A42942
         NI    ECTRCDF,ALLBITS-HIORDBIT  ZERO ABEND OCCURRED BIT A42942
         NI    SAVEBIT,ALLBITS-HIORDBIT INIT SWITCH FOR REG SAVE
         NI    ABENDBIT,ALLBITS-HIORDBIT INIT CP ABEND SWITCH OFF
         NI    STAEBIT,ALLBITS-HIORDBIT INIT STAE IN EFFECT SWITCH OFF
         XC    MSGPLIST(K48),MSGPLIST ZERO MESSAGE PARMLIST
         L     MSGREG,CIMSGADR    ADDR OF MESSAGE CSECT
         USING IKJEBCIM,MSGREG    ESTABLISH ADDRESSABILITY
         EJECT
***********************************************************************
*                                                                     *
*        ISSUE  STAE MACRO TO INTERCEPT  X3E ABENDS CAUSED BY         *
*        DETACHING A SUBTASK THAT HAS NOT COMPLETED AND AN ATTENTION  *
*        HAS BEEN ISSUED                                              *
*                                                                     *
***********************************************************************
         SPACE 2
         MVC   STAELIST(STAELEN),STAELFM MOVE LIST FORM TO PARMLIST
         STM   COMMREG,SAVEREG,REGSAVE SAVE REGS FOR RETRY RTN
         STAE  ,CT,PARAM=(COMMREG),XCTL=NO,MF=(E,STAELIST)
         SPACE 2
         CH    RETCDREG,MAXSTAE   COMPARE STAE RETURN CODE TO  @Y30NQKK
*                                 MAXIMUM EXPECTED (16)        @Y30NQKK
         BH    STAEMVC            IF HIGHER, PUT OUT ERROR MSG @Y30NQKK
*
         B     STAERCTB(RETCDREG) CHECK RETURN CODES FROM STAE
         SPACE
* STAE MACRO BRANCH TABLE
         SPACE
STAERCTB EQU   *
         B     STAESUCC           IF RC = 0, SUCCESSFUL RETURN
         B     NOCORE             IF RC = 4, NO CORE AVAILABLE
         B     STAEMVC            IF RC = 8, LOGIC ERROR
         B     STAEMVC            IF RC =12, LOGIC ERROR
         B     STAEMVC            IF RC =16, LOGIC ERROR
         SPACE
STAEMVC  EQU   *
         MVC   INSERT1(MSG4LEN),CIMSG4 SET UP SERVICE ROUTINE INSERT
         BAL   RETREG,FORM313A    SET UP PARMLIST
         B     GOSEND             SEND MSG
         SPACE
NOCORE   EQU   *
         BAL   RETREG,NOCORMSG    SET UP PARMLIST
GOSEND   BAL   RETREG,SENDMSG     NOTIFY USER
         B     MSGSENT            RETURN TO CALLER
         SPACE 2
STAESUCC EQU   *
         OI    STAEBIT,HIORDBIT   INDICATE STAE EXIT IN EFFECT
         EJECT
***********************************************************************
*                                                                     *
*              DETERMINE IF COMMAND IN SYSTEM                         *
*                                                                     *
***********************************************************************
         SPACE 2
*  CALL IKJSCAN TO SCAN OFF COMMAND NAME
         SPACE
NEXTCMD  EQU   *
         L     PARMREG1,CAPTECT  ADDRESS OF ECT                @Y30NQKK
         CLC   CIEXEC(LEN8),ECTSCMD-ECT(PARMREG1)  IS COMMAND  @Y30NQKK
         BE    EXECCMD           IMPLICIT EXEC? IF YES, BRANCH @Y30NQKK
         XC    SCANFLAG(L'SCANFLAG),SCANFLAG ZERO OUT FLAG FIELD
         LA    PARMREG1,CATMPLST
         USING CSPL,PARMREG1      ESTAB ADDR. TO CMD SCAN PARMLIST
         LA    DSECTREG,SCANOUT
         USING CSOA,DSECTREG      ESTAB ADDR. TO CMD SCAN PARMBLOCK
         LA    WORKREG1,SCANFLAG
         ST    WORKREG1,CSPLFLG   PTR TO FLAG FIELD
         XC    CSOA(CSOALEN),CSOA ZERO OUT OUTPUT AREA
         ST    DSECTREG,CSPLOA    INIT PTR TO OUTPUT AREA
         XC    CSPLCBUF(L'CSPLCBUF),CSPLCBUF ZERO BUFFER PTR FIELD
         MVC   CSPLCBUF+OFFSET1(LEN3),CMDBUFF+OFFSET1 INIT PTR TO BFR
         XC    LINKLIST(LEN8),LINKLIST ZERO OUT LFORM OF LINK
         LA    RETCDREG,LINKLIST   PTR TO LFORM
         CALLTSSR  EP=IKJSCAN,MF=(E,(1))                       @Y30NQKK
         B     CSRCTAB(RETCDREG)  BRANCH INDEXED BY RC
         SPACE
* IKJSCAN BRANCH TABLE
         SPACE
CSRCTAB  EQU   *
         B     VALIDRC            IF RC=0, VALID COMMAND
         B     ERROR1A            IF RC=4, INVALID PARMS
         B     NOCOR              IF RC=8, NO SPACE AVAILABLE
         SPACE
* VALID COMMAND NAME IN COMMAND BUFFER
         SPACE
VALIDRC  EQU   *
         TM    CSOAFLG,CSOAQM+CSOANOC+CSOABAD CHECK IF
*                                 VALID COMMAND NAME
         BZ    VALIDCMD           IF YES, BRANCH TO PROCESS
         B     ERROR3A            IF NO, NOT COMMAND
         SPACE 2
ERROR1A  EQU   *
         MVC   INSERT1(MSG9LEN),CIMSG9 SET UP SERVICE ROUTINE INSERT
         BAL   RETREG,FORM313A    SET UP PARMLIST
         B     CLEANUP            RETURN TO CALLER
         SPACE 2
NOCOR    EQU   *
         BAL   RETREG,NOCORMSG    SET UP PARMLIST
         B     CLEANUP            RETURN TO CALLER
         SPACE 2
ERROR3A  EQU   *
         MVC   INSERT1(MSG9LEN),CIMSG9 SET UP SERVICE ROUTINE INSERT
         MVC   INSERT2(CIFLGLEN),CIFLG SET UP FLAGS INSERTION
         SR    WORKREG1,WORKREG1
         IC    WORKREG1,CSOAFLG-CSOA(DSECTREG) FLAG BYTE RETURNED
         SLL   WORKREG1,BITS4
         ST    WORKREG1,COMPCODE
         OI    COMPCODE+OFFSET3,ZONEBITS   MOVE IN ZONE SIGN
         UNPK  INSRT2+OFFSET6(LEN2),COMPCODE+OFFSET2(LEN2)
         TR    INSRT2+OFFSET6(LEN2),ABENDTAB-CHAR0 TRANSLATE FLAGS
         BAL   RETREG,FORM313B    SET UP PARMLIST
         B     CLEANUP            RETURN TO CALLER
EXECCMD  EQU   *                                               @Y30NQKK
         LA    DSECTREG,SCANOUT  SET ADDR TO SCAN OUTPUT AREA  @Y30NQKK
*                                MOVE 'EXEC' TO ECT            @Y30NQKK
         MVC   ECTSCMD-ECT(LEN8,PARMREG1),EXECCMND             @Y30NQKK
         LA    PARMREG1,ECTSCMD-ECT(PARMREG1) ADDR OF 'EXEC'   @Y30NQKK
         ST    PARMREG1,CSOACNM  SET PTR TO 'EXEC' CM FOR BLDL @Y30NQKK
         LA    PARMREG1,LEN4     LENGTH OF COMMAND             @Y30NQKK
         STH   PARMREG1,CSOALNM  SET LEN OF COMMAND FOR BLDL   @Y30NQKK
         B     DOBLDL            BEGIN BLDL FOR EXEC           @Y30NQKK
         EJECT
***********************************************************************
*  DO BLDL TO DETERMINE IF COMMAND IS IN SYSTEM                       *
***********************************************************************
VALIDCMD EQU   *
         L     WORKREG2,CAPTECT   LOAD PTR TO ECT              @VS07290
         USING ECT,WORKREG2                                    @VS07290
         TM    CSOAFLG,CSOAVWP    COMMAND CONTAIN OPERANDS?    @VS07290
         BZ    NOOPANDS           IF NO, MARK AS SUCH IN ECT   @VS07290
         NI    ECTSWS,ALLBITS-OPERANDS       MARK THAT OPS     @VS07290
*                                 ARE PRESENT ON COMMAND       @VS07290
         B     DOBLDL             BEGIN BLDL PROCESSING        @VS07290
NOOPANDS OI    ECTSWS,OPERANDS    MARK NO OPERANDS PRESENT     @VS07290
DOBLDL   LA    WORKREG1,OFFSET1
         STH   WORKREG1,BLDLNO    NUMBER OF BLDL ENTRIES
         LA    WORKREG1,ENTRYLEN
         STH   WORKREG1,BLDLLEN   LENGTH OF EACH ENTRY
         MVI   BLDLNAME,BLANK
         MVC   BLDLNAME+OFFSET1(LEN7),BLDLNAME BLANK OUT FIELD
         L     WORKREG1,CSOACNM   PTR TO CMD NAME
         LH    WORKREG2,CSOALNM   LENGTH OF CMD NAME
         BCTR  WORKREG2,PARMREG0  DECREMENT BY ONE TO EXEC MVC
         EX    WORKREG2,BLDLMOVE  MOVE COMMAND NAME
         BLDL  0,BLDLIST          BLDL ON COMMAND NAME
         B     BLDLRCTB(RETCDREG)  BRANCG INDEXED BY RET CODE
         SPACE 2
BLDLMOVE MVC   BLDLNAME(*-*),OFFSET0(WORKREG1)
         SPACE 2
BLDLRCTB EQU   *
         B     RUNTEST            IF RC = 0, SUCCESSFUL RETURN
         B     CMDNOTFD           IF RC = 4, CMD NOT FOUND
         B     BLDLIOER           IF RC = 8, IO ERROR OCCURRED
         SPACE 2
CMDNOTFD EQU   *
         BAL   RETREG,CMDNFD      SET UP PARMLIST
         B     CLEANUP            BRANCH TO TERMINATE
         SPACE 2
BLDLIOER EQU   *
         MVC   INSERT1(MSG7LEN),CIMSG7 SET UP SERVICE ROUTINE INSERT
         BAL   RETREG,FORM313A    SET UP PARMLIST
         B     CLEANUP            BRANCH TO TERMINATE
         EJECT
***********************************************************************
*  IF CALLER IS RUN, DO GETMAIN FOR LSD AREA AND STACK THE ELEMENT    *
***********************************************************************
RUNTEST  EQU   *
         CLC   BLDLNAME(L'RUNSC),RUNSC  CHECK IF RUN CALLER
         BNE   BUILDPLT           IF NO, BRANCH TO BUILD
*                                 PARMLIST FOR ATTACH
         XC    FREELIST(LEN8),FREELIST ZERO LIST FORM
         LA    WORKREG1,GETPTR        ADDR OF GETMAIN AREA
         LA    PARMREG1,FREELIST      PTR TO LIST FORM
         GETMAIN EC,LV=LSDLEN+DATALEN,A=(WORKREG1),SP=SP78,MF=(E,(1))
         LTR   RETCDREG,RETCDREG      CHECK IF GETMAIN SUCCESSFUL
         BNZ   NOCORE                 IF NO, BRANCH - PUT OUT MESSAGE
         LA    DSECTREG,CISTCKLF
         USING STPB,DSECTREG          ESTAB. ADDR. TO PARMBLOCK
         XC    STPB(STPBLEN),STPB     ZERO IKJSTACK PARMBLOCK
         L     WORKREG2,GETPTR        ADDR. OF LSD AREA
         USING LSD,WORKREG2           ESTAB. ADDR. TO LSD AREA
         MVC   ENDMARK(DATALEN),EODCODE MOVE DATA INTO AREA
         LA    WORKREG1,ENDMARK       PTR TO IN-CORE DATA
         ST    WORKREG1,LSDADATA      BEGINNING OF DATA
         ST    WORKREG1,LSDANEXT      FIRST RECORD OF DATA
         LA    WORKREG1,DATALEN       LENGTH OF DATA
         STH   WORKREG1,LSDRCLEN      RECORD LENGTH
         STH   WORKREG1,LSDTOTLN      TOTAL LENGTH OF DATA AREA
         XC    LSDEXEC(L'LSDEXEC),LSDEXEC   ZERO RESERVED AREA @Y30NQKG
         LA    PARMREG1,CATMPLST      PTR TO TMP PARMLIST
         STACK PARM=STPB,STORAGE=((WORKREG2),SOURCE),MF=(E,(1))
         LTR   RETCDREG,RETCDREG      CHECK IF STACK SUCCESSFUL
         BZ    BUILDPLT               IF YES, BRANCH-BUILD PARMLST
         MVC   INSERT1(MSG8LEN),CIMSG8 SET UP SERVICE ROUTINE INSERT
         BAL   RETREG,FORM313A        SET UP PARMLIST
         BAL   RETREG,SENDMSG         NOTIFY USER
         MVC   FREEAREA(L'GETPTR),GETPTR PTR TO LSD AND STACK
         LA    WORKREG1,LSDLEN+DATALEN LENGTH OF AREA TO BE FREED
         ST    WORKREG1,FREEAREA+OFFSET4
         LA    WORKREG1,FREEAREA      PTR TO AREA TO BE FREED
         XC    FREELIST(LEN8),FREELIST ZERO LIST FORM
         FREEMAIN V,A=(WORKREG1),SP=SP78,MF=(E,(1))
         B     MSGSENT                RETURN TO CALLER
         EJECT
* BUILD TMP-LIKE PARAMETER LIST FOR ATTACHED COMMAND PROCESSOR
BUILDPLT MVC   CIATTACH(ATTACHLN),ATTACHLT
         XC    CINORECB(L'CINORECB),CINORECB ZERO NORM. ECB
         LA    WORKREG1,CINORECB      MODULE NAME AND ADDRESS OF
         ST    WORKREG1,CIATHECB      ATTACH ECB
         L     DSECTREG,CAPTTMP       ESTABLISH ADDRESSIBILITY TO CMD
         USING CPPL,DSECTREG          PROCESSOR PARAMETER LIST
         MVC   CITMPLST+CPPLCBUF-CPPL(L'CMDBUFF),CMDBUFF MOVE PTR TO
*                                     COMMAND BUFFER INTO PARMLIST
         MVC   CITMPLST+CPPLUPT-CPPL(L'CPPLUPT),CPPLUPT MOVE PTR TO
*                                     UPT INTO PARMLIST
         MVC   CITMPLST+CPPLPSCB-CPPL(L'CPPLPSCB),CPPLPSCB MOVE PTR TO
*                                     PSCB INTO PARMLIST
         MVC   CITMPLST+CPPLECT-CPPL(L'CPPLECT),CPPLECT MOVE PTR TO
*                                     ECT INTO PARMLIST
         LA    RETCDREG,CIATTACH
         LA    PARMREG1,CITMPLST
* ATTACH WITH STAI EXIT APPROPRIATE COMMAND PROCESSOR
         ATTACH DE=BLDLNAME,MF=(E,(1)),SF=(E,(15)),SZERO=NO,     A50463X
               STAI=(STAIEXIT,STAIPLST)
         SPACE
         LTR   RETCDREG,RETCDREG      IS RC = 0
         BNZ   NOCOR                  BR NO TO PUT OUT MESSAGE
         ST    PARMREG1,CITCBPTR      SAVE TCB PTR FOR DETACH
         EJECT
* WAIT ON COMPLETION OF ANY ONE OF THE FOLLOWING EVENTS
*             - NORMAL RETURN FROM THE SUB-TASK
*             - ISSUANCE OF AN ATTENTION INTERRUPT
         SPACE 2
         WAIT  ECBLIST=CIECBLST
         SPACE 2
         TM    CINORECB,COMPLETE      CHECK IF NORMAL RETURN
         BNO   ATTNISSU               IF NO, BRANCH-ATTENTION
         L     WORKREG1,CAPTTMP       GET TMP PARM LIST ADDR
         L     DSECTREG,CPPLECT-CPPL(WORKREG1) GET ECT ADDR
         USING ECT,DSECTREG
         TM    ABENDBIT,HIORDBIT      CHECK IF STAI EXIT USED
         BNZ   CPABEND                IF YES, BRANCH-ISSUE MSG
         MVC   ECTRTCD(LEN3),CINORECB+OFFSET1 SAVE CC
         OC    CINORECB+OFFSET1(LEN3),CINORECB+OFFSET1
         BZ    UNALLOC                IF YES, BRANCH-RC=0
         LA    WORKREG1,RETCD8
         ST    WORKREG1,CIRETCD       SET RETURN CODE OF 8
UNALLOC  EQU   *
         DETACH CITCBPTR              DETACH SUB-TASK
         BAL   RETREG,CALLDAIR        CALL IKJDAIR FOR DSE CLEAN UP
         LTR   RETCDREG,RETCDREG      CHECK IF SUCCESSFUL
         BNZ   UNSTK                  IF NO, RETURN TO CALLER
         L     WORKREG1,CICMDBFR
         CLC   OFFSET4(L'RUNSC,WORKREG1),RUNSC CHECK IF 'RUN' CALLER
         BNE   NOTRUN                 IF NO, CLEAN UP AND EXIT
         TM    FREEBIT,HIORDBIT       CHECK IF AREA TO BE FREEMAINED
         BZ    NOFRBFR                IF NO, BY-PASS FREEMAIN
         L     WORKREG1,CMDBUFF       PTR TO AREA TO BE FREED
         ST    WORKREG1,FREEAREA      MOVE INTO FREEMAIN LIST
         LH    WORKREG1,OFFSET0(WORKREG1) LENGTH OF AREA
         ST    WORKREG1,FREEAREA+OFFSET4 MOVE INTO FREEMAIN LIST
         LA    WORKREG1,FREEAREA      PTR TO FREEMAIN LIST
         XC    FREELIST(LEN8),FREELIST ZERO OUT LFORM
         LA    PARMREG1,FREELIST      PTR TO LFORM
         FREEMAIN V,A=(WORKREG1),SP=SP01,MF=(E,(1)) FREEMAIN BUFFER
         NI    FREEBIT,ALLBITS-HIORDBIT SET FREEMAIN SW OFF
NOFRBFR  EQU   *
* ISSUE PUTGET TO READ IN-CORE COMMAND BUILT BY RUN CP
         LA    DSECTREG,CIGETLFM  ESTABLISH ADDRESSIBILITY TO PUTGET
         USING PGPB,DSECTREG      PARAMETER BLOCK
         XC    PGPB(PGPBLEN),PGPB ZERO OUT PARM BLOCK
         ST    DSECTREG,CATMPLST+IOPLIOPB-IOPL SET PT TO PARM BLOCK
         LA    PARMREG1,CATMPLST
         PUTGET ,OUTPUT=(CAMODEMG,SINGLE,MODE),TERMGET=(EDIT,WAIT),    X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=(E,(1))
*
         CH    RETCDREG,MAXPTGT  COMPARE PUTGET RETURN CODE TO @Y30NQKK
*                                MAXIMUM EXPECTED (28)         @Y30NQKK
         BH    PTGTMVC           IF HIGHER, PUT OUT ERROR MSG  @Y30NQKK
*
         B     RETCDTAB(RETCDREG) CHECK RETURN CODES
         SPACE
*  PUTGET RETURN CODE BRANCH TABLE
         SPACE
RETCDTAB EQU   *
         B     TERMLINE           IF RC = 0, STACK FLUSHED
         B     NORMRET            IF RC = 4, SUCCESSFUL RETURN
         B     MAINEXIT           IF RC = 8, ATTENTION ISSUED
         B     SECLEV             IF RC =12, 2ND LEVEL PRESENT
         B     PTGTMVC            IF RC =16, LOGIC ERROR
         B     PTGTMVC            IF RC =20, LOGIC ERROR
         B     PTGTMVC            IF RC =24, LOGIC ERROR
         B     NOCOR              IF RC =28, NO SPACE AVAILABLE
         SPACE
PTGTMVC  EQU   *
         MVC   INSERT1(MSG10LEN),CIMSG10 SET UP SERVICE ROUTINE INSERT
         BAL   RETREG,FORM313A    SET UP PARMLIST
         B     CLEANUP            RETURN TO CALLER
         SPACE 2
         EJECT
TERMLINE EQU   *
         MVC   CAPTNBFR(L'CAPTNBFR),CIGETLFM+PGPBIBUF-PGPB PLACE A50473
*                                 NEW SUBCOMMAND ADDRESS IN      A50473
*                                 COMMUNICATION AREA             A50473
         B     MAINEXIT           RETURN TO CALLER
         EJECT
* DETERMINE IF SECOND LEVEL MESSAGE IS INFORMATIONAL OR DIAGNOSTIC
         SPACE 2
SECLEV   EQU   *
* CHECK IF SUCCESSFUL RETURN CODE FROM SUBTASK
         OC    CINORECB+OFFSET1(LEN3),CINORECB+OFFSET1
         BZ    CONTPRCS           IF YES, MSG INFORMATIONAL
         LA    DSECTREG,CISTCKLF
         USING STPB,DSECTREG      ESTAB ADDR. FOR STACK PARMBLOCK
         XC    STPB(STPBLEN),STPB ZERO OUT PARM BLOCK
         LA    PARMREG1,CATMPLST  PTR TO STACK PARMLIST
         USING STPL,PARMREG1      ESTAB ADDR. FOR STACK PARMLIST
         ST    DSECTREG,STPLSTPB  PTR TO PARMBLOCK IN PARMLIST
         STACK DELETE=ALL,MF=(E,(1)) ISSUE STACK MACRO
         LTR   RETCDREG,RETCDREG  CHECK IF SUCCESSFUL RETURN
         BZ    MAINEXIT           IF YES, RETURN TO CALLER
         MVC   INSERT1(MSG8LEN),CIMSG8 SET UP SERVICE ROUTINE INSERT
         BAL   RETREG,FORM313A    SET UP PARMLIST
         B     GOSEND             SEND MSG
         SPACE
         SPACE 2
CONTPRCS EQU   *
         L     DSECTREG,CAPTTMP
         L     DSECTREG,CPPLECT-CPPL(DSECTREG) PTR TO ECT
         USING ECT,DSECTREG       ESTAB ADDR. TO ECT
         OI    ECTMSGF,HIORDBIT   SET BIT TO FLUSH SEC LEVEL
         LA    WORKREG2,CIGETLFM
         USING PGPB,WORKREG2      ESTAB ADDR. TO PARMBLOCK
         XC    PGPB(PGPBLEN),PGPB ZERO OUT PARM BLOCK
         ST    WORKREG2,CATMPLST+IOPLIOPB-IOPL SET PT TO PARM BLOCK
         LA    PARMREG1,CATMPLST
         PUTGET ,OUTPUT=(CAMODEMG,SINGLE,MODE),TERMGET=(EDIT,WAIT),    X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=(E,(1))
         NI    ECTMSGF,ALLBITS-HIORDBIT SET MSG BIT OFF
         B     RETCDTAB(RETCDREG) CHECK RETURN CODE
         EJECT
* DETERMINE APPROPRIATE COMMAND PROCESSOR TO ATTACH FOR 'RUN'
NORMRET  EQU   *
         NI    CACFLAG4,ALLBITS-CAINPROC  SET PROC BIT OFF
         OI    FREEBIT,HIORDBIT   SET ON AREA TO BE FREED
         L     WORKREG1,CIGETLFM+PGPBIBUF-PGPB
         ST    WORKREG1,CMDBUFF   PTR TO CMD TO BE PROCESSED
         CLC   OFFSET4(DATALEN,WORKREG1),EODCODE CHECK IF EOD
         BNE   NEXTCMD            IF NO, CONTINUE PROCESS
         OI    CACFLAG2,CAMODMSG  INDICATE MODE MSG TO BE PUT OUT
         B     MAINEXIT           RETURN TO CALLER
         EJECT
CLEANUP  EQU   *
         BAL   RETREG,SENDMSG     NOTIFY USER
UNSTK    EQU   *
         BAL   WORKREG1,UNSTACK   DELETE THE INPUT STACK        YA00037
MSGSENT  EQU   *
         LA    WORKREG1,RETCD8    SET RETURN CODE = 8
         ST    WORKREG1,CIRETCD
MAINEXIT EQU   *
* IF CALLER IS RUN, FREEMAIN THE COMMAND BUFFER
         TM    FREEBIT,HIORDBIT   CHECK IF BFR TO BE FREED
         BZ    NOTRUN             IF NO, BY-PASS FREEMAIN
         L     WORKREG1,CMDBUFF   PTR TO IN-CORE CMD BUFFER
         ST    WORKREG1,FREEAREA
         LH    WORKREG1,OFFSET0(WORKREG1) LENGTH OF BUFFER
         ST    WORKREG1,FREEAREA+OFFSET4
         LA    WORKREG1,FREEAREA  PTR TO AREA TO BE FREED
         XC    FREELIST(LEN8),FREELIST ZERO LIST FORM
         LA    PARMREG1,FREELIST  PTR TO LIST FORM
         FREEMAIN V,A=(WORKREG1),SP=SP01,MF=(E,(1))
NOTRUN   EQU   *
         TM    STAEBIT,HIORDBIT   CHECK IF STAE IN EFFECT
         BZ    NOSTAE             IF NO, BY-PASS STAE CANCEL
         STAE  0,MF=(E,STAELIST)
         LTR   RETCDREG,RETCDREG  CHECK IF STAE CANCEL SUCCESSFUL
         BZ    NOSTAE             IF YES, CONTINUE TO EXIT
         NI    STAEBIT,ALLBITS-HIORDBIT SET STAE IN EFFECT SWITCH OFF
         B     STAERCTB(RETCDREG) CHECK FOR NONZERO RETURN CODE
         SPACE
NOSTAE   EQU   *
         L     RETCDREG,CIRETCD   MOVE RETURN CODE INTO REG 15
         IKJEBERT (14,12),,RC=(15)
         EJECT
* ATTENTION ECB POSTED - ATTENTION ISSUED
ATTNISSU EQU   *
         STATUS STOP              MAKE ALL SUBTASKS NON-DISPATCH.
         XC    CINORECB(L'CINORECB),CINORECB ZERO NORM. ECB
         STATUS START             MAKE SUB-TASKS DISPATCHABLE
         DETACH CITCBPTR,STAE=YES GIVE CONTROL TO SUBTASK STAE
         BAL   RETREG,CALLDAIR    MARK SUBTASK DS AS NOT IN USE
         BAL   WORKREG1,UNSTACK   DELETE THE INPUT STACK        YA00037
         B     MAINEXIT           RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*              COMMAND PROCESSOR ENDED ABNORMALLY                     *
*                                                                     *
***********************************************************************
         SPACE 2
CPABEND  EQU   *
         L     WORKREG1,CAPTTMP   PTR TO TMP PARMLIST
         L     DSECTREG,CPPLECT-CPPL(WORKREG1) PTR TO ECT
         USING ECT,DSECTREG
         MVC   ECTRTCD(LEN3),COMPCODE+OFFSET1
         OI    ECTRCDF,HIORDBIT   SET ABEND FLAG ON
         DETACH CITCBPTR
         BAL   RETREG,CALLDAIR    CALL IKJDAIR FOR DSE CLEAN UP
         LTR   RETCDREG,RETCDREG   CHECK IF SUCCESSFUL
         BNZ   UNSTK              IF NO, RETURN TO CALLER
* CLEAR INPUT QUEUE
         TCLEARQ INPUT
         LTR   RETCDREG,RETCDREG  CHECK IF SUCCESSFUL RETURN
         BZ    ABPRCS             IF YES, BRANCH-CONTINUE PROCESSING
         MVC   INSERT1(MSG3LEN),CIMSG3 SET UP SERVICE ROUTINE INSERT
         BAL   RETREG,FORM313A    SET UP PARMLIST
         BAL   RETREG,SENDMSG     NOTIFY USER
         B     ABEXIT             BRANCH TO EXIT
         SPACE
ABPRCS   EQU   *
         L     WORKREG2,COMPCODE
         SLDL  WORKREG1,BITS20        SEPERATE SYS/USER COMP. CODE
         SRL   WORKREG2,BITS20
         LTR   WORKREG2,WORKREG2  CHECK IF SYSTEM ABEND OCCURRED
         BZ    SYSABEND           IF YES, BRANCH - SYSTEM ABEND
         CVD   WORKREG2,CONVERTD       CONVERT USER CODE TO DECIMAL
         UNPK  UNPACKD(LEN8),CONVERTD+OFFSET3(OFFSET5)
         OI    UNPACKD+OFFSET7,CHAR0   SET PROPER ZONE SIGN
         MVC   INSRT2(LEN4),UNPACKD+OFFSET4 SET UP COMP CODE INSERT
         MVI   INS2LEN,LEN8       LENGTH OF INSERTION
         MVI   INS2OFF,M4222IN1   INSERTION POINT IN MESSAGE
         MVI   LEVEL2,M4222       RELATIVE LEVEL2 MSG NUMBER
         B     SYSABMSG           BRANCH TO FORM REST OF MSG
SYSABEND SLL   WORKREG1,BITS20    CLEAR HIGH ORDER BITS
         SRL   WORKREG1,BITS16
         ST    WORKREG1,COMPCODE
         OI    COMPCODE+OFFSET3,ZONEBITS INSERT SIGN BITS
         UNPK  COMPCODE+OFFSET1(LEN3),COMPCODE+OFFSET2(LEN2) UNPACK
         TR    COMPCODE+OFFSET1(LEN3),ABENDTAB-CHAR0 CONVERT TO EBCDIC
         MVC   INSRT2(LEN3),COMPCODE+OFFSET1 SET UP COMP CODE INSERT
         MVI   INS2LEN,LEN7       LENGTH OF INSERTION
         MVI   INS2OFF,M4221IN1   INSERTION POINT IN MESSAGE
         MVI   LEVEL2,M4221       RELATIVE LEVEL2 MSG NUMBER
SYSABMSG EQU   *
         BAL   RETREG,CMDERR      SET UP PARMLIST
         BAL   RETREG,SENDMSG     NOTIFY USER
         XC    ECTRTCD(LEN3),ECTRTCD ZERO CC IN ECT
         NI    ECTRCDF,ALLBITS-HIORDBIT SET ABEND BIT OFF
ABEXIT   EQU   *
         B     UNSTK              BR TO TERMINATE
         EJECT
***********************************************************************
*                                                                     *
*              MARK ALL DSE ENTRIES OF SUB-TASK AS NOT IN USE         *
*                                                                     *
***********************************************************************
         SPACE 2
CALLDAIR EQU   *
         IKJEBESV (14,12),,,CODEREG=NO,COMMREG=NO
         SPACE
         L     DSECTREG,CAPTTMP   PTR TO TMP PARMLIST
         USING CPPL,DSECTREG
         L     WORKREG1,CPPLPSCB  PTR TO PSCB
         LA    PARMREG1,CATMPLST  PTR TO DAIR PARMLIST
         USING DAPL,PARMREG1      ESTAB ADDR. TO DAIR PARMLIST
         ST    WORKREG1,DAPLPSCB  PTR TO PSCB IN PARMLIST
         LA    DSECTREG,DAIRPARM
         USING DAPB2C,DSECTREG    ESTAB ADDR. TO DAIR PARMBLOCK
         ST    DSECTREG,DAPLDAPB  PTR TO PARMBLOCK IN PARMLIST
         XC    DA2CCD(LEN8),DA2CCD ZERO AREA
         MVI   DA2CCD+OFFSET1,CLEANDSE DAIR ENTRY CODE
         MVI   DA2CCD+OFFSET3,CIOPCD MOVE IN OPTION CODE
         LINK  EP=IKJDAIR
         SPACE
         LTR   RETCDREG,RETCDREG   CHECK IF SUCCESSFUL
         BZ    DAIREXIT           IF YES, RETURN TO CALLER
         MVC   INSERT1(MSG5LEN),CIMSG5 SET UP SERVICE ROUTINE INSERT
         BAL   RETREG,FORM313A    SET UP PARMLIST
         BAL   RETREG,SENDMSG      NOTIFY USER
         LA    RETCDREG,RETCD8     SET NONZERO RETURN CODE
         SPACE
DAIREXIT EQU   *
         IKJEBERT (14,12),,RC=(15) RETURN TO CALLER
         EJECT
*************************************************************** YA00037
*                                                               YA00037
*    CALL IKJSTCK TO DELETE ALL ELEMENTS BUT TERMINAL FROM      YA00037
*    INPUT STACK.                                               YA00037
*                                                               YA00037
*************************************************************** YA00037
UNSTACK  EQU   *                                                YA00037
         LA    DSECTREG,CISTCKLF                                YA00037
         USING STPB,DSECTREG      ESTAB ADDR. FOR STACK BLOCK   YA00037
         XC    STPB(STPBLEN),STPB ZERO OUT PARM BLOCK           YA00037
         LA    PARMREG1,CATMPLST  PTR TO STACK PARMLIST         YA00037
         USING STPL,PARMREG1      ESTAB. ADDR FOR STACK LIST    YA00037
         ST    DSECTREG,STPLSTPB  PTR TO PARM BLOCK IN PARMLIST YA00037
         STACK DELETE=ALL,MF=(E,(1)) ISSUE STACK MACRO          YA00037
         BR    WORKREG1           RETURN TO CALLER              YA00037
         EJECT
***********************************************************************
*                                                                     *
*  CREATE PARAMETER LISTS FOR MESSAGES                                $
*                                                                     *
***********************************************************************
NOCORMSG EQU   *
         MVC   LEVEL1(LEN2),CIM312 RELATIVE LEVEL1 MSG NUMBER
         MVI   INS1OFF,M312IN1    INSERTION POINT
NOCORB   EQU   *
         L     WORKREG1,CAPTSCMD  PTR TO SUBCOMMAND NAME
         MVC   INSRT1(LEN8),OFFSET0(WORKREG1) MOVE TO INSERT FIELD
         LH    WORKREG1,CASCMDLN  LENGTH OF SUBCOMMAND NAME
         LA    WORKREG1,LEN4(WORKREG1) ADD FOUR FOR OFFSET
         STH   WORKREG1,INS1LEN   LENGTH OF INSERTION
         LA    WORKREG1,INSERT1   CHAIN INSERTION
         ST    WORKREG1,INS1PTR   PARMLIST
         BR    RETREG             RETURN TO CALLER
         SPACE
FORM313A EQU   *
         MVC   INSERT2(MSGRCL),CIMSGRC SET UP RC INSERTION PARMLIST
         SRL   RETCDREG,LEN1      SHIFT RC FOR INDEXING
         LH    WORKREG1,CIRCTAB(RETCDREG) PICK UP PRINTABLE CHARACTER
         STH   WORKREG1,INSRT2    MOVE TO INSERTION
FORM313B EQU   *
         MVC   LEVEL1(LEN4),CIM313 RELATIVE LEVEL1 MSG NUMBER
         LA    WORKREG1,INSERT2   CHAIN
         ST    WORKREG1,INSERT1   INSERTION
         LA    WORKREG1,INSERT1   PARMLISTS
         ST    WORKREG1,INS2PTR   TOGETHER
         BR    RETREG             RETURN TO CALLER
         SPACE
CMDNFD   EQU   *
         MVC   INSRT1(LEN8),BLDLNAME NAME OF INVALID COMMAND
         LH    WORKREG1,SCANOUT+CSOALNM-CSOA LENGTH OF BLDLNAME
         LA    WORKREG1,LEN4(WORKREG1) PLUS FOUR FOR OFFSET
         STH   WORKREG1,INS1LEN   LENGTH OF INSERTION
         MVI   INS1OFF,M425IN1    INSERTION POINT
         MVC   LEVEL1(LEN2),CIM425 RELATIVE LEVEL1 MSG NUMBER
         LA    WORKREG1,INSERT1   CHAIN
         ST    WORKREG1,INS1PTR   PARMLISTS
         BR    RETREG             RETURN TO CALLER
         SPACE
CMDERR   EQU   *
         MVC   LEVEL1(LEN2),CIM422 RELATIVE LEVEL1 MSG NUMBER
         LA    WORKREG1,INSERT2   CHAIN
         ST    WORKREG1,INS2PTR   PARMLISTS
         MVI   INS1OFF,M422IN1    INSERTION POINT
         B     NOCORB             BR TO PUT OUT MESSAGE
         EJECT
***********************************************************************
*  USE IKJEBEML MACRO TO SEND MESSAGES TO USER                        *
***********************************************************************
         SPACE 2
SENDMSG  EQU   *
         IKJEBESV (14,12),,,CODEREG=NO,COMMREG=NO
         IKJEBEML ,,,,MF=(E,MSGPLIST) SEND ERROR MESSAGE TO USER
         IKJEBERT (14,12)
         EJECT
* LIST FORM OF ATTACH MACRO
ATTACHLT ATTACH SHSPV=SP78,SF=L     LIST FORM OF ATTACH MACRO
ATTACHLN EQU   *-ATTACHLT           LENGTH OF LIST FORM
         EJECT
         IKJEBECA
         EJECT
***********************************************************************
*                                                                     *
*                          SUBCOMMAND WORKAREA                        *
*                                                                     *
***********************************************************************
         SPACE 2
         ORG   CASRWKA            SERVICE ROUTINE WORK AREA IN IKJEBECA
CICMDBFR DS    A                  ADDRESS OF COMMAND BUFFER
CINORECB DS    F                  ECB FOR SUBTASK NORMAL RETURN
CIECBLST DS    0F                 ECB LIST FOR WAIT
CIECBATT DS    A                  ADDRESS OF ATTENTION ECB
CIECBNOR DS    A                  ADDRESS OF NORMAL RETURN ECB
CITCBPTR DS    A                  ADDRESS OF SUB-TASK TCB
CIGETLFM DS    4A                 IKJGETL PARM BLOCK
CISTCKLF DS    2F                 IKJSTCK PARM BLOCK
CITMPLST DS    4A                 DUMMY TMP PARAMETER LIST
DAIRPARM DS    2F                 IKJDAIR PARM BLOCK
CMDBUFF  DS    A                  PTR TO CMD BUFFER TO BE PROCESSED
CIRETCD  DS    F                  SAVE AREA FOR PROGRAM RETURN CODE
LINKLIST DS    2A                 LFORM OF LINK MACRO
SCANOUT  DS    2A                 IKJSCAN OUTPUT AREA
SCANFLAG DS    F                  IKJSCAN FLAG FIELD
FREEAREA DS    2F                 FREEMAIN LIST AREA
FREELIST DS    2A                 LFORM FOR FREEMAIN MACRO
         DS    2X                 FREEMAIN CODE AND SUBPOOL NUMBER
FREEBIT  DS    BL1                FREEMAIN SWITCH- 0-NO AREA TO FREE
*                                                  1-AREA TO BE FREED
         EJECT
         ORG   CATEMPBF           ADDITIONAL WORK AREA IN IKJEBECA
STAIPLST DS    0F                 STAI EXIT PARAMETER LIST
COMPCODE DS    F                  ABEND COMPLETION CODE
SAVEBIT  DS    BL1                REGISTER SAVE SWITCH-
*                                     1 - REGISTERS SAVED
*                                     0 - REGISTERS NOT SAVED
ABENDBIT DS    BL1                ABEND SWITCH-
*                                     0 - CP FIELDED ABEND
*                                     1 - STAI FIELDED ABEND
         SPACE 2
CIATTACH DS    0F                 LIST FORM OF ATTACH MACRO
CIMODNAM DS    A                  ADDRESS OF MODULE NAME
         DS    A                  ADDRESS OF DCB
CIATHECB DS    A                  ADDRESS OF ATTACH ECB
         DS    A                  GSPL OR GSPV
         DS    A                  SHSPV OR SHSPL
         DS    AL1                SET ROLLOUT BITS
         DS    AL3                EXIT ROUTINE ADDRESS
         DS    AL2                DPMOD VALUE
         DS    AL1                LPMOD VALUE
         DS    AL1                UNUSED
         DS    CL8                MODULE NAME
         DS    A                  ADDRESS OF STAI PARMLIST
         DS    A                  ADDRESS OF STAI EXIT ROUTINE
         DS    4F                 ADD'L SPACE FOR LIST FORM    @Y30NQKK
         ORG   CIATTACH+ATTACHLN  MAKE SURE ENOUGH SPACE FOR   @Y30NQKK
*                                 ATTACH LIST FORM             @Y30NQKK
         SPACE 2
GETPTR   DS    A                   PTR TO LSD AND IN-CORE AREA
         SPACE 2
BLDLIST  DS    0H                            ENTRY LIST FOR BLDL
BLDLNO   DS    H                  NUMBER OF ENTRIES
BLDLLEN  DS    H                  LENGTH OF EACH ENTRY
BLDLNAME DS    CL8                NAME OF MODULE
         DS    CL50               INFO FILLED IN BY BLDL
ENTRYLEN EQU   *-BLDLNAME                    LENGTH OF ENTRY
         SPACE 2
STAELIST DS    5F                 LIST FORM FOR STAE MACRO
REGSAVE  DS    5F                 SAVE AREA FOR REGS 9-13
WKAREA   DS    A                  PTR TO STAE EXIT WORKAREA
CCTEMP   DS    X                  TEMP AREA FOR COMPLETION CODE
STAEBIT  DS    BL1                STAE SWITCH- 0 - STAE NOT IN EFFECT
*                                              1 - STAE IN EFFECT
         DS    0D
CONVERTD DS    D                  UNPACK AND
UNPACKD  DS    D                  CONVERT AREA
MSGPLIST DS    12F                MESSAGE PARMLIST
LEVEL1   EQU   MSGPLIST           RELATIVE LEVEL1 MSG NUMBER
LEVEL2   EQU   LEVEL1+3           RELATIVE LEVEL2 MSG NUMBER
INS1PTR  EQU   LEVEL1+4           PTR TO 1ST LEV1 INSERT PARMLIST
INS2PTR  EQU   LEVEL1+8           PTR TO 1ST LEV2 INSERT PARMLIST
INSERT1  EQU   LEVEL1+12          PTR TO NEXT INSERT PARMLIST
INS1LEN  EQU   INSERT1+4          LENGTH OF INSERTION
INS1OFF  EQU   INSERT1+7          INSERTION PT IN MESSAGE
INSRT1   EQU   INSERT1+8          INSERTION1
INSERT2  EQU   INSERT1+16         PTR TO NEXT INSERT PARMLIST
INS2LEN  EQU   INSERT2+5          LENGTH OF INSERTION
INS2OFF  EQU   INSERT2+7          INSERTION PT IN MESSAGE
INSRT2   EQU   INSERT2+8          INSERTION2
         EJECT
         IKJIOPL
         SPACE 2
         IKJECT
         EJECT
         CVT   DSECT=YES                                       @Y30NQKK
         EJECT
         IKJCPPL
         SPACE 2
         IKJPGPB
PGPBLEN  EQU   *-PGPB
         EJECT
         IKJCSPL
         SPACE 2
         IKJCSOA
CSOALEN  EQU   *-CSOA
         EJECT
         IKJSTPL
         SPACE 2
         IKJSTPB
STPBLEN  EQU   *-STPB
         EJECT
         IKJDAPL
         SPACE 2
         IKJDAP2C
         SPACE 2
         IKJLSD
LSDLEN   EQU   *-LSD
ENDMARK  EQU   *
         EJECT
         IKJEBEMI (312,313,422,425)
         EJECT
IKJEBECI CSECT
         SPACE 2
***********************************************************************
*                                                                     *
*                          PROGRAM CONSTANTS                          *
*                                                                     *
***********************************************************************
STAELFM  STAE  STAEEXIT,,MF=L       LIST FORM OF STAE MACRO
STAELEN  EQU   *-STAELFM            LENGTH OF MACRO
         SPACE 2
* LIST OF COMMAND PROCESSORS THAT MAY BE EXECUTED UNDER EDIT
RUNSC    DC    CL8'RUN'           RUN SUBCOMMAND              @ZA28013
         SPACE 2
ABENDTAB DC    C'0123456789ABCDEF' TRANSLATE TABLE FOR ABEND CODE
CIRCTAB  DC    C'  040812162024'  TABLE OF PRINTABLE CHARACTERS
         SPACE 2
EODCODE  DC    X'FFFFFFFF'        END OF DATA INDICATOR
DATALEN  EQU   *-EODCODE          LENGTH OF EOD INDICATOR
         SPACE 2
CIMSGADR DC    V(IKJEBCIM)        ADDR OF MSG CSECT
CIEXEC   DC    CL8'IMPLEXEC'                                   @Y30NQKK
EXECCMND DC    CL8'EXEC'                                       @Y30NQKK
MAXSTAE  DC    H'16'              MAX RCODE EXPECTED FROM STAE @Y30NQKK
MAXPTGT  DC    H'28'              MAX RCODE EXPECTED FROM PTGT @Y30NQKK
         EJECT
IKJEBCIM CSECT
         SPACE
         DS    0F
CIM312   DC    AL2(M312)          LEVEL1 MSG 312
CIM313   DC    AL2(M313)          LEVEL1 MSG 313
         DC    AL2(M3131)         LEVEL2 MSG 1
CIM422   DC    AL2(M422)          LEVEL1 MSG 422
CIM425   DC    AL2(M425)          LEVEL1 MSG 425
         SPACE
         DS    0F
CIMSG3   IKJEBEMG ,M3131IN1,'TCLEARQ'
MSG3LEN  EQU   *-CIMSG3
CIMSG4   IKJEBEMG ,M3131IN1,'STAE'
MSG4LEN  EQU   *-CIMSG4
CIMSG5   IKJEBEMG ,M3131IN1,'DAIR'
MSG5LEN  EQU   *-CIMSG5
CIMSG7   IKJEBEMG ,M3131IN1,'BLDL'
MSG7LEN  EQU   *-CIMSG7
CIMSG8   IKJEBEMG ,M3131IN1,'STACK'
MSG8LEN  EQU   *-CIMSG8
CIMSG9   IKJEBEMG ,M3131IN1,'SCAN'
MSG9LEN  EQU   *-CIMSG9
CIMSG10  IKJEBEMG ,M3131IN1,'PUTGET'
MSG10LEN EQU   *-CIMSG10
CIFLG    IKJEBEMG ,M3131IN2,'FLAGS=  '
CIFLGLEN EQU   *-CIFLG
CIMSGRC  IKJEBEMG ,M3131IN2,'  '
MSGRCL   EQU   *-CIMSGRC
         EJECT
IKJEBECI CSECT
***********************************************************************
*                                                                     *
*                             STAI EXIT                               *
*                                                                     *
***********************************************************************
         SPACE 2
         CNOP  0,4
STAIEXIT EQU   *
         USING STAIEXIT,ENTRY
         CH    PARMREG0,CODE12    CHECK IF WORKAREA PROVIDED
         BE    NOWKA                         IF NO, BRANCH-BYPASS SAVE
         SAVE  (14,12)            SAVE REGISTERS
         L     WORKREG1,OFFSET0(PARMREG1) PTR TO PARMLIST
         OI    SAVEBIT-STAIPLST(WORKREG1),HIORDBIT
         MVC   COMPCODE-STAIPLST(LEN4,WORKREG1),OFFSET4(PARMREG1)
         B     SETSW              BRANCH TO SET ABEND BIT
NOWKA    ST    PARMREG1,COMPCODE-STAIPLST(WORKREG1)
SETSW    EQU   *
         OI    ABENDBIT-STAIPLST(WORKREG1),HIORDBIT
         TM    SAVEBIT-STAIPLST(WORKREG1),HIORDBIT
*                                 CHECK IF REGS SAVED
         BNO   NORESTOR           IF NO,BRANCH-REGS SET
         RETURN (14,12),,RC=STAICODE RETURN TO SYSTEM
NORESTOR EQU   *
         LA    RETCDREG,STAICODE  SET STAI RETURN CODE
         BR    RETREG             RETURN TO SYSTEM
CODE12   DC    H'12'              WORKAREA CODE
         EJECT
***********************************************************************
*                                                                     *
*                             STAE EXIT                               *
*                                                                     *
***********************************************************************
         SPACE 2
         CNOP  0,4
STAEEXIT EQU   *
         USING STAEEXIT,ENTRY
         CH    PARMREG0,CD12      CHECK IF WORKAREA PROVIDED
         BE    NOWKAREA           IF NO, BRANCH- BYPASS SAVE
         SAVE  (14,12)
         L     WORKREG1,OFFSET0(PARMREG1) PTR TO IKJEBECA
         DROP  COMMREG            CHANGE BASE REG FOR IKJEBECA
         USING IKJEBECA,WORKREG1
         ST    PARMREG1,WKAREA
         OI    SAVEBIT,HIORDBIT   INDICATE REGS SAVED
         MVC   COMPCODE(LEN4),OFFSET4(PARMREG1) SAVE COMPLETION CODE
         B     CHECKCC            BRANCH TO CHECK COMPLETION CODE
NOWKAREA EQU   *
         ST    PARMREG1,COMPCODE  SAVE COMPLETION CODE
CHECKCC  NI    STAEBIT,ALLBITS-HIORDBIT INDICATE STAE CANCELED
         L     PARMREG1,COMPCODE
         SRL   PARMREG1,BITS12
         STC   PARMREG1,CCTEMP
         CLI   CCTEMP,CCX3E       CHECK IF ABEND IS X3E
         BNE   NOTX3E             IF NO, BRANCH- TRUE PROGRAM ABEND
         TM    SAVEBIT,HIORDBIT   CHECK IF REGISTERS SAVED
         BNO   NOSAVE             IF NO, BRANCH-REGS SET
         RETURN (14,12),,RC=0     RETURN TO SYSTEM
NOSAVE   EQU   *
         L     PARMREG1,COMPCODE
         SR    RETCDREG,RETCDREG  SET RETURN CODE OF ZERO-NO RETRY
         BR    RETREG             RETURN TO SYSTEM
         SPACE 2
NOTX3E   EQU   *
         TM    SAVEBIT,HIORDBIT   CHECK IF REGISTERS SAVED
         BNO   NOSAVE             IF NO, BRANCH-NOT RETRY POSSIBLE
         L     PARMREG1,WKAREA    RESTORE PTR TO WORKAREA
         L     PARMREG0,RETRYAD   PTR TO STAE RETRY
         L     RETREG,OFFSET12(SAVEREG) RESTORE REG 14
         RETURN (2,12),,RC=STAECODE RETURN TO SYSTEM
         SPACE
CD12     DC    H'12'              WORKAREA CODE
RETRYAD  DC    A(STAERTRY)        PTR TO STAE RETRY
         EJECT
***********************************************************************
*                                                                     *
*                            STAE RETRY                               *
*                                                                     *
***********************************************************************
         SPACE 2
         CNOP  0,4
STAERTRY EQU   *
         USING STAERTRY,ENTRY
         L     WORKREG1,OFFSET0(PARMREG1) PTR TO PARMLIST
         USING IKJEBECA,WORKREG1
         LM    COMMREG,SAVEREG,REGSAVE RESTORE PROGRAM REGS 9-13
         L     RETREG,RETURNAD    PTR TO RETURN POINT
         BR    RETREG             RETURN TO MAIN LINE PROGRAM
RETURNAD DC    A(CPABEND)         PTR TO RETURN POINT IN MAIN PROGRAM
         END
