         TITLE 'INCORE COPY ROUTINE                                    *
                        '
IKJEBEDC CSECT ,                                                   0001
@PROLOG  DS    0H                                                  0002
        IKJEBESV (14,12),,*,,COMMREG=0(PARMREG1)
*        DATAREG = ADDR(CASRWKA);      /* PTR TO WORKAREA             *
         LA    DATAREG,CASRWKA(,COMMREG)                           0016
*        GENERATE;                     /* WORKAREA ADDRESSABILITY     *
        USING @DATD,DATAREG
*        INPTR = PARMREG1;             /* PTR TO INPUT PARAMETERS     *
         ST    PARMREG1,INPTR                                      0018
*        ENTRYCD = PARMREG0;           /* SAVE ENTRY CODE             *
*                                                                  0019
         ST    PARMREG0,ENTRYCD                                    0019
*        IF ENTRYCD = 0 THEN           /* IF ENTRY CODE IS 0          *
         L     @10,ENTRYCD                                         0020
         LTR   @10,@10                                             0020
         BNZ   @RF00020                                            0020
*          GETSP = 78;                 /* SET SUBPOOL TO 78           *
         MVI   GETSP,X'4E'                                         0021
*        ELSE                          /* OTHERWISE,                  *
*          GETSP = 1;                  /* SET SUBPOOL TO 1            *
         B     @RC00020                                            0022
@RF00020 MVI   GETSP,X'01'                                         0022
*        IF CAUTILNO = 0 THEN          /* IF NO RECORDS IN DS,        *
@RC00020 L     @10,CAUTILNO(,COMMREG)                              0023
         LTR   @10,@10                                             0023
         BNZ   @RF00023                                            0023
*          RETSAVE = 4;                /* INDICATE EMPTY DS           *
         MVC   RETSAVE(4),@CF00375                                 0024
*        ELSE                                                      0025
*          DO;                         /* IF NOT EMPTY DS,            *
         B     @RC00023                                            0025
@RF00023 DS    0H                                                  0026
*            IF CARECFM = '1'B THEN    /* IF RECFM IS FIXED           *
         TM    CARECFM(COMMREG),B'01000000'                        0026
         BNO   @RF00026                                            0026
*              DO;                     /* THEN                        *
*                LRECL = CALRECL-4;    /* GET LOGICAL RECORD LENGTH   *
         LH    @10,CALRECL(,COMMREG)                               0028
         SL    @10,@CF00375                                        0028
         ST    @10,LRECL                                           0028
*                INDEX = 8;            /* SET INDEX FOR COPY          *
         MVC   INDEX(2),@CH00058                                   0029
*              END;                                                0030
*            ELSE                      /* OTHERWISE,                  *
*              DO;                     /* ASSUME LRECL IS VARIABLE    *
         B     @RC00026                                            0031
@RF00026 DS    0H                                                  0032
*                LRECL = CALRECL;      /* GET LOGICAL RECORD LENGTH   *
         LH    @10,CALRECL(,COMMREG)                               0032
         ST    @10,LRECL                                           0032
*                INDEX = 4;            /* SET INDEX FOR COPY          *
         MVC   INDEX(2),@CH00375                                   0033
*              END;                                                0034
*            OUTLRECL = LRECL;         /* STORE LRECL IN OUTAREA      *
@RC00026 L     @10,LRECL                                           0035
         L     @08,INPTR                                           0035
         L     @08,OUTPTR(,@08)                                    0035
         ST    @10,OUTLRECL(,@08)                                  0035
*            GETLEN = LRECL * CAUTILNO;/* COMPUTE GETMAIN LENGTH      *
         LR    @03,@10                                             0036
         M     @02,CAUTILNO(,COMMREG)                              0036
         ST    @03,GETLEN                                          0036
*            GETMODE = '20'X;          /* SET MODE FOR GETMAIN        *
         MVI   GETMODE,X'20'                                       0037
*            PARMREG1 = ADDR(GETAREA); /* PTR TO PARMS IN REG 1       *
         LA    PARMREG1,GETAREA                                    0038
*            GENERATE;                 /* ISSUE GETMAIN               *
            GETMAIN ,A=GETPTR,MF=(E,(1))
*            IF RETCDREG = 0 THEN      /* IF GETMAIN SUCCESSFUL       *
         SLR   @14,@14                                             0040
         CR    RETCDREG,@14                                        0040
         BNE   @RF00040                                            0040
*              DO;                     /* THEN                        *
*                OUTDSPTR = GETPTR;    /* STORE ADDRESS IN OUTAREA    *
         L     @10,INPTR                                           0042
         L     @10,OUTPTR(,@10)                                    0042
         MVC   OUTDSPTR(4,@10),GETPTR                              0042
*                OUTCURLN = 0;         /* PTR TO 1ST LINE     @YM03458*
         ST    @14,OUTCURLN(,@10)                                  0043
*                OUTLENGH = GETLEN;    /* LENGTH OF DS                *
         MVC   OUTLENGH(4,@10),GETLEN                              0044
*                IF ENTRYCD = 0 THEN    /* IF SUBPOOL 78      @YM03458*
         C     @14,ENTRYCD                                         0045
         BNE   @RF00045                                            0045
*                  DO;                 /*                     @YM03458*
*                    CAPTICDS = ADDR(OUTDSPTR); /* PTR AND    @YM03458*
         ST    @10,CAPTICDS(,COMMREG)                              0047
*                    CAPTICLN = ADDR(OUTLENGH); /* LENGTH     @YM03458*
         LA    @10,OUTLENGH(,@10)                                  0048
         ST    @10,CAPTICLN(,COMMREG)                              0048
*                  END;                /*                     @YM03458*
*                DSPTR = GETPTR;       /* PTR TO 1ST RECORD POSITION  *
@RF00045 MVC   DSPTR(4),GETPTR                                     0050
*                CALL READUT;          /* COPY UTILITY TO INCORE DS   *
         BAL   @14,READUT                                          0051
*                CALL FREECHK;         /* CHECK FOR EXTRA CORE        *
         BAL   @14,FREECHK                                         0052
*              END;                                                0053
*            ELSE                      /* IF GETMAIN FAILED,          *
*              CALL NOCORE;            /* SET RETURN CODE             *
         B     @RC00040                                            0054
@RF00040 BAL   @14,NOCORE                                          0054
*          END;                                                    0055
@RC00040 DS    0H                                                  0056
*        RETCDREG = RETSAVE;           /* RETURN CODE IN REG 15       *
@RC00023 L     RETCDREG,RETSAVE                                    0056
*        GENERATE REFS(CANXTSVA);      /* EXIT LINKAGE                *
        IKJEBERT (14,12),,RC=(15)
*/*****                                                            0058
* * SEGMENT NAME -                                                 0058
* *      READUT                                                    0058
* *                                                                0058
* * FUNCTION -                                                     0058
* *      THIS ROUTINE READS RECORDS FROM THE UTILITY DATA SET, AND 0058
* *      MOVES THEM TO THE INCORE DATA SET UNTIL END OF FILE IS    0058
* *      REACHED.                                                  0058
* *                                                                0058
* * INPUT -                                                        0058
* *      ADDRESS OF UTILITY DATA SET                               0058
* *      ADDRESS OF INCORE DATA SET                                0058
* *                                                                0058
* * OUTPUT -                                                       0058
* *      RETURN CODE                                               0058
* *                                                                0058
* *******/                                                         0058
*                                                                  0058
*    READUT: PROC OPTIONS(NOSAVEAREA,DONTSAVE);                    0058
@EL00001 DS    0H                                                  0058
@EF00001 DS    0H                                                  0058
@ER00001 BR    @14                                                 0058
READUT   DS    0H                                                  0059
*        GENERATE REFS(CANXTSVA);      /* ENTRY LINKAGE               *
        IKJEBESV (14,12),,,CODEREG=NO,COMMREG=NO
*        UTOPTION = '84'X;             /* INDICATE READ FIRST         *
         MVI   UTOPTION,X'84'                                      0060
*        LOOP = '0'B;                  /* INITIALIZE LOOP CONTROL     *
         NI    LOOP,B'01111111'                                    0061
*        DO WHILE (LOOP='0'B);         /* BEGIN DO-WHILE              *
         B     @DE00062                                            0062
@DL00062 DS    0H                                                  0063
*          UTWORD1 = CAPTCDCB;         /* GET DCB ADDRESS             *
         MVC   UTWORD1(3),CAPTCDCB+1(COMMREG)                      0063
*          GENERATE REFS(CAPTUT);      /* READ A RECORD               *
          IKJEBESH (COMMREG),IKJEBEUT,PARAM=((COMMREG),UTOPTION),     XX
               MF=(E,AREAM)
*          IF RETCDREG = 0 THEN        /* IF READ SUCCESSFUL,         *
         LTR   RETCDREG,RETCDREG                                   0065
         BNZ   @RF00065                                            0065
*            DO;                       /* THEN                        *
*              UTRECPTR = PARMREG1;    /* PTR TO RECORD READ          *
         ST    PARMREG1,UTRECPTR                                   0067
*              IF UTRECKY = CACURNUM THEN                          0068
         L     @10,UTRECPTR                                        0068
         CLC   UTRECKY(4,@10),CACURNUM(COMMREG)                    0068
         BNE   @RF00068                                            0068
*                OUTCURLN = DSPTR;     /* UPDATE CUR LINE REF @YM03458*
         L     @10,INPTR                                           0069
         L     @10,OUTPTR(,@10)                                    0069
         MVC   OUTCURLN(4,@10),DSPTR                               0069
*                                      /* MOVE RECORD READ TO INCORE
*                                         DATA SET                    *
*              DYNAMREC(1:UTRECLL-INDEX+4) =                       0070
*              UTRECORD(INDEX+1:UTRECLL+INDEX-4);                  0070
@RF00068 L     @10,DSPTR                                           0070
         LH    @08,INDEX                                           0070
         L     @15,UTRECPTR                                        0070
         LH    @14,UTRECLL(,@15)                                   0070
         LR    @07,@14                                             0070
         SLR   @07,@08                                             0070
         AH    @07,@CH00164                                        0070
         ALR   @15,@08                                             0070
         EX    @07,@SM00436                                        0070
*                                      /* UPDATE RECORD PTR           *
*              DSPTR = DSPTR + UTRECLL - INDEX + 4;                0071
         ALR   @10,@14                                             0071
         SLR   @10,@08                                             0071
         AL    @10,@CF00375                                        0071
         ST    @10,DSPTR                                           0071
*              UTOPTION = '82'X;       /* INDICATE READ NEXT          *
         MVI   UTOPTION,X'82'                                      0072
*            END;                                                  0073
*          ELSE                        /* IF READ FAILED              *
*            IF RETCDREG > 4 THEN      /* DUE TO I/O ERROR            *
         B     @RC00065                                            0074
@RF00065 CH    RETCDREG,@CH00375                                   0074
         BNH   @RF00074                                            0074
*              DO;                     /* THEN                        *
*                RETSAVE = 12;         /* INDICATE I/O ERROR          *
         MVC   RETSAVE(4),@CF00145                                 0076
*                LOOP = '1'B;          /* EXIT DO-WHILE               *
         OI    LOOP,B'10000000'                                    0077
*              END;                                                0078
*            ELSE                      /* ELSE                        *
*              DO;                     /* ASSUME END OF DATA SET      *
         B     @RC00074                                            0079
@RF00074 DS    0H                                                  0080
*                RETSAVE = 0;          /* SET RETURN CODE             *
         SLR   @10,@10                                             0080
         ST    @10,RETSAVE                                         0080
*                LOOP = '1'B;          /* EXIT DO-WHILE               *
         OI    LOOP,B'10000000'                                    0081
*              END;                                                0082
*        END;                          /* END DO-WHILE                *
@RC00074 DS    0H                                                  0083
@RC00065 DS    0H                                                  0083
@DE00062 TM    LOOP,B'10000000'                                    0083
         BZ    @DL00062                                            0083
*        GENERATE REFS(CANXTSVA);      /* EXIT LINKAGE                *
*                                                                  0084
        IKJEBERT (14,12),,RC=(15)
*        END READUT;                                               0085
@EL00002 DS    0H                                                  0085
@EF00002 DS    0H                                                  0085
@ER00002 BR    @14                                                 0085
*/******                                                           0086
* * SEGMENT NAME -                                                 0086
* *      FREECHK                                                   0086
* *                                                                0086
* * FUNCTION -                                                     0086
* *      THIS ROUTINE DETERMINES IF A FREEMAIN IS NECESSARY, AND   0086
* *      ISSUES THE FREEMAIN.                                      0086
* *                                                                0086
* * INPUT -                                                        0086
* *      ADDRESS OF INCORE DATA SET                                0086
* *      RETURN CODE FROM READ FUNCTION                            0086
* *                                                                0086
* * OUTPUT -                                                       0086
* *      UNUSED CORE RELEASED                                      0086
* *                                                                0086
* ********/                                                        0086
*                                                                  0086
*   FREECHK: PROC OPTIONS(NOSAVEAREA,DONTSAVE);                    0086
FREECHK  DS    0H                                                  0087
*        GENERATE REFS(CANXTSVA);      /* ENTRY LINKAGE               *
        IKJEBESV (14,12),,,CODEREG=NO,COMMREG=NO
*        FREEBIT = '0'B;               /* INIT FREE INDICATOR         *
         NI    FREEBIT,B'10111111'                                 0088
*        IF RETSAVE = 0 THEN           /* IF END OF DS REACHED,       *
         SLR   @10,@10                                             0089
         C     @10,RETSAVE                                         0089
         BNE   @RF00089                                            0089
*          DO;                         /* THEN                        *
*            ACTSIZE = DSPTR-GETPTR;   /* COMPUTE ACTUAL DS SIZE      *
         L     @08,DSPTR                                           0091
         LR    @15,@08                                             0091
         SL    @15,GETPTR                                          0091
         ST    @15,ACTSIZE                                         0091
*            OUTLENGH = ACTSIZE;       /* STORE SIZE IN OUTAREA       *
         L     @14,INPTR                                           0092
         L     @14,OUTPTR(,@14)                                    0092
         ST    @15,OUTLENGH(,@14)                                  0092
*            EXTRA = GETLEN-ACTSIZE;   /* COMPUTE FOR EXTRA CORE      *
         LCR   @15,@15                                             0093
         AL    @15,GETLEN                                          0093
         ST    @15,EXTRA                                           0093
*            IF EXTRA > 0 THEN         /* IF CORE LEFT OVER           *
         CR    @15,@10                                             0094
         BNH   @RF00094                                            0094
*              DO;                     /* THEN                        *
*                FREEBIT = '1'B;       /* INDICATE TO FREE            *
         OI    FREEBIT,B'01000000'                                 0096
*                LEV2MSG = DSPTR;      /* ADDRESS IN REG              *
         LR    LEV2MSG,@08                                         0097
*                LEV1INS = 8;          /* CONSTANT 8 IN REG           *
         LA    LEV1INS,8                                           0098
*                GENERATE;             /* DIVIDE                      *
        DR    LEV1MSG,LEV1INS
*               IF LEV1MSG = 0                                     0100
*                  THEN DO;            /* IF NO REMAINDER,    @ZA17344*
         LTR   LEV1MSG,LEV1MSG                                     0100
         BNZ   @RF00100                                            0100
*                    FREEPTR = DSPTR;  /* POINTER AND         @ZA17344*
         MVC   FREEPTR(4),DSPTR                                    0102
*                    FREELEN = EXTRA;  /* LENGTH OK.          @ZA17344*
         MVC   FREELEN(4),EXTRA                                    0103
*                  END;                /*                     @ZA17344*
*               ELSE DO;               /* OTHERWISE,          @ZA17344*
         B     @RC00100                                            0105
@RF00100 DS    0H                                                  0106
*                FREEPTR = DSPTR+(8-LEV1MSG);     /* ROUND TO DWORD   *
         LA    @10,8                                               0106
         LR    @08,@10                                             0106
         SLR   @08,LEV1MSG                                         0106
         AL    @08,DSPTR                                           0106
         ST    @08,FREEPTR                                         0106
*                FREELEN = EXTRA-(8-LEV1MSG);     /* GET LEN TO FREE  *
         LCR   @10,@10                                             0107
         ALR   @10,LEV1MSG                                         0107
         AL    @10,EXTRA                                           0107
         ST    @10,FREELEN                                         0107
*               END;                              /*          @ZA17344*
*                IF FREELEN < 1 THEN                               0109
@RC00100 L     @10,FREELEN                                         0109
         LTR   @10,@10                                             0109
         BP    @RF00109                                            0109
*                  FREEBIT = '0'B;                                 0110
         NI    FREEBIT,B'10111111'                                 0110
*              END;                                                0111
*          END;                                                    0112
*        ELSE                                                      0113
*          IF RETSAVE = 12 THEN        /* IF I/O ERROR OCCURRED       *
         B     @RC00089                                            0113
@RF00089 CLC   RETSAVE(4),@CF00145                                 0113
         BNE   @RF00113                                            0113
*            DO;                       /* THEN                        *
*              FREEBIT = '1'B;         /* INDICATE TO FREE            *
         OI    FREEBIT,B'01000000'                                 0115
*              FREELEN = GETLEN;       /* SET LENGTH TO FREE          *
         MVC   FREELEN(4),GETLEN                                   0116
*              FREEPTR = GETPTR;       /* PTR TO AREA TO FREE         *
         MVC   FREEPTR(4),GETPTR                                   0117
*            END;                                                  0118
*                                                                  0118
*        IF FREEBIT = '1'B THEN        /* IF FREE INDICATED           *
@RF00113 DS    0H                                                  0119
@RC00089 TM    FREEBIT,B'01000000'                                 0119
         BNO   @RF00119                                            0119
*          DO;                         /* THEN                        *
*            FREEBIT = '0'B;           /* TURN OFF INDICATOR          *
         NI    FREEBIT,B'10111111'                                 0121
*            PARMREG0 = GETSP;         /* SET SUBPOOL                 *
         SLR   PARMREG0,PARMREG0                                   0122
         IC    PARMREG0,GETSP                                      0122
*            GENERATE;                 /* ISSUE FREEMAIN              *
        FREEMAIN V,A=FREEPARM,SP=(0),MF=(E,FREEX)
*          END;                                                    0124
*        GENERATE REFS(CANXTSVA);      /* EXIT LINKAGE                *
@RF00119 DS    0H                                                  0125
        IKJEBERT (14,12),,RC=(15)
*        END FREECHK;                                              0126
@EL00003 DS    0H                                                  0126
@EF00003 DS    0H                                                  0126
@ER00003 BR    @14                                                 0126
*/********                                                         0127
* * SEGMENT NAME -                                                 0127
* *      NOCORE                                                    0127
* *                                                                0127
* * FUNCTION -                                                     0127
* *      THIS ROUTINE ISSUES A MESSAGE NOTIFYING THE USER THAT NOT 0127
* *      ENOUGH STORAGE IS AVAILABLE FOR THE SUBCOMMAND TO EXECUTE.
* *                                                                0127
* * INPUT -                                                        0127
* *      ENTRY CODE                                                0127
* *                                                                0127
* * OUTPUT -                                                       0127
* *      MESSAGE ISSUED                                            0127
* *                                                                0127
* *******/                                                         0127
*                                                                  0127
*   NOCORE: PROC OPTIONS(NOSAVEAREA,DONTSAVE);                     0127
NOCORE   DS    0H                                                  0128
*        GENERATE REFS(CANXTSVA);     /* ENTRY LINKAGE               */
        IKJEBESV (14,12),,,CODEREG=NO,COMMREG=NO
*        RFY (LEV1MSG,LEV2MSG,LEV1INS,LEV2INS) RSTD;               0129
*        RETSAVE = 8;                  /* INDICATE GETMAIN ERROR      *
         MVC   RETSAVE(4),@CF00058                                 0130
*        LEV1MSG = 270;                /* 1ST LEVEL MSG               *
         LA    LEV1MSG,270                                         0131
*        LEV2MSG = 0;                  /* NO 2ND LEVEL MSG            *
         SLR   LEV2MSG,LEV2MSG                                     0132
*        MSGPTR = 0;                   /* SINGLE INSERTION            *
*                                                                  0133
         SLR   @10,@10                                             0133
         ST    @10,MSGPTR                                          0133
*        IF ENTRYCD = 0 THEN           /* IF ENTRY CODE 0             *
         C     @10,ENTRYCD                                         0134
         BNE   @RF00134                                            0134
*          DO;                         /* THEN                        *
*            MSGLEN = 7;               /* SET LENGTH OF INSERTION     *
         MVC   MSGLEN(2),@CH00126                                  0136
*            MSGTEXT = 'RUN';          /* SET INSERTION TEXT          *
         MVI   MSGTEXT+3,C' '                                      0137
         MVC   MSGTEXT+4(4),MSGTEXT+3                              0137
         MVC   MSGTEXT(3),@CC00431                                 0137
*          END;                                                    0138
*        ELSE                          /* IF ENTRY CODE 4             *
*          DO;                         /* THEN                        *
         B     @RC00134                                            0139
@RF00134 DS    0H                                                  0140
*            MSGLEN = 9;               /* SET LENGTH OF INSERTION     *
         MVC   MSGLEN(2),@CH00432                                  0140
*            MSGTEXT = 'RENUM';        /* SET INSERTION TEXT          *
         MVI   MSGTEXT+5,C' '                                      0141
         MVC   MSGTEXT+6(2),MSGTEXT+5                              0141
         MVC   MSGTEXT(5),@CC00433                                 0141
*          END;                                                    0142
*                                                                  0142
*        MSGOFF = 45;                  /* SET OFFSET FOR INSERTION    *
@RC00134 MVC   MSGOFF(2),@CH00434                                  0143
*        LEV1INS = ADDR(MSGAREA);      /* PTR TO INSERTION            *
         LA    LEV1INS,MSGAREA                                     0144
*        LEV2INS = 0;                  /* NO 2ND LEVEL INSERTION      *
*                                                                  0145
         SLR   LEV2INS,LEV2INS                                     0145
*        GENERATE REFS(CAPTMS);        /* ISSUE MESSAGE               *
        IKJEBEML (LEV1MSG),(LEV2MSG),(LEV1INS),(LEV2INS),MF=(E,AREAM)
*        RFY (LEV1MSG,LEV2MSG,LEV1INS,LEV2INS) UNRSTD;             0147
*        GENERATE REFS(CANXTSVA);      /* EXIT LINKAGE                *
        IKJEBERT (14,12),,RC=(15)
*        END NOCORE;                                               0149
*                                                                  0149
@EL00004 DS    0H                                                  0149
@EF00004 DS    0H                                                  0149
@ER00004 BR    @14                                                 0149
*        END IKJEBEDC                                              0150
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJEBECA)                                        *
*/*%INCLUDE SYSLIB  (IKJEBEMJ)                                        *
*;                                                                 0150
@DATA    DS    0H
@CH00164 DC    H'3'
@CH00126 DC    H'7'
@CH00432 DC    H'9'
@CH00434 DC    H'45'
@SM00436 MVC   DYNAMREC(0,@10),UTRECORD(@15)
@DATD    DSECT
         DS    0F
@ZTEMPS  DS    C
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
IKJEBEDC CSECT
         DS    0F
@CF00375 DC    F'4'
@CH00375 EQU   @CF00375+2
@CF00058 DC    F'8'
@CH00058 EQU   @CF00058+2
@CF00145 DC    F'12'
@DATD    DSECT
         DS    0D
DCWKAREA DS    CL132
         ORG   DCWKAREA
RETSAVE  DS    FL4
FREEX    DS    CL12
AREAM    DS    CL40
UTPARMS  DS    CL4
         ORG   UTPARMS
UTOPTION DS    BL1
UTWORD1  DS    AL3
         ORG   DCWKAREA+60
GETAREA  DS    CL10
         ORG   GETAREA
GETLEN   DS    FL4
@NM00023 DS    CL1
@NM00024 DS    CL3
GETMODE  DS    BL1
GETSP    DS    AL1
         ORG   DCWKAREA+70
SWITCHES DS    BL1
         ORG   SWITCHES
LOOP     DS    BL1
FREEBIT  EQU   SWITCHES+0
@NM00025 EQU   SWITCHES+0
         ORG   DCWKAREA+72
LRECL    DS    FL4
INDEX    DS    FL2
         DS    CL2
ACTSIZE  DS    FL4
EXTRA    DS    FL4
ENTRYCD  DS    FL4
INPTR    DS    AL4
GETPTR   DS    AL4
DSPTR    DS    AL4
UTRECPTR DS    AL4
FREEPARM DS    CL8
         ORG   FREEPARM
FREEPTR  DS    AL4
FREELEN  DS    FL4
         ORG   DCWKAREA+116
MSGAREA  DS    CL16
         ORG   MSGAREA
MSGPTR   DS    AL4
MSGLEN   DS    FL2
MSGOFF   DS    FL2
MSGTEXT  DS    CL8
         ORG   DCWKAREA+132
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKJEBEDC CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CC00433 DC    C'RENUM'
@CC00431 DC    C'RUN'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
PARMREG0 EQU   @00
PARMREG1 EQU   @01
LEV1MSG  EQU   @02
LEV2MSG  EQU   @03
LEV1INS  EQU   @04
LEV2INS  EQU   @05
COMMREG  EQU   @09
BASEREG  EQU   @11
DATAREG  EQU   @12
RETCDREG EQU   @15
RETREG   EQU   @14
SAVEREG  EQU   @13
IKJEBECA EQU   0
CAPTMS   EQU   IKJEBECA+20
CAPTUT   EQU   IKJEBECA+24
CAPTPRSD EQU   IKJEBECA+36
CAPRSPDL EQU   CAPTPRSD
CAPTIBFR EQU   IKJEBECA+40
CAPTCDCB EQU   IKJEBECA+52
CAUTILNO EQU   IKJEBECA+60
CAPTICDS EQU   IKJEBECA+80
CAPTICLN EQU   IKJEBECA+84
CAATTN   EQU   IKJEBECA+120
CACFLAG  EQU   IKJEBECA+124
CACFLAG1 EQU   CACFLAG
CACFLAG2 EQU   CACFLAG+1
CARECFM  EQU   CACFLAG2
CACFLAG3 EQU   CACFLAG+2
CAIMFLG  EQU   CACFLAG3
CACFLAG4 EQU   CACFLAG+3
CACFLAG5 EQU   CACFLAG+4
CACFLAG6 EQU   CACFLAG+5
CAPD     EQU   IKJEBECA+152
CADSATTR EQU   CAPD+41
CADSATR2 EQU   CAPD+42
CAPTPDXT EQU   IKJEBECA+228
CALRECL  EQU   IKJEBECA+232
CAEDFLAG EQU   IKJEBECA+236
CAEDFLG2 EQU   IKJEBECA+237
CASAFLAG EQU   IKJEBECA+376
CASAFLG2 EQU   IKJEBECA+377
CACURNUM EQU   IKJEBECA+456
CASYNLST EQU   IKJEBECA+496
CASYNWA  EQU   IKJEBECA+508
CASYNOPT EQU   IKJEBECA+524
CASYNSW  EQU   CASYNOPT+3
CATMPLST EQU   IKJEBECA+528
CAMAWKA  EQU   IKJEBECA+596
MACFLAGS EQU   CAMAWKA+28
MACFLAG2 EQU   CAMAWKA+29
CASRWKA  EQU   IKJEBECA+728
CAMODEMG EQU   IKJEBECA+928
CANXTSVA EQU   IKJEBECA+3896
IKJEBECX EQU   0
DYNAMREC EQU   0
UTRECORD EQU   0
UTRECKY  EQU   UTRECORD
UTRECLL  EQU   UTRECORD+4
INPARMS  EQU   0
OUTPTR   EQU   INPARMS+4
OUTAREA  EQU   0
OUTDSPTR EQU   OUTAREA
OUTLENGH EQU   OUTAREA+4
OUTLRECL EQU   OUTAREA+8
OUTCURLN EQU   OUTAREA+12
DYNAMDS  EQU   0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
EDCOMPTR EQU   INPARMS
CXDATEXT EQU   IKJEBECX
CAPDEXT  EQU   IKJEBECA+3984
CADSNRC2 EQU   IKJEBECA+3928
CADSNOF2 EQU   IKJEBECA+3926
CADSNLN2 EQU   IKJEBECA+3924
CADSNPT2 EQU   IKJEBECA+3920
@NM00022 EQU   IKJEBECA+3900
CASVAREA EQU   IKJEBECA+3176
CATEMPBF EQU   IKJEBECA+2648
CABFRPL  EQU   IKJEBECA+2120
CASCWKA  EQU   IKJEBECA+1448
CAFIBFR  EQU   IKJEBECA+1188
CAAEDCB  EQU   IKJEBECA+1096
CALDROP  EQU   IKJEBECA+1064
CAATNWKA EQU   IKJEBECA+956
CAATNBUF EQU   IKJEBECA+952
CAMODETX EQU   CAMODEMG+12
CAMODEOF EQU   CAMODEMG+10
CAMODELN EQU   CAMODEMG+8
CAMODEPT EQU   CAMODEMG+4
CAMODEIS EQU   CAMODEMG
CAMSWKA  EQU   IKJEBECA+628
@NM00021 EQU   CAMAWKA+30
@NM00020 EQU   MACFLAG2
MATABLE1 EQU   MACFLAG2
@NM00019 EQU   MACFLAGS
MAENDPRC EQU   MACFLAGS
MAABBREV EQU   MACFLAGS
MAECTMOD EQU   MACFLAGS
@NM00018 EQU   CAMAWKA
CASTAEPL EQU   IKJEBECA+576
CASTAXPL EQU   IKJEBECA+556
CASRPLST EQU   CATMPLST+12
CAPTECB  EQU   CATMPLST+8
CAPTECT  EQU   CATMPLST+4
CAPTUPT  EQU   CATMPLST
CASYNSCN EQU   CASYNSW
CASYNML  EQU   CASYNSW
CASYNSF  EQU   CASYNSW
CASYNRFM EQU   CASYNSW
CASYNIS  EQU   CASYNSW
@NM00017 EQU   CASYNSW
CASYNLN  EQU   CASYNSW
@NM00016 EQU   CASYNSW
CASYNRCL EQU   CASYNOPT+2
CASYNCD2 EQU   CASYNOPT+1
CASYNCD1 EQU   CASYNOPT
CASYNTEM EQU   CASYNWA+12
CASYNMS2 EQU   CASYNWA+8
CASYNMS1 EQU   CASYNWA+4
CASYNWAP EQU   CASYNWA+1
CASYNECD EQU   CASYNWA
CASYNPTO EQU   CASYNLST+8
CASYNPWA EQU   CASYNLST+4
CASYNBFR EQU   CASYNLST
@NM00015 EQU   IKJEBECA+484
CARECNO  EQU   IKJEBECA+480
CAINSAVE EQU   IKJEBECA+476
@NM00014 EQU   IKJEBECA+472
CAIMLINC EQU   IKJEBECA+468
CAIMLLNO EQU   IKJEBECA+464
CAINCRE  EQU   IKJEBECA+460
CANXTREC EQU   IKJEBECA+452
CASTNUM  EQU   IKJEBECA+448
CASAPSWD EQU   IKJEBECA+440
CASADDN  EQU   IKJEBECA+432
CASAMEMB EQU   IKJEBECA+424
CASADSN  EQU   IKJEBECA+380
CASADSNL EQU   IKJEBECA+378
CASADQTY EQU   CASAFLG2
CASANCTG EQU   CASAFLG2
CASAALOC EQU   CASAFLAG
CASAUNCG EQU   CASAFLAG
CASADSOR EQU   CASAFLAG
CASAMEM  EQU   CASAFLAG
CASADISP EQU   CASAFLAG
CASAINCP EQU   CASAFLAG
CASAFNCP EQU   CASAFLAG
CASAVEDS EQU   CASAFLAG
CADSNREC EQU   IKJEBECA+320
CADSNOFF EQU   IKJEBECA+318
CADSNLEN EQU   IKJEBECA+316
CADSNPTR EQU   IKJEBECA+312
CAEDTSIZ EQU   IKJEBECA+308
CAEDPSWD EQU   IKJEBECA+300
CAEDDDN  EQU   IKJEBECA+292
CAEDMEMB EQU   IKJEBECA+284
CAEDDSN  EQU   IKJEBECA+240
CAEDDSNL EQU   IKJEBECA+238
CAEDPRTC EQU   CAEDFLG2
CAEDALOC EQU   CAEDFLAG
CAEDUNCG EQU   CAEDFLAG
CAEDDSOR EQU   CAEDFLAG
CAEDMEM  EQU   CAEDFLAG
CAEDDISP EQU   CAEDFLAG
CAEDINCP EQU   CAEDFLAG
CAEDFNCP EQU   CAEDFLAG
CAEDITDS EQU   CAEDFLAG
CABLK2   EQU   IKJEBECA+234
@NM00013 EQU   IKJEBECA+226
CAPDEND  EQU   CAPD+82
CADATEXT EQU   CAPD+74
CAEXTNAM EQU   CAPD+66
CAPRNAME EQU   CAPD+58
CACHKOPT EQU   CAPD+56
CAULRLMX EQU   CAPD+54
CAULRLDF EQU   CAPD+52
CAVLRLMX EQU   CAPD+50
CAVLRLDF EQU   CAPD+48
CAFLRLMX EQU   CAPD+46
CAFLRLDF EQU   CAPD+44
CARECFMD EQU   CAPD+43
@NM00012 EQU   CADSATR2
CAINLIST EQU   CADSATR2
CARUNDS  EQU   CADSATR2
CAOBJGEN EQU   CADSATR2
CADSNDEF EQU   CADSATR2
CALINTAB EQU   CADSATR2
@NM00011 EQU   CADSATTR
CALRECLX EQU   CADSATTR
CALNNUM  EQU   CADSATTR
CADSCONT EQU   CADSATTR
CACAPSDF EQU   CADSATTR
CACAPSRQ EQU   CADSATTR
CASCAN   EQU   CADSATTR
CARUN    EQU   CADSATTR
CADSCODE EQU   CAPD+40
CASYNAME EQU   CAPD+32
CATABS   EQU   CAPD+20
CALENGTH EQU   CAPD+19
CALINE   EQU   CAPD+18
CABLKS   EQU   CAPD+16
CADSQUAL EQU   CAPD+8
CADSTYPE EQU   CAPD
@NM00010 EQU   CACFLAG+8
CAPLIRTM EQU   CACFLAG+7
CAPLILFM EQU   CACFLAG+6
@NM00009 EQU   CACFLAG6
CACHAR60 EQU   CACFLAG6
CACHAR48 EQU   CACFLAG6
CAFREE   EQU   CACFLAG6
@NM00008 EQU   CACFLAG5
CAEDLNDP EQU   CACFLAG5
CADSUSED EQU   CACFLAG4
CARECURS EQU   CACFLAG4
CAINPROC EQU   CACFLAG4
CASCRC20 EQU   CACFLAG4
CAABEND  EQU   CACFLAG4
CATPUTVF EQU   CACFLAG4
CAPTGTBF EQU   CACFLAG4
CAFINDIS EQU   CACFLAG4
@NM00007 EQU   CAIMFLG
CAIMINPT EQU   CAIMFLG
CAIMSFPT EQU   CAIMFLG
CAIMCIN  EQU   CAIMFLG
CAIMIR   EQU   CAIMFLG
CAIMSC   EQU   CAIMFLG
CAIMINS  EQU   CAIMFLG
CAIMPT   EQU   CAIMFLG
@NM00006 EQU   CACFLAG2
CAX37ABN EQU   CACFLAG2
CASEQCOL EQU   CACFLAG2
CAMODMSG EQU   CACFLAG2
CASCANON EQU   CACFLAG2
CADSMODS EQU   CACFLAG2
CANONUM  EQU   CACFLAG1
CACAPS   EQU   CACFLAG1
CAENDSC  EQU   CACFLAG1
CAINITSC EQU   CACFLAG1
CASCANSW EQU   CACFLAG1
CAPROMPT EQU   CACFLAG1
CAVRFYSW EQU   CACFLAG1
CALNTOVF EQU   CACFLAG1
CAATTNIS EQU   CAATTN
@NM00005 EQU   CAATTN
@NM00004 EQU   IKJEBECA+118
CAMAXBLK EQU   IKJEBECA+116
CAESDSPL EQU   IKJEBECA+112
@NM00003 EQU   IKJEBECA+88
CAPTNBFR EQU   IKJEBECA+76
CAPTCHK  EQU   IKJEBECA+72
CACORELN EQU   IKJEBECA+68
CAPTCORE EQU   IKJEBECA+64
CAPTPDCB EQU   IKJEBECA+56
@NM00002 EQU   IKJEBECA+50
CASCMDLN EQU   IKJEBECA+48
CAPTSCMD EQU   IKJEBECA+44
CAOPERND EQU   CAPTIBFR
CAFREEDL EQU   CAPRSPDL
CAPTRTRY EQU   IKJEBECA+32
CAPTMSGM EQU   IKJEBECA+28
CAPTLE   EQU   IKJEBECA+16
CAPTAT   EQU   IKJEBECA+12
CAPTAE   EQU   IKJEBECA+8
@NM00001 EQU   IKJEBECA+4
CAPTTMP  EQU   IKJEBECA
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00094 EQU   @RC00089
@RF00109 EQU   @RC00089
@PB00004 EQU   @EL00001
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IKJEBEDC,(C'PLS2016',0701,77066)
