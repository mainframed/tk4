                 TITLE 'GET CELL ROUTINE --- IEAVGTCL'
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVGTCL
*
*02*     CSECT-NAME = IEAVGTCL
*
*01*  DESCRIPTIVE-NAME = GET CELL FROM A QUICK-CELL POOL
*
*01*  COPYRIGHT = NONE
*01*  STATUS = 02.00 -- 2/28/73
*
*01*  FUNCTION = ALLOCATE A CELL FROM A  QUICK-CELL POOL
*
*02*     OPERATION = USING THE CPID TO IDENTIFY AND LOCATE THE PROPER
*        POOL, THE GET CELL ROUTINE FINDS THE FIRST AVAILABLE CELL IN
*        THE FIRST NON-EMPTY SEGMENT (EXTENT) OF THE POOL. THE CELL
*        THUS FOUND IS SYNCHRONOUSLY DEQUEUED AND TESTES FOR ADDRESS
*        VALIDITY (IS THE ADDRESS IN THE POOL BOUNDS AND ON AN INTEGRAL
*        CELL BOUNDARY?). IF IT PASSES THESE TESTS, IT IS MARKED AS
*        ALLOCATED FROM THIS POOL AND RETURNED TO THE CALLER.
*
*01*   NOTES = STANDARD LINKAGE CONVENTIONS
*
*02*     DEPENDENCIES = 370R-MP INSTRUCTION SET (CS AND CDS)
*
*03*        CHARACTER-CODE-DEPENDENCIES = NONE
*02*     RESTRICTIONS = DESIGN RESTRICTION --- CANNOT USE REGISTERS 5
*        THROUGH 13 INCLUSIVE.
*
*02*     REGISTER-CONVENTIONS = SEE REGISTER EQUATES AFTER CSECT
*        STATEMENT.
*
*02*     PATCH-LABEL = NUCLEUS PATCH AREA
*
*01*  MODULE-TYPE = MACRO-INVOKED PROCESSING SUBROUTINE
*
*02*     PROCESSOR = ASSEMBLER-370R
*
*02*     MODULE-SIZE = 380 BYTES
*
*02*     ATTRIBUTES = REFRESHABLE NUCLEUS
*
*01*  ENTRY-POINT = IEAVGTCL
*
*02*     PURPOSE = TO ACQUIRE A CELL FROM A QUICK-CELL POOL.
*
*02*     LINKAGE = ENTERED VIA BALR 14,15 .... ENTRY SHOULD BE MADE
*        USING THE GETCELL MACRO.
*
*02*     INPUT = THE MACRO PLACES THE ADDRESS OF THE CVT IN REGISTER 3.
*        REGISTER 0 CONTAINS THE ID OF THE POOL (CPID).
*
*02*     OUTPUT = NORMAL OUTPUT IS THE ADDRESS OF THE ACQUIRED CELL,
*        AND A CHANGED POOL (PRIOR FIRST CELL REMOVED). SEE THE EXITS
*        FOR SPECIFIC OUTPUT ITEMS.
*
*02*     REGISTERS-SAVED = NONE ... REGISTERS 1 THROUGH 4 AND 15
*        WILL BE CHANGED
*02*     REGISTER-USAGE = SEE COMMENTS ON REGISTER EQUATES
*
*02*     REGISTERS-RESTORED = NONE
*01*  EXIT-NORMAL = UNNAMED EXIT POINT
*
*02*     CONDITIONS = A CELL HAS BEEN ALLOCATED
*
*02*     OUTPUT = REG 1 = ADDRESS OF ALLOCATED CELL.
*
*02*     RETURN-CODES = 0 = CELL ALLOCATED
*
*01*  EXIT-ERROR = GTCERR04
*
*02*     CONDITIONS = NO AVAILABLE CELLS
*
*02*     OUTPUT = RETURN CODE
*
*02*     RETURN-CODES = 4
*
*01*  EXIT-ERROR = GTCERR08
*
*02*     CONDITIONS = THE POOL POINTERS TO AVAILABLE CELLS HAVE BEEN
*        DESTROYED.
*
*02*     OUTPUT = ZEROED DEQUEUE COUNT AND FIRST AVAILABLE CELL POINTER
*        IN THE CPAB.
*
*02*     RETURN-CODES = 8
*
*01*  EXIT-ERROR = GTCERR12
*
*02*     CONDITIONS = THE POOL HAS NEVER BEEN FORMATTED.
*
*02*     OUTPUT = RETURN CODE.
*
*02*     RETURN-CODES = 12
*
*01*  EXIT-ERROR = GTCERR16
*
*02*     CONDITIONS = THE CPID SPECIFIED HAS NOT BEEN DEFINED TO THE
*        SYSTEM VIA A BLDCPOOL.
*
*02*     OUTPUT = RETURN CODE
*
*02*     RETURN-CODES = 16
*
*01*  EXTERNAL-REFERENCES = CVT, GDA, AND CPAB
*
*02*     ROUTINES = NONE
*02*     DATA-AREAS = NONE
*02*     CONTROL-BLOCKS = CPAB (CELL POOL ANCHOR BLOCK) - READ AND
*        WRITE. CVT AND GDA - READ ONLY.
*
*01*  TABLES = NONE
*01*  MACROS = NONE
*02*     SERIALIZATION = THE 'CPABFLGW' FIELD IS USED TO SERIALIZE ALL
*        OPERATIONS ON ANY SINGLE POOL EXTENT, REGARDLESS OF THE TYPE
*        OF OPERATION. THIS FIELD IS MANIPULATED WITH THE 'CS' (COMPARE
*        AND SWAP) INSTRUCTION. ONE BIT IN THIS FIELD, 'DELETELK', IS
*        USED TO INDICATE THAT THE EXTENT IS BEING DELETED FROM THE
*        POOL. IF A DELETE IS OCCURING (THE BIT IS 'ON'), ALL OTHER
*        OPERATIONS ARE PROHIBITED ON THE EXTENT BEING DELETED. IF NO
*        DELETE IS OCCURRING, THE USE COUNT 'CPABUSE#' IS USED TO
*        PREVENT A DELETE FROM STARTING IN THE MIDDLE OF SOME OTHER
*        PROCESS. A NON-ZERO VALUE FOR 'CPABUSE#' WILL PREVENT AN
*        EXTENT FROM BEING DELETED. ONCE THE EXTENT HAS BEEN LOCKED
*        AGAINST DELETES, THE DOUBLE-WORD FIELD CONSISTING OF
*        'CPABDEQC' AND 'CPABFACP' IS USED TO SERIALIZE THE ACQUISITION
*        AND RELEASE OF CELLS IN THE SINGLE EXTENT. THIS DOUBLE-WORD
*        FIELD IS MANIPULATED WITH THE 'CDS' (COMPARE DOUBLE AND SWAP)
*        INSTRUCTION.
*
*01*  CHANGE-ACTIVITY = NEW FOR OS/VS2 RELEASE 2.
*
*01*  MESSAGES = NONE
*01*  ABEND-CODES = NONE
**** END OF SPECIFICATIONS ***/
                 EJECT
*/*GETCELL: CHART (AMODE) */
*/* HEADER
*/*DYNAMIC QUICKCELL FUNCTION
*/*                                               GET CELL ROUTINE
*/*
*/*                            PAGE # */
*/*IEAVGTCL:1A1 E   (,%D1) BRANCH ENTRY */
*/*%D1:1B1     D   (YES,PERMCPID,NO,%DYN) PERMANENT CPID? */
*/*PERMCPID:   P   (,GOTCPAB) CALCULATE CPAB OFFSET IN CPAB TABLE */
*/*%DYN:1B2    D   (YES,GTCERR16,NO,%DY2) NULL CPID (=0)? */
*/*%DY2:1B3    P   (,GOTCPAB) CALCULATE CPAB ADDRESS */
*/*GOTCPAB:    D   (NO,GTCERR16,YES,GTCRETRY) CPID MATCH ONE IN CPAB?*/
*/*GTCRETRY:1E1 D  (YES,DLCKCHK,NO,GNXTCPAB) ANY CELLS AVAILABLE? */
*/*DLCKCHK:    D   (YES,%EXT2,NO,%DLCK) EXTENT BEING DELETED? */
*/*%DLCK:      P   (,DEQLOOP) LOCK OUT DELETE (RAISE USE COUNT) */
*/*DEQLOOP:    M   (,%ANY) SET UP FOR NEXT CDS TO TAKE CELL */
*/*%ANY:       D   (YES,%CDS2,NO,EXTEMPTY) ANY CELLS LEFT IN THE
*/*EXTENT ? */
*/*%CDS2:1G1   D   (YES,%LIM,NO,DEQLOOP) 'CDS' - IS IT MINE? */
*/*EXTEMPTY:   P   (,GNXTCPAB) UNLOCK THE EXTENT (LOWER THE USE COUNT)
*/**/
*/*%LIM:1H1    D   (YES,%BDY,NO,GTCERR08) CELL ADDR IN POOL LIMITS? */
*/*%BDY:1J1    D   (YES,%CFREE,NO,GTCERR08) CORRECT CELL BOUNDARY? */
*/*%CFREE:1K1  D   (YES,%TAKE,NO,GTCERR08) IS THE CELL FREE? */
*/*%TAKE:1K2   P   (,%RC0) STORE CPID IN CELL'S LAST WORD */
*/*%RC0:1K3    R   RC=0 -NORMAL- */
*/*GTCERR08:1H2 M  (,%CDS3) SET UP FOR 'CDS' TO INDICATE BAD POOL */
*/*%CDS3:1J2   D   (YES,%RC8,NO,GTCERR08) 'CDS' HAVE I STORED? */
*/*%RC8:1J3    R   RC=8 */
*/*GTCERR16:   R   RC=16 */
*/*GNXTCPAB:   D   (YES,%NCPAB,NO,%EXT2) ANY OTHER EXTENTS? (CPABE'S)*/
*/*%NCPAB:1F2  P   (,GTCRETRY) GET NEXT CPABE ADDRESS */
*/*%EXT2:1E4   D   (NO,GTCERR04,YES,GTCERR12) UNFORMATTED POOL?  */
*/*GTCERR12:   R   RC=12 */
*/*GTCERR04:   R   RC=4 */
*/*GETCELL:    END */
         EJECT
IEAVGTCL CSECT
CELLLINK EQU   0              CELL LINKAGE POINTER (LAST WORD IN CELL)
R0       EQU   0              CPID -- INPUT PARAMETER
R1       EQU   1              CELL ADDRESS -- OUTPUT PARAMETER
@R2      EQU   2              SCRATCH REGISTER
@R3      EQU   3              SCRATCH REGISTER
*                             ON INPUT, R3 CONTAINS CVT ADDRESS
R4       EQU   4              CPAB ADDRESS (CALCULATED)
*        NOTE: REGS 5 THROUGH 13 ARE EXPRESSLY FORBIDDEN FOR USE       *
               BY THIS ROUTINE.
R14      EQU   14             RETURN ADDRESS
R15      EQU   15             ENTRY POINT ADDRESS (BASE REGISTER)
         USING IEAVGTCL,R15
         MODID BR=YES
         LTR   R4,R0          TEST CPID VALUE AND SET CPAB ADDR. BASE
         BM    PERMCPID       NEGATIVE, PERMANENT (SYSTEM) CPID
         BZ    GTCERR16       NULL (=0), ERROR CONDITION
**********************************************************************
*        THE CPID HAS BEEN FOUND TO BE A DYNAMIC POOL ID AND
*        THE ADDRESS OF THE FIRST CPAB IS FOUND FROM THE CPID
*        BY MULTIPLYING IT BY 4.
*        THE CPAB ADDRESS IS TAKEN FROM THE CPID (ALREADY IN REG 4)
**********************************************************************
         SLL   R4,2           MULTIPLIED BY 4.
         B     GOTCPAB        RETURN TO COMMON MAINLINE
         SPACE
**********************************************************************
*        A PERMANENT (SYSTEM) CPID HAS BEEN PASSED, THE CPAB
*        ADDRESS IS FOUND BY USING THE LOW-ORDER BYTE OF THE
*        ID AS AN INDEX INTO A TABLE OF CPAB'S. THE TABLE IS
*        FOUND FROM THE GLOBAL DATA AREA (GDA), WHOSE ADDRESS
*        IS FOUND IN THE CVT.
**********************************************************************
PERMCPID EQU   *
         USING CVT,@R3
         L     @R3,CVTGDA     GDA ADDRESS
         USING GDA,@R3
*        THE CPID IS ALREADY IN REG 4, LET CPAB ADDRESS = CPID
         N     R4,F255             // 256 (MODULO DIVISION)
         SLL   R4,5                * 32 (CPAB LENGTH)
         A     R4,PFSTCPAB         + CPAB TABLE ADDRESS
*****    NOTE: THIS CALCULATION IS DEPENDENT UPON THE LENGTH OF THE    *
               CPAB REMAINING AT 32.
         EJECT
**********************************************************************
*        COMMON PATH******** AFTER FINDING THE CPAB FOR THE
*        ID GIVEN, CHECK FOR MATCHING CPID'S, AND EMPTY
*        POOLS.
**********************************************************************
GOTCPAB  EQU   *
         USING CPAB,R4
         C     R0,CPABCPID    CPID'S MATCH ?
         BNE   GTCERR16            NO, ERROR CONDITION
GTCRETRY EQU   *
         L     @R3,CPABFACP   GET ADDRESS OF FIRST AVAILABLE CELL
         LTR   @R3,@R3        IS THIS EXTENT EMPTY?
         BZ    GNXTCPAB       YES, GET NEXT CPAB ADDRESS
         SPACE 3
**********************************************************************
*        NOW THAT AN EXTENT HAS BEEN FOUND THAT HAS AT LEAST ONE
*        AVAILABLE CELL, CHECK TO SEE IF A DELETE IS
*        IN PROCESS TO DETERMINE IF THE CELL SHOULD NOT BE
*        OBTAINED FROM THIS EXTENT.
**********************************************************************
DLCKCHK  EQU   *
         L     @R2,CPABFLGW   GET LOCKING FLAGS AND COUNT
         LR    @R3,@R2        COPY THEM FOR TESTING
         N     @R3,DLFLGOFF   TURN OFF DELETE FLAG IN COPY
         CR    @R2,@R3        IF THEY ARE THE SAME, THE LOCK
*                             WAS ALREADY OFF.
         BNE   GTCERR20       OTHERWISE A DELETE IS IN PROCESS
*****    NOTE **** THIS INSTRUCTION CANNOT BE REPLACED BY A LOAD
*        ADDRESS (LA) BECAUSE THERE IS A SUBPOOL NUMBER IN THE HIGH-
*        ORDER BYTE OF THIS FIELD.
         LR    @R3,@R2        NO DELETE GOING ON, LOCK OUT DELETE
         A     @R3,F1         BY RAISING THE OPERATION COUNT.
         CS    @R2,@R3,CPABFLGW    STORE LOCKS IF NOTHING HAS
*                                  HAPPENED TO CHANGE THE STATUS.
         BNE   DLCKCHK        STATUS CHANGED, SEE WHY.
         EJECT
**********************************************************************
*        NO DELETES ARE IN PROCESS AND DELETE IS LOCKED OUT OF
*        THIS EXTENT, OBTAIN THE CELL FROM THE POOL.
**********************************************************************
DEQLOOP  EQU   *
*********      FROM NOW ON, THE CPID IS NOT AVAILABLE IN A
*              REGISTER, AND REGISTER 0 WILL CONTAIN VARYING
*              DATA.
         LM    R0,R1,CPABDEQC      GET DEQUEUE COUNT AND FIRST
*                                  AVAILABLE CELL POINTER FROM
*                                  THE CPAB.
         LTR   @R3,R1         COPY FIRST AVAILABLE POINTER
         BZ    EXTEMPTY       BRANCH IF THE EXTENT HAS GONE EMPTY
         A     @R3,CPABCSZE   GET LINK POINTER ADDRESS FOR THE
*                             CELL BEING TAKEN.
         L     @R3,CELLLINK(@R3)    REMOVE THE FIRST CELL
         LR    @R2,R0         INCREASE THE DEQUEUE COUNT BY 1
         A     @R2,F1
         CDS   R0,@R2,CPABDEQC     DEQUEUE THE CELL FROM THE POOL
         BNE   DEQLOOP        DEQUEUE FAILED, TRY AGAIN
         SPACE 3
**********************************************************************
*        A CELL HAS BEEN OBTAINED FROM THE POOL, NOW CHECK
*        TO SEE THAT IT IS A PROPER CELL. THIS IS DONE BY
*        TESTING ITS BOUNDARIES FOR RESIDENCE INSIDE THE
*        EXTENT FROM WHICH IT WAS OBTAINED, AND BY CHECKING
*        THAT IT STARTS ON AN INTEGRAL BOUNDARY WITHIN ITS
*        EXTENT.
**********************************************************************
         C     R1,CPABSTAD    CHECK CELL AGAINST LOW BOUND
         BL    GTCERR08       OUT OF BOUNDS, ERROR CONDITION
         L     @R3,CPABCSZE   GET CELL LENGTH
         LA    @R2,4(@R3,R1)  SET UP ADDRESS OF END OF CELL
         C     @R2,CPABENAD   TEST CELL END AGAINST UPPER BOUND
         BH    GTCERR08       OUT OF BOUNDS, ERROR CONDITION
         EJECT
**********************************************************************
*        CHECK TO SEE THAT THE CELL IS ON AN INTEGRAL BOUNDARY
*        WITHIN THAT EXTENT.
**********************************************************************
         LA    R0,4(@R3)       R0 = COMPLETE CELL SIZE - LINK
*                             WORD LENGTH (4) IS INCLUDED
         LR    @R3,R1         TAKE THE CELL ADDRESS AND SUBTRACT
         S     @R3,CPABSTAD        THE STARTING ADDRESS OF THE POOL,
         BZ    SKIPDVD             THIS GIVES THE RELATIVE ADDRESS
*                                  OF THE CELL IN THE POOL. IF
*                                  IT IS ZERO, SKIP DIVISION.
         SR    @R2,@R2        CLEAR FOR DIVISION
         DR    @R2,R0         DIVIDE BY CELL LENGTH
         LTR   @R2,@R2        IF REMAINDER IS ZERO, CELL IS
*                             ON AN INTEGRAL BOUNDARY.
         BNZ   GTCERR08       IF NOT, ERROR CONDITION
         SPACE 2
**********************************************************************
*        NOW THAT THE CELL HAS BEEN SHOWN TO BE VALID, STORE
*        THE CPID IN IT FOR FUTURE REFERENCE WHEN FREEING THE
*        CELL.
**********************************************************************
SKIPDVD  EQU   *
         TM    CPABFLGS,CPABEXTN   IS THIS AN EXTENSION CPAB?
         BZ    NOLOAD         NO, SKIP ADDRESS LOADING
         L     @R3,CPABCPID   YES, LOAD THE ADDRESS OF THE FIRST CPAB
         L     R0,CPABCPID-CPAB(@R3)  GET THE TRUE CPID
         B     STORCPID            RETURN TO MAINLINE
         SPACE 2
NOLOAD   EQU   *
         L     R0,CPABCPID    GET THE TRUE CPID
STORCPID EQU   *
         L     @R3,CPABCSZE   GET THE CELL SIZE FROM THE CPAB
         C     R0,CELLLINK(@R3,R1) IS THE CELL ALREADY ALLOCATED?
         BE    GTCERR08       YES, ERROR, EXTENT DESTROYED
         ST    R0,CELLLINK(@R3,R1) STORE THE CPID IN THE CELL
         EJECT
**********************************************************************
*        THE CELL HAS BEEN SUCCESSFULLY OBTAINED FROM THE POOL,
*        NOW THE POOL EXTENT MUST BE UNLOCKED TO ALLOW
*        OTHER OPERATIONS.
**********************************************************************
UNLCKLP  EQU   *
         L     @R2,CPABFLGW   GET THE LOCKING FLAGS AND USE COUNT
         LR    @R3,@R2        COPY THEM
         BCTR  @R3,0          REDUCE THE USE COUNT
         CS    @R2,@R3,CPABFLGW    UNLOCK THE EXTENT
         BNE   UNLCKLP        FAILED, TRY AGAIN
         SPACE 2
**********************************************************************
*        THE CELL HAS BEEN SUCCESSFULLY OBTAINED FROM THE POOL, AND
*        THE POOL IS UNLOCKED, RETURN TO THE USER.
*        REGISTER 1 = ADDRESS OF THE CELL
*        REGISTER 0 = CPID OF THE POOL
**********************************************************************
         SR    R15,R15        SET RETURN CODE = 0
         BR    R14            RETURN TO THE CALLER
         SPACE 2
**********************************************************************
*        THE EXTENT HAS BEEN DRAINED OF CELLS BY ONE OR MORE CONCURRENT
*        OPERATIONS, IT MUST BE ABANDONED, BUT FIRST, WE MUST
*        TAKE OFF THE LOCK ON THE POOL EXTENT ( THE USE COUNT).
**********************************************************************
EXTEMPTY EQU   *
         L     @R2,CPABFLGW   GET THE LOCKING FLAGS AND USE COUNT
         LR    @R3,@R2        COPY THEM
         BCTR  @R3,0          REDUCE THE USE COUNT
         CS    @R2,@R3,CPABFLGW    UNLOCK THE EXTENT
         BE    GNXTCPAB       SUCCESS, GET NEXT EXTENT
         B     EXTEMPTY       FAILED, TRY AGAIN
         EJECT
**********************************************************************
*        IF THERE WERE NO FREE CELLS IN THE EXTENT UNDER INVESTIGATION
*        AND THERE ARE MORE EXTENTS TO CHECK, CONTINUE THE SEARCH
*        FOR AN EXTENT IN WHICH THERE IS A FREE CELL.
**********************************************************************
GNXTCPAB EQU   *
         CLC   CPABNXTP,F0    IS THERE ANOTHER EXTENT?
         BE    GTCFMTCK       NO, CHECK IF POOL WAS FORMATTED
         L     R4,CPABNXTP    YES, GET ADDRESS OF NEXT CPAB
         B     GTCRETRY       AND CONTINUE THE SEARCH
GTCFMTCK EQU   *
         L     @R2,CPABSTAD   GET POOL START ADDRESS
         LTR   @R2,@R2        HAS THE POOL BEEN FORMATTED?
         BZ    GTCERR12            NO, ERROR CONDITION
**********************************************************************
*        THE POOL IS EMPTY OF CELLS, BUT IT IS FORMATTED,
*        ERROR CODE = 4
**********************************************************************
GTCERR04 EQU   *
         SPACE
**********************************************************************
*        THE FIRST EXTENT IN WHICH A FREE CELL COULD BE FOUND
*        WAS BEING DELETED, RETURN AN ERROR CODE.
**********************************************************************
GTCERR20 EQU   *
         SR    R1,R1               ASSURE NO APPARENT ADDR. IS RETURNED
         LA    R15,4               SET UP THE NECESSARY RETURN CODE.
         BR    R14                 RETURN TO CALLER
         EJECT
**********************************************************************
*        AN ERROR HAS OCCURRED INDICATING THAT THE EXTENT IS DESTROYED,
*        THE POINTERS IN THE CELL POOL ANCHOR BLOCK MUST BE SET UP TO
*        PREVENT ANY ATTEMPTED GETCELLS FROM THIS EXTENT. THIS IS
*        DONE BY SETTING THE DEQUEUE COUNT AND FIRST CELL POINTER
*        TO ZERO.
**********************************************************************
GTCERR08 EQU   *
         LM    @R2,@R3,CPABDEQC    GET DEQUEUE COUNT AND FIRST
*                                  AVAILABLE CELL POINTER FROM
*                                  THE CPAB.
         SR    R0,R0          SET UP ZERO VALUES FOR DESTROYED CPAB
         SR    R1,R1          THE USER WILL RECEIVE ZEROED PARAMETERS
         CDS   @R2,R0,CPABDEQC     DEQUEUE THE CELL FROM THE POOL
         BNE   GTCERR08       DEQUEUE FAILED, TRY AGAIN
**********************************************************************
*        NOW THE POOL EXTENT MUST BE UNLOCKED TO ALLOW
*        OTHER OPERATIONS.
**********************************************************************
EUNLCKLP EQU   *
         L     @R2,CPABFLGW   GET THE LOCKING FLAGS AND USE COUNT
         LR    @R3,@R2        COPY THEM
         BCTR  @R3,0          REDUCE THE USE COUNT
         CS    @R2,@R3,CPABFLGW    UNLOCK THE EXTENT
         BNE   EUNLCKLP     FAILED, TRY AGAIN
**********************************************************************
*        RETURN AN ERROR CODE INDICATING THAT THE POOL IS NO LONGER
*        RELIABLE, OR CONTAINS AT LEAST ONE BAD EXTENT.
**********************************************************************
         SR    R1,R1          ASSURE NO APPARENT ADDR. IS RETURNED
         LA    R15,8          SET UP THE REQUIRED RETURN CODE.
         BR    R14            RETURN TO THE CALLER.
         SPACE
**********************************************************************
*        THIS POOL HAS NOT BEEN FORMATTED, RETURN AN ERROR CODE
**********************************************************************
GTCERR12 EQU   *
         SR    R1,R1          ASSURE NO APPARENT ADDR. IS RETURNED
         LA    R15,12         SET UP THE REQUIRED RETURN CODE.
         BR    R14            RETURN TO THE CALLER .
         SPACE 2
**********************************************************************
*        AN INVALID CPID HAS BEEN GIVEN, RETURN WITH AN ERROR CODE
**********************************************************************
GTCERR16 EQU   *
         SR    R1,R1          ASSURE NO APPARENT ADDR. IS RETURNED
         LA    R15,16         SET UP THE PROPER RETURN CODE.
         BR    R14            RETURN TO THE CALLER.
         EJECT
**********************************************************************
*        CONSTANTS REQUIRED BY THE GET CELL SERVICE ROUTINE
**********************************************************************
F255     DC    F'255'         USED FOR MODULO DIVIDE BY 256
F0       DC    F'0'           FIELD USED TO TEST FOR EMPTY QUEUE
F1       DC    F'1'           USED TO INCREASE USE COUNT
DLFLGOFF DC    X'FF',AL1(X'FF'-DELETELK),2X'FF'
         SPACE 2
CVT      DSECT
         CVT
         EJECT
         IHAGDA   DSECT=YES
         EJECT
         IHACPAB  DSECT=YES
         END
