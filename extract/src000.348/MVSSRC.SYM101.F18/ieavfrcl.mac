         TITLE 'FREE CELL ROUTINE -- IEAVFRCL'
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVFRCL
*
*02*     CSECT-NAME = IEAVFRCL
*
*01*  DESCRIPTIVE-NAME = FREE CELL
*
*01*  COPYRIGHT = NONE
*01*  STATUS = OS/VS2 RELEASE 3.0/3.7
*              PTF LEVEL UZ15960
*
*01*  FUNCTION = RETURN A CELL TO A POOL OF CELLS (QUICKCELL POOL).
*
*02*     OPERATION = THIS ROUTINE WILL RETURN A CELL TO THE QUICKCELL
*        POOL FROM WHICH IT WAS PREVIOUSLY OBTAINED BY THE GETCELL
*        FUNCTION. IT PERFORMS VERIFICATIONS ON THE CELL TO ASSURE THAT
*        IT WAS ALLOCATED FROM THE GIVEN POOL. THIS IS
*        DONE BY LOOKING FOR THE POOL ID (CPID) IN THE LAST WORD OF THE
*        CELL, AND BY CHECKING THAT THE CELL LIES FULLY WITHIN THE
*        BOUNDS OF ONE OF THE POOL EXTENTS. IT FURTHER CHECKS THAT THE
*        CELL IS A PROPER CELL BASED UPON ITS RELATIVE BOUNDARY IN THE
*        POOL EXTENT. IF ANY OF THESE TESTS FAIL, THE CELL WILL NOT BE
*        ACCEPTED. OTHERWISE, IT WILL BE ENQUEUED INTO THE POOL IN
*        PUSH-DOWN FASHION.
*
*01*   NOTES = STANDARD LINKAGE CONVENTIONS
*
*02*     DEPENDENCIES = 370R-MP INSTRUCTION SET (CS AND CDS).
*
*03*        CHARACTER-CODE-DEPENDENCIES = NONE
*02*     RESTRICTIONS = MAY NOT USE REGISTERS 2 THROUGH 13 INCLUSIVE --
*        THIS IS A DESIGN DESIGN RESTRICTION.
*
*02*     REGISTER-CONVENTIONS = SEE REGISTER EQUATES AFTER CSECT
*        STATEMENT.
*
*02*     PATCH-LABEL = NUCLEUS PATCH AREA
*
*01*  MODULE-TYPE = MACRO-INVOKED PROCESSING SUBROUTINE
*
*02*     PROCESSOR = ASSEMBLER-370R
*
*02*     MODULE-SIZE = 350 BYTES
*
*02*     ATTRIBUTES = REFRESHABLE NUCLEUS RESIDENT
*
*01*  ENTRY-POINT = IEAVFRCL
*
*02*     PURPOSE = RETURN A CELL TO A QUICKCELL POOL.
*
*02*     LINKAGE = ENTERED VIA BALR 14,15 --- THE MACRO FREECELL SHOULD
*        BE USED FOR INVOKATION. REGISTER 0 CONTAINS THE CPID OF THE
*        POOL WHILE REG. 1 CONTAINS THE ADDRESS OF THE CELL TO BE
*        FREED.
*
*02*     INPUT = A FORMATTED QUICKCELL POOL (IMPLIED) AND AN ALLOCATED
*        CELL.
*
*02*     OUTPUT = THE CELL RETURNED TO THE POOL, AND A RETURN CODE.
*
*02*     REGISTERS-SAVED = NONE ... REGISTERS 1 THROUGH 4 AND 15 WILL
*        BE CHANGED.
*02*     REGISTER-USAGE = SEE COMMENTS ON REGISTER EQUATES.
*
*02*     REGISTERS-RESTORED = NONE
*01*  EXIT-NORMAL = FRCEXIT0
*
*02*     CONDITIONS = THE CELL HAS BEEN RETURNED. (OPTIONALLY, THE
*        EXTENT CONTAINING THE CELL HAS BEEN DELETED.)
*
*02*     OUTPUT = WHEN THE RETURN CODE IS 0, REG 0 IS UNCHANGED AND REG
*        1 = 0. WHEN THE RETURN CODE IS 20, THE ADDRESS OF THE DELETED
*        EXTENT IS IN REG 1, WHILE REG 0 CONTAINS THE SUBPOOL # AND
*        LENGTH OF THE EXTENT.
*
*02*     RETURN-CODES = 0 = THE CELL HAS BEEN RETURNED
*                      20 = THE EXTENT HAS BEEN DEQUEUED AND THE CELL
*                       RETURNED.
*
*01*  EXIT-ERROR = FRCERR04
*
*02*     CONDITIONS = THE CELL WAS NOT ALLOCATED FROM THIS POOL.
*
*02*     OUTPUT = RETURN CODE
*
*02*     RETURN-CODES = 4
*
*01*  EXIT-ERROR = FRCERR08
*
*02*     CONDITIONS = THE CELL DOES NOT BELONG TO ANY EXTENT OF THIS
*        POOL.
*
*02*     OUTPUT = RETURN CODE
*
*02*     RETURN-CODES = 8
*
*01*  EXIT-ERROR = FRCERR12
*
*02*     CONDITIONS = THE POOL CONTAINS NO EXTENTS OR IS UNFORMATTED.
*
*02*     OUTPUT = RETURN CODE
*
*02*     RETURN-CODES = 12
*
*01*  EXIT-ERROR = FRCERR16
*
*02*     CONDITIONS = THE CPID REFERENCES AN UNDEFINED POOL.
*
*02*     OUTPUT = RETURN CODE
*
*02*     RETURN-CODES = 16
*
*01*  EXTERNAL-REFERENCES = CVT, GDA AND CPAB
*
*02*     ROUTINES = NONE
*
*02*     CONTROL-BLOCKS = CVT AND GDA -- READ ONLY. CPAB (CELL POOL
*        ANCHOR BLOCK) READ AND WRITE.
*
*01*  TABLES = NONE
*01*  MACROS = NONE
*02*     SERIALIZATION = THE 'CPABFLGW' FIELD IS USED TO SERIALIZE ALL
*        OPERATIONS ON ANY SINGLE POOL EXTENT, REGARDLESS OF THE TYPE
*        OF OPERATION. THIS FIELD IS MANIPULATED WITH THE 'CS' (COMPARE
*        AND SWAP) INSTRUCTION. ONE BIT IN THIS FIELD, 'DELETELK', IS
*        USED TO INDICATE THAT THE EXTENT IS BEING DELETED FROM THE
*        POOL. IF A DELETE IS OCCURING (THE BIT IS 'ON'), ALL OTHER
*        OPERATIONS ARE PROHIBITED ON THE EXTENT BEING DELETED. IF NO
*        DELETE IS OCCURRING, THE USE COUNT 'CPABUSE#' IS USED TO
*        PREVENT A DELETE FROM STARTING IN THE MIDDLE OF SOME OTHER
*        PROCESS. A NON-ZERO VALUE FOR 'CPABUSE#' WILL PREVENT AN
*        EXTENT FROM BEING DELETED. ONCE THE EXTENT HAS BEEN LOCKED
*        AGAINST DELETES, THE DOUBLE-WORD FIELD CONSISTING OF
*        'CPABDEQC' AND 'CPABFACP' IS USED TO SERIALIZE THE ACQUISITION
*        AND RELEASE OF CELLS IN THE SINGLE EXTENT. THIS DOUBLE-WORD
*        FIELD IS MANIPULATED WITH THE 'CDS' (COMPARE DOUBLE AND SWAP)
*        INSTRUCTION.
*
*01*  CHANGE-ACTIVITY = NEW FOR OS/VS2 RELEASE 2  - LEVEL 02.00
*
*          APARS   OZ18115                                     @ZA18115
*                  OZ28730                                     @ZA28730
*
*01*  MESSAGES = NONE
*01*  ABEND-CODES = NONE
**** END OF SPECIFICATIONS ***/
         EJECT
*/*FREECELL: CHART (AMODE) */
*/* HEADER
*/*DYNAMIC QUICKCELL FUNCTION
*/*                                                FREE CELL ROUTINE
*/*
*/*                               PAGE # */
*/*IEAVFRCL:1A1 E  (,%D1) BRANCH ENTRY */
*/*%D1:1B1     D   (YES,PERMCPID,NO,%D2) PERMANENT CPID? */
*/*%D2:1B2     D   (YES,FRCERR16,NO,%DYN) NULL CPID (=0)? */
*/*PERMCPID:   P   (,GOTCPAB) GET INDEX INTO CPAB TABLE FOR CPAB */
*/*%DYN:1B3    P   (,GOTCPAB) COMPUTE CPAB ADDRESS */
*/*GOTCPAB:    D   (NO,FRCERR16,YES,%D5) CPID MATCH ONE IN CPAB? */
*/*%D5:1E1     D   (NO,FRCERR12,YES,%D6) IS THE POOL FORMATTED?  */
*/*%D6:1F1     D   (NO,FRCERR4,YES,CPABLOOP) IS THIS AN ALLOCATED CELL?
*/* */
*/*CPABLOOP:   D   (NO,GNXTCPAB,YES,%BNDRY) CELL WITHIN THIS POOL
*/*EXTENT? */
*/*GNXTCPAB:   D   (NO,FRCERR08,YES,%CHN) ANY OTHER EXTENTS? */
*/*FRCERR08:   R   RC=8 */
*/*%CHN:1D3    M   (,CPABLOOP) GET NEXT EXTENT ADDRESS */
*/*%BNDRY:     P   (,%BNDRYT) COMPUTE RELATIVE ADDRESS OF THE CELL IN
*/*THE EXTENT */
*/*%BNDRYT:    D   (YES,DLCKCHK,NO,FRCERR08) CELL ON INTEGRAL BOUNDARY
*/*? */
*/*DLCKCHK:    D   (ON,FRCEXIT0,OFF,%INCR) TEST DELETE IN PROCESS FLAG
*/**/
*/*%INCR:      P   (,ENQLOOP) LOCK OUT DELETE (RAISE USE COUNT) */
*/*ENQLOOP:    M   (,%CDS) SET UP FOR 'CDS' TO ENQUEUE THE CELL */
*/*%CDS:1J3    D   (YES,UNLCKLP,NO,ENQLOOP) CDS-DID THE STORE OCCUR?
*/**/
*/*UNLCKLP:    P   (,%ADELCHK) UNLOCK THIS EXTENT - LOWER USE COUNT. */
*/*%ADELCHK:   D   (NO,FRCEXIT0,YES,%EMPTY) AUTO-DELETE CANDIDATE ? */
*/*%EMPTY:     D   (NO,FRCEXIT0,YES,%REM1) ALL CELLS RETURNED ?
*/**/
*/*%REM1:      D   (NO,FRCEXIT0,YES,%REMOV) LAST EXTENT ? */
*/*%REMOV:     P   (,%DELGET) LOCK THE EXTENT AGAINST OTHER OPERATIONS
*/**/
*/*%DELGET:    D   (YES,DEQUEIT,NO,FRCEXIT0) IS IT LOCKED NOW? */
*/*DEQUEIT:    P   (,FRCERR20) DELETE THE LAST EXTENT */
*/*FRCERR20:  P   (,%EXIT20) SET UP REGISTERS 0 AND 1 TO ALLOW FREEMAIN
*/* BY CALLER */
*/*%EXIT20:    R   RC=20 */
*/*FRCEXIT0:   R   RC=0 --NORMAL-- */
*/*FRCERR4:    R   RC=4 */
*/*FRCERR12:   R   RC=12 */
*/*FRCERR16:   R   RC=16 */
*/*IEAVFRCL: END */
         EJECT
IEAVFRCL CSECT
CELLLINK EQU   0              CELL LINKAGE POINTER
CLINKLEN EQU   4              CELL LINKAGE POINTER FIELD LENGTH
R0       EQU   0              CPID -- INPUT PARAMETER
R1       EQU   1              CELL ADDRESS -- INPUT PARAMETER
@R2      EQU   2              SCRATCH REGISTER
@R3      EQU   3              SCRATCH REGISTER
*                             ON INPUT, R3 CONTAINS CVT ADDRESS
R4       EQU   4              CPAB ADDRESS (CALCULATED)
*        NOTE: REGISTERS 5 THROUGH 13 ARE EXPLICITLY FORBIDDEN FOR USE *
               BY THIS ROUTINE
R14      EQU   14             RETURN ADDRESS
R15      EQU   15             ENTRY POINT ADDRESS (BASE REGISTER)
         USING IEAVFRCL,R15
         MODID BR=YES
         LTR   R4,R0          TEST CPID VALUE AND SET CPAB ADDRESS BASE
         BM    PERMCPID       NEGATIVE, PERMANENT (SYSTEM) CPID
         BZ    FRCERR16       NULL (=0), ERROR CONDITION
***********************************************************************
*        THE CPID HAS BEEN FOUND TO BE A DYNAMIC POOL ID AND
*        THE ADDRESS OF THE FIRST CPAB IS FOUND FROM THE CPID
*        BY MULTIPLYING IT BY 4.
*        SINCE R4 ALREADY CONTAINS THE CPID, MULTIPLY BY 4
***********************************************************************
         SLL   R4,2           GET THE CPAB BASE REGISTER
         B     GOTCPAB         CONTINUE COMMON PROCESSING.
         EJECT
***********************************************************************
*        A PERMANENT (SYSTEM) CPID HAS BEEN PASSED, THE CPAB
*        ADDRESS IS FOUND BY USING THE LOW-ORDER BYTE OF THE
*        ID AS AN INDEX INTO A TABLE OF CPAB'S. THE TABLE IS
*        FOUND FROM THE GLOBAL DATA AREA (GDA), WHOSE ADDRESS
*        IS FOUND IN THE CVT.
***********************************************************************
PERMCPID EQU   *
         USING CVT,@R3
         L     @R3,CVTGDA         ADDRESS OF THE GLOBAL DATA AREA
         USING GDA,@R3
*        REG. 4 ALREADY CONTAINS THE CPID, SO THE CPAB ADDRESS = CPID
         N     R4,F255             // 256 (MODULO DIVISION)
         SLL   R4,5                * 32 (CPAB LENGTH)
         A     R4,PFSTCPAB         + CPAB TABLE ADDRESS
*****    NOTE: THE PREVIOUS CALCULATION IS DEPENDENT UPON THE LENGTH OF*
                THE CPAB REMAINING AT 32.
         SPACE 3
***********************************************************************
*        COMMON PATH******** AFTER FINDING THE CPAB FOR THE
*        ID GIVEN, CHECK FOR MATCHING CPID'S, UNFORMATTED
*        POOLS, AND UNALLOCATED (NOT GETCELL'ED) CELLS.
***********************************************************************
GOTCPAB  EQU   *
         USING CPAB,R4
         C     R0,CPABCPID        DO THE CPID'S MATCH ?
         BNE   FRCERR16            NO, ERROR CONDITION
         L     @R2,CPABSTAD       YES, GET POOL START ADDRESS
         LTR   @R2,@R2            HAS THE POOL EVER BEEN FORMATTED?
         BZ    FRCERR12            NO, ERROR CONDITION
         L     @R3,CPABCSZE       YES, GET THE CELL SIZE FROM THE CPAB
         C     R0,CELLLINK(@R3,R1) HAS THE CELL BEEN ALLOCATED
*                                  FROM THIS POOL? (CONTAIN THIS CPID?)
         BNE   FRCERR04            NO, ERROR CONDITION
         EJECT
***********************************************************************
*        THE CELL HAS BEEN SHOWN TO BELONG TO THIS POOL AND
*        THE POOL IS KNOWN TO BE FORMATTED, NOW FIND THE
*        SEGMENT (EXTENT) OF THE POOL TO WHICH THE CELL BELONGS.
***********************************************************************
CPABLOOP EQU   *
         C     R1,CPABSTAD    CHECK CELL AGAINST LOW BOUND
         BL    GNXTCPAB       OUT OF BOUNDS, GET NEXT EXTENT
         LA    @R2,CLINKLEN(@R3,R1)  SET UP ADDRESS OF END OF CELL
         C     @R2,CPABENAD   TEST CELL END AGAINST UPPER BOUND
         BH    GNXTCPAB       OUT OF BOUNDS, TRY NEXT EXTENT
         SPACE 2
***********************************************************************
*        THE EXTENT HAS BEEN FOUND TO WHICH THE CELL BELONGS.
*        CHECK TO SEE THAT THE CELL IS ON AN INTEGRAL BOUNDARY
*        WITHIN THAT EXTENT.
*********      FROM NOW ON, THE CPID IS NOT AVAILABLE IN A
*              REGISTER, AND REGISTER 0 WILL CONTAIN VARYING
*              DATA.
***********************************************************************
         LA    R0,CLINKLEN(@R3)      R0 = COMPLETE CELL SIZE - LINK
*                             WORD LENGTH (4) IS INCLUDED
         LR    @R3,R1         CELL ADDRESS
         S     @R3,CPABSTAD        - START ADDRESS OF THE POOL
         BZ    SKIPDVD             GIVES THE RELATIVE ADDRESS
*                                  OF THE CELL IN THE POOL. IF
*                                  IT IS ZERO, SKIP DIVISION.
         SR    @R2,@R2        CLEAR FOR DIVISION
         DR    @R2,R0         DIVIDE BY CELL LENGTH
         LTR   @R2,@R2        IF REMAINDER IS ZERO, CELL IS
*                             ON AN INTEGRAL BOUNDARY.
         BNZ   FRCERR08       IF NOT, ERROR CONDITION
SKIPDVD  EQU   *
         SPACE 2
***********************************************************************
*        NOW THAT THE EXTENT TO WHICH THE CELL BELONGS IS KNOWN,
*        CHECK TO SEE IF IS BEING DELETED BEFORE ALLOWING THE CELL
*        TO BE STORED.
***********************************************************************
DLCKCHK  EQU   *
         L     @R2,CPABFLGW   GET LOCKING FLAGS AND USE COUNT
DLCKCHK2 EQU   *
         LR    @R3,@R2        COPY THEM FOR TESTING
         N     @R3,DLFLGOFF   TURN OFF DELETE FLAG IN COPY
         CR    @R2,@R3        IF THEY ARE THE SAME, THE DELETE LOCK
*                             WAS ALREADY OFF.
         BNE   FRCEXIT0       OTHERWISE A DELETE IS IN PROCESS
******   NOTE **** A LOAD ADDRESS (LA) INSTRUCTION CANNOT BE USED HERE,
*        SINCE THE FIELD BEING INCREMENTED CONTAINS THE SUBPOOL ID IN
*        ITS HIGH-ORDER BYTE.
         LR    @R3,@R2        NO DELETE GOING ON, LOCK OUT DELETE
         A     @R3,F1         BY RAISING THE OPERATION COUNT.
         CS    @R2,@R3,CPABFLGW    STORE LOCKS IF NOTHING HAS
*                                  HAPPENED TO CHANGE THE STATUS.
         BNE   DLCKCHK2       STATUS CHANGED, SEE WHY.
         SPACE 2
***********************************************************************
*        NO DELETES ARE IN PROCESS AND DELETE IS LOCKED OUT OF
*        THIS EXTENT, RESTORE THE CELL TO THE POOL.
***********************************************************************
ENQLOOP  EQU   *
         LM    @R2,@R3,CPABDEQC    GET DEQUEUE COUNT AND FIRST
*                                  AVAILABLE CELL POINTER FROM
*                                  THE CPAB.
ENQLOOP2 EQU   *
         A     R1,CPABCSZE    GET LINK POINTER ADDRESS FOR THE
*                             CELL BEING RETURNED.
         ST    @R3,CELLLINK(R1)    PUSH-DOWN THE PRIOR FIRST CELL
         S     R1,CPABCSZE    CONVERT ADDRESS BACK TO THAT OF THE CELL
         LR    R0,@R2         REDUCE THE DEQUEUE COUNT BY 1 TO
         BCTR  R0,R0          ASSURE SERIALIZATION OF THE CDS
         CDS   @R2,R0,CPABDEQC     ENQUEUE THE CELL IN THE POOL
         BNE   ENQLOOP2            ENQUEUE FAILED, TRY AGAIN
         SPACE 3
***********************************************************************
*        THE CELL HAS BEEN SUCCESSFULLY RETURNED TO THE POOL,
*        TAKE OFF THE LOCK ON THE POOL EXTENT (BY REDUCING THE USE
*        COUNT).
***********************************************************************
UNLCKLP  EQU   *
         L     @R2,CPABFLGW   GET THE LOCKING FLAGS AND USE COUNT
UNLCKLP2 EQU   *
         LR    @R3,@R2        COPY THEM
         BCTR  @R3,0          REDUCE THE USE COUNT
         CS    @R2,@R3,CPABFLGW    UNLOCK THE EXTENT (STORE THE UPDATED
         BNE   UNLCKLP2       LOCK). IF THE STORE FAILED, TRY AGAIN
         EJECT
***********************************************************************
*        THE CELL THAT WAS RETURNED MAY HAVE CAUSED THE ENTIRE EXTENT
*        TO BECOME FREE OF ALLOCATED CELLS. IF THIS WAS THE CASE, AND
*        THE USER CHOSE THE 'AUTOMATIC DELETE OPTION', THEN THIS
*        EXTENT WILL BE RELEASED, PROVIDED THAT EITHER:
*         (1) THIS IS THE LAST EXTENT AND IS NOT THE ORIGINAL  @ZA28730
*             EXTENT, OR                                       @ZA28730
*         (2) THE CALLER HAS GUARANTEED THAT THE CHAIN OF      @ZA28730
*             EXTENTS IS PROPERLY SERIALIZED AND THIS IS NOT   @ZA28730
*             THE ORIGINAL EXTENT.                             @ZA28730
*
*        FOR ANY OTHER CONDITIONS, THE NORMAL RETURN IS TAKEN AND THE
*        EXTENT IS NOT DELETED.
***********************************************************************
         TM    CPABFLGS,ADELCAND+CPABEXTN
         BNO   FRCEXIT0       EXIT, EITHER NOT AN EXTENT OR NOT
*                             MARKED AS AN AUTO-DELETE CANDIDATE.
         LTR   R0,R0          TEST THE DEQUEUE COUNT FOR 0
         BNZ   FRCEXIT0       THE EXTENT IS NOT FREE, EXIT
         LR    @R2,@R3        SAVE SP # IN CASE SERIAL SPECF'D @ZA28730
         TM    CPABFLGS,SERIAL IS SERIALIZATION GUARANTEED?    @ZA28730
         BO    ORGADDR        YES, GO DEQUEUE THE EXTENT       @ZA28730
         L     @R2,CPABNXTP   GET NEXT EXTENT POINTER
         LTR   @R2,@R2        IS THIS THE LAST EXTENT?
         BNZ   FRCEXIT0       NO, THERE IS ANOTHER, EXIT
         SPACE 2
***********************************************************************
*        IN ADDITION TO THE ABOVE, THE USE COUNT OF THE EXTENT @ZA18115
*        MUST ALSO BE 0.  THE 'CS' BELOW CHECKS FOR A 0 USE    @ZA18115
*        COUNT AND IF IT IS 0, TURNS ON THE DELETE LOCK FLAG.  @ZA18115
*        ALL THE PREREQUISITES FOR AN AUTO-DELETE HAVE BEEN SATISFIED.
*        DELCPOOL WOULD NOW BE INVOKED TO FREE THE EXTENT WITHOUT
*        FREEMAINING THE CORE IT OCCUPIES. THE CALLER WILL BE NOTIFIED
*        AND WILL RECEIVE SUFFICIENT INFORMATION FOR EXECUTING THE
*        FREEMAIN HIMSELF.
*        NOTE: SINCE THE INVOKATION OF DELCPOOL REQUIRES A SAVE AREA &
*        NONE IS AVAILABLE TO THIS ROUTINE, THE DELETION OF THE POOL
*        IS ACCOMPLISHED BY THIS MODULE DIRECTLY.
***********************************************************************
         N     @R3,ZEROUSE        ONLY SET DELETE LOCK FLAG    @ZA18115
*                                 IF THE USE COUNT IS ZERO     @ZA18115
         LR    @R2,@R3            COPY THE LOCKING FLAGS
         O     @R2,DELETEON       SET THE DELETE LOCK FLAG ON
         CS    @R3,@R2,CPABFLGW   SEIZE THE EXTENT (IF POSSIBLE)
         BNE   FRCEXIT0           IN USE, RETURN
         EJECT
***********************************************************************
*        ALTHOUGH THE USE COUNT WAS ZERO AT THE TIME OF THE 'CS',
*        A GETCELL COULD HAVE BEEN COMPLETELY EXECUTED ON THIS
*        EXTENT BETWEEN NOW AND THE TIME THAT THE DEQUEUE
*        COUNT WAS LAST CHECKED.  THEREFORE, WITH THE DELETE LOCK
*        NOW SET, THE DEQUEUE COUNT MUST BE CHECKED AGAIN.  IF IT
*        IS STILL ZERO, THE EXTENT CAN BE SAFELY DELETED.  IF NOT,
*        THE EXTENT MUST BE UNLOCKED.                          @ZA18115
***********************************************************************
         L     @R3,CPABDEQC       GET COUNT OF DEQUEUED CELLS  @ZA18115
         LTR   @R3,@R3            ANY CELLS IN USE ?           @ZA18115
         BNZ   RESETDLK           YES, TURN OFF DELETE LOCK    @ZA18115
ORGADDR  L     R1,CPABCPID        GET ADDRESS OF ORIGINAL CPAB @ZA28730
PREDSRCH EQU   *
         C     R4,CPABNXTP-CPAB(R1) IS THIS THE PREDECESSOR?
         BE    DEQUEIT            YES, REMOVE THE CPAB FROM THE CHAIN
         L     R1,CPABNXTP-CPAB(R1) NO, GET THE NEXT CPAB
         B     PREDSRCH           AND CONTINUE THE SEARCH
DEQUEIT  EQU   *
         MVC   CPABNXTP-CPAB(L'CPABNXTP,R1),CPABNXTP DEQUEUE THE CPAB
         LR    R0,@R2             PASS THE SUBPOOL NUMBER
         ICM   R0,ADDRPART,CPABENAD+1    THE EXTENT SIZE
         S     R0,CPABSTAD         = (END ADDR - START ADDR)
         A     R0,FCPABLEN        ADD THE CPAB LENGTH.
         LR    R1,R4              PASS BACK THE EXTENT ADDRESS
         LA    R15,20             SET AUTO-DELETE RETURN CODE
         BR    R14                RETURN TO CALLER
         EJECT
***********************************************************************
*        ALTHOUGH THIS INVOCATION OF FREE CELL RETURNED THE LAST
*        ALLOCATED CELL TO THE EXTENT, AND ALTHOUGH THE USE COUNT
*        WAS ZERO AT THE TIME THAT THE DELETE LOCK FLAG WAS 'CS'D'
*        ON, A CELL WAS RE-ALLOCATED FROM THE EXTENT AT SOME POINT
*        AFTER THE DEQUEUE COUNT WAS FIRST CHECKED FOR ZERO, AND THE
*        TIME THAT THE DELETE LOCK WAS SET ON.  THEREFORE, THE EXTENT
*        CANNOT BE DELETED, AND THE DELETE LOCK MUST BE TURNED OFF.
*                                                              @ZA18115
***********************************************************************
RESETDLK EQU   *                                               @ZA18115
         NI    CPABFLGS,UNLOCK    TURN OFF DELETE LOCK FLAG    @ZA18115
         SPACE
***********************************************************************
*        SINCE A POOL BEING DELETED EFFECTS THE FREEING OF THE
*        CELL, IF A DELETE WAS IN PROCESS AND THE CELL BELONGED
*        TO THE EXTENT BEING DELETED, A NORMAL RETURN IS TAKEN.
*
*        THE CELL HAS BEEN SUCCESSFULLY RETURNED TO THE POOL, AND
*        THE POOL IS UNLOCKED, RETURN TO THE USER.
***********************************************************************
FRCEXIT0 EQU   *
         TM    CPABFLGS,CPABEXTN   IS THE PRESENT CPAB THE ORIGINAL ?
         BZ    ORIGINAL       YES, THE CPID IS IN CPABCPID.
         L     R4,CPABCPID    NO, GET THE ADDRESS OF THE ORIGINAL CPAB.
ORIGINAL EQU   *
         L     R0,CPABCPID    GET THE CPID OF THE POOL (RETURN PARM).
         SR    R1,R1          CLEAR REG 1 (REMOVE CELL ADDRESSABILITY)
         SR    R15,R15        SET RETURN CODE = 0
         BR    R14            RETURN TO THE CALLER
         SPACE
***********************************************************************
*        IF THE CELL DID NOT BELONG IN THE EXTENT UNDER INVESTIGATION
*        AND THERE ARE MORE EXTENTS TO CHECK, CONTINUE THE SEARCH
*        FOR THE EXTENT TO WHICH THE CELL DOES BELONG.
***********************************************************************
GNXTCPAB EQU   *
         L     R4,CPABNXTP    ADDRESS OF THE NEXT CPAB
         LTR   R4,R4          IF IT IS ZERO, THERE ARE NO MORE
*                             EXTENTS.
         BNZ   CPABLOOP       OTHERWISE, CONTINUE THE SEARCH.
         B     RETCDEQ8       NO MORE EXTENTS, SET ERROR RETURN CODE.
         EJECT
***********************************************************************
*        IF THERE ARE NO MORE EXTENTS AND THE CELL HAS NOT BEEN
*        RETURNED, THERE IS AN ERROR AND A CODE OF 8 IS RETURNED.
***********************************************************************
FRCERR08 EQU   *
         TM    CPABFLGS,CPABEXTN   IS THE PRESENT CPAB THE ORIGINAL ?
         BZ    ORIGCPAB       YES, THE CPID IS IN CPABCPID.
         L     R4,CPABCPID    NO, GET THE ADDRESS OF THE ORIGINAL CPAB.
ORIGCPAB EQU   *
         L     R0,CPABCPID    GET THE CPID OF THE POOL (RETURN PARM).
RETCDEQ8 EQU   *
         LA    R15,8
         BR    R14            RETURN
         SPACE
***********************************************************************
*        THE CELL WAS NOT ALLOCATED FROM THIS POOL (THE CPID IN THE
*        CELL DOES NOT MATCH THE CPID OF THE POOL).
***********************************************************************
FRCERR04 EQU   *
         LA    R15,4
         BR    R14
         SPACE
***********************************************************************
*        THIS POOL HAS NOT BEEN FORMATTED, RETURN AN ERROR CODE
*        THIS CONDITION ONLY APPLIES TO PERMANENT CPIDS, WHERE THE
*        ANCHOR BLOCK EXISTS IN AN ESTABLISHED TABLE OF CPABS.
***********************************************************************
FRCERR12 EQU   *
         LA    R15,12
         BR    R14            RETURN
         SPACE
***********************************************************************
*        AN INVALID CPID HAS BEEN GIVEN, NO POOL HAVING THIS CPID
*        HAS EVER BEEN DEFINED TO THE SYSTEM. ---- ERROR RETURN.
***********************************************************************
FRCERR16 EQU   *
         LA    R15,16
         BR    R14            RETURN
         EJECT
***********************************************************************
*        CONSTANTS REQUIRED BY THE FREE CELL SERVICE ROUTINE
***********************************************************************
F255     DC    F'255'         USED FOR MODULO DIVIDE BY 256
F1       DC    F'1'           USED TO INCREMENT USE COUNT
ZEROUSE  DC    X'FFFF0000'    MASK TO ZERO EXTENT USE COUNT    @ZA18115
*        THESE NEXT TWO FIELDS ARE USED TO TURN THE DELETE LOCK
*        OFF AND ON (RESPECTIVELY), WHEN THE FLAG WORD IS IN A REGISTER
DLFLGOFF DC    X'FF',AL1(X'FF'-DELETELK),2X'FF'   TURN IT OFF
DELETEON DC    AL2(DELETELK,0)   TURN IT ON
FCPABLEN DC    A(CPABLEN)     LENGTH OF THE ANCHOR BLOCK
ADDRPART EQU   7              MASK USED TO OBTAIN ADDRESS VIA 'ICM'
UNLOCK   EQU   X'F7'          MASK FOR RESETTING DELETE LOCK   @ZA18115
CVT      DSECT
         CVT
         EJECT
         IHAGDA   DSECT=YES
         EJECT
         IHACPAB  DSECT=YES
         END
