        TITLE 'DELETE QUICKCELL POOL MODULE --- IEAVDELP'
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVDELP
*
*02*     CSECT-NAME = IEAVDELP
*
*01*  DESCRIPTIVE-NAME = DELETE QUICKCELL POOL
*
*01*  COPYRIGHT = NONE
*01*  STATUS = LEVEL 02.00     -- 2/26/73
*
*01*  FUNCTION = DELETION OF ALL OR PART OF A QUICKCELL POOL.
*
*02*     OPERATION = THE DELETE CELL POOL FUNCTION FINDS THE LAST
*        EXTENT OF A POOL OF CELLS AND THEN REMOVES IT FROM THE POOL.
*        AT THIS POINT, IT WILL EITHER FREEMAIN THE STORAGE OR ENQUEUE
*        IT FOR USER FREEMAINING, BASED UPON A USER SELECTED OPTION. IT
*        WILL CONTINUE TO DELETE EXTENTS ONE AT A TIME, WORKING TOWARDS
*        THE START OF THE POOL, UNTIL IT HAS SATISFIED THE CALLER'S
*        REQUEST FOR NUMBER OF EXTENTS TO BE DELETED. (NUMBER IS ONE,
*        ALL EXTENTS, OR THE WHOLE POOL).
*
*01*   NOTES = STANDARD LINKAGE CONVENTIONS.
*
*02*     DEPENDENCIES = 370-MP INSTRUCTION SET (COMPARE-AND-SWAP)
*
*03*        CHARACTER-CODE-DEPENDENCIES = NONE
*02*     RESTRICTIONS = NONE
*02*     REGISTER-CONVENTIONS = SEE EQUATES OF REGISTERS FOLLOWING
*        CSECT STATEMENT
*
*02*     PATCH-LABEL = NUCLEUS PATCH AREA
*
*01*  MODULE-TYPE = MACRO-INVOKED PROCESSING SUBROUTINE
*
*02*     PROCESSOR = ASSEMBLER-370R
*
*02*     MODULE-SIZE = 400 BYTES
*
*02*     ATTRIBUTES = NUCLEUS REFRESHABLE
*
*01*  ENTRY-POINT = IEAVDELP
*
*02*     PURPOSE = DELETION OF THE LAST EXTENT OR ALL EXTENTS OF A
*        QUICKCELL POOL, OR DELETION OF THE ENTIRE POOL ... FREEMAINING
*        OF THE DELETED EXTENTS IS OPTIONAL WITH ANY FORM OF DELETION.
*
*02*     LINKAGE = ENTERED VIA A BALR 14,15 .. SHOULD BE INVOKED BY THE
*        DELCPOOL MACRO INSTRUCTION. REG 0 CONTAINS THE CPID OF THE
*        POOL TO BE ACTED UPON, AND REG 1 CONTAINS THE OPTION CODE.
*
*02*     INPUT = NONE
*02*     OUTPUT = A MODIFIED CPAB QUEUE ... SEE SPECIFIC EXITS FOR
*        PARTICULARS
*
*02*     REGISTERS-SAVED = THIS ROUTINE SAVES NO REGISTERS. THE MACRO
*        EXPANSION (DELCPOOL) PRESERVES 2 THRU 12.
*
*02*     REGISTER-USAGE = REGISTER USAGE IS DESCRIBED ON THE EQUATES
*        DEFINING THE REGISTER NAMES.
*
*02*     REGISTERS-RESTORED = NONE ... SEE REGISTERS SAVED.
*01*  EXIT-NORMAL = DELEXIT0
*
*02*     CONDITIONS = NORMAL RETURN VIA BR R14
*
*02*     OUTPUT = REGISTER 1 ADDRESSES THE FIRST DEQUEUED BUT
*        UN-FREEMAINED EXTENT. THE FIRST TWO WORDS OF THE EXTENT
*        CONTAIN ITS SUBPOOL NUMBER AND LENGTH, FOLLOWED BY THE ADDRESS
*        OF THE NEXT DEQUEUED BUT UN-FREEMAINED EXTENT (IF ANY)... THE
*        FIELD = 0 IF NO FURTHER EXTENTS.
*
*02*     RETURN-CODES = 0 = SUCCESSFUL COMPLETION
*
*01*  EXIT-ERROR = DELERR04
*
*02*     CONDITIONS = ERROR DURING FREEMAIN OF A DELETED EXTENT.
*
*02*     OUTPUT = REG 0 = REASON CODE (FREEMAIN ERROR CODE).
*                 REG 1 = ADDRESS OF EXTENT IN ERROR... THE FIRST
*                 WORD OF THE EXTENT CONTAINS THE SUBPOOL NUMBER AND
*                 LENGTH OF THE EXTENT.
*
*02*     RETURN-CODES = 4
*
*01*  EXIT-ERROR = DELERR08
*
*02*     CONDITIONS = ATTEMPT TO DELETE A 'NIP' CREATED POOL.
*
*02*     OUTPUT = RETURN CODE
*
*02*     RETURN-CODES = 8
*
*01*  EXIT-ERROR = DELERR12
*
*02*     CONDITIONS = ATTEMPT TO DELETE AN UNFORMATTED POOL.
*              OR AN ATTEMPT TO DELETE AN EXTENT ON A POOL THAT HAS NO
*              EXTENTS.
*
*02*     OUTPUT = RETURN CODE
*
*02*     RETURN-CODES = 12
*
*01*  EXIT-ERROR = DELERR16
*
*02*     CONDITIONS = INVALID CPID PASSED OR NULL CPID (=0).
*
*02*     OUTPUT = RETURN CODE
*
*02*     RETURN-CODES = 16
*
*01*  EXIT-ERROR = DELERR20
*
*02*     CONDITIONS = CONCURRENT MUTUALLY EXCLUSIVE OPERATION TAKING
*        PLACE ON THIS EXTENT. EITHER A BLDCPOOL, GETCELL OR FREECELL
*        IS CURRENTLY OPERATING ON THIS EXTENT.
*
*02*     OUTPUT = RETURN CODE
*
*02*     RETURN-CODES = 20
*
*01*  EXTERNAL-REFERENCES = CVT, GDA, CPAB
*
*02*     ROUTINES = SVC 120 (FREEMAIN) VIA CONDITIONAL REGISTER FORM OF
*        FREEMAIN MACRO
*
*02*     CONTROL-BLOCKS = CVT AND GDA (REFERENCE ONLY) AND CPAB
*        (REFERENCED AND DELETED)
*
*01*  TABLES = NONE
*01*  MACROS = FREEMAIN
*
*02*     SERIALIZATION = THE 'CPABFLGW' FIELD IS USED TO SERIALIZE ALL
*        OPERATIONS ON ANY SINGLE POOL EXTENT, REGARDLESS OF THE TYPE
*        OF OPERATION. THIS FIELD IS MANIPULATED WITH THE 'CS' (COMPARE
*        AND SWAP) INSTRUCTION. ONE BIT IN THIS FIELD, 'DELETELK', IS
*        USED TO INDICATE THAT THE EXTENT IS BEING DELETED FROM THE
*        POOL. IF A DELETE IS OCCURING (THE BIT IS 'ON'), ALL OTHER
*        OPERATIONS ARE PROHIBITED ON THE EXTENT BEING DELETED. IF NO
*        DELETE IS OCCURRING, THE USE COUNT 'CPABUSE#' IS USED TO
*        PREVENT A DELETE FROM STARTING IN THE MIDDLE OF SOME OTHER
*        PROCESS. A NON-ZERO VALUE FOR 'CPABUSE#' WILL PREVENT AN
*        EXTENT FROM BEING DELETED. ONCE THE EXTENT HAS BEEN LOCKED
*        AGAINST DELETES, THE DOUBLE-WORD FIELD CONSISTING OF
*        'CPABDEQC' AND 'CPABFACP' IS USED TO SERIALIZE THE ACQUISITION
*        AND RELEASE OF CELLS IN THE SINGLE EXTENT. THIS DOUBLE-WORD
*        FIELD IS MANIPULATED WITH THE 'CDS' (COMPARE DOUBLE AND SWAP)
*        INSTRUCTION.
*
*
*01*  CHANGE-ACTIVITY = NONE ... NEW FOR OS/VS2 RELEASE 2
*01*  MESSAGES = NONE
*01*  ABEND-CODES = NONE
*
**** END OF SPECIFICATIONS ***/
                 EJECT
*/*DELCPOOL:   CHART (AMODE) */
*/* HEADER
*/*DYNAMIC QUICKCELL FUNCTION
*/*                                         DELETE CELL POOL ROUTINE
*/*
*/*                                      PAGE # */
*/*IEAVDELP:   E   (,%D1) BRANCH ENTRY */
*/*%D1:        D   (YES,%PERM,NO,%DYN) PERMANENT CPID? */
*/*%PERM:      P   (,%D2) CALCULATE CPAB ADDRESS IN CPAB TABLE.*/
*/*%DYN:       D   (YES,%RC16,NO,%DYN2) NULL CPID? (=0) */
*/*%DYN2:      P   (,%D2) CALCULATE CPAB ADDRESS */
*/*%D2:        D   (NO,%RC16,YES,%D3) CPID MATCH ONE IN CPAB? */
*/*%D3:        D   (NO,%RC12,YES,%D4) IS THE POOL FORMATTED? */
*/*%D4:        D   (YES,%EXT,NO,%NIP) 'EXTENT' DELETION REQUEST ? */
*/*%NIP:       D   (YES,%RC8,NO,EXTENT) NIP BUILT THIS POOL? */
*/*%EXT:       D   (YES,EXTENT,NO,%RC12) DOES THE POOL HAVE EXTENTS? */
*/*EXTENT:     M   (,%D2A) FIND LAST EXTENT */
*/*%D2A:       D   (ON,%RC20,OFF,%DEL) TEST AND SET DELETE INHIBIT
*/*FLAG*/
*/*%DEL:       P   (,%FRD) DEQUEUE THIS EXTENT */
*/*%FRD:       D   (YES,%FREE,NO,%DST1) FREEMAIN REQUEST? */
*/*%DST1:      P   (,%DEL3) STORE SUBPOOL AND POOL LENGTH IN POOL AREA
*/* */
*/*%FREE:      S   (,%DEL2) FREEMAIN: FREE THIS EXTENT & CPAB(E)*/
*/*%DEL2:      D   (NO,%DST2,YES,%DEL3) FREEMAIN SUCCESSFUL? */
*/*%DEL3:      D   (NO,%DCD,YES,%RC0) IS THE POOL FULLY DELETED? */
*/*%DCD:       D   (YES,%RC0,NO,%DCO) DELETE 'EXTENT=LAST' REQUEST? */
*/*%DCO:       D   (NO,%D2A,YES,%DEC) IS THIS ORIGINAL CPAB? */
*/*%DEC:       D   (YES,%SYS,NO,%RC0) DELETE POOL REQUEST? */
*/*%SYS:       D   (YES,%ZCPAB,NO,%D2A) SYSTEM POOL? */
*/*%ZCPAB:     P   (,%FRD) ZERO OUT CPAB FIELDS  (EXCEPT CPID) AFTER
*/*SAVING ADDRESS AND SIZE*/
*/*%DST2:      P   (,%RC4) STORE SUBPOOL AND POOL LENGTH IN POOL AREA
*/**/
*/*%RC4:       R   RC=4, R0= FREEMAIN RETURN CODE */
*/*%RC8:       R   RC=8 */
*/*%RC12:      R   RC=12 */
*/*%RC20:      R   RC=20 */
*/*%RC16:      R   RC=16 */
*/*%RC0:       R   RC=0 -- NORMAL-- */
*/*IEAVDELP: END */
         EJECT
IEAVDELP CSECT
R0       EQU   0              ENTRY PARAMETER, CONTAINS CPID
*                              IMMEDIATELY BECOMES SCRATCH.
R1       EQU   1              ENTRY PARAMETER, CONTAINS OPTION CODE
*                              IMMEDIATELY BECOMES SCRATCH.
R2       EQU   2              SCRATCH
R3       EQU   3              ON ENTRY, CONTAINS CVT ADDRESS
*                              SCRATCH, FOLLOWING 'GOTCPAB'
R4       EQU   4              ORIGINAL CPAB BASE POINTER
R5       EQU   5              SCRATCH
R6       EQU   6              SCRATCH
R7       EQU   7              PRESERVED RETURN POINT TO USER
R8       EQU   8              INTERNAL LINKAGE REGISTER
R9       EQU   9              USED TO SAVE ENTRY PARAMETER (CPID)
R10      EQU   10             USED TO SAVE ENTRY PARAMETER (OPTIONS)
R11      EQU   11             HEAD POINTER FOR THE PUSH-DOWN STACK OF
*                              DEQUEUED EXTENTS WHEN FREEMAIN IS
*                              SUPPRESSED.
R12      EQU   12             PROGRAM BASE REGISTER
R13      EQU   13             CONTAINS ADDRESS OF CALLER'S SAVE AREA
R14      EQU   14             CONTAINS ADDRESS OF RETURN POINT
*                              IMMEDIATELY BECOMES SCRATCH.
R15      EQU   15             USED FOR RETURN CODE ON EXIT
*                              IMMEDIATELY BECOMES SCRATCH.
LOWHALF  EQU   3              MASK USED FOR CLM OF LOW ORDER HALF-WORD
         USING IEAVDELP,R15
         MODID BR=YES
         DROP  R15
         BALR  R12,0
         USING *,R12
***********************************************************************
*        SINCE THE PROGRAM HAS NO PLACE TO SAFELY STORE, THE ENTRY
*        PARAMETERS (CPID AND OPTION CODE) ARE PRESERVED IN REGISTERS,
*        BECAUSE THEY ARE REQUIRED THROUGHOUT THE PROGRAM.
***********************************************************************
         LR    R7,R14         SAVE RETURN ADDRESS TO CALLER
         LR    R10,R1         SAVE OPTION CODE
         LR    R9,R0          SAVE CPID
         SR    R11,R11        CLEAR PUSH-DOWN LIST ADDRESS
         LTR   R4,R0          TEST CPID VALUE AND SET CPAB BASE
         BM    PERMCPID       NEGATIVE, PERMANENT CPID
         BZ    DELERR16       NULL (=0), ERROR RETURN.
          EJECT
***********************************************************************
*        THE CPID IS FOR A DYNAMIC POOL, AND THE CPAB ADDRESS IS FOUND
*        BY MULTIPLYING THE CPID BY 4.
***********************************************************************
         SLL   R4,2           MULTIPLY CPID BY 4 TO GET CPAB
         B     GOTCPAB         ADDRESS AND CONTINUE PROCESSING
         SPACE 2
***********************************************************************
*        THE CPID IS FOR A PERMANENT (SYSTEM) POOL, THE CPAB IS
*        FOUND BY USING THE LOW-ORDER BYTE OF THE CPID AS AN
*        INDEX INTO THE TABLE OF PERMANENT CPABS. THE TABLE IS
*        LOCATED VIA THE GLOBAL DATA AREA (GDA), WHICH IS FOUND
*        FROM THE CVT.
***********************************************************************
PERMCPID EQU   *
         USING CVT,R3
         L     R3,CVTGDA      GLOBAL DATA AREA ADDRESS
         USING GDA,R3
*****    NOTE: THIS CALCULATION IS DEPENDENT UPON THE LENGTH OF
*****      THE CPAB REMAINING AT 32 BYTES.
         N     R4,F255        ISOLATE LOW-ORDER BYTE OF CPID
         SLL   R4,5           MULTIPLY BY CPAB LENGTH (32 BYTES)
         A     R4,PFSTCPAB     + PERMANENT CPAB TABLE ADDRESS
*                              RESULTING IN THE CPAB ADDRESS IN REG 4.
          SPACE 3
***********************************************************************
*        *** COMMON PATH *** CHECK FOR MATCHING CPID IN THE CPAB
*        BEFORE CONTINUING WITH THE DELETION PROCESS.
***********************************************************************
GOTCPAB  EQU   *
         USING CPAB,R4
         C     R9,CPABCPID    VALIDATE THE CPID FOR POOL INTEGRITY
         BNE   DELERR16       NO MATCH, ERROR RETURN.
         SPACE 2
***********************************************************************
*        THIS IS THE CORRECT POOL, NOW CHECK TO SEE IF IT WAS
*        BUILT BY SYSTEM INITIALIZATION AND THAT THIS IS NOT
*        AN ATTEMPT TO DELETE THE ENTIRE POOL. THIS WILL PREVENT
*        ANY POOL WHICH MUST REMAIN AROUND UNTIL SYSTEM SHUT-DOWN
*        FROM BEING INADVERTENTLY DELETED.
***********************************************************************
         C     R10,POOLDEL#   IS THIS AN EXTENT DELETION REQUEST?
         BL    NONIPTST       YES, SKIP THE 'NIP' BUILT TEST
         TM    CPABFLGS,NIPBLDCP   IF IT WAS BUILT AT SYSTEM
         BO    DELERR08        INITIALIZATION, ERROR RETURN
         B     EXTENT         OTHERWISE CONTINUE
NONIPTST EQU   *
         CLC   CPABNXTP,F0    IS THERE A FIRST EXTENT ?
         BE    DELERR12       NO, ERROR RETURN
         EJECT
***********************************************************************
*        FIND THE LAST EXTENT ON THE QUEUE AND PREPARE TO DELETE IT.
***********************************************************************
EXTENT   EQU   *
         SR    R6,R6          INITIALIZE PRIOR CPAB POINTER
EXTENT0  EQU   *
         CLC   CPABNXTP,F0    IS THIS THE LAST EXTENT?
         BE    LASTEXT        YES, GO DEQUEUE IT.
         LR    R6,R4          NO, STEP FORWARD DOWN THE QUEUE
         L     R4,CPABNXTP    AND GET THE NEXT CPAB ADDRESS.
         B     EXTENT0        SCAN UNTIL LAST EXTENT IS LOCATED
         SPACE 2
***********************************************************************
*        THIS IS THE LAST EXTENT, TEST IT FOR MUTUALLY
*        EXCLUSIVE OPERATIONS, TO PREVENT POOL DESTRUCTION.
***********************************************************************
LASTEXT  EQU   *
         L     R0,CPABFLGW    GET LOCKING DATA
         CLM   R0,LOWHALF,F0  TEST FOR MUTUALLY EXCLUSIVE OPERATIONS
         BNE   DELERR20       ONE IN PROCESS, ERROR EXIT
         LR    R1,R0          NONE, SET DELETE LOCK
         O     R1,DELETEON    ON IN A COPY OF LOCKING DATA
         CR    R0,R1          IF THE DELETE BIT WAS ON, A DELETE
         BE    DELERR20       WAS ALREADY IN PROCESS, ERROR.
         CS    R0,R1,CPABFLGW OTHERWISE, TRY TO SET THE LOCK.
         BNE   DELERR20       THE LOCK DATA HAS CHANGED, ERROR
         SPACE 2
***********************************************************************
*        IF THE STORE WAS SUCCESSFUL, NO OTHER FUNCTION WILL
*        ATTEMPT TO USE THIS EXTENT, SO THE DELETION CAN
*        PROCEED SAFELY.
***********************************************************************
         LTR   R6,R6          IS THIS THE ORIGINAL EXTENT?
         BNZ   DEQUEUE        NO, DEQUEUE IT.
         C     R10,POOLDEL#   YES, IS THIS A POOL DELETE?
         BL    UNLOCKIT       NO, RELEASE (UNLOCK) THIS EXTENT.
         LR    R3,R4          SAVE THE ADDRESS OF THE ORIGINAL EXTENT
         B     REMOVEAB        AND SKIP THE DEQUEUEING MVC
DEQUEUE  EQU   *
         MVC   CPABNXTP-CPAB(L'CPABNXTP,R6),CPABNXTP  DEQUEUE THE CPAB
          EJECT
***********************************************************************
*        THIS ROUTINE REMOVES THE CPAB WHOSE ADDRESS IS IN REGISTER 4.
*        IF THE SUPPRESS FREEMAIN OPTION WAS GIVEN, THE ROUTINE STORES
*        THE FREEMAIN INFORMATION IN THE FIRST TWO WORDS OF THE EXTENT.
*        IF FREEMAIN IS ALLOWED, THE ROUTINE ISSUES THE FREEMAIN TO
*        DELETE THE EXTENT AND ITS CPAB.
***********************************************************************
REMOVEAB EQU   *
         L     R2,CPABENAD    END OF EXTENT ADDRESS
         L     R6,CPABSTAD    STARTING ADDRESS OF EXTENT
         SR    R2,R6          EXTENT LENGTH = END ADDR - START ADDR
         BNP   DELERR12       ERROR, UNFORMATTED POOL (LENGTH <= 0)
         TM    CPABFLGS,CPABEXTN   IS THIS AN EXTENT
         BO    BUMPSIZE       YES, ADD CPAB LENGTH TO EXTENT SIZE
         LTR   R9,R9          NO, IS IT A DYNAMIC POOL?
         BM    NOBUMPSZ       NO, DO NOT ADD CPAB SIZE
BUMPSIZE EQU   *
         LA    R15,CPABNXTP-CPAB+L'CPABNXTP  CPAB LENGTH
         SR    R6,R15         TRUE START ADDRESS (CPAB ADDRESS)
         AR    R2,R15         TRUE LENGTH (INCLUDES CPAB LENGTH)
NOBUMPSZ EQU   *
         SR    R5,R5          CLEAR REGISTER FOR SUBPOOL NUMBER
         IC    R5,CPABSPID    SUBPOOL NUMBER FOR FREEMAIN
         L     R4,CPABCPID    LOAD POINTER TO ORIGINAL CPAB
*                         OR CPID OF THE POOL, IF ORIGINAL BEING FREED.
         LR    R15,R10        COPY THE OPTION CODE AND TEST
         N     R15,FRMBIT31    IT FOR THE OCCURRENCE OF THE
         CLR   R15,R10         OCCURRENCE OF THE FREEMAIN SUPRESS BIT
         BNE   NOFREEMN        IF ON, SKIP FREEMAIN
         FREEMAIN RC,A=(R6),LV=(R2),SP=(R5)
         LTR   R15,R15        FREEMAIN SUCCESSFUL?
         BZ    REMOVED        YES, PREPARE TO RETURN, IF FINISHED
          EJECT
***********************************************************************
*        THIS ROUTINE SAVES THE NECESSARY DATA FOR FREEMAINING
*        THE EXTENT THAT WAS NOT SUCCESSFULLY FREEMAINED IN CASE
*        THE CALLER HAS ANY BETTER CHANCE OF RECOVERING THE
*        ERROR THAN THIS PROGRAM DOES.
***********************************************************************
DELERR04 EQU   *
         LR    R1,R6          PUSH DOWN PRIOR FREED EXTENT
         LR    R0,R15         TRANSFER FREEMAIN ERROR CODE
         LA    R15,4          SET UP ERROR CODE FOR FREEMAIN FAILURE
         USING ERRLIST,R6
         ST    R11,ELISTCHN   STORE PRIOR FREED POOL ADDRESS
         ST    R2,ELISTLEN    STORE LENGTH OF THE AREA
         STC   R5,ELISTSP#    STORE SUBPOOL NUMBER OF AREA
         LR    R11,R6         PUSH DOWN PRIOR FREED AREA (IF ANY)
         LR    R14,R7         RESTORE CALLER'S RETURN ADDRESS
         BR    R14            RETURN TO CALLER
          SPACE 2
***********************************************************************
*        THIS ROUTINE SAVES THE DATA FOR FREEMAIN SO THAT THE
*        USER CAN ISSUE HIS OWN WHEN HE HAS SUPPRESSED FREEMAIN
*        BY DELCPOOL.
***********************************************************************
NOFREEMN EQU   *
         ST    R11,ELISTCHN   STORE PRIOR FREED POOL ADDRESS
         ST    R2,ELISTLEN    STORE LENGTH OF THE AREA
         STC   R5,ELISTSP#    STORE SUBPOOL NUMBER OF AREA
         LR    R11,R6         PUSH DOWN PRIOR FREED AREA (IF ANY)
         SPACE 2
***********************************************************************
*        ON RETURN, REG.4 CONTAINS THE CONTENTS OF 'CPABCPID' FROM THE
*        CPAB FOR THE EXTENT JUST DELETED. IF THIS WAS THE ORIGINAL
*        CPAB, THEN REG 4 = THE CPID, OTHERWISE, IT IS THE ADDRESS OF
*        THE ORIGINAL CPAB, AND CAN BE USED FOR THE QUEUE SEARCH.
*        NOW THAT THE LAST EXTENT OF THOSE THAT REMAIN HAS BEEN
*        REMOVED, CHECK TO SEE IF THE REQUEST WAS ONLY FOR THE
*        DELETION OF THE LAST EXTENT. IF IT WAS, RETURN.
***********************************************************************
REMOVED  EQU   *
         C     R10,LASTLIM#   WAS THIS EXTENT=LAST?
         BNH   DELEXIT0       YES, SUCCESSFUL OPERATION, EXIT
         CR    R4,R9          NO, IS THE WHOLE POOL GONE?
         BE    DELEXIT        YES, RETURN TO USER
         B     EXTENT         NO, GO FIND NEXT EXTENT TO BE DELETED
         EJECT
***********************************************************************
*        RETURN TO THE USER WITH R1 POINTING TO THE DELETED EXTENT
*        QUEUE, IF ANY, AND R0 CONTAINING THE CPID.
*        IF THIS WAS THE DELETION OF A SYSTEM POOL, THEN THE CPAB
*        FIELDS (EXCEPT THE ID 'CPABCPID') ARE TO BE ZEROED. REG. 3
*        CONTAINS THE ORIGINAL CPAB ADDRESS.
***********************************************************************
DELEXIT  EQU   *
         LTR   R9,R9          WAS THIS A PERMANENT POOL?
         BNM   DELEXIT0       NO, SKIP THE CPAB ZEROING PROCESS
         DROP  R4
         USING CPAB,R3
         MVI   CPABCSZE,0     YES, ZERO OUT THE CPAB FIELDS
         MVC   CPABCSZE+1(CPABNXTP-CPABCSZE+L'CPABNXTP-1),CPABCSZE
         DROP  R3
         USING CPAB,R4
DELEXIT0 EQU   *
         LR    R1,R11         ADDRESS OF PUSH-DOWN STACK (IF ANY)
         LR    R0,R9          CPID OF THIS POOL
         LR    R14,R7         RESTORE THE RETURN ADDRESS.
         SR    R15,R15        RETURN CODE OF ZERO
         BR    R14            RETURN TO CALLER
         SPACE 2
***********************************************************************
*        THE ORIGINAL CPAB HAS BEEN LOCKED, BUT IS NOT TO BE
*        DELETED, UNLOCK IT BEFORE RETURNING.
***********************************************************************
UNLOCKIT EQU   *
         L     R0,CPABFLGW    GET THE LOCK FOR THE EXTENT
         LR    R1,R0          COPY IT AND TURN OFF THE
         N     R1,DELETOFF    DELETE LOCK BIT
         CS    R0,R1,CPABFLGW STORE THE LOCK (SHOULD GO THE FIRST TIME)
         BE    DELEXIT0       EXIT WHEN LOCK HAS BEEN TURNED OFF.
         B     UNLOCKIT       LOOP IF NECESSARY TO TURN IT OFF.
          EJECT
***********************************************************************
*        AN ATTEMPT HAS BEEN MADE TO DELETE A POOL CREATED BY
*        SYSTEM INITIALIZATION. THE ASSUMPTION IS MADE THAT SUCH
*        POOLS MUST REMAIN UNTIL THE SYSTEM ITSELF TERMINATES,
*        THEREFORE, DELETION OF SUCH POOLS IS NOT ALLOWED.
***********************************************************************
DELERR08 EQU   *
         LA    R15,8          SET RETURN CODE = 8
         BR    R7             RETURN TO CALLER
         SPACE 2
***********************************************************************
*        THE EXTENT TO BE DELETED IS UNFORMATTED, SO NO ATTEMPT
*        CAN BE MADE TO DELETE IT, AS ITS LENGTH CANNOT BE
*        COMPUTED PROPERLY. THIS OCCURS WHEN THE START ADDRESS
*        OF THE EXTENT 'CPABSTAD' IS LESS THAN OR EQUAL TO THE
*        END ADDRESS 'CPABENAD'. THE STORAGE IS LEFT UNCHANGED,
*        AND IT IS THE USER'S RESPONSIBILITY TO FREE THE EXTENT.
*        THIS RETURN CODE IS ALSO RETURNED WHEN A REQUEST
*        TO DELETE AN EXTENT OR EXTENTS WAS MADE, AND ONLY
*        THE ORIGINAL POOL SEGMENT EXISTS.
***********************************************************************
DELERR12 EQU   *
         LA    R15,12         SET RETURN CODE = 12
         BR    R7             RETURN TO CALLER
         SPACE 2
***********************************************************************
*        THE CPID PASSED IS EITHER NULL (=0) OR DOES NOT AGREE
*        WITH THE CPID IN THE CPAB REFERENCED BY THE ID PASSED.
***********************************************************************
DELERR16 EQU   *
         LA    R15,16         SET RETURN CODE = 16
         BR    R7             RETURN TO CALLER
         SPACE 2
***********************************************************************
*        THE EXTENT BEING DELETED WAS FOUND TO BE THE OBJECT OF A
*        CONCURRENT OPERATION WHICH INHIBITS THE DELETE FUNCTION.
*        IN THIS CASE, A RETURN CODE OF 20 IS GENERATED AND RETURN
*        IS MADE TO THE CALLER. THE EXTENT IS LEFT ON THE QUEUE.
***********************************************************************
DELERR20 EQU   *
         LA    R15,20         SET RETURN CODE = 20
         BR    R7             RETURN TO CALLER
         EJECT
***********************************************************************
*        CONSTANTS AND DATA AREAS USED BY THE PROGRAM
***********************************************************************
POOLDEL# DC    F'8'           OPTION CODE FOR POOLDELETE
F0       DC    F'0'
F255     DC    F'255'         MASK FOR MODULO DIVIDE BY 256
*        THE FOLLOWING TWO MASKS ARE USED TO TURN THE DELETE LOCK BIT
*        ON/OFF WHILE THE FLAG WORD IS IN A REGISTER.
DELETEON DC    AL2(DELETELK),AL2(0)
DELETOFF DC    X'FF',AL1(X'FF'-DELETELK),2X'FF'
LASTLIM# DC    F'3'           OPTION CODE FOR LAST EXTENT DELETION
FRMBIT31 DC    F'-2'          MASK TO TEST FOR FREEMAIN SUPRESSION
         SPACE 3
***********************************************************************
*        THIS DSECT DESCRIBES THE TWO-WORD ERROR LIST SET UP
*        IN THE FIRST TWO WORDS OF THE UN-FREEMAINED EXTENT.
***********************************************************************
ERRLIST  DSECT
ELISTLEN DS    0F
ELISTSP# DS    C              SUBPOOL NUMBER
         DS    AL3            LENGTH
ELISTCHN DS    A              CHAINING ADDRESS TO NEXT LIST
         EJECT
CVT      DSECT
         CVT   LIST=NO
         EJECT
         IHAGDA
         EJECT
         IHACPAB
         END
