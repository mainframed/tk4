         TITLE 'BUILD QUICKCELL POOL MODULE --- IEAVBLDP'
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVBLDP
*
*02*     CSECT-NAME = IEAVBLDP
*
*01*  DESCRIPTIVE-NAME = BUILD QUICKCELL POOL
*
*01*  COPYRIGHT = NONE
*01*  STATUS = LEVEL 02.02  -- 1/31/74
*
*01*  FUNCTION = CREATE, EXTEND OR RECOVER (REFORMAT) A QUICK-CELL
*     POOL.
*
*02*     OPERATION = THE STORAGE PASSED BY THE CALLER (ADDRESS OF
*        STORAGE IN REGISTER 1) IS FORMATTED INTO A POOL OF CONTIGUOUS
*        CELLS. IF THE POOL IDENTIFIER (PASSED IN REGISTER 0) IS FOUND
*        TO INDICATE THAT SUCH A POOL ALREADY EXISTS, THE EXISTING POOL
*        IS EXTENDED BY THE ADDITION OF A NEW SEGMENT (EXTENT), WHICH
*        IS CREATED FROM THE STORAGE SUPPLIED. IF NO SUCH POOL ALREADY
*        EXISTS, THE NEW POOL IS SIMILARLY CREATED. IF NO ADDRESS IS
*        SUPPLIED IN REGISTER 1, THE POOL WHOSE IDENTIFIER IS IN
*        REGISTER 0 IS REFORMATTED, REGARDLESS OF THE CURRENT
*        ALLOCATION STATUS OF THE POOL. UPON COMPLETION, THE POOL
*        CONSISTS OF AS MANY EVEN-SIZED CELLS AS WILL FIT IN THE SPACE
*        PASSED. EACH CELL WILL ADDRESS ITS SUCCESSOR CELL THROUGH AN
*        ADDRESS IN THE LAST WORD OF THE CELL. THIS WORD IS ADDED TO
*        THE USER-SPECIFIED CELL LENGTH. THE LAST CELL IN THE SEGMENT
*        WILL CONTAIN A ZERO IN THIS FIELD. THE FIRST OF THESE CELLS IN
*        THE EXTENT WILL BE ADDRESSED BY THE 'CPABFACP' FIELD IN THE
*        CELL POOL ANCHOR BLOCK (CPAB) FOR THIS POOL SEGMENT (EXTENT).
*
*01*   NOTES = STANDARD LINKAGE CONVENTIONS
*
*02*     DEPENDENCIES = 370R-MULTIPROCESSOR INSTRUCTION SET
*
*03*        CHARACTER-CODE-DEPENDENCIES = NONE
*02*     RESTRICTIONS = NONE
*02*     REGISTER-CONVENTIONS = SEE REGISTER EQUATES FOLLOWING CSECT
*        STATEMENT
*
*02*     PATCH-LABEL = NUCLEUS PATCH AREA
*
*01*  MODULE-TYPE = MACRO-INVOKED PROCESSING SUBROUTINE
*
*02*     PROCESSOR = ASSEMBLER-370R
*
*02*     MODULE-SIZE = 650 BYTES
*
*02*     ATTRIBUTES = REFRESHABLE , NUCLEUS RESIDENT
*
*01*  ENTRY-POINT = IEAVBLDP
*
*02*     PURPOSE = CREATION, EXTENSION OR REFORMATTING OF A QUICK-CELL
*        POOL.
*
*02*     LINKAGE = ENTERED VIA A BALR 14,15 ... SHOULD BE INVOKED BY
*        THE BLDCPOOL MACRO-INSTRUCTION.
*                 REG 0 = CPID OF THE POOL OR 0 FOR DYNAMIC POOL
*                 CREATION.
*                 REG 1 = ADDRESS OF THE STORAGE TO BE FORMATTED INTO
*                 THE POOL EXTENSION OR 0 FOR RECOVERY OF AN ENTIRE
*                 POOL.
*
*02*     INPUT = THE FIRST 32 BYTES OF THE EXTENT AREA (ADDRESSED BY
*        REG. 1) IS FORMATTED INTO A MODEL CPAB (CELL POOL ANCHOR
*        BLOCK) BY THE BLDCPOOL MACRO EXPANSION. THE FOLLOWING FIELDS
*        IN THIS MODEL CPAB CONTAIN INPUT INFORMATION: CPABCPID,
*        CPABCSZE, CPABSPID, AND CPABENAD (THE LENGTH OF THE EXTENT).
*        ... ALL OTHER FIELDS ARE SET TO ZERO.
*
*02*     OUTPUT = THE EXTENT IS FORMATTED INTO A QUICK-CELL POOL, AND
*        THE CPAB IDENTIFYING IT IS ENQUEUED INTO THE CHAIN OF CPABS
*        FOR THE POOL.
*
*02*     REGISTERS-SAVED = THIS ROUTINE SAVES NO REGISTERS, THE MACRO
*        SAVES REGS. 2 THROUGH 12 INCLUSIVE.
*
*02*     REGISTER-USAGE = SEE COMMENTS ON REGISTER EQUATES.
*
*02*     REGISTERS-RESTORED = NONE ... SEE REGISTERS SAVED.
*
*01*  EXIT-NORMAL = EXIT
*
*02*     CONDITIONS = SUCCESSFUL FORMATTING OF THE EXTENT OR THE POOL
*        (RECOVER).
*
*02*     OUTPUT = THE CPAB DESCRIBING THE EXTENT IS FULLY INITIALIZED
*        AND THE EXTENT IS FORMATTED INTO A QUEUE OF CELLS.
*
*02*     RETURN-CODES = 0
*
*01*  EXIT-ERROR = BLDERR08
*
*02*     CONDITIONS = INVALID CPID OR UNFORMATTED POOL.
*
*02*     OUTPUT = RETURN CODE.
*        REG 0 CONTAINS EXTENT SUBPOOL NUMBER AND LENGTH OF THE EXTENT
*        REG 1 CONTAINS EXTENT ADDRESS.
*        NOTE: THESE PARAMETERS ARE SET UP FOR AN R-FORM FREEMAIN.
*
*02*     RETURN-CODES = 8
*
*01*  EXIT-ERROR = BLDERR12
*
*02*     CONDITIONS = INVALID SUBPOOL ... NON-GLOBAL ONE FOR PERMANENT
*        CPID OR NON-MATCHING ONE FOR EXTENSION OF ANY EXISTING POOL.
*
*02*     OUTPUT = RETURN CODE.
*        REG 0 CONTAINS EXTENT SUBPOOL NUMBER AND LENGTH OF THE EXTENT
*        REG 1 CONTAINS EXTENT ADDRESS.
*        NOTE: THESE PARAMETERS ARE SET UP FOR AN R-FORM FREEMAIN.
*
*02*     RETURN-CODES = 12
*
*01*  EXIT-ERROR = BLDERR16
*
*02*     CONDITIONS = INVALID CELL SIZE ... NON-MATCHING SIZE ON POOL
*        EXTEND OPERATION OR CELL SIZE GREATER THAN POOL SIZE ON ANY
*        OPERATION.
*
*02*     OUTPUT = RETURN CODE.
*        REG 0 CONTAINS EXTENT SUBPOOL NUMBER AND LENGTH OF THE EXTENT
*        REG 1 CONTAINS EXTENT ADDRESS.
*        NOTE: THESE PARAMETERS ARE SET UP FOR AN R-FORM FREEMAIN.
*
*02*     RETURN-CODES = 16
*
*01*  EXIT-ERROR = BLDERR20
*
*02*     CONDITIONS = INCOMPATABLE CONCURRENT REQUEST ... A DELETE
*        (DELCPOOL) WAS IN PROCESS FOR THIS POOL, CAUSING THE EXTENT TO
*        WHICH THE NEW EXTENT WAS TO BE ENQUEUED TO BECOME DELETED, BUT
*        THE DELETE HAD NOT COMPLETED BY THE TIME THIS ROUTINE HAD
*        RE-SEARCHED THE QUEUE TO FIND THE END THE FIFTH TIME.
*
*02*     OUTPUT = RETURN CODE.
*        REG 0 CONTAINS EXTENT SUBPOOL NUMBER AND LENGTH OF THE EXTENT
*        REG 1 CONTAINS EXTENT ADDRESS.
*        NOTE: THESE PARAMETERS ARE SET UP FOR AN R-FORM FREEMAIN.
*
*02*     RETURN-CODES = 20
*
*01*  EXTERNAL-REFERENCES = CVT, GDA, AND CPAB.
*
*02*     ROUTINES = NONE
*02*     CONTROL-BLOCKS = CVT AND GDA (READ ONLY). CPAB (READ AND
*        WRITE).
*
*01*  TABLES = NONE
*01*  MACROS = FREEMAIN
*02*     SERIALIZATION = THE 'CPABFLGW' FIELD IS USED TO SERIALIZE ALL
*        OPERATIONS ON ANY SINGLE POOL EXTENT, REGARDLESS OF THE TYPE
*        OF OPERATION. THIS FIELD IS MANIPULATED WITH THE 'CS' (COMPARE
*        AND SWAP) INSTRUCTION. ONE BIT IN THIS FIELD, 'DELETELK', IS
*        USED TO INDICATE THAT THE EXTENT IS BEING DELETED FROM THE
*        POOL. IF A DELETE IS OCCURING (THE BIT IS 'ON'), ALL OTHER
*        OPERATIONS ARE PROHIBITED ON THE EXTENT BEING DELETED. IF NO
*        DELETE IS OCCURRING, THE USE COUNT 'CPABUSE#' IS USED TO
*        PREVENT A DELETE FROM STARTING IN THE MIDDLE OF SOME OTHER
*        PROCESS. A NON-ZERO VALUE FOR 'CPABUSE#' WILL PREVENT AN
*        EXTENT FROM BEING DELETED. ONCE THE EXTENT HAS BEEN LOCKED
*        AGAINST DELETES, THE DOUBLE-WORD FIELD CONSISTING OF
*        'CPABDEQC' AND 'CPABFACP' IS USED TO SERIALIZE THE ACQUISITION
*        AND RELEASE OF CELLS IN THE SINGLE EXTENT. THIS DOUBLE-WORD
*        FIELD IS MANIPULATED WITH THE 'CDS' (COMPARE DOUBLE AND SWAP)
*        INSTRUCTION.
*
*01*  CHANGE-ACTIVITY = NEW FOR OS/VS2 RELEASE 2.
*        LEVEL 02.00 ... CONTAINS FULL ERROR RETURN SUPPORT,
*        AND M-P INSTRUCTIONS FOR INTERNAL LOCKING OF THE POOL.
*        LEVEL 2.01 CONTAINS DCRR 23108...SUPPORT FOR BOUNDARY
*        ALIGNMENT.
*01*  MESSAGES = NONE
*01*  ABEND-CODES = NONE
**** END OF SPECIFICATIONS ***/
         EJECT
*/*BLDCPOOL:   CHART (AMODE)      */
*/* HEADER
*/*DYNAMIC QUICKCELL
*/*                                          BUILD CELL POOL ROUTINE
*/*
*/*                                      PAGE  # */
*/*IEAVBLDP:1A2 E  (,%RND) BRANCH ENTRY */
*/*%RND:       P   (,CONTINUE) ROUND CELL SIZE TO A MULTIPLE OF 4
*/*(IF NECESSARY)   */
*/*CONTINUE:   D   (YES,PERMCPID,NO,%D2) PERMANENT CPID? */
*/*PERMCPID:   P   (,%PINIT) CALCULATE INDEX INTO CPAB TABLE */
*/*%PINIT:     D   (NO,%PRCV,YES,CPIDTEST) IS THE POOL FORMATTED ? */
*/*%PRCV:      D   (YES,BLDERR08,NO,%D3) RECOVER REQUEST ? */
*/*%D3:1D2     D   (NO,BLDERR12,YES,MOVEMODL) GLOBAL SUBPOOL? */
*/*MOVEMODL:   P   (,EXTEND) INITIALIZE ORIGINAL PERMANENT CPAB */
*/*%D2:1B3     D   (NO,DYNAMOLD,YES,%DYN) NULL CPID (CREATE)? */
*/*%DYN:       D   (YES,BLDERR08,NO,%DYNER) CPADDR = 0? (RECOVER?) */
*/*%DYNER:1B4  P   (,NOCPIDCK)  CREATE DYNAMIC CPID (CPADDR/4)*/
*/*DYNAMOLD:   P   (,CPIDTEST)  CALCULATE CPAB ADDR (CPID*4)*/
*/*CPIDTEST:   D   (NO,BLDERR08,YES,%D5) CPID'S MATCH? */
*/*%D5:1F3     D   (NO,%SPCHK,YES,RECOVER) RECOVER REQUEST? */
*/*%SPCHK:1G2  D   (NO,BLDERR12,YES,%D7) SUBPOOL NUMBERS MATCH? */
*/*%D7:1H2     D   (NO,BLDERR16,YES,%SEXT) CSIZES MATCH? */
*/*%SEXT:      P   (,NOCPIDCK) SET EXTENT BIT ON IN CPAB */
*/*NOCPIDCK:   P   (,EXTEND) SET UP LIMIT ADDRESSES IN CPAB */
*/*EXTEND:     S   (,FINDLOOP) POOLFORM: FORMAT THE EXTENT  */
*/*FINDLOOP:   P   (,%CHN) LOOP UNTIL LAST CPAB FOUND */
*/*%CHN:       M   (,%CHN1) LOCK OUT DELETE (RAISE USE COUNT) */
*/*%CHN1:      D   (YES,%CHN2,NO,BLDERR20) DID I GET THE THE LOCK ? */
*/*%CHN2:1J1   M   (,%RUSE) CHAIN CPABE TO CPAB(E) USING 'CS'. */
*/*%RUSE:      P   (,EXIT) UNLOCK THE EXTENT (LOWER THE USE COUNT) */
*/*EXIT:       R   RC = 0 */
*/*RECOVER:    M   (,RCVRLOOP) SET BUILD IN PROCESS FLAG FOR POOL*/
*/*RCVRLOOP:   P   (,%PLFC) SET DELETE LOCK FOR EXTENT */
*/*%PLFC:      S   (,%RSTLK) POOLFORM: FORMAT THE EXTENT */
*/*%RSTLK:     P   (,%RCVD) RESET DELETE LOCK FOR THE EXTENT */
*/*%RCVD:      D   (YES,RCVRLOOP,NO,EXIT) ANY MORE EXTENTS? */
*/*BLDERR08:   P   (,ERREXIT) SET RETURN CODE TO 8     */
*/*BLDERR12:   P   (,ERREXIT) SET RETURN CODE TO 12 */
*/*BLDERR16:   P   (,ERREXIT) SET RETURN CODE TO 16 */
*/*BLDERR20:   P   (,ERREXIT) SET RETURN CODE TO 20 */
*/*OK2EXIT:    R   RETURN, PASS PRESET RETURN CODE */
*/*ERREXIT:    P   (,OK2EXIT) SET UP REGS 0 & 1 WITH SP#, LENGTH AND
*/*ADDRESS OF STORAGE AREA */
*/*BLDCPOOL: END */
*/*POOLFOR:    CHART (AMODE)  */
*/* HEADER
*/*DYNAMIC QUICKCELL
*/*                              BUILD-POOL FORMATTING SUBROUTINE
*/*
*/*                                            # */
*/*POOLFORM:   E   (,%PF1) BALR TYPE ENTRY */
*/*%PF1:       P   (,%PREP) COMPUTE NUMBER OF CELLS IN EXTENT */
*/*%PREP:      M   (,%TCNT) SET UP LOOP COUNT FROM NUMBER */
*/*%FAVL:      P   (,LOOPFORM) STORE FIRST FREE CELL ADDRESS IN CPAB */
*/*%TCNT:      D   (YES,BLDERR16,NO,%FAVL) COUNT = ZERO? */
*/*LOOPFORM:   P   (,%NXT) CHAIN CELL TO NEXT CELL (FORCE BOUNDARY
*/* ALIGNMENT IF NECESSARY)*/
*/*%NXT:       M   (,%FRM) REDUCE CELL COUNT */
*/*%FRM:       D   (YES,LASTCELL,NO,LOOPFORM) ZERO CELLS REMAINING? */
*/*LASTCELL:   P   (,%RCP0) STORE 0 IN THE CELL LINK FIELD OF THE LAST
*/*CELL */
*/*%RCP0:      R   RETURN */
*/*BLDERR16:   R   RC=16 */
*/*POOLFOR: END */
         EJECT
IEAVBLDP CSECT
CELLLINK EQU   0              CELL LINKAGE POINTER
R0       EQU   0              CPID -- INPUT PARAMETER
R1       EQU   1              POOL AREA ADDRESS -- INPUT PARAMETER
R2       EQU   2              SCRATCH REGISTER
R3       EQU   3              SCRATCH REGISTER
*                             ON INPUT, R3 CONTAINS CVT ADDRESS
R4       EQU   4              CPAB ADDRESS (CALCULATED)
R5       EQU   5              SCRATCH REGISTER
R6       EQU   6              NEXT CELL ADDRESS (DURING FORMATTING)
R7       EQU   7              LOOP CONTROL REGISTER (DURING FORMATTING)
R8       EQU   8              ADDRESS OF CPAB (DURING FORMATTING)
R9       EQU   9              CELL LENGTH (DURING FORMATTING)
R10      EQU   10             *** UNUSED ***
R11      EQU   11             INTERNAL LINKAGE TO THE POOLFORM ROUTINE
R12      EQU   12             CONTAINS POOL AREA ADDRESS FOR ERR RETURN
R13      EQU   13             (DO NOT USE) CALLER SAVE AREA ADDRESS
R14      EQU   14             RETURN ADDRESS
R15      EQU   15             ENTRY POINT ADDRESS (BASE REGISTER)
         EJECT
         USING IEAVBLDP,R15
         MODID BR=YES
***********************************************************************
*        TEST THE VALUE OF THE CELL SIZE FOUND IN THE MODEL CPAB
*        WHICH IS PASSED BY THE MACRO INVOKATION IN THE FIRST
*        32 BYTES OF THE USER'S POOL AREA (POINTED TO BY
*        REGISTER 1). IF THE CELL SIZE IS NOT A MULTIPLE OF FOUR,
*        ROUND IT.
***********************************************************************
         USING CPAB,R1
         LTR   R12,R1         SAVE POOL AREA ADDRESS FOR ERROR EXITS
         BZ    TESTCPID       IF RECOVER OPTION, SKIP LENGTH CHECK
         TM    CPABCSZE+L'CPABCSZE-1,3   IS THE LENGTH A MULTIPLE OF 4?
         BZ    CONTINUE       YES, LENGTH IS MULTIPLE OF 4, CONTINUE
         L     R2,CPABCSZE    NOT A MULTIPLE OF FOUR, GET LENGTH
         LA    R2,4(R2)        AND INCREASE IT BY 4. THEN RETURN IT
         ST    R2,CPABCSZE    TO THE CPAB AND TURN OFF ANY ODD BITS
         NI    CPABCSZE+L'CPABCSZE-1,X'FF'-3 IN THE LENGTH (<4).
CONTINUE EQU   *
         TM    CPABFLGS,BLDDWORD   DOUBLE WORD CELL ALIGNMENT REQUIRED?
         BZ    TESTCPID            NO, LEAVE SIZE UNCHANGED.
         TM    CPABCSZE+L'CPABCSZE-1,X'04' YES, IF CELL SIZE IS ALREADY
         BO    TESTCPID            DOUBLE-WORD MULTIPLE, THEN IT MUST
         LA    R2,4                BE ADJUSTED BY 4 TO FORCE THE
         A     R2,CPABCSZE         REQUIRED DOUBLE WORD ALIGNMENT,
         ST    R2,CPABCSZE         INCLUDING THE LINK POINTER LENGTH.
TESTCPID EQU   *
         DROP  R1
         LTR   R4,R0          TEST CPID VALUE (& PREPARE CPAB BASE)
         BM    PERMCPID       NEGATIVE, PERMANENT (SYSTEM) CPID
         BNZ   DYNAMOLD       POSITIVE, OLD DYNAMIC POOL ID
         SPACE 3
***********************************************************************
*        THE CPID HAS BEEN FOUND TO BE NULL. THIS MEANS THAT A NEW
*        DYNAMIC CELL POOL IS TO BE CREATED. THE NEW ID IS CREATED
*        BY DIVIDING THE ADDRESS OF THE CPAB (IN REG. 1) BY 4.
***********************************************************************
         USING CPAB,R4
         LTR   R0,R1          NEW CPID = CPADDR
         BZ    BLDERR08       ERROR, NULL CPADDR - (RECOVER REQUEST)
         LR    R4,R1          SET UP CPAB BASE ADDRESSING AREA PASSED
         SRL   R0,2           CPID = CPADDR / 4
         ST    R0,CPABCPID    STORE THE NEW ID IN THE CPAB
         B     NOCPIDCK       BRANCH TO MAINLINE
         EJECT
***********************************************************************
*        A PERMANENT (SYSTEM) CPID HAS BEEN PASSED, THE CPAB
*        ADDRESS IS FOUND BY USING THE LOW-ORDER BYTE OF THE
*        ID AS AN INDEX INTO A TABLE OF CPAB'S. THE TABLE IS
*        FOUND FROM THE GLOBAL DATA AREA (GDA), WHOSE ADDRESS
*        IS FOUND IN THE CVT.
***********************************************************************
PERMCPID EQU   *
         USING CVTMAP,R3
         L     R3,CVTGDA      GDA ADDRESS
         USING GDA,R3
*        THE CELL POOL ANCHOR BLOCK (CPAB) ADDRESS = CPID
         N     R4,F255             // 256 (MODULO DIVISION)
         SLL   R4,5                * 32 (CPAB LENGTH)
         A     R4,PFSTCPAB         + CPAB TABLE ADDRESS
*****    NOTE THAT THE PREVIOUS CALCULATION IS DEPENDENT UPON THE
*****    LENGTH OF THE CPAB BEING A POWER OF 2 (32).
         L     R3,CPABSTAD    GET POOL START ADDRESS TO TEST:
         LTR   R3,R3          HAS THE POOL BEEN INITIALIZED?
         BNZ   CPIDTEST       YES, GO CHECK FOR CPID MATCH
         LTR   R1,R1          NO, IS IT A RECOVER REQUEST?
         BZ    BLDERR08       YES, ERROR - RECOVERING AN UN-BUILT POOL
         C     R0,CPABCPID    IS THIS THE CORRECT CPAB?
         BNE   BLDERR08       NO, THE CPIDS DO NOT MATCH, ERROR.
         CLI   CPABSPID-CPAB(R1),GSP1   IS THIS A GLOBAL SUBPOOL?
         BE    MOVEMODL       YES, GO INITIALIZE THE ANCHOR BLOCK
         CLI   CPABSPID-CPAB(R1),GSP2   IS THIS A GLOBAL SUBPOOL?
         BE    MOVEMODL       YES, GO INITIALIZE THE ANCHOR BLOCK
         CLI   CPABSPID-CPAB(R1),GSP3   IS THIS A GLOBAL SUBPOOL?
         BE    MOVEMODL       YES, GO INITIALIZE THE ANCHOR BLOCK
         CLI   CPABSPID-CPAB(R1),GSP4   IS THIS A GLOBAL SUBPOOL?
         BE    MOVEMODL       YES, GO INITIALIZE THE ANCHOR BLOCK
         B     BLDERR12       ERROR, NON-GLOBAL SUBPOOL
MOVEMODL EQU   *
         MVC   CPAB(CPABLEN),0(R1) MOVE MODEL CPAB FROM USER CORE
         L     R2,CPABENAD     SET UP POOL START AND END ADDRESSES IN
         AR    R2,R1           THE NEW CPAB. ADD START ADDRESS TO
         STM   R1,R2,CPABSTAD  THE LENGTH AND STORE THE TWO POINTERS
         LR    R1,R4          SET UP ADDRESS OF ORIGINAL CPAB
         B     EXTEND         CONTINUE WITH MAINLINE
         SPACE
***********************************************************************
*        THESE REPRESENT THE LEGITIMATE GLOBAL SUBPOOLS IN WHICH
*        A PERMANENT POOL CAN EXIST. IF THE DESIGN IS CHANGED, THESE
*        WILL HAVE TO BE HANDLED ACCORDINGLY.
***********************************************************************
GSP1     EQU   231           COMMON SERVICE AREA (CSA)
GSP2     EQU   239           GLOBAL FIXED STORAGE
GSP3     EQU   241           COMMON SERVICE AREA (CSA)
GSP4     EQU   245           SYSTEM QUEUE AREA (SQA)
         EJECT
***********************************************************************
*        THE CPID HAS BEEN FOUND TO BE A DYNAMIC POOL ID AND
*        THE ADDRESS OF THE FIRST CPAB IS FOUND FROM THE CPID
*        BY MULTIPLYING IT BY 4.
***********************************************************************
DYNAMOLD EQU   *
*                            REGISTER 4 ALREADY CONTAINS THE CPID,
         SLL   R4,2           MULTIPLY BY 4 TO GET CPAB ADDRESS.
         SPACE 3
***********************************************************************
*        COMMON PATH******** AFTER FINDING THE CPAB FOR THE
*        ID GIVEN, CHECK FOR MATCHING CPID'S, UNFORMATTED
*        POOLS, AND RECOVER REQUESTS.
***********************************************************************
CPIDTEST EQU   *
         C     R0,CPABCPID              CPID'S MATCH ?
         BNE   BLDERR08                  NO, ERROR CONDITION
         LTR   R1,R1                    IS THIS A RECOVER REQUEST?
         BZ    RECOVER                   YES, GO TO RECOVER ROUTINE
         CLC   CPABCSZE,CPABCSZE-CPAB(R1)    CELL SIZES MATCH?
         BNE   BLDERR16                 NO, ERROR CONDITION
         CLC   CPABSPID,CPABSPID-CPAB(R1)    SUBPOOLS MATCH?
         BNE   BLDERR12                 NO, ERROR CONDITION
         OI    CPABFLGS-CPAB(R1),CPABEXTN    SET CPAB EXTENSION FLAG
         ST    R4,CPABCPID-CPAB(R1)     LINK NEW CPAB TO ORIGINAL CPAB
NOCPIDCK EQU   *
         L     R2,CPABENAD-CPAB(R1)     GET POOL LENGTH FROM MODEL CPAB
         AR    R2,R1                    ADD POOL LENGTH TO GET POOL END
         ST    R2,CPABENAD-CPAB(R1)     ADDR. AND STORE IT IN THE CPAB.
         LA    R2,CPABNXTP-CPAB+L'CPABNXTP(R1) R2 = START ADDRESS OF
         ST    R2,CPABSTAD-CPAB(R1)     THE POOL, STORE IT IN THE CPAB.
         B     EXTEND                   GO TO THE POOL EXTEND ROUTINE.
         EJECT
***********************************************************************
*        A RECOVER REQUEST HAS BEEN ISSUED, THIS ROUTINE CONTROLS THE
*        SUCCESSIVE INVOKATION OF THE POOL FORMATTING ROUTINE AS EACH
*        EXTENT BECOMES RE-FORMATTED.
*        THIS ROUTINE IS ALSO RESPONSIBLE FOR THE SERIALIZATION OF ALL
*        OPERATIONS AND ASSURANCE THAT NO OTHER QUICK-CELL OPERATION
*        BEGINS WHILE THE EXTENT IS BEING RECOVERED.
***********************************************************************
RECOVER  EQU   *
RCVRLOOP EQU   *
         LR    R8,R4          SET UP CPAB ADDRESS AS PARM FOR THE
*                             FORMATTING ROUTINE.
RCVRLOCK EQU   *
         L     R2,CPABFLGW    GET THE LOCKS FOR THIS EXTENT
RCVRLOC2 EQU   *
         LR    R3,R2          COPY THEM AND SET THE DELETE LOCK BIT
         O     R3,DELETEON    ON FOR THIS EXTENT. STORE THE
         CS    R2,R3,CPABFLGW LOCKS IN ORDER TO INHIBIT ALL
         BNE   RCVRLOC2       CONCURRENT GETS AND FREES DURING RECOVERY
         BAL   R11,POOLFORM   LINK TO THE POOL FORMATTING ROUTINE.
RCVRUNLK EQU   *
         L     R2,CPABFLGW    GET THE LOCKS FOR THIS EXTENT
RCVRUNL2 EQU   *
         LR    R3,R2          COPY THEM AND SET THE DELETE LOCK BIT
         N     R3,DELETOFF    OFF FOR THIS EXTENT. STORE THE
         CS    R2,R3,CPABFLGW LOCKS IN ORDER TO ALLOW ALL
         BNE   RCVRUNL2       GETS AND FREES FOLLOWING RECOVERY
         L     R4,CPABNXTP    GET NEXT CPAB POINTER
         LTR   R4,R4          IS IT NULL (=0), END OF CHAIN??
         BNZ   RCVRLOOP       NO, CONTINUE THE RECOVERY
         LR    R4,R8          YES, RESTORE THE LAST CPAB ADDRESS
         B     BLDEXIT0       THE POOL IS FULLY RECOVERED, RETURN.
         EJECT
***********************************************************************
*        THIS ROUTINE EXTENDS THE POOL BY INVOKING THE FORMAT ROUTINE
*        FOR THE NEW POOL EXTENT AND ENQUEUEING THE NEW EXTENT ON THE
*        LAST ONE IN THE POOL. SINCE THE ENQUEUEING OPERATION IS NOT
*        ACCOMPLISHED UNTIL THE NEW EXTENT HAS BEEN FORMATTED, THERE
*        IS NO SERIALIZATION PROBLEM UNTIL THE ENQUEUE OCCURS. THE USE
*        COUNT OF THE LAST CPAB IS INCREMENTED TO PREVENT IT FROM
*        BEING DELETED BEFORE THE NEW EXTENT CAN BE ADDED.
***********************************************************************
EXTEND   EQU   *
         LR    R8,R1          PASS CPAB ADDRESS TO POOL FORMAT ROUTINE
         BAL   R11,POOLFORM   LINK TO THE FORMATTING ROUTINE
         CR    R4,R1          IS THIS THE FIRST CPAB FOR THE POOL?
         BE    EXIT           YES, SKIP THE ENQUEUE PROCESS
***********************************************************************
*        FIND THE LAST CPAB IN THE CHAIN AND LOCK IT, SO THAT THE NEW
*        EXTENT CAN BE ENQUEUED ON THE END OF THE CHAIN.
*        THIS LOCK WILL PROHIBIT CONFLICTING OPERATIONS BY PREVENTING
*        ANY DELETIONS FROM TAKING PLACE ON THIS EXTENT
*        CONCURRENT WITH THIS BUILD, WHILE GETS AND FREES OF CELLS MAY
*        STILL BE CARRIED OUT ON THE PREVIOUSLY EXISTING EXTENTS.
***********************************************************************
         LA    R11,5          SET UP TO RETRY IF DELETION IS IN
*                             PROCESS FOR THE LAST EXTENT. THIS
*                             SHOULD GIVE THE DELETE TIME TO FINISH.
FINDLOOP EQU   *
         L     R5,CPABNXTP    GET NEXT CPAB ADDRESS
         LTR   R5,R5           IS IT NULL? (=0)
         BZ    RETRYLK         YES, THE LAST CPAB HAS BEEN FOUND
         LR    R4,R5           NO, CONTINUE THE LOOP
         B     FINDLOOP         UNTIL THE LAST CPAB IS FOUND.
         SPACE
RETRYLK  EQU   *
         L     R2,CPABFLGW    GET THE LOCKS FOR THIS EXTENT
RETRYLK2 EQU   *
         LR    R3,R2          COPY THEM AND TEST THEM FOR THE
         N     R3,DELETOFF    PRESENCE OF THE DELETE LOCK. IF
         CR    R3,R2          THEY ARE THE SAME, THE EXTENT IS NOT
         BE    NOTLOCKD       NOT BEING DELETED, CONTINUE.
         BCT   R11,TRYAGAIN   THE EXTENT IS BEING DELETED,
*                             SEARCH THE QUEUE AGAIN, TO FIND THE
*                             NEW LAST EXTENT AND TO ALLOW THE
*                             DELETE TO FINISH.
         B     BLDERR20       THE DELETE DID NOT COMPLETE AFTER
*                             THE NECESSARY RETRIES, ERROR RETURN
         EJECT
TRYAGAIN EQU   *
         TM    CPABFLGS,CPABEXTN   IF THIS IS THE ONLY POOL SEGMENT
         BZ    BLDERR20            ERROR RETURN, THE WHOLE POOL IS
         L     R4,CPABCPID         BEING DELETED. OTHERWISE, GET THE
         B     FINDLOOP            FIRST CPAB ADDRESS AND RETRY.
NOTLOCKD EQU   *
         A     R3,F1          THIS EXTENT IS NOT DEING DELETED,
         CS    R2,R3,CPABFLGW LOCK DELETE OUT BY RAISING THE
         BNE   RETRYLK2       USE COUNT OF THE EXTENT. REPEAT
*                             THE TEST IF THE LOCK WORD HAS CHANGED.
         L     R5,CPABNXTP    THE EXTENT IS NOW MINE, NOW
         LTR   R5,R5          ENQUEUE THE CPAB, IF THE EXTENT
         BNZ   NEXTCPAB       IS STILL THE LAST ONE --- IF IT IS NO
*                             LONGER THE LAST ONE, FIND THE LAST ONE.
         CS    R5,R1,CPABNXTP STILL LAST, ENQUEUE THE NEW EXTENT
         BE    EXITUNL2       IF SUCCESSFUL, EXIT
NEXTCPAB EQU   *
         L     R2,CPABFLGW    UNLOCK THIS PRESENT EXTENT BY
NEXTCPA2 EQU   *
         LR    R3,R2          REDUCING THE USE COUNT AND
         S     R3,F1          STORING IT BACK IN THE EXTENT
         CS    R2,R3,CPABFLGW TO ALLOW CONCURRENT GETS AND
         BNE   NEXTCPA2       FREES. IF THE LOCK PICTURE CHANGES,
*                             CONTINUE UNTIL IT CAN BE STORED.
         B     TRYAGAIN       LOCK CHANGED, FIND THE NEW QUEUE END.
         SPACE 2
***********************************************************************
*        EXIT ROUTINE FOR SUCCESSFUL OPERATIONS, THIS ROUTINE
*        UNLOCKS THE EXTENT (IF REQUIRED) PRIOR TO EXIT.
***********************************************************************
EXIT     EQU   *
         TM    CPABFLGS,CPABEXTN   IF THIS IS NOT AN EXTENT, NO
         BZ    FIRSTONE       UNLOCKING OF THE PRIOR EXTENT REQUIRED
EXITUNLK EQU   *
         L     R2,CPABFLGW    UNLOCK THIS PRESENT EXTENT BY
EXITUNL2 EQU   *
         LR    R3,R2          REDUCING THE USE COUNT AND
         S     R3,F1          STORING IT BACK IN THE CPAB
         CS    R2,R3,CPABFLGW TO ALLOW CONCURRENT GETS AND
         BNE   EXITUNL2       FREES.
FIRSTONE EQU   *
BLDEXIT0 EQU   *
         SR    R15,R15        RETURN TO CALLER RC=0
         BR    R14
         EJECT
***********************************************************************
*        THIS SUBROUTINE PERFORMS THE POOL FORMATTING OPERATION.
*        ON ENTRY, REG 8 CONTAINS THE ADDRESS OF THE CPAB FOR THE
*        EXTENT TO BE FORMATTED. REG 11 CONTAINS THE RETURN POINT
*        TO THE CALLER.
***********************************************************************
POOLFORM EQU   *
         DROP  R4
         USING CPAB,R8
         L     R7,CPABENAD    POOL END ADDRESS
         S     R7,CPABSTAD     MINUS POOL START ADDRESS
         BNP   BLDERR16        EQUALS LENGTH, IF LENGTH <= 0 , ERROR.
         L     R5,CPABCSZE    GET CELL SIZE
         LA    R9,4(R5)       ADD LINK POINTER SIZE TO
         SR    R6,R6           OBTAIN THE TRUE INTERNAL CELL LENGTH.
         DR    R6,R9          DIVIDE POOL SIZE BY CELL SIZE.
         LTR   R7,R7          TEST NUMBER OF CELLS THAT WILL FIT
         BNP   BLDERR16       LESS THAN OR EQUAL TO ZERO, ERROR.
         L     R3,CPABSTAD    GET POOL START ADDRESS
         ST    R3,CPABFACP    STORE FIRST AVAILABLE POINTER IN CPAB
         BCT   R7,LOOPFORM    IF ONLY ONE CELL GO TO LAST CELL
         B     LASTCELL       PROCESSING IMMEDIATELY.
         SPACE 2
***********************************************************************
*        THIS LOOP FORMATS THE POOL EXTENT. EACH CELL HAS THE
*        ADDRESS OF ITS HIGH NEIGHBOR PLACED IN ITS LINKAGE POINTER,
*        WHICH IS FOUND IN ITS LAST WORD.
***********************************************************************
LOOPFORM EQU   *
         LA    R6,4(R3,R5)    CREATE ADDRESS OF ADJACENT NEIGHBOR CELL
         ST    R6,0(R3,R5)     AND STORE IT INTO LINKAGE POINTER.
         LR    R3,R6          GET THE ADDRESS OF THE NEXT CELL.
         BCT   R7,LOOPFORM     AND CONTINUE TO LAST CELL
LASTCELL EQU   *
         SR    R9,R9          LINK ADDRESS IN LAST CELL GETS SET
         ST    R9,CELLLINK(R3,R5)  TO ZERO
         ST    R9,CPABDEQC    ZERO THE ALLOCATED CELL COUNT AND
         BR    R11            RETURN TO CALLER
         DROP  R8
         EJECT
***********************************************************************
*        ERROR CONDITIONS FOR A RETURN CODE OF EIGHT:
*        ..CPID IN THE CPAB DOES NOT MATCH THE CPID PASSED.
*        ..THE CPID PASSED DOES NOT DEFINE A RECOGNIZABLE POOL.
*        ..THE POOL TO BE RECOVERED HAS NEVER BEEN FORMATTED.
***********************************************************************
BLDERR08 EQU   *
         LA    R11,8
         B     ERREXIT   TAKE ERROR EXIT
         SPACE 3
***********************************************************************
*        THE SUBPOOL FOR A PERMANENT POOL WAS NOT A GLOBAL ONE
*  OR    THE SUBPOOL PASSED DID NOT MATCH THE ORIGINAL ONE FOR THE POOL
***********************************************************************
BLDERR12 EQU   *
         LA    R11,12
         B     ERREXIT
         SPACE 2
***********************************************************************
*        EXTEND OPERATION ONLY - THE CELLSIZE PASSED DOES NOT MATCH THE
*        CELL SIZE IN THE ORIGINAL POOL CPAB
*  OR    ANY OPERATION - THE CELLSIZE IS TOO LARGE TO ALLOW EVEN ONE
*        CELL TO FIT IN THE POOL SPACE PASSED.
****NOTE:  IF THIS CONDITION OCCURS ON RECOVER OPERATIONS, THE EXTENT
*        WILL BE LOCKED AND IT MAY BE NECESSARY TO ADD CODE TO UNLOCK
*        THE EXTENT. HOWEVER, SINCE THIS ERROR INDICATES THAT THE
*        CPAB FOR THE EXTENT HAS BEEN DESTROYED, THE EXTENT WILL NOT
*        BE EITHER USEABLE OR RECOVERABLE, SO IT MAY AS WELL REMAIN
*        LOCKED.
***********************************************************************
BLDERR16 EQU   *
         LA    R11,16
         B     ERREXIT
         SPACE 2
***********************************************************************
*        A CONFLICTING CONCURRENT REQUEST HAS PRECEEDED THIS ONE AND
*        IS STILL IN PROGRESS. THE CONFLICTING REQUEST WILL BE
*        A DELETE REQUEST ON THE EXTENT TO WHICH THE NEW POOL EXTENT
*        WOULD BE ENQUEUED.
***********************************************************************
BLDERR20 EQU   *
         LA    R11,20
         B     ERREXIT
         EJECT
***********************************************************************
*        SO THAT A FREEMAIN MAY BE ISSUED BY THE CALLER ON ANY ERRORS,
*        THIS ROUTINE WILL PASS BACK REGISTERS 0 AND 1 IN SUCH A WAY
*        THAT THEY ARE SUFFICIENT FOR EXECUTION OF A FREEMAIN (R-FORM).
*        REGISTER 0 = SUBPOOL NUMBER .. POOL SIZE IN BYTES
*        REGISTER 1 = POOL ADDRESS
***********************************************************************
ERREXIT  EQU   *
         LTR   R1,R12         PICK UP AREA ADDRESS
         BZ    RCVRERR        IF RECOVER OPERATION, CLEAR REG 0 AND 1
         USING CPAB,R1
         IC    R0,CPABSPID    GET THE SUBPOOL NUMBER
         SLL   R0,24           SHIFTED INTO THE HIGH-ORDER BYTE.
         L     R2,CPABENAD    PICK UP THE ORIGINAL POOL SIZE
         L     R3,CPABSTAD    GET STARTING ADDRESS AND
         LTR   R3,R3           TEST TO SEE IF IT HAS BEEN SET UP YET.
         BZ    VALISOK        NO, CPABENAD CONTAINS ONLY LENGTH
         SR    R2,R3          YES, GET LENGTH BY SUBTRACTING START     *
                               ADDRESS FROM END ADDRESS
         TM    CPABFLGS,CPABEXTN   IF THIS IS AN EXTENT,
         BO    ADDCPABL       THE CPAB LENGTH MUST BE ADDED BACK.
         L     R5,CPABCPID    OR IF THIS IS A DYNAMIC POOL (CPID>0),
         LTR   R5,R5          THE CPAB LENGTH MUST BE ADDED BACK
         BNM   ADDCPABL
         B     VALISOK        PERMANENT POOL FIRST EXTENT, SKIP
ADDCPABL EQU   *
         LA    R2,CPABLEN(R2) INCLUDE CPAB LENGTH IN THE POOL LENGTH.
VALISOK  EQU   *
         LA    R2,0(R2)       REMOVE HIGH-ORDER BYTE
         OR    R0,R2          CATENATE THE TWO FIELDS (SP# & LENGTH)
RCVRERR  EQU   *
***********************************************************************
*        ON RECOVER ERRORS, DO NOT RETURN THE FREEMAIN PARAMETERS
***********************************************************************
OK2EXIT  EQU   *
         LR    R15,R11        PASS THE RETURN CODE
         BR    R14
         EJECT
***********************************************************************
*        CONSTANTS REQUIRED BY THE BUILD CELL POOL PROGRAM
***********************************************************************
F255     DC    F'255'         CONSTANT USED FOR MODULO DIVIDE BY 256
F1       DC    F'1'           CONSTANT USED TO BUMP/DECREMENT USE COUNT
*        THE FOLLOWING MASKS ARE USED TO TURN THE DELETE LOCK BIT
*         ON/OFF IN A REGISTER.
DELETEON DC    X'00',AL1(DELETELK),2X'00'         TURN THE FLAG ON
DELETOFF DC    X'FF',AL1(X'FF'-DELETELK),2X'FF'   TURN THE FLAG OFF
         EJECT
         CVT     DSECT=YES
         EJECT
         IHAGDA  DSECT=YES
         EJECT
         IHACPAB DSECT=YES
         END
