         TITLE 'IEAVGM00   OS/VS2 GETMAIN / FREEMAIN SERVICE ROUTINE   *
               CSECT-IEAVGM00'
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVGM00
*
*02*     CSECT-NAME = IEAVGM00
*
*02*     CSECT-NAME = IEAVGM01
*
*02*     CSECT-NAME = IEASMFGF
*
*01*  DESCRIPTIVE-NAME = OS/VS2 GETMAIN/FREEMAIN SERVICE ROUTINE
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS = OS/VS2 RELEASE 3.7 WITH SU5 AND SU7
*              PFT LEVEL UZ18823
*
*01*  FUNCTION = THE GETMAIN/FREEMAIN MODULE WILL ALLOCATE (GETMAIN)
*     AND DEALLOCATE (FREEMAIN) VIRTUAL STORAGE IN THE SQA AND CSA AND
*     IN THE LSQA, SWA, AND USER REGION OF EACH VIRTUAL MEMORY.  THIS
*     INVOLVES:
*
*        1. ALLOCATION OF STORAGE BLOCKS ON REQUEST
*
*        2. RELEASE OF STORAGE BLOCKS ON REQUEST
*
*        3. MAINTAINING OWNERSHIP OF ALL 4K BLOCKS
*
*              A. MAINTAINING A RECORD OF ALL 4K BLOCKS ASSIGNED TO
*                 EACH TASK AND TO EACH SUBPOOL BELONGING TO THAT TASK
*
*              B. MAINTAINING A QUEUE IN LSQA OF FREE AREAS IN THE
*                 STORAGE ASSIGNED TO EACH TASK SUBPOOL
*
*              C. MAINTAINING A RECORD OF ASSOCIATION WITH A TASK
*                 OR JOB STEP OF STORAGE ALLOCATED FROM SUPERVISOR
*                 OWNED STORAGE (VIA AQE'S - ALLOCATED QUEUE ELEMENTS)
*                 WHEN REQUESTED TO DO SO
*
*     A SECONDARY FUNCTION IN SUPPORT OF SYSTEM MANAGEMENT
*     FACILITIES (SMF) IS TO PRODUCE ACTUAL STORAGE USED VALUES.
*     THIS INVOLVES:
*
*        1. MONITORING REQUESTS FOR PROBLEM PROGRAM
*           SUBPOOLS (INCLUDING SUBPOOLS 250, 251, AND
*           252); AND MAINTAINING STORAGE USED FIELDS
*           ASSOCIATED WITH EACH PROBLEM PROGRAM TCB
*
*        2. THE FIELDS MAINTAINED ARE:
*
*           TCTLWM      HIGHEST ADDRESS ALLOCATED FROM THE
*                       BOTTOM OF THE PRIVATE AREA OR REGION
*
*           TCTHWM      LOWEST ADDRESS THAT LSQA, SQA, AND
*                       SUBPOOLS 229 AND 230 REACH FROM THE
*                       TOP OF THE PRIVATE AREA
*
*           TCTMINC     NO LONGER USED
*
*        3. DURING TASK TERMINATION (HIGH ORDER BIT OF TCT
*           ADDRESS IN TCB SET TO ZERO) THIS SMF DATA WILL
*           NOT BE RECORDED IN ORDER TO PREVENT INITIATOR
*           PROCESSING FROM AFFECTING THE RESULTS.
*
*02*     OPERATION = WHEN THE MODULE IS ENTERED ON AN SVC 4 OR SVC 5
*        REQUEST, ADDRESSABILITY IS ESTABLISHED AND IF THE TASK IS NOT
*        KEY 0 ALL OF THE INPUT PARAMETERS AND LISTS ARE VALIDITY
*        CHECKED.
*
*        WHEN THE MODULE IS ENTERED ON ANY OTHER TYPE OF REQUEST,
*        ADDRESSABILITY IS ESTABLISHED, REGISTERS ARE SAVED
*        (BRANCH ENTRIES ONLY), AND AN INDICATION OF THE TYPE OF
*        ENTRY IS SAVED.
*
*        FOR ALL ENTRIES INTERNAL PARAMETERS ARE NOW SET UP SO
*        THAT COMMON ROUTINES MAY BE USED FOR THE ACTUAL GETMAIN
*        OR FREEMAIN.  THESE PARAMETERS ARE:
*
*        RIN1 (REG 1) = VALUE OF REG 1 WHEN THIS MODULE WAS
*                       ENTERED
*
*        RLENGTH (REG 10) = LENGTH OR POINTER TO LENGTH LIST
*
*        RADDR (REG 11) = ADDRESS OR ADDRESS SLOT, OR LIST OF ADDRESSES
*
*        RLDA (REG 4) = ADDRESS OF LDA
*
*        LDARQSTA = SVC NUMBER OR BRANCH INDICATOR, PROTECT KEY,
*                    AND MODE FLAGS
*
*        AT THIS POINT THE GMCOMMON ROUTINE IS ENTERED FOR A
*        GETMAIN AND THE FMCOMMON ROUTINE IS ENTERED FOR A
*        FREEMAIN.  IN EITHER CASE THE SUBPOOL CHECK SUBROUTINE
*        (CSPCHK) IS CALLED TO LOOK UP THE SUBPOOL NUMBER AND
*        TAKE SPECIAL ACTION IF NECESSARY.  IF SUBPOOLS 242 OR 247
*        ARE REFERENCED, CONTROL PASSES TO THE MODULE IEAVPRT0
*        (GET/FREE PART).  ALL OTHER SUBPOOLS ARE PROCESSED
*        IN THIS MODULE (IEAVGM00) OR ARE CONSIDERED ERROR
*        CONDITIONS.  FOR EACH SUBPOOL THE NECESSARY POINTERS ARE
*        INITIALIZED AND FOR SUBPOOLS OTHER THAN SQA OR LSQA A
*        SEARCH IS MADE FOR AN SPQE.  IF ONE IS FOUND ITS ADDRESS
*        IS RETURNED TO THE CALLING ROUTINE.
*
*        UPON RETURN TO THE GMCOMMON ROUTINE, IF AN SPQE WAS NOT
*        FOUND ONE IS CREATED, THE REQUEST LENGTH IS ROUNDED UP
*        TO AN 8 BYTE MULTIPLE, AND THE REQUESTED VIRTUAL STORAGE
*        IS SEARCHED FOR.  IF IT IS AVAILABLE, RETURN IS MADE TO
*        THE CALLER WITH THE ADDRESS OF THE ALLOCATED SPACE.  IF
*        THE STORAGE IS NOT AVAILABLE RETURN IS MADE WITH A
*        RETURN CODE OF 4 OR 8 IN REGISTER 15 IF THE REQUEST WAS
*        CONDITIONAL, OR THE TASK IS ABENDED IF THE REQUEST WAS
*        UNCONDITIONAL.
*
*        FOR A FREEMAIN, WHEN THE CSPCHK ROUTINE RETURNS TO
*        FMCOMMON, IF NO SPQE WAS FOUND AN ERROR IS INDICATED.
*        OTHERWISE THE APPROPRIATE STORAGE IS REMOVED FROM THE
*        ALLOCATED AREA AND RETURNED TO THE FREE QUEUES.
*        CHECKING IS DONE TO DETERMINE IF A 4K BLOCK OF
*        STORAGE HAS BEEN MADE FREE.  IF IT HAS, THE RELEASE PAGE
*        ROUTINE OF RSM IS ENTERED TO FREE THE PAGE AND UNLESS
*        THE SPACE IS IN SQA OR CSA, IT IS REMOVED FROM THE
*        SUBPOOL FREE QUEUE AND ADDED TO THE ADDRESS SPACE FREE
*        QUEUE.  SQA AND CSA PAGES ARE RETURNED TO THE
*        APPROPRIATE GLOBAL FREE QUEUES.
*
*        IF AN ERROR WAS FOUND DURING THE FREEMAIN PROCESS AND
*        THE REQUEST WAS UNCONDITIONAL THEN THE REQUESTING TASK
*        IS ABENDED.  IF THE REQUEST WAS CONDITIONAL AND NO ERROR
*        WAS DISCOVERED, A RETURN CODE OF 0 IS GIVEN; IF AN ERROR
*        DID OCCUR, A RETURN CODE OF 4 OR 8 IS GIVEN.  THE RETURN
*        CODE IS PROVIDED IN REGISTER 15.
*
*01*   NOTES = NONE
*
*02*     DEPENDENCIES = THE LOCAL MEMORY LOCK MUST BE HELD UPON ENTRY
*        TO THIS ROUTINE EXCEPT FOR THE GLBRANCH AND MRELEASR ENTRIES
*        WHICH MUST HAVE THE SALLOC LOCK.  THE STORAGE KEY MUST BE
*        ZERO, THE SYSTEM MUST BE IN SUPERVISOR MODE, AND DYNAMIC
*        ADDRESS TRANSLATION MUST BE ON.
*
*03*       CHARACTER-CODE-DEPENDENCIES = THE MODULE IS INDEPENDENT OF
*          CHARACTER CODES
*
*02*     RESTRICTIONS = NONE
*
*02*     REGISTER-CONVENTIONS = SEE SECTION "REGISTER EQUATES"
*
*02*     PATCH-LABEL = NO PATCH AREA PROVIDED
*
*01*  MODULE-TYPE = PROCEDURE
*
*02*     PROCESSOR = ASSEMBLER-370R
*
*02*     MODULE-SIZE = 11K BYTES
*
*02*     ATTRIBUTES = NUCLEUS, ZERO PSW PROTECT KEY, REFRESHABLE,
*        SUPERVISOR MODE
*
*01*  ENTRY-POINT = IGC004
*
*02*     PURPOSE = STORAGE TYPE GETMAIN
*
*02*     LINKAGE = CALLED BY E, L, AND V FORMS OF GETMAIN MACRO;
*        ENTERED FROM SVC INTERRUPTION HANDLER
*
*02*     INPUT =
*        REG  1     ADDRESS OF THE PARAMETER LIST
*        REG  4     ADDRESS OF CURRENT TCB
*        REG  5     ADDRESS OF RB AT TOP OF THE RB QUEUE
*        REG  7     ADDRESS OF CURRENT ASCB
*        REG 14     ADDRESS OF THE TYPE 1 SVC EXIT HANDLER
*
*        THE FORMAT OF THE PARAMETER LIST IS DESCRIBED BELOW UNDER
*        "INPUT PARAMETER LIST"
*
*02*     OUTPUT = THE ADDRESS(ES) OF THE STORAGE ALLOCATED IS PLACED
*        INTO THE PARAMETER LIST. (SEE "LIST FORMATS" BELOW)
*
*02*     REGISTERS-SAVED = REGISTERS 1 AND 14
*
*02*     REGISTERS-RESTORED = REGISTERS 1 AND 14
*
*01*  ENTRY-POINT = IGC005
*
*02*     PURPOSE = STORAGE TYPE FREEMAIN
*
*02*     LINKAGE = CALLED BY E, L, AND V FORMS OF FREEMAIN MACRO;
*        ENTERED FROM SVC INTERRUPTION HANDLER
*
*02*     INPUT =
*        REG  1     ADDRESS OF THE PARAMETER LIST
*        REG  4     ADDRESS OF CURRENT TCB
*        REG  5     ADDRESS OF RB AT TOP OF THE RB QUEUE
*        REG  7     ADDRESS OF CURRENT ASCB
*        REG 14     ADDRESS OF THE TYPE 1 SVC EXIT HANDLER
*
*        THE FORMAT OF THE PARAMETER LIST IS DESCRIBED BELOW UNDER
*        "INPUT PARAMETER LIST"
*
*02*     OUTPUT = NONE
*
*02*     REGISTERS-SAVED = REGISTERS 1 AND 14
*
*02*     REGISTERS-RESTORED = REGISTERS 1 AND 14
*
*01*  ENTRY-POINT = IGC010
*
*02*     PURPOSE = REGISTER TYPE, UNCONDITIONAL GETMAIN OR FREEMAIN
*
*02*     LINKAGE = CALLED BY R FORM OF GETMAIN OR FREEMAIN MACRO;
*        ENTERED FROM SVC INTERRUPTION HANDLER
*
*02*     INPUT =
*        REG  0     SUBPOOL ID IN BYTE 0, NUMBER OF BYTES REQUESTED IN
*                   BYTES 1 TO 3; FOR A SUBPOOL FREEMAIN BYTES 1 TO 3
*                   MUST BE 0
*        REG  1     ANY NEGATIVE VALUE IF REQUEST IS FOR A GETMAIN,
*                   ADDRESS TO BE FREED IF REQUEST IS FOR A FREEMAIN;
*                   FOR A SUBPOOL FREEMAIN MUST BE 0
*        REG  4     ADDRESS OF CURRENT TCB
*        REG  5     ADDRESS OF RB AT TOP OF THE RB QUEUE
*        REG  7     ADDRESS OF CURRENT ASCB
*        REG 14     ADDRESS OF THE TYPE 1 SVC EXIT HANDLER
*
*02*     OUTPUT = FOR A GETMAIN, REGISTER 1 CONTAINS THE ADDRESS OF
*        THE STORAGE ALLOCATED; FOR A FREEMAIN, NONE
*
*02*     REGISTERS-SAVED = REGISTERS 1 AND 14
*
*02*     REGISTERS-RESTORED = REGISTER 14 IF GETMAIN AND REGISTERS 1
*        AND 14 IF FREEMAIN
*
*01*  ENTRY-POINT = IGC120
*
*02*     PURPOSE = REGISTER TYPE GETMAIN OR FREEMAIN
*
*02*     LINKAGE = CALLED BY RC OR RU FORMS OF GETMAIN OR FREEMAIN
*        MACRO; ENTERED FROM SVC INTERRUPTION HANDLER
*
*02*     INPUT =
*        REG  0     NUMBER OF BYTES REQUESTED; FOR A SUBPOOL FREEMAIN
*                   MUST BE 0
*        REG  1     ZERO FOR A GETMAIN, ADDRESS TO BE FREED FOR A
*                   FREEMAIN; FOR A SUBPOOL FREEMAIN MUST BE 0
*        REG  4     ADDRESS OF CURRENT TCB
*        REG  5     ADDRESS OF RB AT TOP OF THE RB QUEUE
*        REG  7     ADDRESS OF CURRENT ASCB
*        REG 14     ADDRESS OF THE TYPE 1 SVC EXIT HANDLER
*        REG 15     BYTES 0 AND 1 RESERVED, SET TO 0
*                   BYTE 2  SUBPOOL ID
*                   BYTE 3  FLAGS AS FOLLOWS:
*                     BITS 0-4    RESERVED, SET TO 0
*                     BIT 5       = 0  DOUBLEWORD BOUNDARY
*                                 = 1  PAGE BOUNDARY
*                     BIT 6       = 0  CONDITIONAL REQUEST
*                                 = 1  UNCONDITIONAL REQUEST
*                     BIT 7       = 0  GETMAIN
*                                 = 1  FREEMAIN
*
*02*     OUTPUT = FOR A GETMAIN, REGISTER 1 CONTAINS THE ADDRESS OF
*        THE STORAGE ALLOCATED; FOR A FREEMAIN, NONE
*
*02*     REGISTERS-SAVED = REGISTERS 1 AND 14
*
*02*     REGISTERS-RESTORED = REGISTER 14 IF GETMAIN AND REGISTERS 1
*        AND 14 IF FREEMAIN
*
*01*  ENTRY-POINT = GMBRANCH
*
*02*     PURPOSE = STORAGE TYPE GETMAIN, BRANCH ENTRY
*
*02*     LINKAGE = CALLED BY E, L, AND V FORMS OF GETMAIN MACRO
*        WITH BRANCH OPTION SPECIFIED
*
*02*     INPUT =
*        REG  1     ADDRESS OF THE PARAMETER LIST
*        REG  4     ADDRESS OF THE TCB UNDER WHICH STORAGE IS TO BE
*                   ALLOCATED
*        REG  7     ADDRESS OF ASCB
*        REG 14     RETURN ADDRESS
*
*        THE FORMAT OF THE PARAMETER LIST IS DESCRIBED BELOW UNDER
*        "INPUT PARAMETER LIST"
*
*02*     OUTPUT = THE ADDRESS(ES) OF THE STORAGE ALLOCATED IS PLACED
*        INTO THE PARAMETER LIST. (SEE "LIST FORMATS" BELOW)
*
*02*     REGISTERS-SAVED = ALL REGISTERS EXCEPT 7
*
*02*     REGISTERS-RESTORED = ALL REGISTERS EXCEPT 1, 7 AND 15
*
*01*  ENTRY-POINT = FMBRANCH
*
*02*     PURPOSE = STORAGE TYPE FREEMAIN, BRANCH ENTRY
*
*02*     LINKAGE = CALLED BY E, L, AND V FORMS OF FREEMAIN MACRO
*        WITH BRANCH OPTION SPECIFIED
*
*02*     INPUT =
*        REG  1     ADDRESS OF THE PARAMETER LIST
*        REG  4     ADDRESS OF THE TCB UNDER WHICH STORAGE IS TO BE
*                   ALLOCATED
*        REG  7     ADDRESS OF ASCB
*        REG 14     RETURN ADDRESS
*
*        THE FORMAT OF THE PARAMETER LIST IS DESCRIBED BELOW UNDER
*        "INPUT PARAMETER LIST"
*
*02*     OUTPUT = NONE
*
*02*     REGISTERS-SAVED = ALL REGISTERS
*
*02*     REGISTERS-RESTORED = ALL REGISTERS EXCEPT 15
*
*01*  ENTRY-POINT = RMBRANCH
*
*02*     PURPOSE = REGISTER TYPE, UNCONDITIONAL GETMAIN OR FREEMAIN,
*        BRANCH ENTRY
*
*02*     LINKAGE = CALLED BY R FORM OF GETMAIN OR FREEMAIN MACRO
*        WITH BRANCH OPTION SPECIFIED
*
*02*     INPUT =
*        REG  0     SUBPOOL ID IN BYTE 0, NUMBER OF BYTES REQUESTED IN
*                   BYTES 1 TO 3; FOR A SUBPOOL FREEMAIN BYTES 1 TO 3
*                   MUST BE 0
*        REG  1     ANY NEGATIVE VALUE IF REQUEST IS FOR A GETMAIN,
*                   ADDRESS TO BE FREED IF REQUEST IS FOR A FREEMAIN;
*                   FOR A SUBPOOL FREEMAIN MUST BE 0
*        REG  4     ADDRESS OF THE TCB UNDER WHICH STORAGE IS TO BE
*                   ALLOCATED
*        REG  7     ADDRESS OF ASCB
*        REG 14     RETURN ADDRESS
*
*02*     OUTPUT = FOR A GETMAIN, REGISTER 1 CONTAINS THE ADDRESS OF
*        THE STORAGE ALLOCATED; FOR A FREEMAIN, NONE
*
*02*     REGISTERS-SAVED = ALL REGISTERS EXCEPT 7
*
*02*     REGISTERS-RESTORED = ALL REGISTERS EXCEPT 1, 7 AND 15 IF
*        GETMAIN AND ALL REGISTERS EXCEPT 7 AND 15 IF FREEMAIN
*
*01*  ENTRY-POINT = QCBRANCH
*
*02*     PURPOSE = IDENTICAL TO RMBRANCH, RETAINED FOR COMPATIBILITY
*        WITH OS/VS2 RELEASE 1 QUICKCELLS
*
*01*  ENTRY-POINT = CRBRANCH
*
*02*     PURPOSE = REGISTER TYPE GETMAIN OR FREEMAIN, BRANCH ENTRY
*
*02*     LINKAGE = CALLED BY RC OR RU FORMS OF GETMAIN OR FREEMAIN
*        MACRO WITH BRANCH OPTION SPECIFIED
*
*02*     INPUT =
*        REG  0     NUMBER OF BYTES REQUESTED; FOR A SUBPOOL FREEMAIN
*                   MUST BE 0
*        REG  1     ZERO FOR A GETMAIN, ADDRESS TO BE FREED FOR A
*                   FREEMAIN; FOR A SUBPOOL FREEMAIN MUST BE 0
*        REG  3     BYTE 0  RESERVED, SET TO 0
*                   BYTE 1  PROTECT KEY FOR SP 227-231 AND 241
*                   BYTE 2  SUBPOOL ID
*                   BYTE 3  FLAGS AS FOLLOWS:
*                     BITS 0-4    RESERVED, SET TO 0
*                     BIT 5       = 0  DOUBLEWORD BOUNDARY
*                                 = 1  PAGE BOUNDARY
*                     BIT 6       = 0  CONDITIONAL REQUEST
*                                 = 1  UNCONDITIONAL REQUEST
*                     BIT 7       = 0  GETMAIN
*                                 = 1  FREEMAIN
*        REG  4     ADDRESS OF TCB UNDER WHICH STORAGE IS TO BE
*                   ALLOCATED
*        REG  7     ADDRESS OF ASCB
*        REG 14     RETURN ADDRESS
*
*02*     OUTPUT = FOR A GETMAIN, REGISTER 1 CONTAINS THE ADDRESS OF
*        THE STORAGE ALLOCATED; FOR A FREEMAIN, NONE
*
*02*     REGISTERS-SAVED = ALL REGISTERS EXCEPT 7
*
*02*     REGISTERS-RESTORED = ALL REGISTERS EXCEPT 1, 7 AND 15 IF
*        GETMAIN AND ALL REGISTERS EXCEPT 7 AND 15 IF FREEMAIN
*
*01*  ENTRY-POINT = GLBRANCH
*
*02*     PURPOSE = REGISTER TYPE GETMAIN OR FREEMAIN FOR GLOBAL
*        SUBPOOLS WITHOUT LOCAL MEMORY LOCK (SALLOC LOCK REQUIRED),
*        BRANCH ENTRY
*
*02*     LINKAGE = CALLED BY RC OR RU FORMS OF GETMAIN OR FREEMAIN
*        MACRO WITH BRANCH AND GLOBAL OPTIONS SPECIFIED
*
*02*     INPUT =
*        REG  0     NUMBER OF BYTES REQUESTED
*        REG  1     ZERO FOR A GETMAIN, ADDRESS TO BE FREED FOR A
*                   FREEMAIN
*        REG  3     BYTE 0  RESERVED, SET TO 0
*                   BYTE 1  PROTECT KEY FOR SUBPOOLS 231 AND 241
*                   BYTE 2  SUBPOOL ID
*                   BYTE 3  FLAGS AS FOLLOWS:
*                     BITS 0-4    RESERVED, SET TO 0
*                     BIT 5       = 0  DOUBLEWORD BOUNDARY
*                                 = 1  PAGE BOUNDARY
*                     BIT 6       = 0  CONDITIONAL REQUEST
*                                 = 1  UNCONDITIONAL REQUEST
*                     BIT 7       = 0  GETMAIN
*                                 = 1  FREEMAIN
*        REG  4     ADDRESS OF GLOBAL SAVE AREA
*        REG 14     RETURN ADDRESS
*
*02*     OUTPUT = FOR A GETMAIN, REGISTER 1 CONTAINS THE ADDRESS OF
*        THE STORAGE ALLOCATED; FOR A FREEMAIN, NONE
*
*02*     REGISTERS-SAVED = ALL REGISTERS
*
*02*     REGISTERS-RESTORED = ALL REGISTERS EXCEPT 1 AND 15 IF GETMAIN
*        AND ALL REGISTERS EXCEPT 15 IF FREEMAIN
*
*01*  ENTRY-POINT = CBBRANCH
*
*02*     PURPOSE = SPECIAL ENTRY TO THE INTERNAL GETMAIN (GETMAINC)
*        OR FREEMAIN (FMAINC) ROUTINES TO GET OR FREE  A CELL FOR
*        A VSM CONTROL BLOCK.
*
*02*     LINKAGE = CALLED VIA A BRANCH ENTRY WITH LOCAL LOCK HELD
*
*02*     INPUT =
*        REG  0     SPID IN BYTE 0 FOR GETMAIN REQUEST
*        REG  1     NEGATIVE FOR GETMAIN
*                   POSITIVE FOR FREEMAIN, ADDRESS OF CELL TO BE FREED
*        REG  7     ASCB ADDRESS
*        REG 14     RETURN ADDRESS
*        REG 15     ENTRY ADDRESS (CBBRANCH)
*
*        LENGTH IS IMPLIED (EQUAL TO VSM CB LENGTH - 16 BYTES).
*        CELL IS ZEROED BY GETMAIN BEFORE RETURNING TO CALLER.
*
*02*     OUTPUT = ADDRESS OF CELL ALLOCATED IN REGISTER 1
*
*02*     REGISTERS-SAVED = 2-6, 8-14, (7 IS DESTROYED)
*
*02*     REGISTERS-RESTORED = ALL REGISTERS EXCEPT 0, 1, 7 AND 15
*
*01*  ENTRY-POINT = GETMAING
*
*02*     PURPOSE = SPECIAL ENTRY TO THE INTERNAL GETMAIN ROUTINE
*        (GETMAINB) TO GET SPACE IN SQA OR LSQA FOR A CONTROL BLOCK
*
*        LINKAGE = CALLED BY GETPART (MODULE IEAVPRT0) VIA BRANCH
*        ENTRY, WITH LOCAL MEMORY LOCK HELD
*
*02*     INPUT =
*        REG  1     SUBPOOL ID IN BYTE ZERO AND LENGTH OF REQUEST
*                   IN BYTES 1 TO 3
*        REG  4     LDA ADDRESS
*        REG  8     FIRST BASE REGISTER
*        REG 13     SECOND BASE REGISTER
*        REG 14     RETURN ADDRESS
*        REG 15     ENTRY ADDRESS (GETMAING)
*
*02*     OUTPUT = ADDRESS OF ALLOCATED STORAGE IN REGISTER 1
*
*02*     REGISTERS SAVED = ALL REGISTERS
*
*02*     REGISTERS RESTORED = ALL REGISTERS EXCEPT REGISTER 1
*
*01*  ENTRY-POINT = MRELEASF
*
*02*     PURPOSE = SPECIAL ENTRY TO THE INTERNAL ROUTINE THAT
*        RETURNS FREED STORAGE TO AN FBQE (MRELEASE), TO RETURN V=R
*        REGION SPACE TO SYSTEM V=R PQE AND ADDRESS SPACE PQE
*
*02*     LINKAGE = CALLED BY FREEPART (MODULE IEAVPRT0) VIA A BRANCH
*        ENTRY, WITH LOCAL MEMORY LOCK HELD
*
*02*     INPUT =
*        REG  4     LDA ADDRESS
*        REG  6     SIZE OF AREA TO BE RETURNED TO AN FBQE
*        REG  7     ADDRESS OF PQE THAT STORAGE WAS OBTAINED FROM
*        REG  8     FIRST BASE REGISTER
*
*        REG  9     ADDRESS OF AREA BEING RETURNED TO AN FBQE
*        REG 13     SECOND BASE REGISTER
*        REG 14     RETURN ADDRESS
*        REG 15     ENTRY ADDRESS (MRELEASF)
*
*        IN ADDITION THE SUBPOOL ID WHICH IS TO BE USED IN OBTAINING
*        AN FBQE MUST BE PRE-STORED IN THE FIELD LDACBSP IN THE LDA
*
*02*     OUTPUT = NONE
*
*02*     REGISTERS-SAVED = REGISTERS 2 TO 15
*
*02*     REGISTERS-RESTORED = REGISTERS 2 TO 15
*
*01*  ENTRY-POINT = MRELEASR
*
*02*     PURPOSE = SPECIAL ENTRY TO THE INTERNAL ROUTINE THAT
*        RETURNS FREED STORAGE TO AN FBQE (MRELEASE), TO RETURN ONE
*        PAGE OF REGION OR CSA SPACE THAT WAS PREVIOUSLY IN DEFERRED
*        RELEASE STATUS
*
*02*     LINKAGE = CALLED BY THE RSM PAGE RELEASE ROUTINE (MODULE
*        IEAVRELS) VIA A BRANCH ENTRY WITH THE SALLOC LOCK HELD.  IN
*        ADDITION THE LOCAL MEMORY LOCK WILL BE HELD ON ENTRIES TO
*        RELEASE LOCAL STORAGE.
*
*02*     INPUT =
*        REG  0     = 0 FOR LOCAL STORAGE; LDA WILL BE USED FOR THE
*                   WORK AREA
*                   = 1 FOR GLOBAL STORAGE; GLOBAL SAVE AREA WILL BE
*                   USED FOR THE WORK AREA
*        REG  1     VIRTUAL ADDRESS OF THE PAGE TO BE RETURNED TO AN
*                   FBQE
*        REG 14     RETURN ADDRESS
*        REG 15     ENTRY ADDRESS (MRELEASR)
*
*02*     OUTPUT = NONE
*
*02*     REGISTERS-SAVED = REGISTERS 0 TO 14
*
*02*     REGISTERS-RESTORED = REGISTERS 0 TO 14
*
*01*  EXIT-NORMAL = NO NAME
*
*02*     CONDITIONS = SUCCESSFUL GETMAIN OR FREEMAIN, RETURN TO ADDRESS
*        IN REGISTER 14
*
*02*     OUTPUT = ADDRESS OF STORAGE OBTAINED FOR A GETMAIN REQUEST IN
*        THE PARAMETER LIST FOR A STORAGE TYPE REQUEST OR IN REGISTER 1
*        FOR A REGISTER TYPE REQUEST.
*
*02*     RETURN-CODES = REGISTER 15 WILL HAVE A RETURN CODE OF 0
*        INDICATING SUCCESSFUL COMPLETION OF REQUEST
*
*01*  EXIT-ERROR = NO NAME
*
*02*     CONDITIONS = UNSUCCESSFUL CONDITIONAL GETMAIN OR FREEMAIN,
*        RETURN TO ADDRESS IN REGISTER 14
*
*02*     OUTPUT = NONE
*
*02*     RETURN-CODES = REGISTER 15 WILL HAVE A RETURN CODE OF 4 IN ALL
*        CASES EXCEPT THE FOLLOWING:
*
*        ON A GETMAIN FOR SQA OR LSQA IF A REAL PAGE IS NOT AVAILABLE
*        A RETURN CODE OF 8 WILL BE GIVEN.
*
*        ON A FREEMAIN OF A LOCAL STORAGE PAGE THAT IS STILL FIXED,
*        IF THE TCBEOTFM FLAG IS ON A RETURN CODE OF 8 WILL BE GIVEN.
*
*01*  EXIT-ERROR = ABEND
*
*02*     CONDITIONS = UNSUCCESSFUL UNCONDITIONAL GETMAIN OR FREEMAIN OR
*        A PARAMETER ERROR FOR A CONDITIONAL GETMAIN OR FREEMAIN. ABEND
*        MACRO IS EXECUTED.
*
*02*     OUTPUT = NONE
*
*02*     RETURN-CODES = NONE
*
*01*  EXTERNAL-REFERENCES:
*
*02*     ROUTINES =
*
*        ABEND     ABNORMAL TERMINATION, MACRO USED
*        IEAVCSEG  CREATE SEGMENT, BRANCH ENTRY
*        IEAVFP1   FIND PAGE, BRANCH ENTRY
*        IEAVPRT0  GETPART/FREEPART, BRANCH ENTRY
*        IEAVRELV  RELEASE PAGE, BRANCH ENTRY
*        IEAVSQA   OBTAIN FIXED PAGE FOR L/SQA, BRANCH ENTRY
*        IEA0VL00  VALIDITY CHECK ROUTINE, BRANCH ENTRY
*        IEA0VL01  VALIDITY CHECK ROUTINE, BRANCH ENTRY
*        IGFPTERM  SYSTEM TERMINATION ROUTINE, BRANCH ENTRY
*        SETFRR    SET FUNCTIONAL RECOVERY ROUTINE, MACRO USED
*        SETLOCK   OBTAIN AND RELEASE LOCKS, MACRO USED
*        SYSEVENT  INFORM SRM OF SQA AVAILABILITY, MACRO USED
*        TESTAUTH  CHECK CALLER AUTHORIZATION, MACRO USED
*
*02*     DATA-AREAS =
*
*        GLOBAL DATA AREA (GDA) CONTAINS GLOBAL STORAGE POINTERS.
*
*        LOCAL DATA AREA (LDA) CONTAINS LOCAL STORAGE POINTERS AND
*        IS USED AS WORK AREA SO THAT THIS ROUTINE IS REFRESHABLE.
*
*        GETMAIN/FREEMAIN GLOBAL SAVE AREA USED IN PLACE OF LDA AS A
*        WORK AREA ON CERTAIN GLOBAL STORAGE REQUESTS.
*
*        FRR PARAMETER AREA (6 WORDS) USED FOR COMMUNICATION WITH FRR.
*
*02*     CONTROL-BLOCKS =
*
*        CVT       (R)
*        IEFTCT    (W)
*        IHAAQE    (C) (D)
*        IHAASCB   (R)
*        IHADQE    (C) (D)
*        IHAFBQE   (C) (D)
*        IHAFQE    (C) (D)
*        IHAFRRS   (R)
*        IHAGDA    (W)
*        IHAINF    (W)
*        IHALDA    (W)
*        IHAPGTE   (W)
*        IHAPQE    (W)
*        IHAPSA    (R)
*        IHAPVT    (W)
*        IHARB     (R)
*        IHARVT    (R)
*        IHASPQE   (C)
*        IHAWSAVT  (R)
*        IHAXPTE   (W)
*        IKJTCB    (W)
*
*01*  TABLES = AT LABEL RCTABLE IS A RETURN CODE VERSUS ERROR CODE
*     TABLE FOR CONVERTING ANY ERROR CODE TO THE APPROPRIATE RETURN
*     CODE
*
*01*  MACROS =
*
*        ABEND
*        MODID
*        SETFRR
*        SETLOCK
*        SYSEVENT
*        TESTAUTH
*        WTO
*
*02*    SERIALIZATION = THE SALLOC LOCK IS SOMETIMES OBTAINED AND
*       RELEASED BY THIS MODULE
*
*01*  CHANGE-ACTIVITY = SIGNIFICANT CHANGES TO THIS MODULE (ANY CHANGE
*     OTHER THAN A COMMENT) OVER THE OS/VS2 RELEASE 1 VERSION ARE
*     FLAGGED WITH THE FOLLOWING S/D CODES Y02711, Y02714, Y02751,
*     Y02753
*
*     APARS = OZ00829 (2) 456772-456776, 456816-456836
*             OZ05196 (2) 327241
*             OZ02359 (2) 218055-218073
*             OZ03280 (3) 496520
*             OZ04815 (2) 355552-355576
*             OZ05954 (2) 196641
*             OZ08170 (3) 516500, 517000, 517704, 5178400-517960
*                         518420-518600, 523040-523046, 523049
*                         523052-523091
*             OZ09199 (2) 167742-167762
*             OZ10820 (4) 517620
*             OZ11822 (3) 237440-237560, 492646-492663,
*                         492912-492918, 700297
*             OZ14231 (3) 317100
*             OZ16417 (3) 471586-471587, 473710-473730
*             OZ17759 (3) 287400, 288200-288340
*             OZ17804 (3) 161960-163460
*             OZ20641 (3)
*             OZ20951 (3)
*             OZ27672 (3)
*             OZ29442 (3)
*             OZ29616 (3)
*             OZ30210 (3)
*             OZ27466 (3)
*
*01*  MESSAGES = IEA946W, ISSUED JUST BEFORE TERMINATING SYSTEM WHEN
*     THERE IS NO VIRTUAL OR REAL STORAGE AVAILABLE FOR SQA
*
*01*  ABEND-CODES =
*
*        ABEND CODE     REASON  RETURN         DESCRIPTION
*                        CODE    CODE *
*
*        104, 10A, 178   NONE     8    CANNOT OBTAIN REAL PAGE OF
*                                      STORAGE FOR SQA OR LSQA
*        305, 30A, 378     1      4    STORAGE NOT IN SPECIFIED SUBPOOL
*                                      (NO DQE FOUND FOR SPECIFIED
*                                      STORAGE AREA)
*                          2      4    SPECIFIED SUBPOOL COULD NOT BE
*                                      FOUND
*                          4     NONE  ZERO LENGTH NOT SPECIFIED FOR
*                                      SUBPOOL FREEMAIN
*        40A, 478          0     NONE  SUBPOOL FREEMAIN FOR SQA, CSA,
*                                      SUBPOOLS 254 OR 255, OR INVALID
*                                      SUBPOOL; OR PROBLEM PROGRAM
*                                      FREEING SUBPOOL 0
*        504, 505          0     NONE  LENGTH AND ADDRESS LISTS OVERLAP
*        604, 605          1     NONE  PARAMETER LIST NOT IN PROBLEM
*                                      PROGRAM AREA, NOT ON WORD
*                                      BOUNDARY, OR LIST ADDRESS NOT
*                                      VALID  @
*        804, 80A, 878     1      4    NOT ENOUGH VIRTUAL STORAGE
*                          2     NONE  NEGATIVE LENGTH FOR GETMAIN
*        905, 90A, 978     0     NONE  ADDRESS NOT MULTIPLE OF 8
*        A05, A0A, A78     1      4    AREA BEING FREED OVERLAPS A
*                                      FREE AREA
*                          2      8 #  PART OF AREA BEING FREED IS
*                                      STILL FIXED
*        B04, B05, B0A,    0     NONE  PROBLEM PROGRAM REQUESTS SUB-
*        B78                           POOL 128 TO 255 OR AUTHORIZED
*                                      PROGRAM REQUESTS INVALID
*                                      SUBPOOL
*        D05, D0A, D78     0      4    NO AQE WHEN THERE SHOULD BE
*                                      ONE (LSQA NOT OWNED BY
*                                      REQUESTING TASK)
*
*        *     RETURN CODE FOR CONDITIONAL REQUESTS.  THE ENTRY
*              "NONE" MEANS THE REQUEST WILL BE ABENDED EVEN OF IT
*              IS CONDITIONAL.
*        @     FOR A REQUEST IN KEY 0-7 OR FOR A BRANCH ENTRY THESE
*              CHECKS ARE BYPASSED.
*        #     FOR A CONDITIONAL REQUEST WITH "TCBEOTFM" BIT IN
*              TCB, OR LDAFPFM BIT IN LDA, SET TO 1, THIS ERROR
*              WILL GIVE A RETURN CODE OF 8.  OTHERWISE IT WILL
*              BE ABENDED.
*
*01*  MESSAGE-SYMBOL = STRWTO FOR MESSAGE IEA946W
*
         EJECT
*        INPUT PARAMETER LIST
*
*
*    TO GETMAIN (SVC 4)
*
*        REGISTER 1 = ADDRESS OF A PARAMETER LIST
*
*
*    TO FREEMAIN (SVC 5)
*
*        REGISTER 1 = ADDRESS OF A PARAMETER LIST
*
*
*    PARAMETER LIST FORMAT
*
*              ********************************************
*              * LENGTH REQUESTED IF SINGLE AREA REQUEST  *
*              *  OR ADDRESS OF A LIST OF LENGTHS         *
*              ********************************************
*              * ADDRESS OF A LIST IN WHICH THE ADDRESSES *
*              *  OF ALLOCATED AREAS IS TO BE RETURNED    *
*              ********************************************
*              * CODE     * SUBPOOL  *
*              *          *   ID     *
*              ***********************
*
*          CODE VALUES
*              X'00' - UNCONDITIONAL SINGLE ELEMENT REQUEST
*              X'20' - CONDITIONAL     ''     ''      ''
*              X'C0' - UNCONDITIONAL VARIABLE REQUEST
*              X'E0' - CONDITIONAL      ''      ''
*              X'80' - UNCONDITIONAL LIST REQUEST
*              X'A0' - CONDITIONAL    ''    ''
*              X'10' - PAGE BOUNDARY REQUEST (THIS MAY BE IN
*                      ADDITION TO THOSE ABOVE)
         EJECT
*    LIST FORMATS
*
*        SINGLE ELEMENT REQUEST
*
*           AREA LIST
*              ********************************************
*              *          * ADDRESS OF AREA ALLOCATED     *
*              ********************************************
*
*        VARIABLE REQUEST
*
*           LENGTH LIST
*              ********************************************
*              *    0     * MINIMUM LENGTH REQUESTED      *
*              ********************************************
*              *    0     * MAXIMUM LENGTH REQUESTED      *
*              ********************************************
*
*           AREA LIST
*              ********************************************
*              *          * ADDRESS OF AREA ALLOCATED     *
*              ********************************************
*              *          * ACTUAL LENGTH ALLOCATED       *
*              ********************************************
*
*        LIST REQUEST
*
*           LENGTH LIST
*              ********************************************
*              * SIGN = 0 * FIRST LENGTH REQUESTED        *
*              ********************************************
*              * SIGN = 0 * SECOND LENGTH REQUESTED       *
*              ********************************************
*              /                                          /
*              ********************************************
*              * SIGN = 1 * LAST LENGTH REQUESTED         *
*              ********************************************
*
*           AREA LIST
*              ********************************************
*              *          * ADDR OF AREA FOR FIRST LENGTH *
*              ********************************************
*              *          * ADDR OF AREA FOR SECOND LENGTH*
*              ********************************************
*              /                                          /
*              ********************************************
*              *          * ADDR OF AREA FOR LAST LENGTH  *
*              ********************************************
*
**** END OF SPECIFICATIONS ***/
         EJECT                                                   Y02714
IEAVGM00 CSECT
         ENTRY IGC004
         ENTRY IGC005
         ENTRY IGC010
         ENTRY IGC120                                            Y02714
         ENTRY GMBRANCH
         ENTRY FMBRANCH
         ENTRY RMBRANCH
         ENTRY CRBRANCH                                          Y02714
         ENTRY GLBRANCH                                          Y02714
         ENTRY MRELEASF                                          Y02714
         ENTRY MRELEASR                                          Y02714
         ENTRY CBBRANCH                                        @Z30ENWD
         ENTRY QCBRANCH
         ENTRY GETMAING                                          Y02714
         ENTRY PLISTERR                                        @ZA20641
         EJECT
***********************************************************************
*
*        GETMAIN/FREEMAIN ENTRY POINT
*
*
*        ENTRY POINT FOR SVC 4 & 5
*
*        THIS ROUTINE CHECKS THE PARAMETER LIST AND ALL ENTRIES
*            POINTED TO BY THE PARAMETER LIST TO INSURE THAT THEY
*            ARE ON WORD BOUNDARIES, AND THAT ALL ENTRIES ARE ON
*            GETMAIN ASSIGNED PAGES.  ADDITIONALLY, THE ADDRESS LIST
*            IS CHECKED TO INSURE THAT IT IS IN THE USER'S STORAGE
*            KEY.  THE PARAMETER AND LENGTH LISTS ARE NOT CHECKED
*            FOR STORAGE KEY SINCE THEY ARE READ ONLY TO IEAVGM00.
*            NO VALIDITY CHECKING IS PERFORMED FOR INTERFACES
*            SUPPLIED BY KEY 0-7 CALLERS.                      @ZA20641
*
*        NOTE:  AN ENTRY ON A PAGE THAT IS NOT GETMAIN ASSIGNED WILL
*               CAUSE A PROGRAM INTERRUPT CODE X'10' OR X'11' TO
*               OCCUR WHEN THAT ENTRY IS REFERENCED.  MODULE IEAVGFRR
*               WILL GET CONTROL IN SUCH CASES AND WILL RETRY BACK
*               INTO IEAVGM00 AT LABEL PLISTERR TO COMPLETE PROCESSING
*               FOR THE ERROR CONDITION.                       @ZA20641
*
***********************************************************************
         SPACE 2                                                 Y02714
         MODID BR=NO                                             Y02714
         SPACE 2                                                 Y02714
         USING PSA,0               ADDRESSABILITY FOR LOW STOR.  Y02714
         USING TCB,RTCB1                                         Y02714
         SPACE 2
IGC005   DS    0H      IGC004 AND IGC005 HAVE SAME ENTRY POINT   Y02714
IGC004   BALR  RBASE1,0            SET UP BASE REGISTER          Y02714
         USING *,RBASE1            ESTABLISH PRELIMINARY BASE    Y02714
         USING ASCB,RASCB                                        Y02714
GMBASE   L     RASCB,ASCBLDA       GET ADDRESS OF LDA            Y02714
         USING LDA,RASCB                                         Y02714
         ST    RTCB,LDATCB         SAVE TCB POINTER              Y02714
         LR    RLDA,RASCB          SET ADDRESSABILITY TO LDA     Y02714
         DROP  RASCB                                             Y02714
         USING LDA,RLDA                                          Y02714
         ST    RRETURN,RETSAVE     SAVE RETURN ADDRESS
         BAL   RRETURN,FRRINIT     ESTABLISH FRR, CLEAR LDARQSTA Y02753
         LR    SAVEPARM,RIN1       SAVE PARAMETER PTR
         ST    RIN1,SAVEREG1       SAVE FOR RESTORE ON EXIT      Y02714
         LA    RRBPRXLN,RBPRFLNA   GET PREFIX LENGTH             Y02714
         SR    RRB,RRBPRXLN        GET BASE FOR RB INCLUDING PREFIX
         USING RBPRFXST,RRB        SET ADDRESSABILITY TO RB PREFIX
         SR    RFLAGWD,RFLAGWD     CLEAR REGISTER                Y02714
         ICM   RFLAGWD,M2,RBINTCOD+C1  GET SVC TYPE              Y02714
         IC    RFLAGWD,RBOPSW+C1   GET KEY                       Y02714
         DROP  RRB                                               Y02714
         SR    INDEX,INDEX         CLEAR INDEX REGISTER
         LA    RIN0,KEY0           GET KEY 0 MASK
         NR    RIN0,RFLAGWD        KEY FOR VALIDITY CHECK BYPASS Y02714
         STC   RIN0,RQSTRKEY       SAVE KEY                      Y02714
         MVC   CODE1,CODE(RIN1)    SAVE OPTION CODE            @ZA20641
         TM    RQSTRKEY,CX80       KEY 0-7 ?                   @ZA20641
         BZ    AUTHUSER            YES, SKIP VALIDITY CHECKS   @ZA20641
         OI    PARMFLG1(R2),PARMVLCK VALIDITY CK BEING DONE    @ZA20641
         BAL   RVALRET,CHECKWB     CHECK BOUNDARY ALIGNMENT    @ZA20641
         LM    RLENGTH,RADDR,C0(SAVEPARM) GET LENGTH AND ADDRESS PTRS
         LR    RIN1,RADDR          GET ADDRESS OF 1ST ADDR ENTRY
         L     RVALBASE,VALIDCK1   GET IEA0VL01 ENTRY ADDRESS  @ZA20641
         BAL   RVALRET,CHEKEY1     CK KEY/WB OF 1ST ADDR ENTRY @ZA20641
         TM    C8(SAVEPARM),LISTVAR ELEMENT REQUEST?           @ZA20641
         BZ    ENDCHECK            YES, PREPARE TO EXIT        @ZA20641
         LR    RIN1,RLENGTH        GET LENGTH LIST START ADDR  @ZA20641
         BO    VARIABLE            NO, VARIABLE REQUEST        @ZA20641
         BAL   RVALRET,CHECKWB     CHECK BOUNDARY ALIGNMENT    @ZA20641
         LR    PARMREG,RLENGTH     GET LENGTH LIST START ADDR  @ZA20641
CHECK5   TM    C0(PARMREG),CX80    IS THIS THE LAST ENTRY?       Y02714
         BO    LISTEND             YES, SAVE ITS ADDRESS       @ZA20641
         LA    INDEX,C4(INDEX)     INCREMENT INDEX             @ZA20641
         LA    PARMREG,C0(INDEX,RLENGTH) GET LENGTH ENTRY ADDR @ZA20641
         LA    RIN1,C0(INDEX,RADDR) GET ADDRESS ENTRY ADDRESS
         L     RVALBASE,VALIDCK0   GET IEA0VL00 ENTRY ADDRESS  @ZA20641
         BAL   RVALRET,CHEKEY1     CK KEY OF NTH ADDRESS ENTRY @ZA20641
         B     CHECK5              GO CHECK FOR END OF LIST    @ZA20641
         SPACE 2
VARIABLE LA    RIN15,SV5           SVC 5 COMPARISON VALUE        Y02714
         LR    SVTYPE,RFLAGWD      GET FLAGWORD                  Y02714
         SRL   SVTYPE,C8           ISOLATE SVC TYPE              Y02714
         CR    SVTYPE,RIN15        SVC 5 (FREEMAIN) ?
         BE    OUTLNTH             YES, SKIP LENGTH LIST CHECK @ZA20641
         BAL   RVALRET,CHECKWB     CHECK BOUNDARY ALIGNMENT    @ZA20641
         LM    RMIN,RMAX,C0(RIN1)  REFERENCE LENGTH LIST       @ZA20641
OUTLNTH  LA    RIN1,C4(RADDR)      GET OUTPUT LENGTH ENTRY     @ZA20641
         L     RVALBASE,VALIDCK0   GET IEA0VL00 ENTRY ADDRESS  @ZA20641
         BAL   RVALRET,CHEKEY1     CK KEY OF OUTPUT LNTH ENTRY @ZA20641
         B     ENDCHECK            PREPARE TO EXIT             @ZA20641
         SPACE 2
AUTHUSER SR    RWORK,RWORK         CALCULATE                   @ZA20641
         BCTR  RWORK,C0              THE LARGEST               @ZA20641
         SRL   RWORK,C1                POSITIVE NUMBER         @ZA20641
         ST    RWORK,LASTLSTA      END OF LIST FOR AUTH USERS  @ZA20641
         B     CHECKTYP            PREPARE TO EXIT             @ZA20641
         SPACE 2
CHECKWB  LA    RWORK,FWBMASK       FULL WORD BOUNDARY MASK     @ZA20641
         NR    RWORK,RIN1          ADDR ON FULL WORD BOUNDARY? @ZA20641
         BZR   RVALRET             YES, RETURN                 @ZA20641
         B     PLISTERR            NO, PARAMETER ERROR         @ZA09199
         SPACE 2
LISTEND  ST    PARMREG,LASTLSTA    SAVE ADDR LAST LIST ENTRY   @ZA20641
         SR    RLENGTH,RADDR       GET NUMBER OF BYTES BETWEEN @ZA20641
         BNM   CKOVLAP1            STARTING ADDRESSES
         LCR   RLENGTH,RLENGTH     OF LISTS
CKOVLAP1 LA    INDEX,C4(INDEX)     INCREMENT INDEX
         SR    RLENGTH,INDEX       DO LISTS OVERLAP?
         LA    RERROR,ERR5         SET UP ERROR CODE           @Z30ENWD
         MVI   MSGLEN,C4           REASON CODE 0 - LENGTH 4
         BM    LSTOVLAP            YES
         SPACE 2
ENDCHECK L     R2,FRRPARM          GET ADDR OF FRR PARM AREA   @ZA20641
         NI    PARMFLG1(R2),ALL-PARMVLCK VALIDITY CK FINISHED  @ZA20641
CHECKTYP LM    RLENGTH,RADDR,C0(SAVEPARM) LENGTH AND ADDR PTRS @ZA20641
         LR    RIN1,SAVEPARM       RESTORE PARAMETER POINTER
         SR    RSPID,RSPID         INITIALIZE SPID REG
         IC    RSPID,SPIDISP(RIN1) GET SPID
         ST    RFLAGWD,LDARQSTA    SAVE STATUS FLAGWORD          Y02714
         L     RBASE2,ABASE2       GET SECOND BASE               Y02714
         L     RBASE1,ABASE1       GET FIRST BASE                Y02714
         USING BASE1,RBASE1                                      Y02714
         CLI   SVCBYTE,SV5         SVC 5?                        Y02714
         BE    FMCOMMON            YES - FREEMAIN                Y02714
         B     GMCOMMON            NO - GETMAIN
         SPACE 2
CHEKEY1  SR    R2,R2               VALIDITY CK RTN NEEDS R2 = 0  Y02714
         LR    RWORK,RLDA          SAVE LDA POINTER              Y02714
         L     RTCB,LDATCB         GET TCB ADDRESS               Y02714
         BALR  RRETURN,RVALBASE    ENTER VALIDITY CHECK ROUTINE  Y02714
         LR    RLDA,RWORK          RESTORE LDA POINTER           Y02714
         BZR   RVALRET             VALID PARAMETER, RETURN       Y02714
*                                  INVALID PARAMETER, ERROR      Y02714
         SPACE 2
PLISTERR LA    RERROR,ERR6         SET UP ERROR ADDRESS        @Z30ENWD
         MVI   MSGLEN,H24          REASON CODE 1 - MSGLEN OF 4
LSTOVLAP LR    RLENGTH,SAVEPARM    GET PARAMETER LIST POINTER
         SR    RSPID,RSPID         ZERO SUBPOOL ID SO THAT WHEN STC IS
*                                  DONE,ONLY PARAMETER LIST POINTER
*                                  WILL BE GIVEN AS INFO
         ST    RFLAGWD,LDARQSTA    SAVE FLAGWORD                 Y02714
         USING GMBASE,RBASE1                                   @ZA20641
         L     RBASE2,ABASE2       GET SECOND BASE               Y02714
         L     RBASE1,ABASE1       GET FIRST BASE                Y02714
         USING BASE1,RBASE1                                    @Z30ENYF
         B     GERROR              GO TO ERROR ROUTINE         @Z30ENWD
         SPACE 2
VALIDCK0 DC    V(IEA0VL00)         VALIDITY CHECK ROUTINE (KEY)  Y02714
VALIDCK1 DC    V(IEA0VL01)         VALIDITY CHECK ROUTINE ("+WB) Y02714
         SPACE 2                                                 Y02714
         DROP  RBASE1,RLDA                                       Y02714
         EJECT
***********************************************************************
*
*        SVC 4 EQUIVALENT BRANCH ENTRY
*
***********************************************************************
         SPACE 2                                                 Y02714
GMBRANCH EQU   *
         USING ASCB,RASCB                                        Y02714
         L     RASCB,ASCBLDA       GET ADDRESS OF LDA            Y02714
         USING LDA,RASCB                                         Y02714
         STM   RIN0,RIN15,BRANCHSV SAVE CALLER'S REGISTERS       Y02714
         ST    RTCB,LDATCB         SAVE TCB POINTER              Y02714
         LR    RLDA,RASCB          SET ADDRESSABILITY TO LDA     Y02714
         DROP  RASCB                                             Y02714
         USING LDA,RLDA                                          Y02714
         BALR  TEMPBASE,0          ESTABLISH TEMPORARY BASE
         USING *,TEMPBASE
         BAL   RRETURN,FRRINIT     ESTABLISH FRR, CLEAR LDARQSTA Y02753
         L     RBASE1,ABASE1       GET FIRST BASE                Y02714
         L     RBASE2,ABASE2       GET SECOND BASE               Y02714
         USING BASE1,RBASE1,RBASE2 SET UP ADDRESSABILITY         Y02714
         OI    FLAGS,BRENTRY       SET BRANCH ENTRY              Y02714
         MVI   SVCBYTE,SV4         INDICATE SVC 4                Y02714
         MVI   RQSTRKEY,C0         SET REQUESTER KEY TO ZERO     Y02714
         LM    RLENGTH,RADDR,C0(RIN1) GET LENGTH & ADDRESS
         L     RWORK,LGPOSNUM      SET LAST LIST ADDRESS VERY    Y02714
         ST    RWORK,LASTLSTA       LARGE SO IT WON'T FAIL       Y02714
         SR    RSPID,RSPID
         IC    RSPID,SPIDISP(RIN1) GET SUBPOOL ID
         MVC   CODE1,CODE(RIN1)    SAVE OPTION CODE              Y02714
         B     GMCOMMON            GO TO GETMAIN COMMON ROUTINE
         SPACE 2
         DROP  RBASE1,RBASE2,RLDA,TEMPBASE                       Y02714
         EJECT                                                   Y02714
***********************************************************************
*
*        SVC 5 EQUIVALENT BRANCH ENTRY
*
***********************************************************************
         SPACE 2
FMBRANCH EQU   *
         USING ASCB,RASCB                                        Y02714
         L     RASCB,ASCBLDA       GET ADDRESS OF LDA            Y02714
         USING LDA,RASCB                                         Y02714
         STM   RIN0,RIN15,BRANCHSV SAVE CALLER'S REGISTERS       Y02714
         ST    RTCB,LDATCB         SAVE TCB POINTER              Y02714
         LR    RLDA,RASCB          SET ADDRESSABILITY TO LDA     Y02714
         DROP  RASCB                                             Y02714
         USING LDA,RLDA                                          Y02714
         BALR  TEMPBASE,0          ESTABLISH TEMPORARY BASE
         USING *,TEMPBASE
         BAL   RRETURN,FRRINIT     ESTABLISH FRR, CLEAR LDARQSTA Y02753
         L     RBASE1,ABASE1       GET FIRST BASE                Y02714
         L     RBASE2,ABASE2       GET SECOND BASE               Y02714
         USING BASE1,RBASE1,RBASE2 SET UP ADDRESSABILITY         Y02714
         OI    FLAGS,BRENTRY       SET BRANCH ENTRY              Y02714
         MVI   SVCBYTE,SV5         INDICATE SVC 5                Y02714
         MVI   RQSTRKEY,C0         SET REQUESTER KEY TO ZERO     Y02714
         LM    RLENGTH,RADDR,C0(RIN1) GET LENGTH & ADDRESS
         L     RWORK,LGPOSNUM      SET LAST LIST ADDRESS VERY    Y02714
         ST    RWORK,LASTLSTA       LARGE SO IT WON'T FAIL       Y02714
         SR    RSPID,RSPID
         IC    RSPID,SPIDISP(RIN1) GET SUBPOOL ID
         MVC   CODE1,CODE(RIN1)    SAVE OPTION CODE              Y02714
         B     FMCOMMON            GO TO FREEMAIN COMMON ROUTINE
         SPACE 2
         DROP  RBASE1,RBASE2,RLDA,TEMPBASE                       Y02714
         EJECT                                                   Y02714
***********************************************************************
*
*        SVC 10 EQUIVALENT BRANCH ENTRY
*
***********************************************************************
         SPACE 2                                                 Y02714
RMBRANCH EQU   *
QCBRANCH EQU   *
         USING ASCB,RASCB                                        Y02714
         L     RASCB,ASCBLDA       GET ADDRESS OF LDA            Y02714
         USING LDA,RASCB                                         Y02714
         STM   RIN0,RIN15,BRANCHSV SAVE CALLER'S REGISTERS       Y02714
         ST    RTCB,LDATCB         SAVE TCB POINTER              Y02714
         LR    RLDA,RASCB          SET ADDRESSABILITY TO LDA     Y02714
         DROP  RASCB                                             Y02714
         USING LDA,RLDA                                          Y02714
         BALR  TEMPBASE,0          ESTABLISH TEMPORARY BASE
         USING *,TEMPBASE          ESTABLISH TEMP ADDRESSABILITY
         BAL   RRETURN,FRRINIT     ESTABLISH FRR, CLEAR LDARQSTA Y02753
         OI    FLAGS,BRENTRY       SET BRANCH ENTRY              Y02714
         MVI   SVCBYTE,SV10        INDICATE SVC 10               Y02714
         MVI   RQSTRKEY,C0         SET REQUESTER KEY TO ZERO     Y02714
         L     RBASE1,ABASE1       GET FIRST BASE                Y02714
         B     SVC10A              CONTINUE
         SPACE 2
         DROP  TEMPBASE,RLDA                                     Y02714
         SPACE 5
***********************************************************************
*
*        SVC 10 ENTRY POINT
*
***********************************************************************
         SPACE 2
IGC010   BALR  RBASE1,0            SET UP TEMP ADDRESSABILITY    Y02714
         USING *,RBASE1                                          Y02714
         USING ASCB,RASCB                                        Y02714
         L     RASCB,ASCBLDA       GET ADDRESS OF LDA            Y02714
         USING LDA,RASCB                                         Y02714
         ST    RTCB,LDATCB         SAVE TCB POINTER              Y02714
         LR    RLDA,RASCB          SET ADDRESSABILITY TO LDA     Y02714
         DROP  RASCB                                             Y02714
         USING LDA,RLDA                                          Y02714
         ST    RRETURN,RETSAVE     SAVE RETURN REG
         BAL   RRETURN,FRRINIT     ESTABLISH FRR, CLEAR LDARQSTA Y02753
         LA    RRBPRXLN,RBPRFLNA   GET PREFIX LENGTH             Y02714
         SR    RRB,RRBPRXLN        GET BASE FOR RB INCL. PREFIX  Y02714
         USING RBPRFXST,RRB        SET ADDRESSABILITY TO PREFIX  Y02714
         IC    RWORK,RBOPSW+C1     GET KEY AND MODE              Y02714
         STC   RWORK,MODE          SAVE IN LDARQSTA              Y02714
         MVI   SVCBYTE,SV10        INDICATE SVC 10               Y02714
         STC   RWORK,RQSTRKEY      SAVE REQUESTER KEY            Y02714
         NI    RQSTRKEY,KEY0       REMOVE MODE FROM KEY          Y02714
         DROP  RRB                                               Y02714
         ST    RIN1,SAVEREG1       SAVE FOR RESTORE ON FREEMAIN  Y02714
         L     RBASE1,ABASE1       GET FIRST BASE                Y02714
         USING BASE1,RBASE1                                      Y02714
SVC10A   L     RBASE2,ABASE2       GET SECOND BASE               Y02714
         LR    RSPID,RIN0          GET SUBPOOL ID AND LENGTH
         LA    RIN0,C0(0,RSPID)    REMOVE SPID FROM LENGTH       Y02714
         SRL   RSPID,C24           MOVE SPID TO LOW ORDER BYTE   Y02714
         MVI   CODE1,C0            ZERO OPTION FIELD
         LR    RLENGTH,RIN0        GET LENGTH                    Y02714
         LTR   RIN1,RIN1           IS IT A GETMAIN?
         BNM   FMCOMM1             NO, FREEMAIN                  Y02714
         B     GMCOMM1             GETMAIN
         SPACE 2
         DROP  RBASE1                                            Y02714
         EJECT                                                   Y02714
**************************************************************** Y02714
*                                                                Y02714
*        GLOBAL STORAGE BRANCH ENTRY WITH SALLOC LOCK HELD       Y02714
*                                                                Y02714
**************************************************************** Y02714
         SPACE 2                                                 Y02714
GLBRANCH STM   RIN0,RIN15,BRANCHSV SAVE CALLER'S REGISTERS       Y02714
         ST    RASCB,PASCBSV       SETUP SO GM/FM COMMON WILL    Y02714
         ST    RLDA,BRANCHSV+C28    RESTORE REGS CORRECTLY       Y02714
         BALR  TEMPBASE,0          ESTABLISH TEMPORARY BASE
         USING *,TEMPBASE
         BAL   RRETURN,FRRINIT     ESTABLISH FRR, CLEAR LDARQSTA Y02753
         OI    PARMFLG1(R2),PARMGLBL  SET GLOBAL REQUEST FOR FRR Y02753
         OI    LOCKFLAG,SALHELD    INDICATE SALLOC ALREADY HELD  Y02751
         MVI   LDAFLAGS,C0         CLEAR FREEPART FLAGS        @ZA05954
         LA    RBASE1,IGC120BS     GET COMMON TEMP BASE          Y02714
         USING IGC120BS,RBASE1                                   Y02714
         L     RBASE2,ABASE2       GET SECOND BASE               Y02714
         USING BASE2,RBASE2                                      Y02714
         SR    RWORK,RWORK         SET TCB ADDRESS               Y02714
         ST    RWORK,LDATCB         TO ZERO                      Y02714
         LR    RSPID,RIN3          GET SPID (+ KEY & FLAGS)      Y02714
         SRL   RSPID,C8            MOVE TO LOW ORDER BYTE        Y02714
         N     RSPID,BYTE3MSK      ELIMINATE KEY                 Y02714
         LA    INDEX,C6            CHECK FOR SIX SUBPOOLS      @Y30APYF
GLBRNCH1 IC    RWORK,GLSPIDS-1(INDEX) GET NEXT VALID SPID        Y02714
         CR    RWORK,RSPID         IS THIS A VALID SUBPOOL?      Y02714
         BE    SVC120A             YES, CONTINUE                 Y02714
         BCT   INDEX,GLBRNCH1      TRY NEXT SUBPOOL              Y02714
*                                                                Y02714
* INVALID SUBPOOL, SET UP GERROR ROUTINE INTERFACE               Y02714
*                                                                Y02714
         LR    RLENGTH,RIN0        GET LENGTH FOR MESSAGE        Y02714
         MVI   CODE1,C0            SET UNCONDITIONAL REQUEST     Y02714
         MVI   MSGLEN,C4           REASON CODE 0 - MSGLEN OF 4   Y02714
         MVI   SVCBYTE,SV120       SET UP SVC TYPE FOR MESSAGE   Y02714
         L     RBASE1,ABASE1       GET FIRST BASE                Y02714
         USING BASE1,RBASE1                                      Y02714
         LA    RERROR,ERRB         SET UP ERROR CODE           @Z30ENWD
         B     GERROR              ABEND, B78 COMP CODE        @Z30ENWD
         SPACE 2                                                 Y02714
         DROP  RBASE1,RBASE2,RLDA,TEMPBASE                       Y02714
         EJECT                                                   Y02714
***********************************************************************
*
*        SVC 120 EQUIVALENT BRANCH ENTRY
*
***********************************************************************
         SPACE 2                                                 Y02714
CRBRANCH EQU   *                                                 Y02714
         USING ASCB,RASCB                                        Y02714
         L     RASCB,ASCBLDA       GET ADDRESS OF LDA            Y02714
         USING LDA,RASCB                                         Y02714
         STM   RIN0,RIN15,BRANCHSV SAVE CALLER'S REGISTERS       Y02714
         ST    RTCB,LDATCB         SAVE TCB POINTER              Y02714
         LR    RLDA,RASCB          SET ADDRESSABILITY TO LDA     Y02714
         DROP  RASCB                                             Y02714
         USING LDA,RLDA                                          Y02714
         BALR  TEMPBASE,0          ESTABLISH TEMPORARY BASE
         USING *,TEMPBASE
         BAL   RRETURN,FRRINIT     ESTABLISH FRR, CLEAR LDARQSTA Y02753
         LA    RBASE1,IGC120BS     GET COMMON TEMP BASE          Y02714
         USING IGC120BS,RBASE1                                   Y02714
         L     RBASE2,ABASE2       GET SECOND BASE               Y02714
         DROP  TEMPBASE                                          Y02714
SVC120A  OI    FLAGS,BRENTRY       SET BRANCH ENTRY              Y02714
         MVI   SVCBYTE,SV120       INDICATE SVC 120              Y02714
         LR    RIN15,RIN3          SIMULATE SVC 120 - DATA IN    Y02714
*                                  REGISTER 15                   Y02714
         B     SVC120B             CONTINUE AS FOR SVC 120       Y02714
         SPACE 5                                                 Y02714
***********************************************************************
*
*        SVC 120 ENTRY POINT
*
***********************************************************************
         SPACE 2                                                 Y02714
IGC120   BALR  RBASE1,0            SET TEMPORARY ADDRESSABILITY  Y02714
         USING *,RBASE1                                          Y02714
         USING ASCB,RASCB                                        Y02714
IGC120BS L     RASCB,ASCBLDA       GET ADDRESS OF LDA            Y02714
         USING LDA,RASCB                                         Y02714
         ST    RTCB,LDATCB         SAVE TCB POINTER              Y02714
         LR    RLDA,RASCB          SET ADDRESSABILITY TO LDA     Y02714
         DROP  RASCB                                             Y02714
         USING LDA,RLDA                                          Y02714
         ST    RRETURN,RETSAVE     SAVE RETURN REG               Y02714
         BAL   RRETURN,FRRINIT     ESTABLISH FRR, CLEAR LDARQSTA Y02753
         L     RBASE2,ABASE2       GET SECOND BASE               Y02714
         USING BASE2,RBASE2                                      Y02714
         MVI   SVCBYTE,SV120       INDICATE SVC 120              Y02714
         LA    RRBPRXLN,RBPRFLNA   GET PREFIX LENGTH             Y02714
         SR    RRB,RRBPRXLN        GET BASE FOR RB INCL. PREFIX  Y02714
         USING RBPRFXST,RRB        SET ADDRESSABILITY TO PREFIX  Y02714
         MVC   MODE(C1),RBOPSW+C1  GET KEY AND MODE              Y02714
         ICM   RIN15,MKEY,RBOPSW+C1 GET KEY FROM RB OLD PSW      Y02714
         N     RIN15,KEYMASK       REMOVE MODE FROM KEY          Y02714
         DROP  RRB                                               Y02714
         ST    RIN1,SAVEREG1       SAVE FOR RESTORE ON FREEMAIN  Y02714
         SPACE 2                                                 Y02714
SVC120B  LR    RSPID,RIN15         GET SPID (+ KEY & FLAGS)      Y02714
         SRL   RSPID,C8            MOVE TO LOW ORDER BYTE        Y02714
         N     RSPID,BYTE3MSK      ELIMINATE KEY                 Y02714
         STCM  RIN15,MKEY,RQSTRKEY SAVE REQUESTER KEY            Y02714
         MVI   CODE1,C0            ZERO OPTION CODE BYTE         Y02714
         STC   RIN15,CODE2         STORE ACTUAL OPTION CODE      Y02714
         TM    CODE2,S120UNCD      UNCONDITIONAL REQUEST?        Y02714
         BO    SVC120C             YES                           Y02714
         OI    CODE1,CONDTNL       NO, SET SVC 4 COND. FLAG      Y02714
SVC120C  TM    CODE2,S120PBND      PAGE BOUNDARY REQUEST?        Y02714
         BZ    SVC120D             NO                            Y02714
         OI    CODE1,BOUND         YES, SET SVC 4 PAGE BNDRY FLG Y02714
SVC120D  L     RBASE1,ABASE1       GET PERMANENT FIRST BASE      Y02714
         USING BASE1,RBASE1                                      Y02714
         LR    RLENGTH,RIN0        GET LENGTH                    Y02714
         TM    CODE2,S120FM        FREEMAIN REQUEST?             Y02714
         BO    FMCOMM1             YES, FREEMAIN                 Y02714
         B     GMCOMM1             GETMAIN                       Y02714
         SPACE 2
         DROP  RBASE1,RBASE2,RLDA                                Y02714
         EJECT                                                   Y02714
**************************************************************** Y02714
*                                                                Y02714
*        ENTRY POINT FROM REAL STORAGE MANAGEMENT TO RETURN ONE  Y02714
*        PAGE TO AN FBQE                                         Y02714
*                                                                Y02714
**************************************************************** Y02714
         SPACE 2                                                 Y02714
         USING *,RIN15                                           Y02714
MRELEASR LTR   RIN0,RIN0           LOCAL OR GLOBAL REQUEST?      Y02714
         BZ    MRLSER1             LOCAL, USE LDA                Y02714
         L     RIN15,CVTPTR        GLOBAL, USE GLOBAL SAVE AREA  Y02714
         USING CVT,RIN15                                         Y02714
         L     RIN15,CVTSPSA       GLOBAL SAVE AREA VECTOR TABLE Y02714
         USING WSAG,RIN15                                        Y02714
         L     RIN15,WSAGGMFM      GLOBAL SAVE AREA ADDRESS      Y02714
         USING LDA,RIN15                                         Y02714
         STM   RIN0,RRETURN,MSAVE  SAVE REGISTERS 0 TO 14        Y02714
         LR    RLDA,RIN15          PUT LDA POINTER IN REG 4      Y02714
         DROP  RIN15                                             Y02714
         BALR  TEMPBASE,0          SET UP TEMPORARY BASE         Y02714
         USING *,TEMPBASE                                        Y02714
         B     MRLSER2             CONTINUE                      Y02714
         DROP  TEMPBASE                                          Y02714
         SPACE 2                                                 Y02714
MRLSER1  L     RIN15,PSAAOLD       GET CURRENT ASCB POINTER      Y02714
         USING ASCB,RIN15                                        Y02714
         L     RIN15,ASCBLDA       GET ADDRESS OF LDA            Y02714
         USING LDA,RIN15                                         Y02714
         STM   RIN0,RRETURN,MSAVE  SAVE REGISTERS 0 TO 14        Y02714
         LR    RLDA,RIN15          PUT LDA POINTER IN REG 4      Y02714
         DROP  RIN15                                             Y02714
         USING LDA,RLDA                                          Y02714
MRLSER2  BALR  TEMPBASE,0          SET UP TEMPORARY BASE         Y02714
         USING *,TEMPBASE                                        Y02714
         BAL   RRETURN,FRRINIT     ESTABLISH FRR, CLEAR LDARQSTA Y02753
         L     RBASE1,ABASE1       GET FIRST BASE                Y02714
         L     RBASE2,ABASE2       GET SECOND BASE               Y02714
         USING BASE1,RBASE1,RBASE2                               Y02714
         LR    RADDRM,RIN1         MOVE ADDRESS FOR MRELEASE     Y02714
         L     RSIZEM,PAGE         SET LENGTH TO 1 PAGE          Y02714
         LTR   RWORK3,RIN0         LOCAL OR GLOBAL REQUEST?      Y02714
         BZ    MRLSER3             LOCAL, GET A. S. PQE          Y02714
         OI    PARMFLG1(R2),PARMGLBL  SET GLOBAL REQUEST FOR FRR Y02753
         L     RCVT,CVTPTR         GET CVT POINTER               Y02714
         USING CVT,RCVT                                          Y02714
         L     RGDA,CVTGDA         GET GDA POINTER               Y02714
         DROP  RCVT                                              Y02714
         USING GDA,RGDA                                          Y02714
         L     RPQEM,CSAPQEP       GET CSA PQE POINTER           Y02714
         DROP  RGDA                                              Y02714
         LR    RIN0,RSIZEM         SET UP FOR SRM                Y02714
         BAL   RCOMRET1,SRM         INTERFACE ROUTINE, CSA FREED Y02714
         LR    RADDRM,RIN1         GET ADDRESS AGAIN             Y02714
         MVI   LDACBSP,CBSQA       FBQE IS IN SQA                Y02714
         B     MRLSER4             GO DO MRELEASE                Y02714
         SPACE 2                                                 Y02714
MRLSER3  L     RPQEM,ASDPQE        GET ADDRESS SPACE PQE POINTER Y02714
         MVI   LDACBSP,CBLSQA      FBQE IS IN LSQA               Y02714
MRLSER4  BAL   RRETURN,MRELEASE    GO RETURN STORAGE TO FBQE     Y02714
         LTR   RWORK3,RWORK3       LOCAL OR GLOBAL REQUEST?      Y02714
         BNZ   MRLSER5             GLOBAL, DON'T UPDATE CURRGNTP Y02714
         L     RBLKAD,MSAVE+C4     GET STARTING ADDRESS          Y02714
         LA    RCWRK,C0(RBLKAD,RSIZEM)  DEVELOP AUB              Y02714
         C     RCWRK,CURRGNTP      AUB = CURRGNTP?               Y02714
         BNE   MRLSER5             NO, UPDATE NOT NEEDED         Y02714
         LR    RSIZE,RSIZEM        GET SIZE                      Y02714
         LR    REGA,RPQEM          GET A. S. PQE                 Y02714
         L     RDQE,AFMSMF         GET FMSMF ENTRY POINT         Y02714
         BAL   RCOMRET1,FMSMFMR-FMSMFCRE(0,RDQE) UPDATE CURRGNTP Y02714
MRLSER5  BAL   RRETURN,FRRDELET    GO DELETE FRR                 Y02753
         LM    RIN0,RRETURN,MSAVE  RESTORE REGISTERS 0 TO 14     Y02714
         BR    RRETURN             RETURN TO RSM                 Y02714
         SPACE 2                                                 Y02714
         DROP  TEMPBASE                                          Y02714
         EJECT                                                   Y02714
**************************************************************** Y02714
*                                                                Y02714
*        ENTRY POINT FROM FREEPART TO RETURN REGION SPACE TO AN  Y02714
*        APPROPRIATE FBQE                                        Y02714
*                                                                Y02714
**************************************************************** Y02714
         SPACE 2                                                 Y02714
         USING MRELEASF,RIN15                                    Y02753
MRELEASF STM   R2,RIN15,BRANCHSV+C8  SAVE REGISTERS 2 THRU 15    Y02714
         BAL   RRETURN,FRRINIT     ESTABLISH FRR, CLEAR LDARQSTA Y02753
         DROP  RIN15                                             Y02753
         BAL   RRETURN,MRELEASE    GO TO MRELEASE                Y02714
         USING *,RRETURN                                         Y02714
         B     COMRET              DO COMMON RETURN PROCESSING   Y02714
         SPACE 2
         DROP  RRETURN                                           Y02714
         SPACE 5
**************************************************************** Y02714
*                                                                Y02714
*        ENTRY POINT FROM GETPART TO ALLOCATE SPACE IN LSQA      Y02714
*        FOR VSM CONTROL BLOCKS THAT ARE NOT CELL LENGTH       @Z30ENWD
*                                                                Y02714
**************************************************************** Y02714
         SPACE 2
         USING GETMAING,RIN15                                    Y02753
GETMAING STM   R2,RIN15,BRANCHSV+C8  SAVE REGISTERS 2 THRU 15    Y02714
         BAL   RRETURN,FRRINIT     ESTABLISH FRR, CLEAR FLAGS  @Z30ENWD
         DROP  RIN15                                             Y02753
         BAL   RRETURN,GETMAINB    GO TO GET STORAGE             Y02714
COMRET   BAL   RRETURN,FMPOSTP     FREE Q'D AREAS AND SALLOC   @Z30ENWD
         BAL   RRETURN,FRRDELET    GO DELETE FRR                 Y02753
         LM    R2,RIN15,BRANCHSV+C8  RESTORE REGISTERS 2 THRU 15 Y02714
         BR    RRETURN             RETURN                        Y02714
         SPACE 2
         DROP  RBASE1,RBASE2                                     Y02714
         EJECT
***************************************************************@Z30ENWD
*                                                              @Z30ENWD
*        ENTRY POINT TO ALLOCATE OR RELEASE VSM CONTROL BLOCK
*        CELLS IN SQA OR LSQA                                  @Z30ENYF
*                                                              @Z30ENWD
***************************************************************@Z30ENWD
         SPACE 2                                               @Z30ENWD
         USING CBBRANCH,RIN15                                  @Z30ENWD
CBBRANCH EQU   *                                               @Z30ENWD
         USING ASCB,RASCB                                      @Z30ENWD
         L     RASCB,ASCBLDA       PICK UP LDA ADDRESS         @Z30ENWD
         USING LDA,RASCB                                       @Z30ENWD
         STM   R2,RRETURN,BRANCHSV+C8  SAVE REGISTERS 2 THRU 14@Z30ENWD
         LR    RLDA,RASCB          LOAD PROPER REG             @Z30ENWD
         DROP  RASCB                                           @Z30ENWD
         USING LDA,RLDA                                        @Z30ENWD
         BAL   RRETURN,FRRINIT     ESTABLISH FRR, CLEAR FLAGS  @Z30ENWD
         OI    CELLFLGS,INCBBRAN   SET CBBRANCH ENTERED FLAG   @Z30ENWD
         L     RBASE1,ABASE1       LOAD BASE REG               @Z30ENWD
         L     RBASE2,ABASE2       LOAD BASE REG               @Z30ENWD
         USING BASE1,RBASE1                                    @Z30ENWD
         USING BASE2,RBASE2                                    @Z30ENWD
         SR    R2,R2         CLEAR REG                         @Z30ENYF
         ST    R2,BRANCHSV+C60  PRESET RETURN CODE             @Z30ENYF
         LTR   RIN1,RIN1           CHECK REQUEST TYPE          @Z30ENWD
         BNM   FCEL                FREEMAIN REQUEST            @Z30ENWD
         SPACE
         LR    RIN1,RIN0           SET UP SPID PARM            @Z30ENWD
         BAL   RRETURN,GETMAINC    REQUEST A CELL FOR USER     @Z30ENWD
         LTR   RIN1,RIN1           GET A CELL?                 @Z30ENWD
         BZ    CBSETRC             NO CELL, SET BAD R.C.       @Z30ENWD
         B     CLNUP               GO TO COMMON LOGIC          @Z30ENWD
         SPACE
FCEL     C     RIN1,CURRGNTP       ADDRESS REASONABLE?         @Z30ENWD
         BNL   FCELBR              YES, FREE IT                @Z30ENYF
CBSETRC  LA    R2,FOUR             LOAD RETURN CODE            @Z30ENYF
         ST    R2,BRANCHSV+C60     STORE RETURN CODE           @Z30ENYF
         B     CLNUP                                           @Z30ENWD
FCELBR   BAL   RCOMRET1,FMAINC     FREE A CELL FOR USER        @Z30ENWD
         SPACE
CLNUP    BAL   RRETURN,FMPOSTP     FREE ANY QUEUED AREAS       @Z30ENWD
         BAL   RRETURN,FRRDELET    GO DELETE FRR               @Z30ENWD
         LM    R2,RIN15,BRANCHSV+C8 RESTORE REGISTERS 2 THRU 15@Z30ENWD
         DROP  RLDA                                            @Z30ENWD
         USING LDA,RASCB                                       @Z30ENWD
         L     RASCB,PASCBSV       RESTORE REG FROM SAVE       @Z30ENWD
         BR    RRETURN             RETURN                      @Z30ENWD
         SPACE 2
         DROP  RBASE1,RBASE2,RIN15,RASCB                       @Z30ENWD
         USING LDA,RLDA                                        @Z30ENWD
         EJECT                                                   Y02753
**************************************************************** Y02753
*                                                                Y02753
*        ROUTINE TO ESTABLISH A FUNCTIONAL RECOVERY ROUTINE      Y02753
*        (FRR) AND DO COMMON ENTRY INITIALIZATION                Y02753
*                                                                Y02753
*        INPUT                                                   Y02753
*              RLDA     - LDA ADDRESS                            Y02753
*              RRETURN  - RETURN ADDRESS                         Y02753
*        OUTPUT                                                  Y02753
*              LDARQSTA SET TO ZERO                              Y02753
*              LOCKFLAG SET TO ZERO                              Y02753
*              CELLFLGS SET TO ZERO                            @Z30ENWD
*              FRRBRNDX SET TO ZERO                              Y02753
*              FRR ESTABLISHED                                   Y02753
*              FRR PARAMETER AREA INITIALIZED AND ADDRESS SAVED  Y02753
*                  IN FRRPARM                                    Y02753
*              R2       - ADDRESS OF FRR PARAMETER AREA          Y02753
*        WORK                                                    Y02753
*              R2, REGA, REGB, WORK                              Y02753
*                                                                Y02753
**************************************************************** Y02753
         SPACE 2                                                 Y02753
FRRINIT  BALR  REGB,0              SET ADDRESSABILITY            Y02753
         USING *,REGB                                            Y02753
         SR    WORK,WORK           CLEAR CURRENT                 Y02753
         ST    WORK,LDARQSTA        REQUEST STATUS, LOCK FLAGS,  Y02753
         STH   WORK,LOCKFLAG        FRR BRANCH INDEX,          @Z30ENWD
         MVI   CELLFLGS,OFF         AND CELLFLAGS              @Z30ENYF
         L     R2,AFRR             GET FRR ADDRESS               Y02753
         SETFRR A,FRRAD=(R2),PARMAD=(R2),WRKREGS=(REGA,WORK)     Y02753
         ST    R2,FRRPARM          SAVE PARM AREA ADDRESS        Y02753
         ST    RLDA,PARMLDA(0,R2)  PLACE LDA ADDR IN PARM AREA   Y02753
         BR    RRETURN             RETURN                        Y02753
         SPACE 2                                                 Y02753
         DROP  REGB                                              Y02753
AFRR     DC    V(IEAVGFRR)         FUNCT. RECOVERY ROUTINE (FRR) Y02753
         EJECT                                                   Y02714
**************************************************************** Y02714
*                                                                Y02714
*        PERMANENT BASE REGISTER DEFINITIONS                     Y02714
*                                                                Y02714
**************************************************************** Y02714
         SPACE 2                                                 Y02714
BASE1    EQU   *                   START OF FIRST PERMANENT BASE Y02714
BASE2    EQU   BASE1+4096          START OF SECOND PERM. BASE    Y02714
ABASE1   DC    A(BASE1)            FIRST PERMANENT BASE          Y02714
ABASE2   DC    A(BASE2)            SECOND PERMANENT BASE         Y02714
         SPACE 2                                                 Y02714
         USING BASE1,RBASE1,RBASE2                               Y02714
         EJECT
***********************************************************************
*
*        GETMAIN FOR A VSM QUEUE ELEMENT - A CELL FROM LOCAL OR
*        CELL POOL.
*
*          INPUT  - RIN1     -  SPID IN BYTE ZERO
*                   RRETURN  -  RETURN REGISTER
*          OUTPUT - RIN1     -  ADDRESS OF ASSIGNED STORAGE, OR
*                               ZERO IF NO CELLS AVAILABLE
*                   R2 - R15 -  RESTORED OR UNCHANGED
*
***********************************************************************
         SPACE 2
GETMAINC STM   RRETURN,RCOMRET1,CSAVE SAVE CALLERS REGS 14-9   @Z30ENWD
         OI    CELLFLGS,INCELL     SET GETMAINC FLAG           @Z30ENWD
         SRL   RIN1,C24            ADJUST SPID FOR COMPARE     @Z30ENWD
         C     RIN1,SP245F         SQA REQUEST ?               @Z30ENWD
         BE    SQACEL              YES, SQA REQUEST            @Z30ENWD
         SPACE
         OI    CELLFLGS,LCLREQ     REMEMBER REQUEST TYPE = LSQA@Z30ENWD
         LA    RANCHOR,LCLCELL     LOAD ANCHOR ADDRESS         @Z30ENWD
         B     REMOVCEL            GO TAKE A CELL              @Z30ENWD
         SPACE
SQACEL   BAL   RCOMRET1,GTSALLOC   OBTAIN SALLOC               @Z30ENWD
         L     RCVT,CVTPTR         GET CVT POINTER             @Z30ENWD
         USING CVT,RCVT                                        @Z30ENWD
         L     RGDA,CVTGDA         GET GDA POINTER             @Z30ENWD
         DROP  RCVT                                            @Z30ENWD
         USING GDA,RGDA                                        @Z30ENWD
         LA    RANCHOR,GLBLCELL    LOAD ANCHOR ADDRESS         @Z30ENWD
         DROP  RGDA                                            @Z30ENWD
         SPACE
REMOVCEL L     RIN1,C0(,RANCHOR)   GET FIRST CELL              @Z30ENWD
         LTR   RIN1,RIN1           GOT A CELL?                 @Z30ENWD
         BZ    QTEST               NO CELL AVAILABLE           @Z30ENWD
         SPACE
RECHAINQ MVC   C0(C4,RANCHOR),C0(RIN1) RECHAIN QUEUE           @Z30ENWD
         L     RCTR,C4(,RANCHOR)   LOAD COUNT                  @Z30ENWD
         BCTR  RCTR,C0             MINUS 1                     @Z30ENWD
         ST    RCTR,C4(,RANCHOR)   STORE NEW COUNT             @Z30ENWD
         C     RCTR,CELLOW         IS QUEUE LOW?               @Z30ENWD
         BNL   GMCCLEAR            NO                          @Z30ENWD
         TM    CELLFLGS,LCLREQ     IS THIS A LOCAL REQUEST?    @Z30ENWD
         BZ    GBLEXP              NO, GLOBAL                  @Z30ENWD
         OI    CELLFLGS,LCLEXP     YES, SET LOCAL FLAG         @Z30ENWD
         B     GMCCLEAR            CLEAR CELL                  @Z30ENWD
GBLEXP   OI    CELLFLGS,GLBLEXP    SET GLOBAL FLAG             @Z30ENWD
         EJECT
GMCCLEAR XC    C0(CELLEN,RIN1),C0(RIN1)   CLEAR CELL           @Z30ENWD
GMCRSET  NI    CELLFLGS,ALL-INCELL-LCLREQ RESET FLAGS          @Z30ENWD
         LM    RRETURN,RIN0,CSAVE  RESTORE REGISTERS 14-0      @Z30ENWD
         LM    RAREG,RCOMRET1,CSAVE+C16    AND 2-9             @Z30ENWD
         BR    RRETURN             RETURN
         SPACE 3
QTEST    TM    CELLFLGS,LCLREQ     LOCAL REQUEST?              @Z30ENWD
         BZ    SETGLBL             NO, GLOBAL REQUEST          @Z30ENWD
         OI    CELLFLGS,LCLEXP     SET LOCAL EXPANSION FLAG    @Z30ENWD
         B     TESTGNOT            TEST FOR CALLER             @Z30ENWD
SETGLBL  OI    CELLFLGS,GLBLEXP    SET GLOBAL EXPANSION FLAG   @Z30ENWD
         SPACE
TESTGNOT TM    CELLFLGS,GNOTCALL   IS GNOTSAT THE CALLER       @Z30ENWD
         BZ    TRYEXPN             NO, EXPANSION ALLOWED       @Z30ENWD
         TM    CELLFLGS,LCLREQ     LOCAL REQUEST?              @Z30ENWD
         BZ    GMCRSET             NO, RETURN WITH ZERO        @Z30ENWD
RSETLCL  NI    CELLFLGS,ALL-LCLREQ RESET FLAG                  @Z30ENWD
         B     SQACEL              TRY TO GET SQA              @Z30ENWD
         SPACE
TRYEXPN  BAL   RRETURN,GETMAINE    TRY TO EXTEND POOL          @Z30ENWD
         L     RIN1,C0(,RANCHOR)   TAKE CELL                   @Z30ENWD
         LTR   RIN1,RIN1           HAVE ANY NOW?               @Z30ENWD
         BNZ   RECHAINQ            YES, RECHAIN QUEUE          @Z30ENWD
         TM    CELLFLGS,LCLREQ     IS THIS A LOCAL REQUEST?    @Z30ENWD
         BO    RSETLCL             YES, TRY FOR SQA            @Z30ENWD
         SPACE
         TM    CELLFLGS,INCBBRAN   WAS CBBRANCH THE CALLER?    @Z30ENWD
         BO    GMCRSET             YES                         @Z30ENWD
         B     WAITPREP            NO, PREPARE FOR WAIT        @Z30ENWD
         EJECT
***********************************************************************
*                                                              @Z30ENWD
*        GETMAINE/GETMAINB - ENTRY POINTS FOR INTERNAL GETMAIN @Z30ENWD
*               GETMAINE - EXPANDS CELL POOL                   @Z30ENWD
*               GETMAINB - PAGETABLE SPACE, GETMAING, GETMAINE @Z30ENWD
*                                                              @Z30ENWD
*          GETMAINE INPUT - FLAGS (LCLEXP AND/OR GLBLEXP)      @Z30ENWD
*                   OUTPUT - CELLS ON APPROPRIATE QUEUE        @Z30ENWD
*                                                              @Z30ENWD
***********************************************************************
         SPACE
GETMAINE STM   RAREG,RIN1,BSAVE    STORE REGS                  @Z30ENWD
         OI    CELLFLGS,INEXPN     SET GETMAINE ENTERED FLAG   @Z30ENWD
         TM    CELLFLGS,LCLEXP     ENTER TO EXPAND LSQA CELLS? @Z30ENWD
         BZ    SETSQASP            NO,SQA CELLS                @Z30ENWD
         L     RSPID,SP255F        LOAD LSQA SPID              @Z30ENWD
         B     SETLEN              GO SET LENGTH               @Z30ENWD
SETSQASP L     RSPID,SP245F        LOAD SQA SPID               @Z30ENWD
SETLEN   L     RLENGTH,CELEXPNL    LOAD EXPANSION LENGTH       @Z30ENWD
         B     GMB1                DO A MODIFIED GETMAINB      @Z30ENWD
         SPACE 2
***********************************************************************
*                                                              @Z30ENWD
*          GETMAINB INPUT - RIN1 = SPID AND LENGTH             @Z30ENWD
*                   OUTPUT - RIN1 = ADDRESS                    @Z30ENWD
*                                                              @Z30ENWD
***********************************************************************
         SPACE 2
GETMAINB STM   RAREG,RIN1,BSAVE    SAVE CALLERS REGS
         LR    RSPID,RIN1          ISOLATE SUBPOOL ID
         SRL   RSPID,C24           INTO CORRECT REG
         LA    RLENGTH,0(0,RIN1)   GET LENGTH WITHOUT SPID       Y02714
GMB1     L     RRETURN,LDARQSTA    SAVE FLAG WORD              @Z30ENWD
GMB2     MVI   SPFLAGS,C0          ZERO FLAG BYTE              @Z30ENWD
         C     RSPID,SP255F        SQA OR LSQA?                  Y02714
         BE    GTLSQASP            LSQA
GETSQAPT L     RCVT,CVTPTR         GET CVT POINTER               Y02714
         USING CVT,RCVT                                          Y02714
         L     RGDA,CVTGDA         GET GDA POINTER               Y02714
         DROP  RCVT                                              Y02714
         USING GDA,RGDA                                          Y02714
         L     RSPQE,SQASPQEP      GET SPQE FOR SQA              Y02714
         DROP  RGDA                                              Y02714
         OI    SPFLAGS,SQA         SET SQA FLAG                  Y02714
         B     SETGMBSW            GO SET GETMAINB SW
         EJECT
CHNTOSQA NI    CELLFLGS,ALL-LCLEXP RESET FLAG                  @Z30ENWD
         TM    CELLFLGS,INEXPN     WAS EXPANSION THE CALLER?   @Z30ENWD
         BO    GMBRSET             YES, DON'T CONVERT          @Z30ENWD
         LA    RSPID,C245          CHANGE TO SQA               @Z30ENWD
         B     GETSQAPT            GO GET SPQE FOR SQA
         SPACE 1                                                 Y02714
GTLSQASP L     RSPQE,LSQAPTR       GET SPQE FOR LSQA             Y02714
         LTR   RSPQE,RSPQE         IS THERE AN SPQE FOR LSQA?
         BZ    CHNTOSQA            NO - CHANGE TO SQA
         OI    SPFLAGS,LSQA        SET LSQA FLAG                 Y02714
SETGMBSW OI    FLAGS,GETMB         SET GETMAINB SWITCH           Y02714
         STM   RAREG,RIN1,SAVEREG2 SAVE REGS-RETRY FROM GNOTSAT@Z30ENWD
*                                                              @Z30ENWD
*         THE GNOTSAT ROUTINE CAN ENTER AT THIS LABEL          @Z30ENWD
*                                                              @Z30ENWD
GMBRETRY BAL   RCOMRET1,GFRECORE   TRY TO GET STORAGE FROM SUBPOOL
         B     GNOTSATA            NOT FOUND
         BAL   RCOMRET1,GFQEUPDT   FOUND - REMOVE ASGNED CORE FROM FQE
         LR    RIN1,RFQE           ADDRESS OF ASSIGNED AREA
         TM    CELLFLGS,INEXPN     NEED TO FORMAT?             @Z30ENWD
         BO    EXPNFMT             YES                         @Z30ENWD
         SPACE
         BCTR  RLENGTH,0           DECREMENT TO CLEAR CORE
         EX    RLENGTH,CLEARCOR    CLEAR ASSIGNED CORE
GMBRSET  ST    RRETURN,LDARQSTA    RESTORE FLAG WORD             Y02714
         NI    CELLFLGS,ALL-INEXPN-LCLEXP-GLBLEXP RESET FLAGS  @Z30ENWD
         LM    RAREG,RIN0,BSAVE    RESTORE REGISTERS
         BR    RRETURN             RETURN
         SPACE 1
CLEARCOR XC    C0(C0,RIN1),C0(RIN1) CLEAR ASSIGNED CORE
         SPACE 3
*        EXPANSION FORMAT ROUTINE OF GETMAINB                  @Z30ENWD
         SPACE 3
EXPNFMT  TM    CELLFLGS,LCLEXP     LOCAL REQUEST?              @Z30ENWD
         BZ    GLSETUP             NO, MUST BE GLOBAL          @Z30ENWD
         NI    CELLFLGS,ALL-LCLEXP RESET FLAG                  @Z30ENWD
         LA    RANCHOR,LCLCELL     LOAD ANCHOR ADDRESS         @Z30ENWD
         B     LENCK               CHECK LENGTH                @Z30ENWD
         SPACE
GLSETUP  NI    CELLFLGS,ALL-GLBLEXP RESET FLAG                 @Z30ENWD
         L     RCVT,CVTPTR         GET CVT POINTER             @Z30ENWD
         USING CVT,RCVT                                        @Z30ENWD
         L     RGDA,CVTGDA         GET GDA POINTER             @Z30ENWD
         DROP RCVT                                             @Z30ENWD
         USING GDA,RGDA                                        @Z30ENWD
         LA    RANCHOR,GLBLCELL    GET ANCHOR ADDRESS          @Z30ENWD
         DROP  RGDA                                            @Z30ENWD
         SPACE
LENCK    LTR   RLENGTH,RLENGTH     LENGTH EQUAL ZERO?          @Z30ENWD
         BZ    CKDBLENT            YES, NO FORMAT REQUIRED     @Z30ENWD
         SPACE
         L     ROLDQ,C0(,RANCHOR)  SAVE OLD QUEUE POINTER      @Z30ENWD
         LA    RSTOP,C0(RLENGTH,RIN1) GET STOP ADDRESS         @Z30ENWD
         LR    RNEXT,RIN1          PRESET NEXT ADDRESS         @Z30ENWD
         SR    RCTR,RCTR           CLEAR THE COUNTER           @Z30ENWD
         ST    RIN1,C0(,RANCHOR)   STORE FIRST CELL ADDRESS    @Z30ENWD
CELLOOP  LA    RCTR,C1(,RCTR)      ADD ONE TO COUNTER          @Z30ENWD
         LA    RNEXT,CELLEN(,RNEXT) UPDATE NEXT POINTER        @Z30ENWD
         CR    RNEXT,RSTOP         LAST CELL?                  @Z30ENWD
         BNL   WRAPUP              YES, GET OUT OF LOOP        @Z30ENWD
         SPACE
         ST    RNEXT,C0(,RIN1)     STORE FORWARD POINTER       @Z30ENWD
         LR    RIN1,RNEXT          UPDATE CELL POINTER         @Z30ENWD
         B     CELLOOP             DO NEXT CELL                @Z30ENWD
         SPACE
WRAPUP   ST    ROLDQ,C0(RIN1)      RECHAIN OLD QUEUE           @Z30ENWD
         A     RCTR,C4(,RANCHOR)   ADD IN OLD COUNT            @Z30ENWD
         ST    RCTR,C4(,RANCHOR)   STORE NEW COUNT             @Z30ENWD
         SPACE
CKDBLENT TM    CELLFLGS,GLBLEXP    SQA REQUEST ALSO?           @Z30ENWD
         BZ    GMBRSET             NO, DON'T TRY SQA           @Z30ENWD
         SPACE
         L     RLENGTH,CELEXPNL    GET EXPANSION LENGTH        @Z30ENWD
         L     RSPID,SP245F        SET SQA SPID                @Z30ENWD
         B     GMB2                EXPAND FOR SQA              @Z30ENWD
         EJECT
***********************************************************************
*
*        SUBROUTINE TO DETERMINE SUBPOOL REQUEST AND TO GET SPQE FOR
*          REQUESTED SUBPOOL
*
*              INPUT
*                 RSPID   - SPID
*                 RCOMRET1 _ RETURN ADDRESS
*              OUTPUT
*                 RSPQE   - SPQE ADDRESS
*                         - 0 IF SPQE NOT FOUND
*              WORK
*                 RWORK, RCVT, RGDA, RRETURN, RRETCODE
*
***********************************************************************
         SPACE 2                                                 Y02714
CSPCHK   LA    RWORK,C128          PROBLEM PROGRAM
         STC   RSPID,SAVSPID       SAVE SPID FOR FREEMAIN ERROR
         MVI   LDACBSP,CBLSQA      CONTROL BLOCKS IN LSQA        Y02714
         SR    RWORK,RSPID         IS THIS PROBLEM PROGRAM SUBPOOL?
         BP    PGTSPQE             YES
         LA    RWORK,SUPSPLIM      BELOW SUPERV. SUBPOOL LIMIT?  Y02714
         SR    RWORK,RSPID
         LCR   RWORK,RWORK
         BM    ERROR11A            YES - INVALID SUBPOOL
         SLL   RWORK,C2            X 4 FOR BRANCH TABLE
         TM    FLAGS,BRENTRY       BRANCH ENTRY?                 Y02714
         BO    TABLE(RWORK)        YES, DETERMINE REQUESTED SUBP Y02714
         TM    MODE,X'80'+SUP      KEY 0 TO 7 OR SUPERV MODE?    Y02714
         BNO   TABLE(RWORK)        YES, DETERMINE REQUESTED SUBP Y02714
         STM   RIN0,RIN1,CSPCKSAV  SAVE REGISTERS 0 AND 1        Y02714
         TESTAUTH FCTN=1,BRANCH=YES                              Y02714
         LM    RIN0,RIN1,CSPCKSAV  RESTORE REGISTERS 0 AND 1     Y02714
         LTR   RRETCODE,RRETCODE   IS CALLER AUTHORIZED?         Y02714
         BZ    TABLE(RWORK)        YES, DETERMINE REQUESTED SUBP Y02714
         B     ERROR11A            NO, ABEND BXY                 Y02714
         SPACE 2
*                                SUBPOOL
         SPACE 1                                                 Y02714
TABLE    B     SP227               227                         @Y30APYF
         B     SP228               228                         @Y30APYF
         B     SP229               229                           Y02714
         B     SP230               230                           Y02714
         B     SP231               231                           Y02714
         B     ERROR11A            232                           Y02714
         B     SP233               233
         B     SP233               234
         B     SP233               235
         B     SP236               236
         B     SP236               237
         B     ERROR11A            238
         B     SP239               239                           Y02714
         B     SP250               240
         B     SP241               241
         B     SP242               242
         B     ERROR11A            243                           Y02714
         B     ERROR11A            244                           Y02714
         B     SP245               245
         B     ERROR11A            246
         B     SP242               247                           Y02714
         B     ERROR11A            248
         B     ERROR11A            249                           Y02714
         B     SP250               250
         B     SP251               251
         B     SP251               252
         B     SP253               253
         B     SP254               254
         B     SP255               255                           Y02714
         SPACE 2                                                 Y02714
SP229    OI    SPFLAGS,FPROTECT    FETCH PROTECTED SUBPOOL       Y02714
SP230    L     RTCB1,LDATCB        GET TCB ADDRESS               Y02714
         LA    RSPQE,TCBUKYSP      GET SPQE POINTER FROM TCB     Y02714
         OI    SPFLAGS,AUK         AUTH. USER KEY SUBPOOL        Y02714
         B     UKSPQE              CONTINUE PROCESSING           Y02714
         SPACE 2                                                 Y02714
SP239    MVI   RQSTRKEY,C0         SET REQUESTER KEY TO ZERO     Y02714
         LA    RSPID,C227          CONVERT TO SP 227           @Y30APYF
SP227    OI    SPFLAGS,FPROTECT    FETCH PROTECTED SUBPOOL     @Y30APYF
SP228    OI    SPFLAGS,SQA         BACKED LIKE SQA             @Y30APYF
         B     SP241               FIND SPQE ON CSA CHAIN      @Y30APYF
         SPACE 2
SP231    OI    SPFLAGS,FPROTECT    FETCH PROTECTED SUBPOOL       Y02714
SP241    L     RCVT,CVTPTR         GET CVT POINTER               Y02714
         USING CVT,RCVT                                          Y02714
         L     RGDA,CVTGDA         GET GDA POINTER               Y02714
         DROP  RCVT                                              Y02714
         USING GDA,RGDA                                          Y02714
         LA    RSPQE,CSASPQEP      GET CSA SPQE POINTER          Y02714
         DROP  RGDA                                              Y02714
         OI    SPFLAGS,CSA         CSA SUBPOOL                   Y02714
         MVI   LDACBSP,CBSQA       CONTROL BLOCKS IN SQA         Y02714
         LR    RWORK,RCOMRET1      SAVE CSPCHK RETURN ADDRESS  @ZA02359
         BAL   RCOMRET1,GTSALLOC   GET SALLOC LOCK TO PREVENT  @ZA02359
*                                  BUILDING DUPLICATE SPQES    @ZA02359
         LR    RCOMRET1,RWORK      RESTORE RETURN ADDRESS      @ZA02359
         SPACE 2                                                 Y02714
UKSPQE   ST    RSPQE,SPQESAVE      SAVE SPQE PTR FOR GSPQESPC    Y02714
         L     RSPQE,0(0,RSPQE)    GET FIRST SPQE ADDRESS        Y02714
         LTR   RSPQE,RSPQE         IS THERE ONE?                 Y02714
         BZR   RCOMRET1            NO, RETURN WITH ZERO POINTER  Y02714
         SR    RWORK,RWORK         CLEAR FOR SPID                Y02714
UKSPQE1  IC    RWORK,SPQEID(0,RSPQE) GET SPQE SPID               Y02714
         CR    RWORK,RSPID         IS THIS SPID REQUESTED?       Y02714
         BNE   UKSPQE2             NO, GO TRY NEXT               Y02714
         CLC   RQSTRKEY,SPQEKEY(RSPQE) DOES THE KEY MATCH?       Y02714
         BE    GETSPQE1            YES, CORRECT SPQE FOUND       Y02714
UKSPQE2  TM    SPQEFLGS(RSPQE),LASTSPQE LAST SPQE?               Y02714
         BO    UKSPQE3             YES                           Y02714
         L     RSPQE,SPQEPTR(0,RSPQE) NO, GET NEXT SPQE          Y02714
         B     UKSPQE1             CHECK IT                      Y02714
         SPACE 2                                                 Y02714
UKSPQE3  SR    RSPQE,RSPQE         INDICATE SPQE NOT FOUND       Y02714
         BR    RCOMRET1            RETURN                        Y02714
         SPACE 2
SP233    LA    RSPID,C20(RSPID)    CHANGE SP TO 253,254, OR 255
         LA    RWORK,C80(RWORK)    CHANGE BRANCH VALUE           Y02714
         B     TABLE(RWORK)        GO TO PROPER ROUTINE
         SPACE 2                                                 Y02714
SP236    L     RTCB1,LDATCB        GET TCB ADDRESS               Y02711
         LA    RSPQE,TCBSWA        GET SWA SPQE ADDRESS          Y02711
         ST    RSPQE,SPQESAVE      SAVE SPQE PTR FOR GSPQESPC    Y02711
         OI    SPFLAGS,SWA         SWA SUBPOOL                   Y02711
         L     RSPQE,0(0,RSPQE)    GET FIRST SPQE PTR            Y02711
         B     ANYSPQE             GO FIND CORRECT SPQE          Y02711
         SPACE 2
SP242    L     RIN15,GFPART        GET GET/FREE PART ADDRESS
         LR    PARMREG,RSPID       PUT SUBPOOL ID IN CORRECT REG Y02714
         MVI   FREESW,C0           CLEAR FREESW                  Y02714
         BAL   RRETURN,FRRDELET    DELETE FRR BEFORE GET PART  @YM07647
         TM    FLAGS,BRENTRY       BRANCH ENTRY?                 Y02714
         BZR   RIN15               NO, GO TO GET/FREE PART       Y02714
         OI    LDAFLAGS,LDABRSW    INDICATE BRANCH ENTRY         Y02714
         MVC   BRANCHSV+C28(C4),PASCBSV  RESTORE REG 7 POSITION  Y02714
         BR    RIN15               GO TO GET/FREE PART
         SPACE 2
SP245    OI    SPFLAGS,SQA         SET SQA SWITCH                Y02714
         MVI   LDACBSP,CBSQA       CONTROL BLOCKS IN SQA         Y02714
         L     RCVT,CVTPTR         GET CVT POINTER               Y02714
         USING CVT,RCVT                                          Y02714
         L     RGDA,CVTGDA         GET GDA POINTER               Y02714
         DROP  RCVT                                              Y02714
         USING GDA,RGDA                                          Y02714
         L     RSPQE,SQASPQEP      GET SQA SPQE POINTER          Y02714
         DROP  RGDA                                              Y02714
         BR    RCOMRET1            RETURN
         SPACE 2
SP250    SR    RSPID,RSPID         CHANGE TO SUBPOOL 0
         B     PGTSPQE1            TREAT AS IF PP
         SPACE 2
SP254    L     RTCB1,LDATCB        GET ADDRESS OF TCB            Y02714
         TM    TCBFLGS3,TCBABGM    REQUESTING TCB ABENDING ?   @ZA29616
         L     RTCB1,TCBJSTCB      GET ADDRESS OF JOBSTEP TCB    Y02714
         ST    RTCB1,LDATCB        SAVE AS REQUESTING TCB        Y02714
         BNO   SP253               NO, CONTINUE                @ZA29616
         OI    FLAGS,LDAABGM       YES, INDICATE TCB ABENDING  @ZA29616
SP253    OI    SPFLAGS,NEEDAQE     INDICATE AQE NEEDED           Y02714
SP255    OI    SPFLAGS,LSQA        SET LSQA SWITCH               Y02714
         L     RSPQE,LSQAPTR       PICK UP LSQA SPQE             Y02714
         LTR   RSPQE,RSPQE         IS THERE AN SPQE?             Y02714
         BNZR  RCOMRET1            YES, RETURN                   Y02714
         LA    RSPID,C245          NO, CHANGE TO SQA (SP 245)    Y02714
         NI    SPFLAGS,ALL-LSQA    RESET LSQA FLAG               Y02714
         B     SP245               GO PROCESS AS SUBPOOL 245
         SPACE 2
*
*        FIND SUBPOOL QUEUE ELEMENT FOR PROBLEM PROGRAM SUBPOOLS
*              AND FOR SUBPOOLS 250, 251, AND 252
*
         SPACE 1
PGTSPQE  TM    MODE,KEY0+SUP       KEY 0 AND SUPERVISOR STATE    Y02714
         BZ    SUPVPPSP            YES
         SPACE 2
PGTSPQE1 L     RTCB1,LDATCB        GET TCB ADDRESS               Y02714
PGTSPQE2 LA    RSPQE,TCBMSS        GET SPQE PTR FROM TCB         Y02714
         ST    RSPQE,SPQESAVE      SAVE SPQE PTR FOR GSPQESPC    Y02714
         L     RSPQE,TCBMSS        GET 1ST SPQE                  Y02714
         OI    SPFLAGS,FPROTECT    SET FETCH PROTECT FLAG        Y02714
ANYSPQE  LTR   RSPQE,RSPQE         IS THERE ONE?                 Y02714
         BZR   RCOMRET1            NO - RETURN WITH 0 POINTER    Y02714
         SR    RWORK,RWORK
GETSPQE  IC    RWORK,SPQEID(RSPQE) PICK UP SPID
         CR    RWORK,RSPID         SAME ID?
         BE    GETSPQE1            YES - CHECK IF SHARED
         TM    SPQEFLGS(RSPQE),LASTSPQE LAST SPQE?
         BZ    GETSPQE2            NO
         SR    RSPQE,RSPQE         INDICATE SPQE NOT FOUND
         BR    RCOMRET1            RETURN
         SPACE 2
GETSPQE2 L     RSPQE,SPQEPTR(RSPQE) GET NEXT SPQE                Y02714
         B     GETSPQE             CHECK IT OUT
         SPACE 2
GETSPQE1 TM    SPQEFLGS(RSPQE),SPSHARE SHARED?
         BZ    SVSPQEKY            NO, CONTINUE                  Y02714
         L     RSPQE,SPDQEAD(RSPQE) LOAD OWNING SPQE             Y02714
SVSPQEKY IC    RWORK,SPQEKEY(RSPQE)  SAVE SPQE KEY               Y02714
         STC   RWORK,LSPQEKEY       FOR SETTING STORAGE KEY      Y02714
         BR    RCOMRET1            RETURN - SPQE FOUND
         SPACE 2
SUPVPPSP TM    MODE,SUBFRMN        SUBPOOL FREEMAIN?
         BO    PGTSPQE1            YES
         LTR   RSPID,RSPID         IS THIS SUBPOOL 0             Y02714
         BNZ   PGTSPQE1            NO, LEAVE AS IS               Y02714
         LA    RSPID,C252          CHANGE TO SUBPOOL 252         Y02714
         SPACE 2                                                 Y02714
SP251    L     RTCB1,LDATCB        GET ADDRESS OF TCB            Y02714
         L     RTCB1,TCBJSTCB      GET ADDRESS OF JOBSTEP TCB    Y02714
         ST    RTCB1,LDATCB        SAVE AS REQUESTING TCB        Y02714
         B     PGTSPQE2            GO FIND SPQE                  Y02714
         SPACE 2
ERROR11A MVI   MSGLEN,C4           REASON CODE 0 - MSGLEN OF 4   Y02714
         LA    RERROR,ERRB         SET ERROR CODE 11           @Z30ENWD
         CLI   SVCBYTE,SV5         IS THIS SVC 5?                Y02714
         BNE   GERROR              NO  -  MSGLEN OK            @Z30ENWD
         L     RADDR,C0(RADDR)     GET ADDRESS TO BE FREED
         MVI   MSGLEN,C8           REASON CODE 0 - MSGLEN OF 8
         B     GERROR              INVALID SUBPOOL             @Z30ENWD
         EJECT
***********************************************************************
*
*        ROUND REQUESTED LENGTH TO DOUBLE WORD BOUNDARY
*
*              IF AQE NEEDED - FLAG REQ4K IS SET IF ROUNDED LENGTH
*                              IS EXACTLY 4096 BYTES (1 PAGE)
*                            - LENGTH IS INCREMENTED BY 8
*                   INPUT
*                        RLENGTH  - LENGTH REQUESTED
*                        RCOMRET1 - RETURN ADDRESS
*                   OUTPUT
*                        RLENGTH  - ROUNDED LENGTH
*                        RWORK    - 7, USED BY FMCOMMON
*
***********************************************************************
         SPACE 2                                                 Y02714
CRNDLNTH LA    RWORK,C7            ROUND
         AR    RLENGTH,RWORK            LENGTH
         OR    RLENGTH,RWORK                 TO 8 BYTE
         XR    RLENGTH,RWORK                      MULTIPLE
         TM    SPFLAGS,NEEDAQE     AQE NEEDED
         BZR   RCOMRET1            NO
         C     RLENGTH,PAGE        LENGTH EXACTLY 4096 BYTES   @ZA11822
         BNE   NOTAPAGE            NO                          @ZA11822
         OI    SPFLAGS,REQ4K       INDICATE 4096 BYTE REQUEST  @ZA11822
NOTAPAGE LA    RLENGTH,C8(RLENGTH) ADD 8 BYTES TO LNTH FOR AQE @ZA11822
         BR    RCOMRET1            RETURN
         EJECT
***********************************************************************
*
*        CREATE AN SPQE FOR A NEW SUBPOOL
*
*              INPUT
*                   RSPID - SUBPOOL ID
*                   RCOMRET1 - RETURN ADDRESS
*              OUTPUT
*                   RSPQE - ADDRESS OF SPQE
*              WORK
*                   RWORK, RIN15
*
***********************************************************************
         SPACE 2                                                 Y02714
GSPQESPC EQU   *
         LR    RIN15,RIN1          SAVE PARAMETER POINTER
         ICM   RIN1,MASK1,LDACBSP  INDICATE CONTROL BLOCK SUBPOOLY02714
         BAL   RRETURN,GETMAINC    GET SPACE FOR SPQE          @Z30ENWD
         LR    RSPQE,RIN1          GET SPQE ADDRESS
         L     RWORK,SPQESAVE      GET ADDRESS OF SPQE POINTER   Y02714
*                                  SAVED BY CSPCHK               Y02714
         MVC   SPQEPTR(C4,RSPQE),0(RWORK)  NEXT SPQE PTR TO SPQE Y02714
         ST    RSPQE,0(0,RWORK)    NEW SPQE ADDR TO SPQE PTR     Y02714
         STC   RSPID,SPQEID(RSPQE) SPID TO SPQE
         TM    SPFLAGS,CSA+AUK     CSA OR AUTH. USER KEY SP?     Y02714
         BNZ   GTCSAKEY            YES, GO GET KEY               Y02714
         TM    SPFLAGS,SWA         SWA SUBPOOL?                  Y02714
         BO    GTSCHEDK            YES, GET SCHEDULER KEY        Y02714
         LA    RWORK,C252          GET COMPARISON VALUE
         CR    RSPID,RWORK         SUBPOOL 252 REQUESTED?
         BNE   GETCBKEY            NO, GET KEY FROM TCB
         SR    RWORK,RWORK         YES, MAKE KEY = 0
         B     SAVKEY              GO STORE KEY
GETCBKEY L     RTCB1,LDATCB        GET TCB ADDRESS               Y02714
         IC    RWORK,TCBPKF        GET TCB KEY                   Y02714
SAVKEY   STC   RWORK,LSPQEKEY      SAVE FOR SETTING STORAGE KEYS Y02714
         STC   RWORK,SPQEKEY(0,RSPQE) ALSO PLACE IN SPQE         Y02714
         OC    SPQEPTR(C4,RSPQE),SPQEPTR(RSPQE) FIRST SPQE       Y02714
*                                  IF POINTER = 0                Y02714
         BNZ   GSPQESP1            NOT FIRST                     Y02714
         MVI   SPQEFLGS(RSPQE),LASTSPQE INDICATE LAST SPQE
GSPQESP1 LR    RIN1,RIN15          RESTORE REG1
         BR    RCOMRET1            RETURN
         SPACE 2                                                 Y02714
GTCSAKEY IC    RWORK,RQSTRKEY      GET REQUESTER KEY             Y02714
         B     SAVKEY              GO SAVE IT                    Y02714
GTSCHEDK LA    RWORK,SCHEDKEY      GET SCHEDULER KEY (FOR SWA)   Y02711
         B     SAVKEY              GO SAVE IT                    Y02711
         EJECT
***********************************************************************
*
*        ROUTINE TO HANDLE FREEING OF LIST REQUESTS
*
*              INPUT
*                   RLENGTH - ADDRESS OF LENGTH LIST
*                   RADDR   - ADDRESS OF AREA LIST
*              OUTPUT
*                   RIN0    - ADDRESS OF CURRENT LENGTH IN LENGTH LIST
*                   RIN1    - ADDRESS OF CURRENT ADDRESS IN ADDR LIST
*              WORK
*                   RFMRET
*
***********************************************************************
         SPACE 2                                                 Y02714
FLISTADV LA    RFMRET,FMCOM        GO TO FMCOM FIRST TIME
         L     INDEX,CLHIBYTE      MASK TO CLEAR HIGH BYTE
FLISTAD1 L     RIN0,C0(RLENGTH)    GET CURRENT LENGTH
         NR    RIN0,INDEX          CLEAR LAST INDICATOR
         L     RIN1,C0(RADDR)      GET CURRENT ADDRESS
         NR    RIN1,INDEX          CLEAR HIGH BYTE               Y02714
         STM   INDEX,RADDR,SAV911  SAVE NINE THRU ELEVEN
         BALR  RCOMRET1,RFMRET     PROCESS CURRENT ENTRY
         BAL   RCOMRET1,CLSALLOC   CLEAR SALLOC LOCK IF OBTAINED Y02751
         LM    INDEX,RADDR,SAV911  RESTORE REGS
         TM    C0(RLENGTH),CX80    LAST ENTRY?                   Y02714
         BO    FRETRN2             YES                           Y02714
         LA    RLENGTH,C4(RLENGTH) GET NEXT LENGTH ENTRY POINTER
         LA    RADDR,C4(RADDR)     GET NEXT AREA ENTRY POINTER
         C     RLENGTH,LASTLSTA    THIS ENTRY > ORIG END OF LIST?Y02714
         BH    FRETRN2             YES, TERMINATE REQUEST HERE   Y02714
         LA    RFMRET,FCOM1        GO TO FCOM1 FOR REST OF LIST
         L     RSPQE,SPQESAVE      RESTORE SPQE REG
         NI    FREESW,FREESWM      RESET FREESW EXCEPT FM FLAG   Y02714
         B     FLISTAD1
         EJECT
***********************************************************************
*
*        ROUTINE TO HANDLE FREEING OF VARIABLE REQUESTS
*
*              INPUT
*                   RADDR - ADDRESS OF AREA; ADDRESS OF LENGTH
*              OUTPUT
*                   RIN0  - LENGTH OF AREA TO BE FREED
*                   RIN1  - ADDRESS OF AREA TO BE FREED
*
***********************************************************************
         SPACE 2                                                 Y02714
FVARCHK  L     RIN1,C4(RADDR)      PICK UP LENGTH                Y02714
         LA    RIN0,0(0,RIN1)      CLEAR HIGH BYTE               Y02714
         L     RIN1,C0(RADDR)      PICK UP ADDRESS TO BE FREED
         LA    RIN1,0(0,RIN1)      CLEAR HIGH BYTE               Y02714
         B     FMCOMM1A
         SPACE 5
***********************************************************************
*
*        ROUTINE TO HANDLE FREEING OF ELEMENT REQUESTS
*
*              INPUT
*                   RLENGTH - LENGTH
*                   RADDR   - ADDRESS OF LOCATION CONTAINING ADDRESS
*              OUTPUT
*                   RIN0    - LENGTH
*                   RIN1    - ADDRESS TO BE FREED
*
***********************************************************************
         SPACE 2                                                 Y02714
FELEMENT LA    RIN0,0(0,RLENGTH)   SET LENGTH, CLEAR HIGH BYTE   Y02714
         L     RIN1,C0(RADDR)      GET ADDRESS
         LA    RIN1,0(0,RIN1)      CLEAR HIGH BYTE               Y02714
         B     FMCOMM1A
         EJECT
***********************************************************************
*
*        RETURN CODE AND ABEND INTERFACE ROUTINE
*
*              INPUT
*                   RERROR   - ERROR CODE
*                   RLENGTH  - LENGTH REQUESTED
*                   RADDR    - ADDRESS TO BE FREED
*                   RSPID    - SPID (GETMAIN ONLY)
*              OUTPUT
*                   ABEND CALLED
*                       OR
*                   RRETCODE - RETURN CODE TO REQUESTER
*
* GERROR1      REAL PAGE NOT OBTAINED FOR L/SQA REQUEST
* GERROR2      NOT USED
* GERROR3      STORAGE NOT IN SPECIFIED SUBPOOL OR
*                 NEGATIVE LENGTH FREEMAIN ON SVC 120
* GERROR4      PP ATTEMPTING TO FREE ALL OF SP 0
*                 SP FREEMAIN FOR INVALID SUBPOOL
* GERROR5      LENGTH & ADDRESS LISTS OVERLAP
* GERROR6      PARAMETER LIST NOT IN PP AREA
*                 INPUT LIST ADDRESS NOT ON WORD BOUNDARY
*                 LIST ADDRESS NOT VALID
* GERROR7      ISSUED BY FRR, SYSTEM ERROR
* GERROR8      STORAGE UNAVAILABLE
*                 NEGATIVE LENGTH
* GERROR9      ADDRESS TO FREE NOT A MULTIPLE OF 8
* GERROR10     AREA BEING FREED OVERLAPS A FREE AREA
*                 PART OF AREA BEING FREED IS STILL FIXED
* GERROR11     PP REQUESTS SP 128-255
*                 AUTH. PROGRAM REQUESTS INVALID SUBPOOL
* GERROR12     NOT USED
* GERROR13     REQUEST TO FREE CORE FROM SQA NOT OWNED
*
***********************************************************************
         SPACE 2                                                 Y02714
GERROR   EQU   *
         SPACE 2                                                 Y02714
         LR    RIN1,RERROR         LOAD ERROR VALUE            @Z30ENWD
         SLL   RIN1,C8             MOVE TO BYTE 2
         IC    RIN1,SVCBYTE        GET SVC TYPE                  Y02714
         BAL   RRETURN,FMPOSTP     FREE ANY QUEUED AREAS         Y02714
         TM    CODE1,CONDTNL       CONDITIONAL REQUEST?          Y02714
         BO    RETCODE             YES, GO CHECK R. C. TABLE     Y02714
CKERRCDE LA    RWORK,C1            ERROR 1 COMPARE VALUE         Y02714
         CR    RERROR,RWORK        IS THIS ERROR 1?              Y02714
         BE    ERRMSG3A            YES, NO MESSAGE               Y02714
         OC    LDATCB,LDATCB       IS TCB ADDRESS = 0?           YO2714
         BZ    ERRMSG3A            YES, SKIP TABLE ENTRY         Y02714
         L     RCVT,CVTPTR         GET CVT ADDRESS               Y02714
         USING CVT,RCVT
*
*        CVTQMSG POINTS TO A MESSAGE TABLE, THE FIRST WORD OF THE
*        TABLE IS THE ADDRESS OF THE END OF THE TABLE, THE SECOND WORD
*        IS THE ADDRESS OF THE FIRST ENTRY, AN ADDRESS IN THE FIRST
*        WORD OF AN ENTRY INDICATES IT IS IN USE
*
         L     RIN15,CVTQMSG       GET ADDRESS OF INFOLIST
         DROP  RCVT                                              Y02714
         L     RWORK,C0(RIN15)     ADDRESS OF END OF LIST
         LA    RIN15,C4(RIN15)     ADDRESS OF 1ST ENTRY
         L     RASCB,PSAAOLD       GET CURRENT ASCB ADDRESS      Y02714
ERRMSG1  CR    RIN15,RWORK         ANY MORE ENTRIES TO SEARCH?
         BE    ERRMSG3A            NO - CANNOT MAKE ENTRY
         SR    RWORK3,RWORK3       ZERO REG FOR COMPARE
         USING INFOLIST,RIN15
         CS    RWORK3,RASCB,INFASCB  IF AVAIL., STORE ASCB ADDR. Y02714
         BZ    ERRMSG2             ENTRY WAS OBTAINED            Y02714
         LA    RIN15,INFLEN(RIN15) GET NEXT ENTRY
         B     ERRMSG1             SEE IF THERE IS ONE
         SPACE 2
ERRMSG2  MVC   INFTCB,PSATOLD      STORE CURRENT TCB ADDRESS     Y02714
         TM    FLAGS,BRENTRY       BRANCH ENTRY?                 Y02714
         BZ    SVCENTRY            NO - MOVE IN DATA
         OI    INFFLG,INFFLG0      SET BRANCH ENTRY SW
         MVC   INFBADDR(C4),BRANCHSV+C56 MOVE RETURN ADDRESS
SVCENTRY STH   RIN1,INFCC          STORE ABEND CODE
         TM    SPFLAGS,NEEDAQE     AQE REQUEST?                  Y02714
         BZ    ERRMSG2A            NO - NO ADJUSTMENTS NEEDED
         TM    FREESW,INCR         HAS LENGTH BEEN INCREMENTED?
         BZ    ERRMSG2A            NO
         SH    RLENGTH,H8          DECREMENT LENGTH BY 8 (AQE LEN)
         TM    FREESW,DECR         HAS ADDRESS BEEN DECREMENTED?
         BZ    ERRMSG2A            NO
         AH    RADDR,H8            INCREMENT ADDRESS BY 8 (AQE LEN)
ERRMSG2A ST    RLENGTH,INFVAR1     ST LENGTH OR PARAMETER LIST ADDR
         TM    FREESW,FREESWM      FREEMAIN?
         BZ    ERRMSG2B            NO
         IC    RSPID,SAVSPID       GET SUBPOOL ID
ERRMSG2B STC   RSPID,INFVAR1       STORE SPID OR ZERO
         TM    FREESW,FREESWM      FREEMAIN?
         BO    FREE                YES
         MVC   INFVAR2(C4),ABNDATA VARIABLE DATA
         B     ERRMSG3             GO SET REASON CODE
         SPACE 2
FREE     MVC   INFVAR3(C4),ABNDATA VARIABLE DATA
         TM    FLAGS,DEFERR10      IS IT DEFERED ERROR 10      @YM07648
         BZ    STVAR2              IF NOT RADDR IS OK          @YM07648
         TM    MODE,SUBFRMN        IS IT SUBPOOL FREEMAIN      @YM07648
         BZ    STVAR2              IF NOT RADDR IS OK          @YM07648
         MVC   INFVAR2(4),SVRLB    GET CORRECT ADDRESS FROM THE CALL
*                                  TO RELEASE                  @YM07648
         B     ERRMSG3             GO SET REASON CODE          @YM07648
STVAR2   ST    RADDR,INFVAR2       STORE ADDRESS BEING FREED
ERRMSG3  MVC   INFRCL(C1),MSGLEN   SET REASON CODE & MSGLEN
         DROP  RIN15                                             Y02714
ERRMSG3A XC    ABNDATA(ABNDATAL),ABNDATA  CLEAR WORK FIELDS
         BAL   RRETURN,FRRDELET    GO DELETE FRR                 Y02753
ABENDUSR ABEND (1),DUMP,,SYSTEM    ABEND USER                    Y02714
         SPACE 2
RETCODE  SR    RRETCODE,RRETCODE   CLEAR FOR RETURN CODE         Y02714
         LA    RWORK,RCTABLE-1(RERROR) GET RETURN CODE TABLE ADDRY02714
         IC    RRETCODE,0(0,RWORK) GET TABLE ENTRY               Y02714
         LTR   RRETCODE,RRETCODE   IS CODE ZERO?                 Y02714
         BZ    CKERRCDE            YES, ABEND REQUESTER          Y02714
         TM    0(RWORK),CX80       SHOULD REASON CODE BE CHECKED?Y02714
         BZ    DLTFRR              NO, FINISH PROCESSING         Y02714
         LA    RWORK,C3            CONSTANT OF 3                 Y02714
         CR    RERROR,RWORK        IS IT ERROR 3?                Y02714
         BE    ERRCODE3            YES                           Y02714
         LA    RWORK,C8            CONSTANT OF 8                 Y02714
         CR    RERROR,RWORK        IS IT ERROR 8?                Y02714
         BE    ERRCODE8            YES                           Y02714
         TM    MSGLEN,CX40         ERROR CODE 10, CK REAS CODE   Y02714
         BZ    RESETBT0            NOT REASON CODE 2             Y02714
         L     RTCB1,LDATCB        GET TCB ADDRESS               Y02714
         TM    TCBFBYT1,TCBEOTFM   EOT?                          Y02714
         BZ    CHKFPFM             NO, CHECK FOR FREEMAIN FROM @ZA05954
*                                  FREEPART
         B     SETRC8              YES, GO SET RETURN CODE     @ZA05954
CHKFPFM  TM    LDAFLAGS,LDAFPFM    FREEMAIN DONE BY FREEPART?  @ZA05954
         BZ    CKERRCDE            NO, ABEND REQUESTER
SETRC8   LA    RRETCODE,C8         YES, SET RETURN CODE OF 8     Y02714
RESETBT0 N     RRETCODE,RCMASK     RESET BIT 0 IN RETURN CODE    Y02714
DLTFRR   BAL   RRETURN,FRRDELET    GO DELETE FRR                 Y02753
         XC    ABNDATA(ABNDATAL),ABNDATA  CLEAR WORK FIELDS      Y02714
         TM    FLAGS,BRENTRY       BRANCH ENTRY?                 Y02714
         BO    RSTREGS             YES                           Y02714
         L     RRETURN,RETSAVE     GET RETURN ADDRESS            Y02714
         BR    RRETURN             RETURN TO SVC INTERRUPT HANDLRY02714
         SPACE 2                                                 Y02714
RSTREGS  LM    RIN0,RRETURN,BRANCHSV RESTORE REGISTERS           Y02714
         USING LDA,RASCB                                         Y02714
         L     RASCB,PASCBSV       RESTORE ASCB POINTER          Y02714
         DROP  RASCB                                             Y02714
         BR    RRETURN             RETURN WITH RETURN CODE       Y02714
         SPACE 2                                                 Y02714
ERRCODE3 TM    MSGLEN,CX80         IS REASON CODE 4?             Y02714
         BZ    RESETBT0            NO, GIVE RETURN CODE          Y02714
         B     CKERRCDE            YES, ABEND                    Y02714
         SPACE 2                                                 Y02714
ERRCODE8 TM    MSGLEN,CX40         IS REASON CODE 2?             Y02714
         BZ    RESETBT0            NO, GIVE RETURN CODE          Y02714
         B     CKERRCDE            YES, ABEND                    Y02714
         EJECT
***********************************************************************
*
*        THIS ROUTINE BUILDS AN AQE AT THE BEGINNING OF THE AREA TO BE
*              ALLOCATED AND CHAINS THE AQE ONTO THE TCBAQE QUEUE.
*
*                   INPUT  - RFQE     - ADDRESS OF FQE
*                            RLENGTH  - LENGTH OF REQUEST
*                            RCOMRET1 _ RETURN ADDRESS
*                   OUTPUT - AQE BUILT & IN TCBAQE QUEUE
*                   WORK   -  RWORK, RIN15
*
***********************************************************************
         SPACE 2                                                 Y02714
GBLDAQE  LA    RWORK,C8(RFQE)      GET END ADDRESS OF AREA
         SR    RWORK,RLENGTH       GET BEGINNING ADDRESS
         L     RIN15,LDATCB        GET TCB ADDRESS               Y02714
         USING TCB,RIN15                                         Y02714
         MVC   C0(C4,RWORK),TCBAQE PUT POINTER IN NEW AQE
         ST    RLENGTH,C4(RWORK)   PUT LENGTH IN AQE
         ST    RWORK,TCBAQE        PUT AQE IN QUEUE
         DROP  RIN15                                             Y02714
         BR    RCOMRET1            RETURN
         EJECT
***********************************************************************
*
*        MAINLINE CONTROL ROUTINE FOR GETMAIN
*
*              INPUT
*                   RIN1    - ADDRESS OF PARAMETER LIST
*                   RSPID   - SPID
*                   RADDR   - ADDRESS OR LIST OF ADDRESSES
*                   RLENGTH - LENGTH OR LIST OF LENGTHS
*
***********************************************************************
         SPACE 2                                                 Y02714
GMCOMMON TM    CODE1,LISTVAR       LIST REQUEST                  Y02714
         BM    GLIST               YES
         BZ    CLRHIBYT            BR IF SINGLE ELEMENT        @ZA17759
*                                  IT IS A VARIABLE REQUEST
         MVC   MINMAX(C8),C0(RLENGTH) GET MAX & MIN LENGTHS
         L     RLENGTH,MINMAX+4    GET MAXIMUM LENGTH
*
*        FOR ELEMENT AND VARIABLE REQUESTS, THE HIGH ORDER BYTE
*        OF THE LENGTH IS CLEARED TO PREVENT GOING THROUGH GETMAIN
*        WITH A REQUEST FOR ZERO BYTES.  ROUTINE GLIST DOES THIS
*        FOR LIST REQUESTS. A 32 BIT LENGTH VALUE COULD RESULT IN
*        X'00000000' OR X'80000000' AFTER IT WAS ROUNDED UP BY
*        ROUTINE CRNDLNTH.                                     @ZA17759
*
CLRHIBYT LA    RLENGTH,0(0,RLENGTH) CLEAR HIGH BYTE OF LENGTH  @ZA17759
GMCOMM1  BAL   RCOMRET1,CSPCHK     FIND SPQE
GCOMM4   LTR   RLENGTH,RLENGTH     NEGATIVE REQUEST
         BM    GERROR8A            YES, ERROR                    Y02714
         BZ    GCOMM11             ZERO BYTES
         LTR   RSPQE,RSPQE         SPQE FOUND
         BNZ   ROUND               YES
         BAL   RCOMRET1,GSPQESPC   GETMAIN & CREATE SPQE
ROUND    BAL   RCOMRET1,CRNDLNTH   ROUND TO 8 BYTE MULTIPLE
         STM   RIN0,RIN15,GMREPSAV SAVE REGS FOR REPEAT REQUEST
GMREPEAT TM    SPFLAGS,LSQA+SQA    L/SQA REQUEST
         BNZ   CLGFORE             YES
         TM    CODE1,BOUND         PAGE BOUNDARY?                Y02714
         BO    GLSTDQE             YES
         C     RLENGTH,MAXFQESZ    REQ GREATER THAN MAX FQE SIZE Y02714
         BH    GLSTDQE             YES
         BAL   RCOMRET1,GFRECORE   SEARCH FOR FREE STORAGE
         B     DET4KBLK            NOT FOUND
         BAL   RCOMRET1,GFQEUPDT   REMOVE STORAGE FROM FQE
         SPACE 2
GCOMM2   BAL   RCOMRET1,CLSALLOC   CLEAR SALLOC LOCK IF OBTAINED Y02751
         SPACE 2                                                 Y02751
GCOMM3   TM    CODE1,LISTVAR       LIST REQUEST                  Y02714
         BM    GLIST1              YES
         BZ    GCOMM8              SINGLE ELEMENT
         ST    RFQE,C0(RADDR)      ADDRESS ASSIGNED
         ST    RLENGTH,C4(RADDR)   LENGTH OF AREA ASSIGNED
GCOMM5   SR    RRETCODE,RRETCODE   SET RETURN CODE = 0           Y02714
         BAL   RRETURN,FMPOSTP     FREE ANY QUEUED AREAS         Y02714
         BAL   RRETURN,FRRDELET    GO DELETE FRR                 Y02753
         TM    FLAGS,BRENTRY       BRANCH ENTRY?                 Y02714
         L     RRETURN,RETSAVE     GET RETURN ADDRESS
         L     RIN1,SAVEREG1       RESTORE PARAMETER LIST ADDR   Y02714
         BZR   RRETURN             NO                            Y02714
         LM    RIN0,RRETURN,BRANCHSV RESTORE REGISTERS
         USING LDA,RASCB                                         Y02714
         L     RASCB,PASCBSV       RESTORE ASCB ADDRESS          Y02714
         DROP  RASCB                                             Y02714
         BR    RRETURN             RETURN
         SPACE 2
GCOMM11  SR    RFQE,RFQE           ZERO ADDRESS ASSIGNED
         B     GCOMM3              STORE ADDRESS IN AREA SPECIFIED
         SPACE 2
GCOMM8   CLI   SVCBYTE,SV10        REGISTER TYPE REQUEST?        Y02714
         BNL   GCOMM9              YES
         ST    RFQE,C0(RADDR) STORE ASSIGNED ADDRESS WHERE INDICATED
         B     GCOMM5              RETURN
         SPACE 2
GCOMM9   LR    RIN1,RFQE           PUT ADDRESS ASSIGNED IN REG 1
         SR    RRETCODE,RRETCODE   ZERO RETURN CODE              Y02714
         BAL   RRETURN,FMPOSTP     FREE ANY QUEUED AREAS         Y02714
         BAL   RRETURN,FRRDELET    GO DELETE FRR                 Y02753
         TM    FLAGS,BRENTRY       BRANCH ENTRY?                 Y02714
         BO    GCOMM10             YES
         L     RRETURN,RETSAVE     GET RETURN ADDRESS
         BR    RRETURN             RETURN
         SPACE 2
GCOMM10  L     RIN0,BRANCHSV       RESTORE REG 0
         LM    RAREG,RRETURN,BRANCHSV+C8 RESTORE REMAINING REGS
         USING LDA,RASCB                                         Y02714
         L     RASCB,PASCBSV       RESTORE ASCB ADDRESS          Y02714
         DROP  RASCB                                             Y02714
         BR    RRETURN             RETURN
         SPACE 2
CLGFORE  BAL   RCOMRET1,GFRECORE   SEARCH FOR FREE CORE          Y02714
         B     GNOTSATA            OUT OF VIRTUAL L/SQA
         TM    SPFLAGS,NEEDAQE     AQE NEEDED?                   Y02714
         BZ    GCOMM6              NO
         BAL   RCOMRET1,GBLDAQE    BUILD AQE                   @Z30ENWD
GCOMM6   BAL   RCOMRET1,GFQEUPDT   REMOVE CORE FROM FQE
         B     GCOMM2                                            Y02714
         SPACE 2
GLSTDQE  L     RDQE,SPDQEPTR(RSPQE) GET FIRST DQE                Y02714
         LTR   RDQE,RDQE           IS THERE ONE                  Y02714
         BZ    NODQE               NO
LASTDQE  LR    RPREVDQE,RDQE       MAKE CURRENT PREVIOUS
         L     RDQE,DQEPTR(RPREVDQE) GET NEXT DQE
         LTR   RDQE,RDQE           IS THERE ONE                  Y02714
         BNZ   LASTDQE             YES - KEEP SEARCHING FOR LAST
DET4KBLK LA    SIZEREG,C4095       DETERMINE                     Y02714
         LR    RAREG,SIZEREG          NUMBER
         AR    SIZEREG,RLENGTH             OF 4K
         OR    SIZEREG,RAREG                BLOCKS
         XR    SIZEREG,RAREG                   REQUIRED
         BAL   RRETURN,G4KSRCH1    GET 4K BLOCKS               @Y30APYF
         B     GCOMM2              FOUND                         Y02714
         B     GNOTSATB            NOT FOUND
         SPACE 2
NODQE    LR    RPREVDQE,RSPQE      MAKE SPQE THE LAST DQE
         B     DET4KBLK
         SPACE 2
GERROR8A MVI   MSGLEN,H48          REASON 2 - MSGLEN 8           Y02714
         ST    RLENGTH,ABNDATA     SAVE FULL LENGTH              Y02714
         LA    RERROR,ERR8         NEGATIVE LENGTH SPECIFIED   @Z30ENWD
         B     GERROR                                          @Z30ENWD
         EJECT
***********************************************************************
*
*        GETMAIN LIST PROCESSOR
*
*              INPUT
*                   RADDR   - POINTER TO ADDRESS LIST
*                   RLENGTH - POINTER TO LENGTH LIST
*              OUTPUT
*                   RLENGTH - CURRENT LENGTH REQUESTED
*              WORK
*                   RWORK, INDEX
*
***********************************************************************
         SPACE 2                                                 Y02714
GLIST    XC    LSTINDEX,LSTINDEX   CLEAR INDEX FIELD
         ST    RLENGTH,LENSAVE     SAVE LENGTH LIST POINTER
         L     RLENGTH,C0(RLENGTH) GET 1ST LENGTH
         ST    RLENGTH,LASTSAVE    SAVE POSSIBLE LAST ENTRY
         LA    RLENGTH,0(0,RLENGTH) CLEAR LIST END FLAG          Y02714
         B     GMCOMM1             PROCESS FIRST ENTRY
         SPACE 2
GLIST1   L     RWORK,LSTINDEX      GET ENTRY DISPLACEMENT
         ST    RFQE,C0(RWORK,RADDR)  STORE ADDRESS IN LIST
         L     INDEX,LENSAVE       RESTORE LENGTH LIST POINTER
         TM    LASTSAVE,CX80       LAST ENTRY?                   Y02714
         BO    GCOMM5              RETURN - LIST SATISFIED
         LA    RWORK,C4(RWORK)     INCREMENT INDEX
         ST    RWORK,LSTINDEX      SAVE IT
         L     RLENGTH,C0(RWORK,INDEX)  GET NEXT LENGTH
         ST    RLENGTH,LASTSAVE    SAVE POSSIBLE LAST LENGTH
         LA    RLENGTH,0(0,RLENGTH) CLEAR LIST END FLAG          Y02714
         LA    RWORK,0(RWORK,INDEX) GET ADDRESS OF CURRENT LENGTHY02714
         C     RWORK,LASTLSTA      ORIG END OF LIST EXCEEDED?    Y02714
         BH    GCOMM5              YES, TERMINATE REQUEST        Y02714
         B     GCOMM4              PROCESS NEXT LENGTH
         EJECT
***********************************************************************
*
*        TURN ON INHIBIT GETMAIN FLAG FOR REAL STORAGE MANAGEMENT
*
*              INPUT
*                   RCOMRET1 - RETURN ADDRESS
*              OUTPUT
*                   PVTBGMS FLAG IN PVT TURNED ON
*              WORK
*                   RPVT
*
***********************************************************************
         SPACE 2
TRNONPVT L     RCVT,CVTPTR         GET CVT POINTER               Y02714
         USING CVT,RCVT                                          Y02714
         L     RPVT,CVTPVTP        GET POINTER TO PVT
         DROP  RCVT
         USING PVT,RPVT
         SPACE 2
         OI    PVTFLAG1,PVTBGMS    TURN ON PVTBGMS
         BR    RCOMRET1            RETURN TO MAINLINE
         SPACE 2                                                 Y02714
         DROP  RPVT                                              Y02714
         EJECT
***********************************************************************
*                                                                     *
*   THE FREEMAIN COMMON ROUTINE IS ENTERED AT VARIOUS ENTRY POINTS    *
*   TO HANDLE ALL FREEMAINS. FOR A REGION FREEMAIN, IF A PAGE OR      *
*   MULTIPLES OF A PAGE ARE FREED, THE PAGE IS MARKED NOT GETMAINED   *
*   AND A RELEASE PAGE IS DONE ON IT TO UNHOOK IT FROM THE PAGING     *
*   SUPERVISOR QUEUES. FOR SQA/LSQA THE SAME IS DONE, IN ADDITION THE *
*   RELEASE PAGE CAUSES THE FIXED PAGE TO BE RELEASED. THE VARIOUS    *
*   ENTRY POINTS AND THEIR CALLERS ARE:                               *
*                                                                     *
*      ENTRY                                                          *
*                                                                     *
*      FMCOMMON  -  FROM ENTRY PROCESSING TO FREE SPACE FOR SVC 5 TYPE*
*                   REQUESTS                                          *
*                                                                     *
*      FMCOMM1   -  FROM ENTRY PROCESSING TO FREE SPACE FOR SVC 10    *
*                   AND SVC 120 TYPE REQUESTS                         *
*                                                                     *
*      FCOM1     -  FOR SECOND AND SUBSEQUENT ENTRIES IN A LIST       *
*                   REQUEST TO BYPASS THE SPQE CHECK                  *
*                                                                     *
*      SP253FR   -  FROM SUBPOOL FREEMAIN (SPFRMAIN) TO FREE AQE AND  *
*                   AREA ASSOCIATED WITH IT                           *
*                                                                     *
*      SPREL     -  FROM SPFRMAIN TO FREE DQE AND ALL SPACE ASSOCIATED*
*                   WITH IT.                                          *
*                                                                     *
*      FMAINC    -  FROM VIRTUAL STORAGE MANAGEMENT ROUTINES TO FREE  *
*                   VSM CELLS                                         *
*                                                                     *
*      FMAINB    -  FROM VIRTUAL STORAGE MANAGEMENT ROUTINES TO FREE  *
*                   CONTROL BLOCKS THAT ARE NOT CELL LENGTH           *
*                                                                     *
*      CONTENTS OF REGS ON INPUT TO FMAINB                            *
*                                                                     *
*        RIN0     (0) - SUBPOOL ID IN HIGH ORDER BYTE AND LENGTH IN   *
*                       THREE LOW ORDER BYTES                         *
*        RIN1     (1) - ADDRESS TO BE FREED                           *
*                                                                     *
*        LDARQSTA     - BYTE 0   - FLAGS                              *
*                       BYTE 1   - SUBPOOL FLAGS                      *
*                       BYTE 2   - SVC NUMBER                         *
*                       BYTE 3   - KEY AND MODE                       *
*                                                                     *
*      WHEN REQUEST IS AN SVC 10 OR SVC 120 OR FROM RMBRANCH,         *
*      CRBRANCH, OR GLBRANCH                                          *
*                                                                     *
*        RIN1     (1) - ADDRESS TO BE FREED OR ZERO IF FREE OF        *
*                       COMPLETE SUBPOOL                              *
*        RLENGTH (10) - LENGTH TO BE FREED OR ZERO IF FREE OF         *
*                       COMPLETE  SUBPOOL                             *
*                                                                     *
*      WHEN REQUEST IS AN SVC 5 OR FROM FMBRANCH                      *
*                                                                     *
*        1 - NORMAL FREEMAIN                                          *
*                                                                     *
*        RLENGTH (10) - POINTER TO LENGTH LIST OR LENGTH              *
*        RADDR   (11) - POINTER TO ADDRESS OR LIST OF ADDRESSES       *
*                                                                     *
*        2 - VARIABLE FREEMAIN                                        *
*                                                                     *
*        RIN1     (1) - ADDRESS OF PARAMETER LIST                     *
*        RADDR   (11) - POINTER TO TWO WORDS; FIRST WORD ADDRESS,     *
*                       SECOND WORD CONTAINS LENGTH                   *
*                                                                     *
***********************************************************************
         SPACE 2                                                 Y02714
FMCOMMON TM    CODE1,LISTVAR       CHECK TYPE OF REQUEST         Y02714
         BM    FLISTADV            LIST REQUEST                  Y02714
         BO    FVARCHK             VARIABLE REQUEST              Y02714
         B     FELEMENT            ELEMENT REQUEST
         SPACE 2                                                 Y02714
FMCOMM1  LTR   RIN1,RIN1           SUBPOOL FREEMAIN
         BZ    SPFRMAIN            YES
         LA    RIN1,0(0,RIN1)      CLEAR HIGH BYTE OF ADDRESS  @ZA14231
FMCOMM1A BAL   RCOMRET1,FMCOM      GO TO COMMON PROCESSING ROUTINE
FRETRN2  SR    RRETCODE,RRETCODE   ZERO RETURN CODE              Y02714
         MVI   FREESW,C0           ZERO FREESW
         BAL   RRETURN,FMPOSTP     DO FREEMAIN POST PROCESSING   Y02714
         BAL   RRETURN,FRRDELET    GO DELETE FRR                 Y02753
         TM    FLAGS,BRENTRY       BRANCH ENTRY                  Y02714
         BO    FRETRN3             YES                           Y02714
         L     RRETURN,RETSAVE     GET RETURN ADDRESS            Y02714
         L     RIN1,SAVEREG1       RESTORE REGISTER 1            Y02714
         BR    RRETURN             RETURN                        Y02714
         SPACE 2                                                 Y02714
FRETRN3  LM    RIN0,RRETURN,BRANCHSV RESTORE REGS                Y02714
         USING LDA,RASCB                                         Y02714
         L     RASCB,PASCBSV       RESTORE ASCB ADDRESS          Y02714
         DROP  RASCB                                             Y02714
         BR    RRETURN              RETURN TO BR ENTRY CALLER
         EJECT
FMAINC   STM   RCOMRET1,REGB,CSAVE+C48  SAVE REGS 9-11         @Z30ENWD
         OI    CELLFLGS,INCELL     SET FLAG FOR FRR USE        @Z30ENWD
         L     REGA,CVTPTR         GET CVT ADDRESS             @Z30ENWD
         USING CVT,REGA                                        @Z30ENWD
         C     RIN1,CVTSHRVM       IS CELL IN PRIVATE AREA?    @Z30ENWD
         BL    LCLRTN              YES, A LOCAL REQUEST        @Z30ENWD
         SPACE
         BAL   RCOMRET1,GTSALLOC   GET THE GLOBAL LOCK         @Z30ENWD
         L     REGA,CVTGDA         GET THE GDA ADDRESS         @Z30ENWD
         DROP  REGA
         USING GDA,REGA
         LA    REGA,GLBLCELL       GET THE ANCHOR ADDRESS      @Z30ENWD
         B     CELRTN              RETURN THE CELL             @Z30ENWD
         SPACE
LCLRTN   LA    REGA,LCLCELL        GET THE ANCHOR ADDRESS      @Z30ENWD
         OI    CELLFLGS,LCLREQ     SET FLAG FOR FRR USE        @Z30ENWD
         SPACE
CELRTN   L     REGB,C0(,REGA)      GET POINTER TO FIRST CELL   @Z30ENWD
         ST    RIN1,C0(,REGA)      CHAIN RETURNED CELL         @Z30ENWD
         ST    REGB,C0(,RIN1)      RECHAIN QUEUE               @Z30ENWD
         L     REGB,C4(,REGA)      PICK UP CELL COUNT          @Z30ENWD
         LA    REGB,C1(REGB)       UPDATE COUNT                @Z30ENWD
         ST    REGB,C4(,REGA)      STORE UPDATED COUNT         @Z30ENWD
         LM    RCOMRET1,REGB,CSAVE+C48  RESTORE REGS 9-11      @Z30ENWD
         NI    CELLFLGS,ALL-INCELL-LCLREQ RESET FLAGS          @Z30ENWD
         BR    RCOMRET1            RETURN TO CALLER            @Z30ENWD
         DROP  REGA
         SPACE 3
FMAINB   STM   RIN0,RIN15,FSAVE    SAVE REGS
         MVC   DQESAVE1(C32),DQESAVE SAVE DQE AND OTHER POINTERS Y02714
         L     RWORK,LDARQSTA      SAVE CURRENT                  Y02714
         ST    RWORK,SAVSVTSV         REQUEST STATUS             Y02714
         L     RWORK,SETUPFMB      SET UP STATUS FOR FREEMAIN    Y02714
         ST    RWORK,LDARQSTA         OF A CONTROL BLOCK         Y02714
         MVC   SAVSPID2(1),SAVSPID SAVE SP ID FOR MESSAGES     @YM07648
         MVC   SAVFRESW,FREESW     SAVE CURRENT FREESW           Y02714
         MVI   FREESW,C0           CLEAR NEW FREESW              Y02714
         LR    RSPID,RIN0          GET SPID AND LENGTH           Y02714
         LA    RIN0,0(0,RSPID)     CLEAR SPID FROM LENGTH        Y02714
         SRL   RSPID,C24           MOVE SPID TO LOW ORDER BYTE   Y02714
         BAL   RCOMRET1,FMCOM      GO TO COMMON PROCESSING ROUTINE
         MVC   SAVSPID(1),SAVSPID2 REST SP ID FOR MESSAGES     @YM07648
         L     RWORK,SAVSVTSV      RESTORE CURRENT               Y02714
         ST    RWORK,LDARQSTA       REQUEST STATUS               Y02714
         LM    RIN0,RIN15,FSAVE    RESTORE REGS
         MVC   DQESAVE(C32),DQESAVE1  RESTORE POINTERS           Y02714
         MVC   FREESW,SAVFRESW     RESTORE FREESW                Y02714
         BR    RCOMRET1            RETURN
         EJECT
***********************************************************************
*                                                                     *
*        FMCOM IS THE ROUTINE WHICH HANDLES ALL COMMON FREEMAIN       *
*        PROCESSING. EXCEPTIONS TO THIS ARE THE TWO SUBPOOL           *
*        FREEMAIN ENTRIES SP253FR AND SPREL. FCOM1 IS ALSO            *
*        USED FOR THE SECOND AND ALL SUBSEQUENT ENTRIES OF A LIST     *
*        REQUEST TO BYPASS THE SPQE CHECK.                            *
*                                                                     *
***********************************************************************
         SPACE 2                                                 Y02714
FMCOM    OI    FREESW,FREESWM      INDICATE FREEMAIN
         ST    RCOMRET1,FMSAVE     SAVE RETURN REG
         BAL   RCOMRET1,CSPCHK     GO TO CHECK FOR SPQE
FCOM1    LTR   RSPQE,RSPQE         SUBPOOL FOUND                 Y02714
         BNZ   SPQEFND             YES                           Y02714
         LR    RADDR,RIN1          SAVE AREA ADDRESS           @YM33014
         MVI   MSGLEN,H4C          REASON CODE 2 - LENGTH 12
         LA    RERROR,ERR3         SET PROPER ERROR CODE       @Z30ENWD
         B     GERROR3C            GO SET UP REMAINING PARAMETERS
         SPACE 2
SPQEFND  TM    SPFLAGS,LSQA        LSQA REQUEST                  Y02714
         BZ    INLSQA              NO
         L     RCVT,CVTPTR         GET CVT POINTER               Y02714
         USING CVT,RCVT                                          Y02714
         L     RGDA,CVTGDA         GET GDA POINTER               Y02714
         DROP  RCVT                                              Y02714
         USING GDA,RGDA                                          Y02714
         L     RWORK,PASTRT        GET PRIVATE AREA SIZE         Y02714
         A     RWORK,PASIZE        ADD LENGTH, GIVES BOTTOM CSA  Y02714
         CR    RIN1,RWORK          IS STORAGE IN SQA?            Y02714
         BL    INLSQA              NO
         L     RSPQE,SQASPQEP      SQA SPQE INSTEAD OF LSQA      Y02714
         DROP  RGDA                                              Y02714
         XI    SPFLAGS,SQA+LSQA    RESET LSQA; SET SQA           Y02714
         MVI   LDACBSP,CBSQA       CONTROL BLOCKS IN SQA       @ZA05196
INLSQA   LR    RLENGTH,RIN0        LENGTH
         ST    RSPQE,SPQESAVE      SAVE SPQE REG IN CASE OF LIST
         LR    RADDR,RIN1          PICK UP ADDR                @YM07655
         LTR   RLENGTH,RLENGTH     ZERO BYTE REQUEST             Y02714
         BZ    FMLEAVE             YES, RETURN
         BM    NEGLEN78            BR IF LENGTH NEGATIVE       @YM07655
         LTR   RADDR,RADDR         TEST FOR NEGATIVE ADDRESS   @YM07655
         BM    NEGLEN78            BR IF ADDRESS NEGATIVE      @YM07655
         BAL   RCOMRET1,CRNDLNTH   ROUND LENGTH TO MULTIPLE OF 8 BYTES
*                                  RWORK CONTAINS SEVEN FROM CRNDLNTH
         NR    RWORK,RADDR         TEST ADDRESS FOR MULTIPLE OF 8
         BNZ   GERROR9A            ADDRESS NOT A MULTIPLE OF 8
         TM    SPFLAGS,NEEDAQE     AQE REQUEST                   Y02714
         BZ    DONTBACK            NO
         LA    RWORK,AQESIZE       SUBTRACT AQESIZE (8) FROM     Y02714
         SR    RADDR,RWORK          BEGIN ADDRESS
         SPACE 5                                                 Y02714
*
*        FMCOMMON - FIND DQE WHICH ENCOMPASSES AREA BEING FREED
*
         SPACE 2                                                 Y02714
DONTBACK TM    SPFLAGS,SQA+CSA     IS THIS SQA OR CSA REQUEST?   Y02751
         BZ    SCDQE               NO                            Y02751
         BAL   RCOMRET1,GTSALLOC   GET SALLOC LOCK               Y02751
SCDQE    LR    RDQE,RSPQE          INITIALIZE DQE PTR            Y02751
         TM    SPFLAGS,SQA+CSA     IF SP227, 228, OR 239 SET NOT FIRST
*                                  DQE                         @Y30APYF
         BNO   NEXTDQE              SO FIRST DQE CAN GO AWAY     Y02714
         SPACE 2                                                 Y02714
NOTFIRST OI    FREESW,NFRSTDQE     SET "NOT FIRST DQE" FOR L/SQA Y02714
NEXTDQE  LR    RPREVDQE,RDQE       DQE NOW PREVIOUS
         L     RDQE,DQEPTR(RPREVDQE) PICK UP DQE
         LTR   RDQE,RDQE           DQE EXIST
         BNZ   NEXT1               YES
NEGLEN78 MVI   MSGLEN,H2C    REASON CODE 1 - LENGTH 12           Y02714
         LA    RERROR,ERR3         NO DQE FOR SUBPOOL IN WHICH @Z30ENWD
*                                  FREE IS BEING ATTEMPTED     @YM07655
*                                  OR INVALID LENGTH OR        @YM07655
*                                  ADDRESS (NEGATIVE)
         B     GERROR3A            SET UP REMAINING PARAMETERS
         SPACE 2
NEXT1    L     RUB,DQELNTH(RDQE)   LENGTH OF AREA DESCRIBED BY DQE
         A     RUB,DQEBLKAD(RDQE)  UPPER BOUND OF DQE
         LR    RAUB,RADDR          ADDRESS TO BE FREED
         AR    RAUB,RLENGTH        UPPER BOUND OF AREA TO BE FREED
         C     RADDR,DQEBLKAD(RDQE) ADDR LESS THAN LOWER BOUND
         BL    NOTFIRST            YES NOT RIGHT DQE             Y02714
         CLR   RAUB,RUB           AREA TO BE FREED UPPER BOUND @YM07655
         BH    NOTFIRST            GREATER THAN DQE UPPER BOUND  Y02714
         ST    RDQE,DQESAVE        SAVE DQE POINTER
         TM    SPFLAGS,NEEDAQE     AQE REQUEST?                  Y02714
         ST    RPREVDQE,DQESAVE+4  SAVE PREV DQE REG
         BZ    NOAQE               NO, SKIP AQE PROCESSING
         SPACE 5                                                 Y02714
*
*        FMCOMMON - REMOVE ANY AQE'S FOR AREA BEING FREED
*
         SPACE 2                                                 Y02714
SP253FR  L     RIN1,LDATCB         GET TCB ADDRESS               Y02714
         DROP  RTCB1                                             Y02714
         USING TCB,RIN1                                          Y02714
         L     RAQE,TCBAQE         PICK UP AQE POINTER           Y02714
         LTR   RAQE,RAQE           TCBAQE ZERO
         BZ    ERROR13A            YES - ERROR13
         LA    RAQE,TCBAQE         INITIALIZE PREV
         DROP  RIN1                                              Y02714
         USING TCB,RTCB1                                         Y02714
AQECHECK LR    RPREVAQE,RAQE       SAVE PREV
         L     RAQE,AQEPTR(RAQE)   PICK UP AQE
         CR    RADDR,RAQE          ADDRESS LESS THAN AQE ADDR
         BL    AQECHECK            YES
         LTR   RAQE,RAQE           END OF CHAIN
         BZ    ERROR13A            YES ERROR 13
         LR    RUB,RAQE            AQE ADDRESS
         A     RUB,AQELEN(RAQE)    UPPER BOUND OF AQE
         CR    RAUB,RUB            AREA UPPER BOUND GREATER THAN
         BH    AQECHECK            AQE UPPER BOUND - YES
         BL    FREELMID            FREEING LOWER OR MIDDLE
         CR    RADDR,RAQE          FREEING TOP; ALL OF IT?
         BNE   FREETOP             NO, FREEING TOP PART ONLY
         MVC   AQEPTR(FOUR,RPREVAQE),AQEPTR(RAQE) REMOVE AQE FROM CHAIN
*                                  AS WHOLE AREA IS BEING FREED
         B     NOAQE               RETURN TO NORMAL PROCESSING
*
*        FREEING LOWER OR MIDDLE PART OF AN AREA DESCRIBED BY AN AQE
*
FREELMID SR    RAUB,RWORK          SUBTRACT 8 FROM AREA UPPER BOUND FOR
*                                  NEW OR MOVED AQE
         SR    RLENGTH,RWORK       SUBTRACT 8 FROM LENGTH FOR SIZE OF
*                                  AQE (CRNDLNTH HAS ADDED 8)
         ST    RAUB,AQEPTR(RPREVAQE)
         LR    WORK,RUB            OLD AQE UPPER BOUND MINUS NEW
         SR    WORK,RAUB            AQE START IS LENGTH OF NEW AQE
         ST    WORK,AQELEN(RAUB)   PLACE LENGTH IN AQE
         CR    RADDR,RAQE          FREEING BOTTOM ONLY
         BNE   FREEMID             NO  FREEING MIDDLE
         MVC   AQEPTR(FOUR,RAUB),AQEPTR(RAQE)  MOVE NEXT POINTER FROM
*                                  OLD TO NEW AQE
         B     NOAQE               RESUME NORMAL PROCESSING
*
*        FREEING MIDDLE PART OF AREA DESCRIBED BY AN AQE
*
FREEMID  ST    RAQE,AQEPTR(RAUB)   PLACE POINTER TO OLD AQE IN NEW AQE
         AR    RADDR,RWORK         FREEING MIDDLE SO START ADDRESS MUST
*                                  BE PLACED BACK AT ITS ORIGINAL
*                                  LOCATION AS NO AQE IS BEING FREED
         SR    RLENGTH,RWORK       8 WAS ADDED TO LENGTH IN CRNDLNTH
*                                  FOR AN AQE - IT WAS SUBTRACTED
*                                  WHEN THE NEW AQE WAS BUILT.
*                                  NOW AS THE MIDDLE IS BEING FREED THE
*                                  ORIGINAL AQE IS NOT BEING FREED SO
*                                  THE 8 THAT CRNDLNTH ADDED MUST BE
*                                  SUBTRACTED ALSO.
         LR    RPREVAQE,RADDR      ADDR TO BE FREED
         SR    RPREVAQE,RAQE       START OF AREA TO BE FREED MINUS
*                                  OLD AQE ADDR IS LENGTH OF OLD AQE
         ST    RPREVAQE,AQELEN(RAQE)  PLACE LENGTH IN OLD AQE
         B     NOAQE               RETURN TO NORMAL PROCESSING
*
*        FREEING TOP PART OF AN AREA DESCRIBED BY AN AQE
*
FREETOP  AR    RADDR,RWORK         PLACE ADDR BACK TO ORIGINAL   Y02714
*                                  LOCATION AS AQE IS NOT BEING FREED
         SR    RLENGTH,RWORK       REPLACE AQE SIZE ADDED BY CRNDLNTH
         LTR   RLENGTH,RLENGTH     ZERO BYTE FREE
         BZ    FMLEAVE             YES, RETURN
         L     RWORK,AQELEN(RAQE)  AQE LENGTH
         SR    RWORK,RLENGTH       SUBTRACT LENGTH OF AREA TO BE FREED
         ST    RWORK,AQELEN(RAQE)  NEW LENGTH
         SPACE 5                                                 Y02714
*
*        FMCOMMON - FIND FQE AND RECONSTRUCT FQE'S TO REFLECT
*        ADDITIONAL FREE AREA
*
         SPACE 2                                                 Y02714
NOAQE    BAL   RCOMRET1,QELOCATE   GO TO LOCATE FQE WHOSE LOW ADDR IS
*                                  LOW OR EQUAL TO THE HIGH BOUND OF
*                                  THE AREA BEING FREED
         CR    RAUB,RLB            AREA UPPER BOUND EQUAL TO FQE
*                                  LOWER BOUND
         BNE   CHKFQE              NO
         L     RWORK,FQELNTH(RFQE) PICK UP LENGTH
         AR    RWORK,RLENGTH       ADD LENGTH OF AREA BEING FREED
         ST    RWORK,FQELNTH(RFQE) PLACE NEW LENGTH IN FQE
         B     CKNXTFQE            GO TO CHECK NEXT FQE FOR COMBINATION
         SPACE 2                                                 Y02714
CHKFQE   LTR   RLB,RLB             ANY FQE EXIST ON THIS DQE?    Y02714
         BZ    CHECTYP             NO, CREATE FQE IF NEEDED
         CR    RADDR,RUB           FQE UPPER BOUND EQUAL ADDRESS?
         BNE   CREATFQE            NO, MUST CREATE FQE
         TM    FQTYPE(RFQE),REGION REGION FQE?
         BZ    NOTREG1             NO
         ST    RAUB,FQAREA(RFQE)   YES, PLACE NEW ADDRESS IN FQE
         L     RWORK,FQELNTH(RFQE) PICK UP LENGTH
         B     LSQA1               ADJUST LENGTH
         SPACE 2                                                 Y02714
NOTREG1  OI    FREESW,FQEBELOW     INDICATE FQE BELOW FREED AREA Y02714
         LA    RWORK,FQESLNTH      FQE LENGTH                    Y02714
         LR    WORK,RAUB           NEW FQE ADDR PLUS FQE LENGTH
         SR    WORK,RWORK          NEW FQE ADDR
         ST    WORK,FQEPTR(RPREVFQE)  PLACE MOVED FQE
         MVC   FQEPTR(FOUR,WORK),FQEPTR(RFQE)  INTO CHAIN
         L     RWORK,FQELNTH(RFQE) LENGTH
         LR    RFQE,WORK           NEW FQE LOCATION
LSQA1    AR    RWORK,RLENGTH       NEW FQE LENGTH
         ST    RWORK,FQELNTH(RFQE) NEW FQE AREA LENGTH
         B     CHECK4K             GO TO SEE IF 4K CAN BE RELEASED
         SPACE 2                                                 Y02714
CREATFQE TM    SPFLAGS,SQA+LSQA    REGION FQE REQUIRED?          Y02714
         BNZ   LNTHADJ             NO, ADJUST LENGTH             Y02714
         LR    RWORK,RPREVFQE      SAVE PREV FQE POINTER
         ICM   RIN1,MASK1,LDACBSP  GET SPID FOR FQE              Y02714
         BAL   RRETURN,GETMAINC    OBTAIN FQE                  @Z30ENWD
         LR    RFQE,RIN1           NEW FQE
         LR    RPREVFQE,RWORK      RESTORE PREV FQE POINTER
         MVI   FQTYPE(RFQE),REGION INDICATE REGION FQE
         ST    RAUB,FQAREA(RFQE)   HIGH ADDRESS OF FREE SPACE
ADJLNTH  ST    RLENGTH,FQELNTH(RFQE)  PLACE LENGTH IN FQE
         MVC   FQEPTR+1(C3,RFQE),FQEPTR+1(RPREVFQE) PREV FQENXT IS NEW
*                                  FQENXT
         STCM  RFQE,MASK,FQEPTR+1(RPREVFQE) NEW FQE IS PREVIOUS FQENXT
         B     CHECK4K             GO TO SEE IF 4K TO BE RELEASED
         SPACE 2                                                 Y02714
LNTHADJ  LA    RWORK,FQESLNTH      FQE SIZE                      Y02714
         LR    RFQE,RAUB           NEW FQE PLUS FQE SIZE
         SR    RFQE,RWORK          NEW FQE
         MVI   FQTYPE(RFQE),C0     INDICATE NON REGION FQE
         B     ADJLNTH             ADJUST LENGTH
         SPACE 2                                                 Y02714
CHECTYP  L     RWORK,DQELNTH(RPREVFQE)  IF NO FQE EXISTS THE PREVIOUS
*                                  FQE IS A DQE
         CR    RLENGTH,RWORK       LENGTH OF FREEMAIN EQUAL TO DQESIZE
         BNE   CREATFQE            NO, GO CREATE FQE
         L     RLB,DQEBLKAD(RPREVFQE)  LOWER BOUND
         LR    RUB,RLENGTH         LENGTH OF DQE
         AR    RUB,RLB             UPPER BOUND
*
*        THE FREEMAIN IS FOR ALL OF THE SPACE DESCRIBED BY THE DQE.
*        AT LEAST 1 PAGE IS BEING FREEMAINED, AND NO FQE WILL BE
*        REQUIRED.  THE PAGE(S) CAN BE PUT BACK INTO AN FBQE IF THE
*        PROPER CONDITIONS EXIST.  THE TESTS BELOW CHECK FOR THOSE
*        CONDITIONS.
*
         ST    RPREVFQE,PREVFQSV   SAVE PREV POINTER
         TM    SPFLAGS,SQA+LSQA    SQA OR LSQA SUBPOOL?          Y02714
         BZ    CHECK4K1            NO                          @ZA04815
         TM    FREESW,NFRSTDQE     CAN SPACE GO BACK TO FBQE   @ZA04815
         BO    CHECK4K1            YES                         @ZA04815
         B     SQABND1             N0                          @ZA04815
         SPACE 2                                                 Y02714
CKNXTFQE L     RWORK,FQEPTR(RFQE)  PICK UP NEXT FQE
         LA    RWORK,0(0,RWORK)    CLEAR REGION INDICATOR        Y02714
         LTR   RWORK,RWORK         IS THERE A NEXT FQE?          Y02714
         BZ    CHECK4K             NO CONTINUE PROCESSING
         TM    FQTYPE(RWORK),REGION  REGION FQE?
         BZ    CHECKCOM            NO, GET AREA + 8 AS UPPER BOUND
         L     WORK,FQAREA(RWORK)  UPPER BOUND OF FQE AREA
         B     COMBCK              GO SEE IF FQE'S CAN BE COMBINED
         SPACE 2                                                 Y02714
CHECKCOM LA    WORK,FQESLNTH(RWORK)  FQE ADDR PLUS 8 IS UPPER BOUND
COMBCK   CR    WORK,RADDR          CAN FQE'S BE COMBINED
         BNE   CHECK4K             NO, CONTINUE PROCESSING
         OI    FREESW,FQEBELOW     INDICATE FQE BELOW FREED AREA Y02714
         L     WORK,FQELNTH(RWORK) LENGTH OF FQE
         A     WORK,FQELNTH(RFQE)  ADD ORIGINAL FQE LENGTH
         ST    WORK,FQELNTH(RFQE)  NEW FQE LENGTH
         MVC   FQEPTR(FOUR,RFQE),FQEPTR(RWORK)  DEQUEUE FQE
         TM    FQTYPE(RFQE),REGION REGION FQE?
         BZ    CHECK4K             NO, CONTINUE PROCESSING
         LR    WORK,RPREVFQE       SAVE PREV POINTER
         LR    RIN1,RWORK          FQE ADDR
         BAL   RCOMRET1,FMAINC     FREE FQE                    @Z30ENWD
         LR    RPREVFQE,WORK       RESTORE PREV FQE POINTER
         SPACE 5                                                 Y02714
*
*        FMCOMMON - DETERMINE (SEPARATELY FOR REGION AND CSA
*        STORAGE OR FOR SQA AND LSQA STORAGE) WHETHER OR NOT
*        ONE OR MORE COMPLETE PAGES OF STORAGE HAVE BECOME FREE
*
         SPACE 2                                                 Y02714
CHECK4K  STM   RPREVFQE,RFQE,PREVFQSV  SAVE PREV AND FQE POINTER
         TM    FQTYPE(RFQE),REGION REGION FQE?
         BZ    SQABNDRY            NO, SQA OR LSQA               Y02714
         L     RUB,FQAREA(RFQE)    FQE AREA EQUALS UPPER BOUND   Y02714
CHECK4K0 LR    RLB,RUB             TO OBTAIN LOWER BOUND         Y02714
         S     RLB,FQELNTH(RFQE)   SUBTRACT LENGTH TO GET RLB    Y02714
CHECK4K1 LA    RWORK,C4095         4K MINUS 1                    Y02714
         LR    WORK,RUB            UPPER BOUND                   Y02714
         OR    WORK,RWORK          WORK NOW CONTAINS THE UPPER
         XR    WORK,RWORK           BOUND OF THE FREE AREA ROUNDED DOWN
         LR    RWORK2,RLB          LOWER BOUND
         AR    RWORK2,RWORK        ADD 4K - 1
         OR    RWORK2,RWORK        RWORK2 NOW CONTAINS THE LOWER
         XR    RWORK2,RWORK         BOUND OF THE FREE AREA ROUNDED UP
         LR    RSIZE,WORK          UPPER BOUND
         SR    RSIZE,RWORK2        DIFFERENCE OF TWO ROUNDED AREAS
         BNP   FMLEAVE             IF NEGATIVE OR ZERO NO 4K BLOCKS TO
*                                  BE RELEASED
         ST    RLENGTH,RQSTSIZE    SAVE RQSTD SIZE FOR AXX-2   @ZA27672
         B     RSTRCDQE            GO RESTRUCTURE DQE            Y02714
         SPACE 2                                                 Y02714
SQABNDRY LA    RUB,FQESLNTH(RFQE)  END OF FREE AREA (FUB)        Y02714
         TM    FREESW,NFRSTDQE     IS THIS FIRST DQE             Y02714
         BO    CHECK4K0            NO, DON'T KEEP PAGE WITH FQE  Y02714
         LR    RLB,RUB             START WITH FUB AND            Y02714
         S     RLB,FQELNTH(RFQE)    SUBTRACT LENGTH TO GET FLB   Y02714
SQABND1  LA    RWORK,C4095         4K MINUS 1                    Y02714
         LR    WORK,RAUB           GET AREA UPPER BOUNDARY       Y02714
         AR    WORK,RWORK          AUB + 4095                    Y02714
         OR    WORK,RWORK          GET AREA UPPER BOUND ROUNDED  Y02714
         XR    WORK,RWORK           UP TO PAGE BOUNDARY (RUB)    Y02714
         CR    WORK,RUB            COMPARE RUB TO FUB            Y02714
         BL    SQABND2             RUB < FUB, LEAVE RUB AS IS    Y02714
*                                  KEEP PAGE WITH FQE            Y02714
         S     WORK,PAGE           GO DOWN ONE PAGE              Y02714
SQABND2  LR    RWORK2,RADDR        GET AREA LOWER BOUNDARY       Y02714
         TM    FREESW,FQEBELOW     WAS FQE BELOW AREA?           Y02714
         BZ    SQABND3             NO                            Y02714
         LA    RIN15,FQESLNTH      LENGTH OF FQE                 Y02714
         SR    RWORK2,RIN15        INCLUDE FQE IN AREA           Y02714
SQABND3  OR    RWORK2,RWORK        GET AREA LOWER BOUND ROUNDED  Y02714
         XR    RWORK2,RWORK         DOWN TO PAGE BOUNDARY (RLB)  Y02714
         CR    RWORK2,RLB          IS RLB < FLB?                 Y02714
         BNL   SQABND4             NO, LEAVE AS IS               Y02714
         A     RWORK2,PAGE         YES, GO UP ONE PAGE           Y02714
SQABND4  LR    RSIZE,WORK          UPPER BOUND                   Y02714
         SR    RSIZE,RWORK2        DIFFERENCE OF ROUNDED BOUNDS  Y02714
         BNP   FMLEAVE             NO BLOCKS TO RELEASE          Y02714
         B     TSTSQA              KEEP ALL OF FIRST DQE         Y02714
         SPACE 5                                                 Y02714
*
*        FMCOMMON - RESTRUCTURE DQE'S AND THEIR FQE'S TO ACCOUNT
*        FOR AREA JUST FREED
*
         SPACE 2                                                 Y02714
SPREL    EQU   *                   SUBPOOL FREEMAIN ENTRY        Y02714
RSTRCDQE ST    RWORK2,SVRLB        SAVE RLB AND                  Y02714
         ST    RSIZE,SVSIZE         SIZE FOR LATER               Y02714
         L     RDQE,DQESAVE        RESTORE DQE REG
         L     RPREVDQE,DQESAVE+C4 RESTORE PREV DQE REG          Y02714
         L     RLENGTH,DQELNTH(RDQE)  PICK UP LENGTH
         CR    RLENGTH,RSIZE       WHOLE DQE AREA BEING FREED?
         BNE   FPARTDQE            NO, FREEING SOME PART OF DQE
         MVC   DQEPTR(C4,RPREVDQE),DQEPTR(RDQE)  REMOVE DQE FROM Y02714
*                                  CHAIN
         L     RFQE,DQFQEPTR(RDQE) FQE
         LTR   RFQE,RFQE           FQE EXIST
         BZ    FREEDQE             NO, FREE DQE
         TM    FQTYPE(RFQE),REGION REGION FQE?                   Y02714
         BZ    FREEDQE             NO, FREE DQE                  Y02714
         LR    RIN1,RFQE           FQE ADDR
         BAL   RCOMRET1,FMAINC     FREE FQE                    @Z30ENWD
FREEDQE  LR    RIN1,RDQE           DQE ADDR
         BAL   RCOMRET1,FMAINC     FREE DQE                    @Z30ENWD
         B     RSTRLBSZ            GO RELEASE PAGES              Y02714
         SPACE 2                                                 Y02714
FPARTDQE A     RLENGTH,DQEBLKAD(RDQE)  UPPER BOUND OF DQE
         CR    RLENGTH,WORK        FREEING UPPER END OF DQE
         BNE   DQELOWMD            NO FREEING BOTTOM OR MIDDLE
         L     RWORK,DQELNTH(RDQE) LENGTH OF DQE
         SR    RWORK,RSIZE         SUBTRACT AMOUNT FREED
         ST    RWORK,DQELNTH(RDQE) NEW SIZE OF DQE
         L     RFQE,FQESAVE        RESTORE FQE REG
         L     RLENGTH,FQELNTH(RFQE)  LENGTH OF FQE
         LR    RWORK,WORK          UPPER BOUND OF AREA           Y02714
         SR    RWORK,RLENGTH       LOWER BOUND OF AREA           Y02714
         CR    RWORK2,RWORK        COMPLETE FQE AREA FREED?      Y02714
         BNZ   ADJREMAN            NO, GO ADJUST FQE
         MVC   DQFQEPTR+1(C3,RDQE),FQEPTR+1(RFQE)  REMOVE FQE FROM
*                                  CHAIN BY POINTING DQE TO NEXT FQE
COMFQEFR TM    FQTYPE(RFQE),REGION REGION FQE?                   Y02714
         BZ    RSTRLBSZ            NO, DON'T FREE IT             Y02714
         LR    RIN1,RFQE           FQE ADDR
         BAL   RCOMRET1,FMAINC     FREE FQE                    @Z30ENWD
         B     RSTRLBSZ            GO RELEASE PAGES              Y02714
         SPACE 2                                                 Y02714
ADJREMAN TM    FQTYPE(RFQE),REGION REGION FQE?                   Y02714
         BZ    CRNEWFQE            NO, CREATE NEW FQE            Y02714
         ST    RWORK2,FQAREA(RFQE) NEW START ADDR OF FQE         Y02714
         L     RLENGTH,FQELNTH(RFQE)  FQE LENGTH
         SR    RLENGTH,RSIZE       SIZE OF FREED AREA
         ST    RLENGTH,FQELNTH(RFQE)  NEW FQE LENGTH
         B     RSTRLBSZ            GO RELEASE PAGES              Y02714
         SPACE 2                                                 Y02714
CRNEWFQE LA    RWORK,FQESLNTH      GET FQE LENGTH                Y02714
         SR    RWORK2,RWORK        NEW FQE ADDRESS               Y02714
         L     RWORK,FQEPTR(RFQE)  GET OLD FORWARD POINTER       Y02714
         ST    RWORK,FQEPTR(RWORK2)  PUT IN NEW FQE              Y02714
         ST    RWORK2,DQFQEPTR(RDQE)  POINT DQE TO NEW FQE       Y02714
         L     RLENGTH,FQELNTH(RFQE)  GET LENGTH IN OLD FQE      Y02714
         SR    RLENGTH,RSIZE       LESS SIZE OF FREED AREA       Y02714
         ST    RLENGTH,FQELNTH(RWORK2)  NEW LENGTH IN NEW FQE    Y02714
         B     RSTRLBSZ            GO RELEASE PAGES              Y02714
         SPACE 2                                                 Y02714
DQELOWMD C     RWORK2,DQEBLKAD(RDQE)  LOW BOUND OF DQE BEING FREED?
         BNE   DQEMIDFR            NO, FREEING MIDDLE
         ST    WORK,DQEBLKAD(RDQE) NEW DQE START ADDR
         L     RLENGTH,DQELNTH(RDQE)  ORIGINAL LENGTH
         SR    RLENGTH,RSIZE       SUBTRACT AMOUNT FREED
         ST    RLENGTH,DQELNTH(RDQE)  NEW LENGTH OF DQE
         L     RFQE,FQESAVE        RESTORE FQE REG
         TM    FQTYPE(RFQE),REGION REGION FQE?                   Y02714
         BZ    NOTREGFQ            NO, PROCESS ACCORDINGLY       Y02714
         C     WORK,FQAREA(RFQE)   COMPLETE FQE AREA BEING FREED?
         BE    FREFQE              YES, FREE FQE
GETNEWLN L     RLENGTH,FQELNTH(RFQE)  LENGTH OF FQE ENCOMPASSING Y02714
*                                  BLOCKS FREED
         SR    RLENGTH,RSIZE       NEW LENGTH = LENGTH - 4K BLCKS FREED
         ST    RLENGTH,FQELNTH(RFQE)  NEW LENGTH IN FQE
         B     RSTRLBSZ            GO RELEASE PAGES              Y02714
         SPACE 2                                                 Y02714
NOTREGFQ LA    RWORK,FQESLNTH(0,RFQE)  FQE AREA POINTER          Y02714
         CR    WORK,RWORK          COMPLETE FQE AREA BEING FREED Y02714
         BE    FREFQE              YES, FQE NOT NEEDED           Y02714
         B     GETNEWLN            NO, UPDATE FQE LENGTH         Y02714
         SPACE 2                                                 Y02714
FREFQE   L     RPREVFQE,PREVFQSV   RESTORE PREVIOUS FQE REG
         XC    FQEPTR+1(C3,RPREVFQE),FQEPTR+1(RPREVFQE)  ZERO PREVIOUS
*                                  NEXT POINTER AS IT IS NOW LAST
         B     COMFQEFR            FREE FQE
         SPACE 2                                                 Y02714
DQEMIDFR TM    SPFLAGS,SQA+LSQA    L/SQA FQE?                    Y02714
         BZ    DQEMIDF1            NO, GET FINAL DQE             Y02714
         LA    RNEWDQE,TEMPDQE     YES, USE TEMPORARY DQE TO     Y02714
*                                  AVOID CHANGING FQE'S          Y02714
         XC    DQFQEPTR(FOUR,RNEWDQE),DQFQEPTR(RNEWDQE) NO FQE'S Y02714
         B     DQEMIDF2             NOW; CONTINUE                Y02714
         SPACE 2                                                 Y02714
DQEMIDF1 ICM   RIN1,MASK1,LDACBSP  GET SPID FOR DQE            @Z30ENWD
         BAL   RRETURN,GETMAINC    OBTAIN DQE                  @Z30ENWD
DQEMIDF2 MVC   DQEPTR(FOUR,RNEWDQE),DQEPTR(RDQE)  MOVE DQENXT    Y02714
*                                  FROM OLD TO NEW DQE
         ST    RNEWDQE,DQEPTR(RDQE)  POINT OLD DQE TO NEW DQE
         ST    WORK,DQEBLKAD(RNEWDQE)  START ADDRESS OF NEW DQE
         SR    RLENGTH,WORK        TO OBTAIN LENGTH OF NEW DQE (RLENGTH
*                                  CONTAINED UPPER BOUND OF OLD DQE)
         ST    RLENGTH,DQELNTH(RNEWDQE)  PLACE LENGTH IN NEW DQE
         L     RWORK,DQEBLKAD(RDQE)  ADDR OF OLD DQE
         LR    RLENGTH,RWORK2      UPPER BOUND OF OLD DQE AFTER FREE
         SR    RLENGTH,RWORK       TO OBTAIN NEW LENGTH OF OLD DQE
         ST    RLENGTH,DQELNTH(RDQE)  PLACE NEW LENGTH IN OLD DQE
         L     RADDR,DQFQEPTR(RDQE)  BEGINNING OF FQE QUEUE OF OLD DQE
         L     RFQE,FQESAVE        RESTORE FQE REG
         TM    FQTYPE(RFQE),REGION REGION FQE?                   Y02714
         BO    GETFQEPT            YES, GET FQE POINTERS         Y02714
         LA    RWORK,FQESLNTH(0,RFQE)  TOP OF AREA DESCRIBED     Y02714
*                                  BY FQE                        Y02714
         LA    RADDR,FQESLNTH(0,RADDR)  TOP OF FIRST FQE         Y02714
         B     ANYTOP              GO DO COMPARE                 Y02714
         SPACE 2                                                 Y02714
GETFQEPT L     RWORK,FQAREA(RFQE)  TOP OF AREA DESCRIBED BY FQE  Y02714
         L     RADDR,FQAREA(RADDR) NOW HAVE TOP OF AREA DESCRIBED BY
*                                  FIRST FQE OFF QUEUE
ANYTOP   CR    RADDR,RWORK         COMPARE TWO AREAS             Y02714
         BH    MVFQEPTR            THE BRANCH WILL BE TAKEN IF PART
*                                  OF THE OLD FQE QUEUE DESCRIBES OLD
*                                  FREE AREAS THAT ARE NOW WITHIN
*                                  THE AREA DESCRIBED BY THE NEW DQE
****     XC    DQFQEPTR(FOUR,RNEWDQE),DQFQEPTR(RNEWDQE)  NO FQE'S
*                                  IN AREA NEW DQE DESCRIBES. THIS
*                                  INSTRUCTION IS NOT NEEDED AS
*                                  GETMAINB ZEROED OUT THE NEW DQE
         B     UPPERCK             GO TO CHECK FOR A REMAINDER ABOVE
*                                  THE AREA BEING FREED
         SPACE 2                                                 Y02714
MVFQEPTR MVC   DQFQEPTR(FOUR,RNEWDQE),DQFQEPTR(RDQE)  NEW DQE NOW HAS
*                                  OLD DQE FQE PTR
UPPERCK  SR    RWORK,WORK          IS THERE A REMAINDER OF FREE AREA
*                                  ABOVE THE 4K BLOCKS FREED
         BZ    NOUPPER             NO ADJUST QUEUE
         TM    FQTYPE(RFQE),REGION REGION FQE?                   Y02714
         BZ    NONRGFQE            NO, UPDATE ONLY REQUIRED      Y02714
         LR    RLENGTH,RNEWDQE     SAVE NEW DQE PTR
         ICM   RIN1,MASK1,LDACBSP  GET SPID FOR FQE              Y02714
         BAL   RRETURN,GETMAINC    GET FQE                     @Z30ENWD
         LR    RIN15,RIN1          NEW FQE
         LR    RNEWDQE,RLENGTH     RESTORE NEW DQE REG
         MVC   FQAREA(FOUR,RIN15),FQAREA(RFQE)  ADDR OF FQE DESCRIBING
*                                  AREA ABOVE 4K BLOCKS FREED.
         MVI   FQTYPE(RIN15),FQERGNFL  INDICATE REGION FQE
SETNEWLN ST    RWORK,FQELNTH(RIN15)  LENGTH IN NEW FQE           Y02714
         L     RWORK4,PREVFQSV     PREVIOUS FQE                  Y02714
         CR    RWORK4,RDQE         PREVIOUS FQE THE DQE          Y02714
         BNE   PREVISFQ            NO UPDATE FQE CHAIN
         ST    RIN15,DQFQEPTR(RNEWDQE)  THIS IS FIRST AND ONLY FQE
*                                  FOR NEW DQE
         B     LOWERCK             GO CHECK FOR REMAINDER BELOW
         SPACE 2                                                 Y02714
NONRGFQE LR    RIN15,RFQE          NEW FQE = OLD FQE             Y02714
         LA    RADDR,FQESLNTH      GET NON-REGION FQE SIZE       Y02714
         SR    RFQE,RADDR          SAVE OLD FQE IN SPACE BELOW   Y02714
*                                  NEW FQE                       Y02714
         MVC   0(FQESLNTH,RFQE),0(RIN15)  SAVE OLD FQE CONTENTS  Y02714
         AR    RADDR,RIN15         TOP OF OLD FQE FOR LATER      Y02714
         XC    FQEPTR(FOUR,RIN15),FQEPTR(RIN15)  THIS IS LAST    Y02714
*                                  FQE ON NEW DQE                Y02714
         B     SETNEWLN            GO UPDATE LENGTH              Y02714
         SPACE 2                                                 Y02714
PREVISFQ STCM  RIN15,MASK,FQEPTR+1(RWORK4)  MAKE NEW FQE NEXT OF Y02714
*                                  PREVIOUS                      Y02714
         B     LOWERCK             GO CHECK FOR REMAINDER BELOW
         SPACE 2                                                 Y02714
NOUPPER  L     RADDR,PREVFQSV      PREVIOUS FQE
         XC    FQEPTR+1(C3,RADDR),FQEPTR+1(RADDR)  ZERO NEXT IN
*                                  PREVIOUS AS IT IS NOW LAST
         TM    SPFLAGS,SQA+LSQA    L/SQA FQE?                    Y02714
         BZ    LOWERCK1            NO                            Y02714
         LA    RADDR,FQESLNTH(0,RFQE)  TOP OF L/SQA FQE AREA     Y02714
         B     LOWERCK2            CONTINUE                      Y02714
         SPACE 2                                                 Y02714
LOWERCK  TM    SPFLAGS,SQA+LSQA    L/SQA FQE?                    Y02714
         BNZ   LOWERCK2            YES, RADDR ALREADY SET        Y02714
LOWERCK1 L     RADDR,FQAREA(RFQE)  TOP OF FQE AREA               Y02714
LOWERCK2 S     RADDR,FQELNTH(RFQE) BOT. OF AREA DESCRIBED BY FQE Y02714
         LR    RLENGTH,RWORK2      BOTTOM OF FREED 4K BLOCKS
         SR    RLENGTH,RADDR       IS THERE A REMAINDER
         BNZ   CRFQELOW            YES ADJUST OLD FQE TO DESCRIBE IT
         MVC   DQFQEPTR+1(C3,RDQE),FQEPTR+1(RFQE)  IF NO REMAINDER
*                                  THEN FQE NEXT OF THE FQE DESCRIBING
*                                  THE AREA TO BE FREED IS THE FIRST
*                                  FQE OF THE OLD DQE
         TM    SPFLAGS,SQA+LSQA    L/SQA FQE?                    Y02714
         BNZ   MOVEDQE             YES, GET PERMANENT DQE        Y02714
         B     COMFQEFR            FREE OLD FQE
         SPACE 2                                                 Y02714
CRFQELOW TM    FQTYPE(RFQE),REGION REGION FQE?                   Y02714
         BO    MODFYFQE            YES, MODIFY OLD FQE           Y02714
         LA    RWORK,FQESLNTH      GET FQE LENGTH                Y02714
         SR    RWORK2,RWORK        NEW FQE ADDRESS               Y02714
         L     RWORK,FQEPTR(RFQE)  NEXT LOWER FQE                Y02714
         ST    RWORK,FQEPTR(RWORK2)  PUT IN NEW FQE              Y02714
         LR    RFQE,RWORK2         MAKE NEW, CURRENT             Y02714
         B     FINISHFQ            FINISH FQE                    Y02714
         SPACE 2                                                 Y02714
MODFYFQE ST    RWORK2,FQAREA(RFQE) START ADDR                    Y02714
FINISHFQ ST    RLENGTH,FQELNTH(RFQE)  NEW LENGTH                 Y02714
         ST    RFQE,DQFQEPTR(RDQE) MAKE THIS FIRST FQE OF OLD    Y02714
*                                  DQE
         TM    SPFLAGS,SQA+LSQA    L/SQA FQE?                    Y02714
         BZ    RSTRLBSZ            NO, GO RELEASE PAGES          Y02714
MOVEDQE  ICM   RIN1,MASK1,LDACBSP  GET SPID                    @Z30ENWD
         BAL   RRETURN,GETMAINC    OBTAIN DQE                  @Z30ENWD
         MVC   0(DQESIZE,RNEWDQE),TEMPDQE  MOVE DQE              Y02714
         ST    RNEWDQE,DQEPTR(0,RDQE)  POINT OLD DQE TO NEW DQE  Y02714
         SPACE 2                                                 Y02714
RSTRLBSZ L     RWORK2,SVRLB        RESTORE RLB AND               Y02714
         L     RSIZE,SVSIZE         SIZE TO BE RELEASED          Y02714
         TM    SPFLAGS,SQA+LSQA    SQA OR LSQA REQUEST?          Y02714
         BZ    FREE4KR             NO, REGION OR CSA REQUEST     Y02714
         SPACE 5                                                 Y02714
*
*        FMCOMMON - RELEASE SQA AND LSQA PAGES AND RETURN THEM
*        TO PROPER FBQE.  IN THIS CASE, SQA INCLUDES THOSE CSA @ZA20951
*        SUBPOOLS THAT ARE FIXED (IE. 227, 228, 239).          @ZA20951
*
         SPACE 2                                                 Y02714
TSTSQA   TM    SPFLAGS,SQA+CSA     SQA (SP245) REQUEST?        @ZA20951
         BC    NOTMIXED,TSTNIP4K   NO, IT IS LSQA OR FIXED CSA @ZA20951
         LR    RIN0,RSIZE          GET SIZE IN REG 0 FOR SRM     Y02714
         BAL   RCOMRET1,SRM        TELL SRM, SQA FREED           Y02714
TSTNIP4K L     RCVT,CVTPTR         GET CVT POINTER               Y02714
         USING CVT,RCVT                                          Y02714
         L     RGDA,CVTGDA         GET GDA POINTER               Y02714
         DROP  RCVT                                              Y02714
         USING GDA,RGDA                                          Y02714
         TM    GDAFLAGS,NIPFOURK   IS NIP IN PROCESS             Y02714
         DROP  RGDA                                              Y02714
         BO    CKFSTDQE            IF NIP IS IN PROCESS RSM      Y02714
*                                  CANNOT BE ENTERED TO RELEASE
*                                  FIXED PAGES AS NIP IS MANAGING
*                                  PAGES OF SQA AT THIS TIME
         BAL   RAREG,RLSEPAGE      GO RELEASE PAGES              Y02714
         L     RSIZE,GFRESAVE+C60  RESTORE SIZE                  Y02714
CKFSTDQE TM    FREESW,NFRSTDQE     IS "NOT FIRST DQE" SET?       Y02714
         BZ    FMLEAVE             NO, KEEP FIRST DQE            Y02714
         STM   RIN0,RIN15,MSAVE    SAVE ALL REGISTERS            Y02714
RETPGFBQ TM    SPFLAGS,CSA         CSA SUBPOOL?                  Y02714
         BZ    RETPPFBQ            NO                            Y02714
         LR    RIN0,RSIZE          GET SIZE IN REG 0 FOR SRM     Y02714
         BAL   RCOMRET1,SRM        TELL SRM, CSA FREED           Y02714
RETPPFBQ LR    RADDRM,RWORK2       START ADDRESS                 Y02714
         TM    SPFLAGS,SQA+CSA     SQA OR CSA SUBPOOL?           Y02714
         BZ    RETFBQ0             NO                            Y02714
         L     RCVT,CVTPTR         GET CVT POINTER               Y02714
         USING CVT,RCVT                                          Y02714
         L     RGDA,CVTGDA         GET GDA POINTER               Y02714
         DROP  RCVT                                              Y02714
         USING GDA,RGDA                                          Y02714
         L     RPQEM,CSAPQEP       GET CSA PQE PTR               Y02714
         DROP  RGDA                                              Y02714
         B     RETFBQ2             CONTINUE                      Y02714
         SPACE 2                                                 Y02714
RETFBQ0  TM    SPFLAGS,LSQA+SWA+AUK  HIGH END SUBPOOL?           Y02714
         BNZ   RETFBQ1             YES, USE A. S. PQE            Y02714
         L     RTCB1,LDATCB        GET TCB POINTER               Y02714
         L     RPQEM,TCBPQE        DUMMY PQE MINUS 8             Y02714
         L     RPQEM,PQEFPQE(RPQEM)  REGION PQE                  Y02714
         B     RETFBQ2             CONTINUE                      Y02714
         SPACE 2                                                 Y02714
RETFBQ1  L     RPQEM,ASDPQE        GET A. S. PQE PTR             Y02714
RETFBQ2  LR    RSIZEM,RSIZE        SIZE TO RETURN TO FBQE        Y02714
         BAL   RRETURN,MRELEASE    RETURN PAGES(S) TO FBQE       Y02714
         TM    FREESW,NEEDRLSE     FURTHER PAGE RELEASE NEEDED?  Y02714
         BO    RSETNDRL            YES                           Y02714
RETFBQ3  LM    RIN0,RIN15,MSAVE    RESTORE ALL REGISTERS         Y02714
         B     FSMFINTR            GO RECORD FOR SMF             Y02714
         SPACE 5
*
*        SUBROUTINE TO INTERFACE WITH THE RSM RELEASE PAGE ROUTINE,
*         RSM MAY RETURN PAGETABLE SPACE TO BE FREED.          @Z30ENWD
*
         SPACE 2                                                 Y02714
RLSEPAGE STM   RIN0,RIN15,GFRESAVE SAVE REGS ACROSS RELEASE CALL Y02714
         BAL   RCOMRET1,GTSALLOC   GET SALLOC IF NOT ALREADY HELDY02751
         BAL   RCOMRET1,TRNONPVT   TURN ON GETMAIN INHIBITED FLAG
         LR    RIN0,RWORK2         LOWER BOUND                   Y02714
         LR    RIN1,WORK           UPPER BOUND                   Y02714
         L     R2,PSAAOLD          CURRENT ASCB ADDRESS          Y02714
         LR    RWORK3,RPVT         SAVE PVT ADDRESS              Y02714
         USING PVT,RPVT                                          Y02714
         L     RIN15,PVTPRELV      GET RELEASE ENTRY ADDRESS     Y02714
         DROP  RPVT                                              Y02714
         BALR  RRETURN,RIN15       RELEASE PAGES
         USING PVT,RWORK3                                        Y02714
         NI    PVTFLAG1,ALL-PVTBGMS  TURN OFF GETMAIN INHIB. FLAGY02714
         DROP  RWORK3                                            Y02714
         LTR   RIN1,R2             ANY STORAGE TO BE FREEMAINED  Y02714
         BZ    RLSEPG2             NO, CONTINUE                  Y02714
         L     RIN0,FMPGTBSP       GET SPID AND LENGTH           Y02714
         SPACE 2                                                 Y02714
         LA    RWORK,FMAREAS       POINT TO START OF CHAIN OF    Y02714
*                                  ANY EXISTING AREAS TO BE FREEDY02714
QFMAINB1 L     RWORK2,C0(0,RWORK)  GET NEXT AREA POINTER       @Z30ENWD
         LTR   RWORK2,RWORK2       IS THERE ONE                @Z30ENWD
         BZ    QFMAINB2            NO, CHAIN IN HERE           @Z30ENWD
         LR    RWORK,RWORK2        YES, SET AS PREVIOUS        @Z30ENWD
         B     QFMAINB1            GO CHECK NEXT               @Z30ENWD
         SPACE 2                                               @Z30ENWD
QFMAINB2 ST    RIN1,C0(0,RWORK)    ADD AREA TO QUEUE           @Z30ENWD
RLSEPG1  ST    RIN0,C4(0,RIN1)     SPID & LENGTH IN WORD 2     @Z30ENWD
         L     RIN1,C0(0,RIN1)     GET NEXT AREA IN QUEUE      @Z30ENWD
         LTR   RIN1,RIN1           IS THERE ONE?                 Y02714
         BNZ   RLSEPG1             YES, DO NEXT                @Z30ENWD
         SPACE 2                                                 Y02714
RLSEPG2  LM    RIN0,R2,GFRESAVE    RESTORE REGS, PRESERVE R.C.   Y02714
         LM    RLDA,RRETURN,GFRESAVE+C16   AND REG 3             Y02714
         BR    RAREG               RETURN TO MAIN LINE
         SPACE 5                                                 Y02714
*
*        FMCOMMON - RELEASE REGION AND CSA PAGES (UNLESS V=R) AND
*        RETURN THEM TO PROPER FBQE
*
         SPACE 2                                                 Y02714
FREE4KR  TM    SPFLAGS,CSA+SWA+AUK CSA, SWA, OR AUK SUBPOOL?     Y02714
         BNZ   RELSEPGS            YES, GO RELEASE PAGES         Y02714
         L     RTCB1,LDATCB        GET TCB POINTER               Y02714
         TM    TCBFLGS6,TCBRV      V=R TASK?                     Y02714
         BZ    RELSEPGS            NO, GO RELEASE PAGES          Y02714
         STM   RIN0,RIN15,MSAVE    SAVE REGS                     Y02714
         LR    RADDRM,RWORK2       START ADDRESS OF AREA TO BE RELEASED
         L     RPQEM,TCBPQE        DUMMY PQE MINUS 8
         L     RPQEM,PQEFPQE(RPQEM)  PQE
         LR    RSIZEM,RSIZE        SIZE OF AREA TO BE RELEASED
         BAL   RRETURN,MRELEASE    RELEASE 4K BLOCKS             Y02714
         LM    RIN0,RIN15,MSAVE    RESTORE REGS
         LA    RWORK,C8            KEY ZERO FETCH PROTECT MASK   Y02714
         LR    RLENGTH,RWORK2      FIRST BLOCK IN WHICH KEYS ARE TO
*                                  BE SET
SETAGAIN SSK   RWORK,RLENGTH       SET KEYS
         LA    RLENGTH,C2K(RLENGTH) INCREMENT BY 2K
         CR    RLENGTH,WORK        END OF AREA TO SET KEYS
         BNE   SETAGAIN            NO SET NEXT 2K
         B     FSMFINTR            DON'T UPDATE PAGE TABLES FOR V = R
         SPACE 2                                                 Y02714
RELSEPGS STM   RIN0,RIN15,MSAVE    SAVE ALL REGISTERS            Y02714
RELSEPG1 BAL   RAREG,RLSEPAGE      RELEASE PAGES                 Y02714
         LTR   RRETCODE,RRETCODE   IS RETURN CODE ZERO?          Y02714
         BZ    RESTSIZE            YES, RETURN PG(S) TO FBQE     Y02714
         LA    RAREG,C8            GET AN 8                      Y02753
         CR    RAREG,RRETCODE      IS RETURN CODE 8?             Y02753
         BNE   RCDPRERR            NO, RECORD PG REL. ERROR      Y02753
         TM    SPFLAGS,CSA         CSA SUBPOOL?                  Y02714
         BO    NDRLSFLG            YES, DON'T ABEND              Y02714
         OI    FLAGS,DEFERR10      SET DEFERRED ERROR 10         Y02714
NDRLSFLG OI    FREESW,NEEDRLSE     SET FURTHER PG RELEASE NEEDED Y02714
         LR    RWORK3,RIN3         SAVE DEFERRED PAGE ADDRESS    Y02714
         LR    WORK,RIN3           NEW RFUB                      Y02714
         LR    RSIZE,WORK          GET NEW SIZE (RFUB - RFLB) TO Y02714
         SR    RSIZE,RWORK2         RETURN TO FBQE               Y02714
         BP    RETPGFBQ            RETURN PAGES TO FBQE, IF ANY  Y02714
RSETNDRL NI    FREESW,ALL-NEEDRLSE RESET RELEASE NEEDED FLAG     Y02714
         LR    RWORK2,RWORK3       NEW RFLB = PAGE ABOVE THAT IN Y02714
         A     RWORK2,PAGE          DEFERRED RELEASE STATUS      Y02714
         L     WORK,MSAVE+C48      RESTORE ORIGINAL RFUB         Y02714
         LR    RSIZE,WORK          GET NEW SIZE (RFUB - RFLB)    Y02714
         SR    RSIZE,RWORK2         TO RELEASE                   Y02714
         ST    RWORK2,MSAVE+C28    SAVE UPDATED ADDRESS AND      Y02714
         ST    RSIZE,MSAVE+C60      SIZE FOR CURRGNTP UPDATE     Y02714
         BP    RELSEPG1            RELEASE REST OF PAGES         Y02714
         B     RETFBQ3             CONTINUE PROCESSING           Y02714
         SPACE 2                                                 Y02714
RCDPRERR MVI   FRRBRNDX,PGRLSRC4   SET RETURN CODE 4 FOR FRR     Y02753
         ABEND X'C0D',DUMP,,SYSTEM GO TO FRR TO RECORD ERROR     Y02753
RESTSIZE L     RSIZE,GFRESAVE+C60  RESTORE SIZE                  Y02714
         B     RETPGFBQ            GO RETURN STORAGE TO FBQE     Y02753
         SPACE 5                                                 Y02753
*
*        FMCOMMON - DO ANY NECESSARY SMF INTERFACING
*
         SPACE 2                                                 Y02714
FSMFINTR TM    SPFLAGS,SQA+CSA+LSQA+SWA+AUK  SKIP SMF?           Y02714
         BNZ   FMLEAVE             YES                           Y02714
         LR    RBLKAD,RWORK2       START ADDRESS IN 14 - SIZE IS IN 15
         L     RDQE,AFMSMF         GET FMSMF ENTRY POINT
         BALR  RCOMRET1,RDQE       GO TO SMF INTERFACE ROUTINE
         SPACE 5                                                 Y02714
*
*        FMCOMMON - EXIT AND ERROR PROCESSING
*
         SPACE 2                                                 Y02714
FMLEAVE  TM    FLAGS,DEFERR10      IS DEFERRED ERROR 10 SET?     Y02714
         BZ    FMLEAVE1            NO, GO RETURN                 Y02714
         LA    RERROR,ERRA         SET ERROR CODE 10           @Z30ENWD
         MVI   MSGLEN,H4C          REASON CODE 2 - LENGTH 12     Y02714
         L     RLENGTH,RQSTSIZE    RESTORE ORIGINAL SIZE       @ZA27672
         B     GERROR3C            GO SAVE TCB ADDRESS           Y02714
         SPACE 2                                                 Y02714
FMLEAVE1 L     RCOMRET1,FMSAVE     RESTORE RETURN REG
         BR    RCOMRET1            RETURN TO FMCOM
         SPACE 2
GERROR3A OI    FREESW,DECR         INDICATE ADDRESS DECREMENTED  Y02714
GERROR3B OI    FREESW,INCR         INDICATE LENGTH INCREMENTED
GERROR3C MVC   ABNDATA,LDATCB      SAVE TCB ADDRESS FOR VAR DATA Y02714
         B     GERROR              GO TO HANDLE ERROR          @Z30ENWD
         SPACE 2
GERROR9A MVI   MSGLEN,C12          REASON CODE 0 - LENGTH 12     Y02714
         LA    RERROR,ERR9         SET APPROPRIATE ERROR       @Z30ENWD
         CLI   SVCBYTE,SV5         SVC 5?                        Y02714
         BE    GERROR3B            YES - MSGLEN OK
         MVI   MSGLEN,C8           CHANGE LENGTH TO 8
         B     GERROR3B            SET UP REMAINING PARAMETERS
         SPACE 2
ERROR13A MVI   MSGLEN,C12          REASON CODE 0 - MSG LENGTH 12 Y02714
         LA    RERROR,ERRD         SET APPROPRIATE ERROR       @Z30ENWD
         B     GERROR3A            SET UP REMAINING PARAMETERS
         EJECT
***********************************************************************
*                                                                     *
*     MRELEASE GIVES BACK 4K BLOCKS TO THE QUEUE OF FREE STORAGE FOR  *
*     A REGION. IT ALSO GIVES BACK PARTITIONS TO THE QUEUE OF         *
*     UNASSIGNED SYSTEM STORAGE.                                      *
*                                                                     *
*        ENTRY: MRELEASE                                              *
*                                                                     *
*              INPUT                                                  *
*                     RSIZEM = SIZE OF AREA TO BE RELEASED            *
*                     RPQEM  = PQE FROM WHICH FBQE CHAIN IS ORIGINED  *
*                     RADDRM = ADDRESS OF AREA TO BE RELEASED         *
*                     RRETURN = RETURN REG                            *
*                     LDACBSP = SPID OF CONTROL BLOCKS (SQA OR LSQA)  *
*              OUTPUT                                                 *
*                     ON RETURN - STORAGE RELEASED                    *
*              WORK                                                   *
*                     RIN0, RIN1, RPREFBQE, RCOMRET1, RFBQNXT, RBLOCK *
*                                                                     *
***********************************************************************
         SPACE 2                                                 Y02714
MRELEASE LA    RBLOCK,DUMFBQE      INITIALIZE DUMMY FBQE         Y02714
         ST    RSIZEM,SIZE(RBLOCK) INITIALIZE SIZE
         ST    RADDRM,FBQAREA(RBLOCK) INITIALIZE AREA
         LR    RPREFBQE,RPQEM      PQE IS PREVIOUS FBQE
         L     RFBQNXT,FWDPTR(RPREFBQE)  FOWARD FBQE IS NEXT FBQE
         OI    GMFMSW,GM           INDICATE GETMAIN TO BE DONE
         CR    RFBQNXT,RPQEM       FBQENXT EQUAL PQE - NO FBQE'S
         BNE   MFBQEXST            NO SOME FBQE'S EXIST
         LR    RFBQNXT,RPQEM       FBQENXT FOR NEW FBQE WILL BE PQE
MFOUND   ST    RBLOCK,FWDPTR(RPREFBQE)  RBLOCK IS NEXT TO PREVIOUS
         ST    RPREFBQE,BCKPTR(RBLOCK)  PREV FBQE IS BACK OF RBLOCK
         ST    RFBQNXT,FWDPTR(RBLOCK)  FBQENXT IS FORWARD TO RBLOCK
         ST    RBLOCK,BCKPTR(RFBQNXT)  RBLOCK IS PREV TO NEXT
         B     MCKCOMB             GO TO CHECK FOR COMBINATION
         SPACE 2                                                 Y02714
MFBQEXST CLC   FBQAREA(FOUR,RBLOCK),FBQAREA(RFBQNXT)  DOES RBLOCK
*                                  DESCRIBE AN AREA LOWER IN
*                                  ADDRESS THAN FBQE NEXT?
         BL    MFOUND              YES, PLACE FBQE IN QUEUE
         LR    RPREFBQE,RFBQNXT    OLD NEXT IS NOW PREVIOUS
         L     RFBQNXT,FWDPTR(RFBQNXT) NEW NEXT
         CR    RFBQNXT,RPQEM       NEXT EQUAL PQE?
         BE    MFOUND              YES, ADD RBLOCK INTO QUEUE
         B     MFBQEXST            NO - CHECK NEXT FBQE FOR PROPER SLOT
         SPACE 2                                                 Y02714
MCKCOMB  CR    RPREFBQE,RPQEM      PREVIOUS FBQE EQUAL PQE?
         ST    RPREFBQE,MPTRS      SAVE POINTERS FOR LATER QUEUING
         ST    RFBQNXT,MPTRS+4     SAVE NEXT ALSO
         BE    MSKIP1              YES, CANNOT BE COMBINED
         BAL   RCOMRET1,COMBINE    GO SEE IF PREV CAN BE COMBINED
MSKIP1   LR    RPREFBQE,RBLOCK     A COMBINATION WAS NOT DONE SO
*                                  RBLOCK IS NOW THE PREVIOUS BLOCK
*                                  WHEN THE NEXT COMBINATION CHECK
*                                  IS MADE. IF, HOWEVER, A
*                                  COMBINATION HAS BEEN DONE, RBLOCK
*                                  HAS BEEN COMBINED WITH THE PREV FBQE
*                                  SO THAT RPREFBQE REMAINS THE SAME.
*                                  THIS RETURN IS PLUS 2 TO ELIMINATE
*                                  THIS INSTRUCTION.
         CR    RFBQNXT,RPQEM       NEXT THE PQE
         BE    MSKIP2              YES CAN'T COMBINE WITH A PQE
         OI    GMFMSW,FIRSTSW      TURN ON FIRST TIME THRU SWITCH
         LR    RBLOCK,RFBQNXT      RBLOCK IS PREV - NEXT IS RBLOCK
         L     RFBQNXT,FWDPTR(RFBQNXT) NEW NEXT
         BAL   RCOMRET1,COMBINE    GO TO SEE IF NEXT CAN BE COMBINED
         NOPR  RCOMRET1            NO MORE COMBINATION TO BE DONE
MSKIP2   L     RPREFBQE,MPTRS      RESTORE POINTERS
         L     RFBQNXT,MPTRS+4     RESTORE NEXT POINTER
         TM    GMFMSW,GM           GETMAIN TO BE DONE
         BZ    MCKFM               NO CHECK FOR FREEMAIN
         ICM   RIN1,MASK1,LDACBSP  INSERT PROPER SUBPOOL ID      Y02714
         LR    RCOMRET1,RRETURN    SAVE RETURN REG
         BAL   RRETURN,GETMAINC    GET FBQE                    @Z30ENWD
         LR    RRETURN,RCOMRET1    RESTORE RETURN REG
         MVC   FWDPTR(FBQESIZE,RIN1),DUMFBQE  MOVE INFO IN FROM DUMMY
         L     RPREFBQE,BCKPTR(RIN1)  PREV AND NEXT FBQE         Y02714
         L     RFBQNXT,FWDPTR(RIN1)   MAY HAVE BEEN CHANGED      Y02714
         ST    RIN1,FWDPTR(RPREFBQE)  NEW IS FORWARD OF PREVIOUS
         ST    RIN1,BCKPTR(RFBQNXT)  NEW IS BACKWARD OF NEXT
MCLRSW   MVI   GMFMSW,OFF          CLEAR SWITCHES
         BR    RRETURN             RETURN
         SPACE 2                                                 Y02714
MCKFM    TM    GMFMSW,FM           FREEMAIN TO BE DONE
         BZ    MCLRSW              NO CLEAR SWITCHES AND RETURN
         LR    RIN1,RPREFBQE       FREE PREVIOUS FBQE
         BAL   RCOMRET1,FMAINC     FREE THE FBQE               @Z30ENWD
         B     MCLRSW              CLEAR SWITCHES AND RETURN
         SPACE 4                                                 Y02714
COMBINE  L     RUB,FBQAREA(RPREFBQE) START OF AREA
         A     RUB,SIZE(RPREFBQE)  ADD SIZE TO GET UPPER BOUND
         C     RUB,FBQAREA(RBLOCK) CAN COMBINATION BE DONE
         BNER  RCOMRET1            NO CANNOT COMBINE             Y02714
         TM    GMFMSW,FIRSTSW      FIRST SW ON
         BZ    MNFSTSW             NO FIRST TIME THRU
         MVC   FBQAREA(FOUR,RBLOCK),FBQAREA(RPREFBQE) NEW START ADDRESS
*                                  FOR RBLOCK
         L     RIN1,SIZE(RPREFBQE) SIZE OF PREVIOUS
         A     RIN1,SIZE(RBLOCK)   SIZE OF RBLOCK
         ST    RIN1,SIZE(RBLOCK)   PUT NEW SIZE IN
         L     RIN1,BCKPTR(RPREFBQE) PREVIOUS PREVIOUS
         ST    RBLOCK,FWDPTR(RIN1) RBLOCK IS NOW FORWARD OF PREV
*                                  PREVIOUS
         ST    RIN1,BCKPTR(RBLOCK) PREV PREVIOUS IS NOW BACK
*                                  OF RBLOCK
         TM    GMFMSW,GM           GETMAIN SWITCH ON
         BZ    MTURNFM             NO TURN ON FREEMAIN SW
MGMOFF   NI    GMFMSW,ALL-GM       TURN OFF GM SW                Y02714
         B     TWO(RCOMRET1)       INDICATE COMBINATION DONE
         SPACE 2                                                 Y02714
MTURNFM  OI    GMFMSW,FM           INDICATE FREEMAIN NEEDED
         B     TWO(RCOMRET1)       INDICATE COMBINATION DONE
         SPACE 2                                                 Y02714
MNFSTSW  L     RIN1,SIZE(RPREFBQE) PICK UP SIZE OF PREVIOUS
         A     RIN1,SIZE(RBLOCK)   SIZE TO BE COMBINED
         ST    RIN1,SIZE(RPREFBQE) COMBINE SIZES
         ST    RFBQNXT,FWDPTR(RPREFBQE)  SET NEXT AS FWD TO PREV Y02714
         ST    RPREFBQE,BCKPTR(RFBQNXT)  SET PREV AS BACK TO NEXT
         B     MGMOFF              TURN OFF GM SWITCH AND RETURN
         EJECT
***********************************************************************
*                                                                     *
*     THE SPFRMAIN ROUTINE HANDLES THE FREEING OF AN ENTIRE SUBPOOL.  *
*     PROCESSING IS DONE FOR BOTH REGION REQUESTS AND FOR SUBPOOLS    *
*     253 (LSQA) AND 236 AND 237 (SWA).                               *
*                                                                     *
*         INPUT: RSPID   = SUBPOOL ID                                 *
*                RIN0    = 0 TO INDICATE SUBPOOL FREEMAIN (LENGTH)    *
*                RIN1    = 0 TO INDICATE SUBPOOL FREEMAIN (ADDRESS)   *
*                                                                     *
***********************************************************************
         SPACE 2                                                 Y02714
SPFRMAIN OI    FREESW,FREESWM      INDICATE FREEMAIN
         STC   RSPID,SAVSPID       SAVE SPID FOR FREEMAIN ERROR  Y02714
         LTR   RIN0,RIN0           LENGTH EQUAL ZERO             Y02714
         BNZ   GERROR3D            NO, ERROR
         STC   RSPID,SPID          TEST AREA
         CLI   SPID,C128           SUBPOOL < 128?                Y02714
         BL    SOK                 YES                           Y02714
         CLI   SPID,C253           SUBPOOL > 253?                Y02714
         BH    GERROR4A            YES, ERROR                    Y02714
         CLI   SPID,C250           SUBPOOL >= 250?               Y02714
         BNL   SOK                 YES                           Y02714
         CLI   SPID,C237           SUBPOOL = 237?                Y02714
         BE    SOK                 YES                           Y02714
         CLI   SPID,C236           SUBPOOL = 236?                Y02714
         BE    SOK                 YES                           Y02714
         CLI   SPID,C229           SUBPOOL = 229?                Y02714
         BE    SOK                 YES                           Y02714
         CLI   SPID,C230           SUBPOOL = 230?                Y02714
         BE    SOK                 YES                           Y02714
         CLI   SPID,C233           SUBPOOL = 233?                Y02714
         BNE   GERROR4A            NO, ERROR                     Y02714
SOK      OI    MODE,SUBFRMN        INDICATE SUBPOOL FREEMAIN
         BAL   RCOMRET1,CSPCHK     GO TO OBTAIN SPQE
         LTR   RSPQE,RSPQE         SUBPOOL FOUND
         BZ    FRETRN2             NO RETURN                     Y02714
         TM    MODE,KEY0           SUPERVISOR KEY                Y02714
         BZ    SLSQACK             YES, CHECK FOR AQE REQUEST
         CLI   SPID,C0             SUBPOOL ZERO REQUEST          Y02714
         BZ    GERROR4A            YES, ABEND
SLSQACK  CLI   SPID,C253           253 REQUEST
         BE    SAQE                YES, FREE SUBPOOL 253
         LR    RPRSDQE,RSPQE       SPQE IS FIRST PREV DQE PTR
         ST    RPRSDQE,DQESAVE+4   SAVE PREVIOUS POINTER FOR FREEMAIN
SPFRET   L     RDQE,DQEPTR(RPRSDQE) PICK UP FIRST OR NEXT DQE
         LTR   RDQE,RDQE           END OF QUEUE
         BZ    FRETRN2             YES, RETURN                 @Z30ENWD
*
*        FREE EACH FQE
*
         L     RFQE,DQFQEPTR(RDQE) FIRST FQE
SCKNXTFQ LA    RFQE,0(0,RFQE)      CLEAR REGION INDICATOR        Y02714
         LTR   RFQE,RFQE           END OF QUEUE                  Y02714
         BZ    SFQEND              YES, SET UP TO FREE DQE
         LR    RIN1,RFQE           FQE TO FREE
         L     RFQE,FQEPTR(RFQE)   NEXT FQE PTR
         BAL   RCOMRET1,FMAINC     FREE FQE                    @Z30ENWD
         B     SCKNXTFQ            CHECK NEXT FQE
*
*        FREE SPACE DESCRIBED BY DQE
*
SFQEND   LA    RCOMRET1,SPFRET     RETURN TO PROCESS NEXT DQE
         ST    RCOMRET1,FMSAVE
         XC    DQFQEPTR(FOUR,RDQE),DQFQEPTR(RDQE) ZERO FQE PTR
         ST    RDQE,DQESAVE        FOR FMCOMMON
         L     RSIZE,DQELNTH(RDQE) SIZE TO BE RELEASED
         L     RWORK2,DQEBLKAD(RDQE) START ADDR
         LA    WORK,0(RSIZE,RWORK2)  UPPER BOUND                 Y02714
         B     SPREL               FREE DQE AND AREA, RETURN WILL BE BY
*                                  FMLEAVE TO SPFRET
*
*        SUBPOOL FREEMAIN IS FOR SUBPOOL 253
*
SAQE     LA    RCOMRET1,SP253RET   RETURN REG
         ST    RCOMRET1,FMSAVE
SP253RET L     RTCB1,LDATCB        GET TCB ADDRESS               Y02714
         L     RAQE,TCBAQE         PICK UP AQE QUEUE             Y02714
         LTR   RAQE,RAQE           END OF QUEUE
         BZ    FRETRN2             YES, RETURN                 @Z30ENWD
         L     RCVT,CVTPTR         GET CVT POINTER               Y02714
         USING CVT,RCVT                                          Y02714
         L     RGDA,CVTGDA         GET GDA POINTER               Y02714
         DROP  RCVT                                              Y02714
         USING GDA,RGDA                                          Y02714
         L     RWORK,PASTRT        GET PRIVATE AREA START        Y02714
         A     RWORK,PASIZE        ADD LENGTH, GIVES BOTTOM CSA  Y02714
         CR    RAQE,RWORK          IS AQE IN SQA?                Y02714
         BL    SNOTSQA             NO, CONTINUE PROCESSING
         L     RSPQE,SQASPQEP      SQA SPQE                      Y02714
         DROP  RGDA                                              Y02714
         MVI   SPFLAGS,SQA         INDICATE SQA REQUEST          Y02714
         B     SSQA                CONTINUE PROCESSING
         SPACE 2                                                 Y02714
SNOTSQA  L     RSPQE,LSQAPTR       LSQA SPQE                     Y02714
         MVI   SPFLAGS,LSQA        INDICATE LSQA REQUEST         Y02714
SSQA     L     RLENGTH,AQELEN(RAQE)  LENGTH                      Y02714
         LR    RADDR,RAQE          ADDRESS TO BE FREED IS AQE ADDR
         L     RDQE,SPDQEPTR(RSPQE)  FIRST DQE ADDRESS
         LR    RPREVDQE,RSPQE      SPQE IS PREVIOUS DQE          Y02714
         LA    RAUB,0(RLENGTH,RADDR)  UPPER BOUND OF AREA        Y02714
SPFRDQAD L     RIN0,DQEBLKAD(0,RDQE)  START ADDRESS IN DQE       Y02714
         CR    RADDR,RIN0          IS AREA AT OR ABOVE THIS      Y02714
         BL    SPFRNXDQ            NO, TRY NEXT DQE              Y02714
         A     RIN0,DQELNTH(0,RDQE)  TOP OF AREA IN DQE          Y02714
         CR    RAUB,RIN0           IS AREA AT OR BELOW THIS      Y02714
         BNH   SPFRDQFN            YES, CORRECT DQE              Y02714
SPFRNXDQ LR    RPREVDQE,RDQE       DQE IS NOW PREVIOUS           Y02714
         L     RDQE,DQEPTR(0,RDQE) POINT TO NEXT DQE             Y02714
         OI    FREESW,NFRSTDQE     INDICATE THIS ISN'T FIRST DQE Y02714
         LTR   RDQE,RDQE           IS THERE ONE                  Y02714
         BNZ   SPFRDQAD            YES, CHECK IT                 Y02714
         LA    RIN0,SPFMERR        INDICATE ERROR TYPE           Y02753
         L     RBASE1,BASE101      SET BASE FOR CSECT01        @Y30APYF
         USING G4KSRCH,RBASE1                                  @Y30APYF
         B     STBRNDX             GO TO FRR, QUEUES MESSED UP   Y02753
         USING BASE1,RBASE1        REG ALREADY SET             @Y30APYF
         SPACE 2
SPFRDQFN ST    RDQE,DQESAVE        SAVE DQE FOR FMCOMMON         Y02714
         ST    RPREVDQE,DQESAVE+C4 SAVE PREVIOUS DQE ALSO        Y02714
         B     SP253FR             GO FREE AREA DESCRIBED BY     Y02714
*                                  AQE, RETURN IS BY FMLEAVE
*                                  TO SP253RET
         SPACE 2                                                 Y02714
GERROR3D MVI   MSGLEN,H8C          REASON CODE 4 - LENGTH 12
         SR    RADDR,RADDR         ZERO ADDRESS POINTER
         MVC   ABNDATA,LDATCB      SAVE TCB ADDRESS FOR VAR DATA Y02714
         LA    RERROR,ERR3         0 LENGTH NOT SPECIFIED FOR  @Z30ENWD
         B     GERROR              SUBPOOL FREEMAIN            @Z30ENWD
         SPACE 2
GERROR4A MVI   MSGLEN,C8           REASON CODE 0 - LENGTH 8
         SR    RADDR,RADDR         0 ADDRESS POINTER
         LA    RERROR,ERR4         INVALID SP FREEMAIN REQUEST @Z30ENWD
         B     GERROR                                          @Z30ENWD
         EJECT
***********************************************************************
*                                                                     *
*  THE QELOCATE ROUTINE FINDS AN FQE WHOSE ADDRESS IS EQUAL TO OR     *
*  LESS THAN THE HIGH BOUND OF THE AREA BEING FREED. IT ALSO VALIDITY *
*  CHECKS THE REQUEST TO SEE THAT THE AREA BEING FREED DOES NOT       *
*  OVERLAP AN AREA WHICH IS PRESENTLY FREE.                           *
*                                                                     *
*        INPUT:  RADDR    - ADDRESS OF AREA BEING FREED               *
*                RLENGTH  - LENGTH OF AREA BEING FREED                *
*                RAUB     - UPPER BOUND OF AREA BEING FREED           *
*                RDQE     - DQE INCLUDING AREA TO BE FREED            *
*                RCOMRET1 - RETURN ADDRESS                            *
*                                                                     *
*        OUTPUT: RFQE     - FQE WHOSE ADDR IS EQUAL TO OR LESS THAN   *
*                           HIGH BOUND OF AREA BEING FREED            *
*                RPREVFQE - FQE PREV TO RFQE                          *
*                RUB      - UPPER BOUND OF FQE                        *
*                RLB      - LOWER BOUND OF FQE                        *
*                                                                     *
*        WORK:   RWORK, RWORK4, RIN15                                 *
*                                                                     *
*  THE FIRST SECTION OF THIS ROUTINE HAS BEEN OPTIMIZED FOR SPEED.    *
*  DO NOT MAKE CHANGES WITHOUT CONSIDERING THEIR EFFECT UPON          *
*  EXECUTION TIME.                                                    *
*                                                                     *
*              REGISTER USAGE                                         *
*                                                                     *
*  REG   NAME              CONTAINS                                   *
*                                                                     *
*   0    RUB       UPPER BOUND OF FQE                                 *
*   1    RPREVFQE  PREVIOUS FQE                                       *
*   2    RFQE      CURRENT FQE                                        *
*   3    RDQE      DQE INCLUDING AREA TO BE FREED (ON ENTRY)          *
*        RLB       LOWER BOUND OF FQE (DURING LOOP)                   *
*   4    RLDA      LDA ADDRESS                                        *
*   5    RERROR    ERROR CODE                                         *
*   6    RWORK     NEXT FQE (PRELOADED)                               *
*   7    RAUB      UPPER BOUND OF AREA BEING FREED                    *
*   8    RBASE1    FIRST BASE REGISTER                                *
*   9    RCOMRET1  RETURN ADDRESS                                     *
*  10    RLENGTH   LENGTH OF AREA BEING FREED                         *
*  11    RADDR     ADDRESS OF AREA BEING FREED                        *
*  12              NOT USED                                           *
*  13    RBASE2    SECOND BASE REGISTER                               *
*  14    RWORK4    MASK TO CLEAR HIGH BIT OF FQE                      *
*  15    RIN15     LOOP BRANCH ADDRESS                                *
*                                                                     *
***********************************************************************
         SPACE 2                                                 Y02714
         CNOP  4,8                 PLACE LOOPS ON DOUBLE WORD    Y02714
QELOCATE LR    RPREVFQE,RDQE       INITIALIZE PREV FQE IS DQE
         L     RFQE,FQEPTR(RPREVFQE)  GET FIRST FQE
         SLR   RLB,RLB             IN CASE FQE DOESN'T EXIST     Y02714
         LA    RFQE,0(0,RFQE)      CLEAR REGION INDICATOR        Y02714
         LTR   RFQE,RFQE           FQE EXIST?                    Y02714
         BZR   RCOMRET1            NO, RETURN                    Y02714
         TM    FQTYPE(RFQE),REGION REGION FQE?
         BO    QREG                YES                           Y02714
         LA    RIN15,QNREG         LOOP BRANCH ADDRESS           Y02714
QNREG    L     RWORK,FQEPTR(0,RFQE)  PRELOAD NEXT FQE ADDRESS    Y02714
         LA    RUB,FQESLNTH(0,RFQE)  UPPER BOUND OF FQE          Y02714
         LR    RLB,RUB             GET LOWER BOUND FROM UPPER    Y02714
         SL    RLB,FQELNTH(0,RFQE)  BOUND MINUS LENGTH           Y02714
         CLR   RLB,RAUB            LOWER BOUND OF FQE LESS THAN  Y02714
*                                  UPPER BOUND OF AREA?
         BL    QCKOVLP             YES, RIGHT FQE, CHECK FOR OVERLAP
         BE    QTEMP               CHECK FOR OVERLAP OF NEXT FQE
         LR    RPREVFQE,RFQE       MAKE CURRENT FQE PREVIOUS
         LTR   RFQE,RWORK          GET NEXT FQE                  Y02714
         BNZR  RIN15               IF THERE IS ONE CHECK IT      Y02714
         BR    RCOMRET1            NONE, RETURN                  Y02714
         SPACE 2                                                 Y02714
QREG     L     RWORK4,CLRHIBIT     MASK TO CLEAR FQE HIGH BIT    Y02714
         LA    RIN15,QREG1         LOOP BRANCH ADDRESS           Y02714
QREG1    L     RUB,FQAREA(0,RFQE)  UPPER BOUND OF FQE            Y02714
         L     RWORK,FQEPTR(0,RFQE)  PRELOAD NEXT FQE ADDRESS    Y02714
         LR    RLB,RUB             GET LOWER BOUND FROM UPPER    Y02714
         SL    RLB,FQELNTH(0,RFQE)  BOUND MINUS LENGTH           Y02714
         CLR   RLB,RAUB            LOWER BOUND OF FQE LESS THAN  Y02714
*                                  UPPER BOUND OF AREA?          Y02714
         BL    QCKOVLP             YES, RIGHT FQE, CHECK OVERLAP Y02714
         BE    QTEMP               CHECK FOR OVERLAP OF NEXT FQE Y02714
         LR    RPREVFQE,RFQE       MAKE CURRENT FQE PREVIOUS     Y02714
         LR    RFQE,RWORK          GET NEXT FQE                  Y02714
         NR    RFQE,RWORK4         IS THERE ONE                  Y02714
         BNZR  RIN15               YES, CHECK IT                 Y02714
         BR    RCOMRET1            NO, RETURN                    Y02714
         SPACE 2                                                 Y02714
*        END OF OPTIMIZED SECTION
         SPACE 2                                                 Y02714
QCKOVLP  CR    RUB,RADDR           FQE UPPER BOUND GREATER THAN RADDR
         BH    ERROR10A            YES, AREA TO BE FREED OVERLAPS AN
*                                  AREA WHICH IS PRESENTLY FREE
         BR    RCOMRET1            RETURN FQE FOUND
         SPACE 2                                                 Y02714
QTEMP    L     RWORK,FQEPTR(RFQE)  NEXT FQE
         LA    RWORK,0(0,RWORK)    CLEAR REGION INDICATOR        Y02714
         LTR   RWORK,RWORK         ANOTHER FQE EXIST?            Y02714
         BZR   RCOMRET1            NO - CAN'T OVERLAP - RETURN   Y02714
         TM    FQTYPE(RWORK),REGION  REGION FQE
         BZ    QNOTREG1            NO
         L     RWORK,FQAREA(RWORK) UPPER BOUND OF NEXT FQE
         B     QUPPRCK             CHECK FOR OVERLAP
         SPACE 2                                                 Y02714
QNOTREG1 LA    RWORK,FQESLNTH(RWORK)  UPPER BOUND OF NEXT FQE    Y02714
QUPPRCK  CR    RWORK,RADDR         OVERLAP?
         BH    ERROR10C            YES, GO TO GERROR
         BR    RCOMRET1            NO RETURN FQE FOUND
         SPACE 2
ERROR10A CR    RUB,RAUB            IS FQE HIGH ADDRESS GREATER THAN
*                                  UPPER BOUND OF AREA BEING FREED?
         BL    ERROR10B            NO
         LR    RWORK,RAUB          GET HIGH AREA ADDRESS        YA00829
         CR    RADDR,RLB           IS AREA LOW ADDRESS GREATER  YA00829
*                                  THAN FQE LOWER BOUND?        YA00829
         BH    ERROR10C            YES                          YA00829
ERROR10E SR    RWORK,RLB           CALCULATE OVERLAP            YA00829
         B     ERROR10D            STORE VARIABLE DATA
         SPACE 2
ERROR10B LR    RWORK,RUB           SET UP HIGH ADDRESS
         CR    RLB,RADDR           IS FQE LOWER BOUND GREATER   YA00829
*                                  THAN AREA ADDRESS?           YA00829
         BH    ERROR10E            YES                          YA00829
ERROR10C SR    RWORK,RADDR         GET AMOUNT OF OVERLAP
ERROR10D ST    RWORK,ABNDATA       SET UP VARIABLE DATA FIELD
         MVI   MSGLEN,H2C          REASON CODE 1 - LENGTH 12
         LA    RERROR,ERRA         AREA BEING FREED OVERLAPS   @Z30ENWD
         B     GERROR               FREE AREA                  @Z30ENWD
         EJECT
***********************************************************************
*                                                                     *
*       THIS ROUTINE PROCESSES THE CONDITIONS OF OUT OF REGION,       *
*       L/SQA VIRTUAL SPACE AND OUT OF REAL L/SQA SPACE.              *
*                                                                     *
*       ENTRY POINTS: GNOTSATA - FROM GETMAIN COMMON OR GETMAINB      *
*                                WHEN OUT OF VIRTUAL L/SQA            *
*                     GNOTSATB - FROM GETMAIN COMMON WHEN OUT OF      *
*                                VIRTUAL REGION SPACE                 *
*                     GNOTSATC - FROM GFRECORE WHEN A REAL PAGE       *
*                                CANNOT BE OBTAINED                   *
*                                                                     *
*       REGISTERS UPON INPUT THAT ARE USED                            *
*                                                                     *
*                     RLENGTH  - ACTUAL LENGTH REQUIRED               *
*                     RSPID    - SPID                                 *
*                     RSPQE    - SPQE POINTER                         *
*                     RPREVDQE - LAST DQE ON CHAIN                    *
*                     RIN15    - LARGEST SIZE AVAILABLE               *
*                                                                     *
***********************************************************************
         SPACE 2                                                 Y02714
GNOTSATA LR    RIN0,RIN15          LARGEST SIZE FROM GFRECORE    Y02714
         TM    CELLFLGS,INCELL     IS GMC THE CALLER?          @Z30ENWD
         BZ    GREQCEL             NO, GET A CELL              @Z30ENWD
         SR    RCELLP,RCELLP       YES, ZERO THE CELL POINTER  @Z30ENWD
         B     ADDSIZE             GO TO ADD CELL LENGTH       @Z30ENWD
         SPACE
GREQCEL  TM    SPFLAGS,LSQA        LSQA REQUEST?               @Z30ENWD
         BO    SETLCL              YES                         @Z30ENWD
         ICM   RIN1,MASK1,SP245B   NO, SQA REQUEST             @Z30ENWD
         B     GETCNOW             GET A CELL                  @Z30ENWD
SETLCL   ICM   RIN1,MASK1,SP255B   LSQA                        @Z30ENWD
GETCNOW  OI    CELLFLGS,GNOTCALL   GNOT IS CALLING GME         @Z30ENWD
         LR    RCELLP,RPREVDQE      SAVE RPREVDQE              @Z30ENYF
         BAL   RRETURN,GETMAINC    GET A CELL                  @Z30ENWD
         NI    CELLFLGS,ALL-GNOTCALL  RESET GNOT CALLING FLAG  @Z30ENWD
         SR    SIZEREG,SIZEREG     PRESET                      @Z30ENWD
         XR    RCELLP,RPREVDQE        SWITCH REGISTERS         @Z30ENYF
         XR    RPREVDQE,RCELLP                                 @Z30ENYF
         XR    RCELLP,RPREVDQE                                 @Z30ENYF
         LTR   RCELLP,RCELLP       DID I GET ONE?              @Z30ENWD
         BNZ   DONTADD             YES                         @Z30ENWD
         SPACE
ADDSIZE  LA    SIZEREG,DQESIZE     GET SIZE OF DQE             @Z30ENWD
DONTADD  LA    RAREG,C4095         GET PAGE SIZE - 1           @Z30ENWD
         AR    SIZEREG,RAREG       SUM OF THESE                  Y02714
         AR    SIZEREG,RLENGTH     TOTAL LENGTH + 4095           Y02714
         TM    SPFLAGS,LSQA        LSQA REQUEST?                 Y02714
         BZ    ROUNDUP             NO                            Y02714
         TM    FLAGS,GETMB         GETMAINB REQUEST?             Y02714
         BO    ROUNDUP             YES                           Y02714
         LA    RIN15,PGTABLEN      LENGTH OF PAGE TABLES         Y02714
         LR    RIN3,RLENGTH        LENGTH OF REQUEST             Y02714
         SRL   RIN3,C16            NUMBER OF WHOLE SEGMENTS      Y02714
         LA    RIN3,C1(0,RIN3)     TOTAL NUMBER OF SEGMENTS      Y02714
         MR    RRETURN,RIN3        LENGTH NEEDED FOR PG. TABLES  Y02714
         AR    SIZEREG,RIN15       ADD TO TOTAL LENGTH           Y02714
         TM    SPFLAGS,REQ4K       SP=253/254 AND LENGTH=4K?   @ZA30210
         BNO   ROUNDUP             NO, SIZEREG IS O. K.        @ZA30210
         A     SIZEREG,PAGE        GET AN EXTRA PAGE           @ZA30210
ROUNDUP  OR    SIZEREG,RAREG       RESET 12 LOW ORDER            Y02714
         XR    SIZEREG,RAREG        BITS; NOW HAVE # OF 4K PAGES Y02714
         MVC   OBFRSAVE(C64),FBQSAVE  SAVE REGISTER SAVE AREA    Y02714
         MVC   GNOTSAVE(C64),G4KSAVE  SAVE REGISTER SAVE AREA    Y02714
         MVC   CODE2,CODE1         SAVE OPTION CODE              Y02714
         MVI   CODE1,C0            ZERO OPTION CODE - G4KSRCH    Y02714
*                                  CHECKS CODE1 FOR PG. BOUNDARY Y02714
*                                  AND VARIABLE                  Y02714
         MVI   OUTSW,VIRTUAL       PRESET - OUT OF VIRTUAL       Y02714
         BAL   RRETURN,G4KSRCH1    SEARCH FBQES FOR STORAGE    @Y30APYF
         B     GNTSATA1            FOUND                         Y02714
         MVC   FBQSAVE(C64),OBFRSAVE  NONE AVAILABLE, RESTORE    Y02714
         MVC   G4KSAVE(C64),GNOTSAVE   REGISTER SAVE AREAS       Y02714
         MVC   CODE1,CODE2         RESTORE OPTION CODE           Y02714
         CR    RIN0,RIN15          FQE SIZE LARGEST?             Y02714
         BH    GNOTSTC1            YES, MAX SIZE O. K.         @Z30ENYF
         TM    SPFLAGS,LSQA        LSQA SUBPOOL?                 Y02714
         BZ    GNTSATA0            NO                            Y02714
         TM    FLAGS,GETMB         GETMAINB REQUEST?             Y02714
         BO    GNTSATA0            YES                           Y02714
         LA    RWORK2,PGTABLEN     LENGTH OF PAGE TABLES         Y02714
         LR    RWORK,RIN15         SIZE AVAILABLE                Y02714
         SRL   RWORK,C16           NUMBER OF WHOLE SEGMENTS      Y02714
         LA    RWORK,C1(0,RWORK)   TOTAL NUMBER OF SEGMENTS      Y02714
         MR    RWORK,RWORK         LENGTH NEEDED FOR PG. TABLES  Y02714
         SR    RIN15,RWORK2        MAX LENGTH FOR REQUEST        Y02714
GNTSATA0 LTR   RIN1,RCELLP         DO WE HAVE A CELL?          @Z30ENWD
         BZ    REDUCESZ            NO                          @Z30ENWD
         BAL   RCOMRET1,FMAINC     FREE THE CELL               @Z30ENWD
         B     CKGFREE             CHECK FOR LARGEST           @Z30ENWD
REDUCESZ LA    RWORK,DQESIZE       SIZE OF DQE                 @Z30ENWD
         SR    RIN15,RWORK         REDUCE SIZE AVAILABLE         Y02714
CKGFREE  CR    RIN0,RIN15          GFRECORE HAVE MORE?           Y02714
         BNH   GNOTSTC1            NO, LEAVE AS IS               Y02714
         LR    RIN15,RIN0          YES, SET AS MAX               Y02714
         B     GNOTSTC1            CONTINUE PROCESSING
         SPACE 2                                                 Y02714
GNTSATA1 LTR   RFQE,RCELLP         DID I GET A CELL?           @Z30ENYF
         BNZ   COPYDUMY            YES, INITIALIZE IT          @Z30ENWD
         MVC   NOTSATS1,LDARQSTA   SAVE CURRENT REQUEST STATUS @Z30ENWD
         MVC   LDARQSTA,SETUP      REINIT STATUS FOR DQE REQUEST Y02714
         CLI   LDACBSP,CBSQA       CONTROL BLOCKS IN SQA?        Y02714
         BNE   GNTSATA2            NO, LEAVE AS IS               Y02714
         XI    SPFLAGS,SQA+LSQA    YES, CHANGE TO SQA            Y02714
         L     RCVT,CVTPTR         GET CVT POINTER               Y02714
         USING CVT,RCVT                                          Y02714
         L     RGDA,CVTGDA         GET GDA POINTER               Y02714
         DROP  RCVT                                              Y02714
         USING GDA,RGDA                                          Y02714
         L     RSPQE,SQASPQEP      GET SQA SPQE POINTER (IN CASE Y02714
         DROP  RGDA                  OF SP 239)                  Y02714
GNTSATA2 OI    FLAGS,EXPANSN       INDICATE EXPANS. FOR GNOTSATC Y02714
         LA    RLENGTH,DQESIZE     SET LENGTH TO DQE SIZE        Y02714
         BAL   RCOMRET1,GFRECORE   GET STORAGE FOR DQE           Y02714
         B     GOOF1               STORAGE NOT AVAILABLE         Y02714
         BAL   RCOMRET1,GFQEUPDT   REMOVE STORAGE FROM FQE       Y02714
         MVC   LDARQSTA,NOTSATS1   RESTORE CURRENT REQ STATUS  @Z30ENWD
COPYDUMY MVC   0(DQESIZE,RFQE),DUMYDQE MOVE DQE CONTENTS       @Z30ENWD
         L     RPREVDQE,G4KSAVE+C4 RESTORE PREVIOUS DQE POINTER  Y02714
         ST    RFQE,DQEPTR(0,RPREVDQE) CORRECT DQE POINTER       Y02714
         MVC   FBQSAVE(C64),OBFRSAVE  RESTORE REG SAVE AREA      Y02714
         MVC   G4KSAVE(C64),GNOTSAVE  RESTORE REG SAVE AREA      Y02714
         MVC   CODE1,CODE2         RESTORE OPTION CODE           Y02714
         TM    FLAGS,GETMB         GETMAINB REQUEST?             Y02714
         BO    GNTSATA3            YES                           Y02714
         LM    RIN0,RIN15,GMREPSAV RESTORE REGS FOR RETRY        Y02714
*                                                              @ZA29442
*        SEE IF THE REQUEST WAS CONVERTED FROM LSQA TO SQA.    @ZA29442
*        THIS CAN HAPPEN IF THERE WAS INSUFFICIENT LSQA, THE   @ZA29442
*        REQUEST WAS CONDITIONAL, AND THE REQUESTING TASK WAS  @ZA29442
*        ABENDING.  IF SO, PICK UP THE SQA SPQE POINTER SO     @ZA29442
*        THAT THE CORRECT QUEUES WILL BE SEARCHED.             @ZA29442
*                                                              @ZA29442
         TM    SPFLAGS,CSA+SQA     LOOKING FOR SQA ?           @ZA29442
         BC    NOTMIXED,GMREPEAT   NO, USE SPQE PTR AS IS      @ZA29442
         L     RCVT,CVTPTR         GET CVT POINTER             @ZA29442
         USING CVT,RCVT                                        @ZA29442
         L     RGDA,CVTGDA         GET GDA POINTER             @ZA29442
         DROP  RCVT                                            @ZA29442
         USING GDA,RGDA                                        @ZA29442
         L     RSPQE,SQASPQEP      GET SQA SPQE                @ZA29442
         DROP  RGDA                                            @ZA29442
         B     GMREPEAT            REPEAT REQUEST                Y02714
         SPACE 2                                                 Y02714
GNTSATA3 LM    RAREG,RIN1,SAVEREG2 RESTORE GETMAINB RETRY REGS   Y02714
         B     GMBRETRY            TRY REQUEST AGAIN             Y02714
         SPACE 2                                                 Y02714
GOOF1    MVI   FRRBRNDX,GFREFAIL   GFRECORE FAILED TO FIND SPACE Y02753
         ABEND X'C0D',DUMP,,SYSTEM GO TO FRR TO RECORD           Y02753
         SPACE 2                                                 Y02714
GNOTSATC MVI   OUTSW,REALOUT       INDICATE OUT OF REAL
GNOTSTC1 TM    FLAGS,GETMB         IS IT A GETMAINB REQUEST      Y02714
         BO    NGMBPROC            YES, PROCESS FOR GETMAINB REQUEST
         TM    FLAGS,EXPANSN       SQA OR LSQA EXPANSION?        Y02714
         BO    GOOF1               YES, SHOULD NEVER OCCUR       Y02714
         TM    CODE1,VARBLE        IS IT A VARIABLE REQUEST?
         BO    NVARPROC            YES, PROCESS VARIABLE REQUEST
BRINGTST TM    CODE1,CONDTNL       IS IT A CONDITIONAL REQUEST?
         BZ    CNDTNPRO            NO, TERMINATE REQUEST         Y02714
         TM    SPFLAGS,LSQA        LSQA REQUEST?                 Y02714
         BZ    CNDTNPRO            NO, TERMINATE REQUEST         Y02714
         TM    FLAGS,LDAABGM       ABEND IN PROCESS ?          @ZA29616
         BO    TRYSQA              YES, CONVERT REQUEST TO SQA @ZA29616
         CLI   SAVSPID,C254        MAYBE. IS REQUEST FOR 254 ? @ZA29616
         BE    CNDTNPRO            YES, THERE IS NO ABEND      @ZA29616
         L     RTCB1,LDATCB        GET TCB ADDRESS               Y02714
         TM    TCBFLGS3,TCBABGM    ABEND IN PROCESS?
         BZ    CNDTNPRO            NO, TERMINATE REQUEST
TRYSQA   LM    RIN0,RIN15,GMREPSAV RESTORE REGS FOR RETRY      @ZA29616
         LA    RSPID,C245          GET SQA SPID                  Y02714
         L     RCVT,CVTPTR         GET CVT POINTER               Y02714
         USING CVT,RCVT                                          Y02714
         L     RGDA,CVTGDA         GET GDA POINTER               Y02714
         DROP  RCVT                                              Y02714
         USING GDA,RGDA                                          Y02714
         L     RSPQE,SQASPQEP      GET SQA SPQE                  Y02714
         DROP  RGDA                                              Y02714
         XI    SPFLAGS,LSQA+SQA    RESET LSQA; SET SQA           Y02714
         B     GMREPEAT            REPEAT REQUEST
         SPACE 2                                                 Y02714
NGMBPROC TM    CELLFLGS,INEXPN     WAS EXPANSION THE CALLER    @Z30ENWD
         BZ    TESTYPE             NO                          @Z30ENWD
         LA    REG5,CELLEN         LENGTH OF ONE CELL          @Z30ENWD
         CR    RIN15,REG5          ENOUGH FOR ONE CELL?        @Z30ENWD
         BNL   SETMAXC             YES                         @Z30ENWD
         LM    RAREG,RIN1,SAVEREG2 RESTORE REGS                @Z30ENWD
         SR    RLENGTH,RLENGTH     ZERO LENGTH                 @Z30ENWD
         B     EXPNFMT             RETURN WITH ZERO LENGTH     @Z30ENWD
         SPACE
SETMAXC  LR    RLENGTH,RIN15       SET NEW REQUEST LENGTH      @Z30ENWD
         SRL   RLENGTH,C3          ROUND TO 16 BYTE LENGTH     @Z30ENWD
         SLL   RLENGTH,C3          REPOSITION                  @Z30ENWD
         LM    RAREG,RCOMRET1,SAVEREG2 RESTORE                 @Z30ENWD
         LM    REGB,RIN1,SAVEREG2+C36   REGS FOR RETRY         @Z30ENYF
         B     GMBRETRY            RETRY SMALLER AMOUNT        @Z30ENWD
         SPACE
TESTYPE  TM    SPFLAGS,LSQA        LSQA REQUEST?               @Z30ENWD
         BO    NLSQARTY            YES, PICK UP SQA AND RETRY  @Z30ENWD
WAITPREP L     REGB,ASTERMR        SYSTEM TERM ROUTINE, REAL - @Z30ENWD
*                                  MAY BE BRANCHED TO FROM GMC @Z30ENWD
         TM    OUTSW,VIRTUAL       OUT OF VIRTUAL?               Y02714
         BZR   REGB                NO, OUT OF REAL               Y02751
         L     REGB,ASTERMV        SYSTEM TERM ROUTINE, VIRTUAL  Y02751
         BR    REGB                TERMINATE SYSTEM              Y02751
         SPACE 2                                                 Y02714
NLSQARTY LM    RAREG,RIN1,SAVEREG2 RESTORE REGS FOR RETRY
         LA    RSPID,C245          GET SQA SPID                  Y02714
         XI    SPFLAGS,LSQA+SQA    RESET LSQA; SET SQA           Y02714
         L     RCVT,CVTPTR         GET CVT POINTER               Y02714
         USING CVT,RCVT                                          Y02714
         L     RGDA,CVTGDA         GET GDA POINTER               Y02714
         DROP  RCVT                                              Y02714
         USING GDA,RGDA                                          Y02714
         L     RSPQE,SQASPQEP      GET SQA SPQE                  Y02714
         DROP  RGDA                                              Y02714
         B     GMBRETRY            RETRY REQUEST
         SPACE 2                                                 Y02714
GNOTSATB MVI   OUTSW,VIRTUAL       INDICATE  OUT OF VIRTUAL
         TM    CODE1,VARBLE        VARIABLE REQUEST?
         BO    NVARPROC            YES, PROCESS VARIABLE REQUEST
CNDTNPRO TM    CODE1,LIST          IS IT A LIST ENTRY
         BM    NLISTPRO            YES, PROCESS LIST ENTRY
NFIRST   TM    OUTSW,VIRTUAL       OUT OF REAL?                  Y02714
         LA    RERROR,ERR1         SET ERROR CODE              @Z30ENWD
         BZ    GERROR              YES                         @Z30ENWD
         ST    RIN15,ABNDATA       SAVE LARGEST AVAILABLE FOR VAR DATA
         MVI   MSGLEN,H28          REASON CODE 1 - LENGTH 8      Y02714
         OI    FREESW,INCR         INDICATE LENGTH INCREMENTED
         LA    RERROR,ERR8         OUT OF VIRTUAL              @Z30ENWD
         B     GERROR              HANDLE THE ERROR            @Z30ENWD
         SPACE 2
NVARPROC EQU   *
         L     RLENGTH,MINMAX      GET MINIMUM REQUEST
         LTR   RLENGTH,RLENGTH     NEGATIVE MINIMUM REQUEST?   @ZA16417
         BM    GERROR8A            YES, ERROR                  @ZA16417
         BAL   RCOMRET1,CRNDLNTH   ROUND UP MIN AND ACCOUNT FOR AQE
*                                  IF NEEDED
         CR    RIN15,RLENGTH       WILL AVAILABLE FULFILL MIN?
         BL    NLSQACK             NO REQUEST CAN'T BE SATISFIED
         LR    RLENGTH,RIN15       SET LENGTH TO LARGEST AVAILABLE
         B     RETRYMIN            RETRY REQUEST                 Y02714
         SPACE 2                                                 Y02714
NLSQACK  TM    SPFLAGS,SQA+CSA+LSQA+SWA+AUK PROB. PROG. SUBPOOL? Y02714
         BNZ   BRINGTST            NO, CONTINUE                  Y02714
         L     RWORK,VVREGSZ       GET EXPLICIT V=V REGION SIZE  Y02714
         LTR   RWORK,RWORK         IS ONE GIVEN?                 Y02714
         BZ    NFIRST              NO, TERMINATE REQUEST         Y02714
         TM    FLAGS,VARPASS2      YES, IS THIS THE SECOND PASS? Y02714
         BZ    RETRYMIN            NO, IGNORE REGION AND RETRY   Y02714
         NI    FLAGS,ALL-VARPASS2  RESET FLAG                    Y02714
         B     NFIRST              TERMINATE REQUEST             Y02714
         SPACE 2                                                 Y02714
RETRYMIN OI    FLAGS,VARPASS2      INDICATE SECOND PASS          Y02714
         ST    RLENGTH,GMREPSAV+C40  SAVE NEW LENGTH             Y02714
         LM    RIN0,RIN15,GMREPSAV RESTORE REGS 0-15             Y02714
         LTR   RLENGTH,RLENGTH     ZERO MINIMUM REQUEST?       @ZA16417
         BZ    GCOMM11             YES                         @ZA16417
         B     GMREPEAT            RETRY REQUEST FOR MINIMUM SIZE
         SPACE 2                                                 Y02714
NLISTPRO LA    RWORK,FOUR          WORD SIZE
         C     RWORK,LSTINDEX      IS THIS FIRST ENTRY
         BH    NFIRST              YES
         L     RLENGTH,LENSAVE     BEGINNING OF LENGTH LIST
         A     RLENGTH,LSTINDEX    GET PRESENT ENTRY
         SR    RLENGTH,RWORK       DECREMENT TO PREVIOUS ENTRY
         OI    0(RLENGTH),LAST     MAKE TEMPORARILY LAST         Y02714
         ST    RLENGTH,NOTSATSV    SAVE TEMPORARY END POINTER
         LM    RIN0,RIN15,GMREPSAV RESTORE ORIGINAL REGS  0-15   Y02714
         L     RLENGTH,LENSAVE     POINTER TO BEGINNING OF LIST
         MVC   NOTSATS1,LDARQSTA   SAVE STATUS                   Y02714
         NI    FLAGS,ALL-BRENTRY   INSURE FREEMAIN RETURNS HERE  Y02714
         MVC   GNOTSAVE(FOUR),RETSAVE  SAVE USER RETURN ADDRESS  Y02714
         LA    RRETURN,NLISTPR1    GET LOCAL RETURN ADDRESS      Y02714
         ST    RRETURN,RETSAVE     SAVE FOR FMCOMMON             Y02714
         B     FLISTADV            FREE ALREADY OBTAINED ENTRIES Y02714
         SPACE 2                                                 Y02714
NLISTPR1 MVC   RETSAVE(FOUR),GNOTSAVE  RESTORE USER RETURN ADDR  Y02714
         MVC   LDARQSTA,NOTSATS1   RESTORE STATUS                Y02714
         L     RLENGTH,NOTSATSV    LENGTH POINTER
         NI    0(RLENGTH),ALL-LAST RESET TEMPORARY END OF LIST   Y02714
         B     NFIRST              CONTINUE PROCESSING
         EJECT
***********************************************************************
*
*        GFQEUPDT - REMOVES AREA TO BE ALLOCATED FROM FQE
*
*              INPUT
*                   RFQE     - FQE ADDRESS
*                   RPREVFQE - PREVIOUS FQE ADDRESS
*                   RLENGTH  - LENGTH OF REQUEST
*                   RCOMRET1 - RETURN ADDRESS
*              OUTPUT
*                   RFQE     - ADDRESS OF ALLOCATED AREA
*              WORK REGS
*                   RWORK, RNEWFQE, RIN0, RIN15
*
***********************************************************************
         SPACE 2                                                 Y02714
GFQEUPDT L     RWORK,FQELNTH(RFQE) PICK UP FQE LENGTH
         SR    RWORK,RLENGTH       GET REMAINING STORAGE
         LTR   RWORK,RWORK         ANY REMAINING
         BZ    REMFQE              NO
         TM    FQTYPE(RFQE),REGION REGION FQE                    Y02714
         BZ    MOVEFQE             NO - FQE MUST BE MOVED
         ST    RWORK,FQELNTH(RFQE) PUT NEW LENGTH IN FQE
         L     RWORK,FQAREA(RFQE)  PICK UP AREA ADDRESS
         SR    RWORK,RLENGTH       GET NEW AREA ADDRESS
         ST    RWORK,FQAREA(RFQE)  PLACE ADDRESS IN FQE
AQECHK   TM    SPFLAGS,NEEDAQE     AQE NEEDED?                   Y02714
         BZ    GFQERET             NO
         LA    RFQE,AQESIZE        GET AQE SIZE                  Y02714
         AR    RWORK,RFQE          ACCOUNT FOR AQE AT            Y02714
*                                  BEGINNING OF AREA             Y02714
         SR    RLENGTH,RFQE        DECREMENT LENGTH DUE TO AQE   Y02714
GFQERET  LR    RFQE,RWORK          POINT TO AREA ASSIGNED
         BR    RCOMRET1            RETURN
         SPACE 2
REMFQE   MVC   FQEPTR+1(C3,RPREVFQE),FQEPTR+1(RFQE)  DEQUEUE FQE Y02714
         TM    FQTYPE(RFQE),REGION REGION FQE                    Y02714
         BZ    GETSTRT             NO
         LR    RIN15,RCOMRET1      SAVE RETURN REG
         L     RWORK,FQAREA(RFQE)  GET AREA ADDRESS
         SR    RWORK,RLENGTH       GET BEGINNING ADDRESS
         LR    RIN1,RFQE           GET ADDRESS TO FREE
         BAL   RCOMRET1,FMAINC     FREEMAIN FQE                @Z30ENWD
         LR    RCOMRET1,RIN15      RESTORE RETURN REG
         B     AQECHK              CHECK ON AQE
         SPACE 2
GETSTRT  LR    RWORK,RFQE          GET FQE ADDRESS
         LA    RWORK,FQESLNTH(RWORK)  GET END ADDRESS            Y02714
         SR    RWORK,RLENGTH       GET BEGINNING ADDRESS
         B     AQECHK              CHECK FOR AQE
         SPACE 2
MOVEFQE  LR    RNEWFQE,RFQE        GET ADDRESS
         SR    RNEWFQE,RLENGTH      OF NEW FQE
         ST    RWORK,FQELNTH(RNEWFQE)  PUT NEW LENGTH IN NEW FQE
         L     RWORK,FQEPTR(0,RFQE)  GET OLD FORWARD POINTER     Y02714
         ST    RWORK,FQEPTR(0,RNEWFQE)  PLACE IN NEW FQE         Y02714
         ST    RNEWFQE,FQEPTR(RPREVFQE)  CHAIN PREV FQE TO NEW FQE
         LA    RWORK,FQESLNTH(RNEWFQE)  ADDRESS OF AREA ASSIGNED Y02714
         B     AQECHK
         EJECT
***********************************************************************
*
*  THE GFRECORE ROUTINE SEARCHES THE FQE CHAIN(S) OF A SUBPOOL TO
*  LOCATE AN FQE TO SATISFY A GETMAIN REQUEST, USING A BEST FIT
*  ALGORITHM.  SPECIAL PROCESSING IS DONE TO FIX A PAGE
*  TO BACK UP ALL SATISFIED L/SQA REQUESTS.  L/SQA REQUESTS
*  OF 4K OR LESS ARE NOT SATISFIED ACROSS PAGE BOUNDARIES.
*
*              INPUT
*                   RSPQE    - ADDRESS OF SUBPOOL QUEUE ELEMENT
*                   RLENGTH  - REQUESTED LENGTH
*                   RCOMRET1 - RETURN ADDRESS
*
*              OUTPUT
*                   RPREVDQE - LAST DQE ON CHAIN - STORAGE NOT FOUND
*                   RFQE     - ADDRESS OF CURRENT FQE
*                   RPREVFQE - ADDRESS OF PREVIOUS FQE
*                   RIN15    - LARGEST AREA AVAILABLE - STORAGE
*                              NOT FOUND
*
*
*  THE FIRST SECTION OF THIS ROUTINE HAS BEEN OPTIMIZED FOR SPEED.
*  DO NOT MAKE CHANGES WITHOUT CONSIDERING THEIR EFFECT UPON
*  EXECUTION TIME.
*
*              REGISTER USAGE
*
*  REG   NAME              CONTAINS
*
*   0    RIN0      NEXT DQE (PRELOADED)
*   1    RPREVFQE  PREVIOUS FQE
*   2    RFQE      CURRENT FQE
*   3    RDQE      CURRENT DQE
*   4    RLDA      LDA ADDRESS
*   5    RWORK3    PREVIOUS FQE TO CLOSEST FQE
*   6    RWORK     CLOSEST FQE (IN SIZE)
*   7    RSPQE     SPQE ADDRESS (ON ENTRY)
*        RPRVDQE   PREVIOUS DQE (DURING LOOP)
*   8    RBASE1    FIRST BASE REGISTER
*   9    SEGREG    MASK TO CLEAR HIGH BYTE OF FQE
*  10    RLENGTH   REQUESTED LENGTH
*  11    RFQESIZE  CURRENT FQE SIZE
*  12    WORK      CLOSEST FQE SIZE (LARGER THAN REQUEST)
*  13    RBASE2    SECOND BASE REGISTER
*  14    RWORK4    NEXT FQE (PRELOADED)
*  15    RLGSOFAR  LARGEST AVAILABLE FQE SIZE (LESS THAN REQUEST)
*
***********************************************************************
         SPACE 2                                                 Y02714
         CNOP  2,8                 PLACE LOOPS ON DOUBLE WORD    Y02714
GFRECORE STM   RIN0,RIN15,GFRESAVE SAVE CALLERS REGS             Y02714
         TM    SPFLAGS,SQA+CSA     SALLOC LOCK NEEDED?           Y02751
         BZ    GFRECOR1            NO                            Y02751
         BAL   RCOMRET1,GTSALLOC   GET SALLOC LOCK               Y02751
         SPACE 2
GFRECOR1 SLR   RLGSOFAR,RLGSOFAR   CLEAR LARGEST SIZE FOUND      Y02714
GFRECOR2 L     RDQE,SPDQEAD(0,RSPQE)  GET POINTER TO FIRST DQE   Y02714
         LTR   RDQE,RDQE           IS THERE A DQE                Y02714
         BZ    SKIPCLER            NO, STORAGE NOT AVAILABLE     Y02714
         L     SEGREG,CLHIBYTE     MASK TO CLEAR FQE HIGH BYTE   Y02714
         SLR   RWORK,RWORK         ZERO CLOSEST FQE ADDRESS      Y02714
         L     WORK,LGPOSNUM       SET CLOSEST FQE SIZE LARGE    Y02714
GDQESRCH L     RFQE,DQFQEPTR(0,RDQE)  GET POINTER TO FIRST FQE   Y02714
         L     RIN0,DQEPTR(0,RDQE) PRELOAD NEXT DQE ADDRESS      Y02714
         LR    RPREVFQE,RDQE       MAKE DQE PREVIOUS FQE         Y02714
         NR    RFQE,SEGREG         IS THERE AN FQE               Y02714
         BZ    NXTDQE              NO, CHECK NEXT DQE            Y02714
GFQESRCH L     RFQESIZE,FQELNTH(0,RFQE)  GET FQE SIZE            Y02714
         L     RWORK4,FQEPTR(0,RFQE)  PRELOAD NEXT FQE ADDRESS   Y02714
         TM    FQTYPE(RFQE),FQECPB FQE CROSS PAGE BOUNDARY?      Y02714
         BO    NXTFQE              YES, GET NEXT FQE             Y02714
         CLR   RLENGTH,RFQESIZE    IS FQE LARGE ENOUGH           Y02714
         BH    GREATEST            NO, CHECK FOR LARGEST SO FAR  Y02714
         BE    SAVEPREV            EQUAL, USE THIS FQE           Y02714
         CLR   WORK,RFQESIZE       YES, CLOSER THAN BEFORE?      Y02714
         BNH   NXTFQE              NO, TRY NEXT FQE              Y02714
         LR    RWORK3,RPREVFQE     SAVE PREVIOUS TO CLOSEST FQE  Y02714
         LR    RWORK,RFQE          SAVE CURRENT CLOSEST FQE      Y02714
         LR    WORK,RFQESIZE       SAVE NEW CLOSEST SIZE         Y02714
         SPACE 2                                                 Y02714
NXTFQE   LR    RPREVFQE,RFQE       MAKE CURRENT FQE PREVIOUS     Y02714
         LR    RFQE,RWORK4         GET NEXT FQE                  Y02714
         NR    RFQE,SEGREG         IS THERE ONE?                 Y02714
         BNZ   GFQESRCH            YES, CHECK IT                 Y02714
         SPACE 2                                                 Y02714
NXTDQE   LR    RPRVDQE,RDQE        MAKE CURRENT DQE PREVIOUS     Y02714
         LTR   RDQE,RIN0           GET NEXT DQE                  Y02714
         BNZ   GDQESRCH            IF ANY GO CHECK IT            Y02714
         SPACE 2                                                 Y02714
         LTR   RWORK,RWORK         WAS THERE A CLOSE FQE         Y02714
         BZ    CHCKLSW             NO, CHECK CLEARSW             Y02714
         LR    RPREVFQE,RWORK3     GET PREVIOUS CLOSEST FQE      Y02714
         LR    RFQE,RWORK          GET CLOSEST FQE               Y02714
SAVEPREV STM   RPREVFQE,RFQE,CLOPREV  SAVE PREVIOUS AND CLOSEST FQE
         ST    RLGSOFAR,LARGESTA   SAVE LARGEST AVAILABLE SIZE   Y02714
         TM    SPFLAGS,LSQA+SQA    SQA OR LSQA REQUEST?          Y02714
         BNZ   PGBOUND             YES, CHECK PAGE BOUNDARIES
GFREFND  L     RIN0,GFRESAVE       RESTORE
         LM    RIN3,RIN15,GFRESAVE+C12  CALLERS REGS             Y02714
         B     C4(RCOMRET1)        STORAGE FOUND - FQE, PREVFQE
         SPACE 2                                                 Y02714
GREATEST CR    RFQESIZE,RLGSOFAR   THIS FQE LARGEST SO FAR?      Y02714
         BNH   NXTFQE              NO, CHECK NEXT FQE            Y02714
         LR    RLGSOFAR,RFQESIZE   YES, SAVE NEW LARGEST SIZE    Y02714
         B     NXTFQE              GO CHECK NEXT FQE             Y02714
         SPACE 2
CHCKLSW  TM    CLEARSW,CLEARON     CLEARSW ON?
         BZ    SKIPCLER            NO - RETURN STORAGE NOT FOUND
         BAL   RCOMRET1,FQECLEAR   CLEAR CPB FLAG IN FQE'S
SKIPCLER ST    RLGSOFAR,LARGESTA   SAVE LARGEST AVAILABLE SIZE   Y02714
         LR    RPREVDQE,RPRVDQE    GET LAST DQE                  Y02714
         L     RIN0,GFRESAVE       RESTORE
         LM    RAREG,RRETURN,GFRESAVE+C8  CALLERS REGS
         BR    RCOMRET1            RETURN - NOT FOUND - PREVDQE
*                                  & LARGEST AVAILABLE
         SPACE 2                                                 Y02714
*        END OF OPTIMIZED SECTION
         SPACE 5
*
*        FQECLEAR - CLEARS FQECPB INDICATORS IN FQE (FQE CROSSES
*                   PAGE BOUNDARY)
*
FQECLEAR XI    CLEARSW,CLEARON     TURN OFF CLEARSW
         L     RDQE,GFRESAVE+C28   GET SPQE ADDRESS              Y02714
FQECLR1  L     RDQE,DQEPTR(0,RDQE) GET FIRST/NEXT DQE            Y02714
         LTR   RDQE,RDQE           IS THERE ONE                  Y02714
         BZR   RCOMRET1            NO, RETURN                    Y02714
         L     RFQE,DQFQEPTR(RDQE) PICK UP 1ST FQE POINTER
FQECLR2  LTR   RFQE,RFQE           IS THERE AN FQE               Y02714
         BZ    FQECLR1             NO, GET NEXT DQE              Y02714
         NI    FQTYPE(RFQE),ALL-FQECPB  TURN OFF CPB FLAG        Y02714
         L     RFQE,FQTYPE(RFQE)   GET NEXT FQE POINTER
         B     FQECLR2             CHECK THIS FQE                Y02714
*
*        AREA DESCRIBED BY FQE CROSSED A PAGE BOUNDARY
*
*        SINCE A REQUEST FOR SP 253 OR 254 WILL HAVE HAD ITS
*        LENGTH INCREMENTED BY 8 TO ACCOMODATE THE AQE, SPECIAL
*        PROCESSING MUST BE PERFORMED FOR REQUESTS OF EXACTLY
*        4096 BYTES FROM THOSE SUBPOOLS SO THAT SUCH REQUESTS
*        WILL NOT BE ALLOCATED ACROSS A PAGE BOUNDARY
*
PGBOUND  TM    SPFLAGS,REQ4K       SP=253/254 AND LENGTH=4K?   @ZA11822
         BNO   LENGTHOK            NO                          @ZA11822
         SH    RLENGTH,H8          GET REQUESTED LENGTH        @ZA11822
LENGTHOK LA    RWORK,FQESLNTH(RFQE)  GET END ADDRESS           @ZA11822
         ST    RWORK,ENDADD         & SAVE IT
         LR    RWORK3,RWORK        SAVE END ADDRESS
         SR    RWORK,RLENGTH       GET START ADDRESS
         ST    RWORK,STRTADD        & SAVE IT
         N     RWORK,BND4K         ROUND START DOWN TO 4K BOUND
         ST    RWORK,RSTRTADD       & SAVE IT
*
*        THE FOLLOWING INSTRUCTION WILL DECREMENT THE END ADDRESS BY
*        ONE BEFORE ROUNDING IT TO THE NEXT LOWER PAGE BOUNDARY, IN
*        CASE IT HAPPENS TO FALL ON A PAGE BOUNDARY.
*
         BCTR  RWORK3,0            DECREMENT END ADDRESS BY 1    Y02714
         N     RWORK3,BND4K        ROUND END DOWN TO 4K BOUND
         ST    RWORK3,RENDADD       & SAVE IT
         C     RLENGTH,PAGE        LENGTH > PAGE
         BH    PGBND1              YES
         TM    SPFLAGS,REQ4K       SP=253/254 AND LENGTH=4K?   @ZA11822
         BNO   NOAQEADD            NO                          @ZA11822
         LA    RLENGTH,C8(RLENGTH) GET LENGTH PLUS AQE SIZE    @ZA11822
*
*        WILL THE ALLOCATED AREA START ON THE SAME PAGE AS THE
*        FREE AREA ENDS ON ?  IF NOT, THE FREE AREA IN THE HIGH
*        ADDRESSED PAGE (OLDFQELN) CANNOT BE BIG ENOUGH TO
*        SATISFY THE REQUEST.
*
NOAQEADD CR    RWORK,RWORK3        ROUNDED ADDRS EQ(SAME PAGE) @ZA11822
         BNE   PGBND2              NO
         C     RLENGTH,FQELNTH(RFQE)  REQUEST EQUAL FQE SIZE     Y02714
         BE    CHCKCL1             YES - CHECK CLEARSW
         L     RWORK,STRTADD       GET START ADDRESS
         N     RWORK,PGBNDMSK      START ADDRESS ON 4K BOUNDARY?
         BZ    LRA1                YES - LRA ON START-4K
CHCKCL1  TM    CLEARSW,CLEARON     CLEARSW ON
         BZ    GFREFND             NO - RETURN - STORAGE FOUND
         BAL   RCOMRET1,FQECLEAR   CLEAR CPB FLAG IN FQE'S
         LM    RPREVFQE,RFQE,CLOPREV  GET CLOSEST AND PREVIOUS FQE
         B     GFREFND             RETURN - STORAGE FOUND
         SPACE 2                                                 Y02714
*
*        THE ALLOCATED AREA WILL START ON A 4K BOUNDARY, BUT THE
*        FQE ALSO DESCRIBES SPACE BELOW THE BOUNDARY.  IF THE FQE
*        IS NOT AN EXACT FIT FOR THE REQUEST, A NEW FQE MUST BE
*        BUILT ON THE NEXT LOWER PAGE.  THEREFORE, A CHECK MUST BE
*        MADE TO ENSURE THAT THE NEXT LOWER PAGE IS BACKED BY REAL
*        STORAGE SO THAT THE FQE CAN BE BUILT THERE.
*
LRA1     L     RWORK3,STRTADD      GET START ADDRESS
         S     RWORK3,PAGE         SUBTRACT 4K                   Y02714
         BAL   WORK,PGINCORE       CHECK IF PAGE IS IN STORAGE
         B     CHCKCL1             YES, IT IS
         B     GFRENO              FIXED PAGE NOT OBTAINED
         SPACE 2
PGBND2   L     RWORK,ENDADD        GET END ADDRESS
         S     RWORK,RENDADD       SUBTRACT ROUNDED END ADDRESS
         ST    RWORK,OLDFQELN      SAVE AS OLD LENGTH
         L     RWORK3,FQELNTH(RFQE)  GET FQE LENGTH
         SR    RWORK3,RWORK        SUBTRACT OLD LENGTH FROM FQE LENGTH
         ST    RWORK3,NEWFQELN      & SAVE AS NEW LENGTH
         CR    RLENGTH,RWORK3      NEW LENGTH LARGE ENOUGH       Y02714
         BH    OLDVSNEW            NO - COMPARE OLD TO NEW
         L     RWORK3,RSTRTADD     GET ROUNDED START ADDRESS
         BAL   WORK,PGINCORE       CHECK IF PAGE IS IN STORAGE
         B     IS4KREQ             YES IT IS
         B     GFRENO              NO IT IS NOT
IS4KREQ  C     RLENGTH,PAGE        4K REQUEST
         BE    NEWVS4K             YES - SEE IF NEWLEN = 4K
         TM    SPFLAGS,REQ4K       SP=253/254 AND LENGTH=4K?   @ZA30210
         BO    NEWVS4K             YES - SEE IF NEWLEN = 4K    @ZA30210
*
*        THE REQUEST IS NOT FOR EXACTLY 4K.  BUILD AN FQE TO
*        DESCRIBE THE FREE SPACE ON THE LOWER PAGE AFTER UPDATING
*        THE LENGTH IN THE FQE ON THE HIGHER PAGE.  THEN CHAIN
*        THE LOWER FQE FROM THE HIGHER ONE.
*
CREATNFQ MVC   FQELNTH(C4,RFQE),OLDFQELN  NEW LENGTH FOR OLD FQE
         L     RWORK,RENDADD       PICK UP ROUNDED END ADDRESS
         LA    RWORK2,FQESLNTH     GET FQE LENGTH                Y02714
         SR    RWORK,RWORK2        GET NEW FQE ADDRESS           Y02714
         MVC   FQEPTR(C4,RWORK),FQEPTR(RFQE) CHAIN IN            Y02714
         ST    RWORK,FQEPTR(RFQE)  NEW FQE                       Y02714
         LR    RPREVFQE,RFQE       MAKE CURRENT PREVIOUS FQE
         LR    RFQE,RWORK          MAKE NEW CURRENT FQE
         MVC   FQELNTH(C4,RFQE),NEWFQELN  SET LENGTH
         STM   RPREVFQE,RFQE,CLOPREV  NEW FQE IS NOW PROPER ONE
         B     CHCKCL1             CHECK CLEARSW
         SPACE 2                                                 Y02714
OLDVSNEW CR    RWORK,RWORK3        OLD > NEW LENGTH              Y02714
         BH    LENVSLRG            YES - COMPARE TO LARGEST AVAILABLE
         LR    RWORK,RWORK3        GET NEW FQE LENGTH            Y02714
LENVSLRG CR    RWORK,RLGSOFAR      LESS THAN LARGEST AVAILABLE?  Y02714
         BL    REPEAT              YES - REPEAT REQUEST
         LR    RLGSOFAR,RWORK      GET LARGEST AVAILABLE         Y02714
REPEAT   OI    CLEARSW,CLEARON     TURN ON CLEARSW
         OI    FQTYPE(RFQE),FQECPB SET CPB FLAG IN FQE           Y02714
         LM    RIN0,RWORK4,GFRESAVE  RESTORE REGS, KEEP RLGSOFAR Y02714
         B     GFRECOR2            TRY AGAIN                     Y02714
         SPACE 2
NEWVS4K  CLC   NEWFQELN(C4),PAGE   NEW LENGTH = 4K?
         BE    CREATNFQ            YES - CREATE NEW FQE
*
*        THE LENGTH DESCRIBED BY THE NEW FQE IS NOT 4K.  AN FQE
*        MUST BE BUILT ON THE PAGE BELOW THE 4K PAGE THAT WILL BE
*        ALLOCATED.  THEREFORE, REAL STORAGE MUST BE OBTAINED FOR
*        THE PAGE CONTAINING THIS FQE.  IF REAL STORAGE CANNOT BE
*        ASSIGNED, THE FRAME PREVIOUSLY GOTTEN TO BACK THE NEXT
*        HIGHER PAGE MUST BE RELEASED.
*
         L     RWORK3,RSTRTADD     GET ROUNDED START ADDRESS
         S     RWORK3,PAGE         SUBTRACT 4K
         BAL   WORK,PGINCORE       CHECK IF PAGE IS IN STORAGE
         B     CREATNFQ            YES IT IS
         L     RIN0,RSTRTADD       GET BEGINNING ADDR TO RELEASE Y02714
         LR    RIN1,RIN0           GET ENDING ADDRESS            Y02714
         A     RIN1,PAGE            TO RELEASE                   Y02714
         B     NOTASIG1            GO RELEASE THE PAGE
         SPACE 2
PGBND1   L     RWORK,STRTADD       GET START ADDRESS
         C     RLENGTH,FQELNTH(RFQE)  IS REQUEST EQUAL TO FQE SIZE?
         BE    PGBND1A             YES - DO NOT ALLOW FOR FQE
         LA    RWORK2,FQESLNTH     GET FQE LENGTH                Y02714
         SR    RWORK,RWORK2        SUBTRACT FQE LENGTH           Y02714
PGBND1A  N     RWORK,BND4K         ROUND DOWN TO 4K BOUNDARY
         L     RWORK3,RENDADD      GET ROUNDED END ADDRESS
         ST    RWORK3,FIXEND       SAVE IT
         SR    RWORK3,RWORK        GET LENGTH
         ST    RWORK3,DIFF         SAVE IN DIFFERENCE
         XC    FIXSTART(C4),FIXSTART  CLEAR WORK AREA
         L     RWORK3,RENDADD      GET END ADDRESS
CHECKDIF OC    DIFF,DIFF           DIFFERENCE = 0?               Y02714
         BZ    GFREFND             YES - RETURN - STORAGE FOUND
         S     RWORK3,PAGE         SUBTRACT 4K FROM ROUNDED END ADDRESS
         BAL   WORK,PGINCORE       CHECK IF PAGE IS IN STORAGE
         B     DECFXST             YES IT IS
         B     NOTASSIG            NO IT IS NOT
         SPACE 2
DECFXST  ST    RWORK3,FIXSTART     FIXSTART = RENDADD - 4K
         ST    RWORK3,RENDADD      FROM RENDADD
         L     RWORK,DIFF          SUBTRACT 4K
         S     RWORK,PAGE               FROM
         ST    RWORK,DIFF                    DIFFERENCE
         B     CHECKDIF            CHECK DIFFERENCE
         SPACE 2
NOTASSIG OC    FIXSTART,FIXSTART   FIXSTART = 0?                 Y02714
         BZ    GFRENO              YES - PAGE NOT OBTAINED
         LM    RIN0,RIN1,FIXSTART  GET ADDRESSES TO RELEASE      Y02714
NOTASIG1 BAL   RCOMRET1,TRNONPVT   INHIBIT GETMAINS              Y02714
         L     R2,PSAAOLD          CURRENT ASCB ADDRESS          Y02714
         LR    RWORK2,RPVT         SAVE PVT ADDRESS              Y02714
         USING PVT,RPVT                                          Y02714
         L     RIN15,PVTPRELV      GET ENTRY TO RELEASE PAGE     Y02714
         DROP  RPVT                                              Y02714
         BALR  RRETURN,RIN15       RELEASE PAGE
         USING PVT,RWORK2                                        Y02714
         NI    PVTFLAG1,ALL-PVTBGMS  RESET GETMAIN INHIB. FLAG   Y02714
         DROP  RWORK2                                            Y02714
GFRENO   TM    CLEARSW,CLEARON     CLEARSW ON
         BO    CALFQCLR            YES
CALGNOTC L     RIN15,LARGESTA      PICK UP LARGEST AVAILABLE
         B     GNOTSATC            PAGE NOT OBTAINED
         SPACE 2
CALFQCLR BAL   RCOMRET1,FQECLEAR   CLEAR CPB FLAG IN FQE'S
         B     CALGNOTC            PAGE NOT OBTAINED
         EJECT
**************************************************************** Y02753
*                                                                Y02753
*        ROUTINE TO DELETE A FUNCTIONAL RECOVERY ROUTINE (FRR)   Y02753
*                                                                Y02753
*        INPUT                                                   Y02753
*              RRETURN  - RETURN ADDRESS                         Y02753
*        OUTPUT                                                  Y02753
*              FRR DELETED                                       Y02753
*        WORK                                                    Y02753
*              RWORK, RWORK2                                     Y02753
*                                                                Y02753
**************************************************************** Y02753
         SPACE 2                                                 Y02753
FRRDELET SETFRR D,WRKREGS=(RWORK,RWORK2)  DELETE FRR             Y02753
         BR    RRETURN             RETURN                        Y02753
         EJECT                                                   Y02714
**************************************************************** Y02751
*                                                                Y02751
*        LOCKING INTERFACE ROUTINES - GTSALLOC & CLSALLOC        Y02751
*                                                                Y02751
*              INPUT                                             Y02751
*                   RCOMRET1 - RETURN ADDRESS                    Y02751
*              OUTPUT                                            Y02751
*                   SALLOC LOCK OBTAINED OR FREED AS REQUESTED   Y02751
*                                                                Y02751
**************************************************************** Y02751
         SPACE 2                                                 Y02751
GTSALLOC TM    LOCKFLAG,SALHELD+SALOBTND LOCK ALREADY HELD OR    Y02751
*                                  OBTAINED?                     Y02751
         BNZR  RCOMRET1            YES, RETURN                   Y02751
         STM   RCOMRET1,RRETURN,LOCKSAVE SAVE REGS 9-14          Y02751
SOBTAIN  SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,RELATED=(VSM,    Y02751*
               IEAVGM00(SRELEASE)) GET SALLOC LOCK               Y02751
         LTR   RCOMRET1,RBASE2     SAVE AND TEST RETURN CODE     Y02751
         LM    REGB,RRETURN,LOCKSAVE+C8 RESTORE REGISTERS 11-14  Y02751
         BZ    GTSALOK4            LOCK OBTAINED                 Y02751
         LA    REGA,C4             IS RETURN                     Y02751
         CR    RCOMRET1,REGA        CODE = 4?                    Y02751
         BE    GTSALOK3            YES, LOCK ALREADY HELD        Y02751
*                                                                Y02751
*        UNDEFINED RETURN CODE - GO RECORD ERROR & TERMINATE     Y02751
*                                                                Y02751
         LA    RIN0,GTSALFLD       INDICATE SALLOC OBTAIN        Y02751
*                                   RETURN CODE NOT 0 OR 4       Y02751
         L     RBASE1,BASE101      SET BASE FOR CSECT01        @Y30APYF
         USING G4KSRCH,RBASE1                                  @Y30APYF
         B     STBRNDX             GO TERMINATE USER             Y02751
         USING BASE1,RBASE1        REG ALREADY SET             @Y30APYF
         SPACE 2                                                 Y02751
GTSALOK3 OI    LOCKFLAG,SALHELD    INDICATE LOCK ALREADY HELD    Y02751
         B     GTSALOK5            GO RESTORE REGISTERS          Y02751
         SPACE 2                                                 Y02751
GTSALOK4 OI    LOCKFLAG,SALOBTND   INDICATE LOCK OBTAINED        Y02751
         L     REGA,FRRPARM        POINT TO FRR PARAMETER AREA   Y02753
         OI    PARMFLG1(REGA),PARMSALO  INDICATE LOCK OBTAINED   Y02753
GTSALOK5 LM    RCOMRET1,REGA,LOCKSAVE RESTORE REGS 9-10          Y02751
         BR    RCOMRET1            RETURN, LOCK OBTAINED         Y02751
         SPACE 5                                                 Y02751
CLSALLOC TM    LOCKFLAG,SALOBTND   WAS LOCK OBTAINED?          @ZA03280
         BZR   RCOMRET1            NO, DON'T RELEASE IT          Y02751
         STM   RCOMRET1,RRETURN,LOCKSAVE SAVE REGS 9-14          Y02751
SRELEASE SETLOCK RELEASE,TYPE=SALLOC,RELATED=(VSM,               Y02751*
               IEAVGM00(SOBTAIN))  RELEASE SALLOC LOCK           Y02751
         LTR   RCOMRET1,RBASE2     SAVE AND TEST RETURN CODE     Y02751
         LM    REGA,RRETURN,LOCKSAVE+C4 RESTORE REGISTERS 10-14  Y02751
         BNZ   CLSALOK2            RETURN CODE NOT ZERO          Y02751
CLSALOK1 NI    LOCKFLAG,ALL-SALOBTND RESET LOCK OBTAINED FLAG    Y02751
         L     RCOMRET1,FRRPARM    POINT TO FRR PARAMETER AREA   Y02753
         NI    PARMFLG1(RCOMRET1),ALL-PARMSALO  RESET LOCK FLAG  Y02753
         L     RCOMRET1,LOCKSAVE   RESTORE RETURN REGISTER       Y02751
         BR    RCOMRET1            RETURN,LOCK RELEASED          Y02751
         SPACE 2                                                 Y02751
CLSALOK2 STM   RIN15,RIN1,LOCKSAVE+C4 SAVE REGISTERS 15-1        Y02753
         MVI   FRRBRNDX,CLSALFLD   SALLOC RELEASE R. C. > 4      Y02753
         ABEND X'C0D',DUMP,,SYSTEM GO TO FRR TO RECORD ERROR     Y02753
         LM    RIN15,RIN1,LOCKSAVE+C4 RESTORE REGISTERS 15-1     Y02753
         B     CLSALOK1            CONTINUE AS IF NO ERROR       Y02753
         EJECT
**************************************************************** Y02714
*                                                                Y02714
*        POST PROCESSING ROUTINE TO FREE BLOCKS OF STORAGE       Y02714
*        QUEUED TO THE "FMAREAS" FIELD, AND TO CHECK FOR       @Z30ENWD
*        INTERNAL CELL EXPANSION REQUIREMENT. CALLS CLSALLOC   @Z30ENWD
*        TO FREE LOCK IF OBTAINED.                             @Z30ENWD
*              INPUT                                             Y02714
*                   RLDA     - LDA ADDRESS                       Y02714
*                   RBASE1   - BASE REGISTER                     Y02714
*                   RBASE2   - BASE REGISTER                     Y02714
*                   RRETURN  - RETURN ADDRESS                    Y02714
*              OUTPUT                                            Y02714
*                   ALL REGISTERS RESTORED                     @Z30ENWD
*              WORK                                              Y02714
*                   GMREPSAV USED TO SAVE REGISTERS              Y02714
*                                                                Y02714
**************************************************************** Y02714
         SPACE 2                                               @Y30APYF
FMPOSTP  STM   RIN0,RCOMRET1,GMREPSAV  SAVE REGISTERS 0 TO 9     Y02714
         SPACE
FMPOST1  L     RIN1,FMAREAS        FIRST/NEXT AREA TO FREE       Y02714
         LTR   RIN1,RIN1           IS THERE ONE?                 Y02714
         BZ    FMPOST2             NO, GO CHECK FOR EXPANSION
         L     RWORK,C0(0,RIN1)    POINT TO NEXT AREA IF ANY     Y02714
         ST    RWORK,FMAREAS       RE-CHAIN REMAINING AREAS      Y02714
         L     RIN0,C4(0,RIN1)     SPID AND LENGTH               Y02714
         BAL   RCOMRET1,FMAINB     GO FREE CURRENT AREA          Y02714
         B     FMPOST1             GO CHECK FOR MORE             Y02714
         SPACE 2                                                 Y02714
FMPOST2  TM    CELLFLGS,LCLEXP+GLBLEXP NEED TO REFILL POOL?    @Z30ENWD
         BZ    FMPOST3             NO                          @Z30ENWD
         LR    RERROR,RRETURN       SAVE RETURN ADDRESS        @Z30ENYF
         BAL   RRETURN,GETMAINE    EXPANSION INTERNAL POOL     @Z30ENYF
         LR    RRETURN,RERROR
FMPOST3  BAL   RCOMRET1,CLSALLOC   CLEAR SALLOC IF OBTAINED    @Z30ENWD
         LM    RIN0,RCOMRET1,GMREPSAV  RESTORE REGISTERS 0 TO 9  Y02714
         BR    RRETURN                                           Y02714
         TITLE 'IEAVGM00   OS/VS2 GETMAIN / FREEMAIN SERVICE ROUTINE   *
               CSECT-IEAVGM01'
***********************************************************************
*
*        G4KSRCH - ENTERED ON A REGION REQUEST TO OBTAIN SOME MULTIPLE
*              OF 4K TO SATISFY A REQUEST
*
*              INPUT
*                   RPREVDQE - LAST DQE ON THE CHAIN
*                   SIZEREG  - NUMBER OF BYTES REQUESTED (ROUNDED UP
*                              TO 4K)
*                   RSPID    - SPID
*                   RLENGTH  - ACTUAL LENGTH REQUIRED
*                   RRETURN  - RETURN ADDRESS
*              OUTPUT
*                   RFQE     - ADDRESS ALLOCATED AREA
*                   RIN15    - LARGEST AVAILABLE IF REQUEST NOT FILLED
*
*                   NOTE     - REGISTER 8 CONTAINS THE CSECT01 VALUE
*
***********************************************************************
         SPACE 2
IEAVGM00 CSECT                                                 @Y30APYF
G4KSRCH1 STM   RIN0,RIN15,G4KSAVE  SAVE REGS ON ENTRY          @Y30APYF
         L     RBASE1,BASE101      SET UP ADDRESSABILITY       @Y30APYF
         BR    RBASE1              GO TO G4KSRCH               @Y30APYF
         SPACE 2                                               @Y30APYF
IEAVGM01 CSECT                                                 @Y30APYF
         SPACE 2                                               @Y30APYF
         MODID BR=NO                                           @Y30APYF
         SPACE 2                                                 Y02714
         USING G4KSRCH,RBASE1                                  @Y30APYF
         USING PGTPTE,RPTE                                       Y02714
         USING XPTE,REPTE                                        Y02714
G4KSRCH  TM    SPFLAGS,CSA         CSA SUBPOOL?                @Y30APYF
         BZ    G4KSRA              NO, NECESSARY LOCKS HELD      Y02751
         L     RBASE1,BASE100      BASE AS FOR CSECT00         @Y30APYF
         USING BASE1,RBASE1                                    @Y30APYF
         BAL   RCOMRET1,GTSALLOC   YES, GET SALLOC LOCK          Y02751
         L     RBASE1,BASE101      BASE AS FOR CSECT01         @Y30APYF
         USING G4KSRCH,RBASE1                                  @Y30APYF
G4KSRA   BAL   RRETURN,FBQSRCH     GET STORAGE                   Y02714
         B     SQORLSQ             BR IF SATISFIED               Y02714
*
*        THE REQUEST WAS NOT SATISFIED
*
         TM    SPFLAGS,SQA+LSQA    SQA OR LSQA REQUEST?          Y02714
         BNZ   G4KSRB              YES, GFRECORE ALREADY CALLED  Y02714
         TM    CODE1,BOUND         PAGE BOUNDARY?
         BO    G4KSR1              YES
         C     RLENGTH,MAXFQESZ    WAS GFRECORE ENTERED?         Y02714
         BH    G4KSR2              NO
G4KSRB   C     RIN15,LARGESTA      IS LARGEST AVAILABLE LARGER   Y02714
*                                  THAN THAT JUST RETURNED?
         BNL   G4KSR1              NO
         L     RIN15,LARGESTA      GET LARGEST AVAILABLE
G4KSR1   LM    RIN0,RRETURN,G4KSAVE  RESTORE REGS
         B     C4(RRETURN)         NOT FOUND                     Y02714
*
*        IF A VARIABLE REQUEST, GET MAXIMUM AVAILABLE
*
G4KSR2   TM    CODE1,VARBLE        VARIABLE REQUEST?             Y02714
         BNO   G4KSR1              NO, NO NEED TO CHECK FOR LARGEST
*                                  AVAILABLE IN FQE
         C     RIN15,MAXFQESZ      IS LARGEST AVAILABLE GREATER  Y02714
*                                  THAN MAXIMUM FQE SIZE?
         BH    G4KSR1              YES, NO NEED FOR FURTHER CHECK
         ST    RIN15,LARGEST       SAVE LARGEST 4K AVAILABLE
         L     RLENGTH,MAXFQESZ    GET MAX VALUE FOR FQE SEARCH  Y02714
         BAL   RCOMRET1,GFRECORE   GET LARGEST AVAILABLE IN FQE
         USING G4KULAB,RCOMRET1                                @Y30APYF
G4KULAB  B     G4KSR3              CORE NOT FOUND - GET LARGEST
         DROP  RCOMRET1
         L     RBASE1,BASE101      BASE AS FOR CSECT01         @Y30APYF
         USING G4KSRCH,RBASE1      TELL ASSEMBLER              @Y30APYF
         L     RIN15,FQELNTH(RFQE)  GET VALUE FROM FQE
         B     G4KSR1              RETURN WITH LARGEST AVAILABLE
         SPACE 2
G4KSR3   L     RBASE1,BASE101      BASE AS FOR CSECT01         @Y30APYF
         C     RIN15,LARGEST       IS THE LENGTH IN THE FQE GREATER
*                                  THAN THAT IN THE FBQE?      @Y30APYF
         BH    G4KSR1              YES, USE FQE LENGTH
*                                  AS LARGEST AVAILABLE
         L     RIN15,LARGEST       VALUE OF LARGEST FROM FBQE    Y02714
         B     G4KSR1              RETURN WITH LARGEST AVAILABLE
*
*        FBQSRCH FOUND ENOUGH FREE SPACE, GET IT INTO A DQE
*
SQORLSQ  TM    SPFLAGS,SQA+LSQA    SQA OR LSQA REQUEST?          Y02714
         BZ    CALLGMC             NO, GET A DQE               @Z30ENWD
         LA    RIN1,DUMYDQE        GET DUMMY DQE TO PREVENT      Y02714
         B     GETDQEP             RECURSION THROUGH GETMAINB    Y02714
         SPACE 2
CALLGMC  ICM   RIN1,MASK1,LDACBSP  INDICATE CORRECT SUBPOOL    @Z30ENWD
         L     RBASE1,BASE100      BASE AS FOR CSECT00         @Y30APYF
         USING BASE1,RBASE1        TELL ASSEMBER               @Y30APYF
         BAL   RRETURN,GETMAINC    GET DQE SPACE               @Z30ENWD
         L     RBASE1,BASE101      BASE AS FOR CSECT01         @Y30APYF
         USING G4KSRCH,RBASE1      TELL ASSEMBLER              @Y30APYF
GETDQEP  L     RPREDQE,G4KSAVE+C4  GET PREVIOUS DQE POINTER      Y02714
         ST    RIN1,DQEPTR(RPREDQE)  CHAIN IN DQE                Y02714
         ST    SEGREG,DQEBLKAD(RIN1)  PUT ADDR IN DQE
         ST    SIZEREG,DQELNTH(RIN1)  PUT LENGTH IN DQE
         LR    RPREDQE,RIN1        SAVE DQE ADDRESS
         TM    SPFLAGS,SQA         SQA REQUEST?                  Y02714
         BO    CRETFQE             YES, CREATE FQE               Y02714
         TM    SPFLAGS,CSA         CSA REQUEST?                  Y02714
         BO    SETUPCSA            YES, GO SET UP KEY FOR CSA    Y02714
         TM    SPFLAGS,SWA+AUK     SWA OR SP 229, 230?           Y02714
         BNZ   SETUPREG            YES, GO SET UP KEY FOR REGION Y02714
         TM    SPFLAGS,LSQA        LSQA REQUEST?                 Y02714
         BO    CRSEG               YES, CREATE SEGMENT IF NECESS.Y02714
         L     RWORK2,LDATCB       GET TCB ADDRESS               Y02714
         USING TCB,RWORK2                                        Y02714
         TM    TCBFLGS6,TCBRV      V=R
         BZ    SETUPREG            NO, GO SET UP KEY FOR REGION  Y02714
         MVI   FETCH,ZEROKEY       INIT KEY TO 0               @ZA08170
         CH    RSPID,H252          SUBPOOL 252                   Y02714
         LR    RIN15,SIZEREG       SAVE SIZE
         BE    SKIPKEY             YES - TURN OFF FETCH PROTCT @ZA08170
         MVC   FETCH,LSPQEKEY      GET PROTECT KEY             @ZA10820
         DROP  RWORK2                                            Y02714
         OI    FETCH,FETCHON       SET FETCH PROTECT ON
SKIPKEY  SR    RWORK2,RWORK2                                   @ZA08170
         IC    RWORK2,FETCH        PICK UP KEY & FETCH PROTECT FOR
         SRL   SIZEREG,C12         GET NO. 4K BLOCKS             Y02714
*                                  STORAGE BLOCKS
SSKLOOP0 LR    RADSAV,SEGREG       GET ALLOCATED AREA
SSKLOOP1 LRA   RIN1,C0(0,RADSAV)   IS FRAME BACKING ALLOC PAGE @ZA08170
         BNZ   MTERM028            NO                          @ZA08170
         CR    RADSAV,RIN1         IS PAGE MAPPED 1 TO 1       @ZA08170
         BNE   MTERM028            NO                          @ZA08170
         SSK   RWORK2,RADSAV       SET STORAGE KEY TO TASK'S PROTECT
         LA    RADSAV,C2K(RADSAV)   KEY IN ALL ALLOCATED 4K BLOCKS
         SSK   RWORK2,RADSAV
         LA    RADSAV,C2K(RADSAV)
         BCT   SIZEREG,SSKLOOP1
         CH    RSPID,H252          SUBPOOL 252                 @ZA08170
         BNE   SKIPCLR             NO, DONT CLEAR AREA         @ZA08170
         LR    RSPQE,RIN15         SET LENGTH TO BE CLEARED    @ZA08170
         LR    SIZEREG,SEGREG      GET ADDRESS TO BE CLEARED   @ZA08170
         SR    COMREG,COMREG       0 PADDING, 0 BYTES          @ZA08170
         MVCL  SIZEREG,RAREG       CLEAR AREA ASSIGNED         @ZA08170
SKIPCLR  LR    SIZEREG,RIN15       RESTORE SIZE                @ZA08170
         LR    RRETURN,SEGREG      START ADDRESS FOR SMF ROUTINE
         ST    SIZEREG,SAVESIZE    SAVE SIZE
         ST    SEGREG,SAVESEG      SAVE ADDRESS
CALLSMF1 L     RWORK,AGMSMF        SET UP BASE REG & ENTRY POINT Y02714
         BALR  RCOMRET1,RWORK      GO TO SMF INTERFACE ROUTINE
         L     SIZEREG,SAVESIZE    RESTORE SIZE                  Y02714
         L     SEGREG,SAVESEG      RESTORE ADDRESS
         SR    SIZEREG,RLENGTH     IS THE AREA
         LTR   SIZEREG,SIZEREG     THE EXACT SIZE
         BZ    ALLOCFD             YES
         ICM   RIN1,MASK1,LDACBSP  INDICATE CORRECT SUBPOOL      Y02714
         L     RBASE1,BASE100      BASE AS FOR CSECT00         @Y30APYF
         USING BASE1,RBASE1        TELL ASSEMBER               @Y30APYF
         BAL   RRETURN,GETMAINC    GET STORAGE FOR FQE         @Z30ENWD
         L     RBASE1,BASE101      BASE AS FOR CSECT01         @Y30APYF
         USING G4KSRCH,RBASE1      TELL ASSEMBLER              @Y30APYF
         ST    RIN1,FQEPTR(RPREDQE)  CHAIN IN FQE
         ST    SIZEREG,FQELNTH(RIN1) PUT LENGTH IN FQE
         MVI   FQTYPE(RIN1),REGION INDICATE REGION FQE           Y02714
         TM    CODE1,BOUND         PAGE BOUNDARY?
         BZ    HIADDR              NO
         LR    SIZEREG,SEGREG      GET START ADDRESS
         A     SIZEREG,SAVESIZE    GET HIGH BOUND
         ST    SIZEREG,FQAREA(RIN1)  HIGH BOUND OF FREE  AREA
         B     ALLOCFD             RETURN - STORAGE FOUND
         SPACE 2
HIADDR   AR    SEGREG,SIZEREG      HIGH ADD OF FREE SPACE
         ST    SEGREG,FQAREA(RIN1) STORE HI ADDR IN FQE
ALLOCFD  LR    RFQE,SEGREG         SET ADDRESS OF ALLOCATED AREA
         LM    RIN0,RIN1,G4KSAVE   RESTORE REGISTERS
         LM    COMREG,RIN15,G4KSAVE+C12                          Y02714
         BR    RRETURN             RETURN - STORAGE FOUND        Y02714
         SPACE 2
MTERM028 LR    RADSAV,RBASE2       SAVE BASEREG ACROSS CALLRTM @ZA08170
         LA    RSAVAREA,REGSAVE    GET ADDRESS OF SAVEAREA     @ZA08170
         CALLRTM TYPE=MEMTERM,COMPCOD=X'028'  TERMINATE MEMORY @ZA08170
         SETLOCK RELEASE,TYPE=ALL,RELATED=('ANY GM00 OR USER LOCKS')
*                                  RELEASE  ALL LOCKS          @ZA08170
         LR    RBASE2,RADSAV       RESTORE BASE REG            @ZA08170
         BAL   RRETURN,FRRDELET    DELETE FRR                  @ZA08170
         L     RIN3,CVTPTR         GET CVT PTR                 @ZA08170
         USING CVT,RIN3                                        @ZA08170
         L     RIN15,PSALCCAV      GET LCCA PTR                @ZA08170
         USING LCCA,RIN15                                      @ZA08170
         TM    LCCADSF2,LCCASRBM   SRB MODE?                   @ZA08170
         BO    SRBEXIT             YES                         @ZA08170
         L     RIN15,CVT0DS        DISPATCHER ENTRY            @ZA08170
         BR    RIN15               EXIT TO DISPATCHER          @ZA08170
SRBEXIT  L     RIN15,CVTSRBRT      SRB EXIT                    @ZA08170
         BR    RIN15               GO TO SRB EXIT              @ZA08170
         DROP  RIN3                                            @ZA08170
         DROP  RIN15                                           @ZA08170
         SPACE 2                                                 Y02714
CRSEG    LR    RLENGTH,SIZEREG     GET AREA SIZE FOR FQE         Y02714
         TM    FLAGS,GETMB         GETMAINB REQUEST?             Y02714
         BZ    CRSEG1              NO                            Y02714
         LRA   RWORK2,C0(0,SEGREG) IS SEGMENT VALID              Y02714
         BC    11,CRETFQE0         YES, CREATE FQE               Y02714
         LR    RIN0,SEGREG         GET START OF AREA             Y02714
         BAL   WORK,CRSEGA         GO TO CREATE SEGMENT          Y02714
         LR    RFQE,SEGREG         AREA ADDRESS                  Y02714
         LR    RWORK3,SEGREG       ALSO NEEDED FOR PGINCORE      Y02714
         L     RBASE1,BASE100      BASE AS FOR CSECT00         @Y30APYF
         USING BASE1,RBASE1        TELL ASSEMBER               @Y30APYF
         USING CRSEG11,WORK                                    @Y30APYF
         BAL   WORK,PGINCORE       GET REAL PAGE FOR TABLES      Y02714
CRSEG11  B     CRSEG0              OBTAINED O. K.                Y02714
         DROP  WORK                                            @Y30APYF
         L     RBASE1,BASE101      BASE AS FOR CSECT01         @Y30APYF
         USING G4KSRCH,RBASE1      TELL ASSEMBLER              @Y30APYF
         LR    RADDRM,RWORK3       FAILED, GET START OF AREA     Y02714
         B     CRETFQE2            RETURN STORAGE TO FBQE        Y02714
         SPACE 2                                                 Y02714
CRSEG0   L     RBASE1,BASE101      BASE AS FOR CSECT01         @Y30APYF
         LR    SEGREG,RWORK3       RESTORE AREA ADDRESS          Y02714
         LA    RFQE,CPAGE-PGTABLEN(0,RFQE)  NEW RESERVED AREA    Y02714
         ST    RFQE,LDARSVPT       SAVE FOR LATER PAGE TABLE     Y02714
         LA    RWORK2,PGTABLEN     GET PAGE TABLE SIZE           Y02714
         SR    RLENGTH,RWORK2      REDUCE FQE SIZE BY THIS SIZE  Y02714
         B     CRETFQE1            CREATE FQE BELOW RSVD. AREA   Y02714
         SPACE 2                                                 Y02714
CRSEG1   LR    RAUB,SEGREG         AREA ADDRESS                  Y02714
         AR    RAUB,SIZEREG        AREA UPPER BOUND (AUB)        Y02714
         LR    WORK,RAUB           SET TEMP AUB (TAUB) = AUB     Y02714
         N     WORK,SEGBND         ROUND TAUB DOWN TO SEG. BOUND Y02714
         LR    RWORK3,WORK         SET TEMP ALB (TALB)           Y02714
         BCTR  RWORK3,0             = TAUB - 1                   Y02714
         CR    RWORK3,SEGREG       TALB > AREA LOWER BOUND (ALB) Y02714
         BNH   CRETFQE0            NO, SEGMENT CREATE NOT NEEDED Y02714
         SR    R2,R2               INIT SEGMENT COUNT (SC) TO 0  Y02714
         N     RWORK3,SEGBND       ROUND TALB DOWN TO SEG. BOUND Y02714
CRSEG3   LRA   RIN0,C0(0,RWORK3)   IS THIS SEGMENT VALID         Y02714
         BC    11,CRSEG5           YES, MUST BE BOTTOM SEGMENT   Y02714
         LA    R2,C1(0,R2)         NO, INCREMENT SC              Y02714
         CR    RWORK3,SEGREG       TALB > ALB                    Y02714
         BNH   CRSEG6              NO, BOTTOM SEGMENT REACHED    Y02714
         S     RWORK3,SEGMENT      DECREMENT TALB BY 1 SEGMENT   Y02714
         B     CRSEG3              CONTINUE CHECKING             Y02714
         SPACE 2                                                 Y02714
CRSEG5   LTR   R2,R2               SC > 0                        Y02714
         BZ    CRETFQE0            NO, NO INVALID SEGMENTS       Y02714
         A     RWORK3,SEGMENT      INCREMENT TALB BY 1 SEGMENT   Y02714
CRSEG6   LA    RIN15,PGTABLEN      LENGTH OF PAGE TABLES         Y02714
         MR    RRETURN,R2          LENGTH NEEDED FOR PAGE TABLES Y02714
         LR    RIN1,RAUB           GET SIZE AVAILABLE IN TOP     Y02714
         SR    RIN1,WORK            SEGMENT (AUB - TAUB)         Y02714
         ST    RWORK3,TEMPSAV1     SAVE TALB OVER PGINCORE       Y02714
         CR    RIN1,RIN15          SIZE AVAIL < SIZE NEEDED?     Y02714
         BL    CRSEG7              YES, USE RESERVED AREA        Y02714
         LR    RIN1,RAUB           USE TOP OF NEW AREA           Y02714
         SR    RIN1,RIN15           FOR PAGE TABLES              Y02714
         SR    RLENGTH,RIN15       REDUCE FQE SIZE               Y02714
         LR    RWORK3,RIN1         GET PAGE TABLE ADDRESS        Y02714
         N     RWORK3,BND4K        ROUND DOWN TO PAGE BOUNDARY   Y02714
         ST    SEGREG,TEMPSAV2     SAVE AREA ADDRESS             Y02714
         L     RBASE1,BASE100      BASE AS FOR CSECT00         @Y30APYF
         USING BASE1,RBASE1        TELL ASSEMBER               @Y30APYF
         BAL   WORK,PGINCORE       GET REAL PAGE FOR TABLES      Y02714
         USING CRSEG66,WORK                                    @Y30APYF
CRSEG66  B     CRSEG6A             OBTAINED O. K.                Y02714
         DROP  WORK                                            @Y30APYF
         L     RBASE1,BASE101      BASE AS FOR CSECT01         @Y30APYF
         USING G4KSRCH,RBASE1      TELL ASSEMBLER              @Y30APYF
         L     RADDRM,TEMPSAV2     FAILED, GET START OF AREA     Y02714
         B     CRETFQE2            RETURN STORAGE TO FBQE        Y02714
         SPACE 2                                                 Y02714
CRSEG6A  L     RBASE1,BASE101      BASE AS FOR CSECT01         @Y30APYF
         L     RWORK3,TEMPSAV1     RESTORE TALB                  Y02714
         L     SEGREG,TEMPSAV2     RESTORE AREA ADDRESS          Y02714
         LR    RIN0,R2             SEGMENT COUNT                 Y02714
         SLL   RIN0,C8             POSITION TO BYTE 2            Y02714
         LR    RFQE,RIN1           SAVE TOP OF FQE               Y02714
         SRL   RWORK3,C16          GET SEGMENT INDEX FROM TALB   Y02714
         OR    RIN0,RWORK3         PUT IN BYTE 3                 Y02714
         BAL   WORK,CRSEGB         CREATE NECESSARY SEGMENTS     Y02714
         B     CRETFQE1            CREATE FQE BELOW PAGE TABLES  Y02714
         SPACE 2                                                 Y02714
CRSEG7   ST    WORK,TEMPSAV3       SAVE TAUB                     Y02714
         LR    RIN0,WORK           GET TAUB - 1 (AN ADDR IN      Y02714
         BCTR  RIN0,0               TOP SEGMENT)                 Y02714
         LR    RWORK3,RIN0         SAVE TAUB - 1 FOR PGINCORE    Y02714
         BAL   WORK,CRSEGA         GO CREATE TOP SEGMENT         Y02714
         LR    RIN1,SEGREG         SAVE AREA ADDRESS             Y02714
         ST    RAUB,TEMPSAV2       SAVE AUB                      Y02714
         N     RWORK3,BND4K        ROUND TAUB - 1 DOWN TO PAGE   Y02714
         L     RBASE1,BASE100      BASE AS FOR CSECT00         @Y30APYF
         USING BASE1,RBASE1        TELL ASSEMBER               @Y30APYF
         BAL   WORK,PGINCORE       GET REAL PAGE FOR TABLES      Y02714
         USING CRSEG77,WORK                                    @Y30APYF
CRSEG77  B     CRSEG8              OBTAINED O. K.                Y02714
         DROP  WORK                                            @Y30APYF
         L     RBASE1,BASE101      BASE AS FOR CSECT01         @Y30APYF
         USING G4KSRCH,RBASE1      TELL ASSEMBLER              @Y30APYF
         LR    RADDRM,RIN1         FAILED, GET START OF AREA     Y02714
         B     CRETFQE2            RETURN STORAGE TO FBQE        Y02714
         SPACE 2                                                 Y02714
CRSEG8   L     RBASE1,BASE101      BASE AS FOR CSECT01         @Y30APYF
         LR    SEGREG,RIN1         RESTORE AREA ADDRESS          Y02714
         L     RWORK3,TEMPSAV1     RESTORE TALB                  Y02714
         L     RAUB,TEMPSAV2       RESTORE AUB                   Y02714
         LA    RIN0,PGTABLEN       LENGTH OF PAGE TABLES         Y02714
         SR    RAUB,RIN0           NEW RESERVED AREA             Y02714
         ST    RAUB,LDARSVPT       SAVE FOR LATER PAGE TABLES    Y02714
         SR    RLENGTH,RIN0        REDUCE FQE SIZE               Y02714
         BCTR  R2,0                REDUCE SC BY 1                Y02714
         LTR   RIN0,R2             ANY SEGMENTS LEFT TO CREATE?  Y02714
         LR    RFQE,RAUB           TOP ADDRESS OF FQE            Y02714
         BNP   CRETFQE1            NO, CREATE FQE                Y02714
         LR    R2,RIN0             RESTORE SC                    Y02714
         L     WORK,TEMPSAV3       RESTORE TAUB                  Y02714
         S     WORK,SEGMENT        GO DOWN 1 SEGMENT             Y02714
         B     CRSEG6              GO PROCESS REST OF SEGMENTS   Y02714
         SPACE 5                                                 Y02714
*                                                                Y02714
*        SUBROUTINE TO INTERFACE WITH THE RSM CREATE SEGMENT     Y02714
*        ROUTINE                                                 Y02714
*                                                                Y02714
         SPACE 2                                                 Y02714
CRSEGA   SRL   RIN0,C16            GET SEGMENT INDEX             Y02714
         LA    RIN1,ONESEG         GET A ONE IN BYTE 2           Y02714
         OR    RIN0,RIN1           SET SEGMENT COUNT TO 1        Y02714
         L     RIN1,LDARSVPT       RESERVED AREA FOR PAGE TABLES Y02714
CRSEGB   L     RIN15,VCRSEG        "CREATE SEGMENT" ENTRY ADDRESSY02714
         LA    RSAVAREA,REGSAVE    POINT TO REG. SAVE AREA       Y02714
         BALR  RRETURN,RIN15       CREATE SEGMENT                Y02714
         L     RBASE2,G4KSAVE+C52  RESTORE BASE REGISTER         Y02714
         LTR   RRETCODE,RRETCODE   IS RETURN CODE ZERO           Y02714
         BZR   WORK                YES, RETURN                   Y02714
         LA    RIN0,CRSEGERR       INDICATE ERROR IN CREATE SEG. Y02753
STBRNDX  STC   RIN0,FRRBRNDX       STORE FOR FRR                 Y02753
         ABEND X'C0D',DUMP,,SYSTEM RECORD ERROR, TERMINATE USER  Y02753
*
*        REQUEST WAS SQA, CHAIN IN AN FQE AND GET A PAGE TO BACK UP
*        THE PAGE JUST GOTTEN FROM THE FBQE
*
CRETFQE  LR    RLENGTH,SIZEREG     GET AREA SIZE FOR FQE         Y02714
CRETFQE0 LR    RFQE,SEGREG         AREA ADDRESS                  Y02714
         AR    RFQE,SIZEREG        TOP OF AREA + 1               Y02714
CRETFQE1 LA    RWORK2,FQESLNTH     GET FQE LENGTH                Y02714
         SR    RFQE,RWORK2         START OF FQE                  Y02714
         ST    RFQE,FQEPTR(0,RPREDQE) CHAIN IN FQE               Y02714
         LR    RWORK3,RFQE         GET START OF FQE              Y02714
         N     RWORK3,BND4K        AND ROUND DOWN TO PG BOUNDARY Y02714
         LR    RADDR,SEGREG        SAVE AREA ADDRESS             Y02714
         L     RBASE1,BASE100      BASE AS FOR CSECT00         @Y30APYF
         USING BASE1,RBASE1        TELL ASSEMBER               @Y30APYF
         BAL   WORK,PGINCORE       BRING PAGE INTO STORAGE       Y02714
         USING CRETFQ11,WORK                                   @Y30APYF
CRETFQ11 B     CRETFQE3            STORAGE WAS AVAILABLE       @Y30APYF
         DROP  WORK                                            @Y30APYF
         L     RBASE1,BASE101      BASE AS FOR CSECT01         @Y30APYF
         USING G4KSRCH,RBASE1      TELL ASSEMBLER              @Y30APYF
*                                  STORAGE NOT AVAILABLE, MUST   Y02714
*                                  RESTORE STORAGE TO PQE        Y02714
         LR    RADDRM,RADDR        GET START OF AREA             Y02714
CRETFQE2 L     RPQEM,SAVEPQE       GET PQE ADDR SAVED IN FBQSRCH Y02714
         L     RBASE1,BASE100      BASE AS FOR CSECT00         @Y30APYF
         USING BASE1,RBASE1        TELL ASSEMBER               @Y30APYF
         BAL   RRETURN,MRELEASE    GO RETURN STORAGE TO PQE      Y02714
         L     RBASE1,BASE101      BASE AS FOR CSECT01         @Y30APYF
         USING G4KSRCH,RBASE1      TELL ASSEMBLER              @Y30APYF
         MVI   OUTSW,REALOUT       INDICATE OUT OF REAL          Y02714
         L     RPREDQE,G4KSAVE+C4  GET PREVIOUS DQE POINTER      Y02714
         SR    RIN15,RIN15         SET LARGEST AVAIL = 0         Y02714
         ST    RIN15,DQEPTR(RPREDQE)  CLEAR NEXT DQE POINTER TO  Y02714
*                                  UNCHAIN DUMMY DQE             Y02714
         B     G4KSR1              RETURN, STORAGE NOT OBTAINED  Y02714
         SPACE 2                                                 Y02714
CRETFQE3 L     RBASE1,BASE101      BASE AS FOR CSECT01         @Y30APYF
         SR    RWORK2,RWORK2       ZERO NEXT FQE PTR             Y02714
         ST    RWORK2,FQEPTR(0,RFQE)  AND REGION FLAG            Y02714
         ST    RLENGTH,FQELNTH(0,RFQE)  PUT SIZE IN FQE          Y02714
         LR    SEGREG,RADDR        RESTORE AREA ADDRESS          Y02714
         TM    SPFLAGS,LSQA        LSQA REQUEST?                 Y02714
         BZ    ALLOCFD             NO, GO FINISH                 Y02714
         LR    RRETURN,SEGREG      GET AREA ADDRESS FOR SMF      Y02714
         LR    RIN15,SIZEREG       GET SIZE FOR SMF              Y02714
         L     RWORK,AGMSMF        SET UP BASE REG & ENTRY POINT Y02714
         BALR  RCOMRET1,RWORK      GO TO SMF INTERFACE ROUTINE   Y02714
         LR    SEGREG,RRETURN      RESTORE AREA ADDRESS          Y02714
         B     ALLOCFD             GO FINISH UP                  Y02714
         SPACE 2
SETUPCSA L     RIN15,VPFP2         GET FIND PAGE ENTRY THAT      Y02714
         ST    RIN15,VPFP           REQUIRES SALLOC LOCK         Y02714
         L     R2,PSAAOLD          GET CURRENT ASCB              Y02714
         USING ASCB,R2                                           Y02714
         L     R2,ASCBRSM          GET RSM HEADER ADDRESS        Y02714
         DROP  R2                                                Y02714
         L     RIN3,CVTPTR         GET CVT ADDRESS               YO2714
         USING CVT,RIN3                                          Y02714
         L     RIN3,CVTPVTP        GET PVT ADDRESS               Y02714
         DROP  RIN3                                              Y02714
         B     SETUPKEY            CONTINUE                      Y02714
*
*        CALL FIND PAGE TO PUT KEY INTO XPT
*
SETUPREG L     RIN15,VPFP1         GET FIND PAGE ENTRY THAT      Y02714
         ST    RIN15,VPFP           REQUIRES LOCAL MEMORY LOCK   Y02714
SETUPKEY ST    SIZEREG,SAVESIZE    SAVE SIZE                     Y02714
         SRL   SIZEREG,C12         NUMBER OF 4K BLOCKS           Y02714
         SR    RWORK2,RWORK2       KEY 0, NO FETCH PROTECT
         ST    SEGREG,SAVESEG      SAVE ADDRESS
         CH    RSPID,H252          SUBPOOL 252?                  Y02714
         BE    CALLPFP             YES, GO CALL FIND PAGE        Y02714
         MVC   FETCH,LSPQEKEY      GET PROTECT KEY               Y02714
         TM    SPFLAGS,FPROTECT    SHOULD FETCH PROTECT BE SET?  Y02714
         BZ    GETKEY              NO                            Y02714
         OI    FETCH,FETCHON       SET FETCH PROTECT ON
GETKEY   IC    RWORK2,FETCH        GET PROTECT KEY               Y02714
CALLPFP  L     RIN15,VPFP          FIND PAGE                     Y02714
         LR    RIN1,SEGREG         START ADDRESS                 Y02714
         BALR  RRETURN,RIN15       GO TO FIND PAGE
         LTR   RRETCODE,RRETCODE   IS RETURN CODE ZERO           Y02714
         BZ    SETUPPTE            YES, MARK PAGES ASSIGNED      Y02714
         LA    RIN0,C4             CONSTANT OF 4                 Y02714
         CR    RRETCODE,RIN0       IS RETURN CODE 4              Y02714
         BNE   PFPRC8              NO, ERROR                     Y02714
         LA    RIN1,PGTABLEN       YES, GET SPACE FOR PAGE TABLESY02714
         ICM   RIN1,MASK1,LDACBSP  GET LSQA SUBPOOL              Y02714
         LR    RIN0,RIN1           SAVE IN CASE OF FREEMAIN      Y02714
         L     RBASE1,BASE100      BASE AS FOR CSECT00         @Y30APYF
         USING BASE1,RBASE1        TELL ASSEMBER               @Y30APYF
         BAL   RRETURN,GETMAINB    GO GET SPACE                  Y02714
         L     RBASE1,BASE101      BASE AS FOR CSECT01         @Y30APYF
         USING G4KSRCH,RBASE1      TELL ASSEMBLER              @Y30APYF
         LRA   WORK,C0(0,SEGREG)   HAS SEGMENT BECOME VALID      Y02714
         BC    11,SEGVALID         YES, GO FREE SPACE            Y02714
         LR    RIN0,SEGREG         START ADDRESS                 Y02714
         SRL   RIN0,C16            SEGMENT INDEX                 Y02714
         LA    WORK,ONESEG         GET A 1 IN BYTE 2             Y02714
         OR    RIN0,WORK           SET SEGMENT COUNT TO 1        Y02714
         BAL   WORK,CRSEGB         GO CREATE SEGMENT             Y02714
         B     CALLPFP             GO GET PAGE TABLE ADDRESSES   Y02714
         SPACE 2                                                 Y02714
PFPRC8   L     RRETURN,SAVESEG     GET ADDRESS FOR SMF           Y02753
         L     RIN15,SAVESIZE      GET SIZE FOR SMF              Y02753
         L     RWORK,AGMSMF        SET UP BASE REG & ENTRY POINT Y02753
         BALR  RCOMRET1,RWORK      GO TO SMF INTERFACE ROUTINE   Y02753
*                                  TO GET TCT AND CURRGNTP       Y02753
*                                  UPDATED                       Y02753
         LA    RIN0,FNDPGERR       INDICATE FIND PAGE ERROR      Y02753
         B     STBRNDX             GO TERMINATE USER             Y02753
         SPACE 2                                                 Y02753
SETUPPTE LR    RPTE,RIN0           SET UP PTE REGISTER           Y02714
ADPAGE   A     SEGREG,PAGE         NEXT PAGE ADDRESS
         OI    PGTBITS,PGTPAM      MARK PAGE ASSIGNED            Y02714
         STC   RWORK2,XPTPROT      PUT PROTECT KEY IN XPT
         NI    XPTFLAGS,ALL-XPTCKF TURN CHANGE KEY BIT OFF     @Z40EPYG
         BCT   SIZEREG,ENDSEG      PROCESS NEXT PAGE             Y02714
         L     RRETURN,SAVESEG     GET ADDRESS FOR SMF
         L     RIN15,SAVESIZE      GET SIZE FOR SMF
         B     CALLSMF1
         SPACE 2
ENDSEG   STH   SEGREG,SEGTEST      TEST FOR END
         TM    SEGTEST,END          OF SEGMENT
         BZ    CALLPFP             YES, CALL FIND PAGE           Y02714
         LA    REPTE,XPTLEN(REPTE) NO, GET NEXT XPTE             Y02714
         LA    RPTE,PGTLEN(RPTE)   NEXT PTE                      Y02714
         B     ADPAGE              RETURN TO MAINSTREAM          Y02714
         SPACE 2                                                 Y02714
SEGVALID LR    RRETURN,SEGREG      SAVE START ADDRESS            Y02714
         L     RBASE1,BASE100      BASE AS FOR CSECT00         @Y30APYF
         USING BASE1,RBASE1        TELL ASSEMBER               @Y30APYF
         BAL   RCOMRET1,FMAINB     FREE PAGE TABLE SPACE         Y02714
         L     RBASE1,BASE101      BASE AS FOR CSECT01         @Y30APYF
         USING G4KSRCH,RBASE1      TELL ASSEMBLER              @Y30APYF
         LR    SEGREG,RRETURN      RESTORE START ADDRESS         Y02714
         B     CALLPFP             TRY AGAIN                     Y02714
         SPACE 2
         DROP  RPTE                                              Y02714
         DROP  REPTE
         EJECT
***********************************************************************
*
*        THIS ROUTINE SEARCHES AN FBQE CHAIN FOR 4K MULTIPLES
*
*              INPUT
*                   SIZEREG - LENGTH IN BYTES
*                   RRETURN - RETURN ADDRESS
*              OUTPUT
*                   SEGREG  - ADDRESS OF AREA ASSIGNED
*                   RIN15   - LARGEST AVAILABLE IF REQUEST NOT HONORED
*                   ALL REMAINING REGISTERS RESTORED
*
*              NOTE  REGISTER 8 CONTAINS THE CSECT01 VALUE
*
***********************************************************************
         SPACE 2                                                 Y02714
FBQSRCH  EQU   *
         STM   RIN0,RIN15,FBQSAVE  SAVE REGISTERS
         SR    RWORK2,RWORK2       SET LARGEST AVAILABLE         Y02714
         ST    RWORK2,LARSOFAR      TO ZERO                      Y02714
         LA    RAREG,C4            INITIALIZE TO BACKWARD POINTER
         TM    SPFLAGS,SQA+CSA     SQA OR CSA SUBPOOL?           Y02714
         BNZ   GETPQEC             YES, CHECK SPACE LEFT         Y02714
         TM    SPFLAGS,LSQA+SWA+AUK  LSQA, SWA OR AUTH U. K. SP? Y02714
         BNZ   GETPQEL             GET LSQA PQE                  Y02714
         SR    RAREG,RAREG         SET TO FORWARD POINTER, FBQE  Y02714
         L     RWORK2,LDATCB       GET TCB ADDRESS               Y02714
         USING TCB,RWORK2                                        Y02714
         L     RPQE,TCBPQE         GET DUMMY PQE POINTER         Y02714
         DROP  RWORK2                                            Y02714
GETPQE   LTR   RPQE,RPQE           IS THERE A PQE POINTER?       Y02714
         BZ    RETNOTFD            NO, RETURN, STORAGE NOT FOUND Y02714
         LA    RWORK3,DUMFBQE      ADDR OF MRELEASE DUMMY FBQE   Y02714
         L     RPQE,PQEFPQE(RPQE)  GET ADDRESS OF ACTUAL PQE
         ST    RPQE,SAVEPQE        SAVE PQE POINTER FOR G4KSRCH  Y02714
         L     RFBQE,C0(RAREG,RPQE)  GET PROPER FBQE
ANYFBQE  CR    RFBQE,RPQE          ANY FBQES?                    Y02714
         BE    RETNOTFD            NO, RETURN, STORAGE NOT FOUND
         TM    SPFLAGS,SQA+CSA     SQA OR CSA SUBPOOL ?        @ZA27466
         BNZ   BESTCSA             YES, FIND BEST FITTING BLK  @ZA27466
         L     SEGREG,FBQAREA(0,RFBQE)  GET FBQE AREA ADDRESS  @ZA27466
         TM    SPFLAGS,LSQA+SWA+AUK  LSQA, SWA OR AUTH U. K. SP? Y02714
         BZ    FBQSPPSP            NO, PROBLEM PROGRAM SUBPOOL   Y02714
         C     SEGREG,CURRGNTP     FBQE START BELOW CURRGNTP?    Y02714
         BL    RETNOTFD            YES, STORAGE NOT AVAILABLE    Y02714
CKFBQESZ CLC   LARSOFAR,SIZE(RFBQE) LARGEST SO FAR?              Y02714
         BNL   CHLAST              NO
         CR    RWORK3,RFBQE        IS THIS DUMMY FBQE            Y02714
         BE    CHLAST              YES, CAN'T USE IT             Y02714
         TM    FLAGS,ERGNRCHD      IS V=V REGION IN THIS FBQE?   Y02714
         BZ    SETLARGS            NO, SET LARGEST SO FAR        Y02714
         SR    RSIZE,SEGREG        GET AVAILABLE SPACE IN FBQE   Y02714
         C     RSIZE,LARSOFAR      AVAILABLE SPACE > LARSOFAR    Y02714
         BNH   RETNOTFD            NO, STORAGE NOT AVAILABLE     Y02714
         ST    RSIZE,LARSOFAR      SET LARSOFAR TO AVAIL SPACE   Y02714
         CR    SIZEREG,RSIZE       REQUEST SIZE <= AVAIL SPACE   Y02714
         BH    RETNOTFD            NO, STORAGE NOT AVAILABLE     Y02714
         MVC   LARSOFAR,SIZE(RFBQE)  YES, SET TO FBQE AREA SIZE  Y02714
         B     USEFBQE             USE THIS FBQE                 Y02714
         SPACE 2                                                 Y02714
SETLARGS MVC   LARSOFAR,SIZE(RFBQE) SAVE LARGEST                 Y02714
         C     SIZEREG,LARSOFAR    LARGE ENOUGH?
         BH    CHLAST              NO
USEFBQE  L     RLGSOFAR,LARSOFAR   GET BYTES LEFT OVER           Y02714
         SR    RLGSOFAR,SIZEREG    EXACT SIZE?                   Y02714
         BE    DEQUEUE             YES - DEQUEUE FBQE
SAVXCESS ST    RLGSOFAR,SIZE(RFBQE)  REFLECT REMAINING CORE    @ZA27466
         AR    SEGREG,RLGSOFAR     GET ADDRESS OF AREA TO BE     Y02714
*                                  ASSIGNED IF HIGH
         LTR   RAREG,RAREG         REQUEST OBTAINED HIGH?
         BNE   RETFOUND            YES
         SR    SEGREG,RLGSOFAR     DECREMENT ADDRESS IF LOW
         LR    RWORK2,SIZEREG      COPY REQUESTED SIZE         @ZA27466
         AR    RWORK2,SEGREG       CALC NEW FREE AREA ADDR     @ZA27466
         ST    RWORK2,FBQAREA(RFBQE) STORE IT INTO FBQE        @ZA27466
RETFOUND TM    SPFLAGS,CSA         CSA SUBPOOL?                  Y02714
         BZ    RETFND1             NO                            Y02714
         TM    SPFLAGS,SQA         SUBPOOL 227, 228, OR 239    @Y30APYF
         BO    RETFND1             YES, SKIP SRM                 Y02714
         LR    RWORK2,SEGREG       SAVE AREA ADDRESS             Y02714
         LNR   RIN0,SIZEREG        GET - REQUEST SIZE            Y02714
         STM   REGB,RIN1,LOCKSAVE  SAVE REGS AS IS DONE BY     @Y30APYF
*                                  CODE AT LABEL SRM           @Y30APYF
         L     REGB,ASRM           LOAD UP ITS BASE REG        @Y30APYF
         BALR  RCOMRET1,REGB       TELL SRM, CSA ALLOCATED     @Y30APYF
         LR    SEGREG,RWORK2       RESTORE AREA ADDRESS          Y02714
RETFND1  NI    FLAGS,ALL-VARPASS2-ERGNRCHD RESET FLAGS           Y02714
         LM    RIN0,RWORK2,FBQSAVE RESTORE                       Y02714
         LM    RLENGTH,RIN15,FBQSAVE+C40  REGS                   Y02714
         BR    RRETURN             RETURN - STORAGE FOUND
         SPACE 2
CHLAST   L     RFBQE,C0(RAREG,RFBQE)  GET NEXT FBQE
         B     ANYFBQE             CHECK FOR END OF CHAIN        Y02714
         SPACE 2                                                 Y02714
*
*        THIS ROUTINE PERFORMS A BEST FIT SEARCH OF FBQE'S IN  @ZA27466
*        ORDER TO SATISFY REQUESTS FOR CSA, OR SQA THAT HAS    @ZA27466
*        EXPANDED INTO CSA.  FOR REQUESTS OF 4K, FBQE'S ARE    @ZA27466
*        SEARCHED DOWN FROM HIGH CSA ADDRESSES.  FOR REQUESTS  @ZA27466
*        GREATER THAN 4K, FBQE'S ARE SEARCHED UP FROM LOW CSA  @ZA27466
*        ADDRESSES.                                            @ZA27466
*
         SPACE 1
BESTCSA  L     REGA,LGPOSNUM       GET LARGEST POSITIVE NUMBER @ZA27466
AREAADDR L     SEGREG,FBQAREA(0,RFBQE)  GET FBQE AREA ADDRESS  @ZA27466
         CLC   LARSOFAR,SIZE(RFBQE) LARGEST AREA SO FAR ?      @ZA27466
         BNL   CHKSIZE             NO, DO NOT SAVE IT          @ZA27466
         MVC   LARSOFAR,SIZE(RFBQE) SAVE NEW LARGEST-SO-FAR    @ZA27466
CHKSIZE  C     SIZEREG,SIZE(RFBQE) BIG ENOUGH TO FILL REQUEST? @ZA27466
         BH    NEXTFBQE            NO, GET NEXT FBQE           @ZA27466
         CR    RWORK3,RFBQE        DUMMY FBQE                  @ZA27466
         BE    NEXTFBQE            YES, GET NEXT FBQE          @ZA27466
         L     RIN15,SIZE(RFBQE)   GET FREE AREA SIZE          @ZA27466
         SR    RIN15,SIZEREG       CALCULATE EXCESS FREE       @ZA27466
         BE    DEQUEUE             BR IF EXACT FIT             @ZA27466
         CR    RIN15,REGA          CLOSEST SO FAR ?            @ZA27466
         BNL   NEXTFBQE            NO, GET NEXT FBQE           @ZA27466
         LR    REGB,RFBQE          SAVE ADDR CLOSEST FBQE      @ZA27466
         LR    REGA,RIN15          SAVE CLOSEST EXCESS         @ZA27466
NEXTFBQE L     RFBQE,C0(RAREG,RFBQE) GET ADDR NEXT FBQE        @ZA27466
         CR    RFBQE,RPQE          ANY MORE FBQE'S ?           @ZA27466
         BNE   AREAADDR            YES, CHECK IT OUT           @ZA27466
         C     REGA,LGPOSNUM       ANY CLOSE FBQE FOUND ?      @ZA27466
         LR    RFBQE,REGB          GET FBQE ADDRESS            @ZA27466
         LR    RIN15,REGA          GET EXCESS FREE             @ZA27466
         L     SEGREG,FBQAREA(0,RFBQE) GET FREE AREA ADDRESS   @ZA27466
         BNE   SAVXCESS            BR, CLOSE FBQE FOUND        @ZA27466
         SPACE 2                                               @ZA27466
RETNOTFD L     RIN15,LARSOFAR      PICK UP LARGEST AVAILABLE
         NI    FLAGS,ALL-ERGNRCHD  RESET REGION FLAG             Y02714
         LM    RIN0,RRETURN,FBQSAVE  RESTORE REGS
         B     C4(RRETURN)         STORAGE NOT FOUND
         SPACE 2
DEQUEUE  LM    REGA,REGB,FWDPTR(RFBQE)  ELIMINATE
         ST    REGA,FWDPTR(REGB)             FBQE
         ST    REGB,BCKPTR(REGA)                  FROM QUEUE
         LR    RIN1,RFBQE          GET ADDRESS TO FREE
         LR    RRETURN,SEGREG      SAVE ADDRESS OF AREA          Y02714
         L     RBASE1,BASE100      BASE AS FOR CSECT00         @Y30APYF
         USING BASE1,RBASE1        TELL ASSEMBER               @Y30APYF
         BAL   RCOMRET1,FMAINC     FREEMAIN FBQE               @Z30ENWD
         L     RBASE1,BASE101      BASE AS FOR CSECT01         @Y30APYF
         USING G4KSRCH,RBASE1      TELL ASSEMBLER              @Y30APYF
         LR    SEGREG,RRETURN      RESTORE ADDRESS OF AREA
         B     RETFOUND
         SPACE 2                                                 Y02714
GETPQEC  L     RCVT,CVTPTR         GET CVT ADDRESS               Y02714
         USING CVT,RCVT                                          Y02714
         L     RGDA,CVTGDA         GET GDA ADDRESS               Y02714
         DROP  RCVT                                              Y02714
         USING GDA,RGDA                                          Y02714
         TM    GDAFLAGS,SQATHRS2   HAS CRITICAL THRESH PASSED?   Y02714
         BZ    GETPQEC1            NO, GET PQE                   Y02714
         TM    SPFLAGS,SQA         SQA? (EXPANSION INTO CSA)     Y02714
         BO    GETPQEC1            YES, GET CSA PQE              Y02714
         L     RWORK2,SQASPLFT     GET SQA SPACE LEFT            Y02714
         C     RWORK2,PAGE         IS THERE ONLY 1 PAGE?         Y02714
         BNH   RETNOTFD            YES, SAVE IT FOR SQA          Y02714
GETPQEC1 LA    RPQE,CSAPQEP-C8     GET CSA DUMMY PQE POINTER     Y02714
         DROP  RGDA                                              Y02714
         C     SIZEREG,PAGE        TRYING TO FIND 1 PAGE ?     @ZA27466
         BE    GETPQE              YES, SEARCH FROM TOP OF CSA @ZA27466
         SR    RAREG,RAREG         NO, SEARCH FROM BOTTOM      @ZA27466
         B     GETPQE              CONTINUE                      Y02714
         SPACE 2                                                 Y02714
GETPQEL  LA    RPQE,ASDPQE-C8      GET A. S. DUMMY PQE POINTER   Y02714
         B     GETPQE              CONTINUE                      Y02714
         SPACE 2                                                 Y02714
FBQSPPSP L     RSIZE,LDALIMIT      GET INSTALLATION REGION LIMIT Y02714
         LTR   RSIZE,RSIZE         IS THERE ONE                  Y02714
         BNZ   FBQSPP2             YES, GO PROCESS IT            Y02714
         L     RSIZE,VVREGSZ       GET V=V REGION SIZE           Y02714
         LTR   RSIZE,RSIZE         IS ONE GIVEN?                 Y02714
         BZ    CKCRGNTP            NO                            Y02714
         TM    CODE1,VARBLE        VARIABLE REQUEST?             Y02714
         BNO   CKCRGNTP            NO                            Y02714
         TM    FLAGS,VARPASS2      IS THIS SECOND ATTEMPT?       Y02714
         BO    CKCRGNTP            YES, IGNORE REGION SIZE       Y02714
FBQSPP1  TM    FLAGS,ERGNRCHD      EXPLICIT REGION SIZE PASSED?  Y02714
         BO    RETNOTFD            YES, STORAGE NOT FOUND        Y02714
         A     RSIZE,PQEREGN(0,RPQE)  GET REGION TOP             Y02714
         LR    WORK,SEGREG         GET FBQE AREA ADDRESS         Y02714
         A     WORK,SIZE(0,RFBQE)  TOP OF FREE AREA              Y02714
         CR    RSIZE,WORK          IS REGION WITHIN FREE AREA?   Y02714
         BH    CKCRGNTP            NO                            Y02714
         OI    FLAGS,ERGNRCHD      YES, INDICATE THIS            Y02714
CKCRGNTP C     SEGREG,CURRGNTP     IS FBQE ABOVE CURRGNTP?       Y02714
         BH    RETNOTFD            YES, CANNOT CONTINUE          Y02714
         B     CKFBQESZ            TRY THIS FBQE                 Y02714
         SPACE 2                                                 Y02714
FBQSPP2  L     WORK,VVREGSZ        GET V=V REGION SIZE           Y02714
         LTR   WORK,WORK           IS ONE GIVEN                  Y02714
         BZ    FBQSPP1             NO                            Y02714
         TM    CODE1,VARBLE        VARIABLE REQUEST?             Y02714
         BNO   FBQSPP1             NO                            Y02714
         TM    FLAGS,VARPASS2      IS THIS SECOND ATTEMPT        Y02714
         BO    FBQSPP1             YES, IGNORE REGION SIZE       Y02714
         CR    WORK,RSIZE          IS V=V REGION < INST. LIMIT   Y02714
         BNL   FBQSPP1             NO, LEAVE AS IS               Y02714
         LR    RSIZE,WORK          YES, SET V=V REGION AS LIMIT  Y02714
         B     FBQSPP1             CONTINUE                      Y02714
         EJECT
***********************************************************************
*
*        CHECK TO SEE IF SUBPOOLS 227, 228, 239, 245, OR 255 PAGES ARE
*        IN STORAGE, AND IF NOT TRY TO BRING IT IN. KEY IS SET IF
*        PAGE IS NOT ALREADY IN STORAGE.
*
*              INPUTS
*                   RWORK3 - VIRTUAL ADDRESS OF PAGE TO BE CHECKED
*                   WORK   - RETURN ADDRESS
*              OUTPUT
*                   RETURN +0 IF PAGE IS IN STORAGE
*                   RETURN +4 IF PAGE CANNOT BE BROUGHT INTO STORAGE
*                             (NO REAL STORAGE AVAILABLE)
*              WORK REGISTERS
*                   RIN0, RPVT, RWORK2, RCOMRET1, RRETURN, RWORK4,
*                   RIN15
*
*              NOTE REGISTER 8 CONTAIN THE CSECT00 VALUE
*
***********************************************************************
         SPACE 2
IEAVGM00 CSECT                                                 @Y30APYF
         SPACE 2
PGINCORE L     R3,APGINCOR         GET ADDRESS OF PGINC01      @YM07648
         BR    R3                  GO TO PAGE IN CORE ROUTINE  @YM07648
         SPACE 2
IEAVGM01 CSECT                                                 @YM07648
         SPACE 2
         USING BASE1,RBASE1                                    @Y30APYF
         USING PGINC01,R3
PGINC01  LRA   RIN15,C0(RWORK3)    IS IT IN STORAGE              Y02714
         BZR   WORK                YES - RETURN                  Y02714
         LR    RWORK2,RPREVFQE     SAVE PREVIOUS FQE ADDRESS
         LR    RIN1,RWORK3         GET VA FOR SQA/LSQA ALLOCATION
         TM    SPFLAGS,LSQA        LSQA REQUEST?                 Y02714
         BO    PGINCOR2            YES
         L     RIN0,PAGE           GET PAGE SIZE                 Y02714
         LNR   RIN0,RIN0           INDICATE GETMAIN              Y02714
         DROP  R3                  DROP ADDRESSABILITY
         STM   REGB,RIN1,LOCKSAVE  SAVE REGS AS IS DONE BY CODE@Y30APYF
*                                  AT LABEL SRM                @Y30APYF
         L     REGB,ASRM           LOAD UP ITS BASE REG        @Y30APYF
         BALR  RCOMRET1,REGB       TELL SRM, CSA ALLOCATED     @Y30APYF
PGINCOR1 BAL   RCOMRET1,TRNONPVT   INHIBIT GETMAINS              Y02714
         USING PVT,RPVT            REG WAS LOADED BY "TRNONPVT"  Y02714
         L     RIN15,PVTPSQA       GET ENTRY FOR OBTAIN L/SQA PG Y02714
         DROP  RPVT                                              Y02714
*
         BALR  RRETURN,RIN15       OBTAIN PAGE FROM RSM ROUTINE  Y02714
*
         USING PVT,RPVT                                          Y02714
         NI    PVTFLAG1,ALL-PVTBGMS  TURN OFF GETMAIN INHIBITED FLAG
         DROP  RPVT                                              Y02714
         USING PGINC01,R3                                      @YM07648
         BALR  R3,0                GET VALUE FOR BASE REG      @YM07648
         LA    RIN0,*-PGINC01      GET ABSOLUTE VALUE TO CORRECT BASE
         SR    R3,RIN0             CORRECT BASE AMOUNT         @YM07648
         LR    RPREVFQE,RWORK2     RESTORE PREVIOUS FQE ADDRESS
         LTR   RIN15,RIN15         PAGE OBTAINED
         BZ    PGINCOR3            YES, PAGE IN STORAGE          Y02714
         B     C4(WORK)            RETURN - PAGE NOT IN STORAGE
         SPACE 2                                                 Y02751
PGINCOR2 BAL   RCOMRET1,GTSALLOC   GET SALLOC LOCK               Y02751
         B     PGINCOR1            GO OBTAIN PAGE                Y02751
*
*        KEY ZERO NO FETCH PROTECT HAS BEEN SET BY RSM. MOST REQUESTS
*        FOR CSA ARE FOR NON ZERO KEY STORAGE SO SET KEY FOR ALL CSA
*        REQUESTS. SQA AND LSQA ARE KEY ZERO NO FETCH PROTECT.
*
PGINCOR3 TM    SPFLAGS,CSA         SP OTHER THAN 245 OR 255    @Y30APYF
         BZR   WORK                NO, RETURN                    Y02714
         MVC   FETCH,LSPQEKEY      GET STGKEY                  @Y30APYF
         TM    SPFLAGS,FPROTECT    SHOULD F. P. BE SET         @Y30APYF
         BZ    NOFETCH             NO                          @Y30APYF
         OI    FETCH,FETCHON       SET F.P. ON                 @Y30APYF
NOFETCH  IC    RWORK2,FETCH        LOAD KEY                    @Y30APYF
         LRA   RWORK4,0(0,RWORK3)  GET REAL ADDRESS OF BLOCK     Y02714
         SSK   RWORK2,RWORK4       SET KEY ON FIRST 2K           Y02714
         LA    RWORK4,C2K(0,RWORK4)  POINT TO SECOND 2K          Y02714
         SSK   RWORK2,RWORK4       SET KEY ON REST OF PAGE       Y02714
         BR    WORK                RETURN                        Y02714
         SPACE 2
         DROP R3                                               @YM07648
         EJECT                                                   Y02714
**************************************************************** Y02714
*                                                                Y02714
*        SYSTEM RESOURCES MANAGER (SRM) INTERFACE ROUTINE        Y02714
*                                                                Y02714
*              INPUT                                             Y02714
*                   RIN0 - SIZE OF SQA OR CSA REQUEST;           Y02714
*                          NEGATIVE IF GETMAIN, POSITIVE IF      Y02714
*                          FREEMAIN                              Y02714
*                   RCOMRET1 - RETURN ADDRESS                    Y02714
*              OUTPUT                                            Y02714
*                   SQA SPACE LEFT (SQASPLFT) UPDATED AND        Y02714
*                   SRM BRANCHED TO IF NECESSARY                 Y02714
*
*              NOTE REGISTER 8 CONTAINS EITHER CSECT00 OR        Y02714
*                   CSECT01 VALUE                                Y02714
*                                                                Y02714
**************************************************************** Y02714
         SPACE 2                                               @Y30APYF
IEAVGM00 CSECT                                                 @Y30APYF
         SPACE 2                                                 Y02714
SRM      STM   REGB,RIN1,LOCKSAVE  SAVE REGISTERS 11-1           Y02714
         L     REGB,ASRM           GET ENTRY AND BASE FOR SRM    Y02714
         BR    REGB                GO TO SRM (AT SRMSTART)       Y02714
         SPACE 2                                                 Y02714
IEAVGM01 CSECT                                                   Y02714
         SPACE 2                                                 Y02714
         USING SRMSTART,REGB                                     Y02714
SRMSTART L     RIN1,CVTPTR         GET CVT POINTER               Y02714
         USING CVT,RIN1                                          Y02714
         L     RIN1,CVTGDA         GET GDA POINTER               Y02714
         USING GDA,RIN1                                          Y02714
         L     RWORK4,SQASPLFT     GET SQA SPACE LEFT            Y02714
         AR    RWORK4,RIN0         ADD REQUEST SIZE              Y02714
*                                  (NEGATIVE IF GETMAIN)         Y02714
         ST    RWORK4,SQASPLFT     SAVE NEW VALUE                Y02714
         TM    GDAFLAGS,SQATHRS1+SQATHRS2 EITHER THRESHOLD       Y02714
*                                  PREVIOUSLY PASSED?            Y02714
         BM    SRM3                YES,THRESHOLD 1 PASSED        Y02714
         BO    SRM4                YES, BOTH THRESHOLDS PASSED   Y02714
         C     RWORK4,THR1PASD     NO, THRESHOLD PASSED NOW?     Y02714
         BH    SRMRSTRG            NO, RESTORE REGS AND RETURN   Y02714
         C     RWORK4,THR2PASD     YES, SECOND THRESHOLD PASSED? Y02714
         BNH   SRM1                YES                           Y02714
         OI    GDAFLAGS,SQATHRS1   SET THRESH 1 PASSED           Y02714
         LA    RIN1,C1             INDICATE FIRST THRESHOLD      Y02714
         B     SRM2                GO SET UP SRM INTERFACE       Y02714
         SPACE 2                                                 Y02714
SRM1     OI    GDAFLAGS,SQATHRS1+SQATHRS2 SET THRESH 1 & 2 PASSEDY02714
         LA    RIN1,C2             INDICATE SECOND THRESHOLD     Y02714
SRM2     LR    WORK,RBASE2         SAVE BASE                     Y02714
         LA    RSAVAREA,REGSAVE    POINT TO REGISTER SAVE AREA   Y02714
         SYSEVENT SQALOW,ENTRY=BRANCH  NOTIFY SRM                Y02714
         LR    RBASE2,WORK         RESTORE BASE REGISTER         Y02714
         B     SRMRSTRG            GO RESTORE REGS AND RETURN    Y02714
         SPACE 2                                                 Y02714
SRM3     C     RWORK4,THR1CLRD     THRESHOLD 1 CLEARED?          Y02714
         BH    SRM5                YES                           Y02714
         C     RWORK4,THR2PASD     THRESHOLD 2 PASSED?           Y02714
         BH    SRMRSTRG            NO, RESTORE REGS AND RETURN   Y02714
         B     SRM1                YES                           Y02714
         SPACE 2                                                 Y02714
SRM4     C     RWORK4,THR2CLRD     THRESHOLD 2 CLEARED?          Y02714
         BNH   SRMRSTRG            NO, RESTORE REGS AND RETURN   Y02714
         C     RWORK4,THR1CLRD     THRESHOLD 1 CLEARED?          Y02714
         BH    SRM5                YES                           Y02714
         NI    GDAFLAGS,ALL-SQATHRS2 RESET THRESH 2 FLAG         Y02714
         LA    RIN1,C2             INDICATE SECOND THRESHOLD     Y02714
         B     SRM6                GO SET UP SRM INTERFACE       Y02714
         SPACE 2                                                 Y02714
SRM5     NI    GDAFLAGS,ALL-SQATHRS1-SQATHRS2 RESET THRESH 1 & 2 Y02714
         LA    RIN1,C1             INDICATE FIRST THRESHOLD      Y02714
SRM6     LR    WORK,RBASE2         SAVE BASE                     Y02714
         LA    RSAVAREA,REGSAVE    POINT TO REG. SAVE AREA       Y02714
         SYSEVENT SQAOK,ENTRY=BRANCH  NOTIFY SRM                 Y02714
         LR    RBASE2,WORK         RESTORE BASE REGISTER         Y02714
         SPACE 2                                                 Y02714
SRMRSTRG LM    REGB,RIN1,LOCKSAVE  RESTORE REGS 11-1             Y02714
         BR    RCOMRET1            RETURN                        Y02714
         SPACE 2                                                 Y02714
         DROP  RIN1,REGB                                         Y02714
         EJECT                                                   Y02751
**************************************************************** Y02751
*                                                                Y02751
*        SYSTEM TERMINATION ROUTINE INTERFACE (TO PUT ENTIRE     Y02751
*        SYSTEM INTO A WAIT STATE)                               Y02751
*                                                                Y02751
*        NOTE REGISTER 8 CONTAINS EITHER CSECT00 OR              Y02751
*             CSECT01 VALUE                                      Y02751
*                                                                Y02751
**************************************************************** Y02751
         SPACE 2                                                 Y02751
         USING STERMV,REGB                                       Y02751
STERMV   LA    REGB,STERMR         MODIFY ADDRESSABILITY         Y02751
         USING STERMR,REGB                                       Y02751
         LA    RWORK,WSC101        OUT OF VIRTUAL, CODE 101      Y02751
         LA    RWORK2,STRVIRT      POINT TO "VIRTUAL" FOR MSG    Y02751
         B     STERM1              CONTINUE                      Y02751
         SPACE 2                                                 Y02751
STERMR   LA    RWORK,WSC102        OUT OF REAL, CODE 102         Y02751
         LA    RWORK2,STRREAL      POINT TO "REAL" FOR MSG       Y02751
STERM1   L     RCVT,CVTPTR         POINT TO CVT                  Y02751
         USING CVT,RCVT                                          Y02751
         L     RIN15,CVTRMS        POINT TO RMS VECTOR TABLE     Y02751
         DROP  RCVT                                              Y02751
         USING RVT,RIN15                                         Y02751
         L     RIN15,RVTPTERM      TERM. ROUTINE ENTRY ADDRESS   Y02751
         DROP  RIN15                                             Y02751
         XC    STRLRB(LRBSIZE),STRLRB  CLEAR LOGREC RECORD BUFFR Y02751
         ST    RWORK,LRBWSC        STORE WAIT STATE CODE         Y02751
         MVI   LRBRCTYP,X'81'      SYSTEM TERM. RECORD TYPE      Y02751
         MVI   LRBRCLEN+C3,LRBSIZE LRB LENGTH                    Y02751
         LA    RIN0,STRWTO         ADDRESS OF WTO MSG            Y02751
         LRA   RIN1,STRLRB         ADDRESS OF LRB                Y02751
         STM   RIN0,RIN1,STRPL     PUT IN PARAMETER LIST         Y02751
         LRA   RIN1,STRPL          ADDRESS OF PARM LIST          Y02751
         STNSM SEGTEST,B'00000000' NO TRANSLATION OR INTERRUPTS  Y02751
         MVC   STRVIRT(C7),0(RWORK2)  PLACE "VIRTUAL" OR "REAL"  Y02751
*                                  IN MESSAGE                    Y02751
         BALR  RRETURN,RIN15       GO TO SYSTEM TERMINATION      Y02751
*                                  ROUTINE (NO RETURN WILL BE    Y02751
*                                  MADE)                         Y02751
         SPACE 2                                                 Y02751
         DROP  REGB                                              Y02751
         TITLE 'IEAVGM00   OS/VS2 GETMAIN / FREEMAIN SERVICE ROUTINE   *
               CSECT-IEASMFGF'
IEASMFGF CSECT
         ENTRY GMSMFCRE
         ENTRY FMSMFCRE
***********************************************************************
*
*              SMF CORE USED ROUTINES
*
*    CALLED WHEN 4K BLOCKS ARE OBTAINED OR FREED FROM SUBPOOLS OTHER
*                  THAN SQA OR CSA.
*
***********************************************************************
*
*          INPUT  - INITIALIZED CORE USED FIELDS IN TCT.
*                   FIELDS ARE INITIALIZED BY SCHEDULER.
*                 - REG 14 (RBLKAD) BEGINNING ADDRESS OF BLOCK,
*                   ASSUMED TO BE A 4K BOUNDARY.
*                 - REG 15 (RSIZE) SIZE OF BLOCK, ASSUMED TO BE A
*                   4K MULTIPLE
*          OUTPUT - MODIFIED CORE USED FIELDS IN TCT.
*
*        NOTE REGISTER 8 CAN CONTAIN EITHER CSECT00 OR CSECT01
*             VALUE
*
***********************************************************************
*
*              GETMAIN ROUTINE
*
*        DETERMINE IF THERE IS A TCT ASSOCIATED WITH THIS REQUEST.
*        CONVERT CURRENT ALLOCATED SPACE INTO ALB AND AUB
*              (ALB - LOW ADDRESS OF ALLOCATED CORE)
*              (AUB - HIGH ADDRESS PLUS 1 OF ALLOCATED CORE)
*        DETERMINE FROM WHICH END OF REGION CORE IS GIVEN.
*        UPDATE APPROPRIATE WATER MARK IF NECESSARY.
*
***********************************************************************
         SPACE 2                                                 Y02714
         MODID BR=NO                                             Y02714
         SPACE 2                                                 Y02714
         USING GMSMFCRE,RWORK
GMSMFCRE TM    SPFLAGS,SQA+CSA     SQA OR CSA REQUEST?           Y02714
         BNZR  RCOMRET1            RETURN TO CALLER              Y02714
         STM   RTCT,RCWRKA,GFSMFSVE  SAVE WORK REGISTERS
         LA    RCWRK,C0(RSIZE,RBLKAD)  DEVELOP AUB               Y02714
         L     RCWRKA,LDATCB       GET TCB ADDRESS               Y02714
         USING TCB,RCWRKA                                        Y02714
         TM    TCBTCTGF,TCBSMFGF   IS SMF RECORDING DISABLED?    Y02714
         BZ    CKLSQA              YES, SKIP SMF RECORDING       Y02714
         L     RTCT,TCBTCT         GET TCT POINTER
         LA    RTCT,0(0,RTCT)      CLEAR HIGH ORDER FLAG BYTE    Y02714
         LTR   RTCT,RTCT           IS THERE A TCT?
         BNP   CKLSQA              NO, SKIP SMF RECORDING        Y02714
         USING SMFTCT,RTCT
         L     RCORE,TCTCRTBL      INITIALIZE TCT CORE AREA PTR
         USING TCTCORE,RCORE
         TM    SPFLAGS,LSQA+SWA+AUK  HIGH END SUBPOOL?           Y02714
         BNZ   NOTBOT              YES                           Y02714
         C     RCWRK,TCTLWM        AUB > LWM?                    Y02714
         BNH   CKCURGN             NO                            Y02714
         ST    RCWRK,TCTLWM        STORE NEW LWM                 Y02714
CKCURGN  C     RCWRK,CURRGNTP      HAS CURRGNTP BEEN EXCEEDED?   Y02714
         BNH   RCEXITA             NO                            Y02714
         ST    RCWRK,CURRGNTP      YES, SAVE NEW VALUE           Y02714
         B     RCEXITA                                           Y02714
         SPACE 2                                                 Y02714
NOTBOT   C     RBLKAD,TCTHWM       IS STORAGE INSIDE HWM         Y02714
         BNL   RCEXITA             BRANCH IF YES                 Y02714
         ST    RBLKAD,TCTHWM       STORE NEW HWM                 Y02714
RCEXITA  LM    RTCT,RCWRKA,GFSMFSVE   RESTORE REGISTERS
         BR    RCOMRET1            RETURN TO CALLER
         SPACE 2                                                 Y02714
CKLSQA   TM    SPFLAGS,LSQA+SWA+AUK  HIGH END SUBPOOL?           Y02714
         BNZ   RCEXITA             YES, DON'T UPDATE CURRGNTP    Y02714
         B     CKCURGN             NO, CHECK CURRGNTP            Y02714
         SPACE 2                                                 Y02714
         DROP  RWORK
         EJECT                                                   Y02714
***********************************************************************
*
*              FREEMAIN ROUTINE
*
*        UPDATE CURRGNTP IF NECESSARY.
*
***********************************************************************
         SPACE 2
         USING FMSMFCRE,RDQE
FMSMFCRE STM   RTCT,RCWRKA,GFSMFSVE   SAVE WORK REGISTERS        Y02714
         LA    RCWRK,C0(RBLKAD,RSIZE)  DEVELOP AUB
         C     RCWRK,CURRGNTP      AUB = CURRGNTP?               Y02714
         BNE   RCEXIT              NO, UPDATE NOT NEEDED         Y02714
         L     RCWRKA,LDATCB       GET TCB ADDRESS               Y02714
         L     REGA,TCBPQE         GET REGION DPQE               Y02714
         DROP  RCWRKA                                            Y02714
         L     REGA,PQEFPQE(REGA)  GET REGION PQE                Y02714
         C     REGA,LDASRPQE       IS THIS SYSTEM REGION PQE     Y02714
         BE    RCEXIT              YES, DON'T CHANGE CURRGNTP    Y02714
FMSMFMR  EQU   *                   MRELEASR ENTRY                Y02714
         LR    RCWRKA,REGA         CURRENT FBQE = REGION PQE     Y02714
FMCHKFBQ L     RCWRKA,FWDPTR(RCWRKA) GET FIRST/NEXT FBQE         Y02714
         CR    REGA,RCWRKA         IS THERE ONE?                 Y02714
         BE    RCEXIT              NO, FORGET IT                 Y02714
         L     RCWRK,FBQAREA(RCWRKA)  GET FLB                    Y02714
         A     RCWRK,SIZE(RCWRKA)  GET FUB                       Y02714
         CR    RCWRK,RBLKAD        IS FUB > ALB?                 Y02714
         BNH   FMCHKFBQ            NO, TRY NEXT FBQE             Y02714
         L     RCWRK,FBQAREA(RCWRKA)  GET FLB                    Y02714
         ST    RCWRK,CURRGNTP      STORE NEW CURRGNTP            Y02714
RCEXIT   LM    RTCT,RCWRKA,GFSMFSVE  RESTORE WORK REGISTERS      Y02714
         BR    RCOMRET1            RETURN
         SPACE 2                                                 Y02714
         DROP  RCORE
         DROP  RDQE
         TITLE 'IEAVGM00   OS/VS2 GETMAIN / FREEMAIN SERVICE ROUTINE'
***********************************************************************
*
*        REGISTER EQUATES
*
***********************************************************************
         SPACE 2                                                 Y02714
RIN0     EQU   0                   INPUT PARAMETER REGISTER
RUB      EQU   0                   DQE & FQE UPPER BOUND REG
RIN1     EQU   1                   PARAMETER LIST POINTER
RPREVAQE EQU   1                   PREV AQE POINTER
RPREVFQE EQU   1                   PREVIOUS FQE POINTER
RPREVDQE EQU   1                   PREVIOUS DQE REG
REPTE    EQU   1                   EXTERNAL PAGE TABLE ENTRY REG
RNEWDQE  EQU   1                   NEW DQE REG
RANCHOR  EQU   2                   ANCHOR FOR CELLS            @Z30ENWD
RAREG    EQU   2                   LRA REGISTER
RFQE     EQU   2                   FQE REG
RAQE     EQU   2                   AQE POINTER
RPREFBQE EQU   2                   PREV FBQE REG
R2       EQU   2                   VALIDITY CK RTN NEEDS R2 = 0  Y02714
ROLDQ    EQU   3                   USED IN CELL FORMAT         @Z30ENWD
R3       EQU   3                   USED AS A BASE REG IN PGINCORE
COMREG   EQU   3                   COMPARISON FOR SVC NUMBER
RADSAV   EQU   3                   ADDRESS FOR SET STORAGE KEYS
RCVT     EQU   3                   CVT REG
RFBQE    EQU   3                   FBQE ADDRESS
RGDA     EQU   3                   GDA ADDRESS                   Y02714
RIN3     EQU   3                   CRBRANCH INPUT REGISTER       Y02714
RNEWFQE  EQU   3                   ADDRESS OF NEW FQE
RDQE     EQU   3                   DQE REG
RPVT     EQU   3                   PVT REG
RTCB     EQU   4                   TCB ADDRESS
RLDA     EQU   4                   LDA ADDRESS                   Y02714
REG5     EQU   5                   WORK REG                    @Z30ENWD
RCELLP   EQU   5                   CELL POINTER FOR FORMAT     @Z30ENWD
RCTR     EQU   5                   COUNTER TO UPDATE CELL COUNT@Z30ENWD
PARMREG  EQU   5                   INPUT PARAMETER SAVE REGISTER
RERROR   EQU   5                   ERROR CODE
RPTE     EQU   5                   PAGE TABLE ENTRY REG          Y02714
RRB      EQU   5                   RB REG
RWORK3   EQU   5                   WORK REGISTER
RMIN     EQU   5                   FOR VAL CK OF SVC 4, V TYPE @ZA20641
RSTOP    EQU   6                   USED IN CELL FORMAT         @Z30ENWD
SVTYPE   EQU   6                   SVC, KEY, MODE, ENTRY TYPE
RTCB1    EQU   6                   TEMPORARY TCB REGISTER        Y02714
RWORK    EQU   6                   WORK REGISTER
SIZEREG  EQU   6                   BYTES REQUIRED
RFMRET   EQU   6                   LIST FREEMAIN RETURN REG
RSIZEM   EQU   6                   SIZE REG FOR MRELEASE
RMAX     EQU   6                   FOR VAL CK OF SVC 4, V TYPE @ZA20641
RNEXT    EQU   7                   USED IN CELL FORMAT         @Z30ENWD
RASCB    EQU   7                   ASCB ADDRESS                  Y02714
RAUB     EQU   7                   AREA UPPER BOUND REG
RPQE     EQU   7                   PQE ADDRESS
RPQEM    EQU   7                   PQE  REG FOR MRELEASE
RPRVDQE  EQU   7                   PREVIOUS DQE FOR GFRECORE     Y02714
RSPQE    EQU   7                   ADDRESS OF SPQE
RWORK2   EQU   7                   WORK REGISTER
SAVEPARM EQU   7                   PARAMETER LIST POINTER
RBASE1   EQU   8                   FIRST BASE REGISTER           Y02714
INDEX    EQU   9                   INDEX THROUGH LIST
SEGREG   EQU   9                   ADDRESS OF ALLOCATED AREA
RCOMRET1 EQU   9                   RETURN REG
RADDRM   EQU   9                   ADDRESS REG FOR MRELEASE
RLENGTH  EQU   10                  LENGTH/ADDRESS OF LENGTH LIST
REGA     EQU   10                  WORK REG
RFBQNXT  EQU   10                  NEXT FBQE REG
RTCT     EQU   10                  TCT POINTER
RCORE    EQU   10                  CORE AREA POINTER
RADDR    EQU   11                  ADDRESS OF ADDRESS LIST
RCWRK    EQU   11                  WORK REGISTER
REGB     EQU   11                  WORK REGISTER
RFQESIZE EQU   11                  CURRENT FQE SIZE FOR GFRECORE Y02714
RPREDQE  EQU   11                  PREVIOUS DQE
RPRSDQE  EQU   11                  PREV DQE REG FOR SPFRMAIN
RBLOCK   EQU   12                  DUMMY FBQE FOR MRELEASE
RCWRKA   EQU   12                  WORK REGISTER
RRBPRXLN EQU   12                  TEMP. USED TO GET RB PREFIX   Y02714
RSPID    EQU   12                  SPID
RVALRET  EQU   12                  RETURN FROM VALIDITY CHECK
WORK     EQU   12                  WORK REGISTER
RBASE2   EQU   13                  SECOND BASE REGISTER          Y02714
RFLAGWD  EQU   13                  FLAGS, SVC #, KEY, & MODE     Y02714
RSAVAREA EQU   13                  STANDARD SAVE AREA REGISTER   Y02714
RBLKAD   EQU   14                  ADDRESS OF BLOCK FROM GET/FREE
RRETURN  EQU   14                  RETURN REGISTER
RWORK4   EQU   14                  WORK REGISTER                 Y02714
RIN15    EQU   15                  BRANCH ENTRY ADDR
RLGSOFAR EQU   15                  LARGEST AVAILABLE (FBQE OR FQE)
RRETCODE EQU   15                  RETURN CODE REGISTER          Y02714
RSIZE    EQU   15                  SIZE REG
RVALBASE EQU   15                  BASE FOR VALIDITY CHECK       Y02714
TEMPBASE EQU   15                  TEMPORARY BASE FOR BRANCH ENTRIES
         EJECT
***********************************************************************
*
*        SYMBOL EQUATES
*
***********************************************************************
         SPACE 2                                                 Y02714
C0       EQU   0                   CONSTANT
OFF      EQU   0                   USED TO TURN OFF GMFM SWITCH
ZEROKEY  EQU   X'00'               0 KEY NO FETCH PROTECT FOR V=V TASK
ERR1     EQU   1                   CONSTANT                    @Z30ENWD
C1       EQU   1                   CONSTANT
TWO      EQU   2                   PAGE TABLE INDEX
C2       EQU   2                   CONSTANT
M2       EQU   X'02'               MASK TO GET SVC
ERR3     EQU   3                   CONSTANT                    @Z30ENWD
C3       EQU   3                   CONSTANT
RLB      EQU   3                   LOWER BOUND OF AREA DESCRIBED BY FQE
FWBMASK  EQU   X'03'               FULL WORD BOUNDARY MASK     @ZA09199
ERR4     EQU   4                   CONSTANT                    @Z30ENWD
SV4      EQU   4                   SVC 4
C4       EQU   4                   CONSTANT
MKEY     EQU   4                   MASK FOR KEY IN REG 15        Y02714
FOUR     EQU   4                   WORD LENGTH
ERR5     EQU   5                   CONSTANT                    @Z30ENWD
SV5      EQU   5                   SVC 5
ERR6     EQU   6                   CONSTANT                    @Z30ENWD
C6       EQU   6                   CONSTANT                    @Y30APYF
C7       EQU   7                   CONSTANT
MASK     EQU   X'07'               ACCESS LAST 3 BYTES OF FULL WORD
ERR8     EQU   8                   CONSTANT                    @Z30ENWD
AQESIZE  EQU   8                   SIZE OF AQE                   Y02714
C8       EQU   8                   CONSTANT
MASK1    EQU   X'08'               MASK TO ACCESS FIRST BYTE
CODE     EQU   8                   OFFSET FOR CODE INDIC. IN PARM LIST
ERR9     EQU   9                   CONSTANT                    @Z30ENWD
SPIDISP  EQU   9                   SPID DISPLACEMENT IN PAR LIST
NOTMIXED EQU   9                   NOT MIXED COND CODE FOR TM  @ZA20951
ERRA     EQU   10                  CONSTANT                    @Z30ENWD
SV10     EQU   10                  SVC 10
ERRB     EQU   11                  CONSTANT                    @Z30ENWD
C12      EQU   12                  CONSTANT
ERRD     EQU   13                  CONSTANT                    @Z30ENWD
C16      EQU   16                  CONSTANT
CELLEN   EQU   16                  LENGTH OF AN INTERNAL CELL  @Z30ENWD
DQESIZE  EQU   16                  SIZE OF DQE                   Y02714
FBQESIZE EQU   16                  FBQE SIZE
SPQESIZE EQU   16                  SPQE SIZE                     Y02714
SCHEDKEY EQU   X'10'               SCHEDULER KEY = 1             Y02714
C20      EQU   20                  CONSTANT
C24      EQU   24                  CONSTANT
C28      EQU   28                  CONSTANT
C32      EQU   32                  CONSTANT                      Y02714
C36      EQU   36                                              @Z30ENYF
C40      EQU   40                  SAVE AREA DISPLACEMENT REG 10 Y02714
C48      EQU   48                  SAVE AREA DISPLACEMENT REG 12 Y02714
C52      EQU   52                  SAVE AREA DISPLACEMENT REG 13 Y02714
C56      EQU   56                  SAVE AREA DISPLACEMENT REG 14
C60      EQU   60                  CONSTANT                      Y02714
H24      EQU   X'24'               REASON CODE 1 & MSGLEN  4
H28      EQU   X'28'               REASON CODE 1 & MSGLEN  8     Y02714
H2C      EQU   X'2C'               REASON CODE 1 & MSGLEN 12
H48      EQU   X'48'               REASON CODE 2 & MSGLEN  8     Y02714
H4C      EQU   X'4C'               REASON CODE 2 & MSGLEN 12
H8C      EQU   X'8C'               REASON CODE 4 & MSGLEN 12
CX40     EQU   X'40'               CONSTANT                      Y02714
C64      EQU   64                  SAVE AREA LENGTH              Y02714
C80      EQU   80                  CONSTANT                      Y02714
SV120    EQU   120                 SVC 120                       Y02714
C128     EQU   128                 CONSTANT
REGION   EQU   X'80'               REGION INDICATOR IN FQE
CX80     EQU   X'80'               CONSTANT                      Y02714
PGTABLEN EQU   224                 LENGTH OF PGT AND XPT         Y02714
C227     EQU   227                 SUBPOOL 227                 @Y30APYF
SUPSPLIM EQU   227                 LIMIT FOR SUPERVISOR SP     @Y30APYF
C229     EQU   229                 SUBPOOL 229                   Y02714
C230     EQU   230                 SUBPOOL 230                   Y02714
C233     EQU   233                 SUBPOOL 233                   Y02714
C236     EQU   236                 SUBPOOL 236                   Y02711
C237     EQU   237                 SUBPOOL 237                   Y02711
CBSQA    EQU   245                 CONTROL BLOCKS IN SQA         Y02714
C245     EQU   245                 SUBPOOL 245
C250     EQU   250                 SUBPOOL 250                   Y02714
C252     EQU   252                 SUBPOOL 252                   Y02714
C253     EQU   253                 SUBPOOL 253                   Y02714
C254     EQU   254                 SUBPOOL 254                 @ZA29616
KEY0     EQU   X'F0'               KEY OF 0 TEST; KEY MASK
END      EQU   X'F0'               TEST FOR END OF SEGMENT
LAST     EQU   X'80'               END OF LIST INDICATOR
CBLSQA   EQU   255                 CONTROL BLOCKS IN LSQA        Y02714
ALL      EQU   X'FF'               ALL BITS, FOR RESETTING FLAGS Y02714
ONESEG   EQU   X'0100'             SEGMENT COUNT OF 1            Y02714
WSC101   EQU   X'101'              WAIT STATE CODE, NO VIRTUAL   Y02751
WSC102   EQU   X'102'              WAIT STATE CODE, NO REAL      Y02751
C2K      EQU   2048                2K INCREMENT FOR SSK
C4095    EQU   4095                ONE PAGE - 1                  Y02714
CPAGE    EQU   4096                PAGE SIZE                     Y02714
         TITLE 'IEAVGM00   OS/VS2 GETMAIN / FREEMAIN SERVICE ROUTINE   *
               CSECT-IEAVGM00'
IEAVGM00 CSECT                                                 @Y30APYF
***********************************************************************
*
*        THESE CONSTANTS ARE ADDRESSED VIA REG 13 FROM ANY OF
*        THE CSECT IN THIS ASSEMBLY
*
***********************************************************************
         SPACE 2                                                 Y02714
         DS    0D
CELLOW   DC    F'5'                EXPAND POOL BELOW THIS VALUE@Z30ENWD
CELEXPNL DC    F'1024'             LENGTH FOR POOL EXPANSION   @Z30ENWD
PAGE     DC    F'4096'             PAGE SIZE
MAXFQESZ DC    F'8176'             MAXIMUM FQE SIZE              Y02714
SEGMENT  DC    F'65536'            SEGMENT SIZE                  Y02714
BASE100  DC    A(BASE1)            VALUE FOR BASE REG 8 FOR    @Y30APYF
*                                  CSECT00, ACCESSABLE VIA BASE@Y30APYF
*                                  REGISTER 13                 @Y30APYF
BASE101  DC    A(G4KSRCH)          VALUE FOR BASE REG 8 FOR    @Y30APYF
*                                  CSECT01, ACCESSABLE VIA BASE@Y30APYF
*                                  REGISTER 13                 @Y30APYF
AFMSMF   DC    A(FMSMFCRE)         ENTRY POINT FOR FMSMF INTERFACE
AGMSMF   DC    A(GMSMFCRE)         ENTRY POINT FOR GMSMF INTERFACE
ASRM     DC    A(SRMSTART)         SRM ENTRY AND BASE            Y02714
ASTERMR  DC    A(STERMR)           SYS TERM REAL, ENTRY AND BASE Y02751
ASTERMV  DC    A(STERMV)           SYS TERM VIRT, ENTRY AND BASE Y02751
APGINCOR DC    A(PGINC01)          PGINCORE ENTRY AND BASE     @YM07648
GFPART   DC    V(IEAVPRT0)         GET/FREE PART
VPFP1    DC    V(IEAVFP1)          FIND PAGE, LOCAL LOCK ENTRY   Y02714
VPFP2    DC    V(IEAVFP2)          FIND PAGE, SALLOC LOCK ENTRY  Y02714
VCRSEG   DC    V(IEAVCSEG)         CREATE SEGMENT                Y02714
SP245F   DC    F'245'              SUBPOOL 245 (SQA)           @Z30ENWD
SP255F   DC    F'255'              SUBPOOL 255 (LSQA)            Y02714
THR2PASD DC    A(2*4096)           THRESHOLD 2 PASSED, 2 PAGES   Y02714
THR2CLRD DC    A(3*4096)           THRESHOLD 2 CLEARED, 3 PAGES  Y02714
THR1PASD DC    A(6*4096)           THRESHOLD 1 PASSED, 6 PAGES   Y02714
THR1CLRD DC    A(7*4096)           THRESHOLD 1 CLEARED, 7 PAGES  Y02714
GLSPIDS  DC    AL1(227,228,231,239,241,245) GLBRANCH SPIDS     @Y30APYF
SP245B   DC    X'F5'               SQA                         @Z30ENWD
SP255B   DC    X'FF'               LSQA                        @Z30ENWD
         DS    0F                                              @Y30APYF
RCMASK   DC    X'0000007F'         RESET BIT 0 IN RETURN CODE    YO2714
BYTE3MSK DC    X'000000FF'         MASK FOR BYTE 3 IN REGISTER   Y02714
PGBNDMSK DC    X'00000FFF'         PAGE BOUNDARY MASK
CLHIBYTE DC    X'00FFFFFF'         MASK TO CLEAR HIGH BYTE
LGPOSNUM DC    X'7FFFFFFF'         LARGEST POSSIBLE NUMBER       Y02714
CLRHIBIT EQU   LGPOSNUM            MASK TO CLEAR HIGH BIT        Y02714
KEYMASK  DC    X'FFF0FFFF'         REMOVE MODE FROM KEY          Y02714
SEGBND   DC    X'FFFF0000'         ROUND TO SEGMENT BOUNDARY     Y02714
BND4K    DC    X'FFFFF000'         ROUND TO 4K BOUNDARY
SETUP    DC    X'01040A00' BR ENT, LSQA, SVC10, KEY 0, SUP STATE Y02714
SETUPFMB DC    X'05000A00'         SETUP REQUEST STATUS FOR      Y02714
*                                  FMAINB; BR ENT & FREEMB,      Y02714
*                                  SVC10, KEY 0, SUP STATE       Y02714
FMPGTBSP DC    AL1(CBLSQA),AL3(PGTABLEN) FREEM PG TAB SPID & LEN Y02714
H8       DC    H'8'                CONSTANT
H252     DC    H'252'              SUBPOOL 252
STRWTO   WTO   'IEA946W NO VIRTUAL STORAGE IS AVAILABLE FOR SQA',      *
               ROUTCDE=1,DESC=1,MF=L  SYSTEM TERMINATION MSG     Y02751
STRVIRT  EQU   STRWTO+15           START OF WORD "VIRTUAL" IN    Y02751
*                                  MSG, THIS DISPLACEMENT IS     Y02751
*                                  MACRO DEPENDENT               Y02751
STRREAL  DC    C'REAL   '          MAY REPLACE "VIRTUAL" IN MSG  Y02751
         EJECT                                                   Y02714
**************************************************************** Y02714
*                                                                Y02714
*        RETURN CODE VERSUS ERROR CODE TABLE. ZERO MEANS         Y02714
*        ABEND ONLY. BIT 0 ON MEANS CHECK REASON CODE FOR        Y02714
*        SPECIAL CASE.                                           Y02714
*                                                                Y02714
**************************************************************** Y02714
         SPACE 2                                                 Y02714
*           RETURN CODE        ERROR CODE                        Y02714
         SPACE 1                                                 Y02714
RCTABLE  DC    X'08'                1                            Y02714
         DC    X'00'                2       NOT USED             Y02714
         DC    X'84'                3                            Y02714
         DC    X'00'                4                            Y02714
         DC    X'00'                5                            Y02714
         DC    X'00'                6                            Y02714
         DC    X'00'                7       NOT USED             Y02714
         DC    X'84'                8                            Y02714
         DC    X'00'                9                            Y02714
         DC    X'84'               10                            Y02714
         DC    X'00'               11                            Y02714
         DC    X'00'               12       NOT USED             Y02714
         DC    X'04'               13                            Y02714
         EJECT                                                   Y02714
         IHALDA                                                  Y02714
         EJECT                                                   Y02714
***********************************************************************
*                                                                Y02714
*        THE FOLLOWING STORAGE AREAS WILL ACTUALLY BE LOCATED    Y02714
*        IN THE LOCAL DATA AREA (LDA) OF EACH ADDRESS SPACE OR   Y02714
*        THE GLOBAL SAVE AREA FOR THE GLBRANCH ENTRY POINT.  IF  Y02714
*        ANY CHANGE IS MADE IN DISPLACEMENTS, A CORRESPONDING    Y02714
*        CHANGE MAY BE REQUIRED IN MODULE IEAVGFRR (GETMAIN/     Y02714
*        FREEMAIN FRR).                                          Y02714
*                                                                Y02714
***********************************************************************
         SPACE 2                                                 Y02714
         ORG   GMFMWKAR            PUT FOLLOWING INTO LDA        Y02714
         SPACE 2                                                 Y02714
* LDARQSTA                         STATUS OF CURRENT REQUEST     Y02714
*                                  BYTE 0 - FLAGS                Y02714
*                                  BYTE 1 - SUBPOOL FLAGS        Y02714
*                                  BYTE 2 - SVC NUMBER           Y02714
*                                  BYTE 3 - KEY AND MODE         Y02714
         SPACE 2                                                 Y02714
FLAGS    EQU   LDARQSTA            MISC. FLAGS                   Y02714
BRENTRY  EQU   X'01'               BRANCH ENTRY                  Y02714
GETMB    EQU   X'02'               GETMAINB REQUEST              Y02714
FREEMB   EQU   X'04'               FMAINB OR MRELEASR REQUEST    Y02714
DEFERR10 EQU   X'08'               DEFERRED ERROR 10 FLAG        Y02714
EXPANSN  EQU   X'10'               SQA OR LSQA EXPANSION         Y02714
VARPASS2 EQU   X'20'               VARIABLE REQUEST, PASS 2      Y02714
ERGNRCHD EQU   X'40'               EXPLICIT V=V REGION REACHED   Y02714
LDAABGM  EQU   X'80'               SP254 REQSTR HAS TCBABGM ON @ZA29616
         SPACE 2                                                 Y02714
SPFLAGS  EQU   LDARQSTA+C1         SUBPOOL FLAGS                 Y02714
SQA      EQU   X'01'               SQA SUBPOOL                   Y02714
CSA      EQU   X'02'               CSA SUBPOOL                   Y02714
LSQA     EQU   X'04'               LSQA SUBPOOL                  Y02714
SWA      EQU   X'08'               SWA SUBPOOL                   Y02711
AUK      EQU   X'10'               AUTHORIZED USER KEY SUBPOOL   Y02714
FPROTECT EQU   X'20'               FETCH PROTECTED SUBPOOL       Y02714
NEEDAQE  EQU   X'40'               AN AQE IS NEEDED              Y02714
REQ4K    EQU   X'80'               4096 BYTE REQ FROM SP253/4  @ZA11822
         SPACE 2                                                 Y02714
SVCBYTE  EQU   LDARQSTA+C2         SVC NUMBER                    Y02714
         SPACE 2                                                 Y02714
MODE     EQU   LDARQSTA+C3         KEY & MODE                    Y02714
SUP      EQU   X'01'               SUPERVISOR MODE (IF ZERO)
SUBFRMN  EQU   X'02'               SUBPOOL FREEMAIN
         SPACE 2                                                 Y02714
*
*        THE FOLLOWING FIELDS MUST REMAIN IN THE SAME ORDER
*        AS 1 INSTRUCTION CLEARS THE FIELDS.
*
ABNDATA  DS    F                   VARIABLE DATA                 Y02714
MSGLEN   DS    X                   REASON CODE & LNTH OF VAR DATAY02714
FREESW   DS    B                   MULTIPURPOSE SWITCH           Y02714
FREESWM  EQU   X'80'               FREEMAIN IN PROCESS
INCR     EQU   X'40'               LENGTH HAS BEEN INCREMENTED
DECR     EQU   X'20'               ADDRESS HAS BEEN DECREMENTED
NFRSTDQE EQU   X'10'               NOT FIRST DQE (FOR L/SQA)     Y02714
FQEBELOW EQU   X'08'               AN FQE WAS BELOW FREED AREA   Y02714
NEEDRLSE EQU   X'04'               FURTHER PAGE RELEASE NEEDED   Y02714
ABNDATAL EQU   *-ABNDATA           LENGTH OF FIELDS TO BE CLEARED
         SPACE 2                                                 Y02714
*        LOCKFLAG & FRRBRNDX ARE CLEARED WITH ONE STH, KEEP TOGETHER
         SPACE 1                                                 Y02714
LOCKFLAG DS    B                   LOCKING FLAGS                 Y02751
SALHELD  EQU   X'01'               SALLOC LOCK ALREADY HELD      Y02751
SALOBTND EQU   X'02'               SALLOC LOCK OBTAINED          Y02751
         SPACE 2                                                 Y02714
FRRBRNDX DS    X                   BRANCH INDEX FOR FRR          Y02753
*        EQU   0        UNEXPECTED ERROR, CHECK STATUS FLAGS     Y02753
CLSALFLD EQU   1        SALLOC RELEASE RETURN CODE > 0           Y02753
CRSEGERR EQU   2        CREATE SEGMENT RETURN CODE > 0           Y02753
FNDPGERR EQU   3        FIND PAGE RETURN CODE NOT 0 OR 4         Y02753
GFREFAIL EQU   4        ON L/SQA EXPAN., GFRECORE FAILED         Y02753
GTSALFLD EQU   5        SALLOC OBTAIN RETURN CODE NOT 0 OR 4     Y02753
PGRLSRC4 EQU   6        PAGE RELEASE RETURN CODE OF 4            Y02753
SPFMERR  EQU   7        SUBPOOL FREEMAIN, AQE AREA NOT IN DQE    Y02753
         SPACE 2                                                 Y02753
REGSAVE  DS    18F                 STANDARD REGISTER SAVE AREA   Y02714
*                                  (72 BYTES),  USED FOR         Y02714
*                                  SRM (SYSEVENT) AND RSM        Y02714
REGSVEND EQU   *                   END OF REGISTER SAVE AREA     Y02714
STRPL    EQU   REGSAVE             SYSTEM TERM ROUTINE PARM LIST Y02751
         ORG   REGSAVE+C8          RESET INSTRUCTION COUNTER SO  Y02714
*                                  LRB CAN BE ON NEXT AVAILABLE  Y02714
*                                  DOUBLE WORD BOUNDARY IN       Y02714
*                                  REGSAVE                       Y02714
STRLRB   DS    0D                  LOGREC RECORD BUFFER          Y02751
LRBRCTYP EQU   STRLRB              LRB RECORD TYPE               Y02751
LRBWSC   EQU   STRLRB+C24          LRB WAIT STATE CODE           Y02751
LRBRCLEN EQU   STRLRB+C28          LRB RECORD LENGTH             Y02751
LRBSIZE  EQU   32                  SIZE OF LRB                   Y02751
         ORG   REGSVEND            RESTORE INSTRUCTION COUNTER   Y02714
         SPACE 2                                                 Y02714
MSAVE    DS    16F                 SAVE AREA FOR MRELEASE        Y02714
GNOTSAVE DS    16F                 SAVE AREA USED IN GNOTSAT     Y02714
LOCKSAVE DS    2F                  GT/CLSALLOC, QFMAINB, AND SRM Y02751
*                                  SAVE AREA OVERLAPS INTO       Y02751
*                                  GFSMFSVE AND MPTRS            Y02751
GFSMFSVE DS    3F                  SMF CORE ROUTINES SAVE AREA   Y02714
CSPCKSAV EQU   GFSMFSVE            SAVE AREA FOR CSPCHK          Y02714
MPTRS    DS    2F                  SAVE PREVIOUS AND NEXT PTRS.  Y02714
DUMYDQE  DS    4F                  DUMMY DQE FOR L/SQA EXPANSION Y02714
TEMPDQE  DS    4F                  TEMPORARY DQE FOR FMCOMMON    Y02714
DUMFBQE  DS    4F                  DUMMY FBQE FOR MRELEASE       Y02714
SAVEREG1 EQU   BRANCHSV+C4         SAVE INPUT REG 1 FOR FREEMAIN Y02714
RETSAVE  EQU   BRANCHSV+C56        SAVE RETURN ADDRESS           Y02714
SAV911   DS    3F                  SAVE REGS 9-11                Y02714
LASTSAVE DS    F                   SAVE POSSIBLE LAST LIST ENTRY Y02714
MINMAX   DS    2F                  MAX & MIN LENGTH FOR VARIABLE Y02714
LASTLSTA DS    F                   LAST LIST ENTRY ADDRESS       Y02714
LSTINDEX DS    F                   INDEX FOR LIST REQUEST        Y02714
FMAREAS  DS    F                   PTR TO AREAS TO BE FREEMAINED Y02714
FRRPARM  DS    F                   FRR PARAMETER AREA ADDRESS    Y02753
PARMLDA  EQU   0                   LDA ADDRESS IN FRR PARM       Y02753
PARMFLG1 EQU   4                   FIRST FLAG BYTE IN FRR PARM   Y02753
PARMGLBL EQU   X'80'               GLOBAL REQUEST (GLBRANCH OR   Y02753
*                                  MRELEASR ON GLOBAL REQUEST)   Y02753
PARMSALO EQU   X'40'               SALLOC LOCK OBTAINED BY GM/FM Y02753
PARMVLCK EQU   X'20'               SVC 4/SVC 5 INTERFACE BEING @ZA20641
*                                  VALIDITY CHECKED            @ZA20641
         SPACE 2                                                 Y02714
*
*    THE FOLLOWING 3 LINES MUST REMAIN IN THE SPECIFIED ORDER
*    AS 1 INSTRUCTION IS USED TO CLEAR THEM
*
CLOPREV  DS    F                   PREVIOUS FQE TO CLOSEST       Y02714
CLOSEST  DS    F                   CLOSEST IN SIZE FQE           Y02714
LARGESTA DS    F                   LARGEST AVAILABLE             Y02714
         SPACE 2                                                 Y02714
LARGEST  DS    F                   LARGEST AVAILABLE FBQE        Y02714
LENSAVE  DS    F                   SAVE AREA FOR LENGTH LIST POINTER
SAVESIZE DS    F                   SIZE OF MULTIPLE OF 4K CORE   Y02714
ENDADD   DS    F                   END ADDRESS                   Y02714
TEMPSAV1 EQU   ENDADD              TEMPORARY SAVE AREA 1         Y02714
STRTADD  DS    F                   START ADDRESS                 Y02714
TEMPSAV2 EQU   STRTADD             TEMPORARY SAVE AREA 2         Y02714
DIFF     DS    F                   DIFFERENCE                    Y02714
SAVEPQE  EQU   DIFF                SAVE PQE ADDRESS IN FBQSRCH   Y02714
FIXSTART DS    F                   STARTING ADDRESS TO BE CLEAREDY02714
FIXEND   DS    F                   ENDING ADDRESS TO BE CLEARED  Y02714
NOTSATSV DS    F                   LENGTH POINTER USED BY GNOTSATY02714
NOTSATS1 DS    F                   SAVE LDARQSTA WHEN GNOTSAT IS Y02714
*                                  DOING A FREEMAIN FOR A LIST   Y02714
SAVESEG  DS    F                   ADDRESS OF MULTIPLE OF 4K COREY02714
LARSOFAR DS    F                   LARGEST AVAILABLE IN FBQE     Y02714
RSTRTADD DS    F                   ROUNDED START ADDRESS         Y02714
TEMPSAV3 EQU   RSTRTADD            TEMPORARY SAVE AREA 3         Y02714
RENDADD  DS    F                   ROUNDED END ADDRESS           Y02714
VPFP     DS    F                   FIND PAGE ADDRESS TO BE USED  Y02714
***********************************************************************
*     THE FOLLOWING DS'S MUST REMAIN IN THE SAME ORDER AS ONE MOVE    *
*    INSTRUCTION IS USED TO SAVE THEM ALL                             *
***********************************************************************
DQESAVE  DS    2F                  SAVE DQE PTR AND PREV DQE PTR
FMSAVE   DS    1F                  SAVE RETURN REG FOR FREEMAIN
PREVFQSV DS    1F                  SAVE AREA FOR PREVIOUS FQE POINTER
FQESAVE  DS    1F                  SAVE AREA FOR FQE
SPQESAVE DS    1F                  SAVE AREA FOR SPQE
SVRLB    DS    F                   SAVE AREA FOR RLB             Y02714
SVSIZE   DS    F                   SAVE AREA FOR ROUNDED SIZE    Y02714
DQESAVE1 DS    2F                  SAVE DQE INFO WHEN USING FMAINB
FMSAVE1  DS    1F                  SAVE RETURN REG WHEN USING FMAINB
FQESAVE1 DS    1F                  SAVE FQE INFO WHEN USING FMAINB
PREVFQS1 DS    1F                  SAVE PREVIOUS FQE WHEN USING FMAINB
SPQSAVE1 DS    1F                  SAVE SPQE WHEN USING FMAINB
SVRLB1   DS    F                   SAVE RLB FOR FMAINB           Y02714
SVSIZE1  DS    F                   SAVE ROUNDED SIZE FOR FMAINB  Y02714
***********************************************************************
SAVSVTSV DS    F                   SAVE LDARQSTA DURING FMAINB   Y02714
FQENXTSV DS    F                   FQE NEXT SAVE AREA            Y02714
OLDFQELN DS    F                   OLD FQE LENGTH                Y02714
NEWFQELN DS    F                   NEW FQE LENGTH                Y02714
RQSTSIZE DS    F                   SAVED SIZE OF ORIGINAL      @ZA27672
*                                  REQUEST FOR MSG IEA700I ON  @ZA27672
*                                  AXX-2 ABENDS.               @ZA27672
SEGTEST  DS    H                   AREA TO TEST END OF SEGMENT   Y02714
         SPACE 2                                                 Y02714
CODE1    DS    B                   SAVE AREA FOR OPTION CODE     Y02714
S120FM   EQU   X'01'               SVC 120 FREEMAIN REQUEST      Y02714
S120UNCD EQU   X'02'               SVC 120 UNCONDITIONAL REQUEST Y02714
S120PBND EQU   X'04'               SVC 120 PAGE BOUNDRY REQUEST  Y02714
BOUND    EQU   X'10'               MASK FOR PAGE BOUNDARY
CONDTNL  EQU   X'20'               CONDITIONAL  INDICATOR
LIST     EQU   X'C0'               LIST INDICATOR (IF MIXED IS LIST)
LISTVAR  EQU   X'C0'               USED TO CHECK FOR LIST AND VARIABLE
VARBLE   EQU   X'C0'               VARIABLE TEST INDICATOR
         SPACE 2                                                 Y02714
CLEARSW  DS    B                   CLEARSW FOR GFRECORE          Y02714
CLEARON  EQU   X'01'               FQECPB INDICATOR IS ON IN FQE
         SPACE 2                                                 Y02714
GMFMSW   DS    B                   GM/FM SWITCH FOR MRELEASE     Y02714
GM       EQU   X'01'               INDICATES GM TO BE DONE FOR FBQE
FM       EQU   X'02'               INDICATES FM TO BE DONE FOR FBQE
FIRSTSW  EQU   X'04'               FIRST TIME THRU SW FOR MRELEASE
         SPACE 2                                                 Y02714
FETCH    DS    B                   KEY AND FETCH PROTECT         Y02714
FETCHON  EQU   X'08'               FETCH PROTECT ON
         SPACE 2                                                 Y02714
OUTSW    DS    X                   SWITCH FOR OUT OF REAL OR VIRTY02714
VIRTUAL  EQU   X'FF'               VIRTUAL INDICATOR FOR OUT SWITCH
REALOUT  EQU   X'00'               REAL INDICATOR FOR OUT SWITCH
         SPACE 2                                                 Y02714
CODE2    DS    B                   SAVE AREA FOR OPTION CODE     Y02714
SAVFRESW DS    B                   SAVE FREESW DURING FMAINB     Y02714
SPID     DS    X                   SPID FOR MRELEASE             Y02714
LSPQEKEY DS    X                   PROTECT KEY FROM CURRENT SPQE Y02714
RQSTRKEY DS    X                   REQUESTER KEY OR KEY= PARAM.  Y02714
SAVSPID  DS    X                   SAVE SPID FOR FREEMAIN        Y02714
SAVSPID2 DS    X                   SAVE SPID FOR MESSAGES      @YM07648
CELLFLGS DS    B                   CONTROL OF INTERNAL CB POOL @Z30ENWD
LCLEXP   EQU   X'80'               LOCAL POOL EXPANSION REQ'D  @Z30ENWD
GLBLEXP  EQU   X'40'               GLOBAL POOL EXPANSION REQ'D @Z30ENWD
LCLREQ   EQU   X'20'               LOCAL CELL REQUEST          @Z30ENWD
GNOTCALL EQU   X'08'               ON =GNOTSAT CALLING GETMAINE@Z30ENWD
INCELL   EQU   X'04'               ON = IN GETMAINC            @Z30ENWD
INEXPN   EQU   X'02'               ON = IN EXPANSION ROUTINE   @Z30ENWD
INCBBRAN EQU   X'01'               ON = CBBRANCH WAS ENTRY     @Z30ENWD
         EJECT
         IHAGDA                                                  Y02714
         EJECT                                                   Y02714
         IHALCCA                                               @ZA08170
         EJECT                                                 @ZA08170
         IHASPQE   INTERNAL
         SPACE 4
         IHAFBQE   INTERNAL
         SPACE 4
         IHAFQE    INTERNAL
         SPACE 4
         IHAAQE    INTERNAL
         SPACE 4
         IHADQE    INTERNAL
         SPACE 4
         IHAPQE    INTERNAL
         EJECT
         IHAPGTE
         EJECT
         IHAXPTE
         EJECT
         IHAPVT
         EJECT
         IHAPSA                                                  Y02714
         EJECT                                                   Y02714
         IHAWSAVT CLASS=GLOBAL                                   Y02714
         EJECT                                                   Y02714
         IHAASCB                                                 Y02714
         EJECT                                                   Y02714
         IHARB DSECT=YES                                         Y02714
         EJECT
         CVT   SYS=AOS2,OPTIONS=(TSLICE),TSO=YES,DSECT=YES,PREFIX=NO
         EJECT
         IKJTCB
         EJECT
         IEFTCT
         EJECT
RVT      IHARVT                                                  Y02751
         EJECT                                                   Y02753
         IHAFRRS                                                 Y02753
         EJECT
         IHAINF
         SPACE 5                                                 Y02714
         END
