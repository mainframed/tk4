         TITLE 'IEDQCA - RESIDENT OPERATOR CONTROL MODULE'
IEDQCA   CSECT                                                 @Y17XARX
         SPACE 3
***********************************************************************
*                                                                     *
* MODULE NAME = IEDQCA (TCAM, OPERATOR CONTROL)                @Y17XARX
*                                                                     *
* DESCRIPTIVE NAME=TCAM OPERATOR CONTROL RESIDENT MODULE              *
*                                                                     *
* COPYRIGHT='NONE'                                                    *
*                                                                     *
* STATUS = VERSION 10.0                                        @Y17XARX
*                                                                     *
* FUNCTION - THIS MODULE SAVES REGISTERS, SETS UP A WAIT LIST, THEN   *
*        GIVES CONTROL TO THE INITIAL OP CONTROL TRANSIENT VIA SVC 104*
*        IT CONTAINS THE OPERATOR CONTROL AVT AND SEVERAL SUBROUTINES *
*        INCLUDING AN OUTPUT SUBTASK ACCESSED DIRECTLY BY TCAM.       *
*                                                                     *
* NOTES = COMMUNICATION BETWEEN THE VARIOUS TRANSIENT MODULES  @Y17XARX
* IS PRIMARILY THROUGH THE OPERATOR CONTROL AVT.               @Y17XARX
*    DEPENDENCIES = EBCDIC CHARACTER CODE DEPENDENCIES ARE     @Y17XARX
*    CORRECTABLE BY REASSEMBLY.                                @Y17XARX
*    RESTRICTIONS = NA                                         @Y17XARX
*    REGISTER CONVENTIONS = STANDARD                           @Y17XARX
*    PATCH LABEL = ZAPPATCH                                    @Y17XARX
*                                                              @Y17XARX
* MODULE TYPE = PROCEDURE                                      @Y17XARX
*    PROCESSOR = ASSEMBLER                                     @Y17XARX
*    MODULE SIZE = 4264 BYTES                                  @Y17XARX
*    ATTRIBUTES = ATTACHED, RESIDENT, ENABLED, REUSEABLE       @Y17XARX
*                                                              @Y17XARX
* ENTRY POINTS - IEDQCA IS PASSED CONTROL BY OS WHEN OPERATOR CONTROL *
*        IS ATTACHED.                                                 *
*               SUBROUTINES LISTED BELOW ARE LINKED TO BY VARIOUS     *
*        TRANSIENTS.                                                  *
*                   COHORTLK                                   @Y17XARX
*                   CHORTGLK                                   @Y17XARX
*                   FREEBUFF                                   @Y17XARX
*                   TNTENTAD                                   @Y17XARX
*                   TRMOFLOC                                          *
*                   DCBLOCAT                                          *
*                   DECRCT                                     @Y17XARV
*                   ALLOCBUF                                          *
*                   LCBSETUP                                          *
*                   OPCSCAN                                    @OY12425
*                   PROGRTNE                                   @Y17XARV
*               THE SUBROUTINE OSTCB IS ENTERED DIRECTLY BY THE TCAM  *
*        DISPATCHER WHEN THE DUMMY LCB IS POSTED TO ITSELF TO BE FREED*
*                                                                     *
*        THE SUBROUTINE OPENCODE IS USED BY IPL TO ISSUE OPENS.@Y17XARX
*                                                              @Y17XARX
*        THE SUBROUTINE PROGRTNE SHOULD BE THE LAST SUBROUTINE @Y17XARV
*        IN THE MODULE.                                        @Y17XARV
*                                                              @Y17XARV
* INPUT - TO IEDQCA                                                   *
*              REGISTER 1 CONTAINS THE ADDRESS OF THE AVT             *
*              REGISTER 14 CONTAINS THE RETURN ADDRESS                *
*        TO THE VARIOUS SUBROUTINES                                   *
*              A PROLOGUE FOR EACH SUBROUTINE DOCUMENTS ITS INPUT     *
*                                                                     *
* OUTPUT - FROM IDEQCA                                                *
*              NONE                                                   *
*         FROM SUBROUTINES                                            *
*              OUTPUT IS DOCUMENTED IN EACH SUBROUTINE PROLOGUE       *
*                                                                     *
* EXTERNAL REFERENCES - IGC0010D, CALLING ROUTINE                     *
*                                                                     *
* EXITS,NORMAL                                                        *
*   TO TCAM OPERATOR CONTROL VIA SVC 104                              *
*   TO OS IF CLOSEDOWN IN PROGRESS                                    *
*                                                                     *
* EXITS,ERROR - N/A                                                   *
*                                                                     *
* TABLES/WORK AREAS - TCAM AVT, OPC AVT, OPCE                         *
*                                                                     *
* MACROS = AQCTL, GETMAIN, RETURN, CLOSE, OPEN, DCB,DCBD,POST, @Y17XARX
* WAIT, QEDIT, XCTL                                            @Y17XARX
*                                                                     *
* CHANGE-ACTIVITY = AS FOLLOWS:
*A065500,069300,075500,077200,081500,086500,108200,140000        S22024
*A142100,190000,320000,327007,3340000,398000,541200,710200       S22024
*A710340,710420,710640,71900                                     S22024
*C007000                                                         S22024
*A675000                                                        SA62344
*A710340,710420,710640,71900,297000,327385,327392                S22024
*C532000,534000,536000,540000                                   SA63617
*A568000,589000                                                 SA67103
*C694000                                                       @SA69063
*C199000-201000                                                @XA03954
*A142600,710000,710660,760000                                  @YA04391
*C101000                                                       @YA05946
*C327805,327812                                                @ZA00226
*A339500                                                       @ZA00226
*C710001-710022                                                @YA07487
*C327266                                                       @YA06867
*D327756-327840,                                               @YA06867
*D250000-256000,327168-327203,                                 @ZA02068
*C710001-710017,                                               @YA07497
*A762000,                                                      @XA06556
*A589800,                                                      @SA74873
*A589050,589900,                                               @ZA05044
*A592000,760500,                                               @XA09783
*A249000,327161,                                               @OY12414
*A021000,065000,071000,074000,075500,077600,082000,142800      @OY12425
*A303000,400000,                                               @OY12425
*C710680,                                                      @OY12425
*A474000,489000,508000,                                        @OS76998
*C479000,482000,                                               @OS76998
*A709000,                                                      @OZ09915
*A592420,                                                      @OY13278
*A013000,017000,024000,045000,065500,069600,074000,075500      @Y17XARX
*A077600,080000,082000,272000,290000,290600,297800,304000      @Y17XARX
*A327266,327280,395000,396000,398500,400000,710670,716000      @Y17XARX
*A718000,720000,741000,745000,746000,760700,775000,778000,     @Y17XARX
*C007000,007600,220000,292000,297200,297400,297800,302000      @Y17XARX
*C303000,327259,327280,713000,722000,741000,744000,            @Y17XARX
*D005000-006000,069300,069600,077400,077600,081500             @Y17XARX
*D327301-327437,327504-327742                                  @Y17XARX
*A021500,024600,065700,067000,071500,074500,075700,077300,     @Y17XARV
*A080500,082500,142970,711902,711909                           @Y17XARV
*C720200                                                       @Y17XARV
*A646000                                                       @Y17XAWC
*C720600                                                       @Y17XAWC
*A019000,540000,592800,760800,760900,                          @Y17XARV
*A589220-589250                                                @Y17XARA
*A000000-999999                                                @Y16XAR0
*A252000                                                       @OX16389
*A086500,613000,814000                                         @G36XRRU
*C712659,712660,712663                                         @ZM47546
*C768000                                                       @OX19903
*D628000-629000                                                @OZ28593
*C712398                                                       @OZ27694
*A711467                                                       @OY20955
*C631000                                                       @OZ32786
*D635000,642000-646005                                         @OZ32786
*                                                                     *
***********************************************************************
         EJECT
         SPACE
*              E Q U A T E S
         SPACE
RZERO    EQU   0                       REGISTER 0 - BRANCH PARAMETER
RPARM    EQU   1                       OPC AVT ADDRESS
RSWITCH  EQU   1                        SWITCH FOR OPCSCAN     @OY12425
RLGBAD   EQU   1                        LGB ADDRESS              S22024
RGSUBPTR EQU   1                       POINTER TO SUBSTRUCT    @Y17XARX
RCURTTE  EQU   1                        CURRENT TTE ADDR.      @Y17XARV
ROPCAVT  EQU   2                       POINTER TO OPC AVT
ROPCE    EQU   3                       POINTER TO CURRENT OPCE
RTOPOFF  EQU   3                        TTCIN OF TOP RESOURCE  @Y17XARV
RAVT     EQU   4                       POINTER TO TCAM AVT
RWORKA   EQU   5                       POINTER TO RESIDENT WORKAREA
REGTABLT EQU   5                       SAVE TTE TABLE ADDRESS  @Y17XARX
ROFF     EQU   6                       TIOT OFFSET
RTERM    EQU   6                       TERMINAL ENTRY POINTER
RNUM     EQU   6                        LENGTH REG             @OY12425
RORGTTE  EQU   6                        ORIGINAL TTE ADDR.     @Y17XARV
RTNT     EQU   7                       TERM NAME TABLE POINTER
RTIOT    EQU   7                       TIOT POINTER
RUCB     EQU   7                       POINTER TO UCB
RLENTH   EQU   7                        LENGTH REG             @OY12425
RORGOFF  EQU   7                        ORIGINAL OFFSET        @Y17XARV
RSAVT    EQU   7                        PTR. TO SEC. AVT       @YM03697
RWORK    EQU   8                       WORK REGISTER
RTRMENTA EQU   8                        TERM ENTRY ADDR          S22024
RPTR     EQU   8                        EOM PTR/WORK AREA      @OY12425
REGQ     EQU   8                       TTE TYPE TO BE FOUND    @Y17XARX
RCUROFF  EQU   8                        TTCIN HOLDER           @Y17XARV
RDEB     EQU   9                       POINTER TO DEB
RSTART   EQU   9                        SAVES START ADDRESS    @OY12425
RWORK1   EQU   9                       WORK REGISTER
RQCBPTR  EQU   9                        QCB ADDRESS              S22024
RTTEBASE EQU   9                       INPUT TTCIN COHORTG     @Y17XARX
RLASTYPE EQU   9                        TYPE OF LAST RESOURCE  @Y17XARV
RWAITCHN EQU   9                        A/D WAIT CHAIN POINTER @Y17XARV
RPREFIX  EQU   10                      POINTER TO BUFFER
RWORK2   EQU   10                      WORK REGISTER
RLEN     EQU   10                      RELATIVE LINE NO.
RCOHRTPT EQU   10                 SAVE COHORT PTR REGISTER     @Y17XARX
RCURTYPE EQU   10                       TYPE OF CURRENT        @Y17XARV
*                                        RESOURCE              @Y17XARV
ROPCEOFF EQU   10                       OFFSET OF OPCE         @Y17XARV
RDCB     EQU   11                      DCB POINTER
RCIB     EQU   11                      POINTER TO INPUT CIB
RSCAN    EQU   11                       SCAN PTR FOR ADDR & DDN@OY12425
RWORK3   EQU   11                       WORK REGISTER          @Y17XARV
RHRCHY   EQU   11                       HOLDS HIERARCHY PTR.   @Y17XARV
RBASE    EQU   12                      BASE REGISTER
RSAVE    EQU   13                      POINTER TO SAVEAREA
RRET     EQU   14                      RETURN FROM SUBROUTINES
RBRNCH   EQU   15                      SUBROUTINE ENTRY AND BASE
RBRANCH  EQU   15                       BRANCH REG AND BASE REG  S22024
ADDRESS  EQU   7                       ADDRESS MASK            @G36XRRU
         SPACE 2
ALL      EQU   255                 ALL ONES
ALTDEST  EQU   X'80'               INDICATE PROCESSING ALTERNATE DEST
AL0      EQU   0                       LENGTH USED IN EXECUTED INSTRUCT
AL1      EQU   1                       MOVE LENGTH OF ONE
AL2      EQU   2                   LENGTH OF 2
AL3      EQU   3                       MOVE LENGTH OF THREE
AL4      EQU   4                       MOVE LENGTH OF 4
AL8      EQU   8                       COMPARE LENGTH
BACKCHN  EQU   4                       BACKWARD SAVEAREA CHAINING
BADDD    EQU   X'20'                    NO DDNAME OR LGB       @Y17XARX
INVALRLN EQU   8                        INDICATE INVALID RLN
BUFFERB  EQU   X'E4'                    BUFFER ERB PRIORITY
BUSY     EQU   4                       ROUTINE BEING USED BY MP
CLRFLAG  EQU   X'0F'                    CLEAR UCB FLAGS        @YA05946
CVTPTR   EQU   16                       LOW CORE ADDRESS OF CVT
DDOFF    EQU   24                      OFFSET TO FIRST DD IN TIOT
DEB      EQU   4                       OFFSET TO DEB
ECB      EQU   4                   OFFSET TO OP CONTROL ECB
EIGHT    EQU   8                       ADD EIGHT TO REGISTER
ERBBUFF  EQU   8                        OFFSET TO BUFFER ADDRESS
ERBSTATE EQU   X'41'                   STATE OF ERB TO BD
OPENED   EQU   X'10'                    DCB IS OPENED MASK       S22024
NOERRTN  EQU   X'0C'                    NO SYSTEM ERROR RTNS     S22024
MSG166   EQU   166                      ERROR MSG FOR DCB OPEN   S22024
*                                       FAILED                   S22024
FOUR     EQU   4                       ADD FOUR TO REGISTER
FORCHAIN EQU   8                       FORWARD CAHIN SAVEAREAS
LINK     EQU   4                        OFFSET TO QUEUE LINKAGE FIELDS
MPPREQ   EQU   2                   BUFFER REQ FROM MPP
OFF00    EQU   0                       ZERO OFFSET FOR LOAD
OFF01    EQU   1                       ONE OFFSET FOR MOVE
OFF02    EQU   2                       TWO OFFSET
OFF04    EQU   4                       FOUR OFFSET FOR LOAD
OFF05    EQU   5                   OFFSET OF 5 FOR ERB SETUP
OFF08    EQU   8                       EIGHT OFFSET FOR MOVE
OFF09    EQU   9                   OFFSET OF 9 FOR ERB SETUP
OFF0B    EQU   11                  OFFSET TO TIC ADDR OF 2
OFF0C    EQU   12                       12 OFFSET
OFF0D    EQU   13                      MOVE OFFSET OF 13
ONE      EQU   1                       VALUE OF 1
ONEBUFF  EQU   1                   INDICATE ONE BUFFER
OPEN     EQU   X'10'                   INDICATES OPEN DCB
OPENERR  EQU   1                        DCB NOT OPEN
OUTPRI   EQU   X'F9'                   OUTPUT MESSAGE PRIORITY
PARTREQ  EQU   64                  PARTIAL UNIT REQUEST
POST     EQU   X'0C'                   CROSS PARTITION POST
PRIOFF   EQU   4                        OFFSET TO INPUT PRIORITIES
PROCESS  EQU   X'20'               INDICATES PROCESS ENTRY
REST     EQU   36                  LENGTH OF LAST OF OPCE
SAVEOFF  EQU   0                        OFFSET FOR SUBROUTINES   S22024
SAVE12   EQU   12                      OFFSET 12 INTO SAVE AREA LINKAGE
TEN      EQU   10                      ADD 10 TO REGISTER
THREE    EQU   3                       ADD THREE
TIC      EQU   8                        OFFSET TO TIC FIELD IN UNIT
TIOT     EQU   12                      TIOT OFFSET IN TCB
TWO      EQU   2                        TWO                      S22024
TXTRDCB  EQU   X'44'                    INDICATES TCAM DCB FOR A S22024
*                                       270X                     S22024
*                                       LINE OR A 3705 CONTROL UNIT
UNITCNT  EQU   13                  OFFSET TO COUNT GOTTEN
ZERO     EQU   0                        ZERO                     S22024
BADNAME  EQU   4                        RETURN CODE INVALID NAME S22024
SEVEN    EQU   7                        MASK                     S22024
HEXZERO  EQU   X'00'                    NULL TNT OFFSET ENTRY    S22024
ISOPEN   EQU   X'10'                    OFLGS MASK               S22024
LINENT   EQU   X'80'                    LINE ENTRY MASK          S22024
OPCFRMCA EQU   X'10'                    ENTRY FROM IEDQCA        S22024
MSG451   EQU   451                                             @YA04391
HEX40    EQU   X'40'                                           @YA04391
RLNALL   EQU   X'20'                    INDICATES RLN=ALL      @OY12425
NUMBER   EQU   X'F0'                    NUMBER INDICATOR       @OY12425
CHARNINE EQU   C'9'                     CHARACTER INDICATOR    @OY12425
COMMA    EQU   C','                                            @OY12425
PARENR   EQU   C')'                                            @OY12425
CHARC    EQU   C'C'                     CHECK FOR CLEANUP REQ  @YM08113
CHARF    EQU   C'F'                     CHECK FOR MODIFY CMD   @YM08113
OH       EQU   C'O'                     CHK OFF OR ON          @OY12425
RPAREN   EQU   64                                              @OY12425
LPAREN   EQU   128                                             @OY12425
BLANK    EQU   C' '                                            @OY12425
SIX      EQU   6                                               @OY12425
SLASH    EQU   C'/'                                            @OY12425
THIRTY6  EQU   36                       REG 14 OFFSET IN SAVE  @Y17XARX
ABNORX02 EQU   X'02'                    ABNOR RETURN,3705 PROB @Y17XARX
DCBLMASK EQU   X'03'                    TO LOAD SUBSTRUCT PTR  @Y17XARX
CHTGMASK EQU   B'0011'                  MASK LOAD COHORTG PTR  @Y17XARX
COHTMASK EQU   B'0011'                  MASK LOAD COHORT  PTR  @Y17XARX
TABSIZE  EQU   3                        FOR TABLE BUMP TABLETTE@Y17XARX
LLH      EQU   X'03'                    LOAD LOGICAL HALFWORD  @Y17XARV
TYPEMASK EQU   X'01'                    LOAD TYPE FIELD        @Y17XARV
         EJECT
*        BASE REGISTERS FOR TCAM CONTROL BLOCKS USED
*
         USING IEDQAVTD,RAVT           TCAM AVT ADDRESSABILITY
         USING IEDQOPCE,ROPCE          OPC ELEMENT ADDRESSABILITY
         USING IEDQPRF,RPREFIX     BUFFER PREFIX BASE
         USING IEDQTRM,RTERM       TERM ENTRY ADDRESSABILITY
         USING IEDQTNTD,RTNT           TNT ADDRESSABILITY
         SPACE
         STM   RRET,RBASE,SAVE12(RSAVE) SAVE CALLER'S REGISTERS
         BALR  RBASE,0             SET BASE REGISTER
         USING *,RBASE             ADDRESSABILITY
IEDQCA   IEDHJN  SKIPID
         LR    RAVT,RPARM          SAVE AVT POINTER
         L     ROPCAVT,OPCAVTAD    PICK UP OP CONTROL AVT ADDR @YM04671
         USING OPCAVT,ROPCAVT          OPC AVT ADDRESSABILITY
         ST    RAVT,OPCAVTPT       SAVE TCAM AVT ADDRESS
         LA    RWORK,AVTINOUT      PICK UP ADDRESS OF DUMMY IN/OUT
         ST    RWORK,OSCBINOT      PLACE ADDRESS ON LCB/SCB
         LA    RWORK,AVTDELEM      GET ADDR OF DUMMY LAST ELM  @YM08486
         STCM  RWORK,7,OPCPWCHN    INDICATE NO MORE ELEMENTS   @YM08486
         ST    ROPCAVT,AVTOCGET    PLACE OUR AVT ADDRESS IN TCAM AVT
         LOAD  EP=IEDKHISC         BRING TOTE HEIRARCHY SCAN   @Y17XARR
         ST    RZERO,OPCTOTCK      SAVE THE IEDKHISC ADDRESS   @Y17XARR
         SPACE
WAIT     EQU   *
         LA    RWORK,AVTOPCOB+OFF04 GET ECB ADDRESS (TERM INPUT)
         ST    RWORK,OPCWAIT+OFF04 PLACE ADDRESS IN WAIT LIST
         L     RWORK,AVTCOMPT      GET CSCB ADDRESS (CONSOLE INPUT ECB)
         L     RWORK1,OFF00(RWORK) GET CONSOLE ECB ADDRESS
         ST    RWORK1,OPCWAIT+OFF08 PLACE ECB ADDR IN WAIT LIST
         MVI   OPCWAIT+OFF08,AVTE80 SET END OF LIST INDICATOR
         LTR   RWORK1,RWORK1       CIB'S SPECIFIED?
         BNZ   CHKINPUT            YES, CHECK FOR INPUT
         SPACE
         MVI   OPCWAIT+OFF04,AVTE80 SET END OF LIST AFTER TERM ECB
CHKINPUT EQU   *
         L     RWORK,OFF04(RWORK)  PICK UP CIB ADDRESS
         LA    RWORK,ZERO(RWORK)   CLEAR HIGH BYTE
         LTR   RWORK,RWORK         ANY CIB'S?
         BNZ   XCTL                YES, START COMMAND SERVICING
         CLC   AVTOPCOB+ONE(THREE),AVTDELAD+ONE ANYTHING QUEUED
         BNE   XCTL                     YES, SERVICE COMMAND
         SPACE
         WAIT  1,ECBLIST=OPCWAIT   WAIT FOR INPUT
         MVI   AVTOPCOB+OFF04,AVTEZERO  RESET COMPLETE BIT
         SPACE
XCTL     EQU   *
         OI    OPCSPEC,OPCFRMCA         SET ENTRY FLAG FOR 00    S22024
         SR    RZERO,RZERO              CLEAR PARAMETER REGISTER S22024
         LR    RPARM,ROPCAVT       POINT REG 1 TO OPC AVT
         TOPCTL                    FIRST LOAD OF SVC 104
         SPACE
         TM    AVTBIT1,AVTCLOSN    CLOSEDOWN IN EFFECT?
         BNO   WAIT                NO, WAIT FOR NEXT INPUT
         SPACE
         CLC   OPCWAITO(AL4),AVTFZERO ALL OUTPUT DONE?
         BNE   WAIT                NO, WAIT FOR COMPLETION
         TM    AVTCKELF,AVTCMCPN+AVTCCLCN  MCP CLOSE FINISHED  @XA03954
*                                          AND CHKPT REQUESTED @XA03954
         BZ    WAIT                     NO                     @XA03954
         DELETE EP=IEDKHISC        DELETE BEFORE OPCTL GOES AWA@Y17XARR
         SPACE
         RETURN (14,12),T          RESTORE REGS, RETURN TO OS
         DROP  RBASE               CHANGE BASE REGISTERS
OPCAVTAD DC    A(OPCAVT)           OPCAVT ADDRESS              @YM04671
         TITLE 'IEDQCA - TERM NAME OFFSET CALCULATING ROUTINE'
***********************************************************************
*                                                                     *
*        ENTRY TO THIS CODE IS VIA A 'BALR' FROM VARIOUS SVC          *
*        TRANSIENT MODULES.  THE INPUT IS AS FOLLOWS -                *
*                   REGISTER 2 - POINTER TO OP CONTROL AVT            *
*                   REGISTER 3 - POINTER TO THE CURRENT OPCE          *
*                   REGISTER 4 - POINTER TO THE TCAM AVT              *
*                   REGISTER 13 - POINTS TO OP CONTROL SAVE AREA      *
*                   REGISTER 14 - CONTAINS RETURN ADDRESS             *
*                   REGISTER 15 - CONTAINS ROUTINE ENTRY POINT ADDRESS*
*                   OPCDOUBL CONTAINS TERMNAME TO BE CHECKED          *
*                           (LEFT JUSTIFIED PADDED WITH BLANKS)       *
*        RETURN IS - NORMAL - REGISTER 14 PLUS 0 -                    *
*                           REGISTER 1 HAS THE TERM ENTRY ADDRESS     *
*                           OPCE CONTAINS TNT OFFSET(OCTRMTBL) @Y17XARX
*                   ABNORMAL - REGISTER 14 PLUS 4 -                   *
*                           INVALID TERMINAL NAME                     *
*                                                                     *
***********************************************************************
         USING TRMOFLOC,RBRNCH     BASE FOR THIS CODE
TRMOFLOC EQU   *
         STM   RTERM,RWORK3,SAVEOFF(RSAVE) SAVE REGISTERS    @YM08136
         TM    OCFLAG,OCTOTE       TOTE REQUEST?             @YM08136
         BNO   FINDMACH            NO,EXECUTE NORMAL PATH    @YM08136
         L     RPARM,OCCIB         GET THE CIB ADDRESS       @YM08136
         TM    CIBFLAG-IEDQCIB(RPARM),CIBALT WHICH TO USE    @YM08136
*                                  TTCIN OR THE NAME?        @YM08136
         BNO   FINDMACH            USE THE NAME              @YM08136
         MVC   OCTRMTBL,CIBTTCIN-IEDQCIB(RPARM) SETUP AS REQ @YM08136
         LH    RPARM,OCTRMTBL      SETUP INTERFACE           @YM08136
         LR    RWORK2,RRET         SAVE REG 14               @YM08136
         LR    RWORK3,RBRNCH       SAVE REG 15               @YM08136
         L     RBRNCH,AVTRNMPT     SETUP TNT CODE ADDRESS    @YM08136
         BALR  RRET,RBRNCH         GET TERMINAL ENTRY ADDR   @YM08136
         LR    RBRNCH,RWORK3       RESTORE REG 15            @YM08136
         LR    RRET,RWORK2         RESTORE REG 14            @YM09002
         ST    RPARM,OPCTRMWA      SAVE TRM ENTRY ADDRESS    @YM08136
         B     TRMRETUN            EXIT                      @YM08136
FINDMACH EQU   *                                             @YM08136
         L     RTNT,AVTRNMPT       TNT ADDRESSABILITY
         SR    RWORK,RWORK         CLEAR COUNTER OFFSET
         LH    RWORK1,TNTLEN       GET NUMBER OF TNT ENTRIES
         N     RWORK1,AVTCLRHI     CLEAR LEFT HALF OF REGISTER
         SR    RTERM,RTERM         CLEAR REG FOR NAME LENGTH
         IC    RTERM,TNTENLEN      PICK UP MAXIMUM TERMNAME LENGTH
         BCTR  RTERM,RZERO         DECREMENT LENGTH FOR EXECUTE
         LA    RTNT,TNTFIRST       GET FIRST ENTRY ADDRESS
TESTTRM  EQU   *
         LA    RWORK,ONE(RWORK)    UPDATE OFFSET COUNTER
         CR    RWORK,RWORK1        END OF TNT?
         BH    TRMERROR            YES, RETURN WITH ERROR
         SPACE
         EX    RTERM,COMPNAME      COMPARE NAME
         BE    NAMEMAT             CORRECT NAME, CHECK LENGTH
         SPACE
         LA    RTNT,FOUR(RTERM,RTNT) POINT TO NEXT ENTRY
         B     TESTTRM             CHECK FOR END OF TABLE OF NEXT ENTRY
         SPACE
COMPNAME CLC   OPCDOUBL(AL0),OFF00(RTNT) COMPARE TERM NAMES
         SPACE 2
NAMEMAT  EQU   *
         LA    RWORK1,SEVEN             SET TO MAXLEN-1        @OY12414
         CR    RTERM,RWORK1             MAXIMUM SPECIFIED      @OY12414
         BE    ENTRYOK                  YES, BRANCH            @OY12414
         TM    OCFLAG,OCMPP             APPL INPUT  ?          @OX16389
         BO    ENTRYOK                  YES, APPL INPUT OK     @OX16389
         LA    RWORK1,OPCDOUBL(RTERM)   POINT TO LAST BYTE     @OY12414
         CLI   OFF01(RWORK1),AVTEBLNK   FOLLOWED BY BLANK      @OY12414
         BNE   TRMERROR                 NO,RETURN ERROR        @OY12414
         SPACE
ENTRYOK  EQU   *
         STH   RWORK,OCTRMTBL      STORE TNT OFFSET IN OPCE
         LA    RTNT,ZERO(RTNT,RTERM)    ADD LENGTH TO GET ADDRESS
         MVC   OPCTRMWA(AL4),OFF00(RTNT) MOVE ADDRESS TO WORD FOR LOAD
         L     RPARM,OPCTRMWA      PICK UP TERM ENTRY ADDRESS
         B     TRMRETUN            RETURN WITHOUT ERROR
         SPACE
TRMERROR EQU   *
         LA    RRET,FOUR(RRET)     RETURN AT ERROR POINT
TRMRETUN EQU   *
         LM    RTERM,RWORK3,SAVEOFF(RSAVE) RESTORE REGISTERS   @YM08136
         BR    RRET                RETURN TO CALLING TRANSIENT
         TITLE 'IEDQCA - DCB LOOK-UP ROUTINE'
***********************************************************************
*                                                                     *
* ROUTINES CALLED = AVTRNMPT(ADDRESS TERMNAME TABLE),          @Y17XARX
* SAVTNAX(ADDRESS NAT CONV RTN), OPCHORT(ADDR COHORT LOOKUP)   @Y17XARX
*                                                              @Y17XARX
*        ENTRY TO THIS CODE IS VIA A 'BALR' FROM VARIOUS SVC          *
*        TRANSIENT MODULES.  THE INPUT IS AS FOLLOWS -                *
*                   REGISTER 1 IS ZERO                                *
*                           OPCDOUBL CONTAINS EBCDIC LINE NUMBER      *
*                           (LEFT JUSTIFIED)                          *
*                   REGISTER 1 - CONTAINS RLN                         *
*                           OPCDOUBL CONTAINS DDNAME                  *
*                           (LEFT JUSTIFIED PADDED WITH BLANKS)       *
*                   REGISTER 2 - POINTER TO THE OP CONTROL AVT        *
*                   REGISTER 3 - POINTER TO THE CURRENT OPCE          *
*                   REGISTER 4 - POINTER TO THE TCAM AVT              *
*                   REGISTER 13 - POINTS TO OP CONTROL SAVE AREA      *
*                   REGISTER 14 - CONTAINS RETURN ADDRESS             *
*                   REGISTER 15 - CONTAINS ROUTINE ENTRY POINT ADDRESS*
*        RETURN IS - NORMAL - REGISTER 14 PLUS 0 -                    *
*                           REGISTER 0 HAS THE UCB ADDRESS            *
*                           REGISTER 1 HAS THE DCB ADDRESS            *
*                           OPCE CONTAINS THE RLN IN OCRLN     @Y17XARX
*                              FOR 270X AND 3705.              @Y17XARX
*                       IF GROUPNAME,RLN LOOKUP THEN:                 *
*                           REGISTER 0 HAS THE LINE ENTRY ADDRESS     *
*                           REGISTER 1 HAS THE LGB ADDRESS            *
*                           OCRSID IN OPCE CONTAINS THE NETWORK@Y17XARX
*                               ADDRESS OF THE 3705 LINE ONLY. @Y17XARX
*                           OCTRMTBL IN OPCE CONTAINS THE TNT  @Y17XARX
*                               OFFSET OF A 3705 LINE IF VALID @Y17XARX
*                               RLN WAS FOUND. OTHERWISE,IT IS @Y17XARX
*                               THE TNT OFFSET OF THE GROUP.   @Y17XARX
*                           OPCTRMWA IN OPCAVT CONTAINS THE    @Y17XARX
*                               GROUP TTE 3705 LINE ADDR ONLY. @Y17XARX
*                   ABNORMAL - REGISTER 14 PLUS 4 -                   *
*                           DDNAME NOR LGB NOT FOUND           @Y17XARX
*                              REGISTER 0 CONTAINS X'20'              *
*                           INVALID RELATIVE LINE NUMBER              *
*                              REGISTER 0 CONTAINS X'08'              *
*                           DCB NOT OPEN                              *
*                              REGISTER 0 CONTAINS X'01'              *
*                            NCP NOT ACTIVE                    @Y17XARX
*                               REGISTER 0 CONTAINS X'01'      @YM08560
*                            3705 IS BEING IPLED OR DUMPED      S22024*
*                               REGISTER 0 CONTAINS X'02'      @Y17XARX
*                           NAME NOT FOUND IN TNT              @Y17XARX
*                              REGISTER 0 CONTAINS X'04'       @Y17XARX
*                                                                     *
***********************************************************************
         USING DCBLOCAT,RBRNCH     ESTABLISH ADDRESSABILTY     @YM03678
DCBLOCAT DS    0H                                              @Y17XARX
         B     CONT                     CONTINUE IN LOOKUP RTN @OY12425
         B     OPCSCAN                  BRANCH TO SCAN ROUTINE @OY12425
CONT     EQU   *                                               @OY12425
         STM   RWORKA,RBRNCH,AVTEZERO(RSAVE)  SAVE REGISTERS   @Y17XARX
         LR    RBASE,RBRNCH        LOAD BASE REGISTER 12       @Y17XARX
         DROP RBRNCH                                           @YM03678
         USING DCBLOCAT,RBASE                                  @YM03678
         L     RWORKA,AVTTCB       GET TCAM TCB ADDRESS
         STC   RPARM,OCRLN         PLACE RLN IN OPCE
         OI    OCFLAG,OCLINE       INDICATE LINE NO. PROCESSED
         LTR   RPARM,RPARM         RLN EQUAL ZERO
         BE    GETUCB              YES, ADDRESS IN COMMAND
         SPACE
         NI    OCFLAG,ALL-OCLINE   CLEAR LINE NO. FLAG
         L     RTIOT,TIOT(RWORKA)  GET TIOT ADDRESS
         LA    ROFF,DDOFF          POINT TO FIRST DD ENTRY
         AR    RTIOT,ROFF          ADD START OFFSET TO BASE
         SR    RLEN,RLEN           CLEAR REGISTER
DDLOOP   EQU   *
         IC    RLEN,OFF00(RTIOT)   GET LENGTH OF DD ENTRY
         CLI   OFF00(RTIOT),ZERO   OUT OF ENTRIES
         BE    GRPRLNLK                 LOOK FOR GROUP ENTRY     S22024
         SPACE
         CLC   OFF04(EIGHT,RTIOT),OPCDOUBL IS THIS THE DDNAME?
         BE    DDFOUND             YES, GET INFO
         SPACE
         AR    RTIOT,RLEN          BUMP TO NEXT DD ENTRY
         AR    ROFF,RLEN           UPDATE OFFSET
         B     DDLOOP                   TRY NEXT ENTRY
GRPRLNLK EQU   *                                                 S22024
         SPACE
         L     RTNT,AVTRNMPT            TNT ADDRESSABILITY       S22024
         SR    RWORK,RWORK              CLEAR COUNTER OFFSET     S22024
         LH    RWORK1,TNTLEN            GET NUMBER OF TNT ENTRIE S22024
         N     RWORK1,AVTCLRHI          CLEAR LFT HALF OF REG    S22024
         SR    RTERM,RTERM              CLEAR REG FOR NM LEN     S22024
         IC    RTERM,TNTENLEN           PICK UP MAX TERM LEN     S22024
         BCTR  RTERM,RZERO              DEC LENGTH FOR EXECUTE   S22024
         LA    RTNT,TNTFIRST            GET FIRST ENTRY ADDR     S22024
TESTTRM2 EQU   *                                                 S22024
         LA    RWORK,ONE(RWORK)         UPDATE OFFSET COUNTER    S22024
         CR    RWORK,RWORK1             END OF TNT?              S22024
         BH    TRMERR                   YES, RETURN WITH ERROR   S22024
         EX    RTERM,COMPNAM            COMPARE NAME             S22024
         BE    NAMEMA                   CORRECT NAME, CHECK LEN  S22024
         LA    RTNT,FOUR(RTERM,RTNT)    POINT TO NEXT ENTRY      S22024
         B     TESTTRM2                 CHECK FOR END OF TABLE   S22024
COMPNAM  CLC   OPCDOUBL(AL0),OFF00(RTNT) COMPARE TERM NAMES      S22024
NAMEMA   EQU   *                                                 S22024
         LA    RWORK1,SEVEN             SET TO MAXLEN-1        @OY12414
         CR    RTERM,RWORK1             MAXIMUM SPECIFIED      @OY12414
         BE    ENTRYO                   YES, BRANCH            @OY12414
         LA    RWORK1,OPCDOUBL(RTERM)   POINT TO LAST BYTE     @OY12414
         CLI   OFF01(RWORK1),AVTEBLNK   FOLLOWED BY BLANK      @OY12414
         BNE   TRMERR                   NO,RETURN ERROR        @OY12414
*                                                                     *
ENTRYO   EQU   *                                                 S22024
         STH   RWORK,OCTRMTBL           STORE TNT OFFSET IN OPCE S22024
         LA    RTNT,ZERO(RTNT,RTERM)    ADD LENGTH TO GET ADDR   S22024
         MVC   OPCTRMWA(AL4),OFF00(RTNT) MOVE ADDRESS TO WORD    S22024
         L     RLGBAD,OPCTRMWA          PICKUP TERM ENTRY ADDR   S22024
         LR    RTERM,RLGBAD             SAVE TERM ENTRY ADDR     S22024
         TM    TRMSTATE,TRMPREF         CHK FOR NEG PREFIX     @Y17XARX
         BNO   BAD                      NO ERROR                 S22024
         DROP  RTERM                                           @Y17XARX
         USING IEDNTRM,RTERM            GET ADDRESSABILITY TTE @Y17XARX
         LA    RWORKA,TRMPRFSZ          DISPLACEMENT IEDNTRM   @Y17XARX
         SR    RTERM,RWORKA             BACKUP TO NEG PART TTE @Y17XARX
         CLI   TRMTYPE,TRMGRP           GROUP TTE              @Y17XARX
         BNE   BAD                      NO,ERROR REG 0 = X'20' @Y17XARX
         SH    RLGBAD,TWENTY            GET ADDRESS OF LGB       S22024
         LR    RDCB,RLGBAD              SAVE RESOURCE ID LGB   @Y17XARX
         SR    RGSUBPTR,RGSUBPTR        CLEAR REGISTER         @Y17XARX
         ICM   RGSUBPTR,DCBLMASK,TRMSUBST   GET SUBSTRUCT PTR  @Y17XARX
         BZ    TBLEND                   RETURN ERROR TO CALLER @Y17XARR
         LR    RWORK2,RGSUBPTR          SAVE SUBSTRUCT PTR     @Y17XARX
LOOKMORE EQU   *                                               @Y17XARX
         L     RBRANCH,AVTRNMPT    LOAD REG 15 FOR TNT LOOK RTN@Y17XARX
         BALR  RRET,RBRANCH             GO TO TNT LOOKUP RTN   @Y17XARX
         LR    RTERM,RPARM              TTE BASE PTR REGISTER  @Y17XARX
         LA    RWORKA,TRMPRFSZ          DISPLACEMENT IEDNTRM   @Y17XARX
         SR    RTERM,RWORKA             BACKUP TO NEG PART TTE @Y17XARX
         TM    TRMSTATE,TRMLINE         IS IT A LINE           @Y17XARX
         BZ    TBLEND                   RETURN ERROR TO CALLER @Y17XARX
         LR    RTRMENTA,RPARM           SAVE TTE ADDRESS       @Y17XARX
         L     RQCBPTR,TRMDESTQ-ONE     SET UP BASE ADDR QCB   @Y17XARX
         USING IEDQQCB,RQCBPTR          ESTABLISH ADDRESS QCB  @Y17XARX
         CLC   OCRLN,QCBRELLN           TEST FOR QCB           @Y17XARX
         BE    FOUNDIT                  GO FIND NAT RTN        @Y17XARX
         SR    RPARM,RPARM              CLEAR REGISTER         @Y17XARX
         ICM   RPARM,DCBLMASK,TRMCOHTG  LOAD COHORTG PTR REG 1 @Y17XARX
         LR    RWORK2,RPARM             TEMP SAVE COHORTG PTR  @Y17XARX
         B     LOOKMORE                 START LOOP AGAIN       @Y17XARX
FOUNDIT  EQU   *                        COMMENT                @Y17XARX
         USING OPCAVT,ROPCAVT          BASE FOR OPC AVT        @YM07252
         TM    OPCSPEC,OPCRSTRT        RESTART IN PROGRESS     @YM07252
         BO    RESTRET                 YES, GOOD RETURN        @YM07252
         L     RWORKA,AVTSAVTP         GET SAVT ADDR FROM AVT  @Y17XARX
         STH   RWORK2,OCTRMTBL         TEMP SAVED TTCIN        @Y17XARX
         USING IEDNSVTD,RWORKA         ESTAB ADDRESS TO SAVT   @Y17XARX
         L     RBRANCH,SAVTTNTX         GET ADDR NAT CONVR RTN @YM03729
         DROP  RWORKA                   COMMENT                @Y17XARX
         LR    RPARM,RWORK2            TTCIN WAS TEMP SAVED    @Y17XARX
         BALR  RRET,RBRANCH            GO TO NAT CONVERSN RTN  @Y17XARX
         STH   RBRANCH,OCRSID          STORE NA OF LINE        @Y17XARX
         LR    RWORKA,RSAVE            SAVE ORIG REG 13        @Y17XARX
         LA    RSAVE,SAVEDOPC          PASS DCBLOCAT SAVEAREA  @Y17XARX
         L     RBRNCH,OPCHORT          SETUP ADDR COHORT RTN   @Y17XARX
         LA    RPARM,TRMPRFSZ           GET NEG PREFIX SIZE    @YM04609
         AR    RPARM,RTERM              PUT TTE IN PARM REG    @YM04609
         BALR  RRET,RBRNCH             GO TO COHORT SEARCH RTN @Y17XARX
         LR    RSAVE,RWORKA            RESTORE ORIG REG 13     @Y17XARX
         LTR   RZERO,RZERO              ERROR RETURN           @YM03729
         BZ    BADOPEN                  BAD,SET ERROR EXIT 01  @YM08560
         LR    RTERM,RPARM              REESTAB ADDRESS TO TTE @Y17XARX
         LA    RWORKA,TRMPRFSZ          DISPLACEMENT IEDNTRM   @Y17XARX
         SR    RTERM,RWORKA             BACK TO NEG PART TTE   @Y17XARX
         TM    TRMBYTE2,TRMRSACT        TEST IF NCP ACTIVE     @Y17XARX
         BZ    BADOPEN                  SET ERROR X'01' RZERO  @YM08560
         TM    TRMBYTE2,TRMINPG         IS ACT/DEACT IN PROGRES@Y17XARX
         BO    BADOPEN                  SET ERROR X'01' RZERO  @YM08560
RESTRET  EQU   *                                               @YM07252
         LR    RZERO,RTRMENTA           LOAD ADDR OF TRM ENTRY @Y17XARX
         B     DCBRETUN                 RETURN TO CALLER       @Y17XARX
         SPACE
TBLEND   EQU   *                                                 S22024
         LA    RZERO,AL8                SET ERROR RETURN CODE    S22024
         B     ERROR                    RETURN ERROR TO CALLER   S22024
*                                                                     *
         SPACE
TRMERR   EQU   *                                                 S22024
         LA    RZERO,BADNAME            LOAD ERROR RETURN CODE   S22024
         B     ERROR                    RETURN ERROR TO CALLER   S22024
*                                                                     *
         SPACE
         SPACE
BAD      EQU   *                                                 S22024
         LA    RZERO,BADDD              SET ERROR                S22024
         B     ERROR                    RETURN                   S22024
         SPACE
DDFOUND  EQU   *
         STH   ROFF,OCTIOT         SAVE OFFSET IN TIOT TO DDENTRY
GETUCB   EQU   *
         LA    RDEB,DEB(RWORKA)    POINT BEFORE FIRST DEB ADDRESS
NEXTDEB  EQU   *
         SR    RDCB,RDCB                ZERO DCB REG IN CASE DDNAME
*                                         NOT FOUND
         L     RDEB,OFF04(RDEB)    GET ADDRESS OF NEXT DEB
         LA    RDEB,ZERO(RDEB)     CLEAR HIGH BYTE
         LTR   RDEB,RDEB           ANOTHER DEB
         BZ    BAD                 NO, ERROR-DCB NOT OPEN      @YM08560
         USING DEBNMSUB,RDEB            ESTABLISH DEB BASE     @Y17XARX
         SPACE
         L     RDCB,DEBDCBAD       GET DCB ADDRESS
         USING IHADCB,RDCB             DCB ADDRESSABILITY      @ZA00226
         TM    DCBDSORG+OFF01,TXTRDCB   DCB FOR 270X OR 3705 ?   S22024
         BZ    NEXTDEB                  NO, TRY ANOTHER DEB      S22024
         SPACE
         TM    OCFLAG,OCLINE       PROCESSING LINE NUMBER?
         BNO   GETDCB              NO, PROCESS DDNAME
         SPACE
         SR    RWORKA,RWORKA       CLEAR FOR NO OF EXTENTS
         IC    RWORKA,DEBNMEXT     GET NUMBER OF RLNS
         LA    RWORK,DEBUCBAD      GET UCB ADDRESS POINTER
         LA    RLEN,ONE            SET COUNT TO ONE
NEXTUCB  EQU   *
         L     RUCB,OFF00(RWORK)   GET UCB ADDRESS
         CLC   OFF0D(THREE,RUCB),OPCDOUBL THIS THE UCB?
         BE    GOTUCB              YES, RETURN INFO
         SPACE
         LA    RLEN,ONE(RLEN)      ADD ONE TO COUNT
         LA    RWORK,FOUR(RWORK)        GET NEXT UCB ADDRESS
         CR    RLEN,RWORKA         ANY MORE EXTENTS?
         BNH   NEXTUCB             YES, LOOK AT NEXT UCB
         SPACE
         B     NEXTDEB             NO, TRY NEXT DEB
         SPACE
GOTUCB   EQU   *
         STC   RLEN,OCRLN          SAVE RLN
         LR    RWORKA,RUCB         SET PASS FOR UCB ADDRESS
         MVC   OCLINENO(AL2),OFF04(RWORKA) PLACE LINE NO. IN ELEMENT
         NI    OCLINENO,CLRFLAG    CLEAR UCB FLAGS
         B     UCBRET              RETURN DCB ADDR TO CALLER
         SPACE
GETDCB   EQU   *
         LH    RLEN,DCBTIOT        GET OFFSET TO TIOT
         N     RLEN,AVTCLRHI       CLEAR HIGH TWO BYTES
         CR    RLEN,ROFF           RIGHT DCB?
         BNE   NEXTDEB             NO, TRY NEXT DEB AND DCB
         SPACE
         TM    DCBOFLGS,OPEN       DCB OPENED
         BNO   BAD                 NO, RETURN ERROR INDICATION @YM08560
         SPACE
         LA    RZERO,INVALRLN           SET POSSIBLE ERROR
         CLC   OCRLN(AL1),DEBNMEXT RLN MORE THAN NO OF EXTENTS
         BH    ERROR               YES, RETURN ERROR
         SPACE
         LR    RWORKA,RPARM        PICK UP RELATIVE LINE NUMBER
         SLL   RWORKA,TWO          MULTIPLY BY FOUR
         L     RWORKA,DEBUCBAD-OFF04-DEBNMSUB(RWORKA,RDEB) UCB ADDRESS
         LA    RWORKA,ZERO(RWORKA) CLEAR HIGH BYTE
UCBRET   EQU   *
         LR    RZERO,RWORKA        RETURN UCB ADDRESS
         LTR   RWORKA,RWORKA       OPENED DUMMY?
         BNZ   DCBRETUN            NO, RETURN GOOD INFORMATION
         SPACE
*                  R E T U R N   T O   C A L L E R
*
BADOPEN  EQU   *
         LA    RZERO,OPENERR       SET NOT OPEN RETURN CODE
ERROR    EQU   *
         L     RRET,THIRTY6(RSAVE)      ADJUST REG 14 IN SAVE  @Y17XARX
         LA    RRET,FOUR(RRET)     RETURN TO ERROR ROUTINE
         ST    RRET,THIRTY6(RSAVE)      PUT ADJUSTED REG14 BACK@Y17XARX
DCBRETUN EQU   *
         LA    RPARM,AVTEZERO(RDCB)     ZERO HIGH ORDER BYTE AND S22024
*                                        RETURN DCB ADDRESS      S22024
         LM    RWORKA,RBRNCH,AVTEZERO(RSAVE)  RESTORE REGISTERS@Y17XARX
         BR    RRET                RETURN INFORMATION
         EJECT
TWENTY   DC    H'20'                    USED IN OBTAINING LGB  @Y17XARX
SAVEDOPC DS    18F'0'                   REGSAVE BALR FORMAT    @Y17XARX
         TITLE 'IEDQCA   -   SCAN ROUTINE FOR OP CONTROL COMMANDS '
***********************************************************************
*                                                                     *
*        ENTRY TO THIS CODE IS VIA A 'BAL' TO DCBLOOKUP+4 FROM        *
*        VARIOUS OP CONTROL MODULES WITH A 'DDN,RLN', 'DDN' OR        *
*        'ADDR' FIELD IN THE OP CONTROL CMD.                          *
*                                                              @YM04671
*        THE INPUT IS AS FOLLOWS:                              @YM04671
*           1. THE FIELD TO BE SCANNED MUST BE FOLLOWED BY ONE @YM04671
*              OF THESE DELIMITERS:                            @YM04671
*                 BLANK                                        @YM04671
*                 RIGHT PAREN                                  @YM04671
*                 COMMA                                        @YM04671
*                 SLASH                                        @YM04671
*                                                              @YM04671
*           2. REGISTERS CONTAIN FOLLOWING ON INPUT:           @YM04671
*              R2 - POINTER TO OP CNTRL AVT                           *
*              R3 - POINTER TO THE OPCE                               *
*              R4 - POINTER TO THE TCAM AVT                           *
*              R5 - POINTER TO OP CNTRL WRKAREA                       *
*              R11 - POINTER TO FIRST BYTE OF SCAN FIELD              *
*              R13 - POINTER TO OP CNTRL SAVEAREA                     *
*              R14 - CONTAINS RETURN ADDR TO CALLING MOD              *
*                                                                     *
*           3. OCSCAN MUST BE SET TO INDICATE ONE OF           @YM04671
*              FOLLOWING SETTINGS:                             @YM04671
*              OCSCAN = X'80' IF PASSED AN ADDR ONLY           @YM04671
*                       X'70' IF PASSED A DDNAME OR DDNAME,RLN @YM04671
*                             AND THE RLN CAN BE ALL           @YM04671
*                       X'40' IF PASSED A DDN,RLN ONLY                *
*                       X'20' IF PASSED A DDNAME                      *
*                       X'A0' IF PASSED A DDNAME OR ADDR              *
*                       X'C0' IF PASSED A DDN,RLN OR ADDR             *
*                       X'F0' IF PASSED AN ADDR, DDNAME, OR    @YM04671
*                             A DDN,RLN AND THE RLN CAN BE ALL @YM04671
*                                                                     *
*           4. FIELD CANNOT BE PASSED IN OPCDOUBL              @YM04671
*           5. IF A DDN,RLN IS AN INPUT, OCMODNME WILL BE USED @YM04671
*              BY OPCSCAN TO CONVERT THE RLN IF ONE EXISTS     @YM04671
*                                                              @YM04671
*        OUTPUT IS AS FOLLOWS:                                        *
*                                                                     *
*              IF RETURN IS NORMAL-                                   *
*                                                                     *
*                   OPCDOUBL=ADDR OR DDN OR A DDN,RLN                 *
*                   OCNOTUCB='1'B IF NOT A UCB ADDRESS                *
*                   R11=POINTS ONE PAST LAST DELIMITER FOUND          *
*                                                                     *
*              IF RETURN IS ABNORMAL BECAUSE NAME NOT FOUND           *
*                   BY DCBLOOKUP THEN RETURN IS REG 14 + 4            *
*                                                                     *
*              IF RETURN IS ABNORMAL BECAUSE OF INVALID SYNTAX        *
*                   OR LENGTH ERRORS THEN RETURN IS REG 14 & 8        *
**                                                             @OY12425
**********************************************************************
OPCSCAN  EQU   *                                               @OY12425
         STM   RWORKA,RSAVE,OPCSAVE     SAVE REGISTERS         @YM03678
         LR    RBASE,RBRNCH             SET UP BASE REGISTER   @YM03678
         ST    RRET,SAVEAREA            SAVE RTN ADDRESS       @OY12425
         USING REGSAVE,RSAVE            SAVE AREA DSECT        @YM05671
         LA    RSAVE,OPCSAVE            SAVE AREA ADDR         @YM05671
         MVC   USERBASE(4),RSAVEC       SAVE USER BASE REG     @YM05671
         ST    RBASE,RSAVEC             SET OPCSCAN BASE       @YM05671
         MVI   OPCDOUBL,AVTEBLNK        CLEAR FIRST BYTE       @OY12425
         MVC   OPCDOUBL+ONE(SEVEN),OPCDOUBL CLEAR FIELD        @OY12425
         SPACE 2
* SCAN FIELD FOR BLANK, COMMA, OR RIGHT PAREN                  @OY12425
         LH    RNUM,MAXTEN              SET FLD TO MAXLEN + 1  @OY12425
         SR    RSWITCH,RSWITCH          INDICATE 1RST TIME THRU@OY12425
SCAN     EQU   *                                               @OY12425
         LR    RSTART,RSCAN             SAVE START ADDR        @OY12425
FINDDEL  EQU   *                                               @OY12425
         BCT   RNUM,CONTINUE            ZERO BYTES LEFT?       @OY12425
         B     BADCMD                   YES                    @OY12425
CONTINUE EQU   *                                               @OY12425
         CLI   ZERO(RSCAN),BLANK        IS IT A BLANK?         @OY12425
         BE    BLANKDEL                 GO TO BLANK CODE       @OY12425
         CLI   ZERO(RSCAN),COMMA        IS IT A COMMA?         @OY12425
         BE    COMMADEL                 GO TO COMMA CODE       @OY12425
         CLI   ZERO(RSCAN),PARENR       IS IT A RIGHT PAREN?   @OY12425
         BE    PARENDEL                 GO TO PAREN CODE       @OY12425
         CLI   ZERO(RSCAN),SLASH        IS IT A SLASH?         @OY12425
         BE    SLASHDEL                 YES, GOTO SLASH CODE   @OY12425
         LA    RSCAN,ONE(RSCAN)         INCR PTR BY ONE        @OY12425
         B     FINDDEL                  GO CHK NXT BYTE        @OY12425
         SPACE 2
BLANKDEL EQU   *                                               @OY12425
         LTR   RSWITCH,RSWITCH          FIRST TIME THRU SCAN?  @OY12425
         BNZ   PASSTWO                  NO,GONE THRU TWICE     @OY12425
         BAL   RRET,SAVEFLD             SAVE FLD IN OPCDOUBL   @OY12425
         TM    OCSCAN,OCDDNAME+OCADDR   DDNAME OR ADDRESS FLD? @OY12425
         BZ    BADCMD                   NEITHER, BAD COMMAND   @OY12425
         BO    DDNADR                   BOTH POSSIBLE          @OY12425
         TM    OCSCAN,OCADDR            IS IT JUST AN ADDR?    @OY12425
         BZ    DDN                      NO, MUST BE DDNAME     @OY12425
         B     ADDR                     YES, MUST BE ADDR ONLY @OY12425
PASSTWO  EQU   *                                               @OY12425
* SECOND DELIM IS A BLANK - NEED TO CHKRLN                     @OY12425
         TM    OCSCAN,OCDDNRLN          CAN IT BE A DDN,RLN?   @OY12425
         BZ    BADCMD                   NO, BAD OPCSCAN SETTING@OY12425
         BAL   RRET,CHKRLN              GO VERIFY RLN          @OY12425
         LR    RPARM,RNUM               SET RLN REG            @OY12425
         B     EXIT                     GO TO DCBLOOKUP WHICH  @OY12425
*                                       WILL RETURN DIRECTLY TO@OY12425
*                                       MOD THAT CALLED OPCSCAN@OY12425
         SPACE 2
COMMADEL EQU   *                                               @OY12425
         LTR   RSWITCH,RSWITCH          FIRST TIME THRU SCAN?  @OY12425
         BNZ   PASS2                    NO, HAS GONE THRU TWICE@OY12425
         BAL   RRET,SAVEFLD             SAVE FLD IN OPCDOUBL   @OY12425
         LA    RSCAN,ONE(RSCAN)         INCR PTR BY ONE        @OY12425
         TM    OCSCAN,OCADDR+OCDDNRLN   DDN,RLN OR ADDR?       @OY12425
         BO    RLNADR                   YES, WHICH IS IT?      @OY12425
         TM    OCSCAN,OCADDR+OCDDNAME   ADDRESS OR DDNAME?     @OY12425
         BO    DDNADR                   YES, CHK FIELDS        @OY12425
         TM    OCSCAN,OCDDNRLN          IS IT DDN,RLN ONLY?    @OY12425
         BO    NXTDEL                   YES, GO FIND RLN       @OY12425
         B     BADCMD                   BAD OPCSCAN SETTING    @OY12425
PASS2    EQU   *                                               @OY12425
* SECOND DELIM IS A COMMA - GET RLN AND VERIFY IT              @OY12425
         BAL   RRET,CHKRLN              GO VERIFY RLN          @OY12425
         LR    RPARM,RNUM               SETUP RLN              @OY12425
         LA    RSCAN,ONE(RSCAN)         SETUP PTR PAST DELIM   @OY12425
         B     EXIT                     GO TO DCBLOOKUP WHICH  @OY12425
*                                       WILL RETURN DIRECTLY TO@OY12425
*                                       MOD THAT CALLED OPCSCAN@OY12425
         SPACE 2
PARENDEL EQU   *                                               @OY12425
         TM    OPCFLAG1,LPAREN          IS THERE A LEFT PAREN? @OY12425
         BZ    BADCMD                   NO, BAD CMD            @OY12425
         OI    OPCFLAG1,RPAREN          SETUP RIGHT PAREN FLAG @OY12425
         LTR   RSWITCH,RSWITCH          IS THIS 1RST DELIM?    @OY12425
         BNZ   LAST                     NO, GO VALIDATE RLN    @OY12425
         BAL   RRET,SAVEFLD             GO SAVE GRPNME         @OY12425
         LR    RSTART,RSCAN             SETUP FOR RLN=ALL      @OY12425
LAST     EQU   *                                               @OY12425
         BAL   RRET,CHKRLN              GO CHECK RLN           @OY12425
         LR    RPARM,RNUM               SETUP RLN REG          @OY12425
         LA    RSCAN,ONE(RSCAN)         SET PTR PAST DELIM     @OY12425
         B     EXIT                     GOTO DCBLOOKUP WHICH   @OY12425
*                                       WILL RETURN DIRECTLY TO@OY12425
*                                       MOD THAT CALLED OPCSCAN@OY12425
         SPACE 2
SLASHDEL EQU *                                                 @OY12425
         LTR   RSWITCH,RSWITCH          FIRST TIME THRU SCAN   @OY12425
         BNZ   BADCMD                   NO, MISPLACED SLASH    @OY12425
         BAL   RRET,SAVEFLD             SAVE FLD IN OPCDOUBL   @OY12425
         LA    RSCAN,ONE(RSCAN)         SET PTR PAST DELIMITER @OY12425
         TM    OCSCAN,OCADDR            IS IT AN ADDR          @OY12425
         BO    ADDR                     YES,,GOTO DCBLOOKUP    @OY12425
         B     BADCMD                   NO,,SYNTAX ERROR       @OY12425
         SPACE  2
ADDR     EQU   *                        ADDR                   @OY12425
         CH    RNUM,SIXX                IS ADDR 3 BYTES LONG?? @OY12425
         BNE   BADCMD                   NO,ERROR.              @OY12425
         SR    RPARM,RPARM              SETUP RLN REG.         @YM04671
         B     EXIT                     GO TO DCBLOOKUP WHICH. @YM04671
*                                       WILL RETURN DIRECTLYTO @YM04671
*                                       MOD THAT CALLED OPSCAN @YM04671
DDNADR   EQU   *                       DDNADR                  @YM04671
**********************************************************************
*                                                            * @YM04671
*         AT THIS POINT, THE LENGTH OF THE FIELD IS CHECKED..  @YM04671
*    IF THE LENGTH IS NOT 3 BYTES,,THE FIELD IS PROCESSED AS A @YM04671
*    DDNAME..                                                  @YM04671
*         IF THE LENGTH IS EQUAL TO 3 BYTE  THEN IT IS EITHER  @YM04671
*    A UCB ADDRESS OR A DDNAME.. THE FIELD IS FIRST SENT TO    @YM04671
*    LOOKUP ROUTINE AS AN ADDRESS.. IF IT IS A VALID UCB ADDR, @YM04671
*    LOOKUP WILL RETURN TO OPCSCAN AT A  0   OFFSET AND THEN   @YM04671
*    RETURN TO THE CALLER.. ELSE LOOKUP RETURNS AT A +4 OFFSET @YM04671
*    INTO OPCSCAN.. THE FIELD IS THEN SENT TO LOOKUP AS A DDN  @YM04671
*    AND LOOKUP WILL RETURN TO THE CALLER OF OPSCAN DIRECTLY.. @YM04671
*                                                            * @YM04671
**********************************************************************
         CH    RNUM,SIXX                EITHER ADDR OR DDN?    @OY12425
         BNE   DDN                      NO, MUST BE DDNAME     @OY12425
         MVC   OCPARM(1),OCRLN          SAVE RLN.              @YM04671
         SR    RPARM,RPARM              ELSE,TRY ADDR FIRST    @YM04671
         LR    RBRNCH,RBASE             SET FOR DCBLOOKUP.     @YM04636
         LM    RWORKA,RWORK2,RSAVE5B    RESTORE USER'S REGS    @YM06461
         LM    RBASE,RSAVE,RSAVEC       USERS 12-13            @YM06461
         BALR  RRET,RBRNCH              GOTO DCBLOOKUP.        @YM04636
         B     FOUND                    IT IS ADDR?            @YM04636
         TM    OCFLAG,OCTOTE            IS THIS TOTE??         @YM04671
         BZ    DDN                      NO, CONTINUE.          @YM04671
         CLI   OCOPTCDE,OCSTARTL        IS IT STARTLINE??      @YM04671
         BE    GETRLN                   RESTORE RLN.           @YM04671
         CLI   OCOPTCDE,OCSTOPL         IS IT STOPLINE??       @YM04671
         BNE   DDN                      NO, CONTINUE.          @YM04671
GETRLN   EQU   *                       GET RLN                 @YM04671
         SR    RPARM,RPARM              CLEAR RLN REG.         @YM04671
         IC    RPARM,OCPARM             RESTORE RLN.           @YM04671
         B     EXIT                     GOTO DCBLOCATE.        @YM04671
DDN      EQU   *                        NO, TRY DDNAME         @OY12425
         LH    RPARM,RLNONE             SET RLN REG            @OY12425
         B     EXIT                     GOTO DCBLOOKUP WHICH   @OY12425
*                                       WILL RETURN DIRECTLY   @OY12425
**                                      MOD THAT CALLED OPCSCAN@OY12425
RLNADR   EQU   *                                               @YM04671
***********************************************************************
*                                                              @YM04671
*       AT THIS POINT, THE LENGTH OF THE FIELD IS CHECKED.     @YM04617
*    IF THE LENGTH IS NOT 3 BYTES, THE FIELD IS PROCESSED AS A @YM04671
*    DDNAME,RLN.                                               @YM04671
*       OTHERWISE, THE 3 BYTE FIELD IS A DDN,RLN OR AN ADDR.   @YM04671
*    THE FIELD IS FIRST SENT TO LOOKUP AS AN ADDRESS. IF ITS A @YM04671
*    VALID UCB ADDRESS, LOOKUP WILL RETURN TO OPCSCAN AT A +0  @YM04671
*    OFFSET AND THEN RETURN TO THE CALLER.  ELSE LOOKUP RETRNS @YM04671
*    TO OPCSCAN AT A +4 OFFSET NOT HAVING FOUND THE UCB ADDR.  @YM04671
*    OPCSCAN WILL THEN SCAN THE FIELD FOR AN RLN AND RE-SEND   @YM04671
*    FIELD TO LOOKUP AS A DDN,RLN.  LOOKUP WILL VERIFY THE FLD @YM04671
*    AND RETURN TO THE CALLER OF OPCSCAN DIRECTLY.             @YM04671
*                                                              @YM04671
***********************************************************************
         CH    RNUM,SIXX                IS IT DDN,RLN OR ADDR  @YM04671
         BNE   TRYRLN                   NO, JUST DDN,RLN       @YM04671
         SR    RPARM,RPARM              SET RLN REG FOR ADDR.  @OY12425
         LR    RBRNCH,RBASE             SETUP FOR DCBLOCATE.   @YM04671
         LM    RWORKA,RWORK2,RSAVE5B    RESTORE REGS           @YM06461
         LM    RBASE,RSAVE,RSAVEC       USERS 12-13            @YM06461
         BALR  RRET,RBRNCH              GOTO DCBLOCATE         @YM04671
         B     FOUND                    NAME FOUND             @OY12425
TRYRLN   EQU   *                                               @OY12425
         TM    OCSCAN,OCALLRLN          IS RLN=ALL POSSIBLE?   @OY12425
         BZ    NXTDEL                   NO, SCAN FOR NXT DEL   @OY12425
         CLI   ZERO(RSCAN),OH           DO 'OFF' OR 'ON' FOLLOW@OY12425
         BNE   NXTDEL                   NO, CONTINUE RLN CHK   @OY12425
         LH    RPARM,RLNONE             SETUP RLN REG          @OY12425
         OI    OPCFLAG1,RLNALL          SET RLN=ALL SWITCH     @OY12425
         B     EXIT                     GOTO DCBLOOKUP WHICH   @OY12425
*                                       WILL RETURN DIRECTLY TO@OY12425
*                                       MOD THAT CALLED OPCSCAN@OY12425
NXTDEL   EQU   *                                               @YM04671
***********************************************************************
*                                                              @YM04671
*        AT THIS POINT, WE KNOW IT IS NOT AN ADDRESS, SO THE   @YM04671
*   FIELD IS SCANNED FOR AN RLN.  OPCSCAN WILL THEN GO TO      @YM04671
*   LOOKUP TO VERIFY THE DDNAME,RLN.                           @YM04671
*                                                              @YM04671
***********************************************************************
         LH    RSWITCH,RLNONE           GET READY FOR PASS TWO @YM04671
         LH    RNUM,FIVE                SET MAX RLN LEN        @OY12425
         B     SCAN                     GO SCAN FOR RLN        @OY12425
         SPACE 2
EXIT     EQU   *                        EXIT
         L     RRET,SAVEAREA            LOAD RETURN ADDR.      @OY12425
         LR    RBRNCH,RBASE             SET DCBLOCAT BASE REG. @YM03678
         LM    RWORKA,RWORK2,RSAVE5B    RESTORE REGS,NOT BASE  @YM06461
         L     RSAVE,RSAVED             LOAD USERS R13         @YM06461
         L     RBASE,USERBASE           RESTORE USER BASE      @YM05671
         BR    RBRNCH                   GO TO DCBLOOKUP        @YM03678
FOUND    EQU   *                                               @OY12425
         L     RRET,SAVEAREA            LOAD RETURN ADDR       @OY12425
         L     RBASE,USERBASE           RESTORE USER BASE      @YM05771
         BR    RRET                     RETURN TO CALLING MOD  @OY12425
BADCMD   EQU   *                        BAD COMMAND            @OY12425
         LM    RWORKA,RWORK2,RSAVE5B    RESTORE REGS           @YM06461
         L     RSAVE,RSAVED             USERS R13              @YM06461
         L     RRET,SAVEAREA            LOAD RETURN ADDR       @OY12425
         L     RBASE,USERBASE           RESTORE USER BASE      @YM05671
         B     EIGHT(RRET)              GO SET RZERO TO 18     @OY12425
         SPACE 2
* THIS SUBRTN STORES THE DDN OR ADDR IN OPCDOUBL               @OY12425
SAVEFLD  EQU   *                                               @OY12425
         LR    RLENTH,RSCAN             CALCULATE LEN OF RLN   @OY12425
         SR    RLENTH,RSTART            ZERO BYTES TO SCAN?    @OY12425
         BZ    BADCMD                   YES,ERROR              @OY12425
         CH    RLENTH,MAX               LEN GREATER THAN MAX   @OY12425
         BH    BADCMD                   YES, ERROR             @OY12425
         BCTR  RLENTH,RZERO             DECREMENT LEN FOR EX   @OY12425
         EX    RLENTH,MOVENAME          MOVE FLD INTO OPCDOUBL @OY12425
         BR    RRET                     BRANCH BACK TO MODULE  @OY12425
         SPACE 2
* THIS SUBROUTINE CHECKS RLN FOR VALID NUMERIC DATA,           @OY12425
*      PACKS RLN IN REG6, THEN CHECKS FOR VALID RLN VALUE      @OY12425
CHKRLN   EQU   *                                               @OY12425
         LR    RLENTH,RSCAN             CALCULATE LEN OF RLN   @OY12425
         SR    RLENTH,RSTART                                   @OY12425
         BZ    ALLRLN                   YES, GO CHK RLN=ALL    @OY12425
         CLC   ZERO(THREE,RSTART),STOPALL IS RLN EQUAL TO ALL? @OY12425
         BE    ALLRLN                   YES, GO CHK RLN=ALL    @OY12425
         MVI   OCSCAN,OCNOTUCB          NOT UCB ADDR, HAS RLN  @OY12425
         LR    RNUM,RLENTH              SETUP LEN OF FIELD     @OY12425
         LR    RPTR,RSTART              POINT TO START TO FIELD@OY12425
NUMERIC  EQU   *                                               @OY12425
         CLI   ZERO(RPTR),NUMBER        IS IT NUMERIC?         @OY12425
         BL    BADCMD                   NO, ERROR              @OY12425
         CLI   ZERO(RPTR),CHARNINE      IS IT NUMERIC?         @OY12425
         BH    BADCMD                   NO, ERROR              @OY12425
         LA    RPTR,ONE(RPTR)           POINT TO NEXT BYTE     @OY12425
         BCT   RNUM,NUMERIC             ARE WE DONE SCANNING?  @OY12425
PACKIT   EQU   *                                               @OY12425
         BCTR  RLENTH,RZERO             PREPARE FOR EXECUTE    @OY12425
         EX    RLENTH,MVRLN             MOVE RLN TO OCBACKUP   @OY12425
         EX    RLENTH,PACKRLN           PACK RLN               @OY12425
         XC    OCMODNME(SIX),OCMODNME   CLEAR HIGH BYTES       @OY12425
         CVB   RNUM,OCMODNME            CONVERT RLN            @OY12425
         LTR   RNUM,RNUM                ZERO RLN?              @OY12425
         BZ    BADCMD                   YES, INVALID           @OY12425
         CH    RNUM,MAXRLN              RLN > MAX?             @OY12425
         BH    BADCMD                   YES,INVALID            @OY12425
         BR    RRET                                            @OY12425
ALLRLN   EQU   *                                               @OY12425
         TM    OCSCAN,OCALLRLN          IS THIS RLN=ALL?       @OY12425
         BZ    BADCMD                   NO, INVALID CMD        @OY12425
         LH    RNUM,RLNONE              SETUP RLN VALUE        @OY12425
         OI    OPCFLAG1,RLNALL          SET FLAG FOR RLN=ALL   @OY12425
         BR    RRET                                            @OY12425
         DROP   RSAVE                                          @YM06461
REGSAVE  DSECT                                                 @YM05671
RSAVE5B  DS     7F                                             @YM05671
RSAVEC   DS     F                                              @YM05671
RSAVED   DS     F                                              @YM06461
IEDQCA   CSECT                                                 @YM05671
         TITLE 'IEDQCA - BUFFER ALLOCATION ROUTINE'
***********************************************************************
*                                                                     *
*        ENTRY TO THIS CODE IS VIA A 'BALR' FROM VARIOUS SVC          *
*        TRANSIENT MODULES.  THE INPUT IS AS FOLLOWS -                *
*                   REGISTER 1 - CONTAINS NUMBER OF UNITS REQUESTED   *
*                   REGISTER 2 - POINTER TO THE OP CONTROL AVT        *
*                   REGISTER 4 - POINTER TO THE TCAM AVT              *
*                   REGISTER 13 - POINTS TO OP CONTROL SAVE AREA
*                   REGISTER 14 - CONTAINS RETURN ADDRESS             *
*                   REGISTER 15 - CONTAINS ROUTINE ENTRY POINT ADDRESS*
*        RETURN IS - NORMAL - REGISTER 14 PLUS 0 -                    *
*                           REGISTER 0 CONTAINS UNIT COUNT            *
*                           REGISTER 1 POINTS TO THE FIRST NEW UNIT   *
*                                                                     *
***********************************************************************
         USING ALLOCBUF,RBRNCH
ALLOCBUF EQU   *
         STM   RWORK,RWORK2,SAVEOFF(RSAVE) SAVE REGISTERS
         LH    RWORK1,OPCAVBUF     PICK UP NO. AVAILABLE
         N     RWORK1,AVTCLRHI     CLEAR HIGH TWO BYTES
         SR    RWORK1,RPARM             ALLOCATE NUMBER NEEDED
         BNM   AVAIL                    POSITIVE MEANS WE HAVE THEM
         SPACE
         LCR   RWORK1,RWORK1            GET NUMBER NEEDED FROM TCAM
         STC   RWORK1,OPCBFERB+UNITCNT SET ERB COUNT
         SR    RPARM,RWORK1             FIND NUMBER GOTTEN FROM POOL
         BZ    REQBUFF             NO, REQUEST ALL
         SPACE
         OI    OPCSPEC,PARTREQ     PARTIAL UNIT REQUEST
         SR    RWORK1,RWORK1            CLEAR NUMBER LEFT IN POOL
AVAIL    EQU   *
         LR    RZERO,RPARM         SAVE NUMBER
         STH   RWORK1,OPCAVBUF     STORE NEW COUNT
         L     RWORK2,OPCBFIRS          PICK UP ADDR OF FIRST UNIT
         LR    RWORK,RWORK2             SAVE FIRST UNIT ADDRESS
ALLOCATE EQU   *
         LR    RWORK1,RWORK2       SAVE POINTER TO PREVIOUS UNIT
         L     RWORK2,OFF08(RWORK1) GET BUFF UNIT LINK FIELD
         BCT   RPARM,ALLOCATE      LOOP UNTIL NEEDED COUNT IS ZERO
         SPACE
         LR    RPARM,RWORK              SET FIRST UNIT POINTER
         ST    RWORK2,OPCBFIRS     PLACE NEW FIRST UNIT POINTER IN QCW
         TM    OPCSPEC,PARTREQ     PARTIAL REQUEST?
         BO    SAVCNT                   BRANCH ON YES            S22024
         LR    RWORK,RWORK1             SAVE POINTER TO LAST UNITS22024
         B     ALRETURN                 RETURN UNITS             S22024
         SPACE 1
SAVCNT   EQU   *                                                 S22024
         LR    RWORK2,RZERO        SAVE COUNT
         STM   RWORK,RWORK2,OFF0C(RSAVE) SAVE REGS FOR LATER
         SPACE
REQBUFF  EQU   *
         XC    OPCBFERB+OFF05(AL8),OPCBFERB+OFF05 CLEAR FIELDS
         MVI   OPCBFERB+OFF08,MPPREQ INDICATE MPP UNIT REQ
         MVI   OPCBFERB+OFF0C,ONEBUFF REQUEST ONE BUFFER
         LA    RWORK,AVTBFREB      GET BUFFER REQUEST QCB ADDRESS
         ST    RWORK,OPCBFERB      PLACE THAT ADDRESS IN THE ERB
         LA    RWORK,OPCBFERB      PICK UP ERB ADDRESS
         LR    RWORK1,RWORK        SET ERB ADDRESS
         STM   RWORK,RWORK1,OPCAQCTL PUT ADDRESS IN AQCTL LIST
         MVI   OPCAQCTL,POST       SET POST FLAGS
         MVI   OPCAQCTL+OFF04,AVTE80 SET END OF LIST
         LA    RPARM,OPCAQCTL      POINT TO 102 PARAMETER LIST
         LR    RWORK,RBRNCH        SAVE BASE REGISTER
         SPACE 2
         AQCTL                     CROSS PARTITION POST
         SPACE 2
*                  WAIT FOR ANOTHER CALL TO DUTY
*
         LR    RBRNCH,RWORK             RESTORE BASE REGISTER
WAITBUFF EQU   *
         LR    RWORK,RBRNCH             SAVE BASE REGISTER
         WAIT  ECB=OPCPWECB             WAIT FOR ERB RETURN    @YM08508
         SPACE 2
         LR    RBRNCH,RWORK        RESTORE BASE REGISTER
         MVI   OPCPWCCC,ZERO            CLEAR COMPLETION BIT   @YM08508
         ICM   RWORK1,7,OPCPWCHN        GET ERB ADDRESS        @YM08508
         MVC   OPCPWCHN,LINK+1(RWORK1)  DELINK ERB             @YM08508
         L     RPARM,ERBBUFF(RWORK1)    GET NEW BUFFER POINTER
         IC    RZERO,PRFNBUNT-IEDQPRF(RPARM) GET COUNT RETURNED
         TM    OPCSPEC,PARTREQ     PARTIAL REQUEST?
         BNO   TOTREQ              NO, TOTAL
         SPACE
         LM    RWORK,RWORK2,OFF0C(RSAVE) RESTORE REGS
         ST    RPARM,PRFTIC-IEDQPRF(RWORK1) LINK NEW UNITS
         AR    RZERO,RWORK2        GET TOTAL COUNT
         LR    RPARM,RWORK              GET FIRST UNIT POINTER
TOTREQ   EQU   *
         LR    RPREFIX,RPARM       GET FIRST UNIT ADDRESS
         LR    RWORK,RZERO              GET COUNT RECEIVED      SA63617
GETEND   EQU   *
         LR    RWORK1,RPREFIX           SAVE LAST POINTER       SA63617
         L     RPREFIX,PRFTIC      PICK UP TIC FIELD
         BCT   RWORK,GETEND             FIND LAST UNIT          SA63617
         SPACE
         NI    OPCSPEC,ALL-PARTREQ TURN OFF FLAG
ALRETURN EQU   *
         SPACE
         MVI   OFF0B(RWORK1),TWO        SET END OF CHAIN        SA63617
         SPACE 2                                               @Y17XARV
*        CLEAR EACH BUFFER UNIT EXCEPT FOR UNIT CONTROL AREA   @Y17XARV
*                                                              @Y17XARV
         LR    RWORK1,RPARM             COPY ADDR OF FIRST UNIT@Y17XARV
         SLR   RWORK2,RWORK2            CLEAR                  @Y17XARV
         ICM   RWORK2,LLH,AVTKEYLE      LOAD UNIT SIZE         @Y17XARV
         BCTR  RWORK2,RZERO             SUBTRACT FOR EX INSTR. @Y17XARV
CLRBUFUT DS    0H                                              @Y17XARV
         EX    RWORK2,CLRINSTR          CLEAR BUFFER UNIT      @Y17XARV
         TM    AVTSAVTF,AVTVTMCP        CHECK FOR NEG PREFIX   @Y17XARV
         BNO   CLRBRNCH                 BR AROUND IF NONE      @Y17XARV
         LA    RWORK,OCPREFSZ           GET NEG PREF LGTH      @Y17XARV
         LCR   RWORK,RWORK              MAKE IT NEG            @Y17XARV
         ALR   RWORK,RWORK1             ADD ADDR TO BACK UP    @Y17XARV
         XC    OFF00(OCPREFSZ,RWORK),OFF00(RWORK)  CLR NEG PREF@Y17XARV
CLRBRNCH L     RWORK1,OFF08(RWORK1)     LOAD FULL WORD CONTAIN-@Y17XARV
*                                         ING TIC              @Y17XARV
         EX    RWORK1,OPCHNEND          IS THIS THE LAST UNIT? @Y17XARV
         BZ    CLRBUFUT                 NO - GO CLEAR NEXT UNIT@Y17XARV
         SPACE 2                                               @Y17XARV
         MVI   PRFPRI-IEDQPRF(RPARM),PRIBFRTB   SET PRIORITY TO  S22024
*                                       NON-X'D8' VALUE TO AVOID S22024
*                                       CONFUSION IN IGC0210D    S22024
         LM    RWORK,RWORK2,SAVEOFF(RSAVE) RESTORE REGISTERS
         BR    RRET                RETURN WITH NEW UNIT ADDR IN REG 1
         SPACE
CLRINSTR XC    OFF0C(0,RWORK1),OFF0C(RWORK1) TEMPLATE FOR      @Y17XARV
*                                       CLEARING BUFFER UNIT   @Y17XARV
         TITLE 'IEDQCA - POLLSTOP ROUTINE'
***********************************************************************
*                                                                     *
*        ENTRY TO THIS CODE IS VIA A 'BALR' FROM VARIOUS SVC          *
*        TRANSIENT MODULES.  THE INPUT IS AS FOLLOWS -                *
*                   REGISTER 1 - ADDRESS OF FIRST UNIT IN CHAIN TO BE *
*                      FREED                                          *
*                   REGISTER 2 - POINTER TO THE OP CONTROL AVT        *
*                   REGISTER 4 - POINTER TO THE TCAM AVT              *
*                   REGISTER 13 - POINTS TO OP CONTROL SAVE AREA      *
*                   REGISTER 14 - CONTAINS RETURN ADDRESS             *
*                   REGISTER 15 - CONTAINS ROUTINE ENTRY POINT ADDRESS*
*        RETURN IS - NORMAL - REGISTER 14 PLUS 0 -                    *
*                                                                     *
***********************************************************************
         USING FREEBUFF,RBRNCH
FREEBUFF EQU   *
         STM   RWORK,RZERO,SAVEOFF(RSAVE) SAVE REGISTERS     @ZM46634
         LR    RPREFIX,RPARM       GET FIRST UNIT ADDRESS
         SR    RWORK,RWORK         CLEAR COUNTER REGISTER
NEXTUNIT EQU   *
         EX    RPREFIX,OPCHNEND    END OF CHAIN?
         BNZ   FREEEND             YES, PLACE UNITS IN POOL
         SPACE
         MVI   PRFTIC,TIC          SET TIC CODE IN UNIT
         L     RPREFIX,PRFTIC      PICK UP NEXT UNIT ADDRESS
         BCT   RWORK,NEXTUNIT      KEEP COUNT OF UNITS
         SPACE
FREEEND  EQU   *
         LPR   RWORK,RWORK         UNITS FREED MADE NON-NEGATIVE
         LR    RWORK1,RWORK        SAVE NUMBER OF UNITS FREED
         AH    RWORK,OPCAVBUF      ADD NEW UNITS TO COUNT
         STH   RWORK,OPCAVBUF      STORE NEW COUNT IN AVAILABLE AREA
         LA    RPREFIX,OPCBFIRS-(PRFTIC-IEDQPRF) POINT BEFORE QCW
         LR    RWORK,RPREFIX       SAVE BEGINNING POINTER
LOOPQUE  EQU   *
         L     RPREFIX,PRFTIC      GET NEXT UNIT ADDR
         EX    RPREFIX,OPCHNEND    END OF CHAIN?
         BNZ   QUEEND              YES, PLACE NEW UNITS IN CHAIN
         SPACE
         LR    RWORK,RPREFIX       POINT TO NEXT UNIT
         B     LOOPQUE             CONTINUE SEARCH
         SPACE
QUEEND   EQU   *
         ST    RPARM,PRFTIC-IEDQPRF(RWORK) PLACE NEW UNITS IN POOL
         MVI   PRFTIC-IEDQPRF(RWORK),TIC SET TIC CODE IN UNIT
         L     RPREFIX,OPCBFIRS         1ST BFR IN POOL         SA67103
         EX    RPREFIX,OPCHNEND         ANY TO FREE            @ZA05044
         BNZ   ENDFREE                  NO,GET OUT             @ZA05044
         LA    RWORK,AVTBFRTB           ADDR OF BFR-RETURN QCB  SA67103
         ST    RWORK,PRFQCBA-ONE        ADDR FOR QPOST          SA67103
         MVI   PRFPRI,PRIBFRTB          PRIORITY                SA67103
         ICM   RPARM,SEVEN,PRFNBUNT     GET OP/CTL COMMAND ETC @Y17XARA
         ICM   RPARM,EIGHT,OPCAVBUF+1   AVAILABLE-BFR COUNT    @Y17XARA
         ST    RPARM,PRFNBUNT           SAVE OP/CTL COMMAND ETC@Y17XARA
         ST    RPREFIX,OPCAQCTL         BFR ADDR IN PARM LIST   SA67103
         ST    RPREFIX,OPCAQCTL+FOUR    BFR ADDR IN PARM LIST   SA67103
         MVI   OPCAQCTL,POST            SET FLAG FOR POST       SA67103
         MVI   OPCAQCTL+FOUR,AVTE80     SET END-OF-LIST         SA67103
         LA    RPARM,OPCAQCTL           POINT TO PARM LIST      SA67103
         LR    RWORK,RBRNCH             SAVE BASE REG           SA67103
         AQCTL                          CROSS-PARTITION POST    SA67103
         LR    RBRNCH,RWORK             RESTORE BASE REG        SA67103
         LA    RWORK,TWO                CLEAR THE OP CTL ...    SA67103
         ST    RWORK,OPCBFIRS           ... BFR POOL            SA67103
         SR    RWORK,RWORK              SET AVAILABLE-BFR ...   SA67103
         STH   RWORK,OPCAVBUF           ... COUNT TO ZERO       SA67103
ENDFREE  EQU   *                                               @ZA05044
         LR    RPARM,RWORK1        RETURN NUMBER OF UNITS FREED
         LM    RWORK,RZERO,SAVEOFF(RSAVE) RESTORE REGISTERS    @ZM46634
         BR    RRET                RETURN TO CALLER
         EJECT                                                 @XA09783
         USING POLSTOP,RBRNCH                                  @XA09783
POLSTOP  EQU *                                                 @XA09783
         TM    PRFLCB+TWO-IEDQPRF(ROPCE),OCX01  BFR FOR 3705 PO@XA09783
         BNZ   GETDEST1                 GET DESTINATION TNT IND@XA09783
         SPACE 2                                               @XA09783
AROUND   EQU   *                                               @XA09783
         TM    PRFLCB+TWO-IEDQPRF(ROPCE),OCX02  BFR FOR 270X PO@XA09783
         BZR   RRET                                            @XA09783
         MVI   OCUNIT+3,OFF02           SET END OF BFR UNIT CHA@XA09783
         LH    RZERO,OCPARM                                    @XA09783
         MVC   OPCLDNME+THREE(TWO),MOD09                       @XA09783
         BAL   RRET,GETDEST1            GET DESTINATION TNT IND@XA09783
         B     XCTLTOMH                                        @XA09783
         SPACE 2                                               @XA09783
GETDEST1 EQU   *                                               @XA09783
         OI    OCFLAG,OCCONSOL                                 @XA09783
         XC    OCCONID(AL2),OCCONID     CLEAR CONSOLE ID       @OY13278
         OC    AVTOPCIN,AVTOPCIN                               @XM05809
         BZR   RRET                                            @XA09783
         NI    OCFLAG,AVTEFF-OCCONSOL                          @XA09783
         MVC   OCDEST(AL2),AVTOPCIN     PUT PRITERM TTCIN IN DEST
*                                                              @XM05809
         BR    RRET                                            @XA09783
         SPACE 2                                               @XA09783
MOD09    DC    C'09'                    MODULE IGC0910D        @XA09783
         TITLE 'DECREMENT A/D BUFFER UNIT COUNT AND REDRIVE'   @Y17XARV
***************************************************************@Y17XARV
*                                                              @Y17XARV
*        ENTRY TO THIS CODE IS VIA A 'BALR' FROM VARIOUS       @Y17XARV
*        TRANSIENT MODULES.  THE ENTRY ADDRESS IS CONTAINED    @Y17XARV
*        IN THE OP. CTL. AVT AT OPCDECR.  THIS SUBROUTINE      @Y17XARV
*        PERFORMS THE FOLLOWING FUNCTIONS:                     @Y17XARV
*        1)    OPCADGOT (THE NUMBER OF BUFFER UNITS ACT/       @Y17XARV
*              DACT IS USING) IS DECREMENTED BY THE CONTENTS   @Y17XARV
*              OF REGISTER 0 (THE PARAMETER CONTAINING THE     @Y17XARV
*              NUMBER OF UNITS BEING RELEASED).                @Y17XARV
*        2)    IF THERE ARE OPCE'S ON THE REDRIVE CHAIN,       @Y17XARV
*              IF THE REDRIVE ELEMENT IS NOT CURRENTLY IN      @Y17XARV
*              USE, AND IF ACT/DACT BUFFER UNIT USAGE COUNT    @Y17XARV
*              IS LESS THAN 1/2 THE TOTAL NO. OF BUFFER UNITS  @Y17XARV
*              IN TCAM, THEN THE REDRIVE ELEMENT IS POSTED     @Y17XARV
*              TO THE OP. CTL. QCB (AVTOPCOB).                 @Y17XARV
*                                                              @Y17XARV
*        THE INPUT TO THIS ROUTINE IS AS FOLLOWS:              @Y17XARV
*              REG 00 - CONTAINS THE NUMBER OF BUFFERS         @Y17XARV
*                       UNITS BEING RELEASED.                  @Y17XARV
*              REG 02 - ADDR. OF OP. CTL. AVT                  @Y17XARV
*              REG 04 - ADDR. OF TCAM'S AVT                    @Y17XARV
*              REG 13 - ADDR. OF OP. CTL. SAVE AREA            @Y17XARV
*              REG 14 - RETURN ADDR.                           @Y17XARV
*              REG 15 - ENTRY POINT FOR ROUTINE                @Y17XARV
*                                                              @Y17XARV
*        NO RETURN CODES ARE PRESENTED TO THE CALLER.          @Y17XARV
*                                                              @Y17XARV
***************************************************************@Y17XARV
         SPACE 4                                               @Y17XARV
         USING DECRCT,RBRNCH            SET UP BASE REG.       @Y17XARV
DECRCT   DS    0H                                              @Y17XARV
         STM   RZERO,RBRNCH,SAVEOFF(RSAVE) SAVE REGS.          @Y17XARV
         L     RSAVT,AVTSAVTP           SET PTR. TO SEC. AVT   @YM03697
         SPACE 2                                               @Y17XARV
         LH    RWORK,OPCADGOT           LOAD # OF BUFFER UNITS @Y17XARV
*                                         A/D IS USING         @Y17XARV
         SR    RWORK,RZERO              SUB. FREED BUFFERS     @Y17XARV
         STH   RWORK,OPCADGOT           UPDATE # OF UNITS A/D  @Y17XARV
*                                         IS USING             @Y17XARV
         L     RWORK1,OPCBUFWT          LOAD ANCHOR FOR REDRIVE@Y17XARV
*                                         OPCE'S               @Y17XARV
         LTR   RWORK1,RWORK1            IS OPCE CHAIN EMPTY ?  @Y17XARV
         BZ    DECRTN                   YES - GO RETURN        @Y17XARV
         CLI   SAVTRDPY-IEDNSVTD(RSAVT),ZERO IS REDRIVE ELEM.  @YM03697
*                                         FREE ?               @Y17XARV
         BNZ   DECRTN                   NO - GO RETURN         @YM06046
         SLR   RWORK1,RWORK1            CLEAR                  @Y17XARV
         ICM   RWORK1,LLH,AVTNOLBF      LOAD # OF TCAM BUFFER  @Y17XARV
*                                         UNITS                @Y17XARV
         SRL   RWORK1,ONE               DIVIDE BY TWO          @Y17XARV
         CLR   RWORK,RWORK1             IS THE # OF BUFFER     @Y17XARV
*                                         A/D USING GT OR E TO @Y17XARV
*                                         1/2 THE TOTAL UNITS ?@Y17XARV
         BNL   DECRTN                   YES - GO RETURN        @Y17XARV
         SPACE 2                                               @Y17XARV
****                                                           @Y17XARV
*        POST THE REDRIVE ELEMENT TO THE OP.CTL QCB.           @Y17XARV
*                                                              @Y17XARV
         MVI   SAVTRDPY-IEDNSVTD(RSAVT),PRILOFLG REDRIVE PRTY. @YM03697
         LA    RWORK,AVTOPCOB           OBTAIN OP.CTL. QCB ADDR@Y17XARV
         ST    RWORK,SAVTRDKY-IEDNSVTD(RSAVT)   &PLACE IN ELEM.@YM03697
         LA    RWORK,SAVTRDRV-IEDNSVTD(RSAVT) LOAD ELEM. ADDR. @YM03697
         LR    RWORK1,RWORK             COPY                   @Y17XARV
         STM   RWORK,RWORK1,OPCAQCTL    PUT ADDR. IN AQCTL     @Y17XARV
*                                         PARM. LIST           @Y17XARV
         MVI   OPCAQCTL,POST            SET POST FLAGS         @Y17XARV
         MVI   OPCAQCTL+OFF04,AVTE80    SET FOR END OF LIST    @Y17XARV
         LA    RPARM,OPCAQCTL           POINT TO AQCTL PARM.   @Y17XARV
*                                         LIST                 @Y17XARV
         LR    RWORK,RBRNCH             COPY BASE REG.         @Y17XARV
         SPACE 2                                               @Y17XARV
         AQCTL                                                 @Y17XARV
         SPACE 2                                               @Y17XARV
         LR    RBRNCH,RWORK             RESTORE BASE REG.      @Y17XARV
         SPACE 2                                               @Y17XARV
DECRTN   DS    0H                                              @Y17XARV
         LM    RZERO,RBRNCH,SAVEOFF(RSAVE) RESTORE REGS.       @Y17XARV
         BR    RRET                     RETURN                 @Y17XARV
         TITLE 'IEDQCA - OPERATOR CONTROL OUTPUT SUBTASK'
***********************************************************************
*                                                                     *
*        ENTRY IS FROM TCAM DISPATCHER TO 2 BYTES BEYOND OSTCB        *
*        THIS ROUTINE CHECKS THE OUTPUT QUEUE.  IF IT IS NOT EMPTY,   *
*        THE DUMMY LCB/SCB IS RE-INITIALIZED AND TPOSTED BACK TO      *
*        IEDQBD.  IF THE QUEUE IS EMPTY, RETURN IS TO THE DISPATCHER. *
*        BEFORE RETURN, THE TCAM AVT IS CHECKED FOR CLOSEDOWN.        *
*        IF CLOSEDOWN IS IN PROGRESS, OP CONTROL ECB IS               *
*        POSTED COMPLETE TO ALLOW OP CONTROL TO CLEAN UP ITS QUEUES.  *
*                                                                     *
***********************************************************************
         DROP  RBRNCH
         USING OSTCB,RPARM         BASE FOR STCB
         USING IEDQDISP,RCIB       BASE FOR DISPATCHER
OSTCB    DC    X'04',X'00'         STCB FOR OUTPUT
         LR    RPARM,ROPCE         SET BASE REGISTER
         DROP  ROPCAVT
         LA    ROPCAVT,OPCAVT      PICK UP OPC AVT ADDRESS
         USING OPCAVT,ROPCAVT
         L     RAVT,OPCAVTPT       GET ADDRESS OF TCAM AVT
         LR    RWORKA,RPARM       SAVE BASE REGISTER           @G36XRRU
         MODESET MODE=SUP         SET SUPERVISOR STATE         @G36XRRU
         MODESET EXTKEY=SUPR      SET KEY ZERO                 @G36XRRU
SETATSK1 EQU   *                                               @G36XRRU
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE,               *
               RELATED=OPCWAITO-IGC0710D(SETATSK)              @G36XRRU
         LR    RPARM,RWORKA       RESTORE BASE REGISTER        @G36XRRU
         SLR   ROPCE,ROPCE        CLEAR REGISTER               @G36XRRU
         MVI   OPCSTCBS,ZERO      INDICATE STCB NOT BUSY       @G36XRRU
         ICM   ROPCE,ADDRESS,OPCWAITO+ONE GET FIRST ELEMENT
*                                 ON QUEUE                     @G36XRRU
         BZ    NONETHER           NONE PRESENT, BRANCH         @G36XRRU
         MVC   OPCWAITO+ONE(AL3),ONE(ROPCE) DELINK ELEMENT     @G36XRRU
         MVI   OPCSTCBS,AVTEFF    INDICATE STCB STILL BUSY     @G36XRRU
NONETHER EQU   *                                               @G36XRRU
         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE,                          *
               RELATED=IEDQCA(SETATSK1)                        @G36XRRU
         MODESET EXTKEY=TCAM      SET TO TCAM KEY              @G36XRRU
         LR    RPARM,RWORKA       SAVE BASE REGISTER           @G36XRRU
         MODESET MODE=PROB        SET PROBLEM STATE            @G36XRRU
         LR    RPARM,RWORKA       RESTORE BASE REGISTER        @G36XRRU
         LA    RBRNCH,LCBSETUP     BASE FOR SETUP CODE
         LA    RRET,DSPPOST             SET RETURN ADDRESS
MPTEST   EQU   *
*
*
*
*
*
*
*
*
*
*
*
         LTR   ROPCE,ROPCE         QUEUE EMPTY?
         BNZ   LCBSETUP            GO TO LCBSETUP              @OZ32786
         SPACE
         MVI   OPCOQSW,ZERO        CLEAR TS SWITCH
         LA    RPARM,OLCBECB       PICK UP ECB ADDRESS
         TM    AVTBIT1,AVTCLOSN    CLOSEDOWN IN PROGRESS?
         BNO   DSPDISP             NO, RETURN TO THE DISPATCHER
         SPACE
         POST  (1)                 POST OP CONTROL COMPLETE
         B     DSPDISP             GIVE CONTROL TO THE DISPATCHER
         SPACE
         TITLE 'IEDQCA - POSTWAIT ROUTINE'
************************************************************** @Y17XAWC
*                                                              @Y17XAWC
*        THIS SUBROUTINE IS PASSED THE ADDRESS OF A REQUEST    @Y17XAWC
*        ELEMENT WHICH IS COMPLETELY SET UP FOR A TPOST.       @Y17XAWC
*        THE ELEMENT IS TPOSTED VIA SVC 102.  THE OP CONTROL   @Y17XAWC
*        TASK IS THEN PUT INTO A WAIT UNTIL THAT SAME ELEMENT  @Y17XAWC
*        HAS BEEN TPOSTED BACK TO OP CONTROL AND PUT ON THE    @Y17XAWC
*        OPCPWCOB ELEMENT CHAIN.  THE ELEMENT IS THEN          @YM08486
*        REMOVED FROM THE CHAIN, AND CONTROL IS RETURNED TO    @Y17XAWC
*        THE CALLER.                                           @Y17XAWC
*                                                              @Y17XAWC
*        THIS POST-&-WAIT PROCEDURE IS USEFUL WHEN EVENTS      @Y17XAWC
*        IN THE OP CONTROL AND TCAM TASKS MUST BE SYNCHRONIZED @Y17XAWC
*        TO INSURE PROPER OPERATION.                           @Y17XAWC
*                                                              @Y17XAWC
*        ENTRY TO THIS CODE IS VIA A 'BALR' FROM VARIOUS       @Y17XAWC
*        MODULES RUNNING UNDER THE OP CONTROL TASK.  THE       @Y17XAWC
*        INPUT IS AS FOLLOWS:                                  @Y17XAWC
*              REGISTER 1  - POINTER TO THE REQUEST ELEMENT    @Y17XAWC
*              REGISTER 2  - POINTER TO THE OP CONTROL AVT     @Y17XAWC
*              REGISTER 4  - POINTER TO THE TCAM AVT           @Y17XAWC
*              REGISTER 14 - RETURN ADDRESS                    @Y17XAWC
*              REGISTER 15 - ENTRY POINT ADDRESS               @Y17XAWC
*                                                              @Y17XAWC
************************************************************** @Y17XAWC
         USING POSTWAIT,RBASE                                  @Y17XAWC
POSTWAIT DS    0H                                              @Y17XAWC
         STM   RZERO,RBRNCH,OPCSAVE     SAVE CALLER'S REGS     @Y17XAWC
         LR    RBASE,RBRNCH             SET UP BASE REGISTER   @Y17XAWC
*                                                              @Y17XAWC
*              SET UP PARM LIST FOR SVC 102 TO TPOST ELEMENT   @Y17XAWC
         LR    RZERO,RPARM              COPY ELEMENT ADDRESS   @Y17XAWC
         STM   RZERO,RPARM,OPCAQCTL     ELEMENT ADDRESS        @Y17XAWC
         MVI   OPCAQCTL,POST            SET POST FLAGS         @Y17XAWC
         MVI   OPCAQCTL+OFF04,AVTE80    SET END-OF-LIST        @Y17XAWC
         LA    RPARM,OPCAQCTL           POINT TO PARM LIST     @Y17XAWC
         AQCTL                          TPOST THE ELEMENT      @Y17XAWC
*                                                              @Y17XAWC
WAITELEM EQU   *                                               @Y17XAWC
         WAIT  ECB=OPCPWECB             AWAIT ELEMENT'S RETURN @YM08403
*                                                              @Y17XAWC
         MVI   OPCPWCCC,0               CLEAR COMPLETION BIT   @YM08403
*                                                              @Y17XAWC
         ICM   RPARM,7,OPCPWCHN         GET THE ELEMENT ADDR   @YM08486
         MVC   OPCPWCHN,PRFLINK-IEDQPRF(RPARM) DELINK ELEMENT  @YM08486
         LM    RZERO,RBRNCH,OPCSAVE     RESTORE CALLER'S REGS  @Y17XAWC
         BR    RRET                     RETURN TO CALLER       @Y17XAWC
         DS    0H                                              @Y17XAWC
         TITLE 'IEDQCA - LCB/SCB INITIALIZATION'
***********************************************************************
*                                                                     *
*        THIS ROUTINE SETS UP ALL FIELDS IN THE LCB/SCB NECESSARY     *
*        TO GET THE OPERATOR CONTROL OUTPUT MESSAGE ON THE CORRECT    *
*        OUTPUT QUEUE.  INPUT IS AS FOLLOWS:                          *
*                   REGISTER 2 - POINTER TO OP CONTROL AVT            *
*                   REGISTER 3 - POINTER TO THE CURRENT OPCE(BUFFER)  *
*                   REGISTER 4 - POINTER TO THE TCAM AVT              *
*                   REGISTER 14 - CONTAINS RETURN ADDRESS             *
*                   REGISTER 15 - CONTAINS ROUTINE ENTRY POINT ADDRESS*
*                                                                     *
***********************************************************************
         DROP  RPARM
         USING LCBSETUP,RBRNCH
         USING IEDQTRM,RTERM                                   @YM05671
LCBSETUP EQU   *
         L     RWORK,AVTMSGS-OFF01 PICK UP VCON POINTER
         MVC   OCLINK+OFF01(AL3),OFF01(RWORK) PLACE BD QCB ADDR IN BUFF
         MVI   OCELEM,PRIDESTQ          SET PRIORITY
         ST    ROPCE,OLCBBUFF      SET LCB BUFFER POINTER
         MVI   OSCBPRI,OUTPRI      RESET OUTPUT PRIORITY
         MVI   OLCBERB,ERBSTATE    RESET ERB BITS
         LH    RWORK,OCDEST             GET DESTINATION OFFSET
FINDTRM  EQU   *
         N     RWORK,AVTCLRHI           CLEAR HIGH BYTES
         STH   RWORK,PRFDEST-IEDQPRF(ROPCE) SET DESTINATION OFFSET
         L     RTNT,AVTRNMPT            GET TERM NAME TABLE ADDRESS
         LA    RPARM,TNTFIRST           GET FIRST ENTRY ADDRESS
         SR    RWORK1,RWORK1            CLEAR FOR ENTRY LENGTH
         STH   RWORK1,PRFISEQ-IEDQPRF(ROPCE) CLEAR SEQ FIELD    SA62344
         IC    RWORK1,TNTENLEN          GET NAME LENGTH
         AR    RPARM,RWORK1             ADD LENGTH TO FIRST TO GET ADDR
         LA    RWORK1,THREE(RWORK1)     ALLOW FOR ADDRESS FIELDS
         BCTR  RWORK,RZERO              DECREMENT OFFSET
         MR    RWORK,RWORK              CALCULATE OFFSET TO TNT ENTRY
         AR    RPARM,RWORK1             ADD OFFSET
         MVC   OLCBZ2+OFF01(AL3),OFF00(RPARM)   MOVE ADDR FOR LOAD
         L     RTERM,OLCBZ2        TERM ENTRY ADDRESS TO REG
         L     RWORK,TRMDESTQ-1    PICK UP DESTINATION QCB ADDR
         TM    OPCSPEC,ALTDEST     PROCESSING ALTDEST?
         BO    GETDEST             YES, THIS IS WHERE IT GOES
         SPACE
         TM    TRMSTATE,PROCESS    PROCESS ENTRY?
         BNO   GETDEST             NO, SEND MESSAGE TO DESTINATION
         SPACE
         OI    OPCSPEC,ALTDEST     INDICATE ALTERNATE DEST
         LH    RWORK,TRMALTD            PICK UP ALT DEST TNT OFFSET
         CH    RWORK,AVTFZERO           ALTDEST SPECIFIED?
         BE    FINDTRM1                 NO, CHECK DLQ          @SA69063
         N     RWORK,AVTCLRHI           CLEAR TOP HALF         @SA69063
         STH   RWORK,PRFSRCE-IEDQPRF(,ROPCE)  SET SOURCE       @SA69063
         B     FINDTRM                                         @SA69063
FINDTRM1 EQU   *                                               @SA69063
         SPACE
         LH    RWORK,AVTDLQX            GET DLQ OFFSET
         CH    RWORK,AVTFZERO           DLQ SPECIFIED?
         BNE   FINDTRM             YES, IT WILL BE DESTINATION
         SPACE
         LA    RWORK,AVTBFRTB      GET BUFFER RETURN ADDRESS
GETDEST  EQU   *
         LA    RWORK,ZERO(RWORK)   CLEAR HIGH BYTE
         NI    OPCSPEC,ALL-ALTDEST CLEAR ALTDEST FLAG
         ST    RWORK,OSCBQCB       STORE QCB ADDRESS IN SCB
         LA    RPARM,OLCBQCBA           POINT TO LCB
         MVI   LCBSTAT1-IEDQLCB(RPARM),LCBRECVN SET SEND
         IC    RWORK,PRFNBUNT-IEDQPRF(ROPCE) SAVE NUMBER OF UNITS
         ST    RPARM,PRFLCB-IEDQPRF-1(ROPCE) PLACE LCB ADDRESS IN BUFF
         STC   RWORK,PRFNBUNT-IEDQPRF(ROPCE) RESTORE UNIT COUNT
         LR    RPARM,ROPCE              PT TO BUFFER ADDRESS   @OZ09915
         BALR  RRET,RRET           GO TO RETURN ADDRESS        @Y17XARX
CHECKCIB EQU   *                                               @YA07487
         STM   RBASE,RBRNCH,SAVEOFF(RSAVE)  SAVE REGS          @YA07487
         USING CHECKCIB,RBRNCH          ADDRESSABILITY         @YA07487
         LR    RPARM,RCIB               PT TO CIB TO BE REMOVED@YA07487
         L     RCIB,AVTCOMPT            GET CSCB ADDR          @YA07487
         LA    RZERO,FOUR(RCIB)         PT TO HEAD OF QUEUE    @YA07487
**                                      REMOVE CIB FROM QUEUE  @YA07487
         QEDIT BLOCK=(1),ORIGIN=(0)     REMOVE CIB FROM QUEUE  @YA07487
         LM    RBASE,RBRNCH,SAVEOFF(RSAVE)  RESTORE REGS       @YA07487
         TM    AVTBIT1,AVTCLOSN         CLOSEDOWN NOW          @YA07487
         BO    ZERO(RRET)               YES NOT STOP TCAM      @YA07487
         CLI   OCOPTCDE,HEX40           STOP COMMAND           @YA07487
         BNE   OFF04(RRET)              NO , CONT PROCESSING   @YA07487
         LA    RZERO,FOUR(RCIB)         ORIGIN ADDR            @YA07487
         SR    RPARM,RPARM                                     @YA07487
         IC    RPARM,AVTCIB                                    @YA07487
         STM   RBASE,RBRNCH,SAVEOFF(RSAVE)  SAVE REGS          @YA07487
         QEDIT CIBCTR=(1),ORIGIN=(0)                           @YA07487
         LM    RBASE,RBRNCH,SAVEOFF(RSAVE)  RESTORE REGS       @YA07487
         LA    RZERO,MSG451                                    @YA07487
         MVC   OPCLDNME+AL3(AL2),STOPMSG                       @YA07487
         B     XCTLTOMH                 XCTL TO MSG MOD        @YA07487
         EJECT
***********************************************************************
*        THIS ROUTINE DETERMINES IF THE DCB USED IN IPLING A 3705     *
*        NEEDS TO BE OPENED. IF NO HE BRANCHES TO THE ROUTINE POINTED *
*        TO BY REGISTER 14. IF NOT OPEN HE ISSUES AN OPEN FOR IT      *
*        AND IF UNSUCCESSFUL LOADS AN ERROR MSG NUMBER AND XCTLS TO   *
*        IGC0310D TO WRITE OUT THE MESSAGE. IF SUCCESSFUL HE BRANCHES *
*        ON REGISTER 14. BACK TO IGCMD10D TO CONTINUE IPLING          *
***********************************************************************
         USING IHADCB,RWORK2            DCB ADDRESSABILITY       S22024
         USING OPENCODE,RBRNCH          ESTABLISH ADDRESSABILITY S22024
OPENCODE EQU   *                                                 S22024
         LR    RDCB,RBRNCH              SAVE BASE REGISTER       S22024
         TM    DCBOFLGS,OPENED          ALREADY OPENED ?         S22024
         BNO   NOTOPEN                  NO                       S22024
         CLOSE ((RWORK2))               CLOSE THE DCB            S22024
         LR    RBRNCH,RDCB              SET UP BASE              S22024
         L     RWORK2,DDOFF(RWORKA)     GET DCB ADDRESS          S22024
NOTOPEN  EQU   *                                                 S22024
         OPEN  ((RWORK2))               ISSUE AN OPEN SVC        S22024
         LR    RBRNCH,RDCB              RESTORE BASE REGISTER    S22024
         TM    DCBOFLGS,OPENED          OPEN SUCCESSFUL ?        S22024
         BNO   OPENFAIL                 NO                       S22024
         SR    RPARM,RPARM              CLEAR FOR IC           @YM08447
         IC    RPARM,OPCIPLCT           CURRENT IPL COUNT      @YM08447
         LA    RPARM,ONE(RPARM)         INCREMENT COUNT        @YM08447
         STC   RPARM,OPCIPLCT           NEW COUNT OF 3705'S    @YM08447
*                                       BEING IPLED            @YM08447
         LR    RPARM,RWORK2             INSERT DCB ADDR IN REG 1 S22024
         BR    RRET                     YES- RETURN TO IGCMD10D  S22024
OPENFAIL EQU   *                                                 S22024
         LA    RZERO,MSG166             ERROR MSG NUMBER         S22024
         MVC   OPCLDNME+THREE(AL2),XCTLMH  ID OF IGCMH10D        S22024
         L     R3,OPCCOPCE              GET CURRENT ELEMENT ADDRESS
         CLI   FOUR(R3),AUTOIPL         IS THIS AN AUTO IPL REQUEST
         BE    XCTLTOMH                 YES, SKIP PRIORITY RESET
         MVI   FOUR(R3),CLNUPPRI        RESET PRIORITY FOR MH
XCTLTOMH EQU   *
R3       EQU   3                        REG USED BY XCTL CODE
AUTOIPL  EQU   X'DF'                    AUTO IPL ELEMENT PRIORITY
CLNUPPRI EQU   X'88'                    CLEANUP PRIORITY FOR MH
         LR    RPARM,ROPCAVT            SET UP PARAMETER REG     S22024
         XCTL  SF=(E,OPCXCTL)           XCTL TO IGC0310D         S22024
         SPACE 3
XCTLMH   DC    C'MH'                    ID OF COMMON LOAD OF IPL S22024
*                                       AND DUMP FOR THE 3705    S22024
STOPMSG  DC    C'0G'                    MSG MODULE ID          @YA04391
MAXRLN   DC    H'255'                                          @OY12425
MAX      DC    H'8'                                            @OY12425
SAVEAREA DC    F'0'                                            @OY12425
USERBASE DC    F'0'                                            @YM05671
RLNONE   DC    H'1'                                            @OY12425
FIVE     DC    H'5'                                            @OY12425
SIXX     DC    H'6'                                            @OY12425
MAXTEN   DC    H'10'                                           @OY12425
STOPALL  DC    C'ALL'                                          @OY12425
PACKRLN  PACK  OCMODNME+SIX(TWO),OCMODNME(AVTEZERO) PACK NO.   @OY12425
MOVENAME MVC   OPCDOUBL(ZERO),ZERO(RSTART)    SAVE FIELD       @OY12425
MVRLN    MVC   OCMODNME(ZERO),AVTEZERO(RSTART) PREPARE RLN FOR @OY12425
*                                           CONVERT TO BINARY  @OY12425
         TITLE 'IEDQCA - TNT LOOK-UP ROUTINE'                  @Y17XARX
***************************************************************@Y17XARX
*                                                              @Y17XARX
* THIS CODE IS REENTRANT.                                      @Y17XARX
*                                                              @Y17XARX
* GIVEN A TTCIN IN REGISTER 1, THIS ROUTINE CALCULATES THE     @Y17XARX
* ENTRY ADDRESS INTO THE TNT.  THIS ADDRESS IS RETURNED IN     @Y17XARX
* REGISTER 1.  PRIMARY USE OF THIS SUBROUTINE IS FOR THOSE     @Y17XARX
* MODULES THAT NEED ACCESS TO THIS NAME PORTION OF A TNT ENTRY.@Y17XARX
*    ON INPUT - REGISTER  1 = TTCIN                            @Y17XARX
*               REGISTER  2 = OPCTL AVT                        @Y17XARX
*               REGISTER 13 = REGISTER SAVE AREA PTR           @Y17XARX
*               REGISTER 14 = RETURN ADDRESS                   @Y17XARX
*               REGISTER 15 = ENTRY ADDRESS TO SUBROUTINE      @Y17XARX
*    ON OUTPUT- REGISTER  1 = PTR TO TNT ENTRY NAME            @Y17XARX
*                                                              @Y17XARX
***************************************************************@Y17XARX
*                                                              @Y17XARX
         DROP  RTNT                                            @Y17XARX
         USING TNTENTAD,RBRNCH          BASE FOR THIS CODE     @Y17XARX
TNTENTAD DS    0H                                              @Y17XARX
         STM   ROPCE,RTERM,AVTEZERO(RSAVE)  SAVE REGS 3-6      @Y17XARX
         USING IEDQTNTD,RPARM           SETUP ADDR TNT TABLE   @Y17XARX
         L     RAVT,OPCAVTPT            ESTAB ADDR AVT         @Y17XARX
         LR    RWORKA,RPARM             LOAD TTCIN IN WORK REG @Y17XARX
         N     RWORKA,AVTCLRHI          CLEAR LEFT HALF OF REG @Y17XARX
         BCTR  RWORKA,ZERO              USE ORIGIN 1 ARITHMETIC@Y17XARX
         L     RPARM,AVTRNMPT           LOAD ADDR TNT BASE REG @Y17XARX
         SR    RAVT,RAVT                CLEAR REGISTER         @Y17XARX
         IC    RAVT,TNTENLEN            PUT ENTRY IN REG 4     @Y17XARX
         LA    RAVT,THREE(RAVT)         INCLUDE LENGTH OF ADDR @Y17XARX
         MR    RAVT,RAVT                TOT ENTRY LEN (REG 4)  @Y17XARX
*                                       TIMES TTCIN (REG 5)    @Y17XARX
         LA    RPARM,TNTFIRST(RWORKA)   COMPUTE TNT ENTRY      @Y17XARX
         LM    ROPCE,RTERM,AVTEZERO(RSAVE)  RESTORE REGS 3-6   @Y17XARX
         BR    RRET                                            @Y17XARX
         DROP  RPARM                     DROP TNT BASE         @YM08404
         TITLE 'IEDQCA - COHORTG LOOK-UP ROUTINE'              @Y17XARX
***************************************************************@Y17XARX
* THIS CODE IS REENTRANT.                                      @Y17XARX
*                                                              @Y17XARX
* ROUTINE CALLED = AVTRNMPT(ADDRESS TERMNAME TABLE)            @Y17XARX
*                                                              @Y17XARX
* ENTRY TO THIS CODE IS VIA A 'BALR' FROM VARIOUS SVC          @Y17XARX
* TRANSIENT MODULES.  THIS ROUTINE FOLLOWS COHORTG POINTERS    @Y17XARX
* UNTIL IT FINDS A GROUP TTE.                                  @Y17XARX
*    ON INPUT - REGISTER  1 = LINE TTE PTR                     @Y17XARX
*               REGISTER  2 = OPCTL AVT PTR                    @Y17XARX
*               REGISTER 13 = REGISTER SAVE AREA PTR           @Y17XARX
*               REGISTER 14 = RETURN ADDRESS                   @Y17XARX
*               REGISTER 15 = ENTRY ADDRESS TO SUBROUTINES     @Y17XARX
*    ON OUTPUT- REGISTER  0 = TTCIN OF GROUP                   @Y17XARX
*               REGISTER  1 = TTE PTR FOR THE GROUP            @Y17XARX
* RETURN IS ALWAYS ON REGISTER 14.                             @Y17XARX
*                                                              @Y17XARX
***************************************************************@Y17XARX
*                                                              @Y17XARX
         DROP  RTERM                                           @Y17XARX
         USING CHORTGLK,RBASE           BASE FOR THIS CODE     @Y17XARX
         USING IEDNTRM,RTTEBASE         BASE FOR TTE PASSED    @Y17XARX
CHORTGLK DS    0H                                              @Y17XARX
         STM   RAVT,RBRNCH,AVTEZERO(RSAVE) SAVE REGS 4-15      @Y17XARX
         LR    RBASE,RBRNCH             ESTAB ADDR THIS RTN    @Y17XARX
         LR    RWORK,RPARM              SAVE INPUT             @YM08163
         LR    RTTEBASE,RPARM           SAVE PARM REG          @Y17XARX
         LA    RWORKA,TRMPRFSZ          GET ABSOLUTE LENGTH    @Y17XARX
         SR    RTTEBASE,RWORKA          BACKUP TO NEG PART TTE @Y17XARX
TTEGLOOP EQU   *                                               @Y17XARX
         SR    RPARM,RPARM              CLEAR REGISTER         @Y17XARX
         ICM   RPARM,CHTGMASK,TRMCOHTG  LOAD COHORTG PTR       @Y17XARX
         LR    RWORK2,RPARM             SAVE ORIG TTCIN PARM   @Y17XARX
         L     RAVT,OPCAVTPT            LOAD ADDR AVT          @Y17XARX
         L     RBRANCH,AVTRNMPT         LOAD ADDR TNT ROUTINE  @Y17XARX
         BNZ   GO                       TTCIN IS OK            @YM08163
         TM    TRMSTATE,TRMLINE         IS IT A LINE ENTRY ?   @YM08163
         BO    BADTTE                   BAD IF LINE            @YM08163
         TM    TRMBYTE0,TRMDIAL         IS IT DIAL ?           @YM08163
         BNO   BADTTE                   BAD IF NOT DIAL        @YM08163
         L     RWORK1,TRMDESTQ-1        GET QCB ADDR           @YM08480
         LH    RWORK2,TNTLEN-IEDQTNTD(,RBRANCH) HIGHEST TTCIN  @YM08404
MORE     EQU   *
         LR    RPARM,RWORK2             SET TTCIN IN REG1      @YM08163
         BALR  RRET,RBRANCH             GET TTE                @YM08163
         TM    TRMSTATE-IEDQTRM(RPARM),TRMLINE  LINE ?         @YM08480
         BNO   BCT1                     NO TRY ANOTHER         @YM08163
         L     RPARM,TRMDESTQ-1-IEDQTRM(RPARM) GET QCB ADDR    @YM08163
         CLC   QCBRELLN-IEDQQCB(AL4,RPARM),QCBRELLN-IEDQQCB(RWORK1)
*                                       LGB AND RLN MATCH?     @YM08480
         BNE   BCT1                     TRY TRY AGAIN          @YM08163
         LA    RWORKA,TRMPRFSZ          PREFIX SIZE            @YM08163
         LR    RTTEBASE,RZERO           TTE ADDRESS            @YM08163
         SR    RTTEBASE,RWORKA          SET TO PREFIX          @YM08163
         B     TTEGLOOP                 FIND THE GROUP         @YM08163
BCT1     BCT   RWORK2,MORE              TRY NEXT ONE           @YM08163
BADTTE   LR    RPARM,RWORK              SET TO ORIGINAL        @YM08163
         B     BADTTE1                  GET OUT                @YM08163
GO       EQU   *                                               @YM08163
         BALR  RRET,RBRANCH             GO TO TNT SEARCH RTN   @Y17XARX
         LR    RTTEBASE,RPARM           ESTABLISH NEW BASE TTE @Y17XARX
         LA    RWORKA,TRMPRFSZ          GET ABSOLUTE LENGTH    @Y17XARX
         SR    RTTEBASE,RWORKA          BACKUP TO NEG PART TTE @Y17XARX
         CLI   TRMTYPE,TRMGRP           TEST IF GROUP ENTRY    @Y17XARX
         BNE   TTEGLOOP                 GO LOOP UNTIL FIND     @Y17XARX
BADTTE1  EQU   *                                               @YM08163
         LR    RZERO,RWORK2             RELOAD GRP TTCIN PARM  @Y17XARX
         LM    RAVT,RBRNCH,AVTEZERO(RSAVE) RESTORE REGS 4-15   @Y17XARX
         BR    RRET                     RETURN TO CALLER RTN   @Y17XARX
         TITLE 'IEDQCA - COHORT LOOK-UP ROUTINE'               @Y17XARX
***************************************************************@Y17XARX
*                                                              @Y17XARX
* THIS CODE IS REENTRANT.                                      @Y17XARX
*                                                              @Y17XARX
* EXTERNAL CALL = AVTRNMPT(ADDRESS TERMNAME TABLE)             @Y17XARX
*                                                              @Y17XARX
* ENTRY TO THIS CODE IS VIA A 'BALR' FROM VARIOUS SVC          @Y17XARX
* TRANSIENT MODULES.  THIS ROUTINE FOLLOWS COHORT POINTERS     @Y17XARX
* UNTIL A DIFFERENT TYPE IS FOUND.                             @Y17XARX
*    ON INPUT - REGISTER  1 = TTE TO BE SEARCHED               @Y17XARX
*               REGISTER  2 = OPCTL AVT                        @Y17XARX
*               REGISTER 13 = REGISTER SAVE AREA               @Y17XARX
*               REGISTER 14 = RETURN ADDRESS                   @Y17XARX
*               REGISTER 15 = ENTRY ADDRESS TO SUBROUTINE      @Y17XARX
*    ON OUTPUT- REGISTER  0 = TTCIN OF NEXT HIGHER RESOURCE OF @Y17XARX
*                             HIERARCHY                        @Y17XARX
*               REGISTER  0 = 0  THIS IS ERROR CONDITION       @Y17XARX
*               REGISTER  1 = TTE PTR OF NEXT HIGHER RESOURCE  @Y17XARX
*                             FROM HIERARCHY                   @Y17XARX
* RETURN IS ALWAYS ON REGISTER 14.                             @Y17XARX
*                                                              @Y17XARX
***************************************************************@Y17XARX
         USING COHORTLK,RBASE           BASE FOR THIS CODE     @Y17XARX
         USING IEDNTRM,RTTEBASE         BASE FOR TTE PASSED    @Y17XARX
COHORTLK DS    0H                                              @Y17XARX
         STM   RAVT,RBRNCH,AVTEZERO(RSAVE)   SAVE REGS 4-15    @Y17XARX
         LR    RBASE,RBRNCH             ESTAB ADDR OF RTN      @Y17XARX
         LR    RTTEBASE,RPARM           GET ADDRESS TERM ENTRY @Y17XARX
         LA    RWORKA,TRMPRFSZ          GET ABSOLUTE TTE LENGTH@Y17XARX
         SR    RTTEBASE,RWORKA          BACKUP TO NEG PART TTE @Y17XARX
         TM    TRMSTATE,TRMPREF         NEGATIVE PREFIX TEXT   @Y17XARX
         BO    LOOKTTE1                 YES,LOOKUP TTE TYPE    @Y17XARX
GOOUT    SR    RZERO,RZERO              SET PARM REG 0 TO 0    @Y17XARX
         B     EEXITCDE                 GO EXIT TO CALLER      @Y17XARX
LOOKTTE1 EQU   *                                               @Y17XARX
         LA    REGTABLT,TABLETTE        SET TABLE ADDRESS      @Y17XARX
LOOKTTEA EQU   *                                               @Y17XARX
         CLI   ZERO(REGTABLT),ZERO      IS IT END OF TABLE     @Y17XARX
         BE    GOOUT                    YES, GO OUT            @Y17XARX
         CLC   ZERO(AL1,REGTABLT),TRMTYPE COMPARE TTE TYPE     @Y17XARX
         BE    LOOKTTE2                 EQUAL,GO CHK 2ND BYTE  @Y17XARX
         LA    REGTABLT,TABSIZE(REGTABLT) BUMP REG BY THREE    @Y17XARX
         B     LOOKTTEA                 LOOP AGAIN             @Y17XARX
LOOKTTE2 EQU   *                                               @Y17XARX
         L     RAVT,OPCAVTPT            LOAD ADDR OF TCAM AVT  @Y17XARX
         CLI   TRMTYPE,TRMPSNA          CHK IF PRESNA TERM     @Y17XARX
         BNE   TTELOOP                  NO,GO TEST COHORT PTR  @Y17XARX
         TM    TRMBYTE0,TRMGP           CHK FOR GEN POLL       @Y17XARX
         BZ    TTELOOP                  NO,CHECK COHORT PTR    @Y17XARX
         LA    REGTABLT,TABSIZE(REGTABLT)  BUMP REG BY THREE   @Y17XARX
TTELOOP  EQU   *                                               @Y17XARX
         SR    RCOHRTPT,RCOHRTPT        CLEAR REGISTER         @Y17XARX
         ICM   RCOHRTPT,COHTMASK,TRMCOHRT    COHORT PTR IN REG @Y17XARX
         BNZ   OK                       COHORT IS THERE        @YM08163
         TM    TRMBYTE0,TRMDIAL         IS IT DIAL ?           @YM08163
         BZ    GOOUT                    ERROR NOT DIAL         @YM08163
         TM    TRMSTATE,TRMLINE         IS IT LINE ENTRY       @OY20955
         BO    GOOUT                    YES,ERROR              @OY20955
         L     RWORK1,TRMDESTQ-1        GET QCB ADDRESS        @YM08480
         L     RBRANCH,AVTRNMPT         GET TNT                @YM08163
         LH    RWORK2,TNTLEN-IEDQTNTD(,RBRANCH) HIGHEST TTCIN  @YM08404
AGAIN    EQU   *
         LR    RPARM,RWORK2             GET TTCIN              @YM08163
         BALR  RRET,RBRANCH             GET TERM ENTRY         @YM08163
         TM    TRMSTATE-IEDQTRM(RPARM),TRMLINE  LINE ?         @YM08163
         BNO   BCT                      NO                     @YM08163
         L     RPARM,TRMDESTQ-1-IEDQTRM(RPARM) GET THE QCB ADDR@YM08480
         CLC   QCBRELLN-IEDQQCB(AL4,RPARM),QCBRELLN-IEDQQCB(RWORK1)
*                                       LGB AND RLN MATCH?     @YM08480
         BNE   BCT                      NO                     @YM08163
         LR    RPARM,RZERO              COPY TTE ADDRESS       @YM08480
         B     GOTIT                    HAVE RIGHT ENTRY       @YM08163
BCT      BCT   RWORK2,AGAIN             TRY AGAIN              @YM08163
         B     GOOUT                    NEVER FOUND IT         @YM08163
OK       EQU   *
         LR    RPARM,RCOHRTPT           PUT COHORT PTR IN REG 1@Y17XARX
         L     RBRANCH,AVTRNMPT         LOAD ADDRESS TNT RTN   @Y17XARX
         BALR  RRET,RBRANCH             GO TO TNT SUB RTN      @Y17XARX
GOTIT    EQU   *
         LR    RTTEBASE,RPARM           RELOAD TTE BASE        @Y17XARX
         LA    RRET,TRMPRFSZ            GET ABSOLUTE LENGTH    @Y17XARX
         SR    RTTEBASE,RRET            BACKUP TO NEG PART TTE @Y17XARX
         TM    TRMSTATE,TRMPREF         NEGATIVE PREFIX CHECK  @Y17XARX
         BZ    GOOUT                    YES, PREPARE TO EXIT   @Y17XARX
         CLC   TRMTYPE,AL1(REGTABLT)    DOES TABLE MATCH COL2  @Y17XARX
         BE    PASSPARM                 YES, PREPARE TO EXIT   @Y17XARX
         CLC   TRMTYPE,AL2(REGTABLT)    DOES TABLE MATCH COL3  @Y17XARX
         BNE   TTELOOP                  NO, GO TTELOOP AGAIN   @Y17XARX
PASSPARM EQU   *                                               @Y17XARX
         LR    RZERO,RCOHRTPT           LOAD COHORT PTR IN PARM@Y17XARX
EEXITCDE EQU   *                                               @Y17XARX
         LM    RAVT,RBRNCH,AVTEZERO(RSAVE) RESTORE REGS 4-15   @Y17XARX
         BR    RRET                     GO BACK TO CALLER      @Y17XARX
TABLETTE EQU   *                        TABLE OF POSSIBLE TTE'S@Y17XARX
*                                  TTE TYPE    TYPE TO BE FOUND@Y17XARX
         DC    X'18',X'21',X'00'   PUNT        SDLC            @Y17XARX
         DC    X'20',X'0F',X'00'   NSDLC       NCP             @Y17XARX
         DC    X'21',X'0F',X'00'   SDLC        NCP             @Y17XARX
         DC    X'30',X'18',X'00'   LUNT        PUNT            @Y17XARX
         DC    X'40',X'20',X'00'   PRESNACLUST NSDLC           @Y17XARX
         DC    X'48',X'20',X'21'   CTERM       NSDLC(SDLC)     @Y17XARX
         DC    X'4F',X'20',X'00'   PRESNATERM  NSDLC           @Y17XARX
         DC    X'4F',X'40',X'00'   PRESNATERM  PRESNACLUST     @Y17XARX
         DC    X'00',X'00',X'00'   GRP         0   (TABLE END) @Y17XARX
         EJECT                                                 @Y17XARV
         TITLE ' IEDQCA - A/D IN-PROGRESS '                    @Y17XARV
***************************************************************@Y17XARV
*                                                              @Y17XARV
*        ENTRY TO THIS CODE IS VIA A 'BALR' FROM VARIOUS       @Y17XARV
*        TRANSIENT MODULES.  THE ENTRY ADDRESS IS CONTAINED    @Y17XARV
*        IN THE OP CNTL AVT AT OPCPGCK. THIS SUBROUTINE        @Y17XARV
*        PERFORMS ONE OF THE FOLLOWING FUNCTIONS:              @Y17XARV
*              1 - IF REG0=0, THE HIERARCHY POINTERS ARE       @Y17XARV
*                  FOLLOWED AND IN-PROG IS TURNED OFF IN       @Y17XARV
*                  ALL TTE'S WHICH ARE NOT BSC-SS LINES OR     @Y17XARV
*                  TERMINALS.                                  @Y17XARV
*                                                              @Y17XARV
*              2 - IF REG0^=0, IN-PROG FOR THE RESOURCE        @Y17XARV
*                  NAMED IN THE OPCE IS CHECKED.  IF ON,       @Y17XARV
*                  THE HIERARCHY PTRS ARE FOLLOWED UP THE      @Y17XARV
*                  HIERARCY TO LOCATE THE OPCE ON THE          @Y17XARV
*                  THE A/D WAIT CHAIN WHICH IS CURRENTLY       @Y17XARV
*                  OPERATING ON THE RESOURCE, AND THE          @Y17XARV
*                  NEW OPCE IS 'ATTACHED' TO THE CURRENT       @Y17XARV
*                  OPCE FOR SUBSEQUENT OPERATION.  IF          @Y17XARV
*                  IN-PROG NOT ON FOR THE RESOURCE, THE        @Y17XARV
*                  HIERARCHY POINTERS ARE FOLLOWED TO          @Y17XARV
*                  DETERMINE IF THIS ACTION WOULD AFFECT       @Y17XARV
*                  THE COMMAND ORIGINATOR (OCDEST).  IF IT     @Y17XARV
*                  WOULD, AND THE COMMAND IS NOT FOR           @Y17XARV
*                  THE 3705 ITSELF, THE REQUEST IS             @Y17XARV
*                  REJECTED.  NEXT, THE HIERARCHY POINTERS     @Y17XARV
*                  ARE FOLLOWED DOWNWARD TO DETERMINE IF       @Y17XARV
*                  IN-PROG IS ON FOR ANY SUBORDINATE           @Y17XARV
*                  RESOURCE.  IF IT IS, THE OPCE IS            @Y17XARV
*                  'ATTACHED' TO THE CURRENT OPCE OPERATING.   @Y17XARV
*                  IF NOT, THE IN-PROG BITS ARE SET FOR THE    @Y17XARV
*                  NAMED RESOURCE AND ALL RESOURCES            @Y17XARV
*                  SUBORDINATE TO IT THAT ARE NOT BSC-SS       @Y17XARV
*                  LINES OR TERMINALS.                         @Y17XARV
*                                                              @Y17XARV
*        THE INPUT TO THIS SUBROUTINE IS AS FOLLOWS:           @Y17XARV
*                                                              @Y17XARV
*        REG0: 0 OR ^=0 AS EXPLAINED ABOVE                     @Y17XARV
*        REG1: ADDRESS OF OPCE(OCTRMTBL=TTCIN OF RESOURCE)     @Y17XARV
*        REG2: PTR TO OP CNTL AVT                              @Y17XARV
*        REG4: PTR TO TCAM AVT                                 @Y17XARV
*        REG13:PTR TO OPCNTL SAVE AREA                         @Y17XARV
*        REG14:CONTAINS RETURN ADDRESS                         @Y17XARV
*        REG15:CONTAINS ROUTINE ENTRY POINT ADDRESS            @Y17XARV
*                                                              @Y17XARV
*        ON RETURN, THE OUTPUT IS:                             @Y17XARV
*                                                              @Y17XARV
*        REG0: 0 = IN-PROG BITS TURNED OFF                     @Y17XARV
*              1 = 'NOT ATTACHED'. CONTINUE PROCESS            @Y17XARV
*              2 = 'ATTACHED'.  SUSPEND PROCESS                @Y17XARV
*              3 = 'REJECTED'.  AFFECTS PRIMARY OPERATOR       @Y17XARV
*                  CONTROL TERMINAL.                           @Y17XARV
*                                                              @Y17XARV
*                                                              @Y17XARV
****************************************************************
         SPACE 3                                               @Y17XARV
***      REGISTER CONVENTIONS                                  @Y17XARV
*                                                              @Y17XARV
*        0     RZERO -  INTER-ROUTINE COMMUNICATION            @Y17XARV
*        1     RCURTTE - TTE ADDR. OF CURRENT RESOURCE         @Y17XARV
*              RPARM - INTER-ROUTINE COMMUNICATION             @Y17XARV
*        3     RTOPOFF - HIGHEST RESOURCE WITH IN-PROG ON      @Y17XARV
*        6     RORGTTE - TTE ADDR. OF RESOURCE IN OCTRMTBL     @Y17XARV
*        7     RORGOFF - TTCIN OF RESOURCE (EQUALS OCTRMTBL)   @Y17XARV
*        8     RCUROFF - CURRENT TTCIN                         @Y17XARV
*              RWORK - WORK REG.                               @Y17XARV
*        9     RLASTYPE  - HOLD TYPE  OF PREVIOUS RESOURCE     @Y17XARV
*              RWAITCHN - POINTER TO OPCE'S IN A/D WAIT CHAIN  @Y17XARV
*              RWORK1 - WORK REG.                              @Y17XARV
*        10    ROPCEOFF - HOLDS OCTRMTBL                       @Y17XARV
*              RCURTYPE - TYPE OF CURRENT RESOURCE LOOKED AT   @Y17XARV
*              RWORK2 - WORK REG.                              @Y17XARV
*        11    RWORK3 - WORK REG.                              @Y17XARV
*              RHRCHY - HOLDS HIERARCHY POINTER                @Y17XARV
         SPACE 3                                               @Y17XARV
         DROP  ROPCE,RTTEBASE                                  @Y17XARV
         USING IEDNTRM,RCURTTE                                 @Y17XARV
PROGRTNE DS    0H                                              @Y17XARV
         STM   14,12,0(RSAVE)      SAVE REGS                   @Y17XARV
         BALR  RBASE,RZERO         SET UP SUBROUTINE           @Y17XARV
         USING *,RBASE               BASE REGISTER             @Y17XARV
         SPACE 1                                               @Y17XARV
         LA    RPARM,0(RPARM)      CLEAR HI ORDER BYTE         @Y17XARV
         ST    RPARM,ORGOPCEA      STORE ADDR OF OPCE          @Y17XARV
         LTR   RZERO,RZERO         CHECK FUNCTION PARAMETER    @Y17XARV
         BZ    FUNC1               0 - PERFORM FUNCTION 1      @Y17XARV
         BAL   RRET,TONRTN         PERFORM FUNCTION 2          @Y17XARV
         B     PROGRTN             RETURN                      @Y17XARV
         SPACE 2                                               @Y17XARV
*        THIS CODE PERFORMS FUNCTION 1 AS DEFINED IN           @Y17XARV
*        INTRODUCTORY COMMENTS                                 @Y17XARV
         SPACE 1                                               @Y17XARV
FUNC1    EQU   *                                               @Y17XARV
         LH    RORGOFF,OCTRMTBL-IEDQOPCE(RPARM) LOAD TTCIN     @Y17XARV
         N     RORGOFF,AVTCLRHI      OF RESOURCE AFFECTED      @Y17XARV
         LR    RPARM,RORGOFF       COPY TTCIN                  @Y17XARV
         L     RBRNCH,AVTRNMPT     LOAD ADDR. OF TTCIN - TTE   @Y17XARV
*                                    CONVERSION ROUTINE        @Y17XARV
         BALR  RRET,RBRNCH         CONVERT                     @Y17XARV
         S     RCURTTE,NEGTTEL     POINT TO START OF NEG TTE   @Y17XARV
         LR    RORGTTE,RCURTTE     COPY TTE ADDRESS            @Y17XARV
         SR    RZERO,RZERO         CLEAR PARAMETER FOR CASCADE @Y17XARV
         BAL   RRET,CASCADE        TURN OFF IN-PROG BITS       @Y17XARV
         BAL   RRET,CHNRMV         REMOVE OPCE FROM WAIT CHAIN @Y17XARV
         SPACE 3                                               @Y17XARV
PROGRTN  EQU   *                                               @Y17XARV
         LM    14,15,0(RSAVE)     RESTORE REGS 14,15           @Y17XARV
         LM    1,12,12(RSAVE)     RESTORE REGS 1 THRU 12       @Y17XARV
         BR    RRET                RETURN                      @Y17XARV
         EJECT                                                 @Y17XARV
*********                                                      @Y17XARV
**       THIS SECTION OF CODE PERFORMS FUNCTION 2 AS           @Y17XARV
**       DESCRIBED IN INTRODUCTION                             @Y17XARV
*********                                                      @Y17XARV
         SPACE 1                                               @Y17XARV
TONRTN   EQU   *                                               @Y17XARV
         ST    RRET,TONSAVE        SAVE RETURN ADDR.           @Y17XARV
         LH    RORGOFF,OCTRMTBL-IEDQOPCE(RPARM) SET ORIG. TTCIN@Y17XARV
         N     RORGOFF,AVTCLRHI      TO OCTRMTBL               @Y17XARV
         LR    RPARM,RORGOFF       COPY TTCIN                  @Y17XARV
         L     RBRNCH,AVTRNMPT     ADDR OF TTCIN TO TTE ADDR.  @Y17XARV
*                                                              @Y17XARV
         BALR  RRET,RBRNCH         CONVERT                     @Y17XARV
         S     RCURTTE,NEGTTEL     POINT TO START OF NEG. TTE  @Y17XARV
         LR    RORGTTE,RCURTTE     SET ORIGINAL TTE            @Y17XARV
         LR    RCUROFF,RORGOFF     SET CURRENT TTCIN           @Y17XARV
         TM    TRMBYTE2,TRMINPG    IS IN-PROG ON               @Y17XARV
         BNO   NOINPROG            NO - BRANCH                 @Y17XARV
         SPACE 2                                               @Y17XARV
*        IN-PROG ON.  SCAN HIERARCHY POINTERS UPWARD TO FIND   @Y17XARV
*        HIGHEST RESOURCE TTE WITH IN-PROG ON                  @Y17XARV
         SPACE 1                                               @Y17XARV
SETTOP   EQU   *                                               @Y17XARV
         LR    RTOPOFF,RCUROFF     SET TOP TTCIN TO ORIG.      @Y17XARV
         ST    RSAVE,SAVE13        SAVE SAVE AREA ADDR.        @YM04632
         LA    RSAVE,PROGSAVE      POINT TO NEW SAVE AREA      @YM04632
         A     RCURTTE,NEGTTEL     RESET TTE BASE              @YM04632
         L     RBRNCH,OPCHORT      LD COHORTLK RTNE ADDR       @YM04632
         BALR  RRET,RBRNCH         OBTAIN NEXT HIGHEST RSC.    @YM04632
         L     RSAVE,SAVE13        RESTORE SAVE AREA ADDR.     @YM04632
         LR    RCUROFF,RZERO       COPY TTCIN OF NEXT HIGHEST  @YM04632
*                                    RESOURCE                  @YM04632
         LTR   RZERO,RZERO         Q-IS TOP RSC NCP            @YM04632
         BZ    CHAIN               Y-GO PLACE ON WAIT CHAIN    @YM04632
         S     RCURTTE,NEGTTEL     POINT TO NEG. PREFIX        @YM04632
         TM    TRMBYTE2,TRMINPG    Q-IS IN-PROG BIT ON         @YM04632
         BNO   CHAIN               N-PLACE OPCE ON WAIT CHAIN  @YM04632
         B     SETTOP              Y-GO FIND NEXT HIGHER RSC.  @YM04632
**                                                             @Y17XARV
**       IN-PROG NOT ON                                        @Y17XARV
**                                                             @Y17XARV
NOINPROG EQU   *                                               @Y17XARV
         SR    RWORK2,RWORK2       CLEAR                       @Y17XARV
         SH    RWORK2,TRMCOHRT     IS COHORT 0                 @Y17XARV
         BNZ   CHKOPCTL            NO - BRANCH                 @Y17XARV
         SH    RWORK2,TRMSUBST     IS SUBSTRUCT 0              @Y17XARV
         BNZ   CHKOPCTL            NO - BRANCH                 @Y17XARV
         BAL   RRET,CHNADD         PLACE OPCE ON WAIT CHAIN    @Y17XARV
*                                                              @Y17XARV
*        SET IN-PROG BIT USING COMPARE AND SWAP                @Y17XARV
*                                                              @Y17XARV
         L     RWORK1,TRMBYTE2     IN-PROG BIT IN TRMBYTE2     @Y17XARV
RETRY1   LR    RWORK2,RWORK1       COPY                        @Y17XARV
         O     RWORK2,INPGON       SET IN-PROG BIT IN REG.     @Y17XARV
         CS    RWORK1,RWORK2,TRMBYTE2 SET BIT IF POSSIBLE      @Y17XARV
         BNE   RETRY1              TRY AGAIN IF NOT SET        @Y17XARV
*                                                              @Y17XARV
         LA    RZERO,ONE           RETURN CODE = CONTINUE      @Y17XARV
*                                    PROCESS                   @Y17XARV
         B     TONRETN             RETURN                      @Y17XARV
**       CHECK SUBORDINATE RESOURCES                           @Y17XARV
**       TO SEE IF THIS OPCE WOULD AFFECT THE PRIMARY          @Y17XARV
**       OP-CTL TERM.                                          @Y17XARV
CHKOPCTL EQU   *                                               @Y17XARV
         LA    RZERO,ONE           PARAMETER FOR OP CTL TERM CK@Y17XARV
         BAL   RRET,CASCADE        CASCADE AND PERFORM CHECK   @Y17XARV
*                                                              @Y17XARV
         LTR   RZERO,RZERO         DOES REG 0 = 0              @Y17XARV
         BNZ   TONRETN             NO - BRANCH                 @Y17XARV
         LR    RCURTTE,RORGTTE     CURRENT TTE = ORIGINAL      @Y17XARV
         LR    RCUROFF,RORGOFF     SET CURRENT TTCIN = ORIG.   @Y17XARV
         LA    RZERO,TWO           PARAMETER FOR IN-PROG CHK   @Y17XARV
         BAL   RRET,CASCADE        CHECK IF IN-PROG ON FOR     @Y17XARV
*                                    SUBORDINATE               @Y17XARV
         LTR   RZERO,RZERO         DOES SUBORDINATE HAVE       @Y17XARV
*                                     IN-PROG ON               @Y17XARV
         BZ    PROGON              NO - GO TURN ON IN-PROG BITS@Y17XARV
         LR    RTOPOFF,RZERO       SET TOP TTCIN FOR CHAINER   @Y17XARV
         B     CHAIN                                           @Y17XARV
*        CASCADE AND TURN ON ALL IN-PROG BITS                  @Y17XARV
*                                                              @Y17XARV
PROGON   EQU   *                                               @Y17XARV
         LR    RCURTTE,RORGTTE     SET CURRENT TTE = ORIGINAL  @Y17XARV
         LR    RCUROFF,RORGOFF     SET CURRENT TTCIN = ORIG.   @Y17XARV
         LA    RZERO,THREE         PARAMETER FOR TURN ON IN-   @Y17XARV
*                                    PROG                      @Y17XARV
         BAL   RRET,CASCADE        TURN ON ALL IN-PROG BITS    @Y17XARV
*                                                              @Y17XARV
         BAL   RRET,CHNADD         PUT OPCE ON A/D WAIT CHAIN  @Y17XARV
*                                                              @Y17XARV
         LA    RZERO,ONE           RETURN CODE = CONTINUE      @Y17XARV
*                                    PROCESS                   @Y17XARV
         B     TONRETN             RETURN                      @Y17XARV
         SPACE 2                                               @Y17XARV
*        THIS ROUTINE SCANS THE A/D WAIT CHAIN LOOKING FOR     @Y17XARV
*        THE OPCE CURRENTLY OPERATING ON THE RESOURCE          @Y17XARV
*        SPECIFIED AS THE TOP TTCIN.                           @Y17XARV
         SPACE 1                                               @Y17XARV
CHAIN    EQU   *                                               @Y17XARV
         L     RWAITCHN,OPCWAITA   A/D WAIT CHAIN ANCHOR       @Y17XARV
         USING IEDQOPCE,RWAITCHN                               @Y17XARV
         SR    ROPCEOFF,ROPCEOFF   CLEAR FOR HOLDING 2 BYTE    @Y17XARV
*                                    TTCIN                     @Y17XARV
         B     CKOPCE              EXAMINE 1ST OPCE ON CHAIN   @Y17XARV
WAITSCAN EQU   *                                               @Y17XARV
         L     RWAITCHN,OCLINK     POINT TO NEXT OPCE ON CHAIN @Y17XARV
CKOPCE   ICM   ROPCEOFF,LLH,OCTRMTBL LOAD TTCIN                @Y17XARV
         CR    ROPCEOFF,RTOPOFF    OPCE TTCIN = TOP TTCIN      @Y17XARV
         BNE   WAITSCAN                                        @Y17XARV
         B     CHKELEM             CHECK THIS OPCE             @Y17XARV
NXTELEM  EQU   *                                               @Y17XARV
         L     RWAITCHN,OCELEM     POINT TO NEXT OPCE          @Y17XARV
CHKELEM  EQU   *                                               @Y17XARV
         TM    OCFLAG,OCATTACH     IS THERE AN ATTACHED ELEM.  @Y17XARV
         BO    NXTELEM             YES - POINT TO ATTACHED OPCE@Y17XARV
*                                                              @Y17XARV
*        ATTACH NEW OPCE                                       @Y17XARV
*                                                              @Y17XARV
         L     RPARM,ORGOPCEA      LOAD ADDR OF ORIGINAL OPCE  @Y17XARV
         STCM  RPARM,SEVEN,OCELEM+ONE STORE IN OLD OPCE        @OZ27694
*                                    NEW OPCE                  @Y17XARV
         OI    OCFLAG,OCATTACH     SET ELEMENT ATTACHED FOR    @Y17XARV
*                                    RESOURCES                 @Y17XARV
         DROP  RWAITCHN                                        @Y17XARV
*                                                              @Y17XARV
         LA    RZERO,TWO           SET RETURN CODE = SUSPEND   @Y17XARV
         SPACE 3                                               @Y17XARV
TONRETN  EQU   *                                               @Y17XARV
         L     RRET,TONSAVE        LOAD RETURN ADDR            @Y17XARV
         BR    RRET                RETURN                      @Y17XARV
         EJECT                                                 @Y17XARV
*********                                                      @Y17XARV
*        THIS  SECTION OF CODE PERFORMS THE CASCADING OF AN    @Y17XARV
*        ACTION THROUGH ALL RESOURCES IN THE TTE HIERARCHY     @Y17XARV
*        UNDER THE ORIGINAL TTE, THE ACTION IS SPECIFIED       @Y17XARV
*        BY THE CODE IN REG. 0                                 @Y17XARV
*********                                                      @Y17XARV
*                                                              @Y17XARV
*****    REGISTER USAGE (REGS SET)                             @Y17XARV
*                                                              @Y17XARV
*        0 - CONTAINS ACTION CODE ON ENTRY                     @Y17XARV
*        1 - RCURTTE (POINTS TO ORIGINAL TTE ENTRY)            @Y17XARV
*        8 - RCUROFF                                           @Y17XARV
*        9 - RLASTYPE                                          @Y17XARV
*        11 - RHRCHY                                           @Y17XARV
*                                                              @Y17XARV
*****                                                          @Y17XARV
         SPACE 2                                               @Y17XARV
CASCADE  EQU   *                                               @Y17XARV
*                                                              @Y17XARV
*        INITIALIZE                                            @Y17XARV
*                                                              @Y17XARV
         ST    RRET,CASSAVE        SAVE RETURN ADDR.           @Y17XARV
         STC   RZERO,ACTFLG        SET ACTION FLAG             @Y17XARV
         SLR   RLASTYPE,RLASTYPE   CLEAR REG.                  @Y17XARV
*                                                              @Y17XARV
CHKSUB   EQU   *                                               @Y17XARV
         LH    RHRCHY,TRMSUBST     LOAD                        @Y17XARV
         N     RHRCHY,AVTCLRHI       SUBSTRUCT                 @Y17XARV
         LTR   RHRCHY,RHRCHY       IS SUBSTRUCT POINTER 0      @Y17XARV
         BZ    PERFACT             YES - GO PERFORM ACTION     @Y17XARV
*                                                              @Y17XARV
         CLI   TRMTYPE,TRMCLUST    IS THIS A PRE-SNA CLUSTER   @Y17XARV
         BNE   GETSUBST            NO - GO GET SUBSTRUCT       @Y17XARV
         OI    FLAGS,CLUST         TURN ON CLUSTER FLAG        @Y17XARV
*                                                              @Y17XARV
*        USE SUBSTRUCT TO GET NEXT LOWER RESOURCE IN           @Y17XARV
*        HIERARCHY                                             @Y17XARV
*                                                              @Y17XARV
GETSUBST EQU   *                                               @Y17XARV
         CLI   ACTFLG,TWO          IN PROGRESS SEARCH          @YM07254
         BNE   SUBST               BR NO, GET SUBSTRUCT        @YM07254
         BAL   RRET,ACTION         CHECK FOR IN PROGRESS       @YM07254
         LTR   RZERO,RZERO         IN PROGRESS HERE            @YM07254
         BNZ   CHKDONE             BR YES, FINISHED            @YM07254
SUBST    EQU   *                                               @YM07254
         LR    RPARM,RHRCHY        LOAD TTCIN FOR CONVERSION   @Y17XARV
         L     RBRNCH,AVTRNMPT     LOAD ADDR. OF CONV. ROUTINE @Y17XARV
         BALR  RRET,RBRNCH         CONVERT TTCIN TO TTE ADDR.  @Y17XARV
         S     RCURTTE,NEGTTEL     POINT TO NEG. TTE           @Y17XARV
         LR    RCUROFF,RHRCHY      SET CURRENT TTCIN           @Y17XARV
         B     CHKDONE             CHECK SUBSTRUCT             @Y17XARV
*                                                              @Y17XARV
*        PERFORM ACTION                                        @Y17XARV
*                                                              @Y17XARV
PERFACT  EQU   *                                               @Y17XARV
         NI    FLAGS,X'FF'-LUP     TURN LUP FLAG OFF           @Y17XARV
         BAL   RRET,ACTION         PERFORM ACTION              @Y17XARV
         TM    FLAGS,DONE          IS DONE FLAG ON             @Y17XARV
         BO    CHKDONE             YES - GO TO END OF LOOP     @Y17XARV
         CLR   RCURTTE,RORGTTE     IS THIS THE ORIGINAL TTE    @Y17XARV
         BNE   GETCOHRT            NO - GET COHORT             @Y17XARV
*                                                              @Y17XARV
         OI    FLAGS,DONE          SET DONE FLAG               @Y17XARV
         B     CHKLUP              GO TO END OF LOOP           @Y17XARV
*                                                              @Y17XARV
*        USE COHORT TO GET  NEXT TTE                           @Y17XARV
GETCOHRT EQU   *                                               @Y17XARV
         IC    RLASTYPE,TRMTYPE    SAVE TRM TYPE AS LAST       @Y17XARV
         LH    RPARM,TRMCOHRT      LOAD                        @Y17XARV
         N     RPARM,AVTCLRHI       COHORT                     @Y17XARV
         LR    RCUROFF,RPARM       SET TO COHORT               @Y17XARV
         L     RBRNCH,AVTRNMPT     LOAD ADDR. OF CONV. ROUTINE @Y17XARV
         BALR  RRET,RBRNCH         CONVERT TTCIN TO TTE ADDR.  @Y17XARV
         S     RCURTTE,NEGTTEL     POINT TO NEG. TTE           @Y17XARV
*                                                              @Y17XARV
*        CHECK FOR NEXT HIGHEST REOURCE                        @Y17XARV
*                                                              @Y17XARV
         CLM   RLASTYPE,TYPEMASK,TRMTYPE IS RESOURCE DIFFERENT @Y17XARV
         BE    CHKLUP              NO - GO TO END OF LOOP      @Y17XARV
         CLI   TRMTYPE,TRMNSDLC    IS THIS A PRE-SDLC LINK     @Y17XARV
         BE    LINEDVCE            YES - GO PROCESS LINE       @Y17XARV
         CLI   TRMTYPE,TRMSDLC     IS THIS A SDLC LINE         @Y17XARV
         BE    LINEDVCE            YES - GO PROCESS LINE       @Y17XARV
         TM    TRMBYTE0,TRMSNA     IS THIS AN SNA DEVICE       @Y17XARV
         BO    SNADVCE             YES - GO PROCESS SNA DEVICE @Y17XARV
         CLI   TRMTYPE,TRMCLUST    IS THIS A PRE-SNA CLUSTER   @Y17XARV
         BNE   CHKLUP              NO - BRANCH                 @Y17XARV
         TM    FLAGS,CLUST         IS CLUSTER FLAG ON          @Y17XARV
         BNO   CHKLUP              NO - BRANCH                 @Y17XARV
         NI    FLAGS,X'FF'-CLUST   TURN OFF CLUSTER FLAG       @Y17XARV
         OI    FLAGS,LUP           TURN ON LUP FLAG            @Y17XARV
         B     CHKLUP              BRANCH                      @Y17XARV
SNADVCE  DS    0H                                              @Y17XARV
         OI    FLAGS,LUP           TURN ON LUP FLAG            @Y17XARV
         B     CHKLUP              BRANCH                      @Y17XARV
LINEDVCE DS    0H                                              @Y17XARV
         SRL   RLASTYPE,4          ISOLATE RANGE FOR TYPE FIELD@Y17XARV
*                                    OF LAST RESOURCE          @Y17XARV
         CL    RLASTYPE,LINERG     WAS THE LAST RESOURCE A LINE@Y17XARV
         BE    CHKLUP              YES - BRANCH                @Y17XARV
         OI    FLAGS,LUP           TURN ON LUP FLAG            @Y17XARV
         SPACE 2                                               @Y17XARV
CHKLUP   EQU   *                                               @Y17XARV
         TM    FLAGS,LUP           FLAG ON                     @Y17XARV
         BO    PERFACT             YES - GO PERFORM ACTION     @Y17XARV
         SPACE 2                                               @Y17XARV
CHKDONE  EQU   *                                               @Y17XARV
         TM    FLAGS,DONE          DONE ON                     @Y17XARV
         BZ    CHKSUB              NO - GO CHECK SUBSTRUCT     @Y17XARV
         SPACE 2                                               @Y17XARV
         MVI   FLAGS,ZERO          RESET FLAGS                 @Y17XARV
         L     RRET,CASSAVE        LOAD RETURN ADDR.           @Y17XARV
         BR    RRET                RETURN                      @Y17XARV
         EJECT                                                 @Y17XARV
*********                                                      @Y17XARV
**       THIS SECTION OF CODE PERFORMS THE ACTION SPECIFIED    @Y17XARV
**       IN ACTFLG.                                            @Y17XARV
*********                                                      @Y17XARV
         SPACE 2                                               @Y17XARV
ACTION   EQU   *                                               @Y17XARV
         ST    RRET,ACTSAVE        STORE RETURN ADDR.          @Y17XARV
         SLR   RZERO,RZERO         INIT RETURN CODE            @Y17XARV
         CLI   ACTFLG,ONE          IS ACTION FLAG = 1          @Y17XARV
         BNE   ACTTWO              NO - GO CHECK IF FLAG=2     @Y17XARV
         SPACE 2                                               @Y17XARV
*        CHECK IF CURRENT TTCIN = OCDEST IN ORIGINAL OPCE      @Y17XARV
*        INDICATING THAT THIS COMMAND AFFECTS THE OPERATOR     @Y17XARV
*        CONTROL TERMINAL                                      @Y17XARV
         SPACE 1                                               @Y17XARV
         L     RWORK2,ORGOPCEA     LOAD ADDR OF ORIGINAL OPCE  @Y17XARV
         LH    RWORKA,OCDEST-IEDQOPCE(RWORK2) LOAD TTCIN OF    @Y17XARV
         N     RWORKA,AVTCLRHI        OP CTL TERM              @Y17XARV
         CLR   RCUROFF,RWORKA      IS OP CTL TERM AFFECTED     @Y17XARV
         BNE   ACTRTN              NO - RETURN                 @Y17XARV
*                                                              @Y17XARV
*        ALLOW THE COMMAND IF TARGET RESOURCE IS THE NCP OR    @YM08113
*        IF THIS IS A ACT/DEACT COMMAND RECEIVED INTERNALLY    @YM08113
*        FROM CLEANUP                                          @YM08113
*                                                              @Y17XARV
         TM    OCFLAG-IEDQOPCE(RWORK2),OCCONSOL IS INPUT FROM  @ZM47796
         BO    ACTRTN              CONSOLE? YES, BRANCH        @ZM47796
         CLI   TRMTYPE-IEDNTRM(RORGTTE),TRMLNCP IS THIS FOR    @Y17XARV
*                                  AN NCP?                     @Y17XARV
         BE    ACTRTN              YES - RETURN                @Y17XARV
         L     RBRNCH,ORGOPCEA     POINT TO ORIGINAL OPCE      @ZM47546
         CLI   OCWTG-IEDQOPCE(RBRNCH),CHARF IS THIS A MODIFY   @ZM47546
*                                  ACTIVATE/DEACTIVATE COMMAND @YM08113
         BNE   CMDREJ              BR NO, REJECT COMMAND       @YM08113
         CLI   OCWTGSAV-IEDQOPCE(RBRNCH),CHARC CLNUP ACTIVATE  @ZM47546
*                                  OR DEACTIVATE REQUEST       @YM08113
         BE    ACTRTN              BR YES, ALLOW COMMAND       @YM08113
         CLI   OCSWITCH-IEDQOPCE(RBRNCH),OCTOFA IF TO IGCFA10D @ZM47724
         BE    ACTRTN              BR YES, ALLOW COMMAND       @ZM47724
CMDREJ   EQU   *                                               @YM08113
         LA    RZERO,THREE         SET RETURN CODE TO INDICATE @Y17XARV
*                                    COMMAND REJECTED BECAUSE  @Y17XARV
*                                    OP CTL TERM AFFECTED      @Y17XARV
         OI    FLAGS,DONE          DONE                        @Y17XARV
         B     ACTRTN              RETURN                      @Y17XARV
         SPACE 2                                               @Y17XARV
ACTTWO   EQU   *                                               @Y17XARV
         CLI   ACTFLG,TWO          IS ACTION FLAG TWO          @Y17XARV
         BNE   ACTCHKRT            NO - BRANCH                 @Y17XARV
*                                                              @Y17XARV
*        IS IN-PROG BIT ON IN CURRENT TTE                      @Y17XARV
*                                                              @Y17XARV
         TM    TRMBYTE2,TRMINPG    IS IN-PROG BIT ON           @Y17XARV
         BNO   ACTRTN              NO - RETURN                 @Y17XARV
         LR    RZERO,RCUROFF       LOAD TTCIN                  @Y17XARV
         OI    FLAGS,DONE          SET DONE FLAG               @Y17XARV
         B     ACTRTN              RETURN                      @Y17XARV
         SPACE 2                                               @Y17XARV
*        IF SNA LINE TURN IN-PROG BIT ON OR OFF DEPENDING      @Y17XARV
*        ON ACTION FLAG                                        @Y17XARV
*                                                              @Y17XARV
ACTCHKRT CLI   TRMTYPE,TRMNSDLC    IS THIS A BSC LINE          @Y17XARV
         BE    ACTRTN              YES - RETURN                @Y17XARV
         TM    TRMBYTE0,TRMSNA     IS THIS A BSC TERMINAL      @YM07727
         BNO   ACTRTN              YES - RETURN                @YM07727
*                                                              @Y17XARV
*        SET IN-PROG BIT USING COMPARE AND SWAP                @Y17XARV
*                                                              @Y17XARV
         L     RRET,TRMBYTE2       TRMBYTE2 CONTAINS TRMINPG   @Y17XARV
RETRY2   LR    RBRNCH,RRET         COPY                        @Y17XARV
         CLI   ACTFLG,ZERO         IS ACTION FLAG ZERO         @Y17XARV
         BE    ACTOFF              YES - GO TURN               @Y17XARV
         O     RBRNCH,INPGON       TURN ON IN-PROG BIT         @Y17XARV
         B     SETINPG             TURN ON TRMINPG             @Y17XARV
ACTOFF   EQU   *                                               @Y17XARV
         N     RBRNCH,INPGOFF      TURN OFF IN-PROG BIT        @Y17XARV
SETINPG  EQU   *                                               @Y17XARV
         CS    RRET,RBRNCH,TRMBYTE2   ATTEMPT TO SET TRMINPG   @Y17XARV
         BNE   RETRY2              TRY AGAIN IF BIT NOT SET    @Y17XARV
*                                                              @Y17XARV
ACTRTN   EQU   *                                               @Y17XARV
         L     RRET,ACTSAVE        LOAD RETURN REGISTER        @Y17XARV
         BR    RRET                                            @Y17XARV
         EJECT                                                 @Y17XARV
*********                                                      @Y17XARV
**       THIS SECTION OF CODE ADDS THE ORIGINAL OPCE TO THE    @Y17XARV
**       A/D WAIT CHAIN                                        @Y17XARV
*********                                                      @Y17XARV
         SPACE 3                                               @Y17XARV
CHNADD   EQU   *                                               @Y17XARV
         ST    RRET,CHNASAVE       SAVE RETURN ADDR.           @Y17XARV
         SLR   RWORK3,RWORK3       CLEAR                       @Y17XARV
         L     RWAITCHN,OPCWAITA   LOAD A/D WAIT CHAIN ANCHOR  @Y17XARV
         LTR   RWAITCHN,RWAITCHN   IS WAIT CHAIN EMPTY         @Y17XARV
         BH    CHNSRCH             NO - GO SEARCH CHAIN FOR END@Y17XARV
         MVC   OPCWAITA(4),ORGOPCEA  PUT ADDR OF ORIGINAL OPCE @Y17XARV
*                                    INTO A/D WAIT CHAIN ANCHOR@Y17XARV
         B     CHNLINK             GO SET OCLINK FIELD IN ORIG @Y17XARV
*                                    OPCE                      @Y17XARV
         SPACE 2                                               @Y17XARV
*        SEARCH CHAIN FOR END AND ADD ORIGINAL OPCE            @Y17XARV
         SPACE 1                                               @Y17XARV
         USING IEDQOPCE,RWAITCHN                               @Y17XARV
CHNNXTEL EQU   *                                               @Y17XARV
         L     RWAITCHN,OCLINK                                 @Y17XARV
CHNSRCH  EQU   *                                               @Y17XARV
         SR    RWORK3,RWORK3       CLEAR WORK REGISTER         @YM03732
         ICM   RWORK3,SEVEN,OCLINK+1  GET LINK ADDR            @YM03732
         BNZ   CHNNXTEL            MOVE CHAIN POINTER TO NEXT  @Y17XARV
*                                    OPCE                      @Y17XARV
         SPACE 2                                               @Y17XARV
*        ADD ORIGINAL OPCE TO CHAIN                            @Y17XARV
         SPACE 1                                               @Y17XARV
         MVC   OCLINK(4),ORGOPCEA  POINT TO ORIGINAL OPCE      @Y17XARV
CHNLINK  EQU   *                                               @Y17XARV
         L     RWAITCHN,ORGOPCEA   LOAD ADDR OF ORIG OPCE      @Y17XARV
         ST    RWORK3,OCLINK       SET OCLINK TO 0             @Y17XARV
         SPACE 2                                               @Y17XARV
         L     RRET,CHNASAVE                                   @Y17XARV
         BR    RRET                                            @Y17XARV
         EJECT                                                 @Y17XARV
*********                                                      @Y17XARV
**       THIS SECTION REMOVES THE ORIGINAL OPCE FROM           @Y17XARV
**       THE A/D WAIT CHAIN                                    @Y17XARV
*********                                                      @Y17XARV
         SPACE 3                                               @Y17XARV
CHNRMV   EQU   *                                               @Y17XARV
         ST    RRET,CHNRSAVE       SAVE RETURN ADDR            @Y17XARV
         L     RWAITCHN,OPCWAITA   LOAD A/D WAIT CHAIN ANCHOR  @Y17XARV
         LA    RWORK2,OPCWAITA-(OCLINK-IEDQOPCE) SET LAST OPCE @Y17XARV
*                                   ADDR SO OPCWAITA IN OCLINK @Y17XARV
         SR    RWORK3,RWORK3            CLEAR REG FOR ICM      @YM03732
         ICM   RWORK3,SEVEN,OCLINK+1 GET LINK ADDR             @YM03732
         BNZ   CHNRCHK             FIND ORIGINAL OPCE IN       @Y17XARV
*                                    WAIT CHAIN                @Y17XARV
         ST    RWORK3,OPCWAITA     REMOVE ORIG OPCE FROM CHAIN @Y17XARV
*                                    AND SET ANCHOR TO 0       @Y17XARV
         B     CHNRRTN             RETURN                      @Y17XARV
CHNRLOOP EQU   *                                               @Y17XARV
         LR    RWORK2,RWAITCHN     SAVE CHAIN PTR AS LAST      @Y17XARV
         L     RWAITCHN,OCLINK     POINT TO NEXT OPCE ON CHAIN @Y17XARV
CHNRCHK  EQU   *                                               @Y17XARV
         LH    RWORK3,OCTRMTBL     LOAD                        @Y17XARV
         N     RWORK3,AVTCLRHI       OCTRMTBL                  @Y17XARV
         SR    RWORK3,RORGOFF      IS THIS THE ORIGINAL OPCE   @Y17XARV
         BNZ   CHNRLOOP            NO - GO LOOK AT NEXT OPCE   @Y17XARV
         L     RWORK,OCLINK        COPY ADDR OF NEXT OPCE      @Y17XARV
         ST    RWORK3,OCLINK       SET OCLINK TO ZERO FOR      @Y17XARV
*                                    ORIG OPCE                 @Y17XARV
         ST    RWORK,OCLINK-IEDQOPCE(RWORK2) REMOVE OPCE       @Y17XARV
         SPACE 2                                               @Y17XARV
CHNRRTN  EQU   *                                               @Y17XARV
         L     RRET,CHNRSAVE       LOAD RETURN ADDR.           @Y17XARV
         BR    RRET                RETURN                      @Y17XARV
         EJECT                                                 @Y17XARV
NEGTTEL  DC    A(TRMPRFSZ)              LENGTH OF NEG. PART    @Y17XARV
*                                        OF TTE                @Y17XARV
TONSAVE  DS    1A                       SAVE AREA FOR RRET     @Y17XARV
CASSAVE  DS    1A                       SAVE AREA FOR RRET     @Y17XARV
ACTSAVE  DS    1A                       SAVE AREA FOR RRET     @Y17XARV
CHNASAVE DS    1A                       SAVE AREA FOR RRET     @Y17XARV
CHNRSAVE DS    1A                       SAVE AREA FOR RRET     @Y17XARV
ORGOPCEA DS    1A                       ADDR. OF ORIG. OPCE    @Y17XARV
SAVEREG  DS    2F                       REG. SAVE AREA         @Y17XARV
INPGON   DS    0F                       MASK TO TURN ON        @Y17XARV
         DC    AL1(TRMINPG)              TRMINPG               @Y17XARV
         DC    AL3(0)                                          @Y17XARV
INPGOFF  DS    0F                       MASK TO TURN OFF       @Y17XARV
         DC    AL1(255-TRMINPG)          TRMINPG BIT           @Y17XARV
         DC    X'FFFFFF'                                       @Y17XARV
LINERG   DC    F'2'                     VALUE OF HI ORDER      @Y17XARV
*                                         NIBBLE FOR LINES IN  @Y17XARV
*                                         TRMTYPE              @Y17XARV
FLAGS    DC    X'00'                    FLAGS                  @Y17XARV
NOP      EQU   X'08'                    NO OPERATION           @Y17XARV
DONE     EQU   X'04'                    DONE FLAG              @Y17XARV
LUP      EQU   X'02'                    LOOK UP FLAG           @Y17XARV
CLUST    EQU   X'01'                    CLUSTER FLAG           @Y17XARV
ACTFLG   DC    X'00'                    ACTION FLAG            @Y17XARV
SAVE13   DS    A                        SAVE AREA FOR REG 13   @YM04632
PROGSAVE DS    18A                      SAVE AREA              @YM04632
ZAPPATCH DC    50X'00'                  PATCH AREA             @Y17XARX
         EJECT                                                 @Y17XARV
         TITLE 'IEDQCA-OP CTL AVT'                             @Y17XARX
OPCAVT   DS    0D                  AVT ON DOUBLE WORD BOUNDARY
OPCDOUBL DC    D'0'                WORK SPACE FOR TRANSIENTS   @Y17XARX
OPCAVTPT DC    A(0)                ADDRESS OF TCAM AVT
OPCCOPCE DC    A(0)                ADDRESS OF CURRENT OPCE
OPCDCBLK DC    A(DCBLOCAT)         ADDRESS OF DCB, RLN, ADDRESS LOOK-UP
OPCGTBLD DC    A(GETBLDL)          ADDRESS OF OPTION FLD LOOKUP@Y17XARX
OPCTOFLK DC    A(TRMOFLOC)         ADDRESS TO GET TNT OFFSET,TERM ENTRY
OPCIPLAD DC    A(ADDRDCB)               ADDRESS OF IPL DCB     @Y17XARX
         DC    A(0)                     UNUSED                 @Y17XARX
OPCLCB   DC    A(LCBSETUP)         ADDRESS OF LCB SET UP ROUTINE
OPCPGCK  DC    A(PROGRTNE)         IN-PROG CHECK AND SET RTN   @Y17XARV
OPCTNTEA DC    A(TNTENTAD)         FIND TNT ROUTINE            @Y17XARX
OPCPSTWT DC    A(POSTWAIT)         TPOST-&-WAIT ROUTINE        @Y17XAWC
OPCTRMWA DC    F'0'                WORKAREA FOR PICKING UP TNT ADDRESS
OPCSAVE  DC    18F'0'              OP CONTROL SAVE AREA        @Y17XARX
*   DO NOT INSERT CARDS OR MOVE CARDS BETWEEN THESE COMMENTS          *
OPCQCBAD DC    A(OPCPWCOB)         ADDRESS OF OPC QCB          @YM08508
OPCRSAVE DC    2F'0'               BASE AND RETURN SAVEAREA (IGC0010D)
OPCWORK  DC    A(CMDWORKA)         ADDRESS OF RESIDENT WORKAREA
OPCWRKSZ DC    H'540'              SIZE OF RESIDENT WORKAREA
OPCFLAG1 DC    X'00'               FLAG BYTE FOR TRANSIENT USE
OPCFLAG2 DC    X'00'               FLAG BYTE FOR TRANSIENT USE
OPCBFERB DC    F'0'                BUFFER
         DC    X'E4',AL3(0)              REQUEST
         DC    X'02',AL3(0),X'0100',H'0'        ERB
*   DO NOT INSERT CARDS OR MOVE CARDS BETWEEN THESE COMMENTS          *
OPCCKERB DC    X'40',AL3(0)        CHECKPOINT
         DC    X'EC',AL3(0)                  REQUEST
         DC    X'00',AL3(0),H'0',H'0'               ERB
OPCAQCTL DC    3F'0'               SVC 102 PARAMETER LIST
OPCWAIT  DC    A(OLCBECB)          OP CONTROL WAIT LIST
         DC    2F'0'               WAIT LIST (CONT)
OPCXCTL  XCTL  EPLOC=OPCLDNME,SF=L
OPCLDNME DS    0CL8                XCTL MODULE NAME            @Y17XARX
         DC    CL3'IGC'            MODULE NAME PREFIX          @Y17XARX
OPCMODID DC    CL2' '              MODULE ID                   @Y17XARX
         DC    CL3'10D'            MODULE NAME SUFFIX          @Y17XARX
OPCWAITC DC    F'0'                QCW FOR CHECKPOINT WAIT QUEUE
OPCWAITL DC    F'0'                QCW FOR LCB WAIT QUEUE
OPCWAITN DC    F'0'                FID0 RESP WAIT CHAIN        @Y17XARX
OPCWAITO DC    F'0'                OUTPUT QUEUE QCW
OPCWAITP DC    A(0)                SSCP OPCE Q FOR ACTPU'S     @Y17XARX
OPCWAITR DC    F'0'                QCW FOR RESOURSE WAIT QUEUE
OPCWAITA DC    F'0'                QCA FOR ACT/DEACT WAIT CHN  @Y17XARX
OPCCKPTF DC    F'0'                FIRST OPCE FOR CHECKPT      @Y17XARX
OPCCKPTL DC    F'0'                LAST OPCE FOR CHECKPT       @Y17XARX
OPCHORT  DC    A(COHORTLK)         COHORT SEARCH ROUTINE       @Y17XARX
OPCHORTG DC    A(CHORTGLK)         COHORTG SEARCH ROUTINE      @Y17XARX
OPCSCNC  DC    F'0'                FID1 SC/NC WAIT CHAIN       @Y17XARX
OPCFMDFC DC    F'0'                FID1 FM/DFC WAIT CHAIN      @Y17XARX
OPCNEXT  DC    A(0)                ADDRESS OF ELEMENT FREED BY PREVIOUS
OPCGETBF DC    A(ALLOCBUF)         ADDRESS OF BUFFER REQUEST ROUTINE
OPCFREBF DC    A(FREEBUFF)         ADDRESS OF BUFFER UNIT FREE ROUTINE
OPCBFREQ DC    H'0'                NO. OF BUFFERS NEEDED BY WAIT LIST
OPCHA8   DC    H'8'                HALF WORD SET TO 8
OPCCLNTS DC    X'0'                TEST AND SET SWITCH FOR     @YM07310
*                                  QUEUE SEARCH                @YM07310
OPCIPLCT DC    X'0'                COUNT OF 3705'S BEING IPLED @YM08447
OPCAVBUF DC    H'0'                NO, OF BUFFERS IN OPC FREE POOL
OPCBFIRS DC    F'2'                ADDRESS OF FIRST UNIT IN FREE POOL
OPCBFEND DC    F'0'                CURRENT UNIT END (IGC0110D)
OPCSPEC  DC    X'00'               SPECIAL FLAGS USED BY IEDQCA
OPCRSTRT EQU   X'20'               RESTART IN PROGRESS FLAG    @YM07252
OPCOQSW  DC    X'00'               SWITCH THAT INDICATES OUTPUT BUSY
OPCHNEND TM    OPCEND,ZERO         EXECUTED TO FIND END OF BUFFER UNITS
OPCSTCBS DC    X'00'               SWITCH TO INDICATE STCB BUSY
OPCEND   DC    X'03'               TESTED BYTE TO DECTECT UNIT END
OPCCKCIB DC    A(CHECKCIB)              ADDR OF CMD CHECK RTN  @YA04391
OPPOLSTP DC    A(POLSTOP)               ADDRESS OF POLLSTOP SUB@XA09783
OPCRQCNT DC    H'0'                FID1 SC/NC COUNTER/SEQ      @Y17XARX
OPCADGOT DC    H'0'                # OF BUFFER UNITS A/D USING @Y17XARV
OPCWRKSP DC    7F'0'                    INTERNAL SAVE AREA     @Y17XARX
OPCBUFWT DC    F'0'                A/D REDRIVE CHAIN           @Y17XARV
OPCDECR  DC    A(DECRCT)                ADDR. OF A/D DECREMENT @Y17XARV
*                                         ROUTINE              @Y17XARV
OPCAPXTL DC    A(OPCXCTL2)         ADDR TO XCTL LIST FOR APPL  @Y17XARV
*                                  PGM USAGE                   @Y17XARV
OPCTOTCK DC    A(0) .              TOTE HEIRARCHY SCAN ROUTINE @Y17XARR
OPCWAITV DC    A(0) .              VARY FOR 3705 RESOURCES WAIT CHAIN
*                                                              @Y17XARR
OPCPWCOB DS    0CL12               OPERATOR CONTROL QCB FOR POSTWAIT
*                                  ROUTINE TO SYNCHRONIZE TASKS@YM08403
OPCPWQCB DS    0F                  QCB MAP                     @YM08403
OPCPWVTO DC    XL1'2'              VTO                         @YM08486
OPCPWCHN DC    AL3(0)              ELEMENT CHAIN               @YM08403
OPCPWECB DS    0F                  ECB                         @YM08403
OPCPWCCC DC    XL1'0'              ECB COMPLETION CODE         @YM08403
         DC    AL3(0)              UNUSED                      @YM08403
         DC    XL1'0'              UNUSED                      @YM08486
OPCPWSTC DC    AL3(OPCPWVTO)       NEXT STCB                   @YM08486
CMDWORKA DC    140F'0'                  RESIDENT WORKAREA
         TITLE 'IEDQCA-DUMMY LCB/SCB FOR OUTPUT'
OPCXCTL2 XCTL  EPLOC=OPCLDNM2,SF=L      XCTL FIELD             @XA06556
OPCLDNM2 DC    C'IGC0010D'              XCTL NAME FIELD        @XA06556
OLCBQCBA DC    A(0)                ADDRESS OF IEDQBD QCB
OLCBPRI  DC    X'E7',AL3(0)        PRIORITY FOR OUTPUT
OLCBSTCB DC    A(OSTCB)            ADDRESS OF OUR STCB FOR OUTPUT
OLCBZ1   DC    6F'0'               FIELDS ZEROED BY BD
OLCBECB  DC    F'0'                ECB FOR THIS LCB
OLCBZ2   DC    3F'0'               SOME FIELDS USED BY BD      @OX19903
         DC    X'70',AL3(OLCBZ1+4) DUMMY QCB ADDR USED BY BD   @OX19903
         DC    2F'0'               WORK FIELDS USED BY BD      @OX19903
OLCBBUFF DC    A(0)                ADDRESS OF OUTPUT BUFFER
OLCBZ3   DC    H'0'                RESERVED BYTES
OLCBSEND DC    2X'00'              RECIEVE OPERATION
OLCBZ4   DC    3F'0'               FIELDS USED BY BD
OLCBERB  DC    X'41',AL3(0)        ERB STATUS FLAGS
OLCBZ5   DC    F'0'                RESERVED FIELD
OLCBSCBA DC    A(OSCBQCB)          ADDRESS OF OUR STCB
OLCBRMDR DC    12F'0'                   REMAINING DUMMY LCB    @Y17XARX
OSCBQCB  DC    A(0)                ADDRESS OF DESTINATION QCB
OSCBINOT DC    A(0)                ADDRESS OF DUMMY IN/OUT IN AVT
OSCBPRI  DC    X'F9',AL3(0)        HIGHEST PRIORITY FOR OUTPUT
OSCBRMDR DC    18F'0'                   REMAINING DUMMY SCB    @Y17XARX
OPCDSRWT DC    F'0'                     DISPLAY STORE QUEUE    @ZM47883
         DC    18F'0'                   DEBUG WORK AREA
GETBLDL  EQU   *
         DC    A(0)                     LA OR LU
         DC    AL1(0)                   HIARCHY FILL
         DC    AL3(0)                   ADDR. OF ADDFR. LIST
         DC    X'20'                    EC MODE
         DC    AL1(0)                   SUBPOOL VALUE
BLDLLIST DC    AL2(1),AL2(58)           PREFIX FOR BLDL
NAME     DC    CL8'IEDQFE',XL50'00'        BLDL ENTRY FOR SERVICE AID L
*                                       LOAD
ADDROPEN DC    A(OPENCODE)              ADDR OF CODE TO OPEN DCB S22024
*                                       FOR IPL                  S22024
ADDRDCB  DCB   DDNAME=DDIPL,BLKSIZE=1028,BUFL=1028,DEVD=DA,DSORG=PO,   X
               MACRF=R,RECFM=U
ADDRDCB2 DCB   DDNAME=DDITEST,BLKSIZE=1028,BUFL=1028,DEVD=DA,DSORG=PO, X
               MACRF=R,RECFM=U
         TITLE 'IEDQCA - DSECTS REFERENCED BY THIS MODULE'
IEDQCIB  DSECT                          MAP OF A CIB           @YM08136
CIBQCBA  DS    F                        QCB ADDRESS            @YM08136
CIBPRI   DS    XL1                      PRIORITY               @YM08136
CIBLINK  DS    AL3                      LINK FIELD             @YM08136
CIBVERB  DS    XL1                      VERB COMMAND CODE      @YM08136
CIBLEN   DS    XL1                      LENGTH OF THE CIB      @YM08136
CIBRLN   DS    XL1                      RELATIVE LINE NUMBER   @YM08136
CIBRC    DS    XL1                      REQUEST REURN CODE     @YM08136
CIBFLAG  DS    XL1                      TOTE FLAG              @YM08136
CIBALT   EQU   X'80'                    TTCIN OF THE RESOURCE  @YM08136
*                                       IS AT END OF CIB       @YM08136
CIBECBA  DS    AL3                      ECB ADDRESS            @YM08136
CIBTNAME DS    CL8                 TERMNAME                    @YM08136
CIBTTCIN DS    H                   TTCIN  OF COUNTERFEIT       @YM08136
         TAVTD
         EJECT
         DCBD  DSORG=TX
         EJECT
         TDEBD
         EJECT
         TDISPD
         EJECT
*
         EJECT
         TLCBD
         TLGBD                                                   S22024
         EJECT
         TOPCED
         EJECT
         TPRFD
         EJECT
         TPRIOR
         EJECT
         TQCBD
         EJECT
         TSCBD
         EJECT
         TTNTD
         EJECT
         TTRMD
         EJECT
         IHAPSA                                                @G36XRRU
         SPACE 2
         END
