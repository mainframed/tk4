GP       TITLE 'IEDQGP - MHGET/MHPUT MODULE'
IEDQGP   CSECT
         SPACE 3
*  CHANGE ACTIVITY AS FOLLOWS
******************** MICROFICHE FLAGS *********************** SUPT CODE
*C656000-658000                                                 SA62380
*C587000                                                        SA64709
*C274600,716500                                                 SA65442
*A652000                                                       @XA05322
*C582000                                                       @SA74041
*A582900,826000                                                @SA74041
         SPACE 3
***********************************************************************
*                                                                     *
*  TITLE:  'IEDQGP' - MHGET/MHPUT MODULE                              *
*                                                                     *
*  MODULE NAME = IEDQGP                                               *
*                                                                     *
*  DESCRIPTIVE NAME = MHGET/MHPUT ROUTINE                             *
*                                                                     *
*  COPYRIGHT = 'NONE'                                                 *
*                                                                     *
*  STATUS CHANGE LEVEL 5                                              *
*                                                                     *
*                                                                     *
* FUNCTION -- THIS MODULE IS USED BY MHGET AND MHPUT.  WHEN ENTERED   *
*    FROM MHGET, IT MOVES DATA FROM THE CURRENT BUFFER TO A USER      *
*    SPECIFIED WORK AREA OR PUTS THE STARTING ADDRESS OF THE DATA     *
*    WITHIN THE BUFFER INTO A USER SPECIFIED REGISTER.  WHEN ENTERED  *
*    FROM MHPUT, IT MOVES DATA FROM A USER SPECIFIED WORK AREA INTO   *
*    THE CURRENT BUFFER.                                              *
*                                                                     *
* ENTRY POINTS --                                                     *
*         FIRST EXECUTABLE INSTRUCTION                                *
*                                                                     *
* INPUT --                                                            *
*    R1 ADDRESS OF USER PARAMETER LIST BUILT BY MHGET OR MHPUT        *
*    R14 RETURN ADDRESS                                               *
*                                                                     *
* OUTPUT --                                                           *
*    R15 RETURN CODE                                                  *
*                                                                     *
* EXTERNAL REFERENCES --                                              *
*         NONE                                                        *
*                                                                     *
* EXITS,NORMAL --                                                     *
*         BR 14 RETURN TO CALLER                                      *
*                                                                     *
* EXITS,ERROR --                                                      *
*         NONE                                                        *
*                                                                     *
* TABLES/WORK AREAS --                                                *
*    PRF                                                              *
*    LCB                                                              *
*    DCB                                                              *
*    AVT                                                              *
*    USER SUPPLIED DATA WORK AREA                                     *
*                                                                     *
* ATTRIBUTES --                                                       *
*    SERIALLY REUSABLE, REFRESHABLE, ENABLED, RESIDENT, PROBLEM       *
*    PROGRAM MODE                                                     *
*                                                                     *
* CHARACTER CODE DEPENDENCY --                                        *
*    THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A PARTICULAR   *
*    INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.           *
*                                                                     *
* NOTES --                                                            *
*    STANDARD TCAM DEVIATIONS FROM STANDARDS                          *
*                                                                     *
***********************************************************************
         EJECT
         USING IEDQGP,R15BASE
         USING IHADCB,R2
         USING IEDQLCB,R4LCB
         USING IEDQPRF,R6BUFF
         USING IEDQAVTD,R9AVT
         SPACE 1
***********************************************************************
***        REGISTER EQUATES                                         ***
***********************************************************************
R0       EQU   0                        WORK REGISTER
R1PARM   EQU   1                        MHGET/MHPUT PARAMETER
R2       EQU   2                        WORK REGISTER
R3WKSIZ  EQU   3                        SIZE OF THE WORK AREA
R3       EQU   3                        WORK REGISTER
R4LCB    EQU   4                        LCB ADDRESS
R5       EQU   5                        WORK REGISTER
R6BUFF   EQU   6                        BUFFER ADDRESS
R7       EQU   7                        WORK REGISTER
R8DASIZ  EQU   8                        DATA SIZE
R9AVT    EQU   9                        AVT ADDRESS
R10DATA  EQU   10                       DATA ADDRESS
R11      EQU   11                       WORK REGISTER
R12      EQU   12                       WORK REGISTER
R13SAVE  EQU   13                       SAVE AREA ADDRESS
R14RETRN EQU   14                       RETURN ADDRESS
R14      EQU   14                       WORK REGISTER
R15BASE  EQU   15                       BASE REGISTER
         EJECT
***********************************************************************
***            MAIN  ROUTINE                                        ***
***********************************************************************
         SPACE 2
IEDQGP   IEDHJN BEGIN,HJN
         STM   R14RETRN,R12,SAVAREA+OFFSET
*                                       SAVE REGS 14 - 12
         ST    R13SAVE,SAVAREA+WORDLEN  SAVE REG 13
         LA    R13SAVE,SAVAREA          LOAD SAVE AREA ADR
         XC    SAVAREA+FOFFSET(WORDLEN),SAVAREA+FOFFSET
*                                       INIT R15 W/GOOD RET CODE
         L     R9AVT,CVTOFF             GET ADDRESS OF CVT
         L     R9AVT,AVTCVTPT(,R9AVT)   FIND POINTER TO AVT
         LTR   R9AVT,R9AVT              AVT POINTER ZERO
         BNZ   GETAVT                   BRANCH IF NOT ZERO
         MVI   RETCODOF(R13SAVE),NTCAM  NO TCAM - SET RET CODE
         B     RESTREG                  RETURN TO USER
GETAVT   EQU   *
         L     R9AVT,AVTEZERO(,R9AVT)   GET ADDRESS OF AVT
         L     R6BUFF,AVTADBUF          INITIALIZE BUFFER ADR
         L     R4LCB,PRFLCB-ADDROFF     INITIALIZE LCB ADDR
         L     R2,LCBDCBPT              POINTER TO DCB
         SR    R5,R5                    CLEAR REG 5
         IC    R5,LCBISZE               GET NO OF RESERVES
         STH   R5,RESRVS                SAVE IT
         LA    R14,AVTHDRSZ             HDR BUFR PREFIX SIZE
         TM    PRFSTAT1,PRFNHDRN        HDR BUFR
         BZ    CONTINU1                 BRANCH IF YES
         SPACE 1
         LA    R14,AVTTXTSZ             TEXT BUFR PREFIX SIZE
         SPACE 1
CONTINU1 EQU   *
         LH    R11,PRFSIZE              LOAD BUFFER LENGTH
         LTR   R11,R11                  IS IT ZERO
         BNZ   CONTINU2                 BRANCH IF NO
         SPACE 1
         TM    PARMID(R1PARM),PUTID     IS THIS AN MHPUT
         BO    RESTREG                  BRANCH IF YES
         MVI   RETCODOF(R13SAVE),SYSBUF SET RETURN CODE
         B     RESTREG                  GO TO EXIT
         SPACE 1
CONTINU2 EQU   *
         N     R11,AVTCLRHI             CLEAR SIGN BITS
         TM    PARMID(R1PARM),PUTID     IS THIS A MHPUT
         BO    MHPUT                    YES, GO TO MHPUT RTNE
         B     MHGET                    NO, A MHGET
         SPACE 1
RESTREG  EQU   *
         L     R13SAVE,SAVAREA+WORDLEN  RESTORE USER REG 13
         LM    R14RETRN,R12,SAVAREA+OFFSET
*                                       RESTORE USER REGS
         BR    R14RETRN                 RETURN TO CALLER
         EJECT
***********************************************************************
***            MHGET  SUBROUTINE                                    ***
***********************************************************************
         SPACE 2
MHGET    EQU   *                        MHGET ROUTINE
         LA    R11,FIRSTIME             FIRST TIME BRANCH
         TM    AVTEZERO(R1PARM),GETRES  RESERVES WANTED
         BO    CKFOREG                  BRANCH IF YES
         AH    R14,RESRVS               ADD RESERVES TO PREFIX
         SPACE 1
CKFOREG  EQU   *
         CLI   PARM4(R1PARM),NULL       ANSWER REG SPECIFIED
         BE    MOVEIT                   BRANCH IF NO
         SPACE 1
         SR    R5,R5                    CLEAR REG 5
         IC    R5,PARM4(,R1PARM)        LOAD ANSWER REG NO IN R5
         SLL   R5,TWO                   QUADRUPLE REG NO
         LA    R10DATA,AVTECD12(R14,R6BUFF)  GET DATA ADR
         ST    R10DATA,OFSETR0(R5,R13SAVE)
*                                       MOVE DATA ADR TO USR REG
         SR    R7,R7                    CLEAR REG 7
         IC    R7,PRFSTAT1              MOVE IN PRFSTAT
         SLL   R7,SHIFT16               SHIFT LEFT 2 BYTES      SA65442
         LH    R12,PRFSIZE              GET DATA SIZE
         SR    R12,R14                  SUBTR BUFFER PREFIX
         OR    R7,R12                   PUT IT IN REG 7
         ST    R7,OFSETR1(R5,R13SAVE)   STORE IN USER REG
         B     RESTREG                  DEPART
         SPACE 1
MOVEIT   EQU   *
         L     R10DATA,PARMAWK(,R1PARM)  LOAD WK AREA ADR IN R10
         TM    PARMLEN(R1PARM),LEN8     IS IT AN ADR
         BO    CKSIZE                   BRANCH IF YES
         SPACE 1
         SR    R5,R5                    CLEAR REG 5
         IC    R5,PARMWRK(,R1PARM)      PUT WORKREG NO IN REG 5
         SLL   R5,TWO                   QUADRUPLE REG NO
         L     R10DATA,OFSETR0(R5,R13SAVE)
*                                       LOAD WORK AREA ADDR
         SPACE 1
         SPACE 1
CKSIZE   EQU   *
         LH    R3WKSIZ,AVTEZERO(,R10DATA)
*                                       PUT WK AREA SIZE IN REG3
         LH    R5,DATLEN(,R10DATA)      LOAD LENGTH ALREADY MOVD
         SR    R3WKSIZ,R5               SUBT LENGTH ALREADY USED
         LH    R8DASIZ,PRFSIZE          PUT DATA SIZE IN REG 8
         SR    R8DASIZ,R14              SUBTR BUFR PRFX SIZE
         CR    R3WKSIZ,R8DASIZ          WORK AREA TOO SMALL
         BNL   CONTINU3                 NO, CONTINUE
         SPACE 1
         MVI   RETCODOF(R13SAVE),TRUNC  YES, SET RETURN CODE
         LR    R8DASIZ,R3WKSIZ          PUT WORK SIZE IN REG 8
         SPACE 1
CONTINU3 EQU   *
         LA    R7,WRKPRFX(R5,R10DATA)   ADDR OF NEXT WRKAR SPACE
         LH    R5,AVTKEYLE              PUT UNIT LENGTH IN REG 5
         SR    R5,R14                   SUBTRACT PREFIX FROM LTH
         LA    R6BUFF,AVTEZERO(R14,R6BUFF)
*                                       ADD BUFR PREFIX TO ADDR
         SPACE 1
LOOP     EQU   *
         CR    R5,R8DASIZ               UNIT LNTH GT DATA SIZE
         BNH   MOVDATA                  NO, PROCEED
         SPACE 1
         LR    R5,R8DASIZ               YES, MAKE UNIT EQ DATA
         EJECT
MOVDATA  EQU   *
         SPACE 1
***********************************************************************
***  AT THIS POINT, REGISTERS ARE SET UP AS FOLLOWS:                ***
***      REG 5 - LENGTH OF DATA TO BE MOVED FROM THE BUFR UNIT      ***
***      REG 6 - ADR OF DATA IN BUFR MINUS UNIT PREFIX              ***
***      REG 7 - ADR DATA IS TO BE MOVED TO IN USER WORKAREA        ***
***      REG 8 - LENGTH OF REMAINING DATA TO BE MOVED BY MHGET      ***
***********************************************************************
         SPACE 1
         LTR   R5,R5                    IS WORKAREA FULL
         BZ    ALLDONE                  BRANCH IF YES
         BCTR  R5,AVTEZERO              SUBTRACT 1 FROM REG 5
         EX    R5,EXECUTE2              PUT DATA LNTH IN EXEC2
         LA    R5,ADDROFF(,R5)          ADD 1 TO REG 5
         CR    R5,R8DASIZ               DATA SIZE GT UNIT SIZE
         BNL   ALLDONE                  BRANCH IF NO
         SPACE 1
         SR    R8DASIZ,R5               YES, SUBT DATA JUST MOVD
         AR    R7,R5                    BUMP ADR POINTER
         BR    R11                      R11 INIT TO FIRSTIME
         SPACE 1
FIRSTIME EQU   *
         LA    R11,SUBSEQ               CHANGE FIRST TIME BRANCH
         LH    R5,AVTKEYLE              RESTORE UNIT LNTH IN R5
         L     R6BUFF,AVTADBUF          RESTORE BUFR UNIT ADR
         SPACE 1
SUBSEQ   EQU   *
         L     R6BUFF,PRFTIC            LOAD ADR OF NEXT UNIT
         SPACE 1
         B     LOOP                     CHECK DATA LENGTH
         SPACE 1
ALLDONE  EQU   *
         AR    R7,R5                    POINT R7 TO END OF DATA
         SR    R7,R10DATA               GET DATA LNTH PLUS PRFX
         SH    R7,WKPRFX                SUBT WORK AREA PREFIX
         STH   R7,PARMWRK(,R10DATA)     PUT DATA LNTH IN WKAREA
         L     R6BUFF,AVTADBUF          RESTORE BUFR ADR
         MVC   WRKSTAT(LEN1,R10DATA),PRFSTAT1
*                                       PUT STAT IN WORK AREA
         MVC   WRKUNRS(LEN1,R10DATA),LCBISZE
*                                       NO OF UNUSED RESERVES
         B     RESTREG                  DEPART
         EJECT
***********************************************************************
***            MHPUT  SUBROUTINE                                    ***
***********************************************************************
         SPACE 2
MHPUT    EQU   *
         MVI   UCNT,CNTINIT             INITIALIZE UNIT CNTR
         SR    R11,R11                  CLEAR REG 11
         IC    R11,LCBISZE              GET DCB RESERVES
         TM    PRFSTAT1,PRFNHDRN        HEADER BUFFER
         BO    ADDRES                   NO, USE DCB RESERVES
         SPACE 1
         TM    PARM4(R1PARM),AVTEFF     RESERVES SPECIFIED
         BO    ADDRES                   NO, USE DCB RESERVES
         SPACE 1
         IC    R11,PARM4(,R1PARM)       LOAD USER RESERVES IN 11
         LH    R7,AVTKEYLE              LOAD UNIT SIZE IN REG 7
         SR    R7,R14                   SUBT BUFR PRFX FROM R7
         SH    R7,MINLNTH               SUBT MINIMUM DATA LNTH
         CR    R11,R7                   RESERVES GT ALLOWBL SIZE
         BNH   STORES                   NO, USE THEM
         SPACE 1
         MVI   RETCODOF(R13SAVE),MAXRES SET RETURN CODE
         LR    R11,R7                   USE MAX ALLOWABLE
         SPACE 1
STORES   EQU   *
         STC   R11,LCBISZE              UPDATE LCBISZE
         SPACE 1
ADDRES   EQU   *
         AR    R14,R11                  ADD RESERVES TO PREFIX
         STH   R14,PRFSIZE              INITIALIZE PRFSIZE
         STH   R14,PRFSCAN              SET SCAN PTR
         L     R10DATA,PARMAWK(,R1PARM)  LOAD WK AREA ADR
         TM    PARMLEN(R1PARM),LEN8     IS IT AN ADR
         BO    CKWRK                    YES, CHECK SIZE
         SPACE 1
         SR    R5,R5                    CLEAR REG 5
         IC    R5,PARMWRK(,R1PARM)      PUT WK REG NO IN REG 5
         SLL   R5,TWO                   QUADRUPLE REG NO
         L     R10DATA,OFSETR0(R5,R13SAVE)
*                                       LOAD WORK AREA ADDR
         SPACE 1
CKWRK    EQU   *
         LH    R8DASIZ,DATLEN(,R10DATA) PUT DATA SIZE IN REG 8
         LTR   R8DASIZ,R8DASIZ          WAS LENGTH INITIALIZED
         BNZ   LNGTHOK                  BRANCH IF YES
         MVI   RETCODOF(R13SAVE),ZROLEN SET RETURN CODE
         B     RESTREG                  DEPART
LNGTHOK  EQU   *
         AH    R10DATA,WKPRFX           MOVE POINTER PAST PREFIX
         L     R12,PRFTIC               SAVE TIC FIELD
         LH    R11,AVTKEYLE             LOAD UNIT SIZE IN REG 11
         SR    R11,R14                  SUBT PRFX AND RESERVES
         LR    R3,R6BUFF                POINT R3 AT BEG OF UNIT
         LA    R14,AVTEZERO(R14,R6BUFF) POINT R14 AT DATA AREA
         SPACE 1
LOOP1    EQU   *
         CR    R8DASIZ,R11              IS DATA LESS THAN UNIT
         BNL   CONTINU4                 NO,CONTINUE
         SPACE 1
         LR    R11,R8DASIZ              YES, SET MOVE LNTH
         SPACE 1
CONTINU4 EQU   *
         BCTR  R11,AVTEZERO             SUBTRACT 1 FROM REG 11
         EX    R11,EXECUTE3             LOAD LENGTH IN EXECUTE3
         LA    R11,ADDROFF(,R11)        ADD 1 TO REG 11
         LH    R5,PRFSIZE               LOAD DATA SIZE
         AR    R5,R11                   ADD LAST CHUNK TO IT
         STH   R5,PRFSIZE               STORE IT BACK
         SR    R8DASIZ,R11              GET REMAINING DATA LNTH
         BZ    SCBCHK                   ALL DATA MOVED, DEPART @SA74041
         CLC   PRFNBUNT,MAXUNIT         IS UNIT COUNT GE 255
         BL    CKUNITS                  BRANCH IF NO
         MVI   RETCODOF(R13SAVE),NUNITS SET MAX UNIT EXCEEDED
SCBCHK   L     R3,LCBSCBA-1             ADDRESS OF SCB         @SA74041
         USING IEDQSCB,R3                                      @SA74041
         CH    R5,SCBEOB                EOB IN BUFFER          @SA74041
         BNL   RESTREG                  EXIT                   @SA74041
         STH   R5,SCBEOB                UPDATE EOB OFFSET      @SA74041
         B     RESTREG                  EXIT
CKUNITS  EQU   *
         SPACE 1
         CLC   UCNT,PRFNBUNT            ORIG UNITS USED UP
         BNL   GETUNIT                  YES, GO GET ONE         SA64709
         SR    R7,R7                    CLEAR REG 7
         IC    R7,UCNT                  LOAD UNIT COUNT IN R7
         LA    R7,ADDROFF(,R7)          BUMP IT ONE
         STC   R7,UCNT                  STORE IT
         LR    R3,R12                   NO, POINT R3 TO NXT UNIT
         LR    R14,R12                  POINTER TO DATA POSITION
         L     R12,PRFTIC1(,R3)         SAVE TIC FIELD
         SPACE 1
CONTINU5 EQU   *
         AR    R10DATA,R11              POINT R10 TO DATA
         LH    R11,AVTKEYLE             LOAD UNIT SIZE IN REG 11
         B     LOOP1                    CHECK DATA SIZE
         SPACE 1
GETUNIT  EQU   *
         L     R7,AVTBFREB              ADR OF FIRST FREE UNIT
         LA    R7,AVTEZERO(,R7)         CLEAR FIRST BYTE
         LTR   R7,R7                    ANY UNITS THERE
         BNZ   GOT1                     YES, DELINK ONE
         SPACE 1
         MVI   RETCODOF(R13SAVE),NUNITS NO UNITS - SET RET CODE
         B     RESTREG                  DEPART
         SPACE 1
GOT1     EQU   *
         MVC   AVTBFREB+1(THREE),FIVE(R7)  DELINK UNIT
         XC    FIVE(SEVEN,R7),FIVE(R7)  CLEAR ADDRESSES IN UNIT
         LH    R0,AVTAVFCT              LOAD UNIT CTR
         BCTR  R0,AVTEZERO              SUBTRACT 1
         STH   R0,AVTAVFCT              STORE IT BACK
         SR    R5,R5                    CLEAR REG 5
         IC    R5,PRFNBUNT              LOAD NO OF UNITS
         LA    R5,ADDROFF(,R5)          ADD 1
         STC   R5,PRFNBUNT              STORE IT BACK
         STC   R5,UCNT                  UPDATE UNIT COUNTER    @XA05322
         MVC   PRFTIC1(WORDLEN,R7),PRFTIC1(R3)
*                                       POINT NEW UNIT TO NEXT 1
         IC    R0,PRFTIC1(,R3)          CHAIN NEW UNIT          SA62380
         ST    R7,PRFTIC1(,R3)          TO THE PREVIOUS UNIT    SA62380
         STC   R0,PRFTIC1(,R3)          SAVING FLAGS IN TIC     SA62380
         LR    R3,R7                    POINT DSECT TO NEW UNIT
         LR    R14,R7                   POINTER TO DATA POSITION
         B     CONTINU5                 BACK TO MOVE DATA RTNE
         EJECT
***********************************************************************
***        RETURN  CODES                                            ***
***********************************************************************
TRUNC    EQU   X'04'                    USER WORKAREA TOO SMALL
NUNITS   EQU   X'04'                    NOT ENOUGH UNITS AVAILBL
NTCAM    EQU   X'08'                    TCAM NOT IN SYSTEM
MAXRES   EQU   X'0C'                    USER RESERVES TOO LARGE
SYSBUF   EQU   X'0C'                    EMPTY BUFFER - NO
*                                       USER PROCESSING PERMITTED
ZROLEN   EQU   X'10'                    LENGTH FIELD IS ZERO
         SPACE 2
***********************************************************************
***        MISCELLANEOUS  EQUATES                                   ***
***********************************************************************
PARMID   EQU   0                        PARM - ID
PARMLEN  EQU   1                        PARM - LENGTH
PARMWRK  EQU   2                        PARM - WORK AREA ADR REG
PARM4    EQU   3                        PARM - MHGET-ANSWER REG
*                                              MHPUT-NO OF USER
*                                              RESERVES
PARMAWK  EQU   4                        PARM - ADR OF WORK AREA
GETRES   EQU   X'02'                    GET RESERVES, TOO
PUTID    EQU   X'01'                    MHPUT ID
NULL     EQU   X'00'                    EMPTY BYTE
TIC      EQU   X'08'                    FIRST BYTE OF LAST TIC
LEN8     EQU   X'08'                    MASK FOR LENGTH TEST
ADDROFF  EQU   1                        OFFSET OF 1
LEN1     EQU   1                        LENGTH OF 1
DATLEN   EQU   2                        OFFSET TO DATA LNTH MOVD
WORDLEN  EQU   4                        LENGTH OF 1 WORD
WRKPRFX  EQU   6                        PREFIX ON USER WRK AREA
OFFSET   EQU   12                       OFFSET TO REGS IN SAVARE
FOFFSET  EQU   16                       REG 15 OFFSET IN SAVAREA
RETCODOF EQU   19                       RETURN CODE OFFSET
OFSETR0  EQU   20                       OFFSET TO REG 0 IN SAVAR
OFSETR1  EQU   24                       OFFSET TO REG 1 IN SAVAR
CVTOFF   EQU   16                       ADR OF CVT
PRFTIC1  EQU   8                        OFFSET OF PRFTIC
SHIFT16  EQU   16                       16 BIT SHIFT AMOUNT     SA65442
CNTINIT  EQU   1                        UNIT COUNTER INIT
TWO      EQU   2                        EQUATED 2
THREE    EQU   3                        MOVE LENGTH FOR BUFR
FIVE     EQU   5                        OFFSET FOR DELINK BUFR
SEVEN    EQU   7                        EQUATED 7
WRKSTAT  EQU   4                        PRFSTAT OFFSET IN WKAR
WRKUNRS  EQU   5                        UNUSED RESERVES OFFSET
         EJECT
***********************************************************************
***        EXECUTE  INSTRUCTIONS                                    ***
***********************************************************************
EXECUTE2 MVC   AVTEZERO(AVTEZERO,R7),AVTUMALN(R6BUFF)
*                                       MOVE DATA TO WORK AREA
EXECUTE3 MVC   AVTUMALN(AVTEZERO,R14),AVTEZERO(R10DATA)
*                                       MOVE DATA TO BUFFER
***********************************************************************
***        CONSTANTS                                                ***
***********************************************************************
MINLNTH  DC    H'4'                     MIN DATA LNTH IN UNIT
WKPRFX   DC    H'6'                     WORK AREA PREFIX LNTH
SAVAREA  DS    18F                      SAVE AREA
RESRVS   DS    AL2                      NO OF RESERVES
UCNT     DC    AL1(1)                   UNIT COUNT
MAXUNIT  DC    AL1(255)                 MAX NO OF UNITS
         SPACE 2
***********************************************************************
         EJECT
***********************************************************************
***        DSECTS                                                   ***
***********************************************************************
         SPACE 2
***********************************************************************
***            TPRFD  DSECT                                         ***
***********************************************************************
         SPACE 2
         TPRFD
         EJECT
***********************************************************************
***            TLCBD  DSECT                                         ***
***********************************************************************
         SPACE 2
         TLCBD
         EJECT
***********************************************************************
***            DCBD  DSECT                                          ***
***********************************************************************
         SPACE 2
         DCBD  DSORG=TX
         EJECT
***********************************************************************
***            TAVTD  DSECT                                         ***
***********************************************************************
         SPACE 2
         TAVTD
         EJECT                                                 @SA74041
         TSCBD                                                 @SA74041
         END
