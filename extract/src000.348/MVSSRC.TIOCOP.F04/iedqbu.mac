IEDQBU   TITLE '''IEDQBU'' - CANCEL BLOCK'
IEDQBU   CSECT
***********************************************************************
*TITLE   'IEDQBU'  CANCEL BLOCK
*                                                                     *
*STATUS -- CHANGE LEVEL 0                                             *
*                                                                     *
*FUNCTION -- WHEN TEXT ERRORS OCCUR ON THOSE LINES WHICH HAVE         *
*   MID-BATCH CAPABILITY CANCEL BLOCK WILL PERFORM VARIOUS            *
*   FUNCTIONS DEPENDING UPON THE OCCURENCE OF A PREVIOUS              *
*   GOOD EOB IN THIS MESSAGE, THE LOCATION OF THE BAD EOB IN          *
*   THE BUFFER, AND THE AMOUNT OF DATA BETWEEN THE EOB'S.             *
*   FOR THOSE LINES WHICH HAVE NOT SPECIFIED MID-BATCH CANCEL         *
*   BLOCK WILL PERFORM ESSENTIALLY THE SAME FUNCTIONS AS              *
*                   CANCEL MESSAGE.                                   *
*                                                                     *
*ENTRY POINTS -- IEDQBU - CANCEL BLOCK                                *
*   CALLING SEQUENCE -   LA   R12,IEDQAR                              *
*                        BR   R12                                     *
*                                                                     *
*INPUT -- IEDQBU IS CALLED BY BUFFER DISPOSITION (IEDQBD)             *
*   WITH THE FOLLOWING REGISTERS INITIALIZED                          *
*   R4 HAS THE LCB ADDRESS                                            *
*   R3 HAS THE SCB ADDRESS                                            *
*   R11 HAS THE DISPATCHER ADDRESS                                    *
*   R12 HAS THE ENTRY POINT ADDRESS                                   *
*   R13 HAS THE AVT SAVE2 ADDRESS                                     *
*   R1 HAS THE ADDRESS OF A LIST OF ELEMENTS TO BE POSTED             *
*                                                                     *
*EXTERNAL ROUTINES -- DISPATCHER CHAIN FUNCTION - PLACES THE          *
*   CHAIN OF ELEMENTS ON THE READY QUEUE.                             *
*                                                                     *
*EXITS-NORMAL -- TO THE DISPATCHER AT CHAIN                           *
*                                                                     *
*EXITS-ERROR  --  NONE                                                *
*                                                                     *
*TABLES/WORKAREAS -- AVT,LCB,SCB                                      *
*                                                                     *
*ATTRIBUTES -- REUSABLE, REFRESHABLE, ENABLED, RESIDENT               *
*                                                                     *
*NOTES -- THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A         *
*   PARTICULAR INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER      *
*   SET.                                                              *
*CHANGE ACTIVITY = AS FOLLOWS:
******************** MICROFICHE FLAGS *********************** SUPT CODE
*C253200                                                       @YA04395
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                             *
*                  REGISTER EQUATES                           *
*                                                             *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
R0       EQU   0
R1       EQU   1                        PARAMETER REG
R2       EQU   2                        WORK REGISTER
RSCB     EQU   3                        SCB ADDRESS
RLCB     EQU   4                        LCB ADDRESS
RPRF     EQU   5                        POST LIST ADDRESS
R6       EQU   6                        WORK REGISTER
RQCB     EQU   7                        QCB ADDRESS
R8       EQU   8                        WORK REGISTER
R9       EQU   9                        WORK REGISTER
R10      EQU   10                       WORK REGISTER
RDSP     EQU   11                       DISPATCHER BASE
RBASE    EQU   12                       BASE REG
RAVT     EQU   13                       AVT SAVE2 BASE
R14      EQU   14
R15      EQU   15
         SPACE 1
         USING IEDQLCB,RLCB             LCB DSECT
         USING IEDQPRF,RPRF             PREFIX DSECT
         USING IEDQSCB,RSCB
         USING IEDQAVTD,RAVT
         USING IEDQDISP,RDSP
         USING *,RBASE
         SPACE 1
START    EQU   *
IEDQBU   IEDHJN TAG                     GENERATE MODULE ID AND DATE
         ST    R1,LCBERBLK-1            ADD THE ERB TO THE POST
*                                         LIST
         LR    RPRF,R1                  COPY THE ADDRESS OF THE
*                                         POST LIST
         SR    R10,R10                  CLEAR A REGISTER FOR THE
*                                         PREVIOUS ELEMENT
         ST    R10,AVTPARM              CLEAR THE LINK FIELD
         ST    R10,AVTDOUBL             CLEAR WORK AREA
         SPACE 2
CHECK    EQU     *
         NC    PRFLINK(3),PRFLINK       LAST ELEM ON LIST
         BZ    MBCHECK                  YES, BRANCH
         LR    R10,RPRF                 COPY THE ADDRESS OF THE
*                                         PREVIOUS ELEMENT
         L      RPRF,PRFLINK-1          OF MSG - NO - GET NEXT ON
         B     CHECK                    GO CHECK NEXT ELEMENT
         EJECT
MBCHECK  EQU   *
         TM    SCBERR4,SCBSLCTN         ERROR DURING SELECTION
         BO    HAVEBFR                  YES, CANCEL MESSAGE
         SPACE 2
         TM    SCBERR4,SCBTXTTN         IS THIS A TEXT ERROR
         BZ    HAVEBFR                  NO, BRANCH               S22025
       SPACE 2
CHKMID   EQU   *
         TM    LCBSTAT1,LCBINITN        IS THIS AN INITIATE MODE
*                                         MESSAGE
         BO    HAVEBFR                  YES, DEFAULT TO A NORMAL
*                                         CANCELMSG
         L     R2,SCBDESTQ-1            GET THE ADDRESS OF THE
*                                         DESTINATION QUEUE
         LA    R9,AVTBFRTB              GET THE ADDRESS OF
*                                         BUFFER RETURN
         LA    R2,ZERO(R2)              CLEAR HIGH ORDER BYTE
         CLR   R2,R9                    IS THE DESTINATION THE
*                                         BUFFER RETURN QUEUE
         BE    HAVEBFR                  YES, BRANCH
         TM    QCBDSFLG-IEDQQCB(R2),QCBDISK   ANY DISK QUEUEING
         BZ    HAVEBFR                  NO, DEFAULT TO CANCELMG
*                                         PROCESSING
         TM    LCBSTAT2,LCBDIAL         IS THIS A DIAL LINE
         BZ    MIDBTEST                 NO, BRANCH
         TM    LCBSTAT2,LCBNEGRP       DO WE STILL HAVE A DIAL
*                                         CONNECTION
         BO    HAVEBFR                  NO, BRANCH
MIDBTEST EQU   *
         TM    SCBQTYPE,SCBBBFTM        IS MID-BATCH POSSIBLE ON
*                                         THIS LINE
         BZ    HAVEBFR                  NO, THEN DEFAULT TO
*                                         CANCELMG PROCESSING
         EJECT
         EJECT
         NC    SCBDEOB+1(THREE),SCBDEOB+1    HAS THERE BEEN A
*                                         PREVIOUS GOOD EOB
         BZ    HAVEBFR                  NO, BRANCH
         LA    RPRF,ZERO(RPRF)          CLEAR HIGH ORDER BYTE
         L     R9,SCBDEOB               GET THE LAST GOOD EOB
         LA    R9,ZERO(R9)              CLEAR HIGH ORDER BYTE
         SR    R8,R8                    CLEAR A WORK REGISTER
         CH    R8,SCBEOB                IS THERE ANY DATA IN THE
*                                         BUFFER
         BNE   SETEOB                   YES, BRANCH
         CLR   R9,RPRF                  DOES THE ERROR BUFFER
*                                         HAVE THE LAST GOOD EOB
         BNE   CURNTHDR                 NO, BRANCH
         TM    PRFSTAT1,PRFNHDRN        IS THIS A HEADER BUFFER
         BZ    HAVEBFR                  YES, BRANCH
         B     SETEOB
CURNTHDR EQU   *
         CLC   SCBDEOB+1(THREE),SCBDCHDR  IS THE BUFFER WITH THE
*                                         LAST GOOD EOB THE SAME
*                                         AS THE CURRENT HEADER
         BE    HAVEBFR                  YES, BRANCH
SETEOB   EQU   *
         MVI   SCBERR4,ZERO             CLEAR THE FOURTH SCB
*                                         ERROR BYTE
         NI    SCBERR3,X'FF'-SCBFORMN-SCBXCEPN TURN OFF THE    @YA04395
*                                         FORMAT ERROR AND UNIT
*                                         EXCEPTION BITS
*                                         EXCEPTION BIT
         MVI   LCBSENS0,ZERO            CLEAR THE FIRST LCB
*                                         SENSE BYTE
         OI    SCBQTYPE,SCBBFMM         TURN ON THE MIDDLE OF
*                                         MESSAGE BIT
         LA    R2,AVTINOUT              ADDRESS OF DUMMY INEND/
*                                         OUTEND
         IC    R0,SCBMBHEN-1            SAVE THE HIGH ORDER BYTE
         ST    R2,SCBMBHEN-1            PREVENT A MULTIPLE -
*                                         BUFFERED HEADER
         STC   R0,SCBMBHEN-1            RESTORE HIGH ORDER BYTE
         CH    R8,SCBEOB                IS THERE ANY DATA IN THE
*                                         BUFFER
         BNE   TESTSAME                 YES, BRANCH
         CLR   RPRF,R9                  ERROR BUFFER CONTAIN EOB
         BNE   RESET                    NO, BRANCH
         SPACE 1
         LA    R2,AVTBFRTB              BUFFER RETURN
         ST    R2,PRFQCBA-1             SET DESTINATION QCB
         B     DSPERB                   POST LIST
         EJECT
TESTSAME EQU   *
         CLR   RPRF,R9                  IS THE START OF THE
*                                         ERROR BUFFER THE LAST
*                                         GOOD EOB
         BNE   RESET                    NO, BRANCH
         MVC   PRFSIZE,SCBEOB           POST THE GOOD DATA TO
*                                         THE DESTINATION QUEUE
         SR    R14,R14                  CLEAR FOR COMPARE
         IC    R14,PRFSCAN              PRFSCAN FOR COMPARE
         CH    R14,PRFSIZE              IS PRFSCAN LARGER THAN
*                                         PRFSIZE
         BNH   CLREOB1                  NO, BRANCH
         LH    R9,SCBEOB                GET THE NUMBER OF BYTES
*                                         OF GOOD DATA
         LA    R9,ONE(R9)               INCREMENT BY ONE
         STC   R9,PRFSCAN               RESET THE SCAN POINTER
CLREOB1  EQU   *
         XC    SCBEOB,SCBEOB            CLEAR EOB TO MAINTAIN
*                                         THE INTEGRITY OF THE
*                                         EOB OFFSET FOR LMD AND
*                                         CONCENTRATOR
         OI    PRFSTAT1,PRFNLSTN        SET  BUFFER AS NOT LAST
         B     DSPERB                   POST ELEMETN LIST
         EJECT
RESET    EQU   *
         XC    LCBERBLK(THREE),LCBERBLK REMOVE THE ERROR BLOCK
*                                         FROM THE POST LIST
         LTR   R10,R10                  WAS THERE A PREVIOUS
*                                         ELEMENT
         BZ    SAVERROR                 NO, BRANCH
         ST    R1,LCBERBLK-1            CHAIN THE POST LIST OFF
*                                         THE ERB
         XC    PRFLINK-IEDQPRF(THREE,R10),PRFLINK-IEDQPRF(R10)
*                                       CLEAR THE LINK FIELD OF
*                                         THE PREVIOUS ELEMENT
SAVERROR EQU   *
         ST    RPRF,LCBERCCW            SAVE THE ADDRESS OF THE
*                                         ERROR BUFFER
*                                         THE RECALL
         MVC   PRFQCBA(SEVEN),SCBDNSEG  SAVE DNSEG AND CLSEG IN
*                                         THE ERROR BUFFER
         EJECT
RECALL   EQU   *
         XC    SCBNTXT,SCBNTXT          CLEAR NEXT TEXT ADDRESS
         XC    SCBXTRA,SCBXTRA          CLEAR NEXT UNIT ADDRESS
         MVI   SCBDEOB,AVTEZERO         CLEAR INSERT OFFSET
         OI    LCBSTAT1,LCBRCLLN        SET THE RECALL BIT
         MVI   LCBERBST,ZERO            CLEAR THE ERB STATE
         MVC   LCBLINK-1(FOUR),SCBDEOB  SAVE DEOB DURING THE
*                                         RECALL
         MVI   LCBERBPY,PRIRECAL        SET THE RECALL PRIORITY
         LA    R2,D256                  REQUEST ONE BUFFER FOR
         STH   R2,LCBERBCT              SET THE ERB COUNT FIELD
         LA    R8,RECALQCB              ADDRESS OF THE QCB TO
*                                         WHICH THE RECALLED
*                                         BUFFER WILL BE POSTED
         ST    R8,LCBRCQCB              SET THE RECALL ADDRESS
         XC    LCBERBCH(THREE),LCBERBCH CLEAR FOR THE RECALLED
*                                         BUFFER ADDRESS
         LA    R2,AVTDSIOB              ADDRESS OF DISK I/O QCB
         B     POSTERB                  POST ERB AND BUFFERS
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                             *
*        THE RECALLED BUFFER WILL BE POSTED TO THIS QCB       *
*                                                             *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         DS    0F
RECALQCB EQU   *-8
         DC    AL1(DSPMCPL4),AL3(*-1)   STCB THAT GETS CONTROL WHEN
*                                       BUFFER RECALLED
         SPACE 2
BUFPOST  EQU   *
         USING *,R15
         L     RBASE,BASE               SET ADDRESSABILITY
         DROP  R15
         USING START,RBASE
         SPACE 2
         LA    R0,LCBERB-IEDQLCB        GET THE ERB OFFSET
         SR    R1,R0                    COMPUTE THE LCB ADDRESS
         LR    RLCB,R1                  SET LCB BASE REGISTER
         L     RSCB,LCBSCBA-1           SET SCB BASE REGISTER
         MVC   SCBUNTCT,SCBDEOB         RESTORE THE UNIT COUNT
         MVC   SCBDEOB,LCBLINK-1        RESET SCBDEOB
         L     RPRF,LCBERBCH-1          LOAD THE ADDRESS OF THE
*                                         RECALLED BUFFER
         TM    PRFSTAT1,PRFNHDRN        IS THIS A HEADER BUFFER
         BO    RESETLCB                 NO, BRANCH
         SR    R8,R8                    CLEAR A WORK REGISTER
         CH    R8,SCBEOB                IS THERE ANY DATA IN THE
*                                         BUFFER
         BE    HAVEBFR                  NO, BRANCH
RESETLCB EQU   *
         NI    LCBERBST,LCBEOMSG        RESET STATUS EXCEPT FOR
*                                         EOM
         OI    LCBERBST,LCBDLNKN        MARK THE ERB POSTABLE
         NI    PRFSTAT1,AVTEFF-PRFDUPLN RESET THE DUPLICATE BIT
         NI    LCBSTAT1,AVTEFF-LCBRCLLN RESET THE RECALL FLAG
         XC    AVTPARM,AVTPARM          CLEAR POST LIST POINTER
         L     R2,SCBDESTQ-1            GET THE DESTINATION
*                                         QUEUE ADDRESS
         MVZ   SCBQTYPE,QCBDSFLG-IEDQQCB(R2) RESTORE QTYPE
         TM    SCBQTYPE,SCBREUS+SCBNREUS     ANY IDSK QUEUEING
         BZ    NODISK                   NO, BRANCH
         XI    SCBQTYPE,SCBREUS+SCBNREUS     BITS ARE REVERSED
NODISK   EQU   *
         L     R15,LCBERCCW             GET THE ADDRESS OF THE
*                                         ERROR BLOCK
         MVC   SCBDNSEG(SEVEN),PRFQCBA-IEDQPRF(R15)
*                                       RESTORE DNSEG AND CLSEG
         MVI   PRFPRI,PRIDESTQ-1        SET THE POST PRIORITY
         TM    PRFSTAT1,PRFNHDRN        IS THE RECALLED BUFFER
*                                         A HEADER
         BO    HDROK                    NO, BRANCH
         MVC   PRFSIZE,SCBEOB           ADJUST PRFSIZE TO THE
*                                         LAST GOOD EOB
         SR    R14,R14                  CLEAR FOR COMPARE
         IC    R14,PRFSCAN              PRFSCAN FOR COMPARE
         CH    R14,PRFSIZE              IS PRFSCAN LARGER THAN
*                                         PRFSIZE
         BNH   CLREOB2                  NO, BRANCH
         LH    R9,SCBEOB                GET THE NUMBER OF BYTES
*                                         OF GOOD DATA
         LA    R9,ONE(R9)               INCREMENT BY ONE
         STC   R9,PRFSCAN               RESET THE SCAN POINTER
CLREOB2  EQU   *
         XC    SCBEOB,SCBEOB            CLEAR EOB TO MAINTAIN
*                                         THE INTEGRITY OF THE
*                                         EOB OFFSET FOR LMD AND
*                                         CONCENTRATOR
         BAL   R14,POSTLIST             BRANCH TO LIST ROUTINE
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                             *
*        THE LAST GOOD EOB WAS IN THE HEADER BUFFER           *
*        WE WANT TO CANCEL THE MESSAGE AND POST THE           *
*        RECALLED BUFFER BACK TO THE DESTINATION              *
*        QUEUE WITH PRFSIZE ADJUSTED TO REFLECT THE           *
*                       CHECKED DATA                          *
*                                                             *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         LR    RPRF,R15                 COPY THE ADDRESS OF THE
*                                         HEADER BUFFER TO BE
*                                         CANCELED
         MVI   PRFSTAT1,PRFCNCLN+PRFNHDRN    SET THE
*                                         STATUS TO CANCEL THE
*                                         ERROR BLOCK
         MVI   PRFPRI,PRIBFRTB          SET THE PRIORITY
         BAL   R14,POSTLIST             ADD TO POST LIST
POSTALL  EQU   *
         ST    RPRF,LCBERBLK-1          ADD TO ERB
         B     DSPERB                   EXIT TO POST ERB AND
*                                         BUFFERS
         EJECT
HDROK    EQU   *
         MVI   AVTDOUBL,ZERO            CLEAR FOR LATER TEST
         L     R9,SCBCCHDR-1            LOAD THE ADDRESS OF THE
*                                         CURRENT CORE HEADER
         MVC   SCBDNSEG,PRFCRCD         SET DNSEG TO THE LAST
*                                         GOOD EOB
         TM    SCBQTYPE,SCBCOREQ        CORE QUEUEING
         BZ    ERRPOST                  NO, BRANCH
         TM    PRFKEY-IEDQPRF(R9),COPYLOST   HAS THE CORE COPY
*                                         BEEN LOST
         BO    ERRPOST                  YES, BRANCH
         TM    SCBERR3,SCBLOSTN         LOST FROMCORE QUEUE
         BO    ERRPOST                  BRANCH IF YES
*
NXTBFRA  EQU   *
         CLC   PRFCRCD,PRFCRCD-IEDQPRF(R9)   IS THE CURRENT
*                                         RECORD POINTER OF THE
*                                         RECALLED BUFFER EQUAL
*                                         TO THE CURRENT RECORD
*                                         POINTER OF THE CURRENT
*                                         CORE HEADER
         BE    NEXTBUFR                 YES, BRANCH
         MVC   SCBCLSEG(THREE),PRFCORE-IEDQPRF(R9)    GET THE
*                                         LAST BUFFER ADDRESS
         MVC   AVTDOUBL+1(THREE),PRFNTXT-IEDQPRF(R9)  SET UP THE
*                                         NEXT BUFFER ADDRESS
         L     R9,AVTDOUBL              GET IT FROM THE SCRATCH
*                                         AREA
         B     NXTBFRA                  DO THE COMPARE AGAIN
         SPACE 2
NEXTBUFR EQU   *
         L     R9,SCBCLSEG-1            GET THE ADDRESS OF THE
*                                         LAST BUFFER IN THE QUE
         MVC   AVTDOUBL+1(THREE),PRFNTXT-IEDQPRF(R9)  MOVE THE
*                                         ADDRESS OF THE NEXT
*                                         BUFR TO A WORD BOUNDRY
         L     R10,AVTDOUBL             ADDRESS OF THE NEXT BUFR
         XC    PRFNTXT-IEDQPRF(THREE,R9),PRFNTXT-IEDQPRF(R9)
*                                       CLEAR THE NEXT BUFFER
*                                       ADDRESS TO INDICATE THE
*                                       END OF THE POST LIST
         SR    R0,R0                    CLEAR A COUNT REGISTER
         LR    RPRF,R10                 SAVE THE BUFFER ADDRESS
NXTBUFER EQU   *
         LR    R6,R10                   COPY THE BUFFER ADDRESS
         SR    R8,R8                    CLEAR A COUNT REGISTER
         IC    R8,PRFNBUNT-IEDQPRF(R10) NUMBER OF UNITS/BUFFER
         AR    R0,R8                    KEEP A TOTAL UNIT COUNT
         BAL   R14,NXTUNIT              DECREMENT THE UNIT COUNT
         SPACE 2
         L     R10,PRFTIC-IEDQPRF(R10)  GET THE NEXT UNIT ADDR
NXTUNIT  EQU   *
         BCTR  R8,R14                   LOOP THRU A BUFFER
         SPACE 2
         MVC   AVTDOUBL+1(THREE),PRFNTXT-IEDQPRF(R6)
*                                       MOVE NEXT BUFFER ADDRESS
*                                         FROM THIS BUFFER
         MVC   PRFTIC+1-IEDQPRF(THREE,R10),AVTDOUBL+1
*                                       CHAIN THE NEXT BUFFER TO
*                                       THE LAST UNIT OF THE
*                                       PREVIOUS BUFFER
         L     R10,AVTDOUBL             GET THE ADDRESS OF THE
*                                         NEXT BUFFER
         LTR   R10,R10                  IS THIS THE END OF THE
*                                         BUFFER CHAIN
         BNZ   NXTBUFER                 NO, BRANCH
         EJECT
         STC   R0,PRFNBUNT-IEDQPRF(RPRF)  TOTAL NUMBER OF UNITS
*                                         TO BE FREED
         L     R2,AVTCADDR              GET THE COUNT OF         S22025
*                                         AVAILABLE MSUNITS      S22025
         SR    R2,R0                    SUBTRACT THE UNITS TO BE S22025
*                                         FREED                  S22025
         ST    R2,AVTCADDR              RESTORE THE COUNT OF     S22025
*                                         AVAILABLE MSUNITS      S22025
         LA    R2,AVTBFRTB              ADDRESS OF BUFFER RETURN S22025
         MVI   PRFPRI,PRIBFRTB          SET THE POST PRIORITY
         BAL   R14,POSTLIST             ADD THE BUFFERS TO THE
*                                         POST LIST
ERRPOST  EQU   *
         L     RPRF,LCBERBCH-1          GET THE ADDRESS OF THE
*                                         RECALLED BUFFER
         MVI   PRFPRI,PRIDESTQ          SET THE POST PRIORITY
         L     R2,SCBDESTQ-1            ADDRESS OF THE
*                                         DESTINATION QUEUE
         MVC   PRFSIZE(TWO),SCBEOB      SET THE PRFSIZE TO
*                                         REFLECT THE GOOD DATA
         SR    R14,R14                  CLEAR FOR COMPARE
         IC    R14,PRFSCAN              PRFSCAN FOR COMPARE
         CH    R14,PRFSIZE              IS PRFSCAN LARGER THAN
*                                         PRFSIZE
         BNH   CLREOB3                  NO, BRANCH
         LH    R9,SCBEOB                GET THE NUMBER OF BYTES
*                                         OF GOOD DATA
         LA    R9,ONE(R9)               INCREMENT BY ONE
         STC   R9,PRFSCAN               RESET THE SCAN POINTER
CLREOB3  EQU   *
         SR    R8,R8                    CLEAR WORK REGISTER
         CH    R8,SCBEOB                IS THERE ANY DATA IN THE
*                                         BUFFER
         STH   R8,SCBEOB                CLEAR EOB TO MAINTAIN
*                                         THE INTEGRITY OF THE
*                                         EOB OFFSET FOR LMD AND
*                                         CONCENTRATOR
         BNE   POSTBUF                  YES, BRANCH
SETBFRTB EQU   *
         LA    R2,AVTBFRTB              GET THE ADDRESS OF
*                                         BUFFER RETURN
POSTBUF  EQU   *
         ST    R2,PRFQCBA-1             SET DESTINATION QCB
         MVI   PRFPRI,PRIDESTQ          SET PRIORITY
         BAL   R14,POSTLIST             ADD TO POSTLIST
         SPACE 1
         L     RPRF,LCBERCCW            GET BUFER SAVED OVER
*                                         THE RECALL
         LA    R2,AVTBFRTB              BUFFER RETURN
         MVI   PRFPRI,PRIBFRTB          SET PRIORITY
         BAL   R14,POSTLIST             ADD TO POSTLIST
         SPACE 1
         B     POSTALL                  COMMON EXIT
         EJECT
HAVEBFR  EQU  *
         OI    PRFSTAT1,PRFCNCLN
         NI    SCBSTATE,X'FF'-SCBCKPT   STOP CHECKPOINT
         ST    R0,SCBMRFSD              R0 HAS ZERO WHEN ENTERED,
         SPACE 2
*        THIS STORE WILL STOP DISTRIBUTION LISTS              *
*                AND MULTIPLE ROUTES                          *
         SPACE 2
RETURN   EQU   *
         TM    SCBSTATE,SCBSEQIN        HAS SEQ NO BEEN DONE
         BNO   RETURNA                  BR NO
         NI    SCBSTATE,X'FF'-SCBSEQIN  RESET
         LH    R1,PRFSRCE               OFFSET TO SRCE TNT
         N     R1,AVTCLRHI              CLEAR HIGH HALF
         L     R15,AVTRNMPT             ADDR OF CODE
         BALR  R14,R15                  FIND TERMINAL ENTRY
         USING  IEDQTRM,R1
         LH    R14,TRMINSEQ             INPUT SEQ NO
         BCT   R14,SETSEQ               ADJUST SEQUENCE NUMBER
         LH    R14,DC9999               SET WRAPPED VALUE
SETSEQ   EQU   *
         STH   R14,TRMINSEQ             SET NEW VALUE
RETURNA  EQU   *
         TM    SCBSTATE,SCBLCK1N+SCBMSGLN   LOCK
         BZ    POSTBACK                 NO, BRANCH               S22025
         BM    EXTLOCK                  BR IF EXTENDED LOCK
         NI    SCBSTATE,AVTEFF-(SCBMSGLN+SCBLCK1N)
*       IF THIS IS MSG LOCK - RESET ALL LOCK FLAGS
EXTLOCK EQU   *
         MVI   LCBINSRC+2,AVTEZERO      RESET FLAGS FOR BD TO POS
         NI    LCBSTAT1,X'FF'-LCBRECVN  SET FOR SCH TO REPOLL
POSTBACK EQU   *                                                 S22025
         LR    R1,RPRF                  COPY THE POST LIST       S22025
         L     R2,AVTMSGS-1             GET VCON TABLE ADDRESS   S22025
         L     R2,0(,R2)                GET ADDRESS OF IEDQBD    S22025
         ST    R2,PRFQCBA-1             SET THE QCB ADDRESS      S22025
         MVI   PRFPRI,PRIRCQCB          SET THE POST PRIORITY    S22025
         BAL   R14,DSPPOST              EXIT TO THE DISPATCHER @Y17XAMA
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                             *
*        THIS SECTION OF CODE WILL INITIALIZE THE ERB         *
*        PRIOR TO POSTING IT BACK TO BUFFER DISPOSITION       *
*                                                             *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DSPERB   EQU   *
         MVI   LCBERBPY,PRIRCQCB        SET THE PRIORITY
         L     R2,AVTMSGS-1             GET THE ADDRESS OF THE
*                                         VCON LIST
         L     R2,AVTEZERO(,R2)         GET THE ADDRESS OF THE
*                                         BUFFER DISPOSITION QCB
POSTERB  EQU   *
         ST    R2,LCBERBQB-1            POST THE ERB
         LA    R1,LCBERB                GET THE ERB ADDRESS
         BAL   R14,DSPCHAIN             EXIT TO THE DISPATCHER @Y17XAMA
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                             *
*        THIS SECTION OF CODE WILL CHAIN AN ELEMENT           *
*        INTO A LIST OF ELEMENTS THAT ARE TO BE POSTED        *
*                  TO THE READY QUEUE                         *
*                                                             *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
POSTLIST EQU   *
         ST    R2,PRFQCBA-1             PUT DESTINATION QUEUE
*                                         ADDRESS IN THE ELEMENT
         MVC   PRFLINK(THREE),AVTPARM+1 LINK THE PREVIOUS
*                                         ELEMENT TO THE CURRENT
         ST    RPRF,AVTPARM             SAVE THE ELEMENT ADDRESS
         BR    R14                      RETURN
         EJECT
BASE     DC    A(START)                 MODULE BASE ADDR
DC9999   DC    H'9999'                  SEQ NUMBER WRAP
ZERO     EQU   0
ONE      EQU   1
TWO      EQU   2
THREE    EQU   3
FOUR     EQU   4
SEVEN    EQU   7
D256     EQU   256
COPYLOST EQU   X'10'
DIAL     EQU   X'18'
         EJECT
         TAVTD  2
         EJECT
         TQCBD
         TTRMD
         TPRFD
         TLCBD
         TSCBD
         TPRIOR
         TDISPD
         END
