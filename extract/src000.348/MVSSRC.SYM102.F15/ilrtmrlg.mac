         TITLE 'ILRTMRLG - TASK MODE RELEASE LOGICAL GROUP             *
                        '
ILRTMRLG CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ILRTMRLG  76.315'                                 0001
         DROP  @15
@PROLOG  BALR  @10,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@10                                         0001
STRTPGM@ EQU   @PSTART
*   SMSIECB@=MSIECB@;               /* SAVE ADDRESS OF MSI'S ECB     */
         L     SMSIECB@,MSIECB@(,R1)                               0050
         LA    SMSIECB@,0(,SMSIECB@)                               0050
*   RFY                                                            0051
*    (R1) UNRSTD;                                                  0051
         EJECT
*                                                                  0052
*/********************************************************************/
*/********************************************************************/
*/*     ESTABLISH A WORKAREA                                         */
*/********************************************************************/
*/********************************************************************/
*                                                                  0052
*   /*****************************************************************/
*   /*                                                               */
*   /* OBTAIN STORAGE FROM LSQA (SUBPOOL 255) FOR A WORKAREA VIA     */
*   /* GETMAIN. NOTE THAT THE EPATH IS IN THE WORKAREA.              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0052
*   RFY                                                            0052
*    (R1) RSTD;                                                    0052
*   DO;                             /* GETMAIN (RU) LV(WKARLEN)    0053
*                                      SP(255)                       */
*     RESPECIFY                                                    0054
*      (GPR01F,                                                    0054
*       GPR15F,                                                    0054
*       GPR00F) RESTRICTED;                                        0054
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0055
*     GPR15F=2;                     /* RU-TYPE GETMAIN               */
         LA    GPR15F,2                                            0056
*     GPR00F=WKARLEN;               /* LENGTH REQUESTED              */
         L     GPR00F,WKARLEN                                      0057
*     GPR15F=GPR15F×((255)*256);    /* SP IN BYTE 2                  */
         O     GPR15F,@CF01446                                     0058
*     SVC(120);                     /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0059
*     RESPECIFY                                                    0060
*      (GPR01F,                                                    0060
*       GPR15F,                                                    0060
*       GPR00F) UNRESTRICTED;                                      0060
*   END;                            /* GETMAIN (RU) LV(WKARLEN)    0061
*                                      SP(255) USE GETMAIN TO OBTAIN
*                                      THE NEEDED STORAGE            */
*   WKARPTR=R1;                     /* OBTAIN POINTER TO ILRTMRLG'S
*                                      WORKAREA                      */
         LR    WKARPTR,R1                                          0062
*   RFY                                                            0063
*    (R1) UNRSTD;                                                  0063
*                                                                  0063
*   /*****************************************************************/
*   /*                                                               */
*   /* OBTAIN A POINTER TO THE ASM VECTOR TABLE (ASMVT).             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0064
*   ASMVTPTR=CVTASMVT;              /* OBTAIN POINTER TO ASMVT       */
         L     @12,CVTPTR                                          0064
         L     ASMVTPTR,CVTASMVT(,@12)                             0064
         EJECT
*                                                                  0065
*/********************************************************************/
*/********************************************************************/
*/*     ESTABLISH ADDRESSABILITY AND RECOVERY ENVIRONMENT            */
*/********************************************************************/
*/********************************************************************/
*                                                                  0065
*   /*****************************************************************/
*   /*                                                               */
*   /* ESTABLISH ADDRESSABILITY TO THE WORKAREA FOR ILRTMRLG. SET REG*/
*   /* 13 TO POINT TO ILRTMRLG'S SAVE AREA.                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0065
*   GEN;                                                           0065
         USING @DATD,WKARPTR     /* ESTABLISH ADDRESSABILITY TO       ''
                                    ILRTMRLG'S WORKAREA   */
*   R13=ADDR(TMRSA);                /* SET REG 13 TO ADDRESS OF    0066
*                                      ILRTMRLG'S SAVE AREA          */
*                                                                  0066
         LA    R13,TMRSA                                           0066
*   /*****************************************************************/
*   /*                                                               */
*   /* OBTAIN A POINTER TO THE EPATH AND THEN CLEAR IT               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0067
*   EPAPTR=ADDR(EPATH);             /* OBTAIN POINTER TO EPATH       */
         LA    EPAPTR,EPATH                                        0067
*   EPATH=EPATH&&EPATH;             /* CLEAR EPATH                   */
*                                                                  0068
         XC    EPATH(44),EPATH                                     0068
*   /*****************************************************************/
*   /*                                                               */
*   /* ESTABLISH RECOVERY ENVIRONMENT VIA AN ESTAE MACRO             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0069
*   RFY                                                            0069
*    (R7) RSTD;                                                    0069
*   ESTAELST(1:ESTAELEN)=ESTAEFMT(1:ESTAELEN);/* INITIALIZE ESTAE  0070
*                                      PARAMETER LIST                */
         L     @12,ESTAELEN                                        0070
         BCTR  @12,0                                               0070
         EX    @12,@SM01449                                        0070
*   R7=ADDR(ILRTMI01);              /* OBTAIN ENTRY POINT ADDRESS OF
*                                      ILRTMI01                      */
         L     R7,@CV01356                                         0071
*   GEN REFS(R7,EPAPTR);                                           0072
         ESTAE (7),PARAM=(EPAPTR),MF=(E,ESTAELST) /* ESTABLISH        ''
                                                          RECOVERY  */
*   RFY                                                            0073
*    (R7) UNRSTD;                                                  0073
*                                                                  0073
*   /*****************************************************************/
*   /*                                                               */
*   /* RECORD POINTERS INTO EPATH                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0074
*   EPAOWKA=WKARPTR;                /* RECORD POINTER TO WORKAREA IN
*                                      EPATH - RRR                   */
         ST    WKARPTR,EPAOWKA                                     0074
*   EPATMRSV=R13;                   /* RECORD ADDRESS OF ILRTMRLG'S
*                                      SAVE AREA IN EPATH - RRR      */
         ST    R13,EPATMRSV                                        0075
*   EPAMSECB=SMSIECB@;              /* RECORD ADDRESS OF MSI'S ECB IN
*                                      EPATH - RRR                   */
         ST    SMSIECB@,EPAMSECB                                   0076
         EJECT
*                                                                  0077
*/********************************************************************/
*/********************************************************************/
*/*     COMPLETE ASM INITIALIZATION                                  */
*/********************************************************************/
*/********************************************************************/
*                                                                  0077
*   /*****************************************************************/
*   /*                                                               */
*   /* CLEAR THE PARAMETER LIST FOR ILRVSAMI AND THEN FILL IN THE    */
*   /* CONSTANT FIELDS                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0077
*   PARMLIST=PARMLIST&&PARMLIST;    /* CLEAR PARAMETER LIST          */
         XC    PARMLIST(12),PARMLIST                               0077
*   PARMOPCD=OPCODE04;              /* SET REQUEST OP-CODE TO 04   0078
*                                      INDICATING A RETRIEVE AND   0078
*                                      ERASE FOR RELEASE             */
         MVI   PARMOPCD,X'04'                                      0078
*   PARMEPTH=EPAPTR;                /* STORE POINTER TO EPATH IN   0079
*                                      PARAMETER LIST                */
*                                                                  0079
         ST    EPAPTR,PARMEPTH                                     0079
*   /*****************************************************************/
*   /*                                                               */
*   /* SET CERTAIN FIELDS IN THE ASMVT                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0080
*   ASMPACT=ADDR(ILRACT);           /* ENTRY POINT ADDRESS OF ILRACT */
         L     @12,@CV01351                                        0080
         ST    @12,ASMPACT(,ASMVTPTR)                              0080
*   ASMPRLG=ADDR(ILRRLG);           /* ENTRY POINT ADDRESS OF ILRRLG */
         L     @12,@CV01353                                        0081
         ST    @12,ASMPRLG(,ASMVTPTR)                              0081
*   ASMPSAV=ADDR(ILRSAV);           /* ENTRY POINT ADDRESS OF ILRSAV */
         L     @12,@CV01354                                        0082
         ST    @12,ASMPSAV(,ASMVTPTR)                              0082
*   ASMTCBPT=PSATOLD;               /* ADDRESS OF CURRENT TCB        */
         L     @12,PSATOLD                                         0083
         ST    @12,ASMTCBPT(,ASMVTPTR)                             0083
*   ASMTASCB=PSAAOLD;               /* ADDRESS OF CURRENT ASCB       */
*                                                                  0084
         L     @12,PSAAOLD                                         0084
         ST    @12,ASMTASCB(,ASMVTPTR)                             0084
*   /*****************************************************************/
*   /*                                                               */
*   /* LOAD ILRTMI00, CALL ILRTMI00 IN ORDER TO COMPLETE ASM'S       */
*   /* INITIALIZATION AND THEN DELETE ILRTMI00                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0085
*   RFY                                                            0085
*    (R0,                                                          0085
*     R1) RSTD;                                                    0085
*   DO;                             /* LOAD EP('ILRTMI00')           */
*     RESPECIFY                                                    0087
*      (GPR00P,                                                    0087
*       GPR01P) RESTRICTED;                                        0087
*     GPR00P=ADDR('ILRTMI00');      /* LOAD ENTRY POINT NAME ADDRESS */
         LA    GPR00P,@CC01364                                     0088
*     GPR01P=0;                     /* JOBLIB OR LINKLIB DCB         */
         SLR   GPR01P,GPR01P                                       0089
*     SVC(8);                       /* ISSUE LOAD SVC                */
         SVC   8                                                   0090
*     RESPECIFY                                                    0091
*      (GPR00P,                                                    0091
*       GPR01P) UNRESTRICTED;                                      0091
*   END;                            /* LOAD EP('ILRTMI00') LOAD    0092
*                                      ILRTMI00 INTO STORAGE         */
*   RFY                                                            0093
*    (RETCODE,                                                     0093
*     TMIRTCD) RSTD;                                               0093
*   CALL ILRTMI00;                  /* COMPLETE ASM'S INITIALIZATION */
         LR    @15,R0                                              0094
         BALR  @14,@15                                             0094
*ILRCRTM5:                          /* RECOVERY RETRY POINT -- USED
*                                      SHOULD ILRTMI00 FAIL - RRR    */
*   EPATMXIT=ON;                    /* TURN ON THAT FLAG IN THE EPATH
*                                      THAT INDICATES THAT ILRTMI00
*                                      HAS COMPLETED - RRR           */
ILRCRTM5 OI    EPATMXIT,B'10000000'                                0095
*   TMIRTCD=RETCODE;                /* SAVE RETURN CODE FROM ILRTMI00*/
         LR    TMIRTCD,RETCODE                                     0096
*   RFY                                                            0097
*    (R0,                                                          0097
*     R1,                                                          0097
*     RETCODE) UNRSTD;                                             0097
*   DO;                             /* DELETE EP('ILRTMI00')         */
*     RESPECIFY                                                    0099
*      (GPR00P) RESTRICTED;                                        0099
*     GPR00P=ADDR('ILRTMI00');      /* ->ENTRY NAME                  */
         LA    GPR00P,@CC01364                                     0100
*     SVC(9);                       /* DELETE SVC                    */
         SVC   9                                                   0101
*     RESPECIFY                                                    0102
*      (GPR00P) UNRESTRICTED;                                      0102
*   END;                            /* DELETE EP('ILRTMI00') DELETE
*                                      ILRTMI00 FROM STORAGE         */
*                                                                  0103
*   /*****************************************************************/
*   /*                                                               */
*   /* SIGNAL THE MASTER SCHEDULER INITIALIZATION ROUTINE (MSI) THAT */
*   /* INITIALIZTION OF ASM HAS BEEN COMPLETED VIA THE POST MACRO    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0104
*   DO;                             /* POST (MSIECB,ZERO)            */
*     RESPECIFY                                                    0105
*      (GPR00F,                                                    0105
*       GPR01P) RESTRICTED;                                        0105
*     GPR00F=ZERO;                  /* POST CODE IN R0               */
         SLR   GPR00F,GPR00F                                       0106
*     GPR01P=ADDR(MSIECB);          /* ECB ADDRESS                   */
         LR    GPR01P,SMSIECB@                                     0107
*     SVC(2);                       /* ISSUE POST SVC                */
         SVC   2                                                   0108
*     RESPECIFY                                                    0109
*      (GPR00F,                                                    0109
*       GPR01P) UNRESTRICTED;                                      0109
*   END;                            /* POST (MSIECB,ZERO) POST MSI 0110
*                                      ROUTINE                       */
*   EPAMAST=ON;                     /* SET EPATH FLAG INDICATING   0111
*                                      M.S.I. HAS BEEN POSTED - RRR  */
         OI    EPAMAST,B'00001000'                                 0111
*   EPAMSECB=ZERO;                  /* ZERO THE EPATH FIELD        0112
*                                      CONTAINING THE ADDRESS OF   0112
*                                      MSI'S ECB - RRR               */
         SLR   @12,@12                                             0112
         ST    @12,EPAMSECB                                        0112
*   RFY                                                            0113
*    (SMSIECB@,                                                    0113
*     TMIRTCD) UNRSTD;                                             0113
         EJECT
*                                                                  0114
*/********************************************************************/
*/********************************************************************/
*/*     PROCESS THE REQUEST QUEUE WHEN POSTED BY ILRRLG              */
*/********************************************************************/
*/********************************************************************/
*                                                                  0114
*   /*****************************************************************/
*   /*                                                               */
*   /* ILRTMRLG ISSUES A WAIT ON ASMTMECB TO WAIT FOR WORK. ILRRLG   */
*   /* WILL PLACE AN ACE ON THE REQUEST QUEUE AND THEN POST ASMTMECB.*/
*   /* A COMPARE & SWAP IS USED TO MOVE THE REQUEST QUEUE TO THE WORK*/
*   /* QUEUE. ILRTMRLG WILL THEN PROCESS ALL THE ACE'S ON THE WORK   */
*   /* QUEUE. IF THE REQUEST QUEUE IS NOT EMPTY AFTER ALL THE ACE'S  */
*   /* ON THE WORK QUEUE HAVE BEEN PROCESSED, THEN COMPARE & SWAP IS */
*   /* USED AGAIN TO MOVE THE REQUEST QUEUE TO THE WORK QUEUE.       */
*   /* ILRTMRLG WILL CONTINUE TO PROCESS ALL THE ACE'S ON THE REQUEST*/
*   /* QUEUE. ONCE ALL THE INPUT ACE'S HAVE BEEN EXHAUSTED, ILRTMRLG */
*   /* WILL ISSUE ANOTHER WAIT ON ASMTMECB.                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0114
*   ASMTMECB=ZERO;                  /* ZERO OUT THE ASMTMECB         */
         ST    @12,ASMTMECB(,ASMVTPTR)                             0114
*   DO UNTIL(ZERO=ONE);             /* DO FOREVER                    */
@DL00115 DS    0H                                                  0116
*     DO;                           /* WAIT ECB(ASMTMECB)            */
*       RESPECIFY                                                  0117
*        (GPR00P,                                                  0117
*         GPR01P) RESTRICTED;                                      0117
*       GPR00P=1;                   /* LOAD WAIT COUNT               */
         LA    GPR00P,1                                            0118
*       GPR01P=ADDR(ASMTMECB);      /* ADDRESS OF ECB                */
         LA    GPR01P,ASMTMECB(,ASMVTPTR)                          0119
*       SVC(1);                     /* WAIT SVC                      */
         SVC   1                                                   0120
*       RESPECIFY                                                  0121
*        (GPR00P,                                                  0121
*         GPR01P) UNRESTRICTED;                                    0121
*     END;                          /* WAIT ECB(ASMTMECB) WAIT FOR 0122
*                                      WORK TO BE DONE               */
*     ASMTMECB=ZERO;                /* ZERO OUT THE ASMTMECB         */
*                                                                  0123
         SLR   @12,@12                                             0123
         ST    @12,ASMTMECB(,ASMVTPTR)                             0123
*     /***************************************************************/
*     /*                                                             */
*     /* CONTINUE TO PROCESS ALL THE ACE'S ON THE REQUEST QUEUE UNTIL*/
*     /* IT IS EMPTY                                                 */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0124
*     DO WHILE(ASMRLGRQ^=ZERO);                                    0124
*                                                                  0124
         B     @DE00124                                            0124
@DL00124 DS    0H                                                  0125
*       /*************************************************************/
*       /*                                                           */
*       /* COMPARE AND SWAP THE REQUEST QUEUE TO THE WORK QUEUE      */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0125
*       RFY                                                        0125
*        (R0,                                                      0125
*         R1) RSTD;                                                0125
*       R0=ASMRLGRQ;                /* GET POINTER TO FIRST ACE FROM
*                                      REQUEST QUEUE HEADER          */
         L     R0,ASMRLGRQ(,ASMVTPTR)                              0126
*TRYAGAIN:                                                         0127
*       R1=ZERO;                                                   0127
TRYAGAIN SLR   R1,R1                                               0127
*       CS(R0,R1,ASMRLGRQ);         /* SET REQUEST QUEUE EMPTY       */
         CS    R0,@01,ASMRLGRQ(ASMVTPTR)                           0128
*       BC(NE,TRYAGAIN);            /* IF UNSUCCESSFUL, TRY AGAIN    */
         BC    7,TRYAGAIN                                          0129
*       ASMRLGWQ=R0;                /* PUT POINTER TO FIRST ACE INTO
*                                      WORK QUEUE HEADER             */
         ST    R0,ASMRLGWQ(,ASMVTPTR)                              0130
*       RFY                                                        0131
*        (R0,                                                      0131
*         R1) UNRSTD;                                              0131
         EJECT
*                                                                  0132
*/********************************************************************/
*/********************************************************************/
*/*     PROCESS THE WORK QUEUE                                       */
*/********************************************************************/
*/********************************************************************/
*                                                                  0132
*       /*************************************************************/
*       /*                                                           */
*       /* PROCESS THE ACE'S ON THE WORK QUEUE                       */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0132
*ILRCRTM1:                          /* RECOVERY RETRY POINT -- USED
*                                      SHOULD ILRTMRLG FAIL - RRR    */
*       DO WHILE(ASMRLGWQ^=ZERO);                                  0132
ILRCRTM1 B     @DE00132                                            0132
@DL00132 DS    0H                                                  0133
*         RFY                                                      0133
*          (ACEPTR) RSTD;                                          0133
*                                                                  0133
*         /***********************************************************/
*         /*                                                         */
*         /* REMOVE AN ACE FROM WORK QUEUE HEADER AND RECORD THE     */
*         /* POINTER TO THE ACE IN THE EPATH                         */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0134
*         ACEPTR=ASMRLGWQ;          /* OBTAIN ADDRESS OF FIRST ACE ON
*                                      WORK QUEUE                    */
         L     ACEPTR,ASMRLGWQ(,ASMVTPTR)                          0134
*         ASMRLGWQ=ACEFQPA;         /* PLACE ADDRESS OF NEXT ACE INTO
*                                      WORK QUEUE HEADER             */
         L     @12,ACEFQPA(,ACEPTR)                                0135
         ST    @12,ASMRLGWQ(,ASMVTPTR)                             0135
*         EPAACE=ACEPTR;            /* RECORD ACE POINTER IN EPATH -
*                                      RRR                           */
*                                                                  0136
         ST    ACEPTR,EPAACE                                       0136
*         /***********************************************************/
*         /*                                                         */
*         /* PLACE A POINTER TO THE 'S' SYMBOL THAT IS IN THE ACE    */
*         /* INTO THE PARAMETER LIST FOR ILRVSAMI. CALL ILRVSAMI TO  */
*         /* RETRIEVE AND ERASE THE INFORMATION SAVED FOR THE LOGICAL*/
*         /* GROUP THAT IS REPRESENTED BY THE 'S' SYMBOL.            */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0137
*         PARMSYM=ADDR(ACESYM);     /* STORE POINTER TO 'S' SYMBOL IN
*                                      PARAMETER LIST                */
         LA    @12,ACESYM(,ACEPTR)                                 0137
         ST    @12,PARMSYM                                         0137
*         RFY                                                      0138
*          (R1,                                                    0138
*           RTASPCT@,                                              0138
*           RETCODE) RSTD;                                         0138
*         R1=ADDR(PARMLIST);        /* PLACE ADDRESS OF PARAMETER  0139
*                                      LIST INTO REG 1               */
         LA    R1,PARMLIST                                         0139
*         CALL ILRVSAMI;            /* RETRIEVE AND ERASE THE ASPCT
*                                      AND ITS EXTENSIONS FOR A    0140
*                                      RELEASE LOGICAL GROUP       0140
*                                      OPERATION                     */
         L     @15,@CV01357                                        0140
         BALR  @14,@15                                             0140
*         RFY                                                      0141
*          (R1) UNRSTD;                                            0141
         EJECT
*                                                                  0142
*/********************************************************************/
*/********************************************************************/
*/*    PROCESS ASPCT AND ITS EXTENSIONS IF RETRIEVED BY ILRVSAMI     */
*/********************************************************************/
*/********************************************************************/
*                                                                  0142
*         /***********************************************************/
*         /*                                                         */
*         /* IF AN ASPCT WAS RETRIEVED OR PARTIALLY RETRIEVED FROM   */
*         /* SYS1.STGINDEX,THEN (1) FREE THE SLOTS ASSOCIATED WITH   */
*         /* THE RETRIEVED ASPCT AND ITS EXTENSIONS AND (2) FREE THE */
*         /* BUFFERS CONTAINING THE RETRIEVED ASPCT AND ITS          */
*         /* EXTENSIONS. IF AN ASPCT WAS NOT RETRIEVED, JUST SIMPLY  */
*         /* RETURN THE ACE TO THE ACE POOL.                         */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0142
*         RFY                                                      0142
*          (ASPCTPTR) RSTD;                                        0142
*         IF RETCODE=RTCD0000×RETCODE=RTCD0048 THEN                0143
         LTR   RETCODE,RETCODE                                     0143
         BZ    @RT00143                                            0143
         C     RETCODE,@CF00241                                    0143
         BNE   @RF00143                                            0143
@RT00143 DS    0H                                                  0144
*           DO;                                                    0144
*                                                                  0144
*             /*******************************************************/
*             /*                                                     */
*             /* RELEASE THE SLOTS STILL ASSOCIATED WITH THE LOGICAL */
*             /* GROUP THAT IS REPRESENTED BY THE RETRIEVED ASPCT AND*/
*             /* ITS EXTENSIONS.                                     */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0145
*             RFY                                                  0145
*              (RETCODE) UNRSTD;                                   0145
*             ASPCTPTR=RTASPCT@;    /* SAVE THE POINTER TO THE     0146
*                                      RETRIEVED ASPCT               */
         LR    ASPCTPTR,RTASPCT@                                   0146
*             RFY                                                  0147
*              (RTASPCT@) UNRSTD;                                  0147
*             RFY                                                  0148
*              (R0) RSTD;                                          0148
*             FREESLOT=ZERO;        /* SET FREESLOT COUNTER TO ZERO  */
         SLR   @12,@12                                             0149
         ST    @12,FREESLOT                                        0149
*             R0=ASPCTPTR;          /* LOAD REG 0 WITH A POINTER TO
*                                      THE RETRIEVED ASPCT           */
         LR    R0,ASPCTPTR                                         0150
*             CALL ILRALS00;        /* CALL ILRALS00 TO RELEASE THE
*                                      SLOTS STILL ASSOCIATED WITH 0151
*                                      THE RETRIEVED ASPCT AND ITS 0151
*                                      EXTENSIONS. UPON RETURN, THE
*                                      FREESLOT COUNTER WILL CONTAIN
*                                      THE NUMBER OF SLOTS FREED.    */
*                                                                  0151
         BAL   @14,ILRALS00                                        0151
*             /*******************************************************/
*             /*                                                     */
*             /* USE COMPARE AND SWAP LOGIC TO DECREMENT THE ASMVT   */
*             /* VIO COUNT FIELD BY THE FREESLOT COUNTER.            */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0152
*             RFY                                                  0152
*              (R1) RSTD;                                          0152
*             R0=ASMVSC;            /* OBTAIN THE ASMVT VIO COUNT    */
         L     R0,ASMVSC(,ASMVTPTR)                                0153
*SETVSC:                                                           0154
*             R1=R0-FREESLOT;       /* DECREMENT COUNTER BY FREESLOT
*                                      COUNTER                       */
SETVSC   LR    R1,R0                                               0154
         SL    R1,FREESLOT                                         0154
*             CS(R0,R1,ASMVSC);     /* UPDATE ASMVT VIO COUNT FIELD  */
         CS    R0,@01,ASMVSC(ASMVTPTR)                             0155
*             BC(NE,SETVSC);        /* IF UNSUCCESSFUL, TRY AGAIN    */
*                                                                  0156
         BC    7,SETVSC                                            0156
*             /*******************************************************/
*             /*                                                     */
*             /* IF THE ASPCT THAT WAS RETRIEVED WAS NOT CURRENTLY   */
*             /* ACTIVE, INCREMENT THE ASMVT UNRESERVED SLOT COUNTER */
*             /* BY THE NUMBER OF SLOTS THAT WERE RESERVED FOR THAT  */
*             /* LOGICAL GROUP (I.E., THE LOGICAL GROUP REPRESENTED  */
*             /* BY THE RETRIEVED ASPCT AND ITS EXTENSIONS.          */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0157
*             IF ACENOACT=ON THEN                                  0157
         TM    ACENOACT(ACEPTR),B'00010000'                        0157
         BNO   @RF00157                                            0157
*               DO;                                                0158
*                 BACKSLOT=ASPMAXPN;/* SET BACKSLOT TO MAXIMUM NUMBER
*                                      OF SLOTS THAT COULD BE      0159
*                                      ALLOCATED TO THIS LOGICAL   0159
*                                      GROUP                         */
         L     BACKSLOT,ASPMAXPN(,ASPCTPTR)                        0159
*                 IF SLOTV^=ZERO THEN                              0160
         L     @12,ASMSLOTV(,ASMVTPTR)                             0160
         L     @12,SLOTV(,@12)                                     0160
         LTR   @12,@12                                             0160
         BZ    @RF00160                                            0160
*                   BACKSLOT=BACKSLOT/SLOTV;/* SET BACKSLOT TO THE 0161
*                                      NUMBER OF SLOTS THAT WERE   0161
*                                      RESERVED FOR THIS LOGICAL   0161
*                                      GROUP                         */
         LR    @14,BACKSLOT                                        0161
         SRDA  @14,32                                              0161
         DR    @14,@12                                             0161
         LR    BACKSLOT,@15                                        0161
*                 R0=ASMBKSLT;      /* OBTAIN ASMVT UNRESERVED SLOT
*                                      COUNTER                       */
@RF00160 L     R0,ASMBKSLT(,ASMVTPTR)                              0162
*SETBKSLT:                                                         0163
*                 R1=R0+BACKSLOT;   /* INCREMENT COUNTER BY BACKSLOT
*                                      COUNTER                       */
SETBKSLT LR    R1,R0                                               0163
         ALR   R1,BACKSLOT                                         0163
*                 CS(R0,R1,ASMBKSLT);/* UPDATE ASMVT UNRESERVED SLOT
*                                      COUNT FIELD                   */
         CS    R0,@01,ASMBKSLT(ASMVTPTR)                           0164
*                 BC(NE,SETBKSLT);  /* IF UNSUCCESFFUL, TRY AGAIN    */
         BC    7,SETBKSLT                                          0165
*               END;                                               0166
*             RFY                                                  0167
*              (R0,                                                0167
*               R1) UNRSTD;                                        0167
@RF00157 DS    0H                                                  0168
         EJECT
*                                                                  0168
*/********************************************************************/
*/********************************************************************/
*/*    FREE BUFFERS CONTAINING RETRIEVED ASPCT AND ITS EXTENSIONS    */
*/********************************************************************/
*/********************************************************************/
*                                                                  0168
*             /*******************************************************/
*             /*                                                     */
*             /* OBTAIN THE LOCAL LOCK UNCONDITIONALLY               */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0168
*             RFY                                                  0168
*              (R11,                                               0168
*               R12,                                               0168
*               R14) RSTD;                                         0168
*             GEN REFS(PSALITA) SETS(R11,R12,R13,R14);             0169
GETLCL1  SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                       XX
               RELATED=(FREEMAIN,ILRTMRLG(RLSLCL1))
*             R13=ADDR(TMRSA);      /* RESTORE REG 13 WITH THE     0170
*                                      ADDRESS OF ILRTMRLG'S SAVE  0170
*                                      AREA                          */
         LA    R13,TMRSA                                           0170
*             RFY                                                  0171
*              (R11,                                               0171
*               R12,                                               0171
*               R14) UNRSTD;                                       0171
*                                                                  0171
*             /*******************************************************/
*             /*                                                     */
*             /* FREE THE BUFFERS USED TO CONTAIN THE ASPCT, ASST    */
*             /* EXTENSIONS, AND LPME EXTENSIONS                     */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0172
*             RFY                                                  0172
*              (R0,                                                0172
*               R1,                                                0172
*               RETCODE,                                           0172
*               AFSRTCD) RSTD;                                     0172
*             EPARASP=ZERO;         /* ZERO THE EPATH POINTER TO THE
*                                      RETRIEVED ASPCT - RRR         */
         SLR   @14,@14                                             0173
         ST    @14,EPARASP                                         0173
*             R0=BUFLEN;            /* LOAD REG 0 WITH BUFFER LENGTH */
         LA    R0,2048                                             0174
*             R1=ASPCTPTR;          /* LOAD REG 1 WITH A POINTER TO
*                                      THE RETRIEVED ASPCT           */
         LR    R1,ASPCTPTR                                         0175
*             CALL ILRAFS00;        /* FREE THE ASPCT BUFFERS        */
         BAL   @14,ILRAFS00                                        0176
*             AFSRTCD=RETCODE;      /* SAVE THE RETURN CODE          */
         LR    AFSRTCD,RETCODE                                     0177
*             RFY                                                  0178
*              (R0,                                                0178
*               R1,                                                0178
*               ASPCTPTR,                                          0178
*               RETCODE) UNRSTD;                                   0178
*                                                                  0178
*             /*******************************************************/
*             /*                                                     */
*             /* RELEASE THE LOCAL LOCK                              */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0179
*             RFY                                                  0179
*              (R11,                                               0179
*               R12,                                               0179
*               R14) RSTD;                                         0179
*             GEN REFS(PSALITA) SETS(R11,R12,R13,R14);             0180
RLSLCL1  SETLOCK RELEASE,TYPE=LOCAL,                                  XX
               RELATED=(FREEMAIN,ILRTMRLG(GETLCL1))
*             R13=ADDR(TMRSA);      /* RESTORE REG 13 WITH THE     0181
*                                      ADDRESS OF ILRTMRLG'S SAVE  0181
*                                      AREA                          */
         LA    R13,TMRSA                                           0181
*             RFY                                                  0182
*              (R11,                                               0182
*               R12,                                               0182
*               R14) UNRSTD;                                       0182
*                                                                  0182
*             /*******************************************************/
*             /*                                                     */
*             /* IF A FREEMAIN ERROR OCCCURED IN ILRAFS00, THEN ISSUE*/
*             /* AN ABEND 087                                        */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0183
*             IF AFSRTCD^=RTCD0000 THEN                            0183
         LTR   AFSRTCD,AFSRTCD                                     0183
         BZ    @RF00183                                            0183
*               DO;                                                0184
*                 RFY                                              0185
*                  (AFSRTCD) UNRSTD;                               0185
*                 EPARTYRG=ADDR(TMRSAREG);/* RECORD ADDRESS OF 15  0186
*                                      WORD SAVE AREA CONTAINING   0186
*                                      RETRY REGS - RRR              */
         LA    @12,TMRSAREG                                        0186
         ST    @12,EPARTYRG                                        0186
*                 STM(R0,R14,TMRSAREG);/* SAVE REGISTERS 0 - 14 INTO
*                                      ILRTMRLG'S SAVEAREA           */
         STM   R0,R14,TMRSAREG                                     0187
*                 GEN(ABEND X'087',,,SYSTEM);/* RECORD ONLY ABEND    */
         ABEND X'087',,,SYSTEM
*               END;                                               0189
*                                                                  0189
*             /*******************************************************/
*             /*                                                     */
*             /* IF THE SYS1.STGINDEX FULL FLAG IS ON, THEN TURN OFF */
*             /* THAT FLAG SINCE SPACE HAS BEEN MADE AVAILABLE ON    */
*             /* SYS1.STGINDEX BY THE REMOVAL OF THE INFORMATION THAT*/
*             /* WAS KEPT FOR THE JUST RELEASED LOGICAL GROUP.       */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0190
*             IF ASMNOSAV=ON THEN                                  0190
@RF00183 TM    ASMNOSAV(ASMVTPTR),B'01000000'                      0190
         BNO   @RF00190                                            0190
*               ASMNOSAV=OFF;                                      0191
         NI    ASMNOSAV(ASMVTPTR),B'10111111'                      0191
*           END;                    /* END PROCESSING OF RETRIEVED 0192
*                                      ASPCT                         */
@RF00190 DS    0H                                                  0193
         EJECT
*                                                                  0193
*/********************************************************************/
*/********************************************************************/
*/*   RETURN ACE TO ACE POOL EVEN IF ASPCT HAS NOT BEEN RETRIEVED    */
*/********************************************************************/
*/********************************************************************/
*                                                                  0193
*         /***********************************************************/
*         /*                                                         */
*         /* EVEN IF THE ASPCT AND ITS EXTENSIONS WERE NOT RETRIEVED */
*         /* BY ILRVSAMI, THE ACE MUST BE RETURNED TO THE ACE POOL   */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0193
*         EPAACE=ZERO;              /* ZERO EPATH POINTER TO THE ACE
*                                      - RRR                         */
@RF00143 SLR   @12,@12                                             0193
         ST    @12,EPAACE                                          0193
*         RFY                                                      0194
*          (R1) RSTD;                                              0194
*         R1=ACEPTR;                                               0195
*                                                                  0195
         LR    R1,ACEPTR                                           0195
*         /***********************************************************/
*         /*                                                         */
*         /* BEGIN ILRGMA MACRO EXPANSION                            */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0196
*         DO;                       /* ILRGMA FREE                 0196
*                                      CELL(ACE)WORKREGS(R11,R12)    */
*           DECLARE                 /* ASMVT VECTOR TO ILRPEX        */
*             ILRPEX ENTRY BASED(ASMPEX) VALRG(0);                 0197
*           DECLARE                 /* MAP FOR CELL CONTROL WORDS    */
*             1 GMACELL BASED BDY(WORD),                           0198
*              2 GMANEXT PTR(31);   /* PTR NEXT FREE CELL            */
*           RESPECIFY                                              0199
*            (R0,                                                  0199
*             R1,                                                  0199
*             R11,                                                 0199
*             R12,                                                 0199
*             R14,                                                 0199
*             R15) RESTRICTED;                                     0199
*           RESPECIFY                                              0200
*             ASMPOOLS BASED(R11);                                 0200
*           RESPECIFY                                              0201
*             GMACELL BASED(R1);                                   0201
*           R11=ADDR(ASMACEPC);                                    0202
         LA    R11,ASMACEPC(,ASMVTPTR)                             0202
*           LM(R14,R15,ASMCPRSQ);   /* GET CONTENTS OF Q             */
         LM    R14,R15,ASMCPRSQ(R11)                               0203
*GMA00111:                                                         0204
*           IF R14^=0 THEN          /* TEST RESERVE Q                */
GMA00111 LTR   R14,R14                                             0204
         BZ    @RF00204                                            0204
*             DO;                   /* REPLENISH ACE RESERVE Q       */
*               R0=R14-1;           /* SET UP FOR COMPARE AND SWAP   */
         LR    R0,R14                                              0206
         BCTR  R0,0                                                0206
*               GMANEXT=R15;        /* CELL TO FREE IN R1            */
         ST    R15,GMANEXT(,R1)                                    0207
*               CDS(R14,R0,ASMCPRSQ);/* ADD CELL TO RESERVE Q        */
         CDS   R14,R0,ASMCPRSQ(R11)                                0208
*               BC(7,GMA00111);                                    0209
         BC    7,GMA00111                                          0209
*             END;                                                 0210
*           ELSE                                                   0211
*             DO;                   /* RETURN ACE TO NORMAL Q        */
         B     @RC00204                                            0211
@RF00204 DS    0H                                                  0212
*               R14=ASMCPAVL;                                      0212
         L     R14,ASMCPAVL(,R11)                                  0212
*GMA00112:                                                         0213
*               GMANEXT=R14;        /* PUT ADDR CURRENT FIRST IN   0213
*                                      INPUT CELL                    */
GMA00112 ST    R14,GMANEXT(,R1)                                    0213
*               CS(R14,R1,ASMCPAVL);/* ADD INPUT CELL TO POOL        */
         CS    R14,@01,ASMCPAVL(R11)                               0214
*               BC(7,GMA00112);                                    0215
         BC    7,GMA00112                                          0215
*             END;                  /* ACE RETURNED TO NORMAL Q      */
*           RESPECIFY                                              0217
*            (R0,                                                  0217
*             R1,                                                  0217
*             R11,                                                 0217
*             R12,                                                 0217
*             R14,                                                 0217
*             R15) UNRESTRICTED;                                   0217
@RC00204 DS    0H                                                  0218
*         END;                      /* ILRGMA FREE                 0218
*                                      CELL(ACE)WORKREGS(R11,R12)    */
*                                                                  0218
*         /***********************************************************/
*         /*                                                         */
*         /* END ILRGMA MACRO EXPANSION                              */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0219
*         RFY                                                      0219
*          (R1,                                                    0219
*           ACEPTR) UNRSTD;                                        0219
*         EPARECUR=OFF;             /* TURN OFF THE RECURSION FLAG IN
*                                      THE EPATH - RRR               */
         NI    EPARECUR,B'11111101'                                0220
*                                                                  0221
*         /***********************************************************/
*         /*                                                         */
*         /* IF THERE ARE MORE ACE'S ON THE WORK QUEUE, THEN CONTINUE*/
*         /* PROCESSING THE WORK QUEUE. OTHERWISE, CHECK THE REQUEST */
*         /* QUEUE FOR MORE ACE'S. IF THE REQUEST QUEUE IS EMPTY,    */
*         /* THEN GO BACK AND WAIT FOR MORE WORK                     */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0221
*       END;                        /* WORK QUEUE IS EMPTY (ASMRLGWQ
*                                      = ZERO) ?                     */
@DE00132 SLR   @12,@12                                             0221
         C     @12,ASMRLGWQ(,ASMVTPTR)                             0221
         BNE   @DL00132                                            0221
*       ASMTMECB=ZERO;              /* ZERO OUT THE ASMTMECB         */
         ST    @12,ASMTMECB(,ASMVTPTR)                             0222
*     END;                          /* REQUEST QUEUE IS EMPTY      0223
*                                      (ASMRLGRQ = ZERO) ?           */
@DE00124 L     @12,ASMRLGRQ(,ASMVTPTR)                             0223
         LTR   @12,@12                                             0223
         BNZ   @DL00124                                            0223
*     EPARECUR=OFF;                 /* TURN OFF THE RECURSION FLAG IN
*                                      THE EPATH - RRR               */
         NI    EPARECUR,B'11111101'                                0224
*   END;                            /* DO FOREVER                    */
@DE00115 B     @DL00115                                            0225
         SPACE 3
*   RFY                                                            0226
*    (ACEPTR,                                                      0226
*     ASPCTPTR) RSTD;                                              0226
         EJECT
*                                                                  0227
*/*  MACCOMP Y-4SC1CW/PZD81                                          */
*/*  MACSTAT Y-475082/415304                                         */
*/********************************************************************/
*/*                                                                  */
*/*  NAME:  ILRALS00                                                 */
*/*                                                                  */
*/*  STATUS:  OS/VS2 RELEASE 4, LEVEL 0                              */
*/*                                                                  */
*/*  ENTRY POINT:  ILRALS00                                          */
*/*                                                                  */
*/*  FUNCTION:  THIS SUBROUTINE SEARCHES THE LPME SECTORS OF A GIVEN */
*/*             ASPCT AND CALLS A PROCESSING ROUTINE (ALSPROC) FOR   */
*/*             EVERY VALID LSID IT FINDS.                           */
*/*                                                                  */
*/*  INPUT:  ADDRESS OF ASPCT IN REGISTER 0.                         */
*/*                                                                  */
*/*  PROCESS:  FOR EACH LPME EXTENSION, FIND ALL LPMES CONTAINING    */
*/*            VALID LSIDS AND SEND THEIR ADDRESSES, ONE AT A TIME   */
*/*            (ALONG WITH THE INPUT CONTROL INFORMATION), TO ALSPROC*/
*/*              ALSPROC INPUT -                                     */
*/*                REGISTER 0 = RPN OF LPME PASSED                   */
*/*                REGISTER 1 = ADDRESS OF LPME                      */
*/*                                                                  */
*/*  OUTPUT:  NONE                                                   */
*/*                                                                  */
*/*  EXIT-NORMAL:  RETURN TO CALLER                                  */
*/*                                                                  */
*/*  EXIT-ERROR:  NONE                                               */
*/*                                                                  */
*/*  EXTERNAL REFERENCES:  NONE                                      */
*/*                                                                  */
*/*  REGISTERS CLOBBERED:  0 AND 1, 14 AND 15                        */
*/*                                                                  */
*/*  MAPPING MACROS USED:  ILRASPCT                                  */
*/*                                                                  */
*/*   NOTES:  DUE TO PLS OPTIMIZATION, RESTRICT ALL NECESSARY        */
*/*          REGISTERS AROUND THIS ROUTINE.                          */
*/*          ALL LABELS AND DATA AREAS CREATED BY THIS ROUTINE BEGIN */
*/*          WITH THE THREE CHARACTERS 'ALS'.  THE CALLING MODULE    */
*/*          MUST INCLUDE SUFFICIENT WORKSPACE FOR THIS ROUTINE'S    */
*/*          DATA AREAS.  THIS AMOUNT IS COMPILER DEPENDENT WITH A   */
*/*          MAXIMUM REQUIREMENT OF 44 BYTES.  THIS ROUTINE ALSO     */
*/*          REQUIRES THAT THE CALLING MODULE DECLARES REGISTERS     */
*/*          R0-R15.                                                 */
*/*          MAPPING MACROS LISTED ABOVE MUST BE INCLUDED IN THE     */
*/*          CALLING MODULE.  THE PROCEDURE ALSPROC MUST BE DEFINED  */
*/*          BY THE CALLING MODULE.  THE PL/S MACRO FACILITY CAN BE  */
*/*          USED TO CHANGE THIS NAME, IF DESIRED.                   */
*/*                                                                  */
*/*  CHANGE-ACTIVITY:  LINE 052480 DELETED FOR APAR OZ15336          */
*/*                                                                  */
*/********************************************************************/
*/*ILRALS00: CHART (AREF)                                            */
*/*HEADER                                                          0227
*/*           ILRALS00 - FIND ALL VALID LSIDS (& RPNS) IN AN ASPCT   */
*/*ILRALS00: E ENTRY                                                 */
*/*         P  SAVE THE RETURN ADDRESS                               */
*/*         P  SAVE PTR TO ASPCT BASE                                */
*/*         P  INITIALIZE BASE ARRAY SUBSCRIPT TO ONE                */
*/*         P  INITIALIZE ASST EXT ARRAY SUBSCRIPT TO TWO            */
*/*         P  INITIALIZE LPME EXT ARRAY SUBSCRIPT TO ONE            */
*/*         P  INITIALIZE RPN VALUE TO ZERO                          */
*/*         P  GET THE NUMBER OF LPME EXTS FROM BASE                 */
*/*         P  GET PTR TO BASE LPME EXTENSION                        */
*/*         P  GET PTR TO FIRST LPME                                 */
*/*%ALS01:  D  (YES,%ALS02,NO,) LPME VALID?                          */
*/*         D  (YES,,NO,%ALS03) RELEASED AFTER SAVE?                 */
*/*%ALS02:  P  LOAD REG 0 WITH RPN                                   */
*/*         P  LOAD REG 1 WITH PTR TO LPME                           */
*/*         S  ALSPROC: CALL USER'S ROUTINE                          */
*/*%ALS03:  P  INCREMENT THE RPN                                     */
*/*         P  INCREMENT THE LPME EXT ARRAY SUBSCRIPT                */
*/*         P  GET PTR TO NEXT LPME                                  */
*/*         D  (YES,%ALS04,NO,) REACHED END OF ARRAY?                */
*/*         D  (YES,,NO,%ALS01) LPME ZERO?                           */
*/*%ALS04:  P  RESET LPME EXT SUBSCRIPT TO ONE                       */
*/*         D  (YES,%ALS05,NO,) ARE THERE ANY EXTENSIONS?            */
*/*         R  RETURN TO CALLER                                      */
*/*%ALS05:  D  (YES,,NO,%ALS07) REACHED END OF ASST EXT ARRAY?       */
*/*         P  RESET ASST EXT ARRAY SUBSCRIPT                        */
*/*         P  INCREMENT THE BASE ARRAY SUBSCRIPT                    */
*/*         D  (YES,%ALS06,NO,) REACHED END OF BASE ARRAY            */
*/*         D  (YES,%ALS07,NO,) ANYMORE ASST EXTS?                   */
*/*%ALS06:  R  RETURN TO CALLER                                      */
*/*%ALS07:  P  GET PTR TO NEXT ASST EXTENSION                        */
*/*         P  GET PTR TO NEXT LPME EXTENSION                        */
*/*         P  GET PTR TO FIRST LPME IN EXTENSION                    */
*/*         P  (,%ALS01) INCREMENT ASST EXT ARRAY SUBSCRIPT          */
*                                                                  0227
*ILRALS00:                          /* LPME SEARCH                   */
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0227
*                                                                  0227
ILRALS00 DS    0H                                                  0228
*/*A-000000-999999                                           @Z40WPWH*/
*                                                                  0228
*   DCL                                                            0228
*     ALSRETRN FIXED(31),           /* RETURN ADDRESS SAVE AREA      */
*     ALSASPCT PTR(31),             /* PTR TO ASPCT BASE             */
*     ALSEXPTR PTR(31),             /* PTR TO ASST EXTENSION         */
*     ALSLEPTR PTR(31),             /* PTR TO LPME EXTENSION         */
*     ALSLPME PTR(31),              /* PTR TO INDIVIDUAL LPME        */
*     ALSRPN FIXED(31),             /* RELATIVE PAGE NUMBER          */
*     ALSA FIXED(31),               /* ASST ARRAY SUBSCRIPT          */
*     ALSL FIXED(31),               /* LPME ARRAY SUBSCRIPT          */
*     ALSB FIXED(31),               /* BASE ARRAY SUBSCRIPT          */
*     ALSCNTL FIXED(8);             /* LOOP CONTROLLER               */
*   DCL                                                            0229
*     ALSZERO FIXED(31) CONSTANT(0),                               0229
*     ALSONE FIXED(31) CONSTANT(1),                                0229
*     ALSTWO FIXED(31) CONSTANT(2),                                0229
*     ALSFIVE FIXED(31) CONSTANT(5),                               0229
*     ALS257 FIXED(31) CONSTANT(257),                              0229
*     ALSLPMEL FIXED(31) INIT(LENGTH(ASPLPME)),                    0229
*     ALSON BIT(1) CONSTANT('1'B);                                 0229
*   RFY                                                            0230
*    (R0,                                                          0230
*     R14) RSTD;                                                   0230
*   ALSRETRN=R14;                   /* SAVE RETURN ADDRESS           */
         ST    R14,ALSRETRN                                        0231
*   ALSASPCT=R0;                    /* SAVE PTR TO ASPCT BASE        */
         ST    R0,ALSASPCT                                         0232
*   RFY                                                            0233
*    (R0,                                                          0233
*     R14) UNRSTD;                                                 0233
*   ALSB=ALSONE;                    /* INIT BASE SUBSCRIPT TO FIRST
*                                      ASST EXTENSION                */
         LA    @08,1                                               0234
         ST    @08,ALSB                                            0234
*   ALSA=ALSTWO;                    /* INIT ASST SUBSCRIPT TO FIRST
*                                      LPME EXTENSION                */
         MVC   ALSA(4),@CF00108                                    0235
*   ALSL=ALSONE;                    /* INIT LPME SUBSCRIPT TO FIRST
*                                      LPME                          */
         LR    ALSL,@08                                            0236
*   ALSRPN=ALSZERO;                 /* INIT THE RPN                  */
         SLR   @02,@02                                             0237
         ST    @02,ALSRPN                                          0237
*   ALSCNTL=ALSONE;                 /* INIT LOOP CONTROLLER GET PTR
*                                      TO LPME'S IN BASE             */
         LR    ALSCNTL,@08                                         0238
*   ALSLPME=ADDR(ALSASPCT->ASPLPMES(ALSL));                        0239
         L     @08,ALSASPCT                                        0239
         LR    @02,ALSL                                            0239
         SLA   @02,2                                               0239
         LA    ALSLPME,ASPLPMES-4(@02,@08)                         0239
*   DO WHILE ALSCNTL^=ALSZERO;                                     0240
         B     @DE00240                                            0240
@DL00240 DS    0H                                                  0241
*     DO WHILE ALSL<ALS257;         /* IS THE LPME VALID OR HAS IT 0241
*                                      BEEN RELEASED AFTER SAVE?     */
         B     @DE00241                                            0241
@DL00241 DS    0H                                                  0242
*       IF ALSLPME->ASPLVALD=ALSON×ALSLPME->ASPLSVRP=ALSON THEN    0242
         TM    ASPLVALD(ALSLPME),B'10001000'                       0242
         BZ    @RF00242                                            0242
*         DO;                       /* YES                           */
*           RFY                                                    0244
*            (R0,                                                  0244
*             R1) RSTD;                                            0244
*           R0=ALSRPN;              /* LOAD REG0 WITH CURRENT RPN    */
         L     R0,ALSRPN                                           0245
*           R1=ALSLPME;             /* LOAD REG1 WITH PTR TO LPME    */
         LR    R1,ALSLPME                                          0246
*           CALL ALSPROC;           /* CALL USER'S PROC TO PERFORM   */
         LA    @15,TMRLPME                                         0247
         BALR  @14,@15                                             0247
*           RFY                                                    0248
*            (R0,                                                  0248
*             R1) UNRSTD;           /* USER'S FUNCTION               */
*         END;                                                     0249
*       ELSE                                                       0250
*         ;                                                        0250
@RF00242 DS    0H                                                  0251
*       ALSRPN=ALSRPN+ALSONE;       /* INCREMENT RPN FOR NEXT LPME   */
         LA    @08,1                                               0251
         L     @02,ALSRPN                                          0251
         ALR   @02,@08                                             0251
         ST    @02,ALSRPN                                          0251
*       ALSLPME=ALSLPME+ALSLPMEL;   /* INCREMENT LPME PTR TO NEXT  0252
*                                      LPME                          */
         AL    ALSLPME,ALSLPMEL                                    0252
*       ALSL=ALSL+ALSONE;           /* INCREMENT LPME SUBSCRIPT      */
         ALR   ALSL,@08                                            0253
*     END;                          /* ARE THERE ANY EXTENSIONS?     */
@DE00241 C     ALSL,@CF01408                                       0254
         BL    @DL00241                                            0254
*     IF ALSASPCT->ASPAEXCT=ALSZERO THEN/* NO                        */
         L     @08,ALSASPCT                                        0255
         LH    @08,ASPAEXCT(,@08)                                  0255
         LTR   @08,@08                                             0255
         BNZ   @RF00255                                            0255
*       ALSCNTL=ALSZERO;            /* FORCE LOOP EXIT               */
         SLR   ALSCNTL,ALSCNTL                                     0256
*     ELSE                                                         0257
*       DO;                         /* YES, PROCESS ALL LPME'S IN  0257
*                                      EXTENSIONS                    */
         B     @RC00255                                            0257
@RF00255 DS    0H                                                  0258
*         ALSL=ALSONE;              /* RESET LPME SUBSCRIPT          */
         LA    ALSL,1                                              0258
*         IF ALSA<ALS257            /* REACHED END OF ASST ARRAY     */
*           THEN                                                   0259
         L     @08,ALSA                                            0259
         C     @08,@CF01408                                        0259
         BNL   @RF00259                                            0259
*           DO;                     /* NO ANYMORE ASST EXTS?         */
*             IF ALSASPCT->ASPASSTP(ALSB)=ALSZERO THEN/* NO          */
         L     @08,ALSB                                            0261
         SLA   @08,2                                               0261
         L     @02,ALSASPCT                                        0261
         L     @08,ASPASSTP-4(@08,@02)                             0261
         LTR   @08,@08                                             0261
         BNZ   @RF00261                                            0261
*               ALSCNTL=ALSZERO;    /* FORCE LOOP EXIT               */
         SLR   ALSCNTL,ALSCNTL                                     0262
*             ELSE                                                 0263
*               DO;                 /* YES GET PTR TO NEXT ASST EXT  */
         B     @RC00261                                            0263
@RF00261 DS    0H                                                  0264
*ALSLOOP:                                                          0264
*                 ALSEXPTR=ALSASPCT->ASPASSTP(ALSB);               0264
*                                                                  0264
ALSLOOP  L     @08,ALSB                                            0264
         SLA   @08,2                                               0264
         L     @01,ALSASPCT                                        0264
         L     ALSEXPTR,ASPASSTP-4(@08,@01)                        0264
*                 /***************************************************/
*                 /*                                                 */
*                 /* IF THERE ARE ANYMORE LPME EXTENSIONS, GET THE   */
*                 /* POINTER TO THE LPME EXTENSION, POINTER TO THE   */
*                 /* LPME, AND INCREMENT THE ASST ARRAY SUBSCRIPT    */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0265
*                 IF ALSEXPTR->ASPSECTA(ALSA)^=ALSZERO THEN        0265
         L     @08,ALSA                                            0265
         LR    @15,@08                                             0265
         SLA   @15,2                                               0265
         L     @15,ASPSECTA-4(@15,ALSEXPTR)                        0265
         LTR   @15,@15                                             0265
         BZ    @RF00265                                            0265
*                   DO;                                            0266
*                     ALSLEPTR=ALSEXPTR->ASPSECTA(ALSA);           0267
         LR    ALSLEPTR,@15                                        0267
*                     ALSLPME=ADDR(ALSLEPTR->ASPLPMEE(ALSL));      0268
         LR    @02,ALSL                                            0268
         SLA   @02,2                                               0268
         LA    ALSLPME,ASPLPMEE-4(@02,ALSLEPTR)                    0268
*                     ALSA=ALSA+ALSONE;                            0269
         L     @08,ALSA                                            0269
         AL    @08,@CF00055                                        0269
         ST    @08,ALSA                                            0269
*                   END;                                           0270
*                 ELSE                                             0271
*                   ALSCNTL=ALSZERO;                               0271
         B     @RC00265                                            0271
@RF00265 SLR   ALSCNTL,ALSCNTL                                     0271
*               END;                                               0272
*           END;                                                   0273
*         ELSE                                                     0274
*           DO;                                                    0274
         B     @RC00259                                            0274
@RF00259 DS    0H                                                  0275
*             ALSA=ALSONE;          /* RESET ASST SUBSCRIPT          */
         LA    @08,1                                               0275
         ST    @08,ALSA                                            0275
*             ALSB=ALSB+ALSONE;     /* INCREMENT BASE SUBSCRIPT ARE
*                                      THERE ANYMORE ASST EXT        */
         AL    @08,ALSB                                            0276
         ST    @08,ALSB                                            0276
*             IF ALSB<ALSFIVE&ALSASPCT->ASPASSTP(ALSB)^=ALSZERO THEN
         C     @08,@CF01025                                        0277
         BNL   @RF00277                                            0277
         SLA   @08,2                                               0277
         L     @02,ALSASPCT                                        0277
         L     @08,ASPASSTP-4(@08,@02)                             0277
         LTR   @08,@08                                             0277
         BNZ   @RT00277                                            0277
*                                   /* YES                           */
*               GOTO ALSLOOP;       /* CONTINUE LOOPING              */
*             ELSE                  /* NO                            */
*               ALSCNTL=ALSZERO;    /* FORCE LOOP EXIT               */
@RF00277 SLR   ALSCNTL,ALSCNTL                                     0279
*           END;                                                   0280
*       END;                                                       0281
@RC00259 DS    0H                                                  0282
*   END;                                                           0282
@RC00255 DS    0H                                                  0282
@DE00240 C     ALSCNTL,@CF00088                                    0282
         BNE   @DL00240                                            0282
*   RFY                                                            0283
*     R14 RSTD;                                                    0283
*   R14=ALSRETRN;                                                  0284
         L     R14,ALSRETRN                                        0284
*   RFY                                                            0285
*     R14 UNRSTD;                                                  0285
*   END ILRALS00;                                                  0286
@EL00002 DS    0H                                                  0286
@EF00002 DS    0H                                                  0286
@ER00002 BR    @14                                                 0286
         EJECT
*                                                                  0287
*/*  MACCOMP Y-4SC1CW/PZD81                                          */
*/*  MACSTAT Y-475082/415304                                         */
*/********************************************************************/
*/*                                                                  */
*/*  NAME:  ILRAFS00                                                 */
*/*                                                                  */
*/*  STATUS:  OS/VS2 RELEASE 4.1, LEVEL 0                            */
*/*                                                                  */
*/*  ENTRY POINT:  ILRAFS00                                          */
*/*                                                                  */
*/*  FUNCTION:  THIS SUBROUTINE FREES AN ASPCT.                      */
*/*                                                                  */
*/*  INPUT:  ADDRESS OF ASPCT IN REGISTER 1.                         */
*/*          LENGTH OF ASPCT IN REGISTER 0.                          */
*/*                                                                  */
*/*  PROCESS:  TWO LOOPS, ONE TO FREE ASST EXTENSIONS AND ONE TO     */
*/*            FREE LPME EXTENSIONS, ARE EXECUTED.  EACH USES THE    */
*/*            SUBROUTINE AFSFREE TO INVOKE FREEMAIN.  A FINAL CALL  */
*/*            TO AFSFREE FREES THE BASE ASPCT EXTN.                 */
*/*                                                                  */
*/*  OUTPUT:  RETURN CODE IN REGISTER 15.                            */
*/*             00 = NORMAL RETURN                                   */
*/*             44 = FREEMAIN FAILURE                                */
*/*                                                                  */
*/*  EXIT-NORMAL:  RETURN TO CALLER WITH RETURN CODE (SEE OUTPUT)    */
*/*                                                                  */
*/*  EXIT-ERROR:  NONE                                               */
*/*                                                                  */
*/*  EXTERNAL REFERENCES:  FREEMAIN                                  */
*/*                                                                  */
*/*  REGISTERS CLOBBERED:  0 AND 1, 14 AND 15                        */
*/*                                                                  */
*/*  MAPPING MACROS USED:  ILRASPCT                                  */
*/*                                                                  */
*/*  NOTES:  DUE TO PLS OPTIMIZATION, RESTRICT ALL NECESSARY         */
*/*          REGISTERS AROUND THIS ROUTINE.                          */
*/*          INVOKING ROUTINE MUST HOLD THE LOCAL LOCK, OR HAVE      */
*/*          SPECIFIED %AFSSVC=YES.                                  */
*/*          ALL LABELS AND DATA AREAS CREATED BY THIS ROUTINE BEGIN */
*/*          WITH THE THREE CHARACTERS 'AFS'.  THE CALLING MODULE    */
*/*          MUST INCLUDE SUFFICIENT WORKSPACE FOR THIS ROUTINE'S    */
*/*          DATA AREAS.  THIS AMOUNT IS COMPILER DEPENDENT WITH A   */
*/*          MAXIMUM REQUIREMENT OF 46 BYTES.  THIS ROUTINE ALSO     */
*/*          REQUIRES THAT THE CALLING MODULE DECLARES REGISTERS     */
*/*          R0-R15.  THE MAPPING MACRO LISTED ABOVE MUST BE         */
*/*          INCLUDED.  THE BASE POINTER FOR THE ASPCT IS NOT        */
*/*          REQUIRED BY THIS SUBROUTINE.                            */
*/*                                                                  */
*/*  METHOD OF ACCESS:                                               */
*/*          %AFSSVC='YES' IF THE INVOKING ROUTINE MUST USE AN SVC   */
*/*          %AFSSVC='NO' IF BRANCH ENTRY REQUIRED                   */
*/*          %INCLUDE SYSLIB(ILRAFS00)                               */
*/********************************************************************/
*/*ILRAFS00: CHART (AREF)                                            */
*/*HEADER                                                          0287
*/*            ILRAFS00 - FREE ASPCT STORAGE                         */
*/*ILRAFS00: E ENTRY                                                 */
*/*         P  SAVE THE RETURN ADDRESS                               */
*/*         P  SAVE PTR TO ASPCT BASE                                */
*/*         P  SAVE THE LENGTH OF ASPCT                              */
*/*         D  (YES,,NO,%AFS01A) SPECIFIED LENGTH THAT OF ASPCT?     */
*/*         P  (,%AFS01B) SET SUBPOOL ID TO 255                      */
*/*%AFS01A: P  SET SUBPOOL ID TO 230                                 */
*/*%AFS01B: D  (YES,,NO,%AFS06) ARE THERE ANY EXTENSIONS?            */
*/*         P  INITIALIZE BASE ARRAY SUBSCRIPT TO ONE                */
*/*         P  INITIALIZE ASST EXT ARRAY SUBSCRIPT TO TWO            */
*/*%AFS01:  P  GET PTR TO ASST EXTENSION                             */
*/*%AFS02:  P  GET PTR TO LPME EXTENSION                             */
*/*%AFS02A: S  AFSFREE: FREE AN LPME EXTENSION                       */
*/*         D  (YES,%AFS03,NO,) RETURN CODE ZERO?                    */
*/*         P  INCREMENT THE ASST EXT ARRAY SUBSCRIPT                */
*/*         D  (YES,%AFS04,NO,) REACHED END OF ASST EXT ARRAY?       */
*/*         D  (YES,,NO,%AFS04) ANYMORE LPME EXTENSIONS?             */
*/*         P  SET PTR TO LPME EXTENSION                             */
*/*         D  (YES,%AFS02A,NO,%AFS04) IS THIS AN LPME EXTENSION?    */
*/*%AFS03:  P  INCREMENT THE ASST EXT ARRAY SUBSCRIPT                */
*/*         D  (YES,%AFS04,NO,) REACHED END OF ASST EXT ARRAY?       */
*/*         D  (YES,%AFS02,NO,) ANYMORE LPME EXTENSIONS?             */
*/*%AFS04:  P  SET WORK PTR TO ASST EXT                              */
*/*         S  AFSFREE: FREE AN ASST EXTENSION                       */
*/*         D  (YES,%AFS05,NO,) RETURN CODE ZERO?                    */
*/*         P  INCREMENT THE BASE ARRAY SUBSCRIPT                    */
*/*         D  (YES,%AFS06,NO,) REACHED END OF BASE ARRAY?           */
*/*         D  (YES,,NO,%AFS06) ANYMORE ASST EXTENSIONS?             */
*/*         P  GET PTR TO ASST EXTENSION                             */
*/*         D  (YES,,NO,%AFS06) IS THIS AN ASST EXTENSION            */
*/*         P  (,%AFS02) RESET ASST EXT ARRAY SUBSCRIPT TO ONE       */
*/*%AFS05:  P  INCREMENT THE BASE ARRAY SUBSCRIPT                    */
*/*         D  (YES,%AFS06,NO,) REACHED END OF BASE ARRAY            */
*/*         D  (YES,,NO,%AFS06) ANYMORE ASST EXTENSIONS?             */
*/*         P  (,%AFS01) RESET ASST EXT ARRAY SUBSCRIPT TO ONE       */
*/*%AFS06:  P  SET THE WORK PTR TO ASPCT BASE                        */
*/*         S  AFSFREE: FREE THE ASPCT BASE                          */
*/*         R  RETURN TO CALLER                                      */
*                                                                  0287
         EJECT
*ILRAFS00:                                                         0287
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0287
*                                                                  0287
ILRAFS00 DS    0H                                                  0288
*/*A-000000-999999                                           @Z40WPWH*/
*                                                                  0288
*   DECLARE                                                        0288
*     AFSASPCT PTR(31),             /* PTR TO ASPCT BASE             */
*     AFSEXPTR PTR(31),             /* PTR TO ASPCT EXTENSIONS       */
*     AFSLNGTH FIXED(31),           /* FREEMAIN LENGTH               */
*     AFSWORK PTR(31),              /* FREEMAIN ADDRESS              */
*     AFSRET1 FIXED(31),            /* INTERNAL RETURN CODE          */
*     AFSRET2 FIXED(31),            /* INTERNAL RETURN CODE          */
*     AFSA FIXED(31),               /* ASST EXT ARRAY SUBSCRIPT      */
*     AFSSPID FIXED(31),            /* SUBPOOL ID FOR FREEMAIN       */
*     AFSB FIXED(15),               /* BASE ARRAY SUBSCRIPT          */
*     AFSZERO FIXED(31) CONSTANT(0),                               0288
*     AFSSP230 FIXED(31) CONSTANT(230),                            0288
*     AFSSP255 FIXED(31) CONSTANT(255),                            0288
*     AFS257 FIXED(31) CONSTANT(257),                              0288
*     AFSONE FIXED(15) CONSTANT(1),                                0288
*     AFS44 FIXED(31) CONSTANT(44),                                0288
*     AFSTWO FIXED(15) CONSTANT(2),                                0288
*     AFSFIVE FIXED(15) CONSTANT(5),                               0288
*     AFSREG3 FIXED(31),            /* REGISTER 3 SAVEAREA           */
*     AFSREG4 FIXED(31),            /* REGISTER 4 SAVEAREA           */
*     AFSREG7 FIXED(31);            /* REGISTER 7 SAVEAREA           */
*   RFY                                                            0289
*    (R0,                                                          0289
*     R1,                                                          0289
*     R3,                                                          0289
*     R4,                                                          0289
*     R7,                                                          0289
*     R14) RSTD;                                                   0289
*   AFSRET1=R14;                    /* SAVE THE RETURN ADDRESS       */
         ST    R14,AFSRET1                                         0290
*   AFSASPCT=R1;                    /* SAVE PTR TO ASPCT BASE        */
         ST    R1,AFSASPCT                                         0291
*   AFSLNGTH=R0;                    /* SAVE INPUT LENGTH             */
         ST    R0,AFSLNGTH                                         0292
*   AFSREG3=R3;                     /* SAVE CALLER'S REG 3           */
         ST    R3,AFSREG3                                          0293
*   AFSREG4=R4;                     /* SAVE CALLER'S REG 4           */
         ST    R4,AFSREG4                                          0294
*   AFSREG7=R7;                     /* SAVE CALLER'S REG 7           */
         ST    R7,AFSREG7                                          0295
*   RFY                                                            0296
*    (R0,                                                          0296
*     R1,                                                          0296
*     R3,                                                          0296
*     R4,                                                          0296
*     R7,                                                          0296
*     R14) UNRSTD;                                                 0296
*   IF AFSLNGTH=LENGTH(ASPCT)       /* CHECK WHICH SUBPOOL TO USE    */
*     THEN                          /* ACTIVE ASPCT                  */
         L     @12,AFSLNGTH                                        0297
         C     @12,@CF01447                                        0297
         BNE   @RF00297                                            0297
*     AFSSPID=AFSSP255;             /* SET SUBPOOL FOR LSQA          */
         MVC   AFSSPID(4),@CF01361                                 0298
*   ELSE                            /* I/O BUFFERS                   */
*     AFSSPID=AFSSP230;             /* SET SUBPOOL FOR USER KEY      */
         B     @RC00297                                            0299
@RF00297 MVC   AFSSPID(4),@CF01427                                 0299
         EJECT
*                                                                  0300
*/********************************************************************/
*/*                                                                  */
*/*  A TEST IS NOW MADE FOR EXTENSIONS. IF THERE ARE EXTENSIONS,     */
*/*  THEY ARE FREED FIRST. FIRST ALL LPME EXTENSIONS FOR A PARTICULAR*/
*/*  ASST EXTENSION ARE FREED, THEN THAT ASST EXTENSION IS FREED.    */
*/*  THIS PROCESS IS REPEATED UNTIL ALL EXTENSIONS ARE FREED.        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0300
*   IF AFSASPCT->ASPAEXCT^=AFSZERO  /* ARE THERE ANY EXTENSIONS?     */
*     THEN                                                         0300
@RC00297 L     @12,AFSASPCT                                        0300
         LH    @11,ASPAEXCT(,@12)                                  0300
         LTR   @11,@11                                             0300
         BZ    @RF00300                                            0300
*     DO;                           /* YES                           */
*       AFSB=AFSONE;                /* SET BASE SUBSCRIPT FOR FIRST
*                                      ASST EXTENSION                */
         LA    @11,1                                               0302
         STH   @11,AFSB                                            0302
*       AFSA=AFSTWO;                /* SET ASST SUBSCRIPT FOR FIRST
*                                      LPME EXTENSION OFF FIRST ASST
*                                      EXTENSION. GET PTR TO FIRST 0303
*                                      ASST EXT                      */
         MVC   AFSA(4),@CF00108                                    0303
*       AFSEXPTR=AFSASPCT->ASPASSTP(AFSB);                         0304
         L     @08,AFSASPCT                                        0304
         SLA   @11,2                                               0304
         L     AFSEXPTR,ASPASSTP-4(@11,@08)                        0304
*       DO WHILE AFSEXPTR^=AFSZERO; /* LOOP UNTIL WE HAVE PROCESSED
*                                      ALL ASST EXTENSIONS GET PTR TO
*                                      LPME EXT                      */
         B     @DE00305                                            0305
@DL00305 DS    0H                                                  0306
*         AFSWORK=AFSEXPTR->ASPASSTE(AFSA);                        0306
         L     @08,AFSA                                            0306
         SLA   @08,2                                               0306
         L     AFSWORK,ASPASSTE-4(@08,AFSEXPTR)                    0306
*         DO WHILE AFSWORK^=AFSZERO;/* LOOP UNTIL WE HAVE PROCESSED
*                                      ALL LPME EXTENSIONS FOR A   0307
*                                      PARTICULAR ASST EXTENSION     */
         B     @DE00307                                            0307
@DL00307 DS    0H                                                  0308
*           CALL AFSFREE;           /* FREE AN LPME EXTENSION        */
         BAL   @14,AFSFREE                                         0308
*           RFY                                                    0309
*             R15 RSTD;                                            0309
*           IF R15=AFSZERO          /* SUCCESSFUL FREEMAIN?          */
*             THEN                                                 0310
         LTR   R15,R15                                             0310
         BNZ   @RF00310                                            0310
*             DO;                   /* YES                           */
*               RFY                                                0312
*                 R15 UNRSTD;                                      0312
*               AFSA=AFSA+AFSONE;   /* INCREMENT ASST SUBSCRIPT      */
         LA    @11,1                                               0313
         AL    @11,AFSA                                            0313
         ST    @11,AFSA                                            0313
*               IF AFSA<AFS257      /* REACHED END OF ARRAY          */
*                 THEN              /* NO, GET PTR TO NEXT LPME EX   */
         C     @11,@CF01408                                        0314
         BNL   @RF00314                                            0314
*                 AFSWORK=AFSEXPTR->ASPASSTE(AFSA);                0315
         L     @08,AFSA                                            0315
         SLA   @08,2                                               0315
         L     AFSWORK,ASPASSTE-4(@08,AFSEXPTR)                    0315
*               ELSE                /* YES, FORCE EXIT FROM LOOP     */
*                 AFSWORK=AFSZERO;                                 0316
         B     @RC00314                                            0316
@RF00314 SLR   AFSWORK,AFSWORK                                     0316
*             END;                  /* THIS IS THE LOGICAL END OF THE
*                                      DO WHILE LOOP FOR LPME      0317
*                                      EXTENSIONS. PHYSICAL END IS 0317
*                                      AFTER THE ERROR CODE PROCESS
*                                      ING FOR A NON-ZERO RETURN FROM
*                                      AFSFREE.                      */
         EJECT
*                                                                  0318
*/********************************************************************/
*/* THIS SECTION WILL PROCESS A NON-ZERO RETURN CODE FROM AFSFREE    */
*/* FOR LPME EXTENSIONS. PROCESSING CONSISTS OF GETTING THE POINTER  */
*/* TO THE NEXT LPME EXTENSION, AND VERIFYING THAT IT IS AN LPME     */
*/* EXTENSION. IF IT IS WE WILL CONTINUE FREEING LPME EXTENSIONS,    */
*/* IF NOT, WE WILL FORCE AN EXIT FROM THE LOOP.                     */
*/********************************************************************/
*                                                                  0318
*           ELSE                                                   0318
*             DO;                   /* NON-ZERO RETURN FROM AFSFREE  */
         B     @RC00310                                            0318
@RF00310 DS    0H                                                  0319
*               AFSA=AFSA+AFSONE;   /* INCREMENT ASST SUBSCRIPT      */
         LA    @11,1                                               0319
         AL    @11,AFSA                                            0319
         ST    @11,AFSA                                            0319
*               IF AFSA<AFS257      /* REACHED END OF ASST ARRAY?    */
*                 THEN                                             0320
         C     @11,@CF01408                                        0320
         BNL   @RF00320                                            0320
*                 DO;               /* NO GET PTR TO NEXT LPME EXT   */
*                   AFSWORK=AFSEXPTR->ASPASSTE(AFSA);/* IS THIS A  0322
*                                      VALID LPME EXT?               */
         L     @08,AFSA                                            0322
         SLA   @08,2                                               0322
         L     AFSWORK,ASPASSTE-4(@08,AFSEXPTR)                    0322
*                   IF AFSWORK->ASPEIDNT^='LPME' THEN/* NO           */
         CLC   ASPEIDNT(4,AFSWORK),@CC01438                        0323
         BE    @RF00323                                            0323
*                     AFSWORK=AFSZERO;/* FORCE LOOP EXIT             */
         SLR   AFSWORK,AFSWORK                                     0324
*                 END;                                             0325
*               ELSE                /* YES, REACHED END OF ARRAY     */
*                 AFSWORK=AFSZERO;  /* FORCE LOOP EXIT               */
         B     @RC00320                                            0326
@RF00320 SLR   AFSWORK,AFSWORK                                     0326
*             END;                                                 0327
@RC00320 DS    0H                                                  0328
*         END;                      /* THIS IS THE PHYSICAL END OF 0328
*                                      THE DO WHILE LOOP FOR LPME  0328
*                                      EXTENSIONS.                   */
@RC00310 DS    0H                                                  0328
@DE00307 LTR   AFSWORK,AFSWORK                                     0328
         BNZ   @DL00307                                            0328
         EJECT
*                                                                  0329
*/********************************************************************/
*/* THIS SECTION PROCESSES THE ASST EXTENSIONS                       */
*/********************************************************************/
*                                                                  0329
*         AFSWORK=AFSEXPTR;         /* SET FREEMAIN POINTER TO AN  0329
*                                      ASST EXTENSION                */
         LR    AFSWORK,AFSEXPTR                                    0329
*         CALL AFSFREE;             /* FREE THE ASST EXTENSION       */
         BAL   @14,AFSFREE                                         0330
*         RFY                                                      0331
*           R15 RSTD;                                              0331
*         IF R15=AFSZERO            /* FREEMAIN SUCCESSFUL?          */
*           THEN                                                   0332
         LTR   R15,R15                                             0332
         BNZ   @RF00332                                            0332
*           DO;                     /* YES                           */
*             RFY                                                  0334
*               R15 UNRSTD;                                        0334
*             AFSB=AFSB+AFSONE;     /* INCREMENT BASE SUBSCRIPT      */
         LA    @12,1                                               0335
         LH    @11,AFSB                                            0335
         ALR   @11,@12                                             0335
         STH   @11,AFSB                                            0335
*             IF AFSB<AFSFIVE       /* REACHED END OF ARRAY?         */
*               THEN                                               0336
         C     @11,@CF01025                                        0336
         BNL   @RF00336                                            0336
*               DO;                 /* NO GET PTR TO NEXT ASST EXT   */
*                 AFSEXPTR=AFSASPCT->ASPASSTP(AFSB);               0338
         SLA   @11,2                                               0338
         L     @08,AFSASPCT                                        0338
         L     AFSEXPTR,ASPASSTP-4(@11,@08)                        0338
*                 AFSA=AFSONE;      /* RESET ASST SUBSCRIPT          */
         LA    @11,1                                               0339
         ST    @11,AFSA                                            0339
*               END;                                               0340
*             ELSE                  /* YES, REACHED END OF ARRAY     */
*               AFSEXPTR=AFSZERO;   /* FORCE LOOP EXIT               */
         B     @RC00336                                            0341
@RF00336 SLR   AFSEXPTR,AFSEXPTR                                   0341
*           END;                    /* THIS THE LOGICAL END OF THE DO
*                                      WHILE LOOP FOR ASST         0342
*                                      EXTENSIONS. PHYSICAL END IS 0342
*                                      AFTER THE ERROR CODE PROCESS
*                                      ING FOR A NON-ZERO RETURN FROM
*                                      AFSFREE                       */
         EJECT
*                                                                  0343
*/********************************************************************/
*/* THIS SECTION WILL PROCESS A NON-ZERO RETURN CODE FROM AFSFREE    */
*/* FOR ASST EXTENSIONS. PROCESSING CONSISTS OF GETTING THE POINTER  */
*/* TO THE NEXT ASST EXTENSION, AND VERIFYING THAT IT IS AN ASST     */
*/* EXTENSION. IF IT IS WE WILL CONTINUE FREEING ASST EXTENSIONS,    */
*/* IF NOT, WE WILL FORCE AN EXIT FROM THE LOOP.                     */
*/********************************************************************/
*                                                                  0343
*         ELSE                                                     0343
*           DO;                     /* NON-ZERO RETURN CODE FROM   0343
*                                      AFSFREE                       */
         B     @RC00332                                            0343
@RF00332 DS    0H                                                  0344
*             AFSB=AFSB+AFSONE;     /* INCREMENT BASE SUBSCRIPT      */
         LA    @12,1                                               0344
         LH    @11,AFSB                                            0344
         ALR   @11,@12                                             0344
         STH   @11,AFSB                                            0344
*             IF AFSB<AFSFIVE       /* REACHED END OF ARRAY          */
*               THEN                                               0345
         C     @11,@CF01025                                        0345
         BNL   @RF00345                                            0345
*               DO;                 /* GET PTR TO NEXT ASST          */
*                 AFSEXPTR=AFSASPCT->ASPASSTP(AFSB);/* VALID ASST  0347
*                                      EXTENSION?                    */
         SLA   @11,2                                               0347
         L     @08,AFSASPCT                                        0347
         L     AFSEXPTR,ASPASSTP-4(@11,@08)                        0347
*                 IF AFSEXPTR->ASPEIDNT='ASST' THEN/* YES            */
         CLC   ASPEIDNT(4,AFSEXPTR),@CC01439                       0348
         BNE   @RF00348                                            0348
*                   AFSA=AFSONE;    /* RESET ASST SUBSCRIPT          */
         LA    @11,1                                               0349
         ST    @11,AFSA                                            0349
*                 ELSE              /* NO                            */
*                   AFSEXPTR=AFSZERO;/* FORCE LOOP EXIT              */
         B     @RC00348                                            0350
@RF00348 SLR   AFSEXPTR,AFSEXPTR                                   0350
*               END;                                               0351
*             ELSE                  /* YES, REACHED END OF ARRAY     */
*               AFSEXPTR=AFSZERO;   /* FORCE LOOP EXIT               */
         B     @RC00345                                            0352
@RF00345 SLR   AFSEXPTR,AFSEXPTR                                   0352
*           END;                                                   0353
@RC00345 DS    0H                                                  0354
*       END;                        /* PHYSICAL END OF DO WHILE LOOP
*                                      FOR ASST EXTENSIONS           */
@RC00332 DS    0H                                                  0354
@DE00305 LTR   AFSEXPTR,AFSEXPTR                                   0354
         BNZ   @DL00305                                            0354
*     END;                                                         0355
         EJECT
*                                                                  0356
*/********************************************************************/
*/* THIS SECTION FREES THE ASPCT BASE                                */
*/********************************************************************/
*                                                                  0356
*   AFSWORK=AFSASPCT;               /* GET PTR TO THE ASPCT BASE     */
@RF00300 L     AFSWORK,AFSASPCT                                    0356
*   CALL AFSFREE;                   /* FREE THE BASE                 */
         BAL   @14,AFSFREE                                         0357
         EJECT
*   RFY                                                            0358
*    (R3,                                                          0358
*     R4,                                                          0358
*     R7,                                                          0358
*     R14) RSTD;                                                   0358
*   R3=AFSREG3;                     /* RESTORE CALLER'S REG 3        */
         L     R3,AFSREG3                                          0359
*   R4=AFSREG4;                     /* RESTORE CALLER'S REG 4        */
         L     R4,AFSREG4                                          0360
*   R7=AFSREG7;                     /* RESTORE CALLER'S REG 7        */
         L     R7,AFSREG7                                          0361
*   R14=AFSRET1;                    /* GET RETURN ADDRESS            */
         L     R14,AFSRET1                                         0362
*   RETURN;                         /* RETURN TO CALLER              */
@EL00003 DS    0H                                                  0363
@EF00003 DS    0H                                                  0363
@ER00003 BR    @14                                                 0363
*   RFY                                                            0364
*    (R3,                                                          0364
*     R4,                                                          0364
*     R7,                                                          0364
*     R14) UNRSTD;                                                 0364
         EJECT
*                                                                  0365
*/********************************************************************/
*/*                                                                  */
*/*  AFSFREE:  FREE ASPCT EXTN OF STORAGE                            */
*/*                                                                  */
*/*  INPUT:  ADDRESS OF EXTN IN REGISTER 1                           */
*/*                                                                  */
*/*  PROCESS:  SET UP REGS, ISSUE FREEMAIN MACRO TO FREE ASPCT EXTN. */
*/*                                                                  */
*/*  OUTPUT:  RETURN CODE IN REGISTER 15                             */
*/*             00 - NORMAL RETURN                                   */
*/*             44 - FREEMAIN RETURNED ERROR CODE                    */
*/*                                                                  */
*/********************************************************************/
*/*AFSFREE: CHART (AREF)                                             */
*/*HEADER                                                          0365
*/*  ILRAFS00                                                      0365
*/* AFSFREE - FREEMAIN THE ASPCT                                     */
*/*AFSFREE: E  ENTRY                                                 */
*/*         P  SAVE THE RETURN ADDRESS                               */
*/*         N  THIS NEXT TEST AND RESULTING LEGS OF CODE, IS A MACRO */
*/*         N  PASS TEST AND EXPANSION.                              */
*/*         D  (YES,,NO,%AFS07) SVC OK?                              */
*/*         P  LOAD REG 14 WITH SUBPOOL ID                           */
*/*         P  LOAD REG 0 WITH LENGTH                                */
*/*         P  LOAD REG 1 WITH ADDRESS OF AREA TO BE FREED           */
*/*         S  (,%AFS08) FREEMAIN: FREE THE ASPCT                    */
*/*%AFS07:  P  LOAD REG 0 WITH LENTH                                 */
*/*         P  LOAD REG 1 WITH ADDRESS OF AREA TO BE FREED           */
*/*         P  LOAD REG 4 WITH CURRENT TCB ADDRESS                   */
*/*         P  LOAD REG 7 WITH CURRENT ASCB ADDRESS                  */
*/*         P  LOAD REG 3 WITH SUBPOOL ID                            */
*/*         S  IEAVGM00: FREE THE ASPCT                              */
*/*%AFS08:  D  (YES,%AFS09,NO,) ZERO RETURN CODE?                    */
*/*         P  SAVE FREEMAINS RETURN CODE                            */
*/*         P  SET RETURN CODE TO 68                                 */
*/*%AFS09:  R  RETURN TO MAINLINE                                    */
*                                                                  0365
         EJECT
*AFSFREE:                           /* FREEMAIN AN EXTN OF ASPCT     */
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0365
AFSFREE  DS    0H                                                  0366
*   RFY                                                            0366
*     R14 RSTD;                                                    0366
*   AFSRET2=R14;                    /* SAVE THE RETURN ADDRESS       */
         ST    R14,AFSRET2                                         0367
*   RFY                                                            0368
*    (R0,                                                          0368
*     R1,                                                          0368
*     R3,                                                          0368
*     R4,                                                          0368
*     R7) RSTD;                                                    0368
*   R0=AFSLNGTH;                    /* GET THE LENGTH OF AREA TO BE
*                                      FREED                         */
         L     R0,AFSLNGTH                                         0369
*   R1=AFSWORK;                     /* GET ADDRESS OF AREA TO FREE   */
         LR    R1,AFSWORK                                          0370
*   R4=PSATOLD;                     /* GET CURRENT TCB ADDRESS       */
         L     R4,PSATOLD                                          0371
*   R7=PSAAOLD;                     /* GET CURRENT ASCB ADDRESS      */
         L     R7,PSAAOLD                                          0372
*   R3=AFSSPID;                     /* GET SUBPOOL ID                */
         L     R3,AFSSPID                                          0373
*   GENERATE REFS(R0,R1,R3,R4,R7,CVTCRMN,CVTMAP);                  0374
        FREEMAIN RC,A=(1),LV=(0),SP=(3),BRANCH=YES
*   RFY                                                            0375
*    (R0,                                                          0375
*     R1,                                                          0375
*     R3,                                                          0375
*     R4,                                                          0375
*     R7,                                                          0375
*     R14) UNRSTD;                                                 0375
*   RFY                                                            0376
*    (R14,                                                         0376
*     R15) RSTD;                                                   0376
*   IF R15^=AFSZERO                 /* FREEMAIN SUCCESSFUL?          */
*     THEN                          /* NO                            */
         LTR   R15,R15                                             0377
         BZ    @RF00377                                            0377
*     R15=AFS44;                    /* SET RETURN CODE TO 44         */
         LA    R15,44                                              0378
*   R14=AFSRET2;                    /* GET RETURN ADDRESS            */
@RF00377 L     R14,AFSRET2                                         0379
*   RFY                                                            0380
*    (R14,                                                         0380
*     R15) UNRSTD;                                                 0380
*   END AFSFREE;                                                   0381
@EL00004 DS    0H                                                  0381
@EF00004 DS    0H                                                  0381
@ER00004 BR    @14                                                 0381
*   END ILRAFS00;                                                  0382
         EJECT
*                                                                  0383
*/********************************************************************/
*/*                                                                  */
*/*  TMRLPME: RELEASE A SLOT BACK TO THE SYSTEM                      */
*/*                                                                  */
*/*  INPUT:   REGISTER 0 = CORRESPONDING RPN                         */
*/*           REGISTER 1 = PTR TO LPME                               */
*/*                                                                  */
*/*  PROCESS: SAVE THE RETURN ADDRESS. FLAG THE LPME AS INVALID. CALL*/
*/*           ILRFRSLT TO FREE THE SLOT. INCREMENT THE FREED SLOT    */
*/*           COUNTER. RETURN TO ILRALS00.                           */
*/*                                                                  */
*/*  OUTPUT:  SLOT RELEASED TO THE SYSTEM                            */
*/*                                                                  */
*/********************************************************************/
*/*TMRLPME: CHART (AREF)                                             */
*/*HEADER                                                          0383
*/*  ILRTMRLG                                                      0383
*/* TMRLPME: RELEASE THE SLOT ASSIGNED TO AN LPME                    */
*/*TMRLPME: E  ENTRY                                                 */
*/*         P  SAVE THE RETURN ADDRESS                               */
*/*         P  INITIALIZE LPMEPTR                                    */
*/*         P  FLAG THE LPME AS INVALID                              */
*/*         D  (ON,%TMR10,OFF,) I/O ERROR FLAG (ASPLIOER)            */
*/*         P  LOAD REG 1 WITH THE LSID TO BE FREED                  */
*/*         S  ILRFRSL1: FREE THE SLOT                               */
*/*%TMR10:  P  INCREMENT THE FREESLOT COUNTER                        */
*/*         R  RETURN TO ILRALS00                                    */
*/*TMRLPME: END                                                      */
*                                                                  0383
         EJECT
*TMRLPME:                                                          0383
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0383
TMRLPME  DS    0H                                                  0384
*   RFY                                                            0384
*    (R0,                                                          0384
*     R1,                                                          0384
*     R14,                                                         0384
*     ACEPTR,                                                      0384
*     ASPCTPTR,                                                    0384
*     LPMEPTR) RSTD;                                               0384
*                                                                  0384
*   /*****************************************************************/
*   /*                                                               */
*   /* OBTAIN A POINTER TO THE LPME TO BE FREED. FLAG THE LPME AS    */
*   /* INVALID. ONLY CALL FREESLOT ROUTINE TO RELEASE THOSE SLOTS    */
*   /* THAT HAVE NOT ENCOUNTERED A PERMANENT READ I/O ERROR (I.E.,   */
*   /* THE I/O ERROR FLAG IN THE LPME IS OFF). ALWAYS INCREMENT THE  */
*   /* FREESLOT COUNTER REGARDLESS IF THE SLOT HAS BEEN RELEASED TO  */
*   /* THE SYSTEM OR IF THE SLOT HAS BEEN LOST BECAUSE OF A PERMANENT*/
*   /* READ I/O ERROR.                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0385
*   SAVRET@=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,SAVRET@                                         0385
*   LPMEPTR=R1;                     /* INITIALIZE LPME POINTER       */
*   ASPLVALD=OFF;                   /* SET LPME VALID FLAG OFF     0387
*                                      INDICATING THAT THIS LPME IS
*                                      INVALID                       */
         NI    ASPLVALD(LPMEPTR),B'01111111'                       0387
*   IF ASPLIOER=OFF THEN                                           0388
         TM    ASPLIOER(LPMEPTR),B'00010000'                       0388
         BNZ   @RF00388                                            0388
*     DO;                                                          0389
*       R1=ASPVLSID;                /* PUT INTO REG1 THE LSID TO BE
*                                      FREED                         */
         L     @15,ASPVLSID-1(,LPMEPTR)                            0390
         LA    @15,0(,@15)                                         0390
         LR    R1,@15                                              0390
*       CALL ILRFRSL1;              /* FREE THE SLOT INDICATED BY THE
*                                      LSID                          */
         L     @15,ASMPFRSL(,ASMVTPTR)                             0391
         BALR  @14,@15                                             0391
*     END;                                                         0392
*   FREESLOT=FREESLOT+ONE;          /* INCREMENT FREESLOT COUNTER    */
@RF00388 LA    @15,1                                               0393
         AL    @15,FREESLOT                                        0393
         ST    @15,FREESLOT                                        0393
*   R14=SAVRET@;                    /* RESTORE REG 14 WITH SAVED   0394
*                                      RETURN ADDRESS                */
         L     R14,SAVRET@                                         0394
*   RETURN;                         /* RETURN TO CALLER              */
@EL00005 DS    0H                                                  0395
@EF00005 DS    0H                                                  0395
@ER00005 BR    @14                                                 0395
*   RFY                                                            0396
*    (R0,                                                          0396
*     R1,                                                          0396
*     R14,                                                         0396
*     ACEPTR,                                                      0396
*     ASPCTPTR,                                                    0396
*     LPMEPTR) UNRSTD;                                             0396
*   END TMRLPME;                                                   0397
@PB00005 DS    0H                                                  0397
*   END ILRTMRLG                                                   0398
*                                                                  0398
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (ILRACE  )                                       */
*/*%INCLUDE SYSLIB  (ILRASMVT)                                       */
*/*%INCLUDE SYSLIB  (ILRASPCT)                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (ILREPATH)                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (ILRALS00)                                       */
*/*%INCLUDE SYSLIB  (ILRAFS00)                                       */
*                                                                  0398
*       ;                                                          0398
@DATA    DS    0H
@SM01449 MVC   ESTAELST(0),ESTAEFMT
@DATD    DSECT
         DS    0F
ILRTMRLG CSECT
         DS    0F
@CF00088 DC    F'0'
@CF00055 DC    F'1'
@CF00108 DC    F'2'
@CF01025 DC    F'5'
@CF00241 DC    F'48'
@CF01427 DC    F'230'
@CF01361 DC    F'255'
@CF01408 DC    F'257'
@CF01447 DC    F'1088'
@CF01446 DC    F'65280'
@DATD    DSECT
         DS    0D
ASPEXPTR DS    A
FREESLOT DS    F
SAVRET@  DS    F
ALSRETRN DS    F
ALSASPCT DS    A
ALSRPN   DS    F
ALSA     DS    F
ALSB     DS    F
AFSASPCT DS    A
AFSLNGTH DS    F
AFSRET1  DS    F
AFSRET2  DS    F
AFSA     DS    F
AFSSPID  DS    F
AFSREG3  DS    F
AFSREG4  DS    F
AFSREG7  DS    F
AFSB     DS    H
         DS    CL2
EPATH    DS    CL44
         ORG   EPATH
EPAVSAM  DS    CL44
         ORG   EPAVSAM
EPAOWKA  DS    AL4
EPAVWKA  DS    AL4
         ORG   EPAVWKA
EPATMWKA DS    AL4
         ORG   EPATMWKA
EPASWKA  DS    AL4
         ORG   EPAVSAM+8
EPAAASP  DS    AL4
         ORG   EPAAASP
EPADSLST DS    AL4
         ORG   EPAVSAM+12
EPABASP  DS    AL4
         ORG   EPABASP
EPATMIBA DS    AL4
         ORG   EPAVSAM+16
EPARASP  DS    AL4
         ORG   EPARASP
EPATMACB DS    AL4
         ORG   EPAVSAM+20
EPARTYRG DS    AL4
         ORG   EPARTYRG
EPABKSLT DS    FL4
         ORG   EPABKSLT
EPATMISV DS    AL4
         ORG   EPAVSAM+24
EPAFLAG1 DS    BL1
         ORG   EPAFLAG1
EPAVSAMI DS    BL1
EPAGRPOP EQU   EPAFLAG1+0
         ORG   EPAGRPOP
EPARLG   EQU   EPAGRPOP+0
EPASAVE  EQU   EPAGRPOP+0
EPAACT   EQU   EPAGRPOP+0
         ORG   EPAFLAG1+0
EPAACASR EQU   EPAFLAG1+0
EPAASGN  EQU   EPAFLAG1+0
EPAUNSAV EQU   EPAFLAG1+0
EPARPLB  EQU   EPAFLAG1+0
         ORG   EPAVSAM+25
EPAFLAG2 DS    BL1
         ORG   EPAFLAG2
EPATMXIT DS    BL1
EPAWARM  EQU   EPAFLAG2+0
EPACOLD  EQU   EPAFLAG2+0
EPABUILD EQU   EPAFLAG2+0
EPAMAST  EQU   EPAFLAG2+0
EPATMI   EQU   EPAFLAG2+0
EPARECUR EQU   EPAFLAG2+0
@NM00018 EQU   EPAFLAG2+0
         ORG   EPAVSAM+26
@NM00019 DS    FL2
EPAACE   DS    AL4
         ORG   EPAACE
EPAMSECB DS    AL4
         ORG   EPAVSAM+32
EPATMRSV DS    AL4
EPAABEND DS    AL4
         ORG   EPAABEND
EPATMIRT DS    AL4
         ORG   EPAVSAM+40
EPATPART DS    AL4
         ORG   EPATH+44
PARMLIST DS    CL12
         ORG   PARMLIST
PARMOPCD DS    FL1
@NM00044 DS    CL3
PARMSYM  DS    AL4
PARMEPTH DS    AL4
         ORG   PARMLIST+12
TMRSA    DS    CL72
         ORG   TMRSA
@NM00045 DS    CL12
TMRSAREG DS    CL60
         ORG   TMRSA+72
ILRTMRLG CSECT
         NOPR  ((@ENDDATD-@DATD)/257*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV01351 DC    V(ILRACT)
@CV01353 DC    V(ILRRLG)
@CV01354 DC    V(ILRSAV)
@CV01356 DC    V(ILRTMI01)
@CV01357 DC    V(ILRVSAMI)
         DS    0D
ILRCBTM1 DC    AL4(STRTPGM@)
ALSLPMEL DC    AL4(4)
@CC01364 DC    C'ILRTMI00'
@CC01438 DC    C'LPME'
@CC01439 DC    C'ASST'
@DATD    DSECT
WKARLEN EQU @SIZDATD
@DATD    DSECT
ESTAELST ESTAE MF=L
ILRTMRLG CSECT
ESTAEFMT ESTAE TERM=YES,MF=L
ESTAELEN DC    A(*-ESTAEFMT)
ILRTMRLG CSECT
TMRPATCH DC    ((@DATA-@MAINENT)/19)X'00'
         ORG   TMRPATCH
         DC    C'MAINTENANCE AREA'
         DC    34X'00'
         ORG
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ILRTMRLG CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
AFSWORK  EQU   @11
AFSEXPTR EQU   @12
ALSCNTL  EQU   @12
ALSL     EQU   @07
ALSLPME  EQU   @11
ALSLEPTR EQU   @08
ALSEXPTR EQU   @02
BACKSLOT EQU   @02
ACEPTR   EQU   @05
ASMVTPTR EQU   @03
ASPCTPTR EQU   @06
LPMEPTR  EQU   @01
EPAPTR   EQU   @04
R1       EQU   @01
RTASPCT@ EQU   @01
SMSIECB@ EQU   @06
WKARPTR  EQU   @09
AFSRTCD  EQU   @07
RETCODE  EQU   @15
TMIRTCD  EQU   @07
GPR00F   EQU   @00
GPR01F   EQU   @01
GPR15F   EQU   @15
GPR00P   EQU   @00
GPR01P   EQU   @01
R0       EQU   @00
R3       EQU   @03
R4       EQU   @04
R7       EQU   @07
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
R10      EQU   @10
R2       EQU   @02
R5       EQU   @05
R6       EQU   @06
R8       EQU   @08
R9       EQU   @09
         ENTRY ILRCRTM1
         ENTRY ILRCRTM5
         ENTRY ILRCBTM1
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
ACE      EQU   0
ACEFQPA  EQU   ACE
ACEFLG1  EQU   ACE+9
ACENOACT EQU   ACEFLG1
ACEFLG3  EQU   ACE+11
ACELGN   EQU   ACE+16
ACERPN   EQU   ACELGN+4
ACESYM   EQU   ACE+24
ACESRCID EQU   ACESYM
ASMVT    EQU   0
ASMFLAG1 EQU   ASMVT
ASMFLAG2 EQU   ASMVT+1
ASMNOSAV EQU   ASMFLAG2
ASMSTAGQ EQU   ASMVT+32
ASMPCCWQ EQU   ASMVT+64
ASMBKSLT EQU   ASMVT+108
ASMVSC   EQU   ASMVT+116
ASMSLOTV EQU   ASMVT+128
ASMLSAI  EQU   ASMVT+144
ASMGOSQS EQU   ASMVT+152
ASMTCBPT EQU   ASMVT+164
ASMTMECB EQU   ASMVT+168
ASMRLGRQ EQU   ASMVT+172
ASMRLGWQ EQU   ASMVT+176
ASMTASCB EQU   ASMVT+180
ASMPFRSL EQU   ASMVT+196
ASMPEX   EQU   ASMVT+224
ASMPSAV  EQU   ASMVT+244
ASMPACT  EQU   ASMVT+248
ASMPRLG  EQU   ASMVT+252
ASMACEPC EQU   ASMVT+344
ASMWKSA1 EQU   ASMVT+368
ASMWKSA2 EQU   ASMVT+448
ASMWKSA3 EQU   ASMVT+528
ASMWKSA4 EQU   ASMVT+608
ASMWKSA5 EQU   ASMVT+688
ASMPOOLS EQU   0
ASMCPAVQ EQU   ASMPOOLS+8
ASMCPAVL EQU   ASMCPAVQ
ASMCPRSQ EQU   ASMPOOLS+16
ASPCT    EQU   0
ASPHDR   EQU   ASPCT
ASPBKEY  EQU   ASPHDR+8
ASPFLAG  EQU   ASPHDR+28
ASPMAXPN EQU   ASPHDR+32
ASPAEXCT EQU   ASPHDR+46
ASPASSTP EQU   ASPCT+48
ASPLPMES EQU   ASPCT+64
ASPEXTSN EQU   0
ASPEHDR  EQU   ASPEXTSN
ASPEIDNT EQU   ASPEHDR
ASPEXKEY EQU   ASPEHDR+8
ASPSECTA EQU   ASPEXTSN+64
ASPLPME  EQU   0
ASPLPFLG EQU   ASPLPME
ASPLVALD EQU   ASPLPFLG
ASPLIOER EQU   ASPLPFLG
ASPLSVRP EQU   ASPLPFLG
ASPVLSID EQU   ASPLPME+1
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
MSIECB@  EQU   0
MSIECB   EQU   0
SLOTV    EQU   0
ALSPROC  EQU   0
ILRFRSL1 EQU   0
ILRTMI00 EQU   0
GMACELL  EQU   0
GMANEXT  EQU   GMACELL
ILRPEX   EQU   0
ASM1WKSV EQU   ASMWKSA1
ASM1RGSV EQU   ASM1WKSV
ASM1WRKA EQU   ASM1WKSV+60
ASM2WKSV EQU   ASMWKSA2
ASM2WRKA EQU   ASM2WKSV+52
ASM2FLGS EQU   ASM2WRKA+12
ASM3WKSV EQU   ASMWKSA3
ASM4WKSV EQU   ASMWKSA4
ASM4RGSV EQU   ASM4WKSV
ASM5WKSV EQU   ASMWKSA5
ASM5RGSV EQU   ASM5WKSV
ASPLPMEE EQU   ASPSECTA
ASPASST  EQU   ASPSECTA
ASPASSTE EQU   ASPASST
CVTPTR   EQU   FLCCVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTCRMN  EQU   CVTS01+156
CVTASMVT EQU   CVTS01+356
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
PSARSVTE EQU   PSARSVT
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
ASM5FLGS EQU   ASM5WKSV+64
ASM5AIA  EQU   ASM5WKSV+60
ASM5GCTR EQU   ASM5WKSV+56
ASM5SR14 EQU   ASM5WKSV+52
@NM00006 EQU   ASM5RGSV+4
ASM5RG2  EQU   ASM5RGSV
@NM00005 EQU   ASM4RGSV+4
ASM4RG2  EQU   ASM4RGSV
ASM3SR13 EQU   ASM3WKSV+28
ASM3R14B EQU   ASM3WKSV+24
ASM3R14A EQU   ASM3WKSV+20
ASM3GRPA EQU   ASM3WKSV+16
ASM3TMPA EQU   ASM3WKSV+12
ASM3PIOP EQU   ASM3WKSV+8
ASM3GENQ EQU   ASM3WKSV+4
ASM3SWPQ EQU   ASM3WKSV
ASM2SR14 EQU   ASM2WRKA+16
@NM00004 EQU   ASM2WRKA+13
ASM2WFLG EQU   ASM2FLGS
ASM2RFLG EQU   ASM2FLGS
ASM2DUPQ EQU   ASM2WRKA+8
ASM2CAQ  EQU   ASM2WRKA+4
ASM2PAQ  EQU   ASM2WRKA
ASM2RGSV EQU   ASM2WKSV
ASM1NXTA EQU   ASM1WRKA+4
ASM1ASCB EQU   ASM1WRKA
ASM1RG15 EQU   ASM1RGSV+56
@NM00003 EQU   ASM1RGSV+4
ASM1RG1  EQU   ASM1RGSV
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00017 EQU   CVTFIX+248
@NM00016 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
ASPSLOT  EQU   ASPVLSID+1
ASPPRTNN EQU   ASPVLSID
@NM00015 EQU   ASPLPFLG
ASPLOPIN EQU   ASPLPFLG
ASPLSAVE EQU   ASPLPFLG
@NM00014 EQU   ASPEXTSN+1088
@NM00013 EQU   ASPEHDR+24
ASPASSTI EQU   ASPEHDR+22
@NM00012 EQU   ASPEHDR+21
ASPASSTN EQU   ASPEHDR+20
ASPEXTNM EQU   ASPEXKEY+8
ASPESSYM EQU   ASPEXKEY
@NM00011 EQU   ASPEHDR+4
@NM00010 EQU   ASPCT+1088
ASPLEXCT EQU   ASPHDR+44
ASPSAVCT EQU   ASPHDR+40
ASPBKSLT EQU   ASPHDR+36
@NM00009 EQU   ASPHDR+29
@NM00008 EQU   ASPFLAG
ASPSAVRP EQU   ASPFLAG
ASPSAVED EQU   ASPFLAG
ASPLGE   EQU   ASPHDR+24
ASPASCB  EQU   ASPHDR+20
@NM00007 EQU   ASPBKEY+8
ASPSSYM  EQU   ASPBKEY
ASPLGID  EQU   ASPHDR+4
ASPIDENT EQU   ASPHDR
ASMCPRES EQU   ASMCPRSQ+4
ASMCPTAK EQU   ASMCPRSQ
ASMCPCNT EQU   ASMCPAVQ+4
ASMCPEXT EQU   ASMPOOLS+6
ASMCPSIZ EQU   ASMPOOLS+4
ASMCPID  EQU   ASMPOOLS
ASMRSV12 EQU   ASMVT+1000
ASMSAVE  EQU   ASMVT+928
ASMWKSA7 EQU   ASMVT+848
ASMWKSA6 EQU   ASMVT+768
ASMSWKPC EQU   ASMVT+328
ASMBWKPC EQU   ASMVT+312
ASMIOEPC EQU   ASMVT+296
ASMRSV10 EQU   ASMVT+280
ASMPVACE EQU   ASMVT+276
ASMPIOFR EQU   ASMVT+272
ASMPVACQ EQU   ASMVT+268
ASMPMSGS EQU   ASMVT+264
ASMPMSG0 EQU   ASMVT+260
ASMPFRLG EQU   ASMVT+256
ASMPCMP  EQU   ASMVT+240
ASMPCMPA EQU   ASMVT+236
ASMPCMPN EQU   ASMVT+232
ASMPCMPD EQU   ASMVT+228
ASMVRMTR EQU   ASMVT+220
ASMPSRBC EQU   ASMVT+216
ASMPSRMT EQU   ASMVT+212
ASMPSWPD EQU   ASMVT+208
ASMPTM   EQU   ASMVT+204
ASMPFRSW EQU   ASMVT+200
ASMPQIOE EQU   ASMVT+192
ASMRSV8  EQU   ASMVT+184
ASMREQCT EQU   ASMVT+160
ASMGOSWK EQU   ASMGOSQS+4
ASMGOSWT EQU   ASMGOSQS
ASMLSAIH EQU   ASMLSAI+4
ASMLSAIL EQU   ASMLSAI
ASMCINV  EQU   ASMVT+140
ASMSTGXA EQU   ASMVT+136
ASMLGVT  EQU   ASMVT+132
ASMERRS  EQU   ASMVT+124
ASMNVSC  EQU   ASMVT+120
ASMSLOTS EQU   ASMVT+112
ASMRSV7  EQU   ASMVT+92
ASMPSRB  EQU   ASMVT+88
ASMSRBCT EQU   ASMVT+84
ASMIOCNT EQU   ASMVT+80
ASMBURST EQU   ASMVT+76
ASMPCCWN EQU   ASMVT+72
ASMPCCWC EQU   ASMPCCWQ+4
ASMPCCWA EQU   ASMPCCWQ
ASMRSV6  EQU   ASMVT+48
ASMIORQC EQU   ASMVT+44
ASMIORQR EQU   ASMVT+40
ASMSTAGL EQU   ASMSTAGQ+4
ASMSTAGF EQU   ASMSTAGQ
ASMRSV5  EQU   ASMVT+28
ASMMSGBF EQU   ASMVT+24
ASMEREC  EQU   ASMVT+20
ASMTRPAG EQU   ASMVT+16
ASMGOS   EQU   ASMVT+12
ASMPART  EQU   ASMVT+8
ASMSART  EQU   ASMVT+4
ASMDSSFS EQU   ASMVT+2
ASMWARM  EQU   ASMFLAG2
ASMQUICK EQU   ASMFLAG2
ASMNOTPT EQU   ASMFLAG2
ASMNOTMR EQU   ASMFLAG2
ASMCALLQ EQU   ASMFLAG2
ASMPLPAS EQU   ASMFLAG1
ASMCOMMF EQU   ASMFLAG1
ASMPLPAF EQU   ASMFLAG1
ASMNODPX EQU   ASMFLAG1
ASMRSV1  EQU   ASMFLAG1
ASMNOLCL EQU   ASMFLAG1
ASMNOCWQ EQU   ASMFLAG1
ASMDUPLX EQU   ASMFLAG1
@NM00002 EQU   ACE+40
ACESRBWK EQU   ACE+36
ACEECB   EQU   ACE+32
ACEAIAPT EQU   ACESYM+4
ACEVLSID EQU   ACESRCID+1
@NM00001 EQU   ACESRCID
ACETLPME EQU   ACERPN
ACELGID  EQU   ACELGN
ACELGE   EQU   ACE+12
ACERSV10 EQU   ACEFLG3
ACERSV9  EQU   ACEFLG3
ACERSV8  EQU   ACEFLG3
ACELPMEC EQU   ACEFLG3
ACERSV7  EQU   ACEFLG3
ACERSV6  EQU   ACEFLG3
ACEPRINO EQU   ACEFLG3
ACEGRPRQ EQU   ACEFLG3
ACEFLG2  EQU   ACE+10
ACERSV5  EQU   ACEFLG1
ACERSV4  EQU   ACEFLG1
ACERSV3  EQU   ACEFLG1
ACERSV2  EQU   ACEFLG1
ACEOVRID EQU   ACEFLG1
ACETRPWT EQU   ACEFLG1
ACEUSYM  EQU   ACEFLG1
ACEOP    EQU   ACE+8
ACEBQPA  EQU   ACE+4
@NM00043 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00042 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00041 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00040 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00039 EQU   FLCFSA
@NM00038 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00037 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00036 EQU   FLCIOA
@NM00035 EQU   FLCMCLA+15
@NM00034 EQU   FLCMCLA+14
@NM00033 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00032 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00031 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00030 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00029 EQU   FLCPER
@NM00028 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00027 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00026 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00025 EQU   FLCPIILC
@NM00024 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00023 EQU   FLCSVILC
@NM00022 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00021 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00020 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00261 EQU   @RC00259
@RC00265 EQU   @RC00259
@RT00277 EQU   ALSLOOP
@RC00314 EQU   @RC00310
@RF00323 EQU   @RC00320
@RC00336 EQU   @RC00332
@RC00348 EQU   @RC00345
@PB00003 EQU   @PB00005
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   ILRTMRLG,(C'PLS0803',0701,76315)
