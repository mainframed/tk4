         TITLE 'IKJEFA51 - ACCOUNT / READ ROUTINE                      *
                        '
IKJEFA51 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKJEFA51  75.006'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @11,8(,@13)                                         0001
         LR    @13,@11                                             0001
*          ACIOPTR=REG1;                /* INITIALIZE PTR TO READ  0018
*                                          PARAMETER BLOCK           */
         LR    ACIOPTR,REG1                                        0018
*          DCBREG=ACIODCBA;             /* LOAD DCB BASE REGISTER    */
         SLR   DCBREG,DCBREG                                       0019
         ICM   DCBREG,7,ACIODCBA(ACIOPTR)                          0019
*          /* MOVE L-FORMS OF O/S MACROS INTO DYNAMIC STORAGE        */
*          DYNLFORM(1:INLINLNG)=INLINLFM(1:INLINLNG);              0020
         L     @10,INLINLNG                                        0020
         BCTR  @10,0                                               0020
         EX    @10,@SM00203                                        0020
*          /* ESTABLISH A BASE REGISTER FOR DCB MAPPING              */
*          GEN (USING IHADCB,DCBREG)                               0021
*           REFS(DCBREG);                                          0021
         USING IHADCB,DCBREG
*          ACIONMBR=1;                  /* INITIALIZE NUMBER OF MEMBER
*                                          BLOCKS TO 1               */
         MVI   ACIONMBR(ACIOPTR),X'01'                             0022
*          RFY REG0 RSTD;                                          0023
*          REG0=LENGTH(BLDLLIST);       /* GET LENGTH OF BLDLLIST    */
         LA    REG0,344                                            0024
*          /* ISSUE O/S GETMAIN MACRO FOR BLDLLIST AND DECB          */
*          GEN (GETMAIN ,LV=(REG0),A=BLDLPTR,MF=(E,DYNGTLST))      0025
*            REFS(REG0,DYNGTLST) SETS(BLDLPTR);                    0025
         GETMAIN ,LV=(REG0),A=BLDLPTR,MF=(E,DYNGTLST)
*          RFY REG0 UNRSTD;                                        0026
*          /* CHECK RETURN CODE                                      */
*          RFY REG15 RSTD;              /* RESTRICT RETURN CODE REG  */
*          RETNCODE=REG15;              /* SAVE GETMAIN RETURN CODE  */
         LR    RETNCODE,REG15                                      0028
*          RFY REG15 UNRSTD;            /* RELEASE RETURN CODE REG   */
*          IF RETNCODE^=0                                          0030
*            THEN                       /* GETMAIN FAILED            */
         LTR   RETNCODE,RETNCODE                                   0030
         BZ    @RF00030                                            0030
*              RETURN CODE(12);         /* RETURN WITH NO SPACE CODE */
         L     @13,4(,@13)                                         0031
         L     @00,@SIZDATD                                        0031
         LR    @01,@11                                             0031
         FREEMAIN R,LV=(0),A=(1)
         LA    @15,12                                              0031
         L     @14,12(,@13)                                        0031
         LM    @00,@12,20(@13)                                     0031
         BR    @14                                                 0031
*          BLDLDATA=BLDLDATA&&BLDLDATA; /* CLEAR BLDL DATA AREA      */
@RF00030 L     @10,BLDLPTR                                         0032
         XC    BLDLDATA(144,@10),BLDLDATA(@10)                     0032
*          REG1=ADDR(RDDECB);           /* GET ADDRESS OF DECB       */
         LA    REG1,RDDECB(,@10)                                   0033
*          GEN (MVC 0(DECBLN,REG1),INLINRD)                        0034
*            REFS(INLINRD,DECBLN,REG1) SETS(RDDECB);               0034
         MVC 0(DECBLN,REG1),INLINRD
*          ACIOLINK=BLDLPTR;            /* INIT. ANCHOR OF BLDL CHAIN*/
         L     @10,BLDLPTR                                         0035
         ST    @10,ACIOLINK(,ACIOPTR)                              0035
*          /* HAVE DIRECTORY OPERATIONS BEEN REQUESTED ?             */
*          IF ACIOFL03='1'B                                        0036
*            THEN                       /* UADS DIRECTORY IS NEEDED  */
         TM    ACIOFL03(ACIOPTR),B'00100000'                       0036
         BO    @RT00036                                            0036
*              GO TO IKJADIRC;          /* GO TO DIRECTORY HANDLER   */
*          /* WAS A MEMBER NAME OR A BLDL ENTRY PROVIDED             */
*          IF ACIOFL02='0'B                                        0038
*            THEN                       /* ACIOMPTR PTS TO MEMBERNAME*/
         TM    ACIOFL02(ACIOPTR),B'01000000'                       0038
         BNZ   @RF00038                                            0038
*              MEMBRNAM=MEMNAME;        /* PICK UP MEMBER NAME       */
         L     @10,ACIOMPTR(,ACIOPTR)                              0039
         MVC   MEMBRNAM(8),MEMNAME(@10)                            0039
*            ELSE                       /* ACIOMPTR PTS TO BLDL LIST */
*              MEMBRNAM=ACIOMPTR->BLDLNAME(1);                     0040
         B     @RC00038                                            0040
@RF00038 L     @10,ACIOMPTR(,ACIOPTR)                              0040
         MVC   MEMBRNAM(8),BLDLNAME(@10)                           0040
*IKJALSET: /* CTL. PASSED HERE AFTER INITIAL DIRECTORY READ ALSO     */
*          USERIDLN=8;                  /* INIT'LZE USRID LNTH TO MAX*/
@RC00038 DS    0H                                                  0041
IKJALSET LA    USERIDLN,8                                          0041
*          DO WHILE MEMBRNAM(USERIDLN)=' ';/* CHECK FOR A NON BLANK  */
         B     @DE00042                                            0042
@DL00042 DS    0H                                                  0043
*            USERIDLN=USERIDLN-1;       /* DECREMENT LENGTH BY ONE   */
         BCTR  USERIDLN,0                                          0043
*            END;                                                  0044
@DE00042 LA    @10,MEMBRNAM-1(USERIDLN)                            0044
         CLI   0(@10),C' '                                         0044
         BE    @DL00042                                            0044
*          USERIDLN=USERIDLN-1;         /* POINT TO INDEX BYTE       */
         BCTR  USERIDLN,0                                          0045
*          /* THE FOLLOWING SEQUENCE WILL DO BLDLS ON THE MEMBER NAME*/
*          /* WITH THE 'INDEX' BYTE INCREMENTED BY ONE UNTIL A       */
*          /* 'NOT FOUND' RESPONSE IS RECEIVED.  UPON EXIT, 'NMBR'   */
*          /* WILL REFLECT THE TOTAL NUMBER OF MEMBER BLOCKS WHICH   */
*          /* EXIST FOR THIS USERID AND 'ACIOLINK' WILL POINT TO A   */
*          /* CHAIN OF BLDL ENTRIES, ONE FOR EACH MEMBER THUS FOUND. */
*          NUMOFENT=10;                 /* MAXIMUM OF TEN ENTRIES    */
         L     @10,BLDLPTR                                         0046
         MVC   NUMOFENT(2,@10),@CH00080                            0046
*          ENTLNGTH=LENGTH(BLDLENTY);   /* LENGTH = 14 BYTES         */
         MVC   ENTLNGTH(2,@10),@CH00081                            0047
*          DO I=1 TO 10 ;               /* INIT EACH MEMBER NAME     */
         LA    I,1                                                 0048
@DL00048 DS    0H                                                  0049
*            BLDLNAME(I)=MEMBRNAM;      /* GET BASE MEMBER NAME      */
         L     @10,BLDLPTR                                         0049
         LR    @05,I                                               0049
         MH    @05,@CH00081                                        0049
         ST    @05,@TF00001                                        0049
         ALR   @05,@10                                             0049
         AL    @05,@CF00205                                        0049
         MVC   BLDLNAME-4(8,@05),MEMBRNAM                          0049
*            INDEXPTR=USERIDLN+ADDR(BLDLNAME(I)); /* POINT TO 'INDEX'*/
         L     INDEXPTR,@TF00001                                   0050
         AL    @10,@CF00205                                        0050
         LA    INDEXPTR,BLDLNAME-4(INDEXPTR,@10)                   0050
         ALR   INDEXPTR,USERIDLN                                   0050
*            SYSINDEX=I+239;            /* BUMP INDEX                */
         LA    @10,239                                             0051
         ALR   @10,I                                               0051
         STC   @10,SYSINDEX(,INDEXPTR)                             0051
*            END;                                                  0052
         AH    I,@CH00032                                          0052
         CH    I,@CH00080                                          0052
         BNH   @DL00048                                            0052
*          /* NOW, ISSUE BLDL MACRO TO SEE IF THIS MEMBERNAME EXISTS */
*          RFY REG0 RSTD;                                          0053
*          REG0=BLDLPTR;                /* GET ADDRESS OF BLDL LIST  */
         L     REG0,BLDLPTR                                        0054
*          GEN (BLDL (DCBREG),(0))                                 0055
*           REFS(DCBREG,REG0);                                     0055
         BLDL (DCBREG),(0)
*          RFY REG0 UNRSTD;                                        0056
*          RFY REG15 RSTD;              /* RESTRICT RETURN CODE REG  */
*          BLDLRTCD=REG15;              /* SAVE BLDL RETURN CODE     */
         LR    BLDLRTCD,REG15                                      0058
*          RFY REG15 UNRSTD;            /* RELEASE RETURN CODE REG   */
*          IF BLDLRTCD>=8               /* CHECK RETURN CODE         */
*            THEN                       /* BLDL HAD AN ERROR         */
         CH    BLDLRTCD,@CH00055                                   0060
         BL    @RF00060                                            0060
*              RETURN CODE(8);          /* RETURN WITH BLDL ERROR COD*/
         L     @13,4(,@13)                                         0061
         L     @00,@SIZDATD                                        0061
         LR    @01,@11                                             0061
         FREEMAIN R,LV=(0),A=(1)
         LA    @15,8                                               0061
         L     @14,12(,@13)                                        0061
         LM    @00,@12,20(@13)                                     0061
         BR    @14                                                 0061
*          IF R(1)=0                    /* WAS FIRST MEMBER FOUND?   */
*            THEN                       /* NO,                       */
@RF00060 L     @10,BLDLPTR                                         0062
         CLI   R(@10),0                                            0062
         BNE   @RF00062                                            0062
*              RETURN CODE(4);          /* RETURN WITH NOT FOUND CODE*/
         L     @13,4(,@13)                                         0063
         L     @00,@SIZDATD                                        0063
         LR    @01,@11                                             0063
         FREEMAIN R,LV=(0),A=(1)
         LA    @15,4                                               0063
         L     @14,12(,@13)                                        0063
         LM    @00,@12,20(@13)                                     0063
         BR    @14                                                 0063
*          DO WHILE R(ACIONMBR)^=0;     /* SCAN BLDL LIST FOR MEMBERS*/
@RF00062 B     @DE00064                                            0064
@DL00064 DS    0H                                                  0065
*            ACIONMBR=ACIONMBR+1;       /* COUNT MEMBER              */
         LA    @10,1                                               0065
         SLR   @07,@07                                             0065
         IC    @07,ACIONMBR(,ACIOPTR)                              0065
         ALR   @10,@07                                             0065
         STC   @10,ACIONMBR(,ACIOPTR)                              0065
*            END;                                                  0066
@DE00064 SLR   @10,@10                                             0066
         IC    @10,ACIONMBR(,ACIOPTR)                              0066
         LR    @07,@10                                             0066
         MH    @07,@CH00081                                        0066
         L     @03,BLDLPTR                                         0066
         SLR   @00,@00                                             0066
         IC    @00,R-14(@07,@03)                                   0066
         CH    @00,@CH00166                                        0066
         BNE   @DL00064                                            0066
*          ACIONMBR=ACIONMBR-1;         /* DECREMENT MEMBER COUNT    */
         BCTR  @10,0                                               0067
         STC   @10,ACIONMBR(,ACIOPTR)                              0067
*          /* 'ACIONMBR' AT THIS POINT PROPERLY REFLECTS THE NUMBER  */
*          /* OF MEMBER BLOCKS TO BE READ FOR THE GIVEN USERID.  THIS*/
*          /* NUMBER IS NOW UTILIZED IN COMPUTING THE SIZE OF THE STG*/
*          /* NECESSARY TO HOLD ALL THE REQUESTED MEMBER BLOCKS.     */
*          /* WAS A SINGLE PHYSICAL MEMBER READ REQUESTED            */
*          IF ACIOFL01='1'B                                        0068
*            THEN                       /* SINGLE MEMBER I/O DESIRED */
         TM    ACIOFL01(ACIOPTR),B'10000000'                       0068
         BNO   @RF00068                                            0068
*              ACIONMBR=1;              /* SET NUMBER OF BLOCKS TO 1 */
         MVI   ACIONMBR(ACIOPTR),X'01'                             0069
*          RFY REG0 RSTD;                                          0070
@RF00068 DS    0H                                                  0071
*          REG0=DCBBLKSI*ACIONMBR;      /* LENGTH VALUE FOR GETMAIN =
*                                          BLKSIZE FROM UADS DCB*NMBR*/
         LH    @10,DCBBLKSI                                        0071
         SLR   @05,@05                                             0071
         IC    @05,ACIONMBR(,ACIOPTR)                              0071
         MR    @04,@10                                             0071
         LR    REG0,@05                                            0071
*          /* SEE IF ROOM FOR A NEW MEMBER IS WANTED (ADD-AUGMENT)   */
*          IF ACIOFL04='1'B                                        0072
*            THEN                       /* SPACE FOR ONE EXTRA WANTED*/
         TM    ACIOFL04(ACIOPTR),B'00010000'                       0072
         BNO   @RF00072                                            0072
*              REG0=REG0+DCBBLKSI;      /* ADD 1 MORE BLOCK LENGTH   */
         ALR   REG0,@10                                            0073
*          FREELVAL=REG0;               /* SAVE LENGTH OF GETMAIN    */
@RF00072 ST    REG0,FREELVAL                                       0074
*          /* ISSUE O/S GETMAIN MACRO FOR UADS INPUT BUFFER          */
*          GEN (GETMAIN ,LV=(REG0),A=ANSRPTR,MF=(E,DYNGTLST))      0075
*            REFS(REG0,DYNGTLST) SETS(ANSRPTR);                    0075
         GETMAIN ,LV=(REG0),A=ANSRPTR,MF=(E,DYNGTLST)
*          RFY REG0 UNRSTD;                                        0076
*          /* CHECK RETURN CODE                                      */
*          RFY REG15 RSTD;              /* RESTRICT RETURN CODE REG  */
*          RETNCODE=REG15;              /* SAVE GETMAIN RETURN CODE  */
         LR    RETNCODE,REG15                                      0078
*          RFY REG15 UNRSTD;            /* RELEASE RETURN CODE REG   */
*          IF RETNCODE^=0                                          0080
*            THEN                       /* GETMAIN FAILED            */
         LTR   RETNCODE,RETNCODE                                   0080
         BZ    @RF00080                                            0080
*              RETURN CODE(12);         /* RETURN WITH NO SPACE CODE */
         L     @13,4(,@13)                                         0081
         L     @00,@SIZDATD                                        0081
         LR    @01,@11                                             0081
         FREEMAIN R,LV=(0),A=(1)
         LA    @15,12                                              0081
         L     @14,12(,@13)                                        0081
         LM    @00,@12,20(@13)                                     0081
         BR    @14                                                 0081
*          ACIOBUFR=ANSRPTR;            /* SET PTR TO INPUT BUFFER   */
@RF00080 L     @10,ANSRPTR                                         0082
         STCM  @10,7,ACIOBUFR(ACIOPTR)                             0082
*          SYNADSAV=DCBSYNAD;           /* SAVE CALLER'S SYNAD ADDR  */
         MVC   SYNADSAV(4),DCBSYNAD                                0083
*          ERRSWTCH='00'X;              /* INIT ERROR SW = 'NO ERROR'*/
         MVI   ERRSWTCH,X'00'                                      0084
*          DCBSYNAD(2:4)=ADDR(IKJASYND);/* SET SYNAD EXIT ADDR       */
         LA    @07,IKJASYND                                        0085
         STCM  @07,7,DCBSYNAD+1                                    0085
*          RFY (BUFREG,REG0) RSTD;                                 0086
*          BUFREG=ACIOBUFR;             /* PTR TO FIRST INPUT BUFFER */
         LR    BUFREG,@10                                          0087
*          /* THE FOLLOWING ITERATIVE DO-GROUP EXECUTES A FIND, READ,*/
*          /* AND CHECK SEQUENCE UNTIL ALL REQUESTED MEMBER BLOCKS   */
*          /* HAVE BEEN ACQUIRED.                                    */
*          DO I=1 TO ACIONMBR;                                     0088
         LA    I,1                                                 0088
         B     @DE00088                                            0088
@DL00088 DS    0H                                                  0089
*            REG0=ADDR(BLDLTTRK(I));    /* POINT TO NEXT TTR         */
         LR    @10,I                                               0089
         MH    @10,@CH00081                                        0089
         L     @15,BLDLPTR                                         0089
         AL    @15,@CF00206                                        0089
         LA    REG0,BLDLTTRK-12(@10,@15)                           0089
*            /* ISSUE OS/360 FIND MACRO, TYPE C, TO FIND USERID      */
*            GEN (FIND  (DCBREG),(REG0),C)                         0090
*             REFS(DCBREG,REG0);                                   0090
         FIND  (DCBREG),(REG0),C
*            /* READ A MEMBER BLOCK                                  */
*            REG1=ADDR(RDDECB(I));      /* GET ADDRESS OF DECB       */
         LR    @10,I                                               0091
         MH    @10,@CH00090                                        0091
         L     REG1,BLDLPTR                                        0091
         LA    REG1,RDDECB-20(@10,REG1)                            0091
*            GEN (READ  (1),SF,(DCBREG),(BUFREG),,MF=E)            0092
*             REFS(REG1,RDDECB,DCBREG,BUFREG);                     0092
         READ  (1),SF,(DCBREG),(BUFREG),,MF=E
*            /* CHECK FOR COMPLETION                                 */
*            GEN (CHECK (1))            /* SYNAD ENTERED IF ERROR    */
*             REFS(REG1,RDDECB) FLOWS(IKJASYND);                   0093
         CHECK (1)
*            /* DID AN I/O ERROR OCCUR                               */
*            IF ERRSWTCH^='00'X         /* SWITCH SET BY SYNAD RTNE  */
*              THEN                     /* AN I/O ERROR OCCURRED     */
         CLI   ERRSWTCH,X'00'                                      0094
         BE    @RF00094                                            0094
*                DO;                                               0095
*                DCBSYNAD(2:4)=SYNADSAV(2:4); /* RESTORE SYNAD       */
         MVC   DCBSYNAD+1(3),SYNADSAV+1                            0096
*                IF ERRSWTCH='01'X      /* DECIDE ON RETURN CODE     */
*                  THEN                 /* SYNAD WORKED OK           */
         CLI   ERRSWTCH,X'01'                                      0097
         BNE   @RF00097                                            0097
*                    RETNCODE=20;       /* CODE = I/O ERROR WITH MSG */
         LA    RETNCODE,20                                         0098
*                  ELSE                 /* PUTLINE OR SYNADRLS FAILED*/
*                    RETNCODE=28;       /* CODE = I/O ERR, NO MSG    */
         B     @RC00097                                            0099
@RF00097 LA    RETNCODE,28                                         0099
*                GO TO IKJAEFAL;        /* GO TO RELEASE STG AND EXIT*/
         B     IKJAEFAL                                            0100
*                END;                                              0101
*            BUFREG=BUFREG+DCBBLKSI;    /* STEP BUFFER POINTER       */
@RF00094 AH    BUFREG,DCBBLKSI                                     0102
*          END;                         /* LOOP UNTIL COUNTREG HITS 0*/
         AH    I,@CH00032                                          0103
@DE00088 SLR   @10,@10                                             0103
         IC    @10,ACIONMBR(,ACIOPTR)                              0103
         CR    I,@10                                               0103
         BNH   @DL00088                                            0103
*          RFY (BUFREG,REG0) UNRSTD;                               0104
*          DCBSYNAD(2:4)=SYNADSAV(2:4); /* RESTORE SYNAD PTR         */
         MVC   DCBSYNAD+1(3),SYNADSAV+1                            0105
*          RETNCODE=0;                  /* INDICATE SUCCESSFUL COM-
*                                          PLETION TO CALLER         */
         SLR   RETNCODE,RETNCODE                                   0106
*          RETURN CODE(RETNCODE);       /* LEAVE                     */
         L     @13,4(,@13)                                         0107
         L     @00,@SIZDATD                                        0107
         LR    @01,@11                                             0107
         FREEMAIN R,LV=(0),A=(1)
         LR    @15,@07                                             0107
         L     @14,12(,@13)                                        0107
         LM    @00,@12,20(@13)                                     0107
         BR    @14                                                 0107
*IKJADIRC: /* CTL. PASSED HERE IF DIRECTORY HANDLING IS NEEDED       */
*          /* SEE IF A DIRECTORY ONLY READ WAS REQUESTED             */
*          IF ACIOFL06='1'B                                        0108
*            THEN                       /* READ DIRECTORY ONLY       */
IKJADIRC TM    ACIOFL06(ACIOPTR),B'00000100'                       0108
         BO    @RT00108                                            0108
*              GO TO IKJADRRD;          /* GO TO READ A DIRECTORY BLK*/
*          /* IS THIS THE FIRST REQUEST FOR DIRECTORY OPERATIONS ?   */
*          IF ACIOMPTR^=0                                          0110
*            THEN                       /* NOT 1ST TIME THROUGH      */
         L     @10,ACIOMPTR(,ACIOPTR)                              0110
         LTR   @10,@10                                             0110
         BNZ   @RT00110                                            0110
*              GO TO IKJAEOFT;          /* SKIP INITIAL READ OPERAT'N*/
*IKJADRRD: /* CTL. PASSED OR DROPPED HERE TO READ A UADS DIRECTRY BLK*/
*          DCBREG=ADDR(DIRDCB);         /* POINT TO BSAM DIRECTRY DCB*/
IKJADRRD L     @10,ACIODRCT(,ACIOPTR)                              0112
         LR    DCBREG,@10                                          0112
*          SYNADSAV=DCBSYNAD;           /* SAVE CALLER'S SYNAD ADDR  */
         MVC   SYNADSAV(4),DCBSYNAD                                0113
*          ERRSWTCH='00'X;              /* INIT ERROR SW = 'NO ERROR'*/
         MVI   ERRSWTCH,X'00'                                      0114
*          DCBSYNAD(2:4)=ADDR(IKJASYND);/* SET SYNAD ADDRESS         */
         LA    @07,IKJASYND                                        0115
         STCM  @07,7,DCBSYNAD+1                                    0115
*          RFY BUFREG RSTD;                                        0116
*          BUFREG=ADDR(DIRBLOCK);       /* ADDR OF DIRECTORY BUFFER  */
         LA    BUFREG,DIRBLOCK(,@10)                               0117
*          /* READ A DIRECTORY BLOCK                                 */
*          GEN (READ  DIRDECB,SF,(DCBREG),(BUFREG),,MF=E)          0118
*           REFS(DIRDECB,DCBREG,BUFREG);                           0118
         READ  DIRDECB,SF,(DCBREG),(BUFREG),,MF=E
*          RFY BUFREG UNRSTD;                                      0119
*          /* CHECK FOR COMPLETION                                   */
*          GEN (CHECK DIRDECB)          /* SYNAD ENTERED IF ERROR    */
*           REFS(DIRDECB) FLOWS(IKJASYND);                         0120
         CHECK DIRDECB
*          DCBSYNAD(2:4)=SYNADSAV(2:4); /* RESTORE SYNAD PTR         */
         MVC   DCBSYNAD+1(3),SYNADSAV+1                            0121
*          DCBREG=ACIODCBA;             /* RESTORE DCB BASE REGISTER */
         SLR   DCBREG,DCBREG                                       0122
         ICM   DCBREG,7,ACIODCBA(ACIOPTR)                          0122
*          /* DID AN I/O ERROR OCCUR ?                               */
*          IF ERRSWTCH^='00'X           /* SWITCH SET BY SYNAD RTNE  */
*            THEN                       /* AN I/O ERROR OCCURRED     */
         CLI   ERRSWTCH,X'00'                                      0123
         BE    @RF00123                                            0123
*              DO;                                                 0124
*              IF ERRSWTCH='01'X        /* ANALYZE SYNAD RESULTS     */
*                THEN                   /* SYNAD WORKED OK           */
         CLI   ERRSWTCH,X'01'                                      0125
         BNE   @RF00125                                            0125
*                  RETNCODE=20;         /* CODE = I/O ERROR WITH MSG */
         LA    RETNCODE,20                                         0126
*                ELSE                   /* PUTLINE OR SYNADRLS FAILED*/
*                  RETNCODE=28;         /* CODE = I/O ERROR, NO MSG  */
         B     @RC00125                                            0127
@RF00125 LA    RETNCODE,28                                         0127
*              RETURN CODE(RETNCODE);   /* RETURN WITH ERROR CODE    */
@RC00125 L     @13,4(,@13)                                         0128
         L     @00,@SIZDATD                                        0128
         LR    @01,@11                                             0128
         FREEMAIN R,LV=(0),A=(1)
         LR    @15,@07                                             0128
         L     @14,12(,@13)                                        0128
         LM    @00,@12,20(@13)                                     0128
         BR    @14                                                 0128
*              END;                                                0129
*          /* REQUESTED TO READ DIRECTORY ONLY ?                     */
*          IF ACIOFL06='1'B                                        0130
*            THEN                       /* READ DIRECTORY ONLY       */
@RF00123 TM    ACIOFL06(ACIOPTR),B'00000100'                       0130
         BNO   @RF00130                                            0130
*              RETURN CODE(0);          /* RETURN WITH SUCESSFUL CODE*/
         L     @13,4(,@13)                                         0131
         L     @00,@SIZDATD                                        0131
         LR    @01,@11                                             0131
         FREEMAIN R,LV=(0),A=(1)
         SLR   @15,@15                                             0131
         L     @14,12(,@13)                                        0131
         LM    @00,@12,20(@13)                                     0131
         BR    @14                                                 0131
*          IF ACIOMPTR^=0               /* WAS THIS THE FIRST READ?  */
*            THEN                       /* NO - NOT FIRST TIME THRU  */
@RF00130 L     @10,ACIOMPTR(,ACIOPTR)                              0132
         LTR   @10,@10                                             0132
         BNZ   @RT00132                                            0132
*              GO TO IKJAEXTT;          /* GO TEST FOR MORE EXTNSIONS*/
*          ACIOMPTR=ADDR(DIRENTRX);     /* POINT TO 1ST ENTRY IN BLK */
         L     @10,ACIODRCT(,ACIOPTR)                              0134
         LA    @10,DIRENTRX(,@10)                                  0134
         ST    @10,ACIOMPTR(,ACIOPTR)                              0134
*IKJAEOFT: /* CTL. PASSED OR DROPPED HERE TO TEST FOR LAST ENTRY     */
*          IF MEMNAME='FFFFFFFFFFFFFFFF'X                          0135
*            THEN                       /* END-OF-DIRECTORY - LEAVE  */
IKJAEOFT L     @10,ACIOMPTR(,ACIOPTR)                              0135
         CLC   MEMNAME(8,@10),@CB00185                             0135
         BNE   @RF00135                                            0135
*              RETURN CODE(24);         /* RETURN WITH ERROR CODE    */
         L     @13,4(,@13)                                         0136
         L     @00,@SIZDATD                                        0136
         LR    @01,@11                                             0136
         FREEMAIN R,LV=(0),A=(1)
         LA    @15,24                                              0136
         L     @14,12(,@13)                                        0136
         LM    @00,@12,20(@13)                                     0136
         BR    @14                                                 0136
*          MEMBRNAM=MEMNAME;            /* SAVE INITIAL MEMBER NAME  */
@RF00135 L     @10,ACIOMPTR(,ACIOPTR)                              0137
         MVC   MEMBRNAM(8),MEMNAME(@10)                            0137
*BUMP:     /* LOOP TO FIND NEXT USERID                               */
*          ACIOMPTR=ACIOMPTR+           /* BUMP MEMBER NAME POINTER  */
*            LENGTH(DIRENTRY)+(C&'1F'X)*2;/* LENGTH OF ENTRY         */
BUMP     L     @10,ACIOMPTR(,ACIOPTR)                              0138
         LA    @07,12                                              0138
         ALR   @07,@10                                             0138
         LA    @03,31                                              0138
         SLR   @00,@00                                             0138
         IC    @00,C(,@10)                                         0138
         NR    @03,@00                                             0138
         ALR   @03,@03                                             0138
         ALR   @07,@03                                             0138
         ST    @07,ACIOMPTR(,ACIOPTR)                              0138
*          /* IS THIS THE END OF THE BLOCK ?                         */
*          IF ACIOMPTR>=ADDR(DIRBLOCK)+DIRBLEXT                    0139
*            THEN                       /* TIME TO GET ANOTHER BLOCK */
         L     @10,ACIODRCT(,ACIOPTR)                              0139
         LA    @03,DIRBLOCK(,@10)                                  0139
         AH    @03,DIRBLEXT(,@10)                                  0139
         CR    @07,@03                                             0139
         BL    @RF00139                                            0139
*              DO;                                                 0140
*              ACIOMPTR=ADDR(DIRENTRX); /* RESET PTR TO FIRST ENTRY  */
         LA    @10,DIRENTRX(,@10)                                  0141
         ST    @10,ACIOMPTR(,ACIOPTR)                              0141
*              GO TO IKJADRRD;          /* GO TO READ NEXT DRECTRY BL*/
         B     IKJADRRD                                            0142
*              END;                                                0143
*            ELSE                       /* NOT AT THE END YET        */
*IKJAEXTT:     DO;                      /* CHECK AGAIN FOR LAST ENTRY*/
@RF00139 DS    0H                                                  0144
IKJAEXTT DS    0H                                                  0145
*              IF MEMNAME='FFFFFFFFFFFFFFFF'X                      0145
*                THEN                   /* END-OF-DIRECTORY          */
         L     @10,ACIOMPTR(,ACIOPTR)                              0145
         CLC   MEMNAME(8,@10),@CB00185                             0145
         BE    @RT00145                                            0145
*                  GOTO IKJALSET;       /* GO TO ISSUE BLDL          */
*              USERIDLN=8;              /* INIT'LZE USRID LNTH TO MAX*/
         LA    USERIDLN,8                                          0147
*              DO WHILE MEMNAME(USERIDLN)=' ';/* TEST FOR NONBLANK   */
         B     @DE00148                                            0148
@DL00148 DS    0H                                                  0149
*                USERIDLN=USERIDLN-1;   /* DECREMENT LENGTH BY ONE   */
         BCTR  USERIDLN,0                                          0149
*                END;                                              0150
@DE00148 L     @10,ACIOMPTR(,ACIOPTR)                              0150
         LR    @07,@10                                             0150
         ALR   @07,USERIDLN                                        0150
         AL    @07,@CF00207                                        0150
         CLI   MEMNAME(@07),C' '                                   0150
         BE    @DL00148                                            0150
*              IF MEMNAME(USERIDLN)^='0'/* IS THIS A BASE MEMBER?    */
*                THEN                   /* NO, EXTENSION BLOCK       */
         ALR   @10,USERIDLN                                        0151
         AL    @10,@CF00207                                        0151
         CLI   MEMNAME(@10),C'0'                                   0151
         BNE   @RT00151                                            0151
*                  GO TO BUMP;          /* GO BACK TO LOOK AT NEXT 1 */
*              END;                                                0153
*          GO TO IKJALSET;              /* END OF IKJAMNAM - GO SEE IF
*                                          MORE BLDLS ARE NECESSARY  */
         B     IKJALSET                                            0154
*IKJAEFAL: /* THIS SECTION RELEASES STORAGE ACQUIRED FOR AN IO BUFFER*/
*          /* ISSUE O/S FREEMAIN TO RELEASE INPUT BUFFER             */
*          GEN (FREEMAIN V,A=ANSRPTR,MF=(E,DYNFRLST))              0155
*           REFS(ANSRPTR,DYNFRLST);                                0155
IKJAEFAL FREEMAIN V,A=ANSRPTR,MF=(E,DYNFRLST)
*          RETURN CODE(RETNCODE);       /* RETURN WITH ERROR CODE    */
         L     @13,4(,@13)                                         0156
         L     @00,@SIZDATD                                        0156
         LR    @01,@11                                             0156
         FREEMAIN R,LV=(0),A=(1)
         LR    @15,@07                                             0156
         L     @14,12(,@13)                                        0156
         LM    @00,@12,20(@13)                                     0156
         BR    @14                                                 0156
*IKJASYND: /* CTL. RECEIVED HERE FROM SYSTEM IF AN I/O ERROR OCCURRED*/
*          PROC;                                                   0157
@EL00001 L     @13,4(,@13)                                         0157
@EF00001 L     @00,@SIZDATD                                        0157
         LR    @01,@11                                             0157
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0157
         BR    @14                                                 0157
@PB00001 DS    0H                                                  0157
IKJASYND STM   @14,@12,@SA00002                                    0157
*          ERRSWTCH='01'X;              /* SET I/O ERROR SWITCH      */
         MVI   ERRSWTCH,X'01'                                      0158
*          /* OBTAIN SYNAD MESSAGE AND SAVE AREA                     */
*          GEN (SYNADAF ACSMETH=BPAM);                             0159
         SYNADAF ACSMETH=BPAM
*          OUTLNDS=OUTLNDS&&OUTLNDS;    /* CLEAR PARAM AREA FOR PUTLN*/
         XC    OUTLNDS(24),OUTLNDS                                 0160
*          OUT1LINK=ADDR(OUT2LINK);     /* INDICATE TWO LEVEL MESSAGE*/
         LA    @10,OUT2LINK                                        0161
         ST    @10,OUT1LINK                                        0161
*          OUT1SCNT=1;                  /* 1ST LEVEL MSG SEG COUNT =1*/
         LA    @10,1                                               0162
         ST    @10,OUT1SCNT                                        0162
*          IOM1LN=LENGTH(IOM1);         /* LENGTH OF 1ST LEVEL MSG   */
         MVC   IOM1LN(2),@CH00200                                  0163
*          IOM1OF=0;                    /* OFFSET FOR INSERTION N/A  */
         SLR   @03,@03                                             0164
         STH   @03,IOM1OF                                          0164
*          IOM1ID=IOMSGID;              /* SUPPLY MESSAGE ID         */
         MVC   IOM1ID(9),IOMSGID                                   0165
*          IOM1MSGN=ACIOMSGN;           /* PLUG IN CALLER'S MSG NO   */
         MVC   IOM1MSGN(1),ACIOMSGN(ACIOPTR)                       0166
*          IOM1TXT=IOMSG1;              /* TEXT OF 1ST LEVEL MESSAGE */
         MVC   IOM1TXT(36),IOMSG1                                  0167
*          OUT1SEG1=ADDR(IOM1);         /* POINT TO MSG IN LINE DESCR*/
         LA    @15,IOM1                                            0168
         ST    @15,OUT1SEG1                                        0168
*          OUT2SCNT=1;                  /* 2ND LEVEL MSG SEG COUNT =1*/
         ST    @10,OUT2SCNT                                        0169
*          REG1=REG1+20;                /* SET BASE FOR SYNAD INFO   */
         AH    REG1,@CH00090                                       0170
*          IOM2LN=LENGTH(IOM2)+76;      /* 2ND LEVEL LENGTH = CONSTANT
*                                          INFO LENGTH + SYNAD     0171
*                                          MSG LENGTH (BYTES 50-125) */
         MVC   IOM2LN(2,REG1),@CH00202                             0171
*          IOM2OF=0;                    /* OFFSET FOR INSERTION = N/A*/
         STH   @03,IOM2OF(,REG1)                                   0172
*          IOM2ID=IOM1ID;               /* GET MSG ID FROM 1ST LEVEL */
         MVC   IOM2ID(9,REG1),IOM1ID                               0173
*          IOM2TXT=IOMSG2;              /* FIXED TEXT FOR 2ND LEVEL  */
         MVC   IOM2TXT(17,REG1),IOMSG2                             0174
*          OUT2SEG1=REG1;               /* POINT TO MSG IN LINE DESCR*/
         ST    REG1,OUT2SEG1                                       0175
*          /* PREPARE PARM LIST FOR PUTLINE MACRO                    */
*          IOPLPTR=ADDR(PUTLLIST);      /* SET BASE FOR PARM LIST    */
         LA    IOPLPTR,PUTLLIST                                    0176
*          IOPL=ACIOPUTL->IOPL;         /* 1ST THREE WORDS FROM    0177
*                                          ACCOUNT PARM LIST         */
         SLR   @10,@10                                             0177
         ICM   @10,7,ACIOPUTL(ACIOPTR)                             0177
         MVC   IOPL(16,IOPLPTR),IOPL(@10)                          0177
*          IOPLIOPB=ADDR(DYNPTLST);     /* POINT TO PUTLINE PARN BLK */
         LA    @10,DYNPTLST                                        0178
         ST    @10,IOPLIOPB(,IOPLPTR)                              0178
*          PTPBOPUT=ADDR(OUTLNDS);      /* POINT TO ERROR MSG        */
         L     @10,PTPBPTR(,IOPLPTR)                               0179
         LA    @06,OUTLNDS                                         0179
         ST    @06,PTPBOPUT(,@10)                                  0179
*          /* ISSUE OS/360 PUTLINE MACRO TO WRITE THE MESSAGE        */
*          GEN (PUTLINE ,MF=(E,PUTLLIST))                          0180
*            REFS(OUTLNDS,DYNPTLST);                               0180
         PUTLINE ,MF=(E,PUTLLIST)
*          RFY REG15 RSTD;              /* RESTRICT RETURN CODE REG  */
*          RETNCODE=REG15;              /* SAVE RETURN CODE          */
         LR    RETNCODE,REG15                                      0182
*          RFY REG15 UNRSTD;            /* RELEASE RETURN CODE REG   */
*          IF RETNCODE^=0               /* CHECK RETURN CODE         */
*            THEN                       /* PUTLINE EXCEPTION         */
         LTR   RETNCODE,RETNCODE                                   0184
         BZ    @RF00184                                            0184
*              ERRSWTCH='03'X;          /* UPDATE I/O ERROR SWITCH   */
         MVI   ERRSWTCH,X'03'                                      0185
*          GEN (SYNADRLS);              /* RETURN SYNAD SAVE AREA    */
@RF00184 DS    0H                                                  0186
         SYNADRLS
*          END IKJASYND;                                           0187
@EL00002 DS    0H                                                  0187
@EF00002 DS    0H                                                  0187
@ER00002 LM    @14,@12,@SA00002                                    0187
         BR    @14                                                 0187
*          END IKJEFA51                                            0188
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJIOPL )                                        *
*/*%INCLUDE SYSLIB  (IKJPTPB )                                        *
*;                                                                 0188
@DATA    DS    0H
@CH00166 DC    H'0'
@CH00032 DC    H'1'
@CH00055 DC    H'8'
@CH00080 DC    H'10'
@CH00081 DC    H'14'
@CH00090 DC    H'20'
@CH00200 DC    H'49'
@CH00202 DC    H'106'
@SM00203 MVC   DYNLFORM(0),INLINLFM
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SAV001  EQU   @SA00001
@SA00002 DS    15F
@TF00001 DS    F
@ZTEMPS  DS    C
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
@TEMPS   EQU   @ZTEMPS
@L       EQU   @ZLEN
IKJEFA51 CSECT
         DS    0F
@CF00205 DC    F'-10'
@CF00206 DC    F'-2'
@CF00207 DC    F'-1'
@DATD    DSECT
         DS    0D
BLDLPTR  DS    A
MEMBREG  DS    A
@NM00012 DS    CL8
         ORG   @NM00012
ANSRPTR  DS    AL4
FREELVAL DS    FL4
         ORG   @NM00012+8
MEMBRNAM DS    CL8
SYNADSAV DS    CL4
         ORG   SYNADSAV
ERRSWTCH DS    CL1
         ORG   SYNADSAV+4
PUTLLIST DS    CL16
OUTLNDS  DS    CL24
         ORG   OUTLNDS
OUT1LINK DS    AL4
OUT1SCNT DS    FL4
OUT1SEG1 DS    AL4
OUT2LINK DS    AL4
OUT2SCNT DS    FL4
OUT2SEG1 DS    AL4
         ORG   OUTLNDS+24
IOM1     DS    CL49
         ORG   IOM1
IOM1LN   DS    FL2
IOM1OF   DS    FL2
IOM1ID   DS    CL9
         ORG   IOM1ID
@NM00013 DS    CL6
IOM1MSGN DS    CL1
         ORG   IOM1+13
IOM1TXT  DS    CL36
         ORG   IOM1+49
IKJEFA51 CSECT
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
@SIZ001  EQU   @SIZDATD
         DS    0D
@CB00185 DC    X'FFFFFFFFFFFFFFFF'
IOMSGID  DC    CL9'IKJ565X3I'
IOMSG1   DC    CL36' USER ATTRIBUTE DATA SET NOT USABLE+'
IOMSG2   DC    CL17' I/O SYNAD ERROR '
@DATD    DSECT
IKJEFA51 CSECT
INLINLFM DS    0F
         FREEMAIN V,SP=1,MF=L
         GETMAIN EC,SP=1,MF=L              LENGTH & ANS PTR SET BY E
         PUTLINE OUTPUT=(0,TERM,MULTLVL,INFOR),MF=L
         READ  DECB,SF,,,'S',MF=L          DCB & BUF PTR SET BY E FORM
INLINLNG DC    A(*-INLINLFM)
INLINRD  READ  DECB1,SF,,,'S',MF=L         DCB & BUF PTR SET BY E FORM
         READ  DECB2,SF,,,'S',MF=L         DCB & BUF PTR SET BY E FORM
         READ  DECB3,SF,,,'S',MF=L         DCB & BUF PTR SET BY E FORM
         READ  DECB4,SF,,,'S',MF=L         DCB & BUF PTR SET BY E FORM
         READ  DECB5,SF,,,'S',MF=L         DCB & BUF PTR SET BY E FORM
         READ  DECB6,SF,,,'S',MF=L         DCB & BUF PTR SET BY E FORM
         READ  DECB7,SF,,,'S',MF=L         DCB & BUF PTR SET BY E FORM
         READ  DECB8,SF,,,'S',MF=L         DCB & BUF PTR SET BY E FORM
         READ  DECB9,SF,,,'S',MF=L         DCB & BUF PTR SET BY E FORM
         READ  DECB0,SF,,,'S',MF=L         DCB & BUF PTR SET BY E FORM
DECBLN   EQU   *-INLINRD
         DCBD  DSORG=PO,DEVD=DA            MAPPING OF BPAM DCB
@DATD    DSECT
DYNLFORM DS    0F
DYNFRLST FREEMAIN V,SP=1,MF=L
DYNGTLST GETMAIN EC,MF=L                   LENGTH & ANS PTR SET BY E
DYNPTLST PUTLINE ,MF=L                     WILL BE INIT'D FROM INLINPTL
DYNRDLST READ  DIRDECB,SF,,,'S',MF=L       DCB & BUF PTR SET BY E FORM
IKJEFA51 CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
@DATEND  EQU   *
IKJEFA51 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
@0       EQU   00
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
RETNCODE EQU   @07
I        EQU   @07
INDEXPTR EQU   @04
USERIDLN EQU   @03
BLDLRTCD EQU   @07
ACIOPTR  EQU   @06
IOPLPTR  EQU   @02
REG0     EQU   @00
REG1     EQU   @01
DCBREG   EQU   @02
BUFREG   EQU   @03
REG15    EQU   @15
IOPL     EQU   0
IOPLIOPB EQU   IOPL+12
PTPB     EQU   0
PTPBOPUT EQU   PTPB+4
ACIOPARM EQU   0
@NM00002 EQU   ACIOPARM
ACIOFL01 EQU   @NM00002
ACIOFL02 EQU   @NM00002
ACIOFL03 EQU   @NM00002
ACIOFL04 EQU   @NM00002
ACIOFL06 EQU   @NM00002
ACIODCBA EQU   ACIOPARM+1
ACIOMPTR EQU   ACIOPARM+4
ACIODRCT EQU   ACIOPARM+8
ACIOLINK EQU   ACIOPARM+12
ACIONMBR EQU   ACIOPARM+16
ACIOBUFR EQU   ACIOPARM+17
ACIOMSGN EQU   ACIOPARM+20
ACIOPUTL EQU   ACIOPARM+21
BLDLLIST EQU   0
BLDLDATA EQU   BLDLLIST
NUMOFENT EQU   BLDLDATA
ENTLNGTH EQU   BLDLDATA+2
BLDLENTY EQU   BLDLDATA+4
BLDLNAME EQU   BLDLENTY
BLDLTTRK EQU   BLDLENTY+8
R        EQU   BLDLTTRK+2
RDDECB   EQU   BLDLLIST+144
@NM00009 EQU   0
DIRDCB   EQU   @NM00009
DIRBLOCK EQU   @NM00009+88
DIRBLEXT EQU   DIRBLOCK
DIRENTRX EQU   DIRBLOCK+2
DIRENTRY EQU   0
C        EQU   DIRENTRY+11
SYSINDEX EQU   0
MEMNAME  EQU   0
IOM2     EQU   0
IOM2LN   EQU   IOM2
IOM2OF   EQU   IOM2+2
IOM2ID   EQU   IOM2+4
IOM2TXT  EQU   IOM2+13
PTPBPTR  EQU   IOPLIOPB
*                                      START UNREFERENCED COMPONENTS
@NM00011 EQU   DIRENTRY+8
@NM00010 EQU   DIRENTRY
@NM00008 EQU   BLDLENTY+13
@NM00007 EQU   BLDLENTY+12
@NM00006 EQU   BLDLTTRK+3
@NM00005 EQU   BLDLTTRK
@NM00004 EQU   @NM00002
@NM00003 EQU   @NM00002
PTPBFLN  EQU   PTPB+8
@NM00001 EQU   PTPB
IOPLECB  EQU   IOPL+8
IOPLECT  EQU   IOPL+4
IOPLUPT  EQU   IOPL
*                                      END UNREFERENCED COMPONENTS
@RT00036 EQU   IKJADIRC
@RC00097 EQU   IKJAEFAL
@RT00108 EQU   IKJADRRD
@RT00110 EQU   IKJAEOFT
@RT00132 EQU   IKJAEXTT
@RT00145 EQU   IKJALSET
@RT00151 EQU   BUMP
@PB00002 EQU   @EL00001
@EL01    EQU   @EL00001
@ENDDATA EQU   *
         END   IKJEFA51,(C'PL/S-II',0503,75006)
