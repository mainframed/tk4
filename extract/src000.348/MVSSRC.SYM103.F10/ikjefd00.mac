         TITLE 'IKJEFD00,  DAIR,  DYNAMIC ALLOCATION INTERFACE ROUTINE'
*   GEN(TITLE 'IKJEFD00, DAIR, DYNAMIC ALLOCATION INTERFACE ROUTINE');
         TITLE 'IKJEFD00, DAIR, DYNAMIC ALLOCATION INTERFACE ROUTINE'
* /********************************************************************
* /*                                                                  *
* /* TITLE    IKJEFD00,DAIR,DYNAMIC ALLOCATION INTERFACE ROUTINE      *
* /*                                                                  *
* /* STATUS                                                           *
* /*    CHANGE LEVEL 002                                        C99236*
* /*    C  5053,5192,5400-5900,61200,63000,70200,78900,79100    C99236*
* /*    C  92400,111600,159600,162000,173400,174600,176400      C99236*
* /*    C  390500,391100,671576,745800,750000-750600,755600     C99236*
* /*    C  868100,869100,4973,7200,10800,17400,14400,741600     C99236*
* /*    A  5920,18600-19200,61700-61740,63101-63109,78920,92900 C99236*
* /*    A  97900-98200,112100,119600-119880,131500-131600       C99236*
* /*    A  148911,173900,176900,275404-275559,304720-305199     C99236*
* /*    A  364804-364819,389600-389960,639500-639931            C99236*
* /*    A  640104-641033,670700-670788,686900-686988,745820     C99236*
* /*    A  751100,755620,776900-777320,782320-782899            C99236*
* /*    A  782999-783200,835300-835660,858010-859050            C99236*
* /*    A  868800-869096,958322-958328,4917,4974                C99236*
* /*    D  351100,334900-337200,658288-658700,811840-812300     C99236*
* /*    A    063100-063200,063300-063440,101900-101960,         A43020*
* /*    A    144100-144499,197696-197783,374800-385286,         A43020*
* /*    A    391160-391188                                      A43020*
* /*    C    004930,062300-062940,063540-063544,074400-         A43020*
* /*    C    074940,133800,137400-138486,255600.267000,         A43020*
* /*    C    326420-326480,326520-326580,349200,357800-         A43020*
* /*    C    358500,359400,361100,398500-398600,482320,         A43020*
* /*    C    778800-779400                                      A43020*
* /*    A     148902,148903,144960-144996,137300,978969-        A42966*
* /*    A    978994,979018,979022-979084,979114-979174,         A42966*
* /*    A    979444-979621,980890,980910                        A42966*
* /*    C    149035,198962-198998,980870                        A42966*
* /*    A    979783-980770                                      A41399*
* /*    C    213600,215400,217120,225000,226204,226674,          M0766*
* /*    C    227710,228640,247800,263400,265200,596340           M0766*
* /*    A    324720-324760,343803-343866,664240-664248,          M0764*
* /*    A    641360,782900,804520-804540                         M0764*
* /*    A    623300-623800                                       M0765*
* /*    C    178100-178197,190700-191208                         M2177*
* /*    A    377700-378500,746400-746940                         M2168*
* /*                                                                  *
* /* FUNCTION                                                         *
* /*    DAIR CONSISTS OF SEVERAL DIFFERENT FUNCTIONS. EACH DAIR       *
* /*    FUNCTION IS DESCRIBED BELOW IN DETAIL UNDER EACH              *
* /*    DAIR ENTRY CODE. THE FUNCTION ITSELF IS DECRIBED UNDER THE    *
* /*    HEADINGS DESCRIPTION OF FLOWCHART .                           *
* /*                                                                  *
* /* ENTRY POINTS                                                     *
* /*    IKJEFD00                                                      *
* /*                                                                  *
* /* INPUT                                                            *
* /*    REG 1 IS A POINTER TO THE DAIR PARMLIST WHICH CONSISTS OF     *
* /*    FIVE FULL WORDS.                                              *
* /*    WORD 1 POINTER TO UPT                                         *
* /*         2 POINTER TO ECT                                         *
* /*         3 POINTER TO ECB                                         *
* /*         4 POINTER TO PSCB                                        *
* /*         5 POINTER TO ACTUAL PARMLIST FOR DESIRED FUNCTION        *
* /*         (EACH PARMLIST IS DESCRIBED UNDER THE PARMLIST MACRO'S)  *
* /*                                                                  *
* /* OUTPUT                                                           *
* /*    REGISTER 15--RETURN CODE--DESCRIBED BELOW                     *
* /*    ALLOCATED DDNAME (IF APPROPRIATE)                             *
* /*    ALLOCATED DSNAME (IF APPROPRIATE)                             *
* /*    DSORG (IF APPROPRIATE)                                        *
* /*    DESIRED FUNCTION                                              *
* /*    OTHER OUTPUT IS DESCRIBED BELOW UNDER SEPERATE FUNCTIONS      *
* /*                                                                  *
* /* MESSAGES                                                         *
* /*    NONE                                                          *
* /*                                                                  *
* /* EXTERNAL REFERENCES                                              *
* /*    DESCRIBED BELOW UNDER EACH DESIRED FUNCTION                   *
* /*                                                                  *
* /* EXITS                                                            *
* /*    NORMAL--RETURN IN EXITCODE WITH RETURN CODE IN REG 15         *
* /*    ERROR---NONE                                                  *
* /*                                                                  *
* /* TABLES/WORKAREAS                                                 *
* /*    DAIRWA--WORK AREA USED BY DAIR TO STORE DIFFERENT POINTERS    *
* /*    AND INFORMATION.                                              *
* /*                                                                  *
* /* ATTRIBUTES                                                       *
* /*    REENTRANT                                                     *
* /*                                                                  *
* /*    NOTES                                                         *
* /*       THIS MODULE IS DEPENDENT ON THE EBCDIC CHARACTER CODE      *
* /*       WHICH WAS USED FOR ASSEMBLY AND MUST BE REASSEMBLED IF A   *
* /*       DIFFERENT CHARACTER SET IS TO BE USED DURING EXECUTION.    *
* /*                                                                  *
* /* GENERAL DESCRIPTION - IKJEFD00                                   *
* /*    IKJEFD00 (DAIR) IS A REENTRANT, REFRESHABLE MODULE OF         *
* /*    APPROXIMATELY 12K BYTES IN SIZE.  IT IS COMPRISED OF 15       *
* /*    ROUTINES.  ONE FOR EACH OF ITS FUNCTIONS (12), ONE FOR        *
* /*    ENTRANCE, ROUTING AND EXIT (DAIRCTL), AND TWO INTERNAL        *
* /*    SUBROUTINES, ONE FOR PREFIXING THE USERID TO DATA SET NAMES   *
* /*    (USERID), AND ONE FOR SEARCHING THE DSE (SEARCH).             *
* /*         THERE ARE  12    POSSIBLE RETURN CODES FROM DAIR, THEY   *
* /*         ARE:                                                     *
* /*         0 - SUCCESSFUL OPERATION                                 *
* /*         4 - INVALID PARAMETER LIST                               *
* /*         8 - ERROR IN CATALOG MANAGEMENT ROUTINE THE              *
* /*             CATALOG MANAGEMENT RETURN CODE IS STORED             *
* /*             IN THE CTRC FIELD                                    *
* /*         12- ERROR IN DYNAMIC ALLOCATION, THE                     *
* /*             DYNAMIC ALLOCATION RETURN CODE IS                    *
* /*             STORED IN THE DARC FIELD                             *
* /*         16- NO ENTRIES AVAILABLE FOR USE IN TIOT                 *
* /*         20- DDNAME REQUESTED IS CURRENTLY                        *
* /*             UNAVAILABLE                                          *
* /*             OR ATTRIBUTE LIST NAME FOUND                         *
* /*         24- DSNAME REQUESTED IS A MEMBER OF A                    *
* /*             CONCATENATED GROUP                                   *
* /*         28- DDNAME OR DSNAME SPECIFIED IS NOT                    *
* /*             CURRENTLY ALLOCATED OR ATTR-LIST-NAME NOT FOUND      *
* /*         32- RETURNED WHEN REQUEST IS FOR A NON-PERMANENTLY       *
* /*             ALLOCATED DATASET WITH A REQUESTED STATUS OF NEW     *
* /*             AND AN ALLOCATED DISP OF OTHER THAN DELETE, OR FOR   *
* /*             A PERMANENTLY ALLOCATED DATASET WITH A REQUESTED     *
* /*             STATUS OF NEW.                                       *
* /*         36- ERROR IN CATALOG INFORMATION ROUTINE                 *
* /*         40- WHILE MORE INDEX BLOCK EXIST.                        *
* /*             IF MORE QUALIFIERS ARE DESIRED A                     *
* /*             LARGER RETURN AREA MUST BE SPECIFIED                 *
* /*         44- RETURNED WHEN REQUEST IS FOR A NON-PERMANENTLY       *
* /*             ALLOCATED DATASET WITH A REQUESTED STATUS OF OLD,MOD,*
* /*             OR SHR AND AN ALLOCATED DISP OF DELETE IN DSE AND    *
* /*             NO VOLUME INFORMATION IS SUPPLIED.                   *
* /*                      ********************                        *
* /*                      *    DAIRCTRL      *                        *
* /*                      ********************                        *
* /* DAIRCTRL CHART - DR1                                             *
* /*    INPUT                                                         *
* /*         R1 POINTING TO AN AREA CONTAINING THE ADDRESSES          *
* /*         OF A UPT, ECT, CP'S ECB, PSCB, AND DIAR PARM BLOCK.      *
* /*    OUTPUT                                                        *
* /*         DESIRED FUNCTION                                         *
* /*    RETURN CODES                                                  *
* /*         NONE                                                     *
* /*    CONTROL BLOCKS REFERENCED                                     *
* /*         1)  DSE                                                  *
* /*         2)  CVT                                                  *
* /*         3)  TCB                                                  *
* /*         4)  JSCB                                                 *
* /*         5)  PSCB                                                 *
* /*         6)  TSCVT                                                *
* /*         7)  TJB                                                  *
* /*         8)  TJBX                                                 *
* /*    EXTERNAL ROUTINES                                             *
* /*         1)  GETMAIN                                              *
* /*         2)  FREEMAIN                                             *
* /*         3) STAX                                                  *
* /*         4) STAE                                                  *
* /*         5) ENQ                                                   *
* /*         6) DEQ                                                   *
* /*    DESCRIPTION OF FLOWCHART                                      *
* /*         THIS IS THE FIRST ROUTINE TO GET CONTROL UPON ENTRANCE   *
* /*         TO DAIR.  IT IS ALSO THE ROUTINE BY WHICH EXIT FROM DAIR *
* /*         IS EFFECTED.  IT IS BROKEN INTO TWO PARTS, THE FIRST     *
* /*         PART DOES INITIAL HOUSEKEEPING GETS STORAGE FOR DYNAMIC  *
* /*         ALLOCATION AND DSE UPDATE PARM LISTS AND THE DAIR WORK   *
* /*         AREA (DAIRWA) AND INITIALIZES FIELDS IN IT.              *
* /*         DAIRCTRL ALSO ISSUES A STAX TO DEFER ATTENTIONS IN DAIR. *
* /*         DAIR ALSO ENQ'S UPON ITSELF AND ISSUES A STAE MACRO IN   *
* /*         ORDER TO INTERCEPT ABENDS.      DAIR THEN                *
* /*         ROUTES CONTROL VIA A BRANCHING TABLE AND THE OPERATION   *
* /*         CODE IN THE USER PARM LIST TO ONE OF  TWELVE POSSIBLE    *
* /*         ROUTINES.                                                *
* /*         THE SECOND PART OF THE ROUTINE IS CALLED EXITCODE.  IT   *
* /*         HAS TWO FUNCTIONS, ONE IS TO PASS CONTROL VIA A          *
* /*         BRANCHING TABLE AND BITS 5-7 OF STATUS2 TO ONE OF EIGHT  *
* /*         DIFFERENT PLACES.  THIS IS DONE ANYTIME ONE OF THE       *
* /*         ROUTINES HAS NEED FOR A FUNCTION IN ANOTHER ROUTINE AND  *
* /*         BRANCHES TO THAT ROUTINE.  SINCE THE EXIT FROM EACH      *
* /*         ROUTINE IS THROUGH EXITCODE, THIS ROUTINE REROUTES       *
* /*         CONTROL TO THE PROPER PLACE.                             *
* /*         WHEN ENTERED FOR THE PURPOSE OF RETURNING CONTROL TO THE *
* /*         CALLER OF DAIR ALL CORE NOT PREVIOUSLY FREED IS FREED,   *
* /*         A DEQ , STAX, AND STAE ARE ISSUED,                       *
* /*         THE RETURN CODE IS LOADED, REGISTERS ARE RESTORED AND    *
* /*         CONTROL IS PASSED TO THE CALLER.                         *
* /*                      ********************                        *
* /*                      *    DAIR  00      *                        *
* /*                      ********************                        *
* /* DAIR00 CHAR - DR2                                                *
* /*    INPUT                                                         *
* /*         USER PARAMETER LIST                                      *
* /*    OUTPUT                                                        *
* /*         R2 POINTING TO DAIRWA                                    *
* /*         RETURN CODES IN DAIRWA                                   *
* /*         DSORG IN PARM LIST                                       *
* /*    RETURN CODES                                                  *
* /*         0, 4                                                     *
* /*    CONTROL BLOCKS REFERENCED                                     *
* /*         1)  DSE                                                  *
* /*    EXTERNAL ROUTINES                                             *
* /*         NONE                                                     *
* /* DESCRIPTION OF FLOWCHART                                         *
* /*         THIS ROUTINE IS USED TO SEARCH THE DSE FOR A DDNAME OR   *
* /*         A DSNAME.  THE USER PARM LIST IS USED TO DETERMINE THE   *
* /*         FUNCTION.                                                *
* /*            IF DSNAMEPTR IS ZERO AND DDNAME IS BLANK A RETURN     *
* /*         CODE OF 4 IS PLACED IN RTCODE AND CONTROL IS PASSED TO   *
* /*         THE SEARCH SUBROUTINE.  IF THE DDNAME IS FOUND IN THE    *
* /*         DSE AND IT IS CURRENTLY ALLOCATED TO THE TERMINAL BIT 7  *
* /*         OF THE PARM FLAGS IS SET, THE DSEDSORG BYTE IS MOVED     *
* /*         FROM THE DSE INTO THE PARM LIST AND CONTROL IS PASSED TO *
* /*         TO EXITCODE.  IF THE DDNAME IS NOT ALLOCATED TO THE      *
* /*         TERMINAL BIT 6 OF THE PARM FLAGS IS SET, THE DSEDSORG    *
* /*         BYTE IS MOVED FROM THE DSE INTO THE PARM LIST AND        *
* /*         CONTROL IS PASSED TO EXITCODE.  IF THE DDNAME IS A DYNAM *
* /*         BIT 5 OF THE PARM FLAGS IS SET, THE DSEDSORG BYTE IS     *
* /*         MOVED FROM THE DSE INTO THE PARMLIST AND CONTROL IS      *
* /*         PASSED TO EXITCODE.  IF THE DDNAME IS FOUND AND IT IS    *
* /*         PERMANENTLY ALLOCATED BIT 4 PF THE PARM FLAGS IS SET.    *
* /*         BIT 4 WILL ALSO BE SET IF SEARCH IS ON DSNAME AND IT     *
* /*         HAPPENS TO BE PERMANENTLY ALLOCATED.  IF THE DDNAME ISN'T*
* /*         FOUND IN THE DSE NO FLAG BITS ARE SET AND PROCESSING     *
* /*         CONTINUES AS ABOVE.  IF THE DSNAMEPTR IS NON-ZERO AND    *
* /*         THE USERID IS TO BE PROVIDED THE USERID SUBROUTINE IS    *
* /*         ENTERED.  IF IT PASSES BACK AN UNSUCCESSFUL RETURN CODE  *
* /*         A 4 IS PLACED IN RTCODE AND CONTROL IS PASSED TO EXIT    *
* /*         CODE.  IF USERID IS SUCCESSFUL A SEARCH ON DSNAME IS     *
* /*         INDICATED AND CONTROL IS PASSED TO THE SEARCH SUBROUTINE *
* /*         IF THE DSNAME IS FOUND BIT 6 OF THE PARM FLAGS IS SET,   *
* /*         THE DSEDSORG IS MOVED INTO THE PARM LIST AND CONTROL IS  *
* /*         PASSED TO EXITCODE.                                      *
* /*         IF THE DSNAME IS NOT FOUND THE FLAG BITS ARE NOT SET     *
* /*         AND CONTROL IS PASSED TO EXITCODE.                       *
* /*                      ********************                        *
* /*                      *    DAIR  04      *                        *
* /*                      ********************                        *
* /* DAIR04 CHART - DR3                                               *
* /*    INPUT                                                         *
* /*         USER PARAMETER LIST                                      *
* /*    OUTPUT                                                        *
* /*         RETURN CODES IN DAIRWA                                   *
* /*         DSORG IN PARM LIST                                       *
* /*    RETURN CODES                                                  *
* /*         0, 4, 8                                                  *
* /*    CONTROL BLOCKS REFERENCED                                     *
* /*         1)  DSE                                                  *
* /*    EXTERNAL ROUTINES                                             *
* /*         1)  GETMAIN                                              *
* /*         2)  FREEMAIN                                             *
* /*         3)  LOCATE                                               *
* /*    DESCRIPTION OF FLOWCHART                                      *
* /*         IF THE DSNAMEPTR IS ZERO, A 4 IS PLACED IN RTCODE AND    *
* /*         CONTROL IS PASSED TO EXITCODE.                           *
* /*         IF THE DSNAMEPTR IS NON-ZERO AND THE USERID IS TO BE     *
* /*         PROVIDED THE USERID SUBROUTINE IS ENTERED.  UPON         *
* /*         SUCCESSFUL COMPLETION OF THE USERID ROUTINE A SEARCH     *
* /*         FOR THE DSNAME IN THE DSE CHAIN BEGINS.  BY WAY OF THE   *
* /*         SEARCH SUBROUTINE.  IF THE DSNAME IS FOUND IN THE DSE,   *
* /*         BIT 6 OF THE FLAG FIELD IS SET, THE DSE DSORG IS MOVED   *
* /*         INTO THE PARM LIST AND CONTROL IS PASSED TO EXIT CODE.   *
* /*         IF THE DSNAME IS NOT FOUND IN THE DSE A GETMAIN FOR A    *
* /*         LOCATE WORK AREA IS DONE AND THE PARAMETER LIST SET UP   *
* /*         THE LOCATE IS THEN ISSUED, IF SUCCESSFUL BIT 5 OF THE    *
* /*         PARM FLAGS IS SET.  IF NOT FOUND AN 8 IS PLACED IN       *
* /*         RTCODE AND THE LOCATE RETURN CODE IS PLACED IN THE       *
* /*         CTRC FIELD OF THE PARM LIST.  CONTROL IS THEN PASSED TO  *
* /*         EXITCODE.                                                *
* /*                      ********************                        *
* /*                      *    DAIR  08      *                        *
* /*                      ********************                        *
* /* DAIR08 CHART - DR4                                               *
* /*    INPUT                                                         *
* /*         USER PARAMETER LIST                                      *
* /*    OUTPUT                                                        *
* /*         RETURN CODES IN DAIRWA                                   *
* /*         ALLOCATED DDNAME IN PARM LIST                            *
* /*         DSORG IN PARM LIST                                       *
* /*         DSNAME IN PARM LIST                                      *
* /*    RETURN CODES                                                  *
* /*         0, 4, 8, 12, 16, 20, 28, 24, 32, 44                      *
* /*    CONTROL BLOCKS REFERENCED                                     *
* /*         1)  DSE                                                  *
* /*         2)  ATRCB                                                *
* /*    EXTERNAL ROUTINES                                             *
* /*         1)  GETMAIN                                              *
* /*         2)  CATALOG                                              *
* /*         3)  LOCATE                                               *
* /*         4)  FREEMAIN                                             *
* /*         5)  DYNAMIC ALLOCATION                                   *
* /*         6)  OBTAIN                                               *
* /*    DESCRIPTION OF FLOWCHART                                      *
* /*         THIS ROUTINE IS ENTERED TO ALLOCATE A DATASET WITH       *
* /*         OR WITHOUT AN ATTRIBUTE LIST OF DCB PARAMETERS.          *
* /*         IT SETS UP A DYNAMIC ALLOCATION PARAMETER LIST FOR       *
* /*         EITHER THE CONVERT OR DATASET FUNCTIONS.                 *
* /*         WHEN FIRST ENTERED SOME VALIDITY CHECKING OF THE         *
* /*         PARAMETER LIST ENSUES.  FIRST, A CHECK IS MADE FOR       *
* /*         THE SPECIFICATION OF AN ATTRIBUTE LIST.  IF ONE IS       *
* /*         INDICATED, A VALIDITY CHECK OF THE ATTR-LIST-NAME IS     *
* /*         MADE. A RETURN CODE OF 4 IS POSSIBLE IF THE ATTR-        *
* /*         LIST-NAME HAS NOT BEEN SUPPLIED, AND CONTROL IS PASSED   *
* /*         TO EXITCODE. OTHERWISE, A SEARCH IS MADE OF THE ATRCB    *
* /*         CHAIN FOR THE SUPPLIED ATTR-LIST-NAME. A RETURN CODE     *
* /*         OF 28 IS POSSIBLE IF THE ATTR-LIST-NAME IS NOT FOUND     *
* /*         ON THE CHAIN, AND CONTROL IS PASSED TO EXITCODE.         *
* /*         ALSO, A RETURN CODE OF 4 IS POSSIBLE IF THE              *
* /*         DISPOSITION IS NEITHER NEW NOR MOD AND NO DSNAME         *
* /*         IS PRESENT AND THE USERID SUBROUTINE IS UNSUCCESSFUL.    *
* /*         A 4 IS ALSO RETURNED IF DISP1 AND DISP2 IS (NEW,KEEP)    *
* /*         OR (NEW,UNCATLG), OR IF THE SERIAL NUMBER OR UNIT NAME   *
* /*         IS ZERO.  PREFIXING THE USERID TO AN & DSNAME IS ALSO    *
* /*         INVALID.                                                 *
* /*         ONCE THIS VALIDITY CHECKING IS DONE PARAMETERS ARE SET   *
* /*         UP FOR THE SEARCH SUBROUTINE.  THE SEARCH IS FOR DSNAME  *
* /*         (IF ONE IS PROVIDED), MEMBERNAME (IF ONE IS PROVIDED),   *
* /*         DDNAME (IF ONE IS PROVIDED, AND ALWAYS FOR AN ENTRY      *
* /*         WHICH IS NOT IN USE, AND A DYNAM ENTRY. THE ATTRSRCH     *
* /*         SUBROUTINE (SEARCH ATRCB CHAIN) IS ENTERED TO SEARCH     *
* /*         FOR A DDNAME (IF PROVIDED) THAT HAS NOT BEEN FOUND       *
* /*         WITH THE SEARCH SUBROUTINE BEFORE ISSUING THE SVC 99     *
* /*         FOR A CONVERT OR FOR A DATASET. IF IT SI FOUND, THIS     *
* /*         OPERATION FAILS WITH A RETURN CODE OF 20, AND CONTROL    *
* /*         IS PASSED TO EXITCODE.                                   *
* /*         AFTER THE SEARCH A CHECK IS MADE OF STATUS2 TO SEE IF    *
* /*         DDNAME SHOULD BE KEYED ON RATHER THAN DSNAME (THIS IS SO *
* /*         IF DAIR08 HAS BEEN ENTERED FROM DAIR24), IF SO CONTROL   *
* /*         IS PASSED BACK TO DAIR24.                                *
* /*              AFTER SEARCH IF AN ELIGIBLE ENTRY FOR THE DATASET   *
* /*         HAS BEEN FOUND THE CONVERT FUNCTION MAY BE USED.SPECIAL  *
* /*         PROCESS IN SEARCH FOR CODE 08 DETERMINES IF AN ENTRY IS  *
* /*         ELIGIBLE. UPON DIFFERENT CONDITIONS DIFFERENT CONVERT    *
* /*         OPTIONS WILL BE SET IN THE SEARCH ROUTINE AND IN CODE08. *
* /*            IF A DDNAME HAS ALSO BEEN SEARCHED                    *
* /*         IN RTCODE.  IF IT IS UNSUCCESSFUL A RETURN CODE OF 12    *
* /*         FOR AND FOUND, A CHECK IS MADE TO SEE IF IT CAN BE USED  *
* /*         IF NOT RTCODE RECEIVES A RETURN CODE OF 20 AND CONTROL   *
* /*         IS PASSED TO EXITCODE.  IF THE DDNAME CAN BE USED AND    *
* /*         THE DDNAME WHICH WAS FOUND AND DSNAME WHICH WAS FOUND    *
* /*         ARE INDIFFERENT DSE BLOCKS THE EXCHANGE OPTIONS OF       *
* /*         CONVERT IS SPECIFIED.  THE DSE UPDATE PARM LIST AND A    *
* /*         CONVERT PARM LIST ARE THEN SET UP UTILIZING THE          *
* /*         PARAMETERS PASSED TO DAIR.                               *
* /*         BEFORE ISSUING THE SVC 99 FOR A CONVERT OR FOR           *
* /*         DATASET THE LOCATE AND OBTAIN SVC'S ARE ISSUED IF        *
* /*         NECESSARY.  IF THE USER HAS SPECIFIED THE VOLUME         *
* /*         THEN THE LOCATE IS NOT NECESSARY, OTHERWISE IT WILL      *
* /*         BE ISSUED.  THE OBTAIN CAN THEN ALSO BE ISSUED IF        *
* /*         NECESSARY.  A CHECK IS ALSO MADE TO SEE IF A             *
* /*         MEMBERNAME IS SPECIFIED WITH A DATA SET ORGANIZA-        *
* /*         TION OF SOMETHING OTHER THAN PO.  RETURN IS THEN         *
* /*         TO EITHER THE CONVERT OR DATASET PATHS.                  *
* /*         SVC 99 (DYNAMIC ALLOCATION) IS THEN ISSUED.              *
* /*         IF IT IS SUCCESSFUL A RETURN CODE OF ZERO IS PLACED      *
* /*         IN RTCODE.  IF IT IS UNSUCCESSFUL A RETURN CODE OF 12    *
* /*         IS PLACED IN RTCODE, AND R15 PLACED IN THE DARC FIELD.   *
* /*         CONTROL IS THEN PASSED TO EXITCODE.       IF A           *
* /*         DATA SET NAME HAS NOT BEEN GIVEN, OR IF THE GIVEN NAME   *
* /*         CANNOT BE FOUND THE CONVERT FUNCTION CANNOT BE USED AND  *
* /*         AN ATTEMPT IS MADE TO USE THE DATASET FUNCTION OF        *
* /*         DYNAMIC ALLOCATION.  IF THE DDNAME HAS BEEN GIVEN AND    *
* /*         HAS BEEN FOUND IN THE DSE, CHECKS ARE MADE TO SEE        *
* /*         IF THIS ENTRY CAN BE USED.  IF IT IS CURRENTLY IN USE    *
* /*         OR PERMANENTLY ALLOCATED A RETURN CODE OF 20 IS PLACED   *
* /*         IN RTCODE AND CONTROL IS PASSED TO EXITCODE.  IF THE     *
* /*         DDNAME IS A MEMBER OF A DYNAMICALLY CONCATENATED GROUP   *
* /*         AN ATTEMPT IS MADE TO DECONCATENATE THE GROUP.           *
* /*         THIS IS DONE BY SETTING STATUS2 TO INDICATE THE RETURN   *
* /*         POINT,  SETTING BIT 1 IN STATUS1 TO INDICATE INFORMATION *
* /*         FROM A DSE BLOCK IS TO BE USED INSTEAD OF THE USER       *
* /*         PARMS, AND PASSING CONTROL TO DAIR10 FOR THE DECONCAT.   *
* /*         UPON RETURN, IF THE DECONCAT WAS SUCCESSFUL PROCESSING   *
* /*         CONTINUES.  IF THE DECONCAT HAS BEEN UNSUCCESSFUL CONTRL *
* /*         IS PASSED TO EXITCODE.                                   *
* /*         IF THE DDNAME HAS NOT BEEN GIVEN OR IF IT CANNOT BE      *
* /*         FOUND, A DYNAM OR NOT IN USE ENTRY MUST BE USED.         *
* /*         IF NEITHER TYPE IS AVAILABLE A RETURN CODE OF 16 IS      *
* /*         PLACED IN RTCODE AND CONTROL IS PASSED TO EXITCODE.      *
* /*         A DDNAME FROM A CONCATENATED GROUP WILL CAUSE A RETURN   *
* /*         CODE OF 24.                                              *
* /*         IF THE USER HAS NOT SUPPLIED A DDNAME AND THE DATASET    *
* /*         FUNCTION OF DYNAMIC ALLOCATION IS TO BE USED THEN A      *
* /*         DDNAME WILL BE GENERATED FOR HIM IN THE DDNAME GENERATE  *
* /*         ROUTINE DESCRIBED BELOW.                                 *
* /*         IF THERE IS NO DYNAM ENTRY AVAILABLE BUT THERE IS A NOT  *
* /*         IN USE ENTRY AN ATTEMPT IS MADE TO 1NALLOCATE THIS ENTRY *
* /*         THIS IS ACCOMPLISHED BY SETTING STATUS2 TO INDICATE THE  *
* /*         RETURN POINT AND SETTING STATUS1 TO INDICATE INFORMATION *
* /*         SHOULD BE OBTAINED FROM A DSE BLOCK, AND PASSING CONTROL *
* /*         TO DAIR18.  IF THE UNALLOCATION IS UNSUCCESSFUL CONTROL  *
* /*         IS PASSED TO EXITCODE.                                   *
* /*         IF UNALLOCATION IS SUCCESSFUL PROCESSING CONTINUES.      *
* /*         IF THERE IS A DYNAM ENTRY AVAILABLE PROCESSING CONTINUES *
* /*         AT THIS POINT A DSE ENTRY HAS BEEN FOUND AND DATASET     *
* /*         CAN BE ISSUED.  IF THE DSNAME IS SUPPLIED AND THE        *
* /*         DISPOSITION IS NEW, CATLG DAIR WILL CATALOG THE DATA SET *
* /*         UPON SUCCESSFUL ALLOCATION OF THE DATA SET.              *
* /*         MOD, CATLG DATASETS WILL NOT BE CATALOGED.  THEREFORE    *
* /*         THE CATLG DISPOSITION WILL BE CHANGED TO KEEP PRIOR      *
* /*         TO ISSUING THE SVC 99 THUS PREVENTING A SECOND CATALOG   *
* /*         ATTEMPT BY UNALLOC.  THE DSE UPDATE PARAMETER LIST AND   *
* /*         THE DATASET PARAMETER LIST ARE BUILT AND SVC 99 IS       *
* /*         ISSUED.                                                  *
* /*         IF ALLOCATION WAS UNSUCCESSFUL A RETURN CODE OF 12 IS    *
* /*         PLACED IN RTCODE, R15 IS PLACED IN THE DARC FIELD AND    *
* /*         CONTROL IS PASSED TO EXIT CODE.                          *
* /*         IF ALLOCATION HAS BEEN SUCCESSFUL AND THE DISPOSITION    *
* /*         WAS NOT ORIGINALLY NEW, CATLG A SUCCESSFUL RETURN        *
* /*         CODE IS SET UP AND CONTROL IS PASSED TO EXITCODE         *
* /*         IF THE DATESET WAS NEW, CATALOG AN ATTEMPT IS MADE TO    *
* /*         CATALOG IT.  A GETMAIN IS ISSUED FOR THE PARAMETER       *
* /*         LIST NEEDED FOR CATALOG.  THE PARAMETER LIST IS BUILT    *
* /*         AND THE CATALOG ISSUED.  UPON SUCCESSFUL COMPLETION      *
* /*         A RETURN CODE OF ZERO IS PASSED AND CONTROL IS GIVEN     *
* /*         TO EXITCODE.  IF AN ERROR OCCURED AN 8 IS PLACED IN      *
* /*         RTCODE AND REGISTER 15 IS PLACED IN THE CTRC FIELD.      *
* /*         THE DATASET IS THEN UNALLOCATED AND CONTROL GIVEN TO     *
* /*         EXITCODE.                                                *
* /*               THE CATBX MACRO IS USED AND IF INDEX LEVELS ARE    *
* /*        MISSING THE SAME CATALOG MACRO WILL ATTEMPT TO BUILD      *
* /*        THESE INDICES.                                            *
* /*                      ********************                        *
* /*                      *     DAIR 0C      *                        *
* /*                      ********************                        *
* /* DAIROC CHART - DR5                                               *
* /*    INPUT                                                         *
* /*         USER PARAMETER LIST                                      *
* /*    OUTPUT                                                        *
* /*         DESIRED FUNCTION                                         *
* /*         RETURN CODE                                              *
* /*         0, 4, 12                                                 *
* /*    CONTROL BLOCKS REFERENCED                                     *
* /*         1)  DSE                                                  *
* /*    EXTERNAL ROUTINES                                             *
* /*         1)  DYNAMIC ALLOCATION                                   *
* /* DESCRIPTION OF FLOWCHART                                         *
* /*         IF THE NUMBER OF ENTRIES IS LESS THAN 2 A RETURN CODE    *
* /*         OF 4 IS PASSED OM RTCODE AND CONTROL IS GIVEN TO EXIT    *
* /*         CODE.  IF THE NUMBER OF ENTRIES IS GREATER THAN 1, A DSE *
* /*         UPDATE PARM LIST AND A CONCAT PARM LIST ARE BUILT,       *
* /*         AND SVC 99 IS ISSUED.  IF UNSUCCESSFUL A RETURN CODE     *
* /*         OF 12 IS PLACED IN RTCODE AND R15 IS PLACED IN THE DARC  *
* /*         FIELD.  CONTROL IS THEN PASSED TO EXITCODE.  IF THE      *
* /*         CONCAT WAS SUCCESSFUL CONTROL IS PASSED TO EXITCODE.     *
* /*                      ********************                        *
* /*                      *      DAIR 10     *                        *
* /*                      ********************                        *
* /* DAIR10 CHART DR6                                                 *
* /*    INPUT                                                         *
* /*         USER PARAMETER LIST                                      *
* /*    OUTPUT                                                        *
* /*         DESIRED FUNCTION                                         *
* /*         RETURN CODE                                              *
* /*    RETURN CODES                                                  *
* /*         0, 4, 12                                                 *
* /*    CONTROL BLOCKS REFERENCED                                     *
* /*         1)  DSE                                                  *
* /*    EXTERNAL ROUTINES                                             *
* /*         1)  DYNAMIC ALLOCATION                                   *
* /*    DESCRIPTION OF FLOWCHART                                      *
* /*         THIS ROUTINE CAN ACCEPT ITS INFORMATION FROM THE         *
* /*         USERS PARM LIST OR FROM A DSE BLOCK.                     *
* /*         THE FIRST THING DONE IS TO DETERMINE WHICH PLACE         *
* /*         THE INFORMATION IS COMING FROM.  A DSE UPDATE PARM       *
* /*         LIST AND A DECONCAT PARM LIST, THE LISTS ARE BUILT, AND  *
* /*         SVC 99 IS ISSUED.  IF UNSUCCESSFUL A 12 IS PLACED        *
* /*         IN RTCODE, R15 IS PLACED IN THE DARC FIELD AND CONTROL   *
* /*         IS PASSED TO EXITCODE.  IF THE DECONCAT IS SUCCESSFUL,   *
* /*         CONTROL IS PASSED TO EXITCODE.                           *
* /*                      ********************                        *
* /*                      *    DAIR  14      *                        *
* /*                      ********************                        *
* /* DAIR 14 CHART - DR7                                              *
* /*    INPUT                                                         *
* /*         USER PARAMETER LIST                                      *
* /*    OUTPUT                                                        *
* /*         COMPLETED FUNCTION                                       *
* /*         RETURN CODE                                              *
* /*    RETURN CODES                                                  *
* /*         0, 4, 36, 40                                             *
* /*    CONTROL BLOCKS REFERENCED                                     *
* /*         NONE                                                     *
* /*    EXTERNAL ROUTINES                                             *
* /*         1)  GETMAIN                                              *
* /*         2)  FREEMAIN                                             *
* /*         4)  LINK                                                 *
* /*    DESCRIPTION OF FLOWCHART                                      *
* /*         THIS ROUTINE ATTEMPTS TO RETURN ALL QUALIFERS FOR THE    *
* /*         GIVEN INDEX NAME.  IF THE DSNAMEPTR IS ZERO, OR IF THE   *
* /*         RETURN AREA ADDRESS IS ZERO, OR IF THE LENGTH OF THE     *
* /*         RETURN AREA IS LESS THAN EIGHT, A RETURN CODE OF 4 IS    *
* /*         PLACED IN RTCODE AND CONTROL IS PASSED TO EXITCODE.      *
* /*         THE USERID SUBROUTINE IS ENTERED IF THE USERID MUST BE   *
* /*         PREFIXED.  A RETURN CODE OF 4 IS PLACED IN RTCODE IF AN  *
* /*         ERROR HAS OCCURRED. CONTROL IS THEN PASSED TO EXITCODE.  *
* /*         OTHERWISE,  THE PASSED RETURN AREA IS CLEARED TO ZERO,   *
* /*         CORE IS OBTAINED FOR A REGISTER SAVE AREA, AN IKJEHCIR   *
* /*         PARAMETER LIST, AND A 265 BYTE RETURN AREA FOR IKJEHCIR. *
* /*         THE PARAMETER LIST IS BUILT AND A LINK TO IKJEHCIR IS    *
* /*         DONE.                                                    *
* /*         IF IKJEHCIR ENCOUNTERED AN ERROR A RETURN CODE OF 36 IS  *
* /*         PLACED IN RTCODE AND R15 IS PLACED IN RTCODE15.          *
* /*         CONTROL IS THEN PASSED TO EXITCODE.                      *
* /*         WHEN THE RETURN IS SUCCESSFUL THE QUALIFIERS ARE MOVED   *
* /*         INTO THE USER'S RETURN AREA.  IF THE RETURN AREA IS      *
* /*         EXHAUSTED BEFORE THE OUTPUT FROM IKJEHCIR                *
* /*         IS EXHAUSTED A RETURN CODE OF 40 IS PLACED IN RTCODE AND *
* /*         CONTROL IS PASSED TO EXIT CODE.  IF THE OUTPUT FROM      *
* /*         IKJEHCIR IS EXHAUSTED FIRST AND AN INDICATION IS PRESENT *
* /*         THAT MORE INDEX BLOCKS EXIST CONTROL IS ONCE AGAIN       *
* /*         PASSED TO IKJEHCIR AS BEFORE AND PROCESSING CONTINUES    *
* /*         AS BEFORE.                                               *
* /*         IF ALL INDEX BLOCKS HAVE BEEN PROCESSED CONTROL IS       *
* /*         PASSED TO EXITCODE.                                      *
* /*                      ********************                        *
* /*                      *    DAIR  18      *                        *
* /*                      ********************                        *
* /* DAIR 18 CHAR - DR8                                               *
* /*    INPUT                                                         *
* /*         USER PARAMETER LIST                                      *
* /*    OUTPUT                                                        *
* /*         DESIRED FUNCTION                                         *
* /*         RETURN CODES                                             *
* /*    RETURN CODES                                                  *
* /*        0, 4, 8, 12, 24, 28                                       *
* /*    CONTROL BLOCKS REFERENCED                                     *
* /*         1)  DSE                                                  *
* /*    EXTERNAL ROUTINES                                             *
* /*         1)  DYNAMIC ALLOCATION                                   *
* /*    DESCRIPTION OF FLOWCHART                                      *
* /*         THIS ROUTINE ATTEMPTS TO UNALLOCATE DATA SETS BY EITHER  *
* /*         DATA SET NAME OR DDNAME.  IT CAN ALSO ACCEPT INFORMATION *
* /*         FROM EITHER A DSE BLOCK OR THE USER'S PARM LIST.         *
* /*         IF UNALLICATION BY DSNAME IS REQUESTED AND THE DATA SET  *
* /*         APPEARS SEVERAL TIMES IN THE DSE ALL OF THESE ENTRIES    *
* /*         ARE UNALLOCATED.                                         *
* /*         IF UNALLOCATION OF A PARTICULAR DD IS REQUESTED          *
* /*         A SEPARATE SEARCH IS MADE ON THE DSNAME                  *
* /*         ASSOCIATED WITH THAT DD.  IF THAT DATASET IS FOUND TO BE *
* /*         MULTIPLY ALLOCATED IN THE DSE CHAIN DAIR WILL SET BIT    *
* /*         0 OF THE OPTION FIELD IN THE UNALLOC PARM LIST INDICATING*
* /*         TO UNALLOC NOT TO DEQ THE DATASET.  IN CODE '18'X        *
* /*         WHEN UNALLOCATION IS BY DSNAME AND REPEATED CALLS TO     *
* /*         UNALLOCATION ARE NECESSARY THEN DAIR WILL IGNORE MINOR   *
* /*         ERROR RETURN CODE FROM UNALLOC.  THESE RETURN CODES WILL *
* /*         BE LESS THAN X'40' AND THE DATASET WILL BE 1NALLOCATED.  *
* /*         THE MOST CURRENT NON-ZERO RETURN CODE WILL BE IN THE     *
* /*         DARC FIELD.                                              *
* /*         IF UNALLOCATION IS BY DDNAME AND THE DDNAME IS BLANK A   *
* /*         RETURN CODE OF 4 IS PLACED IN RTCODE, AND CONTROL        *
* /*         IS PASSED TO EXITCODE.  THE LIST ARE BUILT AND SVC       *
* /*         99 IS ISSUED.  IF IT IS UNSUCCESSFUL A RETURN CODE OF 12 *
* /*         IS PLACED IN RTCODE AND R15 IS PLACED IN THE DARC FIELD. *
* /*         IF SUCCESSFUL, CONTROL IS PASSED TO EXITCODE.            *
* /*         IF THE UNALLOCATION IS TO BE BY DATA SET NAME AND THE    *
* /*         DSNAMEPTR IS ZERO OR THE DSNAME IS BLANK A RETURN        *
* /*         CODE OF 4 IS PLACED IN RTCODE.  CONTROL IS THEN PASSED   *
* /*         TO EXITCODE.                                             *
* /*         IF THESE FIELDS ARE VALID THE USERID IS PREFIXED (IF     *
* /*         REQUIRED) THROUGH THE USERID SUBROUTINE.  SHOULD THIS    *
* /*         ROUTINE ENCOUNTER AN ERROR THE PROCESSING IS THE SAME    *
* /*         AS FOR INVALID INFORMATION AS DESCRIBED IN THE           *
* /*         PREVIOUS PARAGRAPH.                                      *
* /*         THE SEARCH SUBROUTINE IS THEN USED TO SEARCH FOR THE     *
* /*         DSNAME (AND MEMBERNAME IF SPECIFIED) IN THE DSE.         *
* /*         AN INDICATOR IS SET WHICH TELLS SEARCH TO STOP AT THE    *
* /*         FIRST OCCURRENCE OF THE DATA SET NAME.                   *
* /*         IF THE SEARCH IS UNSUCCESSFUL, A RETURN CODE OF 28 IS    *
* /*         PLACED IN RTCODE.  IF THE DATA SET IS A MEMBER OF A      *
* /*         CONCATENATED GROUP A RETURN CODE OF 24 IS PLACED IN      *
* /*         RTCODE.  IN EITHER CASE CONTROL IS PASSED TO EXITCODE.   *
* /*         IF THE DATA SET IS A MEMBER OF A DYNAMICALLY CONCATENATE *
* /*         GROUP AN ATTEMPT IS MADE TO DECONCATENATE THE GROUP.     *
* /*         THIS IS DONE BY SETTING STATUS2 TO INDICATE THE RETURN   *
* /*         POINT, SETTING BIT 1 IN STATUS1 TO INDICATE INFORMATION  *
* /*         FROM A DSE BLOCK IS TO BE USED INSTEAD OF THE            *
* /*         USER PARMS, AND PASSING CONTROL TO DAIR10 FOR THE        *
* /*         DECONCAT.                                                *
* /*         IF THE DECONCAT IS UNSUCCESSFUL, CONTROL IS PASSED TO    *
* /*         EXITCODE.                                                *
* /*         IF THE DATA SET IS NOT A MEMBER OF A DYNAMICALLY         *
* /*         CONCATENATED GROUP, OR IF THE DECONCAT IS UNSUCCESSFUL,  *
* /*         THE DATA SET IS THEN CHECKED GO SEE IF IT IS A           *
* /*         PERMANENTLY ALLOCATED DATA SET.  IF IT IS PERMANENTLY    *
* /*         ALLOCATED AND BIT 3 IS ON IN THE USERS CONTROL FIELD IT  *
* /*         WILL BE TREATED AS ANY OTHER DATA SET.                   *
* /*         IF BIT 3 IS NOT ON A PARM LIST FOR DYNAMIC ALLOCATION    *
* /*         AND DSE UPDATE WILL BE BUILT AS IN CODE '2C'X,           *
* /*         HOWEVER THE LAST BIT IN THE FIRST WORD OF THE DSE UPDATE *
* /*         LIST WILL BE SET TO ONE INDICATING THE DSE @ IS SENT AND *
* /*         NOT A TCB @.  THIS DSE WILL THEN BE MARKED AS NOT IN     *
* /*         USE.  OTHERWISE THE UNALLOC PARMLIST AND DSE UPDATE LIST *
* /*         IS BUILT FOR UNALLOC AND THE SVC ISSUED.                 *
* /*         IF UNSUCCESSFUL A RETURN CODE OF 12 IS PLACED IN RTCODE, *
* /*         R15 IS PLACED IN THE DARC FIELD, AND CONTROL IS PASSED   *
* /*         TO EXITCODE.                                             *
* /*         IF THE SVC IS SUCCESSFUL BUT THE ENTIRE DSE HAS NOT      *
* /*         BEEN SEARCHED THE SEARCH CONTINUES (STARTING AT THE      *
* /*         NEXT DSE BLOCK) AS BEFORE.  WHEN THE ENTIRE DSE HAS BEEN *
* /*         SEARCHED CONTROL IS PASSED TO EXITCODE.                  *
* /*                      ********************                        *
* /*                      *    DAIR  1C      *                        *
* /*                      ********************                        *
* /*         DAIR1C CHART - DR9                                       *
* /*         USER PARAMETER LIST                                      *
* /*    OUTPUT                                                        *
* /*         DESIRED FUNCION                                          *
* /*         RETURN CODES                                             *
* /*         ALLOCATED DDNAME IN PARM LIST                            *
* /*    RETURN CODES                                                  *
* /*         0, 4, 12, 16, 20, 24, 28                                 *
* /*    CONTROL BLOCKS REFERENCED                                     *
* /*         1)  DSE                                                  *
* /*    EXTERNAL ROUTINES                                             *
* /*         1)  DYNAMIC ALLOCATION                                   *
* /*    DESCRIPTION OF FLOWCHART                                      *
* /*         THIS ROUTINE ATTEMPTS TO HAVE THE TERMINAL ALLOCATED FOR *
* /*         THE USER.  IT CAN BE ALLOCATED TO A SPECIFIED DDNAME OR  *
* /*         ELSE TO ANY AVAILABLE ENTRY.                             *
* /*         FIRST, A CHECK IS MADE FOR THE SPECIFICATION OF AN       *
* /*         ATTRIBUTE LIST.  IF ONE IS INDICATED, A VALIDITY CHECK   *
* /*         OF THE ATTR-LIST-NAME HAS NOT BEEN SUPPLIED              *
* /*         POSSIBLE IF THE ATTR-LIST-NAME HAS NOT BEEN SUPPLIED     *
* /*         AND CONTROL IS PASSED TO EXITCODE.  OTHERWISE, A SEARCH  *
* /*         OF THE ATRCB CHAIN FOR THE SUPPLIED ATTR-LIST-NAME IS    *
* /*         MADE. A RETURN DOCE OF 28 IS POSSIBLE IF THE ATTR-LIST-  *
* /*         NAME IS NOT FOUND ON THE CHAIN AND CONTROL IS PASSED     *
* /*         TO EXITCODE.                                             *
* /*         THE SEARCH SUBROUTINE IS ENTERED TO SEARCH FOR A DYNAM   *
* /*         ENTRY, A NOT-IN-USE ENTRY,   A DDNAME (IF SPECIFIED),    *
* /*         AND AN AVAILABLE TERMINAL ENTRY. UPON RETURN FROM SEARCH *
* /*         EMPHASIS IS MADE UPON THE FIND OF AN AVAILABLE TERMINAL  *
* /*         ENTRY. IF ONE IS FOUND AND IT HAPPENS TO BE ASSOCIATED   *
* /*         WITH THE REQUESTED DD OR IF NO DD WAS SPECIFIED, IT WILL *
* /*         BE MARKED IN USE THROUGH CONVERT,DDNAME RETURNED AND THE *
* /*         EXIT MADE. IF THE DD REQUESTED IS ASSOCIATED WITH        *
* /*         ANOTHER ENTRY AND IS NOT PERMANENTLY ALLOCATED OR IN USE *
* /*         AND A TERMINAL ENTRY IS AVAILABLE THE EXCHANGE OPTION    *
* /*         OF CONVERT IS USED TO SWITCH DD'S   , MARK THEM IN USE,  *
* /*         AND RETURN TO EXITCODE.  THE ATTRSRCH SUBROUTINE (SEARCH *
* /*         ATRCB CHAIN) IS ENTERED TO SEARCH FOR A DDNAME (IF       *
* /*         SPECIFIED) THAT HAS NOT BEEN FOUND WITH THE SEARCH       *
* /*         SUBROUTINE.  IF IT IS FOUND A RETURN CODE OF 20 IS       *
* /*         PLACED IN RTCODE AND CONTROL IS PASSED TO EXITCODE.      *
* /*         IF A DDNAME IS SPECIFIED AND HAS BEEN FOUND, BUT IS NOT  *
* /*         A DYNAM ENTRY SOME FURTHER CHECKS ARE NECESSARY.         *
* /*         IF THE ENTRY IS IN USE OR PERMANENTLY ALLOCATED A        *
* /*         RETURN CODE OF 20 IS PLACED IN RTCODE AND                *
* /*         CONTROL IS PASSED TO EXITCODE.  IF THE DD IS A MEMBER OF *
* /*         A CONCATENATED GROUP A RETURN CODE OF 24 IS RETURNED     *
* /*         IF THE ENTRY NEITHER OF THE ABOVE BUT IT IS DYNAMICALLY  *
* /*         CONCATENATED CONTROL IS PASSED TO DAIR10.  AN INDICATOR  *
* /*         IS SET WHICH MEANS INFORMATION FROM A DSE BLOCK MUST     *
* /*         BE USED INSTEAD OF THE USER PARMS.  THE RETURN ADDRESS   *
* /*         IS INDICATED THROUGH STATUS2.                            *
* /*         IF THE DECONCAT IS SUCCESSFUL, OR IF THE ENTRY WAS NOT   *
* /*         DYNAMICALLY CONCATENATED, A CHECK IS MADE TO SEE IF      *
* /*         A DYNAM ENTRY HAD BEEN FOUND BY SEARCH.                  *
* /*         IF NOT, THE ENTRY NOW BEING WORKED WITH ISUNALLOCATED.   *
* /*         CONTROL IS PASSED TO DAIR18 WITH ALL NECESSARY           *
* /*         INDICATORS SET.  IF THE UNALLOC IS NOT SUCCESSFUL,       *
* /*         CONTROL IS PASSED TO EXITCODE.                           *
* /*         IF A DYNAM ENTRY DOES EXIST, A CONVERT AND DSE UPDATE    *
* /*         PARAMETER LIST ARE BUILT.  THE 'EXCHANGE' OPTION         *
* /*         AND 'ATTRIBUTE LIST' OPTION (IF SPECIFIED) ARE           *
* /*         INDICATED AND SVC 99 IS ISSUED.  IF UNSUCCESSFUL         *
* /*         A RETURN CODE OF 12 IS PLACED IN RTCODE, R15 IS PLACED   *
* /*         IN RTCODE   AND CONTROL IS PASSED TO EXITCODE.           *
* /*         IF THE CONVERT WAS SUCCESSFUL OR IF THE UNALLOC WAS      *
* /*         SUCCESSFUL (MEANING WE NOW HAVE THE REQUIRED DDNAME      *
* /*         ASSOCIATED WITH A DYNAM ENTRY), A DATASET PARM LIST      *
* /*         AND DSE UPDATE PARM LIST ARE BUILT AND THE SVC           *
* /*         99 IS ISSUED.  IF IT IS UNSUCCESSFUL A 12 IS PLACED      *
* /*         CONTROL IS PASSED TO EXITCODE.  IF THE ALLOCATION WAS    *
* /*         SUCCESSFUL CONTROL IS PASSED TO EXITCODE.                *
* /*         IF A DDNAME HAS NOT BEEN SPECIFIED,                      *
* /*         AND THERE ARE NO TERMINAL ENTRIES AVAILABLE THEN A       *
* /*         DDNAME IS GENERATED IN THE DDNAME GENERATE ROUTINE       *
* /*         DESCRIBED BELOW,THEN EITHER A DYNAM ENTRY                *
* /*         OR A NOT IN USE ENTRY CAN SATISFY THE REQUEST.           *
* /*         IF A DYNAM ENTRY EXITS A DATASET AND DSE UPDATE PARM     *
* /*         LIST IS CONSTRUCTED AS BEFORE, THE SVC 99 IS ISSUED AND  *
* /*         PROCESSING IS THE SAME AS EXPLAINED PREVIOUSLY.          *
* /*         IF THERE IS NO DYNAM ENTRY, BUT A NOT IN USE ENTRY       *
* /*         EXISTS, AN UNALLOC IS DONE.  THIS PROCESSING IS THE SAME *
* /*         AS PREVIOUSLY EXPLAINED.                                 *
* /*         IF NEITHER A DYNAM, OR NOT IN USE ENTRY EXISTS A         *
* /*         RETURN CODE OF 16 IS PLACED IN RTCODE AND CONTROL IS     *
* /*         PASSED TO EXITCODE.                                      *
* /*                      ********************                        *
* /*                      *    DAIR  24      *                        *
* /*                      ********************                        *
* /* DAIR24 CHART - DR11                                              *
* /*    INPUT                                                         *
* /*         USER PARAMETER LIST                                      *
* /*    OUTPUT                                                        *
* /*         DESIRED FUNCTION RETURN CODE ALLOCATED DDNAME IS PARM   */
* /*         LIST ALLOCATED DSNAME IN PARM LIST DSORG IN PARM LIST.   *
* /*    RETURN CODES                                                  *
* /*         0, 4, 8, 12, 16, 20                                      *
* /*    CONTROL BLOCKS REFERENCED                                     *
* /*         1)  DSE                                                  *
* /*    EXTERNAL ROUTINES                                             *
* /*         1)  DYNAMIC ALLOCATION                                   *
* /*    DESCRIPTION OF FLOWCHART                                      *
* /*         THIS ROUTINE PERFORMS FUNCTION ALMOST IDENTICAL          *
* /*         TO DAIR08.  THE MAJOR DIFFERENCE IS THAT DDNAME CARRIES  *
* /*         MORE WEIGHT THAN DSNAME AND IN FACT IS REQUIRED).        *
* /*         IF THE DDNAME IS NOT FOUND THE FUNCTION IS THE SAME AS   *
* /*         FOR DAIR08.  SINCE THE TWO ROUTINES ARE SO SIMILAR       *
* /*         DAIR08 IS USED FOR THE MAJORITY OF PROCESSING NEEDED     *
* /*         BY DAIR24.                                               *
* /*         THE INITIAL FUNCTION OF THIS ROUTINE IS SOME VALIDITY    *
* /*         CHECKING.  IF THE DDNAME IS BLANK, OR IF THE             *
* /*         DSNAMEPTR IS ZERO, OR IF THE DSNAME IS BLANK A           *
* /*         RETURN CODE OF 4 IS PLACED IN RTCODE AND CONTROL         *
* /*         IS PASSED TO EXITCODE.                                   *
* /*         OTHERWISE AN INDICATOR IS SET IN STATUS2 WHICH SAYS      *
* /*         DDNAME IS THE KEY RATHER THAN DSNAME.  CONTROL IS THEN   *
* /*         PASSED DIRECTLY TO DAIR08.                               *
* /*         CONTROL IS RETURNED FROM DAIR0, AFTER IT HAS COMPLETED   *
* /*         THE SEARCH SUBROUTINE.  IF THE DDNAME HAS NOT BEEN FOUND *
* /*         CONTROL IS PASSED BACK TO DAIR0, FOR THE CONTINUANCE     *
* /*         OF ITS PROCESSING.                                       *
* /*         IF THE DDNAME IS FOUND BUT IS IS A DUMMY BIT 4 OF THE    *
* /*         PARM FLAGS IS SET.  IF IT IS IN USE, A RETURN CODE OF 20 *
* /*         IS PLACED IN RTCODE.  CONTROL IS THEN PASSED TO EXITCODE *
* /*         IF THE ENTRY IS A DYNAM ENTRY CONTROL IS RETURNED TO     *
* /*         DAIR08 FOR FURTHER PROCESSING.                           *
* /*         IF THE DDNAME REQUESTED IS NOT FOUND OR IF IT IS NOT     *
* /*         PERMANENTLY ALLOCATED THEN THE DDNAME FIELD IN THE       *
* /*         DAIR PARM LIST IS BLANKED OUT AND CONTROL IS RETURNED TO *
* /*         DAIR08.  THE DDNAME WHICH IS ALLOCATED, IF ANY WILL BE   *
* /*         RETURNED IN THE USER PARM LIST.                          *
* /*         IF NONE OF THE ABOVE CASES ARE TRUE A DSE UPDATE         *
* /*         PARAMETER LIST AND A CONVERT PARAMETER LIST ARE BUILT    *
* /*         AND THE SVC 99 IS ISSUED.  IF IT IS UNSUCCESSFUL A       *
* /*         RETURN CODE OF 12 IS PLACED IN RTCODE,  R15 IS           *
* /*         PLACED IN THE DARC FIELD AND CONTROL IS PASSED TO        *
* /*         EXITCODE.  IF SUCCESSFUL CONTROL IS RETURNED TO EXITCODE.*
* /*                      ********************                        *
* /*                      *    DAIR  28      *                        *
* /*                      ********************                        *
* /* DAIR28 CHART - DR12                                              *
* /*    INPUT                                                         *
* /*         USER PARAMETER LIST                                      *
* /*    OUTPUT                                                        *
* /*         DESIRED FUNCTIONS                                        *
* /*         RETURN CODES                                             *
* /*    RETURN CODES                                                  *
* /*         0, 4, RETURN CODE FROM ALL OTHER FUNCTIONS               *
* /*    CONTROL BLOCKS REFERENCED                                     *
* /*         NONE                                                     *
* /*    EXTERNAL ROUTINES                                             *
* /*         NONE                                                     *
* /*    DESCRIPTION OF FLOWCHART                                      *
* /*         THIS ROUTINE ACCEPTS AS INPUT A LIST OF ADDRESSES.  EACH *
* /*         ADDRESS POINTS TO A DAIR OPERATION PARAMETER LIST.  THE  *
* /*         BRANCH TABLE IN DAIRCTRL IS USED TO RETURN CONTROL TO    *
* /*         '28'X AFTER EACH FUNCTION.  IF THE NUMBER OF ENTRIES IS  *
* /*         EQUAL TO ZERO A 4 IS PLACED IN RTCODE AND CONTROL IS     *
* /*         PASSED TO EXITCODE.  OTHERWISE, EACH ENTRY IS SELECTED   *
* /*         AND CONTROL PASSED TO DAIRCTRL FOR USE OF THE BRANCH     *
* /*         TABLE.  WHEN ALL ENTRIES HAVE BEEN PROCESSED CONTROL IS  *
* /*         PASSED TO EXITCODE.  AN ENTRY CODE OF '14'X OR AN        *
* /*         ADDITIONAL '28'X WILL BE IGNORED.                        *
* /*                      ********************                        *
* /*                      *    DAIR  2C      *                        *
* /*                      ********************                        *
* /* DAIR2C CHART - DR13                                              *
* /*    INPUT                                                         *
* /*         USER PARAMETER LIST                                      *
* /*    OUTPUT                                                        *
* /*         RETURN CODE                                              *
* /*         ALLOCATABLE TIOT ENTRIES                                 *
* /*    RETURN CODES                                                  *
* /*         0, 4                                                     *
* /*    CONTROL BLOCKS REFERENCED                                     *
* /*         DSE                                                      *
* /*    EXTERNAL ROUTINES                                             *
* /*         1)  DYNAMIC ALLOCATION                                   *
* /*    DESCRIPTION OF FLOWCHART                                      *
* /*         THIS ROUTINE ATTEMPTS TO OPTIMIZE TIOT ENTRIES.  IT DOES *
* /*         THIS BY HAVING DSE ENTRIES MARKED AS NOT IN USE.  THERE  *
* /*         ARE THREE OPTIONAL WAYS OF HAVING THESE DSE ENTRIES      *
* /*         MARKED NOT IS USE.  FIRST - IF THE CONTROL FIELD OF THE  *
* /*         DAIRPARM LIST IS X'0000' AND A TCB ADDRESS IS SPECIFIED  *
* /*         THEN ALL DATA SETS ALLOCATED BY THE TASK WITH THE SAME   *
* /*         TCB ADDRESS IN THE DSE ARE MARKED NOT IN USE.  A DSE     *
* /*         UPDATE PARM LIST IS BUILT WITH THE TCB ADDRESS AND SVC   *
* /*         99 ISSUED.  UPON RETURN CONTROL IS PASSED TO EXITCODE.   *
* /*         IF THE CONTROL FIELD IS X'0000' AND THE TCB ADDRESS      *
* /*         FIELD IS ZERO THEN A RETURN CODE OF 4 IS PUT IN RTCODE   *
* /*         AND CONTROL PASSED TO EXITCODE.  SECOND IF THE CONTROL   *
* /*         FIELD IN THE DAIR PARM LIST IS X'0001' AND A DDNAME IS   *
* /*         SPECIFIED THEN DAIR WILL SEARCH THE DSE CHAIN FOR THAT   *
* /*         DD.  IF NOT FOUND OR IF IT IS ALREADY MARKED NOT IN USE  *
* /*         THEN RTCODE IS SET TO ZERO AND CONTROL IS PASSED TO      *
* /*         EXITCODE.  IF FOUND THE DSE UPDATE PARM LIST IS BUILT    *
* /*         WITH THE DSE@, ASSOCIATED WITH THE DDNAME, IN THE TCB @  *
* /*         FIELD OF THE LIST AND THE LAST BIT OF THE FIRST WORD SET *
* /*         TO 1 INDICATING A DSE@ IS SUPPLIED AND NOT A TCB@.       *
* /*         SVC 99 IS ISSUED AND DSE UPDATE WILL MARK THAT SPECIFIC  *
* /*         DSE AS NOT IN USE.  UPON RETURN CONTROL IS PASSED TO     *
* /*         EXITCODE.  IF THE CONTROL FIELD IS SET TO X'0001' AND A  *
* /*         DDNAME IS NOT SPECIFIED THEN A 4 IS PLACED IN RTCODE AND *
* /*         CONTROL IS PASSED TO EXITCODE.  THE THIRD OPTION IS TO   *
* /*         MARK AS NOT IN USE ALL DSE'S EXCEPT THOSE ALLOCATED BY   *
* /*         THE CURRENT TASK, ITS ANCESTORS AND THE INITIATOR.  THE  *
* /*         NEXT TO THE LAST BIT IN THE FIRST WORD OF THE DSE        *
* /*         UPDATE LIST IS SET TO 1 INDICATING THIS OPTION AND SVC   *
* /*         99 ISSUED.  UPON RETURN CONTROL IS PASSED TO EXITCODE.   *
* /*                        ******************                        *
* /*                        *   DAIR 30      *                        *
* /*                        ******************                        *
* /* DAIR30 CHART - DR14                                              *
* /*   INPUT                                                          *
* /*         USER PARAMETER LIST                                      *
* /*   OUTPUT                                                         *
* /*         DESIRED FUNCTION                                         *
* /*         SYSOUT DSNAME IN PARM LIST                               *
* /*         ALLOCATED DDNAME IN PARM LIST                            *
* /*         RETURN CODE                                              *
* /*    RETURN CODES                                                  *
* /*         0, 4, 12, 16, 20, 24, 28                                 *
* /*    CONTROL BLOCKS REFERENCED                                     *
* /*         1)  DSE                                                  *
* /*    EXTERNAL ROUTINES                                             *
* /*         1)  DYNAMIC ALLOCATION                                   *
* /*    DESCRIPTION OF FLOWCHART                                      *
* /*         THIS ROUTINE IS USED TO DYNAMICALLY ALLOCATE A SYSOUT    *
* /*         DATA SET WITH OR WITHOUT AN ATTRIBUTE LIST OF DCB        *
* /*         IF AN ATTRIBUTE LIST IS SPECIFIED, A CHECK ON THE        *
* /*         SUPPLIED ATTR-LIST-NAME IS MADE.  IF THERE IS NONE,      *
* /*         THE OPERATION IS FAILED WITH A RETURN CODE OF 4.         *
* /*         IF IT IS NOT FOUND ON THE ATRCB CHAIN, THE OPERATION     *
* /*         IS FAILED WITH A RETURN CODE OF 28.                      *
* /*         IF A DATA SET NAME IS GIVEN IN THE PARAMETER LIST THE    *
* /*         OPERATION IS FAILED WITH A RETURN CODE OF 4.  IF THE     *
* /*         GENERATED SYSOUT DATA SET NAME IS DESIRED AS OUTPUT BUT  *
* /*         THE RETURN AREA IS LESS THAN 44 CHARACTERS THE           *
* /*         OPERATION IS FAILED WITH A RETURN CODE OF 4.             *
* /*         IF A PARTICULAR DDNAME IS DESIRED THE SEARCH SUBROUTINE  *
* /*         IS ENTERED TO SEARCH FOR THE DDNAME, AS WELL AS FOR A    *
* /*         DYNAM ENTRY AND A NOT IN USE ENTRY.  IF THE DDNAME       *
* /*         IS NOT FOUND WITH THE SEARCH SUBROUTINE, THEN THE        *
* /*         ATTRSRCH SUBROUTINE IS ENTERED.  IF IT IS FOUND          *
* /*         ON THE ATRCB CHAIN, THE OPERATION IS FAILED WITH A       *
* /*         RETURN CODE OF 20.  IF NO PARTICULAR DDNAME              *
* /*         IS REQUIRED A SEARCH FOR A DYNAM AND A NOT IN USE        *
* /*         ENTRY IS DONE.                                           *
* /*         IF A DDNAME IS NOT SUPPLIED THEN ONE IS GENERATED IN     *
* /*         THE DDNAME GENERATE ROUTINE DESCRIBED BELOW.             *
* /*         IF THE DDNAME IS FOUND AND IS NOT DYNAM OR IN USE BUT    *
* /*         IS DYNAMICALLY CONCATENATED, IT IS DECONCATENATED        *
* /*         (THROUGH DAIR10).  IF ANY DYNAM ENTRIES DO EXIST THE     *
* /*         CONVERT FUNCTION IS USED TO EXCHANGE THE DDNAME REQUIRED *
* /*         WITH THAT OF A DYNAM ENTRY.  IF NO DYNAM ENTRIES EXIST   *
* /*         THE CURRENT ENTRY IS UNALLOCATED (THROUGH DAIR18).       *
* /*         IF THE DDNAME IS NOT FOUND, OR IF ONE HAS NOT BEEN       *
* /*         SPECIFIED AND NO DYNAM ENTRIES EXIST, BUT A NOT IN USE   *
* /*         ENTRY DOES EXIST IT IS UNALLOCATED (THROUGH DAIR18) AS   *
* /*         ABOVE AND PROCESSING CONTINUES FROM THERE.  IF THE ONLY  *
* /*         ELIGIBLE ENTRY IS A DYNAMICALLY CONCATENATED ENTRY IT    *
* /*         IS DECONCATENATED (THROUGH DAIR10) AND UNALLOCATED       *
* /*         (THROUGH DAIR18) AS ABOVE.                               *
* /*         AT THIS POINT A DYNAM ENTRY IS NOW READY FOR USE FOR THE *
* /*         REQUESTED ALLOCATION.  THE DATASET FUNCTION IS NOW USED  *
* /*         TO ALLOCATE THE DATA SET.                                *
* /*         IF IT IS UNSUCCESSFUL, OR IF ANY OF THE OTHER DYNAMIC    *
* /*         ALLOCATION FUNCTIONS HAS BEEN UNSUCCESSFUL, A RETURN     *
* /*         CODE OF 12 IS RETURNED.  IF NO DYNAM ENTRIES WERE        *
* /*         AVAILABLE, OR MADE TO BE AVAILABLE THROUGH THE ABOVE     *
* /*         MACHINATIONS, A RETURN CODE OF 16 IS PASSED.  IF THE     *
* /*         REQUESTED DDNAME WAS FOUND BUT UNAVAILABLE (IN USE, OR   *
* /*         PERMANENTLY ALLOCATED), A RETURN CODE OF 20 IS PASSED.   *
* /*         IF THE DDNAME IS A MEMBER OR A CONCATENATED GROUP        *
* /*         (CONCATENATED AT LOGON) A RETURN CODE OF 24 IS PASSED.   *
* /*         USED AND THE USER HAS NOT SUPPLIED A DDNAME.THE FORMAT   *
* /*         OF THE DDNAME IS SYSNNNNN WHERE NNNNN IS A NUMBER FORMED *
* /*         BY ADDING 1 TO A COUNT FIELD IN THE ECT CALLED ECTDDNUM. *
* /*         BEFORE USING THE DDNAME A SEARCH OF THE DSE WILL BE MADE *
* /*         AND IF THE DDNAME IS A DUPLICATE THEN THE NEXT DDNAME IS *
* /*         GENERATED. WHEN A NON DUPLICATE DDNAME IS FOUND CONTROL  *
* /*         IS PASSED BACK TO THE PROPER ENTRY CODE AND PROCESSING   *
* /*         CONTINUES.                                               *
* /*                                                                  *
* /*                      ********************                        *
* /*                      *     DAIR 34      *                        *
* /*                      ********************                        *
* /* DAIR34 CHART -                                                   *
* /*    INPUT                                                         *
* /*         USER PARAMETER LIST                                      *
* /*    OUTPUT                                                        *
* /*         DESIRED FUNCTION                                         *
* /*    RETURN CODES                                                  *
* /*         0, 4, 20, 28                                             *
* /*    CONTROL BLOCKS REFERENCED                                     *
* /*         1)  DSE                                                  *
* /*         2)  ATRCB                                                *
* /*    EXTERNAL ROUTINES                                             *
* /*         1)  DYNAMIC ALLOCATION                                   *
* /*    DESCRITPTION OF FLOWCHART                                     *
* /*         THIS ROUTINE IS USED TO PERFORM SEVERAL FUNCTIONS        *
* /*         RELATED TO ATTRIBUTE PROCESSING.  THESE FUNCTIONS        *
* /*         ARE:                                                     *
* /*             A)  SEARCH ATRCB CHAIN FOR A GIVEN NAME              *
* /*             B)  CHAIN A NEW ATRCB ON THE ATRCB CHAIN             *
* /*             C)  UNCHAIN A PARTICULAR ATRCB FROM THE ATRCB        *
* /*                 CHAIN                                            *
* /*         UPON ENTRY TO DAIR34 A CHECK IS MADE TO DETERMINE        *
* /*         IF PROPER INPUT HAS BEEN PROVIDED, SPECIFICALLY AN       *
* /*         ATTRIBUTE NAME. IF THE PARAMETER LIST IS INVALID         *
* /*         A CODE 4 IS RETURNED AND EXITCODE IS ENTERED.  IF        *
* /*         THE PARAMETERS ARE VALID A TEST IS MADE TO DETERMINE     *
* /*         IF A SEARCH OPERATION IS TO BE PERFORMED.  IF YES THE    *
* /*         ROUTINE WILL GO TO THE ATTRSRCH SUBROUTINE TO SEARCH     *
* /*         THE DSE AND ATRCB CHAINS FOR THE GIVEN ATTR-LIST-NAME    *
* /*         PROVIDED.  IF THE NAME IS FOUND OR NOT FOUND IT WILL     *
* /*         INDICATE SO TO DAIR34 WHO WILL SET THE RETURN CODE       *
* /*         TO ZERO AND GO TO EXITCODE.  IF A SEARCH OPERATION       *
* /*         IS NOT TO BE PERFORMED, A TEST IS MADE TO DETERMINE      *
* /*         IF A CHAIN OPERATION IS TO BE PERFORMED.  IF IT IS,      *
* /*         ATTRSRCH WILL BE ENTERED, TO FIRST SEARCH THE ATRCB      *
* /*         AND DSE CHAINS FOR THE NAME HAVING ALREADY BEEN          *
* /*         USED.  IF YES AN ERROR CODE 20 WILL BE RETURNED TO       *
* /*         EXITCODE, OTHERWISE THE DYNAMIC ALLOCATION PARM          *
* /*         LIST WILL BE SET UP AND DYNAMIC ALLOCATION ENTERED       *
* /*         TO PLACE THE ATTRIBUTES ON THE ATRCB CHAIN.              *
* /*         UPON RETURN FROM DYNAMIC ALLOCATION, A ZERO              *
* /*         RETURN CODE WILL BE SET AND CONTROL ROUTED TO            *
* /*         EXITCODE. IF NEITHER A SEARCH OR CHAIN OPERATION         *
* /*         IS REQUIRED A TEST IS MADE TO DETERMINE IF ENTRY         *
* /*         WAS MADE FOR AN UNCHAIN OPERATION.  IF IT WAS NOT        *
* /*         AND NONE OF THE ABOVE HAD BEEN SPECIFIED, AN ERROR       *
* /*         CODE 4 IS RETURNED TO EXITCODE.  IF UNCHAIN WAS          *
* /*         SPECIFIED, THE ATTRSRCH SUBROUTINE WILL BE ENTERED       *
* /*         TO SEARCH THE ATRCB CHAIN FOR THE SPECIFIED ATTR-        *
* /*         LIST-NAME. IF THE NAME WAS NOT FOUND A RETURN CODE       *
* /*         28 IS RETURNED TO EXITCODE.  IF THE NAME WAS FOUND       *
* /*         A DYNAMIC ALLOCATION PARAMETER LIST IS SET UP            *
* /*         AND CONTROL IS GIVEN TO DYNAMIC ALLOCATION TO            *
* /*         UNCHAIN THE ATRCB.  UPON RETURN A SUCCESSFUL RETURN      *
* /*         CODE IS SET AND CONTROL IS PASSED TO EXITCODE            *
* /*         *************************************************        *
* /*         *  DDNGEN: DDNAME GENERATE ROUTINE              *        *
* /*         *************************************************        *
* /*         DDNGEN IS ENTERED ANYTIME THE DATASET FUNCTION IS TO BE  *
* /*                      ********************                        *
* /*                      *    USERID        *                        *
* /*                      ********************                        *
* /*    INPUT                                                         *
* /*         ADDRESS OF DSLNGTH DSNAME BUFFER                         *
* /*    OUTPUT                                                        *
* /*         ADDRESS OF BUFFER CONTAINING USERID PREFIXED DATA SET    *
* /*         NAME                                                     *
* /*    RETURN CODES                                                  *
* /*         0 - SUCCESSFUL                                           *
* /*         4 - ERROR                                                *
* /*         NONE                                                     *
* /*    EXTERNAL ROUTINES                                             *
* /*         NONE                                                     *
* /*    DESCRIPTION OF FLOWCHART                                      *
* /*         THE FUNCTION OF THIS ROUTINE IS TO PREFIX A DATA SET     *
* /*         NAME WITH THE USERID.  IT PLACES THE OUTPUT DATA SET     *
* /*         NAME IN A GOTTEN AREA OF CORE AND RETURNS ITS ADDRESS    *
* /*         TO THE CALLING ROUTINE.                                  *
* /*         IF THE RESULTANT DSNAME IS GREATER THAN 44 CHARACTERS    *
* /*         AN ERROR CONDITION IS INDICATED.                         *
* /*                      ********************                        *
* /*                      *    SEARCH        *                        *
* /*                      ********************                        *
* /* SEARCH SUBROUTINE CHART - DR18                                   *
* /*    INPUT                                                         *
* /*         R2 POINTING TO DAIRWA                                    *
* /*         THE FOLLOWING FIELDS IN DAIRWA:                          *
* /*         DDNPTR - ADDRESS OF EIGHT BYTE DDNAME                    *
* /*             OR ATTR-LIST-NAME FOR USE IN SEARCH.                 *
* /*         DSNPTR - ADDRESS OF DSLNGTH DSNAME                       *
* /*             BUFFER FOR THE DATA SET NAME TO                      *
* /*             TO BE USED IN THE SEARCH.                            *
* /*         MEMPTR - ADDRESS OF THE EIGHT BYTE                       *
* /*             MEMBER NAME TO BE USED IN THE                        *
* /*             SEARCH.                                              *
* /*         BLKPTR - ADDRESS OF DSE BLOCK AT WHICH                   *
* /*             THE SEARCH IS TO BEGIN. ( OTHER                      *
* /*             THAN AT THE BEGINING )                               *
* /*         STATUS1                                                  *
* /*             BIT 2: STOP SEARCH AT FIRST                          *
* /*             OCCURRENCE OF DSNAME.                                *
* /*         STATUS2                                                  *
* /*             BIT 1: AN ATTRIBUTE LIST IS SPECIFIED                *
* /*    OUTPUT                                                        *
* /*         BLKPTR - ADDRESS OF NEXT DSE BLOCK ON                    *
* /*             THE CHAIN. ONLY USEFUL WHEN BIT 2                    *
* /*             OF STATUS1 IS SET.                                   *
* /*         DDNADDR - ADDRESS OF DSE BLOCK FOR                       *
* /*             SOUGHT DDNAME OR ATTR-LIST-NAME.                     *
* /*         DSNADDR - ADDRESS OF DSE BLOCK FOR                       *
* /*             SOUGHT DSNAME.                                       *
* /*         NOTUADDR - ADDRESS OF DSE BLOCK WHICH                    *
* /*             IS NOT IN USE.                                       *
* /*         DYNMADDR - ADDRESS OF DSE BLOCK WHICH                    *
* /*             IS DYNAM.                                            *
* /*         CNCAADDR - ADDRESS OF DSE BLOCK WHICH                    *
* /*             IS NOT IN USE, BUT IS DYNAMICALLY                    *
* /*             CONCATENATED.                                        *
* /*         STATUS1                                                  *
* /*             BIT 4: DSNAME IS A MEMBER OF A                       *
* /*                    DYNAMICALLY CONCATENATED                      *
* /*                    GROUP.                                        *
* /*                 5: DSNAME IS A MEMBER OF A                       *
* /*                    CONCATENATED GROUP.                           *
* /*                 6: DSNAME APPEARS MORE THAN                      *
* /*                    ONCE IN DSE                                   *
* /*    RETURN CODES                                                  *
* /*         NONE                                                     *
* /*    CONTROL BLOCKS REFERENCED                                     *
* /*         1)  DSE                                                  *
* /*    EXTERNAL ROUTINES                                             *
* /*         NONE                                                     *
* /*    DESCRIPTION OF FLOWCHART                                      *
* /*         THIS SUBROUTINE SEARCHES THE DSE CHAIN EITHER FROM THE   *
* /*         BEGINNING, OR FROM AN ADDRESS PASSED IN BLKPTR.  IT      *
* /*         SEARCHES THE ENTIRE DSE CHAIN UNLESS BIT 2 OF STATUS 1   *
* /*         IS SET.  AS IT SEARCHES IT STORES THE OUTPUT IN THE      *
* /*         DAIRWA.                                                  *
* /*         IF THE SEARCH IS FOR DSNAME, AN ADDRESS IS STORED AT     *
* /*         DSNADDR ONLY IF THE FOUND DATA SET NAME IS NEITHER       *
* /*         PERMANENTLY ALLOCATED OR IN USE AND THE CALL IS NOT FROM *
* /*         CODE '08'X. SPECIAL PROCESSING IS PERFORMED FOR A NOT IN *
* /*         USE ENTRY FOR DSNAME FOR CODE '08'X. IF THE DATASET IS   *
* /*         NOT PERMANENTLY ALLOCATED THEN DAIR WILL CHECK FOR A     *
* /*         CONFLICT BETWEEN THE REQUESTED STATUS AND THE ALLOCATED  *
* /*         DISP2, THAT IS IF THE REQUEST IS NEW AND THE ALLOCATED   *
* /*         DISP IS NOT DELETE THEN AN IMMEDIATE ERROR RETURN CODE OF*
* /*         32 IS GIVEN. IF THE REQUESTED STATUS IS OLD,MOD,OR SHR   *
* /*         AND THE ALLOCATED DISP IS DELETE AN IMMEDIATE ERROR CODE *
* /*         OF 44 WILL BE GIVEN IF VOLUME INFORMATION WAS SUPPLIED   *
* /*         OR AN 8 RETURN CODE GIVEN WITH A '1708'X IN THE DARC AND *
* /*         AND AN '08'X IN THE CTRC IF NO VOLUME INFORMATION WAS    *
* /*         SUPPLIED. IN ADDITION IF THE REQUEST IS NEW AND THE      *
* /*         ALLOCATED DISP IS DELETE THEN A BIT IS SET IN THE CONVERT*
* /*         OPTIONS FOR CLEANING UP THE JFCB. ALSO IF DISPOSITION    *
* /*         REQUESTS OR MEMBER NAME REQUESTS ARE DIFFERENT THAN WHAT *
* /*         IS IN THE DSE THEN RESPECTIVE BITS ARE SET IN THE CONVERT*
* /*         OPTIONS FIELD.                                           *
* /*         IF THE DATASET IS PERMANENTLY ALLOCATED, AN ATTRIBUTE   */
* /*         LIST IS NOT SPECIFIED, AND THE DATASET NAME              *
* /*         DOES NOT START WITH & THEN DAIR WILL CHECK FOR           *
* /*         CONFLICTS BETWEEN ANY OF THE FOLLOWING ATTRIBUTES:       *
* /*         DDNAME,MEMBERNAME, AND STATUS.  IN CHECKING STATUS THE   *
* /*         FOLLOWING LOGIC WILL BE USED; IF THE REQUESTED STATUS    *
* /*         IS NEW AN IMMEDIATE ERROR CODE OF 32 WILL BE GIVEN; IF   *
* /*         THE REQUESTED STATUS IS MOD AND THE ALLOCATED STATUS IS  *
* /*         NOT MOD THEN THE DSE ENTRY IS INELIGIBLE AND THE SEARCH  *
* /*         CONTINUES, IF THE REQUESTED STATUS IS OLD OR SHR AND THE *
* /*         DSE IS MOD THEN THE ENTRY IS INELIGIBLE AND THE SEARCH   *
* /*         IS CONTINUED. IN ADDITION IF THE DATASET IS A PERMANENTLY*
* /*         ALLOCATED &NAME THEN DAIR WILL CHECK FOR CONFLICTS ONLY  *
* /*         IN DDNAME,IF WILL NOT PASS REQUESTED DISP2 OR DISP3 TO   *
* /*         CONVERT AND IT WILL SET THE JFCB CLEAN UP BIT IN THE     *
* /*         CONVERT OPTION FIELD IF THE REQUESTED STATUS IS NEW.     *
* /********************************************************************
*         /************************************************************
*         /*  COMPILE TIME VARIABLES FOLLOW                           *
*         /************************************************************
* IKJEFD00:
*         PROC(ONE)  OPTIONS(REENTRANT,CODEREG(2,6,11));
         LCLA  &T,&SPN                                            0002
.@001    ANOP                                                     0002
IKJEFD00 CSECT ,                                                  0002
         STM   @E,@C,12(@D)                                       0002
         BALR  @2,0                                               0002
@PSTART  DS    0H                                                 0002
         USING @PSTART+00000,@2                                   0002
         LA    @6,4095(0,@2)                                      0002
         USING @PSTART+04095,@6                                   0002
         LA    @B,4095(0,@6)                                      0002
         USING @PSTART+08190,@B                                   0002
         L     @0,@SIZ001                                         0002
         GETMAIN  R,LV=(0)                                        0002
         LR    @C,@1                                              0002
         USING @DATD+00000,@C                                     0002
         LM    @0,@1,20(@D)                                       0002
         XC    @TEMPS(@L),@TEMPS                                  0002
         ST    @D,@SAV001+4                                       0002
         LA    @F,@SAV001                                         0002
         ST    @F,8(0,@D)                                         0002
         LR    @D,@F                                              0002
*         GENERATE;
&SPN     SETA  1
         B     BRCH
         DC    CL14'IKJEFD00 72059'                            C99236
BRCH     EQU   *
         DS    0H
*          GEN DATA;                          /*                 M0245*
*    DCL  CVTPTR  PTR(31) BASED(16);          /*  CVT PTR             *
*    DCL DSEMPTR  PTR(31)  AUTO;              /*  DSE MEMBER PTR      *
*    DCL  DSEPTR REG(7) PTR(31);              /* DSEPTR         C99236*
*    DCL  TJBPTR   PTR(31)  AUTO;             /* TJBPTR               *
*    DCL  DAPLPTR    PTR(31);                 /* POINTER TO DAIRC99236
*                                                BLOCK          C99236*
*    DCL   DAIRPTR REG(5) PTR(31);            /* POINTER        C99236*
*    DCL ENQLIST LABEL GENERATED;       /*DCL GENERATED LABEL   Y01018*
** /* *************************************************************** *
** /* THE DYNAMIC ALLOCATION INTERFACE ROUTINE (DAIR) PARAMETER LIST  *
** /* (DAPL) IS A LIST OF ADDRESSES PASSED FROM THE INVOKER TO DAIR   *
** /* VIA REGISTER 1                                                  *
** /* *************************************************************** *
** DECLARE
**   1 DAPL      BASED(DAPLPTR),
**
**
**
**
**
**
**
**
**
**
**    2 DAPLUPT  PTR(31),             /* PTR TO UPT                   *
**    2 DAPLECT  PTR(31),             /* PTR TO ECT                   *
**    2 DAPLECB  PTR(31),             /* PTR TO CP'S ECB              *
**    2 DAPLPSCB PTR(31),             /* PTR TO PSCB                  *
**    2 DAPLDAPB PTR(31);             /* PTR TO DAIR PARAMETER BLOCK  *
** DECLARE
**   1 DAPB00    BASED(DAIRPTR),
** /* *************************************************************** *
** /* S OPERATION  CODE CAUSES A SEARCH OF THE DSE TO BE MADE FOR THE *
** /* CIFIED DSNAME AND SET THE DA00FLG FIELD ACCORDINGLY. IF DDNAME  *
** /* REQUESTED INFORMATION IS RETURNED IN DA00FLG INDICATING WHETHER *
** /* NOT THE DDNAME IS ALLOCATED TO THE TERMINAL                     *
** /* *************************************************************** *
**    2 DA00CD   CHAR(2),
**    2 DA00FLG  CHAR(2),            /* FUNCTIONS PERFORMED WHEN
**                                       RETURN CODE= 0               *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 DA00PERM BIT(1),             /* DSE IS PERM. ALLOCATED  M0766*
**     3 DA00DYNM BIT(1),             /* DD IS A DYNAM           M0766*
**     3 DA00DSE  BIT(1),             /* DSNAME FOUND IN DSE          *
**     3 DA00TERM BIT(1),             /* DDNAME ALLOCATED TO A
**                                       TERMINAL                     *
**    2 DA00PDSN PTR(31),             /* POINTER TO DSNAME TO BE
**                                       SEARCHED FOR IN DSE          *
**    2 DA00DDN  CHAR(8),             /* DDNAME TO BE SEARCHED FOR IN
**                                       DSE                          *
**    2 DA00CTL  CHAR(1),             /* CONTROL FLAGS FOR SPEC
**                                       PROCESSING                   *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 DA00UID  BIT(1),             /* USER ID IS TO BE PREFIXED TO
**                                       DSNAME                       *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**   2 *  CHAR(2),                   /* RESERVED                   */
**    2 DA00DSO  CHAR(1);             /* INDICATES DSORG              *
**
** DECLARE
**   1 DAPB04    BASED(DAIRPTR),
** /* *************************************************************** *
** /* S OPERATION CODE CAUSES A SEARCH OF THE DSE TO BE MADE FOR THE  *
** /* CIFIED DSNAME. IF IT IS NOT FOUND IN THE DSE THE SYSTEM CATALOG *
** /* ALSO SEARCHED                                                   *
** /* *************************************************************** *
**    2 DA04CD   CHAR(2),             /* DAIR ENTRY CODE              *
**    2 DA04FLG  CHAR(2),            /* FUNCTIONS PERFORMED WHEN      *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 DA04CAT  BIT(1),             /* DSNAME FOUND IN              *
**     3 DA04DSE  BIT(1),             /* DSNAME FOUND IN              *
**     3 *        BIT(1),             /* RESERVED                     *
**    2 *        CHAR(2),             /* RESERVED                     *
**    2 DA04CTRC FIXED(15),           /* CTLG RTN                     *
**    2 DA04PDSN PTR(31),             /* POINTER TO DSNAME TO BE
**                                       SEARCHED IN DSE              *
**    2 DA04CTL  CHAR(1),             /* CONTROL FLGS FOR SPECIAL
**                                       PROCESSING                   *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 DA04UID  BIT(1),             /* USER ID IS TO BE PREFIXED TO
**                                       DSNAME                       *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**    2 *        CHAR(2),             /* RESERVED                     *
**    2 DA04DSO  CHAR(1);             /* INDICATES DSORG              *
**
** DECLARE
**   1 DAPB08    BASED(DAIRPTR),
** /* *************************************************************** *
** /* S OPERATION CODE CAUSES ALLOCATION OF A DATA SET. IT CAN ALLOC. *
** /* HER A NEW OR OLD SET.                                           *
** /* *************************************************************** *
**    2 DA08CD   CHAR(2),             /* DAIR ENTRY CODE              *
**    2 DA08FLG  CHAR(2),            /* FUNCTIONS PERFORMED WHEN
**                                       RETURN CODE= 0               *
**     3 DA08FPE  BIT(1),             /* FUNCT PERFORMED BUT ERROR
**                                       INDICATED BY RETCD           *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**    2 DA08DARC FIXED(15),           /*DYN  ALLOC                    *
**    2 DA08CTRC FIXED(15),           /* CATALOG RETURN CODE          *
**    2 DA08PDSN PTR(31),             /* POINTER TO DSNAME TO BE
**                                       SEARCHED IN DSE              *
**    2 DA08DDN  CHAR(8),             /* DDNAME TO BE SEARCHED IN DSE *
**    2 DA08UNIT CHAR(8),             /* UNITNAME REQUESTED           *
**    2 DA08SER  CHAR(8),             /* VOLUME SERIAL NUMBER-PADDED
**                                       W/BLANKS                     *
**    2 DA08BLK  CHAR(4),             /* DATA SET                     *
**    2 DA08PQTY CHAR(4),             /* PRIMARY SPACE QUANTITY       *
**    2 DA08SQTY CHAR(4),             /* SECONDARY SPACE QUANTITY     *
**    2 DA08DQTY CHAR(4),             /* DIRECTORY BLOCK QUANTITY     *
**    2 DA08MNM  CHAR(8),             /* MEMBER NAME                  *
**    2 DA08PSWD CHAR(8),             /* PASSWORD                     *
**    2 DA08DSP1 CHAR(1),             /* DATA SET STATUS FLGS(IF=0
**                                       OLD ASSUMED)                 *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 DA08SHR  BIT(1),             /* DATA SET IS SHR              *
**     3 DA08NEW  BIT(1),             /* DATA SET IS NEW              *
**     3 DA08MOD  BIT(1),             /* DATA SET IS MOD              *
**     3 DA08OLD  BIT(1),             /* DATA SET IS OLD              *
**    2 DA08DPS2 CHAR(1),             /* DATA SET DISPOSITION(IF=0
**                                       KEEP ASSUMED)                *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 DA08KEEP BIT(1),             /* DS DISP IS KEEP              *
**     3 DA08DEL  BIT(1),             /* DS DISP IS DELETE            *
**     3 DA08CAT  BIT(1),             /* DS DISP IS CATLG             *
**     3 DA08UCAT BIT(1),             /* DS DISP IS UNCATALOG         *
**    2 DA08DPS3 CHAR(1),             /* DATA SET CONDITIONAL
**                                       DISPOSITION                  *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 DA08KEP  BIT(1),             /* DS DISP OF KEEP DESIRED      *
**     3 DA08DELE  BIT(1),
**     3 DA08CATL  BIT(1),
**     3 DA08UNCT  BIT(1),
**    2 DA08CTL  CHAR(1),             /* FLAGS TO CONTROL ACTIONS
**                                       TAKEN BY DAIR                *
**     3  DA08TRKS  BIT(1),             /*SPACE UNITS REQUESTED       *
**     3  DA08ABKL  BIT(1),
**     3  DA08UID  BIT(1),
**     3  DA08RLSE BIT(1),
**     3  DA08PERM BIT(1),
**     3  DA08DMMY BIT(1),
**     3  DA08ATRL BIT(1),              /*ATTR LIST SUPPLIED    C99236*
**     3  *  BIT(1),                    /*                      C99236*
**    2 *        CHAR(3),             /* RESERVED                     *
**    2 DA08DSO  CHAR(1),             /* DSORG                  C99236*
**    2 DA08ALN  CHAR(8);             /* ATTR-LIST-NAME         C99236*
**
** DECLARE
**   1 DAPB0C    BASED(DAIRPTR),
** /* *************************************************************** *
** /* S OPERATION CODE SAUSES THE REQUESTED DDNAMES TO BE CONCATENATE *
** /*  DDNAMES SPECIFIED MUST ALL BE CURRENTLY ALLOCATED              *
** /* *************************************************************** *
**    2 DA0CCD   CHAR(2),             /* DAIR ENTRY CODE              *
**    2 DA0CFLG  CHAR(2),            /* FUNCTIONS PERFORMED WHEN      *
**    2 DA0CDARC FIXED(15),           /*DYN  ALLOC                    *
**    2 *        CHAR(2),             /* RESERVED                     *
**    2 DA0CNUMB  FIXED(15),         /* NUMBER OF 8 BYTE FIELDS THAT  *
**    2 *        CHAR(2);             /* RESERVED                     *
**
** DECLARE
**   1 DAPB10    BASED(DAIRPTR),
** /* *************************************************************** *
** /* S OPERATION CODE CAUSES THE PREVIOUSLY CONCATENATED DDNAME  TO  *
** /* DECONCATENATED                                                  *
** /* *************************************************************** *
**    2 DA10CD   CHAR(2),             /* DAIR ENTRY CODE              *
**    2 DA10FLG  CHAR(2),            /* FUNCTIONS PERFORMED WHEN
**                                       RETURN CODE= 0               *
**    2 DA10DARC FIXED(15),           /*DYN  ALLOC                    *
**    2 *        CHAR(2),             /* RESERVED                     *
**    2 DA10DDN  CHAR(8);             /* DDNAME TO BE SEARCHED IN DSE *
**
** DECLARE
**   1 DAPB14    BASED(DAIRPTR),
** /* *************************************************************** *
** /* S OPERATION CODE RETURNS QUALIFIERS IN THE RETURN AREA FOR THE  *
** /* EN INDEX NAME                                                   *
** /* *************************************************************** *
**    2 DA14CD   CHAR(2),             /* DAIR ENTRY CODE              *
**    2 DA14FLG  CHAR(2),            /* FUNCTIONS PERFORMED WHEN
**                                       RETURN CODE= 0               *
**    2 DA14PDSN PTR(31),             /* POINTER TO DSNAME TO BE
**                                       SEARCHED IN DSE              *
**    2 DA14PRET PTR(31),             /* POINTER TO RETURN AREA       *
**    2 DA14CTL  CHAR(1),             /* CONTROL FLAGS FOR SPECIAL
**                                       PROCESSING                   *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 DA14UID  BIT(1),             /* USER ID IS TO BE PREFIXED TO
**                                       DSNAME                       *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**    2 *        CHAR(3);             /* RESERVED                     *
**
** DECLARE
**   1 DAPB18    BASED(DAIRPTR),
** /* *************************************************************** *
** /* S OPERATION CAUSES THE REQUESTED DATA SET OR DDNAME TO BE       *
** /* LLOCATED. DISPOSITION CAN BE SPECIFIED TO OVERRIDE ANY PREVIOUS *
** /* POSITION. LIKENISE SYSOUT CLASS MAY BE SPECIFIED TO OVERRIDE AN *
** /* VIOUS CLASS.                                                    *
** /* *************************************************************** *
**    2 DA18CD   CHAR(2),             /* DAIR ENTRY CODE              *
**    2 DA18FLG  CHAR(2),            /* FUNCTIONS PERFORMED WHEN
**                                       RETURN CODE= 0               *
**     3 DA18FPE  BIT(1),             /* FUNCT PERFORMED BUT ERROR
**                                       INDICATED BY RETCD           *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**    2 DA18DARC FIXED(15),           /* DYNAMIC ALLOCATION RTRN CODE *
**    2 DA18CTRC FIXED(15),           /* CTLG RTN                     *
**    2 DA18PDSN PTR(31),             /* POINTER TO DSNAME TO BE
**                                       SEARCHED IN DSE              *
**    2 DA18DDN  CHAR(8),             /* DDNAME TO BE SEARCHED IN DSE *
**    2 DA18MNM  CHAR(8),             /* MEMBER NAME                  *
**    2 DA18SCLS CHAR(2),             /* SYSOUT CLASS DESIRED WHEN
**                                       UNALLOCATING SYSOUT DATA SET *
**    2 DA18DPS2 CHAR(1),             /* DATA SET DISPOSITION         *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 DA18KEEP BIT(1),             /* CHANGE DISP TO KEEP          *
**     3 DA18DEL  BIT(1),             /* CHANGE DISP TO DELETE        *
**     3 DA18CAT  BIT(1),             /* CHANGE DISP TO CATALOG       *
**     3 DA18UCAT BIT(1),             /* CHANGE DISP TO UNCATLOG      *
**    2 DA18CTL  CHAR(1),             /* FLAGS FOR SPECIAL DAIR
**                                       PROCESSING                   *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 DA18UID  BIT(1),             /* USER ID IS TO BE PREFIXED TO
**                                       DSNAME                       *
**     3 DA18PERM BIT(1),        /* UNALLOC PERM. ALLOCATED DSE  M0765*
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3  *         BIT(1),
**    2  DA18JBNM  CHAR(8);
**
** DECLARE
**   1 DAPB1C    BASED(DAIRPTR),
** /* *************************************************************** *
** /* S OPERATION CODE REQUESTS ALLOCATION TO THE TERMINAL            *
** /* *************************************************************** *
**    2 DA1CCD   CHAR(2),             /* DAIR ENTRY CODE              *
**    2 DA1CFLG  CHAR(2),            /* FUNCTIONS PERFORMED WHEN
**                                       RETURN CODE= 0               *
**    2 DA1CDARC FIXED(15),           /*DYN  ALLOC                    *
**    2 *        CHAR(1),             /* RESERVED                     *
**    2 DA1CCTL  CHAR(1),             /*         CONTROL BYTE   M00582*
**      3 *        BIT(4),            /*  RESERVED              M00582*
**      3 DA1CPERM BIT(1),            /* PERMANENTLY ALLOCATE   M00582*
**      3 *        BIT(1),            /* RESERVED               C99236*
**      3 DA1CATRL BIT(1),            /* ATTR LIST SUPPLIED     C99236*
**      3 *        BIT(1),            /* RESERVED               C99236*
**    2 DA1CDDN  CHAR(8),             /* DDNAME TO BE SEARCHED  C99236
**                                       IN DSE                 C99236*
**    2 DA1CALN  CHAR(8);             /* ATTR-LIST-NAME         C99236*
**
** DECLARE
**   1 DAPB24    BASED(DAIRPTR),
** /* *************************************************************** *
** /* S OPERATION CODE ALLOWS ALLOCATION OF A SPECIFIC DDNAME TO AN   *
** /* EADY ALLOCATED DATA SET OR TO THE SPECIFIED DATA SET  IF THE    *
** /* UESTED DDNAME IS NOT FOUND OR IS DYNAM                          *
** /* *************************************************************** *
**    2 DA24CD   CHAR(2),             /* DAIR ENTRY CODE              *
**    2 DA24FLG  CHAR(2),            /* FUNCTIONS PERFORMED WHEN
**                                       RETURN CODE= 0               *
**     3 DA24FPE  BIT(1),             /* FUNCT PERFORMED BUT ERROR
**                                       INDICATED BY RETCD           *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 DA24DMY  BIT(1),             /* DDNAME REQUESTED IS A DUMMY  *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**    2 DA24DARC FIXED(15),           /* DYNAMIC ALLOCATION RTRN CODE *
**    2 DA24CTRC FIXED(15),           /* CTLG RTN                     *
**    2 DA24PDSN PTR(31),             /* POINTER TO DSNAME TO BE
**                                       SEARCHED IN DSE              *
**    2 DA24DDN  CHAR(8),             /* DDNAME TO BE SEARCHED IN DSE *
**    2 DA24UNIT CHAR(8),             /* UNITNAME REQUESTED           *
**    2 DA24SER  CHAR(8),             /* VOLUME SERIAL NUMBER-PADDED
**                                       W/BLANKS                     *
**    2 DA24BLK  CHAR(4),             /* AVERAGE RECORD LENGTH        *
**    2 DA24PQTY CHAR(4),             /* PRIMARY SPACE QUANTITY       *
**    2 DA24SQTY CHAR(4),             /* SECONDARY SPACE QUANTITY     *
**    2 DA24DQTY CHAR(4),             /* DIRECTORY BLOCK QUANTITY     *
**    2 DA24MNM  CHAR(8),             /* MEMBER NAME                  *
**    2 DA24PSWD CHAR(8),             /* PASSWORD                     *
**    2 DA24DSP1 CHAR(1),             /* DATA SET STATUS FLGS(IF=0
**                                       OLD ASSUMED)                 *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 DA24SHR  BIT(1),             /* DATA SET IS SHR              *
**     3 DA24NEW  BIT(1),             /* DATA SET IS NEW              *
**     3 DA24MOD  BIT(1),             /* DATA SET IS MOD              *
**     3 DA24OLD  BIT(1),             /* DATA SET IS OLD              *
**    2 DA24DPS2 CHAR(1),             /* DATA SET DISPOSITION(IF=0
**                                       KEEP ASSUMED)                *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 DA24KEEP BIT(1),             /* DS DISP IS KEEP              *
**     3 DA24DEL  BIT(1),             /* DS DISP IS DELETE            *
**     3 DA24CAT  BIT(1),             /* DS DISP IS CATLG             *
**     3 DA24UCAT BIT(1),             /* DS DISP IS UNCATALOG         *
**    2 DA24DPS3 CHAR(1),             /* DATA SET CONDITIONAL
**                                       DISPOSITION                  *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 DA24KEP  BIT(1),             /* DS DISP OF KEEP DESIRED      *
**     3 DA24DELE  BIT(1),
**     3 DA24CATL  BIT(1),
**     3 DA24UNCT  BIT(1),
**    2 DA24CTL  CHAR(1),             /* FLAGS TO CONTROL ACTIONS
**                                       TAKEN BY DAIR                *
**     3  DA24TRKS  BIT(1),             /*SPACE UNITS REQUESTED       *
**     3  DA24ABKL  BIT(1),
**     3  DA24UID  BIT(1),
**     3  DA24RLSE BIT(1),
**     3  DA24PERM BIT(1),
**     3  DA24DMMY BIT(1),
**     3  DA24ATRL BIT(1),              /*ATTR LIST SUPPLIED    C99236*
**     3  *  BIT(1),                    /*                      C99236*
**    2 *        CHAR(3),             /* RESERVED                     *
**    2 DA24DSO  CHAR(1),             /* DSORG                  C99236*
**    2 DA24ALN  CHAR(8);             /* ATTR-LIST-NAME         C99236*
**
** DECLARE
**   1 DAPB28    BASED(DAIRPTR),
** /* *************************************************************** *
** /* S OPERATION CODE ALLOWS A LIST OF OPERATIONS TO BE PERFORMED    *
** /* ANY OPERATION FAILS, PROCESSING STOPS AND THE ADDRESS OF THE    *
** /* LED OPERATION IS RETURNED IN PFOP                               *
** /* *************************************************************** *
**    2 DA28CD   CHAR(2),             /* DAIR ENTRY CODE              *
**    2 DA28NOP  FIXED(15),           /* NUMB OF OPERATION PTR FIELDS
**                                       WHICH FOLLOW                 *
**    2 DA28PFOP PTR(31);             /* POINTER TO FAILED OPERATION
**                                       OPERATION POINTERS ARE
**                                       PLACED HERE                  *
**
** DECLARE
**   1 DAPB2C    BASED(DAIRPTR),
** /* *************************************************************** *
** /* S OPERATION CODE ALLOWS FOR RE-USE  OF TIOT ENTRIES             *
** /* IS USED BY THE TMP BEFORE DETACHING A TASK, AND BY ANY  TASK    *
** /* CH ATTACHES SUB-TASKS                                           *
** /* *************************************************************** *
**    2 DA2CCD   CHAR(2),             /* DAIR ENTRY CODE              *
**    2 DA2CFLG  FIXED(15),           /*  FLAGFIELD                   *
**    2 DA2CTCB  PTR(31),             /* TCB ADDR OF DSE ENTRIES      *
**                                    /* MARKED NOT IN USE            *
**    2 DA2CDDN  CHAR(8);             /* DDNAME                       *
** DECLARE
**   1 DAPB30    BASED(DAIRPTR),
** /* *************************************************************** *
** /* S OPERATION CODE ALLOWS FOR ALLOCATION OF A SYSOUT DATA SET     *
** /* *************************************************************** *
**    2 DA30CD   CHAR(2),             /* DAIR ENTRY CODE              *
**    2 DA30FLG  CHAR(2),            /* FUNCTIONS PERFORMED WHEN
**                                       RETURN CODE= 0               *
**     3 DA30FPE  BIT(1),             /* FUNCT PERFORMED BUT ERROR
**                                       INDICATED BY RETCD           *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**    2 DA30DARC  FIXED(15),            /*  DYN ALLOC RETURM CODE     *
**    2 *        CHAR(2),             /* RESERVED                     *
**    2 DA30PDSN  PTR(31),           /* POINTER TO DSNAME TO BE
**                                      SEARCHED IN DSE            */
**    2 DA30DDN  CHAR(8),             /* DDNAME TO BE SEARCHED IN DSE *
**    2 DA30UNIT CHAR(8),             /* UNITNAME REQUESTED           *
**    2 DA30SER  CHAR(8),             /* VOLUME SERIAL NUMBER-PADDED
**                                       W/BLANKS                     *
**    2 DA30BLK  CHAR(4),             /* AVERAGE RECORD LENGTH        *
**    2 DA30PQTY CHAR(4),             /* PRIMARY SPACE QUANTITY       *
**    2 DA30SQTY CHAR(4),             /* SECONDARY SPACE QUANTITY     *
**    2 DA30PGNM CHAR(8),             /* PROGRAM NAME -IF OMITTED
**                                       MUST BE SET TO BLANKS        *
**    2 DA30FORM CHAR(4),             /* FORM NUMBER                  *
**    2 DA30OCLS CHAR(2),             /* OUTPUT CLASS                 *
**    2 *        CHAR(1),             /* RESERVED                     *
**    2 DA30CTL  CHAR(1),             /* FLAGS TO CONTROL ACTIONS
**                                       TAKEN BY DAIR                *
**     3  DA30TRKS  BIT(1),             /*SPACE UNITS REQUESTED       *
**     3  DA30ABKL  BIT(1),
**     3  DA30UID  BIT(1),
**     3  DA30RLSE BIT(1),
**     3  DA30PERM BIT(1),
**     3  DA30DMMY BIT(1),
**     3  DA30ATRL BIT(1),              /*ATTR LIST SUPPLIED    C99236*
**     3  *        BIT(1),              /*                      C99236*
**    2 DA30ALN  CHAR(8);             /* ATTR-LIST-NAME         C99236*
* /********************************************************************
* /* THIS DAIR PARAMETER BLOCK IS USED TO CAUSE:                      *
* /*      1) A SEARCH OF THE ATRCB CHAIN FOR A GIVEN NAME             *
* /*      2) AN ATRCB TO BE PLACED ON THE ATRCB CHAIN                 *
* /*      3) AN ATRCB TO BE REMOVED FROM THE ATRCB CHAIN              *
* /********************************************************************
*         DECLARE
*               1 DAPB34 BASED(DAIRPTR),
*                 2 DA34CD CHAR(2),      /* DAIR ENTRY CODE           *
*                 2 DA34FLG CHAR(2),     /* FLAG FIELD                *
*                   3 DA34FIND BIT(1),   /* ZERO IF ATTR-LIST-NAME
*                                           NOT FOUND ONE IF FOUND    *
*                 2 DA34DARC FIXED(15),  /* DYNAMIC ALLOC. RETURN CODE*
*                 2 DA34CTRL CHAR(1),    /* CONTROL BYTES             *
*                   3 DA34SRCH BIT(1),   /* SEARCH ATTR.CHAIN FOR NAME*
*                   3 DA34CHN  BIT(1),   /* CHAIN NEW ATTR.LIST       *
*                   3 DA34UNCH  BIT(1), /* REMOVE ATTR-LIST FROM CHAIN*
*                 2 *       CHAR(1),
*                 2 DA34NAME  CHAR(8),   /* ATTRIBUTE-LIST-NAME       *
*                 2 DA34ADDR  PTR(31);   /* ADDR OF DAIRACB           *
* DCL  ATRCBPTR PTR(31) AUTO;                 /* PTR TO ATRCB   C99236*
* /********************************************************************
* /********************************************************************
* /*THE ATRCB IS USED TO PROVIDE DCB PARAMETERS TO THE DYNAMIC        *
* /*ALLOCATION ROUTINE                                                *
* /********************************************************************
*         DECLARE
*               1 ATRCB BASED(ATRCBPTR),
*                 2 ATRFORWD PTR (31),     /* ADDRESS OF NEXT ATRCB   *
*                 2 ATRBCKWD PTR (31),     /* ADDRESS OF PREV. ATRCB  *
*                 2 *       CHAR (4),      /* RESERVED                *
*                 2 ATRNAME CHAR (8),      /* ATTR-LIST-NAME          *
*                 2 ATRLNGH FIXED(15),     /* LENGTH OF ATRCB         *
*                 2 ATRMASK  CHAR(8),      /* INOUT-OUTIN             *
*                   3 *      CHAR(6),      /* RESERVED          YM1841*
*                   3 ATRLABEL CHAR(1),    /* OPTION                  *
*                       4 ATRINOUT BIT(1), /* INOUT                   *
*                       4 ATROUTIN BIT(1), /* OUTIN                   *
*                   3 *      CHAR(1),      /* RESERVED          YM1841*
*                 2 *        CHAR(3),      /* RESERVED                *
*                 2 ATREXPDT CHAR(3),      /* DATA SET EXPIRATION DATE*
*                 2 *        CHAR(2),      /* RESERVED                *
*                 2 ATRBUFNO CHAR(1),      /* NO. OF BUFFERS          *
*                 2 ATRBFTEK CHAR(1),      /* BFTEK/BFALN             *
*                   3 ATRBFALN CHAR(1),
*                     4 *       BIT(1),
*                     4 ATRAUTO BIT(2),    /* AUTO RECORD AREA     "A"*
*                       5 ATRSIMPL BIT(1), /* SIMPLE BUFFERING     "S"*
*                       5 ATRECRD BIT(1),  /* RECORD BUFFERING     "R"*
*                     4 ATREXC BIT(1),     /* EXCHANGE BUFFERING   "E"*
*                     4 *      BIT(2),
*                     4 ATRDOUBL BIT(1),   /* DOUBLE WORD BDY      "D"*
*                     4 ATRFULL BIT(1),    /* FULL WORD BDY        "F"*
*                 2 ATRBUFL FIXED(15),     /* BUFFER LENGTH           *
*                 2 ATREROPT CHAR(1),      /* ERROR OPTION            *
*                   3 ATRACEPT BIT(1),     /* ACCEPT             "ACC"*
*                   3 ATRSKIP BIT(1),      /* SKIP               "SKP"*
*                   3 ATRABNOR BIT(1),     /* ABNORMAL EOT       "ABE"*
*                 2 ATRKEYLE CHAR(1),      /* KEY LENGTH              *
*                 2 *        CHAR(6),      /* RESERVED                *
*                 2 ATRECFM CHAR(1),       /* RECORD FORMAT           *
*                   3 ATRUNDEF BIT(2),     /* UNDEFINED            "U"*
*                     4 ATRFIXED BIT(1),   /* FIXED                "F"*
*                     4 ATRVARIB BIT(1),   /* VARIABLE             "V"*
*                   3 ATRTRKOV BIT(1),     /* TRACK OVERFLOW       "T"*
*                   3 ATRBLOCK BIT(1),     /* BLOCKED              "B"*
*                   3 ATRSTAND BIT(1),     /* STANDARD BLOCKS      "S"*
*                   3 ATRASA BIT(1),       /* ASA PRINTER CHARS    "A"*
*                   3 ATRMACH BIT(1),      /* MACH CNTRL CHAR      "M"*
*                 2 ATROPTCD CHAR(1),      /* OPTION CODES            *
*                   3 ATRWRTCK BIT(1),     /* WRT VALIDITY CK      "W"*
*                   3  *       BIT(1),
*                   3 ATRSCHED BIT(1),     /* CHAIN SCHEDULING     "C"*
*                   3  *       BIT(1),
*                   3 ATRANSI  BIT(1),     /* ANSI TRANSLATE       "Q"*
*                   3  *       BIT(1),
*                   3 ATRUSERT BIT(1),     /* USER TOTALING        "T"*
*                 2 ATRBLKSI FIXED(15),    /* MAXIMUM BLOCK SIZE      *
*                 2 ATRLRECL FIXED(15),    /* LOGICAL RECORD LENGTH   *
*                 2 ATRNCP   CHAR(1),      /* MAX# OF READ/WRITE MAC- *
*                                          /* ROS BEFORE CHECK        *
*                 2 *        CHAR (4);     /* RESERVED                *
** DECLARE
**   1 DSE      BASED(DSEPTR),
** /* *************************************************************** *
**
**
** /* IS USED TO MAINTAIN DATA SET INFORMATION, SUCH AS THE DDNAME--  *
** /* ME RELATIONSHIP. IT IS A SERIES OF CHAINED ELEMENTS EACH ONE    *
** /* ABLE IN SIZE DEPENDENT ON THE INFORMATION PRESENT.              *
**
**
** /* *************************************************************** *
**    2 DSEFORWD PTR(31),             /* ADDRESS OF NEXT DSE BLK(ZERO
**                                       IN LAST DSE)                 *
**    2 DSEBCKWD PTR(31),             /* ADDRESS OF PREV. DSE BLK
**                                       (ZERO IN FIRST DSE)          *
**    2 DSEBLKSZ FIXED(15),           /* TOTAL NO. OF BYTES IN THIS
**                                       DSE BLK INCLUDES THIS FIELD
**                                       AND TWO PRIOR FIELDS         *
**    2 DSESTAT  CHAR(1),             /* THE ALLOCATED STATUS OF
**                                       THE DATA SET                 *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 DSESHR   BIT(1),             /* SHR                          *
**     3 DSENEW   BIT(1),             /* NEW                          *
**     3 DSEMOD   BIT(1),             /* MOD                          *
**     3 DSEOLD   BIT(1),             /* OLD                          *
**    2 DSECNTRL CHAR(1),             /* STATUS OF DATA SETS WHEN
**                                       BITS ARE ON AS FOLLOWS       *
**     3 DSEDYN   BIT(1),             /* DATA SET ALLOCATED
**                                       DYNAMICALLY                  *
**     3 DSENUSED BIT(1),             /* DATA SET NOT IN USE          *
**     3 DSEMEM   BIT(1),             /* MEMBER FIELD IS PRESENT IN
**                                       THIS DSE                     *
**     3 DSEDTIOT BIT(1),             /* TIOT ENTRY IS DYNAM          *
**     3 DSECON   BIT(1),             /* DATA SET CONCATENATED
**                                       DYNAMICALLY                  *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 DSEPERM  BIT(1),             /* DATA SET IS PERMAMENTLY
**                                       ALLOCATED EQU                *
**     3 *        BIT(1),             /* RESERVED                     *
**    2 DSEDDNAM CHAR(8),             /* DDNAME AS IT APPEARS IN TIOT *
**    2 DSETCBAD PTR(31),             /* ADD. OF TCB FOR CP WHICH
**                                       SECURED DYNAMIC ALLOC.       *
**    2 DSETTRPW FIXED(31),           /* RELATIVE TTR OF PASSWD FOR
**                                       THIS FIELD IS ZERO.          *
**    2 DSENDISP CHAR(1),             /* NORMAL DISPOSITION IND. BY
**                                       BIT SETTINGS: EQU EQU EQU
**                                       EQU                          *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 DSEKEP   BIT(1),             /* KEEP                         *
**     3 DSEDEL   BIT(1),             /* DELETE                       *
**     3 DSECAT   BIT(1),             /* CATLG                        *
**     3 DSEUCAT  BIT(1),             /* UNCATLG                      *
**    2 DSEADISP CHAR(1),             /* ABNORMAL DISPOSITION IS IND.
**                                       BY SETTING BITS IN THIS
**                                       FIELD THE SAME AS IN
**                                       DSENDISP                     *
**     3 *        BIT(1),          /* RESERVED      */
**     3 *        BIT(1),          /* RESERVED      */
**     3 *        BIT(1),          /* RESERVED      */
**     3 *        BIT(1),          /* RESERVED      */
**     3 DSEAKEP  BIT(1),          /*  KEEP         */
**     3 DSEADEL  BIT(1),          /*  DELETE       */
**     3 DSEACAT  BIT(1),          /*  CATALOG      */
**     3 DSEAUCAT BIT(1),          /*  UNCATALOG    */
**    2 DSEDSORG CHAR(1),             /* ORGANIZATION IND. BY
**                                       FOLLOWING BITS:              *
**     3 DSEIS    BIT(1),             /* INDEXED SEQUENTIAL           *
**     3 DSEPS    BIT(1),             /* PHYSICAL SEQUENTIAL          *
**     3 DSEDA    BIT(1),             /* DIRECT ORGANIZATION EQU EQU
**                                       EQU                          *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 DSEPO    BIT(1),             /* PARTITIONED ORGANIZATION     *
**     3 DSEU     BIT(1),             /* UNMOVABLE                    *
**    2 DSEDSLNG  PTR(8),             /* LENGTH OF DATA SET NAME IN
**                                       BYTES (1-44)                 *
**    2 DSEDSNAM CHAR(44),            /* DATA SET NAME DSE DESCRIBES  *
**  1  DSEMEMBR CHAR(8) BASED(DSEMPTR); /* FIELD CAN ONLY BE PRESENT
**                                       WHEN DATA SET IS OF A
**                                       PARTITIONED ORGANIZATION. IT
**                                       IS THE MEMBER OF THE PDS
**                                       CURRENTLY ALLOCATEDAND IS
**                                       PRESENT WHEN BIT TWO OF
**                                       CONTROL BYTE IS SET          *
**
*         DCL  1 CVTMAP BASED(CVTPTR),  /*HAND MAPPING OF THE CVT     *
*                2 CVTTCBP PTR(31),
*                2 *       CHAR(112),
*                2 CVTDCBA PTR(24),
*                2 *       CHAR(62),
*                2 MAPBIT  CHAR(1),
*                  3 *     BIT(2),
*                  3 CVTDDR BIT(1),
*                  3 *     BIT(5),
*                2 *       CHAR(45),
*                2 CVTTSCVT PTR(31);
*         DCL   TCBPTR PTR(31) BASED(CVTTCBP+4);/*   CURRENT TCB      *
**
**/*                                                                  *
**/*            TASK CONTROL BLOCK                                    *
**/*                                                                  *
**/*  AOS/1 RELEASE 2, AOS/2 RELEASE 1, 03/09/72, LEVEL=12            *
**/*                                                                  *
**/*  METHOD OF ACCESS                                                *
**/*      BAL  - A DSECT IS PRODUCED UNLESS DSECT=NO IS SPECIFIED.    *
**/*             USING ON TCBFIX GIVES ADDRESSABILITY FOR ALL SYMBOLS *
**/*             IN PREFIX AND TCB PROPER.  TO GET ADDRESSABILITY FOR *
**/*             THE AOS/1 - AOS/2 COMMON EXTENSION, YOU SHOULD CODE  *
**/*                                                                  *
**/*             L     REG,TCBEXT2                                    *
**/*             USING TCBXTNT2,REG                                   *
**/*             WHERE REG IS ANY REGISTER OTHER THAN ZERO.           *
**/*                                                                  *
**/*             THIS MACRO ASSUMES A DEFAULT OF SYS=AOS2 WHICH MEANS *
**/*             A MAPPING OF AN AOS/2 TCB IS DESIRED.  IF A MAPPING  *
**/*             OF AN AOS/1 TCB IS DESIRED, PUT SYS=AOS1 AS A        *
**/*             PARAMETER ON THE MACRO CALL.  IF A MAPPING OF THE    *
**/*             TCB FOR BOTH AOS/1 AND AOS/2 IS DESIRED, PUT         *
**/*             SYS=BOTH AS A PARAMETER.                             *
**/*                                                                  *
**/*      PL/S - DCL TCBPTR PTR                                       *
**/*                                                                  *
**/*             THIS MACRO ASSUMES IT IS MAPPING AN AOS/2 TCB.  IF   *
**/*             AN AOS/1 TCB MAPPING IS DESIRED, SPECIFY             *
**/*             %TCBSYSTM='AOS1' OR IF A MAPPING OF THE TCB FOR BOTH *
**/*             AOS/1 AND AOS/2 IS DESIRED, SPECIFY %TCBSYSTM='BOTH' *
**/*             BEFORE THE INCLUDE FOR THIS MACRO.  DO NOT SET       *
**/*             TCBSYSTM TO 'AOS2' BECAUSE NULL MEANS AOS/2.         *
**/*                                                                  *
**/*             MACRO VARIABLE TCBLEN IS SET TO THE LENGTH OF THE    *
**/*             TCB INCLUDING THE PREFIX.  TCBLEN IS VALID IF        *
**/*             TCBSYSTM IS 'AOS1' OR '' (AOS/2), BUT IT IS NOT      *
**/*             VALID IF TCBSYSTM='BOTH'.                            *
**
** /*           TCB PREFIX                                            *
**
** DECLARE
**   1 TCBFIX   BASED(TCBPTR-32)  BDY(DWORD),
**
**    2 TCBFRS   CHAR(32) BDY(DWORD), /* FLOATING POINT REGISTER SAVE
**                                       AREA                         *
**     3 TCBFRS0 CHAR(8)  BDY(DWORD), /* SAVE AREA FOR FLOATING
**                                       POINT REGISTER 0             *
**     3 TCBFRS2 CHAR(8)  BDY(DWORD), /* SAVE AREA FOR FLOATING
**                                       POINT REGISTER 2             *
**     3 TCBFRS4 CHAR(8)  BDY(DWORD), /* SAVE AREA FOR FLOATING
**                                       POINT REGISTER 4             *
**     3 TCBFRS6 CHAR(8)  BDY(DWORD); /* SAVE AREA FOR FLOATING
**                                       POINT REGISTER 6             *
**
** /*           TCB PROPER                                            *
**
** DECLARE
**   1 TCB      BASED(TCBPTR)  BDY(DWORD),
**
**    2 TCBRBP   PTR(31),             /* PTR TO TOP RB ON RB CHAIN    *
**    2 TCBPIE   PTR(31),             /* ADDR OF PROGRAM INTERRUPT
**                                       ELEMENT (PIE)                *
**     3 TCBPMASK CHAR(1),            /* SPIE BITS                    *
**      4 *        BIT(4),            /* RESERVED                     *
**      4 TCBPM    BIT(4),            /* PROGRAM MASK AT TIME OF SPIE
**                                       INITIATION.  MASK RESTORED AT
**                                       TIME OF SPIE NULLIFICATION.  *
**     3 TCBPIEA  PTR(24),            /* ADDRESS OF PIE               *
**    2 TCBDEB   PTR(31),             /* ADDR OF THE DEB QUEUE        *
**    2 TCBTIO   PTR(31),             /* ADDR OF THE TASK I/O TABLE
**                                       (TIOT)                       *
**    2 TCBCMP   CHAR(4),             /* TASK COMPLETION CODE         *
**     3 TCBCMPF  CHAR(1),            /* COMPLETION FLAGS             *
**      4 TCBCREQ  BIT(1),            /* - A DUMP HAS BEEN REQUESTED  *
**      4 TCBCSTEP BIT(1),            /* - A STEP ABEND HAS BEEN
**                                       REQUESTED                    *
**      4 TCBCPP   BIT(1),            /* - SECOND ABEND LOAD OVERLAID
**                                       PP STORAGE (AOS/1) FOR FIRST
**                                       LOAD OVERLAY SEE TCBFLGS     *
**      4 TCBSTCC  BIT(1),            /* COMPLETION CODE IS NOT TO
**                                       BE STORED IN TCBCMPC SHOULD
**                                       AN ABEND BE ENCOUNTERED.
**                                       THIS PREVENTS AN OVERLAY OF
**                                       ORIGINAL COMPLETION CODE.    *
**      4 TCBCDBL  BIT(1),            /* - A DOUBLE ABEND HAS
**                                       OCCURRED                     *
**      4 TCBCWTO  BIT(1),            /* - DUMP MSG TO BE ISSUED TO
**                                       OPR                          *
**      4 TCBCIND  BIT(1),            /* - SCHEDULER TO PRINT
**                                       INDICATIVE DUMP              *
**      4 TCBCMSG  BIT(1),            /* - ABEND MSG PROVIDED TO BE
**                                       PRINTED BY ABDUMP            *
**     3 TCBCMPC  CHAR(3),            /* SYSTEM (FIRST 12 BITS) AND
**                                       USER (SECOND 12) COMPLETION
**                                       CODES                        *
**    2 TCBTRN   PTR(31),             /* ADDR OF CONTROL CORE TABLE   *
**     3 TCBABF   CHAR(1),            /* FLAG BYTE                    *
**      4 TCBMOD91 BIT(1),            /* - BOTH TESTRAN AND DECIMAL
**                                       SIMULATOR ON A MOD 91        *
**      4 TCBNOCHK BIT(1),            /* - SUPPRESS TAKING
**                                       CHECKPOINTS FOR THIS STEP
**                                       (JOB STEP TCB)               *
**      4 TCBGRPH  BIT(1),            /* - GRAPHICS FOREGROUND JOB OR
**                                       GRAPHIC JOB PROCESSOR        *
**      4 TCBRSV01 BIT(1),            /* RESERVED                     *
**      4 TCBTCPP  BIT(1),            /* - TCAM POST-PENDING  (RORI)  *
**      4 TCBTCP   BIT(1),            /* - TEST TASK - USED BY TEST
**                                       SVC                          *
**      4 TCBOLTEP BIT(1),            /* OLTEP FUNCTIONS REQUIRE
**                                       CLEAN-UP BEFORE ABNORMAL
**                                       TERMINATION CAN BE INVOKED   *
**      4 TCBRSV02 BIT(1),            /* RESERVED                     *
**     3 TCBTRNB  PTR(24),            /* ADDR OF CONTROL CORE TABLE   *
**    2 TCBMSS   PTR(31),             /* ADDR OF THE BOUNDARY BOX
**                                       (AOS/1) ADDR OF LAST SPQE
**                                       ON MSS QUEUE (AOS/2)         *
**     3 TCBRSV03 PTR(8),             /* ** TCBNROC  FIELD UNUSED
**                                       IN AOS **                    *
**     3 TCBMSSB  PTR(24),            /* ADDR OF THE BOUNDARY BOX
**                                       (AOS/1) ADDR OF LAST SPQE
**                                       ON MSS QUEUE (AOS/2)         *
**    2 TCBPKF   CHAR(1),             /* STORAGE PROTECTION KEY       *
**     3 TCBFLAG  BIT(4),             /* - PROTECTION KEY             *
**     3 TCBZERO  BIT(4),             /* - ZERO                       *
**    2 TCBFLGS  CHAR(5),             /* FLAGS                        *
**     3 TCBFLGS1 CHAR(1),            /* FIRST TCB FLAG BYTE          *
**      4 TCBFA    BIT(1),            /* - ABNORMAL TERMINATION IN
**                                       PROGRESS                     *
**      4 TCBFE    BIT(1),            /* - NORMAL TERMINATION IN
**                                       PROGRESS                     *
**      4 TCBFERA  BIT(1),            /* ENTER ABEND ERASE ROUTINE
**                                       WHEN IN CONTROL AGAIN (AOS/2)*
**      4 TCBRSV04 BIT(1),            /* RESERVED               ICB402*
**      4 TCBPDUMP BIT(1),            /* PREVENT DUMP INDICATOR
**                                       (AOS/2)                      *
**      4 TCBFT    BIT(1),            /* TOP TASK IN TREE BEING
**                                       ABTERMED  (AOS/2)            *
**      4 TCBFS    BIT(1),            /* - ABTERM DUMP COMPLETED
**                                       (AOS/2)  ABEND OVERLAID
**                                       PROBLEM PROGRAM STORAGE
**                                       (AOS/1)                      *
**      4 TCBFX    BIT(1),            /* - PROHIBIT ASYNCHRONOUS EXIT
**                                       QUEUEING                     *
**     3 TCBFLGS2 CHAR(1),            /* SECOND FLAG BYTE             *
**      4 TCBFOINP BIT(1),            /* A VALUE OF 1 INDICATES THAT
**                                       THE TASK IS ABENDING AND IS
**                                       IN THE PROCESS OF (1) OPEN
**                                       FOR DUMP DATA SET PROCESSING,
**                                       (2) CLOSE FOR USER DATA SET
**                                       OR (3) PURGE FOR ENQ'ED
**                                       RESOURCES.  THIS BIT IS USED
**                                       IN CONJUNCTION WITH TCBSTACK.
**                                       (AOS/2)                ICB374*
**      4 TCBFSTI  BIT(1),            /* - SECOND JOB STEP INTERVAL
**                                       HAS EXPIRED (AOS/2 INITIATOR
**                                       TCB)                         *
**      4 TCBRSV05 BIT(1),            /* RESERVED                     *
**      4 TCBFSMC  BIT(1),            /* - TASK HAS ISSUED SYSTEM
**                                       MUST COMPLETE AND SET ALL
**                                       OTHER TASKS IN THE SYSTEM
**                                       NONDISPATCHABLE              *
**      4 TCBFJMC  BIT(1),            /* - TASK HAS ISSUED STEP MUST
**                                       COMPLETE AND TURNED OFF ALL
**                                       OTHER TASKS IN THE STEP      *
**      4 TCBFDSOP BIT(1),            /* SYSABEND OPEN FOR JOBSTEP
**                                       (AOS/2)                      *
**      4 TCBFETXR BIT(1),            /* - ETXR TO BE SCHEDULED       *
**      4 TCBFTS   BIT(1),            /* - MEMBER OF TIME-SLICING
**                                       GROUP                        *
**     3 TCBFLGS3 CHAR(1),            /* THIRD FLAG BYTE              *
**      4 TCBFSM   BIT(1),            /* - ALL PSW'S IN SUPERVISOR
**                                       STATE (AOS/2)                *
**      4 TCBADINP BIT(1),            /* USED IN CONJUNCTION WITH
**                                       TCBONDSP.  FLAG INDICATING
**                                       THAT ABDUMP IS CURRENTLY
**                                       PROCESSING FOR SOME TASK IN
**                                       JOB STEP.  A HIGHER LEVEL
**                                       TASK IS NOT ALLOWED TO ENTER
**                                       MAINLINE ABEND PROCESSING IF
**                                       THIS BIT IS SET IN JOB STEP
**                                       TCB UNLESS JOB STEP TASK IS
**                                       FAILING.  BIT SET ONLY IN JOB
**                                       STEP TCB AND TASK INVOKING
**                                       ABDUMP.  (AOS/2)             *
**      4 TCBABTRM BIT(1),            /* - ABTERM BIT TO PREVENT
**                                       MULTIPLE ABENDS  (AOS/2)     *
**      4 TCBABGM  BIT(1),            /* GETMAIN IS TO DEFAULT LSQA
**                                       REQUESTS TO SQA REQUESTS WHEN
**                                       REQUEST CANNOT BE SATISFIED
**                                       FROM LSQA  (AOS/2)           *
**      4 TCBRSV06 BIT(1),            /* RESERVED  (AOS/2)            *
**      4 TCBRSV07 BIT(1),            /* RESERVED  (AOS/2)            *
**      4 TCBRSV08 BIT(1),            /* RESERVED  (AOS/2)            *
**      4 TCBDWSTA BIT(1),            /* TASK WAS DETATCHED WITH
**                                       STAE=YES OPTION (AOS/2)ICB315*
**     3 TCBFLGS4 CHAR(1),            /* NONDISPATCHABILITY FLAGS
**                                       (AOS/2)                      *
**      4 TCBNDUMP BIT(1),            /* - ABDUMP NON-DISP. INDICATOR *
**      4 TCBSER   BIT(1),            /* - SER1 NON-DISP. INDICATOR   *
**      4 TCBRQENA BIT(1),            /* - I/O RQE'S EXHAUSTED        *
**      4 TCBHNDSP BIT(1),            /* TASK OR JOB STEP IS
**                                       MOMENTARILY 'FROZEN' UNTIL
**                                       THE REQUIRED RESOURCES ARE
**                                       AVAILABLE.  THE BIT IS SET
**                                       THROUGH THE USE OF THE
**                                       'STATUS' SVC.          ICB453*
**      4 TCBUXNDV BIT(1),            /* - TASK IS TEMPORARILY
**                                       NON-DISPATCHABLE BECAUSE SMF
**                                       TIME LIMIT OR SYSOUT LIMIT
**                                       USER EXIT ROUTINE IS BEING
**                                       EXECUTED FOR THIS STEP       *
**      4 TCBMPCVQ BIT(1),            /* - VARY OR QUIESCE IN
**                                       MULTIPROCESSING SYSTEM       *
**      4 TCBMPCND BIT(1),            /* - M65 MULTIPROCESSING
**                                       NON-DISP. INDICATOR FOR ALL
**                                       CPU'S                        *
**      4 TCBONDSP BIT(1),            /* TASK TERMINATING AND
**                                       NONDISPATCHABLE BECAUSE
**                                       EITHER OPEN FOR DUMP DATA
**                                       SET IS IN PROCESS OR CLOSE
**                                       BY ABEND IS IN PROCESS       *
**     3 TCBFLGS5 CHAR(1),            /* MORE NONDISPATCHABILITY
**                                       FLAGS                        *
**      4 TCBFC    BIT(1),            /* - TASK TERMINATED (AOS/2)    *
**      4 TCBABWF  BIT(1),            /* - ABNORMAL WAIT  (AOS/2)     *
**       5 TCBUXNDF BIT(1),           /* TASK IS TEMPORARILY
**                                       NONDISPATCHABLE BECAUSE SMF
**                                       TIME LIMIT OR SYSOUT LIMIT
**                                       USER EXIT ROUTINE IS BEING
**                                       EXECUTED FOR THIS STEP.  THIS
**                                       BIT IS ONE IN ALL TCB'S FOR
**                                       STEP EXCEPT JOB STEP TCB.
**                                       (AOS/1)                ICB263*
**      4 TCBPAGE  BIT(1),            /* TASK NONDISPATCHABLE DUE TO
**                                       EXCESSIVE PAGING RATE        *
**      4 TCBANDSP BIT(1),            /* TASK NONDISPATCHABLE
**                                       TEMPORARILY BECAUSE ATTACHED
**                                       WITH DISP=NO OPERAND         *
**      4 TCBSYS   BIT(1),            /* - ANOTHER TASK IS IN SYSTEM
**                                       MUST COMPLETE STATUS OR A
**                                       SUMMARY BIT FOR FIELD
**                                       TCBSYSCT  (AOS/2)            *
**      4 TCBSTP   BIT(1),            /* - ANOTHER TASK IN JS IS IN
**                                       STEP MUST COMPLETE STATUS
**                                       (AOS/2)                      *
**      4 TCBFCD1  BIT(1),            /* - INITIATOR WAITING FOR
**                                       REGION   (AOS/2)             *
**      4 TCBPNDSP BIT(1),            /* - PRIMARY NONDISPATCHABILITY
**                                       FLAG                         *
**    2 TCBLMP   PTR(8),              /* TASK LIMIT PRIORITY (AOS/2)
**                                       ENQUEUE COUNT (AOS/1)        *
**    2 TCBDSP   PTR(8),              /* DISPATCHING PRIORITY         *
**    2 TCBLLS   PTR(31),             /* ADDR OF LAST LLE IN LOAD
**                                       LIST (AOS/2) ADDR OF LAST RB
**                                       FOR PROGRAM LOADED VIA LOAD
**                                       (AOS/1)                      *
**    2 TCBJLB   PTR(31),             /* ADDR OF JOBLIB DCB           *
**    2 TCBJPQ   PTR(31),             /* ADDR OF LAST CDE FOR JPA
**                                       CONTROL QUEUE  (AOS/2)       *
**      4 TCBPURGE CHAR(1),           /* PURGE FLAGS (AOS/2)          *
**       5 TCBJPQF  BIT(1),           /* - JPQ PURGE FLAG             *
**       5 TCBRSV09 BIT(1),           /* RESERVED                     *
**       5 TCBRSV10 BIT(1),           /* RESERVED                     *
**       5 TCBRSV11 BIT(1),           /* RESERVED                     *
**       5 TCBRSV12 BIT(1),           /* RESERVED                     *
**       5 TCBRSV13 BIT(1),           /* RESERVED                     *
**       5 TCBRSV14 BIT(1),           /* RESERVED                     *
**       5 TCBRSV15 BIT(1),           /* RESERVED                     *
**      4 TCBJPQB  PTR(24),           /* ADDRESS OF LAST CDE FOR JPA
**                                       CONTROL QUEUE  (AOS/2)       *
**    2 TCBGRS   CHAR(64)  BDY(WORD), /* GENERAL REGISTER SAVE AREA   *
**     3 TCBGRS0  PTR(31),            /* SAVE AREA FOR REGISTER 0     *
**     3 TCBGRS1  PTR(31),            /* SAVE AREA FOR REGISTER 1     *
**     3 TCBGRS2  PTR(31),            /* SAVE AREA FOR REGISTER 2     *
**     3 TCBGRS3  PTR(31),            /* SAVE AREA FOR REGISTER 3     *
**     3 TCBGRS4  PTR(31),            /* SAVE AREA FOR REGISTER 4     *
**     3 TCBGRS5  PTR(31),            /* SAVE AREA FOR REGISTER 5     *
**     3 TCBGRS6  PTR(31),            /* SAVE AREA FOR REGISTER 6     *
**     3 TCBGRS7  PTR(31),            /* SAVE AREA FOR REGISTER 7     *
**     3 TCBGRS8  PTR(31),            /* SAVE AREA FOR REGISTER 8     *
**     3 TCBGRS9  PTR(31),            /* SAVE AREA FOR REGISTER 9     *
**     3 TCBGRS10 PTR(31),            /* SAVE AREA FOR REGISTER 10    *
**     3 TCBGRS11 PTR(31),            /* SAVE AREA FOR REGISTER 11    *
**     3 TCBGRS12 PTR(31),            /* SAVE AREA FOR REGISTER 12    *
**     3 TCBGRS13 PTR(31),            /* SAVE AREA FOR REGISTER 13    *
**     3 TCBGRS14 PTR(31),            /* SAVE AREA FOR REGISTER 14    *
**     3 TCBGRS15 PTR(31),            /* SAVE AREA FOR REGISTER 15    *
**    2 TCBFSA   PTR(31),             /* ADDR OF FIRST PROBLEM
**                                       PROGRAM SAVE AREA            *
**     3 TCBQEL   PTR(8),             /* ENQUEUE COUNT  (AOS/2)       *
**     3 TCBFSAB  PTR(24),            /* ADDR OF FIRST PROBLEM
**                                       PROGRAM SAVE AREA            *
**    2 TCBTCB   PTR(31),             /* ADDR OF NEXT LOWER PRIRTITY
**                                       TCB ON READY QUEUE           *
**    2 TCBTME   PTR(31),             /* ADDRESS OF TIMER QUEUE
**                                       ELEMENT                      *
**    2 TCBJSTCB PTR(31),             /* ADDRESS OF FIRST JOBSTEP TCB
**                                       OR OF THIS TCB IF KEY ZERO
**                                       (AOS/2)                      *
**     3 TCBRSV16 PTR(8),             /* RESERVED                     *
**     3 TCBJSTCA PTR(24),            /* ADDRESS OF FIRST JOBSTEP TCB
**                                       OR OF THIS TCB IF KEY ZERO
**                                       (AOS/2)                      *
**    2 TCBNTC   PTR(31),             /* ADDR OF NEXT SISTER TCB
**                                       (ZERO IF THIS IS LAST
**                                       SUBTASK)                     *
**    2 TCBOTC   PTR(31),             /* ADDR OF MOTHER TCB           *
**    2 TCBLTC   PTR(31),             /* ADDR OF LAST DAUGHTER TCB
**                                       (ZERO IF THIS IS IT)         *
**    2 TCBIQE   PTR(31),             /* ADDR OF IQE FOR EXTR
**                                       SCHEDULING                   *
**    2 TCBECB   PTR(31),             /* ADDR OF ECB TO BE POSTED
**                                       UPON TERMINATION             *
**    2 TCBTSFLG BIT(8),              /* TIME SHARING FLAGS           *
**     3 TCBTSTSK BIT(1),             /* - SWAPPED TS TASK            *
**     3 TCBSTPPR BIT(1),             /* - TASK SHOULD BE MADE NDSP
**                                       VIA TCBSTPP WHEN IT IS NO
**                                       LONGER RUNNING A PRIVILEGED
**                                       PGM                          *
**     3 TCBATT   BIT(1),             /* - TASK SHOULD NOT HAVE
**                                       ATTENTION EXITS SCHEDULED ON
**                                       IT BY EXIT EFFECTOR          *
**     3 TCBTIOTG BIT(1),             /* - PURGE TGET/TPUT AFTER
**                                       ATTENTION                    *
**     3 TCBRSV17 BIT(1),             /* RESERVED                     *
**     3 TCBRSV18 BIT(1),             /* RESERVED                     *
**     3 TCBDYDSP BIT(1),             /* M195 TASK IS MEMBER OF
**                                       DYNAMIC DISPATCHING
**                                       GROUP                  ICB262*
**     3 TCBCPUBN BIT(1),             /* FOR M195, ZERO MEANS I/O
**                                       BOUND AND ONE MEANS CPU
**                                       BOUND                  ICB262*
**    2 TCBSTPCT PTR(8),              /* NUMBER OF SETTASK STARTS
**                                       WHICH MUST BE ISSUED BEFORE
**                                       TASK IS MADE DISPATCHABLE -
**                                       FIELD NOT RESTRICTED TO TSO  *
**    2 TCBTSLP  PTR(8),              /* LIMIT PRIORITY OF TS TASK    *
**    2 TCBTSDP  CHAR(1),             /* DISPATCHING PRIORITY OF TS
**                                       TASK                         *
**    2 TCBPQE   PTR(31),             /* POINTER TO DPQE MINUS 8 FOR
**                                       THE JOB STEP (AOS/2)         *
**    2 TCBAQE   PTR(31),             /* LIST ORIGIN OF AQE(S) FOR
**                                       THIS TASK (AOS/2)            *
**    2 TCBSTAB  PTR(31),             /* ADDR OF STAE CONTROL BLOCK   *
**     3 TCBNSTAE CHAR(1),            /* STAE FLAGS                   *
**      4 TCBSTABE BIT(1),            /* - ABEND ENTERED BECAUSE OF
**                                       ERROR IN STAE PROC           *
**      4 TCBQUIES BIT(1),            /* - STAE INVOKED PURGE I/O
**                                       ROUTINE WITH QUIESCE I/O
**                                       OPTION                       *
**      4 TCB33E   BIT(1),            /* - A 33E ABEND HAS OCCURRED
**                                       FOR TASK  (AOS/2)            *
**      4 TCBRSV19 BIT(1),            /* RESERVED  (AOS/2)      ICB443*
**      4 TCBHALT  BIT(1),            /* - PURGE I/O ROUTINE DID NOT
**                                       SUCCESSFULLY QUIESCE I/O BUT
**                                       I/O WAS HALTED               *
**      4 TCBSYNCH BIT(1),            /* - SYNCH ISSUED BY ASIR TO
**                                       SCHEDULE EXIT ROUTINE (AOS/2)*
**      4 TCBNPURG BIT(1),            /* - VALID RETRY WITHOUT AN
**                                       RB PURGE  (AOS/2)            *
**      4 TCBSTCUR BIT(1),            /* STAE RECURSION VALID (AOS/2)
**                                                              ICB443*
**     3 TCBSTABB PTR(24),            /* ADDR OF STAE CONTROL BLOCK   *
**    2 TCBTCT   PTR(31),             /* ADDR OF TCT                  *
**     3 TCBTCTGF BIT(8),             /* FLAG BYTE FOR TIMING CONTROL
**                                       TABLE                  ICB318*
**      4 TCBSMFGF BIT(1),            /* IF ZERO, THE TCT CORE TABLE
**                                       IS NOT BE TO UPDATED BY
**                                       GETMAIN/FREEMAIN.  IF ONE,
**                                       THE TCT CORE TABLE IS TO BE
**                                       UPDATED BY GETMAIN/FREEMAIN.
**                                                              ICB318*
**      4 TCBRSV20 BIT(1),            /* RESERVED                     *
**      4 TCBRSV97 BIT(1),            /* RESERVED                     *
**      4 TCBRSV98 BIT(1),            /* RESERVED                     *
**      4 TCBRSV99 BIT(1),            /* RESERVED                     *
**      4 TCBRSV9A BIT(1),            /* RESERVED                     *
**      4 TCBRSV9B BIT(1),            /* RESERVED                     *
**      4 TCBRSV9C BIT(1),            /* RESERVED                     *
**     3 TCBTCTB  PTR(24),            /* ADDR OF TCT                  *
**    2 TCBUSER  PTR(31),             /* FIELD AVAILABLE TO THE USER  *
**    2 TCBSCNDY CHAR(4),             /* SECONDARY NONDISPATCHABILITY
**                                       FLAGS - (IF ANY BIT IN THESE
**                                       BYTES IS ON, THEN SO IS THE
**                                       PRIMARY NDSP FLAG)           *
**     3 TCBNDSP  CHAR(4),            /* SAME AS TCBSCNDY             *
**      4 TCBNDSP0 CHAR(1),           /* BYTE 0                       *
**      4 TCBNDSP1 CHAR(1),           /* BYTE 1                       *
**       5 TCBDARTN BIT(1),           /* - TASK TEMPORARILY
**                                       NONDISPATCHABLE - (DAR)      *
**       5 TCBDARPN BIT(1),           /* - TASK PERMANENTLY
**                                       NONDISPATCHABLE - (DAR)      *
**       5 TCBRSTND BIT(1),           /* - TASK TEMPORARILY
**                                       NONDISPATCHABLE - (RMS/SER)  *
**       5 TCBRSPND BIT(1),           /* - TASK PERMANENTLY
**                                       NONDISPATCHABLE - (RMS/SER)
**                                       (IF THIS FLAG IS ON THEN THE
**                                       PREVIOUS ONE MUST BE TOO)    *
**       5 TCBDDRND BIT(1),           /* TASK IS IN DEVICE ALLOCATION
**                                       AND DYNAMIC DEVICE
**                                       RECONFIGURATION (DDR) HAS
**                                       MADE IT NONDISPATCHABLE      *
**       5 TCBTPSP  BIT(1),           /* DISPATCHING OF TCAM TASK
**                                       MUST BE DELAYED UNTIL TCAM
**                                       I/O APPENDAGE OR SVC ROUTINE
**                                       HAS COMPLETED EXECUTION
**                                       (TCAM IN MULTIPROCESSING
**                                       ENVIRONMENT)                 *
**       5 TCBRSV21 BIT(1),           /* RESERVED                     *
**       5 TCBRSV22 BIT(1),           /* RESERVED                     *
**      4 TCBNDSP2 CHAR(1),           /* BYTE 2                       *
**       5 TCBABD   BIT(1),           /* - SET BY ABDUMP - (AOS/1)    *
**       5 TCBSTPP  BIT(1),           /* - TASK NDSP BECAUSE STOPPED
**                                       BY SETTASK                   *
**       5 TCBNDSVC BIT(1),           /* - TASK NDSP BECAUSE SVC
**                                       DUMP IS EXECUTING FOR
**                                       ANOTHER TASK                 *
**       5 TCBNDTS  BIT(1),           /* - TASK NDSP BECAUSE BEING
**                                       SWAPPED OUT                  *
**       5 TCBIWAIT BIT(1),           /* - TASK NDSP DUE TO INPUT
**                                       WAIT                         *
**       5 TCBOWAIT BIT(1),           /* - TASK NDSP DUE TO OUTPUT
**                                       WAIT                         *
**       5 TCBDSS   BIT(1),           /* DSS HAS SET THE TASK
**                                       NON-DISPATCHABLE       ICB313*
**       5 TCBABE   BIT(1),           /* - ABEND ENTERED FOR THIS
**                                       TASK - WHILE SYSABEND DCB
**                                       OPEN FOR ANOTHER TASK (AOS/1)*
**      4 TCBNDSP3 CHAR(1),           /* BYTE 3                       *
**       5 TCBLJSND BIT(1),           /* TASK IS ABENDING AND
**                                       NONDISPATCHABLE BECAUSE IT
**                                       HAS A JOB STEP SUBTASK.
**                                       TCBONDSP MUST ALSO BE ON.
**                                       (AOS/2)                      *
**       5 TCBSTAND BIT(1),           /* TASK HAS BEEN SET
**                                       NONDISPATCHABLE WHILE ASIR
**                                       IS SCHEDULING AN EXIT ROUTINE
**                                       FOR SOME OTHER TASK IN JOB
**                                       STEP  (AOS/2)                *
**       5 TCBRSV23 BIT(1),           /* RESERVED (AOS/2)             *
**       5 TCBRSV24 BIT(1),           /* RESERVED                     *
**       5 TCBRSV25 BIT(1),           /* RESERVED                     *
**       5 TCBRSV26 BIT(1),           /* RESERVED                     *
**       5 TCBRSV27 BIT(1),           /* RESERVED                     *
**       5 TCBRSV28 BIT(1),           /* RESERVED                     *
**    2 TCBMDIDS FIXED(31),           /* RESERVED FOR MODEL-DEPENDENT
**                                       SUPPORT AND FOR IBM
**                                       PROPRIETARY PROGRAMMING
**                                       SUPPORT                ICBXXX*
**    2 TCBJSCB  PTR(31),             /* ADDR OF JOB STEP CONTROL
**                                       BLOCK                        *
**     3 TCBRECDE CHAR(1),            /* ABEND RECURSION BYTE   ICB456*
**      4 TCBREC   BIT(1),            /* VALID REENTRY TO ABEND
**                                       INDICATED IF NON-ZERO VALUE
**                                       IN FOLLOWING 7 BITS    ICB456*
**      4 *        BIT(7),            /* ABEND BITS             ICB456*
**     3 TCBJSCBB PTR(24),            /* ADDR OF JOB STEP CONTROL
**                                       BLOCK                        *
**    2 TCBDDEXC FIXED(15),           /* COUNT OF THE NUMBER OF TIMES
**                                       A DYNAMIC DISPATCHING TASK
**                                       HAS ITS TIME SLICE EXPIRE
**                                       (AOS/1)                ICB465*
**    2 TCBDDWTC FIXED(15),           /* COUNT OF THE NUMBER OF TIMES
**                                       A DYNAMIC DISPATCHING TASK IS
**                                       NOT INTERRUPTED BY TIME SLICE
**                                       BETWEEN WAITS  (AOS/1) ICB465*
**    2 TCBRSV29 PTR(31),             /* RESERVED                     *
**    2 TCBRSV30 PTR(31),             /* RESERVED                     *
**    2 TCBEXT1  PTR(31),             /* SAME AS TCBEXT1A       ICB311*
**     3 TCBRSV32 PTR(8),             /* RESERVED               ICB311*
**     3 TCBEXT1A PTR(24),            /* ADDRESS OF OS-AOS COMMON
**                                       EXTENSION              ICB311*
**
** /*           AOS/1 - AOS/2 COMMON SECTION                          *
**
**    2 TCBBITS  CHAR(4),             /* FLAG BYTES                   *
**     3 TCBNDSP4 BIT(8),             /* SECONDARY NONDISPATCHABILITY
**                                       FLAGS COMMON TO AOS/1 AND
**                                       AOS/2.  COORDINATED WITH
**                                       PRIMARY NONDISPATCHABILITY
**                                       FLAG TCBPNDSP.               *
**      4 TCBRSV86 BIT(1),            /* RESERVED                     *
**      4 TCBRSV87 BIT(1),            /* RESERVED                     *
**      4 TCBRSV88 BIT(1),            /* RESERVED                     *
**      4 TCBRSV89 BIT(1),            /* RESERVED                     *
**      4 TCBRSV90 BIT(1),            /* RESERVED                     *
**      4 TCBRSV91 BIT(1),            /* RESERVED                     *
**      4 TCBRSV92 BIT(1),            /* RESERVED                     *
**      4 TCBRSV93 BIT(1),            /* RESERVED                     *
**     3 TCBNDSP5 BIT(8),             /* SECONDARY NONDISPATCHABILITY
**                                       FLAGS UNIQUE TO AOS/1 OR
**                                       AOS/2.  COORDINATED WITH
**                                       PRIMARY NONDISPATCHABILITY
**                                       FLAG TCBPNDSP.               *
**      4 TCBRSV94 BIT(1),            /* RESERVED  (AOS/2)            *
**      4 TCBRSV95 BIT(1),            /* RESERVED  (AOS/2)            *
**      4 TCBRSV74 BIT(1),            /* RESERVED                     *
**      4 TCBRSV75 BIT(1),            /* RESERVED                     *
**      4 TCBRSV76 BIT(1),            /* RESERVED                     *
**      4 TCBRSV77 BIT(1),            /* RESERVED                     *
**      4 TCBRSV78 BIT(1),            /* RESERVED                     *
**      4 TCBRSV79 BIT(1),            /* RESERVED                     *
**     3 TCBFLGS6 CHAR(1),            /* TASK-RELATED FLAGS           *
**      4 TCBRV    BIT(1),            /* PARTITION IS FIXED.  VIRTUAL
**                                       ADDRESSES IN PARTITION ARE
**                                       REAL.                        *
**      4 TCBPIE17 BIT(1),            /* PAGE FAULT INTERRUPT IS TO
**                                       BE PASSED TO THE TASK'S
**                                       INTERRUPT EXIT AND AN 8-BYTE
**                                       PICA IS IN EFFECT FOR THIS
**                                       TASK (AOS/2)           ICB339*
**      4 TCBCPU   BIT(1),            /* TASK IS CPU-BOUND MEMBER OF
**                                       APG  (AOS/2)                 *
**      4 TCBSPVLK BIT(1),            /* TASK SCHEDULED FOR ABTERM
**                                       WHILE OWNING SUPERVISOR LOCK
**                                       (AOS/2)                      *
**      4 TCBOLSQA BIT(1),            /* TASK OWNS SPQE FOR LSQA
**                                       (AOS/2)                      *
**      4 TCBMIGR  BIT(1),            /* REGION SELECTED FOR MIGRATION
**                                       FROM PRIMARY PAGING DEVICE
**                                       (AOS/2)                      *
**      4 TCBAPG   BIT(1),            /* TASK IS IN APG  (AOS/2)      *
**      4 TCBNTJS  BIT(1),            /* JOB STEP TASK BUT NOT HIGHEST
**                                       IN FAILING TREE  (AOS/2)     *
**     3 TCBFLGS7 CHAR(1),            /* TASK-RELATED FLAGS           *
**      4 TCBGPECB BIT(1),            /* TASK IS IN AN ECB WAIT FOR A
**                                       GETPART (AOS/2)        ICB339*
**      4 TCBRSV33 BIT(1),            /* RESERVED  (AOS/2)            *
**      4 TCBRSV34 BIT(1),            /* RESERVED  (AOS/2)            *
**      4 TCBSTACK BIT(1),            /* SET IN JOB STEP TCB TO
**                                       INDICATE THAT A TASK IN THE
**                                       JOB STEP IS IN SERIAL ABEND
**                                       PROCESSING.  USED IN
**                                       CONJUNCTION WITH TCBFOINP.
**                                       (AOS/2)                ICB374*
**      4 TCBRSV35 BIT(1),            /* RESERVED  (AOS/2)            *
**      4 TCBRSTSK BIT(1),            /* RESIDENT SYSTEM TASK (AOS/2) *
**      4 TCBADMP  BIT(1),            /* ALL OTHER TASKS IN JOB STEP
**                                       HAVE BEEN SET NONDISPATCHABLE
**                                       BY ABDUMP.  THIS BIT IS SET
**                                       TO CONTROL JOB STEP DURING
**                                       THE DUMPING PROCESS. (AOS/2) *
**      4 TCBGTOFM BIT(1),            /* GTF TRACING TEMPORARILY
**                                       DISABLED               ICB402*
**    2 TCBDAR   CHAR(1),             /* DAMAGE ASSESSMENT ROUTINE
**                                       FLAGS                        *
**     3 TCBDARP  BIT(1),             /* - PRIMARY DAR RECURSION - -
**                                       DAR FAILURE WHILE WRITING
**                                       CORE IMAGE                   *
**     3 TCBDARS  BIT(1),             /* - SECONDARY DAR RECURSION -
**                                       -  DAR FAILURE WHILE
**                                       ATTEMPTING TO REINSTATE
**                                       FAILING REGION/PARTITION     *
**     3 TCBDARD  BIT(1),             /* - A DUMP HAS BEEN REQUESTED
**                                       FOR A WRITER OR SCHEDULER
**                                       ABEND AND THE USER HAS NOT
**                                       PROVIDED A SYSABEND DD CARD
**                                       (AOS/1)                      *
**     3 TCBDARC  BIT(1),             /* - RECURSION PERMITTED IN
**                                       CLOSE - AFTER DAR PROCESSING
**                                       COMPLETED  (PCP)             *
**      4 TCBDARMC BIT(1),            /* DAR HAS BEEN ENTERED TO
**                                       HANDLE A VALID RECURSION
**                                       IN MUST COMPLETE STATUS
**                                       THROUGH ABEND          ICB264*
**     3 TCBDARO  BIT(1),             /* - SYSTEM ERROR TASK IS
**                                       FAILING.  DAR DUMP SHOULD NOT
**                                       REQUEST ANY ERP PROCESSING   *
**     3 TCBDARWT BIT(1),             /* WTO IN PROCESS FOR DAR ICB264*
**     3 TCBRSV36 BIT(1),             /* RESERVED                     *
**     3 TCBEXSVC BIT(1),             /* SVC DUMP IS EXECUTING FOR
**                                       THIS TASK                    *
**    2 TCBRSV37 PTR(8),              /* RESERVED                     *
**    2 TCBRSV38 FIXED(15),           /* RESERVED                     *
**    2 TCBEXT2  PTR(31),             /* SAME AS TCBEXT2A       ICB311*
**     3 TCBRSV39 PTR(8),             /* RESERVED               ICB311*
**     3 TCBEXT2A PTR(24),            /* ADDRESS OF AOS/1 - AOS/2
**                                       COMMON EXTENSION       ICB311*
**
** /*           AOS/2 TCB EXTENSION                                   *
**
**    2 TCBXTENT CHAR(4),             /* REGION SEGMENT INFORMATION   *
**     3 TCBRSV40 PTR(8),             /* RESERVED                     *
**     3 TCBSTI   PTR(8),             /* SEGMENT INDEX TO FIRST
**                                       SEGMENT IN REGION.  ZERO IF
**                                       VIRTUAL ADDRESSES IN REGION
**                                       ARE REAL.                    *
**     3 TCBSCT   PTR(8),             /* COUNT FIELD INDICATING THE
**                                       NUMBER OF SEGMENTS FOR THIS
**                                       TASK'S REGION.  ZERO IF
**                                       VIRTUAL ADDRESSES IN REGION
**                                       ARE REAL.                    *
**     3 TCBLSQA  PTR(8),             /* SEGMENT INDEX TO FIRST LSQA
**                                       SEGMENT FOR THE TASK'S
**                                       REGION                 ICB339*
**    2 TCBTIRB  PTR(31),             /* ADDRESS OF TIRB FOR TASK     *
**    2 TCBBACK  PTR(31),             /* ADDRESS OF PREVIOUS TCB ON
**                                       READY QUEUE.  ZERO IN TOP
**                                       TCB.                         *
**    2 TCBLSQAP PTR(31),             /* ADDRESS OF SPQE FOR LSQA     *
**    2 TCBIOTIM FIXED(31),           /* TIME IN 16-MICROSECOND UNITS
**                                       BETWEEN TIME ORIGINAL TIME
**                                       SLICE INTERVAL WAS ASSIGNED
**                                       AND TIME APG TASK WENT INTO
**                                       VOLUNTARY WAIT               *
**    2 TCBTMSAV FIXED(31),           /* TIME IN 16-MICROSECOND UNITS
**                                       REMAINING FROM ORIGINAL TIME
**                                       SLICE INTERVAL WHEN APG TASK
**                                       WAS LAST DISPATCHED          *
**    2 TCBABCUR CHAR(1),             /* ABEND RECURSION BYTE         *
**    2 TCBSYSCT PTR(8),              /* COUNT FOR THE OUTSTANDING
**                                       NUMBER OF 'SYSTEM MUST
**                                       COMPLETE' REQUESTS           *
**    2 TCBTID   CHAR(1),             /* TASK ID NUMBER         ICB374*
**    2 TCBRSV41 PTR(8),              /* RESERVED               ICB374*
**    2 TCBQECB  PTR(31),             /* SAME AS TCBQECBA BELOW ICB339*
**     3 TCBNQCT  PTR(8),             /* COUNT OF ALL RESOURCES
**                                       UNAVAILABLE DUE TO ENQ OR
**                                       RESERVE REQUESTED WITH
**                                       ECB                    ICB339*
**     3 TCBQECBA PTR(24),            /* ADDRESS OF ECB TO BE POSTED
**                                       WHEN TCBNQCT=0         ICB339*
**    2 TCBFOE   PTR(31),             /* SAME AS TCBFOEA BELOW  ICB339*
**     3 TCBRSV42 PTR(8),             /* RESERVED               ICB339*
**     3 TCBFOEA  PTR(24),            /* ADDRESS OF FIRST FIX
**                                       OWNERSHIP ELEMENT (FOE) IN
**                                       LIST FOR THIS TASK     ICB339*
**    2 TCBSWA   PTR(31),             /* ADDRESS OF FIRST SCHEDULER
**                                       WORK AREA (SWA) HEADER IN A
**                                       CHAIN OF SWA BLOCKS FOR THIS
**                                       TASK                   ICB374*
**    2 TCBRSV96 PTR(31),             /* RESERVED                     *
**    2 *        CHAR(0) BDY(DWORD);
**
** /*           AOS/1 - AOS/2 COMMON EXTENSION                        *
**
** DECLARE
**   1 TCBXTNT2 BASED(TCBEXT2)  BDY(DWORD),
**    2 TCBGTF   PTR(31),             /* SAME AS TCBGTFA BELOW  ICB312*
**     3 TCBTFLG  BIT(8),             /* GTF FLAG BYTE          ICB312*
**      4 TCBASYNC BIT(1),            /* GTF ASYNCHRONOUS GATHER
**                                       ROUTINE IN CONTROL     ICB312*
**      4 TCBERRTN BIT(1),            /* GTF ASYNCHRONOUS GATHER ERROR
**                                       ROUTINE IN CONTROL     ICB312*
**      4 TCBDSPIT BIT(1),            /* MCIH SHOULD UNCONDITIONALLY
**                                       BRANCH TO DISPATCHER   ICB312*
**      4 TCBRSV43 BIT(1),            /* RESERVED                     *
**      4 TCBRSV44 BIT(1),            /* RESERVED                     *
**      4 TCBRSV45 BIT(1),            /* RESERVED                     *
**      4 TCBRSV46 BIT(1),            /* RESERVED                     *
**      4 TCBRSV47 BIT(1),            /* RESERVED                     *
**     3 TCBGTFA  PTR(24),            /* ADDRESS OF TEMPORARY TRACE
**                                       BUFFER                 ICB312*
**    2 TCBSTMCT PTR(8),              /* COUNT FOR OUTSTANDING NUMBER
**                                       OF 'STEP MUST COMPLETE'
**                                       REQUESTS               ICB443*
**    2 TCBRCMP  BIT(24),             /* COMMON INTERFACE BETWEEN
**                                       AOS/1 AND AOS/2 TO KEEP
**                                       ABTERM COMPLETION CODE DUE TO
**                                       A VALID RECURSION IN STAE
**                                                              ICB411*
**    2 TCBRSV48 PTR(31),             /* RESERVED                     *
**    2 TCBRSV49 PTR(31),             /* RESERVED                     *
**    2 *        CHAR(0) BDY(DWORD);
**
**
** /*                   END OF TCB                                    *
**
**
**/* **************************************************************** *
**/*                                                                  *
**/*            ***** JOB/STEP CONTROL BLOCK *****                    *
**/*                                                                  *
**/*  AOS/1 RELEASE 2, AOS/2 RELEASE 1, 03/02/72, LEVEL=6             *
**/*                                                                  *
**/*  METHOD OF ACCESS                                                *
**/*      PL/S - %INCLUDE SYSLIB(IKJTCB) TO DEFINE TCBJSCB            *
**/*      BAL  - L     REG,TCBJSCB                                    *
**/*             USING IEZJSCB,REG                                    *
**/*                                                                  *
**/*             WHERE REG IS ANY REGISTER OTHER THAN ZERO GIVES      *
**/*             ADDRESSABILITY FOR ALL SYMBOLS.                      *
**/*                                                                  *
**/*  NOTE                                                            *
**/*      IN ADDITION TO THE MANDATORY USE OF THIS MACRO FOR          *
**/*      REFERENCES TO THE JSCB, MODULES IN AOS/1 AND AOS/2 WHICH    *
**/*      ALLOCATE AND/OR FREE THE JSCB ARE REQUIRED TO USE THE       *
**/*      GETJSCB AND FREEJSCB MACROS.                                *
**/*                                                                  *
**/*  FUNCTION                                                        *
**/*      COMMUNICATION OF JOB OR STEP RELATED DATA ITEMS             *
**/*                                                                  *
**/* **************************************************************** *
**
**DECLARE
**  1 IEZJSCB  BASED(TCBJSCB),            /* JOB STEP CONTROL BLOCK   *
**
**   2 *           CHAR(188),             /* ALLOWS ADDRESSABILITY
**                                           FROM TCBJSCB             *
**
**/*------------------------------------------------------------------*
**/*                                                                  *
**/*SECTION 1   DATA ITEMS USED IN AOS/1 AND AOS/2                    *
**/*                                                                  *
**/*------------------------------------------------------------------*
**
**   2 JSCBSEC1,                          /* JSCB SECTION 1           *
**    3 JSCRSV01    FIXED(31),            /* RESERVED                 *
**    3 JSCHPCE     PTR(31),              /* ADDRESS OF OPTIONAL JOB
**                                           ENTRY SYSTEM PROCESSOR
**                                           CONTROL ELEMENT    ICB459*
**     4 JSCRSV32    CHAR(1),             /* RESERVED           ICB459*
**     4 JSCHPCEA    PTR(24),             /* SAME AS JSCHPCE ABOVE
**                                                              ICB459*
**    3 JSCBSHR     PTR(31),              /* ADDRESS OF AMBL CHAIN
**                                                              ICB434*
**    3 JSCBTCP     PTR(31),              /* ADDRESS OF TIOT CHAINING
**                                           ELEMENT CHAIN      ICB434*
**    3 JSCBPCC     PTR(31),              /* ADDRESS OF PRIVATE
**                                           CATALOG CONTROL BLOCK
**                                           CHAIN              ICB434*
**    3 JSCBTCBP    PTR(31),              /* ADDRESS OF INITIATOR'S
**                                           TCB                ICB434*
**    3 JSCBIJSC    PTR(31),              /* ADDRESS OF JSCB OF THE
**                                           INITIATOR WHICH ATTACHED
**                                           THIS JOB STEP      ICB426*
**    3 JSCBDBTB    PTR(31),              /* ADDRESS OF THE DEB
**                                           TABLE              ICB380*
**    3 JSCBID      CHAR(4),              /* JOB SERIAL NUMBER        *
**    3 JSCBDCB     PTR(31),              /* ADDRESS OF DCB FOR DATA
**                                           SET CONTAINING SCHEDULER
**                                           TABLES FOR THIS JOB      *
**     4 JSCRSV02    CHAR(1),             /* RESERVED                 *
**     4 JSCBDCBA    PTR(24),             /* SAME AS JSCBDCB ABOVE    *
**    3 JSCBSTEP    PTR(8),               /* CURRENT STEP NUMBER.
**                                           CONTAINS 1 FOR FIRST
**                                           STEP.                    *
**    3 JSCRSV03    CHAR(3),              /* RESERVED                 *
**    3 JSCBSECB    CHAR(4),              /* ECB FOR COMMUNICATION
**                                           BETWEEN MAIN STORAGE
**                                           SUPERVISOR AND THE
**                                           INITIATOR          ICB366*
**    3 JSCBOPTS    BIT(8),               /* FLAG BYTE                *
**     4 JSCRSV04 BIT(1),                 /* RESERVED                 *
**     4 JSCRSV05 BIT(1),                 /* RESERVED                 *
**     4 JSCBLONG BIT(1),                 /* FAIL REDEFINE BECAUSE OF
**                                           LONG RUNNING TASK
**                                           (AOS/1)            ICB351*
**     4 JSCRSV06 BIT(1),                 /* RESERVED                 *
**     4 JSCRSV07 BIT(1),                 /* RESERVED                 *
**     4 JSCRSV08 BIT(1),                 /* RESERVED                 *
**     4 JSCRSV09 BIT(1),                 /* RESERVED                 *
**     4 JSCBAUTH BIT(1),                 /* STEP REPRESENTED BY THIS
**                                           JSCB IS AUTHORIZED TO
**                                           ISSUE THE MODESET MACRO  *
**    3 JSCRSV10    CHAR(3),              /* RESERVED                 *
**    3 JSCBTTTR    CHAR(3),              /* JOB QUEUE ADDRESS (TTR)
**                                           OF TIOT EXTENSION
**                                           (AOS/2)            ICB351*
**    3 JSCBSWT1    BIT(8),               /* STATUS SWITCHES
**                                           (AOS/2)            ICB351*
**     4 JSCBPASS BIT(1),                 /* WHEN THIS BIT IS SET TO
**                                           ONE AND A CORRESPONDING
**                                           BIT IN THE DCB IS SET TO
**                                           ONE, OPEN WILL BYPASS
**                                           PASSWORD PROTECTION FOR
**                                           THE DATA SET BEING OPENED
**                                           (AOS/2)            ICB351*
**     4 JSCRSV11 BIT(1),                 /* RESERVED (AOS/2)   ICB351*
**     4 JSCRSV12 BIT(1),                 /* RESERVED (AOS/2)   ICB351*
**     4 JSCRSV13 BIT(1),                 /* RESERVED (AOS/2)   ICB351*
**     4 JSCRSV14 BIT(1),                 /* RESERVED (AOS/2)   ICB351*
**     4 JSCRSV15 BIT(1),                 /* RESERVED (AOS/2)   ICB351*
**     4 JSCRSV16 BIT(1),                 /* RESERVED (AOS/2)   ICB351*
**     4 JSCBPMSG BIT(1),                 /* A MESSAGE HAS BEEN ISSUED
**                                           BECAUSE THE DUMP DATA SET
**                                           WAS NOT SUCCESSFULLY
**                                           OPENED.  PREVENTS USE OF
**                                           MULTIPLE SMB'S FOR
**                                           MULTIPLE OPEN FAILURES IN
**                                           JOB STEP (AOS/2)   ICB351*
**    3 JSCBQMPI    PTR(31),              /* ADDRESS OF THE JOB STEP'S
**                                           SWA QMPA (AOS/2)   ICB430*
**    3 JSCBQMPO    PTR(31),              /* ADDRESS OF THE QMPA FOR
**                                           THE JOB'S OUTPUT MSGCLASS
**                                           QUEUE ENTRY (AOS/2)ICB351*
**    3 JSCBWTP     CHAR(4) BDY(WORD),    /* WRITE-TO-PROGRAMMER DATA *
**     4 JSCBWTFG    BIT(8),              /* FLAGS FOR WTP FUNCTION   *
**      5 JSCBIOFG BIT(1),                /* PREVIOUS WTP I/O HAD
**                                           I/O ERROR                *
**      5 JSCRSV17 BIT(1),                /* RESERVED                 *
**      5 JSCRSV18 BIT(1),                /* RESERVED                 *
**      5 JSCRSV19 BIT(1),                /* RESERVED                 *
**      5 JSCRSV20 BIT(1),                /* RESERVED                 *
**      5 JSCRSV21 BIT(1),                /* RESERVED                 *
**      5 JSCRSV22 BIT(1),                /* RESERVED                 *
**      5 JSCRSV23 BIT(1),                /* RESERVED                 *
**     4 JSCBWTSP    PTR(8),              /* NUMBER OF LAST STEP TO
**                                           USE WTP                  *
**     4 JSCBPMG     FIXED(15),           /* NUMBER OF WTP'S FOR STEP *
**   2 JSCBCSCB    PTR(31),               /* ADDRESS OF CSCB USED FOR
**                                           PROCESSING COMMANDS
**                                           RECEIVED FROM JOB  ICB351*
**   2 JSCBEND1    CHAR(0) BDY(WORD);     /* END OF SECTION 1         *
**
**/*------------------------------------------------------------------*
**/*                                                                  *
**/*SECTION 2   DATA ITEMS USED ONLY IN AOS/1                         *
**/*                                                                  *
**/*------------------------------------------------------------------*
**
**DECLARE
**  1 JSCBSEC2 BASED(ADDR(JSCBEND1)),     /* JSCB SECTION 2     ICB351*
**
**              /* CURRENTLY NO AOS/1 ONLY DATA ITEMS EXIST */
**
**   2 JSCBEND2    CHAR(0) BDY(WORD);     /* END OF SECTION 2   ICB351*
**
**/*------------------------------------------------------------------*
**/*                                                                  *
**/*SECTION 3   DATA ITEMS USED ONLY IN AOS/2                         *
**/*                                                                  *
**/*------------------------------------------------------------------*
**
**DECLARE
**  1 JSCBSEC3 BASED(ADDR(JSCBEND1)),     /* JSCB SECTION 3     ICB351*
**
**   2 JSCBJCT     CHAR(4),               /* TTR OF JOB'S JCT   ICB351*
**    3 JSCRSV24    CHAR(1),              /* RESERVED           ICB351*
**    3 JSCBJCTA    CHAR(3),              /* TTR OF JOB'S JCT   ICB351*
**   2 JSCBPSCB    PTR(31),               /* ADDRESS OF TSO PROTECTED
**                                           STEP CONTROL BLOCK       *
**   2 JSCBTJID    FIXED(15),             /* TSO TERMINAL JOB
**                                           IDENTIFIER               *
**   2 JSCRSV25    CHAR(2),               /* RESERVED                 *
**   2 JSCBIECB    FIXED(31),             /* ECB USED FOR COMMUNICATION
**                                           BETWEEN DYNAMIC ALLOCATION
**                                           AND THE INITIATOR IN ORDER
**                                           TO PERFORM DATA SET
**                                           INTEGRITY                *
**   2 JSCRSV26    CHAR(4) BDY(WORD),     /* RESERVED                 *
**   2 JSCRSV27    CHAR(4) BDY(WORD),     /* RESERVED           ICB332*
**   2 JSCBSWAB    PTR(31),               /* POINTER TO SWA CONTROL
**                                           BLOCK              ICB332*
**   2 JSCBJNL     PTR(31),               /* SAME AS JSCBJNLA
**                                           BELOW              ICB332*
**    3 JSCBJJSB    BIT(8),               /* JOB JOURNAL STATUS
**                                           INDICATORS         ICB332*
**     4 JSCBJNLN BIT(1),                 /* NOTHING SHOULD BE WRITTEN
**                                           IN JOURNAL         ICB332*
**     4 JSCBJNLF BIT(1),                 /* LIMIT SIZE OF JOURNAL
**                                           REACHED            ICB332*
**     4 JSCBJNLE BIT(1),                 /* ERROR IN JOURNAL, DO NOT
**                                           WRITE              ICB332*
**     4 JSCBJSBJ BIT(1),                 /* MODULE XEFXB500 TO
**                                           PROCESS 'AFTER
**                                           ALLOCATION'        ICB332*
**     4 JSCBJSBI BIT(1),                 /* JOB HAS NOT ENTERED
**                                           ALLOCATION FOR THE FIRST
**                                           TIME               ICB332*
**     4 JSCBJSBA BIT(1),                 /* JOB HAS ENTERED
**                                           ALLOCATION         ICB332*
**     4 JSCBJSBX BIT(1),                 /* JOB HAS COMPLETED
**                                           ALLOCATION         ICB332*
**     4 JSCBJSBT BIT(1),                 /* JOB HAS ENTERED
**                                           TERMINATION        ICB332*
**    3 JSCBJNLA    PTR(24),              /* INITIATOR JSCB ONLY -
**                                           ADDRESS OF JSCB FOR STEP
**                                           BEING INITIATED.
**                                           OTHERWISE, ZERO    ICB431*
**   2 JSCBJNLR    PTR(31),               /* POINTER TO LRCB IN
**                                           LSQA               ICB332*
**   2 JSCBSMLR    PTR(31),               /* ADDRESS OF LRCB FOR
**                                           SYSTEM MESSAGE DATA SET
**                                           FOR THIS STEP      ICB429*
**   2 JSCBSUB     PTR(31),               /* SAME AS JSCBSUBA
**                                           BELOW              ICB333*
**    3 JSCRSV31    CHAR(1),              /* RESERVED           ICB333*
**    3 JSCBSUBA    PTR(24),              /* ADDRESS OF JES-SUBTL FOR
**                                           THIS JOB STEP      ICB333*
**   2 JSCBSONO    FIXED(15),             /* THE NUMBER OF SYSOUT DATA
**                                           SETS PLUS ONE      ICB335*
**   2 JSCRSV28    FIXED(15),             /* RESERVED                 *
**   2 JSCRSV29    PTR(31),               /* RESERVED                 *
**   2 JSCRSV30    PTR(31),               /* RESERVED                 *
**   2 JSCBEND3    CHAR(0) BDY(WORD);     /* END OF SECTION 3   ICB351*
**
**        /* MACRO DEFINITIONS OF JSCBDISP, JSCBAOS1, AND JSCBAOS2 */
**
**  JSCBDISP:  GEN  (EQU 188);
JSCBDISP EQU 188
         DS    0H
**  JSCBAOS1:  GEN  (EQU  72);
JSCBAOS1 EQU  72
         DS    0H
**  JSCBAOS2:  GEN  (EQU 128);
JSCBAOS2 EQU 128
         DS    0H
**
**              /* END OF JSCB */
** DECLARE
**   1 TJB      BASED(TJBPTR),
**    2 TJBTSB   PTR(31),             /* ADDR OF TSB FOR THIS
**                                       JOB,0-STARTED BY OPERATOR    *
**    2 TJBATTN  CHAR(1),             /* NUMBER OF UNPROCESSED ATTNS
**                                       FOR THIS JOB                 *
**    2 TJBSTAX  CHAR(1),             /* NUMBER OF STAX EXITS YET
**                                       UNSCHEDULED                  *
**    2 TJBSTAT  CHAR(1),             /* STATUS FLAGS                 *
**     3 TJBNJB   BIT(1),             /* NO JOB,THIS TJB IS CURRENTLY
**                                       UNUSED                       *
**     3 TJBINCOR BIT(1),             /* USER IN CORE                 *
**     3 TJBLOGON BIT(1),             /* LOGON START,SET BY TIOC AT
**                                       DIAL-UP,TSC RESET            *
**     3 TJBIWAIT BIT(1),             /* INPUT WAIT,TERMINAL JOB IS
**                                       IN INPUT WAIT                *
**     3 TJBOWAIT BIT(1),             /* OUTPUT WAIT,TERMINAL JOB IS
**                                       IN OUTPUT WAIT               *
**     3 TJBSILF  BIT(1),             /* SYSTEM INITIATED LOGOFF      *
**     3 TJBDISC  BIT(1),             /* DISCONNECT SET TO REQUEST
**                                       TIOC TO DISCON LINE          *
**     3 TJBSILF2 BIT(1),             /* SYSTEM INITIATED LOGOFF      *
**    2 TJBSTAT2 CHAR(1),             /* STATUS FLAGS                 *
**     3 TJBHUNG  BIT(1),             /* HUNG UP                      *
**     3 TJBHOLD  BIT(1),             /* USER IS IN OWAIT DUE TO HOLD
**                                       OPTIONS                      *
**     3 TJBOCAB  BIT(1),             /* TSO FAILURE RESULTING IN
**                                       OUT-OF-CORE ABEND            *
**     3 TJBRNAV  BIT(1),             /* USER CANNOT BE LOGGED ON
**                                       BECAUSE MACHINE CHECK IN
**                                       REGION OR NO REGION LARGE
**                                       ENOUGH BITS                  *
**     3 TJBSURSV BIT(1),             /* ON NEXT SWAP IN,DO NOT MARK
**                                       SWAP UNIT AVAILABLE FOR USE  *
**     3 TJBQUIS  BIT(1),             /* QUIESCE STARTED FOR USER     *
**     3 TJBUSERR BIT(1),             /* USER READY TO RUN            *
**     3 TJBDEAD  BIT(1),             /* INDIACTE ABEND RECURSION
**                                       TO IKJEAT07                  *
**    2 TJBEXTNT PTR(31),             /* POINTER TO TJB IN SWAPPED
**                                       OUT JOB IMAGE                *
**    2 TJBRCB   PTR(31),             /* POINTER TO RCB FOR THIS
**                                       REGION                       *
**    2 *        PTR(31),             /* RESERVED                     *
**    2 TJBSPCT PTR(31),              /* PTR TO USER SPCT             *
**    2 *    FIXED(15),               /* RESERVED                     *
**    2 TJBRSTOR CHAR(1),             /* RESTORE FLAGS, TESTED BY RCT
**                                       RESTORE                      *
**     3 TJBOWP   BIT(1),             /* POST OUTPUT WAIT,SET BY
**                                       TIOC,ENDS AN OWAIT           *
**     3 TJBIWP   BIT(1),             /* POST INPUT WAIT,SET BY
**                                       TIOC,ENDS AN IWAIT EQU       *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 TJBLOGP  BIT(1),             /* POST LOGON,POST ECB WAITED
**                                       ON BY LOGON IMAGE            *
**     3 TJBLWAIT BIT(1),             /* USER IN LONG WAIT,SWAP OUT
**                                       IF NOT MADE READY BY RESTORE
**                                       PROCESSING EQU               *
**     3 TJBDDRD  BIT(1),             /* WHEN ON RESTORE WILL RESET DDR
**                                       NON DISPATCHABILITY BIT      *
**     3 TJBFAT   BIT(1),             /* AN ATTN EXIT IS REQ FOR THIS
**                                       USER                         *
**     3 TJBDDRND BIT(1) ,            /* INDICATES TO RESTORE TO SET
**                                       TCB NON DISPATCHABILE WHEN
**                                       JOB SWAPPED IN               *
**    2 *        CHAR(1),             /* RESERVED                     *
**    2 TJBUSER  CHAR(8),             /* USERID OF THIS JOB
**                                       OWNER,PADDED RT WITH BLANKS  *
**    2 TJBIPPB  FIXED(31),           /* IPPB CHAIN OF ECB'S TO BE
**                                       POSTED BY RESTORE            *
**    2 TJBNEWID PTR(8),              /* RGN ID INTO WHICH THIS USER
**                                       SHOULD BE LOGGED ON. 0 IF
**                                       SELECTED BY DRIVER           *
**    2 TJBFLUSL CHAR(1),             /* STAX LEV OF LAST STAX ISSUED
**                                       WITH NOPURGE OPTION          *
**    2 TJBTJID  FIXED(15),           /* TERMINAL JOB ID              *
**    2 TJBMONI  CHAR(1),             /* MONITOR CMD INDICATING INFO
**                                       REQUESTED                    *
**     3 TJBMDSN  BIT(1),             /* DSNAMES                      *
**     3 TJBMJBN  BIT(1),             /* JOBNAMES                     *
**     3 TJBMSES  BIT(1),             /* SESSION                      *
**     3 TJBMSPA  BIT(1),             /* SPACE                        *
**     3 TJBMSTA  BIT(1),             /* STATUS                       *
**     3 TJBGETBF BIT(1),             /* THIS BIT INDICATES TPUT SHOULD
**                                       ATTEMPT TO GET ADDITIONAL
**                                       BUFFERS FOR USER BEFORE GOING
**                                       INTO A WAIT STATE            *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**    2 TJBSTAT3 CHAR(1),             /* STATUS FLAGS                 *
**     3 TJBDISC2 BIT(1),             /* TJB GOING TO DISCONNECT      *
**     3 TJBSOEM BIT(1),              /* SWAP OUT ERR MSG RECURS FLG  *
**     3 TJBLOGTM BIT(1),             /* INDICATES TO LOGON THAT
**                                       TERMINATION IS REQUESTED     *
**    2 TJBLINE  CHAR(2);             /* CONTAINS THE BINARY REP OF THE
**                                       UNIT ADR OF LINE BEING USED  *
** DECLARE
**   1 TJBX     BASED(TJBEXTNT),
**    2 TJBXFST  PTR(31),             /* ADDR LOGON TCB WHICH IS
**                                       FIRST IN USER READY QUEUE    *
**    2 TJBXLAST PTR(31),             /* ADDR LAST TCB IN USER READY
**                                       QUEUE                        *
**    2 TJBXDSE  PTR(31),             /* ADDR OF DSE USED BY TSO'S
**                                       DYN ALLOC                    *
**    2 TJBXSQE PTR(31),              /* POINTER TO SQE CHAIN FOR
**                                        QUIESCED USER               *
**    2 TJBXRQE  PTR(31),             /* ADDR FIRST RQE PURGED FROM
**                                       ASYNCHRONOUS EXIT QUEUE A    *
**    2 TJBXIQE  PTR(31),             /* ADDR FIRST IQE PURGED FROM
**                                       ASYNCHRONOUS EXIT QUEUE J    *
**    2 TJBXTAXE FIXED(31),           /* QUEUE OF TAXE'S USED TO
**                                       SCHEDULE ATTENTION EXITS     *
**    2 TJBXLECB FIXED(31),           /* LOGON ECB POSTED BY RCT      *
**    2 TJBXPSWD CHAR(8),             /* USERS LOGON PASSWORD-IF
**                                       BLANK-NOT REQUIRED           *
**    2 TJBXATTR FIXED(31),           /* PTR TO CHAIN OF ATRCB'S      *
**    2 TJBXAIQE PTR(31),             /* ADDR ATTN IQE CURRENTLY
**                                       BEING PROCESSED              *
**    2 TJBXQPL  PTR(31),             /* ADDR QUIECSE PARM LIST       *
**    2 TJBXNQPE FIXED(15),           /* NUMBER ENTRIES IN QPL        *
**    2 TJBXNTCB FIXED(15),           /* NUMBER TCBS ACTIVE IN USER
**                                       JOB STEP                     *
**    2 TJBXLQPL FIXED(15),           /* LENGTH QPL                   *
**    2 TJBXHBFL CHAR(1),             /* CUR VAL OF LAST HOLDBUF
**                                       LEVEL. USED BY STAX SVC
**                                       ROUTINE                      *
**    2 *        CHAR(1),             /* RESERVED                     *
**    2 TJBXACT  FIXED(31),           /* TTR OF ACT ON SYSJOBQE       *
**    2 TJBXAECB PTR(31);             /* POINTER TO LOGON/LOGOFF ECB
**                                       UNTIL LOGON PROCESSING THEN
**                                       TO CSCB CANCEL ECB AFTER
**                                       CSCB IS CREATED              *
**
** DECLARE
**   1 TSCVT    BASED(CVTTSCVT),
**    2 TSCVTTJB PTR(31),             /* POINTER TO TJB TABLE         *
**    2 TSCVTRCB PTR(31),             /* POINTER TO RCB TABLE         *
**    2 TSCVTRPT PTR(31),             /* PTR TO REFERENCE POINTER
**                                       TABLE                        *
**    2 TSCVTFLG  CHAR(2),            /*  FLAGS TO INDICATE FUNCT
**                                       REQUESTED OF TSC             *
**     3 * BIT(1),                    /* SPARE                        *
**     3 TSCSWPBG BIT(1),             /* SWAP SHOULD BE STARTED       *
**     3 TSCLOGON BIT(1),             /* A LOGON IS TO BE PROCESSED   *
**     3 TSCDISC  BIT(1),             /* A DISCONNECT IS TO BE
**                                       PROCESSED BITS               *
**     3 TSCVTTHR BIT(1),             /* SYSTEM IS THRASHING          *
**    2 TSCVTFL1  CHAR(2),            /*  FLAGS TO INDICATE FUNCT
**                                       REQUESTED OF TSC             *
**     3 TSCSSTOP BIT(1),             /* SYSTEM STOP REQUESTED AND
**                                       TSC IS STOPPING              *
**     3 TSCRSTOP BIT(1),             /* REGION STOP REQUESTED        *
**     3 TSCASTOP BIT(1),             /* ABEND-STOP TS FLG. SET BY
**                                       TSO/RMS IF TCAM MCH'SSET BY
**                                       TCAM STAE EXIT IF TCAM
**                                       ABENDS  BITS                 *
**     3 TSCTSTOP BIT(1),             /* RMS/MCH INTERFACE HAS STOPPED
**                                    /* TSC                          *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**    2 TSCVTI04 PTR(31),             /* ADDRESS OF IKJVAI04 IN TS
**                                       DISPATCHER                   *
**    2 TSCVTCUS FIXED(15),           /* CURR NO. OF USERS LOGGED ON
**                                       TSO                          *
**    2 TSCVTLUS FIXED(15),           /* CURRENT LIMIT NO. OF USERS
**                                       LOGGED ON TO TSO SET BY TSC  *
**    2 TSCVTNTJ FIXED(15),           /* NO.TJB-TSB'S ALLOC BY TSO
**                                       INITIALLY                    *
**    2 TSCVTSZU FIXED(15),           /* SIZE OF TJB                  *
**    2 TSCVTCTR FIXED(15),           /* NO. OF RCB'S ALLOC BY TSO
**                                       INITIALLY                    *
**    2 TSCVTMUS FIXED(15),           /* MAX NUMBER OF USERS LOGGED
**                                       ON TO TSO SET BY START AND
**                                       MODIFY COMMANDS (TSC)        *
**    2 TSCVTSAV PTR(31),             /* PTR TO SAV AREA FOR
**                                       TSC,TSIP&TS DISP             *
**    2 TSCVTECB PTR(31),             /* PTR TO TSECBTAB CTL BLK OF
**                                       ECB'S                        *
**    2 TSCVTSIA PTR(31),             /* PTR TO TSIA                  *
**    2 TSCVTICB PTR(31),             /* PTR TO TSICB                 *
**    2 TSCVTI01 PTR(31),             /* ADDRESS OF ENTRY POINT
**                                       IKJEAI01 TSIP BR ENTRY       *
**    2 TSCVTTQE PTR(31),             /* PTR TO TQE FOR TSO'S TIME
**                                       SLICING                      *
**    2 TSCVTI02 PTR(31),             /* ADDRESS OF ENTRY POINT
**                                       IKJEAI02 IN TS DISPATCH      *
**    2 TSCVTI03 PTR(31),             /* ADDRESS OF ENTRY POINT
**                                       IKJEAI03 IN TS DISPATCH      *
**    2 TSCVTD02 PTR(31),             /* ADDRESS OF ENTRY POINT
**                                       IKJEAD02 IN TS DRIVER        *
**    2 TSCVTLCQ PTR(31),             /* ADDR OF TOP ELEM ON LOGON
**                                       COMM. QUE                    *
**    2 TSCVTTRB PTR(31),             /* ADDR OF TRACE CTL BLK CHAIN  *
**    2 TSCVTLPA PTR(31),             /* ADDR OF 1ST CDE IN TS LINK
**                                       PACK AREA                    *
**    2 TSCVTSLF FIXED(31),           /* SYSTEM INIATED LOGOFF        *
**    2 TSCVTTSC PTR(31),             /* ADDR OF THE                  *
**    2 TSCVTSPL PTR(31),             /* ADDRESS OF START PARAMETER
**                                       LIST                         *
**    2 TSCVTRSZ FIXED(15),           /* MIN REGION SIZE FOR LOGON    *
**    2 *        CHAR(2),             /* RESERVED                     *
**    2 TSCVTSVT CHAR(4),             /* SVCTBL ENTRY FOR TSIP PRIOR
**                                       TO START TS                  *
**    2 TSCVTSVQ CHAR(4),             /* SVCTBL ENTRY FOR QTIP PRIOR
**                                       TO START TS                  *
**    2 TSCVTABN PTR(31),             /* ADDR OF OUT-OF-CORE ABEND
**                                       RTN(IKJEAT07)                *
**    2 TSCVTD03 PTR(31),             /* ADDR OF EP IKJEAD03 IN TS
**                                       DRIVER                       *
**    2 TSCVTFLM PTR(31),             /* ADDR OF EP - IKJEFLM         *
**    2 TSCVTQTP PTR(31),             /* ADDR OF EP OF QTIP SVC -
**                                       IKJGGQT1                     *
**    2 TSCVTT08 PTR(31),             /* ADDR OF EP - IKJEAT08        *
**    2 TSCVTDMP PTR(31),             /* ADDR OF TSO DUMP CONTROL
**                                        BLOCK - IKJTSDMP            *
**    2 TSCVTT06 PTR(31),             /* ADDR OF TCB FOR IKJEAT06     *
**    2 TSCVTLS3 PTR(31),             /* ADDR OF LOGON OUT OF CORE    *
**    2 TSCVTSMI PTR(31),             /* ADDRESS OF SMITDSN CONTROL
**                                       BLOCK                        *
**    2 TSCVTMSG PTR(31),             /* BRANCH ENTRY POINT FOR IKJVAMS
**                                                                    *
**    2 TSCVTSCN PTR(31),             /* BRANCH ENTRY POINT FOR IKJVASC
**                                                                    *
**    2 TSCVTR01 PTR(31);             /* ADDRESS OF IKJVAR01.         *
**
*          DCL  ECTPTR  PTR(31)  AUTO;
** DECLARE
**   1 ECT      BASED(ECTPTR),
** /* *************************************************************** *
** /* THE ENVIRONMENT CONTROL TABLE (ECT) IS BUILT BY THE TMP AND     *
** /* STORED IN A NON-SHARED SUBPOOL. ITS FIELDS CAN BE MODIFIED      *
** /* BY A CP OR SERVICE RTN BUT NOT FREED.                           *
** /* *************************************************************** *
**
**    2 ECTRCDF  CHAR(1),             /* HIGH ORDER BIT INDICATES CP
**                                       ABENDED                      *
**    2 ECTRTCD PTR(24),              /* RETURN CODE FROM LAST CP OR
**                                       ABEND CODE IF ECTRCDF IS SET *
**    2 ECTIOWA  PTR(31),             /* ADDR I/O SRV RTNS WORK AREA  *
**    2 ECTMSGF  CHAR(1),             /* HIGH ORDER BIT SET MEANS
**                                       DELETE SECOND LEVEL MSG      *
**    2 ECTSMSG  PTR(24)  BDY(BYTE),
**                                    /* ADDR OF SECOND LEVEL MSG
**                                       CHAIN                        *
**    2 ECTPCMD  CHAR(8),             /* PRIMARY COMMAND NAME         *
**    2 ECTSCMD  CHAR(8),             /* SUBCOMMAND NAME              *
**    2 ECTSWS   CHAR(1),             /* 4 BYTES OF SWITCHES          *
**     3 ECTNOPD  BIT(1),             /* 0 BIT ON= NO OPERANDS EXIST
**                                       IN CMD BUFFER                *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 ECTATRM  BIT(1),             /* CP TERMINATED BY TMP DETACH
**                                       W/ STAE EQU                  *
**     3 ECTLOGF  BIT(1),             /* LOGON/OFF REQUESTED TMP TO
**                                       LOGOFF USER BITS             *
**     3 ECTNMAL BIT(1),              /* NO USER MSGS TO BE RECVED AT
**                                       LOGON                        *
**     3 ECTNNOT BIT(1),              /* NO BRDCST NOTICES TO BE RECVED
**                                       LOGON                        *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**    2 ECTDDNUM PTR(24),             /*COUNTER FOR TEMPORARY DDNAMES *
**    2 ECTUSER  PTR(31),             /*RESERVED FOR INSTALLATION USE *
**    2 *        PTR(31);             /*RESERVED                      *
**
** DECLARE
**   1 PSCB     BASED(DAPLPSCB),
** /* *************************************************************** *
** /* THE PROTECTED STEP CONTROL BLOCK IS CONSTRUCTED BY LOGON AND    *
** /* FILLED IN FROM THE UADS .  A FIXED LENGTH TABLE WITH ATTRIBUTE  *
** /* AND ACCOUNTING FIELDS, THE PSCB IS USED TO MAINTAIN USER ATTRI- *
** /* BUTES AND ACCOUNTING DATA ON A USERID BASIS.  THE ADDRESS OF PS *
** /* IS PASSED TO THE TMP.  HENCE IT IS AN EXTERNAL INTERFACE        *
** /* *************************************************************** *
**
**    2 PSCBUSER CHAR(7)  BDY(WORD),
**                                    /* USERID PADDED RIGHT WITH
**                                       BLANKS                       *
**    2  PSCBUSRL  PTR(8),         /* LENGTH OF USERID                *
**    2 PSCBGPNM CHAR(8),             /* ESOTERIC GROUP NAME INIT BY
**                                       LOGON FROM UADS USED BY DYN
**                                       ALLOC WHEN UNITNAME NOT
**                                       SPECIFIED BUT IS REQUIRED    *
**    2    PSCBATR1 CHAR(2),       /* A 15 BIT  STRING OF USER
**                                       ATTRIBUTES                   *
**     3 PSCBCTRL BIT(1),             /* OPERATOR COMMAND USER        *
**     3 PSCBACCT BIT(1),             /* ACCOUNT                      *
**     3 PSCBJCL  BIT(1),             /* SUBMIT BITS                  *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 *        BIT(1),             /* RESERVED                     *
**    2  PSCBATR2  CHAR(2),        /* A 15 BIT STRING RESERVED FOR
**                                       INSTALLATION USE             *
**    2 PSCBCPU  FIXED(31),           /* CUMULATIVE CPU TIME USED
**                                       DURING SESSION               *
**    2 PSCBSWP  FIXED(31),           /* CUMULATIVE TIME RESIDENT IN
**                                       THE REGION                   *
**    2 PSCBLTIM FIXED(31),           /* ACTUAL LOGON TIME OF DAY     *
**    2 PSCBTCPU FIXED(31),           /* TOTAL CPU TIME USED IN THIS
**                                       ACCOUNTING PERIOD,EXCLUDING
**                                       THE CURRENT SESSION.         *
**    2 PSCBTSWP FIXED(31),           /* TOTAL TIME USER IS RESIDENT
**                                       IN THE REGION DURING THIS
**                                       ACCT. PER.,EXCL. THE CURR.
**                                       SES                          *
**    2 PSCBTCON FIXED(31),           /* TOTAL TIME USER IS CONNECTED
**                                       THIS ACCT. PERIOD,EXCLUDING
**                                       THIS CURR. SES               *
**    2 PSCBTCO1 FIXED(31),           /* TOTAL TIME USER TERMINAL
**                                       IS CONNECTED DURING THIS
**                                       CURRENT SESSION        M0759 *
**    2 PSCBRLGB PTR(31),             /* PTR TO RELOGON BUFFER        *
**    2 PSCBUPT  PTR(31),             /* PTR TO USER PROFILE TABLE    *
**    2 PSCBUPTL FIXED(15),           /* LENGTH OF UPT                *
**    2 * BIT(16),                    /* RESERVED FOR IBM USE         *
**    2 PSCBRSZ POINTER(32),          /* REGION SIZE REQUESTED IN 2K
**                                       UNITS                        *
**    2 PSCBU    CHAR(8);             /* RESERVED FOR INSTALLATION
**                                       USE                          *
**
**
*         DCL   IORMSPTR PTR(31) BASED(CVTDCBA);  /*ADDR OF IORMS AREA*
*         DCL   1 IGFIORMS BASED(IORMSPTR) BDY(WORD), /*IORMS AREA    *
*                 2 * CHAR(20),         /*USED BY CCH           A41399*
*                 2 DDRFLGSA BIT(8),    /*USED BY DDR           A41399*
*                   3 * BIT(2),         /*USED BY DDR           A41399*
*                   3 DDRPROG BIT(1),   /*DDR IN PROGRESS       A41399*
*                   3 * BIT(5),         /*USED BY DDR           A41399*
*                 2 * CHAR(47),         /*USED BY DDR           A41399*
*                 2 ALLOCECB FIXED(31), /*DDR ALLOCATION ECB    A41399*
*                   3 * BIT(1),         /*USED BY DDR           A41399*
*                   3 DDRPOST BIT(1),   /*POST BIT IN ECB       A41399*
*                 2 ALLOCTCB FIXED(31), /*SAVE AREA FOR TCB     A41399*
*                 2 * CHAR(8),          /*USED BY DDR           A41399*
*                 2 * FIXED(31),        /*USED BY DDR           A41399*
*                   3 ALLOTJID FIXED(15), /*SAVE AREA FOR TJID  A41399*
*                   3 * FIXED(15);      /*USED BY DDR           A41399*
*         DCL   R0  REG(0)  FIXED(31);        /* REGISTER             *
*         DCL   R1  REG(1)  PTR(31);          /* REGISTER             *
*         DCL   R2  REG(2)  PTR(31);          /* REGISTER             *
*         DCL   R6  REG(6)  PTR(31);          /* REGISTER             *
*         DCL   Q   REG(8)   PTR(31);         /* REGISTER             *
*         DCL   R11  REG(11)  PTR(31);        /* REGISTER             *
*         DCL   R12  REG(12)  PTR(24);        /* REGISTER             *
*         DCL   R13  REG(13)  PTR(31);        /* REGISTER             *
*         DCL   R14  REG(14)  PTR(31);        /* REGISTER             *
*         DCL   R15  REG(15) FIXED(31);       /* REGISTER             *
*         RESTRICT (5);                       /* REGISTER             *
*         RESTRICT  (7);                      /* REGISTER             *
*         RESTRICT (8);                       /* REGISTER             *
*         RESTRICT  (2,6);                    /* REGISTER             *
*         DCL   P    PTR(31) AUTO;            /* POINTER              *
*         DCL   GTMNPTR   PTR(31)  AUTO;      /* GETMAIN PTR          *
*         DCL   SRCHPTR PTR(31) AUTO;         /* SEARCH PTR           *
*         DCL   DDFIRST  PTR(31)  AUTO;       /* FIRST DD IN GROUP    *
*         DCL   RTRNPT  LABEL  BASED(R14);    /*  RETURN POINT LABEL  *
*         DCL   DA34PDSN PTR(31) BASED(P);    /* POINTER              *
*         DCL   OPPTRS PTR(31) BASED(Q);      /* CODE 28 PTR          *
*         DCL   DA28PTR PTR(31) AUTO;         /* CODE 28 WORK PTR     *
*         DCL  REGPTR  PTR(31)  AUTO;         /* POINTER              *
*         DCL   1 WORK FIXED(31) AUTO,        /*  WORK FIELD          *
*                 2  WORK2 CHAR(4);           /* WORK AREA            *
*         DCL  WORKPTR   PTR(31)  AUTO;       /* DAIR AREA PTR        *
*         DCL  1 DAIRWA  AUTO ,               /* DAIR WORKAREA        *
*               2  DSEADDR  PTR(31),          /*       FIRST DSE BLOCK*
*               2  SAVPTR  PTR(31),           /* CALLERS SAVE AREA    *
*               2  TCBADD   PTR(31),          /* ADDR OF TCB          *
*               2  USERIDL CHAR(1),           /* USER ID LENGTH       *
*               2  USERSID  CHAR(7),          /* USER ID              *
*               2  UNITDEF  CHAR(8),          /* DEFAULT UNIT NAME    *
*               2  PARMPTR  PTR(31),          /* @ OF DAIR PARM LIST  *
*               2  RTCODE   FIXED(31),        /* RETURN CODE AREA     *
*               2  RTCODE15  FIXED(31),       /* RETURN CODE FIELD    *
*               2  LIST99   PTR(31),          /* POINTER              *
*               2  LIST99S2 FIXED(31),        /* SIZE OF LIST         *
*               2  CATLIST  PTR(31),          /* WORK PTR             *
*               2  CATLSTSZ FIXED(31),        /*   CATALOG PARM LIST  *
*               2  SECSAVAR PTR(31),          /*     SAVE AREA        *
*               2  SECSAVSZ FIXED(31),        /*   SECONDARY SAVE AREA*
*               2  DDNPTR   PTR(31),          /*   NEEDED DDNAME      *
*               2  DSNPTR   PTR(31),          /*   NEEDED DSNAME      *
*               2  MEMPTR   PTR(31),          /*   NEEDED MEMBER      *
*               2  BLKPTR   PTR(31),          /*   NEXT DSE BLOCK     *
*               2  DDNADDR  PTR(31),          /*   DSE FOR DDNAME     *
*               2  DSNADDR  PTR(31),          /*   DSE FOR DSNAME     *
*               2  NOTUADDR PTR(31),          /*    NOT IN USE DATASET*
*               2  DYNMADDR PTR(31),          /*    DYNAM ENTRY       *
*               2  STATUS1  CHAR(1),          /* STATUS BYTE          *
*                 3  BIT0  BIT(1),            /* USED IN CODE 18      *
*                 3  BIT1  BIT(1),            /* USE DSE FOR LIST     *
*                 3  BIT2  BIT(1),            /* STOP ON FIRST FIND   *
*                 3  BIT3  BIT(1),            /* DSN FOUND            *
*                 3  BIT4  BIT(1),            /* DSN DYNM. CONCATEN.  *
*                 3  BIT5  BIT(1),            /* DSN IN CONCAT GROUP  *
*                 3  BIT6  BIT(1),            /* DSN,FOUND MORE THAN 1*
*                 3  BIT7  BIT(1),            /* DEFAULT DISP TO OLD  *
*               2  STATUS2  CHAR(1),          /* STATUS BYTE          *
*                 3  BITT0 BIT(1),            /* KEY ON DDNAME        *
*                 3  BITT1 BIT(1),            /*ATTR LIST GIVEN C99236*
*                 3  BITT2 BIT(1),            /*ATTR LIST NAME  C99236
*                                               FOUND           C99236*
*                 3  BITT3 BIT(1),            /*SEARCH DSE'S    C99236*
*                 3  BITT4 BIT(4),            /*INDEXING BRANCH TABLE *
*               2  SWITCHES  CHAR(1),         /* SWITCHES       A43020*
*                 3  CONVERTB BIT(1),         /* CONVERT BIT SW A43020*
*                 3  OMODNWHD BIT(1),         /* MOD AS NEW     A43020*
*                 3  LOCADONE BIT(1),         /* DID A LOCATE   A43020*
*                 3  *        BIT(5),         /* RESERVED       A43020*
*               2  * CHAR(1),                 /* RESERVED       A43020*
*               2  CNCAADDR PTR(31),          /* CONCAT. NOT    C99236
*                                                IN USE         C99236*
*               2  ATRLNAME CHAR(8),          /* ATTR-LIST-NAME C99236*
*               2  ATRADDR PTR(31);           /* PTR TO ATRCB   C99236*
*         DCL TIOTPTR AUTO PTR(31);           /* THE FOLLOWING  A43020*
** /* AOS/1 RELEASE 2, AOS/2 RELEASE 1, 10/21/71, LEVEL=1             *
**
** DECLARE
** 1 TIOT1 BASED(TIOTPTR) BDY(WORD),
**     5 TIOCNJOB CHAR(8),               /* JOB NAME                  *
**     5 TIOCSTEP CHAR(16);              /* STEP NAME                 *
**/********************************************************************
**/*                                                                  *
**/* DD ENTRY:                                                        *
**/*                                                                  *
**/*     A DD ENTRY INCLUDES A DEVICE ENTRY. BEFORE ALLOCATION, THERE *
**/*     MAY BE SEVERAL DEVICE ENTRIES IN EACH DD ENTRY.              *
**/*                                                                  *
**/********************************************************************
** DECLARE
**     1 TIOENTRY   BASED(ADDR(TIOT1)+24),
**          10 TIOELNGH PTR(8),          /* LENGTH OF THIS ENTRY      *
**          10 TIOESTTA BIT(8),          /* STATUS -A-                *
**            11 TIOSLTYP BIT(1),        /* NONSTANDARD LABEL (NOTE 1)*
**            11 TIOSPLTP BIT(1),        /* SPLIT CYLINDER PRIMARY    *
**            11 TIOSPLTS BIT(1),        /* SPLIT CYLINDER SECONDARY  *
**            11 TIOSJBLB BIT(1),        /* JOBLIB INDICATOR          *
**            11 TIOSDADS BIT(1),        /* DADSM ALLOCATION NECESSARY*
**            11 TIOSLABL BIT(1),        /* LABELED/UNLABELED (NOTE 1)*
**            11 TIOSDSP1 BIT(1),        /* DISPOSITION BIT 1         *
**            11 TIOSDSP2 BIT(1),        /* DISPOSITION BIT 2         *
**/*   NOTE 1 - IF BOTH BITS TIOSLTYP AND TIOSLABL ARE ON, THE VOLUME *
**/*            IS A TAPE AND HAS AN 'ANSI' LABEL.                    *
**          10 TIOERLOC CHAR(2),         /* REL. LOC OF POOL          *
**                 15 TIOEWTCT CHAR(1),  /* COUNTOF NUMBER OF DEVICES
**                                          DURING ALLOCATION STILL
**                                          ELIGIBLE TO DADSM ALLOCATE
**                                          THIS DATA SET REQUEST     *
**                 15 TIOELINK CHAR(1),  /* DURING ALLOCATION OF
**                                          ALL BUT POOLS THIS WILL BE
**                                          A LINK TO THE APPROPRIATE
**                                          PRIME SPLIT,UNIT AFFIN
**                                          VOL.,AFFIN OR SUBALLOCATE *
**/* FOLLOWING BIT MASKS APPLY TO 'TIOELINK' FIELD */
**                   17 TIOSYOUT BIT(1), /* SYSOUT D.S.THAT HAS DATA  *
**                   17 TIOTOPEN BIT(1), /* DATA SET IS OPEN          *
**                   17 TIOTTERM BIT(1), /* THIS IS A TERMINAL        *
**                   17 TIOEDYNM BIT(1), /* 'DYNAM' KEYWORD USED      *
**                   17 TIOEQNAM BIT(1), /* 'QNAME' KEYWORD USED      *
**                   17 TIOESYIN BIT(1), /* ENTRY FOR SPOOLED INPUT   *
**                   17 TIOESYOT BIT(1), /* ENTRY FOR SPOOLED OUTPUT  *
**                   17 TIOTREM  BIT(1), /* INDICATES THE ENTRY IS FOR
**                                          A REMOTE DEVICE     ICB340*
**          10 TIOEDDNM CHAR(8),         /* DDNAME                    *
**          10 TIOEJFCB CHAR(3),         /* JFCB DISK ADDR            *
**          10 TIOESTTC BIT(8),          /* STATUS -C-                *
**           11 TIOSDKCR BIT(1),         /* CORE/DISK ADDRESS         *
**           11 TIOSDEFR BIT(1),         /* DEFERRED MOUNT            *
**           11 TIOSAFFP BIT(1),         /* UNIT AFFINITY PRIMARY     *
**           11 TIOSAFFS BIT(1),         /* UNIT AFFINITY SECONDARY   *
**           11 TIOSVOLP BIT(1),         /* VOLUME AFFINITY PRIMARY   *
**           11 TIOSVOLS BIT(1),         /* VOLUME AFFINITY SECONDARY *
**           11 TIOSBALP BIT(1),         /* SUBALLOCATE PRIMARY       *
**           11 TIOSBALS BIT(1),         /* SUBALLOCATE SECONDARY     *
**/********************************************************************
**/*                                                                  *
**/* DEVICE ENTRIES:                                                  *
**/*                                                                  *
**/*    1. DURING ALLOCATION:                                         *
**/*              ONE DEVICE ENTRY FOR EACH DEVICE REQUIRED, OR FOR   *
**/*              EACH PUBLIC DEVICE ELIGIBLE.                        *
**/*                                                                  *
**/*    2. DURING PROBLEM PROGRAM:                                    *
**/*              ONE DEVICE ENTRY FOR EACH ALLOCATED DEVICE          *
**/*                                                                  *
**/********************************************************************
**          10 TIOESTTB BIT(8),          /* STATUS -B-                *
**           11 TIOSUSED BIT(1),         /* DATA SET IS ON DEVICE     *
**           11 TIOSREQD BIT(1),         /* DATA SET WILL USE DEVICE  *
**           11 TIOSPVIO BIT(1),         /* DEVICE VIOLATES SEPARATION*
**           11 TIOSVLSR BIT(1),         /* VOLUME SERIAL PRESENT     *
**           11 TIOSSETU BIT(1),         /* SETUP MESSAGE REQUIRED    *
**           11 TIOSMNTD BIT(1),         /* MOUNTED                   *
**           11 TIOSUNLD BIT(1),         /* UNLOAD REQUIRED           *
**           11 TIOSVERF BIT(1),         /* VERIFICATION REQUIRED     *
**          10 TIOEFSRT  PTR(24),        /* SRT POINTER               *
**/********************************************************************
**/*                                                                  *
**/*            TIOT POOL ENTRY                                       *
**/*                                                                  *
**/********************************************************************
**     5 POOLSTAR,
**          10 *    CHAR(1),
**          10 TIOPNSLT PTR(8),          /* NR. OF SLOTS FOR POOL     *
**          10 *    CHAR(1),
**          10 TIOPNSRT PTR(8),          /* NR. OF DEVICES (FILLED
**                                          SLOTS)                    *
**          10 TIOPPOOL CHAR(8),         /* POOL NAME                 *
**          10 TIOPSTTB CHAR(1),         /* STATUS OF SLOT            *
**          10 TIOPSLOT PTR(24),         /* SRT ADDRESS OF EMPTY SLOT *
**          10 TIOTFEND CHAR(4);         /* FINAL END OF AN ENTRY OR
**                                          THE TIOT                  *
**
**/* **************************************************************** *
**/*                                                                  *
**/*            U N I T   C O N T R O L   B L O C K                   *
**/*                                                                  *
**/* **************************************************************** *
**/*                                                                  *
**/*  STATUS                                                          *
**/*                                                                  *
**/*      AOS/1 RELEASE 2, AOS/2 RELEASE 1, 03/23/72, LEVEL=10        *
**/*                                                                  *
**/*  METHOD OF ACCESS                                                *
**/*                                                                  *
**/*      PL/S - DCL (UCBPTR,UCBDCPTR) PTR                            *
**/*      BAL  - DSECT CARD SHOULD PRECEDE MACRO CALL.  SYMBOLS IN    *
**/*             COMMON SECTION AND DEVICE DEPENDENT SECTIONS ARE     *
**/*             ADDRESSABLE BY A USING ON UCBOB.  ADDITIONAL USINGS  *
**/*             ARE NECESSARY TO OBTAIN ADDRESSABILITY FOR EACH      *
**/*             EXTENSION OR PREFIX.  THESE ARE AS FOLLOWS -         *
**/*                                                                  *
**/*             DIRECT ACCESS EXTENSION           UCBDA              *
**/*             DIRECT ACCESS EXTENSION 2         UCBDA2             *
**/*             PREFIX TO MAGNETIC TAPE EXTENSION UCBMTPRF           *
**/*             MAGNETIC TAPE EXTENSION           UCBMT              *
**/*             TAPE CARTRIDGE READER EXTENSION   UCBTCR             *
**/*             OPTICAL READER EXTENSION          UCBOR              *
**/*             UNIT RECORD WITH UCS EXTENSION    UCBUCS             *
**/*             3211 SENSE INFORMATION EXTENSION  UCBSNINF           *
**/*             M65 MULTIPROCESSING PREFIX        UCBM65MP           *
**/*                                                                  *
**/*             WHEN LISTING IS SUPPRESSED, YOU CAN DETERMINE WHICH  *
**/*             DSECT A SYMBOL IS IN BY USING THE STATEMENT NUMBER   *
**/*             IN THE DEFN COLUMN IN THE CORSS REFERENCE LISTING.   *
**/*             FOR EXAMPLE, ANY SYMBOL DEFINED BETWEEN THE          *
**/*             STATEMENT NUMBERS FOR UCBDA AND UCBDA2 IS IN THE     *
**/*             UCBDA DSECT.                                         *
**/*                                                                  *
**/*  F.E.'S                                                          *
**/*                                                                  *
**/*      MICROFICHE LISTING - IEFUCBOB                               *
**/*                                                                  *
**/*  DEVELOPERS                                                      *
**/*                                                                  *
**/*      BAL LISTING  - SPECIFY LIST=YES ON MACRO CALL               *
**/*                                                                  *
**/*      FOR INTEGRATION, A LISTING MUST NOT BE REQUESTED UNLESS     *
**/*      YOUR MODULE CREATES THE CSECT.                              *
**/*                                                                  *
**/*  FUNCTION                                                        *
**/*                                                                  *
**/*      A UNIT CONTROL BLOCK                                        *
**/*      INCORPORATING A SYSTEM RESOURCE TABLE                       *
**/*      RECORDS THE STATUS OF                                       *
**/*        A PHYSICAL INPUT OUTPUT DEVICE ADDRESS                    *
**/*      IS CREATED AND INITIALIZED DURING SYSTEM GENERATION         *
**/*      RESIDES IN THE NUCLEUS BELOW 32 K                           *
**/*      POINTS TO A DEVICE TYPE DEPENDENT EXTENSION                 *
**/*        RESIDING HIGHER IN THE NUCLEUS                            *
**/*      IS POINTED TO BY THE UCB LOOKUP TABLE INDEXED BY            *
**/*        A FUNCTION OF THE CHANNEL CONTROL UNIT DEVICE ADDRESS     *
**/*      MAY BE POINTED TO BY TASK INPUT OUTPUT TABLES               *
**/*        AND DATA EXTENT BLOCKS                                    *
**/*      CONTAINS INDICES INTO TABLES FOR                            *
**/*        DEVICE STATISTICS ATTENTION LOGICAL CHANNEL               *
**/*      MAY POINT TO AND BE POINTED TO BY REQUEST QUEUE ELEMENTS    *
**/*                                                                  *
**/*  OUTPUT                                                          *
**/*                                                                  *
**/*      SYSGEN INDEPENDENT COMMON SECTION                           *
**/*        INCLUDING UCBTYP WORD                                     *
**/*      DEVICE DEPENDENT SEGMENT (ONE OF THE FOLLOWING)             *
**/*        DIRECT ACCESS (EXCEPT DATACELL) AND MAGNETIC TAPE         *
**/*        DATACELL (INCLUDING TEN CELL DESCRIPTIONS SUBMAPPED BELOW)*
**/*        UNIT RECORD WITH UNIVERSAL CHARACTER SET                  *
**/*        GRAPHICS                                                  *
**/*        TAPE CARTRIDGE READER AND OPTICAL READER                  *
**/*      CELL DESCRIPTION FOR ONE OF THE TEN CELLS                   *
**/*        IN THE DATACELL DEVICE SEGMENT ABOVE                      *
**/*      UCB EXTENSION (ONE OF THE FOLLOWING)                        *
**/*        DIRECT ACCESS                                             *
**/*        DIRECT ACCESS 2                                           *
**/*        MAGNETIC TAPE AND ITS PREFIX                              *
**/*        TAPE CARTRIDGE READER                                     *
**/*        OPTICAL READER                                            *
**/*        UNIVERSAL CHARACTER SET                                   *
**/*        3211 SENSE INFORMATION                                    *
**/*      M65 MULTIPROCESSING PREFIX                                  *
**/*        (CONTIGUOUSLY PRECEDING COMMON SECTION)                   *
**/*                                                                  *
**/* **************************************************************** *
**/*                                                                  *
**/*     SYSGEN-INDEPENDENT                                           *
**/*     COMMON SECTION                                               *
**/*                                                                  *
**/*                                                                  *
**DECLARE
**  1 UCBOB    BASED(TIOEFSRT),
**                                        /* > UCBOB
**                                                                    *
**/* **************************************************************** *
**/*                                                                  *
**   2 UCBJBNR     CHAR(1),               /* INTERNAL JOB ID          *
**    3 UCBJBNRF BIT(6),                  /* IDENTIFIER OF INITIATOR
**                                           REQUESTING RETAIN OR
**                                           PASSED DATA SET USAGE
**                                           (AOS/2)            ICB347*
**     4 UCBKEY   BIT(4),                 /* JOB PROTECTION KEY (AOS/1)
**                                           (SET FOR RETAIN OR PASS) *
**     4 UCBRSV01 BIT(1),                 /* RESERVED (AOS/1)         *
**     4 UCBRSV02 BIT(1),                 /* RESERVED (AOS/1)         *
**    3 UCBDEM   BIT(1),                  /* DEMOUNT AND RETAIN OR
**                                           PASS  (SET DURING DEVICE
**                                           ALLOC)                   *
**    3 UCBMONT  BIT(1),                  /* MOUNT AND RETAIN OR PASS
**                                           (SET DURING DEVICE
**                                           ALLOC)                   *
**   2 UCBFL5      CHAR(1),               /* FLAGS                    *
**    3 UCBRSV03 BIT(1),                  /* RESERVED                 *
**    3 UCBAF    BIT(1),                  /* ATTENTION FOR THIS CONSOLE
**                                           DEVICE TO BE PROCESSED BY
**                                           COMM. TASK         ICB321*
**     4 UCBAMV   BIT(1),                 /* FOR DIRECT ACCESS DEVICES
**                                           ONLY - IF ONE, IT
**                                           INDICATES A SUCCESSFUL
**                                           COMPARISON CHECKING OF
**                                           THE ACCESS METHOD CATALOG
**                                           AND THE VOLUME CONTENTS
**                                                              ICB437*
**    3 UCBTICBT BIT(1),                  /* CHANNEL END AND/OR DEVICE
**                                           END OR MOUNT CONDITION
**                                           PENDING.  USED ONLY WITH
**                                           PTF.               ICB289*
**    3 UCBVSDR  BIT(1),                  /* DEVICE HAS VARIABLE
**                                           LENGTH SDRS              *
**    3 UCBEXTSN BIT(1),                  /* UCNBRSN CONTAINS LENGTH
**                                           AND  UCBSNADR ADDRESS OF
**                                           SENSE INFO               *
**    3 UCBNALOC BIT(1),                  /* DEVICE NOT ALLOCABLE
**                                           BECAUSE OWNED BY OLTEP   *
**    3 UCBALTCU BIT(1),                  /* DEVICE HAS ALTERNATE CU
**                                           ADDRESS                  *
**    3 UCBALTPH BIT(1),                  /* DEVICE HAS ALTERNATE
**                                           PATH                     *
**   2 UCBID       CHAR(1),               /* UCB ID (FF)              *
**   2 UCBSTAT     CHAR(1),               /* DEVICE STATUS            *
**    3 UCBONLI  BIT(1),                  /* DEVICE ONLINE            *
**    3 UCBCHGS  BIT(1),                  /* DEVICE TO BE VARIED
**                                           OFFLINE                  *
**    3 UCBRESV  BIT(1),                  /* VOLUME RESERVED          *
**    3 UCBUNLD  BIT(1),                  /* UNLOAD PENDING           *
**    3 UCBALOC  BIT(1),                  /* DEVICE ALLOCATED         *
**    3 UCBPRES  BIT(1),                  /* VOLUME PERMANENTLY
**                                           RESIDENT                 *
**    3 UCBSYSR  BIT(1),                  /* SYSTEM RESIDENCE OR
**                                           PRIMARY CONSOLE OR
**                                           ACTIVE CONSOLE           *
**    3 UCBDADI  BIT(1),                  /* STANDARD TAPE LABELS
**                                           VERIFIED OR ALTERNATE
**                                           CONSOLE OR CONSOLE
**                                           STATUS CHANGING          *
**   2 UCBCHA      CHAR(1),               /* CHANNEL ADDRESS FLAGS    *
**    3 UCBHIO   BIT(1),                  /* HALT I/O                 *
**    3 UCBMOD   BIT(1),                  /* STATUS MODIFIER          *
**    3 UCBCHANA BIT(6),                  /* CHANNEL ADDRESS          *
**   2 UCBUA       PTR(8),                /* UNIT ADDRESS             *
**   2 UCBFL1      CHAR(1),               /* FLAGS                    *
**    3 UCBBUSYD BIT(1),                  /* DEVICE BUSY              *
**    3 UCBNOTRD BIT(1),                  /* DEVICE NOT READY         *
**    3 UCBUSING BIT(1),                  /* CHANNEL PROGRAM EXECUTED
**                                           AND NOT YET POSTED
**                                           COMPLETE                 *
**    3 UCBINTER BIT(1),                  /* DEVICE END ERROR  AFTER
**                                           CHANNEL END  (IOB
**                                           INTERCEPT)               *
**    3 UCBNOTRC BIT(1),                  /* CONTROL UNIT BUSY        *
**    3 UCBSTS   BIT(2),                  /* DEVICE STATUS            *
**    3 UCBERR   BIT(1),                  /* ERROR ROUTINE USING
**                                           DEVICE  EXCLUSIVELY      *
**   2 UCBDTI      PTR(8),                /* DEVICE TABLE INDEX       *
**   2 UCBETI      PTR(8),                /* ERROR TABLE INDEX
**                                           (ERROR ROUTINE SUFFIX)   *
**   2 UCBSTI      PTR(8),                /* STATUS TABLE INDEX  (*10
**                                           = STATAB INDEX)          *
**   2 UCBLCI      PTR(8),                /* LOGICAL CHANNEL WORD
**                                           TABLE INDEX (*8 = LCHTAB
**                                           INDEX)                   *
**   2 UCBATI      PTR(8),                /* ATTENTION TABLE (ANTAB)
**                                           INDEX                    *
**    3 *           BIT(8),               /* OPTIONAL JOB ENTRY SYSTEM
**                                           FLAG BYTE          ICB455*
**     4 UCBRSV04 BIT(1),                 /* RESERVED                 *
**     4 UCBRSV05 BIT(1),                 /* RESERVED                 *
**     4 UCBRSV06 BIT(1),                 /* RESERVED                 *
**     4 UCBRSV07 BIT(1),                 /* RESERVED                 *
**     4 UCBRSV08 BIT(1),                 /* RESERVED                 *
**     4 UCBRSV09 BIT(1),                 /* RESERVED                 *
**     4 UCBHALI  BIT(1),                 /* OPTIONAL JOB ENTRY SYSTEM
**                                           ALLOCATION INDICATOR
**                                                              ICB455*
**     4 UCBHPDV  BIT(1),                 /* IF ONE, INDICATES OPTIONAL
**                                           JOB ENTRY SYSTEM PSEUDO
**                                           DEVICE             ICB455*
**   2 UCBWGT      CHAR(1),               /* FLAGS AND CHANNEL MASK   *
**    3 UCBIN    BIT(1),                  /* SYSIN                    *
**    3 UCBOUT   BIT(1),                  /* SYSOUT                   *
**    3 UCBPUB   BIT(1),                  /* ASSUME PUBLIC VOLUME     *
**    3 UCBREW   BIT(1),                  /* REWIND COMMAND           *
**    3 UCBPATH  BIT(4),                  /* INOPERATIVE PATHS        *
**     4 UCBPATH0 BIT(1),                 /* PRIMARY PATH INOPERATIVE *
**     4 UCBPATH1 BIT(1),                 /* OPTIONAL PATH 1
**                                           INOPERATIVE              *
**     4 UCBPATH2 BIT(1),                 /* OPTIONAL PATH 2
**                                           INOPERATIVE              *
**     4 UCBPATH3 BIT(1),                 /* OPTIONAL PATH 3
**                                           INOPERATIVE              *
**   2 UCBNAME     CHAR(3),               /* EBCDIC UNIT NAME         *
**   2 UCBTYP      CHAR(4),               /* DEVICE DESCRIPTION       *
**    3 UCBTBYT1    CHAR(1),              /* MODEL BITS               *
**     4 UCB1FEA0 BIT(1),                 /* BIT 0                    *
**     4 UCB1FEA1 BIT(1),                 /* BIT 1                    *
**     4 UCB1FEA2 BIT(1),                 /* BIT 2                    *
**     4 UCB1FEA3 BIT(1),                 /* BIT 3                    *
**     4 UCB1FEA4 BIT(1),                 /* BIT 4                    *
**     4 UCB1FEA5 BIT(1),                 /* BIT 5                    *
**     4 UCB1FEA6 BIT(1),                 /* BIT 6                    *
**     4 UCB1FEA7 BIT(1),                 /* BIT 7                    *
**    3 UCBTBYT2    CHAR(1),              /* OPTION FLAGS             *
**     4 UCB2OPT0 BIT(1),                 /* FLAG 0                   *
**     4 UCB2OPT1 BIT(1),                 /* FLAG 1                   *
**     4 UCB2OPT2 BIT(1),                 /* FLAG 2                   *
**     4 UCB2OPT3 BIT(1),                 /* FLAG 3                   *
**     4 UCB2OPT4 BIT(1),                 /* FLAG 4                   *
**     4 UCB2OPT5 BIT(1),                 /* FLAG 5                   *
**     4 UCB2OPT6 BIT(1),                 /* FLAG 6                   *
**     4 UCB2OPT7 BIT(1),                 /* FLAG 7                   *
**    3 UCBTBYT3    CHAR(1),              /* CLASS BITS               *
**     4 UCB3TAPE BIT(1),                 /* TAPE                     *
**     4 UCB3COMM BIT(1),                 /* COMMUNICATIONS           *
**     4 UCB3DACC BIT(1),                 /* DIRECT ACCESS            *
**     4 UCB3DISP BIT(1),                 /* DISPLAY                  *
**     4 UCB3UREC BIT(1),                 /* UNIT RECORD              *
**     4 UCB3CHAR BIT(1),                 /* CHARACTER READER         *
**     4 UCBRSV10 BIT(1),                 /* RESERVED                 *
**     4 UCBRSV11 BIT(1),                 /* RESERVED                 *
**    3 UCBTBYT4    CHAR(1),              /* DEVICE CODE              *
**   2 UCBLTS      CHAR(2),               /* LAST REQUEST ELEMENT     *
**   2 UCBSNS      CHAR(2),               /* SENSE INFORMATION FOR
**                                           DEVICES WITHOUT EXTENDED
**                                           SENSE              ICB425*
**    3 UCBFL7      BIT(8),               /* FLAG BYTE FOR DEVICES
**                                           WITH EXTENDED SENSE
**                                                              ICB425*
**     4 UCBASDEP BIT(1),                 /* INDICATES CANCEL KEY
**                                           DEPRESSED ON 3211  ICB425*
**     4 UCBRSV12 BIT(1),                 /* RESERVED                 *
**     4 UCBRSV13 BIT(1),                 /* RESERVED                 *
**     4 UCBRSV14 BIT(1),                 /* RESERVED                 *
**     4 UCBRSV15 BIT(1),                 /* RESERVED                 *
**     4 UCBRSV16 BIT(1),                 /* RESERVED                 *
**     4 UCBRSV17 BIT(1),                 /* RESERVED                 *
**     4 UCBRSV18 BIT(1),                 /* RESERVED                 *
**    3 UCBRSV19    BIT(8),               /* RESERVED BYTE FOR DEVICES
**                                           WITH EXTENDED SENSE
**                                                              ICB425*
**/*                                                                  *
**/* **************************************************************** *
**/*                                                                  *
**/*      DEVICE-DEPENDENT UCB SEGMENTS                               *
**/*                                                                  *
**   2 UCBDEV    BDY(WORD);
**/*                                                                  *
**/* **************************************************************** *
**/*                                                                  *
**/*           DIRECT ACCESS (2300)                                   *
**/*           (EXCEPT DATA CELL)                                     *
**/*           AND MAGNETIC TAPE (2400)                               *
**/*           UCB SEGMENT                                            *
**/*                                                                  *
**DECLARE 1 UCBOBS01
**      BASED(ADDR(UCBDEV)),              /* DEVICE-DEPENDENT SEGMENT
**                                                                    *
**/* **************************************************************** *
**/*                                                                  *
**   2 UCBSENSE    CHAR(4) BDY(WORD),     /* ADDITIONAL SENSE
**                                           INFORMATION FOR DEVICES
**                                           WITH SIX SENSE BYTES     *
**    3 UCBSENSB    PTR(31),              /* SAME AS UCBSENSA BELOW   *
**     4 UCBSENSN    PTR(8),              /* NUMBER OF EXPANDED SENSE
**                                           BYTES                    *
**     4 UCBSENSA    PTR(24),             /* ADDRESS OF EXPANDED
**                                           SENSE INFORMATION        *
**   2 UCBVOLI     CHAR(6),               /* VOLUME SERIAL NUMBER     *
**   2 UCBSTAB     CHAR(1),               /* VOLUME STATUS            *
**    3 UCBBSVL  BIT(1),                  /* NOT SHARABLE             *
**    3 UCBPGFL  BIT(1),                  /* UCB IS OPEN AND IS USED
**                                           AS A PAGE FILE     ICB338*
**    3 UCBPRSRS BIT(1),                  /* THIS DEVICE WAS SPECIFIED
**                                           IN PRESRES BUT WAS NOT
**                                           MOUNTED AT IPL           *
**     4 UCBBALB  BIT(1),                 /* MORE VOLUME LABEL
**                                           PROCESSING               *
**    3 UCBBPRV  BIT(1),                  /* PRIVATE USE              *
**    3 UCBBPUB  BIT(1),                  /* PUBLIC USE               *
**    3 UCBBSTR  BIT(1),                  /* STORAGE USE (DA)  ANSI
**                                           LABEL (MT)               *
**    3 UCBBJLB  BIT(1),                  /* JOBLIB VOLUME (DA)       *
**    3 UCBBNUL  BIT(1),                  /* MCS MOUNT/DEMOUNT MSGS
**                                           ISSUED  (MESSAGE IDS IN
**                                           UCBFSER) (MT)  CONTROL
**                                           VOLUME (DA)              *
**   2 UCBDMCT     CHAR(1),               /* VOLUME USE BYTE          *
**    3 UCBMOUNT BIT(1),                  /* MOUNTED OR REQUEST
**                                           ISSUED   (OFF MEANS
**                                           MOUNT VERIFIED)          *
**    3 UCBDMC   BIT(7),                  /* NUMBER OF OPEN DCBS      *
**   2 UCBVTOC     CHAR(4) BDY (WORD),    /* TTR0 OF VTOC (DA)        *
**    3 UCBFSCT     FIXED(15),            /* DATASET SEQUENCE COUNT
**                                           (MT)                     *
**    3 UCBFSEQ     FIXED(15),            /* DATASET SEQUENCE NUMBER
**                                           (MT)                     *
**   2 UCBFSER     CHAR(8) BDY (WORD),    /* DATASET SERIAL NUMBER
**                                           (MT AFTER OPEN) OR
**                                           MESSAGE IDS (MT BEFORE
**                                           OPEN)  PLUS TWO RESERVED
**                                           BYTES (MT)               *
**    3 UCBSQC      PTR(8),               /* NUMBER OF RESERVE MACROS
**                                           (DA INCLUDING DATACELL)  *
**    3 UCBDVRES    PTR(8),               /* DEVICE RESERVATION
**                                           (SHARED DASD) (DA
**                                           INCLUDING DATACELL)  SET
**                                           TO UCBSQC AFTER GOOD SIO *
**    3 UCBRQESV    FIXED(15),            /* ADDRESS OF RQE TO VERIFY
**                                           VOL SER NUMBER IN UCB
**                                           (SET FROM UCBLTS AFTER
**                                           UNSOLICITED DEVICE END)
**                                           (DA INCLUDING DATACELL)  *
**    3 UCBORSVA    PTR(31),              /* ADDRESS OF DEB FOR FIRST
**                                           USER  ON QUEUE FOR
**                                           DEVICE   (DA INCLUDING
**                                           DATACELL)                *
**     4 UCBFL4      CHAR(1),             /* FLAGS (DA INCLUDING
**                                           DATACELL)                *
**      5 UCBDAV   BIT(5),                /* VOLUME VERIFICATION
**                                           FLAGS                    *
**       6 UCBMNT   BIT(1),               /* VOL SER VERIFIER ISSUED
**                                           MOUNT                    *
**       6 UCBVVRTN BIT(1),               /* VOL SER VERIFIER IN
**                                           CONTROL                  *
**       6 UCBFT    BIT(1),               /* FIRST VERIFIER ENTRY FOR
**                                           VOL                      *
**       6 UCBTCC   BIT(1),               /* ALTERNATE TRACK
**                                           PROCEDURE   HANDLING VOL
**                                           LABEL                    *
**       6 UCBVER   BIT(1),               /* VERIFIER VERIFIED VOL    *
**      5 UCBORCNT BIT(3),                /* NUMBER OF REQUESTS FOR
**                                           DEVICE  FROM FIRST USER
**                                           ON QUEUE                 *
**     4 UCBORSVB    PTR(24),             /* ADDRESS OF DEB FOR FIRST
**                                           USER  ON QUEUE FOR
**                                           DEVICE   (DA INCLUDING
**                                           DATACELL)                *
**   2 UCBSKA      CHAR(8) BDY (WORD),    /* MBBCCHHR OF LAST SEEK
**                                           (DA INCLUDING DATACELL)  *
**    3 UCBXTN      PTR(31),              /* ADDRESS OF UCB EXTENSION
**                                           (MT)                     *
**     4 UCBVOPT     CHAR(1),             /* VOLUME STATISTIC FLAGS   *
