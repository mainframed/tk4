         TITLE ' IKJEFE02 - EXEC PARSE INTERFACE  MODULE'
* GEN(TITLE  'IKJEFE02 - EXEC PARSE INTERFACE MODULE');
         TITLE  'IKJEFE02 - EXEC PARSE INTERFACE MODULE'
* IKJEFE02: PROC (DUMPARM) OPTIONS (DONTSAVE(1,15),REENTRANT);
         LCLA  &T,&SPN                                            0002
.@001    ANOP                                                     0002
IKJEFE02 CSECT ,                                                  0002
         ST    @E,12(0,@D)                                        0002
         ST    @0,20(0,@D)                                        0002
         STM   @2,@C,28(@D)                                       0002
         BALR  @B,0                                               0002
@PSTART  DS    0H                                                 0002
         USING @PSTART+00000,@B                                   0002
         LR    @C,@1                                              0002
         L     @0,@SIZ001                                         0002
         GETMAIN  R,LV=(0)                                        0002
         XR    @C,@1                                              0002
         XR    @1,@C                                              0002
         XR    @C,@1                                              0002
         USING @DATD+00000,@C                                     0002
         L     @0,20(0,@D)                                        0002
         XC    @TEMPS(@L),@TEMPS                                  0002
         ST    @D,@SAV001+4                                       0002
         LA    @F,@SAV001                                         0002
         ST    @F,8(0,@D)                                         0002
         LR    @D,@F                                              0002
* /********************************************************************
* /*                                                                  *
* /* STATUS:                                                          *
* /*    CHANGE LEVEL 000                                              *
* /*    C020000,020500,103500,104000,133000                     Y01676*
* /*    C187000-188000,243500,244000,244500,286500              Y01676*
* /*    C338000,340500,355500,356000,360000,395000              Y01676*
* /*    C396000,470000,483500,670500,671000                     Y01676*
* /*    C191500-192500,512000,512500,524000-525000              Y01676*
* /*                                                                  *
* /*    D356500-359500,538000,538500-634500,671000              Y01676*
* /*                                                                  *
* /*    A020100,133100,133200,182100-182300                     Y01676*
* /*    A183600-183800,192600,244100                            Y01676*
* /*    A286600,286700,340100,343100-343420,355600              Y01676*
* /*    A360020,365600-366333,395200,396100                     Y01676*
* /*    A471100-471488,482600-482900,483100-483420              Y01676*
* /*    A483700,525100,525300,537600,538100                     Y01676*
* /*    A670100,670488,671020-671100,691100                     Y01676*
* /*    A691200-691874,364600-364900                            Y01676*
* /*    A743600-743800,524600,525020-525040,525420              Y01676*
* /*    A525440-525480                                          Y01676*
* /*                                                            20035 *
* /*                                                                  *
* /* FUNCTION:                                                        *
* /*   MODULE IKJEFE02 FIRST CHECKS TO DETERMINE IF THE COMMAND       *
* /*   PROCEDURE WAS INVOKED IMPLICITLY AND THAT NO SYMBOLIC          *
* /*   PARAMETERS WERE DEFINED FOR IT. IF THIS IS THE CASE, A CHECK   *
* /*   IS MADE TO DETERMINE IF THERE WERE ANY SYMBOLIC PARAMETERS     *
* /*   ENTERED ON THE CALLING STATEMENT. IF THERE WERE ENTRIES,       *
* /*   A MESSAGE IS SENT TO THE TERMINAL INDICATING THE ERROR         *
* /*   AND RETURN IS MADE TO E01 TO TERMINATE.                        *
* /*                                                                  *
* /*   IF IT IS AN IMPLICIT EXEC AND SYMBOLIC PARAMETERS WERE         *
* /*   NEITHER DEFINED NOR ENTERED, A RETURN IS MADE TO E01 TO        *
* /*   CONTINUE PROCESSING.                                           *
* /*                                                                  *
* /*   OTHERWISE, THE SIZE OF THE PARSE CONTROL LIST IS CALCULATED,   *
* /*   AND MODULE E03 IS CALLED TO ISSUE A GETMAIN FOR THAT AMOUNT.   *
* /*   A PCL IS THEN BUILT FROM THE ENTRIES IN ATAB (SEE 'TABLES/WORK *
* /*   AREAS'  FOR A DEFINITION OF ATAB). THEN PARSE IS LINKED TO TO  *
* /*   OBTAIN SYMBOLIC PARAMETER VALUES WHICH THE USER MAY HAVE       *
* /*   ENTERED.                                                       *
* /*                                                                  *
* /*   IF THIS IS AN EXPLICIT INVOCATION, PARSE IS LINKED TO          *
* /*   IN ORDER TO OBTAIN THE QUOTE STRING WHICH THE USER ENTERED     *
* /*   AND WHICH CONTAINS THE VALUES FOR THE SYMBOLIC PARAMETERS.     *
* /*   IF PARSE WAS NOT ABLE TO OBTAIN A SYNTACTICALLY CORRECT        *
* /*   Q-STRING, WE GO TO PUT AN ERROR MESSAGE TO THE TERMINAL,       *
* /*   AND RETURN TO E01 TO TERMINATE. IF A QUOTE STRING WAS FOUND,   *
* /*   AND NO SYMBOLIC PARAMETERS WERE DEFINED ON THE PROC STATEMENT, *
* /*   AN ERROR MESSAGE IS PUT TO THE TERMINAL, AND RETURN IS MADE TO *
* /*   E01 TO TERMINATE. IF THERE WAS NO ERROR, THE PDL IS EXAMINED   *
* /*   TO DETERMINE IF THE 'LIST' OR THE 'PROMPT' OPTION WAS EN-Y01676*
* /*   TERED ON THE INVOCATION STATEMENT -IF SO THE LIST OR THE Y01676*
* /*   PROMPT SW IS SET, RESPECTIVELY. NEXT, THE COMMAND BUFFER Y01676*
* /*   OFFSET AND LENGTH FIELDS ARE ALTERED SO THAT THE NEXT TIME     *
* /*   WE LINK TO PARSE IT WILL NOT FIND THE QUOTES. THEN THE PDL IS  *
* /*   FREED.                                                         *
* /*                                                                  *
* /*   IF NO SYMBOLIC PARAMETERS WERE DEFINED IN THE PROC, WE         *
* /*   RETURN TO E01 TO CONTINUE PROCESSING. IF PARMS WERE DEFINED,   *
* /*   PARSE IS LINKED TO AGAIN TO PARSE FOR THE VALUES FOR THE       *
* /*   SYMBOLIC PARAMETERS DEFINED IN THE PROC. IF CORRECT VALUES     *
* /*   COULD NOT BE OBTAINED, AN ERROR MESSAGE IS PUT TO THE          *
* /*   TERMINAL, AND E01 IS RETURNED TO IN ORDER TO TERMINATE.        *
* /*                                                                  *
* /*   NEXT THE FTAB (SEE 'TABLES/WORK AREAS' FOR DESCRIPTION) IS     *
* /*   UPDATED TO REFLECT THE VALUES WHICH THE USER ENTERED.          *
* /*                                                                  *
* /*   THE PDL IS THEN FREED AND WE RETURN TO E01.                    *
* /*                                                                  *
* /* ENTRY POINTS:                                                    *
* /*    IKJEFE02 - ONLY ENTRY POINT.                                  *
* /*                                                                  *
* /* INPUT:                                                           *
* /*    REGISTER 1 - POINTER TO E01DATDF. E01DATDF IS A               *
* /*    STRUCTURE IN IKJEFE01 WHICH CONTAINS VARIABLES                *
* /*    USED BY ALL MODULES OF EXEC. REFER TO ITS DEFINITION          *
* /*    IN 'TABLES/WORK AREAS' FOR DETAILS.                           *
* /*                                                                  *
* /* OUTPUT:                                                          *
* /*    UPDATED ATAB/FTAB.                                            *
* /*    E01SW9 IS SET TO ONE IF AN ERROR OCCURS.                      *
* /*                                                                  *
* /* EXITS,NORMAL:                                                    *
* /*    ALWAYS A RETURN TO IKJEFE01. E01SW9 IS 0.                     *
* /*                                                                  *
* /* EXITS,ERROR:                                                     *
* /*    ALWAYS A RETURN TO IKJEFE01. E01SW9 IS SET TO 1.              *
* /*                                                                  *
* /* TABLES/WORK AREAS:                                               *
* /*    ATAB   (DOUBLE WORD BOUNDARY)                                 *
* /*      ×---------------------------------------------------------× *
* /*   +0 ×ADDRESS OF PREVIOUS BLOCK OF ATAB                        × *
* /*      ×---------------------------------------------------------× *
* /*   +4 ×ADDRESS OF NEXT BLOCK OF ATAB                            × *
* /*      ×---------------------------------------------------------× *
* /*   +8 ×LENGTH OF THIS BLOCK (IN BYTES)                          × *
* /*      ×---------------------------------------------------------× *
* /*   +12×     E                                                   × *
* /*      ×            L                                            × *
* /*      ×                   E                                     × *
* /*      ×                          M                              × *
* /*      ×                                 E                       × *
* /*      ×                                        N                × *
* /*      ×                                               T         × *
* /*      ×                                                      S  × *
* /*      ×---------------------------------------------------------× *
* /*                                                                  *
* /*    ATAB ELEMENT (BYTE BOUNDARY)                                  *
* /*      ×---------------------------------------------------------× *
* /*      ×FOR KEYWORD WITH VALUE AND POSITIONAL PARAMETERS THIS    × *
* /*      ×IS A PTR TO THE CORRESPONDING FTAB ELEMENT               × *
* /*      ×FOR KEYWORD W/O VALUE PARAMETERS A ZERO INDICATES THE    × *
* /*      ×KEYWORD WAS NOT PRESENT ON THE INVOCATION STATEMENT, AND × *
* /*   +0 ×A ONE INDICATES THAT IT WAS PRESENT.                     × *
* /*      ×---------------------------------------------------------× *
* /*   +4 ×FLAG BYTE       ×LENGTH                        ×SYMBOLIC × *
* /*      ×---------------------------------------------------------× *
* /*      ×PARAMETER NAME                                           × *
* /*      ×---------------------------------------------------------× *
* /*         WHERE: FLAG BYTE IS-                                     *
* /*                    BIT 0=1 IF THIS IS A KEYWORD WITH VALUE       *
* /*                    BIT 1=1 IF THIS IS A KEYWORD W/O VALUE        *
* /*                    BIT 2=1 IF THIS IS THE LAST ELMT IN THIS      *
* /*                            BLOCK OF ATAB                         *
* /*                LENGTH BYTE IS-                                   *
* /*                    LENGTH IN BYTES OF THE SYMBOLIC PARAMETER     *
* /*                    NAME WHICH FOLLOWS                            *
* /*                                                                  *
* /*    FTAB   (WORD BOUNDARY)                                        *
* /*      ×---------------------------------------------------------× *
* /*   +0 ×ADDRESS OF PREVIOUS BLOCK OF FTAB                        × *
* /*      ×---------------------------------------------------------× *
* /*   +4 ×ADDRESS OF NEXT BLOCK OF FTAB                            × *
* /*      ×---------------------------------------------------------× *
* /*   +8 ×TOTAL LENGTH OF THIS BLOCK  ×NUMBER OF BYTES IN USE      × *
* /*      ×---------------------------------------------------------× *
* /*   +12×     E                                                   × *
* /*      ×            L                                            × *
* /*      ×                   E                                     × *
* /*      ×                          M                              × *
* /*      ×                                   E                     × *
* /*      ×                                            N            × *
* /*      ×                                                  T      × *
* /*      ×                                                        S× *
* /*      ×---------------------------------------------------------× *
* /*                                                                  *
* /*    FTAB ELEMENT (BYTE BOUNDARY)                                  *
* /*      ×---------------------------------------------------------× *
* /*   +0 ×LENGTH OF THE SYMBOLIC PARAMETER VALUE WHICH FOLLOWS     × *
* /*      ×---------------------------------------------------------× *
* /*      ×VALUE ASSOCIATED WITH A SYMBOLIC PARAMETER NAME IN ATAB  × *
* /*      ×---------------------------------------------------------× *
* /*                                                                  *
* /*    E01DATDF (DOUBLE WORD BOUNDARY)                               *
* /*      ×---------------------------------------------------------× *
* /*   +0 ×DCB FOR DATA SET CONTAINING COMMAND PROCEDURE            × *
* /*      ×---------------------------------------------------------× *
* /*   +88×POINTER USED FOR INDIRECT ADDRESSING                     × *
* /*      ×---------------------------------------------------------× *
* /*   +92×POINTER USED FOR INDIRECT ADDRESSING                     × *
* /*      ×---------------------------------------------------------× *
* /*   +96×NAME OF PDS MEMBER WHICH CONTAINS THE PROC               × *
* /*      ×---------------------------------------------------------× *
* /*  +104×DECB FOR THE READ MACRO                                  × *
* /*      ×---------------------------------------------------------× *
* /*  +124×POINTER TO INPUT RECORD FROM PROC                        × *
* /*      ×---------------------------------------------------------× *
* /*  +128×NO. OF BYTES ON INPUT RCD WHICH HAVE NOT BEEN PROCESSED  × *
* /*      ×---------------------------------------------------------× *
* /*  +132×NO. OF POSITIONAL PARAMETERS FOUND ON THE PROC STATEMENT × *
* /*      ×---------------------------------------------------------× *
* /*  +136×WORK AREA - ALSO USED TO PASS ADDRESS OF CORE TO BE FREED× *
* /*      ×  BY MODULE E03                                          × *
* /*      ×---------------------------------------------------------× *
* /*  +140×MINIMUM AMOUNT OF CORE NEEDED FROM A GETMAIN             × *
* /*      ×---------------------------------------------------------× *
* /*  +144×MAXIMUM AMOUNT OF CORE NEEDED FROM A GETMAIN             × *
* /*      ×---------------------------------------------------------× *
* /*  +148×ADDRESS OF CORE OBTAINED VIA GETMAIN                     × *
* /*      ×---------------------------------------------------------× *
* /*  +152×AMOUNT OF CORE OBTAINED VIA GETMAIN                      × *
* /*      ×---------------------------------------------------------× *
* /*  +156×ADDRESS OF SUBPOOL 78 CORE WHICH BELONGS TO US           × *
* /*      ×---------------------------------------------------------× *
* /*  +160×LENGTH OF SUBPOOL 78 CORE WHICH BELONGS TO US            × *
* /*      ×---------------------------------------------------------× *
* /*  +164×WORK AREA                                                × *
* /*      ×---------------------------------------------------------× *
* /*  +168×NO. OF POSITIONAL PARMS SPECIFIED ON THE PROC STMT       × *
* /*      ×---------------------------------------------------------× *
* /*  +172×POINTER TO CURRENT BLOCK OF ATAB                         × *
* /*      ×---------------------------------------------------------× *
* /*  +176×POINTER TO CURRENT ELEMENT OF ATAB                       × *
* /*      ×---------------------------------------------------------× *
* /*  +180×POINTER TO CURRENT BLOCK OF FTAB                         × *
* /*      ×---------------------------------------------------------× *
* /*  +184×POINTER TO CURRENT ELEMENT OF FTAB                       × *
* /*      ×---------------------------------------------------------× *
* /*  +188×NO. OF BYTES IN VALUE PART OF KEYWORD WITH VALUE         × *
* /*      ×---------------------------------------------------------× *
* /*  +192×NO. OF KEYWORD W/O VALUE PARMS DEFINED IN PROC STMT      × *
* /*      ×---------------------------------------------------------× *
* /*  +194×NO. OF KEYWORD WITH VALUE PARMS DEFINED IN PROC STMT     × *
* /*      ×---------------------------------------------------------× *
* /*  +196×TOTAL BYTES IN ALL KEYWORD W/O VALUE PARMS               × *
* /*      ×---------------------------------------------------------× *
* /*  +198×TOTAL BYTES IN ALL KEYWORD WITH VALUE PARMS              × *
* /*      ×---------------------------------------------------------× *
* /*  +200×WORK AREA                                                × *
* /*      ×---------------------------------------------------------× *
* /*  +202×SWITCHES                                                 × *
* /*      × BIT 0  - SET TO ONE WHEN PROCEESING IMPLICIT EXEC       × *
* /*      × BIT 1  - SET TO ONE WHEN E03 IS CALLED TO READ FIRST    × *
* /*      ×          LINE OF PROC                                   × *
* /*      × BIT 2  - SET TO ONE IF PROCEDURE HAS NO PROC STATEMENT  × *
* /*      × BIT 3  - SET TO ONE IF NO PROC STMT AND FIRST LINE OF   × *
* /*      ×          PROC IS NOT EMPTY                              × *
* /*      × BIT 4  - SET TO ONE WHEN AN ABEND HAS OCCURRED          × *
* /*      × BIT 5  - SET TO ONE WHEN THE PROMPT OPTION WAS    Y01676× *
* /*      ×          SPECIFIED ON THE INVOCATION STATEMENT    Y01676× *
* /*      × BIT 6  - SET TO ONE WHEN E03 IS CALLED TO READ A RCD    × *
* /*      ×          OTHER THAN THE FIRST                           × *
* /*      × BIT 7  - SET TO ONE IF RECORD FORMAT IS VARIABLE        × *
* /*      × BIT 8  - TERMINATION SWITCH (SET TO ONE IF PROC IS      × *
* /*      ×          NON-EXECUTABLE)                                × *
* /*      × BIT 9  - SET TO ONE IF E03 HAS BEEN CALLED FOR A GETMAIN× *
* /*      × BIT 10 - SET TO ONE WHEN DATA SET IS NULL               × *
* /*      × BIT 11 - SET TO ONE WHEN CORE HAS BEEN OBTAINED FROM    × *
* /*      ×          SUBPOOL 78                                     × *
* /*      × BIT 12 - SET TO ONE WHEN E03 HAS BEEN CALLED TO DO A    × *
* /*      ×          FREEMAIN                                       × *
* /*      × BIT 13 - UNUSED                                         × *
* /*      × BIT 14 - SET TO ONE WHEN THE MINIMUM AMOUNT OF CORE     × *
* /*      ×          NEEDED COULD NOT BE OBTAINED                   × *
* /*      × BIT 15 - SET TO ONE WHEN THE LIST OPTION WAS SPECIFIED  × *
* /*      ×          ON THE INVOCATION STATEMENT                    × *
* /*      ×---------------------------------------------------------× *
* /*  +204×WORK AREA                                                × *
* /*      ×---------------------------------------------------------× *
* /*  +216×POINTER TO CURRENT ATAB ELEMENT - 1                      × *
* /*      ×---------------------------------------------------------× *
* /*  +220×POINTER TO FTAB ELEMENT - 1                              × *
* /*      ×---------------------------------------------------------× *
* /*  +224×POINTER TO FIRST INPUT BUFFER                            × *
* /*      ×---------------------------------------------------------× *
* /*  +228×POINTER TO SECOND INPUT BUFFER                           × *
* /*      ×---------------------------------------------------------× *
* /*  +232×POINTER TO CMD PROCESSOR PARAMETER LIST                  × *
* /*      ×---------------------------------------------------------× *
* /*  +236×PARAMETERS TO BE PASSED TO STAE EXIT ROUTINE             × *
* /*      ×---------------------------------------------------------× *
* /*  +248×POINTER TO PARSE CONTROL LIST                            × *
* /*      ×---------------------------------------------------------× *
* /*  +252×STORAGE FOR SERVICE ROUTINE CONTROL BLOCK                × *
* /*      ×---------------------------------------------------------× *
* /*  +276×ECB FOR SERVICE ROUTINES                                 × *
* /*      ×---------------------------------------------------------× *
* /*  +280×AREA FOR HOLDING RETURN CODES INTERNAL TO EXEC           × *
* /*      ×---------------------------------------------------------× *
* /*  +284×POINTER TO FIRST BLOCK OF ATAB                           × *
* /*      ×---------------------------------------------------------× *
* /*  +288×END OF CURRENT INPUT BLOCK + 1                           × *
* /*      ×---------------------------------------------------------× *
* /*  +292×POINTER TO START OF RECORD CURRENTLY BEING PROCESSED     × *
* /*      ×---------------------------------------------------------× *
* /*  +296×LENGTH OF DYNAMIC PORTION OF MSG TO BE PUT TO TERMINAL   × *
* /*      ×---------------------------------------------------------× *
* /*  +297×ADDRESS OF DYNAMIC PORTION OF MSG TO BE PUT TO TERMINAL  × *
* /*      ×---------------------------------------------------------× *
* /*  +300×ID NUMBER OF FIRST LEVEL MSG TO BE PUT TO TERMINAL       × *
* /*      ×---------------------------------------------------------× *
* /*  +302×ID NUMBER OF SECOND LEVEL MSG TO BE PUT TO TERMINAL      × *
* /*      ×---------------------------------------------------------× *
* /*  +304×POINTER TO THE PARSE DESCRIPTOR LIST                     × *
* /*      ×---------------------------------------------------------× *
* /*  +308×AREA FOR SAVING THE ORIGINAL LENGTH OF THE COMMAND BUFFER× *
* /*      ×---------------------------------------------------------× *
* /*  +310×TOTAL BYTES IN ALL POSITIONAL PARAMETERS           Y01676× *
* /*      ×---------------------------------------------------Y01676× *
* /*  +312××                                                    Y01676*
* /*                                                                  *
* /*                                                                  *
* /*                                                                  *
* /* ATTRIBUTES:                                                      *
* /*    REENTRANT                                                     *
* /*                                                                  *
* /*                                                                  *
* /* NOTES:                                                           *
* /*    CONSTANTS BEGIN WITH THE LETTERS 'KON' FOLLOWED BY            *
* /*    THE VALUE OF THE CONSTANT IF IT IS EITHER A DECIMAL           *
* /*    OR EBCDIC CONSTANT. IF IT IS A HEX CONSTANT, THE 'KON'        *
* /*    IS FOLLOWED BY 'X' AND THE VALUE OF THE                       *
* /*    CONSTANT.                                                     *
* /*    CHARACTER CODE DEPENDENCIES - NONE                           */
* /********************************************************************
*         GEN;
&SPN     SETA  1
         DS    0H
*         DCL   DUMPARM        FIXED(31);     /* DUMMY PARAMETER USED
*                                                  SO THAT BSL WILL
*                                                  NOT USE REG 1      *
*         DCL   R1   REG(1)    PTR(31);       /* REGISTER 1           *
* /********************************************************************
* /*       CONTAINS THE ADDR OF E01DATDF ON ENTRY. USED               *
* /*       IN THE MODULE TO PASS THE ADDR OF PARMS TO                 *
* /*       PARSE AND IKJEFE03. ALSO TO HOLD THE ADDR OF               *
* /*       THE CURRENT BLOCK OF FTAB.                                 *
* /********************************************************************
*
*         DCL   R2   REG(2)    PTR(31);       /* REGISTER 2           *
* /********************************************************************
* /*       USED AS A GENERAL WORK REG AND TO HOLD THE                 *
* /*       THE ADDRESS OF THE CURRENT ELEMENT OF FTAB.                *
* /********************************************************************
*
*         DCL   R3   REG(3)    PTR(31);       /* REGISTER 3           *
* /********************************************************************
* /*       USED TO COMMUNICATE WITH IKJEFE03 ON FREEMAINS             *
* /********************************************************************
*
*         DCL   R4   REG(4)    PTR(31);
* /********************************************************************
* /*       USED FOR COMMUNICATION WITH IKJEFE03 ON GETMAINS.          *
* /*       AND FOR HOLDING THE ADDRESS OF THE CURRENT                 *
* /*       BLOCK OF ATAB.                                             *
* /********************************************************************
*
*         DCL   R5   REG(5)    PTR(31);       /* REGISTER 5           *
* /********************************************************************
* /*       USED TO HOLD THE ADDRESS OF THE CURRENT ELEMENT            *
* /*       OF ATAB.                                                   *
* /********************************************************************
*
*         DCL   R6   REG(6)    PTR(31);
* /********************************************************************
* /*       USED AS THE BASE REGISTER FOR E01DATDF DURING              *
* /*       EXECUTION OF IKJEFE02.                                     *
* /********************************************************************
*
*         DCL   R15  REG(15)   PTR(31);       /* REGISTER 15          *
* /********************************************************************
* /*       USED TO CHECK RETURN CODES FROM PARSE.                     *
* /********************************************************************
*
*         DCL   KON0      FIXED(15) STATIC INIT(0);/* CONSTANT        *
*                                                  /* DECIMAL 0       *
*         DCL   KON1      FIXED(15) STATIC INIT(1);/* CONSTANT        *
*                                                  /* DECIMAL 1       *
*         DCL   KON2      FIXED(15) STATIC INIT(2);/* CONSTANT        *
*                                                  /* DECIMAL 2       *
*         DCL   KON3      FIXED(15) STATIC INIT(3);/* CONSTANT        *
*                                                  /* DECIMAL 3       *
*         DCL   KON4      FIXED(15) STATIC INIT(4);/* CONSTANT        *
*                                                  /* DECIMAL 4       *
*         DCL   KON6      FIXED(15) STATIC INIT(6);/* CONSTANT        *
*                                                  /* DECIMAL 6       *
*         DCL   KON7      FIXED(15) STATIC INIT(7);/* CONSTANT        *
*                                                  /* DECIMAL 7
*         DCL   KON8      FIXED(15) STATIC INIT(8);/* CONSTANT        *
*                                                  /* DECIMAL 8
*         DCL   KON10      FIXED(15) STATIC INIT(10);
*                                                  /* CONSTANT        *
*                                                  /* DECIMAL 10
*         DCL   KON11      FIXED(15) STATIC INIT(11);
*                                                  /* CONSTANT        *
*                                                  /* DECIMAL 11
*         DCL   KON12      FIXED(15) STATIC INIT(12);
*                                                  /* CONSTANT        *
*                                                  /* DECIMAL 12
*         DCL   KON13      FIXED(15) STATIC INIT(13);
*                                                  /* CONSTANT        *
*                                                  /* DECIMAL 13
*         DCL   KON16      FIXED(15) STATIC INIT(16);
*                                                  /* CONSTANT        *
*                                                  /* DECIMAL 16      *
*         DCL   KON20      FIXED(15) STATIC INIT(20);
*                                                  /* CONSTANT        *
*                                                  /* DECIMAL 20      *
*         DCL   KON21      FIXED(15) STATIC INIT(21);
*                                                  /* CONSTANT  DECIMAL
*                                                     21        Y01676*
*         DCL   KON24      FIXED(15) STATIC INIT(24);
*                                                  /* CONSTANT        *
*                                                  /* DECIMAL 24      *
*         DCL   KON26      FIXED(15) STATIC INIT(26);/* CONSTANT
*                                                     DECIMAL   Y01676*
*                                                  /* 26        Y01676*
*         DCL   KON34      FIXED(15) STATIC INIT(34);
*                                                  /* CONSTANT        *
*                                                  /* DECIMAL 34
*         DCL   KON35      FIXED(15) STATIC INIT(35);
*                                                  /* CONSTANT        *
*                                                  /* DECIMAL 35
*         DCL   KON58      FIXED(15) STATIC INIT(58);
*                                                  /* CONSTANT DECIMAL
*                                                     58        Y01676*
*         DCL   KON54      FIXED(15) STATIC INIT(54);
*                                                  /* CONSTANT        *
*                                                  /* DECIMAL 54      *
*         DCL   KON57      FIXED(15) STATIC INIT(57);
*                                                   /* CONSTANT       *
*                                                  /* DECIMAL 57      *
*         DCL   KON224      FIXED(15) STATIC INIT(224); /* CONSTANT
*                                                     DECIMAL
*                                                        224    Y01676*
*         DCL   KQUOTE  CHAR(1) INIT('7D'X);  /* QUOTE CONSTANT Y01676*
*         DCL 1 KONSTRUC  STATIC,             /* HEXADECIMAL CONSTANTS*
*               2 KONX00  CHAR(1)  INIT('00'X),    /* CONSTANT        *
*                                                  /* HEX '00'        *
*               2 KONX20  CHAR(1)  INIT('20'X),    /* CONSTANT        *
*                                                  /* HEX '20'        *
*               2 KONX23  CHAR(1)  INIT('23'X),    /* CONSTANT        *
*                                                  /* HEX '23'        *
*               2 KONX40  CHAR(1)  INIT('40'X),    /* CONSTANT        *
*                                                  /* HEX '40'        *
*               2 KONX80  CHAR(1)  INIT('80'X),    /* CONSTANT        *
*                                                  /* HEX '80'        *
*               2 KONXC0  CHAR(1)  INIT('C0'X),    /* CONSTANT        *
*                                                  /* HEX 'C0'        *
*               2 KONXFF  CHAR(1)  INIT('FF'X);    /* CONSTANT        *
*                                                  /* HEX 'FF'        *
*         DCL 1  E01DATDF  BDY(DWORD)         /* MAJOR STRUCTURE OF   *
*                            BASED(R6),       /*   USED BY ALL FOUR   *
*                                             /*   MODULES            *
*                2 DCBAR     CHAR(88)  BDY(DWORD),
*                                                  /* LIVE DCB AREA   *
*
*                2 ADPTR1    PTR(31),              /* PTR USED FOR
*                                                      INDIRECT ADDRS *
*                2 ADPTR2    PTR(31),               /* FOR INDIRECT
*                                                         ADDRESSING  *
*                2 MMNAMAR   BDY(WORD) CHAR(8),
*                                                  /* MEMBER NAME     *
*                2  RDECB   BDY(WORD) CHAR(20),
*                                                  /* STORAGE FOR DECB*
*                   3 *        CHAR(6),        /* FILLER              *
*                   3 DECLNGTH FIXED(15),      /* LENGTH OF BLOCK READ*
*                   3 *        CHAR(8),        /* FILLER              *
*                   3 DECIOBPT PTR(31),        /* POINTER TO THE IOB  *
*                2 LINPTR1   PTR(31),              /* ADDR OF INPUT   *
*                2 EOLCNT    FIXED(31),            /* BYTES REMAINING
*                                                       IN   LINE     *
*                2 POSCNT    FIXED(31),      /* NUMBER OF POSITIONAL
*                                                PARAMETERS FOUND     *
*                2 TSTLNG    FIXED(31),      /* WORK AREA - USED FOR */
*                  3 TSTLNGC   CHAR(4),       /*  ALIGNING TABLE ENTRY*
*                2 GMNMIN    FIXED(31),      /* MINIMUM AMOUNT OF CORE
*                                                 TO BE GOTTEN        *
*                2 GMNMAX    FIXED(31),      /* MAXIMUM AMOUNT OF CORE
*                                                 TO BE GOTTEN        *
*                2 ADDGMN    PTR(31),        /* ADDRESS OF GOTTEN CORE*
*                2 AMTGMN    FIXED(31),      /*  AMOUNT OF CORE GOTTEN*
*                2 SP78ADDR  PTR(31),        /* PTR TO SUBPOOL78 CORE*/
*                2 SP78LNGT  PTR(31),        /* LENGTH OF SUBPOOL78  */
*                                            /*   CORE               */
*                2 RDXCNV  FIXED(31),        /* WORK AREA FOR        */
*                  3  *              CHAR(3),      /*  CONVERTING BASE*
*                  3  DDIG           CHAR(1),      /* OF NO. PARMS    *
*                2 POSSPC    FIXED(31),      /* NUMBER OF POSITIONAL
*                                                  PARAMERS SPECIFIED *
*                2 ATABIND   PTR(31),        /*  PTR TO START OF
*                                                      CURRENT BLOCK OF
*                                                      ATAB           *
*                2 ATABCUR   PTR(31),        /*  PTR TO CURRENT
*                                                      ELEMENT OF ATAB*
*                2 FTABIND   PTR(31),        /*  PTR TO START OF
*                                                     CURRENT BLOCK OF
*                                                     FTAB            *
*                2 FTABCUR   PTR(31),        /*  PTR TO CURRENT
*                                                     ELEMENT OF ATAB *
*                2 VALCNT    FIXED(31),      /*     NUMBER OF BYTES IN
*                                                     VALUE OF KEYWORD
*                                                     WITH VALUE      *
*                2 KWOCNT    FIXED(15),       /* NUMBER OF KWRD W/O   *
*                                             /*   VALUE PARMS        *
*                2 KWWCNT    FIXED(15),       /* NUMBER OF KWRD WITH  *
*                                             /*   VALUE PARMS        *
*                2 KWOBYT    FIXED(15),       /*   SIZE OF KWRD W/O   *
*                                             /*   VALUE PARMS        *
*                2 KWWBYT    FIXED(15),       /*   SIZE OF KWRD W/O   *
*                                             /*   VALUE PARMS        *
*                2 CNVA   FIXED(15),          /*WORKAREA FOR UNALIGNED*
*                  3 CNVC   CHAR(2),          /*  ARITHMETIC ITEMS    *
*                2 E01BINSW BDY(HWORD),       /*  BINARY SWITCHES     *
*                  3 E01SW1 BIT(1),           /* SWITCH 1             *
*                                             /* SET TO ONE WHEN
*                                                      PROCESSING
*                                                       IMPLICIT EXEC *
*                  3 E01SW2 BIT(1),            /* SWITCH 2            *
*                                              /* SET TO ONE WHEN
*                                                      IKJEFE03 IS CALL
*                                                       ED TO READ 1ST
*                                                        LINE         *
*                  3 E01SW3 BIT(1),             /* SWITCH 3           *
*                                               /*SET TO ONE IF THE
*                                                     PROCEDURE DOES
*                                                      NOT HAVE A PROC
*                                                       STATEMENT     *
*                  3 E01SW4 BIT(1),              /* SWITCH 4          *
*                                                /*SET TO ONE IF 1ST
*                                                     LINE IS NOT EMPTY
*                                                                     *
*                  3 E01SW5 BIT(1),              /* SWITCH 5          *
*                                                /*SET TO ONE ON AN
*                                                     ABEND           *
*                  3 E01SW6 BIT(1),              /* SWITCH 6          *
*                                                /*SET TO ONE WHEN
*                                                     THE PROMPT OPTION
*                                                      WAS SPECIFIED ON
*                                                      THE INVOCATION
*                                                     STATEMENT Y01676*
*                  3 E01SW7 BIT(1),              /* SWITCH 7          *
*                                                /*SET TO ONE WHEN
*                                                   IKJEFE03 IS CALL-
*                                                      ED TO READ LINE
*                                                       OTHER THAN 1ST*
*                  3 E01SW8 BIT(1),              /* SWITCH 8          *
*                                                /*SET TO ONE IF RCD
*                                                     FMT IS VARIABLE *
*                  3 E01SW9 BIT(1),              /* SWITCH 9          *
*                                                /*SET TO ONE IF PROC
*                                                     CANNOT BE EXECUT-
*                                                      ED             *
*                  3 E01SW10 BIT(1),             /* SWITCH 10         *
*                                                /* SET TO ONE WHEN
*                                                     IKFEFE03 HAS BEEN
*                                                     CALLED TO DO A
*                                                     GETMAIN         *
*                  3 E01SW11 BIT(1),             /* SWITCH 11         *
*                                                /*SET TO ONE WHEN
*                                                     DATA SET HAS BEEN
*                                                        CLOSED       *
*                  3 E01SW12 BIT(1),             /* SWITCH 12         *
*                                                /*SET TO ONE WHEN
*                                                     CORE HAS BEEN
*                                                      OBTAINED FROM SP
*                                                       78            *
*                  3 E01SW13 BIT(1),             /* SWITCH 13         *
*                                                /* SET TO ONE WHEN
*                                                     IKFEFE03 HAS BEEN
*                                                     CALLED TO DO A
*                                                     FREEMAIN        *
*                  3 E01SW14 BIT(1),             /* SWITCH 14         *
*                                                /*SET TO ONE WHEN
*                                                     SP78 OVFLOW HAS
*                                                      CAUSED SP0 TO BE
*                                                        OBTAINED     *
*                  3 E01SW15 BIT(1),          /* SET TO ONE WHEN THE  *
*                                             /* MINIMUM AMT OF CORE  *
*                                             /*   COULD NOT BE GOTTEN*
*                  3 E01SW16 BIT(1),             /* SWITCH 16         *
*                2 REGSAV(3) FIXED(31),          /* SAVE AREA         *
*                2 LATAB   PTR(31),              /* PTR TO PREVIOUS ATA
*                                                ELEMENT              *
*                2 LFTAB   PTR(31),           /* PTR TO PREVIOUS FTAB
*                                                ELEMENT              *
*                2 BFAPTR  FIXED(31),         /* POINTER TO INPUT BFR *
*                2 BFBPTR  PTR(31),           /* POINTER TO INPUT BFR *
*                2 CPPLPTR   PTR(31),         /*  ADDRESS OF CPPL     *
*                2 STPRM(3)  FIXED(31),
*                2 PPLPTR PTR(31),            /* POINTER TO CONTROL   *
*                2 CBCOR CHAR(24),            /* STORAGE FOR SERVICE  *
*                                             /*  ROUTINE CONTROL BLCK*
*                                             /*   BLOCK FOR SERVICE  *
*                                             /*   ROUTINES           *
*                                             /*     TOR LIST         *
*                2 SRECB  FIXED(31),          /*   SERV ROUT ECB      *
*                2 RETCDAR   FIXED(31),       /*    AREA FOR RETURN   *
*                                             /*      CODE            *
*               2 ABLK1     PTR(31),         /* PTR TO FIRST BLOCK    *
*                                            /*   OF ATAB            */
*                2 EOB       PTR(31),         /* END OF CURRENT INPUT *
*                                             /*   BLOCK + 1          *
*                2 RCDST     PTR(31),         /* PTR TO START OF CUR- *
*                                             /*   RENT RECORD        *
*                2 VARSGLNG  CHAR(1),         /* LENGTH OF VARIABLE   *
*                2 VARSGADR  PTR(24),         /* ADDRESS OF VARIABLE  *
*                2 VARSGLN2  CHAR(1),         /*  LENGTH OF VARIABLE  *
*                                             /*    PART OF MSG TO BE *
*                                             /*    PUT OUT           *
*                2 VARSGAD2  PTR(24),         /*  ADDRESS OF VARIABLE *
*                                             /*    PART OF MSG TO BE *
*                                             /*    PUT OUT           *
*                2 LVL1NO    FIXED(15),       /* NUMBER OF FIRST LEVEL*
*                                             /*   MESSAGE            *
*                2 LVL2NO    FIXED(15),       /*NUMBER OF SECOND LEVEL*
*                                             /*    MESSAGE           *
*                2 PDLPTR    PTR(31),         /* POINTER TO THE PARSE *
*                                             /*   DESCRIPTOR LIST    *
*               2 DRDNPTR BDY(WORD),          /* AREA FOR DSNAME      *
*                 3 DSNARLNG FIXED(15),       /* LENGTH OF DSNAME     *
*                   4 DSNARLCH CHAR(2),       /*                      *
*                 3 DSNAMAR  CHAR(44),        /* DSNAME               *
*                2 CBUFLSAV  FIXED(15),       /* SAVE AREA FOR CMD BFR*
*                 3 CBUFLSAC CHAR(2),         /*    LENGTH      Y01676*
*                2 POSBYT FIXED(15);          /* SIZE OF POSITIONAL
*                                                PARAMETERS     Y01676*
** /* *************************************************************** *
** /* THE COMMAND PROCESSOR PARAMETER LIST (CPPL) IS A LIST OF        *
** /* ADDRESSES PASSED FROM THE TMP TO THE CP VIA REGISTER 1          *
** /* *************************************************************** *
** DECLARE
**   1 CPPL BASED(CPPLPTR),
**    2 CPPLCBUF PTR(31),             /* PTR TO COMMAND BUFFER        *
**    2 CPPLUPT  PTR(31),             /* PTR TO UPT                   *
**    2 CPPLPSCB PTR(31),             /* PTR TO PSCB                  *
**    2 CPPLECT  PTR(31);             /* PTR TO ECT                   *
**
*         DCL   ECTPTR   PTR(31)  BASED(ADDR(CPPLECT));
*                                             /* POINTER TO THE ECT   *
** DECLARE
**   1 ECT      BASED(ECTPTR),
** /* *************************************************************** *
** /* THE ENVIRONMENT CONTROL TABLE (ECT) IS BUILT BY THE TMP AND     *
** /* STORED IN A NON-SHARED SUBPOOL. ITS FIELDS CAN BE MODIFIED      *
** /* BY A CP OR SERVICE RTN BUT NOT FREED.                           *
** /* *************************************************************** *
**
**    2 ECTRCDF  CHAR(1),             /* HIGH ORDER BIT INDICATES CP
**                                       ABENDED                      *
**    2 ECTRTCD PTR(24),              /* RETURN CODE FROM LAST CP OR
**                                       ABEND CODE IF ECTRCDF IS SET *
**    2 ECTIOWA  PTR(31),             /* ADDR I/O SRV RTNS WORK AREA  *
**    2 ECTMSGF  CHAR(1),             /* HIGH ORDER BIT SET MEANS
**                                       DELETE SECOND LEVEL MSG      *
**    2 ECTSMSG  PTR(24)  BDY(BYTE),
**                                    /* ADDR OF SECOND LEVEL MSG
**                                       CHAIN                        *
**    2 ECTPCMD  CHAR(8),             /* PRIMARY COMMAND NAME         *
**    2 ECTSCMD  CHAR(8),             /* SUBCOMMAND NAME              *
**    2 ECTSWS   CHAR(1),             /* 4 BYTES OF SWITCHES          *
**     3 ECTNOPD  BIT(1),             /* 0 BIT ON= NO OPERANDS EXIST
**                                       IN CMD BUFFER                *
**     3 *        BIT(1),             /* RESERVED                     *
**     3 ECTATRM  BIT(1),             /* CP TERMINATED BY TMP DETACH
**                                       W/ STAE EQU                  *
**     3 ECTLOGF  BIT(1),             /* LOGON/OFF REQUESTED TMP TO
**                                       LOGOFF USER BITS             *
**     3 ECTNMAL BIT(1),              /* NO USER MSGS TO BE RECVED AT
**                                       LOGON                        *
**     3 ECTNNOT BIT(1),              /* NO BRDCST NOTICES TO BE RECVED
**                                       LOGON                        *
**     3 ECTBKGRD BIT(1),             /* BACKGROUND MODE              *
**     3 *        BIT(1),             /* RESERVED                     *
**    2 ECTDDNUM PTR(24),             /*COUNTER FOR TEMPORARY DDNAMES *
**    2 ECTUSER  PTR(31),             /*RESERVED FOR INSTALLATION USE *
**    2 ECTBKPB  PTR(31);             /*ADDR OF BACKGROUND PARM BLOCK *
**
*         DCL   CBUFPTR        PTR(31) BASED(ADDR(CPPLCBUF));
*                                             /* POINTER TO CMD BUFFER*
*         DCL 1 CBUF BASED(CBUFPTR),          /* NAME OF TABLE        *
*               2 CBUFLNG PTR(16),            /* TOTAL LENGTH OF CBUF *
*               2 CBUFOFF PTR(16),            /* CURRENT DATA FIELD   *
*                                             /*   OFFSET             *
*               2 CBUFDATA CHAR(1);           /* VAR LENGTH DATA FIELD*
** DECLARE
**   1 PPL      BASED(PPLPTR),
** /* *************************************************************** *
** /* THE PARSE PARAMETER LIST (PPL) IS A LIST OF ADDRESSES PASSED    *
** /* FROM THE INVOKER TO PARSE VIA REGISTER 1                        *
** /* *************************************************************** *
**
**
**
**
**
**
**
**
**
**
**    2 PPLUPT   PTR(31),             /* PTR TO UPT                   *
**    2 PPLECT   PTR(31),             /* PTR TO ECT                   *
**    2 PPLECB   PTR(31),             /* PTR TO CP'S ECB              *
**    2 PPLPCL   PTR(31),             /* PTR TO PCL                   *
**    2 PPLANS   PTR(31),             /* PTR TO ANS PLACE             *
**    2 PPLCBUF  PTR(31),             /* PTR TO CMD BUFFER            *
**    2 PPLUWA   PTR(31);             /* PTR TO USER WORK AREA (FOR
**                                       VALIDITY CK RTNS)            *
**
*         DCL   TEM01          FIXED(31);     /* WORK AREA            *
*         DCL   1 ATAB    BDY(WORD) BASED(ATABIND),
*                                             /*   ARGUMENT TABLE     *
*                 2 ATABLST    PTR(31),       /*PTR TO PREV ATAB BLOCK*
*                                             /* - ZERO IF THIS IS THE*
*                                             /*     FIRST BLOCK      *
*                 2 ATABNXT    PTR(31),       /*PTR TO NEXT ATAB BLOCK*
*                                             /*- ZERO IF THIS IS LAST*
*                 2 ATABLNG    FIXED(31);     /* LENGTH OF THIS BLOCK *
*                                             /*  OF ATAB             *
*         DCL   1 ATABELMT  BDY(WORD)  BASED(ATABCUR),  /* ELEMENTS   *
*                    3 FTABPTR CHAR(4),       /* PTR TO CORRESPONDING *
*                                             /*  FTAB ELEMENT        *
*                    3 ATABFLGS   CHAR(1),    /* FLAGS FOR ATAB       *
*                                             /*BIT 0 = KWORD W. VALUE*
*                                             /*BIT 1 = KWORD WO VALUE*
*                                             /*  BIT 2 = LAST ENTRY  *
*                    3 ATABELNC CHAR(2),
*                                             /* LENGTH OF SYMBOLIC   *
*                                             /*  PARAMETER           *
*                    3 ATABDAT    CHAR(256);
*                                             /* SYMBOLIC PARAMETER   *
*         DCL   1 FTAB    BDY(WORD) BASED(FTABIND),
*                                             /* FUNCTION TABLE       *
*                 2 FTABLST    PTR(31),       /* PTR TO PREVIOUS FTAB *
*                                            /*BLOCK - ZERO IF THIS IS*
*                                             /*  FIRST               *
*                 2 FTABNXT    PTR(31),       /*PTR TO NEXT FTAB BLOCK*
*                                             /* - ZERO IF THIS IS THE*
*                                             /*     LAST             *
*                 2 FTABLNG    FIXED(15),     /* LENGTH OF THIS BLOCK *
*                                             /*  OF FTAB             *
*                2 FTABDLNG   FIXED(15);           /* NUMBER OF BYTES *
*                                                  /* IN THIS BLOCK   *
*                                                  /* WHICH ARE IN USE*
*         DCL   1 FTABELMT  BDY(WORD) BASED(FTABCUR),   /* ELEMENTS   *
*                    3 FTABELNG     CHAR(4),  /* LENGTH OF THIS VALUE *
*                    3 FTABDAT    CHAR(256);  /* VALUE FOR CORRESPONDIN
*                                                 SYMBOLIC PARAMETER  *
*         DCL   POSAR     FIXED(31);          /* AMT OF STORAGE NEEDED*
*                                             /*  FOR PCE'S FOR POSIT-*
*                                             /*   IONAL PARAMETERS   *
*         DCL   KWOAR     FIXED(31);          /* AMT OF STORAGE NEEDED*
*                                             /*  FOR PCE'S FOR KEYWRD*
*                                             /*   PARMS WITHOUT VALUE*
*         DCL   KWWAR     FIXED(31);          /* AMT OF STORAGE NEEDED*
*                                             /*  FOR PCE'S FOR KEYWRD*
*                                             /*   PARMS WITH VALUE   *
*         DCL   PCLIND    PTR(31);            /* PTR TO START OF PCL  *
*         DCL   PCLCUR    PTR(31);            /* PTR TO CURRENT ELEMNT*
*                                             /*  OF THE PCL          *
*         DCL   PDLIND    PTR(31);            /* PTR TO START OF PDL  *
*         DCL 1 PDLCUR    PTR(31),            /* CURRENT OFFSET FOR   *
*               2 *       CHAR(2),            /*  NEXT PDL ELEMENT    *
*               2 PDLCURC CHAR(2);            /*  OR ADDRESS OF THIS  *
*                                             /*  PDL ELEMENT         *
*         DCL   SBFCUR    PTR(24);            /* PTR TO CURRENT SUB-  *
*                                             /*  FIELD ELEMENT       *
*         DCL   PCELMT    CHAR(57)  BASED(PCLCUR); /* DUMMY FOR MOVES *
*                                             /*      INTO PCES       *
*         DCL   1  PARMMOD  BDY(WORD)  BASED(PCLIND),
*                                             /*  DUMMY OF FIRST  PCE *
*                  2 LOPCL  FIXED(15),        /* LENGTH OF PCL        *
*                  2 LOPDL  FIXED(15),        /* LENGTH OF PDL        *
*                  2 OTKW   FIXED(15);        /* OFFSET TO KEYWORD PCE*
*         DCL   1  IDMOD  CHAR(57)  STATIC  BDY(WORD),
*                                             /* MODEL OF IDENT PCE   *
*                  2 *  CHAR(2)  INIT('9000'X), /* TYPE INDICATOR AND *
*                                             /*   PROMPT BIT         *
*                  2 *  FIXED(15) INIT(57),   /* PCE LENGTH           *
*                  2 *  FIXED(31) INIT(000),  /* ANY CHAR ACCEPTED    *
*                  2 *  CHAR(1)  INIT('00'X), /* ANY CHAR ACCEPTED    *
*                  2 *  CHAR(2)  INIT('001A'X),/* LENGTH OF PARM TYPE *
*                                             /*   IS 22              *
*                  2 *  CHAR(2)  INIT('0012'X),
*                  2 *  CHAR(22) INIT('POSITIONAL PARAMETER  '),
*                                             /* PARM TYPE -POSITIONAL*
*                  2 *  CHAR(1)  INIT('14'X), /* LENGTH OF PROMPT INFO*
*                                             /*   IS 21              *
*                  2 *  CHAR(21) INIT('POSITIONAL PARAMETER ');
*                                             /* PRMPT INFO -         *
*                                             /*  POSITIONAL          *
*         DCL   1  KWMOD  CHAR(11)  STATIC  BDY(WORD),
*                                             /* MODEL OF KEYWORD PCE *
*                  2 *  CHAR(2)  INIT('4000'X), /* TYPE INDICATOR     *
*                  2 *  FIXED(15) INIT(6),    /* LENGTH OF KWRD PCE   *
*                  2 *  FIXED(15),            /* FILL                 *
*                  2 *  CHAR(2)  INIT('6000'X), /* TYPE INDICATOR FOR *
*                                             /*   NAME PCE           *
*                  2 * CHAR(3);               /* FILL                 *
*         DCL   1  DUMIDENT    CHAR(313)  BASED(PCLCUR),      /*Y01676*
*                                             /* DUMMY OF IDENT PCE   *
*                  2 *  BIT(3),               /* FILL                 *
*                  2 IDMODPMB  BIT(1),        /* PROMPT BIT           *
*                  2 *  BIT(12),              /* FILL                 *
*                  2 IDMODLEN FIXED(15),      /* LEN OF THE PCE Y01676*
*                    3 IDMODLNG  CHAR(2),     /* REDEF OF LEN   Y01676*
*                  2 IDMODPDL  CHAR(2),       /* OFFSET IN PDL FOR    *
*                                             /*   THIS ELEMENT       *
*                  2 *  CHAR(7),              /* FILL                 *
*                  2 IDMODTYP  CHAR(22),      /* PORTION OF TYPE FIELD*
*                                             /* WHICH CAN BE REPLACED*
*                  2 IDPRLEN CHAR(1),         /* PROMPT LENGTH  Y01676*
*                  2 IDPOSPMT CHAR(277),      /* PROMPT INFORMATION
*                                                AREA           Y01676*
*                    3 * CHAR(21),            /* CONSTANT INFO  Y01676*
*                    3 POSNAME CHAR(256);     /* VARIABLE NAME  Y01676*
*         DCL   1  DUMKWORD              BASED(PCLCUR),
*                                             /* DUMMY OF KEYWORD AND *
*                                             /*   NAME  PCES         *
*                  2 *  CHAR(4),              /* FILL                 *
*                  2 KWPDL     CHAR(2),       /* OFFSET IN PDL FOR    *
*                                             /*   THIS ELEMENT       *
*                  2 *  BIT(5),               /* FILL                 *
*                  2 KWSFB  BIT(1),           /* SUBFIELD BIT         *
*                  2 *  BIT(10),              /* FILL                 *
*                  2 KWELNG    CHAR(2),       /* NAME ELEMENT LENGTH  *
*                  2 KWNAMLNG  CHAR(1),       /* LENGTH OF THE NAME   *
*                  2 KWDAT     CHAR(256);     /* ACTUAL KWRD          *
*         DCL   TYPKW  CHAR(22)  INIT(' VALUE FOR KEYWORD    ');
*                                             /* SUBSTITUTED IN PARM  *
*                                             /*  TYPE OF IDENT FOR   *
*                                             /*   KWORD WITH VALUE   *
*         DCL   KWSBO  CHAR(2)  BASED(PCLCUR - 2);
*                                             /* OFFSET TO SUBFIELD   *
*                                             /* ELEMENT FOR KWORD    *
*                                             /* WITH VALUE  PARMS    *
*         DCL   SBFMOD  CHAR(3) INIT('000000'X); /*MOD OF SUBFIELD PCE*
*         DCL   1 DUMSBF  BASED(SBFCUR),      /* DUMMY OF SUBFIELD PCE*
*                 2  *  CHAR(1),              /* FILL                 *
*                 2  NSBFOF  CHAR(2);         /* OFFSET TO NEXT SUBFLD*
*         DCL  1 NLOC   PTR(31)   AUTO,       /* USED FOR INDIRECT
*                                                ADDRESSING     Y01676*
*                2   NLOCC   CHAR(4);         /* CHAR REDEFINE  Y01676*
*         DCL   FREP   CHAR(32766)  BASED(NLOC); /* USED AS THE OBJECT
*                                               INDIRECT ADDR   Y01676*
*         DCL   1 DUMIPDE  BDY(WORD)  BASED(PDLCUR),
*                                             /* DUMMY OF IDENT PDE   *
*                  2 IPDEPTRC  CHAR(4),       /* PTR TO CHAR STRING   *
*                  2 IPDELNG   FIXED(15),     /* LENGTH OF CHAR STRING*
*                    3 IPDELNGC  CHAR(2),     /* BYTE REDEFINITION    *
*                  2 IPDEFLGS  CHAR(1);       /* FLAGS                *
*         DCL   1 DUMKPDE  BDY(WORD)  BASED(PDLCUR),
*                                             /* DUMMY OF KWRD PDE    *
*                  2 KPDENUM   FIXED(15);     /* NUMBER OF FOUND NAME *
*         DCL   1 EKPDE  BDY(WORD)  BASED(PDLIND),            /*Y01676*
*                                             /* DUMMY OF KWRD  Y01676*
*                  2 ELISTPDE FIXED(15),      /* PDES FOR       Y01676*
*                  2 EPRMTPDE FIXED(15);      /* EXP SYNTAX     Y01676*
*         DCL   QALIST   LABEL  EXTERNAL  NONLOCAL;
*                                             /* PTR TO PCL           *
*         DCL
*              1 QPOSMOD  CHAR(7) STATIC BDY(WORD), /* MODEL QS Y01676*
*                2 *  CHAR(2)  INIT('2000'X), /* PCE-TYPE FLAGS Y01676*
*                2 *  FIXED(15)  INIT(7),     /* LENGTH OF PCL  Y01676*
*                2 *  FIXED(15)  INIT(0),     /* OFFSET IN PDL FOR
*                                                THIS ELEMENT   Y01676*
*                2 *  CHAR(1)  INIT('09'X);   /* IKJPOSIT TYPE  Y01676*
*                                                             /*Y01676*
*         DCL                                                 /*Y01676*
*              1  DUMQPOS  CHAR(7) BASED(PCLCUR), /* MAP OF     Y01676*
*                2  QMODOPT  CHAR(2),         /* QSTRING PCE    Y01676*
*                2  QMODLGN  FIXED(15),       /* LENGTH FLD     Y01676*
*                2  QMODOFF  CHAR(2),         /* PDL OFFSET     Y01676*
*                2  QMODTYP  CHAR(1);         /* PCE TYPE       Y01676*
*                                                             /*Y01676*
*        DCL                                                  /*Y01676*
*             1  DUMQPDE  BDY(WORD) BASED(PDLCUR), /* MAP OF QSTRING
*                                                PDE            Y01676*
*               2  QSPDEPTR  PTR(31),        /* POINTER TO QS   Y01676*
*               2  QSPDELEN  FIXED(15),      /* Q-STRING LENGTH Y01676*
*               2  QSPDEFLG  BIT(8),         /* FLAGS           Y01676*
*                 3  QSPRES  BIT(1),         /* Q-STRING WAS    Y01676*
*                 3  *  BIT(7),              /* SPECIFIED       Y01676*
*               2  *  CHAR(1);                                /*Y01676*
*  /*                                                                 *
*  /*                          RUNNING CODE                           *
*  /*                                                                 *
* /********************************************************************
**/*IKJEFE02: CHART (AMODE) */
**/*HEADER
**/*EXEC     D82    IKJEFE02
**/*                                                                  *
**/*START: E START */
* /********************************************************************
*          RESTRICT (R2,R4,R5,R6);            /* RESERVE REGISTERS
*                                                1, 2, 4, AND 5       *
*         R6 = R1;                            /* SET POINTER TO
*                                                IKJEFE01 VALUES      *
         LR    @6,@1                                              0077
*
* /********************************************************************
**/*E02PED03:      D (NO,,YES,%D1) WERE SYMBOLIC PARMS DEFINED IN PROC
**/* */
**/*      D (NO,,YES,E02MML05) IS IT IMP EXEC WITH PARMS ON INVO STMT *
**/*      D (YES,E02EXT15,NO,%D35) IS IT IMPLICIT EXEC? */
* /********************************************************************
*         /***********************************************************/
*         /*       FOLLOWING CODE CHECKS WHETHER THERE COULD LEGALLY  *
*         /*       BE PARMS ON THE INVOCATION STATEMENT. IF NOT AND   *
*         /*       IT IS AN IMPLICIT EXEC WE CAN CHECK WHETHER        *
*         /*       THERE ARE ANY FROM THE ECT. IF IT IS EXPLICIT      *
*         /*       HOWEVER WE MUST GO TO PARSE TO FIND IF THERE       *
*         /*       ARE ANY ON THE CALLING STATEMENT.                  *
*         /***********************************************************/
* E02PED03: R4  = ATABIND;                    /* SET POINTER TO ATAB  *
E02PED03 L     @4,172(0,@6)                                       0078
*         IF  R4 = KON0                       /* IF NO SYMBOLIC PARMS *
*           THEN                              /*   WERE FOUND         *
         CH    @4,KON0                                            0079
         BC    07,@9FF                                            0079
*             DO;                             /*   THEN               *
*               IF ECTNOPD = '0'B & E01SW1 = '1'B
*                 THEN                        /* IF IT WAS AN IMPLICIT*
         L     @3,232(0,@6)        
         L     @3,12(0,@3)         ECTPTR                         0081
         TM    28(@3),B'10000000'                                 0081
         BC    05,@9FE                                            0081
         TM    202(@6),B'10000000'                                0081
         BC    12,@9FD                                            0081
*                   DO;                       /*  EXEC AND PARMS WERE *
*                     LVL1NO = KON10;         /* ON CALLING STMT - IT *
         MVC   304(2,@6),KON10                                    0083
*                     LVL2NO = KON1;          /*  IS AN ERROR SO      *
         MVC   306(2,@6),KON1                                     0084
*                     VARSGLN2 = KONX00;      /* SET LNGTH OF 2ND VAR *
         MVC   300(1,@6),KONSTRUC                                 0085
*                     GOTO E02MML05;          /*  PUT MSG AND RETURN  *
         BC    15,E02MML05                                        0086
*                   END;
*               IF E01SW1 = '1'B              /* IF IMPLICIT AND PARMS*
*                 THEN                        /*  NOT ON CALLING STMT *
@9FD     EQU   *                                                  0088
@9FE     TM    202(@6),B'10000000'                                0088
*                   GOTO E02EXT15;            /*  RETURN W/O MESSAGE  *
         BC    01,E02EXT15                                        0089
*               GOTO E02PIC05;                /* IF EXPLICIT GO TO
*                                                PARSE THE BUFFER     *
         BC    15,E02PIC05                                        0090
*             END;                            /* STEP  BACKWARDS      *
*
* /********************************************************************
**/*%D1:      P CALCULATE AMOUNT OF CORE NEEDED FOR PCL */
**/*      S IKJEFE03: PERFORM GETMAIN */
**/*      D (YES,,NO,E02EXT15) WAS GETMAIN SUCCESSFUL? */
* /********************************************************************
*         /************************************************************
*         /*                      THE FOLLOWING CODE DETERMINES       *
*         /*                      AND OBTAINS THE CORRECT AMOUNT      *
*         /*                      OF STORAGE NEEDED FOR THE PCL       *
*         /************************************************************
*         POSAR = POSCNT * KON57 + POSBYT;   /* AMT FOR POSITIONALS
*                                                PLUS SIZE      Y01676*
@9FF     LH    @F,KON57                                           0092
         M     @E,132(0,@6)                                       0092
         AH    @F,360(0,@6)                                       0092
         ST    @F,POSAR                                           0092
*         KWOAR = KWOCNT * KON11 + KWOBYT;   /* AMT FOR KWRD W/O VALUE*
         LH    @E,KON11                                           0093
         MH    @E,192(0,@6)                                       0093
         AH    @E,196(0,@6)                                       0093
         ST    @E,KWOAR                                           0093
*         KWWAR = KWWCNT * KON58 + KWWBYT;   /* AMT FOR KWRD WITH
*                                               VALUE           Y01676*
         LH    @E,KON58                                           0094
         MH    @E,194(0,@6)                                       0094
         AH    @E,198(0,@6)                                       0094
         ST    @E,KWWAR                                           0094
*         R2 = POSAR + KWOAR + KWWAR + KON7;  /* TOTAL AMT FOR PCL    *
         LH    @2,KON7                                            0095
         A     @2,KWWAR                                           0095
         A     @2,KWOAR                                           0095
         A     @2,POSAR                                           0095
*         R2  = R2 + KON7;                    /* SET HIGHER THAN NEXT *
         AH    @2,KON7                                            0096
*         GEN;                                /*     HIGHER MULT OF 8 *
         SRL   R2,3                REDUCE TO NEXT LOWER
         SLL   R2,3                MULTIPLE OF 8
         DS    0H
*         R4  = KON1;                         /* SET SUBPOOL INDICATOR*
         LH    @4,KON1                                            0098
*         GMNMIN  = R2;                       /* SET MINIMUM TO BE OB-
*                                                TAINED               *
         ST    @2,140(0,@6)                                       0099
*         GMNMAX  = GMNMIN;                   /* SET MAX TO BE OBTAIN-
*                                                ED                   *
         MVC   144(4,@6),140(@6)                                  0100
*         R1  = R6;                           /* SET PARM POINTER     *
         LR    @1,@6                                              0101
*         E01SW10  = '1'B;                    /* SET GETMAIN SWITCH   *
         OI    203(@6),B'01000000'                                0102
*         CALL  IKJEFE03;                     /* PERFORM GETMAIN      *
         L     @F,@V1              ADDRESS OF IKJEFE03            0103
         BALR  @E,@F                                              0103
*         E01SW10  = '0'B;                    /* RESET GETMAIN SWITCH *
         NI    203(@6),B'10111111'                                0104
*         IF  E01SW15 = '1'B                  /* IF WE COULD NOT GET  *
*           THEN                              /*  MINIMUM - CORE      *
         TM    203(@6),B'00000010'                                0105
         BC    12,@9FC                                            0105
*             DO;                             /* WE MUST TERMINATE SO *
*               E01SW9 = '1'B;                /* SET TERM. SWITCH AND *
         OI    203(@6),B'10000000'                                0107
*               GOTO E02EXT15;                /*  RETURN TO CALLER    *
         BC    15,E02EXT15                                        0108
*             END;
*
* /********************************************************************
**/*      P INITIALIZE PTRS AND PCL CONTROL VALUES  */
* /********************************************************************
*         /************************************************************
*         /*              THE FOLLOWING CODE INITIALIZES              *
*         /*              POINTERS SETS VALUES IN THE                 *
*         /*              FIRST PCE AND POINTS TO FIRST               *
*         /*              ATAB BLOCK                                  *
*         /************************************************************
*         PCLIND = ADDGMN;                    /* POINT TO PCL AREA    *
@9FC     MVC   PCLIND(4),148(@6)                                  0110
*         LOPCL  = POSAR + KWWAR + KWOAR + KON7;
         LH    @F,KON7                                            0111
         A     @F,KWOAR                                           0111
         A     @F,KWWAR                                           0111
         A     @F,POSAR                                           0111
         L     @3,PCLIND                                          0111
         STH   @F,0(0,@3)                                         0111
*                                             /* SET PCL LENGTH
*         PCLCUR  = PCLIND + KON6;            /* SET PCLCUR VALUE     *
         LH    @F,KON6                                            0112
         A     @F,PCLIND                                          0112
         ST    @F,PCLCUR                                          0112
*         PDLCUR  = KON8;                     /*INITIALIZE PDL OFFSET *
         LH    @F,KON8                                            0113
         ST    @F,PDLCUR                                          0113
*         OTKW   = POSAR + KON6;              /* SET OFFSET TO FIRST
*                                                KEYWORD  PCE         *
         LH    @F,KON6                                            0114
         A     @F,POSAR                                           0114
         STH   @F,4(0,@3)                                         0114
*         SBFCUR =  PCLIND + OTKW + KWOAR + KWWCNT * KON13 + KWWBYT;
         LH    @E,KON13                                           0115
         MH    @E,194(0,@6)                                       0115
         A     @E,KWOAR                                           0115
         AH    @E,4(0,@3)                                         0115
         A     @E,PCLIND                                          0115
         AH    @E,198(0,@6)                                       0115
         ST    @E,@TEMP4                                          0115
         MVC   SBFCUR(3),@TEMP4+1                                 0115
*                                             /*POINT TO START OF SUB-
*                                               FIELD PCES            *
*         R1  = FTABIND;                      /* REG 1 POINTS TO FTAB *
         L     @1,180(0,@6)                                       0116
*         R2  = FTABCUR;                      /* REG 2 POINTS TO ELMT *
         L     @2,184(0,@6)                                       0117
*         R4  = ATABIND;                      /* REG 4 POINTS TO ATAB *
         L     @4,172(0,@6)                                       0118
*         R5  = ATABCUR;                      /* REG 5 POINTS TO ELMT *
         L     @5,176(0,@6)                                       0119
* /********************************************************************
**/*E02PED05: P (,E02PED15:RL) SET ELEMENT PTR TO FIRST ELEMENT IN FIRS
**/*BLOCK OF ATAB */
**/*COMMENT (13,1,) ATAB - A TABLE CONTAINING */
**/*COMMENT (14,1,) THE NAMES OF SYMBOLIC */
**/*COMMENT (15,1,) PARAMETERS DEFINED IN */
**/*COMMENT (16,1,) THE PROC STATEMENT. */
**/*COMMENT (18,1,) FTAB - A TABLE CONTAINING */
**/*COMMENT (19,1,) VALUES TO BE SUBSTITUTED */
**/*COMMENT (20,1,) FOR SYMBOLIC PARAMETERS IN */
**/*COMMENT (21,1,) THE COMMAND PROCEDURE. */
* /********************************************************************
* E02PED05: IF R4 -> ATABLST ^= KON0          /* STEP THROUGH ATAB    *
*             THEN
E02PED05 LH    @F,KON0                                            0120
         C     @F,0(0,@4)                                         0120
         BC    08,@9FB                                            0120
*               DO;                           /*   BLOCKS  UNTIL      *
*                 R4 = R4 -> ATABLST;         /*    THE FIRST         *
         L     @4,0(0,@4)                                         0122
*                 GOTO E02PED05;              /*     IS               *
         BC    15,E02PED05                                        0123
*               END;                          /*      REACHED         *
*         R5  = R4 + KON12;                   /* SET POINTER TO ELMT. *
@9FB     LH    @5,KON12                                           0125
         AR    @5,@4                                              0125
*         GOTO  E02PED15;                     /* BYPASS ELEMENT PTR
*                                                UPDATE ON FIRST PASS *
         BC    15,E02PED15                                        0126
*
* /********************************************************************
**/*E02PED10:  D (NO,%D2:RL,YES,%D15:LT) WAS LAST BLOCK ELEMENT
**/*PROCESSED */
**/*%D15: D (YES,E02PIC05:RL,NO,) IS THIS LAST ATAB IN BLOCK? */
**/*      P (,E02PED15:BL) UPDATE PTR TO NEXT BLOCK OF ATAB*/
**/*%D2:      P (,E02PED15:BL) UPDATE ELEMENT PTR */
**/*E02PED15:      D (NO,,YES,E02PED20:RT) IS THIS A POSITIONAL PARM? *
* /********************************************************************
*         /***********************************************************/
*         /*              THE FOLLOWING CODE DETERMINES               *
*         /*              WHEN THE LAST ELEMENT HAS BEEN              *
*         /*              PROCESSED. IT UPDATES THE                   *
*         /*              POINTER TO THE CURRENT ELEMENT              *
*         /*              (AND THE UPDATES THE BLOCK IF               *
*         /*               NECESSARY) AND GOES TO THE                 *
*         /*              CORRECT PCE CREATION ROUTINE                *
*         /*              FOR THE CURRENT ELEMENT.                    *
*         /***********************************************************/
* E02PED10: IF (R5 -> ATABFLGS & KONX20) = KONX20
*             THEN                            /* IF LAST ELEMENT      *
E02PED10 MVC   @CTEMP2(1),KONSTRUC+1                              0127
         NC    @CTEMP2(1),4(@5)                                   0127
         CLC   @CTEMP2(1),KONSTRUC+1                              0127
         BC    07,@9FA                                            0127
*               DO;                           /* WAS PROCESSED THEN   *
*                 IF R4 -> ATABNXT = KON0     /*  IF THIS IS LAST ATAB*
*                   THEN                      /*  BLOCK INSERT THE    *
         LH    @F,KON0                                            0129
         C     @F,4(0,@4)                                         0129
         BC    07,@9F9                                            0129
*                     DO;                     /*   END OF LIST PCE AND*
*                       SBFCUR  -> PCELMT(1) = SBFMOD(1);/*   GO TO   *
         MVC   @TEMP3+1(3),SBFCUR                                 0131
         L     @3,@TEMP3           SBFCUR                         0131
         MVC   0(1,@3),SBFMOD                                     0131
*                       GOTO E02PIC05;        /*  CALL PARSE          *
         BC    15,E02PIC05                                        0132
*                     END;                    /* OTHERWISE            *
*                 R4 = R4 -> ATABNXT;         /*   UPDATE POINTER     *
@9F9     L     @4,4(0,@4)                                         0134
*                 R5 = R4 + KON12;            /*    TO FIRST ELEMENT  *
         LH    @5,KON12                                           0135
         AR    @5,@4                                              0135
*                 GOTO E02PED15;              /*     OF NEXT BLOCK    *
         BC    15,E02PED15                                        0136
*               END;
*         CNVC  = R5 -> ATABELNC;              /*ALIGN ELEMENTS LENGTH
@9FA     MVC   200(2,@6),5(@5)                                    0138
*         R5  = R5 + CNVA + KON7;             /* UPDATE ELEMENT PTR   *
         LH    @F,KON7                                            0139
         AH    @F,200(0,@6)                                       0139
         AR    @5,@F                                              0139
*  E02PED15: IF POSCNT ^= 0                   /* IF THIS IS A
*              THEN
E02PED15 SR    @F,@F                                              0140
         C     @F,132(0,@6)                                       0140
         BC    08,@9F8                                            0140
*                DO;                          /*  POSITIONAL PARM
*                  POSCNT = POSCNT - KON1;    /* DECREMENT COUNT AND
         LH    @F,KON1                                            0142
         LCR   @F,@F                                              0142
         A     @F,132(0,@6)                                       0142
         ST    @F,132(0,@6)                                       0142
*                  GOTO E02PED20;             /*  GO TO ROUTINE WHICH
         BC    15,E02PED20                                        0143
*                END;                         /*   CREATES IDENT PCE
*
*         /************************************************************
*         /*              THE FOLLOWING CODE CREATES THE              *
*         /*              NECESSARY PCES FOR KEYWORD                  *
*         /*              PARAMETERS BOTH WITH AND W/O                *
*         /*              VALUE                                       *
*         /************************************************************
*         PCELMT(1:11)  = KWMOD;              /* MOVE KWRD PCE TO PCL *
@9F8     L     @3,PCLCUR                                          0145
         MVC   0(11,@3),KWMOD                                     0145
*         KWPDL = PDLCURC;                    /* OFFSET TO PDL ELEMENT*
         MVC   4(2,@3),PDLCUR+2                                   0146
*         CNVC  = R5 -> ATABELNC;             /* ALIGN LENGTH OF PARM *
         MVC   200(2,@6),5(@5)                                    0147
*         KWDAT(1:CNVA)  = R5 -> ATABDAT(1:CNVA);/*MOVE KWRD TO PCE   *
         LA    @E,7(0,@5)                                         0148
         LH    @7,200(0,@6)                                       0148
         BCTR  @7,0                                               0148
         LA    @A,11(0,@3)                                        0148
         EX    @7,@MVC                                            0148
*         CNVA  = CNVA - KON1;                /* PCE REQUIRES LENGTH
*                                                MINUS ONE            *
         LH    @F,KON1                                            0149
         LCR   @F,@F                                              0149
         AH    @F,200(0,@6)                                       0149
         STH   @F,200(0,@6)                                       0149
*         KWNAMLNG  = CNVC(2);                /* SET LENGTH OF NAME & *
         MVC   10(1,@3),201(@6)                                   0150
*         CNVA  = CNVA + KON6;                /* INCREASE CNVA TO SIZE*
         LH    @F,KON6                                            0151
         AH    @F,200(0,@6)                                       0151
         STH   @F,200(0,@6)                                       0151
*                                             /* OF NAME PCE FOR KWRD
*                                                W/O VALUE            *
* /********************************************************************
**/*      D (YES,,NO,E02PED10) IS THIS A KEYWORD WITH VALUE? */
**/*      P SET SUBFIELD BIT AND INCREMENT PCE SIZE */
**/*      P (,E02PED10) INIT SUBFIELD AREA AND INCREMENT SUBFLD PTR*/
* /********************************************************************
*         IF (R5 -> ATABFLGS & KONX80) = KONX80 /*IF THIS ENTRY IS KWRD
*           THEN                              /*  WITH VALUE SET
         MVC   @CTEMP2(1),KONSTRUC+4                              0152
         NC    @CTEMP2(1),4(@5)                                   0152
         CLC   @CTEMP2(1),KONSTRUC+4                              0152
         BC    07,@9F7                                            0152
*             DO;                             /*  SUBFIELD BIT AND ADD
*               KWSFB = '1'B;               /*  TO PCE SIZE FOR SUB- */
         OI    6(@3),B'00000100'                                  0154
*               CNVA = CNVA + KON2;         /*  FIELD OFFSET         */
         LH    @F,KON2                                            0155
         AH    @F,200(0,@6)                                       0155
         STH   @F,200(0,@6)                                       0155
*             END;
*         KWELNG  = CNVC;                     /* SET LENGTH OF NAME PCE
@9F7     L     @3,PCLCUR                                          0157
         MVC   8(2,@3),200(@6)                                    0157
*         PDLCUR  = PDLCUR + KON2;            /* UPDATE PDL OFFSET
         LH    @F,KON2                                            0158
         A     @F,PDLCUR                                          0158
         ST    @F,PDLCUR                                          0158
*         PCLCUR  = PCLCUR + KON6 + CNVA;     /* UPDATE PCL POINTER
         LH    @F,200(0,@6)                                       0159
         AH    @F,KON6                                            0159
         A     @F,PCLCUR                                          0159
         ST    @F,PCLCUR                                          0159
*         IF (R5 -> ATABFLGS & KONX40) = KONX40 /* IF IT'S KWRD W/O
*           THEN                              /*  VALUE GO PROCESS NEXT
         MVC   @CTEMP2(1),KONSTRUC+3                              0160
         NC    @CTEMP2(1),4(@5)                                   0160
         CLC   @CTEMP2(1),KONSTRUC+3                              0160
*             GOTO E02PED10;                  /*   ELEMENT
         BC    08,E02PED10                                        0161
*         CNVA  = SBFCUR - PCLIND + KON1;     /* OBTAIN OFFSET TO SUB-
*                                                FIELD ELEMENT AND
         LH    @F,KON1                                            0162
         S     @F,PCLIND                                          0162
         MVC   @TEMP3+1(3),SBFCUR                                 0162
         A     @F,@TEMP3                                          0162
         STH   @F,200(0,@6)                                       0162
*         KWSBO  = CNVC;                      /* PUT IT IN NAME PCE
         L     @3,PCLCUR                                          0163
         LR    @A,@3                                              0163
         SH    @A,@D1                                             0163
         MVC   0(2,@A),200(@6)                                    0163
*         SBFCUR  -> PCELMT(1:3) = SBFMOD;    /* MOVE SUBFIELD INDICAT-
*                                                OR PCE TO PCL        *
         MVC   @TEMP3+1(3),SBFCUR                                 0164
         L     @7,@TEMP3           SBFCUR                         0164
         MVC   0(3,@7),SBFMOD                                     0164
*         CNVA = KON7 + KON35 + KON2 + CNVA;  /* OBTAIN OFFSET TO NEXT
*                                                SUBFLD PCE AND Y01676*
         LH    @F,200(0,@6)                                       0165
         AH    @F,KON2                                            0165
         AH    @F,KON35                                           0165
         AH    @F,KON7                                            0165
         STH   @F,200(0,@6)                                       0165
*         NSBFOF  = CNVC;                     /* PLACE IN THIS SUBFLD *
         MVC   1(2,@7),200(@6)                                    0166
*         SBFCUR  = SBFCUR + KON3;            /* UPDATE POINTER       *
         LH    @F,KON3                                            0167
         MVC   @TEMP3+1(3),SBFCUR                                 0167
         A     @F,@TEMP3                                          0167
         ST    @F,@TEMP4                                          0167
         MVC   SBFCUR(3),@TEMP4+1                                 0167
*         SBFCUR -> PCELMT(1:7) = QPOSMOD;    /* MOVE QSTRING MODEL TO
*                                                SUBFLD AREA- THIS WILL
*                                                ALLOW A QUOTED STRING
*                                                TO BE ENTERED  Y01676*
         MVC   @TEMP3+1(3),SBFCUR                                 0168
         L     @7,@TEMP3           SBFCUR                         0168
         MVC   0(7,@7),QPOSMOD                                    0168
*         SBFCUR -> QMODOFF = PDLCURC;        /* SET OFFSET TO THE PDL
*                                                ELEMENT        Y01676*
         MVC   4(2,@7),PDLCUR+2                                   0169
*         PDLCUR = KON8 + PDLCUR;             /* UPDATE PDL OFFSET FOR
*                                                NEXT ENTRY     Y01676*
         L     @F,PDLCUR                                          0170
         AH    @F,KON8                                            0170
         ST    @F,PDLCUR                                          0170
*         SBFCUR = KON7 + SBFCUR;             /* UPDATE SUBFIELD
*                                                POINTER        Y01676*
         MVC   @TEMP3+1(3),SBFCUR                                 0171
         L     @F,@TEMP3                                          0171
         AH    @F,KON7                                            0171
         ST    @F,@TEMP4                                          0171
         MVC   SBFCUR(3),@TEMP4+1                                 0171
*         SBFCUR  -> PCELMT(1:35) = IDMOD;    /* MOVE IDENT MODEL TO
*                                                SUBFIELD AREA        *
         MVC   @TEMP3+1(3),SBFCUR                                 0172
         L     @7,@TEMP3           SBFCUR                         0172
         MVC   0(35,@7),IDMOD                                     0172
*         SBFCUR  -> IDMODPMB = '0'B;         /* TURN OFF PROMPT BIT  *
         NI    0(@7),B'11101111'                                  0173
*         SBFCUR  -> IDMODLNG(1) = KONX00;    /*SET LENGTH OF IDENT PCE
         MVC   2(1,@7),KONSTRUC                                   0174
*         SBFCUR  -> IDMODLNG(2) = KONX23;    /*SET LENGTH OF IDENT PCE
         MVC   3(1,@7),KONSTRUC+2                                 0175
*         SBFCUR  -> IDMODPDL = PDLCURC;      /* SET OFFSET FOR ITS PDL
*                                                ELEMENT
         MVC   4(2,@7),PDLCUR+2                                   0176
*         SBFCUR  -> IDMODTYP = TYPKW;        /* ALTER PARAMETER TYPE
*                                                TO KEYWORD VALUE
         MVC   13(22,@7),TYPKW                                    0177
*         PDLCUR = PDLCUR + KON8;             /* UPDATE PDL OFFSET
         LH    @F,KON8                                            0178
         A     @F,PDLCUR                                          0178
         ST    @F,PDLCUR                                          0178
*         SBFCUR  = SBFCUR + KON35;           /* UPDATE SUBFIELD PTR
         LH    @F,KON35                                           0179
         MVC   @TEMP3+1(3),SBFCUR                                 0179
         A     @F,@TEMP3                                          0179
         ST    @F,@TEMP4                                          0179
         MVC   SBFCUR(3),@TEMP4+1                                 0179
*         GOTO  E02PED10;                     /* GO PROCESS NEXT ATAB
*                                                ELEMENT
         BC    15,E02PED10                                        0180
* /********************************************************************
**/*E02PED20:      P (,E02PED10:BT) CREATE PCES FOR POSITIONAL PARMS */
* /********************************************************************
*         /************************************************************
*         /*              THE FOLLOWING CODE CREATES THE              *
*         /*              NECESSARY PCES FOR POSITIONAL               *
*         /*              PARAMETERS                                  *
*         /************************************************************
*  E02PED20: PCELMT  = IDMOD;                 /* MOVE IDENT PCE TO PCL*
E02PED20 L     @3,PCLCUR                                          0181
         MVC   0(57,@3),IDMOD                                     0181
*          IDMODPDL  = PDLCURC;               /* OFFSET TO ITS PDL    *
         MVC   4(2,@3),PDLCUR+2                                   0182
*          CNVC = R5 -> ATABELNC;             /* GET LEN OF POSITIONAL
*                                                PARAMETER      Y01676*
         MVC   200(2,@6),5(@5)                                    0183
*          POSNAME(1:CNVA) = R5 -> ATABDAT(1:CNVA); /* MOVE NAME OF PAR
*                                                TO PROMPT AREA Y01676*
         LA    @E,7(0,@5)                                         0184
         LH    @7,200(0,@6)                                       0184
         BCTR  @7,0                                               0184
         LA    @A,57(0,@3)                                        0184
         EX    @7,@MVC                                            0184
*          PDLCUR  = PDLCUR + KON8;           /* UPDATE PDL OFFSET    *
         LH    @F,KON8                                            0185
         A     @F,PDLCUR                                          0185
         ST    @F,PDLCUR                                          0185
*          IDMODLEN = KON57 + CNVA;           /* STORE TOTAL LENGTH
*                                                OF THE PCE     Y01676*
         LH    @F,200(0,@6)                                       0186
         AH    @F,KON57                                           0186
         ST    @F,@TEMP4                                          0186
         MVC   2(2,@3),@TEMP4+2                                   0186
*          CNVA = KON21 - KON1 + CNVA;        /* GET THE LENGTH OF THE
*                                                PROMPT INFO    Y01676*
         LH    @F,200(0,@6)                                       0187
         SH    @F,KON1                                            0187
         AH    @F,KON21                                           0187
         STH   @F,200(0,@6)                                       0187
*          IF CNVA ^< KON224                  /* WHEN GREATER   Y01676*
*            THEN                             /* THAN 224 WE    Y01676*
         LH    @F,KON224                                          0188
         CH    @F,200(0,@6)                                       0188
         BC    02,@9F6                                            0188
*              CNVA = KON224 - KON1;          /* MUST TRUNCATE PROMPT
*                                                LENGTH ONLY    Y01676*
         SH    @F,KON1                                            0189
         STH   @F,200(0,@6)                                       0189
*          IDPRLEN = CNVC(2);                 /* PUT IN PCE     Y01676*
@9F6     MVC   35(1,@3),201(@6)                                   0190
*          PCLCUR  = IDMODLEN + PCLCUR;       /* UPDATE PCL POINTER
*                                                THEN           Y01676*
         L     @F,PCLCUR                                          0191
         MVC   @TEMP2+2(2),2(@3)                                  0191
         LH    @0,@TEMP2+2                                        0191
         AR    @F,@0                                              0191
         ST    @F,PCLCUR                                          0191
*          GOTO  E02PED10;                    /* GO PROCESS NEXT ATAB
*                                                  ELEMENT            *
         BC    15,E02PED10                                        0192
*
*         /************************************************************
*         /*              THE FOLLOWING CODE SETS UP THE
*         /*              INTERFACE, INVOKES PARSE AND
*         /*              CHECKS FOR ERROR RETURN CODES
*         /************************************************************
* /********************************************************************
**/*E02PIC05: D (NO,%D35:RL,YES,E02PIC09) IS THIS AN IMPLICIT EXEC? */
**/*%D35: S IKJPARS: INVOKE PARSE TO FIND QUOTE STRING*/
**/*      D (NO,,YES,E02MML05) TO FIND SYNTACTICALLY */
**/*COMMENT (6,6,) WAS PARSE UNABLE */
**/*COMMENT (9,7,) CORRECT PARMS ? */
**/*      D (YES,,NO,E02PIC08) WERE THERE PARMS ON INVO STMT ? */
**/*      D (NO,,YES,%D4) WERE THERE PARMS ON PROC STMT ?*/
**/*      P (,E02MML05) ERROR COND SO CLEAN UP AND TERMINATE */
**/*%D4:      P SAVE ADDR OF QUOTE STRIND ON INVO STMT */
**/* P CHG LENGTH & OFFSET OF CMD BUFFER TO SKIP QUOTES DURING NEXT
**/*PARSE*/
**/*E02PIC08:      P IF LIST OR PROMPT SPECIFIED, SET PROPER SWITCH */
**/*E02PIC09:      D (YES,,NO,%D5) IS THIS AN EXPLICIT EXEC? */
**/*      P FREE PDL OBTAINED FOR PARSE OF QUOTE STRING */
**/*%D5:      D (YES,,NO,E02EXT15) WERE THERE ANY PARMS IN PROC */
**/*      S IKJPARS: INVOKE PARSE FOR SYMBOLIC PARM VALUES*/
**/*      D (YES,,NO,E02MML05) DID PARSE FIND VALID PARMS? */
* /********************************************************************
* E02PIC05: IF E01SW1 = '1'B                  /* IF THIS IS AN        *
*             THEN                            /*   IMPLICIT EXEC      *
E02PIC05 TM    202(@6),B'10000000'                                0193
*               GOTO E02PIC09;                /*   BYPASS QUOTE PARSE *
         BC    01,E02PIC09                                        0194
*         CNVC  = CPPLCBUF -> FREP(1:2);      /* SAVE CMD BFR LENGTH  *
         L     @3,232(0,@6)        
         L     @3,0(0,@3)          CPPL                           0195
         MVC   200(2,@6),0(@3)                                    0195
*         PPLCBUF  = CPPLCBUF;                /* SET PTR TO CMD BUFFER*
         L     @3,232(0,@6)        
         L     @7,248(0,@6)        
         MVC   20(4,@7),0(@3)                                     0196
*         PPLANS  = ADDR(PDLIND);             /* SET PTR TO ANS PLACE *
         LA    @F,PDLIND                                          0197
         ST    @F,16(0,@7)                                        0197
*         SRECB  = KON0;                      /* ZERO ECB             *
         LH    @F,KON0                                            0198
         ST    @F,276(0,@6)                                       0198
*         PPLPCL  = ADDR(QALIST);             /* SET PTR TO PCL       *
         L     @3,@V2              ADDRESS OF QALIST              0199
         L     @7,248(0,@6)        
         ST    @3,12(0,@7)                                        0199
*         R1  = PPLPTR;                       /* REG 1 POINTS TO PARMS*
         L     @1,248(0,@6)                                       0200
*         GEN(LINK  EP=IKJPARS);
         LINK  EP=IKJPARS
         DS    0H
* E02PIC06:  ;
*         CNVA = R15;                         /* SAVE RETURN CODE     *
E02PIC06 STH   @F,200(0,@6)                                       0203
* E02PIC07:
*         IF CNVA ^= KON0                   /* IF PARSE WAS NOT     */
*           THEN                              /* SUCCESSFUL CHECK IF  *
E02PIC07 LH    @F,KON0                                            0204
         CH    @F,200(0,@6)                                       0204
         BC    08,@9F5                                            0204
*             IF CNVA = KON4                  /* WE ARE IN NO PROMPT  *
*               THEN                          /* MODE - IF SO DO NOT  *
         LH    @F,KON4                                            0205
         CH    @F,200(0,@6)                                       0205
         BC    07,@9F4                                            0205
*                 DO;
*                   E01SW9 = '1'B;            /* PUT A MESSAGE BUT GO *
         OI    203(@6),B'10000000'                                0207
*                   GOTO E02EXT10;            /* TO EXIT              *
         BC    15,E02EXT10                                        0208
*                 END;
*           ELSE                              /* OTHERWISE            *
*             DO;                             /* INDICATE THAT THE    *
*               LVL1NO = KON24;               /* SYSTEM ERROR MESSAGE *
@9F4     MVC   304(2,@6),KON24                                    0211
*               LVL2NO = KON2;                /* AND PARSE 2ND LVL MSG*
         MVC   306(2,@6),KON2                                     0212
*               GOTO E02MML05;                /* GO TO PUT MESSAGE    *
         BC    15,E02MML05                                        0213
*             END;
*         PDLIND  = PDLIND + KON8;            /* SET PTR PAST CHAIN
*                                                  WORDS              *
@9F3     EQU   *                                                  0215
@9F5     LH    @F,KON8                                            0215
         A     @F,PDLIND                                          0215
         ST    @F,PDLIND                                          0215
*         IF (PDLIND -> IPDEFLGS & KONX80) = KONX00 ×         /*Y01676*
*            PDLIND -> IPDELNG = KON0         /* IF THERE WERE  Y01676*
*           THEN                              /* NO   PARAMETERS      *
         MVC   @CTEMP2(1),KONSTRUC+4                              0216
         L     @3,PDLIND                                          0216
         NC    @CTEMP2(1),6(@3)                                   0216
         CLC   @CTEMP2(1),KONSTRUC                                0216
         BC    08,@9F2                                            0216
         LH    @F,KON0                                            0216
         CH    @F,4(0,@3)                                         0216
         BC    07,@9F1                                            0216
*             GOTO E02PIC08;                  /* BYPASS CHECK FOR
*                                                UNWANTED PARMS       *
         BC    08,E02PIC08                                        0217
*         IF ATABIND = KON0                   /*IF THERE WERE NO PARMS*
*           THEN                              /* DEFINED FOR THE PROC *
@9F1     LH    @F,KON0                                            0218
         C     @F,172(0,@6)                                       0218
         BC    07,@9F0                                            0218
*             DO;                             /* THEN INVOCATION STMT *
*               PDLIND = PDLIND - KON8;       /*IS IN ERROR SO RELEASE*
         L     @F,PDLIND                                          0220
         SH    @F,KON8                                            0220
         ST    @F,PDLIND                                          0220
*               R2 = ADDR(PDLIND);            /* CORE PARSE GOT AND   *
         LA    @2,PDLIND                                          0221
*               GEN(IKJRLSA (2));             /*  GO TO PUT           *
         IKJRLSA (2)
         DS    0H
*               LVL1NO = KON10;               /*  AND RETURN TO CALLER*
         MVC   304(2,@6),KON10                                    0223
*               LVL2NO = KON1;                /*  FOR                 *
         MVC   306(2,@6),KON1                                     0224
*               VARSGLN2 = KONX00;
         MVC   300(1,@6),KONSTRUC                                 0225
*               GOTO E02MML05;                /*  TERMINATION         *
         BC    15,E02MML05                                        0226
*             END;                            /*  OTHERWISE           *
*         TSTLNGC = PDLIND -> IPDEPTRC;       /* SAVE ADDRESS OF      *
@9F0     L     @3,PDLIND                                          0228
         MVC   136(4,@6),0(@3)                                    0228
*         CNVA = TSTLNG - KON4 - CPPLCBUF;    /*  QUOTED LIST         *
         L     @7,232(0,@6)        
         L     @F,0(0,@7)                                         0229
         LCR   @F,@F                                              0229
         SH    @F,KON4                                            0229
         A     @F,136(0,@6)                                       0229
         STH   @F,200(0,@6)                                       0229
*         CPPLCBUF -> FREP(3:4) = CNVC;       /* SET OFFSET PAST QUOTE*
         L     @7,232(0,@6)        
         L     @7,0(0,@7)          CPPL                           0230
         MVC   2(2,@7),200(@6)                                    0230
*         CNVA = CNVA + KON4 + PDLIND -> IPDELNG;  /* GET ADDR OF END *
         LH    @F,4(0,@3)                                         0231
         AH    @F,KON4                                            0231
         AH    @F,200(0,@6)                                       0231
         STH   @F,200(0,@6)                                       0231
*         CPPLCBUF -> FREP(1:2) = CNVC;       /* QUOTE AND SET LENGTH
*                                                SO BUFFER ENDS BEFORE
*                                                IT                   *
         L     @7,232(0,@6)        
         L     @7,0(0,@7)          CPPL                           0232
         MVC   0(2,@7),200(@6)                                    0232
* E02PIC08: PDLIND  = PDLIND + KON8;          /* UPDATE POINTER TO    *
E02PIC08 LH    @F,KON8                                            0233
         A     @F,PDLIND                                          0233
         ST    @F,PDLIND                                          0233
*         IF  EPRMTPDE  = KON1                /* KEYWORD DESC   Y01676*
*           THEN                              /* IF 'PROMPT'    Y01676*
         LH    @F,KON1                                            0234
         L     @3,PDLIND                                          0234
         CH    @F,2(0,@3)                                         0234
         BC    07,@9EF                                            0234
*             DO;                             /* WAS SPECIFIED  Y01676*
*               E01SW16 = '1'B;               /* SET LIST AND   Y01676*
         OI    203(@6),B'00000001'                                0236
*               E01SW6 = '1'B;                /* PROMPT         Y01676*
         OI    202(@6),B'00000100'                                0237
*             END;                            /* SWITCHES       Y01676*
*         IF  ELISTPDE  = KON1                /* IF 'LIST'      Y01676*
*           THEN                              /* WAS PRESENT    Y01676*
@9EF     LH    @F,KON1                                            0239
         L     @3,PDLIND                                          0239
         CH    @F,0(0,@3)                                         0239
         BC    07,@9EE                                            0239
*             E01SW16 = '1'B;                 /* SET LIST SW    Y01676*
         OI    203(@6),B'00000001'                                0240
         BC    15,@9ED                                            0241
*           ELSE                              /* IF 'NOLIST'    Y01676*
*             IF ELISTPDE = KON2              /* WAS SPECIFIED  Y01676*
*               THEN                          /* RESET THE IN   Y01676*
@9EE     LH    @F,KON2                                            0241
         L     @3,PDLIND                                          0241
         CH    @F,0(0,@3)                                         0241
         BC    07,@9EC                                            0241
*                 E01SW16 = '0'B;             /* CASE IT WAS SET
*                                                PREVIOUSLY     Y01676*
         NI    203(@6),B'11111110'                                0242
* E02PIC09: PPLCBUF  = CPPLCBUF;              /* SET PTR TO CMD BUFFER*
@9EC     EQU   *                                                  0243
@9ED     EQU   *                                                  0243
E02PIC09 L     @3,232(0,@6)        
         L     @7,248(0,@6)        
         MVC   20(4,@7),0(@3)                                     0243
*         IF E01SW1 = '0'B                    /* IF THIS IS AN EXPLICIT
*           THEN                              /*  EXEC WE MUST        *
         TM    202(@6),B'10000000'                                0244
         BC    05,@9EB                                            0244
*             DO;                             /*  FREE THE PDL OBTAINED
*               PDLIND  = PDLIND - KON16;     /*  FOR THE PARSE OF THE*
         L     @F,PDLIND                                          0246
         SH    @F,KON16                                           0246
         ST    @F,PDLIND                                          0246
*               R2 = ADDR(PDLIND);            /*  QUOTE STRING        *
         LA    @2,PDLIND                                          0247
*               GEN(IKJRLSA  (2));            /* RELEASE              *
         IKJRLSA  (2)
         DS    0H
*             END;
*         IF ATABIND = KON0                   /* IF THERE WERE NO PARMS
*           THEN                              /* SPECIFIED IN THE     *
@9EB     LH    @F,KON0                                            0250
         C     @F,172(0,@6)                                       0250
*             GOTO E02EXT15;                  /* PROC RETURN TO CALLER*
         BC    08,E02EXT15                                        0251
*          PPLANS  = ADDR(PDLIND);            /* SET ANS PLACE PTR    *
         LA    @F,PDLIND                                          0252
         L     @3,248(0,@6)        
         ST    @F,16(0,@3)                                        0252
*          LOPDL  = PDLCUR;                   /* SET PDL LENGTH       *
         L     @7,PCLIND                                          0253
         MVC   2(2,@7),PDLCUR+2                                   0253
*          PPLPCL  = PCLIND;                  /* SET PTR TO PCL       *
         MVC   12(4,@3),PCLIND                                    0254
*          SRECB  = KON0;                     /* ZERO OUT ECB         *
         LH    @F,KON0                                            0255
         ST    @F,276(0,@6)                                       0255
*         R1  = PPLPTR;                       /* SET PTR TO PARM LIST *
         L     @1,248(0,@6)                                       0256
*         GEN;                                /* INVOKE PARSE         *
         LINK   EP=IKJPARS
         DS    0H
*         /* IF CORRECT PARMS WERE NOT OBTAINED GO TO EXIT            *
*         CNVA = R15;                         /* SAVE RETURN CODE     *
         STH   @F,200(0,@6)                                       0258
*         IF CNVA ^= KON0                     /* IF IT IS AN ERROR    *
*           THEN                              /* GO BACK TO E02PIC06  *
         LH    @F,KON0                                            0259
         CH    @F,200(0,@6)                                       0259
*             GOTO E02PIC07;                  /* TO PROCESS IT        *
         BC    07,E02PIC07                                        0260
*         R1  = FTABIND;                      /* RESET REG1  TO FTAB  *
         L     @1,180(0,@6)                                       0261
*         R4  = ATABIND;                      /* SET REG4 POINTING TO
*                                               THE ATAB        Y01676*
         L     @4,172(0,@6)                                       0262
* /********************************************************************
**/*E02TEC05:      P CALCULATE PTR TO CURRENT SUBFIELD ELEMENT */
**/*E02TEC10:      P SET ATAB PTR TO FIRST ELEMENT OF FIRST ATAB BLOCK
**/**/
**/*E02TEC15:    P SET FTAB PTR TO FIRST ELEMENT OF FIRST FTAB BLOCK */
**/*      P (,E02TEC30) POINT TO FIRST PCE AND FIRST PDE */
**/*E02TEC20:      D (NO,,YES,E02TEC50) IS THIS LAST ELEMENT OF ATAB? *
**/*E02TEC25:      P UPDATE POINTERS FOR ATAB, PCL, PDL*/
**/*E02TEC30:      D (NO,,YES,E02TEC35) IS THIS A POSITIONAL PARM? */
**/*      D (NO,,YES,E02TEC40) IS THIS A KEYWORD WITH VALUE? */
**/*   P (,E02TEC20:RL) STORE KWRD IN ATAB & UPDATE PCL PTR & INDICATE
**/*IF KWRD PRESENT IN ATABFLGS*/
**/*E02TEC35:      D (YES,,NO,E02TEC45:RL) WILL VALUE FIT IN FTAB? */
**/*   P (,E02TEC20:BT) MOVE VALUE TO FTAB AND STORE ADDRESS IN ATAB */
* /********************************************************************
* E02TEC05: SBFCUR  = PCLIND + OTKW + KWOAR + KWWCNT * KON13 + KWWBYT;
E02TEC05 LH    @E,KON13                                           0263
         MH    @E,194(0,@6)                                       0263
         A     @E,KWOAR                                           0263
         L     @3,PCLIND                                          0263
         AH    @E,4(0,@3)                                         0263
         A     @E,PCLIND                                          0263
         AH    @E,198(0,@6)                                       0263
         ST    @E,@TEMP4                                          0263
         MVC   SBFCUR(3),@TEMP4+1                                 0263
* E02TEC10: IF R4 -> ATABLST ^= KON0          /* IF WE ARE NOT AT     *
*             THEN
E02TEC10 LH    @F,KON0                                            0264
         C     @F,0(0,@4)                                         0264
         BC    08,@9EA                                            0264
*               DO;                           /*  FIRST ATAB BLOCK    *
*                 R4 = R4 -> ATABLST;         /*   BACSTEP UNTIL FIRST*
         L     @4,0(0,@4)                                         0266
*                 GOTO E02TEC10;              /*    BLOCK IS          *
         BC    15,E02TEC10                                        0267
*               END;                          /*     REACHED          *
*         R5  = R4 + KON12;                   /* SET CUR ELMT PTR     *
@9EA     LH    @5,KON12                                           0269
         AR    @5,@4                                              0269
* E02TEC15: IF R1 -> FTABLST ^= KON0          /* IF WE ARE NOT AT     *
*             THEN
E02TEC15 LH    @F,KON0                                            0270
         C     @F,0(0,@1)                                         0270
         BC    08,@9E9                                            0270
*               DO;                           /*  FIRST ATAB BLOCK    *
*                 R1 = R1 -> FTABLST;         /*  BACSTEP UNTIL FIRST *
         L     @1,0(0,@1)                                         0272
*                 GOTO E02TEC15;              /*    BLOCK IS          *
         BC    15,E02TEC15                                        0273
*               END;                          /*     REACHED          *
*         R2  = R1 + KON12;                   /* SET CUR ELMT POINTER *
@9E9     LH    @2,KON12                                           0275
         AR    @2,@1                                              0275
*         PCLCUR  = PCLIND + KON6;            /* POINT TO 1ST PCE     *
         LH    @F,KON6                                            0276
         A     @F,PCLIND                                          0276
         ST    @F,PCLCUR                                          0276
*         PDLCUR  = PDLIND + KON8;            /* INIT PTR TO FIRST PDE*
         LH    @F,KON8                                            0277
         A     @F,PDLIND                                          0277
         ST    @F,PDLCUR                                          0277
*         GOTO  E02TEC30;                     /* BYPASS PTR UPDATE    *
         BC    15,E02TEC30                                        0278
* E02TEC20: IF (R5 -> ATABFLGS & KONX20) = KONX20
*             THEN                            /*IF THAT WAS LAST ELEM-*
E02TEC20 MVC   @CTEMP2(1),KONSTRUC+1                              0279
         NC    @CTEMP2(1),4(@5)                                   0279
         CLC   @CTEMP2(1),KONSTRUC+1                              0279
*               GOTO E02TEC50;                /* ENT   GO TO UPDATE TO
*                                                NEXT BLOCK           *
         BC    08,E02TEC50                                        0280
*         CNVC  = R5 -> ATABELNC;             /* ALIGN LENGTH OF ELMT *
         MVC   200(2,@6),5(@5)                                    0281
*         R5  = R5 + CNVA + KON7;             /* UPDATE PTR TO SUR ELM*
         LH    @F,KON7                                            0282
         AH    @F,200(0,@6)                                       0282
         AR    @5,@F                                              0282
* E02TEC25: CNVC = IDMODLNG;                  /* ALIGN LENGTH OF PCE  *
E02TEC25 L     @3,PCLCUR                                          0283
         MVC   200(2,@6),2(@3)                                    0283
*          PCLCUR  = PCLCUR + CNVA;           /* UPDATE PCL POINTER   *
         LH    @F,200(0,@6)                                       0284
         A     @F,PCLCUR                                          0284
         ST    @F,PCLCUR                                          0284
*          CNVC  = IDMODPDL;                  /* ALIGN PDE OFFSET     *
         LR    @3,@F                                              0285
         MVC   200(2,@6),4(@3)                                    0285
*          PDLCUR  = PDLIND + CNVA;           /* UPDATE POINTER TO PDE*
         LH    @F,200(0,@6)                                       0286
         A     @F,PDLIND                                          0286
         ST    @F,PDLCUR                                          0286
* E02TEC30: IF (R5 -> ATABFLGS & KONXC0) = KONX00
*                                             /* IF THIS IS A POSITION*
*             THEN                            /*  AL GO TO PERFORM    *
E02TEC30 MVC   @CTEMP2(1),KONSTRUC+5                              0287
         NC    @CTEMP2(1),4(@5)                                   0287
         CLC   @CTEMP2(1),KONSTRUC                                0287
*               GOTO E02TEC35;                /*   MOVE TO FTAB       *
         BC    08,E02TEC35                                        0288
*         IF (R5 -> ATABFLGS & KONX80) = KONX80
*           THEN                              /* IF THIS IS KWRD WITH *
         MVC   @CTEMP2(1),KONSTRUC+4                              0289
         NC    @CTEMP2(1),4(@5)                                   0289
         CLC   @CTEMP2(1),KONSTRUC+4                              0289
*             GOTO E02TEC40;                  /* VALUE GO TO PROPER
*                                                ROUTINE              *
         BC    08,E02TEC40                                        0290
*         TSTLNG  = KPDENUM;                  /* ALIGN VALUE FOR THIS *
         L     @3,PDLCUR                                          0291
         LH    @F,0(0,@3)                                         0291
         ST    @F,136(0,@6)                                       0291
*         R5  -> FTABPTR = TSTLNGC;           /* KWRD - 1 IF PRESENT
*                                                0 IF ABSENT - AND
*                                                STORE IN ATAB        *
         MVC   0(4,@5),136(@6)                                    0292
*         PCLCUR  = PCLCUR + KON6;            /* UPDATE PCL POINTER   *
         LH    @F,KON6                                            0293
         A     @F,PCLCUR                                          0293
         ST    @F,PCLCUR                                          0293
*         GOTO  E02TEC20;                     /* AND DO NEXT ENTRY    *
         BC    15,E02TEC20                                        0294
* E02TEC35: IF R1 -> FTABLNG - R1 -> FTABDLNG - KON4 < IPDELNG
*             THEN                            /* IF THE VALUE WILL    *
E02TEC35 LH    @F,KON4                                            0295
         LCR   @F,@F                                              0295
         SH    @F,10(0,@1)                                        0295
         AH    @F,8(0,@1)                                         0295
         L     @3,PDLCUR                                          0295
         CH    @F,4(0,@3)                                         0295
         BC    10,@9E8                                            0295
*               DO;                           /* NOT FIT CHECK IF     *
*                 IF R1 -> FTABNXT = KON0     /*THIS IS LAST FTAB     *
*                   THEN                      /* BLOCK - IF SO GO     *
         LH    @F,KON0                                            0297
         C     @F,4(0,@1)                                         0297
*                      GOTO E02TEC45;          /* GET CORE            *
         BC    08,E02TEC45                                        0298
*                 R1 = R1 -> FTABNXT;         /* ELSE UPDATE TO       *
         L     @1,4(0,@1)                                         0299
*                 R2 = R1 + KON12;            /* NEXT BLOCK AND       *
         LH    @2,KON12                                           0300
         AR    @2,@1                                              0300
*                 GOTO E02TEC35;              /* TRY AGAIN            *
         BC    15,E02TEC35                                        0301
*               END;
*         R2  = R1 + R1 -> FTABDLNG;          /* SET PTR BEYOND       *
@9E8     LH    @F,10(0,@1)                                        0303
         AR    @F,@1                                              0303
         LR    @2,@F                                              0303
*         NLOCC  = IPDEPTRC;                  /* ALIGN POINTER        *
         L     @3,PDLCUR                                          0304
         MVC   NLOC(4),0(@3)                                      0304
*         IF  IPDELNG ^= KON0                 /* LAST ELEMENT         *
*           THEN
         LH    @F,KON0                                            0305
         CH    @F,4(0,@3)                                         0305
         BC    08,@9E7                                            0305
*             R2 -> FTABDAT(1:IPDELNG) = FREP; /* MOVE TO FTAB  Y01676*
         L     @7,NLOC                                            0306
         LR    @E,@7                                              0306
         LH    @8,4(0,@3)                                         0306
         BCTR  @8,0                                               0306
         LA    @A,4(0,@2)                                         0306
         EX    @8,@MVC                                            0306
*         R2  -> FTABELNG(1) = KONX00;        /* INITIALIZE HI PART OF*
@9E7     MVC   0(1,@2),KONSTRUC                                   0307
*         R2  -> FTABELNG(2) = KONX00;        /*  LENGTH FIELD        *
         MVC   1(1,@2),KONSTRUC                                   0308
*         R2  -> FTABELNG(3:4) = IPDELNGC;    /* SET ELMT LENGTH      *
         L     @3,PDLCUR                                          0309
         MVC   2(2,@2),4(@3)                                      0309
*         R1  -> FTABDLNG = R1 -> FTABDLNG + IPDELNG + KON4;
         LH    @F,KON4                                            0310
         AH    @F,4(0,@3)                                         0310
         AH    @F,10(0,@1)                                        0310
         STH   @F,10(0,@1)                                        0310
*                                                  /* UPDATE NUMBER OF
*                                                     BYTES IN USE    *
*         TSTLNG  = R2;                            /*SAVE ADDR OF ELMT*
         ST    @2,136(0,@6)                                       0311
*         R5  -> FTABPTR = TSTLNGC;                /*AND STORE IN ATAB*
         MVC   0(4,@5),136(@6)                                    0312
*         GOTO  E02TEC20;
         BC    15,E02TEC20                                        0313
*         /************************************************************
*         /*              THE FOLLOWING CODE HANDLES A                *
*         /*              KWORD WITH VALUE ELEMENT - IF               *
*         /*              IT WAS PRESENT THE VALUE IS                 *
*         /*              OBTAINED AND EXIT IS MADE TO                *
*         /*              THE POSITIONAL ROUTINE TO                   *
*         /*              STORE IT IN FTAB - IF NOT THE               *
*         /*              THE POINTER IN TATB - IS SET TO 0 AND       *
*         /*              THE NEXT ELEMENT IS OBTAINED                *
*         /************************************************************
* /********************************************************************
**/*E02TEC40:      D (NO,,YES,%D11) WAS PARM IN THE INVOCATION STMT? */
**/*      P (,E02TEC20:BT) UPDATE PTR TO PCL ELEMENT AND GO LOOK AT NEX
**/*ENTRY */
**/*%D11:      P (,E02TEC35) SET PDE PTR & ELE PTR FOR VALUE IN FTAB */
* /********************************************************************
* E02TEC40: CNVC =  NSBFOF;                   /* ALIGN OFFSET TO SUBFLD
E02TEC40 MVC   @TEMP3+1(3),SBFCUR                                 0314
         L     @3,@TEMP3           SBFCUR                         0314
         MVC   200(2,@6),1(@3)                                    0314
*         IF  KPDENUM = KON0                  /* IF PARM WAS NOT IN
*           THEN
         LH    @F,KON0                                            0315
         L     @7,PDLCUR                                          0315
         CH    @F,0(0,@7)                                         0315
         BC    07,@9E6                                            0315
*             DO;                             /* INVOCATION STMT  UP-
*               SBFCUR  = PCLIND + CNVA;      /* DATE SUBFIELD POINTER
         LH    @F,200(0,@6)                                       0317
         A     @F,PCLIND                                          0317
         ST    @F,@TEMP4                                          0317
         MVC   SBFCUR(3),@TEMP4+1                                 0317
*               CNVC = IDMODLNG;              /* ALIGN LENGTH OF KWRD *
         L     @3,PCLCUR                                          0318
         MVC   200(2,@6),2(@3)                                    0318
*               PCLCUR  = PCLCUR + CNVA;      /* PCE - UPDATE POINTER *
         LH    @F,200(0,@6)                                       0319
         A     @F,PCLCUR                                          0319
         ST    @F,PCLCUR                                          0319
*               GOTO E02TEC20;                /* AND LOOK AT NEXT     *
         BC    15,E02TEC20                                        0320
*             END;                            /* ENTRY  - OTHERWISE   *
*         PDLCUR  = SBFCUR + KON3;            /* SET THE PDE          *
@9E6     LH    @F,KON3                                            0322
         MVC   @TEMP3+1(3),SBFCUR                                 0322
         A     @F,@TEMP3                                          0322
         ST    @F,PDLCUR                                          0322
*         SBFCUR  = PCLIND + CNVA;            /*  POINTER TO THE      *
         LH    @F,200(0,@6)                                       0323
         A     @F,PCLIND                                          0323
         ST    @F,@TEMP4                                          0323
         MVC   SBFCUR(3),@TEMP4+1                                 0323
*         CNVC  = PDLCUR -> IDMODPDL;         /*   CORRECT ENTRY      *
         L     @3,PDLCUR                                          0324
         MVC   200(2,@6),4(@3)                                    0324
*         PDLCUR  = PDLIND + CNVA;            /*    AND GO TO INSERT  *
         LH    @F,200(0,@6)                                       0325
         A     @F,PDLIND                                          0325
         ST    @F,PDLCUR                                          0325
*         CNVC  = IDMODLNG;                   /*  ALIGN ELMT LENGTH   *
         L     @3,PCLCUR                                          0326
         MVC   200(2,@6),2(@3)                                    0326
*         PCLCUR  = PCLCUR + CNVA;            /* UPDATE ELMT POINTER  *
         LH    @F,200(0,@6)                                       0327
         A     @F,PCLCUR                                          0327
         ST    @F,PCLCUR                                          0327
*         IF QSPRES = '1'B                    /* IF QUOTED STR  Y01676*
*           THEN                              /* PRESENT UPDATE Y01676*
         L     @3,PDLCUR                                          0328
         TM    6(@3),B'10000000'                                  0328
         BC    12,@9E5                                            0328
*             DO;                             /* PDE FIELDS     Y01676*
*               NLOC = PDLCUR + 8;            /* CHECK FOR CHAR Y01676*
         LA    @F,8                                               0330
         A     @F,PDLCUR                                          0330
         ST    @F,NLOC                                            0330
*               IF NLOC -> QSPRES = '1'B      /* STRING SPECI-  Y01676*
*                 THEN                        /* FIED ALSO      Y01676*
         LR    @7,@F                                              0331
         TM    6(@7),B'10000000'                                  0331
         BC    12,@9E4                                            0331
*                   DO;                       /* YES- TELL USER Y01676*
*                     LVL1NO = KON26;         /* IT IS IGNORED  Y01676*
         MVC   304(2,@6),KON26                                    0333
*                     LVL2NO = KON0;          /* VIA  A         Y01676*
         MVC   306(2,@6),KON0                                     0334
*                     VARSGADR = NLOC->QSPDEPTR; /* MESSAGE     Y01676*
         MVC   297(3,@6),1(@7)                                    0335
*                     CNVA = NLOC->IPDELNG + KON4; /* ADJUST LENGTH FOR
*                                                MESSAGE        Y01676*
         LH    @F,KON4                                            0336
         AH    @F,4(0,@7)                                         0336
         STH   @F,200(0,@6)                                       0336
*                     VARSGLNG = CNVC(2);     /* SAVE LENGTH    Y01676*
         MVC   296(1,@6),201(@6)                                  0337
*                     REGSAV(1) = R1;         /* SAVE FTAB PTR  Y01676*
         ST    @1,204(0,@6)                                       0338
*                     R1 = ADDR(E01DATDF);    /* GO  TO         Y01676*
         LR    @1,@6                                              0339
*                     GEN(LINK EP=IKJEFE04);  /* IKJEFE04       Y01676*
         LINK EP=IKJEFE04
         DS    0H
*                     R1 = REGSAV(1);         /* RESTORE THE FTAB
*                                                POINTER        Y01676*
         L     @1,204(0,@6)                                       0341
*                   END;                      /* AND USE QUOTED Y01676*
*             END;                            /* STRING VALUE   Y01676*
         BC    15,@9E3                                            0344
*           ELSE                              /* OTHERWISE UP-  Y01676*
*             PDLCUR = 8 + PDLCUR;            /* DATE TO CHARACTER
*                                                STRING AND GO  Y01676*
@9E5     L     @F,PDLCUR                                          0344
         AH    @F,@D2                                             0344
         ST    @F,PDLCUR                                          0344
*         GOTO  E02TEC35;                     /* PLACE VALUE IN FTAB  *
         BC    15,E02TEC35                                        0345
*         /************************************************************
*         /*              THE FOLLOWING OBTAINS MORE                  *
*         /*              STORAGE FOR FTAB WHEN THE                   *
*         /*              EXISTING BLOCKS HAVE BEEN                   *
*         /*              EXHAUSTED                                   *
*         /************************************************************
* /********************************************************************
**/*E02TEC45:      P CALCULATE MINIMUM AMT NEEDED IN FTAB BLOCK */
**/*      S IKJEFE03: PERFORM GETMAIN */
**/*      D (YES,,NO,E02EXT10) WAS GETMAIN SUCCESSFUL? */
**/*   P (,E02TEC35:BT) INITIALIZE PTR AND CONTROL FIELD OF NEW BLOCK *
* /********************************************************************
* E02TEC45: GMNMIN = IPDELNG + KON16;         /* SET MINIMUM AMOUNT   *
E02TEC45 LH    @F,KON16                                           0346
         L     @3,PDLCUR                                          0346
         AH    @F,4(0,@3)                                         0346
         ST    @F,140(0,@6)                                       0346
*         GMNMIN  = ((GMNMIN + KON7) / KON8) * KON8;
         LH    @E,KON7                                            0347
         A     @E,140(0,@6)                                       0347
         SRDA  @E,32                                              0347
         LH    @0,KON8                                            0347
         DR    @E,@0                                              0347
         MH    @F,KON8                                            0347
         ST    @F,140(0,@6)                                       0347
*                                             /*IF NOT A MULTIPLE OF 8*
*                                             /* ROUND UPWARDS        *
*         E01SW10  = '1'B;                    /* SET GETMAIN SWITCH   *
         OI    203(@6),B'01000000'                                0348
*         REGSAV(1) = R4;
         ST    @4,204(0,@6)                                       0349
*         R4  = KON1;                         /* SET SUBPOOL INDICATOR*
         LH    @4,KON1                                            0350
*         TSTLNG = R1;
         ST    @1,136(0,@6)                                       0351
*         R1  = R6;                           /*SET REG1 POINTING TO
*                                               DATA IN E01           *
         LR    @1,@6                                              0352
*         CALL IKJEFE03;                      /* PERFORM GETMAIN      *
         L     @F,@V1              ADDRESS OF IKJEFE03            0353
         BALR  @E,@F                                              0353
*         E01SW10  = '0'B;                    /* RESET SWITCH         *
         NI    203(@6),B'10111111'                                0354
*         IF  E01SW15 = '1'B                  /* IF WE COULD NOT GET  *
*           THEN                              /*  MINIMUM - CORE      *
         TM    203(@6),B'00000010'                                0355
*             GOTO E02EXT10;                  /*  RETURN TO CALLER    *
         BC    01,E02EXT10                                        0356
*         R1  = TSTLNG;                       /* RESTORE REG1         *
         L     @1,136(0,@6)                                       0357
*         R1  -> FTABNXT = ADDGMN;            /* SET OLD FORWARD PTR  *
         MVC   4(4,@1),148(@6)                                    0358
*         R1  -> FTABNXT -> FTABLST = R1;     /* SET NEW BACK PTR     *
         L     @3,4(0,@1)          
         ST    @1,0(0,@3)                                         0359
*         R1  = R1 -> FTABNXT;                /* SET CURRENT BLOCK PTR*
         L     @1,4(0,@1)                                         0360
*         R1  -> FTABNXT = KON0;              /* SET NEW FORWARD PTR  *
         LH    @F,KON0                                            0361
         ST    @F,4(0,@1)                                         0361
*         R1  -> FTABLNG = AMTGMN;            /* SET BLOCK LENGTH     *
         MVC   8(2,@1),154(@6)                                    0362
*         R2  = R1 + KON12;                   /* SET ELEMENT PTR      *
         LH    @2,KON12                                           0363
         AR    @2,@1                                              0363
*         R1  -> FTABDLNG = KON12;            /* SET NUMBER BYTES USED*
         MVC   10(2,@1),KON12                                     0364
*         R4 = REGSAV(1);
         L     @4,204(0,@6)                                       0365
*         GOTO E02TEC35;                      /* RETURN TO CALLER     *
         BC    15,E02TEC35                                        0366
*         /************************************************************
*         /*              THE FOLLOWING CODE PROVIDES                 *
*         /*              CONTINUITY BETWEEN BLOCKS OF                *
*         /*              ATAB                                        *
*         /************************************************************
* /********************************************************************
**/*E02TEC50:      D (NO,,YES,E02EXT10) IS THIS THE LAST ATAB BLOCK? */
**/*      P (,E02TEC25) UPDATE TO NEXT BLOCK */
**/*E02MML05:      P SET TERMINATION SWITCH */
**/*      S IKJEFE04: LINK TO MESSAGE MODULE */
**/*      D (YES,,NO,E02EXT15) IS THERE AN ATAB? */
**/*E02EXT10:      P SET PTR TO FIRST BLOCK OF FTAB */
**/*      S IKJEFE03: PERFORM FREEMAIN OF PCL */
**/*      P RELEASE THE PDL */
**/*E02EXT15:      R RETURN */
* /********************************************************************
* E02TEC50: IF R4 -> ATABNXT = KON0
*             THEN
E02TEC50 LH    @F,KON0                                            0367
         C     @F,4(0,@4)                                         0367
*               GOTO E02EXT10;                /*IF THIS LAST BLOCK IT *
         BC    08,E02EXT10                                        0368
*         R4  = R4 -> ATABNXT;                /* IS FINISHED - IF NOT *
         L     @4,4(0,@4)                                         0369
*         R5  = R4 + KON12;                   /* UPDATE TO NEXT BLOCK *
         LH    @5,KON12                                           0370
         AR    @5,@4                                              0370
*         GOTO  E02TEC25;                     /* AND CONTINUE         *
         BC    15,E02TEC25                                        0371
* E02MML05: E01SW9 = '1'B;                    /* SET TERMINATION SWITCH
E02MML05 OI    203(@6),B'10000000'                                0372
*         R1 = ADDR(E01DATDF);                /* SET REG1 POINTING TO
*                                                PARMS                *
         LR    @1,@6                                              0373
*         VARSGLNG = KONX00;                  /*SET CODE INDICATING NO
*                                               VARIABLE PART IN 2ND
*                                               LEVEL MESSAGE         *
         MVC   296(1,@6),KONSTRUC                                 0374
*         VARSGLN2 = KONX00;                  /*SET CODE INDICATING NO
*                                               VARIABLE PART IN 2ND
*                                               LEVEL MESSAGE         *
         MVC   300(1,@6),KONSTRUC                                 0375
*         GEN(LINK  EP=IKJEFE04);
         LINK  EP=IKJEFE04
         DS    0H
*         IF ATABIND = KON0                   /* IF THERE IS NO ATAB  *
*           THEN                              /*  OR FTAB BYPASS UPDATE
         LH    @F,KON0                                            0377
         C     @F,172(0,@6)                                       0377
*             GOTO E02EXT15;                  /*  OF FTAB PTR         *
         BC    08,E02EXT15                                        0378
* E02EXT10: IF FTABIND ^= KON0                /* BACKSTEP UNTIL       *
*             THEN                            /*  FIRST FTAB BLOCK    *
E02EXT10 LH    @F,KON0                                            0379
         C     @F,180(0,@6)                                       0379
         BC    08,@9E2                                            0379
*               IF FTABLST ^= KON0            /*  IS REACHED          *
*                 THEN                        /*  AND SET FTABIND     *
         L     @3,180(0,@6)        
         C     @F,0(0,@3)                                         0380
         BC    08,@9E1                                            0380
*                   DO;                       /*  POINTING            *
*                     FTABIND = FTABLST;      /*  TO THAT BLOCK       *
         MVC   180(4,@6),0(@3)                                    0382
*                     GOTO E02EXT10;
         BC    15,E02EXT10                                        0383
*                   END;
*         IF ATABIND ^= KON0                   /* IF PCL CORE WAS     *
*           THEN                               /* OBTAINED THEN IT    *
@9E1     EQU   *                                                  0385
@9E2     LH    @F,KON0                                            0385
         C     @F,172(0,@6)                                       0385
         BC    08,@9E0                                            0385
*             DO;                              /* MUST BE FREED       *
*               RESTRICT (R3);
*               R3 = LOPCL;                   /* SET REG3 TO AMT TO BE*
         L     @7,PCLIND                                          0388
         LH    @3,0(0,@7)                                         0388
*               R4  = KON1;                   /*  FREED AND REG4 TO   *
         LH    @4,KON1                                            0389
*               TSTLNG  = PCLIND;             /*  SUBPOOL NUMBER
*                                                 TSTLNG POINTS TO ADDR
*                                                 OF CORE TO BE FREED *
         MVC   136(4,@6),PCLIND                                   0390
*               R1  = R6;                     /* REG1 POINTS TO PARMS *
         LR    @1,@6                                              0391
*               E01SW13  = '1'B;              /* SET FREEMAIN SWITCH  *
         OI    203(@6),B'00001000'                                0392
*               CALL  IKJEFE03;               /*  PERFORM FREEMAIN    *
         L     @F,@V1              ADDRESS OF IKJEFE03            0393
         BALR  @E,@F                                              0393
*               E01SW13  = '0'B;              /* RESET SWITCH         *
         NI    203(@6),B'11110111'                                0394
*               RELEASE (R3);
*             END;
*         R2  = ADDR(PDLIND);                 /* RELEASE CORE OBTAINED*
@9E0     LA    @2,PDLIND                                          0397
*         GEN( IKJRLSA (R2));
          IKJRLSA (R2)
         DS    0H
* E02EXT15: RETURN;
         BC    15,@EL01                                           0399
*         GEN;
QALIST   IKJPARM DSECT=QCONT
QPRM1    IKJPOSIT QSTRING
QPRM2    IKJKEYWD
         IKJNAME  'LIST'
         IKJNAME  'NOLIST'
QPRM3    IKJKEYWD
         IKJNAME  'PROMPT'                                       Y01676
         IKJNAME  'NOPROMPT'                                     Y01676
         IKJENDP
         DS    0H
**/*IKJEFE02: END  */
*          END
* /* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.
* /*%INCLUDE SYSLIB  (IKJCPPL )
* /*%INCLUDE SYSLIB  (IKJECT  )
* /*%INCLUDE SYSLIB  (IKJPPL  )
* ;
@EL01    L     @D,4(0,@D)                                         0401
         LR    @1,@C                                              0401
         L     @0,@SIZ001                                         0401
         FREEMAIN R,LV=(0),A=(1)                                  0401
         L     @E,12(0,@D)                                        0401
         L     @0,20(0,@D)                                        0401
         LM    @2,@C,28(@D)                                       0401
         BCR   15,@E                                              0401
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D1      DC    H'2'
@D2      DC    H'8'
@MVC     MVC   0(1,@A),0(@E)
@V1      DC    V(IKJEFE03)
@V2      DC    V(QALIST)
         DS    0F
@SIZ001  DC    AL1(&SPN)
         DC    AL3(@DATEND-@DATD)
         DS    0F
         DS    0D
@DATA    EQU   *
DUMPARM  EQU   00000000            FULLWORD INTEGER
R1       EQU   00000001            FULLWORD POINTER REGISTER
R2       EQU   00000002            FULLWORD POINTER REGISTER
R3       EQU   00000003            FULLWORD POINTER REGISTER
R4       EQU   00000004            FULLWORD POINTER REGISTER
R5       EQU   00000005            FULLWORD POINTER REGISTER
R6       EQU   00000006            FULLWORD POINTER REGISTER
R15      EQU   00000015            FULLWORD POINTER REGISTER
KON0     EQU   *                   HALFWORD INTEGER
         DC    FL2'0'
KON1     EQU   *                   HALFWORD INTEGER
         DC    FL2'1'
KON2     EQU   *                   HALFWORD INTEGER
         DC    FL2'2'
KON3     EQU   *                   HALFWORD INTEGER
         DC    FL2'3'
KON4     EQU   *                   HALFWORD INTEGER
         DC    FL2'4'
KON6     EQU   *                   HALFWORD INTEGER
         DC    FL2'6'
KON7     EQU   *                   HALFWORD INTEGER
         DC    FL2'7'
KON8     EQU   *                   HALFWORD INTEGER
         DC    FL2'8'
KON10    EQU   *                   HALFWORD INTEGER
         DC    FL2'10'
KON11    EQU   *                   HALFWORD INTEGER
         DC    FL2'11'
KON12    EQU   *                   HALFWORD INTEGER
         DC    FL2'12'
KON13    EQU   *                   HALFWORD INTEGER
         DC    FL2'13'
KON16    EQU   *                   HALFWORD INTEGER
         DC    FL2'16'
KON20    EQU   *                   HALFWORD INTEGER
         DC    FL2'20'
KON21    EQU   *                   HALFWORD INTEGER
         DC    FL2'21'
KON24    EQU   *                   HALFWORD INTEGER
         DC    FL2'24'
KON26    EQU   *                   HALFWORD INTEGER
         DC    FL2'26'
KON34    EQU   *                   HALFWORD INTEGER
         DC    FL2'34'
KON35    EQU   *                   HALFWORD INTEGER
         DC    FL2'35'
KON58    EQU   *                   HALFWORD INTEGER
         DC    FL2'58'
KON54    EQU   *                   HALFWORD INTEGER
         DC    FL2'54'
KON57    EQU   *                   HALFWORD INTEGER
         DC    FL2'57'
KON224   EQU   *                   HALFWORD INTEGER
         DC    FL2'224'
KQUOTE   EQU   *                   1 BYTE(S)
         DC    X'7D'
KONSTRUC EQU   @DATA+00000048      7 BYTE(S) ON WORD
         ORG   KONSTRUC+00000000
KONX00   EQU   *                   1 BYTE(S)
         DC    X'00'
KONX20   EQU   *                   1 BYTE(S)
         DC    X'20'
KONX23   EQU   *                   1 BYTE(S)
         DC    X'23'
KONX40   EQU   *                   1 BYTE(S)
         DC    X'40'
KONX80   EQU   *                   1 BYTE(S)
         DC    X'80'
KONXC0   EQU   *                   1 BYTE(S)
         DC    X'C0'
KONXFF   EQU   *                   1 BYTE(S)
         DC    X'FF'
E01DATDF EQU   00000000            362 BYTE(S) ON DWORD
DCBAR    EQU   E01DATDF+00000000   88 BYTE(S) ON DWORD
ADPTR1   EQU   E01DATDF+00000088   FULLWORD POINTER
ADPTR2   EQU   E01DATDF+00000092   FULLWORD POINTER
MMNAMAR  EQU   E01DATDF+00000096   8 BYTE(S) ON WORD
RDECB    EQU   E01DATDF+00000104   20 BYTE(S) ON WORD
A00000   EQU   E01DATDF+00000104   6 BYTE(S)
DECLNGTH EQU   E01DATDF+00000110   HALFWORD INTEGER
A00001   EQU   E01DATDF+00000112   8 BYTE(S)
DECIOBPT EQU   E01DATDF+00000120   FULLWORD POINTER
LINPTR1  EQU   E01DATDF+00000124   FULLWORD POINTER
EOLCNT   EQU   E01DATDF+00000128   FULLWORD INTEGER
POSCNT   EQU   E01DATDF+00000132   FULLWORD INTEGER
TSTLNG   EQU   E01DATDF+00000136   FULLWORD INTEGER
TSTLNGC  EQU   E01DATDF+00000136   4 BYTE(S)
GMNMIN   EQU   E01DATDF+00000140   FULLWORD INTEGER
GMNMAX   EQU   E01DATDF+00000144   FULLWORD INTEGER
ADDGMN   EQU   E01DATDF+00000148   FULLWORD POINTER
AMTGMN   EQU   E01DATDF+00000152   FULLWORD INTEGER
SP78ADDR EQU   E01DATDF+00000156   FULLWORD POINTER
SP78LNGT EQU   E01DATDF+00000160   FULLWORD POINTER
RDXCNV   EQU   E01DATDF+00000164   FULLWORD INTEGER
A00002   EQU   E01DATDF+00000164   3 BYTE(S)
DDIG     EQU   E01DATDF+00000167   1 BYTE(S)
POSSPC   EQU   E01DATDF+00000168   FULLWORD INTEGER
ATABIND  EQU   E01DATDF+00000172   FULLWORD POINTER
ATABCUR  EQU   E01DATDF+00000176   FULLWORD POINTER
FTABIND  EQU   E01DATDF+00000180   FULLWORD POINTER
FTABCUR  EQU   E01DATDF+00000184   FULLWORD POINTER
VALCNT   EQU   E01DATDF+00000188   FULLWORD INTEGER
KWOCNT   EQU   E01DATDF+00000192   HALFWORD INTEGER
KWWCNT   EQU   E01DATDF+00000194   HALFWORD INTEGER
KWOBYT   EQU   E01DATDF+00000196   HALFWORD INTEGER
KWWBYT   EQU   E01DATDF+00000198   HALFWORD INTEGER
CNVA     EQU   E01DATDF+00000200   HALFWORD INTEGER
CNVC     EQU   E01DATDF+00000200   2 BYTE(S)
E01BINSW EQU   E01DATDF+00000202   2 BYTE(S) ON HWORD
E01SW1   EQU   E01DATDF+00000202   1 BIT(S)
E01SW2   EQU   E01DATDF+00000202   1 BIT(S)
E01SW3   EQU   E01DATDF+00000202   1 BIT(S)
E01SW4   EQU   E01DATDF+00000202   1 BIT(S)
E01SW5   EQU   E01DATDF+00000202   1 BIT(S)
E01SW6   EQU   E01DATDF+00000202   1 BIT(S)
E01SW7   EQU   E01DATDF+00000202   1 BIT(S)
E01SW8   EQU   E01DATDF+00000202   1 BIT(S)
E01SW9   EQU   E01DATDF+00000203   1 BIT(S)
E01SW10  EQU   E01DATDF+00000203   1 BIT(S)
E01SW11  EQU   E01DATDF+00000203   1 BIT(S)
E01SW12  EQU   E01DATDF+00000203   1 BIT(S)
E01SW13  EQU   E01DATDF+00000203   1 BIT(S)
E01SW14  EQU   E01DATDF+00000203   1 BIT(S)
E01SW15  EQU   E01DATDF+00000203   1 BIT(S)
E01SW16  EQU   E01DATDF+00000203   1 BIT(S)
REGSAV   EQU   E01DATDF+00000204   3*FULLWORD INTEGER
LATAB    EQU   E01DATDF+00000216   FULLWORD POINTER
LFTAB    EQU   E01DATDF+00000220   FULLWORD POINTER
BFAPTR   EQU   E01DATDF+00000224   FULLWORD INTEGER
BFBPTR   EQU   E01DATDF+00000228   FULLWORD POINTER
CPPLPTR  EQU   E01DATDF+00000232   FULLWORD POINTER
STPRM    EQU   E01DATDF+00000236   3*FULLWORD INTEGER
PPLPTR   EQU   E01DATDF+00000248   FULLWORD POINTER
CBCOR    EQU   E01DATDF+00000252   24 BYTE(S)
SRECB    EQU   E01DATDF+00000276   FULLWORD INTEGER
RETCDAR  EQU   E01DATDF+00000280   FULLWORD INTEGER
ABLK1    EQU   E01DATDF+00000284   FULLWORD POINTER
EOB      EQU   E01DATDF+00000288   FULLWORD POINTER
RCDST    EQU   E01DATDF+00000292   FULLWORD POINTER
VARSGLNG EQU   E01DATDF+00000296   1 BYTE(S)
VARSGADR EQU   E01DATDF+00000297   3  BYTE  POINTER ON WORD+1
VARSGLN2 EQU   E01DATDF+00000300   1 BYTE(S)
VARSGAD2 EQU   E01DATDF+00000301   3  BYTE  POINTER ON WORD+1
LVL1NO   EQU   E01DATDF+00000304   HALFWORD INTEGER
LVL2NO   EQU   E01DATDF+00000306   HALFWORD INTEGER
PDLPTR   EQU   E01DATDF+00000308   FULLWORD POINTER
DRDNPTR  EQU   E01DATDF+00000312   46 BYTE(S) ON WORD
DSNARLNG EQU   E01DATDF+00000312   HALFWORD INTEGER
DSNARLCH EQU   E01DATDF+00000312   2 BYTE(S)
DSNAMAR  EQU   E01DATDF+00000314   44 BYTE(S)
CBUFLSAV EQU   E01DATDF+00000358   HALFWORD INTEGER
CBUFLSAC EQU   E01DATDF+00000358   2 BYTE(S)
POSBYT   EQU   E01DATDF+00000360   HALFWORD INTEGER
CPPL     EQU   00000000            16 BYTE(S) ON WORD
CPPLCBUF EQU   CPPL+00000000       FULLWORD POINTER
CPPLUPT  EQU   CPPL+00000004       FULLWORD POINTER
CPPLPSCB EQU   CPPL+00000008       FULLWORD POINTER
CPPLECT  EQU   CPPL+00000012       FULLWORD POINTER
ECTPTR   EQU   00000012            FULLWORD POINTER
ECT      EQU   00000000            40 BYTE(S) ON WORD
ECTRCDF  EQU   ECT+00000000        1 BYTE(S)
ECTRTCD  EQU   ECT+00000001        3  BYTE  POINTER ON WORD+1
ECTIOWA  EQU   ECT+00000004        FULLWORD POINTER
ECTMSGF  EQU   ECT+00000008        1 BYTE(S)
ECTSMSG  EQU   ECT+00000009        3  BYTE  POINTER
ECTPCMD  EQU   ECT+00000012        8 BYTE(S)
ECTSCMD  EQU   ECT+00000020        8 BYTE(S)
ECTSWS   EQU   ECT+00000028        1 BYTE(S)
ECTNOPD  EQU   ECT+00000028        1 BIT(S)
A00003   EQU   ECT+00000028        1 BIT(S)
ECTATRM  EQU   ECT+00000028        1 BIT(S)
ECTLOGF  EQU   ECT+00000028        1 BIT(S)
ECTNMAL  EQU   ECT+00000028        1 BIT(S)
ECTNNOT  EQU   ECT+00000028        1 BIT(S)
ECTBKGRD EQU   ECT+00000028        1 BIT(S)
A00004   EQU   ECT+00000028        1 BIT(S)
ECTDDNUM EQU   ECT+00000029        3  BYTE  POINTER ON WORD+1
ECTUSER  EQU   ECT+00000032        FULLWORD POINTER
ECTBKPB  EQU   ECT+00000036        FULLWORD POINTER
CBUFPTR  EQU   00000000            FULLWORD POINTER
CBUF     EQU   00000000            5 BYTE(S) ON WORD
CBUFLNG  EQU   CBUF+00000000       HALFWORD POINTER
CBUFOFF  EQU   CBUF+00000002       HALFWORD POINTER
CBUFDATA EQU   CBUF+00000004       1 BYTE(S)
PPL      EQU   00000000            28 BYTE(S) ON WORD
PPLUPT   EQU   PPL+00000000        FULLWORD POINTER
PPLECT   EQU   PPL+00000004        FULLWORD POINTER
PPLECB   EQU   PPL+00000008        FULLWORD POINTER
PPLPCL   EQU   PPL+00000012        FULLWORD POINTER
PPLANS   EQU   PPL+00000016        FULLWORD POINTER
PPLCBUF  EQU   PPL+00000020        FULLWORD POINTER
PPLUWA   EQU   PPL+00000024        FULLWORD POINTER
ATAB     EQU   00000000            12 BYTE(S) ON WORD
ATABLST  EQU   ATAB+00000000       FULLWORD POINTER
ATABNXT  EQU   ATAB+00000004       FULLWORD POINTER
ATABLNG  EQU   ATAB+00000008       FULLWORD INTEGER
ATABELMT EQU   00000000            263 BYTE(S) ON WORD
FTABPTR  EQU   ATABELMT+00000000   4 BYTE(S)
ATABFLGS EQU   ATABELMT+00000004   1 BYTE(S)
ATABELNC EQU   ATABELMT+00000005   2 BYTE(S)
ATABDAT  EQU   ATABELMT+00000007   256 BYTE(S)
FTAB     EQU   00000000            12 BYTE(S) ON WORD
FTABLST  EQU   FTAB+00000000       FULLWORD POINTER
FTABNXT  EQU   FTAB+00000004       FULLWORD POINTER
FTABLNG  EQU   FTAB+00000008       HALFWORD INTEGER
FTABDLNG EQU   FTAB+00000010       HALFWORD INTEGER
FTABELMT EQU   00000000            260 BYTE(S) ON WORD
FTABELNG EQU   FTABELMT+00000000   4 BYTE(S)
FTABDAT  EQU   FTABELMT+00000004   256 BYTE(S)
PCELMT   EQU   00000000            57 BYTE(S)
PARMMOD  EQU   00000000            6 BYTE(S) ON WORD
LOPCL    EQU   PARMMOD+00000000    HALFWORD INTEGER
LOPDL    EQU   PARMMOD+00000002    HALFWORD INTEGER
OTKW     EQU   PARMMOD+00000004    HALFWORD INTEGER
IDMOD    EQU   @DATA+00000056      57 BYTE(S) ON WORD
         ORG   IDMOD+00000000
A00006   EQU   *                   2 BYTE(S)
         DC    X'9000'
A00007   EQU   *                   HALFWORD INTEGER
         DC    FL2'57'
A00008   EQU   *                   FULLWORD INTEGER
         DC    FL4'000'
A00009   EQU   *                   1 BYTE(S)
         DC    X'00'
A00010   EQU   *                   2 BYTE(S)
         DC    X'001A'
A00011   EQU   *                   2 BYTE(S)
         DC    X'0012'
A00012   EQU   *                   22 BYTE(S)
         DC    C'POSITIONAL PARAMETER  '
A00013   EQU   *                   1 BYTE(S)
         DC    X'14'
A00014   EQU   *                   21 BYTE(S)
         DC    C'POSITIONAL PARAMETER '
KWMOD    EQU   @DATA+00000116      11 BYTE(S) ON WORD
         ORG   KWMOD+00000000
A00015   EQU   *                   2 BYTE(S)
         DC    X'4000'
A00016   EQU   *                   HALFWORD INTEGER
         DC    FL2'6'
A00017   EQU   KWMOD+00000004      HALFWORD INTEGER
         ORG   KWMOD+00000006
A00018   EQU   *                   2 BYTE(S)
         DC    X'6000'
A00019   EQU   KWMOD+00000008      3 BYTE(S)
DUMIDENT EQU   00000000            313 BYTE(S)
A00020   EQU   DUMIDENT+00000000   3 BIT(S)
IDMODPMB EQU   DUMIDENT+00000000   1 BIT(S)
A00021   EQU   DUMIDENT+00000000   12 BIT(S)
IDMODLEN EQU   DUMIDENT+00000002   2  BYTE  INTEGER
IDMODLNG EQU   DUMIDENT+00000002   2 BYTE(S)
IDMODPDL EQU   DUMIDENT+00000004   2 BYTE(S)
A00022   EQU   DUMIDENT+00000006   7 BYTE(S)
IDMODTYP EQU   DUMIDENT+00000013   22 BYTE(S)
IDPRLEN  EQU   DUMIDENT+00000035   1 BYTE(S)
IDPOSPMT EQU   DUMIDENT+00000036   277 BYTE(S)
A00023   EQU   DUMIDENT+00000036   21 BYTE(S)
POSNAME  EQU   DUMIDENT+00000057   256 BYTE(S)
DUMKWORD EQU   00000000            267 BYTE(S) ON WORD
A00024   EQU   DUMKWORD+00000000   4 BYTE(S)
KWPDL    EQU   DUMKWORD+00000004   2 BYTE(S)
A00025   EQU   DUMKWORD+00000006   5 BIT(S)
KWSFB    EQU   DUMKWORD+00000006   1 BIT(S)
A00026   EQU   DUMKWORD+00000006   10 BIT(S)
KWELNG   EQU   DUMKWORD+00000008   2 BYTE(S)
KWNAMLNG EQU   DUMKWORD+00000010   1 BYTE(S)
KWDAT    EQU   DUMKWORD+00000011   256 BYTE(S)
         ORG   @DATA+00000127
TYPKW    EQU   *                   22 BYTE(S)
         DC    C' VALUE FOR KEYWORD    '
KWSBO    EQU   00000002            2 BYTE(S)
SBFMOD   EQU   *                   3 BYTE(S)
         DC    X'000000'
DUMSBF   EQU   00000000            3 BYTE(S) ON WORD
A00027   EQU   DUMSBF+00000000     1 BYTE(S)
NSBFOF   EQU   DUMSBF+00000001     2 BYTE(S)
FREP     EQU   00000000            32766 BYTE(S)
DUMIPDE  EQU   00000000            7 BYTE(S) ON WORD
IPDEPTRC EQU   DUMIPDE+00000000    4 BYTE(S)
IPDELNG  EQU   DUMIPDE+00000004    HALFWORD INTEGER
IPDELNGC EQU   DUMIPDE+00000004    2 BYTE(S)
IPDEFLGS EQU   DUMIPDE+00000006    1 BYTE(S)
DUMKPDE  EQU   00000000            2 BYTE(S) ON WORD
KPDENUM  EQU   DUMKPDE+00000000    HALFWORD INTEGER
EKPDE    EQU   00000000            4 BYTE(S) ON WORD
ELISTPDE EQU   EKPDE+00000000      HALFWORD INTEGER
EPRMTPDE EQU   EKPDE+00000002      HALFWORD INTEGER
QPOSMOD  EQU   @DATA+00000152      7 BYTE(S) ON WORD
A00028   EQU   *                   2 BYTE(S)
         DC    X'2000'
A00029   EQU   *                   HALFWORD INTEGER
         DC    FL2'7'
A00030   EQU   *                   HALFWORD INTEGER
         DC    FL2'0'
A00031   EQU   *                   1 BYTE(S)
         DC    X'09'
DUMQPOS  EQU   00000000            7 BYTE(S)
QMODOPT  EQU   DUMQPOS+00000000    2 BYTE(S)
QMODLGN  EQU   DUMQPOS+00000002    2  BYTE  INTEGER
QMODOFF  EQU   DUMQPOS+00000004    2 BYTE(S)
QMODTYP  EQU   DUMQPOS+00000006    1 BYTE(S)
DUMQPDE  EQU   00000000            8 BYTE(S) ON WORD
QSPDEPTR EQU   DUMQPDE+00000000    FULLWORD POINTER
QSPDELEN EQU   DUMQPDE+00000004    HALFWORD INTEGER
QSPDEFLG EQU   DUMQPDE+00000006    8 BIT(S)
QSPRES   EQU   DUMQPDE+00000006    1 BIT(S)
A00032   EQU   DUMQPDE+00000006    7 BIT(S)
A00033   EQU   DUMQPDE+00000007    1 BYTE(S)
         ORG   @DATA
         DS    00000159C
@L       EQU   6
@DATD    DSECT
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD
TEM01    EQU   @DATD+00000072      FULLWORD INTEGER
POSAR    EQU   @DATD+00000076      FULLWORD INTEGER
KWOAR    EQU   @DATD+00000080      FULLWORD INTEGER
KWWAR    EQU   @DATD+00000084      FULLWORD INTEGER
PCLIND   EQU   @DATD+00000088      FULLWORD POINTER
PCLCUR   EQU   @DATD+00000092      FULLWORD POINTER
PDLIND   EQU   @DATD+00000096      FULLWORD POINTER
PDLCUR   EQU   @DATD+00000100      FULLWORD POINTER
A00005   EQU   PDLCUR+00000000     2 BYTE(S)
PDLCURC  EQU   PDLCUR+00000002     2 BYTE(S)
SBFCUR   EQU   @DATD+00000105      3  BYTE  POINTER ON WORD+1
NLOC     EQU   @DATD+00000108      FULLWORD POINTER
NLOCC    EQU   NLOC+00000000       4 BYTE(S)
         DS    00000112C
@TEMPS   DS    0F
@TEMP2   DC    F'0'
@TEMP3   DC    F'0'
@TEMP4   DC    F'0'
@CTEMP2  DS    CL001
@DATEND  EQU   *
IKJEFE02 CSECT ,
@9F2     EQU   E02PIC08
@9E3     EQU   E02TEC35
E02EXT15 EQU   @EL01
@9E4     EQU   @9E3
         END
