         TITLE 'ALLOCATE VALIDITY CHECK EXITS                          *
                        '
IKJEFD37 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKJEFD37  74.341'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @11,8(,@13)                                         0001
         LR    @13,@11                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
*        AWAPTR = R1;                  /* SAVE PTR TO WORKAREA       */
         LR    AWAPTR,R1                                           0072
*        PPLUWA = ADDR(SAVEVAL);       /* USER WORD CONTAINS REGS    */
         L     @10,PPLPTR(,AWAPTR)                                 0073
         LA    @07,SAVEVAL                                         0073
         ST    @07,PPLUWA(,@10)                                    0073
*        GEN (STM 2,12,SAVEVAL);       /* STORE REGISTERS            */
         STM 2,12,SAVEVAL
*        PPLCBUF = CPPLCBUF;           /* CMD BUFFER IN PPL          */
         L     @10,PPLPTR(,AWAPTR)                                 0075
         L     @07,CPPLPTR(,AWAPTR)                                0075
         L     @07,CPPLCBUF(,@07)                                  0075
         ST    @07,PPLCBUF(,@10)                                   0075
*        IF ENTRYCD = 1 THEN           /* IF MAIN CALL TO PARSE,     */
         CLC   ENTRYCD(2,AWAPTR),@CH00032                          0076
         BNE   @RF00076                                            0076
*          DO;                         /* THEN                       */
*            PPLPCL = ADCONPCL;        /* PUT PCL ADDRESS IN PPL     */
         L     @07,ADCONPCL                                        0078
         ST    @07,PPLPCL(,@10)                                    0078
*            PPLANS = ADDR(PDLADDR);   /* PUT PDL ADDRESS IN PPL     */
         LA    @07,PDLADDR                                         0079
         ST    @07,PPLANS(,@10)                                    0079
*            PDLADDR = 0;              /* SET PDL ADDRESS TO 0       */
         SLR   @10,@10                                             0080
         ST    @10,PDLADDR                                         0080
*          END;                                                    0081
*        ELSE                          /* ELSE,                      */
*          DO;                         /* IF PROMPT CALL TO PARSE,   */
         B     @RC00076                                            0082
@RF00076 DS    0H                                                  0083
*             PPLANS = ADDR(PDLADDR2); /* PUT PDL ADDRESS IN PPL     */
         L     @10,PPLPTR(,AWAPTR)                                 0083
         LA    @07,PDLADDR2                                        0083
         ST    @07,PPLANS(,@10)                                    0083
*             PDLADDR2 = 0;            /* SET PDL ADDR TO 0          */
         SLR   @07,@07                                             0084
         ST    @07,PDLADDR2                                        0084
*             IF ENTRYCD = 2 THEN      /* IF STATUS PROMPT,          */
         CLC   ENTRYCD(2,AWAPTR),@CH00100                          0085
         BNE   @RF00085                                            0085
*               PPLPCL = ADCNPCLF;     /* SET PCL                    */
         L     @07,ADCNPCLF                                        0086
         ST    @07,PPLPCL(,@10)                                    0086
*             ELSE                                                 0087
*             IF ENTRYCD = 3 THEN      /* IF DSNAME PROMPT,          */
         B     @RC00085                                            0087
@RF00085 CLC   ENTRYCD(2,AWAPTR),@CH00339                          0087
         BNE   @RF00087                                            0087
*               PPLPCL = ADCNPCLA;     /* SET PCL                    */
         L     @10,PPLPTR(,AWAPTR)                                 0088
         L     @07,ADCNPCLA                                        0088
         ST    @07,PPLPCL(,@10)                                    0088
*             ELSE                                                 0089
*             IF ENTRYCD = 4 THEN      /* IF FILENAME PROMPT,        */
         B     @RC00087                                            0089
@RF00087 CLC   ENTRYCD(2,AWAPTR),@CH00337                          0089
         BNE   @RF00089                                            0089
*               PPLPCL = ADCNPCLE;     /* SET PCL                    */
         L     @10,PPLPTR(,AWAPTR)                                 0090
         L     @07,ADCNPCLE                                        0090
         ST    @07,PPLPCL(,@10)                                    0090
*             ELSE                                                 0091
*             IF ENTRYCD = 5 THEN      /* IF SPACE PROMPT,           */
         B     @RC00089                                            0091
@RF00089 CLC   ENTRYCD(2,AWAPTR),@CH00097                          0091
         BNE   @RF00091                                            0091
*               PPLPCL = ADCNPCLB;     /* SET PCL                    */
         L     @10,PPLPTR(,AWAPTR)                                 0092
         L     @07,ADCNPCLB                                        0092
         ST    @07,PPLPCL(,@10)                                    0092
*             ELSE                                                 0093
*             IF ENTRYCD = 6 THEN      /* IF DIR PROMPT,             */
         B     @RC00091                                            0093
@RF00091 CLC   ENTRYCD(2,AWAPTR),@CH00188                          0093
         BNE   @RF00093                                            0093
*               PPLPCL = ADCNPCLD;     /* SET PCL                    */
         L     @10,PPLPTR(,AWAPTR)                                 0094
         L     @07,ADCNPCLD                                        0094
         ST    @07,PPLPCL(,@10)                                    0094
*             ELSE                                                 0095
*             IF ENTRYCD = 7 THEN      /* IF BLOCK PROMPT,           */
         B     @RC00093                                            0095
@RF00093 CLC   ENTRYCD(2,AWAPTR),@CH00195                          0095
         BNE   @RF00095                                            0095
*               PPLPCL = ADCNPCLC;     /* SET PCL                    */
         L     @10,PPLPTR(,AWAPTR)                                 0096
         L     @07,ADCNPCLC                                        0096
         ST    @07,PPLPCL(,@10)                                    0096
*           END;                                                   0097
@RF00095 DS    0H                                                  0097
@RC00093 DS    0H                                                  0097
@RC00091 DS    0H                                                  0097
@RC00089 DS    0H                                                  0097
@RC00087 DS    0H                                                  0097
@RC00085 DS    0H                                                  0098
*        VCFLAGS = '00'X;              /* INITIALIZE FLAGS           */
@RC00076 MVI   VCFLAGS(AWAPTR),X'00'                               0098
*        R1 = PPLPTR;                  /* PPL IN REG 1               */
         L     R1,PPLPTR(,AWAPTR)                                  0099
*          DO; /*CALLTSSR EP(IKJPARS)*/                            0100
*            RESPECIFY GPR01P RSTD;                                0101
*            IF CVTPARS = 0                                        0102
*              THEN                                                0102
         L     @10,CVTPTR                                          0102
         L     @10,CVTPARS(,@10)                                   0102
         LTR   @10,@10                                             0102
         BNZ   @RF00102                                            0102
*                GEN(LINK EP=IKJPARS);                             0103
         LINK EP=IKJPARS
*              ELSE                                                0104
*                CALL CVTPARS;                                     0104
         B     @RC00102                                            0104
@RF00102 L     @10,CVTPTR                                          0104
         L     @15,CVTPARS(,@10)                                   0104
         BALR  @14,@15                                             0104
*            RESPECIFY GPR01P UNRSTD;                              0105
@RC00102 DS    0H                                                  0106
*          END;       /* INVOKE PARSE       @Y30NQKK*/             0106
*                                                                  0106
*        IF R15 > 0 THEN               /* IF PARSE FAILED            */
         SLR   @14,@14                                             0107
         CR    R15,@14                                             0107
         BNH   @RF00107                                            0107
*          DO;                         /* AND                        */
*            IF RCODESV = 0 THEN       /* IF NO ERROR IN VAL CHECK   */
         C     @14,RCODESV(,AWAPTR)                                0109
         BNE   @RF00109                                            0109
*              RCODESV = R15;          /* SAVE RETURN CODE           */
         ST    R15,RCODESV(,AWAPTR)                                0110
*          END;                                                    0111
*        ELSE                          /* ELSE                       */
*          RCODESV = R15;              /* SAVE GOOD RETURN CODE      */
         B     @RC00107                                            0112
@RF00107 ST    R15,RCODESV(,AWAPTR)                                0112
*        IF ENTRYCD = 1 THEN           /* IF MAIN CALL TO PARSE,     */
@RC00107 CLC   ENTRYCD(2,AWAPTR),@CH00032                          0113
         BNE   @RF00113                                            0113
*          PTRPDL = PDLADDR;           /* SAVE MAIN PDL ADDRESS      */
         L     @10,PDLADDR                                         0114
         ST    @10,PTRPDL(,AWAPTR)                                 0114
*        ELSE                          /* ELSE                       */
*          PMPTPDL = PDLADDR2;         /* SAVE PROMPT PDL            */
*                                                                  0115
         B     @RC00113                                            0115
@RF00113 L     @10,PDLADDR2                                        0115
         ST    @10,PMPTPDL(,AWAPTR)                                0115
*        RETURN;                       /* RETURN TO CALLER           */
@EL00001 L     @13,4(,@13)                                         0116
@EF00001 L     @00,@SIZDATD                                        0116
         LR    @01,@11                                             0116
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0116
         BR    @14                                                 0116
*        GENERATE;                                                 0117
IKJEFD3Z  IKJPARM DSECT=PCL
DSKEYWRD  IKJKEYWD
          IKJNAME  'DATASET',SUBFLD=DSNAME,ALIAS='DSNAME'      @Y30NQKK
          IKJNAME  'DUMMY'
FILE      IKJKEYWD
          IKJNAME  'FILE',SUBFLD=DDNAMFLD,ALIAS='DDNAME'       @Y30NQKK
STATUS    IKJKEYWD
          IKJNAME  'OLD'
          IKJNAME  'SHR'
          IKJNAME  'MOD'
          IKJNAME  'NEW'
          IKJNAME  'SYSOUT',SUBFLD=SYSCLASS
VOLUME    IKJKEYWD
          IKJNAME  'VOLUME',SUBFLD=SERIAL
*                                                              @Y30LPKH
          IKJNAME  'MSVGP',SUBFLD=VVIDENT
BLOCK     IKJKEYWD
          IKJNAME  'BLOCK',SUBFLD=BLKSIZE,ALIAS='BLKSIZE'      @Y30NQKK
          IKJNAME  'AVBLOCK',SUBFLD=ABLKSIZE
          IKJNAME  'TRACKS'
          IKJNAME  'CYLINDERS'
SPACE     IKJKEYWD
          IKJNAME  'SPACE',SUBFLD=QUANT
DIR       IKJKEYWD
          IKJNAME  'DIR',SUBFLD=INTEGER
USING     IKJKEYWD
          IKJNAME  'USING',SUBFLD=ATTRNAME
DEST      IKJKEYWD
          IKJNAME  'DEST',SUBFLD=USERID
HOLD      IKJKEYWD  DEFAULT='NOHOLD'
          IKJNAME  'HOLD'
          IKJNAME  'NOHOLD'
UNIT      IKJKEYWD
          IKJNAME  'UNIT',SUBFLD=UNITYPE
*                                                              @YM07624
UCOUNT    IKJKEYWD
          IKJNAME  'UCOUNT',SUBFLD=UNCNTSUB
          IKJNAME  'PARALLEL'
LABEL     IKJKEYWD
          IKJNAME  'LABEL',SUBFLD=LBLTYPE
POSITION  IKJKEYWD
          IKJNAME  'POSITION',SUBFLD=DSSEQ
MAXVOL    IKJKEYWD
          IKJNAME  'MAXVOL',SUBFLD=MXVOLSUB
PRIVATE   IKJKEYWD
          IKJNAME  'PRIVATE'
VSEQ      IKJKEYWD
          IKJNAME  'VSEQ',SUBFLD=VSSEQSUB
RELSE     IKJKEYWD
          IKJNAME  'RELEASE'
ROUND     IKJKEYWD
          IKJNAME  'ROUND'
DISP      IKJKEYWD
          IKJNAME  'KEEP'
          IKJNAME  'DELETE'
          IKJNAME  'CATALOG'
          IKJNAME  'UNCATALOG'
DSNAME    IKJSUBF
*                                                              @YM02616
DSNAMES   IKJPOSIT  DSTHING,LIST,USID,                                 X
               PROMPT='DATA SET NAME OR *',                            X
               HELP='NAME OF DATA SET TO BE ALLOCATED',                X
               VALIDCK=SYSDSN
DDNAMFLD  IKJSUBF
DDNMFLDS  IKJIDENT  'FILE NAME',                                       X
               MAXLNTH=8,                                              X
               FIRST=ALPHA,                                            X
               OTHER=ALPHANUM,                                         X
               PROMPT='FILE NAME',                                     X
               HELP='FILE NAME TO BE USED'
SYSCLASS  IKJSUBF
SYSOUTC   IKJIDENT  'SYSOUT CLASS',                                    X
               MAXLNTH=1,                                              X
               FIRST=NONATNUM,                                         X
               HELP='SYSTEM OUTPUT CLASS'
SERIAL    IKJSUBF
SERIALS   IKJIDENT  'VOLUME SERIAL',LIST,                              X
               FIRST=ALPHANUM,                                         X
               OTHER=ALPHANUM,                                         X
               MAXLNTH=6,                                              X
               PROMPT='VOLUME SERIAL NUMBER',                          X
               HELP='VOLUME SERIAL NUMBER ON WHICH DATA SET RESIDES',  X
               VALIDCK=SYSVLIST
BLKSIZE   IKJSUBF
BLKSIZES  IKJIDENT  'BLOCK SIZE',                                      X
               MAXLNTH=8,                                              X
               FIRST=NUMERIC,                                          X
               OTHER=NUMERIC,                                          X
               PROMPT='BLOCK SIZE',                                    X
               HELP='LENGTH OF OUTPUT RECORDS',                        X
               VALIDCK=SYSBLOCK
ABLKSIZE  IKJSUBF
ABLKSUB   IKJIDENT  'AVERAGE RECORD LENGTH',                           X
               MAXLNTH=8,                                              X
               FIRST=NUMERIC,                                          X
               OTHER=NUMERIC,                                          X
               VALIDCK=SYSABLOK,                                       X
               PROMPT='AVERAGE RECORD LENGTH',                         X
               HELP='LENGTH OF OUTPUT RECORDS'
QUANT     IKJSUBF
QUANTITY  IKJIDENT  'SPACE VALUE',                                     X
               MAXLNTH=8,                                              X
               FIRST=NUMERIC,                                          X
               OTHER=NUMERIC,                                          X
               PROMPT='SPACE VALUE AND IF ANY, INCREMENT VALUE',       X
               HELP='NUMBER OF RECORDS',                               X
               VALIDCK=SYSPACE1
QUANTIT2  IKJIDENT  'INCREMENT VALUE',                                 X
               MAXLNTH=8,                                              X
               FIRST=NUMERIC,                                          X
               OTHER=NUMERIC,                                          X
               VALIDCK=SYSPACE2
INTEGER   IKJSUBF
INTEGERS  IKJIDENT  'DIRECTORY QUANTITY',                              X
               MAXLNTH=8,                                              X
               FIRST=NUMERIC,                                          X
               OTHER=NUMERIC,                                          X
               PROMPT='NUMBER OF DIRECTORY BLOCKS',                    X
               HELP='NUMBER OF BLOCKS TO BE USED',                     X
               VALIDCK=SYSDIR
ATTRNAME  IKJSUBF
ATTRNAMS  IKJIDENT  'ATTR-LIST-NAME',                                  X
               MAXLNTH=8,                                              X
               FIRST=ALPHA,                                            X
               OTHER=ALPHANUM,                                         X
               PROMPT='ATTR-LIST-NAME',                                X
               HELP='ATTR-LIST-NAME TO BE USED'
USERID    IKJSUBF
USERIDS   IKJIDENT  'USERID IN THE DEST SUBFIELD',                     X
               MAXLNTH=7,                                              X
               FIRST=ALPHA,                                            X
               OTHER=ALPHANUM,                                         X
               PROMPT='USERID FOR THE DEST SUBFIELD',                  X
               HELP='LOGON ID OF A REMOTE USER'
UNITYPE   IKJSUBF
UNTYPES   IKJIDENT  'DEVICE TYPE',                                     X
               MAXLNTH=8,                                              X
               FIRST=ANY,                                              X
               OTHER=ANY,                                              X
               PROMPT='DEVICE TYPE TO BE ALLOCATED',                   X
               HELP='GENERIC DEVICE NAME, ESOTERIC DEVICE NAME, OR DEVIX
               CE ADDRESS'
UNCNTSUB  IKJSUBF
UCNTSUBS  IKJIDENT  'UNIT COUNT',                                      X
               MAXLNTH=2,                                              X
               FIRST=NUMERIC,                                          X
               OTHER=NUMERIC,                                          X
               PROMPT='UNIT COUNT',                                    X
               HELP='NUMBER OF DEVICES TO BE ALLOCATED',               X
               VALIDCK=SYSUCNT
LBLTYPE   IKJSUBF
LBLTYPES  IKJKEYWD  DEFAULT='SL'
          IKJNAME  'SL'
          IKJNAME  'SUL'
          IKJNAME  'AL'
          IKJNAME  'AUL'
          IKJNAME  'NL'
          IKJNAME  'NSL'
          IKJNAME  'LTM'
          IKJNAME  'BLP'
DSSEQ     IKJSUBF
DSSEQSUB  IKJIDENT  'DATA SET SEQUENCE NUMBER',                        X
               MAXLNTH=4,                                              X
               FIRST=NUMERIC,                                          X
               OTHER=NUMERIC,                                          X
               PROMPT='DATA SET SEQUENCE NUMBER',                      X
               HELP='RELATIVE POSITION OF DATA SET'
MXVOLSUB  IKJSUBF
MXVOLS    IKJIDENT  'VOLUME COUNT',                                    X
               MAXLNTH=3,                                              X
               FIRST=NUMERIC,                                          X
               OTHER=NUMERIC,                                          X
               PROMPT='VOLUME COUNT',                                  X
               HELP='MAXIMUM NUMBER OF VOLUMES',                       X
               VALIDCK=SYSMAX
VSSEQSUB  IKJSUBF
VSSEQSB   IKJIDENT  'VOLUME SEQUENCE NUMBER',                          X
               MAXLNTH=3,                                              X
               FIRST=NUMERIC,                                          X
               OTHER=NUMERIC,                                          X
               PROMPT='VOLUME SEQUENCE NUMBER',                        X
               VALIDCK=SYSMAX
*                                                              @Y30LPKH
VVIDENT  IKJSUBF
VVGPSUB  IKJIDENT   'MASS STORAGE GROUP',                              X
               MAXLNTH=8,                                              X
               FIRST=ALPHANUM,                                         X
               OTHER=ALPHANUM,                                         X
               PROMPT='MASS STORAGE GROUP',                            X
               HELP='MASS STORAGE GROUP ON WHICH DATA SET IS TO RESIDE'
         IKJENDP
ADCONPCL  DC A(IKJEFD3Z)
*        GENERATE;                                                 0118
* THE FOLLOWING PARAMETER CONTROL LIST IS USED WHEN IT IS NECESSARY
* TO PROMPT FOR THE DATA SET NAME
IKJEFD3A  IKJPARM DSECT=PCLA
*                                                              @YM02616
DSN       IKJPOSIT DSNAME,PROMPT='DATA SET NAME',LIST,USID,            X
               HELP='NAME OF DATA SET TO BE ALLOCATED'
          IKJENDP
ADCNPCLA  DC A(IKJEFD3A)
*        GENERATE;                                                 0119
* THE FOLLOWING IS THE PCL THAT IS USED FOR THE BLOCK PARAMETER WHEN
* IT MUST BE OBTAINED AFTER PARSE HAS FINISHED ITS INITIAL SCAN
IKJEFD3C  IKJPARM DSECT=PCLC
PBLOK     IKJTERM  'UNIT OF SPACE KEYWORD',                            X
               TYPE=VAR,SBSCRPT=PBLOKSUB,                              X
               PROMPT='UNIT OF SPACE KEYWORD WITH VALUE, IF ANY',      X
               HELP='BLOCK, BLKSIZE, AVBLOCK, TRACKS OR CYLINDERS',    X
               VALIDCK=SYSPBLK
PBLOKSUB  IKJTERM  'BLOCK OR AVBLOCK VALUE',                           X
               TYPE=CNST,SBSCRPT
          IKJENDP
ADCNPCLC  DC A(IKJEFD3C)
*        GENERATE;                                                 0120
* THE FOLLOWING PCL IS USED TO SCAN THE VALUE ENTERED ON THE UNIT
* OF SPACE PROMPT FOR A VALID PARAMETER
IKJEFD3Y  IKJPARM DSECT=PCLY
BLOKKY    IKJKEYWD
          IKJNAME  'BLOCK',SUBFLD=BLOKSUB,ALIAS='BLKSIZE'      @Y30NQKK
          IKJNAME  'AVBLOCK',SUBFLD=ABLOKSUB
          IKJNAME  'TRACKS'
          IKJNAME  'CYLINDERS'
BLOKSUB   IKJSUBF
BLOKS     IKJIDENT  'BLOCK SIZE',                                      X
               MAXLNTH=8,FIRST=NUMERIC,OTHER=NUMERIC,                  X
               PROMPT='BLOCK SIZE'
ABLOKSUB  IKJSUBF
ABLOKS    IKJIDENT  'AVERAGE RECORD LENGTH',                           X
               MAXLNTH=8,FIRST=NUMERIC,OTHER=NUMERIC,                  X
               PROMPT='AVERAGE RECORD LENGTH'
          IKJENDP
ADCNPCLY  DC   A(IKJEFD3Y)
*        GENERATE;                                                 0121
* THE FOLLOWING IS THE PCL THAT IS USED FOR THE SPACE PARAMETER WHEN IT
* MUST BE OBTAINED AFTER PARSE HAS FINISHED ITS INITIAL SCAN
IKJEFD3B  IKJPARM DSECT=PCLB
SPACEP    IKJIDENT  'SPACE VALUE',MAXLNTH=8,FIRST=NUMERIC,             X
               OTHER=NUMERIC,PROMPT='SPACE VALUE AND IF ANY, SPACE INCRX
               EMENT VALUE',HELP='NUMBER OF RECORDS',VALIDCK=SYSPACE1
SPACES    IKJIDENT  'SPACE INCREMENT VALUE', MAXLNTH=8,                X
               FIRST=NUMERIC,OTHER=NUMERIC,VALIDCK=SYSPACE2
          IKJENDP
ADCNPCLB  DC A(IKJEFD3B)
*        GENERATE;                                                 0122
* THE FOLLOWING PCL IS USED TO PROMPT FOR THE DIRECTORY QUANTITY WHEN
* A MEMBER NAME IS GIVEN WITHOUT A DIRECTORY AMOUNT
IKJEFD3D IKJPARM DSECT=PCLD
DIRECT   IKJIDENT  'DIRECTORY QUANTITY',MAXLNTH=8,FIRST=NUMERIC,       X
               OTHER=NUMERIC,PROMPT='NUMBER OF DIRECTORY BLOCKS',      X
               HELP='NUMBER OF BLOCKS TO BE USED',VALIDCK=SYSDIR
         IKJENDP
ADCNPCLD  DC A(IKJEFD3D)
*        GENERATE;                                                 0123
* THE FOLLOWING IS THE PCL USED TO PROMPT FOR STATUS
IKJEFD3F   IKJPARM  DSECT=PCLF
STATUS1  IKJTERM 'STATUS OR SYSOUT KEYWORD',                           X
               TYPE=VAR,SBSCRPT=STATSUB,                               X
               PROMPT='STATUS OR SYSOUT KEYWORD',                      X
               HELP='STATUS OF OLD, MOD, SHR, OR NEW, OR SYSOUT',      X
               VALIDCK=SYSTATS
STATSUB  IKJTERM  'OUTPUT CLASS',                                      X
               TYPE=ANY,SBSCRPT
          IKJENDP
ADCNPCLF DC A(IKJEFD3F)
*        GENERATE;                                                 0124
* THE FOLLOWING IS THE PCL USED TO SCAN STATUS ON THE CALL TO
* PARSE FROM THE VALIDITY CHECK EXIT SYSTATS
IKJEFD3X IKJPARM DSECT=PCLX
STATKEY  IKJKEYWD
         IKJNAME 'OLD'
         IKJNAME 'SHR'
         IKJNAME 'MOD'
         IKJNAME 'NEW'
         IKJNAME 'SYSOUT',SUBFLD=OUTCLASS
OUTCLASS IKJSUBF
OUTCLASB IKJIDENT 'SYSOUT CLASS',MAXLNTH=1,FIRST=NONATNUM
         IKJENDP
ADCNPCLX DC A(IKJEFD3X)
*        GENERATE;                                                 0125
* THE FOLLOWING PCL IS USED TO PROMPT FOR DDNAME
IKJEFD3E  IKJPARM DSECT=PCLE
PDDNAME   IKJIDENT 'FILE NAME',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM,   X
               PROMPT='FILE NAME'
          IKJENDP
ADCNPCLE  DC  A(IKJEFD3E)
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      SYSBLOCK                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS VALIDITY CHECK ROUTINE CHECKS THE BLOCK AND            */
*/*      AVBLOCK VALUES FOR THE MAXIMUM.                             */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      TWO ENTRY POINTS ARE DEFINED TO INDICATE WHICH PARAMETER    */
*/*      IS BEING PROCESSED - SYSBLOCK AND SYSABLOK. BOTH ENTRY      */
*/*      POINTS INVOKE THE MAIN PROCESSOR, SYSBLK. THE PARAMETER IS  */
*/*      CONVERTED TO BINARY AND CHECKED AGAINST THE MAXIMUM OF      */
*/*      65535. IF GREATER, THE RETURN CODE IS SET TO 8 AND AN       */
*/*      ERROR MESSAGE IS ISSUED.                                    */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDE                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RETURN CODE = 0-VALID PARAMETER                             */
*/*                    8-INVALID PARAMETER, PARSE PROMPTS            */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*                                      /* ENTRY FOR BLOCK            */
*    SYSBLOCK: PROC OPTIONS(NOSAVEAREA);                           0126
         B     @EL00001                                            0126
SYSBLOCK STM   @14,@12,12(@13)                                     0126
*        R15 = R1->VALWORK;            /* STORED REGISTERS           */
         L     R15,VALWORK(,R1)                                    0127
*        GENERATE;                     /* SET UP ADDRESSABILITY      */
*                                                                  0128
         LM  2,12,0(15)                   RESTORE ALLOC REGISTERS
         LA  14,SAVEVC                    VC SAVER IN REG 14
         ST  14,8(13)                     VC SAVER IN PARSE SAVER
         ST  13,4(14)                     PARSE SAVER IN VC SAVER
         LR  13,14                        VC SAVER IN REG 13
*        AVBLK = '0'B;                 /* INDICATE BLOCK ENTERED     */
         NI    AVBLK(AWAPTR),B'01111111'                           0129
*        CALL SYSBLK;                  /* PROCESS BLOCK PARAMETER    */
         BAL   @14,SYSBLK                                          0130
*        GEN (L 13,4(13));                                         0131
         L 13,4(13)
*        PARSRTC = PRCODE;                                         0132
         L     @10,PRCODE(,AWAPTR)                                 0132
         ST    @10,PARSRTC(,R13)                                   0132
*        RETURN;                       /* RETURN TO PARSE            */
@EL00002 DS    0H                                                  0133
@EF00002 DS    0H                                                  0133
@ER00002 LM    @14,@12,12(@13)                                     0133
         BR    @14                                                 0133
*     END SYSBLOCK;                                                0134
*                                      /* ENTRY FOR AVBLOCK          */
*    SYSABLOK: PROC OPTIONS(NOSAVEAREA);                           0135
SYSABLOK STM   @14,@12,12(@13)                                     0135
*        R15 = R1->VALWORK;            /* GET STORED REGISTERS       */
         L     R15,VALWORK(,R1)                                    0136
*        GENERATE;                     /* SET UP ADDRESSABILITY      */
*                                                                  0137
         LM  2,12,0(15)                   RESTORE ALLOC REGISTERS
         LA  14,SAVEVC                    VC SAVER IN REG 14
         ST  14,8(13)                     VC SAVER IN PARSE SAVER
         ST  13,4(14)                     PARSE SAVER IN VC SAVER
         LR  13,14                        VC SAVER IN REG 13
*        AVBLK = '1'B;                 /* INDICATE AVBLOCK ENTERED   */
         OI    AVBLK(AWAPTR),B'10000000'                           0138
*        CALL SYSBLK;                  /* PROCESS PARAMETER          */
         BAL   @14,SYSBLK                                          0139
*        AVBLK = '0'B;                 /* TURN OFF INDICATOR         */
         NI    AVBLK(AWAPTR),B'01111111'                           0140
*        GEN (L 13,4(13));                                         0141
         L 13,4(13)
*        PARSRTC = PRCODE;                                         0142
         L     @10,PRCODE(,AWAPTR)                                 0142
         ST    @10,PARSRTC(,R13)                                   0142
*        RETURN;                       /* RETURN TO PARSE            */
@EL00003 DS    0H                                                  0143
@EF00003 DS    0H                                                  0143
@ER00003 LM    @14,@12,12(@13)                                     0143
         BR    @14                                                 0143
*     END SYSABLOK;                                                0144
*                                                                  0144
*    SYSBLK: PROC;                     /* COMMON BLOCK & AVBLOCK RTN */
*                                                                  0145
SYSBLK   STM   @14,@12,@SA00004                                    0145
*         VCKPTR = R1;                 /* PARM LIST FROM REG 1       */
         LR    VCKPTR,R1                                           0146
*         PRCODE = 0;                  /* INIT RETURN CODE           */
         SLR   @10,@10                                             0147
         ST    @10,PRCODE(,AWAPTR)                                 0147
*         RCODESV = 0;                 /* INIT RET CODE IN WORKAREA  */
         ST    @10,RCODESV(,AWAPTR)                                0148
*         PKAREA(1) = 'F0'X;           /* 1ST BYTE IN PACKAREA F0    */
         MVI   PKAREA,X'F0'                                        0149
*         P = ADDR(PKAREA(1));         /* POINT TO 1ST BYTE          */
         LA    @10,PKAREA                                          0150
         ST    @10,P(,AWAPTR)                                      0150
*         Q = ADDR(PKAREA(2));         /* POINT TO 2ND BYTE          */
         LA    @07,PKAREA+1                                        0151
         ST    @07,Q(,AWAPTR)                                      0151
*         Q->AREA1 = P->AREA2;         /* CLEAR PACK AREA TO ALL F0  */
         MVC   AREA1(15,@07),AREA2(@10)                            0152
*         RFY Y RSTD;                  /* RESTRICT WORK REGISTER     */
*         Y = 8-VCBLKLEN+ADDR(PKAREA); /* MOVE VALUE INTO PACK AREA  */
         L     @10,VALPDE(,VCKPTR)                                 0154
         LH    @07,VCBLKLEN(,@10)                                  0154
         LA    Y,8                                                 0154
         SLR   Y,@07                                               0154
         LA    @04,PKAREA                                          0154
         ALR   Y,@04                                               0154
*         PKAREA1(1:VCBLKLEN) = VCBLKBUF(1:VCBLKLEN);              0155
         BCTR  @07,0                                               0155
         L     @10,VCBLKPTR(,@10)                                  0155
         EX    @07,@SM01301                                        0155
*         GENERATE REFS(CVBAREA);      /* PACK AND CONVERT TO BINARY */
         PACK  CVBAREA(8),PKAREA(8)
         CVB   Y,CVBAREA
*         IF Y > 65535 THEN            /* IF VALUE EXCEEDS MAXIMUM,  */
         C     Y,@CF01219                                          0157
         BNH   @RF00157                                            0157
*           DO;                        /* THEN,                      */
*             PRCODE = 8;              /* INDICATE PARSE PROMPT      */
         MVC   PRCODE(4,AWAPTR),@CF00116                           0159
*             MSGID = '103A';          /* SET MESSAGE ID             */
         L     @10,MSGPTR(,AWAPTR)                                 0160
         MVC   MSGID(4,@10),@CC01220                               0160
*             IF AVBLK = '1'B THEN     /* IF PROCESSING AVBLOCK,     */
         TM    AVBLK(AWAPTR),B'10000000'                           0161
         BNO   @RF00161                                            0161
*               DO;                    /* THEN                       */
*                 VAR1 = ADDR(AVBLOCK);/* PTR TO AVBLOCK VARIABLE    */
         LA    @09,AVBLOCK                                         0163
         ST    @09,@TF00001                                        0163
         MVC   VAR1(3,@10),@TF00001+1                              0163
*                 L1 = LENGTH(AVBLOCK);/* AND LENGTH IN PARM LIST    */
         MVI   L1(@10),X'07'                                       0164
*               END;                                               0165
*             ELSE                     /* ELSE,                      */
*               DO;                    /* ASSUME BLOCK -             */
         B     @RC00161                                            0166
@RF00161 DS    0H                                                  0167
*                 VAR1 = ADDR(BLKVAR); /* PTR TO BLOCK VARIABLE      */
         L     @10,MSGPTR(,AWAPTR)                                 0167
         LA    @09,BLKVAR                                          0167
         ST    @09,@TF00001                                        0167
         MVC   VAR1(3,@10),@TF00001+1                              0167
*                 L1 = LENGTH(BLKVAR); /* AND LENGTH IN PARM LIST    */
         MVI   L1(@10),X'0A'                                       0168
*               END;                                               0169
*             CALL VCPUTMSG;           /* ISSUE MESSAGE              */
@RC00161 BAL   @14,VCPUTMSG                                        0170
*             IF RCODESV > 0 THEN      /* IF MSG ROUTINE FAILED,     */
         L     @10,RCODESV(,AWAPTR)                                0171
         LTR   @10,@10                                             0171
         BNP   @RF00171                                            0171
*               PRCODE = 12;           /* INDICATE PARSE TERMINATE   */
         MVC   PRCODE(4,AWAPTR),@CF01223                           0172
*             ELSE                     /* ELSE,                      */
*               VALMSG = ADDR(MSG01);  /* PASS PARSE 2ND LEVEL MSG   */
         B     @RC00171                                            0173
@RF00171 LA    @10,MSG01                                           0173
         ST    @10,VALMSG(,VCKPTR)                                 0173
*           END;                                                   0174
*    END SYSBLK;                                                   0175
@EL00004 DS    0H                                                  0175
@EF00004 DS    0H                                                  0175
@ER00004 LM    @14,@12,@SA00004                                    0175
         BR    @14                                                 0175
*        RFY Y UNRSTD;                                             0176
*                                                                  0177
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      SYSPACE                                                     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS VALIDITY CHECK ROUTINE CHECKS THE SPACE, SPACE         */
*/*      INCREMENT, AND DIRECTORY VALUES FOR THE MAXIMUM.            */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THREE ENTRY POINTS ARE DEFINED TO INDICATE WHICH PARAMETER  */
*/*      IS BEING PROCESSED - SYSPACE1, SYSPACE2, SYSDIR. EACH       */
*/*      ENTRY POINT INVOKES THE MAIN PROCESSOR, SYSPACE. THE        */
*/*      PARAMETER IS CONVERTED TO BINARY AND CHECKED AGAINST THE    */
*/*      MAXIMUM OF 16,777,215. IF GREATER, THE RETURN CODE IS SET   */
*/*      TO 8, AND AN ERROR MESSAGE IS ISSUED.                       */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDE                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RETURN CODE = 0 - VALID PARAMETER                           */
*/*                    8 - INVALID PARAMETER, PARSE PROMPTS          */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*                                      /* ENTRY FOR SPACE            */
*    SYSPACE1: PROC OPTIONS(NOSAVEAREA);                           0177
SYSPACE1 STM   @14,@12,12(@13)                                     0177
*        R15 = R1->VALWORK;            /* GET STORED REGISTERS       */
         L     R15,VALWORK(,R1)                                    0178
*        GENERATE;                     /* SET UP ADDRESSABILITY      */
*                                                                  0179
         LM  2,12,0(15)                   RESTORE ALLOC REGISTERS
         LA  14,SAVEVC                    VC SAVER IN REG 14
         ST  14,8(13)                     VC SAVER IN PARSE SAVER
         ST  13,4(14)                     PARSE SAVER IN VC SAVER
         LR  13,14                        VC SAVER IN REG 13
*        SPACE1 = '1'B;                /* INDICATE SPACE             */
         OI    SPACE1(AWAPTR),B'01000000'                          0180
*        CALL SYSPACE;                 /* PROCESS PARAMETER          */
         BAL   @14,SYSPACE                                         0181
*        SPACE1 = '0'B;                /* TURN OFF INDICATOR         */
         NI    SPACE1(AWAPTR),B'10111111'                          0182
*        GEN (L 13,4(13));                                         0183
         L 13,4(13)
*        PARSRTC = PRCODE;                                         0184
         L     @10,PRCODE(,AWAPTR)                                 0184
         ST    @10,PARSRTC(,R13)                                   0184
*        RETURN;                       /* RETURN TO PARSE            */
@EL00005 DS    0H                                                  0185
@EF00005 DS    0H                                                  0185
@ER00005 LM    @14,@12,12(@13)                                     0185
         BR    @14                                                 0185
*     END SYSPACE1;                                                0186
*                                                                  0186
*                                      /* ENTRY FOR SPACE INCREMENT  */
*   SYSPACE2:  PROC OPTIONS(NOSAVEAREA);                           0187
SYSPACE2 STM   @14,@12,12(@13)                                     0187
*        R15 = R1->VALWORK;            /* GET STORED REGISTERS       */
         L     R15,VALWORK(,R1)                                    0188
*        GENERATE;                     /* SET UP ADDRESSABILITY      */
         LM  2,12,0(15)                   RESTORE ALLOC REGISTERS
         LA  14,SAVEVC                    VC SAVER IN REG 14
         ST  14,8(13)                     VC SAVER IN PARSE SAVER
         ST  13,4(14)                     PARSE SAVER IN VC SAVER
         LR  13,14                        VC SAVER IN REG 13
*        SPACE2 = '1'B;                /* INDICATE SECONDARY SPACE   */
         OI    SPACE2(AWAPTR),B'00100000'                          0190
*        CALL SYSPACE;                 /* PROCESS PARAMETER          */
         BAL   @14,SYSPACE                                         0191
*        SPACE2 = '0'B;                /* RESET INDICATOR            */
         NI    SPACE2(AWAPTR),B'11011111'                          0192
*        GEN (L 13,4(13));                                         0193
         L 13,4(13)
*        PARSRTC = PRCODE;                                         0194
         L     @10,PRCODE(,AWAPTR)                                 0194
         ST    @10,PARSRTC(,R13)                                   0194
*        RETURN;                       /* RETURN TO PARSE            */
@EL00006 DS    0H                                                  0195
@EF00006 DS    0H                                                  0195
@ER00006 LM    @14,@12,12(@13)                                     0195
         BR    @14                                                 0195
*     END SYSPACE2;                                                0196
*                                                                  0196
*                                      /* ENTRY FOR DIRECTORY        */
*   SYSDIR: PROC OPTIONS(NOSAVEAREA);                              0197
SYSDIR   STM   @14,@12,12(@13)                                     0197
*        R15 = R1->VALWORK;            /* GET STORED REGISTERS       */
         L     R15,VALWORK(,R1)                                    0198
*        GENERATE;                     /* SET UP ADDRESSABILITY      */
         LM  2,12,0(15)                   RESTORE ALLOC REGISTERS
         LA  14,SAVEVC                    VC SAVER IN REG 14
         ST  14,8(13)                     VC SAVER IN PARSE SAVER
         ST  13,4(14)                     PARSE SAVER IN VC SAVER
         LR  13,14                        VC SAVER IN REG 13
*        VCFLAGS = '00'X;              /* INDICATE DIRECTORY         */
         MVI   VCFLAGS(AWAPTR),X'00'                               0200
*        CALL SYSPACE;                 /* PROCESS PARAMETER          */
         BAL   @14,SYSPACE                                         0201
*        GEN (L 13,4(13));                                         0202
         L 13,4(13)
*        PARSRTC = PRCODE;                                         0203
         L     @10,PRCODE(,AWAPTR)                                 0203
         ST    @10,PARSRTC(,R13)                                   0203
*        RETURN;                       /* RETURN TO PARSE            */
@EL00007 DS    0H                                                  0204
@EF00007 DS    0H                                                  0204
@ER00007 LM    @14,@12,12(@13)                                     0204
         BR    @14                                                 0204
*     END SYSDIR;                                                  0205
*                                                                  0205
*   SYSPACE: PROC;                     /* COMMON SPACE AND DIR RTN   */
SYSPACE  STM   @14,@12,@SA00008                                    0206
*        VCKPTR = R1;                  /* PARM LIST FROM REG 1       */
         LR    VCKPTR,R1                                           0207
*        PRCODE = 0;                   /* INIT RETURN CODE           */
         SLR   @10,@10                                             0208
         ST    @10,PRCODE(,AWAPTR)                                 0208
*        RCODESV = 0;                  /* INIT RET CODE IN WORKAREA  */
         ST    @10,RCODESV(,AWAPTR)                                0209
*        PKAREA(1) = 'F0'X;            /* 1ST BYTE IN PACKAREA F0    */
         MVI   PKAREA,X'F0'                                        0210
*        P = ADDR(PKAREA(1));          /* POINT TO 1ST BYTE          */
         LA    @10,PKAREA                                          0211
         ST    @10,P(,AWAPTR)                                      0211
*        Q = ADDR(PKAREA(2));          /* POINT TO 2ND BYTE          */
         LA    @07,PKAREA+1                                        0212
         ST    @07,Q(,AWAPTR)                                      0212
*        Q->AREA1 = P->AREA2;          /* CLEAR PACKAREA TO ALL F0   */
         MVC   AREA1(15,@07),AREA2(@10)                            0213
*        RFY Y RSTD;                   /* RESTRICT WORK REGISTER     */
*        Y = 8-VCBLKLEN+ADDR(PKAREA);  /* MOVE PARM INTO AREA        */
         L     @10,VALPDE(,VCKPTR)                                 0215
         LH    @07,VCBLKLEN(,@10)                                  0215
         LA    Y,8                                                 0215
         SLR   Y,@07                                               0215
         LA    @04,PKAREA                                          0215
         ALR   Y,@04                                               0215
*        PKAREA1(1:VCBLKLEN)=VCBLKBUF(1:VCBLKLEN);                 0216
         BCTR  @07,0                                               0216
         L     @10,VCBLKPTR(,@10)                                  0216
         EX    @07,@SM01301                                        0216
*        GENERATE REFS(CVBAREA);       /* PACK & CONVERT TO BINARY   */
         PACK  CVBAREA(8),PKAREA(8)
         CVB   Y,CVBAREA
*        IF Y > 16777215 THEN          /* IF VALUE EXCEEDS MAX,      */
         C     Y,@CF01237                                          0218
         BNH   @RF00218                                            0218
*          DO;                         /* THEN -                     */
*            PRCODE = 8;               /* INDICATE PARSE PROMPT      */
         MVC   PRCODE(4,AWAPTR),@CF00116                           0220
*            MSGID = '103A';           /* SET MESSAGE ID             */
         L     @10,MSGPTR(,AWAPTR)                                 0221
         MVC   MSGID(4,@10),@CC01220                               0221
*            IF SPACE1 = '1'B THEN     /* IF SPACE ENTRY,            */
         TM    SPACE1(AWAPTR),B'01000000'                          0222
         BNO   @RF00222                                            0222
*              DO;                     /* THEN                       */
*                VAR1 = ADDR(SPC1);    /* PTR TO SPACE VARIABLE      */
         LA    @09,SPC1                                            0224
         ST    @09,@TF00001                                        0224
         MVC   VAR1(3,@10),@TF00001+1                              0224
*                L1 = LENGTH(SPC1);    /* AND LENGTH IN PARM LIST    */
         MVI   L1(@10),X'05'                                       0225
*              END;                                                0226
*            ELSE                      /* ELSE                       */
*            IF SPACE2 = '1'B THEN     /* IF SEC SPACE ENTRY,        */
         B     @RC00222                                            0227
@RF00222 TM    SPACE2(AWAPTR),B'00100000'                          0227
         BNO   @RF00227                                            0227
*              DO;                     /* THEN                       */
*                VAR1 = ADDR(SPC2);    /* PTR TO INCREMENT VARIABLE  */
         L     @10,MSGPTR(,AWAPTR)                                 0229
         LA    @09,SPC2                                            0229
         ST    @09,@TF00001                                        0229
         MVC   VAR1(3,@10),@TF00001+1                              0229
*                L1 = LENGTH(SPC2);    /* AND LENGTH IN PARM LIST    */
         MVI   L1(@10),X'0F'                                       0230
*              END;                                                0231
*            ELSE                      /* OTHERWISE,                 */
*              DO;                     /* ASSUME DIR ENTRY -         */
         B     @RC00227                                            0232
@RF00227 DS    0H                                                  0233
*                VAR1 = ADDR(DIR1);    /* PTR TO DIR VARIABLE        */
         L     @10,MSGPTR(,AWAPTR)                                 0233
         LA    @09,DIR1                                            0233
         ST    @09,@TF00001                                        0233
         MVC   VAR1(3,@10),@TF00001+1                              0233
*                L1 = LENGTH(DIR1);    /* AND LENGTH IN PARM LIST    */
         MVI   L1(@10),X'03'                                       0234
*              END;                                                0235
*            CALL VCPUTMSG;            /* ISSUE MESSAGE              */
@RC00227 DS    0H                                                  0236
@RC00222 BAL   @14,VCPUTMSG                                        0236
*            IF RCODESV > 0 THEN       /* IF MSG PROCESSOR FAILED,   */
         L     @10,RCODESV(,AWAPTR)                                0237
         LTR   @10,@10                                             0237
         BNP   @RF00237                                            0237
*              PRCODE = 12;            /* INDICATE PARSE TERMINATE   */
         MVC   PRCODE(4,AWAPTR),@CF01223                           0238
*            ELSE                      /* ELSE,                      */
*              VALMSG = ADDR(MSG01);   /* PASS 2ND LEVEL MSG         */
         B     @RC00237                                            0239
@RF00237 LA    @10,MSG01                                           0239
         ST    @10,VALMSG(,VCKPTR)                                 0239
*          END;                                                    0240
*   END  SYSPACE;                      /* RETURN                     */
@EL00008 DS    0H                                                  0241
@EF00008 DS    0H                                                  0241
@ER00008 LM    @14,@12,@SA00008                                    0241
         BR    @14                                                 0241
*        RFY Y UNRSTD;                                             0242
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      SYSDSN                                                      */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS VALIDITY CHECK ROUTINE CHECKS THE DATASET PARAMETER    */
*/*      FOR A MAXIMUM OF 255 DSNAMES IN THE LIST, AN ASTERISK       */
*/*      ENTERED AS DSNAME WITHIN THE LIST, AND A MEMBER NAME        */
*/*      SPECIFIED WITH NO DSNAME.                                   */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      A COUNTER IS INCREMENTED UPON ENTRY TO THE ROUTINE. IF THE  */
*/*      COUNTER EXCEEDS 255, THE RETURN CODE IS SET TO 12 AND AN    */
*/*      ERROR MESSAGE IS ISSUED. IF THE COUNTER IS GREATER THAN 1   */
*/*      AND AN ASTERISK HAS BEEN ENTERED AS DSNAME, THE RETURN CODE */
*/*      IS SET TO 12, AND AN ERROR MESSAGE IS ISSUED. IF A MEMBER   */
*/*      NAME HAS BEEN SPECIFIED WITH NO DSNAME, THE RETURN CODE IS  */
*/*      SET TO 4, AND A SECOND LEVEL MESSAGE IS PASSED TO PARSE.    */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDE                                                  */
*/*      DSNAME COUNTER                                              */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RETURN CODE = 0 - VALID PARAMETER                           */
*/*                    4 - INVALID PARAMETER, PARSE PROMPTS          */
*/*                   12 - INVALID PARAMETER, PARSE TERMINATES       */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*                                      /* ENTRY FOR DSNAME           */
*    SYSDSN: PROC OPTIONS(NOSAVEAREA);                             0243
SYSDSN   STM   @14,@12,12(@13)                                     0243
*        R15 = R1->VALWORK;            /* GET STORED REGISTERS       */
         L     R15,VALWORK(,R1)                                    0244
*        GENERATE;                     /* SET UP ADDRESSABILITY      */
         LM  2,12,0(15)                   RESTORE ALLOC REGISTERS
         LA  14,SAVEVC                    VC SAVER IN REG 14
         ST  14,8(13)                     VC SAVER IN PARSE SAVER
         ST  13,4(14)                     PARSE SAVER IN VC SAVER
         LR  13,14                        VC SAVER IN REG 13
*        VCKPTR = R1;                  /* PARM LIST FROM REG 1       */
         LR    VCKPTR,R1                                           0246
*        PRCODE = 0;                   /* INIT PARSE RETURN CODE     */
         SLR   @10,@10                                             0247
         ST    @10,PRCODE(,AWAPTR)                                 0247
*        RCODESV = 0;                  /* INIT RET CODE IN WORKAREA  */
         ST    @10,RCODESV(,AWAPTR)                                0248
*        IF FIRSTPDE = '0'B THEN       /* IS THIS 1ST DSNAME @YM05479*/
         TM    FIRSTPDE(AWAPTR),B'00000001'                        0249
         BNZ   @RF00249                                            0249
*          DO;                         /* YES -              @YM05479*/
*            FIRSTPDE = '1'B;          /* INDICATE SO        @YM05479*/
         OI    FIRSTPDE(AWAPTR),B'00000001'                        0251
*            FIRSTPTR = VALPDE;        /* SAVE PDE ADDR      @YM05479*/
         L     @10,VALPDE(,VCKPTR)                                 0252
         ST    @10,FIRSTPTR(,AWAPTR)                               0252
*          END;                        /*                    @YM05479*/
*        ELSE                          /* NO -               @YM05479*/
*          IF FIRSTPTR = VALPDE THEN   /* IS THIS PDE ADDR   @YM05479
*                                         IN 1ST LOCATION    @YM05479*/
         B     @RC00249                                            0254
@RF00249 CLC   FIRSTPTR(4,AWAPTR),VALPDE(VCKPTR)                   0254
         BNE   @RF00254                                            0254
*            DO;                       /* YES -              @YM05479*/
*              DSNCTR = 0;             /* RESET DSN COUNTER  @YM05479*/
         SLR   @10,@10                                             0256
         STH   @10,DSNCTR(,AWAPTR)                                 0256
*              ASTRSK = '0'B;          /* RESET * INDICATOR  @YM05479*/
         NI    ASTRSK(AWAPTR),B'11111011'                          0257
*            END;                      /*                    @YM05479*/
*        IF ASTRSK = '1'B THEN         /* IF * FOUND AS PREVIOUS DSN */
@RF00254 DS    0H                                                  0259
@RC00249 TM    ASTRSK(AWAPTR),B'00000100'                          0259
         BO    @RT00259                                            0259
*          GO TO INVASTK;              /* PROCESS ERROR              */
*        DSNCTR = DSNCTR + 1;          /* INCREMENT COUNTER          */
         LA    @10,1                                               0261
         AH    @10,DSNCTR(,AWAPTR)                                 0261
         STH   @10,DSNCTR(,AWAPTR)                                 0261
*        IF DSNCTR > 255 THEN          /* IF MORE THAN 255 DSNAMES,  */
         C     @10,@CF01242                                        0262
         BNH   @RF00262                                            0262
*          DO;                         /* THEN                       */
*            PRCODE  = 12;             /* INDICATE PARSE TERMINATE   */
         MVC   PRCODE(4,AWAPTR),@CF01223                           0264
*            MSGID = '107A';           /* SET MESSAGE ID             */
         L     @10,MSGPTR(,AWAPTR)                                 0265
         MVC   MSGID(4,@10),@CC01243                               0265
*            CALL VCPUTMSG;            /* ISSUE ERROR MESSAGE        */
         BAL   @14,VCPUTMSG                                        0266
*            AWARSV1 = '1'B;           /* INDICATE MSG ISSUED        */
         OI    AWARSV1(AWAPTR),B'00000010'                         0267
*          END;                                                    0268
*        ELSE                                                      0269
*          IF VCTERM = '*' THEN        /* IF THIS DSNAME IS *        */
         B     @RC00262                                            0269
@RF00262 L     @10,VALPDE(,VCKPTR)                                 0269
         L     @10,VCDSNPTR(,@10)                                  0269
         CLI   VCTERM(@10),C'*'                                    0269
         BNE   @RF00269                                            0269
*            DO;                       /* THEN                       */
*              IF DSNCTR = 1 THEN      /* IF 1ST DSNAME,             */
         CLC   DSNCTR(2,AWAPTR),@CH00032                           0271
         BNE   @RF00271                                            0271
*                ASTRSK = '1'B;        /* SET INDICATOR              */
         OI    ASTRSK(AWAPTR),B'00000100'                          0272
*              ELSE                    /* ELSE,                      */
*                DO;                   /* IF * WITHIN DSN LIST -     */
         B     @RC00271                                            0273
@RF00271 DS    0H                                                  0274
* INVASTK:                                                         0274
*                   PRCODE  = 12;      /* INDICATE PARSE TERMINATE   */
INVASTK  MVC   PRCODE(4,AWAPTR),@CF01223                           0274
*                   MSGID = '111A';    /* SET MESSAGE ID             */
         L     @10,MSGPTR(,AWAPTR)                                 0275
         MVC   MSGID(4,@10),@CC01246                               0275
*                   CALL VCPUTMSG;     /* ISSUE ERROR MESSAGE        */
         BAL   @14,VCPUTMSG                                        0276
*                   AWARSV1 = '1'B;    /* INDICATE MSG ISSUED        */
         OI    AWARSV1(AWAPTR),B'00000010'                         0277
*                END;                                              0278
*            END;                                                  0279
*          ELSE                                                    0280
*            IF VCDSNPRS = '0'B &      /* IF DSN NOT ENTERED AND     */
*               VCMBRPRS = '1'B THEN   /* MEMBER NAME IS ENTERED,    */
         B     @RC00269                                            0280
@RF00269 L     @10,VALPDE(,VCKPTR)                                 0280
         TM    VCDSNPRS(@10),B'10000000'                           0280
         BNZ   @RF00280                                            0280
         TM    VCMBRPRS(@10),B'10000000'                           0280
         BNO   @RF00280                                            0280
*              DO;                     /* THEN                       */
*                PRCODE = 4;           /* INDICATE PARSE PROMPT      */
         MVC   PRCODE(4,AWAPTR),@CF00337                           0282
*                VALMSG = ADDR(MSG02); /* PASS 2ND LEVEL MSG         */
         LA    @10,MSG02                                           0283
         ST    @10,VALMSG(,VCKPTR)                                 0283
*              END;                                                0284
*        GEN (L 13,4(13));             /* RESTORE PARSE REGISTERS    */
@RF00280 DS    0H                                                  0285
@RC00269 DS    0H                                                  0285
@RC00262 DS    0H                                                  0285
         L 13,4(13)
*        PARSRTC = PRCODE;             /* RETURN CODE IN REG 15      */
         L     @10,PRCODE(,AWAPTR)                                 0286
         ST    @10,PARSRTC(,R13)                                   0286
*   END  SYSDSN;                                                   0287
@EL00009 DS    0H                                                  0287
@EF00009 DS    0H                                                  0287
@ER00009 LM    @14,@12,12(@13)                                     0287
         BR    @14                                                 0287
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      SYSMAX                                                      */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS VALIDITY CHECK ROUTINE CHECKS THE VOLUME COUNT AND     */
*/*      VOLUME SEQUENCE NUMBER FOR THE MAXIMUM VALUE.               */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE VALUE IN THE PDE IS CONVERTED TO BINARY. IF GREATER     */
*/*      THAN 255, SET PARSE RETURN CODE TO 4.                       */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDE                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RETURN CODE = 0 - VALID PARAMETER                           */
*/*                    4 - INVALID PARAMETER, PARSE PROMPTS          */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*                                      /* ENTRY FOR MAXVOL & VSEQ    */
*    SYSMAX: PROC OPTIONS(NOSAVEAREA);                             0288
SYSMAX   STM   @14,@12,12(@13)                                     0288
*        R15 = R1->VALWORK;            /* GET STORED REGISTERS       */
         L     R15,VALWORK(,R1)                                    0289
*        GEN (LM 2,12,0(15));          /* RESTORE ALLOC REGISTERS    */
         LM 2,12,0(15)
*        VCKPTR = R1;                  /* PARM LIST FROM REG 1       */
         LR    VCKPTR,R1                                           0291
*        PARSRTC = 0;                  /* INIT RETURN CODE           */
         SLR   @10,@10                                             0292
         ST    @10,PARSRTC(,R13)                                   0292
*        RCODESV = 0;                  /* INIT RET CODE IN WORKAREA  */
         ST    @10,RCODESV(,AWAPTR)                                0293
*        PKAREA(1) = 'F0'X;            /* 1ST BYTE IN PACKAREA F0    */
         MVI   PKAREA,X'F0'                                        0294
*        P = ADDR(PKAREA(1));          /* POINT TO 1ST BYTE          */
         LA    @10,PKAREA                                          0295
         ST    @10,P(,AWAPTR)                                      0295
*        Q = ADDR(PKAREA(2));          /* POINT TO 2ND BYTE          */
         LA    @07,PKAREA+1                                        0296
         ST    @07,Q(,AWAPTR)                                      0296
*        Q->AREA1 = P->AREA2;          /* CLEAR PACKAREA TO ALL F0   */
         MVC   AREA1(15,@07),AREA2(@10)                            0297
*        RFY Y RSTD;                   /* RESTRICT WORK REGISTER     */
*        Y = 8-VCBLKLEN+ADDR(PKAREA);  /* MOVE VALUE TO PACKAREA     */
         L     @10,VALPDE(,VCKPTR)                                 0299
         LH    @07,VCBLKLEN(,@10)                                  0299
         LA    Y,8                                                 0299
         SLR   Y,@07                                               0299
         LA    @04,PKAREA                                          0299
         ALR   Y,@04                                               0299
*        PKAREA1(1:VCBLKLEN)=VCBLKBUF(1:VCBLKLEN);                 0300
         BCTR  @07,0                                               0300
         L     @10,VCBLKPTR(,@10)                                  0300
         EX    @07,@SM01301                                        0300
*        GENERATE REFS(CVBAREA);       /* PACK & CONVERT TO BINARY   */
         PACK  CVBAREA(8),PKAREA(8)
         CVB   Y,CVBAREA
*        IF Y> 255 THEN                /* IF VALUE EXCEEDS 255,      */
         C     Y,@CF01242                                          0302
         BNH   @RF00302                                            0302
*          PARSRTC = 4;                /* INDICATE PARSE PROMPT      */
         MVC   PARSRTC(4,R13),@CF00337                             0303
*   END SYSMAX;                                                    0304
@EL00010 DS    0H                                                  0304
@EF00010 DS    0H                                                  0304
@ER00010 LM    @14,@12,12(@13)                                     0304
         BR    @14                                                 0304
*        RFY Y UNRSTD;                                             0305
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      SYSUCNT                                                     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS VALIDITY CHECK ROUTINE CHECKS THE UNITCOUNT PARAMETER  */
*/*      FOR THE MAXIMUM VALUE.                                      */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE VALUE IN THE PDE IS CONVERTED TO BINARY. IF GREATER     */
*/*      THAN 59, SET PARSE RETURN CODE TO 4.                        */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDE                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RETURN CODE = 0 - VALID PARAMETER                           */
*/*                    4 - INVALID PARAMETER, PARSE PROMPTS          */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*                                      /* ENTRY FOR UCOUNT           */
*    SYSUCNT:  PROC OPTIONS(NOSAVEAREA);                           0306
SYSUCNT  STM   @14,@12,12(@13)                                     0306
*        R15 = R1->VALWORK;            /* GET STORED REGISTERS       */
         L     R15,VALWORK(,R1)                                    0307
*        GEN (LM 2,12,0(15));          /* RESTORE ALLOC REGISTERS    */
         LM 2,12,0(15)
*        VCKPTR = R1;                  /* PARM LIST FROM REG 1       */
         LR    VCKPTR,R1                                           0309
*        PARSRTC = 0;                  /* INIT RETURN CODE           */
         SLR   @10,@10                                             0310
         ST    @10,PARSRTC(,R13)                                   0310
*        RCODESV = 0;                  /* INIT RET CODE IN WORKAREA  */
         ST    @10,RCODESV(,AWAPTR)                                0311
*        PKAREA(1) = 'F0'X;            /* 1ST BYTE IN PACKAREA F0    */
         MVI   PKAREA,X'F0'                                        0312
*        P = ADDR(PKAREA(1));          /* POINT TO 1ST BYTE          */
         LA    @10,PKAREA                                          0313
         ST    @10,P(,AWAPTR)                                      0313
*        Q = ADDR(PKAREA(2));          /* POINT TO 2ND BYTE          */
         LA    @07,PKAREA+1                                        0314
         ST    @07,Q(,AWAPTR)                                      0314
*        Q->AREA1 = P->AREA2;          /* CLEAR PACKAREA TO ALL F0   */
         MVC   AREA1(15,@07),AREA2(@10)                            0315
*        RFY Y RSTD;                   /* RESTRICT WORK REGISTER     */
*        Y = 8-VCBLKLEN+ADDR(PKAREA);  /* MOVE VALUE INTO PACKAREA   */
         L     @10,VALPDE(,VCKPTR)                                 0317
         LH    @07,VCBLKLEN(,@10)                                  0317
         LA    Y,8                                                 0317
         SLR   Y,@07                                               0317
         LA    @04,PKAREA                                          0317
         ALR   Y,@04                                               0317
*        PKAREA1(1:VCBLKLEN)=VCBLKBUF(1:VCBLKLEN);                 0318
         BCTR  @07,0                                               0318
         L     @10,VCBLKPTR(,@10)                                  0318
         EX    @07,@SM01301                                        0318
*        GENERATE REFS(CVBAREA);       /* PACK & CONVERT TO BINARY   */
         PACK  CVBAREA(8),PKAREA(8)
         CVB   Y,CVBAREA
*        IF Y > 59 THEN                /* IF PARM EXCEEDS 59,        */
         C     Y,@CF01253                                          0320
         BNH   @RF00320                                            0320
*          PARSRTC = 4;                /* PARSE PROMPTS              */
         MVC   PARSRTC(4,R13),@CF00337                             0321
*   END  SYSUCNT;                                                  0322
@EL00011 DS    0H                                                  0322
@EF00011 DS    0H                                                  0322
@ER00011 LM    @14,@12,12(@13)                                     0322
         BR    @14                                                 0322
*        RFY Y UNRSTD;                                             0323
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      SYSVLIST                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS VALIDITY CHECK ROUTINE COUNTS THE NUMBER OF VOLUME     */
*/*      SERIALS SPECIFIED ON THE VOLUME PARAMETER.                  */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      A COUNTER IS INCREMENTED.                                   */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDE                                                  */
*/*      VLISTCTR - COUNTER FOR VOLUME SERIALS                       */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RETURN CODE = 0 - VALID PARAMETER                           */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*                                      /* ENTRY FOR VOLUME           */
*    SYSVLIST: PROC OPTIONS(NOSAVEAREA);                           0324
SYSVLIST STM   @14,@12,12(@13)                                     0324
*        R15 = R1->VALWORK;            /* GET STORED REGISTERS       */
         L     R15,VALWORK(,R1)                                    0325
*        GEN (LM 2,12,0(15));          /* RESTORE ALLOC REGISTERS    */
         LM 2,12,0(15)
*        VCKPTR = R1;                  /* PARM LIST FROM REG 1       */
         LR    VCKPTR,R1                                           0327
*        PARSRTC = 0;                  /* INITIALIZE RETURN CODE     */
         SLR   @10,@10                                             0328
         ST    @10,PARSRTC(,R13)                                   0328
*        RCODESV = 0;                  /* INIT RET CODE IN WORKAREA  */
         ST    @10,RCODESV(,AWAPTR)                                0329
*        VLISTCTR = VLISTCTR + 1;      /* INCREMENT COUNTER          */
         LA    @10,1                                               0330
         AH    @10,VLISTCTR(,AWAPTR)                               0330
         STH   @10,VLISTCTR(,AWAPTR)                               0330
*   END SYSVLIST;                                                  0331
@EL00012 DS    0H                                                  0331
@EF00012 DS    0H                                                  0331
@ER00012 LM    @14,@12,12(@13)                                     0331
         BR    @14                                                 0331
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      SYSTATS                                                     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS VALIDITY CHECK ROUTINE CHECKS THE STATUS ENTERED ON    */
*/*      THE PROMPT FOR A VALID KEYWORD.                             */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      IF MORE THAN ONE SUBSCRIPT IS ENTERED, PARSE RETURN CODE    */
*/*      IS SET TO 4. ELSE, SET UP A NEW COMMAND BUFFER WITH THE     */
*/*      PARAMETERS ENTERED ON THE PROMPT. INVOKE PARSE, PASSING     */
*/*      A LIST OF KEYWORDS IN THE PCL. IF PARSE FINDS A MATCH,      */
*/*      MOVE THE PARAMETER INTO THE ORIGINAL PDE.                   */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDE                                                  */
*/*      THIRD LEVEL PCL                                             */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RETURN CODE = 0 - VALID PARAMETER                           */
*/*                    4 - INVALID PARAMETER, PARSE PROMPTS          */
*/********************************************************************/
*                                      /* ENTRY FOR STATUS           */
*    SYSTATS: PROC OPTIONS(NOSAVEAREA);                            0332
SYSTATS  STM   @14,@12,12(@13)                                     0332
*        R15 = R1->VALWORK;            /* GET STORED REGISTERS       */
         L     R15,VALWORK(,R1)                                    0333
*        GENERATE;                     /* SET UP ADDRESSABILITY      */
         LM  2,12,0(15)                   RESTORE ALLOC REGISTERS
         LA  14,SAVEVC                    VC SAVER IN REG 14
         ST  14,8(13)                     VC SAVER IN PARSE SAVER
         ST  13,4(14)                     PARSE SAVER IN VC SAVER
         LR  13,14                        VC SAVER IN REG 14
*        VCKPTR = R1;                  /* PARM LIST FROM REG 1       */
         LR    VCKPTR,R1                                           0335
*        PRCODE = 0;                   /* INIT PARSE RETURN CODE     */
         SLR   @10,@10                                             0336
         ST    @10,PRCODE(,AWAPTR)                                 0336
*        IF SUBNMBR > 1 THEN           /* IF MORE THAN 1 SUBSCRIPT,  */
         L     @10,VALPDE(,VCKPTR)                                 0337
         CLI   SUBNMBR(@10),1                                      0337
         BNH   @RF00337                                            0337
*          PRCODE = 4;                 /* INDICATE PARSE PROMPT      */
         MVC   PRCODE(4,AWAPTR),@CF00337                           0338
*        ELSE                                                      0339
*          DO;                         /* ELSE,                      */
         B     @RC00337                                            0339
@RF00337 DS    0H                                                  0340
*            SAVPPL = PPLPTR;                                      0340
         L     SAVPPL,PPLPTR(,AWAPTR)                              0340
*            CALL PARSLINK;            /* SET UP FOR CALL TO PARSE   */
         BAL   @14,PARSLINK                                        0341
*            R1 = PPLPTR;              /* PPL IN REG 1               */
         L     R1,PPLPTR(,AWAPTR)                                  0342
*              DO; /*CALLTSSR EP(IKJPARS)*/                        0343
*                RESPECIFY GPR01P RSTD;                            0344
*                IF CVTPARS = 0                                    0345
*                  THEN                                            0345
         L     @10,CVTPTR                                          0345
         L     @10,CVTPARS(,@10)                                   0345
         LTR   @10,@10                                             0345
         BNZ   @RF00345                                            0345
*                    GEN(LINK EP=IKJPARS);                         0346
         LINK EP=IKJPARS
*                  ELSE                                            0347
*                    CALL CVTPARS;                                 0347
         B     @RC00345                                            0347
@RF00345 L     @10,CVTPTR                                          0347
         L     @15,CVTPARS(,@10)                                   0347
         BALR  @14,@15                                             0347
*                RESPECIFY GPR01P UNRSTD;                          0348
@RC00345 DS    0H                                                  0349
*              END;   /* INVOKE PARSE       @Y30NQKK*/             0349
*            RCODESV = R15;            /* SAVE RETURN CODE           */
         ST    R15,RCODESV(,AWAPTR)                                0350
*            IF RCODESV > 0 THEN       /* IF PARSE FAILED,           */
         L     @10,RCODESV(,AWAPTR)                                0351
         LTR   @10,@10                                             0351
         BNP   @RF00351                                            0351
*                PRCODE = 12;          /* INDICATE PARSE TERMINATE   */
         MVC   PRCODE(4,AWAPTR),@CF01223                           0352
*            ELSE                      /* OTHERWISE                  */
*              DO;                                                 0353
         B     @RC00351                                            0353
@RF00351 DS    0H                                                  0354
*                IF STAT2PDE = 0 THEN  /* IF NO STATUS ENTERED,      */
         L     @10,PDLADDR3(,AWAPTR)                               0354
         LH    @10,STAT2PDE(,@10)                                  0354
         LTR   @10,@10                                             0354
         BNZ   @RF00354                                            0354
*                  PRCODE = 4;         /* INDICATE PARSE PROMPT      */
         MVC   PRCODE(4,AWAPTR),@CF00337                           0355
*                ELSE                  /* IF STATUS WAS ENTERED,     */
*                   DO;                /* SAVE STATUS IN PDE         */
         B     @RC00354                                            0356
@RF00354 DS    0H                                                  0357
*                     STATSPDE = STAT2PDE;                         0357
         L     @10,PTRPDL(,AWAPTR)                                 0357
         L     @07,PDLADDR3(,AWAPTR)                               0357
         LH    @03,STAT2PDE(,@07)                                  0357
         STH   @03,STATSPDE(,@10)                                  0357
*                     IF STATSPDE=5 &  /* IF SYSOUT AND              */
*                                      /* CLASS SPECIFIED THEN       */
*                       PCLASPRS = '1'B THEN                       0358
         C     @03,@CF00097                                        0358
         BNE   @RF00358                                            0358
         TM    PCLASPRS(@07),B'10000000'                           0358
         BNO   @RF00358                                            0358
*                       DO;            /* OVERLAY PDE -              */
*                         CLASPTR = ADDR(NCLASBUF);                0360
         LA    @03,NCLASBUF(,AWAPTR)                               0360
         ST    @03,CLASPTR(,@10)                                   0360
*                                      /* CLASS VALUE IN PDE         */
*                         NCLASBUF(1) = CLASBUF1(1);               0361
         L     @03,PCLASPTR(,@07)                                  0361
         MVC   NCLASBUF(1,AWAPTR),CLASBUF1(@03)                    0361
*                                      /* LENGTH IN PDE              */
*                         CLASLEN = PCLASLEN;                      0362
         LH    @03,PCLASLEN(,@07)                                  0362
         STH   @03,CLASLEN(,@10)                                   0362
*                                      /* FLAGS IN PDE               */
*                         CLASFLG = PCLASFLG;                      0363
         MVC   CLASFLG(1,@10),PCLASFLG(@07)                        0363
*                       END;                                       0364
*                  END;                                            0365
@RF00358 DS    0H                                                  0366
*                RFY R5 RSTD;          /* RESTRICT REG 5             */
@RC00354 DS    0H                                                  0367
*                R5 = ADDR(PDLADDR3);  /* PDLADDR IN REG 5           */
         LA    R5,PDLADDR3(,AWAPTR)                                0367
*                GEN (IKJRLSA (5));    /* RELEASE PDL                */
         IKJRLSA (5)
*                RFY R5 UNRSTD;        /* UNRESTRICT REG 5           */
*              END;                                                0370
*            PPLPTR = SAVPPL;          /* RESTORE PPL PTR            */
@RC00351 ST    SAVPPL,PPLPTR(,AWAPTR)                              0371
*          END;                                                    0372
*        GEN (L 13,4(13));             /* RESTORE PARSE REGISTERS    */
@RC00337 DS    0H                                                  0373
         L 13,4(13)
*        PARSRTC = PRCODE;             /* RETURN CODE IN REG 15      */
         L     @10,PRCODE(,AWAPTR)                                 0374
         ST    @10,PARSRTC(,R13)                                   0374
*        RETURN;                                                   0375
@EL00013 DS    0H                                                  0375
@EF00013 DS    0H                                                  0375
@ER00013 LM    @14,@12,12(@13)                                     0375
         BR    @14                                                 0375
*   END SYSTATS;                                                   0376
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      PARSLINK                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE SETS UP THE COMMAND BUFFER AND PARSE PARAMETER */
*/*      LIST.                                                       */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE PARAMETER ENTERED ON THE PROMPT IS PLACED IN A          */
*/*      BUFFER. THE PARSE PARAMETER LIST IS SET UP.                 */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDE                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      PPL                                                         */
*/*                                                                  */
*/********************************************************************/
*        RFY I RSTD;                                               0377
*    PARSLINK: PROC OPTIONS(NOSAVEAREA);                           0378
PARSLINK STM   @14,@12,12(@13)                                     0378
*        CMDTWOBF(1) = ' ';                 /* BLANK IN 1ST POSITION */
         MVI   CMDTWOBF(AWAPTR),C' '                               0379
*        I = STATLEN;                       /* SET BUFFER PTR        */
         L     @10,VALPDE(,VCKPTR)                                 0380
         SLR   I,I                                                 0380
         IC    I,STATLEN(,@10)                                     0380
*        CMDTWOBF(2:I+1) = STATBUF(1:I);    /* MOVE IN STATUS        */
         LR    @04,I                                               0381
         BCTR  @04,0                                               0381
         L     @01,STATPTR(,@10)                                   0381
         EX    @04,@SM01311                                        0381
*        I = I + 1;                         /* INCREMENT BUFFER PTR  */
         LA    @04,1                                               0382
         ALR   I,@04                                               0382
*        IF SUBPRES = '1'B THEN             /* IF SUBSCRIPT ENTERED, */
         TM    SUBPRES(@10),B'10000000'                            0383
         BNO   @RF00383                                            0383
*          DO;                              /* THEN                  */
*            I = I + 1;                     /* INCREMENT BUFFER PTR  */
         ALR   I,@04                                               0385
*            CMDTWOBF(I) = '(';             /* MOVE IN LEFT PAREN    */
         LR    @01,AWAPTR                                          0386
         ALR   @01,I                                               0386
         MVI   CMDTWOBF-1(@01),C'('                                0386
*            I = I+1;                       /* INCREMENT BUFFER PTR  */
         ALR   I,@04                                               0387
*            IF CNSTSUB = '1'B THEN         /* IF SUBSCRIPT A CNST,  */
         TM    CNSTSUB(@10),B'01000000'                            0388
         BNO   @RF00388                                            0388
*              DO;                          /* MOVE IN CONSTANT      */
*                CMDTWOBF(I:I+CNSTLEN-1) = CNSTBUF(1:CNSTLEN);     0390
         LR    @04,AWAPTR                                          0390
         ALR   @04,I                                               0390
         SLR   @15,@15                                             0390
         IC    @15,CNSTLEN(,@10)                                   0390
         LR    @14,@15                                             0390
         BCTR  @14,0                                               0390
         L     @10,CNSTPTR(,@10)                                   0390
         EX    @14,@SM01313                                        0390
*                I = I + CNSTLEN;           /* INCREMENT BUFFER PTR  */
         ALR   I,@15                                               0391
*              END;                                                0392
*            ELSE                           /* ELSE,                 */
*              DO;                          /* MOVE IN VARIABLE      */
         B     @RC00388                                            0393
@RF00388 DS    0H                                                  0394
*                CMDTWOBF(I:I+VARLEN-1) = VARBUF(1:VARLEN);        0394
         LR    @10,AWAPTR                                          0394
         ALR   @10,I                                               0394
         L     @04,VALPDE(,VCKPTR)                                 0394
         SLR   @15,@15                                             0394
         IC    @15,VARLEN(,@04)                                    0394
         LR    @14,@15                                             0394
         BCTR  @14,0                                               0394
         L     @04,VARPTR(,@04)                                    0394
         EX    @14,@SM01315                                        0394
*                I = I + VARLEN;            /* INCREMENT BUFFER PTR  */
         ALR   I,@15                                               0395
*              END;                                                0396
*            CMDTWOBF(I) = ')';             /* MOVE IN RIGHT PAREN   */
@RC00388 LR    @10,AWAPTR                                          0397
         ALR   @10,I                                               0397
         MVI   CMDTWOBF-1(@10),C')'                                0397
*          END;                                                    0398
*        CMDTWOLN = I + 4;                  /* SET BUFFER LENGTH     */
@RF00383 LA    @10,4                                               0399
         ALR   @10,I                                               0399
         STH   @10,CMDTWOLN(,AWAPTR)                               0399
*        CMDTWOOF = 0;                      /* BUFFER OFFSET ZERO    */
         SLR   @10,@10                                             0400
         STH   @10,CMDTWOOF(,AWAPTR)                               0400
*        PPLPTR = ADDR(PPLTWO);             /* PTR TO PPL            */
         LA    @07,PPLTWO(,AWAPTR)                                 0401
         ST    @07,PPLPTR(,AWAPTR)                                 0401
*        PPLUPT = CPPLUPT;                  /* UPT                   */
         L     @15,CPPLPTR(,AWAPTR)                                0402
         L     @14,CPPLUPT(,@15)                                   0402
         ST    @14,PPLUPT(,@07)                                    0402
*        PPLECT = CPPLECT;                  /* ECT                   */
         L     @15,CPPLECT(,@15)                                   0403
         ST    @15,PPLECT(,@07)                                    0403
*        PPLECB = ADDR(COMMECB);            /* ECB                   */
         LA    @15,COMMECB(,AWAPTR)                                0404
         ST    @15,PPLECB(,@07)                                    0404
*        COMMECB = 0;                       /* ECB SET TO 0          */
         ST    @10,COMMECB(,AWAPTR)                                0405
*        PPLPCL = ADCNPCLX;                 /* PCL ADDRESS           */
         L     @15,ADCNPCLX                                        0406
         ST    @15,PPLPCL(,@07)                                    0406
*        PPLANS = ADDR(PDLADDR3);           /* PDL ADDRESS           */
         LA    @15,PDLADDR3(,AWAPTR)                               0407
         ST    @15,PPLANS(,@07)                                    0407
*        PPLCBUF = ADDR(CMDTWO);            /* COMMAND BUFFER        */
         LA    @15,CMDTWO(,AWAPTR)                                 0408
         ST    @15,PPLCBUF(,@07)                                   0408
*        PPLUWA = 0;                        /* USER WORD             */
         ST    @10,PPLUWA(,@07)                                    0409
*   END PARSLINK;                                                  0410
@EL00014 DS    0H                                                  0410
@EF00014 DS    0H                                                  0410
@ER00014 LM    @14,@12,12(@13)                                     0410
         BR    @14                                                 0410
*        RFY I UNRSTD;                                             0411
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      SYSPBLK                                                     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS VALIDITY CHECK ROUTINE CHECKS THE VALUE ENTERED ON     */
*/*      THE PROMPT FOR A VALID KEYWORD OF BLOCK, AVBLOCK, TRACKS,   */
*/*      OR CYLINDERS.                                               */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      IF MORE THAN ONE SUBSCRIPT IS ENTERED, PARSE RETURN CODE    */
*/*      IS SET TO 4. ELSE, SET UP A NEW COMMAND BUFFER WITH THE     */
*/*      PARAMETERS ENTERED ON THE PROMPT. INVOKE PARSE, PASSING     */
*/*      A LIST OF KEYWORDS IN THE PCL. IF PARSE FINDS A MATCH,      */
*/*      MOVE THE PARAMETER INTO THE ORIGINAL PDE.                   */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDE                                                  */
*/*      THIRD LEVEL PCL                                             */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RETURN CODE = 0 - VALID PARAMETER                           */
*/*                    4 - INVALID PARAMETER, PARSE PROMPTS          */
*/********************************************************************/
*                                      /* ENTRY FOR BLOCK PROMPT     */
*    SYSPBLK: PROC OPTIONS(NOSAVEAREA);                            0412
SYSPBLK  STM   @14,@12,12(@13)                                     0412
*        R15 = R1->VALWORK;            /* GET STORED REGISTERS       */
         L     R15,VALWORK(,R1)                                    0413
*        GENERATE;                     /* SET UP ADDRESSABILITY      */
         LM  2,12,0(15)                   RESTORE ALLOC REGISTERS
         LA  14,SAVEVC                    VC SAVER IN REG 14
         ST  14,8(13)                     VC SAVER IN PARSE SAVER
         ST  13,4(14)                     PARSE SAVER IN VC SAVER
         LR  13,14                        VC SAVER IN REG 13
*        VCKPTR = R1;                  /* PARM LIST FROM REG 1       */
         LR    VCKPTR,R1                                           0415
*        PRCODE = 0;                   /* INIT RETURN CODE           */
         SLR   @10,@10                                             0416
         ST    @10,PRCODE(,AWAPTR)                                 0416
*        IF SUBNUM2 > 1 THEN           /* IF MORE THAN ONE SUBSCRIPT,*/
         L     @10,VALPDE(,VCKPTR)                                 0417
         CLI   SUBNUM2(@10),1                                      0417
         BNH   @RF00417                                            0417
*          PRCODE = 4;                 /* THEN PARSE PROMPTS         */
         MVC   PRCODE(4,AWAPTR),@CF00337                           0418
*        ELSE                                                      0419
*          DO;                         /* ELSE                       */
         B     @RC00417                                            0419
@RF00417 DS    0H                                                  0420
*            SAVPPL = PPLPTR;          /* SAVE PPL PTR               */
         L     SAVPPL,PPLPTR(,AWAPTR)                              0420
*            CALL PARSLNK2;            /* SET UP FOR LINK TO PARSE   */
         BAL   @14,PARSLNK2                                        0421
*            R1 = PPLPTR;              /* PARM LIST IN REGISTER 1    */
         L     R1,PPLPTR(,AWAPTR)                                  0422
*              DO; /*CALLTSSR EP(IKJPARS)*/                        0423
*                RESPECIFY GPR01P RSTD;                            0424
*                IF CVTPARS = 0                                    0425
*                  THEN                                            0425
         L     @10,CVTPTR                                          0425
         L     @10,CVTPARS(,@10)                                   0425
         LTR   @10,@10                                             0425
         BNZ   @RF00425                                            0425
*                    GEN(LINK EP=IKJPARS);                         0426
         LINK EP=IKJPARS
*                  ELSE                                            0427
*                    CALL CVTPARS;                                 0427
         B     @RC00425                                            0427
@RF00425 L     @10,CVTPTR                                          0427
         L     @15,CVTPARS(,@10)                                   0427
         BALR  @14,@15                                             0427
*                RESPECIFY GPR01P UNRSTD;                          0428
@RC00425 DS    0H                                                  0429
*              END;   /* INVOKE PARSE       @Y30NQKK*/             0429
*            RCODESV = R15;            /* SAVER RETURN CODE          */
         ST    R15,RCODESV(,AWAPTR)                                0430
*            IF RCODESV > 0 THEN       /* IF PARSE FAILED            */
         L     @10,RCODESV(,AWAPTR)                                0431
         LTR   @10,@10                                             0431
         BNP   @RF00431                                            0431
*                PRCODE = 12;          /* PARSE TERMINATE            */
         MVC   PRCODE(4,AWAPTR),@CF01223                           0432
*            ELSE                                                  0433
*              DO;                     /* OTHERWISE,                 */
         B     @RC00431                                            0433
@RF00431 DS    0H                                                  0434
*                IF BLOKNBR = 0 THEN   /* IF PARM NOT ENTERED,       */
         L     @10,PDLADDR3(,AWAPTR)                               0434
         LH    @10,BLOKNBR(,@10)                                   0434
         LTR   @10,@10                                             0434
         BNZ   @RF00434                                            0434
*                  PRCODE = 4;         /* INDICATE PARSE PROMPT      */
         MVC   PRCODE(4,AWAPTR),@CF00337                           0435
*                ELSE                                              0436
*                  DO;                 /* IF PARM IS ENTERED,        */
         B     @RC00434                                            0436
@RF00434 DS    0H                                                  0437
*                                      /* SAVE PARM IN PDE           */
*                    BLOKPDE = BLOKNBR;                            0437
         L     @10,PTRPDL(,AWAPTR)                                 0437
         L     @07,PDLADDR3(,AWAPTR)                               0437
         LH    @07,BLOKNBR(,@07)                                   0437
         STH   @07,BLOKPDE(,@10)                                   0437
*                                      /* IF BLOCK OR AVBLOCK,       */
*                    IF BLOKPDE < 3 THEN                           0438
         C     @07,@CF00339                                        0438
         BNL   @RF00438                                            0438
*                      CALL MAXCHK;    /* CHECK FOR MAXIMUM          */
         BAL   @14,MAXCHK                                          0439
*                  END;                                            0440
@RF00438 DS    0H                                                  0441
*                RFY R5 RSTD;          /* RESTRICT REG 5             */
@RC00434 DS    0H                                                  0442
*                R5 = ADDR(PDLADDR3);  /* PDL ADDRESS IN REG 5       */
         LA    R5,PDLADDR3(,AWAPTR)                                0442
*                GEN (IKJRLSA (5));    /* RELEASE PDL                */
         IKJRLSA (5)
*                RFY R5 UNRSTD;        /* UNRESTRICT REG 5           */
*              END;                                                0445
*            PPLPTR = SAVPPL;          /* RESTORE PPL PTR            */
@RC00431 ST    SAVPPL,PPLPTR(,AWAPTR)                              0446
*           END;                                                   0447
*        GEN (L 13,4(13));             /* RESTORE PARSE REGISTERS    */
@RC00417 DS    0H                                                  0448
         L 13,4(13)
*        PARSRTC = PRCODE;             /* RETURN CODE IN REG 15      */
         L     @10,PRCODE(,AWAPTR)                                 0449
         ST    @10,PARSRTC(,R13)                                   0449
*    END SYSPBLK;                                                  0450
@EL00015 DS    0H                                                  0450
@EF00015 DS    0H                                                  0450
@ER00015 LM    @14,@12,12(@13)                                     0450
         BR    @14                                                 0450
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      MAXCHK                                                      */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE CONVERTS THE BLOCK OR AVBLOCK VALUE TO BINARY  */
*/*      AND CHECK FOR A MAXIMUM OF 65535.                           */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE VALUE IS CONVERTED TO BINARY.  IF THE VALUE EXCEEDS THE */
*/*      MAXIMUM, AN ERROR MESSAGE IS ISSUED AND PARSE RETURN CODE   */
*/*      IS SET TO 8. ELSE, THE ORIGINAL PDE IS OVERLAID WITH THE    */
*/*      NEW VALUE.                                                  */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDE                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RETURN CODE = 0 - VALID PARAMETER                           */
*/*                    8 - INVALID PARAMETER, PARSE PROMPTS          */
*/********************************************************************/
*        RFY Y RSTD;                                               0451
*    MAXCHK: PROC;                                                 0452
MAXCHK   STM   @14,@12,@SA00016                                    0452
*        PKAREA(1) = 'F0'X;                 /* 1ST BYTE IN PACKAREA
*                                              SET TO F0             */
         MVI   PKAREA,X'F0'                                        0453
*        P = ADDR(PKAREA(1));               /* POINT TO 1ST BYTE     */
         LA    @10,PKAREA                                          0454
         ST    @10,P(,AWAPTR)                                      0454
*        Q = ADDR(PKAREA(2));               /* POINT TO 2ND BYTE     */
         LA    @07,PKAREA+1                                        0455
         ST    @07,Q(,AWAPTR)                                      0455
*        Q->AREA1 = P->AREA2;               /* CLEAR PACK AREA TO F0 */
         MVC   AREA1(15,@07),AREA2(@10)                            0456
*        IF BLOKNBR = 1 THEN                /* IF BLOCK ENTERED,     */
         L     @10,PDLADDR3(,AWAPTR)                               0457
         CLC   BLOKNBR(2,@10),@CH00032                             0457
         BNE   @RF00457                                            0457
*          DO;                              /* THEN                  */
*            Y = 8-PBLKLEN+ADDR(PKAREA);    /* PUT VALUE IN PACK AREA*/
         LH    @07,PBLKLEN(,@10)                                   0459
         LA    Y,8                                                 0459
         SLR   Y,@07                                               0459
         LA    @04,PKAREA                                          0459
         ALR   Y,@04                                               0459
*            PKAREA1(1:PBLKLEN)=PBLKBUF(1:PBLKLEN);                0460
         BCTR  @07,0                                               0460
         L     @10,PBLKPTR(,@10)                                   0460
         EX    @07,@SM01317                                        0460
*            VAR1 = ADDR(BLKVAR);           /* BLOCK VARIABLE PTR    */
         L     @10,MSGPTR(,AWAPTR)                                 0461
         LA    @07,BLKVAR                                          0461
         ST    @07,@TF00001                                        0461
         MVC   VAR1(3,@10),@TF00001+1                              0461
*            L1 = LENGTH(BLKVAR);           /* AND VARIABLE LENGTH   */
         MVI   L1(@10),X'0A'                                       0462
*          END;                                                    0463
*        ELSE                               /* ELSE,                 */
*          DO;                              /* ASSUME AVBLOCK        */
         B     @RC00457                                            0464
@RF00457 DS    0H                                                  0465
*            Y = 8-PABLKLEN+ADDR(PKAREA);   /* PUT VALUE IN PACK AREA*/
         L     @10,PDLADDR3(,AWAPTR)                               0465
         LH    @07,PABLKLEN(,@10)                                  0465
         LA    Y,8                                                 0465
         SLR   Y,@07                                               0465
         LA    @04,PKAREA                                          0465
         ALR   Y,@04                                               0465
*            PKAREA1(1:PABLKLEN)=PABLKBUF(1:PABLKLEN);             0466
         BCTR  @07,0                                               0466
         L     @10,PABLKPTR(,@10)                                  0466
         EX    @07,@SM01319                                        0466
*            VAR1 = ADDR(AVBLOCK);          /* AVBLOCK VARIABLE PTR  */
         L     @10,MSGPTR(,AWAPTR)                                 0467
         LA    @07,AVBLOCK                                         0467
         ST    @07,@TF00001                                        0467
         MVC   VAR1(3,@10),@TF00001+1                              0467
*            L1 = LENGTH(AVBLOCK);          /* AND VARIABLE LENGTH   */
         MVI   L1(@10),X'07'                                       0468
*          END;                                                    0469
*                                                                  0469
*        GENERATE REFS(CVBAREA);            /* CONVERT TO BINARY     */
@RC00457 DS    0H                                                  0470
         PACK CVBAREA(8),PKAREA(8)             PACK VALUE
         CVB  Y,CVBAREA                        CONVERT TO BINARY
*        IF Y > 65535 THEN                  /* IF VALUE EXCEEDS MAX, */
         C     Y,@CF01219                                          0471
         BNH   @RF00471                                            0471
*          DO;                                                     0472
*            PRCODE = 8;                    /* INDICATE PARSE PROMPT */
         MVC   PRCODE(4,AWAPTR),@CF00116                           0473
*            MSGID = '103A';                /* SET MESSAGE ID        */
         L     @10,MSGPTR(,AWAPTR)                                 0474
         MVC   MSGID(4,@10),@CC01220                               0474
*            CALL VCPUTMSG;                 /* ISSUE MESSAGE         */
         BAL   @14,VCPUTMSG                                        0475
*            IF RCODESV > 0 THEN            /* IF ERROR IN MSG,      */
         L     @10,RCODESV(,AWAPTR)                                0476
         LTR   @10,@10                                             0476
         BNP   @RF00476                                            0476
*              PRCODE = 12;                 /* INDICATE PARSE END    */
         MVC   PRCODE(4,AWAPTR),@CF01223                           0477
*            ELSE                                                  0478
*              VALMSG = ADDR(MSG01);        /* PASS 2ND LEVEL MSG    */
         B     @RC00476                                            0478
@RF00476 LA    @10,MSG01                                           0478
         ST    @10,VALMSG(,VCKPTR)                                 0478
*          END;                                                    0479
*        ELSE                               /* IF VALUE DOES NOT     */
*          DO;                              /* EXCEED MAX, THEN      */
         B     @RC00471                                            0480
@RF00471 DS    0H                                                  0481
*            IF BLOKNBR = 1 THEN            /* IF BLOCK VALUE,       */
         L     @10,PDLADDR3(,AWAPTR)                               0481
         CLC   BLOKNBR(2,@10),@CH00032                             0481
         BNE   @RF00481                                            0481
*              DO;                          /* OVERLAY PDE           */
*                BLKPTR = ADDR(NBLKBUF1);   /* POINTER TO VALUE      */
         L     @07,PTRPDL(,AWAPTR)                                 0483
         LA    @15,NBLKBUF1(,AWAPTR)                               0483
         ST    @15,BLKPTR(,@07)                                    0483
*                                           /* BLOCK VALUE           */
*                NBLKBUF1(1:PBLKLEN)=PBLKBUF(1:PBLKLEN);           0484
         LH    @15,PBLKLEN(,@10)                                   0484
         LR    @14,@15                                             0484
         BCTR  @14,0                                               0484
         L     @01,PBLKPTR(,@10)                                   0484
         EX    @14,@SM01321                                        0484
*                BLKLEN = PBLKLEN;          /* LENGTH                */
         STH   @15,BLKLEN(,@07)                                    0485
*                BLKFLAGS = PBLKFLG;        /* FLAGS                 */
         MVC   BLKFLAGS(1,@07),PBLKFLG(@10)                        0486
*              END;                                                0487
*            ELSE                           /* ELSE,                 */
*              DO;                          /* OVERLAY AVBLOCK PDE   */
         B     @RC00481                                            0488
@RF00481 DS    0H                                                  0489
*                ABLKPTR = ADDR(NBLKBUF1);  /* POINTER TO VALUE      */
         L     @10,PTRPDL(,AWAPTR)                                 0489
         LA    @07,NBLKBUF1(,AWAPTR)                               0489
         ST    @07,ABLKPTR(,@10)                                   0489
*                                           /* AVBLOCK VALUE         */
*                NBLKBUF1(1:PABLKLEN)=PABLKBUF(1:PABLKLEN);        0490
         L     @07,PDLADDR3(,AWAPTR)                               0490
         LH    @15,PABLKLEN(,@07)                                  0490
         LR    @14,@15                                             0490
         BCTR  @14,0                                               0490
         L     @01,PABLKPTR(,@07)                                  0490
         EX    @14,@SM01323                                        0490
*                ABLKLEN = PABLKLEN;        /* LENGTH                */
         STH   @15,ABLKLEN(,@10)                                   0491
*                ABLKFLG = PABLKFLG;        /* FLAGS                 */
         MVC   ABLKFLG(1,@10),PABLKFLG(@07)                        0492
*              END;                                                0493
*          END;                                                    0494
*    END MAXCHK;                                                   0495
@EL00016 DS    0H                                                  0495
@EF00016 DS    0H                                                  0495
@ER00016 LM    @14,@12,@SA00016                                    0495
         BR    @14                                                 0495
*        RFY Y UNRSTD;                                             0496
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      PARSLNK2                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE SETS UP THE NEW COMMAND BUFFER AND THE PARSE   */
*/*      PARAMETER LIST (PPL).                                       */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE PARAMETER ENTERED ON THE PROMPT IS PUT INTO THE BUFFER. */
*/*      THE PPL IS SET UP,                                          */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDE                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      PPL                                                         */
*/********************************************************************/
*        RFY I RSTD;                                               0497
*    PARSLNK2: PROC OPTIONS(NOSAVEAREA);                           0498
PARSLNK2 STM   @14,@12,12(@13)                                     0498
*         CMDTWOBF(1) = ' ';                /* BLANK IN 1ST POSITION */
         MVI   CMDTWOBF(AWAPTR),C' '                               0499
*         I = BATCLEN;                      /* SET BUFFER PTR        */
         L     @10,VALPDE(,VCKPTR)                                 0500
         SLR   I,I                                                 0500
         IC    I,BATCLEN(,@10)                                     0500
*         CMDTWOBF(2:I+1) = BATCBUF(1:I);   /* MOVE IN PARAMETER     */
         LR    @04,I                                               0501
         BCTR  @04,0                                               0501
         L     @01,BATCPTR(,@10)                                   0501
         EX    @04,@SM01325                                        0501
*         I = I+1;                          /* INCREMENT BUFFER PTR  */
         LA    @04,1                                               0502
         ALR   I,@04                                               0502
*         IF SUB2PRES = '1'B THEN           /* IF SUBSCRIPT ENTERED, */
         TM    SUB2PRES(@10),B'10000000'                           0503
         BNO   @RF00503                                            0503
*           DO;                             /* THEN                  */
*             I = I+1;                      /* INCREMENT BUFFER PTR  */
         ALR   I,@04                                               0505
*             CMDTWOBF(I) = '(';            /* LEFT PAREN            */
         LR    @01,AWAPTR                                          0506
         ALR   @01,I                                               0506
         MVI   CMDTWOBF-1(@01),C'('                                0506
*             I = I+1;                      /* INCREMENT BUFFER PTR  */
         ALR   I,@04                                               0507
*                                           /* SUBFIELD VALUE        */
*             CMDTWOBF(I:I+CNST2LEN-1) = CNST2BUF(1:CNST2LEN);     0508
         LR    @04,AWAPTR                                          0508
         ALR   @04,I                                               0508
         SLR   @15,@15                                             0508
         IC    @15,CNST2LEN(,@10)                                  0508
         LR    @14,@15                                             0508
         BCTR  @14,0                                               0508
         L     @10,CNST2PTR(,@10)                                  0508
         EX    @14,@SM01327                                        0508
*             I = I+CNST2LEN;               /* INCREMENT BUFFER PTR  */
         ALR   I,@15                                               0509
*             CMDTWOBF(I) = ')';            /* MOVE IN RIGHT PAREN   */
         LR    @10,AWAPTR                                          0510
         ALR   @10,I                                               0510
         MVI   CMDTWOBF-1(@10),C')'                                0510
*           END;                                                   0511
*        CMDTWOLN = I+4;                    /* SET BUFFER LENGTH     */
@RF00503 LA    @10,4                                               0512
         ALR   @10,I                                               0512
         STH   @10,CMDTWOLN(,AWAPTR)                               0512
*        CMDTWOOF = 0;                      /* OFFSET SET TO ZERO    */
         SLR   @10,@10                                             0513
         STH   @10,CMDTWOOF(,AWAPTR)                               0513
*        PPLPTR = ADDR(PPLTWO);             /* SET PTR TO PPL        */
         LA    @07,PPLTWO(,AWAPTR)                                 0514
         ST    @07,PPLPTR(,AWAPTR)                                 0514
*        PPLUPT = CPPLUPT;                  /* UPT                   */
         L     @04,CPPLPTR(,AWAPTR)                                0515
         L     @15,CPPLUPT(,@04)                                   0515
         ST    @15,PPLUPT(,@07)                                    0515
*        PPLECT = CPPLECT;                  /* ECT                   */
         L     @04,CPPLECT(,@04)                                   0516
         ST    @04,PPLECT(,@07)                                    0516
*        PPLECB = ADDR(COMMECB);            /* ECB                   */
         LA    @04,COMMECB(,AWAPTR)                                0517
         ST    @04,PPLECB(,@07)                                    0517
*        COMMECB = 0;                       /* SET ECB TO 0          */
         ST    @10,COMMECB(,AWAPTR)                                0518
*        PPLPCL = ADCNPCLY;                 /* PTR TO PCL            */
         L     @04,ADCNPCLY                                        0519
         ST    @04,PPLPCL(,@07)                                    0519
*        PPLANS = ADDR(PDLADDR3);           /* ANSWER PLACE          */
         LA    @04,PDLADDR3(,AWAPTR)                               0520
         ST    @04,PPLANS(,@07)                                    0520
*        PDLADDR3 = 0;                      /* SET PDL TO 0          */
         ST    @10,PDLADDR3(,AWAPTR)                               0521
*        PPLCBUF = ADDR(CMDTWO);            /* COMMAND BUFFER        */
         LA    @04,CMDTWO(,AWAPTR)                                 0522
         ST    @04,PPLCBUF(,@07)                                   0522
*        PPLUWA = 0;                        /* USER WORD             */
         ST    @10,PPLUWA(,@07)                                    0523
*    END PARSLNK2;                                                 0524
@EL00017 DS    0H                                                  0524
@EF00017 DS    0H                                                  0524
@ER00017 LM    @14,@12,12(@13)                                     0524
         BR    @14                                                 0524
*        RFY I UNRSTD;                                             0525
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      VCPUTMSG                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE ISSUES ERROR MESSAGES.                         */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE PARAMETER LIST TO IKJEFF02 IS COMPLETED.  IKJEFF02 IS   */
*/*      LINKED TO. THE RETURN CODE FROM IKJEFF02 IS SAVED.          */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      WORKAREA                                                    */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      MESSAGE ISSUED                                              */
*/********************************************************************/
*    VCPUTMSG: PROC;                                               0526
VCPUTMSG STM   @14,@12,@SA00018                                    0526
*        LISTPTR = ADDR(MSGCSECT);           /* PTR TO MSG PARM LIST */
         L     @10,MSGPTR(,AWAPTR)                                 0527
         LA    @07,MSGCSECT(,@10)                                  0527
         ST    @07,LISTPTR(,@10)                                   0527
*        MTCPPL = CPPLPTR;                   /* PTR TO CPPL          */
         L     @07,CPPLPTR(,AWAPTR)                                0528
         ST    @07,MTCPPL(,@10)                                    0528
*        ECBPTR = ADDR(COMMECB);             /* PTR TO ECB           */
         LA    @07,COMMECB(,AWAPTR)                                0529
         ST    @07,ECBPTR(,@10)                                    0529
*        COMMECB = 0;                        /* ECB SET TO ZERO      */
         SLR   @07,@07                                             0530
         ST    @07,COMMECB(,AWAPTR)                                0530
*        MTHIGH = '1'B;                      /* HIGH ORDER BIT ON    */
         OI    MTHIGH(@10),B'10000000'                             0531
*        MTPUTLSW = '1'B;                    /* INDICATE PUTLINE     */
         OI    MTPUTLSW(@10),B'01000000'                           0532
*        MSGCSECT = PTRMSGS;                 /* MSG CSECT ADDRESS    */
         L     @07,PTRMSGS(,AWAPTR)                                0533
         ST    @07,MSGCSECT(,@10)                                  0533
*        R1 = ADDR(MSGTABLE);                /* PARM LIST IN REG 1   */
         LR    R1,@10                                              0534
*        GEN (LINK EP=IKJEFF02);             /* INVOKE MSG PROCESSOR */
         LINK EP=IKJEFF02
*        RCODESV = R15;                      /* SAVE RETURN CODE     */
         ST    R15,RCODESV(,AWAPTR)                                0536
*    END VCPUTMSG;                                                 0537
*                                                                  0537
*                                                                  0537
*                                                                  0537
@EL00018 DS    0H                                                  0537
@EF00018 DS    0H                                                  0537
@ER00018 LM    @14,@12,@SA00018                                    0537
         BR    @14                                                 0537
*      DECLARE /*GENERAL PURPOSE REGISTERS */                      0538
*        GPR00P PTR(31) REG(0),                                    0538
*        GPR01P PTR(31) REG(1),                                    0538
*        GPR02P PTR(31) REG(2),                                    0538
*        GPR03P PTR(31) REG(3),                                    0538
*        GPR04P PTR(31) REG(4),                                    0538
*        GPR05P PTR(31) REG(5),                                    0538
*        GPR06P PTR(31) REG(6),                                    0538
*        GPR07P PTR(31) REG(7),                                    0538
*        GPR08P PTR(31) REG(8),                                    0538
*        GPR09P PTR(31) REG(9),                                    0538
*        GPR14P PTR(31) REG(14),                                   0538
*        GPR15P PTR(31) REG(15);                                   0538
*                                                                  0538
*      DECLARE /* COMMON VARIABLES */                              0539
*        I256C CHAR(256) BASED,                                    0539
*        I031F FIXED(31) BASED,                                    0539
*        I031P PTR(31)   BASED,                                    0539
*        I015F FIXED(15) BASED,                                    0539
*        I015P PTR(15)   BASED,                                    0539
*        I008P PTR(8)    BASED,                                    0539
*        I001C CHAR(1)   BASED;                               /*   0539
*      @Y30NQKK*/                                                  0539
*    END IKJEFD37                                                  0540
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJCPPL )                                        *
*/*%INCLUDE SYSLIB  (IKJPPL  )                                        *
*/*%INCLUDE SYSLIB  (IKJZT430)                                        *
*/*%INCLUDE SYSLIB  (IKJEFFMT)                                        *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*;                                                                 0540
@DATA    DS    0H
@CH00032 DC    H'1'
@CH00100 DC    H'2'
@CH00188 DC    H'6'
@CH00195 DC    H'7'
@SM01301 MVC   PKAREA1(0,Y),VCBLKBUF(@10)
@SM01311 MVC   CMDTWOBF+1(0,AWAPTR),STATBUF(@01)
@SM01313 MVC   CMDTWOBF-1(0,@04),CNSTBUF(@10)
@SM01315 MVC   CMDTWOBF-1(0,@10),VARBUF(@04)
@SM01317 MVC   PKAREA1(0,Y),PBLKBUF(@10)
@SM01319 MVC   PKAREA1(0,Y),PABLKBUF(@10)
@SM01321 MVC   NBLKBUF1(0,AWAPTR),PBLKBUF(@01)
@SM01323 MVC   NBLKBUF1(0,AWAPTR),PABLKBUF(@01)
@SM01325 MVC   CMDTWOBF+1(0,AWAPTR),BATCBUF(@01)
@SM01327 MVC   CMDTWOBF-1(0,@04),CNST2BUF(@10)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SAV001  EQU   @SA00001
@SA00004 DS    15F
@SA00018 DS    15F
@SA00008 DS    15F
@SA00016 DS    15F
@TF00001 DS    F
@ZTEMPS  DS    C
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
@TEMPS   EQU   @ZTEMPS
@L       EQU   @ZLEN
IKJEFD37 CSECT
         DS    0F
@CF00339 DC    F'3'
@CH00339 EQU   @CF00339+2
@CF00337 DC    F'4'
@CH00337 EQU   @CF00337+2
@CF00097 DC    F'5'
@CH00097 EQU   @CF00097+2
@CF00116 DC    F'8'
@CF01223 DC    F'12'
@CF01253 DC    F'59'
@CF01242 DC    F'255'
@CF01219 DC    F'65535'
@CF01237 DC    F'16777215'
@DATD    DSECT
         DS    0D
PDLADDR  DS    A
PDLADDR2 DS    A
SAVEVAL  DS    CL72
PKAREA   DS    CL8
CVBAREA  DS    CL8
SAVEVC   DS    18A
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
@DATEND  EQU   *
IKJEFD37 CSECT
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
@SIZ001  EQU   @SIZDATD
         DS    0D
@CC01220 DC    C'103A'
@CC01243 DC    C'107A'
@CC01246 DC    C'111A'
SPC1     DC    CL5'SPACE'
SPC2     DC    CL15'SPACE INCREMENT'
DIR1     DC    CL3'DIR'
BLKVAR   DC    CL10'BLOCK SIZE'
AVBLOCK  DC    CL7'AVBLOCK'
MSG01    DS    CL108
         ORG   MSG01
MSG01LEN DC    H'108'
MSG01OFF DC    H'0'
MSG01TXT DC    CL104'IKJ56107I MAXIMUM OF 65535 FOR BLOCK AND AVBLOCK. C
               MAXIMUM OF 16777215 FOR SPACE, SPACE INCREMENT AND DIR'
         ORG   MSG01+108
MSG02    DS    CL53
         ORG   MSG02
MSG02LEN DC    H'53'
MSG02OFF DC    H'0'
MSG02TXT DC    CL49'IKJ56114I DATA SET NAME REQUIRED WITH MEMBER NAME'
         ORG   MSG02+53
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
@0       EQU   00
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
SAVPPL   EQU   @02
VCKPTR   EQU   @05
AWAPTR   EQU   @06
R1       EQU   @01
R5       EQU   @05
I        EQU   @07
Y        EQU   @08
R13      EQU   @13
R15      EQU   @15
GPR01P   EQU   @01
GPR00P   EQU   @00
GPR02P   EQU   @02
GPR03P   EQU   @03
GPR04P   EQU   @04
GPR05P   EQU   @05
GPR06P   EQU   @06
GPR07P   EQU   @07
GPR08P   EQU   @08
GPR09P   EQU   @09
GPR14P   EQU   @14
GPR15P   EQU   @15
R0       EQU   @00
R14      EQU   @14
CVTPTR   EQU   16
CPPL     EQU   0
CPPLCBUF EQU   CPPL
CPPLUPT  EQU   CPPL+4
CPPLECT  EQU   CPPL+12
PPL      EQU   0
PPLUPT   EQU   PPL
PPLECT   EQU   PPL+4
PPLECB   EQU   PPL+8
PPLPCL   EQU   PPL+12
PPLANS   EQU   PPL+16
PPLCBUF  EQU   PPL+20
PPLUWA   EQU   PPL+24
ALLOCWA  EQU   0
CPPLPTR  EQU   ALLOCWA
PTRPDL   EQU   ALLOCWA+4
SWITCH   EQU   ALLOCWA+12
ASTRSK   EQU   SWITCH
AWARSV1  EQU   SWITCH
FIRSTPDE EQU   SWITCH
ENTRYCD  EQU   ALLOCWA+14
RCODESV  EQU   ALLOCWA+24
VLISTCTR EQU   ALLOCWA+28
DSNCTR   EQU   ALLOCWA+30
PTRMSGS  EQU   ALLOCWA+32
VCFLAGS  EQU   ALLOCWA+36
AVBLK    EQU   VCFLAGS
SPACE1   EQU   VCFLAGS
SPACE2   EQU   VCFLAGS
NCLASBUF EQU   ALLOCWA+37
PMPTPDL  EQU   ALLOCWA+40
PRCODE   EQU   ALLOCWA+44
MSGPTR   EQU   ALLOCWA+48
P        EQU   ALLOCWA+52
Q        EQU   ALLOCWA+56
CMDTWO   EQU   ALLOCWA+60
CMDTWOLN EQU   CMDTWO
CMDTWOOF EQU   CMDTWO+2
CMDTWOBF EQU   CMDTWO+4
PPLTWO   EQU   ALLOCWA+128
PDLADDR3 EQU   ALLOCWA+156
COMMECB  EQU   ALLOCWA+160
NBLKBUF1 EQU   ALLOCWA+164
PPLPTR   EQU   ALLOCWA+172
FIRSTPTR EQU   ALLOCWA+176
ALLOCPDL EQU   0
STATSPDE EQU   ALLOCPDL+12
BLOKPDE  EQU   ALLOCPDL+16
DSNPDE   EQU   ALLOCPDL+48
DSNPTR   EQU   DSNPDE
DSNFLAGS EQU   DSNPDE+6
MBRPTR   EQU   DSNPDE+8
MBRFLAGS EQU   DSNPDE+14
PASSPTR  EQU   DSNPDE+16
PASSFLAG EQU   DSNPDE+22
DDNMEPDE EQU   ALLOCPDL+76
DDNPTR   EQU   DDNMEPDE
DDNFLAGS EQU   DDNMEPDE+6
CLASPDE  EQU   ALLOCPDL+84
CLASPTR  EQU   CLASPDE
CLASLEN  EQU   CLASPDE+4
CLASFLG  EQU   CLASPDE+6
SERPDE   EQU   ALLOCPDL+92
SERPTR   EQU   SERPDE
SERFLAGS EQU   SERPDE+6
BLKPDE   EQU   ALLOCPDL+104
BLKPTR   EQU   BLKPDE
BLKLEN   EQU   BLKPDE+4
BLKFLAGS EQU   BLKPDE+6
ABLKPDE  EQU   ALLOCPDL+112
ABLKPTR  EQU   ABLKPDE
ABLKLEN  EQU   ABLKPDE+4
ABLKFLG  EQU   ABLKPDE+6
SPACPDE  EQU   ALLOCPDL+120
SPACEPTR EQU   SPACPDE
SPACEFLG EQU   SPACPDE+6
SPACPDE2 EQU   ALLOCPDL+128
SPACPTR2 EQU   SPACPDE2
SPACFLG2 EQU   SPACPDE2+6
DIRECPDE EQU   ALLOCPDL+136
DIRPTR   EQU   DIRECPDE
DIRFLAGS EQU   DIRECPDE+6
ATTRPDE  EQU   ALLOCPDL+144
ATTRPTR  EQU   ATTRPDE
ATTRFLAG EQU   ATTRPDE+6
USIDPDE  EQU   ALLOCPDL+152
USIDPTR  EQU   USIDPDE
USIDFLAG EQU   USIDPDE+6
UTYPPDE  EQU   ALLOCPDL+160
UTYPPTR  EQU   UTYPPDE
UTYPFLAG EQU   UTYPPDE+6
UNCNTPDE EQU   ALLOCPDL+168
UCNTPTR  EQU   UNCNTPDE
UCNTFLAG EQU   UNCNTPDE+6
POSTPDE  EQU   ALLOCPDL+180
POSPTR   EQU   POSTPDE
POSFLAG  EQU   POSTPDE+6
MXVOLPDE EQU   ALLOCPDL+188
MXVOLPTR EQU   MXVOLPDE
MXVOLFLG EQU   MXVOLPDE+6
VOLSQPDE EQU   ALLOCPDL+196
VOLSQPTR EQU   VOLSQPDE
VOLSQFLG EQU   VOLSQPDE+6
MSVGPDE  EQU   ALLOCPDL+204
MSVGPTR  EQU   MSVGPDE
MSVGFLG  EQU   MSVGPDE+6
DSNBUF   EQU   0
MSGTABLE EQU   0
LISTPTR  EQU   MSGTABLE
TMCTPTR  EQU   MSGTABLE+4
MTCPPL   EQU   TMCTPTR
ECBPTR   EQU   MSGTABLE+8
@NM00005 EQU   MSGTABLE+12
MTHIGH   EQU   @NM00005
MSGCSECT EQU   MSGTABLE+16
SW       EQU   MSGTABLE+20
MTPUTLSW EQU   SW
RETMSG   EQU   MSGTABLE+21
SW2      EQU   MSGTABLE+24
MSGID    EQU   MSGTABLE+40
MTINSRTS EQU   MSGTABLE+44
L1       EQU   MTINSRTS
VAR1     EQU   MTINSRTS+1
L2       EQU   MTINSRTS+4
L3       EQU   MTINSRTS+8
L4       EQU   MTINSRTS+12
RET      EQU   0
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   -256
CVTRELNO EQU   CVTFIX+252
VALPARM  EQU   0
VALPDE   EQU   VALPARM
VALWORK  EQU   VALPARM+4
VALMSG   EQU   VALPARM+8
PARSRTC  EQU   16
VCBLKPDE EQU   0
VCBLKPTR EQU   VCBLKPDE
VCBLKLEN EQU   VCBLKPDE+4
VCBLKBUF EQU   0
VCDSNPDE EQU   0
VCDSNPTR EQU   VCDSNPDE
VCDSNFLG EQU   VCDSNPDE+6
VCDSNPRS EQU   VCDSNFLG
VCMBRFLG EQU   VCDSNPDE+14
VCMBRPRS EQU   VCMBRFLG
VCDSNBUF EQU   0
VCTERM   EQU   VCDSNBUF
PSTATPDE EQU   0
STATPTR  EQU   PSTATPDE
STATLEN  EQU   PSTATPDE+4
STATFLG  EQU   PSTATPDE+6
SUBNMBR  EQU   PSTATPDE+18
VARPTR   EQU   PSTATPDE+20
CNSTLEN  EQU   VARPTR
VARLEN   EQU   PSTATPDE+24
ANYFLAG  EQU   PSTATPDE+26
SUBPRES  EQU   ANYFLAG
CNSTSUB  EQU   ANYFLAG
CNSTPTR  EQU   PSTATPDE+28
STATBUF  EQU   0
CNSTBUF  EQU   0
VARBUF   EQU   0
BATCPDE  EQU   0
BATCPTR  EQU   BATCPDE
BATCLEN  EQU   BATCPDE+4
BATCFLG  EQU   BATCPDE+6
SUBNUM2  EQU   BATCPDE+18
VAR2PTR  EQU   BATCPDE+20
CNST2LEN EQU   VAR2PTR
ANYFLAG2 EQU   BATCPDE+26
SUB2PRES EQU   ANYFLAG2
CNST2PTR EQU   BATCPDE+28
BATCBUF  EQU   0
CNST2BUF EQU   0
PBLKPDE1 EQU   0
BLOKNBR  EQU   PBLKPDE1+8
PBLKPTR  EQU   PBLKPDE1+12
PBLKLEN  EQU   PBLKPDE1+16
PBLKFLG  EQU   PBLKPDE1+18
PABLKPTR EQU   PBLKPDE1+20
PABLKLEN EQU   PBLKPDE1+24
PABLKFLG EQU   PBLKPDE1+26
PBLKBUF  EQU   0
PABLKBUF EQU   0
PSTSPDE  EQU   0
STAT2PDE EQU   PSTSPDE+8
PCLASPTR EQU   PSTSPDE+12
PCLASLEN EQU   PSTSPDE+16
PCLASFLG EQU   PSTSPDE+18
PCLASPRS EQU   PCLASFLG
CLASBUF1 EQU   0
AREA1    EQU   0
AREA2    EQU   0
PKAREA1  EQU   0
ABLKBUF  EQU   0
ATTRBUF  EQU   0
BLKBUF   EQU   0
CLASSBUF EQU   0
DDNBUF   EQU   0
DIRBUF   EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
MBRBUF   EQU   0
MSGECB   EQU   0
MSGTMCT  EQU   0
MSVGBUF  EQU   0
MXVOLBUF EQU   0
PASSBUF  EQU   0
POSTBUF  EQU   0
SERBUF   EQU   0
SPACBUF2 EQU   0
SPACEBUF EQU   0
UCNTBUF  EQU   0
USIDBUF  EQU   0
UTYPBUF  EQU   0
VAR2BUF  EQU   0
VSEQBUF  EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTPARS  EQU   CVTS01+176
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
*                                      START UNREFERENCED COMPONENTS
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTRV620 EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTRV612 EQU   CVTS01+664
CVTRV611 EQU   CVTS01+660
CVTRV610 EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTRV608 EQU   CVTS01+648
CVTRV607 EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTRV301 EQU   CVTS01+475
CVTRV300 EQU   CVTS01+474
CVTRV299 EQU   CVTS01+473
CVTRV298 EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTRV519 EQU   CVTS01+92
CVTRV327 EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
@NM00046 EQU   PSTSPDE+19
@NM00045 EQU   PCLASFLG
@NM00044 EQU   PSTSPDE+10
@NM00043 EQU   PSTSPDE+4
@NM00042 EQU   PSTSPDE
@NM00041 EQU   PBLKPDE1+27
@NM00040 EQU   PBLKPDE1+19
@NM00039 EQU   PBLKPDE1+10
@NM00038 EQU   PBLKPDE1+4
@NM00037 EQU   PBLKPDE1
@NM00036 EQU   BATCPDE+27
@NM00035 EQU   ANYFLAG2
VAR2SUB  EQU   ANYFLAG2
CNST2SUB EQU   ANYFLAG2
@NM00034 EQU   BATCPDE+25
VAR2LEN  EQU   BATCPDE+24
@NM00033 EQU   BATCPDE+19
@NM00032 EQU   BATCPDE+16
@NM00031 EQU   BATCPDE+12
@NM00030 EQU   BATCPDE+8
@NM00029 EQU   BATCPDE+7
@NM00028 EQU   BATCFLG
BATCPRES EQU   BATCFLG
@NM00027 EQU   BATCPDE+5
@NM00026 EQU   PSTATPDE+27
@NM00025 EQU   ANYFLAG
VARSUB   EQU   ANYFLAG
@NM00024 EQU   PSTATPDE+25
@NM00023 EQU   PSTATPDE+19
@NM00022 EQU   PSTATPDE+16
@NM00021 EQU   PSTATPDE+12
@NM00020 EQU   PSTATPDE+8
@NM00019 EQU   PSTATPDE+7
@NM00018 EQU   STATFLG
STATPRES EQU   STATFLG
@NM00017 EQU   PSTATPDE+5
@NM00016 EQU   VCDSNPDE+23
VCPSWFLG EQU   VCDSNPDE+22
VCPSWLEN EQU   VCDSNPDE+20
VCPSWPTR EQU   VCDSNPDE+16
@NM00015 EQU   VCDSNPDE+15
@NM00014 EQU   VCMBRFLG
VCMBRLEN EQU   VCDSNPDE+12
VCMBRPTR EQU   VCDSNPDE+8
@NM00013 EQU   VCDSNPDE+7
@NM00012 EQU   VCDSNFLG
VCDSNLEN EQU   VCDSNPDE+4
VCBLKFLG EQU   VCBLKPDE+6
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00011 EQU   CVTFIX+248
@NM00010 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRSV37 EQU   CVTDMSR
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
RETCHAR  EQU   RET+2
RETSIZE  EQU   RET
MSGRTN   EQU   MSGTABLE+60
VAR4     EQU   MTINSRTS+13
HIGHL4   EQU   L4
VAR3     EQU   MTINSRTS+9
HIGHL3   EQU   L3
VAR2     EQU   MTINSRTS+5
HIGHL2   EQU   L2
HIGHL1   EQU   L1
@NM00009 EQU   MSGTABLE+36
@NM00008 EQU   MSGTABLE+32
MTOLDPTR EQU   MSGTABLE+28
@NM00007 EQU   MSGTABLE+25
@NM00006 EQU   SW2
MTPGMSW  EQU   SW2
MTNPLMSW EQU   SW2
MTNOXQSW EQU   SW2
MTDOMSW  EQU   SW2
MT2OLDSW EQU   SW2
MTNHEXSW EQU   SW
MTWTPSW  EQU   SW
MTJOBISW EQU   SW
MTKEY1SW EQU   SW
MTHEXSW  EQU   SW
MTWTOSW  EQU   SW
MTNOIDSW EQU   SW
DSNTERM  EQU   DSNBUF
MSVGRSV2 EQU   MSVGPDE+7
MSVGRSV1 EQU   MSVGFLG
MSVGPRES EQU   MSVGFLG
MSVGLEN  EQU   MSVGPDE+4
VOLRSV2  EQU   VOLSQPDE+7
VOLRSV1  EQU   VOLSQFLG
VOLPRES  EQU   VOLSQFLG
VOLSQLEN EQU   VOLSQPDE+4
MXVRSV2  EQU   MXVOLPDE+7
MXVRSV1  EQU   MXVOLFLG
MXVPRES  EQU   MXVOLFLG
MXVOLLEN EQU   MXVOLPDE+4
POSRSV2  EQU   POSTPDE+7
POSRSV1  EQU   POSFLAG
POSPRES  EQU   POSFLAG
POSLEN   EQU   POSTPDE+4
LABLRSV1 EQU   ALLOCPDL+178
LABELPDE EQU   ALLOCPDL+176
UCNTRSV2 EQU   UNCNTPDE+7
UCNTRSV1 EQU   UCNTFLAG
UCNTPRES EQU   UCNTFLAG
UCNTLEN  EQU   UNCNTPDE+4
UTYPRSV2 EQU   UTYPPDE+7
UTYPRSV1 EQU   UTYPFLAG
UTYPPRES EQU   UTYPFLAG
UTYPLEN  EQU   UTYPPDE+4
USIDRSV2 EQU   USIDPDE+7
USIDRSV1 EQU   USIDFLAG
USIDPRES EQU   USIDFLAG
USIDLEN  EQU   USIDPDE+4
ATTRRSV2 EQU   ATTRPDE+7
ATTRRSV1 EQU   ATTRFLAG
ATTRPRES EQU   ATTRFLAG
ATTRLEN  EQU   ATTRPDE+4
DIRRSV2  EQU   DIRECPDE+7
DIRRSV1  EQU   DIRFLAGS
DIRPRES  EQU   DIRFLAGS
DIRLEN   EQU   DIRECPDE+4
SPCRSV22 EQU   SPACPDE2+7
SPCRSV12 EQU   SPACFLG2
SPCPRES2 EQU   SPACFLG2
SPACLEN2 EQU   SPACPDE2+4
SPACRSV2 EQU   SPACPDE+7
SPACRSV1 EQU   SPACEFLG
SPACPRES EQU   SPACEFLG
SPACELEN EQU   SPACPDE+4
ABLKRSV2 EQU   ABLKPDE+7
ABLKRSV1 EQU   ABLKFLG
ABLKPRES EQU   ABLKFLG
BLKRSV2  EQU   BLKPDE+7
BLKRSV1  EQU   BLKFLAGS
BLKPRES  EQU   BLKFLAGS
SERNEXT  EQU   SERPDE+8
SERRSV2  EQU   SERPDE+7
SERRSV1  EQU   SERFLAGS
SERPRES  EQU   SERFLAGS
SERLEN   EQU   SERPDE+4
CLASRSV2 EQU   CLASPDE+7
CLASRSV1 EQU   CLASFLG
CLASPRES EQU   CLASFLG
DDNRSV2  EQU   DDNMEPDE+7
DDNRSV1  EQU   DDNFLAGS
DDNPRES  EQU   DDNFLAGS
DDNLEN   EQU   DDNMEPDE+4
DSNNEXT  EQU   DSNPDE+24
PASSRSV2 EQU   DSNPDE+23
PASSRSV1 EQU   PASSFLAG
PASSPRES EQU   PASSFLAG
PASSLEN  EQU   DSNPDE+20
MBRRSV2  EQU   DSNPDE+15
MBRRSV1  EQU   MBRFLAGS
MBRPRES  EQU   MBRFLAGS
MBRLEN   EQU   DSNPDE+12
DSNRSV2  EQU   DSNPDE+7
DSNRSV1  EQU   DSNFLAGS
DSNQUOT  EQU   DSNFLAGS
DSNPRES  EQU   DSNFLAGS
DSNLENGH EQU   DSNPDE+4
DISPPDE  EQU   ALLOCPDL+46
RNDPDE   EQU   ALLOCPDL+44
RLSEPDE  EQU   ALLOCPDL+42
VSEQPDE  EQU   ALLOCPDL+40
PRIVPDE  EQU   ALLOCPDL+38
MAXVPDE  EQU   ALLOCPDL+36
POSPDE   EQU   ALLOCPDL+34
LABLPDE  EQU   ALLOCPDL+32
UCNTPDE  EQU   ALLOCPDL+30
UNITPDE  EQU   ALLOCPDL+28
HOLDPDE  EQU   ALLOCPDL+26
DESTPDE  EQU   ALLOCPDL+24
USINGPDE EQU   ALLOCPDL+22
DIRPDE   EQU   ALLOCPDL+20
SPACEPDE EQU   ALLOCPDL+18
VOLPDE   EQU   ALLOCPDL+14
FILEPDE  EQU   ALLOCPDL+10
DSPDE    EQU   ALLOCPDL+8
@NM00004 EQU   ALLOCPDL+4
@NM00003 EQU   ALLOCPDL
@NM00002 EQU   ALLOCWA+38
@NM00001 EQU   VCFLAGS
PTRS99RB EQU   ALLOCWA+20
TXT      EQU   ALLOCWA+16
AWARSV2  EQU   ALLOCWA+13
TERMOPT  EQU   SWITCH
CONT     EQU   SWITCH
PROMPT   EQU   SWITCH
DSOVRLAY EQU   SWITCH
RBCODE12 EQU   SWITCH
GTPLPTR  EQU   ALLOCWA+8
CPPLPSCB EQU   CPPL+8
*                                      END UNREFERENCED COMPONENTS
@RF00109 EQU   @RC00107
@RC00113 EQU   @EL00001
@RF00157 EQU   @EL00004
@RC00171 EQU   @EL00004
@RF00218 EQU   @EL00008
@RC00237 EQU   @EL00008
@RT00259 EQU   INVASTK
@RC00271 EQU   @RC00269
@RF00302 EQU   @EL00010
@RF00320 EQU   @EL00011
@RC00471 EQU   @EL00016
@RC00481 EQU   @EL00016
@PB00018 EQU   @EL00001
@RC00476 EQU   @RC00471
@PB00017 EQU   @PB00018
@PB00016 EQU   @PB00017
@PB00015 EQU   @PB00016
@PB00014 EQU   @PB00015
@PB00013 EQU   @PB00014
@PB00012 EQU   @PB00013
@PB00011 EQU   @PB00012
@PB00010 EQU   @PB00011
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@EL01    EQU   @EL00001
@ENDDATA EQU   *
         END   IKJEFD37,(C'PLS0819',0603,74341)
