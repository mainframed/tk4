         TITLE 'ALLOCATE ERROR HANDLING ROUTINE                        *
                        '
IKJEFD35 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKJEFD35  74.204'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @11,8(,@13)                                         0001
         LR    @13,@11                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
         MVC   @PC00001(4),0(@01)                                  0001
*        AWAPTR = R1;                       /* PTR TO WORK AREA      */
         LR    AWAPTR,R1                                           0043
*        MSGTABLE = MSGTABLE && MSGTABLE;   /* CLEAR MSG AREA        */
         L     @10,MSGPTR(,AWAPTR)                                 0044
         XC    MSGTABLE(64,@10),MSGTABLE(@10)                      0044
*        IF ENTRYCD = 1 THEN                /* IF DYNALLOC ERROR     */
         CLC   ENTRYCD(2,AWAPTR),@CH00033                          0045
         BNE   @RF00045                                            0045
*          CALL DFAILRTN;                   /* INVOKE MSG ROUTINE    */
         BAL   @14,DFAILRTN                                        0046
*        ELSE                               /* ELSE,                 */
*          IF ENTRYCD = 2 THEN              /* IF PARSE ERROR        */
         B     @RC00045                                            0047
@RF00045 CLC   ENTRYCD(2,AWAPTR),@CH00078                          0047
         BNE   @RF00047                                            0047
*            CALL PARSERR;                  /* INVOKE PARSE MSG RTN  */
         BAL   @14,PARSERR                                         0048
*          ELSE                             /* ELSE,                 */
*            IF ENTRYCD = 3 ×               /* IF GENTRANS OR        */
*               ENTRYCD = 4 THEN            /* CMDSCAN ERROR         */
         B     @RC00047                                            0049
@RF00047 LH    @10,ENTRYCD(,AWAPTR)                                0049
         C     @10,@CF00318                                        0049
         BE    @RT00049                                            0049
         C     @10,@CF00316                                        0049
         BNE   @RF00049                                            0049
@RT00049 DS    0H                                                  0050
*              CALL SYSERR;                 /* INVOKE SYSTEM MSG RTN */
         BAL   @14,SYSERR                                          0050
*            ELSE                           /* ELSE,                 */
*              IF ENTRYCD = 5 THEN          /* IF DISPOSITION ERROR  */
         B     @RC00049                                            0051
@RF00049 CLC   ENTRYCD(2,AWAPTR),@CH00045                          0051
         BNE   @RF00051                                            0051
*                CALL DISPERR;              /* INVOKE DISP MSG RTN   */
*                                                                  0052
         BAL   @14,DISPERR                                         0052
*        IF RBCODE12 = '1'B  THEN           /* IF ERROR OCCURRED,    */
@RF00051 DS    0H                                                  0053
@RC00049 DS    0H                                                  0053
@RC00047 DS    0H                                                  0053
@RC00045 TM    RBCODE12(AWAPTR),B'10000000'                        0053
         BNO   @RF00053                                            0053
*          RETCODE = 12;                    /* SET RETURN CODE TO 12 */
         L     @10,REGSAVE(,R13)                                   0054
         MVC   RETCODE(4,@10),@CF00329                             0054
*        ELSE                               /* ELSE                  */
*          RETCODE = 0;                     /* RETURN CODE IS 0      */
*                                                                  0055
         B     @RC00053                                            0055
@RF00053 L     @10,REGSAVE(,R13)                                   0055
         SLR   @15,@15                                             0055
         ST    @15,RETCODE(,@10)                                   0055
*        RETURN;                                                   0056
@EL00001 L     @13,4(,@13)                                         0056
@EF00001 L     @00,@SIZDATD                                        0056
         LR    @01,@11                                             0056
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0056
         BR    @14                                                 0056
*/************** START OF SPECIFICATIONS *****                     0057
**                                                                 0057
** SEGMENT NAME -                                                  0057
**      SYSERR                                                     0057
**                                                                 0057
** FUNCTION -                                                      0057
**      THIS ROUTINE ISSUES THE MESSAGE NOTIFYING THE USER OF A    0057
**      COMMAND SYSTEM ERROR.                                      0057
**                                                                 0057
** OPERATION -                                                     0057
**      SET UP THE MESSAGE SEGMENTS. INVOKE IKJEFF02 TO ISSUE      0057
**      THE MESSAGE.                                               0057
**                                                                 0057
** INPUT -                                                         0057
**      RETURN CODE                                                0057
**                                                                 0057
** OUTPUT -                                                        0057
**      MESSAGE ISSUED                                             0057
**                                                                 0057
*******************            END OF SPECIFICATIONS ******/       0057
*                                                                  0057
*    SYSERR: PROC;                                                 0057
*                                                                  0057
         B     @EL00001                                            0057
SYSERR   STM   @14,@12,@SA00002                                    0057
*        MSGID = '102A';                    /* SET MESSAGE ID        */
         L     @10,MSGPTR(,AWAPTR)                                 0058
         MVC   MSGID(4,@10),@CC00457                               0058
*        IF ENTRYCD = 2 THEN                /* IF PARSE ERROR        */
         CLC   ENTRYCD(2,AWAPTR),@CH00078                          0059
         BNE   @RF00059                                            0059
*          DO;                              /* THEN,                 */
*            VAR1 = ADDR(PARS);             /* PUT PARSE VARIABLE    */
         LA    @02,PARS                                            0061
         ST    @02,@TF00001                                        0061
         MVC   VAR1(3,@10),@TF00001+1                              0061
*            L1 = LENGTH(PARS);             /* AND LENGTH IN LIST    */
         MVI   L1(@10),X'05'                                       0062
*          END;                                                    0063
*        IF ENTRYCD = 3 THEN                /* IF GENTRANS ERROR     */
@RF00059 CLC   ENTRYCD(2,AWAPTR),@CH00318                          0064
         BNE   @RF00064                                            0064
*          DO;                              /* THEN                  */
*            VAR1 = ADDR(GTRANS);           /* PUT GENTRANS VARIABLE */
         L     @10,MSGPTR(,AWAPTR)                                 0066
         LA    @02,GTRANS                                          0066
         ST    @02,@TF00001                                        0066
         MVC   VAR1(3,@10),@TF00001+1                              0066
*            L1 = LENGTH(GTRANS);           /* AND LENGTH IN LIST    */
         MVI   L1(@10),X'08'                                       0067
*          END;                                                    0068
*        IF ENTRYCD = 4 THEN                /* IF CMD SCAN ERROR     */
@RF00064 CLC   ENTRYCD(2,AWAPTR),@CH00316                          0069
         BNE   @RF00069                                            0069
*          DO;                              /* THEN,                 */
*            VAR1 = ADDR(CMDSCAN);          /* PUT CMD SCAN VARIABLE */
         L     @10,MSGPTR(,AWAPTR)                                 0071
         LA    @02,CMDSCAN                                         0071
         ST    @02,@TF00001                                        0071
         MVC   VAR1(3,@10),@TF00001+1                              0071
*            L1 = LENGTH(CMDSCAN);          /* AND LENGTH IN LIST    */
         MVI   L1(@10),X'0C'                                       0072
*          END;                                                    0073
*                                                                  0073
*        VAR2 = ADDR(RCODESV);              /* PUT RETURN CODE AND   */
@RF00069 L     @10,MSGPTR(,AWAPTR)                                 0074
         LA    @02,RCODESV(,AWAPTR)                                0074
         ST    @02,@TF00001                                        0074
         MVC   VAR2(3,@10),@TF00001+1                              0074
*        L2 = 4;                            /* LENGTH IN LIST        */
         MVI   L2(@10),X'04'                                       0075
*        HIGHL2 = '1'B;                     /* INDICATE CONVERT HEX  */
         OI    HIGHL2(@10),B'10000000'                             0076
*        CALL PUTMSG;                       /* ISSUE MESSAGE         */
         BAL   @14,PUTMSG                                          0077
*        RBCODE12 = '1'B;                   /* INDICATE ALLOC FAILED */
*                                                                  0078
         OI    RBCODE12(AWAPTR),B'10000000'                        0078
*    END SYSERR;                                                   0079
@EL00002 DS    0H                                                  0079
@EF00002 DS    0H                                                  0079
@ER00002 LM    @14,@12,@SA00002                                    0079
         BR    @14                                                 0079
*/****************** START OF SPECIFICATIONS     *******           0080
**                                                                 0080
** SEGMENT NAME -                                                  0080
**      PARSERR                                                    0080
**                                                                 0080
** FUNCTION -                                                      0080
**      THIS ROUTINE ISSUES A DIAGNOSTIC MESSAGE WHEN PARSE        0080
**      SERVICE ROUTINE HAS FAILED.                                0080
**                                                                 0080
** OPERATION -                                                     0080
**      IF THE RETURN CODE IS 4, DO NOT ISSUE A MESSAGE. IF THE    0080
**      RETURN CODE IS 16, ISSUE MESSAGE INDICATING NOT ENOUGH     0080
**      STORAGE WAS AVAILABLE.  FOR ANY OTHER RETURN CODE, INVOKE  0080
**      ROUTINE SYSERR.                                            0080
**                                                                 0080
** INPUT -                                                         0080
**      PARSE RETURN CODE                                          0080
**                                                                 0080
** OUTPUT -                                                        0080
**      MESSAGE ISSUED                                             0080
**                                                                 0080
*****************************   END OF SPECIFICATIONS  ******/     0080
*                                                                  0080
*    PARSERR: PROC;                                                0080
*                                                                  0080
PARSERR  STM   @14,@12,@SA00003                                    0080
*        IF RCODESV = 4 THEN                /* IF NO PROMPT MODE,    */
         CLC   RCODESV(4,AWAPTR),@CF00316                          0081
         BNE   @RF00081                                            0081
*          RBCODE12 = '1'B;                 /* INDICATE ALLOC FAILED */
         OI    RBCODE12(AWAPTR),B'10000000'                        0082
*        ELSE                                                      0083
*          IF RCODESV = 16 THEN             /* IF NOT ENOUGH STORAGE */
         B     @RC00081                                            0083
@RF00081 CLC   RCODESV(4,AWAPTR),@CF00464                          0083
         BNE   @RF00083                                            0083
*            DO;                            /* SET UP MSG -          */
*              RBCODE12 = '1'B;             /* INDICATE ALLOC FAILED */
         OI    RBCODE12(AWAPTR),B'10000000'                        0085
*              MSGID = '100A';              /* SET MESSAGE ID        */
         L     @10,MSGPTR(,AWAPTR)                                 0086
         MVC   MSGID(4,@10),@CC00465                               0086
*              CALL PUTMSG;                 /* ISSUE MESSAGE         */
         BAL   @14,PUTMSG                                          0087
*            END;                                                  0088
*          ELSE                             /* OTHER RETURN CODES -  */
*            CALL SYSERR;                   /* ISSUE SYSTEM ERR MSG  */
*                                                                  0089
         B     @RC00083                                            0089
@RF00083 BAL   @14,SYSERR                                          0089
*    END PARSERR;                                                  0090
@EL00003 DS    0H                                                  0090
@EF00003 DS    0H                                                  0090
@ER00003 LM    @14,@12,@SA00003                                    0090
         BR    @14                                                 0090
*/*******************    START OF SPECIFICATIONS   ****            0091
**                                                                 0091
** SEGMENT NAME -                                                  0091
**      DISPERR                                                    0091
**                                                                 0091
** FUNCTION -                                                      0091
**      THIS ROUTINE ISSUES AN ERROR MESSAGE IF A DISPOSITION OF   0091
**      DELETE HAS BEEN SPECIFIED FOR A MEMBER OF A PARTITIONED    0091
**      DATA SET.                                                  0091
**                                                                 0091
** OPERATION -                                                     0091
**      SET UP MESSAGE TO BE ISSUED. GET DATA SET NAME.  INVOKE    0091
**      IKJEFF02 TO ISSUE MESSAGE.                                 0091
**                                                                 0091
** INPUT -                                                         0091
**      PTR TO DSNAME                                              0091
**                                                                 0091
** OUTPUT -                                                        0091
**      MESSAGE ISSUED                                             0091
**                                                                 0091
*****************              END OF SPECIFICATIONS     ****/     0091
*                                                                  0091
*    DISPERR: PROC;                                                0091
*                                                                  0091
DISPERR  STM   @14,@12,@SA00004                                    0091
*        MSGID = '118A';                    /* SET MESSAGE ID        */
         L     @10,MSGPTR(,AWAPTR)                                 0092
         MVC   MSGID(4,@10),@CC00469                               0092
*        VAR1 = DSNPTR;                     /* PUT DSNAME VARIABLE   */
         L     @02,PTRPDL(,AWAPTR)                                 0093
         MVC   VAR1(3,@10),DSNPTR+1(@02)                           0093
*        L1 = DSNLENGH;                     /* AND LENGTH IN LIST    */
*                                                                  0094
         MVC   L1(1,@10),DSNLENGH+1(@02)                           0094
*        CALL PUTMSG;                       /* ISSUE MESSAGE         */
         BAL   @14,PUTMSG                                          0095
*        RBCODE12 = '1'B;                   /* INDICATE ALLOC FAILED */
*                                                                  0096
         OI    RBCODE12(AWAPTR),B'10000000'                        0096
*    END DISPERR;                                                  0097
@EL00004 DS    0H                                                  0097
@EF00004 DS    0H                                                  0097
@ER00004 LM    @14,@12,@SA00004                                    0097
         BR    @14                                                 0097
*/************** START OF SPECIFICATIONS   ****                    0098
**                                                                 0098
** SEGMENT NAME -                                                  0098
**      MSGRTN                                                     0098
**                                                                 0098
** FUNCTION -                                                      0098
**      THIS ROUTINE INVOKES DAIRFAIL TO ISSUE AN ERROR MESSAGE.   0098
**                                                                 0098
** OPERATION -                                                     0098
**      DAIRFAIL IS LOADED AND CALLED. BY ANALYZING DATA IN THE    0098
**      REQUEST BLOCK, DAIRFAIL DETERMINES THE APPROPRIATE MESSAGE 0098
**      TO ISSUE TO THE USER.                                      0098
**                                                                 0098
** INPUT -                                                         0098
**      WORKAREA                                                   0098
**                                                                 0098
** OUTPUT -                                                        0098
**      MESSAGE ISSUED                                             0098
**                                                                 0098
********************     END OF SPECIFICATIONS  ****/              0098
*                                                                  0098
*    DFAILRTN: PROC;                                               0098
*                                                                  0098
DFAILRTN STM   @14,@12,@SA00005                                    0098
*        GEN (LOAD EP=IKJEFF18);            /* LOAD DAIRFAIL         */
*                                                                  0099
         LOAD EP=IKJEFF18
*        CALL R0                            /* CALL DAIRFAIL,PASSING */
*            (S99RB,                        /* REQUEST BLOCK         */
*             RCODESV,                      /* RETURN CODE           */
*             ADMSG,                        /* ADDR OF MSG RTN = 0   */
*             CALLERNO,                     /* CALLER ID = 50        */
*             CPPL);                        /* CPPL POINTER          */
*                                                                  0100
         L     @01,PTRS99RB(,AWAPTR)                               0100
         ST    @01,@AL00001                                        0100
         LA    @10,RCODESV(,AWAPTR)                                0100
         ST    @10,@AL00001+4                                      0100
         LA    @10,ADMSG                                           0100
         ST    @10,@AL00001+8                                      0100
         LA    @10,CALLERNO                                        0100
         ST    @10,@AL00001+12                                     0100
         L     @01,CPPLPTR(,AWAPTR)                                0100
         ST    @01,@AL00001+16                                     0100
         LR    @15,R0                                              0100
         LA    @01,@AL00001                                        0100
         BALR  @14,@15                                             0100
*        GEN (DELETE EP=IKJEFF18);          /* DELETE DAIRFAIL       */
*                                                                  0101
         DELETE EP=IKJEFF18
*    END DFAILRTN;                                                 0102
@EL00005 DS    0H                                                  0102
@EF00005 DS    0H                                                  0102
@ER00005 LM    @14,@12,@SA00005                                    0102
         BR    @14                                                 0102
*/***************     START OF SPECIFICATIONS *****                0103
**                                                                 0103
** SEGMENT NAME -                                                  0103
**      PUTMSG                                                     0103
**                                                                 0103
** FUNCTION -                                                      0103
**      THIS ROUTINE INVOKES IKJEFF02 TO ISSUE MESSAGES            0103
**                                                                 0103
** OPERATION -                                                     0103
**      IKJEFF02 IS LOADED. THE PARAMETER LIST IS COMPLETED. CALL  0103
**      IKJEFF02, AND SAVE THE RETURN CODE. DELETE IKJEFF02.       0103
**                                                                 0103
** INPUT -                                                         0103
**      IKJEFF02 PARAMETER LIST                                    0103
**                                                                 0103
** OUTPUT -                                                        0103
**      MESSAGE ISSUED                                             0103
**                                                                 0103
**********************       END OF SPECIFICATIONS *****/          0103
*                                                                  0103
*    PUTMSG: PROC;                                                 0103
*                                                                  0103
PUTMSG   STM   @14,@12,@SA00006                                    0103
*        LISTPTR = ADDR(MSGCSECT);          /* PTR TO MSG PARMS      */
         L     @10,MSGPTR(,AWAPTR)                                 0104
         LA    @02,MSGCSECT(,@10)                                  0104
         ST    @02,LISTPTR(,@10)                                   0104
*        MTCPPL = CPPLPTR;                  /* PTR TO CPPL           */
         L     @02,CPPLPTR(,AWAPTR)                                0105
         ST    @02,MTCPPL(,@10)                                    0105
*        ECBPTR = ADDR(COMMECB);            /* PTR TO ECB            */
         LA    @02,COMMECB(,AWAPTR)                                0106
         ST    @02,ECBPTR(,@10)                                    0106
*        COMMECB = 0;                       /* INIT ECB TO 0         */
         SLR   @02,@02                                             0107
         ST    @02,COMMECB(,AWAPTR)                                0107
*        MTHIGH = '1'B;                     /* INDICATE END OF LIST  */
         OI    MTHIGH(@10),B'10000000'                             0108
*        MTPUTLSW = '1'B;                   /* INDICATE PUTLINE      */
         OI    MTPUTLSW(@10),B'01000000'                           0109
*        MSGCSECT = PTRMSGS;                /* PTR TO MSG CSECT      */
*                                                                  0110
         L     @02,PTRMSGS(,AWAPTR)                                0110
         ST    @02,MSGCSECT(,@10)                                  0110
*        R1 = ADDR(MSGTABLE);               /* MSG PARMS IN REG 1    */
         LR    R1,@10                                              0111
*        GEN (LINK EP=IKJEFF02);            /* INVOKE MSG PROCESSOR  */
         LINK EP=IKJEFF02
*        RCODESV = R15;                     /* SAVE RETURN CODE      */
*                                                                  0113
         ST    R15,RCODESV(,AWAPTR)                                0113
*        IF RCODESV > 0 THEN                /* IF NON-ZERO CODE      */
         L     @10,RCODESV(,AWAPTR)                                0114
         LTR   @10,@10                                             0114
         BNP   @RF00114                                            0114
*          RBCODE12 = '1'B;                 /* INDICATE ALLOC FAILED */
*                                                                  0115
         OI    RBCODE12(AWAPTR),B'10000000'                        0115
*    END PUTMSG;                                                   0116
*                                                                  0116
@EL00006 DS    0H                                                  0116
@EF00006 DS    0H                                                  0116
@ER00006 LM    @14,@12,@SA00006                                    0116
         BR    @14                                                 0116
*    END IKJEFD35                                                  0117
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJZT430)                                        *
*/*%INCLUDE SYSLIB  (IKJEFFMT)                                        *
*/*%INCLUDE SYSLIB  (IKJCPPL )                                        *
*/*%INCLUDE SYSLIB  (IEFZB4D0)                                        *
*;                                                                 0117
@DATA    DS    0H
@CH00033 DC    H'1'
@CH00078 DC    H'2'
@CH00045 DC    H'5'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SAV001  EQU   @SA00001
@SA00005 DS    15F
@SA00003 DS    15F
@SA00002 DS    15F
@SA00004 DS    15F
@SA00006 DS    15F
@AL00001 DS    5A
@TF00001 DS    F
@ZTEMPS  DS    C
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
@TEMPS   EQU   @ZTEMPS
@L       EQU   @ZLEN
IKJEFD35 CSECT
         DS    0F
@CF00318 DC    F'3'
@CH00318 EQU   @CF00318+2
@CF00316 DC    F'4'
@CH00316 EQU   @CF00316+2
@CF00329 DC    F'12'
@CF00464 DC    F'16'
@DATD    DSECT
         DS    0D
S99RBPTR DS    AL4
         ORG   S99RBPTR
S99RBPND DS    BL1
         ORG   S99RBPTR+4
S99TUFP  DS    A
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
@DATEND  EQU   *
IKJEFD35 CSECT
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
@SIZ001  EQU   @SIZDATD
         DS    0D
ADMSG    DC    F'0'
CALLERNO DC    H'50'
@CC00457 DC    C'102A'
@CC00465 DC    C'100A'
@CC00469 DC    C'118A'
PARS     DC    CL5'PARSE'
GTRANS   DC    CL8'GENTRANS'
CMDSCAN  DC    CL12'COMMAND SCAN'
         DS    CL1
PATCH35  DC    25F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
@0       EQU   00
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
AWAPTR   EQU   @03
R0       EQU   @00
R1       EQU   @01
R13      EQU   @13
R15      EQU   @15
R14      EQU   @14
REGSAVE  EQU   4
RETCODE  EQU   16
ALLOCWA  EQU   0
CPPLPTR  EQU   ALLOCWA
PTRPDL   EQU   ALLOCWA+4
SWITCH   EQU   ALLOCWA+12
RBCODE12 EQU   SWITCH
ENTRYCD  EQU   ALLOCWA+14
PTRS99RB EQU   ALLOCWA+20
RCODESV  EQU   ALLOCWA+24
PTRMSGS  EQU   ALLOCWA+32
VCFLAGS  EQU   ALLOCWA+36
MSGPTR   EQU   ALLOCWA+48
CMDTWO   EQU   ALLOCWA+60
COMMECB  EQU   ALLOCWA+160
ALLOCPDL EQU   0
DSNPDE   EQU   ALLOCPDL+48
DSNPTR   EQU   DSNPDE
DSNLENGH EQU   DSNPDE+4
DSNFLAGS EQU   DSNPDE+6
MBRPTR   EQU   DSNPDE+8
MBRFLAGS EQU   DSNPDE+14
PASSPTR  EQU   DSNPDE+16
PASSFLAG EQU   DSNPDE+22
DDNMEPDE EQU   ALLOCPDL+76
DDNPTR   EQU   DDNMEPDE
DDNFLAGS EQU   DDNMEPDE+6
CLASPDE  EQU   ALLOCPDL+84
CLASPTR  EQU   CLASPDE
CLASFLG  EQU   CLASPDE+6
SERPDE   EQU   ALLOCPDL+92
SERPTR   EQU   SERPDE
SERFLAGS EQU   SERPDE+6
BLKPDE   EQU   ALLOCPDL+104
BLKPTR   EQU   BLKPDE
BLKFLAGS EQU   BLKPDE+6
ABLKPDE  EQU   ALLOCPDL+112
ABLKPTR  EQU   ABLKPDE
ABLKFLG  EQU   ABLKPDE+6
SPACPDE  EQU   ALLOCPDL+120
SPACEPTR EQU   SPACPDE
SPACEFLG EQU   SPACPDE+6
SPACPDE2 EQU   ALLOCPDL+128
SPACPTR2 EQU   SPACPDE2
SPACFLG2 EQU   SPACPDE2+6
DIRECPDE EQU   ALLOCPDL+136
DIRPTR   EQU   DIRECPDE
DIRFLAGS EQU   DIRECPDE+6
ATTRPDE  EQU   ALLOCPDL+144
ATTRPTR  EQU   ATTRPDE
ATTRFLAG EQU   ATTRPDE+6
USIDPDE  EQU   ALLOCPDL+152
USIDPTR  EQU   USIDPDE
USIDFLAG EQU   USIDPDE+6
UTYPPDE  EQU   ALLOCPDL+160
UTYPPTR  EQU   UTYPPDE
UTYPFLAG EQU   UTYPPDE+6
UNCNTPDE EQU   ALLOCPDL+168
UCNTPTR  EQU   UNCNTPDE
UCNTFLAG EQU   UNCNTPDE+6
POSTPDE  EQU   ALLOCPDL+180
POSPTR   EQU   POSTPDE
POSFLAG  EQU   POSTPDE+6
MXVOLPDE EQU   ALLOCPDL+188
MXVOLPTR EQU   MXVOLPDE
MXVOLFLG EQU   MXVOLPDE+6
VOLSQPDE EQU   ALLOCPDL+196
VOLSQPTR EQU   VOLSQPDE
VOLSQFLG EQU   VOLSQPDE+6
VVGRPDE  EQU   ALLOCPDL+204
VVGPPTR  EQU   VVGRPDE
VVGPFLG  EQU   VVGRPDE+6
DSNBUF   EQU   0
MSGTABLE EQU   0
LISTPTR  EQU   MSGTABLE
TMCTPTR  EQU   MSGTABLE+4
MTCPPL   EQU   TMCTPTR
ECBPTR   EQU   MSGTABLE+8
@NM00005 EQU   MSGTABLE+12
MTHIGH   EQU   @NM00005
MSGCSECT EQU   MSGTABLE+16
SW       EQU   MSGTABLE+20
MTPUTLSW EQU   SW
RETMSG   EQU   MSGTABLE+21
SW2      EQU   MSGTABLE+24
MSGID    EQU   MSGTABLE+40
MTINSRTS EQU   MSGTABLE+44
L1       EQU   MTINSRTS
VAR1     EQU   MTINSRTS+1
L2       EQU   MTINSRTS+4
HIGHL2   EQU   L2
VAR2     EQU   MTINSRTS+5
L3       EQU   MTINSRTS+8
L4       EQU   MTINSRTS+12
RET      EQU   0
CPPL     EQU   0
S99RB    EQU   0
S99FLAG1 EQU   S99RB+2
S99FLG11 EQU   S99FLAG1
S99RSC   EQU   S99RB+4
S99TXTPP EQU   S99RB+8
S99FLAG2 EQU   S99RB+16
S99FLG21 EQU   S99FLAG2
S99FLG22 EQU   S99FLAG2+1
S99TUPL  EQU   0
S99TUPTR EQU   S99TUPL
S99TUP   EQU   0
S99TUNIT EQU   0
S99TUENT EQU   S99TUNIT+4
S99TUFLD EQU   0
ABLKBUF  EQU   0
ATTRBUF  EQU   0
BLKBUF   EQU   0
CLASSBUF EQU   0
DDNBUF   EQU   0
DIRBUF   EQU   0
MBRBUF   EQU   0
MSGECB   EQU   0
MSGTMCT  EQU   0
MXVOLBUF EQU   0
PASSBUF  EQU   0
POSTBUF  EQU   0
SERBUF   EQU   0
SPACBUF2 EQU   0
SPACEBUF EQU   0
UCNTBUF  EQU   0
USIDBUF  EQU   0
UTYPBUF  EQU   0
VSEQBUF  EQU   0
VVGPBUF  EQU   0
INPARMS  EQU   0
*                                      START UNREFERENCED COMPONENTS
S99TUPRM EQU   S99TUFLD+2
S99TULEN EQU   S99TUFLD
S99TUPAR EQU   S99TUENT+2
S99TULNG EQU   S99TUENT
S99TUNUM EQU   S99TUNIT+2
S99TUKEY EQU   S99TUNIT
S99TUPND EQU   S99TUP
S99TUPLN EQU   S99TUPTR
S99FLG24 EQU   S99FLAG2+3
S99FLG23 EQU   S99FLAG2+2
S99PCINT EQU   S99FLG22
S99UDEVT EQU   S99FLG22
S99MOUNT EQU   S99FLG21
S99CATLG EQU   S99FLG21
S99TIONQ EQU   S99FLG21
S99OFFLN EQU   S99FLG21
S99WTUNT EQU   S99FLG21
S99NORES EQU   S99FLG21
S99WTDSN EQU   S99FLG21
S99WTVOL EQU   S99FLG21
S99RSV01 EQU   S99RB+12
S99INFO  EQU   S99RSC+2
S99ERROR EQU   S99RSC
S99FLG12 EQU   S99FLAG1+1
S99JBSYS EQU   S99FLG11
S99NOMNT EQU   S99FLG11
S99NOCNV EQU   S99FLG11
S99ONCNV EQU   S99FLG11
S99VERB  EQU   S99RB+1
S99RBLN  EQU   S99RB
CPPLECT  EQU   CPPL+12
CPPLPSCB EQU   CPPL+8
CPPLUPT  EQU   CPPL+4
CPPLCBUF EQU   CPPL
RETCHAR  EQU   RET+2
RETSIZE  EQU   RET
MSGRTN   EQU   MSGTABLE+60
VAR4     EQU   MTINSRTS+13
HIGHL4   EQU   L4
VAR3     EQU   MTINSRTS+9
HIGHL3   EQU   L3
HIGHL1   EQU   L1
@NM00009 EQU   MSGTABLE+36
@NM00008 EQU   MSGTABLE+32
MTOLDPTR EQU   MSGTABLE+28
@NM00007 EQU   MSGTABLE+25
@NM00006 EQU   SW2
MTPGMSW  EQU   SW2
MTNPLMSW EQU   SW2
MTNOXQSW EQU   SW2
MTDOMSW  EQU   SW2
MT2OLDSW EQU   SW2
MTNHEXSW EQU   SW
MTWTPSW  EQU   SW
MTJOBISW EQU   SW
MTKEY1SW EQU   SW
MTHEXSW  EQU   SW
MTWTOSW  EQU   SW
MTNOIDSW EQU   SW
DSNTERM  EQU   DSNBUF
VVGPRSV2 EQU   VVGRPDE+7
VVGPRSV1 EQU   VVGPFLG
VVGPRES  EQU   VVGPFLG
VVGPLEN  EQU   VVGRPDE+4
VOLRSV2  EQU   VOLSQPDE+7
VOLRSV1  EQU   VOLSQFLG
VOLPRES  EQU   VOLSQFLG
VOLSQLEN EQU   VOLSQPDE+4
MXVRSV2  EQU   MXVOLPDE+7
MXVRSV1  EQU   MXVOLFLG
MXVPRES  EQU   MXVOLFLG
MXVOLLEN EQU   MXVOLPDE+4
POSRSV2  EQU   POSTPDE+7
POSRSV1  EQU   POSFLAG
POSPRES  EQU   POSFLAG
POSLEN   EQU   POSTPDE+4
LABLRSV1 EQU   ALLOCPDL+178
LABELPDE EQU   ALLOCPDL+176
UCNTRSV2 EQU   UNCNTPDE+7
UCNTRSV1 EQU   UCNTFLAG
UCNTPRES EQU   UCNTFLAG
UCNTLEN  EQU   UNCNTPDE+4
UTYPRSV2 EQU   UTYPPDE+7
UTYPRSV1 EQU   UTYPFLAG
UTYPPRES EQU   UTYPFLAG
UTYPLEN  EQU   UTYPPDE+4
USIDRSV2 EQU   USIDPDE+7
USIDRSV1 EQU   USIDFLAG
USIDPRES EQU   USIDFLAG
USIDLEN  EQU   USIDPDE+4
ATTRRSV2 EQU   ATTRPDE+7
ATTRRSV1 EQU   ATTRFLAG
ATTRPRES EQU   ATTRFLAG
ATTRLEN  EQU   ATTRPDE+4
DIRRSV2  EQU   DIRECPDE+7
DIRRSV1  EQU   DIRFLAGS
DIRPRES  EQU   DIRFLAGS
DIRLEN   EQU   DIRECPDE+4
SPCRSV22 EQU   SPACPDE2+7
SPCRSV12 EQU   SPACFLG2
SPCPRES2 EQU   SPACFLG2
SPACLEN2 EQU   SPACPDE2+4
SPACRSV2 EQU   SPACPDE+7
SPACRSV1 EQU   SPACEFLG
SPACPRES EQU   SPACEFLG
SPACELEN EQU   SPACPDE+4
ABLKRSV2 EQU   ABLKPDE+7
ABLKRSV1 EQU   ABLKFLG
ABLKPRES EQU   ABLKFLG
ABLKLEN  EQU   ABLKPDE+4
BLKRSV2  EQU   BLKPDE+7
BLKRSV1  EQU   BLKFLAGS
BLKPRES  EQU   BLKFLAGS
BLKLEN   EQU   BLKPDE+4
SERNEXT  EQU   SERPDE+8
SERRSV2  EQU   SERPDE+7
SERRSV1  EQU   SERFLAGS
SERPRES  EQU   SERFLAGS
SERLEN   EQU   SERPDE+4
CLASRSV2 EQU   CLASPDE+7
CLASRSV1 EQU   CLASFLG
CLASPRES EQU   CLASFLG
CLASLEN  EQU   CLASPDE+4
DDNRSV2  EQU   DDNMEPDE+7
DDNRSV1  EQU   DDNFLAGS
DDNPRES  EQU   DDNFLAGS
DDNLEN   EQU   DDNMEPDE+4
DSNNEXT  EQU   DSNPDE+24
PASSRSV2 EQU   DSNPDE+23
PASSRSV1 EQU   PASSFLAG
PASSPRES EQU   PASSFLAG
PASSLEN  EQU   DSNPDE+20
MBRRSV2  EQU   DSNPDE+15
MBRRSV1  EQU   MBRFLAGS
MBRPRES  EQU   MBRFLAGS
MBRLEN   EQU   DSNPDE+12
DSNRSV2  EQU   DSNPDE+7
DSNRSV1  EQU   DSNFLAGS
DSNQUOT  EQU   DSNFLAGS
DSNPRES  EQU   DSNFLAGS
DISPPDE  EQU   ALLOCPDL+46
RNDPDE   EQU   ALLOCPDL+44
RLSEPDE  EQU   ALLOCPDL+42
VSEQPDE  EQU   ALLOCPDL+40
PRIVPDE  EQU   ALLOCPDL+38
MAXVPDE  EQU   ALLOCPDL+36
POSPDE   EQU   ALLOCPDL+34
LABLPDE  EQU   ALLOCPDL+32
UCNTPDE  EQU   ALLOCPDL+30
UNITPDE  EQU   ALLOCPDL+28
HOLDPDE  EQU   ALLOCPDL+26
DESTPDE  EQU   ALLOCPDL+24
USINGPDE EQU   ALLOCPDL+22
DIRPDE   EQU   ALLOCPDL+20
SPACEPDE EQU   ALLOCPDL+18
BLOKPDE  EQU   ALLOCPDL+16
VOLPDE   EQU   ALLOCPDL+14
STATSPDE EQU   ALLOCPDL+12
FILEPDE  EQU   ALLOCPDL+10
DSPDE    EQU   ALLOCPDL+8
@NM00004 EQU   ALLOCPDL+4
@NM00003 EQU   ALLOCPDL
FIRSTPTR EQU   ALLOCWA+176
PPLPTR   EQU   ALLOCWA+172
NBLKBUF1 EQU   ALLOCWA+164
PDLADDR3 EQU   ALLOCWA+156
PPLTWO   EQU   ALLOCWA+128
CMDTWOBF EQU   CMDTWO+4
CMDTWOOF EQU   CMDTWO+2
CMDTWOLN EQU   CMDTWO
Q        EQU   ALLOCWA+56
P        EQU   ALLOCWA+52
PRCODE   EQU   ALLOCWA+44
PMPTPDL  EQU   ALLOCWA+40
@NM00002 EQU   ALLOCWA+38
NCLASBUF EQU   ALLOCWA+37
@NM00001 EQU   VCFLAGS
SPACE2   EQU   VCFLAGS
SPACE1   EQU   VCFLAGS
AVBLK    EQU   VCFLAGS
DSNCTR   EQU   ALLOCWA+30
VLISTCTR EQU   ALLOCWA+28
TXT      EQU   ALLOCWA+16
AWARSV2  EQU   ALLOCWA+13
FIRSTPDE EQU   SWITCH
AWARSV1  EQU   SWITCH
ASTRSK   EQU   SWITCH
TERMOPT  EQU   SWITCH
CONT     EQU   SWITCH
PROMPT   EQU   SWITCH
DSOVRLAY EQU   SWITCH
GTPLPTR  EQU   ALLOCWA+8
*                                      END UNREFERENCED COMPONENTS
@RC00053 EQU   @EL00001
@RC00083 EQU   @EL00003
@RC00081 EQU   @EL00003
@RF00114 EQU   @EL00006
@EL01    EQU   @EL00001
@ENDDATA EQU   *
         END   IKJEFD35,(C'PLS0301',0603,74204)
