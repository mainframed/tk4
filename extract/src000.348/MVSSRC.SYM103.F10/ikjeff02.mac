         TITLE 'IKJEFF02 - TSO MESSAGE ISSUER SERVICE ROUTINE          *
                        '
IKJEFF02 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKJEFF02  78.181'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  LA    @12,4095(,@11)                                      0001
         USING @PSTART,@11                                         0001
         USING @PSTART+4095,@12                                    0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @10,@01                                             0001
         USING @DATD,@10                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @10,8(,@13)                                         0001
         LR    @13,@10                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
         MVC   @PC00001(12),0(@01)                                 0001
DUMYLBL1 DS    0H                                                  0003
*                                                                  0116
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE AND CHECK FOR PARAMETER LIST ERRORS                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0116
*   ERRORSWS=''X;                   /* ZERO OUT ERROR SWITCH AREA    */
         XC    ERRORSWS(2),ERRORSWS                                0116
*   INTSWS=''X;                     /* TURN OFF SWITCHES USED IN   0117
*                                      INTERNAL PROCESSING           */
         SLR   @08,@08                                             0117
         STC   @08,INTSWS                                          0117
*   RETCODE=0;                      /* INITIALIZE TO GOOD RETURN CODE
*                                      FROM IKJEFF02                 */
         SLR   @08,@08                                             0118
         ST    @08,RETCODE                                         0118
*   PARMPTR1=ADDR(PARM1);           /* SET POINTER TO THE FIRST OF 0119
*                                      THE INPUT PARAMETERS          */
         L     PARMPTR1,@PC00001                                   0119
*   RFY                                                            0120
*     REG1 RSTD;                                                   0120
*   IF REG1=0×PARMPTR1=0 THEN       /* NEED TO ISSUE ERROR MESSAGE IF
*                                      BAD PARAMETER LIST POINTER    */
         CR    REG1,@08                                            0121
         BE    @RT00121                                            0121
         CR    PARMPTR1,@08                                        0121
         BNE   @RF00121                                            0121
@RT00121 DS    0H                                                  0122
*     DO;                                                          0122
*       PTRPLER=ON;                                                0123
         OI    PTRPLER,B'10000000'                                 0123
*       CALL EMSGPROC;              /* ISSUE ERROR MESSAGE           */
         BAL   @14,EMSGPROC                                        0124
*       GO TO ERRRET;               /* TAKE ERROR EXIT               */
         B     ERRRET                                              0125
*     END;                                                         0126
*   RFY                                                            0127
*     REG1 UNRSTD;                                                 0127
@RF00121 DS    0H                                                  0128
*   LOOPCT=0;                       /* COUNT OF MESSAGES CHAINED,  0128
*                                      MAX=20 TO PREVENT INFINITE  0128
*                                      LOOPS                         */
         SLR   @08,@08                                             0128
         ST    @08,LOOPCT                                          0128
*   OUTADDR='FF000000'X;            /* INIT POINTER TO 2ND LEVEL MSG
*                                      (PUTLINE USED THIS VALUE)     */
         MVC   OUTADDR(4),@CF00519                                 0129
*   PRETXTP=PRETXTP&'FF000000'X;    /* INITIALIZE THE POINTER TO THE
*                                      RETURNED MESSAGE TO ZERO, BUT
*                                      PRESERVE THE HIGH ORDER BYTE
*                                      CONTAINING THE SWITCHES       */
         NC    PRETXTP(4,PARMPTR1),@CB00519                        0130
*   VARLISTP=ADDR(PINSRTS);         /* VARIABLE LIST POINTER TO POINT
*                                      TO FIRST VARIABLE      @Y02668*/
         LA    VARLISTP,PINSRTS(,PARMPTR1)                         0131
*   TMSGID=PMSGID;                  /* SET SEARCH ARGUMENT FOR     0132
*                                      MESSAGE SEARCH ROUTINE FROM 0132
*                                      PARAMETER LIST                */
         MVC   TMSGID(4),PMSGID(PARMPTR1)                          0132
*   PPARMP=ADDR(SAVEPAR);           /* FOR LIST FORM OF MACRO      0133
*                                                            @Z40NQKJ*/
         LA    @08,SAVEPAR                                         0133
         ST    @08,PPARMP                                          0133
*   IF PEXTRLEN^=0 THEN             /* SEE IF EXTRACT WANTED @Z40NQKJ*/
         CLI   PEXTRLEN(PARMPTR1),0                                0134
         BE    @RF00134                                            0134
*     DO;                                                          0135
*       SWEXTRCT='1'B;              /* IF EXTRACT BUFFER LENGTH GIVEN
*                                      THEN TURN EXTRACT SW ON     0136
*                                                            @Z40NQKJ*/
         OI    SWEXTRCT,B'00001000'                                0136
*       IF PEXTRBUF=0 THEN                                         0137
*                                                                  0137
         L     @08,PEXTRBUF-1(,PARMPTR1)                           0137
         LA    @08,0(,@08)                                         0137
         LTR   @08,@08                                             0137
         BNZ   @RF00137                                            0137
*         /***********************************************************/
*         /*                                                         */
*         /* LENGTH GIVEN BUT NO BUFFER CONSTITUTES A FATAL FLAW     */
*         /*                                                 @Z40NQKJ*/
*         /*                                                         */
*         /***********************************************************/
*                                                                  0138
*         DO;                                                      0138
*           EXTRCTER=ON;            /* SET FIRST BUFFER      @Z40GQKU
*                                      MISSING ERROR CODE    @Z40GQKU*/
         OI    EXTRCTER,B'10000000'                                0139
*           GO TO RETLABEL;                                        0140
         B     RETLABEL                                            0140
*         END;                                                     0141
*       IF PEXTRLN2^=0 THEN         /* SEE IF SECOND LEVEL   @Z40GQKU*/
@RF00137 CLI   PEXTRLN2(PARMPTR1),0                                0142
         BE    @RF00142                                            0142
*         DO;                       /* MSG EXTRACT WANTED.   @Z40GQKU*/
*           SWEXTRC2='1'B;          /* IF SO SET SWITCH TO   @Z40GQKU*/
         OI    SWEXTRC2,B'00000100'                                0144
*           IF PEXTRBF2=0 THEN      /* YES. CHECK FOR BFR    @Z40GQKU*/
         L     @08,PEXTRBF2-1(,PARMPTR1)                           0145
         LA    @08,0(,@08)                                         0145
         LTR   @08,@08                                             0145
         BNZ   @RF00145                                            0145
*             DO;                   /* ADDRESS. IF NO BUFFER @Z40GQKU*/
*               EXTRCTR2=ON;        /* SET SECOND BUFFER     @Z40GQKU
*                                      MISSING ERROR CODE,   @Z40GQKU*/
         OI    EXTRCTR2,B'01000000'                                0147
*               GO TO RETLABEL;     /* SAY ERROR AND GO GET  @Z40GQKU*/
         B     RETLABEL                                            0148
*             END;                  /* READY TO PUT OUT ERROR@Z40GQKU*/
*         END;                      /* MSG, CLEANUP AND EXIT.@Z40GQKU*/
*     END;                          /*                       @Z40GQKU*/
*   ELSE                            /* CHECK IF ONLY SECOND  @Z40GQKU
*                                      EXTRACT REQUESTED     @Z40GQKU*/
*     IF PEXTRLN2^=0 THEN           /* IF SECOND LEVEL       @Z40GQKU
*                                      ONLY REQUESTED, ERROR @Z40GQKU*/
         B     @RC00134                                            0152
@RF00134 CLI   PEXTRLN2(PARMPTR1),0                                0152
         BE    @RF00152                                            0152
*       DO;                         /*                       @Z40GQKU*/
*         EXTRCTR3=ON;              /* SET REQUESTED ONLY    @Z40GQKU
*                                      SECOND LEVEL EXTRACT, @Z40GQKU*/
         OI    EXTRCTR3,B'00100000'                                0154
*         GO TO RETLABEL;           /* THEN GO TO EXIT       @Z40GQKU*/
         B     RETLABEL                                            0155
*       END;                        /*                       @Z40GQKU*/
*   IF PWTPSW=OFF&PWTOSW=OFF THEN   /* SPECIAL INITIALIZATION FOR TSO
*                                      PUTGET, PUTLINE MESSAGES      */
@RF00152 DS    0H                                                  0157
@RC00134 TM    PWTPSW(PARMPTR1),B'00100010'                        0157
         BNZ   @RF00157                                            0157
*     DO;                                                          0158
*       IF ADDR(COMECB)=0 THEN      /* SUPPLY ECB IF CALLER NEEDS ONE*/
         SLR   @08,@08                                             0159
         L     @06,@PC00001+8                                      0159
         CR    @06,@08                                             0159
         BNE   @RF00159                                            0159
*         DO;                                                      0160
*           LOCALECB=0;                                            0161
         ST    @08,LOCALECB                                        0161
*           PECBP=ADDR(LOCALECB);                                  0162
         LA    @08,LOCALECB                                        0162
         ST    @08,PECBP                                           0162
*         END;                                                     0163
*       ELSE                        /* ELSE USE CALLER'S ECB         */
*         PECBP=ADDR(COMECB);                                      0164
         B     @RC00159                                            0164
@RF00159 L     @08,@PC00001+8                                      0164
         ST    @08,PECBP                                           0164
*       CPPLPTR=ADDR(TMCT);         /* CPPL ADDRESS IS AN INPUT    0165
*                                      PARAMETER                     */
@RC00159 L     CPPLPTR,@PC00001+4                                  0165
*       IF CPPLPTR=0 THEN           /* WILL ISSUE ERROR MESSAGE IF 0166
*                                      HAVE ZERO CPPL POINTER        */
         LTR   CPPLPTR,CPPLPTR                                     0166
         BNZ   @RF00166                                            0166
*         IF^(SWEXTRCT='1'B&PEXTRCON='0'B) THEN/* UNLESS DOING     0167
*                                      EXTRACT WITH NO CONTINUE    0167
*                                                            @Z40NQKJ*/
         TM    SWEXTRCT,B'00001000'                                0167
         BNO   @RT00167                                            0167
         TM    PEXTRCON(PARMPTR1),B'00000100'                      0167
         BZ    @RF00167                                            0167
@RT00167 DS    0H                                                  0168
*           DO;                                                    0168
*             PCPPLER=ON;           /* REMEMBER TO ISSUE ERROR     0169
*                                      MESSAGE BEFORE RETURN TO    0169
*                                      CALLER                        */
*             WTPOVERR=ON;          /* ISSUE MESSAGES AS WTP - CAN'T
*                                      ISSUE AS PUTGET OR PUTLINE    */
         OI    PCPPLER,B'00100001'                                 0170
*           END;                                                   0171
*         ELSE                                                     0172
*           ;                                                      0172
@RF00167 DS    0H                                                  0173
*       ELSE                        /* IF NO ERROR                   */
*         DO;                                                      0173
         B     @RC00166                                            0173
@RF00166 DS    0H                                                  0174
*           PUPTP=CPPLUPT;          /* POINT TO TSO CONTROL BLOCKS   */
         L     @08,CPPLUPT(,CPPLPTR)                               0174
         ST    @08,PUPTP                                           0174
*           PECTP=CPPLECT;                                         0175
         L     @08,CPPLECT(,CPPLPTR)                               0175
         ST    @08,PECTP                                           0175
*         END;                                                     0176
*     END;                          /* END OF PUTGET/PUTLINE SET UP  */
@RC00166 DS    0H                                                  0178
*   IF PCSECTP=0 THEN               /* ISSUE ERROR MESSAGE IF HAVE 0178
*                                      ZERO POINTER TO CALLER'S    0178
*                                      MESSAGE CSECT                 */
@RF00157 L     @08,PCSECTP(,PARMPTR1)                              0178
         LTR   @08,@08                                             0178
         BNZ   @RF00178                                            0178
*     DO;                                                          0179
*       MCPLER=ON;                                                 0180
         OI    MCPLER,B'01000000'                                  0180
*       CALL EMSGPROC;              /* GO ISSUE ERROR MESSAGE        */
         BAL   @14,EMSGPROC                                        0181
*       GO TO ERRRET;               /* TERMINATE BECAUSE OF ERROR    */
         B     ERRRET                                              0182
*     END;                                                         0183
*                                                                  0184
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD A MESSAGE IN BUFFER (NOTE--PUTLINE SECOND LEVEL MESSAGE */
*   /* AND STACKED PUTGET LEVEL MESSAGES ARE ALSO BUILT BY MSGSRCH)  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0184
*MSGSRCH:                                                          0184
*   MSGAD=PCSECTP;                  /* 'MSGID' AND 'PCSECTP' ARE USED
*                                      AS INPUT PARAMETERS POINT TO
*                                      FIRST MESSAGE IN THE MESSAGE
*                                      CSECT                         */
@RF00178 DS    0H                                                  0184
MSGSRCH  L     MSGAD,PCSECTP(,PARMPTR1)                            0184
*   BLDLEN=LENGTH(BLDHDR);          /* INITIALIZE LENGTH OF BUILD  0185
*                                      BUFFER                        */
         LA    @08,4                                               0185
         STH   @08,BLDLEN                                          0185
*   LSTLEN=BLDLEN;                  /* INITIALIZE LENGTH OF BUILD  0186
*                                      BUFFER FOR COMPUTATIONS       */
         LR    LSTLEN,@08                                          0186
*   BLDOFF=0;                       /* SET OFFSET FIELD OF BUILD   0187
*                                      BUFFER                        */
         SLR   @08,@08                                             0187
         STH   @08,BLDOFF                                          0187
*   NBPART=0;                       /* SET NUMBER OF PARTS TO ZERO 0188
*                                      FOR STARTERS                  */
*                                                                  0188
         SLR   @08,@08                                             0188
         ST    @08,@TF00001                                        0188
         MVC   NBPART(4),@TF00001                                  0188
*   /*****************************************************************/
*   /*                                                               */
*   /* LOOP THRU MESSAGE CSECT, SEARCHING FOR MATCH WITH MESSAGE ID  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0189
*IDSEARCH:                                                         0189
*   IF CMSGID='    ' THEN           /* IF AT END OF CSECT FOR      0189
*                                      MESSAGES WITHOUT FINDING ID 0189
*                                      WANTED                        */
IDSEARCH CLC   CMSGID(4,MSGAD),@CC00525                            0189
         BNE   @RF00189                                            0189
*     DO;                                                          0190
*       MIDPLER=ON;                                                0191
         OI    MIDPLER,B'00010000'                                 0191
*       CALL EMSGPROC;              /* GO ISSUE ERROR MESSAGE        */
         BAL   @14,EMSGPROC                                        0192
*       GO TO ERRRET;               /* AND TAKE ERROR EXIT           */
         B     ERRRET                                              0193
*     END;                                                         0194
*   IF CMSGID^=TMSGID THEN          /* IF MESSAGE IDS NOT THE SAME   */
@RF00189 CLC   CMSGID(4,MSGAD),TMSGID                              0195
         BE    @RF00195                                            0195
*     DO;                                                          0196
*       MSGAD=MSGAD+CMSGLEN;        /* INCREMENT TO NEXT MESSAGE     */
         MVC   @ZT00002+2(2),CMSGLEN(MSGAD)                        0197
         AL    MSGAD,@ZT00002                                      0197
*       GOTO IDSEARCH;              /* CONTINUE SEARCH               */
         B     IDSEARCH                                            0198
*     END;                                                         0199
*                                                                  0199
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR PUTGET MESSAGE LEVEL LIMIT                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0200
*   LOOPCT=LOOPCT+1;                /* INCREASE COUNT OF NUMBER OF 0200
*                                      MESSAGES                      */
@RF00195 LA    @08,1                                               0200
         AL    @08,LOOPCT                                          0200
         ST    @08,LOOPCT                                          0200
*   IF LOOPCT>20 THEN                                              0201
         C     @08,@CF00527                                        0201
         BNH   @RF00201                                            0201
*     DO;                           /* IF THE COUNT OF MESSAGES IS 0202
*                                      NOW GREATER THAN 20, THEN PUT
*                                      OUT WHAT WE HAVE AND QUIT     */
*       IF PREVERSW='1'B THEN                                      0203
         TM    PREVERSW(PARMPTR1),B'01000000'                      0203
         BO    @RT00203                                            0203
*         GO TO PUT2LINE;           /* GO TO PUTLINE IF REVERSE IS 0204
*                                      ON, OTHERWISE GO TO PUTGET    */
*       GO TO PTGTMSG;                                             0205
         B     PTGTMSG                                             0205
*     END;                                                         0206
*   CSECTP=MSGAD+11;                /* INITIALIZE POINTER USED TO  0207
*                                      SCAN MESSAG MACRO EXPANSIONS.
*                                      NOTE: ADDING 11 MAKES THIS  0207
*                                      POINTER POINT TO THE FIRST  0207
*                                      PART LENGTH FIELD -- IT WILL
*                                      BE ZERO IF A VARIABLE GOES IN
*                                      THIS POSITION                 */
@RF00201 LA    CSECTP,11                                           0207
         ALR   CSECTP,MSGAD                                        0207
*                                                                  0208
*   /*****************************************************************/
*   /*                                                               */
*   /* LOOP TO MOVE FIXED AND VARIABLE (INSERTED) PARTS OF THIS      */
*   /* MESSAGE INTO MESSAGE BUILD AREA                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0208
*BLDLOOP:                                                          0208
*   IF CPARTLEN^='00'X THEN         /* IF THE PART LENGTH FIELD IS 0208
*                                      NON-ZERO IT INDICATES A     0208
*                                      MESSAGE SEGMENT FOLLOWS       */
BLDLOOP  CLI   CPARTLEN(CSECTP),X'00'                              0208
         BNE   @RT00208                                            0208
*     GOTO SEGMOVE;                 /* GO TO MOVE THE SEGMENT INTO 0209
*                                      THE BUILD BUFFER OTHERWISE A
*                                      VARIABLE IS TO BE INSERTED    */
*VARLOOP:                                                          0210
*   LLENGTH=PLENGTH;                /* LOCAL COPY OF INSERT LENGTH 0210
*                                                             @Y02668*/
VARLOOP  IC    @08,PLENGTH(,VARLISTP)                              0210
         STC   @08,LLENGTH                                         0210
*   LVARPTR=PVARPTR;                /* USE LOCAL COPY OF PTR TO THE
*                                      INSERT VARIABLE        @Y02668*/
         L     LVARPTR,PVARPTR-1(,VARLISTP)                        0211
         LA    LVARPTR,0(,LVARPTR)                                 0211
*   IF LLENGTH=0×LVARPTR=0×LLENGTH='80'X THEN/* IF HAVE NO INSERT    */
         CLI   LLENGTH,0                                           0212
         BE    @RT00212                                            0212
         SLR   @08,@08                                             0212
         CR    LVARPTR,@08                                         0212
         BE    @RT00212                                            0212
         CLI   LLENGTH,128                                         0212
         BE    @RT00212                                            0212
*     GO TO SKIPUP;                 /* GO BUILD NEXT PART OF MESSAGE */
*                                                                  0213
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK WHETHER CONVERT HEX INSERT TO PRINTABLE                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0214
*   IF PCONVRT='1'B THEN            /* HEX CONVERSION INDICATED      */
         TM    PCONVRT(VARLISTP),B'10000000'                       0214
         BNO   @RF00214                                            0214
*     DO;                                                          0215
*       LCONVRT='0'B;               /* TURN OFF THIS BIT BEFORE USE
*                                      LLENGTH                       */
*                                                                  0216
         NI    LCONVRT,B'01111111'                                 0216
*       /*************************************************************/
*       /*                                                           */
*       /* COPY THE ONE-TO-FOUR BYTE CODE INTO A WORK AREA           */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0217
*       SAVCODE=0;                  /* ZERO ENTIRE AREA              */
         ST    @08,SAVCODE                                         0217
*       IF LLENGTH=1 THEN           /* COPY ONE-BYTE CODE            */
         CLI   LLENGTH,1                                           0218
         BNE   @RF00218                                            0218
*         SAVCODE1=VARIABLE(1:1);                                  0219
         MVC   SAVCODE1(1),VARIABLE(LVARPTR)                       0219
*       ELSE                        /* NOT ONE-BYTE                  */
*         IF LLENGTH=2 THEN         /* COPY TWO-BYTE CODE            */
         B     @RC00218                                            0220
@RF00218 CLI   LLENGTH,2                                           0220
         BNE   @RF00220                                            0220
*           SAVCODE2=VARIABLE(1:2);                                0221
         MVC   SAVCODE2(2),VARIABLE(LVARPTR)                       0221
*         ELSE                      /* NOT ONE OR TWO BYTE           */
*           IF LLENGTH=3 THEN       /* COPY THREE-BYTE CODE          */
         B     @RC00220                                            0222
@RF00220 CLI   LLENGTH,3                                           0222
         BNE   @RF00222                                            0222
*             SAVCODE3=VARIABLE(1:3);                              0223
         MVC   SAVCODE3(3),VARIABLE(LVARPTR)                       0223
*           ELSE                    /* DEFAULT IS FOUR-BYTE          */
*             SAVCODE=VARIABLE(1:4);                               0224
         B     @RC00222                                            0224
@RF00222 MVC   SAVCODE(4),VARIABLE(LVARPTR)                        0224
*       UNPK=UNPK&&UNPK;            /* ZERO THE WORK AREA            */
@RC00222 DS    0H                                                  0225
@RC00220 DS    0H                                                  0225
@RC00218 XC    UNPK(16),UNPK                                       0225
*                                                                  0226
*       /*************************************************************/
*       /*                                                           */
*       /* CONVERT TO PRINTABLE HEX, IF NEEDED                       */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0226
*       IF PHEXSW=ON×(PNHEXSW=OFF&HEXCODE>'FFFF'X) THEN/* HEXCODE IS
*                                      SAME AS SAVCODE               */
         TM    PHEXSW(PARMPTR1),B'00010000'                        0226
         BO    @RT00226                                            0226
         TM    PNHEXSW(PARMPTR1),B'00000001'                       0226
         BNZ   @RF00226                                            0226
         CLC   HEXCODE(4),@CF00538                                 0226
         BNH   @RF00226                                            0226
@RT00226 DS    0H                                                  0227
*         DO;                                                      0227
*           SWHAVHEX=ON;            /* REMEMBER HEX CONVERSION, FOR
*                                      LATER USE                     */
         OI    SWHAVHEX,B'00010000'                                0228
*           RESPECIFY                                              0229
*            (REG8) RESTRICTED;     /* FOR CONVERSIONS ONLY          */
*           GENERATE;                                              0230
         UNPK  UNPK(9),SAVCODE(5)     UNPACK THE INSERT CODE
         TR    UNPK(8),ALPHA-240
*           LVARPTR=ADDR(UNPK)+4;   /* RESET THE VARIABLE POINTER  0231
*                                      (USE LOCAL POINTER)    @Y02668*/
         LA    LVARPTR,UNPK                                        0231
         AL    LVARPTR,@CF00225                                    0231
*         END;                                                     0232
*                                                                  0232
*       /*************************************************************/
*       /*                                                           */
*       /* OTHERWISE CONVERT TO PRINTABLE DECIMAL                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0233
*       ELSE                        /* CONVERSION TO DECIMAL         */
*         DO;                                                      0233
         B     @RC00226                                            0233
@RF00226 DS    0H                                                  0234
*           REG8=SAVCODE;           /* PUT RETURN CODE IN REGISTER   */
         L     REG8,SAVCODE                                        0234
*           GENERATE;                                              0235
         CVD   REG8,UNPK
         UNPK  UNPK(15),UNPK(8)
         OI    UNPK+14,C'0'
*           LVARPTR=ADDR(UNPK)+11;  /* RESET THE VARIABLE POINTER  0236
*                                      (USE LOCAL POINTER)    @Y02668*/
         LA    LVARPTR,UNPK                                        0236
         AL    LVARPTR,@CF00036                                    0236
*         END;                                                     0237
*                                                                  0237
*       /*************************************************************/
*       /*                                                           */
*       /* COMMON CONVERSION CODE                                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0238
*       TEMP=2*LLENGTH;             /* SAVE HEX EXPECTED LENGTH, FOR
*                                      USE IN LOOP TO TRUNCATE     0238
*                                      LEADING ZEROS                 */
@RC00226 SLR   @03,@03                                             0238
         IC    @03,LLENGTH                                         0238
         ALR   @03,@03                                             0238
         ST    @03,TEMP                                            0238
*       IF SWHAVHEX=ON THEN         /* IF CONVERTING TO PRINTABLE HEX*/
         TM    SWHAVHEX,B'00010000'                                0239
         BNO   @RF00239                                            0239
*         DO;                                                      0240
*           LVARPTR=ADDR(UNPK);     /* BACK UP POINTER               */
         LA    LVARPTR,UNPK                                        0241
*           LLENGTH='08'X;          /* SET MAXIMUM LENGTH OF VARIABLE*/
         MVI   LLENGTH,X'08'                                       0242
*         END;                                                     0243
*       ELSE                        /* FOR PRINTABLE DECIMAL         */
*         LLENGTH='04'X;            /* RESET LENGTH OF VARIABLE    0244
*                                                             @Y02668*/
         B     @RC00239                                            0244
@RF00239 MVI   LLENGTH,X'04'                                       0244
*       DO REG8=1 TO 11;            /* IF PUTTING OUT ONLY 4       0245
*                                      CHARACTERS WOULD CUT OFF NON
*                                      ZERO DIGITS THEN PUT THE    0245
*                                      DIGITS                        */
@RC00239 LA    REG8,1                                              0245
@DL00245 DS    0H                                                  0246
*         IF UNPK(REG8)^='F0'X THEN /* NON ZERO DIGIT                */
         LA    @03,UNPK-1(REG8)                                    0246
         CLI   0(@03),X'F0'                                        0246
         BE    @RF00246                                            0246
*           DO;                                                    0247
*             IF SWHAVHEX='0'B THEN /* DECIMAL NUMBER                */
         TM    SWHAVHEX,B'00010000'                                0248
         BNZ   @RF00248                                            0248
*               DO;                                                0249
*                 LVARPTR=ADDR(UNPK);/* PUT OUT WHOLE NUMBER (USE  0250
*                                      LOCAL POINTER)         @Y02668*/
         LA    LVARPTR,UNPK                                        0250
*                 LLENGTH='0F'X;    /* MAXIMUM LENGTH         @Y02668*/
         MVI   LLENGTH,X'0F'                                       0251
*               END;                                               0252
*             ELSE                  /* HEX NUMBER                    */
*               DO;                                                0253
         B     @RC00248                                            0253
@RF00248 DS    0H                                                  0254
*                 IF REG8<5 THEN                                   0254
         C     REG8,@CF00210                                       0254
         BNL   @RF00254                                            0254
*                   DO;                                            0255
*                     LVARPTR=ADDR(UNPK);/* PUT OUT WHOLE NUMBER (USE
*                                      LOCAL POINTER)         @Y02668*/
         LA    LVARPTR,UNPK                                        0256
*                     LLENGTH='08'X;/* MAXIMUM LENGTH         @Y02668*/
         MVI   LLENGTH,X'08'                                       0257
*                   END;                                           0258
*               END;                                               0259
@RF00254 DS    0H                                                  0260
*           END;                                                   0260
@RC00248 DS    0H                                                  0261
*       END;                                                       0261
*                                                                  0261
@RF00246 AL    REG8,@CF00035                                       0261
         C     REG8,@CF00036                                       0261
         BNH   @DL00245                                            0261
*       /*************************************************************/
*       /*                                                           */
*       /* LOOP TO DROP ALL LEADING ZEROS, IF DECIMAL, AND ALL ZEROS */
*       /* LEFT OF 2*PLENGTH, IF HEX                                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0262
*       DO WHILE(TEMP>0&LLENGTH>1);                                0262
         B     @DE00262                                            0262
@DL00262 DS    0H                                                  0263
*         IF^(SWHAVHEX=ON&LLENGTH<=TEMP) THEN/* IF DECIMAL OR HAVEN'T
*                                      REACHED END OF HEX            */
         TM    SWHAVHEX,B'00010000'                                0263
         BNO   @RT00263                                            0263
         SLR   @03,@03                                             0263
         IC    @03,LLENGTH                                         0263
         C     @03,TEMP                                            0263
         BNH   @RF00263                                            0263
@RT00263 DS    0H                                                  0264
*           DO;                                                    0264
*             IF VARIABLE(1)='0' THEN/* IF FIRST CHARACTER OF INSERT
*                                      IS X'F0', I.E., CHARACTER ZERO*/
         CLI   VARIABLE(LVARPTR),C'0'                              0265
         BNE   @RF00265                                            0265
*               DO;                                                0266
*                 LVARPTR=LVARPTR+1;/* DROP THE ZERO CHARACTER       */
         AL    LVARPTR,@CF00035                                    0267
*                 LLENGTH=LLENGTH-1;                               0268
         SLR   @03,@03                                             0268
         IC    @03,LLENGTH                                         0268
         BCTR  @03,0                                               0268
         STC   @03,LLENGTH                                         0268
*               END;                                               0269
*             ELSE                  /* STOP LOOP IF FIND NON-ZERO  0270
*                                      LEADING CHARACTER             */
*               TEMP=0;                                            0270
         B     @RC00265                                            0270
@RF00265 SLR   @03,@03                                             0270
         ST    @03,TEMP                                            0270
*           END;                                                   0271
*         ELSE                      /* STOP LOOP IF HAVE PRINTABLE 0272
*                                      HEX WITH LLENGTH = 2*PLENGTH  */
*           TEMP=0;                 /* COULD HAVE X'04' NOW X'F0F4'  */
         B     @RC00263                                            0272
@RF00263 SLR   @03,@03                                             0272
         ST    @03,TEMP                                            0272
*       END;                        /* ALSO STOP LOOP IF REACH LAST
*                                      CHARACTER OF INSERT (LAST   0273
*                                      CHARACTER IS ALLOWED TO BE  0273
*                                      ZERO)                         */
*                                                                  0273
@RC00263 DS    0H                                                  0273
@DE00262 L     @03,TEMP                                            0273
         LTR   @03,@03                                             0273
         BNP   @DC00262                                            0273
         CLI   LLENGTH,1                                           0273
         BH    @DL00262                                            0273
@DC00262 DS    0H                                                  0274
*       /*************************************************************/
*       /*                                                           */
*       /* PLACE PRINTABLE HEX VALUE IN FORMAT X'HEXVALUE', AS       */
*       /* DEFAULT                                                   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0274
*       IF SWHAVHEX=ON&PNOXQSW=OFF THEN                            0274
         TM    SWHAVHEX,B'00010000'                                0274
         BNO   @RF00274                                            0274
         TM    PNOXQSW(PARMPTR1),B'00100000'                       0274
         BNZ   @RF00274                                            0274
*         DO;                                                      0275
*           LLENGTH=LLENGTH+1;      /* USE IN NEXT STATEMENT         */
         SLR   @03,@03                                             0276
         IC    @03,LLENGTH                                         0276
         LA    @03,1(,@03)                                         0276
         STC   @03,LLENGTH                                         0276
*           VARIABLE(LLENGTH)=QUOTE;/* INSERT TRAILING QUOTE         */
         ALR   @03,LVARPTR                                         0277
         BCTR  @03,0                                               0277
         MVI   VARIABLE(@03),C''''                                 0277
*           LVARPTR=LVARPTR-2;      /* BACK UP POINTER TO VARIABLE 0278
*                                      (HAVE TWO EXTRA BYTES DECLARED
*                                      IN FRONT OF UNPK AREA)        */
         LA    @03,2                                               0278
         SLR   LVARPTR,@03                                         0278
*           LLENGTH=LLENGTH+2;      /* LENGTH OF INSERT              */
         SLR   @15,@15                                             0279
         IC    @15,LLENGTH                                         0279
         ALR   @15,@03                                             0279
         STC   @15,LLENGTH                                         0279
*           VARIABLE(1:2)=XQUOTE;   /* INSERT LEADING X'             */
         MVC   VARIABLE(2,LVARPTR),@CC00051                        0280
*         END;                                                     0281
*     END;                                                         0282
@RF00274 DS    0H                                                  0283
*                                                                  0283
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS ALL INSERTS HERE                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0283
*   BYTELEN=LLENGTH;                /* SAVE INSERT LENGTH     @Y02668*/
*                                                                  0283
@RF00214 SLR   BYTELEN,BYTELEN                                     0283
         IC    BYTELEN,LLENGTH                                     0283
*   /*****************************************************************/
*   /*                                                               */
*   /* COMPRESS BLANKS OUT OF JOBNAME,JOBID FIELDS WHEN VARIABLE IS  */
*   /* JOBNAME(JOBID)                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0284
*   IF PJOBISW='1'B&VARIABLE(BYTELEN)=')' THEN/* SPECIAL CODE FOR  0284
*                                      JOBNAME(JOBID)         @Y02668*/
         TM    PJOBISW(PARMPTR1),B'00000100'                       0284
         BNO   @RF00284                                            0284
         LR    @01,LVARPTR                                         0284
         ALR   @01,BYTELEN                                         0284
         BCTR  @01,0                                               0284
         CLI   VARIABLE(@01),C')'                                  0284
         BNE   @RF00284                                            0284
*     DO;                           /*                        @Y02668*/
*       PARENSW='1'B;               /* BIT FOR (JOBID) CASE   @Y02668*/
         OI    PARENSW,B'10000000'                                 0286
*       BYTELEN=BYTELEN-1;          /* POINT TO END CHAR. OF  @Y02668
*                                      JOBID - WILL COMPRESS  @Y02668
*                                      IT NOW                 @Y02668*/
         BCTR  BYTELEN,0                                           0287
*     END;                          /* END OF (JOBID) CODE    @Y02668*/
*   ELSE                            /*                        @Y02668*/
*     PARENSW='0'B;                 /* ENSURE SWITCH OFF      @Y02668*/
*                                                                  0289
         B     @RC00284                                            0289
@RF00284 NI    PARENSW,B'01111111'                                 0289
*   /*****************************************************************/
*   /*                                                               */
*   /* COMPRESS INSERT (REMOVE ANY BLANKS FROM END)                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0290
*   RFY                                                            0290
*     CMPRSCTR RSTD;                                               0290
@RC00284 DS    0H                                                  0291
*   DO CMPRSCTR=BYTELEN TO 1 BY-1;  /* DO WHILE BLANKS LEFT          */
         LR    CMPRSCTR,BYTELEN                                    0291
         B     @DE00291                                            0291
@DL00291 DS    0H                                                  0292
*     IF VARIABLE(CMPRSCTR)^=' ' THEN                              0292
         LR    @01,LVARPTR                                         0292
         ALR   @01,CMPRSCTR                                        0292
         BCTR  @01,0                                               0292
         CLI   VARIABLE(@01),C' '                                  0292
         BNE   @RT00292                                            0292
*       GOTO NOBLANKS;              /* EXIT FROM SCAN OF INSERT HERE */
*   END;                                                           0294
         BCTR  CMPRSCTR,0                                          0294
@DE00291 LTR   CMPRSCTR,CMPRSCTR                                   0294
         BP    @DL00291                                            0294
*   GO TO SKIPUP;                   /* IF REACH HERE INSERT IS ALL 0295
*                                      BLANKS - DON'T PUT INTO THE 0295
*                                      MESSAGE                       */
*                                                                  0295
         B     SKIPUP                                              0295
*   /*****************************************************************/
*   /*                                                               */
*   /* SPECIAL LOGIC TO COMPRESS BLANKS OUT OF JOBNAME(JOBID)        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0296
*NOBLANKS:                                                         0296
*   IF PARENSW='1'B THEN            /* BIT FOR (JOBID) CASE   @Y02668*/
NOBLANKS TM    PARENSW,B'10000000'                                 0296
         BNO   @RF00296                                            0296
*     DO;                           /*                        @Y02668*/
*       JOBIDEND=CMPRSCTR;          /* SAVE OFFSET TO RIGHT-  @Y02668
*                                      MOST CHARACTER OF      @Y02668
*                                      COMPRESSED JOBID       @Y02668*/
         ST    CMPRSCTR,JOBIDEND                                   0298
*       DO CMPRSCTR=CMPRSCTR TO 2 BY-1;/* NOW SCAN            @Y02668
*                                      FOR LEFT PAREN         @Y02668*/
         B     @DE00299                                            0299
@DL00299 DS    0H                                                  0300
*         IF VARIABLE(CMPRSCTR)='(' THEN/*                    @Y02668*/
         LR    @01,LVARPTR                                         0300
         ALR   @01,CMPRSCTR                                        0300
         BCTR  @01,0                                               0300
         CLI   VARIABLE(@01),C'('                                  0300
         BE    @RT00300                                            0300
*           GO TO HAVELPRN;         /* EXIT FROM SCAN HERE    @Y02668*/
*       END;                        /* END OF SCAN FOR (      @Y02668*/
         BCTR  CMPRSCTR,0                                          0302
@DE00299 C     CMPRSCTR,@CF00050                                   0302
         BNL   @DL00299                                            0302
*       GO TO BADPRN;               /* SPECIAL ERROR CASE     @Y02668
*                                      - NO JOBNAME OR NO     @Y02668
*                                      LEFT PARENTHESIS       @Y02668*/
         B     BADPRN                                              0303
*HAVELPRN:                          /*                        @Y02668*/
*       LFTPAREN=CMPRSCTR;          /* SAVE LEFT PAREN OFFSET @Y02668*/
HAVELPRN ST    CMPRSCTR,LFTPAREN                                   0304
*       CMPRSCTR=CMPRSCTR-1;        /* WILL COMPRESS JOBNAME  @Y02668*/
         BCTR  CMPRSCTR,0                                          0305
*       DO CMPRSCTR=CMPRSCTR TO 1 BY-1;/*                     @Y02668*/
         B     @DE00306                                            0306
@DL00306 DS    0H                                                  0307
*         IF VARIABLE(CMPRSCTR)^=' ' THEN/* EXIT IF           @Y02668*/
         LR    @01,LVARPTR                                         0307
         ALR   @01,CMPRSCTR                                        0307
         BCTR  @01,0                                               0307
         CLI   VARIABLE(@01),C' '                                  0307
         BNE   @RT00307                                            0307
*           GO TO ENDCMPRS;         /* FOUND NON-BLANK CHAR.  @Y02668*/
*       END;                        /* END OF COMPRESS LOOP   @Y02668*/
         BCTR  CMPRSCTR,0                                          0309
@DE00306 LTR   CMPRSCTR,CMPRSCTR                                   0309
         BP    @DL00306                                            0309
*       GO TO BADPRN;               /* SPECIAL ERROR CASE     @Y02668
*                                      - NO JOBNAME           @Y02668*/
         B     BADPRN                                              0310
*ENDCMPRS:                          /*                        @Y02668*/
*       JOBINSRT(1:CMPRSCTR)=VARIABLE(1:CMPRSCTR);/*          @Y02668
*                                      SAVE THE COMPRESSED    @Y02668
*                                      JOBNAME                @Y02668*/
ENDCMPRS LR    @15,CMPRSCTR                                        0311
         BCTR  @15,0                                               0311
         EX    @15,@SM00632                                        0311
*       CMPRSCTR=CMPRSCTR+1;        /* POINT TO NEXT SPACE    @Y02668
*                                      IN COMPRESS AREA       @Y02668*/
         LA    @15,1                                               0312
         ALR   CMPRSCTR,@15                                        0312
*       JOBIDIN=CMPRSCTR+           /* NEXT SPACE PLUS        @Y02668*/
*           (JOBIDEND-LFTPAREN);    /* (JOBID LENGTH           Y02668*/
         L     @14,LFTPAREN                                        0313
         L     JOBIDIN,JOBIDEND                                    0313
         SLR   JOBIDIN,@14                                         0313
         ALR   JOBIDIN,CMPRSCTR                                    0313
*       JOBINSRT(CMPRSCTR:JOBIDIN)= /* MOVE (JOBID            @Y02668*/
*           VARIABLE(LFTPAREN:JOBIDEND);/*                    @Y02668*/
         LA    @01,JOBINSRT-1(CMPRSCTR)                            0314
         LR    @00,JOBIDIN                                         0314
         SLR   @00,CMPRSCTR                                        0314
         ALR   @14,LVARPTR                                         0314
         BCTR  @14,0                                               0314
         LR    @15,@00                                             0314
         EX    @15,@SM00634                                        0314
*       CMPRSCTR=JOBIDIN+1;         /* GET OFFSET TO END )    @Y02668*/
         LA    @15,1                                               0315
         ALR   @15,JOBIDIN                                         0315
         LR    CMPRSCTR,@15                                        0315
*       JOBINSRT(CMPRSCTR)=')';     /* NOW HAVE COMPRESSED    @Y02668
*                                      JOBNAME(JOBID)         @Y02668*/
         LA    @03,JOBINSRT-1(CMPRSCTR)                            0316
         MVI   0(@03),C')'                                         0316
*       LVARPTR=ADDR(JOBINSRT);     /* NEW INSERT FOR MSG     @Y02668*/
         LA    LVARPTR,JOBINSRT                                    0317
*     END;                          /* END JOBNM(JOBID) CODE  @Y02668*/
*   BYTELEN=CMPRSCTR;               /* GET NUMBER OF CHARACTERS LEFT
*                                      IN THE INSERT                 */
@RF00296 LR    BYTELEN,CMPRSCTR                                    0319
*   RFY                                                            0320
*    (REG8,                                                        0320
*     CMPRSCTR) UNRSTD;                                            0320
*BADPRN:                            /* JOBNAME(JOBID) ERROR   @Y02668*/
*                                                                  0321
*   /*****************************************************************/
*   /*                                                               */
*   /* MOVE THE INSERT INTO THE MESSAGE BUILD AREA                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0321
*   BLDLEN=BLDLEN+BYTELEN;          /* LENGTH OF BUILD AREA INCLUDING
*                                      THE VARIABLE                  */
BADPRN   LR    @08,BYTELEN                                         0321
         AH    @08,BLDLEN                                          0321
         STH   @08,BLDLEN                                          0321
*   IF BLDLEN>LENGTH(BLDAREA) THEN  /* TRUNCATE IF MESSAGE IS TOO  0322
*                                      LONG FOR BLDBUF               */
         LA    @15,260                                             0322
         CR    @08,@15                                             0322
         BNH   @RF00322                                            0322
*     DO;                                                          0323
*       BLDLEN=LENGTH(BLDAREA);     /* SET TOTAL LENGTH TO MAXIMUM 0324
*                                      FOR BLDBUF                    */
         STH   @15,BLDLEN                                          0324
*       BYTELEN=BLDLEN-LSTLEN;      /* SET LENGTH OF VARIABLE        */
         SLR   @15,LSTLEN                                          0325
         LR    BYTELEN,@15                                         0325
*     END;                                                         0326
*   BLDBUF(LSTLEN+1:BLDLEN)=VARIABLE(1:BYTELEN);/* MOVE VARIABLE INTO
*                                      MESSAGE BUILT AREA            */
@RF00322 LA    @08,BLDBUF(LSTLEN)                                  0327
         LH    @15,BLDLEN                                          0327
         SLR   @15,LSTLEN                                          0327
         BCTR  @15,0                                               0327
         EX    @15,@SM00636                                        0327
*SKIPUP:                                                           0328
*   VARLISTP=VARLISTP+4;            /* INCREMENT VARIABLE POINTER TO
*                                      NEXT ONE                      */
SKIPUP   AL    VARLISTP,@CF00225                                   0328
*   CSECTP=CSECTP+1;                /* THE 1 IS THE LENGTH OF THE  0329
*                                      PART LENGTH FIELD IN THE    0329
*                                      MESSAGE MACRO                 */
         AL    CSECTP,@CF00035                                     0329
*   GO TO LOOPCHK;                  /* GO TO CHECK ON NUMBER OF PARTS
*                                      LEFT                          */
*                                                                  0330
         B     LOOPCHK                                             0330
*   /*****************************************************************/
*   /*                                                               */
*   /* MOVE FIXED TEXT SEGMENT INTO THE MESSAGE BUILD AREA           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0331
*SEGMOVE:                                                          0331
*   BYTELEN=CPARTLEN;                                              0331
SEGMOVE  SLR   @08,@08                                             0331
         IC    @08,CPARTLEN(,CSECTP)                               0331
         LR    BYTELEN,@08                                         0331
*   BLDLEN=BLDLEN+CPARTLEN;         /* LENGTH OF BUILD AREA INCLUDING
*                                      THE FIXED SEGMENT             */
         AH    @08,BLDLEN                                          0332
         STH   @08,BLDLEN                                          0332
*   IF BLDLEN>LENGTH(BLDAREA) THEN  /* TRUNCATE MESSAGE IF IT WON'T
*                                      FIT IN BLDBUF                 */
         LA    @02,260                                             0333
         CR    @08,@02                                             0333
         BNH   @RF00333                                            0333
*     DO;                                                          0334
*       BLDLEN=LENGTH(BLDAREA);     /* NEW LENGTH OF MESSAGE         */
         STH   @02,BLDLEN                                          0335
*       BYTELEN=BLDLEN-LSTLEN;                                     0336
         SLR   @02,LSTLEN                                          0336
         LR    BYTELEN,@02                                         0336
*     END;                                                         0337
*   BLDBUF(LSTLEN+1:BLDLEN)=CMSGPART(1:BYTELEN);/* MOVE FIXED SEGMENT
*                                      INTO MESSAGE BUILD AREA       */
@RF00333 LA    @08,BLDBUF(LSTLEN)                                  0338
         LH    @02,BLDLEN                                          0338
         SLR   @02,LSTLEN                                          0338
         BCTR  @02,0                                               0338
         EX    @02,@SM00638                                        0338
*   CSECTP=CSECTP+CPARTLEN+1;       /* 1 IS THE LENGTH OF THE PART 0339
*                                      LENGTH FIELD. POINT TO THE  0339
*                                      NEXT LENGTH BYTE IN THE     0339
*                                      IKJTSMSG MACRO BEING PROCESSED*/
*                                                                  0339
         LR    @08,CSECTP                                          0339
         MVC   @ZT00003+3(1),CPARTLEN(CSECTP)                      0339
         AL    @08,@ZT00003                                        0339
         AL    @08,@CF00035                                        0339
         LR    CSECTP,@08                                          0339
*   /*****************************************************************/
*   /*                                                               */
*   /* CONTINUE LOOPING UNTIL MESSAGE IS COMPLETELY BUILT            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0340
*LOOPCHK:                                                          0340
*   LSTLEN=BLDLEN;                  /* LSTLEN IS NOW LENGTH OF     0340
*                                      MESSAGE BUILT                 */
LOOPCHK  LH    @08,BLDLEN                                          0340
         LR    LSTLEN,@08                                          0340
*   NBPART=NBPART+1;                /* INCREMENT NUMBER OF PARTS   0341
*                                      MOVED INTO MESSAGE BUILT      */
         MVC   @TF00001(4),NBPART                                  0341
         L     @15,@TF00001                                        0341
         AL    @15,@CF00035                                        0341
         ST    @15,@TF00001                                        0341
         MVC   NBPART(4),@TF00001                                  0341
*   IF BLDLEN<LENGTH(BLDAREA) THEN  /* IS MESSAGE AT THE MAXIMUM   0342
*                                      LENGTH?                       */
         C     @08,@CF00609                                        0342
         BNL   @RF00342                                            0342
*     IF NBPARTS<CNBPARTS THEN      /* ARE ALL THE PARTS MOVED INTO
*                                      THE MESSAGE BUFFER ?          */
         CLC   NBPARTS(1),CNBPARTS(MSGAD)                          0343
         BL    @RT00343                                            0343
*       GO TO BLDLOOP;              /* NO, GO BACK AND REPEAT PROCESS*/
*                                                                  0345
*   /*****************************************************************/
*   /*                                                               */
*   /* COME HERE AFTER BUILD A LINE OF THE MESSAGE                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0345
*/*  *****************************************************************/
*/*         EXTRACT CHECKING AND HANDLING IS PERFORMED       @Z40GQKU*/
*/*         IN THIS SEGMENT                                  @Z40GQKU*/
*/*  *****************************************************************/
*                                                                  0345
*   IF SWEXTRCT=ON&                 /* EXTRACT WANTED AND NOT@Z40GQKU*/
*       (SWEXTONE=OFF×SWEXTTWO=OFF) THEN/* COMPLETED         @Z40GQKU*/
*                                                                  0345
@RF00342 TM    SWEXTRCT,B'00001000'                                0345
         BNO   @RF00345                                            0345
         TM    SWEXTONE,B'00000011'                                0345
         BO    @RF00345                                            0345
*     /***************************************************************/
*     /*                                                             */
*     /* HANDLE SINGLE MESSAGE, DATA MSG OR SPECIAL CASE     @Z40GQKU*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0346
*     DO;                           /* GO THRU HERE. FIRST   @Z40GQKU*/
*       IF(CREPLYID='    '×         /* CHECK IF ONLY ONE     @Z40GQKU*/
*           PDATASW=ON×             /* MSG OR DATA MSG OR    @Z40GQKU*/
*           PWTOSW=ON)&             /* WRITE TO OPERATOR MSG.@Z40GQKU*/
*           SWEXTONE=OFF&           /* IF NOT COPIED YET     @Z40GQKU*/
*           SWEXTTWO=OFF THEN       /* THEN                  @Z40GQKU*/
         CLC   CREPLYID(4,MSGAD),@CC00525                          0347
         BE    @GL00012                                            0347
         TM    PDATASW(PARMPTR1),B'10100000'                       0347
         BZ    @RF00347                                            0347
@GL00012 TM    SWEXTONE,B'00000011'                                0347
         BNZ   @RF00347                                            0347
*         DO;                       /* GO EXTRACT            @Z40GQKU*/
*           CALL COPYONE;           /* MESSAGE.              @Z40GQKU*/
         BAL   @14,COPYONE                                         0349
*           IF P2OLDSW=ON&          /* BUT CHECK IF PREMADE  @Z40GQKU*/
*               SWEXTRC2=ON THEN    /* MSG AND EXTRACT ASKED @Z40GQKU*/
         TM    P2OLDSW(PARMPTR1),B'10000000'                       0350
         BNO   @RF00350                                            0350
         TM    SWEXTRC2,B'00000100'                                0350
         BNO   @RF00350                                            0350
*             DO;                   /* MESSAGE EXISTS. IF    @Z40GQKU*/
*               IF OLDNSEG=1 THEN   /* ONLY PRIMARY SEGMENT, @Z40GQKU*/
         L     @08,POLDPTR(,PARMPTR1)                              0352
         CLC   OLDNSEG(4,@08),@CF00035                             0352
         BNE   @RF00352                                            0352
*                 CALL COPYSPCL;    /* COPY IT. BUT IF       @Z40GQKU*/
         BAL   @14,COPYSPCL                                        0353
*               ELSE                /* MULTI-SEGMENTS TO     @Z40GQKU*/
*                 BUFLEN=0;         /* SAY NO SECOND LEVEL   @Z40GQKU
*                                      MSG AVAILABLE FOR EXTRCT    0354
*                                                            @Z40GQKU*/
         B     @RC00352                                            0354
@RF00352 L     @08,PEXTRBF2-1(,PARMPTR1)                           0354
         SLR   @06,@06                                             0354
         ST    @06,@TF00001                                        0354
         MVC   BUFLEN(2,@08),@TF00001+2                            0354
*             END;                  /* MESSAGE.              @Z40GQKU*/
*           ELSE                    /* BUT IF EXTRACT WANTED @Z40GQKU*/
*             IF SWEXTRC2=ON THEN   /* AND NOT AVAILABLE     @Z40GQKU*/
         B     @RC00350                                            0356
@RF00350 TM    SWEXTRC2,B'00000100'                                0356
         BNO   @RF00356                                            0356
*               BUFLEN=0;           /* SAY NO SECOND LEVEL   @Z40GQKU
*                                      MSG AVAILABLE FOR EXTRCT    0357
*                                                            @Z40GQKU*/
         L     @08,PEXTRBF2-1(,PARMPTR1)                           0357
         SLR   @06,@06                                             0357
         ST    @06,@TF00001                                        0357
         MVC   BUFLEN(2,@08),@TF00001+2                            0357
*           IF PEXTRCON=OFF THEN    /* NOW CHECK, IF ONLY    @Z40GQKU*/
@RF00356 DS    0H                                                  0358
@RC00350 TM    PEXTRCON(PARMPTR1),B'00000100'                      0358
         BZ    @RT00358                                            0358
*             GO TO RETLABEL;       /* EXTRACT WANTED, EXIT. @Z40GQKU*/
*           ELSE                    /* OTHERWISE, JUST       @Z40GQKU*/
*             SWEXTTWO=ON;          /* TURN OFF SECOND       @Z40GQKU*/
         OI    SWEXTTWO,B'00000001'                                0360
*         END;                      /* EXTRACT SWITCH.       @Z40GQKU*/
*       ELSE                        /* IF TWO LEVEL MESSAGE  @Z40GQKU*/
*                                                                  0362
*         /***********************************************************/
*         /*                                                         */
*         /* HERE CHECK FOR MULTI-LEVEL PUTLINE TYPE MESSAGE @Z40GQKU*/
*         /*                                                         */
*         /***********************************************************/
*                                                                  0362
*         IF PREVERSW=ON×           /* IF EITHER PUTLINE OR  @Z40GQKU*/
*             PWTPSW=ON THEN        /* WRITE TO PROGRAMMER   @Z40GQKU*/
         B     @RC00347                                            0362
@RF00347 TM    PREVERSW(PARMPTR1),B'01000010'                      0362
         BZ    @RF00362                                            0362
*           DO;                     /* THEN GO THIS WAY      @Z40GQKU*/
*             IF SWEXTRC2=ON THEN   /* IF SECOND EXTRACT     @Z40GQKU*/
         TM    SWEXTRC2,B'00000100'                                0364
         BNO   @RF00364                                            0364
*               DO;                 /* WANTED THEN           @Z40GQKU*/
*                 IF SWEXTTWO=OFF THEN/* IF WANT SECOND MSG@Z40GQKU  */
         TM    SWEXTTWO,B'00000001'                                0366
         BNZ   @RF00366                                            0366
*                   CALL COPYTWO;   /* EXTRACT IT,           @Z40GQKU*/
         BAL   @14,COPYTWO                                         0367
*                 ELSE              /* UNLESS ALREADY DONE,  @Z40GQKU*/
*                   CALL COPYONE;   /* THEN EXTRACT FIRST    @Z40GQKU
*                                      END OF PUTLINE TYPE   @Z40GQKU*/
         B     @RC00366                                            0368
@RF00366 BAL   @14,COPYONE                                         0368
*               END;                /* TWO LEVEL EXTRACTION.@Z40GQKU */
*             ELSE                  /* NOW HANDLE            @Z40GQKU
*                                      ONE LEVEL EXTRACTION  @Z40GQKU*/
*               DO;                 /* FOR TWO LEVEL MESSAGE @Z40GQKU*/
         B     @RC00364                                            0370
@RF00364 DS    0H                                                  0371
*                 IF SWEXTTWO=ON THEN/* IF THIS IS           @Z40GQKU
*                                      SECOND TIME THROUGH   @Z40GQKU*/
         TM    SWEXTTWO,B'00000001'                                0371
         BNO   @RF00371                                            0371
*                   CALL COPYONE;   /* COPY FIRST LEVEL MSG.@Z40GQKU */
         BAL   @14,COPYONE                                         0372
*                 ELSE              /* IF FIRST TIME THROUGH@Z40GQKU */
*                   SWEXTTWO=ON;    /* TURN SECOND COPY      @Z40GQKU*/
         B     @RC00371                                            0373
@RF00371 OI    SWEXTTWO,B'00000001'                                0373
*               END;                /* SWITCH ON. EXIT       @Z40GQKU*/
*                                                                  0374
*             /*******************************************************/
*             /*                                                     */
*             /* END OF PUTLINE TYPE                         @Z40GQKU*/
*             /*                                                     */
*             /*******************************************************/
*                                                                  0375
*           END;                    /* HANDLING              @Z40GQKU*/
*         ELSE                      /* ARRIVE HERE FOR       @Z40GQKU*/
*                                                                  0376
*           /*********************************************************/
*           /*                                                       */
*           /* MULTI-LEVEL PUTGET                            @Z40GQKU*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0376
*           DO;                     /* IF THIS IS FIRST TIME @Z40GQKU*/
         B     @RC00362                                            0376
@RF00362 DS    0H                                                  0377
*             IF SWEXTONE=OFF THEN  /* THROUGH THEN          @Z40GQKU*/
         TM    SWEXTONE,B'00000010'                                0377
         BNZ   @RF00377                                            0377
*               CALL COPYONE;       /* EXTRACT FIRST LEVEL.  @Z40GQKU*/
         BAL   @14,COPYONE                                         0378
*             ELSE                  /* BUT IF SECOND TIME    @Z40GQKU*/
*               IF SWEXTRC2=ON THEN /* THROUGH AND           @Z40GQKU
*                                      WANT SECOND LEVEL     @Z40GQKU*/
         B     @RC00377                                            0379
@RF00377 TM    SWEXTRC2,B'00000100'                                0379
         BNO   @RF00379                                            0379
*                 CALL COPYTWO;     /* THEN EXTRACT IT.      @Z40GQKU*/
         BAL   @14,COPYTWO                                         0380
*               ELSE                /* OTHERWISE JUST TURN   @Z40GQKU*/
*                 SWEXTTWO=ON;      /* SECOND LEVEL SWITCH ON@Z40GQKU
*                                      END OF PUTGET TYPE    @Z40GQKU*/
         B     @RC00379                                            0381
@RF00379 OI    SWEXTTWO,B'00000001'                                0381
*           END;                    /* HANDLING.             @Z40GQKU*/
@RC00379 DS    0H                                                  0382
@RC00377 DS    0H                                                  0383
*     END;                          /*                       @Z40GQKU*/
*                                                                  0383
@RC00362 DS    0H                                                  0383
@RC00347 DS    0H                                                  0384
*   /*****************************************************************/
*   /*                                                               */
*   /* END OF MESSAGE EXTRACT CODE                           @Z40GQKU*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0384
*   IF PWTOSW=ON×((PWTPSW=ON×WTPOVERR=ON)&SWLSTMSG=ON) THEN/*      0384
*                                      PARAMETER LIST AND/OR SWITCHES
*                                      INDICATE A WTO OR WTP MESSAGE
*                                      READY TO BE PUT OUT           */
@RF00345 TM    PWTOSW(PARMPTR1),B'00100000'                        0384
         BO    @RT00384                                            0384
         TM    PWTPSW(PARMPTR1),B'00000010'                        0384
         BO    @GL00016                                            0384
         TM    WTPOVERR,B'00000001'                                0384
         BNO   @RF00384                                            0384
@GL00016 TM    SWLSTMSG,B'00100000'                                0384
         BNO   @RF00384                                            0384
@RT00384 DS    0H                                                  0385
*     DO;                                                          0385
*                                                                  0385
*       /*************************************************************/
*       /*                                                           */
*       /* ISSUE WTO OR WRITE TO PROGRAMMER                          */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0386
*WTPMSG:                            /* COME HERE IF PUTLINE FAILED   */
*       WPLPTR=ADDR(BLDBUF);        /* GET ADDRESS OF MESSAGE AREA -
*                                      SAME FORMAT FOR WTO OR PUTLINE*/
WTPMSG   LA    WPLPTR,BLDBUF                                       0386
*       WPLMCSF='8000'X;            /* MCS FLAG INDICATES THAT     0387
*                                      ROUTING/DESCRIPTOR CODES    0387
*                                      FOLLOW MESSAGE TEXT           */
         MVC   WPLMCSF(2,WPLPTR),@CB00565                          0387
*       WPLPTR=WPLPTR+WPLLGH;       /* POINT TO WPLFLGS, WHICH FOLLOW
*                                      MESSAGE TEXT                  */
         AH    WPLPTR,WPLLGH(,WPLPTR)                              0388
*       IF PWTOSW=ON THEN           /* SET UP TO ISSUE WTO           */
         TM    PWTOSW(PARMPTR1),B'00100000'                        0389
         BNO   @RF00389                                            0389
*         DO;                                                      0390
*           IF WPLLGH>MAXWTOLN+4 THEN/* IF TOO-LONG WTO MESSAGE PLUS
*                                      HEADER, TRUNCATE THE MESSAGE  */
         LA    @08,128                                             0391
         CH    @08,WPLLGH(,WPLPTR)                                 0391
         BNL   @RF00391                                            0391
*             WPLLGH=MAXWTOLN+4;                                   0392
         STH   @08,WPLLGH(,WPLPTR)                                 0392
*           WPLFLGS='10004000'X;    /* SET DESCRIPTOR CODE = 4     0393
*                                      (SYSTEM STATUS), AND ROUTCDE =
*                                      2 (MAIN CONSOLE)              */
@RF00391 XC    WPLFLGS+4(4,WPLPTR),WPLFLGS+4(WPLPTR)               0393
         MVC   WPLFLGS(4,WPLPTR),@CB00566                          0393
*         END;                                                     0394
*       ELSE                        /* SET UP TO ISSUE WTP - WRITE TO
*                                      PROGRAMMER                    */
*         WPLFLGS(1:4)='02000020'X; /* SET DESCRIPTOR CODE = 7     0395
*                                      (APPLICATION                0395
*                                      PROGRAM/PROCESSOR), AND     0395
*                                      ROUTCDE=11 (WTP) - ELEVENTH 0395
*                                      BIT ON IN SECOND HALFWORD     */
         B     @RC00389                                            0395
@RF00389 MVC   WPLFLGS(4,WPLPTR),@CB00567                          0395
*       RFY                                                        0396
*         REG8 RSTD;                                               0396
@RC00389 DS    0H                                                  0397
*       REG8=ADDR(BLDBUF);          /* POINT TO MESSAGE AREA         */
         LA    REG8,BLDBUF                                         0397
*       RFY                                                        0398
*         WPL BASED(REG8);                                         0398
*       CALL WTODOMP;               /* DO COMMON PROCESSING TO ISSUE
*                                      THE MESSAGE                   */
         BAL   @14,WTODOMP                                         0399
*                                                                  0400
*       /*************************************************************/
*       /*                                                           */
*       /* ISSUE WRITE TO PROGRAMMER FOR SECOND LEVEL MESSAGE, IF    */
*       /* HAVE ONE                                                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0400
*       IF(PWTPSW=ON×WTPOVERR=ON)&SWMULTLV=ON&PGRCER=OFF THEN      0400
         TM    PWTPSW(PARMPTR1),B'00000010'                        0400
         BO    @GL00019                                            0400
         TM    WTPOVERR,B'00000001'                                0400
         BNO   @RF00400                                            0400
@GL00019 TM    SWMULTLV,B'10000000'                                0400
         BNO   @RF00400                                            0400
         TM    PGRCER,B'00000100'                                  0400
         BNZ   @RF00400                                            0400
*         DO;                                                      0401
*           RFY                                                    0402
*             WPL BASED(WPLPTR);                                   0402
*           WPLPTR=ADDR(COREMSG);   /* ADDRESS OF O.L.D.BUFFER FOR 0403
*                                      SECOND LEVEL MESSAGE          */
         L     WPLPTR,COREGOTP                                     0403
         LA    @15,COREMSG(,WPLPTR)                                0403
         LR    WPLPTR,@15                                          0403
*           WPLMCSF='8000'X;        /* SAY HAVE CODES SET=MCS        */
         MVC   WPLMCSF(2,WPLPTR),@CB00565                          0404
*           WPLPTR=WPLPTR+WPLLGH;   /* POINT TO WPLFLGS, WHICH FOLLOW
*                                      MESSAGE TEXT                  */
         AH    WPLPTR,WPLLGH(,WPLPTR)                              0405
*           WPLFLGS(1:4)='02000020'X;/* SEE COMMENTS ON FIRST WTP    */
         MVC   WPLFLGS(4,WPLPTR),@CB00567                          0406
*           REG8=ADDR(COREMSG);                                    0407
         LR    REG8,@15                                            0407
*           RFY                                                    0408
*             WPL BASED(REG8);                                     0408
*           CALL WTODOMP;           /* DO COMMON PROCESSING (WTO AND
*                                      MAYBE DOM) TO ISSUE THE     0409
*                                      MESSAGE                       */
         BAL   @14,WTODOMP                                         0409
*           RFY                                                    0410
*             REG8 UNRSTD;                                         0410
*         END;                                                     0411
*       GO TO RETLABEL;             /* RETURN TO CALLER WITH RETURN
*                                      CODE=0                        */
         B     RETLABEL                                            0412
*     END;                                                         0413
*                                                                  0414
*   /*****************************************************************/
*   /*                                                               */
*   /* COMMON PROCESSING FOR MESSAGES                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0414
*   RESPECIFY                                                      0414
*    (REG3) RESTRICTED;                                            0414
@RF00384 DS    0H                                                  0415
*   TMSGID=CREPLYID;                /* GET NEXT MESSAGE ID FROM THE
*                                      REPLY ID IN THE CSECT         */
         MVC   TMSGID(4),CREPLYID(MSGAD)                           0415
*   IF TMSGID^='    ' THEN          /* IF NEXT MESSAGE ID IN CSECT 0416
*                                      ENTRY ISN'T BLANK             */
         CLC   TMSGID(4),@CC00525                                  0416
         BE    @RF00416                                            0416
*     DO;                                                          0417
*       SWMULTLV='1'B;              /* IF THE FIRST REPLY IS NOT   0418
*                                      BLANKS, THEN THE MESSAGE IS 0418
*                                      MULTI-LEVEL                   */
         OI    SWMULTLV,B'10000000'                                0418
*       GO TO SKIPSW;               /* NOT LAST MESSAGE - MUST FORMAT
*                                      NEXT                          */
         B     SKIPSW                                              0419
*     END;                          /*                       @Z40NQKJ*/
*   ELSE                            /* WHEN NO MSG POINTED TO BY MSG
*                                      IN CSECT               @Y02668*/
*     IF P2OLDSW='1'B THEN          /* IF HAVE PRE-FORMATTED SECOND
*                                      LEVEL (PUTLINE OUTPUT LINE  0421
*                                      DESCRIPTOR = OLD)      @Y02668*/
@RF00416 TM    P2OLDSW(PARMPTR1),B'10000000'                       0421
         BNO   @RF00421                                            0421
*       SWMULTLV='1'B;              /* MULTI-LEVEL MESSAGE AND ALSO
*                                      LAST MESSAGE           @Y02668*/
         OI    SWMULTLV,B'10000000'                                0422
*   SWLSTMSG='1'B;                  /* THE MESSAGE JUST CONSTRUCTED
*                                      IS THE LAST                   */
@RF00421 OI    SWLSTMSG,B'00100000'                                0423
*SKIPSW:                                                           0424
*   IF(PWTPSW=ON×WTPOVERR=ON)&SWLSTMSG=ON THEN/* ISSUE WTP AFTER   0424
*                                      FIRST AND SECOND LEVELS ARE 0424
*                                      PROCESSED                     */
SKIPSW   TM    PWTPSW(PARMPTR1),B'00000010'                        0424
         BO    @GL00021                                            0424
         TM    WTPOVERR,B'00000001'                                0424
         BNO   @RF00424                                            0424
@GL00021 TM    SWLSTMSG,B'00100000'                                0424
         BO    @RT00424                                            0424
*     GO TO WTPMSG;                 /* GO ISSUE WTP                  */
*   IF PDATASW='1'B THEN            /* DATA TO BE PUT OUT, ASSUME  0426
*                                      SINGLE LEVEL                  */
@RF00424 TM    PDATASW(PARMPTR1),B'10000000'                       0426
         BO    @RT00426                                            0426
*     GO TO PUTLINE;                                               0427
*   RFY                                                            0428
*    (REG0,                                                        0428
*     REG1,                                                        0428
*     REG15) RSTD;                                                 0428
*   IF SWMULTLV='0'B THEN           /* A SINGLE LEVEL MESSAGE IS PUT
*                                      OUT                           */
         TM    SWMULTLV,B'10000000'                                0429
         BNZ   @RF00429                                            0429
*     DO;                                                          0430
*       PUTLEN=1;                                                  0431
         MVC   PUTLEN(4),@CF00035                                  0431
*       PUTADDR=ADDR(BLDBUF);                                      0432
         LA    @14,BLDBUF                                          0432
         ST    @14,PUTADDR                                         0432
*                                                                  0433
*       /*************************************************************/
*       /*                                                           */
*       /* COMMON PUTLINE LOGIC                                      */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0433
*PUTLINE:                           /* ENTER HERE IF DATA MESSAGE OR
*                                      TWO LEVELS                    */
*       SAVEPAR(1:LENGTH(PUTLL))=PUTLL;/* MOVE LIST FORM OF PUTLINE
*                                      MACRO TO REENTRANT CORE     0433
*                                                            @Z40NQKJ*/
*                                                                  0433
PUTLINE  MVC   SAVEPAR(12),PUTLL                                   0433
*       /*************************************************************/
*       /*                                                           */
*       /* CHANGE KEY IF NECESSARY                                   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0434
*       IF PKEY1SW='1'B THEN        /* NEED TO BE IN KEY 0 OR @Y02656*/
         TM    PKEY1SW(PARMPTR1),B'00001000'                       0434
         BNO   @RF00434                                            0434
*         GEN;                                                     0435
*                                   /* 8 TO ISSUE 2-LEVEL MSG @Y02656*/
TOKEY0A  MODESET EXTKEY=SUPR,RELATED=(KEY0,IKJEFF02(TOKEY1A))   @Y02656
*                                   CHANGE TO KEY 0             @Y02656
*         REG15=REG0;                                              0436
*                                                                  0436
@RF00434 LR    REG15,REG0                                          0436
*       /*************************************************************/
*       /*                                                           */
*       /* PROCESS PUTLINE FOR DATA                                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0437
*       IF PDATASW='1'B THEN                                       0437
         TM    PDATASW(PARMPTR1),B'10000000'                       0437
         BNO   @RF00437                                            0437
*         DO;                                                      0438
*           GENERATE;                                              0439
*                                   /* PUTLINE SINGLE LINE OF DATA   */
         PUTLINE   OUTPUT=(BLDBUF,DATA),                               X
               MF=(E,PUTPTRS)       LINK TO PUTLINE
*           GO TO PUTDONE;                                         0440
         B     PUTDONE                                             0440
*         END;                                                     0441
*                                                                  0441
*       /*************************************************************/
*       /*                                                           */
*       /* PROCESS TWO-LEVEL PUTLINE MESSAGE                         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0442
*       IF SWMULTLV='1'B THEN                                      0442
@RF00437 TM    SWMULTLV,B'10000000'                                0442
         BNO   @RF00442                                            0442
*         DO;                                                      0443
*           GENERATE;                                              0444
*                                   /* PUTLINE TWO-LINE MESSAGE      */
         PUTLINE   OUTPUT=((REG3),MULTLVL),                            X
               MF=(E,PUTPTRS)
*           GO TO PUTDONE;                                         0445
         B     PUTDONE                                             0445
*         END;                                                     0446
*                                                                  0446
*       /*************************************************************/
*       /*                                                           */
*       /* PROCESS SINGLE-LEVEL PUTGET MESSAGE                       */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0447
*       IF PREVERSW=OFF&PGRCER=OFF THEN/*                    @Z40NQKJ*/
@RF00442 TM    PREVERSW(PARMPTR1),B'01000000'                      0447
         BNZ   @RF00447                                            0447
         TM    PGRCER,B'00000100'                                  0447
         BNZ   @RF00447                                            0447
*         DO;                                                      0448
*           SAVEPAR(1:LENGTH(PUTGETLL))=PUTGETLL;/* GET REENTRANT  0449
*                                      LIST FORM OF MACRO    @Z40NQKJ*/
         MVC   SAVEPAR(16),PUTGETLL                                0449
*           GEN;                                                   0450
*                                  /*                       @Z40NQKJ*/
        PUTGET OUTPUT=(PUTPARM),MF=(E,PUTPTRS)                @Z40NQKJ
*         END;                      /*                       @Z40NQKJ*/
*       ELSE                        /* IF NOT PUTGET         @Z40NQKJ*/
*                                                                  0452
*         /***********************************************************/
*         /*                                                         */
*         /* PROCESS SINGLE-LEVEL PUTLINE MESSAGE                    */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0452
*         GENERATE;                                                0452
         B     @RC00447                                            0452
@RF00447 DS    0H                                                  0452
*                                   /* PUTLINE ONE-LINE MESSAGE      */
         PUTLINE   OUTPUT=(PUTPARM),                                   X
               MF=(E,PUTPTRS)       LINK TO PUTLINE
*PUTDONE:                                                          0453
*         RETCODE=REG15;            /* SAVE PUTLINE'S RETURN CODE    */
*                                                                  0453
@RC00447 DS    0H                                                  0453
PUTDONE  ST    REG15,RETCODE                                       0453
*       /*************************************************************/
*       /*                                                           */
*       /* CHANGE KEY BACK IF NECESSARY                              */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0454
*       IF PKEY1SW='1'B THEN        /* CHANGE BACK TO KEY 1   @Y02656*/
         TM    PKEY1SW(PARMPTR1),B'00001000'                       0454
         BNO   @RF00454                                            0454
*         GEN;                                                     0455
*                                                                  0455
*                                   /* (AFTER ISSUE PUTLINE)  @Y02656*/
TOKEY1A  MODESET EXTKEY=SCHED,RELATED=(KEY1,IKJEFF02(TOKEY0A))  @Y02656
*                                   CHANGE FROM KEY 0 TO KEY 1  @Y02656
*         /***********************************************************/
*         /*                                                         */
*         /* CHECK FOR PUTGET ERROR                                  */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0456
*         IF RETCODE^=0&PREVERSW=OFF&PGRCER=OFF THEN/* IF JUST GOT 0456
*                                      PUTGET ERROR          @Z40NQKJ*/
@RF00454 L     @14,RETCODE                                         0456
         LTR   @14,@14                                             0456
         BZ    @RF00456                                            0456
         TM    PREVERSW(PARMPTR1),B'01000000'                      0456
         BNZ   @RF00456                                            0456
         TM    PGRCER,B'00000100'                                  0456
         BNZ   @RF00456                                            0456
*           DO;                     /*                       @Z40NQKJ*/
*             IF PPGMSW=ON THEN     /* IF WANT ERROR MESSAGE @Z40NQKJ*/
         TM    PPGMSW(PARMPTR1),B'00001000'                        0458
         BNO   @RF00458                                            0458
*               DO;                 /*                       @Z40NQKJ*/
*                 PGRCER=ON;        /* REMEMBER PUTGET ERROR @Z40NQKJ*/
         OI    PGRCER,B'00000100'                                  0460
*                 PGRETCD=RETCODE;  /* SAVE RETURN CODE      @Z40NQKJ*/
         ST    @14,PGRETCD                                         0461
*                 GO TO SKIPSW;     /* ISSUE TEXT AS PUTLINE @Z40NQKJ*/
         B     SKIPSW                                              0462
*               END;                /*                       @Z40NQKJ*/
*             ELSE                  /* IF NO MESSAGE WANTED  @Z40NQKJ*/
*               GO TO RETLABEL;     /* JUST RETURN           @Z40NQKJ*/
*           END;                    /*                       @Z40NQKJ*/
*                                                                  0465
*       /*************************************************************/
*       /*                                                           */
*       /* CHECK FOR PUTLINE ERROR                                   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0466
*       IF RETCODE^=0&PNPLMSW=OFF THEN/* WILL ISSUE THE MESSAGE AS 0466
*                                      WRITE-TO-PROGRAMMER, PLUS TWO
*                                      ERROR MESSAGES, UNLESS CALLER
*                                      SAID NOT TO                   */
@RF00456 L     @14,RETCODE                                         0466
         LTR   @14,@14                                             0466
         BZ    @RF00466                                            0466
         TM    PNPLMSW(PARMPTR1),B'00010000'                       0466
         BNZ   @RF00466                                            0466
*         DO;                                                      0467
*           PLRCER=ON;              /* REMEMBER TO ISSUE ERROR     0468
*                                      MESSAGES BEFORE EXIT          */
*           WTPOVERR=ON;            /* CAN'T ISSUE PUTLINE MESSAGE   */
         OI    PLRCER,B'00001001'                                  0469
*           GO TO WTPMSG;           /* ISSUE AS WRITE-TO-PROGRAMMER  */
         B     WTPMSG                                              0470
*         END;                                                     0471
*       GO TO RETLABEL;             /* GO TO CLEAN-UP CODE           */
         B     RETLABEL                                            0472
*     END;                                                         0473
*                                                                  0473
*   /*****************************************************************/
*   /*                                                               */
*   /* GET PUTLINE/PUTGET OUTPUT LINE DESCRIPTOR (O.L.D.) BUFFER IF  */
*   /* HAVE MORE THAN SINGLE-LEVEL MESSAGE                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0474
*   REG0=BLDLEN+LENGTH(COREHDR)+LENGTH(CORERTCD);/* AMOUNT OF GOTTEN
*                                      CORE=LENGTH OF BUFFER       0474
*                                      BUILT+LENGTH OF POINTERS FOR
*                                      PUTLINE AND PUTGET (AND WTP)  */
@RF00429 LA    REG0,16                                             0474
         AH    REG0,BLDLEN                                         0474
*   GENERATE;                                                      0475
*                                   /* GET OUTPUT LINE DESCRIPTOR */
         GETMAIN  R,LV=(0)
*   COREGOTP=REG1;                  /* SAVE ADDRESS OF GOTTEN CORE   */
         ST    REG1,COREGOTP                                       0476
*   COREMSG(1:BLDLEN)=BLDBUF(1:BLDLEN);/* MOVE BUFFER INTO CORE    0477
*                                      GOTTEN                        */
         L     @14,COREGOTP                                        0477
         LH    @08,BLDLEN                                          0477
         BCTR  @08,0                                               0477
         EX    @08,@SM00641                                        0477
*   CORENOW=ADDR(COREMSG);          /* MOVE NEW ADDRESS OF BUFFER  0478
*                                      INTO CORE GOTTEN              */
         LA    @08,COREMSG(,@14)                                   0478
         ST    @08,CORENOW(,@14)                                   0478
*   CORESW='00000001'X;             /* SIGNIFY MESSAGE IS IN ONE   0479
*                                      SEGMENT ONLY                  */
*                                                                  0479
         MVC   CORESW(4,@14),@CB00578                              0479
*   /*****************************************************************/
*   /*                                                               */
*   /* SPECIAL LOGIC FOR MULTILEVEL PUTLINE OR WTP                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0480
*   IF PREVERSW=ON×WTPOVERR=ON×PWTPSW=ON THEN/* ISSUE PUTLINE IF   0480
*                                      REVERSE MESSAGE SWITCH ON   0480
*                                      (CODE ALSO USED FOR WTP WITH
*                                      SECOND LEVEL MESSAGE)         */
         TM    PREVERSW(PARMPTR1),B'01000000'                      0480
         BO    @RT00480                                            0480
         TM    WTPOVERR,B'00000001'                                0480
         BO    @RT00480                                            0480
         TM    PWTPSW(PARMPTR1),B'00000010'                        0480
         BNO   @RF00480                                            0480
@RT00480 DS    0H                                                  0481
*     DO;                                                          0481
*                                                                  0481
*       /*************************************************************/
*       /*                                                           */
*       /* SPECIAL PROCESSING IF THE PUTLINE SECOND LEVEL MESSAGE    */
*       /* O.L.D. WAS BUILT BY THE CALLER                            */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0482
*       IF P2OLDSW='1'B&SWLSTMSG='1'B THEN/*                  @Y02668*/
         TM    P2OLDSW(PARMPTR1),B'10000000'                       0482
         BNO   @RF00482                                            0482
         TM    SWLSTMSG,B'00100000'                                0482
         BNO   @RF00482                                            0482
*         DO;                                                      0483
*           IF POLDPTR=0 THEN       /* CHECK FOR ZERO O.L.D. POINTER
*                                      (PARAMETER LIST ERROR) FIRST  */
         L     @14,POLDPTR(,PARMPTR1)                              0484
         LTR   @14,@14                                             0484
         BNZ   @RF00484                                            0484
*             DO;                                                  0485
*               OLDPLER=ON;         /* REMEMBER TO ISSUE ERROR MSG   */
         OI    OLDPLER,B'00000010'                                 0486
*               SWMULTLV=OFF;       /* CAN'T ISSUE SECOND LEVEL MSG  */
         NI    SWMULTLV,B'01111111'                                0487
*               GO TO SKIPSW;       /* GO ISSUE FIRST LEVEL MSG      */
         B     SKIPSW                                              0488
*             END;                                                 0489
*           ELSE                    /* IF PARAMETER LIST O.K.        */
*             DO;                                                  0490
@RF00484 DS    0H                                                  0491
*               IF OLDNSEG>0        /* IF AT LEAST ONE MSG SEGMENT   */
*                   &OSEGLEN>14 THEN/* AND HAVE ROOM FOR THE IKJ   0491
*                                      MESSAGE ID             @Y02668*/
         L     @14,POLDPTR(,PARMPTR1)                              0491
         L     @08,OLDNSEG(,@14)                                   0491
         LTR   @08,@08                                             0491
         BNP   @RF00491                                            0491
         L     @14,OLDSEGP(,@14)                                   0491
         LH    @08,OSEGLEN(,@14)                                   0491
         C     @08,@CF00579                                        0491
         BNH   @RF00491                                            0491
*                 OSEGTEXT(1:10)=CORETEXT(1:10);/* COPY IKJ MESSAGE
*                                      ID FROM FIRST LEVEL TO SECOND
*                                      LEVEL MSG              @Y02668*/
         L     @08,COREGOTP                                        0492
         MVC   OSEGTEXT(10,@14),CORETEXT(@08)                      0492
*               CORELAST=POLDPTR;   /* POINT THE FIRST LEVEL MSG'S 0493
*                                      O.L.D. TO THE 2ND LEVEL MSG'S
*                                      PREFORMATTED O.L.D.    @Y02668*/
@RF00491 L     @14,POLDPTR(,PARMPTR1)                              0493
         L     @08,COREGOTP                                        0493
         ST    @14,CORELAST(,@08)                                  0493
*             END;                                                 0494
*         END;                                                     0495
*       ELSE                        /* OTHERWISE IKJEFF02 BUILDS   0496
*                                      OLD'S FOR BOTH MESSAGES Y02668*/
*         CORELAST=OUTADDR;         /* MOVE THE ADDRESS OF PREVIOUS
*                                      (SECOND LEVEL) CORE GOTTEN  0496
*                                      INTO THE FIRST LEVEL OUTPUT 0496
*                                      AREA OR IF IT IS THE SECOND 0496
*                                      LEVEL MOVE IN 'FF000000'X     */
         B     @RC00482                                            0496
@RF00482 L     @14,OUTADDR                                         0496
         L     @08,COREGOTP                                        0496
         ST    @14,CORELAST(,@08)                                  0496
*       OUTADDR=COREGOTP;           /* SAVE ADDRESS OF LAST GOTTEN 0497
*                                      CORE FOR EXECUTE FORM OF    0497
*                                      PUTLINE                       */
*                                                                  0497
@RC00482 L     @14,COREGOTP                                        0497
         ST    @14,OUTADDR                                         0497
*       /*************************************************************/
*       /*                                                           */
*       /* CONTINUE LOOPING IF SECOND LEVEL MESSAGE NOT BUILT YET    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0498
*       IF SWLSTMSG='0'B THEN       /* IF A NEXT ID IS FOUND, GO   0498
*                                      BUILD THAT MESSAGE            */
         TM    SWLSTMSG,B'00100000'                                0498
         BZ    @RT00498                                            0498
*         GO TO MSGSRCH;            /* NOTE - WTP (WRITE TO        0499
*                                      PROGRAMMER) LOGIC WILL TAKE 0499
*                                      THIS PATH                     */
*PUT2LINE:                                                         0500
*       REG3=OUTADDR;               /* SET ADDRESS OF OUTPUT LINES 0500
*                                      FOR PUTLINE                   */
PUT2LINE L     REG3,OUTADDR                                        0500
*       GO TO PUTLINE;                                             0501
         B     PUTLINE                                             0501
*     END;                                                         0502
*   RFY                                                            0503
*    (REG0,                                                        0503
*     REG1,                                                        0503
*     REG15) UNRSTD;                                               0503
@RF00480 DS    0H                                                  0504
*                                                                  0504
*   /*****************************************************************/
*   /*                                                               */
*   /* SPECIAL LOGIC FOR MULTILEVEL PUTGET                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0504
*   COREGOT(1:4)='FF000000'X;       /* PUT 'FF000000'X INTO FIRST 4
*                                      BYTES OF LAST CORE GOTTEN TO
*                                      SHOW IT IS THE LAST CORE    0504
*                                      GOTTEN - USED IN THE        0504
*                                      PROCESSING BELOW              */
         L     @08,COREGOTP                                        0504
         MVC   COREGOT(4,@08),@CB00519                             0504
*   IF SWNFIRST='0'B THEN           /* THIS IS THE FIRST MESSAGE     */
         TM    SWNFIRST,B'01000000'                                0505
         BNZ   @RF00505                                            0505
*     DO;                                                          0506
*       SWNFIRST='1'B;              /* THE NEXT MESSAGE WILL NOT BE
*                                      THE FIRST                     */
         OI    SWNFIRST,B'01000000'                                0507
*       OUTADDR=COREGOTP;           /* SAVE ADDRESS OF FIRST O.L.D.
*                                      FOR PUTLINE AND PUTGET EXECUTE
*                                      FORM OF MACRO                 */
         ST    @08,OUTADDR                                         0508
*       CORESAVE=COREGOTP;          /* SAVE THE ADDRESS OF THE LAST
*                                      GOTTEN CORE, TO USE IN      0509
*                                      CHAINING THE NEXT ONE         */
         ST    @08,CORESAVE                                        0509
*       GO TO MSGSRCH;              /* LOOK FOR NEXT MESSAGE ID      */
         B     MSGSRCH                                             0510
*     END;                                                         0511
*   CORESAVE->CORELAST=COREGOTP;                                   0512
@RF00505 L     @08,COREGOTP                                        0512
         L     @06,CORESAVE                                        0512
         ST    @08,CORELAST(,@06)                                  0512
*   CORESAVE=COREGOTP;              /* GO TO LAST MESSAGE BUILT - PUT
*                                      ITS ADDRESS IN THE FIRST 4  0513
*                                      BYTES OF THE PREVIOUS MESSAGE */
*                                                                  0513
         ST    @08,CORESAVE                                        0513
*   /*****************************************************************/
*   /*                                                               */
*   /* CONTINUE PROCESSING LEVELS OF MESSAGES UNTIL MESSAGE          */
*   /* COMPLETELY BUILT                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0514
*   IF SWLSTMSG='0'B THEN           /* IF THIS IS NOT LAST, GO BUILD
*                                      NEXT                          */
         TM    SWLSTMSG,B'00100000'                                0514
         BZ    @RT00514                                            0514
*     GO TO MSGSRCH;                                               0515
*                                                                  0515
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE PUTGET                                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0516
*PTGTMSG:                                                          0516
*   SAVEPAR(1:16)=PUTGETLL;         /* PUT LIST FORM OF PUTGET MACRO
*                                      IN PARAMETER LIST FOR EXECUTE
*                                      FORM                          */
PTGTMSG  MVC   SAVEPAR(16),PUTGETLL                                0516
*   REG3=OUTADDR;                   /* POINT TO FIRST-LEVEL O.L.D.   */
         L     REG3,OUTADDR                                        0517
*                                                                  0518
*   /*****************************************************************/
*   /*                                                               */
*   /* CHANGE KEY IF NECESSARY                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0518
*   IF PKEY1SW='1'B THEN            /* NEED TO BE IN KEY 0 OR @Y02656*/
         TM    PKEY1SW(PARMPTR1),B'00001000'                       0518
         BNO   @RF00518                                            0518
*     GEN;                                                         0519
*                                   /* 8 TO ISSUE 2-LEVEL MSG @Y02656*/
TOKEY0B  MODESET EXTKEY=SUPR,RELATED=(KEY0,IKJEFF02(TOKEY1B))   @Y02656
*                                   CHANGE TO KEY 0             @Y02656
*     GENERATE;                                                    0520
@RF00518 DS    0H                                                  0520
         PUTGET  OUTPUT=((REG3),MULTLVL),MF=(E,PUTPTRS)
*     RFY                                                          0521
*       REG15 RSTD;                                                0521
*   RETCODE=REG15;                  /* SAVE RETURN CODE              */
         ST    REG15,RETCODE                                       0522
*   RFY                                                            0523
*     REG15 UNRSTD;                                                0523
*   IF PKEY1SW='1'B THEN            /* CHANGE BACK TO KEY 1   @Y02656*/
         TM    PKEY1SW(PARMPTR1),B'00001000'                       0524
         BNO   @RF00524                                            0524
*     GEN;                                                         0525
*                                                                  0525
*                                   /* (AFTER ISSUE PUTGET)   @Y02656*/
TOKEY1B  MODESET EXTKEY=SCHED,RELATED=(KEY1,IKJEFF02(TOKEY0B))  @Y02656
*                                   CHANGE FROM KEY 0 TO KEY 1  @Y02656
*     /***************************************************************/
*     /*                                                             */
*     /* CHECK FOR PUTGET ERROR                                      */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0526
*     IF RETCODE^=0 THEN                                           0526
@RF00524 L     @08,RETCODE                                         0526
         LTR   @08,@08                                             0526
         BZ    @RF00526                                            0526
*       DO;                                                        0527
*         IF PPGMSW=OFF THEN        /* IF CALLER DOESN'T WANT A    0528
*                                      PUTGET ERROR MESSAGE          */
         TM    PPGMSW(PARMPTR1),B'00001000'                        0528
         BZ    @RT00528                                            0528
*           GO TO RETLABEL;         /* WILL CLEAN-UP AND TERMINATE   */
*         PGRCER=ON;                /* REMEMBER TO ISSUE ERROR     0530
*                                      MESSAGE AFTER ISSUE FIRST   0530
*                                      LEVEL OF PUTGET MESSAGE AS  0530
*                                      PUTLINE                       */
         OI    PGRCER,B'00000100'                                  0530
*         PGRETCD=RETCODE;          /* SAVE PUTGET R.C. HERE (RETCODE
*                                      BECOMES PUTLINE R.C.)         */
         ST    @08,PGRETCD                                         0531
*         SWMULTLV=OFF;             /* WON'T ISSUE OTHER LEVELS      */
         NI    SWMULTLV,B'01111111'                                0532
*         COREGOTP=OUTADDR;         /* POINT TO O.L.D. FOR FIRST   0533
*                                      LEVEL MESSAGE                 */
         L     @08,OUTADDR                                         0533
         ST    @08,COREGOTP                                        0533
*         TEMP=LENGTH(BLDBUF)-(LENGTH(BLDAREA)-CORELEN);/* GET LENGTH
*                                      FOR MOVE INTO BLDBUF (DON'T 0534
*                                      MOVE CORERTCD)                */
         LH    @06,CORELEN(,@08)                                   0534
         SL    @06,@CF00609                                        0534
         AL    @06,@CF00611                                        0534
         ST    @06,TEMP                                            0534
*         BLDBUF(1:TEMP)=COREMSG(1:TEMP);/* COPY FIRST LEVEL TEXT    */
         BCTR  @06,0                                               0535
         EX    @06,@SM00644                                        0535
*         GO TO SKIPSW;             /* ISSUE FIRST LEVEL MESSAGE TEXT
*                                      AS PUTLINE AND DON'T RETURN   */
         B     SKIPSW                                              0536
*       END;                                                       0537
*                                                                  0537
*   /*****************************************************************/
*   /*                                                               */
*   /* GET CORE FOR REPLY BUFFER IF PUTGET WAS SUCCESSFUL            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0538
*   RFY                                                            0538
*     REG7 RSTD;                                                   0538
@RF00526 DS    0H                                                  0539
*   REG3=INLEN;                     /* SAVE PUTGET BUFFER LENGTH     */
         L     @08,INBUFP-1                                        0539
         LH    REG3,INLEN(,@08)                                    0539
*   REG7=REG3-2;                    /* SET SIZE TO GET FOR A BUFFER
*                                      TO BE RETURNED TO CALLER      */
         LR    REG7,REG3                                           0540
         BCTR  REG7,0                                              0540
         BCTR  REG7,0                                              0540
*   RFY                                                            0541
*    (REG0,                                                        0541
*     REG1) RSTD;                                                  0541
*   REG0=REG7;                                                     0542
         LR    REG0,REG7                                           0542
*   GENERATE;                                                      0543
         GETMAIN  R,LV=(0)
*   PRETEXTP=REG1;                  /* SET ADDRESS OF TEXT RETURNED  */
         ST    REG1,@TF00001                                       0544
         MVC   PRETEXTP(3,PARMPTR1),@TF00001+1                     0544
*   PRELEN=REG7;                    /* SET LENGTH RETURNED           */
         STH   REG7,PRELEN(,REG1)                                  0545
*   REG7=REG7-2;                                                   0546
*                                                                  0546
         BCTR  REG7,0                                              0546
         BCTR  REG7,0                                              0546
*   /*****************************************************************/
*   /*                                                               */
*   /* COPY REPLY INFO FROM PUTGET BUFFER TO NEW BUFFER              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0547
*   IF REG7^=0                      /* IF THERE IS ANYTHING          */
*     THEN                          /* TO MOVE THEN MOVE TO          */
         LTR   REG7,REG7                                           0547
         BZ    @RF00547                                            0547
*     DO;                           /* OUR OWN AREA                  */
*       PRETEXT(1:REG7)=INTEXT(1:REG7);                            0549
*                                                                  0549
         LR    @08,REG7                                            0549
         BCTR  @08,0                                               0549
         L     @06,INBUFP-1                                        0549
         EX    @08,@SM00646                                        0549
*       /*************************************************************/
*       /*                                                           */
*       /* CONVERT REPLY TEXT TO UPPER CASE                          */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0550
*       DO REG7=REG7 TO 1 BY-1;                                    0550
         B     @DE00550                                            0550
@DL00550 DS    0H                                                  0551
*         PREHIGH='1'B;             /* SET 2ND BIT OF EACH CHARACTER */
         OI    PREHIGH(REG1),B'01000000'                           0551
*         REG1=REG1+1;              /* ON TO CONVERT TO UPPER CASE   */
         AL    REG1,@CF00035                                       0552
*       END;                                                       0553
         BCTR  REG7,0                                              0553
@DE00550 LTR   REG7,REG7                                           0553
         BP    @DL00550                                            0553
*     END;                                                         0554
*   RFY                                                            0555
*     REG7 UNRSTD;                                                 0555
*                                                                  0555
@RF00547 DS    0H                                                  0556
*   /*****************************************************************/
*   /*                                                               */
*   /* FREE THE PUTGET BUFFER                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0556
*   REG1=INBUFP;                    /* SET ADDRESS OF AREA TO BE   0556
*                                      FREED                         */
         L     REG1,INBUFP-1                                       0556
         LA    REG1,0(,REG1)                                       0556
*   REG0=REG3×'01000000'X;          /* SET LENGTH SET SUBPOOL TO 1   */
         LR    REG0,REG3                                           0557
         O     REG0,@CF00583                                       0557
*   GENERATE;                                                      0558
*                                                                  0558
         FREEMAIN  R,LV=(0),A=(1)
*   /*****************************************************************/
*   /*                                                               */
*   /* CLEAN UP AND RETURN TO CALLER                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0559
*RETLABEL:                          /* FREE O.L.D.'S HERE            */
*   REG1=OUTADDR;                                                  0559
RETLABEL L     REG1,OUTADDR                                        0559
*   GEN(LA 1,0(1));                 /* ZERO OUT HIGH-ORDER BYTE      */
*                                                                  0560
         LA 1,0(1)
*   /*****************************************************************/
*   /*                                                               */
*   /* FREE O.L.D. CONTROL BLOCKS, IF NECESSARY                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0561
*   IF REG1^=0 THEN                                                0561
         LTR   REG1,REG1                                           0561
         BZ    @RF00561                                            0561
*     DO;                                                          0562
*       REG0=REG1->CORELEN+LENGTH(COREHDR)+LENGTH(CORERTCD);/* FREE
*                                      AMOUNT OF CORE FOR GETMAIN OF
*                                      O.L.D.                        */
         LA    REG0,16                                             0563
         AH    REG0,CORELEN(,REG1)                                 0563
*       OUTADDR=REG1->CORELAST;                                    0564
         L     @08,CORELAST(,REG1)                                 0564
         ST    @08,OUTADDR                                         0564
*       GEN(FREEMAIN R,LV=(0),A=(1));/* FREE O.L.D. FOR FIRST LEVEL
*                                      MESSAGE                       */
         FREEMAIN R,LV=(0),A=(1)
*       IF P2OLDSW='1'B THEN        /* DON'T FREE SECOND LEVEL MSG 0566
*                                      O.L.D. IF SUPPLIED BY CALLER -
*                                                             @Y02668*/
         TM    P2OLDSW(PARMPTR1),B'10000000'                       0566
         BNO   @RF00566                                            0566
*         OUTADDR=0;                                               0567
         SLR   @08,@08                                             0567
         ST    @08,OUTADDR                                         0567
*       GO TO RETLABEL;             /* CONTINUE LOOP                 */
         B     RETLABEL                                            0568
*     END;                                                         0569
*   RFY                                                            0570
*    (REG0,                                                        0570
*     REG1) UNRSTD;                                                0570
*                                                                  0570
@RF00561 DS    0H                                                  0571
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE PARAMETER LIST OR I/O ERROR MESSAGE, IF NEEDED          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0571
*   IF ERRORSWS^='0000000000000000'B THEN                          0571
         CLC   ERRORSWS(2),@CB00585                                0571
         BE    @RF00571                                            0571
*     CALL EMSGPROC;                /* SET UP AND ISSUE ERROR MESSAGE*/
         BAL   @14,EMSGPROC                                        0572
*ERRRET:                            /* RETURN HERE AFTER CALL      0573
*                                      EMSGPROC                      */
*   RETURN CODE(RETCODE);           /* RETURN TO CALLER WITH       0573
*                                      APPROPRIATE RETURN CODE       */
@RF00571 DS    0H                                                  0573
ERRRET   L     @02,RETCODE                                         0573
         L     @13,4(,@13)                                         0573
         L     @00,@SIZDATD                                        0573
         LR    @01,@10                                             0573
         FREEMAIN R,LV=(0),A=(1)
         LR    @15,@02                                             0573
         L     @14,12(,@13)                                        0573
         LM    @00,@12,20(@13)                                     0573
         BR    @14                                                 0573
*                                                                  0574
*/********************************************************************/
*/*                                                                  */
*/*  EMSGPROC INTERNAL PROCEDURE                                     */
*/*    - SETS UP IKJEFFMT PARAMETER LIST FOR THE FOLLOWING CASES:    */
*/*        PTRPLER, BAD POINTER TO PARMLIST                  MSG 02A */
*/*        PCPPLER, ZERO CPPL POINTER IF PUTLINE/PUTGET      MSG 02A */
*/*        MCPLER,  ZERO POINTER TO MESSAGE CSECT            MSG 02A */
*/*        MIDPLER, NO MATCH FOR MESSAGE ID IN MESSAGE CSECT MSG 02A */
*/*        OLDPLER, ZERO O.L.D. POINTER WHEN P2OLDSW ON      MSG 02A */
*/*        PLRCER,  PUTLINE RETURNED AN ERROR CODE           MSG 02A */
*/*        PGRCER,  PUTGET RETURNED AN ERROR CODE            MSG 02B */
*/*        EXTRCTER, NO FIRST EXTRACT BUFFER FROM CALLER     MSG 02C */
*/*        EXTRCTR2, NO SECOND EXTRACT BUFFER FROM CALLER    MSG 02C */
*/*        EXTRCTR3, ONLY SECOND EXTRACT REQUESTED           MSG 02C */
*/*    - CALLS IKJEFF02 TO ISSUE EACH ERROR MESSAGE.                 */
*/*    - FOR PLRCER, ALSO CALLS IKJEFF19 TO ISSUE FAILURE MESSAGE.   */
*/*    - RETURNS TO CALLER, WHICH SHOULD THEN GO TO ERRRET LABEL.    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0574
*EMSGPROC:                                                         0574
*   PROC;                                                          0574
@EL00001 L     @13,4(,@13)                                         0574
@EF00001 L     @00,@SIZDATD                                        0574
         LR    @01,@10                                             0574
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0574
         BR    @14                                                 0574
EMSGPROC STM   @14,@12,@SA00002                                    0574
*   IF PLRCER=OFF&PGRCER=OFF THEN   /* IF NOT PUTLINE OR PUTGET ERROR
*                                      CASE                          */
         TM    PLRCER,B'00001100'                                  0575
         BNZ   @RF00575                                            0575
*     RETCODE=76;                   /* PASS CALLER THE CODE FOR    0576
*                                      PARAMETER LIST ERROR          */
*                                                                  0576
         MVC   RETCODE(4),@CF00591                                 0576
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE IKJEFFMT PARAMETER LIST                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0577
*   MSGTABLE=''X;                   /* ZERO OUT OWN PARMLIST FOR   0577
*                                      IKJEFF02 (DON'T CHANGE      0577
*                                      CALLER'S                      */
@RF00575 XC    MSGTABLE(56),MSGTABLE                               0577
*   LISTPTR=ADDR(MSGCSECT);                                        0578
         LA    @08,MSGCSECT                                        0578
         ST    @08,LISTPTR                                         0578
*   MTCPPL=ADDR(TMCT);              /* COPY INFO FROM CALLER PARMLIST*/
         L     @08,@PC00001+4                                      0579
         ST    @08,MTCPPL                                          0579
*   ECBPTR=ADDR(COMECB);                                           0580
         L     @08,@PC00001+8                                      0580
         ST    @08,ECBPTR                                          0580
*   MTHIGH=ON;                                                     0581
         OI    MTHIGH,B'10000000'                                  0581
*   MSGCSECT=ADDR(IKJEFF2M);        /* POINT TO IKJEFF02'S OWN     0582
*                                      MESSAGE CSECT                 */
         L     @08,@CV00072                                        0582
         ST    @08,MSGCSECT                                        0582
*   IF PTRPLER=OFF&PWTOSW=OFF&PWTPSW=OFF&PCPPLER=OFF&PLRCER=OFF THEN
         TM    PTRPLER,B'10000000'                                 0583
         BNZ   @RF00583                                            0583
         TM    PWTOSW(PARMPTR1),B'00100010'                        0583
         BNZ   @RF00583                                            0583
         TM    PCPPLER,B'00101000'                                 0583
         BNZ   @RF00583                                            0583
*                                   /* CHECK WHETHER ISSUE PUTLINE   */
*     DO;                                                          0584
*       MTPUTLSW=ON;                                               0585
         OI    MTPUTLSW,B'01000000'                                0585
*       IF PKEY1SW=ON THEN          /* KEEP SAME KEY SETTING AS    0586
*                                      CALLER HAD IN PARMLIST        */
         TM    PKEY1SW(PARMPTR1),B'00001000'                       0586
         BNO   @RF00586                                            0586
*         MTKEY1SW=ON;                                             0587
         OI    MTKEY1SW,B'00001000'                                0587
*     END;                                                         0588
*   ELSE                            /* ELSE DO WRITE-TO-PROGRAMMER   */
*     DO;                                                          0589
         B     @RC00583                                            0589
@RF00583 DS    0H                                                  0590
*       MTWTPSW=ON;                                                0590
         OI    MTWTPSW,B'00000010'                                 0590
*       MTDOMSW=ON;                 /* DON'T KEEP MESSAGE ON TUBE    */
         OI    MTDOMSW,B'01000000'                                 0591
*     END;                                                         0592
*   MTHEXSW=ON;                     /* MIGHT CONVERT MESSAGE ID TO 0593
*                                      PRINTABLE HEX                 */
@RC00583 OI    MTHEXSW,B'00010000'                                 0593
*   MSGID='M02D';                   /* SET UP GENERAL ERROR  @Z40GQKU
*                                      MESSAGE               @Z40GQKU*/
         MVC   MSGID(4),@CC00592                                   0594
*   RFY                                                            0595
*     REG1 RSTD;                                                   0595
*   REG1=ADDR(MSGTABLE);            /* STANDARD LINKAGE              */
         LA    REG1,MSGTABLE                                       0596
*   CALL IKJEFF02;                  /*                       @Z40GQKU*/
         L     @15,@CA00028                                        0597
         BALR  @14,@15                                             0597
*   MSGID='M02A';                   /* RESET GENERAL ERROR   @Z40GQKU
*                                      MESSAGE               @Z40GQKU*/
*                                                                  0598
         MVC   MSGID(4),@CC00593                                   0598
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP THE APPROPRIATE MESSAGE TEXT FOR EACH PARAMETER LIST   */
*   /* ERROR, AND ISSUE APPROPRIATE MESSAGE(S)                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0599
*   MTLEN(2)=LENGTH(TMSGID);        /* <INSERT MESSAGE ID>           */
         MVI   MTLEN+4,X'04'                                       0599
*   MTADDR(2)=ADDR(PMSGID);                                        0600
         LA    @08,PMSGID(,PARMPTR1)                               0600
         ST    @08,@TF00001                                        0600
         MVC   MTADDR+4(3),@TF00001+1                              0600
*   IF PMSGID(1)<'C1'X THEN         /* CONVERT MESSAGE ID TO       0601
*                                      PRINTABLE HEX IF IT DOESN'T 0601
*                                      START WITH CHARACTER OR NUMBER*/
         CLI   PMSGID(PARMPTR1),X'C1'                              0601
         BNL   @RF00601                                            0601
*     MTHIGHL(2)=ON;                                               0602
         OI    MTHIGHL+4,B'10000000'                               0602
*   IF MCPLER=ON×MIDPLER=ON THEN    /* THESE MESSAGE ID ERRORS ARE 0603
*                                      MUTUALLY EXCLUSIVE            */
@RF00601 TM    MCPLER,B'01010000'                                  0603
         BZ    @RF00603                                            0603
*     DO;                                                          0604
*       MTLEN(1)=LENGTH(IN02A1A);   /* UNABLE TO ISSUE MESSAGE       */
         MVI   MTLEN,X'07'                                         0605
*       MTADDR(1)=ADDR(IN02A1A);    /* 'WITH ID'                     */
         LA    @02,IN02A1A                                         0606
         ST    @02,@TF00001                                        0606
         MVC   MTADDR(3),@TF00001+1                                0606
*       IF MCPLER=ON THEN           /* 'ZERO POINTER TO MSG CSECT'   */
         TM    MCPLER,B'01000000'                                  0607
         BNO   @RF00607                                            0607
*         DO;                                                      0608
*           MTLEN(3)=LENGTH(IN02A3B);                              0609
         MVI   MTLEN+8,X'1D'                                       0609
*           MTADDR(3)=ADDR(IN02A3B);                               0610
         LA    @02,IN02A3B                                         0610
         ST    @02,@TF00001                                        0610
         MVC   MTADDR+8(3),@TF00001+1                              0610
*         END;                                                     0611
*       ELSE                        /* MUST BE MIDPLER ON            */
*         DO;                       /* 'ID NOT FOUND IN MSG CSECT'   */
         B     @RC00607                                            0612
@RF00607 DS    0H                                                  0613
*           MTLEN(3)=LENGTH(IN02A3D);                              0613
         MVI   MTLEN+8,X'1D'                                       0613
*           MTADDR(3)=ADDR(IN02A3D);                               0614
         LA    @02,IN02A3D                                         0614
         ST    @02,@TF00001                                        0614
         MVC   MTADDR+8(3),@TF00001+1                              0614
*         END;                                                     0615
*       CALL IKJEFF02;              /* ISSUE THIS ERROR MESSAGE      */
@RC00607 L     @15,@CA00028                                        0616
         BALR  @14,@15                                             0616
*     END;                                                         0617
*                                                                  0617
*   /*****************************************************************/
*   /*                                                               */
*   /* EXTRACT ERROR MESSAGE HANDLING                        @Z40GQKU*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0618
*   IF EXTRCTER=ON×                 /* IF EITHER BUFFER      @Z40GQKU*/
*       EXTRCTR2=ON×                /* MISSING OR ONLY SEC   @Z40GQKU*/
*       EXTRCTR3=ON THEN            /* BFR EXTRACT THE       @Z40GQKU
*                                      REQUESTED, THEN ERROR @Z40GQKU*/
@RF00603 TM    EXTRCTER,B'11100000'                                0618
         BZ    @RF00618                                            0618
*     DO;                                                          0619
*       MSGID='M02C';               /* SET POINTER TO        @Z40GQKU
*                                      MESSAGE TO PUT OUT    @Z40GQKU*/
         MVC   MSGID(4),@CC00595                                   0620
*       IF EXTRCTER=ON THEN         /* IF FIRST BUFFER       @Z40GQKU
*                                      MISSING               @Z40GQKU*/
         TM    EXTRCTER,B'10000000'                                0621
         BNO   @RF00621                                            0621
*         DO;                       /* THEN                  @Z40GQKU*/
*           MTLEN(1)=LENGTH(IN02A3H);/* SET LENGTH AND PTR TO      0623
*                                                            @Z40GQKU*/
         MVI   MTLEN,X'1A'                                         0623
*           MTADDR(1)=ADDR(IN02A3H);/* FIRST BFR ERR MSG     @Z40GQKU*/
         LA    @02,IN02A3H                                         0624
         ST    @02,@TF00001                                        0624
         MVC   MTADDR(3),@TF00001+1                                0624
*         END;                      /*                       @Z40GQKU*/
*       ELSE                        /* HOWEVER, IF NOT FIRST @Z40GQKU
*                                      THEN TRY FOR SECOND   @Z40GQKU*/
*         IF EXTRCTR2=ON THEN       /* IF SEC BUFFER NOT     @Z40GQKU
*                                      THERE SET THOSE PTRS  @Z40GQKU*/
         B     @RC00621                                            0626
@RF00621 TM    EXTRCTR2,B'01000000'                                0626
         BNO   @RF00626                                            0626
*           DO;                     /*                       @Z40GQKU*/
*             MTLEN(1)=LENGTH(IN02A3J);/* POINT TO ERROR     @Z40GQKU*/
         MVI   MTLEN,X'1B'                                         0628
*             MTADDR(1)=ADDR(IN02A3J);/* MESSAGE INSERTS     @Z40GQKU*/
         LA    @02,IN02A3J                                         0629
         ST    @02,@TF00001                                        0629
         MVC   MTADDR(3),@TF00001+1                                0629
*           END;                    /*                       @Z40GQKU*/
*         ELSE                      /* IF NEITHER ONE OF THE @Z40GQKU
*                                      ABOVE, REQUEST ERROR  @Z40GQKU*/
*           DO;                     /* THEN                  @Z40GQKU*/
         B     @RC00626                                            0631
@RF00626 DS    0H                                                  0632
*             MTLEN(1)=LENGTH(IN02A3K);/* POINT TO ONLY SEC  @Z40GQKU*/
         MVI   MTLEN,X'19'                                         0632
*             MTADDR(1)=ADDR(IN02A3K);/* LEVEL REQUEST ERR   @Z40GQKU*/
         LA    @02,IN02A3K                                         0633
         ST    @02,@TF00001                                        0633
         MVC   MTADDR(3),@TF00001+1                                0633
*           END;                    /*                       @Z40GQKU*/
*       CALL IKJEFF02;              /* PUT OUT MESSAGE       @Z40GQKU*/
@RC00626 DS    0H                                                  0635
@RC00621 L     @15,@CA00028                                        0635
         BALR  @14,@15                                             0635
*       MSGID='M02A';               /* RESET MESSAGE PTR     @Z40GQKU*/
         MVC   MSGID(4),@CC00593                                   0636
*     END;                          /*                       @Z40GQKU*/
*   IF OLDPLER=ON THEN              /* 'INCOMPATIBLE PARAMETERS'     */
@RF00618 TM    OLDPLER,B'00000010'                                 0638
         BNO   @RF00638                                            0638
*     DO;                                                          0639
*       MTLEN(1)=LENGTH(IN02A1D);   /* UNABLE TO ISSUE MESSAGE       */
         MVI   MTLEN,X'13'                                         0640
*       MTADDR(1)=ADDR(IN02A1D);    /* 'WITH A SECOND LEVEL'         */
         LA    @02,IN02A1D                                         0641
         ST    @02,@TF00001                                        0641
         MVC   MTADDR(3),@TF00001+1                                0641
*       MTLEN(3)=LENGTH(IN02A3F);                                  0642
         MVI   MTLEN+8,X'40'                                       0642
*       MTADDR(3)=ADDR(IN02A3F);                                   0643
         LA    @02,IN02A3F                                         0643
         ST    @02,@TF00001                                        0643
         MVC   MTADDR+8(3),@TF00001+1                              0643
*       CALL IKJEFF02;              /* ISSUE THIS ERROR MESSAGE      */
         L     @15,@CA00028                                        0644
         BALR  @14,@15                                             0644
*     END;                                                         0645
*   IF PCPPLER=ON THEN              /* IF ZERO CPPL PTR WHEN PUTLINE */
@RF00638 TM    PCPPLER,B'00100000'                                 0646
         BNO   @RF00646                                            0646
*     DO;                                                          0647
*       MTLEN(1)=LENGTH(IN02A1B);   /* UNABLE TO ISSUE MESSAGE       */
         MVI   MTLEN,X'0B'                                         0648
*       MTADDR(1)=ADDR(IN02A1B);    /* 'TO TERMINAL'                 */
         LA    @02,IN02A1B                                         0649
         ST    @02,@TF00001                                        0649
         MVC   MTADDR(3),@TF00001+1                                0649
*       MTLEN(3)=LENGTH(IN02A3C);   /* ERROR DESCRIPTION             */
         MVI   MTLEN+8,X'25'                                       0650
*       MTADDR(3)=ADDR(IN02A3C);                                   0651
         LA    @02,IN02A3C                                         0651
         ST    @02,@TF00001                                        0651
         MVC   MTADDR+8(3),@TF00001+1                              0651
*       CALL IKJEFF02;              /* REENTER 02 TO PROCESS MESSAGE */
         L     @15,@CA00028                                        0652
         BALR  @14,@15                                             0652
*     END;                          /* (NOTE OTHER ERRORS COULD HAVE
*                                      BEEN DETECTED, SO DON'T HAVE
*                                      AN ELSE STATEMENT)            */
*   IF PTRPLER=ON THEN              /* 'UNABLE TO ISSUE MESSAGE'     */
@RF00646 TM    PTRPLER,B'10000000'                                 0654
         BNO   @RF00654                                            0654
*     DO;                           /* BECAUSE                       */
*       MTLEN(3)=LENGTH(IN02A3A);   /* 'ZERO PARAMETER LIST PTR'     */
         MVI   MTLEN+8,X'32'                                       0656
*       MTADDR(3)=ADDR(IN02A3A);                                   0657
         LA    @02,IN02A3A                                         0657
         ST    @02,@TF00001                                        0657
         MVC   MTADDR+8(3),@TF00001+1                              0657
*       CALL IKJEFF02;              /* ISSUE THIS ERROR MESSAGE      */
         L     @15,@CA00028                                        0658
         BALR  @14,@15                                             0658
*     END;                                                         0659
*                                                                  0659
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP AND ISSUE PUTGET ERROR MESSAGES                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0660
*   IF PGRCER=ON THEN               /* 'UNABLE TO ISSUE MESSAGE      */
@RF00654 TM    PGRCER,B'00000100'                                  0660
         BNO   @RF00660                                            0660
*     DO;                           /* WITH PROMPT FOR REPLY+'       */
*       MSGID='M02B';                                              0662
         MVC   MSGID(4),@CC00596                                   0662
*       MTLEN(1)=LENGTH(PGRETCD);   /* INSERT PUTGET RETURN CODE     */
         MVI   MTLEN,X'04'                                         0663
*       MTADDR(1)=ADDR(PGRETCD);                                   0664
         LA    @02,PGRETCD                                         0664
         ST    @02,@TF00001                                        0664
         MVC   MTADDR(3),@TF00001+1                                0664
*       MTHIGHL(1)=ON;                                             0665
         OI    MTHIGHL,B'10000000'                                 0665
*       CALL IKJEFF02;              /* ISSUE THIS ERROR MESSAGE      */
         L     @15,@CA00028                                        0666
         BALR  @14,@15                                             0666
*       MSGID='M02A';               /* CHANGE ID BACK, IN CASE HAD 0667
*                                      PUTLINE ERROR, TOO            */
         MVC   MSGID(4),@CC00593                                   0667
*     END;                                                         0668
*                                                                  0668
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP AND ISSUE PUTLINE ERROR MESSAGE                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0669
*   IF PLRCER=ON THEN               /* UNABLE TO ISSUE MESSAGE       */
@RF00660 TM    PLRCER,B'00001000'                                  0669
         BNO   @RF00669                                            0669
*     DO;                                                          0670
*       MTLEN(1)=LENGTH(IN02A1B);   /* 'TO TERMINAL'                 */
         MVI   MTLEN,X'0B'                                         0671
*       MTADDR(1)=ADDR(IN02A1B);    /* BECAUSE                       */
         LA    @02,IN02A1B                                         0672
         ST    @02,@TF00001                                        0672
         MVC   MTADDR(3),@TF00001+1                                0672
*       MTLEN(3)=LENGTH(IN02A3E);   /* 'PUTLINE WAS UNSUCCESSFUL'    */
         MVI   MTLEN+8,X'18'                                       0673
*       MTADDR(3)=ADDR(IN02A3E);                                   0674
         LA    @02,IN02A3E                                         0674
         ST    @02,@TF00001                                        0674
         MVC   MTADDR+8(3),@TF00001+1                              0674
*       CALL IKJEFF02;              /* ISSUE THIS ERROR MESSAGE      */
*                                                                  0675
         L     @15,@CA00028                                        0675
         BALR  @14,@15                                             0675
*       /*************************************************************/
*       /*                                                           */
*       /* ALSO CALL IKJEFF19 TO ISSUE PUTLINE FAILURE MESSAGE       */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0676
*       GFPARMS=''X;                /* ZERO THE PARAMETER LIST TO  0676
*                                      IKJEFF19 GNRLFAIL ROUTINE     */
         XC    GFPARMS(44),GFPARMS                                 0676
*       GFCALLID=GFPUTL;            /* HAVE IKJEFF19 ISSUE FAILURE 0677
*                                      MESSAGE ANALYZING BAD PUTLINE
*                                      RETURN CODE                   */
         MVC   GFCALLID(2),@CH00235                                0677
*       GFRCODE=RETCODE;            /* PASS THE RETURN CODE AS A   0678
*                                      PARAMETER                     */
         L     @02,RETCODE                                         0678
         ST    @02,GFRCODE                                         0678
*       GFWTPSW=ON;                 /* CAN'T ISSUE THE MESSAGE AS A
*                                      PUTLINE, SO ISSUE WRITE TO  0679
*                                      PROGRAMMER (DON'T NEED GFCPPLP
*                                      OR GFKEYNO8 SET)              */
         OI    GFWTPSW,B'00100000'                                 0679
*       GFPGMNL=LENGTH(NAME02);     /* WILL INSERT 'IKJEFF02'        */
         MVC   GFPGMNL(2),@CH00078                                 0680
*       GFPGMNP=ADDR(NAME02);                                      0681
         LA    @02,NAME02                                          0681
         ST    @02,GFPGMNP                                         0681
*       GF02PTR=ADDR(IKJEFF02);     /* PASS OWN ADDRESS              */
         L     @02,@CA00028                                        0682
         ST    @02,GF02PTR                                         0682
*       TEMP=ADDR(GFPARMS);         /* STANDARD LINKAGE              */
         LA    @02,GFPARMS                                         0683
         ST    @02,TEMP                                            0683
*       REG1=ADDR(TEMP);                                           0684
         LA    REG1,TEMP                                           0684
*       GEN(LINK EP=IKJEFF19);      /* IKJEFF19 GNRLFAIL ROUTINE WILL
*                                      ISSUE FAILURE MESSAGE GIVING
*                                      MEANING OF THE BAD PUTLINE  0685
*                                      R.C.                          */
         LINK EP=IKJEFF19
*     END;                          /* DON'T USE IKJEFF19 R.C.       */
*   RFY                                                            0687
*     REG1 UNRSTD;                                                 0687
@RF00669 DS    0H                                                  0688
*   IF PGRCER=ON THEN               /* RETURN PUTGET ERROR CODE, NOT
*                                      PUTLINE'S                     */
         TM    PGRCER,B'00000100'                                  0688
         BNO   @RF00688                                            0688
*     RETCODE=PGRETCD;                                             0689
         L     @02,PGRETCD                                         0689
         ST    @02,RETCODE                                         0689
*   END EMSGPROC;                                                  0690
@EL00002 DS    0H                                                  0690
@EF00002 DS    0H                                                  0690
@ER00002 LM    @14,@12,@SA00002                                    0690
         BR    @14                                                 0690
*COPYONE:                                                          0691
*   PROC OPTIONS(NOSAVEAREA,RETREG,SAVE(REG14));/*           @Z40GQKU*/
*                                                                  0691
COPYONE  ST    @14,12(,@13)                                        0691
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS INTERNAL PROCEDURE EXTRACTS                      @Z40GQKU*/
*   /* FIRST LEVEL MESSAGE TO USERS BUFFER                   @Z40GQKU*/
*   /* CHECK IF FIRST BUFFER BIGGER THAN MESSAGE             @Z40GQKU*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0692
*   IF PEXTRLEN>=BLDLEN THEN        /* COPY WHOSE MSG IF BFR @Z40GQKU*/
         LH    @08,BLDLEN                                          0692
         MVC   @ZT00003+3(1),PEXTRLEN(PARMPTR1)                    0692
         C     @08,@ZT00003                                        0692
         BH    @RF00692                                            0692
*     EXTRBUF(1:BLDLEN)=BLDBUF(1:BLDLEN);/* LARGE ENOUGH     @Z40GQKU*/
         L     @06,PEXTRBUF-1(,PARMPTR1)                           0693
         BCTR  @08,0                                               0693
         EX    @08,@SM00648                                        0693
*   ELSE                            /* OTHERWISE             @Z40GQKU*/
*     DO;                           /* TURN ON TRUNCATED MSG @Z40GQKU*/
         B     @RC00692                                            0694
@RF00692 DS    0H                                                  0695
*       EXTRBUF(1:PEXTRLEN)=BLDBUF(1:PEXTRLEN);/* AS POSSIBLE@Z40GQKU*/
         L     @08,PEXTRBUF-1(,PARMPTR1)                           0695
         SLR   @06,@06                                             0695
         IC    @06,PEXTRLEN(,PARMPTR1)                             0695
         BCTR  @06,0                                               0695
         EX    @06,@SM00650                                        0695
*     END;                          /* TO BFR                @Z40GQKU*/
*   SWEXTONE=ON;                    /* SAY FIRST BFR COPIED  @Z40GQKU*/
@RC00692 OI    SWEXTONE,B'00000010'                                0697
*   IF PEXTRCON=OFF&                /* ONLY EXTRACT AND            0698
*                                      SECOND@Z40GQKU                */
*       (SWEXTRC2=OFF×SWEXTTWO=ON) THEN/* COPIED THEN        @Z40GQKU*/
         TM    PEXTRCON(PARMPTR1),B'00000100'                      0698
         BNZ   @RF00698                                            0698
         TM    SWEXTTWO,B'00000001'                                0698
         BNZ   @RT00698                                            0698
         TM    SWEXTRC2,B'00000100'                                0698
         BO    @RF00698                                            0698
@RT00698 DS    0H                                                  0699
*     RETURN TO RETLABEL;           /* EXIT MODULE           @Z40GQKU*/
         LA    @14,RETLABEL                                        0699
         BR    @14                                                 0699
*   END;                            /* OTHERWISE GO BACK     @Z40GQKU*/
@EL00003 DS    0H                                                  0700
@EF00003 DS    0H                                                  0700
@ER00003 L     @14,12(,@13)                                        0700
         BR    @14                                                 0700
*COPYTWO:                                                          0701
*   PROC OPTIONS(NOSAVEAREA,RETREG,SAVE(REG14));/*           @Z40GQKU*/
*                                                                  0701
COPYTWO  ST    @14,12(,@13)                                        0701
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS INTERNAL PROCEDURE EXTRACTS                      @Z40GQKU*/
*   /* SECOND LEVEL MESSAGE TO USERS BUFFER                  @Z40GQKU*/
*   /* CHECK IF SECOND BUFFER BIGGER THAN MESSAGE@Z40GQKU            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0702
*   IF PEXTRLN2>=BLDLEN THEN        /* IF BFR LONG ENOUGH          0702
*                                      COPY@Z40GQKU                  */
         LH    @08,BLDLEN                                          0702
         MVC   @ZT00003+3(1),PEXTRLN2(PARMPTR1)                    0702
         C     @08,@ZT00003                                        0702
         BH    @RF00702                                            0702
*     EXTRBF2(1:BLDLEN)=BLDBUF(1:BLDLEN);/* MESSAGE WHOLE    @Z40GQKU*/
         L     @06,PEXTRBF2-1(,PARMPTR1)                           0703
         BCTR  @08,0                                               0703
         EX    @08,@SM00652                                        0703
*   ELSE                            /* IF NOT THEN ONLY COPY @Z40GQKU*/
*     DO;                           /* AS MUCH AS FITS IN    @Z40GQKU*/
         B     @RC00702                                            0704
@RF00702 DS    0H                                                  0705
*       EXTRBF2(1:PEXTRLN2)=BLDBUF(1:PEXTRLN2);/* FLAG FOR   @Z40GQKU*/
         L     @08,PEXTRBF2-1(,PARMPTR1)                           0705
         SLR   @06,@06                                             0705
         IC    @06,PEXTRLN2(,PARMPTR1)                             0705
         BCTR  @06,0                                               0705
         EX    @06,@SM00654                                        0705
*     END;                          /* LATER. EITHER CASE    @Z40GQKU*/
*   SWEXTTWO=ON;                    /* SAY SEC BFR COPIED    @Z40GQKU*/
@RC00702 OI    SWEXTTWO,B'00000001'                                0707
*   IF PEXTRCON=OFF&                /* ONLY EXTRACT AND FIRST      0708
*                                                            @Z40GQKU*/
*       SWEXTONE=ON THEN            /* ALSO DONE THEN        @Z40GQKU*/
         TM    PEXTRCON(PARMPTR1),B'00000100'                      0708
         BNZ   @RF00708                                            0708
         TM    SWEXTONE,B'00000010'                                0708
         BNO   @RF00708                                            0708
*     RETURN TO RETLABEL;           /* GET OUT OF MODULE     @Z40GQKU*/
         LA    @14,RETLABEL                                        0709
         BR    @14                                                 0709
*   END;                            /* OTHERWISE RETURN      @Z40GQKU*/
@EL00004 DS    0H                                                  0710
@EF00004 DS    0H                                                  0710
@ER00004 L     @14,12(,@13)                                        0710
         BR    @14                                                 0710
*COPYSPCL:                                                         0711
*   PROC OPTIONS(NOSAVEAREA,RETREG,SAVE(REG14));/*           @Z40GQKU*/
*                                                                  0711
COPYSPCL ST    @14,12(,@13)                                        0711
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS INTERNAL PROCEDURE HANDLES SPECIAL CASE          @Z40GQKU*/
*   /* SECOND LEVEL MESSAGE. MESSAGE ALREADY SET UP          @Z40GQKU*/
*   /* IN O.L.D. AND HAS ONLY A PRIMARY SEGMENT.             @Z40GQKU*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0712
*   IF PEXTRLN2>=OSEGLEN THEN       /* BIG ENOUGH THEN       @Z40GQKU*/
         L     @08,POLDPTR(,PARMPTR1)                              0712
         L     @08,OLDSEGP(,@08)                                   0712
         LH    @06,OSEGLEN(,@08)                                   0712
         MVC   @ZT00003+3(1),PEXTRLN2(PARMPTR1)                    0712
         C     @06,@ZT00003                                        0712
         BH    @RF00712                                            0712
*     EXTRBF2(1:OSEGLEN)=OLDMSEG(1:OSEGLEN);/* MOVE IT       @Z40GQKU*/
         L     @05,PEXTRBF2-1(,PARMPTR1)                           0713
         BCTR  @06,0                                               0713
         EX    @06,@SM00656                                        0713
*   ELSE                            /* OR IF BFR SMALL       @Z40GQKU*/
*     DO;                           /* THEN ONLY MOVE        @Z40GQKU*/
         B     @RC00712                                            0714
@RF00712 DS    0H                                                  0715
*       EXTRBF2(1:PEXTRLN2)=OLDMSEG(1:PEXTRLN2);/* ENOUGH    @Z40GQKU*/
         L     @08,PEXTRBF2-1(,PARMPTR1)                           0715
         SLR   @06,@06                                             0715
         IC    @06,PEXTRLN2(,PARMPTR1)                             0715
         BCTR  @06,0                                               0715
         L     @05,POLDPTR(,PARMPTR1)                              0715
         L     @05,OLDSEGP(,@05)                                   0715
         EX    @06,@SM00658                                        0715
*     END;                          /*                       @Z40GQKU*/
*   IF OSEGLEN>14&PEXTRLN2>14 THEN  /* IF MSG WILL HOLD      @Z40GQKU*/
@RC00712 L     @08,POLDPTR(,PARMPTR1)                              0717
         L     @08,OLDSEGP(,@08)                                   0717
         LH    @08,OSEGLEN(,@08)                                   0717
         C     @08,@CF00579                                        0717
         BNH   @RF00717                                            0717
         CLI   PEXTRLN2(PARMPTR1),14                               0717
         BNH   @RF00717                                            0717
*     EXTRBF2(5:14)=BLDMSG(1:10);   /* MSG ID, MOVE IT IN    @Z40GQKU*/
         L     @08,PEXTRBF2-1(,PARMPTR1)                           0718
         MVC   EXTRBF2+4(10,@08),BLDMSG                            0718
*   SWEXTTWO=ON;                    /*                       @Z40GQKU*/
@RF00717 OI    SWEXTTWO,B'00000001'                                0719
*   END;                            /*                       @Z40GQKU*/
@EL00005 DS    0H                                                  0720
@EF00005 DS    0H                                                  0720
@ER00005 L     @14,12(,@13)                                        0720
         BR    @14                                                 0720
*                                                                  0721
*/********************************************************************/
*/*                                                                  */
*/* WTODOMP INTERNAL PROCEDURE                                       */
*/*   - COMMON CODE TO ISSUE WTO (COULD HAVE WRITE TO PROGRAMMER     */
*/*       ROUTCDE) AND DOM (IF REQUESTED).                           */
*/*   - REGISTER 8 MUST BE SET BEFORE CALL WTODOMP, AND WPL MUST BE  */
*/*       BASED(REG8).                                               */
*/*                                                                  */
*/********************************************************************/
*                                                                  0721
*WTODOMP:                                                          0721
*   PROC OPTIONS(SAVE(REG14),RETREG,NOSAVEAREA);                   0721
WTODOMP  ST    @14,12(,@13)                                        0721
*   RFY                                                            0722
*    (REG1,                                                        0722
*     REG8) RSTD;                   /* REGISTER 8 POINTS TO WPL (WTO
*                                      PARAMETER LIST)               */
*                                                                  0722
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE THE WTO (AND DOM) - LOOP IF MESSAGE WON'T FIT ON ONE WTO*/
*   /* LINE                                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0723
*   LVARPTR=REG8+WPLLGH;            /* POINT TO ROUTING AND        0723
*                                      DESCRIPTOR CODES, WHICH FOLLOW
*                                      THE MESSAGE TEXT              */
         LR    LVARPTR,REG8                                        0723
         AH    LVARPTR,WPLLGH(,REG8)                               0723
*   BLDRTDEC=VARIABLE(1:4);         /* SAVE CODES HERE IN CASE     0724
*                                      TOO-LONG MESSAGE              */
         MVC   BLDRTDEC(4),VARIABLE(LVARPTR)                       0724
*   TEMP=1;                         /* TEMP IS WTO LOOP CONTROLLER   */
         MVC   TEMP(4),@CF00035                                    0725
*   DO WHILE TEMP^=0;               /* LOOP TO ISSUE WTO('S)/DOM('S) */
         B     @DE00726                                            0726
@DL00726 DS    0H                                                  0727
*     IF WPLLGH>MAXWTOLN+4 THEN     /* IF TOO-LONG MESSAGE PLUS    0727
*                                      HEADER THEN MUST ISSUE AS   0727
*                                      SEVERAL WTP'S (WTO MESSAGES 0727
*                                      ARE TRUNCATED)                */
         LA    @15,128                                             0727
         LH    @14,WPLLGH(,REG8)                                   0727
         CR    @14,@15                                             0727
         BNH   @RF00727                                            0727
*       DO;                                                        0728
*         TEMP=WPLLGH-MAXWTOLN;     /* REMEMBER HOW MUCH TEXT MUST BE
*                                      ISSUED IN LATER WTO('S)       */
         SL    @14,@CF00054                                        0729
         ST    @14,TEMP                                            0729
*         WPLLGH=MAXWTOLN+4;        /* WILL ISSUE THIS WTO FOR     0730
*                                      MAXIMUM LENGTH (4 BYTES IS FOR
*                                      HEADER)                       */
         STH   @15,WPLLGH(,REG8)                                   0730
*         LVARPTR=REG8+WPLLGH;      /* POINT TO END OF CURRENT     0731
*                                      MESSAGE LINE                  */
         ALR   @15,REG8                                            0731
         LR    LVARPTR,@15                                         0731
*         SAVETEXT=VARIABLE(1:4);   /* SAVE TEXT THAT WILL BE      0732
*                                      REPLACED WITH BLDRTDEC        */
         MVC   SAVETEXT(4),VARIABLE(LVARPTR)                       0732
*         VARIABLE(1:4)=BLDRTDEC;   /* WTO TEXT MUST BE FOLLOWED BY
*                                      ROUTING AND DESCR. CODES      */
         MVC   VARIABLE(4,LVARPTR),BLDRTDEC                        0733
*       END;                                                       0734
*     ELSE                          /* ZEROING TEMP CAUSES EXIT FROM
*                                      LOOP AFTER ISSUE THE WTO      */
*       TEMP=0;                                                    0735
         B     @RC00727                                            0735
@RF00727 SLR   @00,@00                                             0735
         ST    @00,TEMP                                            0735
*     GEN(WTO   MF=(E,(REG8)));     /* ISSUE WRITE TO OPERATOR MACRO */
@RC00727 DS    0H                                                  0736
         WTO   MF=(E,(REG8))
*     IF PDOMSW=ON×WTPOVERR=ON THEN                                0737
         TM    PDOMSW(PARMPTR1),B'01000000'                        0737
         BO    @RT00737                                            0737
         TM    WTPOVERR,B'00000001'                                0737
         BNO   @RF00737                                            0737
@RT00737 DS    0H                                                  0738
*       GEN(DOM   MSG=(1));         /* DELETE OPERATOR MESSAGE MACRO
*                                      (USE TO ERASE WTP FROM      0738
*                                      OPERATOR'S DISPLAY TUBE) -  0738
*                                      REG1 HAS ID OF MESSAGE FROM 0738
*                                      WTO                           */
*                                                                  0738
         DOM   MSG=(1)
*     /***************************************************************/
*     /*                                                             */
*     /* IF MUST ISSUE ANOTHER WTO LINE, THEN SHIFT THE REMAINING    */
*     /* TEXT OVER IN BUFFER (IF THE MAXIMUM MESSAGE LENGTH CHANGES  */
*     /* FROM 256, WHERE 256=LENGTH(BLDMSG), THEN MUST CHANGE TO MOVE*/
*     /* LONG)                                                       */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0739
*     IF TEMP>0 THEN                                               0739
@RF00737 L     @15,TEMP                                            0739
         LTR   @15,@15                                             0739
         BNP   @RF00739                                            0739
*       DO;                                                        0740
*         VARIABLE(1:4)=SAVETEXT;   /* LVARPTR POINTS TO END OF LAST
*                                      WTO LINE - NOW REPLACE CODES
*                                      WITH SAVED TEXT               */
         MVC   VARIABLE(4,LVARPTR),SAVETEXT                        0741
*         WPLLGH=TEMP;              /* GET REMAINING LENGTH (USE THIS
*                                      LENGTH FOR MOVE - HAS 4 BYTES
*                                      FOR HEADER, BUT USE THE 4   0742
*                                      BYTES TO MOVE ROUTINE + DESC.
*                                      CODES, WHICH ARE NEEDED FOR 0742
*                                      LAST WTO)                     */
         STH   @15,WPLLGH(,REG8)                                   0742
*         LVARPTR=ADDR(WPLTXT);     /* POINT TO BEGINNING OF WTO TEXT*/
         LA    LVARPTR,WPLTXT(,REG8)                               0743
*         WORKPTR=LVARPTR+MAXWTOLN; /* POINT TO UNISSUED TEXT        */
         LA    WORKPTR,124                                         0744
         ALR   WORKPTR,LVARPTR                                     0744
*         LVARPTR->VARIABLE(1:TEMP)=WORKPTR->VARIABLE(1:TEMP);/* MOVE
*                                      REST OF TEXT OVER IN BUFFER   */
         BCTR  @15,0                                               0745
         EX    @15,@SM00660                                        0745
*       END;                                                       0746
*   END;                            /* END OF DO WHILE LOOP OF WTO'S */
@RF00739 DS    0H                                                  0747
@DE00726 L     @00,TEMP                                            0747
         LTR   @00,@00                                             0747
         BNZ   @DL00726                                            0747
*   RFY                                                            0748
*    (REG1,                                                        0748
*     REG8) UNRSTD;                                                0748
*   END WTODOMP;                                                   0749
@EL00006 DS    0H                                                  0749
@EF00006 DS    0H                                                  0749
@ER00006 L     @14,12(,@13)                                        0749
         BR    @14                                                 0749
*   END IKJEFF02                                                   0750
*                                                                  0750
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IEZWPL  )                                       */
*/*%INCLUDE SYSLIB  (IKJCPPL )                                       */
*/*%INCLUDE SYSLIB  (IKJEFFGF)                                       */
*/*%INCLUDE SYSLIB  (IKJEFFMT)                                       */
*                                                                  0750
*       ;                                                          0750
@DATA    DS    0H
@CH00078 DC    H'8'
@CH00235 DC    H'22'
@SM00632 MVC   JOBINSRT(0),VARIABLE(LVARPTR)
@SM00634 MVC   0(0,@01),VARIABLE(@14)
@SM00636 MVC   0(0,@08),VARIABLE(LVARPTR)
@SM00638 MVC   0(0,@08),CMSGPART(CSECTP)
@SM00641 MVC   COREMSG(0,@14),BLDBUF
@SM00644 MVC   BLDBUF(0),COREMSG(@08)
@SM00646 MVC   PRETEXT(0,REG1),INTEXT(@06)
@SM00648 MVC   EXTRBUF(0,@06),BLDBUF
@SM00650 MVC   EXTRBUF(0,@08),BLDBUF
@SM00652 MVC   EXTRBF2(0,@06),BLDBUF
@SM00654 MVC   EXTRBF2(0,@08),BLDBUF
@SM00656 MVC   EXTRBF2(0,@05),OLDMSEG(@08)
@SM00658 MVC   EXTRBF2(0,@08),OLDMSEG(@05)
@SM00660 MVC   VARIABLE(0,LVARPTR),VARIABLE(WORKPTR)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    3F
@SA00002 DS    15F
@TF00001 DS    F
@ZTEMPS  DS    0F
@ZT00002 DC    F'0'
@ZT00003 DC    F'0'
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
IKJEFF02 CSECT
         DS    0F
@CF00035 DC    F'1'
@CF00050 DC    F'2'
@CF00225 DC    F'4'
@CF00210 DC    F'5'
@CF00036 DC    F'11'
@CF00579 DC    F'14'
@CF00527 DC    F'20'
@CF00591 DC    F'76'
@CF00054 DC    F'124'
@CF00609 DC    F'260'
@CF00611 DC    F'264'
@CF00519 DC    XL4'FF000000'
@CF00583 DC    XL4'01000000'
@CF00538 DC    XL4'FFFF'
@DATD    DSECT
         DS    0D
RETCODE  DS    A
PGRETCD  DS    A
TEMP     DS    A
LOCALECB DS    A
JOBIDEND DS    A
LFTPAREN DS    A
OUTADDR  DS    A
COREGOTP DS    A
CORESAVE DS    A
LOOPCT   DS    F
LLENGTH  DS    AL1
         ORG   LLENGTH
LCONVRT  DS    BL1
         ORG   LLENGTH+1
INTSWS   DS    AL1
         ORG   INTSWS
SWMULTLV DS    BL1
SWNFIRST EQU   INTSWS+0
SWLSTMSG EQU   INTSWS+0
SWHAVHEX EQU   INTSWS+0
SWEXTRCT EQU   INTSWS+0
SWEXTRC2 EQU   INTSWS+0
SWEXTONE EQU   INTSWS+0
SWEXTTWO EQU   INTSWS+0
         ORG   INTSWS+1
         DS    CL2
GFPARMS  DS    CL44
         ORG   GFPARMS
GFCBPTR  DS    AL4
GFRCODE  DS    FL4
GF02PTR  DS    AL4
GFCALLID DS    FL2
GFBITS   DS    BL1
         ORG   GFBITS
GFKEYN08 DS    BL1
GFSUBSYS EQU   GFBITS+0
GFWTPSW  EQU   GFBITS+0
@NM00002 EQU   GFBITS+0
         ORG   GFPARMS+15
@NM00003 DS    AL1
GFCPPLP  DS    AL4
GFECBP   DS    AL4
GFDSNLEN DS    FL2
GFPGMNL  DS    FL2
GFDSNP   DS    AL4
GFPGMNP  DS    AL4
@NM00004 DS    AL4
@NM00005 DS    AL4
         ORG   GFPARMS+44
MSGTABLE DS    CL56
         ORG   MSGTABLE
LISTPTR  DS    AL4
TMCTPTR  DS    AL4
         ORG   TMCTPTR
MTCPPL   DS    AL4
         ORG   MSGTABLE+8
ECBPTR   DS    AL4
@NM00006 DS    AL4
         ORG   @NM00006
MTHIGH   DS    BL1
         ORG   MSGTABLE+16
MSGCSECT DS    AL4
SW       DS    AL1
         ORG   SW
MTNOIDSW DS    BL1
MTPUTLSW EQU   SW+0
MTWTOSW  EQU   SW+0
MTHEXSW  EQU   SW+0
MTKEY1SW EQU   SW+0
MTJOBISW EQU   SW+0
MTWTPSW  EQU   SW+0
MTNHEXSW EQU   SW+0
         ORG   MSGTABLE+21
RETMSG   DS    AL3
SW2      DS    AL1
         ORG   SW2
MT2OLDSW DS    BL1
MTDOMSW  EQU   SW2+0
MTNOXQSW EQU   SW2+0
MTNPLMSW EQU   SW2+0
MTPGMSW  EQU   SW2+0
@NM00007 EQU   SW2+0
         ORG   MSGTABLE+25
@NM00008 DS    AL3
MTOLDPTR DS    AL4
@NM00009 DS    AL4
@NM00010 DS    AL4
MSGID    DS    CL4
MTINSRTS DS    CL12
         ORG   MTINSRTS
MTINSRT  DS    CL4
         ORG   MTINSRT+0
MTLEN    DS    AL1
         ORG   MTLEN+0
MTHIGHL  DS    BL1
         ORG   MTINSRT+1
MTADDR   DS    AL3
         ORG   MSGTABLE+56
SAVETEXT DS    CL4
BLDBUF   DS    CL264
         ORG   BLDBUF
BLDAREA  DS    CL260
         ORG   BLDAREA
BLDHDR   DS    CL4
         ORG   BLDHDR
BLDLEN   DS    FL2
BLDOFF   DS    FL2
         ORG   BLDAREA+4
BLDMSG   DS    CL256
         ORG   BLDBUF+260
BLDRTDEC DS    CL4
         ORG   BLDBUF+264
TMSGID   DS    CL4
NBPART   DS    CL4
         ORG   NBPART
@NM00015 DS    BL3
NBPARTS  DS    BL1
         ORG   NBPART+4
SAVCODE  DS    CL4
         ORG   SAVCODE
@NM00016 DS    CL1
SAVCODE3 DS    CL3
         ORG   SAVCODE3
@NM00017 DS    CL1
SAVCODE2 DS    CL2
         ORG   SAVCODE2
@NM00018 DS    CL1
SAVCODE1 DS    CL1
         ORG   SAVCODE+4
         DS    CL6
UNPKAREA DS    CL18
         ORG   UNPKAREA
UNPKHDR  DS    CL2
UNPK     DS    CL16
         ORG   UNPKAREA+18
JOBINSRT DS    CL18
PARENSW  DS    BL1
         DS    CL1
SAVEPAR  DS    CL16
         ORG   SAVEPAR
@NM00019 DS    CL12
RTNPTR   DS    AL4
         ORG   RTNPTR
FILLER   DS    BL1
INBUFP   DS    AL3
         ORG   SAVEPAR+16
PUTPTRS  DS    CL16
         ORG   PUTPTRS
PUPTP    DS    AL4
PECTP    DS    AL4
PECBP    DS    AL4
PPARMP   DS    AL4
         ORG   PUTPTRS+16
PUTPARM  DS    CL8
         ORG   PUTPARM
PUTLEN   DS    FL4
PUTADDR  DS    AL4
         ORG   PUTPARM+8
ERRORSWS DS    BL2
         ORG   ERRORSWS
PTRPLER  DS    BL1
MCPLER   EQU   ERRORSWS+0
PCPPLER  EQU   ERRORSWS+0
MIDPLER  EQU   ERRORSWS+0
PLRCER   EQU   ERRORSWS+0
PGRCER   EQU   ERRORSWS+0
OLDPLER  EQU   ERRORSWS+0
WTPOVERR EQU   ERRORSWS+0
EXTRCTER DS    BL1
EXTRCTR2 EQU   ERRORSWS+1
EXTRCTR3 EQU   ERRORSWS+1
@NM00024 EQU   ERRORSWS+1
         ORG   ERRORSWS+2
IKJEFF02 CSECT
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
@CA00028 DC    A(IKJEFF02)
@CV00072 DC    V(IKJEFF2M)
         DS    0D
@CC00525 DC    C'    '
@CC00592 DC    C'M02D'
@CC00593 DC    C'M02A'
@CC00595 DC    C'M02C'
@CC00596 DC    C'M02B'
@CC00051 DC    C'X'''
@CB00519 DC    X'FF000000'
@CB00566 DC    X'10004000'
@CB00567 DC    X'02000020'
@CB00578 DC    X'00000001'
@CB00565 DC    X'8000'
@CB00585 DC    B'0000000000000000'
ALPHA    DC    CL16'0123456789ABCDEF'
IN02A1A  DC    CL7'WITH ID'
IN02A1B  DC    CL11'TO TERMINAL'
IN02A1D  DC    CL19'WITH A SECOND LEVEL'
INSTDASH DC    CL1'-'
IN02A3A  DC    CL50'ZERO PARAMETER LIST PTR (REG. 1 OR PTR TO MSGLIST)'
IN02A3B  DC    CL29'ZERO POINTER TO MESSAGE CSECT'
IN02A3C  DC    CL37'ZERO CPPL POINTER WHEN PUTLINE/PUTGET'
IN02A3D  DC    CL29'ID NOT FOUND IN MESSAGE CSECT'
IN02A3E  DC    CL24'PUTLINE WAS UNSUCCESSFUL'
IN02A3F  DC    CL64'INCOMPATIBLE PARAMETERS (NEED MTOLDPTR NONZERO WHENC
                MT2OLDSW ON)'
IN02A3H  DC    CL26'FIRST BUFFER NOT SUPPLIED,'
IN02A3J  DC    CL27'SECOND BUFFER NOT SUPPLIED,'
IN02A3K  DC    CL25'FIRST BUFFER LENGTH ZERO,'
NAME02   DC    CL8'IKJEFF02'
PATCH    DC    17CL3'ZAP'
IKJEFF02 CSECT
*                                       /* NON-REENTRANT DC'S        */
PUTGETLL PUTGET  MF=L                  LIST FORMAT OF PUTGET
PUTLL    PUTLINE MF=L                  LIST FORMAT OF PUTLINE
IKJEFF02 CSECT
*                                      /* COMMENT SO PLS2 CMPLR NOT SCA
IKJEFF2M CSECT
         PRINT OFF
**
**  MESSAGE   DETECTED   ISSUED     LOCATED    PROGRAM
**    ID         IN        BY         IN
**
**  IKJ56284I IKJEFF02   IKJEFF02   IKJEFF02   SUBMIT
**
**            UNABLE TO ISSUE MESSAGE <WITH ID <XXXX>>
**                                    <TO TERMINAL <->>
**                                    <AS PUTGET <->>
**                                    <WITH A SECOND LEVEL <->>
**            <ERRORDESCRIPTION><+>
**              USER HAS PROFILE NOPROMPT OR CLIST IN NOPROMPT
**              MODE (PUTGET R.C. IS <NNNN>)
**
**    EXPLANATION-
**      IKJEFF02 TSO MESSAGE ISSUER SERVICE ROUTINE HAS DETECTED AN
**      ERROR IN ITS INPUT PARAMETER LIST (MAPPED BY IKJEFFMT MACRO)
**      OR AN ERROR RETURN CODE FROM A CALL OF PUTGET OR PUTLINE
**      SERVICE ROUTINE.  IT ISSUES THE REQUESTED MESSAGE FIRST, IF
**      POSSIBLE.
**
**      THE SECOND LEVEL MESSAGE IS ONLY ISSUED FOR A PUTGET FAILURE.
**
**      IF A PUTLINE HAS FAILED IKJEFF19 GNRLFAIL SERVICE ROUTINE IS
**      ALSO CALLED TO DIAGNOSE THE PUTLINE ERROR AND ISSUE A MESSAGE.
**
**      IF THERE IS A PUTGET ERROR THE MESSAGE IS ISSUED AS A
**      PUTLINE.  IF THERE IS A PUTLINE ERROR THE MESSAGE IS
**      ISSUED AS A WRITE TO PROGRAMMER.
**
**      SEE THE OS/VS2 TSO GUIDE TO WRITING A TMP OR A CP
**      (GC28-0648-0) FOR DETAILED DESCRIPTIONS OF PUTGET AND
**      PUTLINE ERROR CODES.
**
**    SYSTEM ACTION-
**      IKJEFF02 RETURNS AN ERROR CODE TO ITS CALLER (76 IF
**      PARAMETER LIST ERROR, OTHERWISE THE PUTGET OR PUTLINE
**      ERROR CODE).  THE CALLER SHOULD THEN TAKE AN ERROR
**      TERMINATION.
**
**    USER ACTION-
**      CORRECT THE ERROR, IF POSSIBLE.  OTHERWISE CALL YOUR
**      SYSTEM PROGRAMMER.
**
**
         PRINT ON
M02A   IKJTSMSG ('IKJ56284I UNABLE TO ISSUE MESSAGE ',,' ',,' BECAUSE '+
               ,),M02A                                        @Z40NQKJ
FL2B   IKJTSMSG ('IKJ56284I UNABLE TO ISSUE MESSAGE WITH PROMPT FOR REP+
               LY+'),FL2B
M02B   IKJTSMSG ('IKJ56284I USER HAS PROFILE NOPROMPT OR CLIST IN NOPRO+
               MPT MODE (PUTGET R.C. IS ',,')'),M02B,FL2B
M02C   IKJTSMSG ('IKJ56285I ',,' MESSAGE NOT EXTRACTED FOR ID ',,' '),M+
               02C                                             @Z40GQKU
M02D   IKJTSMSG ('IKJ56286I SYSTEM OR INSTALLATION ERROR.  REPORT THE F+
               OLLOWING MESSAGE TO YOUR TSO ADMINISTRATOR'),M02D
*                                                              @Z40GQKU
LAST   IKJTSMSG
IKJEFF02 CSECT
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKJEFF02 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
JOBIDIN  EQU   @03
LVARPTR  EQU   @02
CSECTP   EQU   @05
VARLISTP EQU   @07
CPPLPTR  EQU   @02
WPLPTR   EQU   @02
WORKPTR  EQU   @04
MSGAD    EQU   @04
PARMPTR1 EQU   @09
BYTELEN  EQU   @03
LSTLEN   EQU   @06
REG0     EQU   @00
REG1     EQU   @01
REG3     EQU   @03
REG7     EQU   @07
REG8     EQU   @08
CMPRSCTR EQU   @08
REG14    EQU   @14
REG15    EQU   @15
WPLRF    EQU   0
WPLRPTR  EQU   WPLRF
WPL      EQU   0
WPLLGH   EQU   WPL
WPLMCSF  EQU   WPL+2
WPLMCSF1 EQU   WPLMCSF
WPLMCSF2 EQU   WPLMCSF+1
WPLTXT   EQU   WPL+4
WPLFLGS  EQU   0
WPLDESC  EQU   WPLFLGS
WPLDESC1 EQU   WPLDESC
WPLDESC2 EQU   WPLDESC+1
WPLROUT  EQU   WPLFLGS+2
WPLROUT1 EQU   WPLROUT
WPLROUT2 EQU   WPLROUT+1
WPLMSGTY EQU   WPLFLGS+4
WPLMSGT1 EQU   WPLMSGTY
WPLMSGT2 EQU   WPLMSGTY+1
WPLLS01  EQU   0
WPLLTF   EQU   WPLLS01
WPLLTF1  EQU   WPLLTF
WPLML    EQU   0
WPLMLLTF EQU   WPLML+2
WPLMLLT1 EQU   WPLMLLTF
CPPL     EQU   0
CPPLUPT  EQU   CPPL+4
CPPLECT  EQU   CPPL+12
RET      EQU   0
PMSGLIST EQU   0
PCSECTP  EQU   PMSGLIST
PRETXTP  EQU   PMSGLIST+4
PSWITCH  EQU   PRETXTP
PDATASW  EQU   PSWITCH
PREVERSW EQU   PSWITCH
PWTOSW   EQU   PSWITCH
PHEXSW   EQU   PSWITCH
PKEY1SW  EQU   PSWITCH
PJOBISW  EQU   PSWITCH
PWTPSW   EQU   PSWITCH
PNHEXSW  EQU   PSWITCH
PRETEXTP EQU   PRETXTP+1
PSW2     EQU   PMSGLIST+8
P2OLDSW  EQU   PSW2
PDOMSW   EQU   PSW2
PNOXQSW  EQU   PSW2
PNPLMSW  EQU   PSW2
PPGMSW   EQU   PSW2
PEXTRCON EQU   PSW2
POLDPTR  EQU   PMSGLIST+12
PEXTRACT EQU   PMSGLIST+16
PEXTRLEN EQU   PEXTRACT
PEXTRBUF EQU   PEXTRACT+1
PEXTRCT2 EQU   PMSGLIST+20
PEXTRLN2 EQU   PEXTRCT2
PEXTRBF2 EQU   PEXTRCT2+1
PMSGID   EQU   PMSGLIST+24
PINSRTS  EQU   PMSGLIST+28
EXTRBUF  EQU   0
EXTRBF2  EQU   0
PVARFLD  EQU   0
PLENGTH  EQU   PVARFLD
PCONVRT  EQU   PLENGTH
PVARPTR  EQU   PVARFLD+1
@NM00013 EQU   0
CMSGID   EQU   @NM00013
CREPLYID EQU   @NM00013+4
CMSGLEN  EQU   @NM00013+8
CNBPARTS EQU   @NM00013+10
@NM00014 EQU   0
CPARTLEN EQU   @NM00014
CMSGPART EQU   @NM00014+1
VARIABLE EQU   0
PUTLOLD  EQU   0
OLDNSEG  EQU   PUTLOLD+4
OLDSEGP  EQU   PUTLOLD+8
OLDMSEG  EQU   0
OSEGLEN  EQU   OLDMSEG
OSEGTEXT EQU   OLDMSEG+4
COREGOT  EQU   0
COREHDR  EQU   COREGOT
CORELAST EQU   COREHDR
CORESW   EQU   COREHDR+4
CORENOW  EQU   COREHDR+8
COREMSG  EQU   COREGOT+12
CORELEN  EQU   COREMSG
CORETEXT EQU   COREMSG+4
CORERTCD EQU   COREMSG+260
PREBUF   EQU   0
PRELEN   EQU   PREBUF
PRETEXT  EQU   PREBUF+2
@NM00020 EQU   0
PRECHAR  EQU   @NM00020+2
PREHIGH  EQU   PRECHAR
INBUF    EQU   0
INLEN    EQU   INBUF
INTEXT   EQU   INBUF+4
MSGECB   EQU   0
MSGTMCT  EQU   0
PARM1    EQU   0
TMCT     EQU   0
COMECB   EQU   0
BUFLEN   EQU   EXTRBF2
HEXCODE  EQU   SAVCODE
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
INOFF    EQU   INBUF+2
@NM00023 EQU   PRECHAR
@NM00022 EQU   @NM00020+1
@NM00021 EQU   @NM00020
COREOFF  EQU   COREMSG+2
OSEGOFST EQU   OLDMSEG+2
OLDNEXT  EQU   PUTLOLD
PVARLEN  EQU   PLENGTH
@NM00012 EQU   PMSGLIST+9
@NM00011 EQU   PSW2
RETCHAR  EQU   RET+2
RETSIZE  EQU   RET
CPPLPSCB EQU   CPPL+8
CPPLCBUF EQU   CPPL
WPLMLTXT EQU   WPLML+4
WPLMLLT2 EQU   WPLMLLTF+1
WPLRSV24 EQU   WPLMLLT1
WPLRSV23 EQU   WPLMLLT1
WPLRSV22 EQU   WPLMLLT1
WPLRSV21 EQU   WPLMLLT1
WPLMLLTD EQU   WPLMLLT1
WPLMLLTC EQU   WPLMLLT1
WPLMLLTB EQU   WPLMLLT1
WPLMLLTA EQU   WPLMLLT1
WPLMLLEN EQU   WPLML+1
WPLML0   EQU   WPLML
WPLLINES EQU   WPLLS01+3
WPLAREA  EQU   WPLLS01+2
WPLLTF2  EQU   WPLLTF+1
WPLRSV20 EQU   WPLLTF1
WPLRSV19 EQU   WPLLTF1
WPLRSV18 EQU   WPLLTF1
WPLRSV17 EQU   WPLLTF1
WPLLTFD  EQU   WPLLTF1
WPLLTFC  EQU   WPLLTF1
WPLLTFB  EQU   WPLLTF1
WPLLTFA  EQU   WPLLTF1
WPLQID   EQU   WPLFLGS+6
WPLRSV32 EQU   WPLMSGT2
WPLRSV31 EQU   WPLMSGT2
WPLRSV30 EQU   WPLMSGT2
WPLRSV29 EQU   WPLMSGT2
WPLRSV28 EQU   WPLMSGT2
WPLRSV27 EQU   WPLMSGT2
WPLRSV26 EQU   WPLMSGT2
WPLRSV25 EQU   WPLMSGT2
WPLRSV16 EQU   WPLMSGT1
WPLRSV15 EQU   WPLMSGT1
WPLMSGTF EQU   WPLMSGT1
WPLRSV14 EQU   WPLMSGT1
WPLMSGTD EQU   WPLMSGT1
WPLMSGTC EQU   WPLMSGT1
WPLMSGTB EQU   WPLMSGT1
WPLMSGTA EQU   WPLMSGT1
WPLRSV13 EQU   WPLROUT2
WPLROUTO EQU   WPLROUT2
WPLROUTN EQU   WPLROUT2
WPLROUTM EQU   WPLROUT2
WPLROUTL EQU   WPLROUT2
WPLROUTK EQU   WPLROUT2
WPLROUTJ EQU   WPLROUT2
WPLROUTI EQU   WPLROUT2
WPLROUTH EQU   WPLROUT1
WPLROUTG EQU   WPLROUT1
WPLROUTF EQU   WPLROUT1
WPLROUTE EQU   WPLROUT1
WPLROUTD EQU   WPLROUT1
WPLROUTC EQU   WPLROUT1
WPLROUTB EQU   WPLROUT1
WPLROUTA EQU   WPLROUT1
WPLRSV12 EQU   WPLDESC2
WPLRSV11 EQU   WPLDESC2
WPLRSV10 EQU   WPLDESC2
WPLRSV09 EQU   WPLDESC2
WPLRSV08 EQU   WPLDESC2
WPLRSV07 EQU   WPLDESC2
WPLDESCJ EQU   WPLDESC2
WPLDESCI EQU   WPLDESC2
WPLDESCH EQU   WPLDESC1
WPLDESCG EQU   WPLDESC1
WPLDESCF EQU   WPLDESC1
WPLDESCE EQU   WPLDESC1
WPLDESCD EQU   WPLDESC1
WPLDESCC EQU   WPLDESC1
WPLDESCB EQU   WPLDESC1
WPLDESCA EQU   WPLDESC1
WPLTXTL  EQU   WPLTXT+125
@NM00001 EQU   WPLTXT
WPLRSV05 EQU   WPLMCSF2
WPLRSV04 EQU   WPLMCSF2
WPLMCSFN EQU   WPLMCSF2
WPLRSV03 EQU   WPLMCSF2
WPLNOWTP EQU   WPLMCSF2
WPLMCSFK EQU   WPLMCSF2
WPLMCSFJ EQU   WPLMCSF2
WPLMCSFI EQU   WPLMCSF2
WPLMCSFH EQU   WPLMCSF1
WPLMCSFG EQU   WPLMCSF1
WPLMCSFF EQU   WPLMCSF1
WPLMCSFE EQU   WPLMCSF1
WPLMCSFD EQU   WPLMCSF1
WPLMCSFC EQU   WPLMCSF1
WPLMCSFB EQU   WPLMCSF1
WPLMCSFA EQU   WPLMCSF1
WPLRECB  EQU   WPLRF+4
WPLRPTRA EQU   WPLRPTR+1
WPLRLN   EQU   WPLRPTR
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00142 EQU   @RC00134
@RF00145 EQU   @RC00134
@RT00203 EQU   PUT2LINE
@RT00208 EQU   SEGMOVE
@RT00212 EQU   SKIPUP
@RC00265 EQU   @RC00263
@RT00292 EQU   NOBLANKS
@RT00300 EQU   HAVELPRN
@RT00307 EQU   ENDCMPRS
@RT00343 EQU   BLDLOOP
@RC00352 EQU   @RC00350
@RT00358 EQU   RETLABEL
@RC00364 EQU   @RC00362
@RC00371 EQU   @RC00362
@RF00400 EQU   RETLABEL
@RT00424 EQU   WTPMSG
@RT00426 EQU   PUTLINE
@RF00458 EQU   RETLABEL
@RF00466 EQU   RETLABEL
@RT00498 EQU   MSGSRCH
@RT00514 EQU   MSGSRCH
@RT00528 EQU   RETLABEL
@RF00566 EQU   RETLABEL
@RF00586 EQU   @RC00583
@RF00688 EQU   @EL00002
@RF00698 EQU   @EL00003
@RF00708 EQU   @EL00004
@RC00366 EQU   @RC00364
@ENDDATA EQU   *
         END   IKJEFF02,(C'PLS1725',0701,78181)
