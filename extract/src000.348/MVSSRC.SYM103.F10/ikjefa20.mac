         TITLE 'IKJEFA20  --  CHANGE COMMAND PROCESSOR                 *
                        '
IKJEFA20 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKJEFA20  78.174'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @11,8(,@13)                                         0001
         LR    @13,@11                                             0001
*         CTRLTAB = CTRLTAB&&CTRLTAB; /* CLEAR CONTROL TABLE         */
         XC    CTRLTAB(40),CTRLTAB                                 0040
*         ACIOPARM = ACIOPARM&&ACIOPARM;/* CLEAR I/O PARM LIST       */
         XC    ACIOPARM(24),ACIOPARM                               0041
*         ACCTPLP = R1;               /* ADDR OF ACCOUNT PARMLIST    */
         ST    R1,ACCTPLP                                          0042
*         RFY R1 UNRSTD;              /* RELEASE CPPL POINTER        */
*         DLSTTAB = DLSTTAB&&DLSTTAB; /* CLEAR DATALIST TABLE        */
         XC    DLSTTAB(108),DLSTTAB                                0044
*         DATALPTR = ADDR(DLSTTAB);   /* SET PTR TO DATA LIST TABLE  */
         LA    @10,DLSTTAB                                         0045
         ST    @10,DATALPTR                                        0045
*         CFLAGS = '0'B;              /* INITIALIZE CONTROL FLAGS    */
         XC    CFLAGS+1(2),CFLAGS+1                                0046
         MVI   CFLAGS,B'00000000'                                  0046
*         MSGNO = 0;                  /* INIT MESSAGE NUMDER         */
         SLR   MSGNO,MSGNO                                         0047
*         /* ASSIGN GENERATED PARAMETER BLOCKS TO DYNAMIC STORAGE    */
*         CPLS(1:MCPLNG) = MCPLS(1:MCPLNG);                        0048
         L     @10,MCPLNG                                          0048
         BCTR  @10,0                                               0048
         EX    @10,@SM00429                                        0048
*         UADSDCB = UADSBLK;          /* INIT DYNAMIC DCB BLK - BSAM */
         MVC   UADSDCB(88),UADSBLK                                 0049
*         /* BUILD THE PARAMETER LIST FOR 'PUTLINE'                  */
*         PLPLIST(1:12) = ACCTPL(1:12);/* ADDR OF THE UPT, ECT & ECB */
         L     @10,ACCTPLP                                         0050
         MVC   PLPLIST(12),ACCTPL(@10)                             0050
*         PBLKADR = ADDR(PBLOK);      /* ADDR OF THE PARM BLOCK      */
         LA    @10,PBLOK                                           0051
         ST    @10,PBLKADR                                         0051
*         INSRTO1 = 10;               /* INIT FIRST SEGMENT LENGTH   */
         LA    @10,10                                              0052
         STH   @10,INSRTO1                                         0052
*         INSRTO2 = 10;               /* INIT SECOND SEGMENT LENGTH  */
         STH   @10,INSRTO2                                         0053
*         /***********************************************************/
*         /*                                                         */
*         /*            PARSING OF THE INPUT COMMAND                 */
*         /*                                                         */
*         /***********************************************************/
*         NODELPTR = ADDR(NLSTTAB);   /* INSERT PTR TO NODELIST TAB  */
         LA    @10,NLSTTAB                                         0054
         ST    @10,NODELPTR                                        0054
*         RFY R1 RSTD;                /* RESTRICT PARAMETER REG      */
*         R1 = ADDR(CTRLTAB);         /* PTR TO CHANGE CNTRL TABLE   */
         LA    R1,CTRLTAB                                          0056
*         /* PASS CONTROL TO THE CHANGE/PARSE INTERFACE ROUTINE.     */
*         CALL IKJEFA24;                                           0057
         L     @15,@CV00148                                        0057
         BALR  @14,@15                                             0057
*         RFY R1 UNRSTD;              /* RELEASE PARAMETER REG       */
*         /* CHECK WHETHER THE ECB WAS POSTED (ATTENTION INTERRUPT)  */
*         /* WHILE IKJEFA24 WAS IN CONTROL.                          */
*         IF ATTENTN = '1'B                                        0059
*           THEN                      /* YES,                        */
         L     @10,ACCTPLP                                         0059
         L     @10,ACCTECBP(,@10)                                  0059
         TM    ATTENTN(@10),B'01000000'                            0059
         BO    @RT00059                                            0059
*             GOTO ACCTRET;           /* GO CLEAN UP & RETURN TO THE
*                                        ACCOUNT COMMAND PROCESSOR   */
*         /* CHECK THE RETURN CODE SET BY IKJEFA24. IF IT IS NOT     */
*         /* ZERO, THEN ISSUE THE INDICATED ERROR MESSAGE.           */
*         IF RETCODE ^= 0             /* SUCCESSFUL COMPLETION?      */
*           THEN                      /* NO,                         */
         L     @10,RETCODE                                         0061
         LTR   @10,@10                                             0061
         BZ    @RF00061                                            0061
*             DO;                                                  0062
*             /* PARSE RETURN CODE = 4 OR 8?                         */
*             IF RETCODE = 4          /* UNABLE TO PROMPT            */
*              × RETCODE = 8          /* ATTENTION INTERUPT          */
*               THEN                  /* YES,                        */
         C     @10,@CF00049                                        0063
         BE    @RT00063                                            0063
         C     @10,@CF00040                                        0063
         BE    @RT00063                                            0063
*                 GOTO ACCTRET;       /* GO CLEAN UP & RETURN TO   0064
*                                        ACCOUNT                     */
*             IF RETCODE = 16         /* GETMAIN FAILURE             */
*               THEN                  /* YES,                        */
         C     @10,@CF00042                                        0065
         BNE   @RF00065                                            0065
*                 DO;                                              0066
*                 MSGNO = 3;          /* SET ERROR MSG NUMBER        */
         LA    MSGNO,3                                             0067
*                 GOTO TMSGA;         /* GO ISSUE THE MSG            */
         B     TMSGA                                               0068
*                 END;                                             0069
*             MSGNO = 21;             /* SET MESSAGE NUMBER          */
@RF00065 LA    MSGNO,21                                            0070
*             GOTO MLMSG;             /* GO CONSTRUCT THE MSG        */
         B     MLMSG                                               0071
*             END;                                                 0072
*         /* CHECK THE MESSAGE NUMBER SET BY IKJEFA24. IF IT IS NOT  */
*         /* ZERO, THEN ISSUE THE INDICATED ERROR MESSAGE.           */
*         IF MSGNMBR ^= 0             /* SUCCESSFUL COMPLETION?      */
*           THEN                      /* NO,                         */
@RF00061 CLI   MSGNMBR,0                                           0073
         BE    @RF00073                                            0073
*             DO;                                                  0074
*             MSGNO = MSGNMBR;        /* SET ERROR MSG NUMBER        */
         SLR   MSGNO,MSGNO                                         0075
         IC    MSGNO,MSGNMBR                                       0075
*             GOTO TMSGA;             /* GO ISSUE THE MSG            */
         B     TMSGA                                               0076
*             END;                                                 0077
*         /***********************************************************/
*         /*                                                         */
*         /* PARSING OF THE INPUT COMMAND HAS BEEN COMPLETED.        */
*         /* PROCESSING CONTINUES WITH THE SPECIFIED USERID OR       */
*         /* WITH THE FIRST USERID IN THE UADS DIRECTORY IF THE      */
*         /* NODELIST USERID IS AN ASTERISK.                         */
*         /*                                                         */
*         /***********************************************************/
*         GEN (ENQ   ,MF=(E,UADENQ))                               0078
*           REFS(MAJNAME,MINNAME,UADENQ);                          0078
@RF00073 DS    0H                                                  0078
         ENQ   ,MF=(E,UADENQ)
*         ENQUAFLG = '1'B;            /* 1- UADS IS ENQ'ED           */
         OI    ENQUAFLG,B'00000010'                                0079
*         /* PREPARE TO OPEN THE BPAM DCB.                           */
*         RFY R2 RSTD;                /* RESTRICT DSECT POINTER      */
*         GEN (USING IHADCB,R2)                                    0081
*           REFS(R2);                                              0081
         USING IHADCB,R2
*         /* ESTABLISH ADDRESSABILITY FOR DCB LABELS.                */
*         R2 = ADDR(UADDCB2);         /* SET BASE PTR FOR LABLES     */
         LA    R2,UADDCB2                                          0082
*         GEN (OPEN  ((R2),UPDAT),MF=(E,OPENUAD))                  0083
*           REFS(R2,OPENUAD);                                      0083
         OPEN  ((R2),UPDAT),MF=(E,OPENUAD)
*         /* IF 'OPEN' WAS NOT SUCCESSFUL, ISSUE AN ERROR MSG,       */
*         /* TERMINATE AND RETURN TO ACCOUNT.                        */
*         IF DCBOFLAG = '0'B          /* WAS 'OPEN' SUCCESSFUL?      */
*           THEN                      /* NO,                         */
         TM    DCBOFLAG,B'00010000'                                0084
         BNZ   @RF00084                                            0084
*             DO;                                                  0085
*               MSGNO = 16;           /* SET MSG NUMBER              */
         LA    MSGNO,16                                            0086
*               GOTO TMSGA;           /* GO CONSTRUCT THE MSG        */
         B     TMSGA                                               0087
*             END;                                                 0088
*         ACIOFLGS = '00'X;           /* SET ALL FLAGS TO ZERO       */
@RF00084 MVI   ACIOFLGS,X'00'                                      0089
*         ACIODCBA = ADDR(UADDCB2);   /* ADDR OF THE BPAM DCB        */
         LA    @10,UADDCB2                                         0090
         STCM  @10,7,ACIODCBA                                      0090
*         ACIOPUTL = ACCTPLP;         /* PTR TO ACCOUNT PARMLIST     */
         MVC   ACIOPUTL(3),ACCTPLP+1                               0091
*         MSGID = '7';                /* CHANGE MSG ID - READ WILL 0092
*                                        ISSUE I/O ERROR MESSAGES    */
         MVI   MSGID,C'7'                                          0092
*         /***********************************************************/
*         /* DOES THE COMMAND NODELIST SPECIFY A USERID OR AN ASTER- */
*         /* ISK? IF USERID, GET THE SPECIFIED USERID TREE BY CALL-  */
*         /* ING THE 'READ' ROUTINE (IKJEFA51). IF ASTERISK, OPEN    */
*         /* THE BSAM DCB & PROVIDE THE READ RTNE WITH A DIRECTORY   */
*         /* WORK AREA. THE READ RTNE WILL PROCESS THE DIRECTORY &   */
*         /* READ ONE USERID TREE AT A TIME INTO A TREE BUFFER.      */
*         /***********************************************************/
*         IF USRID(1) ^= '*'          /* IS A USERID SPECIFIED IN  0093
*                                        THE NODELIST?               */
*           THEN                      /* YES                         */
         CLI   USRID,C'*'                                          0093
         BE    @RF00093                                            0093
*             DO;                                                  0094
*             USIND = '0'B;           /* SET INDICATOR TO 0: NO MORE
*                                        USERIDS TO BE PROCESSED     */
         NI    USIND,B'01111111'                                   0095
*             ACIOMPTR = ADDR(USRID); /* SET PTR TO THE USERID       */
         LA    @10,USRID                                           0096
         ST    @10,ACIOMPTR                                        0096
*             USRID(USRLEN+1) = '0';  /* SET INDEX LEVEL             */
         SLR   @10,@10                                             0097
         IC    @10,USRLEN                                          0097
         LA    @05,USRID(@10)                                      0097
         MVI   0(@05),C'0'                                         0097
*             GOTO READ;              /* GET THE SPECIFIED USERID  0098
*                                        TREE FROM THE UADS          */
         B     READ                                                0098
*             END;                                                 0099
*         /* PREPARE TO OPEN THE BSAM DCB.                           */
*         R2 = ADDR(UADSDCB);         /* SET BASE PTR FOR LABELS     */
@RF00093 LA    R2,UADSDCB                                          0100
*         GEN (OPEN  ((R2),(INPUT)),MF=(E,OPENUAD))                0101
*           REFS(R2,OPENUAD);                                      0101
         OPEN  ((R2),(INPUT)),MF=(E,OPENUAD)
*         /* IF 'OPEN' WAS NOT SUCCESSFUL, ISSUE AN ERROR MESSAGE,   */
*         /* TERMINATE 'CHANGE' AND RETURN TO 'ACCOUNT'.             */
*         IF DCBOFLAG = '0'B          /* WAS 'OPEN' SUCCESSFUL?      */
*           THEN                      /* NO,                         */
         TM    DCBOFLAG,B'00010000'                                0102
         BNZ   @RF00102                                            0102
*             DO;                                                  0103
*               MSGNO = 16;           /* SET MSG NUMBER              */
         LA    MSGNO,16                                            0104
*               GOTO TMSGA;           /* GO CONSTRUCT THE MSG        */
         B     TMSGA                                               0105
*             END;                                                 0106
*         RFY R2 UNRSTD;              /* RELEASE DCB POINTERS        */
@RF00102 DS    0H                                                  0108
*         /* THE NODELIST USERID = '*', THEN ACIOMPTR IN THE PARMLIST*/
*         /* POINTS TO A MEMBER NAME IN THE DIRECTORY WORK AREA.     */
*         ACIOMPTR = 0;               /* SET MEMBER NAME PTR TO 0    */
         SLR   @10,@10                                             0108
         ST    @10,ACIOMPTR                                        0108
*         USIND = '1'B;               /* MORE USERS TO BE PROCESSED  */
         OI    USIND,B'10000000'                                   0109
*         ACIOFL03 = '1'B;            /* DIRECTORY READ REQUESTED    */
         OI    ACIOFL03,B'00100000'                                0110
*         ACIODRCT = ADDR(DIRYWA);    /* SET PTR TO DIRECTRY W/A     */
         LA    @10,DIRYWA                                          0111
         ST    @10,ACIODRCT                                        0111
*         GOTO READ;                  /* READ THE DIRECTORY & FIRST
*                                        USERID                      */
         B     READ                                                0112
*MORUS:   /* BEFORE REQUESTING A USERID TREE, CHECK WHETHER THE      */
*         /* BUFFER FOR A PREVIOUSLY USED TREE HAS TO BE FREED.      */
*         IF FREEFLG = '1'B                                        0113
*           THEN                      /* YES, BUFFER MUST BE FREED   */
MORUS    TM    FREEFLG,B'00000001'                                 0113
         BNO   @RF00113                                            0113
*             DO;                                                  0114
*               ACIOFL05='0'B;        /* DO NOT WRITE BLOCK          */
         NI    ACIOFL05,B'11110111'                                0115
*               RFY R1 RSTD;          /* RESTRICT PARAMETER REG      */
*               R1 = ADDR(ACIOPARM);  /* PTR TO READ/WRITE PARMLIST  */
         LA    R1,ACIOPARM                                         0117
*               /* PASS CONTROL TO THE WRITE RTNE TO DO THE FREEMAIN */
*               CALL IKJEFA52;                                     0118
         L     @15,@CV00150                                        0118
         BALR  @14,@15                                             0118
*               RFY R1 UNRSTD;        /* RELEASE PARAMETER REG       */
*               FREEFLG = '0'B;       /* SET FLAG TO 0- BUFFER FREED */
         NI    FREEFLG,B'11111110'                                 0120
*             END;                                                 0121
*         /* CHECK FOR MORE USERIDS TO BE PROCESSED.                 */
*         IF USIND = '0'B                                          0122
*           THEN                      /* ARE THERE MORE USERIDS?     */
@RF00113 TM    USIND,B'10000000'                                   0122
         BZ    @RT00122                                            0122
*             GOTO CHKCHNG;           /* NO                          */
*         /* CHECK WHETHER THE ECB WAS POSTED (ATTENTION INTERRUPT)  */
*READ:    IF ATTENTN = '1'B                                        0124
*           THEN                      /* YES,                        */
READ     L     @10,ACCTPLP                                         0124
         L     @10,ACCTECBP(,@10)                                  0124
         TM    ATTENTN(@10),B'01000000'                            0124
         BO    @RT00124                                            0124
*             GOTO ACCTRET;           /* GO CLEAN UP & RETURN TO THE
*                                        ACCOUNT COMMAND PROCESSOR   */
*         /* PREPARE TO CALL THE READ ROUTINE                        */
*         RFY R1 RSTD;                /* RESTRICT PARAMETER REG      */
*         R1 = ADDR(ACIOPARM);        /* 'READ' EXPECTS THE ADDRESS
*                                        OF THE PARMLIST IN REG1     */
         LA    R1,ACIOPARM                                         0127
*         CALL  IKJEFA51;                                          0128
         L     @15,@CV00149                                        0128
         BALR  @14,@15                                             0128
*         RFY R1 UNRSTD;              /* RELEASE PARAMETER REG       */
*         RFY R15 RSTD;               /* RESTRICT RETURN CODE REG    */
*         RETCODE = R15;              /* ASSIGN THE RETURN CODE      */
         ST    R15,RETCODE                                         0131
*         RFY R15 UNRSTD;             /* RELEASE RETURN CODE REG     */
*         IF USIND = '1'B &           /* IF USERID IS '*' AND        */
*           ACIOLINK ^= 0             /*   ACIOLINK HAS BEEN SET     */
*           THEN                                                   0133
         TM    USIND,B'10000000'                                   0133
         BNO   @RF00133                                            0133
         L     @10,ACIOLINK                                        0133
         LTR   @10,@10                                             0133
         BZ    @RF00133                                            0133
*             DO;                                                  0134
*             USRID = MEMNAME;        /* GET NAME FROM BLDL LIST     */
         MVC   USRID(8),MEMNAME(@10)                               0135
*             USRLEN = 8;             /* GET MAXIMUM LENGTH OF USERID*/
         MVI   USRLEN,X'08'                                        0136
*             DO WHILE USRID(USRLEN) = ' '; /* IS CHAR A BLANK       */
         B     @DE00137                                            0137
@DL00137 DS    0H                                                  0138
*               USRLEN = USRLEN-1;    /* DECREMENT USERID LENGTH     */
         SLR   @10,@10                                             0138
         IC    @10,USRLEN                                          0138
         BCTR  @10,0                                               0138
         STC   @10,USRLEN                                          0138
*               END;                                               0139
@DE00137 SLR   @10,@10                                             0139
         IC    @10,USRLEN                                          0139
         LA    @05,USRID-1(@10)                                    0139
         CLI   0(@05),C' '                                         0139
         BE    @DL00137                                            0139
*             USRLEN = USRLEN-1;      /* DECREMENT FOR SEQ. CHAR     */
         BCTR  @10,0                                               0140
         STC   @10,USRLEN                                          0140
*             END;                                                 0141
*         /* CHECK THE READ RETURN CODE.                             */
*         IF RETCODE ^= 0             /* WAS READ SUCCESSFUL?        */
*           THEN                      /* NO,                         */
@RF00133 L     @10,RETCODE                                         0142
         LTR   @10,@10                                             0142
         BZ    @RF00142                                            0142
*             DO;                                                  0143
*             IF RETCODE = 4          /* SPECIFIED USERID NOT FOUND? */
*               THEN                  /* YES,                        */
         C     @10,@CF00049                                        0144
         BNE   @RF00144                                            0144
*                 DO;                                              0145
*                 MSGNO = 9;          /* SET MSG NUMBER              */
         LA    MSGNO,9                                             0146
*                 GOTO MPREP2;        /* GO CONSTRUCT THE MSG        */
         B     MPREP2                                              0147
*                 END;                                             0148
*             IF RETCODE = 8          /* BLDL I/O ERROR?             */
*               THEN                  /* YES,                        */
@RF00144 CLC   RETCODE(4),@CF00040                                 0149
         BNE   @RF00149                                            0149
*                 DO;                                              0150
*                 MSGNO = 17;         /* SET MSG NUMBER              */
         LA    MSGNO,17                                            0151
*                 GOTO MLMSG;         /* GO CONSTRUCT THE MSG        */
         B     MLMSG                                               0152
*                 END;                                             0153
*             IF RETCODE = 12         /* GETMAIN FAILURE?            */
*               THEN                  /* YES,                        */
@RF00149 L     @10,RETCODE                                         0154
         C     @10,@CF00350                                        0154
         BE    @RT00154                                            0154
*                 GOTO MSG3;          /* GO CONSTRUCT THE MSG        */
*             IF RETCODE = 20         /* I/O ERR, MSG ISSUED?        */
*               THEN                  /* YES,                        */
         C     @10,@CF00070                                        0156
         BE    @RT00156                                            0156
*                 GOTO ACCTRET;       /* GO CLEAN UP AND RETURN      */
*             IF RETCODE = 24         /* END OF THE DIRECTORY?       */
*               THEN                  /* YES,                        */
         C     @10,@CF00077                                        0158
         BE    @RT00158                                            0158
*                 GOTO CHKCHNG;       /* GO SET INDICATORS & RETURN  */
*               ELSE                  /* I/O ERROR - THE READ RTNE 0160
*                                        WAS NOT ABLE TO ISSUE THE 0160
*                                        I/O ERROR MESSAGE           */
*                 MSGNO = 25;         /* SET MSG NUMBER              */
         LA    MSGNO,25                                            0160
*                 GOTO MLMSG;         /* GO CONSTRUCT THE MSG        */
         B     MLMSG                                               0161
*         END;                                                     0162
*         /* A USERID TREE IS NOW IN WORKING STORAGE.                */
*         SRCHFLG = '0'B;             /* RE-INIT THE SEARCH FLAG     */
@RF00142 NI    SRCHFLG,B'11110111'                                 0163
*         FREEFLG = '1'B;             /* SET FREEMAIN FLAG           */
         OI    FREEFLG,B'00000001'                                 0164
*         STGFLG = '0'B;              /* INIT 'SIZE>MAXSIZE' FLAG    */
         NI    STGFLG,B'11101111'                                  0165
*         TRCHGE = '0'B;              /* INIT 'CHANGED TREE' INDIC.  */
         NI    TRCHGE,B'01111111'                                  0166
*         HEDBPTR = ACIOBUFR;         /* ADDR OF THE BUFFER INTO WHICH
*                                        THE USERID TREE WAS READ    */
         L     HEDBPTR,ACIOBUFR-1                                  0167
         LA    HEDBPTR,0(,HEDBPTR)                                 0167
*         /* DOES THE COMMAND SPECIFY USER HEADER DATA ITEMS? IF SO, */
*         /* CHANGE THE SPECIFIED ITEMS IN THE USER HEADER.          */
*         IF OPERKEY(16) = '1'B       /* IS 'OPER' SPECIFIED?        */
*           THEN                      /* YES,                        */
         L     @10,CHPDLPTR                                        0168
         TM    OPERKEY+1(@10),B'00000001'                          0168
         BNO   @RF00168                                            0168
*             USATR00 = '1'B;         /* SET BIT TO 1 - OPER         */
         OI    USATR00(HEDBPTR),B'10000000'                        0169
*           ELSE                      /* NO,                         */
*             IF OPERKEY(15) = '1'B   /* IS 'NOOPER' SPECIFIED?      */
*               THEN                  /* YES,                        */
         B     @RC00168                                            0170
@RF00168 L     @10,CHPDLPTR                                        0170
         TM    OPERKEY+1(@10),B'00000010'                          0170
         BNO   @RF00170                                            0170
*                 USATR00 = '0'B;     /* SET BIT TO 0 - NOOPER       */
         NI    USATR00(HEDBPTR),B'01111111'                        0171
*         IF ACCTKEY(16) = '1'B       /* IS 'ACCT' SPECIFIED?        */
*           THEN                      /* YES,                        */
@RF00170 DS    0H                                                  0172
@RC00168 L     @10,CHPDLPTR                                        0172
         TM    ACCTKEY+1(@10),B'00000001'                          0172
         BNO   @RF00172                                            0172
*             USATR01 = '1'B;         /* SET BIT TO 1 - ACCT         */
         OI    USATR01(HEDBPTR),B'01000000'                        0173
*           ELSE                      /* NO,                         */
*             IF ACCTKEY(15) = '1'B   /* IS 'NOACCT' SPECIFIED?      */
*               THEN                  /* YES,                        */
         B     @RC00172                                            0174
@RF00172 L     @10,CHPDLPTR                                        0174
         TM    ACCTKEY+1(@10),B'00000010'                          0174
         BNO   @RF00174                                            0174
*                 USATR01 = '0'B;     /* SET BIT TO 0 - NOACCT       */
         NI    USATR01(HEDBPTR),B'10111111'                        0175
*         IF JCLKEY(16) = '1'B        /* IS 'JCL' SPECIFIED?         */
*           THEN                      /* YES,                        */
@RF00174 DS    0H                                                  0176
@RC00172 L     @10,CHPDLPTR                                        0176
         TM    JCLKEY+1(@10),B'00000001'                           0176
         BNO   @RF00176                                            0176
*             USATR02 = '1'B;         /* SET BIT TO 1 - JCL          */
         OI    USATR02(HEDBPTR),B'00100000'                        0177
*           ELSE                      /* NO,                         */
*             IF JCLKEY(15) = '1'B    /* IS 'NOJCL' SPECIFIED?       */
*               THEN                  /* YES,                        */
         B     @RC00176                                            0178
@RF00176 L     @10,CHPDLPTR                                        0178
         TM    JCLKEY+1(@10),B'00000010'                           0178
         BNO   @RF00178                                            0178
*                 USATR02 = '0'B;     /* SET BIT TO 0 - NOJCL        */
         NI    USATR02(HEDBPTR),B'11011111'                        0179
*         IF MONTKEY(16) = '1'B       /* IS 'MOUNT' SPECIFIED?       */
*           THEN                      /* YES,                        */
@RF00178 DS    0H                                                  0180
@RC00176 L     @10,CHPDLPTR                                        0180
         TM    MONTKEY+1(@10),B'00000001'                          0180
         BNO   @RF00180                                            0180
*             USATR03 = '1'B;         /* SET BIT TO 1 - MOUNT  Y02678*/
         OI    USATR03(HEDBPTR),B'00010000'                        0181
*           ELSE                      /* NO,                         */
*             IF MONTKEY(15) = '1'B   /* IS 'NOMOUNT' SPECIFIED?     */
*               THEN                  /* YES,                        */
         B     @RC00180                                            0182
@RF00180 L     @10,CHPDLPTR                                        0182
         TM    MONTKEY+1(@10),B'00000010'                          0182
         BNO   @RF00182                                            0182
*                 USATR03 = '0'B;     /* SET BIT TO 0 - NOMOUNTY02678*/
         NI    USATR03(HEDBPTR),B'11101111'                        0183
*         IF USDAKEY(16)='1'B         /* IS USERDATA SPECIFIED?      */
*           THEN                      /* YES,                        */
@RF00182 DS    0H                                                  0184
@RC00180 L     @10,CHPDLPTR                                        0184
         TM    USDAKEY+1(@10),B'00000001'                          0184
         BNO   @RF00184                                            0184
*             UADSINST=USERDATA;      /* MOVE USERDATA INTO HEADER   */
         MVC   UADSINST(2,HEDBPTR),USERDATA(@10)                   0185
*          IF DESTKEY(16)='1'B        /* WAS DESTINATION SPECIFIED?  */
*            THEN                     /* YES,                        */
@RF00184 L     @10,CHPDLPTR                                        0186
         TM    DESTKEY+1(@10),B'00000001'                          0186
         BNO   @RF00186                                            0186
*              DO;                    /* TEST FOR EXPANDED HEADER  0187
*                                                              Y02678*/
*              IF UADSEXPF = '1'B     /* IS THIS A NEW HEADER?       */
*                THEN                 /* YES,                        */
         TM    UADSEXPF(HEDBPTR),B'01000000'                       0188
         BNO   @RF00188                                            0188
*                  UADSDEST =         /* MOVE DESTINATION INTO       */
*                    DEST(1:DESTLNG); /* HEADER BLOCK          Y02678*/
         MVI   UADSDEST+1(HEDBPTR),C' '                            0189
         MVC   UADSDEST+2(6,HEDBPTR),UADSDEST+1(HEDBPTR)           0189
         LH    @05,DESTLNG(,@10)                                   0189
         BCTR  @05,0                                               0189
         L     @10,DESTADR(,@10)                                   0189
         EX    @05,@SM00443                                        0189
*                ELSE                 /* NO,                   Y02678*/
*                  DO;                /* MEMBER IS OLD FORMAT  Y02678*/
         B     @RC00188                                            0190
@RF00188 DS    0H                                                  0191
*                  MSGNO = 19;        /* INFORM USER           Y02678*/
         LA    MSGNO,19                                            0191
*                  GOTO MPREP1;       /* GO TO ISSUE MESSAGE   Y02678*/
         B     MPREP1                                              0192
*                  END;                                            0193
*              END;                                                0194
*            ELSE                                                  0195
*              IF DESTKEY(15)='1'B    /* WAS NODEST SPECIFIED?       */
*                THEN                 /* YES,                        */
         B     @RC00186                                            0195
@RF00186 L     @10,CHPDLPTR                                        0195
         TM    DESTKEY+1(@10),B'00000010'                          0195
         BNO   @RF00195                                            0195
*                  DO;                /* TEST FOR EXPANDED HEADER  0196
*                                                              Y02678*/
*                  IF UADSEXPF = '1'B /* IS THIS A NEW HEADER?       */
*                    THEN             /* YES,                        */
         TM    UADSEXPF(HEDBPTR),B'01000000'                       0197
         BNO   @RF00197                                            0197
*                      UADSDEST =     /* ZERO OUT DESTINATION  Y02678*/
*                       '0000000000000000'X;                       0198
         MVC   UADSDEST(8,HEDBPTR),@CB00373                        0198
*                    ELSE             /* NO,                   Y02678*/
*                      DO;            /* MEMBER IS OLD FORMAT  Y02678*/
         B     @RC00197                                            0199
@RF00197 DS    0H                                                  0200
*                      MSGNO = 19;    /* INFORM USER           Y02678*/
         LA    MSGNO,19                                            0200
*                      GOTO MPREP1;   /* GO TO ISSUE MESSAGE   Y02678*/
         B     MPREP1                                              0201
*                      END;                                        0202
*                  END;                                            0203
@RC00197 DS    0H                                                  0204
*          IF PERFKEY(16)='1'B        /* WAS PERF GROUP SPECIFIED?   */
*            THEN                     /* YES,                        */
@RF00195 DS    0H                                                  0204
@RC00186 L     @10,CHPDLPTR                                        0204
         TM    PERFKEY+1(@10),B'00000001'                          0204
         BNO   @RF00204                                            0204
*              DO;                    /* TEST FOR EXPANDED HEADER  0205
*                                                              Y02678*/
*              IF UADSEXPF = '1'B     /* IS THIS A NEW HEADER?       */
*                THEN                 /* YES,                        */
         TM    UADSEXPF(HEDBPTR),B'01000000'                       0206
         BNO   @RF00206                                            0206
*                  DO;                /* MOVE PERF GROUPS TO MEMBER
*                                                              Y02678*/
*                  IF UADSPERP = 0    /* DOES THIS USER HAVE PERF  0208
*                                        GROUPS                      */
*                    THEN             /* NO,                   Y02678*/
         L     @10,UADSPERP(,HEDBPTR)                              0208
         LTR   @10,@10                                             0208
         BNZ   @RF00208                                            0208
*                      DO;            /* GET SPACE IN UADS FOR PERF
*                                        GROUPS                Y02678*/
*                      SPACMPTR = HEDBPTR;/* POINT TO BUFFER   Y02678*/
         ST    HEDBPTR,SPACMPTR                                    0210
*                      SPACMCNT = ACIONMBR;/* GET NO. OF BLOCKSY02678*/
         SLR   @10,@10                                             0211
         IC    @10,ACIONMBR                                        0211
         STH   @10,SPACMCNT                                        0211
*                      SPACLNTH = 32; /* SET LENGTH OF PERF GROUPS 0212
*                                                              Y02678*/
         MVC   SPACLNTH(2),@CH00249                                0212
*                      RFY R1 RSTD;   /* RESTRICT PARM REG     Y02678*/
*                      R1 = ADDR(SPACPARM);/* POINT TO GETSPACE PARM
*                                             LIST             Y02678*/
         LA    R1,SPACPARM                                         0214
*                      CALL IKJEFA53; /* CALL GETSPACE         Y02678*/
         L     @15,@CV00151                                        0215
         BALR  @14,@15                                             0215
*                      RFY R1 UNRSTD; /* RELEASE PARM REG      Y02678*/
*                      RFY R15 RSTD;  /* RESTRICT RETURN REG   Y02678*/
*                      RETCODE = R15; /* SAVE THE RETURN CODE  Y02678*/
         ST    R15,RETCODE                                         0218
*                      RFY R15 UNRSTD;/* RELEASE RETURN REG    Y02678*/
*                      IF RETCODE ^=0 /* WAS GETSPACE SUCCESSFUL?    */
*                        THEN         /* NO,                         */
         L     @10,RETCODE                                         0220
         LTR   @10,@10                                             0220
         BZ    @RF00220                                            0220
*                          DO;        /*                       Y02678*/
*                          MSGNO = 23;/* SET ERROR MSG NO.     Y02678*/
         LA    MSGNO,23                                            0222
*                          GOTO MPREP1;/* GO TO ISSUE MESSAGE  Y02678*/
         B     MPREP1                                              0223
*                          END;       /*                       Y02678*/
*                      UADSPERP = SPACOFST;/* SET POINTER TO PERF  0225
*                                             GROUPS IN UADS   Y02678*/
@RF00220 L     @10,SPACOFST                                        0225
         ST    @10,UADSPERP(,HEDBPTR)                              0225
*                      END;                                        0226
*                  PERFPTR=           /* POINT TO PERFORMANCE  GROUP */
*                    HEDBPTR+UADSPERP;/* IN MEMBER             Y02678*/
@RF00208 LR    PERFPTR,HEDBPTR                                     0227
         AL    PERFPTR,UADSPERP(,HEDBPTR)                          0227
*                  UADSPERG=PERFGRP;  /* MOVE PERF GROUP TO MEMBER 0228
*                                          BLOCK               Y02678*/
         MVC   UADSPERG(32,PERFPTR),PERFGRP                        0228
*                  END;                                            0229
*                ELSE                 /* NO,                   Y02678*/
*                  DO;                /* MEMBER IS OLD FORMAT  Y02678*/
         B     @RC00206                                            0230
@RF00206 DS    0H                                                  0231
*                  MSGNO = 20;        /* INFORM USER           Y02678*/
         LA    MSGNO,20                                            0231
*                  GOTO MPREP1;       /* GO TO ISSUE MESSAGE   Y02678*/
         B     MPREP1                                              0232
*                  END;                                            0233
*              END;                                                0234
@RC00206 DS    0H                                                  0235
*          IF PERFKEY(15)='1'B        /* WAS NOPERFORM SPECIFIED?    */
*            THEN                     /* YES,                        */
@RF00204 L     @10,CHPDLPTR                                        0235
         TM    PERFKEY+1(@10),B'00000010'                          0235
         BNO   @RF00235                                            0235
*              DO;                    /* TEST FOR EXPANDED HEADER  0236
*                                                              Y02678*/
*              IF UADSEXPF = '1'B     /* IS THIS A NEW HEADER?       */
*                THEN                 /* YES,                        */
         TM    UADSEXPF(HEDBPTR),B'01000000'                       0237
         BNO   @RF00237                                            0237
*                  DO;                /* CHECK FOR EXISTING GROUPS 0238
*                                                              Y02678*/
*                  IF UADSPERP ^= 0   /* DOES THIS USER HAVE PERF  0239
*                                        GROUPS                      */
*                    THEN             /* YES,                  Y02678*/
         L     @10,UADSPERP(,HEDBPTR)                              0239
         LTR   @10,@10                                             0239
         BZ    @RF00239                                            0239
*                      DO;            /* FREE SPACE IN UADS FOR PERF
*                                        GROUPS                Y02678*/
*                      SPACMPTR = HEDBPTR;/* POINT TO BUFFER   Y02678*/
         ST    HEDBPTR,SPACMPTR                                    0241
*                      SPACMCNT = ACIONMBR;/* GET NO. OF BLOCKSY02678*/
         SLR   @05,@05                                             0242
         IC    @05,ACIONMBR                                        0242
         STH   @05,SPACMCNT                                        0242
*                      SPACLNTH = 32; /* SET LENGTH OF PERF GROUPS 0243
*                                                              Y02678*/
         MVC   SPACLNTH(2),@CH00249                                0243
*                      SPACOFST = UADSPERP;/* POINT TO PERF GROUP AREA
*                                                              Y02678*/
         ST    @10,SPACOFST                                        0244
*                      RFY R1 RSTD;   /* RESTRICT PARM REG     Y02678*/
*                      R1 = ADDR(SPACPARM);/* POINT TO GETSPACE PARM
*                                             LIST             Y02678*/
         LA    R1,SPACPARM                                         0246
*                      CALL IKJEFA54; /* CALL FREESPACE        Y02678*/
         L     @15,@CV00152                                        0247
         BALR  @14,@15                                             0247
*                      RFY R1 UNRSTD; /* RELEASE PARM REG      Y02678*/
*                      RFY R15 RSTD;  /* RESTRICT RETURN REG   Y02678*/
*                      RETCODE = R15; /* SAVE THE RETURN CODE  Y02678*/
         ST    R15,RETCODE                                         0250
*                      RFY R15 UNRSTD;/* RELEASE RETURN REG    Y02678*/
*                      IF RETCODE ^=0 /* WAS FREESPACE SUCCESSFUL?   */
*                        THEN         /* NO,                         */
         L     @10,RETCODE                                         0252
         LTR   @10,@10                                             0252
         BZ    @RF00252                                            0252
*                          DO;        /*                       Y02678*/
*                          MSGNO = 24;/* SET ERROR MSG NO.     Y02678*/
         LA    MSGNO,24                                            0254
*                          GOTO MLMSG;/* GO TO ISSUE MESSAGE   Y02678*/
         B     MLMSG                                               0255
*                          END;       /*                       Y02678*/
*                      UADSPERP = 0;  /* SET POINTER TO 0      Y02678*/
@RF00252 SLR   @10,@10                                             0257
         ST    @10,UADSPERP(,HEDBPTR)                              0257
*                      END;                                        0258
*                  END;                                            0259
*                ELSE                 /* NO,                   Y02678*/
*                  DO;                /* MEMBER IS OLD FORMAT  Y02678*/
         B     @RC00237                                            0260
@RF00237 DS    0H                                                  0261
*                  MSGNO = 20;        /* INFORM USER           Y02678*/
         LA    MSGNO,20                                            0261
*                  GOTO MPREP1;       /* GO TO ISSUE MESSAGE   Y02678*/
         B     MPREP1                                              0262
*                  END;                                            0263
*              END;                                                0264
@RC00237 DS    0H                                                  0265
*         IF MAXSKEY(16) = '1'B       /* IS 'MAXSIZE' SPECIFIED?     */
*           THEN                      /* YES,                        */
@RF00235 L     @10,CHPDLPTR                                        0265
         TM    MAXSKEY+1(@10),B'00000001'                          0265
         BNO   @RF00265                                            0265
*             UADSMAXC = MAXSHEX;     /* PUT NEW MAXSIZE INTO HEADER */
         LH    @10,MAXSHEX(,@10)                                   0266
         N     @10,@CF00445                                        0266
         STH   @10,UADSMAXC(,HEDBPTR)                              0266
*           ELSE                      /* NO,                         */
*             IF MAXSKEY(15) = '1'B   /* IS 'NOLIM' SPECIFIED?       */
*               THEN                  /* YES,                        */
         B     @RC00265                                            0267
@RF00265 L     @10,CHPDLPTR                                        0267
         TM    MAXSKEY+1(@10),B'00000010'                          0267
         BNO   @RF00267                                            0267
*                 UADSMAXC = 0;       /* SET MAXSIZE TO 0 - NOLIM    */
         SLR   @10,@10                                             0268
         STH   @10,UADSMAXC(,HEDBPTR)                              0268
*         IF CHLEVL = 1               /* IS CHANGE LEVEL THE USERID? */
*           THEN                      /* YES,                        */
@RF00267 DS    0H                                                  0269
@RC00265 CLI   CHLEVL,1                                            0269
         BE    @RT00269                                            0269
*             GOTO CHKMAX;            /* GO CHECK MAXSIZE VS PROCSIZE
*                                        BEFORE CHANGING THE USERID  */
*         /***********************************************************/
*         /* THIS SECTION WILL SEARCH FOR THE PASSWORD SPECIFIED IN  */
*         /* THE NODELIST OF THE CHANGE COMMAND. IF NONE WAS SPECI-  */
*         /* FIED ('*' IN THE PASSWORD POSITION), THEN THE CHANGE    */
*         /* LEVEL (CHLEVL) WILL DETERMINE WHERE PROCESSING IS TO    */
*         /* CONTINUE.                                               */
*         /***********************************************************/
*         DPOBPTR = HEDBPTR+UADSPWD1; /* REF THE 1ST PASSWORD OBLK 0271
*                                        UNDER THIS USERID           */
         LR    DPOBPTR,HEDBPTR                                     0271
         AL    DPOBPTR,UADSPWD1(,HEDBPTR)                          0271
*         PASSADDR = DPOBPTR;         /* SAVE ADDRESS OF THIS OBLK   */
         ST    DPOBPTR,PASSADDR                                    0272
*         /* ARE PASSWORDS SUPPORTED FOR THIS USER?                  */
*         IF UADSPDAT ^= 0                                         0273
*           THEN                      /* NO,                         */
         L     @10,UADSPDAT(,DPOBPTR)                              0273
         LTR   @10,@10                                             0273
         BNZ   @RT00273                                            0273
*             GOTO PWSPRT;            /* CONTINUE NORMALLY           */
*         /* PASSWORDS ARE NOT SUPPORTED FOR THIS USER. IF THE     0275
*            CHANGE LEVEL IS THE PASSWORD LEVEL, THEN THE COMMAND  0275
*            IS INVALID FOR THIS USERID.                             */
*         IF CHLEVL ^= 2              /* CHANGE LVL = PASSWD LVL?    */
*           THEN                      /* NO,                         */
         CLI   CHLEVL,2                                            0275
         BE    @RF00275                                            0275
*             DO;                                                  0276
*             /* PASSWORDS ARE NOT SUPPORTED, BUT THE CHANGE LEVEL 0277
*                IS NOT THE PASSWORD LEVEL. IF A PASSWORD IS       0277
*                SPECIFIED, CONTINUE THE SEARCH IN THE NEXT USERID 0277
*                TREE. IF NOT, CONTINUE AT THE ACCTNMBR LEVEL.       */
*             IF PASSWD(1) = '*'                                   0277
*               THEN                  /* PASSWORD NOT SPECIFIED,     */
         CLI   PASSWD,C'*'                                         0277
         BE    @RT00277                                            0277
*                 GOTO ACLEVL;        /* GO CONTINUE WITH ACCTNMBR   */
*               ELSE                  /* PASSWORD SPECIFIED,         */
*                 GOTO MORUS;         /* CONTINUE WITH NEXT USERID   */
         B     MORUS                                               0279
*             END;                                                 0280
*         /* THE COMMAND IS INVALID FOR THIS USERID. IF THE        0281
*            NODELIST USERID = '*', PROCESSING CONTINUES WITH THE  0281
*            NEXT USRID. IF NOT, AN ERROR MESSAGE IS PUT OUT.        */
*         IF USIND = '1'B                                          0281
*           THEN                      /* USERID IS NOT SPECIFIED     */
@RF00275 TM    USIND,B'10000000'                                   0281
         BO    @RT00281                                            0281
*             GOTO MORUS;             /* CONTINUE WITH NEXT USERID   */
*         MSGNO = 7;                  /* SET ERROR MESSAGE NUMBER    */
         LA    MSGNO,7                                             0283
*         GOTO MPREP2;                /* GO CONSTRUCT THE MESSAGE    */
         B     MPREP2                                              0284
*PWSPRT:  /* PASSWORDS ARE SUPPORTED FOR THIS USER. SET FLAG         */
*         /* TO INDICATE THAT PASSWORD SUPPORT EXISTS IN THE UADS    */
*         /* FOR AT LEAST ONE USER.                                  */
*         PWSUPFLG = '1'B;                                         0285
PWSPRT   OI    PWSUPFLG,B'00001000'                                0285
*         /* CHECK WHETHER A PASSWORD WAS SPECIFIED IN THE NODELIST. */
*         /* IF YES, THEN ENTER THE PASSWORD SEARCH LOOP.            */
*         IF PASSWD(1:2) = '* '                                    0286
*           THEN                      /* PASSWORD NOT SPECIFIED,     */
         CLC   PASSWD(2),@CC00380                                  0286
         BNE   @RF00286                                            0286
*             /* IF THE PASSWORD LEVEL IS ALSO THE CHANGE LEVEL, THEN
*                NO SEARCH IS REQUIRED, SINCE PASSWORD = '*'.        */
*             IF CHLEVL = 2                                        0287
*               THEN                  /* CHGE LEVL = PASSWD LEVL,    */
         CLI   CHLEVL,2                                            0287
         BE    @RT00287                                            0287
*                 GOTO WORKER;        /* GO TO PASSWD/ACCTNMBR RTNE
*                                        TO MAKE REQUIRED CHANGES    */
*               ELSE                                               0289
*                 GOTO ACLEVL;        /* CONTINUE ON ACTNBR LEVEL    */
         B     ACLEVL                                              0289
*         /* SEARCH FOR THE PASSWORD SPECIFIED IN THE NODELIST       */
*         LOOPFLG = '0'B;             /* RESET LOOP FLAG             */
@RF00286 NI    LOOPFLG,B'01111111'                                 0290
*         DO WHILE LOOPFLG = '0'B;                                 0291
         B     @DE00291                                            0291
@DL00291 DS    0H                                                  0292
*         /* CHECK THE CHAIN FLAG. IF IT IS '1', INDICATING END OF   */
*         /* LATERAL CHAIN, THEN THE SPECIFIED PASSWORD DOES NOT     */
*         /* EXIST IN THIS USERID TREE.                              */
*           UADSPPTR = HEDBPTR+UADSPDAT;/* REFERENCE THE PASSWORD DATA
*                                          BLOCK IN THE UADS         */
         LR    UADSPPTR,HEDBPTR                                    0292
         AL    UADSPPTR,UADSPDAT(,DPOBPTR)                         0292
*           /* COMPARE THE UADS-PASSWORD TO THE NODELIST-PASSWORD    */
*           IF UADSPPWD = PASSWD      /* ARE THEY EQUAL?             */
*             THEN                    /* YES, THE SPECIFIED PASSWORD
*                                        HAS BEEN FOUND              */
         CLC   UADSPPWD(8,UADSPPTR),PASSWD                         0293
         BNE   @RF00293                                            0293
*               DO;                                                0294
*                 PWFNDFLG = '1'B;    /* INDICATE PASSWORD EXISTS    */
         OI    PWFNDFLG,B'01000000'                                0295
*                 PASSADDR = DPOBPTR; /* PUT PTR TO PASSWD OBLK INTO
*                                         CHANGE CONTROL TABLE       */
         ST    DPOBPTR,PASSADDR                                    0296
*                 /* IF THE PASSWORD LEVEL IS ALSO THE CHANGE LEVEL, */
*                 /* THEN PASS CONTROL TO THE WORKER RTNE (IKJEFA22).*/
*                 IF CHLEVL = 2                                    0297
*                   THEN              /* PASSWORD = CHANGE LEVEL     */
         CLI   CHLEVL,2                                            0297
         BE    @RT00297                                            0297
*                     GOTO WORKER;    /* WORKER WILL MAKE THE REQUIRED
*                                        CHANGES TO THIS TREE        */
*                   ELSE                                           0299
*                     GOTO ACLEVL;    /* THE SPECIFIED PASSWORD HAS
*                                        BEEN FOUND. GO TO SEARCH  0299
*                                        FOR ACCTNMBR                */
         B     ACLEVL                                              0299
*               END;                                               0300
*           IF PFLG01 = '1'B          /* IS THIS THE LAST PASSWORD?  */
*             THEN                    /* YES,                        */
@RF00293 TM    PFLG01(DPOBPTR),B'10000000'                         0301
         BNO   @RF00301                                            0301
*               LOOPFLG = '1'B;       /* TERMINATE LOOP              */
         OI    LOOPFLG,B'10000000'                                 0302
*             ELSE                                                 0303
*               DPOBPTR =             /* ADDR OF NEXT OFFSET BLOCK = */
*                 HEDBPTR+UADSPNEX;   /* ..ADDR OF USERID HEADER + 0303
*                                        OFFSET TO BROTHER           */
         B     @RC00301                                            0303
@RF00301 LR    @10,HEDBPTR                                         0303
         L     @02,UADSPNEX-1(,DPOBPTR)                            0303
         LA    @02,0(,@02)                                         0303
         ALR   @10,@02                                             0303
         LR    DPOBPTR,@10                                         0303
*         END;                                                     0304
@RC00301 DS    0H                                                  0304
@DE00291 TM    LOOPFLG,B'10000000'                                 0304
         BZ    @DL00291                                            0304
*         /* CHECK WHETHER THERE ARE MORE USERIDS TO BE PROCESSED.   */
*         GOTO MORUS;                 /* SEARCH FOR THIS PASSWORD  0305
*                                        UNDER THE NEXT USERID       */
         B     MORUS                                               0305
*ACLEVL:  /***********************************************************/
*         /* THIS SECTION WILL SEARCH FOR THE ACCTNMBR SPECIFIED IN  */
*         /* THE NODELIST OF THE CHANGE COMMAND. IF NONE WAS SPECI-  */
*         /* FIED ('*' IN THE ACCTNMBR POSITION), THEN THE CHANGE    */
*         /* LEVEL (CHLEVL) WILL DETERMINE WHERE PROCESSING IS TO    */
*         /* CONTINUE.                                               */
*         /***********************************************************/
*         DNOBPTR = HEDBPTR+UADSPSUB; /* REF THE 1ST ACCTNMBR OBLK 0306
*                                        IN THE LOCAL CHAIN          */
ACLEVL   LR    DNOBPTR,HEDBPTR                                     0306
         AL    DNOBPTR,UADSPSUB(,DPOBPTR)                          0306
*         ACCTADDR = DNOBPTR;         /* SAVE ADDRESS OF THIS OBLK   */
         ST    DNOBPTR,ACCTADDR                                    0307
*         /* ARE ACCOUNT NUMBERS SUPPORTED FOR THIS USERID?          */
*         IF UADSADAT ^= 0                                         0308
*           THEN                      /* YES,                        */
         L     @10,UADSADAT(,DNOBPTR)                              0308
         LTR   @10,@10                                             0308
         BNZ   @RT00308                                            0308
*             GOTO ACSPRT;            /* CONTINUE NORMALLY           */
*         /* ACCTNMBRS ARE NOT SUPPORTED FOR THIS USER. IF THE       */
*         /* CHANGE LEVEL IS THE ACCTNMBR LEVEL, THEN THE COMMAND    */
*         /* IS INVALID FOR THIS USERID.                             */
*         IF CHLEVL = 3               /* CHANGE LVL = ACCTNO LVL?    */
*           THEN                      /* YES,                        */
         CLI   CHLEVL,3                                            0310
         BNE   @RF00310                                            0310
*             DO;                                                  0311
*             /* THE COMMAND IS INVALID FOR THIS USERID. IF THE    0312
*                NODELIST USERID = '*', PROCESSING CONTINUES WITH THE
*                NEXT USRID. IF NOT, AN ERROR MESSAGE IS PUT OUT.    */
*             IF USIND = '1'B                                      0312
*               THEN                  /* USERID IS NOT SPECIFIED     */
         TM    USIND,B'10000000'                                   0312
         BO    @RT00312                                            0312
*                 GOTO MORUS;         /* CONTINUE WITH NEXT USERID   */
*             MSGNO = 8;              /* SET ERROR MESSAGE NUMBER    */
         LA    MSGNO,8                                             0314
*             GOTO MPREP2;            /* GO CONSTRUCT THE MESSAGE    */
         B     MPREP2                                              0315
*             END;                                                 0316
*         /* ACCTNMBRS ARE NOT SUPPORTED, BUT THE CHANGE LEVEL IS  0317
*            THE PROCNAME LEVEL. IF AN ACCTNMBR IS SPECIFIED, CON- 0317
*            TINUE THE SEARCH IN THE NEXT USERID TREE. IF NOT, CON-
*            TINUE AT THE PROCNAME LEVEL.                            */
*         IF ACCTNO(1:2) = '* '                                    0317
*           THEN                      /* ACCTNMBR NOT SPECIFIED,     */
@RF00310 CLC   ACCTNO(2),@CC00380                                  0317
         BE    @RT00317                                            0317
*             GOTO PRLEVL;            /* GO CONTINUE WITH PROCNAME   */
*           ELSE                      /* ACCTNMBR SPECIFIED,         */
*             GOTO MORUS;             /* CONTINUE WITH NEXT USERID   */
         B     MORUS                                               0319
*ACSPRT:  /* ACCOUNT NUMBERS ARE SUPPORTED FOR THIS USER. SET FLAG   */
*         /* TO INDICATE THAT ACCTNMBR SUPPORT EXISTS IN THE UADS    */
*         /* FOR AT LEAST ONE USER.                                  */
*         ACSUPFLG = '1'B;                                         0320
ACSPRT   OI    ACSUPFLG,B'00000100'                                0320
*         /* CHECK WHETHER AN ACCTNMBR WAS SPECIFIED IN THE NODELIST */
*         /* IF YES, THEN ENTER THE ACCTNMBR SEARCH LOOP.            */
*         IF ACCTNO(1:2) = '* '                                    0321
*           THEN                      /* ACCTNMBR NOT SPECIFIED,     */
         CLC   ACCTNO(2),@CC00380                                  0321
         BNE   @RF00321                                            0321
*             DO;                                                  0322
*             /* IF THE ACCTNMBR LEVEL IS ALSO THE CHANGE LEVEL, THEN
*                NO SEARCH IS REQUIRED, SINCE ACCTNMBR = '*'.        */
*             IF CHLEVL = 3                                        0323
*               THEN                  /* CHGE LEVL = ACTNBR LEVL,    */
         CLI   CHLEVL,3                                            0323
         BE    @RT00323                                            0323
*                 GOTO WORKER;        /* GO TO PASSWD/ACCTNMBR RTNE
*                                        TO MAKE REQUIRED CHANGES    */
*               ELSE                                               0325
*                 GOTO PRLEVL;        /* CONTINUE ON PROCNAME LEVEL  */
         B     PRLEVL                                              0325
*         END;                                                     0326
*         /* SEARCH FOR THE ACCOUNT NUMBER SPECIFIED IN THE NODELIST */
*         LOOPFLG = '0'B;             /* RESET LOOP FLAG             */
@RF00321 NI    LOOPFLG,B'01111111'                                 0327
*         DO WHILE LOOPFLG = '0'B;    /* LOOP TILL END OF CHAIN      */
         B     @DE00328                                            0328
@DL00328 DS    0H                                                  0329
*           UADSAPTR = HEDBPTR+UADSADAT;/* REFERENCE THE ACCTNMBR  0329
*                                          DATA BLOCK IN THE UADS    */
         LR    UADSAPTR,HEDBPTR                                    0329
         AL    UADSAPTR,UADSADAT(,DNOBPTR)                         0329
*           /* COMPARE THE LENGTHS IN THE DATA BLOCK AND NODELIST. IF
*              THE LENGTHS ARE NOT EQUAL, A COMPARISON OF THE ACCOUNT
*              NUMBERS IS UNNECESSARY                                */
*           IF UADSALEN = ACTLEN      /* LENGTHS EQUAL?              */
*             & UADSANUM(1:UADSALEN)= /* ACCTNMBRS EQUAL?            */
*                ACCTNO(1:UADSALEN)                                0330
*               THEN                  /* THEY ARE EQUAL              */
         CLC   UADSALEN(1,UADSAPTR),ACTLEN                         0330
         BNE   @RF00330                                            0330
         SLR   @10,@10                                             0330
         IC    @10,UADSALEN(,UADSAPTR)                             0330
         BCTR  @10,0                                               0330
         EX    @10,@SC00448                                        0330
         BNE   @RF00330                                            0330
*                 DO;                                              0331
*                   ACFNDFLG = '1'B;  /* INDICATE ACCTNMBR EXISTS    */
         OI    ACFNDFLG,B'00100000'                                0332
*                   PASSADDR = DPOBPTR;/* PUT PTR TO PASSWD OBLK INTO
*                                         CHANGE CONTROL TABLE       */
         ST    DPOBPTR,PASSADDR                                    0333
*                   ACCTADDR = DNOBPTR;/* PUT PTR TO ACCTNO OBLK INTO
*                                         CHANGE CONTROL TABLE       */
         ST    DNOBPTR,ACCTADDR                                    0334
*                   /* IF THE ACCTNMBR LEVEL IS ALSO THE CHANGE      */
*                   /* LEVEL, THEN PASS CONTROL TO THE WORKER        */
*                   /* ROUTINE (IKJEFA22).                           */
*                   IF CHLEVL = 3                                  0335
*                     THEN            /* ACCTNMBR = CHANGE LEVEL     */
         CLI   CHLEVL,3                                            0335
         BE    @RT00335                                            0335
*                       GOTO WORKER;  /* WORKER WILL MAKE THE REQUIRED
*                                        CHANGES TO THIS TREE        */
*                   GOTO PRLEVL;      /* THE SPECIFIED ACCTNMBR HAS
*                                        BEEN FOUND. START PROCESSING
*                                        THE PROCNAME                */
         B     PRLEVL                                              0337
*                 END;                                             0338
*           IF AFLG01 = '1'B          /* IS THIS THE LAST ACCTNO. ?  */
*             THEN                    /* YES,                        */
@RF00330 TM    AFLG01(DNOBPTR),B'10000000'                         0339
         BNO   @RF00339                                            0339
*               LOOPFLG = '1'B;       /* TERMINATE LOOP              */
         OI    LOOPFLG,B'10000000'                                 0340
*             ELSE                                                 0341
*               DNOBPTR =             /* REFERENCE THE NEXT OFFSET   */
*                 HEDBPTR+UADSANEX;   /*   BLOCK IN THIS CHAIN     0341
*                                          CONTINUE THE SEARCH       */
         B     @RC00339                                            0341
@RF00339 LR    @10,HEDBPTR                                         0341
         L     @07,UADSANEX-1(,DNOBPTR)                            0341
         LA    @07,0(,@07)                                         0341
         ALR   @10,@07                                             0341
         LR    DNOBPTR,@10                                         0341
*         END;                                                     0342
@RC00339 DS    0H                                                  0342
@DE00328 TM    LOOPFLG,B'10000000'                                 0342
         BZ    @DL00328                                            0342
*         /* CHECK THE CHAIN FLAG IN THE PASSWORD OFFSET BLOCK.      */
*         IF PASSWD(1:2) = '* '       /* IF NODELIST PASSWORD = *    */
*           & PFLG01 = '0'B           /* AND THERE ARE MORE PASSWORDS*/
*             THEN                    /* YES                         */
         CLC   PASSWD(2),@CC00380                                  0343
         BNE   @RF00343                                            0343
         TM    PFLG01(DPOBPTR),B'10000000'                         0343
         BNZ   @RF00343                                            0343
*               DO;                                                0344
*               DPOBPTR = HEDBPTR     /* REF NEXT PASSWORD OBLK      */
*                 +UADSPNEX;                                       0345
         LR    @10,HEDBPTR                                         0345
         L     @02,UADSPNEX-1(,DPOBPTR)                            0345
         LA    @02,0(,@02)                                         0345
         ALR   @10,@02                                             0345
         LR    DPOBPTR,@10                                         0345
*               GOTO ACLEVL;          /* CONTINUE THE SEARCH FOR THIS
*                                        ACCTNMBR UNDER THE NEXT PASS-
*                                        WORD                        */
         B     ACLEVL                                              0346
*               END;                                               0347
*         /* CHECK WHETHER THIS TREE HAS BEEN CHANGED. IF NOT, THEN  */
*         /* THIS WAS THE FIRST SEARCH FOR THE NODELIST ACCTNMBR     */
*         /* IN THIS TREE AND IT DOES NOT EXIST THERE.               */
*         IF TRCHGE = '1'B            /* HAS THE TREE BEEN CHANGED?  */
*           THEN                      /* YES,                        */
@RF00343 TM    TRCHGE,B'10000000'                                  0348
         BO    @RT00348                                            0348
*             GOTO CHKMAX;            /* WRITE THIS TREE BACK INTO 0349
*                                        THE UADS                    */
*         /* CHECK WHETHER THERE ARE MORE USERIDS TO BE PROCESSED.   */
*         GOTO MORUS;                 /* CONTINUE THE SEARCH FOR THIS
*                                        ACCTNMBR UNDER THE NEXT   0350
*                                        USERID                      */
         B     MORUS                                               0350
*PRLEVL:  /***********************************************************/
*         /* THIS SECTION WILL SEARCH FOR THE NODELIST PROCNAME, IF  */
*         /* ONE WAS SPECIFIED. IF AN '*' WAS ENTERED IN THE PROC-   */
*         /* NAME POSITION, OR AFTER THE SPECIFIED PROCNAME HAS      */
*         /* BEEN FOUND, CONTROL WILL BE PASSED TO THE PROCNAME      */
*         /* ROUTINE (IKJEFA23).                                     */
*         /***********************************************************/
*         DROBPTR = HEDBPTR+UADSASUB; /* REF THE 1ST PROCNAME OBLK 0351
*                                        IN THE LOCAL CHAIN          */
PRLEVL   LR    DROBPTR,HEDBPTR                                     0351
         AL    DROBPTR,UADSASUB(,DNOBPTR)                          0351
*         PROCADDR = DROBPTR;         /* SAVE ADDR OF THIS OBLK      */
         ST    DROBPTR,PROCADDR                                    0352
*         /* CHECK WHETHER A PROCNAME WAS SPECIFIED IN THE NODELIST. */
*         IF PROCNM(1) = '*'                                       0353
*           THEN                      /* AN '*' WAS SPECIFIED,       */
         CLI   PROCNM,C'*'                                         0353
         BE    @RT00353                                            0353
*             GOTO WORKER;            /* GO TO THE PROCNAME RTNE TO
*                                        MAKE THE REQUIRED CHANGES   */
*         /* THIS SECTION OF CODE WILL SEARCH FOR THE NODELIST PROC- */
*         /* NAME.                                                   */
*         LOOPFLG = '0'B;             /* RESET LOOP FLAG             */
         NI    LOOPFLG,B'01111111'                                 0355
*         DO WHILE LOOPFLG = '0'B;    /* LOOP TILL END OF CHAIN      */
         B     @DE00356                                            0356
@DL00356 DS    0H                                                  0357
*           UADSRPTR = HEDBPTR+UADSRDAT;/* REFERENCE THE DATA FIELD  */
         LR    UADSRPTR,HEDBPTR                                    0357
         AL    UADSRPTR,UADSRDAT(,DROBPTR)                         0357
*           /* COMPARE THE NODELIST PROCNAME TO THE PROCNAME IN THE
*              DATA FIELD.                                           */
*           IF PROCNM = UADSRNAM      /* IS THIS THE NODELST PROCNM? */
*             THEN                    /* YES,                        */
         CLC   PROCNM(8),UADSRNAM(UADSRPTR)                        0358
         BNE   @RF00358                                            0358
*               DO;                                                0359
*               PRFNDFLG = '1'B;      /* INDICATE PROCNAME EXISTS    */
         OI    PRFNDFLG,B'00010000'                                0360
*               PASSADDR = DPOBPTR;    /* PUT PTR TO PASSWD OBLK INTO
*                                         CHANGE CONTROL TABLE       */
         ST    DPOBPTR,PASSADDR                                    0361
*               ACCTADDR = DNOBPTR;    /* PUT PTR TO ACCTNO OBLK INTO
*                                         CHANGE CONTROL TABLE       */
         ST    DNOBPTR,ACCTADDR                                    0362
*               PROCADDR = DROBPTR;   /* PUT PTR TO PROC OBLK INTO 0363
*                                        CHANGE CONTROL TABLE        */
         ST    DROBPTR,PROCADDR                                    0363
*               GOTO WORKER;          /* THE PROCNAME RTNE WILL MAKE
*                                        THE NECESSARY CHANGES       */
         B     WORKER                                              0364
*             END;                                                 0365
*           IF FLGR01 = '1'B          /* IS THIS THE LAST PROCEDURE? */
*             THEN                    /* YES,                        */
@RF00358 TM    FLGR01(DROBPTR),B'10000000'                         0366
         BNO   @RF00366                                            0366
*               LOOPFLG = '1'B;       /* TERMINATE LOOP              */
         OI    LOOPFLG,B'10000000'                                 0367
*             ELSE                                                 0368
*               DROBPTR =             /* REFERENCE THE NEXT PROCNAME */
*                 HEDBPTR+UADSRNEX;   /*  OFFSET BLOCK AND CONTINUE
*                                         THE SEARCH                 */
         B     @RC00366                                            0368
@RF00366 LR    @10,HEDBPTR                                         0368
         L     @07,UADSRNEX-1(,DROBPTR)                            0368
         LA    @07,0(,@07)                                         0368
         ALR   @10,@07                                             0368
         LR    DROBPTR,@10                                         0368
*         END;                                                     0369
@RC00366 DS    0H                                                  0369
@DE00356 TM    LOOPFLG,B'10000000'                                 0369
         BZ    @DL00356                                            0369
*         /* ARE THERE MORE ACCTNMBRS TO BE PROCESSED IN THIS LOCAL  */
*         /* ACCTNMBR CHAIN?                                         */
*         /* IF AN ACCTNMBR WAS SPECIFIED, THEN GO CHECK FOR MORE    */
*         /* PASSWORDS.                                              */
*         IF ACCTNO(1:2) = '* '       /* IS ACCTNMBR SPECIFIED?      */
*           & AFLG01 = '0'B           /* MORE ACCTNMBRS IN THIS    0370
*                                        LOCAL CHAIN?                */
*               THEN                  /* YES,                        */
         CLC   ACCTNO(2),@CC00380                                  0370
         BNE   @RF00370                                            0370
         TM    AFLG01(DNOBPTR),B'10000000'                         0370
         BNZ   @RF00370                                            0370
*                 DO;                                              0371
*                   DNOBPTR = HEDBPTR /* REFERENCE THE NEXT ACCTNMBR */
*                     +UADSANEX;      /* ..OFFSET BLOCK AND..        */
         LR    @10,HEDBPTR                                         0372
         L     @07,UADSANEX-1(,DNOBPTR)                            0372
         LA    @07,0(,@07)                                         0372
         ALR   @10,@07                                             0372
         LR    DNOBPTR,@10                                         0372
*                   GOTO PRLEVL;      /* GO SEARCH UNDER NEXT ACTNMR */
         B     PRLEVL                                              0373
*                 END;                                             0374
*         /* IF A PASSWORD WAS SPECIFIED, THEN THE PROCNAME WAS      */
*         /* NOT FOUND IN THIS TREE (OR NOT FOUND AGAIN).            */
*         IF PASSWD(1:2) = '* '       /* IS PASSWORD SPECIFIED?      */
*           & PFLG01 = '0'B           /* MORE PASSWORDS?             */
*               THEN                  /* YES,                        */
@RF00370 CLC   PASSWD(2),@CC00380                                  0375
         BNE   @RF00375                                            0375
         TM    PFLG01(DPOBPTR),B'10000000'                         0375
         BNZ   @RF00375                                            0375
*                 DO;                                              0376
*                   DPOBPTR = HEDBPTR /* REFERENCE THE NEXT PASSWORD */
*                     +UADSPNEX;      /* ..OFFSET BLOCK AND..        */
         LR    @10,HEDBPTR                                         0377
         L     @02,UADSPNEX-1(,DPOBPTR)                            0377
         LA    @02,0(,@02)                                         0377
         ALR   @10,@02                                             0377
         LR    DPOBPTR,@10                                         0377
*                   GOTO ACLEVL;      /* GO SEARCH UNDER NEXT PASSWD */
         B     ACLEVL                                              0378
*                 END;                                             0379
*         /* CHECK WHETHER THIS TREE HAS BEEN CHANGED. IF NOT, THEN  */
*         /* THIS WAS THE FIRST SEARCH FOR THE NODELIST PROCNAME     */
*         /* IN THIS TREE AND IT DOES NOT EXIST THERE.               */
*         IF TRCHGE = '1'B            /* HAS THE TREE BEEN CHANGED?  */
*           THEN                      /* YES,                        */
@RF00375 TM    TRCHGE,B'10000000'                                  0380
         BO    @RT00380                                            0380
*             GOTO CHKMAX;            /* WRITE THIS TREE BACK INTO 0381
*                                        THE UADS                    */
*         GOTO MORUS;                 /* CHECK FOR MORE USERS        */
         B     MORUS                                               0382
*WORKER:  /***********************************************************/
*         /*                                                         */
*         /* THE PASSWORD/ACCTNMBR RTNE (IKJEFA22) AND THE PROCNAME  */
*         /* ROUTINE (IKJEFA23) WILL MAKE THE REQUIRED CHANGES AT    */
*         /* ALL LEVELS BELOW THE USERID LEVEL.                      */
*         /*                                                         */
*         /***********************************************************/
*         /* BUILD THE CONTROL TABLE FOR IKJEFA22/23.                */
*         BLOKCNT = ACIONMBR;         /* NO. OF BLOCKS READ IN       */
WORKER   IC    @10,ACIONMBR                                        0383
         STC   @10,BLOKCNT                                         0383
*         HEADADDR = HEDBPTR;         /* PTR TO THE USER HEADER      */
         STCM  HEDBPTR,7,HEADADDR                                  0384
*         RFY R1 RSTD;                /* RESTRICT PARAMETER REGISTER */
*         R1 = ADDR(CTRLTAB);         /* ADDR OF THE CONTROL TABLE   */
         LA    R1,CTRLTAB                                          0386
*         /* CHECK WHICH ROUTINE IS TO BE CALLED.                    */
*         IF CHLEVL = 4               /* CHANGE LEVEL = PROCNAME?    */
*           THEN                      /* YES,                        */
         CLI   CHLEVL,4                                            0387
         BNE   @RF00387                                            0387
*             CALL IKJEFA23;          /* GO TO PROCNAME RTNE         */
         L     @15,@CV00147                                        0388
         BALR  @14,@15                                             0388
*           ELSE                      /* NO, PASSWORD OR ACCTNMBR    */
*             CALL IKJEFA22;          /* GO TO PASSWD/ACTNMBR RTNE   */
         B     @RC00387                                            0389
@RF00387 L     @15,@CV00146                                        0389
         BALR  @14,@15                                             0389
*         RFY R1 UNRSTD;              /* RELEASE PARAMETER REGISTER  */
@RC00387 DS    0H                                                  0391
*         /* CHECK WHETHER A SEARCH LOOP HAS TO BE REENTERED.        */
*         /* ARE THERE MORE ACCTNMBRS TO BE PROCESSED IN THIS LOCAL  */
*         /* ACCTNMBR CHAIN?                                         */
*         IF SRCHIND = 2              /* IS ACCTNMBR SEARCH NEEDED?  */
*           THEN                      /* YES,                        */
         CLI   SRCHIND,2                                           0391
         BNE   @RF00391                                            0391
*             DO;                                                  0392
*             DNOBPTR = ACCTADDR;     /* REFERENCE THE NEXT ACCTNMBR
*                                        ..OFFSET BLOCK AND..        */
         L     DNOBPTR,ACCTADDR                                    0393
*             GOTO PRLEVL;            /* GO SEARCH UNDER NEXT ACTNMR */
         B     PRLEVL                                              0394
*             END;                                                 0395
*         /* IF A PASSWORD WAS SPECIFIED, THEN THE PROCNAME WAS      */
*         /* NOT FOUND IN THIS TREE (OR NOT FOUND AGAIN).            */
*         IF SRCHIND = 1              /* IS PASSWORD SEARCH NEEDED?  */
*           THEN                      /* YES,                        */
@RF00391 CLI   SRCHIND,1                                           0396
         BNE   @RF00396                                            0396
*             DO;                                                  0397
*             DPOBPTR = PASSADDR;     /* REFERENCE THE NEXT PASSWORD
*                                        ..OFFSET BLOCK AND..        */
         L     DPOBPTR,PASSADDR                                    0398
*             GOTO ACLEVL;            /* GO SEARCH UNDER NEXT PASSWD */
         B     ACLEVL                                              0399
*             END;                                                 0400
*MSGCHK:  /* CHECK THE MESSAGE NUMBER SET BY IKJEFA22/23. IF IT IS   */
*         /* NOT ZERO, THEN ISSUE THE INDICATED ERROR MESSAGE.       */
*         IF MSGNMBR = 0              /* SUCCESSFUL COMPLETION?      */
*           THEN                      /* YES,                        */
@RF00396 DS    0H                                                  0401
MSGCHK   CLI   MSGNMBR,0                                           0401
         BE    @RT00401                                            0401
*             GOTO CHKMAX;            /* CONTINUE PROCESSING         */
*         /* CHECK WHETHER THE NEW PROCSIZE WAS REDUCED TO MAXSIZE.  */
*         /* THE USER WILL BE INFORMED OF THIS ACTION AFTER THE TREE */
*         /* HAS BEEN WRITTEN BACK SUCCESSFULLY. IT IS NOT AN ERROR. */
*         IF MSGNMBR = 14                                          0403
*           THEN                      /* PROCSIZE WAS REDUCED,       */
         CLI   MSGNMBR,14                                          0403
         BNE   @RF00403                                            0403
*             DO;                                                  0404
*               STGFLG = '1'B;        /* MSG WILL BE ISSUED LATER    */
         OI    STGFLG,B'00010000'                                  0405
*               GOTO CHKMAX;          /* CONTINUE NORMALLY           */
         B     CHKMAX                                              0406
*             END;                                                 0407
*         /* ACCOUNT FREESPACE FAILURE?                              */
*         IF MSGNMBR = 24                                          0408
*           THEN                      /* FREESPACE FAILURE           */
@RF00403 CLI   MSGNMBR,24                                          0408
         BNE   @RF00408                                            0408
*             DO;                                                  0409
*               MSGNO = 24;           /* SET MSG NUMBER              */
         LA    MSGNO,24                                            0410
*               GOTO MLMSG;           /* GO CONSTRUCT THE MSG        */
         B     MLMSG                                               0411
*             END;                                                 0412
*         /* ERROR IS NOT SERIOUS - PROCESSING CAN CONTINUE          */
*         MSGNO = MSGNMBR;            /* SET MSG NUMBER              */
@RF00408 SLR   MSGNO,MSGNO                                         0413
         IC    MSGNO,MSGNMBR                                       0413
*         GOTO MPREP1;                /* CONTINUE MSG CONSTRUCTION   */
         B     MPREP1                                              0414
*CHKMAX:  /* ALL REQUIRED CHANGES, EXCLUDING THE USERID ITSELF, HAVE */
*         /* NOW BEEN MADE. ONE LAST CHECK, HOWEVER, IS NECESSARY.   */
*         /* IF THE VALUE OF MAXSIZE WAS DECREASED, THEN IT IS POS-  */
*         /* SIBLE THAT A PROCSIZE IS NOW LARGER THAN THE NEW VALUE  */
*         /* OF MAXSIZE. IF THIS CONDITION EXISTS, AN ERROR MESSAGE  */
*         /* WILL BE ISSUED AND THIS TREE WILL NOT BE WRITTEN BACK   */
*         /* INTO THE UADS.                                          */
*         /* IF MAXSIZE IS 'NOLIM', OR IF IT WAS NOT CHANGED, THEN   */
*         /* THE TEST IS NOT NECESSARY.                              */
*         IF UADSMAXC = 0             /* MAXSIZE = 'NOLIM'?          */
*          × MAXSKEY(16) = '0'B       /* OR UNCHANGED?               */
*           THEN                      /* YES, ONE OF THE ABOVE       */
CHKMAX   LH    @10,UADSMAXC(,HEDBPTR)                              0415
         N     @10,@CF00445                                        0415
         LTR   @10,@10                                             0415
         BZ    @RT00415                                            0415
         L     @10,CHPDLPTR                                        0415
         TM    MAXSKEY+1(@10),B'00000001'                          0415
         BZ    @RT00415                                            0415
*             GOTO ENQUSER;           /* BYPASS PROCSIZE COMPARISON  */
*         DPOBPTR = HEDBPTR+UADSPWD1; /* REF 1ST PASSWORD OBLK       */
         LR    DPOBPTR,HEDBPTR                                     0417
         AL    DPOBPTR,UADSPWD1(,HEDBPTR)                          0417
*         DNOBPTR = HEDBPTR+UADSPSUB; /* REF 1ST ACCTNMBR OBLK       */
         LR    DNOBPTR,HEDBPTR                                     0418
         AL    DNOBPTR,UADSPSUB(,DPOBPTR)                          0418
*         DROBPTR = HEDBPTR+UADSASUB; /* REF 1ST PROCNAME OBLK       */
         LR    DROBPTR,HEDBPTR                                     0419
         AL    DROBPTR,UADSASUB(,DNOBPTR)                          0419
*         /* BEGINNING OF PROCSIZE COMPARISON LOOP.                  */
*         LOOPFLG = '0'B;             /* RESET LOOP FLAG             */
         NI    LOOPFLG,B'01111111'                                 0420
*         DO WHILE LOOPFLG = '0'B;    /* LOOP TILL END OF CHAIN      */
         B     @DE00421                                            0421
@DL00421 DS    0H                                                  0422
*           UADSRPTR = HEDBPTR+UADSRDAT;/* REF PROCNAME DATA FIELD   */
         LR    UADSRPTR,HEDBPTR                                    0422
         AL    UADSRPTR,UADSRDAT(,DROBPTR)                         0422
*           /* IS THIS PROCSIZE LARGER THAN MAXSIZE?                 */
*           IF UADSRSIZ > UADSMAXC                                 0423
*             THEN                    /* YES,                        */
         CLC   UADSRSIZ(2,UADSRPTR),UADSMAXC(HEDBPTR)              0423
         BNH   @RF00423                                            0423
*               DO;                                                0424
*               MSGNO = 13;           /* SET MSG NUMBER              */
         LA    MSGNO,13                                            0425
*               CNTNFLG = '1'B;       /* TURN CONTINUATION FLAG ON   */
         OI    CNTNFLG,B'00100000'                                 0426
*               CALL MSGFNDR;         /* GO CALCULATE THE MSG ADDR   */
         BAL   @14,MSGFNDR                                         0427
*               INSRTL2 = MAXSLNG+4;  /* LENGTH OF MSG SEGMENT       */
         L     @10,CHPDLPTR                                        0428
         LH    @05,MAXSLNG(,@10)                                   0428
         LA    @01,4(,@05)                                         0428
         STH   @01,INSRTL2                                         0428
*               INSRTT2(1:MAXSLNG) = MAXSIZE;/* INSERT MAXSIZE IN MSG*/
         BCTR  @05,0                                               0429
         L     @10,MAXSADR(,@10)                                   0429
         EX    @05,@SM00450                                        0429
*               SEGPTR15 = ADDR(INSRT2);/* SET PTR TO ACTIVE INSERT  */
         LA    @10,INSRT2                                          0430
         ST    @10,SEGPTR15                                        0430
*               GOTO MPREP3;          /* CONTINUE MSG CONSTRUCTION   */
         B     MPREP3                                              0431
*               END;                                               0432
*           IF UADSRNEX = 0           /* IS THIS THE LAST PROCEDURE? */
*             THEN                    /* YES,                        */
@RF00423 L     @10,UADSRNEX-1(,DROBPTR)                            0433
         LA    @10,0(,@10)                                         0433
         LTR   @10,@10                                             0433
         BNZ   @RF00433                                            0433
*               LOOPFLG = '1'B;       /* TERMINATE LOOP              */
         OI    LOOPFLG,B'10000000'                                 0434
*             ELSE                                                 0435
*               DROBPTR =             /* REFERENCE THE NEXT PROCNAME */
*                 HEDBPTR+UADSRNEX;   /*  OFFSET BLOCK AND CONTINUE
*                                         THE SEARCH                 */
         B     @RC00433                                            0435
@RF00433 LR    @10,HEDBPTR                                         0435
         L     @05,UADSRNEX-1(,DROBPTR)                            0435
         LA    @05,0(,@05)                                         0435
         ALR   @10,@05                                             0435
         LR    DROBPTR,@10                                         0435
*         END;                                                     0436
@RC00433 DS    0H                                                  0436
@DE00421 TM    LOOPFLG,B'10000000'                                 0436
         BZ    @DL00421                                            0436
*         /* ALL PROCSIZES HAVE BEEN COMPARED TO MAXSIZE. THE ABOVE  */
*         /* DESCRIBED ERROR CONDITION DOES NOT EXIST AND PROCESSING */
*         /* CONTINUES NORMALLY.                                     */
*ENQUSER: /***********************************************************/
*         /* THIS USERID TREE HAS BEEN CHANGED SUCCESSFULLY.         */
*         /* CONTROL WILL BE PASSED TO THE WRITE ROUTINE (IKJEFA52)  */
*         /* TO WRITE THIS TREE BACK INTO THE UADS. AFTER RETURN     */
*         /* FROM IKJEFA52, IT WILL BE DETERMINED WHETHER ANY MORE   */
*         /* USERID TREES MUST BE CHANGED ('*' IN THE USERID POSI-   */
*         /* TION OF THE NODELIST).                                  */
*         /***********************************************************/
*         /* CHECK WHETHER THE ECB WAS POSTED (ATTENTION INTERRUPT)  */
*         IF ATTENTN = '1'B                                        0437
*           THEN                      /* YES,                        */
ENQUSER  L     @10,ACCTPLP                                         0437
         L     @10,ACCTECBP(,@10)                                  0437
         TM    ATTENTN(@10),B'01000000'                            0437
         BO    @RT00437                                            0437
*             GOTO ACCTRET;           /* GO CLEAN UP & RETURN TO THE
*                                        ACCOUNT COMMAND PROCESSOR   */
*         /* ENQ ON THIS USERID BEFORE WRITING THE TREE BACK INTO    */
*         /* THE UADS. THE REQUEST IS FOR EXCLUSIVE CONTROL.         */
*         GEN (ENQ   (,USRLEN),MF=(E,USERENQ))                     0439
*           REFS(MAJNAME,USRLEN,USERENQ);                          0439
         ENQ   (,USRLEN),MF=(E,USERENQ)
*         /* IF REGISTER 15 IS NOT 0, THEN THIS USERID IS IN USE.    */
*         /* A MESSAGE TO THIS EFFECT WILL BE ISSUED AND PROCESSING  */
*         /* WILL CONTINUE WITH THE NEXT USERID (IF ANY). RETURN     */
*         /* CODE 8 IS NOT POSSIBLE SINCE THIS RTNE ISSUES ONLY ONE  */
*         /* ENQ REQUEST FOR EACH USERID.                            */
*         RFY R15 RSTD;               /* RESTRICT RETURN CODE REG    */
*         IF R15 ^= 0                                              0441
*           THEN                      /* USERID IS IN USE            */
         LTR   R15,R15                                             0441
         BZ    @RF00441                                            0441
*             DO;                                                  0442
*               MSGNO = 5;            /* SET MESSAGE NUMBER          */
         LA    MSGNO,5                                             0443
*               GOTO MPREP1;          /* CONTINUE MSG CONSTRUCTION   */
         B     MPREP1                                              0444
*             END;                                                 0445
*         RFY R15 UNRSTD;             /* RELEASE RETURN CODE REG     */
@RF00441 DS    0H                                                  0447
*         ENQFLG = '1'B;              /* 1- USERID IS ENQ'ED ON      */
         OI    ENQFLG,B'00000001'                                  0447
*         IF DUSRLEN = 0              /* NEW USERID SPECIFIED?       */
*           THEN                      /* NO,                         */
         CLI   DUSRLEN,0                                           0448
         BE    @RT00448                                            0448
*             GOTO WRTREE;                                         0449
*          IF UADSEXPF = '1'B         /* IS UADS EXPANDED?           */
*            THEN                     /* YES,                       1*/
         TM    UADSEXPF(HEDBPTR),B'01000000'                       0450
         BNO   @RF00450                                            0450
*              DO;                                                 0451
*              UPTPTR = HEDBPTR+UADSUPTP;/* POINT TO UPT IN UADS    1*/
         LR    UPTPTR,HEDBPTR                                      0452
         AL    UPTPTR,UADSUPTP(,HEDBPTR)                           0452
*              UPTPREFX = DUSRID(1:7);/* CHANGE USERID IN UPT       1*/
         MVC   UPTPREFX(7,UPTPTR),DUSRID                           0453
*              UPTPREFL = DUSRLEN;    /* SET LENGTH OF NEW USERID   1*/
         IC    @10,DUSRLEN                                         0454
         STC   @10,UPTPREFL(,UPTPTR)                               0454
*              END;                                                0455
*         /* THE USERID WILL BE CHANGED IN THE USER HEADER DATA      */
*         /* BLOCK AND IN THE DIRECTORY. THE STOW MACRO WILL BE      */
*         /* USED REPEATEDLY UNTIL ALL EXISTING EXTENTS OF THIS      */
*         /* USERID HAVE BEEN CHANGED IN THE DIRECTORY.              */
*         DUSRID(DUSRLEN+1) = '0';    /* INIT NEW USERID INDEX TO 0  */
@RF00450 SLR   @10,@10                                             0456
         IC    @10,DUSRLEN                                         0456
         LA    @02,DUSRID(@10)                                     0456
         MVI   0(@02),C'0'                                         0456
*         OLDUSER = USRID;            /* PUT OLD USERID INTO STOWLST */
         MVC   OLDUSER(8),USRID                                    0457
*         OLDUSER(USRLEN+1) = '0';    /* SET EXTENT NUMBER TO 0 FOR
*                                        FIRST STOW                  */
         SLR   @02,@02                                             0458
         IC    @02,USRLEN                                          0458
         LA    @01,OLDUSER(@02)                                    0458
         MVI   0(@01),C'0'                                         0458
*         NEWUSER = DUSRID;           /* PUT NEW USERID INTO LIST    */
         MVC   NEWUSER(8),DUSRID                                   0459
*         NEWINDP = ADDR(NEWUSER)+DUSRLEN;/* POINT TO NEW INDEX      */
         LA    NEWINDP,NEWUSER                                     0460
         ALR   NEWINDP,@10                                         0460
*         OLDINDP = ADDR(OLDUSER)+USRLEN;/* POINT TO OLD INDEX       */
         LA    OLDINDP,OLDUSER                                     0461
         ALR   OLDINDP,@02                                         0461
*         INDEX = 'F0'X;              /* INIT INDEX TO ZERO          */
         LA    INDEX,240                                           0462
*         DO WHILE INDEX<(ACIONMBR×'F0'X);/* LOOP TILL LAST MEMBER   */
         B     @DE00463                                            0463
@DL00463 DS    0H                                                  0464
*           /* ISSUE STOW MACRO TO CHANGE THE USERID IN THE UADS   0464
*              DIRECTORY. IF IT IS SUCCESSFUL, INCREMENT THE EXTENT
*              NUMBER AND REPEAT THE PROCESS UNTIL ALL MEMBER BLOCKS
*              HAVE BEEN CHANGED.  */                              0464
*           UADSUSER = NEWUSER;       /* INSERT THE NEW USERID INTO
*                                        THE HEADER                  */
         MVC   UADSUSER(8,HEDBPTR),NEWUSER                         0464
*           HEDBPTR = HEDBPTR+        /* POINT TO NEXT SUB-HEADER    */
*             UADSBLNG;                                            0465
         AH    HEDBPTR,UADSBLNG(,HEDBPTR)                          0465
*           GEN (STOW  UADDCB2,STOWLIST,C)                         0466
*             REFS(STOWLIST,UADDCB2);                              0466
         STOW  UADDCB2,STOWLIST,C
*           RFY R15 RSTD;             /* RESTRICT RETURN CODE REG    */
*           RETCODE = R15;            /* SAVE THE RETURN CODE        */
         ST    R15,RETCODE                                         0468
*           RFY R15 UNRSTD;           /* RELEASE RETURN CODE REG     */
*           INDEX = INDEX+1;          /* INCREMENT USERID INDEX      */
         LA    INDEX,1(,INDEX)                                     0470
*           OLDIND = INDEX;           /* PUT INDEX INTO OLD NAME     */
         STC   INDEX,OLDIND(,OLDINDP)                              0471
*           NEWIND = INDEX;           /* PUT INDEX INTO NEW NAME     */
         STC   INDEX,NEWIND(,NEWINDP)                              0472
*           /* CHECK FOR ERROR CONDITION.                            */
*           IF RETCODE = 4            /* NEW USERID ALREADY IN THE 0473
*                                        DIRECTORY?                  */
*             THEN                    /* YES,                        */
         L     @10,RETCODE                                         0473
         C     @10,@CF00049                                        0473
         BNE   @RF00473                                            0473
*               DO;                                                0474
*               USRLEN = DUSRLEN;     /* SWITCH LENGTH OF NEW USERID */
         IC    @10,DUSRLEN                                         0475
         STC   @10,USRLEN                                          0475
*               USRID = DUSRID;       /* SWITCH NAME OF NEW USERID   */
         MVC   USRID(8),DUSRID                                     0476
*               MSGNO = 6;            /* SET MESSAGE NUMBER          */
         LA    MSGNO,6                                             0477
*               GOTO MPREP2;          /* GO CONSTRUCT THE MSG        */
         B     MPREP2                                              0478
*               END;                                               0479
*           IF RETCODE ^= 0           /* CHECK FOR ANY ERROR         */
*             THEN                    /* NO, THIS IS A STOW ERROR    */
@RF00473 L     @10,RETCODE                                         0480
         LTR   @10,@10                                             0480
         BZ    @RF00480                                            0480
*               DO;                                                0481
*               MSGNO = 18;           /* SET MESSAGE NUMBER          */
         LA    MSGNO,18                                            0482
*               GOTO MLMSG;           /* GO CONSTRUCT THE MSG        */
         B     MLMSG                                               0483
*               END;                                               0484
*           END;                                                   0485
@RF00480 DS    0H                                                  0485
@DE00463 LA    @10,240                                             0485
         SLR   @02,@02                                             0485
         IC    @02,ACIONMBR                                        0485
         OR    @10,@02                                             0485
         CR    INDEX,@10                                           0485
         BL    @DL00463                                            0485
*         NEWUSFLG='1'B;              /* INDICATE USERID WAS CHANGED */
         OI    NEWUSFLG,B'00000100'                                0486
*WRTREE:  /* PREPARE TO CALL THE WRITE ROUTINE (IKJEFA52).           */
*         ACIOFL05 = '1'B;            /* 1- WRITE OPERATION REQUESTD */
WRTREE   OI    ACIOFL05,B'00001000'                                0487
*         RFY R1 RSTD;                /* RESTRICT PARAMETER REGISTER */
*         R1 = ADDR(ACIOPARM);        /* PTR TO 'WRITE' PARMLIST     */
         LA    R1,ACIOPARM                                         0489
*         /* PASS CONTROL TO THE ACCOUNT/WRITE ROUTINE.              */
*         CALL IKJEFA52;                                           0490
         L     @15,@CV00150                                        0490
         BALR  @14,@15                                             0490
*         RFY R1 UNRSTD;              /* RELEASE PARAMETER REGISTER  */
*         RFY R15 RSTD;               /* RESTRICT RETURN CODE REG    */
*         RETCODE = R15;              /* ASSIGN THE RETURN CODE      */
         ST    R15,RETCODE                                         0493
*         RFY R15 UNRSTD;             /* RELEASE RETURN CODE REG     */
*         /* DEQ FROM THE USERID.                                    */
*         GEN (DEQ   (,USRLEN),MF=(E,USERDEQ))                     0495
*            REFS(MAJNAME,USRLEN,USERDEQ);                         0495
         DEQ   (,USRLEN),MF=(E,USERDEQ)
*         ENQFLG = '0'B;              /* 0- USERID IS NOT ENQ'ED ON  */
         NI    ENQFLG,B'11111110'                                  0496
*         FREEFLG = '0'B;             /* 0- READ BUFFER HAS BEEN   0497
*                                        FREED BY THE WRITE RTNE     */
         NI    FREEFLG,B'11111110'                                 0497
*         /* CHECK THE WRITE RTNE RETURN CODE.                       */
*         IF RETCODE ^= 0             /* SUCCESSFUL?                 */
*           THEN                      /* NO, I/O ERROR,              */
         L     @10,RETCODE                                         0498
         LTR   @10,@10                                             0498
         BNZ   @RT00498                                            0498
*             GOTO ACCTRET;           /* WRITE ISSUES I/O ERROR MSGS */
*         TREEFLG = '1'B;             /* 1- A TREE HAS BEEN CHANGED  */
         OI    TREEFLG,B'01000000'                                 0500
*         /* CHECK WHETHER THE NEW PROCSIZE WAS REDUCED TO MAXSIZE.  */
*         /* THE USER WILL BE INFORMED OF THIS ACTION.               */
*         IF STGFLG = '1'B                                         0501
*           THEN                      /* YES, ISSUE MSG              */
         TM    STGFLG,B'00010000'                                  0501
         BNO   @RF00501                                            0501
*             DO;                                                  0502
*               CNTNFLG = '1'B;       /* TURN CONTINUATION FLAG ON   */
         OI    CNTNFLG,B'00100000'                                 0503
*               MSGNO = 14;           /* SET MESSAGE NUMBER          */
         LA    MSGNO,14                                            0504
*               CALL MSGFNDR;         /* GO CALCULATE THE MSG ADDR   */
         BAL   @14,MSGFNDR                                         0505
*               INSRTL1 = RSIZLNG+4;  /* LENGTH OF MSG SEGMENT       */
         LA    @10,4                                               0506
         L     @05,CHPDLPTR                                        0506
         LH    @15,RSIZLNG(,@05)                                   0506
         LR    @14,@15                                             0506
         ALR   @14,@10                                             0506
         STH   @14,INSRTL1                                         0506
*               INSRTT1(1:RSIZLNG) = SIZE;/* INSERT SIZE INTO MSG    */
         BCTR  @15,0                                               0507
         L     @05,RSIZADR(,@05)                                   0507
         EX    @15,@SM00452                                        0507
*               SEGPTR13 = ADDR(INSRT1);/* ACTIVE SIZE INSERT ADDR   */
         LA    @05,INSRT1                                          0508
         ST    @05,SEGPTR13                                        0508
*               INSRTL2 = USRLEN+4;   /* LENGTH OF MSG SEGMENT       */
         SLR   @05,@05                                             0509
         IC    @05,USRLEN                                          0509
         ALR   @10,@05                                             0509
         STH   @10,INSRTL2                                         0509
*               INSRTT2(1:USRLEN) = USRID;/* INSERT THE USERID       */
         BCTR  @05,0                                               0510
         EX    @05,@SM00454                                        0510
*               SEGPTR15 = ADDR(INSRT2);/* SET PTR TO THIS SEGMENT   */
         LA    @10,INSRT2                                          0511
         ST    @10,SEGPTR15                                        0511
*               GOTO PUTMSG;          /* CONTINUE MSG CONSTRUCTION   */
         B     PUTMSG                                              0512
*             END;                                                 0513
*           ELSE                      /* NO,                         */
*             GOTO MORUS;             /* GO CHECK FOR MORE USERIDS   */
*         /***********************************************************/
*         /*                                                         */
*         /*                 MESSAGE  HANDLING                       */
*         /*                                                         */
*         /***********************************************************/
*MSG3:    /* CONTROL PASSED HERE TO DETERMINE WHETHER THIS PARTICU-  */
*         /* LAR MESSAGE REQUIRES USERID INSERTION OR NOT.           */
*         IF USIND = '1'B             /* INSERTION REQUIRED?         */
*          & ACIOLINK ^= 0            /* AND DIRECTORY READ          */
*           THEN                      /* YES,                        */
MSG3     TM    USIND,B'10000000'                                   0515
         BNO   @RF00515                                            0515
         L     @10,ACIOLINK                                        0515
         LTR   @10,@10                                             0515
         BZ    @RF00515                                            0515
*             DO;                                                  0516
*             MSGNO = 4;              /* SET MESSAGE NUMBER          */
         LA    MSGNO,4                                             0517
*             GOTO MPREP1;            /* CONTINUE MSG CONSTRUCTION   */
         B     MPREP1                                              0518
*             END;                                                 0519
*           ELSE                      /* NO,                         */
*             MSGNO = 3;              /* SET MESSAGE NUMBER          */
@RF00515 LA    MSGNO,3                                             0520
*TMSGA:   CALL MSGFNDR;               /* GO CALCULATE MSG ADDR       */
TMSGA    BAL   @14,MSGFNDR                                         0521
*         GOTO PUTMSG;                /* GO ISSUE THE MSG            */
         B     PUTMSG                                              0522
*MLMSG:   /* CONTROL PASSED HERE FOR MULTI-LEVEL MESSAGES.           */
*         CALL MSGFNDR;               /* GO CALCULATE MSG ADDR       */
MLMSG    BAL   @14,MSGFNDR                                         0523
*         CVD (RETCODE,DECRTCD);      /* CONVERT CODE TO DECIMAL     */
         L     @10,RETCODE                                         0524
         CVD   @10,DECRTCD                                         0524
*         UNPK (INSRTT1(1:2),DECRTCD(6:8));/* UNPACK INTO MSG.       */
         UNPK  INSRTT1(2),DECRTCD+5(3)                             0525
*         INSRTL1 = 6;                /* SET LENGTH OF SEGMENT       */
         MVC   INSRTL1(2),@CH00398                                 0526
*         INSRTT1(2) = INSRTT1(2)×'F0'X; /* REMOVE SIGN              */
         OI    INSRTT1+1,X'F0'                                     0527
*         SEGPTR23 = ADDR(INSRT1);    /* SET PTR TO ACTIVE INSERT    */
         LA    @10,INSRT1                                          0528
         ST    @10,SEGPTR23                                        0528
*         GOTO PUTMSG;                /* GO ISSUE THE MESSAGE        */
         B     PUTMSG                                              0529
*MPREP1:  CNTNFLG = '1'B;             /* TURN CONTINUATION FLAG ON   */
MPREP1   OI    CNTNFLG,B'00100000'                                 0530
*MPREP2:  /* CONTROL IS PASSED TO APPROPRIATE PARTS OF THIS SECTION  */
*         /* TO COMPLETE THE CONSTRUCTION OF INSERTION-TYPE MESSAGES */
*         CALL MSGFNDR;               /* GO CALCULATE THE MSG ADDR   */
MPREP2   BAL   @14,MSGFNDR                                         0531
*MPREP3:  /* INITIALIZE THE USERID INSERT SEGMENT.                   */
*         INSRTL1 = USRLEN+4;         /* LENGTH OF MSG SEGMENT       */
MPREP3   SLR   @10,@10                                             0532
         IC    @10,USRLEN                                          0532
         LA    @10,4(,@10)                                         0532
         STH   @10,INSRTL1                                         0532
*         INSRTT1 = USRID;            /* INSERT THE USERID           */
         MVC   INSRTT1(8),USRID                                    0533
*         SEGPTR13 = ADDR(INSRT1);    /* SET PTR TO ACTIVE INSERT    */
         LA    @10,INSRT1                                          0534
         ST    @10,SEGPTR13                                        0534
*         GOTO PUTMSG;                /* GO ISSUE THE MSG            */
         B     PUTMSG                                              0535
*MPREP4:  CALL MSGFNDR;               /* GO CALCULATE THE MSG ADDR   */
MPREP4   BAL   @14,MSGFNDR                                         0536
*         SEGPTR13 = ADDR(INSRT2);    /* SET PTR TO ACTIVE INSERT    */
         LA    @10,INSRT2                                          0537
         ST    @10,SEGPTR13                                        0537
*PUTMSG:  /* PREPARE TO CALL THE PUTLINE SERVICE ROUTINE.            */
*         GEN (PUTLINE OUTPUT=(AMSGHDR1,,MULTLVL),MF=(E,PLPLIST))  0538
*           REFS(AMSGHDR1,PLPLIST);                                0538
PUTMSG   PUTLINE OUTPUT=(AMSGHDR1,,MULTLVL),MF=(E,PLPLIST)
*         RFY R15 RSTD;               /* RESTRICT ENTRY POINT REG    */
*         RETCODE = R15;              /* ASSIGN THE RETURN CODE      */
         ST    R15,RETCODE                                         0540
*         RFY R15 UNRSTD;             /* RELEASE RETURN CODE REG     */
*         /* CHECK THE PUTLINE RETURN CODE.                          */
*         IF RETCODE ^= 0             /* SUCCESSFUL?                 */
*           THEN                      /* NO,                         */
         L     @10,RETCODE                                         0542
         LTR   @10,@10                                             0542
         BZ    @RF00542                                            0542
*             DO;                                                  0543
*             IF RETCODE = 4          /* ATTENTION INTERRUPT?        */
*                × PUTLFLG = '1'B     /* OR SECOND ATTEMPT TO PUT OUT
*                                        A MESSAGE?                  */
*               THEN                  /* YES, ONE OF THE ABOVE       */
         C     @10,@CF00049                                        0544
         BE    @RT00544                                            0544
         TM    PUTLFLG,B'00000010'                                 0544
         BO    @RT00544                                            0544
*                 GOTO ACCTRET;       /* RETURN TO ACCOUNT           */
*             PUTLFLG = '1'B;         /* SET FLAG - ONE ATTEMPT HAS
*                                        BEEN MADE TO PUT OUT A MSG  */
         OI    PUTLFLG,B'00000010'                                 0546
*             POSTFLG = '0'B;         /* AN ERROR OCCURRED - THE ECB
*                                        WILL BE POSTED              */
         NI    POSTFLG,B'01111111'                                 0547
*             IF RETCODE = 16         /* GETMAIN FAILURE?            */
*               THEN                  /* YES,                        */
         C     @10,@CF00042                                        0548
         BE    @RT00548                                            0548
*                 GOTO MSG3;          /* GO CONSTRUCT THE MESSAGE    */
*               ELSE                  /* NO, RETCODE = 12            */
*                 DO;                                              0550
*                   MSGNO = 22;       /* SET MSG NUMBER              */
         LA    MSGNO,22                                            0551
*                   GOTO MLMSG;       /* GO CONSTRUCT THE MSG        */
         B     MLMSG                                               0552
*                 END;                                             0553
*             END;                                                 0554
*         /* PUTLINE WAS SUCCESSFUL. CHECK WHETHER TO CONTINUE WITH  */
*         /* ANOTHER USERID OR TO RETURN.                            */
*         IF CNTNFLG = '0'B                                        0555
*           THEN                      /* FINISHED,                   */
@RF00542 TM    CNTNFLG,B'00100000'                                 0555
         BZ    @RT00555                                            0555
*             GOTO ACCTRET;           /* GO CLEAN UP & RETURN        */
*         CNTNFLG = '0'B;             /* RESET THE CONTINUATION FLAG */
         NI    CNTNFLG,B'11011111'                                 0557
*         GOTO MORUS;                 /* GO CHECK FOR MORE USERIDS   */
         B     MORUS                                               0558
*         /* CHECK WHETHER A PREVIOUS USERID TREE WAS SUCCESSFULLY   */
*         /* CHANGED ('*' IN THE USERID POSITION OF THE NODELIST).   */
*         /* IF SO, THEN THE MODE MSG 'CHANGED' WILL BE ISSUED, IN-  */
*         /* DICATING SUCCESSFUL COMPLETION.                         */
*CHKCHNG: IF TREEFLG = '1'B                                        0559
*           THEN                      /* PREVIOUS TREE WAS CHANGED,  */
CHKCHNG  TM    TREEFLG,B'01000000'                                 0559
         BNO   @RF00559                                            0559
*             DO;                                                  0560
*             POSTFLG = '1'B;         /* CHANGE WAS SUCCESSFUL - DO
*                                        NOT POST THE ECB            */
         OI    POSTFLG,B'10000000'                                 0561
*             MSGNO =1;               /* SET MESSAGE NUMBER          */
         LA    MSGNO,1                                             0562
*             GOTO TMSGA;             /* ISSUE MODE MSG              */
         B     TMSGA                                               0563
*             END;                                                 0564
*         IF CHLEVL = 1               /* CHANGE LVL = USERID LELEL?  */
*           THEN                      /* YES,                        */
@RF00559 CLI   CHLEVL,1                                            0565
         BE    @RT00565                                            0565
*             GOTO ACCTRET;           /* GO CLEAN UP & RETURN        */
*         /* IF THE CHANGE LEVEL IS THE PASSWORD LEVEL AND NO USER   */
*         /* IN THE UADS WAS FOUND WITH PASSWORD SUPPORT, AND THE    */
*         /* NODELIST PASSWORD = '*', THEN A MESSAGE TO THIS EFFECT  */
*         /* WILL BE ISSUED TO THE TERMINAL.                         */
*         IF (CHLEVL = 2              /* CHANGE LVL = PASSWORD LVL?  */
*          × PASSWD(1:2) ^= '* ')     /* OR A PASSWORD WAS SPECIFIED?*/
*          & PWSUPFLG = '0'B          /* AND PASSWORDS NOT SUPPORTED?*/
*          & USIND = '1'B             /* AND USERID = *?             */
*          & MSGNO = 0                /* AND NO ERROR MESSAGE?       */
*           THEN                      /* YES,                        */
         CLI   CHLEVL,2                                            0567
         BE    @GL00011                                            0567
         CLC   PASSWD(2),@CC00380                                  0567
         BE    @RF00567                                            0567
@GL00011 TM    USIND,B'10000000'                                   0567
         BNO   @RF00567                                            0567
         TM    PWSUPFLG,B'00001000'                                0567
         BNZ   @RF00567                                            0567
         LTR   MSGNO,MSGNO                                         0567
         BNZ   @RF00567                                            0567
*             DO;                                                  0568
*             MSGNO = 26;             /* SET ERROR MESSAGE NUMBER    */
         LA    MSGNO,26                                            0569
*             GOTO TMSGA;             /* GO ISSUE THE MESSAGE        */
         B     TMSGA                                               0570
*             END;                                                 0571
*         IF PASSWD(1:2) ^= '* '      /* WAS A PASSWORD SPECIFIED?   */
*          & PWFNDFLG = '0'B          /* AND PASSWORD NOT FOUND?     */
*           THEN                      /* YES,                        */
@RF00567 CLC   PASSWD(2),@CC00380                                  0572
         BE    @RF00572                                            0572
         TM    PWFNDFLG,B'01000000'                                0572
         BNZ   @RF00572                                            0572
*             DO;                                                  0573
*             MSGNO = 10;             /* SET MSG NUMBER              */
         LA    MSGNO,10                                            0574
*             INSRTL2 = 12;           /* LENGTH OF MSG SEGMENT       */
         MVC   INSRTL2(2),@CH00350                                 0575
*             INSRTT2(1:8) = PASSWD;  /* INSERT THE PASSWORD         */
         MVC   INSRTT2(8),PASSWD                                   0576
*             GOTO MPREP4;            /* GO TO ISSUE MESSAGE         */
         B     MPREP4                                              0577
*             END;                                                 0578
*         /* IF THE CHANGE LEVEL IS THE PASSWORD LEVEL, THEN BYPASS  */
*         /* THE MODE MESSAGE SINCE NO USEFUL WORK WAS DONE. IF NOT, */
*         /* THEN FURTHER CHECKING IS NECESSARY ON THE ACCTNMBR      */
*         /* AND/OR PROCNAME LEVEL.                                  */
*         IF CHLEVL = 2               /* CHANGE LVL = PASSWORD LVL?  */
*           THEN                      /* YES,                        */
@RF00572 CLI   CHLEVL,2                                            0579
         BE    @RT00579                                            0579
*             GOTO ACCTRET;           /* GO CLEAN UP & RETURN        */
*         /* IF THE CHANGE LEVEL IS THE ACCTNMBR LEVEL AND NO USER   */
*         /* IN THE UADS WAS FOUND WITH ACCTNMBR SUPPORT, AND THE    */
*         /* NODELIST ACCTNMBR = '*', THEN A MESSAGE TO THIS EFFECT  */
*         /* WILL BE ISSUED TO THE TERMINAL.                         */
*         IF (CHLEVL = 3               /* CHANGE LVL = ACCTNMBR LVL?  *
*          × ACCTNO(1:2) ^= '* ')     /* OR AN ACCTNMBR SPECIFIED?   */
*          & ACSUPFLG = '0'B          /* AND ACCTNMBRS NOT SUPPORTED?*/
*          & USIND = '1'B             /* AND USERID = *?             */
*          & MSGNO = 0                /* AND NO ERROR MESSAGE?       */
*           THEN                      /* YES,                        */
         CLI   CHLEVL,3                                            0581
         BE    @GL00015                                            0581
         CLC   ACCTNO(2),@CC00380                                  0581
         BE    @RF00581                                            0581
@GL00015 TM    USIND,B'10000000'                                   0581
         BNO   @RF00581                                            0581
         TM    ACSUPFLG,B'00000100'                                0581
         BNZ   @RF00581                                            0581
         LTR   MSGNO,MSGNO                                         0581
         BNZ   @RF00581                                            0581
*             DO;                                                  0582
*             MSGNO = 27;             /* SET ERROR MESSAGE NUMBER    */
         LA    MSGNO,27                                            0583
*             GOTO TMSGA;             /* GO ISSUE THE MESSAGE        */
         B     TMSGA                                               0584
*             END;                                                 0585
*         IF ACCTNO(1:2) ^= '* '      /* WAS AN ACCTNMBR SPECIFIED?  */
*          & ACFNDFLG = '0'B          /* AND ACCTNMBR NOT FOUND?     */
*           THEN                      /* YES,                        */
@RF00581 CLC   ACCTNO(2),@CC00380                                  0586
         BE    @RF00586                                            0586
         TM    ACFNDFLG,B'00100000'                                0586
         BNZ   @RF00586                                            0586
*             DO;                                                  0587
*             MSGNO = 11;             /* SET MSG NUMBER              */
         LA    MSGNO,11                                            0588
*             INSRTL2 = ACTLEN+4;     /* LENGTH OF MSG SEGMENT       */
         SLR   @10,@10                                             0589
         IC    @10,ACTLEN                                          0589
         LA    @05,4(,@10)                                         0589
         STH   @05,INSRTL2                                         0589
*             INSRTT2(1:ACTLEN) = ACCTNO;/* INSERT THE ACCTNMBR      */
         BCTR  @10,0                                               0590
         EX    @10,@SM00456                                        0590
*             GOTO MPREP4;            /* GO TO ISSUE MESSAGE         */
         B     MPREP4                                              0591
*             END;                                                 0592
*         /* NO TREE WAS CHANGED - THE ACCOUNT ECB WILL BE POSTED. 0593
*            IF THE CHANGE LEVEL IS THE ACCTNMBR LEVEL & THE NODE- 0593
*            LIST SPECIFIES AN ACCTNMBR, THEN GO CHECK WHETHER THIS
*            ACCTNMBR WAS FOUND.                                     */
*         IF CHLEVL = 3               /* CHANGE LVL = ACCTNMBR LVL?  */
*           THEN                      /* YES,                        */
@RF00586 CLI   CHLEVL,3                                            0593
         BE    @RT00593                                            0593
*             GOTO ACCTRET;           /* GO CLEAN UP & RETURN        */
*         IF PROCNM(1) = '*'          /* WAS PROCNAME SPECIFIED?     */
*           THEN                      /* YES, GO CHECK WHETHER THE.. */
         CLI   PROCNM,C'*'                                         0595
         BE    @RT00595                                            0595
*             GOTO ACCTRET;           /* GO CLEAN UP & RETURN        */
*         /* THE SPECIFIED PROCNAME MAY HAVE BEEN FOUND IN ONE OR    */
*         /* MORE TREES, BUT NO CHANGES WERE MADE BECAUSE OF ERROR   */
*         /* CONDITION(S). THE MODE MESSAGE WILL NOT BE ISSUED,      */
*         /* INDICATING THAT NO USEFUL WORK WAS DONE.                */
*         IF PRFNDFLG = '1'B          /* PROCNAME FOUND?             */
*           THEN                      /* YES,                        */
         TM    PRFNDFLG,B'00010000'                                0597
         BO    @RT00597                                            0597
*             GOTO ACCTRET;           /* GO CLEAN UP & RETURN        */
*           ELSE                      /* PROCNAME DOES NOT EXIST,    */
*             DO;                                                  0599
*               MSGNO = 12;           /* SET MSG NUMBER              */
         LA    @10,12                                              0600
         LR    MSGNO,@10                                           0600
*               INSRTL2 = 12;         /* LENGTH OF SEGMENT           */
         STH   @10,INSRTL2                                         0601
*               INSRTT2(1:8) = PROCNM;/* INSERT THE PROCNAME         */
         MVC   INSRTT2(8),PROCNM                                   0602
*               GOTO MPREP4;          /* GO TO ISSUE MESSAGE         */
         B     MPREP4                                              0603
*             END;                                                 0604
*ACCTRET: /***********************************************************/
*         /*                                                         */
*         /*        PERFORM THE NECESSARY CLEANUP AND                */
*         /*        RETURN TO THE ACCOUNT COMMAND PROCESSOR          */
*         /*                                                         */
*         /***********************************************************/
*         IF ENQUAFLG = '1'B          /* IS THE UADS ENQUEUED ON     */
*           THEN                      /* YES,                        */
ACCTRET  TM    ENQUAFLG,B'00000010'                                0605
         BNO   @RF00605                                            0605
*             DO;                                                  0606
*             GEN (DEQ   ,MF=(E,UADDEQ))  /* DEQ FROM THE UADS.      */
*               REFS(MAJNAME,MINNAME,UADDEQ);                      0607
         DEQ   ,MF=(E,UADDEQ)
*             ENQUAFLG = '0'B;        /* RE-INIT UADS ENQ FLAG       */
         NI    ENQUAFLG,B'11111101'                                0608
*             END;                                                 0609
*         IF ENQFLG = '1'B            /* IS THE USERID STILL ENQ'ED  */
*           THEN                      /* YES,                        */
@RF00605 TM    ENQFLG,B'00000001'                                  0610
         BNO   @RF00610                                            0610
*             DO;                                                  0611
*             GEN (DEQ   (,USRLEN),MF=(E,USERDEQ))                 0612
*               REFS(MAJNAME,USRLEN,USERDEQ);                      0612
         DEQ   (,USRLEN),MF=(E,USERDEQ)
*             ENQFLG = '0'B;          /* 0- USERID IS NOT ENQ'ED ON  */
         NI    ENQFLG,B'11111110'                                  0613
*             END;                                                 0614
*         /* CHECK WHETHER THE BUFFER OBTAINED BY THE READ ROUTINE   */
*         /* FOR THE USERID TREE HAS TO BE FREED. IF YES, THEN PASS  */
*         /* CONTROL TO THE WRITE ROUTINE (IKJEFA52) TO FREEMAIN     */
*         /* THE BUFFER.                                             */
*         IF FREEFLG ^= '0'B          /* DOES THE BUFFER HAVE TO BE
*                                        FREED?                      */
*           THEN                      /* YES,                        */
@RF00610 TM    FREEFLG,B'00000001'                                 0615
         BZ    @RF00615                                            0615
*             DO;                                                  0616
*             ACIOFL05 = '0'B;        /* 0- WRITE OPERATION NOT    0617
*                                        REQUESTED - FREEMAIN ONLY   */
         NI    ACIOFL05,B'11110111'                                0617
*             RFY R1 RSTD;            /* RESTRICT PARAMETER REGISTER */
*             R1 = ADDR(ACIOPARM);    /* PTR TO THE PARMLIST         */
         LA    R1,ACIOPARM                                         0619
*             CALL IKJEFA52;                                       0620
         L     @15,@CV00150                                        0620
         BALR  @14,@15                                             0620
*             RFY R1 UNRSTD;          /* RELEASE PARAMETER REGISTER  */
*             END;                                                 0622
*         /* CLOSE THE UADS DCB'S, BPAM AND BSAM.                    */
*         RFY R2 RSTD;                                             0623
@RF00615 DS    0H                                                  0624
*         R2 = ADDR(UADDCB2);         /* ADDR OF THE DCB             */
         LA    R2,UADDCB2                                          0624
*         /* IS THE BPAM DCB OPEN?                                   */
*         IF DCBOFLAG = '1'B                                       0625
*           THEN                      /* YES,                        */
         TM    DCBOFLAG,B'00010000'                                0625
         BNO   @RF00625                                            0625
*             GEN (CLOSE ((R2),REREAD),MF=(E,CLOSUAD))             0626
*               REFS(R2,CLOSUAD);                                  0626
         CLOSE ((R2),REREAD),MF=(E,CLOSUAD)
*         /* IS THE BSAM DCB OPEN?                                   */
*         R2 = ADDR(UADSDCB);         /* SET BASE PTR FOR LABELS     */
@RF00625 LA    R2,UADSDCB                                          0627
*         IF DCBOFLAG = '1'B                                       0628
*           THEN                      /* YES,                        */
         TM    DCBOFLAG,B'00010000'                                0628
         BNO   @RF00628                                            0628
*             GEN (CLOSE ((R2),REREAD),MF=(E,CLOSUAD))             0629
*               REFS(R2,CLOSUAD);                                  0629
         CLOSE ((R2),REREAD),MF=(E,CLOSUAD)
*         RFY R2 UNRSTD;                                           0630
@RF00628 DS    0H                                                  0631
*         /* WHENEVER A USERID IS CHANGED IN THE UADS, A USERID      */
*         /* DATA LIST (UIDL) MUST BE BUILT FOR ACCOUNT.             */
*         /* CHECK WHETHER A USERID WAS CHANGED.                     */
*         IF NEWUSFLG = '0'B                                       0631
*          × TREEFLG = '0'B                                        0631
*           THEN                      /* YES,                        */
         TM    NEWUSFLG,B'01000100'                                0631
         BO    @RF00631                                            0631
*             DO;                                                  0632
*             UIDLPTR = 0;            /* SET PTR TO UIDL TO 0,       */
         L     @10,ACCTPLP                                         0633
         SLR   @15,@15                                             0633
         ST    @15,UIDLPTR(,@10)                                   0633
*             GOTO FREEPDL;           /* AND BYPASS UIDL SECTION     */
         B     FREEPDL                                             0634
*             END;                                                 0635
*         /* BUILD THE USERID DATA LIST (UIDL).                      */
*         UIDLADR = 0;                /* INITIALIZE THE PTR TO MAKE
*                                        SURE THE HIGH-ORDER BYTE  0636
*                                        WILL BE ZERO                */
@RF00631 SLR   @10,@10                                             0636
         ST    @10,UIDLADR                                         0636
*         GEN (GETMAIN ,LV=24,A=UIDLADR,MF=(E,DYNGTLST))           0637
*           SETS(UIDLADR) REFS(DYNGTLST);                          0637
         GETMAIN ,LV=24,A=UIDLADR,MF=(E,DYNGTLST)
*         RFY R15 RSTD;               /* RESTRICT RETURN CODE REG    */
*         RETCODE = R15;              /* SAVE GETMAIN RETURN CODE    */
         ST    R15,RETCODE                                         0639
*         RFY R15 UNRSTD;             /* RELEASE RETURN CODE REG     */
*         /* CHECK THE GETMAIN RETURN CODE.                          */
*         IF RETCODE ^= 0                                          0641
*           THEN                      /* GETMAIN FAILED              */
         L     @10,RETCODE                                         0641
         SLR   @15,@15                                             0641
         CR    @10,@15                                             0641
         BNE   @RT00641                                            0641
*             GOTO MSG3;              /* GO CONSTRUCT THE MESSAGE    */
*         /* GETMAIN WAS SUCCESSFUL, BUILD THE USERID DATA LIST.     */
*         UIDLPTR = UIDLADR;          /* TRANSFER PTR TO ACCT PLIST  */
         L     @10,UIDLADR                                         0643
         L     @01,ACCTPLP                                         0643
         ST    @10,UIDLPTR(,@01)                                   0643
*         UIDLNEX = 0;                /* THIS IS THE ONLY LIST       */
         ST    @15,UIDLNEX(,@10)                                   0644
*         UIDLSWS = '0000'X;          /* SET FLAGS TEMPORARILY TO 0  */
         MVC   UIDLSWS(2,@10),@CB00420                             0645
*         UIDCHG = '1'B;              /* SIGNAL TO ACCOUNT THAT THIS
*                                        LIST WAS BUILT BY IKJEFA20  */
         OI    UIDCHG(@10),B'00100000'                             0646
*         UIDLCT = 2;                 /* COUNT = 2 FOR ONE PAIR OF 0647
*                                        USERID'S (OLD & NEW)        */
         MVC   UIDLCT(2,@10),@CH00113                              0647
*         UIDUSER(1) = USRID(1:USRLEN);/* INSERT THE OLD USERID      */
         MVI   UIDUSER+1(@10),C' '                                 0648
         MVC   UIDUSER+2(6,@10),UIDUSER+1(@10)                     0648
         SLR   @15,@15                                             0648
         IC    @15,USRLEN                                          0648
         BCTR  @15,0                                               0648
         EX    @15,@SM00459                                        0648
*         UIDUSER(2) = DUSRID(1:DUSRLEN);/* INSERT THE NEW USERID    */
         MVI   UIDUSER+9(@10),C' '                                 0649
         MVC   UIDUSER+10(6,@10),UIDUSER+9(@10)                    0649
         SLR   @15,@15                                             0649
         IC    @15,DUSRLEN                                         0649
         BCTR  @15,0                                               0649
         EX    @15,@SM00461                                        0649
*FREEPDL: /* RELEASE THE PDL SPACE, IF NECESSARY.                    */
*         IF CHPDLPTR ^= 0            /* IS THERE A PDL TO FREE?     */
*           THEN                      /* YES,                        */
FREEPDL  L     @10,CHPDLPTR                                        0650
         LTR   @10,@10                                             0650
         BZ    @RF00650                                            0650
*             GEN (IKJRLSA CHPDLPTR)  /* FREE THE PDL SPACE          */
*                REFS(CHPDLPTR);                                   0651
         IKJRLSA CHPDLPTR
*         /* IF CHANGE WAS UNSUCCESSFUL, THE ECB IS POSTED TO SIGNAL */
*         /* TO ACCOUNT TO ISSUE THE 'ACCOUNT' MESSAGE.              */
*         IF POSTFLG = '0'B                                        0652
*           THEN                      /* CHANGE WAS NOT SUCCESSFUL   */
@RF00650 TM    POSTFLG,B'10000000'                                 0652
         BNZ   @RF00652                                            0652
*             ACCTECB = '40FFFFFF'X;                               0653
         L     @10,ACCTPLP                                         0653
         L     @10,ACCTECBP(,@10)                                  0653
         MVC   ACCTECB(4,@10),@CF00422                             0653
*         RETURN;                                                  0654
@EL00001 L     @13,4(,@13)                                         0654
@EF00001 L     @00,@SIZDATD                                        0654
         LR    @01,@11                                             0654
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0654
         BR    @14                                                 0654
*         /* END OF CHANGE COMMAND PROCEDURE                         */
*         /***********************************************************/
*         /* THIS SUBROUTINE CALCULATES THE ADDRESS OF A MESSAGE IN  */
*         /* THE CHANGE MESSAGE CSECT IKJEFA21.                      */
*         /***********************************************************/
*MSGFNDR: PROC;                                                    0655
         B     @EL00001                                            0655
MSGFNDR  STM   @14,@12,12(@13)                                     0655
*         MSGFIND = (MSGNO*2)-2       /* CALCULATE ADDR OF OFFSET TO */
*           +ADDR(CHMSG);             /* MSG IN THE MSG CSECT        */
         LR    MSGFIND,MSGNO                                       0656
         ALR   MSGFIND,MSGFIND                                     0656
         BCTR  MSGFIND,0                                           0656
         BCTR  MSGFIND,0                                           0656
         L     @10,@CV00145                                        0656
         ALR   MSGFIND,@10                                         0656
*         MSGPTR = MOFFSET+ADDR(CHMSG);/* CALCULATE ADDR OF MSG    0657
*                                         HEADER IN THE MSG CSECT    */
         L     MSGPTR,@CV00145                                     0657
         AH    MSGPTR,MOFFSET(,MSGFIND)                            0657
*         MINDX = (SGNO1*4)+8;        /* NUMBER OF BYTES IN MSGHEADR */
         LA    @10,8                                               0658
         L     MINDX,SGNO1(,MSGPTR)                                0658
         SLA   MINDX,2                                             0658
         ALR   MINDX,@10                                           0658
*         AMSGHDR1(1:MINDX) =         /* TRANSFER MSG HEADER TO..    */
*           PTRMASK1;                 /* ..DYNAMIC HEADER AREA       */
         LR    @05,MINDX                                           0659
         BCTR  @05,0                                               0659
         EX    @05,@SM00463                                        0659
*         /* IF THIS IS NOT A MULTI-LEVEL MESSAGE, THEN BYPASS THE   */
*         /* MESSAGE HEADER TRANSFER.                                */
*         IF NXTLADR1 ^= '0'B                                      0660
*           THEN                      /* YES, MULTI-LEVEL MSG        */
         L     @05,NXTLADR1(,MSGPTR)                               0660
         LTR   @05,@05                                             0660
         BZ    @RF00660                                            0660
*             DO;                                                  0661
*             LEVPTR1 = ADDR(AMSGHDR2);/* POINT TO 2ND LEVEL MSG     */
         LA    @15,AMSGHDR2                                        0662
         ST    @15,LEVPTR1                                         0662
*             MINDX = (SGNO2*4)+8;    /* NUMBER OF BYTES IN MSGHEADR */
         L     MINDX,SGNO2(,@05)                                   0663
         SLA   MINDX,2                                             0663
         ALR   MINDX,@10                                           0663
*             AMSGHDR2(1:MINDX) =     /* TRANSFER MSG HEADER TO..    */
*               PTRMASK2;             /* ..DYNAMIC HEADER AREA       */
         LR    @10,MINDX                                           0664
         BCTR  @10,0                                               0664
         EX    @10,@SM00465                                        0664
*             END;                                                 0665
*         END MSGFNDR;                /* RETURN TO POINT OF CALL     */
@EL00002 DS    0H                                                  0666
@EF00002 DS    0H                                                  0666
@ER00002 LM    @14,@12,12(@13)                                     0666
         BR    @14                                                 0666
*         END IKJEFA20                                             0667
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJEFUAD)                                        *
*/*%INCLUDE SYSLIB  (IKJEFUDL)                                        *
*/*%INCLUDE SYSLIB  (IKJUPT  )                                        *
*;                                                                 0667
@DATA    DS    0H
@CH00113 DC    H'2'
@CH00398 DC    H'6'
@CH00249 DC    H'32'
@SM00429 MVC   CPLS(0),MCPLS
@SM00443 MVC   UADSDEST(0,HEDBPTR),DEST(@10)
@SC00448 CLC   UADSANUM(0,UADSAPTR),ACCTNO
@SM00450 MVC   INSRTT2(0),MAXSIZE(@10)
@SM00452 MVC   INSRTT1(0),SIZE(@05)
@SM00454 MVC   INSRTT2(0),USRID
@SM00456 MVC   INSRTT2(0),ACCTNO
@SM00459 MVC   UIDUSER(0,@10),USRID
@SM00461 MVC   UIDUSER+8(0,@10),DUSRID
@SM00463 MVC   AMSGHDR1(0),PTRMASK1(MSGPTR)
@SM00465 MVC   AMSGHDR2(0),PTRMASK2(@05)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
IKJEFA20 CSECT
         DS    0F
@CF00049 DC    F'4'
@CF00040 DC    F'8'
@CF00350 DC    F'12'
@CH00350 EQU   @CF00350+2
@CF00042 DC    F'16'
@CF00070 DC    F'20'
@CF00077 DC    F'24'
@CF00422 DC    XL4'40FFFFFF'
@CF00445 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
UIDLADR  DS    A
CTRLTAB  DS    CL40
         ORG   CTRLTAB
ACCTPLP  DS    AL4
CHPDLPTR DS    AL4
DATALPTR DS    AL4
NODELPTR DS    AL4
BLOKCNT  DS    FL1
HEADADDR DS    AL3
PASSADDR DS    AL4
ACCTADDR DS    AL4
PROCADDR DS    AL4
RETCODE  DS    FL4
CHLEVL   DS    FL1
SRCHIND  DS    FL1
MSGNMBR  DS    FL1
TRCHGE   DS    BL1
@NM00020 EQU   CTRLTAB+39
@NM00021 EQU   CTRLTAB+39
         ORG   CTRLTAB+40
CFLAGS   DS    CL3
         ORG   CFLAGS
USIND    DS    BL1
PWFNDFLG EQU   CFLAGS+0
ACFNDFLG EQU   CFLAGS+0
PRFNDFLG EQU   CFLAGS+0
PWSUPFLG EQU   CFLAGS+0
ACSUPFLG EQU   CFLAGS+0
PUTLFLG  EQU   CFLAGS+0
FREEFLG  EQU   CFLAGS+0
POSTFLG  DS    BL1
TREEFLG  EQU   CFLAGS+1
CNTNFLG  EQU   CFLAGS+1
STGFLG   EQU   CFLAGS+1
SRCHFLG  EQU   CFLAGS+1
NEWUSFLG EQU   CFLAGS+1
ENQUAFLG EQU   CFLAGS+1
ENQFLG   EQU   CFLAGS+1
LOOPFLG  DS    BL1
         ORG   CFLAGS+3
NLSTTAB  DS    CL66
         ORG   NLSTTAB
USRLEN   DS    FL1
USRID    DS    CL8
PASSWD   DS    CL8
ACTLEN   DS    FL1
ACCTNO   DS    CL40
PROCNM   DS    CL8
         ORG   NLSTTAB+66
         DS    CL1
DLSTTAB  DS    CL108
         ORG   DLSTTAB
DUSRLEN  DS    FL1
DUSRID   DS    CL8
@NM00034 DS    CL8
@NM00035 DS    FL1
@NM00036 DS    CL40
@NM00037 DS    CL8
@NM00038 DS    FL2
@NM00039 DS    CL8
PERFGRP  DS    CL32
         ORG   DLSTTAB+108
         DS    CL2
DIRYWA   DS    CL344
         ORG   DIRYWA
UADSDCB  DS    CL88
         ORG   DIRYWA+344
ACIOPARM DS    CL24
         ORG   ACIOPARM
ACIOFLGS DS    CL1
         ORG   ACIOFLGS
@NM00042 DS    BL1
ACIOFL03 EQU   ACIOFLGS+0
@NM00043 EQU   ACIOFLGS+0
ACIOFL05 EQU   ACIOFLGS+0
@NM00044 EQU   ACIOFLGS+0
         ORG   ACIOPARM+1
ACIODCBA DS    AL3
ACIOMPTR DS    AL4
ACIODRCT DS    AL4
ACIOLINK DS    AL4
ACIONMBR DS    AL1
ACIOBUFR DS    AL3
MSGID    DS    CL1
ACIOPUTL DS    AL3
         ORG   ACIOPARM+24
SPACPARM DS    CL12
         ORG   SPACPARM
SPACMPTR DS    AL4
SPACMCNT DS    FL2
SPACLNTH DS    FL2
SPACOFST DS    AL4
         ORG   SPACPARM+12
         DS    CL4
DECRTCD  DS    CL8
STOWLIST DS    CL16
         ORG   STOWLIST
OLDUSER  DS    CL8
NEWUSER  DS    CL8
         ORG   STOWLIST+16
PLPLIST  DS    CL16
         ORG   PLPLIST
@NM00045 DS    3A
PBLKADR  DS    AL4
         ORG   PLPLIST+16
AMSGHDR1 DS    CL32
         ORG   AMSGHDR1
LEVPTR1  DS    AL4
@NM00047 DS    3A
SEGPTR13 DS    AL4
@NM00048 DS    AL4
SEGPTR15 DS    AL4
@NM00049 DS    AL4
         ORG   AMSGHDR1+32
AMSGHDR2 DS    CL32
         ORG   AMSGHDR2
@NM00050 DS    AL4
@NM00051 DS    3A
SEGPTR23 DS    AL4
@NM00052 DS    3A
         ORG   AMSGHDR2+32
INSRT1   DS    CL12
         ORG   INSRT1
INSRTL1  DS    AL2
INSRTO1  DS    AL2
INSRTT1  DS    CL8
         ORG   INSRT1+12
INSRT2   DS    CL44
         ORG   INSRT2
INSRTL2  DS    AL2
INSRTO2  DS    AL2
INSRTT2  DS    CL40
         ORG   INSRT2+44
IKJEFA20 CSECT
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
@CV00145 DC    V(CHMSG)
@CV00146 DC    V(IKJEFA22)
@CV00147 DC    V(IKJEFA23)
@CV00148 DC    V(IKJEFA24)
@CV00149 DC    V(IKJEFA51)
@CV00150 DC    V(IKJEFA52)
@CV00151 DC    V(IKJEFA53)
@CV00152 DC    V(IKJEFA54)
         DS    0D
@CC00380 DC    C'* '
@CB00373 DC    X'0000000000000000'
@CB00420 EQU   @CB00373
MAJNAME  DC    CL8'SYSIKJUA'
MINNAME  DC    CL8'OPENUADS'
@DATD    DSECT
IKJEFA20 CSECT
MCPLS    DS   0D
         CLOSE (,),MF=L
         DCB   DDNAME=SYSUADS,RECFM=FB,DSORG=PO,MACRF=(R,W),OPTCD=W,   *
               NCP=10
         DEQ   (MAJNAME,MINNAME,8,SYSTEM),RET=HAVE,MF=L
         DEQ   (MAJNAME,,,SYSTEM),RET=HAVE,MF=L
         ENQ   (MAJNAME,MINNAME,E,8,SYSTEM),RET=HAVE,MF=L
         ENQ   (MAJNAME,,E,,SYSTEM),RET=USE,MF=L
         GETMAIN EC,SP=1,MF=L
         OPEN  (,),MF=L
         PUTLINE OUTPUT=(0,TERM,MULTLVL,INFOR),MF=L
MCPLNG   DC    A(*-MCPLS)               LENGTH OF MODEL PARAMETER LIST
UADSBLK  DCB   DDNAME=SYSUADS,BLKSIZE=256,DSORG=PS,MACRF=(R),RECFM=F
         DCBD  DSORG=(PO),DEVD=(DA)
@DATD    DSECT                          REESTABLISH AUTOMATIC DSECT
CPLS     DS    0D
CLOSUAD  CLOSE (,),MF=L
UADDCB2  DCB   DDNAME=SYSUADS,RECFM=FB,DSORG=PO,MACRF=(R,W),OPTCD=W,   *
               NCP=10
UADDEQ   DEQ   (MAJNAME,MINNAME,8,SYSTEM),RET=HAVE,MF=L
USERDEQ  DEQ   (MAJNAME,,0,SYSTEM),RET=HAVE,MF=L
UADENQ   ENQ   (MAJNAME,MINNAME,E,8,SYSTEM),RET=HAVE,MF=L
USERENQ  ENQ   (MAJNAME,,E,0,SYSTEM),RET=USE,MF=L
DYNGTLST GETMAIN EC,SP=1,MF=L
OPENUAD  OPEN  (,),MF=L
PBLOK    PUTLINE OUTPUT=(0,TERM,MULTLVL,INFOR),MF=L
IKJEFA20 CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKJEFA20 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
MINDX    EQU   @03
MSGNO    EQU   @04
MSGPTR   EQU   @02
MSGFIND  EQU   @03
PERFPTR  EQU   @02
NEWINDP  EQU   @07
OLDINDP  EQU   @06
INDEX    EQU   @05
UPTPTR   EQU   @02
UADSRPTR EQU   @07
UADSAPTR EQU   @02
UADSPPTR EQU   @02
DROBPTR  EQU   @02
DNOBPTR  EQU   @06
DPOBPTR  EQU   @05
HEDBPTR  EQU   @03
R1       EQU   @01
R2       EQU   @02
R15      EQU   @15
DHED     EQU   0
UADSMHDR EQU   DHED
UADSBLNG EQU   UADSMHDR
UADSUSER EQU   UADSMHDR+4
UADSBN01 EQU   UADSMHDR+12
UADSEXPF EQU   UADSBN01+1
UADSMAXC EQU   UADSMHDR+14
UADSATTR EQU   DHED+16
USATR00  EQU   UADSATTR
USATR01  EQU   UADSATTR
USATR02  EQU   UADSATTR
USATR03  EQU   UADSATTR
UADSINST EQU   DHED+18
UADSUPTP EQU   DHED+20
UADSPWD1 EQU   DHED+24
UADSPERP EQU   DHED+28
UADSDEST EQU   DHED+32
DPOB     EQU   0
PFLG01   EQU   DPOB
UADSPNEX EQU   DPOB+1
UADSPSUB EQU   DPOB+4
UADSPDAT EQU   DPOB+8
DNOB     EQU   0
AFLG01   EQU   DNOB
UADSANEX EQU   DNOB+1
UADSASUB EQU   DNOB+4
UADSADAT EQU   DNOB+8
DROB     EQU   0
FLGR01   EQU   DROB
UADSRNEX EQU   DROB+1
UADSRDAT EQU   DROB+8
DPOBD    EQU   0
UADSPPWD EQU   DPOBD+4
DNOBD    EQU   0
UADSALEN EQU   DNOBD+44
UADSANUM EQU   DNOBD+45
DROBD    EQU   0
UADSRNAM EQU   DROBD+4
UADSRSIZ EQU   DROBD+14
DUIDL    EQU   0
UIDLNEX  EQU   DUIDL
UIDLSWS  EQU   DUIDL+4
UIDCHG   EQU   UIDLSWS
UIDLCT   EQU   DUIDL+6
UIDUSER  EQU   DUIDL+8
UPT      EQU   0
UPTSWS   EQU   UPT+12
UPTPREFX EQU   UPT+16
UPTPREFL EQU   UPT+23
ACCTPL   EQU   0
ACCTECBP EQU   ACCTPL+8
UIDLPTR  EQU   ACCTPL+16
ACCTECB  EQU   0
ATTENTN  EQU   ACCTECB
@NM00022 EQU   0
OPERKEY  EQU   @NM00022+16
ACCTKEY  EQU   @NM00022+18
JCLKEY   EQU   @NM00022+20
MONTKEY  EQU   @NM00022+22
USDAKEY  EQU   @NM00022+24
DESTKEY  EQU   @NM00022+26
PERFKEY  EQU   @NM00022+28
MAXSKEY  EQU   @NM00022+30
USERDATA EQU   @NM00022+46
DESTADR  EQU   @NM00022+48
DESTLNG  EQU   @NM00022+52
MAXSADR  EQU   @NM00022+68
MAXSLNG  EQU   @NM00022+72
MAXSHEX  EQU   @NM00022+74
RSIZADR  EQU   @NM00022+76
RSIZLNG  EQU   @NM00022+80
DEST     EQU   0
MAXSIZE  EQU   0
SIZE     EQU   0
@NM00040 EQU   0
MEMNAME  EQU   @NM00040+4
OLDIND   EQU   0
NEWIND   EQU   0
UADSPERG EQU   0
MOFFSET  EQU   0
PTRMASK1 EQU   0
NXTLADR1 EQU   PTRMASK1
SGNO1    EQU   PTRMASK1+4
PTRMASK2 EQU   0
SGNO2    EQU   PTRMASK2+4
DCBOFLAG EQU   DCBOFLGS
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00053 EQU   DCBOFLGS
@NM00046 EQU   PTRMASK2
@NM00041 EQU   @NM00040
@NM00033 EQU   @NM00022+82
@NM00032 EQU   @NM00022+56
@NM00031 EQU   @NM00022+54
@NM00030 EQU   @NM00022+44
@NM00029 EQU   @NM00022+40
@NM00028 EQU   @NM00022+38
@NM00027 EQU   @NM00022+36
@NM00026 EQU   @NM00022+34
@NM00025 EQU   @NM00022+32
@NM00024 EQU   @NM00022+8
@NM00023 EQU   @NM00022
@NM00019 EQU   ACCTECB
@NM00018 EQU   ACCTPL+12
@NM00017 EQU   ACCTPL
@NM00016 EQU   UPT+15
UPTLDEL  EQU   UPT+14
UPTCDEL  EQU   UPT+13
UPTWTP   EQU   UPTSWS
UPTMODE  EQU   UPTSWS
UPTALD   EQU   UPTSWS
UPTPAUS  EQU   UPTSWS
UPTNCOM  EQU   UPTSWS
UPTMID   EQU   UPTSWS
UPTNPRM  EQU   UPTSWS
UPTRCVR  EQU   UPTSWS
UPTUSER  EQU   UPT+2
@NM00015 EQU   UPT
@NM00014 EQU   UIDLSWS
UIDDEL   EQU   UIDLSWS
UIDADD   EQU   UIDLSWS
UADSUNAM EQU   DROBD+16
@NM00013 EQU   DROBD+12
@NM00012 EQU   DROBD+1
UADSRCTR EQU   DROBD
UADSADRF EQU   DNOBD+4
@NM00011 EQU   DNOBD+1
UADSACTR EQU   DNOBD
@NM00010 EQU   DPOBD+1
UADSPCTR EQU   DPOBD
@NM00009 EQU   DROB+4
@NM00008 EQU   DROB
@NM00007 EQU   DNOB
@NM00006 EQU   DPOB
@NM00005 EQU   DHED+44
UADSSOUT EQU   DHED+43
UADSSUBM EQU   DHED+42
UADSSUBC EQU   DHED+41
UADSSUBH EQU   DHED+40
@NM00004 EQU   UADSATTR
USATR04  EQU   UADSATTR
@NM00003 EQU   UADSATTR
@NM00002 EQU   UADSBN01+1
UADSXUSD EQU   UADSBN01+1
UADSXBLK EQU   UADSBN01+1
UADSNUSP EQU   UADSBN01+1
@NM00001 EQU   UADSBN01
UADSFSQP EQU   UADSMHDR+2
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00059 EQU   ACCTRET
@RT00063 EQU   ACCTRET
@RT00122 EQU   CHKCHNG
@RT00124 EQU   ACCTRET
@RT00154 EQU   MSG3
@RT00156 EQU   ACCTRET
@RT00158 EQU   CHKCHNG
@RC00188 EQU   @RC00186
@RF00239 EQU   @RC00237
@RT00269 EQU   CHKMAX
@RT00273 EQU   PWSPRT
@RT00277 EQU   ACLEVL
@RF00277 EQU   MORUS
@RT00281 EQU   MORUS
@RT00287 EQU   WORKER
@RF00287 EQU   ACLEVL
@RT00297 EQU   WORKER
@RF00297 EQU   ACLEVL
@RT00308 EQU   ACSPRT
@RT00312 EQU   MORUS
@RT00317 EQU   PRLEVL
@RF00317 EQU   MORUS
@RT00323 EQU   WORKER
@RF00323 EQU   PRLEVL
@RT00335 EQU   WORKER
@RT00348 EQU   CHKMAX
@RT00353 EQU   WORKER
@RT00380 EQU   CHKMAX
@RT00401 EQU   CHKMAX
@RT00415 EQU   ENQUSER
@RT00437 EQU   ACCTRET
@RT00448 EQU   WRTREE
@RT00498 EQU   ACCTRET
@RF00501 EQU   MORUS
@RT00544 EQU   ACCTRET
@RT00548 EQU   MSG3
@RT00555 EQU   ACCTRET
@RT00565 EQU   ACCTRET
@RT00579 EQU   ACCTRET
@RT00593 EQU   ACCTRET
@RT00595 EQU   ACCTRET
@RT00597 EQU   ACCTRET
@RT00641 EQU   MSG3
@RF00652 EQU   @EL00001
@RF00660 EQU   @EL00002
@ENDDATA EQU   *
         END   IKJEFA20,(C'PLS1014',0701,78174)
