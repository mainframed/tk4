         TITLE 'IKJEFF05 - SUBMIT I/O AND CONTROL ROUTINE              *
                        '
IKJEFF05 CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(16)                                          01S0001
         DC    C'IKJEFF05  78.174'                              01S0001
IKJEFF06 DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL2(@EP00294-IKJEFF06)
         ENTRY IKJEFF06
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @12,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@12                                      01S0001
         L     @00,@SIZDATD                                     01S0001
         GETMAIN  R,LV=(0)
         LR    @11,@01                                          01S0001
         USING @DATD,@11                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         LM    @15,@01,16(@13)                                  01S0001
         ST    @11,8(,@13)                                      01S0001
         LR    @13,@11                                          01S0001
         AH    @15,4(,@15)                                      01S0001
         BR    @15                                              01S0001
@EP00001 MVC   @PC00001(4),0(@01)                               01S0001
*/********************************************************************/
*/*  END OF IKJEFFMT MAPPING MACRO                                   */
*/********************************************************************/
*                                                               01S0117
*                                                               01S0117
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZATION OF LOCAL BITS AND POINTERS                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0117
*   CONLIST=ADDR(SUBCTAB);          /* LOCAL POINTER TO CONTROL TABLE*/
         L     CONLIST,@PC00001                                 01S0117
*   HTPTR=HISTPT;                   /* LOCAL POINTER TO HISTORY TABLE*/
         L     HTPTR,HISTPT(,CONLIST)                           01S0118
*   MSGPTR=MSGLISPT;                /* LOCAL POINTER TO MESSAGE TABLE*/
         L     MSGPTR,MSGLISPT(,CONLIST)                        01S0119
*   INREAD='1'B;                    /* INDICATE EXECUTION IN IKJEFF05
*                                      MAIN (READ) PROCEDURE         */
         OI    INREAD(HTPTR),B'10000000'                        01S0120
*   R2=ADDR(WORKAREA);              /* INITIALIZE WORK POINTER TO DCB
*                                      AND INTERNAL SWITCHES         */
         LA    R2,WORKAREA                                      01S0121
*   FAILCODE='00'X;                 /* INIT FAILURE CODE             */
         MVI   FAILCODE(R2),X'00'                               01S0122
*   FINDCODE=0;                     /* INIT FIND RETURN CODE         */
         SLR   @03,@03                                          01S0123
         ST    @03,FINDCODE                                     01S0123
*   BUFCORLN=0;                     /* INIT LENGTH OF CORE OBTAINED  */
         ST    @03,BUFCORLN                                     01S0124
*   CURRDD=DDPTR;                   /* POINT TO DD FOR FIRST D.S.    */
*                                                               01S0125
         L     CURRDD,DDPTR(,CONLIST)                           01S0125
*   /*****************************************************************/
*   /*                                                               */
*   /* READ (AND PROCESS) EACH INPUT DATA SET IN THIS LOOP           */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0126
*   DO WHILE(CURRDD^=0&QUIT=OFF);   /* ALLDS DO/END GROUP - LOOP
*                                      UNTIL PROCESS ALL INPUT DATA
*                                      SETS OR FIND ERROR            */
         B     @DE00126                                         01S0126
@DL00126 DS    0H                                               01S0127
*     READSW='00'X;                 /* INIT READ SWITCHES            */
         MVI   READSW(R2),X'00'                                 01S0127
*     DCB=READDCB;                  /* COPY DCB TO DYNAMIC CORE      */
         MVC   DCB(96,R2),READDCB                               01S0128
*     DCBDSORG(1)=DA08DSO;          /* SET PROPER ORGANIZATION       */
*                                                               01S0129
         L     @03,DAPB0PTR(,CURRDD)                            01S0129
         MVC   DCBDSORG(1,R2),DA08DSO(@03)                      01S0129
*     /***************************************************************/
*     /*                                                             */
*     /* INPUT D.S. DSORG MUST BE SEQ. OR PDS (PARTITIONED)          */
*     /*                                                             */
*     /***************************************************************/
*                                                               01S0130
*     IF DCBDSORG='40'X×DCBDSORG='02'X THEN                     01S0130
         CLI   DCBDSORG(R2),X'40'                               01S0130
         BE    @RT00130                                         01S0130
         CLI   DCBDSORG(R2),X'02'                               01S0130
         BNE   @RF00130                                         01S0130
@RT00130 DS    0H                                               01S0131
*       DO;                                                     01S0131
*         IF DCBDSORG='02'X THEN    /* IF IT IS A PDS THEN WE MUST
*                                      ALTER THE MACRO FORMAT TO SHOW
*                                      BPAM READ (WITH POINT)        */
         CLI   DCBDSORG(R2),X'02'                               01S0132
         BNE   @RF00132                                         01S0132
*           DCBIMACR=KONX24;                                    01S0133
         MVI   DCBIMACR(R2),B'00100100'                         01S0133
*         ELSE                      /* DATA SET IS SEQUENTIAL        */
*                                                               01S0134
*           /*********************************************************/
*           /*                                                       */
*           /* ERROR IF MEMBER NAME FOR SEQ. D.S.                    */
*           /*                                                       */
*           /*********************************************************/
*                                                               01S0134
*           IF DA08MNM^=ALLBLANK THEN                           01S0134
         B     @RC00132                                         01S0134
@RF00132 L     @03,DAPB0PTR(,CURRDD)                            01S0134
         CLC   DA08MNM(8,@03),@CC00058                          01S0134
         BE    @RF00134                                         01S0134
*             FAILCODE='04'X;                                   01S0135
         MVI   FAILCODE(R2),X'04'                               01S0135
*                                                               01S0136
*         /***********************************************************/
*         /*                                                         */
*         /* INITIALIZE DCB FOR DATA SET                             */
*         /*                                                         */
*         /***********************************************************/
*                                                               01S0136
*         RDECB=MDECB;              /* COPY DECB INTO DYNAMIC CORE   */
@RF00134 DS    0H                                               01S0136
@RC00132 MVC   RDECB(20),MDECB                                  01S0136
*         FIRSTRD='1'B;             /* INDICATE THIS IS FIRST READ   */
         OI    FIRSTRD(R2),B'10000000'                          01S0137
*         DDNAME=DA08DDN;           /* COPY THE DDNAME FROM THE 01S0138
*                                      DAIR08 BLOCK FOR THIS DATA SET
*                                      INTO THE DCB                  */
*                                                               01S0138
         L     @03,DAPB0PTR(,CURRDD)                            01S0138
         MVC   DDNAME(8,R2),DA08DDN(@03)                        01S0138
*         /***********************************************************/
*         /*                                                         */
*         /* OPEN THE INPUT DATA SET                                 */
*         /*                                                         */
*         /***********************************************************/
*                                                               01S0139
*         ROPE=OPEL;                /* MOVE LIST FORM OF OPEN TO
*                                      DYNAMIC CORE                  */
         MVC   ROPE(4),OPEL                                     01S0139
*         GEN(OPEN ((R2)),MF=(E,ROPE))                          01S0140
*         REFS(R2,ROPE);            /* GENERATED OPEN MACRO          */
         OPEN ((R2)),MF=(E,ROPE)
*       END;                                                    01S0141
*                                                               01S0141
*     /***************************************************************/
*     /*                                                             */
*     /* ERROR IF DSORG NOT SEQUENTIAL OR PDS                        */
*     /*                                                             */
*     /***************************************************************/
*                                                               01S0142
*     ELSE                          /* IF THE ORGANIZATION IS NOT
*                                      SEQUENTIAL OR PARTITIONED IT
*                                      IS AN ERROR                   */
*       FAILCODE='01'X;                                         01S0142
         B     @RC00130                                         01S0142
@RF00130 MVI   FAILCODE(R2),X'01'                               01S0142
*                                                               01S0143
*     /***************************************************************/
*     /*                                                             */
*     /* IF OPEN SUCCESSFUL AND PDS, ISSUE FIND FOR MEMBER           */
*     /*                                                             */
*     /***************************************************************/
*                                                               01S0143
*     IF OPENBIT='1'B&DA08DSO='02'X THEN/* IF THE OPEN WAS SUCCESSFUL
*                                      AND                           */
@RC00130 TM    OPENBIT(R2),B'00010000'                          01S0143
         BNO   @RF00143                                         01S0143
         L     @03,DAPB0PTR(,CURRDD)                            01S0143
         CLI   DA08DSO(@03),X'02'                               01S0143
         BNE   @RF00143                                         01S0143
*       DO;                         /* THE DATA SET IS A PDS THEN    */
*         IF DA08MNM=ALLBLANK       /* IF NO MEMBERNAME WAS SPECIFIED*/
*           THEN                    /* USE TEMPNAME FOR DEFAULT NAME */
         CLC   DA08MNM(8,@03),@CC00058                          01S0145
         BNE   @RF00145                                         01S0145
*           DA08MNM=KTEMPNAM;                                   01S0146
         MVC   DA08MNM(8,@03),KTEMPNAM                          01S0146
*         FINDNAME=DA08MNM;         /* MOVE MEMBER NAME TO FIND AREA */
@RF00145 L     @03,DAPB0PTR(,CURRDD)                            01S0147
         MVC   FINDNAME(8),DA08MNM(@03)                         01S0147
*         RFY                                                   01S0148
*           R15 RSTD;                                           01S0148
*         GEN(FIND  (R2),FINDNAME,D)                            01S0149
*         REFS(R2,FINDNAME);        /* GENERATED FIND MACRO          */
         FIND  (R2),FINDNAME,D
*         FINDCODE=R15;             /* SAVE FIND RETURN CODE         */
         ST    R15,FINDCODE                                     01S0150
*       END;                                                    01S0151
*     RFY                                                       01S0152
*       R15 UNRSTD;                                             01S0152
*                                                               01S0152
@RF00143 DS    0H                                               01S0153
*     /***************************************************************/
*     /*                                                             */
*     /* INITIALIZE FOR FIRST READ                                   */
*     /*                                                             */
*     /***************************************************************/
*                                                               01S0153
*     IF OPENBIT='1'B&LRECL=80&RECFMF='1'B&RECFMV='0'B&FINDCODE=0&
*         FAILCODE='00'X THEN       /* IF OPEN WAS SUCCESSFUL AND RCD
*                                      LENGTH AND FORMAT ARE OK      */
         TM    OPENBIT(R2),B'00010000'                          01S0153
         BNO   @RF00153                                         01S0153
         CLC   LRECL(2,R2),@CH00060                             01S0153
         BNE   @RF00153                                         01S0153
         TM    RECFMF(R2),B'10000000'                           01S0153
         BNO   @RF00153                                         01S0153
         TM    RECFMV(R2),B'01000000'                           01S0153
         BNZ   @RF00153                                         01S0153
         SLR   @03,@03                                          01S0153
         C     @03,FINDCODE                                     01S0153
         BNE   @RF00153                                         01S0153
         CLI   FAILCODE(R2),X'00'                               01S0153
         BNE   @RF00153                                         01S0153
*       DO;                         /* READCODE DO/END GROUP         */
*         IF FIRSTRD='1'B           /* THEN IF READ HAS NOT BEEN     */
*           THEN                    /* INITIALIZED THEN              */
         TM    FIRSTRD(R2),B'10000000'                          01S0155
         BNO   @RF00155                                         01S0155
*           DO;                     /* READINIT DO/END GROUP         */
*             RESCNT=0;             /* INITIALIZE COUNT OF BYTES THAT
*                                      THE LAST BLOCK READ IS LESS
*                                      THAN THE BLOCKSIZE BY         */
*                                                               01S0157
         STH   @03,RESCNT                                       01S0157
*             /*******************************************************/
*             /*                                                     */
*             /* GET LARGER INPUT BUFFER IF NECESSARY                */
*             /*                                                     */
*             /*******************************************************/
*                                                               01S0158
*             IF BUFCORLN^=0&BUFCORLN<BLKSIZE THEN/* IF CORE HAS BEEN
*                                      OBTAINED BUT                  */
         L     @15,BUFCORLN                                     01S0158
         CR    @15,@03                                          01S0158
         BE    @RF00158                                         01S0158
         CH    @15,BLKSIZE(,R2)                                 01S0158
         BNL   @RF00158                                         01S0158
*               DO;                 /* IT IS NOT ENOUGH              */
*                 GEN(MVC   AAFREM,DDFREM)                      01S0160
*                 SETS(AAFREM) REFS(DDFREM);/* GENERATED MVC         */
         MVC   AAFREM,DDFREM
*                 R8=BUFCORLN;      /* FREE THE OLD CORE             */
         L     R8,BUFCORLN                                      01S0161
*                 GEN(FREEMAIN E,LV=(R8),A=BUFCORAD,SP=1,MF=(E,AAFREM))
*                 REFS(R8,BUFCORAD,AAFREM);/* GENERATED FREEMAIN
*                                      MACRO                         */
         FREEMAIN E,LV=(R8),A=BUFCORAD,SP=1,MF=(E,AAFREM)
*                 BUFCORLN=0;       /* INDICATE HAVE NO CORE         */
         SLR   @03,@03                                          01S0163
         ST    @03,BUFCORLN                                     01S0163
*               END;                                            01S0164
*                                                               01S0164
*             /*******************************************************/
*             /*                                                     */
*             /* GET CORE FOR READ BUFFER (MINIMUM = BLOCKSIZE,      */
*             /* MAXIMUM = 2 X BLOCKSIZE)                            */
*             /*                                                     */
*             /*******************************************************/
*                                                               01S0165
*             IF BUFCORLN=0 THEN    /* IF HAVE NO CORE               */
@RF00158 L     @03,BUFCORLN                                     01S0165
         LTR   @03,@03                                          01S0165
         BNZ   @RF00165                                         01S0165
*               DO;                                             01S0166
*                 GEN(MVC   AAGETM,DDGETM)                      01S0167
*                 SETS(AAGETM) REFS(DDGETM);/* GENERATED MVC         */
         MVC   AAGETM,DDGETM
*                 GMNMIN=BLKSIZE;   /* THEN PERFORM A GETMAIN FOR ONE
*                                      OR TWO BLOCK SIZES            */
         LH    @03,BLKSIZE(,R2)                                 01S0168
         ST    @03,GMNMIN                                       01S0168
*                 GMNMAX=2*GMNMIN;                              01S0169
         ALR   @03,@03                                          01S0169
         ST    @03,GMNMAX                                       01S0169
*                 RFY                                           01S0170
*                   R15 RSTD;                                   01S0170
*                 GEN                                           01S0171
*(GETMAIN VC,LA=GMNMIN,A=BUFFIND,SP=1,MF=(E,AAGETM))            01S0171
*                 SETS(BUFFIND) REFS(GMNMIN,AAGETM);/* GENERATED
*                                      GETMAIN MACRO                 */
*                                                               01S0171
         GETMAIN VC,LA=GMNMIN,A=BUFFIND,SP=1,MF=(E,AAGETM)
*                 /***************************************************/
*                 /*                                                 */
*                 /* IF THE GETMAIN FAILED, ISSUE 'INSUFFICIENT      */
*                 /* STORAGE AVAILABLE' MESSAGE                      */
*                 /*                                                 */
*                 /***************************************************/
*                                                               01S0172
*                 IF R15^=0 THEN                                01S0172
         LTR   R15,R15                                          01S0172
         BZ    @RF00172                                         01S0172
*                   DO;                                         01S0173
*                     MSGID='05I';                              01S0174
         MVI   MSGID+3(MSGPTR),C' '                             01S0174
         MVC   MSGID(3,MSGPTR),@CC00651                         01S0174
*                     L1=LENGTH(CTCMDNM);/* INSERT COMMAND NAME -
*                                                              Y02993*/
         MVI   L1(MSGPTR),X'08'                                 01S0175
*                     VAR1=ADDR(CTCMDNM);/*                    Y02993*/
         LA    @14,CTCMDNM(,CONLIST)                            01S0176
         STCM  @14,7,VAR1(MSGPTR)                               01S0176
*                     GO TO MSG;    /* PUT MESSAGE                   */
         B     MSG                                              01S0177
*                   END;                                        01S0178
*                 RFY                                           01S0179
*                   R15 UNRSTD;                                 01S0179
@RF00172 DS    0H                                               01S0180
*               END;                                            01S0180
*                                                               01S0181
*             /*******************************************************/
*             /*                                                     */
*             /* USE SINGLE BUFFER IF COULD ONLY GET CORE FOR SINGLE */
*             /* INSTEAD OF DOUBLE BUFFER                            */
*             /*                                                     */
*             /*******************************************************/
*                                                               01S0181
*             IF BUFCORLN<(2*BLKSIZE) THEN/* IF CORE IS INSUFFICIENT
*                                      FOR                           */
@RF00165 LH    @09,BLKSIZE(,R2)                                 01S0181
         ALR   @09,@09                                          01S0181
         C     @09,BUFCORLN                                     01S0181
         BNH   @RF00181                                         01S0181
*               DO;                 /* DOUBLE BUFFERS THEN           */
*                 DBLBUFSW=0;       /* INDICATE SINGLE BUFFS         */
         MVI   DBLBUFSW,X'00'                                   01S0183
*                 BUFFA=BUFCORAD;   /* SET BUFFER ADDRESS            */
         L     BUFFA,BUFCORAD                                   01S0184
*                 BUFFB=BUFFA;      /* FIRST AND SECOND BUFFS        */
         STCM  BUFFA,7,BUFFB                                    01S0185
*               END;                /* ARE THE SAME                  */
*                                                               01S0186
*             /*******************************************************/
*             /*                                                     */
*             /* FIRST READ - IF DOUBLE INPUT BUFFER                 */
*             /*                                                     */
*             /*******************************************************/
*                                                               01S0187
*             ELSE                  /* OTHERWISE                     */
*               DO;                 /* THERE ARE DOUBLE BUFFERS      */
         B     @RC00181                                         01S0187
@RF00181 DS    0H                                               01S0188
*                 DBLBUFSW=1;       /* SO INDICATE THIS              */
         MVI   DBLBUFSW,X'01'                                   01S0188
*                 BUFFA=BUFCORAD;   /* SET ADDRESS OF FIRST          */
         L     @03,BUFCORAD                                     01S0189
         LR    BUFFA,@03                                        01S0189
*                 BUFFB=BUFCORAD+(BUFCORLN/2);/* SET ADDRESS OF 01S0190
*                                      SECOND                        */
         L     @15,BUFCORLN                                     01S0190
         SRL   @15,1                                            01S0190
         ALR   @03,@15                                          01S0190
         STCM  @03,7,BUFFB                                      01S0190
*                 R8=BUFFB;                                     01S0191
         LR    R8,@03                                           01S0191
*                 GEN(READ  RDECB,SF,(R2),(R8),MF=E)            01S0192
*                 FLOWS(INPUTEOF,SYNADRTN) REFS(RDECB,R2,R8) SETS(IOB,
*                     BUFFB);       /* GENERATED READ MACRO          */
         READ  RDECB,SF,(R2),(R8),MF=E
*               END;                                            01S0193
*             FIRSTRD='0'B;         /* INDICATE READ INITIALIZED     */
@RC00181 NI    FIRSTRD(R2),B'01111111'                          01S0194
*             CURREC=BUFFA+BUFCORLN;/* INIT CURRENT RECORD ADDRESS   */
         LR    CURREC,BUFFA                                     01S0195
         AL    CURREC,BUFCORLN                                  01S0195
*           END;                    /* READINIT DO/END GROUP         */
*                                                               01S0197
*         /***********************************************************/
*         /*                                                         */
*         /* LOOP OF READING/PROCESSING INPUT RECORDS                */
*         /*                                                         */
*         /***********************************************************/
*                                                               01S0197
*         DO WHILE(QUIT=OFF);       /* NEXTRCD DO/END GROUP -   01S0197
*                                      CONTINUE READ LOOP UNTIL EOF
*                                      (INPUTEOF LABEL GIVEN CONTROL)
*                                      OR ERROR FOUND (QUIT = ON)    */
*                                                               01S0197
@RF00155 B     @DE00197                                         01S0197
@DL00197 DS    0H                                               01S0198
*           /*********************************************************/
*           /*                                                       */
*           /* POINT TO NEXT RECORD IN BUFFER (WILL DO READ(S) TO    */
*           /* FILL BUFFER(S) IF THIS ADDRESS NOT WITHIN AREA OF LAST*/
*           /* READ)                                                 */
*           /*                                                       */
*           /*********************************************************/
*                                                               01S0198
*           CURREC=CURREC+LRECL;    /* SET POINTER TO NEXT RECORD IN
*                                      BUFFER(S)                     */
*                                                               01S0198
         AH    CURREC,LRECL(,R2)                                01S0198
*           /*********************************************************/
*           /*                                                       */
*           /* READ INTO BUFFER(S) IF NECESSARY                      */
*           /*                                                       */
*           /*********************************************************/
*                                                               01S0199
*           IF CURREC^<BUFFA+BLKSIZE-RESCNT THEN/* IF PROCESSED LAST
*                                      RECORD IN BUFFER(S)           */
         LR    @03,BUFFA                                        01S0199
         AH    @03,BLKSIZE(,R2)                                 01S0199
         SH    @03,RESCNT                                       01S0199
         CR    CURREC,@03                                       01S0199
         BL    @RF00199                                         01S0199
*             DO K=0 TO DBLBUFSW;   /* FILLBUFF DO/END GROUP -  01S0200
*                                      EXECUTE FOLLOWING CODE TWICE
*                                      IF THERE ARE DOUBLE BUFFERS
*                                      AND ONCE IF SINGLE BUFFERED   */
         SLR   K,K                                              01S0200
         B     @DE00200                                         01S0200
@DL00200 DS    0H                                               01S0201
*               IF DBLBUFSW=K THEN  /* WAIT TILL SECOND LOOP TO DO
*                                      READ FOR DOUBLE BUFFER        */
         SLR   @15,@15                                          01S0201
         IC    @15,DBLBUFSW                                     01S0201
         CR    K,@15                                            01S0201
         BNE   @RF00201                                         01S0201
*                 DO;                                           01S0202
*                   R8=BUFFB;                                   01S0203
         L     R8,BUFFB-1                                       01S0203
         LA    R8,0(,R8)                                        01S0203
*                   GEN(READ  RDECB,SF,(R2),(R8),MF=E)          01S0204
*                   FLOWS(INPUTEOF,SYNADRTN) REFS(RDECB,R2,R8) SETS(IOB
*                       ,BUFFB);    /* GENERATED READ MACRO          */
         READ  RDECB,SF,(R2),(R8),MF=E
*                 END;                                          01S0205
*                                                               01S0205
*               /*****************************************************/
*               /*                                                   */
*               /* IF SINGLE BUFFERED OR THIS IS FIRST TIME THROUGH  */
*               /* ISSUE A CHECK ON THE PREVIOUS READ, INITIALIZE THE*/
*               /* POINTER TO THE CURRENT RECORD AND SWITCH BUFFER   */
*               /* POINTERS IN CASE DOUBLE BUFFERED                  */
*               /*                                                   */
*               /*****************************************************/
*                                                               01S0206
*               IF K=0 THEN                                     01S0206
@RF00201 LTR   K,K                                              01S0206
         BNZ   @RF00206                                         01S0206
*                 DO;                                           01S0207
*                   R8=ADDR(RDECB);                             01S0208
         LA    R8,RDECB                                         01S0208
*                   GEN(CHECK ((R8)))                           01S0209
*                   REFS(R8);       /* GENERATED CHECK MACRO         */
         CHECK ((R8))
*                   CURREC=BUFFB;                               01S0210
         L     CURREC,BUFFB-1                                   01S0210
         LA    CURREC,0(,CURREC)                                01S0210
*                   BUFFB=BUFFA;                                01S0211
         STCM  BUFFA,7,BUFFB                                    01S0211
*                   BUFFA=CURREC;                               01S0212
         LR    BUFFA,CURREC                                     01S0212
*                   RESCNT=CSWCNT;  /* SET DIFFERENCE BETWEEN BLOCK
*                                      SIZE AND NUMBER OF BYTES READ */
         L     @01,DECIOBPT                                     01S0213
         LH    @15,CSWCNT(,@01)                                 01S0213
         STH   @15,RESCNT                                       01S0213
*                 END;                                          01S0214
*             END;                  /* FILLBUFF DO/END GROUP         */
*                                                               01S0215
@RF00206 AL    K,@CF00048                                       01S0215
@DE00200 SLR   @15,@15                                          01S0215
         IC    @15,DBLBUFSW                                     01S0215
         CR    K,@15                                            01S0215
         BNH   @DL00200                                         01S0215
*           /*********************************************************/
*           /*                                                       */
*           /* GO TO CONTROL ROUTINE TO PROCESS THIS CARD            */
*           /*                                                       */
*           /*********************************************************/
*                                                               01S0216
*           STMTPT=ADDR(NCARD);     /* POINT TO INPUT RECORD IN 01S0216
*                                      BUFFER - NOTE THAT BOTH NCARD
*                                      AND STMTPT ARE CHANGED BY
*                                      LATER SUBMIT PROCESSING       */
@RF00199 ST    CURREC,STMTPT(,CONLIST)                          01S0216
*           CALL FF05I06;           /* CALL INTERNAL ROUTINE TO 01S0217
*                                      PROCESS THE RECORD (EXTERNAL
*                                      ROUTINES CALLING THE CONTROL
*                                      ROUTINE MUST USE IKJEFF06
*                                      ENTRY POINT AND PASS A POINTER
*                                      TO SUBMIT CONTROL TABLE)      */
         BAL   @14,FF05I06                                      01S0217
*         END;                      /* NEXTRCD DO/END GROUP -   01S0218
*                                      CONTINUE READ LOOP UNTIL EOF
*                                      (INPUTEOF LABEL GIVEN CONTROL)
*                                      OR ERROR FOUND (IF QUIT SWITCH
*                                      ON FALL THRU HERE)            */
@DE00197 TM    QUIT(HTPTR),B'10000000'                          01S0218
         BZ    @DL00197                                         01S0218
*       END;                        /* READCODE DO/END GROUP         */
*                                                               01S0220
*     /***************************************************************/
*     /*                                                             */
*     /* ERROR MESSAGE - INSERT DATA SET <AND MEMBER> NAME           */
*     /*                                                             */
*     /***************************************************************/
*                                                               01S0220
*     ELSE                          /* IF THE OPEN WAS UNSUCCESSFUL
*                                      OR THE DATA SET IS NOT   01S0220
*                                      ACCEPTABLE                    */
*       DO;                         /* PUTMSG DO/END GROUP           */
         B     @RC00153                                         01S0220
@RF00153 DS    0H                                               01S0221
*         VAR1=ADDR(DSNAME)+D8ADJUST;/* SET MESSAGE VARIABLE POINTER
*                                      TO INCLUDE THE NAME OF THE
*                                      DATA SET IN THE MESSAGE       */
         L     @03,DAPB0PTR(,CURRDD)                            01S0221
         LA    @15,84                                           01S0221
         ALR   @15,@03                                          01S0221
         LA    @14,DSNAME(,@15)                                 01S0221
         SLR   @01,@01                                          01S0221
         IC    @01,D8ADJUST(,@15)                               01S0221
         ALR   @14,@01                                          01S0221
         STCM  @14,7,VAR1(MSGPTR)                               01S0221
*         L1=NAMELEN-D8ADJUST;                                  01S0222
         LCR   @01,@01                                          01S0222
         AH    @01,NAMELEN(,@15)                                01S0222
         STC   @01,L1(,MSGPTR)                                  01S0222
*         VAR2=ADDR(DA08MNM);       /* SET MESSAGE VARIABLE POINTER 2
*                                      TO INCLUDE THE NAME OF THE
*                                      MEMBER NAME IN THE MESSAGE    */
         LA    @15,DA08MNM(,@03)                                01S0223
         STCM  @15,7,VAR2(MSGPTR)                               01S0223
*         L2=LENGTH(DA08MNM);                                   01S0224
*                                                               01S0224
         MVI   L2(MSGPTR),X'08'                                 01S0224
*         /***********************************************************/
*         /*                                                         */
*         /* IF THERE IS NO MEMBER NAME INDICATE SO                  */
*         /*                                                         */
*         /***********************************************************/
*                                                               01S0225
*         IF DA08MNM(1)=' ' THEN                                01S0225
         CLI   DA08MNM(@03),C' '                                01S0225
         BNE   @RF00225                                         01S0225
*           L2=0;                                               01S0226
*                                                               01S0226
         MVI   L2(MSGPTR),X'00'                                 01S0226
*         /***********************************************************/
*         /*                                                         */
*         /* GET ID FOR ERROR MESSAGE                                */
*         /*                                                         */
*         /***********************************************************/
*                                                               01S0227
*PUTMSG2:                                                       01S0227
*         IF FAILCODE^='03'X THEN   /* IF IT WAS NOT AN I/O ERROR
*                                      LINKAGE FOR MSG MUST BE SET UP*/
@RF00225 DS    0H                                               01S0227
PUTMSG2  CLI   FAILCODE(R2),X'03'                               01S0227
         BE    @RF00227                                         01S0227
*           DO;                     /* NOIOERR DO/END GROUP          */
*                                                               01S0228
*             /*******************************************************/
*             /*                                                     */
*             /* ID FOR INCORRECT DSORG                              */
*             /*                                                     */
*             /*******************************************************/
*                                                               01S0229
*             IF FAILCODE='01'X THEN                            01S0229
         CLI   FAILCODE(R2),X'01'                               01S0229
         BNE   @RF00229                                         01S0229
*               MSGID='05K ';                                   01S0230
         MVC   MSGID(4,MSGPTR),@CC00658                         01S0230
*             ELSE                                              01S0231
*                                                               01S0231
*               /*****************************************************/
*               /*                                                   */
*               /* IF OPEN WAS UNSUCCESSFUL, SET THE FAILURE CODE TO */
*               /* 02 AND SET PROPER MESSAGE ID                      */
*               /*                                                   */
*               /*****************************************************/
*                                                               01S0231
*               IF OPENBIT='0'B THEN                            01S0231
         B     @RC00229                                         01S0231
@RF00229 TM    OPENBIT(R2),B'00010000'                          01S0231
         BNZ   @RF00231                                         01S0231
*                 DO;                                           01S0232
*                   FAILCODE='02'X;                             01S0233
         MVI   FAILCODE(R2),X'02'                               01S0233
*                   MSGID='05E ';                               01S0234
         MVC   MSGID(4,MSGPTR),@CC00659                         01S0234
*                 END;                                          01S0235
*                                                               01S0235
*             /*******************************************************/
*             /*                                                     */
*             /* OTHERWISE IF THE RECORD LENGTH WAS INVALID (NOT 80) */
*             /* OR IF THE RECORD FORMAT WAS INVALID (NOT FIXED) SET */
*             /* THE PROPER MESSAGE ID                               */
*             /*                                                     */
*             /*******************************************************/
*                                                               01S0236
*               ELSE                                            01S0236
*                 IF LRECL^=80 THEN /* INVALID RECORD LENGTH         */
         B     @RC00231                                         01S0236
@RF00231 CLC   LRECL(2,R2),@CH00060                             01S0236
         BE    @RF00236                                         01S0236
*                   MSGID='05F ';                               01S0237
         MVC   MSGID(4,MSGPTR),@CC00660                         01S0237
*                 ELSE              /* HAVEN'T IDENTIFIED ERROR YET  */
*                   IF RECFMF^='1'B×RECFMV='1'B THEN/* INVALID RECFM */
         B     @RC00236                                         01S0238
@RF00236 TM    RECFMV(R2),B'01000000'                           01S0238
         BNZ   @RT00238                                         01S0238
         TM    RECFMF(R2),B'10000000'                           01S0238
         BO    @RF00238                                         01S0238
@RT00238 DS    0H                                               01S0239
*                     MSGID='05G ';                             01S0239
*                                                               01S0239
         MVC   MSGID(4,MSGPTR),@CC00661                         01S0239
*             /*******************************************************/
*             /*                                                     */
*             /* OTHERWISE IT WAS A FIND ERROR                       */
*             /*                                                     */
*             /*******************************************************/
*                                                               01S0240
*                   ELSE                                        01S0240
*                                                               01S0240
*                     /***********************************************/
*                     /*                                             */
*                     /* IF THE ERROR IS THAT THE MEMBER NAME WAS NOT*/
*                     /* FOUND THEN THE VARIABLES MUST BE REVERSED   */
*                     /* FOR THE MESSAGE                             */
*                     /*                                             */
*                     /***********************************************/
*                                                               01S0240
*                     IF FINDCODE=4 THEN                        01S0240
         B     @RC00238                                         01S0240
@RF00238 CLC   FINDCODE(4),@CF00125                             01S0240
         BNE   @RF00240                                         01S0240
*                       DO;                                     01S0241
*                         MSGID='05H ';                         01S0242
         MVC   MSGID(4,MSGPTR),@CC00662                         01S0242
*                         GOTO REVVAR;/* NOW REVERSE INSERTS FOR
*                                      MESSAGE                       */
         B     REVVAR                                           01S0243
*                       END;                                    01S0244
*                                                               01S0245
*             /*******************************************************/
*             /*                                                     */
*             /* OTHERWISE IF IT WAS A FIND I/O ERROR, SET UP PROPER */
*             /* MSGID                                               */
*             /*                                                     */
*             /*******************************************************/
*                                                               01S0245
*                     ELSE                                      01S0245
*                       IF FINDCODE='08'X THEN/* R.C. WAS FOR I/O
*                                      ERROR                         */
@RF00240 CLC   FINDCODE(4),@CF00664                             01S0245
         BNE   @RF00245                                         01S0245
*                         MSGID='05J ';                         01S0246
*                                                               01S0246
         MVC   MSGID(4,MSGPTR),@CC00665                         01S0246
*             /*******************************************************/
*             /*                                                     */
*             /* OTHERWISE IT WAS A MEMBER NAME ON A SEQUENTIAL DATA */
*             /* SET                                                 */
*             /*                                                     */
*             /*******************************************************/
*                                                               01S0247
*                       ELSE                                    01S0247
*                         DO;                                   01S0247
         B     @RC00245                                         01S0247
@RF00245 DS    0H                                               01S0248
*                           MSGID='05L ';                       01S0248
         MVC   MSGID(4,MSGPTR),@CC00666                         01S0248
*REVVAR:                            /* CODE TO REVERSE INSERTS FOR
*                                      MESSAGE - ALSO USED FOR  01S0249
*                                      FINDCODE = 4                  */
*                           VAR3=VAR1;                          01S0249
REVVAR   MVC   VAR3(3,MSGPTR),VAR1(MSGPTR)                      01S0249
*                           L3=L1;                              01S0250
         IC    @03,L1(,MSGPTR)                                  01S0250
         STC   @03,L3(,MSGPTR)                                  01S0250
*                           VAR1=VAR2;                          01S0251
         MVC   VAR1(3,MSGPTR),VAR2(MSGPTR)                      01S0251
*                           L1=L2;                              01S0252
         IC    @03,L2(,MSGPTR)                                  01S0252
         STC   @03,L1(,MSGPTR)                                  01S0252
*                           VAR2=VAR3;                          01S0253
         MVC   VAR2(3,MSGPTR),VAR3(MSGPTR)                      01S0253
*                           L2=L3;                              01S0254
         IC    @03,L3(,MSGPTR)                                  01S0254
         STC   @03,L2(,MSGPTR)                                  01S0254
*                           L3=0;                               01S0255
         MVI   L3(MSGPTR),X'00'                                 01S0255
*                         END;                                  01S0256
*           END;                    /* NOIOERR DO/END GROUP          */
*                                                               01S0257
@RC00245 DS    0H                                               01S0257
@RC00238 DS    0H                                               01S0257
@RC00236 DS    0H                                               01S0257
@RC00231 DS    0H                                               01S0257
@RC00229 DS    0H                                               01S0258
*         /***********************************************************/
*         /*                                                         */
*         /* ISSUE ERROR MESSAGE AND QUIT                            */
*         /*                                                         */
*         /***********************************************************/
*                                                               01S0258
*MSG:                                                           01S0258
*         HTDLMSW='0'B;             /* ENSURE BIT FOR DLM= KEYWORD ON
*                                      DD CARD IS OFF        @ZA16858*/
@RF00227 DS    0H                                               01S0258
MSG      NI    HTDLMSW(HTPTR),B'01111111'                       01S0258
*         CARD='/*DEL';             /* FLUSH INTERNAL READER @ZA16858*/
         MVI   CARD+5,C' '                                      01S0259
         MVC   CARD+6(74),CARD+5                                01S0259
         MVC   CARD(5),@CC00669                                 01S0259
*         PT=ADDR(ENDOF);           /* RETURN TO ISSUE EOF   @ZA16858*/
         LA    @03,ENDOF                                        01S0260
         ST    @03,PT                                           01S0260
*         GOTO PUTCRD;              /* GO TO PUT CARD TO JES @ZA16858*/
         B     PUTCRD                                           01S0261
*ENDOF:                                                         01S0262
*         CARD='/*EOF';             /* CLOSE INTERNAL READER @ZA16858*/
ENDOF    MVI   CARD+5,C' '                                      01S0262
         MVC   CARD+6(74),CARD+5                                01S0262
         MVC   CARD(5),@CC00671                                 01S0262
*         PT=ADDR(MSG1);            /* RETURN TO ISSUE ERROR MESSAGE
*                                                            @ZA16858*/
         LA    @03,MSG1                                         01S0263
         ST    @03,PT                                           01S0263
*PUTCRD:                                                        01S0264
*         STMTPT=ADDR(CARD);        /* POINT TO INPUT CARD@ZA16858   */
PUTCRD   LA    @03,CARD                                         01S0264
         ST    @03,STMTPT(,CONLIST)                             01S0264
*         HTCODE=PUTCODE;           /* SET FOR PUT           @ZA16858*/
         MVI   HTCODE(HTPTR),X'02'                              01S0265
*         CALL CALLWRMG;            /* PUT DEL CARD TO INTERNAL 01S0266
*                                      READER                @ZA16858*/
         BAL   @14,CALLWRMG                                     01S0266
*MSG1:                                                          01S0267
*         QUIT='1'B;                /* INDICATE PROCESSING MUST TAKE
*                                      ERROR TERMINATION@ZA16858     */
MSG1     OI    QUIT(HTPTR),B'10000000'                          01S0267
*         RFY                                                   01S0268
*           R1 RSTD;                                            01S0268
*         R1=MSGPTR;                                            01S0269
         LR    R1,MSGPTR                                        01S0269
*         CALL IKJEFF02;            /* CALL THE MESSAGE PROCESSING
*                                      ROUTINE                       */
         L     @15,MSGRTN(,MSGPTR)                              01S0270
         BALR  @14,@15                                          01S0270
*         RFY                                                   01S0271
*           R1 UNRSTD;                                          01S0271
*       END;                        /* PUTMSG DO/END GROUP           */
*                                                               01S0273
*     /***************************************************************/
*     /*                                                             */
*     /* CLOSE THIS INPUT DATA SET (IF END-OF-FILE OR ERROR) AND     */
*     /* UPDATE TO NEXT DATA SET                                     */
*     /*                                                             */
*     /***************************************************************/
*                                                               01S0273
*     IF FAILCODE^='02'X&FAILCODE^='01'X THEN/* IF THIS IS NOT AN
*                                      OPEN OR DATA SET ORGANIZATION
*                                      FAILURE                       */
@RC00153 CLI   FAILCODE(R2),X'02'                               01S0273
         BE    @RF00273                                         01S0273
         CLI   FAILCODE(R2),X'01'                               01S0273
         BE    @RF00273                                         01S0273
*INPUTEOF:                          /* THIS LABEL IS IN DCB FOR EOF
*                                      (EODAD=) ON READ OF INPUT D.S.*/
*       DO;                         /* CLOSE THE DATA SET            */
INPUTEOF DS    0H                                               01S0275
*         GEN(CLOSE ((R2)),MF=(E,ROPE))                         01S0275
*         REFS(R2,ROPE);            /* GENERATED CLOSE MACRO         */
         CLOSE ((R2)),MF=(E,ROPE)
*         CURRDD=NEXTDDEL;          /* POINT TO NEXT DD ELEMENT      */
         L     CURRDD,NEXTDDEL(,CURRDD)                         01S0276
*       END;                                                    01S0277
*   END;                            /* ALLDS DO/END GROUP    @ZA16858*/
*                                                               01S0278
@RF00273 DS    0H                                               01S0278
@DE00126 LTR   CURRDD,CURRDD                                    01S0278
         BZ    @DC00126                                         01S0278
         TM    QUIT(HTPTR),B'10000000'                          01S0278
         BZ    @DL00126                                         01S0278
@DC00126 DS    0H                                               01S0279
*   /*****************************************************************/
*   /*                                                               */
*   /* EOF ON DATA SET - GENERATE TWO NULL CARDS FOR EOJ TO SUBMIT   */
*   /* JOB AND ISSUE SUBMIT MESSAGE.                         @ZA13899*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0279
*   IF QUIT='0'B&FAILCODE='00'X THEN/* IF THERE WERE NO              */
         TM    QUIT(HTPTR),B'10000000'                          01S0279
         BNZ   @RF00279                                         01S0279
         CLI   FAILCODE(R2),X'00'                               01S0279
         BNE   @RF00279                                         01S0279
*     DO;                           /* ERRORS                @ZA16858*/
*       HTDLMSW='0'B;               /* ENSURE BIT FOR DLM= KEYWORD ON
*                                      DD CARD IS OFF,SINCE EOF IS
*                                      REACHED FOR ALL D.S.  @ZA16858*/
         NI    HTDLMSW(HTPTR),B'01111111'                       01S0281
*       DO J=1 TO 2;                /* LOOP TO CREATE TWO    @ZA09100*/
         LA    J,1                                              01S0282
@DL00282 DS    0H                                               01S0283
*         CARD='//';                /* NULL CARDS            @ZA09100*/
         MVI   CARD+2,C' '                                      01S0283
         MVC   CARD+3(77),CARD+2                                01S0283
         MVC   CARD(2),@CC00677                                 01S0283
*         IF J=2 THEN               /* IF THIS IS THE LAST   @ZA09100
*                                      NULL DO NOT TAKE USER EXITS   */
         C     J,@CF00283                                       01S0284
         BNE   @RF00284                                         01S0284
*           TAKEXITS='00'X;         /* (NEED A NULL CARD SO LAST JOB
*                                      GETS SUBMITTED, BUT NULL WON'T
*                                      BE PUT IN JOB STREAM)  @Y02993*/
         MVI   TAKEXITS(HTPTR),X'00'                            01S0285
*         STMTPT=ADDR(CARD);        /* POINT TO INPUT CARD           */
@RF00284 LA    @15,CARD                                         01S0286
         ST    @15,STMTPT(,CONLIST)                             01S0286
*         CALL FF05I06;             /* AND HAVE IT PROCESSED         */
         BAL   @14,FF05I06                                      01S0287
*         IF QUIT='1'B×FAILCODE^='00'X THEN/* STOP LOOPING IF FOUND A
*                                      TERMINATING ERROR             */
         TM    QUIT(HTPTR),B'10000000'                          01S0288
         BO    @RT00288                                         01S0288
         CLI   FAILCODE(R2),X'00'                               01S0288
         BE    @RF00288                                         01S0288
@RT00288 DS    0H                                               01S0289
*           J=2;                    /*                       @ZA09100*/
         LA    J,2                                              01S0289
*       END;                                                    01S0290
@RF00288 AL    J,@CF00048                                       01S0290
         C     J,@CF00283                                       01S0290
         BNH   @DL00282                                         01S0290
*     END;                                                      01S0291
*                                                               01S0292
*   /*****************************************************************/
*   /*                                                               */
*   /* RETURN TO CALLER                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0292
*   INREAD=OFF;                     /* EXIT FROM IKJEFF05            */
@RF00279 NI    INREAD(HTPTR),B'01111111'                        01S0292
*END0506:                           /* USE THIS LABEL TO RETURN FROM
*                                      IKJEFF06 ALTERNATE ENTRY      */
*   RETURN;                         /* QUIT SWITCH IS ON IF ERROR
*                                      FOUND                         */
*                                                               01S0293
@EL00001 L     @13,4(,@13)                                      01S0293
@EF00001 L     @00,@SIZDATD                                     01S0293
         LR    @01,@11                                          01S0293
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                  01S0293
         BR    @14                                              01S0293
*   /*****************************************************************/
*   /*                                                               */
*   /* IKJEFF06 ALTERNATE ENTRY POINT = SUBMIT CONTROL ROUTINE       */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0294
*IKJEFF06:                                                      01S0294
*   ENTRY(PCONTAB);                 /* PARAMETER IS POINTER TO  01S0294
*                                      CONTROL TABLE                 */
@EP00294 MVC   @PC00001+4(4),0(@01)                             01S0294
*   CONLIST=PCONTAB;                /* USE LOCAL POINTER TO SUBMIT
*                                      CONTROL TABLE FOR EFFICIENCY  */
         L     @03,@PC00001+4                                   01S0295
         L     CONLIST,PCONTAB(,@03)                            01S0295
*   HTPTR=HISTPT;                   /* LOCAL POINTER TO HISTORY TABLE*/
         L     HTPTR,HISTPT(,CONLIST)                           01S0296
*   CALL FF05I06;                   /* LOGIC IS IN AN INTERNAL PROC  */
         BAL   @14,FF05I06                                      01S0297
*   GO TO END0506;                  /* USE IKJEFF05'S CODE TO RETURN */
*                                                               01S0298
         B     END0506                                          01S0298
*   /*****************************************************************/
*   /*                                                               */
*   /* SYNAD ROUTINE - ISSUES SYNADAF MACRO AND ERROR MESSAGE        */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0299
*SYNADRTN:                          /* THIS LABEL IS IN DCB FOR SYNAD
*                                      EXIT ON READ OF INPUT D.S.    */
*   RFY                                                         01S0299
*     R1 RSTD;                                                  01S0299
SYNADRTN DS    0H                                               01S0300
*   GEN(SYNADAF ACSMETH=BSAM)                                   01S0300
*   SETS(R1,SYNADMSG);              /* GENERATED SYNADAF MACRO       */
         SYNADAF ACSMETH=BSAM
*   BADTXT=SYNADTXT;                /* MAKE COPY OF SYNADTXT         */
         MVC   BADTXT(52),SYNADTXT(R1)                          01S0301
*   GEN(SYNADRLS)                                               01S0302
*   REFS(R1,SYNADMSG);              /* FREE SYNADMSG AREA (SYNADRLS) */
         SYNADRLS
*   RFY                                                         01S0303
*     R1 UNRSTD;                                                01S0303
*   FAILCODE='03'X;                                             01S0304
         MVI   FAILCODE(R2),X'03'                               01S0304
*   VAR1=ADDR(BADTXT);                                          01S0305
         LA    @03,BADTXT                                       01S0305
         STCM  @03,7,VAR1(MSGPTR)                               01S0305
*   L1=LENGTH(SYNADTXT);            /* GET LENGTH OF 'BADTXT'        */
         MVI   L1(MSGPTR),X'34'                                 01S0306
*   VAR2=ADDR(DSNAME)+D8ADJUST;     /* SET MESSAGE VARIABLE POINTER 2
*                                      TO INCLUDE THE NAME OF THE
*                                      DATA SET IN THE MESSAGE       */
         LA    @03,84                                           01S0307
         AL    @03,DAPB0PTR(,CURRDD)                            01S0307
         LA    @15,DSNAME(,@03)                                 01S0307
         SLR   @14,@14                                          01S0307
         IC    @14,D8ADJUST(,@03)                               01S0307
         ALR   @15,@14                                          01S0307
         STCM  @15,7,VAR2(MSGPTR)                               01S0307
*   L2=NAMELEN-D8ADJUST;                                        01S0308
         LCR   @14,@14                                          01S0308
         AH    @14,NAMELEN(,@03)                                01S0308
         STC   @14,L2(,MSGPTR)                                  01S0308
*   MSGID='05D ';                                               01S0309
         MVC   MSGID(4,MSGPTR),@CC00686                         01S0309
*   GO TO PUTMSG2;                  /* ISSUE THE ERROR MESSAGE       */
         B     PUTMSG2                                          01S0310
*                                                               01S0311
*/********************************************************************/
*/*                                                                  */
*/*      MODULE NAME = FF05I06 (USED FOR IKJEFF06 ENTRY POINT)       */
*/*                                                                  */
*/*      DESCRIPTIVE NAME = INPUT CARD CONTROL ROUTINE               */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*/*      COPYRIGHT = NONE                                            */
*/*                                                                  */
*/*      STATUS      OS/VS2 RELEASE 02.0                             */
*/*                  SUPPORT CODE=Y02064 TSO REDIRECTED SYSOUT       */
*/*                                      (INTRDR)                    */
*/*                                                                  */
*/*      FUNCTION                                                    */
*/*                . THE PROCESSING LOGIC IS DRIVEN BY  THE          */
*/*                  CONTROL  ROUTINE.   THIS  IS USED AS A          */
*/*                  SUBROUTINE BY THE READING  ROUTINE  TO          */
*/*                  EXAMINE  THE  INPUT  AND  PREPARE  THE          */
*/*                  OUTPUT, THAT IS,  TO  COPY  THE  INPUT          */
*/*                  DATA  SET(S)  TO  A SINGLE OUTPUT DATA          */
*/*                  SET AND TO ENQUEUE A DSB/JFCB  POINTER          */
*/*                  TO IT.                                          */
*/*                                                                  */
*/*                . THE CONTROL ROUTINE CALLS A NUMBER  OF          */
*/*                  SUBROUTINES    TO   PERFORM   SPECIFIC          */
*/*                  FUNCTIONS.  SOME OF THESE MAY  REQUIRE          */
*/*                  THAT  THE  JCL BE CHANGED AND POSSIBLY          */
*/*                  EXPANDED.  FOR EXAMPLE, IF THE JOBNAME          */
*/*                  EXACTLY MATCHES THE USERID,  THEN  THE          */
*/*                  JOB CARD MUST BE CHANGED.  IF THERE IS          */
*/*                  NO  JOB  CARD, THEN A DEFAULT ONE MUST          */
*/*                  BE GENERATED AND INSERTED AHEAD OF THE          */
*/*                  ORIGINAL FIRST CARD.   IN  THAT  CASE,          */
*/*                  SEVERAL   CONTINUATION  CARDS  MAY  BE          */
*/*                  REQUIRED  FOR  ALL  OF   THE   DEFAULT          */
*/*                  PARAMETERS.     FOLLOWING   THAT,   OF          */
*/*                  COURSE, THE  ORIGINAL  (NON-JOB)  CARD          */
*/*                  MUST BE PROCESSED.                              */
*/*                                                                  */
*/*                . A 'PUSH  DOWN  STACK'  WITH  INSERTION          */
*/*                  CAPABILITY  IS  NEEDED.   THIS TYPE OF          */
*/*                  FACILITY  IS  ACHIEVED  BY  USING  THE          */
*/*                  CONTROL   ROUTINE   IN   A   RECURSIVE          */
*/*                  MANNER.  IF  A  SUBROUTINE  CHANGES  A          */
*/*                  CARD  AND  NEEDS TO HAVE IT PROCESSED,          */
*/*                  IT CALLS THE CONTROL  ROUTINE  IN  THE          */
*/*                  SAME  WAY  THAT  THE  READING  ROUTINE          */
*/*                  CALLS CONTROL.   THE  CONTROL  ROUTINE          */
*/*                  ITSELF IS INDEPENDENT OF THE NUMBER OF          */
*/*                  CONTINUATIONS  OR INSERTIONS WHICH MAY          */
*/*                  BE MADE, AND  ANY  ONE  SUBROUTINE  IS          */
*/*                  SIMILARLY  INDEPENDENT OF CHANGES MADE          */
*/*                  BY ANY OTHER SUBROUTINE.                        */
*/*                                                                  */
*/*      ENTRY POINT                                                 */
*/*               IKJEFF06 (ALTERNATE ENTRY IN IKJEFF05)             */
*/*                                                                  */
*/*      INPUT                                                       */
*/*                . REGISTER 1 POINTS TO A POINTER TO THE SUBMIT    */
*/*                              CONTROL TABLE POINTER               */
*/*                                                                  */
*/*      OUTPUT                                                      */
*/*                 N/A                                              */
*/*                                                                  */
*/*      EXTERNAL REFERENCES                                         */
*/*               IKJEFF07 SUBMIT IDENTIFY JCL ROUTINE               */
*/*               IKJEFF08 SUBMIT GENERATE JOB CARD ROUTINE          */
*/*               IKJEFF09 SUBMIT EXIT INTERFACE ROUTINE             */
*/*               IKJEFF12 SUBMIT WRITER MANAGER ROUTINE             */
*/*               IKJEFF13 SUBMIT PROMPT JOB CARD ROUTINE            */
*/*                                                                  */
*/*      EXITS, NORMAL                                               */
*/*               RETURN TO CALLER (IKJEFF05,08,09,13)               */
*/*                                                                  */
*/*      EXITS,ERROR                                                 */
*/*               RETURN TO CALLER (QUIT SWITCH ON)                  */
*/*                                                                  */
*/*      TABLE/WORK AREAS                                            */
*/*               CONTROL TABLE = IKJEFFCT                    REF    */
*/*               HISTORY TABLE = IKJEFFHT                    UPDATE */
*/*                                                                  */
*/*      MACROS                                                      */
*/*               NONE                                               */
*/*                                                                  */
*/*      ATTRIBUTES                                                  */
*/*               REENTRANT, REFRESHABLE, KEY 1(SCHEDULER),          */
*/*               SUPERVISOR STATE                                   */
*/*                                                                  */
*/*      NOTES                                                       */
*/*                CHARACTER CODE DEPENDENCY - EBCDIC CHARACTER SET  */
*/*                USED IN ASSEMBLING, MODULE MUST BE REASSEMBLED IF */
*/*                A DIFFERENT CHARACTER SET IS TO BE USED DURING    */
*/*                EXECUTION.                                        */
*/*         MESSAGES                                                 */
*/*               NONE                                               */
*/*                                                                  */
*/*         PACKAGING AND SIZE INFORMATION ARE IN IKJEFF01'S         */
*/*         PROLOGUE                                                 */
*/*                                                                  */
*/*         PATCH = PATCH06                                          */
*/*                                                                  */
*/*      CHANGE ACTIVITY = Y02064 (NO APARS)                         */
*/*         PTM YM3630 IS FOR PERFORMANCE                            */
*/*                                                                  */
*/********************************************************************/
*                                                               01S0311
*FF05I06:                                                       01S0311
*   PROC;                           /* SUBMIT CONTROL ROUTINE - 01S0311
*                                      ENTERED FROM IKJEFF06 ENTRY
*                                      POINT CODE, OR DIRECTLY FROM
*                                      IKJEFF05 MAIN PROCEDURE       */
         B     @EL00001                                         01S0311
FF05I06  STM   @14,@04,@SA00002                                 01S0311
         STM   @06,@12,@SA00002+28                              01S0311
*/*A-000000-999999                                            @Y02064*/
*                                                               01S0312
*DUMYLBL:                           /* SEPARATES TWO COMMENTS        */
*/********************************************************************/
*/*                                                                  */
*/*  FF05I06 INTERNAL PROCEDURE = LOGIC TO PROCESS AN INPUT CARD     */
*/*                                                                  */
*/*  - ORIGINAL ENTRY IS FROM IKJEFF05 (AFTER IT READS A NEW CARD)   */
*/*  - REENTERED FROM IKJEFF08 (TO PROCESS A GENERATED JOB CARD)     */
*/*  - REENTERED FROM IKJEFF09 (IF INSTALLATION EXIT CHANGED OR      */
*/*                             GENERATED A CARD)                    */
*/*  - REENTERED FROM IKJEFF13 (IF CHANGES THE JOB CARD BECAUSE      */
*/*                             THE JOBNAME WAS THE TSO USERID)      */
*/*                                                                  */
*/********************************************************************/
*                                                               01S0312
*   INCONTRL=INCONTRL+1;            /* INDICATE IN IKJEFF06 ROUTINE  */
DUMYLBL  LA    @03,1                                            01S0312
         SLR   @15,@15                                          01S0312
         IC    @15,INCONTRL(,HTPTR)                             01S0312
         ALR   @03,@15                                          01S0312
         STC   @03,INCONTRL(,HTPTR)                             01S0312
*   CALL CODECHK;                   /* CHECK FOR ZERO STATEMENT 01S0313
*                                      POINTER OR QUIT SWITCH ON
*                                      RIGHT AWAY                    */
*                                                               01S0313
         BAL   @14,CODECHK                                      01S0313
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR TYPE OF CARD (JCL OR DATA). THIS LOGIC IS COPIED    */
*   /* FROM MODULE IKJEFF07 FOR EFFICIENCY IN PROCESSING DATA CARDS. */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0314
*   JCLSW=OFF;                      /* SWITCH USED DURING CHECKING   */
         NI    JCLSW,B'01111111'                                01S0314
*   IF HTDLMSW=OFF×CCONEX=ON THEN   /* CHECK FOR DLM= NOT FOUND ON A
*                                      PRIOR DD * OR DD DATA CARD OR
*                                      CONTINUATION OF A // CARD     */
         TM    HTDLMSW(HTPTR),B'10000000'                       01S0315
         BZ    @RT00315                                         01S0315
         TM    CCONEX(HTPTR),B'10000000'                        01S0315
         BNO   @RF00315                                         01S0315
@RT00315 DS    0H                                               01S0316
*     DO;                           /* NODLM DO/END GROUP            */
*       IF CURRCARD(1:2)='//'×CURRCARD(1:2)='/*' THEN/* MAKE BASIC
*                                      TESTS TO DISTINGUISH BETWEEN
*                                      JCL AND NON-JCL STMTS (ALSO
*                                      TREAT SLASH-ASTERISK-NON BLANK
*                                      JOB ENTRY SUBSYSTEM CONTROL
*                                      CARDS AS JCL CARDS)           */
         L     @03,STMTPT(,CONLIST)                             01S0317
         CLC   CURRCARD(2,@03),@CC00677                         01S0317
         BE    @RT00317                                         01S0317
         CLC   CURRCARD(2,@03),@CC00693                         01S0317
         BNE   @RF00317                                         01S0317
@RT00317 DS    0H                                               01S0318
*         JCLSW=ON;                 /* MUST PASS CARD TO IKJEFF07    */
         OI    JCLSW,B'10000000'                                01S0318
*       ELSE                        /* ONE MORE CASE TO CHECK        */
*         IF CCONEX=ON THEN         /* IF POSSIBLE ERROR CASE        */
         B     @RC00317                                         01S0319
@RF00317 TM    CCONEX(HTPTR),B'10000000'                        01S0319
         BNO   @RF00319                                         01S0319
*           JCLSW=ON;               /* MUST PASS CARD TO IKJEFF07    */
         OI    JCLSW,B'10000000'                                01S0320
*     END;                          /* NODLM DO/END GROUP            */
*                                                               01S0322
*   /*****************************************************************/
*   /*                                                               */
*   /* DLM= DATA CARD (COULD BE //)                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0322
*   ELSE                            /* KNOW HTDLMSW IS ON            */
*     IF CURRCARD(1:2)=HTDLM×(CDDAST=ON&CURRCARD(1:2)='//') THEN/*
*                                      CHECK FOR DELIMITER CARD --
*                                      NOTE THAT // CAN ALSO BE DELIM
*                                      FOR // DD * DATA STREAM       */
         B     @RC00315                                         01S0322
@RF00315 L     @03,STMTPT(,CONLIST)                             01S0322
         CLC   CURRCARD(2,@03),HTDLM(HTPTR)                     01S0322
         BE    @RT00322                                         01S0322
         TM    CDDAST(HTPTR),B'10000000'                        01S0322
         BNO   @RF00322                                         01S0322
         CLC   CURRCARD(2,@03),@CC00677                         01S0322
         BNE   @RF00322                                         01S0322
@RT00322 DS    0H                                               01S0323
*       JCLSW=ON;                                               01S0323
*                                                               01S0323
         OI    JCLSW,B'10000000'                                01S0323
*   /*****************************************************************/
*   /*                                                               */
*   /* PASS ANY NON-DATA CARD TO IKJEFF07 FOR SCANNING               */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0324
*   IF JCLSW=ON THEN                                            01S0324
@RF00322 DS    0H                                               01S0324
@RC00315 TM    JCLSW,B'10000000'                                01S0324
         BNO   @RF00324                                         01S0324
*     CALL IKJEFF07(HISTFLD,STMTPT,NEXTNAME);/* IKJEFF07 WILL UPDATE
*                                      HISTORY TABLE WITH INFO FOR
*                                      CURRENT CARD                  */
*                                                               01S0325
         ST    HTPTR,@AL00001                                   01S0325
         LA    @03,STMTPT(,CONLIST)                             01S0325
         ST    @03,@AL00001+4                                   01S0325
         L     @03,JOBNAMPT(,CONLIST)                           01S0325
         LA    @03,NEXTNAME(,@03)                               01S0325
         ST    @03,@AL00001+8                                   01S0325
         L     @15,@CV00175                                     01S0325
         LA    @01,@AL00001                                     01S0325
         BALR  @14,@15                                          01S0325
*   /*****************************************************************/
*   /*                                                               */
*   /* UPDATE HISTORY TABLE IF DATA CARD                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0326
*   ELSE                                                        01S0326
*     DO;                                                       01S0326
         B     @RC00324                                         01S0326
@RF00324 DS    0H                                               01S0327
*       PRIORJCL=CURRJCL;           /* UPDATE CARD HISTORY TABLE     */
         MVC   PRIORJCL(4,HTPTR),CURRJCL(HTPTR)                 01S0327
*       CURRJCL=CURRJCL&&CURRJCL;   /* ZERO OUT CURRENT CARD DATA IN
*                                      HISTORY TABLE                 */
         XC    CURRJCL(4,HTPTR),CURRJCL(HTPTR)                  01S0328
*       CDATA=ON;                   /* INDICATE CURRENT CARD IS DATA */
         OI    CDATA(HTPTR),B'01000000'                         01S0329
*       CDTYPE=PDTYPE;              /* PICK UP // DD * AND // DD DATA
*                                      SWITCHES FROM PRIOR CARD      */
         MVC   CDTYPE(1,HTPTR),PDTYPE(HTPTR)                    01S0330
*       IF CDDAST=OFF&CDDDATA=OFF THEN/* THE SYSTEM WILL GENERATE A
*                                      // DD * CARD WHEN A DATA CARD
*                                      IS NOT PRECEDED BY A // DD *
*                                      OR // DD DATA CARD            */
         TM    CDDAST(HTPTR),B'11000000'                        01S0331
         BNZ   @RF00331                                         01S0331
*         CDDAST=ON;                                            01S0332
         OI    CDDAST(HTPTR),B'10000000'                        01S0332
*     END;                                                      01S0333
@RF00331 DS    0H                                               01S0334
*                                                               01S0334
*   /*****************************************************************/
*   /*                                                               */
*   /* FLUSH THIS CARD IF LAST CARD WAS A NULL AND THIS ISN'T A JOB  */
*   /* CARD                                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0334
*   IF FLUSH='1'B&CJOB='0'B THEN    /* FORGET EVERYTHING EXCEPT JOBS
*                                      IF FLUSH IS ON (MEANS PRIOR
*                                      CARD WAS A NULL)              */
@RC00324 TM    FLUSH(HTPTR),B'01000000'                         01S0334
         BNO   @RF00334                                         01S0334
         TM    CJOB(HTPTR),B'00010000'                          01S0334
         BZ    @RT00334                                         01S0334
*     GO TO FINISH;                 /* PREPARE TO GET NEXT CARD      */
*                                                               01S0335
*   /*****************************************************************/
*   /*                                                               */
*   /* DATA CARD (PUT IT)                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0336
*   IF FIRST='0'B&CDATA='1'B THEN                               01S0336
@RF00334 TM    FIRST(HTPTR),B'00100000'                         01S0336
         BNZ   @RF00336                                         01S0336
         TM    CDATA(HTPTR),B'01000000'                         01S0336
         BO    @RT00336                                         01S0336
*     GO TO PUTCARD;                /* IF THIS IS DATA, SUBMIT THE
*                                      CARD (UNLESS NO JOB CARD YET) */
*                                                               01S0337
*   /*****************************************************************/
*   /*                                                               */
*   /* JOB CARD (CALL PROMPTJOB)                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0338
*   IF CJOB='1'B&CVERBCOP='0'B THEN                             01S0338
@RF00336 TM    CJOB(HTPTR),B'00010000'                          01S0338
         BNO   @RF00338                                         01S0338
         TM    CVERBCOP(HTPTR),B'00001000'                      01S0338
         BNZ   @RF00338                                         01S0338
*     DO;                           /* CALL PROMPTJOB FOR ORIGINAL
*                                      (NOT CONTINUATIONS OF) JOB
*                                      CARDS                         */
*       CALL IKJEFF13(MSGLISPT,STMTPT,USERID,CONTABPT,NEXTNAME,HISTFLD)
*           ;                       /* CHECKS FOR JOBNAME=USERID     */
         LA    @03,MSGLISPT(,CONLIST)                           01S0340
         ST    @03,@AL00001                                     01S0340
         LA    @03,STMTPT(,CONLIST)                             01S0340
         ST    @03,@AL00001+4                                   01S0340
         L     @03,USERIDPT(,CONLIST)                           01S0340
         ST    @03,@AL00001+8                                   01S0340
         LA    @03,CONTABPT(,CONLIST)                           01S0340
         ST    @03,@AL00001+12                                  01S0340
         L     @03,JOBNAMPT(,CONLIST)                           01S0340
         LA    @03,NEXTNAME(,@03)                               01S0340
         ST    @03,@AL00001+16                                  01S0340
         ST    HTPTR,@AL00001+20                                01S0340
         L     @15,@CV00178                                     01S0340
         LA    @01,@AL00001                                     01S0340
         BALR  @14,@15                                          01S0340
*       CALL CODECHK;               /* EXIT AND CHECK FOR ERROR 01S0341
*                                      RETURN                        */
         BAL   @14,CODECHK                                      01S0341
*     END;                                                      01S0342
*                                                               01S0343
*   /*****************************************************************/
*   /*                                                               */
*   /* NON-DATA CARD (CALL EXIT)                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0343
*   IF INEXIT='0'B THEN                                         01S0343
@RF00338 TM    INEXIT(HTPTR),B'00100000'                        01S0343
         BNZ   @RF00343                                         01S0343
*     DO;                           /* CALL EXIT IF NOT ALREADY IN
*                                      EXIT -NOTE THE VERY FIRST TIME
*                                      06 IS ENTERED ONLY JOBX IS ON */
*       IF CJOB='1'B&JOBX='1'B THEN /* IF HAVE JOB CARD AND EXIT
*                                      WANTS TO SEE IT               */
         TM    CJOB(HTPTR),B'00010000'                          01S0345
         BNO   @RF00345                                         01S0345
         TM    JOBX(HTPTR),B'10000000'                          01S0345
         BO    @RT00345                                         01S0345
*         GO TO CALLEX;             /* CALL EXIT FOR JOB             */
*       ELSE                        /* DIDN'T MATCH CARD TYPE YET    */
*         IF CEXEC='1'B&EXECX='1'B THEN/* IF HAVE EXEC AND EXIT WANTS*/
@RF00345 TM    CEXEC(HTPTR),B'00001000'                         01S0347
         BNO   @RF00347                                         01S0347
         TM    EXECX(HTPTR),B'01000000'                         01S0347
         BO    @RT00347                                         01S0347
*           GO TO CALLEX;           /* CALL EXIT FOR EXEC            */
*         ELSE                      /* DIDN'T MATCH CARD TYPE YET    */
*           IF CDD='1'B&DDX='1'B THEN/* IF HAVE DD AND EXIT WANTS    */
@RF00347 TM    CDD(HTPTR),B'00000100'                           01S0349
         BNO   @RF00349                                         01S0349
         TM    DDX(HTPTR),B'00100000'                           01S0349
         BO    @RT00349                                         01S0349
*             GO TO CALLEX;         /* CALL EXIT FOR DD              */
*           ELSE                    /* DIDN'T MATCH CARD TYPE YET    */
*             IF CCOMMAND='1'B&CMDX='1'B THEN/* IF HAVE COMMAND CARD
*                                      ...                           */
@RF00349 TM    CCOMMAND(HTPTR),B'00000010'                      01S0351
         BNO   @RF00351                                         01S0351
         TM    CMDX(HTPTR),B'00010000'                          01S0351
         BO    @RT00351                                         01S0351
*               GO TO CALLEX;       /* CALL EXIT FOR CMD             */
*             ELSE                  /* DIDN'T MATCH CARD TYPE YET    */
*               IF CNULL='1'B&NULLX='1'B THEN/* IF HAVE NULL CARD ...*/
@RF00351 TM    CNULL(HTPTR),B'00100000'                         01S0353
         BNO   @RF00353                                         01S0353
         TM    NULLX(HTPTR),B'00001000'                         01S0353
         BO    @RT00353                                         01S0353
*                 GO TO CALLEX;     /* CALL EXIT FOR NULL            */
*               ELSE                /* DIDN'T MATCH CARD TYPE YET    */
*                 IF CJES='1'B&     /* IF SLASH-ASTERISK NONBLANK    */
*                     JESX='1'B THEN/* AND EXIT WANTS TO SEE IT      */
@RF00353 TM    CJES(HTPTR),B'10000000'                          01S0355
         BNO   @RF00355                                         01S0355
         TM    JESX(HTPTR),B'00000100'                          01S0355
         BO    @RT00355                                         01S0355
*                   GO TO CALLEX;   /* CALL EXIT FOR SUBSYS CTL CARD */
*                 ELSE              /* DIDN'T MATCH CARD TYPE YET    */
*                   IF CCOMMENT='1'B&/* IF COMMENT CARD (COULD BE
*                                      JES3                          */
*                       COMNTX='1'B THEN/* CONTROL CARD) AND EXIT
*                                      WANTS                         */
@RF00355 TM    CCOMMENT(HTPTR),B'00000001'                      01S0357
         BNO   @RF00357                                         01S0357
         TM    COMNTX(HTPTR),B'00000010'                        01S0357
         BO    @RT00357                                         01S0357
*                     GO TO CALLEX; /* CALL EXIT FOR COMMENT CARD    */
*     END;                                                      01S0359
@RF00357 DS    0H                                               01S0360
*                                                               01S0360
*   /*****************************************************************/
*   /*                                                               */
*   /* SUBMIT LAST JOB                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0360
*AFTEX:                                                         01S0360
*   IF FIRST='0'B THEN                                          01S0360
@RF00343 DS    0H                                               01S0360
AFTEX    TM    FIRST(HTPTR),B'00100000'                         01S0360
         BNZ   @RF00360                                         01S0360
*     DO;                           /* IF NOT FIRST, MAY NEED TO
*                                      SUBMIT LAST JOB IF THIS IS A
*                                      NULL OR A JOB CARD (WHICH IS
*                                      NOT PRECEDED BY A NULL)       */
*       IF CNULL='1'B×(CJOB='1'B&CVERBCOP='0'B&FLUSH='0'B) THEN/* IF
*                                      AT END OF A JOB               */
         TM    CNULL(HTPTR),B'00100000'                         01S0362
         BO    @RT00362                                         01S0362
         TM    CJOB(HTPTR),B'00010000'                          01S0362
         BNO   @RF00362                                         01S0362
         TM    CVERBCOP(HTPTR),B'00001000'                      01S0362
         BNZ   @RF00362                                         01S0362
         TM    FLUSH(HTPTR),B'01000000'                         01S0362
         BNZ   @RF00362                                         01S0362
@RT00362 DS    0H                                               01S0363
*         DO;                       /* DOSUBMIT DO/END GROUP         */
*           HTCODE=EREQCODE;        /* IKJEFF12 WILL GET JOBID FROM
*                                      JOB ENTRY SUBSYSTEM, THEN
*                                      PRINT 'JOB SUBMITTED' MSG     */
         MVI   HTCODE(HTPTR),X'03'                              01S0364
*           PT=ADDR(AFTSUBMT);                                  01S0365
         LA    @03,AFTSUBMT                                     01S0365
         ST    @03,PT                                           01S0365
*           GO TO CALLWRMG;         /* CALL WRITER-MANAGER (IKJEFF12)*/
         B     CALLWRMG                                         01S0366
*         END;                      /* DOSUBMIT DO/END GROUP         */
*     END;                                                      01S0368
@RF00362 DS    0H                                               01S0369
*AFTSUBMT:                          /* CAN BRANCH HERE INDIRECTLY    */
*   IF CJOB='1'B&CVERBCOP='0'B THEN /* LOOK FOR LAST CONTINUATION OF
*                                      NEW JOB CARD                  */
@RF00360 DS    0H                                               01S0369
AFTSUBMT TM    CJOB(HTPTR),B'00010000'                          01S0369
         BNO   @RF00369                                         01S0369
         TM    CVERBCOP(HTPTR),B'00001000'                      01S0369
         BNZ   @RF00369                                         01S0369
*     DO;                                                       01S0370
*       CURRNAME=NEXTNAME;          /* NOW NEW JOB HAS BEEN ACCEPTED
*                                      SO COPY THE JOB NAME JUST
*                                      IDENTIFIED TO THE JOBNAME
*                                      FIELD                         */
         L     @03,JOBNAMPT(,CONLIST)                           01S0371
         MVC   CURRNAME(8,@03),NEXTNAME(@03)                    01S0371
*       FLUSH='0'B;                 /* SET FLUSH OFF                 */
*       FIRST='0'B;                 /* SET FIRST SW OFF-HAVE FOUND
*                                      THE FIRST JOB CARD            */
         NI    FLUSH(HTPTR),B'10011111'                         01S0373
*     END;                                                      01S0374
*                                                               01S0374
*   /*****************************************************************/
*   /*                                                               */
*   /* NULL CARD (FLUSH TO NEXT JOB)                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0375
*   IF CNULL='1'B THEN                                          01S0375
@RF00369 TM    CNULL(HTPTR),B'00100000'                         01S0375
         BNO   @RF00375                                         01S0375
*     DO;                                                       01S0376
*       FLUSH='1'B;                 /* IF THIS IS A NULL, SET THE
*                                      FLUSH SW ON AND RETURN --
*                                      NOTICE THAT THE NULL CARD
*                                      ITSELF DOES NOT ACTUALLY 01S0377
*                                      APPEAR IN THE OUTPUT DATA SET */
         OI    FLUSH(HTPTR),B'01000000'                         01S0377
*       GO TO FINISH;               /* PREPARE TO GET NEXT CARD      */
         B     FINISH                                           01S0378
*     END;                                                      01S0379
*                                                               01S0380
*   /*****************************************************************/
*   /*                                                               */
*   /* GENERATE A JOB CARD IF NECESSARY                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0380
*   IF FIRST='1'B THEN                                          01S0380
@RF00375 TM    FIRST(HTPTR),B'00100000'                         01S0380
         BNO   @RF00380                                         01S0380
*     DO;                           /* IF FIRST IS STILL ON (AFTER
*                                      CHECKING FOR JOB) THEN THIS IS
*                                      NOT A JOB CARD SO WILL NEED TO
*                                      CALL THE GENJOB ROUTINE       */
*       IF INGEN^=0&INEXIT='0'B THEN/* IF ALREADY IN GENJOB EXIT MUST
*                                      BE MODIFYING JOB CARDS -- IF
*                                      DELETING THEM, EXIT IS NO
*                                      LONGER ACTIVE AND SO WE BETTER
*                                      QUIT -- IF CHANGING THEM, EXIT
*                                      IS STILL ACTIVE AND WILL BE
*                                      BY-PASSED NEXT TIME AROUND,
*                                      LETTING THE GENERATED JOB CARD
*                                      GO THROUGH                    */
         CLI   INGEN(HTPTR),0                                   01S0382
         BE    @RF00382                                         01S0382
         TM    INEXIT(HTPTR),B'00100000'                        01S0382
         BNZ   @RF00382                                         01S0382
*         DO;                                                   01S0383
*           QUIT='1'B;                                          01S0384
         OI    QUIT(HTPTR),B'10000000'                          01S0384
*           GO TO FINISH;           /* TAKE ERROR EXIT               */
         B     FINISH                                           01S0385
*         END;                      /* IF THE FIRST CARD IS A NULL,
*                                      SKIP GENERATING A JOB CARD --
*                                      IT WOULD ONLY GET CUT OFF BY
*                                      THE NULL                      */
*       CALL IKJEFF08(HISTFLD,STMTPT,USERID,CONTABPT,MSGLISPT);/*
*                                      CALL GENJOB AND RETURN - NO
*                                      NEED TO PROCESS FURTHER  01S0387
*                                      BECAUSE GENJOB HAS       01S0387
*                                      RE-PROCESSED THE ORIGINAL
*                                      NON-JOB CARD                  */
@RF00382 ST    HTPTR,@AL00001                                   01S0387
         LA    @10,STMTPT(,CONLIST)                             01S0387
         ST    @10,@AL00001+4                                   01S0387
         L     @10,USERIDPT(,CONLIST)                           01S0387
         ST    @10,@AL00001+8                                   01S0387
         LA    @10,CONTABPT(,CONLIST)                           01S0387
         ST    @10,@AL00001+12                                  01S0387
         LA    @10,MSGLISPT(,CONLIST)                           01S0387
         ST    @10,@AL00001+16                                  01S0387
         L     @15,@CV00176                                     01S0387
         LA    @01,@AL00001                                     01S0387
         BALR  @14,@15                                          01S0387
*       GO TO FINISH;               /* DONE(CARD INDIRECTLY     01S0388
*                                      PROCESSED)                    */
         B     FINISH                                           01S0388
*     END;                          /* OTHERWISE FALL THRU TO PUTCARD*/
*                                                               01S0390
*   /*****************************************************************/
*   /*                                                               */
*   /* PUTCARD SUBROUTINE (PUTS CARD INTO INTERNAL READER)           */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0390
*PUTCARD:                                                       01S0390
*   HTCODE=PUTCODE;                 /* TELL WRMGR TO PASS THIS CARD
*                                      TO THE JOB ENTRY SUBSYSTEM    */
@RF00380 DS    0H                                               01S0390
PUTCARD  MVI   HTCODE(HTPTR),X'02'                              01S0390
*   PT=ADDR(FINISH);                /* THEN 06 WILL BE DONE WITH CARD*/
*                                                               01S0391
         LA    @03,FINISH                                       01S0391
         ST    @03,PT                                           01S0391
*   /*****************************************************************/
*   /*                                                               */
*   /* CALLWRMG SUBROUTINE (INTERFACE TO JOB ENTRY SUBSYSTEM)        */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0392
*CALLWRMG:                          /* PARAMETER TO IKJEFF12 SEGMENT
*                                      IS THE SUBMIT CONTROL TABLE -
*                                      SEE IKJEFF12 FOR ALL FIELDS
*                                      USED - 06 SETS UP HTCODE      */
*                                                               02S0392
*/*********************************************************************
*                                                                     *
*   MODULE NAME = IKJEFF12                                            *
*                                                                     *
*   DESCRIPTIVE NAME = SUBMIT WRITER MANAGER ROUTINE                  *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                               02S0392
*   COPYRIGHT = NONE                                            02S0392
*                                                               02S0392
*   STATUS                                                      02S0392
*      OS/VS2 RELEASE 02.0      (REWRITTEN FOR RELEASE 2)       02S0392
*                                                               02S0392
*       ***SUPPORT CODES***                                     02S0392
*       ***   Y02064  TSO REDIRECTED SYSOUT (INTRDR)            02S0392
*                                                               02S0392
*   FUNCTION = SUBMIT JCL RECORDS INTO THE SYSTEM DATA SET (INTRDR)
*              USED TO SPOOL SUBMITTED JCL                      02S0392
*                                                               02S0392
*   OPERATION =                                                 02S0392
*         IF INPUT CODE FOR PUT                                 02S0392
*            1)  ISSUE A VSAM PUT TO PASS THE INPUT JCL         02S0392
*                RECORD TO THE INTRDR DATA SET.                 02S0392
*                  (SEE NOTES ON SUBSYSTEM DATA INTERFACE.)     02S0392
*            2)  IF ERROR RETURN CODE FROM PUT,                 02S0392
*                CALL VSAMFAIL (IKJEFF19) TO ISSUE              02S0392
*                MESSAGE, THEN TURN QUIT SWITCH ON (INDICATES   02S0392
*                ERROR END TO SUBMIT PROCESSING).               02S0392
*                                                               02S0392
*         IF INPUT CODE FOR ENDREQ                              02S0392
*            1)  ISSUE A VSAM ENDREQ TO TELL THE JOB ENTRY      02S0392
*                SUBSYSTEM THAT ALL JCL RECORDS FOR THIS JOB    02S0392
*                HAVE BEEN 'PUT' INTO THE INTRDR.               02S0392
*                THE SUBSYSTEM WILL THEN ENTER THE JOB INTO     02S0392
*                BACKGROUND PROCESSING.                         02S0392
*            2)  IF ERROR RETURN CODE FROM ENDREQ, CALL         02S0392
*                VSAMFAIL (IKJEFF19), THEN TURN QUIT SWITCH ON. 02S0392
*            3)  IF NO ERROR, ISSUE 'JOB JOBNAME(JOBID) SUBMITTED'
*                MESSAGE.                                       02S0392
*                                                               02S0392
*         IF OTHER INPUT CODE ISSUE ERROR MESSAGE AND TURN      02S0392
*         QUIT SWITCH ON.                                       02S0392
*                                                               02S0392
*   NOTES                                                       02S0392
*      DEPENDENCIES=                                            02S0392
*         CHARACTER CODE DEPENDENCY = EBCDIC. REASSEMBLE IF     02S0392
*         ANOTHER CHARACTER SET IS NEEDED.                      02S0392
*                                                               02S0392
*      RESTRICTIONS = NA                                        02S0392
*                                                               02S0392
*      REGISTER CONVENTIONS = STANDARD PLS2                     02S0392
*                                                               02S0392
*      PACKAGING INFORMATION = IN LOAD MODULE IKJEFF04 IN SYS1.LINKLIB.
*          SEE COMMENTS AT END OF IKJEFF01 FOR MORE DETAILS.    02S0392
*                                                               02S0392
*      OTHER NOTES =                                            02S0392
*          THE SDI (SUBSYSTEM DATA INTERFACE) HANDLES OUTPUT TO THE
*          INTRDR DATA SET. DURING ALLOCATION AND OPEN THE NAME 02S0392
*          'INTRDR' IS RECOGNIZED TO BE A SUBSYSTEM SPOOLING DATA SET,
*          AND SPECIAL PROCESSING IS DONE.  DURING OPEN A POINTER
*          TO A SDI ROUTINE, RATHER THAN A VSAM I/O ROUTINE, IS 02S0392
*          PLACED IN THE INTRDR'S ACB.  SUBMITTED JCL WILL BE 'PUT'
*          INTO THE INTRDR (INTERNAL READER) THRU THE SDI INTERFACE.
*                                                               02S0392
*          THE INTRDR IS ALLOCATED AS A SYSOUT WRITER PROGRAM, SINCE
*          DYNAMIC ALLOCATION AUTOMATICALLY PASSES THE SUBSYSTEM ANY
*          SYSOUT DATA SETS TO ALLOCATE.  THE JOB ENTRY SUBSYSTEM
*          ASSIGNED TO THE TSO USER AT LOGON WILL GET CONTROL FOR
*          SUBMIT'S INTRDR REQUESTS.                            02S0392
*                                                               02S0392
*          THE SDI MUST HANDLE ALL ABENDS (213 OR B37 TYPE) DURING
*          EXECUTION OF THE OPEN, PUTS, ENDREQS, AND CLOSE OF THE
*          INTRDR D.S.  SUBMIT WILL PUT OUT MESSAGES FOR ERROR  02S0392
*          RETURN CODES.                                        02S0392
*                                                               02S0392
*          IKJEFF15 CREATES AND OPENS THE VSAM ACB FOR THE INTRDR
*          AND ALSO CREATES THE VSAM RPL USED IN THIS MODULE.   02S0392
*                                                               02S0392
*IRDRRPL  RPL   OPTCD=(ADR,SEQ,SYN,NUP),RECLEN=80               02S0392
*              ****************************************************
*              **   RPL IS USED FOR PUTS AND ENDREQS TO INTRDR   **
*              ****************************************************
*              - ADR = ADDRESSED DATA ACCESSING, NO INDEX REFERENCES
*              - SEQ = SEQUENTIAL PROCESSING (IMPLIES USE OF POINT
*                      FOR VSAM, BUT NOT THE VSAM-SDI INTERFACE)
*              - SYN = SYNCHRONOUS REQUEST.  RETURN CONTROL AFTER
*                      COMPLETION OF THIS REQUEST.              02S0392
*              - NUP = NONUPDATE MODE.  PUT RECORDS AT END OF D.S.
*              - RECLEN = 80.  LENGTH OF SUBMITTED JCL RECORD.  02S0392
*              - DYNAMICALLY SPECIFY THE ACB ADDRESS (IN IKJEFF15)
*                      AND ADDRESS OF JCL RECORD (IN IKJEFF12)  02S0392
*                                                               02S0392
*   PATCH LABEL = PATCH12. (INITIALIZED WITH 'ZAP''S)           02S0392
*                                                               02S0392
*   MODULE TYPE =                                               02S0392
*      PROCESSOR = PLS2                                         02S0392
*      MODULE SIZE = SEE IKJEFF01'S PROLOGUE                    02S0392
*      ATTRIBUTES = REFRESHABLE                                 02S0392
*                   KEY 1 (SCHEDULER)                           02S0392
*                   SUPERVISOR STATE                            02S0392
*                                                               02S0392
*                                                               02S0392
*   ENTRY POINT = IKJEFF12 - INTERNAL PROCEDURE IN IKJEFF05     02S0392
*      CALLERS = IKJEFF06 (SUBMIT CONTROL ROUTINE)              02S0392
*                         ENTRY CODE = PUTCODE OR               02S0392
*                         ENTRY CODE = EREQCODE                 02S0392
*      PURPOSE = SEE OPERATION                                  02S0392
*      LINKAGE = REGISTER 1 POINTS TO POINTER TO SUBMIT'S       02S0392
*                CONTROL TABLE                                  02S0392
*                  (WHICH INDIRECTLY POINTS TO THE ENTRY CODE)  02S0392
*                ***FIELDS USED****                             02S0392
*                   STMTPT                                      02S0392
*                   HISTPT    (HISTORY TABLE HAS PTR TO ENTRY CODE)
*                   JOBNAMPT                                    02S0392
*                   MSGLISPT                                    02S0392
*                   CTRPLPT                                     02S0392
*                                                               02S0392
*      INPUT = NO INPUT DATA OR BUFFERS                         02S0392
*      OUTPUT = JCL RECORD (OR END-JOB INDICATOR) PASSED TO     02S0392
*               SUBSYSTEM TO SPOOL TO INTRDR DATA SET           02S0392
*                                                               02S0392
*                                                               02S0392
*   EXIT-NORMAL = RETURN TO CALLER   (WITH QUIT SWITCH OFF)     02S0392
*                                                               02S0392
*   EXIT-ERROR = RETURN TO CALLER    (WITH QUIT SWITCH ON)      02S0392
*      CONDITIONS = BAD PUT OR ENDREQ MACRO, OR BAD ENTRY CODE  02S0392
*      RETURN CODES = NA                                        02S0392
*                                                               02S0392
*   EXTERNAL REFERENCES =                                       02S0392
*      ROUTINES =                                               02S0392
*         IKJEFF02 - MESSAGE ISSUER RTN                         02S0392
*         IKJEFF19 - VSAMFAIL MESSAGE ROUTINE                   02S0392
*      DATA AREAS = INTRDR 'DATA SET' USED FOR PUT'S AND ENDREQ'S
*      CONTROL BLOCKS =                                         02S0392
*         NAME         MAPPING MACRO      CREA/UPDATE/REFERENCE/DELETE
*         ****         *************      ****************************
*         RPL          IFGRPL             U                     02S0392
*         CONTAB       IKJEFFCT           R                     02S0392
*         GFPARMS      IKJEFFGF           C/D                   02S0392
*         HISTORY      IKJEFFHT           U                     02S0392
*         MSGTABLE     IKJEFFMT           U                     02S0392
*                                                               02S0392
*   TABLES = (NO TABLES, WORK AREA IS SUBPOOL 0)                02S0392
*                                                               02S0392
*   MACROS =                                                    02S0392
*      ENDREQ                                                   02S0392
*      LOAD                                                     02S0392
*      PUT                                                      02S0392
*                                                               02S0392
*      ENQUEUE RESOURCES = NA                                   02S0392
*                                                               02S0392
*   CHANGE ACTIVITY = Y02064 (NO APARS)                         02S0392
*      PTM YM3630 IS FOR PERFORMANCE.                           02S0392
*                                                               02S0392
*   MESSAGES =                                                  02S0392
*                                                               02S0392
*      (VSAMFAIL MESSAGES ISSUED BY IKJEFF19 FOR IKJEFF12)      02S0392
*                                                               02S0392
*      12B     JOB <JOBNAME(JOBID)> SUBMITTED                   02S0392
*                                                               02S0392
*      12C     JOB <JOBNAME> NOT SUBMITTED - INVALID ENTRY CODE 02S0392
*              FOR <IKJEFF12>                                   02S0392
*                                                               02S0392
*      12D     <COMMANDNAME> TERMINATED ON JOB <JOBNAME>        02S0392
*                                                               02S0392
*      ------------------------------------------               02S0392
*      SEE MESSAGE CSECT IKJEFF03 FOR MESSAGE IDS               02S0392
*      AND DESCRIPTIONS                                         02S0392
*                                                               02S0392
*      (VSAMFAIL MESSAGES ARE ISSUED BY IKJEFF19)               02S0392
*                                                               02S0392
*   ABEND CODES = NA                                            02S0392
*                                                               02S0392
**********************************************************************/
*                                                               02S0392
*DUMMYLBL:                          /* SEPARATE FOLLOWING FROM  02S0392
*                                      PRECEDING COMMENT             */
*/*A-000000-999999                                            @Y02064*/
*                                                               02S0392
*DUMMYLB2:                          /* SEPARATE FOLLOWING FROM  02S0392
*                                      PRECEDING COMMENT             */
*                                                               02S0392
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZATION FOR IKJEFF12 (INPUT FROM IKJEFF06 IS SUBMIT    */
*   /* CONTROL TABLE, WHICH POINTS TO HISTORY TABLE WITH HTCODE ENTRY*/
*   /* - DON'T USE PARMLIST PTR BECAUSE 12 IS A SEGMENT)             */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0392
*   INWRMGR=ON;                     /* SET BIT IN HISTORY TABLE 02S0392
*                                      SAYING IN IKJEFF12            */
CALLWRMG DS    0H                                               02S0392
DUMMYLBL DS    0H                                               02S0392
DUMMYLB2 OI    INWRMGR(HTPTR),B'00010000'                       02S0392
*   RFY                                                         02S0393
*     R2 RSTD;                                                  02S0393
*   R2=CTRPLPT;                     /* GET RPL ADDR FOR PUT OR ENDREQ*/
         L     R2,CTRPLPT(,CONLIST)                             02S0394
*   RFY                                                         02S0395
*     IFGRPL BASED(R2);             /* USE MAPPING MACRO FOR    02S0395
*                                      REENTRANT RPL                 */
*                                                               02S0395
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR PUT ENTRY CODE                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0396
*   IF HTCODE=PUTCODE THEN          /* NEED TO PUT JCL/DATA STATEMENT
*                                      INTO INTRDR DATA SET (PASS IT
*                                      TO THE JOB ENTRY SUBSYSTEM -
*                                      SEE NOTES IN PROLOGUE)        */
         CLI   HTCODE(HTPTR),2                                  02S0396
         BNE   @RF00396                                         02S0396
*     DO;                           /* DOPUT DO/END GROUP            */
*       RPLAREA=STMTPT;             /* PUT THE JCL STATEMENT'S  02S0398
*                                      ADDRESS IN THE RPL            */
         L     @03,STMTPT(,CONLIST)                             02S0398
         ST    @03,RPLAREA(,R2)                                 02S0398
*       GEN(PUT  RPL=(R2))                                      02S0399
*       REFS(R2);                   /* PUT JCL RECORD INTO INTRDR    */
         PUT  RPL=(R2)
*       RFY                                                     02S0400
*         R15 RSTD;                                             02S0400
*                                                               02S0400
*       /*************************************************************/
*       /*                                                           */
*       /* ERROR IF PUT FAILED                                       */
*       /*                                                           */
*       /*************************************************************/
*                                                               02S0401
*       IF R15^=PUTRCOK THEN                                    02S0401
         LTR   R15,R15                                          02S0401
         BZ    @RF00401                                         02S0401
*         DO;                       /* ISSUE PUT ERROR MESSAGE       */
*           MSGPTR=MSGLISPT;        /* PTR TO SUBMIT'S MESSAGE TABLE
*                                      (USE LOCAL PTR FOR EFFICIENCY)*/
         L     MSGPTR,MSGLISPT(,CONLIST)                        02S0403
*           GFPARMS=GFPARMS&&GFPARMS;/* ZERO OUT VSAMFAIL PARAMETER
*                                      LIST (GENERAL FAIL LIST)      */
         XC    GFPARMS(44),GFPARMS                              02S0404
*           GFCALLID=GFPUT;         /* INDICATE A PUT MACRO FAILED   */
         MVC   GFCALLID(2),@CH00055                             02S0405
*           CALL RPLERMSG;          /* ISSUE THE ERROR MESSAGE       */
         BAL   @14,RPLERMSG                                     02S0406
*           RFY                                                 02S0407
*             R15 UNRSTD;                                       02S0407
*         END;                                                  02S0408
*     END;                          /* DOPUT DO/END GROUP            */
*   ELSE                            /* HAVE EITHER ENDREQ OR INVALID
*                                      CODE                          */
*     DO;                           /* DONOTPUT DO/END GROUP         */
         B     @RC00396                                         02S0410
@RF00396 DS    0H                                               02S0411
*       MSGPTR=MSGLISPT;            /* PTR TO SUBMIT'S MESSAGE TABLE
*                                      (USE LOCAL PTR FOR EFFICIENCY)*/
*                                                               02S0411
         L     MSGPTR,MSGLISPT(,CONLIST)                        02S0411
*       /*************************************************************/
*       /*                                                           */
*       /* ENDREQ REQUEST                                            */
*       /*                                                           */
*       /*************************************************************/
*                                                               02S0412
*       IF HTCODE=EREQCODE THEN                                 02S0412
         CLI   HTCODE(HTPTR),3                                  02S0412
         BNE   @RF00412                                         02S0412
*         DO;                       /* DOENDREQ DO/END GROUP         */
*           GEN(ENDREQ RPL=(R2))                                02S0414
*           REFS(R2);               /* END OF SUBMITTED JOB          */
         ENDREQ RPL=(R2)
*           RFY                                                 02S0415
*             R15 RSTD;                                         02S0415
*                                                               02S0415
*           /*********************************************************/
*           /*                                                       */
*           /* ERROR IF ENDREQ FAILED                                */
*           /*                                                       */
*           /*********************************************************/
*                                                               02S0416
*           IF R15^=EREQRCOK THEN                               02S0416
         LTR   R15,R15                                          02S0416
         BZ    @RF00416                                         02S0416
*             DO;                                               02S0417
*               GFPARMS=GFPARMS&&GFPARMS;/* ZERO OUT VSAMFAIL   02S0418
*                                      PARAMETER LIST (GENERAL FAIL
*                                      LIST)                         */
         XC    GFPARMS(44),GFPARMS                              02S0418
*               GFCALLID=GFENDREQ;  /* INDICATE ENDREQ MACRO FAILED  */
         MVC   GFCALLID(2),@CH00160                             02S0419
*               CALL RPLERMSG;      /* ISSUE THE ERROR MESSAGE       */
         BAL   @14,RPLERMSG                                     02S0420
*               RFY                                             02S0421
*                 R15 UNRSTD;                                   02S0421
*             END;                                              02S0422
*                                                               02S0422
*           /*********************************************************/
*           /*                                                       */
*           /* ISSUE 'JOB JOBNAME(JOBID) SUBMITTED' MESSAGE          */
*           /*                                                       */
*           /*********************************************************/
*                                                               02S0423
*           ELSE                                                02S0423
*             DO;                                               02S0423
         B     @RC00416                                         02S0423
@RF00416 DS    0H                                               02S0424
*               JOBNAREA=JOBNAME;   /* JOBNAME IS INPUT PARAMETER    */
         L     @03,JOBNAMPT(,CONLIST)                           02S0424
         MVC   JOBNAREA(8),JOBNAME(@03)                         02S0424
*               JOBLPREN='(';                                   02S0425
         MVI   JOBLPREN,C'('                                    02S0425
*               JOBIAREA=RPLRBAR;   /* JOBID IS RETURNED FROM ENDREQ
*                                      (JOBID IS SUBSYSTEM'S JOB
*                                      IDENTIFIER)                   */
         MVC   JOBIAREA(8),RPLRBAR(R2)                          02S0426
*               JOBRPREN=')';                                   02S0427
         MVI   JOBRPREN,C')'                                    02S0427
*               L1=LENGTH(JOBINSRT);/* MESSAGE INSERT IS JOBNAME
*                                      (JOBID )                      */
         MVI   L1(MSGPTR),X'12'                                 02S0428
*               VAR1=ADDR(JOBINSRT);                            02S0429
         LA    @03,JOBINSRT                                     02S0429
         STCM  @03,7,VAR1(MSGPTR)                               02S0429
*               MTJOBISW=ON;        /* TELL IKJEFF02 TO COMPRESS
*                                      BLANKS OUT OF JOBNAME(JOBID) -
*                                      NEEDN'T TURN SWITCH OFF       */
         OI    MTJOBISW(MSGPTR),B'00000100'                     02S0430
*               MSGID='12B';        /* ID FOR JOB SUBMITTED MESSAGE  */
         MVI   MSGID+3(MSGPTR),C' '                             02S0431
         MVC   MSGID(3,MSGPTR),@CC00709                         02S0431
*               RFY                                             02S0432
*                 R1 RSTD;                                      02S0432
*               R1=ADDR(MSGTABLE);  /* POINTER TO IKJEFF02'S PARMLIST*/
         LR    R1,MSGPTR                                        02S0433
*               CALL IKJEFF02;      /* ISSUE THE JOB SUBMITTED MSG   */
         L     @15,MSGRTN(,MSGPTR)                              02S0434
         BALR  @14,@15                                          02S0434
*               RFY                                             02S0435
*                 R1 UNRSTD;                                    02S0435
*               RFY                                             02S0436
*                 R15 RSTD;                                     02S0436
*               IF R15^=MSGRCOK THEN/* END SUBMIT IF COULDN'T ISSUE
*                                      PUTLINE TO USER               */
         LTR   R15,R15                                          02S0437
         BZ    @RF00437                                         02S0437
*                 QUIT=ON;                                      02S0438
         OI    QUIT(HTPTR),B'10000000'                          02S0438
*               RFY                                             02S0439
*                 R15 UNRSTD;                                   02S0439
@RF00437 DS    0H                                               02S0440
*             END;                                              02S0440
*         END;                      /* DOENDREQ DO/END GROUP         */
*                                                               02S0441
*       /*************************************************************/
*       /*                                                           */
*       /* ERROR IF HTCODE ^= PUTCODE OR EREQCODE                    */
*       /*                                                           */
*       /*************************************************************/
*                                                               02S0442
*       ELSE                                                    02S0442
*         DO;                                                   02S0442
         B     @RC00412                                         02S0442
@RF00412 DS    0H                                               02S0443
*           MSGID='12C';            /* MSG FOR INVALID ENTRY CODE    */
         MVI   MSGID+3(MSGPTR),C' '                             02S0443
         MVC   MSGID(3,MSGPTR),@CC00710                         02S0443
*           L1=LENGTH(JOBNAME);     /* INSERT THE CURRENT JOBNAME    */
         MVI   L1(MSGPTR),X'08'                                 02S0444
*           VAR1=ADDR(JOBNAME);                                 02S0445
         MVC   VAR1(3,MSGPTR),JOBNAMPT+1(CONLIST)               02S0445
*           L2=LENGTH(INSRTMOD);    /* INSERT MODULE NAME = IKJEFF12 */
         MVI   L2(MSGPTR),X'08'                                 02S0446
*           VAR2=ADDR(INSRTMOD);                                02S0447
         LA    @03,INSRTMOD                                     02S0447
         STCM  @03,7,VAR2(MSGPTR)                               02S0447
*           RFY                                                 02S0448
*             R1 RSTD;                                          02S0448
*           R1=ADDR(MSGTABLE);      /* PTR TO IKJEFF02'S PARAM LIST  */
         LR    R1,MSGPTR                                        02S0449
*           CALL IKJEFF02;          /* ISSUE THE ERROR MESSAGE       */
         L     @15,MSGRTN(,MSGPTR)                              02S0450
         BALR  @14,@15                                          02S0450
*           RFY                                                 02S0451
*             R1 UNRSTD;                                        02S0451
*           QUIT=ON;                /* INDICATE SUBMIT FAILED        */
         OI    QUIT(HTPTR),B'10000000'                          02S0452
*         END;                                                  02S0453
*     END;                          /* DONOTPUT DO/END GROUP         */
@RC00412 DS    0H                                               02S0455
*   INWRMGR=OFF;                    /* INDICATE NOT IN IKJEFF12      */
@RC00396 NI    INWRMGR(HTPTR),B'11101111'                       02S0455
*   RFY                                                         02S0456
*     R2 UNRSTD;                                                02S0456
*   CALL CODECHK;                   /* CHECK FOR ERROR RETURN        */
         BAL   @14,CODECHK                                      01S0457
*   GO TO INDIRECT;                 /* RETURN TO CALLER OF THIS 01S0458
*                                                             SEGMENT*/
*                                                               01S0458
         L     @01,PT                                           01S0458
         BR    @01                                              01S0458
*   /*****************************************************************/
*   /*                                                               */
*   /* CALLEX SUBROUTINE (CALLS INSTALLATION EXIT INTERFACE)         */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0459
*CALLEX:                            /* CALL EXIT INTERFACE           */
*   CALL IKJEFF09(STMTPT,USERID,HISTFLD,MSGLISPT,CONTABPT,EXWORD,EXITAD
*       ,CTCMDNM);                  /* AFTER EXIT DO CODE CHECK      */
CALLEX   LA    @15,STMTPT(,CONLIST)                             01S0459
         ST    @15,@AL00001                                     01S0459
         L     @01,USERIDPT(,CONLIST)                           01S0459
         ST    @01,@AL00001+4                                   01S0459
         ST    HTPTR,@AL00001+8                                 01S0459
         LA    @15,MSGLISPT(,CONLIST)                           01S0459
         ST    @15,@AL00001+12                                  01S0459
         LA    @15,CONTABPT(,CONLIST)                           01S0459
         ST    @15,@AL00001+16                                  01S0459
         LA    @15,EXWORD(,CONLIST)                             01S0459
         ST    @15,@AL00001+20                                  01S0459
         LA    @15,EXITAD(,CONLIST)                             01S0459
         ST    @15,@AL00001+24                                  01S0459
         LA    @15,CTCMDNM(,CONLIST)                            01S0459
         ST    @15,@AL00001+28                                  01S0459
         L     @15,@CV00177                                     01S0459
         LA    @01,@AL00001                                     01S0459
         BALR  @14,@15                                          01S0459
*   CALL CODECHK;                   /* CHECK FOR ERROR RETURN        */
         BAL   @14,CODECHK                                      01S0460
*   GO TO AFTEX;                    /* BRANCH BACK TO MAIN LOGIC     */
*                                                               01S0461
         B     AFTEX                                            01S0461
*   /*****************************************************************/
*   /*                                                               */
*   /* FINISH SUBROUTINE (CLEANS UP AND RETURNS TO CALLER)           */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0462
*FINISH:                                                        01S0462
*   STMTPT=0;                       /* ZERO THE STATEMENT POINTER
*                                      WHEN DONE PROCESSING THE CARD */
FINISH   SLR   @10,@10                                          01S0462
         ST    @10,STMTPT(,CONLIST)                             01S0462
*   INCONTRL=INCONTRL-1;            /* DECREMENT CONTROL COUNTER AND
*                                      RETURN TO CALLER              */
         SLR   @10,@10                                          01S0463
         IC    @10,INCONTRL(,HTPTR)                             01S0463
         BCTR  @10,0                                            01S0463
         STC   @10,INCONTRL(,HTPTR)                             01S0463
*                                                               01S0464
*   /*****************************************************************/
*   /*                                                               */
*   /* CODECHK INTERNAL PROCEDURE - CHECKS WHETHER DONE WITH         */
*   /* IKJEFF06'S PROCESSING (WOULD NEED TO CHECK FOR POSTBIT ON IN  */
*   /* COMMECB IF HAD A STAX ROUTINE - AND IF ON, TURN ON QUIT SWITCH*/
*   /* AND RETURN TO FINISH)                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0464
*CODECHK:                                                       01S0464
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                          01S0464
         B     @PB00003                                         01S0464
CODECHK  DS    0H                                               01S0465
*   IF QUIT='1'B THEN               /* CHECK FOR ERROR TERMINATION   */
         TM    QUIT(HTPTR),B'10000000'                          01S0465
         BNO   @RF00465                                         01S0465
*     RETURN TO FINISH;             /* COMPLETELY DONE - ERROR       */
         LA    @14,FINISH                                       01S0466
@EL00003 DS    0H                                               01S0466
@EF00003 DS    0H                                               01S0466
@ER00003 BR    @14                                              01S0466
*   IF STMTPT=0 THEN                /* CHECK CARD PROCESSED          */
@RF00465 L     @15,STMTPT(,CONLIST)                             01S0467
         LTR   @15,@15                                          01S0467
         BNZ   @RF00467                                         01S0467
*     RETURN TO FINISH;             /* DONE W/ THIS JCL OR DATA CARD */
         LA    @14,FINISH                                       01S0468
         BR    @14                                              01S0468
*   END CODECHK;                                                01S0469
         B     @EL00003                                         01S0469
*   END FF05I06;                                                01S0470
@EL00002 DS    0H                                               01S0470
@EF00002 DS    0H                                               01S0470
@ER00002 LM    @14,@04,@SA00002                                 01S0470
         LM    @06,@12,@SA00002+28                              01S0470
         BR    @14                                              01S0470
*                                                               01S0471
*/********************************************************************/
*/*                                                                  */
*/* RPLERMSG INTERNAL PROCEDURE                                      */
*/*                                                                  */
*/*  - CALLS IKJEFF19 TO ISSUE VSAMFAIL MESSAGE FOR PUT OR ENDREQ    */
*/*        MACRO                                                     */
*/*       (CODE CALLING RPLERMSG MUST ZERO GFPARMS AND SET GFCALLID) */
*/*                                                                  */
*/*  - THEN ISSUES 'SUBMIT TERMINATED' ERROR MESSAGE                 */
*/*                                                                  */
*/********************************************************************/
*                                                               01S0471
*RPLERMSG:                                                      01S0471
*   PROC;                                                       01S0471
RPLERMSG STM   @14,@12,@SA00004                                 01S0471
*   RFY                                                         01S0472
*    (R2,                                                       01S0472
*     R15) RSTD;                                                01S0472
*   GFRCODE=R15;                    /* SAVE MACRO RETURN CODE        */
         ST    R15,GFRCODE                                      01S0473
*   RFY                                                         01S0474
*     R15 UNRSTD;                                               01S0474
*   GFCBPTR=ADDR(IFGRPL);           /* RPL IS FAILING VSAM C.B.      */
         ST    R2,GFCBPTR                                       01S0475
*   GFKEYN08=ON;                    /* TELL IKJEFF19 TO DO MODESET   */
         OI    GFKEYN08,B'10000000'                             01S0476
*   GF02PTR=ADDR(IKJEFF02);         /* HAVE ADDRESS OF MSG ISSUER    */
         L     @10,MSGRTN(,MSGPTR)                              01S0477
         ST    @10,GF02PTR                                      01S0477
*   GFSUBSYS=ON;                    /* USING VSAM SUBSYSTEM INTERFACE*/
         OI    GFSUBSYS,B'01000000'                             01S0478
*   GFCPPLP=MTCPPL;                 /* PASS PTR TO TMP'S CPPL C.B.
*                                      (NEED FOR PUTLINE)            */
         L     @10,MTCPPL(,MSGPTR)                              01S0479
         ST    @10,GFCPPLP                                      01S0479
*   GFECBP=ECBPTR;                  /* USE SUBMIT-SUPPLIED ECB FOR
*                                      PUTLINE                       */
         L     @10,ECBPTR(,MSGPTR)                              01S0480
         ST    @10,GFECBP                                       01S0480
*   GFDSNLEN=LENGTH(INTRDRDS);      /* PASS 'INTRDR' NAME TO IKJEFF19
*                                      FOR DATA SET NAME MSG INSERT  */
         MVC   GFDSNLEN(2),@CH00112                             01S0481
*   GFDSNP=ADDR(INTRDRDS);                                      01S0482
         LA    @10,INTRDRDS                                     01S0482
         ST    @10,GFDSNP                                       01S0482
*   GFPGMNL=LENGTH(CTCMDNM);        /* INSERT COMMAND NAME, AS  01S0483
*                                      ENTERED BY USER               */
         MVC   GFPGMNL(2),@CH00055                              01S0483
*   GFPGMNP=ADDR(CTCMDNM);                                      01S0484
         LA    @10,CTCMDNM(,CONLIST)                            01S0484
         ST    @10,GFPGMNP                                      01S0484
*                                                               01S0485
*   /*****************************************************************/
*   /*                                                               */
*   /* CALL VSAMFAIL                                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0485
*   RFY                                                         01S0485
*     R0 RSTD;                                                  01S0485
*   GEN(LOAD  EP=IKJEFF19)                                      01S0486
*   SETS(R0);                       /* LOAD THE VSAMFAIL ROUTINE     */
         LOAD  EP=IKJEFF19
*   CALL IKJEFF19(GFPARMS);         /* ISSUE THE ERROR MESSAGE       */
         LA    @10,GFPARMS                                      01S0487
         ST    @10,@AL00001                                     01S0487
         LR    @15,R0                                           01S0487
         LA    @01,@AL00001                                     01S0487
         BALR  @14,@15                                          01S0487
*   GEN(DELETE EP=IKJEFF19)                                     01S0488
*   REFS(R0);                       /* DELETE THE VSAMFAIL MODULE    */
         DELETE EP=IKJEFF19
*   RFY                                                         01S0489
*     R0 UNRSTD;                                                01S0489
*                                                               01S0489
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE 'SUBMIT TERMINATED ON JOB <JOBNAME>' MESSAGE            */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0490
*   MSGID='12D';                    /* MSG FOR SUBMIT TERMINATED     */
         MVI   MSGID+3(MSGPTR),C' '                             01S0490
         MVC   MSGID(3,MSGPTR),@CC00719                         01S0490
*   L1=LENGTH(CTCMDNM);             /* INSERT COMMAND NAME           */
         MVI   L1(MSGPTR),X'08'                                 01S0491
*   VAR1=ADDR(CTCMDNM);                                         01S0492
         LA    @10,CTCMDNM(,CONLIST)                            01S0492
         STCM  @10,7,VAR1(MSGPTR)                               01S0492
*   L2=LENGTH(JOBNAME);             /* INSERT THE CURRENT JOBNAME    */
         MVI   L2(MSGPTR),X'08'                                 01S0493
*   VAR2=ADDR(JOBNAME);                                         01S0494
         MVC   VAR2(3,MSGPTR),JOBNAMPT+1(CONLIST)               01S0494
*   RFY                                                         01S0495
*     R1 RSTD;                                                  01S0495
*   R1=ADDR(MSGTABLE);              /* PTR TO IKJEFF02'S PARAM LIST  */
         LR    R1,MSGPTR                                        01S0496
*   CALL IKJEFF02;                  /* ISSUE THE ERROR MESSAGE       */
         L     @15,MSGRTN(,MSGPTR)                              01S0497
         BALR  @14,@15                                          01S0497
*   RFY                                                         01S0498
*     R1 UNRSTD;                                                01S0498
*   QUIT=ON;                        /* INDICATE SUBMIT FAILED        */
         OI    QUIT(HTPTR),B'10000000'                          01S0499
*   RFY                                                         01S0500
*     R2 UNRSTD;                                                01S0500
*   END RPLERMSG;                                               01S0501
@EL00004 DS    0H                                               01S0501
@EF00004 DS    0H                                               01S0501
@ER00004 LM    @14,@12,@SA00004                                 01S0501
         BR    @14                                              01S0501
*   END IKJEFF05                                                01S0502
*                                                               01S0502
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSUT5  (FF05PRLG)                                       */
*/*%INCLUDE SYSUT5  (FF05DCLS)                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IKJDAP08)                                       */
*/*%INCLUDE SYSLIB  (IKJEFFCT)                                       */
*/*%INCLUDE SYSLIB  (IKJEFFD8)                                       */
*/*%INCLUDE SYSLIB  (IKJEFFGF)                                       */
*/*%INCLUDE SYSLIB  (IKJEFFHT)                                       */
*/*%INCLUDE SYSLIB  (IKJEFFMT)                                       */
*/*%INCLUDE SYSUT5  (IKJEFF12)                                       */
*                                                               01S0502
*       ;                                                       01S0502
@DATA    DS    0H
@CH00160 DC    H'3'
@CH00112 DC    H'6'
@CH00055 DC    H'8'
@CH00060 DC    H'80'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    2F
@SA00002 DS    14F
@SA00004 DS    15F
@AL00001 DS    8A
IKJEFF05 CSECT
         DS    0F
@CF00048 DC    F'1'
@CF00283 DC    F'2'
@CF00125 DC    F'4'
@CF00664 DC    XL4'08'
@DATD    DSECT
         DS    0D
FINDCODE DS    F
PT       DS    A
RETCODE  DS    F
RESCNT   DS    H
DBLBUFSW DS    AL1
         DS    CL2
BUFFB    DS    AL3
CARD     DS    CL80
BADTXT   DS    CL52
WORKAREA DS    CL108
RDECB    DS    CL20
         ORG   RDECB
@NM00012 DS    CL6
DECLNGTH DS    FL2
@NM00013 DS    CL8
DECIOBPT DS    AL4
         ORG   RDECB+20
FINDNAME DS    CL8
BUFFIND  DS    CL8
         ORG   BUFFIND
BUFCORAD DS    AL4
BUFCORLN DS    AL4
         ORG   BUFFIND+8
GTMNPARM DS    CL8
         ORG   GTMNPARM
GMNMIN   DS    FL4
GMNMAX   DS    FL4
         ORG   GTMNPARM+8
JCLSW    DS    BL1
JOBINSRT DS    CL18
         ORG   JOBINSRT
JOBNAREA DS    CL8
JOBLPREN DS    CL1
JOBIAREA DS    CL8
JOBRPREN DS    CL1
         ORG   JOBINSRT+18
         DS    CL1
GFPARMS  DS    CL44
         ORG   GFPARMS
GFCBPTR  DS    AL4
GFRCODE  DS    FL4
GF02PTR  DS    AL4
GFCALLID DS    FL2
GFBITS   DS    BL1
         ORG   GFBITS
GFKEYN08 DS    BL1
GFSUBSYS EQU   GFBITS+0
GFWTPSW  EQU   GFBITS+0
@NM00041 EQU   GFBITS+0
         ORG   GFPARMS+15
@NM00042 DS    AL1
GFCPPLP  DS    AL4
GFECBP   DS    AL4
GFDSNLEN DS    FL2
GFPGMNL  DS    FL2
GFDSNP   DS    AL4
GFPGMNP  DS    AL4
@NM00043 DS    AL4
@NM00044 DS    AL4
         ORG   GFPARMS+44
IKJEFF05 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00175 DC    V(IKJEFF07)
@CV00176 DC    V(IKJEFF08)
@CV00177 DC    V(IKJEFF09)
@CV00178 DC    V(IKJEFF13)
         DS    0D
@CC00058 DC    C'        '
@CC00669 DC    C'/*DEL'
@CC00671 DC    C'/*EOF'
@CC00658 DC    C'05K '
@CC00659 DC    C'05E '
@CC00660 DC    C'05F '
@CC00661 DC    C'05G '
@CC00662 DC    C'05H '
@CC00665 DC    C'05J '
@CC00666 DC    C'05L '
@CC00686 DC    C'05D '
@CC00651 DC    C'05I'
@CC00709 DC    C'12B'
@CC00710 DC    C'12C'
@CC00719 DC    C'12D'
@CC00677 DC    C'//'
@CC00693 EQU   @CC00669
KTEMPNAM DC    CL8'TEMPNAME'
ZAPAREA  DS    CL51
         ORG   ZAPAREA
ZAPINIT  DC    17CL3'ZAP'
         ORG   ZAPAREA+51
PATCH06  DS    CL51
         ORG   PATCH06
PTCHINIT DC    17CL3'ZAP'
         ORG   PATCH06+51
INSRTMOD DC    CL8'IKJEFF12'
PATCH12  DS    CL51
         ORG   PATCH12
PT12INIT DC    17CL3'ZAP'
         ORG   PATCH12+51
INTRDRDS DC    CL6'INTRDR'
IKJEFF05 CSECT
READDCB  DCB   DSORG=PS,                                               X
               MACRF=R,                                                X
               KEYLEN=0,                                               X
               SYNAD=SYNADRTN,                                         X
               EODAD=INPUTEOF,                                         X
               DDNAME=INPUT
          CNOP  0,4
SGET      EQU   *
DDGETM    GETMAIN  VC,MF=L
EGET      EQU   *
          CNOP  0,4
SFRE      EQU   *
DDFREM    FREEMAIN E,MF=L
EFRE      EQU   *
          READ  MDECB,SF,MF=L
          CNOP  0,4
SOPE      EQU   *
OPEL      OPEN  (MDECB),MF=L
EOPE      EQU   *
@DATD    DSECT
*                                            /* REENTRANT CORE       */
          CNOP  0,4
AAGETM    DS    CL(EGET-SGET)     *CORE FOR GETMAIN (LIST FORM) MACRO
          CNOP  0,4
AAFREM    DS    CL(EFRE-SFRE)     *CORE FOR FREEMAIN (LIST FORM) MACRO
          CNOP  0,4
ROPE      DS    CL(EOPE-SOPE)     *CORE FOR OPEN/CLOSE LIST
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKJEFF05 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
CURREC   EQU   @10
BUFFA    EQU   @09
K        EQU   @03
J        EQU   @03
CURRDD   EQU   @07
MSGPTR   EQU   @05
HTPTR    EQU   @04
CONLIST  EQU   @06
R15      EQU   @15
R1       EQU   @01
R2       EQU   @02
R8       EQU   @08
R0       EQU   @00
IKJEFF02 EQU   0
SYNADMSG EQU   0
SYNADTXT EQU   SYNADMSG+68
READWORK EQU   0
DCB      EQU   READWORK
DCBDSORG EQU   DCB+26
RECFM    EQU   DCB+36
RECFMF   EQU   RECFM
RECFMV   EQU   RECFM
DDNAME   EQU   DCB+40
OFLAGS   EQU   DCB+48
OPENBIT  EQU   OFLAGS
DCBIMACR EQU   DCB+50
BLKSIZE  EQU   DCB+62
LRECL    EQU   DCB+82
READSW   EQU   READWORK+96
FIRSTRD  EQU   READSW
FAILCODE EQU   READWORK+97
DDELEM   EQU   0
DAPB0PTR EQU   DDELEM
NEXTDDEL EQU   DDELEM+4
IOB      EQU   0
CSWCNT   EQU   IOB+14
NCARD    EQU   0
CURRCARD EQU   0
JOBNMS   EQU   0
CURRNAME EQU   JOBNMS
NEXTNAME EQU   JOBNMS+8
HISTFLD  EQU   0
USERID   EQU   0
COMMECB  EQU   0
INDIRECT EQU   0
JOBNAME  EQU   0
IKJEFF19 EQU   0
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLAREA  EQU   RPLCOMN+32
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLNXTRP EQU   RPLCOMN+44
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
DAPB08   EQU   0
DA08FLG  EQU   DAPB08+2
DA08DDN  EQU   DAPB08+12
DA08MNM  EQU   DAPB08+52
DA08DSP1 EQU   DAPB08+68
DA08DPS2 EQU   DAPB08+69
DA08DPS3 EQU   DAPB08+70
DA08CTL  EQU   DAPB08+71
DA08DSO  EQU   DAPB08+75
CONTAB   EQU   0
CONTABPT EQU   CONTAB+12
STMTPT   EQU   CONTAB+16
HISTPT   EQU   CONTAB+24
JOBNAMPT EQU   CONTAB+32
MSGLISPT EQU   CONTAB+36
USERIDPT EQU   CONTAB+40
EXWORD   EQU   CONTAB+48
EXITAD   EQU   CONTAB+52
DDPTR    EQU   CONTAB+56
COMECBPT EQU   CONTAB+60
CTRPLPT  EQU   CONTAB+68
CTCMDNM  EQU   CONTAB+76
D08ADDED EQU   0
D08EXTRA EQU   D08ADDED
D8SWITS  EQU   D08EXTRA+4
D8ADJUST EQU   D8SWITS
ORIGNAME EQU   D08EXTRA+6
NAMELEN  EQU   ORIGNAME
DSNAME   EQU   ORIGNAME+2
HISTORY  EQU   0
WHATMOD  EQU   HISTORY+12
INCONTRL EQU   WHATMOD
INGEN    EQU   WHATMOD+2
INREAD   EQU   WHATMOD+3
INEXIT   EQU   WHATMOD+3
INWRMGR  EQU   WHATMOD+3
JCLSWITS EQU   HISTORY+16
PRIORJCL EQU   JCLSWITS
PVERB    EQU   PRIORJCL
PDTYPE   EQU   PRIORJCL+2
PMISC    EQU   PRIORJCL+3
CURRJCL  EQU   JCLSWITS+4
CVERB    EQU   CURRJCL
CDATA    EQU   CVERB
CNULL    EQU   CVERB
CJOB     EQU   CVERB
CEXEC    EQU   CVERB
CDD      EQU   CVERB
CCOMMAND EQU   CVERB
CCOMMENT EQU   CVERB
CJES     EQU   CVERB+1
CDTYPE   EQU   CURRJCL+2
CDDAST   EQU   CDTYPE
CDDDATA  EQU   CDTYPE
CMISC    EQU   CURRJCL+3
CCONEX   EQU   CMISC
CVERBCOP EQU   CMISC
STATICSW EQU   HISTORY+24
GENL     EQU   STATICSW
QUIT     EQU   GENL
FLUSH    EQU   GENL
FIRST    EQU   GENL
TAKEXITS EQU   STATICSW+1
JOBX     EQU   TAKEXITS
EXECX    EQU   TAKEXITS
DDX      EQU   TAKEXITS
CMDX     EQU   TAKEXITS
NULLX    EQU   TAKEXITS
JESX     EQU   TAKEXITS
COMNTX   EQU   TAKEXITS
CODEFLD  EQU   STATICSW+3
HTCODE   EQU   CODEFLD
DLMONJCL EQU   HISTORY+32
HTDLM    EQU   DLMONJCL
HTSWITCH EQU   HISTORY+34
HTDLMSW  EQU   HTSWITCH
HTACCNTP EQU   HISTORY+40
MSGTABLE EQU   0
TMCTPTR  EQU   MSGTABLE+4
MTCPPL   EQU   TMCTPTR
ECBPTR   EQU   MSGTABLE+8
@NM00055 EQU   MSGTABLE+12
SW       EQU   MSGTABLE+20
MTJOBISW EQU   SW
RETMSG   EQU   MSGTABLE+21
SW2      EQU   MSGTABLE+24
MSGID    EQU   MSGTABLE+40
MTINSRTS EQU   MSGTABLE+44
L1       EQU   MTINSRTS
VAR1     EQU   MTINSRTS+1
L2       EQU   MTINSRTS+4
VAR2     EQU   MTINSRTS+5
L3       EQU   MTINSRTS+8
VAR3     EQU   MTINSRTS+9
L4       EQU   MTINSRTS+12
MSGRTN   EQU   MSGTABLE+60
RET      EQU   0
HTACCNTI EQU   0
MSGECB   EQU   0
MSGTMCT  EQU   0
SUBCTAB  EQU   0
PCONTAB  EQU   0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
RETCHAR  EQU   RET+2
RETSIZE  EQU   RET
VAR4     EQU   MTINSRTS+13
HIGHL4   EQU   L4
HIGHL3   EQU   L3
HIGHL2   EQU   L2
HIGHL1   EQU   L1
@NM00059 EQU   MSGTABLE+36
@NM00058 EQU   MSGTABLE+32
MTOLDPTR EQU   MSGTABLE+28
@NM00057 EQU   MSGTABLE+25
@NM00056 EQU   SW2
MTPGMSW  EQU   SW2
MTNPLMSW EQU   SW2
MTNOXQSW EQU   SW2
MTDOMSW  EQU   SW2
MT2OLDSW EQU   SW2
MTNHEXSW EQU   SW
MTWTPSW  EQU   SW
MTKEY1SW EQU   SW
MTHEXSW  EQU   SW
MTWTOSW  EQU   SW
MTPUTLSW EQU   SW
MTNOIDSW EQU   SW
MSGCSECT EQU   MSGTABLE+16
MTHIGH   EQU   @NM00055
LISTPTR  EQU   MSGTABLE
@NM00054 EQU   HISTORY+50
HTACNTC2 EQU   HISTORY+48
HTACNTC1 EQU   HISTORY+46
HTACCNTL EQU   HISTORY+44
@NM00053 EQU   HISTORY+36
@NM00052 EQU   HISTORY+35
@NM00051 EQU   HTSWITCH
@NM00050 EQU   HISTORY+28
OPOFF    EQU   STATICSW+2
@NM00049 EQU   TAKEXITS
NONOTIFY EQU   GENL
CDLMFND  EQU   CMISC
CNOTHING EQU   CMISC
CCOMCON  EQU   CMISC
CNAME    EQU   CMISC
CCONERR  EQU   CMISC
COPCONEX EQU   CMISC
@NM00048 EQU   CVERB+1
@NM00047 EQU   CVERB+1
CDELIM   EQU   CVERB
PDLMFND  EQU   PMISC
PNOTHING EQU   PMISC
PCOMCON  EQU   PMISC
PVERBCOP EQU   PMISC
PNAME    EQU   PMISC
PCONERR  EQU   PMISC
POPCONEX EQU   PMISC
PCONEX   EQU   PMISC
PDDDATA  EQU   PDTYPE
PDDAST   EQU   PDTYPE
@NM00046 EQU   PVERB+1
@NM00045 EQU   PVERB+1
PJES     EQU   PVERB+1
PCOMMENT EQU   PVERB
PCOMMAND EQU   PVERB
PDD      EQU   PVERB
PEXEC    EQU   PVERB
PJOB     EQU   PVERB
PNULL    EQU   PVERB
PDATA    EQU   PVERB
PDELIM   EQU   PVERB
INOINIT  EQU   WHATMOD+3
INCOMPIN EQU   WHATMOD+3
INMSG    EQU   WHATMOD+3
INDAIRIN EQU   WHATMOD+3
INIDENT  EQU   WHATMOD+3
INPROMPT EQU   WHATMOD+1
SUBTAB   EQU   HISTORY
ENDEXTRA EQU   D08ADDED+52
D8SPARE  EQU   D8SWITS+1
NEXT08   EQU   D08EXTRA
CTIDLN   EQU   CONTAB+84
CTACBPT  EQU   CONTAB+72
INITSAVE EQU   CONTAB+64
TMCTPT   EQU   CONTAB+44
CTNDSNPT EQU   CONTAB+28
CLOSERPT EQU   CONTAB+20
TABID    EQU   CONTAB
DA08ALN  EQU   DAPB08+76
@NM00040 EQU   DAPB08+72
@NM00039 EQU   DA08CTL
DA08ATRL EQU   DA08CTL
DA08DMMY EQU   DA08CTL
DA08PERM EQU   DA08CTL
DA08RLSE EQU   DA08CTL
DA08UID  EQU   DA08CTL
DA08ABKL EQU   DA08CTL
DA08TRKS EQU   DA08CTL
DA08UNCT EQU   DA08DPS3
DA08CATL EQU   DA08DPS3
DA08DELE EQU   DA08DPS3
DA08KEP  EQU   DA08DPS3
@NM00038 EQU   DA08DPS3
@NM00037 EQU   DA08DPS3
@NM00036 EQU   DA08DPS3
@NM00035 EQU   DA08DPS3
DA08UCAT EQU   DA08DPS2
DA08CAT  EQU   DA08DPS2
DA08DEL  EQU   DA08DPS2
DA08KEEP EQU   DA08DPS2
@NM00034 EQU   DA08DPS2
@NM00033 EQU   DA08DPS2
@NM00032 EQU   DA08DPS2
@NM00031 EQU   DA08DPS2
DA08OLD  EQU   DA08DSP1
DA08MOD  EQU   DA08DSP1
DA08NEW  EQU   DA08DSP1
DA08SHR  EQU   DA08DSP1
@NM00030 EQU   DA08DSP1
@NM00029 EQU   DA08DSP1
@NM00028 EQU   DA08DSP1
@NM00027 EQU   DA08DSP1
DA08PSWD EQU   DAPB08+60
DA08DQTY EQU   DAPB08+48
DA08SQTY EQU   DAPB08+44
DA08PQTY EQU   DAPB08+40
DA08BLK  EQU   DAPB08+36
DA08SER  EQU   DAPB08+28
DA08UNIT EQU   DAPB08+20
DA08PDSN EQU   DAPB08+8
DA08CTRC EQU   DAPB08+6
DA08DARC EQU   DAPB08+4
@NM00026 EQU   DA08FLG
@NM00025 EQU   DA08FLG
@NM00024 EQU   DA08FLG
@NM00023 EQU   DA08FLG
@NM00022 EQU   DA08FLG
@NM00021 EQU   DA08FLG
@NM00020 EQU   DA08FLG
DA08FPE  EQU   DA08FLG
DA08CD   EQU   DAPB08
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00019 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00018 EQU   RPLRBAR+3
@NM00017 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLRSV77 EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
RPLSSNIN EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLRLEN  EQU   RPLCOMN+48
RPLCHAIN EQU   RPLNXTRP
RPLOPT4  EQU   RPLOPTCD+3
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
@NM00016 EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLTCBPT EQU   RPLCOMN+28
RPLDACB  EQU   RPLCOMN+24
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
POSTBIT  EQU   COMMECB
@NM00015 EQU   COMMECB
@NM00014 EQU   IOB
WORKEND  EQU   READWORK+98
@NM00011 EQU   DCB+64
@NM00010 EQU   DCB+51
@NM00009 EQU   DCB+49
@NM00008 EQU   OFLAGS
@NM00007 EQU   OFLAGS
@NM00006 EQU   OFLAGS
@NM00005 EQU   OFLAGS
@NM00004 EQU   DCB+37
@NM00003 EQU   DCB+27
@NM00002 EQU   DCB
@NM00001 EQU   SYNADMSG+42
MSGBLANK EQU   SYNADMSG
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
END0506  EQU   @EL00001
@RF00319 EQU   @RC00315
@RC00317 EQU   @RC00315
@RT00334 EQU   FINISH
@RT00336 EQU   PUTCARD
@RT00345 EQU   CALLEX
@RT00347 EQU   CALLEX
@RT00349 EQU   CALLEX
@RT00351 EQU   CALLEX
@RT00353 EQU   CALLEX
@RT00355 EQU   CALLEX
@RT00357 EQU   CALLEX
@RF00401 EQU   @RC00396
@RC00416 EQU   @RC00412
@RF00467 EQU   @EL00003
@PB00003 EQU   @EL00002
@ENDDATA EQU   *
         END   IKJEFF05,(C'PLS1045',0701,78174)
