         TITLE 'IKJEFA54 - ACCOUNT / FREESPACE SUBROUTINE              *
                        '
IKJEFA54 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKJEFA54  74.021'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @11,8(,@13)                                         0001
         LR    @13,@11                                             0001
*          SPACPTR=R1;                  /* SAVE PTR TO SPACPARM      */
         LR    SPACPTR,R1                                          0010
*          RFY R1 UNRSTD;               /* RELEASE PARAMETER REGISTER*/
*          /* ROUND UP REQUESTED LENGTH TO A MULTIPLE OF 4           */
*          SPACLNTH=SPACLNTH+3;         /* INSURE MULTIPLE IS NEXT 0012
*                                          HIGHER                    */
         LA    @08,3                                               0012
         AH    @08,SPACLNTH(,SPACPTR)                              0012
         STH   @08,SPACLNTH(,SPACPTR)                              0012
*          FRSPLBLO(7:8)='00'B;         /* INSURE WORD BOUNDRY       */
         NI    FRSPLBLO(SPACPTR),B'11111100'                       0013
*          HEDBPTR=SPACMPTR;            /* POINT TO FIRST MEMBER OF
*                                          USER ENTRY                */
         L     HEDBPTR,SPACMPTR(,SPACPTR)                          0014
*          SPACEPTR=SPACOFST+HEDBPTR;   /* PTR TO SPACE TO BE FREED  */
         LR    SPACEPTR,HEDBPTR                                    0015
         AL    SPACEPTR,SPACOFST(,SPACPTR)                         0015
*          /* MAKE SURE SPACEPTR POINTS TO A FULL-WORD BOUNDARY      */
*          IF SPACEPTR//4^=0                                       0016
*            THEN                       /* SPACE NOT ON FULLWORD BDY */
         LR    @00,SPACEPTR                                        0016
         SRDA  @00,32                                              0016
         D     @00,@CF00089                                        0016
         LTR   @00,@00                                             0016
         BZ    @RF00016                                            0016
*              RETURN CODE(4);          /* SET ERROR RTN CODE & EXIT */
         L     @13,4(,@13)                                         0017
         L     @00,@SIZDATD                                        0017
         LR    @01,@11                                             0017
         FREEMAIN R,LV=(0),A=(1)
         LA    @15,4                                               0017
         L     @14,12(,@13)                                        0017
         LM    @00,@12,20(@13)                                     0017
         BR    @14                                                 0017
*          UPPERLIM=SPACEPTR+SPACLNTH;  /* POINT TO OUTER LIMIT      */
@RF00016 LR    UPPERLIM,SPACEPTR                                   0018
         AH    UPPERLIM,SPACLNTH(,SPACPTR)                         0018
*          /* POINT TO MEMBER/BLOCK CONTAINING SPACE                 */
*          HEDBPTR=HEDBPTR+UADSBLNG*((SPACEPTR-HEDBPTR)/UADSBLNG); 0019
         LH    @08,UADSBLNG(,HEDBPTR)                              0019
         LR    @06,SPACEPTR                                        0019
         SLR   @06,HEDBPTR                                         0019
         LR    @00,@06                                             0019
         SRDA  @00,32                                              0019
         DR    @00,@08                                             0019
         LR    @05,@08                                             0019
         MR    @04,@01                                             0019
         ALR   HEDBPTR,@05                                         0019
*          /* MAKE CERTAIN THAT THE OUTER LIMIT OF GIVEN SPACE DOES
*             NOT OVERLAP A SECOND MEMBER/BLOCK                      */
*          IF UPPERLIM>HEDBPTR+UADSBLNG                            0020
*           /* OR DOES NOT OVERLAP A MEMBER/BLOCK HEADER.            */
*           ×SPACEPTR-HEDBPTR<LENGTH(UADSMHDR) /* WITHIN BASIC HDR   */
*           ×(SPACEPTR-HEDBPTR<ADDR(UADSPERP)-ADDR(UADSMHDR)       0020
*           &HEDBPTR=SPACMPTR)          /* THIS IS THE ORIGINAL MBR  */
*           ×(SPACEPTR-HEDBPTR<LENGTH(DHED) /* WITHIN ORIGINAL HDR   */
*           &HEDBPTR=SPACMPTR           /* AND THIS IS THE ORIGNL MBR*/
*           &UADSEXPF='1'B)             /* AND NEW FORMAT HEADER     */
*            THEN                       /* GIVEN SPACE OVERLAPS HDR  */
         LR    @08,HEDBPTR                                         0020
         AH    @08,UADSBLNG(,HEDBPTR)                              0020
         CR    UPPERLIM,@08                                        0020
         BH    @RT00020                                            0020
         LR    @08,SPACEPTR                                        0020
         SLR   @08,HEDBPTR                                         0020
         CH    @08,@CH00042                                        0020
         BL    @RT00020                                            0020
         LA    @06,UADSPERP(,HEDBPTR)                              0020
         SLR   @06,HEDBPTR                                         0020
         CR    @08,@06                                             0020
         BNL   @GL00001                                            0020
         C     HEDBPTR,SPACMPTR(,SPACPTR)                          0020
         BE    @RT00020                                            0020
@GL00001 LR    @08,SPACEPTR                                        0020
         SLR   @08,HEDBPTR                                         0020
         CH    @08,@CH00102                                        0020
         BNL   @RF00020                                            0020
         C     HEDBPTR,SPACMPTR(,SPACPTR)                          0020
         BNE   @RF00020                                            0020
         TM    UADSEXPF(HEDBPTR),B'01000000'                       0020
         BNO   @RF00020                                            0020
@RT00020 DS    0H                                                  0021
*              RETURN CODE(8);          /* SET ERROR RTN CODE & EXIT */
         L     @13,4(,@13)                                         0021
         L     @00,@SIZDATD                                        0021
         LR    @01,@11                                             0021
         FREEMAIN R,LV=(0),A=(1)
         LA    @15,8                                               0021
         L     @14,12(,@13)                                        0021
         LM    @00,@12,20(@13)                                     0021
         BR    @14                                                 0021
*          PREVFSQE=HEDBPTR;            /* INITIALIZE WORKING PTR  0022
*                                          TO HEAD OF Q              */
@RF00020 LR    PREVFSQE,HEDBPTR                                    0022
*          FSQEPTR=PREVFSQE->FSQENEXT+HEDBPTR;/* FSQENEXT IS RELATIVE
*                                          TO EACH MEMBER BLOCK HDR  */
         LR    FSQEPTR,HEDBPTR                                     0023
         AH    FSQEPTR,FSQENEXT(,PREVFSQE)                         0023
*SCANFSQE: /* SCAN FOR A FSQE THAT CAN CONTROL THE SPACE TO BE FREED */
*          IF FSQENEXT=0                /* CHECK FOR LAST FSQE       */
*            THEN                       /* NO CURRENT FSQE ISN'T LAST*/
SCANFSQE SLR   @03,@03                                             0024
         LH    @15,FSQENEXT(,FSQEPTR)                              0024
         CR    @15,@03                                             0024
         BE    @RT00024                                            0024
*              GOTO BLDFSQ;             /* GO TO BUILD A NEW FSQE    */
*          /* DOES SPACE-TO-BE-FREED ADJOIN THIS FSQE ?              */
*          IF SPACEPTR=FSQEPTR+FSQELNTH                            0026
*            THEN                       /* YES - LOWER BOUND COINCIDES
*                                          WITH UPPER END OF FSQE    */
         LH    @14,FSQELNTH(,FSQEPTR)                              0026
         LR    @05,FSQEPTR                                         0026
         ALR   @05,@14                                             0026
         CR    SPACEPTR,@05                                        0026
         BNE   @RF00026                                            0026
*              DO;                                                 0027
*              FSQELNTH=FSQELNTH+SPACLNTH;  /* COMBINE LENGTHS       */
         AH    @14,SPACLNTH(,SPACPTR)                              0028
         STH   @14,FSQELNTH(,FSQEPTR)                              0028
*              SPACEPTR->UADSFSQE=0;    /* CLEAR FIRST WORD OF SPACE */
         ST    @03,UADSFSQE(,SPACEPTR)                             0029
*              IF FSQENEXT=0            /* IS THIS END OF Q?         */
*                THEN                   /* YES, NO FURTHER CHECKING  */
         CR    @15,@03                                             0030
         BE    @RT00030                                            0030
*                  GOTO CLEARSP;        /* GO TO CLEAR FREED SPACE   */
*              PREVFSQE=FSQEPTR;        /* SAVE PTR TO PREVIOUS FSQE */
         LR    PREVFSQE,FSQEPTR                                    0032
*              FSQEPTR=FSQENEXT+HEDBPTR;/* POINT TO NEXT FSQE        */
         ALR   @15,HEDBPTR                                         0033
         LR    FSQEPTR,@15                                         0033
*              /* DOES THE NEW COMBINATION ELEMENT ADJOIN NEXT FSQE  */
*              IF PREVFSQE+PREVFSQE->FSQELNTH=FSQEPTR              0034
*                THEN                   /* NEW SPACE ALSO CONTIGUOUS
*                                          TO NEXT FSQE              */
         LH    @02,FSQELNTH(,PREVFSQE)                             0034
         LR    @15,PREVFSQE                                        0034
         ALR   @15,@02                                             0034
         CR    @15,FSQEPTR                                         0034
         BNE   @RF00034                                            0034
*                  DO;                                             0035
*                  /* COMBINE LENGTH OF SPACLNTH WITH FSQE LENGTH    */
*                  PREVFSQE->FSQELNTH=FSQELNTH+PREVFSQE->FSQELNTH; 0036
         AH    @02,FSQELNTH(,FSQEPTR)                              0036
         STH   @02,FSQELNTH(,PREVFSQE)                             0036
*                  /* UPDATE PREVIOUS FSQE                           */
*                  PREVFSQE->FSQENEXT=FSQENEXT;                    0037
         LH    @02,FSQENEXT(,FSQEPTR)                              0037
         STH   @02,FSQENEXT(,PREVFSQE)                             0037
*                  UADSFSQE=0;          /* CLEAR OLD FSQE            */
         ST    @03,UADSFSQE(,FSQEPTR)                              0038
*                  END;                                            0039
*              GO TO CLEARSP;           /* GO TO CLEAR THE SPACE     */
         B     CLEARSP                                             0040
*              END;                                                0041
*          /* DOES SPACE-TO-BE-FREED LIE ON LOW SIDE OF THIS FSQE ?  */
*          IF UPPERLIM=FSQEPTR                                     0042
*            THEN                       /* YES - OUTER LIMIT OF SPACE
*                                          COINCIDES WITH THIS FSQE  */
@RF00026 CR    UPPERLIM,FSQEPTR                                    0042
         BNE   @RF00042                                            0042
*              DO;                                                 0043
*              /* CTL. PASSED HERE WHEN SPACE-TO-BE-FREED IS       0044
*                 CONTIGUOUS ON LOW SIDE OF CURRENT FSQE             */
*              /* NEW ELEMENT LENGTH = SUM OF OLD+NEW                */
*              SPACEPTR->FSQELNTH=FSQELNTH+SPACLNTH;               0044
         LH    @15,FSQELNTH(,FSQEPTR)                              0044
         AH    @15,SPACLNTH(,SPACPTR)                              0044
         STH   @15,FSQELNTH(,SPACEPTR)                             0044
*              /* NEW ELEMENT LINKED FROM OLD                        */
*              SPACEPTR->FSQENEXT=FSQENEXT;                        0045
         LH    @15,FSQENEXT(,FSQEPTR)                              0045
         STH   @15,FSQENEXT(,SPACEPTR)                             0045
*              /* UPDATE PREVIOUS FSQE                               */
*              PREVFSQE->FSQENEXT=SPACEPTR-HEDBPTR;                0046
         LR    @15,SPACEPTR                                        0046
         SLR   @15,HEDBPTR                                         0046
         STH   @15,FSQENEXT(,PREVFSQE)                             0046
*              UADSFSQE=0;              /* CLEAR OLD FSQE            */
         SLR   @08,@08                                             0047
         ST    @08,UADSFSQE(,FSQEPTR)                              0047
*              GO TO CLEARSP;           /* GO TO CLEAR THE SPACE     */
         B     CLEARSP                                             0048
*              END;                                                0049
*          PREVFSQE=FSQEPTR;            /* SAVE PTR TO PREVIOUS FSQE */
@RF00042 LR    PREVFSQE,FSQEPTR                                    0050
*          FSQEPTR=FSQENEXT+HEDBPTR;    /* FSQENEXT IS RELATIVE TO EACH
*                                          MEMBER BLOCK HDR          */
         LR    @03,HEDBPTR                                         0051
         AH    @03,FSQENEXT(,FSQEPTR)                              0051
         LR    FSQEPTR,@03                                         0051
*          GOTO SCANFSQE;               /* CONTINUE SCAN             */
         B     SCANFSQE                                            0052
*BLDFSQ:   /* CTL. PASSED OR DROPPED HERE WHEN SPACE-TO-BE-FREED   0053
*             IS NOT CONTIGUOUS TO ANY OTHER FSQE                    */
*          SPACEPTR->FSQELNTH=SPACLNTH; /* ESTABLISH NEW LENGTH      */
BLDFSQ   LH    @08,SPACLNTH(,SPACPTR)                              0053
         STH   @08,FSQELNTH(,SPACEPTR)                             0053
*          /* PICK UP LINKAGE OFFSET FROM OLD ELEMENT                */
*          SPACEPTR->FSQENEXT=FSQENEXT;                            0054
         LH    @08,FSQENEXT(,FSQEPTR)                              0054
         STH   @08,FSQENEXT(,SPACEPTR)                             0054
*          FSQENEXT=SPACEPTR-HEDBPTR;   /* UPDATE OLD ELEMENT        */
         LR    @08,SPACEPTR                                        0055
         SLR   @08,HEDBPTR                                         0055
         STH   @08,FSQENEXT(,FSQEPTR)                              0055
*CLEARSP:  /* CTL. PASSED OR DROPPED HERE TO CLEAR THE FREED SPACE 0056
*             AND RSET HEADER FLAG FOR USABLE SPACE                  */
*          RFY (R0,R1,R14,R15) RSTD;    /* RESTRICT WORK REGISTERS   */
CLEARSP  DS    0H                                                  0057
*          R0=SPACEPTR+4;               /* POINT TO SPACE TO CLEAR   */
         LA    @05,4                                               0057
         LR    R0,SPACEPTR                                         0057
         ALR   R0,@05                                              0057
*          R1=SPACLNTH-4;               /* GET LENGTH OF SPACE       */
         LCR   @05,@05                                             0058
         AH    @05,SPACLNTH(,SPACPTR)                              0058
         LR    R1,@05                                              0058
*          R15=0;                       /* CLEAR TO BINARY ZEROS     */
         SLR   R15,R15                                             0059
*          GEN (MVCL   R0,R14)          /* CLEAR FREED SPACE         */
*            REFS(R0,R1,R14,R15);                                  0060
         MVCL   R0,R14
*          RFY (R0,R1,R14,R15) UNRSTD;  /* RELEASE WORK REGISTERS    */
*          PREVFSQE=HEDBPTR;            /* INITIALIZE WORKING PTR  0062
*                                          TO HEAD OF Q              */
         LR    PREVFSQE,HEDBPTR                                    0062
*          FSQEPTR=PREVFSQE->FSQENEXT+HEDBPTR;/* FSQENEXT IS RELATIVE
*                                          TO EACH MEMBER BLOCK HDR  */
         LR    FSQEPTR,HEDBPTR                                     0063
         AH    FSQEPTR,FSQENEXT(,PREVFSQE)                         0063
*          DO WHILE FSQENEXT^=0;        /* SCAN FSQE CHAIN           */
         B     @DE00064                                            0064
@DL00064 DS    0H                                                  0065
*            /* SEE IF CHAIN SHOULD BE REORDERED                     */
*            IF FSQENEXT+HEDBPTR<FSQEPTR                           0065
*              THEN                     /* THIS FSQE IS OUT OF SEQ.  */
         LH    @10,FSQENEXT(,FSQEPTR)                              0065
         LR    @09,HEDBPTR                                         0065
         ALR   @09,@10                                             0065
         CR    @09,FSQEPTR                                         0065
         BNL   @RF00065                                            0065
*                DO;                                               0066
*                FSQESAVE=FSQEPTR;      /* SAVE PTR TO THIS FSQE     */
         LR    FSQESAVE,FSQEPTR                                    0067
*                PREVFSQE->FSQENEXT=FSQENEXT;/* ELIMINATE OLD FSQE   */
         STH   @10,FSQENEXT(,PREVFSQE)                             0068
*                FSQEPTR=PREVFSQE->FSQENEXT+HEDBPTR;               0069
         ALR   @10,HEDBPTR                                         0069
         LR    FSQEPTR,@10                                         0069
*                FSQESAVE->FSQENEXT=FSQENEXT;                      0070
         LH    @10,FSQENEXT(,FSQEPTR)                              0070
         STH   @10,FSQENEXT(,FSQESAVE)                             0070
*                FSQENEXT=FSQESAVE-HEDBPTR;/* RECHAIN FSQE POINTERS  */
         LR    @10,FSQESAVE                                        0071
         SLR   @10,HEDBPTR                                         0071
         STH   @10,FSQENEXT(,FSQEPTR)                              0071
*                END;                                              0072
*            /* NOW CHECK TO SEE IF FSQE'S ARE ADJACENT              */
*            IF PREVFSQE+PREVFSQE->FSQELNTH=FSQEPTR/* FSQES ADJACENT?*/
*              THEN                     /* YES,                      */
@RF00065 LH    @10,FSQELNTH(,PREVFSQE)                             0073
         LR    @09,PREVFSQE                                        0073
         ALR   @09,@10                                             0073
         CR    @09,FSQEPTR                                         0073
         BNE   @RF00073                                            0073
*                DO;                    /* MERGE FSQES               */
*                PREVFSQE->FSQELNTH=PREVFSQE->FSQELNTH+FSQELNTH;   0075
         AH    @10,FSQELNTH(,FSQEPTR)                              0075
         STH   @10,FSQELNTH(,PREVFSQE)                             0075
*                PREVFSQE->FSQENEXT=FSQENEXT; /* RE-ORDER CHAIN      */
         LH    @10,FSQENEXT(,FSQEPTR)                              0076
         STH   @10,FSQENEXT(,PREVFSQE)                             0076
*                UADSFSQE=0;            /* CLEAR OLD FSQE            */
         SLR   @09,@09                                             0077
         ST    @09,UADSFSQE(,FSQEPTR)                              0077
*                FSQEPTR=PREVFSQE->FSQENEXT+HEDBPTR;/* UPDATE POINTER*/
         ALR   @10,HEDBPTR                                         0078
         LR    FSQEPTR,@10                                         0078
*                END;                                              0079
*              PREVFSQE=FSQEPTR;        /* SAVE PTR TO PREVIOUS FSQE */
@RF00073 LR    PREVFSQE,FSQEPTR                                    0080
*              FSQEPTR=FSQENEXT+HEDBPTR;/* FSQENEXT IS RELATIVE TO EACH
*                                          MEMBER BLOCK HDR          */
         LR    @10,HEDBPTR                                         0081
         AH    @10,FSQENEXT(,FSQEPTR)                              0081
         LR    FSQEPTR,@10                                         0081
*              END;                                                0082
@DE00064 LH    @10,FSQENEXT(,FSQEPTR)                              0082
         LTR   @10,@10                                             0082
         BNZ   @DL00064                                            0082
*          UADSNUSP='0'B;               /* TURN OFF 'NO USABLE SP' SW*/
         NI    UADSNUSP(HEDBPTR),B'01111111'                       0083
*          RETURN CODE(0);              /* SIGNAL SUCCESS TO CALLER  */
         L     @13,4(,@13)                                         0084
         L     @00,@SIZDATD                                        0084
         LR    @01,@11                                             0084
         FREEMAIN R,LV=(0),A=(1)
         SLR   @15,@15                                             0084
         L     @14,12(,@13)                                        0084
         LM    @00,@12,20(@13)                                     0084
         BR    @14                                                 0084
*          END IKJEFA54                                            0085
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJEFUAD)                                        *
*;                                                                 0085
@DATA    DS    0H
@CH00042 DC    H'16'
@CH00102 DC    H'64'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
IKJEFA54 CSECT
         DS    0F
@CF00089 DC    F'4'
@DATD    DSECT
         DS    0D
IKJEFA54 CSECT
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
IKJEFA54 CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKJEFA54 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
UPPERLIM EQU   @02
SPACEPTR EQU   @09
FSQESAVE EQU   @02
PREVFSQE EQU   @08
SPACPTR  EQU   @10
FSQEPTR  EQU   @06
HEDBPTR  EQU   @07
R0       EQU   @00
R1       EQU   @01
R14      EQU   @14
R15      EQU   @15
DHED     EQU   0
UADSMHDR EQU   DHED
UADSBLNG EQU   UADSMHDR
UADSBN01 EQU   UADSMHDR+12
UADSNUSP EQU   UADSBN01+1
UADSEXPF EQU   UADSBN01+1
UADSATTR EQU   DHED+16
UADSPERP EQU   DHED+28
UADSFSQE EQU   0
FSQELNTH EQU   UADSFSQE
FSQENEXT EQU   UADSFSQE+2
SPACPARM EQU   0
SPACMPTR EQU   SPACPARM
SPACLNTH EQU   SPACPARM+6
SPACOFST EQU   SPACPARM+8
FRSPLBLO EQU   SPACLNTH+1
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
SPACMCNT EQU   SPACPARM+4
@NM00004 EQU   DHED+40
UADSDEST EQU   DHED+32
UADSPWD1 EQU   DHED+24
UADSUPTP EQU   DHED+20
UADSINST EQU   DHED+18
@NM00003 EQU   UADSATTR
USATR03  EQU   UADSATTR
USATR02  EQU   UADSATTR
USATR01  EQU   UADSATTR
USATR00  EQU   UADSATTR
UADSMAXC EQU   UADSMHDR+14
@NM00002 EQU   UADSBN01+1
@NM00001 EQU   UADSBN01
UADSUSER EQU   UADSMHDR+4
UADSFSQP EQU   UADSMHDR+2
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00024 EQU   BLDFSQ
@RT00030 EQU   CLEARSP
@RF00034 EQU   CLEARSP
@ENDDATA EQU   *
         END   IKJEFA54
