         TITLE 'IKJEFE15 - WHEN MESSAGE PROCESSOR MODULE'
*        GEN( TITLE 'IKJEFE15 - WHEN MESSAGE PROCESSOR MODULE');
          TITLE 'IKJEFE15 - WHEN MESSAGE PROCESSOR MODULE'
* /********************************************************************
* /*                                                                  *
* /* WHEN COMMAND MESSAGE PROCESSOR MODULE (IKJEFE15)                 *
* /*                                                                  *
* /********************************************************************
* /*                                                                  *
* /* STATUS:  CHANGE LEVEL 000                                        *
* /*                                                                  *
* /* FUNCTION:                                                        *
* /*  ISSUE DIAGNOSTICS TO THE USER VIA THE PUTLINE SERVICE ROUTINE.  *
* /*  AN INDEX TO THE CORRECT FIRST LEVEL MESSAGE IS PASSED TO THIS   *
* /*  ROUTINE FROM IKJEFE11 IN THE 'WHMSG' FIELD OF THE PROCESSOR     *
* /*  WORK AREA. THE SECOND LEVEL MESSAGE OFFSET IS PASSED IN THE     *
* /*  'WHMSG2' FIELD OF THE PROCESSOR WORK AREA.  THE COMMAND NAME,   *
* /*  WHICH IS PASSED IN 'WHCMD' FIELD OF THE PROCESSOR WORK AREA,    *
* /*  IS INSERTED IN THE BEGINNING OF EVERY FIRST LEVEL MESSAGE.      *
* /*  THE RETURN CODE WHICH IS PASSED IN THE 'WHRCODE' FIELD OF THE   *
* /*  PROCESSOR WORK AREA IS INSERTED IN THE END OF EVERY SECOND      *
* /*  LEVEL MESSAGE.                                                  *
* /*                                                                  *
* /* ENTRY POINTS:                                                    *
* /*  IKJEFE15                                                        *
* /*                                                                  *
* /* INPUT:                                                           *
* /*  R1 POINTS TO THE PROCESSOR WORKAREA (MAPPED BY IKJWHEN)         *
* /*  R13 POINTS TO A REGISTER SAVE AREA                              *
* /*  R14 CONTAINS THE RETURN ADDRESS                                 *
* /*                                                                  *
* /* OUTPUT:                                                          *
* /*  NONE                                                            *
* /*                                                                  *
* /* EXTERNAL REFERENCES:                                             *
* /*  GETMAIN                                                         *
* /*  FREEMAIN                                                        *
* /*  PUTLINE                                                         *
* /*                                                                  *
* /* EXITS - NORMAL:                                                  *
* /*  RETURN                                                          *
* /*                                                                  *
* /* EXITS - ERROR:                                                   *
* /*  RETURN                                                          *
* /*                                                                  *
* /* TABLES/WORKAREAS:                                                *
* /*  IKJWHEN    INTERNAL WORK AREA                                   *
* /*  IKJIOPL    PUTLINE PARAMETER LIST                               *
* /*  IKJPTPB    PUTLINE PARAMETER BLOCK                              *
* /*                                                                  *
* /* ATTRIBUTES:                                                      *
* /*  REENTRANT                                                       *
* /*  REFRESHABLE                                                     *
* /*                                                                  *
* /* NOTES:                                                           *
* /*  '+' FOLLOWING MESSAGE INDICATES A SECOND LEVEL MESSAGE IS       *
* /*  AVAILABLE FOR THIS FIRST LEVEL MESSAGE.                         *
* /*  REG  9 IS RESERVED FOR ADDRESSIBILITY TO THE MESSAGE CSECT.     *
* /*  CHARACTER CODE DEPENDENCY - EBCDIC CHARACTER SET USED IN        *
* /*  ASSEMBLING, MODULE MUST BE MODIFIED IF A DIFFERENT CHARACTER    *
* /*  SET IS TO BE USED DURING EXECUTION.                             *
* /*                                                                  *
* /********************************************************************
*
* /********************************************************************
**/*IKJEFE15: CHART DETAIL OF WHEN MESSAGE MODULE*/
**/* HEADER
**/* DETAIL FLOW OF WHEN/END MESSAGE MODULE - 7/6/70*/
**/*IKJEFE15: E ENTRY FROM IKJEFE11*/
* /********************************************************************
*
* IKJEFE15: PROC(WHENPARM) OPTIONS(REENTRANT);
         LCLA  &T,&SPN                                            0002
.@001    ANOP                                                     0002
IKJEFE15 CSECT ,                                                  0002
         STM   @E,@C,12(@D)                                       0002
         BALR  @B,0                                               0002
@PSTART  DS    0H                                                 0002
         USING @PSTART+00000,@B                                   0002
         L     @0,@SIZ001                                         0002
         GETMAIN  R,LV=(0)                                        0002
         LR    @C,@1                                              0002
         USING @DATD+00000,@C                                     0002
         LM    @0,@1,20(@D)                                       0002
         XC    @TEMPS(@L),@TEMPS                                  0002
         ST    @D,@SAV001+4                                       0002
         LA    @F,@SAV001                                         0002
         ST    @F,8(0,@D)                                         0002
         LR    @D,@F                                              0002
*      GENERATE;
&SPN    SETA  1
         B     PASSLAB                            BYPASS DUMP LABEL
         DC    C'IKJEFE15  004071'
PASSLAB  EQU   *
         DS    0H
*       RESTRICT (9);                 /* REG 9 POINTS TO MESSAGE CSECT*
*
*         /************************************************************
*         /* REGISTER DECLARATIONS                                    *
*         /************************************************************
*         DCL   R0  REG(0)  PTR(31);
*         DCL   R1  REG(1)  PTR(31);
*         DCL   R2  REG(2)  PTR(31);
*         DCL   R3  REG(3)  PTR(31);
*         DCL   R4  REG(4)  PTR(31);
*         DCL   R5  REG(5)  PTR(31);
*         DCL   R6  REG(6)  PTR(31);
*         DCL   R7  REG(7)  PTR(31);
*         DCL   R8  REG(8)  PTR(31);
*         DCL   R9  REG(9)  PTR(31);
*         DCL   R10 REG(10) PTR(31);
*         DCL   R11 REG(11) PTR(31);
*         DCL   R12 REG(12) PTR(31);
*         DCL   R13 REG(13) PTR(31);
*         DCL   R14 REG(14) PTR(31);
*         DCL   R15 REG(15) PTR(31);
*         DCL   PTPBPTR PTR(31);        /* PUTLINE PARAMETER BLOCK    *
*         DCL   IOPLPTR PTR(31);        /* SERV RTN GENERAL PARM LIST *
*         DCL   WHENPARM FIXED(15);     /* DUMMY TO ACCESS WORK AREA  *
*         DCL   WAPTR PTR(31);          /* PTR TO WHEN WORK AREA      *
*         DCL   1 WORK CHAR(16) BDY(DWORD),
*                 2 WORK1 PTR(31),      /* SCRATCH PAD AREA           *
*                 2 WORK2 PTR(31),
*                 2 WORK3 PTR(31),
*                 2 WORK4 PTR(31);      /* CONTAINS RC FOR MESSAGE    *
*         DCL  ALPHA CHAR(16) INIT('0123456789ABCDEF');
*         DCL   PARMEND PTR(32) INIT('FF000000'X);
*                                       /* INDIC END OF PARM          *
*
* /********************************************************************
* /* THE FOLLOWING EQUATES ARE USED FOR CONVERTING THE SERVICE ROUTINE*
* /* RETURN CODE TO PRINTABLE FORMAT FOR THE SECOND LEVEL MESSAGE     *
* /********************************************************************
*         GENERATE;
RET3     EQU   3                       MAXIMUM LENGTH OF RETURN CODE
RET4     EQU   4                       LENGTH OF UNPACKED RET COD VALUE
OFF3     EQU   3                       OFFSET TO SIGN VALUE OF RET CODE
         DS    0H
* /********************************************************************
* /* THE WHEN WORK AREA IS USED ONLY BY THE WHEN COMMAND. IT CONTAINS *
* /* A REGISTER SAVE AREA AND OTHER MISCELLANEOUS INFORMATION USED BY *
* /* A WHEN PROCESSORS AND MESSAGE MODULE                             *
* /********************************************************************
*         DCL  1 IKJWHEN  BASED(WAPTR),
*                2 WHPL       CHAR(28), /* GENERAL PARM LIST          *
*                2 WHPBLOCK   CHAR(20), /* GENERAL PARM BLOCK         *
*                2 WHPARANS   PTR(31),  /* PTR TO PARSE DESCRIP LIST  *
*                2 WHATTECB   CHAR(4),  /* SERV RTN ATTN RTN ECB      *
*                2 WHMSG      PTR(16),  /* MESSAGE OFFSETS            *
*                  3 WHMSG1    PTR(8),  /* OFFSET FOR MESSAGE MODULE  *
*                  3 WHMSG2    PTR(8),  /* SECONDARY MESSAGE INDEX    *
*                2 WHSWI       BIT(8),  /* STATUS BYTE                *
*                  3 WHEND     BIT(1),  /* END COMMAND IN CONTROL     *
*                  3 WHRET     BIT(1),  /* SET TMP RET CODE TO ERROR  *
*                2 WHCHAR     CHAR(1),  /* FIRST CHARACTER OF NEXT    *
*                                       /* COMMAND IN CASE DELIMETER  *
*                                       /* WAS OMMITTED               *
*                2 WHENWAS    PTR(31),  /* NOT USED                   *
*                2 WHRCODE    PTR(31),  /* SERV RTN RETURN CODE       *
*                2 WHCOMM     PTR(31),  /* POINTER TO COMMAND TO BE   *
*                                       /* ADDED TO INPUT STACK       *
*                2 WHCMD      CHAR(8),  /*NAME OF COMMAND FOR         *
*                                       /* MESSAGE MODULE             *
*                2 WHGETM     PTR(31),  /* GETMAIN SIZE AND SUBPOOL   *
*                  3 WHSUBP    PTR(8),  /* SUBPOOL                    *
*                  3 WHFILL    PTR(8),  /* FILLER                     *
*                  3 WHLEN     PTR(15), /* LENGTH                     *
*                2 WHWASIZ    PTR(31);  /* WORK AREA SP AND SIZE      *
** DECLARE
**   1 PTPB     BASED(PTPBPTR),
** /* *************************************************************** *
** /* THE PUTLINE PARAMETER BLOCK (PTPB) IS POINTED TO BY THE PARAM.  *
** /* LIST PASSED TO PUTLINE.  IT IS USED TO RETURN PERTINENT INFO.   *
** /* AS WELL AS CONTROL PUTLINE FUNCTIONS                            *
** /* *************************************************************** *
**
**
**
**
**
**
**
**
**
**
**
**    2 *        CHAR(4)  BDY(WORD),
**                                    /* INTERNAL PUTLINE USAGE       *
**    2 PTPBOPUT  PTR(31),            /* ADDRESS OF OUTPUT LINE
*                                        DESCRIPTOR OR DATA LINE      *
**    2 PTPBFLN  PTR(31);             /* PTR TO FORMATTED LINE
**                                       RETURNED WHEN OUTPUT=
**                                       ADDR,FORMAT) IS SPECIFIED    *
**
** DECLARE
**   1 IOPL     BASED(IOPLPTR),
** /* *************************************************************** *
** /* THE I/O SERVICE ROUTINE PARAMETER LIST (IOPL) IS A LIST OF      *
** /* FULLWORD ADDRESSES PASSED BY THE INVOKER OF ANY I/O SERVICE     *
** /* ROUTINE TO THE APPROPRIATE SERVICE ROUTINE VIA REGISTER ONE.    *
** /* *************************************************************** *
**
**
**
**
**
**
**
**
**
**
**    2 IOPLUPT  PTR(31),             /* PTR TO UPT                   *
**    2 IOPLECT  PTR(31),             /* PTR TO ECT                   *
**    2 IOPLECB  PTR(31),             /* PTR TO USER'S ECB            *
**    2 IOPLIOPB PTR(31);    /* PTR TO THE I/O SERVICE RTN PARM BLOCK *
**
*         DCL   IKJEFE16 ENTRY;          /* ENTRY TO MESSAGES         *
*         DCL   MSGPTR PTR(31);          /* POINTER TO MSG            *
*         DCL   1 MSGP BASED(WORK1),     /* POINTER TO MSG POINTER    *
*                 2   *   PTR(31);
*         DCL   1 MSG BASED(MSGPTR)      /* FORMAT OF MESSAGE         *
*                   BDY(WORD),
*                2 LENDUMMY CHAR(4)      /* DUMMY HEADER FOR BSL      *
*                   BDY(HWORD),
*                      3 MSGLEN PTR(16), /* MESSAGE LENGTH FIELD      *
*                      3    *   PTR(16),
*                 2 MSGTEXT CHAR(80);   /* MESSAGE TEXT               *
*         DCL   1 MSG1DES BASED(WORK1), /* PUTLINE DESCRIP LIST       *
*                 2 SEGCHAIN PTR(31),   /* POINTER TO NEXT ELEMENT    *
*                 2 SEGNUM PTR(31),     /* NUMBER OF FIRST MSG SEGMNT *
*                 2 SEGPTR PTR(31),     /*POINTER TO FIRST MSG SEGMENT*
*                 2 MSGHDR CHAR(4);     /* MESSAGE HEADER (LL FIELD)  *
*         DCL  1 MSGBUF  CHAR(102)  BASED(SEGPTR)
*                 BDY(HWORD),           /* MESSAGE FORMAT             *
*               2 MSGBUFL PTR(16),      /* MESSAGE LENGTH FIELD       *
*               2 * CHAR(11),           /* FILLER TO GET AT CMD NAME  *
*               2 MSGCMD CHAR(1),       /* BLANK IN MESSAGE           *
*               2 MSGCMD2 CHAR(8),      /* COMMAND NAME IN MSG        *
*               2 MSGBTXT CHAR(80);     /* MESSAGE TEXT               *
*         DCL   1   MSG1DES2 BASED(R2), /* DUMMY DESCRIPTOR LIST      *
*                                       /* TO UPDATE INFO FOR 2ND     *
*                                       /* LEVEL MESSAGE              *
*                  2 MSG1NEXT PTR(31),  /* DUMMY FOR INSERTING PTR    *
*                                       /* TO NEXT MESSAGE            *
*                  2 * CHAR(12),        /* FILLER                     *
*                  2 MSG1ID CHAR(9);    /* MESSAGE IDENTIFIER         *
*         DCL   1 SAVBUFL CHAR(8) BDY(WORD),
*                 2 SAVGETL PTR(31),    /* AREA FOR BUFFER AND DES    *
*                      3 SAVSP PTR(8),  /* FOR FREEMAIN IN CASE OF I/O*
*                      3  *   CHAR(1),  /* FILLER                     *
*                      3 SAVLEN PTR(16), /* ERROR ON PUTLINE          *
*                 2 SAVAREA PTR(31);    /*LOCATION OF BUFFER AND DESCR*
*         DCL   RCPTR PTR(31);          /* POINTER TO SERVICE ROUTINE *
*                                       /* RETURN CODE IN SECOND LEVEL*
*                                       /* MESSAGE                    *
*         DCL   1 RC BASED(RCPTR) CHAR(4); /*DUMMY TO INSERT RC IN MSG*
*
* /********************************************************************
**/* P SAVE POINTER TO WORK AREA CONTAINING MESSAGE OFFSET*/
**/* P SET  UP POINTER TO MESSAGE CSECT*/
* /********************************************************************
*         R9=ADDR(IKJEFE16);            /* POINTER TO MESSAGE CSECT   *
         L     @8,@V1              ADDRESS OF IKJEFE16            0042
         LR    @9,@8                                              0042
*         WAPTR=R1;                     /* SET UP ADDRESSABILITY TO WA*
         ST    @1,WAPTR                                           0043
*
* /********************************************************************
**/* P SET UP ADDRESS TO PUTLINE PARAMETER BLOCK*/
* /********************************************************************
*         PTPBPTR=ADDR(WHPBLOCK);       /* SET UP ADDR TO PARM BLOCK  *
         L     @6,WAPTR                                           0044
         LA    @F,28(0,@6)                                        0044
         ST    @F,PTPBPTR                                         0044
*         IOPLPTR=ADDR(WHPL);           /* POINTER TO GENERAL PARM    *
         ST    @6,IOPLPTR                                         0045
*                                       /* LIST USED BY PUTLINE       *
*
* /********************************************************************
**/* P FIND CORRECT MESSAGE AND SAVE MESSAGE LENGTH FOR BUFFER*/
* /********************************************************************
*         WORK1=R9+WHMSG1;              /* ADDRESS OF MESSAGE LIST    *
         SR    @F,@F                                              0046
         IC    @F,56(0,@6)                                        0046
         AR    @F,@9                                              0046
         ST    @F,WORK                                            0046
*         MSGPTR=MSGP;                  /* POINTER TO ACTURAL MESSAGE *
         LR    @7,@F                                              0047
         MVC   MSGPTR(4),0(@7)                                    0047
*
* /********************************************************************
**/* P ADD SOURCE DESCRIPTOR LENGTH TO BUFFER LENGTH*/
* /********************************************************************
*         SAVGETL=SAVGETL && SAVGETL;   /* ZERO OUT AREA FOR SAVING   *
         XC    SAVBUFL(4),SAVBUFL                                 0048
*                                       /* MESSAGE SIZE AND PTR TO MSG*
*         SAVLEN=MSGLEN+12;             /*MESSAGE LENGTH + DESCRIPTOR *
         LA    @F,12                                              0049
         L     @4,MSGPTR                                          0049
         MVC   @TEMP2+2(2),0(@4)                                  0049
         A     @F,@TEMP2                                          0049
         STH   @F,SAVBUFL+2                                       0049
*         SAVSP=1;                      /* SUBPOOL 1 FOR PUTLINE      *
         MVI   SAVBUFL,1                                          0050
*         R0=SAVGETL;                   /* INIT R0 FOR GETMAIN        *
         L     @0,SAVBUFL                                         0051
*
* /********************************************************************
**/* P GET BUFFER AND DESCRIPTOR*/
* /********************************************************************
*       GENERATE (GETMAIN R,LV=(0));
         GETMAIN R,LV=(0)
         DS    0H
*         WORK1=R1;                     /* SAVE PTR FOR BASED BUFFER  *
         ST    @1,WORK                                            0053
*         SAVAREA=R1;                   /* SAVE AREA PTR IN CASE      *
         ST    @1,SAVBUFL+4                                       0054
*                                       /* THERE IS A PUTLINE ERROR   *
*       RESTRICT (2,3,4);
*         R2=R1;                        /* SAVE BUFFER POINTER        *
         LR    @2,@1                                              0056
*
* /********************************************************************
**/* P INIT DESCRIPTOR TO POINT TO MESSAGE AND MOVE MESSAGE TO BUFFER*/
* /********************************************************************
*         SEGCHAIN=PARMEND;             /* INSERT END OF LIST INDIC   *
         L     @5,WORK                                            0057
         MVC   0(4,@5),PARMEND                                    0057
*         SEGNUM=1;                     /* INDICATE FIRST SEGMENT NUM *
         LA    @F,1                                               0058
         ST    @F,4(0,@5)                                         0058
*         SEGPTR=ADDR(MSGHDR);          /* POINT TO MESSAGE           *
         LA    @F,12(0,@5)                                        0059
         ST    @F,8(0,@5)                                         0059
*         MSGBUF(1:MSGLEN)=MSGPTR->MSG; /* PUT MSG IN SP 1            *
         L     @7,MSGPTR                                          0060
         LR    @E,@7                                              0060
         MVC   @TEMP2+2(2),0(@7)                                  0060
         L     @8,@TEMP2                                          0060
         BCTR  @8,0                                               0060
         L     @6,WORK                                            0060
         L     @6,8(0,@6)          MSG1DES                        0060
         LR    @A,@6                                              0060
         EX    @8,@MVC                                            0060
*         MSGCMD2=WHCMD;                /* INSERT COMMAND NAME IN MSG *
         L     @8,WAPTR                                           0061
         MVC   14(8,@6),72(@8)                                    0061
*         R3=PTPBPTR;                   /* PARM BLOCK PTR             *
         L     @3,PTPBPTR                                         0062
*         PTPB=PTPB && PTPB;            /* CLEAR PARAMETER BLOCK      *
         L     @5,PTPBPTR                                         0063
         XC    0(12,@5),0(@5)                                     0063
*
* /********************************************************************
**/* D (YES,,NO,PUTMSG) IS THERE A SECOND LEVEL MESSAGE ? */
* /********************************************************************
*         IF    WHMSG2=0                /* TEST FOR SECOND LEVEL MSG  *
*               THEN
         CLI   57(@8),0                                           0064
*                    GOTO PUTMSG;       /* BRANCH IF NO SECOND LEVEL  *
         BC    08,PUTMSG                                          0065
*         IF WHMSG1 =16                  /* DID PREV CP ABEND         *
*           THEN
         CLI   56(@8),16                                          0066
         BC    07,@9FF                                            0066
*             DO;
*               WORK1 = WHRCODE;        /*SET WORK4 AREA TO ABEND CODE*
         MVC   WORK(4),64(@8)                                     0068
*             GENERATE;
               UNPK  WORK3(5),WORK1(5)  INSERT ZONES FOR OU
               TR  WORK3(4),ALPHA-240
         DS    0H
*               GO TO SEND;             /* NO NEED TO CVT TO DEC      *
         BC    15,SEND                                            0070
*             END;
*
* /********************************************************************
**/* P CONVERT ABEND OR RETURN CODE TO PRINTABLE CHARACTERS*/
* /********************************************************************
*         R4=WHRCODE;                   /* GET SERV RTN RETURN CODE   *
@9FF     L     @5,WAPTR                                           0072
         L     @4,64(0,@5)                                        0072
*         WORK=WORK && WORK;            /* CLEAR CONVERT WORK AREA    *
         XC    WORK(16),WORK                                      0073
*       GENERATE;
         CVD   R4,WORK1                CONVERT RETURN CODE TO DECIMAL
         UNPK  WORK3(RET4),WORK2+1(RET3)  INSERT ZONES FOR OUTPUT
         OI    WORK3+OFF3,C'0'         INSERT NUMERIC ZONE FOR SIGN
         DS    0H
*
* /********************************************************************
**/*%A: P FIND CORRECT SECOND LEVEL MESSAGE AND MESSAGE LENGTH*/
* /********************************************************************
* SEND:  ;
*         WORK1=R9+WHMSG2;              /* PTR TO MSG ADDRESS TABLE   *
SEND     L     @5,WAPTR                                           0076
         SR    @F,@F                                              0076
         IC    @F,57(0,@5)                                        0076
         AR    @F,@9                                              0076
         ST    @F,WORK                                            0076
*         MSGPTR=MSGP;                  /* POINT TO ACTUAL MESSAGE    *
         LR    @8,@F                                              0077
         MVC   MSGPTR(4),0(@8)                                    0077
*
* /********************************************************************
**/* P GET A SECOND BUFFER AND DESCRIPTOR FOR SECOND LEVEL MESSAGE*/
* /********************************************************************
*         WHLEN=MSGLEN+12+9+4;           /* MESSAGE LENGTH INCLUDES:  *
         LA    @F,4                                               0078
         AH    @F,@D1                                             0078
         AH    @F,@D2                                             0078
         L     @6,MSGPTR                                          0078
         MVC   @TEMP2+2(2),0(@6)                                  0078
         A     @F,@TEMP2                                          0078
         STH   @F,82(0,@5)                                        0078
*                                       /* TEXT-RETURN CODE-MSG ID    *
*                                       /* AND MESSAGE DESCRIPTOR     *
*         WHSUBP=1;                     /* USE SUBPOOL 1 FOR PUTLINE  *
         MVI   80(@5),1                                           0079
*         R0=WHGETM;                    /*INIT FOR GETMAIN            *
         L     @0,80(0,@5)                                        0080
*       GENERATE (GETMAIN R,LV=(0));
         GETMAIN R,LV=(0)
         DS    0H
*
* /********************************************************************
**/* P SET UP DESCRIPTOR AND MOVE SECOND LEVEL MESSAGE TO BUFFER*/
* /********************************************************************
*         MSG1NEXT=R1;                  /* SAVE POINTER TO SECOND LIST*
         ST    @1,0(0,@2)                                         0082
*         WORK1=R1;                     /* SAVE PTR TO MESSAGE BUFFER *
         ST    @1,WORK                                            0083
*         SEGCHAIN=PARMEND;             /* INDICATE END OF LIST       *
         L     @7,WORK                                            0084
         MVC   0(4,@7),PARMEND                                    0084
*         SEGNUM=1;                     /* INDICATE FIRST SEGMENT     *
         LA    @F,1                                               0085
         ST    @F,4(0,@7)                                         0085
*         SEGPTR=ADDR(MSGHDR);          /* POINTER TO MESSAGE         *
         LA    @F,12(0,@7)                                        0086
         ST    @F,8(0,@7)                                         0086
*         MSGBUF(1:4)=MSGPTR->LENDUMMY(1:4); /* INSERT MSG LENGTH     *
         L     @8,WORK                                            0087
         L     @8,8(0,@8)          MSG1DES                        0087
         MVC   0(4,@8),0(@6)                                      0087
*         MSGBUFL=MSGBUFL+9+4;          /* INCLUDE MESSAGE ID         *
         LA    @F,4                                               0088
         AH    @F,@D1                                             0088
         MVC   @TEMP2+2(2),0(@8)                                  0088
         A     @F,@TEMP2                                          0088
         STH   @F,0(0,@8)                                         0088
*         MSGBUF(5:13)=R2->MSG1ID(1:9); /* INSERT MESSAGE ID OF FIRST *
         MVC   4(9,@8),16(@2)                                     0089
*                                       /* LEVEL MESSAGE              *
*         MSGCMD(1:MSGLEN-4)=MSGPTR->MSGTEXT; /* PUT MSG INTO SP 1    *
         LA    @E,4(0,@6)                                         0090
         LH    @5,@D3                                             0090
         MVC   @TEMP2+2(2),0(@6)                                  0090
         A     @5,@TEMP2                                          0090
         BCTR  @5,0                                               0090
         LA    @A,13(0,@8)                                        0090
         EX    @5,@MVC                                            0090
*         RCPTR=SEGPTR+MSGLEN+9;        /* POINT TO RETURN CODE FIELD *
         LA    @F,9                                               0091
         MVC   @TEMP2+2(2),0(@6)                                  0091
         A     @F,@TEMP2                                          0091
         A     @F,8(0,@7)                                         0091
         ST    @F,RCPTR                                           0091
*         RC=WORK3;                     /* INSERT RET CODE IN MESSAGE *
         LR    @5,@F                                              0092
         MVC   0(4,@5),WORK+8                                     0092
*
* /********************************************************************
**/*PUTMSG: L  ISSUE MESSAGE TO USER*/
* /********************************************************************
* PUTMSG:  ;
*        R1=IOPLPTR;                    /* PARM LIST PTR              *
PUTMSG   L     @1,IOPLPTR                                         0094
*       GENERATE (PUTLINE PARM=(3),OUTPUT=((2),MULTLVL),MF=(E,(1)));
         PUTLINE PARM=(3),OUTPUT=((2),MULTLVL),MF=(E,(1))
         DS    0H
*         IF    R15=0                   /* CHECK FOR BAD PUTLINE      *
*               THEN
         LTR   @F,@F                                              0096
*                    GOTO DONE;         /* IF GOOD RETURN             *
         BC    08,DONE                                            0097
*         WHRET='1'B;                   /* IKJEFE11 WILL FLUSH STACK  *
         L     @5,WAPTR                                           0098
         OI    58(@5),B'01000000'                                 0098
*         R0=WHGETM;                    /* FREE MESSAGE BUFFERS       *
         L     @0,80(0,@5)                                        0099
*         R1=WORK1;
         L     @1,WORK                                            0100
*        GENERATE (FREEMAIN R,LV=(0),A=(1));
         FREEMAIN R,LV=(0),A=(1)
         DS    0H
*         R0=SAVGETL;
         L     @0,SAVBUFL                                         0102
*         R1=SAVAREA;
         L     @1,SAVBUFL+4                                       0103
*        GENERATE (FREEMAIN R,LV=(0),A=(1));
         FREEMAIN R,LV=(0),A=(1)
         DS    0H
*
* /********************************************************************
**/* R RETURN TO IKJEFE11*/
**/*IKJEFE15: END*/
* /********************************************************************
* DONE:  ;
*         RETURN;
         BC    15,@EL01                                           0106
*         END   IKJEFE15
* /* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.
* /*%INCLUDE SYSLIB  (IKJWHEN )
* /*%INCLUDE SYSLIB  (IKJPTPB )
* /*%INCLUDE SYSLIB  (IKJIOPL )
* ;
@EL01    L     @D,4(0,@D)                                         0107
         LR    @1,@C                                              0107
         L     @0,@SIZ001                                         0107
         FREEMAIN R,LV=(0),A=(1)                                  0107
         LM    @E,@C,12(@D)                                       0107
         BCR   15,@E                                              0107
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D1      DC    H'9'
@D2      DC    H'12'
@D3      DC    H'-4'
@MVC     MVC   0(1,@A),0(@E)
@V1      DC    V(IKJEFE16)
         DS    0F
@SIZ001  DC    AL1(&SPN)
         DC    AL3(@DATEND-@DATD)
         DS    0F
         DS    0D
@DATA    EQU   *
R0       EQU   00000000            FULLWORD POINTER REGISTER
R1       EQU   00000001            FULLWORD POINTER REGISTER
R2       EQU   00000002            FULLWORD POINTER REGISTER
R3       EQU   00000003            FULLWORD POINTER REGISTER
R4       EQU   00000004            FULLWORD POINTER REGISTER
R5       EQU   00000005            FULLWORD POINTER REGISTER
R6       EQU   00000006            FULLWORD POINTER REGISTER
R7       EQU   00000007            FULLWORD POINTER REGISTER
R8       EQU   00000008            FULLWORD POINTER REGISTER
R9       EQU   00000009            FULLWORD POINTER REGISTER
R10      EQU   00000010            FULLWORD POINTER REGISTER
R11      EQU   00000011            FULLWORD POINTER REGISTER
R12      EQU   00000012            FULLWORD POINTER REGISTER
R13      EQU   00000013            FULLWORD POINTER REGISTER
R14      EQU   00000014            FULLWORD POINTER REGISTER
R15      EQU   00000015            FULLWORD POINTER REGISTER
WHENPARM EQU   00000000            HALFWORD INTEGER
ALPHA    EQU   *                   16 BYTE(S)
         DC    C'0123456789ABCDEF'
PARMEND  EQU   *                   FULLWORD POINTER
         DC    XL4'FF000000'
IKJWHEN  EQU   00000000            88 BYTE(S) ON WORD
WHPL     EQU   IKJWHEN+00000000    28 BYTE(S)
WHPBLOCK EQU   IKJWHEN+00000028    20 BYTE(S)
WHPARANS EQU   IKJWHEN+00000048    FULLWORD POINTER
WHATTECB EQU   IKJWHEN+00000052    4 BYTE(S)
WHMSG    EQU   IKJWHEN+00000056    HALFWORD POINTER
WHMSG1   EQU   IKJWHEN+00000056    1  BYTE  POINTER
WHMSG2   EQU   IKJWHEN+00000057    1  BYTE  POINTER
WHSWI    EQU   IKJWHEN+00000058    8 BIT(S)
WHEND    EQU   IKJWHEN+00000058    1 BIT(S)
WHRET    EQU   IKJWHEN+00000058    1 BIT(S)
WHCHAR   EQU   IKJWHEN+00000059    1 BYTE(S)
WHENWAS  EQU   IKJWHEN+00000060    FULLWORD POINTER
WHRCODE  EQU   IKJWHEN+00000064    FULLWORD POINTER
WHCOMM   EQU   IKJWHEN+00000068    FULLWORD POINTER
WHCMD    EQU   IKJWHEN+00000072    8 BYTE(S)
WHGETM   EQU   IKJWHEN+00000080    FULLWORD POINTER
WHSUBP   EQU   IKJWHEN+00000080    1  BYTE  POINTER
WHFILL   EQU   IKJWHEN+00000081    1  BYTE  POINTER
WHLEN    EQU   IKJWHEN+00000082    HALFWORD POINTER
WHWASIZ  EQU   IKJWHEN+00000084    FULLWORD POINTER
PTPB     EQU   00000000            12 BYTE(S) ON WORD
A00000   EQU   PTPB+00000000       4 BYTE(S) ON WORD
PTPBOPUT EQU   PTPB+00000004       FULLWORD POINTER
PTPBFLN  EQU   PTPB+00000008       FULLWORD POINTER
IOPL     EQU   00000000            16 BYTE(S) ON WORD
IOPLUPT  EQU   IOPL+00000000       FULLWORD POINTER
IOPLECT  EQU   IOPL+00000004       FULLWORD POINTER
IOPLECB  EQU   IOPL+00000008       FULLWORD POINTER
IOPLIOPB EQU   IOPL+00000012       FULLWORD POINTER
MSGP     EQU   00000000            4 BYTE(S) ON WORD
A00001   EQU   MSGP+00000000       FULLWORD POINTER
MSG      EQU   00000000            84 BYTE(S) ON WORD
LENDUMMY EQU   MSG+00000000        4 BYTE(S) ON HWORD
MSGLEN   EQU   MSG+00000000        HALFWORD POINTER
A00002   EQU   MSG+00000002        HALFWORD POINTER
MSGTEXT  EQU   MSG+00000004        80 BYTE(S)
MSG1DES  EQU   00000000            16 BYTE(S) ON WORD
SEGCHAIN EQU   MSG1DES+00000000    FULLWORD POINTER
SEGNUM   EQU   MSG1DES+00000004    FULLWORD POINTER
SEGPTR   EQU   MSG1DES+00000008    FULLWORD POINTER
MSGHDR   EQU   MSG1DES+00000012    4 BYTE(S)
MSGBUF   EQU   00000000            102 BYTE(S) ON HWORD
MSGBUFL  EQU   MSGBUF+00000000     HALFWORD POINTER
A00003   EQU   MSGBUF+00000002     11 BYTE(S)
MSGCMD   EQU   MSGBUF+00000013     1 BYTE(S)
MSGCMD2  EQU   MSGBUF+00000014     8 BYTE(S)
MSGBTXT  EQU   MSGBUF+00000022     80 BYTE(S)
MSG1DES2 EQU   00000000            25 BYTE(S) ON WORD
MSG1NEXT EQU   MSG1DES2+00000000   FULLWORD POINTER
A00004   EQU   MSG1DES2+00000004   12 BYTE(S)
MSG1ID   EQU   MSG1DES2+00000016   9 BYTE(S)
RC       EQU   00000000            4 BYTE(S)
         ORG   @DATA
         DS    00000020C
@L       EQU   2
@DATD    DSECT
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD
PTPBPTR  EQU   @DATD+00000072      FULLWORD POINTER
IOPLPTR  EQU   @DATD+00000076      FULLWORD POINTER
WAPTR    EQU   @DATD+00000080      FULLWORD POINTER
WORK     EQU   @DATD+00000088      16 BYTE(S) ON DWORD
WORK1    EQU   WORK+00000000       FULLWORD POINTER
WORK2    EQU   WORK+00000004       FULLWORD POINTER
WORK3    EQU   WORK+00000008       FULLWORD POINTER
WORK4    EQU   WORK+00000012       FULLWORD POINTER
MSGPTR   EQU   @DATD+00000104      FULLWORD POINTER
SAVBUFL  EQU   @DATD+00000108      8 BYTE(S) ON WORD
SAVGETL  EQU   SAVBUFL+00000000    FULLWORD POINTER
SAVSP    EQU   SAVBUFL+00000000    1  BYTE  POINTER
A00005   EQU   SAVBUFL+00000001    1 BYTE(S)
SAVLEN   EQU   SAVBUFL+00000002    HALFWORD POINTER
SAVAREA  EQU   SAVBUFL+00000004    FULLWORD POINTER
RCPTR    EQU   @DATD+00000116      FULLWORD POINTER
         DS    00000120C
@TEMPS   DS    0F
@TEMP2   DC    F'0'
@DATEND  EQU   *
IKJEFE15 CSECT ,
DONE     EQU   @EL01
         END   IKJEFE15
