         TITLE 'IKJEFA32  --  ACCOUNT/DELETE EXCISOR ROUTINE           *
                        '
IKJEFA32 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKJEFA32  73.323'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @11,8(,@13)                                         0001
         LR    @13,@11                                             0001
*          COMPTR = R1;               /* SAVE POINTER TO COMAREA     */
         LR    COMPTR,R1                                           0029
*          RFY R1 RSTD;                                            0030
*          MSGNO = 17;                /* INIT MSGNO                  */
         MVC   MSGNO(2,COMPTR),@CH00217                            0031
*          RTNCODE = 0;               /* CLEAR RETURN CODE AREA      */
         SLR   @10,@10                                             0032
         LR    RTNCODE,@10                                         0032
*          LASTOP = 0;                /* CLEAR OFFSET BLOCK PTR      */
         LR    LASTOP,@10                                          0033
*          SPAZPB = SPAZPB&&SPAZPB;   /* CLEAR FREESPACE PARM BLOCK  */
         XC    SPAZPB(12),SPAZPB                                   0034
*          DPLBS = DPLB;              /* SAVE DELETE POINT LIST      */
         L     @10,DPLPTR(,COMPTR)                                 0035
         MVC   DPLBS(121),DPLB(@10)                                0035
*          /* IDENTIFY BUFFER                                        */
*          HEDBPTR = ACIOBUFR;        /* HEDBPTR TO START OF BUFFER  */
         L     @09,ACIOPTR(,COMPTR)                                0036
         SLR   HEDBPTR,HEDBPTR                                     0036
         ICM   HEDBPTR,7,ACIOBUFR(@09)                             0036
*          /* CHK TO SET GENERAL ASTERISK PROCESSING FLAG            */
*          IF DPCLSF1 = '1'B          /* CHK FOR PASSWORD = *        */
*           × DACLSF1 = '1'B          /*   OR ACCTNMBR = *           */
*            THEN                     /* YES,                        */
         TM    DPCLSF1(@10),B'10000000'                            0037
         BO    @RT00037                                            0037
         TM    DACLSF1(@10),B'10000000'                            0037
         BNO   @RF00037                                            0037
@RT00037 DS    0H                                                  0038
*              STRNOW = '1'B;         /* SET GENERAL ASTERISK FLAG   */
         OI    STRNOW,B'10000000'                                  0038
*            ELSE                     /* NO,                         */
*              STRNOW = '0'B;         /* RESET GENERAL ASTERISK FLAG */
         B     @RC00037                                            0039
@RF00037 NI    STRNOW,B'01111111'                                  0039
*          /*  VALIDATE PASSWORD SUPPORT FOR CURRENT USERID. CHECK IF
*          ASTERISK WAS ENTERED FOR PASSWORD LEVEL.  IF YES,       0040
*          PASSWORD SUPPORT IS NOT NEEDED SO GO TO CHECK FOR ACCOUNT
*          NUMBER SUPPORT. IF CURRENT USER MEMBER CONTAINS AN INITIAL
*          POINTER TO A PASSWORD DATA FIELD SET PASSWORD SUPPORT FLAG
*          IN DELETE CONTROL FLAGS AND GO TO CHECK FOR ACCOUNT NUMBER
*          SUPPORT.                                                  */
*          UADSNPTR = UADSPWD1+HEDBPTR;/* PTR TO 1ST PASSWORD        */
@RC00037 LR    UADSNPTR,HEDBPTR                                    0040
         AL    UADSNPTR,UADSPWD1(,HEDBPTR)                         0040
*          IF UADSNDAT ^= 0           /* CHK IF ANY PASSWD DATA PTR  */
*            THEN                     /* YES,                        */
         L     @10,UADSNDAT(,UADSNPTR)                             0041
         LTR   @10,@10                                             0041
         BZ    @RF00041                                            0041
*              GPWDSP = '1'B;         /* SET GNL PASSWD SUPPORT FLAG */
         OI    GPWDSP(COMPTR),B'01000000'                          0042
*            ELSE                                                  0043
*              /* CHK IF ASTERISK WAS CURRENTLY ENTERED FOR PASSWORDS*/
*              IF DPCLSF1 = '0'B      /* CHK ASTERISK FLAG IN DPL    */
*                THEN                 /* NO,                         */
         B     @RC00041                                            0043
@RF00041 L     @10,DPLPTR(,COMPTR)                                 0043
         TM    DPCLSF1(@10),B'10000000'                            0043
         BNZ   @RF00043                                            0043
*                  DO;                                             0044
*                  MSGNO = 10;        /* SET MESSAGE INDEX           */
         MVC   MSGNO(2,COMPTR),@CH00221                            0045
*                  GOTO DEL32END;     /* RETURN TO IKJEFA30          */
         B     DEL32END                                            0046
*                  END;                                            0047
*          /*  VALIDATE ACCOUNT NUMBER SUPPORT IN THE SAME MANNER AS
*          FOR PASSWORDS.  FAILURE TO FIND REQUIRED SUPPORT RESULTS
*          IN AN ERROR MESSAGE AND AN ERROR EXIT.                    */
*          UADSNPTR = UADSNSUB+HEDBPTR;/* POINT TO 1ST ACCT NUM      */
@RF00043 DS    0H                                                  0048
@RC00041 LR    @10,HEDBPTR                                         0048
         AL    @10,UADSNSUB(,UADSNPTR)                             0048
         LR    UADSNPTR,@10                                        0048
*          IF UADSNDAT ^= 0           /* CHK IF ANY ACCTN DATA PTR   */
*            THEN                     /* YES,                        */
         L     @10,UADSNDAT(,UADSNPTR)                             0049
         LTR   @10,@10                                             0049
         BZ    @RF00049                                            0049
*              GACNSP = '1'B;         /* SET GNRL ACCTN SUPPORT FLAG */
         OI    GACNSP(COMPTR),B'00100000'                          0050
*            ELSE                                                  0051
*              /* CHK IF ASTERISK WAS CURRENTLY ENTERED FOR ACCT NMBR*/
*              IF DACLSF1 = '0'B      /* CHK ASTERISK FLAG IN DPL    */
*                THEN                 /* NO,                         */
         B     @RC00049                                            0051
@RF00049 L     @10,DPLPTR(,COMPTR)                                 0051
         TM    DACLSF1(@10),B'10000000'                            0051
         BNZ   @RF00051                                            0051
*                  DO;                                             0052
*                  MSGNO = 11;        /* SET MESSAGE INDEX           */
         MVC   MSGNO(2,COMPTR),@CH00223                            0053
*                  GOTO DEL32END;     /* RETURN TO IKJEFA30          */
         B     DEL32END                                            0054
*                  END;                                            0055
*          /* SIMULATE USERID OFFSET BLOCK                           */
*          DUOFSUB = UADSPWD1;        /* OFFSET TO FIRST PASSWD      */
@RF00051 DS    0H                                                  0056
@RC00049 L     @10,DPLPTR(,COMPTR)                                 0056
         L     @09,UADSPWD1(,HEDBPTR)                              0056
         ST    @09,DUOFSUB(,@10)                                   0056
*          DUOFDAT = 4;               /* OFFSET TO USERID NAME       */
         MVC   DUOFDAT(4,@10),@CF00224                             0057
*          DUFLOC = ADDR(DUSRID1);    /* OFFSET TO PSEUDO-OFFSETS    */
         LA    @09,DUSRID1(,@10)                                   0058
         STCM  @09,7,DUFLOC(@10)                                   0058
*LOCDPP1:  /* SET UP TO INITIALIZE PASSWORD LEVEL                    */
*          UADSNPTR = UADSPWD1+HEDBPTR;/* PTR TO 1ST PASSWORD OB      *
LOCDPP1  LR    UADSNPTR,HEDBPTR                                    0059
         AL    UADSNPTR,UADSPWD1(,HEDBPTR)                         0059
*          LEVLP = ADDR(DPASWD);      /* SET TEST LEVEL AT PASSWORD  */
         L     @10,DPLPTR(,COMPTR)                                 0060
         LA    LEVLP,DPASWD(,@10)                                  0060
*          /* CHK IF CURRENT LEVEL IS ASSIGNED DP LEVEL              */
*          IF LEVLP = DADP            /* DO LEVELS MATCH             */
*            THEN                     /* YES,                        */
         C     LEVLP,DADP(,@10)                                    0061
         BE    @RT00061                                            0061
*              GOTO  LOCDPP3;         /* GO TO FILL OUT SUBLEVELS    */
*          /* LOCATE LAST PDE ON DELETE LEVEL                        */
*          CALL  LOCLAL;              /* GO TO GET PTRS. ON RETURN 0063
*                                        UADSNPTR POINTS TO CURRENT
*                                        OFFSET BLOCK ON DELETE LEVEL*/
         BAL   @14,LOCLAL                                          0063
*          /* SET UP TO INITIALIZE ACCOUNT NUMBER LEVEL              */
*          UADSNPTR=UADSNSUB+HEDBPTR;  /* PTR TO 1ST ACCTNMBR OB     */
         LR    @10,HEDBPTR                                         0064
         AL    @10,UADSNSUB(,UADSNPTR)                             0064
         LR    UADSNPTR,@10                                        0064
*          LEVLP = ADDR(DACCTN);       /* SET TEST LEVEL AT ACCTNMBR */
         L     @10,DPLPTR(,COMPTR)                                 0065
         LA    LEVLP,DACCTN(,@10)                                  0065
*          /* CHK IF CURRENT LEVEL IS ASSIGNED DP LEVEL              */
*          IF LEVLP = DADP            /* DO LEVELS MATCH             */
*            THEN                     /* YES,                        */
         C     LEVLP,DADP(,@10)                                    0066
         BE    @RT00066                                            0066
*              GOTO  LOCDPP3;         /* GO TO FILL OUT SUBLEVELS    */
*          /* LOCATE LAST PDE ON DELETE LEVEL                        */
*          CALL  LOCLAL;              /* GO TO GET PTRS. ON RETURN 0068
*                                        UADSNPTR POINTS TO CURRENT
*                                        OFFSET BLOCK ON DELETE LEVEL*/
         BAL   @14,LOCLAL                                          0068
*          /* CURRENT DELETE POINT AND ASSIGNED DELETE POINT MUST BE */
*          /*   CONCURRENT AT PROCNAME LEVEL                         */
*          UADSNPTR=UADSNSUB+HEDBPTR; /* PTR TO 1ST PROCNAME OB      */
         LR    @10,HEDBPTR                                         0069
         AL    @10,UADSNSUB(,UADSNPTR)                             0069
         LR    UADSNPTR,@10                                        0069
*          LEVLP = ADDR(DROCNM);      /* SET LEVEL AT PROCNAME       */
         L     LEVLP,DPLPTR(,COMPTR)                               0070
         LA    LEVLP,DROCNM(,LEVLP)                                0070
*          GOTO  LOCDPP3;             /* GO TO FIND DELETE ELEMENT   */
         B     LOCDPP3                                             0071
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*                                                                 */
* /*  L O C D P P 2 :   LOCATE BY THE DELETE POINT LEVEL POINTER,    */
* /*     THE FIRST OFFSET BLOCK WHICH IS DEPENDENT ON THE DELETE     */
* /*     NAME(S) SPECIFIED IN THE COMMAND ENTRY                      */
* /*                                                                 */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*LOCDPP2:  /* GET PTR TO 1ST OFFSET BLOCK AT DELETE POINT LEVEL      */
*          /* FILL IN DPL OFFSET FIELDS DOWN THROUGH DELETE LEVEL(S) */
*          /* SET LEVEL POINTER TO DELETE LEVEL                      */
*          /* CHK IF DELETE LEVEL IS AT PASSWORD LEVEL               */
*          IF LEVLP = ADDR(DPASWD)    /* CHK FOR PASSWORD LEVEL PTR  */
*            THEN                     /* YES,                        */
LOCDPP2  L     @10,DPLPTR(,COMPTR)                                 0072
         LA    @09,DPASWD(,@10)                                    0072
         CR    LEVLP,@09                                           0072
         BNE   @RF00072                                            0072
*              UADSNPTR=DUOFSUB+HEDBPTR; /* PTR TO 1ST PASSWD OFFS   */
         LR    UADSNPTR,HEDBPTR                                    0073
         AL    UADSNPTR,DUOFSUB(,@10)                              0073
*            ELSE                                                  0074
*              /* CHK IF DELETE LEVEL IS AT ACCOUNT NUMBER LEVEL     */
*              IF LEVLP = ADDR(DACCTN)/* CHK FOR ACCTNMBR LEVEL PTR  */
*                THEN                 /* YES,                        */
         B     @RC00072                                            0074
@RF00072 L     @10,DPLPTR(,COMPTR)                                 0074
         LA    @09,DACCTN(,@10)                                    0074
         CR    LEVLP,@09                                           0074
         BNE   @RF00074                                            0074
*                  UADSNPTR=DPOFSUB+HEDBPTR; /* PTR TO 1ST ACCTN OFFS*/
         LR    UADSNPTR,HEDBPTR                                    0075
         AL    UADSNPTR,DPOFSUB(,@10)                              0075
*                ELSE                                              0076
*                  /* DELETE LEVEL IS AT PROCEDURE NAME LEVEL        */
*                  UADSNPTR=DAOFSUB+HEDBPTR;  /* PTR TO 1ST PROCNAME
*                                                OFFSET              */
         B     @RC00074                                            0076
@RF00074 L     @10,DPLPTR(,COMPTR)                                 0076
         LR    UADSNPTR,HEDBPTR                                    0076
         AL    UADSNPTR,DAOFSUB(,@10)                              0076
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*                                                                 */
* /*  L O C D P P 3 :   COMPLETE DELETE POINT LIST INFORMATION       */
* /*     BELOW LEVELS SPECIFIED IN COMMAND ENTRY.   CALL ROUTINE     */
* /*     LOCLAL TO LOCATE PDE FOR ITEM ON CURRENT LEVEL.   CALL      */
* /*     ROUTINE LOCLAE1 TO LOCATE WITHIN THE UADS MEMBER BLOCK      */
* /*     THE OFFSET BLOCK FOR THE CURRENT NAME                       */
* /*                                                                 */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*LOCDPP3:  /* COMPLETE LEVEL INDICATORS                              */
*          /* LOCATE LAST PDE ON DELETE LEVEL                        */
*          CALL  LOCLAL;              /* GO TO GET PTRS. ON RETURN 0077
*                                        UADSNPTR POINTS TO CURRENT
*                                        OFFSET BLOCK ON DELETE LEVEL*/
@RC00074 DS    0H                                                  0077
@RC00072 DS    0H                                                  0077
LOCDPP3  BAL   @14,LOCLAL                                          0077
*LOCDPP4:  /* CHECK IF ITEM LOCATED HAS ANY SUBLEVEL DEPENDENCIES. 0078
*          IF NONE, GO TO FRESP2 TO RETURN THAT AREA IN THE UADS   0078
*          MEMBER TO THE FREESPACE CHAIN.                            */
*          IF UADSNSUB = 0            /* CHK FOR SUBLEVEL PTR        */
*            THEN                     /* NONE,                       */
LOCDPP4  L     @10,UADSNSUB(,UADSNPTR)                             0078
         LTR   @10,@10                                             0078
         BZ    @RT00078                                            0078
*              GOTO  FRESP2;          /* GO TO FREE DP ELEMENT       */
*          /* FIND LAST SUBLEVEL ELEMENT BELOW DELETE POINT.         */
*          DCDP = LEVLP;              /* SAVE LEVEL POINTER          */
         L     @10,DPLPTR(,COMPTR)                                 0080
         ST    LEVLP,DCDP(,@10)                                    0080
*          DO WHILE UADSNSUB ^= 0;    /* LOOP TO LOWEST LEVEL        */
         B     @DE00081                                            0081
@DL00081 DS    0H                                                  0082
*            /* INITIALIZE PTRS TO FIRST SUBLEVEL                    */
*            UADSNPTR = UADSNSUB+HEDBPTR;/* SET TO FIRST SUBLEVEL    */
         LR    @10,HEDBPTR                                         0082
         AL    @10,UADSNSUB(,UADSNPTR)                             0082
         LR    UADSNPTR,@10                                        0082
*            LEVLP = LEVLP + LSPAN;   /* STEP DELETE OB LEVEL        */
         AL    LEVLP,LSPAN                                         0083
*            NMFLOC1 = UADSNPTR;      /* SET PTR TO CURRENT OB       */
         STCM  UADSNPTR,7,NMFLOC1(LEVLP)                           0084
*            NMOFFS1 = UADSNODE;      /* SET IMAGE OF CURRENT OB     */
         MVC   NMOFFS1(12,LEVLP),UADSNODE(UADSNPTR)                0085
*            END;                                                  0086
@DE00081 L     @10,UADSNSUB(,UADSNPTR)                             0086
         LTR   @10,@10                                             0086
         BNZ   @DL00081                                            0086
*          LOOPFLG = '0'B;                                         0087
         NI    LOOPFLG,B'01111111'                                 0087
*          DO WHILE LOOPFLG = '0'B;   /* LOOP TO END OF LOCAL CHAIN  */
         B     @DE00088                                            0088
@DL00088 DS    0H                                                  0089
*            CALL FREDLA;             /* GO TO ADJUST CHAIN AND FREE
*                                             DELETED AREAS          */
         BAL   @14,FREDLA                                          0089
*            IF NMFLG11 = '1'B        /* IS CHAIN EXHAUSTED?         */
*              THEN                   /* YES,                        */
         TM    NMFLG11(LEVLP),B'10000000'                          0090
         BNO   @RF00090                                            0090
*                LOOPFLG = '1'B;                                   0091
         OI    LOOPFLG,B'10000000'                                 0091
*              ELSE                                                0092
*                DO;                                               0092
         B     @RC00090                                            0092
@RF00090 DS    0H                                                  0093
*                UADSNPTR = NMFNEX1+HEDBPTR;/* STEP TO NEXT LOCAL  0093
*                                              LATERAL OFFSET        */
         SLR   UADSNPTR,UADSNPTR                                   0093
         ICM   UADSNPTR,7,NMFNEX1(LEVLP)                           0093
         ALR   UADSNPTR,HEDBPTR                                    0093
*                NMFLOC1 = UADSNPTR;  /* SET PTR TO CURRENT OB       */
         STCM  UADSNPTR,7,NMFLOC1(LEVLP)                           0094
*                NMOFFS1 = UADSNODE;  /* SET IMAGE OF CURRENT OB     */
         MVC   NMOFFS1(12,LEVLP),UADSNODE(UADSNPTR)                0095
*                IF UADSNSUB ^= 0     /* DOES SUBFIELD EXISTS?       */
*                  THEN               /* YES,                        */
         L     @10,UADSNSUB(,UADSNPTR)                             0096
         LTR   @10,@10                                             0096
         BZ    @RF00096                                            0096
*                    LOOPFLG = '1'B;                               0097
         OI    LOOPFLG,B'10000000'                                 0097
*                END;                                              0098
@RF00096 DS    0H                                                  0099
*            END;                                                  0099
@RC00090 DS    0H                                                  0099
@DE00088 TM    LOOPFLG,B'10000000'                                 0099
         BZ    @DL00088                                            0099
*          LEVLP = DCDP;              /* RESTORE LEVEL POINTER       */
         L     @10,DPLPTR(,COMPTR)                                 0100
         L     LEVLP,DCDP(,@10)                                    0100
*          UADSNPTR = NMFLOC1;        /* RESTORE PREVIOUS POINTER    */
         SLR   UADSNPTR,UADSNPTR                                   0101
         ICM   UADSNPTR,7,NMFLOC1(LEVLP)                           0101
*          GOTO  LOCDPP4;             /* GO TO RECHECK DEPENDENCIES  */
         B     LOCDPP4                                             0102
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*  F R E S P 2 :   CALL ROUTINE FREDLA TO FREE ANY DELETABLE      */
* /*     AREA AND ADJUST THE FREE SPACE CHAIN ACCORDINGLY.  IF ANY   */
* /*     ITEMS REMAIN ON CURRENT LEVEL, RETURN TO LOCATION LOCDPP2   */
* /*     TO FIND NEXT DELETE ITEM                                    */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*FRESP2:   /* FREESPACE FOR DP ELEMENT JUST LOCATED                  */
*          CALL  FREDLA;              /* GO TO ADJUST CHAIN AND FREE
*                                             DELETED AREAS          */
FRESP2   BAL   @14,FREDLA                                          0103
*NELEM:    /* INCREMENT COUNT AND CHK FOR REMAINING ENTRIES          */
*          /* CHK FOR LAST ENTRY PROCESSED                           */
*          IF NMDCN1 = NMDTN1         /* CHK FOR EXCESSIVE COUNT     */
*            THEN                     /* YES,                        */
NELEM    CLC   NMDCN1(2,LEVLP),NMDTN1(LEVLP)                       0104
         BE    @RT00104                                            0104
*              GOTO  NEPREL;          /* GO TO CHK FOR PRIOR LEVEL   */
*          NMDCN1 = NMDCN1+1;         /* STEP CURRENT COUNT          */
         LA    @10,1                                               0106
         SLR   @09,@09                                             0106
         ICM   @09,3,NMDCN1(LEVLP)                                 0106
         ALR   @10,@09                                             0106
         STH   @10,NMDCN1(,LEVLP)                                  0106
*          GOTO  LOCDPP2;             /* GO TO GET NEXT DP ELEMENT   */
         B     LOCDPP2                                             0107
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*  N E P R E L :   STEP LEVEL POINTER, CURRENT DELETE POINT, AND  */
* /*     DYNAMIC LEVEL POINTER TO NEXT HIGHER LEVEL.  CHECK IF NEW   */
* /*     LEVEL IS USERID LEVEL.  IF SO, RETURN TO IKJEFA30 TO CHECK  */
* /*     FOR FURTHER ACTIVITY                                        */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*NEPREL:   /* STEP POINTERS TO NEXT LEVEL                            */
*          IF LEVLP = ADDR(DPASWD)    /* CHK FOR PASSWORD LEVEL      */
*            THEN                     /* YES,                        */
NEPREL   L     @10,DPLPTR(,COMPTR)                                 0108
         LA    @10,DPASWD(,@10)                                    0108
         CR    LEVLP,@10                                           0108
         BE    @RT00108                                            0108
*              GOTO DEL32END;         /* RETURN TO IKJEFA30          */
*          LEVLP = LEVLP-LSPAN;       /* STEP PTR TO PREVIOUS LEVEL  */
         SL    LEVLP,LSPAN                                         0110
*          /* CHK FOR ANY DEPENDENT ITEM                             */
*          IF NMFSUB1 = 0             /* CHK SUBLEVEL PTR            */
*            THEN                     /* NO DEPENDENCIES EXIST       */
         L     @10,NMFSUB1(,LEVLP)                                 0111
         LTR   @10,@10                                             0111
         BNZ   @RF00111                                            0111
*              DO;                                                 0112
*              UADSNPTR = NMFLOC1;    /* SET CURRENT ELEMENT PTR     */
         SLR   UADSNPTR,UADSNPTR                                   0113
         ICM   UADSNPTR,7,NMFLOC1(LEVLP)                           0113
*              CALL  FREDLA;          /* GO TO ADJUST CHAIN AND FREE
*                                           DELETED AREAS            */
         BAL   @14,FREDLA                                          0114
*              END;                                                0115
*          /* CHK IF CURRENT ENTRY WAS ASTERISK                      */
*          IF NMBLDG1 = '0'B          /* CHK FOR ASTERISK ENTRY FLAG */
*            THEN                     /* NO,                         */
@RF00111 TM    NMBLDG1(LEVLP),B'10000000'                          0116
         BZ    @RT00116                                            0116
*              GOTO  NEPREL;          /* GO TO CHK IF PREVIOUS LEVEL */
*          /* IF CURRENT COUNT IS LESS THAN TOTAL, RESTORE THE DELETE
*             POINT LIST BEYOND THE CURRENT DELETE LEVEL AND GO TO 0118
*             LOCDPP1 TO FIND THE NEXT DELETE NAME.                  */
*          /* CHK FOR TERMINATION COUNT                              */
*          IF NMDCN1 = NMDTN1         /* CHK FOR TOTAL COUNT         */
*            THEN                     /* YES,                        */
         CLC   NMDCN1(2,LEVLP),NMDTN1(LEVLP)                       0118
         BE    @RT00118                                            0118
*              GOTO  NEPREL;          /* TO CHK FOR PREVIOUS LEVEL   */
*          NMDCN1 = NMDCN1+1;         /* STEP CURRENT COUNT          */
         LA    @10,1                                               0120
         SLR   @09,@09                                             0120
         ICM   @09,3,NMDCN1(LEVLP)                                 0120
         ALR   @10,@09                                             0120
         STH   @10,NMDCN1(,LEVLP)                                  0120
*          /* CHK IF LEVEL IS DELETED TO ADJUST RESERVE COUNTS       */
*          IF NMFSUB1 = 0             /* CHK SUBLEVEL PTR            */
*            THEN                     /* YES,                        */
         SLR   @10,@10                                             0121
         C     @10,NMFSUB1(,LEVLP)                                 0121
         BNE   @RF00121                                            0121
*              NMDXN1 = 0;            /* INITIALIZE COUNTS           */
         ST    @10,NMDXN1(,LEVLP)                                  0122
*          /* RESTORE DPL LEVELS BELOW * LEVEL                       */
*          LEVLP = LEVLP+LSPAN;       /* SET PTR TO CURRENT LEVEL    */
@RF00121 AL    LEVLP,LSPAN                                         0123
*          DPLB(LEVLP-DPLPTR+1:LENGTH(DPLB)) =                     0124
*                DPLBS(LEVLP-DPLPTR+1:LENGTH(DPLBS));              0124
         L     @10,DPLPTR(,COMPTR)                                 0124
         LR    @09,LEVLP                                           0124
         SLR   @09,@10                                             0124
         ST    @09,@TF00001                                        0124
         ALR   @09,@10                                             0124
         LA    @07,120                                             0124
         SL    @07,@TF00001                                        0124
         L     @04,@TF00001                                        0124
         LA    @03,DPLBS(@04)                                      0124
         EX    @07,@SM00264                                        0124
*          LEVLP = DADP;              /* RESTORE ORIGINAL DELETE PT  */
         L     LEVLP,DADP(,@10)                                    0125
*          GOTO  LOCDPP1;             /* GO TO LOCATE NEXT DP        */
         B     LOCDPP1                                             0126
*DEL32END: /* RETURN TO IKJEFA30                                     */
*          IF DUOFSUB = 0             /* WERE ALL PASSWORDS DELETED? */
*            THEN                     /* YES,                        */
DEL32END L     @10,DPLPTR(,COMPTR)                                 0127
         L     @10,DUOFSUB(,@10)                                   0127
         LTR   @10,@10                                             0127
         BNZ   @RF00127                                            0127
*              DELUSER = '1'B;        /* SET FLAG TO DELETE USER     */
         OI    DELUSER(COMPTR),B'10000000'                         0128
*            ELSE                     /* NO,                         */
*              DELUSER = '0'B;        /* SET FLAG TO UPDATE USER     */
         B     @RC00127                                            0129
@RF00127 NI    DELUSER(COMPTR),B'01111111'                         0129
*          DPLB = DPLBS;              /* RESTORE DELETE POINT LIST   */
@RC00127 L     @10,DPLPTR(,COMPTR)                                 0130
         MVC   DPLB(121,@10),DPLBS                                 0130
*          RETURN CODE(RTNCODE);      /* RETURN TO IKJEFA30          */
         L     @13,4(,@13)                                         0131
         L     @00,@SIZDATD                                        0131
         LR    @01,@11                                             0131
         FREEMAIN R,LV=(0),A=(1)
         LR    @15,@08                                             0131
         L     @14,12(,@13)                                        0131
         LM    @00,@12,20(@13)                                     0131
         BR    @14                                                 0131
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*  L O C L A L :    SCAN THE PDE CHAIN FOR THE INDICATED LEVEL    */
* /*      AND LOAD PTR 'NAMIDN1' WITH THE LOCATION OF THE CURRENT    */
* /*      PDE IN LOCAL CHAIN.    THE TARGET LEVEL IS INDICATED BY    */
* /*      PTR 'LEVLP' AT ENTRY                                       */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*LOCLAL:   PROC;                                                   0132
@EL00001 L     @13,4(,@13)                                         0132
@EF00001 L     @00,@SIZDATD                                        0132
         LR    @01,@11                                             0132
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0132
         BR    @14                                                 0132
@PB00001 DS    0H                                                  0132
LOCLAL   STM   @14,@01,12(@13)                                     0132
         STM   @04,@12,36(@13)                                     0132
*          /* CHK IF ENTRY IS ASTERISK TO SKIP PDE CHECK             */
*          IF NMBLDG1 = '1'B          /* CHK FOR ASTERISK FLAG       */
*            THEN                     /* YES,                        */
         TM    NMBLDG1(LEVLP),B'10000000'                          0133
         BNO   @RF00133                                            0133
*              DO;                    /* CHECK PDE COUNT             */
*              /*FIND CURRENT ELEMENT ON LOCAL ASTERISK LEVEL CHAIN  */
*              LEVLP = LEVLP - LSPAN; /* SET TO PREVIOUS LEVEL       */
         SL    LEVLP,LSPAN                                         0135
*              /*INITIALIZE TEST COUNTER                             */
*              TSTCTN = 1;            /* INITIALIZE COUNTER          */
         LA    TSTCTN,1                                            0136
*              UADSNPTR = NMFSUB1+HEDBPTR;/* SET TO FIRST OFFSET     */
         LR    UADSNPTR,HEDBPTR                                    0137
         AL    UADSNPTR,NMFSUB1(,LEVLP)                            0137
*              IF NMDTN2 = 0          /* CHECK IF TOTAL COUNT SET    */
*                THEN                 /* YES, COUNT NEVER SET        */
         SLR   @10,@10                                             0138
         ICM   @10,3,NMDTN2(LEVLP)                                 0138
         LTR   @10,@10                                             0138
         BNZ   @RF00138                                            0138
*                  DO;                                             0139
*                  DO WHILE UADSNFLG ^= '1'B;/* LOOP TO END OF CHAIN */
         B     @DE00140                                            0140
@DL00140 DS    0H                                                  0141
*                    TSTCTN = TSTCTN+1;/* STEP COUNTER               */
         AH    TSTCTN,@CH00032                                     0141
*                    UADSNPTR = UADSNNEX+HEDBPTR;/* TO NEXT OB       */
         SLR   @10,@10                                             0142
         ICM   @10,7,UADSNNEX(UADSNPTR)                            0142
         ALR   @10,HEDBPTR                                         0142
         LR    UADSNPTR,@10                                        0142
*                    END;                                          0143
@DE00140 TM    UADSNFLG(UADSNPTR),B'10000000'                      0143
         BNO   @DL00140                                            0143
*                  UADSNPTR = NMFSUB1+HEDBPTR;/* SET TO 1ST OFFSET   */
         LR    UADSNPTR,HEDBPTR                                    0144
         AL    UADSNPTR,NMFSUB1(,LEVLP)                            0144
*                  NMDTN2=TSTCTN;     /* SET TOTAL COUNT             */
         STH   TSTCTN,NMDTN2(,LEVLP)                               0145
*                  NMDCN2 = 1;        /* SET INITIAL CURRENT COUNT   */
         MVC   NMDCN2(2,LEVLP),@CH00032                            0146
*                  END;                                            0147
*                ELSE                 /* CHAIN IS IN PROCESS         */
*                  DO WHILE TSTCTN < NMDCN2;/* SCAN TO CURRENT ITEM  */
         B     @RC00138                                            0148
@RF00138 B     @DE00148                                            0148
@DL00148 DS    0H                                                  0149
*                    TSTCTN = TSTCTN+1;/* STEP COUNTER               */
         AH    TSTCTN,@CH00032                                     0149
*                    UADSNPTR = UADSNNEX+HEDBPTR;/* TO NEXT OB       */
         SLR   @10,@10                                             0150
         ICM   @10,7,UADSNNEX(UADSNPTR)                            0150
         ALR   @10,HEDBPTR                                         0150
         LR    UADSNPTR,@10                                        0150
*                    END;                                          0151
@DE00148 SLR   @10,@10                                             0151
         ICM   @10,3,NMDCN2(LEVLP)                                 0151
         CLR   TSTCTN,@10                                          0151
         BL    @DL00148                                            0151
*              /* SET UP OFFSET BLOCK IMAGES IN DPL                  */
*              NMFLOC2 = UADSNPTR;    /* SET PTR TO CURRENT OB       */
@RC00138 STCM  UADSNPTR,7,NMFLOC2(LEVLP)                           0152
*              NMOFFS2 = UADSNODE;    /* SET IMAGE OF CURRENT OB     */
         MVC   NMOFFS2(12,LEVLP),UADSNODE(UADSNPTR)                0153
*              LEVLP = LEVLP+LSPAN;   /* SET PTR TO CURRENT LEVEL    */
         AL    LEVLP,LSPAN                                         0154
*              RETURN;                                             0155
@EL00002 DS    0H                                                  0155
@EF00002 DS    0H                                                  0155
@ER00002 LM    @14,@01,12(@13)                                     0155
         LM    @04,@12,36(@13)                                     0155
         BR    @14                                                 0155
*              END;                                                0156
*          /* SCAN THE UADS LOCAL LEVEL CHAIN TO FIND THE NAME TO  0157
*             MATCH THE NAME ALIGNED WITH THE SPECIFIED PDE.       0157
*             FAILURE TO FIND A MATCHING NAME WITHIN THE LOCAL CHAIN
*             RESULTS IN AN ERROR RETURN.  AT ENTRY, PTR 'UADSNPTR'
*             POINTS TO THE 1ST OFFSET BLOCK OF LOCAL CHAIN.       0157
*             AT SUCCESSFUL EXIT PTR 'UADSNPTR' POINTS TO THE CORRECT
*             OFFSET BLOCK AND THAT OFFSET BLOCK AND ITS LOCATION HAVE
*             BEEN COPIED INTO THE CURRENT LEVEL IN THE DELETE POINT
*             LIST.                                                  */
*          IF NMDCN1 > 1              /* IS THERE A CHAIN POINTER?   */
*            THEN                     /* YES,                        */
@RF00133 CLC   NMDCN1(2,LEVLP),@CH00032                            0157
         BNH   @RF00157                                            0157
*              NAMIDN1 = NPTRNEX;     /* STEP PTR TO NEXT IN CHAIN   */
         L     @10,NAMIDN1(,LEVLP)                                 0158
         L     @10,NPTRNEX(,@10)                                   0158
         ST    @10,NAMIDN1(,LEVLP)                                 0158
*          LOOPFLG = '0'B;                                         0159
@RF00157 NI    LOOPFLG,B'01111111'                                 0159
*          CHARS = NAMPTRC(1:NAMLNG); /* GET NAME FOR COMPARE        */
         MVI   CHARS+1,C' '                                        0160
         MVC   CHARS+2(38),CHARS+1                                 0160
         L     @10,NAMIDN1(,LEVLP)                                 0160
         SLR   @09,@09                                             0160
         ICM   @09,3,NAMLNG(@10)                                   0160
         BCTR  @09,0                                               0160
         L     @10,NAMPTR1(,@10)                                   0160
         EX    @09,@SM00266                                        0160
*          DO WHILE LOOPFLG = '0'B;                                0161
         B     @DE00161                                            0161
@DL00161 DS    0H                                                  0162
*            UADSPPTR = UADSNDAT+HEDBPTR;/* SET PTR TO DATA BLOCK    */
         LR    UADSPPTR,HEDBPTR                                    0162
         AL    UADSPPTR,UADSNDAT(,UADSNPTR)                        0162
*            /* CHK FOR DELETE LEVEL AT ACCOUNT NUMBER LEVEL         */
*            IF LEVLP = ADDR(DACCTN)  /* CHK FOR ACCT NMBR LEVEL     */
*              THEN                   /* YES,                        */
         L     @10,DPLPTR(,COMPTR)                                 0163
         LA    @10,DACCTN(,@10)                                    0163
         CR    LEVLP,@10                                           0163
         BNE   @RF00163                                            0163
*                DO;                                               0164
*                UADSAPTR=UADSPPTR;   /* PTR TO CURRENT DATA         */
         LR    UADSAPTR,UADSPPTR                                   0165
*                /* CHK FOR MATCHING NAMES                           */
*                IF NAMLNG = UADSALEN  /* CHK FOR EQUAL LENGTHS      */
*                  & UADSANUM(1:NAMLNG)= /* COMPARE NAMES            */
*                  NAMPTRC(1:NAMLNG)                               0166
*                    THEN             /* YES, NAMES MATCH            */
         L     @10,NAMIDN1(,LEVLP)                                 0166
         SLR   @07,@07                                             0166
         ICM   @07,3,NAMLNG(@10)                                   0166
         SLR   @04,@04                                             0166
         IC    @04,UADSALEN(,UADSAPTR)                             0166
         CR    @07,@04                                             0166
         BNE   @RF00166                                            0166
         L     @10,NAMPTR1(,@10)                                   0166
         BCTR  @07,0                                               0166
         EX    @07,@SC00268                                        0166
         BE    @RT00166                                            0166
*                      GOTO  NAMFD;   /* GO TO EXIT                  */
*                END;                                              0168
*              ELSE                   /* MUST BE PASSWORD OR PROC    */
*                IF UADSPPWD = CHARS(1:8)/* COMPARE NAMES            */
*                  THEN               /* YES, NAMES MATCH            */
         B     @RC00163                                            0169
@RF00163 CLC   UADSPPWD(8,UADSPPTR),CHARS                          0169
         BE    @RT00169                                            0169
*                    GOTO  NAMFD;     /* GO TO EXIT                  */
*            IF UADSNFLG = '1'B       /* CHK IF CHAIN EXHAUSTED      */
*              THEN                   /* YES,                        */
@RC00163 TM    UADSNFLG(UADSNPTR),B'10000000'                      0171
         BNO   @RF00171                                            0171
*                LOOPFLG = '1'B;      /* TERMINATE LOOP              */
         OI    LOOPFLG,B'10000000'                                 0172
*              ELSE                                                0173
*                UADSNPTR=UADSNNEX+HEDBPTR;/* STEP PTR TO NEXT OFFSET*/
         B     @RC00171                                            0173
@RF00171 SLR   @10,@10                                             0173
         ICM   @10,7,UADSNNEX(UADSNPTR)                            0173
         ALR   @10,HEDBPTR                                         0173
         LR    UADSNPTR,@10                                        0173
*            END;                                                  0174
@RC00171 DS    0H                                                  0174
@DE00161 TM    LOOPFLG,B'10000000'                                 0174
         BZ    @DL00161                                            0174
*          IF STRNOW = '0'B           /* CHK FOR ASTERISK ACTIVITY   */
*            THEN                     /* NO,                         */
         TM    STRNOW,B'10000000'                                  0175
         BNZ   @RF00175                                            0175
*              RETURN TO DEL32END;    /* GO TO FREE/DEQUEUE          */
         LA    @14,DEL32END                                        0176
         LM    @15,@01,16(@13)                                     0176
         LM    @04,@12,36(@13)                                     0176
         BR    @14                                                 0176
*            ELSE                     /* YES, IS ASTERISK            */
*              RETURN TO  NELEM;      /* GO TO LOOK FOR MORE ITEMS   */
@RF00175 LA    @14,NELEM                                           0177
         LM    @15,@01,16(@13)                                     0177
         LM    @04,@12,36(@13)                                     0177
         BR    @14                                                 0177
*NAMFD:    /* SPECIFIED NAME LOCATED IN UADS, UADSNPTR POINTS TO ITS */
*          /*      OFFSET BLOCK                                      */
*          NAMFLGF = '1'B;            /* INDICATE ITEM FOUND IN PDE  */
NAMFD    L     @10,NAMIDN1(,LEVLP)                                 0178
         OI    NAMFLGF(@10),B'00000010'                            0178
*          NMFLOC1 = UADSNPTR;        /* SET OFFSET LOC IN DPL       */
         STCM  UADSNPTR,7,NMFLOC1(LEVLP)                           0179
*          NMOFFS1 = NMOFFC1;         /* SET OFFSET BLOCK IN DPL     */
         SLR   @10,@10                                             0180
         ICM   @10,7,NMFLOC1(LEVLP)                                0180
         MVC   NMOFFS1(12,LEVLP),NMOFFC1(@10)                      0180
*          END  LOCLAL;               /* RETURN                      */
         B     @EL00002                                            0181
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*                                                                 */
* /*   F R E D L A :   FREE AREAS TO BE DELETED AND ADJUST LATERAL   */
* /*      CHAIN POINTERS.   SCAN  ACROSS  LATERAL CHAIN  AT DELETE   */
* /*      ELEMENT LEVEL  TO FIND PREVIOUS ELEMENT.   SET  PREVIOUS   */
* /*      ELEMENT CHAIN POINTER FROM DELETE ELEMENT POINTER FIELDS.  */
* /*      IF DATA BLOCK IS UNDER MULTIPLE USAGE,  REDUCE THE USAGE   */
* /*      COUNT BY ONE.    OTHERWISE RETURN THE DATA BLOCK AREA TO   */
* /*      THE FREE SPACE QUEUE BY CALLING IKJEFA54,  THE FREESPACE   */
* /*      ROUTINE.  THE DELETED OFFSET BLOCK IS ALWAYS RETURNED TO   */
* /*      THE FREESPACE QUEUE.   IF DELETE IS SUCCESSFUL,  SET THE   */
* /*      THE 'DELETED' FLAG, NAMFLG8,  IN THE PDE  FOR ANY DELETE   */
* /*      ELEMENT NOT BELOW THE ASSIGNED DELETE POINT                */
* /*                                                                 */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*FREDLA:   /* FREE DELETED AREAS                                     */
*          PROC;                                                   0182
FREDLA   STM   @14,@01,@SA00003                                    0182
         STM   @04,@07,@SA00003+16                                 0182
         STM   @09,@12,@SA00003+32                                 0182
*          DELOP = UADSNPTR;          /* SET DELETE OB PTR           */
         LR    DELOP,UADSNPTR                                      0183
*          /* LOCATE INITIAL OB AT CURRENT DELETE LEVEL              */
*          IF LEVLP = ADDR(DPASWD)    /* CHK IF AT PASSWORD LEVEL    */
*            THEN                     /* YES,                        */
         L     @10,DPLPTR(,COMPTR)                                 0184
         LA    @10,DPASWD(,@10)                                    0184
         CR    LEVLP,@10                                           0184
         BNE   @RF00184                                            0184
*              UADSNPTR = UADSPWD1+HEDBPTR;/* POINT TO 1ST PASSWD    */
         LR    UADSNPTR,HEDBPTR                                    0185
         AL    UADSNPTR,UADSPWD1(,HEDBPTR)                         0185
*            ELSE                                                  0186
*              DO;                                                 0186
         B     @RC00184                                            0186
@RF00184 DS    0H                                                  0187
*              UADSNPTR = UADSPWD1+HEDBPTR;/* POINT TO 1ST PASSWD    */
         LR    UADSNPTR,HEDBPTR                                    0187
         AL    UADSNPTR,UADSPWD1(,HEDBPTR)                         0187
*              UADSNPTR = UADSNSUB+HEDBPTR;/* POINT TO 1ST ACCT NUM  */
         LR    @10,HEDBPTR                                         0188
         AL    @10,UADSNSUB(,UADSNPTR)                             0188
         LR    UADSNPTR,@10                                        0188
*              IF LEVLP = ADDR(DROCNM)/* CHK IF PROC NAME LEVEL      */
*                THEN                 /* YES,                        */
         L     @10,DPLPTR(,COMPTR)                                 0189
         LA    @10,DROCNM(,@10)                                    0189
         CR    LEVLP,@10                                           0189
         BNE   @RF00189                                            0189
*                  UADSNPTR = UADSNSUB+HEDBPTR;/* POINT TO 1ST PROC  */
         LR    @10,HEDBPTR                                         0190
         AL    @10,UADSNSUB(,UADSNPTR)                             0190
         LR    UADSNPTR,@10                                        0190
*              END;                                                0191
@RF00189 DS    0H                                                  0192
*          LASTOP  =  UADSNPTR;       /* SET PTR TO PREVIOUS OB      */
@RC00184 LR    LASTOP,UADSNPTR                                     0192
*          /* CHK TO FREE CURRENT OFFSET BLOCK                       */
*          DO WHILE UADSNPTR ^= DELOP;/* LOOP TILL DELETE OB REACHED */
         B     @DE00193                                            0193
@DL00193 DS    0H                                                  0194
*            LASTOP  =  UADSNPTR;     /* STEP PREVIOUS OB PTR        */
         LR    LASTOP,UADSNPTR                                     0194
*            UADSNPTR = OLDPTRN+HEDBPTR; /* STEP TO NEXT OB          */
         SLR   UADSNPTR,UADSNPTR                                   0195
         ICM   UADSNPTR,7,OLDPTRN(LASTOP)                          0195
         ALR   UADSNPTR,HEDBPTR                                    0195
*            END;                     /* GO TO CHK NEW OB            */
@DE00193 CR    UADSNPTR,DELOP                                      0196
         BNE   @DL00193                                            0196
*          IF OLDFLG = '1'B           /* WAS OLD PTR END OF CHAIN?   */
*            THEN                     /* YES,                        */
         TM    OLDFLG(LASTOP),B'10000000'                          0197
         BNO   @RF00197                                            0197
*              OLDPTRN = NEWPTRN;     /* LEAVE CHAIN FLAG ON         */
         MVC   OLDPTRN(3,LASTOP),NEWPTRN(DELOP)                    0198
*            ELSE                     /* NO,                         */
*              OLDOBLK = NEWOBLK;     /* USE NEW FLAG AND PTR        */
         B     @RC00197                                            0199
@RF00197 MVC   OLDOBLK(4,LASTOP),NEWOBLK(DELOP)                    0199
*          SPZBLGD = 0;               /* SET DATA BLOCK PTR TO ZERO  */
@RC00197 SLR   @10,@10                                             0200
         STH   @10,SPZBLGD                                         0200
*          /* CHK FOR EXISTANCE OF DATA BLOCK                        */
*          IF UADSNDAT = 0            /* CHK IF ANY DATA BLOCK PTR   */
*            THEN                     /* NONE,                       */
         L     @09,UADSNDAT(,UADSNPTR)                             0201
         CR    @09,@10                                             0201
         BE    @RT00201                                            0201
*              GOTO  FREOB;           /* SKIP DATA BLOCK PROCESSING  */
*          /* ADJUST USAGE COUNT IN DATA BLOCK                       */
*          UADSDPTR = HEDBPTR+UADSNDAT; /* SET PTR TO DATA BLOCK     */
         ALR   @09,HEDBPTR                                         0203
         LR    UADSDPTR,@09                                        0203
*          IF UADSNCTR > 1            /* CHK FOR MULTIPLE USE        */
*            THEN                     /* YES,                        */
         CLI   UADSNCTR(UADSDPTR),1                                0204
         BNH   @RF00204                                            0204
*              DO;                                                 0205
*              UADSNCTR = UADSNCTR-1; /* DECREMENT USAGE COUNT       */
         SLR   @10,@10                                             0206
         IC    @10,UADSNCTR(,UADSDPTR)                             0206
         BCTR  @10,0                                               0206
         STC   @10,UADSNCTR(,UADSDPTR)                             0206
*              GOTO  FREOB;           /* SKIP FREEING DATA BLOCK     */
         B     FREOB                                               0207
*              END;                                                0208
*          /* SET TO FREE DATA BLOCK SPACE                           */
*          SPZBLCD = UADSNDAT;        /* SET LOCATION PARAMETER      */
@RF00204 L     @10,UADSNDAT(,UADSNPTR)                             0209
         ST    @10,SPZBLCD                                         0209
*          /* SET UP LENGTH OF SPACE TO BE FREED                     */
*          SPZBLGD = 12;              /* INITIALIZE TO PASSWORD SIZE */
         MVC   SPZBLGD(2),@CH00055                                 0210
*          /* CHK IF IS PASSWORD                                     */
*          IF LEVLP = ADDR(DPASWD)    /* CHK FOR PASSWORD LEVEL      */
*            THEN                     /* YES,                        */
         L     @10,DPLPTR(,COMPTR)                                 0211
         LA    @09,DPASWD(,@10)                                    0211
         CR    LEVLP,@09                                           0211
         BE    @RT00211                                            0211
*              GOTO  FREOB;           /* GO TO CALL FREESPACE RTN    */
*            ELSE                     /* NOT PASSWORD                */
*              SPZBLGD = 24;          /* SET UP PROCEDURE NAME SIZE  */
         MVC   SPZBLGD(2),@CH00062                                 0213
*          /* CHK IF IS PROCEDURE NAME                               */
*          IF LEVLP = ADDR(DROCNM)    /* CHK FOR PROCNAME LEVEL      */
*            THEN                     /* YES,                        */
         LA    @10,DROCNM(,@10)                                    0214
         CR    LEVLP,@10                                           0214
         BE    @RT00214                                            0214
*              GOTO  FREOB;           /* GO TO CALL FREESPACE RTN    */
*            ELSE                     /* NOT PROCEDURE NAME          */
*              SPZBLGD=UADSDPTR->UADSALEN+45; /* SET ACCT NUM SIZE   */
         LA    @10,45                                              0216
         SLR   @09,@09                                             0216
         IC    @09,UADSALEN(,UADSDPTR)                             0216
         ALR   @10,@09                                             0216
         STH   @10,SPZBLGD                                         0216
*FREOB:    /* FREE OFFSET BLOCK SPACE                                */
*          LEVLP = LEVLP - LSPAN;     /* SET PTR FOR PREVIOUS LEVEL  */
FREOB    SL    LEVLP,LSPAN                                         0217
*          /* SET SUBLEVEL OFFSETS IF FIRST SUBELEMENT               */
*          IF UADSNPTR-HEDBPTR=NMFSUB1/* IS DELETED OB 1ST OF LEVEL  */
*            THEN                     /* YES,                        */
         LR    @10,UADSNPTR                                        0218
         SLR   @10,HEDBPTR                                         0218
         C     @10,NMFSUB1(,LEVLP)                                 0218
         BNE   @RF00218                                            0218
*              DO;                                                 0219
*              IF UADSNFLG = '1'B     /* CHK FOR END OF LOCAL CHAIN  */
*                THEN                 /* YES,                        */
         TM    UADSNFLG(UADSNPTR),B'10000000'                      0220
         BNO   @RF00220                                            0220
*                  NMFSUB1 = 0;       /* INDICATE NO SUB LEVEL       */
         SLR   @10,@10                                             0221
         ST    @10,NMFSUB1(,LEVLP)                                 0221
*                ELSE                 /* NOT END OF CHAIN            */
*                  NMFSUB1 = NEWOBLK; /* SET DPL TO NEXT ELEMENT     */
         B     @RC00220                                            0222
@RF00220 L     @10,NEWOBLK(,DELOP)                                 0222
         ST    @10,NMFSUB1(,LEVLP)                                 0222
*              /* CHK IF PRIOR LEVEL IS USERID                       */
*              IF LEVLP = ADDR(DUSRID1)/* CHK FOR USERID LEVEL       */
*                THEN                 /* YES,                        */
@RC00220 L     @10,DPLPTR(,COMPTR)                                 0223
         LA    @10,DUSRID1(,@10)                                   0223
         CR    LEVLP,@10                                           0223
         BNE   @RF00223                                            0223
*                  UADSPWD1 = NMFSUB1;/* SET TO NEW 1ST PASSWORD     */
         L     @10,NMFSUB1(,LEVLP)                                 0224
         ST    @10,UADSPWD1(,HEDBPTR)                              0224
*                ELSE                 /* NO,                         */
*                  NMFLOC1->UADSNSUB = NMFSUB1;/* SET TO NEXT ELEMENT*/
         B     @RC00223                                            0225
@RF00223 SLR   @10,@10                                             0225
         ICM   @10,7,NMFLOC1(LEVLP)                                0225
         L     @07,NMFSUB1(,LEVLP)                                 0225
         ST    @07,UADSNSUB(,@10)                                  0225
*              END;                                                0226
@RC00223 DS    0H                                                  0227
*          /* CHK FOR NO SUBLEVEL TO SET TERMINATING COUNT           */
*          IF NMFSUB1 = 0             /* CHK FOR ZERO OFFSET         */
*            THEN                     /* YES, NO SUBLEVEL            */
@RF00218 L     @10,NMFSUB1(,LEVLP)                                 0227
         LTR   @10,@10                                             0227
         BNZ   @RF00227                                            0227
*              NMDCN2 = NMDTN2;       /* SET TERMINATING COUNT       */
         SLR   @10,@10                                             0228
         ICM   @10,3,NMDTN2(LEVLP)                                 0228
         STH   @10,NMDCN2(,LEVLP)                                  0228
*          SPZBLOC=UADSNPTR-HEDBPTR;  /* SET LOCATION PARAMETER      */
@RF00227 LR    @10,UADSNPTR                                        0229
         SLR   @10,HEDBPTR                                         0229
         ST    @10,SPZBLOC                                         0229
*          SPZBLNG = 12;              /* SET LENGTH OF OFFSET BLOCK  */
         MVC   SPZBLNG(2),@CH00055                                 0230
*          /* ISSUE CALL TO FREESPACE FOR OFFSET BLOCK               */
*          CALL  FRESP;               /* GO TO FREE OFFSET BLOCK     */
         BAL   @14,FRESP                                           0231
*          /* CHK TO FREE DATA BLOCK                                 */
*          IF SPZBLGD ^= 0            /* CHK FOR NEW BLOCK LENGTH    */
*            THEN                     /* YES,                        */
         LH    @10,SPZBLGD                                         0232
         LTR   @10,@10                                             0232
         BZ    @RF00232                                            0232
*              DO;                                                 0233
*              SPZBLOC = SPZBLCD;     /* SET NEW BLOCK LOCATION      */
         L     @09,SPZBLCD                                         0234
         ST    @09,SPZBLOC                                         0234
*              SPZBLNG = SPZBLGD;     /* SET NEW BLOCK LENGTH        */
         STH   @10,SPZBLNG                                         0235
*              CALL  FRESP;           /* GO TO FREE DATA BLOCK       */
         BAL   @14,FRESP                                           0236
*              END;                                                0237
*          LEVLP = LEVLP+LSPAN;       /* SET PTR TO CURRENT LEVEL    */
@RF00232 AL    LEVLP,LSPAN                                         0238
*          IF LEVLP < DADP            /* IS ITEM ABOVE DELETE LEVEL? */
*           & NMBLDG1 = '0'B          /* AND SPECIFIED?              */
*            THEN                     /* YES,                        */
         L     @10,DPLPTR(,COMPTR)                                 0239
         C     LEVLP,DADP(,@10)                                    0239
         BNL   @RF00239                                            0239
         TM    NMBLDG1(LEVLP),B'10000000'                          0239
         BNZ   @RF00239                                            0239
*              NAMFLGD = '1'B;        /* SET DELETED FLAG IN PDE     */
         L     @10,NAMIDN1(,LEVLP)                                 0240
         OI    NAMFLGD(@10),B'00000001'                            0240
*          END  FREDLA;               /* RETURN                      */
@EL00003 DS    0H                                                  0241
@EF00003 DS    0H                                                  0241
@ER00003 LM    @14,@01,@SA00003                                    0241
         LM    @04,@07,@SA00003+16                                 0241
         LM    @09,@12,@SA00003+32                                 0241
         BR    @14                                                 0241
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*                                                                 */
* /*  F R E S P :  CALL IKJEFA54, THE FREESPACE ROUTINE, TO RETURN   */
* /*     DELETED AREA TO THE FREESPACE QUEUE.   FAILURE IN ATTEMPT   */
* /*     TO FREESPACE RESULTS IN AN ERROR TERMINATION MESSAGE.       */
* /*                                                                 */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*FRESP:    /* ISSUE CALL TO FREESPACE                                */
*          PROC;                                                   0242
FRESP    STM   @14,@07,@SA00004                                    0242
         STM   @09,@12,@SA00004+40                                 0242
*          SPZBLKN = ACIONMBR;        /* SET NO OF EXTENSION BLOCKS  */
         L     @10,ACIOPTR(,COMPTR)                                0243
         SLR   @09,@09                                             0243
         IC    @09,ACIONMBR(,@10)                                  0243
         STH   @09,SPZBLKN                                         0243
*          SPZBUFP = ACIOBUFR;        /* SET PTR TO AREA TO FREE     */
         SLR   @09,@09                                             0244
         ICM   @09,7,ACIOBUFR(@10)                                 0244
         ST    @09,SPZBUFP                                         0244
*          RFY (R1,R15) RSTD;         /* RESTRICT PARM REG & RET CD  */
*          R1  =  ADDR(SPAZPB);       /* SET PTR TO FREE SPACE PB    */
         LA    R1,SPAZPB                                           0246
*          /* LINK TO FREESPACE                                      */
*          CALL  IKJEFA54;            /* GO TO FREESPACE ROUTINE     */
         L     @15,@CV00085                                        0247
         BALR  @14,@15                                             0247
*          /* CHK RETURN CODE FROM FREESPACE                         */
*          RTNCODE  =  R15;           /* RESERVE RETURN CODE         */
         LR    RTNCODE,R15                                         0248
*          RFY (R1,R15) UNRSTD;       /* RELEASE PARM REG & RET CODE */
*          /* CHK FOR SUCCESS OF FREESPACE                           */
*          IF RTNCODE ^= 0            /* CHK FOR FAILURE CODE        */
*            THEN                     /* YES,                        */
         LTR   RTNCODE,RTNCODE                                     0250
         BZ    @RF00250                                            0250
*              DO;                                                 0251
*              MSGNO = 25;            /* SET MESSAGE INDEX           */
         MVC   MSGNO(2,COMPTR),@CH00257                            0252
*              RETURN TO DEL32END;    /* GO TO ISSUE FAILURE MSG     */
         LA    @14,DEL32END                                        0253
         LM    @15,@07,@SA00004+4                                  0253
         LM    @09,@12,@SA00004+40                                 0253
         BR    @14                                                 0253
*              END;                                                0254
*            ELSE                                                  0255
*              MSGNO = 0;             /* SET NORMAL COMPLETION       */
@RF00250 SLR   @10,@10                                             0255
         STH   @10,MSGNO(,COMPTR)                                  0255
*          END  FRESP;                /* RETURN TO CALLER            */
@EL00004 DS    0H                                                  0256
@EF00004 DS    0H                                                  0256
@ER00004 LM    @14,@07,@SA00004                                    0256
         LM    @09,@12,@SA00004+40                                 0256
         BR    @14                                                 0256
*          END IKJEFA32                                            0257
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJEFUAD)                                        *
*;                                                                 0257
@DATA    DS    0H
@CH00032 DC    H'1'
@CH00221 DC    H'10'
@CH00223 DC    H'11'
@CH00055 DC    H'12'
@CH00217 DC    H'17'
@CH00062 DC    H'24'
@CH00257 DC    H'25'
@SM00264 MVC   DPLB(0,@09),0(@03)
@SM00266 MVC   CHARS(0),NAMPTRC(@10)
@SC00268 CLC   UADSANUM(0,UADSAPTR),NAMPTRC(@10)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SA00003 DS    12F
@SA00004 DS    0F
         DS    14F
@TF00001 DS    F
IKJEFA32 CSECT
         DS    0F
@CF00224 DC    F'4'
@DATD    DSECT
         DS    0D
DPLBS    DS    CL121
STRNOW   DS    BL1
LOOPFLG  DS    BL1
         DS    CL1
SPAZPB   DS    CL12
         ORG   SPAZPB
SPZBUFP  DS    AL4
SPZBLKN  DS    FL2
SPZBLNG  DS    FL2
SPZBLOC  DS    AL4
         ORG   SPAZPB+12
@NM00057 DS    CL6
         ORG   @NM00057
SPZBLCD  DS    AL4
SPZBLGD  DS    AL2
         ORG   @NM00057+6
CHARS    DS    CL40
IKJEFA32 CSECT
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
@CV00085 DC    V(IKJEFA54)
         DS    0D
LSPAN    DC    AL4(DPASWD-DUSRID1)
IKJEFA32 CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKJEFA32 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
TSTCTN   EQU   @07
DELOP    EQU   @08
LASTOP   EQU   @07
RTNCODE  EQU   @08
UADSDPTR EQU   @07
LEVLP    EQU   @02
COMPTR   EQU   @05
UADSAPTR EQU   @09
UADSPPTR EQU   @07
UADSNPTR EQU   @03
HEDBPTR  EQU   @06
R1       EQU   @01
R15      EQU   @15
DHED     EQU   0
UADSMHDR EQU   DHED
UADSBN01 EQU   UADSMHDR+12
UADSATTR EQU   DHED+16
UADSPWD1 EQU   DHED+24
UADSNODE EQU   0
UADSNWD1 EQU   UADSNODE
UADSNFLG EQU   UADSNWD1
UADSNNEX EQU   UADSNWD1+1
UADSNSUB EQU   UADSNODE+4
UADSNDAT EQU   UADSNODE+8
DPOBD    EQU   0
UADSPPWD EQU   DPOBD+4
DNOBD    EQU   0
UADSALEN EQU   DNOBD+44
UADSANUM EQU   DNOBD+45
COMAREA  EQU   0
DPLPTR   EQU   COMAREA
ACIOPTR  EQU   COMAREA+4
MSGNO    EQU   COMAREA+8
DELUSER  EQU   COMAREA+10
GPWDSP   EQU   COMAREA+10
GACNSP   EQU   COMAREA+10
DPLB     EQU   0
DADP     EQU   DPLB
DCDP     EQU   DPLB+4
DUSRID1  EQU   DPLB+8
DUOFSUB  EQU   DPLB+20
DUOFDAT  EQU   DPLB+24
@NM00010 EQU   DPLB+28
DUFLOC   EQU   DPLB+29
DPASWD   EQU   DPLB+36
DPOFSUB  EQU   DPLB+48
@NM00016 EQU   DPLB+56
DPCLSF1  EQU   @NM00016
DACCTN   EQU   DPLB+64
DAOFSUB  EQU   DPLB+76
@NM00022 EQU   DPLB+84
DACLSF1  EQU   @NM00022
DROCNM   EQU   DPLB+92
@NM00031 EQU   0
NAMIDN1  EQU   @NM00031+4
NMOFFS1  EQU   @NM00031+8
NMFLG11  EQU   NMOFFS1
NMFNEX1  EQU   NMOFFS1+1
NMFSUB1  EQU   NMOFFS1+4
NMBLDG1  EQU   @NM00031+20
NMFLOC1  EQU   @NM00031+21
NMDXN1   EQU   @NM00031+24
NMDTN1   EQU   NMDXN1
NMDCN1   EQU   NMDXN1+2
NMOFFS2  EQU   @NM00031+36
NMFLOC2  EQU   @NM00031+49
NMDTN2   EQU   @NM00031+52
NMDCN2   EQU   @NM00031+54
NAMPDE   EQU   0
NAMPTR1  EQU   NAMPDE
NAMLNG   EQU   NAMPDE+4
NAMFLGF  EQU   NAMPDE+6
NAMFLGD  EQU   NAMPDE+6
NPTRNEX  EQU   NAMPDE+8
ACIOPARM EQU   0
ACIONMBR EQU   ACIOPARM+16
ACIOBUFR EQU   ACIOPARM+17
@NM00053 EQU   ACIOPARM+20
NMOFFC1  EQU   0
UADSNCTR EQU   0
OLDOBLK  EQU   0
OLDFLG   EQU   OLDOBLK
OLDPTRN  EQU   OLDOBLK+1
NEWOBLK  EQU   0
NEWPTRN  EQU   NEWOBLK+1
NAMPTRC  EQU   0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00056 EQU   NEWOBLK
@NM00055 EQU   OLDOBLK
@NM00054 EQU   @NM00053
@NM00052 EQU   ACIOPARM+12
@NM00051 EQU   ACIOPARM+8
@NM00050 EQU   ACIOPARM+4
@NM00049 EQU   ACIOPARM+1
@NM00048 EQU   ACIOPARM
@NM00047 EQU   ACIOPARM
@NM00046 EQU   ACIOPARM
@NM00045 EQU   ACIOPARM
@NM00044 EQU   ACIOPARM
@NM00043 EQU   ACIOPARM
@NM00042 EQU   NAMPDE+7
@NM00041 EQU   NAMPDE+6
@NM00040 EQU   NAMPDE+6
@NM00039 EQU   @NM00031+48
@NM00038 EQU   @NM00031+48
@NM00037 EQU   @NM00031+32
@NM00036 EQU   @NM00031+28
@NM00035 EQU   @NM00031+20
@NM00034 EQU   NMOFFS1+8
@NM00033 EQU   NMOFFS1
@NM00032 EQU   @NM00031
DEND     EQU   DPLB+120
@NM00030 EQU   DPLB+118
@NM00029 EQU   DPLB+116
@NM00028 EQU   DPLB+113
@NM00027 EQU   DPLB+112
@NM00026 EQU   DPLB+100
@NM00025 EQU   DPLB+90
@NM00024 EQU   DPLB+88
@NM00023 EQU   DPLB+85
@NM00021 EQU   DPLB+80
@NM00020 EQU   DPLB+72
@NM00019 EQU   DPLB+62
@NM00018 EQU   DPLB+60
@NM00017 EQU   DPLB+57
@NM00015 EQU   DPLB+52
@NM00014 EQU   DPLB+44
@NM00013 EQU   DPLB+34
@NM00012 EQU   DPLB+32
@NM00011 EQU   @NM00010
@NM00009 EQU   DPLB+16
@NM00008 EQU   DPLB+12
UADSADRF EQU   DNOBD+4
@NM00007 EQU   DNOBD+1
UADSACTR EQU   DNOBD
@NM00006 EQU   DPOBD+1
UADSPCTR EQU   DPOBD
@NM00005 EQU   UADSNWD1
@NM00004 EQU   DHED+40
UADSDEST EQU   DHED+32
UADSPERP EQU   DHED+28
UADSUPTP EQU   DHED+20
UADSINST EQU   DHED+18
@NM00003 EQU   UADSATTR
USATR03  EQU   UADSATTR
USATR02  EQU   UADSATTR
USATR01  EQU   UADSATTR
USATR00  EQU   UADSATTR
UADSMAXC EQU   UADSMHDR+14
@NM00002 EQU   UADSBN01+1
UADSEXPF EQU   UADSBN01+1
UADSNUSP EQU   UADSBN01+1
@NM00001 EQU   UADSBN01
UADSUSER EQU   UADSMHDR+4
UADSFSQP EQU   UADSMHDR+2
UADSBLNG EQU   UADSMHDR
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00061 EQU   LOCDPP3
@RT00066 EQU   LOCDPP3
@RT00078 EQU   FRESP2
@RT00104 EQU   NEPREL
@RT00108 EQU   DEL32END
@RT00116 EQU   NEPREL
@RT00118 EQU   NEPREL
@RT00166 EQU   NAMFD
@RF00166 EQU   @RC00163
@RT00169 EQU   NAMFD
@RT00201 EQU   FREOB
@RT00211 EQU   FREOB
@RT00214 EQU   FREOB
@RF00239 EQU   @EL00003
@PB00004 EQU   @EL00001
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IKJEFA32
