         TITLE 'ISTSC02D,PLINK FUNCTION FOR THE OLT SECTION'
ISTSC02D CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ISTSC02D  78.337'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
*                                                                  0041
*   /*****************************************************************/
*   /*                                                               */
*   /* BEGINNING OF EXECUTABLE CODE                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0042
*   SVESC02D(2)=R13;                /* SET UP BACK POINTER           */
         ST    R13,SVESC02D+4(,WAPTR)                              0042
*   BACKSAVE(3)=ADDR(SVESC02D);     /* PUT FORWARD CHAIN IN LAST     */
         LA    @14,SVESC02D(,WAPTR)                                0043
         ST    @14,BACKSAVE+8(,R13)                                0043
*   R13=ADDR(SVESC02D);             /* POINT TO SAVE AREA FOR MOD    */
         LR    R13,@14                                             0044
*   PLIMAP=R1;                      /* SETUP BASE TO PARM LIST       */
         LR    PLIMAP,R1                                           0045
*   RC=0;                           /* SET GOOD RETURN CODE          */
         SLR   RC,RC                                               0046
*   IF $PLNKDL='1'B THEN            /* IF DELETE REQUEST, RETURN     */
         TM    $PLNKDL(PLIMAP),B'00001000'                         0047
         BO    @RT00047                                            0047
*     GO TO S2DC0090;               /* GO TO COMMON MODULE RETURN    */
*   RC=8;                           /* SET ERROR RETURN CODE         */
         LA    RC,8                                                0049
*   IF $PLNKLD='0'B×$PLNKLOD=0 THEN /* IF THERE IS PARM LIST ERR     */
         TM    $PLNKLD(PLIMAP),B'10000000'                         0050
         BZ    @RT00050                                            0050
         CLI   $PLNKLOD(PLIMAP),0                                  0050
         BE    @RT00050                                            0050
*     GO TO S2DC0090;               /* GO TO COMMON MODULE RETURN    */
*   RC=0;                           /* SET GOOD RETURN CODE          */
*                                                                  0052
         SLR   RC,RC                                               0052
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING LOOP IS EXECUTED ONCE FOR EVERY MODULE THAT     */
*   /* APPEARS IN THE PLINK PARAMETER LIST. IF APPROPRIATE, IT LOOKS */
*   /* IN THE MORECORE CHAIN, AND IF IT FINDS IT THERE, IT PASSES    */
*   /* BACK THAT ADDRESS FOR AN ENTRYPOINT. OTHERWISE, THE MODULE IS */
*   /* LOADED INTO THE MORECORE AREA IF AVAILABLE OR INTO THE OLTAREA*/
*   /* IF THERE IS NO MORECORE AREA.                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0053
*   DO INDEX=1 TO $PLNKLOD;         /* LOAD ALL PLINK MODULES        */
         LA    INDEX,1                                             0053
         B     @DE00053                                            0053
@DL00053 DS    0H                                                  0054
*     LDRNAME=$PLNMOD(INDEX);       /* PUT IN THIS MOD NAME          */
         LR    @14,INDEX                                           0054
         SLA   @14,3                                               0054
         ALR   @14,PLIMAP                                          0054
         MVC   LDRNAME(8),$PLNMOD-8(@14)                           0054
*     RESPECIFY                                                    0055
*       COREMANG BASED(MS);         /* SETUP PROPER POINTER TO CHAIN */
*                                                                  0055
*     /***************************************************************/
*     /*                                                             */
*     /* IF THERE HAS BEEN A MORECORE ISSUED, AND THE BIT INDICATES  */
*     /* THERE MIGHT BE A MORECORE PLINK MODULE, CHECK THE CHAIN FOR */
*     /* THE MODULE IN QUESTION. STOP WHEN THE CHAIN POINTER IS A    */
*     /* ZERO.                                                       */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0056
*     IF $FSTMCIS='1'B&#PLKMCOR='1'B&$PLNKPM='0'B THEN/* CHECK TO SEE
*                                      IF THE MORECORE CHAIN SHOULD
*                                      BE CHECKED                    */
         TM    $FSTMCIS(WAPTR),B'00000100'                         0056
         BNO   @RF00056                                            0056
         L     @14,$LOWADDR(,WAPTR)                                0056
         LH    @09,RTNDISP(,@14)                                   0056
         ALR   @09,@14                                             0056
         TM    #PLKMCOR(@09),B'00100000'                           0056
         BNO   @RF00056                                            0056
         TM    $PLNKPM(PLIMAP),B'00100000'                         0056
         BNZ   @RF00056                                            0056
*       DO MS=$FRELPTR BY 0 WHILE(MS^=0);/* SCAN THE CHAIN FOR THE 0057
*                                      MODULE                        */
         L     MS,$FRELPTR(,WAPTR)                                 0057
         B     @DE00057                                            0057
@DL00057 DS    0H                                                  0058
*         IF PLMC='1'B&BUFFER(1:8)=LDRNAME THEN/* IF FILL MATCH,   0058
*                                      ALTER POINTERS                */
         TM    PLMC(MS),B'00000010'                                0058
         BNO   @RF00058                                            0058
         CLC   BUFFER(8,MS),LDRNAME                                0058
         BNE   @RF00058                                            0058
*           DO;                     /* SET POINTER TO MORECORE AREA  */
*             MS=ADDR(BUFFER);      /* FIRST BYTE OF AREA IS FIRST 0060
*                                      BYTE OF MODULE                */
         LA    @14,BUFFER(,MS)                                     0060
         LR    MS,@14                                              0060
*             GO TO S2DC0030;       /* DONE FOR THIS PLINK MODULE    */
         B     S2DC0030                                            0061
*           END;                    /* END OF MATCH CODE             */
*         MS=COREFWDN;              /* SET POINTER TO NEXT AREA IN 0063
*                                      CHAIN                         */
@RF00058 L     MS,COREFWDN(,MS)                                    0063
*       END;                        /* END OF MORECORE CHAIN SCAN    */
*                                                                  0064
@DE00057 LTR   MS,MS                                               0064
         BNZ   @DL00057                                            0064
*     /***************************************************************/
*     /*                                                             */
*     /* IF IT IS NOT IN MORECORE CHAIN, GET ALL PERTINENT INFO ABOUT*/
*     /* MODULE SO IT CAN BE DETERMINED IF IT WILL FIT AND IF THERE  */
*     /* IS MORECORE SPACE FOR IT                                    */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0065
*     LDRADR=$LOWADDR;              /* PUT IN LOAD ADDRESS           */
@RF00056 L     @14,$LOWADDR(,WAPTR)                                0065
         ST    @14,LDRADR                                          0065
*     LDRCOMP='1'B;                 /* COMPUTE SIZE OF MODULE        */
         OI    LDRCOMP,B'01000000'                                 0066
*     R1=ADDR(LDRPARM);             /* POINT TO PARMLIST             */
         LA    R1,LDRPARM                                          0067
*     CALL ISTCC013;                /* CALL LOADER FOR SIZE          */
         L     @15,@CV00353                                        0068
         BALR  @14,@15                                             0068
*     IF R15=12 THEN                /* SET RET CODE IF NOT FOUND     */
         C     R15,@CF00161                                        0069
         BE    @RT00069                                            0069
*       GO TO S2DC0050;             /* RETURN CODE OF 12             */
*     IF R15^=0 THEN                /* SET I/O ERROR RETURN CODE     */
         LTR   R15,R15                                             0071
         BNZ   @RT00071                                            0071
*       GO TO S2DC0040;             /* RETURN CODE OF 8              */
*                                                                  0072
*     /***************************************************************/
*     /*                                                             */
*     /* IF THE PLINK MODULE CAN BE PUT INTO MORECORE, AND IF THE    */
*     /* ROOT WANTS IT TO BE PUT INTO MORECORE, THEN TRY TO GET SPACE*/
*     /* FOR THE MODULE FROM THE MORECORE MODULE. IF THE SPACE CAN BE*/
*     /* GOTTEN, CREATE A LOAD ADDRESS SUCH THAT THE PLINK MODULE    */
*     /* WILL END UP AT THE FIRST BYTE OF THE MORECORE AREA          */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0073
*     IF $PLNKPM='0'B&#PLKMCOR='1'B THEN                           0073
         TM    $PLNKPM(PLIMAP),B'00100000'                         0073
         BNZ   @RF00073                                            0073
         L     @14,$LOWADDR(,WAPTR)                                0073
         LH    @09,RTNDISP(,@14)                                   0073
         ALR   @09,@14                                             0073
         TM    #PLKMCOR(@09),B'00100000'                           0073
         BNO   @RF00073                                            0073
*       DO;                         /* ANY PLINK IN MORECORE AREA?   */
*         MCORMAX=R0;               /* SET MAX TO SIZE OF OLT        */
         ST    R0,MCORMAX                                          0075
*         MCORMIN=R0;               /* SET MIN TO SIZE OF OLT        */
         ST    R0,MCORMIN                                          0076
*         R0SAVE=R0;                /* SAVE R0 ACROSS MORECORE CALL  */
         LR    R0SAVE,R0                                           0077
*         R1SAVE=R1;                /* SAVE R1 ACROSS MORECORE CALL  */
         LR    R1SAVE,R1                                           0078
*         R1=ADDR(MCORELST);        /* POINT TO PARAMETER LIST       */
         LA    R1,MCORELST                                         0079
*         CALL ISTSC02C;            /* TRY TO GET THE CORE REQUIRED  */
         L     @15,@CV00356                                        0080
         BALR  @14,@15                                             0080
*         MCRPTR=R1;                /* SAVE TENATIVE CORE POINTER    */
         LR    MCRPTR,R1                                           0081
*         R0=R0SAVE;                /* RESTORE R0 FROM BEFORE CALL   */
         LR    R0,R0SAVE                                           0082
*         R1=R1SAVE;                /* RESTORE R1 FROM BEFORE CALL   */
         LR    R1,R1SAVE                                           0083
*         IF R15=0 THEN                                            0084
         LTR   R15,R15                                             0084
         BNZ   @RF00084                                            0084
*           DO;                     /* IF WE GOT CORE, ALTER POINTERS*/
*             RESPECIFY                                            0086
*               COREMANG BASED(MCRPTR-8);/* SET PROPER POINTER TO  0086
*                                      CORE                          */
*             LDRADR=ADDR(BUFFER)-(R1-$LOWADDR);/* BACK UP BY      0087
*                                      RELATIVE DISPLACEMENT         */
         LR    @14,MCRPTR                                          0087
         SL    @14,@CF00040                                        0087
         LA    @09,BUFFER(,@14)                                    0087
         LR    @04,R1                                              0087
         SL    @04,$LOWADDR(,WAPTR)                                0087
         LCR   @04,@04                                             0087
         ALR   @04,@09                                             0087
         ST    @04,LDRADR                                          0087
*             R1=ADDR(BUFFER);      /* SET MODULE TO START AT      0088
*                                      MORECORE AREA                 */
         LR    R1,@09                                              0088
*             PLMC='1'B;            /* SHOW MORECORE AREA HAS PLINK
*                                      IN                            */
         OI    PLMC(@14),B'00000010'                               0089
*           END;                    /* END OF CORE GOTTEN SECTION    */
*       END;                        /* END OF TRYING TO PUT PLINK IN
*                                      MORECORE AREA                 */
*                                                                  0091
@RF00084 DS    0H                                                  0092
*     /***************************************************************/
*     /*                                                             */
*     /* MAKE SURE THE MODULE WILL FIT IN THE AREA ALLOWED TO THE    */
*     /* OLT. IF IT WILL, GO TO THE LOADER TO BRING IT IN. STORE THE */
*     /* RETURN CODE IN A TEMPORARY AREA AND GIVE THE OLT THE LAST   */
*     /* NON-ZERO RETURN CODE GENERATED. STORE THE ENTRY ADDRESS IN  */
*     /* THE ENTRYPOINT TABLE PASSED IN THE PARAMETER LIST.          */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0092
*     IF R1+R0>$HIGHADR THEN        /* IF MODULE WONT FIT, ERROR     */
@RF00073 LR    @14,R1                                              0092
         ALR   @14,R0                                              0092
         C     @14,$HIGHADR(,WAPTR)                                0092
         BH    @RT00092                                            0092
*       GO TO S2DC0045;             /* SET RETURN CODE OF 16         */
*     MS=R1;                        /* GET BEGINNING OF PLINK MOD    */
         LR    MS,R1                                               0094
*     LDRCOMP='0'B;                 /* ALL OK, LOAD                  */
         NI    LDRCOMP,B'10111111'                                 0095
*     R1=ADDR(LDRPARM);             /* POINT TO PARMLIST             */
         LA    R1,LDRPARM                                          0096
*     CALL ISTCC013;                /* LOAD PLINK MODULE             */
         L     @15,@CV00353                                        0097
         BALR  @14,@15                                             0097
*     IF R15^=0 THEN                /* SET I/O ERROR RETURN CODE     */
         LTR   R15,R15                                             0098
         BNZ   @RT00098                                            0098
*       GO TO S2DC0040;             /* SET RETRUN CODE TO 8          */
*S2DC0030:                                                         0100
*     $PLNKEPL(INDEX)=MS->INST;     /* PUT ENTRYPOINT IN LIST        */
S2DC0030 LR    @14,INDEX                                           0100
         SLA   @14,2                                               0100
         L     @09,$PLNKENP(,PLIMAP)                               0100
         L     @04,INST(,MS)                                       0100
         AL    @09,@CF00379                                        0100
         ST    @04,$PLNKEPL(@14,@09)                               0100
*     GO TO S2DC0060;               /* DO NEXT PLINK MODULE          */
         B     S2DC0060                                            0101
*S2DC0040:                                                         0102
*     RC=8;                         /* I/O ERROR LOADING,TRY NEXT    */
S2DC0040 LA    RC,8                                                0102
*     GO TO S2DC0060;               /* DO NEXT PLINK MODULE          */
         B     S2DC0060                                            0103
*S2DC0045:                                                         0104
*     RC=16;                        /* NO SPACE FOR MODULE           */
S2DC0045 LA    RC,16                                               0104
*     GO TO S2DC0060;               /* DO NEXT PLINK MODULE          */
*                                                                  0105
         B     S2DC0060                                            0105
*     /***************************************************************/
*     /*                                                             */
*     /* IF THE MODULE COULD NOT BE FOUND, GIVE A BAD RETURN CODE AND*/
*     /* ISSUE THE MSG 253I TO INFORM THE OPERATOR WHAT MODULE WAS   */
*     /* NOT FOUND.                                                  */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0106
*S2DC0050:                                                         0106
*     RC=12;                        /* MODULE NOT FOUND              */
S2DC0050 LA    RC,12                                               0106
*     $INBUFR(1:8)=$PLNMOD(INDEX);  /* MODULE NAME FOR MESSAGE       */
*                                                                  0107
         LR    @14,INDEX                                           0107
         SLA   @14,3                                               0107
         ALR   @14,PLIMAP                                          0107
         MVC   $INBUFR(8,WAPTR),$PLNMOD-8(@14)                     0107
*     /***************************************************************/
*     /*                                                             */
*     /* TCEC MSGN(253)SUB(YES) INVOKED                              */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0108
*     $TCECM='1'B;                  /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0108
*     R1=ADDR($TCA05);              /* SET UP PARM LIST $TR          */
         LA    R1,$TCA05                                           0109
*     CALL #EXIT;                   /* CALL CECOM                    */
         L     @15,#EXITA(,WAPTR)                                  0110
         BALR  @14,@15                                             0110
*     DCL                                                          0111
*       1 $TCA05,                   /* TCEC PARM LIST                */
*        2 $TCB05 FIXED(32) INIT(253),/* MSG NUMBER                  */
*        2 $TCC05 FIXED(32) INIT(0),/* INCT LEN                      */
*        2 $TCD05 BIT(8) INIT('10000000'B),/* FLAG                   */
*        2 $TCE05 CHAR(4) INIT('FFFFFFFF'X);/* MSSAGE MASK           */
*S2DC0060:                                                         0112
*   END;                            /* END OF PLINK LOOP             */
S2DC0060 AL    INDEX,@CF00070                                      0112
@DE00053 SLR   @14,@14                                             0112
         IC    @14,$PLNKLOD(,PLIMAP)                               0112
         CR    INDEX,@14                                           0112
         BNH   @DL00053                                            0112
*S2DC0090:                                                         0113
*   R15=RC;                         /* SET ACTUAL RETURN CODE        */
S2DC0090 LR    R15,RC                                              0113
*   R13=SVESC02D(2);                /* PICK UP PREVIOUS SAVEAREA     */
         L     R13,SVESC02D+4(,WAPTR)                              0114
*   DO;                             /* ATDSPLY                       */
*   END;                            /* ATDSPLY                       */
*   END ISTSC02D;                   /* END OF PLINK FUNCTION         */
@EL00001 DS    0H                                                  0117
@EF00001 DS    0H                                                  0117
@ER00001 L     @14,12(,@13)                                        0117
         LM    @00,@12,20(@13)                                     0117
         BR    @14                                                 0117
@DATA    DS    0H
         DS    0F
         DS    0F
@CF00070 DC    F'1'
@CF00040 DC    F'8'
@CF00161 DC    F'12'
@CF00379 DC    F'-4'
@CV00353 DC    V(ISTCC013)
@CV00356 DC    V(ISTSC02C)
         DS    0D
MCORELST DS    CL12
         ORG   MCORELST
@NM00031 DC    X'0102F4F2'
MCORMAX  DS    FL4
MCORMIN  DS    FL4
         ORG   MCORELST+12
LDRPARM  DS    CL8
         ORG   LDRPARM
@NM00035 DS    CL4
@NM00036 DC    AL4(LDRPARME)
         ORG   LDRPARM+8
LDRPARME DS    CL16
         ORG   LDRPARME
LDRNAME  DS    CL8
LDRADR   DS    AL4
@NM00037 DC    X'80'
         ORG   @NM00037
LDRPLINK DS    BL1
LDRCOMP  EQU   @NM00037+0
@NM00038 EQU   @NM00037+0
         ORG   LDRPARME+13
@NM00039 DS    CL1
@NM00040 DC    H'0'
         ORG   LDRPARME+16
$TCA05   DS    CL13
         ORG   $TCA05
$TCB05   DC    A(253)
$TCC05   DC    A(0)
$TCD05   DC    B'10000000'
$TCE05   DC    X'FFFFFFFF'
         ORG   $TCA05+13
         DS    CL3
PATCH    DC    40F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
INDEX    EQU   @08
R0SAVE   EQU   @10
RC       EQU   @07
MCRPTR   EQU   @05
R1SAVE   EQU   @09
MS       EQU   @05
PLIMAP   EQU   @06
WAPTR    EQU   @02
R0       EQU   @00
R1       EQU   @01
R13      EQU   @13
R15      EQU   @15
TOLTEPWA EQU   0
$CDA     EQU   TOLTEPWA+100
$RCA     EQU   $CDA+44
$OLTPTR  EQU   $CDA+52
$LOWADDR EQU   $OLTPTR
$HIMOREC EQU   $CDA+60
$HIGHADR EQU   $HIMOREC
$FRELPTR EQU   $CDA+64
$COMMFLG EQU   TOLTEPWA+224
$FLAG6   EQU   $COMMFLG+5
$FSTMCIS EQU   $FLAG6
$ABNDBIT EQU   $FLAG6
$FLAG8   EQU   $COMMFLG+7
$TCECM   EQU   $FLAG8
$INBUFR  EQU   TOLTEPWA+2104
#EXITA   EQU   TOLTEPWA+2632
$CCOMDAT EQU   TOLTEPWA+2644
$CFLGS   EQU   $CCOMDAT+16
$24FEMSG EQU   TOLTEPWA+2681
$24CATMG EQU   $24FEMSG+11
@NM00021 EQU   TOLTEPWA+2776
$OUNTPTR EQU   @NM00021+4
$NSPTR   EQU   $OUNTPTR
$NSCNT   EQU   @NM00021+10
$ENXX    EQU   @NM00021+15
$IMITX   EQU   $ENXX
SVESC033 EQU   TOLTEPWA+3160
SVECC013 EQU   TOLTEPWA+3232
SVEIC003 EQU   TOLTEPWA+3592
SVESC022 EQU   TOLTEPWA+3736
SVECC011 EQU   TOLTEPWA+4024
#EXIT    EQU   0
PLINKMAP EQU   0
$PLNKENP EQU   PLINKMAP+4
@NM00024 EQU   PLINKMAP+8
$PLNKLD  EQU   @NM00024
$PLNKPM  EQU   @NM00024
$PLNKDL  EQU   @NM00024
$PLNKLOD EQU   PLINKMAP+10
$PLNMOD  EQU   PLINKMAP+12
$PLNKEPL EQU   0
@NM00027 EQU   0
RTNDISP  EQU   @NM00027+10
INST     EQU   @NM00027+12
$NEWSPRF EQU   0
#FLAGS   EQU   $NEWSPRF+16
#PLKMCOR EQU   #FLAGS
BACKSAVE EQU   0
COREMANG EQU   0
CORESZEN EQU   COREMANG
PLMC     EQU   CORESZEN+3
COREFWDN EQU   COREMANG+4
BUFFER   EQU   COREMANG+8
OLTENTRY EQU   0
SVESC02D EQU   SVESC022
SVECC012 EQU   SVESC022
SVEIC00A EQU   SVEIC003
SVEIC004 EQU   SVEIC003
SVEIC005 EQU   SVEIC003
SVESC02A EQU   SVESC022
SVESC02B EQU   SVESC022
SVESC02E EQU   SVESC022
SVESC02F EQU   SVECC013
SVESC024 EQU   SVESC022
SVESC027 EQU   SVESC022
SVESC029 EQU   SVESC033
SVESC031 EQU   SVECC013
SVESC032 EQU   SVECC011
SVETC037 EQU   SVEIC003
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
FREEN    EQU   CORESZEN+3
@NM00034 EQU   CORESZEN+3
@NM00033 EQU   CORESZEN+3
@NM00032 EQU   CORESZEN
$RME     EQU   $NEWSPRF+36
@NM00030 EQU   $NEWSPRF+35
$ECA     EQU   $NEWSPRF+32
$DCHB    EQU   $NEWSPRF+28
$MOSIZE  EQU   $NEWSPRF+24
$RTSIZE  EQU   $NEWSPRF+20
$COUNT   EQU   $NEWSPRF+18
$REFNUM  EQU   $NEWSPRF+17
@NM00029 EQU   #FLAGS
#MSGIDRQ EQU   #FLAGS
@NM00028 EQU   #FLAGS
$VIRTUAL EQU   #FLAGS
$PLINK$  EQU   $NEWSPRF+12
$SCTREQ  EQU   $NEWSPRF+11
$RM      EQU   $NEWSPRF+9
$CTYPE   EQU   $NEWSPRF+8
$CCLASS  EQU   $NEWSPRF+7
$CFEAT   EQU   $NEWSPRF+6
$CMODEL  EQU   $NEWSPRF+5
$TYPE    EQU   $NEWSPRF+4
$CLASS   EQU   $NEWSPRF+3
$FEAT    EQU   $NEWSPRF+2
$MODEL   EQU   $NEWSPRF+1
$RTN#    EQU   $NEWSPRF
#MSGID   EQU   @NM00027+16
LEVEL    EQU   @NM00027+8
SECTID   EQU   @NM00027
$PLNKDEL EQU   PLINKMAP+11
$PLNKCOR EQU   PLINKMAP+9
$PLNKSC  EQU   @NM00024
@NM00026 EQU   @NM00024
$PLNKRT  EQU   @NM00024
@NM00025 EQU   @NM00024
$PLNKCL  EQU   @NM00024
$PLNIDNT EQU   PLINKMAP+2
$PLNLEVL EQU   PLINKMAP+1
$PLNTRMG EQU   PLINKMAP
SVECC010 EQU   TOLTEPWA+3952
SVETC035 EQU   TOLTEPWA+3880
SVESC030 EQU   TOLTEPWA+3808
SVESC020 EQU   TOLTEPWA+3664
SVEIC002 EQU   TOLTEPWA+3520
SVECC014 EQU   TOLTEPWA+3376
SVESC120 EQU   TOLTEPWA+3304
SVESC025 EQU   TOLTEPWA+3088
@NM00023 EQU   TOLTEPWA+2980
$RPLERR  EQU   TOLTEPWA+2977
@NM00022 EQU   TOLTEPWA+2976
$R13PR3  EQU   TOLTEPWA+2972
$CEINT2  EQU   TOLTEPWA+2968
$CEINT1  EQU   TOLTEPWA+2964
$MSGGET  EQU   TOLTEPWA+2960
$ACQLIST EQU   TOLTEPWA+2956
$R4SAVE1 EQU   TOLTEPWA+2952
$CLSISS  EQU   TOLTEPWA+2950
$CLSCNT  EQU   TOLTEPWA+2948
$CUTABLE EQU   TOLTEPWA+2868
$BUFSZ2  EQU   TOLTEPWA+2864
$RESID2  EQU   TOLTEPWA+2860
$OLTCCW2 EQU   TOLTEPWA+2856
$ENDBFR2 EQU   TOLTEPWA+2852
$1STBFR2 EQU   TOLTEPWA+2848
$TECB2   EQU   TOLTEPWA+2844
$BUFSZ1  EQU   TOLTEPWA+2840
$RESID1  EQU   TOLTEPWA+2836
$OLTCCW1 EQU   TOLTEPWA+2832
$ENDBFR1 EQU   TOLTEPWA+2828
$1STBFR1 EQU   TOLTEPWA+2824
$TECB1   EQU   TOLTEPWA+2820
$WAITIME EQU   TOLTEPWA+2816
$TRTN#   EQU   TOLTEPWA+2815
$WIODEV  EQU   TOLTEPWA+2814
$RQSTSZE EQU   TOLTEPWA+2812
$RQSTPTR EQU   TOLTEPWA+2808
$R4SAVE  EQU   TOLTEPWA+2804
$PARTADR EQU   TOLTEPWA+2800
$TBSDATA EQU   TOLTEPWA+2796
$CTWIDTH EQU   TOLTEPWA+2795
$CTLINE  EQU   TOLTEPWA+2794
$APWIDTH EQU   TOLTEPWA+2793
$APLINE  EQU   TOLTEPWA+2792
$INDEX   EQU   $IMITX
$UMXX    EQU   @NM00021+14
$NSXX    EQU   @NM00021+12
$ATACNT  EQU   $NSCNT
$CTR     EQU   @NM00021+8
$ATAPTR  EQU   $NSPTR
$DDRPTR  EQU   @NM00021
$DTORESP EQU   TOLTEPWA+2712
$APNAME  EQU   TOLTEPWA+2704
$24SYMNE EQU   $24CATMG+4
$24DEVAD EQU   $24CATMG
$24RTN#  EQU   $24FEMSG+8
$ESECTID EQU   $24FEMSG
$24FLGS  EQU   TOLTEPWA+2680
$24SAVE2 EQU   TOLTEPWA+2676
$24SAVE1 EQU   TOLTEPWA+2672
$24UNADR EQU   TOLTEPWA+2668
$24SAV13 EQU   TOLTEPWA+2664
$24RETCD EQU   TOLTEPWA+2663
$MACID   EQU   TOLTEPWA+2661
$CSPARE  EQU   $CFLGS
$C2WAY   EQU   $CFLGS
$CINCT   EQU   $CCOMDAT+12
$CINADR  EQU   $CCOMDAT+8
$COUTCT  EQU   $CCOMDAT+4
$COUTAD  EQU   $CCOMDAT
ROOTLOC  EQU   TOLTEPWA+2640
$RETREG  EQU   TOLTEPWA+2636
$WORK    EQU   TOLTEPWA+2376
$EXTA    EQU   TOLTEPWA+2320
$PASSONA EQU   TOLTEPWA+2264
$TRMINPT EQU   TOLTEPWA+2184
$BUFFER  EQU   TOLTEPWA+1976
$TLTRPL3 EQU   TOLTEPWA+1856
$TLTRPL2 EQU   TOLTEPWA+1736
$TLTRPL1 EQU   TOLTEPWA+1616
$SLTBL   EQU   TOLTEPWA+1468
@NM00020 EQU   TOLTEPWA+1464
$DEVTBLE EQU   TOLTEPWA+240
@NM00019 EQU   $COMMFLG+15
@NM00018 EQU   $COMMFLG+14
@NM00017 EQU   $COMMFLG+13
@NM00016 EQU   $COMMFLG+12
@NM00015 EQU   $COMMFLG+11
@NM00014 EQU   $COMMFLG+10
@NM00013 EQU   $COMMFLG+9
@NM00012 EQU   $COMMFLG+8
$VS2     EQU   $FLAG8
$VS1     EQU   $FLAG8
$EDOS    EQU   $FLAG8
@NM00011 EQU   $FLAG8
$TWOWAY  EQU   $FLAG8
@NM00010 EQU   $FLAG8
@NM00009 EQU   $COMMFLG+6
$CIREQ   EQU   $FLAG6
$ABTERM  EQU   $ABNDBIT
$DISCREQ EQU   $FLAG6
$DISCISS EQU   $FLAG6
$CHANGE  EQU   $FLAG6
$CTERROR EQU   $FLAG6
$RECAL11 EQU   $FLAG6
@NM00008 EQU   $COMMFLG+4
@NM00007 EQU   $COMMFLG+3
@NM00006 EQU   $COMMFLG+2
@NM00005 EQU   $COMMFLG+1
@NM00004 EQU   $COMMFLG
@NM00003 EQU   $CDA+120
$CUCNT   EQU   $CDA+118
@NM00002 EQU   $CDA+117
$PRTFORM EQU   $CDA+116
$OPISCNT EQU   $CDA+114
$OPNDCNT EQU   $CDA+112
$GETMSZE EQU   $CDA+110
$GRCNTS  EQU   $CDA+108
$CTLCNT  EQU   $CDA+106
$ACTLVL  EQU   $CDA+105
$PRNTLVL EQU   $CDA+104
$ERRCNTA EQU   $CDA+102
$TLCNT   EQU   $CDA+100
$TIMEALW EQU   $CDA+96
$PTRAREA EQU   $CDA+92
$GETMPTR EQU   $CDA+88
$R13PTRT EQU   $CDA+84
$R13PTR  EQU   $CDA+80
$TEPEND  EQU   $CDA+76
$PLINKDL EQU   $CDA+72
$TEPBEGN EQU   $CDA+68
$LOMOREC EQU   $CDA+56
$ENDCOMM EQU   $CDA+48
$COMMON  EQU   $RCA
$SLASHAD EQU   $CDA+32
$PASSON  EQU   $CDA+28
$TOLBRTB EQU   $CDA+24
$SCTPTR8 EQU   $CDA+20
$SCTPTR  EQU   $CDA+16
$TBWDPTR EQU   $CDA+12
$TFWDPTR EQU   $CDA+8
@NM00001 EQU   $CDA
$SCTTBLE EQU   TOLTEPWA
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00047 EQU   S2DC0090
@RT00050 EQU   S2DC0090
@RT00069 EQU   S2DC0050
@RT00071 EQU   S2DC0040
@RT00092 EQU   S2DC0045
@RT00098 EQU   S2DC0040
@ENDDATA EQU   *
         END   ISTSC02D,(C'PLS1516',0702,78337)
