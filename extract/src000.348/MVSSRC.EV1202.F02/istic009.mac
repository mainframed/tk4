         TITLE 'ISTIC009,CHANGE - ALLOWS CHANGE TO AN EXISTING CDS'
ISTIC009 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ISTIC009  78.336'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @12,@SA00001                                        0001
         ST    @12,8(,@13)                                         0001
         LR    @13,@12                                             0001
         EJECT
OPENFLAG EQU  48
GOODOPEN EQU  16
         EJECT
         EJECT
I009C01  DS    0H                                                  0075
*   CDSWKPTR=$LOWADDR;              /* SET UP BASE                   */
         L     @15,$LOWADDR(,WAPTR)                                0075
         ST    @15,CDSWKPTR                                        0075
*   CDSWKPTR=CDSWKPTR+80;           /* GET CDS WORK AREA OFFSET      */
         AH    @15,@CH00075                                        0076
         ST    @15,CDSWKPTR                                        0076
*   IF $REMSW^='1'B THEN            /* IF ITS NOT A REMOTE REQ       */
         TM    $REMSW(WAPTR),B'01000000'                           0077
         BNO   @RT00077                                            0077
*     GOTO I009C01A;                /* THEN BR AROUND                */
*   CDSSYMB='1'B;                   /* TURN ON SYMBOLIC BIT          */
*   CDSREMSY='1'B;                  /* TURN ON REMOTE BIT            */
         OI    CDSSYMB(@15),B'00001010'                            0080
*I009C01A:                                                         0081
*   DCL                                                            0081
*     1 ZZZGTPRM BDY(WORD),         /* GETCONFG PARAMETER LIST       */
*      2 * CHAR(4) INIT('0102F1F6'X),                              0081
*      2 ZZZGTCD PTR,               /* POINTER TO BASIC CDS INFO     */
*      2 ZZZGTAD PTR,               /* POINTER TO RECEIVING BUFFER   */
*      2 ZZZGTCT FIXED(8);          /* NUMBER OF CDS BYTES NEEDED    */
I009C01A DS    0H                                                  0082
*   ZZZGTAD=ADDR(CDSUA);            /* POINTER TO RECEIVING BUFFER   */
         L     @15,CDSWKPTR                                        0082
         ST    @15,ZZZGTAD                                         0082
*   ZZZGTCD=ADDR(CDSUA);            /* POINTER TO BASIC CDS INFO     */
         ST    @15,ZZZGTCD                                         0083
*   ZZZGTCT=20;                     /* NUMBER OF BYTES NEEDED        */
         MVI   ZZZGTCT,X'14'                                       0084
*   R1=ADDR(ZZZGTPRM);              /* POINT TO THE PARM LIST        */
         LA    R1,ZZZGTPRM                                         0085
*   CALL ISTSC029;                  /* CALL THE GETCONFG FUNCTION    */
         L     @15,@CV00771                                        0086
         BALR  @14,@15                                             0086
*   IF R15^=12 THEN                                                0087
         CH    R15,@CH00081                                        0087
         BNE   @RT00087                                            0087
*     GOTO I009C02;                 /* BR AROUND                     */
*I009C01B:                                                         0089
*                                                                  0089
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(572) INVOKED                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0089
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I009C01B OI    $TCECM(WAPTR),B'00000001'                           0089
*   R1=ADDR($TCA10);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA10                                           0090
*   CALL #EXIT;                     /* CALL CECOM                    */
         L     @15,#EXITA(,WAPTR)                                  0091
         BALR  @14,@15                                             0091
*   DCL                                                            0092
*     1 $TCA10,                     /* TCEC PARM LIST                */
*      2 $TCB10 FIXED(32) INIT(572),/* MSG NUMBER                    */
*      2 $TCC10 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD10 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE10 CHAR(4) INIT('FFFFFFFF'X);/* MSSAGE MASK CDS NOT   0092
*                                      FOUND                         */
*   GOTO I009CRET;                  /* RETURN TO CONTROL MODULE      */
         B     I009CRET                                            0093
*I009C02:                                                          0094
*   OLDCDSLN=CDSBYTCT;              /* SAVE THE ORGINAL BYTE CNT     */
I009C02  L     @15,CDSWKPTR                                        0094
         MVC   OLDCDSLN(1),CDSBYTCT(@15)                           0094
*   IF $REMSW='1'B                  /* IF ITS A REMOTE REQUEST       */
*     THEN                                                         0095
         TM    $REMSW(WAPTR),B'01000000'                           0095
         BNO   @RF00095                                            0095
*     DO;                                                          0096
*       DCBPTR=ADDR(RDREMCDS);      /* THEN SET UP DCB POINTER       */
         LA    DCBPTR,RDREMCDS                                     0097
*       STOWNAME=CDSSYMBN;          /* SET UP STOW NAME              */
         MVC   STOWNAME(8),CDSSYMBN(@15)                           0098
*     END;                                                         0099
*   ELSE                            /* OTHERWISE SET PTR             */
*     DO;                                                          0100
         B     @RC00095                                            0100
@RF00095 DS    0H                                                  0101
*       DCBPTR=ADDR(RDLOCCDS);      /* TO POINT TO LOCAL CDS         */
*                                                                  0101
         LA    DCBPTR,RDLOCCDS                                     0101
*       /*************************************************************/
*       /*                                                           */
*       /* ITACONV FROM(CDSUA)TO(STOWNAME)COUNT(4)TYPE(HE) INVOKED   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0102
*       DCL                                                        0102
*         1 ITATCPRM BDY(WORD),     /* CONVERT PARAMETER LIST        */
*          2 * CHAR(4) INIT('0102F4F1'X),                          0102
*          2 ITATCFR PTR,           /* ADDRESS OF FROM FIELD         */
*          2 ITATCTO PTR,           /* ADDRESS OF TO FIELD           */
*          2 * BIT(8) INIT(0),      /* FLAGS FOR CONVERT MODULE      */
*           3 ITATCTP BIT(1),       /* TYPE OF CONVERT REQUIRED      */
*          2 ITATCNT FIXED(8);      /* NUMBER OF BYTES TO CONVERT    */
*       ITATCFR=ADDR(CDSUA);        /* SET THE FROM ADDRESS          */
         MVC   ITATCFR(4),CDSWKPTR                                 0103
*       ITATCTO=ADDR(STOWNAME);     /* SET THE TO ADDRESS            */
         LA    @15,STOWNAME                                        0104
         ST    @15,ITATCTO                                         0104
*       ITATCTP='1'B;               /* SET THE TYPE OF CONVERT BIT   */
         OI    ITATCTP,B'10000000'                                 0105
*       ITATCNT=4;                  /* GIVE THE CONVERT BYTE COUNT   */
         MVI   ITATCNT,X'04'                                       0106
*       R1=ADDR(ITATCPRM);          /* POINT TO CONVERT PARM LIST    */
         LA    R1,ITATCPRM                                         0107
*       CALL ISTSC021;              /* CALL CONVERT DIRECTLY         */
         L     @15,@CV00793                                        0108
         BALR  @14,@15                                             0108
*       GEN(MVC STOWNAME(1),UANAME);/* SET UP PREFIX ID              */
         MVC STOWNAME(1),UANAME
*     END;                                                         0110
*   NAMEPTR=ADDR(STOWNAME);         /* GET PTR TO CDS NAME           */
@RC00095 LA    NAMEPTR,STOWNAME                                    0111
*   GEN(BAL LINKR,I009CRD);         /* GO READ ESD,TXT,CDS REC       */
         BAL LINKR,I009CRD
*I009C03:                                                          0113
*   CALL ISTIC00A;                  /* GO CONFIGURE CDS              */
I009C03  L     @15,@CV00795                                        0113
         BALR  @14,@15                                             0113
*   IF $COPY='1'B                   /* IF THIS IS A COPY REQUEST     */
*     THEN                          /*                               */
         TM    $COPY(WAPTR),B'00001000'                            0114
         BNO   @RF00114                                            0114
*     DO;                           /* DO THE FOLLOWING              */
*       ZZZGTAD=ADDR(WKAREA2);      /* POINTER TO RECEIVING BUFFER   */
         LA    @15,WKAREA2                                         0116
         ST    @15,ZZZGTAD                                         0116
*       ZZZGTCD=ADDR(CDSUA);        /* POINTER TO BASIC CDS INFO     */
         MVC   ZZZGTCD(4),CDSWKPTR                                 0117
*       ZZZGTCT=20;                 /* NUMBER OF BYTES NEEDED        */
         MVI   ZZZGTCT,X'14'                                       0118
*       R1=ADDR(ZZZGTPRM);          /* POINT TO THE PARM LIST        */
         LA    R1,ZZZGTPRM                                         0119
*       CALL ISTSC029;              /* CALL THE GETCONFG FUNCTION    */
         L     @15,@CV00771                                        0120
         BALR  @14,@15                                             0120
*       IF R15^=12                  /* IF A CDS ALREADY EXIST        */
*         THEN                      /* THEN DO THE FOLLOWING         */
         CH    R15,@CH00081                                        0121
         BE    @RF00121                                            0121
*         DO;                                                      0122
*                                                                  0122
*           /*********************************************************/
*           /*                                                       */
*           /* TCEC MSGN(576)MSGMSK('40000000'X) INVOKED             */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0123
*           $TCECM='1'B;            /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0123
*           R1=ADDR($TCA13);        /* SET UP PARM LIST $TR          */
         LA    R1,$TCA13                                           0124
*           CALL S20CEC03;          /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00798                                        0125
         BALR  @14,@15                                             0125
*           DCL                                                    0126
*             1 $TCA13,             /* TCEC PARM LIST                */
*              2 $TCB13 FIXED(32) INIT(576),/* MSG NUMBER            */
*              2 $TCC13 FIXED(32) INIT(0),/* INCT LEN                */
*              2 $TCD13 BIT(8) INIT('00000000'B),/* FLAG             */
*              2 $TCE13 CHAR(4) INIT('40000000'X);/* MSSAGE MASK     */
*           GOTO I009CRET;          /* PRT ERROR-CDS EXISTS,DELETE   */
         B     I009CRET                                            0127
*         END;                                                     0128
*       ELSE                        /* IF A CDS DOES NOT EXIST       */
*         DO;                       /* THEN DO THE FOLLOWING         */
@RF00121 DS    0H                                                  0130
*           IF $REMSW='1'B          /* IF THIS IS A REMOTE REQUEST   */
*             THEN                  /* THEN DO THE FOLLOWING         */
         TM    $REMSW(WAPTR),B'01000000'                           0130
         BNO   @RF00130                                            0130
*             DO;                                                  0131
*               STOWNAME=CDSSYMBN;  /* SET UP SYMBOLIC STOW NAME     */
         L     @15,CDSWKPTR                                        0132
         MVC   STOWNAME(8),CDSSYMBN(@15)                           0132
*               ESDNME1=CDSSYMBN;   /* SET UP SYMB NAME IN ESD REC   */
         MVC   ESDNME1(8),CDSSYMBN(@15)                            0133
*             END;                                                 0134
*           ELSE                    /* IF THIS IS NOT A REM REQ      */
*             DO;                   /* THEN DO THE FOLLOWING         */
*                                                                  0135
         B     @RC00130                                            0135
@RF00130 DS    0H                                                  0136
*               /*****************************************************/
*               /*                                                   */
*               /* ITACONV FROM(CDSUA)TO(STOWNAME)COUNT(4)TYPE(HE)   */
*               /* INVOKED                                           */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0136
*               ITATCFR=ADDR(CDSUA);/* SET THE FROM ADDRESS          */
         MVC   ITATCFR(4),CDSWKPTR                                 0136
*               ITATCTO=ADDR(STOWNAME);/* SET THE TO ADDRESS         */
         LA    @15,STOWNAME                                        0137
         ST    @15,ITATCTO                                         0137
*               ITATCTP='1'B;       /* SET THE TYPE OF CONVERT BIT   */
         OI    ITATCTP,B'10000000'                                 0138
*               ITATCNT=4;          /* GIVE THE CONVERT BYTE COUNT   */
         MVI   ITATCNT,X'04'                                       0139
*               R1=ADDR(ITATCPRM);  /* POINT TO CONVERT PARM LIST    */
         LA    R1,ITATCPRM                                         0140
*               CALL ISTSC021;      /* CALL CONVERT DIRECTLY         */
         L     @15,@CV00793                                        0141
         BALR  @14,@15                                             0141
*               GEN(MVC STOWNAME(1),UANAME);/* SET UP PREFIX         */
         MVC STOWNAME(1),UANAME
*               ESDNME1=STOWNAME;   /* SET UP NEW ESD NAME           */
         MVC   ESDNME1(8),STOWNAME                                 0143
*             END;                                                 0144
*         END;                                                     0145
@RC00130 DS    0H                                                  0146
*     END;                                                         0146
*   IF $REMSW='1'B                  /* IF THIS IS A REMOTE REQUEST   */
*     THEN                          /* AND THE SYMBOLIC BIT IS ON    */
@RF00114 TM    $REMSW(WAPTR),B'01000000'                           0147
         BNO   @RF00147                                            0147
*     DO;                           /* AND THE REMOTE BIT IS ON      */
*       IF CDSSYMB='1'B&CDSREMSY='1'B&CDSSYMBN(1:1)^=BLANK THEN    0149
         L     @15,CDSWKPTR                                        0149
         TM    CDSSYMB(@15),B'00001010'                            0149
         BNO   @RF00149                                            0149
         CLC   CDSSYMBN(1,@15),BLANK                               0149
         BNE   @RT00149                                            0149
*         GOTO I009C04;             /* THEN IT OK-CONTINUE           */
*       GOTO I009C03A;              /* OTHERWISE IT AN ERROR         */
         B     I009C03A                                            0151
*     END;                                                         0152
*   ELSE                                                           0153
*     DO;                                                          0153
@RF00147 DS    0H                                                  0154
*       IF CDSSYMB='1'B             /* IF IT NOT A REMOTE REQ AND    */
*         THEN                      /* THE SYMBOLIC BIT IS ON        */
         L     @15,CDSWKPTR                                        0154
         TM    CDSSYMB(@15),B'00001000'                            0154
         BNO   @RF00154                                            0154
*         DO;                       /* THEN CK FOR SYMBOLIC NAME     */
*           IF CDSSYMBN=BLANK       /* IF BLANK                      */
*             THEN                  /* THEN                          */
         CLC   CDSSYMBN(1,@15),BLANK                               0156
         BE    @RT00156                                            0156
*             GOTO I009C04;         /* IT OK-CONTINUE                */
*           GOTO I009C03A;          /* OTHERWISE PRT ERROR           */
         B     I009C03A                                            0158
*         END;                                                     0159
*       ELSE                        /* IF THE SYMBOLIC BIT IS OFF    */
*         GOTO I009C04;             /* IT OK-CONTINUE                */
*     END;                                                         0161
*I009C03A:                                                         0162
*                                                                  0162
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(581)MSGMSK('00400000'X) INVOKED                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0162
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I009C03A OI    $TCECM(WAPTR),B'00000001'                           0162
*   R1=ADDR($TCA15);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA15                                           0163
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00798                                        0164
         BALR  @14,@15                                             0164
*   DCL                                                            0165
*     1 $TCA15,                     /* TCEC PARM LIST                */
*      2 $TCB15 FIXED(32) INIT(581),/* MSG NUMBER                    */
*      2 $TCC15 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD15 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE15 CHAR(4) INIT('00400000'X);/* MSSAGE MASK INV SYM NME
*                                      OR FLAG                       */
*   GO TO I009C03;                  /* GO RECONFIGURE                */
         B     I009C03                                             0166
*I009C04:                                                          0167
*   IF $COPY='1'B THEN              /* IF THIS IS A COPY REQUEST     */
I009C04  TM    $COPY(WAPTR),B'00001000'                            0167
         BO    @RT00167                                            0167
*     GOTO I009C05;                 /* THEN BR AROUND                */
*   IF CDSBYTCT^>OLDCDSLN           /* IF THE CDS RECORD DID NOT     */
*     THEN                          /* INCREASE IN SIZE              */
         L     @15,CDSWKPTR                                        0169
         CLC   CDSBYTCT(1,@15),OLDCDSLN                            0169
         BH    @RF00169                                            0169
*     DO;                           /* THEN SET UP TTR TO POINT      */
*       GEN(B I009CWR2);            /* GO WRT CDS RECORD ONLY        */
         B I009CWR2
*     END;                                                         0172
*   ELSE                            /* IF CDS DID INCREASE IN SIZE   */
*     DO;                           /* THEN DO FOLLOWING             */
         B     @RC00169                                            0173
@RF00169 DS    0H                                                  0174
*I009C05:                                                          0174
*       GEN;                                                       0174
I009C05  DS    0H                                                  0174
*                            /*
               CLOSE ((DCBPTR))           CLOSE IT OUT               */
*       IF $REMSW='1'B              /* IF THIS IS A REMOTE REQUEST   */
*         THEN                      /* THEN DO THE FOLLOWING         */
         TM    $REMSW(WAPTR),B'01000000'                           0175
         BNO   @RF00175                                            0175
*         DO;                                                      0176
*           DCBPTR=ADDR(WRREMCDS);  /* SET UP WRITE DCB PTR          */
         LA    DCBPTR,WRREMCDS                                     0177
*         END;                                                     0178
*       ELSE                        /* OTHERWISE SET UP LOCAL        */
*         DO;                                                      0179
         B     @RC00175                                            0179
@RF00175 DS    0H                                                  0180
*           DCBPTR=ADDR(WRLOCCDS);  /* CDS PTR                       */
         LA    DCBPTR,WRLOCCDS                                     0180
*         END;                                                     0181
*       GEN;                                                       0182
@RC00175 DS    0H                                                  0182
               OPEN  ((DCBPTR),(OUTPUT)) /*OPEN IT UP AGAIN          */
               TM    OPENFLAG(DCBPTR),GOODOPEN /*CK IF OPEN OK       */
               BZ    I009CER1           /*ERROR-BR                   */
*     END;                                                         0183
*   GEN(BAL LINKR,I009CWRT);        /* GO WRITE CDS RECORDS          */
@RC00169 DS    0H                                                  0184
         BAL LINKR,I009CWRT
*   STOWTTR=TTRZSAV(1:3);           /* SET UP MEMBR PTR IN DIRCTY    */
         MVC   STOWTTR(3),TTRZSAV                                  0185
*   GEN;                                                           0186
*                                       /*
         STOW  (DCBPTR),STOWCON,R         REPLACE DIRCTY ENTRY       */
*   IF R15=12 THEN                  /* IF RET CODE EQ 12 THEN        */
         LA    @12,12                                              0187
         CR    R15,@12                                             0187
         BE    @RT00187                                            0187
*     GOTO I009CER2;                /* GO PRINT ERROR-NO SPACE       */
*   IF R15>12 THEN                  /* IF RET CODE IS GREATER 12     */
         CR    R15,@12                                             0189
         BH    @RT00189                                            0189
*     GOTO I009CER3;                /* THEN GO PRT I/O ERROR         */
*                                                                  0190
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(562) INVOKED                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0191
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0191
*   R1=ADDR($TCA16);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA16                                           0192
*   CALL #EXIT;                     /* CALL CECOM                    */
         L     @15,#EXITA(,WAPTR)                                  0193
         BALR  @14,@15                                             0193
*   DCL                                                            0194
*     1 $TCA16,                     /* TCEC PARM LIST                */
*      2 $TCB16 FIXED(32) INIT(562),/* MSG NUMBER                    */
*      2 $TCC16 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD16 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE16 CHAR(4) INIT('FFFFFFFF'X);/* MSSAGE MASK CDS ADDED TO
*                                      LIBRARY                       */
*   GOTO I009CRET;                  /* RETURN TO CALLER              */
         B     I009CRET                                            0195
*   GEN(EJECT);                                                    0196
         EJECT
*I009CER1:                                                         0197
*   IF $REMSW='1'B                  /* IF ITS A REMOTE REQ THEN      */
*     THEN                                                         0197
I009CER1 TM    $REMSW(WAPTR),B'01000000'                           0197
         BNO   @RF00197                                            0197
*     DO;                                                          0198
*       $INBUFR(1:8)=CDSREMDD;      /* SET UP REM DD CARD NAME       */
         MVC   $INBUFR(8,WAPTR),CDSREMDD                           0199
*     END;                          /* IN THE ERROR MSG              */
*   ELSE                            /* OTHERWISE                     */
*     DO;                           /* SET UP THE                    */
         B     @RC00197                                            0201
@RF00197 DS    0H                                                  0202
*       $INBUFR(1:8)=CDSLOCDD;      /* LOCAL DD CARD NAME            */
         MVC   $INBUFR(8,WAPTR),CDSLOCDD                           0202
*     END;                                                         0203
*                                                                  0203
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(901)SUB(YES) INVOKED                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0204
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
@RC00197 OI    $TCECM(WAPTR),B'00000001'                           0204
*   R1=ADDR($TCA17);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA17                                           0205
*   CALL #EXIT;                     /* CALL CECOM                    */
         L     @15,#EXITA(,WAPTR)                                  0206
         BALR  @14,@15                                             0206
*   DCL                                                            0207
*     1 $TCA17,                     /* TCEC PARM LIST                */
*      2 $TCB17 FIXED(32) INIT(901),/* MSG NUMBER                    */
*      2 $TCC17 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD17 BIT(8) INIT('10000000'B),/* FLAG                     */
*      2 $TCE17 CHAR(4) INIT('FFFFFFFF'X);/* MSSAGE MASK PRT XXXX DO
*                                      FAILED TO OPEN                */
*   GOTO I009CRET;                  /* RETURN TO CALLER              */
         B     I009CRET                                            0208
*I009CER2:                                                         0209
*                                                                  0209
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(571) INVOKED                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0209
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I009CER2 OI    $TCECM(WAPTR),B'00000001'                           0209
*   R1=ADDR($TCA18);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA18                                           0210
*   CALL #EXIT;                     /* CALL CECOM                    */
         L     @15,#EXITA(,WAPTR)                                  0211
         BALR  @14,@15                                             0211
*   DCL                                                            0212
*     1 $TCA18,                     /* TCEC PARM LIST                */
*      2 $TCB18 FIXED(32) INIT(571),/* MSG NUMBER                    */
*      2 $TCC18 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD18 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE18 CHAR(4) INIT('FFFFFFFF'X);/* MSSAGE MASK LIBRARY FULL*/
*   GOTO I009CRET;                  /* RETURN TO CALLER              */
         B     I009CRET                                            0213
*I009CER3:                                                         0214
*   GEN;                                                           0214
*                                                                  0214
I009CER3 DS    0H                                                  0214
               POINT (DCBPTR),TTRZSAV   /*THEN POINT TO BEGINNING    */
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(570) INVOKED                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0215
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0215
*   R1=ADDR($TCA19);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA19                                           0216
*   CALL #EXIT;                     /* CALL CECOM                    */
         L     @15,#EXITA(,WAPTR)                                  0217
         BALR  @14,@15                                             0217
*   DCL                                                            0218
*     1 $TCA19,                     /* TCEC PARM LIST                */
*      2 $TCB19 FIXED(32) INIT(570),/* MSG NUMBER                    */
*      2 $TCC19 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD19 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE19 CHAR(4) INIT('FFFFFFFF'X);/* MSSAGE MASK I/O ERROR   */
*   GOTO I009CRET;                  /* GO RETURN TO CALLER           */
         B     I009CRET                                            0219
*I009CER4:                                                         0220
*                                                                  0220
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(569) INVOKED                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0220
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I009CER4 OI    $TCECM(WAPTR),B'00000001'                           0220
*   R1=ADDR($TCA20);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA20                                           0221
*   CALL #EXIT;                     /* CALL CECOM                    */
         L     @15,#EXITA(,WAPTR)                                  0222
         BALR  @14,@15                                             0222
*   DCL                                                            0223
*     1 $TCA20,                     /* TCEC PARM LIST                */
*      2 $TCB20 FIXED(32) INIT(569),/* MSG NUMBER                    */
*      2 $TCC20 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD20 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE20 CHAR(4) INIT('FFFFFFFF'X);/* MSSAGE MASK UNABLE TO 0223
*                                      DELETE CDS                    */
*   GOTO I009CRET;                  /* RETURN TO CONTROL MODULE      */
         B     I009CRET                                            0224
*   GEN(EJECT);                                                    0225
         EJECT
*I009CRET:                                                         0226
*   GEN;                                                           0226
I009CRET DS    0H                                                  0226
*                                       /*
         CLOSE ((DCBPTR))                 CLOSE CDS                 */
*   $REMSW='0'B;                    /* RESET REMOTE SW               */
         NI    $REMSW(WAPTR),B'10111111'                           0227
*   $CHANGE='0'B;                   /* RESET CHANGE SW               */
         NI    $CHANGE(WAPTR),B'11011111'                          0228
*   $COPY='0'B;                     /* RESET COPY SW                 */
         NI    $COPY(WAPTR),B'11110111'                            0229
*   RETURN;                         /* RETURN TO CALLER              */
@EL00001 L     @13,4(,@13)                                         0230
@EF00001 DS    0H                                                  0230
@ER00001 L     @14,12(,@13)                                        0230
         LM    @00,@12,20(@13)                                     0230
         BR    @14                                                 0230
*   GEN(EJECT);                                                    0231
*                                                                  0231
         EJECT
*/********************************************************************/
*/*                     R E A D   R O U T I N E                      */
*/*                                                                  */
*/*  THIS ROUTINE WILL READ THE ESD & TXTHDR RECORD INTO CORR AND    */
*/*  SAVE THEIR STARTING ADDRESS                                     */
*/*                                                                  */
*/********************************************************************/
*                                                                  0232
*I009CRD:                                                          0232
*   RETSAV=LINKR;                   /* SAVE RETURN PTR               */
I009CRD  ST    LINKR,RETSAV                                        0232
*   IF $REMSW='1'B THEN             /* IF THIS IS A REMOTE REQ       */
         TM    $REMSW(WAPTR),B'01000000'                           0233
         BO    @RT00233                                            0233
*     GOTO I009CRD1;                /* THEN BR AROUND                */
*   GEN;                                                           0235
*                                       /*
          OPEN ((DCBPTR),(UPDAT))         OPEN LOCAL DCB
          TM   OPENFLAG(DCBPTR),GOODOPEN  DID IT OPEN
          BZ   I009CER1                   NO-ERROR
          B    I009CRD3                   BR-AROUND
*I009CRD1:                                                         0236
*   GEN;                                                           0236
I009CRD1 DS    0H                                                  0236
*                                       /*
          OPEN ((DCBPTR),(UPDAT))         OPEN REMOTE DCB
          TM   OPENFLAG(DCBPTR),GOODOPEN  DID IT OPEN
         BZ    I009CER1                   NO-ERROR
I009CRD3 DS   0H
          FIND (DCBPTR),(NAMEPTR),D       LOOK FOR REQUESTED MEMBER
          LTR  R15,R15                    WAS FIND SUCCESSFUL
          BNZ  I009C01B                   NO-BR
          READ CDSDECB,SF,(DCBPTR),ESDREC,80,MF=E READ ESD RECORD
          CHECK  CDSDECB                  WAIT FOR I/O COMPLETION
          NOTE (DCBPTR)                   GET PTR TO ESD REC
          ST   PARMREG1,TTRZSAV           SAVE START ADR OF ESD
          ST   PARMREG1,TTRZ              SAVE START ADR TO TXTHDR
          MVI  TTRZ+3,X'01'               SET UP TO READ NXT REACORD
          POINT (DCBPTR),TTRZ             SET UP TO RD NXT REC
          READ CDSDECB,SF,(DCBPTR),TXTHDR,80,MF=E READ TXTHDR RECORD
          CHECK  CDSDECB                  WAIT FOR I/O COMPLETION
          NOTE (DCBPTR)                   SET UP PTR TO NXT RECORD
          ST   PARMREG1,TTRZ              SAVE START ADR TO CDSREC
          MVI  TTRZ+3,X'01'               SET UP READ NXT RECORD
          POINT (DCBPTR),TTRZ             SET UP READ DCB
*   CDSRPTR=ADDR(CDSUA);            /* GET PTR TO READ BUFFER        */
         L     CDSRPTR,CDSWKPTR                                    0237
*   GEN;                                                           0238
*                                       /*
          SR   CDSRLREG,CDSRLREG          ZERO WK REG
          IC   CDSRLREG,TXTHCNT+2         GET LEN OF CDSREC
          READ CDSDECB,SF,(DCBPTR),(CDSRPTR),(CDSRLREG),MF=E
          CHECK  CDSDECB                  WAIT FOR I/O COMPLETION
*I009CRD4:                                                         0239
*   GEN;                                                           0239
I009CRD4 DS    0H                                                  0239
*                                            /*
          L    LINKR,RETSAV               GET RETURN ADDR
          BR   LINKR                      RETURN TO CALLER
          EJECT
*                                                                  0240
*/********************************************************************/
*/*                      W R I T E  R O U T I N E                    */
*/*                                                                  */
*/*  THIS ROUTINE WILL WRITE THE ESD RECORD, TXTHDR RECORD, CDS      */
*/*  RECORD AND THE END RECORD                                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0240
*I009CWRT:                                                         0240
*   RETSAV=LINKR;                   /* SAVE RETURN ADDR PTR          */
I009CWRT ST    LINKR,RETSAV                                        0240
*   ESDSIZE=CDSBYTCT;               /* PUT CDS BYTE COUNT IN ESD     */
         L     @15,CDSWKPTR                                        0241
         SLR   @12,@12                                             0241
         IC    @12,CDSBYTCT(,@15)                                  0241
         STC   @12,ESDSIZE                                         0241
*   TXTHCNT(3:3)=CDSBYTCT;          /* PUT CDS BYTE CNT IN TXTHDR    */
         STC   @12,TXTHCNT+2                                       0242
*   TXTHNAME=TXTHDRNM;              /* INDICATE TOLTEP CHANGED CDS   */
         MVC   TXTHNAME(9),TXTHDRNM                                0243
*I009CWR1:                                                         0244
*   GEN;                                                           0244
I009CWR1 DS    0H                                                  0244
*                                       /*
         WRITE CDSDECB,SF,(DCBPTR),ESDREC,80,MF=E  WRITE ESD RECORD
         CHECK CDSDECB                    WAIT FOR I/O COMPLETION
         NOTE  (DCBPTR)                   SAVE BEGINNING ADDRESS IN
         ST    PARMREG1,TTRZSAV           CASE OF AN ERROR
         WRITE CDSDECB,SF,(DCBPTR),TXTHDR,80,MF=E  WRITE TXTHDR RECORD
         CHECK CDSDECB                    WAIT FOR I/O COMPLETION
*   CDSRPTR=ADDR(CDSUA);            /* GET PTR TO CDS RECORD         */
         L     CDSRPTR,CDSWKPTR                                    0245
*I009CWR2:                                                         0246
*   GEN(XC CDSRECL,CDSRECL);        /* ZERO OUT REC LENGTH AREA      */
I009CWR2 XC CDSRECL,CDSRECL
*   CDSRECL(2:2)=CDSBYTCT;          /* SET UP CDSREC LEN FOR WRITE   */
         L     @15,CDSWKPTR                                        0247
         MVC   CDSRECL+1(1),CDSBYTCT(@15)                          0247
*   GEN;                                                           0248
*                                       /*
         SR  CDSRLREG,CDSRLREG            ZERO OUT WORK REG
         LH  CDSRLREG,CDSRECL             PUT CDS REC LN IN REG
         WRITE CDSDECB,SF,(DCBPTR),(CDSRPTR),(CDSRLREG),MF=E WRT CDSREC
         CHECK CDSDECB                    WAIT FOR I/O COMPLETION
*   IF $CHANGE='1'B                 /* IF ITS A CHANGE REQUEST       */
*     THEN                          /* THEN CHECK TO SEE IF ITS      */
         TM    $CHANGE(WAPTR),B'00100000'                          0249
         BNO   @RF00249                                            0249
*     DO;                           /* A CHANGE IN PLACE             */
*       IF CDSBYTCT^>OLDCDSLN THEN  /* IF YES THEN BR AROUND         */
         L     @15,CDSWKPTR                                        0251
         CLC   CDSBYTCT(1,@15),OLDCDSLN                            0251
         BNH   @RT00251                                            0251
*         GOTO I009CRET;            /* NEXT WRITE                    */
*     END;                                                         0253
*   GEN;                                                           0254
@RF00249 DS    0H                                                  0254
         WRITE CDSDECB,SF,(DCBPTR),ENDREC,80,MF=E  WRITE END RECORD
         CHECK CDSDECB                    WAIT FOR I/O COMPLETION
         L     LINKR,RETSAV               RETURN TO
         BR    LINKR                        CALLER
         EJECT
*                                                                  0255
*/********************************************************************/
*/*        D A T A  C O N T R O L  B L O C K S                       */
*/********************************************************************/
*                                                                  0255
*   GEN;                                                           0255
RDREMCDS   DS    0F
         DCB   DDNAME=SYMSYM,DSORG=PO,RECFM=UT,MACRF=(R,W),            X
               LRECL=80,BLKSIZE=3600,SYNAD=I009CER3,EODAD=I009CRD4
          SPACE
RDLOCCDS   DS    0F
         DCB   DDNAME=OLTCDSDD,DSORG=PO,RECFM=UT,MACRF=(R,W),          X
               LRECL=80,BLKSIZE=3600,SYNAD=I009CER3,EODAD=I009CRD4
          SPACE
WRREMCDS   DS    0F
         DCB   DDNAME=SYMSYM,DSORG=PO,RECFM=UT,MACRF=(R,W),            X
               LRECL=80,BLKSIZE=3600,SYNAD=I009CER3
          SPACE
WRLOCCDS DS    0F
         DCB   DDNAME=OLTCDSDD,DSORG=PO,RECFM=UT,MACRF=(R,W),          X
               LRECL=80,BLKSIZE=3600,SYNAD=I009CER3
          SPACE
         WRITE CDSDECB,SF,MF=L
          SPACE
*   DO;                             /* ATDSPLY                       */
*   END;                            /* ATDSPLY                       */
*   END ISTIC009;                                                  0258
         B     @EL00001                                            0258
@DATA    DS    0H
@CH00081 DC    H'12'
@CH00075 DC    H'80'
         DS    0F
@SA00001 DS    18F
         DS    0F
@CV00771 DC    V(ISTSC029)
@CV00793 DC    V(ISTSC021)
@CV00795 DC    V(ISTIC00A)
@CV00798 DC    V(S20CEC03)
         DS    0D
CDSWKPTR DS    A
RCAPTR   DS    A
CECMAP   DS    A
TTRZ     DS    F
RETSAV   DS    CL4
WKAREA2  DS    CL20
CDSRECL  DS    CL2
         DS    CL2
TTRZSAV  DS    CL4
OLDCDSLN DS    CL1
BLANK    DC    CL1' '
TXTHDRNM DC    CL9'VS TOLTEP'
CDSLOCDD DC    CL8'OLTCDSDD'
CDSREMDD DC    CL8'SYMSYM  '
UANAME   DC    CL1'G'
STOWCON  DS    CL32
         ORG   STOWCON
STOWNAME DS    CL8
STOWTTR  DS    CL3
STOWUSSZ DC    X'0A'
STOWUSRI DC    20X'00'
         ORG   STOWCON+32
ESDREC   DS    CL80
         ORG   ESDREC
@NM00001 DC    X'02'
@NM00002 DC    CL3'ESD'
@NM00003 DC    X'00'
         DC    XL11'0'
ESDNME1  DS    CL8
@NM00004 DC    X'00'
         DC    XL6'0'
ESDSIZE  DS    CL1
ESDNME2  DC    CL8'#OLT00'
@NM00005 DC    X'00'
         DC    XL7'0'
ESDNME3  DC    CL8'#CTLCAAA'
@NM00006 DC    X'00'
         DC    XL23'0'
         ORG   ESDREC+80
TXTHDR   DS    CL80
         ORG   TXTHDR
@NM00007 DC    X'02'
@NM00008 DC    CL6'TXTHDR'
TXTHNAME DC    CL9'VS TOLTEP'
TXTHCCW  DS    CL8
         ORG   TXTHCCW
@NM00009 DC    X'02'
THRELADR DC    X'000000'
@NM00010 DC    X'20'
TXTHCNT  DC    X'000000'
         ORG   TXTHDR+24
@NM00011 DC    X'00'
         DC    XL55'0'
         ORG   TXTHDR+80
ENDREC   DS    CL80
         ORG   ENDREC
@NM00012 DC    X'02'
@NM00013 DC    CL3'END'
@NM00014 DC    CL72' '
@NM00015 DC    CL4'0003'
         ORG   ENDREC+80
ZZZGTPRM DS    CL13
         ORG   ZZZGTPRM
@NM00068 DC    X'0102F1F6'
ZZZGTCD  DS    AL4
ZZZGTAD  DS    AL4
ZZZGTCT  DS    FL1
         ORG   ZZZGTPRM+13
         DS    CL3
$TCA10   DS    CL13
         ORG   $TCA10
$TCB10   DC    A(572)
$TCC10   DC    A(0)
$TCD10   DC    B'00000000'
$TCE10   DC    X'FFFFFFFF'
         ORG   $TCA10+13
         DS    CL3
ITATCPRM DS    CL14
         ORG   ITATCPRM
@NM00069 DC    X'0102F4F1'
ITATCFR  DS    AL4
ITATCTO  DS    AL4
@NM00070 DC    AL1(0)
         ORG   @NM00070
ITATCTP  DS    BL1
         ORG   ITATCPRM+13
ITATCNT  DS    FL1
         ORG   ITATCPRM+14
         DS    CL2
$TCA13   DS    CL13
         ORG   $TCA13
$TCB13   DC    A(576)
$TCC13   DC    A(0)
$TCD13   DC    B'00000000'
$TCE13   DC    X'40000000'
         ORG   $TCA13+13
         DS    CL3
$TCA15   DS    CL13
         ORG   $TCA15
$TCB15   DC    A(581)
$TCC15   DC    A(0)
$TCD15   DC    B'00000000'
$TCE15   DC    X'00400000'
         ORG   $TCA15+13
         DS    CL3
$TCA16   DS    CL13
         ORG   $TCA16
$TCB16   DC    A(562)
$TCC16   DC    A(0)
$TCD16   DC    B'00000000'
$TCE16   DC    X'FFFFFFFF'
         ORG   $TCA16+13
         DS    CL3
$TCA17   DS    CL13
         ORG   $TCA17
$TCB17   DC    A(901)
$TCC17   DC    A(0)
$TCD17   DC    B'10000000'
$TCE17   DC    X'FFFFFFFF'
         ORG   $TCA17+13
         DS    CL3
$TCA18   DS    CL13
         ORG   $TCA18
$TCB18   DC    A(571)
$TCC18   DC    A(0)
$TCD18   DC    B'00000000'
$TCE18   DC    X'FFFFFFFF'
         ORG   $TCA18+13
         DS    CL3
$TCA19   DS    CL13
         ORG   $TCA19
$TCB19   DC    A(570)
$TCC19   DC    A(0)
$TCD19   DC    B'00000000'
$TCE19   DC    X'FFFFFFFF'
         ORG   $TCA19+13
         DS    CL3
$TCA20   DS    CL13
         ORG   $TCA20
$TCB20   DC    A(569)
$TCC20   DC    A(0)
$TCD20   DC    B'00000000'
$TCE20   DC    X'FFFFFFFF'
         ORG   $TCA20+13
NAME     DS    CL8
WKAREA   DS    CL8
         DS    CL3
PATCH    DC    40F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
LINKR    EQU   @14
DCBPTR   EQU   @05
CDSRPTR  EQU   @04
WKREG1   EQU   @04
CDSRLREG EQU   @06
NAMEPTR  EQU   @06
WAPTR    EQU   @02
R1       EQU   @01
R15      EQU   @15
PARMREG1 EQU   @01
R0       EQU   @00
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
$RCAAREA EQU   0
$POINTER EQU   $RCAAREA+100
$TRTBLA  EQU   $POINTER+124
$CONSTNT EQU   $RCAAREA+244
$RCAFLG  EQU   $RCAAREA+604
TOLTEPWA EQU   0
$SCTTBLE EQU   TOLTEPWA
$TESTOPT EQU   $SCTTBLE+2
$ERROPT  EQU   $SCTTBLE+3
$PDEVFLG EQU   $SCTTBLE+10
$CDSFLGS EQU   $SCTTBLE+11
$CDS8T19 EQU   $SCTTBLE+20
$EXECFLG EQU   $SCTTBLE+33
$OLTFLGS EQU   $SCTTBLE+36
$OLTFLG2 EQU   $SCTTBLE+37
$TOTFLG1 EQU   $SCTTBLE+38
$ROUTMSK EQU   $SCTTBLE+40
$CDA     EQU   TOLTEPWA+100
$RCA     EQU   $CDA+44
$OLTPTR  EQU   $CDA+52
$LOWADDR EQU   $OLTPTR
$HIMOREC EQU   $CDA+60
$COMMFLG EQU   TOLTEPWA+224
$FLAG1   EQU   $COMMFLG
$FLAG2   EQU   $COMMFLG+1
$FLAG3   EQU   $COMMFLG+2
$FLAG4   EQU   $COMMFLG+3
$FLAG5   EQU   $COMMFLG+4
$EOJ     EQU   $FLAG5
$CANCEL  EQU   $EOJ
$FLAG6   EQU   $COMMFLG+5
$CHANGE  EQU   $FLAG6
$ABNDBIT EQU   $FLAG6
$FLAG7   EQU   $COMMFLG+6
$FLAG8   EQU   $COMMFLG+7
$TCECM   EQU   $FLAG8
$FLAG9   EQU   $COMMFLG+8
$REMSW   EQU   $FLAG9
$COPY    EQU   $FLAG9
$FLAG10  EQU   $COMMFLG+9
$FLAG11  EQU   $COMMFLG+10
$FLAG12  EQU   $COMMFLG+11
$FLAG13  EQU   $COMMFLG+12
$DEVTBLE EQU   TOLTEPWA+240
$DEVCDS  EQU   $DEVTBLE
$DEVUNAD EQU   $DEVCDS
@NM00054 EQU   $DEVUNAD+2
$DEVFEAT EQU   $DEVCDS+4
$DEVCDSF EQU   $DEVCDS+9
$DEVSDCF EQU   $DEVCDS+10
$$SYMNME EQU   $DEVCDS+12
$DEVFLG1 EQU   $DEVTBLE+20
$EVNCPLT EQU   $DEVFLG1
$ATTNEXP EQU   $DEVFLG1
$INTOCC  EQU   $DEVFLG1
$DEVFLG2 EQU   $DEVTBLE+21
$DEVTECB EQU   $DEVTBLE+22
$OPIS    EQU   $DEVTECB
$OPND    EQU   $DEVTECB+2
$DEVFLG3 EQU   $DEVTBLE+27
$SIOFLG  EQU   $DEVFLG3
$IFTOUT  EQU   $DEVTBLE+36
$DEVSESP EQU   $IFTOUT
$SSCPDAF EQU   $IFTOUT+6
$LDNCBPT EQU   $DEVTBLE+48
$RNINFO  EQU   $DEVTBLE+56
$DEVFLG5 EQU   $RNINFO+8
$DEVFLG4 EQU   $DEVTBLE+65
$SLTBL   EQU   TOLTEPWA+1468
$RUNTEST EQU   $SLTBL+13
$TESTFLG EQU   $SLTBL+21
$SECLST  EQU   $SLTBL+22
$INBUFR  EQU   TOLTEPWA+2104
#EXITA   EQU   TOLTEPWA+2632
$CCOMDAT EQU   TOLTEPWA+2644
$CFLGS   EQU   $CCOMDAT+16
$24FEMSG EQU   TOLTEPWA+2681
$24CATMG EQU   $24FEMSG+11
@NM00063 EQU   TOLTEPWA+2776
$OUNTPTR EQU   @NM00063+4
$NSPTR   EQU   $OUNTPTR
$NSCNT   EQU   @NM00063+10
$ENXX    EQU   @NM00063+15
$IMITX   EQU   $ENXX
SVESC033 EQU   TOLTEPWA+3160
SVECC013 EQU   TOLTEPWA+3232
SVEIC003 EQU   TOLTEPWA+3592
SVESC022 EQU   TOLTEPWA+3736
SVECC011 EQU   TOLTEPWA+4024
#EXIT    EQU   0
CECOMMAP EQU   0
CDSMAP   EQU   0
CDSUA    EQU   CDSMAP
CDSMFCT  EQU   CDSMAP+4
CDSFEAT  EQU   CDSMFCT+1
CDSBYTCT EQU   CDSMAP+8
CDSFLAG  EQU   CDSMAP+9
CDSSYMB  EQU   CDSFLAG
CDSREMSY EQU   CDSFLAG
CDSSYMBN EQU   CDSMAP+12
$TRTBL   EQU   0
SVECC012 EQU   SVESC022
SVEIC00A EQU   SVEIC003
SVEIC004 EQU   SVEIC003
SVEIC005 EQU   SVEIC003
SVESC02A EQU   SVESC022
SVESC02B EQU   SVESC022
SVESC02D EQU   SVESC022
SVESC02E EQU   SVESC022
SVESC02F EQU   SVECC013
SVESC024 EQU   SVESC022
SVESC027 EQU   SVESC022
SVESC029 EQU   SVESC033
SVESC031 EQU   SVECC013
SVESC032 EQU   SVECC011
SVETC037 EQU   SVEIC003
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CDSEXARA EQU   CDSMAP+20
CDSEXTM  EQU   CDSFLAG+2
CDSEXTB  EQU   CDSFLAG+2
CDSTMERB EQU   CDSFLAG+2
@NM00067 EQU   CDSFLAG+1
CDSDVPRO EQU   CDSFLAG+1
CDSNTPRI EQU   CDSFLAG+1
CDSLINCN EQU   CDSFLAG
CDS2CHAN EQU   CDSFLAG
CDSEXTPR EQU   CDSFLAG
CDSFEVOL EQU   CDSFLAG
CDSSHAR  EQU   CDSFLAG
CDSFPMD  EQU   CDSFLAG
CDSTYPE  EQU   CDSMFCT+3
CDSCLASS EQU   CDSMFCT+2
@NM00066 EQU   CDSFEAT
CDSDEVM  EQU   CDSFEAT
CDSDEVT  EQU   CDSFEAT
CDSASCII EQU   CDSFEAT
CDSMODEL EQU   CDSMFCT
$CECFLAG EQU   CECOMMAP+20
$CEINCT  EQU   CECOMMAP+16
$CEINADR EQU   CECOMMAP+12
$CEOUTCT EQU   CECOMMAP+8
$CEOUTAD EQU   CECOMMAP+4
$CECIDNT EQU   CECOMMAP+2
$CECLEVL EQU   CECOMMAP+1
$CECTRMG EQU   CECOMMAP
SVECC010 EQU   TOLTEPWA+3952
SVETC035 EQU   TOLTEPWA+3880
SVESC030 EQU   TOLTEPWA+3808
SVESC020 EQU   TOLTEPWA+3664
SVEIC002 EQU   TOLTEPWA+3520
SVECC014 EQU   TOLTEPWA+3376
SVESC120 EQU   TOLTEPWA+3304
SVESC025 EQU   TOLTEPWA+3088
@NM00065 EQU   TOLTEPWA+2980
$RPLERR  EQU   TOLTEPWA+2977
@NM00064 EQU   TOLTEPWA+2976
$R13PR3  EQU   TOLTEPWA+2972
$CEINT2  EQU   TOLTEPWA+2968
$CEINT1  EQU   TOLTEPWA+2964
$MSGGET  EQU   TOLTEPWA+2960
$ACQLIST EQU   TOLTEPWA+2956
$R4SAVE1 EQU   TOLTEPWA+2952
$CLSISS  EQU   TOLTEPWA+2950
$CLSCNT  EQU   TOLTEPWA+2948
$CUTABLE EQU   TOLTEPWA+2868
$BUFSZ2  EQU   TOLTEPWA+2864
$RESID2  EQU   TOLTEPWA+2860
$OLTCCW2 EQU   TOLTEPWA+2856
$ENDBFR2 EQU   TOLTEPWA+2852
$1STBFR2 EQU   TOLTEPWA+2848
$TECB2   EQU   TOLTEPWA+2844
$BUFSZ1  EQU   TOLTEPWA+2840
$RESID1  EQU   TOLTEPWA+2836
$OLTCCW1 EQU   TOLTEPWA+2832
$ENDBFR1 EQU   TOLTEPWA+2828
$1STBFR1 EQU   TOLTEPWA+2824
$TECB1   EQU   TOLTEPWA+2820
$WAITIME EQU   TOLTEPWA+2816
$TRTN#   EQU   TOLTEPWA+2815
$WIODEV  EQU   TOLTEPWA+2814
$RQSTSZE EQU   TOLTEPWA+2812
$RQSTPTR EQU   TOLTEPWA+2808
$R4SAVE  EQU   TOLTEPWA+2804
$PARTADR EQU   TOLTEPWA+2800
$TBSDATA EQU   TOLTEPWA+2796
$CTWIDTH EQU   TOLTEPWA+2795
$CTLINE  EQU   TOLTEPWA+2794
$APWIDTH EQU   TOLTEPWA+2793
$APLINE  EQU   TOLTEPWA+2792
$INDEX   EQU   $IMITX
$UMXX    EQU   @NM00063+14
$NSXX    EQU   @NM00063+12
$ATACNT  EQU   $NSCNT
$CTR     EQU   @NM00063+8
$ATAPTR  EQU   $NSPTR
$DDRPTR  EQU   @NM00063
$DTORESP EQU   TOLTEPWA+2712
$APNAME  EQU   TOLTEPWA+2704
$24SYMNE EQU   $24CATMG+4
$24DEVAD EQU   $24CATMG
$24RTN#  EQU   $24FEMSG+8
$ESECTID EQU   $24FEMSG
$24FLGS  EQU   TOLTEPWA+2680
$24SAVE2 EQU   TOLTEPWA+2676
$24SAVE1 EQU   TOLTEPWA+2672
$24UNADR EQU   TOLTEPWA+2668
$24SAV13 EQU   TOLTEPWA+2664
$24RETCD EQU   TOLTEPWA+2663
$MACID   EQU   TOLTEPWA+2661
$CSPARE  EQU   $CFLGS
$C2WAY   EQU   $CFLGS
$CINCT   EQU   $CCOMDAT+12
$CINADR  EQU   $CCOMDAT+8
$COUTCT  EQU   $CCOMDAT+4
$COUTAD  EQU   $CCOMDAT
ROOTLOC  EQU   TOLTEPWA+2640
$RETREG  EQU   TOLTEPWA+2636
$WORK    EQU   TOLTEPWA+2376
$EXTA    EQU   TOLTEPWA+2320
$PASSONA EQU   TOLTEPWA+2264
$TRMINPT EQU   TOLTEPWA+2184
$BUFFER  EQU   TOLTEPWA+1976
$TLTRPL3 EQU   TOLTEPWA+1856
$TLTRPL2 EQU   TOLTEPWA+1736
$TLTRPL1 EQU   TOLTEPWA+1616
@NM00062 EQU   $SLTBL+135
$HIGHRTN EQU   $SLTBL+134
$PRIMADR EQU   $SLTBL+130
$CTSTPT  EQU   $SLTBL+128
$TSTCNT  EQU   $SLTBL+126
$SECFLGS EQU   $SECLST+3
$SECTION EQU   $SECLST
$SECACT  EQU   $TESTFLG
$CANTRUN EQU   $TESTFLG
$FINAL   EQU   $TESTFLG
$TESTSUF EQU   $RUNTEST+5
$TESTNUM EQU   $RUNTEST+1
$LETPRF  EQU   $RUNTEST
$SYMBOLC EQU   $SLTBL+5
$FAMILY  EQU   $SLTBL
$CDEVPT  EQU   TOLTEPWA+1466
$DEVCNTS EQU   TOLTEPWA+1464
$FEEDBCK EQU   $DEVTBLE+66
$WTISUED EQU   $DEVFLG4
$EXIOISD EQU   $DEVFLG4
$REMWRIT EQU   $DEVFLG4
$REMDONE EQU   $DEVFLG4
$2NDUSED EQU   $DEVFLG4
$1STUSED EQU   $DEVFLG4
$IGLXIFB EQU   $DEVFLG4
$EXIOLV3 EQU   $DEVFLG4
@NM00061 EQU   $DEVFLG5
$DVBASIC EQU   $DEVFLG5
$ASCII   EQU   $DEVFLG5
$DEVLU   EQU   $DEVFLG5
$OPNDFAL EQU   $DEVFLG5
$ACQNCB  EQU   $DEVFLG5
$REMOTE  EQU   $DEVFLG5
$ENDNODE EQU   $DEVFLG5
$LINENME EQU   $RNINFO
$CID     EQU   $DEVTBLE+52
$DVCOL   EQU   $LDNCBPT+2
$DVROW   EQU   $LDNCBPT
$NCSPLP  EQU   $DEVTBLE+44
$DVLN    EQU   $SSCPDAF
$DAF     EQU   $DEVSESP+4
$VARYPAB EQU   $DEVSESP
$SYSMN   EQU   $DEVTBLE+28
@NM00060 EQU   $DEVFLG3
$CLRSNT  EQU   $DEVFLG3
$OLTERR  EQU   $DEVFLG3
$SRTEST  EQU   $DEVFLG3
$DVSNDOK EQU   $SIOFLG
$POLLREQ EQU   $DEVFLG3
$ACQRED  EQU   $DEVFLG3
$NOTDEV  EQU   $DEVFLG3
$DVINCT  EQU   $DEVTBLE+26
$DVBRKST EQU   $OPND+1
$DVBRKSN EQU   $OPND
$DVSEQNO EQU   $OPIS
$CEINTRP EQU   $DEVFLG2
$TESTMDE EQU   $DEVFLG2
$DEVALOC EQU   $DEVFLG2
$ALLDATA EQU   $DEVFLG2
$ENDCNTL EQU   $DEVFLG2
$CTLDEV  EQU   $DEVFLG2
$NOCDS   EQU   $DEVFLG2
$DATAIN  EQU   $DEVFLG2
$PRIMARY EQU   $DEVFLG1
$DVCTBYT EQU   $INTOCC
$DEVACT  EQU   $DEVFLG1
$DVLGMDE EQU   $ATTNEXP
$DVSPRM  EQU   $EVNCPLT
$GRABBED EQU   $DEVFLG1
$CATASTR EQU   $DEVFLG1
$LETGO   EQU   $DEVFLG1
$CURELEM EQU   $$SYMNME+4
$MSGOTSD EQU   $$SYMNME
$EXTDEV  EQU   $DEVCDS+11
@NM00059 EQU   $DEVSDCF
$NOTPRIM EQU   $DEVSDCF
@NM00058 EQU   $DEVCDSF
@NM00057 EQU   $DEVCDSF
@NM00056 EQU   $DEVCDSF
$CDSNAME EQU   $DEVCDSF
$EXTRN   EQU   $DEVCDSF
$CEVOLUM EQU   $DEVCDSF
$SHARD   EQU   $DEVCDSF
$DEVFPM  EQU   $DEVCDSF
$DEVCNT  EQU   $DEVCDS+8
$DEVTYPE EQU   $DEVFEAT+3
$DEVCLAS EQU   $DEVFEAT+2
$DEVFRRS EQU   $DEVFEAT+1
$DEVMOD  EQU   $DEVFEAT
$DEVRDGT EQU   @NM00054+1
$DEVCTLU EQU   @NM00054+1
$DEVCHAN EQU   @NM00054
@NM00055 EQU   @NM00054
$CTINDX  EQU   $DEVUNAD
$FLAG16  EQU   $COMMFLG+15
$FLAG15  EQU   $COMMFLG+14
$FLAG14  EQU   $COMMFLG+13
$TEP2ND  EQU   $FLAG13
$TEP1ST  EQU   $FLAG13
$CATMSG  EQU   $FLAG13
$PRMPTSW EQU   $FLAG13
$DEVENT  EQU   $FLAG13
$OLTMACC EQU   $FLAG13
$LGON    EQU   $FLAG13
$CTLOGON EQU   $FLAG13
@NM00053 EQU   $FLAG12
$VARYINP EQU   $FLAG12
$ENDTEST EQU   $FLAG12
$VRYHRD  EQU   $FLAG12
$VRYSFT  EQU   $FLAG12
$POSTFLG EQU   $FLAG12
$OPTMSG  EQU   $FLAG12
$FEORCAT EQU   $FLAG11
@NM00052 EQU   $FLAG11
@NM00051 EQU   $FLAG10
$INBND   EQU   $FLAG10
$WAITFLG EQU   $FLAG10
$DPRINT  EQU   $FLAG10
$HOLD    EQU   $FLAG9
$NOTRRCH EQU   $FLAG9
@NM00050 EQU   $FLAG9
$LSTLNSW EQU   $FLAG9
$MULLNSW EQU   $FLAG9
$IGRES   EQU   $FLAG9
$VS2     EQU   $FLAG8
$VS1     EQU   $FLAG8
$EDOS    EQU   $FLAG8
@NM00049 EQU   $FLAG8
$TWOWAY  EQU   $FLAG8
@NM00048 EQU   $FLAG8
$RCVMSG  EQU   $FLAG7
$RCVRFLG EQU   $FLAG7
$SNDRFLG EQU   $FLAG7
$LDOIS   EQU   $FLAG7
$DCONTCT EQU   $FLAG7
$EXIOWAT EQU   $FLAG7
$2NDDATA EQU   $FLAG7
$1STDATA EQU   $FLAG7
$CIREQ   EQU   $FLAG6
$ABTERM  EQU   $ABNDBIT
$FSTMCIS EQU   $FLAG6
$DISCREQ EQU   $FLAG6
$DISCISS EQU   $FLAG6
$CTERROR EQU   $FLAG6
$RECAL11 EQU   $FLAG6
@NM00047 EQU   $FLAG5
$PROGCK  EQU   $CANCEL
$PRINTAP EQU   $FLAG5
@NM00046 EQU   $FLAG5
$MSG922  EQU   $FLAG5
$CT924   EQU   $FLAG5
$FSTCAT  EQU   $FLAG5
$FSTFE   EQU   $FLAG5
$ACTOPND EQU   $FLAG4
$ACQCUTT EQU   $FLAG4
$CLSSACT EQU   $FLAG4
$BACKINT EQU   $FLAG4
$DMSGSW  EQU   $FLAG4
$TSTDEVP EQU   $FLAG4
$APRQPER EQU   $FLAG4
$OPCOM   EQU   $FLAG4
$NEWAP   EQU   $FLAG3
$ALTPRTR EQU   $FLAG3
$OPTERR  EQU   $FLAG3
$PRTONLY EQU   $FLAG3
$REQSTOR EQU   $FLAG3
$LOGOFFE EQU   $FLAG3
$TSTERR  EQU   $FLAG3
$DEVERR  EQU   $FLAG3
$PARTIAL EQU   $FLAG2
$NRMTERM EQU   $FLAG2
$VALDTST EQU   $FLAG2
$VALDDEV EQU   $FLAG2
$DBLSLSH EQU   $FLAG2
$NDR     EQU   $FLAG2
@NM00045 EQU   $FLAG2
$OLTACT  EQU   $FLAG1
$NORELDV EQU   $FLAG1
@NM00044 EQU   $FLAG1
$OPTCHNG EQU   $FLAG1
$DEVCHNG EQU   $FLAG1
$TESTCNG EQU   $FLAG1
$CNSLFG  EQU   $FLAG1
$TEP3RD  EQU   $FLAG1
@NM00043 EQU   $CDA+120
$CUCNT   EQU   $CDA+118
@NM00042 EQU   $CDA+117
$PRTFORM EQU   $CDA+116
$OPISCNT EQU   $CDA+114
$OPNDCNT EQU   $CDA+112
$GETMSZE EQU   $CDA+110
$GRCNTS  EQU   $CDA+108
$CTLCNT  EQU   $CDA+106
$ACTLVL  EQU   $CDA+105
$PRNTLVL EQU   $CDA+104
$ERRCNTA EQU   $CDA+102
$TLCNT   EQU   $CDA+100
$TIMEALW EQU   $CDA+96
$PTRAREA EQU   $CDA+92
$GETMPTR EQU   $CDA+88
$R13PTRT EQU   $CDA+84
$R13PTR  EQU   $CDA+80
$TEPEND  EQU   $CDA+76
$PLINKDL EQU   $CDA+72
$TEPBEGN EQU   $CDA+68
$FRELPTR EQU   $CDA+64
$HIGHADR EQU   $HIMOREC
$LOMOREC EQU   $CDA+56
$ENDCOMM EQU   $CDA+48
$COMMON  EQU   $RCA
$SLASHAD EQU   $CDA+32
$PASSON  EQU   $CDA+28
$TOLBRTB EQU   $CDA+24
$SCTPTR8 EQU   $CDA+20
$SCTPTR  EQU   $CDA+16
$TBWDPTR EQU   $CDA+12
$TFWDPTR EQU   $CDA+8
@NM00041 EQU   $CDA
@NM00040 EQU   $SCTTBLE+98
$SCTLWTC EQU   $SCTTBLE+96
$SCTLWTA EQU   $SCTTBLE+92
#EXT     EQU   $SCTTBLE+88
#PASS    EQU   $SCTTBLE+84
#TABLE   EQU   $SCTTBLE+80
#MSGIDAC EQU   $SCTTBLE+78
@NM00039 EQU   $SCTTBLE+71
$RETMASK EQU   $SCTTBLE+70
$R249255 EQU   $ROUTMSK+29
$R241248 EQU   $ROUTMSK+28
$R233240 EQU   $ROUTMSK+27
$R225232 EQU   $ROUTMSK+26
$R217224 EQU   $ROUTMSK+25
$R209216 EQU   $ROUTMSK+24
$R201208 EQU   $ROUTMSK+23
$R193200 EQU   $ROUTMSK+22
$R185192 EQU   $ROUTMSK+21
$R177184 EQU   $ROUTMSK+20
$R169176 EQU   $ROUTMSK+19
$R161168 EQU   $ROUTMSK+18
$R153160 EQU   $ROUTMSK+17
$R145152 EQU   $ROUTMSK+16
$R137144 EQU   $ROUTMSK+15
$R129136 EQU   $ROUTMSK+14
$R121128 EQU   $ROUTMSK+13
$R113120 EQU   $ROUTMSK+12
$R105112 EQU   $ROUTMSK+11
$R097104 EQU   $ROUTMSK+10
$R089096 EQU   $ROUTMSK+9
$R081088 EQU   $ROUTMSK+8
$R073080 EQU   $ROUTMSK+7
$R065072 EQU   $ROUTMSK+6
$R057064 EQU   $ROUTMSK+5
$R049056 EQU   $ROUTMSK+4
$R041048 EQU   $ROUTMSK+3
$R033040 EQU   $ROUTMSK+2
$R025032 EQU   $ROUTMSK+1
$R017024 EQU   $ROUTMSK
$TOTFLG2 EQU   $SCTTBLE+39
@NM00038 EQU   $TOTFLG1
@NM00037 EQU   $TOTFLG1
@NM00036 EQU   $TOTFLG1
$CURELOD EQU   $TOTFLG1
$CTEQTT  EQU   $TOTFLG1
@NM00035 EQU   $TOTFLG1
@NM00034 EQU   $TOTFLG1
$LINESHR EQU   $TOTFLG1
@NM00033 EQU   $OLTFLG2
@NM00032 EQU   $OLTFLG2
@NM00031 EQU   $OLTFLG2
@NM00030 EQU   $OLTFLG2
@NM00029 EQU   $OLTFLG2
@NM00028 EQU   $OLTFLG2
@NM00027 EQU   $OLTFLG2
$TALK    EQU   $OLTFLG2
$DYCOM   EQU   $OLTFLGS
@NM00026 EQU   $OLTFLGS
$TRACE   EQU   $OLTFLGS
$RETCODE EQU   $OLTFLGS
$CONTCB  EQU   $OLTFLGS
$RETAIN  EQU   $OLTFLGS
$CLEANRT EQU   $OLTFLGS
$MANINTV EQU   $OLTFLGS
$OLTSIZE EQU   $SCTTBLE+34
$QSCTMOD EQU   $EXECFLG
$CTRLMOD EQU   $EXECFLG
$CLEANUP EQU   $EXECFLG
$LSTPDEV EQU   $EXECFLG
$ERRCNT  EQU   $EXECFLG
$RTNSLCT EQU   $EXECFLG
$MULTDEV EQU   $EXECFLG
@NM00025 EQU   $EXECFLG
$RMSKCNT EQU   $SCTTBLE+32
$SYNAME  EQU   $CDS8T19+4
$EXTSIG  EQU   $CDS8T19+3
$CDFLGS  EQU   $CDS8T19+1
$CDSCNT  EQU   $CDS8T19
$PDEVDSC EQU   $SCTTBLE+16
$PDEVADR EQU   $SCTTBLE+12
$COMMCN  EQU   $CDSFLGS
$CUSTSYM EQU   $CDSFLGS
$TWOCHSW EQU   $CDSFLGS
$SYMNAME EQU   $CDSFLGS
$EXTINTC EQU   $CDSFLGS
$CEVOL   EQU   $CDSFLGS
$SHARED  EQU   $CDSFLGS
$FPM     EQU   $CDSFLGS
$LASTSUB EQU   $PDEVFLG
@NM00024 EQU   $PDEVFLG
@NM00023 EQU   $PDEVFLG
@NM00022 EQU   $PDEVFLG
$LASTDEV EQU   $PDEVFLG
@NM00021 EQU   $PDEVFLG
$EXFILPT EQU   $PDEVFLG
$FPMOLD  EQU   $PDEVFLG
$TSSSYM  EQU   $SCTTBLE+8
$SCTLEVL EQU   $SCTTBLE+7
$DRIVER  EQU   $SCTTBLE+6
$RT0916  EQU   $SCTTBLE+5
$RT0108  EQU   $SCTTBLE+4
$LOOPTST EQU   $ERROPT
$LOOPERR EQU   $ERROPT
$NERRPRT EQU   $ERROPT
$NOCNTRL EQU   $ERROPT
$ALTPRNT EQU   $ERROPT
$CATERR  EQU   $ERROPT
$ASTERIK EQU   $ERROPT
$TESTERR EQU   $ERROPT
$FSTCOMM EQU   $TESTOPT
$INDEFLP EQU   $TESTOPT
$NOPRT   EQU   $TESTOPT
$PARAPRT EQU   $TESTOPT
@NM00020 EQU   $TESTOPT
$ERRLPCT EQU   $SCTTBLE
$TLTEND  EQU   $RCAAREA+945
$CNSLID  EQU   $RCAAREA+936
$EXITSAV EQU   $RCAAREA+864
$TRASCII EQU   $RCAAREA+608
@NM00019 EQU   $RCAAREA+605
$VTAMEND EQU   $RCAFLG
$TPPOSTD EQU   $RCAFLG
$NEWCT   EQU   $RCAFLG
$ABNDALL EQU   $RCAFLG
$CUTESTB EQU   $RCAFLG
$CONSOLE EQU   $RCAFLG
$TPLOGON EQU   $RCAFLG
$UPDATE  EQU   $RCAFLG
$DEVAREA EQU   $RCAAREA+600
$CTDVAR  EQU   $RCAAREA+596
$BUFFS   EQU   $RCAAREA+464
$TLTNIB  EQU   $CONSTNT+140
$TLTPRPL EQU   $CONSTNT+20
@NM00018 EQU   $CONSTNT+4
@NM00017 EQU   $CONSTNT+2
$USECNT  EQU   $CONSTNT
$CURRTWA EQU   $POINTER+140
$CTNAME  EQU   $POINTER+132
$CTARGX  EQU   $POINTER+128
$COMINT  EQU   $POINTER+120
$QUEHNDL EQU   $POINTER+116
@NM00016 EQU   $POINTER+36
$RTNPTR  EQU   $POINTER+32
$TLTECB2 EQU   $POINTER+28
$TLTECB1 EQU   $POINTER+24
$CLEANP  EQU   $POINTER+20
$ABEND   EQU   $POINTER+16
$LSTAREA EQU   $POINTER+12
$FSTAREA EQU   $POINTER+8
$CVTSAVE EQU   $POINTER+4
$TOLTEP  EQU   $POINTER
$TLTACB  EQU   $RCAAREA
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00077 EQU   I009C01A
@RT00087 EQU   I009C02
@RT00149 EQU   I009C04
@RF00149 EQU   I009C03A
@RT00156 EQU   I009C04
@RF00154 EQU   I009C04
@RT00167 EQU   I009C05
@RT00187 EQU   I009CER2
@RT00189 EQU   I009CER3
@RT00233 EQU   I009CRD1
@RT00251 EQU   I009CRET
@ENDDATA EQU   *
         END   ISTIC009,(C'PLS1257',0702,78336)
