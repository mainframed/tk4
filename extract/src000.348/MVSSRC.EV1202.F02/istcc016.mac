         TITLE 'READ WRITE EXIT - ISTCC016'
ISTCC016 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ISTCC016  78.336'                                 0001
         DROP  @15
@PROLOG  DS    0H                                                  0002
         PRINT OFF
         PRINT ON
         PRINT OFF
         PRINT ON
         PRINT OFF
         PRINT ON
         PRINT OFF
         PRINT ON
*                                    /* SET UP BASE AND SCR @ZD10878*/
         LR    R12,R15             GET THE ENTRY ADDRESS
         USING ISTCC016,R12
         LA    R9,C16CBUF1   POINT TO EXIT WORK AREA           @ZD10878
         USING @DATD,R9      SET UP ADDRESSABILITY FOR SCRTCH  @ZD10878
*   RPLPTR=R1;                      /* SAVE POINTER TO RPL           */
         LR    RPLPTR,R1                                           0155
*   WAPTR=RPLUSFLD;                                                0156
         L     WAPTR,RPLUSFLD(,RPLPTR)                             0156
*   R13=ADDR($EXITSAV);             /* SET UP PTR TO MY SAVEAREA     */
         L     R13,RCAPTR(,WAPTR)                                  0157
         LA    R13,$EXITSAV(,R13)                                  0157
*   C16EXSAV=R14;                   /* SAVE R14 FOR RET TO VTAM      */
*                                                                  0158
         ST    R14,C16EXSAV                                        0158
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK THE RPL SO IT IS NOT ACTIVE                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0159
*   GEN(CHECK RPL=(RPLPTR));        /* CLEAR UP RPL BEFORE PROCESSING*/
         CHECK RPL=(RPLPTR)
*   INDX=AP;                        /* FEEDBACK FOR AP               */
         LA    INDX,2                                              0160
*   IF RPLPTR=ADDR($TLTRPL1) THEN   /* SET UP INDEX INTO TABLE     0161
*                                                            @D32JPGH*/
         LA    @00,$TLTRPL1(,WAPTR)                                0161
         CR    RPLPTR,@00                                          0161
         BNE   @RF00161                                            0161
*     INDX=CT;                      /* FEEDBACK FOR CT               */
*                                                                  0162
         LA    INDX,1                                              0162
*   /*****************************************************************/
*   /*                                                               */
*   /* CHK FOR TEMP ERRORS RETRY IF POSSIBLE                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0163
*   IF(RPLRTNCD='08'X&RPLFDB2='00'X)×(RPLRTNCD='0C'X&(RPLFDB2='03'X×
*       RPLFDB2='05'X)) THEN                                       0163
@RF00161 CLI   RPLRTNCD(RPLPTR),8                                  0163
         BNE   @GL00001                                            0163
         CLI   RPLFDB2(RPLPTR),0                                   0163
         BE    @RT00163                                            0163
@GL00001 CLI   RPLRTNCD(RPLPTR),12                                 0163
         BNE   @RF00163                                            0163
         CLI   RPLFDB2(RPLPTR),3                                   0163
         BE    @RT00163                                            0163
         CLI   RPLFDB2(RPLPTR),5                                   0163
         BE    @RT00163                                            0163
*     GOTO C16C0225;                                               0164
*   IF RPLRTNCD^='00'X              /* IF THERE WAS AN ERROR         */
*     THEN                                                         0165
@RF00163 CLI   RPLRTNCD(RPLPTR),0                                  0165
         BE    @RF00165                                            0165
*     DO;                                                          0166
*       IF RPLRTNCD='0C'X&(RPLFDB2>='0A'X&RPLFDB2<='0C'X)/* CHECK TO
*                                      SEE IF WE SHOULD STOP @D32JPGH*/
*         THEN                                                     0167
         CLI   RPLRTNCD(RPLPTR),12                                 0167
         BNE   @RF00167                                            0167
         CLI   RPLFDB2(RPLPTR),10                                  0167
         BL    @RF00167                                            0167
         CLI   RPLFDB2(RPLPTR),12                                  0167
         BH    @RF00167                                            0167
*         DO;                       /* NOT ERROR, BUT GET OUT NOW    */
*           CALL C16C0910;          /* FREE CURRENT ELEMENT          */
         BAL   @14,C16C0910                                        0169
*           GOTO C16C0251;          /* EXIT FROM THIS MODULE         */
         B     C16C0251                                            0170
*         END;                      /* END OF NOT ERROR,BUT STOP CODE*/
*       IF RPLRTNCD<=4&$DEVLU(INDX)=ON THEN/* IF LU STATUS PASSED  0172
*                                      BACK                  @DM00895*/
@RF00167 CLI   RPLRTNCD(RPLPTR),4                                  0172
         BH    @RF00172                                            0172
         LR    @11,INDX                                            0172
         MH    @11,@CH00337                                        0172
         ALR   @11,WAPTR                                           0172
         TM    $DEVLU-68(@11),B'00001000'                          0172
         BO    @RT00172                                            0172
*         GO TO C16C0253;           /* PROCESS THE FEEDBACK          */
*       IF RPLRTNCD='0C'X&          /* WAS IT AN RFT RECEIVED        */
*           RPLFDB2='02'X&INDX=CT   /* FROM THE CT                   */
*         THEN                                                     0174
@RF00172 CLI   RPLRTNCD(RPLPTR),12                                 0174
         BNE   @RF00174                                            0174
         CLI   RPLFDB2(RPLPTR),2                                   0174
         BNE   @RF00174                                            0174
         C     INDX,@CF00072                                       0174
         BNE   @RF00174                                            0174
*         DO;                       /* IF YES DO THE FOLLOWING       */
*           $RETREG=0;                                             0176
         SLR   @11,@11                                             0176
         ST    @11,$RETREG(,WAPTR)                                 0176
*           IF RPLAARLN=0 THEN                                     0177
         C     @11,RPLAARLN(,RPLPTR)                               0177
         BE    @RT00177                                            0177
*             GOTO C16C0100;                                       0178
*           ELSE                                                   0179
*             GOTO C16C0225;        /* GO & RETRY ORIG REQ           */
         B     C16C0225                                            0179
*         END;                                                     0180
*       IF RPLRTNCD='04'X&          /* WAS AN ATTENTION RECEIVED     */
*           RPLFDB2='01'X&INDX=CT   /* FROM CT                       */
*         THEN                      /* THEN DO THE FOLLOWING         */
@RF00174 CLI   RPLRTNCD(RPLPTR),4                                  0181
         BNE   @RF00181                                            0181
         CLI   RPLFDB2(RPLPTR),1                                   0181
         BNE   @RF00181                                            0181
         C     INDX,@CF00072                                       0181
         BNE   @RF00181                                            0181
*         DO;                                                      0182
*           $CIREQ=ON;              /* SET C. I. REQ ON              */
         OI    $CIREQ(WAPTR),B'00000001'                           0183
*           $RETREG=0;              /* SET ZERO RETURN CODE          */
         SLR   @00,@00                                             0184
         ST    @00,$RETREG(,WAPTR)                                 0184
*           GOTO C16C0100;                                         0185
         B     C16C0100                                            0185
*         END;                                                     0186
*       $RETREG=8;                  /* SET ERROR RC = 8              */
@RF00181 MVC   $RETREG(4,WAPTR),@CF00054                           0187
*C16C0075:                                                         0188
*       CALL C16C0920;              /* SET ERROR STATUS              */
C16C0075 BAL   @14,C16C0920                                        0188
*       GO TO C16C0251;             /* EXIT FROM THE MODULE          */
         B     C16C0251                                            0189
*     END;                                                         0190
*   ELSE                                                           0191
*     $RETREG=0;                    /* SET GOOD RC OF 00             */
@RF00165 SLR   @00,@00                                             0191
         ST    @00,$RETREG(,WAPTR)                                 0191
*C16C0100:                                                         0192
*   ;                                                              0192
C16C0100 DS    0H                                                  0193
*   IF $DEVLU(INDX)=ON              /* IF DEVICE IS AN LU            */
*     THEN                                                         0193
         LR    @11,INDX                                            0193
         MH    @11,@CH00337                                        0193
         ST    @11,@TF00001                                        0193
         ALR   @11,WAPTR                                           0193
         TM    $DEVLU-68(@11),B'00001000'                          0193
         BO    @RT00193                                            0193
*     GOTO C16C0253;                /* THIS CODE HANDLES LU        0194
*                                      INFORMATION                   */
*   IF INCT^=0                      /* ONE WAY MSG?                  */
*     THEN                                                         0195
         L     @11,@TF00001                                        0195
         L     @11,$CURELEM-68(@11,WAPTR)                          0195
         CLI   INCT(@11),0                                         0195
         BE    @RF00195                                            0195
*     DO;                                                          0196
*       IF RPLREQ='11'X×(RPLREQ='1D'X&RPLREOT=OFF)/* IF WRITE OR READ
*                                      FOR EOT                       */
*         THEN                                                     0197
         CLI   RPLREQ(RPLPTR),17                                   0197
         BE    @RT00197                                            0197
         CLI   RPLREQ(RPLPTR),29                                   0197
         BNE   @RF00197                                            0197
         TM    RPLREOT(RPLPTR),B'00001000'                         0197
         BNZ   @RF00197                                            0197
@RT00197 DS    0H                                                  0198
*         DO;                       /* READING DATA FROM CT          */
*           IF $DVINCT(1)^=0 THEN                                  0199
         CLI   $DVINCT(WAPTR),0                                    0199
         BE    @RF00199                                            0199
*             DO;                                                  0200
*               RPLBUFL=$DVINCT(1); /* SET READ COUNT                */
         SLR   @00,@00                                             0201
         IC    @00,$DVINCT(,WAPTR)                                 0201
         ST    @00,RPLBUFL(,RPLPTR)                                0201
*               RPLAREA=ADDR($TRMINPT);/* POINT TO BUFFER            */
         LA    @00,$TRMINPT(,WAPTR)                                0202
         ST    @00,RPLAREA(,RPLPTR)                                0202
*             END;                                                 0203
*           ELSE                                                   0204
*             DO;                                                  0204
         B     @RC00199                                            0204
@RF00199 DS    0H                                                  0205
*               RPLBUFL=LENGTH(SCRATCH);                           0205
         MVC   RPLBUFL(4,RPLPTR),@CF00072                          0205
*               RPLAREA=ADDR(SCRATCH);                             0206
         LA    @00,SCRATCH                                         0206
         ST    @00,RPLAREA(,RPLPTR)                                0206
*             END;                                                 0207
*           GEN REFS(RPLPTR,ARG,ISTCC016);                         0208
@RC00199 DS    0H                                                  0208
*                                 /* READ DATA */
 READ RPL=(RPLPTR),EXIT=ISTCC016,OPTCD=(ASY,TRUNC)
*           IF R15^=0 THEN          /* IF ERROR, GET OUT FAST        */
         LTR   R15,R15                                             0209
         BNZ   @RT00209                                            0209
*             GO TO C16C0075;       /* EXIT THE MODULE               */
*           $DVINCT(1)=0;           /* READ NO MORE DATA             */
         MVI   $DVINCT(WAPTR),X'00'                                0211
*           GOTO C16C0251;          /* EXIT                          */
         B     C16C0251                                            0212
*         END;                      /* END OF READ FOR DATA          */
*       CALL C16C0900;              /* PUT DATA IN CALLERS BUFFER    */
@RF00197 BAL   @14,C16C0900                                        0214
*     END;                          /* END OF GETTING DATA FOR     0215
*                                      TERMINAL                      */
*C16C0200:                                                         0216
*   IF INDX=CT&                     /* CHECK FOR LOGOFF RECEIVED     */
*       RPLFDB3='04'X               /* IF YES                        */
*     THEN                                                         0216
@RF00195 DS    0H                                                  0216
C16C0200 C     INDX,@CF00072                                       0216
         BNE   @RF00216                                            0216
         CLI   RPLFDB3(RPLPTR),4                                   0216
         BNE   @RF00216                                            0216
*     $EOJ=ON;                      /* SET EOJ FLAG TO FORCE CANCEL  */
         OI    $EOJ(WAPTR),B'00000010'                             0217
*C16C0250:                                                         0218
*   RPLSAVE=$CURELEM(INDX);         /* SAVE PTR TO CURRENT ELEM      */
@RF00216 DS    0H                                                  0218
C16C0250 LR    @11,INDX                                            0218
         MH    @11,@CH00337                                        0218
         L     @00,$CURELEM-68(@11,WAPTR)                          0218
         ST    @00,RPLSAVE                                         0218
*   RESPECIFY                                                      0219
*     PTR1 RESTRICTED;              /* DONT LET THIS REG GET ALTERED */
*   PTR1=INDX;                      /* POINT TO PARTICULAR ENTRY     */
         LR    PTR1,INDX                                           0220
*   CALL C16C0265;                  /* START THE NEXT RPL            */
         BAL   @14,C16C0265                                        0221
*   RESPECIFY                                                      0222
*     PTR1 UNRESTRICTED;            /* RELEASE THIS REGISTER FOR USE */
*   RPLPTR=RPLSAVE;                 /* RESTORE ELEM PTR              */
         L     RPLPTR,RPLSAVE                                      0223
*   IF RPLPTR^=0 THEN               /* ONLY RELEASE IF THERE IS    0224
*                                      SOMETHING TO RELEASE          */
         LTR   RPLPTR,RPLPTR                                       0224
         BZ    @RF00224                                            0224
*     CALL C16C0270;                /* FREE LAST RPL WE ARE DONE     */
         BAL   @14,C16C0270                                        0225
*C16C0251:                                                         0226
*   ;                                                              0226
@RF00224 DS    0H                                                  0226
C16C0251 DS    0H                                                  0227
*   R14=C16EXSAV;                   /* RESTORE RET REG               */
         L     R14,C16EXSAV                                        0227
*   RETURN;                         /* RETURN TO VTAM                */
@EL00001 DS    0H                                                  0228
@EF00001 DS    0H                                                  0228
@ER00001 BR    @14                                                 0228
*C16C0225:                                                         0229
*   GEN SETS(RPLPTR);                                              0229
C16C0225 DS    0H                                                  0229
         EXECRPL RPL=(RPLPTR)
*   IF R15^=0 THEN                  /* CHECK FOR AN ERROR            */
         LTR   R15,R15                                             0230
         BNZ   @RT00230                                            0230
*     GO TO C16C0075;               /* ERROR, GET OUT                */
*   GOTO C16C0251;                                                 0232
         B     C16C0251                                            0232
*                                                                  0233
*   /*****************************************************************/
*   /*                                                               */
*   /* CODE TO HANDLE RECORD MODE                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0233
*C16C0253:                                                         0233
*   R6=0;                           /* SET FLAG FOR STARTING QUEUE 0233
*                                      AFTER RESPONSE OR NOT         */
C16C0253 SLR   R6,R6                                               0233
*   IF RPLRRESP=OFF                 /* IF IT IS A RESPONSE           */
*     THEN                                                         0234
         LA    @11,16                                              0234
         ALR   @11,RPLPTR                                          0234
         TM    RPLRRESP(@11),B'00001000'                           0234
         BNZ   @RF00234                                            0234
*     DO;                                                          0235
*                                                                  0235
*       /*************************************************************/
*       /*                                                           */
*       /* NOT A RESPONSE,EITHER NORMAL OR EXPIDITED FLOW            */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0236
*       IF RPLNFSYN=OFF             /* IF IT IS NOT SYNCHRONEOUS     */
*         THEN                                                     0236
         TM    RPLNFSYN(@11),B'00000100'                           0236
         BNZ   @RF00236                                            0236
*         DO;                                                      0237
*           IF RPLSEQNO^=$DVSEQNO(INDX)/* CHECK FOR SEQ ERRORS       */
*             THEN                                                 0238
         LR    @11,INDX                                            0238
         MH    @11,@CH00337                                        0238
         ALR   @11,WAPTR                                           0238
         CLC   RPLSEQNO+60(2,RPLPTR),$DVSEQNO-68(@11)              0238
         BE    @RF00238                                            0238
*             DO;                                                  0239
*               RPLSSNSO='0201'X;   /* SET ERROR STATUS              */
         MVC   RPLSSNSO(2,RPLPTR),@CB01933                         0240
*               GOTO C16C0300;      /* SEND RESPONSE                 */
         B     C16C0300                                            0241
*             END;                                                 0242
*           $DVSEQNO(INDX)=$DVSEQNO(INDX)+1;/* INCREMENT SEQ # BY 1  */
@RF00238 LR    @11,INDX                                            0243
         MH    @11,@CH00337                                        0243
         LA    @00,1                                               0243
         LH    @10,$DVSEQNO-68(@11,WAPTR)                          0243
         N     @10,@CF02031                                        0243
         ALR   @00,@10                                             0243
         STH   @00,$DVSEQNO-68(@11,WAPTR)                          0243
*         END;                                                     0244
*       IF BINBRAK=ON               /* IF BOUND WITH BRACKETS        */
*         THEN                                                     0245
@RF00236 LR    @11,INDX                                            0245
         MH    @11,@CH00337                                        0245
         LA    @10,$DEVSESP-68(@11,WAPTR)                          0245
         TM    BINBRAK-1(@10),B'00100000'                          0245
         BNO   @RF00245                                            0245
*         DO;                                                      0246
*           IF RPLBB=ON             /* IF BEGIN BRACKET ON           */
*             THEN                                                 0247
         TM    RPLBB+16(RPLPTR),B'10000000'                        0247
         BNO   @RF00247                                            0247
*             $DVBRKST(INDX)=INB;   /* GOING INTO BRACKET            */
         LA    @00,1                                               0248
         STC   @00,$DVBRKST-68(@11,WAPTR)                          0248
*           IF RPLEB=ON             /* IF END BRACKET ON             */
*             THEN                                                 0249
@RF00247 TM    RPLEB+16(RPLPTR),B'01000000'                        0249
         BNO   @RF00249                                            0249
*             $DVBRKST(INDX)=BETB;  /* GOING TO BETWEEN BRACKETS     */
         LR    @11,INDX                                            0250
         MH    @11,@CH00337                                        0250
         SLR   @00,@00                                             0250
         STC   @00,$DVBRKST-68(@11,WAPTR)                          0250
*         END;                                                     0251
@RF00249 DS    0H                                                  0252
*       N=MIN(RPLBUFL,RPLRLEN);     /* GET NUMBER OF BYTES GIVEN BY
*                                      VTAM                          */
@RF00245 L     @00,RPLBUFL(,RPLPTR)                                0252
         L     @11,RPLRLEN(,RPLPTR)                                0252
         CR    @00,@11                                             0252
         BNH   *+6
         LR    @00,@11                                             0252
         STH   @00,N                                               0252
*       IF $ASCII(INDX)=ON&RPLCSI=ON/* IF ASCII                      */
*         THEN                                                     0253
         LR    @11,INDX                                            0253
         MH    @11,@CH00337                                        0253
         ALR   @11,WAPTR                                           0253
         TM    $ASCII-68(@11),B'00000100'                          0253
         BNO   @RF00253                                            0253
         TM    RPLCSI+16(RPLPTR),B'00001000'                       0253
         BNO   @RF00253                                            0253
*         DO I=1 TO N;              /* TRANSLATE EACH CHARACTER TO 0254
*                                      ASCII                         */
         LA    @00,1                                               0254
         B     @DE00254                                            0254
@DL00254 DS    0H                                                  0255
*           DO M=1 TO LENGTH($TRASCII);/* SEARCH FOR ASCII MATCH     */
         LA    @00,1                                               0255
         STH   @00,M                                               0255
@DL00255 DS    0H                                                  0256
*             IF $TRMINPT(I)=$TRASCII(M)/* IF CHAR FOUND IN TABLE    */
*               THEN                                               0256
         LH    @11,I                                               0256
         L     @10,RCAPTR(,WAPTR)                                  0256
         ALR   @11,WAPTR                                           0256
         ALR   @10,@00                                             0256
         CLC   $TRMINPT-1(1,@11),$TRASCII-1(@10)                   0256
         BNE   @RF00256                                            0256
*               DO;                                                0257
*                 $TRMINPT(I)=M-1;  /* SET TO EBCDIC VALUE           */
         LH    @11,I                                               0258
         BCTR  @00,0                                               0258
         STC   @00,$TRMINPT-1(@11,WAPTR)                           0258
*                 GOTO C16C0254;                                   0259
         B     C16C0254                                            0259
*               END;                                               0260
*           END;                                                   0261
@RF00256 LA    @00,1                                               0261
         AH    @00,M                                               0261
         STH   @00,M                                               0261
         C     @00,@CF00083                                        0261
         BNH   @DL00255                                            0261
*           RPLSSNSO='1001'X;       /* SET ERROR STATUS              */
         MVC   RPLSSNSO(2,RPLPTR),@CB01937                         0262
*           GOTO C16C0300;          /* SEND RESPONSE                 */
         B     C16C0300                                            0263
*C16C0254:                                                         0264
*         END;                                                     0264
C16C0254 LA    @00,1                                               0264
         AH    @00,I                                               0264
@DE00254 STH   @00,I                                               0264
         CH    @00,N                                               0264
         BNH   @DL00254                                            0264
*       IF RPLDATA=OFF              /* IF NO DATA RECEIVED           */
*         THEN                                                     0265
@RF00253 LA    @11,16                                              0265
         ALR   @11,RPLPTR                                          0265
         TM    RPLDATA(@11),B'10000000'                            0265
         BNZ   @RF00265                                            0265
*         DO;                       /* THIS IS A CONTROL FUNCTION    */
*                                                                  0266
*           /*********************************************************/
*           /*                                                       */
*           /* PROCESSING A FUNCTION NOT DATA                        */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0267
*           IF RPLCNCEL=ON          /* WAS CANCEL REQUESTED          */
*             THEN                                                 0267
         TM    RPLCNCEL(@11),B'01000000'                           0267
         BNO   @RF00267                                            0267
*             DO;                                                  0268
*               $DVINCT(INDX)=LENGTH($TRMINPT);/* READ A NEW MESSAGE */
         LR    @11,INDX                                            0269
         MH    @11,@CH00337                                        0269
         LA    @00,80                                              0269
         STC   @00,$DVINCT-68(@11,WAPTR)                           0269
*               $TRMINPT=$TRMINPT&&$TRMINPT;/* SCRATCH OLD MSG       */
         XC    $TRMINPT(80,WAPTR),$TRMINPT(WAPTR)                  0270
*               GOTO C16C0300;                                     0271
         B     C16C0300                                            0271
*             END;                  /* SEND RESPONSE                 */
*           IF RPLSIGNL=ON          /* IS IT A SIGNAL                */
*             THEN                                                 0273
@RF00267 TM    RPLSIGNL+16(RPLPTR),B'00010000'                     0273
         BNO   @RF00273                                            0273
*             DO;                                                  0274
*               $CIREQ=ON;          /* COMMUNICATION INTERVAL      0275
*                                      REQUIRED                      */
         OI    $CIREQ(WAPTR),B'00000001'                           0275
*               GOTO C16C0300;      /* SEND RESPONSE                 */
         B     C16C0300                                            0276
*             END;                                                 0277
*           IF RPLCHASE=ON          /* IS IT A CHASE                 */
*             THEN                                                 0278
@RF00273 LA    @11,16                                              0278
         ALR   @11,RPLPTR                                          0278
         TM    RPLCHASE(@11),B'00001000'                           0278
         BO    @RT00278                                            0278
*             GOTO C16C0300;        /* SEND RESPONSE                 */
*           IF RPLLUS=ON            /* IS LU STATU BEING SENT        */
*             THEN                                                 0280
         TM    RPLLUS(@11),B'00100000'                             0280
         BNO   @RF00280                                            0280
*             IF RPLSSEI=0          /* IS ERROR STATUS ZERO          */
*               THEN                                               0281
         CLI   RPLSSEI(RPLPTR),0                                   0281
         BE    @RT00281                                            0281
*               GOTO C16C0300;      /* SEND RESPONSE                 */
*             ELSE                                                 0283
*               GOTO C16C0075;                                     0283
         B     C16C0075                                            0283
*           IF RPLSHUTD=ON×RPLSHUTC=ON×RPLRSHUT=ON/* IF ANY SHUTDOWN
*                                      REQUESTS ARE ON               */
*             THEN                                                 0284
@RF00280 LA    @11,16                                              0284
         ALR   @11,RPLPTR                                          0284
         TM    RPLSHUTD(@11),B'00011010'                           0284
         BNZ   @RT00284                                            0284
*             GOTO C16C0075;                                       0285
*           IF RPLRTR=ON            /* IS TERMINAL READY TO RECEIVE
*                                      DATA                          */
*             THEN                                                 0286
         TM    RPLRTR(@11),B'01000000'                             0286
         BNO   @RF00286                                            0286
*             RPLSSNSO='0819'X;     /* SET ERROR STATUS              */
         MVC   RPLSSNSO(2,RPLPTR),@CB01939                         0287
*           ELSE                                                   0288
*             RPLSSNSO='1007'X;     /* SET ERROR STATUS              */
         B     @RC00286                                            0288
@RF00286 MVC   RPLSSNSO(2,RPLPTR),@CB01940                         0288
*           GOTO C16C0300;          /* SEND RESPONSE                 */
         B     C16C0300                                            0289
*         END;                                                     0290
*       IF RPLFMHDR=ON              /* IS THERE AN FM HEADER @DM00898*/
*         THEN                      /*                       @DM00898*/
@RF00265 TM    RPLFMHDR(RPLPTR),B'00000001'                        0291
         BNO   @RF00291                                            0291
*         DO;                       /*                       @DM00898*/
*           RPLSSNSO='1008'X;       /* SET ERROR STATUS      @DM00898*/
         MVC   RPLSSNSO(2,RPLPTR),@CB01941                         0293
*           GOTO C16C0300;          /* SEND RESPONSE         @DM00898*/
         B     C16C0300                                            0294
*         END;                      /*                       @DM00898*/
*                                                                  0295
*       /*************************************************************/
*       /*                                                           */
*       /* DATA RECEIVED,CHECK IF WE MUST WAIT FOR MORE              */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0296
*       IF RPLONLY^=ON&RPLLAST^=ON  /* IS IT END OF CHAIN            */
*         THEN                                                     0296
@RF00291 TM    RPLONLY+16(RPLPTR),B'00110000'                      0296
         BNZ   @RF00296                                            0296
*         DO;                                                      0297
*           $DVINCT(INDX)=0;        /* DON'T READ ANYMORE DATA FROM
*                                      TERMINAL                      */
         LR    @11,INDX                                            0298
         MH    @11,@CH00337                                        0298
         SLR   @00,@00                                             0298
         STC   @00,$DVINCT-68(@11,WAPTR)                           0298
*           GOTO C16C0300;          /* SEND RESPONSE                 */
         B     C16C0300                                            0299
*         END;                                                     0300
*       IF $CURELEM(INDX)=0×INCT=0×$DVSNDOK(INDX)='0'B/* IF NO     0301
*                                      ELEMENTS                      */
*         THEN                                                     0301
@RF00296 LR    @11,INDX                                            0301
         MH    @11,@CH00337                                        0301
         L     @10,$CURELEM-68(@11,WAPTR)                          0301
         LTR   @10,@10                                             0301
         BZ    @RT00301                                            0301
         CLI   INCT(@10),0                                         0301
         BE    @RT00301                                            0301
         ALR   @11,WAPTR                                           0301
         TM    $DVSNDOK-68(@11),B'00010000'                        0301
         BNZ   @RF00301                                            0301
@RT00301 DS    0H                                                  0302
*         $CIREQ=ON;                /* COMMUNICATION INTERVAL      0302
*                                      REQUIRED                      */
         OI    $CIREQ(WAPTR),B'00000001'                           0302
*       ELSE                                                       0303
*         DO;                       /* DATA RECEIVED FROM CT, PASS IT
*                                      BACK                          */
         B     @RC00301                                            0303
@RF00301 DS    0H                                                  0304
*           CALL C16C0900;          /* PASS BACK RESPONSE TO CALLER  */
         BAL   @14,C16C0900                                        0304
*           R6=1;                   /* START NEXT ELEMENT ON QUEUE   */
         LA    R6,1                                                0305
*         END;                      /* END OF DATA RECEIVED FROM CT  */
*C16C0300:                                                         0307
*       IF(RPLNFME=OFF×RPLRRN=ON)&  /* IF RESP TYPE 1 OR 2   @DM00899*/
*           (RPLEX=OFF×RPLSSEO^=0) THEN/* AND NORMAL OR ECEPTION   0307
*                                                            @DM00899*/
@RC00301 DS    0H                                                  0307
C16C0300 TM    RPLRRN+16(RPLPTR),B'00000001'                       0307
         BNZ   @GL00018                                            0307
         TM    RPLNFME+16(RPLPTR),B'00000010'                      0307
         BO    @RF00307                                            0307
@GL00018 TM    RPLEX+16(RPLPTR),B'00000100'                        0307
         BZ    @RT00307                                            0307
         CLI   RPLSSEO(RPLPTR),0                                   0307
         BE    @RF00307                                            0307
@RT00307 DS    0H                                                  0308
*         DO;                       /* RESPONSE REQUIRED TO INBOUND
*                                      REQUEST               @DM00899*/
*           IF RPLSSEO^=0 THEN      /* EXCEPTION RESPONSE    @DM00899*/
         CLI   RPLSSEO(RPLPTR),0                                   0309
         BE    @RF00309                                            0309
*             RPLEX=ON;             /* YES,SET EXCEPTION BIT @DM00899*/
         OI    RPLEX+16(RPLPTR),B'00000100'                        0310
*           ARG=$CID(INDX);         /* PICK UP THE CID               */
@RF00309 LR    @11,INDX                                            0311
         MH    @11,@CH00337                                        0311
         ALR   @11,WAPTR                                           0311
         ICM   ARG,15,$CID-68(@11)                                 0311
*           GEN REFS(RPLPTR,ARG);                                  0312
*                        /* SEND RESPONSE */
 SEND RPL=(RPLPTR),POST=SCHED,STYPE=RESP,OPTCD=SYN,ARG=(ARG)
*           IF R15^=0 THEN          /* CHECK FOR ERROR RETURN CODE   */
         LTR   R15,R15                                             0313
         BNZ   @RT00313                                            0313
*             GO TO C16C0075;       /* ERROR, GET OUT                */
*         END;                                                     0315
*       IF R6^=0×$CURELEM(INDX)=0   /* SHOULD WE FREE THIS ELEMENT 0316
*                                      AND START ANEW        @DM00899*/
*         THEN                                                     0316
@RF00307 SLR   @11,@11                                             0316
         CR    R6,@11                                              0316
         BNE   @RT00316                                            0316
         LR    @10,INDX                                            0316
         MH    @10,@CH00337                                        0316
         C     @11,$CURELEM-68(@10,WAPTR)                          0316
         BE    @RT00316                                            0316
*         GOTO C16C0250;            /* GET NEXT MESSAGE              */
*C16C0256:                                                         0318
*       RPLAREA=ADDR($TRMINPT);     /* POINT TO THE BUFFER           */
C16C0256 LA    @00,$TRMINPT(,WAPTR)                                0318
         ST    @00,RPLAREA(,RPLPTR)                                0318
*       RPLBUFL=$DVINCT(INDX);      /* SET FOR NUMBER OF BYTES TO  0319
*                                      READ                          */
         LR    @11,INDX                                            0319
         MH    @11,@CH00337                                        0319
         SLR   @00,@00                                             0319
         IC    @00,$DVINCT-68(@11,WAPTR)                           0319
         ST    @00,RPLBUFL(,RPLPTR)                                0319
*       ARG=$CID(INDX);             /* PICK UP THE CID               */
         ALR   @11,WAPTR                                           0320
         ICM   ARG,15,$CID-68(@11)                                 0320
*       GEN REFS(RPLPTR,ARG);                                      0321
*                      /* DO A RECEIVE */
 RECEIVE RPL=(RPLPTR),ARG=(ARG),EXIT=ISTCC016,                         X
               OPTCD=(ASY,TRUNC,Q),RTYPE=(DFSYN,DFASY,RESP)
*       IF R15^=0 THEN              /* CHECK FOR ERROR RETURN CODE   */
         LTR   R15,R15                                             0322
         BNZ   @RT00322                                            0322
*         GO TO C16C0075;           /* IF ERROR,EXIT                 */
*       GOTO C16C0251;              /* EXIT                          */
         B     C16C0251                                            0324
*     END;                                                         0325
*                                                                  0325
*   /*****************************************************************/
*   /*                                                               */
*   /* RESPONSE RECEIVED FROM OUR REQUEST                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0326
*   IF RPLEX=ON                     /* DID REQUEST TERMINATE WITH  0326
*                                      EXCEPTION                     */
*     THEN                                                         0326
@RF00234 TM    RPLEX+16(RPLPTR),B'00000100'                        0326
         BNO   @RF00326                                            0326
*     DO;                           /* YES IT TERMINATED WITH AN   0327
*                                      EXCEPTION                     */
*       IF RPLSSEI='08'X&(RPLSSMI='13'X×RPLSSMI='14'X×RPLSSMI='1B'X)
*                                   /* IS IT A TEMPORARY ERROR       */
*         THEN                                                     0328
         CLI   RPLSSEI(RPLPTR),X'08'                               0328
         BNE   @RF00328                                            0328
         CLI   RPLSSMI(RPLPTR),19                                  0328
         BE    @RT00328                                            0328
         CLI   RPLSSMI(RPLPTR),20                                  0328
         BE    @RT00328                                            0328
         CLI   RPLSSMI(RPLPTR),27                                  0328
         BNE   @RF00328                                            0328
@RT00328 DS    0H                                                  0329
*         DO;                                                      0329
*           CALL C16C0280;          /* ADD ELEMENT BACK ON QUE       */
         BAL   @14,C16C0280                                        0330
*           IF $DVSNDOK(INDX)=ON    /* IF OK TO SEND NEXT MSG        */
*             THEN                                                 0331
         LR    @11,INDX                                            0331
         MH    @11,@CH00337                                        0331
         ALR   @11,WAPTR                                           0331
         TM    $DVSNDOK-68(@11),B'00010000'                        0331
         BO    @RT00331                                            0331
*             GOTO C16C0250;        /* GET ELEMENT OFF QUE AND START
*                                      IT                            */
*           ELSE                                                   0333
*             GOTO C16C0256;        /* GOTO RECEIVE INPUT            */
         B     C16C0256                                            0333
*         END;                                                     0334
*       ELSE                                                       0335
*         GOTO C16C0075;            /* FLAG CT OR AP AS AN ERROR     */
*     END;                                                         0336
*   $DVSNDOK(INDX)=ON;                                             0337
@RF00326 LR    @11,INDX                                            0337
         MH    @11,@CH00337                                        0337
         ST    @11,@TF00001                                        0337
         ALR   @11,WAPTR                                           0337
         OI    $DVSNDOK-68(@11),B'00010000'                        0337
*   IF BINBRAK=ON                   /* IF BOUND WITH BRACKETS        */
*     THEN                                                         0338
         L     @11,@TF00001                                        0338
         LA    @11,$DEVSESP-68(@11,WAPTR)                          0338
         BCTR  @11,0                                               0338
         TM    BINBRAK(@11),B'00100000'                            0338
         BNO   @RF00338                                            0338
*     IF BINBKTR=ON&$DVBRKSN(INDX)=SNDEB/* CHECK BRACKET             */
*       THEN                                                       0339
         TM    BINBKTR(@11),B'00010000'                            0339
         BNO   @RF00339                                            0339
         L     @11,@TF00001                                        0339
         SLR   @00,@00                                             0339
         IC    @00,$DVBRKSN-68(@11,WAPTR)                          0339
         C     @00,@CF00139                                        0339
         BNE   @RF00339                                            0339
*       $DVBRKST(INDX)=BETB;        /* NOW BETWEEN BRACKETS          */
         SLR   @00,@00                                             0340
         L     @11,@TF00001                                        0340
         STC   @00,$DVBRKST-68(@11,WAPTR)                          0340
*     ELSE                                                         0341
*       IF $DVBRKSN(INDX)=SNDBB     /* WAS BEGIN BRACKET SUCCESSFUL  */
*         THEN                                                     0341
         B     @RC00339                                            0341
@RF00339 LA    @11,1                                               0341
         LR    @10,INDX                                            0341
         MH    @10,@CH00337                                        0341
         SLR   @00,@00                                             0341
         IC    @00,$DVBRKSN-68(@10,WAPTR)                          0341
         CR    @11,@00                                             0341
         BNE   @RF00341                                            0341
*         $DVBRKST(INDX)=INB;       /* NOW IN BRACKET                */
         STC   @11,$DVBRKST-68(@10,WAPTR)                          0342
*   IF $CURELEM(INDX)->INCT^=0      /* POINT TO CURRENT ELEMENT AND
*                                      CHECK FOR INPUT               */
*     THEN                                                         0343
@RF00341 DS    0H                                                  0343
@RC00339 DS    0H                                                  0343
@RF00338 LR    @11,INDX                                            0343
         MH    @11,@CH00337                                        0343
         L     @11,$CURELEM-68(@11,WAPTR)                          0343
         CLI   INCT(@11),0                                         0343
         BNE   @RT00343                                            0343
*     GOTO C16C0256;                /* GOTO RECEIVE INPUT            */
*   GOTO C16C0250;                  /* GET ELEMENT OFF QUE AND START
*                                      IT                            */
         B     C16C0250                                            0345
*   RESPECIFY                                                      0346
*    (R0,                                                          0346
*     R1) RESTRICTED;               /* DONT LET THESE REGISTERS GET
*                                      ALTRED                        */
*C16C1000:                                                         0347
*   GEN REFS(C16C1000,BASE,R12,R13,R14,R15,C16CBUF2);              0347
C16C1000 DS    0H                                                  0347
*                                                 /*SETUP @ZD10878*/
         USING C16C1000,R15
         STM   R14,R12,12(R13)     SAVE CALLERS REGISTERS
         L     R12,BASE            PICK UP COMMON BASE ADDRESS
         DROP  R15
         LA    R9,C16CBUF2 POINT TO MAINLINE WORK AREA         @ZD10878
*   SAVEA(2)=R13;                   /* SAVE ADDRESS OF CALLERS     0348
*                                      SAVEAREA                      */
         ST    R13,SAVEA+4                                         0348
*   BACKSAVE(3)=ADDR(SAVEA);        /* POINT TO MY SAVEAREA          */
         LA    @11,SAVEA                                           0349
         ST    @11,BACKSAVE+8(,R13)                                0349
*   R13=ADDR(SAVEA);                /* GET ADDRESS OF MY SAVEAREA    */
         LR    R13,@11                                             0350
*   INDX=R1;                        /* POINT TO ENTRY IN DEV TABLE   */
         LR    INDX,R1                                             0351
*   IF R0=0 THEN                    /* IF CALLED TO START A QUE      */
         LTR   R0,R0                                               0352
         BNZ   @RF00352                                            0352
*     DO;                           /* THEN START THE QUEUE PASSED IN
*                                      R1                            */
*       CALL C16C0265;              /* START THE QUEUE POINTED TO BY
*                                      R1                            */
         BAL   @14,C16C0265                                        0354
*       GO TO C16C1050;             /* EXIT THE MODULE               */
         B     C16C1050                                            0355
*     END;                          /* END OF ROUTINE TO START QUEUE */
*   IF R0=4 THEN                    /* IF CALLED TO PURGE A QUEUE    */
@RF00352 C     R0,@CF00068                                         0357
         BNE   @RF00357                                            0357
*     DO;                           /* PURGE QUEUE POINTED TO BY RU  */
*       RESPECIFY                                                  0359
*        (PTR1,                                                    0359
*         PTR2) RESTRICTED;         /* DONT ALTER REGISTERS          */
*       PTR2=PTR1;                  /* SAVE ADDRESS OF QUEUE         */
         LR    PTR2,PTR1                                           0360
*       R0=0;                       /* INDICATE NO ELEMENTS ON CHAIN */
         SLR   R0,R0                                               0361
*C16C1005:                                                         0362
*       PTR1=LASTCHN;               /* GET CHAIN PTR                 */
C16C1005 L     PTR1,LASTCHN(,PTR2)                                 0362
*       CS(PTR1,R0,LASTCHN);        /* REMOVE ALL ELEMENTS FROM QUEUE*/
         CS    PTR1,@00,LASTCHN(PTR2)                              0363
*       BC(4,C16C1005);             /* COMPARE AND SWAP FAILED, TRY
*                                      AGAIN                         */
         BC    4,C16C1005                                          0364
*       IF((PTR1&GATEBIT0)^=0) THEN /* CHECK FOR ANYTHING ON QUE   0365
*                                                            @ZD10874*/
         LR    @11,PTR1                                            0365
         N     @11,@CF00650                                        0365
         LTR   @11,@11                                             0365
         BZ    @RF00365                                            0365
*         DO;                                                      0366
*           R8=PTR1;                /* POINT TO NEXT ELEMENT @DA04688*/
         LR    R8,PTR1                                             0367
*C16C1025:                                                         0368
*           RPLPTR=R8;              /* POINT TO ELE TO BE FREED    0368
*                                                            @ZD10874*/
C16C1025 LR    RPLPTR,R8                                           0368
*           R8=RPLPTR->CHAIN&GATEBIT0;/* POINT TO NEXT ELE   @ZD10874*/
         L     R8,CHAIN(,RPLPTR)                                   0369
         N     R8,@CF00650                                         0369
*           CALL C16C0270;          /* FREE THIS ELEMENT     @ZD10874*/
         BAL   @14,C16C0270                                        0370
*           IF R8^=0 THEN           /* ANY ELEMENTS LEFT ON QUE    0371
*                                                            @ZD10874*/
         LTR   R8,R8                                               0371
         BNZ   @RT00371                                            0371
*             GOTO C16C1025;        /* YES FREE IT           @ZD10874*/
*         END;                      /* END OF LOOPING THOOUGHT THE 0373
*                                      ELEMENTS                      */
*       GO TO C16C1050;             /* EXIT THE MODULE               */
         B     C16C1050                                            0374
*     END;                          /* END OF FREEING HE QUE CODE    */
*C16C1050:                                                         0376
*   GEN REFS(R13,R12,R14);                                         0376
@RF00357 DS    0H                                                  0376
C16C1050 DS    0H                                                  0376
         L     R13,4(R13)          PICK UP LAST SAVE AREA ADDRESS
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
*   RESPECIFY                                                      0377
*    (PTR1,                                                        0377
*     PTR2) UNRESTRICTED;           /* REGISTERS ARE FREE AGAIN      */
*   RESPECIFY                                                      0378
*    (R0,                                                          0378
*     R1) UNRESTRICTED;             /* RELEASE THESE REGISTERS FOR 0378
*                                      USE                           */
*C16C0255:                                                         0379
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0379
         B     @PB00002                                            0379
C16C0255 DS    0H                                                  0380
*   RESPECIFY                                                      0380
*    (PTR1,                                                        0380
*     PTR2) RESTRICTED;             /* DONT ALTER REGISTERS          */
*   R7=R14;                         /* SAVE R14 FOR RETRUN           */
         LR    R7,R14                                              0381
*   PTR2=ADDR($MSGOTSD(INDX));      /* SAVE PTR1                     */
         LR    @11,INDX                                            0382
         MH    @11,@CH00337                                        0382
         LA    PTR2,$MSGOTSD-68(@11,WAPTR)                         0382
*   PTR1=LASTCHN&GATEBIT0;          /* PTR TO 1ST ELEMENT            */
         L     PTR1,LASTCHN(,PTR2)                                 0383
         N     PTR1,@CF00650                                       0383
*   IF PTR1=0 THEN                  /* IF NO OUTSTANDING MESSAGES    */
         LTR   PTR1,PTR1                                           0384
         BNZ   @RF00384                                            0384
*     DO;                           /* HANDLE AS SPECIAL CASE        */
*       LASTCHN=PTR1;               /* SET MESSAGES OUTSTANDING TO 0386
*                                      ZERO                          */
         ST    PTR1,LASTCHN(,PTR2)                                 0386
*       R1=ADDR($TLTECB2);          /* POINT TO ECB TO BE POSTED   0387
*                                                            @ZD10879*/
         L     R1,RCAPTR(,WAPTR)                                   0387
         LA    R1,$TLTECB2(,R1)                                    0387
*       IF $CTEQTT='1'B&($SNDRFLG='1'B×$EXIOWAT='1'B)/* POST ECB   0388
*                                                            @ZD10879*/
*         THEN                                                     0388
         TM    $CTEQTT(WAPTR),B'00010000'                          0388
         BNO   @RF00388                                            0388
         TM    $SNDRFLG(WAPTR),B'00100100'                         0388
         BZ    @RF00388                                            0388
*         CALL I00C1001;            /* POST ECB              @ZD10879*/
         L     @15,@CV01962                                        0389
         BALR  @14,@15                                             0389
*       PTR1=0;                     /* SHOW NO ELEMENT FOUND @ZD10879*/
@RF00388 SLR   PTR1,PTR1                                           0390
*       GO TO C16C0260;             /* EXIT FROM THE FUNCTION        */
         B     C16C0260                                            0391
*     END;                          /* END OF THE SPECIAL CASE       */
*   DO WHILE((PTR1->CHAIN&GATEBIT0)^=0);/* LOOP UNTIL LAST ELEMENT   */
@RF00384 B     @DE00393                                            0393
@DL00393 DS    0H                                                  0394
*     PTR2=PTR1;                    /* ADDR OF PTR TO NEXT ELEMENT   */
         LR    PTR2,PTR1                                           0394
*     PTR1=PTR2->CHAIN;             /* ADDR OF NEXT ELEMENT          */
         L     PTR1,CHAIN(,PTR2)                                   0395
*   END;                            /* END OF LOOP LOOKING FOR LAST
*                                      ELEMENT                       */
@DE00393 L     @00,CHAIN(,PTR1)                                    0396
         N     @00,@CF00650                                        0396
         LTR   @00,@00                                             0396
         BNZ   @DL00393                                            0396
*   PTR2->LASTCHN=GATEBIT1;         /* ZERO LAST CHAIN PTR           */
         MVC   LASTCHN(4,PTR2),@CF00652                            0397
*C16C0260:                                                         0398
*   R14=R7;                         /* RETURN TO THE CALLER          */
C16C0260 LR    R14,R7                                              0398
*   END C16C0255;                   /* END OF SUBROUTINE TO REMOVE 0399
*                                      ELEMENT FROM QUEUE            */
@EL00002 DS    0H                                                  0399
@EF00002 DS    0H                                                  0399
@ER00002 BR    @14                                                 0399
*   RESPECIFY                                                      0400
*    (PTR1,                                                        0400
*     PTR2) UNRESTRICTED;           /* REGISTERS ARE FREE AGAIN      */
*   RESPECIFY                                                      0401
*     R1 RESTRICTED;                /* DONT LET THIS REG GET ALTERED */
*C16C0265:                                                         0402
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0402
C16C0265 DS    0H                                                  0403
*   R8=R14;                         /* SAVE THE RETURN ADDRESS       */
         LR    R8,R14                                              0403
*   CALL C16C0255;                  /* GET AN RPL TO PROCESS         */
         BAL   @14,C16C0255                                        0404
*   $CURELEM(INDX)=PTR1;                                           0405
         LR    @11,INDX                                            0405
         MH    @11,@CH00337                                        0405
         ST    PTR1,$CURELEM-68(@11,WAPTR)                         0405
*   RPLPTR=ADDR($TLTRPL1);          /* POINT TO THE CT RPL           */
         LA    RPLPTR,$TLTRPL1(,WAPTR)                             0406
*   IF INDX=2 THEN                  /* CHECK TO SEE WHICH RPL IS   0407
*                                      CORRECT                       */
         C     INDX,@CF00139                                       0407
         BNE   @RF00407                                            0407
*     RPLPTR=ADDR($TLTRPL2);        /* MUST BE AN AP                 */
         LA    RPLPTR,$TLTRPL2(,WAPTR)                             0408
*   ARG=$CID(INDX);                 /* PICK UP THE CID               */
@RF00407 LR    @11,INDX                                            0409
         MH    @11,@CH00337                                        0409
         ST    @11,@TF00001                                        0409
         ALR   @11,WAPTR                                           0409
         ICM   ARG,15,$CID-68(@11)                                 0409
*   RPLUSFLD=WAPTR;                 /* SAVE WAPTR            @DM30415*/
         ST    WAPTR,RPLUSFLD(,RPLPTR)                             0410
*   IF R1^=0 THEN                   /* CHECK FOR ELEMENT TO PROCESS  */
         LTR   R1,R1                                               0411
         BZ    @RF00411                                            0411
*     DO;                           /* IF THER WAS A RETURNED      0412
*                                      ELEMENT, START IT             */
*       RESPECIFY                                                  0413
*         R1 UNRESTRICTED;          /* RELEASE THIS REGISTER FOR USE */
*       R7=ADDR(MSG);               /* POINT TO MSG TO BE SENT       */
         L     @11,@TF00001                                        0414
         L     @11,$CURELEM-68(@11,WAPTR)                          0414
         LA    R7,MSG(,@11)                                        0414
*       R6=OUTCT;                   /* SET UP LENGTH OF OUTBOUND MSG */
         SLR   R6,R6                                               0415
         IC    R6,OUTCT(,@11)                                      0415
*       IF $DEVLU(INDX)=OFF         /* IF NOT AN LU                  */
*         THEN                                                     0416
         LR    @11,WAPTR                                           0416
         AL    @11,@TF00001                                        0416
         TM    $DEVLU-68(@11),B'00001000'                          0416
         BNZ   @RF00416                                            0416
*         DO;                                                      0417
*           IF $DVCTBYT(INDX)=OFF   /* IF NO CONTROL BYTE PRESENT    */
*             THEN                                                 0418
         LR    @11,WAPTR                                           0418
         AL    @11,@TF00001                                        0418
         TM    $DVCTBYT-68(@11),B'00000010'                        0418
         BNZ   @RF00418                                            0418
*             GEN REFS(RPLPTR,ISTCC016,ARG,R6,R7);                 0419
 WRITE RPL=(RPLPTR),OPTCD=ASY,EXIT=ISTCC016,ARG=(ARG),                 X
               AREA=(R7),RECLEN=(R6)
*           ELSE                                                   0420
*             DO;                                                  0420
         B     @RC00418                                            0420
@RF00418 DS    0H                                                  0421
*               R7=R7+1;            /* SKIP OVER CONTROL BYTE        */
         AL    R7,@CF00072                                         0421
*               R6=R6-1;            /* REDUCE THE COUNT              */
         BCTR  R6,0                                                0422
*               IF MSG(1)='1'       /* SHOULD SCREEN BE ERASED       */
*                 THEN                                             0423
         LR    @11,INDX                                            0423
         MH    @11,@CH00337                                        0423
         L     @11,$CURELEM-68(@11,WAPTR)                          0423
         CLI   MSG(@11),C'1'                                       0423
         BNE   @RF00423                                            0423
*                 GEN REFS(RPLPTR,ISTCC016,ARG,R6,R7);             0424
 WRITE RPL=(RPLPTR),EXIT=ISTCC016,ARG=(ARG),RECLEN=(R6),               X
               AREA=(R7),OPTCD=(ASY,LBT,NERASE)
*               ELSE                                               0425
*                 GEN REFS(RPLPTR,ISTCC016,ARG,R6,R7);             0425
         B     @RC00423                                            0425
@RF00423 DS    0H                                                  0425
 WRITE RPL=(RPLPTR),EXIT=ISTCC016,ARG=(ARG),RECLEN=(R6),               X
               AREA=(R7),OPTCD=(ASY,LBT,ERASE)
*             END;                                                 0426
*         END;                                                     0427
*       ELSE                        /* PROCESS AN LU         @D32JPGH*/
*         DO;                                                      0428
         B     @RC00416                                            0428
@RF00416 DS    0H                                                  0429
*           IF BINBRAK=ON           /* DID WE BIND TO USE BRACKETS 0429
*                                                            @D32JPGH*/
*             THEN                                                 0429
         LR    @11,INDX                                            0429
         MH    @11,@CH00337                                        0429
         LA    @10,$DEVSESP-68(@11,WAPTR)                          0429
         TM    BINBRAK-1(@10),B'00100000'                          0429
         BNO   @RF00429                                            0429
*             DO;                                                  0430
*               RPLBB=OFF;                                         0431
*               RPLEB=OFF;                                         0432
         LA    @10,16                                              0432
         ALR   @10,RPLPTR                                          0432
         NI    RPLBB(@10),B'00111111'                              0432
*               $DVBRKSN(INDX)=0;   /* RESET BRACKET TO ZERO @D32JPGH*/
         SLR   @00,@00                                             0433
         STC   @00,$DVBRKSN-68(@11,WAPTR)                          0433
*               IF $DVBRKST(INDX)^=INB/* NOT IN BRACKET STATE      0434
*                                                            @D32JPGH*/
*                 THEN              /* THEN                  @D32JPGH*/
         SLR   @00,@00                                             0434
         IC    @00,$DVBRKST-68(@11,WAPTR)                          0434
         C     @00,@CF00072                                        0434
         BE    @RF00434                                            0434
*                 RPLBB=ON;         /* SET BEGIN BRACKET     @D32JPGH*/
         OI    RPLBB(@10),B'10000000'                              0435
*               IF($MSGOTSD(INDX)&GATEBIT0)=0&INCT=0/* IF NO MORE  0436
*                                      ELEMENTS AND DON'T NEED DATA  */
*                 THEN                                             0436
@RF00434 LR    @11,INDX                                            0436
         MH    @11,@CH00337                                        0436
         L     @00,$MSGOTSD-68(@11,WAPTR)                          0436
         N     @00,@CF00650                                        0436
         LTR   @00,@00                                             0436
         BNZ   @RF00436                                            0436
         L     @11,$CURELEM-68(@11,WAPTR)                          0436
         CLI   INCT(@11),0                                         0436
         BNE   @RF00436                                            0436
*                 RPLEB=ON;         /* END BRACKET           @D32JPGH*/
         OI    RPLEB+16(RPLPTR),B'01000000'                        0437
*               IF RPLBB=ON THEN    /* IF SENDING A BB               */
@RF00436 LA    @11,16                                              0438
         ALR   @11,RPLPTR                                          0438
         TM    RPLBB(@11),B'10000000'                              0438
         BNO   @RF00438                                            0438
*                 IF RPLEB=ON THEN  /* AND IF SENDING AN EB          */
         TM    RPLEB(@11),B'01000000'                              0439
         BNO   @RF00439                                            0439
*                   $DVBRKST(INDX)=BETB;/* THEN GOING BETEWEEN     0440
*                                      BRACKET                       */
         LR    @11,INDX                                            0440
         MH    @11,@CH00337                                        0440
         SLR   @00,@00                                             0440
         STC   @00,$DVBRKST-68(@11,WAPTR)                          0440
*                 ELSE              /* IF BB AND NOT EB              */
*                   $DVBRKSN(INDX)=SNDBB;/* OTHERWISE, ONLY SENDING
*                                      BB                            */
         B     @RC00439                                            0441
@RF00439 LR    @11,INDX                                            0441
         MH    @11,@CH00337                                        0441
         LA    @00,1                                               0441
         STC   @00,$DVBRKSN-68(@11,WAPTR)                          0441
*               ELSE                /* IF NOT SENDING BB             */
*                 IF RPLEB=ON THEN  /* IF AN EB WITHOUT A BB         */
         B     @RC00438                                            0442
@RF00438 TM    RPLEB+16(RPLPTR),B'01000000'                        0442
         BNO   @RF00442                                            0442
*                   IF BINBKTR=ON THEN/* AND IF CONDITIONAL        0443
*                                      TERMINATION                   */
         LR    @11,INDX                                            0443
         MH    @11,@CH00337                                        0443
         LA    @10,$DEVSESP-68(@11,WAPTR)                          0443
         TM    BINBKTR-1(@10),B'00010000'                          0443
         BNO   @RF00443                                            0443
*                     $DVBRKSN(INDX)=SNDEB;/* ONLY SENDING AN EB     */
         LA    @00,2                                               0444
         STC   @00,$DVBRKSN-68(@11,WAPTR)                          0444
*                   ELSE            /* SENDING EB ONLY,NO CONDITIONAL
*                                      TERMINATION                   */
*                     $DVBRKST(INDX)=BETB;/* GO TO BETWEEN BRACKETS  */
         B     @RC00443                                            0445
@RF00443 LR    @11,INDX                                            0445
         MH    @11,@CH00337                                        0445
         SLR   @00,@00                                             0445
         STC   @00,$DVBRKST-68(@11,WAPTR)                          0445
*             END;                  /* END OF BRACKET STATE MANAGER  */
@RC00443 DS    0H                                                  0446
@RF00442 DS    0H                                                  0446
@RC00438 DS    0H                                                  0447
*           IF $ASCII(INDX)=ON THEN /* IF ASCII, SET ALTERNATE CODE
*                                      BIT                   @ZD10887*/
@RF00429 LR    @11,INDX                                            0447
         MH    @11,@CH00337                                        0447
         ALR   @11,WAPTR                                           0447
         TM    $ASCII-68(@11),B'00000100'                          0447
         BNO   @RF00447                                            0447
*             RPLCSI=ON;            /* ITS ASCII, SET BIT            */
         OI    RPLCSI+16(RPLPTR),B'00001000'                       0448
*           $DVSNDOK(INDX)=OFF;     /* DONT SEND ANOTHER MSG         */
@RF00447 LR    @11,INDX                                            0449
         MH    @11,@CH00337                                        0449
         ST    @11,@TF00001                                        0449
         ALR   @11,WAPTR                                           0449
         NI    $DVSNDOK-68(@11),B'11101111'                        0449
*           IF INCT^=0&BINFMTRM=BINHDXFF THEN/* IF ANSWER EXPECTED 0450
*                                      AND HALF- DUPLEX FF CHANGE  0450
*                                      DIRECTION             @AX11982*/
         L     @11,@TF00001                                        0450
         L     @11,$CURELEM-68(@11,WAPTR)                          0450
         CLI   INCT(@11),0                                         0450
         BE    @RF00450                                            0450
         L     @11,@TF00001                                        0450
         LA    @11,$DEVSESP-68(@11,WAPTR)                          0450
         TM    BINFMTRM-1(@11),B'10000000'                         0450
         BNO   @RF00450                                            0450
         TM    BINFMTRM-1(@11),B'01000000'                         0450
         BNZ   @RF00450                                            0450
*             RPLCMD='1'B;                                         0451
         OI    RPLCMD+16(RPLPTR),B'00100000'                       0451
*           GEN REFS(RPLPTR,ARG,R6,R7);                            0452
@RF00450 DS    0H                                                  0452
 SEND RPL=(RPLPTR),ARG=(ARG),AREA=(R7),RECLEN=(R6),                    X
               STYPE=REQ,CONTROL=DATA,POST=SCHED,CHAIN=ONLY,           X
               OPTCD=(SYN,NFMHDR),RESPOND=(NEX,FME,NRRN)
*         END;                      /* END OF LU(RECORD) PROCESSING  */
*       IF R15^=0 THEN              /* CHECK TO SEE THE I/O WENT O.K */
@RC00416 LTR   R15,R15                                             0454
         BZ    @RF00454                                            0454
*         DO;                       /* BAD R.C., PROCESS             */
*           CALL C16C0920;          /* IF ERROR, FREE STORAGE        */
         BAL   @14,C16C0920                                        0456
*           GO TO C16C0266;         /* IF ERROR,GET OUT NOW          */
         B     C16C0266                                            0457
*         END;                      /* END OF BAD R.C, PROCESSING    */
*     END;                          /* END OF STARTING A NEW ELEMENT
*                                      OPERATION                     */
@RF00454 DS    0H                                                  0460
*   IF $DEVLU(INDX)='1'B THEN       /* IF THIS IS AN LU, RECEIVE RESP*/
@RF00411 LR    @11,INDX                                            0460
         MH    @11,@CH00337                                        0460
         ST    @11,@TF00001                                        0460
         ALR   @11,WAPTR                                           0460
         TM    $DEVLU-68(@11),B'00001000'                          0460
         BNO   @RF00460                                            0460
*     DO;                           /* LU, GET THE DATA              */
*       RPLBUFL=$DVINCT(INDX);      /* POINT TO BUFFER TO READ INTO  */
         L     @11,@TF00001                                        0462
         SLR   @00,@00                                             0462
         IC    @00,$DVINCT-68(@11,WAPTR)                           0462
         ST    @00,RPLBUFL(,RPLPTR)                                0462
*       RPLAREA=ADDR($TRMINPT);     /* LOCATION                      */
         LA    @00,$TRMINPT(,WAPTR)                                0463
         ST    @00,RPLAREA(,RPLPTR)                                0463
*       GEN REFS(RPLPTR,ARG);                                      0464
 RECEIVE RPL=(RPLPTR),ARG=(ARG),EXIT=ISTCC016,                         X
               OPTCD=(ASY,TRUNC,Q),RTYPE=(DFSYN,DFASY,RESP)
*       IF R15^=0 THEN              /* IF ERROR DURING RECEIVE       */
         LTR   R15,R15                                             0465
         BZ    @RF00465                                            0465
*         CALL C16C0920;            /* ERROR, GET RID OF EVERYTHING  */
         BAL   @14,C16C0920                                        0466
*     END;                          /* END OF LU RECEIVE FOR RESPONSE*/
@RF00465 DS    0H                                                  0468
*C16C0266:                                                         0468
*   R14=R8;                         /* RESTORE REG 14                */
@RF00460 DS    0H                                                  0468
C16C0266 LR    R14,R8                                              0468
*   END C16C0265;                   /* END OF ROUTINE TO START AN  0469
*                                      ELEMENT ON QUEUE              */
@EL00003 DS    0H                                                  0469
@EF00003 DS    0H                                                  0469
@ER00003 BR    @14                                                 0469
*C16C0270:                                                         0470
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0470
C16C0270 DS    0H                                                  0471
*   RESPECIFY                                                      0471
*     R5 RESTRICTED;                /* RESTRICT RETURN SAVE REGISTER */
*   R5=R14;                         /* SAVE REG 14                   */
         LR    R5,R14                                              0472
*   RESPECIFY                                                      0473
*    (R0,                                                          0473
*     R1) RESTRICTED;               /* DONT LET THESE REGISTERS GET
*                                      ALTRED                        */
*   R0=RPLPTR->OUTCT+10;            /* GET LENGTH OF GETMAINED AREA  */
         LA    R0,10                                               0474
         SLR   @11,@11                                             0474
         IC    @11,OUTCT(,RPLPTR)                                  0474
         ALR   R0,@11                                              0474
*   R1=RPLPTR;                      /* PTR TO AREA TO BE FREED       */
         LR    R1,RPLPTR                                           0475
*/*VFRMAIN  SIZE((0))STORAGE((1))SUBPOOL(0)                          */
*                                                                  0476
*   DO;                                                            0476
*     DO;                           /* CMZMREG (0,15) RESTRICT       */
*       RFY                                                        0478
*        (GPR00P,                                                  0478
*         GPR15P) RSTD;                                            0478
*     END;                          /* CMZMREG PUT SUBPOOL PARM IN 0479
*                                      HIGH- ORDER BYTE OF REG 15    */
*     GPR15F=0;                                                    0480
         SLR   GPR15F,GPR15F                                       0480
*     SLL(GPR15P,24);               /* COMBINE SUBPOOL AND SIZE IN 0481
*                                      REGISTER 0                    */
         SLL   GPR15P,24                                           0481
*     GPR00P=GPR00P×GPR15P;                                        0482
         OR    GPR00P,GPR15P                                       0482
*     DO;                           /* CMZMREG (0,15) RELEASE        */
*       RFY                                                        0484
*        (GPR00P,                                                  0484
*         GPR15P) UNRSTD;                                          0484
*     END;                          /* CMZMREG DECLARE AND RESTRICT
*                                      REG 1                         */
*     DO;                           /* CMZMREG (1) RESTRICT          */
*       RFY                                                        0487
*        (GPR01P) RSTD;                                            0487
*     END;                          /* CMZMREG INVOKE XREGSET MACRO
*                                      TO CHECK STORAGE PARM AND PUT
*                                      ADDR IN REGISTER 1            */
*/*XREGSET  PID('STORAGE')PPARM((1))RREG(1,GPR01P)                   */
*                                                                  0489
*     DO;                                                          0489
*                                                                  0489
*/*PARM ALREADY IN PROPER REGISTER                                   */
*                                                                  0490
*     END;                          /* XREGSET INVOKE FREEMAIN MACRO */
*     GEN;                                                         0491
         FREEMAIN R,LV=(0),A=(1)
*                                   /* UNRESTRICT REG 1              */
*     DO;                           /* CMZMREG (1) RELEASE           */
*       RFY                                                        0493
*        (GPR01P) UNRSTD;                                          0493
*     END;                          /* CMZMREG                       */
*   END;                            /* VFRMAIN                       */
*   RESPECIFY                                                      0496
*    (R0,                                                          0496
*     R1) UNRESTRICTED;             /* RELEASE THESE REGISTERS FOR 0496
*                                      USE                           */
*   R14=R5;                         /* RESTORE REG 14                */
         LR    R14,R5                                              0497
*   END C16C0270;                   /* END OF ROUTINE TO FREE ELEMENT
*                                      FROM QUEUE                    */
@EL00004 DS    0H                                                  0498
@EF00004 DS    0H                                                  0498
@ER00004 BR    @14                                                 0498
*C16C0280:                                                         0499
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0499
C16C0280 DS    0H                                                  0500
*   R5=R14;                         /* SAVE THE RETURN ADDRESS     0500
*                                                            @D32JPGH*/
         LR    R5,R14                                              0500
*   RESPECIFY                                                      0501
*     LASTCHN BASED(PTR1);                                         0501
*   PTR1=ADDR($MSGOTSD(INDX));      /* PTR TO 1ST ELEMENT    @D32JPGH*/
         LR    @11,INDX                                            0502
         MH    @11,@CH00337                                        0502
         LA    PTR1,$MSGOTSD-68(@11,WAPTR)                         0502
*   DO WHILE((PTR1->CHAIN&GATEBIT0)^=0);/* LOOP TILL LAST ELEMENT    */
         B     @DE00503                                            0503
@DL00503 DS    0H                                                  0504
*     PTR1=PTR1->CHAIN;             /* ADDR OF NEXT ELEMENT  @D32JPGH*/
         L     PTR1,CHAIN(,PTR1)                                   0504
*   END;                            /* END OF LOOP           @D32JPGH*/
@DE00503 SLR   @11,@11                                             0505
         L     @00,CHAIN(,PTR1)                                    0505
         N     @00,@CF00650                                        0505
         CR    @00,@11                                             0505
         BNE   @DL00503                                            0505
*   PTR1->CHAIN=$CURELEM(INDX);     /* PUT PTR INTO LAST ELEMENT     */
         LR    @10,INDX                                            0506
         MH    @10,@CH00337                                        0506
         L     @00,$CURELEM-68(@10,WAPTR)                          0506
         ST    @00,CHAIN(,PTR1)                                    0506
*   $CURELEM(INDX)=0;               /* SHOW NO CURRENT INDX          */
         ST    @11,$CURELEM-68(@10,WAPTR)                          0507
*   R14=R5;                         /* RETURN TO THE CALLER  @D32JPGH*/
         LR    R14,R5                                              0508
*   END C16C0280;                   /* END OF SUBROUTINE TO ADD    0509
*                                      ELEMENT TO QUE        @D32JPGH*/
@EL00005 DS    0H                                                  0509
@EF00005 DS    0H                                                  0509
@ER00005 BR    @14                                                 0509
*C16C0900:                                                         0510
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* MOVE DATA TO CALLER           */
C16C0900 DS    0H                                                  0511
*   R5=R14;                         /* SAVE RETURN POINT             */
         LR    R5,R14                                              0511
*   IF INADR^=0 THEN                /* BUFFER AVAILABLE              */
         SLR   @11,@11                                             0512
         LR    @10,INDX                                            0512
         MH    @10,@CH00337                                        0512
         ST    @10,@TF00001                                        0512
         L     @10,$CURELEM-68(@10,WAPTR)                          0512
         C     @11,INADR(,@10)                                     0512
         BE    @RF00512                                            0512
*     DO;                           /* YES, PASSBACK DATA            */
*       M=0;                                                       0514
         STH   @11,M                                               0514
*       I=1;                        /* INITIAL COUNTERS              */
         MVC   I(2),@CH00072                                       0515
*       IF $DEVFRRS(INDX)='19'X×$DEVFRRS(INDX)='1C'X THEN/* 3270     */
         LR    @11,WAPTR                                           0516
         AL    @11,@TF00001                                        0516
         CLI   $DEVFRRS-68(@11),X'19'                              0516
         BE    @RT00516                                            0516
         LR    @11,WAPTR                                           0516
         AL    @11,@TF00001                                        0516
         CLI   $DEVFRRS-68(@11),X'1C'                              0516
         BNE   @RF00516                                            0516
@RT00516 DS    0H                                                  0517
*         I=7;                      /* YES, SKIP CURSOR ADDR         */
         MVC   I(2),@CH00215                                       0517
*       DO I=I TO LENGTH($TRMINPT); /* MOVE DATA BACK TO CALLER      */
@RF00516 LH    @00,I                                               0518
         B     @DE00518                                            0518
@DL00518 DS    0H                                                  0519
*         IF $TRMINPT(I)>=' ' THEN  /* DATA                          */
         LR    @11,@00                                             0519
         ALR   @11,WAPTR                                           0519
         CLI   $TRMINPT-1(@11),C' '                                0519
         BL    @RF00519                                            0519
*           DO;                     /* YES, PASS IT BACK             */
*             M=M+1;                /* INCREASE BYTES PASSED         */
         LA    @11,1                                               0521
         AH    @11,M                                               0521
         STH   @11,M                                               0521
*             CARRAY(M)=$TRMINPT(I)×' ';/* MOVE DATA, PUT IN UPPER 0522
*                                      CASE                          */
         LR    @10,INDX                                            0522
         MH    @10,@CH00337                                        0522
         L     @10,$CURELEM-68(@10,WAPTR)                          0522
         ST    @10,@TF00001                                        0522
         L     @10,INADR(,@10)                                     0522
         ALR   @10,@11                                             0522
         BCTR  @10,0                                               0522
         LR    @11,@00                                             0522
         ALR   @11,WAPTR                                           0522
         MVC   CARRAY(1,@10),$TRMINPT-1(@11)                       0522
         OI    CARRAY(@10),C' '                                    0522
*             IF M=INCT THEN        /* MORE ROOM IN THE BUFFER       */
         LH    @11,M                                               0523
         L     @10,@TF00001                                        0523
         SLR   @00,@00                                             0523
         IC    @00,INCT(,@10)                                      0523
         CR    @11,@00                                             0523
         BE    @RT00523                                            0523
*               GO TO C16C0905;     /* NO, LEAVE                     */
*           END;                    /* END, OF PASS BACK DATA        */
*         ELSE                      /* NOT DATA, CONTROL INFO        */
*           IF $TRMINPT(I)='11'X THEN/* 3270, IS IT A SBA CHARACTER  */
         B     @RC00519                                            0526
@RF00519 LH    @11,I                                               0526
         ALR   @11,WAPTR                                           0526
         CLI   $TRMINPT-1(@11),X'11'                               0526
         BNE   @RF00526                                            0526
*             I=I+2;                /* YES, SKIP ADDR CHARACTERS     */
         LH    @11,I                                               0527
         LA    @11,2(,@11)                                         0527
         STH   @11,I                                               0527
*       END;                        /* END OF MOVING BACK DATA       */
@RF00526 DS    0H                                                  0528
@RC00519 LA    @00,1                                               0528
         AH    @00,I                                               0528
         STH   @00,I                                               0528
@DE00518 C     @00,@CF00048                                        0528
         BNH   @DL00518                                            0528
*C16C0905:                                                         0529
*       MSGCOUNT=M;                 /* RETURN COUNT                  */
C16C0905 LR    @11,INDX                                            0529
         MH    @11,@CH00337                                        0529
         L     @11,$CURELEM-68(@11,WAPTR)                          0529
         L     @11,INADR(,@11)                                     0529
         LH    @00,M                                               0529
         BCTR  @11,0                                               0529
         STC   @00,MSGCOUNT(,@11)                                  0529
*       IF $ALTPRTR=ON THEN         /* IF AP PRESENT                 */
         TM    $ALTPRTR(WAPTR),B'00000010'                         0530
         BNO   @RF00530                                            0530
*         $TWOWAY=ON;               /* PUT REPLY THERE               */
         OI    $TWOWAY(WAPTR),B'01000000'                          0531
*       $POSTFLG=OFF;               /* RESET WAITING FLAG            */
@RF00530 NI    $POSTFLG(WAPTR),B'10111111'                         0532
*       R1=ADDR($TLTECB2);          /* POINT TO THE ECB TO POST      */
         L     R1,RCAPTR(,WAPTR)                                   0533
         LA    R1,$TLTECB2(,R1)                                    0533
*       CALL I00C1001;              /* POST THE ECB                  */
         L     @15,@CV01962                                        0534
         BALR  @14,@15                                             0534
*     END;                          /* END USE OF BUFFER TRMINPT     */
*   $TRMINPT=$TRMINPT&&$TRMINPT;                                   0536
@RF00512 XC    $TRMINPT(80,WAPTR),$TRMINPT(WAPTR)                  0536
*   $DVINCT(1)=LENGTH($TRMINPT);                                   0537
         MVI   $DVINCT(WAPTR),X'50'                                0537
*   R14=R5;                         /* RESTORE RETURN POINTER        */
         LR    R14,R5                                              0538
*   END C16C0900;                                                  0539
@EL00006 DS    0H                                                  0539
@EF00006 DS    0H                                                  0539
@ER00006 BR    @14                                                 0539
*C16C0910:                                                         0540
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0540
C16C0910 DS    0H                                                  0541
*   R7=R14;                         /* SAVE RETURN POINT             */
         LR    R7,R14                                              0541
*   RPLPTR=$CURELEM(INDX);          /* POINT TO ELEMENT BEING      0542
*                                      PROCESSED                     */
         LR    @11,INDX                                            0542
         MH    @11,@CH00337                                        0542
         L     RPLPTR,$CURELEM-68(@11,WAPTR)                       0542
*   $CURELEM(INDX)=0;               /* ZERO OUT CURRENT ELEMENT    0543
*                                      POINTER                       */
         SLR   @10,@10                                             0543
         ST    @10,$CURELEM-68(@11,WAPTR)                          0543
*   IF RPLPTR^=0 THEN               /* ONLY CALL IF THERE IS AN    0544
*                                      ELEMENT TO FREE               */
         CR    RPLPTR,@10                                          0544
         BE    @RF00544                                            0544
*     CALL C16C0270;                /* FREE THE ELEMENT              */
         BAL   @14,C16C0270                                        0545
*   R14=R7;                         /* RESTORE THE RETURN POINT      */
@RF00544 LR    R14,R7                                              0546
*   END C16C0910;                   /* END OF ROUTINE TO FREE CURRENT
*                                      ELEMENT                       */
@EL00007 DS    0H                                                  0547
@EF00007 DS    0H                                                  0547
@ER00007 BR    @14                                                 0547
*C16C0920:                                                         0548
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0548
C16C0920 DS    0H                                                  0549
*   R6=R14;                         /* SAVE THE RETURN POINT         */
         LR    R6,R14                                              0549
*   IF $ALTPRTR=ON&                 /* IF THERE IS AN AP             */
*       INDX=AP                     /* AND THIS IS A TEST TERMINAL   */
*     THEN                                                         0550
         TM    $ALTPRTR(WAPTR),B'00000010'                         0550
         BNO   @RF00550                                            0550
         C     INDX,@CF00139                                       0550
         BNE   @RF00550                                            0550
*     $ALTPRTR=OFF;                 /* DITCH THE AP                  */
         NI    $ALTPRTR(WAPTR),B'11111101'                         0551
*   ELSE                            /* THE ERROR WAS ON THE CT       */
*     DO;                                                          0552
         B     @RC00550                                            0552
@RF00550 DS    0H                                                  0553
*       IF $RPLERR=0 THEN                                          0553
         L     @00,$RPLERR-1(,WAPTR)                               0553
         ICM   @00,8,@CB01486                                      0553
         LTR   @00,@00                                             0553
         BNZ   @RF00553                                            0553
*         $RPLERR=RPLFDBK;          /* SET FIRST ERROR FEEDBACK      */
         MVC   $RPLERR(3,WAPTR),RPLFDBK(RPLPTR)                    0554
*       $CANCEL=ON;                 /* CANCEL THIS LOGON             */
@RF00553 OI    $CANCEL(WAPTR),B'00000010'                          0555
*       $CTERROR=ON;                /* CANCEL BECAUSE OF CT ERR      */
         OI    $CTERROR(WAPTR),B'01000000'                         0556
*       $POSTFLG=OFF;               /* STOP WAITING FOR DATA         */
         NI    $POSTFLG(WAPTR),B'10111111'                         0557
*     END;                                                         0558
*   CALL C16C0910;                  /* FREE THE CURRENT ELEMENT      */
@RC00550 BAL   @14,C16C0910                                        0559
*   R14=R6;                         /* RESTORE THE RETURN POINT      */
         LR    R14,R6                                              0560
*   END C16C0920;                   /* END OF SETTING ERROR STATUS   */
@EL00008 DS    0H                                                  0561
@EF00008 DS    0H                                                  0561
@ER00008 BR    @14                                                 0561
@PB00008 DS    0H                                                  0562
*   DO;                             /* TPEPILOG                      */
*     GEN(PRINT OFF);                                              0563
         PRINT OFF
*     DO;                                                          0564
*       DCL                                                        0565
*         GPR00F FIXED(31) REG(00),                                0565
*         GPR00P PTR(31) REG(00),                                  0565
*         GPR01F FIXED(31) REG(01),                                0565
*         GPR01P PTR(31) REG(01),                                  0565
*         GPR02F FIXED(31) REG(02),                                0565
*         GPR02P PTR(31) REG(02),                                  0565
*         GPR03F FIXED(31) REG(03),                                0565
*         GPR03P PTR(31) REG(03),                                  0565
*         GPR04F FIXED(31) REG(04),                                0565
*         GPR04P PTR(31) REG(04),                                  0565
*         GPR05F FIXED(31) REG(05),                                0565
*         GPR05P PTR(31) REG(05),                                  0565
*         GPR06F FIXED(31) REG(06),                                0565
*         GPR06P PTR(31) REG(06),                                  0565
*         GPR07F FIXED(31) REG(07),                                0565
*         GPR07P PTR(31) REG(07),                                  0565
*         GPR08F FIXED(31) REG(08),                                0565
*         GPR08P PTR(31) REG(08),                                  0565
*         GPR09F FIXED(31) REG(09),                                0565
*         GPR09P PTR(31) REG(09),                                  0565
*         GPR10F FIXED(31) REG(10),                                0565
*         GPR10P PTR(31) REG(10),                                  0565
*         GPR11F FIXED(31) REG(11),                                0565
*         GPR11P PTR(31) REG(11),                                  0565
*         GPR12F FIXED(31) REG(12),                                0565
*         GPR12P PTR(31) REG(12),                                  0565
*         GPR13F FIXED(31) REG(13),                                0565
*         GPR13P PTR(31) REG(13),                                  0565
*         GPR14F FIXED(31) REG(14),                                0565
*         GPR14P PTR(31) REG(14),                                  0565
*         GPR15F FIXED(31) REG(15),                                0565
*         GPR15P PTR(31) REG(15);                                  0565
*     END;                                                         0566
*     GEN(PRINT ON);                                               0567
         PRINT ON
*   END;                            /* TPEPILOG                      */
*   DO;                             /* ATDSPLY                       */
*   END;                            /* ATDSPLY                       */
*   END ISTCC016                                                   0571
*                                                                  0571
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IFGRPLVT)                                       */
*/*%INCLUDE SYSLIB  (ISTRPLFB)                                       */
*                                                                  0571
*       ;                                                          0571
         B     @EL00001                                            0571
@DATA    DS    0H
@CH00215 DC    H'7'
@CH00337 DC    H'68'
@DATD    DSECT
         DS    0F
@TF00001 DS    F
ISTCC016 CSECT
         DS    0F
@CF00072 DC    F'1'
@CH00072 EQU   @CF00072+2
@CF00139 DC    F'2'
@CF00068 DC    F'4'
@CF00054 DC    F'8'
@CF00048 DC    F'80'
@CF00083 DC    F'256'
@CF00650 DC    XL4'7FFFFFFF'
@CF00652 DC    XL4'80000000'
@CF02031 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
RPLSAVE  DS    A
I        DS    H
M        DS    H
N        DS    H
SCRATCH  DS    CL1
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ISTCC016 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV01962 DC    V(I00C1001)
         DS    0D
C16EXSAV DC    F'0'
BASE     DC    AL4(ISTCC016)
@CB01933 DC    X'0201'
@CB01937 DC    X'1001'
@CB01939 DC    X'0819'
@CB01940 DC    X'1007'
@CB01941 DC    X'1008'
@CB01486 DC    X'00'
         DS    CL1
C16CBUF1 DC    CL52' '
C16CBUF2 DC    CL52' '
SAVEA    DC    18F'0'
PATCH    DC    25F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
WAPTR    EQU   @02
RPLPTR   EQU   @04
RPHPTR   EQU   @01
R1       EQU   @01
R14      EQU   @14
R15      EQU   @15
R0       EQU   @00
R13      EQU   @13
R5       EQU   @05
R8       EQU   @08
R6       EQU   @06
R7       EQU   @07
R9       EQU   @09
R12      EQU   @12
PTR2     EQU   @15
PTR1     EQU   @01
INDX     EQU   @03
ARG      EQU   @05
GPR00P   EQU   @00
GPR15P   EQU   @15
GPR15F   EQU   @15
GPR01P   EQU   @01
GPR00F   EQU   @00
GPR01F   EQU   @01
GPR02F   EQU   @02
GPR02P   EQU   @02
GPR03F   EQU   @03
GPR03P   EQU   @03
GPR04F   EQU   @04
GPR04P   EQU   @04
GPR05F   EQU   @05
GPR05P   EQU   @05
GPR06F   EQU   @06
GPR06P   EQU   @06
GPR07F   EQU   @07
GPR07P   EQU   @07
GPR08F   EQU   @08
GPR08P   EQU   @08
GPR09F   EQU   @09
GPR09P   EQU   @09
GPR10F   EQU   @10
GPR10P   EQU   @10
GPR11F   EQU   @11
GPR11P   EQU   @11
GPR12F   EQU   @12
GPR12P   EQU   @12
GPR13F   EQU   @13
GPR13P   EQU   @13
GPR14F   EQU   @14
GPR14P   EQU   @14
         ENTRY C16C1000
ATCLCPTR EQU   1032
$RCAAREA EQU   0
$POINTER EQU   $RCAAREA+100
$TLTECB2 EQU   $POINTER+28
$TRTBLA  EQU   $POINTER+124
$CONSTNT EQU   $RCAAREA+244
$RCAFLG  EQU   $RCAAREA+604
$TRASCII EQU   $RCAAREA+608
$EXITSAV EQU   $RCAAREA+864
TOLTEPWA EQU   0
$SCTTBLE EQU   TOLTEPWA
$TESTOPT EQU   $SCTTBLE+2
$ERROPT  EQU   $SCTTBLE+3
$PDEVFLG EQU   $SCTTBLE+10
$CDSFLGS EQU   $SCTTBLE+11
$CDS8T19 EQU   $SCTTBLE+20
$EXECFLG EQU   $SCTTBLE+33
$OLTFLGS EQU   $SCTTBLE+36
$OLTFLG2 EQU   $SCTTBLE+37
$TOTFLG1 EQU   $SCTTBLE+38
$CTEQTT  EQU   $TOTFLG1
$ROUTMSK EQU   $SCTTBLE+40
$CDA     EQU   TOLTEPWA+100
$RCA     EQU   $CDA+44
$OLTPTR  EQU   $CDA+52
$HIMOREC EQU   $CDA+60
$COMMFLG EQU   TOLTEPWA+224
$FLAG3   EQU   $COMMFLG+2
$ALTPRTR EQU   $FLAG3
$FLAG4   EQU   $COMMFLG+3
$FLAG5   EQU   $COMMFLG+4
$EOJ     EQU   $FLAG5
$CANCEL  EQU   $EOJ
$FLAG6   EQU   $COMMFLG+5
$CTERROR EQU   $FLAG6
$ABNDBIT EQU   $FLAG6
$CIREQ   EQU   $FLAG6
$FLAG7   EQU   $COMMFLG+6
$EXIOWAT EQU   $FLAG7
$SNDRFLG EQU   $FLAG7
$FLAG8   EQU   $COMMFLG+7
$TWOWAY  EQU   $FLAG8
$FLAG12  EQU   $COMMFLG+11
$POSTFLG EQU   $FLAG12
$DEVTBLE EQU   TOLTEPWA+240
$DEVCDS  EQU   $DEVTBLE
$DEVUNAD EQU   $DEVCDS
@NM00043 EQU   $DEVUNAD+2
$DEVFEAT EQU   $DEVCDS+4
$DEVFRRS EQU   $DEVFEAT+1
$DEVCDSF EQU   $DEVCDS+9
$DEVSDCF EQU   $DEVCDS+10
$$SYMNME EQU   $DEVCDS+12
$MSGOTSD EQU   $$SYMNME
$CURELEM EQU   $$SYMNME+4
$DEVFLG1 EQU   $DEVTBLE+20
$EVNCPLT EQU   $DEVFLG1
$ATTNEXP EQU   $DEVFLG1
$INTOCC  EQU   $DEVFLG1
$DVCTBYT EQU   $INTOCC
$DEVFLG2 EQU   $DEVTBLE+21
$DEVTECB EQU   $DEVTBLE+22
$OPIS    EQU   $DEVTECB
$DVSEQNO EQU   $OPIS
$OPND    EQU   $DEVTECB+2
$DVBRKSN EQU   $OPND
$DVBRKST EQU   $OPND+1
$DVINCT  EQU   $DEVTBLE+26
$DEVFLG3 EQU   $DEVTBLE+27
$SIOFLG  EQU   $DEVFLG3
$DVSNDOK EQU   $SIOFLG
$IFTOUT  EQU   $DEVTBLE+36
$DEVSESP EQU   $IFTOUT
$SSCPDAF EQU   $IFTOUT+6
$LDNCBPT EQU   $DEVTBLE+48
$CID     EQU   $DEVTBLE+52
$RNINFO  EQU   $DEVTBLE+56
$DEVFLG5 EQU   $RNINFO+8
$DEVLU   EQU   $DEVFLG5
$ASCII   EQU   $DEVFLG5
$DEVFLG4 EQU   $DEVTBLE+65
$TLTRPL1 EQU   TOLTEPWA+1616
$TLTRPL2 EQU   TOLTEPWA+1736
$TRMINPT EQU   TOLTEPWA+2184
#EXITA   EQU   TOLTEPWA+2632
$RETREG  EQU   TOLTEPWA+2636
$CCOMDAT EQU   TOLTEPWA+2644
$CFLGS   EQU   $CCOMDAT+16
$24FEMSG EQU   TOLTEPWA+2681
$24CATMG EQU   $24FEMSG+11
@NM00051 EQU   TOLTEPWA+2776
$OUNTPTR EQU   @NM00051+4
$NSPTR   EQU   $OUNTPTR
$NSCNT   EQU   @NM00051+10
$ENXX    EQU   @NM00051+15
$IMITX   EQU   $ENXX
$RPLERR  EQU   TOLTEPWA+2977
SVESC033 EQU   TOLTEPWA+3160
SVECC013 EQU   TOLTEPWA+3232
SVEIC003 EQU   TOLTEPWA+3592
SVESC022 EQU   TOLTEPWA+3736
SVECC011 EQU   TOLTEPWA+4024
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLREQ   EQU   RPLIDWD+2
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLEXITP EQU   RPLECB
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLREOT  EQU   RPLFDB3
RPLKEYLE EQU   RPLCOMN+16
RPLAREA  EQU   RPLCOMN+32
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLNXTRP EQU   RPLCOMN+44
RPLRLEN  EQU   RPLCOMN+48
RPLBUFL  EQU   RPLCOMN+52
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
RPLVTEXT EQU   IFGRPL+76
RPLAARLN EQU   RPLVTEXT+4
RPLFDBK2 EQU   RPLVTEXT+12
RPLSSNSI EQU   RPLFDBK2
RPLDSB   EQU   RPLSSNSI
RPLDSB1  EQU   RPLDSB
RPLSSEI  EQU   RPLDSB1
RPLDSB2  EQU   RPLDSB+1
RPLSSMI  EQU   RPLDSB2
RPLUSNSI EQU   RPLFDBK2+2
RPLUSFLD EQU   RPLVTEXT+16
RPLOPTC3 EQU   RPLVTEXT+20
RPLOPT9  EQU   RPLOPTC3
RPLOPT10 EQU   RPLOPTC3+1
RPLOPT11 EQU   RPLOPTC3+2
RPLOPT12 EQU   RPLOPTC3+3
RPLFMHDR EQU   RPLOPT12
RPLOSENS EQU   RPLVTEXT+24
RPLSSNSO EQU   RPLOSENS
RPLSSEO  EQU   RPLSSNSO
ISTAVT   EQU   0
ISTRETRG EQU   ISTAVT+44
ISTLOK   EQU   0
LOKCHN   EQU   ISTLOK+1
LOKCHNG  EQU   LOKCHN
@NM00055 EQU   LOKCHNG+2
ISTPAB   EQU   0
PABWQCHN EQU   ISTPAB
PABWEQA  EQU   PABWQCHN
PABCHAIN EQU   PABWQCHN+4
PABRUNNG EQU   PABCHAIN
PABRPHFG EQU   ISTPAB+12
PABFLAGS EQU   PABRPHFG
PABERLCK EQU   PABFLAGS
PABERRLK EQU   PABERLCK
PABEND   EQU   ISTPAB+16
ISTDYPAB EQU   0
DYPCHAIN EQU   ISTDYPAB+4
DYPPACMD EQU   ISTDYPAB+12
ISTRPH   EQU   0
RPHCNTL  EQU   ISTRPH
RPHFLAGS EQU   RPHCNTL+2
RPHFSTLC EQU   RPHFLAGS
RPHFLGB  EQU   RPHCNTL+3
RPHRPHA  EQU   ISTRPH+4
RPHTSKID EQU   ISTRPH+8
RPHRESMA EQU   ISTRPH+16
RPHWPFLG EQU   RPHRESMA
RPHWEA   EQU   ISTRPH+24
RPHCSPA  EQU   RPHWEA
RPHSRPRM EQU   ISTRPH+28
RPHPABQA EQU   ISTRPH+36
RPHWORK  EQU   ISTRPH+40
RPHSAVE1 EQU   RPHWORK
RPHSBITS EQU   RPHSAVE1+1
ISTATCVT EQU   0
ATCRPTCH EQU   ISTATCVT
ATCITFLD EQU   ISTATCVT+8
ATCITCDS EQU   ATCITFLD+8
ATCITFLG EQU   ATCITCDS+4
ATCITRA1 EQU   ATCITFLG+2
ATCSMPAB EQU   ISTATCVT+88
ATCVDPAB EQU   ISTATCVT+152
ATCLDTIL EQU   ISTATCVT+408
ATCGTSTR EQU   ISTATCVT+608
ATCLUDVT EQU   ISTATCVT+768
ATCANYDT EQU   ISTATCVT+776
@NM00065 EQU   ISTATCVT+780
ATCPODVT EQU   ISTATCVT+804
ATCSTAT  EQU   ISTATCVT+936
ATCSTAT1 EQU   ATCSTAT
ATCPOFLG EQU   ATCSTAT+2
ATCSTAT4 EQU   ATCSTAT+3
ATCBITAN EQU   ISTATCVT+940
ATCFLAG2 EQU   ATCBITAN+1
ATCONID  EQU   ISTATCVT+944
ATCSSCPA EQU   ISTATCVT+948
ATCHPGM  EQU   ISTATCVT+1012
ATCVLCNT EQU   ISTATCVT+1016
ATCRNO   EQU   ISTATCVT+1020
@NM00088 EQU   ISTATCVT+1028
ATCSHRFG EQU   @NM00088+8
ATCCPDVT EQU   ISTATCVT+1096
ATCSMSDQ EQU   ISTATCVT+1140
ATCRID   EQU   ISTATCVT+1152
ATCLDAPP EQU   ISTATCVT+1288
ATCSQAFR EQU   ISTATCVT+1312
ATCORTCB EQU   ATCSQAFR+4
ATCORSRB EQU   ATCORTCB
ATCICAPP EQU   ISTATCVT+1320
ATCDAPVT EQU   ISTATCVT+1340
ATCGSRBQ EQU   ISTATCVT+1472
ATCGSRBG EQU   ATCGSRBQ
ATCENFLG EQU   ISTATCVT+1512
@NM00103 EQU   ISTATCVT+1575
ATCVTFLG EQU   ISTATCVT+1576
ATCZFLAG EQU   ISTATCVT+1696
ATCCRA   EQU   ISTATCVT+1720
ATCCRACN EQU   ATCCRA+4
ATCSRB   EQU   ISTATCVT+1728
ATCSRBCN EQU   ATCSRB+4
ATCCRPL  EQU   ISTATCVT+1736
ATCRPLCN EQU   ATCCRPL+4
ISTTIE   EQU   0
TIETIEA  EQU   ISTTIE+4
TIESNA   EQU   ISTTIE+8
TIERPHA  EQU   ISTTIE+12
ISTBIND  EQU   0
BINFMTY  EQU   ISTBIND
BINPRIP  EQU   ISTBIND+3
BINSECP  EQU   ISTBIND+4
BINCMNP  EQU   ISTBIND+5
BINBRAK  EQU   BINCMNP
BINBKTR  EQU   BINCMNP
BINCMNP2 EQU   ISTBIND+6
BINFMTRM EQU   BINCMNP2
BINTSU   EQU   ISTBIND+7
BINAPACE EQU   BINTSU
BINRPACE EQU   BINTSU+1
BINRUSZ  EQU   BINTSU+2
BINSRUSZ EQU   BINRUSZ
BINPRUSZ EQU   BINRUSZ+1
BINSPACE EQU   BINTSU+4
BINBPACE EQU   BINTSU+5
BINPRSVC EQU   ISTBIND+13
BINLUP   EQU   BINPRSVC
BINPSCHR EQU   BINPRSVC+1
BINCRYPT EQU   ISTBIND+25
BINCRYRL EQU   0
BINCRCTL EQU   BINCRYRL
BINCRPFL EQU   BINCRYRL+1
BINPNAU  EQU   0
BINAUNML EQU   BINPNAU
BINAUNM  EQU   BINPNAU+1
BINUSEDT EQU   0
BINUSDTL EQU   BINUSEDT
BINUSDTA EQU   BINUSEDT+1
BINURC   EQU   0
BINURCL  EQU   BINURC
BINURCD  EQU   BINURC+1
BINSLUNM EQU   0
RPLOF16  EQU   0
RPLRH3   EQU   RPLOF16
RPLBB    EQU   RPLRH3
RPLEB    EQU   RPLRH3
RPLCMD   EQU   RPLRH3
RPLCSI   EQU   RPLRH3
RPLSRTYP EQU   RPLOF16+1
RPLSTYPE EQU   RPLSRTYP
RPLRTYPE EQU   RPLSRTYP
RPLRRESP EQU   RPLRTYPE
RPLNFSYN EQU   RPLRTYPE
RPLCHN   EQU   RPLOF16+2
RPLLAST  EQU   RPLCHN
RPLONLY  EQU   RPLCHN
RPLVTFL1 EQU   RPLOF16+3
RPLVTFL2 EQU   RPLOF16+4
RPLPOSTV EQU   RPLVTFL2
RPLRESP  EQU   RPLVTFL2
RPLEX    EQU   RPLRESP
RPLNFME  EQU   RPLRESP
RPLRRN   EQU   RPLRESP
RPLCNTRL EQU   RPLOF16+5
RPLCNTDF EQU   RPLCNTRL
RPLDATA  EQU   RPLCNTDF
RPLCNCEL EQU   RPLCNTDF
RPLCHASE EQU   RPLCNTDF
RPLCNTDC EQU   RPLCNTRL+1
RPLRTR   EQU   RPLCNTDC
RPLLUS   EQU   RPLCNTDC
RPLSIGNL EQU   RPLCNTDC
RPLCNTSC EQU   RPLCNTRL+2
RPLSHUTD EQU   RPLCNTSC
RPLSHUTC EQU   RPLCNTSC
RPLRSHUT EQU   RPLCNTSC
RPLOF60  EQU   0
RPLOBSQ  EQU   RPLOF60+4
RPLIBSQ  EQU   RPLOF60+5
RPLSEQNO EQU   RPLOF60+6
CARRAY   EQU   0
MSGCOUNT EQU   0
ELEMENT  EQU   0
CHAIN    EQU   ELEMENT
INADR    EQU   ELEMENT+4
OUTCT    EQU   ELEMENT+8
INCT     EQU   ELEMENT+9
MSG      EQU   ELEMENT+10
BACKSAVE EQU   0
LASTCHN  EQU   0
$TRTBL   EQU   0
#EXIT    EQU   0
ISTRPL   EQU   0
ISTXDYP  EQU   0
ISTXPAB  EQU   0
RCAPTR   EQU   $RCA
PABXTNSN EQU   PABEND
BINLUP1  EQU   BINPSCHR
BINLUS   EQU   BINPSCHR
BINFMF1  EQU   BINLUS
@NM00123 EQU   BINFMF1
BINDSPF1 EQU   BINLUS+2
BINMEDIA EQU   BINLUS+4
BINLUP2  EQU   BINPSCHR
BINSCRSZ EQU   BINLUP2+5
BINLUP3  EQU   BINPSCHR
BINBFRSZ EQU   BINLUP3+5
BINBDESC EQU   BINLUP3+9
BINLUP4  EQU   BINPSCHR
BINPSNDO EQU   BINLUP4
BINPDSPP EQU   BINPSNDO
BINADSPP EQU   BINPSNDO+1
BINFMHUP EQU   BINPSNDO+3
BINSSNDO EQU   BINLUP4+4
BINCSO   EQU   BINLUP4+8
BINCSOR  EQU   BINCSO
BINGENCO EQU   BINLUP4+9
SVECC012 EQU   SVESC022
SVEIC00A EQU   SVEIC003
SVEIC004 EQU   SVEIC003
SVEIC005 EQU   SVEIC003
SVESC02A EQU   SVESC022
SVESC02B EQU   SVESC022
SVESC02D EQU   SVESC022
SVESC02E EQU   SVESC022
SVESC02F EQU   SVECC013
SVESC024 EQU   SVESC022
SVESC027 EQU   SVESC022
SVESC029 EQU   SVESC033
SVESC031 EQU   SVECC013
SVESC032 EQU   SVECC011
SVETC037 EQU   SVEIC003
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
BINRSV35 EQU   BINLUP4+10
BINRVS34 EQU   BINGENCO
BINAAO   EQU   BINGENCO
BINIAO   EQU   BINGENCO
BINRSV33 EQU   BINGENCO
BINWSDF  EQU   BINGENCO
BINRSV32 EQU   BINGENCO
BINCSOC2 EQU   BINCSO
BINCSOC1 EQU   BINCSO
BINRSV31 EQU   BINCSOR
BINRSV30 EQU   BINCSOR
BINCSOAI EQU   BINCSOR
BINCSOE  EQU   BINCSOR
BINFMHUS EQU   BINSSNDO+3
BINCSLS  EQU   BINSSNDO+2
BINADSPS EQU   BINSSNDO+1
BINPDSPS EQU   BINSSNDO
BINKIXS  EQU   BINFMHUP
BINQFDO  EQU   BINFMHUP
BINWPFMO EQU   BINFMHUP
BINPDIRO EQU   BINFMHUP
BINCOMPO EQU   BINFMHUP
BINDSSTO EQU   BINFMHUP
BINSSDAT EQU   BINFMHUP
BINCSLP  EQU   BINPSNDO+2
BINRSV29 EQU   BINADSPP
BINADSRF EQU   BINADSPP
BINADSSF EQU   BINADSPP
BINADSBE EQU   BINADSPP
BINADSEC EQU   BINADSPP
BINADSCD EQU   BINADSPP
BINADSEP EQU   BINADSPP
BINPEP   EQU   BINPDSPP
BINDPP   EQU   BINPDSPP
BINRSV28 EQU   BINPDSPP
@NM00134 EQU   BINLUP3+10
BINBFSIZ EQU   BINBDESC
@NM00133 EQU   BINBDESC
BINBDRAC EQU   BINBFRSZ+3
BINBFRAR EQU   BINBFRSZ+2
BINBFRDC EQU   BINBFRSZ+1
BINBFRDR EQU   BINBFRSZ
@NM00132 EQU   BINLUP3
@NM00131 EQU   BINLUP2+10
BINPRESZ EQU   BINLUP2+9
BINSALTC EQU   BINSCRSZ+3
BINSALTR EQU   BINSCRSZ+2
BINSPRIC EQU   BINSCRSZ+1
BINSPRIR EQU   BINSCRSZ
@NM00130 EQU   BINLUP2+1
@NM00129 EQU   BINLUP2
BINSEDS  EQU   BINLUP2
@NM00128 EQU   BINMEDIA
BINCDEDS EQU   BINMEDIA
BINXDOCF EQU   BINMEDIA
BINXCDF  EQU   BINMEDIA
BINDISK  EQU   BINMEDIA
BINXCHNG EQU   BINMEDIA
BINCARD  EQU   BINMEDIA
BINDOCMT EQU   BINMEDIA
@NM00127 EQU   BINDSPF1+1
BINUAALT EQU   BINDSPF1+1
BINUAINT EQU   BINDSPF1+1
BINTRNDS EQU   BINDSPF1
@NM00126 EQU   BINDSPF1
BINSLD   EQU   BINDSPF1
BINVSDS  EQU   BINDSPF1
BINVTDS  EQU   BINDSPF1
BINHFDS  EQU   BINDSPF1
BININTR  EQU   BINDSPF1
@NM00125 EQU   @NM00123+1
BINXFPD  EQU   @NM00123+1
BINCSDS  EQU   @NM00123+1
BINQDSI  EQU   @NM00123+1
@NM00124 EQU   @NM00123+1
BINARRR  EQU   @NM00123
BINSIDS  EQU   @NM00123
BINSAI   EQU   @NM00123
BINSDSI  EQU   @NM00123
BINKDDSI EQU   @NM00123
BINPDIR  EQU   BINFMF1
BINCMPCT EQU   BINFMF1
BINDESTS EQU   BINFMF1
BINSLUS1 EQU   BINLUP1+6
BINPLUS1 EQU   BINLUP1+1
BINDSP1  EQU   BINLUP1
BINFMHS1 EQU   BINLUP1
@NM00057 EQU   PABXTNSN+12
PABNPSSQ EQU   PABXTNSN+8
PABLOCK  EQU   PABXTNSN+4
PABLAST  EQU   PABXTNSN
@NM00157 EQU   RPLIBSQ
RPLIINV  EQU   RPLIBSQ
RPLINEG  EQU   RPLIBSQ
RPLIPOS  EQU   RPLIBSQ
RPLIIGN  EQU   RPLIBSQ
RPLIRSET EQU   RPLIBSQ
RPLITST  EQU   RPLIBSQ
RPLISET  EQU   RPLIBSQ
@NM00156 EQU   RPLOBSQ
RPLOINV  EQU   RPLOBSQ
RPLONEG  EQU   RPLOBSQ
RPLOPOS  EQU   RPLOBSQ
RPLOIGN  EQU   RPLOBSQ
RPLORSET EQU   RPLOBSQ
RPLOTST  EQU   RPLOBSQ
RPLOSET  EQU   RPLOBSQ
RPLIBSQV EQU   RPLOF60+2
RPLOBSQV EQU   RPLOF60
@NM00155 EQU   RPLCNTSC
RPLRQR   EQU   RPLCNTSC
RPLSTSN  EQU   RPLCNTSC
RPLCLEAR EQU   RPLCNTSC
RPLSDT   EQU   RPLCNTSC
RPLBIS   EQU   RPLCNTDC
RPLSBI   EQU   RPLCNTDC
RPLTUNBD EQU   RPLCNTDC
RPLTBIND EQU   RPLCNTDC
RPLBID   EQU   RPLCNTDC
@NM00154 EQU   RPLCNTDF
RPLQI    EQU   RPLCNTDF
RPLRELQ  EQU   RPLCNTDF
RPLQEC   EQU   RPLCNTDF
RPLQC    EQU   RPLCNTDF
RPLQRI   EQU   RPLRESP
@NM00153 EQU   RPLPOSTV
RPLSCHED EQU   RPLPOSTV
@NM00152 EQU   RPLVTFL1
RPLTLGAC EQU   RPLVTFL1
RPLTNDSP EQU   RPLVTFL1
RPLAUTUS EQU   RPLVTFL1
RPLVTUSE EQU   RPLVTFL1
@NM00151 EQU   RPLVTFL1
@NM00150 EQU   RPLCHN
RPLMIDLE EQU   RPLCHN
RPLFIRST EQU   RPLCHN
@NM00149 EQU   RPLRTYPE
RPLDFASY EQU   RPLRTYPE
@NM00148 EQU   RPLSTYPE
RPLSRESP EQU   RPLSTYPE
@NM00147 EQU   RPLRH3
RPLCHREQ EQU   RPLRH3
BINSNMD  EQU   BINSLUNM+1
BINSNML  EQU   BINSLUNM
BINCRKEY EQU   BINCRYRL+2
BINCCIPH EQU   BINCRPFL
BINCRSV1 EQU   BINCRPFL
BINCKEYT EQU   BINCRPFL
BINCLEN  EQU   BINCRCTL
BINCSESS EQU   BINCRCTL
BINCEUMB EQU   BINCRCTL
BINUSE   EQU   ISTBIND+36
BINUSEL  EQU   ISTBIND+35
BINPRIM  EQU   ISTBIND+27
BINPRIML EQU   ISTBIND+26
BINLUTYP EQU   BINLUP
@NM00122 EQU   BINLUP
BINBPACM EQU   BINBPACE
@NM00121 EQU   BINBPACE
BINSPACM EQU   BINSPACE
@NM00120 EQU   BINSPACE
BINPS1ST EQU   BINSPACE
BINPRUSE EQU   BINPRUSZ
BINPRUSM EQU   BINPRUSZ
BINSRUSE EQU   BINSRUSZ
BINSRUSM EQU   BINSRUSZ
BINRPACM EQU   BINRPACE
@NM00119 EQU   BINRPACE
BINAPACM EQU   BINAPACE
@NM00118 EQU   BINAPACE
BINSP2ST EQU   BINAPACE
BINCONR  EQU   BINCMNP2
BINRCHN  EQU   BINCMNP2
BINMDIBK EQU   BINCMNP2
BINBKFS  EQU   BINCMNP2
BINRCVR  EQU   BINCMNP2
@NM00117 EQU   BINCMNP
BINALT   EQU   BINCMNP
BINFMHD  EQU   BINCMNP
@NM00116 EQU   BINCMNP
BINSSEB  EQU   BINSECP
BINSCMP  EQU   BINSECP
@NM00115 EQU   BINSECP
BINSCHNR EQU   BINSECP
BINSMCH  EQU   BINSECP
BINSCHN  EQU   BINSECP
BINPSEB  EQU   BINPRIP
BINPCMP  EQU   BINPRIP
@NM00114 EQU   BINPRIP
BINPCHNR EQU   BINPRIP
BINPMCH  EQU   BINPRIP
BINPCHN  EQU   BINPRIP
BINTS    EQU   ISTBIND+2
BINFM    EQU   ISTBIND+1
BINTYPE  EQU   BINFMTY
BINFMT   EQU   BINFMTY
TIEPTR2  EQU   TIERPHA
TIEPTR1  EQU   TIESNA
TIEGATE  EQU   TIETIEA
TIEREQ   EQU   ISTTIE+3
TIERETCD EQU   ISTTIE+2
TIELNGTH EQU   ISTTIE+1
TIETYPE  EQU   ISTTIE
ATCAOS   EQU   ISTATCVT+1868
@NM00113 EQU   ISTATCVT+1860
@NM00112 EQU   ISTATCVT+1852
@NM00111 EQU   ISTATCVT+1844
@NM00110 EQU   ISTATCVT+1836
@NM00109 EQU   ISTATCVT+1828
@NM00108 EQU   ISTATCVT+1820
@NM00107 EQU   ISTATCVT+1816
ATCCACSA EQU   ISTATCVT+1812
ATCMXCSA EQU   ISTATCVT+1808
ATCTPMPB EQU   ISTATCVT+1776
ATCTRMPB EQU   ISTATCVT+1744
ATCRPLAC EQU   ATCRPLCN+2
ATCRPLRC EQU   ATCRPLCN
ATCCRPLQ EQU   ATCCRPL
ATCSRBAC EQU   ATCSRBCN+2
ATCSRBRC EQU   ATCSRBCN
ATCSRBQ  EQU   ATCSRB
ATCCRAAC EQU   ATCCRACN+2
ATCCRARC EQU   ATCCRACN
ATCCRAQ  EQU   ATCCRA
ATCLUFFD EQU   ISTATCVT+1716
ATCVIOPM EQU   ISTATCVT+1712
ATCTPMMI EQU   ISTATCVT+1708
ATCPXSRB EQU   ISTATCVT+1704
ATCRPLCT EQU   ISTATCVT+1702
ATCCRACT EQU   ISTATCVT+1700
ATCSRBCT EQU   ISTATCVT+1698
ATCSTNSM EQU   ISTATCVT+1697
@NM00106 EQU   ATCZFLAG
ATCZF001 EQU   ATCZFLAG
ATCTPCP1 EQU   ISTATCVT+1692
ATCTPCP0 EQU   ISTATCVT+1688
ATCZR01  EQU   ISTATCVT+1684
ATCMPLTA EQU   ISTATCVT+1680
ATCASCB  EQU   ISTATCVT+1676
ATCAP86  EQU   ISTATCVT+1672
ATCAP85  EQU   ISTATCVT+1668
ATCAP84  EQU   ISTATCVT+1664
ATCAP83  EQU   ISTATCVT+1660
ATCAP82  EQU   ISTATCVT+1656
ATCAP69  EQU   ISTATCVT+1652
ATCAP66  EQU   ISTATCVT+1648
ATCAP62  EQU   ISTATCVT+1644
ATCAPC59 EQU   ISTATCVT+1640
ATCAP56  EQU   ISTATCVT+1636
ATCAP55  EQU   ISTATCVT+1632
ATCAP41  EQU   ISTATCVT+1628
ATCAPC25 EQU   ISTATCVT+1624
ATCAP23  EQU   ISTATCVT+1620
ATCAPBE  EQU   ISTATCVT+1616
ATCPSTA  EQU   ISTATCVT+1612
ATCSMABF EQU   ISTATCVT+1608
ATCSMAPR EQU   ISTATCVT+1604
ATCTPWQA EQU   ISTATCVT+1600
ATCSMAID EQU   ISTATCVT+1596
ATCSMARA EQU   ISTATCVT+1592
ATCCACXA EQU   ISTATCVT+1588
ATCATA10 EQU   ISTATCVT+1584
ATCHLTCB EQU   ISTATCVT+1580
@NM00105 EQU   ATCVTFLG
ATCVTACT EQU   ATCVTFLG
@NM00104 EQU   @NM00103
ATCVTMAB EQU   @NM00103
ATCVTBAM EQU   ISTATCVT+1572
@NM00102 EQU   ISTATCVT+1568
@NM00101 EQU   ISTATCVT+1520
ATCCCOOC EQU   ISTATCVT+1516
@NM00100 EQU   ISTATCVT+1513
ATCSNUF  EQU   ATCENFLG
ATCOPKL  EQU   ATCENFLG
ATCABEN  EQU   ATCENFLG
ATCSRDN  EQU   ATCENFLG
ATCDLDN  EQU   ATCENFLG
ATCTIMER EQU   ISTATCVT+1508
ATCAIWT  EQU   ISTATCVT+1504
ATCOROBT EQU   ISTATCVT+1500
ATCDMAPP EQU   ISTATCVT+1496
ATCZDVTX EQU   ISTATCVT+1492
ATCPXCRA EQU   ISTATCVT+1488
ATCICNCB EQU   ISTATCVT+1484
ATCCMTCB EQU   ISTATCVT+1480
ATCPRPH  EQU   ISTATCVT+1476
ATCGSRBF EQU   ATCGSRBG
ATCSRBRT EQU   ISTATCVT+1468
ATCTSCPC EQU   ISTATCVT+1464
@NM00099 EQU   ISTATCVT+1460
ATCCDTCB EQU   ISTATCVT+1456
ATCORFRL EQU   ISTATCVT+1452
ATCORFPX EQU   ISTATCVT+1448
ATCORFMG EQU   ISTATCVT+1444
ATCSMBQ  EQU   ISTATCVT+1440
ATCINFDD EQU   ISTATCVT+1436
ATCAP67  EQU   ISTATCVT+1432
ATCAP65  EQU   ISTATCVT+1428
ATCAP64  EQU   ISTATCVT+1424
ATCAP63  EQU   ISTATCVT+1420
ATCAP61  EQU   ISTATCVT+1416
ATCAP58  EQU   ISTATCVT+1412
ATCAP57  EQU   ISTATCVT+1408
ATCAP54  EQU   ISTATCVT+1404
ATCAP53  EQU   ISTATCVT+1400
ATCAP52  EQU   ISTATCVT+1396
ATCAP51  EQU   ISTATCVT+1392
ATCAP38  EQU   ISTATCVT+1388
ATCAP37  EQU   ISTATCVT+1384
ATCAP34  EQU   ISTATCVT+1380
ATCAP32  EQU   ISTATCVT+1376
ATCAP31  EQU   ISTATCVT+1372
ATCAP12  EQU   ISTATCVT+1368
ATCAP11  EQU   ISTATCVT+1364
ATCDAPDG EQU   ATCDAPVT+20
ATCDXCEA EQU   ATCDAPVT+16
ATCDCEA  EQU   ATCDAPVT+12
ATCDPCIA EQU   ATCDAPVT+8
ATCDSIOA EQU   ATCDAPVT+4
ATCDEOEA EQU   ATCDAPVT
ATCZAEA  EQU   ATCICAPP+16
ATCZCEA  EQU   ATCICAPP+12
ATCZCPCI EQU   ATCICAPP+8
ATCZSIOA EQU   ATCICAPP+4
ATCCDRPH EQU   ATCICAPP
ATCORQG  EQU   ATCORSRB
ATCORTBF EQU   ATCSQAFR
@NM00098 EQU   ISTATCVT+1308
ATCZLAEA EQU   ATCLDAPP+16
ATCZLCEA EQU   ATCLDAPP+12
ATCZLPCI EQU   ATCLDAPP+8
ATCSMFRR EQU   ATCLDAPP+4
ATCCDTID EQU   ATCLDAPP
@NM00097 EQU   ISTATCVT+1256
ATCZPAB2 EQU   ISTATCVT+1224
@NM00096 EQU   ISTATCVT+1224
@NM00095 EQU   ISTATCVT+1164
ATCCPCFE EQU   ISTATCVT+1160
@NM00094 EQU   ATCRID+2
ATCCDRMA EQU   ATCRID
@NM00093 EQU   ATCSMSDQ+8
@NM00092 EQU   ATCSMSDQ+4
@NM00091 EQU   ATCSMSDQ
ATCSEQNO EQU   ISTATCVT+1136
ATCSMPMD EQU   ISTATCVT+1132
ATCPAREA EQU   ISTATCVT+1128
ATCCPCSM EQU   ISTATCVT+1124
ATCQLOCK EQU   ISTATCVT+1120
ATCITQLE EQU   ISTATCVT+1116
ATCSQCDS EQU   ISTATCVT+1112
ATCUSSVT EQU   ISTATCVT+1108
ATCNOSQ  EQU   ISTATCVT+1104
ATCINCIP EQU   ATCCPDVT+4
ATCTSCNI EQU   ATCCPDVT
ATCMGCRT EQU   ISTATCVT+1092
ATCMACRT EQU   ISTATCVT+1088
ATCCSMT  EQU   ISTATCVT+1084
ATCDRUSL EQU   ISTATCVT+1080
ATCDRULL EQU   ISTATCVT+1076
ATCCFCDR EQU   ISTATCVT+1072
@NM00090 EQU   ISTATCVT+1069
ATCMROUT EQU   ISTATCVT+1060
ATCONFIG EQU   ISTATCVT+1052
ATCNODEL EQU   ISTATCVT+1044
@NM00089 EQU   @NM00088+9
ATCLAST  EQU   ATCSHRFG
ATCSHRTN EQU   @NM00088
@NM00087 EQU   ISTATCVT+1026
ATCNMCTR EQU   ISTATCVT+1024
ATCPOIA  EQU   ATCRNO+1
@NM00086 EQU   ATCRNO
ATCLCLCT EQU   ATCVLCNT+2
ATCRNCNT EQU   ATCVLCNT
ATCHBSIZ EQU   ATCHPGM+2
ATCHBFNO EQU   ATCHPGM
@NM00085 EQU   ISTATCVT+1011
ATCXRANG EQU   ISTATCVT+1010
ATCMAXID EQU   ISTATCVT+1009
ATCMSGSP EQU   ISTATCVT+1008
ATCCIDM  EQU   ISTATCVT+1006
ATCACTRM EQU   ISTATCVT+1004
ATCECTLP EQU   ISTATCVT+1000
ATCECNET EQU   ISTATCVT+996
ATCECOPC EQU   ISTATCVT+992
ATCECSES EQU   ISTATCVT+988
ATCECDSP EQU   ISTATCVT+984
ATCECVRY EQU   ISTATCVT+980
ATCECHLT EQU   ISTATCVT+976
ATCECMOD EQU   ISTATCVT+972
ATCVDLOK EQU   ISTATCVT+968
ATCRDTLK EQU   ISTATCVT+964
ATCVOCLK EQU   ISTATCVT+960
ATCITLIM EQU   ISTATCVT+958
ATCTMINV EQU   ISTATCVT+956
ATCHOSTA EQU   ISTATCVT+954
ATCPUNSA EQU   ISTATCVT+952
ATCSAF   EQU   ISTATCVT+950
ATCVTMID EQU   ATCSSCPA
ATCHCNID EQU   ATCONID+2
ATCSCNID EQU   ATCONID
@NM00084 EQU   ATCBITAN+3
@NM00083 EQU   ATCBITAN+2
@NM00082 EQU   ATCFLAG2
@NM00081 EQU   ATCFLAG2
@NM00080 EQU   ATCFLAG2
ATCCRYPF EQU   ATCFLAG2
ATCTUNCL EQU   ATCFLAG2
ATCTUNRQ EQU   ATCFLAG2
ATCTUNAC EQU   ATCFLAG2
ATCCDLRA EQU   ATCFLAG2
@NM00079 EQU   ATCBITAN
@NM00078 EQU   ATCSTAT4
@NM00077 EQU   ATCSTAT4
@NM00076 EQU   ATCSTAT4
@NM00075 EQU   ATCSTAT4
@NM00074 EQU   ATCSTAT4
ATCPRTAT EQU   ATCSTAT4
ATCNCSD  EQU   ATCSTAT4
ATCMTST  EQU   ATCSTAT4
@NM00073 EQU   ATCPOFLG
@NM00072 EQU   ATCPOFLG
@NM00071 EQU   ATCPOFLG
@NM00070 EQU   ATCPOFLG
@NM00069 EQU   ATCPOFLG
@NM00068 EQU   ATCPOFLG
@NM00067 EQU   ATCPOFLG
ATCPOUNS EQU   ATCPOFLG
@NM00066 EQU   ATCSTAT+1
ATCHIP   EQU   ATCSTAT1
ATCMDHLT EQU   ATCSTAT1
ATCINHLT EQU   ATCSTAT1
ATCNETSL EQU   ATCSTAT1
ATCQKHLT EQU   ATCSTAT1
ATCSNHLT EQU   ATCSTAT1
ATCACTIV EQU   ATCSTAT1
ATCSTART EQU   ATCSTAT1
ATCNOP00 EQU   ISTATCVT+932
ATCTSBUF EQU   ISTATCVT+928
ATCFEPT  EQU   ISTATCVT+924
ATCFDVT  EQU   ISTATCVT+920
ATCCONFT EQU   ISTATCVT+916
ATCRDTH  EQU   ISTATCVT+912
ATCSIBQ  EQU   ISTATCVT+908
ATCHLTMS EQU   ISTATCVT+904
ATCECPRM EQU   ISTATCVT+900
ATCVPARM EQU   ISTATCVT+896
ATCOCHA  EQU   ISTATCVT+892
ATCDSPLQ EQU   ISTATCVT+888
ATCVARYQ EQU   ISTATCVT+884
ATCHALTQ EQU   ISTATCVT+880
ATCMODQ  EQU   ISTATCVT+876
ATCSRT   EQU   ISTATCVT+872
ATCRDT   EQU   ISTATCVT+868
ATCSDVT  EQU   ISTATCVT+864
ATCDLRPT EQU   ISTATCVT+860
ATCBPDA  EQU   ISTATCVT+856
ATCACDA  EQU   ISTATCVT+852
ATCMNT   EQU   ISTATCVT+848
ATCUEP   EQU   ISTATCVT+844
ATCNODDS EQU   ISTATCVT+840
ATCITRT  EQU   ISTATCVT+836
ATCTODVT EQU   ISTATCVT+832
ATCTRCPT EQU   ISTATCVT+828
ATCMODTB EQU   ISTATCVT+824
ATCUSSPT EQU   ISTATCVT+820
ATCTUBUF EQU   ISTATCVT+816
ATCTACB  EQU   ISTATCVT+812
ATCDWA   EQU   ISTATCVT+808
ATCCFCR2 EQU   ATCPODVT
ATCEPA   EQU   ISTATCVT+800
ATCPULQB EQU   @NM00065+16
ATCMCQAB EQU   @NM00065+12
ATCLUSMQ EQU   @NM00065+8
ATCLUIOQ EQU   @NM00065+4
ATCIOLQB EQU   @NM00065
ATCTSCAP EQU   ATCANYDT
ATCTSCCO EQU   ATCLUDVT+4
ATCTSCSR EQU   ATCLUDVT
ATCVTLOD EQU   ISTATCVT+764
ATCTSCLF EQU   ISTATCVT+760
ATCTSCLE EQU   ISTATCVT+756
ATCTSCLB EQU   ISTATCVT+752
ATCTSCLS EQU   ISTATCVT+748
ATCTSCCF EQU   ISTATCVT+744
ATCTSCFV EQU   ISTATCVT+740
ATCTSCCE EQU   ISTATCVT+736
ATCTSCCB EQU   ISTATCVT+732
ATCTSCWS EQU   ISTATCVT+728
ATCTSCEM EQU   ISTATCVT+724
ATCTSCNS EQU   ISTATCVT+720
ATCTSCER EQU   ISTATCVT+716
ATCTSCPR EQU   ISTATCVT+712
ATCTSCGR EQU   ISTATCVT+708
ATCTSCCI EQU   ISTATCVT+704
ATCTSVT  EQU   ISTATCVT+700
ATCDVLOD EQU   ISTATCVT+696
ATCCDCNR EQU   ISTATCVT+692
ATCCDCNF EQU   ISTATCVT+688
ATCCDCND EQU   ISTATCVT+684
ATCCDCNA EQU   ISTATCVT+680
ATCCDCCP EQU   ISTATCVT+676
ATCCDFDN EQU   ISTATCVT+672
ATCCDFIN EQU   ISTATCVT+668
ATCCDFND EQU   ISTATCVT+664
ATCCDDEL EQU   ISTATCVT+660
ATCCDADD EQU   ISTATCVT+656
ATCTCLIM EQU   ISTATCVT+652
ATCRACTR EQU   ISTATCVT+648
ATCRACTI EQU   ISTATCVT+644
ATCREMOV EQU   ISTATCVT+640
ATCRACIO EQU   ISTATCVT+636
ATCADD   EQU   ISTATCVT+632
ATCPUCRT EQU   ISTATCVT+628
ATCSMRS  EQU   ISTATCVT+624
ATCSMRQ  EQU   ISTATCVT+620
ATCORCPX EQU   ISTATCVT+616
ATCORCAF EQU   ISTATCVT+612
ATCFRSTR EQU   ATCGTSTR
ATCSTMA  EQU   ISTATCVT+604
ATCSRTAD EQU   ISTATCVT+600
ATCOCRT  EQU   ISTATCVT+596
ATCOCCFS EQU   ISTATCVT+592
ATCOCCFP EQU   ISTATCVT+588
ATCSRTDF EQU   ISTATCVT+584
ATCLUCRT EQU   ISTATCVT+580
ATCINCY5 EQU   ISTATCVT+576
ATCINCW3 EQU   ISTATCVT+572
ATCINCU6 EQU   ISTATCVT+568
ATCINCTQ EQU   ISTATCVT+564
ATCINCS1 EQU   ISTATCVT+560
ATCSRTAB EQU   ISTATCVT+556
ATCINCRD EQU   ISTATCVT+552
ATCINCPH EQU   ISTATCVT+548
ATCINCLQ EQU   ISTATCVT+544
ATCNOCRT EQU   ISTATCVT+540
ATCINCF1 EQU   ISTATCVT+536
ATCINCCI EQU   ISTATCVT+532
ATCINCCO EQU   ISTATCVT+528
ATCBLDLA EQU   ISTATCVT+524
ATCALOAD EQU   ISTATCVT+520
ATCADEL  EQU   ISTATCVT+516
ATCESC02 EQU   ISTATCVT+512
ATCESC01 EQU   ISTATCVT+508
ATCDEC01 EQU   ISTATCVT+504
ATCDEC00 EQU   ISTATCVT+500
ATCCPCRT EQU   ISTATCVT+496
ATCMSGM  EQU   ISTATCVT+492
ATCCPCFR EQU   ISTATCVT+488
ATCCPCGR EQU   ISTATCVT+484
ATCCPCPP EQU   ISTATCVT+480
ATCMSGP  EQU   ISTATCVT+476
ATCCPCNT EQU   ISTATCVT+472
ATCAUTHA EQU   ISTATCVT+468
ATCACCTA EQU   ISTATCVT+464
ATCAP39  EQU   ISTATCVT+460
ATCAP36  EQU   ISTATCVT+456
ATCAP35  EQU   ISTATCVT+452
ATCAP33  EQU   ISTATCVT+448
ATCAPCR5 EQU   ISTATCVT+444
ATCAICPT EQU   ISTATCVT+440
ATCAPI   EQU   ISTATCVT+436
ATCAICTN EQU   ISTATCVT+432
ATCACC01 EQU   ISTATCVT+428
ATCACC00 EQU   ISTATCVT+424
ATCLDECB EQU   ATCLDTIL+12
ATCLDLCK EQU   ATCLDTIL+8
ATCLDLST EQU   ATCLDTIL+4
ATCLDNCS EQU   ATCLDTIL
ATCNOSPB EQU   ISTATCVT+376
ATCNSPAB EQU   ISTATCVT+344
ATCLUSRT EQU   ISTATCVT+312
ATCPUIOP EQU   ISTATCVT+280
ATCPUPAB EQU   ISTATCVT+248
ATCPXPAB EQU   ISTATCVT+216
ATCPOPAB EQU   ISTATCVT+184
@NM00064 EQU   ATCVDPAB+16
ATCFEPAB EQU   ATCVDPAB
ATCTCIPB EQU   ISTATCVT+120
ATCCSPAB EQU   ATCSMPAB+16
@NM00063 EQU   ATCSMPAB
ATCTMRPB EQU   ISTATCVT+56
ATCITPAB EQU   ISTATCVT+24
@NM00062 EQU   ATCITRA1
ATCITSCP EQU   ATCITRA1
ATCITMSG EQU   ATCITRA1
ATCITPIU EQU   ATCITRA1
ATCITSMS EQU   ATCITRA1
ATCITPSS EQU   ATCITRA1
ATCITLCK EQU   ATCITRA1
ATCITAPI EQU   ATCITRA1
ATCITCNT EQU   ATCITFLG
ATCITRPH EQU   ATCITCDS
ATCITTBL EQU   ATCITFLD+4
ATCITPRM EQU   ATCITFLD
ATCPTCHA EQU   ATCRPTCH+4
ATCVTLVL EQU   ATCRPTCH
RPHUPSTA EQU   ISTRPH+104
RPHSAV16 EQU   RPHWORK+60
RPHSAV15 EQU   RPHWORK+56
RPHSAV14 EQU   RPHWORK+52
RPHSAV13 EQU   RPHWORK+48
RPHSAV12 EQU   RPHWORK+44
RPHSAV11 EQU   RPHWORK+40
RPHSAV10 EQU   RPHWORK+36
RPHSAVE9 EQU   RPHWORK+32
RPHSAVE8 EQU   RPHWORK+28
RPHSAVE7 EQU   RPHWORK+24
RPHSAVE6 EQU   RPHWORK+20
RPHSAVE5 EQU   RPHWORK+16
RPHSAVE4 EQU   RPHWORK+12
RPHSAVE3 EQU   RPHWORK+8
RPHSAVE2 EQU   RPHWORK+4
RPHSHALF EQU   RPHSAVE1+2
RPHSBIT8 EQU   RPHSBITS
RPHSBIT7 EQU   RPHSBITS
RPHSBIT6 EQU   RPHSBITS
RPHSBIT5 EQU   RPHSBITS
RPHSBIT4 EQU   RPHSBITS
RPHSBIT3 EQU   RPHSBITS
RPHSBIT2 EQU   RPHSBITS
RPHSBIT1 EQU   RPHSBITS
RPHSBYTE EQU   RPHSAVE1
RPHPABQP EQU   RPHPABQA+1
RPHPABFG EQU   RPHPABQA
RPHCRR   EQU   ISTRPH+32
RPHSRP34 EQU   RPHSRPRM+2
RPHSRP12 EQU   RPHSRPRM
RPHWEGT  EQU   RPHCSPA
RPHMAJCB EQU   ISTRPH+21
RPHPABOF EQU   ISTRPH+20
RPHRESUM EQU   RPHRESMA+1
@NM00061 EQU   RPHWPFLG
RPHPURGE EQU   RPHWPFLG
RPHPT    EQU   RPHWPFLG
RPHWT    EQU   RPHWPFLG
RPHRSKEY EQU   RPHWPFLG
RPHDVTA  EQU   ISTRPH+12
RPHTIK   EQU   RPHTSKID+3
@NM00060 EQU   RPHTSKID
RPHRPHAP EQU   RPHRPHA+1
@NM00059 EQU   RPHRPHA
RPHGATE  EQU   RPHRPHA
RPHABEND EQU   RPHFLGB
RPHUWAIT EQU   RPHFLGB
RPHRLCRA EQU   RPHFLGB
@NM00058 EQU   RPHFLGB
RPHPGCMP EQU   RPHFLGB
RPHFBAPS EQU   RPHFLGB
RPHBSSP  EQU   RPHFLGB
RPHLOCK  EQU   RPHFLGB
RPHFNFLG EQU   RPHFSTLC
RPHMLTCP EQU   RPHFLAGS
RPHSMCLR EQU   RPHFLAGS
RPHSMTYP EQU   RPHFLAGS
RPHSMQ   EQU   RPHFLAGS
RPHAPTYP EQU   RPHFLAGS
RPHSPGIN EQU   RPHFLAGS
RPHOGIND EQU   RPHFLAGS
RPHLNGTH EQU   RPHCNTL+1
RPHTYPE  EQU   RPHCNTL
DYPPAB   EQU   ISTDYPAB+16
DYPOCRPH EQU   DYPPACMD
DYPTSKID EQU   ISTDYPAB+8
DYPPACTB EQU   DYPCHAIN
DYPFLGS  EQU   ISTDYPAB+2
DYPLNGTH EQU   ISTDYPAB+1
DYPTYPE  EQU   ISTDYPAB
PABRPHA  EQU   PABRPHFG+1
PABNODQ  EQU   PABFLAGS
PABINHBT EQU   PABFLAGS
PABERLOK EQU   PABERRLK
PABSSN   EQU   PABFLAGS
PABDYNAM EQU   PABFLAGS
PABXTND  EQU   PABFLAGS
PABPRIOR EQU   PABFLAGS
PABAPYP  EQU   PABFLAGS
PABDVTA  EQU   ISTPAB+9
PABOFFST EQU   ISTPAB+8
PABCHNGP EQU   PABCHAIN+1
PABRSV02 EQU   PABCHAIN
PABDELAY EQU   PABCHAIN
PABQUED  EQU   PABRUNNG
PABRESET EQU   PABCHAIN
PABUNCON EQU   PABCHAIN
PABCDP   EQU   PABCHAIN
PABRESCH EQU   PABCHAIN
PABCHNG  EQU   PABCHAIN
PABWEQP  EQU   PABWEQA+1
PABRSV01 EQU   PABWEQA
PABWEQG  EQU   PABWEQA
LOKXCL   EQU   @NM00055
LOKPRY   EQU   @NM00055
@NM00056 EQU   @NM00055
@NM00054 EQU   LOKCHNG
LOKCT    EQU   ISTLOK
ISTRETR7 EQU   ISTRETRG+4
ISTRETR6 EQU   ISTRETRG
ISTRSV01 EQU   ISTAVT+42
ISTPDAVP EQU   ISTAVT+38
ISTVTTP  EQU   ISTAVT+36
ISTAGTWT EQU   ISTAVT+34
ISTATRT  EQU   ISTAVT+32
ISTARID  EQU   ISTAVT+30
ISTX1    EQU   ISTAVT+29
ISTPHNM  EQU   ISTAVT+24
ISTAPSEX EQU   ISTAVT+20
ISTVTTIK EQU   ISTAVT+18
AVTASID  EQU   ISTAVT+16
ISTAPSTA EQU   ISTAVT+12
ISTAS53  EQU   ISTAVT+8
ISTAS49  EQU   ISTAVT+4
ISTACVT  EQU   ISTAVT
RPLSIGDA EQU   RPLVTEXT+32
RPLSAV13 EQU   RPLVTEXT+28
RPLUSNSO EQU   RPLOSENS+2
RPLSSMO  EQU   RPLSSNSO+1
@NM00146 EQU   RPLSSEO
RPLRRO   EQU   RPLSSEO
RPLFIO   EQU   RPLSSEO
RPLSTATO EQU   RPLSSEO
RPLCPMO  EQU   RPLSSEO
@NM00145 EQU   RPLSSEO
@NM00144 EQU   RPLOPT12
@NM00143 EQU   RPLOPT12
@NM00142 EQU   RPLOPT12
RPLNIBTK EQU   RPLOPT12
RPLTRUNC EQU   RPLOPT12
RPLKEEP  EQU   RPLOPT12
@NM00141 EQU   RPLOPT12
RPLRSVE8 EQU   RPLOPT11
RPLRSVE7 EQU   RPLOPT11
RPLRSVE6 EQU   RPLOPT11
RPLRSVE5 EQU   RPLOPT11
RPLRSVE4 EQU   RPLOPT11
RPLSTOP  EQU   RPLOPT11
RPLSTART EQU   RPLOPT11
RPLQUIES EQU   RPLOPT11
RPLRSVI6 EQU   RPLOPT10
RPLRSVI5 EQU   RPLOPT10
RPLRSVI4 EQU   RPLOPT10
RPLRSVI3 EQU   RPLOPT10
RPLTSKY  EQU   RPLOPT10
RPLSPARM EQU   RPLOPT10
RPLDSPLY EQU   RPLOPT10
RPLBSCID EQU   RPLOPT10
RPLTOPL  EQU   RPLOPT9
RPLCIDE  EQU   RPLOPT9
RPLRNNM  EQU   RPLOPT9
RPLAPPST EQU   RPLOPT9
RPLCOUNT EQU   RPLOPT9
RPLTERMS EQU   RPLOPT9
RPLDEVCH EQU   RPLOPT9
RPLLOGON EQU   RPLOPT9
RPLESR2  EQU   RPLUSNSI+1
RPLESR1  EQU   RPLUSNSI
@NM00140 EQU   RPLSSEI
RPLRRI   EQU   RPLSSEI
RPLFII   EQU   RPLSSEI
RPLSTATI EQU   RPLSSEI
RPLCPMI  EQU   RPLSSEI
RPLPATHI EQU   RPLSSEI
RPLARCLN EQU   RPLVTEXT+8
RPLAAREA EQU   RPLVTEXT
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
RPLTCRYP EQU   RPLEXTD1
@NM00139 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00138 EQU   RPLRBAR+3
@NM00137 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLTCRNO EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
@NM00136 EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLCHAIN EQU   RPLNXTRP
@NM00135 EQU   RPLOPT4
RPLMKFRM EQU   RPLOPT4
RPLENDTR EQU   RPLOPT4
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLTCBPT EQU   RPLCOMN+28
RPLDACB  EQU   RPLCOMN+24
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLEXITP
RPLWAIT  EQU   RPLEXITP
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
SVECC010 EQU   TOLTEPWA+3952
SVETC035 EQU   TOLTEPWA+3880
SVESC030 EQU   TOLTEPWA+3808
SVESC020 EQU   TOLTEPWA+3664
SVEIC002 EQU   TOLTEPWA+3520
SVECC014 EQU   TOLTEPWA+3376
SVESC120 EQU   TOLTEPWA+3304
SVESC025 EQU   TOLTEPWA+3088
@NM00053 EQU   TOLTEPWA+2980
@NM00052 EQU   TOLTEPWA+2976
$R13PR3  EQU   TOLTEPWA+2972
$CEINT2  EQU   TOLTEPWA+2968
$CEINT1  EQU   TOLTEPWA+2964
$MSGGET  EQU   TOLTEPWA+2960
$ACQLIST EQU   TOLTEPWA+2956
$R4SAVE1 EQU   TOLTEPWA+2952
$CLSISS  EQU   TOLTEPWA+2950
$CLSCNT  EQU   TOLTEPWA+2948
$CUTABLE EQU   TOLTEPWA+2868
$BUFSZ2  EQU   TOLTEPWA+2864
$RESID2  EQU   TOLTEPWA+2860
$OLTCCW2 EQU   TOLTEPWA+2856
$ENDBFR2 EQU   TOLTEPWA+2852
$1STBFR2 EQU   TOLTEPWA+2848
$TECB2   EQU   TOLTEPWA+2844
$BUFSZ1  EQU   TOLTEPWA+2840
$RESID1  EQU   TOLTEPWA+2836
$OLTCCW1 EQU   TOLTEPWA+2832
$ENDBFR1 EQU   TOLTEPWA+2828
$1STBFR1 EQU   TOLTEPWA+2824
$TECB1   EQU   TOLTEPWA+2820
$WAITIME EQU   TOLTEPWA+2816
$TRTN#   EQU   TOLTEPWA+2815
$WIODEV  EQU   TOLTEPWA+2814
$RQSTSZE EQU   TOLTEPWA+2812
$RQSTPTR EQU   TOLTEPWA+2808
$R4SAVE  EQU   TOLTEPWA+2804
$PARTADR EQU   TOLTEPWA+2800
$TBSDATA EQU   TOLTEPWA+2796
$CTWIDTH EQU   TOLTEPWA+2795
$CTLINE  EQU   TOLTEPWA+2794
$APWIDTH EQU   TOLTEPWA+2793
$APLINE  EQU   TOLTEPWA+2792
$INDEX   EQU   $IMITX
$UMXX    EQU   @NM00051+14
$NSXX    EQU   @NM00051+12
$ATACNT  EQU   $NSCNT
$CTR     EQU   @NM00051+8
$ATAPTR  EQU   $NSPTR
$DDRPTR  EQU   @NM00051
$DTORESP EQU   TOLTEPWA+2712
$APNAME  EQU   TOLTEPWA+2704
$24SYMNE EQU   $24CATMG+4
$24DEVAD EQU   $24CATMG
$24RTN#  EQU   $24FEMSG+8
$ESECTID EQU   $24FEMSG
$24FLGS  EQU   TOLTEPWA+2680
$24SAVE2 EQU   TOLTEPWA+2676
$24SAVE1 EQU   TOLTEPWA+2672
$24UNADR EQU   TOLTEPWA+2668
$24SAV13 EQU   TOLTEPWA+2664
$24RETCD EQU   TOLTEPWA+2663
$MACID   EQU   TOLTEPWA+2661
$CSPARE  EQU   $CFLGS
$C2WAY   EQU   $CFLGS
$CINCT   EQU   $CCOMDAT+12
$CINADR  EQU   $CCOMDAT+8
$COUTCT  EQU   $CCOMDAT+4
$COUTAD  EQU   $CCOMDAT
ROOTLOC  EQU   TOLTEPWA+2640
$WORK    EQU   TOLTEPWA+2376
$EXTA    EQU   TOLTEPWA+2320
$PASSONA EQU   TOLTEPWA+2264
$INBUFR  EQU   TOLTEPWA+2104
$BUFFER  EQU   TOLTEPWA+1976
$TLTRPL3 EQU   TOLTEPWA+1856
$SLTBL   EQU   TOLTEPWA+1468
$CDEVPT  EQU   TOLTEPWA+1466
$DEVCNTS EQU   TOLTEPWA+1464
$FEEDBCK EQU   $DEVTBLE+66
$WTISUED EQU   $DEVFLG4
$EXIOISD EQU   $DEVFLG4
$REMWRIT EQU   $DEVFLG4
$REMDONE EQU   $DEVFLG4
$2NDUSED EQU   $DEVFLG4
$1STUSED EQU   $DEVFLG4
$IGLXIFB EQU   $DEVFLG4
$EXIOLV3 EQU   $DEVFLG4
@NM00050 EQU   $DEVFLG5
$DVBASIC EQU   $DEVFLG5
$OPNDFAL EQU   $DEVFLG5
$ACQNCB  EQU   $DEVFLG5
$REMOTE  EQU   $DEVFLG5
$ENDNODE EQU   $DEVFLG5
$LINENME EQU   $RNINFO
$DVCOL   EQU   $LDNCBPT+2
$DVROW   EQU   $LDNCBPT
$NCSPLP  EQU   $DEVTBLE+44
$DVLN    EQU   $SSCPDAF
$DAF     EQU   $DEVSESP+4
$VARYPAB EQU   $DEVSESP
$SYSMN   EQU   $DEVTBLE+28
@NM00049 EQU   $DEVFLG3
$CLRSNT  EQU   $DEVFLG3
$OLTERR  EQU   $DEVFLG3
$SRTEST  EQU   $DEVFLG3
$POLLREQ EQU   $DEVFLG3
$ACQRED  EQU   $DEVFLG3
$NOTDEV  EQU   $DEVFLG3
$CEINTRP EQU   $DEVFLG2
$TESTMDE EQU   $DEVFLG2
$DEVALOC EQU   $DEVFLG2
$ALLDATA EQU   $DEVFLG2
$ENDCNTL EQU   $DEVFLG2
$CTLDEV  EQU   $DEVFLG2
$NOCDS   EQU   $DEVFLG2
$DATAIN  EQU   $DEVFLG2
$PRIMARY EQU   $DEVFLG1
$DEVACT  EQU   $DEVFLG1
$DVLGMDE EQU   $ATTNEXP
$DVSPRM  EQU   $EVNCPLT
$GRABBED EQU   $DEVFLG1
$CATASTR EQU   $DEVFLG1
$LETGO   EQU   $DEVFLG1
$EXTDEV  EQU   $DEVCDS+11
@NM00048 EQU   $DEVSDCF
$NOTPRIM EQU   $DEVSDCF
@NM00047 EQU   $DEVCDSF
@NM00046 EQU   $DEVCDSF
@NM00045 EQU   $DEVCDSF
$CDSNAME EQU   $DEVCDSF
$EXTRN   EQU   $DEVCDSF
$CEVOLUM EQU   $DEVCDSF
$SHARD   EQU   $DEVCDSF
$DEVFPM  EQU   $DEVCDSF
$DEVCNT  EQU   $DEVCDS+8
$DEVTYPE EQU   $DEVFEAT+3
$DEVCLAS EQU   $DEVFEAT+2
$DEVMOD  EQU   $DEVFEAT
$DEVRDGT EQU   @NM00043+1
$DEVCTLU EQU   @NM00043+1
$DEVCHAN EQU   @NM00043
@NM00044 EQU   @NM00043
$CTINDX  EQU   $DEVUNAD
@NM00042 EQU   $COMMFLG+15
@NM00041 EQU   $COMMFLG+14
@NM00040 EQU   $COMMFLG+13
@NM00039 EQU   $COMMFLG+12
@NM00038 EQU   $FLAG12
$VARYINP EQU   $FLAG12
$ENDTEST EQU   $FLAG12
$VRYHRD  EQU   $FLAG12
$VRYSFT  EQU   $FLAG12
$OPTMSG  EQU   $FLAG12
@NM00037 EQU   $COMMFLG+10
@NM00036 EQU   $COMMFLG+9
@NM00035 EQU   $COMMFLG+8
$TCECM   EQU   $FLAG8
$VS2     EQU   $FLAG8
$VS1     EQU   $FLAG8
$EDOS    EQU   $FLAG8
@NM00034 EQU   $FLAG8
@NM00033 EQU   $FLAG8
$RCVMSG  EQU   $FLAG7
$RCVRFLG EQU   $FLAG7
$LDOIS   EQU   $FLAG7
$DCONTCT EQU   $FLAG7
$2NDDATA EQU   $FLAG7
$1STDATA EQU   $FLAG7
$ABTERM  EQU   $ABNDBIT
$FSTMCIS EQU   $FLAG6
$DISCREQ EQU   $FLAG6
$DISCISS EQU   $FLAG6
$CHANGE  EQU   $FLAG6
$RECAL11 EQU   $FLAG6
@NM00032 EQU   $FLAG5
$PROGCK  EQU   $CANCEL
$PRINTAP EQU   $FLAG5
@NM00031 EQU   $FLAG5
$MSG922  EQU   $FLAG5
$CT924   EQU   $FLAG5
$FSTCAT  EQU   $FLAG5
$FSTFE   EQU   $FLAG5
$ACTOPND EQU   $FLAG4
$ACQCUTT EQU   $FLAG4
$CLSSACT EQU   $FLAG4
$BACKINT EQU   $FLAG4
$DMSGSW  EQU   $FLAG4
$TSTDEVP EQU   $FLAG4
$APRQPER EQU   $FLAG4
$OPCOM   EQU   $FLAG4
$NEWAP   EQU   $FLAG3
$OPTERR  EQU   $FLAG3
$PRTONLY EQU   $FLAG3
$REQSTOR EQU   $FLAG3
$LOGOFFE EQU   $FLAG3
$TSTERR  EQU   $FLAG3
$DEVERR  EQU   $FLAG3
@NM00030 EQU   $COMMFLG+1
@NM00029 EQU   $COMMFLG
@NM00028 EQU   $CDA+120
$CUCNT   EQU   $CDA+118
@NM00027 EQU   $CDA+117
$PRTFORM EQU   $CDA+116
$OPISCNT EQU   $CDA+114
$OPNDCNT EQU   $CDA+112
$GETMSZE EQU   $CDA+110
$GRCNTS  EQU   $CDA+108
$CTLCNT  EQU   $CDA+106
$ACTLVL  EQU   $CDA+105
$PRNTLVL EQU   $CDA+104
$ERRCNTA EQU   $CDA+102
$TLCNT   EQU   $CDA+100
$TIMEALW EQU   $CDA+96
$PTRAREA EQU   $CDA+92
$GETMPTR EQU   $CDA+88
$R13PTRT EQU   $CDA+84
$R13PTR  EQU   $CDA+80
$TEPEND  EQU   $CDA+76
$PLINKDL EQU   $CDA+72
$TEPBEGN EQU   $CDA+68
$FRELPTR EQU   $CDA+64
$HIGHADR EQU   $HIMOREC
$LOMOREC EQU   $CDA+56
$LOWADDR EQU   $OLTPTR
$ENDCOMM EQU   $CDA+48
$COMMON  EQU   $RCA
$SLASHAD EQU   $CDA+32
$PASSON  EQU   $CDA+28
$TOLBRTB EQU   $CDA+24
$SCTPTR8 EQU   $CDA+20
$SCTPTR  EQU   $CDA+16
$TBWDPTR EQU   $CDA+12
$TFWDPTR EQU   $CDA+8
@NM00026 EQU   $CDA
@NM00025 EQU   $SCTTBLE+98
$SCTLWTC EQU   $SCTTBLE+96
$SCTLWTA EQU   $SCTTBLE+92
#EXT     EQU   $SCTTBLE+88
#PASS    EQU   $SCTTBLE+84
#TABLE   EQU   $SCTTBLE+80
#MSGIDAC EQU   $SCTTBLE+78
@NM00024 EQU   $SCTTBLE+71
$RETMASK EQU   $SCTTBLE+70
$R249255 EQU   $ROUTMSK+29
$R241248 EQU   $ROUTMSK+28
$R233240 EQU   $ROUTMSK+27
$R225232 EQU   $ROUTMSK+26
$R217224 EQU   $ROUTMSK+25
$R209216 EQU   $ROUTMSK+24
$R201208 EQU   $ROUTMSK+23
$R193200 EQU   $ROUTMSK+22
$R185192 EQU   $ROUTMSK+21
$R177184 EQU   $ROUTMSK+20
$R169176 EQU   $ROUTMSK+19
$R161168 EQU   $ROUTMSK+18
$R153160 EQU   $ROUTMSK+17
$R145152 EQU   $ROUTMSK+16
$R137144 EQU   $ROUTMSK+15
$R129136 EQU   $ROUTMSK+14
$R121128 EQU   $ROUTMSK+13
$R113120 EQU   $ROUTMSK+12
$R105112 EQU   $ROUTMSK+11
$R097104 EQU   $ROUTMSK+10
$R089096 EQU   $ROUTMSK+9
$R081088 EQU   $ROUTMSK+8
$R073080 EQU   $ROUTMSK+7
$R065072 EQU   $ROUTMSK+6
$R057064 EQU   $ROUTMSK+5
$R049056 EQU   $ROUTMSK+4
$R041048 EQU   $ROUTMSK+3
$R033040 EQU   $ROUTMSK+2
$R025032 EQU   $ROUTMSK+1
$R017024 EQU   $ROUTMSK
$TOTFLG2 EQU   $SCTTBLE+39
@NM00023 EQU   $TOTFLG1
@NM00022 EQU   $TOTFLG1
@NM00021 EQU   $TOTFLG1
$CURELOD EQU   $TOTFLG1
@NM00020 EQU   $TOTFLG1
@NM00019 EQU   $TOTFLG1
$LINESHR EQU   $TOTFLG1
@NM00018 EQU   $OLTFLG2
@NM00017 EQU   $OLTFLG2
@NM00016 EQU   $OLTFLG2
@NM00015 EQU   $OLTFLG2
@NM00014 EQU   $OLTFLG2
@NM00013 EQU   $OLTFLG2
@NM00012 EQU   $OLTFLG2
$TALK    EQU   $OLTFLG2
$DYCOM   EQU   $OLTFLGS
@NM00011 EQU   $OLTFLGS
$TRACE   EQU   $OLTFLGS
$RETCODE EQU   $OLTFLGS
$CONTCB  EQU   $OLTFLGS
$RETAIN  EQU   $OLTFLGS
$CLEANRT EQU   $OLTFLGS
$MANINTV EQU   $OLTFLGS
$OLTSIZE EQU   $SCTTBLE+34
$QSCTMOD EQU   $EXECFLG
$CTRLMOD EQU   $EXECFLG
$CLEANUP EQU   $EXECFLG
$LSTPDEV EQU   $EXECFLG
$ERRCNT  EQU   $EXECFLG
$RTNSLCT EQU   $EXECFLG
$MULTDEV EQU   $EXECFLG
@NM00010 EQU   $EXECFLG
$RMSKCNT EQU   $SCTTBLE+32
$SYNAME  EQU   $CDS8T19+4
$EXTSIG  EQU   $CDS8T19+3
$CDFLGS  EQU   $CDS8T19+1
$CDSCNT  EQU   $CDS8T19
$PDEVDSC EQU   $SCTTBLE+16
$PDEVADR EQU   $SCTTBLE+12
$COMMCN  EQU   $CDSFLGS
$CUSTSYM EQU   $CDSFLGS
$TWOCHSW EQU   $CDSFLGS
$SYMNAME EQU   $CDSFLGS
$EXTINTC EQU   $CDSFLGS
$CEVOL   EQU   $CDSFLGS
$SHARED  EQU   $CDSFLGS
$FPM     EQU   $CDSFLGS
$LASTSUB EQU   $PDEVFLG
@NM00009 EQU   $PDEVFLG
@NM00008 EQU   $PDEVFLG
@NM00007 EQU   $PDEVFLG
$LASTDEV EQU   $PDEVFLG
@NM00006 EQU   $PDEVFLG
$EXFILPT EQU   $PDEVFLG
$FPMOLD  EQU   $PDEVFLG
$TSSSYM  EQU   $SCTTBLE+8
$SCTLEVL EQU   $SCTTBLE+7
$DRIVER  EQU   $SCTTBLE+6
$RT0916  EQU   $SCTTBLE+5
$RT0108  EQU   $SCTTBLE+4
$LOOPTST EQU   $ERROPT
$LOOPERR EQU   $ERROPT
$NERRPRT EQU   $ERROPT
$NOCNTRL EQU   $ERROPT
$ALTPRNT EQU   $ERROPT
$CATERR  EQU   $ERROPT
$ASTERIK EQU   $ERROPT
$TESTERR EQU   $ERROPT
$FSTCOMM EQU   $TESTOPT
$INDEFLP EQU   $TESTOPT
$NOPRT   EQU   $TESTOPT
$PARAPRT EQU   $TESTOPT
@NM00005 EQU   $TESTOPT
$ERRLPCT EQU   $SCTTBLE
$TLTEND  EQU   $RCAAREA+945
$CNSLID  EQU   $RCAAREA+936
@NM00004 EQU   $RCAAREA+605
$VTAMEND EQU   $RCAFLG
$TPPOSTD EQU   $RCAFLG
$NEWCT   EQU   $RCAFLG
$ABNDALL EQU   $RCAFLG
$CUTESTB EQU   $RCAFLG
$CONSOLE EQU   $RCAFLG
$TPLOGON EQU   $RCAFLG
$UPDATE  EQU   $RCAFLG
$DEVAREA EQU   $RCAAREA+600
$CTDVAR  EQU   $RCAAREA+596
$BUFFS   EQU   $RCAAREA+464
$TLTNIB  EQU   $CONSTNT+140
$TLTPRPL EQU   $CONSTNT+20
@NM00003 EQU   $CONSTNT+4
@NM00002 EQU   $CONSTNT+2
$USECNT  EQU   $CONSTNT
$CURRTWA EQU   $POINTER+140
$CTNAME  EQU   $POINTER+132
$CTARGX  EQU   $POINTER+128
$COMINT  EQU   $POINTER+120
$QUEHNDL EQU   $POINTER+116
@NM00001 EQU   $POINTER+36
$RTNPTR  EQU   $POINTER+32
$TLTECB1 EQU   $POINTER+24
$CLEANP  EQU   $POINTER+20
$ABEND   EQU   $POINTER+16
$LSTAREA EQU   $POINTER+12
$FSTAREA EQU   $POINTER+8
$CVTSAVE EQU   $POINTER+4
$TOLTEP  EQU   $POINTER
$TLTACB  EQU   $RCAAREA
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00163 EQU   C16C0225
@RT00172 EQU   C16C0253
@RT00177 EQU   C16C0100
@RF00177 EQU   C16C0225
@RT00193 EQU   C16C0253
@RT00209 EQU   C16C0075
@RT00230 EQU   C16C0075
@RT00278 EQU   C16C0300
@RT00281 EQU   C16C0300
@RF00281 EQU   C16C0075
@RT00284 EQU   C16C0075
@RC00286 EQU   C16C0300
@RT00313 EQU   C16C0075
@RT00316 EQU   C16C0250
@RT00322 EQU   C16C0075
@RT00331 EQU   C16C0250
@RF00331 EQU   C16C0256
@RF00328 EQU   C16C0075
@RT00343 EQU   C16C0256
@RT00371 EQU   C16C1025
@RF00365 EQU   C16C1050
@RC00418 EQU   @RC00416
@RC00423 EQU   @RC00416
@RC00439 EQU   @RC00438
@RT00523 EQU   C16C0905
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   ISTCC016,(C'PLS1039',0702,78336)
