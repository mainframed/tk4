         TITLE 'ISTSC020 - CECOM'
ISTSC020 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(16)                                             0001
         DC    C'ISTSC020  78.337'                                 0001
S20CEC03 DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00180-S20CEC03)
         ENTRY S20CEC03
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 DS    0H                                                  0002
         EJECT
*        SVESC020(2) = R13;             /* SET UP BACK PTR           */
         ST    R13,SVESC020+4(,WAPTR)                              0064
*        BACKSAVE(3) = ADDR(SVESC020);  /* PUT FORWARD CHAIN IN LAST */
         LA    @12,SVESC020(,WAPTR)                                0065
         ST    @12,BACKSAVE+8(,R13)                                0065
*        R13 = ADDR(SVESC020);          /* POINT TO SAVE AREA FOR MOD*/
         LR    R13,@12                                             0066
*        $C2WAY='0'B;                   /* SET 2 WAY SWITCH OFF      */
         NI    $C2WAY(WAPTR),B'01111111'                           0067
*        $CINCT=ZERO;                   /* ZERO OUT IN COUNT PARAM   */
         L     @12,ZERO                                            0068
         ST    @12,$CINCT(,WAPTR)                                  0068
*        $CINADR=ZERO;                  /* ZERO OUT IN ADDR PARAM    */
         ST    @12,$CINADR(,WAPTR)                                 0069
*        IF $TCECM = '1'B               /* IF IT IS A TCEC CALL      */
*          THEN GOTO S20CEC2;           /* THEN GO TO PROCESS IT     */
         TM    $TCECM(WAPTR),B'00000001'                           0070
         BO    @RT00070                                            0070
*          ELSE GOTO S20CEC1;           /* ELSE PROCESS CECOM CALL   */
         B     S20CEC1                                             0072
*/********************************************************************/
*/*                           C E C O M                              */
*/*                                                                  */
*/*  THIS SECTION HANDLES ALL 'CECOM' CALLS. IT VERIFIES THE VALIDITY*/
*/*  OF THE INPUT PARMMETER FOR BOTH 1-WAY AND 2-WAY COMMUNICATIONS. */
*/*  IT ALSO TACKS ON THE PROPER ID TO THE MESSAGE                   */
*/********************************************************************/
*S20CEC1:                               /* START OF $CCOM CALL       */
*        CECMAP=R1;                     /* SET UP PARM PTR           */
S20CEC1  LR    CECMAP,R1                                           0073
*        IF $CEINADR ^=0                /* TWO WAY COMMUNICATION?    */
*              THEN                     /* YES - CONTINUE BELOW      */
         SLR   @12,@12                                             0074
         L     @10,$CEINADR(,CECMAP)                               0074
         CR    @10,@12                                             0074
         BE    @RF00074                                            0074
*/***************************************/                         0075
*/* CK FOR VALID 'IN' COUNT.            */                         0075
*/*  IN CNT > 61 = ERROR (RET CODE=8)   */                         0075
*/*  SET 2WAY COMMUNICATION SW          */                         0075
*/*  ZERO OUT READ (IN) BUFFER          */                         0075
*/***************************************/                         0075
*                DO;                                               0075
*                  $C2WAY='1'B;         /* TURN ON TWO WAY SWITCH    */
         OI    $C2WAY(WAPTR),B'10000000'                           0076
*                  IF $CEINCT < 0       /* IF 'IN' CNT IS LT ZERO    */
*                    THEN GOTO S20CRC08; /* ERR RET WITH RET CODE=8  */
         L     @09,$CEINCT(,CECMAP)                                0077
         CR    @09,@12                                             0077
         BL    @RT00077                                            0077
*                  IF $CEINCT > 61 THEN /* IF 'IN' CNT IS GT 61 THEN */
         C     @09,@CF00729                                        0079
         BH    @RT00079                                            0079
*                    GOTO S20CRC08;     /*  RET TO CALLER W RC=8     */
*                  $CINADR=$CEINADR;    /* PASS 'IN' ADDR TO MSG I/O */
         ST    @10,$CINADR(,WAPTR)                                 0081
*                  R14=$CINADR;         /* PUT BUFFER ADDR INTO REG14*/
         LR    R14,@10                                             0082
*                  $CINCT=$CEINCT;      /* PASS 'IN' CNT TO MSG I/O  */
         ST    @09,$CINCT(,WAPTR)                                  0083
*                  R15=$CEINCT;         /* LNGTH OF BUF - 1 IN REG15 */
         LR    R15,@09                                             0084
*            GEN REFS(R15,S20CEC1A) ( EX R15,S20CEC1A);  /* ZERO OUT */
          EX R15,S20CEC1A
*                  $CINADR=$CINADR+1;   /* ALLOW 1 BYTE FOR LNGTH FLD*/
         LA    @12,1                                               0086
         AL    @12,$CINADR(,WAPTR)                                 0086
         ST    @12,$CINADR(,WAPTR)                                 0086
*                END;                                              0087
*/***************************************/                         0088
*/* VERIFY 'OUT' MSG DATA.              */                         0088
*/*  OUT CNT < 1 = ERROR (RET CDE=8)    */                         0088
*/*  OUT CNT > 61 ITS RESET TO 61       */                         0088
*/***************************************/                         0088
*        IF $CEOUTCT<'01'X THEN         /* IF OUT CNT IS LT ONE      */
@RF00074 L     @12,$CEOUTCT(,CECMAP)                               0088
         LTR   @12,@12                                             0088
         BNP   @RT00088                                            0088
*          GOTO S20CRC08;               /*  THEN GO SET RET CODE     */
*        $COUTAD=ADDR($WORK);           /* SET UP 'OUT' MSG PARAMETER*/
         LA    @10,$WORK(,WAPTR)                                   0090
         ST    @10,$COUTAD(,WAPTR)                                 0090
*        IF $CEOUTCT > 61               /* IF PARM CNT       @YA04062*/
*             THEN                     /* GTR THAN 61        @YA04062*/
         LA    @10,61                                              0091
         CR    @12,@10                                             0091
         BNH   @RF00091                                            0091
*               $COUTCT=61;            /* TRUNCATE TO        @YA04062*/
         ST    @10,$COUTCT(,WAPTR)                                 0092
*                ELSE                  /* 61 ELSE USE CNT    @YA04062*/
*        $COUTCT=$CEOUTCT;              /* FOR MSG I/O MODULE        */
         B     @RC00091                                            0093
@RF00091 L     @12,$CEOUTCT(,CECMAP)                               0093
         ST    @12,$COUTCT(,WAPTR)                                 0093
*        CECOMSW='1'B;                  /* SET CECOM SW ON           */
@RC00091 OI    CECOMSW,B'10000000'                                 0094
*        GEN  (BAL RETR,S20C01);        /* SET UP MSG PREFIX         */
         BAL RETR,S20C01
*        $WORK(I:I+$COUTCT-1)=CEOUTMSG; /* MOVE MSG TO $WORK + PREFIX*/
         LH    @12,I(,WAPTR)                                       0096
         N     @12,@CF00789                                        0096
         ALR   @12,WAPTR                                           0096
         L     @10,$COUTCT(,WAPTR)                                 0096
         LR    @09,@10                                             0096
         BCTR  @09,0                                               0096
         L     @08,$CEOUTAD(,CECMAP)                               0096
         EX    @09,@SM00790                                        0096
*        $COUTCT = $COUTCT+I-1;         /* ADD PREFIX LEN TO OUT CNT */
         LH    @12,I(,WAPTR)                                       0097
         N     @12,@CF00789                                        0097
         ALR   @10,@12                                             0097
         BCTR  @10,0                                               0097
         ST    @10,$COUTCT(,WAPTR)                                 0097
*        GOTO S20CEC2D;                 /* GO TO COMMON EXIT TO MSGIO*/
         B     S20CEC2D                                            0098
*S20CEC1A: GEN REFS(R14) ( XC 0(0,R14),0(R14));  /* ZERO OUT READ BUF*/
S20CEC1A  XC 0(0,R14),0(R14)
*        GEN   (EJECT);                                            0100
         EJECT
*/********************************************************************/
*/*                           T C E C                                */
*/*                                                                  */
*/*  THIS SECTION HANDLES ALL 'TCEC' CALLS. IT TAKES A MSG NUMBER AND*/
*/*  USES IT AS AN INDEX TO A MSG TABLE. IT WILL ALSO SUBSTITUTE ANY */
*/*  DATA FROM $INBUFR INTO THE MSG AND DELETE EXTRA BLANKS FROM THE */
*/*  SUBSTITUTED LINE UNLESS REQUESTED NOT TO.                       */
*/*      R1=PARAMETER LIST POINTER                                   */
*/********************************************************************/
*S20CEC2:                                                          0101
*        $TCECM='0'B;                   /* RESET TCEC SW IN RCA      */
S20CEC2  NI    $TCECM(WAPTR),B'11111110'                           0101
*        IF $MULLNSW='1'B THEN          /* IF MULTIPLE LINE CALL     */
         TM    $MULLNSW(WAPTR),B'00100000'                         0102
         BO    @RT00102                                            0102
*            GOTO S20CEC2A;             /* BR TO CHK IF SUBSTITUTION */
*        SUBINDX='1'X;                  /* INITIALIZE $INBUFR INDEX  */
         LA    @12,1                                               0104
         STH   @12,SUBINDX(,WAPTR)                                 0104
*        MSG#=$TCMSG#;                  /* GET CALLER'S MSG NUMBER   */
         L     @12,$TCMSG#(,R1)                                    0105
         STH   @12,MSG#(,WAPTR)                                    0105
*        IF $TCWTO='1'B THEN            /*IF THE WRT TO OPER SW IS ON*/
         TM    $TCWTO(R1),B'00001000'                              0106
         BNO   @RF00106                                            0106
*          $CNSLFG='1'B;                /* TURN ON CONSOLE FLG-MSG IO*/
         OI    $CNSLFG(WAPTR),B'01000000'                          0107
*        $COUTAD=ADDR($WORK);           /* SET UP PTR TO 'OUT' MSG   */
@RF00106 LA    @12,$WORK(,WAPTR)                                   0108
         ST    @12,$COUTAD(,WAPTR)                                 0108
*        CECOMSW='0'B;                  /* SET CECOM SW OFF          */
         NI    CECOMSW,B'01111111'                                 0109
*        GEN  (BAL RETR,S20C01);        /* GO SET UP PREFIX ID'S     */
         BAL RETR,S20C01
*        IF $TCLOCM='1'B THEN           /* IF WE DO NOT HAVE TO LOC  */
         TM    $TCLOCM(R1),B'00010000'                             0111
         BO    @RT00111                                            0111
*          GOTO S20CEC2A;               /* MSG IN TBL THEN BR AROUND */
*        $COUTCT=ZERO;                  /* ZERO OUT 'OUT' COUNT AREA */
         L     @12,ZERO                                            0113
         ST    @12,$COUTCT(,WAPTR)                                 0113
*        GEN  (BAL RETR,S20CMLOC);      /* LOCATE MSG IN MSG TBL     */
         BAL RETR,S20CMLOC
*        IF Y=ZERO THEN                 /* IF NO MSG TEXT WAS FOUND  */
         SLR   @12,@12                                             0115
         IC    @12,Y(,WAPTR)                                       0115
         CL    @12,ZERO                                            0115
         BNE   @RF00115                                            0115
*          DO;                                                     0116
*            $COUTCT=I-1;               /* SET OUT CNT = PREFIX LNGTH*/
         LH    @12,I(,WAPTR)                                       0117
         N     @12,@CF00789                                        0117
         BCTR  @12,0                                               0117
         ST    @12,$COUTCT(,WAPTR)                                 0117
*            GOTO S20CEC2C;             /* BRANCH AROUND SUBSTITUTION*/
         B     S20CEC2C                                            0118
*          END;                                                    0119
*        $WORK(I:I+Y)=MSGDAT  ;         /* MOVE MSG TO $WORK+PREFIX  */
@RF00115 LH    @12,I(,WAPTR)                                       0120
         N     @12,@CF00789                                        0120
         ALR   @12,WAPTR                                           0120
         SLR   @10,@10                                             0120
         IC    @10,Y(,WAPTR)                                       0120
         EX    @10,@SM00794                                        0120
*        $COUTCT=$COUTCT+I-1;           /* ADD PREFIX LEN TO OUT CNT */
         LH    @12,I(,WAPTR)                                       0121
         N     @12,@CF00789                                        0121
         AL    @12,$COUTCT(,WAPTR)                                 0121
         BCTR  @12,0                                               0121
         ST    @12,$COUTCT(,WAPTR)                                 0121
*/***************************************/                         0122
*/* SUBSTITUTION CHECK                  */                         0122
*/***************************************/                         0122
*S20CEC2A:                                                         0122
*        IF $TCSUBDA^='1'B THEN         /* IF NO SUBSTITUTION        */
S20CEC2A TM    $TCSUBDA(R1),B'10000000'                            0122
         BNO   @RT00122                                            0122
*          GO TO S20CEC2B;              /* THEN BR AROUND            */
*        DO X=I TO $COUTCT BY 1;        /* LOOP UNTIL SUBSTITION DONE*/
         LH    @12,I(,WAPTR)                                       0124
         N     @12,@CF00789                                        0124
         ST    @12,X                                               0124
         B     @DE00124                                            0124
@DL00124 DS    0H                                                  0125
*          IF $WORK(X)=DELMTR THEN      /* IF ITS A SUB CHAR THEN    */
         ALR   @12,WAPTR                                           0125
         CLC   $WORK-1(1,@12),DELMTR                               0125
         BNE   @RF00125                                            0125
*            IF SUBINDX<81              /* CHK IF SUB DATA AVAILABLE */
*              THEN DO;                                            0126
         LH    @12,SUBINDX(,WAPTR)                                 0126
         N     @12,@CF00789                                        0126
         C     @12,@CF00739                                        0126
         BNL   @RF00126                                            0126
*                $WORK(X)=$INBUFR(SUBINDX);   /* MOVE SUB DATA TO MSG*/
         L     @10,X                                               0128
         ALR   @10,WAPTR                                           0128
         ALR   @12,WAPTR                                           0128
         MVC   $WORK-1(1,@10),$INBUFR-1(@12)                       0128
*                SUBINDX=SUBINDX+1;     /* UPDATE INDEX              */
         LH    @12,SUBINDX(,WAPTR)                                 0129
         N     @12,@CF00789                                        0129
         AL    @12,@CF00103                                        0129
         STH   @12,SUBINDX(,WAPTR)                                 0129
*                   END;                                           0130
*              ELSE                     /* IF SUB DATA NOT AVAILABLE */
*                $WORK(X)=BLANK;        /*  MOVE BLANK TO MSG        */
         B     @RC00126                                            0131
@RF00126 LR    @12,WAPTR                                           0131
         AL    @12,X                                               0131
         MVC   $WORK-1(1,@12),BLANK                                0131
*        END;                                                      0132
@RC00126 DS    0H                                                  0132
@RF00125 LA    @12,1                                               0132
         AL    @12,X                                               0132
         ST    @12,X                                               0132
@DE00124 CL    @12,$COUTCT(,WAPTR)                                 0132
         BNH   @DL00124                                            0132
* S20CEC2B:                                                        0133
*        IF $MULLNSW='1'B THEN          /* IF MULTIPLE LINE CALL     */
S20CEC2B TM    $MULLNSW(WAPTR),B'00100000'                         0133
         BNO   @RF00133                                            0133
*          DO;                                                     0134
*            $MULLNSW='0'B;             /* TURN OFF MULT LINE SW     */
         NI    $MULLNSW(WAPTR),B'11011111'                         0135
*            IF $LSTLNSW='1'B           /* IF LAST LINE OF MULT CALL */
*              THEN DO;                                            0136
         TM    $LSTLNSW(WAPTR),B'00010000'                         0136
         BNO   @RF00136                                            0136
*                $LSTLNSW='0'B;         /*  TURN OFF LAST LINE SW    */
         NI    $LSTLNSW(WAPTR),B'11101111'                         0138
*                GOTO S20CEC2C;         /*  BR TO CHK IF 2-WAY       */
         B     S20CEC2C                                            0139
*                   END;                                           0140
*              ELSE                     /* IF NOT LAST LINE          */
*                GOTO S20CEC2D;         /*  BR AROUND 2-WAY CHK      */
*          END;                                                    0142
*/***************************************/                         0143
*/* TWO-WAY MESSAGE CHECK               */                         0143
*/***************************************/                         0143
*S20CEC2C:                                                         0143
*        IF $TC2WAY='1'B THEN           /* IF IT IS A 2-WAY CALL THEN*/
@RF00133 DS    0H                                                  0143
S20CEC2C TM    $TC2WAY(R1),B'01000000'                             0143
         BNO   @RF00143                                            0143
*          DO;                                                     0144
*            $CINCT=$TCINCT;            /* SET UP 'IN' COUNT         */
         L     @12,$TCINCT(,R1)                                    0145
         ST    @12,$CINCT(,WAPTR)                                  0145
*            $CINADR=ADDR($INBUFR);     /* SET UP 'IN' ADDR          */
         LA    @10,$INBUFR(,WAPTR)                                 0146
         ST    @10,$CINADR(,WAPTR)                                 0146
*            R14=$CINADR;               /* PUT BUFFER ADDR INTO REG14*/
         LR    R14,@10                                             0147
*            R15=$CINCT;                /* PUT BUF LNGTH - 1 IN REG15*/
         LR    R15,@12                                             0148
*      GEN REFS(R15,S20CEC1A) ( EX R15,S20CEC1A);  /* ZERO OUT IN BUF*/
          EX R15,S20CEC1A
*            $CINADR=$CINADR+1;         /* ALLOW 1 BYTE FOR LNGTH FLD*/
         LA    @12,1                                               0150
         AL    @12,$CINADR(,WAPTR)                                 0150
         ST    @12,$CINADR(,WAPTR)                                 0150
*            $C2WAY='1'B;               /* INDICATE TO MSGI/O 2-WAY  */
         OI    $C2WAY(WAPTR),B'10000000'                           0151
*          END;                                                    0152
*/***************************************/                         0153
*/* CALLING MESSAGE I/O                 */                         0153
*/***************************************/                         0153
*S20CEC2D:                                                         0153
*        R4=R1;                         /* SAVE INPUT PARM PTR       */
@RF00143 DS    0H                                                  0153
S20CEC2D LR    R4,R1                                               0153
*        IF $TCNOID='1'B                /* IS MSG PREFIX TO BE DRPD  */
*              THEN                     /* IF YES DO THE FOLLOWING   */
         TM    $TCNOID(R1),B'00100000'                             0154
         BNO   @RF00154                                            0154
*                  DO;                                             0155
*                      $COUTAD=$COUTAD+7;   /* ADD PTR PAST PREFIX   */
         LA    @12,7                                               0156
         L     @10,$COUTAD(,WAPTR)                                 0156
         ALR   @10,@12                                             0156
         ST    @10,$COUTAD(,WAPTR)                                 0156
*                      $COUTCT=$COUTCT-7;   /* REDUCE MSG COUNT      */
         LCR   @12,@12                                             0157
         AL    @12,$COUTCT(,WAPTR)                                 0157
         ST    @12,$COUTCT(,WAPTR)                                 0157
*                  END;                                            0158
*        R1=ADDR($CCOMDAT);             /* SET POINTER TO PARM       */
@RF00154 LA    R1,$CCOMDAT(,WAPTR)                                 0159
*        CALL ISTCC011;                 /* CALL MESSAGE I/O          */
         L     @15,@CV00132                                        0160
         BALR  @14,@15                                             0160
*        R1=R4;                         /* RESTORE INPUT PARM        */
         LR    R1,R4                                               0161
*        IF $TCNOID='1'B                /* WAS ID DROPPED            */
*              THEN                     /* IF YES DO THE FOLLOWING   */
         TM    $TCNOID(R1),B'00100000'                             0162
         BNO   @RF00162                                            0162
*                  DO;                                             0163
*                      $COUTAD=$COUTAD-7;   /* RESET ADDRESS         */
         LA    @12,7                                               0164
         L     @10,$COUTAD(,WAPTR)                                 0164
         SLR   @10,@12                                             0164
         ST    @10,$COUTAD(,WAPTR)                                 0164
*                      $COUTCT=$COUTCT+7;   /* RESET COUNT           */
         AL    @12,$COUTCT(,WAPTR)                                 0165
         ST    @12,$COUTCT(,WAPTR)                                 0165
*                  END;                                            0166
*/***************************************/                         0167
*/* CHECK IF NECESARY TO WAIT ON I/O    */                         0167
*/***************************************/                         0167
*S20CEC2E:     ;                                                   0167
@RF00162 DS    0H                                                  0167
S20CEC2E DS    0H                                                  0168
*                                       /* WAS CALL DIRECT & MUST    */
*           IF $POSTFLG='1'B &          /* WE WAIT TILL I/O COMPLETE */
*           $TCKABND='1'B & $ABTERM='1'B                           0168
*              THEN                     /* DO THE FOLLOWING          */
         TM    $POSTFLG(WAPTR),B'01000000'                         0168
         BNO   @RF00168                                            0168
         TM    $TCKABND(R1),B'00000100'                            0168
         BNO   @RF00168                                            0168
         TM    $ABTERM(WAPTR),B'00000010'                          0168
         BNO   @RF00168                                            0168
*                  DO;                                             0169
*                       RCAPTR=$RCA;    /* GET PTR TO R. C. AREA     */
         L     RCAPTR,$RCA(,WAPTR)                                 0170
*                       R1=ADDR($TLTECB2);  /* SET UP REG 1          */
         LA    R1,$TLTECB2(,RCAPTR)                                0171
*    CALL I00C1002;     /* WAIT   @D32JPPW*/                       0172
         L     @15,@CV00745                                        0172
         BALR  @14,@15                                             0172
*                       GOTO S20CEC2E;  /* LOOP BACK FOR CHECK       */
         B     S20CEC2E                                            0173
*                  END;                                            0174
*        GOTO S20CEXIT;                 /* RETURN TO CALLER          */
         B     S20CEXIT                                            0175
*/***************************************/                         0176
*/* EXIT - RETURN TO CALLER             */                         0176
*/***************************************/                         0176
*S20CRC08:                                                         0176
*        R15=RC08;                      /* SET ERR RETURN CODE       */
S20CRC08 SLR   R15,R15                                             0176
         IC    R15,RC08                                            0176
*S20CEXIT:                                                         0177
*        R13 = SVESC020(2);             /* PICK UP PREVIOUS SAVE AREA*/
S20CEXIT L     R13,SVESC020+4(,WAPTR)                              0177
*        RETURN;                        /* RETURN TO CALLER          */
@EL00001 DS    0H                                                  0178
@EF00001 DS    0H                                                  0178
@ER00001 L     @14,12(,@13)                                        0178
         LM    @00,@12,20(@13)                                     0178
         BR    @14                                                 0178
*        GEN  (EJECT);                                             0179
         EJECT
*/********************************************************************/
*/*                         T C E C  2                               */
*/*                                                                  */
*/*  THIS SECTION HANDLES ALL 'TCEC' CALLS FOR MULTIPLE LINE OUTPUT  */
*/*  REQUESTS. IT WILL PRINT ALL MESSAGES WITH THE SAME MESSAGE #    */
*/*  IF ITS CORRESPONDING 'MASK' BIT IS O  IN THE '$TCMASK' PARAMETER*/
*/*  OF THE 'TCEC' MACRO CALL.                                       */
*/********************************************************************/
*S20CEC03:  ENTRY;                      /* ENTRY POINT FOR MUL-LN    */
@EP00180 DS    0H                                                  0181
*        SVESC120(2) = R13;             /* SET UP BACK PTR           */
         ST    R13,SVESC120+4(,WAPTR)                              0181
*        BACKSAVE(3)  = ADDR(SVESC120); /* PUT FORWARD CHAIN IN LAST */
         LA    @12,SVESC120(,WAPTR)                                0182
         ST    @12,BACKSAVE+8(,R13)                                0182
*        R13 = ADDR(SVESC120);          /* POINT TO SAVE AREA FOR MOD*/
         LR    R13,@12                                             0183
*        PTRSAV=R1;                     /* SAVE PTR TO ORIG PARM LST */
         ST    R1,PTRSAV(,WAPTR)                                   0184
*        SUBINDX='1'X;                  /* INITIALIZE $INBUFR INDEX  */
         LA    @12,1                                               0185
         STH   @12,SUBINDX(,WAPTR)                                 0185
*        IF $TCWTO='1'B THEN            /* IF WRT TO OPER SW IS ON   */
         TM    $TCWTO(R1),B'00001000'                              0186
         BNO   @RF00186                                            0186
*            $CNSLFG='1'B;              /* TURN ON CONSOL FLG-MSG I/O*/
         OI    $CNSLFG(WAPTR),B'01000000'                          0187
*        MSG#=$TCMSG#;                  /* GET CALLER'S MSG NUMBER   */
@RF00186 L     @12,$TCMSG#(,R1)                                    0188
         STH   @12,MSG#(,WAPTR)                                    0188
*        $COUTAD=ADDR($WORK);           /* SET UP OUT ADDR           */
         LA    @12,$WORK(,WAPTR)                                   0189
         ST    @12,$COUTAD(,WAPTR)                                 0189
*        CECOMSW='0'B;                  /* SET CECOM SW OFF          */
         NI    CECOMSW,B'01111111'                                 0190
*        GEN   (BAL RETR,S20C01);       /* GO SET UP MSG PREFIX      */
         BAL RETR,S20C01
*        GEN   (BAL RETR,S20CMLOC);     /* GO LOCATE MSG IN TBL      */
         BAL RETR,S20CMLOC
*        IF Y=ZERO THEN                 /* IF NO MSG TEXT WAS FOUND  */
         L     @12,ZERO                                            0193
         SLR   @10,@10                                             0193
         IC    @10,Y(,WAPTR)                                       0193
         CLR   @12,@10                                             0193
         BNE   @RF00193                                            0193
*          DO;                                                     0194
*            $COUTCT=I-1;               /* SET OUT CNT = PREFIX LNGTH*/
         LH    @10,I(,WAPTR)                                       0195
         N     @10,@CF00789                                        0195
         BCTR  @10,0                                               0195
         ST    @10,$COUTCT(,WAPTR)                                 0195
*            $CINADR=ZERO;              /* ZERO OUT IN ADR FIELD     */
         ST    @12,$CINADR(,WAPTR)                                 0196
*            $CINCT=ZERO;               /* ZERO OUT IN COUNT FIELD   */
         ST    @12,$CINCT(,WAPTR)                                  0197
*            $LSTLNSW='1'B;             /* TURN ON LAST LINE SW      */
         OI    $LSTLNSW(WAPTR),B'00010000'                         0198
*            GOTO S20CEC3F;             /* BR TO PRT LINE            */
         B     S20CEC3F                                            0199
*          END;                                                    0200
*        MMSG#=MSGDAT(1:3);             /* SAVE MSG NO. (EBCDIC)     */
@RF00193 MVC   MMSG#(3,WAPTR),MSGDAT(MSGPTR)                       0201
*        MSKBIT=0;                      /* INITIALIZE CTR TO ZERO    */
         MVI   MSKBIT(WAPTR),X'00'                                 0202
*/***************************************/                         0203
*/* SEARCH FOR FIRST LINE TO BE PRINTED */                         0203
*/***************************************/                         0203
*S20CEC3A:                                                         0203
*        CNTSAV=ZERO;                   /* ZERO OUT SAVE AREA        */
S20CEC3A L     @12,ZERO                                            0203
         ST    @12,CNTSAV(,WAPTR)                                  0203
*        CNTSAV(4:4)=Y;                 /* SAVE MSG LENGTH           */
         MVC   CNTSAV+3(1,WAPTR),Y(WAPTR)                          0204
*        MB1=(MSKBIT/8)+1;              /* SET UP TO COMP EACH BYTE  */
         LA    @12,1                                               0205
         SLR   @10,@10                                             0205
         IC    @10,MSKBIT(,WAPTR)                                  0205
         LR    @00,@10                                             0205
         SRL   @00,3                                               0205
         ALR   @00,@12                                             0205
         ST    @00,MB1                                             0205
*        MB2=(MSKBIT//8)+1;             /* GET REMAINDER             */
         LR    @06,@10                                             0206
         SRDA  @06,32                                              0206
         D     @06,@CF00040                                        0206
         ALR   @06,@12                                             0206
         ST    @06,MB2                                             0206
*        R1=PTRSAV;                     /* SET UP BASE REG           */
         L     R1,PTRSAV(,WAPTR)                                   0207
*        IF (($TCMASK(MB1)) & (MSKTBL(MB2)))^=0 THEN /*BIT ON-PRT MSG*/
         LR    @07,@00                                             0208
         SLR   @00,@00                                             0208
         IC    @00,$TCMASK-1(@07,R1)                               0208
         SLR   @07,@07                                             0208
         IC    @07,MSKTBL-1(@06)                                   0208
         NR    @00,@07                                             0208
         LTR   @00,@00                                             0208
         BNZ   @RT00208                                            0208
*          GOTO S20CEC3C;               /* BR AROUND                 */
*        MSKBIT=MSKBIT+1;               /* UPDATE TO NXT BIT         */
         ALR   @10,@12                                             0210
         STC   @10,MSKBIT(,WAPTR)                                  0210
*        MSGPTR=MSGPTR+CNTSAV;          /* UPDATE MSG PTR TO NXT MSG */
         AL    MSGPTR,CNTSAV(,WAPTR)                               0211
*        Y = MSGDAT;                    /* GET LEN OF THAT MSG       */
         MVC   Y(1,WAPTR),MSGDAT(MSGPTR)                           0212
*        MSGPTR=MSGPTR+1;               /* UPDATE PTR TO MSG TXT     */
         ALR   MSGPTR,@12                                          0213
*        IF MMSG#=MSGDAT(1:3)           /* IF PRESENT=LST MSG NUMBER */
*          THEN GOTO S20CEC3A;          /* BR BACK AND TEST MASK BIT */
         CLC   MMSG#(3,WAPTR),MSGDAT(MSGPTR)                       0214
         BE    @RT00214                                            0214
*          ELSE GOTO S20CEC3H;          /* ELSE RETURN TO CALLER     */
         B     S20CEC3H                                            0216
*S20CEC3B:                                                         0217
*        R1=PTRSAV;                     /* SET UP BASE REG           */
S20CEC3B L     R1,PTRSAV(,WAPTR)                                   0217
*/***************************************/                         0218
*/* FORMAT LINE                         */                         0218
*/***************************************/                         0218
*S20CEC3C:                                                         0218
*        GEN   (BAL RETR,S20C01);                                  0218
S20CEC3C BAL RETR,S20C01
*        GEN   (BAL RETR,S20C01);                                  0219
         BAL RETR,S20C01
*        $WORK(I)=BLANK;                /* BLANK OUT                 */
         LH    @12,I(,WAPTR)                                       0220
         N     @12,@CF00789                                        0220
         ALR   @12,WAPTR                                           0220
         MVC   $WORK-1(1,@12),BLANK                                0220
*        $WORK(I+1:N)=$WORK(I:N-1);     /* $WORK BUFFER              */
         LH    @12,I(,WAPTR)                                       0221
         N     @12,@CF00789                                        0221
         ALR   @12,WAPTR                                           0221
         LH    @10,I(,WAPTR)                                       0221
         N     @10,@CF00789                                        0221
         LH    @09,N                                               0221
         N     @09,@CF00789                                        0221
         SLR   @09,@10                                             0221
         BCTR  @09,0                                               0221
         ALR   @10,WAPTR                                           0221
         MVC   @TS00001(256),$WORK-1(@10)                          0221
         EX    @09,@SM00799                                        0221
*        $WORK(I:I+Y)=MSGDAT;           /* MOVE MSG TO $WORK+PREFIX  */
         LH    @12,I(,WAPTR)                                       0222
         N     @12,@CF00789                                        0222
         ALR   @12,WAPTR                                           0222
         SLR   @10,@10                                             0222
         IC    @10,Y(,WAPTR)                                       0222
         EX    @10,@SM00794                                        0222
*        $COUTCT = CNTSAV+I-1;          /* ADD PREFIX LEN TO OUT CNT */
         LH    @12,I(,WAPTR)                                       0223
         N     @12,@CF00789                                        0223
         AL    @12,CNTSAV(,WAPTR)                                  0223
         BCTR  @12,0                                               0223
         ST    @12,$COUTCT(,WAPTR)                                 0223
*        $CINADR=ZERO;                  /* ZERO OUT IN ADDR FLD      */
         L     @12,ZERO                                            0224
         ST    @12,$CINADR(,WAPTR)                                 0224
*        $CINCT=ZERO;                   /* ZERO OUT IN COUNT FLD     */
         ST    @12,$CINCT(,WAPTR)                                  0225
*/***************************************/                         0226
*/* SEARCH FOR NEXT LINE TO BE PRINTED  */                         0226
*/* IN ORDER TO KNOW WHETHER THE LINE   */                         0226
*/* FORMATTED ABOVE IS THE LAST LINE    */                         0226
*/***************************************/                         0226
*S20CEC3D:                                                         0226
*        MSKBIT=MSKBIT+1;               /* UPDATE TO NXT BIT         */
S20CEC3D LA    @12,1                                               0226
         SLR   @10,@10                                             0226
         IC    @10,MSKBIT(,WAPTR)                                  0226
         ALR   @10,@12                                             0226
         STC   @10,MSKBIT(,WAPTR)                                  0226
*        MSGPTR=MSGPTR+CNTSAV;          /* UPDATE MSG PTR TO NXT MSG */
         AL    MSGPTR,CNTSAV(,WAPTR)                               0227
*        Y = MSGDAT;                    /* GET LEN OF THAT MSG       */
         MVC   Y(1,WAPTR),MSGDAT(MSGPTR)                           0228
*        CNTSAV=ZERO;                   /* ZERO OUT SAVE AREA        */
         L     @10,ZERO                                            0229
         ST    @10,CNTSAV(,WAPTR)                                  0229
*        CNTSAV(4:4)=Y;                 /* SAVE MSG LENGTH           */
         MVC   CNTSAV+3(1,WAPTR),Y(WAPTR)                          0230
*        MSGPTR=MSGPTR+1;               /* UPDATE PTR TO MSG TXT     */
         ALR   MSGPTR,@12                                          0231
*        IF MMSG#^=MSGDAT(1:3) THEN     /* CHK IF THE MSG NUM CHANGED*/
         CLC   MMSG#(3,WAPTR),MSGDAT(MSGPTR)                       0232
         BE    @RF00232                                            0232
*          DO;                                                     0233
*            $LSTLNSW='1'B;             /*  TURN ON LAST LINE SW     */
         OI    $LSTLNSW(WAPTR),B'00010000'                         0234
*            GOTO S20CEC3F;             /*  BR TO PRT LAST LINE      */
         B     S20CEC3F                                            0235
*          END;                                                    0236
*        MB1=(MSKBIT/8)+1;              /* SET UP TO COMP EACH BYTE  */
@RF00232 LA    @12,1                                               0237
         SLR   @10,@10                                             0237
         IC    @10,MSKBIT(,WAPTR)                                  0237
         LR    @00,@10                                             0237
         SRL   @00,3                                               0237
         ALR   @00,@12                                             0237
         ST    @00,MB1                                             0237
*        MB2=(MSKBIT//8)+1;             /* GET REMAINDER             */
         LR    @06,@10                                             0238
         SRDA  @06,32                                              0238
         D     @06,@CF00040                                        0238
         ALR   @06,@12                                             0238
         ST    @06,MB2                                             0238
*        IF (($TCMASK(MB1)) & (MSKTBL(MB2)))=0 THEN /*BIT OFF-BR     */
         LR    @12,@00                                             0239
         SLR   @10,@10                                             0239
         IC    @10,$TCMASK-1(@12,R1)                               0239
         SLR   @12,@12                                             0239
         IC    @12,MSKTBL-1(@06)                                   0239
         NR    @10,@12                                             0239
         LTR   @10,@10                                             0239
         BZ    @RT00239                                            0239
*          GOTO S20CEC3D;               /* CK NXT BIT                */
*/***************************************/                         0241
*/* CALLING CECOM (TCEC)                */                         0241
*/***************************************/                         0241
*S20CEC3F:                                                         0241
*        $MULLNSW='1'B;                 /* TURN ON MULTIPLE LINE SW  */
S20CEC3F OI    $MULLNSW(WAPTR),B'00100000'                         0241
*        $TCECM='1'B;                   /* TURN ON TCEC SW           */
         OI    $TCECM(WAPTR),B'00000001'                           0242
*        GEN   (MVC MYPARM(9,WAPTR),0(R1));                        0243
         MVC MYPARM(9,WAPTR),0(R1)
*        R1=ADDR(MYPARM);               /* SET UP ADDRESSABILITY     */
         LA    R1,MYPARM(,WAPTR)                                   0244
*        IF $TCKABND='1'B & $ABTERM='1'B      /* IF BOTH ABENDS ON   */
*          THEN                                                    0245
         TM    $TCKABND(R1),B'00000100'                            0245
         BNO   @RF00245                                            0245
         TM    $ABTERM(WAPTR),B'00000010'                          0245
         BNO   @RF00245                                            0245
*            CALL ISTSC020;             /* CALL TCEC DIRECTLY        */
         L     @15,@CA00028                                        0246
         BALR  @14,@15                                             0246
*          ELSE                         /* IF NOT ABENDING           */
*            CALL #EXIT;                /* CALL TCEC VIA RESOURCE MGR*/
         B     @RC00245                                            0247
@RF00245 L     @15,#EXITA(,WAPTR)                                  0247
         BALR  @14,@15                                             0247
*        IF Y=ZERO THEN                 /* IF LINE PRINTED WAS NULL  */
@RC00245 SLR   @12,@12                                             0248
         IC    @12,Y(,WAPTR)                                       0248
         CL    @12,ZERO                                            0248
         BE    @RT00248                                            0248
*          GOTO S20CEC3H;               /* THEN RETURN               */
*        IF MMSG#=MSGDAT(1:3) THEN      /* CHECK IF LAST LINE        */
         CLC   MMSG#(3,WAPTR),MSGDAT(MSGPTR)                       0250
         BE    @RT00250                                            0250
*          GOTO S20CEC3B;               /*  NO, BR FOR NEXT MSG      */
*/***************************************/                         0252
*/* EXIT - RETURN TO CALLER             */                         0252
*/***************************************/                         0252
*S20CEC3H:                                                         0252
*        R13=SVESC120(2);               /* PICK UP PREVIOUS SAVE AREA*/
S20CEC3H L     R13,SVESC120+4(,WAPTR)                              0252
*        RETURN;                        /* RETURN TO CALLER          */
         B     @EL00001                                            0253
*        GEN  (EJECT);                                             0254
         EJECT
*/********************************************************************/
*/* THIS SUBROUTINE TAKES CARE OF PUTTING THE PREFIX ID ON THE MSG.  */
*/* IF THE PREFIX IS FOR A TOLTEP MSG THEN                           */
*/*      'ITAXXXX' WHERE XXXX IS INCLUDED AS PART OF EACH MSG TEXT   */
*/*   IN DOS 'FXXXX' WHERE XXXX IS AS ABOVE                          */
*/* IF THE PREFIX IS FOR AN OLT MSG THEN                             */
*/*      'IXXNNNZ' WHERE XX  = COMPONENT NAME SUPPLIED BY THE OLT    */
*/*                      NNN = MSG NUMBER SUPPLIED BY THE OLT        */
*/*                      Z   = 'I' OR 'D' INDICATING 1-WAY OR 2-WAY  */
*/*      'ITA100I' OR 'ITA101D' IS USED WHEN THE OLT FAILS TO SUPPLY */
*/*                             THE COMPONENT NAME                   */
*/*   IN DOS THE COMPONENT NAME IS NOT USED                          */
*/*      'F100I' OR 'F101D'                                          */
*/********************************************************************/
*S20C01:                                                           0255
*        RETSAV=R14;                    /* SAVE RETURN ADDRESS       */
S20C01   ST    R14,RETSAV(,WAPTR)                                  0255
*        I='0'X;                        /* ZERO OUT INDEX VALUE      */
         SLR   @12,@12                                             0256
         STH   @12,I(,WAPTR)                                       0256
*        IF $TCKIDON='1'B THEN          /* IF ID ON BIT SET THEN     */
         TM    $TCKIDON(R1),B'00000010'                            0257
         BO    @RT00257                                            0257
*          GOTO S20C03;                 /* RETURN TO THE CALLER      */
*        $WORK(1)=BLANK;                /* BLANK OUT                 */
         MVC   $WORK(1,WAPTR),BLANK                                0259
*        $WORK(2:N)=$WORK(1:N-1);       /* $WORK BUFFER              */
         LH    @12,N                                               0260
         N     @12,@CF00789                                        0260
         BCTR  @12,0                                               0260
         BCTR  @12,0                                               0260
         MVC   @TS00001(256),$WORK(WAPTR)                          0260
         EX    @12,@SM00803                                        0260
*        IF CECOMSW='1'B THEN           /* IF PREFIX IS FOR OLT MSG  */
         TM    CECOMSW,B'10000000'                                 0261
         BO    @RT00261                                            0261
*          GOTO S20C02;                 /*   THEN BR                 */
*        IF $DRIVER = DOS87             /* IF SYSTEM IS DOS          */
*          THEN DO;                                                0263
         CLC   $DRIVER(1,WAPTR),DOS87                              0263
         BNE   @RF00263                                            0263
*            I=1;                       /* GET LENGTH OF INT PREFIX  */
         MVC   I(2,WAPTR),@CH00103                                 0265
*            $WORK(1)=DOSPREFX;         /* MOVE PREFIX TO MSG        */
         MVC   $WORK(1,WAPTR),DOSPREFX                             0266
*               END;                                               0267
*          ELSE DO;                     /*IF SYSTEM IS OTHER THAN DOS*/
         B     @RC00263                                            0268
@RF00263 DS    0H                                                  0269
*            I=LENGTH(ITA);             /* GET LENGTH OF INT PREFIX  */
         LA    @12,3                                               0269
         STH   @12,I(,WAPTR)                                       0269
*            $WORK(1:I)=ITA;            /* MOVE PREFIX TO MSG        */
         BCTR  @12,0                                               0270
         EX    @12,@SM00805                                        0270
*               END;                                               0271
*        GOTO S20C03;                   /* BR AROUND                 */
         B     S20C03                                              0272
*S20C02:                                                           0273
*        IF #MSGIDAC^='0000'X & $DRIVER^=DOS87 /*IF OLT GAVE A MSGID */
*          THEN GOTO S20C02A;           /* AND SYSTEM NOT DOS, BR    */
S20C02   CLC   #MSGIDAC(2,WAPTR),@CB00770                          0273
         BE    @RF00273                                            0273
         CLC   $DRIVER(1,WAPTR),DOS87                              0273
         BNE   @RT00273                                            0273
*        IF $DRIVER = DOS87             /* IF SYSTEM IS DOS          */
*          THEN                                                    0275
@RF00273 CLC   $DRIVER(1,WAPTR),DOS87                              0275
         BNE   @RF00275                                            0275
*          IF $C2WAY='1'B               /*  IF ITS A 2-WAY REQUEST   */
*            THEN DO;                                              0276
         TM    $C2WAY(WAPTR),B'10000000'                           0276
         BNO   @RF00276                                            0276
*              I=LENGTH(DOS2WAY);       /*  GET LENGTH OF PREFIX     */
         LA    @12,6                                               0278
         STH   @12,I(,WAPTR)                                       0278
*              $WORK(1:I)=DOS2WAY;      /*  MOVE PREFIX TO MSG       */
         BCTR  @12,0                                               0279
         EX    @12,@SM00807                                        0279
*                 END;                                             0280
*            ELSE DO;                   /*  IF ITS A 1-WAY REQUEST   */
         B     @RC00276                                            0281
@RF00276 DS    0H                                                  0282
*              I=LENGTH(DOS1WAY);       /*  GET LENGTH OF PREFIX     */
         LA    @12,6                                               0282
         STH   @12,I(,WAPTR)                                       0282
*              $WORK(1:I)=DOS1WAY;      /*  MOVE PREFIX TO MSG       */
         BCTR  @12,0                                               0283
         EX    @12,@SM00809                                        0283
*                 END;                                             0284
*          ELSE                         /*IF SYSTEM IS OTHER THAN DOS*/
*          IF $C2WAY='1'B               /* IF ITS A 2-WAY MSG        */
*            THEN DO;                                              0285
         B     @RC00275                                            0285
@RF00275 TM    $C2WAY(WAPTR),B'10000000'                           0285
         BNO   @RF00285                                            0285
*              I=LENGTH(TWOWAY);        /* GET LENGTH OF PREFIX      */
         LA    @12,8                                               0287
         STH   @12,I(,WAPTR)                                       0287
*              $WORK(1:I)=TWOWAY;       /* MOVE PREFIX TO MSG        */
         BCTR  @12,0                                               0288
         EX    @12,@SM00811                                        0288
*                 END;                                             0289
*            ELSE DO;                   /* IF ITS A 1-WAY REQUEST    */
         B     @RC00285                                            0290
@RF00285 DS    0H                                                  0291
*              I=LENGTH(ONEWAY);        /* GET LENGTH OF PREFIX      */
         LA    @12,8                                               0291
         STH   @12,I(,WAPTR)                                       0291
*              $WORK(1:I)=ONEWAY;       /* MOVE PREFIX TO MSG        */
         BCTR  @12,0                                               0292
         EX    @12,@SM00813                                        0292
*                 END;                                             0293
*        GOTO S20C03;                   /* BR AROUND                 */
         B     S20C03                                              0294
*S20C02A:                                                          0295
*        $WORK(1)=LETTERI;              /* BUILDING MSGID -FIRST LET */
S20C02A  MVC   $WORK(1,WAPTR),LETTERI                              0295
*        $WORK(2:3)=#MSGIDAC;           /*  -COMPONENT NAME          */
         MVC   $WORK+1(2,WAPTR),#MSGIDAC(WAPTR)                    0296
*        $WORK(4:6)=CEOUTMSG(1:3);      /*  -MSG NUMBER              */
         L     @12,$CEOUTAD(,CECMAP)                               0297
         MVC   $WORK+3(3,WAPTR),CEOUTMSG(@12)                      0297
*        $CEOUTAD=$CEOUTAD+3;           /* REMOVE MSG# FROM MSG TEXT */
         LA    @10,3                                               0298
         ALR   @12,@10                                             0298
         ST    @12,$CEOUTAD(,CECMAP)                               0298
*        $COUTCT=$COUTCT-3;             /* CORRECT MSG LENGTH CTR    */
         LCR   @10,@10                                             0299
         AL    @10,$COUTCT(,WAPTR)                                 0299
         ST    @10,$COUTCT(,WAPTR)                                 0299
*        IF $C2WAY='1'B                 /* CHK IF 2-WAY REQUESTED    */
*          THEN $WORK(7)=LETTERD;       /*  YES, RESPONSE REQUESTED  */
         TM    $C2WAY(WAPTR),B'10000000'                           0300
         BNO   @RF00300                                            0300
         MVC   $WORK+6(1,WAPTR),LETTERD                            0301
*          ELSE $WORK(7)=LETTERI;       /*  NO, INFORMATIONAL        */
         B     @RC00300                                            0302
@RF00300 MVC   $WORK+6(1,WAPTR),LETTERI                            0302
*        I=8;                           /* SET INDEX 1ST BYTE PAST ID*/
@RC00300 LA    @12,8                                               0303
         STH   @12,I(,WAPTR)                                       0303
*        $WORK(I)=BLANK;                /* PUT BLANK BETWEEN ID & MSG*/
         ALR   @12,WAPTR                                           0304
         MVC   $WORK-1(1,@12),BLANK                                0304
*S20C03:                                                           0305
*        I=I+1;                         /* UPDATE INDEX VALUE        */
S20C03   LA    @12,1                                               0305
         LH    @10,I(,WAPTR)                                       0305
         N     @10,@CF00789                                        0305
         ALR   @12,@10                                             0305
         STH   @12,I(,WAPTR)                                       0305
*        RETR=RETSAV;                   /* RELOAD RETURN ADDRESS     */
         L     RETR,RETSAV(,WAPTR)                                 0306
*        GEN  (BR R14);                 /* RETURN TO CALLER          */
         BR R14
*        GEN  (EJECT);                                             0308
         EJECT
* /*******************************************************************/
*/* S20CMLOC: THIS SUBROUTINE  LOCATES THE MSG BY DETERMINING WHICH  */
*/* GROUP ITS IN (100-199,200-299,ETC) IT THEN CALL THAT MODULE PASS-*/
*/* ING IT THE 'MSG#' IN '$BUFFER' (WITHIN RCA).                     */
*/********************************************************************/
*        GEN   (SPACE);                                            0309
         SPACE
*S20CMLOC:                                                         0310
*        RETSAV=RETR;                   /* SAVE RETURN ADDR          */
S20CMLOC ST    RETR,RETSAV(,WAPTR)                                 0310
*        MSGNUM=ZERO;                   /* ZERO OUT WORK AREA        */
         L     @12,ZERO                                            0311
         ST    @12,MSGNUM(,WAPTR)                                  0311
*        MSGNUM(3:4)=MSG#;              /* SET UP MSG NO. FOR CALL   */
         LH    @12,MSG#(,WAPTR)                                    0312
         N     @12,@CF00789                                        0312
         STCM  @12,3,MSGNUM+2(WAPTR)                               0312
*        IF MSG# >99 & MSG# <400 THEN   /* IF MSG# BETWEEN 99-400    */
         C     @12,@CF00777                                        0313
         BNH   @RF00313                                            0313
         C     @12,@CF00778                                        0313
         BL    @RT00313                                            0313
*          GOTO CALL123;                /* GO CALL ISTEC123          */
*        IF MSG# >399 & MSG# <700 THEN  /* IF MSG# BETWEEN 399-700   */
@RF00313 CLC   MSG#(2,WAPTR),@CH00780                              0315
         BNH   @RF00315                                            0315
         CLC   MSG#(2,WAPTR),@CH00781                              0315
         BL    @RT00315                                            0315
*          GOTO CALL456;                /* GO CALL ISTEC456          */
*        GEN(SPACE);                                               0317
@RF00315 DS    0H                                                  0317
         SPACE
*        CALL  ISTEC789;                /* GO FIND MSG (700-999)     */
         L     @15,@CV00137                                        0318
         BALR  @14,@15                                             0318
*        GOTO CALLRET;                                             0319
         B     CALLRET                                             0319
*CALL456:                                                          0320
*        CALL  ISTEC456;                /* GO FIND MSG (400-699)     */
CALL456  L     @15,@CV00136                                        0320
         BALR  @14,@15                                             0320
*        GOTO CALLRET;                  /* RETURN TO TCEC            */
         B     CALLRET                                             0321
*CALL123:                                                          0322
*        CALL  ISTEC123;                /* GO FIND MSG (100-399)     */
CALL123  L     @15,@CV00135                                        0322
         BALR  @14,@15                                             0322
*CALLRET:                                                          0323
*        Y=$COUTCT(4:4);                /* PUT MSG LENGTH IN Y       */
CALLRET  MVC   Y(1,WAPTR),$COUTCT+3(WAPTR)                         0323
*        MSGPTR=MSGNUM;                 /* GET PTR TO MSG TXT        */
         L     MSGPTR,MSGNUM(,WAPTR)                               0324
*        RETR=RETSAV;                   /* RESTORE RETURN ADDR       */
         L     RETR,RETSAV(,WAPTR)                                 0325
*        GEN   (BR RETR);               /* RETURN TO CALLER          */
         BR RETR
*        GEN   (EJECT);                                            0327
         EJECT
*                                                                  0328
*         DO; /* ATDSPLY   */                                      0328
*                                                                  0329
*         END;/* ATDSPLY */                                        0329
*  END;                                                            0330
         B     @EL00001                                            0330
@DATA    DS    0H
@CH00780 DC    H'399'
@CH00781 DC    H'700'
@SM00790 MVC   $WORK-1(0,@12),CEOUTMSG(@08)
@SM00794 MVC   $WORK-1(0,@12),MSGDAT(MSGPTR)
@SM00799 MVC   $WORK(0,@12),@TS00001
@SM00803 MVC   $WORK+1(0,WAPTR),@TS00001
@SM00805 MVC   $WORK(0,WAPTR),ITA
@SM00807 MVC   $WORK(0,WAPTR),DOS2WAY
@SM00809 MVC   $WORK(0,WAPTR),DOS1WAY
@SM00811 MVC   $WORK(0,WAPTR),TWOWAY
@SM00813 MVC   $WORK(0,WAPTR),ONEWAY
         DS    0F
         DS    0F
@CF00103 DC    F'1'
@CH00103 EQU   @CF00103+2
@CF00040 DC    F'8'
@CF00729 DC    F'61'
@CF00739 DC    F'81'
@CF00777 DC    F'99'
@CF00778 DC    F'400'
@CF00789 DC    XL4'0000FFFF'
@CA00028 DC    A(ISTSC020)
@CV00132 DC    V(ISTCC011)
@CV00135 DC    V(ISTEC123)
@CV00136 DC    V(ISTEC456)
@CV00137 DC    V(ISTEC789)
@CV00745 DC    V(I00C1002)
         DS    0D
X        DC    F'0'
MB1      DC    F'0'
MB2      DC    F'0'
ZERO     DC    XL4'0'
N        DC    AL2(100)
@TS00001 DS    CL256
@CB00770 DC    X'0000'
ONEWAY   DC    CL8'ITA100I '
TWOWAY   DC    CL8'ITA101D '
ITA      DC    CL3'ITA'
DOS1WAY  DC    CL6'F100I '
DOS2WAY  DC    CL6'F101D '
DOSPREFX DC    CL1'F'
DOS87    DC    X'87'
BLANK    DC    CL1' '
RC08     DC    X'08'
DELMTR   DC    CL1'%'
LETTERI  DC    CL1'I'
LETTERD  DC    CL1'D'
SW037    DS    BL1
         ORG   SW037
CECOMSW  DS    BL1
SPARESW  EQU   SW037+0
         ORG   SW037+1
MSKTBL   DC    XL1'80'
         DC    XL1'40'
         DC    XL1'20'
         DC    XL1'10'
         DC    XL1'08'
         DC    XL1'04'
         DC    XL1'02'
         DC    XL1'01'
         DS    8XL1
         DS    CL1
PATCH    DC    40F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
CECMAP   EQU   @04
MSGPTR   EQU   @05
R14      EQU   @14
R15      EQU   @15
R1       EQU   @01
R4       EQU   @04
RCAPTR   EQU   @03
R13      EQU   @13
RETR     EQU   @14
WAPTR    EQU   @02
TCECMAP  EQU   0
$TCMSG#  EQU   TCECMAP
$TCINCT  EQU   TCECMAP+4
$TCFLG   EQU   TCECMAP+8
$TCSUBDA EQU   $TCFLG
$TC2WAY  EQU   $TCFLG
$TCNOID  EQU   $TCFLG
$TCLOCM  EQU   $TCFLG
$TCWTO   EQU   $TCFLG
$TCKABND EQU   $TCFLG
$TCKIDON EQU   $TCFLG
$TCMASK  EQU   TCECMAP+9
CEOUTMSG EQU   0
BACKSAVE EQU   0
MSGDAT   EQU   0
$RCAAREA EQU   0
$POINTER EQU   $RCAAREA+100
$TLTECB2 EQU   $POINTER+28
$TRTBLA  EQU   $POINTER+124
$CONSTNT EQU   $RCAAREA+244
$RCAFLG  EQU   $RCAAREA+604
TOLTEPWA EQU   0
$SCTTBLE EQU   TOLTEPWA
$TESTOPT EQU   $SCTTBLE+2
$ERROPT  EQU   $SCTTBLE+3
$DRIVER  EQU   $SCTTBLE+6
$PDEVFLG EQU   $SCTTBLE+10
$CDSFLGS EQU   $SCTTBLE+11
$CDS8T19 EQU   $SCTTBLE+20
$EXECFLG EQU   $SCTTBLE+33
$OLTFLGS EQU   $SCTTBLE+36
$OLTFLG2 EQU   $SCTTBLE+37
$TOTFLG1 EQU   $SCTTBLE+38
$ROUTMSK EQU   $SCTTBLE+40
#MSGIDAC EQU   $SCTTBLE+78
$CDA     EQU   TOLTEPWA+100
$RCA     EQU   $CDA+44
$OLTPTR  EQU   $CDA+52
$HIMOREC EQU   $CDA+60
$COMMFLG EQU   TOLTEPWA+224
$FLAG1   EQU   $COMMFLG
$CNSLFG  EQU   $FLAG1
$FLAG2   EQU   $COMMFLG+1
$FLAG3   EQU   $COMMFLG+2
$FLAG4   EQU   $COMMFLG+3
$FLAG5   EQU   $COMMFLG+4
$EOJ     EQU   $FLAG5
$CANCEL  EQU   $EOJ
$FLAG6   EQU   $COMMFLG+5
$ABNDBIT EQU   $FLAG6
$ABTERM  EQU   $ABNDBIT
$FLAG7   EQU   $COMMFLG+6
$FLAG8   EQU   $COMMFLG+7
$TCECM   EQU   $FLAG8
$FLAG9   EQU   $COMMFLG+8
$MULLNSW EQU   $FLAG9
$LSTLNSW EQU   $FLAG9
$FLAG10  EQU   $COMMFLG+9
$FLAG11  EQU   $COMMFLG+10
$FLAG12  EQU   $COMMFLG+11
$POSTFLG EQU   $FLAG12
$FLAG13  EQU   $COMMFLG+12
$DEVTBLE EQU   TOLTEPWA+240
$DEVCDS  EQU   $DEVTBLE
$DEVUNAD EQU   $DEVCDS
@NM00044 EQU   $DEVUNAD+2
$DEVFEAT EQU   $DEVCDS+4
$DEVCDSF EQU   $DEVCDS+9
$DEVSDCF EQU   $DEVCDS+10
$$SYMNME EQU   $DEVCDS+12
$DEVFLG1 EQU   $DEVTBLE+20
$EVNCPLT EQU   $DEVFLG1
$ATTNEXP EQU   $DEVFLG1
$INTOCC  EQU   $DEVFLG1
$DEVFLG2 EQU   $DEVTBLE+21
$DEVTECB EQU   $DEVTBLE+22
$OPIS    EQU   $DEVTECB
$OPND    EQU   $DEVTECB+2
$DEVFLG3 EQU   $DEVTBLE+27
$SIOFLG  EQU   $DEVFLG3
$IFTOUT  EQU   $DEVTBLE+36
$DEVSESP EQU   $IFTOUT
$SSCPDAF EQU   $IFTOUT+6
$LDNCBPT EQU   $DEVTBLE+48
$RNINFO  EQU   $DEVTBLE+56
$DEVFLG5 EQU   $RNINFO+8
$DEVFLG4 EQU   $DEVTBLE+65
$SLTBL   EQU   TOLTEPWA+1468
$RUNTEST EQU   $SLTBL+13
$TESTFLG EQU   $SLTBL+21
$SECLST  EQU   $SLTBL+22
$BUFFER  EQU   TOLTEPWA+1976
$INBUFR  EQU   TOLTEPWA+2104
$WORK    EQU   TOLTEPWA+2376
#EXITA   EQU   TOLTEPWA+2632
$CCOMDAT EQU   TOLTEPWA+2644
$COUTAD  EQU   $CCOMDAT
$COUTCT  EQU   $CCOMDAT+4
$CINADR  EQU   $CCOMDAT+8
$CINCT   EQU   $CCOMDAT+12
$CFLGS   EQU   $CCOMDAT+16
$C2WAY   EQU   $CFLGS
$24FEMSG EQU   TOLTEPWA+2681
$24CATMG EQU   $24FEMSG+11
@NM00053 EQU   TOLTEPWA+2776
$OUNTPTR EQU   @NM00053+4
$NSPTR   EQU   $OUNTPTR
$NSCNT   EQU   @NM00053+10
$ENXX    EQU   @NM00053+15
$IMITX   EQU   $ENXX
SVESC033 EQU   TOLTEPWA+3160
SVECC013 EQU   TOLTEPWA+3232
SVESC120 EQU   TOLTEPWA+3304
SVEIC003 EQU   TOLTEPWA+3592
SVESC020 EQU   TOLTEPWA+3664
SVESC022 EQU   TOLTEPWA+3736
SVECC011 EQU   TOLTEPWA+4024
#EXIT    EQU   0
CECOMMAP EQU   0
$CEOUTAD EQU   CECOMMAP+4
$CEOUTCT EQU   CECOMMAP+8
$CEINADR EQU   CECOMMAP+12
$CEINCT  EQU   CECOMMAP+16
$TRTBL   EQU   0
@NM00001 EQU   $BUFFER
MSGNUM   EQU   @NM00001
RETSAV   EQU   @NM00001+4
PTRSAV   EQU   @NM00001+8
CNTSAV   EQU   @NM00001+12
MMSG#    EQU   @NM00001+16
MSG#     EQU   @NM00001+20
I        EQU   @NM00001+22
SUBINDX  EQU   @NM00001+24
MSKBIT   EQU   @NM00001+26
Y        EQU   @NM00001+27
MYPARM   EQU   @NM00001+28
SVECC012 EQU   SVESC022
SVEIC00A EQU   SVEIC003
SVEIC004 EQU   SVEIC003
SVEIC005 EQU   SVEIC003
SVESC02A EQU   SVESC022
SVESC02B EQU   SVESC022
SVESC02D EQU   SVESC022
SVESC02E EQU   SVESC022
SVESC02F EQU   SVECC013
SVESC024 EQU   SVESC022
SVESC027 EQU   SVESC022
SVESC029 EQU   SVESC033
SVESC031 EQU   SVECC013
SVESC032 EQU   SVECC011
SVETC037 EQU   SVEIC003
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00004 EQU   MYPARM+8
@NM00003 EQU   MYPARM+4
@NM00002 EQU   MYPARM
$CECFLAG EQU   CECOMMAP+20
$CECIDNT EQU   CECOMMAP+2
$CECLEVL EQU   CECOMMAP+1
$CECTRMG EQU   CECOMMAP
SVECC010 EQU   TOLTEPWA+3952
SVETC035 EQU   TOLTEPWA+3880
SVESC030 EQU   TOLTEPWA+3808
SVEIC002 EQU   TOLTEPWA+3520
SVECC014 EQU   TOLTEPWA+3376
SVESC025 EQU   TOLTEPWA+3088
@NM00055 EQU   TOLTEPWA+2980
$RPLERR  EQU   TOLTEPWA+2977
@NM00054 EQU   TOLTEPWA+2976
$R13PR3  EQU   TOLTEPWA+2972
$CEINT2  EQU   TOLTEPWA+2968
$CEINT1  EQU   TOLTEPWA+2964
$MSGGET  EQU   TOLTEPWA+2960
$ACQLIST EQU   TOLTEPWA+2956
$R4SAVE1 EQU   TOLTEPWA+2952
$CLSISS  EQU   TOLTEPWA+2950
$CLSCNT  EQU   TOLTEPWA+2948
$CUTABLE EQU   TOLTEPWA+2868
$BUFSZ2  EQU   TOLTEPWA+2864
$RESID2  EQU   TOLTEPWA+2860
$OLTCCW2 EQU   TOLTEPWA+2856
$ENDBFR2 EQU   TOLTEPWA+2852
$1STBFR2 EQU   TOLTEPWA+2848
$TECB2   EQU   TOLTEPWA+2844
$BUFSZ1  EQU   TOLTEPWA+2840
$RESID1  EQU   TOLTEPWA+2836
$OLTCCW1 EQU   TOLTEPWA+2832
$ENDBFR1 EQU   TOLTEPWA+2828
$1STBFR1 EQU   TOLTEPWA+2824
$TECB1   EQU   TOLTEPWA+2820
$WAITIME EQU   TOLTEPWA+2816
$TRTN#   EQU   TOLTEPWA+2815
$WIODEV  EQU   TOLTEPWA+2814
$RQSTSZE EQU   TOLTEPWA+2812
$RQSTPTR EQU   TOLTEPWA+2808
$R4SAVE  EQU   TOLTEPWA+2804
$PARTADR EQU   TOLTEPWA+2800
$TBSDATA EQU   TOLTEPWA+2796
$CTWIDTH EQU   TOLTEPWA+2795
$CTLINE  EQU   TOLTEPWA+2794
$APWIDTH EQU   TOLTEPWA+2793
$APLINE  EQU   TOLTEPWA+2792
$INDEX   EQU   $IMITX
$UMXX    EQU   @NM00053+14
$NSXX    EQU   @NM00053+12
$ATACNT  EQU   $NSCNT
$CTR     EQU   @NM00053+8
$ATAPTR  EQU   $NSPTR
$DDRPTR  EQU   @NM00053
$DTORESP EQU   TOLTEPWA+2712
$APNAME  EQU   TOLTEPWA+2704
$24SYMNE EQU   $24CATMG+4
$24DEVAD EQU   $24CATMG
$24RTN#  EQU   $24FEMSG+8
$ESECTID EQU   $24FEMSG
$24FLGS  EQU   TOLTEPWA+2680
$24SAVE2 EQU   TOLTEPWA+2676
$24SAVE1 EQU   TOLTEPWA+2672
$24UNADR EQU   TOLTEPWA+2668
$24SAV13 EQU   TOLTEPWA+2664
$24RETCD EQU   TOLTEPWA+2663
$MACID   EQU   TOLTEPWA+2661
$CSPARE  EQU   $CFLGS
ROOTLOC  EQU   TOLTEPWA+2640
$RETREG  EQU   TOLTEPWA+2636
$EXTA    EQU   TOLTEPWA+2320
$PASSONA EQU   TOLTEPWA+2264
$TRMINPT EQU   TOLTEPWA+2184
$TLTRPL3 EQU   TOLTEPWA+1856
$TLTRPL2 EQU   TOLTEPWA+1736
$TLTRPL1 EQU   TOLTEPWA+1616
@NM00052 EQU   $SLTBL+135
$HIGHRTN EQU   $SLTBL+134
$PRIMADR EQU   $SLTBL+130
$CTSTPT  EQU   $SLTBL+128
$TSTCNT  EQU   $SLTBL+126
$SECFLGS EQU   $SECLST+3
$SECTION EQU   $SECLST
$SECACT  EQU   $TESTFLG
$CANTRUN EQU   $TESTFLG
$FINAL   EQU   $TESTFLG
$TESTSUF EQU   $RUNTEST+5
$TESTNUM EQU   $RUNTEST+1
$LETPRF  EQU   $RUNTEST
$SYMBOLC EQU   $SLTBL+5
$FAMILY  EQU   $SLTBL
$CDEVPT  EQU   TOLTEPWA+1466
$DEVCNTS EQU   TOLTEPWA+1464
$FEEDBCK EQU   $DEVTBLE+66
$WTISUED EQU   $DEVFLG4
$EXIOISD EQU   $DEVFLG4
$REMWRIT EQU   $DEVFLG4
$REMDONE EQU   $DEVFLG4
$2NDUSED EQU   $DEVFLG4
$1STUSED EQU   $DEVFLG4
$IGLXIFB EQU   $DEVFLG4
$EXIOLV3 EQU   $DEVFLG4
@NM00051 EQU   $DEVFLG5
$DVBASIC EQU   $DEVFLG5
$ASCII   EQU   $DEVFLG5
$DEVLU   EQU   $DEVFLG5
$OPNDFAL EQU   $DEVFLG5
$ACQNCB  EQU   $DEVFLG5
$REMOTE  EQU   $DEVFLG5
$ENDNODE EQU   $DEVFLG5
$LINENME EQU   $RNINFO
$CID     EQU   $DEVTBLE+52
$DVCOL   EQU   $LDNCBPT+2
$DVROW   EQU   $LDNCBPT
$NCSPLP  EQU   $DEVTBLE+44
$DVLN    EQU   $SSCPDAF
$DAF     EQU   $DEVSESP+4
$VARYPAB EQU   $DEVSESP
$SYSMN   EQU   $DEVTBLE+28
@NM00050 EQU   $DEVFLG3
$CLRSNT  EQU   $DEVFLG3
$OLTERR  EQU   $DEVFLG3
$SRTEST  EQU   $DEVFLG3
$DVSNDOK EQU   $SIOFLG
$POLLREQ EQU   $DEVFLG3
$ACQRED  EQU   $DEVFLG3
$NOTDEV  EQU   $DEVFLG3
$DVINCT  EQU   $DEVTBLE+26
$DVBRKST EQU   $OPND+1
$DVBRKSN EQU   $OPND
$DVSEQNO EQU   $OPIS
$CEINTRP EQU   $DEVFLG2
$TESTMDE EQU   $DEVFLG2
$DEVALOC EQU   $DEVFLG2
$ALLDATA EQU   $DEVFLG2
$ENDCNTL EQU   $DEVFLG2
$CTLDEV  EQU   $DEVFLG2
$NOCDS   EQU   $DEVFLG2
$DATAIN  EQU   $DEVFLG2
$PRIMARY EQU   $DEVFLG1
$DVCTBYT EQU   $INTOCC
$DEVACT  EQU   $DEVFLG1
$DVLGMDE EQU   $ATTNEXP
$DVSPRM  EQU   $EVNCPLT
$GRABBED EQU   $DEVFLG1
$CATASTR EQU   $DEVFLG1
$LETGO   EQU   $DEVFLG1
$CURELEM EQU   $$SYMNME+4
$MSGOTSD EQU   $$SYMNME
$EXTDEV  EQU   $DEVCDS+11
@NM00049 EQU   $DEVSDCF
$NOTPRIM EQU   $DEVSDCF
@NM00048 EQU   $DEVCDSF
@NM00047 EQU   $DEVCDSF
@NM00046 EQU   $DEVCDSF
$CDSNAME EQU   $DEVCDSF
$EXTRN   EQU   $DEVCDSF
$CEVOLUM EQU   $DEVCDSF
$SHARD   EQU   $DEVCDSF
$DEVFPM  EQU   $DEVCDSF
$DEVCNT  EQU   $DEVCDS+8
$DEVTYPE EQU   $DEVFEAT+3
$DEVCLAS EQU   $DEVFEAT+2
$DEVFRRS EQU   $DEVFEAT+1
$DEVMOD  EQU   $DEVFEAT
$DEVRDGT EQU   @NM00044+1
$DEVCTLU EQU   @NM00044+1
$DEVCHAN EQU   @NM00044
@NM00045 EQU   @NM00044
$CTINDX  EQU   $DEVUNAD
$FLAG16  EQU   $COMMFLG+15
$FLAG15  EQU   $COMMFLG+14
$FLAG14  EQU   $COMMFLG+13
$TEP2ND  EQU   $FLAG13
$TEP1ST  EQU   $FLAG13
$CATMSG  EQU   $FLAG13
$PRMPTSW EQU   $FLAG13
$DEVENT  EQU   $FLAG13
$OLTMACC EQU   $FLAG13
$LGON    EQU   $FLAG13
$CTLOGON EQU   $FLAG13
@NM00043 EQU   $FLAG12
$VARYINP EQU   $FLAG12
$ENDTEST EQU   $FLAG12
$VRYHRD  EQU   $FLAG12
$VRYSFT  EQU   $FLAG12
$OPTMSG  EQU   $FLAG12
$FEORCAT EQU   $FLAG11
@NM00042 EQU   $FLAG11
@NM00041 EQU   $FLAG10
$INBND   EQU   $FLAG10
$WAITFLG EQU   $FLAG10
$DPRINT  EQU   $FLAG10
$HOLD    EQU   $FLAG9
$NOTRRCH EQU   $FLAG9
@NM00040 EQU   $FLAG9
$COPY    EQU   $FLAG9
$REMSW   EQU   $FLAG9
$IGRES   EQU   $FLAG9
$VS2     EQU   $FLAG8
$VS1     EQU   $FLAG8
$EDOS    EQU   $FLAG8
@NM00039 EQU   $FLAG8
$TWOWAY  EQU   $FLAG8
@NM00038 EQU   $FLAG8
$RCVMSG  EQU   $FLAG7
$RCVRFLG EQU   $FLAG7
$SNDRFLG EQU   $FLAG7
$LDOIS   EQU   $FLAG7
$DCONTCT EQU   $FLAG7
$EXIOWAT EQU   $FLAG7
$2NDDATA EQU   $FLAG7
$1STDATA EQU   $FLAG7
$CIREQ   EQU   $FLAG6
$FSTMCIS EQU   $FLAG6
$DISCREQ EQU   $FLAG6
$DISCISS EQU   $FLAG6
$CHANGE  EQU   $FLAG6
$CTERROR EQU   $FLAG6
$RECAL11 EQU   $FLAG6
@NM00037 EQU   $FLAG5
$PROGCK  EQU   $CANCEL
$PRINTAP EQU   $FLAG5
@NM00036 EQU   $FLAG5
$MSG922  EQU   $FLAG5
$CT924   EQU   $FLAG5
$FSTCAT  EQU   $FLAG5
$FSTFE   EQU   $FLAG5
$ACTOPND EQU   $FLAG4
$ACQCUTT EQU   $FLAG4
$CLSSACT EQU   $FLAG4
$BACKINT EQU   $FLAG4
$DMSGSW  EQU   $FLAG4
$TSTDEVP EQU   $FLAG4
$APRQPER EQU   $FLAG4
$OPCOM   EQU   $FLAG4
$NEWAP   EQU   $FLAG3
$ALTPRTR EQU   $FLAG3
$OPTERR  EQU   $FLAG3
$PRTONLY EQU   $FLAG3
$REQSTOR EQU   $FLAG3
$LOGOFFE EQU   $FLAG3
$TSTERR  EQU   $FLAG3
$DEVERR  EQU   $FLAG3
$PARTIAL EQU   $FLAG2
$NRMTERM EQU   $FLAG2
$VALDTST EQU   $FLAG2
$VALDDEV EQU   $FLAG2
$DBLSLSH EQU   $FLAG2
$NDR     EQU   $FLAG2
@NM00035 EQU   $FLAG2
$OLTACT  EQU   $FLAG1
$NORELDV EQU   $FLAG1
@NM00034 EQU   $FLAG1
$OPTCHNG EQU   $FLAG1
$DEVCHNG EQU   $FLAG1
$TESTCNG EQU   $FLAG1
$TEP3RD  EQU   $FLAG1
@NM00033 EQU   $CDA+120
$CUCNT   EQU   $CDA+118
@NM00032 EQU   $CDA+117
$PRTFORM EQU   $CDA+116
$OPISCNT EQU   $CDA+114
$OPNDCNT EQU   $CDA+112
$GETMSZE EQU   $CDA+110
$GRCNTS  EQU   $CDA+108
$CTLCNT  EQU   $CDA+106
$ACTLVL  EQU   $CDA+105
$PRNTLVL EQU   $CDA+104
$ERRCNTA EQU   $CDA+102
$TLCNT   EQU   $CDA+100
$TIMEALW EQU   $CDA+96
$PTRAREA EQU   $CDA+92
$GETMPTR EQU   $CDA+88
$R13PTRT EQU   $CDA+84
$R13PTR  EQU   $CDA+80
$TEPEND  EQU   $CDA+76
$PLINKDL EQU   $CDA+72
$TEPBEGN EQU   $CDA+68
$FRELPTR EQU   $CDA+64
$HIGHADR EQU   $HIMOREC
$LOMOREC EQU   $CDA+56
$LOWADDR EQU   $OLTPTR
$ENDCOMM EQU   $CDA+48
$COMMON  EQU   $RCA
$SLASHAD EQU   $CDA+32
$PASSON  EQU   $CDA+28
$TOLBRTB EQU   $CDA+24
$SCTPTR8 EQU   $CDA+20
$SCTPTR  EQU   $CDA+16
$TBWDPTR EQU   $CDA+12
$TFWDPTR EQU   $CDA+8
@NM00031 EQU   $CDA
@NM00030 EQU   $SCTTBLE+98
$SCTLWTC EQU   $SCTTBLE+96
$SCTLWTA EQU   $SCTTBLE+92
#EXT     EQU   $SCTTBLE+88
#PASS    EQU   $SCTTBLE+84
#TABLE   EQU   $SCTTBLE+80
@NM00029 EQU   $SCTTBLE+71
$RETMASK EQU   $SCTTBLE+70
$R249255 EQU   $ROUTMSK+29
$R241248 EQU   $ROUTMSK+28
$R233240 EQU   $ROUTMSK+27
$R225232 EQU   $ROUTMSK+26
$R217224 EQU   $ROUTMSK+25
$R209216 EQU   $ROUTMSK+24
$R201208 EQU   $ROUTMSK+23
$R193200 EQU   $ROUTMSK+22
$R185192 EQU   $ROUTMSK+21
$R177184 EQU   $ROUTMSK+20
$R169176 EQU   $ROUTMSK+19
$R161168 EQU   $ROUTMSK+18
$R153160 EQU   $ROUTMSK+17
$R145152 EQU   $ROUTMSK+16
$R137144 EQU   $ROUTMSK+15
$R129136 EQU   $ROUTMSK+14
$R121128 EQU   $ROUTMSK+13
$R113120 EQU   $ROUTMSK+12
$R105112 EQU   $ROUTMSK+11
$R097104 EQU   $ROUTMSK+10
$R089096 EQU   $ROUTMSK+9
$R081088 EQU   $ROUTMSK+8
$R073080 EQU   $ROUTMSK+7
$R065072 EQU   $ROUTMSK+6
$R057064 EQU   $ROUTMSK+5
$R049056 EQU   $ROUTMSK+4
$R041048 EQU   $ROUTMSK+3
$R033040 EQU   $ROUTMSK+2
$R025032 EQU   $ROUTMSK+1
$R017024 EQU   $ROUTMSK
$TOTFLG2 EQU   $SCTTBLE+39
@NM00028 EQU   $TOTFLG1
@NM00027 EQU   $TOTFLG1
@NM00026 EQU   $TOTFLG1
$CURELOD EQU   $TOTFLG1
$CTEQTT  EQU   $TOTFLG1
@NM00025 EQU   $TOTFLG1
@NM00024 EQU   $TOTFLG1
$LINESHR EQU   $TOTFLG1
@NM00023 EQU   $OLTFLG2
@NM00022 EQU   $OLTFLG2
@NM00021 EQU   $OLTFLG2
@NM00020 EQU   $OLTFLG2
@NM00019 EQU   $OLTFLG2
@NM00018 EQU   $OLTFLG2
@NM00017 EQU   $OLTFLG2
$TALK    EQU   $OLTFLG2
$DYCOM   EQU   $OLTFLGS
@NM00016 EQU   $OLTFLGS
$TRACE   EQU   $OLTFLGS
$RETCODE EQU   $OLTFLGS
$CONTCB  EQU   $OLTFLGS
$RETAIN  EQU   $OLTFLGS
$CLEANRT EQU   $OLTFLGS
$MANINTV EQU   $OLTFLGS
$OLTSIZE EQU   $SCTTBLE+34
$QSCTMOD EQU   $EXECFLG
$CTRLMOD EQU   $EXECFLG
$CLEANUP EQU   $EXECFLG
$LSTPDEV EQU   $EXECFLG
$ERRCNT  EQU   $EXECFLG
$RTNSLCT EQU   $EXECFLG
$MULTDEV EQU   $EXECFLG
@NM00015 EQU   $EXECFLG
$RMSKCNT EQU   $SCTTBLE+32
$SYNAME  EQU   $CDS8T19+4
$EXTSIG  EQU   $CDS8T19+3
$CDFLGS  EQU   $CDS8T19+1
$CDSCNT  EQU   $CDS8T19
$PDEVDSC EQU   $SCTTBLE+16
$PDEVADR EQU   $SCTTBLE+12
$COMMCN  EQU   $CDSFLGS
$CUSTSYM EQU   $CDSFLGS
$TWOCHSW EQU   $CDSFLGS
$SYMNAME EQU   $CDSFLGS
$EXTINTC EQU   $CDSFLGS
$CEVOL   EQU   $CDSFLGS
$SHARED  EQU   $CDSFLGS
$FPM     EQU   $CDSFLGS
$LASTSUB EQU   $PDEVFLG
@NM00014 EQU   $PDEVFLG
@NM00013 EQU   $PDEVFLG
@NM00012 EQU   $PDEVFLG
$LASTDEV EQU   $PDEVFLG
@NM00011 EQU   $PDEVFLG
$EXFILPT EQU   $PDEVFLG
$FPMOLD  EQU   $PDEVFLG
$TSSSYM  EQU   $SCTTBLE+8
$SCTLEVL EQU   $SCTTBLE+7
$RT0916  EQU   $SCTTBLE+5
$RT0108  EQU   $SCTTBLE+4
$LOOPTST EQU   $ERROPT
$LOOPERR EQU   $ERROPT
$NERRPRT EQU   $ERROPT
$NOCNTRL EQU   $ERROPT
$ALTPRNT EQU   $ERROPT
$CATERR  EQU   $ERROPT
$ASTERIK EQU   $ERROPT
$TESTERR EQU   $ERROPT
$FSTCOMM EQU   $TESTOPT
$INDEFLP EQU   $TESTOPT
$NOPRT   EQU   $TESTOPT
$PARAPRT EQU   $TESTOPT
@NM00010 EQU   $TESTOPT
$ERRLPCT EQU   $SCTTBLE
$TLTEND  EQU   $RCAAREA+945
$CNSLID  EQU   $RCAAREA+936
$EXITSAV EQU   $RCAAREA+864
$TRASCII EQU   $RCAAREA+608
@NM00009 EQU   $RCAAREA+605
$VTAMEND EQU   $RCAFLG
$TPPOSTD EQU   $RCAFLG
$NEWCT   EQU   $RCAFLG
$ABNDALL EQU   $RCAFLG
$CUTESTB EQU   $RCAFLG
$CONSOLE EQU   $RCAFLG
$TPLOGON EQU   $RCAFLG
$UPDATE  EQU   $RCAFLG
$DEVAREA EQU   $RCAAREA+600
$CTDVAR  EQU   $RCAAREA+596
$BUFFS   EQU   $RCAAREA+464
$TLTNIB  EQU   $CONSTNT+140
$TLTPRPL EQU   $CONSTNT+20
@NM00008 EQU   $CONSTNT+4
@NM00007 EQU   $CONSTNT+2
$USECNT  EQU   $CONSTNT
$CURRTWA EQU   $POINTER+140
$CTNAME  EQU   $POINTER+132
$CTARGX  EQU   $POINTER+128
$COMINT  EQU   $POINTER+120
$QUEHNDL EQU   $POINTER+116
@NM00006 EQU   $POINTER+36
$RTNPTR  EQU   $POINTER+32
$TLTECB1 EQU   $POINTER+24
$CLEANP  EQU   $POINTER+20
$ABEND   EQU   $POINTER+16
$LSTAREA EQU   $POINTER+12
$FSTAREA EQU   $POINTER+8
$CVTSAVE EQU   $POINTER+4
$TOLTEP  EQU   $POINTER
$TLTACB  EQU   $RCAAREA
@NM00005 EQU   $TCFLG
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00070 EQU   S20CEC2
@RF00070 EQU   S20CEC1
@RT00077 EQU   S20CRC08
@RT00079 EQU   S20CRC08
@RT00088 EQU   S20CRC08
@RT00102 EQU   S20CEC2A
@RT00111 EQU   S20CEC2A
@RT00122 EQU   S20CEC2B
@RF00136 EQU   S20CEC2D
@RF00168 EQU   S20CEXIT
@RT00208 EQU   S20CEC3C
@RT00214 EQU   S20CEC3A
@RF00214 EQU   S20CEC3H
@RT00239 EQU   S20CEC3D
@RT00248 EQU   S20CEC3H
@RT00250 EQU   S20CEC3B
@RT00257 EQU   S20C03
@RT00261 EQU   S20C02
@RC00263 EQU   S20C03
@RT00273 EQU   S20C02A
@RC00285 EQU   S20C03
@RC00275 EQU   S20C03
@RT00313 EQU   CALL123
@RT00315 EQU   CALL456
@RC00276 EQU   @RC00275
@ENDDATA EQU   *
         END   ISTSC020,(C'PLS1520',0702,78337)
