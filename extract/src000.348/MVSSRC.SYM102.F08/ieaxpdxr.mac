IEAXPDXR CSECT
***********************************************************************
*                                                                     *
* MODULE NAME - IEAXPDXR                                              *
*                                                                     *
* TITLE - SIMULATOR INTERFACE FOR EXTENDED PRECISION DIVIDE (DXR)     *
*                                                                     *
* FUNCTION/OPERATION - IEAXPDXR HANDLES OPERATION INTERRUPTS. IF THE  *
*        OP-CODE INTERRUPT OCCURRED AS A RESULT OF AN EXTENDED        *
*        PRECISION DIVIDE (DXR), CONTROL IS PASSED TO THE SIMULATOR.  *
*        THE PSW IS MODIFIED APPROPRIATELY AFTER SIMULATION.          *
*                                                                     *
* STATUS - CHANGE LEVEL 0                                             *
*                                                                     *
* ENTRY POINT - IEAXPDXR                                              *
*                                                                     *
* INPUT - REGISTER 1 CONTAINS THE POINTER TO A PARAMETER LIST WHICH   *
*        CONTAINS A PTR TO THE PIE, A PTR TO AN AREA WITH REGS AT     *
*        INTERRUPT TIME (0-15), A PTR TO A WORK AREA, A PTR TO A BYTE *
*        WHICH IS NON-ZERO IF THE LAST BIT OF DXR IS NOT TO BE        *
*        GUARANTEED.                                                  *
*                                                                     *
* TABLES/WORK AREAS -                                                 *
*        1 - RC - REG  CODE EXTRACTED FROM THE INSTRUCTION TO BE      *
*        SIMULATED                                                    *
*                                                                     *
* EXITS - RETURN IS ALWAYS TO THE CALLING ROUTINE VIA REG 14. A RETURN*
*        CODE IS PLACED IN REG 15.                                    *
*        CODE    MEANING                                              *
*        X'00'   OPERATION SUCCESSFUL AND NO EXCEPTIONAL CONDITIONS   *
*                OCCURRED.                                            *
*        X'FF'   1 - AN EXTENDED PRECISION DIVIDE INSTRUCTION WAS NOT *
*                    ENCOUNTERED                                      *
*                2 - OVERFLOW, UNDERFLOW, OR FLOATING POINT DIVIDE    *
*                    ERROR OCCURRED IN SIMULATING.                    *
*                3 - THIRD BYTE OF DXR NOT X'00' (SPECIFICATION)      *
*                                                                     *
* EXTERNAL ROUTINES - THE SIMULATOR KERNEL IEAXKDXR                   *
*                                                                     *
* ATTRIBUTES - THIS MODULE IS REENTRANT.                              *
*                                                                     *
***********************************************************************
         EJECT
* REGISTER DEFINITIONS
PARM     EQU   1                   PARAMETER REG
R2       EQU   2                   UTILITY REG
R3       EQU   3                   UTILITY REG
R4       EQU   4                   UTILITY REG
INST     EQU   5                   PTR TO INSTRUCTION
PIEAD    EQU   6                   PTR TO PIE
WRK      EQU   7
BASE     EQU   8                   BASE REG
LINK     EQU   9                   BRANCHING REG
CODE1    EQU   15                  RETURN CODE REG
         SPACE 3
* MISCELLANEOUS CODES
DIVOP    EQU   X'2D'               HALF OF EXTENDED DIVIDE OPCODE
LOWBY    EQU   X'0F'               SETS OFF HIGH 4 BITS OF A BYTE
ON       EQU   X'FF'               SETS SWITCH ON
XOV      EQU   X'0C'               ERROR CODES - EXPONENT OVERFLOW
XUN      EQU   X'0D'                             EXPONENT UNDERFLOW
DCK      EQU   X'0F'                             FLOATING POINT DIVIDE
BADOP    EQU   X'FF'               ILLEGAL OPERATION INDICATION
         EJECT
         USING XPDXR,15
         USING WRKAREA,WRK
         SPACE
XPDXR    B     PROLOG
         DC    X'08'
         DC    CL8'IEAXPDXR'
         SPACE
PROLOG   STM   14,12,12(13)        SAVE REGS
         BALR  BASE,0              SET UP ADDRESSABILITY
         USING *,BASE
         L     WRK,8(PARM)
         ST    13,SAVESIM+4
         LA    R2,SAVESIM          SAVE AREA FOR KERNEL
         ST    R2,8(13)            LINK SAVE AREAS
               SPACE
         MVI   72(WRK),X'00'
         MVC   73(8,WRK),72(WRK)   INITIALIZE WORK AREA
         L     PIEAD,0(PARM)       PICK UP ADDRESS OF PIE
         SPACE
* CALCULATE PTR TO INSTRUCTION CAUSING INTERRUPT
         L     INST,8(PIEAD)
         LA    INST,0(INST)        NEXT INSTRUCTION ADDRESS
         SH    INST,FOUR           ILC ADJUSTMENT
         TM    8(PIEAD),X'80'      ILC 2 ?
         BZ    ADD2                YES - ADD 2 TO ADDRESS
         TM    8(PIEAD),X'C0'      ILC 6 ?
         BM    EXTEST              NO - ILC IS 4
         SH    INST,TWO            ILC 6 - SUBTRACT
         B     EXTEST              GO TEST FOR EX
ADD2     AH    INST,TWO            ILC 4
         EJECT
* THIS ROUTINE TESTS FOR AN EXECUTE INSTRUCTION. IF THE INTERRUPT WAS
* CAUSED BY AN EXECUTE, THE ADDRESS OF THE EXECUTED INSTRUCTION IS
* CALCULATED AND THE MASK IS SET.
         SPACE
EXTEST   CLI   0(INST),X'44'       IS INSTRUCTION AN EXECUTE ?
         BNE   DIVCK               NO - CHECK FOR DIVIDE
         SR    R2,R2
         MVC   BYTES(1),1(INST)
         NI    BYTES,LOWBY
         IC    R2,BYTES            INDEX REGISTER
         L     R4,4(PARM)          PTR TO REGS AT INTERRUPT TIME
         LTR   R2,R2               REG 0 NOT INDEX REG
         BZ    ADD
         SLL   R2,2
         L     R2,0(R2,R4)         CONTENTS OF INDEX REG
         LA    R2,0(R2)
ADD      SR    R3,R3
         IC    R3,2(INST)          BASE REGISTER
         SRL   R3,4
         LTR   R3,R3               REG 0 NOT BASE REG
         BZ    ADD1
         SLL   R3,2
         L     R3,0(R3,R4)         CONTENTS OF BASE REG
         LA    R3,0(R3)
ADD1     AR    R3,R2               BASE, INDEX
         MVC   BYTES(2),2(INST)    DISPLACEMENT
         NI    BYTES,LOWBY
         AH    R3,BYTES            ADDRESS
         SPACE
         SR    R2,R2
         IC    R2,1(INST)          PICK UP REG USED FOR EX
         SRL   R2,4
         SLL   R2,2
         LTR   R2,R2               IS EX REG 0 ?
         BZ    LOADREG             YES - DO NOT SET MASK
         L     R2,0(R2,R4)         GET CONTENTS OF REG
         STC   R2,BYTES
         MVC   EXSV,1(R3)          SAVE ORIGINAL FIELD
         OI    EXSW,ON             INDICATE EXECUTE INSTRUCTION
         OC    1(1,R3),BYTES       SET MASK IN INST TO BE EXECUTED
LOADREG  LR    INST,R3             PICK UP PTR TO INST
         SPACE 3
DIVCK    CLC   0(2,INST),DIV       EXTENDED DIVIDE ?
         BNE   ERRRET              NO -GO BACK WITH X'FF' CODE
         CLI   2(INST),X'00'       THIRD BYT
         BNE   SETSPEC             INDICATE SPECIFICATION ERROR
         EJECT
* THIS ROUTINE CHECKS THAT R1 AND R2 ARE SPECIFIED AS 0 OR 4. IF NOT,
* THE PSW IN PIE IS SET TO INDICATE A SPECIFICATION ERROR AND X'FF'
* IS SET AS RETURN CODE.
         SPACE
         SR    R2,R2
         IC    R2,3(INST)
         SRDL  R2,4                R1 OF DIVIDE
         BAL   LINK,SPECTST        CHECK FOR F.P. REG 0 OR 4
         LR    R2,R3
         SRL   R2,28               R2 OF DIVIDE
         BAL   LINK,SPECTST        CHECK FOR F.P. REG 0 OR 4
         SPACE
* THIS ROUTINE SETS UP THE PARAMETER AREA FOR THE KERNEL: X'PM0S2DRA',
* WHERE PM IS THE PROGRAM MASK, S IS DXR SWITCH, 2D MUST BE 2D,
* R IS REG 1, AND A IS REG 2.
         SPACE
         MVI   RC+2,DIVOP          SET OPCODE
         MVC   RC+3(1),3(INST)     SET REG 1 AND REG 2
         IC    R2,8(PIEAD)         GET PROGRAM MASK FROM THE PSW
         SLL   R2,4
         STC   R2,RC               SET PROGRAM MASK IN PARM FOR SIM
         LA    13,SAVESIM          SAVE AREA FOR SIMULATOR
         LA    R2,RC               SET INSTRUCTION AND REG CODE
         ST    R2,LIST                  IN PARAMETER LIST
         LA    R2,SIMWRK           SET ADDRESS OF SIM WORKAREA
         ST    R2,LIST+4                IN PARAMETER LIST
         LA    R2,EXCEP            SET ADDRESS OF ERROR RETURN
         ST    R2,LIST+8                IN PARAMETER LIST
         L     R2,12(PARM)         PICK UP DXR ADJUST SWITCH
         TM    0(R2),X'FF'         SHOULD ADJUST BE DONE?
         BZ    TOSIM               YES - BRANCH
         MVI   RC+1,X'01'          INDICATE TO KERNEL NOT TO ADJUST
TOSIM    LA    PARM,LIST           ADDRESS OF PARAMETER LIST
         L     15,=V(IEAXKDXR)
         BALR  14,15               BRANCH TO SIMULATOR
         SPACE
         B     OUT                 GOOD RETURN FORM SIMULATOR
         SPACE
* USING RETURN CODE FROM KERNEL, SET PSW APPROPRIATELY.
EXCEP    CLI   RETCD+3,BADOP       DID KERNEL FIND OPCODE ERROR ?
         BE    ERRRET              GIVE ERROR RETURN CODE
         L     15,RETCD            PICK UP RETURN CODE
         EX    0,SETINT(15)        ADJUST INTERRUPT CODE
         B     ERRRET
         SPACE 3
SETINT   EQU   *-4
         MVI   7(PIEAD),XOV
         MVI   7(PIEAD),XUN
         MVI   7(PIEAD),DCK
         MVI   7(PIEAD),DCK
         SPACE 3
SPECTST  LTR   R2,R2               IS REG 0 ?
         BCR   8,LINK              YES - RETURN
         CH    R2,FOUR             IS REG 4 ?
         BCR   8,LINK              YES - RETURN
         SPACE
* CONTROL COMES TO THIS SECTION IF A REGISTES HAS BEEN SPECIFIED
* INCORRECTLY. THE PSW IS SET TO INDICATE A SPECIFICATION ERROR.
         SPACE
SETSPEC  EQU   *
         LA    R2,6
         STH   R2,6(PIEAD)         SET PSW IN PIE
         SPACE
ERRRET   LA    CODE1,255           SET X'FF' RETURN CODE
         SPACE
OUT      TM    EXSW,ON             WAS INST AN EXECUTE ?
         BZ    RETURN              NO - RETURN
         MVC   1(1,INST),EXSV      RESTORE FIELD MODIFIED FOR EXECUTE
         SPACE
RETURN   L     13,SAVESIM+4        RESTORE CALLER'S SAVE AREA POINTER
         L     14,12(13)           GET RETURN LOCATION
         LM    0,12,20(13)         RESTORE REGISTERS
         MVI   12(13),X'FF'        INDICATE RETURN
         BR    14                  RETURN
         SPACE 3
* CONSTANT DATA AREA
         SPACE
TWO      DC    H'2'
FOUR     DC    H'4'
DIV      DC    X'B22D'             EXTENDED DIVIDE OPCODE - DXR
         SPACE 3
* VARIABLE DATA AREA
         SPACE
WRKAREA  DSECT
SAVESIM  DS    18F                 SAVE AREA FOR KERNEL
RC       DC    F'0'                PARAMETER AREA FOR KERNEL
BYTES    DC    H'0'                SCRATCH AREA
EXSW     DC    X'00'               INDICATES EXECUTE INSTRUCTION
EXSV     DC    X'00'               ORIGINAL FIELD OF INST EXECUTED
LIST     DC    A(RC)               PARAMETER LIST FOR KERNEL
         DC    A(SIMWRK)
         DC    X'80',AL3(EXCEP)
         DS    0D
RETCD    DS    0F                  RETURN CODE FROM KERNEL
SIMWRK   DS    15D                 WORK AREA FOR KERNEL
PAD      DS    6F                  NOT USED - RESERVED FOR MAINTAINENCE
         EJECT
* THE SIMULATOR KERNEL
GRS      EQU   13 ...........SAVE AREA POINTER
GRR      EQU   14 ...........RETURN REGISTER
GRL      EQU   15 ...........LINK REGISTER
GR0      EQU   0 ............CONTAINS CODE FOR OPERATION AT ENTRY
GR1      EQU   1 ............SCRATCH REGISTERS
GR2      EQU   2
GR3      EQU   3
GR4      EQU   4
GR5      EQU   5
GR6      EQU   6
GRM      EQU   7 ............MASK REGISTER TO HOLD MASK '7F'
GR8      EQU   8 ............ADJUST SWITCH FOR DXR
GR9      EQU   9 ............RECURSIVE CALL SWITCH
GRW      EQU   12 ...........WORK AREA POINTER
FR0      EQU   0 ............FLOATING POINT REGISTERS
FR2      EQU   2
FR4      EQU   4
FR6      EQU   6
         SPACE
SAVEAREA DSECT
         SPACE
CODE     EQU   * ............INSTRUCTION CODE
SAVEGRW  EQU   *+4*17 .......DISPLACEMENT FOR SAVE BUFFER OF GRW
         DS    18F
         SPACE
WORKAREA DSECT
         SPACE
SAVEFR0  DS    D ............SAVE BUFFER FOR FR0
SAVEFR2  DS    D ............SAVE BUFFER FOR FR2
SAVEFR4  DS    D ............SAVE BUFFER FOR FR4
SAVEFR6  DS    D ............SAVE BUFFER FOR FR6
OPND1    DS    D ............HIGH-ORDER 14 DIGITS OF OPERAND 1
         DS    D ............LOW-ORDER 14 DIGITS OF OPERAND 1
         DS    D ............GUARD DIGIT OF OPERAND1
OPND2    DS    D ............HIGH-ORDER 14 DIGITS OF OPERAND 2
         DS    D ............LOW-ORDER 14 DIGITS OF OPERAND 2
         DS    D ............GUARD DIGIT OF OPERAND2
CHAR1    DS    H ............SIGN/CHAR OF HIGH PART OF OPERAND 1
HCHAR    DS    H ............MAX(/CHAR1/,/CHAR2/)
CHAR2    DS    H ............SIGN/CHAR OF HIGH PART OF OPERAND 2
ERRFLAG  DS    H ............RETURN CODE
PADK     DS    D             NOT USED - RESERVED FOR MAINTAINENCE
BUFF1    DS    D ............TEMPORARY STORAGES, USED BY DXR ONLY
BUFF2    DS    D
PADK1    DS    D             NOT USED - RESERVED FOR MAINTAINENCE
SIZE     EQU   *
         EJECT
IEAXKDXR CSECT
         ENTRY IEAXKDXR
         SPACE
         USING WORKAREA,GRW
         USING SAVEAREA,GRS
         USING *,GRL
         SPACE
         B     PROLOGA ............NORMAL ENTRY POINT
         DC    X'08'
         DC    CL8'IEAXKDXR'
         SPACE
PROLOGA  STM   GRR,GRW,12(GRS) .SAVE REGISTERS
         L     GRW,4(GR1) ...WORK AREA ADDRESSABILITY
         L     GR2,0(GR1)
         L     0,0(GR2) .....INSTRUCTION CODE
         ST    0,CODE
         SR    GR8,GR8 ......CLEAR PROGRAM MASK
         SPM   GR8
         IC    GR8,CODE+1 ...PICK UP ADJUST CODE
*
*     PROLOG SECTION: DETERMINE OPERATION TO BE SIMULATED,
*                     STORE OPERANDS, SAVE SIGN AND CHAR. OF
*                     OPERANDS, AND SCALE OPERANDS
*
PROLOGC  STD   FR0,SAVEFR0 ..SAVE FLOATING POINT REGISTERS
         STD   FR2,SAVEFR2
         STD   FR4,SAVEFR4
         STD   FR6,SAVEFR6
         MVI   ERRFLAG,X'00' CLEAR RETURN CODE FLAG
         LA    GRM,X'7F' ....SET UP MASK REGISTER FOR X'7F'
         LR    GR1,GR0 ......DETERMINE 1ST OPERAND REGISTER
         SRL   GR1,4
         SLL   GR1,4
         EX    GR1,STORE1 ...STORE HIGH PART OPERAND 1 IN OPND1
         MVC   CHAR1(1),OPND1 SAVE SIGN/CHARACTERISTIC OF OPERAND 1
         MVI   OPND1,X'40' ..FORCE + AND CHARACTERISTIC OF X'40'
         LR    GR2,GR0 ......DETERMINE 2ND OPERAND REGISTER
         SLL   GR2,4
         EX    GR2,STORE2 ...STORE HIGH PART OPERAND 2 IN OPND2
         MVC   CHAR2(1),OPND2 SAVE SIGN/CHARACTERISTIC OF OPERAND 2
         MVI   OPND2,X'40' ..FORCE + AND CHARACTERISTIC OF X'40'
         LA    GR2,X'20'(GR2)
         EX    GR2,STORE3 ...STORE LOW PART OPERAND 2 IN OPND2+8
         MVI   OPND2+8,X'32' FORCE SIGN + AND CHAR. OF X'32'
         LA    GR1,X'20'(GR1)
         EX    GR1,STORE4 ...STORE LOW PART OPERAND 1 IN OPND1+8
         MVI   OPND1+8,X'32' FORCE SIGN + AND CHAR. OF X'32'
         SPACE
         SDR   FR0,FR0 ......PRENORMALIZE OPERANDS
         STD   FR0,OPND1+16 ...CLEAR GUARD DIGIT
         BAL   GRR,NORM .......NORMALIZE 1ST OPERAND
         LM    GR3,GR6,OPND1 ..SAVE 1ST OPERAND, AND MOVE 2ND
         MVC   OPND1(16),OPND2 ..OPERAND FOR NORMALIZATION
         BAL   GRR,NORM .......NORMALIZE 2ND OPERAND
         MVC   OPND2(16),OPND1 SWITCH BACK OPERANDS SINCE DXR
         STM   GR3,GR6,OPND1 ....IS NOT COMMUTATIVE
         SPACE
         CLI   CODE+2,X'2D' .IF OP CODE = '2D', GO TO DXR SECTION
         BE    DXR
         MVI   ERRFLAG,X'FF' IF OP CODE IS NONE OF THE ABOVE,
         B     EPILOG6 ........ILLEGAL OP CODE.  SET FLAG AND RETURN
         SPACE 3
EPILOGA  IC    GR1,OPND1 ....PRE-EPILOG FOR DXR
         NR    GR1,GRM ........CHAR. OF SCALED RESULT IN GR1
         IC    GR2,CHAR2 ......CHAR. OF 2ND OPERAND IN GR2
         NR    GR2,GRM
         IC    GR0,CHAR1 ......CHAR. OF 1ST OPERAND TO GR0
         NR    GR0,GRM
         XC    CHAR1(1),CHAR2 .MULTIPLY SIGNS OF THE 2 OPERANDS
         SPACE
*
*     EPILOG NUCLEUS: DETERMINE CHAR. AND SIGN OF RESULT
*                     TEST EXPONENT OVERFLOW AND UNDERFLOW
*                     PROVIDE EXPONENT WRAP-AROUND IF CALLED FOR
*                     LOAD RESULT INTO CORRECT REGISTER(S)
*                     RESTORE OTHER REGISTERS AND PROGRAM MASK
*
EPILOG   CLC   OPND1(4),ZERO IF SCALED RESULT IS NORMAL 0, SKIP
         BE    EPILOG4
         AR    GR1,GR0 ......OTHERWISE, CHAR. OF ANS = GR0+GR1-GR2
         SR    GR1,GR2
         BNM   EPILOG2 ......IF CHAR. IS NOT NEGATIVE, SKIP
         SPACE
         TM    CODE,X'20' ...UNDERFLOW CASE
         BO    EPILOG1
         SDR   FR0,FR0 ......IF UNDERFLOW MASK IS OFF, WE SHOULD
         STD   FR0,OPND1 ......GIVE NORMAL ZERO SILENTLY
         STD   FR0,OPND1+8
         B     EPILOG4 ........SKIP
EPILOG1  OI    ERRFLAG,X'08' IF UNDFLOW MASK IS ON, SET FLAG
         SPACE
EPILOG2  CR    GR1,GRM
         BNH   EPILOG3 ......IF CHAR. IS HIGHER THAN X'7F',
         OI    ERRFLAG,X'04' ..OVERFLOW CASE.   SET FLAG FOR THIS
         SPACE
EPILOG3  NR    GR1,GRM ......CUT DOWN TO NORMAL CHAR. RANGE
         LA    GR2,X'FF2'(GR1)
         NR    GR2,GRM ......FIX UP LOW ORDER CHARACTERISTIC
         NI    CHAR1,X'80'
         IC    GR0,CHAR1 ....SIGN BIT FOR THE ANSWER
         OR    GR1,GR0 ......SIGN AND CHAR. OF HIGH PART ANS
         STC   GR1,OPND1
         OR    GR2,GR0 ......SIGN AND CHAR. OF LOW PART ANS
         STC   GR2,OPND1+8
         SPACE
EPILOG4  IC    GRM,CODE+3 ...LOCATE RESULT (1ST OPERAND) REGISTER
         SRL   GRM,4
         SLL   GRM,2 ........MULTIPLY REG DESIGNATION BY 4
         LD    FR0,OPND1 ....OVERLAY SAVE BUFFER OF RESULT REGISTER
         STD   FR0,SAVEFR0(GRM) WITH HIGH PART RESULT
EPILOG5  LD    FR0,OPND1+8 ..OVERLAY SAVE BUFFER OF COMPANION RESULT
         STD   FR0,SAVEFR2(GRM) REGISTER WITH LOW PART RESULT
         SPACE
EPILOG6  LD    FR0,SAVEFR0 ..RESTORE ALL FLOATING POINT REGISTERS
         LD    FR2,SAVEFR2
         LD    FR4,SAVEFR4
         LD    FR6,SAVEFR6
         LM    GRR,GR8,12(GRS) RESTORE OTHER REGISTERS
         SPM   GRR ............RESTORE PROGRAM MASK
         SR    GRL,GRL
         IC    GRL,ERRFLAG ....PICK UP ERRFLAG IN GRL
         ST    GRL,0(GRW) .....SAVE RETURN CODE
         L     GRW,SAVEGRW ....RESTORE REGISTER POINTING TO WORK AREA
         LTR   GRL,GRL ........TEST RETURN CODE
         MVI   12(GRS),X'FF' ..RETURN
         BCR   8,GRR ..........IF RETURN CODE ZERO, TAKE NORMAL RETURN
         L     GRL,8(GR1) .....GET LOCATION OF ERROR RETURN
         BR    GRL ............TAKE ERROR RETURN
         EJECT
DXR      CLI   OPND2+1,X'00' ..DIVIDE SIMULATION
         BNZ   DXR1 ...........IF DIVISOR NE 0, SKIP AND CONTINUE
         MVI   ERRFLAG,X'0C' ..IF DIVIDE CHECK, SET FLAG X'0C'
         CLI   OPND1+1,X'00' ....OR '10' DEPENDING ON WHETHER THE
         BNZ   EPILOG6 ..........DIVIDEND IS NON-ZERO OR ZERO
         MVI   ERRFLAG,X'10'
         B     EPILOG6 ........ABORT THE OPERATION
         SPACE
DXR1     EQU   *
         LD    FR4,OPND1 ......(A1+A2)/(B1+B2) WITH EXACT TRUNCATION
         LD    FR6,OPND1+8
         LDR   FR0,FR4
         DD    FR0,OPND2 ......Q1=A1/B1 APPROX. H.O. 14 DIGITS OF A/B
         MD    FR0,DECR .......UNDERESTIMATE Q1 BY Q1*16**-12.
         STD   FR0,BUFF1 ........THIS DONE SO THAT Q1 AND Q2+Q3 WILL
         MXD   FR0,OPND2 ........HAVE THE SAME SIGN
         SXR   FR4,FR0 ........(A1+A2)-Q1*B1  EXACT
         LD    FR0,BUFF1
         MXD   FR0,OPND2+8
         SXR   FR4,FR0 ........(A1+A2)-Q1*(B1+B2)  CALL THIS A3+A4
         SPACE
         LDR   FR0,FR4
         DD    FR0,OPND2 ......Q2=A2/B1  ESTIMATE FOR NEXT 14 DIGIT
         STD   FR0,BUFF2
         MXD   FR0,OPND2
         SXR   FR4,FR0 ........(A3+A4)-Q2*B1
         LD    FR0,BUFF2
         MD    FR0,OPND2+8
         SDR   FR4,FR0 ........(A3+A4)-Q2*(B1+B2)=A-(Q1+Q2)*B SET =A5
         SPACE
         DD    FR4,OPND2 ......Q3=A5/B1  REL. ACCURACY ABOUT 16**-38
         LE    FR0,BUFF1
         ME    FR0,INCR6 ......CRANK Q3 BY Q1*16**-35, SO THAT
         ADR   FR4,FR0 ..........Q1+Q2+Q3 IS NEVER UNDERESTIMATE
         LD    FR0,BUFF2
         SDR   FR2,FR2
         AXR   FR4,FR0 ........Q2+Q3
         LD    FR0,BUFF1
         AXR   FR4,FR0 ........Q=Q1+Q2+Q3 TRUNCATED
         LTR   GR8,GR8 ........SHOULD WE ADJUST ?
         BNZ   DXR2 ...........NO - BRANCH
         SPACE
         STD   FR4,BUFF1 ......THERE IS A FAINT CHANCE THAT Q IS
         STD   FR6,BUFF2 ........ROUNDED UP WHERE IT SHOULDN'T
         MXD   FR4,OPND2 ......SO WE VERIFY THE EXACTNESS OF TRUNC.
         LD    FR0,OPND1 ......CALL Q=Q1+Q2 ANEW
         LD    FR2,OPND1+8
         SXR   FR0,FR4 ........A-Q1*B1
         LD    FR4,BUFF1
         MXD   FR4,OPND2+8
         SXR   FR0,FR4 ........A-Q1*B1-Q1*B2=A-Q1*B
         LD    FR4,BUFF2
         MXD   FR4,OPND2
         SXR   FR0,FR4 ........A-Q1*B-Q2*B1
         LD    FR4,BUFF2
         MXD   FR4,OPND2+8 ....Q2*B2
         SXR   FR0,FR4 ........A-Q*B COMPUTED EXACTLY
         LD    FR4,BUFF1 ......RELOAD Q1 AND Q2
         LD    FR6,BUFF2
         BNM   DXR2 ...........IF Q WAS NOT OVERESTIMATE, OK.  SKIP
         SPACE
         MVC   BUFF2+1(7),ZERO+1 IF Q WAS OVER-ESTIMATE, PREPARE
         LD    FR0,BUFF2 ........DECREMENTER WITH CHAR = CHAR(Q)-14
         LE    FR2,INCR6 ........AND FRACTION OF 1 IN THE 15TH DIGIT
         SXR   FR4,FR0 ........DECREMENT Q
         SPACE
DXR2     STD   FR4,OPND1
         STD   FR6,OPND1+8
         B     EPILOGA ........DONE
         SPACE 2
NORM     TM    OPND1+1,X'F0' NORMALIZATION SECTION
         BCR   7,GRR ..........IF OPND1 ALREADY NORMAL, RETURN
         LD    FR0,OPND1 ......LOAD OPND1 IN FR0-FR2-FR4
         LD    FR2,OPND1+8
         LD    FR4,OPND1+16
         AD    FR0,ZERO .......NORMALIZE H.O. PART
         LDR   FR6,FR0
         ADR   FR0,FR2 ........NORMAL SUM OF H.O. AND L.O. PART
         ADR   FR4,FR0 ........ADD GUARD DIGIT TO COMPLETE H.O. PART
         STD   FR4,OPND1 ......STORE IT
         SDR   FR4,FR0 ........CONTRIBUTION TO H.O. PART BY GUARD DGT
         SDR   FR0,FR6 ........CONTRIBUTION TO H.O. PART BY L.O. PART
         SDR   FR2,FR0 ........L.O. PART YET TO BE ACCOUNTED FOR
         LTDR  FR4,FR4 ........IF GUARD DIGIT ALREADY HAS CONTRIBUTED
         BNZ   NORM1 ............TO H.O. SUM, SKIP
         AD    FR2,OPND1+16 ...OTHERWISE ADD GUARD DIGIT TO L.O. SUM
         SPACE
NORM1    IC    GR1,OPND1 ......PREPARE UNNORMALIZER WITH CHAR 14 LESS
         LA    GR1,X'FF2'(GR1) ..THAN THAT OF NORMALIZED H.O. PART
         SLL   GR1,24
         SR    GR2,GR2
         STM   GR1,GR2,OPND1+8
         AW    FR2,OPND1+8 ....UNNORMALIZE L.O. SUM SO AS TO BE
         STD   FR2,OPND1+8 ......ALIGNED WITH H.O. SUM
         BR    GRR ..........DONE
         SPACE 3
STORE1   STD   FR0,OPND1 ......INSTRUCTIONS TO BE EXECUTED TO BRING
STORE2   STD   FR0,OPND2 ........IN THE OPERANDS
STORE3   STD   FR0,OPND2+8
STORE4   STD   FR0,OPND1+8
         DS    0F
INCR6    DC    X'1E100000' ....16**-35
ZERO     DC    D'0' ..................NORMAL ZERO
DECR     DC    X'40FFFFFFFFFFFF00' ...1-16**-12
         END
