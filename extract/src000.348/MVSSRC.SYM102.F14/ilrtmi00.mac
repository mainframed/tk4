         TITLE 'ILRTMI00 - TASK MODE INITIALIZATION                    *
                        '
ILRTMI00 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ILRTMI00  77.325'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  LA    @12,4095(,@11)                                      0001
         USING @PSTART,@11                                         0001
         USING @PSTART+4095,@12                                    0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
STRTPGM@ EQU   @PSTART
*                                      CHARS. TO EBCDIC      @ZA26483*/
         EJECT
*                                                                  0128
*/********************************************************************/
*/********************************************************************/
*/*  MISCELLANEOUS INITIALIZATION                                    */
*/********************************************************************/
*/********************************************************************/
*                                                                  0128
*   /*****************************************************************/
*   /*                                                               */
*   /* RECORD RECOVERY INFORMATION IN THE EPATH.                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0128
*   EPATMI=ON;                      /* TURN ON THE TMI FLAG IN THE 0128
*                                      EPATH TO INDICATE THAT      0128
*                                      ILRTMI00 IS CURRENTLY       0128
*                                      PROCESSING - RRR              */
         OI    EPATMI(EPAPTR),B'00000100'                          0128
*   EPATMIBA=ADDR(STRTPGM@);        /* RECORD BASE REGISTER VALUE FOR
*                                      ILRTMI00 IN EPATH - RRR       */
         LA    @10,STRTPGM@                                        0129
         ST    @10,EPATMIBA(,EPAPTR)                               0129
*   EPATMISV=R13;                   /* RECORD ADDRESS OF ILRTMI00'S
*                                      SAVE AREA IN EPATH            */
*                                                                  0130
         ST    R13,EPATMISV(,EPAPTR)                               0130
*   /*****************************************************************/
*   /*                                                               */
*   /* SAVE POINTER TO TEMPORARY PAGE ADDRESS REFERENCE TABLE        */
*   /* (TPARTBLE) - RRR                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0131
*   TPARPTR=PARTTPAR;               /* SAVE POINTER TO TPARTBLE      */
         L     @10,PARTPTR(,ASMVTPTR)                              0131
         L     @10,PARTTPAR(,@10)                                  0131
         ST    @10,TPARPTR                                         0131
*   EPATPART=TPARPTR;               /* RECORD POINTER TO TPARTBLE IN
*                                      EPATH - RRR                   */
*                                                                  0132
         ST    @10,EPATPART(,EPAPTR)                               0132
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE INTERNAL RETURN CODE                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0133
*   INTRTCD=ZERO;                   /* SET INTERNAL RETURN CODE TO 0133
*                                      ZERO                          */
         SLR   @10,@10                                             0133
         ST    @10,INTRTCD                                         0133
         EJECT
*                                                                  0134
*/********************************************************************/
*/********************************************************************/
*/*   CREATE I/O BUFFER AND RPL BUILD AREA                           */
*/********************************************************************/
*/********************************************************************/
*                                                                  0134
*   /*****************************************************************/
*   /*                                                               */
*   /* OBTAIN STORAGE FROM CSA (SUBPOOL 241) FOR I/O BUFFER AND RPL  */
*   /* BUILD AREA VIA GETMAIN                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0134
*   RFY                                                            0134
*    (R1) RSTD;                                                    0134
*   DO;                             /* GETMAIN (RU) LV(LENGTH(IOBUFFE
*                                      R)+LENGTH(RPLBAREA)) SP(241)  */
*     RESPECIFY                                                    0136
*      (GPR01F,                                                    0136
*       GPR15F,                                                    0136
*       GPR00F) RESTRICTED;                                        0136
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0137
*     GPR15F=2;                     /* RU-TYPE GETMAIN               */
         LA    GPR15F,2                                            0138
*     GPR00F=LENGTH(IOBUFFER)+LENGTH(RPLBAREA);/* LENGTH REQUESTED   */
         LA    GPR00F,2124                                         0139
*     GPR15F=GPR15F×((241)*256);    /* SP IN BYTE 2                  */
         O     GPR15F,@CF01651                                     0140
*     SVC(120);                     /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0141
*     RESPECIFY                                                    0142
*      (GPR01F,                                                    0142
*       GPR15F,                                                    0142
*       GPR00F) UNRESTRICTED;                                      0142
*   END;                            /* GETMAIN (RU) LV(LENGTH(IOBUFFE
*                                      R)+LENGTH(RPLBAREA)) SP(241)
*                                      OBTAIN THE NEEDED STORAGE     */
*   GETAREA@=R1;                    /* SAVE POINTER TO GETMAINED AREA
*                                      IN GETAREA@                   */
         ST    R1,GETAREA@                                         0144
*   EPATMWKA=GETAREA@;              /* RECORD ADDRESS OF THE       0145
*                                      GETMAINED AREA CONTAINING THE
*                                      I/O BUFFER AND RPL BUILD AREA
*                                      IN THE EPATH - RRR            */
         L     @10,GETAREA@                                        0145
         ST    @10,EPATMWKA(,EPAPTR)                               0145
*   RFY                                                            0146
*    (R1) UNRSTD;                                                  0146
*                                                                  0146
*   /*****************************************************************/
*   /*                                                               */
*   /* OBTAIN POINTERS TO I/O BUFFER AND RPL BUILD AREA. CLEAR I/O   */
*   /* BUFFER AND RPL BUILD AREA. NOTE THAT RECOVERY EXPECTS THE RPL */
*   /* BUILD AREA TO BE AT THE BEGINNING OF THE GETMAINED AREA       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0147
*   RFY                                                            0147
*    (IOBUFPTR,                                                    0147
*     RPLAREA@) RSTD;                                              0147
*   IOBUFPTR=GETAREA@+LENGTH(RPLBAREA);/* OBTAIN POINTER TO I/O    0148
*                                      BUFFER                        */
         LA    IOBUFPTR,76                                         0148
         ALR   IOBUFPTR,@10                                        0148
*   RPLAREA@=GETAREA@;              /* OBTAIN POINTER TO RPL BUILD 0149
*                                      AREA                          */
         LR    RPLAREA@,@10                                        0149
*   RFY                                                            0150
*     IFGRPL BASED(RPLAREA@);                                      0150
*   RFY                                                            0151
*    (RECADDR,                                                     0151
*     RECLEN,                                                      0151
*     SRCADDR,                                                     0151
*     SRCLEN) RSTD;                                                0151
*   RECADDR=GETAREA@;               /* SET RECEIVER ADDRESS TO     0152
*                                      BEGINNING OF THE GETMAINED  0152
*                                      AREA                          */
         LR    RECADDR,@10                                         0152
*   RECLEN=LENGTH(IOBUFFER)+LENGTH(RPLBAREA);/* SET RECEIVER LENGTH
*                                      TO THAT OF I/O BUFFER AND RPL
*                                      BUILD AREA                    */
         LA    RECLEN,2124                                         0153
*   SRCLEN=PADZERO;                 /* SET PADDING CHARACTER TO ZERO
*                                      AND SOURCE LENGTH TO ZERO     */
         SLR   SRCLEN,SRCLEN                                       0154
*   MVCL(RECADDR,SRCADDR);          /* CLEAR THE I/O BUFFER AND RPL
*                                      BUILD AREA                    */
         MVCL  RECADDR,SRCADDR                                     0155
*   RFY                                                            0156
*    (RECADDR,                                                     0156
*     RECLEN,                                                      0156
*     SRCADDR,                                                     0156
*     SRCLEN) UNRSTD;                                              0156
         EJECT
*                                                                  0157
*/********************************************************************/
*/********************************************************************/
*/*   CREATE ACB BUILD AREA                                          */
*/********************************************************************/
*/********************************************************************/
*                                                                  0157
*   /*****************************************************************/
*   /*                                                               */
*   /* OBTAIN STORAGE FROM SQA (SUBPOOL 245) FOR ACB BUILD AREA VIA  */
*   /* GETMAIN                                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0157
*   RFY                                                            0157
*    (R1,                                                          0157
*     ACBAREA@) RSTD;                                              0157
*   DO;                             /* GETMAIN (RU)                0158
*                                      LV(LENGTH(ACBBAREA)) SP(245)  */
*     RESPECIFY                                                    0159
*      (GPR01F,                                                    0159
*       GPR15F,                                                    0159
*       GPR00F) RESTRICTED;                                        0159
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0160
*     GPR15F=2;                     /* RU-TYPE GETMAIN               */
         LA    GPR15F,2                                            0161
*     GPR00F=LENGTH(ACBBAREA);      /* LENGTH REQUESTED              */
         LA    GPR00F,76                                           0162
*     GPR15F=GPR15F×((245)*256);    /* SP IN BYTE 2                  */
         O     GPR15F,@CF01652                                     0163
*     SVC(120);                     /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0164
*     RESPECIFY                                                    0165
*      (GPR01F,                                                    0165
*       GPR15F,                                                    0165
*       GPR00F) UNRESTRICTED;                                      0165
*   END;                            /* GETMAIN (RU)                0166
*                                      LV(LENGTH(ACBBAREA)) SP(245)
*                                      OBTAIN THE NEEDED STORAGE     */
*   ACBAREA@=R1;                    /* SAVE POINTER GETMAINED AREA IN
*                                      ACBAREA@                      */
         LR    ACBAREA@,R1                                         0167
*   EPATMACB=ACBAREA@;              /* RECORD ADDRESS OF ACB BUILD 0168
*                                      AREA IN THE EPATH - RRR       */
         ST    ACBAREA@,EPATMACB(,EPAPTR)                          0168
*   RFY                                                            0169
*    (R1) UNRSTD;                                                  0169
*   RFY                                                            0170
*     IFGACB BASED(ACBAREA@);                                      0170
*   ACBBAREA=ACBBAREA&&ACBBAREA;    /* CLEAR ACB BUILD AREA          */
*                                                                  0171
         XC    ACBBAREA(76,ACBAREA@),ACBBAREA(ACBAREA@)            0171
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP ADDRESSABILITY TO THE ARDB ( ACB -> AMBL -> AMB ->     */
*   /* AMDSB -> ARDB )                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0172
*   RFY                                                            0172
*     IDAAMBL BASED(AMBLPTR);                                      0172
*   RFY                                                            0173
*     IDAAMB BASED(AMBPTR);                                        0173
*   RFY                                                            0174
*     IDAAMDSB BASED(AMDSBPTR);                                    0174
*   RFY                                                            0175
*     IDAARDB BASED(ARDBPTR);                                      0175
         EJECT
*                                                                  0176
*/********************************************************************/
*/********************************************************************/
*/*   BUILD CONTROL BLOCKS FOR DYNAMIC ALLOCATION REQUEST            */
*/********************************************************************/
*/********************************************************************/
*                                                                  0176
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD THE DYNAMIC ALLOCATION REQUEST BLOCK POINTER AS WELL AS */
*   /* THE DYNAMIC ALLOCATION REQUEST BLOCK                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0176
*   S99RBPTR=ADDR(S99RB);           /* SET DYNAMIC ALLOCATION REQUEST
*                                      BLOCK POINTER                 */
         LA    @10,S99RB                                           0176
         ST    @10,S99RBPTR                                        0176
*   S99RBPND=ON;                    /* TURN ON LAST INDICATOR        */
         OI    S99RBPND,B'10000000'                                0177
*   S99RB=''B;                      /* INITIALIZE DYNAMIC ALLOCATION
*                                      REQUEST BLOCK                 */
         XC    S99RB(20),S99RB                                     0178
*   S99RBLN=LENGTH(S99RB);          /* SET REQUEST BLOCK LENGTH      */
         MVI   S99RBLN,X'14'                                       0179
*   S99VERB=S99VRBAL;               /* SET VERB CODE FOR ALLOCATION  */
         MVI   S99VERB,X'01'                                       0180
*   S99TXTPP=ADDR(DATUPTRS);        /* SET ADDRESS OF THE LIST OF  0181
*                                      TEXT UNIT POINTERS            */
         LA    @10,DATUPTRS                                        0181
         ST    @10,S99TXTPP                                        0181
*   S99NORES=ON;                    /* SET NO DATA SET RESERVATION 0182
*                                      FLAG ON                       */
*                                                                  0182
         OI    S99NORES,B'00100000'                                0182
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD THE DYNAMIC ALLOCATION TEXT UNIT FOR DDNAME = STGINDEX. */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0183
*   RFY                                                            0183
*     S99TUNIT BASED(ADDR(DATUDDN));                               0183
*   S99TUKEY=DALDDNAM;              /* SET KEY FOR DDNAME            */
         LA    @10,DATUDDN                                         0184
         MVC   S99TUKEY(2,@10),@CB01067                            0184
*   S99TUNUM=ONE;                   /* SET NUMBER OF PARAMETERS      */
         LA    @02,1                                               0185
         STCM  @02,3,S99TUNUM(@10)                                 0185
*   S99TULNG=LENGTH(DDNAME);        /* SET LENGTH OF PARAMETERS      */
         MVC   S99TULNG(2,@10),@CH00037                            0186
*   S99TUPAR(ONE:LENGTH(DDNAME))=DDNAME;/* SET PARAMETER             */
*                                                                  0187
         MVC   S99TUPAR(8,@10),@CC01347                            0187
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD THE DYNAMIC ALLOCATION TEXT UNIT FOR DSNAME =           */
*   /* SYS1.STGINDEX                                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0188
*   RFY                                                            0188
*     S99TUNIT BASED(ADDR(DATUDSN));                               0188
*   S99TUKEY=DALDSNAM;              /* SET KEY FOR DSNAME            */
         LA    @10,DATUDSN                                         0189
         MVC   S99TUKEY(2,@10),@CB01069                            0189
*   S99TUNUM=ONE;                   /* SET NUMBER OF PARAMETERS      */
         STCM  @02,3,S99TUNUM(@10)                                 0190
*   S99TULNG=LENGTH(DSNAME);        /* SET LENGTH OF PARAMETERS      */
         MVC   S99TULNG(2,@10),@CH00904                            0191
*   S99TUPAR(ONE:LENGTH(DSNAME))=DSNAME;/* SET PARAMETER             */
*                                                                  0192
         MVC   S99TUPAR(13,@10),@CC01351                           0192
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD THE DYNAMIC ALLOCATION TEXT UNIT FOR DSORG = VSAM       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0193
*   RFY                                                            0193
*     S99TUNIT BASED(ADDR(DATUDSRG));                              0193
*   S99TUKEY=DALRTORG;              /* SET KEY FOR RETURN DATA SET 0194
*                                      ORGANIZATION                  */
         LA    @10,DATUDSRG                                        0194
         MVC   S99TUKEY(2,@10),@CB01239                            0194
*   S99TUNUM=ONE;                   /* SET NUMBER OF PARAMETERS      */
         STCM  @02,3,S99TUNUM(@10)                                 0195
*   S99TULNG=LENGTH(DSORG)/ONEBYTE; /* SET LENGTH OF PARAMETERS      */
         MVC   S99TULNG(2,@10),@CH00092                            0196
*   S99TUPAR(ONE:LENGTH(DSORG)/ONEBYTE)=DSORG;/* SET PARAMETER       */
*                                                                  0197
         MVC   S99TUPAR(2,@10),@CB01097                            0197
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD THE DYNAMIC ALLOCATION TEXT UNIT FOR STATUS = OLD       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0198
*   RFY                                                            0198
*     S99TUNIT BASED(ADDR(DATUSTAT));                              0198
*   S99TUKEY=DALSTATS;              /* SET KEY FOR DATA SET STATUS   */
         LA    @10,DATUSTAT                                        0199
         MVC   S99TUKEY(2,@10),@CB01073                            0199
*   S99TUNUM=ONE;                   /* SET NUMBER OF PARAMETERS      */
         STCM  @02,3,S99TUNUM(@10)                                 0200
*   S99TULNG=LENGTH(STATOLD)/ONEBYTE;/* SET LENGTH OF PARAMETERS     */
         STCM  @02,3,S99TULNG(@10)                                 0201
*   S99TUPAR(ONE:LENGTH(STATOLD)/ONEBYTE)=STATOLD;/* SET PARAMETER   */
*                                                                  0202
         MVI   S99TUPAR(@10),X'01'                                 0202
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD THE DYNAMIC ALLOCATION TEXT UNIT FOR DISP = KEEP        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0203
*   RFY                                                            0203
*     S99TUNIT BASED(ADDR(DATUDISP));                              0203
*   S99TUKEY=DALNDISP;              /* SET KEY FOR DATA SET        0204
*                                      DISPOSITION                   */
         LA    @10,DATUDISP                                        0204
         MVC   S99TUKEY(2,@10),@CB01075                            0204
*   S99TUNUM=ONE;                   /* SET NUMBER OF PARAMETERS      */
         STCM  @02,3,S99TUNUM(@10)                                 0205
*   S99TULNG=LENGTH(DISPKEEP)/ONEBYTE;/* SET LENGTH OF PARAMETERS    */
         STCM  @02,3,S99TULNG(@10)                                 0206
*   S99TUPAR(ONE:LENGTH(DISPKEEP)/ONEBYTE)=DISPKEEP;/* SET PARAMETER */
         MVI   S99TUPAR(@10),X'08'                                 0207
         EJECT
*                                                                  0208
*/********************************************************************/
*/********************************************************************/
*/*   ISSUE A DYNAMIC ALLOCATION REQUEST FOR SYS1.STGINDEX           */
*/********************************************************************/
*/********************************************************************/
*                                                                  0208
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE A DYNAMIC ALLOCATION REQUEST FOR SYS1.STGINDEX          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0208
*   RFY                                                            0208
*    (R1,                                                          0208
*     DYNARTCD) RSTD;                                              0208
*   R1=ADDR(S99RBPTR);              /* SET REG 1 TO ADDRESS OF     0209
*                                      DYNAMIC ALLOCATION REQUEST  0209
*                                      BLOCK POINTER                 */
         LA    R1,S99RBPTR                                         0209
*   SVC(99);                        /* DYNAMIC ALLOCATION REQUEST    */
         SVC   99                                                  0210
*   RFY                                                            0211
*    (R1) UNRSTD;                                                  0211
*                                                                  0211
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THE DYNAMIC ALLOCATION REQUEST FOR SYS1.STGINDEX WAS       */
*   /* UNSUCCESSFUL, THEN ASK THE OPERATOR IF IT IS O.K. TO CONTINUE */
*   /* WITHOUT VIO JOURNALING AND WAIT FOR OPERATOR'S RESPONSE. IF   */
*   /* THE OPERATOR RESPONDS, THEN CONTINUE WITH THE BUILDING OF THE */
*   /* DATA SET NAME LIST. IF THE DYNAMIC ALLOCATION REQUEST FOR     */
*   /* SYS1.STGINDEX WAS SUCCESSFUL, THEN INITIALIZE SYS1.STGINDEX   */
*   /* FOR VIO JOURNALING AFTER WHICH THE DATA SET NAME LIST IS      */
*   /* BUILT.                                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0212
*   IF DYNARTCD^=ZERO THEN                                         0212
         LTR   DYNARTCD,DYNARTCD                                   0212
         BZ    @RF00212                                            0212
*     DO;                                                          0213
*       RFY                                                        0214
*        (DYNARTCD) UNRSTD;                                        0214
*                                                                  0214
*       /*************************************************************/
*       /*                                                           */
*       /* TELL OPERATOR THAT SYS1.STGINDEX COULD NOT BE INITIALIZED.*/
*       /* ASK THE OPERATOR IF IT IS O.K. TO CONTINUE WITHOUT VIO    */
*       /* JOURNALING AND THEN WAIT FOR OPERATOR'S RESPONSE.         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0215
*       RC(3:4)=S99ERROR;           /* GIVE THE XXXX PORTION OF    0215
*                                                            @ZA26483*/
         MVC   RC+2(2),S99ERROR                                    0215
*       SLL(RC,FOURBYTE);           /* WTO01M ITS DYNAMIC ALLO-    0216
*                                                            @ZA26483*/
         ICM   @10,15,RC                                           0216
         SLL   @10,4                                               0216
         STCM  @10,15,RC                                           0216
*       UNPK(RTNCODE,RC);           /* CATION ERROR CODE. NEXT,    0217
*                                                            @ZA26483*/
         UNPK  RTNCODE(4),RC(4)                                    0217
*       RTNCODE=RTNCODE&STRIP;      /* CONVERT THE ERROR CODE      0218
*                                                            @ZA26483*/
         NC    RTNCODE(4),STRIP                                    0218
*       TR(RTNCODE,CONVERT);        /* TO A PRINTABLE FORM.  @ZA26483*/
         TR    RTNCODE(4),CONVERT                                  0219
*       DO;                         /* WTOP MF(E,WTO01M)             */
*         RFY                                                      0221
*           GPR01P RSTD;            /* RESTRICT REG 1                */
*         GPR01P=ADDR(WTO01M);      /* ADDRESS CONTROL PROGRAM LIST  */
         LA    GPR01P,WTO01M                                       0222
*         SVC(35);                  /* ISSUE WTO SVC                 */
         SVC   35                                                  0223
*         RFY                                                      0224
*           GPR01P UNRSTD;          /* RELEASE REG 1                 */
*       END;                        /* WTOP MF(E,WTO01M) TELL      0225
*                                      OPERATOR THAT SYS1.STGINDEX 0225
*                                      COULD NOT BE INITIALIZED AND
*                                      THAT THERE WILL BE NO VIO   0225
*                                      JOURNALING                    */
*       WTORECB=ZERO;               /* ZERO OUT WTORECB              */
         SLR   @10,@10                                             0226
         ST    @10,WTORECB                                         0226
*       DO;                         /* WTORP MF(E,WTO22M)            */
*         RFY                                                      0228
*           GPR01P RSTD;            /* RESTRICT REG 1                */
*         GPR01P=ADDR(WTO22M);      /* ADDRESS CONTROL PROGRAM LIST  */
         LA    GPR01P,WTO22M                                       0229
*         SVC(35);                  /* ISSUE WTOR SVC                */
         SVC   35                                                  0230
*         RFY                                                      0231
*           GPR01P UNRSTD;          /* RELEASE REG 1                 */
*       END;                        /* WTORP MF(E,WTO22M) REQUEST A
*                                      DECISION FROM OPERATOR ON   0232
*                                      WHETHER TO CONTINUE WITHOUT 0232
*                                      VIO JOURNALING                */
*       DO;                         /* WAIT ECB(WTORECB)             */
*         RESPECIFY                                                0234
*          (GPR00P,                                                0234
*           GPR01P) RESTRICTED;                                    0234
*         GPR00P=1;                 /* LOAD WAIT COUNT               */
         LA    GPR00P,1                                            0235
*         GPR01P=ADDR(WTORECB);     /* ADDRESS OF ECB                */
         LA    GPR01P,WTORECB                                      0236
*         SVC(1);                   /* WAIT SVC                      */
         SVC   1                                                   0237
*         RESPECIFY                                                0238
*          (GPR00P,                                                0238
*           GPR01P) UNRESTRICTED;                                  0238
*       END;                        /* WAIT ECB(WTORECB) WAIT FOR  0239
*                                      OPERATOR REPLY                */
*       ASMSTGXA=ZERO;              /* ZER0 ASMVT POINTER TO ACB FOR
*                                      SYS1.STGINDEX                 */
         SLR   @10,@10                                             0240
         ST    @10,ASMSTGXA(,ASMVTPTR)                             0240
*       INTRTCD=RTCD0004;           /* SET INTERNAL RETURN CODE 4    */
         MVC   INTRTCD(4),@CF00095                                 0241
*     END;                                                         0242
         EJECT
*                                                                  0243
*/********************************************************************/
*/********************************************************************/
*/*   COLD/QUICK START VERSUS WARM START                             */
*/********************************************************************/
*/********************************************************************/
*                                                                  0243
*   ELSE                                                           0243
*     DO;                                                          0243
*                                                                  0243
         B     @RC00212                                            0243
@RF00212 DS    0H                                                  0244
*       /*************************************************************/
*       /*                                                           */
*       /* INITIALIZE THE 'S' SYMBOL GENERATOR VALUE IN THE ASMVT    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0244
*       ASMLSAIL=ZERO;              /* INITIALIZE LOW WORD OF 'S'  0244
*                                      SYMBOL GENERATOR VALUE TO ZERO*/
         SLR   @10,@10                                             0244
         ST    @10,ASMLSAIL(,ASMVTPTR)                             0244
*       ASMLSAIH=-ONE;              /* INITIALIZE HIGH WORD OF 'S' 0245
*                                      SYMBOL GENERATOR VALUE TO   0245
*                                      MINUS ONE                     */
*                                                                  0245
         MVC   ASMLSAIH(4,ASMVTPTR),@CF01653                       0245
*       /*************************************************************/
*       /*                                                           */
*       /* DETERMINE THE TYPE OF IPL. IF A COLD/QUICK START IS       */
*       /* REQUESTED, CALL CVIOSTRT TO CLEAR SYS1.STGINDEX. IF A WARM*/
*       /* START IS REQUESTED, CALL WARMSTRT TO RESTORE VIO DATA SET */
*       /* PAGES. IF WARM START FAILED, THEN PROCEED WITH A COLD     */
*       /* START BY CALLING CVIOSTRT TO CLEAR SYS1.STGINDEX.         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0246
*       IF TPARWARM=ON THEN                                        0246
         L     @10,TPARPTR                                         0246
         TM    TPARWARM(@10),B'10000000'                           0246
         BNO   @RF00246                                            0246
*         DO;                                                      0247
*           RFY                                                    0248
*            (WARMRTCD) RSTD;                                      0248
*           CALL WARMSTRT;          /* RESTORE VIO DATA SET PAGES    */
         BAL   @14,WARMSTRT                                        0249
*           EPAWARM=OFF;            /* TURN OFF THE WARM START FLAG
*                                      IN THE EPATH TO INDICATE THAT
*                                      ILRTMI00 IS NO LONGER IN    0250
*                                      WARMSTRT - RRR                */
         NI    EPAWARM(EPAPTR),B'10111111'                         0250
*           IF WARMRTCD^=ZERO THEN                                 0251
         LTR   WARMRTCD,WARMRTCD                                   0251
         BZ    @RF00251                                            0251
*             CALL CVIOSTRT;        /* CLEAR SYS1.STGINDEX           */
         BAL   @14,CVIOSTRT                                        0252
*           RFY                                                    0253
*            (WARMRTCD) UNRSTD;                                    0253
@RF00251 DS    0H                                                  0254
*         END;                                                     0254
*       ELSE                                                       0255
*         CALL CVIOSTRT;            /* CLEAR SYS1.STGINDEX           */
         B     @RC00246                                            0255
@RF00246 BAL   @14,CVIOSTRT                                        0255
*       EPACOLD=OFF;                /* TURN OFF THE COLD START FLAG
*                                      IN THE EPATH TO INDICATE THAT
*                                      ILRTMI00 IS NO LONGER IN    0256
*                                      CVIOSTRT - RRR                */
@RC00246 NI    EPACOLD(EPAPTR),B'11011111'                         0256
*       RFY                                                        0257
*        (RPLAREA@,                                                0257
*         IOBUFPTR) UNRSTD;                                        0257
         EJECT
*                                                                  0258
*/********************************************************************/
*/********************************************************************/
*/*   ENQUEUE ON SYS1.STGINDEX                                       */
*/********************************************************************/
*/********************************************************************/
*                                                                  0258
*       /*************************************************************/
*       /*                                                           */
*       /* IF SYS1.STGINDEX IS OPEN, THEN ISSUE AN ENQUEUE ON        */
*       /* SYS1.STGINDEX FOR EXCLUSIVE USE. IF ENQUEUE FAILED, TELL  */
*       /* THE OPERATOR AND THEN ASK THE OPERATOR WHETHER TO CONTINUE*/
*       /* WITHOUT VIO JOURNALING. IF THE OPERATOR DECIDES TO        */
*       /* CONTINUE, ZERO OUT THE ASMVT POINTER TO THE ACB FOR       */
*       /* SYS1.STGINDEX. IF THE ENQUEUE IS SUCCESSFUL, SET THE ASMVT*/
*       /* CONTROL INTERVAL FIELD AND THE ASMVT REQUEST COUNT FIELD. */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0258
*       IF ASMSTGXA^=ZERO THEN                                     0258
         L     @10,ASMSTGXA(,ASMVTPTR)                             0258
         LTR   @10,@10                                             0258
         BZ    @RF00258                                            0258
*         DO;                                                      0259
*           RFY                                                    0260
*            (ENQRTCD) RSTD;                                       0260
*           DO;                     /* ENQ MF(E,ENQLST)              */
*             RESPECIFY                                            0262
*              (GPR01P) RESTRICTED;                                0262
*             GPR01P=ADDR(ENQLST02);/* LOAD LIST ADDRESS             */
         LA    GPR01P,ENQLST02                                     0263
*             SVC(56);              /* ISSUE ENQ SVC                 */
         SVC   56                                                  0264
*             RESPECIFY                                            0265
*              (GPR01P) UNRESTRICTED;                              0265
*           END;                    /* ENQ MF(E,ENQLST)              */
*           IF ENQRTCD^=ZERO THEN                                  0267
         LTR   ENQRTCD,ENQRTCD                                     0267
         BZ    @RF00267                                            0267
*             DO;                                                  0268
*               RFY                                                0269
*                (ENQRTCD) UNRSTD;                                 0269
*               DO;                 /* WTOP MF(E,WTO20M)             */
*                 RFY                                              0271
*                   GPR01P RSTD;    /* RESTRICT REG 1                */
*                 GPR01P=ADDR(WTO20M);/* ADDRESS CONTROL PROGRAM LIST*/
         LA    GPR01P,WTO20M                                       0272
*                 SVC(35);          /* ISSUE WTO SVC                 */
         SVC   35                                                  0273
*                 RFY                                              0274
*                   GPR01P UNRSTD;  /* RELEASE REG 1                 */
*               END;                /* WTOP MF(E,WTO20M) TELL      0275
*                                      OPERATOR THAT ENQUEUE FAILED
*                                      FOR SYS1.STGINDEX             */
*               WTORECB=ZERO;       /* ZERO OUT WTORECB              */
         SLR   @10,@10                                             0276
         ST    @10,WTORECB                                         0276
*               DO;                 /* WTORP MF(E,WTO22M)            */
*                 RFY                                              0278
*                   GPR01P RSTD;    /* RESTRICT REG 1                */
*                 GPR01P=ADDR(WTO22M);/* ADDRESS CONTROL PROGRAM LIST*/
         LA    GPR01P,WTO22M                                       0279
*                 SVC(35);          /* ISSUE WTOR SVC                */
         SVC   35                                                  0280
*                 RFY                                              0281
*                   GPR01P UNRSTD;  /* RELEASE REG 1                 */
*               END;                /* WTORP MF(E,WTO22M) REQUEST A
*                                      DECISION FROM OPERATOR ON   0282
*                                      WHETHER TO CONTINUE WITHOUT 0282
*                                      VIO JOURNALING                */
*               DO;                 /* WAIT ECB(WTORECB)             */
*                 RESPECIFY                                        0284
*                  (GPR00P,                                        0284
*                   GPR01P) RESTRICTED;                            0284
*                 GPR00P=1;         /* LOAD WAIT COUNT               */
         LA    GPR00P,1                                            0285
*                 GPR01P=ADDR(WTORECB);/* ADDRESS OF ECB             */
         LA    GPR01P,WTORECB                                      0286
*                 SVC(1);           /* WAIT SVC                      */
         SVC   1                                                   0287
*                 RESPECIFY                                        0288
*                  (GPR00P,                                        0288
*                   GPR01P) UNRESTRICTED;                          0288
*               END;                /* WAIT ECB(WTORECB) WAIT FOR  0289
*                                      OPERATOR REPLY                */
*               ASMSTGXA=ZERO;      /* ZERO ASMVT POINTER TO ACB FOR
*                                      SYS1.STGINDEX                 */
         SLR   @10,@10                                             0290
         ST    @10,ASMSTGXA(,ASMVTPTR)                             0290
*               INTRTCD=INTRTCD×RTCD0032;/* ADJUST INTERNAL RETURN 0291
*                                      CODE                          */
         L     @10,INTRTCD                                         0291
         O     @10,@CF00340                                        0291
         ST    @10,INTRTCD                                         0291
*             END;                                                 0292
*           ELSE                                                   0293
*             DO;                                                  0293
         B     @RC00267                                            0293
@RF00267 DS    0H                                                  0294
*               ASMCINV=ARDERBA/(TWO*TWOK);/* SET THE NUMBER OF    0294
*                                      CONTROL INTERVALS IN        0294
*                                      SYS1.STGINDEX EQUAL TO HALF 0294
*                                      THE MAXIMUM NUMBER OF RECORDS
*                                      ALLOWED IN SYS1.STGINDEX    0294
*                                                            @ZA25814*/
         L     @10,AMBLPTR(,ACBAREA@)                              0294
         L     @10,AMBPTR(,@10)                                    0294
         L     @10,AMDSBPTR(,@10)                                  0294
         L     @10,ARDBPTR(,@10)                                   0294
         L     @10,ARDERBA(,@10)                                   0294
         SRL   @10,12                                              0294
         ST    @10,ASMCINV(,ASMVTPTR)                              0294
*               ASMREQCT=TWO;       /* SET NUMBER OF SIMULTANEOUS  0295
*                                      REQUESTS THAT ILRGOS00 CAN  0295
*                                      MAKE TO VSAM TO TWO (I.E., ONE
*                                      LESS THAN THE STRING NUMBER 0295
*                                      PARAMETER (STRNO) ON THE    0295
*                                      PERMANENT OPEN FOR          0295
*                                      SYS1.STGINDEX DONE BY EITHER
*                                      WARMSTRT OR CVIOSTRT)         */
         MVC   ASMREQCT(4,ASMVTPTR),@CF00092                       0295
*             END;                                                 0296
*         END;                                                     0297
@RC00267 DS    0H                                                  0298
*     END;                                                         0298
@RF00258 DS    0H                                                  0299
         EJECT
*                                                                  0299
*/********************************************************************/
*/********************************************************************/
*/*   BUILD DATA SET NAME LIST                                       */
*/********************************************************************/
*/********************************************************************/
*                                                                  0299
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD A LIST OF ALL PAGE AND SWAP DATA SET NAMES              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0299
*ILRCRTM3:                          /* RECOVERY RETRY POINT -- USED
*                                      SHOULD CVIOSTRT FAIL - RRR    */
*   CALL BUILDSNL;                  /* BUILD DATA SET NAME LIST      */
@RC00212 DS    0H                                                  0299
ILRCRTM3 BAL   @14,BUILDSNL                                        0299
*   EPABUILD=OFF;                   /* TURN OFF THE BUILD DSN FLAG IN
*                                      THE EPATH TO INDICATE THAT  0300
*                                      ILRTMI00 IS NO LONGER IN    0300
*                                      BUILDSNL - RRR                */
         NI    EPABUILD(EPAPTR),B'11101111'                        0300
*   EPADSLST=ZERO;                  /* ZERO THE EPATH POINTER TO THE
*                                      DATA SET NAME LIST - RRR      */
         SLR   @10,@10                                             0301
         ST    @10,EPADSLST(,EPAPTR)                               0301
         EJECT
*                                                                  0302
*/********************************************************************/
*/********************************************************************/
*/*   MISCELLANEOUS DUTIES                                           */
*/********************************************************************/
*/********************************************************************/
*                                                                  0302
*   /*****************************************************************/
*   /*                                                               */
*   /* DECREMENT THE ASMVT UNRESERVED SLOT COUNTER BY THE NUMBER OF  */
*   /* SLOTS NEEDED TO BACK THE MASTER SCHEDULER'S MEMORY USING      */
*   /* COMPARE & SWAP LOGIC                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0302
*ILRCRTM4:                          /* RECOVERY RETRY POINT -- USED
*                                      SHOULD BUILDSNL FAIL - RRR    */
*   RFY                                                            0302
*    (R0,                                                          0302
*     R1) RSTD;                                                    0302
ILRCRTM4 DS    0H                                                  0303
*   R0=ASMBKSLT;                    /* OBTAIN ASMVT UNRESERVED SLOT
*                                      COUNTER                       */
         L     R0,ASMBKSLT(,ASMVTPTR)                              0303
*STBKSLT1:                                                         0304
*   R1=R0-MSIBKSLT;                 /* DECREMENT COUNTER BY THE    0304
*                                      NUMBER OF SLOTS NEEDED TO BACK
*                                      UP THE MASTER SCHEDULER'S   0304
*                                      MEMORY                        */
STBKSLT1 LR    R1,R0                                               0304
         SL    R1,@CF00546                                         0304
*   CS(R0,R1,ASMBKSLT);             /* UPDATE ASMVT UNRESERVED SLOT
*                                      COUNT                         */
         CS    R0,@01,ASMBKSLT(ASMVTPTR)                           0305
*   BC(NE,STBKSLT1);                /* IF UNSUCCESSFUL, TRY AGAIN    */
         BC    7,STBKSLT1                                          0306
*   RFY                                                            0307
*    (R0,                                                          0307
*     R1) UNRSTD;                                                  0307
*                                                                  0307
*   /*****************************************************************/
*   /*                                                               */
*   /* MAKE LOCAL PAGE DATA SETS AVAILABLE FOR SLOT ALLOCATION       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0308
*   ASMNOLCL=OFF;                   /* BY NOW VIO SLOTS HAVE BEEN  0308
*                                      MARKED UNAVAILABLE, THEREFORE
*                                      TURN OFF THE NO LOCAL DATA  0308
*                                      PAGING FLAG -- THUS ALLOWING
*                                      SLOTS TO BE ALLOCATED TO LOCAL
*                                      PAGE DATA SETS.               */
*                                                                  0308
         NI    ASMNOLCL(ASMVTPTR),B'11011111'                      0308
*   /*****************************************************************/
*   /*                                                               */
*   /* WRITE TO THE OPERATOR THOSE MESSAGES, IF ANY, CONCERNING THE  */
*   /* STATUS OF THE PLPA, COMMON, OR DUPLEX PAGE DATA SETS.         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0309
*   CALL ILRMSGSP;                  /* WRITE INITIALIZATION MESSAGES */
         L     @15,ASMPMSGS(,ASMVTPTR)                             0309
         BALR  @14,@15                                             0309
         EJECT
*                                                                  0310
*/********************************************************************/
*/********************************************************************/
*/*   FREE TPARTBLE                                                  */
*/********************************************************************/
*/********************************************************************/
*                                                                  0310
*   /*****************************************************************/
*   /*                                                               */
*   /* RETURN THE STORAGE ASSOCIATED WITH THE TPARTBLE TO SQA        */
*   /* (SUBPOOL 245) VIA FREEMAIN.                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0310
*   RFY                                                            0310
*     FRMNRTCD RSTD;                                               0310
*   EPATPART=ZERO;                  /* ZERO THE EPATH POINTER TO THE
*                                      TPARTBLE - RRR                */
         SLR   @14,@14                                             0311
         ST    @14,EPATPART(,EPAPTR)                               0311
*   DO;                             /* FREEMAIN(RC) LV(LENGTH(TPARTBL
*                                      E))A(TPARTBLE) SP(245)        */
*     RESPECIFY                                                    0313
*      (GPR01F,                                                    0313
*       GPR15F,                                                    0313
*       GPR00F) RESTRICTED;                                        0313
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0314
*     GPR15F=1;                     /* SET TYPE                      */
         LA    GPR15F,1                                            0315
*     GPR00F=LENGTH(TPARTBLE);      /* LENGTH REQUESTED              */
         L     GPR00F,@CF01655                                     0316
*     GPR01F=ADDR(TPARTBLE);        /* SET REGISTER ONE              */
         L     GPR01F,TPARPTR                                      0317
*     GPR15F=GPR15F+((245)*256);    /* SUBPOOL VALUE                 */
         AL    GPR15F,@CF01652                                     0318
*     SVC(120);                     /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0319
*     RESPECIFY                                                    0320
*      (GPR01F,                                                    0320
*       GPR15F,                                                    0320
*       GPR00F) UNRESTRICTED;                                      0320
*   END;                            /* FREEMAIN(RC) LV(LENGTH(TPARTBL
*                                      E))A(TPARTBLE) SP(245) FREE 0321
*                                      TPARTBLE                      */
*   IF FRMNRTCD^=ZERO THEN                                         0322
         LTR   FRMNRTCD,FRMNRTCD                                   0322
         BZ    @RF00322                                            0322
*     INTRTCD=INTRTCD×RTCD0128;     /* ADJUST INTERNAL RETURN CODE   */
         L     @14,INTRTCD                                         0323
         O     @14,@CF01383                                        0323
         ST    @14,INTRTCD                                         0323
         EJECT
*                                                                  0324
*/********************************************************************/
*/********************************************************************/
*/*   FREE ACB BUILD AREA                                            */
*/********************************************************************/
*/********************************************************************/
*                                                                  0324
*   /*****************************************************************/
*   /*                                                               */
*   /* IF SYS1.STGINDEX WAS NOT OPENED, RETURN THE STORAGE ASSOCIATED*/
*   /* WITH THE ACB BUILD AREA TO SQA (SUBPOOL 245) VIA FREEMAIN.    */
*   /* SINCE NO VIO JOURNALING IS POSSIBLE, THE ASMVT NO ILRTMRLG    */
*   /* FLAG IS TURNED ON.                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0324
*   EPATMACB=ZERO;                  /* ZERO THE EPATH POINTER TO THE
*                                      ACB BUILD AREA - RRR          */
@RF00322 SLR   @14,@14                                             0324
         ST    @14,EPATMACB(,EPAPTR)                               0324
*   IF ASMSTGXA=ZERO THEN                                          0325
         C     @14,ASMSTGXA(,ASMVTPTR)                             0325
         BNE   @RF00325                                            0325
*     DO;                                                          0326
*       DO;                         /* FREEMAIN(RC) LV(LENGTH(ACBBARE
*                                      A))A(ACBBAREA) SP(245)        */
*         RESPECIFY                                                0328
*          (GPR01F,                                                0328
*           GPR15F,                                                0328
*           GPR00F) RESTRICTED;                                    0328
*         GPR01F=0;                 /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0329
*         GPR15F=1;                 /* SET TYPE                      */
         LA    GPR15F,1                                            0330
*         GPR00F=LENGTH(ACBBAREA);  /* LENGTH REQUESTED              */
         LA    GPR00F,76                                           0331
*         GPR01F=ADDR(ACBBAREA);    /* SET REGISTER ONE              */
         LR    GPR01F,ACBAREA@                                     0332
*         GPR15F=GPR15F+((245)*256);/* SUBPOOL VALUE                 */
         AL    GPR15F,@CF01652                                     0333
*         SVC(120);                 /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0334
*         RESPECIFY                                                0335
*          (GPR01F,                                                0335
*           GPR15F,                                                0335
*           GPR00F) UNRESTRICTED;                                  0335
*       END;                        /* FREEMAIN(RC) LV(LENGTH(ACBBARE
*                                      A))A(ACBBAREA) SP(245) FREE 0336
*                                      ACB BUILD AREA                */
*       IF FRMNRTCD^=ZERO THEN                                     0337
         LTR   FRMNRTCD,FRMNRTCD                                   0337
         BZ    @RF00337                                            0337
*         INTRTCD=INTRTCD×RTCD0128; /* ADJUST INTERNAL RETURN CODE   */
         L     @14,INTRTCD                                         0338
         O     @14,@CF01383                                        0338
         ST    @14,INTRTCD                                         0338
*       ASMNOTMR=ON;                /* TURN ON THE NO TASK MODE    0339
*                                      RELEASE FLAG IN THE ASMVT SO
*                                      THAT ITS ECB WILL NOT BE    0339
*                                      POSTED                        */
@RF00337 OI    ASMNOTMR(ASMVTPTR),B'00100000'                      0339
*     END;                                                         0340
*   RFY                                                            0341
*     ACBAREA@ UNRSTD;                                             0341
@RF00325 DS    0H                                                  0342
         EJECT
*                                                                  0342
*/********************************************************************/
*/********************************************************************/
*/*   FREE I/O BUFFER AND RPL BUILD AREA                             */
*/********************************************************************/
*/********************************************************************/
*                                                                  0342
*   /*****************************************************************/
*   /*                                                               */
*   /* RETURN THE STORAGE USED FOR THE I/O BUFFER AND THE RPL BUILD  */
*   /* AREA TO CSA (SUBPOOL 241) VIA FREEMAIN.                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0342
*   EPATMWKA=ZERO;                  /* ZERO THE EPATH POINTER TO THE
*                                      GETMAINED AREA CONTAINING THE
*                                      I/O BUFFER AND RPL BUILD AREA
*                                      - RRR                         */
         SLR   @14,@14                                             0342
         ST    @14,EPATMWKA(,EPAPTR)                               0342
*   DO;                             /* FREEMAIN(RC) LV(LENGTH(IOBUFFE
*                                      R)+LENGTH(RPLBAREA))A(GTMNAREA
*                                      ) SP(241)                     */
*     RESPECIFY                                                    0344
*      (GPR01F,                                                    0344
*       GPR15F,                                                    0344
*       GPR00F) RESTRICTED;                                        0344
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0345
*     GPR15F=1;                     /* SET TYPE                      */
         LA    GPR15F,1                                            0346
*     GPR00F=LENGTH(IOBUFFER)+LENGTH(RPLBAREA);/* LENGTH REQUESTED   */
         LA    GPR00F,2124                                         0347
*     GPR01F=ADDR(GTMNAREA);        /* SET REGISTER ONE              */
         L     GPR01F,GETAREA@                                     0348
*     GPR15F=GPR15F+((241)*256);    /* SUBPOOL VALUE                 */
         AL    GPR15F,@CF01651                                     0349
*     SVC(120);                     /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0350
*     RESPECIFY                                                    0351
*      (GPR01F,                                                    0351
*       GPR15F,                                                    0351
*       GPR00F) UNRESTRICTED;                                      0351
*   END;                            /* FREEMAIN(RC) LV(LENGTH(IOBUFFE
*                                      R)+LENGTH(RPLBAREA))A(GTMNAREA
*                                      ) SP(241) RETURN STORAGE      */
*   IF FRMNRTCD^=ZERO THEN                                         0353
         LTR   FRMNRTCD,FRMNRTCD                                   0353
         BZ    @RF00353                                            0353
*     INTRTCD=INTRTCD×RTCD0128;     /* ADJUST INTERNAL RETURN CODE   */
         L     @14,INTRTCD                                         0354
         O     @14,@CF01383                                        0354
         ST    @14,INTRTCD                                         0354
*   RFY                                                            0355
*     FRMNRTCD UNRSTD;                                             0355
@RF00353 DS    0H                                                  0356
*   EPATMIBA=ZERO;                  /* ZERO THE BASE REGISTER VALUE
*                                      FOR ILRTMI00 THAT IS IN THE 0356
*                                      EPATH - RRR                   */
         SLR   @10,@10                                             0356
         ST    @10,EPATMIBA(,EPAPTR)                               0356
*   EPATMI=OFF;                     /* TURN OFF THE TMI FLAG IN THE
*                                      EPATH TO INDICATE THAT      0357
*                                      ILRTMI00 IS NO LONGER       0357
*                                      PROCESSING - RRR              */
         NI    EPATMI(EPAPTR),B'11111011'                          0357
*   RETURN CODE(INTRTCD);           /* RETURN TO ILRTMRLG            */
         L     @15,INTRTCD                                         0358
         L     @13,4(,@13)                                         0358
         L     @14,12(,@13)                                        0358
         LM    @00,@12,20(@13)                                     0358
         BR    @14                                                 0358
         EJECT
*                                                                  0359
*/********************************************************************/
*/*                                                                  */
*/*   WARMSTRT:  WARM START PROCESSING OF SYS1.STGINDEX.             */
*/*                                                                  */
*/*   PROCESS:   GENCB IS ISSUED TO BUILD AN ACB FOR SYS1.STGINDEX.  */
*/*              SYS1.STGINDEX IS OPENED FOR UPDATE. A GENCB IS      */
*/*              ISSUED TO BUILD AN RPL AND THEN A VERIFY IS ISSUED  */
*/*              TO UPDATE THE CATALOG. A MODCB IS ISSUED TO CHANGE  */
*/*              THE RPL SO THAT KEYED ACCESS PROCESSING OF          */
*/*              SYS1.STGINDEX CAN TAKE PLACE. A GET IS ISSUSED      */
*/*              TO READ THE TIME STAMP RECORD (KEY ZERO) FROM       */
*/*              SYS1.STGINDEX. IF THE TIME STAMP FROM SYS1.STGINDEX */
*/*              AND THE TIME STAMP IN THE TPARTBLE DO NOT MATCH,    */
*/*              ASK THE OPERATOR WHETHER IT IS O.K. TO SWITCH TO    */
*/*              CVIO PROCESSING. IF THE OPERATOR DECIDES THAT IT    */
*/*              IS O.K., THEN FLOW EVENTUALLY CONINUES WITH         */
*/*              CVIOSTRT. IF THE TIME STAMPS DO MATCH, THEN A       */
*/*              MODCB IS ISSUED TO CHANGE THE RPL SO THAT ADDRESSED */
*/*              ACCESS PROCESSING OF SYS1.STGINDEX CAN TAKE PLACE.  */
*/*              A LOOP IS STARTED IN WHICH EACH RECORD IS READ IN   */
*/*              FROM SYS1.STGINDEX. FOR EACH SAVED ASPCT BASE, THE  */
*/*              INTERNAL BACKSLOT COUNTER AND SAVESLOT COUNTER ARE  */
*/*              INCREMENTED. FOR EACH ASPCT BASE AND LPME EXTENSION */
*/*              UPDTPATS IS CALLED TO UPDATE PAT MAPS FOR EACH      */
*/*              SAVED LSID.  IF A READ FROM SYS1.STGINDEX IS NOT    */
*/*              SUCCESSFUL OR IF A PAT POINTER CAN NOT BE FOUND FOR */
*/*              ONE OF THE LOCAL PART ENTRIES, ASK THE OPERATOR     */
*/*              WHETHER IT IS O.K. TO SWITCH TO CVIO PROCESSING.    */
*/*              IF THE OPERATOR DECIDES THAT IT IS O.K., THEN       */
*/*              BACKOUT IS CALLED TO RESET THE PAT MAPS AND FLOW    */
*/*              EVENTUALLY CONTINUES WITH CVIOSTRT. IF ALL READS    */
*/*              ARE SUCCESSFUL, THE INTERNAL BACKSLOT COUNTER IS    */
*/*              USED TO DECREMENT THE AVAILABLE SLOT COUNT IN THE   */
*/*              ASMVT AND THE INTERNAL SAVESLOT COUNTER IS USED TO  */
*/*              INCREMENT THE VIO SLOT COUNT IN THE ASMVT.          */
*/*              PROCESSING THEN CONTINUES BACK IN THE MAINLINE.     */
*/*                                                                  */
*/********************************************************************/
*                                                                  0359
*WARMSTRT:                                                         0359
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0359
WARMSTRT DS    0H                                                  0360
         EJECT
*                                                                  0360
*/********************************************************************/
*/********************************************************************/
*/*   OPEN SYS1.STGINDEX                                             */
*/********************************************************************/
*/********************************************************************/
*                                                                  0360
*   RFY                                                            0360
*    (ACBAREA@,                                                    0360
*     IOBUFPTR,                                                    0360
*     RPLAREA@) RSTD;                                              0360
*   RFY                                                            0361
*     R14 RSTD;                                                    0361
*   SAVRET1=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,SAVRET1                                         0362
*   RFY                                                            0363
*     R14 UNRSTD;                                                  0363
*   EPATMIRT=ADDR(ILRCRTM2);        /* SET CURRENT RETRY ADDRESS IN
*                                      EPATH - RRR                   */
         LA    @10,ILRCRTM2                                        0364
         ST    @10,EPATMIRT(,EPAPTR)                               0364
*   EPAWARM=ON;                     /* TURN ON THE WARM START FLAG IN
*                                      THE EPATH TO INDICATE THAT  0365
*                                      ILRTMI00 IS IN WARMSTRT - RRR */
         OI    EPAWARM(EPAPTR),B'01000000'                         0365
*   RESETFLG=OFF;                   /* TURN OFF RESET FLAG INDICATING
*                                      THAT THE LOCAL PAT MAPS NEED
*                                      NOT BE RESET SHOULD AN ERROR
*                                      OCCUR                         */
*                                                                  0366
         MVI   RESETFLG,X'00'                                      0366
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD AN ACB FOR SYS1.STGINDEX. THIS ACB WILL BE USED TO OPEN */
*   /* SYS1.STGINDEX WITH ADDRESSED ACCESS, CONTROL-INTERVAL ACCESS, */
*   /* AND KEYED ACCESS OPTIONS.                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0367
*   RFY                                                            0367
*    (R0,                                                          0367
*     ACBPTR,                                                      0367
*     GENRTCD) RSTD;                                               0367
*   R0=LENGTH(ACBBAREA);                                           0368
         LA    R0,76                                               0368
*   GEN REFS(R0,ACBAREA@);                                         0369
         GENCB BLK=ACB,AM=VSAM,BUFND=4,BUFNI=3,BUFSP=6*2048,          XX
               CATALOG=YES,DDNAME=STGINDEX,LENGTH=(R0),               XX
               MACRF=(ADR,CNV,KEY,NFX,DDN,NDF,DIR,SEQ,NCI,OUT,NIS,    XX
               NRM,NRS,NSR,NUB),STRNO=3,WAREA=(ACBAREA@)
*   IF GENRTCD^=ZERO THEN                                          0370
         LTR   GENRTCD,GENRTCD                                     0370
         BNZ   @RT00370                                            0370
*     GO TO WARMERR;                /* BRANCH TO COMMON ERROR CODE 0371
*                                      FOR WARMSTRT                  */
*   RFY                                                            0372
*    (R0,                                                          0372
*     GENRTCD) UNRSTD;                                             0372
*   ACBSDS=ON;                      /* TURN ON THE APPROPRIATE FLAG
*                                      IN THE ACB SO THAT          0373
*                                      SYS1.STGINDEX IS OPENED AS A
*                                      SYSTEM DATA SET -- NO KEYWORD
*                                      PROVIDED FOR IN GENCB         */
*                                                                  0373
         OI    ACBSDS(ACBAREA@),B'00000010'                        0373
*   /*****************************************************************/
*   /*                                                               */
*   /* OPEN SYS1.STGINDEX WITH ADDRESSED ACCESS, CONTROL-INTERVAL    */
*   /* ACCESS, AND KEYED ACCESS OPTIONS. IF OPEN IS NOT SUCCESSFUL,  */
*   /* ISSUE A SHOWCB TO DETERMINE THE TYPE OF ERROR. IF RETRY IS    */
*   /* POSSIBLE, ISSUE ANOTHER OPEN FOR SYS1.STGINDEX. IF RETRY IS   */
*   /* NOT POSSIBLE, PERFORM COMMON ERROR CODE FOR WARMSTRT AND      */
*   /* RETURN TO MAINLINE.                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0374
*   RETRYCNT=ZERO;                  /* INITIALIZE RETRY COUNT TO ZERO*/
         SLR   RETRYCNT,RETRYCNT                                   0374
*   RETRYFLG=ON;                    /* SET RETRY FLAG ON             */
         LA    RETRYFLG,1                                          0375
*   DO WHILE(RETRYFLG=ON);                                         0376
         B     @DE00376                                            0376
@DL00376 DS    0H                                                  0377
*     RETRYCNT=RETRYCNT+ONE;        /* INCREMENT RETRY COUNT BY ONE  */
         AL    RETRYCNT,@CF00052                                   0377
*     RETRYFLG=OFF;                 /* FORCE END OF RETRY LOOP       */
         SLR   RETRYFLG,RETRYFLG                                   0378
*     RFY                                                          0379
*      (OPENRTCD) RSTD;                                            0379
*     GEN REFS(ACBPTR) SETS(OPENRTCD);                             0380
*                                                                  0380
         OPEN  ((ACBPTR))      /* OPEN SYS1.STGINDEX WITH ADDRESSED   XX
                                  ACCESS, CONTROL-INTERVAL ACCESS,    XX
                                  AND KEYED ACCESS OPTIONS          */
*     /***************************************************************/
*     /*                                                             */
*     /* IF OPEN WAS UNSUCCESSFUL, ISSUE A SHOWCB TO OBTAIN THE CODE */
*     /* RETURNED FROM VSAM. THIS RETURN CODE IS USED TO DETERMINE   */
*     /* WHETHER RETRY IS POSSIBLE. IF OPEN WAS SUCCESSFUL, FALL THRU*/
*     /* THE RETRY LOOP.                                             */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0381
*     IF OPENRTCD>RTCD0004 THEN                                    0381
         LA    @14,4                                               0381
         CR    OPENRTCD,@14                                        0381
         BNH   @RF00381                                            0381
*       DO;                                                        0382
*         RFY                                                      0383
*          (OPENRTCD) UNRSTD;                                      0383
*         RFY                                                      0384
*          (R0,                                                    0384
*           R1) RSTD;                                              0384
*         R0=LENGTH(VSAMRTCD);                                     0385
         LR    R0,@14                                              0385
*         R1=ADDR(VSAMRTCD);                                       0386
         LA    R1,VSAMRTCD                                         0386
*         GEN REFS(R0,R1,ACBPTR) SETS(VSAMRTCD);                   0387
         SHOWCB ACB=(ACBPTR),AREA=(R1),LENGTH=(R0),FIELDS=ERROR
*         RFY                                                      0388
*          (R0,                                                    0388
*           R1) UNRSTD;                                            0388
*                                                                  0388
*         /***********************************************************/
*         /*                                                         */
*         /* IF THE MAXIMUM NUMBER OF RETRIES HAS NOT BEEN REACHED OR*/
*         /* A RETRYABLE RETURN CODE IS RECEIVED FROM VSAM, TURN     */
*         /* RETRY FLAG ON IN ORDER TO RETRY OPEN. IF RETRY IS NOT   */
*         /* POSSIBLE, BRANCH TO COMMON ERROR CODE FOR WARMSTRT.     */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0389
*         IF(RETRYCNT<=RETRYMAX)&(VSAMRTCD=RTCD0136×VSAMRTCD=RTCD0148×
*             VSAMRTCD=RTCD0176×VSAMRTCD=RTCD0236×VSAMRTCD=RTCD0244)
*           THEN                                                   0389
         C     RETRYCNT,@CF00291                                   0389
         BH    @RF00389                                            0389
         L     @10,VSAMRTCD                                        0389
         C     @10,@CF01385                                        0389
         BE    @RT00389                                            0389
         C     @10,@CF01387                                        0389
         BE    @RT00389                                            0389
         C     @10,@CF01389                                        0389
         BE    @RT00389                                            0389
         C     @10,@CF01391                                        0389
         BE    @RT00389                                            0389
         C     @10,@CF01393                                        0389
         BNE   @RF00389                                            0389
@RT00389 DS    0H                                                  0390
*           RETRYFLG=ON;            /* FORCE RETRY LOOP              */
         LA    RETRYFLG,1                                          0390
*         ELSE                                                     0391
*           GO TO WARMERR;          /* BRANCH TO COMMON ERROR CODE 0391
*                                      FOR WARMSTRT                  */
*       END;                                                       0392
*   END;                            /* END OF RETRY LOOP             */
@RF00381 DS    0H                                                  0393
@DE00376 C     RETRYFLG,@CF00236                                   0393
         BE    @DL00376                                            0393
*   ASMSTGXA=ACBPTR;                /* PLACE POINTER TO ACB FOR    0394
*                                      SYS1.STGINDEX INTO THE ASMVT  */
         ST    ACBPTR,ASMSTGXA(,ASMVTPTR)                          0394
         EJECT
*                                                                  0395
*/********************************************************************/
*/********************************************************************/
*/*   VERIFY SYS1.STGINDEX                                           */
*/********************************************************************/
*/********************************************************************/
*                                                                  0395
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD AN RPL FOR VERIFYING SYS1.STGINDEX.                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0395
*   RFY                                                            0395
*    (R0,                                                          0395
*     R1,                                                          0395
*     GENRTCD) RSTD;                                               0395
*   R0=LENGTH(RPLBAREA);                                           0396
         LA    R0,76                                               0396
*   R1=ADDR(VSAMKEY);                                              0397
         LA    R1,VSAMKEY                                          0397
*   GEN REFS(R0,R1,ACBPTR,IOBUFPTR,RPLAREA@);                      0398
         GENCB BLK=RPL,ACB=(ACBPTR),AM=VSAM,AREA=(IOBUFPTR),          XX
               AREALEN=2048,ARG=(R1),COPIES=1,LENGTH=(R0),            XX
               OPTCD=(CNV,DIR,ARD,FWD,SYN,NUP,FKS,MVE),               XX
               RECLEN=2041,WAREA=(RPLAREA@)
*   IF GENRTCD^=ZERO THEN                                          0399
         LTR   GENRTCD,GENRTCD                                     0399
         BNZ   @RT00399                                            0399
*     GO TO WARMERR;                /* BRANCH TO COMMON ERROR CODE 0400
*                                      FOR WARMSTRT                  */
*   RFY                                                            0401
*    (R0,                                                          0401
*     R1,                                                          0401
*     GENRTCD) UNRSTD;                                             0401
*                                                                  0401
*   /*****************************************************************/
*   /*                                                               */
*   /* UPDATE CATALOG INFORMATION ABOUT SYS1.STGINDEX VIA VERIFY.    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0402
*   RFY                                                            0402
*    (VERFRTCD) RSTD;                                              0402
*   GEN REFS(RPLPTR) SETS(VERFRTCD);                               0403
         VERIFY RPL=(RPLPTR)
*   IF VERFRTCD^=ZERO THEN                                         0404
         LTR   VERFRTCD,VERFRTCD                                   0404
         BNZ   @RT00404                                            0404
*     GO TO WARMERR;                /* BRANCH TO COMMON ERROR CODE 0405
*                                      FOR WARMSTRT                  */
*   RFY                                                            0406
*    (VERFRTCD) UNRSTD;                                            0406
         EJECT
*                                                                  0407
*/********************************************************************/
*/********************************************************************/
*/*   READ AND PROCESS TIME STAMP RECORD                             */
*/********************************************************************/
*/********************************************************************/
*                                                                  0407
*   /*****************************************************************/
*   /*                                                               */
*   /* MODIFY THE RPL FOR SYS1.STGINDEX SO THAT KEYS ARE USED AS     */
*   /* SEARCH ARGUMENTS IN READING SYS1.STGINDEX.                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0407
*   RFY                                                            0407
*    (MODRTCD) RSTD;                                               0407
*   GEN REFS(RPLPTR) SETS(MODRTCD);                                0408
         MODCB RPL=(RPLPTR),OPTCD=(KEY)
*   IF MODRTCD^=ZERO THEN                                          0409
         LTR   MODRTCD,MODRTCD                                     0409
         BNZ   @RT00409                                            0409
*     GO TO WARMERR;                /* BRANCH TO COMMON ERROR CODE 0410
*                                      FOR WARMSTRT                  */
*   RFY                                                            0411
*    (MODRTCD) UNRSTD;                                             0411
*                                                                  0411
*   /*****************************************************************/
*   /*                                                               */
*   /* READ IN THE TIME STAMP RECORD (KEY ZERO) FROM SYS1.STGINDEX.  */
*   /* IF GET IS NOT SUCCESSFUL, ISSUE A SHOWCB TO DETERMINE THE TYPE*/
*   /* OF ERROR. IF RETRY IS POSSIBLE, ISSUE ANOTHER GET. IF RETRY IS*/
*   /* NOT POSSIBLE, PERFORM COMMON ERROR CODE FOR WARMSTRT.         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0412
*   VSAMKEY=KEYZERO;                /* SET VSAM KEY TO KEY ZERO      */
         MVC   VSAMKEY(12),@CB01358                                0412
*   RETRYCNT=ZERO;                  /* INITIALIZE RETRY COUNT TO ZERO*/
         SLR   RETRYCNT,RETRYCNT                                   0413
*   RETRYFLG=ON;                    /* SET RETRY FLAG ON             */
         LA    RETRYFLG,1                                          0414
*   DO WHILE(RETRYFLG=ON);                                         0415
         B     @DE00415                                            0415
@DL00415 DS    0H                                                  0416
*     RETRYCNT=RETRYCNT+ONE;        /* INCREMENT RETRY COUNT BY ONE  */
         AL    RETRYCNT,@CF00052                                   0416
*     RETRYFLG=OFF;                 /* FORCE END OF RETRY LOOP       */
         SLR   RETRYFLG,RETRYFLG                                   0417
*     RFY                                                          0418
*      (GETRTCD) RSTD;                                             0418
*     GEN REFS(RPLPTR) SETS(GETRTCD);                              0419
*                                                                  0419
         GET   RPL=(RPLPTR)      /* READ TIME STAMP RECORD */
*     /***************************************************************/
*     /*                                                             */
*     /* IF GET WAS UNSUCCESSFUL BECAUSE OF A LOGICAL ERROR (RETURN  */
*     /* CODE 8), THEN ISSUE A SHOWCB TO OBTAIN THE FEEDBACK CODE    */
*     /* FROM VSAM TO DETERMINE IF RETRY IS POSSIBLE. IF GET WAS     */
*     /* UNSUCCESSFUL BECAUSE OF A PHYSICAL ERROR (RETURN CODE 4) OR */
*     /* BECAUSE THE RPL WAS ACTIVE FOR ANOTHER REQUEST (RETURN CODE */
*     /* 12), THEN BRANCH TO COMMON ERROR CODE FOR WARMSTRT. IF GET  */
*     /* WAS SUCCESSFUL, FALL THRU RETRY LOOP.                       */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0420
*     IF GETRTCD>=RTCD0004 THEN                                    0420
         LA    @14,4                                               0420
         CR    GETRTCD,@14                                         0420
         BL    @RF00420                                            0420
*       DO;                                                        0421
*         IF GETRTCD^=RTCD0008 THEN                                0422
         C     GETRTCD,@CF00037                                    0422
         BNE   @RT00422                                            0422
*           GO TO WARMERR;          /* BRANCH TO COMMON ERROR CODE 0423
*                                      FOR WARMSTRT                  */
*         RFY                                                      0424
*          (GETRTCD) UNRSTD;                                       0424
*         RFY                                                      0425
*          (R0,                                                    0425
*           R1) RSTD;                                              0425
*         R0=LENGTH(FDBKCODE);                                     0426
         LR    R0,@14                                              0426
*         R1=ADDR(FDBKCODE);                                       0427
         LA    R1,FDBKCODE                                         0427
*         GEN REFS(R0,R1,ACBPTR) SETS(FDBKCODE);                   0428
         SHOWCB RPL=(RPLPTR),AREA=(R1),LENGTH=(R0),FIELDS=FDBK
*         RFY                                                      0429
*          (R0,                                                    0429
*           R1) UNRSTD;                                            0429
*                                                                  0429
*         /***********************************************************/
*         /*                                                         */
*         /* IF THE MAXIMUM NUMBER OF RETRIES HAS NOT BEEN REACHED   */
*         /* AND A RETRYABLE RETURN CODE IS RECEIVED FROM VSAM, TURN */
*         /* THE RETRY FLAG ON IN ORDER TO RETRY GET. IF RETRY IS NOT*/
*         /* POSSIBLE, BRANCH TO COMMON ERROR CODE FOR WARMSTRT.     */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0430
*         IF(RETRYCNT<=RETRYMAX)&(FDBKCODE=INSUFSTG×FDBKCODE=TOOMANY)
*           THEN                                                   0430
         C     RETRYCNT,@CF00291                                   0430
         BH    @RF00430                                            0430
         L     @10,FDBKCODE                                        0430
         C     @10,@CF00585                                        0430
         BE    @RT00430                                            0430
         C     @10,@CF00575                                        0430
         BNE   @RF00430                                            0430
@RT00430 DS    0H                                                  0431
*           RETRYFLG=ON;            /* FORCE RETRY LOOP              */
         LA    RETRYFLG,1                                          0431
*         ELSE                                                     0432
*           GO TO WARMERR;          /* BRANCH TO COMMON CODE FOR   0432
*                                      WARMSTRT                      */
*       END;                                                       0433
*   END;                            /* END OF RETRY LOOP             */
*                                                                  0434
@RF00420 DS    0H                                                  0434
@DE00415 C     RETRYFLG,@CF00236                                   0434
         BE    @DL00415                                            0434
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THE TIME STAMP IN THE TPARTBLE DOES NOT MATCH THAT IN THE  */
*   /* TIME STAMP RECORD, THEN PERFORM THE COMMON ERROR CODE FOR     */
*   /* WARMSTRT. IF THEY DO MATCH, THEN READ IN ALL SAVED ASPCT'S AND*/
*   /* UPDATE THE PAT MAPS AS WELL AS THE AVAILABLE SLOT COUNT IN    */
*   /* EACH PART ENTRY. THE ASMVT UNRESERVED SLOT COUNTER AND THE    */
*   /* ASMVT VIO COUNT ARE ALSO UPDATED.                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0435
*   IF TPARTIME^=IOBTIME THEN                                      0435
         L     @10,TPARPTR                                         0435
         CLC   TPARTIME(8,@10),IOBTIME(IOBUFPTR)                   0435
         BNE   @RT00435                                            0435
*     GO TO WARMERR;                /* BRANCH TO COMMON ERROR CODE 0436
*                                      FOR WARMSTRT                  */
         EJECT
*                                                                  0437
*/********************************************************************/
*/********************************************************************/
*/*   PREPARE FOR SEQUENTIAL READ OF SYS1.STGINDEX                   */
*/********************************************************************/
*/********************************************************************/
*                                                                  0437
*   /*****************************************************************/
*   /*                                                               */
*   /* MODIFY THE RPL FOR SYS1.STGINDEX SO THAT RBA'S ARE USED AS    */
*   /* SEARCH ARGUMENTS IN READING SYS1.STGINDEX.                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0437
*   RFY                                                            0437
*    (R1,                                                          0437
*     MODRTCD) RSTD;                                               0437
*   R1=ADDR(RBA);                                                  0438
         LA    R1,RBA                                              0438
*   GEN REFS(RPLPTR) SETS(MODRTCD);                                0439
         MODCB RPL=(RPLPTR),ARG=(R1),OPTCD=(ADR)
*   RFY                                                            0440
*    (R1) UNRSTD;                                                  0440
*   IF MODRTCD^=ZERO THEN                                          0441
         SLR   @14,@14                                             0441
         CR    MODRTCD,@14                                         0441
         BNE   @RT00441                                            0441
*     GO TO WARMERR;                /* BRANCH TO COMMON ERROR CODE 0442
*                                      FOR WARMSTRT                  */
*   RFY                                                            0443
*    (MODRTCD) UNRSTD;                                             0443
*                                                                  0443
*   /*****************************************************************/
*   /*                                                               */
*   /* SET SLOTV TO THE ILRSLOTV CONSTANT. IF THE CONSTANT IS ZERO,  */
*   /* THEN SET SLOTV TO ONE.                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0444
*   SLOTV=ILRSLOTV;                 /* SET SLOTV TO THE VALUE OF   0444
*                                      ILRSLOTV                      */
         L     @10,ASMSLOTV(,ASMVTPTR)                             0444
         L     @10,ILRSLOTV(,@10)                                  0444
         ST    @10,SLOTV                                           0444
*   IF SLOTV=ZERO THEN                                             0445
         CR    @10,@14                                             0445
         BNE   @RF00445                                            0445
*     SLOTV=ONE;                    /* SET SLOTV TO ONE              */
*                                                                  0446
         MVC   SLOTV(4),@CF00052                                   0446
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE BACKLSOT COUNTER AND SAVSLOT COUNTER TO ZERO. TURN */
*   /* RESET FLAG ON.                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0447
*   BACKSLOT=ZERO;                  /* INITIALIZE BACKSLOT COUNTER TO
*                                      ZERO                          */
@RF00445 SLR   @10,@10                                             0447
         ST    @10,BACKSLOT                                        0447
*   SAVESLOT=ZERO;                  /* INITIALIZE SAVESLOT COUNTER TO
*                                      ZERO                          */
         ST    @10,SAVESLOT                                        0448
*   RESETFLG=ON;                    /* TURN ON RESET FLAG INDICATING
*                                      THAT ALL LOCAL PAT MAPS NEED
*                                      TO BE RESET SHOULD AN ERROR 0449
*                                      OCCUR WHILE READING A SAVED 0449
*                                      ASPCT FROM SYS1.STGINDEX OR 0449
*                                      SHOULD A PAT POINTER NOT BE 0449
*                                      FOUND FOR ONE OF THE LOCAL  0449
*                                      PART ENTRIES BY UPDTPATS      */
         MVI   RESETFLG,X'01'                                      0449
         EJECT
*                                                                  0450
*/********************************************************************/
*/********************************************************************/
*/*   READ ALL RECORDS OUT ON SYS1.STGINDEX                          */
*/********************************************************************/
*/********************************************************************/
*                                                                  0450
*   RFY                                                            0450
*    (ASPCTPTR,                                                    0450
*     ASPEXPTR) RSTD;                                              0450
*                                                                  0450
*   /*****************************************************************/
*   /*                                                               */
*   /* READ IN EACH RECORD THAT IS OUT ON SYS1.STGINDEX.             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0451
*   MAXRBA=ARDERBA;                 /* OBTAIN THE HIGH ALLOCATED RBA
*                                      FROM THE ARDB FOR           0451
*                                      SYS1.STGINDEX                 */
         L     @10,AMBLPTR(,ACBAREA@)                              0451
         L     @10,AMBPTR(,@10)                                    0451
         L     @10,AMDSBPTR(,@10)                                  0451
         L     @10,ARDBPTR(,@10)                                   0451
         L     @10,ARDERBA(,@10)                                   0451
         ST    @10,MAXRBA                                          0451
*   DO RBA=TWOK BY TWOK TO MAXRBA;                                 0452
*                                                                  0452
         LA    @10,2048                                            0452
         ST    @10,RBA                                             0452
         B     @DE00452                                            0452
@DL00452 DS    0H                                                  0453
*     /***************************************************************/
*     /*                                                             */
*     /* READ IN NEXT SEQUENTIAL RECORD FROM SYS1.STGINDEX. IF GET IS*/
*     /* NOT SUCCESSFUL, ISSUE A SHOWCB TO DETERMINE THE TYPE OF     */
*     /* ERROR. IF RETRY IS POSSIBLE, ISSUE ANOTHER GET. IF RETRY IS */
*     /* NOT POSSIBLE, PERFORM COMMON ERROR CODE FOR WARMSTRT.       */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0453
*     ASPIDENT=ZERO;                /* MAKE SURE THAT THE CONTENTS OF
*                                      THE I/O BUFFER WILL NOT BE  0453
*                                      MISTAKEN FOR AN ASPCT BASE OR
*                                      AN LPME EXTENSION             */
         SLR   @10,@10                                             0453
         ST    @10,ASPIDENT(,ASPCTPTR)                             0453
*     RETRYCNT=ZERO;                /* INITIALIZE RETRY COUNT TO ZERO*/
         SLR   RETRYCNT,RETRYCNT                                   0454
*     RETRYFLG=ON;                  /* SET RETRY FLAG ON             */
         LA    RETRYFLG,1                                          0455
*     DO WHILE(RETRYFLG=ON);                                       0456
         B     @DE00456                                            0456
@DL00456 DS    0H                                                  0457
*       RETRYCNT=RETRYCNT+ONE;      /* INCREMENT RETRY COUNT BY ONE  */
         AL    RETRYCNT,@CF00052                                   0457
*       RETRYFLG=OFF;               /* FORCE END OF RETRY LOOP       */
         SLR   RETRYFLG,RETRYFLG                                   0458
*       RFY                                                        0459
*        (GETRTCD) RSTD;                                           0459
*       GEN REFS(RPLPTR) SETS(GETRTCD);                            0460
*                                                                  0460
        GET RPL=(RPLPTR)   /* READ NEXT RECORD FROM SYS1.STGINDEX */
*       /*************************************************************/
*       /*                                                           */
*       /* IF GET WAS UNSUCCESSFUL BECAUSE OF A LOGICAL ERROR (RETURN*/
*       /* CODE 8), THEN ISSUE A SHOWCB TO OBTAIN THE FEEDBACK CODE  */
*       /* FROM VSAM TO DETERMINE IF RETRY IS POSSIBLE. IF GET WAS   */
*       /* UNSUCCESSFUL BECAUSE OF A PHSICAL ERROR (RETURN CODE 4) OR*/
*       /* BECAUSE THE RPL WAS ACTIVE FOR ANOTHER REQUEST (RETURN    */
*       /* CODE 12), THEN BRANCH TO COMMON ERROR CODE FOR WARMSTRT.  */
*       /* IF GET WAS SUCCESSFUL, FALL THRU RETRY LOOP.              */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0461
*       IF GETRTCD>=RTCD0004 THEN                                  0461
         LA    @14,4                                               0461
         CR    GETRTCD,@14                                         0461
         BL    @RF00461                                            0461
*         DO;                                                      0462
*           IF GETRTCD^=RTCD0008 THEN                              0463
         C     GETRTCD,@CF00037                                    0463
         BNE   @RT00463                                            0463
*             GO TO WARMERR;        /* BRANCH TO COMMON ERROR CODE 0464
*                                      FOR WARMSTRT                  */
*           RFY                                                    0465
*            (GETRTCD) UNRSTD;                                     0465
*           RFY                                                    0466
*            (R0,                                                  0466
*             R1) RSTD;                                            0466
*           R0=LENGTH(FDBKCODE);                                   0467
         LR    R0,@14                                              0467
*           R1=ADDR(FDBKCODE);                                     0468
         LA    R1,FDBKCODE                                         0468
*           GEN REFS(R0,R1,RPLPTR) SETS(FDBKCODE);                 0469
         SHOWCB RPL=(RPLPTR),AREA=(R1),LENGTH=(R0),FIELDS=FDBK
*           RFY                                                    0470
*            (R0,                                                  0470
*             R1) UNRSTD;                                          0470
*                                                                  0470
*           /*********************************************************/
*           /*                                                       */
*           /* IF THE END OF DATA RETURN CODE IS RECEIVED FROM VSAM, */
*           /* THEN BRANCH TO UPDATE THE UNRESERVED SLOT COUNT AND   */
*           /* THE VIO COUNT IN THE ASMVT.                           */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0471
*           IF FDBKCODE=ENDDATA THEN                               0471
         L     @10,FDBKCODE                                        0471
         C     @10,@CF00095                                        0471
         BE    @RT00471                                            0471
*             GO TO UPDTCNTS;       /* BRANCH TO UPDATE COUNTERS IN
*                                      THE ASMVT                     */
*                                                                  0472
*           /*********************************************************/
*           /*                                                       */
*           /* IF THE RBA DOES NOT GIVE THE ADDRESS OF ANY RECORD IN */
*           /* THE DATA SET, THEN LEAVE THE RETRY LOOP AND ATTEMPT TO*/
*           /* READ THE NEXT SEQUENTIAL RECORD FROM SYS1.STGINDEX.   */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0473
*           IF FDBKCODE^=NORECORD THEN                             0473
         C     @10,@CF00340                                        0473
         BE    @RF00473                                            0473
*             DO;                                                  0474
*                                                                  0474
*               /*****************************************************/
*               /*                                                   */
*               /* IF THE MAXIMUM NUMBER OF RETRIES HAS NOT BEEN     */
*               /* REACHED AND A RETRYABLE RETURN CODE IS RECEIVED   */
*               /* FROM VSAM, TURN THE RETRY FLAG ON IN ORDER TO     */
*               /* RETRY GET. IF RETRY IS NOT POSSIBLE, THEN BRANCH  */
*               /* TO COMMON ERROR CODE FOR WARMSTRT.                */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0475
*               IF(RETRYCNT<=RETRYMAX)&(FDBKCODE=INSUFSTG×FDBKCODE=
*                   TOOMANY) THEN                                  0475
         C     RETRYCNT,@CF00291                                   0475
         BH    @RF00475                                            0475
         C     @10,@CF00585                                        0475
         BE    @RT00475                                            0475
         C     @10,@CF00575                                        0475
         BNE   @RF00475                                            0475
@RT00475 DS    0H                                                  0476
*                 RETRYFLG=ON;      /* FORCE RETRY LOOP              */
         LA    RETRYFLG,1                                          0476
*               ELSE                                               0477
*                 GO TO WARMERR;    /* BRANCH TO COMMON ERROR CODE 0477
*                                      FOR WARMSTRT                  */
*             END;                                                 0478
*         END;                                                     0479
@RF00473 DS    0H                                                  0480
*     END;                          /* END OF RETRY LOOP             */
@RF00461 DS    0H                                                  0480
@DE00456 C     RETRYFLG,@CF00236                                   0480
         BE    @DL00456                                            0480
         EJECT
*                                                                  0481
*/********************************************************************/
*/********************************************************************/
*/*   UPDATE COUNTERS, 'S' SYMBOL GENERATOR, AND PAT MAPS            */
*/********************************************************************/
*/********************************************************************/
*                                                                  0481
*     /***************************************************************/
*     /*                                                             */
*     /* IF THE RECORD CONTAINS AN ASPCT BASE, THEN UPDATE THE       */
*     /* BACKSLOT COUNTER BY THE NUMBER OF SLOTS NEEDED TO BACK UP   */
*     /* THIS LOGICAL GROUP (ASPMAXPN/SLOTV), UPDATE THE SAVESLOT    */
*     /* COUNTER BY THE SAVE COUNT IN THE ASPCT (ASPSAVCT), UPDATE   */
*     /* THE 'S' SYMBOL IN THE ASMVT BY THE 'S' SYMBOL CONTAINED IN  */
*     /* THE ASPCT IF THE 'S' SYMBOL IN THE ASPCT IS GREATER THAN    */
*     /* THAT IN THE ASMVT AND LASTLY UPDATE THE PAT MAPS AS WELL AS */
*     /* DECREMENT THE AVAILABLE SLOT COUNT IN EACH PART ENTRY. IF   */
*     /* THE RECORD CONTAINS AN LPME EXTENSION, THEN JUST SIMPLY     */
*     /* UPDATE THE PAT MAPS AND DECREMENT THE AVAILABLE SLOT COUNT  */
*     /* IN EACH PART ENTRY.                                         */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0481
*     IF ASPIDENT=ASPCTID×ASPEIDNT=LPMEXTID THEN                   0481
         CLC   ASPIDENT(4,ASPCTPTR),@CC01345                       0481
         BE    @RT00481                                            0481
         CLC   ASPEIDNT(4,ASPEXPTR),@CC01361                       0481
         BNE   @RF00481                                            0481
@RT00481 DS    0H                                                  0482
*       DO;                                                        0482
*         IF ASPIDENT=ASPCTID THEN                                 0483
         CLC   ASPIDENT(4,ASPCTPTR),@CC01345                       0483
         BNE   @RF00483                                            0483
*           DO;                                                    0484
*             BACKSLOT=BACKSLOT+(ASPMAXPN/SLOTV);/* UPDATE BACKSLOT
*                                      COUNTER BY THE NUMBER OF SLOTS
*                                      NEEDED TO BACK UP THIS LOGICAL
*                                      GROUP                         */
         L     @01,ASPMAXPN(,ASPCTPTR)                             0485
         SLR   @00,@00                                             0485
         D     @00,SLOTV                                           0485
         AL    @01,BACKSLOT                                        0485
         ST    @01,BACKSLOT                                        0485
*             SAVESLOT=SAVESLOT+ASPSAVCT;/* UPDATE SAVESLOT COUNTER
*                                      BY THE SAVE COUNT IN THIS   0486
*                                      ASPCT                         */
*                                                                  0486
         L     @10,SAVESLOT                                        0486
         AL    @10,ASPSAVCT(,ASPCTPTR)                             0486
         ST    @10,SAVESLOT                                        0486
*             /*******************************************************/
*             /*                                                     */
*             /* IF THE LOW WORD OF THE 'S' SYMBOL IN THE ASPCT BASE */
*             /* IS GREATER THAN THAT IN THE ASMVT, THEN REPLACE THE */
*             /* LOW WORD OF THE 'S' SYMBOL IN THE ASMVT WITH THAT IN*/
*             /* THE ASPCT BASE. IF THE HIGH WORD OF THE 'S' SUMBOL  */
*             /* IN THE ASPCT BASE IS LESS THAN THAT IN THE ASMVT,   */
*             /* THEN REPLACE THE HIGH WORD OF THE 'S' SYMBOL IN THE */
*             /* ASMVT WITH THAT IN THE ASPCT BASE.                  */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0487
*             IF ASPSSYM(1:4)>ASMLSAI(1:4) THEN                    0487
         CLC   ASPSSYM(4,ASPCTPTR),ASMLSAI(ASMVTPTR)               0487
         BNH   @RF00487                                            0487
*               ASMLSAI(1:4)=ASPSSYM(1:4);                         0488
         MVC   ASMLSAI(4,ASMVTPTR),ASPSSYM(ASPCTPTR)               0488
*             IF ASPSSYM(5:8)<ASMLSAI(5:8) THEN                    0489
@RF00487 CLC   ASPSSYM+4(4,ASPCTPTR),ASMLSAI+4(ASMVTPTR)           0489
         BNL   @RF00489                                            0489
*               ASMLSAI(5:8)=ASPSSYM(5:8);                         0490
         MVC   ASMLSAI+4(4,ASMVTPTR),ASPSSYM+4(ASPCTPTR)           0490
*           END;                                                   0491
*                                                                  0491
@RF00489 DS    0H                                                  0492
*         /***********************************************************/
*         /*                                                         */
*         /* UPDATE THE PAT MAPS AND THE AVAILABLE SLOT COUNT IN EACH*/
*         /* PART ENTRY. IF UPDTPATS IS UNSUCCESSFUL, THEN BRANCH TO */
*         /* COMMON ERROR CODE FOR WARMSTRT.                         */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0492
*         RFY                                                      0492
*          (UPDTRTCD) RSTD;                                        0492
@RF00483 DS    0H                                                  0493
*         CALL UPDTPATS;                                           0493
         BAL   @14,UPDTPATS                                        0493
*         IF UPDTRTCD^=ZERO THEN                                   0494
         LTR   UPDTRTCD,UPDTRTCD                                   0494
         BNZ   @RT00494                                            0494
*           GO TO WARMERR;          /* BRANCH TO COMMON ERROR CODE 0495
*                                      FOR WARMSTRT                  */
*         RFY                                                      0496
*          (UPDTRTCD) UNRSTD;                                      0496
*       END;                                                       0497
*   END;                            /* ANY MORE RECORDS IN         0498
*                                      SYS1.STGINDEX ?               */
@RF00481 LA    @10,2048                                            0498
         AL    @10,RBA                                             0498
         ST    @10,RBA                                             0498
@DE00452 C     @10,MAXRBA                                          0498
         BNH   @DL00452                                            0498
*   RFY                                                            0499
*    (ASPCTPTR,                                                    0499
*     ASPEXPTR) UNRSTD;                                            0499
         EJECT
*                                                                  0500
*/********************************************************************/
*/********************************************************************/
*/*   UPDATE UNRESERVED SLOT COUNT AND VIO COUNT IN ASMVT            */
*/********************************************************************/
*/********************************************************************/
*                                                                  0500
*   /*****************************************************************/
*   /*                                                               */
*   /* USE COMPARE AND SWAP LOGIC TO DECREMENT THE ASMVT UNRESERVED  */
*   /* SLOT COUNT BY THE BACKSLOT COUNTER AND TO INCREMENT THE ASMVT */
*   /* VIO COUNT BY THE SAVESLOT COUNTER.                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0500
*   RFY                                                            0500
*    (R0,                                                          0500
*     R1) RSTD;                                                    0500
*UPDTCNTS:                                                         0501
*   R0=ASMBKSLT;                    /* OBTAIN THE ASMVT UNRESERVED 0501
*                                      SLOT COUNT                    */
UPDTCNTS L     R0,ASMBKSLT(,ASMVTPTR)                              0501
*STBKSLT2:                                                         0502
*   R1=R0-BACKSLOT;                 /* DECRMENT COUNT                */
STBKSLT2 LR    R1,R0                                               0502
         SL    R1,BACKSLOT                                         0502
*   CS(R0,R1,ASMBKSLT);             /* UPDATE ASMVT UNRESRVED SLOT 0503
*                                      COUNT FIELD                   */
         CS    R0,@01,ASMBKSLT(ASMVTPTR)                           0503
*   BC(NE,STBKSLT2);                /* IF UNSUCCESSFUL, TRY AGAIN    */
         BC    7,STBKSLT2                                          0504
*   R0=ASMVSC;                      /* OBTAIN THE ASMVT VIO COUNT    */
         L     R0,ASMVSC(,ASMVTPTR)                                0505
*SETVSC:                                                           0506
*   R1=R0+SAVESLOT;                 /* INCREMENT COUNT               */
SETVSC   LR    R1,R0                                               0506
         AL    R1,SAVESLOT                                         0506
*   CS(R0,R1,ASMVSC);               /* UPDATE ASMVT VIO COUNT FIELD  */
         CS    R0,@01,ASMVSC(ASMVTPTR)                             0507
*   BC(NE,SETVSC);                  /* IF UNSUCCESSFUL, TRY AGAIN    */
         BC    7,SETVSC                                            0508
*   RFY                                                            0509
*    (R14,                                                         0509
*     RETCODE) RSTD;                                               0509
*   RETCODE=RTCD0000;               /* SET RETURN CODE TO 0          */
         SLR   RETCODE,RETCODE                                     0510
*   R14=SAVRET1;                    /* RESTORE REG 14 WITH RETURN  0511
*                                      ADDRESS                       */
         L     R14,SAVRET1                                         0511
*   RETURN;                         /* RETURN TO MAINLINE            */
@EL00002 DS    0H                                                  0512
@EF00002 DS    0H                                                  0512
@ER00002 BR    @14                                                 0512
*   RFY                                                            0513
*    (R0,                                                          0513
*     R1,                                                          0513
*     R14,                                                         0513
*     RETCODE) UNRSTD;                                             0513
*   RFY                                                            0514
*     RPLPTR UNRSTD;                                               0514
         EJECT
*                                                                  0515
*/********************************************************************/
*/********************************************************************/
*/*   COMMON ERROR CODE FOR WARMSTRT                                 */
*/********************************************************************/
*/********************************************************************/
*                                                                  0515
*ILRCRTM2:                          /* RECOVERY RETRY POINT -- USED
*                                      SHOULD WARMSTRT FAIL - RRR    */
*WARMERR:                                                          0515
*   DO;                                                            0515
*                                                                  0515
ILRCRTM2 DS    0H                                                  0515
WARMERR  DS    0H                                                  0516
*     /***************************************************************/
*     /*                                                             */
*     /* ASK THE OPERATOR IF IT IS O.K. TO SWITCH TO CVIO PROCESSING */
*     /* AND WAIT FOR OPERATOR'S RESPONSE.                           */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0516
*     TPARWARM=OFF;                 /* TURN WARM START FLAG OFF IN 0516
*                                      TPARTBLE - RRR                */
         L     @10,TPARPTR                                         0516
         NI    TPARWARM(@10),B'01111111'                           0516
*     ASMWARM=OFF;                  /* TURN WARM START FLAG OFF IN 0517
*                                      ASMVT                         */
         NI    ASMWARM(ASMVTPTR),B'11111011'                       0517
*     WTORECB=ZERO;                 /* ZERO OUT WTORECB              */
         SLR   @10,@10                                             0518
         ST    @10,WTORECB                                         0518
*     DO;                           /* WTORP MF(E,WTO03M)            */
*       RFY                                                        0520
*         GPR01P RSTD;              /* RESTRICT REG 1                */
*       GPR01P=ADDR(WTO03M);        /* ADDRESS CONTROL PROGRAM LIST  */
         LA    GPR01P,WTO03M                                       0521
*       SVC(35);                    /* ISSUE WTOR SVC                */
         SVC   35                                                  0522
*       RFY                                                        0523
*         GPR01P UNRSTD;            /* RELEASE REG 1                 */
*     END;                          /* WTORP MF(E,WTO03M) REQUEST A
*                                      DECISION FROM OPERATOR ON   0524
*                                      WHETHER IT IS O.K. TO SWITCH
*                                      TO CVIO PROCESSING            */
*     DO;                           /* WAIT ECB(WTORECB)             */
*       RESPECIFY                                                  0526
*        (GPR00P,                                                  0526
*         GPR01P) RESTRICTED;                                      0526
*       GPR00P=1;                   /* LOAD WAIT COUNT               */
         LA    GPR00P,1                                            0527
*       GPR01P=ADDR(WTORECB);       /* ADDRESS OF ECB                */
         LA    GPR01P,WTORECB                                      0528
*       SVC(1);                     /* WAIT SVC                      */
         SVC   1                                                   0529
*       RESPECIFY                                                  0530
*        (GPR00P,                                                  0530
*         GPR01P) UNRESTRICTED;                                    0530
*     END;                          /* WAIT ECB(WTORECB) WAIT FOR  0531
*                                      OPERATOR'S REPLY              */
*     INTRTCD=INTRTCD×RTCD0008;     /* ADJUST INTERNAL RETURN CODE   */
*                                                                  0532
         L     @10,INTRTCD                                         0532
         O     @10,@CF00037                                        0532
         ST    @10,INTRTCD                                         0532
*     /***************************************************************/
*     /*                                                             */
*     /* IF SYS1.STGINDEX IS OPEN, ZERO OUT THE ASMVT POINTER TO THE */
*     /* ACB FOR SYS1.STGINDEX AND THEN CLOSE SYS1.STGINDEX.         */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0533
*     IF ASMSTGXA^=ZERO THEN                                       0533
         SLR   @10,@10                                             0533
         C     @10,ASMSTGXA(,ASMVTPTR)                             0533
         BE    @RF00533                                            0533
*       DO;                                                        0534
*         ASMSTGXA=ZERO;            /* ZERO ASMVT POINTER TO ACB FOR
*                                      SYS1.STGINDEX                 */
         ST    @10,ASMSTGXA(,ASMVTPTR)                             0535
*         GEN REFS(ACBPTR)( CLOSE ((ACBPTR)) );/* CLOSE SYS1.STGINDEX*/
          CLOSE ((ACBPTR))
*       END;                                                       0537
*                                                                  0537
*     /***************************************************************/
*     /*                                                             */
*     /* IF AN ERROR OCCURRED WHILE READING A RECORD FROM            */
*     /* SYS1.STGINDEX OR IF A PAT POINTER COULD NOT BE FOUND FOR ONE*/
*     /* OF THE LOCAL PART ENTRIES BY UPDTPATS, THEN CALL BACKOUT TO */
*     /* REINITIALIZE ALL THE LOCAL PAT MAPS.                        */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0538
*     IF RESETFLG=ON THEN                                          0538
@RF00533 CLI   RESETFLG,1                                          0538
         BNE   @RF00538                                            0538
*       CALL BACKOUT;               /* RESET ALL LOCAL PAT MAPS      */
         BAL   @14,BACKOUT                                         0539
         EJECT
*                                                                  0540
*/********************************************************************/
*/********************************************************************/
*/*   REPLACE PLPA COPY OF TPARTBLE WITH STORAGE COPY                */
*/********************************************************************/
*/********************************************************************/
*                                                                  0540
*     /***************************************************************/
*     /*                                                             */
*     /* UPDATE THE TIME STAMP IN THE STORAGE COPY OF THE TPARTBLE.  */
*     /* IF TPARTBLE COPY ON PLPA DATA SET IS GOOD, WRITE THE STORAGE*/
*     /* COPY OF TPARTBLE OUT TO THE PLPA DATA SET. OTHERWISE, RETURN*/
*     /* TO MAINLINE.                                                */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0540
*     RFY                                                          0540
*      (R1) RSTD;                                                  0540
@RF00538 DS    0H                                                  0541
*     GEN REFS(TPARPTR) SETS(R1,TPARTIME);                         0541
         L     R1,TPARPTR           /* OBTAIN POINTER TO TPARTBLE   */
         STCK  TPARTIME(R1)         /* STORE TOD CLOCK INTO           XX
                                       TPARTABLE                    */
*     RFY                                                          0542
*      (R1) UNRSTD;                                                0542
*     IF ASMNOTPT=OFF THEN                                         0543
         TM    ASMNOTPT(ASMVTPTR),B'00010000'                      0543
         BNZ   @RF00543                                            0543
*       DO;                                                        0544
*                                                                  0544
*         /***********************************************************/
*         /*                                                         */
*         /* LOAD ILRPREAD. USE ILRPREAD TO WRITE OUT NEW TPARTBLE   */
*         /* HEADER TO THE PLPA DATA SET.                            */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0545
*         RFY                                                      0545
*          (R0) RSTD;                                              0545
*         DO;                       /* LOAD EP('ILRPREAD')           */
*           RESPECIFY                                              0547
*            (GPR00P,                                              0547
*             GPR01P) RESTRICTED;                                  0547
*           GPR00P=ADDR('ILRPREAD');/* LOAD ENTRY POINT NAME ADDRESS */
         LA    GPR00P,@CC01626                                     0548
*           GPR01P=0;               /* JOBLIB OR LINKLIB DCB         */
         SLR   GPR01P,GPR01P                                       0549
*           SVC(8);                 /* ISSUE LOAD SVC                */
         SVC   8                                                   0550
*           RESPECIFY                                              0551
*            (GPR00P,                                              0551
*             GPR01P) UNRESTRICTED;                                0551
*         END;                      /* LOAD EP('ILRPREAD') LOAD    0552
*                                      ILRPREAD                      */
*                                                                  0552
*         /***********************************************************/
*         /*                                                         */
*         /* FILL IN PARAMETER LIST FOR ILRPREAD AND THEN CALL       */
*         /* ILRPREAD.                                               */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0553
*         PARMRDWT=ON;              /* REQUEST A WRITE OPERATION FROM
*                                      ILRPREAD                      */
*         PARMTPAR=OFF;             /* INDICATE THAT THE PART IS IN
*                                      USE                           */
         OI    PARMRDWT,B'10000000'                                0554
         NI    PARMTPAR,B'10111111'                                0554
*         PARMTOT=ONE;              /* INDICATE THAT ONLY ONE SLOT IS
*                                      TO BE WRITTEN                 */
         MVI   PARMTOT,X'01'                                       0555
*         PARMFRST=ZERO;            /* INDICATE THAT THE FIRST SLOT
*                                      NUMBER IS ZERO (I.E., THE   0556
*                                      TPARTBLE HEADER ON THE PLPA 0556
*                                      DATA SET)                     */
         SLR   @10,@10                                             0556
         STH   @10,PARMFRST                                        0556
*         PARMBUFP=TPARPTR;         /* SET THE BUFFER POINTER TO THE
*                                      STORAGE COPY OF TPARTBLE      */
         L     @10,TPARPTR                                         0557
         ST    @10,PARMBUFP                                        0557
*         PARMENTP=ADDR(PARTENTS);  /* SET PART ENTRY POINTER TO PLPA
*                                      PART ENTRY                    */
         L     @01,PARTPTR(,ASMVTPTR)                              0558
         LA    @10,PARTENTS(,@01)                                  0558
         ST    @10,PARMENTP                                        0558
*         RFY                                                      0559
*          (R1,                                                    0559
*           PRDRTCD) RSTD;                                         0559
*         R1=ADDR(PARMLIST);        /* PLACE ADDRESS OF PARAMETER  0560
*                                      LIST INTO REG 1               */
         LA    R1,PARMLIST                                         0560
*         CALL ILRPREAD;            /* WRITE OUT TPARTBLE HEADER TO
*                                      PLPA DATA SET                 */
         LR    @15,R0                                              0561
         BALR  @14,@15                                             0561
*         RFY                                                      0562
*          (R0,                                                    0562
*           R1) UNRSTD;                                            0562
*                                                                  0562
*         /***********************************************************/
*         /*                                                         */
*         /* IF THE WRITE IS UNSUCCESSFUL, THEN TURN ON THE TPARTBLE */
*         /* NO GOOD FLAG IN THE ASMVT, UPDATE THE TIME STAMP IN THE */
*         /* STORAGE COPY OF TPARTBLE AGAIN, DELETE ILPREAD AND      */
*         /* RETURN TO MAINLINE. IF THE WRITE IS SUCCESSFUL, THEN    */
*         /* DELETE ILRPREAD AND RETURN TO MAINLINE.                 */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0563
*         IF PRDRTCD^=ZERO THEN                                    0563
         LTR   PRDRTCD,PRDRTCD                                     0563
         BZ    @RF00563                                            0563
*           DO;                                                    0564
*             RFY                                                  0565
*              (PRDRTCD) UNRSTD;                                   0565
*             ASMNOTPT=ON;          /* TURN ON TPARTBLE NO GOOD FLAG
*                                      IN ASMVT                      */
         OI    ASMNOTPT(ASMVTPTR),B'00010000'                      0566
*             RFY                                                  0567
*              (R1) RSTD;                                          0567
*             GEN REFS(TPARPTR) SETS(R1,TPARTIME);                 0568
         L     R1,TPARPTR           /* OBTAIN POINTER TO TPARTBLE   */
         STCK  TPARTIME(R1)         /* STORE TOD CLOCK INTO           XX
                                       TPARTBLE                     */
*             RFY                                                  0569
*              (R1) UNRSTD;                                        0569
*           END;                                                   0570
*         DO;                       /* DELETE EP('ILRPREAD')         */
@RF00563 DS    0H                                                  0572
*           RESPECIFY                                              0572
*            (GPR00P) RESTRICTED;                                  0572
*           GPR00P=ADDR('ILRPREAD');/* ->ENTRY NAME                  */
         LA    GPR00P,@CC01626                                     0573
*           SVC(9);                 /* DELETE SVC                    */
         SVC   9                                                   0574
*           RESPECIFY                                              0575
*            (GPR00P) UNRESTRICTED;                                0575
*         END;                      /* DELETE EP('ILRPREAD') DELETE
*                                      ILRPREAD                      */
*       END;                                                       0577
*     RFY                                                          0578
*      (R14,                                                       0578
*       RETCODE) RSTD;                                             0578
@RF00543 DS    0H                                                  0579
*     RETCODE=RTCD0004;             /* SET RETURN CODE TO 4          */
         LA    RETCODE,4                                           0579
*     R14=SAVRET1;                  /* RESTORE REG 14 WITH RETURN  0580
*                                      ADDRESS                       */
         L     R14,SAVRET1                                         0580
*     RETURN;                       /* RETURN TO MAINLINE            */
         B     @EL00002                                            0581
*     RFY                                                          0582
*      (R14,                                                       0582
*       RETCODE) UNRSTD;                                           0582
*   END WARMERR;                                                   0583
*   RFY                                                            0584
*    (ACBAREA@,                                                    0584
*     IOBUFPTR,                                                    0584
*     RPLAREA@) UNRSTD;                                            0584
*   END WARMSTRT;                                                  0585
         EJECT
*                                                                  0586
*/********************************************************************/
*/*                                                                  */
*/*   UPDTPATS:  UPDATE THE PAT MAPS FROM THE SAVED LSIDS.           */
*/*                                                                  */
*/*   PROCESS:   SAVE THE RETURN ADDRESS. GET THE POINTER TO THE     */
*/*              FIRST LPME. LOOP THROUGH THE ARRAY OF LPMES UNTIL   */
*/*              EITHER THERE ARE NO MORE VALID LPMES OR THE END     */
*/*              OF THE ARRAY IS REACHED.  FROM EACH LPME OBTAIN     */
*/*              THE LSID. SHIFT OFF THE NN PORTION OF THE LSID      */
*/*              FOR INDEXING THE PART.  GET THE POINTER TO THE      */
*/*              PROPER PART ENTRY AND TEST TO SEE IF THERE IS A     */
*/*              PAT POINTER. IF THERE IS NO PAT POINTER, RETURN     */
*/*              TO THE CALLER WITH A RETURN CODE OF 4. IF THERE IS  */
*/*              A PAT POINTER, SHIFT OFF THE QQQQ PORTION OF THE    */
*/*              LSID AND USE IT TO CALCULATE THE ADDRESS OF THE     */
*/*              PROPER PAT MAP. USE ILRBITMM TO TURN ON THE         */
*/*              APPROPRIATE BIT IN THAT PAT MAP TO INDICATE THAT    */
*/*              THE SLOT IS IN USE. DECREMENT THE SLOT AVAILABLE    */
*/*              COUNT IN THE PART ENTRY. ONCE ALL LPMES HAVE BEEN   */
*/*              PROCESSED, RETURN TO THE CALLER.                    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0586
*UPDTPATS:                                                         0586
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0586
UPDTPATS DS    0H                                                  0587
         EJECT
*                                                                  0587
*/********************************************************************/
*/********************************************************************/
*/*   OBTAIN PAT POINTER                                             */
*/********************************************************************/
*/********************************************************************/
*                                                                  0587
*   RFY                                                            0587
*    (ACBAREA@,                                                    0587
*     ACBPTR,                                                      0587
*     ASPCTPTR,                                                    0587
*     ASPEXPTR,                                                    0587
*     IOBUFPTR,                                                    0587
*     RPLAREA@,                                                    0587
*     RPLPTR) RSTD;                                                0587
*   RFY                                                            0588
*    (R14) RSTD;                                                   0588
*   SAVRET2=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,SAVRET2                                         0589
*   RFY                                                            0590
*    (R14) UNRSTD;                                                 0590
*   LPMEPTR=ADDR(ASPLPMES);         /* INITIALIZE LPME POINTER TO  0591
*                                      FIRST LPME                    */
*                                                                  0591
         LA    @10,ASPLPMES(,ASPCTPTR)                             0591
         ST    @10,LPMEPTR                                         0591
*   /*****************************************************************/
*   /*                                                               */
*   /* FOR EACH SAVED LSID (I.E., FOR EACH NONZERO LPME): (1)        */
*   /* CALCULATE THE PART ENTRY POINTER FROM THE PART NUMBER PORTION */
*   /* OF THE LSID, (2) OBTAIN THE PAT POINTER FROM THE PART ENTRY,  */
*   /* (3) IF THE PAT POINTER EXISTS, THEN UPDATE THE PROPER PAT MAP */
*   /* AND DECREMENT THE AVAILABLE SLOT COUNT OF THE PART ENTRY.     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0592
*   DO LPMEINDX=ONE TO ASPNLPME;                                   0592
         LA    @10,1                                               0592
         ST    @10,LPMEINDX                                        0592
@DL00592 DS    0H                                                  0593
*     IF ASPLPME^=ZERO THEN                                        0593
         SLR   @10,@10                                             0593
         L     @02,LPMEPTR                                         0593
         CL    @10,ASPLPME(,@02)                                   0593
         BE    @RF00593                                            0593
*       DO;                                                        0594
*                                                                  0594
*         /***********************************************************/
*         /*                                                         */
*         /* CALCULATE THE PART ENTRY POINTER FROM THE PART NUMBER   */
*         /* PORTION OF THE LSID                                     */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0595
*         RFY                                                      0595
*          (R14,                                                   0595
*           R15,                                                   0595
*           PARTNUM,                                               0595
*           RSLOTNUM) RSTD;                                        0595
*         R14=ASPVLSID;             /* OBTAIN THE LSID               */
         L     R14,ASPVLSID-1(,@02)                                0596
         LA    R14,0(,R14)                                         0596
*         SRDL(R14,TWOBYTES);       /* ISOLATE THE PART NUMBER (NN)
*                                      PORTION OF THE LSID           */
         SRDL  R14,16                                              0597
*         SRL(R15,TWOBYTES);        /* ADJUST THE RELATIVE SLOT    0598
*                                      NUMBER (QQQQ) PORTION OF THE
*                                      LSID                          */
         SRL   R15,16                                              0598
*         RFY                                                      0599
*          (R14,                                                   0599
*           R15) UNRSTD;                                           0599
*         PAREPTR=ADDR(PARTENTS)+(PARTNUM*LENGTH(PARTENT));/* OBTAIN
*                                      PART ENTRY POINTER FOR THIS 0600
*                                      LSID                          */
         L     @02,PARTPTR(,ASMVTPTR)                              0600
         LA    @02,PARTENTS(,@02)                                  0600
         LR    @09,PARTNUM                                         0600
         SLA   @09,6                                               0600
         ALR   @02,@09                                             0600
         ST    @02,PAREPTR                                         0600
*         RFY                                                      0601
*           PARTNUM UNRSTD;                                        0601
*                                                                  0601
*         /***********************************************************/
*         /*                                                         */
*         /* IF A PAT POINTER DOES NOT EXIST IN THE PART ENTRY,      */
*         /* RETURN TO CALLER WITH A RETURN CODE OF FOUR.            */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0602
*         IF PAREPATP=ZERO THEN                                    0602
         C     @10,PAREPATP(,@02)                                  0602
         BNE   @RF00602                                            0602
*           DO;                                                    0603
*             RFY                                                  0604
*              (R14,                                               0604
*               RETCODE) RSTD;                                     0604
*             RETCODE=RTCD0004;     /* SET RETURN CODE TO 4          */
         LA    RETCODE,4                                           0605
*             R14=SAVRET2;          /* RESTORE REG 14 WITH RETURN  0606
*                                      ADDRESS                       */
         L     R14,SAVRET2                                         0606
*             RETURN;               /* RETURN TO CALLER              */
@EL00003 DS    0H                                                  0607
@EF00003 DS    0H                                                  0607
@ER00003 BR    @14                                                 0607
*             RFY                                                  0608
*              (R14,                                               0608
*               RETCODE) UNRSTD;                                   0608
*           END;                                                   0609
*         PATPTR=PAREPATP;          /* OBTAIN POINTER TO PAT         */
@RF00602 L     @14,PAREPTR                                         0610
         L     PATPTR,PAREPATP(,@14)                               0610
         EJECT
*                                                                  0611
*/********************************************************************/
*/********************************************************************/
*/*   UPDATE PAT MAP                                                 */
*/********************************************************************/
*/********************************************************************/
*                                                                  0611
*         /***********************************************************/
*         /*                                                         */
*         /* OBTAIN THE CYLINDER NUMBER, THE ADDRESS OF THE          */
*         /* APPRORPRIATE CYLINDER MAP, AND THE BIT INDEX INTO THAT  */
*         /* CYLINDER MAP. IF NECESSARY, ADJUST THE BIT INDEX AND THE*/
*         /* CYLINDER MAP ADDRESS FOR A TWO WORD CYLINDER MAP.       */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0611
*         RFY                                                      0611
*          (BITINDEX,                                              0611
*           CYLNUM,                                                0611
*           CYLSIZE,                                               0611
*           REMAIN) RSTD;                                          0611
*         CYLSIZE=PATCYLSZ;         /* OBTAIN NUMBER OF SLOTS IN A 0612
*                                      CYLINDER                      */
         LH    CYLSIZE,PATCYLSZ(,PATPTR)                           0612
*         GEN REFS(RSLOTNUM,CYLSIZE) SETS(BITINDEX,CYLNUM,REMAIN); 0613
         SLR   REMAIN,REMAIN      /* SET UP FOR DIVIDE              */
         DR    RSLOTNUM-1,CYLSIZE /* DIVIDE THE RELATIVE SLOT NUMBER
*                                    BY THE NUMBER OF SLOTS IN A
*                                    CYLINDER IN ORDER TO OBTAIN THE
*                                    CYLINDER NUMBER (QUOTIENT) AND
*                                    THE BIT INDEX (REMAINDER)      */
         LR    BITINDEX,REMAIN    /* OBTAIN THE BIT INDEX           */
*         RFY                                                      0614
*          (REMAIN,                                                0614
*           CYLSIZE,                                               0614
*           RSLOTNUM) UNRSTD;                                      0614
*         PATCYLA=ADDR(PATCYLS(CYLNUM*PATCYLMW+1));/* CALCULATE THE
*                                      ADDRESS OF THE APPROPRIATE  0615
*                                      CYLINDER MAP                  */
         LR    @14,CYLNUM                                          0615
         MH    @14,PATCYLMW(,PATPTR)                               0615
         SLA   @14,2                                               0615
         LA    @14,PATCYLS(@14,PATPTR)                             0615
         ST    @14,PATCYLA                                         0615
*         RFY                                                      0616
*           CYLNUM UNRSTD;                                         0616
*         IF BITINDEX>=WORDSIZE THEN                               0617
         LA    @10,32                                              0617
         CR    BITINDEX,@10                                        0617
         BL    @RF00617                                            0617
*           DO;                                                    0618
*             BITINDEX=BITINDEX-WORDSIZE;/* DECREMENT BIT INDEX BY 32*/
         SLR   BITINDEX,@10                                        0619
*             PATCYLA=PATCYLA+FOURBYTE;/* ADJUST CYLINDER MAP ADDRESS
*                                      BY FOUR BYTES                 */
         AL    @14,@CF00095                                        0620
         ST    @14,PATCYLA                                         0620
*           END;                                                   0621
*                                                                  0621
*         /***********************************************************/
*         /*                                                         */
*         /* TURN ON THE APPROPRIATE BIT IN THE PAT MAP INDICATING   */
*         /* THAT THE SLOT IS IN USE. DECREMENT THE AVAILABLE SLOT   */
*         /* COUNT IN THE PART ENTRY.                                */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0622
*/*  ILRBITMM INVOCATION                                           0622
*      BITMAP(PATCYLA,ONEWORD)BIT(BITINDEX)SET(ON,MP)                */
*                                                                  0622
*         DCL                                                      0622
*           BITMMCB1 BIT(32) CONSTANT('80000000'X);                0622
@RF00617 DS    0H                                                  0623
*         DCL                                                      0623
*           BITMMWRD FIXED(31) BDY(WORD) BASED(R1);                0623
*         DCL                                                      0624
*           BITMSK31 FIXED(8) CONSTANT(31);                        0624
*         DCL                                                      0625
*           BITMMC32 FIXED(8) CONSTANT(32);                        0625
*         DO;                                                      0626
*           RFY                                                    0627
*            (R0,                                                  0627
*             R1,                                                  0627
*             R2,                                                  0627
*             R14,                                                 0627
*             R15) RSTD;            /* RESTRICT WORK REGS    @Z40WPWG*/
*           R15=BITINDEX;           /* PUT BIT# IN WRK REG           */
         LR    R15,BITINDEX                                        0628
*           R1=PATCYLA;             /* BITMAP ADDR TO REG1           */
         L     R1,PATCYLA                                          0629
*           R14=BITMMCB1;           /* BUILD MASK                    */
         L     R14,@CF00650                                        0630
*           GEN(SRL   R14,0(R15));                                 0631
         SRL   R14,0(R15)
*           R0=BITMMWRD;            /* MAP WRD TO REG                */
         L     R0,BITMMWRD(,R1)                                    0632
*           DO WHILE((R0&R14)=0);   /* LOOP UNTIL BIT SET            */
         B     @DE00633                                            0633
@DL00633 DS    0H                                                  0634
*             R15=R0×R14;           /* TURN BIT ON                   */
         LR    R15,R0                                              0634
         OR    R15,R14                                             0634
*             CS(R0,R15,BITMMWRD);  /* TRY TO SET BIT IN STG         */
         CS    R0,@15,BITMMWRD(R1)                                 0635
*             BC(8,BITMMX48);       /* BRANCH ON CS SUCCESS          */
         BC    8,BITMMX48                                          0636
*           END;                    /* END LOOP TO SET BIT           */
@DE00633 LR    @10,R0                                              0637
         NR    @10,R14                                             0637
         LTR   @10,@10                                             0637
         BZ    @DL00633                                            0637
*BITMMX48:                                                         0638
*           RFY                                                    0638
*            (R0,                                                  0638
*             R1,                                                  0638
*             R2,                                                  0638
*             R14,                                                 0638
*             R15) UNRSTD;          /* RELEASE WRK REGS      @Z40WPWG*/
BITMMX48 DS    0H                                                  0639
*         END;                      /* END OF ILRBITMM PROCESSING    */
*         RFY                                                      0640
*           BITINDEX UNRSTD;                                       0640
*         PARESLTA=PARESLTA-ONE;    /* DECREMENT THE SLOT AVAILABLE
*                                      FOR ALLOCATION COUNT IN THE 0641
*                                      PART ENTRY                    */
         L     @10,PAREPTR                                         0641
         L     @02,PARESLTA(,@10)                                  0641
         BCTR  @02,0                                               0641
         ST    @02,PARESLTA(,@10)                                  0641
*       END;                        /* END OF PROCESSING A NONZERO 0642
*                                      LPME                          */
*     LPMEPTR=LPMEPTR+LENGTH(ASPLPME);/* SET LPME POINTER TO NEXT  0643
*                                      LPME                          */
@RF00593 LA    @10,4                                               0643
         AL    @10,LPMEPTR                                         0643
         ST    @10,LPMEPTR                                         0643
*   END;                            /* MORE LPMES ?                  */
         LA    @10,1                                               0644
         AL    @10,LPMEINDX                                        0644
         ST    @10,LPMEINDX                                        0644
         C     @10,@CF00546                                        0644
         BNH   @DL00592                                            0644
*   RFY                                                            0645
*    (R14,                                                         0645
*     RETCODE) RSTD;                                               0645
*   RETCODE=RTCD0000;               /* SET RETURN CODE TO 0          */
         SLR   RETCODE,RETCODE                                     0646
*   R14=SAVRET2;                    /* RESTORE REG 14 WITH RETURN  0647
*                                      ADDRESS                       */
         L     R14,SAVRET2                                         0647
*   RETURN;                         /* RETURN TO CALLER              */
         B     @EL00003                                            0648
*   RFY                                                            0649
*    (R14,                                                         0649
*     RETCODE) UNRSTD;                                             0649
*   RFY                                                            0650
*    (ACBAREA@,                                                    0650
*     ACBPTR,                                                      0650
*     ASPCTPTR,                                                    0650
*     ASPEXPTR,                                                    0650
*     IOBUFPTR,                                                    0650
*     RPLAREA@,                                                    0650
*     RPLPTR) UNRSTD;                                              0650
*   END UPDTPATS;                                                  0651
         EJECT
*                                                                  0652
*/********************************************************************/
*/*                                                                  */
*/*   BACKOUT:   REINITIALIZE THE LOCAL PAT MAPS.                    */
*/*                                                                  */
*/*   PROCESS:   SAVE THE RETURN ADDRESS.  GET THE POINTER TO THE    */
*/*              FIRST LOCAL PART ENTRY.  LOOP THROUGH THE LOCAL     */
*/*              PART ENTRIES UPDATING THE SLOT AVAILABLE COUNT AND  */
*/*              COPYING THE PAT MAP MASK FROM THE PCT TO EACH PAT   */
*/*              MAP IN THE PAT.  ONCE ALL PART ENTRIES HAVE BEEN    */
*/*              PROCESSED, RETURN TO THE CALLER.                    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0652
*BACKOUT:                                                          0652
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0652
BACKOUT  DS    0H                                                  0653
         EJECT
*                                                                  0653
*/********************************************************************/
*/********************************************************************/
*/*   RESET PAT MAPS                                                 */
*/********************************************************************/
*/********************************************************************/
*                                                                  0653
*   RFY                                                            0653
*    (ACBAREA@,                                                    0653
*     IOBUFPTR,                                                    0653
*     RPLAREA@) RSTD;                                              0653
*   RFY                                                            0654
*    (R14) RSTD;                                                   0654
*   SAVRET2=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,SAVRET2                                         0655
*   RFY                                                            0656
*    (R14) UNRSTD;                                                 0656
*   PAREPTR=ADDR(PARTENTS(PARTLOCN+ONE));/* INITIALIZE PART ENTRY  0657
*                                      POINTER TO FIRST LOCAL PART 0657
*                                      ENTRY (I.E. SKIP OVER THE PART
*                                      ENTRY FOR THE PLPA DATA SET,
*                                      THE COMMON DATA SET AND THE 0657
*                                      DUPLEX DATA SET)              */
*                                                                  0657
         L     @10,PARTPTR(,ASMVTPTR)                              0657
         LA    @10,PARTENTS+192(,@10)                              0657
         ST    @10,PAREPTR                                         0657
*   /*****************************************************************/
*   /*                                                               */
*   /* FOR EACH LOCAL PAGE DATA SET (I.E., FOR EACH LOCAL PART       */
*   /* ENTRY): (1) RESET SLOT AVAILABLE COUNT, (2) OBTAIN THE POINTER*/
*   /* TO THE PAT AND TO THE PCT FOR THAT PAGE DATA SET, AND (3)     */
*   /* RESET ALL THE CYLINDER MAPS IN THE PAT TO THE EIGHT BYTE MASK */
*   /* CONTAINED IN THE PCT.                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0658
*   DO LOCALCNT=PARTLOCN+ONE BY ONE TO PARTEUSE;                   0658
         LA    LOCALCNT,4                                          0658
         B     @DE00658                                            0658
@DL00658 DS    0H                                                  0659
*     PARESLTA=PARESZSL;            /* RESET THE SLOT AVAILABLE FOR
*                                      ALLOCATION COUNT IN THE PART
*                                      ENTRY                         */
         L     @15,PAREPTR                                         0659
         L     @14,PARESZSL(,@15)                                  0659
         ST    @14,PARESLTA(,@15)                                  0659
*     PATPTR=PAREPATP;              /* OBTAIN POINTER TO PAT         */
         L     PATPTR,PAREPATP(,@15)                               0660
*     PCTPTR=PAREPCTP;              /* OBTAIN POINTER TO PCT         */
         L     PCTPTR,PAREPCTP(,@15)                               0661
*     ENDPAT=PATPTR+LENGTH(PATHDR)+(PATCYLNO*(FOURBYTE*PATCYLMW));/*
*                                      CALCULATE END OF PAT          */
*                                                                  0662
         LA    ENDPAT,16                                           0662
         ALR   ENDPAT,PATPTR                                       0662
         LH    @15,PATCYLMW(,PATPTR)                               0662
         SLA   @15,2                                               0662
         MH    @15,PATCYLNO(,PATPTR)                               0662
         ALR   ENDPAT,@15                                          0662
*     /***************************************************************/
*     /*                                                             */
*     /* RESET EACH CYLINDER MAP IN THE PAT TO THE EIGHT BYTE MASK   */
*     /* CONTAINED IN THE PCT                                        */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0663
*     RFY                                                          0663
*       PATCYLMP BASED(PATCYLA);                                   0663
*     DO PATCYLA=ADDR(PATCYLS(1)) BY LENGTH(PATCYLMP) TO ENDPAT;   0664
         LA    @15,PATCYLS(,PATPTR)                                0664
         ST    @15,PATCYLA                                         0664
         B     @DE00664                                            0664
@DL00664 DS    0H                                                  0665
*       PATCYLMP=PCTDMASK;          /* COPY IN 8 BYTE MASK FOR THE 0665
*                                      DEVICE ON WHICH THE PAGE DATA
*                                      SET RESIDES                   */
         MVC   PATCYLMP(8,@15),PCTDMASK(PCTPTR)                    0665
*     END;                          /* MORE CYLINDER MAPS ?          */
         AL    @15,@CF00037                                        0666
         ST    @15,PATCYLA                                         0666
@DE00664 CR    @15,ENDPAT                                          0666
         BNH   @DL00664                                            0666
*     PAREPTR=PAREPTR+LENGTH(PARTENT);/* SET PART ENTRY POINTER TO 0667
*                                      NEXT LOCAL PART ENTRY         */
         LA    @10,64                                              0667
         AL    @10,PAREPTR                                         0667
         ST    @10,PAREPTR                                         0667
*   END;                            /* MORE PART ENTRIES ?           */
         AL    LOCALCNT,@CF00052                                   0668
@DE00658 L     @10,PARTPTR(,ASMVTPTR)                              0668
         C     LOCALCNT,PARTEUSE(,@10)                             0668
         BNH   @DL00658                                            0668
*   RFY                                                            0669
*    (R14) RSTD;                                                   0669
*   R14=SAVRET2;                    /* RESTORE REG 14 WITH RETURN  0670
*                                      ADDRESS                       */
         L     R14,SAVRET2                                         0670
*   RETURN;                         /* RETURN TO CALLER              */
@EL00004 DS    0H                                                  0671
@EF00004 DS    0H                                                  0671
@ER00004 BR    @14                                                 0671
*   RFY                                                            0672
*    (R14) UNRSTD;                                                 0672
*   RFY                                                            0673
*    (ACBAREA@,                                                    0673
*     IOBUFPTR,                                                    0673
*     RPLAREA@) UNRSTD;                                            0673
*   END BACKOUT;                                                   0674
         EJECT
*                                                                  0675
*/********************************************************************/
*/*                                                                  */
*/*   CVIOSTRT:  COLD/QUICK START PROCESSING OF SYS1.STGINDEX.       */
*/*                                                                  */
*/*   PROCESS:   A GENCB IS ISSUED TO BUILD AN ACB FOR SYS1.STGINDEX.*/
*/*              AN OPEN WITH THE REUSE OPTION IS ISSUED TO OPEN     */
*/*              AND REALLOCATE SYS1.STGINDEX.  ONCE SYS1.STGINDEX   */
*/*              IS OPENED, THE TIME STAMP IN THE TPARTBLE IS COPIED */
*/*              TO THE I/O BUFFER AND THE I/O BUFFER IS THEN        */
*/*              WRITTEN TO KEY ZERO OF SYS1.STGINDEX. ONCE THE      */
*/*              RECORD HAS BEEN WRITTEN, SYS1.STGINDEX IS CLOSED    */
*/*              AND THEN REOPENED WITH THE UPDATE OPTION.           */
*/*              PROCESSING THEN CONTINUES BACK IN THE MAINLINE.     */
*/*                                                                  */
*/********************************************************************/
*                                                                  0675
*CVIOSTRT:                                                         0675
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0675
CVIOSTRT DS    0H                                                  0676
         EJECT
*                                                                  0676
*/********************************************************************/
*/********************************************************************/
*/*   OPEN SYS1.STGINDEX WITH REUSE OPTION                           */
*/********************************************************************/
*/********************************************************************/
*                                                                  0676
*   RFY                                                            0676
*    (ACBAREA@,                                                    0676
*     IOBUFPTR,                                                    0676
*     RPLAREA@) RSTD;                                              0676
*   RFY                                                            0677
*     R14 RSTD;                                                    0677
*   SAVRET1=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,SAVRET1                                         0678
*   RFY                                                            0679
*     R14 UNRSTD;                                                  0679
*   EPATMIRT=ADDR(ILRCRTM3);        /* SET CURRENT RETRY ADDRESS IN
*                                      EPATH - RRR                   */
         LA    @10,ILRCRTM3                                        0680
         ST    @10,EPATMIRT(,EPAPTR)                               0680
*   EPACOLD=ON;                     /* TURN ON THE COLD START FLAG IN
*                                      THE EPATH TO INDICATE THAT  0681
*                                      ILRTMI00 IS IN CVIOSTRT - RRR */
*                                                                  0681
         OI    EPACOLD(EPAPTR),B'00100000'                         0681
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD AN ACB FOR SYS1.STGINDEX. THIS ACB WILL BE USED TO OPEN */
*   /* SYS1.STGINDEX WITH REUSE OPTION                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0682
*   RFY                                                            0682
*    (R0,                                                          0682
*     ACBPTR,                                                      0682
*     GENRTCD) RSTD;                                               0682
*   R0=LENGTH(ACBBAREA);                                           0683
         LA    R0,76                                               0683
*   GEN REFS(R0,ACBAREA@);                                         0684
         GENCB BLK=ACB,AM=VSAM,BUFND=2,BUFNI=1,BUFSP=6*2048,          XX
               CATALOG=YES,DDNAME=STGINDEX,LENGTH=(R0),               XX
               MACRF=(KEY,NFX,DDN,NDF,DIR,SEQ,NCI,OUT,NIS,NRM,RST,    XX
               NSR,NUB),STRNO=1,WAREA=(ACBAREA@)
*   IF GENRTCD^=ZERO THEN                                          0685
         LTR   GENRTCD,GENRTCD                                     0685
         BNZ   @RT00685                                            0685
*     GO TO CVIOERR;                /* BRANCH TO COMMON ERROR CODE 0686
*                                      FOR CVIOSTRT                  */
*   RFY                                                            0687
*    (R0,                                                          0687
*     GENRTCD) UNRSTD;                                             0687
*   ACBSDS=ON;                      /* TURN ON THE APPROPRIATE FLAG
*                                      IN THE ACB SO THAT          0688
*                                      SYS1.STGINDEX IS OPENED AS A
*                                      SYSTEM DATA SET -- NO KEYWORD
*                                      PROVIDED FOR IN GENCB         */
*                                                                  0688
         OI    ACBSDS(ACBAREA@),B'00000010'                        0688
*   /*****************************************************************/
*   /*                                                               */
*   /* OPEN SYS1.STGINDEX WITH REUSE OPTION. IF OPEN IS NOT          */
*   /* SUCCESSFUL, ISSUE A SHOWCB TO DETERMINE THE TYPE OF ERROR. IF */
*   /* RETRY IS POSSIBLE, ISSUE ANOTHER OPEN FOR SYS1.STGINDEX. IF   */
*   /* RETRY IS NOT POSSIBLE, PERFORM COMMON ERROR CODE FOR CVIOSTRT */
*   /* AND RETURN TO MAINLINE.                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0689
*   RETRYCNT=ZERO;                  /* INITIALIZE RETRY COUNT TO ZERO*/
         SLR   RETRYCNT,RETRYCNT                                   0689
*   RETRYFLG=ON;                    /* SET RETRY FLAG ON             */
         LA    RETRYFLG,1                                          0690
*   DO WHILE(RETRYFLG=ON);                                         0691
         B     @DE00691                                            0691
@DL00691 DS    0H                                                  0692
*     RETRYCNT=RETRYCNT+ONE;        /* INCREMENT RETRY COUNT BY ONE  */
         AL    RETRYCNT,@CF00052                                   0692
*     RETRYFLG=OFF;                 /* FORCE END OF RETRY LOOP       */
         SLR   RETRYFLG,RETRYFLG                                   0693
*     RFY                                                          0694
*      (OPENRTCD) RSTD;                                            0694
*     GEN REFS(ACBPTR) SETS(OPENRTCD);                             0695
*                                                                  0695
         OPEN  ((ACBPTR))      /* OPEN SYS1.STGINDEX WITH REUSE       XX
                                  OPTION                            */
*     /***************************************************************/
*     /*                                                             */
*     /* IF OPEN WAS UNSUCCESSFUL, ISSUE A SHOWCB TO OBTAIN THE CODE */
*     /* RETURNED FROM VSAM. THIS RETURN CODE IS USED TO DETERMINE   */
*     /* WHETHER RETRY IS POSSIBLE. IF OPEN WAS SUCCESSFUL, FALL THRU*/
*     /* THE RETRY LOOP.                                             */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0696
*     IF OPENRTCD>RTCD0004 THEN                                    0696
         LA    @14,4                                               0696
         CR    OPENRTCD,@14                                        0696
         BNH   @RF00696                                            0696
*       DO;                                                        0697
*         RFY                                                      0698
*          (OPENRTCD) UNRSTD;                                      0698
*         RFY                                                      0699
*          (R0,                                                    0699
*           R1) RSTD;                                              0699
*         R0=LENGTH(VSAMRTCD);                                     0700
         LR    R0,@14                                              0700
*         R1=ADDR(VSAMRTCD);                                       0701
         LA    R1,VSAMRTCD                                         0701
*         GEN REFS(R0,R1,ACBPTR) SETS(VSAMRTCD);                   0702
         SHOWCB ACB=(ACBPTR),AREA=(R1),LENGTH=(R0),FIELDS=ERROR
*         RFY                                                      0703
*          (R0,                                                    0703
*           R1) UNRSTD;                                            0703
*                                                                  0703
*         /***********************************************************/
*         /*                                                         */
*         /* IF THE MAXIMUM NUMBER OF RETRIES HAS NOT BEEN REACHED   */
*         /* AND A RETRYABLE RETURN CODE IS RECEIVED FROM VSAM, TURN */
*         /* THE RETRY FLAG ON IN ORDER TO RETRY OPEN. IF RETRY IS   */
*         /* NOT POSSIBLE, BRANCH TO COMMON ERROR CODE FOR CVIOSTRT. */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0704
*         IF(RETRYCNT<=RETRYMAX)&(VSAMRTCD=RTCD0136×VSAMRTCD=RTCD0148×
*             VSAMRTCD=RTCD0176×VSAMRTCD=RTCD0236×VSAMRTCD=RTCD0244)
*           THEN                                                   0704
         C     RETRYCNT,@CF00291                                   0704
         BH    @RF00704                                            0704
         L     @10,VSAMRTCD                                        0704
         C     @10,@CF01385                                        0704
         BE    @RT00704                                            0704
         C     @10,@CF01387                                        0704
         BE    @RT00704                                            0704
         C     @10,@CF01389                                        0704
         BE    @RT00704                                            0704
         C     @10,@CF01391                                        0704
         BE    @RT00704                                            0704
         C     @10,@CF01393                                        0704
         BNE   @RF00704                                            0704
@RT00704 DS    0H                                                  0705
*           RETRYFLG=ON;            /* FORCE RETRY LOOP              */
         LA    RETRYFLG,1                                          0705
*         ELSE                                                     0706
*           GO TO CVIOERR;          /* BRANCH TO COMMON ERROR CODE 0706
*                                      FOR CVIOSTRT                  */
*       END;                                                       0707
*   END;                            /* END OF RETRY LOOP             */
@RF00696 DS    0H                                                  0708
@DE00691 C     RETRYFLG,@CF00236                                   0708
         BE    @DL00691                                            0708
*   ASMSTGXA=ACBPTR;                /* PLACE POINTER TO ACB INTO   0709
*                                      ASMVT                         */
         ST    ACBPTR,ASMSTGXA(,ASMVTPTR)                          0709
         EJECT
*                                                                  0710
*/********************************************************************/
*/********************************************************************/
*/*   WRITE UPDATED TIME STAMP RECORD OUT TO SYS1.STGINDEX           */
*/********************************************************************/
*/********************************************************************/
*                                                                  0710
*   /*****************************************************************/
*   /*                                                               */
*   /* PREPARE I/O BUFFER AS THE TIME STAMP RECORD.                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0710
*   IOBKEY=KEYZERO;                 /* SET RECORD KEY IN BUFFER TO 0710
*                                      ZERO                          */
         MVC   IOBKEY(12,IOBUFPTR),@CB01358                        0710
*   IOBTIME=TPARTIME;               /* COPY TIME STAMP FROM TPARTBLE
*                                      TO BUFFER                     */
*                                                                  0711
         L     @10,TPARPTR                                         0711
         MVC   IOBTIME(8,IOBUFPTR),TPARTIME(@10)                   0711
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD AN RPL FOR WRITING THE TIME STAMP RECORD OUT TO         */
*   /* SYS1.STGINDEX.                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0712
*   RFY                                                            0712
*    (R0,                                                          0712
*     R1,                                                          0712
*     GENRTCD,                                                     0712
*     RPLPTR) RSTD;                                                0712
*   R0=LENGTH(RPLBAREA);                                           0713
         LA    R0,76                                               0713
*   R1=ADDR(VSAMKEY);                                              0714
         LA    R1,VSAMKEY                                          0714
*   GEN REFS(R0,R1,ACBPTR,IOBUFPTR,RPLAREA@);                      0715
         GENCB BLK=RPL,ACB=(ACBPTR),AM=VSAM,AREA=(IOBUFPTR),          XX
               AREALEN=2048,ARG=(R1),COPIES=1,LENGTH=(R0),            XX
               OPTCD=(KEY,SEQ,ARD,FWD,SYN,NUP,FKS,MVE),               XX
               RECLEN=2041,WAREA=(RPLAREA@)
*   IF GENRTCD^=ZERO THEN                                          0716
         LTR   GENRTCD,GENRTCD                                     0716
         BNZ   @RT00716                                            0716
*     GO TO CVIOERR;                /* BRANCH TO COMMON ERROR CODE 0717
*                                      FOR CVIOSTRT                  */
*   RFY                                                            0718
*    (R0,                                                          0718
*     R1,                                                          0718
*     GENRTCD) UNRSTD;                                             0718
*                                                                  0718
*   /*****************************************************************/
*   /*                                                               */
*   /* WRITE THE TIME STAMP RECORD (KEY ZERO) OUT TO SYS1.STGINDEX.  */
*   /* IF PUT IS NOT SUCCESSFUL, ISSUE A SHOWCB TO DETERMINE THE TYPE*/
*   /* OF ERROR. IF RETRY IS POSSIBLE, ISSUE ANOTHER PUT. IF RETRY IS*/
*   /* NOT POSSIBLE, PERFORM COMMON ERROR CODE FOR CVIOSTRT AND      */
*   /* RETURN TO MAINLINE                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0719
*   VSAMKEY=KEYZERO;                /* SET VSAM KEY TO KEY ZERO      */
         MVC   VSAMKEY(12),@CB01358                                0719
*   RETRYCNT=ZERO;                  /* INITIALIZE RETRY COUNT TO ZERO*/
         SLR   RETRYCNT,RETRYCNT                                   0720
*   RETRYFLG=ON;                    /* SET RETRY FLAG ON             */
         LA    RETRYFLG,1                                          0721
*   DO WHILE(RETRYFLG=ON);                                         0722
         B     @DE00722                                            0722
@DL00722 DS    0H                                                  0723
*     RETRYCNT=RETRYCNT+ONE;        /* INCREMENT RETRY COUNT BY ONE  */
         AL    RETRYCNT,@CF00052                                   0723
*     RETRYFLG=OFF;                 /* FORCE END OF RETRY LOOP       */
         SLR   RETRYFLG,RETRYFLG                                   0724
*     RFY                                                          0725
*      (PUTRTCD) RSTD;                                             0725
*     GEN REFS(RPLPTR) SETS(PUTRTCD);                              0726
*                                                                  0726
         PUT RPL=(RPLPTR)      /* WRITE I/O BUFFER OUT TO RECORD      XX
                                  ZERO                              */
*     /***************************************************************/
*     /*                                                             */
*     /* IF PUT WAS UNSUCCESSFUL BECAUSE OF A LOGICAL ERROR (RETURN  */
*     /* CODE 8), THEN ISSUE A SHOWCB TO OBTAIN THE FEEDBACK CODE    */
*     /* FROM VSAM TO DETERMINE IF RETRY IS POSSIBLE. IF PUT WAS     */
*     /* UNSUCCESSFUL BECAUSE OF A PHYSICAL ERROR (RETURN CODE 4) OR */
*     /* BECAUSE THE RPL WAS ACTIVE FOR ANOTHER REQUEST (RETURN CODE */
*     /* 12), THEN BRANCH TO COMMON ERROR CODE FOR CVIOSTRT. IF PUT  */
*     /* WAS SUCCESSFUL, FALL THRU THE RETRY LOOP.                   */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0727
*     IF PUTRTCD>=RTCD0004 THEN                                    0727
         LA    @14,4                                               0727
         CR    PUTRTCD,@14                                         0727
         BL    @RF00727                                            0727
*       DO;                                                        0728
*         IF PUTRTCD^=RTCD0008 THEN                                0729
         C     PUTRTCD,@CF00037                                    0729
         BNE   @RT00729                                            0729
*           GO TO CVIOERR;          /* BRANCH TO COMMON ERROR CODE 0730
*                                      FOR CVIOSTRT                  */
*         RFY                                                      0731
*          (PUTRTCD) UNRSTD;                                       0731
*         RFY                                                      0732
*          (R0,                                                    0732
*           R1) RSTD;                                              0732
*         R0=LENGTH(FDBKCODE);                                     0733
         LR    R0,@14                                              0733
*         R1=ADDR(FDBKCODE);                                       0734
         LA    R1,FDBKCODE                                         0734
*         GEN REFS(R0,R1,RPLPTR) SETS(FDBKCODE);                   0735
         SHOWCB RPL=(RPLPTR),AREA=(R1),LENGTH=(R0),FIELDS=FDBK
*         RFY                                                      0736
*          (R0,                                                    0736
*           R1) UNRSTD;                                            0736
*                                                                  0736
*         /***********************************************************/
*         /*                                                         */
*         /* IF THE MAXIMUM NUMBER OF RETRIES HAS NOT BEEN REACHED   */
*         /* AND A RETRYABLE RETURN CODE IS RECEIVED FROM VSAM, TURN */
*         /* THE RETRY FLAG ON IN ORDER TO RETRY PUT. IF RETRY IS NOT*/
*         /* POSSIBLE, BRANCH TO COMMON ERROR CODE FOR CVIOSTRT.     */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0737
*         IF(RETRYCNT<=RETRYMAX)&(FDBKCODE=INSUFSTG×FDBKCODE=TOOMANY)
*           THEN                                                   0737
         C     RETRYCNT,@CF00291                                   0737
         BH    @RF00737                                            0737
         L     @10,FDBKCODE                                        0737
         C     @10,@CF00585                                        0737
         BE    @RT00737                                            0737
         C     @10,@CF00575                                        0737
         BNE   @RF00737                                            0737
@RT00737 DS    0H                                                  0738
*           RETRYFLG=ON;            /* FORCE RETRY LOOP              */
         LA    RETRYFLG,1                                          0738
*         ELSE                                                     0739
*           GO TO CVIOERR;          /* BRANCH TO COMMON ERROR CODE 0739
*                                      FOR CVIOSTRT                  */
*       END;                                                       0740
*   END;                            /* END OF RETRY LOOP             */
@RF00727 DS    0H                                                  0741
@DE00722 LA    @10,1                                               0741
         CR    RETRYFLG,@10                                        0741
         BE    @DL00722                                            0741
*   RFY                                                            0742
*     RPLPTR UNRSTD;                                               0742
         EJECT
*                                                                  0743
*/********************************************************************/
*/********************************************************************/
*/*   CLOSE SYS1.STGINDEX                                            */
*/********************************************************************/
*/********************************************************************/
*                                                                  0743
*   /*****************************************************************/
*   /*                                                               */
*   /* CLOSE SYS1.STGINDEX. IF CLOSE IS NOT SUCCESSFUL, ISSUE A      */
*   /* SHOWCB TO DETERMINE THE TYPE OF ERROR. IF RETRY IS POSSIBLE,  */
*   /* ISSUE ANOTHER CLOSE FOR SYS1.STGINDEX. IF RETRY IS NOT        */
*   /* POSSIBLE, PERFORM COMMON ERROR CODE FOR CVIOSTRT AND RETURN TO*/
*   /* MAINLINE.                                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0743
*   RETRYCNT=ZERO;                  /* INITIALIZE RETRY COUNT TO ZERO*/
         SLR   RETRYCNT,RETRYCNT                                   0743
*   RETRYFLG=ON;                    /* SET RETRY FLAG ON             */
         LR    RETRYFLG,@10                                        0744
*   DO WHILE(RETRYFLG=ON);                                         0745
         B     @DE00745                                            0745
@DL00745 DS    0H                                                  0746
*     RETRYCNT=RETRYCNT+ONE;        /* INCREMENT RETRY COUNT BY ONE  */
         AL    RETRYCNT,@CF00052                                   0746
*     RETRYFLG=OFF;                 /* FORCE END OF RETRY LOOP       */
         SLR   RETRYFLG,RETRYFLG                                   0747
*     RFY                                                          0748
*      (CLOSRTCD) RSTD;                                            0748
*     GEN REFS(ACBPTR) SETS(CLOSRTCD);                             0749
*                                                                  0749
         CLOSE ((ACBPTR))      /* CLOSE SYS1.STGINDEX               */
*     /***************************************************************/
*     /*                                                             */
*     /* IF CLOSE WAS UNSUCCESSFUL, ISSUE A SHOWCB TO OBTAIN THE CODE*/
*     /* RETURNED FROM VSAM. THIS RETURN CODE IS USED TO DETERMINE   */
*     /* WHETHER RETRY IS POSSIBLE. IF CLOSE WAS SUCCESSFUL, FALL    */
*     /* THRU THE RETRY LOOP.                                        */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0750
*     IF CLOSRTCD>=RTCD0004 THEN                                   0750
         LA    @14,4                                               0750
         CR    CLOSRTCD,@14                                        0750
         BL    @RF00750                                            0750
*       DO;                                                        0751
*         RFY                                                      0752
*          (CLOSRTCD) UNRSTD;                                      0752
*         RFY                                                      0753
*          (R0,                                                    0753
*           R1) RSTD;                                              0753
*         R0=LENGTH(VSAMRTCD);                                     0754
         LR    R0,@14                                              0754
*         R1=ADDR(VSAMRTCD);                                       0755
         LA    R1,VSAMRTCD                                         0755
*         GEN REFS(R0,R1,ACBPTR) SETS(VSAMRTCD);                   0756
         SHOWCB ACB=(ACBPTR),AREA=(R1),LENGTH=(R0),FIELDS=ERROR
*         RFY                                                      0757
*          (R0,                                                    0757
*           R1) UNRSTD;                                            0757
*                                                                  0757
*         /***********************************************************/
*         /*                                                         */
*         /* IF THE MAXIMUM NUMBER OF RETRIES HAS NOT BEEN REACHED   */
*         /* AND A RETRYABLE RETURN CODE IS RECEIVED FROM VSAM, TURN */
*         /* THE RETRY FLAG ON IN ORDER TO RETRY CLOSE. IF RETRY IS  */
*         /* NOT POSSIBLE, BRANCH TO COMMON ERROR CODE FOR CVIOSTRT. */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0758
*         IF(RETRYCNT<=RETRYMAX)&(VSAMRTCD=RTCD0136) THEN          0758
         C     RETRYCNT,@CF00291                                   0758
         BH    @RF00758                                            0758
         CLC   VSAMRTCD(4),@CF01385                                0758
         BNE   @RF00758                                            0758
*           RETRYFLG=ON;            /* FORCE RETRY LOOP              */
         LA    RETRYFLG,1                                          0759
*         ELSE                                                     0760
*           GO TO CVIOERR;          /* BRANCH TO COMMON ERROR CODE 0760
*                                      FOR CVIOSTRT                  */
*       END;                                                       0761
*   END;                            /* END OF RETRY LOOP             */
@RF00750 DS    0H                                                  0762
@DE00745 C     RETRYFLG,@CF00236                                   0762
         BE    @DL00745                                            0762
         EJECT
*                                                                  0763
*/********************************************************************/
*/********************************************************************/
*/*   OPEN SYS1.STGINDEX WITH UPDATE OPTION                          */
*/********************************************************************/
*/********************************************************************/
*                                                                  0763
*   /*****************************************************************/
*   /*                                                               */
*   /* MODIFY THE ACB FOR SYS1.STGINDEX SO THAT SYS1.STGINDEX CAN BE */
*   /* OPENED WITH THE UPDATE OPTION INSTEAD OF REUSE OPTION. IF     */
*   /* MODCB IS UNSUCCESSFUL, THEN PERFORM COMMON ERROR CODE FOR     */
*   /* CVIOSTRT AND RETURN TO MAINLINE.                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0763
*   RFY                                                            0763
*    (MODRTCD) RSTD;                                               0763
*   GEN REFS(ACBPTR) SETS(MODRTCD);                                0764
         MODCB ACB=(ACBPTR),BUFND=4,BUFNI=3,MACRF=(NRS),STRNO=3
*   IF MODRTCD^=ZERO THEN                                          0765
         LTR   MODRTCD,MODRTCD                                     0765
         BNZ   @RT00765                                            0765
*     GO TO CVIOERR;                /* BRANCH TO COMMON ERROR CODE 0766
*                                      FOR CVIOSTRT                  */
*   RFY                                                            0767
*    (MODRTCD) UNRSTD;                                             0767
*   RETRYCNT=ZERO;                  /* INITIALIZE RETRY COUNT TO ZERO*/
         SLR   RETRYCNT,RETRYCNT                                   0768
*   RETRYFLG=ON;                    /* SET RETRY FLAG ON             */
         LA    RETRYFLG,1                                          0769
*   DO WHILE(RETRYFLG=ON);                                         0770
         B     @DE00770                                            0770
@DL00770 DS    0H                                                  0771
*     RETRYCNT=RETRYCNT+ONE;        /* INCREMENT RETRY COUNT BY ONE  */
         AL    RETRYCNT,@CF00052                                   0771
*     RETRYFLG=OFF;                 /* FORCE END OF RETRY LOOP       */
         SLR   RETRYFLG,RETRYFLG                                   0772
*     RFY                                                          0773
*      (OPENRTCD) RSTD;                                            0773
*     GEN REFS(ACBPTR) SETS(OPENRTCD);                             0774
*                                                                  0774
         OPEN  ((ACBPTR))      /* OPEN SYS1.STGINDEX WITH UPDATE      XX
                                  OPTION                            */
*     /***************************************************************/
*     /*                                                             */
*     /* IF OPEN WAS UNSUCCESSFUL, ISSUE A SHOWCB TO OBTAIN THE CODE */
*     /* RETURNED FROM VSAM. THIS RETURN CODE IS USED TO DETERMINE   */
*     /* WHETHER RETRY IS POSSIBLE. IF OPEN WAS SUCCESSFUL, FALL THRU*/
*     /* THE RETRY LOOP.                                             */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0775
*     IF OPENRTCD>RTCD0004 THEN                                    0775
         LA    @14,4                                               0775
         CR    OPENRTCD,@14                                        0775
         BNH   @RF00775                                            0775
*       DO;                                                        0776
*         RFY                                                      0777
*          (OPENRTCD) UNRSTD;                                      0777
*         RFY                                                      0778
*          (R0,                                                    0778
*           R1) RSTD;                                              0778
*         R0=LENGTH(VSAMRTCD);                                     0779
         LR    R0,@14                                              0779
*         R1=ADDR(VSAMRTCD);                                       0780
         LA    R1,VSAMRTCD                                         0780
*         GEN REFS(R0,R1,ACBPTR) SETS(VSAMRTCD);                   0781
         SHOWCB ACB=(ACBPTR),AREA=(R1),LENGTH=(R0),FIELDS=ERROR
*         RFY                                                      0782
*          (R0,                                                    0782
*           R1) UNRSTD;                                            0782
*                                                                  0782
*         /***********************************************************/
*         /*                                                         */
*         /* IF THE MAXIMUM NUMBER OF RETRIES HAS NOT BEEN REACHED   */
*         /* AND A RETRYABLE RETURN CODE IS RECEIVED FROM VSAM, TURN */
*         /* THE RETRY FLAG ON IN ORDER TO RETRY OPEN. IF RETRY IS   */
*         /* NOT POSSIBLE, BRANCH TO COMMON ERROR CODE FOR CVIOSTRT. */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0783
*         IF(RETRYCNT<=RETRYMAX)&(VSAMRTCD=RTCD0136×VSAMRTCD=RTCD0148×
*             VSAMRTCD=RTCD0176×VSAMRTCD=RTCD0236×VSAMRTCD=RTCD0244)
*           THEN                                                   0783
         C     RETRYCNT,@CF00291                                   0783
         BH    @RF00783                                            0783
         L     @10,VSAMRTCD                                        0783
         C     @10,@CF01385                                        0783
         BE    @RT00783                                            0783
         C     @10,@CF01387                                        0783
         BE    @RT00783                                            0783
         C     @10,@CF01389                                        0783
         BE    @RT00783                                            0783
         C     @10,@CF01391                                        0783
         BE    @RT00783                                            0783
         C     @10,@CF01393                                        0783
         BNE   @RF00783                                            0783
@RT00783 DS    0H                                                  0784
*           RETRYFLG=ON;            /* FORCE RETRY LOOP              */
         LA    RETRYFLG,1                                          0784
*         ELSE                                                     0785
*           GO TO CVIOERR;          /* BRANCH TO COMMON ERROR CODE 0785
*                                      FOR CVIOSTRT                  */
*       END;                                                       0786
*   END;                            /* END OF RETRY LOOP             */
@RF00775 DS    0H                                                  0787
@DE00770 C     RETRYFLG,@CF00236                                   0787
         BE    @DL00770                                            0787
*   RFY                                                            0788
*     R14 RSTD;                                                    0788
*   R14=SAVRET1;                    /* RESTORE REG 14 WITH RETURN  0789
*                                      ADDRESS                       */
         L     R14,SAVRET1                                         0789
*   RETURN;                         /* RETURN TO MAINLINE            */
@EL00005 DS    0H                                                  0790
@EF00005 DS    0H                                                  0790
@ER00005 BR    @14                                                 0790
*   RFY                                                            0791
*     R14 UNRSTD;                                                  0791
*   RFY                                                            0792
*     ACBPTR UNRSTD;                                               0792
         EJECT
*                                                                  0793
*/********************************************************************/
*/********************************************************************/
*/*   COMMON ERROR CODE FOR CVIOSTRT                                 */
*/********************************************************************/
*/********************************************************************/
*                                                                  0793
*CVIOERR:                                                          0793
*   DO;                                                            0793
*                                                                  0793
CVIOERR  DS    0H                                                  0794
*     /***************************************************************/
*     /*                                                             */
*     /* TELL OPERATOR THAT SYS1.STGINDEX COULD NOT BE INITIALIZED.  */
*     /* ASK THE OPERATOR IF IT IS O.K. TO CONTINUE WITHOUT VIO      */
*     /* JOURNALING AND THEN WAIT FOR OPERATOR'S RESPONSE.           */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0794
*     DO;                           /* WTOP MF(E,WTO02M)             */
*       RFY                                                        0795
*         GPR01P RSTD;              /* RESTRICT REG 1                */
*       GPR01P=ADDR(WTO02M);        /* ADDRESS CONTROL PROGRAM LIST  */
         LA    GPR01P,WTO02M                                       0796
*       SVC(35);                    /* ISSUE WTO SVC                 */
         SVC   35                                                  0797
*       RFY                                                        0798
*         GPR01P UNRSTD;            /* RELEASE REG 1                 */
*     END;                          /* WTOP MF(E,WTO02M) TELL      0799
*                                      OPERATOR THAT SYS1.STGINDEX 0799
*                                      COULD NOT BE INITIALIZED AND
*                                      THAT THERE WILL BE NO VIO   0799
*                                      JOURNALING                    */
*     WTORECB=ZERO;                 /* ZERO OUT WTORECB              */
         SLR   @10,@10                                             0800
         ST    @10,WTORECB                                         0800
*     DO;                           /* WTORP MF(E,WTO22M)            */
*       RFY                                                        0802
*         GPR01P RSTD;              /* RESTRICT REG 1                */
*       GPR01P=ADDR(WTO22M);        /* ADDRESS CONTROL PROGRAM LIST  */
         LA    GPR01P,WTO22M                                       0803
*       SVC(35);                    /* ISSUE WTOR SVC                */
         SVC   35                                                  0804
*       RFY                                                        0805
*         GPR01P UNRSTD;            /* RELEASE REG 1                 */
*     END;                          /* WTORP MF(E,WTO22M) REQUEST A
*                                      DECISION FROM OPERATOR ON   0806
*                                      WHETHER TO CONTINUE WITHOUT 0806
*                                      VIO JOURNALING                */
*     DO;                           /* WAIT ECB(WTORECB)             */
*       RESPECIFY                                                  0808
*        (GPR00P,                                                  0808
*         GPR01P) RESTRICTED;                                      0808
*       GPR00P=1;                   /* LOAD WAIT COUNT               */
         LA    GPR00P,1                                            0809
*       GPR01P=ADDR(WTORECB);       /* ADDRESS OF ECB                */
         LA    GPR01P,WTORECB                                      0810
*       SVC(1);                     /* WAIT SVC                      */
         SVC   1                                                   0811
*       RESPECIFY                                                  0812
*        (GPR00P,                                                  0812
*         GPR01P) UNRESTRICTED;                                    0812
*     END;                          /* WAIT ECB(WTORECB) WAIT FOR  0813
*                                      OPERATOR REPLY                */
*                                                                  0813
*     /***************************************************************/
*     /*                                                             */
*     /* IF SYS1.STGINDEX IS OPEN, ZERO OUT THE ASMVT POINTER TO THE */
*     /* ACB FOR SYS1.STGINDEX AND THEN CLOSE SYS1.STGINDEX.         */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0814
*     IF ASMSTGXA^=ZERO THEN                                       0814
         SLR   @10,@10                                             0814
         C     @10,ASMSTGXA(,ASMVTPTR)                             0814
         BE    @RF00814                                            0814
*       DO;                                                        0815
*         ASMSTGXA=ZERO;            /* ZERO ASMVT POINTER TO ACB FOR
*                                      SYS1.STGINDEX                 */
         ST    @10,ASMSTGXA(,ASMVTPTR)                             0816
*         GEN REFS(ACBPTR)( CLOSE ((ACBPTR)) );/* CLOSE SYS1.STGINDEX*/
          CLOSE ((ACBPTR))
*       END;                                                       0818
*     INTRTCD=INTRTCD×RTCD0016;     /* ADJUST INTERNAL RETURN CODE   */
@RF00814 L     @10,INTRTCD                                         0819
         O     @10,@CF00049                                        0819
         ST    @10,INTRTCD                                         0819
*     RFY                                                          0820
*       R14 RSTD;                                                  0820
*     R14=SAVRET1;                  /* RESTORE REG 14 WITH RETURN  0821
*                                      ADDRESS                       */
         L     R14,SAVRET1                                         0821
*     RETURN;                       /* RETURN TO MAINLINE            */
         B     @EL00005                                            0822
*     RFY                                                          0823
*       R14 UNRSTD;                                                0823
*   END CVIOERR;                                                   0824
*   RFY                                                            0825
*    (ACBAREA@,                                                    0825
*     IOBUFPTR,                                                    0825
*     RPLAREA@) UNRSTD;                                            0825
*   END CVIOSTRT;                                                  0826
         EJECT
*                                                                  0827
*/********************************************************************/
*/*                                                                  */
*/*   BUILDSNL:  BUILD LIST OF ALL PAGE AND SWAP DATA SET NAMES.     */
*/*                                                                  */
*/*   PROCESS:   A CONDITIONAL GETMAIN IS ISSUED FOR THE DATA        */
*/*              SET NAME LIST.  IF GETMAIN IS UNSUCCESSFUL,         */
*/*              INFORM THE OPERATOR THAT PAGEADD COMMAND WILL NOT   */
*/*              WORK. PROCESSING THEN CONTINUES BACK IN MAINLINE.   */
*/*              IF GETMAIN WAS SUCCESSFUL, STORE THE POINTER TO     */
*/*              THE DATA SET NAME LIST IN THE PART AND COPY THE     */
*/*              DATA SET NAME FROM EACH PAGING DATA SET ENTRY       */
*/*              IN THE TPARTBLE INTO THE DATA SET NAME LIST. IF     */
*/*              THERE ARE ANY SWAP DATA SETS IN USE, STORE THE      */
*/*              POINTER TO THE (PARTSIZE +1) ENTRY OF THE DATA SET  */
*/*              NAME LIST INTO THE SART AND COPY THE DATA SET NAME  */
*/*              FROM EACH SWAP DATA SET ENTRY IN THE TPARTBLE       */
*/*              INTO THE DATA SET NAME LIST.  ONCE ALL SWAP DATA    */
*/*              SETS NAMES HAVE BEEN COPIED, PROCESSING CONTINUES   */
*/*              BACK IN THE MAINLINE.                               */
*/*                                                                  */
*/********************************************************************/
*                                                                  0827
*BUILDSNL:                                                         0827
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0827
BUILDSNL DS    0H                                                  0828
         EJECT
*                                                                  0828
*/********************************************************************/
*/********************************************************************/
*/*   CREATE DATA SET NAME LIST BUILD AREA                           */
*/********************************************************************/
*/********************************************************************/
*                                                                  0828
*   RFY                                                            0828
*    (ACBAREA@) RSTD;                                              0828
*   RFY                                                            0829
*    (R14) RSTD;                                                   0829
*   SAVRET1=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,SAVRET1                                         0830
*   RFY                                                            0831
*    (R14) UNRSTD;                                                 0831
*   EPATMIRT=ADDR(ILRCRTM4);        /* SET CURRENT RETRY ADDRESS IN
*                                      EPATH - RRR                   */
         LA    @10,ILRCRTM4                                        0832
         ST    @10,EPATMIRT(,EPAPTR)                               0832
*   EPABUILD=ON;                    /* TURN ON THE BUILD DSN FLAG IN
*                                      THE EPATH TO INDICATE THAT  0833
*                                      ILRTMI00 IS IN BUILDSNL - RRR */
*                                                                  0833
         OI    EPABUILD(EPAPTR),B'00010000'                        0833
*   /*****************************************************************/
*   /*                                                               */
*   /* OBTAIN STORAGE FROM CSA (SUBPOOL 241) FOR DATA SET NAME LIST  */
*   /* VIA GETMAIN                                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0834
*   DSNTOTAL=PARTSIZE+SARSIZE;      /* GET TOTAL NUMBER OF PAGE    0834
*                                      ENTRIES AND SWAP ENTRIES    0834
*                                      (I.E., TOTAL NUMBER OF DATA 0834
*                                      SET NAMES                     */
         L     @10,PARTPTR(,ASMVTPTR)                              0834
         L     @01,SARTPTR(,ASMVTPTR)                              0834
         L     DSNTOTAL,PARTSIZE(,@10)                             0834
         AL    DSNTOTAL,SARSIZE(,@01)                              0834
*   RFY                                                            0835
*    (R1,                                                          0835
*     GTMNRTCD) RSTD;                                              0835
*   DO;                             /* GETMAIN (RC)                0836
*                                      LV(DSNTOTAL*LENGTH(TPAEDSN))
*                                      SP(241)                       */
*     RESPECIFY                                                    0837
*      (GPR01F,                                                    0837
*       GPR15F,                                                    0837
*       GPR00F) RESTRICTED;                                        0837
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0838
*     GPR15F=0;                     /* RC-TYPE GETMAIN               */
         SLR   GPR15F,GPR15F                                       0839
*     GPR00F=DSNTOTAL*LENGTH(TPAEDSN);/* LENGTH REQUESTED            */
         LR    GPR00F,DSNTOTAL                                     0840
         MH    GPR00F,@CH00991                                     0840
*     GPR15F=GPR15F×((241)*256);    /* SP IN BYTE 2                  */
         O     GPR15F,@CF01651                                     0841
*     SVC(120);                     /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0842
*     RESPECIFY                                                    0843
*      (GPR01F,                                                    0843
*       GPR15F,                                                    0843
*       GPR00F) UNRESTRICTED;                                      0843
*   END;                            /* GETMAIN (RC)                0844
*                                      LV(DSNTOTAL*LENGTH(TPAEDSN))
*                                      SP(241) OBTAIN THE NEEDED   0844
*                                      STORAGE                       */
*                                                                  0844
*   /*****************************************************************/
*   /*                                                               */
*   /* IF STORAGE WAS OBTAINED, THEN BUILD DATA SET NAME LIST.       */
*   /* OTHERWISE, TELL OPERATOR PAGE ADD WILL NOT WORK AND RETURN TO */
*   /* MAINLINE                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0845
*   IF GTMNRTCD=ZERO THEN                                          0845
         LTR   GTMNRTCD,GTMNRTCD                                   0845
         BNZ   @RF00845                                            0845
*     DO;                                                          0846
*       RFY                                                        0847
*        (GTMNRTCD) UNRSTD;                                        0847
*       DSNLPTR=R1;                 /* SAVE POINTER TO DATA SET NAME
*                                      LIST BUILD AREA               */
         LR    DSNLPTR,R1                                          0848
*       EPADSLST=DSNLPTR;           /* RECORD POINTER TO DATA SET  0849
*                                      NAME LIST BUILD AREA - RRR    */
         ST    DSNLPTR,EPADSLST(,EPAPTR)                           0849
*       RFY                                                        0850
*        (R1) UNRSTD;                                              0850
*       RFY                                                        0851
*        (RECADDR,                                                 0851
*         RECLEN,                                                  0851
*         SRCADDR,                                                 0851
*         SRCLEN) RSTD;                                            0851
*       RECADDR=DSNLPTR;            /* SET RECEIVER ADDRESS TO     0852
*                                      BEGINNING OF DATA SET NAME  0852
*                                      LIST BUILD AREA               */
         LR    RECADDR,DSNLPTR                                     0852
*       RECLEN=DSNTOTAL*LENGTH(TPAEDSN);/* SET RECEIVER LENGTH TO  0853
*                                      THAT OF THE DATA SET NAME LIST
*                                      BUILD AREA                    */
         LR    RECLEN,DSNTOTAL                                     0853
         MH    RECLEN,@CH00991                                     0853
*       SRCLEN=PADBLANK;            /* SET PADDING CHARACTER TO BLANK
*                                      AND SOURCE LENGTH TO ZERO     */
         L     SRCLEN,@CF01373                                     0854
*       MVCL(RECADDR,SRCADDR);      /* INITIALIZE THE DATA SET NAME
*                                      LIST BUILD AREA TO BLANKS     */
         MVCL  RECADDR,SRCADDR                                     0855
*       RFY                                                        0856
*        (RECADDR,                                                 0856
*         RECLEN,                                                  0856
*         SRCADDR,                                                 0856
*         SRCLEN) UNRSTD;                                          0856
         EJECT
*                                                                  0857
*/********************************************************************/
*/********************************************************************/
*/*   BUILD PAGE PORTION OF DATA SET NAME LIST                       */
*/********************************************************************/
*/********************************************************************/
*                                                                  0857
*       /*************************************************************/
*       /*                                                           */
*       /* BUILD THE PAGE PORTION OF THE DATA SET NAME LIST BY       */
*       /* COPYING THE PAGE DATA SET NAME FROM EACH PAGE DATA SET    */
*       /* ENTRY IN THE TPARTBLE INTO AN ENTRY IN THE DATA SET NAME  */
*       /* LIST                                                      */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0857
*       PARTDSNL=DSNLPTR;           /* STORE POINTER TO PAGE PORTION
*                                      OF THE DATA SET NAME LIST IN
*                                      THE PART                      */
         L     @10,PARTPTR(,ASMVTPTR)                              0857
         ST    DSNLPTR,PARTDSNL(,@10)                              0857
*       DSNEPTR=DSNLPTR;            /* SET DATA SET NAME ENTRY     0858
*                                      POINTER TO BEGINNING OF PAGE
*                                      PORTION OF THE DATA SET NAME
*                                      LIST                          */
         LR    DSNEPTR,DSNLPTR                                     0858
*       TPAEPTR=ADDR(TPARPENT);     /* SET PAGE ENTRY POINTER TO   0859
*                                      BEGINNING OF PAGE DATA SET  0859
*                                      ENTRY SECTION OF TPARTBLE     */
         L     TPAEPTR,TPARPTR                                     0859
         LA    TPAEPTR,TPARPENT(,TPAEPTR)                          0859
*       DO DSNCNT=PARTEUSE BY-ONE TO ONE;                          0860
         L     DSNCNT,PARTEUSE(,@10)                               0860
         B     @DE00860                                            0860
@DL00860 DS    0H                                                  0861
*         IF TPAESKIP=OFF THEN                                     0861
         TM    TPAESKIP(TPAEPTR),B'00010000'                       0861
         BNZ   @RF00861                                            0861
*           DSNENTRY=TPAEDSN;       /* COPY PAGE DATA SET NAME FROM
*                                      TPARTBLE TO DATA SET NAME LIST*/
         MVC   DSNENTRY(44,DSNEPTR),TPAEDSN(TPAEPTR)               0862
*         DSNEPTR=DSNEPTR+LENGTH(TPAEDSN);/* OBTAIN ADDRESS OF THE 0863
*                                      NEXT DATA SET NAME ENTRY      */
@RF00861 AL    DSNEPTR,@CF00991                                    0863
*         TPAEPTR=TPAEPTR+LENGTH(TPARPENT);/* OBTAIN ADDRESS OF THE
*                                      NEXT PAGE DATA SET ENTRY IN 0864
*                                      THE TPARTBLE                  */
         AL    TPAEPTR,@CF00966                                    0864
*       END;                        /* ANY MORE PAGE DATA SET ENTRIES
*                                      FOR THIS IPL                  */
         BCTR  DSNCNT,0                                            0865
@DE00860 LTR   DSNCNT,DSNCNT                                       0865
         BP    @DL00860                                            0865
         EJECT
*                                                                  0866
*/********************************************************************/
*/********************************************************************/
*/*   BUILD SWAP PORTION OF DATA SET NAME LIST                       */
*/********************************************************************/
*/********************************************************************/
*                                                                  0866
*       /*************************************************************/
*       /*                                                           */
*       /* IF THERE ARE ANY SWAP DATA SET ENTRIES IN USE THEN BUILD  */
*       /* THE SWAP PORTION OF THE DATA SET NAME LIST BY COPYING THE */
*       /* SWAP DATA SET NAME FROM EACH SWAP DATA SET ENTRY IN THE   */
*       /* TPARTBLE INTO AN ENTRY IN THE DATA SET NAME LIST.         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0866
*       SARDSNL=DSNLPTR+(PARTSIZE*LENGTH(DSNENTRY));/* STORE POINTER
*                                      TO SWAP PORTION OF THE DATA 0866
*                                      SET NAME LIST IN SART         */
         L     @10,SARTPTR(,ASMVTPTR)                              0866
         L     @06,PARTPTR(,ASMVTPTR)                              0866
         L     @06,PARTSIZE(,@06)                                  0866
         MH    @06,@CH00991                                        0866
         ALR   @06,DSNLPTR                                         0866
         ST    @06,SARDSNL(,@10)                                   0866
*       IF SARUSE^=ZERO THEN                                       0867
         L     @10,SARUSE(,@10)                                    0867
         LTR   @10,@10                                             0867
         BZ    @RF00867                                            0867
*         DO;                                                      0868
         ST    @06,@TF00001                                        0868
*           DSNEPTR=SARDSNL;        /* SET DATA SET NAME ENTRY     0869
*                                      POINTER TO BEGINNING OF SWAP
*                                      PORTION OF DATA SET NAME LIST */
         L     DSNEPTR,@TF00001                                    0869
*           TPASPTR=ADDR(TPARSENT); /* SET SWAP ENTRY POINTER TO   0870
*                                      BEGINNING OF SWAP DATA SET  0870
*                                      ENTRY SECTION OF TPARTBLE     */
         L     TPASPTR,TPARPTR                                     0870
         AL    TPASPTR,@CF01667                                    0870
*           DO DSNCNT=SARUSE BY-ONE TO ONE;                        0871
         LR    DSNCNT,@10                                          0871
         B     @DE00871                                            0871
@DL00871 DS    0H                                                  0872
*             DSNENTRY=TPASDSN;     /* COPY SWAP DATA SET NAME FROM
*                                      TPARTBLE TO DATA SET NAME LIST*/
         MVC   DSNENTRY(44,DSNEPTR),TPASDSN(TPASPTR)               0872
*             DSNEPTR=DSNEPTR+LENGTH(TPASDSN);/* OBTAIN ADDRESS OF 0873
*                                      THE NEXT DATA SET NAME ENTRY  */
         AL    DSNEPTR,@CF00991                                    0873
*             TPASPTR=TPASPTR+LENGTH(TPARSENT);/* OBTAIN ADDRESS OF
*                                      THE NEXT SWAP DATA SET ENTRY
*                                      IN THE TPARTBLE               */
         AL    TPASPTR,@CF00536                                    0874
*           END;                    /* ANY MORE SWAP DATA SET ENTRIES
*                                      FOR THIS IPL ?                */
         BCTR  DSNCNT,0                                            0875
@DE00871 LTR   DSNCNT,DSNCNT                                       0875
         BP    @DL00871                                            0875
*         END;                                                     0876
*     END;                                                         0877
         EJECT
*                                                                  0878
*/********************************************************************/
*/********************************************************************/
*/*   STORAGE NOT AVAILABLE FOR DATA SET NAME LIST                   */
*/********************************************************************/
*/********************************************************************/
*                                                                  0878
*   /*****************************************************************/
*   /*                                                               */
*   /* IF STORAGE FOR DATA SET NAME LIST WAS NOT OBTAINABLE, THEN    */
*   /* ZERO THE PART POINTER TO THE PAGE PORTION OF DSN LIST AND THE */
*   /* SART POINTER TO THE SWAP PORTION OF DSN LIST. TELL OPERATOR   */
*   /* THAT PAGE ADD WILL NOT WORK AND RETURN TO CALLER.             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0878
*   ELSE                                                           0878
*     DO;                                                          0878
         B     @RC00845                                            0878
@RF00845 DS    0H                                                  0879
*       PARTDSNL=ZERO;              /* ZERO PART POINTER TO THE PAGE
*                                      PORTION OF THE DATA SET NAME
*                                      LIST                          */
         SLR   @10,@10                                             0879
         L     @02,PARTPTR(,ASMVTPTR)                              0879
         ST    @10,PARTDSNL(,@02)                                  0879
*       SARDSNL=ZERO;               /* ZERO SART POINTER TO THE SWAP
*                                      PORTION OF THE DATA SET NAME
*                                      LIST                          */
         L     @02,SARTPTR(,ASMVTPTR)                              0880
         ST    @10,SARDSNL(,@02)                                   0880
*       DO;                         /* WTOP MF(E,WTO04M)             */
*         RFY                                                      0882
*           GPR01P RSTD;            /* RESTRICT REG 1                */
*         GPR01P=ADDR(WTO04M);      /* ADDRESS CONTROL PROGRAM LIST  */
         LA    GPR01P,WTO04M                                       0883
*         SVC(35);                  /* ISSUE WTO SVC                 */
         SVC   35                                                  0884
*         RFY                                                      0885
*           GPR01P UNRSTD;          /* RELEASE REG 1                 */
*       END;                        /* WTOP MF(E,WTO04M) TELL      0886
*                                      OPERATOR THAT PAGE ADD WILL 0886
*                                      NOT WORK                      */
*       INTRTCD=INTRTCD×RTCD0064;   /* ADJUST INTERNAL RETURN CODE   */
         L     @10,INTRTCD                                         0887
         O     @10,@CF00575                                        0887
         ST    @10,INTRTCD                                         0887
*     END;                                                         0888
*   RFY                                                            0889
*    (R14) RSTD;                                                   0889
@RC00845 DS    0H                                                  0890
*   R14=SAVRET1;                    /* RESTORE REG 14 WITH RETURN  0890
*                                      ADDRESS                       */
         L     R14,SAVRET1                                         0890
*   RFY                                                            0891
*    (R14) UNRSTD;                                                 0891
*   RFY                                                            0892
*    (ACBAREA@) UNRSTD;                                            0892
*   END BUILDSNL;                                                  0893
@EL00006 DS    0H                                                  0893
@EF00006 DS    0H                                                  0893
@ER00006 BR    @14                                                 0893
*   END ILRTMI00                                                   0894
*                                                                  0894
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDAARDB )                                       */
*/*%INCLUDE SYSLIB  (ILRASMVT)                                       */
*/*%INCLUDE SYSLIB  (ILRASPCT)                                       */
*/*%INCLUDE SYSLIB  (ILREPATH)                                       */
*/*%INCLUDE SYSLIB  (ILRPART )                                       */
*/*%INCLUDE SYSLIB  (ILRPAT  )                                       */
*/*%INCLUDE SYSLIB  (ILRPCT  )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (ILRSART )                                       */
*/*%INCLUDE SYSLIB  (ILRTPARB)                                       */
*/*%INCLUDE SYSLIB  (IEFZB4D0)                                       */
*/*%INCLUDE SYSLIB  (IEFZB4D2)                                       */
*                                                                  0894
*       ;                                                          0894
@DATA    DS    0H
@CH00904 DC    H'13'
         DS    0F
@SA00001 DS    18F
@TF00001 DS    F
         DS    0F
@CF00052 DC    F'1'
@CF00092 DC    F'2'
@CH00092 EQU   @CF00092+2
@CF00095 DC    F'4'
@CF00291 DC    F'5'
@CF00037 DC    F'8'
@CH00037 EQU   @CF00037+2
@CF00049 DC    F'16'
@CF00340 DC    F'32'
@CF00585 DC    F'40'
@CF00991 DC    F'44'
@CH00991 EQU   @CF00991+2
@CF00536 DC    F'48'
@CF00575 DC    F'64'
@CF00966 DC    F'96'
@CF01383 DC    F'128'
@CF01385 DC    F'136'
@CF01387 DC    F'148'
@CF01389 DC    F'176'
@CF01391 DC    F'236'
@CF01393 DC    F'244'
@CF00546 DC    F'256'
@CF01667 DC    F'6208'
@CF01655 DC    F'8192'
@CF01651 DC    F'61696'
@CF01652 DC    F'62720'
@CF01653 DC    F'-1'
@CF00650 DC    XL4'80000000'
@CF01373 DC    XL4'40000000'
@CF00236 DC    BL4'1'
         DS    0D
LPMEPTR  DS    A
PAREPTR  DS    A
SAREPTR  DS    A
TPARPTR  DS    A
S99RBPTR DS    AL4
         ORG   S99RBPTR
S99RBPND DS    BL1
         ORG   S99RBPTR+4
S99TUFP  DS    A
GETAREA@ DS    A
PATCYLA  DS    A
BACKSLOT DS    F
FDBKCODE DS    F
INTRTCD  DS    F
LPMEINDX DS    F
MAXRBA   DS    F
RBA      DS    F
SAVESLOT DS    F
SAVRET1  DS    F
SAVRET2  DS    F
SLOTV    DS    F
VSAMRTCD DS    F
WTORECB  DS    F
RESETFLG DS    FL1
@CC01351 DC    C'SYS1.STGINDEX'
@CC01347 DC    C'STGINDEX'
@CC01363 DC    C'SYSDSN  '
@CC01626 DC    C'ILRPREAD'
@CC01345 DC    C'ASPC'
@CC01361 DC    C'LPME'
@CB01358 DC    X'00000000FFFFFFFF00000000'
@CB01067 DC    X'0001'
@CB01069 DC    X'0002'
@CB01073 DC    X'0004'
@CB01075 DC    X'0005'
@CB01097 DC    X'0010'
@CB01239 DC    X'0057'
         DS    CL2
S99RB    DS    CL20
         ORG   S99RB
S99RBLN  DS    CL1
S99VERB  DS    CL1
S99FLAG1 DS    CL2
         ORG   S99FLAG1
S99FLG11 DS    CL1
         ORG   S99FLG11
S99ONCNV DS    BL1
S99NOCNV EQU   S99FLG11+0
S99NOMNT EQU   S99FLG11+0
S99JBSYS EQU   S99FLG11+0
         ORG   S99FLAG1+1
S99FLG12 DS    CL1
         ORG   S99RB+4
S99RSC   DS    CL4
         ORG   S99RSC
S99ERROR DS    CL2
S99INFO  DS    CL2
         ORG   S99RB+8
S99TXTPP DS    AL4
S99RSV01 DS    FL4
S99FLAG2 DS    CL4
         ORG   S99FLAG2
S99FLG21 DS    CL1
         ORG   S99FLG21
S99WTVOL DS    BL1
S99WTDSN EQU   S99FLG21+0
S99NORES EQU   S99FLG21+0
S99WTUNT EQU   S99FLG21+0
S99OFFLN EQU   S99FLG21+0
S99TIONQ EQU   S99FLG21+0
S99CATLG EQU   S99FLG21+0
S99MOUNT EQU   S99FLG21+0
         ORG   S99FLAG2+1
S99FLG22 DS    CL1
         ORG   S99FLG22
S99UDEVT DS    BL1
S99PCINT EQU   S99FLG22+0
         ORG   S99FLAG2+2
S99FLG23 DS    CL1
S99FLG24 DS    CL1
         ORG   S99RB+20
PARMLIST DS    CL12
         ORG   PARMLIST
PARMFLAG DS    BL1
         ORG   PARMFLAG
PARMRDWT DS    BL1
PARMTPAR EQU   PARMFLAG+0
@NM00075 EQU   PARMFLAG+0
         ORG   PARMLIST+1
PARMTOT  DS    FL1
PARMFRST DS    FL2
PARMENTP DS    AL4
PARMBUFP DS    AL4
         ORG   PARMLIST+12
REPLY    DS    CL1
VSAMKEY  DS    CL12
         DS    CL3
DATUPTRS DS    CL20
         ORG   DATUPTRS
@NM00076 DC    AL4(DATUDDN)
@NM00077 DC    AL4(DATUDSN)
@NM00078 DC    AL4(DATUDSRG)
@NM00079 DC    AL4(DATUSTAT)
@NM00080 DC    X'80'
@NM00081 DC    AL3(DATUDISP)
         ORG   DATUPTRS+20
DATUDDN  DS    CL14
         DS    CL2
DATUDSN  DS    CL19
         DS    CL1
DATUDSRG DS    CL8
DATUSTAT DS    CL7
         DS    CL1
DATUDISP DS    CL7
         DS    CL1
ENQLST   DS    CL16
         ORG   ENQLST
ENQLST01 DC    A(0)
ENQLST02 DS    CL12
         ORG   ENQLST02+0
ENQLST03 DC    B'11000000'
ENQLST04 DC    AL1(13)
ENQLST05 DC    B'01001011'
ENQLST55 DS    CL1
ENQLST06 DC    AL4(@CC01363)
ENQLST07 DC    AL4(@CC01351)
         ORG   ENQLST+16
WTO01M   DS    CL84
         ORG   WTO01M
WTO01M01 DC    H'80'
WTO01M02 DC    B'1000000000000000'
WTO01M03 DC    CL76'ILR001I XXXX - DYNAMIC ALLOCATION OF SYS1.STGINDEX C
               FAILED, NO VIO JOURNALING'
WTO01M04 DC    B'0001000000000000'
WTO01M05 DC    B'0100000001000000'
         ORG   WTO01M+84
WTO02M   DS    CL73
         ORG   WTO02M
WTO02M01 DC    H'69'
WTO02M02 DC    B'1000000000000000'
WTO02M03 DC    CL65'ILR002I INITIALIZATION OF SYS1.STGINDEX FAILED, NO C
               VIO JOURNALING'
WTO02M04 DC    B'0001000000000000'
WTO02M05 DC    B'0100000001000000'
         ORG   WTO02M+73
         DS    CL3
WTO03M   DS    CL88
         ORG   WTO03M
WTO03M01 DC    AL1(1)
WTO03M02 DC    AL3(REPLY)
WTO03M03 DC    AL4(WTORECB)
WTO03M04 DC    H'76'
WTO03M05 DC    B'1000000000000000'
WTO03M06 DC    CL72'ILR003A WARM START FOR VIO FAILED. REPLY ''U'' TO IC
               NVOKE CVIO PROCESSING'
WTO03M07 DC    B'1000000000000000'
WTO03M08 DC    B'1000000001000000'
         ORG   WTO03M+88
WTO04M   DS    CL80
         ORG   WTO04M
WTO04M01 DC    H'76'
WTO04M02 DC    B'1000000000000000'
WTO04M03 DC    CL72'ILR004I ASM UNABLE TO BUILD DATA SET NAME LIST, PAGC
               EADD COMMAND UNUSABLE'
WTO04M04 DC    B'0001000000000000'
WTO04M05 DC    B'0100000001000000'
         ORG   WTO04M+80
WTO20M   DS    CL72
         ORG   WTO20M
WTO20M01 DC    H'68'
WTO20M02 DC    B'1000000000000000'
WTO20M03 DC    CL64'ILR020I ASM ENQ FOR SYS1.STGINDEX FAILED. CVIO REQUC
               IRED NEXT IPL'
WTO20M04 DC    B'0001000000000000'
WTO20M05 DC    B'0100000001000000'
         ORG   WTO20M+72
WTO22M   DS    CL70
         ORG   WTO22M
WTO22M01 DC    AL1(1)
WTO22M02 DC    AL3(REPLY)
WTO22M03 DC    AL4(WTORECB)
WTO22M04 DC    H'58'
WTO22M05 DC    B'1000000000000000'
WTO22M06 DC    CL54'ILR022A REPLY ''U'' TO CONTINUE WITHOUT VIO JOURNALC
               ING'
WTO22M07 DC    B'1000000000000000'
WTO22M08 DC    B'1000000001000000'
         ORG   WTO22M+70
RC       DS    CL4
STRIP    DC    X'0F0F0F0F'
CONVERT  DC    CL16'0123456789ABCDEF'
ILRTMI00 CSECT
TMIPATCH DC    ((@DATA-@MAINENT)/19)X'00'
         ORG   TMIPATCH
         DC    C'MAINTENANCE AREA'
         DC    34X'00'
         ORG
ILRTMI00 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RETRYFLG EQU   @02
RETRYCNT EQU   @08
LOCALCNT EQU   @09
ENDPAT   EQU   @08
DSNTOTAL EQU   @02
DSNCNT   EQU   @08
DSNLPTR  EQU   @07
DSNEPTR  EQU   @06
TPASPTR  EQU   @02
TPAEPTR  EQU   @02
PCTPTR   EQU   @10
PATPTR   EQU   @02
ASMVTPTR EQU   @03
ASPCTPTR EQU   @07
ASPEXPTR EQU   @07
EPAPTR   EQU   @04
ACBPTR   EQU   @05
RPLPTR   EQU   @06
ACBAREA@ EQU   @05
IOBUFPTR EQU   @07
RPLAREA@ EQU   @06
BITINDEX EQU   @08
CYLNUM   EQU   @15
CYLSIZE  EQU   @00
CLOSRTCD EQU   @15
DYNARTCD EQU   @15
ENQRTCD  EQU   @15
FRMNRTCD EQU   @15
GENRTCD  EQU   @15
GETRTCD  EQU   @15
GTMNRTCD EQU   @15
MODRTCD  EQU   @15
OPENRTCD EQU   @15
PARTNUM  EQU   @14
PRDRTCD  EQU   @15
PUTRTCD  EQU   @15
RECADDR  EQU   @14
RECLEN   EQU   @15
REMAIN   EQU   @14
RETCODE  EQU   @15
RSLOTNUM EQU   @15
SRCADDR  EQU   @00
SRCLEN   EQU   @01
UPDTRTCD EQU   @15
VERFRTCD EQU   @15
WARMRTCD EQU   @15
GPR00F   EQU   @00
GPR01F   EQU   @01
GPR15F   EQU   @15
GPR00P   EQU   @00
GPR01P   EQU   @01
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
         ENTRY ILRCRTM2
         ENTRY ILRCRTM3
         ENTRY ILRCRTM4
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBDVIND EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBVVIC  EQU   ACBINFLG
ACBSDS   EQU   ACBVVIC
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDAAMB   EQU   0
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBEOVPT EQU   IDAAMB+56
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
IDAAMBL  EQU   0
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLSHAR EQU   IDAAMBL+33
AMBLFLG1 EQU   IDAAMBL+35
AMBLVVIC EQU   AMBLFLG1
AMBLFLG2 EQU   IDAAMBL+36
AMBLDTA  EQU   IDAAMBL+52
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDNEST  EQU   IDAAMDSB+4
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDPARDB EQU   IDAAMDSB+36
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
IDAARDB  EQU   0
ARDTYPE  EQU   IDAARDB+1
ARDERBA  EQU   IDAARDB+16
ARDPRF   EQU   IDAARDB+28
ASMVT    EQU   0
ASMFLAG1 EQU   ASMVT
ASMNOLCL EQU   ASMFLAG1
ASMFLAG2 EQU   ASMVT+1
ASMNOTMR EQU   ASMFLAG2
ASMNOTPT EQU   ASMFLAG2
ASMWARM  EQU   ASMFLAG2
ASMSART  EQU   ASMVT+4
ASMPART  EQU   ASMVT+8
ASMSTAGQ EQU   ASMVT+32
ASMPCCWQ EQU   ASMVT+64
ASMBKSLT EQU   ASMVT+108
ASMVSC   EQU   ASMVT+116
ASMSLOTV EQU   ASMVT+128
ASMSTGXA EQU   ASMVT+136
ASMCINV  EQU   ASMVT+140
ASMLSAI  EQU   ASMVT+144
ASMLSAIL EQU   ASMLSAI
ASMLSAIH EQU   ASMLSAI+4
ASMGOSQS EQU   ASMVT+152
ASMREQCT EQU   ASMVT+160
ASMPMSGS EQU   ASMVT+264
ASMWKSA1 EQU   ASMVT+368
ASMWKSA2 EQU   ASMVT+448
ASMWKSA3 EQU   ASMVT+528
ASMWKSA4 EQU   ASMVT+608
ASMWKSA5 EQU   ASMVT+688
ASMPOOLS EQU   0
ASMCPAVQ EQU   ASMPOOLS+8
ASMCPRSQ EQU   ASMPOOLS+16
ASPCT    EQU   0
ASPHDR   EQU   ASPCT
ASPIDENT EQU   ASPHDR
ASPBKEY  EQU   ASPHDR+8
ASPSSYM  EQU   ASPBKEY
ASPFLAG  EQU   ASPHDR+28
ASPMAXPN EQU   ASPHDR+32
ASPSAVCT EQU   ASPHDR+40
ASPLPMES EQU   ASPCT+64
ASPEXTSN EQU   0
ASPEHDR  EQU   ASPEXTSN
ASPEIDNT EQU   ASPEHDR
ASPEXKEY EQU   ASPEHDR+8
ASPSECTA EQU   ASPEXTSN+64
ASPLPME  EQU   0
ASPLPFLG EQU   ASPLPME
ASPVLSID EQU   ASPLPME+1
EPATH    EQU   0
EPAVSAM  EQU   EPATH
EPAVWKA  EQU   EPAVSAM+4
EPATMWKA EQU   EPAVWKA
EPAAASP  EQU   EPAVSAM+8
EPADSLST EQU   EPAAASP
EPABASP  EQU   EPAVSAM+12
EPATMIBA EQU   EPABASP
EPARASP  EQU   EPAVSAM+16
EPATMACB EQU   EPARASP
EPARTYRG EQU   EPAVSAM+20
EPABKSLT EQU   EPARTYRG
EPATMISV EQU   EPABKSLT
EPAFLAG1 EQU   EPAVSAM+24
EPAGRPOP EQU   EPAFLAG1
EPAFLAG2 EQU   EPAVSAM+25
EPAWARM  EQU   EPAFLAG2
EPACOLD  EQU   EPAFLAG2
EPABUILD EQU   EPAFLAG2
EPATMI   EQU   EPAFLAG2
EPAACE   EQU   EPAVSAM+28
EPAABEND EQU   EPAVSAM+36
EPATMIRT EQU   EPAABEND
EPATPART EQU   EPAVSAM+40
PART     EQU   0
PARTHDR  EQU   PART
PARTSIZE EQU   PARTHDR+4
PARTEUSE EQU   PARTHDR+8
PARTTPAR EQU   PARTHDR+24
PARTDSNL EQU   PARTTPAR
PARTCOMQ EQU   PARTHDR+48
PARTSPLQ EQU   PARTHDR+56
PARTDUPQ EQU   PARTHDR+64
PARTLOCQ EQU   PARTHDR+72
PARTENTS EQU   PART+80
PARTENT  EQU   0
PARELKUP EQU   PARTENT+4
PARELKFL EQU   PARELKUP
PARETYPE EQU   PARTENT+8
PAREFLG1 EQU   PARTENT+9
PARESZSL EQU   PARTENT+16
PARESLTA EQU   PARTENT+20
PAREPATP EQU   PARTENT+32
PAREPCTP EQU   PARTENT+36
PAT      EQU   0
PATHDR   EQU   PAT
PATCYLNO EQU   PATHDR+8
PATCYLSZ EQU   PATHDR+10
PATCYLMW EQU   PATHDR+12
PATMAP   EQU   PAT+16
PATCYLS  EQU   PATMAP
PATCYLMP EQU   0
PCT      EQU   0
PCTDMASK EQU   PCT+20
PCTABLE  EQU   PCT+40
PCTSECT  EQU   PCTABLE
PCTSLTNM EQU   PCTSECT
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLNXTRP EQU   RPLCOMN+44
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
SART     EQU   0
SARTHDR  EQU   SART
SARSIZE  EQU   SARTHDR+4
SARUSE   EQU   SARTHDR+8
SARDSNL  EQU   SARTHDR+24
SARWAITQ EQU   SARTHDR+40
SARTE    EQU   0
SREFLG   EQU   SARTE+9
TPARTBLE EQU   0
TPARHEAD EQU   TPARTBLE
TPARFLAG EQU   TPARHEAD+8
TPARWARM EQU   TPARFLAG
TPARTIME EQU   TPARHEAD+32
TPARPENT EQU   TPARTBLE+64
TPARSENT EQU   TPARTBLE+6208
TPARENT  EQU   0
TPAESTAT EQU   TPARENT+2
TPAESKIP EQU   TPAESTAT
TPAECLAS EQU   TPARENT+3
TPAEDSN  EQU   TPARENT+8
TPASENT  EQU   0
TPASDSN  EQU   TPASENT+4
S99TUPL  EQU   0
S99TUPTR EQU   S99TUPL
S99TUP   EQU   0
S99TUNIT EQU   0
S99TUKEY EQU   S99TUNIT
S99TUNUM EQU   S99TUNIT+2
S99TUENT EQU   S99TUNIT+4
S99TULNG EQU   S99TUENT
S99TUPAR EQU   S99TUENT+2
S99TUFLD EQU   0
DSNENTRY EQU   0
GTMNAREA EQU   0
ILRSLOTV EQU   0
IOBUFFER EQU   0
IOBTIME  EQU   IOBUFFER
IOBKEY   EQU   IOBUFFER+8
ILRMSGSP EQU   0
ILRPREAD EQU   0
BITMMWRD EQU   0
DSNLIST  EQU   0
PATCYL   EQU   0
ASM1WKSV EQU   ASMWKSA1
ASM1RGSV EQU   ASM1WKSV
ASM1WRKA EQU   ASM1WKSV+60
ASM2WKSV EQU   ASMWKSA2
ASM2WRKA EQU   ASM2WKSV+52
ASM2FLGS EQU   ASM2WRKA+12
ASM3WKSV EQU   ASMWKSA3
ASM4WKSV EQU   ASMWKSA4
ASM4RGSV EQU   ASM4WKSV
ASM5WKSV EQU   ASMWKSA5
ASM5RGSV EQU   ASM5WKSV
ASPASST  EQU   ASPSECTA
PARTPTR  EQU   ASMPART
SARTPTR  EQU   ASMSART
AMBPTR   EQU   AMBLDTA
AMBLPTR  EQU   ACBAMBL
AMDSBPTR EQU   AMBDSB
ARDBPTR  EQU   AMDPARDB
ACBBAREA EQU   IFGACB
RPLBAREA EQU   IFGRPL
MSG01    EQU   WTO01M
RTNCODE  EQU   MSG01+12
ASPLPMEE EQU   ASPSECTA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00083 EQU   MSG01+16
@NM00082 EQU   MSG01
ASPASSTE EQU   ASPASST
ASM5FLGS EQU   ASM5WKSV+64
ASM5AIA  EQU   ASM5WKSV+60
ASM5GCTR EQU   ASM5WKSV+56
ASM5SR14 EQU   ASM5WKSV+52
@NM00038 EQU   ASM5RGSV+4
ASM5RG2  EQU   ASM5RGSV
@NM00037 EQU   ASM4RGSV+4
ASM4RG2  EQU   ASM4RGSV
ASM3SR13 EQU   ASM3WKSV+28
ASM3R14B EQU   ASM3WKSV+24
ASM3R14A EQU   ASM3WKSV+20
ASM3GRPA EQU   ASM3WKSV+16
ASM3TMPA EQU   ASM3WKSV+12
ASM3PIOP EQU   ASM3WKSV+8
ASM3GENQ EQU   ASM3WKSV+4
ASM3SWPQ EQU   ASM3WKSV
ASM2SR14 EQU   ASM2WRKA+16
@NM00036 EQU   ASM2WRKA+13
ASM2WFLG EQU   ASM2FLGS
ASM2RFLG EQU   ASM2FLGS
ASM2DUPQ EQU   ASM2WRKA+8
ASM2CAQ  EQU   ASM2WRKA+4
ASM2PAQ  EQU   ASM2WRKA
ASM2RGSV EQU   ASM2WKSV
ASM1NXTA EQU   ASM1WRKA+4
ASM1ASCB EQU   ASM1WRKA
ASM1RG15 EQU   ASM1RGSV+56
@NM00035 EQU   ASM1RGSV+4
ASM1RG1  EQU   ASM1RGSV
@NM00074 EQU   IOBUFFER+20
S99TUPRM EQU   S99TUFLD+2
S99TULEN EQU   S99TUFLD
S99TUPND EQU   S99TUP
S99TUPLN EQU   S99TUPTR
@NM00073 EQU   TPASENT+1
TPASFLAG EQU   TPASENT
@NM00072 EQU   TPARENT+80
TPAEIORB EQU   TPARENT+76
TPAEPATP EQU   TPARENT+72
TPAEPATB EQU   TPARENT+68
TPAESZSL EQU   TPARENT+64
TPAEPCT  EQU   TPARENT+60
TPAEUCB  EQU   TPARENT+56
TPAEEDB  EQU   TPARENT+52
@NM00071 EQU   TPARENT+5
TPAEDSNL EQU   TPARENT+4
@NM00070 EQU   TPAECLAS
TPAELOCL EQU   TPAECLAS
TPAEDPLX EQU   TPAECLAS
TPAECOMM EQU   TPAECLAS
TPAEPLPA EQU   TPAECLAS
@NM00069 EQU   TPAESTAT
TPAEVALD EQU   TPAESTAT
TPAEXPND EQU   TPAESTAT
TPAEPRVI EQU   TPAESTAT
TPAEPARM EQU   TPAESTAT
TPAETYPE EQU   TPARENT
@NM00068 EQU   TPARTBLE+8192
@NM00067 EQU   TPARTBLE+7408
@NM00066 EQU   TPARHEAD+40
@NM00065 EQU   TPARHEAD+28
TPARPCTQ EQU   TPARHEAD+24
TPAREXPD EQU   TPARHEAD+20
TPARNPGS EQU   TPARHEAD+16
TPARUSE  EQU   TPARHEAD+12
@NM00064 EQU   TPARHEAD+9
@NM00063 EQU   TPARFLAG
TPARIDNT EQU   TPARHEAD
SREUCB   EQU   SARTE+44
SREEDB   EQU   SARTE+40
SRESDCTE EQU   SARTE+36
SRESAT   EQU   SARTE+32
SREIORB  EQU   SARTE+28
SRERRCNT EQU   SARTE+24
SREAVLSL EQU   SARTE+20
SRETOTSL EQU   SARTE+16
SRESCCW  EQU   SARTE+12
SRENN    EQU   SARTE+10
@NM00062 EQU   SREFLG
SREFIXED EQU   SREFLG
SREDRIVE EQU   SREFLG
SREDSBD  EQU   SREFLG
SRENUSE  EQU   SREFLG
@NM00061 EQU   SARTE+8
SRELOCK  EQU   SARTE+4
SRENEXT  EQU   SARTE
SARENTS  EQU   SART+80
@NM00060 EQU   SARTHDR+60
SARSETSZ EQU   SARTHDR+56
SARSRBCT EQU   SARTHDR+52
SARSRBP  EQU   SARTHDR+48
SARWAITL EQU   SARWAITQ+4
SARWAITF EQU   SARWAITQ
SARSETCT EQU   SARTHDR+36
SARSCCWQ EQU   SARTHDR+32
SARSDCT  EQU   SARTHDR+28
SARMOVNX EQU   SARTHDR+20
SARFXDNX EQU   SARTHDR+16
@NM00059 EQU   SARTHDR+12
SARID    EQU   SARTHDR
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00058 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00057 EQU   RPLRBAR+3
@NM00056 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLRSV77 EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
RPLSSNIN EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLRLEN  EQU   RPLCOMN+48
RPLCHAIN EQU   RPLNXTRP
RPLOPT4  EQU   RPLOPTCD+3
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
@NM00055 EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLAREA  EQU   RPLCOMN+32
RPLTCBPT EQU   RPLCOMN+28
RPLDACB  EQU   RPLCOMN+24
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
PCTTRBA  EQU   PCTSECT+2
PCTSECNM EQU   PCTSECT+1
PCTSLOT  EQU   PCTSLTNM
PCTFOVFL EQU   PCTSLTNM
PCTMSSB  EQU   PCT+38
PCTMAXTK EQU   PCT+36
PCTRQTIM EQU   PCT+32
PCTSSECN EQU   PCT+30
PCTDPGWT EQU   PCT+28
PCTNEXT  EQU   PCT+16
PCTCYLSZ EQU   PCT+14
PCTDTYPX EQU   PCT+12
PCTSMAX  EQU   PCT+10
PCTDTYPE EQU   PCT+4
PCTID    EQU   PCT
PATRSV1  EQU   PATHDR+14
PATPART  EQU   PATHDR+4
PATIDENT EQU   PATHDR
@NM00054 EQU   PARTENT+62
PARELCYL EQU   PARTENT+60
PARERQTM EQU   PARTENT+56
PAREWTQE EQU   PARTENT+52
PARENODE EQU   PARTENT+48
PAREUCBP EQU   PARTENT+44
PAREEDBP EQU   PARTENT+40
PAREIORB EQU   PARTENT+28
PARERRCT EQU   PARTENT+24
PAREIOEQ EQU   PARTENT+12
PARENN   EQU   PARTENT+10
@NM00053 EQU   PAREFLG1
PAREINCP EQU   PAREFLG1
PAREDSBD EQU   PAREFLG1
PARENUSE EQU   PAREFLG1
@NM00052 EQU   PARETYPE
PARELOCL EQU   PARETYPE
PAREDPLX EQU   PARETYPE
PARECOMM EQU   PARETYPE
PAREPLPA EQU   PARETYPE
PARECPCT EQU   PARELKUP+2
PAREIORN EQU   PARELKUP+1
@NM00051 EQU   PARELKFL
PAREFSIP EQU   PARELKFL
PAREPARE EQU   PARTENT
PARTLOCL EQU   PARTLOCQ+4
PARTLOCF EQU   PARTLOCQ
PARTDUPL EQU   PARTDUPQ+4
PARTDUPF EQU   PARTDUPQ
PARTSPLL EQU   PARTSPLQ+4
PARTSPLF EQU   PARTSPLQ
PARTCOML EQU   PARTCOMQ+4
PARTCOMF EQU   PARTCOMQ
PARTLOCK EQU   PARTHDR+44
PARTLKUP EQU   PARTHDR+40
@NM00050 EQU   PARTHDR+34
PARTLCNT EQU   PARTHDR+32
PARTPCTQ EQU   PARTHDR+28
PARTCIR2 EQU   PARTHDR+20
PARTCIR1 EQU   PARTHDR+16
PARTAIAE EQU   PARTHDR+12
PARTIDEN EQU   PARTHDR
EPATMRSV EQU   EPAVSAM+32
EPAMSECB EQU   EPAACE
@NM00049 EQU   EPAVSAM+26
@NM00048 EQU   EPAFLAG2
EPARECUR EQU   EPAFLAG2
EPAMAST  EQU   EPAFLAG2
EPATMXIT EQU   EPAFLAG2
EPARPLB  EQU   EPAFLAG1
EPAUNSAV EQU   EPAFLAG1
EPAASGN  EQU   EPAFLAG1
EPAACASR EQU   EPAFLAG1
EPAACT   EQU   EPAGRPOP
EPASAVE  EQU   EPAGRPOP
EPARLG   EQU   EPAGRPOP
EPAVSAMI EQU   EPAFLAG1
EPASWKA  EQU   EPATMWKA
EPAOWKA  EQU   EPAVSAM
ASPSLOT  EQU   ASPVLSID+1
ASPPRTNN EQU   ASPVLSID
@NM00047 EQU   ASPLPFLG
ASPLSVRP EQU   ASPLPFLG
ASPLIOER EQU   ASPLPFLG
ASPLOPIN EQU   ASPLPFLG
ASPLSAVE EQU   ASPLPFLG
ASPLVALD EQU   ASPLPFLG
@NM00046 EQU   ASPEXTSN+1088
@NM00045 EQU   ASPEHDR+24
ASPASSTI EQU   ASPEHDR+22
@NM00044 EQU   ASPEHDR+21
ASPASSTN EQU   ASPEHDR+20
ASPEXTNM EQU   ASPEXKEY+8
ASPESSYM EQU   ASPEXKEY
@NM00043 EQU   ASPEHDR+4
@NM00042 EQU   ASPCT+1088
ASPASSTP EQU   ASPCT+48
ASPAEXCT EQU   ASPHDR+46
ASPLEXCT EQU   ASPHDR+44
ASPBKSLT EQU   ASPHDR+36
@NM00041 EQU   ASPHDR+29
@NM00040 EQU   ASPFLAG
ASPSAVRP EQU   ASPFLAG
ASPSAVED EQU   ASPFLAG
ASPLGE   EQU   ASPHDR+24
ASPASCB  EQU   ASPHDR+20
@NM00039 EQU   ASPBKEY+8
ASPLGID  EQU   ASPHDR+4
ASMCPRES EQU   ASMCPRSQ+4
ASMCPTAK EQU   ASMCPRSQ
ASMCPCNT EQU   ASMCPAVQ+4
ASMCPAVL EQU   ASMCPAVQ
ASMCPEXT EQU   ASMPOOLS+6
ASMCPSIZ EQU   ASMPOOLS+4
ASMCPID  EQU   ASMPOOLS
ASMRSV12 EQU   ASMVT+1000
ASMSAVE  EQU   ASMVT+928
ASMWKSA7 EQU   ASMVT+848
ASMWKSA6 EQU   ASMVT+768
ASMACEPC EQU   ASMVT+344
ASMSWKPC EQU   ASMVT+328
ASMBWKPC EQU   ASMVT+312
ASMIOEPC EQU   ASMVT+296
ASMRSV10 EQU   ASMVT+280
ASMPVACE EQU   ASMVT+276
ASMPIOFR EQU   ASMVT+272
ASMPVACQ EQU   ASMVT+268
ASMPMSG0 EQU   ASMVT+260
ASMPFRLG EQU   ASMVT+256
ASMPRLG  EQU   ASMVT+252
ASMPACT  EQU   ASMVT+248
ASMPSAV  EQU   ASMVT+244
ASMPCMP  EQU   ASMVT+240
ASMPCMPA EQU   ASMVT+236
ASMPCMPN EQU   ASMVT+232
ASMPCMPD EQU   ASMVT+228
ASMPEX   EQU   ASMVT+224
ASMVRMTR EQU   ASMVT+220
ASMPSRBC EQU   ASMVT+216
ASMPSRMT EQU   ASMVT+212
ASMPSWPD EQU   ASMVT+208
ASMPTM   EQU   ASMVT+204
ASMPFRSW EQU   ASMVT+200
ASMPFRSL EQU   ASMVT+196
ASMPQIOE EQU   ASMVT+192
ASMRSV8  EQU   ASMVT+188
ASMVSAMW EQU   ASMVT+184
ASMTASCB EQU   ASMVT+180
ASMRLGWQ EQU   ASMVT+176
ASMRLGRQ EQU   ASMVT+172
ASMTMECB EQU   ASMVT+168
ASMTCBPT EQU   ASMVT+164
ASMGOSWK EQU   ASMGOSQS+4
ASMGOSWT EQU   ASMGOSQS
ASMLGVT  EQU   ASMVT+132
ASMERRS  EQU   ASMVT+124
ASMNVSC  EQU   ASMVT+120
ASMSLOTS EQU   ASMVT+112
ASMRSV7  EQU   ASMVT+92
ASMPSRB  EQU   ASMVT+88
ASMSRBCT EQU   ASMVT+84
ASMIOCNT EQU   ASMVT+80
ASMBURST EQU   ASMVT+76
ASMPCCWN EQU   ASMVT+72
ASMPCCWC EQU   ASMPCCWQ+4
ASMPCCWA EQU   ASMPCCWQ
ASMRSV6  EQU   ASMVT+48
ASMIORQC EQU   ASMVT+44
ASMIORQR EQU   ASMVT+40
ASMSTAGL EQU   ASMSTAGQ+4
ASMSTAGF EQU   ASMSTAGQ
ASMRSV5  EQU   ASMVT+28
ASMMSGBF EQU   ASMVT+24
ASMEREC  EQU   ASMVT+20
ASMTRPAG EQU   ASMVT+16
ASMGOS   EQU   ASMVT+12
ASMDSSFS EQU   ASMVT+2
ASMQUICK EQU   ASMFLAG2
ASMNOSAV EQU   ASMFLAG2
ASMCALLQ EQU   ASMFLAG2
ASMPLPAS EQU   ASMFLAG1
ASMCOMMF EQU   ASMFLAG1
ASMPLPAF EQU   ASMFLAG1
ASMNODPX EQU   ASMFLAG1
ASMRSV1  EQU   ASMFLAG1
ASMNOCWQ EQU   ASMFLAG1
ASMDUPLX EQU   ASMFLAG1
ARDKEYS  EQU   IDAARDB+29
@NM00034 EQU   ARDPRF
ARDPRFMT EQU   ARDPRF
ARDPRSS  EQU   ARDPRF
ARDRELNO EQU   IDAARDB+26
ARDVOLSR EQU   IDAARDB+20
ARDHRBA  EQU   IDAARDB+12
ARDHKRBA EQU   IDAARDB+8
ARDNPTR  EQU   IDAARDB+4
ARDLEN   EQU   IDAARDB+2
ARDUSED  EQU   ARDTYPE
ARDEOD   EQU   ARDTYPE
ARDUOVFL EQU   ARDTYPE
ARDSS    EQU   ARDTYPE
ARDHLI   EQU   ARDTYPE
ARDKR    EQU   ARDTYPE
ARDID    EQU   IDAARDB
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNLR   EQU   AMDSTAT+12
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00033 EQU   IDAAMDSB+41
@NM00032 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDLRECL EQU   IDAAMDSB+24
AMDCINV  EQU   IDAAMDSB+20
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDCIPCA EQU   IDAAMDSB+12
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDKEYLN EQU   IDAAMDSB+8
AMDRKP   EQU   IDAAMDSB+6
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDDST   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
AMBLCMB  EQU   IDAAMBL+64
AMBLBIB  EQU   IDAAMBL+60
AMBLIX   EQU   IDAAMBL+56
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00031 EQU   IDAAMBL+40
AMBLNUM  EQU   IDAAMBL+38
AMBLNST  EQU   IDAAMBL+37
@NM00030 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00029 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLSDS  EQU   AMBLVVIC
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00028 EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00027 EQU   IDAAMBL+31
@NM00026 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLPATH EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLXPT  EQU   IDAAMBL+24
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00025 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLACB  EQU   IDAAMBL+8
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00024 EQU   AMBCSWD1+1
@NM00023 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
AMBLSR   EQU   AMBAFLG
@NM00022 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00021 EQU   IDAAMB+68
AMBIWA   EQU   IDAAMB+64
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00020 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00019 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBSDS   EQU   AMBINFL
AMBUPX   EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBCAT   EQU   AMBINFL
@NM00018 EQU   AMBINFL
@NM00017 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00016 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00015 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00014 EQU   AMBDSORG
AMBINBUF EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
AMBCREAT EQU   AMBFLG1
@NM00013 EQU   AMBFLG0
AMBSWSP  EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBCACB  EQU   IDAAMB+16
AMBPH    EQU   IDAAMB+12
AMBBUFC  EQU   IDAAMB+8
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00012 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
@NM00011 EQU   ACBINFLG+1
ACBBYPSS EQU   ACBINFLG
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00010 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00009 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00008 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00007 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00006 EQU   ACBDSORG
ACBOPTJ  EQU   ACBDVIND
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00005 EQU   ACBCCTYP
ACBTRCID EQU   ACBCCTYP
@NM00004 EQU   ACBRECFM
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00003 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00002 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00001 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00370 EQU   WARMERR
@RF00389 EQU   WARMERR
@RT00399 EQU   WARMERR
@RT00404 EQU   WARMERR
@RT00409 EQU   WARMERR
@RT00422 EQU   WARMERR
@RF00430 EQU   WARMERR
@RT00435 EQU   WARMERR
@RT00441 EQU   WARMERR
@RT00463 EQU   WARMERR
@RT00471 EQU   UPDTCNTS
@RF00475 EQU   WARMERR
@RT00494 EQU   WARMERR
@RT00685 EQU   CVIOERR
@RF00704 EQU   CVIOERR
@RT00716 EQU   CVIOERR
@RT00729 EQU   CVIOERR
@RF00737 EQU   CVIOERR
@RF00758 EQU   CVIOERR
@RT00765 EQU   CVIOERR
@RF00783 EQU   CVIOERR
@RF00867 EQU   @RC00845
@ENDDATA EQU   *
         END   ILRTMI00,(C'PLS0933',0701,77325)
