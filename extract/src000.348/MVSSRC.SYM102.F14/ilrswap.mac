         TITLE 'ILRSWAP, ASM SWAP CONTROLLER                           *
                        '
ILRSWAP  CSECT
         USING *,R15
         MODID
         DROP  R15
         L     R15,CVTPTR          GET CVT ADDRESS
         L     R15,CVTASMVT(,R15)  GET ASMVT ADDRESS
         STM   R2,R14,ASMWKSA4(R15) STORE CALLERS REGS
         ENTRY ILRCBSP1             FRR REFERENCED LABEL
         BALR  R12,0               ESTABLISH BASE
         USING *,R12               TELL ASSEMBLER
*ILRCBSP1:                                                         0122
*   ASMVTPTR=R15;                   /* LOAD PERMANENT ASMVT POINTER  */
ILRCBSP1 LR    ASMVTPTR,R15                                        0122
*   RFY                                                            0123
*     R15 UNRSTD;                                                  0123
*                                                                  0123
*   /*****************************************************************/
*   /*                                                               */
*   /* LOAD THE FRR STACK FOR RECOVERY, AND SETUP TO PROCESS.        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0124
*   FADDR=ASMPIOFR;                 /* GET ADDRESS OF IOCTL FRR      */
         L     FADDR,ASMPIOFR(,ASMVTPTR)                           0124
*   GENERATE REFS(FADDR) SETS(ATAPTR,R7,R8);                       0125
         SETFRR A,FRRAD=(FADDR),PARMAD=(ATAPTR),WRKREGS=(R7,R8)
*   ATAMODID=ATAMSWAP;              /* SWAP SET THE FRR              */
         MVI   ATAMODID(ATAPTR),X'03'                              0126
*   ATASWAP='1'B;                   /* SWAP IS IN CONTROL            */
         OI    ATASWAP(ATAPTR),B'10000000'                         0127
*   IF R1->AIALSQA='0'B THEN        /* IF THE FIRST AIA IS NOT FOR 0128
*                                      LSQA                          */
         TM    AIALSQA(R1),B'00001000'                             0128
         BNZ   @RF00128                                            0128
*     DO;                                                          0129
*       RFY                                                        0130
*        (R15) RSTD;                                               0130
*       R1->AIAERROR='1'B;          /* SIGNAL AN ERROR               */
         OI    AIAERROR(R1),B'00000010'                            0131
*       R15=CODE4;                  /* LOAD ERROR RETURN CODE        */
         LA    R15,4                                               0132
*       GOTO DELETFRR;              /* AND RETURN IT TO RSM          */
         B     DELETFRR                                            0133
*       RFY                                                        0134
*        (R15) UNRSTD;                                             0134
*     END;                                                         0135
*   ASHSWAPQ=R1;                    /* QUE AIA'S TO SWAP QUEUE       */
@RF00128 ST    R1,ASHSWAPQ(,RSMHDPTR)                              0136
*   IF R1->AIAWRITE='1'B THEN       /* IF THIS IS A SWAP OUT REQUEST */
         TM    AIAWRITE(R1),B'10000000'                            0137
         BNO   @RF00137                                            0137
*     ASHSWPOT='1'B;                /* TURN ON THE SWAP OUT FLAG     */
         OI    ASHSWPOT(RSMHDPTR),B'10000000'                      0138
*   ELSE                            /* IF THIS IS A SWAP IN REQUEST  */
*     ASHSWPOT='0'B;                /* RESET IN CASE LEFT ON IN ERROR*/
         B     @RC00137                                            0139
@RF00137 NI    ASHSWPOT(RSMHDPTR),B'01111111'                      0139
*   PREVAIA=R1;                     /* REMEMBER FIRST AIA            */
@RC00137 LR    PREVAIA,R1                                          0140
*   AIAPTR=R1;                      /* LOAD POINTER TO FIRST AIA     */
         LR    AIAPTR,R1                                           0141
*                                                                  0142
*   /*****************************************************************/
*   /*                                                               */
*   /* SEARCH THE AIA CHAIN LOOKING FOR A NON-LSQA REQUEST. WHEN     */
*   /* FOUND, PASS THE NON-LSQA REQUESTS TO ILRPAGIO FOR NORMAL PAGE */
*   /* PROCESSING. AFTER THE NON-LSQA AIA'S HAVE BEEN PROCESSED: 1). */
*   /* IF THE REQUEST IS FOR A SWAP-IN CALL ILRSLSQA TO PROCESS THE  */
*   /* LSQA PAGES. 2). IF THE REQUEST IS FOR A SWAP-OUT AND ALL      */
*   /* NON-LSQA I/O OPERATIONS ARE COMPLETE CALL ILRSLSQA TO PROCESS */
*   /* THE LSQA PAGES. IF AN ERROR IS DETECTED AT ANY TIME, THE AIA'S*/
*   /* NOT YET PROCESSED ARE RETURNED TO THE CALLER. THIS MODULE     */
*   /* ALWAYS ASSUMES THAT THERE IS AT LEAST ONE AIA PASSED AND THAT */
*   /* IT IS AN LSQA AIA.                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0142
*   DO WHILE AIAPTR^=0;             /* LOOP WHILE AIA'S TO PROCESS   */
         B     @DE00142                                            0142
@DL00142 DS    0H                                                  0143
*     IF(AIAWRITE='1'B&ASHSWPOT='0'B)×/* IF MIXED IN AND OUT         */
*         (AIAWRITE='0'B&ASHSWPOT='1'B) THEN/* REQUESTS              */
         TM    AIAWRITE(AIAPTR),B'10000000'                        0143
         BNO   @GL00001                                            0143
         TM    ASHSWPOT(RSMHDPTR),B'10000000'                      0143
         BZ    @RT00143                                            0143
@GL00001 TM    AIAWRITE(AIAPTR),B'10000000'                        0143
         BNZ   @RF00143                                            0143
         TM    ASHSWPOT(RSMHDPTR),B'10000000'                      0143
         BNO   @RF00143                                            0143
@RT00143 DS    0H                                                  0144
*       DO;                                                        0144
*         AIAERROR='1'B;            /* MARK AIA AS AN ERROR          */
         OI    AIAERROR(AIAPTR),B'00000010'                        0145
*         GOTO ILRCRSP1;            /* AND RETURN REQUEST TO CALLER  */
         B     ILRCRSP1                                            0146
*       END;                                                       0147
*     IF AIALSQA='0'B THEN          /* IF THIS IS FIRST NON-LSQA AIA */
@RF00143 TM    AIALSQA(AIAPTR),B'00001000'                         0148
         BNZ   @RF00148                                            0148
*       DO;                         /* HANDLE NON-LSQA AIA'S         */
*         PREVAIA->AIANXAIA=0;      /* DEQUEUE FROM LSQA AIA'S       */
         SLR   @07,@07                                             0150
         ST    @07,AIANXAIA(,PREVAIA)                              0150
*         R1=AIAPTR;                /* LOAD PARM REG                 */
         LR    R1,AIAPTR                                           0151
*         CALL ILRPAGIO;            /* PASS NON-LSQA AIA'S TO      0152
*                                      ILRPAGIO                      */
         L     @15,@CV01874                                        0152
         BALR  @14,@15                                             0152
*         RFY                                                      0153
*          (R15) RSTD;                                             0153
*         IF R15^=0 THEN            /* IF ILRPAGI0 HAD AN ERROR      */
         LTR   R15,R15                                             0154
         BZ    @RF00154                                            0154
*           DO;                     /* HANDLE ERROR                  */
*             PREVAIA->AIANXAIA=R1; /* PUT ERROR CHAIN ON END OF LSQA*/
         ST    R1,AIANXAIA(,PREVAIA)                               0156
*ILRCRSP1:                                                         0157
*             R1=ASHSWAPQ;          /* LOAD PARM REG - 1ST AIA PASSED*/
ILRCRSP1 L     R1,ASHSWAPQ(,RSMHDPTR)                              0157
*             ASHSWAPQ=0;           /* RESET SWAP QUEUE              */
         SLR   @14,@14                                             0158
         ST    @14,ASHSWAPQ(,RSMHDPTR)                             0158
*             R15=CODE4;            /* SET BAD RETURN CODE THEN      */
         LA    R15,4                                               0159
*             GOTO DELETFRR;        /* RETURN REQUEST TO CALLER      */
         B     DELETFRR                                            0160
*           END;                                                   0161
*         AIAPTR=0;                 /* GET OUT OF LOOP               */
@RF00154 SLR   AIAPTR,AIAPTR                                       0162
*         RFY                                                      0163
*          (R15) UNRSTD;                                           0163
*       END;                        /* AIALSQA^='1'B                 */
*     ELSE                                                         0165
*       DO;                         /* IF STILL LSQA AIA'S           */
         B     @RC00148                                            0165
@RF00148 DS    0H                                                  0166
*         PREVAIA=AIAPTR;           /* REMEMBER PREVIOUS             */
         LR    PREVAIA,AIAPTR                                      0166
*         AIAPTR=AIANXAIA;          /* UPDATE AIA POINTER            */
         L     AIAPTR,AIANXAIA(,AIAPTR)                            0167
*       END;                                                       0168
*   END;                            /* DO WHILE END                  */
@RC00148 DS    0H                                                  0169
@DE00142 SLR   @07,@07                                             0169
         CR    AIAPTR,@07                                          0169
         BNE   @DL00142                                            0169
*                                                                  0170
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE IF LSQA REQUESTS CAN BE STARTED, AND IF SO CALL     */
*   /* ILRSLSQA TO PROCESS.                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0170
*   IF ASHSWPOT='0'B×ASHIOCNT=0 THEN/* IF SWAPIN OR NO I/O IN      0170
*                                      PROGRESS                      */
         TM    ASHSWPOT(RSMHDPTR),B'10000000'                      0170
         BZ    @RT00170                                            0170
         C     @07,ASHIOCNT(,RSMHDPTR)                             0170
         BNE   @RF00170                                            0170
@RT00170 DS    0H                                                  0171
*     CALL ILRSLSQA;                /* START THE LSQA REQUESTS, RSMHD
*                                      POINTER IS VALID              */
         L     @15,@CA01901                                        0171
         BALR  @14,@15                                             0171
*   RFY                                                            0172
*    (R15) RSTD;                                                   0172
@RF00170 DS    0H                                                  0173
*   R15=CODE0;                      /* SET RETURN CODE TO ZERO       */
         SLR   R15,R15                                             0173
*   R1=0;                           /* SET PARM REG TO ZERO          */
*                                                                  0174
         SLR   R1,R1                                               0174
*   /*****************************************************************/
*   /*                                                               */
*   /* DELETE THE RECOVERY FRR STACK, RESTORE REGS, AND RETURN TO THE*/
*   /* CALLER.                                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0175
*DELETFRR:                                                         0175
*   GENERATE SETS(R7,R8) REFS(ASMWKSA4,ASMVTPTR);                  0175
DELETFRR DS    0H                                                  0175
         SETFRR D,WRKREGS=(R7,R8)
         LM    R2,R14,ASMWKSA4(ASMVTPTR) RESTORE CALLERS REGS, R1
*                                    AND R15 HAVE BEEN SET PREVIOUSLY
         BR    R14               RETURN TO CALLER
*   RFY                                                            0176
*    (R1,                                                          0176
*     R15) UNRSTD;                                                 0176
*ILRSLSQA:                                                         0177
*   ENTRY;                                                         0177
*                                                                  0177
*   /*****************************************************************/
*   /*                                                               */
*   /* ENTRY TO ILRSLSQA, THE LSQA PROCESSOR FOR SWAP. THIS ROUTINE  */
*   /* WILL BUILD & QUEUE SCCW'S FOR LSQA AIA'S FOR EITHER A SWAP-OUT*/
*   /* OR SWAP-IN. AN FRR IS ALWAYS EXPECTED TO HAVE BEEN SET BY THE */
*   /* CALLER.                                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0178
*   GENERATE REFS(ASMWKSA5,ASMVTPTR);                              0178
         ENTRY ILRSLSQA
ILRSLSQA STM   R2,R14,ASMWKSA5(ASMVTPTR) SAVE CALLERS REGS
         ENTRY ILRCBSP2
         BALR  R12,0               ESTABLISH BASE
         USING *,R12               TELL ASSEMBLER
*ILRCBSP2:                                                         0179
*   ATASLSQA='1'B;                  /* ILRSLSQA IS IN CONTROL        */
ILRCBSP2 OI    ATASLSQA(ATAPTR),B'01000000'                        0179
*   SWPFLGS=0;                      /* CLEAR INTERNAL FLAGS          */
*                                                                  0180
         MVI   SWPFLGS(ASMVTPTR),X'00'                             0180
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THIS MODULE IS ENTERED WITH A VALID RSMHD POINTER,         */
*   /* PROCESSING IS REQUESTED FOR A SPECIFIC ADDRESS SPACE. IF THE  */
*   /* RSMHD POINTER IS ZERO, THE ENTRY WAS MADE FOR A REDRIVE       */
*   /* SITUATION AND THE WAIT QUEUE IS THE ONLY POSSIBLE SOURCE OF   */
*   /* WORK. IN THIS CASE PROCESSING STARTS AT WORKCK.               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0181
*   RFY                                                            0181
*    (GROUPAIA) RSTD;                                              0181
*   SARTPTR=ASMSART;                /* LOAD POINTER TO SART          */
         L     SARTPTR,ASMSART(,ASMVTPTR)                          0182
*   IF RSMHDPTR^=0 THEN             /* IF ENTRY WAS MADE TO PROCESS  */
         SLR   @15,@15                                             0183
         CR    RSMHDPTR,@15                                        0183
         BE    @RF00183                                            0183
*     DO;                           /* A SPECIFIC MEMORY             */
*       AIAPTR=ASHSWAPQ;            /* GET AIA'S FROM SWAP QUEUE     */
         L     AIAPTR,ASHSWAPQ(,RSMHDPTR)                          0185
*       GROUPAIA=AIAPTR;            /* SAVE POINTER TO THE FIRST AIA
*                                      OF A GROUP TO BE BUILT        */
         LR    GROUPAIA,AIAPTR                                     0186
*                                                                  0187
*       /*************************************************************/
*       /*                                                           */
*       /* IF A SWAP-OUT REQUEST & SETS ARE AVAILABLE, OR IF A       */
*       /* SWAP-IN REQUEST FOR A SET OF PAGES WRITTEN TO A SWAP DATA */
*       /* SET, THE AIA'S MUST BE PUT INTO GROUPS. OTHERWISE, THE    */
*       /* AIA'S MUST BE COUNTED AND SENT TO ILRQIOE TO BE PROCESSED */
*       /* AS REGULAR PAGES. ANY WORK THAT IS QUEUED TO THE WAIT     */
*       /* QUEUE WILL BE STARTED IF RESOURCES ARE AVAILABLE.         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0187
*       IF(AIAWRITE='1'B&SARSETCT>0)×/* IF A SWAP-OUT REQUEST AND A
*                                      SET IS AVAILABLE              */
*           (AIAWRITE='0'B&AIAPAGDS='0'B) THEN/* OR IF A SWAP-IN FOR
*                                      A SWAP DATA SET               */
         TM    AIAWRITE(AIAPTR),B'10000000'                        0187
         BNO   @GL00005                                            0187
         C     @15,SARSETCT(,SARTPTR)                              0187
         BL    @RT00187                                            0187
@GL00005 TM    AIAWRITE(AIAPTR),B'10000100'                        0187
         BNZ   @RF00187                                            0187
@RT00187 DS    0H                                                  0188
*         DO;                       /* GROUP PROCESSING              */
*           RFY                                                    0189
*            (PAGECTR) RSTD;                                       0189
*           PAGECTR=1;              /* INIT PAGE COUNTER             */
         LA    @15,1                                               0190
         LR    PAGECTR,@15                                         0190
*           ASM5GCTR=1;             /* INIT GROUP COUNT              */
*                                                                  0191
         ST    @15,ASM5GCTR(,ASMVTPTR)                             0191
*           /*********************************************************/
*           /*                                                       */
*           /* PUT AIA'S INTO GROUPS. THE NUMBER OF AIA'S IN A GROUP */
*           /* IS DEPENDENT ON SARSETSZ - THE NUMBER OF SLOTS IN A   */
*           /* SWAP SET.                                             */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0192
*           DO WHILE AIANXAIA^=0;   /* LOOP TILL OUT OF AIA'S        */
         B     @DE00192                                            0192
@DL00192 DS    0H                                                  0193
*             IF PAGECTR^=SARSETSZ THEN/* IF GROUP IS NOT FULL       */
         C     PAGECTR,SARSETSZ(,SARTPTR)                          0193
         BE    @RF00193                                            0193
*               DO;                 /* CONTINUE GROUPING             */
*                 AIAFQPA=AIANXAIA; /* CHAIN LATERALLY               */
         L     @09,AIANXAIA(,AIAPTR)                               0195
         ST    @09,AIAFQPA(,AIAPTR)                                0195
*                 AIANXAIA=0;       /* RESET NEXT CHAIN POINTER      */
         SLR   @15,@15                                             0196
         ST    @15,AIANXAIA(,AIAPTR)                               0196
*                 AIAPTR=AIAFQPA;   /* GET NEXT AIA                  */
         LR    AIAPTR,@09                                          0197
*                 PAGECTR=PAGECTR+1;/* ADD ONE TO COUNTER            */
         AL    PAGECTR,@CF00061                                    0198
*               END;                /* STILL GROUPING                */
*             ELSE                  /* IF GROUP IS FULL              */
*               DO;                 /* FINISH GROUP AND START NEXT   */
         B     @RC00193                                            0200
@RF00193 DS    0H                                                  0201
*                 GROUPAIA->AIANXAIA=AIANXAIA;/* CHAIN NEXT AIA AS A
*                                      GROUP HEADER                  */
         L     @09,AIANXAIA(,AIAPTR)                               0201
         ST    @09,AIANXAIA(,GROUPAIA)                             0201
*                 AIANXAIA=0;       /* RESET NEXT CHAIN POINTER      */
         SLR   @15,@15                                             0202
         ST    @15,AIANXAIA(,AIAPTR)                               0202
*                 GROUPAIA->AIAGRPSZ=PAGECTR;/* SET SET SIZE IN    0203
*                                      HEADER AIA                    */
         ST    PAGECTR,AIAGRPSZ(,GROUPAIA)                         0203
*                 ASM5GCTR=ASM5GCTR+1;/* ADD ONE TO GROUP COUNT      */
         LA    @15,1                                               0204
         L     @14,ASM5GCTR(,ASMVTPTR)                             0204
         ALR   @14,@15                                             0204
         ST    @14,ASM5GCTR(,ASMVTPTR)                             0204
*                 AIAPTR=GROUPAIA->AIANXAIA;/* GET NEXT AIA POINTER  */
         LR    AIAPTR,@09                                          0205
*                 GROUPAIA=AIAPTR;  /* UPDATE GROUP HEADER           */
         LR    GROUPAIA,AIAPTR                                     0206
*                 PAGECTR=1;        /* RE-INIT THE PAGE COUNTER      */
         LR    PAGECTR,@15                                         0207
*               END;                /* NEXT GROUP STARTED            */
*           END;                    /* LOOP END                      */
@RC00193 DS    0H                                                  0209
@DE00192 L     @09,AIANXAIA(,AIAPTR)                               0209
         LTR   @09,@09                                             0209
         BNZ   @DL00192                                            0209
*                                                                  0210
*           /*********************************************************/
*           /*                                                       */
*           /* FINISH UP GROUP PROCESSING AND DETERMINE COURSE OF    */
*           /* ACTION.                                               */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0210
*           GROUPAIA->AIAGRPSZ=PAGECTR;/* THE COUNT MUST BE INSERTED
*                                      IN CASE THE SET WAS NOT FULL  */
         ST    PAGECTR,AIAGRPSZ(,GROUPAIA)                         0210
*           RFY                                                    0211
*            (GROUPAIA,                                            0211
*             PAGECTR) UNRSTD;                                     0211
*                                                                  0211
*           /*********************************************************/
*           /*                                                       */
*           /* FOR SWAP OUT PROCESSING ASIGNSET MUST BE CALLED TO    */
*           /* ASSIGN LSID'S TO THE SETS. IF SETS ARE NOT AVAILABLE, */
*           /* ASIGNSET WILL RECHAIN THE GROUPS BACK INTO A SINGLE   */
*           /* CHAIN. IF A SINGLE CHAIN WAS BUILT, THE AIA'S WILL BE */
*           /* TREATED AS REQULAR PAGES AND SENT TO ILRQIOE. IN THE  */
*           /* NORMAL CASE HOWEVER, THEY WILL BE PROCESSED AS A GROUP*/
*           /* BY SCCWPROC. SWAP IN REQUESTS ARE ALWAYS TREATED AS A */
*           /* GROUP AT THIS POINT.                                  */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0212
*           IF ASHSWPOT='1'B THEN   /* IF THIS IS A SWAP-OUT REQUEST */
         TM    ASHSWPOT(RSMHDPTR),B'10000000'                      0212
         BNO   @RF00212                                            0212
*             DO;                                                  0213
*               ASHSWPCT=SPCTLSQA;  /* SET THE SWAP COUNT            */
*                                                                  0214
         L     @07,SPCTPTR(,RSMHDPTR)                              0214
         LH    @07,SPCTLSQA(,@07)                                  0214
         STH   @07,ASHSWPCT(,RSMHDPTR)                             0214
*               /*****************************************************/
*               /*                                                   */
*               /* CALL ASIGNSET TO OBTAIN SWAP SETS. UPON RETURN ,  */
*               /* THE AIA POINTER IS POINTING TO THE LAST AIA ON THE*/
*               /* CHAIN IF R.C. = 4                                 */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0215
*               CALL ASIGNSET;      /* GET LSID'S ASSIGNED           */
         BAL   @14,ASIGNSET                                        0215
*               RFY                                                0216
*                (R15) RSTD;                                       0216
*               IF R15^=0 THEN      /* IF AIA'S WERE RECHAINED       */
         LTR   R15,R15                                             0217
         BNZ   @RT00217                                            0217
*                 GOTO QIOEPREP;    /* PREPARE TO CALL ILRQIOE.    0218
*                                      AIAPTR WAS SET TO LAST AIA ON
*                                      CHAIN BY ASIGNSET.            */
*               RFY                                                0219
*                (R15) UNRSTD;                                     0219
*             END;                                                 0220
*                                                                  0221
*           /*********************************************************/
*           /*                                                       */
*           /* PREPARE TO CALL SCCWPROC TO BUILD & QUQUE SCCW'S.     */
*           /* PRIOR TO CALLING SCCWPROC, INSURE THAT RESOURCES ARE  */
*           /* AVAILABLE. IF THERE IS WORK ON THE WAIT QUEUE, IT MUST*/
*           /* BE DONE PRIOR TO ANY NEW WORK, I.E. SERIALIZATION.    */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0221
*           AIAPTR=ASHSWAPQ;        /* NEW WORK IS ON THE SWAP QUE   */
@RF00212 L     AIAPTR,ASHSWAPQ(,RSMHDPTR)                          0221
*           ATAAIA=AIAPTR;          /* CHECKPOINT FOR RECOVERY       */
         ST    AIAPTR,ATAAIA(,ATAPTR)                              0222
*           ASHSWAPQ=0;             /* RESET THE SWAP QUEUE          */
*                                                                  0223
         SLR   @07,@07                                             0223
         ST    @07,ASHSWAPQ(,RSMHDPTR)                             0223
*           /*********************************************************/
*           /*                                                       */
*           /* IF -- THERE IS OLD WORK WAITING, PROCESS IT FIRST.    */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0224
*           IF SARWAITF^=0 THEN     /* IF ANY WORK WAITING           */
         C     @07,SARWAITF(,SARTPTR)                              0224
         BE    @RF00224                                            0224
*             DO;                   /* QUEUE NEW WORK TO END         */
*               SARWAITL->AIANXAIA=AIAPTR;/* QUEUE TO END            */
         L     @07,SARWAITL(,SARTPTR)                              0226
         ST    AIAPTR,AIANXAIA(,@07)                               0226
*               DO WHILE AIANXAIA^=0;/* FIND LAST AIA                */
         B     @DE00227                                            0227
@DL00227 DS    0H                                                  0228
*                 AIAPTR=AIANXAIA;  /* GET NEXT AIA IN CHAIN         */
         L     AIAPTR,AIANXAIA(,AIAPTR)                            0228
*               END;                /* FIND LAST                     */
@DE00227 SLR   @07,@07                                             0229
         C     @07,AIANXAIA(,AIAPTR)                               0229
         BNE   @DL00227                                            0229
*               SARWAITL=AIAPTR;    /* UPDATE DOUBLE HEADED QUEUE    */
         ST    AIAPTR,SARWAITL(,SARTPTR)                           0230
*               IF SARSCCWQ=0 THEN  /* IF OUT OF SCCW'S              */
         C     @07,SARSCCWQ(,SARTPTR)                              0231
         BE    @RT00231                                            0231
*                 GOTO ENDRTN;      /* CAN'T PROCESS, LEAVE WORK Q'D */
*             END;                                                 0233
*                                                                  0234
*           /*********************************************************/
*           /*                                                       */
*           /* ELSE -- THERE WAS NO WORK PREVIOUSLY WAITING, PROCESS */
*           /* IF RESOURCES ARE AVAILABLE                            */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0234
*           ELSE                    /* NO WORK WAS PREVIOUSLY WAITING*/
*             DO;                                                  0234
         B     @RC00224                                            0234
@RF00224 DS    0H                                                  0235
*               IF SARSCCWQ^=0 THEN /* IF SCCW'S ARE AVAILABLE       */
         SLR   @07,@07                                             0235
         C     @07,SARSCCWQ(,SARTPTR)                              0235
         BE    @RF00235                                            0235
*                 DO;                                              0236
*                   IF AIANXAIA^=0 THEN/* IF MORE THAN ONE GROUP TO
*                                      PROCESS                       */
         L     @15,AIANXAIA(,AIAPTR)                               0237
         CR    @15,@07                                             0237
         BE    @RF00237                                            0237
*                     DO;                                          0238
*                       RFY                                        0239
*                        (TEMPAIA) RSTD;                           0239
*                       SARWAITF=AIANXAIA;/* PUT SECOND & SUCCEEDING
*                                      GROUPS ON WAIT QUEUE          */
         ST    @15,SARWAITF(,SARTPTR)                              0240
*                       TEMPAIA=AIANXAIA;/* WORK POINTER             */
         LR    TEMPAIA,@15                                         0241
*                       AIANXAIA=0; /* DEQUEUE CHAIN FROM GROUP TO 0242
*                                      PROCESS                       */
         ST    @07,AIANXAIA(,AIAPTR)                               0242
*                       DO WHILE TEMPAIA->AIANXAIA^=0;/* FIND END OF
*                                      CHAIN                         */
         B     @DE00243                                            0243
@DL00243 DS    0H                                                  0244
*                         TEMPAIA=TEMPAIA->AIANXAIA;/* GET NEXT      */
         L     TEMPAIA,AIANXAIA(,TEMPAIA)                          0244
*                       END;                                       0245
@DE00243 L     @07,AIANXAIA(,TEMPAIA)                              0245
         LTR   @07,@07                                             0245
         BNZ   @DL00243                                            0245
*                       SARWAITL=TEMPAIA;/* UPDATE DOUBLE HEADED   0246
*                                      QUEUE                         */
         ST    TEMPAIA,SARWAITL(,SARTPTR)                          0246
*                       RFY                                        0247
*                        (TEMPAIA) UNRSTD;                         0247
*                     END;          /* END TO MORE THAN ONE GROUP TO
*                                      PROCESS                       */
*                 END;              /* END TO IF SCCW'S ARE AVAILABLE*/
*                                                                  0250
*               /*****************************************************/
*               /*                                                   */
*               /* NO RESOURCES WERE AVAILABLE, PUT WORK ON WAIT     */
*               /* QUEUE.                                            */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0250
*               ELSE                /* NO SCCW'S AVAILABLE           */
*                 DO;                                              0250
         B     @RC00235                                            0250
@RF00235 DS    0H                                                  0251
*                   SARWAITF=AIAPTR;/* QUEUE AIA'S TO WAIT QUEUE     */
         ST    AIAPTR,SARWAITF(,SARTPTR)                           0251
*                   DO WHILE AIANXAIA^=0;/* FIND LAST GROUP          */
         B     @DE00252                                            0252
@DL00252 DS    0H                                                  0253
*                     AIAPTR=AIANXAIA;/* UPDATE AIA POINTER          */
         L     AIAPTR,AIANXAIA(,AIAPTR)                            0253
*                   END;                                           0254
@DE00252 L     @07,AIANXAIA(,AIAPTR)                               0254
         LTR   @07,@07                                             0254
         BNZ   @DL00252                                            0254
*                   SARWAITL=AIAPTR;/* UPDATE DOUBLE HEADED QUEUE    */
         ST    AIAPTR,SARWAITL(,SARTPTR)                           0255
*                   GO TO ENDRTN;   /* CAN'T PROCESS                 */
         B     ENDRTN                                              0256
*                 END;                                             0257
*                                                                  0257
*               /*****************************************************/
*               /*                                                   */
*               /* CALL SCCWPROC TO BUILD AND QUEUE SCCW'S.          */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0258
*               CALL SCCWPROC;      /* CALL SCCWPROC TO BUILD CCW'S  */
@RC00235 BAL   @14,SCCWPROC                                        0258
*               GOTO WORKCK;        /* GOT TO TEST FOR MORE WORK     */
         B     WORKCK                                              0259
*             END;                  /* END TO NO WORK PREV WAITING   */
*         END;                      /* END TO SWAPOUT AND NO SETS OR
*                                      SWAPIN FROM SWAP DS           */
*                                                                  0262
*       /*************************************************************/
*       /*                                                           */
*       /* IF A SWAP SET IS NOT TO BE USED BECAUSE SETS ARE NOT FREE */
*       /* FOR A SWAP-OUT REQUEST, OR BECAUSE THE SWAP-IN REQUEST IS */
*       /* FOR PAGES ON A REGULAR PAGE DATA SET, PREPARE FOR ILRQIOE */
*       /* PROCESSING.                                               */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0262
*       ELSE                        /* GROUP PROCESSING WAS NOT    0262
*                                      POSSIBLE                      */
*         DO;                       /* PROCESS AS PAGE DATA SET      */
         B     @RC00187                                            0262
@RF00187 DS    0H                                                  0263
*           IF AIAWRITE='1'B THEN   /* IF THIS IS A SWAP OUT         */
         TM    AIAWRITE(AIAPTR),B'10000000'                        0263
         BNO   @RF00263                                            0263
*             DO;                                                  0264
*               AIAPAGDS='1'B;      /* SET PAGE D.S. FLAG IN AIA     */
         OI    AIAPAGDS(AIAPTR),B'00000100'                        0265
*               DO WHILE AIANXAIA^=0;/* LOOP TO END OF CHAIN         */
         B     @DE00266                                            0266
@DL00266 DS    0H                                                  0267
*                 AIAPTR=AIANXAIA;  /* UPDATE AIA POINTER            */
         L     AIAPTR,AIANXAIA(,AIAPTR)                            0267
*                 AIAPAGDS='1'B;    /* SET PAGE D.S. FLAG IN AIA     */
         OI    AIAPAGDS(AIAPTR),B'00000100'                        0268
*               END;                /* LOOP END                      */
@DE00266 L     @07,AIANXAIA(,AIAPTR)                               0269
         LTR   @07,@07                                             0269
         BNZ   @DL00266                                            0269
*               ASHSWPCT=SPCTLSQA;  /* SET SWAP COUNT                */
         L     @07,SPCTPTR(,RSMHDPTR)                              0270
         LH    @07,SPCTLSQA(,@07)                                  0270
         STH   @07,ASHSWPCT(,RSMHDPTR)                             0270
*             END;                                                 0271
*           ELSE                    /* IF THIS IS A SWAP IN          */
*             DO WHILE AIANXAIA^=0; /* LOOP TO END OF CHAIN          */
         B     @RC00263                                            0272
@RF00263 B     @DE00272                                            0272
@DL00272 DS    0H                                                  0273
*               AIAPTR=AIANXAIA;    /* UPDATE AIA POINTER            */
         L     AIAPTR,AIANXAIA(,AIAPTR)                            0273
*             END;                  /* LOOP END                      */
@DE00272 L     @07,AIANXAIA(,AIAPTR)                               0274
         LTR   @07,@07                                             0274
         BNZ   @DL00272                                            0274
*                                                                  0275
*           /*********************************************************/
*           /*                                                       */
*           /* QUEUE AIA'S TO STAGING QUEUE AND CALL ILRQIOE TO      */
*           /* PROCESS AS REGULAR PAGES.                             */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0275
*QIOEPREP:                                                         0275
*           ASMIORQR=ASMIORQR+SPCTLSQA;/* UPDATE PAGE RECIEVED COUNT */
@RC00263 DS    0H                                                  0275
QIOEPREP L     @07,SPCTPTR(,RSMHDPTR)                              0275
         LH    @07,SPCTLSQA(,@07)                                  0275
         L     @15,ASMIORQR(,ASMVTPTR)                             0275
         ALR   @15,@07                                             0275
         ST    @15,ASMIORQR(,ASMVTPTR)                             0275
*           IF ASHSWPOT='1'B THEN   /* IF THIS IS A SWAP OUT         */
         TM    ASHSWPOT(RSMHDPTR),B'10000000'                      0276
         BNO   @RF00276                                            0276
*             DO;                                                  0277
*               ASMNVSC=ASMNVSC+SPCTLSQA;/* UPDATE NON-VIO I/O COUNT */
         L     @15,ASMNVSC(,ASMVTPTR)                              0278
         ALR   @15,@07                                             0278
         ST    @15,ASMNVSC(,ASMVTPTR)                              0278
*               ASCBNVSC=ASCBNVSC+SPCTLSQA;/* UPDATE ASCB COUNT      */
         L     @15,ASCBPTR(,RSMHDPTR)                              0279
         AH    @07,ASCBNVSC(,@15)                                  0279
         STH   @07,ASCBNVSC(,@15)                                  0279
*             END;                                                 0280
*           IF ASMSTAGF=0 THEN      /* IF THERE IS NO OTHER WORK     */
@RF00276 L     @07,ASMSTAGF(,ASMVTPTR)                             0281
         LTR   @07,@07                                             0281
         BNZ   @RF00281                                            0281
*             ASMSTAGF=ASHSWAPQ;    /* QUEUE TO TOP OF STAGE QUEUE   */
         L     @07,ASHSWAPQ(,RSMHDPTR)                             0282
         ST    @07,ASMSTAGF(,ASMVTPTR)                             0282
*           ELSE                    /* IF THERE IS WORK ON THE QUEUE */
*             ASMSTAGL->AIANXAIA=ASHSWAPQ;/* QUEUE TO END OF STAGE 0283
*                                      QUEUE                         */
         B     @RC00281                                            0283
@RF00281 L     @07,ASMSTAGL(,ASMVTPTR)                             0283
         L     @15,ASHSWAPQ(,RSMHDPTR)                             0283
         ST    @15,AIANXAIA(,@07)                                  0283
*           ASMSTAGL=AIAPTR;        /* UPDATE STAGE QUEUE LAST     0284
*                                      POINTER                       */
@RC00281 ST    AIAPTR,ASMSTAGL(,ASMVTPTR)                          0284
*           AIAPTR=0;               /* RESET AIA POINTER             */
         SLR   AIAPTR,AIAPTR                                       0285
*           ASHSWAPQ=0;             /* RESET SWAP QUEUE              */
         SLR   @07,@07                                             0286
         ST    @07,ASHSWAPQ(,RSMHDPTR)                             0286
*           ATAAIA=0;               /* RESET FOR RECOVERY            */
         ST    @07,ATAAIA(,ATAPTR)                                 0287
*ILRCRSP2:                          /* LABEL FOR FRR ENTRY           */
*           CALL ILRQIOE;           /* CALL ILRQIOE TO PROCESS AS  0288
*                                      REGULAR PAGES                 */
ILRCRSP2 L     @15,ASMPQIOE(,ASMVTPTR)                             0288
         BALR  @14,@15                                             0288
*         END;                      /* END OF PROCESSING FOR PAGE  0289
*                                      DATA SET                      */
*     END;                          /* END TO SPECIFIC MEMORY REQUEST*/
@RC00187 DS    0H                                                  0291
*                                                                  0291
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR WORK ON THE WAIT QUEUE, AND AS LONG AS RESOURCES ARE*/
*   /* AVAILABLE PROCESS IT BY CALLING SCCWPROC.                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0291
*WORKCK:                                                           0291
*   DO WHILE SARWAITF^=0&SARSCCWQ^=0;/* IF THERE IS WORK TO DO AND 0291
*                                      RESOURCES AVAILABLE           */
@RF00183 DS    0H                                                  0291
WORKCK   B     @DE00291                                            0291
@DL00291 DS    0H                                                  0292
*     AIAPTR=SARWAITF;              /* GET WORK FROM WAIT QUEUE      */
         L     AIAPTR,SARWAITF(,SARTPTR)                           0292
*     ATAAIA=AIAPTR;                /* SET CHECK POINT FOR RECOVERY  */
         ST    AIAPTR,ATAAIA(,ATAPTR)                              0293
*     SARWAITF=AIANXAIA;            /* PUT REST OF WORK BACK ON WAIT
*                                      QUEUE                         */
         L     @07,AIANXAIA(,AIAPTR)                               0294
         ST    @07,SARWAITF(,SARTPTR)                              0294
*     AIANXAIA=0;                   /* DEQUEUE FROM AIA BEING      0295
*                                      PROCESSED                     */
         SLR   @15,@15                                             0295
         ST    @15,AIANXAIA(,AIAPTR)                               0295
*     IF SARWAITF=0 THEN            /* IF THERE IS NO MORE WORK      */
         CR    @07,@15                                             0296
         BNE   @RF00296                                            0296
*       SARWAITL=0;                 /* CLEAR THE LAST POINTER        */
*                                                                  0297
         ST    @15,SARWAITL(,SARTPTR)                              0297
*     /***************************************************************/
*     /*                                                             */
*     /* CALL SCCWPROC TO BUILD AND QUEUE SCCW'S.                    */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0298
*     CALL SCCWPROC;                /* CALL SCCWPROC TO BUILD SCCW'S */
@RF00296 BAL   @14,SCCWPROC                                        0298
*   END;                                                           0299
@DE00291 SLR   @07,@07                                             0299
         C     @07,SARWAITF(,SARTPTR)                              0299
         BE    @DC00291                                            0299
         C     @07,SARSCCWQ(,SARTPTR)                              0299
         BNE   @DL00291                                            0299
@DC00291 DS    0H                                                  0300
*                                                                  0300
*   /*****************************************************************/
*   /*                                                               */
*   /* ENDING CODE - CHECK TO SEE IF THE SWAP DRIVER NEEDS TO BE     */
*   /* SCHEDULED, AND RETURN TO THE CALLER.                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0300
*   IF SCHEDRVR='1'B THEN           /* IF SWAP DRIVER NEEDS TO BE  0300
*                                      SCHEDULED                     */
         TM    SCHEDRVR(ASMVTPTR),B'10000000'                      0300
         BNO   @RF00300                                            0300
*     DO;                                                          0301
*       IF SARSRBCT=0 THEN          /* AND IF NOT CURRENTLY SCHEDULED*/
         L     @07,SARSRBCT(,SARTPTR)                              0302
         LTR   @07,@07                                             0302
         BNZ   @RF00302                                            0302
*         DO;                                                      0303
*           RFY                                                    0304
*            (R1) RSTD;                                            0304
*           R1=SARSRBP;             /* LOAD ADDRESS OF SRB           */
*                                                                  0305
         L     R1,SARSRBP(,SARTPTR)                                0305
*           /*********************************************************/
*           /*                                                       */
*           /* TRY TO SCHEDULE- I0C MAY ALSO BE TRYING AND IS NOT    */
*           /* LOCKED, SO C&S IS REQUIRED.                           */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0306
*           RFY                                                    0306
*            (RWORK,                                               0306
*             RWORK1) RSTD;                                        0306
*           RWORK=0;                /* WAS NOT SCHEDULED             */
         SLR   RWORK,RWORK                                         0307
*           RWORK1=1;               /* SCHEDULED VALUE               */
         LA    RWORK1,1                                            0308
*           CS(RWORK,RWORK1,SARSRBCT);/* SET THE COUNT               */
         CS    RWORK,@10,SARSRBCT(SARTPTR)                         0309
*           BC(NE,ENDRTN);          /* IF IT FAILED, COUNT IS 1      */
         BC    7,ENDRTN                                            0310
*           GEN(SCHEDULE SRB=(R1),SCOPE=GLOBAL);/* SCHEDULE SWAP   0311
*                                      DRIVER                        */
         SCHEDULE SRB=(R1),SCOPE=GLOBAL
*           RFY                                                    0312
*            (RWORK,                                               0312
*             RWORK1,                                              0312
*             R1) UNRSTD;                                          0312
*         END;                                                     0313
*     END;                                                         0314
@RF00302 DS    0H                                                  0315
*ENDRTN:                                                           0315
*   ATAAIA=0;                       /* RESET CHECK POINT FOR RECOVERY*/
@RF00300 DS    0H                                                  0315
ENDRTN   SLR   @07,@07                                             0315
         ST    @07,ATAAIA(,ATAPTR)                                 0315
*   ATASLSQA='0'B;                  /* ILRSLSQA RELINQUISHING CTL    */
         NI    ATASLSQA(ATAPTR),B'10111111'                        0316
*   GENERATE REFS(R2,R14,ASMWKSA5,ASMVTPTR);                       0317
         LM    R2,R14,ASMWKSA5(ASMVTPTR) RESTORE REGS
         BR    R14              RETURN TO CALLER
*ASIGNSET:                                                         0318
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0318
*                                                                  0318
ASIGNSET DS    0H                                                  0319
*   /*****************************************************************/
*   /*                                                               */
*   /* ASIGNSET ROUTINE OF ILRSLSQA. THIS ROUTINE IS CALLED ON WRITE */
*   /* REQUESTS TO ASSIGN A FREE SWAP SET(S) TO A GROUP(S).THIS      */
*   /* ROUTINE ASSIGNS THE SWAP SET BASED ON THE FOLLOWING CRITERIA: */
*   /* 1). USE FIXED HEAD DEVICES FIRST IF AT ALL POSSIBLE. 2). USE  */
*   /* THE SET THAT WAS LAST FREED IF AT ALL POSSIBLE. IF ASSIGNMENT */
*   /* IS IMPOSSIBLE (THAT IS NOT ENOUGH SETS ARE FREE) THE ENTIRE   */
*   /* GROUP(S) OF AIA'S ARE RECHAINED BY AIANXAIA AND RETURNED TO   */
*   /* THE CALLER WITH R.C.=4. FOR THE NORMAL CASE (R.C.=0) THE LSID */
*   /* WILL BE PLACED IN EACH AIA WITHIN THE GROUP.                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0319
*   RFY                                                            0319
*    (SAREPTR,                                                     0319
*     R14) RSTD;                                                   0319
*   ATASGNST='1'B;                  /* SET TRACKING BIT FOR RECOVERY */
         OI    ATASGNST(ATAPTR),B'10000000'                        0320
*   ASM5SR14=R14;                   /* SAVE RETURN REGISTER          */
         ST    R14,ASM5SR14(,ASMVTPTR)                             0321
*   RFY                                                            0322
*    (R14) UNRSTD;                                                 0322
*   ASM5AIA=ASHSWAPQ;               /* SAVE POINTER TO FIRST GROUP   */
         L     @11,ASHSWAPQ(,RSMHDPTR)                             0323
         ST    @11,ASM5AIA(,ASMVTPTR)                              0323
*ASGNRTRY:                                                         0324
*   IF SARSETCT>=ASM5GCTR THEN      /* IF ENOUGH SETS ARE AVAILABLE  */
ASGNRTRY L     @11,SARSETCT(,SARTPTR)                              0324
         C     @11,ASM5GCTR(,ASMVTPTR)                             0324
         BL    @RF00324                                            0324
*     DO;                           /* ASSIGN TO FIRST AND FASTEST 0325
*                                      DEVICES                       */
*       SAREPTR=SARFXDNX;           /* GET POINTER TO FIXED HEAD QUE */
         L     SAREPTR,SARFXDNX(,SARTPTR)                          0326
*       IF SAREPTR=0 THEN           /* IF NO FXD HD DEVICES IN USE   */
         LTR   SAREPTR,SAREPTR                                     0327
         BNZ   @RF00327                                            0327
*         SAREPTR=SARMOVNX;         /* GET FIRST MOVEABLE HD QUEUE   */
         L     SAREPTR,SARMOVNX(,SARTPTR)                          0328
*                                                                  0329
*       /*************************************************************/
*       /*                                                           */
*       /* TRY TO FIND SRE WHERE LAST OPERATION WAS A READ.          */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0329
*       RFY                                                        0329
*        (TEMPSRE,                                                 0329
*         SATPTR) RSTD;                                            0329
@RF00327 DS    0H                                                  0330
*FINDREAD:                                                         0330
*       TEMPSRE=SAREPTR;            /* SAVE POINTER TO STOP LOOP     */
FINDREAD LR    TEMPSRE,SAREPTR                                     0330
*       DO UNTIL SAREPTR=TEMPSRE;   /* LOOP UNTIL ALL ENTRIES      0331
*                                      CHECKED. AN ENTRY THAT      0331
*                                      CONTAINS AN LSID THAT WAS LAST
*                                      USED FOR A READ (FREED) WILL
*                                      CAUSE A BRANCH TO THE USELSID
*                                      CODE                          */
@DL00331 DS    0H                                                  0332
*         SATPTR=SRESAT;            /* GET SAT POINTER               */
         L     SATPTR,SRESAT(,SAREPTR)                             0332
*         IF SATASGN^=0 THEN        /* IF AN LSID LAST USED AS A READ
*                                      IS AVAILABLE                  */
         L     @07,SATASGN(,SATPTR)                                0333
         LTR   @07,@07                                             0333
         BZ    @RF00333                                            0333
*           DO;                     /* USE IT                        */
*             IF SREFIXED='1'B THEN /* IF THIS IS A FIXED HEAD DEVICE*/
         TM    SREFIXED(SAREPTR),B'00010000'                       0335
         BNO   @RF00335                                            0335
*               SARFXDNX=SRENEXT;   /* UPDATE NEXT TO USE PTR        */
         L     @07,SRENEXT(,SAREPTR)                               0336
         ST    @07,SARFXDNX(,SARTPTR)                              0336
*             ELSE                  /* IF A MOVEABLE HEAD DEVICE     */
*               SARMOVNX=SRENEXT;   /* UPDATE NEXT TO USE PTR        */
         B     @RC00335                                            0337
@RF00335 L     @07,SRENEXT(,SAREPTR)                               0337
         ST    @07,SARMOVNX(,SARTPTR)                              0337
*             GOTO USELSID;         /* GOTO ASIGNMENT LOGIC-LSID FND */
         B     USELSID                                             0338
*           END;                                                   0339
*         SAREPTR=SRENEXT;          /* GET NEXT SRE ON QUEUE         */
@RF00333 L     SAREPTR,SRENEXT(,SAREPTR)                           0340
*       END;                        /* END OF LOOP                   */
@DE00331 CR    SAREPTR,TEMPSRE                                     0341
         BNE   @DL00331                                            0341
*                                                                  0342
*       /*************************************************************/
*       /*                                                           */
*       /* NO SRE WITH LAST OPERATION A READ - TRY TO FIND SRE WITH  */
*       /* AN AVAILABLE SET.                                         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0342
*       DO UNTIL SAREPTR=TEMPSRE;   /* LOOP UNTIL ALL ENTRIES ARE  0342
*                                      CHECKED. AN SRE WITH AN     0342
*                                      AVAILABLE SET WILL CAUSE A  0342
*                                      BRANCH TO THE FINDONE CODE.   */
@DL00342 DS    0H                                                  0343
*         IF SREAVLSL>0 THEN        /* IF SETS ARE AVAILABLE         */
         L     @07,SREAVLSL(,SAREPTR)                              0343
         LTR   @07,@07                                             0343
         BNP   @RF00343                                            0343
*           DO;                     /* USE ONE                       */
*             SATPTR=SRESAT;        /* GET POINTER TO SAT            */
         L     SATPTR,SRESAT(,SAREPTR)                             0345
*             IF SREFIXED='1'B THEN /* IF THIS IS A FXD HD DEVICE    */
         TM    SREFIXED(SAREPTR),B'00010000'                       0346
         BNO   @RF00346                                            0346
*               SARFXDNX=SRENEXT;   /* UPDATE QUE POINTER            */
         L     @07,SRENEXT(,SAREPTR)                               0347
         ST    @07,SARFXDNX(,SARTPTR)                              0347
*             ELSE                  /* THIS IS A MOVEABLE HD DEVICE  */
*               SARMOVNX=SRENEXT;   /* UPDATE QUE POINTER            */
         B     @RC00346                                            0348
@RF00346 L     @07,SRENEXT(,SAREPTR)                               0348
         ST    @07,SARMOVNX(,SARTPTR)                              0348
*             GOTO FINDONE;         /* GO TO ASIGNMENT LOGIC TO FIND
*                                      SPECIFIC SET                  */
         B     FINDONE                                             0349
*           END;                                                   0350
*         SAREPTR=SRENEXT;          /* UPDATE NEXT TO USE POINTER    */
@RF00343 L     SAREPTR,SRENEXT(,SAREPTR)                           0351
*       END;                        /* END OF LOOP                   */
@DE00342 CR    SAREPTR,TEMPSRE                                     0352
         BNE   @DL00342                                            0352
*       RFY                                                        0353
*        (TEMPSRE) UNRSTD;                                         0353
*                                                                  0353
*       /*************************************************************/
*       /*                                                           */
*       /* IF NO SETS WERE AVAILABLE ON FIXED HEAD DEVICES, TRY FOR  */
*       /* MOVEABLE HEAD DEVICES. IF MOVEABLE HEAD DEVICES WERE      */
*       /* ALREADY TRIED AN ERROR OCCURED, BECAUSE TOTAL SET COUNT   */
*       /* WAS NOT ZERO. IN THIS CASE ISSUE C0D ABEND TO RECORD.     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0354
*       IF SREFIXED='1'B THEN       /* IF PROCESSING FIXED HD DEV    */
         TM    SREFIXED(SAREPTR),B'00010000'                       0354
         BNO   @RF00354                                            0354
*         DO;                                                      0355
*           SAREPTR=SARMOVNX;       /* TRY MOVEABLE HD               */
         L     SAREPTR,SARMOVNX(,SARTPTR)                          0356
*           IF SAREPTR^=0 THEN      /* IF MOVEABLE DEVICE IN USE     */
         LTR   SAREPTR,SAREPTR                                     0357
         BNZ   @RT00357                                            0357
*             GOTO FINDREAD;        /* TRY MAVEABLE DEVICE           */
*         END;                      /* END TO IF PROCESSING FIXED HD
*                                      DEV                           */
*                                                                  0359
*       /*************************************************************/
*       /*                                                           */
*       /* AN ERROR MUST HAVE OCCURED. SARSETCT WAS GREATER THEN ZERO*/
*       /* BUT NO SETS WERE FOUND IN ANY SRE.                        */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0360
*       ATARCODE=CODE8;             /* REASON CODE FOR C0D ABEND     */
@RF00354 MVI   ATARCODE(ATAPTR),X'08'                              0360
*       GEN(ABEND  X'C0D',,,SYSTEM);/* RECORD THE ERROR              */
         ABEND  X'C0D',,,SYSTEM
*     END;                          /* END TO ENOUGH SETS ARE FREE   */
*                                                                  0363
*   /*****************************************************************/
*   /*                                                               */
*   /* RECHAIN - NOT ENOUGH SWAP SETS ARE AVAILABLE. THIS CODE WILL  */
*   /* RECHAIN AIA'S BY AIANXAIA AND RETURN THEM TO THE CALLER WITH  */
*   /* THE PROPER RETURN CODE.                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0363
*   AIAPTR=ASHSWAPQ;                /* GET FIRST GROUP ON SWAP QUE IN
*                                      CASE ERROR OCCURED MIDWAY   0363
*                                      THROUGH PROCESSING            */
@RF00324 L     AIAPTR,ASHSWAPQ(,RSMHDPTR)                          0363
*   RFY                                                            0364
*    (GROUPAIA) RSTD;                                              0364
*   DO UNTIL GROUPAIA=0;            /* PROCESS ALL GROUPS            */
@DL00365 DS    0H                                                  0366
*     IF AIALSID^=0 THEN            /* IF LSID WAS ALREADY ASSIGNED  */
         L     @15,AIALSID(,AIAPTR)                                0366
         LTR   @15,@15                                             0366
         BZ    @RF00366                                            0366
*       DO;                         /* IT MUST BE FREED              */
*         RFY                                                      0368
*          (R1,                                                    0368
*           R13) RSTD;                                             0368
*         R1=AIALSID;               /* LOAD PARM                     */
         LR    R1,@15                                              0369
*         R13=ADDR(ASMSAVE);        /* GET SAVE AREA                 */
         LA    R13,ASMSAVE(,ASMVTPTR)                              0370
*         CALL FREESWAP;            /* GET SWAP SET RELEASED         */
         L     @15,ASMPFRSW(,ASMVTPTR)                             0371
         BALR  @14,@15                                             0371
*         RFY                                                      0372
*          (R1,                                                    0372
*           R13) UNRSTD;                                           0372
*       END;                                                       0373
*     GROUPAIA=AIANXAIA;            /* SAVE POINTER TO NEXT GROUP    */
@RF00366 L     GROUPAIA,AIANXAIA(,AIAPTR)                          0374
*     AIAGRPSZ=0;                   /* CLEAR                         */
         SLR   @15,@15                                             0375
         ST    @15,AIAGRPSZ(,AIAPTR)                               0375
*     RFY                                                          0376
*      (TEMPAIA) RSTD;                                             0376
*     DO UNTIL AIAPTR=0;            /* PROCESS ENTIRE LATERAL CHAIN  */
@DL00377 DS    0H                                                  0378
*       TEMPAIA=AIAPTR;             /* SAVE AIA POINTER              */
         LR    TEMPAIA,AIAPTR                                      0378
*       AIANXAIA=AIAFQPA;           /* PUT LATERAL ON NEXT CHAIN     */
         L     @15,AIAFQPA(,AIAPTR)                                0379
         ST    @15,AIANXAIA(,AIAPTR)                               0379
*       AIALSID=0;                  /* RESET LSID FIELD              */
         SLR   @14,@14                                             0380
         ST    @14,AIALSID(,AIAPTR)                                0380
*       AIAPAGDS='1'B;              /* CONVERT AIA TO A PAGE D.S. AIA*/
         OI    AIAPAGDS(AIAPTR),B'00000100'                        0381
*       AIAFQPA=0;                  /* RESET LATERAL DO INTER        */
         ST    @14,AIAFQPA(,AIAPTR)                                0382
*       AIAPTR=AIANXAIA;            /* UPDATE AIA POINTER            */
         LR    AIAPTR,@15                                          0383
*     END;                          /* LOOP                          */
@DE00377 LTR   AIAPTR,AIAPTR                                       0384
         BNZ   @DL00377                                            0384
*     TEMPAIA->AIANXAIA=GROUPAIA;   /* CHAIN NEXT GROUP TO CHAIN     */
         ST    GROUPAIA,AIANXAIA(,TEMPAIA)                         0385
*     AIAPTR=GROUPAIA;              /* UPDATE AIA POINTER            */
         LR    AIAPTR,GROUPAIA                                     0386
*   END;                            /* LOOP                          */
@DE00365 LTR   GROUPAIA,GROUPAIA                                   0387
         BNZ   @DL00365                                            0387
*   RFY                                                            0388
*    (R15) RSTD;                                                   0388
*   R15=CODE4;                      /* RETURN CODE IS 4              */
         LA    R15,4                                               0389
*   AIAPTR=TEMPAIA;                 /* POINT TO LAST AIA FOR CALLER  */
         LR    AIAPTR,TEMPAIA                                      0390
*   GOTO ASGNRTN;                   /* GO TO RETURN TO CALLER.       */
         B     ASGNRTN                                             0391
*   RFY                                                            0392
*    (R15,                                                         0392
*     GROUPAIA,                                                    0392
*     TEMPAIA) UNRSTD;                                             0392
*                                                                  0393
*   /*****************************************************************/
*   /*                                                               */
*   /* USELSID - THIS CODE IS USED TO OBTAIN THE LSID THAT WAS LAST  */
*   /* FREED FOR THIS SART ENTRY (DATA SET) AND TO UPDATE THE        */
*   /* APPROPRIATE CONTROL BLOCKS. THIS IS THE FAST ALLOCATION PATH  */
*   /* AND USES THE LAST SWAP SET FREED BY ASM.                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0393
*   RFY                                                            0393
*    (R7,                                                          0393
*     R8,                                                          0393
*     R9) RSTD;                                                    0393
*USELSID:                                                          0394
*   GENERATE;                                                      0394
USELSID  DS    0H                                                  0394
         L     R7,SATASGN(SATPTR) GET POINTER TO LAST USED MAP
         IC    R9,SATMASK(SATPTR) GET LAST USED MAP BIT
         IC    R8,0(R7)           GET LAST USED MAP
         OR    R8,R9              SET BIT FOR SET BEING ASSIGNED
         STC   R8,0(R7)           STORE UPDATED MAP
         LA    R8,SATMAPS(SATPTR) GET STARTING ADDRESS OF MAPS
         ST    R7,SATSCAN(SATPTR) SAVE ADDRESS OF THIS MAP FOR NEXT
*                                 ALLOCATION IF NO READS INTERVENE
         SR    R7,R8              FIND OFFSET TO CURRENT BYTE
         STH   R7,SATOFFST(SATPTR)  AND SAVE IT
         L     R7,SATSLTNO(SATPTR) GET SLOT # OF SET BEING ASSIGNED
         SR    R8,R8              CLEAR REG
         ST    R8,SATASGN(SATPTR) INDICATE SCAN REQD NEXT ALLOCATION
         B     LOADAIA            GO TO COMMON CODE TO FILL IN AIAS
*                                                                  0395
*   /*****************************************************************/
*   /*                                                               */
*   /* FINDONE - THIS CODE IS USED TO OBTAIN THE LSID OF THE FIRST   */
*   /* AVAILABLE SWAP SET WHEN NO SART ENTRY (DATA SET) HAD A READ AS*/
*   /* THE LAST OPERATION, AND TO UPDATE THE APPROPRIATE CB'S. IN THE*/
*   /* CASE OF MOVEABLE HEAD DEVICES, ARM MOVEMENT IS MINIMIZED AS   */
*   /* THE SEARCH ALWAYS STARTS WHERE ASM POSITIONED THE ARM LAST.   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0395
*   RFY                                                            0395
*    (R14,                                                         0395
*     R15) RSTD;                                                   0395
*FINDONE:                                                          0396
*   GENERATE REFS(FUBYTAB);                                        0396
FINDONE  DS    0H                                                  0396
         LR    R7,R2               SAVE RSMHD POINTER
         LH    R8,SATMAPLN(SATPTR) GET LENGTH OF SATMAP
         LH    R9,SATOFFST(SATPTR) GET OFFSET OF LAST USED MAP
         SR    R8,R9               GET LENGTH TO SCAN
         LA    R15,256             GET LENGTH TRT CAN HANDLE
         L     R9,SATSCAN(SATPTR)  GET START ADDRESS
REDO1    DS    0H
         SR    R8,R15              REMOVE LENGTH TRT CAN HANDLE
         BP    TRTONE              BRANCH IF FULL SCAN
         AR    R8,R15              RESTORE IF NOT FULL SCAN (256)
         BCTR  R8,R0               CORRECT LENGTH (0 REFERANCED)
         EX    R8,TRTQUICK         TRANSLATE
         BC    6,FOUNDONE          BRANCH IF SUCCESSFUL TRANSLATION
         LH    R8,SATMAPLN(SATPTR) GET FULL MAP LENGTH
         LA    R9,SATMAPS(SATPTR)  GET START OF MAP
*
REDO2    DS    0H
         SR    R8,R15              REMOVE LENGTH TRT CAN HANDLE
         BP    TRTTWO              BRANCH IF FULL SCAN
         AR    R8,R15              RESTORE IF NOT FULL SCAN
         BCTR  R8,0                CORRECT LENGTH (0 REFERANCED)
         EX    R8,TRTQUICK         TRANSLATE
         BC    6,FOUNDONE          BRANCH IF SUCCESSFUL
         ST    SAREPTR,ATASARTE(ATAPTR) STORE POINTER FOR RECOVERY
         LR    R2,R7               RESTORE RSMHD POINTER
*
         MVI   ATARCODE(ATAPTR),4  LOAD REASON CODE FOR FRR
         ABEND X'C0D',,,SYSTEM     ABEND - NO SET FOUND
         B     ASGNRTRY            TRY TO GET ANOTHER SET
TRTONE   TRT   0(256,R9),FUBYTAB   SCAN FOR FREE BIT
         BC    6,FOUNDONE          BRANCH IF SUCCESSFUL
         LA    R9,256(R9)          GET NEXT 256 BYTES OF MAP TO SCAN
         B     REDO1               TRY AGAIN
*
TRTTWO   TRT   0(256,R9),FUBYTAB   SCAN FOR FREE BIT
         BC    6,FOUNDONE          BRANCH IF SUCCESSFUL
         LA    R9,256(R9)          GET NEXT 256 BYTES TO SCAN
         B     REDO2               TRY AGAIN
*
TRTQUICK TRT   0(0,R9),FUBYTAB     SCAN FOR FREE BIT
*
*     A SWAP SET WAS FOUND. CB S MUST BE UPDATED FOR NEXT ALLOCATION.
*     RESULTS OF TRT -- R1= ADDR OF SELECTED BYTE, R2= FUNCTION
*
FOUNDONE LA    R1,0(R1)            CLEAR HI BYTE AFTER TRT
         SLL   R2,24               CLEAR 3 HI BYTES AFTER TRT
         SRL   R2,24               REPOSITION
         BCTR  R2,0                BIT 1= 0 -CORRECT REFERENCE
         LR    R8,R2               SAVE FUNCTION BYTE
         LA    R9,128(0)           LOAD MASK OF HEX 80
         SRL   R9,0(R2)            SHIFT MASK BIT INTO POSITION
         IC    R14,0(R1)           GET MAP
         OR    R14,R9              TURN ON BIT
         STC   R14,0(R1)           STORE UPDATED MAP
         LR    R2,R7               RESTORE RSMHD POINTER
*
         ST    R1,SATSCAN(SATPTR)  SAVE ADDRESS OF MAP FOR NEXT TRY
         LA    R9,SATMAPS(SATPTR)  GET START OF MAP
         SR    R1,R9               GET OFFSET
         STH   R1,SATOFFST(SATPTR) SAVE IT
         LR    R14,R1              GET READY TO CALCULATE CYLINDER
*
         LH    R9,SATBYTCL(SATPTR) GET NUMBER OF BYTES TO MAP 1 CYL
         SR    R15,R15             CLEAR REG
         SRDA  R14,0(R9)           DIVIDE BY BYTES TO MAP 1 CYL
         LR    R7,R14              SAVE CYLINDER NUMBER
*
         SR    R14,R14             CLEAR REG
         SLDL  R14,3(R9)           MULTIPLY ADDITIONAL BYTES BY 8 BITS
         AR    R8,R14              GET SWAP GROUP WITHIN CYLINDER
*
         SR    R6,R6               CLEAR REG
         L     R14,SRESDCTE(SAREPTR) LOAD SDCT POINTER
         LH    R14,SDCCYLSZ(R14)   GET NUMBER OF SLOTS PER CYLINDER
         MR    R6,R14              GET SLOTS X CYLINDER VALUE
         SRDL  R8,32               R9 = R8, R8 = 0 - READY TO MULTIPLY
         L     R14,SARSETSZ(SARTPTR) GET NUMBER OF SLOTS PER SWAP SET
         MR    R8,R14              GET TOTAL SLOTS FOR SETS
         AR    R7,R9               GET Q PORTION OF LSID
*
LOADAIA  L     R9,SARSETCT(SARTPTR) GET TOTAL SETS AVAILABLE COUNT
         BCTR  R9,0                SUBTRACT ONE
         ST    R9,SARSETCT(SARTPTR) RETURN UPDATED COUNT
         L     R9,SREAVLSL(SAREPTR) PICK UP AVAIL SLOT CTR
         BCTR  R9,0                DECREMENT BY ONE
         ST    R9,SREAVLSL(SAREPTR)  STORE NEW COUNT
         LR    R9,R7               PUT QQQQ IN ODD REG OF PAIR
         SLL   R9,16               LEFT JUSTIFY
         LH    R8,SRENN(SAREPTR)   GET NN PORTION OF LSID
         SRDL  R8,16               SHIFT NN TO R9 & JUSTIFY QQ IN R9
*   RFY                                                            0397
*    (R7,                                                          0397
*     R8,                                                          0397
*     R14,                                                         0397
*     R15) UNRSTD;                                                 0397
*                                                                  0398
*   /*****************************************************************/
*   /*                                                               */
*   /* INSERT LSIDS INTO AIA'S IN THE SWAP GROUPS AND PROCESS NEXT   */
*   /* GROUP IF ANY EXIST.                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0398
*   RFY                                                            0398
*    (TEMPAIA) RSTD;                                               0398
*   AIAPTR=ASM5AIA;                 /* LOAD POINTER TO AIA GROUP     */
         L     AIAPTR,ASM5AIA(,ASMVTPTR)                           0399
*   TEMPAIA=AIANXAIA;               /* SAVE NEXT AIA GROUP           */
         L     TEMPAIA,AIANXAIA(,AIAPTR)                           0400
*   DO UNTIL AIAPTR=0;              /* PUT LSIDS IN ENTIRE GROUP     */
@DL00401 DS    0H                                                  0402
*     AIALSID=R9;                   /* STORE LSID                    */
         ST    R9,AIALSID(,AIAPTR)                                 0402
*     R9=R9+1;                      /* INCREMENT LSID                */
         AL    R9,@CF00061                                         0403
*     AIAPTR=AIAFQPA;               /* GET NEXT AIA                  */
         L     AIAPTR,AIAFQPA(,AIAPTR)                             0404
*   END;                            /* LOOP                          */
@DE00401 SLR   @08,@08                                             0405
         CR    AIAPTR,@08                                          0405
         BNE   @DL00401                                            0405
*   RFY                                                            0406
*    (R9) UNRSTD;                                                  0406
*                                                                  0406
*   /*****************************************************************/
*   /*                                                               */
*   /* IF MORE SWAP GROUPS TO PROCESS RETURN TO TOP.                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0407
*   IF TEMPAIA^=0 THEN              /* IF ANOTHER GROUP TO PROCESS   */
         CR    TEMPAIA,@08                                         0407
         BE    @RF00407                                            0407
*     DO;                           /* SET UP                        */
*       ASM5AIA=TEMPAIA;            /* SAVE NEXT AIA POINTER         */
         ST    TEMPAIA,ASM5AIA(,ASMVTPTR)                          0409
*       ASM5GCTR=ASM5GCTR-1;        /* ONE LESS GROUP TO PROCESS     */
         L     @07,ASM5GCTR(,ASMVTPTR)                             0410
         BCTR  @07,0                                               0410
         ST    @07,ASM5GCTR(,ASMVTPTR)                             0410
*       GOTO ASGNRTRY;              /* DO ENTIRE ASIGN OPERATION   0411
*                                      AGAIN                         */
         B     ASGNRTRY                                            0411
*     END;                                                         0412
*   RFY                                                            0413
*    (R15) RSTD;                                                   0413
@RF00407 DS    0H                                                  0414
*   R15=CODE0;                      /* ZERO RETURN CODE              */
         SLR   R15,R15                                             0414
*ASGNRTN:                                                          0415
*   ATASGNST='0'B;                  /* RESET TRACKING BIT FOR      0415
*                                      RECOVERY                      */
ASGNRTN  NI    ATASGNST(ATAPTR),B'01111111'                        0415
*   RFY                                                            0416
*    (R14) RSTD;                                                   0416
*   R14=ASM5SR14;                   /* RESTORE RETURN REGISTER       */
         L     R14,ASM5SR14(,ASMVTPTR)                             0417
*   RFY                                                            0418
*    (R14,                                                         0418
*     R15,                                                         0418
*     TEMPAIA,                                                     0418
*     SATPTR,                                                      0418
*     SAREPTR) UNRSTD;                                             0418
*   END ASIGNSET;                   /* END OF PROC                   */
@EL00002 DS    0H                                                  0419
@EF00002 DS    0H                                                  0419
@ER00002 BR    @14                                                 0419
*SCCWPROC:                                                         0420
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0420
*                                                                  0420
SCCWPROC DS    0H                                                  0421
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE BUILDS AND QUEUES SCCW'S FOR THE SWAP DRIVER. AIA*/
*   /* GROUPS ARE PASSED TO THIS ROUTINE ONE AT A TIME. IF ANY WORK  */
*   /* IS ADDED TO A QUEUE FOR SWAP DRIVER, A FLAG WILL BE SET PRIOR */
*   /* TO EXIT TO NOTIFY THE MAINLINE THAT A SCHEDULE MAY BE         */
*   /* REQUIRED. THIS ROUTINE DEPENDS ON THE FACT THAT IT IS CALLED  */
*   /* ONLY IF AN SCCW IS ON THE AVAILABLE QUEUE & WILL BE           */
*   /* OBTAINABLE.                                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0421
*   RFY                                                            0421
*    (R14,                                                         0421
*     SCCWPTR,                                                     0421
*     SAREPTR) RSTD;                                               0421
*   ATASCCWP='1'B;                  /* INDICATE SCCWPROC IN CONTROL  */
         OI    ATASCCWP(ATAPTR),B'01000000'                        0422
*   ASM5SR14=R14;                   /* SAVE RETURN ADDRESS           */
         ST    R14,ASM5SR14(,ASMVTPTR)                             0423
*   SCCWPTR=SARSCCWQ;               /* GET SCCW POINTER              */
         L     SCCWPTR,SARSCCWQ(,SARTPTR)                          0424
*CSRETRY:                                                          0425
*   R14=SCCWSCCW;                   /* GET NEXT SCCW POINTER         */
CSRETRY  L     R14,SCCWSCCW(,SCCWPTR)                              0425
*   CS(SCCWPTR,R14,SARSCCWQ);       /* C&S SCCW OFF QUEUE            */
         CS    SCCWPTR,@14,SARSCCWQ(SARTPTR)                       0426
*   BC(NE,CSRETRY);                 /* IF IT FAILS, RETRY - FAILURE
*                                      CAN ONLY BE FROM A SCCW BEING
*                                      ADDED SINCE ONLY SALLOCED   0427
*                                      MODULES CAN REMOVE SCCWS.     */
         BC    7,CSRETRY                                           0427
*   ATASCCW=SCCWPTR;                /* SAVE FOR RECOVERY             */
         ST    SCCWPTR,ATASCCW(,ATAPTR)                            0428
*   SCCWSCCW=0;                     /* CLEAR OLD POINTER             */
         SLR   @15,@15                                             0429
         ST    @15,SCCWSCCW(,SCCWPTR)                              0429
*   RFY                                                            0430
*    (R14) UNRSTD;                                                 0430
*                                                                  0431
*   /*****************************************************************/
*   /*                                                               */
*   /* FIND PROPER SRE BASED ON NN PORTION OF LSID.                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0431
*   RFY                                                            0431
*    (NREG,                                                        0431
*     QREG) RSTD;                                                  0431
*   NREG=AIALSID;                   /* GET LSID TO BE PROCESSED      */
         L     NREG,AIALSID(,AIAPTR)                               0432
*   QREG=NREG;                      /* GET LSID FOR QQQQ PORTION     */
         LR    QREG,NREG                                           0433
*   SRL(NREG,TWOBYTES);             /* ISOLATE NN PORTION            */
         SRL   NREG,16                                             0434
*   IF NREG>=SARUSE THEN            /* IF THIS IS AN INVALID ENTRY   */
         C     NREG,SARUSE(,SARTPTR)                               0435
         BL    @RF00435                                            0435
*     DO;                                                          0436
*       IF AIAWRITE='0'B THEN       /* IF THIS IS A READ REQUEST     */
         TM    AIAWRITE(AIAPTR),B'10000000'                        0437
         BNZ   @RF00437                                            0437
*         AIABADID='1'B;            /* SET BAD ID FLAG               */
         OI    AIABADID(AIAPTR),B'00000001'                        0438
*       ELSE                        /* IF THIS IS A WRITE REQUEST    */
*         AIAPRIER='1'B;            /* SET NORMAL PRIMARY ERROR FLAG */
         B     @RC00437                                            0439
@RF00437 OI    AIAPRIER(AIAPTR),B'00001000'                        0439
*       GOTO QTOERRQ;               /* GO TO PUT AIA ON ERROR QUEUE  */
         B     QTOERRQ                                             0440
*     END;                                                         0441
*   RFY                                                            0442
*    (TEMPLCCW) RSTD;                                              0442
@RF00435 DS    0H                                                  0443
*   SAREPTR=ADDR(SARENTS(NREG+1));  /* GET SARTE POINTER             */
         LR    @15,NREG                                            0443
         MH    @15,@CH01024                                        0443
         LA    SAREPTR,SARENTS(@15,SARTPTR)                        0443
*   IF SRENUSE='1'B THEN            /* IF SARTE IS NOT IN USE        */
         TM    SRENUSE(SAREPTR),B'10000000'                        0444
         BNO   @RF00444                                            0444
*     DO;                                                          0445
*       AIAPRIER='1'B;              /* SET ERROR FLAG                */
         OI    AIAPRIER(AIAPTR),B'00001000'                        0446
*       GOTO QTOERRQ;               /* GO TO PUT AIA ON ERROR QUEUE  */
         B     QTOERRQ                                             0447
*     END;                                                         0448
*   TEMPLCCW=SCCWLCCW;              /* GET TEMPORARY POINTER         */
@RF00444 L     TEMPLCCW,SCCWLCCW(,SCCWPTR)                         0449
*   TEMPLCCW->LASTRWFL=CHAINCMD;    /* RESTORE CHAIN FLG AFTER LAST
*                                      USE                           */
         MVI   LASTRWFL(TEMPLCCW),X'40'                            0450
*   TEMPLCCW=TEMPLCCW+8;            /* UPDATE TO NEW POINTER         */
         AL    TEMPLCCW,@CF00059                                   0451
*   TEMPLCCW->LASTSROA=SCCWSVOA;    /* RESTORE SEARCH AFTER LAST USE */
         L     @11,SCCWSVOA(,SCCWPTR)                              0452
         ST    @11,LASTSROA(,TEMPLCCW)                             0452
*   RFY                                                            0453
*    (TEMPLCCW) UNRSTD;                                            0453
*   RFY                                                            0454
*    (R0,                                                          0454
*     R1,                                                          0454
*     R13) RSTD;                                                   0454
*   SCCWAIA=AIAPTR;                 /* POINT TO AIA GROUP HEADER     */
         ST    AIAPTR,SCCWAIA(,SCCWPTR)                            0455
*   SCCWERR='0'B;                   /* RESET AFTER LAST USE          */
         NI    SCCWERR(SCCWPTR),B'01111111'                        0456
*   SCCWSARG=''B;                   /* CLEAR SEEK ARGUMENTS          */
         XC    SCCWSARG(64,SCCWPTR),SCCWSARG(SCCWPTR)              0457
*   R0=SREEDB;                      /* GET EDB POINTER               */
         L     R0,SREEDB(,SAREPTR)                                 0458
*   SLL(QREG,TWOBYTES);             /* CLEAR HIGH ORDER TWO BYTES    */
         SLL   QREG,16                                             0459
*   SRL(QREG,TWOBYTES);             /* ADJUST QQQQ PORTION           */
         SRL   QREG,16                                             0460
*   SARGFWD=QREG*ONEPAGE;           /* GET RBA - QX 4096             */
         LR    @11,QREG                                            0461
         SLA   @11,12                                              0461
         ST    @11,SARGFWD(,SCCWPTR)                               0461
*   R1=ADDR(SCCWSK);                /* GET 8 BYTE ANSWER FIELD ADDR  */
         LA    R1,SCCWSK(,SCCWPTR)                                 0462
*   R13=ADDR(ASMSAVE);              /* GET SAVE AREA ADDRESS         */
*                                                                  0463
         LA    R13,ASMSAVE(,ASMVTPTR)                              0463
*   /*****************************************************************/
*   /*                                                               */
*   /* CALL ILRCNVRT TO CONVERT RBA TO MBBCCHHR.                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0464
*   CALL ILRCNVRT;                  /* GET MBBCCHHR                  */
         BAL   @14,ILRCNVRT                                        0464
*   RFY                                                            0465
*    (R0,                                                          0465
*     R1,                                                          0465
*     R13,                                                         0465
*     QREG) UNRSTD;                                                0465
*                                                                  0466
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE IF CONVERSION WAS SUCCESSFUL. IF NOT, ABEND AND     */
*   /* RETURN RESOURCES.                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0466
*   RFY                                                            0466
*    (R15) RSTD;                                                   0466
*   IF R15^=CODE0 THEN              /* IF CONVERSION FAILED          */
         LTR   R15,R15                                             0467
         BZ    @RF00467                                            0467
*     DO;                                                          0468
*       RFY                                                        0469
*        (R15) UNRSTD;                                             0469
*       ATARCODE=CODE12;            /* LOAD REASON CODE FOR RVC      */
         MVI   ATARCODE(ATAPTR),X'0C'                              0470
*       ATASARTE=SAREPTR;           /* LOAD SARTE POINTER FOR RCV    */
         ST    SAREPTR,ATASARTE(,ATAPTR)                           0471
*       GEN(ABEND X'083',,,SYSTEM); /* RECORD THE ERROR              */
         ABEND X'083',,,SYSTEM
*       IF AIAWRITE='0'B THEN       /* DETERMINE IF SWAP OUT OR IN   */
         TM    AIAWRITE(AIAPTR),B'10000000'                        0473
         BNZ   @RF00473                                            0473
*         AIABADID='1'B;            /* FOR READS SET BAD ID FLAG     */
         OI    AIABADID(AIAPTR),B'00000001'                        0474
*       ELSE                        /* FOR WRITES                    */
*         AIAPRIER='1'B;            /* TREAT AS AN ERROR             */
         B     @RC00473                                            0475
@RF00473 OI    AIAPRIER(AIAPTR),B'00001000'                        0475
*       RFY                                                        0476
*        (TEMPAIA) RSTD;                                           0476
@RC00473 DS    0H                                                  0477
*QTOERRQ:                                                          0477
*       ATAAIA=0;                   /* CLEAR FOR RECOVERY            */
QTOERRQ  SLR   @11,@11                                             0477
         ST    @11,ATAAIA(,ATAPTR)                                 0477
*       TEMPAIA=PARTAIAE;           /* GET ERROR QUEUE               */
         L     @11,PARTPTR(,ASMVTPTR)                              0478
         L     TEMPAIA,PARTAIAE(,@11)                              0478
*CSLP:                                                             0479
*       AIANXAIA=TEMPAIA;           /* CHAIN TO AIA                  */
CSLP     ST    TEMPAIA,AIANXAIA(,AIAPTR)                           0479
*       CS(TEMPAIA,AIAPTR,PARTAIAE);/* C&S ONTO ERROR QUEUE          */
         L     @11,PARTPTR(,ASMVTPTR)                              0480
         CS    TEMPAIA,@06,PARTAIAE(@11)                           0480
*       BC(NE,CSLP);                /* IF C&S FAILED TRY AGAIN       */
         BC    7,CSLP                                              0481
*       RFY                                                        0482
*        (TEMPAIA) UNRSTD;                                         0482
*                                                                  0482
*       /*************************************************************/
*       /*                                                           */
*       /* PUT SCCW BACK ON AVAILABLE QUEUE                          */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0483
*       RFY                                                        0483
*        (TEMPSCCW) RSTD;                                          0483
*       TEMPSCCW=SARSCCWQ;          /* GET SCCW QUEUE                */
         L     TEMPSCCW,SARSCCWQ(,SARTPTR)                         0484
*CSLP1:                                                            0485
*       SCCWSCCW=TEMPSCCW;          /* CHAIN TO SCCW                 */
CSLP1    ST    TEMPSCCW,SCCWSCCW(,SCCWPTR)                         0485
*       CS(TEMPSCCW,SCCWPTR,SARSCCWQ);/* C&S ONTO QUEUE              */
         CS    TEMPSCCW,@09,SARSCCWQ(SARTPTR)                      0486
*       BC(NE,CSLP1);               /* IF C&S FAILED, TRY AGAIN      */
         BC    7,CSLP1                                             0487
*       RFY                                                        0488
*        (TEMPSCCW) UNRSTD;                                        0488
*     END;                          /* END OF CONVERSION FAILED      */
*   ELSE                            /* IF CONVERSION WAS SUCCESSFUL  */
*     DO;                           /* BUILD SCCW                    */
         B     @RC00467                                            0490
@RF00467 DS    0H                                                  0491
*       RFY                                                        0491
*        (RECREG,                                                  0491
*         TEMPAIA,                                                 0491
*         CCHHREG) RSTD;                                           0491
*       NREG=1;                     /* INITIALIZE INDEX              */
         LA    @11,1                                               0492
         LR    NREG,@11                                            0492
*       RECREG=1;                   /* INITIALIZE RECORD NUMBER      */
         LR    RECREG,@11                                          0493
*       CCHHREG=SCCWCCHH(NREG);     /* GET CCHH RETURNED BY CONVERT  */
         LR    @11,NREG                                            0494
         MH    @11,@CH01107                                        0494
         ALR   @11,SCCWPTR                                         0494
         ICM   CCHHREG,15,SCCWCCHH-5(@11)                          0494
*       TEMPAIA=AIAPTR;             /* PREPARE FOR LOOP              */
         LR    TEMPAIA,AIAPTR                                      0495
*       DO UNTIL TEMPAIA=0;         /* PROCESS ENTIRE GROUP          */
@DL00496 DS    0H                                                  0497
*         SCCWCCHH(NREG)=CCHHREG;   /* FILL IN CCHH VALUE FOR CCW    */
         LR    @11,NREG                                            0497
         MH    @11,@CH01107                                        0497
         ALR   @11,SCCWPTR                                         0497
         STCM  CCHHREG,15,SCCWCCHH-5(@11)                          0497
*         SCCWR(NREG)=RECREG;       /* FILL IN RECORD NUMBER         */
         LR    @11,NREG                                            0498
         MH    @11,@CH01107                                        0498
         STC   RECREG,SCCWR-5(@11,SCCWPTR)                         0498
*         IF AIAWRITE='1'B THEN     /* IF THIS IS A SWAP OUT         */
         TM    AIAWRITE(AIAPTR),B'10000000'                        0499
         BNO   @RF00499                                            0499
*           SCCWRWOP(NREG)=WRITEOP; /* OP CODE IS WRITE              */
         LR    @11,NREG                                            0500
         MH    @11,@CH00070                                        0500
         ALR   @11,SCCWPTR                                         0500
         MVI   SCCWRWOP-24(@11),X'05'                              0500
*         ELSE                      /* IF THIS IS A SWAP IN          */
*           SCCWRWOP(NREG)=READOP;  /* OP CODE IS READ               */
         B     @RC00499                                            0501
@RF00499 LR    @11,NREG                                            0501
         MH    @11,@CH00070                                        0501
         ALR   @11,SCCWPTR                                         0501
         MVI   SCCWRWOP-24(@11),X'86'                              0501
*         RFY                                                      0502
*          (R8) RSTD;                                              0502
@RC00499 DS    0H                                                  0503
*         R8=TEMPAIA-(LENGTH(PCB)-LENGTH(AIA));/* CALCULATE PCB PTR  */
         LR    R8,TEMPAIA                                          0503
         SL    R8,@CF01964                                         0503
*         R8=R8->PCBRBN;            /* GET RBN OF PAGE TO BE USED    */
         LH    @11,PCBRBN(,R8)                                     0504
         N     @11,@CF01974                                        0504
         LR    R8,@11                                              0504
*         SLL(R8,8);                /* CONVERT TO FULL ADDRESS       */
         SLL   R8,8                                                0505
*         SCCWRWAD(NREG)=R8;        /* STORE THE REAL ADDRESS        */
         LR    @11,NREG                                            0506
         MH    @11,@CH00070                                        0506
         ALR   @11,SCCWPTR                                         0506
         STCM  R8,7,SCCWRWAD-24(@11)                               0506
*         RFY                                                      0507
*          (R8) UNRSTD;                                            0507
*         IF RECREG=SDCSLTRK THEN   /* IF THIS TRACK IS FULL         */
         L     @11,SDCTEPTR(,SAREPTR)                              0508
         LH    @11,SDCSLTRK(,@11)                                  0508
         N     @11,@CF01974                                        0508
         CR    RECREG,@11                                          0508
         BNE   @RF00508                                            0508
*           DO;                     /* SET UP FOR NEXT TRACK         */
*             RECREG=1;             /* RECORD VALUE WILL BE 1        */
         LA    @11,1                                               0510
         LR    RECREG,@11                                          0510
*             CCHHREG=CCHHREG+1;    /* NEXT HEAD WILL BE USED        */
         ALR   CCHHREG,@11                                         0511
*           END;                                                   0512
*         ELSE                      /* IF TRACK IS NOT FULL          */
*           RECREG=RECREG+1;        /* NEXT RECORD WILL BE USED      */
         B     @RC00508                                            0513
@RF00508 AL    RECREG,@CF00061                                     0513
*         NREG=NREG+1;              /* UPDATE INDEX VALUE            */
@RC00508 AL    NREG,@CF00061                                       0514
*         TEMPAIA=TEMPAIA->AIAFQPA; /* GET NEXT LATERAL AIA          */
         L     TEMPAIA,AIAFQPA(,TEMPAIA)                           0515
*       END;                                                       0516
@DE00496 SLR   @11,@11                                             0516
         CR    TEMPAIA,@11                                         0516
         BNE   @DL00496                                            0516
*       RFY                                                        0517
*        (TEMPAIA,                                                 0517
*         RECREG,                                                  0517
*         NREG,                                                    0517
*         CCHHREG) UNRSTD;                                         0517
*       RFY                                                        0518
*        (TEMPSCCW) RSTD;                                          0518
*       TEMPSCCW=ADDR(SCCWRWOP(NREG-1));/* GET ADDRESS OF LAST R/W 0519
*                                      CCW                           */
         LR    @08,NREG                                            0519
         MH    @08,@CH00070                                        0519
         LA    TEMPSCCW,SCCWRWOP-48(@08,SCCWPTR)                   0519
*       SCCWLCCW=TEMPSCCW;          /* SAVE ADDRESS OF LAST RW       */
         ST    TEMPSCCW,SCCWLCCW(,SCCWPTR)                         0520
*       TEMPSCCW->LASTRWFL=0;       /* RESET CHAIN FLAG              */
         MVI   LASTRWFL(TEMPSCCW),X'00'                            0521
*       TEMPSCCW=TEMPSCCW+8;        /* UPDATE POINTER                */
         AL    TEMPSCCW,@CF00059                                   0522
*       SCCWSVOA=TEMPSCCW->LASTSROA;/* SAVE LAST OP AND ADDRESS      */
         L     @08,LASTSROA(,TEMPSCCW)                             0523
         ST    @08,SCCWSVOA(,SCCWPTR)                              0523
*       SCCWSECT=SDCSSECT;          /* STORE THE SET SECTOR VALUE    */
         L     @08,SDCTEPTR(,SAREPTR)                              0524
         IC    @07,SDCSSECT(,@08)                                  0524
         STC   @07,SCCWSECT(,SCCWPTR)                              0524
*       ATAAIA=0;                   /* RESET FOR RECOVERY            */
         ST    @11,ATAAIA(,ATAPTR)                                 0525
*       TEMPSCCW=SRESCCW;           /* GET SRE SCCW QUEUE            */
         L     TEMPSCCW,SRESCCW(,SAREPTR)                          0526
*CSLP2:                                                            0527
*       SCCWSCCW=TEMPSCCW;          /* CHAIN TO SCCW                 */
CSLP2    ST    TEMPSCCW,SCCWSCCW(,SCCWPTR)                         0527
*       CS(TEMPSCCW,SCCWPTR,SRESCCW);/* C&S TO SRE SCCW QUEUE        */
         CS    TEMPSCCW,@09,SRESCCW(SAREPTR)                       0528
*       BC(NE,CSLP2);               /* IF C&S FAILED, TRY AGAIN      */
         BC    7,CSLP2                                             0529
*       SCHEDRVR='1'B;              /* SWAP DRIVER NEEDS TO BE     0530
*                                      SCHEDULED BY THE CALLER       */
         OI    SCHEDRVR(ASMVTPTR),B'10000000'                      0530
*     END;                                                         0531
*   ATASCCWP='0'B;                  /* INDICATE CONTROL BEING      0532
*                                      RELINQUISHED                  */
@RC00467 NI    ATASCCWP(ATAPTR),B'10111111'                        0532
*   RFY                                                            0533
*    (R14) RSTD;                                                   0533
*   R14=ASM5SR14;                   /* RESTORE RETURN REGISTER       */
         L     R14,ASM5SR14(,ASMVTPTR)                             0534
*   RFY                                                            0535
*    (TEMPSCCW,                                                    0535
*     R14,                                                         0535
*     SAREPTR,                                                     0535
*     SCCWPTR) UNRSTD;                                             0535
*   END SCCWPROC;                                                  0536
@EL00003 DS    0H                                                  0536
@EF00003 DS    0H                                                  0536
@ER00003 BR    @14                                                 0536
*                                                                  0537
*/* MACCOMP Y-4SCICW/PZD81                                           */
*/* MACSTAT Y-475152/415304                                          */
*/*A 000000-999999                                           @Z40WPWF*/
*/********************************************************************/
*/*                                                                  */
*/* NAME: ILRCNVRT                                                   */
*/*                                                                  */
*/* STATUS: OS/VS2 RELEASE 4.1, LEVEL 0                              */
*/*                                                                  */
*/* ENTRY POINT: ILRCNVRT                                            */
*/*                                                                  */
*/* FUNCTION: CONVERT AN RBA TO A FULL SEEK ADDRESS- MBBCCHHR        */
*/*                                                                  */
*/* INPUT: R0- EDB HEADER ADDRESS                                    */
*/*        R1- POINTER TO 8 BYTE AREA TO STORE SEEK ADDRESS          */
*/*            WORD 1- RBA TO BE CONVERTED                           */
*/*        R13- SAVE AREA POINTER                                    */
*/*        R14- RETURN ADDRESS                                       */
*/*                                                                  */
*/* PROCESS: CONVERTS AN RBA TO MBBCCHHR USING THE EDB AND LPMB.     */
*/*                                                                  */
*/* OUTPUT: MBBCCHHR IN 8 BYTE AREA POINTED TO BY REG 1              */
*/*         R15- RETURN CODE                                         */
*/*              0 - CONVERSION OK                                   */
*/*              4- EDB NOT FOUND FOR THIS RBA                       */
*/*                                                                  */
*/* EXIT-NORMAL: RETURN TO CALLER                                    */
*/*              R15= 0                                              */
*/*                                                                  */
*/* EXIT-ERROR: RETURN TO CALLER                                     */
*/*              R15= 4                                              */
*/*                                                                  */
*/* EXTERNAL REFERENCES: NONE                                        */
*/*                                                                  */
*/* REGISTERS CLOBBERED: REGISTERS SAVED UPON ENTRY                  */
*/*                      THEN REGS 0-5 USED FOR PROCESSING           */
*/*                      UPON RETURN, ALL REGS RESTORED EXCEPT       */
*/*                      R15 WHICH CONTAINS THE RETURN CODE          */
*/*                                                                  */
*/* MAPPING MACROS USED:  IDAEDB                                     */
*/*                       IDALPMB                                    */
*/*                                                                  */
*/* NOTES: THE CALLING MODULE MUST INCLUDE THE MAPPING MACROS LISTED */
*/*        ABOVE. ADDRESSABILITY FOR THESE MACROS WILL BE SET UP IN  */
*/*        THIS ROUTINE.                                             */
*/*        ALL LABELS AND DATA AREAS CREATED BY THIS ROUTINE BEGIN   */
*/*        WITH THE FIVE CHARACTERS 'CNVRT'.                         */
*/*        THIS ROUTINE REQUIRES THAT THE CALLING MODULE DECLARE     */
*/*        REGISTERS AS R0-R15.                                      */
*/*                                                                  */
*/********************************************************************/
*                                                                  0537
*                                                                  0537
*/*ILRCNVRT: CHART                                                   */
*/* HEADER                                                         0537
*/*  ILRCNVRT:  ASM CONVERT ROUTINE                                  */
*/*ILRCNVRT:  E CONVERT RBA TO SEEK ADDR                             */
*/* P SET UP PTR TO EDB HDR                                          */
*/* P SET UP PTR TO 1ST EDB ENTRY                                    */
*/* P PICK UP RBA FROM INPUT PARMS                                   */
*/* P INITIALIZE RETURN CODE TO 4                                    */
*/* N LOOP WHILE R15 = 4                                             */
*/*%CNV1: D (NO,,YES,%CNV4) ALL EDB ENTRIES TRIED?                   */
*/*       D (YES,,NO,%CNV4) RETURN CODE STILL 4?                     */
*/*       D (YES,,NO,%CNV2) RBA IN THIS EDB ENTRY                    */
*/* P (,%CNV1) SET RETURN CODE TO ZERO                               */
*/*%CNV2: P (,%CNV1) UPDATE TO NEXT EDB ENTRY                        */
*/* N END OF LOOP                                                    */
*/*%CNV4: D (YES,,NO,%CNVEXT)  EDB ENTRY FOUND?                      */
*/* P GET LPMB ADDRESS                                               */
*/* P ZERO 8 BYTE OUTPUT AREA                                        */
*/* P GET RELATIVE RBA PER THIS EXTENT                               */
*/* P SET UP EXTENT NUMBER- M                                        */
*/* P CALCULATE RELATIVE CYLINDER FOR DATA SET                       */
*/* P CALCULATE RELATIVE TRACK FOR DATA SET                          */
*/* P CALCULATE RECORD NUMBER- R                                     */
*/* P CALCULATE ACTUAL CYLINDER FOR DEVICE                           */
*/* P CALCULATE ACTUAL TRACK FOR DEVICE                              */
*/*%CNVEXT: R RETURN TO CALLER                                       */
*/*ILRCNVRT: END                                                     */
*                                                                  0537
*ILRCNVRT:                                                         0537
*   PROC OPTIONS(NOSAVEAREA);                                      0537
ILRCNVRT STM   @14,@12,12(@13)                                     0537
*   DCL                                                            0538
*     1 CNVRTSKA CHAR(8) BASED(R1)  /* FULL SEEK ADDRESS             */
*           BDY(DWORD),                                            0538
*      2 CNVRTM CHAR(1),            /* EXTENT NUMBER                 */
*      2 * CHAR(2),                 /* BIN NUMBER                    */
*      2 CNVRTCC CHAR(2),           /* CYLINDER NUMBER               */
*      2 CNVRTHH CHAR(2),           /* TRACK (HEAD) NUMBER           */
*      2 CNVRTR CHAR(1);            /* RECORD NUMBER                 */
*   DCL                                                            0539
*     CNVRTBAD FIXED(31) CONSTANT(4);/* BAD RETURN CODE              */
*   DCL                                                            0540
*     CNVRTOK FIXED(31) CONSTANT(0);/* GOOD RETURN CODE              */
*   DCL                                                            0541
*     CNVRTRBA FIXED(31) DEFINED(CNVRTSKA);                        0541
*   DCL                                                            0542
*     CNVRTONE FIXED(31) CONSTANT(1);/* CONSTANT OF ONE              */
*   RFY                                                            0543
*    (R0,                                                          0543
*     R1,                                                          0543
*     R2) RSTD;                     /* SAVE PARM REGISTERS           */
*   R2=R0;                          /* SET UP EDBHDPTR IN REG2       */
         LR    R2,R0                                               0544
*   RFY                                                            0545
*     R0 UNRSTD;                    /* NO NEED FOR R0                */
*   RFY                                                            0546
*     R3 RSTD;                                                     0546
*   R3=R2+LENGTH(IDAEDBHD);         /* POINT R3 TO FIRST EDB ENTRY   */
         LA    R3,8                                                0547
         ALR   R3,R2                                               0547
*   RFY                                                            0548
*     R5 RSTD;                                                     0548
*   R5=CNVRTRBA;                    /* RBA TO BE CONVERTED           */
         L     R5,CNVRTRBA(,R1)                                    0549
*   RFY                                                            0550
*    (R4,                                                          0550
*     R15) RSTD;                                                   0550
*   R15=CNVRTBAD;                   /* INITIALIZE RETURN CODE        */
         LA    R15,4                                               0551
*   DO R4=R2->EDBNO TO 1 BY-1       /* LOOP THROUGH EDB ENTRIES      */
*         WHILE R15=CNVRTBAD;                                      0552
         SLR   R4,R4                                               0552
         IC    R4,EDBNO(,R2)                                       0552
         B     @DE00552                                            0552
@DL00552 C     R15,@CF00053                                        0552
         BNE   @DC00552                                            0552
*     IF R5=>R3->EDBLORBA&          /* IF RBA IN THIS EXTENT         */
*         R5<=R3->EDBHIRBA THEN     /* THEN RESET RETURN CODE        */
         CL    R5,EDBLORBA(,R3)                                    0553
         BL    @RF00553                                            0553
         CL    R5,EDBHIRBA(,R3)                                    0553
         BH    @RF00553                                            0553
*       R15=CNVRTOK;                                               0554
         SLR   R15,R15                                             0554
*     ELSE                          /* ELSE, CHECK NEXT ENTRY        */
*       R3=R3+R2->EDBLEN;                                          0555
         B     @RC00553                                            0555
@RF00553 AH    R3,EDBLEN(,R2)                                      0555
*   END;                                                           0556
@RC00553 BCTR  R4,0                                                0556
@DE00552 LTR   R4,R4                                               0556
         BP    @DL00552                                            0556
@DC00552 DS    0H                                                  0557
*   IF R15=CNVRTOK                  /* IF FOUND EDB ENTRY,           */
*     THEN                                                         0557
         LTR   R15,R15                                             0557
         BNZ   @RF00557                                            0557
*     DO;                           /* THEN DO CONVERSION            */
*/*                                                                  */
*/*                 FOUND EDB ENTRY                                  */
*/*                                                                  */
*                                                                  0559
*       R2=R3->EDBLPMBA;            /* GET LPMB ADDRESS              */
         L     R2,EDBLPMBA(,R3)                                    0559
*       CNVRTSKA=''B;               /* ZERO FULL SEEK ADDRESS        */
         XC    CNVRTSKA(8,R1),CNVRTSKA(R1)                         0560
*       R5=R5-R3->EDBLORBA;         /* RELATIVE RBA THIS EXTENT      */
         SL    R5,EDBLORBA(,R3)                                    0561
*       CNVRTM=R3->EDBM;            /* SET UP EXTENT NUMBER          */
         IC    @14,EDBM(,R3)                                       0562
         STC   @14,CNVRTM(,R1)                                     0562
*/*                                                                  */
*/*          OPTIMIZE CODE BY USING ASSEMBLER FOR DIVISION           */
*/*                                                                  */
*                                                                  0563
*       GENERATE REFS(LPMAUSZ,LPMBPTRK,LPMBLKSZ,R2,R4,R5,CNVRTCC,  0563
*           CNVRTHH);                                              0563
*
*           CNVRTCC = REL RBA / BYTES PER ALLOCATION UNIT
*           R5= R5 / LPMAUSZ
*           R4= R5 // LPMAUSZ
*
            SR   R4,R4                 ZERO EVEN REGISTER
            D    R4,LPMAUSZ(,R2)       RBA / BYTES PER ALLOC UNIT
            STCM R5,3,CNVRTCC(R1)      RELATIVE CYL VALVE
            LR   R5,R4                 REMAINDER= RELATIVE TRACK
*
*           CNVRTHH = RELATIVE TRACK / BYTES PER TRACK
*           R5= R5 / LPMBPTRK
*           R4= R5 // LPMBPTRK
*
            SR   R4,R4                 ZERO EVEN REGISTER
            D    R4,LPMBPTRK(,R2)      REL TRACK / BYTES PER TRACK
            STCM R5,3,CNVRTHH(R1)      RELATIVE TRACK VALVE
*
*           CNVRTR= (( RELATIVE RECORD + BLOCKSIZE -1) / BLOCKSIZE)+1
*                R7= ( R6 + LPMBLKSZ - 1 ) / LPMBLKSZ
*
            A    R4,LPMBLKSZ(,R2)      ADD PHYSICAL BLOCKSIZE
            BCTR R4,0                  SUBTRACT 1 FOR ROUNDING
            LR   R5,R4                 SET UP FOR DIVISION
            SR   R4,R4                 ZERO EVEN REGISTER
            D    R4,LPMBLKSZ(,R2)      DIVIDE BY BLOCKSIZE
*       CNVRTR=R5+CNVRTONE;         /* RECORD NUMBER                 */
         LA    @14,1                                               0564
         ALR   @14,R5                                              0564
         STC   @14,CNVRTR(,R1)                                     0564
*/*                                                                  */
*/*      CNVRTCC=(CNVRTCC * LPMTRKAU + CNVRTHH + EDBSTTRK)/ LPMTPC   */
*/*      CNVRTHH=(CNVRTCC * LPMTRKAU + CNVRTHH + EDBSTTRK)// LPMTPC  */
*/*                                                                  */
*                                                                  0565
*       R5=CNVRTCC*(R2->LPMTRKAU)+CNVRTHH+(R3->EDBSTTRK);          0565
         SLR   R5,R5                                               0565
         ICM   R5,3,CNVRTCC(R1)                                    0565
         MH    R5,LPMTRKAU(,R2)                                    0565
         SLR   @14,@14                                             0565
         ICM   @14,3,CNVRTHH(R1)                                   0565
         ALR   R5,@14                                              0565
         AL    R5,EDBSTTRK(,R3)                                    0565
*       GENERATE REFS(LPMTPC,R3,R4,R5,R2,R1,CNVRTCC,CNVRTHH);      0566
*
*           CNVRTCC= R5 / LPMTPC
*           CNVRTHH= R5 // LPMTPC
*
            SR    R4,R4                ZERO EVEN REGISTER
            LH    R3,LPMTPC(,R2)       PICK UP TRACKS PER CYLINDER
            DR   R4,R3                 R5 / LPMTPC
            STCM R5,3,CNVRTCC(R1)      ACTUAL CYLINDER ADDRESS
            STCM R4,3,CNVRTHH(R1)      ACTUAL HEAD ADDRESS
*     END;                          /* END OF CONVERSION PROCESS     */
*   RETURN CODE(R15);               /* RETURN TO CALLER              */
@RF00557 L     @14,12(,@13)                                        0568
         LM    @00,@12,20(@13)                                     0568
         BR    @14                                                 0568
*   END ILRCNVRT;                                                  0569
@PB00004 DS    0H                                                  0569
*   RFY                                                            0570
*    (R1,                                                          0570
*     R2,                                                          0570
*     R3,                                                          0570
*     R4,                                                          0570
*     R5,                                                          0570
*     R15) UNRSTD;                                                 0570
*   END ILRSWAP                                                    0571
*                                                                  0571
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (ILRAIA  )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (ILRASMVT)                                       */
*/*%INCLUDE SYSLIB  (ILRATA  )                                       */
*/*%INCLUDE SYSLIB  (IDAEDB  )                                       */
*/*%INCLUDE SYSLIB  (IHAFRRS )                                       */
*/*%INCLUDE SYSLIB  (IDALPMB )                                       */
*/*%INCLUDE SYSLIB  (ILRPART )                                       */
*/*%INCLUDE SYSLIB  (IHAPCB  )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHARSMHD)                                       */
*/*%INCLUDE SYSLIB  (ILRASMHD)                                       */
*/*%INCLUDE SYSLIB  (ILRSAT  )                                       */
*/*%INCLUDE SYSLIB  (ILRSART )                                       */
*/*%INCLUDE SYSLIB  (ILRSCCW )                                       */
*/*%INCLUDE SYSLIB  (ILRSDCT )                                       */
*/*%INCLUDE SYSLIB  (IHASPCT )                                       */
*/*%INCLUDE SYSLIB  (IHASRB  )                                       */
*/*%INCLUDE SYSLIB  (ILRCNVRT)                                       */
*                                                                  0571
*       ;                                                          0571
@DATA    DS    0H
@CH01107 DC    H'5'
@CH00070 DC    H'24'
@CH01024 DC    H'48'
@DATD    DSECT
         DS    0F
ILRSWAP  CSECT
         DS    0F
@CF00061 DC    F'1'
@CF00053 DC    F'4'
@CF00059 DC    F'8'
@CF01964 DC    F'36'
@CF01974 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
@ENDDATD EQU   *
ILRSWAP  CSECT
         NOPR  ((@ENDDATD-@DATD)*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CA01901 DC    A(ILRSLSQA)
@CV01874 DC    V(ILRPAGIO)
         DS    0D
FUBYTAB  DC    128X'01'
         DC    64X'02'
         DC    32X'03'
         DC    16X'04'
         DC    8X'05'
         DC    4X'06'
         DC    2X'07'
         DC    X'08'
         DC    X'00'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
AIAPTR   EQU   @06
ASMVTPTR EQU   @03
ATAPTR   EQU   @04
RSMHDPTR EQU   @02
SATPTR   EQU   @11
SARTPTR  EQU   @05
SAREPTR  EQU   @10
SCCWPTR  EQU   @09
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
FADDR    EQU   @04
R5       EQU   @05
PREVAIA  EQU   @05
R6       EQU   @06
R7       EQU   @07
NREG     EQU   @07
GROUPAIA EQU   @07
R8       EQU   @08
QREG     EQU   @08
PAGECTR  EQU   @08
R9       EQU   @09
RWORK    EQU   @09
RWORK1   EQU   @10
R12      EQU   @12
R13      EQU   @13
TEMPSCCW EQU   @13
TEMPAIA  EQU   @13
TEMPSRE  EQU   @13
TEMPLCCW EQU   @13
R14      EQU   @14
RECREG   EQU   @14
R15      EQU   @15
CCHHREG  EQU   @15
R10      EQU   @10
R11      EQU   @11
         ENTRY ILRCRSP1
         ENTRY ILRCRSP2
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
AIA      EQU   0
AIAFQPA  EQU   AIA
AIAFLG1  EQU   AIA+9
AIAWRITE EQU   AIAFLG1
AIALSQA  EQU   AIAFLG1
AIAPAGDS EQU   AIAFLG1
AIAFLG2  EQU   AIA+10
AIAPRIER EQU   AIAFLG2
AIAERROR EQU   AIAFLG2
AIABADID EQU   AIAFLG2
AIAFLG3  EQU   AIA+11
AIANXAIA EQU   AIA+12
AIAID    EQU   AIA+16
AIALPID  EQU   AIAID
AIALGID  EQU   AIALPID
AIALSID  EQU   AIALGID
AIASSID  EQU   AIALSID+1
AIARPN   EQU   AIALPID+4
AIALSID2 EQU   AIARPN
AIALPMEP EQU   AIALSID2
AIAGRPSZ EQU   AIA+24
AIALGE   EQU   AIAGRPSZ
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBNVSC EQU   ASCB+122
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
ASMVT    EQU   0
ASMFLAG1 EQU   ASMVT
ASMFLAG2 EQU   ASMVT+1
ASMSART  EQU   ASMVT+4
ASMPART  EQU   ASMVT+8
ASMSTAGQ EQU   ASMVT+32
ASMSTAGF EQU   ASMSTAGQ
ASMSTAGL EQU   ASMSTAGQ+4
ASMIORQR EQU   ASMVT+40
ASMPCCWQ EQU   ASMVT+64
ASMNVSC  EQU   ASMVT+120
ASMLSAI  EQU   ASMVT+144
ASMGOSQS EQU   ASMVT+152
ASMPQIOE EQU   ASMVT+192
ASMPFRSW EQU   ASMVT+200
ASMPIOFR EQU   ASMVT+272
ASMWKSA1 EQU   ASMVT+368
ASMWKSA2 EQU   ASMVT+448
ASMWKSA3 EQU   ASMVT+528
ASMWKSA4 EQU   ASMVT+608
ASMWKSA5 EQU   ASMVT+688
ASMSAVE  EQU   ASMVT+928
ASMPOOLS EQU   0
ASMCPAVQ EQU   ASMPOOLS+8
ASMCPRSQ EQU   ASMPOOLS+16
ATA      EQU   0
ATAMODID EQU   ATA
ATASFLGS EQU   ATA+1
ATASLSQA EQU   ATASFLGS
ATASWAP  EQU   ATASFLGS+1
ATARFLGS EQU   ATA+4
ATASGNST EQU   ATARFLGS
ATASCCWP EQU   ATARFLGS
ATARCRSN EQU   ATA+6
ATARCODE EQU   ATA+7
ATACLEAR EQU   ATA+8
ATAAIA   EQU   ATACLEAR
ATASARTE EQU   ATACLEAR+4
ATASCCW  EQU   ATACLEAR+8
IDAEDBHD EQU   0
EDBNO    EQU   IDAEDBHD+1
EDBLEN   EQU   IDAEDBHD+2
IDAEDB   EQU   0
EDBFLG1  EQU   IDAEDB+2
EDBM     EQU   IDAEDB+3
EDBLPMBA EQU   IDAEDB+4
EDBSTTRK EQU   IDAEDB+8
EDBLORBA EQU   IDAEDB+12
EDBHIRBA EQU   IDAEDB+16
FRRS     EQU   0
FRRSHEAD EQU   FRRS
FRRSENTR EQU   0
FRRSFLGS EQU   FRRSENTR+4
FRRSFLG1 EQU   FRRSFLGS
FRREPTR  EQU   0
IDALPMB  EQU   0
LPMBFLGS EQU   IDALPMB+1
LPMAUSZ  EQU   IDALPMB+4
LPMBPTRK EQU   IDALPMB+8
LPMBLKSZ EQU   IDALPMB+12
LPMTRKAU EQU   IDALPMB+16
LPMTPC   EQU   IDALPMB+18
PART     EQU   0
PARTHDR  EQU   PART
PARTAIAE EQU   PARTHDR+12
PARTTPAR EQU   PARTHDR+24
PARTCOMQ EQU   PARTHDR+48
PARTSPLQ EQU   PARTHDR+56
PARTDUPQ EQU   PARTHDR+64
PARTLOCQ EQU   PARTHDR+72
PARTENT  EQU   0
PARELKUP EQU   PARTENT+4
PARELKFL EQU   PARELKUP
PARETYPE EQU   PARTENT+8
PAREFLG1 EQU   PARTENT+9
PAREPTR  EQU   0
PCB      EQU   0
PCBFQP   EQU   PCB
PCBBQP   EQU   PCB+4
PCBRTP   EQU   PCB+8
PCBFL1   EQU   PCBRTP
PCBRLP   EQU   PCB+12
PCBXPT   EQU   PCB+16
PCBFL2   EQU   PCBXPT
PCBPGT   EQU   PCB+20
PCBFL3   EQU   PCBPGT
PCBRBN   EQU   PCB+24
PCBBLOCK EQU   PCB+28
PCBSRB   EQU   PCBBLOCK
PCBRB    EQU   PCBSRB
PCBPTR   EQU   0
RSMHD    EQU   0
RSMSPCT  EQU   RSMHD+4
RSMASCB  EQU   RSMHD+8
RSMFLG1  EQU   RSMHD+12
RSMQS    EQU   RSMHD+20
RSMLFQ   EQU   RSMQS
RSMLSQA  EQU   RSMQS+4
RSMLIOQ  EQU   RSMQS+8
RSMASMHD EQU   RSMHD+40
SAT      EQU   0
SATHDR   EQU   SAT
SATASGN  EQU   SATHDR+24
SART     EQU   0
SARTHDR  EQU   SART
SARUSE   EQU   SARTHDR+8
SARFXDNX EQU   SARTHDR+16
SARMOVNX EQU   SARTHDR+20
SARSCCWQ EQU   SARTHDR+32
SARSETCT EQU   SARTHDR+36
SARWAITQ EQU   SARTHDR+40
SARWAITF EQU   SARWAITQ
SARWAITL EQU   SARWAITQ+4
SARSRBP  EQU   SARTHDR+48
SARSRBCT EQU   SARTHDR+52
SARSETSZ EQU   SARTHDR+56
SARENTS  EQU   SART+80
SARTE    EQU   0
SRENEXT  EQU   SARTE
SREFLG   EQU   SARTE+9
SRENUSE  EQU   SREFLG
SREFIXED EQU   SREFLG
SRESCCW  EQU   SARTE+12
SREAVLSL EQU   SARTE+20
SRESAT   EQU   SARTE+32
SRESDCTE EQU   SARTE+36
SREEDB   EQU   SARTE+40
SCCW     EQU   0
SCCWHDR  EQU   SCCW
SCCWSECT EQU   SCCWHDR+1
SCCWFLAG EQU   SCCWHDR+2
SCCWERR  EQU   SCCWFLAG
SCCWSCCW EQU   SCCWHDR+4
SCCWAIA  EQU   SCCWHDR+8
SCCWSARG EQU   SCCWHDR+16
SCCWSRH  EQU   SCCWSARG+3
SCCWCCHH EQU   SCCWSRH
SCCWR    EQU   SCCWSRH+4
SCCWLCCW EQU   SCCWHDR+80
SCCWSVOA EQU   SCCWHDR+84
SCCWCCW  EQU   SCCW+88
SCCWSEEK EQU   SCCWCCW
SCCWSSEC EQU   SCCWCCW+8
SCCWSLOT EQU   SCCWCCW+16
SCCWSRCH EQU   SCCWSLOT
SCCWTIC  EQU   SCCWSLOT+8
SCCWRW   EQU   SCCWSLOT+16
SCCWRWOP EQU   SCCWRW
SCCWRWAD EQU   SCCWRW+1
SCCWLTIC EQU   SCCWCCW+304
SDCT     EQU   0
SDCHDR   EQU   SDCT
SDCTPTR  EQU   0
SDCTE    EQU   0
SDCSLTRK EQU   SDCTE+8
SDCSSECT EQU   SDCTE+16
SPCT     EQU   0
SPCTLSQA EQU   SPCT+6
SPCTFLG1 EQU   SPCT+10
SPCTSEGE EQU   0
SEGSPTR  EQU   0
SPCTSWPE EQU   0
SPCTLS   EQU   SPCTSWPE
SPCTFLAG EQU   SPCTLS
SWAPPTR  EQU   0
SPCTEXTM EQU   0
SPCTENT  EQU   SPCTEXTM+8
SRBSECT  EQU   0
SRB      EQU   SRBSECT
SRBFLC   EQU   SRB+12
SRBPTR   EQU   0
FREESWAP EQU   0
ILRQIOE  EQU   0
LASTCCW  EQU   0
LASTSROA EQU   LASTCCW
LASTRWOP EQU   LASTSROA
LASTRWAD EQU   LASTSROA+1
LASTRWFL EQU   LASTCCW+4
CNVRTSKA EQU   0
CNVRTM   EQU   CNVRTSKA
CNVRTCC  EQU   CNVRTSKA+3
CNVRTHH  EQU   CNVRTSKA+5
CNVRTR   EQU   CNVRTSKA+7
SATCYLMP EQU   0
CVTPTR   EQU   FLCCVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
ASCBPTR  EQU   RSMASCB
ASM1WKSV EQU   ASMWKSA1
ASM1RGSV EQU   ASM1WKSV
ASM1WRKA EQU   ASM1WKSV+60
ASM2WKSV EQU   ASMWKSA2
ASM2WRKA EQU   ASM2WKSV+52
ASM2FLGS EQU   ASM2WRKA+12
ASM3WKSV EQU   ASMWKSA3
ASM4WKSV EQU   ASMWKSA4
ASM4RGSV EQU   ASM4WKSV
ASM5WKSV EQU   ASMWKSA5
ASM5RGSV EQU   ASM5WKSV
ASM5SR14 EQU   ASM5WKSV+52
ASM5GCTR EQU   ASM5WKSV+56
ASM5AIA  EQU   ASM5WKSV+60
ASM5FLGS EQU   ASM5WKSV+64
PSARSVTE EQU   PSARSVT
PSACSTK  EQU   PSARSVTE
FRRSPTR  EQU   PSACSTK
PARTPTR  EQU   ASMPART
@NM00049 EQU   RSMASMHD
ASMHD    EQU   @NM00049
ASHFLAG1 EQU   ASMHD
ASHSWPOT EQU   ASHFLAG1
ASHFLAG2 EQU   ASMHD+1
ASHSWPCT EQU   ASMHD+2
ASHIOCNT EQU   ASMHD+8
ASHSWAPQ EQU   ASMHD+12
SCCWSK   EQU   SCCWSARG
SDCTEPTR EQU   SRESDCTE
SPCTPTR  EQU   RSMSPCT
SWPFLGS  EQU   ASM5FLGS
SCHEDRVR EQU   SWPFLGS
WORKDWD  EQU   SCCWSK
SARGFWD  EQU   WORKDWD
CNVRTRBA EQU   CNVRTSKA
FLC      EQU   PSA
*                                      START UNREFERENCED COMPONENTS
@NM00068 EQU   WORKDWD+4
ASHLGEQ  EQU   ASMHD+28
ASHVSRBP EQU   ASMHD+24
ASHLOCK  EQU   ASMHD+20
ASHCAPQ  EQU   ASMHD+16
ASHBKSLT EQU   ASMHD+4
ASHRSV12 EQU   ASHFLAG2
ASHRSV11 EQU   ASHFLAG2
ASHRSV10 EQU   ASHFLAG2
ASHRSV9  EQU   ASHFLAG2
ASHRSV8  EQU   ASHFLAG2
ASHRSV7  EQU   ASHFLAG2
ASHRSV13 EQU   ASHFLAG2
ASHSCHED EQU   ASHFLAG2
ASHRSV6  EQU   ASHFLAG1
ASHRSV5  EQU   ASHFLAG1
ASHRSV4  EQU   ASHFLAG1
ASHRSV3  EQU   ASHFLAG1
ASHRSV2  EQU   ASHFLAG1
ASHPERME EQU   ASHFLAG1
ASHCAPER EQU   ASHFLAG1
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
@NM00008 EQU   ASM5RGSV+4
ASM5RG2  EQU   ASM5RGSV
@NM00007 EQU   ASM4RGSV+4
ASM4RG2  EQU   ASM4RGSV
ASM3SR13 EQU   ASM3WKSV+28
ASM3R14B EQU   ASM3WKSV+24
ASM3R14A EQU   ASM3WKSV+20
ASM3GRPA EQU   ASM3WKSV+16
ASM3TMPA EQU   ASM3WKSV+12
ASM3PIOP EQU   ASM3WKSV+8
ASM3GENQ EQU   ASM3WKSV+4
ASM3SWPQ EQU   ASM3WKSV
ASM2SR14 EQU   ASM2WRKA+16
@NM00006 EQU   ASM2WRKA+13
ASM2WFLG EQU   ASM2FLGS
ASM2RFLG EQU   ASM2FLGS
ASM2DUPQ EQU   ASM2WRKA+8
ASM2CAQ  EQU   ASM2WRKA+4
ASM2PAQ  EQU   ASM2WRKA
ASM2RGSV EQU   ASM2WKSV
ASM1NXTA EQU   ASM1WRKA+4
ASM1ASCB EQU   ASM1WRKA
ASM1RG15 EQU   ASM1RGSV+56
@NM00005 EQU   ASM1RGSV+4
ASM1RG1  EQU   ASM1RGSV
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
@NM00070 EQU   CNVRTSKA+1
@NM00069 EQU   LASTCCW+5
LASTSRFL EQU   LASTRWFL
LASTSRAD EQU   LASTRWAD
LASTSROP EQU   LASTRWOP
@NM00067 EQU   SRB+40
@NM00066 EQU   SRB+38
SRBPRIOR EQU   SRB+37
SRBPKF   EQU   SRB+36
SRBSAVE  EQU   SRB+32
SRBPARM  EQU   SRB+28
SRBRMTR  EQU   SRB+24
SRBEP    EQU   SRB+20
SRBPTCB  EQU   SRBFLC+4
SRBPASID EQU   SRBFLC+2
SRBCPAFF EQU   SRBFLC
SRBASCB  EQU   SRB+8
SRBFLNK  EQU   SRB+4
SRBID    EQU   SRB
SPCTXEND EQU   SPCTENT+48
SPCTENTS EQU   SPCTENT
@NM00065 EQU   SPCTEXTM+4
SPCTEXT  EQU   SPCTEXTM
SPCTFIXC EQU   SPCTSWPE+6
SPCTVBN  EQU   SPCTLS+4
SPCTSSID EQU   SPCTLS+1
@NM00064 EQU   SPCTFLAG
SPCTDEFR EQU   SPCTFLAG
SPCTCOMM EQU   SPCTFLAG
SPCTLSQ  EQU   SPCTFLAG
SPCTLVAL EQU   SPCTFLAG
SPCTBITM EQU   SPCTSEGE+4
SPCTPGT  EQU   SPCTSEGE+1
SPCTSEGX EQU   SPCTSEGE
SPCTSEGS EQU   SPCT+72
SPCTSWAP EQU   SPCT+16
SPCTSIZE EQU   SPCT+14
SPCTWSSZ EQU   SPCT+12
SPCTIDEN EQU   SPCT+11
@NM00063 EQU   SPCTFLG1
SPCTPSET EQU   SPCTFLG1
SPCTBIG  EQU   SPCTFLG1
SPCTPURG EQU   SPCTFLG1
SPCTOUT  EQU   SPCTFLG1
SPCTSWIN EQU   SPCTFLG1
SPCTSSEG EQU   SPCT+9
SPCTNSEG EQU   SPCT+8
SPCTFIX  EQU   SPCT+4
SPCTSWRT EQU   SPCT
SDCRESV  EQU   SDCTE+18
SDCMPEXP EQU   SDCTE+17
SDCCMASK EQU   SDCTE+12
SDCCYLSZ EQU   SDCTE+10
SDCDTYPX EQU   SDCTE+6
SDCDEVTP EQU   SDCTE
@NM00062 EQU   SDCT+128
SDCENTS  EQU   SDCT+8
SDCRSV1  EQU   SDCHDR+6
SDCSIZE  EQU   SDCHDR+4
SDCID    EQU   SDCHDR
@NM00061 EQU   SCCWLTIC+4
SCCWLTAD EQU   SCCWLTIC+1
SCCWLTOP EQU   SCCWLTIC
SCCWRWCT EQU   SCCWRW+6
@NM00060 EQU   SCCWRW+5
SCCWRWFL EQU   SCCWRW+4
@NM00059 EQU   SCCWTIC+4
SCCWTIAD EQU   SCCWTIC+1
SCCWTIOP EQU   SCCWTIC
SCCWSRCT EQU   SCCWSRCH+6
@NM00058 EQU   SCCWSRCH+5
SCCWSRFL EQU   SCCWSRCH+4
SCCWSRAD EQU   SCCWSRCH+1
SCCWSROP EQU   SCCWSRCH
SCCWFLCT EQU   SCCWSSEC+4
SCCWSSAD EQU   SCCWSSEC+1
SCCWSSOP EQU   SCCWSSEC
SCCWFGCT EQU   SCCWSEEK+4
SCCWSKAD EQU   SCCWSEEK+1
SCCWSKOP EQU   SCCWSEEK
SCCWRSV1 EQU   SCCWSARG+63
SCCWHH   EQU   SCCWCCHH+2
SCCWCC   EQU   SCCWCCHH
SCCWBB   EQU   SCCWSARG+1
SCCWM    EQU   SCCWSARG
SCCWIORB EQU   SCCWHDR+12
@NM00057 EQU   SCCWHDR+3
@NM00056 EQU   SCCWFLAG
SCCWID   EQU   SCCWHDR
SREUCB   EQU   SARTE+44
SREIORB  EQU   SARTE+28
SRERRCNT EQU   SARTE+24
SRETOTSL EQU   SARTE+16
SRENN    EQU   SARTE+10
@NM00055 EQU   SREFLG
SREDRIVE EQU   SREFLG
SREDSBD  EQU   SREFLG
@NM00054 EQU   SARTE+8
SRELOCK  EQU   SARTE+4
@NM00053 EQU   SARTHDR+60
SARSDCT  EQU   SARTHDR+28
SARDSNL  EQU   SARTHDR+24
@NM00052 EQU   SARTHDR+12
SARSIZE  EQU   SARTHDR+4
SARID    EQU   SARTHDR
SATMAPS  EQU   SAT+32
@NM00051 EQU   SATHDR+28
SATSLTNO EQU   SATHDR+20
SATSCAN  EQU   SATHDR+16
@NM00050 EQU   SATHDR+15
SATMASK  EQU   SATHDR+14
SATOFFST EQU   SATHDR+12
SATBYTCL EQU   SATHDR+10
SATMAPLN EQU   SATHDR+8
SATSARTE EQU   SATHDR+4
SATID    EQU   SATHDR
RSMFOEQ  EQU   RSMHD+36
RSMLIOQL EQU   RSMLIOQ+4
RSMLIOQF EQU   RSMLIOQ
RSMLSQAL EQU   RSMLSQA+2
RSMLSQAF EQU   RSMLSQA
RSMLFQL  EQU   RSMLFQ+2
RSMLFQF  EQU   RSMLFQ
RSMRSV2  EQU   RSMHD+16
RSMCNTFX EQU   RSMHD+14
RSMRSV1  EQU   RSMHD+13
@NM00048 EQU   RSMFLG1
RSMFAIL  EQU   RSMFLG1
RSMGFADD EQU   RSMFLG1
RSMCPNC  EQU   RSMFLG1
RSMCPNU  EQU   RSMFLG1
RSMGFAD  EQU   RSMFLG1
RSMIOCPC EQU   RSMFLG1
RSMIOCPU EQU   RSMFLG1
RSMVSTO  EQU   RSMHD
PCBEND   EQU   PCB+64
PCBAIA   EQU   PCB+36
PCBASCB  EQU   PCB+32
PCBSPCTE EQU   PCBRB
PCBVBN   EQU   PCB+26
PCBPGTA  EQU   PCBPGT+1
PCBSWPS2 EQU   PCBFL3
@NM00023 EQU   PCBFL3
PCBNOREC EQU   PCBFL3
PCBDFRLS EQU   PCBFL3
PCBSWPLS EQU   PCBFL3
PCBSWPS1 EQU   PCBFL3
PCBSWPIN EQU   PCBFL3
PCBSWPOT EQU   PCBFL3
PCBXPTA  EQU   PCBXPT+1
@NM00022 EQU   PCBFL2
@NM00021 EQU   PCBFL2
PCBVIO   EQU   PCBFL2
PCBSUPRS EQU   PCBFL2
PCBRESET EQU   PCBFL2
PCBIOERR EQU   PCBFL2
PCBGFAD  EQU   PCBFL2
PCBFREAL EQU   PCBFL2
PCBRLPA  EQU   PCBRLP+1
PCBFXC   EQU   PCBRLP
PCBRTPA  EQU   PCBRTP+1
PCBIOCMP EQU   PCBFL1
PCBIOI   EQU   PCBFL1
PCBROOT  EQU   PCBFL1
PCBLFR   EQU   PCBFL1
PCBLLHLD EQU   PCBFL1
PCBSRBMD EQU   PCBFL1
PCBPEX   EQU   PCBFL1
@NM00020 EQU   PCBFL1
PCBBQPA  EQU   PCBBQP
PCBFQPA  EQU   PCBFQP+1
PCBCQN   EQU   PCBFQP
@NM00019 EQU   PARTENT+62
PARELCYL EQU   PARTENT+60
PARERQTM EQU   PARTENT+56
PAREWTQE EQU   PARTENT+52
PARENODE EQU   PARTENT+48
PAREUCBP EQU   PARTENT+44
PAREEDBP EQU   PARTENT+40
PAREPCTP EQU   PARTENT+36
PAREPATP EQU   PARTENT+32
PAREIORB EQU   PARTENT+28
PARERRCT EQU   PARTENT+24
PARESLTA EQU   PARTENT+20
PARESZSL EQU   PARTENT+16
PAREIOEQ EQU   PARTENT+12
PARENN   EQU   PARTENT+10
@NM00018 EQU   PAREFLG1
PAREINCP EQU   PAREFLG1
PAREDSBD EQU   PAREFLG1
PARENUSE EQU   PAREFLG1
@NM00017 EQU   PARETYPE
PARELOCL EQU   PARETYPE
PAREDPLX EQU   PARETYPE
PARECOMM EQU   PARETYPE
PAREPLPA EQU   PARETYPE
PARECPCT EQU   PARELKUP+2
PAREIORN EQU   PARELKUP+1
@NM00016 EQU   PARELKFL
PAREFSIP EQU   PARELKFL
PAREPARE EQU   PARTENT
PARTENTS EQU   PART+80
PARTLOCL EQU   PARTLOCQ+4
PARTLOCF EQU   PARTLOCQ
PARTDUPL EQU   PARTDUPQ+4
PARTDUPF EQU   PARTDUPQ
PARTSPLL EQU   PARTSPLQ+4
PARTSPLF EQU   PARTSPLQ
PARTCOML EQU   PARTCOMQ+4
PARTCOMF EQU   PARTCOMQ
PARTLOCK EQU   PARTHDR+44
PARTLKUP EQU   PARTHDR+40
@NM00015 EQU   PARTHDR+34
PARTLCNT EQU   PARTHDR+32
PARTPCTQ EQU   PARTHDR+28
PARTDSNL EQU   PARTTPAR
PARTCIR2 EQU   PARTHDR+20
PARTCIR1 EQU   PARTHDR+16
PARTEUSE EQU   PARTHDR+8
PARTSIZE EQU   PARTHDR+4
PARTIDEN EQU   PARTHDR
LPMBSST  EQU   IDALPMB+28
LPMBEXT  EQU   IDALPMB+24
@NM00014 EQU   IDALPMB+22
LPMBLKTR EQU   IDALPMB+20
LPMBLEN  EQU   IDALPMB+2
@NM00013 EQU   LPMBFLGS
LPMBSSTH EQU   LPMBFLGS
LPMBTOFL EQU   LPMBFLGS
LPMSS    EQU   LPMBFLGS
LPMREPL  EQU   LPMBFLGS
LPMBRPS  EQU   LPMBFLGS
LPMBID   EQU   IDALPMB
FRRSPARM EQU   FRRSENTR+8
@NM00012 EQU   FRRSFLGS+1
@NM00011 EQU   FRRSFLG1
FRRSNEST EQU   FRRSFLG1
FRRSRCUR EQU   FRRSFLG1
FRRSFRRA EQU   FRRSENTR
FRRSENTS EQU   FRRS+84
FRRSRTMW EQU   FRRS+16
FRRSCURR EQU   FRRSHEAD+12
FRRSELEN EQU   FRRSHEAD+8
FRRSLAST EQU   FRRSHEAD+4
FRRSEMP  EQU   FRRSHEAD
EDBTKBAL EQU   IDAEDB+20
@NM00010 EQU   EDBFLG1
EDBPSDS  EQU   EDBFLG1
EDBTOFLW EQU   EDBFLG1
EDBLKR   EQU   EDBFLG1
@NM00009 EQU   IDAEDB
EDBLPMBC EQU   IDAEDBHD+4
EDBID    EQU   IDAEDBHD
ATAIORB  EQU   ATACLEAR+12
ATARCRF8 EQU   ATARCRSN
ATARCRF7 EQU   ATARCRSN
ATARCRF6 EQU   ATARCRSN
ATARCRF5 EQU   ATARCRSN
ATARCRF4 EQU   ATARCRSN
ATARCRF3 EQU   ATARCRSN
ATARCRF2 EQU   ATARCRSN
ATARCRF1 EQU   ATARCRSN
ATARSV2  EQU   ATARFLGS
ATABADPK EQU   ATARFLGS
ATARSV1  EQU   ATASFLGS+1
ATASRT   EQU   ATASFLGS+1
ATASWPDR EQU   ATASFLGS+1
ATATRPAG EQU   ATASFLGS+1
ATAPAGCM EQU   ATASFLGS
ATAPAGIO EQU   ATASFLGS
ATAPOS   EQU   ATASFLGS
ATAPCOMP EQU   ATASFLGS
ATAVIOCM EQU   ATASFLGS
ATASCOMP EQU   ATASFLGS
ATAQIOE  EQU   ATASFLGS
ASMCPRES EQU   ASMCPRSQ+4
ASMCPTAK EQU   ASMCPRSQ
ASMCPCNT EQU   ASMCPAVQ+4
ASMCPAVL EQU   ASMCPAVQ
ASMCPEXT EQU   ASMPOOLS+6
ASMCPSIZ EQU   ASMPOOLS+4
ASMCPID  EQU   ASMPOOLS
ASMRSV12 EQU   ASMVT+1000
ASMWKSA7 EQU   ASMVT+848
ASMWKSA6 EQU   ASMVT+768
ASMACEPC EQU   ASMVT+344
ASMSWKPC EQU   ASMVT+328
ASMBWKPC EQU   ASMVT+312
ASMIOEPC EQU   ASMVT+296
ASMRSV10 EQU   ASMVT+280
ASMPVACE EQU   ASMVT+276
ASMPVACQ EQU   ASMVT+268
ASMPMSGS EQU   ASMVT+264
ASMPMSG0 EQU   ASMVT+260
ASMPFRLG EQU   ASMVT+256
ASMPRLG  EQU   ASMVT+252
ASMPACT  EQU   ASMVT+248
ASMPSAV  EQU   ASMVT+244
ASMPCMP  EQU   ASMVT+240
ASMPCMPA EQU   ASMVT+236
ASMPCMPN EQU   ASMVT+232
ASMPCMPD EQU   ASMVT+228
ASMPEX   EQU   ASMVT+224
ASMVRMTR EQU   ASMVT+220
ASMPSRBC EQU   ASMVT+216
ASMPSRMT EQU   ASMVT+212
ASMPSWPD EQU   ASMVT+208
ASMPTM   EQU   ASMVT+204
ASMPFRSL EQU   ASMVT+196
ASMRSV8  EQU   ASMVT+184
ASMTASCB EQU   ASMVT+180
ASMRLGWQ EQU   ASMVT+176
ASMRLGRQ EQU   ASMVT+172
ASMTMECB EQU   ASMVT+168
ASMTCBPT EQU   ASMVT+164
ASMREQCT EQU   ASMVT+160
ASMGOSWK EQU   ASMGOSQS+4
ASMGOSWT EQU   ASMGOSQS
ASMLSAIH EQU   ASMLSAI+4
ASMLSAIL EQU   ASMLSAI
ASMCINV  EQU   ASMVT+140
ASMSTGXA EQU   ASMVT+136
ASMLGVT  EQU   ASMVT+132
ASMSLOTV EQU   ASMVT+128
ASMERRS  EQU   ASMVT+124
ASMVSC   EQU   ASMVT+116
ASMSLOTS EQU   ASMVT+112
ASMBKSLT EQU   ASMVT+108
ASMRSV7  EQU   ASMVT+92
ASMPSRB  EQU   ASMVT+88
ASMSRBCT EQU   ASMVT+84
ASMIOCNT EQU   ASMVT+80
ASMBURST EQU   ASMVT+76
ASMPCCWN EQU   ASMVT+72
ASMPCCWC EQU   ASMPCCWQ+4
ASMPCCWA EQU   ASMPCCWQ
ASMRSV6  EQU   ASMVT+48
ASMIORQC EQU   ASMVT+44
ASMRSV5  EQU   ASMVT+28
ASMMSGBF EQU   ASMVT+24
ASMEREC  EQU   ASMVT+20
ASMTRPAG EQU   ASMVT+16
ASMGOS   EQU   ASMVT+12
ASMRSV4  EQU   ASMVT+2
ASMWARM  EQU   ASMFLAG2
ASMQUICK EQU   ASMFLAG2
ASMNOTPT EQU   ASMFLAG2
ASMNOTMR EQU   ASMFLAG2
ASMNOSAV EQU   ASMFLAG2
ASMCALLQ EQU   ASMFLAG2
ASMPLPAS EQU   ASMFLAG1
ASMCOMMF EQU   ASMFLAG1
ASMPLPAF EQU   ASMFLAG1
ASMNODPX EQU   ASMFLAG1
ASMRSV1  EQU   ASMFLAG1
ASMNOLCL EQU   ASMFLAG1
ASMNOCWQ EQU   ASMFLAG1
ASMDUPLX EQU   ASMFLAG1
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSM  EQU   ASCB+52
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
AIADPXCT EQU   AIALGE
AIACEPTR EQU   AIALPMEP
AIASLOT  EQU   AIASSID+1
@NM00004 EQU   AIASSID
@NM00003 EQU   AIALSID
AIARCSN  EQU   AIANXAIA+2
AIACYL   EQU   AIANXAIA
AIARSV9  EQU   AIAFLG3
AIARSV8  EQU   AIAFLG3
AIARSV7  EQU   AIAFLG3
AIALPMEC EQU   AIAFLG3
AIARSV6  EQU   AIAFLG3
AIATRPSP EQU   AIAFLG3
AIAPRINO EQU   AIAFLG3
AIARSV5  EQU   AIAFLG3
AIASECER EQU   AIAFLG2
AIARSV4  EQU   AIAFLG2
AIAIORTY EQU   AIAFLG2
AIATERMR EQU   AIAFLG2
AIAFRAUX EQU   AIAFLG2
AIARSV1  EQU   AIAFLG1
AIASWPFX EQU   AIAFLG1
AIADUPLX EQU   AIAFLG1
AIAVIO   EQU   AIAFLG1
AIAPRIV  EQU   AIAFLG1
AIAOP    EQU   AIA+8
AIABQPA  EQU   AIA+4
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00002 EQU   CVTFIX+248
@NM00001 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00047 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00046 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00045 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00044 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00043 EQU   FLCFSA
@NM00042 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00041 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00040 EQU   FLCIOA
@NM00039 EQU   FLCMCLA+15
@NM00038 EQU   FLCMCLA+14
@NM00037 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00036 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00035 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00034 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00033 EQU   FLCPER
@NM00032 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00031 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00030 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00029 EQU   FLCPIILC
@NM00028 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00027 EQU   FLCSVILC
@NM00026 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00025 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00024 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
*                                      END UNREFERENCED COMPONENTS
@RT00217 EQU   QIOEPREP
@RT00231 EQU   ENDRTN
@RF00237 EQU   @RC00235
@RC00224 EQU   @RC00187
@RC00335 EQU   USELSID
@RC00346 EQU   FINDONE
@RT00357 EQU   FINDREAD
@RC00437 EQU   QTOERRQ
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   ILRSWAP,(C'PLS1329',0701,76087)
