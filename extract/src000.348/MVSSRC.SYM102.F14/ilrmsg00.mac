         TITLE 'ILRMSG00 - ASM''S MESSAGE MODULE                       *
                         '
ILRMSG00 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(16)                                             0001
         DC    C'ILRMSG00  76.087'                                 0001
ILRMSGSP DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00182-ILRMSGSP)
         ENTRY ILRMSGSP
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @10,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@10                                         0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 DS    0H                                                  0002
         SLR   R15,R15
         ST    R15,16(R13)       /* SET RETURN CODE TO ZERO         */
*   MSGNUM=PARMNUM;                 /* OBTAIN MESSAGE NUMBER FROM  0113
*                                      INPUT PARAMETER LIST          */
         LH    MSGNUM,PARMNUM(,R1)                                 0113
         N     MSGNUM,@CF02608                                     0113
*   TYPE=PARMTYPE;                  /* OBTAIN ENTRY TYPE FROM INPUT
*                                      PARAMETER LIST                */
         LH    TYPE,PARMTYPE(,R1)                                  0114
         N     TYPE,@CF02608                                       0114
*   ENTRYPTR=PARMENTP;              /* OBTAIN ENTRY POINTER FROM   0115
*                                      INPUT PARAMETER LIST          */
         L     ENTRYPTR,PARMENTP(,R1)                              0115
*   RFY                                                            0116
*    (R1) UNRSTD;                                                  0116
*                                                                  0116
*   /*****************************************************************/
*   /*                                                               */
*   /* OBTAIN A POINTER TO THE ASMVT. INITIALIZE FULL FLAG           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0117
*   ASMVTPTR=CVTASMVT;              /* OBTAIN POINTER TO ASMVT       */
         L     @12,CVTPTR                                          0117
         L     ASMVTPTR,CVTASMVT(,@12)                             0117
*   FULLFLAG=OFF;                   /* SET FULL FLAG OFF INDICATING
*                                      THAT THE DATA SET IN QUESTION
*                                      IS BAD INSTEAD OF FULL        */
         SLR   FULLFLAG,FULLFLAG                                   0118
         EJECT
*                                                                  0119
*/********************************************************************/
*/********************************************************************/
*/*   MESSAGE NUMBER IS NOT PROVIDED                                 */
*/********************************************************************/
*/********************************************************************/
*                                                                  0119
*   IF MSGNUM=ZERO THEN                                            0119
         LTR   MSGNUM,MSGNUM                                       0119
         BNZ   @RF00119                                            0119
*     DO;                                                          0120
*                                                                  0120
*       /*************************************************************/
*       /*                                                           */
*       /* CHECK THE NUSE FLAG AND DSBD FLAG OF THE PART/SART ENTRY  */
*       /* PROVIDED AS INPUT. IF BOTH FLAGS ARE ON, THEN THIS MODULE */
*       /* HAS ALREADY BEEN CALLED CONCERNING THIS PART/SART ENTRY.  */
*       /* HENCE, RETURN TO THE CALLER. IF NEITHER FLAG IS ON, THEN  */
*       /* RETURN TO THE CALLER SINCE A MESSAGE NUMBER SHOULD HAVE   */
*       /* BEEN PROVIDED. IF EITHER FLAG IS ON, THEN DETERMINE       */
*       /* WHETHER THE ENTRY POINTER POINTS TO A PART ENTRY OR A SART*/
*       /* ENTRY.                                                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0121
*       IF PARENUSE=ON&PAREDSBD=ON THEN                            0121
         TM    PARENUSE(ENTRYPTR),B'11000000'                      0121
         BO    @RT00121                                            0121
*         RETURN;                   /* RETURN TO THE CALLER          */
*       IF PARENUSE=OFF&PAREDSBD=OFF THEN                          0123
         TM    PARENUSE(ENTRYPTR),B'11000000'                      0123
         BZ    @RT00123                                            0123
*         RETURN;                   /* RETURN TO THE CALLER          */
*                                                                  0124
*       /*************************************************************/
*       /*                                                           */
*       /* IF THE ENTRY POINTER POINTS TO A PART ENTRY, THEN         */
*       /* DETERMINE WHICH PAGE DATA SET THE ENTRY REPRESENTS.       */
*       /* OTHERWISE, THE ENTRY POINTER IS ASSUMED TO POINT TO A SART*/
*       /* ENTRY.                                                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0125
*       IF TYPE=PAGEDS THEN                                        0125
@RF00123 LTR   TYPE,TYPE                                           0125
         BNZ   @RF00125                                            0125
*         DO;                                                      0126
         EJECT
*                                                                  0127
*/********************************************************************/
*/********************************************************************/
*/*   PLPA IS BAD OR COMMON IS BAD                                   */
*/********************************************************************/
*/********************************************************************/
*                                                                  0127
*           /*********************************************************/
*           /*                                                       */
*           /* IF THE PART ENTRY IS PLPA OR COMMON AND IF DUPLEXING  */
*           /* IS NOT AVAILABLE, THEN TERMINATE THE SYSTEM. HOWEVER, */
*           /* IF DUPLEXING IS AVAILABLE, THEN WRITE MESSAGES 9 AND  */
*           /* 10 TO THE OPERATOR. ALSO TURN ON THE NO COMMON WRITE  */
*           /* QUEUE FLAG IN THE ASMVT AS WELL AS ZERO THE WRITE     */
*           /* QUEUE POINTER OF THE PART ENTRY.                      */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0127
*           IF PAREPLPA=ON×PARECOMM=ON THEN                        0127
         TM    PAREPLPA(ENTRYPTR),B'11000000'                      0127
         BZ    @RF00127                                            0127
*             DO;                                                  0128
*               IF ASMDUPLX=OFF THEN                               0129
         TM    ASMDUPLX(ASMVTPTR),B'10000000'                      0129
         BNZ   @RF00129                                            0129
*                 CALL TERMSYS;     /* TERMINATE THE SYSTEM          */
         BAL   @14,TERMSYS                                         0130
*               MSGNUM=NINE;        /* SET MESSAGE NUMBER TO NINE    */
@RF00129 LA    MSGNUM,9                                            0131
*               ASMNOCWQ=ON;        /* TURN NO COMMON WRITE QUEUE  0132
*                                      FLAG ON                       */
         OI    ASMNOCWQ(ASMVTPTR),B'01000000'                      0132
*               CALL CLEARWTQ;      /* CLEAN UP THE IOE'S ON THE   0133
*                                      WRITE QUEUE POINTED TO BY THE
*                                      WRITE QUEUE POINTER IN THE  0133
*                                      PART ENTRY                    */
         BAL   @14,CLEARWTQ                                        0133
*               PAREWTQE=ZERO;      /* ZERO THE PART ENTRY WRITE   0134
*                                      QUEUE POINTER IN ORDER TO   0134
*                                      PREVENT PART MONITOR (ILRPTM)
*                                      FROM WRITING TO PLPA OR COMMON*/
         SLR   @12,@12                                             0134
         ST    @12,PAREWTQE(,ENTRYPTR)                             0134
*               CALL WRITEMSG;      /* BUILD MESSAGE 9 AND WRITE IT
*                                      TO THE OPERATOR               */
         BAL   @14,WRITEMSG                                        0135
*               MSGNUM=TEN;         /* SET MESSAGE NUMBER TO 10      */
         LA    MSGNUM,10                                           0136
*             END;                  /* PLPA OR COMMON IS BAD         */
         EJECT
*                                                                  0138
*/********************************************************************/
*/********************************************************************/
*/*   DUPLEX IS BAD                                                  */
*/********************************************************************/
*/********************************************************************/
*                                                                  0138
*           ELSE                    /* PLPA AND COMMON ARE NOT BAD   */
*             DO;                                                  0138
*                                                                  0138
         B     @RC00127                                            0138
@RF00127 DS    0H                                                  0139
*               /*****************************************************/
*               /*                                                   */
*               /* IF THE PART ENTRY IS DUPLEX AND IF PLPA AND COMMON*/
*               /* ARE BOTH FULL OR ONE OF THEM IS UNUSABLE, THEN    */
*               /* TERMINATE THE SYSTEM. HOWEVER IF PLPA AND COMMON  */
*               /* ARE NOT BOTH FULL AND BOTH ARE USABLE, THEN WRITE */
*               /* MESSAGE 7 TO THE OPERATOR. ALSO TURN OFF THE ASMVT*/
*               /* DUPLEX OPTION FLAG AS WELL AS TURN ON THE ASMVT   */
*               /* DUPLEXING SUSPENDED FLAG.                         */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0139
*               IF PAREDPLX=ON THEN                                0139
         TM    PAREDPLX(ENTRYPTR),B'00100000'                      0139
         BNO   @RF00139                                            0139
*                 DO;                                              0140
*                   PLPAPTR=ADDR(PARTENTS(PARTPLPN+1));/* OBTAIN A 0141
*                                      POINTER TO THE PART ENTRY FOR
*                                      PLPA                          */
         L     @12,PARTPTR(,ASMVTPTR)                              0141
         LA    PLPAPTR,PARTENTS(,@12)                              0141
*                   COMMPTR=ADDR(PARTENTS(PARTCOMN+1));/* OBTAIN A 0142
*                                      POINTER TO THE PART ENTRY FOR
*                                      COMMON                        */
         LA    COMMPTR,PARTENTS+64(,@12)                           0142
*                   IF(ASMPLPAF=ON&ASMCOMMF=ON)×(PLPAPTR->PARENUSE=ON×
*                       PLPAPTR->PAREDSBD=ON)×(COMMPTR->PARENUSE=ON×
*                       COMMPTR->PAREDSBD=ON) THEN                 0143
         TM    ASMPLPAF(ASMVTPTR),B'00000110'                      0143
         BO    @RT00143                                            0143
         TM    PARENUSE(PLPAPTR),B'11000000'                       0143
         BNZ   @RT00143                                            0143
         TM    PARENUSE(COMMPTR),B'11000000'                       0143
         BZ    @RF00143                                            0143
@RT00143 DS    0H                                                  0144
*                     CALL TERMSYS; /* TERMINATE THE SYSTEM          */
         BAL   @14,TERMSYS                                         0144
*                   MSGNUM=SEVEN;   /* SET MESSAGE NUMBER TO 7       */
@RF00143 LA    MSGNUM,7                                            0145
*                   ASMDUPLX=OFF;   /* TURN DUPLEX OPTION FLAG OFF   */
*                   ASMNODPX=ON;    /* TURN DUPLEXING SUSPENDED FLAG
*                                      ON                            */
         OI    ASMNODPX(ASMVTPTR),B'00001000'                      0147
         NI    ASMDUPLX(ASMVTPTR),B'01111111'                      0147
*                 END;              /* DUPLEX IS BAD                 */
         EJECT
*                                                                  0149
*/********************************************************************/
*/********************************************************************/
*/*   A LOCAL IS BAD                                                 */
*/********************************************************************/
*/********************************************************************/
*                                                                  0149
*               ELSE                /* PLPA, COMMON, AND DUPLEX ARE
*                                      NOT BAD                       */
*                 DO;                                              0149
*                                                                  0149
         B     @RC00139                                            0149
@RF00139 DS    0H                                                  0150
*                   /*************************************************/
*                   /*                                               */
*                   /* IF THE PART ENTRY IS A LOCAL AND IT HAPPENS TO*/
*                   /* BE THE LAST ACTIVE LOCAL PAGE DATA SET, THEN  */
*                   /* TERMINATE THE SYSTEM. HOWEVER IF IT IS NOT THE*/
*                   /* LAST ACTIVE LOCAL, THEN WRITE MESSAGE 9 TO THE*/
*                   /* OPERATOR. ALSO DECREMENT THE ASMVT UNRESERVED */
*                   /* SLOT COUNT BY THE NUMBER OF SLOTS MADE        */
*                   /* AVAILABLE BY THIS LOCAL AS WELL AS DECREMENT  */
*                   /* THE COUNT OF ACTIVE LOCAL PAGE DATA SETS BY   */
*                   /* ONE. IF THE PART ENTRY IS NOT A LOCAL, THEN   */
*                   /* RETURN TO THE CALLER SINCE THE INPUT APPEARS  */
*                   /* TO BE BAD.                                    */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0150
*                   IF PARELOCL=ON THEN                            0150
         TM    PARELOCL(ENTRYPTR),B'00010000'                      0150
         BNO   @RF00150                                            0150
*                     DO;                                          0151
*                       IF PARTLCNT<=ONE THEN                      0152
         L     @12,PARTPTR(,ASMVTPTR)                              0152
         LH    @12,PARTLCNT(,@12)                                  0152
         C     @12,@CF00042                                        0152
         BH    @RF00152                                            0152
*                         CALL TERMSYS;/* TERMINATE THE SYSTEM       */
         BAL   @14,TERMSYS                                         0153
*                       MSGNUM=NINE;/* SET MESSAGE NUMBER TO 9       */
@RF00152 LA    MSGNUM,9                                            0154
*                       RFY                                        0155
*                        (R0,                                      0155
*                         R1) RSTD;                                0155
*                       R0=ASMBKSLT;/* OBTAIN THE ASMVT UNRESERVED 0156
*                                      SLOT COUNT                    */
         L     R0,ASMBKSLT(,ASMVTPTR)                              0156
*SETBKSLT:                                                         0157
*                       R1=R0-PARESLTA;/* DECREMENT COUNT            */
SETBKSLT LR    R1,R0                                               0157
         SL    R1,PARESLTA(,ENTRYPTR)                              0157
*                       CS(R0,R1,ASMBKSLT);/* UPDATE ASMVT UNRESERVED
*                                      SLOT COUNT FIELD              */
         CS    R0,@01,ASMBKSLT(ASMVTPTR)                           0158
*                       BC(NE,SETBKSLT);/* IF UNSUCCESSFUL, TRY AGAIN*/
         BC    7,SETBKSLT                                          0159
*                       RFY                                        0160
*                        (R0,                                      0160
*                         R1) UNRSTD;                              0160
*                       PAREWTQE=ZERO;/* ZERO THE PART ENTRY WRITE 0161
*                                      QUEUE POINTER IN ORDER TO   0161
*                                      PREVENT PART MONITOR (ILRPTM)
*                                      FROM WRITING TO THIS LOCAL    */
         SLR   @12,@12                                             0161
         ST    @12,PAREWTQE(,ENTRYPTR)                             0161
*                       PARTLCNT=PARTLCNT-1;/* DECREMENT THE COUNT OF
*                                      ACTIVE LOCAL PAGE DATA SETS BY
*                                      ONE                           */
         L     @12,PARTPTR(,ASMVTPTR)                              0162
         LH    @11,PARTLCNT(,@12)                                  0162
         BCTR  @11,0                                               0162
         STH   @11,PARTLCNT(,@12)                                  0162
*                     END;          /* LOCAL IS BAD                  */
*                   ELSE            /* NO PAGE DATA SET IS BAD       */
*                     RETURN;                                      0164
*                 END;              /* PLPA, COMMON, OR DUPLEX ARE 0165
*                                      NOT BAD                       */
*             END;                  /* PLPA OR COMMON ARE NOT BAD    */
*         END;                      /* ENTRY POINTER POINTS TO A PART
*                                      ENTRY                         */
         EJECT
*                                                                  0168
*/********************************************************************/
*/********************************************************************/
*/*   A SWAP DATA SET IS BAD                                         */
*/********************************************************************/
*/********************************************************************/
*                                                                  0168
*       /*************************************************************/
*       /*                                                           */
*       /* SINCE THE ENTRY POINTER DOES NOT POINT TO A PART ENTRY, IT*/
*       /* IS ASSUMED TO POINT TO A SART ENTRY. THEREFORE, WRITE     */
*       /* MESSAGE 9 TO THE OPERATOR. ALSO DECREMENT THE TOTAL NUMBER*/
*       /* OF AVAILABLE SWAP SETS BY THE SWAP SET COUNT FOR THE BAD  */
*       /* SWAP DATA SET AS WELL AS ZERO THE SWAP SET COUNT FOR THE  */
*       /* BAD SWAP DATA SET.                                        */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0168
*       ELSE                        /* ENTRY POINTER POINTS TO A SART
*                                      ENTRY                         */
*         DO;                                                      0168
         B     @RC00125                                            0168
@RF00125 DS    0H                                                  0169
*           MSGNUM=NINE;            /* SET MESSAGE NUMBER TO NINE    */
         LA    MSGNUM,9                                            0169
*           SARSETCT=SARSETCT-SREAVLSL;/* DECREMENT THE TOTAL NUMBER
*                                      OF AVAILABLE SWAP SETS BY THE
*                                      NUMBER OF SWAP SETS PROVIDED
*                                      BY THE BAD SWAP DATA SET      */
         L     @12,SARTPTR(,ASMVTPTR)                              0170
         L     @11,SARSETCT(,@12)                                  0170
         SL    @11,SREAVLSL(,ENTRYPTR)                             0170
         ST    @11,SARSETCT(,@12)                                  0170
*           SREAVLSL=ZERO;          /* ZERO THE AVAILABLE SWAP SET 0171
*                                      COUNT FOR THE BAD DATA SET    */
         SLR   @12,@12                                             0171
         ST    @12,SREAVLSL(,ENTRYPTR)                             0171
*         END;                      /* A SWAP DATA SET IS BAD        */
*     END;                          /* A MESSAGE NUMBER WAS NOT    0173
*                                      PROVIDED                      */
         EJECT
*                                                                  0174
*/********************************************************************/
*/********************************************************************/
*/*   A MESSAGE NUMBER IS PROVIDED                                   */
*/********************************************************************/
*/********************************************************************/
*                                                                  0174
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THE MESSAGE NUMBER PROVIDED IS EIGHT, THEN TERMINATE THE   */
*   /* SYSTEM. IF THE MESSAGE NUMBER PROVIDED IS TEN, THEN THE       */
*   /* INDICATED DATA SET (PLPA OR COMMON) IS ASSUMED TO BE FULL.    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0174
*   ELSE                            /* A MESSAGE NUMBER IS PROVIDED  */
*     DO;                                                          0174
         B     @RC00119                                            0174
@RF00119 DS    0H                                                  0175
*       IF MSGNUM=EIGHT THEN                                       0175
         C     MSGNUM,@CF00039                                     0175
         BNE   @RF00175                                            0175
*         CALL TERMSYS;             /* TERMINATE THE SYSTEM          */
         BAL   @14,TERMSYS                                         0176
*       IF MSGNUM=TEN THEN                                         0177
@RF00175 C     MSGNUM,@CF00032                                     0177
         BNE   @RF00177                                            0177
*         FULLFLAG=ON;              /* SET FULL FLAG ON INDICATING 0178
*                                      THAT THE DATA SET IN QUESTION
*                                      IS FULL INSTEAD OF BAD        */
         LA    FULLFLAG,1                                          0178
*     END;                          /* A MESSAGE NUMBER PROVIDED     */
@RF00177 DS    0H                                                  0180
         EJECT
*                                                                  0180
*/********************************************************************/
*/********************************************************************/
*/*   WRITE MESSAGE TO THE OPERATOR AND THEN RETURN TO CALLER        */
*/********************************************************************/
*/********************************************************************/
*                                                                  0180
*   CALL WRITEMSG;                  /* BUILD THE MESSAGE AND WRITE IT
*                                      TO THE OPERATOR               */
@RC00119 BAL   @14,WRITEMSG                                        0180
*   RETURN;                         /* RETURN TO THE CALLER          */
@EL00001 DS    0H                                                  0181
@EF00001 DS    0H                                                  0181
@ER00001 LM    @14,@12,12(@13)                                     0181
         BR    @14                                                 0181
         EJECT
*                                                                  0182
*/********************************************************************/
*/********************************************************************/
*/*   ENTRY POINT FOR ILRTMI00                                       */
*/********************************************************************/
*/********************************************************************/
*                                                                  0182
*ILRMSGSP:                                                         0182
*   ENTRY;                                                         0182
*                                                                  0182
@EP00182 DS    0H                                                  0183
*   /*****************************************************************/
*   /*                                                               */
*   /* OBTAIN POINTER TO THE ASMVT, PLPA PART ENTRY AND COMMON PART  */
*   /* ENTRY.                                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0183
*   ASMVTPTR=CVTASMVT;              /* OBTAIN POINTER TO ASMVT       */
         L     @12,CVTPTR                                          0183
         L     ASMVTPTR,CVTASMVT(,@12)                             0183
*   PLPAPTR=ADDR(PARTENTS(PARTPLPN+1));/* OBTAIN A POINTER TO THE  0184
*                                      PART ENTRY FOR PLPA           */
         L     @12,PARTPTR(,ASMVTPTR)                              0184
         LA    PLPAPTR,PARTENTS(,@12)                              0184
*   COMMPTR=ADDR(PARTENTS(PARTCOMN+1));/* OBTAIN A POINTER TO THE  0185
*                                      PART ENTRY FOR COMMON         */
*                                                                  0185
         LA    COMMPTR,PARTENTS+64(,@12)                           0185
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK THE FOLLOWING FLAGS: ASMNODPX, ASMPLPAF, ASMCOMMF,      */
*   /* PARENUSE AND PAREDSBD OF THE PART ENTRIES FOR PLPA AND COMMON.*/
*   /* IF ANY OF THE ABOVE FLAGS ARE ON, THEN A MESSAGE NEEDS TO BE  */
*   /* ISSUED TO THE OPERATOR. OTHERWISE, NO MESSAGE IS NEEDED SO    */
*   /* RETURN TO ILRTMI00.                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0186
*   IF(ASMNODPX=ON×ASMPLPAF=ON×ASMCOMMF=ON)×(PLPAPTR->PARENUSE=ON× 0186
*       PLPAPTR->PAREDSBD=ON)×(COMMPTR->PARENUSE=ON×COMMPTR->PAREDSBD=
*       ON) THEN                                                   0186
         TM    ASMNODPX(ASMVTPTR),B'00001110'                      0186
         BNZ   @RT00186                                            0186
         TM    PARENUSE(PLPAPTR),B'11000000'                       0186
         BNZ   @RT00186                                            0186
         TM    PARENUSE(COMMPTR),B'11000000'                       0186
         BZ    @RF00186                                            0186
@RT00186 DS    0H                                                  0187
*     DO;                                                          0187
*       TYPE=PAGEDS;                /* SET TYPE FOR A PAGE DATA SET  */
         SLR   TYPE,TYPE                                           0188
*       FULLFLAG=ON;                /* SET FULL FLAG ON INDICATING 0189
*                                      THAT PLPA OR COMMON IS FULL 0189
*                                      INSTEAD OF BAD                */
         LA    FULLFLAG,1                                          0189
         EJECT
*                                                                  0190
*/********************************************************************/
*/********************************************************************/
*/*   OBTAIN SALLOC                                                  */
*/********************************************************************/
*/********************************************************************/
*                                                                  0190
*       RFY                                                        0190
*        (R11,                                                     0190
*         R12,                                                     0190
*         R14,                                                     0190
*         R15) RSTD;                                               0190
*       R15=R13;                    /* SAVE ADDRESS OF ILRTMI00'S  0191
*                                      SAVEAREA                      */
         LR    R15,R13                                             0191
*       GEN REFS(PSALITA) SETS(R11,R12,R13,R14);                   0192
GTSALLOC SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,                      XX
               RELATED=(ASMBUFFERS,ILRMSG00(RLSALLOC))
*       R13=R15;                    /* RESTORE REG 13 WITH ILRTMI00'S
*                                      SAVE AREA ADDRESS             */
         LR    R13,R15                                             0193
*       RFY                                                        0194
*        (R11,                                                     0194
*         R12,                                                     0194
*         R14,                                                     0194
*         R15) UNRSTD;                                             0194
         EJECT
*                                                                  0195
*/********************************************************************/
*/********************************************************************/
*/*    PLPA IS FULL                                                  */
*/********************************************************************/
*/********************************************************************/
*                                                                  0195
*       /*************************************************************/
*       /*                                                           */
*       /* IF PLPA HAS SPILLED INTO COMMON, THEN PLPA IS FULL. HENCE,*/
*       /* WRITE MESSAGE FIVE TO THE OPERATOR. IF COMMON IS ALSO     */
*       /* FULL, THEN ALSO WRITE MESSAGE 10 TO THE OPERATOR. IN THIS */
*       /* CASE, MESSAGE 10 WILL REFER TO COMMON.                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0195
*       IF ASMPLPAS=ON THEN                                        0195
         TM    ASMPLPAS(ASMVTPTR),B'00000001'                      0195
         BNO   @RF00195                                            0195
*         DO;                                                      0196
*           MSGNUM=FIVE;            /* SET MESSAGE NUMBER TO FIVE    */
         LA    MSGNUM,5                                            0197
*           CALL WRITEMSG;          /* WRITE MESSAGE 5 TO THE      0198
*                                      OPERATOR                      */
         BAL   @14,WRITEMSG                                        0198
*           IF ASMCOMMF=ON THEN                                    0199
         TM    ASMCOMMF(ASMVTPTR),B'00000010'                      0199
         BNO   @RF00199                                            0199
*             DO;                                                  0200
*               MSGNUM=TEN;         /* SET MESSAGE NUMBER TO TEN     */
         LA    MSGNUM,10                                           0201
*               ENTRYPTR=COMMPTR;   /* SET ENTRY POINTER TO ADDRESS
*                                      OF THE PART ENTRY FOR COMMON  */
         LR    ENTRYPTR,COMMPTR                                    0202
*               CALL WRITEMSG;      /* BUILD MESSAGE 10 AND WRITE IT
*                                      TO THE OPERATOR               */
         BAL   @14,WRITEMSG                                        0203
*             END;                  /* COMMON IS FULL                */
*         END;                      /* PLPA SPILLED INTO COMMON      */
         EJECT
*                                                                  0206
*/********************************************************************/
*/********************************************************************/
*/*    COMMON IS FULL                                                */
*/********************************************************************/
*/********************************************************************/
*                                                                  0206
*       ELSE                        /* PLPA HAS NOT SPILLED INTO   0206
*                                      COMMON                        */
*                                                                  0206
*         /***********************************************************/
*         /*                                                         */
*         /* IF COMMON IS FULL, THEN WRITE MESSAGE 6 TO THE OPERATOR.*/
*         /* IF PLPA IS ALSO FULL, THEN ALSO WRITE MESSAGE 10 TO THE */
*         /* OPERATOR. IN THIS CASE, MESSAGE 10 WILL REFER TO PLPA.  */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0206
*         DO;                                                      0206
         B     @RC00195                                            0206
@RF00195 DS    0H                                                  0207
*           IF ASMCOMMF=ON THEN                                    0207
         TM    ASMCOMMF(ASMVTPTR),B'00000010'                      0207
         BNO   @RF00207                                            0207
*             DO;                                                  0208
*               MSGNUM=SIX;         /* SET MESSAGE NUMBER TO 6       */
         LA    MSGNUM,6                                            0209
*               CALL WRITEMSG;      /* WRITE MESSAGE 6 TO THE      0210
*                                      OPERATOR                      */
         BAL   @14,WRITEMSG                                        0210
*               IF ASMPLPAF=ON THEN                                0211
         TM    ASMPLPAF(ASMVTPTR),B'00000100'                      0211
         BNO   @RF00211                                            0211
*                 DO;                                              0212
*                   MSGNUM=TEN;     /* SET MESSAGE NUMBER TO TEN     */
         LA    MSGNUM,10                                           0213
*                   ENTRYPTR=PLPAPTR;/* SET ENTRY POINTER TO ADDRESS
*                                      OF THE PART ENTRY FOR PLPA    */
         LR    ENTRYPTR,PLPAPTR                                    0214
*                   CALL WRITEMSG;  /* BUILD MESSAGE 10 AND WRITE IT
*                                      TO THE OPERATOR               */
         BAL   @14,WRITEMSG                                        0215
*                 END;              /* PLPA IS FULL                  */
*             END;                  /* COMMON IS FULL                */
@RF00211 DS    0H                                                  0218
*         END;                                                     0218
@RF00207 DS    0H                                                  0219
         EJECT
*                                                                  0219
*/********************************************************************/
*/********************************************************************/
*/*    PLPA IS UNUSABLE OR COMMON IS UNUSABLE                        */
*/********************************************************************/
*/********************************************************************/
*                                                                  0219
*       /*************************************************************/
*       /*                                                           */
*       /* IF PLPA IS BAD OR NOT IN USE, THEN WRITE MESSAGES 9 AND 10*/
*       /* TO THE OPERATOR WITH BOTH MESSAGES REFERING PLPA. IF      */
*       /* COMMON IS BAD OR NOT IN USE, THEN WRITE MESSAGES 9 AND 10 */
*       /* TO THE OPERATOR WITH BOTH MESSAGES REFERING TO COMMON.    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0219
*       FULLFLAG=OFF;               /* SET FULL FLAG OFF INDICATING
*                                      THAT PLPA OR COMMON IS BAD  0219
*                                      INSTEAD OF FULL               */
@RC00195 SLR   FULLFLAG,FULLFLAG                                   0219
*       DO ENTRYPTR=PLPAPTR TO COMMPTR BY LENGTH(PARTENT);         0220
         LR    ENTRYPTR,PLPAPTR                                    0220
         B     @DE00220                                            0220
@DL00220 DS    0H                                                  0221
*         IF ENTRYPTR->PARENUSE=ON×ENTRYPTR->PAREDSBD=ON THEN      0221
         TM    PARENUSE(ENTRYPTR),B'11000000'                      0221
         BZ    @RF00221                                            0221
*           DO;                                                    0222
*             MSGNUM=NINE;          /* SET MESSAGE NUMBER TO 9       */
         LA    MSGNUM,9                                            0223
*             CALL WRITEMSG;        /* BUILD MESSAGE 9 AND WRITE IT
*                                      TO THE OPERATOR               */
         BAL   @14,WRITEMSG                                        0224
*             MSGNUM=TEN;           /* SET MESSAGE NUMBER TO 10      */
         LA    MSGNUM,10                                           0225
*             CALL WRITEMSG;        /* BUILD MESSAGE 10 AND WRITE IT
*                                      TO THE OPERATOR               */
         BAL   @14,WRITEMSG                                        0226
*           END;                                                   0227
*       END;                                                       0228
@RF00221 AL    ENTRYPTR,@CF01205                                   0228
@DE00220 CR    ENTRYPTR,COMMPTR                                    0228
         BNH   @DL00220                                            0228
         EJECT
*                                                                  0229
*/********************************************************************/
*/********************************************************************/
*/*   DUPLEX IS FULL OR UNUSABLE                                     */
*/********************************************************************/
*/********************************************************************/
*                                                                  0229
*       /*************************************************************/
*       /*                                                           */
*       /* IF DUPLEXING HAS BEEN SUSPENDED, THEN DUPLEX IS EITHER    */
*       /* FULL OR BAD. THEREFORE, WRITE MESSAGE 7 TO THE OPERATOR.  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0229
*       IF ASMNODPX=ON THEN                                        0229
         TM    ASMNODPX(ASMVTPTR),B'00001000'                      0229
         BNO   @RF00229                                            0229
*         DO;                                                      0230
*           MSGNUM=SEVEN;           /* SET MESSAGE NUMBER TO 7       */
         LA    MSGNUM,7                                            0231
*           ENTRYPTR=ADDR(PARTENTS(PARTDUPN+1));/* OBTAIN A POINTER
*                                      TO THE PART ENTRY FOR DUPLEX  */
         L     ENTRYPTR,PARTPTR(,ASMVTPTR)                         0232
         LA    ENTRYPTR,PARTENTS+128(,ENTRYPTR)                    0232
*           CALL WRITEMSG;          /* BUILD MESSAGE 7 AND WRITE IT
*                                      TO THE OPERATOR               */
         BAL   @14,WRITEMSG                                        0233
*         END;                                                     0234
         EJECT
*                                                                  0235
*/********************************************************************/
*/********************************************************************/
*/*   RELEASE SALLOC AND RETURN TO ILRTMI00                          */
*/********************************************************************/
*/********************************************************************/
*                                                                  0235
*       RFY                                                        0235
*        (R11,                                                     0235
*         R12,                                                     0235
*         R14,                                                     0235
*         R15) RSTD;                                               0235
@RF00229 DS    0H                                                  0236
*       R15=R13;                    /* SAVE ADDRESS OF ILRTMI00'S  0236
*                                      SAVEAREA                      */
         LR    R15,R13                                             0236
*       GEN REFS(PSALITA) SETS(R11,R12,R13,R14);                   0237
RLSALLOC SETLOCK RELEASE,TYPE=SALLOC,                                 XX
               RELATED=(ASMBUFFERS,ILRMSG00(GTSALLOC))
*       R13=R15;                    /* RESTORE REG 13 WITH ILRTMI00'S
*                                      SAVE AREA ADDRESS             */
         LR    R13,R15                                             0238
*       RFY                                                        0239
*        (R11,                                                     0239
*         R12,                                                     0239
*         R14,                                                     0239
*         R15) UNRSTD;                                             0239
*     END;                                                         0240
*   RFY                                                            0241
*    (R15) RSTD;                                                   0241
@RF00186 DS    0H                                                  0242
*   GEN REFS(R13) SETS(R15);                                       0242
         SLR   R15,R15
         ST    R15,16(R13)       /* SET RETURN CODE TO ZERO         */
*   RFY                                                            0243
*    (R15) UNRSTD;                                                 0243
*   RETURN;                         /* RETURN TO ILRTMI00            */
         B     @EL00001                                            0244
         EJECT
*                                                                  0245
*/********************************************************************/
*/*                                                                  */
*/*   WRITEMSG - BUILD SPECIFIED MESSAGE AND WRITE IT TO THE         */
*/*              OPERATOR                                            */
*/*                                                                  */
*/*   INPUT =   R3 - PTR TO ASMVT                                    */
*/*             R4 - MESSAGE NUMBER                                  */
*/*             R5 - ENTRY POINTER                                   */
*/*             R6 - TYPE OF ENTRY                                   */
*/*                                                                  */
*/*   PROCESS = SINCE MESSAGE 5 AND 6 ARE CONSTANT, THEY DO NOT      */
*/*             REQUIRE A BUFFER NOR SPECIAL PROCESSING. THEREFORE,  */
*/*             JUST SIMPLY WRITE MESSAGE 5 OR 6 TO THE OPERATOR     */
*/*             USING THE WTO OPTION OF THE RECORD FACILITY AND      */
*/*             THEN RETURN TO THE CALLER.                           */
*/*             MESSAGE 7,9, AND 10 DO REQUIRE A BUFFER. THEREFORE,  */
*/*             DETERMINE WHICH BUFFER IS TO BE USED. MOVE THE BASE  */
*/*             MESSAGE INTO THAT BUFFER AND FILL IN THE VARIABLE    */
*/*             INFORMATION. WRITE THE MESSAGE TO THE OPERATOR USING */
*/*             THE WTO OPTION OF THE RECORD FACILITY AND THEN       */
*/*             RETURN TO THE CALLER.                                */
*/*                                                                  */
*/*   OUTPUT =  A MESSAGE IS ISSUED TO THE OPERATOR                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0245
*WRITEMSG:                                                         0245
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0245
WRITEMSG DS    0H                                                  0246
         EJECT
*                                                                  0246
*/********************************************************************/
*/********************************************************************/
*/*   MESSAGE 5 OR 6 ?   IF SO, NO BUFFER IS NEEDED.                 */
*/********************************************************************/
*/********************************************************************/
*                                                                  0246
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THE MESSAGE NUMBER IS 5 OR 6, JUST SIMPLY SET THE BUFFER   */
*   /* POINTER POINTING TO THE WTO MESSAGE. SINCE THESE MESSAGES ARE */
*   /* CONSTANT, THERE IS NO NEED TO WASTE ONE OF ASM'S MESSAGE      */
*   /* BUFFERS. WRITE THE MESSAGE TO THE OPERATOR AND THEN RETURN TO */
*   /* THE CALLER.                                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0246
*   IF MSGNUM=FIVE×MSGNUM=SIX THEN                                 0246
         C     MSGNUM,@CF00941                                     0246
         BE    @RT00246                                            0246
         C     MSGNUM,@CF00915                                     0246
         BNE   @RF00246                                            0246
@RT00246 DS    0H                                                  0247
*     BUFPTR=MSGPTR(MSGNUM-4);                                     0247
         LR    @12,MSGNUM                                          0247
         SLA   @12,2                                               0247
         L     BUFPTR,MSGPTR-20(@12)                               0247
         EJECT
*                                                                  0248
*/********************************************************************/
*/********************************************************************/
*/*   MESSAGE 7,9 OR 10 ?  IF SO, A BUFFER IS NEEDED.                */
*/********************************************************************/
*/********************************************************************/
*                                                                  0248
*   ELSE                            /* MESSAGE NUMBER IS NOT 5 OR 6  */
*                                                                  0248
*     /***************************************************************/
*     /*                                                             */
*     /* IF THE MESSAGE NUMBER IS NOT 5 OR 6, THEN ONE OF ASM'S      */
*     /* MESSAGE BUFFERS IS NEEDED. IF THE CURRENT BUFFER HAPPENS TO */
*     /* BE THE LAST BUFFER THEN THE NEXT AVAILABLE BUFFER IS THE    */
*     /* FIRST PHYSICAL BUFFER. OTHERWISE, THE NEXT AVAILABLE BUFFER */
*     /* IS THE NEXT PHYSICAL BUFFER. UPDATE THE CURRENT BUFFER      */
*     /* POINTER APPROPRIATELY. MOVE THE APPROPRIATE BASE MESSAGE    */
*     /* INTO THE NEW CURRENT BUFFER.                                */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0248
*     DO;                                                          0248
         B     @RC00246                                            0248
@RF00246 DS    0H                                                  0249
*       IF CURBUFP=LASTBUFP THEN                                   0249
         L     @12,ASMMSGBF(,ASMVTPTR)                             0249
         CLC   CURBUFP(4,@12),LASTBUFP(@12)                        0249
         BNE   @RF00249                                            0249
*         CURBUFP=FRSTBUFP;         /* SET CURRENT BUFFER POINTER  0250
*                                      POINTING TO THE FIRST BUFFER  */
         L     @11,FRSTBUFP(,@12)                                  0250
         ST    @11,CURBUFP(,@12)                                   0250
*       ELSE                                                       0251
*         CURBUFP=CURBUFP+LENGTH(MSGBUF);/* SET CURRENT BUFFER     0251
*                                      POINTER POINTING TO THE NEXT
*                                      PHYSICAL BUFFER               */
         B     @RC00249                                            0251
@RF00249 L     @12,ASMMSGBF(,ASMVTPTR)                             0251
         LA    @11,80                                              0251
         AL    @11,CURBUFP(,@12)                                   0251
         ST    @11,CURBUFP(,@12)                                   0251
*       BUFPTR=CURBUFP;             /* SET BUFFER POINTER            */
@RC00249 L     @12,ASMMSGBF(,ASMVTPTR)                             0252
         L     BUFPTR,CURBUFP(,@12)                                0252
*       MSGBUF=MSGPTR(MSGNUM-4)->WTOMSG;/* MOVE BASE MESSAGE INTO THE
*                                      CURRENT BUFFER                */
         LR    @12,MSGNUM                                          0253
         SLA   @12,2                                               0253
         L     @12,MSGPTR-20(@12)                                  0253
         MVC   MSGBUF(80,BUFPTR),WTOMSG(@12)                       0253
         EJECT
*                                                                  0254
*/********************************************************************/
*/********************************************************************/
*/*   MESSAGE 7 ?                                                    */
*/********************************************************************/
*/********************************************************************/
*                                                                  0254
*       /*************************************************************/
*       /*                                                           */
*       /* IF THE MESSAGE NUMBER IS 7 AND DUPLEX IS NOT IN USE OR    */
*       /* BAD, THEN CHANGE THE BASE MESSAGE. OTHERWISE IF DUPLEX IS */
*       /* USABLE, THEN IT MUST BE FULL AND THEREFORE THE BASE       */
*       /* MESSAGE IS O.K.                                           */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0254
*       IF MSGNUM=SEVEN THEN                                       0254
         C     MSGNUM,@CF01213                                     0254
         BNE   @RF00254                                            0254
*         IF PARENUSE=ON×PAREDSBD=ON THEN                          0255
         TM    PARENUSE(ENTRYPTR),B'11000000'                      0255
         BZ    @RF00255                                            0255
*           MSGDISP=BAD;            /* CHANGE DATA SET DISPOSITION 0256
*                                      FROM FULL TO BAD              */
         MVC   MSGDISP+4(4,BUFPTR),@CC02368                        0256
*         ELSE                                                     0257
*           ;                                                      0257
@RF00255 DS    0H                                                  0258
         EJECT
*                                                                  0258
*/********************************************************************/
*/********************************************************************/
*/*   MESSAGE 9 ?                                                    */
*/********************************************************************/
*/********************************************************************/
*                                                                  0258
*       ELSE                        /* MESSAGE NUMBER IS NOT 7       */
*                                                                  0258
*         /***********************************************************/
*         /*                                                         */
*         /* IF THE MESSAGE NUMBER IS 9, THEN PLACE THE VOLUME ID    */
*         /* INTO THE BASE MESSAGE. DETERMINE WHETHER THE DATA SET IS*/
*         /* A PAGE/SWAP DATA SET AND CHANGE THE BASE MESSAGE IF     */
*         /* NECESSARY. IF THE DATA SET IS A PAGE DATA SET, THEN     */
*         /* DETERMINE WHICH ONE AND IF NECESSARY CHANGE THE BASE    */
*         /* MESSAGE.                                                */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0258
*         DO;                                                      0258
         B     @RC00254                                            0258
@RF00254 DS    0H                                                  0259
*           IF MSGNUM=NINE THEN                                    0259
         C     MSGNUM,@CF02381                                     0259
         BNE   @RF00259                                            0259
*             DO;                                                  0260
*               MSGVOLID=UCBVOLI;   /* PLACE THE VOLUME ID INTO THE
*                                      BASE MESSAGE                  */
         LA    @12,4                                               0261
         ALR   @12,BUFPTR                                          0261
         L     @11,UCBPTR(,ENTRYPTR)                               0261
         MVC   MSGVOLID(6,@12),UCBVOLI(@11)                        0261
*               IF TYPE=PAGEDS THEN                                0262
         LTR   TYPE,TYPE                                           0262
         BNZ   @RF00262                                            0262
*                 DO;                                              0263
*                   IF PAREPLPA=OFF /* DEFAULT NAME IS PLPA          */
*                     THEN                                         0264
         TM    PAREPLPA(ENTRYPTR),B'10000000'                      0264
         BNZ   @RF00264                                            0264
*                     IF PARECOMM=ON THEN                          0265
         TM    PARECOMM(ENTRYPTR),B'01000000'                      0265
         BNO   @RF00265                                            0265
*                       MSGNAME=COMMONDS;/* CHANGE DATA SET NAME FROM
*                                      PLPA TO COMMON                */
         MVC   MSGNAME(6,@12),@CC02372                             0266
*                     ELSE                                         0267
*                       IF PARELOCL=ON THEN                        0267
         B     @RC00265                                            0267
@RF00265 TM    PARELOCL(ENTRYPTR),B'00010000'                      0267
         BNO   @RF00267                                            0267
*                         MSGNAME=LOCALDS;/* CHANGE DATA SET NAME  0268
*                                      FROM PLPA TO LOCAL            */
         MVC   MSGNAME+4(6,BUFPTR),@CC02378                        0268
*                       ELSE                                       0269
*                         RETURN;   /* RETURN TO CALLER BECAUSE TYPE
*                                      OR ENTRYPTR IS INVALID        */
*                 END;              /* ENTRY POINTER POINTS TO A PART
*                                      ENTRY                         */
*               ELSE                /* ENTRY POINTER POINTS TO A SART
*                                      ENTRY                         */
*                 DO;                                              0271
         B     @RC00262                                            0271
@RF00262 DS    0H                                                  0272
*                   MSGNAME=BLANKS; /* SET DATA SET NAME TO BLANKS   */
         LA    @12,4                                               0272
         ALR   @12,BUFPTR                                          0272
         MVC   MSGNAME(6,@12),@CC02370                             0272
*                   MSGTYPE=SWAP;   /* CHANGE DATA SET TYPE FROM PAGE
*                                      TO SWAP                       */
         MVC   MSGTYPE(4,@12),@CC02391                             0273
*                 END;              /* ENTRY POINTER POINTS TO A SART
*                                      ENTRY                         */
*             END;                  /* MESSAGE NUMBER IS 9           */
         EJECT
*                                                                  0276
*/********************************************************************/
*/********************************************************************/
*/*   MESSAGE 10 ?                                                   */
*/********************************************************************/
*/********************************************************************/
*                                                                  0276
*           ELSE                    /* MESSAGE NUMBER IS NOT 9       */
*                                                                  0276
*             /*******************************************************/
*             /*                                                     */
*             /* IF THE MESSAGE NUMBER IS 10, THEN DETERMINE IF THE  */
*             /* DATA SET IS PLPA OR COMMON OR IF THE DATA SET IS BAD*/
*             /* OR FULL AND CHANGE THE BASE MESSAGE IF NECESSARY    */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0276
*             IF MSGNUM=TEN THEN                                   0276
         B     @RC00259                                            0276
@RF00259 C     MSGNUM,@CF00032                                     0276
         BNE   @RF00276                                            0276
*               DO;                                                0277
*                 IF PAREPLPA=OFF   /* DEFAULT NAME IS PLPA          */
*                   THEN                                           0278
         TM    PAREPLPA(ENTRYPTR),B'10000000'                      0278
         BNZ   @RF00278                                            0278
*                   IF PARECOMM=ON THEN                            0279
         TM    PARECOMM(ENTRYPTR),B'01000000'                      0279
         BNO   @RF00279                                            0279
*                     MSGNAME=COMMONDS;/* CHANGE DATA SET NAME FROM
*                                      PLPA TO COMMON                */
         MVC   MSGNAME+4(6,BUFPTR),@CC02372                        0280
*                   ELSE                                           0281
*                     RETURN;       /* RETURN TO CALLER BECAUSE    0281
*                                      ENTRYPTR IS INVALID           */
*                 IF FULLFLAG=OFF THEN                             0282
@RF00278 C     FULLFLAG,@CF02383                                   0282
         BNE   @RF00282                                            0282
*                   MSGDISP=BAD;    /* CHANGE DATA SET DISPOSITION 0283
*                                      FROM FULL TO BAD              */
         MVC   MSGDISP+4(4,BUFPTR),@CC02368                        0283
*               END;                /* MESSAGE NUMBER IS 10          */
*             ELSE                  /* MESSAGE NUMBER IS NOT 10      */
*               RETURN;             /* RETURN TO CALLER BECAUSE    0285
*                                      MSGNUM IS INVALID             */
*         END;                      /* MESSAGE NUMBER IS 9 OR 10     */
@RC00276 DS    0H                                                  0286
@RC00259 DS    0H                                                  0287
*     END;                          /* MESSAGE NUMBER IS 7, 9, OR 10 */
@RC00254 DS    0H                                                  0288
         EJECT
*                                                                  0288
*/********************************************************************/
*/********************************************************************/
*/*   WRITE THE MESSAGE TO THE OPERATOR AND RETURN                   */
*/********************************************************************/
*/********************************************************************/
*                                                                  0288
*   /*****************************************************************/
*   /*                                                               */
*   /* USE THE ASYNCHRONOUS RECORDING FACILITY TO WRITE THE MESSAGE  */
*   /* TO THE OPERATOR AND THEN RETURN TO THE CALLER                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0288
*   RFY                                                            0288
*    (R11,                                                         0288
*     R12,                                                         0288
*     R14) RSTD;                                                   0288
@RC00246 DS    0H                                                  0289
*   R11=R13;                        /* SAVE CALLER'S SAVE AREA     0289
*                                      ADDRESS                       */
         LR    R11,R13                                             0289
*   R12=R14;                        /* SAVE RETURN ADDRESS           */
         LR    R12,R14                                             0290
*   R13=ADDR(ASMWKSA7);             /* PROVIDE A SAVE AREA FOR RECORD
*                                      FACILITY                      */
         LA    R13,ASMWKSA7(,ASMVTPTR)                             0291
*   GEN REFS(BUFPTR,CVTMAP,CVTRECRQ,FLCCVT);                       0292
         RECORD TYPE=WTO,RCVRY=SETFRR,DATAADR=(BUFPTR),LENGTH=80,     XX
               BUFFER=OPT
*   R13=R11;                        /* RESTORE SAVE AREA ADDRESS     */
         LR    R13,R11                                             0293
*   R14=R12;                        /* RESTORE RETURN ADDRESS        */
         LR    R14,R12                                             0294
*   RFY                                                            0295
*    (R11,                                                         0295
*     R12,                                                         0295
*     R14) UNRSTD;                                                 0295
*   RETURN;                         /* RETURN TO CALLER              */
@EL00002 DS    0H                                                  0296
@EF00002 DS    0H                                                  0296
@ER00002 BR    @14                                                 0296
*   END WRITEMSG;                                                  0297
         B     @EL00002                                            0297
         EJECT
*                                                                  0298
*/********************************************************************/
*/*                                                                  */
*/*   TERMSYS - TERMINATE THE SYSTEM                                 */
*/*                                                                  */
*/*   INPUT =    R3 - PTR TO ASMVT                                   */
*/*              R5 - ENTRY POINTER                                  */
*/*                                                                  */
*/*   PROCESS = ISSUE A SETFRR TO ESTABLISH RECOVERY FOR THIS        */
*/*             TERMINATION ROUTINE IN ORDER TO GIVE ASM A SECOND    */
*/*             CHANCE TO TERMINATE THE SYSTEM. IF THE DSBD FLAG     */
*/*             OR THE NUSE FLAG OF THE PARTE IS ON, THEN SET THE    */
*/*             WAIT STATE CODE TO X'02E'. OTHERWISE, SET IT TO      */
*/*             X'03C'. PLACE WAIT STATE PSW INTO THE FRRPARM AREA.  */
*/*             MOVE BASE MESSAGE INTO THE TERMINATION BUFFER AND    */
*/*             THEN FILL IN THE VARIABLE INFORMATION. INITIALIZE    */
*/*             LOG REC BUFFER. PLACE REAL ADDRESS OF THE UPDATED    */
*/*             WTO MESSAGE AND OF THE LOG REC BUFFER INTO THE       */
*/*             SYSTEM TERMINATION PARAMETER LIST. PLACE THE REAL    */
*/*             ADDRESS OF THE PARAMETER LIST INTO REG 1 AND THEN    */
*/*             ENTER IGFPTERM VIA A LPSW IN ORDER TO TERMINATE      */
*/*             THE SYSTEM. A LPSW IS USED IN ORDER TO TURN OFF THE  */
*/*             DAT BIT.                                             */
*/*                                                                  */
*/*   OUTPUT =  NONE                                                 */
*/*                                                                  */
*/********************************************************************/
*                                                                  0298
*TERMSYS:                                                          0298
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0298
TERMSYS  DS    0H                                                  0299
         EJECT
*                                                                  0299
*/********************************************************************/
*/********************************************************************/
*/*   ESTABLISH RECOVERY                                             */
*/********************************************************************/
*/********************************************************************/
*                                                                  0299
*   /*****************************************************************/
*   /*                                                               */
*   /* ESTABLISH RECOVERY FOR THIS ROUTINE IN ORDER TO GIVE ASM A    */
*   /* SECOND CHANCE TO TERMINATE THE SYSTEM                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0299
*   RFY                                                            0299
*    (R11,                                                         0299
*     R12,                                                         0299
*     FRRADDR,                                                     0299
*     FRRPARM@) RSTD;                                              0299
*   FRRADDR=ADDR(ILRMSG01);                                        0300
         LA    FRRADDR,ILRMSG01                                    0300
*   GEN REFS(FRRADDR,FRRSCURR,FRRSELEN,FRRSENTR,FRRSFRRA,FRRSLAST, 0301
*       FRRSPARM,PSACSTK,PSALSFCC) SETS(R11,R12,FRRPARM@);         0301
          SETFRR A,FRRAD=(FRRADDR),PARMAD=(FRRPARM@),WRKREGS=(R11,R12)
*   RFY                                                            0302
*    (R11,                                                         0302
*     R12,                                                         0302
*     FRRADDR) UNRSTD;                                             0302
*                                                                  0302
*   /*****************************************************************/
*   /*                                                               */
*   /* PLACE THE ADDRESS OF THE APPROPRIATE WAIT STATE PSW INTO THE  */
*   /* FRRPARM AREA.                                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0303
*   IF PARENUSE=ON×PAREDSBD=ON THEN                                0303
         TM    PARENUSE(ENTRYPTR),B'11000000'                      0303
         BZ    @RF00303                                            0303
*     DO;                                                          0304
*       FRRWPSW@=ADDR(WPSW02E);     /* PLACE THE ADDRESS OF THE PSW
*                                      WITH WAIT STATE 02E INTO THE
*                                      FRRPARM AREA                  */
         LA    @12,WPSW02E                                         0305
         ST    @12,FRRWPSW@(,FRRPARM@)                             0305
*       WAITCODE=WCODE02E;                                         0306
         L     WAITCODE,WCODE02E                                   0306
*     END;                                                         0307
*   ELSE                                                           0308
*     DO;                                                          0308
         B     @RC00303                                            0308
@RF00303 DS    0H                                                  0309
*       FRRWPSW@=ADDR(WPSW03C);     /* PLACE THE ADDRESS OF THE PSW
*                                      WITH WAIT STATE 03C INTO THE
*                                      FRRPARM AREA                  */
         LA    @12,WPSW03C                                         0309
         ST    @12,FRRWPSW@(,FRRPARM@)                             0309
*       WAITCODE=WCODE03C;                                         0310
         L     WAITCODE,WCODE03C                                   0310
*     END;                                                         0311
*   RFY                                                            0312
*    (FRRPARM@) UNRSTD;                                            0312
@RC00303 DS    0H                                                  0313
         EJECT
*                                                                  0313
*/********************************************************************/
*/********************************************************************/
*/*   BUILD TERMINATION MESSAGE                                      */
*/********************************************************************/
*/********************************************************************/
*                                                                  0313
*   BUFPTR=ADDR(TERMMSG);                                          0313
         L     @12,ASMMSGBF(,ASMVTPTR)                             0313
         LA    BUFPTR,TERMMSG(,@12)                                0313
*   TERMMSG=WTO08W;                 /* MOVE BASE TERMINATION MESSAGE
*                                      INTO TERMINATION BUFFER       */
         MVC   TERMMSG(80,@12),WTO08W                              0314
*   MSGVOLID=UCBVOLI;               /* PLACE VOLUME ID INTO BASE   0315
*                                      MESSAGE                       */
         LA    @12,4                                               0315
         ALR   @12,BUFPTR                                          0315
         L     @11,UCBPTR(,ENTRYPTR)                               0315
         MVC   MSGVOLID(6,@12),UCBVOLI(@11)                        0315
*   IF PAREPLPA=OFF                 /* DEFAULT NAME IS PLPA          */
*     THEN                                                         0316
         TM    PAREPLPA(ENTRYPTR),B'10000000'                      0316
         BNZ   @RF00316                                            0316
*     IF PARECOMM=ON THEN                                          0317
         TM    PARECOMM(ENTRYPTR),B'01000000'                      0317
         BNO   @RF00317                                            0317
*       MSGNAME=COMMONDS;           /* CHANGE DATA SET NAME FROM PLPA
*                                      TO COMMON                     */
         MVC   MSGNAME(6,@12),@CC02372                             0318
*     ELSE                                                         0319
*       IF PAREDPLX=ON THEN                                        0319
         B     @RC00317                                            0319
@RF00317 TM    PAREDPLX(ENTRYPTR),B'00100000'                      0319
         BNO   @RF00319                                            0319
*         MSGNAME=DUPLEXDS;         /* CHANGE DATA SET NAME FROM PLPA
*                                      TO DUPLEX                     */
         MVC   MSGNAME+4(6,BUFPTR),@CC02374                        0320
*       ELSE                                                       0321
*         MSGNAME=LOCALDS;          /* CHANGE DATA SET NAME FROM PLPA
*                                      TO LOCAL                      */
         B     @RC00319                                            0321
@RF00319 MVC   MSGNAME+4(6,BUFPTR),@CC02378                        0321
         EJECT
*                                                                  0322
*/********************************************************************/
*/********************************************************************/
*/*   BUILD SYSTEM TERMINATION LOG REC BUFFER                        */
*/********************************************************************/
*/********************************************************************/
*                                                                  0322
*   LRBPTR=ADDR(SYSTLRB);           /* INITIALIZE LRB POINTER        */
@RC00319 DS    0H                                                  0322
@RC00317 DS    0H                                                  0322
@RF00316 L     @12,ASMMSGBF(,ASMVTPTR)                             0322
         LA    LRBPTR,SYSTLRB(,@12)                                0322
*   LRB=''B;                        /* CLEAR LRB                     */
         XC    LRB(24,LRBPTR),LRB(LRBPTR)                          0323
*   LRBHTYPE=LRBHTER;               /* INIDICATE LRB IS A SYSTEM   0324
*                                      TERMINATION RECORD            */
         MVI   LRBHTYPE(LRBPTR),X'81'                              0324
*   LRBTLNH=LENGTH(SYSTLRB);        /* SET LENGTH FIELD              */
         MVC   LRBTLNH(4,LRBPTR),@CF00083                          0325
*   LRBTWSC=WAITCODE;               /* FILL IN WAIT STATE CODE       */
         ST    WAITCODE,LRBTWSC(,LRBPTR)                           0326
         EJECT
*                                                                  0327
*/********************************************************************/
*/********************************************************************/
*/*   BUILD SYSTEM TERMINATION PARAMETER LIST -- ENTER IGFPTERM      */
*/********************************************************************/
*/********************************************************************/
*                                                                  0327
*   RFY                                                            0327
*    (R0,                                                          0327
*     R1,                                                          0327
*     R15) RSTD;                                                   0327
*   R15=ASMMSGBF;                                                  0328
         LR    R15,@12                                             0328
*   GEN REFS(R15,TERMMSG,SYSTLRB) SETS(R0,R1);                     0329
         LRA   R0,TERMMSG(,R15) /* OBTAIN REAL ADDRESS OF TERMINATION XX
                                   MESSAGE                          */
         LRA   R1,SYSTLRB(,R15) /* OBTAIN REAL ADDRESS OF TERMINATION XX
                                   LRB                              */
*   STWTO@=R0;                      /* PLACE REAL ADDRESS OF       0330
*                                      TERMINATION MESSAGE INTO    0330
*                                      SYSTEM TERMINATION PARAMETER
*                                      LIST                          */
         L     @14,ASMMSGBF(,ASMVTPTR)                             0330
         ST    R0,STWTO@(,@14)                                     0330
*   STLRB@=R1;                      /* PLACE REAL ADDRESS OF       0331
*                                      TERMINATION LRB INTO SYSTEM 0331
*                                      TERMINATION PARAMETER LIST    */
         ST    R1,STLRB@(,@14)                                     0331
*   GEN REFS(R15,SYSTERPL) SETS(R1);                               0332
         LRA   R1,SYSTERPL(,R15) /* PLACE REAL REAL ADDRESS OF SYSTEM XX
                                    TERMINATION PARAMETER LIST INTO   XX
                                    REG 1                           */
*   LPSW(TERMPSW);                  /* ENTER IGFPTERM                */
         LPSW  TERMPSW                                             0333
*   RFY                                                            0334
*    (R0,                                                          0334
*     R1,                                                          0334
*     R15) UNRSTD;                                                 0334
*   END TERMSYS;                                                   0335
@EL00003 DS    0H                                                  0335
@EF00003 DS    0H                                                  0335
@ER00003 BR    @14                                                 0335
         EJECT
*                                                                  0336
*/********************************************************************/
*/*                                                                  */
*/*   ILRMSG01 - RECOVERY FOR TERMSYS                                */
*/*                                                                  */
*/*   INPUT =   R0 - PTR TO FRR WORK AREA                            */
*/*             R5 - PTR TO SDWA                                     */
*/*                                                                  */
*/*   PROCESS = OBTAIN THE ADDRESS OF THE WAIT STATE PSW AND THEN    */
*/*             LOAD THAT PSW.                                       */
*/*                                                                  */
*/*   OUTPUT =  NONE                                                 */
*/*                                                                  */
*/********************************************************************/
*                                                                  0336
*ILRMSG01:                                                         0336
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0336
ILRMSG01 DS    0H                                                  0337
*   RFY                                                            0337
*    (SDWAPTR) RSTD;                                               0337
*   RFY                                                            0338
*     FRRPARM BASED(SDWAPARM);                                     0338
*   LPSW(WAITPSW);                  /* ENTER WAIT STATE              */
         L     @12,SDWAPARM(,SDWAPTR)                              0339
         L     @12,FRRWPSW@(,@12)                                  0339
         LPSW  WAITPSW(@12)                                        0339
*   RFY                                                            0340
*    (SDWAPTR) UNRSTD;                                             0340
*   END ILRMSG01;                                                  0341
@EL00004 DS    0H                                                  0341
@EF00004 DS    0H                                                  0341
@ER00004 BR    @14                                                 0341
*                                                                  0342
*/********************************************************************/
*/*                                                                  */
*/*   CLEARWTQ - MARK AIA'S, FREE IOE'S AND SCHEDULE ILRPTM          */
*/*                                                                  */
*/*   INPUT =    R3 - PTR TO ASMVT                                   */
*/*              R5 - PART ENTRY POINTER                             */
*/*                                                                  */
*/*   PROCESS = OBTAIN THE ASM CLASS LOCK FOR THE PART WRITE QUEUES. */
*/*             LOOP THRU THE IOE'S ON THE WRITE QUEUE ASSOCIATED    */
*/*             WITH THE PART ENTRY PROVIDED. APPROPRIATELY MARK     */
*/*             EACH AIA ASSOCIATED WITH THE PART ENTRY PROVIDED. IF */
*/*             THE AIA COUNT OF OUTSTANDING WRITE OPERATIONS FOR A  */
*/*             DUPLEXED WRITE OPERATION IS EQUAL TO TWO THEN        */
*/*             DECREMENT THAT COUNT BY ONE. OTHERWISE, USE COMPARE  */
*/*             AND SWAP LOGIC TO PLACE THAT AIA ON THE PART AIA     */
*/*             ERROR QUEUE. IN EITHER CASE, RETURN EACH IOE TO THE  */
*/*             IOE POOL, RELEASE THE ASM CLASS LOCK, AND THEN       */
*/*             SCHEDULE ILRPTM IF IT IS NOT ALREADY SCHEDULED.      */
*/*                                                                  */
*/*   OUTPUT =  PART AIA ERROR QUEUE CONTAINS AIA'S APPROPRIATELY    */
*/*             MARKED.                                              */
*/*             THE IOE'S ON THE WRITE QUEUE ARE RETURNED TO THE     */
*/*             IOE POOL.                                            */
*/*                                                                  */
*/*   NOTES  =  THIS ROUTINE IS ONLY CALLED IF THE SYSTEM IS         */
*/*             DUPLEXING AND PLPA OR COMMON GOES BAD.               */
*/*             THIS ROUTINE IS ONLY FUNCTIONAL FOR THE FOLLOWING    */
*/*             THREE CASES: (1) PLPA GOES BAD, (2) COMMON GOES BAD, */
*/*             OR DUPLEX GOES BAD.                                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0342
*CLEARWTQ:                                                         0342
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0342
CLEARWTQ DS    0H                                                  0343
         EJECT
*                                                                  0343
*/********************************************************************/
*/********************************************************************/
*/*   OBTAIN ASM CLASS LOCK FOR THE PART WRITE QUEUES                */
*/********************************************************************/
*/********************************************************************/
*                                                                  0343
*   RFY                                                            0343
*    (R11,                                                         0343
*     R12,                                                         0343
*     R14) RSTD;                                                   0343
*   STM(R13,R14,SAVREGS);           /* SAVE ADDRESS OF CALLERS SAVE
*                                      AREA AND THE RETURN ADDRESS   */
         STM   R13,R14,SAVREGS+848(ASMVTPTR)                       0344
*   R11=ADDR(PARTLOCK);             /* OBTAIN LOCK WORD ADDRESS      */
         L     R11,PARTPTR(,ASMVTPTR)                              0345
         LA    R11,PARTLOCK(,R11)                                  0345
*GTASMCLS:                                                         0346
*   GEN REFS(FLC,PSALITA) SETS(R11,R12,R13,R14);                   0346
GTASMCLS DS    0H                                                  0346
         SETLOCK OBTAIN,TYPE=ASM,ADDR=(11),MODE=UNCOND,               **
               RELATED=(PART,ILRMSG00(RLASMCLS))
*   RFY                                                            0347
*    (R11,                                                         0347
*     R12,                                                         0347
*     R14) UNRSTD;                                                 0347
         EJECT
*                                                                  0348
*/********************************************************************/
*/********************************************************************/
*/*   APPROPRIATELY MARK EACH AIA                                    */
*/********************************************************************/
*/********************************************************************/
*                                                                  0348
*   /*****************************************************************/
*   /*                                                               */
*   /* CLEAR THE IOE WRITE QUEUE THAT IS ASSOCIATED WITH THE BAD PART*/
*   /* ENTRY.                                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0348
*   IOEPTR=PAREWTQE->WRITEQF;       /* REMOVE IOE'S FROM THE       0348
*                                      APPROPRIATE WRITE QUEUE       */
         L     @12,PAREWTQE(,ENTRYPTR)                             0348
         L     IOEPTR,WRITEQF(,@12)                                0348
*   PAREWTQE->WRITEQ=''B;           /* CLEAR THE WRITE QUEUE         */
*                                                                  0349
         XC    WRITEQ(8,@12),WRITEQ(@12)                           0349
*   /*****************************************************************/
*   /*                                                               */
*   /* FOR EACH IOE ON THE WRITE QUEUE: (1) MARK THE CORRESPONDING   */
*   /* AIA APPROPRIATELY, (2) IF NECESSARY, CHAIN THE AIA ONTO THE   */
*   /* PART AIA ERROR QUEUE, AND (3) RETURN THE IOE TO THE IOE POOL. */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0350
*   DO WHILE(IOEPTR^=ZERO);                                        0350
         B     @DE00350                                            0350
@DL00350 DS    0H                                                  0351
*     AIAPTR=IOEAIA;                /* OBTAIN AIA POINTER FROM THE 0351
*                                      IOE                           */
*                                                                  0351
         L     AIAPTR,IOEAIA(,IOEPTR)                              0351
*     /***************************************************************/
*     /*                                                             */
*     /* IF THE IOE IS ON THE DUPLEX WIRTE QUEUE (I.E., A SECONDARY  */
*     /* WRITE), TURN ON THE SECONDARY ERROR FLAG IN THE AIA.        */
*     /* OTHERWISE, THE AIA IS ASSUMED TO BE A PRIMARY WRITE SO ZERO */
*     /* OUT THE LSID FIELD IN THE AIA.                              */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0352
*     IF PAREDPLX=ON THEN                                          0352
         TM    PAREDPLX(ENTRYPTR),B'00100000'                      0352
         BNO   @RF00352                                            0352
*       AIASECER=ON;                /* INDICATE TO ILRPAGCM WHAT TO
*                                      DO WITH THE AIA               */
         OI    AIASECER(AIAPTR),B'00000100'                        0353
*     ELSE                                                         0354
*       AIALSID=ZERO;               /* INDICATE TO ILRPAGCM WHAT TO
*                                      DO WITH THE AIA               */
*                                                                  0354
         B     @RC00352                                            0354
@RF00352 SLR   @12,@12                                             0354
         ST    @12,AIALSID(,AIAPTR)                                0354
*     /***************************************************************/
*     /*                                                             */
*     /* IF THERE ARE TWO OUTSTANDING WRITE OPERATIONS FOR THE AIA   */
*     /* ASSOCIATED WITH THE IOE TO BE FREED, THEN DECREMENT THE     */
*     /* COUNT OF OUTSTANDING WRITE OPERATIONS BY ONE AND THEN FREE  */
*     /* THAT IOE. OTHERWISE, CHAIN THE AIA TO THE PART AIA ERROR    */
*     /* QUEUE AND THEN FREE THAT IOE.                               */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0355
*     IF AIADPXCT=TWO THEN                                         0355
@RC00352 L     @12,AIADPXCT(,AIAPTR)                               0355
         C     @12,@CF00081                                        0355
         BNE   @RF00355                                            0355
*       AIADPXCT=AIADPXCT-ONE;      /* DECREMENT COUNT OF OUTSTANDING
*                                      WRITE OPERATIONS FOR A      0356
*                                      DUPLEXED WIRTE OPERATION      */
         BCTR  @12,0                                               0356
         ST    @12,AIADPXCT(,AIAPTR)                               0356
*     ELSE                                                         0357
*       DO;                                                        0357
         B     @RC00355                                            0357
@RF00355 DS    0H                                                  0358
*         RFY                                                      0358
*          (R0,                                                    0358
*           R1) RSTD;                                              0358
*         R1=AIAPTR;                /* OBTAIN POINTER OF THE AIA TO
*                                      BE PLACED ON THE PART AIA   0359
*                                      ERROR QUEUE                   */
         LR    R1,AIAPTR                                           0359
*         IOEAIA=ZERO;              /* ZERO AIA POINTER IN THE IOE   */
         SLR   @12,@12                                             0360
         ST    @12,IOEAIA(,IOEPTR)                                 0360
*         R0=PARTAIAE;              /* OBTAIN POINTER TO THE PART AIA
*                                      ERROR QUEUE                   */
         L     @12,PARTPTR(,ASMVTPTR)                              0361
         L     R0,PARTAIAE(,@12)                                   0361
*TRYAGAIN:                                                         0362
*         R1->AIANXAIA=R0;          /* CHAIN EXISTING AIA'S TO NEW 0362
*                                      AIA                           */
TRYAGAIN ST    R0,AIANXAIA(,R1)                                    0362
*         CS(R0,R1,PARTAIAE);       /* UPDATE THE AIA ERROR QUEUE  0363
*                                      WITH NEW AIA                  */
         L     @12,PARTPTR(,ASMVTPTR)                              0363
         CS    R0,@01,PARTAIAE(@12)                                0363
*         BC(NE,TRYAGAIN);          /* IF UNSUCCESSFUL, TRY AGAIN    */
         BC    7,TRYAGAIN                                          0364
*         RFY                                                      0365
*          (R0) UNRSTD;                                            0365
*       END;                                                       0366
         EJECT
*                                                                  0367
*/********************************************************************/
*/********************************************************************/
*/*   RETURN THE IOE TO ITS POOL                                     */
*/********************************************************************/
*/********************************************************************/
*                                                                  0367
*     R1=IOEPTR;                    /* SET UP TO FREE THIS IOE       */
@RC00355 LR    R1,IOEPTR                                           0367
*     IOEPTR=IOENXT;                /* OBTAIN POINTER TO NEXT IOE    */
*                                                                  0368
         L     IOEPTR,IOENXT(,IOEPTR)                              0368
*     /***************************************************************/
*     /*                                                             */
*     /* BEGIN ILRGMA MACRO EXPANSION                                */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0369
*     DO;                           /* ILRGMA FREE                 0369
*                                      CELL(IOE)WORKREGS(R11,R12)    */
*       DECLARE                     /* ASMVT VECTOR TO ILRPEX        */
*         ILRPEX ENTRY BASED(ASMPEX) VALRG(0);                     0370
*       DECLARE                     /* MAP FOR CELL CONTROL WORDS    */
*         1 GMACELL BASED BDY(WORD),                               0371
*          2 GMANEXT PTR(31);       /* PTR NEXT FREE CELL            */
*       RESPECIFY                                                  0372
*        (R0,                                                      0372
*         R1,                                                      0372
*         R11,                                                     0372
*         R12,                                                     0372
*         R14,                                                     0372
*         R15) RESTRICTED;                                         0372
*       RESPECIFY                                                  0373
*         ASMPOOLS BASED(R11);                                     0373
*       RESPECIFY                                                  0374
*         GMACELL BASED(R1);                                       0374
*       R11=ADDR(ASMIOEPC);                                        0375
         LA    R11,ASMIOEPC(,ASMVTPTR)                             0375
*       R14=ASMCPAVL;                                              0376
         L     R14,ASMCPAVL(,R11)                                  0376
*GMA00132:                                                         0377
*       GMANEXT=R14;                /* PUT ADDR CURRENT FIRST IN   0377
*                                      INPUT CELL                    */
GMA00132 ST    R14,GMANEXT(,R1)                                    0377
*       CS(R14,R1,ASMCPAVL);        /* ADD INPUT CELL TO POOL        */
         CS    R14,@01,ASMCPAVL(R11)                               0378
*       BC(7,GMA00132);                                            0379
         BC    7,GMA00132                                          0379
*       RESPECIFY                                                  0380
*        (R0,                                                      0380
*         R1,                                                      0380
*         R11,                                                     0380
*         R12,                                                     0380
*         R14,                                                     0380
*         R15) UNRESTRICTED;                                       0380
*     END;                          /* ILRGMA FREE                 0381
*                                      CELL(IOE)WORKREGS(R11,R12)    */
*                                                                  0381
*     /***************************************************************/
*     /*                                                             */
*     /* END ILRGMA MACRO EXPANSION                                  */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0382
*     RFY                                                          0382
*      (R1) UNRSTD;                                                0382
*   END;                            /* ANY MORE IOE'S                */
@DE00350 LTR   IOEPTR,IOEPTR                                       0383
         BNZ   @DL00350                                            0383
         EJECT
*                                                                  0384
*/********************************************************************/
*/********************************************************************/
*/*   RELEASE ASM CLASS LOCK FOR THE PART WRITE QUEUES               */
*/********************************************************************/
*/********************************************************************/
*                                                                  0384
*   RFY                                                            0384
*    (R11,                                                         0384
*     R12,                                                         0384
*     R14) RSTD;                                                   0384
*   R11=ADDR(PARTLOCK);             /* OBTAIN LOCK WORD ADDRESS      */
         L     R11,PARTPTR(,ASMVTPTR)                              0385
         LA    R11,PARTLOCK(,R11)                                  0385
*RLASMCLS:                                                         0386
*   GEN REFS(FLC,PSALITA) SETS(R11,R12,R13,R14);                   0386
RLASMCLS DS    0H                                                  0386
         SETLOCK RELEASE,TYPE=ASM,ADDR=(11),                          **
               RELATED=(PART,ILRMSG00(GTASMCLS))
*   RFY                                                            0387
*    (R11,                                                         0387
*     R12,                                                         0387
*     R14) UNRSTD;                                                 0387
         EJECT
*                                                                  0388
*/********************************************************************/
*/********************************************************************/
*/*   SCHEDULE ILRPTM IF NOT ALREADY SCHEDULED                       */
*/********************************************************************/
*/********************************************************************/
*                                                                  0388
*   RFY                                                            0388
*    (R0,                                                          0388
*     R1) RSTD;                                                    0388
*   R0=ZERO;                        /* OLD SRB COUNT                 */
         SLR   R0,R0                                               0389
*   R1=ONE;                         /* NEW SRB COUNT                 */
         LA    R1,1                                                0390
*   CS(R0,R1,ASMSRBCT);             /* UPDATE SRB COUNT              */
         CS    R0,@01,ASMSRBCT(ASMVTPTR)                           0391
*   BC(NE,NOSCHED);                 /* IF ALREADY ONE THEN ILRPTM HAS
*                                      ALREADY BEEN SCHEDULED -- THUS
*                                      BRANCH AROUND THE SCHEDULE  0392
*                                      CODE                          */
         BC    7,NOSCHED                                           0392
*   R1=ASMPSRB;                     /* OBTAIN ADDRESS OF THE SRB TO
*                                      BE USED                       */
         L     R1,ASMPSRB(,ASMVTPTR)                               0393
*   RFY                                                            0394
*    (R15) RSTD;                                                   0394
*   GEN REFS(R1,CVTGSMQ,CVTMAP,SRBFLNK,SRBSECT) SETS(R0,R15);      0395
         SCHEDULE SRB=(1),SCOPE=GLOBAL /* SCHEDULE ILRPTRM         */
*   RFY                                                            0396
*    (R0,                                                          0396
*     R1,                                                          0396
*     R15) UNRSTD;                                                 0396
*NOSCHED:                                                          0397
*   RFY                                                            0397
*    (R14) RSTD;                                                   0397
NOSCHED  DS    0H                                                  0398
*   LM(R13,R14,SAVREGS);            /* RESTORE REG 13 WITH CALLER'S
*                                      SAVE AREA ADDRESS AND REG 14
*                                      WITH RETURN ADDRESS           */
         LM    R13,R14,SAVREGS+848(ASMVTPTR)                       0398
*   RFY                                                            0399
*    (R14) UNRSTD;                                                 0399
*   END CLEARWTQ;                                                  0400
@EL00005 DS    0H                                                  0400
@EF00005 DS    0H                                                  0400
@ER00005 BR    @14                                                 0400
*   END ILRMSG00                                                   0401
*                                                                  0401
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (ILRAIA  )                                       */
*/*%INCLUDE SYSLIB  (ILRASMVT)                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHAFRRS )                                       */
*/*%INCLUDE SYSLIB  (ILRIOE  )                                       */
*/*%INCLUDE SYSLIB  (IHALRB  )                                       */
*/*%INCLUDE SYSLIB  (ILRPART )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (ILRSART )                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (IHASRB  )                                       */
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                       */
*                                                                  0401
*       ;                                                          0401
@DATA    DS    0H
@DATD    DSECT
         DS    0F
ILRMSG00 CSECT
         DS    0F
@CF00042 DC    F'1'
@CF00081 DC    F'2'
@CF00941 DC    F'5'
@CF00915 DC    F'6'
@CF01213 DC    F'7'
@CF00039 DC    F'8'
@CF02381 DC    F'9'
@CF00032 DC    F'10'
@CF00083 DC    F'32'
@CF01205 DC    F'64'
@CF02608 DC    XL4'0000FFFF'
@CF02383 DC    BL4'0'
@DATD    DSECT
         DS    0D
@ENDDATD EQU   *
ILRMSG00 CSECT
         NOPR  ((@ENDDATD-@DATD)*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV02418 DC    V(IGFPTERM)
         DS    0D
@CC02370 DC    C'      '
@CC02372 DC    C'COMMON'
@CC02374 DC    C'DUPLEX'
@CC02378 DC    C'LOCAL '
@CC02368 DC    C'BAD '
@CC02391 DC    C'SWAP'
MSGPTRS  DS    CL24
         ORG   MSGPTRS
MSG05P   DC    AL4(WTO05I)
MSG06P   DC    AL4(WTO06I)
MSG07P   DC    AL4(WTO07I)
MSG08P   DC    AL4(WTO08W)
MSG09P   DC    AL4(WTO09I)
MSG10P   DC    AL4(WTO10I)
         ORG   MSGPTRS+24
WTO05I   DS    CL80
         ORG   WTO05I
WTO05I01 DC    H'67'
WTO05I02 DC    B'1000000000000000'
WTO05I03 DC    CL63'ILR005I PLPA PAGE DATA SET FULL, OVERFLOWING TO COMC
               MON DATA SET'
WTO05I04 DC    B'0001000000000000'
WTO05I05 DC    B'0100000000000000'
         ORG   WTO05I+80
WTO06I   DS    CL80
         ORG   WTO06I
WTO06I01 DC    H'67'
WTO06I02 DC    B'1000000000000000'
WTO06I03 DC    CL63'ILR006I COMMON PAGE DATA SET FULL, OVERFLOWING TO PC
               LPA DATA SET'
WTO06I04 DC    B'0001000000000000'
WTO06I05 DC    B'0100000000000000'
         ORG   WTO06I+80
WTO07I   DS    CL80
         ORG   WTO07I
WTO07I01 DC    H'58'
WTO07I02 DC    B'1000000000000000'
WTO07I03 DC    CL54'ILR007I DUPLEX PAGE DATA SET FULL, DUPLEXING SUSPENC
               DED'
WTO07I04 DC    B'0001000000000000'
WTO07I05 DC    B'0101000001000000'
         ORG   WTO07I+80
WTO08W   DS    CL80
         ORG   WTO08W
WTO08W01 DC    H'74'
WTO08W02 DC    B'1000000000000000'
WTO08W03 DC    CL70'ILR008W PLPA   PAGE DATA SET ON VOL XXXXXX BAD, ASMC
                UNABLE TO CONTINUE'
WTO08W04 DC    B'1000000000000000'
WTO08W05 DC    B'1001000001000000'
         ORG   WTO08W+80
WTO09I   DS    CL80
         ORG   WTO09I
WTO09I01 DC    H'50'
WTO09I02 DC    B'1000000000000000'
WTO09I03 DC    CL46'ILR009I PLPA   PAGE DATA SET ON VOL XXXXXX BAD'
WTO09I04 DC    B'0001000000000000'
WTO09I05 DC    B'0101000001000000'
         ORG   WTO09I+80
WTO10I   DS    CL80
         ORG   WTO10I
WTO10I01 DC    H'74'
WTO10I02 DC    B'1000000000000000'
WTO10I03 DC    CL70'ILR010I PLPA   PAGE DATA SET FULL, ASM USING ONLY DC
               UPLEX PAGE DATA SET'
WTO10I04 DC    B'0001000000000000'
WTO10I05 DC    B'0101000001000000'
         ORG   WTO10I+80
TERMPSW  DS    CL8
         ORG   TERMPSW
TERMMASK DC    X'00'
TERMCMWP DC    X'0C'
TERMCCPM DC    X'00'
@NM00130 DC    X'00'
TERMADDR DC    VL4(IGFPTERM)
         ORG   TERMPSW+8
WPSW02E  DS    CL8
         ORG   WPSW02E
WMASK02E DC    X'04'
WCMWP02E DC    X'0A'
WCCPM02E DC    X'00'
@NM00131 DC    X'00'
WCODE02E DC    X'0000002E'
         ORG   WPSW02E+8
WPSW03C  DS    CL8
         ORG   WPSW03C
WMASK03C DC    X'04'
WCMWP03C DC    X'0A'
WCCPM03C DC    X'00'
@NM00132 DC    X'00'
WCODE03C DC    X'0000003C'
         ORG   WPSW03C+8
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
AIAPTR   EQU   @07
ASMVTPTR EQU   @03
IOEPTR   EQU   @08
LRBPTR   EQU   @02
SDWAPTR  EQU   @01
BUFPTR   EQU   @02
COMMPTR  EQU   @08
ENTRYPTR EQU   @05
FRRADDR  EQU   @00
FRRPARM@ EQU   @01
PLPAPTR  EQU   @07
FULLFLAG EQU   @09
MSGNUM   EQU   @04
TYPE     EQU   @06
WAITCODE EQU   @09
R0       EQU   @00
R1       EQU   @01
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
R10      EQU   @10
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
PSALSFCC EQU   PSA+1012
AIA      EQU   0
AIAFLG1  EQU   AIA+9
AIAFLG2  EQU   AIA+10
AIASECER EQU   AIAFLG2
AIAFLG3  EQU   AIA+11
AIANXAIA EQU   AIA+12
AIAID    EQU   AIA+16
AIALPID  EQU   AIAID
AIALGID  EQU   AIALPID
AIALSID  EQU   AIALGID
AIASSID  EQU   AIALSID+1
AIARPN   EQU   AIALPID+4
AIALSID2 EQU   AIARPN
AIALPMEP EQU   AIALSID2
AIAGRPSZ EQU   AIA+24
AIALGE   EQU   AIAGRPSZ
AIADPXCT EQU   AIALGE
ASMVT    EQU   0
ASMFLAG1 EQU   ASMVT
ASMDUPLX EQU   ASMFLAG1
ASMNOCWQ EQU   ASMFLAG1
ASMNODPX EQU   ASMFLAG1
ASMPLPAF EQU   ASMFLAG1
ASMCOMMF EQU   ASMFLAG1
ASMPLPAS EQU   ASMFLAG1
ASMFLAG2 EQU   ASMVT+1
ASMSART  EQU   ASMVT+4
ASMPART  EQU   ASMVT+8
ASMMSGBF EQU   ASMVT+24
ASMSTAGQ EQU   ASMVT+32
ASMPCCWQ EQU   ASMVT+64
ASMSRBCT EQU   ASMVT+84
ASMPSRB  EQU   ASMVT+88
ASMBKSLT EQU   ASMVT+108
ASMLSAI  EQU   ASMVT+144
ASMGOSQS EQU   ASMVT+152
ASMPEX   EQU   ASMVT+224
ASMIOEPC EQU   ASMVT+296
ASMWKSA1 EQU   ASMVT+368
ASMWKSA2 EQU   ASMVT+448
ASMWKSA3 EQU   ASMVT+528
ASMWKSA4 EQU   ASMVT+608
ASMWKSA5 EQU   ASMVT+688
ASMWKSA7 EQU   ASMVT+848
ASMPOOLS EQU   0
ASMCPAVQ EQU   ASMPOOLS+8
ASMCPAVL EQU   ASMCPAVQ
ASMCPRSQ EQU   ASMPOOLS+16
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
FRRS     EQU   0
FRRSHEAD EQU   FRRS
FRRSLAST EQU   FRRSHEAD+4
FRRSELEN EQU   FRRSHEAD+8
FRRSCURR EQU   FRRSHEAD+12
FRRSPTR  EQU   0
FRRSENTR EQU   0
FRRSFRRA EQU   FRRSENTR
FRRSFLGS EQU   FRRSENTR+4
FRRSFLG1 EQU   FRRSFLGS
FRRSPARM EQU   FRRSENTR+8
FRREPTR  EQU   0
IOE      EQU   0
IOENXT   EQU   IOE
IOELSIDA EQU   IOE+4
IOEAIA   EQU   IOE+8
IOEWORK  EQU   IOE+12
LRB      EQU   0
LRBHTYPE EQU   LRB
LRBHREL  EQU   LRB+1
LRBHSYS  EQU   LRBHREL
LRBHSW0  EQU   LRB+2
LRBHSW1  EQU   LRB+3
LRBHSW2  EQU   LRB+4
LRBMACT  EQU   LRBHSW2
LRBHSW3  EQU   LRB+5
LRBHCPID EQU   LRB+16
LRBBASE  EQU   LRB+24
LRBCVAR  EQU   0
LRBCMP   EQU   LRBCVAR+8
PART     EQU   0
PARTHDR  EQU   PART
PARTAIAE EQU   PARTHDR+12
PARTTPAR EQU   PARTHDR+24
PARTLCNT EQU   PARTHDR+32
PARTLOCK EQU   PARTHDR+44
PARTCOMQ EQU   PARTHDR+48
PARTSPLQ EQU   PARTHDR+56
PARTDUPQ EQU   PARTHDR+64
PARTLOCQ EQU   PARTHDR+72
PARTENTS EQU   PART+80
PARTENT  EQU   0
PARELKUP EQU   PARTENT+4
PARELKFL EQU   PARELKUP
PARETYPE EQU   PARTENT+8
PAREPLPA EQU   PARETYPE
PARECOMM EQU   PARETYPE
PAREDPLX EQU   PARETYPE
PARELOCL EQU   PARETYPE
PAREFLG1 EQU   PARTENT+9
PARENUSE EQU   PAREFLG1
PAREDSBD EQU   PAREFLG1
PARESLTA EQU   PARTENT+20
PAREUCBP EQU   PARTENT+44
PAREWTQE EQU   PARTENT+52
PAREPTR  EQU   0
SART     EQU   0
SARTHDR  EQU   SART
SARSETCT EQU   SARTHDR+36
SARWAITQ EQU   SARTHDR+40
SARTE    EQU   0
SREFLG   EQU   SARTE+9
SREAVLSL EQU   SARTE+20
SAREPTR  EQU   0
SDWA     EQU   0
SDWAPARM EQU   SDWA
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAERRD EQU   SDWAFLGS+3
SDWAIOFS EQU   SDWA+238
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWAACF2 EQU   SDWAPARQ+1
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
SRBSECT  EQU   0
SRB      EQU   SRBSECT
SRBFLNK  EQU   SRB+4
SRBFLC   EQU   SRB+12
SRBPTR   EQU   0
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00129 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCB3800X EQU   0
UCBOPTNS EQU   UCB3800X
UCBACTIV EQU   UCB3800X+3
UCBMDRBF EQU   UCB3800X+36
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
BUFFERS  EQU   0
CURBUFP  EQU   BUFFERS
FRSTBUFP EQU   BUFFERS+4
LASTBUFP EQU   BUFFERS+8
TERMBUF  EQU   BUFFERS+256
TERMMSG  EQU   TERMBUF
TERMWKAR EQU   TERMBUF+80
FRRPARM  EQU   0
FRRWPSW@ EQU   FRRPARM
MSGBUF   EQU   0
MSGFMT   EQU   0
MSGNAME  EQU   MSGFMT+8
MSGTYPE  EQU   MSGFMT+15
MSGDISP  EQU   MSGFMT+29
MSGVOLID EQU   MSGFMT+36
PARMLIST EQU   0
PARMNUM  EQU   PARMLIST
PARMTYPE EQU   PARMLIST+2
PARMENTP EQU   PARMLIST+4
SAVREGS  EQU   0
WAITPSW  EQU   0
WRITEQ   EQU   0
WRITEQF  EQU   WRITEQ
WTOMSG   EQU   0
GMACELL  EQU   0
GMANEXT  EQU   GMACELL
ILRPEX   EQU   0
UCBBGN   EQU   0
ASM1WKSV EQU   ASMWKSA1
ASM1RGSV EQU   ASM1WKSV
ASM1WRKA EQU   ASM1WKSV+60
ASM2WKSV EQU   ASMWKSA2
ASM2WRKA EQU   ASM2WKSV+52
ASM2FLGS EQU   ASM2WRKA+12
ASM3WKSV EQU   ASMWKSA3
ASM4WKSV EQU   ASMWKSA4
ASM4RGSV EQU   ASM4WKSV
ASM5WKSV EQU   ASMWKSA5
ASM5RGSV EQU   ASM5WKSV
CVTPTR   EQU   FLCCVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTGSMQ  EQU   CVTS01+264
CVTRECRQ EQU   CVTS01+352
CVTASMVT EQU   CVTS01+356
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
LRBHRSW1 EQU   LRBHSW1
LRBHCSW1 EQU   LRBHSW1
LRBHMSW1 EQU   LRBHSW1
LRBMMCH  EQU   LRBBASE
LRBMCEIA EQU   LRBMMCH+8
LRBMTERM EQU   LRBMCEIA
LRBMHARD EQU   LRBMCEIA+1
LRBMINTM EQU   LRBMCEIA+2
LRBMSOFT EQU   LRBMCEIA+3
LRBMPDAR EQU   LRBMMCH+12
LRBMRSR1 EQU   LRBMMCH+13
LRBMRSR2 EQU   LRBMMCH+14
LRBMFLO  EQU   LRBMMCH+24
LRBMCIC  EQU   LRBMFLO
@NM00029 EQU   LRBMCIC
@NM00031 EQU   LRBMCIC+1
@NM00033 EQU   LRBMCIC+2
@NM00035 EQU   LRBMCIC+3
@NM00038 EQU   LRBMCIC+5
LRBRDDR  EQU   LRBBASE
LRBCCCH  EQU   LRBBASE
LRBCCUA  EQU   LRBCCCH+49
LRBDMDR  EQU   LRBBASE
LRBNMIH  EQU   LRBBASE
LRBTTER  EQU   LRBBASE
LRBTLNH  EQU   LRBTTER
LRBTWSC  EQU   LRBTTER+4
PARTPTR  EQU   ASMPART
FLC      EQU   PSA
PSARSVTE EQU   PSARSVT
PSACSTK  EQU   PSARSVTE
SARTPTR  EQU   ASMSART
UCBPTR   EQU   PAREUCBP
UCBOBS01 EQU   UCBDEV
UCBVOLI  EQU   UCBOBS01+4
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00128 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBCTCAD EQU   UCBOBS08
UCBCTCF1 EQU   UCBOBS08+4
UCBOBS09 EQU   UCBDEV
MSGPTR   EQU   MSGPTRS
SYSTERWA EQU   TERMWKAR
SYSTERPL EQU   SYSTERWA
STWTO@   EQU   SYSTERPL
STLRB@   EQU   SYSTERPL+4
SYSTLRB  EQU   SYSTERWA+8
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBRV082 EQU   UCBCTCF1
UCBRV081 EQU   UCBCTCF1
UCBRV080 EQU   UCBCTCF1
UCBRV079 EQU   UCBCTCF1
UCBRV078 EQU   UCBCTCF1
UCBRV077 EQU   UCBCTCF1
UCBRV076 EQU   UCBCTCF1
UCBCTC80 EQU   UCBCTCF1
UCBCTCAL EQU   UCBCTCAD
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00128
UCBSKPFG EQU   @NM00128
UCBRIPND EQU   @NM00128
UCBRTIAC EQU   @NM00128
UCBRSV79 EQU   @NM00128
UCBRSV78 EQU   @NM00128
UCBRSV77 EQU   @NM00128
UCBOLTEP EQU   @NM00128
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBRV038 EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00127 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRV028 EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVTOC  EQU   UCBOBS01
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
LRBTUSR  EQU   LRBTTER+8
LRBNINT  EQU   LRBNMIH+24
LRBNDEVT EQU   LRBNMIH+20
LRBNVOL  EQU   LRBNMIH+14
LRBNCUA1 EQU   LRBNMIH+11
LRBNCUA2 EQU   LRBNMIH+8
LRBNJOB  EQU   LRBNMIH
LRBDSENS EQU   LRBDMDR+8
LRBDVOL  EQU   LRBDMDR+2
LRBDCUA1 EQU   LRBDMDR
LRBCCLOG EQU   LRBCCCH+56
LRBCLOGL EQU   LRBCCCH+54
LRBCHCUA EQU   LRBCCCH+52
LRBCCUA2 EQU   LRBCCUA+1
@NM00042 EQU   LRBCCUA
LRBCCHID EQU   LRBCCCH+48
LRBCDEVT EQU   LRBCCCH+44
LRBCECSW EQU   LRBCCCH+40
LRBCFCSW EQU   LRBCCCH+32
LRBCFCCW EQU   LRBCCCH+24
LRBCAIO  EQU   LRBCCCH+8
LRBCJOB  EQU   LRBCCCH
LRBRDEV2 EQU   LRBRDDR+32
LRBRCUA2 EQU   LRBRDDR+29
LRBRPH2  EQU   LRBRDDR+28
LRBRDEV1 EQU   LRBRDDR+24
LRBRCUA1 EQU   LRBRDDR+21
LRBRPH1  EQU   LRBRDDR+20
LRBRVOL2 EQU   LRBRDDR+14
LRBRVOL1 EQU   LRBRDDR+8
LRBRJOB  EQU   LRBRDDR
LRBMCEL  EQU   LRBMMCH+304
@NM00041 EQU   LRBMFLO+20
LRBMFSA  EQU   LRBMFLO+16
@NM00040 EQU   LRBMFLO+8
LRBMCELL EQU   LRBMCIC+6
LRBMVCC  EQU   @NM00038
LRBMVPT  EQU   @NM00038
@NM00039 EQU   @NM00038
@NM00037 EQU   LRBMCIC+4
LRBMVST  EQU   @NM00035
LRBMVLG  EQU   @NM00035
LRBMVCR  EQU   @NM00035
LRBMVGR  EQU   @NM00035
LRBMVFP  EQU   @NM00035
@NM00036 EQU   @NM00035
LRBMVRC  EQU   @NM00035
LRBMVFA  EQU   @NM00035
LRBMVIA  EQU   @NM00033
LRBMVPM  EQU   @NM00033
LRBMVMS  EQU   @NM00033
LRBMVWP  EQU   @NM00033
@NM00034 EQU   @NM00033
LRBMFKE  EQU   @NM00033
LRBMFSC  EQU   @NM00033
LRBMFSE  EQU   @NM00033
LRBMIDY  EQU   @NM00031
LRBMIBU  EQU   @NM00031
@NM00032 EQU   @NM00031
LRBMFWN  EQU   @NM00031
LRBMFDG  EQU   @NM00029
@NM00030 EQU   @NM00029
LRBMFED  EQU   @NM00029
LRBMFCD  EQU   @NM00029
LRBMFTD  EQU   @NM00029
LRBMFSR  EQU   @NM00029
LRBMFPD  EQU   @NM00029
LRBMFSD  EQU   @NM00029
LRBMMOSW EQU   LRBMMCH+16
LRBMPWL  EQU   LRBMMCH+15
LRBMVEQR EQU   LRBMRSR2
LRBMPGFX EQU   LRBMRSR2
LRBMLSQA EQU   LRBMRSR2
LRBMFSQA EQU   LRBMRSR2
LRBMNUCL EQU   LRBMRSR2
LRBMSPER EQU   LRBMRSR2
LRBMINTC EQU   LRBMRSR2
LRBMOFLN EQU   LRBMRSR2
LRBMCHNG EQU   LRBMRSR1
LRBMSER  EQU   LRBMRSR1
@NM00028 EQU   LRBMRSR1
@NM00027 EQU   LRBMPDAR
LRBMRSRF EQU   LRBMPDAR
LRBMRSRC EQU   LRBMPDAR
LRBMINVP EQU   LRBMPDAR
@NM00026 EQU   LRBMPDAR
LRBMSBUF EQU   LRBMSOFT
LRBMSHIR EQU   LRBMSOFT
LRBMSECC EQU   LRBMSOFT
LRBMSEXD EQU   LRBMSOFT
@NM00025 EQU   LRBMSOFT
LRBMSSFT EQU   LRBMSOFT
LRBMIL80 EQU   LRBMINTM
LRBMICTM EQU   LRBMINTM
LRBMICKC EQU   LRBMINTM
LRBMITOD EQU   LRBMINTM
@NM00024 EQU   LRBMINTM
LRBMHIPD EQU   LRBMHARD
LRBMHSPF EQU   LRBMHARD
LRBMHSTO EQU   LRBMHARD
LRBMHINV EQU   LRBMHARD
@NM00023 EQU   LRBMHARD
LRBMHHRD EQU   LRBMHARD
LRBMTINV EQU   LRBMTERM
LRBMTDMG EQU   LRBMTERM
LRBMTWRN EQU   LRBMTERM
LRBMTCKS EQU   LRBMTERM
LRBMTSEC EQU   LRBMTERM
@NM00022 EQU   LRBMTERM
LRBMWSC  EQU   LRBMMCH+4
LRBMLNH  EQU   LRBMMCH
@NM00021 EQU   LRBHMSW1
LRBMSYST EQU   LRBHMSW1
@NM00020 EQU   LRBHMSW1
@NM00019 EQU   LRBHCSW1
LRBCERPP EQU   LRBHCSW1
LRBCDATA EQU   LRBHCSW1
LRBCICUA EQU   LRBHCSW1
LRBCNOSP EQU   LRBHCSW1
@NM00018 EQU   LRBHCSW1
LRBCINCO EQU   LRBHCSW1
LRBCMESG EQU   LRBHCSW1
@NM00017 EQU   LRBHRSW1
LRBRSYSI EQU   LRBHRSW1
LRBROPER EQU   LRBHRSW1
LRBRSEC  EQU   LRBHRSW1
LRBRPRIM EQU   LRBHRSW1
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
ASM5FLGS EQU   ASM5WKSV+64
ASM5AIA  EQU   ASM5WKSV+60
ASM5GCTR EQU   ASM5WKSV+56
ASM5SR14 EQU   ASM5WKSV+52
@NM00006 EQU   ASM5RGSV+4
ASM5RG2  EQU   ASM5RGSV
@NM00005 EQU   ASM4RGSV+4
ASM4RG2  EQU   ASM4RGSV
ASM3SR13 EQU   ASM3WKSV+28
ASM3R14B EQU   ASM3WKSV+24
ASM3R14A EQU   ASM3WKSV+20
ASM3GRPA EQU   ASM3WKSV+16
ASM3TMPA EQU   ASM3WKSV+12
ASM3PIOP EQU   ASM3WKSV+8
ASM3GENQ EQU   ASM3WKSV+4
ASM3SWPQ EQU   ASM3WKSV
ASM2SR14 EQU   ASM2WRKA+16
@NM00004 EQU   ASM2WRKA+13
ASM2WFLG EQU   ASM2FLGS
ASM2RFLG EQU   ASM2FLGS
ASM2DUPQ EQU   ASM2WRKA+8
ASM2CAQ  EQU   ASM2WRKA+4
ASM2PAQ  EQU   ASM2WRKA
ASM2RGSV EQU   ASM2WKSV
ASM1NXTA EQU   ASM1WRKA+4
ASM1ASCB EQU   ASM1WRKA
ASM1RG15 EQU   ASM1RGSV+56
@NM00003 EQU   ASM1RGSV+4
ASM1RG1  EQU   ASM1RGSV
WRITEQB  EQU   WRITEQ+4
SREG14   EQU   SAVREGS+4
SREG13   EQU   SAVREGS
@NM00138 EQU   MSGFMT+42
@NM00137 EQU   MSGFMT+33
@NM00136 EQU   MSGFMT+19
@NM00135 EQU   MSGFMT+14
@NM00134 EQU   MSGFMT
@NM00133 EQU   FRRPARM+4
BUFFER3  EQU   BUFFERS+176
BUFFER2  EQU   BUFFERS+96
BUFFER1  EQU   BUFFERS+16
TERMBUFP EQU   BUFFERS+12
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBRSV50 EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBMDRBA EQU   UCBMDRBF+1
UCBRV075 EQU   UCBMDRBF
UCBRV074 EQU   UCB3800X+32
UCBIMAGE EQU   UCB3800X+28
UCBFCBNM EQU   UCB3800X+24
UCBCHAR4 EQU   UCB3800X+20
UCBCHAR3 EQU   UCB3800X+16
UCBCHAR2 EQU   UCB3800X+12
UCBCHAR1 EQU   UCB3800X+8
UCBCGMID EQU   UCB3800X+4
UCBBRSTA EQU   UCBACTIV
UCBRV063 EQU   UCBACTIV
UCBRV062 EQU   UCBACTIV
UCBRV061 EQU   UCBACTIV
UCBRV060 EQU   UCBACTIV
UCBRV059 EQU   UCBACTIV
UCBRV058 EQU   UCBACTIV
UCBRV057 EQU   UCBACTIV
UCBRV050 EQU   UCB3800X+2
UCBCGMNO EQU   UCB3800X+1
UCBRV083 EQU   UCBOPTNS
UCBBRSTR EQU   UCBOPTNS
UCBRV056 EQU   UCBOPTNS
UCBRV055 EQU   UCBOPTNS
UCBRV054 EQU   UCBOPTNS
UCBRV053 EQU   UCBOPTNS
UCBRV052 EQU   UCBOPTNS
UCBRV051 EQU   UCBOPTNS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBRV043 EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBERLOG EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBRV032 EQU   UCBFLP1
UCBRV031 EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00129
UCBHALI  EQU   @NM00129
UCBRSV09 EQU   @NM00129
UCBRSV08 EQU   @NM00129
UCBRSV07 EQU   @NM00129
UCBRSV06 EQU   @NM00129
UCBRSV05 EQU   @NM00129
UCBRSV04 EQU   @NM00129
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCB3TAPE EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBNAME  EQU   UCBOB+13
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBSIGP  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBRSV02 EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBDUC   EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00126 EQU   UCB
@NM00125 EQU   SRB+40
@NM00124 EQU   SRB+38
SRBPRIOR EQU   SRB+37
SRBPKF   EQU   SRB+36
SRBSAVE  EQU   SRB+32
SRBPARM  EQU   SRB+28
SRBRMTR  EQU   SRB+24
SRBEP    EQU   SRB+20
SRBPTCB  EQU   SRBFLC+4
SRBPASID EQU   SRBFLC+2
SRBCPAFF EQU   SRBFLC
SRBASCB  EQU   SRB+8
SRBID    EQU   SRB
@NM00123 EQU   SDWA+512
SDWAVRA  EQU   SDWARA+4
SDWAURAL EQU   SDWARA+3
@NM00122 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
@NM00121 EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00120 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00119 EQU   SDWADDAT+3
@NM00118 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00117 EQU   SDWADDAT+1
@NM00116 EQU   SDWASDAT
SDWAQQS  EQU   SDWASDAT
SDWACBS  EQU   SDWASDAT
SDWAGTF  EQU   SDWASDAT
SDWASWA  EQU   SDWASDAT
SDWALSQA EQU   SDWASDAT
SDWASQA  EQU   SDWASDAT
SDWANUC  EQU   SDWASDAT
@NM00115 EQU   SDWADUMP+2
@NM00114 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00113 EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWAREXN EQU   SDWARECP+16
SDWACSCT EQU   SDWARECP+8
SDWAMODN EQU   SDWARECP
@NM00112 EQU   SDWA+290
SDWAASID EQU   SDWA+288
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00111 EQU   SDWAACF3
@NM00110 EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
@NM00109 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00108 EQU   SDWAACF2
SDWARCRD EQU   SDWAACF2
SDWARCDE EQU   SDWAPARQ
SDWALCPU EQU   SDWACPUA+2
@NM00107 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
SDWARTYA EQU   SDWA+240
@NM00106 EQU   SDWA+239
@NM00105 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
@NM00104 EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
SDWACLUP EQU   SDWAERRD
@NM00103 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAPERC EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00102 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWAMCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00101 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00100 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00099 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00098 EQU   SDWAINC2
@NM00097 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00096 EQU   SDWAILC2
@NM00095 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00094 EQU   SDWANXT2
@NM00093 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00092 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00091 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00090 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00089 EQU   SDWAINC1
@NM00088 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00087 EQU   SDWAILC1
@NM00086 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00085 EQU   SDWANXT1
@NM00084 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00083 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00082 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00081 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00080 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00079 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00078 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
SDWACMPC EQU   SDWAABCC+1
@NM00077 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00076 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAREQ  EQU   SDWACMPF
SREUCB   EQU   SARTE+44
SREEDB   EQU   SARTE+40
SRESDCTE EQU   SARTE+36
SRESAT   EQU   SARTE+32
SREIORB  EQU   SARTE+28
SRERRCNT EQU   SARTE+24
SRETOTSL EQU   SARTE+16
SRESCCW  EQU   SARTE+12
SRENN    EQU   SARTE+10
@NM00075 EQU   SREFLG
SREFIXED EQU   SREFLG
SREDRIVE EQU   SREFLG
SREDSBD  EQU   SREFLG
SRENUSE  EQU   SREFLG
@NM00074 EQU   SARTE+8
SRELOCK  EQU   SARTE+4
SRENEXT  EQU   SARTE
SARENTS  EQU   SART+80
@NM00073 EQU   SARTHDR+60
SARSETSZ EQU   SARTHDR+56
SARSRBCT EQU   SARTHDR+52
SARSRBP  EQU   SARTHDR+48
SARWAITL EQU   SARWAITQ+4
SARWAITF EQU   SARWAITQ
SARSCCWQ EQU   SARTHDR+32
SARSDCT  EQU   SARTHDR+28
SARDSNL  EQU   SARTHDR+24
SARMOVNX EQU   SARTHDR+20
SARFXDNX EQU   SARTHDR+16
@NM00072 EQU   SARTHDR+12
SARUSE   EQU   SARTHDR+8
SARSIZE  EQU   SARTHDR+4
SARID    EQU   SARTHDR
@NM00047 EQU   PARTENT+62
PARELCYL EQU   PARTENT+60
PARERQTM EQU   PARTENT+56
PARENODE EQU   PARTENT+48
PAREEDBP EQU   PARTENT+40
PAREPCTP EQU   PARTENT+36
PAREPATP EQU   PARTENT+32
PAREIORB EQU   PARTENT+28
PARERRCT EQU   PARTENT+24
PARESZSL EQU   PARTENT+16
PAREIOEQ EQU   PARTENT+12
PARENN   EQU   PARTENT+10
@NM00046 EQU   PAREFLG1
PAREINCP EQU   PAREFLG1
@NM00045 EQU   PARETYPE
PARECPCT EQU   PARELKUP+2
PAREIORN EQU   PARELKUP+1
@NM00044 EQU   PARELKFL
PAREFSIP EQU   PARELKFL
PAREPARE EQU   PARTENT
PARTLOCL EQU   PARTLOCQ+4
PARTLOCF EQU   PARTLOCQ
PARTDUPL EQU   PARTDUPQ+4
PARTDUPF EQU   PARTDUPQ
PARTSPLL EQU   PARTSPLQ+4
PARTSPLF EQU   PARTSPLQ
PARTCOML EQU   PARTCOMQ+4
PARTCOMF EQU   PARTCOMQ
PARTLKUP EQU   PARTHDR+40
@NM00043 EQU   PARTHDR+34
PARTPCTQ EQU   PARTHDR+28
PARTDSNL EQU   PARTTPAR
PARTCIR2 EQU   PARTHDR+20
PARTCIR1 EQU   PARTHDR+16
PARTEUSE EQU   PARTHDR+8
PARTSIZE EQU   PARTHDR+4
PARTIDEN EQU   PARTHDR
LRBCMPCS EQU   LRBCMP+2
LRBCMPPA EQU   LRBCMP
LRBCMPNO EQU   LRBCVAR+6
LRBCMPF2 EQU   LRBCVAR+5
LRBCMPF1 EQU   LRBCVAR+4
LRBCRESD EQU   LRBCVAR+2
LRBCFT   EQU   LRBCVAR
LRBHMCEL EQU   LRBHCPID+6
LRBHMDL  EQU   LRBHCPID+4
LRBHCSER EQU   LRBHCPID+1
@NM00016 EQU   LRBHCPID
LRBHTIME EQU   LRB+12
LRBHDATE EQU   LRB+8
@NM00015 EQU   LRB+7
LRBHCNT  EQU   LRB+6
LRBMCLB  EQU   LRBHSW3
LRBNDEM  EQU   LRBMACT
LRBNCEM  EQU   LRBMACT
@NM00014 EQU   LRBHSW0
LRBHTMC  EQU   LRBHSW0
@NM00013 EQU   LRBHSW0
LRBHNS   EQU   LRBHSW0
LRBHMORE EQU   LRBHSW0
@NM00012 EQU   LRBHSYS
LRBHSYSB EQU   LRBHSYS
@NM00011 EQU   IOE+16
IOEBKPTR EQU   IOEWORK
IOENXTGT EQU   IOELSIDA
IOENXTLE EQU   IOENXT
@NM00010 EQU   FRRSFLGS+1
@NM00009 EQU   FRRSFLG1
FRRSNEST EQU   FRRSFLG1
FRRSRCUR EQU   FRRSFLG1
FRRSENTS EQU   FRRS+84
FRRSRTMW EQU   FRRS+16
FRRSEMP  EQU   FRRSHEAD
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00008 EQU   CVTFIX+248
@NM00007 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
ASMCPRES EQU   ASMCPRSQ+4
ASMCPTAK EQU   ASMCPRSQ
ASMCPCNT EQU   ASMCPAVQ+4
ASMCPEXT EQU   ASMPOOLS+6
ASMCPSIZ EQU   ASMPOOLS+4
ASMCPID  EQU   ASMPOOLS
ASMRSV12 EQU   ASMVT+1000
ASMSAVE  EQU   ASMVT+928
ASMWKSA6 EQU   ASMVT+768
ASMACEPC EQU   ASMVT+344
ASMSWKPC EQU   ASMVT+328
ASMBWKPC EQU   ASMVT+312
ASMRSV10 EQU   ASMVT+280
ASMPVACE EQU   ASMVT+276
ASMPIOFR EQU   ASMVT+272
ASMPVACQ EQU   ASMVT+268
ASMPMSGS EQU   ASMVT+264
ASMPMSG0 EQU   ASMVT+260
ASMPFRLG EQU   ASMVT+256
ASMPRLG  EQU   ASMVT+252
ASMPACT  EQU   ASMVT+248
ASMPSAV  EQU   ASMVT+244
ASMPCMP  EQU   ASMVT+240
ASMPCMPA EQU   ASMVT+236
ASMPCMPN EQU   ASMVT+232
ASMPCMPD EQU   ASMVT+228
ASMVRMTR EQU   ASMVT+220
ASMPSRBC EQU   ASMVT+216
ASMPSRMT EQU   ASMVT+212
ASMPSWPD EQU   ASMVT+208
ASMPTM   EQU   ASMVT+204
ASMPFRSW EQU   ASMVT+200
ASMPFRSL EQU   ASMVT+196
ASMPQIOE EQU   ASMVT+192
ASMRSV8  EQU   ASMVT+184
ASMTASCB EQU   ASMVT+180
ASMRLGWQ EQU   ASMVT+176
ASMRLGRQ EQU   ASMVT+172
ASMTMECB EQU   ASMVT+168
ASMTCBPT EQU   ASMVT+164
ASMREQCT EQU   ASMVT+160
ASMGOSWK EQU   ASMGOSQS+4
ASMGOSWT EQU   ASMGOSQS
ASMLSAIH EQU   ASMLSAI+4
ASMLSAIL EQU   ASMLSAI
ASMCINV  EQU   ASMVT+140
ASMSTGXA EQU   ASMVT+136
ASMLGVT  EQU   ASMVT+132
ASMSLOTV EQU   ASMVT+128
ASMERRS  EQU   ASMVT+124
ASMNVSC  EQU   ASMVT+120
ASMVSC   EQU   ASMVT+116
ASMSLOTS EQU   ASMVT+112
ASMRSV7  EQU   ASMVT+92
ASMIOCNT EQU   ASMVT+80
ASMBURST EQU   ASMVT+76
ASMPCCWN EQU   ASMVT+72
ASMPCCWC EQU   ASMPCCWQ+4
ASMPCCWA EQU   ASMPCCWQ
ASMRSV6  EQU   ASMVT+48
ASMIORQC EQU   ASMVT+44
ASMIORQR EQU   ASMVT+40
ASMSTAGL EQU   ASMSTAGQ+4
ASMSTAGF EQU   ASMSTAGQ
ASMRSV5  EQU   ASMVT+28
ASMEREC  EQU   ASMVT+20
ASMTRPAG EQU   ASMVT+16
ASMGOS   EQU   ASMVT+12
ASMRSV4  EQU   ASMVT+2
ASMWARM  EQU   ASMFLAG2
ASMQUICK EQU   ASMFLAG2
ASMNOTPT EQU   ASMFLAG2
ASMNOTMR EQU   ASMFLAG2
ASMNOSAV EQU   ASMFLAG2
ASMCALLQ EQU   ASMFLAG2
ASMRSV1  EQU   ASMFLAG1
ASMNOLCL EQU   ASMFLAG1
AIACEPTR EQU   AIALPMEP
AIASLOT  EQU   AIASSID+1
@NM00002 EQU   AIASSID
@NM00001 EQU   AIALSID
AIARCSN  EQU   AIANXAIA+2
AIACYL   EQU   AIANXAIA
AIARSV9  EQU   AIAFLG3
AIARSV8  EQU   AIAFLG3
AIARSV7  EQU   AIAFLG3
AIALPMEC EQU   AIAFLG3
AIARSV6  EQU   AIAFLG3
AIATRPSP EQU   AIAFLG3
AIAPRINO EQU   AIAFLG3
AIARSV5  EQU   AIAFLG3
AIABADID EQU   AIAFLG2
AIAERROR EQU   AIAFLG2
AIAPRIER EQU   AIAFLG2
AIARSV4  EQU   AIAFLG2
AIAIORTY EQU   AIAFLG2
AIATERMR EQU   AIAFLG2
AIAFRAUX EQU   AIAFLG2
AIARSV1  EQU   AIAFLG1
AIASWPFX EQU   AIAFLG1
AIAPAGDS EQU   AIAFLG1
AIALSQA  EQU   AIAFLG1
AIADUPLX EQU   AIAFLG1
AIAVIO   EQU   AIAFLG1
AIAPRIV  EQU   AIAFLG1
AIAWRITE EQU   AIAFLG1
AIAOP    EQU   AIA+8
AIABQPA  EQU   AIA+4
AIAFQPA  EQU   AIA
@NM00071 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00070 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00069 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00068 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00067 EQU   FLCFSA
@NM00066 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00065 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00064 EQU   FLCIOA
@NM00063 EQU   FLCMCLA+15
@NM00062 EQU   FLCMCLA+14
@NM00061 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00060 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00059 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00058 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00057 EQU   FLCPER
@NM00056 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00055 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00054 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00053 EQU   FLCPIILC
@NM00052 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00051 EQU   FLCSVILC
@NM00050 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00049 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00048 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00121 EQU   @EL00001
@RT00123 EQU   @EL00001
@RF00150 EQU   @EL00001
@RC00125 EQU   @RC00119
@RF00199 EQU   @RC00195
@RF00267 EQU   @EL00002
@RC00262 EQU   @RC00259
@RF00279 EQU   @EL00002
@RF00282 EQU   @RC00276
@RF00276 EQU   @EL00002
@RC00127 EQU   @RC00125
@RC00139 EQU   @RC00125
@RC00265 EQU   @RC00262
@RF00264 EQU   @RC00262
@ENDDATA EQU   *
         END   ILRMSG00,(C'PLS1248',0701,76087)
