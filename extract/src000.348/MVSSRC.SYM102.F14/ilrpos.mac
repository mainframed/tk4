         TITLE 'ILRPOS - PAGE OPERATIONS STARTER                       *
                        '
ILRPOS   CSECT
         SPACE
         USING *,R15                      SET MODULE ID
         MODID BR=YES
         DROP  R15
*                                         EXTERNAL ENTRIES
         ENTRY ILRTRANS                   TRANSFER PAGE PROCESSING
         ENTRY ILRESTRT                   RESTART AIA PROCESSING
         ENTRY ILRTRPAG                   TRANSFER PG INITIALIZATION
         SPACE
         STM   R0,R14,ASMWKSA6(ASMVTPTR)  STORE CALLERS REGS
POSSETUP BALR  R6BASE,0                   ESTABLISH ADDRESSIBILITY
         USING *,R6BASE
*   ATAPOS=ON;                      /* SET POS FLAG IN ATA           */
*                                                                  0054
         OI    ATAPOS(ATAPTR),B'00000100'                          0054
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING OBTAINS THE INPUT ADDR, THE ASM CLASS LOCK, AND */
*   /* THE LGVT ADDR.                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0055
*   AIAPTR=ATAAIA;                  /* OBTAIN THE ADDR OF THE INPUT
*                                      AIA CHAIN                     */
         L     AIAPTR,ATAAIA(,ATAPTR)                              0055
*   RFY                                                            0056
*     R11 RSTD;                                                    0056
*   R11=ADDR(ASHLOCK);              /* OBTAIN ADDR ASM LOCK WORD FOR
*                                      SETLOCK                       */
         LA    R11,ASHLOCK(,RSMHDPTR)                              0057
*   GEN REFS(R11);                                                 0058
*              /* OBTAIN ASM CLASS LOCK */
GETASM1  SETLOCK OBTAIN,TYPE=ASM,ADDR=(11),MODE=UNCOND,               **
               RELATED=(VIO,ILRPOS(FREASM1))
*   RFY                                                            0059
*     R11 UNRSTD;                                                  0059
*   RFY                                                            0060
*     LGVTPTR RSTD;                                                0060
*   LGVTPTR=ASMLGVT;                /* OBTAIN ADDR LOGICAL GROUP   0061
*                                      VECTOR TABLE                  */
         L     LGVTPTR,ASMLGVT(,ASMVTPTR)                          0061
*   WORKPEND=OFF;                   /* CLEAR THE INTERNAL WORK     0062
*                                      PENDING FLAG                  */
         NI    WORKPEND(ASMVTPTR),B'01111111'                      0062
*                                                                  0063
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS DO LOOP GOES THRU EACH ELEMENT ON THE INPUT CHAIN,       */
*   /* VALIDITY CHECKS THE REQUEST, STARTS THE OPERATION WHERE       */
*   /* POSSIBLE, AND QUEUES THE ELEMENT WHEN NEEDED.                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0063
*   DO UNTIL AIAPTR=ZERO;           /* LOOP THROUGH CHAIN OF AIAS    */
*                                                                  0063
@DL00063 DS    0H                                                  0064
*     /***************************************************************/
*     /*                                                             */
*     /* THE FOLLOWING THREE TESTS DETERMINE IF THE REQUESTED        */
*     /* OPERATION IS VALID FOR THE GIVEN LOGICAL GROUP AT THIS TIME.*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0064
*     IF AIALGID>LGVMAXLG THEN                                     0064
         L     @12,AIALGID(,AIAPTR)                                0064
         C     @12,LGVMAXLG(,LGVTPTR)                              0064
         BH    @RT00064                                            0064
*       GOTO IDERROR;               /* LGN VALUE NOT IN LGVT GET OUT
*                                      IMMEDIATELY                   */
*     RFY                                                          0066
*       LGVTEPTR RSTD;                                             0066
*     LGVTEPTR=ADDR(LGVENTRS(AIALGID+ONE));/* LGID GIVES OFFSET INTO
*                                      LGVT ENTRIES FOR PROPER LGVTE */
         LR    @09,@12                                             0067
         SLA   @09,3                                               0067
         LA    LGVTEPTR,LGVENTRS(@09,LGVTPTR)                      0067
*     IF LGVELGID=AIALGID×LGVEASCB^=PSAAOLD THEN                   0068
         C     @12,LGVELGID(,LGVTEPTR)                             0068
         BE    @RT00068                                            0068
         CLC   LGVEASCB(4,LGVTEPTR),PSAAOLD                        0068
         BNE   @RT00068                                            0068
*       GOTO IDERROR;               /* LGID NOT ASSIGNED OR ASCB NOT
*                                      FOR THIS ADDRESS SPACE, GET 0069
*                                      OUT IMMEDIATELY               */
*     LGEPTR=LGVELGEP;              /* OBTAIN LGE ADDR               */
         L     LGEPTR,LGVELGEP(,LGVTEPTR)                          0070
*     RFY                                                          0071
*       LGVTEPTR UNRSTD;                                           0071
*     ATALGE=LGEPTR;                /* RRR-TRACK THE LGE-RRR         */
         ST    LGEPTR,ATALGE(,ATAPTR)                              0072
*     IF LGERELLG=ON×LGEGRINP=ON×LGESAVRQ=ON THEN                  0073
         TM    LGERELLG(LGEPTR),B'01110000'                        0073
         BNZ   @RT00073                                            0073
*       GOTO IDERROR;               /* GROUP-OP IN PROGRESS OR WORK
*                                      PENDING GET OUT IMMEDIATELY   */
*     SAVDLGID=AIALGID;             /* SAVE THE LGID OF THIS AIA     */
*                                                                  0075
         ST    @12,SAVDLGID(,ASMVTPTR)                             0075
*     /***************************************************************/
*     /*                                                             */
*     /* THIS DO STATEMENT LOOPS THRU ALL SEQUENTIAL AIAS FOR THE    */
*     /* SAME LOGICAL GROUP                                          */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0076
*     DO UNTIL AIAPTR=ZERO×AIALGID^=SAVDLGID;/* LOOP THROUGH AIA'S 0076
*                                      WITH SAME LGID                */
@DL00076 DS    0H                                                  0077
*       RFY                                                        0077
*         ASPCTPTR RSTD;                                           0077
*       ASPCTPTR=LGEASPCT;          /* OBTAIN THE ASPCT POINTER      */
         L     ASPCTPTR,LGEASPCT(,LGEPTR)                          0078
*       IF AIARPN<MAXALEXT THEN                                    0079
         L     @12,AIARPN(,AIAPTR)                                 0079
         CL    @12,@CF00518                                        0079
         BNL   @RF00079                                            0079
*         AIALPMEP=ADDR(ASPLPMES(AIARPN+ONE));/* THE RPN DOES NOT  0080
*                                      INDEX THE EXTENSIONS. THE BASE
*                                      LPME ADDR IS STORED IN THE AIA*/
         SLL   @12,2                                               0080
         LA    @12,ASPLPMES(@12,ASPCTPTR)                          0080
         ST    @12,AIALPMEP(,AIAPTR)                               0080
*       ELSE                                                       0081
*         DO;                       /* THIS DO HANDLES THE INDEXING
*                                      OF AN ASPCT EXT.              */
         B     @RC00079                                            0081
@RF00079 DS    0H                                                  0082
*           IF AIARPN>ASPMAXPN THEN                                0082
         CLC   AIARPN(4,AIAPTR),ASPMAXPN(ASPCTPTR)                 0082
         BH    @RT00082                                            0082
*             GOTO IDERROR;         /* ASST EXT PTR INDEX INVALID GET
*                                      OUT IMMEDIATELY               */
*                                                                  0083
*           /*********************************************************/
*           /*                                                       */
*           /* THIS DO STATEMENT LOOPS UNTIL BOTH AN ASST AND LPME   */
*           /* EXTENSION EXISTS FOR THE RELATIVE PAGE NUMBER.        */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0084
*           DO WHILE ASPASSTP(RPNA+ONE)=ZERO×ASPASSTP(RPNA+ONE)->  0084
*                 ASPASSTE(RPNAA+ONE)=ZERO;/* NO EXT., LOOP UNTIL  0084
*                                      CORRECT ONE IS CREATED        */
         B     @DE00084                                            0084
@DL00084 DS    0H                                                  0085
*             IF AIAOP=ACEIO&AIAWRITE=OFF THEN                     0085
         CLI   AIAOP(AIAPTR),0                                     0085
         BNE   @RF00085                                            0085
         TM    AIAWRITE(AIAPTR),B'10000000'                        0085
         BZ    @RT00085                                            0085
*               GOTO IDERROR;       /* READ REQUEST AND PAGE DOES NOT
*                                      EXIST GET OUT IMMEDIATELY     */
*                                                                  0086
*             /*******************************************************/
*             /*                                                     */
*             /* THE EXPAND ROUTINE WILL DETERMINE WHETHER AN ASST   */
*             /* AND A LPME EXTENSION ARE NEEDED, OR JUST A LPME     */
*             /* EXTENSION IS NEEDED. IT WILL THEN BUILD WHATEVER IS */
*             /* NECESSARY.                                          */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0087
*             CALL EXPAND;          /* CREATE THE EXTENSION          */
@RF00085 BAL   @14,EXPAND                                          0087
*             IF RTNCODE^=ZERO THEN                                0088
         L     @12,RTNCODE(,ASMVTPTR)                              0088
         LTR   @12,@12                                             0088
         BZ    @RF00088                                            0088
*               DO;                 /* EXPAND COULD NOT BE DONE      */
*                 AIAERROR=ON;      /* LOGICAL AIA ERROR             */
         OI    AIAERROR(AIAPTR),B'00000010'                        0090
*                 RTNCODE=CODE28;   /* UNABLE TO OBTAIN STORAGE      */
         MVC   RTNCODE(4,ASMVTPTR),@CF00486                        0091
*                 GOTO POSEND;      /* NO STORAGE GET OUT IMMEDIATELY*/
         B     POSEND                                              0092
*               END;                                               0093
*           END;                    /* END LOOP FOR CALLING EXPAND   */
@RF00088 DS    0H                                                  0094
@DE00084 SLR   @12,@12                                             0094
         LH    @15,RPNA(,AIAPTR)                                   0094
         SLA   @15,2                                               0094
         L     @15,ASPASSTP(@15,ASPCTPTR)                          0094
         CR    @15,@12                                             0094
         BE    @DL00084                                            0094
         SLR   @14,@14                                             0094
         IC    @14,RPNAA(,AIAPTR)                                  0094
         SLA   @14,2                                               0094
         L     @15,ASPASSTE(@14,@15)                               0094
         CR    @15,@12                                             0094
         BE    @DL00084                                            0094
*           AIALPMEP=ADDR(ASPASSTP(RPNA+ONE)->ASPASSTE(RPNAA+ONE)->
*               ASPLPMEE(RPNLL+ONE));/* THE EXTENDED LPME ADDR IS  0095
*                                      STORED IN THE AIA             */
         SLR   @12,@12                                             0095
         IC    @12,RPNLL(,AIAPTR)                                  0095
         SLA   @12,2                                               0095
         LA    @12,ASPLPMEE(@12,@15)                               0095
         ST    @12,AIALPMEP(,AIAPTR)                               0095
*         END;                      /* END DO FOR INDEXING ASPCT EXT.*/
*       AIALPMEC=ON;                /* INDICATE LPME ADDR IS IN AIA  */
@RC00079 OI    AIALPMEC(AIAPTR),B'00001000'                        0097
*       NXTAIA=AIANXAIA;            /* OBTAIN NEXT AIA FOR USE LATER */
         L     NXTAIA,AIANXAIA(,AIAPTR)                            0098
*       IF LGEWRKPD=OFF THEN                                       0099
         TM    LGEWRKPD(LGEPTR),B'10000000'                        0099
         BNZ   @RF00099                                            0099
*         DO;                       /* WORK NOT PENDING FOR THE LGE  */
*           IF AIALPMEP->ASPLOPIN=ON THEN                          0101
         L     @12,AIALPMEP(,AIAPTR)                               0101
         TM    ASPLOPIN(@12),B'00100000'                           0101
         BNO   @RF00101                                            0101
*             WORKPEND=ON;          /* PROCESS IN OPERATION FOR PAGE,
*                                      SET INTERNAL WORK PENDING FLAG*/
         OI    WORKPEND(ASMVTPTR),B'10000000'                      0102
*           ELSE                                                   0103
*             DO;                   /* PROCESS NOT IN OPERATION FOR
*                                      PAGE                          */
         B     @RC00101                                            0103
@RF00101 DS    0H                                                  0104
*               IF ACEOP=ACETRPAG THEN                             0104
         CLI   ACEOP(ACEPTR),4                                     0104
         BNE   @RF00104                                            0104
*                 DO;               /* INPUT IS A TRANSFER PAGE ACE  */
*                                                                  0106
*                   /*************************************************/
*                   /*                                               */
*                   /* INPUT WAS DETERMINED TO BE A TRANSFER PAGE    */
*                   /* ACE. IF STARTABLE, IT IS PROCESSED TO         */
*                   /* COMPLETION AND THEN FREED, ELSE IT IS QUEUED  */
*                   /* FOR LATER PROCESSING.                         */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0106
*                   RFY                                            0106
*                     ASCBPTR RSTD;                                0106
*                   ASCBPTR=ASPASCB;/* OBTAIN ADDR OF ASCB OWNING  0107
*                                      THIS LG                       */
         L     ASCBPTR,ASPASCB(,ASPCTPTR)                          0107
*                   ASCBNVSC=ASCBNVSC-ONE;/* DECR ASCB NON-VIO COUNT */
         LH    @15,ASCBNVSC(,ASCBPTR)                              0108
         BCTR  @15,0                                               0108
         STH   @15,ASCBNVSC(,ASCBPTR)                              0108
*                   ASCBVSC=ASCBVSC+ONE;/* INCR ASCB VIO COUNT       */
         LA    @15,1                                               0109
         AH    @15,ASCBVSC(,ASCBPTR)                               0109
         STH   @15,ASCBVSC(,ASCBPTR)                               0109
*                   RFY                                            0110
*                     ASCBPTR UNRSTD;                              0110
*                   ASMNVSC=ASMNVSC-ONE;/* DECR ASMVT NON-VIO COUNT  */
         L     @12,ASMNVSC(,ASMVTPTR)                              0111
         BCTR  @12,0                                               0111
         ST    @12,ASMNVSC(,ASMVTPTR)                              0111
*                   RFY                                            0112
*                    (R0,                                          0112
*                     R1) RSTD;                                    0112
*                   R0=ASMVSC;      /* GET ASMVT VIO COUNT           */
         L     R0,ASMVSC(,ASMVTPTR)                                0113
*VIOUPDT:                                                          0114
*                   R1=R0+ONE;      /* INCR COUNT                    */
VIOUPDT  LA    R1,1                                                0114
         ALR   R1,R0                                               0114
*                   CS(R0,R1,ASMVSC);/* UPDATE VIO COUNT FIELD IN  0115
*                                      ASMVT                         */
         CS    R0,@01,ASMVSC(ASMVTPTR)                             0115
*                   BC(NE,VIOUPDT); /* NOT SECCESSFUL, TRY AGAIN     */
         BC    7,VIOUPDT                                           0116
*                   RFY                                            0117
*                    (R0,                                          0117
*                     R1) UNRSTD;                                  0117
*                   RFY                                            0118
*                     LPMEPTR RSTD;                                0118
*                   LPMEPTR=ACETLPME;/* OBTAIN THE LPME ADDR         */
         L     LPMEPTR,ACETLPME(,ACEPTR)                           0119
*                   IF ACEAIAPT=ZERO THEN                          0120
         L     @12,ACEAIAPT(,ACEPTR)                               0120
         LTR   @12,@12                                             0120
         BNZ   @RF00120                                            0120
*                     DO;           /* NORMAL TRANSFER PAGE, SOURCE
*                                      LSID IN AIA                   */
*                       R13=ADDR(ASMSAVE);/* SAVE AREA FOR FREE SLOT */
*                                                                  0122
         LA    R13,ASMSAVE(,ASMVTPTR)                              0122
*                       /*********************************************/
*                       /*                                           */
*                       /* TRPPROC PROCESSES THE TRANSFER PAGE ACE TO*/
*                       /* COMPLETION.                               */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0123
*                       CALL TRPPROC;/* CALL THE TRANSFER PAGE     0123
*                                      ROUTINE                       */
         BAL   @14,TRPPROC                                         0123
*                       RFY                                        0124
*                        (LPMEPTR,                                 0124
*                         ASPCTPTR) UNRSTD;                        0124
*                       RFY                                        0125
*                         CELL@ RSTD;                              0125
*                       CELL@=ACEPTR;/* ADDR AREA TO BE RETURNED TO
*                                      POOL                          */
         LR    CELL@,ACEPTR                                        0126
*                                                                  0127
*                       /*********************************************/
*                       /*                                           */
*                       /* FREE THE ACE JUST PROCESSED AND HANDLE THE*/
*                       /* SPECIAL TRANSFER PAGE CASE WHERE I/O HAS  */
*                       /* NOT COMPLETED FOR THE AIA CONTAINING THE  */
*                       /* SOURCE LSID. BEGIN ILRGMA MACRO EXPANSION */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0127
*                       DO;         /* ILRGMA FREE                 0127
*                                      CELL(ACE)WORKREGS(R11,R12)    */
*                         DECLARE   /* ASMVT VECTOR TO ILRPEX        */
*                           ILRPEX ENTRY BASED(ASMPEX) VALRG(0);   0128
*                         DECLARE   /* MAP FOR CELL CONTROL WORDS    */
*                           1 GMACELL BASED BDY(WORD),             0129
*                            2 GMANEXT PTR(31);/* PTR NEXT FREE CELL */
*                         RESPECIFY                                0130
*                          (R0,                                    0130
*                           R1,                                    0130
*                           R11,                                   0130
*                           R12,                                   0130
*                           R14,                                   0130
*                           R15) RESTRICTED;                       0130
*                         RESPECIFY                                0131
*                           ASMPOOLS BASED(R11);                   0131
*                         RESPECIFY                                0132
*                           GMACELL BASED(R1);                     0132
*                         R11=ADDR(ASMACEPC);                      0133
         LA    R11,ASMACEPC(,ASMVTPTR)                             0133
*                         LM(R14,R15,ASMCPRSQ);/* GET CONTENTS OF Q  */
         LM    R14,R15,ASMCPRSQ(R11)                               0134
*GMA00011:                                                         0135
*                         IF R14^=0 THEN/* TEST RESERVE Q            */
GMA00011 LTR   R14,R14                                             0135
         BZ    @RF00135                                            0135
*                           DO;     /* REPLENISH ACE RESERVE Q       */
*                             R0=R14-1;/* SET UP FOR COMPARE AND SWAP*/
         LR    R0,R14                                              0137
         BCTR  R0,0                                                0137
*                             GMANEXT=R15;/* CELL TO FREE IN R1      */
         ST    R15,GMANEXT(,R1)                                    0138
*                             CDS(R14,R0,ASMCPRSQ);/* ADD CELL TO  0139
*                                      RESERVE Q                     */
         CDS   R14,R0,ASMCPRSQ(R11)                                0139
*                             BC(7,GMA00011);                      0140
         BC    7,GMA00011                                          0140
*                           END;                                   0141
*                         ELSE                                     0142
*                           DO;     /* RETURN ACE TO NORMAL Q        */
         B     @RC00135                                            0142
@RF00135 DS    0H                                                  0143
*                             R14=ASMCPAVL;                        0143
         L     R14,ASMCPAVL(,R11)                                  0143
*GMA00012:                                                         0144
*                             GMANEXT=R14;/* PUT ADDR CURRENT FIRST
*                                      IN INPUT CELL                 */
GMA00012 ST    R14,GMANEXT(,R1)                                    0144
*                             CS(R14,R1,ASMCPAVL);/* ADD INPUT CELL
*                                      TO POOL                       */
         CS    R14,@01,ASMCPAVL(R11)                               0145
*                             BC(7,GMA00012);                      0146
         BC    7,GMA00012                                          0146
*                           END;    /* ACE RETURNED TO NORMAL Q      */
*                         RESPECIFY                                0148
*                          (R0,                                    0148
*                           R1,                                    0148
*                           R11,                                   0148
*                           R12,                                   0148
*                           R14,                                   0148
*                           R15) UNRESTRICTED;                     0148
@RC00135 DS    0H                                                  0149
*                       END;        /* ILRGMA FREE                 0149
*                                      CELL(ACE)WORKREGS(R11,R12)    */
*                                                                  0149
*                       /*********************************************/
*                       /*                                           */
*                       /* END ILRGMA MACRO EXPANSION                */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0150
*                       RFY                                        0150
*                         CELL@ UNRSTD;                            0150
*                       ATAACE=ZERO;/* RRR-CLEAR THE ACE PTR IN THE
*                                      ATA-RRR                       */
         SLR   @12,@12                                             0151
         ST    @12,ATAACE(,ATAPTR)                                 0151
*                       RTNCODE=ZERO;/* TRANSFER PAGE SUCCESSFUL     */
         ST    @12,RTNCODE(,ASMVTPTR)                              0152
*                       GOTO POSEND;/* TRANSFER PAGE FINISHED, GET 0153
*                                      OUT IMMEDIATELY               */
         B     POSEND                                              0153
*                       RFY                                        0154
*                        (LPMEPTR,                                 0154
*                         ASPCTPTR) RSTD;                          0154
*                     END;          /* END DO FOR NORMAL TRANSFER  0155
*                                      PAGE ACE (NO AIAPTR)          */
*                   ELSE                                           0156
*                     ASPLOPIN=ON;  /* SPECIAL TRANSFER PAGE,      0156
*                                      PAGE-OUT MUST COMPLETE FOR AIA*/
@RF00120 OI    ASPLOPIN(LPMEPTR),B'00100000'                       0156
*                 END;              /* END DO FOR TRANSFER PAGE ACE  */
*                                                                  0158
*               /*****************************************************/
*               /*                                                   */
*               /* INPUT IS DETERMINED TO BE A STARTABLE PAGING AIA. */
*               /* LPMEPROC WILL CLEAR THE LSID ON A PAGE-OUT REUEST */
*               /* AND MOVE THE LSID TO THE AIA ON A PAGE-IN REQUEST.*/
*               /*                                                   */
*               /*****************************************************/
*                                                                  0158
*               ELSE                                               0158
*                 DO;               /* INPUT A PAGING AIA            */
         B     @RC00104                                            0158
@RF00104 DS    0H                                                  0159
*                   AIAPRINO=ON;    /* SET PROCESS IN OPERATION FLAG */
         OI    AIAPRINO(AIAPTR),B'01000000'                        0159
*                   CALL LPMEPROC;  /* PROCESS THE PAGE I/O REQUEST  */
         BAL   @14,LPMEPROC                                        0160
*                   RFY                                            0161
*                     ASPCTPTR UNRSTD;                             0161
*                   IF RTNCODE=ZERO THEN                           0162
         SLR   @12,@12                                             0162
         C     @12,RTNCODE(,ASMVTPTR)                              0162
         BNE   @RF00162                                            0162
*                     DO;           /* SUCCESSFUL EXECUTION LPMEPROC */
*                                                                  0163
*                       /*********************************************/
*                       /*                                           */
*                       /* QUEUE THE AIA TO THE ASMVT STAGING Q FOR  */
*                       /* I/O CONTROL.                              */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0164
*                       ASMIORQR=ASMIORQR+ONE;/* INCR I/O REQ.     0164
*                                      RECEIVED COUNT                */
         LA    @11,1                                               0164
         L     @09,ASMIORQR(,ASMVTPTR)                             0164
         ALR   @09,@11                                             0164
         ST    @09,ASMIORQR(,ASMVTPTR)                             0164
*                       ASHIOCNT=ASHIOCNT+ONE;/* INCR I/O REQ.     0165
*                                      STARTED COUNT                 */
         AL    @11,ASHIOCNT(,RSMHDPTR)                             0165
         ST    @11,ASHIOCNT(,RSMHDPTR)                             0165
*                       AIANXAIA=ZERO;/* INDICATE NO MORE ELEMENTS ON
*                                      QUEUE                         */
         ST    @12,AIANXAIA(,AIAPTR)                               0166
*                       IF ASMSTAGF=ZERO THEN/* NOTHING ON STAGING Q */
         C     @12,ASMSTAGF(,ASMVTPTR)                             0167
         BNE   @RF00167                                            0167
*                         ASMSTAGF=AIAPTR;/* MAKE THE AIA THE FIRST
*                                      ELEMENT ON THE QUEUE          */
         ST    AIAPTR,ASMSTAGF(,ASMVTPTR)                          0168
*                       ELSE                                       0169
*                         ASMSTAGL->AIANXAIA=AIAPTR;/* Q THE AIA TO
*                                      THE END OF THE QUEUE          */
         B     @RC00167                                            0169
@RF00167 L     @12,ASMSTAGL(,ASMVTPTR)                             0169
         ST    AIAPTR,AIANXAIA(,@12)                               0169
*                       ASMSTAGL=AIAPTR;/* MAKE LAST ELEMENT THE AIA */
@RC00167 ST    AIAPTR,ASMSTAGL(,ASMVTPTR)                          0170
*                     END;          /* END DO FOR SUCCESSFUL       0171
*                                      EXECUTION LPMEPROC            */
*                   ELSE                                           0172
*                     DO;           /* UNSUCCESSFUL LPMEPROC         */
         B     @RC00162                                            0172
@RF00162 DS    0H                                                  0173
*                       AIAPRINO=OFF;/* RESET AIA PROCESS IN       0173
*                                      OPERATION FLAG                */
         NI    AIAPRINO(AIAPTR),B'10111111'                        0173
*                       ASPLOPIN=OFF;/* RESET LPME PROCESS IN      0174
*                                      OPERATION FLAG                */
         NI    ASPLOPIN(LPMEPTR),B'11011111'                       0174
*                       GOTO POSEND;/* ERROR IN PAGE, GET OUT      0175
*                                      IMMEDIATELY                   */
         B     POSEND                                              0175
*                       RFY                                        0176
*                         LPMEPTR UNRSTD;                          0176
*                     END;          /* END UNSUCCESSFUL LPMEPROC     */
*                   RFY                                            0178
*                     ASPCTPTR RSTD;                               0178
@RC00162 DS    0H                                                  0179
*                 END;              /* END DO FOR PAGING AIA         */
*             END;                  /* END PROCESS NOT IN OPERATION
*                                      FOR PAGE                      */
@RC00104 DS    0H                                                  0181
*         END;                      /* END WORK NOT PENDING FOR LGE  */
@RC00101 DS    0H                                                  0182
*                                                                  0182
*       /*************************************************************/
*       /*                                                           */
*       /* COMMON PROCESSING FOR ALL GOOD AIAS AND ACES NOT          */
*       /* IMMEDIATELY STARTABLE. QUEUES THE AIA OR ACE TO THE LGE   */
*       /* PROCESS QUEUE.                                            */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0182
*       RFY                                                        0182
*         ASPCTPTR UNRSTD;                                         0182
@RF00099 DS    0H                                                  0183
*       IF LGEPROCF=ZERO THEN       /* NOTHING ON PROCESS Q          */
         L     @12,LGEPROCF(,LGEPTR)                               0183
         LTR   @12,@12                                             0183
         BNZ   @RF00183                                            0183
*         LGEPROCF=AIAPTR;          /* MAKE AIA/ACE THE FIRST ELEMENT
*                                      ON THE Q                      */
         ST    AIAPTR,LGEPROCF(,LGEPTR)                            0184
*       ELSE                                                       0185
*         DO;                                                      0185
         B     @RC00183                                            0185
@RF00183 DS    0H                                                  0186
*           LGEPROCL->AIAFQPA=AIAPTR;/* Q AIA/ACE TO END OF Q        */
         L     @12,LGEPROCL(,LGEPTR)                               0186
         ST    AIAPTR,AIAFQPA(,@12)                                0186
*           AIABQPA=LGEPROCL;       /* MAKE AIA POINT TO PREVIOUS  0187
*                                      AIA/ACE                       */
         ST    @12,AIABQPA(,AIAPTR)                                0187
*         END;                                                     0188
*       LGEPROCL=AIAPTR;            /* MAKE LAST Q ELEMENT THE     0189
*                                      AIA/ACE                       */
@RC00183 ST    AIAPTR,LGEPROCL(,LGEPTR)                            0189
*       IF ACEOP=ACETRPAG THEN                                     0190
         CLI   ACEOP(ACEPTR),4                                     0190
         BNE   @RF00190                                            0190
*         DO;                       /* TRANSFER PAGE ACE             */
*           NXTAIA=ZERO;            /* ONLY ONE TRANS PG ACE PASSED
*                                      AT A TIME                     */
         SLR   NXTAIA,NXTAIA                                       0192
*           ACELGE=LGEPTR;          /* ADDR OF LGE THE ACE IS Q'ED TO*/
         ST    LGEPTR,ACELGE(,ACEPTR)                              0193
*         END;                                                     0194
*       ELSE                                                       0195
*         DO;                       /* INPUT IS AN AIA               */
         B     @RC00190                                            0195
@RF00190 DS    0H                                                  0196
*           IF AIAPRINO=OFF THEN    /* AIA WAS NOT Q'ED TO STAGING Q
*                                      SO RQR WAS NOT INCREMENTED    */
         TM    AIAPRINO(AIAPTR),B'01000000'                        0196
         BNZ   @RF00196                                            0196
*             ASMIORQR=ASMIORQR+ONE;/* INCR I/O REQ. RECEIVED COUNT  */
         LA    @12,1                                               0197
         AL    @12,ASMIORQR(,ASMVTPTR)                             0197
         ST    @12,ASMIORQR(,ASMVTPTR)                             0197
*           AIALGE=LGEPTR;          /* ADDR OF LGE THE AIA IS Q'ED TO*/
@RF00196 ST    LGEPTR,AIALGE(,AIAPTR)                              0198
*         END;                                                     0199
*       AIAPTR=NXTAIA;              /* ADDR NEXT AIA ON INPUT STRING */
@RC00190 LR    AIAPTR,NXTAIA                                       0200
*       ATAAIA=AIAPTR;              /* RRR-TRACK THE NEW AIA-RRR     */
         ST    AIAPTR,ATAAIA(,ATAPTR)                              0201
*     END;                          /* ENDS LOOP THRU SEQUENTIAL AIAS
*                                      WITH SAME LGID                */
@DE00076 LTR   AIAPTR,AIAPTR                                       0202
         BZ    @DC00076                                            0202
         CLC   AIALGID(4,AIAPTR),SAVDLGID(ASMVTPTR)                0202
         BE    @DL00076                                            0202
@DC00076 DS    0H                                                  0203
*     IF WORKPEND=ON THEN                                          0203
         TM    WORKPEND(ASMVTPTR),B'10000000'                      0203
         BNO   @RF00203                                            0203
*       DO;                         /* SETS LGE WORK PENDING AND   0204
*                                      CLEARS INTERNAL FLAG          */
*         LGEWRKPD=ON;              /* SET WORK PENDING IF NEEDED  0205
*                                      WHEN ALL AIAS FOR THE SAME LG
*                                      HAVE BEEN PROCESSED           */
         OI    LGEWRKPD(LGEPTR),B'10000000'                        0205
*         WORKPEND=OFF;             /* RESET INTERNAL WORK PENDING 0206
*                                      FLAG                          */
         NI    WORKPEND(ASMVTPTR),B'01111111'                      0206
*       END;                                                       0207
*   END;                            /* ENDS LOOP THRU CHAIN OF AIAS  */
@RF00203 DS    0H                                                  0208
@DE00063 SLR   @12,@12                                             0208
         CR    AIAPTR,@12                                          0208
         BNE   @DL00063                                            0208
*   RFY                                                            0209
*     LGVTPTR UNRSTD;                                              0209
*   RTNCODE=CODE00;                 /* OPERATIONS COMPLETED        0210
*                                      SUCCESSFULLY                  */
         ST    @12,RTNCODE(,ASMVTPTR)                              0210
*   GOTO POSEND;                    /* OPERATIONS SUCCESSFUL GET OUT
*                                      IMMEDIATELY                   */
         B     POSEND                                              0211
*                                                                  0212
*   /*****************************************************************/
*   /*                                                               */
*   /* ALL ERRORS WHICH RESULT IN BAD ID'S COME HERE. MY CALLER      */
*   /* RETURNS TO RSM WHICH HANDLES THIS RETURN CODE.                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0212
*IDERROR:                                                          0212
*   AIABADID=ON;                    /* AIA BAD LGID FLAG             */
IDERROR  OI    AIABADID(AIAPTR),B'00000001'                        0212
*   RTNCODE=CODE04;                 /* INDICATE BAD LGN              */
*                                                                  0213
         MVC   RTNCODE(4,ASMVTPTR),@CF00049                        0213
*   /*****************************************************************/
*   /*                                                               */
*   /* ATA REFLECTS THE ERROR AIA OR ACE IF ONE EXISTS, ELSE THAT    */
*   /* THAT FIELD IS CLEAR. IN ANY CASE ALL PROCESSING FALLS THRU THE*/
*   /* REMAINING CODE IN ORDER TO RETURN TO THE CALLER.              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0214
*POSEND:                                                           0214
*   ATALGE=ZERO;                    /* STOP TRACKING THE LGE         */
POSEND   SLR   @12,@12                                             0214
         ST    @12,ATALGE(,ATAPTR)                                 0214
*   RFY                                                            0215
*     R11 RSTD;                                                    0215
*   R11=ADDR(ASHLOCK);              /* OBTAIN ADDR ASM LOCK WORD FOR
*                                      SETLOCK                       */
         LA    R11,ASHLOCK(,RSMHDPTR)                              0216
*   GEN REFS(R11);                                                 0217
*              /* RELEASE ASM LOCK */
FREASM1  SETLOCK RELEASE,TYPE=ASM,ADDR=(11),                          **
               RELATED=(VIO,ILRPOS(GETASM1))
*ILRCRPS1:                                                         0218
*   ATAPOS=OFF;                     /* CLEAR ENTRY FOOTPRINT IN ATA  */
ILRCRPS1 NI    ATAPOS(ATAPTR),B'11111011'                          0218
*   GEN REFS(R15,R0,R14,ASMWKSA6,ASMVTPTR);                        0219
*                                        /* RESTORE CALLER'S REGS */
         LM R0,R15,ASMWKSA6(ASMVTPTR)     RESTORE REGS
         BR R14                           RETURN
*ILRTRANS:                                                         0220
*   ENTRY;                          /* EXTERNAL ENTRY                */
*/********************************************************************/
*/*                                                                  */
*/*  THE TRANSFER PAGE ROUTINE IS CALLED EXTERNALLY BY THE SRB       */
*/*  CONTROLLER OR INTERNALLY BY POS ITSELF TO PROCESS A TRANSFER    */
*/*  PAGE ACE. THE ASM CLASS LOCK MUST BE HELD ON ENTRY.             */
*/*                                                                  */
*/*  INPUT: R13 - CALLER'S SAVE AREA ADDR                            */
*/*         R14 - RETURN ADDR                                        */
*/*         R0  - SAVE AREA ADDR FOR FREE SLOT ROUTINE               */
*/*         R1  - ACEPTR                                             */
*/*         R2 THRU R4 IS STANDARD AS IN MAPPING MACRO POINTERS      */
*/*                                                                  */
*/*  OUTPUT: UPDATED VIO SLOT COUNTS, MODIFIED FLAGS IN THE ASPCT,   */
*/*          LPME, AND ACE, THE SOURCE LSID IS MOVED TO THE LPME, A  */
*/*          SLOT MAY BE FREED.                                      */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*TRANSPG: CHART (AREF)                                             */
*/*        HEADER                                                  0221
*/*        ILRPOS                                                  0221
*/* ILRTRANS (TRPPROC) - TRANSFER PAGE ROUTINE                       */
*/*ILRTRANS: E EXTERNAL ENTRY                                        */
*/*        P SAVE CALLER'S REGS                                      */
*/*        P ESTABLISH ADDRESSIBILITY                                */
*/*        P RECORD ENTRY INFORMATION IN ATA                         */
*/*        N ACEPTR = R1                                             */
*/*        P STORE THE ACEPTR IN THE ATA                             */
*/*        P (,%POS28) LGEPTR EQUALS ACELGE                          */
*/*TRPPROC: E INTERNAL ENTRY                                         */
*/*        P SAVE RETURN ADDRESS                                     */
*/*%POS28: P ASPCT PTR (ASPCTPTR) = LGEASPCT                         */
*/*        P LPME PTR (LPMEPTR) = ACE TARGET LPME (ACETLPME)         */
*/*        D (Y,,N,%POS30) LPME LSID VALID (ASPLVALD)                */
*/*        D (Y,,N,%POS29) LSID SAVED (ASPLSAVE)                     */
*/*        P SET RELEASE AFTER SAVE FLAG IN LPME (ASPLSVRP)          */
*/*        P SET RELEASE AFTER SAVE FLAG IN ASPCT HDR (ASPSAVRP)     */
*/*        P (,%POS30) RESET LSID SAVED FLAG (ASPLSAVE)              */
*/*%POS29: D (N,,Y,%POS30) READ I/O ERROR (ASPLIOER)                 */
*/*        P SET REGS FOR FREE SLOT ROUTINE OF I/O CONTROL           */
*/*        S ILRFRSLT: FREE SLOT IDENTIFIED BY LSID IN LPME          */
*/*        P DECR VIO SLOT CNTS, ASCBVSC, AND ASMVSC WITH CS         */
*/*%POS30: P RESET I/O ERROR FLAG (ASPLIOER)                         */
*/*        P MOVE THE SOURCE LSID (ACEVLSID) TO THE LPME (ASPVLSID)  */
*/*        P SET THE LSID VALID FLAG (ASPLVALD)                      */
*/*        P RESET THE PROCESS IN OPERATION FOR THE PG FLG (ASPLOPIN)*/
*/*%POS31: D (Y,,N,%POS32) EXTERNAL ENTRY                            */
*/*        P CLEAR THE ACEPTR IN THE ATA                             */
*/*        P RESET ENTRY INFORMATION IN ATA                          */
*/*        P RESTORE CALLER'S REGS                                   */
*/*%POS32: R RETURN TO CALLER                                        */
*/*TRANSPG: END                                                      */
*/********************************************************************/
*                                                                  0221
*                                                                  0221
*   /*****************************************************************/
*   /*                                                               */
*   /* EXTERNAL ENTRY: SAVES REGS, INITIALIZES POINTERS, CALLS       */
*   /* INTERNAL ENTRY, RESTORES REGS, AND RETURNS.                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0221
*   RFY                                                            0221
*    (R1,                                                          0221
*     R13,                                                         0221
*     R0) RSTD;                                                    0221
*   GEN REFS(R14,R12,R13,R6BASE);                                  0222
ILRTRANS STM  R14,R12,12(R13)           STORE CALLERS REGS
TRNSETUP BALR R6BASE,0                  ESTABLISH ADDRESSIBILITY
         LA   R12,TRNSETUP-POSSETUP     SETS CONTENTS OF BASE REG TO
         SR   R6BASE,R12                THAT OF MAINLINE POS
*   ACEPTR=R1;                      /* OBTAIN ADDR OF THE INPUT ACE  */
         LR    ACEPTR,R1                                           0223
*   RFY                                                            0224
*     R1 UNRSTD;                                                   0224
*   ATAACE=ACEPTR;                  /* RRR-TRACK THE ACE-RRR         */
         ST    ACEPTR,ATAACE(,ATAPTR)                              0225
*   LGEPTR=ACELGE;                  /* OBTAIN THE LGE ADDR           */
         L     LGEPTR,ACELGE(,ACEPTR)                              0226
*   RFY                                                            0227
*    (ASPCTPTR,                                                    0227
*     LPMEPTR) RSTD;                                               0227
*   ASPCTPTR=LGEASPCT;              /* OBTAIN THE ASPCT ADDR         */
         L     ASPCTPTR,LGEASPCT(,LGEPTR)                          0228
*   LPMEPTR=ACETLPME;               /* OBTAIN THE LPME ADDR          */
         L     LPMEPTR,ACETLPME(,ACEPTR)                           0229
*   RFY                                                            0230
*     R11 RSTD;                                                    0230
*   R11=R13;                        /* SAVE ADDR CALLER'S SAVE AREA  */
         LR    R11,R13                                             0231
*   R13=R0;                         /* OBTAIN ADDR SAVE AREA FOR FREE
*                                      SLOT                          */
         LR    R13,R0                                              0232
*   RFY                                                            0233
*     R0 UNRSTD;                                                   0233
*   CALL TRPPROC;                   /* TRANSFER PAGE ROUTINE,      0234
*                                      INTERNAL ENTRY                */
         BAL   @14,TRPPROC                                         0234
*   R13=R11;                        /* RESTORE ADDR CALLER'S SAVE  0235
*                                      AREA                          */
         LR    R13,R11                                             0235
*   ATAACE=ZERO;                    /* STOP TRACKING THE ACE         */
         SLR   @12,@12                                             0236
         ST    @12,ATAACE(,ATAPTR)                                 0236
*TRANSEND:                                                         0237
*   GEN REFS(R14,R12,R13);                                         0237
TRANSEND DS    0H                                                  0237
        LM   R14,R12,12(R13)      RESTORE CALLERS REGS
        BR   R14                  RETURN
*                                                                  0238
*   /*****************************************************************/
*   /*                                                               */
*   /* INTERNAL ENTRY: SETS ASPCT AND LPME FLAGS, MOVES SOURCE LSID  */
*   /* TO THE LPME, AND FREES THE SLOT IF NECESSARY. R13 = SAVE AREA */
*   /* ADDR TO BE USED BY FREE SLOT.                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0238
*TRPPROC:                                                          0238
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);/* INTERNAL ENTRY           */
         B     @PB00002                                            0238
TRPPROC  DS    0H                                                  0239
*   RFY                                                            0239
*    (R8,                                                          0239
*     R14,                                                         0239
*     R13,                                                         0239
*     R11,                                                         0239
*     ASPCTPTR,                                                    0239
*     LPMEPTR) RSTD;                                               0239
*   R8=R14;                         /* MAINTAIN RETURN ADDR,       0240
*                                      DESTROYED IN CALL TO FREE SLOT*/
         LR    R8,R14                                              0240
*   RFY                                                            0241
*     R14 UNRSTD;                                                  0241
*   IF ASPLVALD=ON THEN                                            0242
         TM    ASPLVALD(LPMEPTR),B'10000000'                       0242
         BNO   @RF00242                                            0242
*     IF ASPLSAVE=ON THEN                                          0243
         TM    ASPLSAVE(LPMEPTR),B'01000000'                       0243
         BNO   @RF00243                                            0243
*       DO;                         /* VALID LPME LSID AND LSID    0244
*                                      ALREADY SAVED                 */
*         ASPLSVRP=ON;              /* SET LPME RELEASE AFTER SAVE 0245
*                                      FLAG                          */
         OI    ASPLSVRP(LPMEPTR),B'00001000'                       0245
*         ASPSAVRP=ON;              /* SET ASPCT RELEASE AFTER SAVE
*                                      FLAG                          */
         OI    ASPSAVRP(ASPCTPTR),B'01000000'                      0246
*         ASPLSAVE=OFF;             /* RESET LSID SAVED FLAG         */
         NI    ASPLSAVE(LPMEPTR),B'10111111'                       0247
*       END;                        /* END DO FOR SAVED LSID         */
*     ELSE                                                         0249
*       DO;                         /* LSID NOT ALREADY SAVED        */
         B     @RC00243                                            0249
@RF00243 DS    0H                                                  0250
*         IF ASPLIOER=OFF THEN                                     0250
         TM    ASPLIOER(LPMEPTR),B'00010000'                       0250
         BNZ   @RF00250                                            0250
*           DO;                     /* NO READ I/O ERROR             */
*             RFY                                                  0252
*               R1 RSTD;                                           0252
*             R1=ASPVLSID;          /* OBTAIN THE LSID FOR FREE SLOT */
         L     R1,ASPVLSID-1(,LPMEPTR)                             0253
         LA    R1,0(,R1)                                           0253
*             CALL ILRFRSL1;        /* FREE SLOT ROUTINE, FREES LSID
*                                      IN R1                         */
         L     @15,ASMPFRSL(,ASMVTPTR)                             0254
         BALR  @14,@15                                             0254
*           END;                                                   0255
*         RFY                                                      0256
*          (R0,                                                    0256
*           ASCBPTR) RSTD;                                         0256
@RF00250 DS    0H                                                  0257
*         ASCBPTR=ASPASCB;          /* OBTAIN ASCB OWNING THIS LG    */
         L     ASCBPTR,ASPASCB(,ASPCTPTR)                          0257
*         ASCBVSC=ASCBVSC-ONE;      /* DECR ASCB VIO COUNT           */
         LH    @15,ASCBVSC(,ASCBPTR)                               0258
         BCTR  @15,0                                               0258
         STH   @15,ASCBVSC(,ASCBPTR)                               0258
*         RFY                                                      0259
*           ASCBPTR UNRSTD;                                        0259
*         R0=ASMVSC;                /* GET ASMVT VIO COUNT           */
         L     R0,ASMVSC(,ASMVTPTR)                                0260
*VIODECR:                                                          0261
*         R1=R0-ONE;                /* DECR COUNT                    */
VIODECR  LR    R1,R0                                               0261
         BCTR  R1,0                                                0261
*         CS(R0,R1,ASMVSC);         /* DECR VIO COUNT FIELD IN ASMVT */
         CS    R0,@01,ASMVSC(ASMVTPTR)                             0262
*         BC(NE,VIODECR);           /* NOT SECCESSFUL,TRY AGAIN      */
         BC    7,VIODECR                                           0263
*         RFY                                                      0264
*          (R0,                                                    0264
*           R1) UNRSTD;                                            0264
*       END;                        /* END DO FOR VALID LSID         */
*   ASPLIOER=OFF;                   /* RESET I/O ERROR FLAG          */
@RC00243 DS    0H                                                  0266
@RF00242 NI    ASPLIOER(LPMEPTR),B'11101111'                       0266
*   ASPVLSID=ACEVLSID;              /* MOVE THE SOURCE LSID TO LPME  */
         MVC   ASPVLSID(3,LPMEPTR),ACEVLSID(ACEPTR)                0267
*   ASPLVALD=ON;                    /* SET LSID VALID FLAG           */
*   ASPLOPIN=OFF;                   /* RESET PROCESS IN OPERATION  0269
*                                      FLAG                          */
         OI    ASPLVALD(LPMEPTR),B'10000000'                       0269
         NI    ASPLOPIN(LPMEPTR),B'11011111'                       0269
*   RFY                                                            0270
*     R14 RSTD;                                                    0270
*   R14=R8;                         /* RESTORE RETURN ADDRESS        */
         LR    R14,R8                                              0271
*   END TRPPROC;                                                   0272
@EL00002 DS    0H                                                  0272
@EF00002 DS    0H                                                  0272
@ER00002 BR    @14                                                 0272
*ILRESTRT:                                                         0273
*   ENTRY;                                                         0273
*                                                                  0273
@EC00273 DS    0H                                                  0274
*/********************************************************************/
*/*                                                                  */
*/*  ILRESTRT IS CALLED BY THE SRB CONTROLLER TO START PROCESSING    */
*/*  AIAS WHICH COULD NOT BE STARTED INITIALLY DUE TO WORK PENDING.  */
*/*  INPUT CONSISTS OF A CHAIN OF STARTABLE AIAS. RESTART USES THE   */
*/*  WORK-SAVE AREA OF POS (ASMWKSA6) SINCE THE SALLOC LOCK IS HELD. */
*/*                                                                  */
*/*  INPUT: R13 - CALLER'S SAVE AREA ADDR                            */
*/*         R14 - RETURN ADDR                                        */
*/*         R1  - AIAPTR                                             */
*/*         R2 THRU R4 ARE STANDARD AS IN MAPPING MACRO POINTERS     */
*/*                                                                  */
*/*  OUTPUT: AIAS ARE QUEUED TO THE STAGING QUEUE AND/OR TO THE      */
*/*          PART ERROR QUEUE, AND THE I/O REQUEST COUNT IS UPDATED. */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*RESTART: CHART (AREF)                                             */
*/*        HEADER                                                  0274
*/*        ILRPOS                                                  0274
*/* ILRESTRT - RESTART ROUTINE CALLED BY SRB CONTROLLER              */
*/*ILRESTRT: E ENTRY                                                 */
*/*        P SAVE CALLER'S REGS                                      */
*/*        P ESTABLISH ADDRESSIBILITY                                */
*/*        P RECORD ENTRY INFORMATION IN ATA                         */
*/*        L SETLOCK: UNCONDITIONAL OBTAIN SALLOC LOCK               */
*/*        L SETLOCK: UNCONDITIONAL OBTAIN ASM CLASS LOCK, DISABLED  */
*/*        N AIAPTR=R1, ASMHDPTR=R2, ASMVTPTR=R3, ATAPTR=R4          */
*/*        P STORE THE AIAPTR IN THE ATA                             */
*/*        P INITIALIZE PAGE AIAS IN THE ATA TO ZERO                 */
*/*%POS33: D (N,,Y,%POS36) AIAPTR = ZERO                             */
*/*        P GET ADDR NEXT AIA AND STORE IN NXTAIA                   */
*/*        P INCR I/O REQ STARTED CNT (ASHIOCNT)                     */
*/*        P INITIALIZE REGS FOR LPMEPROC                            */
*/*        S LPMEPROC: SUBRTN TO PROCESS THE LPME                    */
*/*        D (Y,,N,%POS34) RETURN CODE = ZERO                        */
*/*        N QUEUE AIA TO STAGING QUEUE (ASMSTAGQ) FOR I/O CONTROL   */
*/*        D (Y,,N,%POS50) ANYTHING ON QUEUE                         */
*/*        P NEXT AIA (AIANXAIA) OF ASMSTAGL = AIAPTR                */
*/*        P (,%POS51) LAST AIA (ASMSTAGL) = AIAPTR                  */
*/*%POS50: P FIRST AND LAST AIAPTRS OF ASMSTAGQ = AIAPTR             */
*/*        P STORE NXTAIA IN THE ATA                                 */
*/*        P (,%POS35) NEXT AIA OF AIAPTR = 0                        */
*/*%POS34: N QUEUE AIA TO PART ERROR QUEUE (USE CS)                  */
*/*        P STORE NXTAIA IN THE ATA                                 */
*/*        P NEXT AIA (AIANXAIA) = PARTAIAE                          */
*/*        P PARTAIAE = AIAPTR                                       */
*/*%POS35: P (,%POS33) AIAPTR = NEXT AIA (NXTAIA)                    */
*/*%POS36: L SETLOCK: UNCONDITIONAL RELEASE ASM CLASS LOCK DISABLED  */
*/*        P SET REGS FOR ILRQIOE SUBRTN OF I/O CONTROL              */
*/*        N NOTE THE ATAAIA IS NOW ZERO                             */
*/*        S ILRQIOE: PROCESSES STRING OF STARTABLE AIAS             */
*/*        L SETLOCK: UNCONDITIONAL RELEASE SALLOC LOCK              */
*/*%POS38: P RESET ENTRY INFORMATION IN ATA                          */
*/*        P RESTORE CALLER'S REGS                                   */
*/*        R RETURN TO SRB CONTROLLER                                */
*/*RESTART:  END                                                     */
*/********************************************************************/
*                                                                  0274
*   RFY                                                            0274
*    (R1,                                                          0274
*     R13) RSTD;                                                   0274
*   GEN REFS(R14,R12,R13,R6BASE);                                  0275
ILRESTRT STM R14,R12,12(R13)       STORE CALLERS REGS
RSTSETUP BALR R6BASE,0             ESTABLISH ADDRESSIBILITY
         LA   R12,RSTSETUP-POSSETUP SETS CONTENTS OF BASE REG TO
         SR   R6BASE,R12           THAT OF MAINLINE POS
*   AIAPTR=R1;                      /* OBTAIN ADDR INPUT AIA CHAIN   */
         LR    AIAPTR,R1                                           0276
*   RFY                                                            0277
*     R1 UNRSTD;                                                   0277
*   RFY                                                            0278
*    (R11,                                                         0278
*     R10) RSTD;                                                   0278
*                                                                  0278
*   /*****************************************************************/
*   /*                                                               */
*   /* OBTAIN BOTH THE SALLOC AND ASM LOCKS, AND LOOP THRU THE CHAIN */
*   /* OF INPUT AIAS.                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0279
*   R10=R13;                        /* SAVE ADDR CALLER'S SAVE AREA  */
         LR    R10,R13                                             0279
*   GEN REFS(ASHLOCK,RSMHDPTR) SETS(R11);                          0280
GETSAL   SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,                      **
               RELATED=(VIO,ILRPOS(FRESAL))
         LA  R11,ASHLOCK(,RSMHDPTR)   OBTAIN ADDR ASM LOCKWORD
GETASM2  SETLOCK OBTAIN,TYPE=ASM,ADDR=(11),MODE=UNCOND,               **
               DISABLED,RELATED=(VIO,ILRPOS(FREASM2))
*   R13=R10;                        /* RESTORE ADDR CALLER'S SAVE  0281
*                                      AREA                          */
         LR    R13,R10                                             0281
*   ATAAIA=AIAPTR;                  /* RRR-TRACK THE FIRST AIA-RRR   */
         ST    AIAPTR,ATAAIA(,ATAPTR)                              0282
*   ATAAIAQ=ZERO;                   /* RRR-ZERO PAGING AIA STRING IN
*                                      ATA-RRR                       */
         SLR   @15,@15                                             0283
         ST    @15,ATAAIAQ(,ATAPTR)                                0283
*   RFY                                                            0284
*    (R11,                                                         0284
*     R10) UNRSTD;                                                 0284
*   DO UNTIL AIAPTR=ZERO;           /* LOOP THRU THE CHAIN OF AIAS   */
@DL00285 DS    0H                                                  0286
*     NXTAIA=AIANXAIA;              /* OBTAIN ADDR NEXT AIA IN CHAIN */
         L     NXTAIA,AIANXAIA(,AIAPTR)                            0286
*     ASHIOCNT=ASHIOCNT+ONE;        /* INCR I/O REQ. STARTED COUNT   */
         LA    @15,1                                               0287
         AL    @15,ASHIOCNT(,RSMHDPTR)                             0287
         ST    @15,ASHIOCNT(,RSMHDPTR)                             0287
*     LGEPTR=AIALGE;                /* OBTAIN THE LGE ADDRESS        */
         L     LGEPTR,AIALGE(,AIAPTR)                              0288
*     RFY                                                          0289
*       ASPCTPTR RSTD;                                             0289
*     ASPCTPTR=LGEASPCT;            /* OBTAIN THE ASPCT ADDR         */
         L     ASPCTPTR,LGEASPCT(,LGEPTR)                          0290
*     CALL LPMEPROC;                /* PROCESS THE LPME              */
         BAL   @14,LPMEPROC                                        0291
*     IF RTNCODE=CODE00 THEN                                       0292
         SLR   @15,@15                                             0292
         C     @15,RTNCODE(,ASMVTPTR)                              0292
         BNE   @RF00292                                            0292
*       DO;                         /* LPMEPROC SUCCESSFUL           */
*                                                                  0293
*         /***********************************************************/
*         /*                                                         */
*         /* QUEUE THE GOOD AIA TO THE ASMVT STAGING QUEUE           */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0294
*         IF ASMSTAGF=ZERO THEN     /* NOTHING ON STAGING QUEUE      */
         C     @15,ASMSTAGF(,ASMVTPTR)                             0294
         BNE   @RF00294                                            0294
*           ASMSTAGF=AIAPTR;        /* MAKE THE AIA THE FIRST ELEMENT
*                                      ON QUEUE                      */
         ST    AIAPTR,ASMSTAGF(,ASMVTPTR)                          0295
*         ELSE                                                     0296
*           ASMSTAGL->AIANXAIA=AIAPTR;/* QUEUE THE AIA TO THE END OF
*                                      THE QUEUE                     */
         B     @RC00294                                            0296
@RF00294 L     @15,ASMSTAGL(,ASMVTPTR)                             0296
         ST    AIAPTR,AIANXAIA(,@15)                               0296
*         ASMSTAGL=AIAPTR;          /* MAKE LAST Q ELEMENT THE AIA   */
@RC00294 ST    AIAPTR,ASMSTAGL(,ASMVTPTR)                          0297
*         ATAAIA=NXTAIA;            /* RRR-TRACK NEXT AIA-RRR        */
         ST    NXTAIA,ATAAIA(,ATAPTR)                              0298
*         AIANXAIA=ZERO;            /* INIDCATES NO MORE ELEMENTS ON
*                                      QUEUE                         */
         SLR   @15,@15                                             0299
         ST    @15,AIANXAIA(,AIAPTR)                               0299
*       END;                        /* END DO FOR SUCCESSFUL LPMEPROC*/
*     ELSE                                                         0301
*       DO;                         /* ERROR AIA PROCESSING          */
*                                                                  0301
         B     @RC00292                                            0301
@RF00292 DS    0H                                                  0302
*         /***********************************************************/
*         /*                                                         */
*         /* QUEUE THE ERROR AIA TO THE PART ERROR QUEUE FOR I/O     */
*         /* CONTROL USING COMPARE AND SWAP                          */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0302
*         RFY                                                      0302
*          (PARTPTR,                                               0302
*           R1) RSTD;                                              0302
*         ATAAIA=NXTAIA;            /* RRR-TRACK NEXT AIA-RRR        */
         ST    NXTAIA,ATAAIA(,ATAPTR)                              0303
*         PARTPTR=ASMPART;          /* OBTAIN ADDR OF THE PART       */
         L     PARTPTR,ASMPART(,ASMVTPTR)                          0304
*         R1=PARTAIAE;              /* GET ADDR OF ERROR QUEUE       */
         L     R1,PARTAIAE(,PARTPTR)                               0305
*TRYAGAIN:                                                         0306
*         AIANXAIA=R1;              /* CHAIN ERROR Q TO AIA          */
TRYAGAIN ST    R1,AIANXAIA(,AIAPTR)                                0306
*         CS(R1,AIAPTR,PARTAIAE);   /* MAKE AIA FIRST OF ERROR Q     */
         CS    R1,@07,PARTAIAE(PARTPTR)                            0307
*         BC(NE,TRYAGAIN);          /* NOT SUCCESSFUL, TRY AGAIN     */
         BC    7,TRYAGAIN                                          0308
*         RFY                                                      0309
*          (PARTPTR,                                               0309
*           R1) UNRSTD;                                            0309
*       END;                        /* END ERROR AIA PROCESSING      */
*     AIAPTR=NXTAIA;                /* DO NEXT AIA                   */
@RC00292 LR    AIAPTR,NXTAIA                                       0311
*   END;                            /* END LOOP THRU AIAS            */
@DE00285 LTR   AIAPTR,AIAPTR                                       0312
         BNZ   @DL00285                                            0312
*                                                                  0313
*   /*****************************************************************/
*   /*                                                               */
*   /* ATAAIA IS NOW ZERO, ALL AIAS HAVE BEEN PROCESSED              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0313
*   RFY                                                            0313
*    (R11,                                                         0313
*     R10) RSTD;                                                   0313
*   R10=R13;                        /* SAVE ADDR CALLER'S SAVE AREA  */
         LR    R10,R13                                             0314
*   R11=ADDR(ASHLOCK);              /* OBTAIN ADDR ASM LOCKWORD      */
         LA    R11,ASHLOCK(,RSMHDPTR)                              0315
*   GEN REFS(R11);                                                 0316
*                   /* RELEASE ASM CLASS LOCK */
FREASM2    SETLOCK RELEASE,TYPE=ASM,ADDR=(11),DISABLED,               **
               RELATED=(VIO,ILRPOS(GETASM2))
*   CALL ILRQIOE;                   /* QIOE OF I/O CONTROL           */
         L     @15,ASMPQIOE(,ASMVTPTR)                             0317
         BALR  @14,@15                                             0317
*RSTRTEND:                                                         0318
*   GEN REFS(R12,R14,R13,R10);                                     0318
RSTRTEND DS    0H                                                  0318
FRESAL     SETLOCK RELEASE,TYPE=SALLOC,                               **
               RELATED=(VIO,ILRPOS(GETSAL))
           LR   R13,R10                   RESTORE ADDR OF SAVE AREA
           LM   R14,R12,12(R13)           RESTORE CALLERS REGS
           BR   R14                       RETURN TO CALLER
*LPMEPROC:                                                         0319
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0319
*                                                                  0319
         B     @PB00003                                            0319
LPMEPROC DS    0H                                                  0320
*/********************************************************************/
*/*                                                                  */
*/*  LPMEPROC IS CALLED BY THE MAINLINE OF POS (FOR STARTABLE AIAS)  */
*/*  AND ILRRESTRT. THE ROUTINE MOVES THE LSID FROM THE LPME TO THE  */
*/*  AIA ON A PAGE-IN REQUEST CLEARS AND/OR FREES THE LSID ON A      */
*/*  PAGE-OUT REQUEST.                                               */
*/*                                                                  */
*/*  INPUT: R7 - AIAPTR                                              */
*/*         R9 - ASPCTPTR                                            */
*/*         R14 - RETURN ADDR                                        */
*/*         R2 THRU R4 ARE STANDARD AS IN MAPPING MACRO POINTERS     */
*/*                                                                  */
*/*  OUTPUT: UPDATED VIO COUNT FIELDS, MODIFIED FIELDS IN THE ASPCT  */
*/*          AND AIA, A SLOT MAY BE FREED                            */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*LPMERTN: CHART (AREF)                                             */
*/*        HEADER                                                  0320
*/*        ILRPOS                                                  0320
*/* LPMEPROC - ROUTINE TO PROCESS THE LPME LSID                      */
*/*LPMEPROC: E ENTRY                                                 */
*/*        P SAVE RETURN ADDRESS                                     */
*/*        P MAINTAIN THE AIAPTR AND LGEPTR                          */
*/*        P ASPCT PTR (ASPCTPTR) = LGEASPCT                         */
*/*        D (OUT,,IN,%POS43) PAGE-OUT OR PAGE-IN REQUEST            */
*/*        D (Y,,N,%POS41) VALID LSID IN LPME                        */
*/*        D (Y,,N,%POS39) LSID SAVED (ASPLSAVE)                     */
*/*        P SET RELEASE AFTER  SAVE FLAG IN LPME (AIALSVRP)         */
*/*        P SET RELEASE AFTER SAVE FLAG IN ASPCT HDR (ASPSAVRP)     */
*/*        P RESET LSID SAVED FLAG (ASPLSAVE)                        */
*/*        P (,%POS40) INC VIO SLOT CNTS, ASCBVSC, AND ASMVSC WITH CS*/
*/*%POS39: D (N,,Y,%POS40) READ I/O ERROR (ASPLIOER)                 */
*/*        P SET REGS FOR FREE SLOT ROUTINE OF I/O CONTROL           */
*/*        S ILRFRSLT: FREE SLOT IDENTIFIED BY LSID IN LPME          */
*/*%POS40: P CLEAR THE LSID IN THE LPME (ASPVLSID)                   */
*/*        P (,%POS42) RESET THE LSID VALID FLAG (ASPLVLD)           */
*/*%POS41: P INCR THE VIO SLOT COUNTS, ASCBVSC, AND ASMVSC WITH CS   */
*/*%POS42: P SET THE AIA LSID PTR (AIALSID) TO ZERO                  */
*/*        P (,%POS44) SET RTNCODE = ZERO                            */
*/*%POS43: D (Y,,N,%POS47) VALID LSID IN LPME                        */
*/*        D (Y,,N,%POS48) READ I/O ERROR (ASPLIOER)                 */
*/*        P (,%POS45) SET PERMANENT I/O ERROR FLAG (AIAPRIER)       */
*/*%POS48: P MOVE LSID FROM LPME (ASPVLSID) TO AIA (AIASSID)         */
*/*        P (,%POS44) SET RTNCODE = ZERO                            */
*/*%POS47: P SET INVALID AUX. STG. LOCATION FLG (AIABADID)           */
*/*%POS45: P SET RTN CODE = '04', INVALID LPID                       */
*/*%POS44: P SET LPME PROCESS IN OPERATION FLAG (ASPLOPIN)           */
*/*%POS46: R RETURN                                                  */
*/*LPMERTN: END                                                      */
*/********************************************************************/
*                                                                  0320
*   RFY                                                            0320
*    (R14,                                                         0320
*     LPMEPTR,                                                     0320
*     ASPCTPTR,                                                    0320
*     LGVTPTR) RSTD;                                               0320
*   LPMEPTR=AIALPMEP;               /* OBTAIN THE LPME POINTER       */
         L     LPMEPTR,AIALPMEP(,AIAPTR)                           0321
*   IF AIAWRITE=OFF THEN            /* READ REQUEST PROCESSING       */
         TM    AIAWRITE(AIAPTR),B'10000000'                        0322
         BNZ   @RF00322                                            0322
*     IF ASPLVALD=ON THEN           /* VALID LSID                    */
         TM    ASPLVALD(LPMEPTR),B'10000000'                       0323
         BNO   @RF00323                                            0323
*       IF ASPLIOER=OFF THEN        /* NO READ I/O ERROR             */
         TM    ASPLIOER(LPMEPTR),B'00010000'                       0324
         BNZ   @RF00324                                            0324
*         DO;                                                      0325
*                                                                  0325
*           /*********************************************************/
*           /*                                                       */
*           /* READ REQUEST PROCESSING                               */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0326
*           AIASSID=ASPVLSID;       /* MOVE LSID FROM LPME TO AIA    */
         MVC   AIASSID(3,AIAPTR),ASPVLSID(LPMEPTR)                 0326
*           ASPLOPIN=ON;            /* SET PROCESS IN OPERATION FLAG */
         OI    ASPLOPIN(LPMEPTR),B'00100000'                       0327
*           RTNCODE=CODE00;         /* PROCESSING SUCCESSFUL         */
         SLR   @15,@15                                             0328
         ST    @15,RTNCODE(,ASMVTPTR)                              0328
*         END;                                                     0329
*       ELSE                                                       0330
*         DO;                                                      0330
         B     @RC00324                                            0330
@RF00324 DS    0H                                                  0331
*           AIAPRIER=ON;            /* PERMANENT I/O ERROR           */
         OI    AIAPRIER(AIAPTR),B'00001000'                        0331
*           ASPLOPIN=ON;            /* SET PROCESS IN OPERATION FLAG */
         OI    ASPLOPIN(LPMEPTR),B'00100000'                       0332
*           RTNCODE=CODE04;         /* INVALID LGN                   */
         MVC   RTNCODE(4,ASMVTPTR),@CF00049                        0333
*         END;                                                     0334
*     ELSE                                                         0335
*       DO;                                                        0335
         B     @RC00323                                            0335
@RF00323 DS    0H                                                  0336
*         AIABADID=ON;              /* INVALID AUX. STG. LOCATION    */
         OI    AIABADID(AIAPTR),B'00000001'                        0336
*         ASPLOPIN=OFF;             /* RESET PROCESS IN OPERATION  0337
*                                      FLAG                          */
         NI    ASPLOPIN(LPMEPTR),B'11011111'                       0337
*         RTNCODE=CODE04;           /* INVALID LGN                   */
         MVC   RTNCODE(4,ASMVTPTR),@CF00049                        0338
*       END;                        /* END READ REQUEST PROCESSING   */
*                                                                  0339
*   /*****************************************************************/
*   /*                                                               */
*   /* WRITE REQUEST PROCESSING                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0340
*   ELSE                                                           0340
*     DO;                           /* WRITE REQUEST PROCESSING      */
         B     @RC00322                                            0340
@RF00322 DS    0H                                                  0341
*       IF ASPLVALD=OFF THEN                                       0341
         TM    ASPLVALD(LPMEPTR),B'10000000'                       0341
         BNZ   @RF00341                                            0341
*         DO;                       /* LSID INVALID                  */
*           RFY                                                    0343
*            (R0,                                                  0343
*             R1,                                                  0343
*             ASCBPTR) RSTD;                                       0343
*           ASCBPTR=ASPASCB;        /* OBTAIN ASCB OWNING THIS LG    */
         L     ASCBPTR,ASPASCB(,ASPCTPTR)                          0344
*           ASCBVSC=ASCBVSC+ONE;    /* INCR ASCB VIO COUNT           */
         LA    @15,1                                               0345
         AH    @15,ASCBVSC(,ASCBPTR)                               0345
         STH   @15,ASCBVSC(,ASCBPTR)                               0345
*           RFY                                                    0346
*             ASCBPTR UNRSTD;                                      0346
*           R0=ASMVSC;              /* GET ASMVT VIO COUNT           */
         L     R0,ASMVSC(,ASMVTPTR)                                0347
*RVIOINCR:                                                         0348
*           R1=R0+ONE;              /* INCR COUNT                    */
RVIOINCR LA    R1,1                                                0348
         ALR   R1,R0                                               0348
*           CS(R0,R1,ASMVSC);       /* INCR VIO COUNT FIELD IN ASMVT */
         CS    R0,@01,ASMVSC(ASMVTPTR)                             0349
*           BC(NE,RVIOINCR);        /* NOT SUCCESSFUL, TRY AGAIN     */
         BC    7,RVIOINCR                                          0350
*           RFY                                                    0351
*            (R0,                                                  0351
*             R1) UNRSTD;                                          0351
*         END;                      /* END INVALID LSID PROCESSING   */
*       ELSE                                                       0353
*         DO;                       /* VALID LSID                    */
         B     @RC00341                                            0353
@RF00341 DS    0H                                                  0354
*           IF ASPLSAVE=ON THEN                                    0354
         TM    ASPLSAVE(LPMEPTR),B'01000000'                       0354
         BNO   @RF00354                                            0354
*             DO;                   /* LSID HAS ALREADY BEEN SAVED   */
*               ASPLSVRP=ON;        /* SET RELEASE AFTER SAVE FLAG IN
*                                      LPME                          */
         OI    ASPLSVRP(LPMEPTR),B'00001000'                       0356
*               ASPSAVRP=ON;        /* SET RELEASE AFTER SAVE FLAG IN
*                                      ASPCT                         */
         OI    ASPSAVRP(ASPCTPTR),B'01000000'                      0357
*               ASPLSAVE=OFF;       /* RESET LSID ALREADY SAVED FLAG */
         NI    ASPLSAVE(LPMEPTR),B'10111111'                       0358
*               RFY                                                0359
*                (R0,                                              0359
*                 R1,                                              0359
*                 ASCBPTR) RSTD;                                   0359
*               ASCBPTR=ASPASCB;    /* OBTAIN ASCB OWNING THIS LG    */
         L     ASCBPTR,ASPASCB(,ASPCTPTR)                          0360
*               ASCBVSC=ASCBVSC+ONE;/* INCR ASCB VIO COUNT           */
         LA    @15,1                                               0361
         AH    @15,ASCBVSC(,ASCBPTR)                               0361
         STH   @15,ASCBVSC(,ASCBPTR)                               0361
*               RFY                                                0362
*                 ASCBPTR UNRSTD;                                  0362
*               R0=ASMVSC;          /* GET ASMVT VIO COUNT           */
         L     R0,ASMVSC(,ASMVTPTR)                                0363
*WVIOINCR:                                                         0364
*               R1=R0+ONE;          /* INCR COUNT                    */
WVIOINCR LA    R1,1                                                0364
         ALR   R1,R0                                               0364
*               CS(R0,R1,ASMVSC);   /* INCR VIO COUNT FIELD IN ASMVT */
         CS    R0,@01,ASMVSC(ASMVTPTR)                             0365
*               BC(NE,WVIOINCR);    /* NOT SUCCESSFUL, TRY AGAIN     */
         BC    7,WVIOINCR                                          0366
*               RFY                                                0367
*                (R0,                                              0367
*                 R1) UNRSTD;                                      0367
*             END;                  /* END SAVED LSID PROCESSING     */
*           ELSE                                                   0369
*             IF ASPLIOER=OFF THEN                                 0369
         B     @RC00354                                            0369
@RF00354 TM    ASPLIOER(LPMEPTR),B'00010000'                       0369
         BNZ   @RF00369                                            0369
*               DO;                 /* NO READ I/O ERROR             */
*                 RFY                                              0371
*                  (R11,                                           0371
*                   R1,                                            0371
*                   R12) RSTD;                                     0371
*                 R11=R14;          /* SAVE RETURN ADDR              */
         LR    R11,R14                                             0372
*                 R12=R13;          /* MAINTAIN R13, REPRESENTS    0373
*                                      LGVTPTR, R13 NEEDED FOR S/A   */
         LR    R12,R13                                             0373
*                 R1=ASPVLSID;      /* OBTAIN LSID FOR FREE SLOT     */
         L     R1,ASPVLSID-1(,LPMEPTR)                             0374
         LA    R1,0(,R1)                                           0374
*                 R13=ADDR(ASMSAVE);/* ADDR SAVE AREA FOR FREE SLOT  */
         LA    R13,ASMSAVE(,ASMVTPTR)                              0375
*                 CALL ILRFRSL1;    /* FREES SLOT IDENTIFIED IN R1   */
         L     @15,ASMPFRSL(,ASMVTPTR)                             0376
         BALR  @14,@15                                             0376
*                 R13=R12;          /* RESTORE LGVTPTR               */
         LR    R13,R12                                             0377
*                 R14=R11;          /* RESTORE RETURN ADDR           */
         LR    R14,R11                                             0378
*                 RFY                                              0379
*                  (R11,                                           0379
*                   R12,                                           0379
*                   R1) UNRSTD;                                    0379
*               END;                /* END NO I/O ERROR DO           */
*           ASPVLSID=ASPVLSID&&ASPVLSID;/* CLEAR THE LSID            */
@RF00369 DS    0H                                                  0381
@RC00354 XC    ASPVLSID(3,LPMEPTR),ASPVLSID(LPMEPTR)               0381
*           ASPLVALD=OFF;           /* RESET VALID FLAG              */
         NI    ASPLVALD(LPMEPTR),B'01111111'                       0382
*         END;                      /* END VALID LSID PROCESSING     */
*       AIALSID=ZERO;               /* CLEAR LSID IN THE AIA         */
@RC00341 SLR   @15,@15                                             0384
         ST    @15,AIALSID(,AIAPTR)                                0384
*       ASPLOPIN=ON;                /* SET PROCESS IN OPERATION FLAG */
         OI    ASPLOPIN(LPMEPTR),B'00100000'                       0385
*       RTNCODE=CODE00;             /* PROCESSING SUCCESSFUL         */
         ST    @15,RTNCODE(,ASMVTPTR)                              0386
*     END;                          /* END WRITE REQUEST PROCESSING  */
*   END LPMEPROC;                                                  0388
@EL00003 DS    0H                                                  0388
@EF00003 DS    0H                                                  0388
@ER00003 BR    @14                                                 0388
*ILRTRPAG:                                                         0389
*   ENTRY;                                                         0389
*                                                                  0389
@EC00389 DS    0H                                                  0390
*/********************************************************************/
*/*                                                                  */
*/*  ILRTRPAG IS CALLED BY RSM TO PROCESS A TRANSFER PAGE REQUEST.   */
*/*  AN ACE IS OBTAINED AND INFORMATION IS MOVED FROM THE ACA TO THE */
*/*  ACE. THE MAINLINE OF POS IS THEN CALLED TO PROCESS THE TRANSFER */
*/*  PAGE ACE.                                                       */
*/*                                                                  */
*/*  INPUT: R1 - ACAPTR                                              */
*/*         R13 - CALLER'S SAVE AREA ADDR                            */
*/*         R14 - RETURN ADDR                                        */
*/*                                                                  */
*/*  OUTPUT: A TRANSFER PAGE ACE IS PROCESSED TO COMPLETION.         */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*TRPGACE: CHART (AREF)                                             */
*/*        HEADER                                                  0390
*/*        ILRPOS                                                  0390
*/* ILRTRPAG - OBTAINS AND INITIALIZES A TRANSFER PAGE ACE           */
*/*ILRTRPAG: E ENTRY                                                 */
*/*        P SAVE CALLER'S REGS                                      */
*/*        P ESTABLISH ADDRESSIBILITY                                */
*/*        P MAINTAIN THE ACA ADDR (ACAPTR=R1)                       */
*/*        L FRR: SET FRR, COVERS TRANSFER PAGE PATH IN POS          */
*/*        L ILRGMA: OBTAIN AN ACE                                   */
*/*        D (N,,Y,%POS70) RETURN CODE = 0                           */
*/*        P (,%POS74) RTN CODE = '28', UNABLE TO OBTAIN STORAGE     */
*/*%POS70: P SAVE CELL@ IN ACEPTR AND ZERO THE ACE                   */
*/*        P COPY CORRESPONDING FIELDS FROM ACA TO ACE               */
*/*        P STORE THE ACE PTR IN THE ATA                            */
*/*        D (N,,Y,%POS72) ACE AIA PTR (ACEAIAPT) = 0                */
*/*        P SET VIO FLAG IN AIA (AIAVIO)                            */
*/*        P SET SPECIAL TRANSFER PAGE FLAG IN AIA (AIATRPSP)        */
*/*        P TRANSFER PAGE ACE ADDR IN AIA = ACE ADDR                */
*/*        P SET TRANSFER PAGE WAITING FLG IN ACE (ACETRPWT)         */
*/*%POS72: S ILRPOS: CALL POS TO PROCESS THE ACE                     */
*/*        D (N,,Y,%POS74) RTN CODE = 0                              */
*/*        D (Y,,N,%POS73) ACE HAS AN AIA PTR                        */
*/*        P RESET AIAVIO AND AIATRPSP FLAGS                         */
*/*        P CLEAR THE TRANSFER PAGE ACE ADDR IN THE AIA             */
*/*%POS73: P SET THE AIA/ACE ADDR IN ATA = 0                         */
*/*        P INITIALIZE CELL@ FOR THE GMA MACRO                      */
*/*        L ILRGMA: RETURN ERROR ACE TO ITS POOL                    */
*/*%POS74: L FRR: CANCEL RECOVERY FOR POS                            */
*/*        P MAINTAIN RETURN CODE                                    */
*/*        P RESTORE CALLER'S REGS                                   */
*/*        R RETURN                                                  */
*/*TRPGACE: END                                                      */
*/********************************************************************/
*                                                                  0390
*   RFY                                                            0390
*    (R1,                                                          0390
*     R13) RSTD;                                                   0390
*   GEN REFS(R14,R12,R13,R6BASE);                                  0391
ILRTRPAG    STM  R14,R12,12(R13)       STORE CALLERS REGS
TRPSETUP    BALR R6BASE,0              ESTABLISH ADDRESSIBILITY
            LA   R12,TRPSETUP-POSSETUP SETS CONTENTS OF BASE REG TO
            SR   R6BASE,R12            THAT OF MAINLINE POS
*   RFY                                                            0392
*     ACAPTR RSTD;                                                 0392
*   ACAPTR=R1;                      /* SAVE THE ACA ADDR (R1) WILL BE
*                                      DESTROYED BY GMA              */
         LR    ACAPTR,R1                                           0393
*   ASMVTPTR=CVTASMVT;              /* OBTAIN ADDR OF THE ASMVT      */
         L     @15,CVTPTR                                          0394
         L     ASMVTPTR,CVTASMVT(,@15)                             0394
*   RSMHDPTR=PSAAOLD->ASCBRSM;      /* OBTAIN ADDR RSM HEADER        */
         L     @15,PSAAOLD                                         0395
         L     RSMHDPTR,ASCBRSM(,@15)                              0395
*   R1=ASMPIOFR;                    /* OBTAIN RECOVERY ROUTINE ADDR  */
*                                                                  0396
         L     R1,ASMPIOFR(,ASMVTPTR)                              0396
*   /*****************************************************************/
*   /*                                                               */
*   /* RECOVERY ADDRESS IS ADDED TO COVER THIS ROUTINE AND THE       */
*   /* TRANSFER PAGE PATH OF ILRPOS. THE ACE IS THEN OBTAINED.       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0397
*   GEN REFS(R1,R11,R12) SETS(ATAPTR);                             0397
             SETFRR A,FRRAD=(R1),PARMAD=(ATAPTR),WRKREGS=(R11,R12),   **
               RELATED=(SETFRR,ILRTRPAG(ILRTRPAG))
*   ATAMODID=ATAMTRPG;              /* SET MODID IN THE ATA          */
         MVI   ATAMODID(ATAPTR),X'04'                              0398
*   ATATRPAG=ON;                    /* SET TRANSFER PAGE ENTRY FLAG  */
*                                                                  0399
         OI    ATATRPAG(ATAPTR),B'01000000'                        0399
*   /*****************************************************************/
*   /*                                                               */
*   /* BEGIN ILRGMA MACRO EXPANSION                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0400
*   DO;                             /* ILRGMA GET                  0400
*                                      CELL(ACE)WORKREGS(R11,R12)    */
*     RESPECIFY                                                    0401
*      (R0,                                                        0401
*       R1,                                                        0401
*       R11,                                                       0401
*       R12,                                                       0401
*       R14,                                                       0401
*       R15) RESTRICTED;                                           0401
*     RESPECIFY                                                    0402
*       ASMPOOLS BASED(R11);                                       0402
*     RESPECIFY                                                    0403
*       GMACELL BASED(R14);                                        0403
*     R11=ADDR(ASMACEPC);                                          0404
         LA    R11,ASMACEPC(,ASMVTPTR)                             0404
*     LM(R14,R15,ASMCPAVQ);         /* GET ADDR OF 1ST CELL          */
         LM    R14,R15,ASMCPAVQ(R11)                               0405
*GMA00020:                                                         0406
*     IF R14^=0 THEN                /* TEST CELL POOL                */
GMA00020 LTR   R14,R14                                             0406
         BZ    @RF00406                                            0406
*       DO;                         /* CELL AVAILABLE, REMOVE CELL   */
*         R0=GMANEXT;                                              0408
         L     R0,GMANEXT(,R14)                                    0408
*         R1=R15-1;                                                0409
         LR    R1,R15                                              0409
         BCTR  R1,0                                                0409
*         CDS(R14,R0,ASMCPAVQ);                                    0410
         CDS   R14,R0,ASMCPAVQ(R11)                                0410
*         BC(7,GMA00020);                                          0411
         BC    7,GMA00020                                          0411
*         R1=R14;                                                  0412
         LR    R1,R14                                              0412
*       END;                                                       0413
*     ELSE                                                         0414
*       DO;                         /* CELL POOL EMPTY               */
         B     @RC00406                                            0414
@RF00406 DS    0H                                                  0415
*         R1=R11;                   /* PREPARE TO CALL PEX           */
         LR    R1,R11                                              0415
*         CALL ILRPEX;              /* EXTEND THE POOL               */
         L     @15,ASMPEX(,ASMVTPTR)                               0416
         BALR  @14,@15                                             0416
*       END;                                                       0417
*     RESPECIFY                                                    0418
*      (R0,                                                        0418
*       R1,                                                        0418
*       R11,                                                       0418
*       R12,                                                       0418
*       R14,                                                       0418
*       R15) UNRESTRICTED;                                         0418
@RC00406 DS    0H                                                  0419
*   END;                            /* ILRGMA GET                  0419
*                                      CELL(ACE)WORKREGS(R11,R12)    */
*                                                                  0419
*   /*****************************************************************/
*   /*                                                               */
*   /* END ILRGMA MACRO EXPANSION                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0420
*                                                                  0420
*   /*****************************************************************/
*   /*                                                               */
*   /* THE ACE IS CLEARED, INITIALIZED AND ILRPOS IS CALLED TO       */
*   /* PROCESS THE REQUEST.                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0420
*   RFY                                                            0420
*     CELL@ RSTD;                                                  0420
*   IF CELL@=ZERO THEN                                             0421
         LTR   CELL@,CELL@                                         0421
         BNZ   @RF00421                                            0421
*     RTNCODE=CODE28;               /* NO STORAGE AVAILABLE          */
         MVC   RTNCODE(4,ASMVTPTR),@CF00486                        0422
*   ELSE                                                           0423
*     DO;                           /* ACE SUCCESSFULLY OBTAINED     */
         B     @RC00421                                            0423
@RF00421 DS    0H                                                  0424
*       ACEPTR=CELL@;               /* SAVE ADDR OF CELL OBTAINED    */
         LR    ACEPTR,CELL@                                        0424
*       RFY                                                        0425
*         CELL@ UNRSTD;                                            0425
*       ACE=ACE&&ACE;               /* CLEAR THE ACE                 */
         XC    ACE(40,ACEPTR),ACE(ACEPTR)                          0426
*       ACEOP=ACAOP;                /* PROPAGATE THE OP CODE         */
         IC    @12,ACAOP(,ACAPTR)                                  0427
         STC   @12,ACEOP(,ACEPTR)                                  0427
*       ACELGN=ACATOLP;             /* PROPAGATE THE LPID            */
         MVC   ACELGN(8,ACEPTR),ACATOLP(ACAPTR)                    0428
*       ACEAIAPT=ACAAIAP;           /* PROPAGATE THE AIA POINTER     */
         L     @12,ACAAIAP(,ACAPTR)                                0429
         ST    @12,ACEAIAPT(,ACEPTR)                               0429
*       ACESRCID=ACAFLSID;          /* PROPAGATE THE SOURCE LSID     */
         L     @11,ACAFLSID(,ACAPTR)                               0430
         ST    @11,ACESRCID(,ACEPTR)                               0430
*       RFY                                                        0431
*         ACAPTR UNRSTD;                                           0431
*       ATAACE=ACEPTR;              /* RRR-TRACK THE ACE IN THE    0432
*                                      ATA-RRR                       */
         ST    ACEPTR,ATAACE(,ATAPTR)                              0432
*       IF ACEAIAPT^=ZERO THEN                                     0433
         LTR   @12,@12                                             0433
         BZ    @RF00433                                            0433
*         DO;                       /* SPECIAL TRANSFER PG, I/O NO 0434
*                                      COMPLETE FOR AIA WITH SOURCE
*                                      LSID                          */
*           RFY                                                    0435
*             SRCAIAPT RSTD;                                       0435
*           SRCAIAPT=ACEAIAPT;      /* ADDRESSIBILTY TO SOURCE AIA   */
         LR    SRCAIAPT,@12                                        0436
*           RFY                                                    0437
*             AIA BASED(SRCAIAPT);                                 0437
*           AIAVIO=ON;              /* SET VIO FLAG IN AIA           */
         OI    AIAVIO(SRCAIAPT),B'00100000'                        0438
*           AIATRPSP=ON;            /* SET TRANSFER PG SPECIAL FLAG  */
         OI    AIATRPSP(SRCAIAPT),B'00100000'                      0439
*           AIACEPTR=ACEPTR;        /* STORE THE ACE PTR IN THE AIA  */
         ST    ACEPTR,AIACEPTR(,SRCAIAPT)                          0440
*           ACETRPWT=ON;            /* INDICATE OPERATION WAITING FOR
*                                      I/O TO COMPLETE               */
         OI    ACETRPWT(ACEPTR),B'01000000'                        0441
*           RFY                                                    0442
*             AIA BASED(AIAPTR);                                   0442
*         END;                                                     0443
*       CALL ILRPOS;                /* CALL PAGE OPERATIONS STARTER
*                                      TO PROCESS THE ACE            */
@RF00433 L     @15,@CA00028                                        0444
         BALR  @14,@15                                             0444
*       IF ATAACE^=ZERO THEN                                       0445
         SLR   @12,@12                                             0445
         L     @11,ATAACE(,ATAPTR)                                 0445
         CR    @11,@12                                             0445
         BE    @RF00445                                            0445
*         DO;                       /* AN ERROR WAS FOUND            */
*                                                                  0447
*           /*********************************************************/
*           /*                                                       */
*           /* THE FOLLOWING FREES THE ACE IF AN ERROR WAS FOUND BY  */
*           /* MAINLINE POS AND RESETS AIA FLAGS FOR THE SPECIAL     */
*           /* TRANSFER PAGE CASE.                                   */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0447
*           ACEPTR=ATAACE;          /* ACE CONTAINING ERROR IS IN ATA*/
         LR    ACEPTR,@11                                          0447
*           IF ACEAIAPT^=ZERO THEN                                 0448
         L     @11,ACEAIAPT(,ACEPTR)                               0448
         CR    @11,@12                                             0448
         BE    @RF00448                                            0448
*             DO;                   /* IT WAS A SPECIAL TRANSFER PG
*                                      ACE                           */
*               SRCAIAPT=ACEAIAPT;  /* OBTAIN ADDRESSIBILITY TO    0450
*                                      SOURCE AIA                    */
         LR    SRCAIAPT,@11                                        0450
*               RFY                                                0451
*                 AIA BASED(SRCAIAPT);                             0451
*               AIAVIO=OFF;         /* RESET VIO FLAG                */
         NI    AIAVIO(SRCAIAPT),B'11011111'                        0452
*               AIATRPSP=OFF;       /* RESET SPECIAL TRANSFER PG AIA
*                                      FLAG                          */
         NI    AIATRPSP(SRCAIAPT),B'11011111'                      0453
*               AIACEPTR=ZERO;      /* CLEAR THE ACE ADDR IN THE AIA */
         ST    @12,AIACEPTR(,SRCAIAPT)                             0454
*               RFY                                                0455
*                 SRCAIAPT UNRSTD;                                 0455
*               RFY                                                0456
*                 AIA BASED(AIAPTR);                               0456
*             END;                                                 0457
*           ATAACE=ZERO;            /* RRR-STOP TRACKING THE ACE-RRR */
@RF00448 SLR   @12,@12                                             0458
         ST    @12,ATAACE(,ATAPTR)                                 0458
*           RFY                                                    0459
*             CELL@ RSTD;                                          0459
*           CELL@=ACEPTR;                                          0460
*                                                                  0460
         LR    CELL@,ACEPTR                                        0460
*           /*********************************************************/
*           /*                                                       */
*           /* BEGIN ILRGMA MACRO EXPANSION                          */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0461
*           DO;                     /* ILRGMA FREE                 0461
*                                      CELL(ACE)WORKREGS(R11,R12)    */
*             RESPECIFY                                            0462
*              (R0,                                                0462
*               R1,                                                0462
*               R11,                                               0462
*               R12,                                               0462
*               R14,                                               0462
*               R15) RESTRICTED;                                   0462
*             RESPECIFY                                            0463
*               ASMPOOLS BASED(R11);                               0463
*             RESPECIFY                                            0464
*               GMACELL BASED(R1);                                 0464
*             R11=ADDR(ASMACEPC);                                  0465
         LA    R11,ASMACEPC(,ASMVTPTR)                             0465
*             LM(R14,R15,ASMCPRSQ); /* GET CONTENTS OF Q             */
         LM    R14,R15,ASMCPRSQ(R11)                               0466
*GMA00031:                                                         0467
*             IF R14^=0 THEN        /* TEST RESERVE Q                */
GMA00031 LTR   R14,R14                                             0467
         BZ    @RF00467                                            0467
*               DO;                 /* REPLENISH ACE RESERVE Q       */
*                 R0=R14-1;         /* SET UP FOR COMPARE AND SWAP   */
         LR    R0,R14                                              0469
         BCTR  R0,0                                                0469
*                 GMANEXT=R15;      /* CELL TO FREE IN R1            */
         ST    R15,GMANEXT(,R1)                                    0470
*                 CDS(R14,R0,ASMCPRSQ);/* ADD CELL TO RESERVE Q      */
         CDS   R14,R0,ASMCPRSQ(R11)                                0471
*                 BC(7,GMA00031);                                  0472
         BC    7,GMA00031                                          0472
*               END;                                               0473
*             ELSE                                                 0474
*               DO;                 /* RETURN ACE TO NORMAL Q        */
         B     @RC00467                                            0474
@RF00467 DS    0H                                                  0475
*                 R14=ASMCPAVL;                                    0475
         L     R14,ASMCPAVL(,R11)                                  0475
*GMA00032:                                                         0476
*                 GMANEXT=R14;      /* PUT ADDR CURRENT FIRST IN   0476
*                                      INPUT CELL                    */
GMA00032 ST    R14,GMANEXT(,R1)                                    0476
*                 CS(R14,R1,ASMCPAVL);/* ADD INPUT CELL TO POOL      */
         CS    R14,@01,ASMCPAVL(R11)                               0477
*                 BC(7,GMA00032);                                  0478
         BC    7,GMA00032                                          0478
*               END;                /* ACE RETURNED TO NORMAL Q      */
*             RESPECIFY                                            0480
*              (R0,                                                0480
*               R1,                                                0480
*               R11,                                               0480
*               R12,                                               0480
*               R14,                                               0480
*               R15) UNRESTRICTED;                                 0480
@RC00467 DS    0H                                                  0481
*           END;                    /* ILRGMA FREE                 0481
*                                      CELL(ACE)WORKREGS(R11,R12)    */
*                                                                  0481
*           /*********************************************************/
*           /*                                                       */
*           /* END ILRGMA MACRO EXPANSION                            */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0482
*           RFY                                                    0482
*             CELL@ UNRSTD;                                        0482
*         END;                      /* END ERROR PROCESSING          */
*                                                                  0484
*       /*************************************************************/
*       /*                                                           */
*       /* THE FOLLOWING CANCELS THE RECOVERY ROUTINE AND RETURNS TO */
*       /* THE CALLER.                                               */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0484
*     END;                          /* END PROCESSING FOR ACE      0484
*                                      SUCCESSFULLY OBTAINED         */
@RF00445 DS    0H                                                  0485
*   GEN REFS(R11,R12);                                             0485
@RC00421 DS    0H                                                  0485
            SETFRR D,WRKREGS=(R11,R12),                               **
               RELATED=(SETFRR,ILRTRPAG(ILRTRPAG))    CANCEL RECOVERY
*   RFY                                                            0486
*     R15 RSTD;                                                    0486
*   R15=RTNCODE;                    /* RESTORE THE RTN CODE OF ILRPOS*/
         L     R15,RTNCODE(,ASMVTPTR)                              0487
*   IF R15=CODE04 THEN                                             0488
         C     R15,@CF00049                                        0488
         BNE   @RF00488                                            0488
*     R15=CODE12;                   /* POS FOUND AN ERROR IN THE LGN,
*                                      INDICATE TARGET LPID INVALID  */
         LA    R15,12                                              0489
*TRPAGEND:                                                         0490
*   GEN REFS(R14,R13,R12,R0);                                      0490
@RF00488 DS    0H                                                  0490
TRPAGEND DS    0H                                                  0490
            L   R14,12(R13)    RESTORE RETURN ADDR
            LM  R0,R12,20(R13) RESTORE R0-R12
            BR  R14            RETURN TO CALLER
*EXPAND:                                                           0491
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0491
*                                                                  0491
         B     @PB00004                                            0491
EXPAND   DS    0H                                                  0492
*/********************************************************************/
*/*                                                                  */
*/*  THE EXPAND ROUTINE IS CALLED BY THE MAINLINE OF POS WHEN IT IS  */
*/*  DETERMINED THAT THE RPN INDEXES AN LPME WHICH DOES NOT EXIST AT */
*/*  AT THIS TIME. EXPAND CREATES THE NECESSARY LPME AND/OR ASST EXT.*/
*/*  THE ASM LOCK WAS OBTAINED BY THE MAINLINE OF POS AND THE SALLOC */
*/*  AND LOCAL LOCKS WERE OBTAINED BY RSM AND ITS CALLER             */
*/*  RESPECTIVELY, ALL ARE NEEDED FOR EXPANSION.                     */
*/*                                                                  */
*/*  INPUT: R9 - ASPCTPTR                                            */
*/*         R14 - RETURN ADDR                                        */
*/*         R2 THRU R4 ARE STANDARD AS IN THE MAPPING MACRO POINTERS */
*/*                                                                  */
*/*  OUTPUT: UPDATED FIELDS IN THE BASE ASPCT AND A NEW EXTENSION(S) */
*/*          POINTED TO FROM AN ASST EXT AND/OR BASE ASPCT.          */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*EXPAND: CHART (AREF)                                              */
*/*        HEADER                                                  0492
*/*        ILRPOS                                                  0492
*/* EXPAND - ROUTINE TO EXPAND AN ASPCT                              */
*/*EXPAND: E ENTRY                                                   */
*/*        P SAVE RETURN ADDRESS                                     */
*/*        D (Y,,N,%POS80) ANY ASST EXTENSIONS                       */
*/*        P COMPUTE THE LAST ASST EXT ADDR FROM ASPAEXCT            */
*/*        P COMPUTE THE LAST LPME EXT ADDR FROM ASPLEXCT            */
*/*        D (ASST,%POS81,LPME,%POS86) ASST/LPME OR JUST LPME NEEDED */
*/*%POS80: P ASST EXT ADDR PTR = ASPCT ADDR + HEADER LENGTH          */
*/*%POS81: P SET EXPBIT (INTERNAL), NEED BOTH EXTENSIONS             */
*/*        P INITIALIZE REGS FOR GETMAIN                             */
*/*        L GETMAIN: LSQA SPACE FOR ASST AND LPME EXTS              */
*/*        D (N,,Y,%POS83) RTN CODE = 0                              */
*/*%POS82: P (,%POS90) STORAGE UNAVAILABLE                           */
*/*%POS83: P ASSTEXTP = ADDR LSQA SPACE OBTAINED                     */
*/*        P CLEAR THE SPACE                                         */
*/*        P SET EXT ID (ASPEIDENT) TO 'ASST'                        */
*/*        P SET ASPESSYM TO ASPSSYM                                 */
*/*        P SET ASPASSTN TO ASPAEXCT + 1                            */
*/*        D (Y,,N,%POS84) ANY ASST EXTENSIONS                       */
*/*        P (,%POS85) ASPEXTNM = ASPEXTNM OF LAST LPME EXT + 1      */
*/*%POS84: P ASPEXTNM = 1                                            */
*/*%POS85: P INCR ASST EXT COUNT (ASPAEXCT)                          */
*/*        P (,%POS87) LPMEXTP = ADDR LSQA SPACE +LENGTH ASST EXT    */
*/*%POS86: P RESET EXPBIT (INTERNAL), NEED ONLY LPME EXT             */
*/*        P INITIALIZE REGS FOR GETMAIN                             */
*/*        L GETMAIN: LSQA SPACE FOR LPME EXT                        */
*/*        D (Y,,N,%POS82) RTN CODE = 0                              */
*/*        P LPMEXTP = ADDR LSQA SPACE OBTAINED                      */
*/*        P CLEAR THE SPACE                                         */
*/*%POS87: P SET EXT ID (ASPEIDENT) TO 'LPME'                        */
*/*        P SET ASPESSYM TO ASPSSYM                                 */
*/*        P SET ASPASSTN TO ASPAEXCT                                */
*/*        P SET ASPASSTI TO REMAINDER ASPLEXCT / 256                */
*/*        D (Y,,N,%POS88) ASST EXT (EXPBIT)                         */
*/*        P ASPEXTNM = ASPEXTNM OF THE ASST EXT + 1                 */
*/*        P INCR THE LPME EXT COUNT (ASPLEXCT)                      */
*/*        P FIRST LPME EXT ADDR (ASPLEMEA) OF ASSTEXTP = LPMEXTP    */
*/*        P (,%POS89) NEW ASST EXT ADDR (ASPASSTP) = ASSTEXTP       */
*/*%POS88: P ASPEXTNM = ASPEXTNM OF LAST LPME EXT + 1                */
*/*        P INCR THE LPME EXT COUNT (ASPLEXCT)                      */
*/*        P NEW LPME EXT ADDR (ASPLPMEA) = LPMEXTP                  */
*/*%POS89: P RTN CODE = 0                                            */
*/*%POS90: R RETURN TO CALLER                                        */
*/*EXPAND: END                                                       */
*/********************************************************************/
*                                                                  0492
*   RFY                                                            0492
*    (R14,                                                         0492
*     R8,                                                          0492
*     ASPCTPTR,                                                    0492
*     LGVTPTR) RSTD;                                               0492
*   R8=R14;                         /* SAVE RETURN ADDR              */
         LR    R8,R14                                              0493
*   RFY                                                            0494
*     R14 UNRSTD;                                                  0494
*                                                                  0494
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINES WHETHER JUST A LPME OR BOTH EXTENSIONS ARE NEEDED. */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0495
*   IF ASPAEXCT=HLFZERO THEN                                       0495
         LH    @14,ASPAEXCT(,ASPCTPTR)                             0495
         LTR   @14,@14                                             0495
         BNZ   @RF00495                                            0495
*     EXPBIT=ON;                    /* NO EXTENSION NEED BOTH AN ASST
*                                      AND LPME EXT                  */
         OI    EXPBIT(ASMVTPTR),B'01000000'                        0496
*   ELSE                                                           0497
*     DO;                           /* A PREVIOUS ASST AND LPME EXT
*                                      EXISTS                        */
         B     @RC00495                                            0497
@RF00495 DS    0H                                                  0498
*       RFY                                                        0498
*        (LASTASST,                                                0498
*         LPMEXTNX,                                                0498
*         LASTLPME) RSTD;                                          0498
*       LASTASST=ASPASSTP(ASPAEXCT);/* DETERMINE LAST ASST EXT       */
         LH    @14,ASPAEXCT(,ASPCTPTR)                             0499
         SLA   @14,2                                               0499
         L     LASTASST,ASPASSTP-4(@14,ASPCTPTR)                   0499
*       LPMEXTNX=(ASPLEXCT//ASPNLPME)+ONE;/* DETERMINE LAST LPME   0500
*                                      INDEX                         */
         LH    @00,ASPLEXCT(,ASPCTPTR)                             0500
         SRDA  @00,32                                              0500
         D     @00,@CF00518                                        0500
         AL    @00,@CF00038                                        0500
         LR    LPMEXTNX,@00                                        0500
*       LASTLPME=LASTASST->ASPASSTE(LPMEXTNX);/* DETERMINE LAST LPME
*                                      EXT                           */
         LR    @14,LPMEXTNX                                        0501
         SLA   @14,2                                               0501
         L     LASTLPME,ASPASSTE-4(@14,LASTASST)                   0501
*       IF LPMEXTNX=MAXALEXT THEN                                  0502
         C     LPMEXTNX,@CF00518                                   0502
         BNE   @RF00502                                            0502
*         DO;                       /* LAST ASST EXT IS FULL         */
*           EXPBIT=ON;              /* NEED BOTH AN LPME AND ASST EXT*/
         OI    EXPBIT(ASMVTPTR),B'01000000'                        0504
*           RFY                                                    0505
*             LPMEXTNX UNRSTD;                                     0505
*         END;                                                     0506
*                                                                  0506
*       /*************************************************************/
*       /*                                                           */
*       /* THIS CODE IS EXECUTED WHEN IT HAS BEEN DETERMINED THAT    */
*       /* ONLY A LPME EXT. IS NEEDED.                               */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0507
*       ELSE                                                       0507
*         DO;                       /* OBTAIN AND CLEAR AN LPME EXT.
*                                      ONLY                          */
         B     @RC00502                                            0507
@RF00502 DS    0H                                                  0508
*           EXPBIT=OFF;             /* JUST NEED LPME EXT.           */
         NI    EXPBIT(ASMVTPTR),B'10111111'                        0508
*           RFY                                                    0509
*            (R10,                                                 0509
*             R1AREA,                                              0509
*             R15) RSTD;                                           0509
*           R10=LENGTH(ASPEXTSN);   /* LENGTH AREA TO BE OBTAINED, 0510
*                                      SINGLE EXT. ONLY              */
         LA    R10,1088                                            0510
*           R7SAVE=R7;              /* STORE ACROSS BRANCH GETMAIN   */
         ST    R7,R7SAVE(,ASMVTPTR)                                0511
*           R4SAVE=R4;              /* STORE ACROSS BRANCH GETMAIN   */
         ST    R4,R4SAVE(,ASMVTPTR)                                0512
*           R7=PSAAOLD;             /* ASCB ADDR                     */
         L     R7,PSAAOLD                                          0513
*           R4=PSATOLD;             /* TCB ADDR                      */
         L     R4,PSATOLD                                          0514
*           GEN SETS(R1AREA,R15) REFS(R4,R7);                      0515
SPID255      EQU       255   SUBPOOL ID
             GETMAIN   RC,LV=(10),SP=SPID255,BRANCH=YES   LPME STORAGE
*           ASMVTPTR=CVTASMVT;      /* RESTORE R3, DESTROYED IN    0516
*                                      GETMAIN                       */
         L     @14,CVTPTR                                          0516
         L     ASMVTPTR,CVTASMVT(,@14)                             0516
*           R7=R7SAVE;              /* RESTORE REG                   */
         L     R7,R7SAVE(,ASMVTPTR)                                0517
*           R4=R4SAVE;              /* RESTORE REG                   */
         L     R4,R4SAVE(,ASMVTPTR)                                0518
*           RTNCODE=R15;                                           0519
         ST    R15,RTNCODE(,ASMVTPTR)                              0519
*           IF R15=CODE00 THEN                                     0520
         LTR   R15,R15                                             0520
         BNZ   @RF00520                                            0520
*             DO;                   /* NO STORAGE AVAILABLE GET OUT
*                                      IMMEDIATELY                   */
*               RFY                                                0522
*                 R15 UNRSTD;                                      0522
*               RFY                                                0523
*                 R0 RSTD;                                         0523
*               ASPEXPTR=R1AREA;    /* ADDR LPME EXT.                */
         LR    ASPEXPTR,R1AREA                                     0524
*               R0=LENGTH(ASPEXTSN);/* LENGTH AREA GETMAINED         */
         LA    R0,1088                                             0525
*               DO WHILE R0>=LENGTH(AREA);/* CLEAR 256 BYTES AT A  0526
*                                      TIME                          */
         B     @DE00526                                            0526
@DL00526 DS    0H                                                  0527
*                 AREA=AREA&&AREA;  /* CLEAR 256 BYTES               */
         XC    AREA(256,R1AREA),AREA(R1AREA)                       0527
*                 R0=R0-LENGTH(AREA);/* DECR LENGTH REMAINING TO   0528
*                                      CLEAR                         */
         LA    @15,256                                             0528
         SLR   R0,@15                                              0528
*                 R1AREA=R1AREA+LENGTH(AREA);/* INCR ADDR AREA     0529
*                                      REMAINING TO CLEAR            */
         ALR   R1AREA,@15                                          0529
*               END;                                               0530
@DE00526 C     R0,@CF00518                                         0530
         BNL   @DL00526                                            0530
*               IF R0^=ZERO THEN                                   0531
         LTR   R0,R0                                               0531
         BZ    @RF00531                                            0531
*                 AREA(1:R0)=AREA(1:R0)&&AREA(1:R0);/* CLEAR THE   0532
*                                      REMAINING BYTES               */
         LR    @15,R0                                              0532
         BCTR  @15,0                                               0532
         EX    @15,@SX01851                                        0532
*               RFY                                                0533
*                (R1AREA,                                          0533
*                 R0) UNRSTD;                                      0533
@RF00531 DS    0H                                                  0534
*             END;                  /* END PROCESSING WHERE STORAGE
*                                      FOUND TO BE AVAILABLE         */
*         END;                      /* END DO FOR OBTAINING A LPME 0535
*                                      EXT.                          */
@RF00520 DS    0H                                                  0536
*     END;                          /* END DO WHERE PREVIOUS EXT.  0536
*                                      EXISTS                        */
@RC00502 DS    0H                                                  0537
*   IF EXPBIT=ON THEN                                              0537
@RC00495 TM    EXPBIT(ASMVTPTR),B'01000000'                        0537
         BNO   @RF00537                                            0537
*     DO;                           /* BOTH EXTS. NEEDED             */
*                                                                  0539
*       /*************************************************************/
*       /*                                                           */
*       /* THIS CODE IS EXECUTED WHEN IT HAS BEEN DETERMINED THAT    */
*       /* BOTH EXTENSIONS ARE NEEDED                                */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0539
*       RFY                                                        0539
*         ASPEXPTR UNRSTD;                                         0539
*       RFY                                                        0540
*         R10 RSTD;                                                0540
*       R10=LENGTH(ASPEXTSN)*2;     /* LENGTH AREA TO BE OBTAINED, 0541
*                                      BOTH EXTS.                    */
         LA    R10,2176                                            0541
*       RFY                                                        0542
*        (R1AREA,                                                  0542
*         R15) RSTD;                                               0542
*       R7SAVE=R7;                  /* STORE ACROSS BRANCH GETMAIN   */
         ST    R7,R7SAVE(,ASMVTPTR)                                0543
*       R4SAVE=R4;                  /* STORE ACROSS BRANCH GETMAIN   */
         ST    R4,R4SAVE(,ASMVTPTR)                                0544
*       R7=PSAAOLD;                 /* ASCB ADDR                     */
         L     R7,PSAAOLD                                          0545
*       R4=PSATOLD;                 /* TCB ADDR                      */
         L     R4,PSATOLD                                          0546
*       GEN SETS(R1AREA,R15) REFS(R7,R4);                          0547
            GETMAIN RC,LV=(10),SP=SPID255,BRANCH=YES  GET STORAGE
*       ASMVTPTR=CVTASMVT;          /* RESTORE R3, DESTROYED IN    0548
*                                      GETMAIN                       */
         L     @14,CVTPTR                                          0548
         L     ASMVTPTR,CVTASMVT(,@14)                             0548
*       R7=R7SAVE;                  /* RESTORE REG                   */
         L     R7,R7SAVE(,ASMVTPTR)                                0549
*       R4=R4SAVE;                  /* RESTORE REG                   */
         L     R4,R4SAVE(,ASMVTPTR)                                0550
*       RTNCODE=R15;                                               0551
         ST    R15,RTNCODE(,ASMVTPTR)                              0551
*       IF R15=CODE00 THEN                                         0552
         LTR   R15,R15                                             0552
         BNZ   @RF00552                                            0552
*         DO;                       /* NO STORAGE AVAILABLE GET OUT
*                                      IMMEDIATELY                   */
*           RFY                                                    0554
*             R15 UNRSTD;                                          0554
*           RFY                                                    0555
*             R0 RSTD;                                             0555
*           ASPEXPTR=R1AREA;        /* ADDR ASST EXT.                */
         LR    ASPEXPTR,R1AREA                                     0556
*           R0=LENGTH(ASPEXTSN)*2;  /* LENGTH AREA GETMAINED         */
         LA    R0,2176                                             0557
*           DO WHILE R0>=LENGTH(AREA);/* CLEAR 256 BYTES AT A TIME   */
         B     @DE00558                                            0558
@DL00558 DS    0H                                                  0559
*             AREA=AREA&&AREA;      /* CLEAR 256 BYTES               */
         XC    AREA(256,R1AREA),AREA(R1AREA)                       0559
*             R0=R0-LENGTH(AREA);   /* DECR LENGTH REMAINING TO CLEAR*/
         LA    @15,256                                             0560
         SLR   R0,@15                                              0560
*             R1AREA=R1AREA+LENGTH(AREA);/* INCR ADDR AREA REMAINING
*                                      TO CLEAR                      */
         ALR   R1AREA,@15                                          0561
*           END;                                                   0562
@DE00558 C     R0,@CF00518                                         0562
         BNL   @DL00558                                            0562
*           IF R0^=ZERO THEN                                       0563
         LTR   R0,R0                                               0563
         BZ    @RF00563                                            0563
*             AREA(1:R0)=AREA(1:R0)&&AREA(1:R0);/* CLEAR REMAINING 0564
*                                      BYTES                         */
*                                                                  0564
         LR    @15,R0                                              0564
         BCTR  @15,0                                               0564
         EX    @15,@SX01851                                        0564
*           /*********************************************************/
*           /*                                                       */
*           /* THE ASST EXTENSION IS NOW INTIALIZED                  */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0565
*           RFY                                                    0565
*            (R1AREA,                                              0565
*             R0) UNRSTD;                                          0565
@RF00563 DS    0H                                                  0566
*           ASPEIDNT=ASST;          /* SET THE EXT ID                */
         MVC   ASPEIDNT(4,ASPEXPTR),@CC01730                       0566
*           ASPESSYM=ASPSSYM;       /* PROPAGATE THE 'S' SYMBOL      */
         MVC   ASPESSYM(8,ASPEXPTR),ASPSSYM(ASPCTPTR)              0567
*           ASPASSTN=ASPAEXCT+ONE;  /* SET THE ASST EXT. INDEX       */
         LA    @15,1                                               0568
         LH    @14,ASPAEXCT(,ASPCTPTR)                             0568
         LR    @01,@14                                             0568
         ALR   @01,@15                                             0568
         STC   @01,ASPASSTN(,ASPEXPTR)                             0568
*           IF ASPAEXCT=HLFZERO THEN                               0569
         LTR   @14,@14                                             0569
         BNZ   @RF00569                                            0569
*             ASPEXTNM=ONE;         /* IF NO PREVIOUS EXT            */
         ST    @15,ASPEXTNM(,ASPEXPTR)                             0570
*           ELSE                                                   0571
*             ASPEXTNM=LASTLPME->ASPEXTNM+ONE;/* PREVIOUS EXT, INCR
*                                      LAST EXT NUMBER               */
         B     @RC00569                                            0571
@RF00569 LA    @15,1                                               0571
         AL    @15,ASPEXTNM(,LASTLPME)                             0571
         ST    @15,ASPEXTNM(,ASPEXPTR)                             0571
*           ASPAEXCT=ASPAEXCT+ONE;  /* SET THE ASST EXT. COUNTER IN
*                                      BASE ASPCT                    */
@RC00569 LA    @15,1                                               0572
         AH    @15,ASPAEXCT(,ASPCTPTR)                             0572
         STH   @15,ASPAEXCT(,ASPCTPTR)                             0572
*           ASPASSTP(ASPAEXCT)=ASPEXPTR;/* SET EXT. POINTER IN BASE
*                                      ASPCT                         */
         SLA   @15,2                                               0573
         ST    ASPEXPTR,ASPASSTP-4(@15,ASPCTPTR)                   0573
*           LASTASST=ASPEXPTR;      /* LAST ASST EXT IS NEW ONE JUST
*                                      BUILT                         */
         LR    LASTASST,ASPEXPTR                                   0574
*           ASPEXPTR=ASPEXPTR+LENGTH(ASPEXTSN);/* INCR ASST EXT ADDR
*                                      BY LENGTH SINGLE EXT, OBTAINS
*                                      LPME EXT ADDR.                */
         AL    ASPEXPTR,@CF01834                                   0575
*         END;                      /* END PROCESSING WHERE BOTH EXT.
*                                      SUCCESSFULLY OBTAINED         */
*     END;                          /* END PROCESSING FOR BOTH EXT.
*                                      NEEDED                        */
@RF00552 DS    0H                                                  0578
*                                                                  0578
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING INTITALIZES THE LPME EXT. IF IT WAS SUCCESSFULLY*/
*   /* OBTAINED AND RETURNS TO THE CALLER.                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0578
*   IF RTNCODE=CODE00 THEN                                         0578
@RF00537 L     @15,RTNCODE(,ASMVTPTR)                              0578
         LTR   @15,@15                                             0578
         BNZ   @RF00578                                            0578
*     DO;                                                          0579
*       ASPEIDNT=LPME;              /* SET THE EXT ID                */
         MVC   ASPEIDNT(4,ASPEXPTR),@CC01732                       0580
*       ASPESSYM=ASPSSYM;           /* PROPAGATE THE 'S' SYMBOL      */
         MVC   ASPESSYM(8,ASPEXPTR),ASPSSYM(ASPCTPTR)              0581
*       ASPASSTN=ASPAEXCT;          /* SET THE ASST EXT. INDEX       */
         LH    @15,ASPAEXCT(,ASPCTPTR)                             0582
         STC   @15,ASPASSTN(,ASPEXPTR)                             0582
*       ASPASSTI=((ASPLEXCT+ONE)//ASPNLPME);/* SET THE LPME EXT.   0583
*                                      INDEX                         */
         LA    @15,1                                               0583
         LH    @00,ASPLEXCT(,ASPCTPTR)                             0583
         ALR   @00,@15                                             0583
         SRDA  @00,32                                              0583
         D     @00,@CF00518                                        0583
         STH   @00,ASPASSTI(,ASPEXPTR)                             0583
*       IF EXPBIT=ON THEN                                          0584
         TM    EXPBIT(ASMVTPTR),B'01000000'                        0584
         BNO   @RF00584                                            0584
*         ASPEXTNM=LASTASST->ASPEXTNM+ONE;/* EXT NUM IS INCR BY EXT
*                                      NUM OF ASST EXT JUST BUILT IF
*                                      BOTH EXTS WERE NEEDED         */
         AL    @15,ASPEXTNM(,LASTASST)                             0585
         ST    @15,ASPEXTNM(,ASPEXPTR)                             0585
*       ELSE                                                       0586
*         ASPEXTNM=LASTLPME->ASPEXTNM+ONE;/* ONLY LPME EXT NEEDED, 0586
*                                      INCR LAST LPME EXT NUM        */
         B     @RC00584                                            0586
@RF00584 LA    @15,1                                               0586
         AL    @15,ASPEXTNM(,LASTLPME)                             0586
         ST    @15,ASPEXTNM(,ASPEXPTR)                             0586
*       ASPLEXCT=ASPLEXCT+ONE;      /* INCR LPME EXT CNT             */
@RC00584 LA    @15,1                                               0587
         AH    @15,ASPLEXCT(,ASPCTPTR)                             0587
         STH   @15,ASPLEXCT(,ASPCTPTR)                             0587
*       LASTASST->ASPASSTE(ASPASSTI+ONE)=ASPEXPTR;/* STORE THE LPME
*                                      EXT PTR IN THE ASST EXT       */
         LH    @15,ASPASSTI(,ASPEXPTR)                             0588
         SLA   @15,2                                               0588
         ST    ASPEXPTR,ASPASSTE(@15,LASTASST)                     0588
*       RFY                                                        0589
*        (ASPEXPTR,                                                0589
*         LASTASST,                                                0589
*         LASTLPME) UNRSTD;                                        0589
*       RTNCODE=CODE00;             /* OPERATIONS SUCCESSFUL         */
         SLR   @12,@12                                             0590
         ST    @12,RTNCODE(,ASMVTPTR)                              0590
*       RFY                                                        0591
*         R14 RSTD;                                                0591
*     END;                          /* END INITIALIZATION OF LPME  0592
*                                      EXT.                          */
*   R14=R8;                         /* RESTORE RETURN ADDR           */
@RF00578 LR    R14,R8                                              0593
*   RFY                                                            0594
*     R8 UNRSTD;                                                   0594
*   END EXPAND;                                                    0595
@EL00004 DS    0H                                                  0595
@EF00004 DS    0H                                                  0595
@ER00004 BR    @14                                                 0595
@PB00004 DS    0H                                                  0595
*   END ILRPOS                                                     0596
*                                                                  0596
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (ILRACA  )                                       */
*/*%INCLUDE SYSLIB  (ILRACE  )                                       */
*/*%INCLUDE SYSLIB  (ILRAIA  )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IHARSMHD)                                       */
*/*%INCLUDE SYSLIB  (ILRASMHD)                                       */
*/*%INCLUDE SYSLIB  (ILRASMVT)                                       */
*/*%INCLUDE SYSLIB  (ILRASPCT)                                       */
*/*%INCLUDE SYSLIB  (ILRATA  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHAFRRS )                                       */
*/*%INCLUDE SYSLIB  (ILRLGE  )                                       */
*/*%INCLUDE SYSLIB  (ILRLGVT )                                       */
*/*%INCLUDE SYSLIB  (ILRPART )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*                                                                  0596
*       ;                                                          0596
@DATA    DS    0H
@SX01851 XC    AREA(0,R1AREA),AREA(R1AREA)
@DATD    DSECT
         DS    0F
ILRPOS   CSECT
         DS    0F
@CF00038 DC    F'1'
@CF00049 DC    F'4'
@CF00486 DC    F'28'
@CF00518 DC    F'256'
@CF01834 DC    F'1088'
@DATD    DSECT
         DS    0D
@ENDDATD EQU   *
ILRPOS   CSECT
         NOPR  ((@ENDDATD-@DATD)*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CA00028 DC    A(ILRPOS)
         DS    0D
@CC01730 DC    C'ASST'
@CC01732 DC    C'LPME'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
ACAPTR   EQU   @10
ACEPTR   EQU   @07
AIAPTR   EQU   @07
ASCBPTR  EQU   @12
RSMHDPTR EQU   @02
ASMVTPTR EQU   @03
ASPCTPTR EQU   @09
ASPEXPTR EQU   @10
LPMEPTR  EQU   @10
ATAPTR   EQU   @04
LGEPTR   EQU   @05
LGVTPTR  EQU   @13
LGVTEPTR EQU   @10
PARTPTR  EQU   @10
R6BASE   EQU   @06
NXTAIA   EQU   @08
CELL@    EQU   @01
LASTASST EQU   @11
LASTLPME EQU   @12
LPMEXTNX EQU   @01
R1AREA   EQU   @01
SRCAIAPT EQU   @10
R0       EQU   @00
R1       EQU   @01
R4       EQU   @04
R5       EQU   @05
R7       EQU   @07
R8       EQU   @08
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
R2       EQU   @02
R3       EQU   @03
R6       EQU   @06
R9       EQU   @09
         ENTRY ILRCRPS1
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
ACA      EQU   0
ACAOP    EQU   ACA
ACAFLG1  EQU   ACA+1
ACALGN   EQU   ACA+8
ACALPID  EQU   ACALGN
ACALGID  EQU   ACALPID
ACAFLSID EQU   ACALGID
ACARPN   EQU   ACALPID+4
ACAAIAP  EQU   ACARPN
ACASYM   EQU   ACA+16
ACATOLP  EQU   ACASYM
ACATOLGI EQU   ACATOLP
ACE      EQU   0
ACEOP    EQU   ACE+8
ACEFLG1  EQU   ACE+9
ACETRPWT EQU   ACEFLG1
ACEFLG3  EQU   ACE+11
ACELGE   EQU   ACE+12
ACELGN   EQU   ACE+16
ACERPN   EQU   ACELGN+4
ACETLPME EQU   ACERPN
ACESYM   EQU   ACE+24
ACESRCID EQU   ACESYM
ACEVLSID EQU   ACESRCID+1
ACEAIAPT EQU   ACESYM+4
AIA      EQU   0
AIAFQPA  EQU   AIA
AIABQPA  EQU   AIA+4
AIAOP    EQU   AIA+8
AIAFLG1  EQU   AIA+9
AIAWRITE EQU   AIAFLG1
AIAVIO   EQU   AIAFLG1
AIAFLG2  EQU   AIA+10
AIAPRIER EQU   AIAFLG2
AIAERROR EQU   AIAFLG2
AIABADID EQU   AIAFLG2
AIAFLG3  EQU   AIA+11
AIAPRINO EQU   AIAFLG3
AIATRPSP EQU   AIAFLG3
AIALPMEC EQU   AIAFLG3
AIANXAIA EQU   AIA+12
AIAID    EQU   AIA+16
AIALPID  EQU   AIAID
AIALGID  EQU   AIALPID
AIALSID  EQU   AIALGID
AIASSID  EQU   AIALSID+1
AIARPN   EQU   AIALPID+4
AIALSID2 EQU   AIARPN
AIALPMEP EQU   AIALSID2
AIACEPTR EQU   AIALPMEP
AIAGRPSZ EQU   AIA+24
AIALGE   EQU   AIAGRPSZ
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBRSM  EQU   ASCB+52
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBVSC  EQU   ASCB+120
ASCBNVSC EQU   ASCB+122
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
RSMHD    EQU   0
RSMFLG1  EQU   RSMHD+12
RSMQS    EQU   RSMHD+20
RSMLFQ   EQU   RSMQS
RSMLSQA  EQU   RSMQS+4
RSMLIOQ  EQU   RSMQS+8
RSMASMHD EQU   RSMHD+40
ASMVT    EQU   0
ASMFLAG1 EQU   ASMVT
ASMFLAG2 EQU   ASMVT+1
ASMPART  EQU   ASMVT+8
ASMSTAGQ EQU   ASMVT+32
ASMSTAGF EQU   ASMSTAGQ
ASMSTAGL EQU   ASMSTAGQ+4
ASMIORQR EQU   ASMVT+40
ASMPCCWQ EQU   ASMVT+64
ASMVSC   EQU   ASMVT+116
ASMNVSC  EQU   ASMVT+120
ASMLGVT  EQU   ASMVT+132
ASMLSAI  EQU   ASMVT+144
ASMGOSQS EQU   ASMVT+152
ASMPQIOE EQU   ASMVT+192
ASMPFRSL EQU   ASMVT+196
ASMPEX   EQU   ASMVT+224
ASMPIOFR EQU   ASMVT+272
ASMACEPC EQU   ASMVT+344
ASMWKSA1 EQU   ASMVT+368
ASMWKSA2 EQU   ASMVT+448
ASMWKSA3 EQU   ASMVT+528
ASMWKSA4 EQU   ASMVT+608
ASMWKSA5 EQU   ASMVT+688
ASMWKSA6 EQU   ASMVT+768
ASMSAVE  EQU   ASMVT+928
ASMPOOLS EQU   0
ASMCPAVQ EQU   ASMPOOLS+8
ASMCPAVL EQU   ASMCPAVQ
ASMCPRSQ EQU   ASMPOOLS+16
ASPCT    EQU   0
ASPHDR   EQU   ASPCT
ASPBKEY  EQU   ASPHDR+8
ASPSSYM  EQU   ASPBKEY
ASPASCB  EQU   ASPHDR+20
ASPFLAG  EQU   ASPHDR+28
ASPSAVRP EQU   ASPFLAG
ASPMAXPN EQU   ASPHDR+32
ASPLEXCT EQU   ASPHDR+44
ASPAEXCT EQU   ASPHDR+46
ASPASSTP EQU   ASPCT+48
ASPLPMES EQU   ASPCT+64
ASPEXTSN EQU   0
ASPEHDR  EQU   ASPEXTSN
ASPEIDNT EQU   ASPEHDR
ASPEXKEY EQU   ASPEHDR+8
ASPESSYM EQU   ASPEXKEY
ASPEXTNM EQU   ASPEXKEY+8
ASPASSTN EQU   ASPEHDR+20
ASPASSTI EQU   ASPEHDR+22
ASPSECTA EQU   ASPEXTSN+64
ASPLPME  EQU   0
ASPLPFLG EQU   ASPLPME
ASPLVALD EQU   ASPLPFLG
ASPLSAVE EQU   ASPLPFLG
ASPLOPIN EQU   ASPLPFLG
ASPLIOER EQU   ASPLPFLG
ASPLSVRP EQU   ASPLPFLG
ASPVLSID EQU   ASPLPME+1
ATA      EQU   0
ATAMODID EQU   ATA
ATASFLGS EQU   ATA+1
ATAPOS   EQU   ATASFLGS
ATATRPAG EQU   ATASFLGS+1
ATARFLGS EQU   ATA+4
ATARCRSN EQU   ATA+6
ATACLEAR EQU   ATA+8
ATAAIA   EQU   ATACLEAR
ATAACE   EQU   ATAAIA
ATAASCB  EQU   ATACLEAR+4
ATALGE   EQU   ATAASCB
ATAAIAQ  EQU   ATALGE
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
FRRS     EQU   0
FRRSHEAD EQU   FRRS
FRRSPTR  EQU   0
FRRSENTR EQU   0
FRRSFLGS EQU   FRRSENTR+4
FRRSFLG1 EQU   FRRSFLGS
FRREPTR  EQU   0
LGE      EQU   0
LGEPROCQ EQU   LGE
LGEPROCF EQU   LGEPROCQ
LGEPROCL EQU   LGEPROCQ+4
LGEFLAG1 EQU   LGE+8
LGEWRKPD EQU   LGEFLAG1
LGEGRINP EQU   LGEFLAG1
LGERELLG EQU   LGEFLAG1
LGESAVRQ EQU   LGEFLAG1
LGEASPCT EQU   LGE+12
LGVT     EQU   0
LGVMAXLG EQU   LGVT+8
LGVENTRS EQU   LGVT+16
LGVTE    EQU   0
LGVLGVTE EQU   LGVTE
LGVELGEP EQU   LGVLGVTE
LGVEASCB EQU   LGVLGVTE+4
LGVELGID EQU   LGVEASCB
PART     EQU   0
PARTHDR  EQU   PART
PARTAIAE EQU   PARTHDR+12
PARTTPAR EQU   PARTHDR+24
PARTCOMQ EQU   PARTHDR+48
PARTSPLQ EQU   PARTHDR+56
PARTDUPQ EQU   PARTHDR+64
PARTLOCQ EQU   PARTHDR+72
PARTENT  EQU   0
PARELKUP EQU   PARTENT+4
PARELKFL EQU   PARELKUP
PARETYPE EQU   PARTENT+8
PAREFLG1 EQU   PARTENT+9
PAREPTR  EQU   0
AREA     EQU   0
ILRFRSL1 EQU   0
ILRQIOE  EQU   0
ILRPEX   EQU   0
GMACELL  EQU   0
GMANEXT  EQU   GMACELL
ASMHDPTR EQU   0
DUMMY    EQU   RSMASMHD
ASMHD    EQU   DUMMY
ASHFLAG1 EQU   ASMHD
ASHFLAG2 EQU   ASMHD+1
ASHIOCNT EQU   ASMHD+8
ASHLOCK  EQU   ASMHD+20
ASM1WKSV EQU   ASMWKSA1
ASM1RGSV EQU   ASM1WKSV
ASM1WRKA EQU   ASM1WKSV+60
ASM2WKSV EQU   ASMWKSA2
ASM2WRKA EQU   ASM2WKSV+52
ASM2FLGS EQU   ASM2WRKA+12
ASM3WKSV EQU   ASMWKSA3
ASM4WKSV EQU   ASMWKSA4
ASM4RGSV EQU   ASM4WKSV
ASM5WKSV EQU   ASMWKSA5
ASM5RGSV EQU   ASM5WKSV
ASPLPMEE EQU   ASPSECTA
ASPASST  EQU   ASPSECTA
ASPASSTE EQU   ASPASST
CVTPTR   EQU   FLCCVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTASMVT EQU   CVTS01+356
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
PSARSVTE EQU   PSARSVT
RPN      EQU   AIARPN
RPNA     EQU   RPN
RPNAA    EQU   RPN+2
RPNLL    EQU   RPN+3
WKAREA   EQU   ASMWKSA6
RTNCODE  EQU   WKAREA+60
SAVDLGID EQU   WKAREA+64
INTFLAGS EQU   WKAREA+68
WORKPEND EQU   INTFLAGS
EXPBIT   EQU   INTFLAGS
R7SAVE   EQU   WKAREA+72
R4SAVE   EQU   WKAREA+76
FLC      EQU   PSA
*                                      START UNREFERENCED COMPONENTS
@NM00056 EQU   WKAREA+69
@NM00055 EQU   INTFLAGS
@NM00054 EQU   WKAREA
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
ASM5FLGS EQU   ASM5WKSV+64
ASM5AIA  EQU   ASM5WKSV+60
ASM5GCTR EQU   ASM5WKSV+56
ASM5SR14 EQU   ASM5WKSV+52
@NM00009 EQU   ASM5RGSV+4
ASM5RG2  EQU   ASM5RGSV
@NM00008 EQU   ASM4RGSV+4
ASM4RG2  EQU   ASM4RGSV
ASM3SR13 EQU   ASM3WKSV+28
ASM3R14B EQU   ASM3WKSV+24
ASM3R14A EQU   ASM3WKSV+20
ASM3GRPA EQU   ASM3WKSV+16
ASM3TMPA EQU   ASM3WKSV+12
ASM3PIOP EQU   ASM3WKSV+8
ASM3GENQ EQU   ASM3WKSV+4
ASM3SWPQ EQU   ASM3WKSV
ASM2SR14 EQU   ASM2WRKA+16
@NM00007 EQU   ASM2WRKA+13
ASM2WFLG EQU   ASM2FLGS
ASM2RFLG EQU   ASM2FLGS
ASM2DUPQ EQU   ASM2WRKA+8
ASM2CAQ  EQU   ASM2WRKA+4
ASM2PAQ  EQU   ASM2WRKA
ASM2RGSV EQU   ASM2WKSV
ASM1NXTA EQU   ASM1WRKA+4
ASM1ASCB EQU   ASM1WRKA
ASM1RG15 EQU   ASM1RGSV+56
@NM00006 EQU   ASM1RGSV+4
ASM1RG1  EQU   ASM1RGSV
ASHLGEQ  EQU   ASMHD+28
ASHVSRBP EQU   ASMHD+24
ASHCAPQ  EQU   ASMHD+16
ASHSWAPQ EQU   ASMHD+12
ASHBKSLT EQU   ASMHD+4
ASHSWPCT EQU   ASMHD+2
ASHRSV12 EQU   ASHFLAG2
ASHRSV11 EQU   ASHFLAG2
ASHRSV10 EQU   ASHFLAG2
ASHRSV9  EQU   ASHFLAG2
ASHRSV8  EQU   ASHFLAG2
ASHRSV7  EQU   ASHFLAG2
ASHRSV13 EQU   ASHFLAG2
ASHSCHED EQU   ASHFLAG2
ASHRSV6  EQU   ASHFLAG1
ASHRSV5  EQU   ASHFLAG1
ASHRSV4  EQU   ASHFLAG1
ASHRSV3  EQU   ASHFLAG1
ASHRSV2  EQU   ASHFLAG1
ASHPERME EQU   ASHFLAG1
ASHCAPER EQU   ASHFLAG1
ASHSWPOT EQU   ASHFLAG1
@NM00029 EQU   PARTENT+62
PARELCYL EQU   PARTENT+60
PARERQTM EQU   PARTENT+56
PAREWTQE EQU   PARTENT+52
PARENODE EQU   PARTENT+48
PAREUCBP EQU   PARTENT+44
PAREEDBP EQU   PARTENT+40
PAREPCTP EQU   PARTENT+36
PAREPATP EQU   PARTENT+32
PAREIORB EQU   PARTENT+28
PARERRCT EQU   PARTENT+24
PARESLTA EQU   PARTENT+20
PARESZSL EQU   PARTENT+16
PAREIOEQ EQU   PARTENT+12
PARENN   EQU   PARTENT+10
@NM00028 EQU   PAREFLG1
PAREINCP EQU   PAREFLG1
PAREDSBD EQU   PAREFLG1
PARENUSE EQU   PAREFLG1
@NM00027 EQU   PARETYPE
PARELOCL EQU   PARETYPE
PAREDPLX EQU   PARETYPE
PARECOMM EQU   PARETYPE
PAREPLPA EQU   PARETYPE
PARECPCT EQU   PARELKUP+2
PAREIORN EQU   PARELKUP+1
@NM00026 EQU   PARELKFL
PAREFSIP EQU   PARELKFL
PAREPARE EQU   PARTENT
PARTENTS EQU   PART+80
PARTLOCL EQU   PARTLOCQ+4
PARTLOCF EQU   PARTLOCQ
PARTDUPL EQU   PARTDUPQ+4
PARTDUPF EQU   PARTDUPQ
PARTSPLL EQU   PARTSPLQ+4
PARTSPLF EQU   PARTSPLQ
PARTCOML EQU   PARTCOMQ+4
PARTCOMF EQU   PARTCOMQ
PARTLOCK EQU   PARTHDR+44
PARTLKUP EQU   PARTHDR+40
@NM00025 EQU   PARTHDR+34
PARTLCNT EQU   PARTHDR+32
PARTPCTQ EQU   PARTHDR+28
PARTDSNL EQU   PARTTPAR
PARTCIR2 EQU   PARTHDR+20
PARTCIR1 EQU   PARTHDR+16
PARTEUSE EQU   PARTHDR+8
PARTSIZE EQU   PARTHDR+4
PARTIDEN EQU   PARTHDR
LGVENEXT EQU   LGVELGEP
LGVSIZE  EQU   LGVT+12
LGVLGVEP EQU   LGVT+4
LGVIDENT EQU   LGVT
@NM00024 EQU   LGE+24
LGELGID  EQU   LGE+20
LGENEXT  EQU   LGE+16
LGESLTCT EQU   LGE+10
@NM00023 EQU   LGE+9
LGERSV5  EQU   LGEFLAG1
LGERSV4  EQU   LGEFLAG1
LGERSV3  EQU   LGEFLAG1
LGERSV2  EQU   LGEFLAG1
FRRSPARM EQU   FRRSENTR+8
@NM00022 EQU   FRRSFLGS+1
@NM00021 EQU   FRRSFLG1
FRRSNEST EQU   FRRSFLG1
FRRSRCUR EQU   FRRSFLG1
FRRSFRRA EQU   FRRSENTR
FRRSENTS EQU   FRRS+84
FRRSRTMW EQU   FRRS+16
FRRSCURR EQU   FRRSHEAD+12
FRRSELEN EQU   FRRSHEAD+8
FRRSLAST EQU   FRRSHEAD+4
FRRSEMP  EQU   FRRSHEAD
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00020 EQU   CVTFIX+248
@NM00019 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
ATARCODE EQU   ATA+7
ATARCRF8 EQU   ATARCRSN
ATARCRF7 EQU   ATARCRSN
ATARCRF6 EQU   ATARCRSN
ATARCRF5 EQU   ATARCRSN
ATARCRF4 EQU   ATARCRSN
ATARCRF3 EQU   ATARCRSN
ATARCRF2 EQU   ATARCRSN
ATARCRF1 EQU   ATARCRSN
ATARSV2  EQU   ATARFLGS
ATABADPK EQU   ATARFLGS
ATASCCWP EQU   ATARFLGS
ATASGNST EQU   ATARFLGS
ATARSV1  EQU   ATASFLGS+1
ATASRT   EQU   ATASFLGS+1
ATASWPDR EQU   ATASFLGS+1
ATASWAP  EQU   ATASFLGS+1
ATAPAGCM EQU   ATASFLGS
ATAPAGIO EQU   ATASFLGS
ATAPCOMP EQU   ATASFLGS
ATAVIOCM EQU   ATASFLGS
ATASCOMP EQU   ATASFLGS
ATASLSQA EQU   ATASFLGS
ATAQIOE  EQU   ATASFLGS
ASPSLOT  EQU   ASPVLSID+1
ASPPRTNN EQU   ASPVLSID
@NM00018 EQU   ASPLPFLG
@NM00017 EQU   ASPEXTSN+1088
@NM00016 EQU   ASPEHDR+24
@NM00015 EQU   ASPEHDR+21
@NM00014 EQU   ASPEHDR+4
@NM00013 EQU   ASPCT+1088
ASPSAVCT EQU   ASPHDR+40
ASPBKSLT EQU   ASPHDR+36
@NM00012 EQU   ASPHDR+29
@NM00011 EQU   ASPFLAG
ASPSAVED EQU   ASPFLAG
ASPLGE   EQU   ASPHDR+24
@NM00010 EQU   ASPBKEY+8
ASPLGID  EQU   ASPHDR+4
ASPIDENT EQU   ASPHDR
ASMCPRES EQU   ASMCPRSQ+4
ASMCPTAK EQU   ASMCPRSQ
ASMCPCNT EQU   ASMCPAVQ+4
ASMCPEXT EQU   ASMPOOLS+6
ASMCPSIZ EQU   ASMPOOLS+4
ASMCPID  EQU   ASMPOOLS
ASMRSV12 EQU   ASMVT+1000
ASMWKSA7 EQU   ASMVT+848
ASMSWKPC EQU   ASMVT+328
ASMBWKPC EQU   ASMVT+312
ASMIOEPC EQU   ASMVT+296
ASMRSV10 EQU   ASMVT+280
ASMPVACE EQU   ASMVT+276
ASMPVACQ EQU   ASMVT+268
ASMPMSGS EQU   ASMVT+264
ASMPMSG0 EQU   ASMVT+260
ASMPFRLG EQU   ASMVT+256
ASMPRLG  EQU   ASMVT+252
ASMPACT  EQU   ASMVT+248
ASMPSAV  EQU   ASMVT+244
ASMPCMP  EQU   ASMVT+240
ASMPCMPA EQU   ASMVT+236
ASMPCMPN EQU   ASMVT+232
ASMPCMPD EQU   ASMVT+228
ASMVRMTR EQU   ASMVT+220
ASMPSRBC EQU   ASMVT+216
ASMPSRMT EQU   ASMVT+212
ASMPSWPD EQU   ASMVT+208
ASMPTM   EQU   ASMVT+204
ASMPFRSW EQU   ASMVT+200
ASMRSV8  EQU   ASMVT+184
ASMTASCB EQU   ASMVT+180
ASMRLGWQ EQU   ASMVT+176
ASMRLGRQ EQU   ASMVT+172
ASMTMECB EQU   ASMVT+168
ASMTCBPT EQU   ASMVT+164
ASMREQCT EQU   ASMVT+160
ASMGOSWK EQU   ASMGOSQS+4
ASMGOSWT EQU   ASMGOSQS
ASMLSAIH EQU   ASMLSAI+4
ASMLSAIL EQU   ASMLSAI
ASMCINV  EQU   ASMVT+140
ASMSTGXA EQU   ASMVT+136
ASMSLOTV EQU   ASMVT+128
ASMERRS  EQU   ASMVT+124
ASMSLOTS EQU   ASMVT+112
ASMBKSLT EQU   ASMVT+108
ASMRSV7  EQU   ASMVT+92
ASMPSRB  EQU   ASMVT+88
ASMSRBCT EQU   ASMVT+84
ASMIOCNT EQU   ASMVT+80
ASMBURST EQU   ASMVT+76
ASMPCCWN EQU   ASMVT+72
ASMPCCWC EQU   ASMPCCWQ+4
ASMPCCWA EQU   ASMPCCWQ
ASMRSV6  EQU   ASMVT+48
ASMIORQC EQU   ASMVT+44
ASMRSV5  EQU   ASMVT+28
ASMMSGBF EQU   ASMVT+24
ASMEREC  EQU   ASMVT+20
ASMTRPAG EQU   ASMVT+16
ASMGOS   EQU   ASMVT+12
ASMSART  EQU   ASMVT+4
ASMRSV4  EQU   ASMVT+2
ASMWARM  EQU   ASMFLAG2
ASMQUICK EQU   ASMFLAG2
ASMNOTPT EQU   ASMFLAG2
ASMNOTMR EQU   ASMFLAG2
ASMNOSAV EQU   ASMFLAG2
ASMCALLQ EQU   ASMFLAG2
ASMPLPAS EQU   ASMFLAG1
ASMCOMMF EQU   ASMFLAG1
ASMPLPAF EQU   ASMFLAG1
ASMNODPX EQU   ASMFLAG1
ASMRSV1  EQU   ASMFLAG1
ASMNOLCL EQU   ASMFLAG1
ASMNOCWQ EQU   ASMFLAG1
ASMDUPLX EQU   ASMFLAG1
RSMFOEQ  EQU   RSMHD+36
RSMLIOQL EQU   RSMLIOQ+4
RSMLIOQF EQU   RSMLIOQ
RSMLSQAL EQU   RSMLSQA+2
RSMLSQAF EQU   RSMLSQA
RSMLFQL  EQU   RSMLFQ+2
RSMLFQF  EQU   RSMLFQ
RSMRSV2  EQU   RSMHD+16
RSMCNTFX EQU   RSMHD+14
RSMRSV1  EQU   RSMHD+13
@NM00005 EQU   RSMFLG1
RSMFAIL  EQU   RSMFLG1
RSMGFADD EQU   RSMFLG1
RSMCPNC  EQU   RSMFLG1
RSMCPNU  EQU   RSMFLG1
RSMGFAD  EQU   RSMFLG1
RSMIOCPC EQU   RSMFLG1
RSMIOCPU EQU   RSMFLG1
RSMASCB  EQU   RSMHD+8
RSMSPCT  EQU   RSMHD+4
RSMVSTO  EQU   RSMHD
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
AIADPXCT EQU   AIALGE
AIASLOT  EQU   AIASSID+1
@NM00004 EQU   AIASSID
@NM00003 EQU   AIALSID
AIARCSN  EQU   AIANXAIA+2
AIACYL   EQU   AIANXAIA
AIARSV9  EQU   AIAFLG3
AIARSV8  EQU   AIAFLG3
AIARSV7  EQU   AIAFLG3
AIARSV6  EQU   AIAFLG3
AIARSV5  EQU   AIAFLG3
AIASECER EQU   AIAFLG2
AIARSV4  EQU   AIAFLG2
AIAIORTY EQU   AIAFLG2
AIATERMR EQU   AIAFLG2
AIAFRAUX EQU   AIAFLG2
AIARSV1  EQU   AIAFLG1
AIASWPFX EQU   AIAFLG1
AIAPAGDS EQU   AIAFLG1
AIALSQA  EQU   AIAFLG1
AIADUPLX EQU   AIAFLG1
AIAPRIV  EQU   AIAFLG1
@NM00002 EQU   ACE+40
ACESRBWK EQU   ACE+36
ACEECB   EQU   ACE+32
@NM00001 EQU   ACESRCID
ACELGID  EQU   ACELGN
ACERSV10 EQU   ACEFLG3
ACERSV9  EQU   ACEFLG3
ACERSV8  EQU   ACEFLG3
ACELPMEC EQU   ACEFLG3
ACERSV7  EQU   ACEFLG3
ACERSV6  EQU   ACEFLG3
ACEPRINO EQU   ACEFLG3
ACEGRPRQ EQU   ACEFLG3
ACEFLG2  EQU   ACE+10
ACERSV5  EQU   ACEFLG1
ACERSV4  EQU   ACEFLG1
ACERSV3  EQU   ACEFLG1
ACERSV2  EQU   ACEFLG1
ACENOACT EQU   ACEFLG1
ACEOVRID EQU   ACEFLG1
ACEUSYM  EQU   ACEFLG1
ACEBQPA  EQU   ACE+4
ACEFQPA  EQU   ACE
ACATORPN EQU   ACATOLP+4
ACAMAXPN EQU   ACATOLGI
ACARSV4  EQU   ACA+4
ACAASID  EQU   ACA+2
ACARSV3  EQU   ACAFLG1
ACARSV2  EQU   ACAFLG1
ACARSV1  EQU   ACAFLG1
ACAFSYM  EQU   ACAFLG1
ACAFSPL  EQU   ACAFLG1
ACAFFIX  EQU   ACAFLG1
ACARSV5  EQU   ACAFLG1
ACAFMEM  EQU   ACAFLG1
@NM00053 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00052 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00051 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00050 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00049 EQU   FLCFSA
@NM00048 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00047 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00046 EQU   FLCIOA
@NM00045 EQU   FLCMCLA+15
@NM00044 EQU   FLCMCLA+14
@NM00043 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00042 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00041 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00040 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00039 EQU   FLCPER
@NM00038 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00037 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00036 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00035 EQU   FLCPIILC
@NM00034 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00033 EQU   FLCSVILC
@NM00032 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00031 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00030 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
*                                      END UNREFERENCED COMPONENTS
@RT00064 EQU   IDERROR
@RT00068 EQU   IDERROR
@RT00073 EQU   IDERROR
@RT00082 EQU   IDERROR
@RT00085 EQU   IDERROR
@PB00002 EQU   @EC00273
@RC00322 EQU   @EL00003
@PB00003 EQU   @EC00389
@RC00323 EQU   @RC00322
@RC00324 EQU   @RC00323
@ENDDATA EQU   *
         END   ILRPOS,(C'PLS2040',0701,76114)
