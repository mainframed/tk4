         TITLE 'ILRSRT01 - PART MONITOR AND SLOT SORT FRR              *
                        '
ILRSRT01 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(24)                                             0001
         DC    C'ILRSRT01 78110  UZ16491 '                         0001
         DROP  @15
@PROLOG  BALR  @10,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@10                                         0001
*   PTR@DATD=REG0;                  /* GET PTR TO 200 BYTE WORK AREA */
         LR    PTR@DATD,REG0                                       0107
*   GEN(USING     @DATD,PTR@DATD);  /* TELL ASSEMBLER ABOUT DSECT  0108
*                                      BASE                          */
         USING     @DATD,PTR@DATD
*   WORKAREA=''B;                   /* CLEAR THE FRR WORK AREA       */
         XC    WORKAREA(200,PTR@DATD),WORKAREA(PTR@DATD)           0109
*   SAVE14=REG14;                                                  0110
         ST    REG14,SAVE14                                        0110
*   RFY                                                            0111
*    (REG0,                                                        0111
*     REG14) UNRSTD;                                               0111
*   SDWAPTR=REG1;                                                  0112
         ST    REG1,SDWAPTR                                        0112
*   ASMVTPTR=CVTASMVT;              /* GET BASE FOR ASMVT            */
         L     @12,CVTPTR                                          0113
         L     ASMVTPTR,CVTASMVT(,@12)                             0113
*   REG13=ADDR(REGSVARE);           /* GET REG SAVE AREA ADDRESS     */
         LA    REG13,REGSVARE                                      0114
*   EPAPTR=SDWAPARM->ATAEPATH;      /* SET STANDARD EPATH REG 4      */
         L     @12,SDWAPARM(,REG1)                                 0115
         L     EPAPTR,ATAEPATH(,@12)                               0115
*   ADDR(SDWAVRA)->ATA=SDWAPARM->ATA;/* COPY ATA TO RECORDING AREA   */
         MVC   ATA+404(24,REG1),ATA(@12)                           0116
*   SDWAURAL=LENGTH(ATA);           /* UPDATE COUNT OF DATA IN     0117
*                                      RECORDING AREA                */
         MVI   SDWAURAL(REG1),X'18'                                0117
*SRTSETRP:                                                         0118
*   DO;                             /* SETRP FRELOCK(SALLOC,ASM(PARTL
*                                      OCK))RECORD(YES)RECPARM(RECNAM
*                                      ES)                           */
SRTSETRP DS    0H                                                  0119
*     RESPECIFY                                                    0119
*      (GPR00P,                                                    0119
*       GPR01P,                                                    0119
*       GPR14P,                                                    0119
*       GPR15P) RSTD;                                              0119
*     GPR01P->SDWARCDE=0;           /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0120
*     GPR01P->SDWARCRD='1'B;        /* TURN ON RECORD INDICATOR      */
         OI    SDWARCRD(GPR01P),B'10000000'                        0121
*     GPR15P=ADDR(RECNAMES);        /* ACCESS RECORD PARAMETER LIST  */
         LA    GPR15P,RECNAMES                                     0122
*     GPR01P->SDWARECP=GPR15P->I256C(1:24);/* COPY RECORD PARAMETERS */
         MVC   SDWARECP(24,GPR01P),I256C(GPR15P)                   0123
*     GPR01P->SDWAAPLW=ADDR(PARTLOCK);/* INITIALIZE ASMPAT LOCKWORD  */
         L     @12,ASMPART(,ASMVTPTR)                              0124
         LA    @12,PARTLOCK(,@12)                                  0124
         ST    @12,SDWAAPLW(,GPR01P)                               0124
*     GPR01P->SDWAACF3=GPR01P->SDWAACF3×'00001100'B;/* INITIALIZE  0125
*                                      LOCK FLAGS                    */
         OI    SDWAACF3(GPR01P),B'00001100'                        0125
*     RESPECIFY                                                    0126
*      (GPR00P,                                                    0126
*       GPR01P,                                                    0126
*       GPR14P,                                                    0126
*       GPR15P) UNRSTD;                                            0126
*   END;                                                           0127
*   IF SDWAPARM->ATASRT=BITON THEN  /* INDICATE ILRSRT WAS IN CONTROL
*                                      AT FAILURE                    */
         L     @12,SDWAPARM(,REG1)                                 0128
         TM    ATASRT(@12),B'00010000'                             0128
         BNO   @RF00128                                            0128
*     SDWACSCT=SRT;                                                0129
         MVC   SDWACSCT(8,REG1),@CC02146                           0129
*   IF EPAPTR=0 THEN                                               0130
@RF00128 SLR   @12,@12                                             0130
         CR    EPAPTR,@12                                          0130
         BE    @RT00130                                            0130
*     GOTO RESCHED;                 /* NOT ENOUGH DATA FOR RECOVERY  */
*   EVAL(ADDR(SDWAVRA)+SDWAURAL)->EPATH=EPATH;/* COPY EPATH          */
         LA    @11,SDWAVRA(,REG1)                                  0132
         SLR   @08,@08                                             0132
         IC    @08,SDWAURAL(,REG1)                                 0132
         ALR   @11,@08                                             0132
         MVC   EPATH(40,@11),EPATH(EPAPTR)                         0132
*   SDWAURAL=SDWAURAL+LENGTH(EPATH);/* UPDATE SPACE USED             */
         AH    @08,@CH01042                                        0133
         STC   @08,SDWAURAL(,REG1)                                 0133
*   IF EPAPARM=0 THEN                                              0134
         C     @12,EPAPARM(,EPAPTR)                                0134
         BE    @RT00134                                            0134
*     GOTO RESCHED;                 /* NOT ENOUGH DATA FOR RECOVERY  */
*                                                                  0136
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING ROUTINE WILL VALIDITY CHECK THE IOE AND IF IT IS*/
*   /* A READ IOE RETURN IT TO THE UNSORTED READ QUEUE. IF IT IS A   */
*   /* WRITE ITS ADDRESS IS LEFT IN EPAIOEIP TO BE PROCESSED LATER   */
*   /* WHEN THE CHAIN OF WRITE IOE'S IS PROCESSED                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0136
*   RFY                                                            0136
*    (REG0,                                                        0136
*     REG15) RSTD;                                                 0136
*   REG0=EPAIOEIP;                  /* GET ADDR OF IOE               */
         L     REG0,EPAIOEIP(,EPAPTR)                              0137
*   STM(REG2,REG7,REGSVARE);        /* THESE ARE DESTROYED           */
         STM   REG2,REG7,REGSVARE                                  0138
*   CALL ILRVIOE;                   /* VALIDITY CHECK THE IOE        */
         L     @15,@CV02114                                        0139
         BALR  @14,@15                                             0139
*   LM(REG2,REG7,REGSVARE);                                        0140
         LM    REG2,REG7,REGSVARE                                  0140
*   IF REG15=0 THEN                 /* THE IOE IS OKAY               */
         SLR   @14,@14                                             0141
         CR    REG15,@14                                           0141
         BNE   @RF00141                                            0141
*     IF EPAIOEIP->IOEAIA^=0 THEN   /* THERE IS AN AIA               */
         L     @12,EPAIOEIP(,EPAPTR)                               0142
         L     @11,IOEAIA(,@12)                                    0142
         CR    @11,@14                                             0142
         BE    @RF00142                                            0142
*       IF EPAIOEIP->IOEAIA->AIAWRITE=BITOFF THEN                  0143
         TM    AIAWRITE(@11),B'10000000'                           0143
         BNZ   @RF00143                                            0143
*         DO;                       /* THE IOE IS FOR A READ REQUEST */
*           RFY                                                    0145
*            (REG0,                                                0145
*             REG15) UNRSTD;                                       0145
*                                                                  0145
*           /*********************************************************/
*           /*                                                       */
*           /* PUT THE IOE BACK ON THE UNSORTED READ QUEUE ON THE    */
*           /* PARTE. THE ADDR OF THE PARTE IS IN THE PARMLIST USED  */
*           /* BY PART MONITOR AND SLOT SORT                         */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0146
*           RFY                                                    0146
*            (REG11,                                               0146
*             REG12) RSTD;                                         0146
*           REG11=PAREIOEQ;         /* GET PTR TO 1ST IOE 0N UNSORTED
*                                      READ QUEUE                    */
         L     @08,EPAPARM(,EPAPTR)                                0147
         L     @08,PAREPTR(,@08)                                   0147
         L     REG11,PAREIOEQ(,@08)                                0147
*           REG12=EPAIOEIP;         /* GET PTR TO IOE THAT WILL BE 0148
*                                      PUT BACK ON THE QUEUE         */
         L     @08,EPAIOEIP(,EPAPTR)                               0148
         LR    REG12,@08                                           0148
*           EPAIOEIP=0;             /* FINISHED WITH THIS IOE        */
         ST    @14,EPAIOEIP(,EPAPTR)                               0149
*CSLOOP1:                                                          0150
*           REG12->IOENXT=REG11;    /* CHAIN NEW IOE                 */
CSLOOP1  ST    REG11,IOENXT(,REG12)                                0150
*           CS(REG11,REG12,PAREIOEQ);/* UPDATE QUEUE HEAD            */
         L     @08,EPAPARM(,EPAPTR)                                0151
         L     @08,PAREPTR(,@08)                                   0151
         CS    REG11,@12,PAREIOEQ(@08)                             0151
*           BC(7,CSLOOP1);          /* TRY AGAIN IF FAILURE          */
         BC    7,CSLOOP1                                           0152
*           RFY                                                    0153
*            (REG11,                                               0153
*             REG12) UNRSTD;                                       0153
*         END;                      /* END OF IOE FOR READ REQUEST   */
*       ELSE                                                       0155
*         EPAIOEIP->IOENXT=0;       /* WRITE IOE, SO LEAVE IT FOR  0155
*                                      LATER PROCESSING WHEN THE   0155
*                                      QUEUES ARE ADDRESSED          */
         B     @RC00143                                            0155
@RF00143 L     @12,EPAIOEIP(,EPAPTR)                               0155
         SLR   @11,@11                                             0155
         ST    @11,IOENXT(,@12)                                    0155
*     ELSE                                                         0156
*       DO;                         /* THERE IS NO AIA SO RETURN IOE */
         B     @RC00142                                            0156
@RF00142 DS    0H                                                  0157
*         RFY                                                      0157
*          (REG11,                                                 0157
*           REG12) RSTD;                                           0157
*         REG1=EPAIOEIP;                                           0158
         L     REG1,EPAIOEIP(,EPAPTR)                              0158
*         EPAIOEIP=0;               /* FINISHED WITH THIS IOE        */
*                                                                  0159
         SLR   @08,@08                                             0159
         ST    @08,EPAIOEIP(,EPAPTR)                               0159
*         /***********************************************************/
*         /*                                                         */
*         /* BEGIN ILRGMA MACRO EXPANSION                            */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0160
*         DO;                       /* ILRGMA FREE                 0160
*                                      CELL(IOE)WORKREGS(REG11,REG12)*/
*           DECLARE                 /* ASMVT VECTOR TO ILRPEX        */
*             ILRPEX ENTRY BASED(ASMPEX) VALRG(0);                 0161
*           DECLARE                 /* MAP FOR CELL CONTROL WORDS    */
*             1 GMACELL BASED BDY(WORD),                           0162
*              2 GMANEXT PTR(31);   /* PTR NEXT FREE CELL            */
*           RESPECIFY                                              0163
*            (R0,                                                  0163
*             R1,                                                  0163
*             REG11,                                               0163
*             REG12,                                               0163
*             R14,                                                 0163
*             R15) RESTRICTED;                                     0163
*           RESPECIFY                                              0164
*             ASMPOOLS BASED(REG11);                               0164
*           RESPECIFY                                              0165
*             GMACELL BASED(R1);                                   0165
*           REG11=ADDR(ASMIOEPC);                                  0166
         LA    REG11,ASMIOEPC(,ASMVTPTR)                           0166
*           R14=ASMCPAVL;                                          0167
         L     R14,ASMCPAVL(,REG11)                                0167
*GMA00042:                                                         0168
*           GMANEXT=R14;            /* PUT ADDR CURRENT FIRST IN   0168
*                                      INPUT CELL                    */
GMA00042 ST    R14,GMANEXT(,R1)                                    0168
*           CS(R14,R1,ASMCPAVL);    /* ADD INPUT CELL TO POOL        */
         CS    R14,@01,ASMCPAVL(REG11)                             0169
*           BC(7,GMA00042);                                        0170
         BC    7,GMA00042                                          0170
*           RESPECIFY                                              0171
*            (R0,                                                  0171
*             R1,                                                  0171
*             REG11,                                               0171
*             REG12,                                               0171
*             R14,                                                 0171
*             R15) UNRESTRICTED;                                   0171
*         END;                      /* ILRGMA FREE                 0172
*                                      CELL(IOE)WORKREGS(REG11,REG12)*/
*                                                                  0172
*         /***********************************************************/
*         /*                                                         */
*         /* END ILRGMA MACRO EXPANSION RELEASE THE IOE              */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0173
*         REG1=SDWAPTR;             /* REG1 WAS DESTROYED            */
         L     REG1,SDWAPTR                                        0173
*       END;                        /* END FOR NO AIA                */
*   ELSE                            /* IOE IS NOT VALID              */
*     EPAIOEIP=0;                   /* IOE IS BAD SO THROW IT AWAY   */
         B     @RC00141                                            0175
@RF00141 SLR   @12,@12                                             0175
         ST    @12,EPAIOEIP(,EPAPTR)                               0175
*                                                                  0176
*   /*****************************************************************/
*   /*                                                               */
*   /* NOW PROCESS THE READ AND WRITE IOE QUEUES THAT ARE CHECK      */
*   /* POINTED IN THE EPATH (EPAIOEQP) AND PARMLIST (WRTIOEQ). IF    */
*   /* THERE ARE VALID READ IOE'S THEY ARE RETURNED TO THE UNSORTED  */
*   /* READ QUEUE, PAREIOEQ. THE WRITE IOE'S ARE RETURNED TO THE     */
*   /* WRITE QUEUE ADDRESSED BY EPAWRTQ -- THE ASM CLASS LOCK FOR THE*/
*   /* WRITE QUEUE MUST BE HELD WHILE DOING THIS                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0176
*   RFY                                                            0176
*    (REG0,                                                        0176
*     REG5,                                                        0176
*     REG6,                                                        0176
*     REG7,                                                        0176
*     REG8) RSTD;                                                  0176
*                                                                  0176
@RC00141 DS    0H                                                  0177
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP TO VALIDITY CHECK THE READ IOE QUEUE REGS 5-7 DESTROYED*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0177
*   REG0=ADDR(EPAIOEQP);                                           0177
         LA    REG0,EPAIOEQP(,EPAPTR)                              0177
*   REG8=ADDR(VCKWORK);                                            0178
         LA    REG8,VCKWORK                                        0178
*   CALL ILRVIOEQ;                  /* VERIFY THE QUEUE OF READ IOE'S*/
*                                                                  0179
         L     @15,@CV02116                                        0179
         BALR  @14,@15                                             0179
*   /*****************************************************************/
*   /*                                                               */
*   /* IF ANY IOE WAS VALID EPAIOEQP WILL POINT TO A VALID IOE OR    */
*   /* QUEUE OF IOE'S. BUT IF NO IOE WAS VALID EPAIOEQP WILL BE ZERO */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0180
*   RFY                                                            0180
*    (REG0,                                                        0180
*     REG5,                                                        0180
*     REG6,                                                        0180
*     REG7,                                                        0180
*     REG8) UNRSTD;                                                0180
*   IF EPAIOEQP^=0 THEN                                            0181
         L     @12,EPAIOEQP(,EPAPTR)                               0181
         LTR   @12,@12                                             0181
         BZ    @RF00181                                            0181
*     DO;                           /* THERE ARE VALID IOE'S LEFT    */
*       RFY                                                        0183
*        (REG12) RSTD;                                             0183
*       REG12=EPAIOEQP;                                            0184
*                                                                  0184
         L     @11,EPAIOEQP(,EPAPTR)                               0184
         LR    REG12,@11                                           0184
*       /*************************************************************/
*       /*                                                           */
*       /* MUST FIND THE LAST IOE ON THE QUEUE SO THE QUEUE CAN BE   */
*       /* CHAINED TO THE CURRENT QUEUE ON THE PARTE                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0185
*       DO WHILE(REG12->IOENXT^=0);                                0185
         B     @DE00185                                            0185
@DL00185 DS    0H                                                  0186
*         REG12=REG12->IOENXT;                                     0186
         L     REG12,IOENXT(,REG12)                                0186
*       END;                        /* END OF DO WHILE               */
*                                                                  0187
@DE00185 ICM   @11,15,IOENXT(REG12)                                0187
         BNZ   @DL00185                                            0187
*       /*************************************************************/
*       /*                                                           */
*       /* REG12 NOW HAS THE ADDR OF THE LAST IOE                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0188
*       RFY                                                        0188
*        (REG11,                                                   0188
*         REG14) RSTD;                                             0188
*       REG11=PAREIOEQ;             /* GET CURRENT TOP OF UNSORTED 0189
*                                      READ QUEUE                    */
         L     @15,EPAPARM(,EPAPTR)                                0189
         L     @15,PAREPTR(,@15)                                   0189
         L     REG11,PAREIOEQ(,@15)                                0189
*       REG14=EPAIOEQP;                                            0190
         L     REG14,EPAIOEQP(,EPAPTR)                             0190
*CSLOOP2:                                                          0191
*       REG12->IOENXT=REG11;                                       0191
CSLOOP2  ST    REG11,IOENXT(,REG12)                                0191
*       CS(REG11,REG14,PAREIOEQ);                                  0192
         L     @15,EPAPARM(,EPAPTR)                                0192
         L     @15,PAREPTR(,@15)                                   0192
         CS    REG11,@14,PAREIOEQ(@15)                             0192
*       BC(7,CSLOOP2);                                             0193
         BC    7,CSLOOP2                                           0193
*     END;                          /* END OF VALID IOE'S LEFT       */
*                                                                  0195
*   /*****************************************************************/
*   /*                                                               */
*   /* THE QUEUE OF WRITE IOE'S ADDRESSED BY WRTIOEQ WILL BE VALIDITY*/
*   /* CHECKED AND RETURNED (ALONG WITH THE IOE ADDRESSED BY         */
*   /* EPAIOEIP) TO THE WRITE QUEUE POINTED TO BY EPAWRTQ            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0195
*   IF WRTIOEQ^=EPAWRTQ->WRTQSTRT THEN                             0195
@RF00181 L     @15,EPAPARM(,EPAPTR)                                0195
         L     @08,EPAWRTQ(,EPAPTR)                                0195
         CLC   WRTIOEQ(4,@15),WRTQSTRT(@08)                        0195
         BE    @RF00195                                            0195
*     DO;                           /* THE IOE'S ARE NOT ALREADY ON
*                                      THE WRITE QUEUE               */
*                                                                  0196
*       /*************************************************************/
*       /*                                                           */
*       /* SET UP TO VALIDITY CHECK THE QUEUE OF IOE'S BEFORE PUTTING*/
*       /* THEM BACK ON THE WRITE QUEUE                              */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0197
*       RFY                                                        0197
*        (REG0,                                                    0197
*         REG5,                                                    0197
*         REG6,                                                    0197
*         REG7,                                                    0197
*         REG8) RSTD;                                              0197
*       REG0=ADDR(WRTIOEQ);                                        0198
         LA    REG0,WRTIOEQ(,@15)                                  0198
*       REG8=ADDR(VCKWORK);                                        0199
         LA    REG8,VCKWORK                                        0199
*       CALL ILRVIOEQ;                                             0200
         L     @15,@CV02116                                        0200
         BALR  @14,@15                                             0200
*       RFY                                                        0201
*        (REG0,                                                    0201
*         REG5,                                                    0201
*         REG6,                                                    0201
*         REG7,                                                    0201
*         REG8) UNRSTD;                                            0201
*                                                                  0201
*       /*************************************************************/
*       /*                                                           */
*       /* IF A VALID IOE WAS ON THE CHAIN WRTIOEQ -> WRTQSTRT IS NON*/
*       /* ZERO                                                      */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0202
*       IF WRTIOEQ^=0 THEN          /* IOE'S ON QUE TO RETURN        */
         SLR   @15,@15                                             0202
         L     @08,EPAPARM(,EPAPTR)                                0202
         L     @08,WRTIOEQ(,@08)                                   0202
         CR    @08,@15                                             0202
         BE    @RF00202                                            0202
*         IF EPAIOEIP^=0 THEN       /* AND A SINGLE IOE TO RETURN  0203
*                                      ALSO                          */
         L     @05,EPAIOEIP(,EPAPTR)                               0203
         CR    @05,@15                                             0203
         BE    @RF00203                                            0203
*           EPAIOEIP->IOENXT=WRTIOEQ;/* CHAIN SINGLE IOE TO THE CHAIN
*                                      OF IOE'S                      */
         ST    @08,IOENXT(,@05)                                    0204
*         ELSE                      /* THERE IS A CHAIN OF IOE'S BUT
*                                      NO SINGLE                     */
*           EPAIOEIP=WRTIOEQ;       /* SET UP QUEUE FOR RETURN TO  0205
*                                      WRITE QUEUE                   */
         B     @RC00203                                            0205
@RF00203 L     @15,EPAPARM(,EPAPTR)                                0205
         MVC   EPAIOEIP(4,EPAPTR),WRTIOEQ(@15)                     0205
*       ELSE                                                       0206
*         ;                         /* THERE IS NO CHAIN OF IOE'S TO
*                                      RETURN                        */
@RF00202 DS    0H                                                  0207
*     END;                          /* END FOR IOE'S NOT ALREADY ON
*                                      ITS WRITE QUEUE               */
@RC00202 DS    0H                                                  0208
*   IF EPAIOEIP^=0 THEN             /* IS THERE AN IOE TO RETURN     */
@RF00195 ICM   @15,15,EPAIOEIP(EPAPTR)                             0208
         BZ    @RF00208                                            0208
*     DO;                           /* YES THERE IS AN IOE TO RETURN */
*       RFY                                                        0210
*         REG11 RSTD;                                              0210
*       REG11=ADDR(PARTLOCK);       /* SETLOCK REQUIRES REG11 TO   0211
*                                      POINT TO THE LOCKWORD         */
         L     REG11,ASMPART(,ASMVTPTR)                            0211
         LA    REG11,PARTLOCK(,REG11)                              0211
*       GEN REFS(PSALITA,FLC) SETS(REG11,REG12,REG13,REG14);       0212
GETCLASS SETLOCK OBTAIN,TYPE=ASM,ADDR=(11),MODE=UNCOND,                *
               RELATED=(WRITEQUE(ILRSRT01(SRTSETRP)))
*       REG13=ADDR(REGSVARE);       /* RELOAD SAVE AREA ADDRESS      */
*                                                                  0213
         LA    REG13,REGSVARE                                      0213
*       /*************************************************************/
*       /*                                                           */
*       /* MUST FIND LAST IOE ON THE CHAIN TO PUT BACK ON WRITE QUEUE*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0214
*       REG11=EPAIOEIP;                                            0214
         L     REG11,EPAIOEIP(,EPAPTR)                             0214
*       DO WHILE(REG11->IOENXT^=0);                                0215
         B     @DE00215                                            0215
@DL00215 DS    0H                                                  0216
*         REG11=REG11->IOENXT;                                     0216
         L     REG11,IOENXT(,REG11)                                0216
*       END;                        /* END OF DO WHILE               */
*                                                                  0217
@DE00215 SLR   @15,@15                                             0217
         C     @15,IOENXT(,REG11)                                  0217
         BNE   @DL00215                                            0217
*       /*************************************************************/
*       /*                                                           */
*       /* REG11 NOW POINTS TO THE LAST IOE ON THE CHAIN             */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0218
*       IF EPAWRTQ->WRTQSTRT^=0 THEN                               0218
         L     @08,EPAWRTQ(,EPAPTR)                                0218
         L     @08,WRTQSTRT(,@08)                                  0218
         CR    @08,@15                                             0218
         BE    @RF00218                                            0218
*         REG11->IOENXT=EPAWRTQ->WRTQSTRT;/* CHAIN LAST IN CHAIN TO
*                                      WRITE QUEUE                   */
         ST    @08,IOENXT(,REG11)                                  0219
*       ELSE                                                       0220
*         EPAWRTQ->WRTQEND=REG11;   /* UPDATE LAST ELEMENT ANCHOR    */
         B     @RC00218                                            0220
@RF00218 L     @15,EPAWRTQ(,EPAPTR)                                0220
         ST    REG11,WRTQEND(,@15)                                 0220
*       EPAWRTQ->WRTQSTRT=EPAIOEIP; /* UPDATE QUEUE HEAD             */
@RC00218 L     @15,EPAWRTQ(,EPAPTR)                                0221
         MVC   WRTQSTRT(4,@15),EPAIOEIP(EPAPTR)                    0221
*       RFY                                                        0222
*         REG11 UNRSTD;                                            0222
*     END;                          /* FOR YES THERE IS AN IOE TO  0223
*                                      RETURN                        */
*                                                                  0224
*   /*****************************************************************/
*   /*                                                               */
*   /* CURPCCW: NOW THE CURRENT PCCW CHECK--POINTED IN THE PARMLIST  */
*   /* IS VALIDITY CHECKED ALONG WITH THE AIA ANCHORED IN IT. IF THE */
*   /* PCCW IS VALID IT IS RETURNED TO ITS POOL. IF THE AIA IS VALID */
*   /* IT IS PUT ON THE PART AIA ERROR QUEUE                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0224
*   RFY                                                            0224
*    (REG0,                                                        0224
*     REG15) RSTD;                                                 0224
*                                                                  0224
@RF00208 DS    0H                                                  0225
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP TO VALIDITY CHECK THE PCCW                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0225
*   REG0=PCCWPTR;                                                  0225
         L     @11,EPAPARM(,EPAPTR)                                0225
         L     REG0,PCCWPTR(,@11)                                  0225
*   STM(REG2,REG7,REGSVARE);                                       0226
         STM   REG2,REG7,REGSVARE                                  0226
*   CALL ILRVPCCW;                                                 0227
         L     @15,@CV02119                                        0227
         BALR  @14,@15                                             0227
*   LM(REG2,REG7,REGSVARE);                                        0228
         LM    REG2,REG7,REGSVARE                                  0228
*   IF REG15=0 THEN                                                0229
         LTR   REG15,REG15                                         0229
         BNZ   @RF00229                                            0229
*     DO;                           /* THE PCCW IS GOOD              */
*       IF(SDWACMPC&CMPCMASK)=CONVRTER THEN/* CONVERT ERROR IN SRT   */
         MVC   @TS00001(3),SDWACMPC(REG1)                          0231
         NC    @TS00001(3),@CB02144                                0231
         CLC   @TS00001(3),@CB02139                                0231
         BNE   @RF00231                                            0231
*         DO;                       /* CONVERT ERROR                 */
*           RFY                                                    0233
*            (REG0,                                                0233
*             REG15) UNRSTD;                                       0233
*                                                                  0233
*/* ******************************************************************
*                                                                    */
*/*  THIS CODE IS DELETED BY APAR OZ28762                            */
*/*      IF SDWAURAL+LENGTH(AIA)+LENGTH(IDAEDB)<=SDWAVRAL THEN       */
*/*      DO; *ROOM IN RECORDING AREA, SO COPY AIA AND EDB*           */
*/*                                                          @ZA28762*/
*/* ******************************************************************
*                                                                    */
*                                                                  0234
*           /*********************************************************/
*           /*                                                       */
*           /* THE AIA AND THE LAST 16 BYTES OF THE FIRST EDB ARE    */
*           /* COPIED INTO THE SDWA. THERE IS NOT ENOUGH SPACE IN THE*/
*           /* VARIABLE RECORDING AREA TO COPY ANY MORE INFORMATION  */
*           /*                                               @ZA28762*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0234
*           EVAL(ADDR(SDWAVRA)+SDWAURAL)->AIA=PCCWAIA->AIA;/* COPY 0234
*                                      AREA INTO VARIABLE RECORDING
*                                      AREA                  @ZA28762*/
         LA    @15,SDWAVRA(,REG1)                                  0234
         SLR   @11,@11                                             0234
         IC    @11,SDWAURAL(,REG1)                                 0234
         ALR   @15,@11                                             0234
         L     @08,EPAPARM(,EPAPTR)                                0234
         L     @05,PCCWPTR(,@08)                                   0234
         L     @05,PCCWAIA(,@05)                                   0234
         MVC   AIA(28,@15),AIA(@05)                                0234
*           SDWAVRA(EVAL(SDWAURAL+LENGTH(AIA)+1):LENGTH(SDWAVRA))=(
*               PAREEDBP+LENGTH(IDAEDBHD))->IDAEDB((LENGTH(IDAEDB)+1)-
*               16:LENGTH(IDAEDB));                                0235
*                                                                  0235
         LA    @15,29                                              0235
         LR    @05,@11                                             0235
         ALR   @05,@15                                             0235
         ALR   @05,REG1                                            0235
         ALR   @11,@15                                             0235
         LCR   @11,@11                                             0235
         AH    @11,@CH02039                                        0235
         L     @15,PAREPTR(,@08)                                   0235
         L     @15,PAREEDBP(,@15)                                  0235
         EX    @11,@SM02244                                        0235
*           /*********************************************************/
*           /*                                                       */
*           /* COPY LAST FOUR WORDS OF THE FIRST EDB INTO VARIABLE   */
*           /* RECORDING AREA                                @ZA28762*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0236
*           SDWAURAL=LENGTH(SDWAVRA);/* UPDATE COUNT FOR SPACE USED
*                                                            @ZA28762*/
         MVI   SDWAURAL(REG1),X'6C'                                0236
*/* ******************************************************************
*                                                                    */
*/*  THIS CODE IS DELETED BY APAR OZ28762                            */
*/*      END; *END FOR ROOM TO COPY AIA AND EDB*                     */
*/*      ELSE; *NO ROOM TO COPY*                                     */
*/*                                                          @ZA28762*/
*/* ******************************************************************
*                                                                    */
*                                                                  0237
*         END;                      /* END FOR CONVERT ERROR         */
*/* ******************************************************************
*                                                                    */
*/*  THIS CODE IS DELETED BY APAR OZ28762                            */
*/*       ELSE DO; *NOT A CONVERT ERROR*                             */
*/*                                                          @ZA28762*/
*/* ******************************************************************
*                                                                    */
*                                                                  0238
*       /*************************************************************/
*       /*                                                           */
*       /* SET UP TO VALIDITY CHECK THE AIA FROM THE PCCW            */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0238
*       RFY                                                        0238
*        (REG0,                                                    0238
*         REG15) RSTD;                                             0238
@RF00231 DS    0H                                                  0239
*       REG0=PCCWAIA;                                              0239
         L     @11,EPAPARM(,EPAPTR)                                0239
         L     @11,PCCWPTR(,@11)                                   0239
         L     REG0,PCCWAIA(,@11)                                  0239
*       STM(REG2,REG7,REGSVARE);                                   0240
         STM   REG2,REG7,REGSVARE                                  0240
*       CALL ILRVAIA;                                              0241
         L     @15,@CV02115                                        0241
         BALR  @14,@15                                             0241
*       LM(REG2,REG7,REGSVARE);                                    0242
         LM    REG2,REG7,REGSVARE                                  0242
*       IF REG15^=0 THEN            /* THE AIA IS BAD                */
         LTR   REG15,REG15                                         0243
         BNZ   @RT00243                                            0243
*         GOTO ZPCCWAIA;                                           0244
*                                                                  0244
*/* ******************************************************************
*                                                                    */
*/*  THIS CODE IS DELETED BY APAR OZ28762                            */
*/*      END; *FOR NOT A CONVERT ERROR*                              */
*/*                                                          @ZA28762*/
*/* ******************************************************************
*                                                                    */
*                                                                  0245
*       /*************************************************************/
*       /*                                                           */
*       /* THE AIA IS VALID AT THIS POINT AND WILL NOW BE FLAGGED AND*/
*       /* PUT ON THE PART AIA ERROR QUEUE                           */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0245
*       RFY                                                        0245
*        (REG0,                                                    0245
*         REG15) UNRSTD;                                           0245
*       IF PCCWAIA->AIADUPLX=BITON& /* AIA IS FOR DUPLEX             */
*           PAREDPLX=BITON THEN     /* AND THIS IS A DUPLEX PARTE    */
         L     @15,EPAPARM(,EPAPTR)                                0246
         L     @11,PCCWPTR(,@15)                                   0246
         L     @11,PCCWAIA(,@11)                                   0246
         TM    AIADUPLX(@11),B'00010000'                           0246
         BNO   @RF00246                                            0246
         L     @15,PAREPTR(,@15)                                   0246
         TM    PAREDPLX(@15),B'00100000'                           0246
         BNO   @RF00246                                            0246
*         PCCWAIA->AIASECER=BITON;                                 0247
         OI    AIASECER(@11),B'00000100'                           0247
*       ELSE                                                       0248
*         PCCWAIA->AIAPRIER=BITON;                                 0248
*                                                                  0248
         B     @RC00246                                            0248
@RF00246 L     @15,EPAPARM(,EPAPTR)                                0248
         L     @15,PCCWPTR(,@15)                                   0248
         L     @15,PCCWAIA(,@15)                                   0248
         OI    AIAPRIER(@15),B'00001000'                           0248
*       /*************************************************************/
*       /*                                                           */
*       /* SET UP THEN COMPARE AND SWAP THE AIA ONTO THE AIA ERROR   */
*       /* QUEUE                                                     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0249
*       RFY                                                        0249
*        (REG11,                                                   0249
*         REG12) RSTD;                                             0249
@RC00246 DS    0H                                                  0250
*       REG12=PCCWAIA;                                             0250
         L     @15,EPAPARM(,EPAPTR)                                0250
         L     @15,PCCWPTR(,@15)                                   0250
         L     REG12,PCCWAIA(,@15)                                 0250
*       REG11=PARTAIAE;                                            0251
         L     @15,ASMPART(,ASMVTPTR)                              0251
         L     REG11,PARTAIAE(,@15)                                0251
*CSLOOP3:                                                          0252
*       REG12->AIANXAIA=REG11;      /* CHAIN NEW AIA TO ERROR QUEUE
*                                                            @ZM43067*/
CSLOOP3  ST    REG11,AIANXAIA(,REG12)                              0252
*       CS(REG11,REG12,PARTAIAE);                                  0253
         L     @15,ASMPART(,ASMVTPTR)                              0253
         CS    REG11,@12,PARTAIAE(@15)                             0253
*       BC(7,CSLOOP3);                                             0254
         BC    7,CSLOOP3                                           0254
*ZPCCWAIA:                                                         0255
*       ;                                                          0255
ZPCCWAIA DS    0H                                                  0256
*       PCCWAIA=0;                  /* FINISHED WITH THE AIA IN THE
*                                      PCCW                          */
         L     @15,EPAPARM(,EPAPTR)                                0256
         L     @15,PCCWPTR(,@15)                                   0256
         SLR   @08,@08                                             0256
         ST    @08,PCCWAIA(,@15)                                   0256
*     END;                          /* END FOR THE PCCW IS GOOD      */
*   ELSE                            /* THE PCCW IS BAD               */
*     BADPCCW=BITON;                /* DON'T LET IT GET PUT BACK INTO
*                                      ITS POOL                      */
         B     @RC00229                                            0258
@RF00229 OI    BADPCCW,B'10000000'                                 0258
*                                                                  0259
*   /*****************************************************************/
*   /*                                                               */
*   /* THE IOE'S ON THE INTERNAL FREE QUEUE BUILT BY ILRSRT ARE      */
*   /* VALIDITY CHECKED AND PUT BACK IN ITS POOL                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0259
*   RFY                                                            0259
*    (REG0,                                                        0259
*     REG8,                                                        0259
*     REG5,                                                        0259
*     REG7,                                                        0259
*     REG6) RSTD;                                                  0259
@RC00229 DS    0H                                                  0260
*   REG0=ADDR(EPAFFIOE);                                           0260
         LA    REG0,EPAFFIOE(,EPAPTR)                              0260
*   REG8=ADDR(VCKWORK);                                            0261
         LA    REG8,VCKWORK                                        0261
*   CALL ILRVIOEQ;                                                 0262
         L     @15,@CV02116                                        0262
         BALR  @14,@15                                             0262
*   IF EPAFFIOE^=0 THEN                                            0263
         L     @15,EPAFFIOE(,EPAPTR)                               0263
         LTR   @15,@15                                             0263
         BZ    @RF00263                                            0263
*     DO;                           /* THERE ARE VALID IOE'S LEFT    */
*       RFY                                                        0265
*        (REG0,                                                    0265
*         REG5,                                                    0265
*         REG6,                                                    0265
*         REG7) UNRSTD;                                            0265
*       RFY                                                        0266
*        (REG14,                                                   0266
*         REG11,                                                   0266
*         REG12) RSTD;                                             0266
*       RFY                                                        0267
*         ASMPOOLS BASED(REG8);                                    0267
*       REG8=ADDR(ASMIOEPC);                                       0268
         LA    REG8,ASMIOEPC(,ASMVTPTR)                            0268
*       REG12=EPAFFIOE;                                            0269
         LR    REG12,@15                                           0269
*       REG14=REG12;                                               0270
         LR    REG14,REG12                                         0270
*       DO WHILE(REG14->IOENXT^=0); /* FIND LAST IOE ON CHAIN        */
         B     @DE00271                                            0271
@DL00271 DS    0H                                                  0272
*         REG14=REG14->IOENXT;                                     0272
         L     REG14,IOENXT(,REG14)                                0272
*       END;                        /* END OF DO WHILE               */
@DE00271 ICM   @15,15,IOENXT(REG14)                                0273
         BNZ   @DL00271                                            0273
*       REG11=ASMCPAVL;             /* GET 1ST IOE IN THE POOL       */
         L     REG11,ASMCPAVL(,REG8)                               0274
*CSLOOP5:                                                          0275
*       REG14->IOENXT=REG11;        /* CHAIN LAST TO CURRENT 1ST IN
*                                      THE POOL                      */
CSLOOP5  ST    REG11,IOENXT(,REG14)                                0275
*       CS(REG11,REG12,ASMCPAVL);                                  0276
         CS    REG11,@12,ASMCPAVL(REG8)                            0276
*       BC(7,CSLOOP5);                                             0277
         BC    7,CSLOOP5                                           0277
*     END;                          /* END FOR VALID IOE'S           */
*   RFY                                                            0279
*    (REG8,                                                        0279
*     REG11,                                                       0279
*     REG12,                                                       0279
*     REG14) UNRSTD;                                               0279
@RF00263 DS    0H                                                  0280
*                                                                  0280
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCIORB ** VALIDITY CHECK THE IORB IF CHECK-POINTED THEN     */
*   /* INSURE THAT AT LEAST ONE VALID IORB IS ON THE PARTE           */
*   /* CHECK-POINTED IN THE PARMLIST                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0280
*   IF IORBPTR^=0 THEN                                             0280
         L     @12,EPAPARM(,EPAPTR)                                0280
         L     @12,IORBPTR(,@12)                                   0280
         LTR   @12,@12                                             0280
         BZ    @RF00280                                            0280
*     DO;                           /* THE IORB IS CHECK-POINTED, GET
*                                      IT VALIDITY CHECKED AND     0281
*                                      REFRESHED                     */
*       RFY                                                        0282
*        (REG0,                                                    0282
*         REG15) RSTD;                                             0282
*       STM(REG2,REG7,REGSVARE);                                   0283
         STM   REG2,REG7,REGSVARE                                  0283
*       REG0=IORBPTR;                                              0284
         LR    REG0,@12                                            0284
*       CALL ILRVIORB;                                             0285
         L     @15,@CV02120                                        0285
         BALR  @14,@15                                             0285
*       LM(REG2,REG7,REGSVARE);                                    0286
         LM    REG2,REG7,REGSVARE                                  0286
*       IF REG15^=0 THEN                                           0287
         SLR   @14,@14                                             0287
         CR    REG15,@14                                           0287
         BE    @RF00287                                            0287
*         DO;                       /* INVALID IORB CONTROL BLOCKS   */
*           IORBPTRS=IORBPTR;       /* SAVE IORBPTR FOR LOOP         */
         L     @12,EPAPARM(,EPAPTR)                                0289
         L     IORBPTRS,IORBPTR(,@12)                              0289
*           IORBPTR=0;              /* GET RID OF IORB ADDR SO IT  0290
*                                      WILL NOT BE USED AGAIN        */
*                                                                  0290
         ST    @14,IORBPTR(,@12)                                   0290
*           /*********************************************************/
*           /*                                                       */
*           /* REMOVE THE IORB FORM THE CHAIN ON THE PARTE           */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0291
*           RFY                                                    0291
*             REG11 RSTD;                                          0291
*           REG11=PAREIORB;                                        0292
         L     @12,PAREPTR(,@12)                                   0292
         L     REG11,PAREIORB(,@12)                                0292
*           IF REG11=0×REG11=IORBPTRS THEN                         0293
         CR    REG11,@14                                           0293
         BE    @RT00293                                            0293
         CR    REG11,IORBPTRS                                      0293
         BNE   @RF00293                                            0293
@RT00293 DS    0H                                                  0294
*             DO;                   /* NEED A NEW IORB               */
*               PAREIORB=0;                                        0295
         L     @14,EPAPARM(,EPAPTR)                                0295
         L     @14,PAREPTR(,@14)                                   0295
         SLR   @12,@12                                             0295
         ST    @12,PAREIORB(,@14)                                  0295
*               CALL NEWIORB;                                      0296
         BAL   @14,NEWIORB                                         0296
*               GOTO CKIORBOK;      /* SEE IF IORB WAS GOTTEN        */
         B     CKIORBOK                                            0297
*             END;                  /* END FOR NEED A NEW IORB       */
*           ELSE                    /* THERE IS AN IORB ON THE PARTE
*                                      BUT THE 1ST ONE IS NOT THE BAD
*                                      ONE                           */
*             DO;                   /* FIND BAD IORB AND ZERO POINTER
*                                      TO IT                         */
@RF00293 DS    0H                                                  0300
*               DO WHILE(REG11->IORIORB^=0&REG11->IORIORB^=IORBPTRS);
         B     @DE00300                                            0300
@DL00300 DS    0H                                                  0301
*                 REG11=REG11->IORIORB;                            0301
         L     REG11,IORIORB(,REG11)                               0301
*               END;                /* END DO WHILE                  */
@DE00300 L     @14,IORIORB(,REG11)                                 0302
         LTR   @14,@14                                             0302
         BZ    @DC00300                                            0302
         CR    @14,IORBPTRS                                        0302
         BNE   @DL00300                                            0302
@DC00300 DS    0H                                                  0303
*               REG11->IORIORB=0;   /* MAKE SURE PTR TO BAD IORB IS
*                                      ZERO                          */
         SLR   @14,@14                                             0303
         ST    @14,IORIORB(,REG11)                                 0303
*               GOTO ULKPARTE;      /* GO UNLOCK PARTE IF REQUIRED   */
         B     ULKPARTE                                            0304
*               RFY                                                0305
*                (REG0,                                            0305
*                 REG11,                                           0305
*                 REG15) UNRSTD;                                   0305
*             END;                  /* END OF FIND BAD IORB          */
*         END;                      /* FOR INVALID IORB CONTROL    0307
*                                      BLOCKS                        */
*       ELSE                                                       0308
*         ;                         /* THE IORB WAS VALID            */
@RF00287 DS    0H                                                  0309
*     END;                          /* FOR IORB IS CHECK-POINTED     */
*   ELSE                            /* THERE IS NO IORB CHECK-POINTED*/
*     IF(SDWACMPC&CMPCMASK)=ERRIORB THEN/* ABEND FOR IORB ERROR FROM
*                                      ILRPTM                        */
         B     @RC00280                                            0310
@RF00280 MVC   @TS00001(3),SDWACMPC(REG1)                          0310
         NC    @TS00001(3),@CB02144                                0310
         CLC   @TS00001(3),@CB02141                                0310
         BNE   @RF00310                                            0310
*       DO;                         /* GET NEW IORB                  */
*         CALL NEWIORB;                                            0312
         BAL   @14,NEWIORB                                         0312
*         GOTO CKIORBOK;                                           0313
         B     CKIORBOK                                            0313
*       END;                        /* FOR GET NEW IORB              */
*     ELSE                          /* NO ERROR HAPPENED             */
*       GOTO ULKPARTE;              /* UNLOCK PARTE IF LOCKED        */
*   IF SDWAPARM->ATASRT=BITOFF THEN                                0316
@RC00280 L     @12,SDWAPARM(,REG1)                                 0316
         TM    ATASRT(@12),B'00010000'                             0316
         BZ    @RT00316                                            0316
*     GOTO CKIORBOK;                /* IF SLOT/SORT WAS NOT        0317
*                                      PROCESSING THERE IS NO CHAIN
*                                      OF PCCW'S TO PROCESS FOR I/O  */
*                                                                  0318
*   /*****************************************************************/
*   /*                                                               */
*   /* CHANPCCW: ** SLOT/SORT WAS IN CONTROL, SEE IF THERE ARE PCCW'S*/
*   /* CHAINED TO THE IORB READY FOR I/O. IF THERE ARE, THE PCCW     */
*   /* ADDRESSED BY PCCWPTR IS REMOVED FROM THE CHAIN AND THE        */
*   /* REMAINING PCCW'S ARE SENT TO IOS                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0318
*   RFY                                                            0318
*    (REG0,                                                        0318
*     REG8,                                                        0318
*     REG5,                                                        0318
*     REG6,                                                        0318
*     REG7) RSTD;                                                  0318
*                                                                  0318
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP AND GO VALIDITY CHECK THE CHAIN OF PCCW'S ON THE IORB  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0319
*   REG0=ADDR(IORPCCW);                                            0319
         L     @12,EPAPARM(,EPAPTR)                                0319
         L     @12,IORBPTR(,@12)                                   0319
         LA    REG0,IORPCCW(,@12)                                  0319
*   REG8=ADDR(VCKWORK);                                            0320
         LA    REG8,VCKWORK                                        0320
*   CALL ILRVPCWQ;                                                 0321
         L     @15,@CV02118                                        0321
         BALR  @14,@15                                             0321
*   RFY                                                            0322
*    (REG0,                                                        0322
*     REG8,                                                        0322
*     REG5,                                                        0322
*     REG6,                                                        0322
*     REG7) UNRSTD;                                                0322
*                                                                  0322
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THERE WERE VALID PCCW'S LEFT THEN IORPCCW POINTS TO THE    */
*   /* FIRST ONE, OTHERWISE IORPCCW IS ZERO                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0323
*   IF IORPCCW=0 THEN               /* THERE ARE NO VALID PCCW'S TO
*                                      PROCESS                       */
         SLR   @12,@12                                             0323
         L     @11,EPAPARM(,EPAPTR)                                0323
         L     @08,IORBPTR(,@11)                                   0323
         L     @05,IORPCCW(,@08)                                   0323
         CR    @05,@12                                             0323
         BE    @RT00323                                            0323
*     GOTO CKIORBOK;                /* CHECK IF IORB IS OK AND UNLOCK
*                                      THE PARTE             @ZA30141*/
*                                                                  0324
*   /*****************************************************************/
*   /*                                                               */
*   /* THERE ARE VALID PCCW'S LEFT TO SEND TO IOS, GO DOWN THE       */
*   /* IORPCCW CHAIN TO FIND THE LAST PCCW. IF IT IS = PCCWPTR THEN  */
*   /* REMOVE IT. ELSE LEAVE IT ON THE CHAIN. SAVE A COUNT OF THE    */
*   /* PCCW'S AND THE ADDRESS OF THE LAST ONE                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0325
*   IF IORPCCW=PCCWPTR THEN                                        0325
         C     @05,PCCWPTR(,@11)                                   0325
         BNE   @RF00325                                            0325
*     DO;                                                          0326
*       IORPCCW=0;                                                 0327
         ST    @12,IORPCCW(,@08)                                   0327
*       GOTO CKIORBOK;              /* CHECK IF IORB IS OK AND UNLOCK
*                                      THE PARTE             @ZA30141*/
         B     CKIORBOK                                            0328
*     END;                                                         0329
*   ELSE                                                           0330
*     DO;                           /* THERE IS MORE THAN ONE PCCW   */
@RF00325 DS    0H                                                  0331
*       LASTPCCW=IORPCCW;                                          0331
         L     @12,EPAPARM(,EPAPTR)                                0331
         L     @12,IORBPTR(,@12)                                   0331
         L     LASTPCCW,IORPCCW(,@12)                              0331
*       COUNT=1;                                                   0332
         LA    COUNT,1                                             0332
*       DO WHILE(LASTPCCW->PCCWPCCW^=0&LASTPCCW->PCCWPCCW^=PCCWPTR);
         B     @DE00333                                            0333
@DL00333 DS    0H                                                  0334
*         LASTPCCW=LASTPCCW->PCCWPCCW;                             0334
         L     LASTPCCW,PCCWPCCW(,LASTPCCW)                        0334
*         COUNT=COUNT+1;                                           0335
         AH    COUNT,@CH00045                                      0335
*       END;                        /* FOR DO WHILE                  */
@DE00333 L     @12,PCCWPCCW(,LASTPCCW)                             0336
         LTR   @12,@12                                             0336
         BZ    @DC00333                                            0336
         L     @11,EPAPARM(,EPAPTR)                                0336
         C     @12,PCCWPTR(,@11)                                   0336
         BNE   @DL00333                                            0336
@DC00333 DS    0H                                                  0337
*       LASTPCCW->PCCWPCCW=0;       /* MAKE SURE PCCWPTR IS NOT ON 0337
*                                      THE CHAIN                     */
         SLR   @12,@12                                             0337
         ST    @12,PCCWPCCW(,LASTPCCW)                             0337
*     END;                          /* FOR THERE IS MORE THAN ONE  0338
*                                      PCCW                          */
*                                                                  0339
*   /*****************************************************************/
*   /*                                                               */
*   /* AT THIS POINT THERE ARE VALID PCCW'S TO SEND TO IOS. FIX UP   */
*   /* THE LAST PCCW, UPDATE THE PAT MAP, AND ISSUE STARTIO          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0339
*   LASTPCCW->PCCWN='03'X;          /* MAKE LAST CCW A NOP           */
         MVI   PCCWN(LASTPCCW),X'03'                               0339
*   LASTPCCW->PCCWNFG(1)='20'X;     /* MAKE SURE NO CHAINING         */
*                                                                  0340
         MVI   PCCWNFG(LASTPCCW),X'20'                             0340
*   /*****************************************************************/
*   /*                                                               */
*   /* UPDATE PAT CYLINDER MAP ENTRY                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0341
*   RFY                                                            0341
*     PATCYLMP BASED(EPACYLA);                                     0341
*   RFY                                                            0342
*     PAT BASED(PAREPATP);                                         0342
*   RFY                                                            0343
*    (REG0,                                                        0343
*     REG14,                                                       0343
*     REG15) RSTD;                                                 0343
*   IF PATCYLMW=1 THEN                                             0344
         L     @12,EPAPARM(,EPAPTR)                                0344
         L     @12,PAREPTR(,@12)                                   0344
         L     @12,PAREPATP(,@12)                                  0344
         CLC   PATCYLMW(2,@12),@CH00045                            0344
         BNE   @RF00344                                            0344
*     DO;                           /* ONE WORD PER CYLINDER MAP   0345
*                                      ENTRY                         */
*       REG0=PATCYLMP(1:4);         /* GET CURRENT MAP WORD          */
         L     @12,EPACYLA(,EPAPTR)                                0346
         L     REG0,PATCYLMP(,@12)                                 0346
*SET1WCYL:                                                         0347
*       REG1=REG0×NEWMAP(1:4);      /* ADD IN NEW WRITES             */
SET1WCYL L     @12,EPAWTPAT(,EPAPTR)                               0347
         LR    REG1,REG0                                           0347
         O     REG1,NEWMAP(,@12)                                   0347
*       CS(REG0,REG1,PATCYLMP(1:4));                               0348
         L     @12,EPACYLA(,EPAPTR)                                0348
         CS    REG0,@01,PATCYLMP(@12)                              0348
*       BC(7,SET1WCYL);                                            0349
         BC    7,SET1WCYL                                          0349
*     END;                          /* FOR ONE WORD                  */
*   ELSE                                                           0351
*     DO;                           /* TWO WORDS PER CYLINDER        */
         B     @RC00344                                            0351
@RF00344 DS    0H                                                  0352
*       LM(REG0,REG1,PATCYLMP);     /* GET CURRENT MAP DWORD         */
         L     @12,EPACYLA(,EPAPTR)                                0352
         LM    REG0,REG1,PATCYLMP(@12)                             0352
*SET2WCYL:                                                         0353
*       REG14=REG0×NEWMAP(1:4);     /* ADD IN NEW WRITES             */
SET2WCYL L     @12,EPAWTPAT(,EPAPTR)                               0353
         LR    REG14,REG0                                          0353
         O     REG14,NEWMAP(,@12)                                  0353
*       REG15=REG1×NEWMAP(5:8);                                    0354
         LR    REG15,REG1                                          0354
         O     REG15,NEWMAP+4(,@12)                                0354
*       CDS(REG0,REG14,PATCYLMP);                                  0355
         L     @12,EPACYLA(,EPAPTR)                                0355
         CDS   REG0,REG14,PATCYLMP(@12)                            0355
*       BC(7,SET2WCYL);                                            0356
         BC    7,SET2WCYL                                          0356
*     END;                          /* FOR TWO WORDS                 */
*                                                                  0357
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP IORB AND IOSB FOR IOS                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0358
*   RFY                                                            0358
*     IOSB BASED(IORIOSB);                                         0358
@RC00344 DS    0H                                                  0359
*   IORAPND=''B;                    /* CLEAR APPENDAGE FLAGS         */
         L     @12,EPAPARM(,EPAPTR)                                0359
         L     @11,IORBPTR(,@12)                                   0359
         NI    IORAPND(@11),B'11111000'                            0359
*   IORRQSZ=COUNT;                  /* SET NUMBER OF PCCW            */
         STC   COUNT,IORRQSZ(,@11)                                 0360
*   IOSUCB=PAREUCBP;                /* GET ADDR UCB                  */
         L     @11,IORIOSB(,@11)                                   0361
         L     @12,PAREPTR(,@12)                                   0361
         MVC   IOSUCB(4,@11),PAREUCBP(@12)                         0361
*   IOSFLA='C0'X;                   /* COMMAND AND DATA CHAINING     */
         MVI   IOSFLA(@11),X'C0'                                   0362
*   IOSPROC=0;                      /* MUST BE ZEROED BY THE DRIVER  */
         MVI   IOSPROC(@11),X'00'                                  0363
*   IOSERP=0;                                                      0364
         SLR   @08,@08                                             0364
         ST    @08,IOSERP(,@11)                                    0364
*   IOSIPIB=0;                                                     0365
         ST    @08,IOSIPIB(,@11)                                   0365
*   RFY                                                            0366
*    (REG14,                                                       0366
*     REG15) UNRSTD;                                               0366
*                                                                  0366
*   /*****************************************************************/
*   /*                                                               */
*   /* UPDATE SLOTS AVAILABLE IN THE PARTE                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0367
*   REG0=PARESLTA;                  /* GET CURRENT # OF SLOTS        */
         L     REG0,PARESLTA(,@12)                                 0367
*DECRSLTA:                                                         0368
*   REG1=REG0-EPAWRTCT;             /* SUBTRACT WRITE FROM IT        */
DECRSLTA LR    REG1,REG0                                           0368
         SH    REG1,EPAWRTCT(,EPAPTR)                              0368
*   CS(REG0,REG1,PARESLTA);                                        0369
         L     @12,EPAPARM(,EPAPTR)                                0369
         L     @12,PAREPTR(,@12)                                   0369
         CS    REG0,@01,PARESLTA(@12)                              0369
*   BC(7,DECRSLTA);                                                0370
*                                                                  0370
         BC    7,DECRSLTA                                          0370
*   /*****************************************************************/
*   /*                                                               */
*   /* ADD ONE TO NUMBER OF CALLS TO IOS                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0371
*   REG0=ASMIOCNT;                                                 0371
         L     REG0,ASMIOCNT(,ASMVTPTR)                            0371
*INCRIOCT:                                                         0372
*   REG1=REG0+1;                                                   0372
INCRIOCT LA    REG1,1                                              0372
         ALR   REG1,REG0                                           0372
*   CS(REG0,REG1,ASMIOCNT);                                        0373
         CS    REG0,@01,ASMIOCNT(ASMVTPTR)                         0373
*   BC(7,INCRIOCT);                                                0374
         BC    7,INCRIOCT                                          0374
*   IORTSMP=''B;                    /* ZERO TIMESTAMP FIELD          */
         L     @12,EPAPARM(,EPAPTR)                                0375
         L     @12,IORBPTR(,@12)                                   0375
         XC    IORTSMP(8,@12),IORTSMP(@12)                         0375
*   RFY                                                            0376
*     REG11 RSTD;                                                  0376
*   REG11=ADDR(PARTLOCK);           /* SETLOCK REQUIRES ADDR OF LOCK
*                                      WORD IN REG 11                */
*                                                                  0377
         L     REG11,ASMPART(,ASMVTPTR)                            0377
         LA    REG11,PARTLOCK(,REG11)                              0377
*   /*****************************************************************/
*   /*                                                               */
*   /* RELEASE THE ASM CLASS LOCK BEFORE ISSUING STARTIO             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0378
*   GEN REFS(PSALITA,FLC) SETS(REG11,REG12,REG13,REG14);           0378
RELCLASS SETLOCK RELEASE,TYPE=ASM,ADDR=(11),                           *
               RELATED=(WRITEQUE(ILRSRT01(GETCLASS)))
*   REG13=ADDR(REGSVARE);           /* REG13 WAS DESTROYED BY SETLOCK*/
         LA    REG13,REGSVARE                                      0379
*   STM(REG2,REG12,REGSVARE);       /* SAVE REGS AROUND STARTIO MACRO*/
         STM   REG2,REG12,REGSVARE                                 0380
*   REG1=IOSSRB;                                                   0381
         L     @12,EPAPARM(,EPAPTR)                                0381
         L     @08,IORBPTR(,@12)                                   0381
         L     @08,IORIOSB(,@08)                                   0381
         L     REG1,IOSSRB(,@08)                                   0381
*   IORBPTR=0;                      /* DO NOT FREE THE IORB AFTER  0382
*                                      STARTIO                       */
         SLR   @08,@08                                             0382
         ST    @08,IORBPTR(,@12)                                   0382
*   GEN REFS(CVTPTR,CVTMAP,CVTIXAVL,IOCOM,IOCSTIO);                0383
         STARTIO SRB=(1)
*   LM(REG2,REG12,REGSVARE);                                       0384
         LM    REG2,REG12,REGSVARE                                 0384
*   RFY                                                            0385
*    (REG0,                                                        0385
*     REG11) UNRSTD;                                               0385
*CKIORBOK:                          /* IS THERE STILL AN IORB ON THE
*                                      PARTE                         */
*   IF PAREIORB^=0 THEN                                            0386
CKIORBOK SLR   @12,@12                                             0386
         L     @11,EPAPARM(,EPAPTR)                                0386
         L     @08,PAREPTR(,@11)                                   0386
         C     @12,PAREIORB(,@08)                                  0386
         BE    @RF00386                                            0386
*     DO;                           /* PARTE HAS AN IORB             */
*       IF IORBPTR^=0 THEN          /* FREE THE IORB                 */
         L     @11,IORBPTR(,@11)                                   0388
         CR    @11,@12                                             0388
         BE    @RF00388                                            0388
*         IORFUSE=BITOFF;                                          0389
         NI    IORFUSE(@11),B'01111111'                            0389
*       ELSE                                                       0390
*         ;                                                        0390
@RF00388 DS    0H                                                  0391
*ULKPARTE:                          /* DID CURRENT PART MONITOR LOCK
*                                      THE PARTE                     */
*       IF EPACPUID=PARECPCT THEN                                  0391
ULKPARTE L     @12,EPAPARM(,EPAPTR)                                0391
         L     @12,PAREPTR(,@12)                                   0391
         CLC   EPACPUID(2,EPAPTR),PARECPCT(@12)                    0391
         BNE   @RF00391                                            0391
*         DO;                       /* CURRENT PART MON. LOCKED THE
*                                      PARTE                         */
*           PARENODE=ABS(SPARENOD); /* PARENODE COULD BE NEGATIVE    */
         L     @11,SPARENOD(,@12)                                  0393
         LPR   @11,@11                                             0393
         ST    @11,PARENODE(,@12)                                  0393
*           RFY                                                    0394
*            (REG0) RSTD;                                          0394
*           REG1=PARELKUP;                                         0395
         L     REG1,PARELKUP(,@12)                                 0395
*UNLK:                                                             0396
*           REG0=REG1&&PAREFSPC;    /* SET PAREFSIP = 0              */
UNLK     LR    REG0,REG1                                           0396
         X     REG0,@CF01278                                       0396
*           CS(REG1,REG0,PARELKUP);                                0397
         L     @12,EPAPARM(,EPAPTR)                                0397
         L     @12,PAREPTR(,@12)                                   0397
         CS    REG1,@00,PARELKUP(@12)                              0397
*           BC(7,UNLK);                                            0398
         BC    7,UNLK                                              0398
*         END;                      /* FOR CURRENT PART MON          */
*     END;                          /* FOR PARTE HAS AN IORB         */
@RF00391 DS    0H                                                  0401
*RESCHED:                                                          0401
*                                                                  0401
*   /*****************************************************************/
*   /*                                                               */
*   /* RESCHEDULE PART MONITOR                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0401
*   REG0=0;                         /* IF NOT RUNNING COUNT IS ZERO  */
@RF00386 DS    0H                                                  0401
RESCHED  SLR   REG0,REG0                                           0401
*   REG1=1;                                                        0402
         LA    REG1,1                                              0402
*   CS(REG0,REG1,ASMSRBCT);         /* SET COUNT = 1                 */
         CS    REG0,@01,ASMSRBCT(ASMVTPTR)                         0403
*   BC(7,PTMRUNNG);                 /* IF FAILURE IT'S ALREADY     0404
*                                      RUNNING                       */
         BC    7,PTMRUNNG                                          0404
*   REG1=ASMPSRB;                   /* GET ADDR OF SRB FOR PTM       */
         L     REG1,ASMPSRB(,ASMVTPTR)                             0405
*   GEN REFS(CVTGSMQ,SRBFLNK,SRBSECT);                             0406
         SCHEDULE SRB=(1),SCOPE=GLOBAL
*PTMRUNNG:                                                         0407
*   IF EPAPTR^=0 THEN               /* COULD COME HERE WITHOUT AN  0407
*                                      EPATH                         */
PTMRUNNG SLR   @12,@12                                             0407
         CR    EPAPTR,@12                                          0407
         BE    @RF00407                                            0407
*     DO;                                                          0408
*       IF EPAMSPAD^=0 THEN                                        0409
         L     @11,EPAMSPAD(,EPAPTR)                               0409
         CR    @11,@12                                             0409
         BE    @RF00409                                            0409
*         DO;                       /* PTM FAILED BEFORE WRITING   0410
*                                      DSFULL MSG                    */
*                                                                  0410
*           /*********************************************************/
*           /*                                                       */
*           /* SET BITS FOR DSFULL CONDITION                         */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0411
*           IF MSGNUM=5 THEN        /* MSG ILR005I REQUESTED         */
         CLC   MSGNUM(2,@11),@CH00976                              0411
         BNE   @RF00411                                            0411
*             ASMPLPAF=BITON;       /* PLPA FILLED                   */
         OI    ASMPLPAF(ASMVTPTR),B'00000100'                      0412
*           ELSE                                                   0413
*             IF MSGNUM=6 THEN      /* MSG ILR006I REQUESTED         */
         B     @RC00411                                            0413
@RF00411 L     @12,EPAMSPAD(,EPAPTR)                               0413
         CLC   MSGNUM(2,@12),@CH01120                              0413
         BNE   @RF00413                                            0413
*               ASMCOMMF=BITON;     /* COMMON FILLED                 */
         OI    ASMCOMMF(ASMVTPTR),B'00000010'                      0414
*             ELSE                                                 0415
*               IF MSGNUM=7 THEN    /* MSG ILR007I REQUESTED         */
         B     @RC00413                                            0415
@RF00413 L     @12,EPAMSPAD(,EPAPTR)                               0415
         CLC   MSGNUM(2,@12),@CH01125                              0415
         BNE   @RF00415                                            0415
*                 DO;                                              0416
*                   ASMDUPLX=BITOFF;/* DUPLEX IS SUSPENDED           */
*                   ASMNODPX=BITON;                                0418
         OI    ASMNODPX(ASMVTPTR),B'00001000'                      0418
         NI    ASMDUPLX(ASMVTPTR),B'01111111'                      0418
*                 END;                                             0419
*               ELSE                                               0420
*                 IF MSGNUM=10 THEN /* WAS MSG ILR010I REQUESTED     */
         B     @RC00415                                            0420
@RF00415 L     @12,EPAMSPAD(,EPAPTR)                               0420
         CLC   MSGNUM(2,@12),@CH02213                              0420
         BNE   @RF00420                                            0420
*                   DO;             /* YES, WAS IT PLPA OR COMMON  0421
*                                      THAT FILLED                   */
*                     IF MSGCBADR->PAREPLPA=BITON THEN/* IT WAS PLPA */
         L     @12,MSGCBADR(,@12)                                  0422
         TM    PAREPLPA(@12),B'10000000'                           0422
         BNO   @RF00422                                            0422
*                       ASMPLPAF=BITON;/* SET PLPA FULL BIT ON       */
         OI    ASMPLPAF(ASMVTPTR),B'00000100'                      0423
*                     ELSE          /* IT HAD TO BE COMMON           */
*                       ASMCOMMF=BITON;/* SET COMMON FULL BIT ON     */
         B     @RC00422                                            0424
@RF00422 OI    ASMCOMMF(ASMVTPTR),B'00000010'                      0424
*                   END;            /* FOR WAS IT PLPA OR COMMON     */
@RC00422 DS    0H                                                  0426
*           REG1=EPAMSPAD;                                         0426
@RF00420 DS    0H                                                  0426
@RC00415 DS    0H                                                  0426
@RC00413 DS    0H                                                  0426
@RC00411 L     REG1,EPAMSPAD(,EPAPTR)                              0426
*           CALL ILRMSG00;          /* ISSUE MSG THAT PTM WANTED TO
*                                      ISSUE                         */
         L     @15,ASMPMSG0(,ASMVTPTR)                             0427
         BALR  @14,@15                                             0427
*         END;                      /* FOR PTM FAILED                */
*       ELSE                                                       0429
*         ;                         /* PTM DID NOT FAIL IN DSFULL  0429
*                                      ROUTINE                       */
@RF00409 DS    0H                                                  0430
*       IF PCCWPTR^=0&BADPCCW=BITOFF THEN                          0430
         L     @12,EPAPARM(,EPAPTR)                                0430
         L     @12,PCCWPTR(,@12)                                   0430
         LTR   @12,@12                                             0430
         BZ    @RF00430                                            0430
         TM    BADPCCW,B'10000000'                                 0430
         BNZ   @RF00430                                            0430
*         DO;                       /* THERE IS A PCCW TO RETURN     */
*           RFY                                                    0432
*            (REG11,                                               0432
*             REG12) RSTD;                                         0432
*           REG12=PCCWPTR;                                         0433
         L     @08,EPAPARM(,EPAPTR)                                0433
         L     @08,PCCWPTR(,@08)                                   0433
         LR    REG12,@08                                           0433
*           REG11=ASMPCCWA;                                        0434
         L     REG11,ASMPCCWA(,ASMVTPTR)                           0434
*CSLOOP4:                                                          0435
*           REG12->PCCWPCCW=REG11;                                 0435
CSLOOP4  ST    REG11,PCCWPCCW(,REG12)                              0435
*           CS(REG11,REG12,ASMPCCWA);                              0436
         CS    REG11,@12,ASMPCCWA(ASMVTPTR)                        0436
*           BC(7,CSLOOP4);                                         0437
         BC    7,CSLOOP4                                           0437
*           RFY                                                    0438
*            (REG11,                                               0438
*             REG12) UNRSTD;                                       0438
*         END;                      /* FOR THERE IS A PCCW TO RETURN */
*     END;                          /* THERE IS AN EPATH             */
@RF00430 DS    0H                                                  0441
*   RFY                                                            0441
*     REG14 RSTD;                                                  0441
@RF00407 DS    0H                                                  0442
*   REG14=SAVE14;                                                  0442
         L     REG14,SAVE14                                        0442
*   RETURN;                                                        0443
@EL00001 DS    0H                                                  0443
@EF00001 DS    0H                                                  0443
@ER00001 BR    @14                                                 0443
*NEWIORB:                                                          0444
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0444
*                                                                  0444
NEWIORB  DS    0H                                                  0445
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE ISSUES A GETMAIN FOR THE IORB,IOSB,SRB CONTROL   */
*   /* BLOCK COMBINATION. IF SUCCESSFUL THEY ARE CONSTRUCTED AND THE */
*   /* IORB IS ANCHORED IN THE PARTE. IF THE GETMAIN IS NOT          */
*   /* SUCCESSFUL THE PARENUSE BIT IS TURNED ON AND MESSAGE ILR009I  */
*   /* IS ISSUED                                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0445
*   SAVERTN=REG14;                                                 0445
         LR    SAVERTN,REG14                                       0445
*   RFY                                                            0446
*     REG14 UNRSTD;                                                0446
*   RFY                                                            0447
*     REG11 RSTD;                                                  0447
*   REG11=ADDR(PARTLOCK);                                          0448
*                                                                  0448
         L     REG11,ASMPART(,ASMVTPTR)                            0448
         LA    REG11,PARTLOCK(,REG11)                              0448
*   /*****************************************************************/
*   /*                                                               */
*   /* RELEASE THE ASM CLASS LOCK IF WE HAVE IT AND GET INTO DISABLED*/
*   /* MODE FOR FRR SERIALIZATION UNTIL WE GET THE SALLOC LOCK       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0449
*   GEN;                                                           0449
         SETLOCK RELEASE,TYPE=ASM,ADDR=(11),DISABLED,                  *
               RELATED=(WRTQUEUE(ILRSRT01(GETCLASS)))
         SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,                       *
               RELATED=(CSA(ILRSRT01(SRTRETP)))
*   REG13=ADDR(REGSVARE);                                          0450
         LA    REG13,REGSVARE                                      0450
*   STM(REG2,REG7,REGSVARE);                                       0451
         STM   REG2,REG7,REGSVARE                                  0451
*   RFY                                                            0452
*    (REG0,                                                        0452
*     REG4,                                                        0452
*     REG7,                                                        0452
*     REG15) RSTD;                                                 0452
*   REG0=LENGTH(BLOCKS);                                           0453
         LA    REG0,272                                            0453
*   GEN SETS(REG0,REG1) REFS(CVTSPSA,WSAG,WSAGGMFM,CVTGLMN);       0454
         GETMAIN BRANCH=(YES,GLOBAL),RC,LV=(0),SP=245
*   RFY                                                            0455
*     REG11 UNRSTD;                                                0455
*   LM(REG2,REG7,REGSVARE);                                        0456
         LM    REG2,REG7,REGSVARE                                  0456
*   IF REG15^=0 THEN                                               0457
         SLR   @14,@14                                             0457
         CR    REG15,@14                                           0457
         BE    @RF00457                                            0457
*     DO;                           /* THE STORAGE WAS NOT OBTAINED  */
*       PARENUSE=BITON;             /* LET MAIN LINE KNOW THAT PARTE
*                                      SHOULD NOT BE USED            */
*                                                                  0459
         L     @12,EPAPARM(,EPAPTR)                                0459
         L     @12,PAREPTR(,@12)                                   0459
         OI    PARENUSE(@12),B'10000000'                           0459
*       /*************************************************************/
*       /*                                                           */
*       /* SET UP PARM LIST FOR ILRMSG00                             */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0460
*       MSGNO=0;                    /* MSG ILR009I REQUESTED         */
         STH   @14,MSGNO                                           0460
*       MSGPAGE=0;                                                 0461
         STH   @14,MSGPAGE                                         0461
*       MSGPARTE=PAREPTR;           /* MOVE IN PTR TO THE PARTE      */
         ST    @12,MSGPARTE                                        0462
*       REG1=ADDR(MSGLIST);                                        0463
         LA    REG1,MSGLIST                                        0463
*       CALL ILRMSG00;              /* GO ISSUE THE MESSAGE          */
         L     @15,ASMPMSG0(,ASMVTPTR)                             0464
         BALR  @14,@15                                             0464
*       IF PARELOCL=BITON THEN                                     0465
         L     @14,EPAPARM(,EPAPTR)                                0465
         L     @14,PAREPTR(,@14)                                   0465
         TM    PARELOCL(@14),B'00010000'                           0465
         BNO   @RF00465                                            0465
*         DO;                       /* LOCAL PARTE SO SUBTRACT ITS 0466
*                                      SLOTS FROM TOTAL AVAILABLE    */
*           RFY                                                    0467
*            (REG11,                                               0467
*             REG12,                                               0467
*             REG6,                                                0467
*             REG7,                                                0467
*             REG14) RSTD;                                         0467
*           REG11=ASMSLOTS;                                        0468
         L     REG11,ASMSLOTS(,ASMVTPTR)                           0468
*CSLOOP6:                                                          0469
*           REG12=REG11-PARESZSL;                                  0469
CSLOOP6  L     @05,EPAPARM(,EPAPTR)                                0469
         L     @05,PAREPTR(,@05)                                   0469
         LR    REG12,REG11                                         0469
         SL    REG12,PARESZSL(,@05)                                0469
*           CS(REG11,REG12,ASMSLOTS);                              0470
         CS    REG11,@12,ASMSLOTS(ASMVTPTR)                        0470
*           BC(7,CSLOOP6);                                         0471
         BC    7,CSLOOP6                                           0471
*         END;                      /* LOCAL PARTE                   */
*     END;                          /* STORAGE NOT OBTAINED          */
*   ELSE                            /* STORAGE WAS OBTAINED          */
*     DO;                           /* BUILD THE CONTROL BLOCKS      */
         B     @RC00457                                            0474
@RF00457 DS    0H                                                  0475
*       RFY                                                        0475
*         BLOCKS BASED(REG1);                                      0475
*       REG6=REG1;                  /* GET THE STORAGE ADDR          */
         LR    REG6,REG1                                           0476
*       REG7=LENGTH(BLOCKS);        /* SET LENGTH FOR MVCL         0477
*                                      INSTRUCTION                   */
         LA    REG7,272                                            0477
*       MVCL(REG6,REG14);           /* CLEAR THE STORAGE. REG15 IS 0478
*                                      ZERO FROM THE GETMAIN AND   0478
*                                      REG14 DOES NOT MATTER FOR THIS
*                                      TYPE OF MVCL                  */
         MVCL  REG6,REG14                                          0478
*       RFY                                                        0479
*        (REG6,                                                    0479
*         REG7,                                                    0479
*         REG11,                                                   0479
*         REG12,                                                   0479
*         REG15) UNRSTD;                                           0479
*       RFY                                                        0480
*         IORB BASED(ADDR(NIORB));                                 0480
*       RFY                                                        0481
*         IOSB BASED(ADDR(NIOSB));                                 0481
*       RFY                                                        0482
*         SRBSECT BASED(ADDR(NSRB));                               0482
*                                                                  0482
*       /*************************************************************/
*       /*                                                           */
*       /* SET UP FIELDS SO ILRVIORB WILL REFRESH THE CONTROL BLOCKS.*/
*       /* ILRVIORB WILL TEST THESE FIELDS THEN COMPLETE THE BUILDING*/
*       /* OF THE IORB, IOSB, AND SRB. THE RETURN CODE IS NOT TESTED */
*       /* IN THIS CASE SINCE THE CONTROL BLOCKS SHOULD VERIFY       */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0483
*       IORID='88'X;                /* IORB ID                       */
         MVI   IORID(REG1),X'88'                                   0483
*       IORPARTE=PAREPTR;           /* PARTE PTR TO IORB             */
         L     @15,EPAPARM(,EPAPTR)                                0484
         MVC   IORPARTE(4,REG1),PAREPTR(@15)                       0484
*       IOSASID='0001'X;            /* MASTER SCHEDULER ASID TO IOSB */
         LA    @15,112                                             0485
         ALR   @15,REG1                                            0485
         MVC   IOSASID(2,@15),@CB02230                             0485
*       IOSDVRID=IOSMISID;          /* DRIVER ID TO IOSB             */
         MVI   IOSDVRID(@15),X'01'                                 0486
*       REG0=REG1;                                                 0487
         LR    REG0,REG1                                           0487
*       REG1=SDWAPTR;                                              0488
         L     REG1,SDWAPTR                                        0488
*       STM(REG2,REG7,REGSVARE);                                   0489
         STM   REG2,REG7,REGSVARE                                  0489
*       CALL ILRVIORB;                                             0490
         L     @15,@CV02120                                        0490
         BALR  @14,@15                                             0490
*       LM(REG2,REG7,REGSVARE);                                    0491
         LM    REG2,REG7,REGSVARE                                  0491
*       PAREIORB=REG0;              /* PUT ADDR OF NEW IORB IN PARTE */
         L     @15,EPAPARM(,EPAPTR)                                0492
         L     @15,PAREPTR(,@15)                                   0492
         ST    REG0,PAREIORB(,@15)                                 0492
*     END;                          /* STORAGE WAS OBTAINED          */
*   REG1=SDWAPTR;                   /* REG1 WAS DESTROYED            */
@RC00457 L     REG1,SDWAPTR                                        0494
*   RFY                                                            0495
*     REG14 RSTD;                                                  0495
*   REG14=SAVERTN;                                                 0496
         LR    REG14,SAVERTN                                       0496
*   END NEWIORB;                                                   0497
@EL00002 DS    0H                                                  0497
@EF00002 DS    0H                                                  0497
@ER00002 BR    @14                                                 0497
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00P PTR(31) REG(0),                                       0498
*     GPR01P PTR(31) REG(1),                                       0498
*     GPR14P PTR(31) REG(14),                                      0498
*     GPR15P PTR(31) REG(15);                                      0498
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0499
*     I031F FIXED(31) BASED,                                       0499
*     I031P PTR(31) BASED,                                         0499
*     I015F FIXED(15) BASED,                                       0499
*     I015P PTR(15) BASED,                                         0499
*     I008P PTR(8) BASED,                                          0499
*     I001C CHAR(1) BASED;                                         0499
*   END ILRSRT01                                                   0500
*                                                                  0500
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (ILRAIA  )                                       */
*/*%INCLUDE SYSLIB  (ILRASMVT)                                       */
*/*%INCLUDE SYSLIB  (ILRATA  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IDAEDB  )                                       */
*/*%INCLUDE SYSLIB  (ILREPATH)                                       */
*/*%INCLUDE SYSLIB  (IECDIOCM)                                       */
*/*%INCLUDE SYSLIB  (ILRIOE  )                                       */
*/*%INCLUDE SYSLIB  (ILRIORB )                                       */
*/*%INCLUDE SYSLIB  (IECDIOSB)                                       */
*/*%INCLUDE SYSLIB  (ILRPART )                                       */
*/*%INCLUDE SYSLIB  (ILRPAT  )                                       */
*/*%INCLUDE SYSLIB  (ILRPCCW )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (IHASRB  )                                       */
*/*%INCLUDE SYSLIB  (IHAWSAVT)                                       */
*                                                                  0500
*       ;                                                          0500
@DATA    DS    0H
@CH00045 DC    H'1'
@CH00976 DC    H'5'
@CH01120 DC    H'6'
@CH01125 DC    H'7'
@CH02213 DC    H'10'
@CH01042 DC    H'40'
@CH02039 DC    H'108'
@SM02244 MVC   SDWAVRA-1(0,@05),IDAEDB+16(@15)
@DATD    DSECT
         DS    0F
ILRSRT01 CSECT
         DS    0F
@CF01278 DC    XL4'80000000'
@DATD    DSECT
         DS    0D
SDWAPTR  DS    A
SAVE14   DS    A
@TS00001 DS    CL3
         DS    CL1
REGSVARE DS    CL72
VCKWORK  DS    CL92
         ORG   VCKWORK
MSGLIST  DS    CL8
         ORG   MSGLIST
MSGNO    DS    FL2
MSGPAGE  DS    FL2
MSGPARTE DS    AL4
         ORG   VCKWORK+92
BADPCCW  DS    BL1
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ILRSRT01 CSECT
         NOPR  ((@ENDDATD-@DATD)/201*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV02114 DC    V(ILRVIOE)
@CV02115 DC    V(ILRVAIA)
@CV02116 DC    V(ILRVIOEQ)
@CV02118 DC    V(ILRVPCWQ)
@CV02119 DC    V(ILRVPCCW)
@CV02120 DC    V(ILRVIORB)
         DS    0D
@CC02146 DC    C'ILRSRT  '
@CB02139 DC    X'083000'
@CB02141 DC    X'084000'
@CB02144 DC    X'FFF000'
@CB02230 DC    X'0001'
RECNAMES DS    CL24
         ORG   RECNAMES
@NM00108 DC    CL8'ILRPTM  '
@NM00109 DC    CL8'ILRPTM  '
@NM00110 DC    CL8'ILRSRT01'
         ORG   RECNAMES+24
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
SAVERTN  EQU   @08
IORBPTRS EQU   @02
LASTPCCW EQU   @02
COUNT    EQU   @05
BASEREG  EQU   @10
ASMVTPTR EQU   @03
EPAPTR   EQU   @04
REG0     EQU   @00
REG1     EQU   @01
REG2     EQU   @02
REG4     EQU   @04
REG5     EQU   @05
REG6     EQU   @06
REG7     EQU   @07
REG8     EQU   @08
PTR@DATD EQU   @09
REG11    EQU   @11
REG12    EQU   @12
REG13    EQU   @13
REG14    EQU   @14
REG15    EQU   @15
R0       EQU   @00
R1       EQU   @01
R14      EQU   @14
R15      EQU   @15
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR14P   EQU   @14
GPR15P   EQU   @15
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
AIA      EQU   0
AIAFLG1  EQU   AIA+9
AIAWRITE EQU   AIAFLG1
AIADUPLX EQU   AIAFLG1
AIAFLG2  EQU   AIA+10
AIAPRIER EQU   AIAFLG2
AIASECER EQU   AIAFLG2
AIAFLG3  EQU   AIA+11
AIANXAIA EQU   AIA+12
AIAID    EQU   AIA+16
AIALPID  EQU   AIAID
AIALGID  EQU   AIALPID
AIALSID  EQU   AIALGID
AIASSID  EQU   AIALSID+1
AIARPN   EQU   AIALPID+4
AIALSID2 EQU   AIARPN
AIALPMEP EQU   AIALSID2
AIAGRPSZ EQU   AIA+24
AIALGE   EQU   AIAGRPSZ
ASMVT    EQU   0
ASMFLAG1 EQU   ASMVT
ASMDUPLX EQU   ASMFLAG1
ASMNODPX EQU   ASMFLAG1
ASMPLPAF EQU   ASMFLAG1
ASMCOMMF EQU   ASMFLAG1
ASMFLAG2 EQU   ASMVT+1
ASMPART  EQU   ASMVT+8
ASMSTAGQ EQU   ASMVT+32
ASMPCCWQ EQU   ASMVT+64
ASMPCCWA EQU   ASMPCCWQ
ASMIOCNT EQU   ASMVT+80
ASMSRBCT EQU   ASMVT+84
ASMPSRB  EQU   ASMVT+88
ASMSLOTS EQU   ASMVT+112
ASMLSAI  EQU   ASMVT+144
ASMGOSQS EQU   ASMVT+152
ASMPEX   EQU   ASMVT+224
ASMPMSG0 EQU   ASMVT+260
ASMIOEPC EQU   ASMVT+296
ASMWKSA1 EQU   ASMVT+368
ASMWKSA2 EQU   ASMVT+448
ASMWKSA3 EQU   ASMVT+528
ASMWKSA4 EQU   ASMVT+608
ASMWKSA5 EQU   ASMVT+688
ASMPOOLS EQU   0
ASMCPAVQ EQU   ASMPOOLS+8
ASMCPAVL EQU   ASMCPAVQ
ASMCPRSQ EQU   ASMPOOLS+16
ATA      EQU   0
ATASFLGS EQU   ATA+1
ATASRT   EQU   ATASFLGS+1
ATARFLGS EQU   ATA+4
ATARCRSN EQU   ATA+6
ATACLEAR EQU   ATA+8
ATAEPATH EQU   ATACLEAR+4
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIXAVL EQU   CVTMAP+124
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
IDAEDBHD EQU   0
IDAEDB   EQU   0
EDBFLG1  EQU   IDAEDB+2
EPATH    EQU   0
EPAPARM  EQU   EPATH
EPAIOEIP EQU   EPATH+4
EPAIOEQP EQU   EPATH+8
EPAFFIOE EQU   EPATH+12
EPAWRTQ  EQU   EPATH+20
EPAWTPAT EQU   EPATH+24
EPACYLA  EQU   EPATH+28
EPAMSPAD EQU   EPATH+32
EPAWRTCT EQU   EPATH+36
EPACPUID EQU   EPATH+38
IOCOM    EQU   0
IOCSTIO  EQU   IOCOM+28
IOE      EQU   0
IOENXT   EQU   IOE
IOELSIDA EQU   IOE+4
IOEAIA   EQU   IOE+8
IOEWORK  EQU   IOE+12
IORB     EQU   0
IORID    EQU   IORB
IORRQSZ  EQU   IORB+2
IORFLGS  EQU   IORB+3
IORFUSE  EQU   IORFLGS
IORAPND  EQU   IORFLGS
IORIORB  EQU   IORB+4
IORPCCW  EQU   IORB+8
IORIOSB  EQU   IORB+12
IORTSMP  EQU   IORB+24
IORPARTE EQU   IORB+32
IOSB     EQU   0
IOSFLA   EQU   IOSB
IOSACHN  EQU   IOSFLA
IOSFLB   EQU   IOSB+1
IOSFLC   EQU   IOSB+2
IOSDVALT EQU   IOSFLC
IOSPROC  EQU   IOSB+3
IOSDVRID EQU   IOSB+4
IOSASID  EQU   IOSB+6
IOSPKEY  EQU   IOSB+12
IOSOPT   EQU   IOSB+14
IOSOPT2  EQU   IOSB+15
IOSUCB   EQU   IOSB+16
@NM00015 EQU   IOSB+20
IOSCSW   EQU   @NM00015+1
IOSTATUS EQU   IOSCSW+3
IOSSRB   EQU   IOSB+28
IOSIPIB  EQU   IOSB+44
IOSERP   EQU   IOSB+52
IOSPATH  EQU   IOSB+86
IOSCHN   EQU   IOSPATH
IOSCKEY  EQU   IOSB+89
IOSEEKA  EQU   IOSB+100
IOSCCHH  EQU   IOSEEKA+3
IOSSKHH  EQU   IOSCCHH+2
PART     EQU   0
PARTHDR  EQU   PART
PARTAIAE EQU   PARTHDR+12
PARTTPAR EQU   PARTHDR+24
PARTLOCK EQU   PARTHDR+44
PARTCOMQ EQU   PARTHDR+48
PARTSPLQ EQU   PARTHDR+56
PARTDUPQ EQU   PARTHDR+64
PARTLOCQ EQU   PARTHDR+72
PARTENT  EQU   0
PARELKUP EQU   PARTENT+4
PARELKFL EQU   PARELKUP
PARECPCT EQU   PARELKUP+2
PARETYPE EQU   PARTENT+8
PAREPLPA EQU   PARETYPE
PAREDPLX EQU   PARETYPE
PARELOCL EQU   PARETYPE
PAREFLG1 EQU   PARTENT+9
PARENUSE EQU   PAREFLG1
PAREIOEQ EQU   PARTENT+12
PARESZSL EQU   PARTENT+16
PARESLTA EQU   PARTENT+20
PAREIORB EQU   PARTENT+28
PAREPATP EQU   PARTENT+32
PAREEDBP EQU   PARTENT+40
PAREUCBP EQU   PARTENT+44
PARENODE EQU   PARTENT+48
PAT      EQU   0
PATHDR   EQU   PAT
PATCYLMW EQU   PATHDR+12
PATMAP   EQU   PAT+16
PATCYLMP EQU   0
PCCW     EQU   0
PCCWFLGS EQU   PCCW+2
PCCWPCCW EQU   PCCW+4
PCCWAIA  EQU   PCCW+8
PCCWCHHR EQU   PCCW+16
PCCWSEEK EQU   PCCW+24
PCCWSSEC EQU   PCCW+32
PCCWSRCH EQU   PCCW+40
PCCWTIC  EQU   PCCW+48
PCCWRW   EQU   PCCW+56
PCCWNOP  EQU   PCCW+64
PCCWN    EQU   PCCWNOP
PCCWNFG  EQU   PCCWNOP+4
SDWA     EQU   0
SDWAPARM EQU   SDWA
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWACMPC EQU   SDWAABCC+1
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAERRD EQU   SDWAFLGS+3
SDWAIOFS EQU   SDWA+238
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWARCDE EQU   SDWAPARQ
SDWAACF2 EQU   SDWAPARQ+1
SDWARCRD EQU   SDWAACF2
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWAAPLW EQU   SDWALKWS+16
SDWARECP EQU   SDWA+292
SDWACSCT EQU   SDWARECP+8
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
SDWAURAL EQU   SDWARA+3
SDWAVRA  EQU   SDWARA+4
SRBSECT  EQU   0
SRB      EQU   SRBSECT
SRBFLNK  EQU   SRB+4
SRBFLC   EQU   SRB+12
WSAG     EQU   0
WSAGGMFM EQU   WSAG+4
NEWMAP   EQU   0
MSGPLIST EQU   0
MSGNUM   EQU   MSGPLIST
MSGCBADR EQU   MSGPLIST+4
PARMLIST EQU   0
IORBPTR  EQU   PARMLIST
PAREPTR  EQU   PARMLIST+4
PCCWPTR  EQU   PARMLIST+8
WRTIOEQ  EQU   PARMLIST+12
@NM00103 EQU   0
WRTQSTRT EQU   @NM00103
WRTQEND  EQU   @NM00103+4
BLOCKS   EQU   0
NIORB    EQU   BLOCKS
NIOSB    EQU   BLOCKS+112
NSRB     EQU   BLOCKS+224
WORKAREA EQU   0
ILRMSG00 EQU   0
I256C    EQU   0
GMACELL  EQU   0
GMANEXT  EQU   GMACELL
ILRPEX   EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
PATCYL   EQU   0
ASM1WKSV EQU   ASMWKSA1
ASM1RGSV EQU   ASM1WKSV
ASM1WRKA EQU   ASM1WKSV+60
ASM2WKSV EQU   ASMWKSA2
ASM2WRKA EQU   ASM2WKSV+52
ASM2FLGS EQU   ASM2WRKA+12
ASM3WKSV EQU   ASMWKSA3
ASM4WKSV EQU   ASMWKSA4
ASM4RGSV EQU   ASM4WKSV
ASM5WKSV EQU   ASMWKSA5
ASM5RGSV EQU   ASM5WKSV
CVTPTR   EQU   FLCCVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTGSMQ  EQU   CVTS01+264
CVTGLMN  EQU   CVTS01+332
CVTSPSA  EQU   CVTS01+336
CVTASMVT EQU   CVTS01+356
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
IOSATTSC EQU   IOSIPIB
IOSWTOWA EQU   IOSIPIB
IOSPCISC EQU   IOSIPIB
FLC      EQU   PSA
PSARSVTE EQU   PSARSVT
SPARENOD EQU   PARENODE
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
IOSPCIWA EQU   IOSPCISC+44
IOSPCIRS EQU   IOSPCISC+8
@NM00020 EQU   IOSPCISC+4
@NM00019 EQU   IOSPCISC
IOSWRNDR EQU   IOSWTOWA+4
IOSWTOPT EQU   IOSWTOWA+3
IOSWTOCP EQU   IOSWTOWA+2
IOSWTOCH EQU   IOSWTOWA
IOSATTWA EQU   IOSATTSC+40
@NM00018 EQU   IOSATTSC+24
IOSATTSN EQU   IOSATTSC
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
ASM5FLGS EQU   ASM5WKSV+64
ASM5AIA  EQU   ASM5WKSV+60
ASM5GCTR EQU   ASM5WKSV+56
ASM5SR14 EQU   ASM5WKSV+52
@NM00006 EQU   ASM5RGSV+4
ASM5RG2  EQU   ASM5RGSV
@NM00005 EQU   ASM4RGSV+4
ASM4RG2  EQU   ASM4RGSV
ASM3SR13 EQU   ASM3WKSV+28
ASM3R14B EQU   ASM3WKSV+24
ASM3R14A EQU   ASM3WKSV+20
ASM3GRPA EQU   ASM3WKSV+16
ASM3TMPA EQU   ASM3WKSV+12
ASM3PIOP EQU   ASM3WKSV+8
ASM3GENQ EQU   ASM3WKSV+4
ASM3SWPQ EQU   ASM3WKSV
ASM2SR14 EQU   ASM2WRKA+16
@NM00004 EQU   ASM2WRKA+13
ASM2WFLG EQU   ASM2FLGS
ASM2RFLG EQU   ASM2FLGS
ASM2DUPQ EQU   ASM2WRKA+8
ASM2CAQ  EQU   ASM2WRKA+4
ASM2PAQ  EQU   ASM2WRKA
ASM2RGSV EQU   ASM2WKSV
ASM1NXTA EQU   ASM1WRKA+4
ASM1ASCB EQU   ASM1WRKA
ASM1RG15 EQU   ASM1RGSV+56
@NM00003 EQU   ASM1RGSV+4
ASM1RG1  EQU   ASM1RGSV
@NM00107 EQU   NSRB+48
@NM00106 EQU   NSRB
@NM00105 EQU   NIOSB+112
@NM00104 EQU   NIOSB
NIORSAVE EQU   BLOCKS+40
SRTWORK  EQU   PARMLIST+16
MSGTYPE  EQU   MSGPLIST+2
WSAGSCHE EQU   WSAG+40
WSAGREST EQU   WSAG+36
WSAGNQDQ EQU   WSAG+32
WSAGMEMT EQU   WSAG+28
WSAGOPTM EQU   WSAG+24
WSAGSTAT EQU   WSAG+20
WSAGEMS0 EQU   WSAG+16
WSAGSSRS EQU   WSAG+12
WSAGRSM  EQU   WSAG+8
WSAGPGIO EQU   WSAG
@NM00102 EQU   SRB+40
@NM00101 EQU   SRB+38
SRBPRIOR EQU   SRB+37
SRBPKF   EQU   SRB+36
SRBSAVE  EQU   SRB+32
SRBPARM  EQU   SRB+28
SRBRMTR  EQU   SRB+24
SRBEP    EQU   SRB+20
SRBPTCB  EQU   SRBFLC+4
SRBPASID EQU   SRBFLC+2
SRBCPAFF EQU   SRBFLC
SRBASCB  EQU   SRB+8
SRBID    EQU   SRB
@NM00100 EQU   SDWA+512
@NM00099 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
@NM00098 EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00097 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00096 EQU   SDWADDAT+3
@NM00095 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00094 EQU   SDWADDAT+1
@NM00093 EQU   SDWASDAT
SDWAQQS  EQU   SDWASDAT
SDWACBS  EQU   SDWASDAT
SDWAGTF  EQU   SDWASDAT
SDWASWA  EQU   SDWASDAT
SDWALSQA EQU   SDWASDAT
SDWASQA  EQU   SDWASDAT
SDWANUC  EQU   SDWASDAT
@NM00092 EQU   SDWADUMP+2
@NM00091 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00090 EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWAREXN EQU   SDWARECP+16
SDWAMODN EQU   SDWARECP
@NM00089 EQU   SDWA+290
SDWAASID EQU   SDWA+288
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00088 EQU   SDWAACF3
@NM00087 EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
@NM00086 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00085 EQU   SDWAACF2
SDWALCPU EQU   SDWACPUA+2
@NM00084 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
SDWARTYA EQU   SDWA+240
@NM00083 EQU   SDWA+239
@NM00082 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
@NM00081 EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
SDWACLUP EQU   SDWAERRD
@NM00080 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAPERC EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00079 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWAMCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00078 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00077 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00076 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00075 EQU   SDWAINC2
@NM00074 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00073 EQU   SDWAILC2
@NM00072 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00071 EQU   SDWANXT2
@NM00070 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00069 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00068 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00067 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00066 EQU   SDWAINC1
@NM00065 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00064 EQU   SDWAILC1
@NM00063 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00062 EQU   SDWANXT1
@NM00061 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00060 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00059 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00058 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00057 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00056 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00055 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
@NM00054 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00053 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAREQ  EQU   SDWACMPF
@NM00028 EQU   PCCW+72
PCCWNCT  EQU   PCCWNOP+6
PCCWNAD  EQU   PCCWNOP+1
PCCWCNT  EQU   PCCWRW+6
PCCWRWFG EQU   PCCWRW+4
PCCWADDR EQU   PCCWRW+1
PCCWRDWT EQU   PCCWRW
PCCWTCT  EQU   PCCWTIC+6
PCCWTFG  EQU   PCCWTIC+4
PCCWTAD  EQU   PCCWTIC+1
PCCWT    EQU   PCCWTIC
PCCWSICT EQU   PCCWSRCH+6
PCCWSIFG EQU   PCCWSRCH+4
PCCWSIAD EQU   PCCWSRCH+1
PCCWSIDE EQU   PCCWSRCH
PCCWSSCT EQU   PCCWSSEC+6
PCCWSSFG EQU   PCCWSSEC+4
PCCWSSAD EQU   PCCWSSEC+1
PCCWSS   EQU   PCCWSSEC
PCCWSKCT EQU   PCCWSEEK+6
PCCWSKFG EQU   PCCWSEEK+4
PCCWSKAD EQU   PCCWSEEK+1
PCCWSK   EQU   PCCWSEEK
PCCWR    EQU   PCCWCHHR+7
PCCWHH   EQU   PCCWCHHR+5
PCCWCC   EQU   PCCWCHHR+3
PCCWBB   EQU   PCCWCHHR+1
PCCWM    EQU   PCCWCHHR
PCCWIORB EQU   PCCW+12
@NM00027 EQU   PCCW+3
@NM00026 EQU   PCCWFLGS
PCCWFERR EQU   PCCWFLGS
PCCWSECT EQU   PCCW+1
PCCWID   EQU   PCCW
PATCYLS  EQU   PATMAP
PATRSV1  EQU   PATHDR+14
PATCYLSZ EQU   PATHDR+10
PATCYLNO EQU   PATHDR+8
PATPART  EQU   PATHDR+4
PATIDENT EQU   PATHDR
@NM00025 EQU   PARTENT+62
PARELCYL EQU   PARTENT+60
PARERQTM EQU   PARTENT+56
PAREWTQE EQU   PARTENT+52
PAREPCTP EQU   PARTENT+36
PARERRCT EQU   PARTENT+24
PARENN   EQU   PARTENT+10
@NM00024 EQU   PAREFLG1
PAREINCP EQU   PAREFLG1
PAREDSBD EQU   PAREFLG1
@NM00023 EQU   PARETYPE
PARECOMM EQU   PARETYPE
PAREIORN EQU   PARELKUP+1
@NM00022 EQU   PARELKFL
PAREFSIP EQU   PARELKFL
PAREPARE EQU   PARTENT
PARTENTS EQU   PART+80
PARTLOCL EQU   PARTLOCQ+4
PARTLOCF EQU   PARTLOCQ
PARTDUPL EQU   PARTDUPQ+4
PARTDUPF EQU   PARTDUPQ
PARTSPLL EQU   PARTSPLQ+4
PARTSPLF EQU   PARTSPLQ
PARTCOML EQU   PARTCOMQ+4
PARTCOMF EQU   PARTCOMQ
PARTLKUP EQU   PARTHDR+40
@NM00021 EQU   PARTHDR+34
PARTLCNT EQU   PARTHDR+32
PARTPCTQ EQU   PARTHDR+28
PARTDSNL EQU   PARTTPAR
PARTCIR2 EQU   PARTHDR+20
PARTCIR1 EQU   PARTHDR+16
PARTEUSE EQU   PARTHDR+8
PARTSIZE EQU   PARTHDR+4
PARTIDEN EQU   PARTHDR
IOSEND   EQU   IOSB+108
IOSSKR   EQU   IOSEEKA+7
IOSSKH2  EQU   IOSSKHH+1
IOSSKH1  EQU   IOSSKHH
IOSSKCC  EQU   IOSCCHH
IOSSKBB  EQU   IOSEEKA+1
IOSSKM   EQU   IOSEEKA
IOSEEK   EQU   IOSB+92
IOSMDM   EQU   IOSB+91
IOSMDB   EQU   IOSB+90
IOSCKEY7 EQU   IOSCKEY
IOSCKEY6 EQU   IOSCKEY
IOSCKEY5 EQU   IOSCKEY
IOSCKEY4 EQU   IOSCKEY
@NM00017 EQU   IOSCKEY
IOSFMSK  EQU   IOSB+88
IOSCUDEV EQU   IOSPATH+1
@NM00016 EQU   IOSCHN
IOSPATH3 EQU   IOSCHN
IOSPATH2 EQU   IOSCHN
IOSEXP   EQU   IOSCHN
IOSGDP   EQU   IOSCHN
IOSAFF   EQU   IOSB+85
IOSRSS1B EQU   IOSB+84
IOSDSID  EQU   IOSB+80
IOSVST   EQU   IOSB+76
IOSRST   EQU   IOSB+72
IOSDIE   EQU   IOSB+68
IOSABN   EQU   IOSB+64
IOSNRM   EQU   IOSB+60
IOSPCI   EQU   IOSB+56
IOSPCHN  EQU   IOSB+48
IOSSNS   EQU   IOSB+42
IOSAPMSK EQU   IOSB+40
IOSRES4A EQU   IOSB+36
IOSUSE   EQU   IOSB+32
IOSCSWRC EQU   IOSCSW+5
IOSTSB   EQU   IOSTATUS+1
IOSTSA   EQU   IOSTATUS
IOSCSWCA EQU   IOSCSW
IOSCC    EQU   @NM00015
IOSOPT2X EQU   IOSOPT2
IOSIGP   EQU   IOSOPT2
IOSHTP   EQU   IOSOPT2
IOSRELSE EQU   IOSOPT
IOSAPR   EQU   IOSOPT
IOSTSLL  EQU   IOSOPT
IOSNERP  EQU   IOSOPT
IOSPSLL  EQU   IOSOPT
IOSQISCE EQU   IOSOPT
IOSDEP   EQU   IOSOPT
IOSBYP   EQU   IOSOPT
IOSCOD   EQU   IOSB+13
IOSPKY7  EQU   IOSPKEY
IOSPGDPX EQU   IOSPKEY
IOSIDR   EQU   IOSPKEY
IOSLCL   EQU   IOSPKEY
@NM00014 EQU   IOSPKEY
IOSPGAD  EQU   IOSB+8
IOSPRLVL EQU   IOSB+5
IOSFLC7  EQU   IOSFLC
IOSCTCNR EQU   IOSFLC
IOSRWAIT EQU   IOSFLC
IOSTP    EQU   IOSFLC
IOSCC3WE EQU   IOSFLC
IOSVERIF EQU   IOSDVALT
IOSDVMNT EQU   IOSFLC
IOSLOG   EQU   IOSFLB
IOSBDCST EQU   IOSFLB
IOSMSG   EQU   IOSFLB
IOSFLB4  EQU   IOSFLB
IOSFLB3  EQU   IOSFLB
IOSNOTRS EQU   IOSFLB
IOSSDR   EQU   IOSFLB
IOSDIESE EQU   IOSFLB
IOSIOSB  EQU   IOSFLA
IOSDOM   EQU   IOSFLA
IOSEX    EQU   IOSFLA
IOSSMDB  EQU   IOSFLA
IOSSMDA  EQU   IOSFLA
IOSERR   EQU   IOSFLA
IOSCCHN  EQU   IOSACHN
IOSDCHN  EQU   IOSACHN
@NM00013 EQU   IORB+40
IORRSV   EQU   IORB+36
IORERR   EQU   IORB+20
IORSAVE  EQU   IORB+16
IORSCCW  EQU   IORPCCW
IORFAE   EQU   IORAPND
IORFNE   EQU   IORAPND
IORFDI   EQU   IORAPND
IORSWAP  EQU   IORFLGS
@NM00012 EQU   IORFLGS
IORFRPS  EQU   IORFLGS
IORNUM   EQU   IORB+1
@NM00011 EQU   IOE+16
IOEBKPTR EQU   IOEWORK
IOENXTGT EQU   IOELSIDA
IOENXTLE EQU   IOENXT
IOCOEND  EQU   IOCOM+128
IOCPATCH EQU   IOCOM+124
IOCUCBBM EQU   IOCOM+120
IOCQCNT  EQU   IOCOM+116
IOCIOSDQ EQU   IOCOM+112
IOCIOSEQ EQU   IOCOM+108
IOCSVCF  EQU   IOCOM+104
IOCTCCW  EQU   IOCOM+100
IOCRSVTB EQU   IOCOM+96
IOCMFCNT EQU   IOCOM+92
IOCMFHK  EQU   IOCOM+88
IOCGENA  EQU   IOCOM+84
IOCCCH   EQU   IOCOM+80
IOCASYNQ EQU   IOCOM+76
IOCLCHTB EQU   IOCOM+72
IOCATTBL EQU   IOCOM+68
IOCOMEX  EQU   IOCOM+64
IOCSYNCH EQU   IOCOM+56
IOCCATLK EQU   IOCOM+48
IOCPRGID EQU   IOCOM+44
IOCIOSCP EQU   IOCOM+40
IOCORMGT EQU   IOCOM+36
IOCVOID  EQU   IOCOM+32
IOCSCOMP EQU   IOCOM+24
IOCHD160 EQU   IOCOM+20
IOCINT   EQU   IOCOM+16
IOCCTBL  EQU   IOCOM+12
IOCHIO   EQU   IOCOM+8
IOCPST   EQU   IOCOM+4
IOCPGCT  EQU   IOCOM+2
IOCVOICT EQU   IOCOM
EPALFIOE EQU   EPATH+16
EDBTKBAL EQU   IDAEDB+20
EDBHIRBA EQU   IDAEDB+16
EDBLORBA EQU   IDAEDB+12
EDBSTTRK EQU   IDAEDB+8
EDBLPMBA EQU   IDAEDB+4
EDBM     EQU   IDAEDB+3
@NM00010 EQU   EDBFLG1
EDBPSDS  EQU   EDBFLG1
EDBTOFLW EQU   EDBFLG1
EDBLKR   EQU   EDBFLG1
@NM00009 EQU   IDAEDB
EDBLPMBC EQU   IDAEDBHD+4
EDBLEN   EQU   IDAEDBHD+2
EDBNO    EQU   IDAEDBHD+1
EDBID    EQU   IDAEDBHD
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00008 EQU   CVTFIX+248
@NM00007 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
ATAWORKA EQU   ATACLEAR
ATARCODE EQU   ATA+7
ATARCRF8 EQU   ATARCRSN
ATARCRF7 EQU   ATARCRSN
ATARCRF6 EQU   ATARCRSN
ATARCRF5 EQU   ATARCRSN
ATARCRF4 EQU   ATARCRSN
ATARCRF3 EQU   ATARCRSN
ATARCRF2 EQU   ATARCRSN
ATARCRF1 EQU   ATARCRSN
ATARSV2  EQU   ATARFLGS
ATABADPK EQU   ATARFLGS
ATASCCWP EQU   ATARFLGS
ATASGNST EQU   ATARFLGS
ATARSV1  EQU   ATASFLGS+1
ATASWPDR EQU   ATASFLGS+1
ATATRPAG EQU   ATASFLGS+1
ATASWAP  EQU   ATASFLGS+1
ATAPAGCM EQU   ATASFLGS
ATAPAGIO EQU   ATASFLGS
ATAPOS   EQU   ATASFLGS
ATAPCOMP EQU   ATASFLGS
ATAVIOCM EQU   ATASFLGS
ATASCOMP EQU   ATASFLGS
ATASLSQA EQU   ATASFLGS
ATAQIOE  EQU   ATASFLGS
ATAMODID EQU   ATA
ASMCPRES EQU   ASMCPRSQ+4
ASMCPTAK EQU   ASMCPRSQ
ASMCPCNT EQU   ASMCPAVQ+4
ASMCPEXT EQU   ASMPOOLS+6
ASMCPSIZ EQU   ASMPOOLS+4
ASMCPID  EQU   ASMPOOLS
ASMRSV12 EQU   ASMVT+1000
ASMSAVE  EQU   ASMVT+928
ASMWKSA7 EQU   ASMVT+848
ASMWKSA6 EQU   ASMVT+768
ASMACEPC EQU   ASMVT+344
ASMSWKPC EQU   ASMVT+328
ASMBWKPC EQU   ASMVT+312
ASMRSV10 EQU   ASMVT+280
ASMPVACE EQU   ASMVT+276
ASMPIOFR EQU   ASMVT+272
ASMPVACQ EQU   ASMVT+268
ASMPMSGS EQU   ASMVT+264
ASMPFRLG EQU   ASMVT+256
ASMPRLG  EQU   ASMVT+252
ASMPACT  EQU   ASMVT+248
ASMPSAV  EQU   ASMVT+244
ASMPCMP  EQU   ASMVT+240
ASMPCMPA EQU   ASMVT+236
ASMPCMPN EQU   ASMVT+232
ASMPCMPD EQU   ASMVT+228
ASMVRMTR EQU   ASMVT+220
ASMPSRBC EQU   ASMVT+216
ASMPSRMT EQU   ASMVT+212
ASMPSWPD EQU   ASMVT+208
ASMPTM   EQU   ASMVT+204
ASMPFRSW EQU   ASMVT+200
ASMPFRSL EQU   ASMVT+196
ASMPQIOE EQU   ASMVT+192
ASMRSV8  EQU   ASMVT+188
ASMVSAMW EQU   ASMVT+184
ASMTASCB EQU   ASMVT+180
ASMRLGWQ EQU   ASMVT+176
ASMRLGRQ EQU   ASMVT+172
ASMTMECB EQU   ASMVT+168
ASMTCBPT EQU   ASMVT+164
ASMREQCT EQU   ASMVT+160
ASMGOSWK EQU   ASMGOSQS+4
ASMGOSWT EQU   ASMGOSQS
ASMLSAIH EQU   ASMLSAI+4
ASMLSAIL EQU   ASMLSAI
ASMCINV  EQU   ASMVT+140
ASMSTGXA EQU   ASMVT+136
ASMLGVT  EQU   ASMVT+132
ASMSLOTV EQU   ASMVT+128
ASMERRS  EQU   ASMVT+124
ASMNVSC  EQU   ASMVT+120
ASMVSC   EQU   ASMVT+116
ASMBKSLT EQU   ASMVT+108
ASMRSV7  EQU   ASMVT+92
ASMBURST EQU   ASMVT+76
ASMPCCWN EQU   ASMVT+72
ASMPCCWC EQU   ASMPCCWQ+4
ASMRSV6  EQU   ASMVT+48
ASMIORQC EQU   ASMVT+44
ASMIORQR EQU   ASMVT+40
ASMSTAGL EQU   ASMSTAGQ+4
ASMSTAGF EQU   ASMSTAGQ
ASMRSV5  EQU   ASMVT+28
ASMMSGBF EQU   ASMVT+24
ASMEREC  EQU   ASMVT+20
ASMTRPAG EQU   ASMVT+16
ASMGOS   EQU   ASMVT+12
ASMSART  EQU   ASMVT+4
ASMDSSFS EQU   ASMVT+2
ASMWARM  EQU   ASMFLAG2
ASMQUICK EQU   ASMFLAG2
ASMNOTPT EQU   ASMFLAG2
ASMNOTMR EQU   ASMFLAG2
ASMNOSAV EQU   ASMFLAG2
ASMCALLQ EQU   ASMFLAG2
ASMPLPAS EQU   ASMFLAG1
ASMRSV1  EQU   ASMFLAG1
ASMNOLCL EQU   ASMFLAG1
ASMNOCWQ EQU   ASMFLAG1
AIADPXCT EQU   AIALGE
AIACEPTR EQU   AIALPMEP
AIASLOT  EQU   AIASSID+1
@NM00002 EQU   AIASSID
@NM00001 EQU   AIALSID
AIARCSN  EQU   AIANXAIA+2
AIACYL   EQU   AIANXAIA
AIARSV9  EQU   AIAFLG3
AIARSV8  EQU   AIAFLG3
AIARSV7  EQU   AIAFLG3
AIALPMEC EQU   AIAFLG3
AIARSV6  EQU   AIAFLG3
AIATRPSP EQU   AIAFLG3
AIAPRINO EQU   AIAFLG3
AIARSV5  EQU   AIAFLG3
AIABADID EQU   AIAFLG2
AIAERROR EQU   AIAFLG2
AIARSV4  EQU   AIAFLG2
AIAIORTY EQU   AIAFLG2
AIATERMR EQU   AIAFLG2
AIAFRAUX EQU   AIAFLG2
AIARSV1  EQU   AIAFLG1
AIASWPFX EQU   AIAFLG1
AIAPAGDS EQU   AIAFLG1
AIALSQA  EQU   AIAFLG1
AIAVIO   EQU   AIAFLG1
AIAPRIV  EQU   AIAFLG1
AIAOP    EQU   AIA+8
AIABQPA  EQU   AIA+4
AIAFQPA  EQU   AIA
@NM00052 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00051 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00050 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00049 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSAULCMS EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00048 EQU   FLCFSA
@NM00047 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00046 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00045 EQU   FLCIOA
@NM00044 EQU   FLCMCLA+15
@NM00043 EQU   FLCMCLA+14
@NM00042 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00041 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00040 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00039 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00038 EQU   FLCPER
@NM00037 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00036 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00035 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00034 EQU   FLCPIILC
@NM00033 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00032 EQU   FLCSVILC
@NM00031 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00030 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00029 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00130 EQU   RESCHED
@RT00134 EQU   RESCHED
@RC00142 EQU   @RC00141
@RC00203 EQU   @RC00202
@RT00243 EQU   ZPCCWAIA
@RF00310 EQU   ULKPARTE
@RT00316 EQU   CKIORBOK
@RT00323 EQU   CKIORBOK
@RF00465 EQU   @RC00457
@RC00143 EQU   @RC00142
@ENDDATA EQU   *
         END   ILRSRT01,(C'PLS1800',0701,78110)
