         TITLE 'ILRSRB01: ASM SRB CONTROLLER RECOVERY                  *
                        '
ILRSRB01 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ILRSRB01  76.114'                                 0001
         DROP  @15
@PROLOG  BALR  @10,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@10                                         0001
*   SRBDREG=R0;                     /* ESTABLISH DATA REG            */
         LR    SRBDREG,R0                                          0049
*   FRRWORKA=''B;                   /* CLEAR WORKAREA STORAGE        */
         XC    FRRWORKA(200,SRBDREG),FRRWORKA(SRBDREG)             0050
*   SAVER14=R14;                    /* SAVE RETURN REGISTER          */
         ST    R14,SAVER14(,SRBDREG)                               0051
*   RFY                                                            0052
*    (R0,                                                          0052
*     R14) UNRSTD;                                                 0052
*   RSMHDPTR=ASCBRSM;               /* ASMHD ADDRESSIBILITY          */
         L     @12,ASCBPTR                                         0053
         L     RSMHDPTR,ASCBRSM(,@12)                              0053
*   ASMVTPTR=CVTASMVT;              /* ASMVT ADDRESSIBILITY          */
         L     @12,CVTPTR                                          0054
         L     ASMVTPTR,CVTASMVT(,@12)                             0054
*   ATAPTR=SDWAPARM;                /* ATA ADDRESSIBILITY            */
         L     ATAPTR,SDWAPARM(,SDWAPTR)                           0055
*   STM(SDWAPTR,ATAPTR,REGSAVE);    /* SAVE RECOVERY REGS (R1-R4)    */
         STM   SDWAPTR,ATAPTR,REGSAVE(SRBDREG)                     0056
*   SAREG=ADDR(SAVAREA);            /* REG SAVE AREA                 */
         LA    SAREG,SAVAREA(,SRBDREG)                             0057
*   RECSDWA=ATA;                    /* COPY ATA INTO RECORDING AREA  */
         MVC   RECSDWA+404(24,SDWAPTR),ATA(ATAPTR)                 0058
*   SDWAURAL=LENGTH(ATA);           /* AMOUNT OF REC AREA USED       */
         MVI   SDWAURAL(SDWAPTR),X'18'                             0059
*                                                                  0060
*   /*****************************************************************/
*   /*                                                               */
*   /* THE ONLY PROCESSING FOR ILRSRBC'S RECORD ONLY ABEND IS SETTING*/
*   /* UP THE SDWA FOR RETRY. THE ASM CLASS LOCK, HELD AT THE TIME OF*/
*   /* ABEND INSURES THE VALIDITY OF THE RETRY REGISTERS(SDWASRSV),  */
*   /* AND THEREFORE RETRY REGISTERS ARE NOT REINITIALIZED.          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0060
*   IF SDWACMPC=C0DABND THEN        /* SRBC ISSUED 'C0D' ABEND ?     */
         CLC   SDWACMPC(3,SDWAPTR),@CB02080                        0060
         BNE   @RF00060                                            0060
*     DO;                           /* YES- RECORD ABEND AND RETURN  */
*       DO;                         /* SETRP RC(4)RECPARM(IDLISTA)RET
*                                      ADDR(NXSEQIN)RECORD(YES)      */
*         RESPECIFY                                                0063
*          (GPR00P,                                                0063
*           GPR01P,                                                0063
*           GPR14P,                                                0063
*           GPR15P) RSTD;                                          0063
*         GPR01P->SDWARCDE=4;       /* STORE RC INTO SDWA            */
         MVI   SDWARCDE(GPR01P),X'04'                              0064
*         GPR01P->SDWARTYA=ADDR(NXSEQIN);/* SAVE RETRY ADDRESS       */
         MVC   SDWARTYA(4,GPR01P),SDWANXT1(SDWAPTR)                0065
*         GPR01P->SDWARCRD='1'B;    /* TURN ON RECORD INDICATOR      */
         OI    SDWARCRD(GPR01P),B'10000000'                        0066
*         GPR15P=ADDR(IDLISTA);     /* ACCESS RECORD PARAMETER LIST  */
         LA    GPR15P,@CC02084                                     0067
*         GPR01P->SDWARECP=GPR15P->I256C(1:24);/* COPY RECORD      0068
*                                      PARAMETERS                    */
         MVC   SDWARECP(24,GPR01P),I256C(GPR15P)                   0068
*         RESPECIFY                                                0069
*          (GPR00P,                                                0069
*           GPR01P,                                                0069
*           GPR14P,                                                0069
*           GPR15P) UNRSTD;                                        0069
*       END;                                                       0070
*       RFY                                                        0071
*         R14 RSTD;                                                0071
*       R14=SAVER14;                /* RESTORE RETURN ADDRESS        */
         L     @12,SAVER14(,SRBDREG)                               0072
         LR    R14,@12                                             0072
*       RETURN;                     /* TO RTM- RETRY PATH            */
@EL00001 DS    0H                                                  0073
@EF00001 DS    0H                                                  0073
@ER00001 BR    @14                                                 0073
*       RFY                                                        0074
*         R14 UNRSTD;                                              0074
*     END;                          /* RECORD ONLY ABEND             */
*                                                                  0076
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE PERCOLATES FOR ALL UNEXPECTED ABENDS. INITIALIZE */
*   /* THE SDWA FOR RECORDING AND LOCK FREEING.                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0076
*   DO;                             /* SETRP RC(0)FRELOCK(ASM(ASHLOCK
*                                      ),SALLOC,LOCAL)RECORD(YES)RECP
*                                      ARM(IDLISTA)                  */
@RF00060 DS    0H                                                  0077
*     RESPECIFY                                                    0077
*      (GPR00P,                                                    0077
*       GPR01P,                                                    0077
*       GPR14P,                                                    0077
*       GPR15P) RSTD;                                              0077
*     GPR01P->SDWARCDE=0;           /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0078
*     GPR01P->SDWARCRD='1'B;        /* TURN ON RECORD INDICATOR      */
         OI    SDWARCRD(GPR01P),B'10000000'                        0079
*     GPR15P=ADDR(IDLISTA);         /* ACCESS RECORD PARAMETER LIST  */
         LA    GPR15P,@CC02084                                     0080
*     GPR01P->SDWARECP=GPR15P->I256C(1:24);/* COPY RECORD PARAMETERS */
         MVC   SDWARECP(24,GPR01P),I256C(GPR15P)                   0081
*     GPR01P->SDWAAPLW=ADDR(ASHLOCK);/* INITIALIZE ASMPAT LOCKWORD   */
         LA    @12,ASHLOCK(,RSMHDPTR)                              0082
         ST    @12,SDWAAPLW(,GPR01P)                               0082
*     GPR01P->SDWAACF3=GPR01P->SDWAACF3×'00001100'B;/* INITIALIZE  0083
*                                      LOCK FLAGS                    */
         OI    SDWAACF3(GPR01P),B'00001100'                        0083
*     GPR01P->SDWAACF4=GPR01P->SDWAACF4×'00000001'B;/* INITIALIZE  0084
*                                      LOCK FLAGS                    */
         OI    SDWAACF4(GPR01P),B'00000001'                        0084
*     RESPECIFY                                                    0085
*      (GPR00P,                                                    0085
*       GPR01P,                                                    0085
*       GPR14P,                                                    0085
*       GPR15P) UNRSTD;                                            0085
*   END;                                                           0086
*                                                                  0087
*   /*****************************************************************/
*   /*                                                               */
*   /* CALL ILRCQIOE FOR AN ERROR IN ILRQIOE. ILRQIOE RECEIVES       */
*   /* CONTROL AT THE END OF ILRESTRT PROCESSING.                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0087
*   IF ATAQIOE=YES THEN             /* ILRQIOE IN CONTROL            */
         TM    ATAQIOE(ATAPTR),B'10000000'                         0087
         BNO   @RF00087                                            0087
*     DO;                           /* YES- CALL QIOE RECOVERY       */
*       RFY                                                        0089
*         QIOEDREG RSTD;            /* ILRCQIOE WORKAREA REG         */
*       QIOEDREG=ADDR(WRKAREA);     /* ILRCQIOE DATA AREA            */
         LA    QIOEDREG,WRKAREA(,SRBDREG)                          0090
*       SAVBASE=BASEREG;            /* DESTROYED ACROSS CALL         */
         ST    BASEREG,SAVBASE(,SRBDREG)                           0091
*       CALL ILRCQIOE;              /* RECOVERY FOR ILRQIOE          */
         L     @15,@CV02107                                        0092
         BALR  @14,@15                                             0092
*       BASEREG=SAVBASE;            /* RESTORE BASE REGISTER         */
         L     BASEREG,SAVBASE(,SRBDREG)                           0093
*       RSMHDPTR=SAVRSMHD;          /* DESTROYED ACROSS CALL         */
         L     RSMHDPTR,SAVRSMHD(,SRBDREG)                         0094
*       SDWACSCT=QIOENAME;          /* SET ILRQIOE ID IN SDWA        */
         MVC   SDWACSCT(8,SDWAPTR),@CC02082                        0095
*       SDWARCDE=ZERO;              /* ILRCQIOE NORMALLY ATTEMPTS  0096
*                                      RETRY                         */
         MVI   SDWARCDE(SDWAPTR),X'00'                             0096
*       RFY                                                        0097
*         QIOEDREG UNRSTD;                                         0097
*     END;                          /* ILRQIOE ERROR                 */
*                                                                  0099
*   /*****************************************************************/
*   /*                                                               */
*   /* THE ASM CLASS LOCK SERIALIZES THE ASM HEADER LGE QUEUE AND THE*/
*   /* ILRSRBC SRB SCHEDULED FLAG IN THE ASM HEADER. THE LOCK MAY    */
*   /* ALREADY BE HELD.                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0099
*   RFY                                                            0099
*     R11 RSTD;                                                    0099
@RF00087 DS    0H                                                  0100
*   R11=ADDR(ASHLOCK);              /* GET ASM LOCKWORD              */
         LA    R11,ASHLOCK(,RSMHDPTR)                              0100
*   GENERATE REFS(PSALITA);                                        0101
         SETLOCK OBTAIN,TYPE=ASM,MODE=UNCOND,ADDR=(11),REGS=SAVE,     XX
               RELATED=(VIO,IEAVTRTS)
*   RFY                                                            0102
*     R11 UNRSTD;                                                  0102
*                                                                  0102
*   /*****************************************************************/
*   /*                                                               */
*   /* SRB CONTROLLER'S MODID WILL BE CHECKPOINTED IF THE ERROR DID  */
*   /* NOT OCCUR DURING ENTRY PROCESSING.                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0103
*   IF ATAMODID^=ATAMSRBC THEN      /* MODID CHECKPOINTED ?          */
         CLI   ATAMODID(ATAPTR),8                                  0103
         BE    @RF00103                                            0103
*     DO;                           /* NO- ERROR IN ENTRY PROCESSING */
*       ASHSCHED=OFF;               /* INSURE ILRSRBC IS RESCHEDULED */
         NI    ASHSCHED(RSMHDPTR),B'01111111'                      0105
*       GOTO SCHED;                 /* EXIT PROCESSING               */
         B     SCHED                                               0106
*     END;                          /* MODID NOT CHECKPOINTED        */
*                                                                  0108
*/*   VALIDITY CHECK THE ASMHD LGE QUEUE AND EACH LGE PROCESS QUEUE  */
*                                                                  0108
*   RFY                                                            0108
*    (LGEPTR,                                                      0108
*     R5,                                                          0108
*     R6,                                                          0108
*     R7,                                                          0108
*     SAVLAST,                                                     0108
*     RTCODE) RSTD;                                                0108
@RF00103 DS    0H                                                  0109
*   SAVLAST=ZERO;                   /* CLEAR LAST LGE POINTER        */
         SLR   SAVLAST,SAVLAST                                     0109
*   LGEPTR=ASHLGEQ;                 /* GET FIRST LGE                 */
         L     LGEPTR,ASHLGEQ(,RSMHDPTR)                           0110
*   DO UNTIL LGEPTR=ZERO;           /* ASMHD LGE QUEUE LOOP          */
@DL00111 DS    0H                                                  0112
*     CALL ILRVLPRQ;                /* VERIFY LGE PROCESS QUEUE      */
         L     @15,@CV02110                                        0112
         BALR  @14,@15                                             0112
*     IF RTCODE=BADLGE THEN         /* LGE ADDRESS WAS INVALID ?     */
         CH    RTCODE,@CH00398                                     0113
         BNE   @RF00113                                            0113
*       DO;                         /* YES- TERMINATE MEMORY         */
*                                                                  0114
*         /***********************************************************/
*         /*                                                         */
*         /* SINCE IT IS IMPOSSIBLE TO DETERMINE DAMAGE TO THE LGE   */
*         /* QUEUE AND ASM CAN NOT ACCEPT REQUESTS FOR LGES WHICH MAY*/
*         /* NOT EXIST, THIS MEMORY IS TERMINATED. ILRTERMR WILL     */
*         /* RECOVER ASM RESOURCES.                                  */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0115
*         IF SAVLAST=ZERO THEN      /* FIRST LGE INVALID ?           */
         SLR   @14,@14                                             0115
         CR    SAVLAST,@14                                         0115
         BNE   @RF00115                                            0115
*           ASHLGEQ=ZERO;           /* YES- CLEAR QUEUE ANCHOR       */
         ST    @14,ASHLGEQ(,RSMHDPTR)                              0116
*         ELSE                                                     0117
*           SAVLAST->LGENEXT=ZERO;  /* TRUNCATE INVALID LGE          */
         B     @RC00115                                            0117
@RF00115 SLR   @14,@14                                             0117
         ST    @14,LGENEXT(,SAVLAST)                               0117
*         RFY                                                      0118
*          (TRMCODE,                                               0118
*           TRMASID) RSTD;                                         0118
@RC00115 DS    0H                                                  0119
*         TRMCODE=SDWACMPC;         /* MEMTERM COMPLETION CODE       */
         SLR   TRMCODE,TRMCODE                                     0119
         ICM   TRMCODE,7,SDWACMPC(SDWAPTR)                         0119
*         SRL(TRMCODE,12);          /* SHIFT FOR CALLRTM EXPANSION   */
         SRL   TRMCODE,12                                          0120
*         TRMASID=ASCBASID;         /* CURRENT ASCB                  */
         L     @14,ASCBPTR                                         0121
         SLR   TRMASID,TRMASID                                     0121
         ICM   TRMASID,3,ASCBASID(@14)                             0121
*         GENERATE REFS(CVTBTERM)                                  0122
*             (CALLRTM TYPE=MEMTERM,COMPCOD=(TRMCODE),ASID=(TRMASID));
         CALLRTM TYPE=MEMTERM,COMPCOD=(TRMCODE),ASID=(TRMASID)
*         RFY                                                      0123
*          (TRMCODE,                                               0123
*           TRMASID) UNRSTD;                                       0123
*         LM(SDWAPTR,RSMHDPTR,REGSAVE);/* DESTROYED BY CALLRTM       */
         LM    SDWAPTR,RSMHDPTR,REGSAVE(SRBDREG)                   0124
*         GOTO CLEANUP;             /* DO NOT RESCHEDULE ILRSRBC     */
         B     CLEANUP                                             0125
*       END;                        /* INVALID ASMHD LGE QUEUE       */
*     SAVLAST=LGEPTR;               /* REMEMBER LAST LGE             */
@RF00113 LR    SAVLAST,LGEPTR                                      0127
*     LGEPTR=LGENEXT;               /* GET NEXT LGE                  */
         LR    @14,LGEPTR                                          0128
         L     LGEPTR,LGENEXT(,@14)                                0128
*   END;                            /* LGE LOOP                      */
@DE00111 LTR   LGEPTR,LGEPTR                                       0129
         BNZ   @DL00111                                            0129
*   RFY                                                            0130
*    (LGEPTR,                                                      0130
*     SAVLAST,                                                     0130
*     RTCODE) UNRSTD;                                              0130
*                                                                  0131
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS GROUP OPERATION ACE QUEUE.                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0131
*   RFY                                                            0131
*     VERFREG RSTD;                 /* VERIFICATION INPUT REGISTER   */
*   VERFREG=ADDR(ATAACEQ);          /* ACE QUEUE TO BE VERIFIED      */
         LA    VERFREG,ATAACEQ(,ATAPTR)                            0132
*   CALL ILRVACEQ;                  /* VERIFY INTERNAL ACE QUEUE     */
         L     @15,@CV02109                                        0133
         BALR  @14,@15                                             0133
*   RFY                                                            0134
*    (VERFREG,                                                     0134
*     R5,                                                          0134
*     R6,                                                          0134
*     R7) UNRSTD;                                                  0134
*   IF ATAACEQ^=ZERO THEN           /* ANY ACES TO PROCESS ?         */
         L     @12,ATAACEQ(,ATAPTR)                                0135
         LTR   @12,@12                                             0135
         BZ    @RF00135                                            0135
*     DO;                           /* YES- PROCESS ATA ACE QUEUE    */
*                                                                  0136
*       /*************************************************************/
*       /*                                                           */
*       /* PROCESS ACE QUEUE ANCHORED IN THE ATA. GROUP OP AND WORK  */
*       /* PENDING FLAGS ARE RESET TO ALLOW THESE ACES TO BE         */
*       /* REPROCESSED BY ILRSRBC.                                   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0137
*       RFY                                                        0137
*        (SAVLAST,                                                 0137
*         ACEPTR) RSTD;                                            0137
*       ACEPTR=ATAACEQ;             /* GET ACE QUEUE ANCHOR          */
         LR    ACEPTR,@12                                          0138
*       DO WHILE ACEPTR^=ZERO;      /* LOOP THRU ACE QUEUE           */
         B     @DE00139                                            0139
@DL00139 DS    0H                                                  0140
*         RFY                                                      0140
*           LGEPTR RSTD;                                           0140
*         LGEPTR=ACELGE;            /* GET LGE FOR THIS ACE          */
         L     LGEPTR,ACELGE(,ACEPTR)                              0141
*         LGEGRINP=OFF;             /* GROUP OPERATION NOT IN PROCESS*/
*         LGEWRKPD=ON;              /* WORK NOW PENDING FOR THIS LGE */
         LR    @12,LGEPTR                                          0143
         OI    LGEWRKPD(@12),B'10000000'                           0143
         NI    LGEGRINP(@12),B'10111111'                           0143
*         SAVLAST=ACESRBWK;         /* SAVE POINTER TO NEXT ACE      */
         L     SAVLAST,ACESRBWK(,ACEPTR)                           0144
*         ACESRBWK=ZERO;            /* CLEAR INTERNAL CHAIN FIELD    */
         SLR   @12,@12                                             0145
         ST    @12,ACESRBWK(,ACEPTR)                               0145
*         ACEPTR=SAVLAST;           /* UPDATE ACE POINTING TO NEXT   */
         LR    ACEPTR,SAVLAST                                      0146
*         RFY                                                      0147
*           LGEPTR UNRSTD;                                         0147
*       END;                        /* ATA ACE QUEUE LOOP            */
@DE00139 LTR   ACEPTR,ACEPTR                                       0148
         BNZ   @DL00139                                            0148
*       RFY                                                        0149
*        (SAVLAST,                                                 0149
*         ACEPTR) UNRSTD;                                          0149
*     END;                          /* NON-ZERO ATA ACE QUEUE        */
*                                                                  0151
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS A CURRENT AIA OR ACE CHECKPOINTED IN THE ATA. THE     */
*   /* ATAAIACE WILL BE ZEROED BY ILRCQIOE FOR ERRORS WHICH OCCUR IN */
*   /* ILRQIOE.                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0151
*   RFY                                                            0151
*    (VERFREG,                                                     0151
*     R5,                                                          0151
*     R6,                                                          0151
*     R7,                                                          0151
*     RTCODE) RSTD;                                                0151
@RF00135 DS    0H                                                  0152
*   VERFREG=ATAAIACE;               /* VERIFY CURRENT AIA/ACE        */
         L     VERFREG,ATAAIACE(,ATAPTR)                           0152
*   CALL ILRVAIAC;                  /* VERIFICATION ROUTINE          */
         L     @15,@CV02112                                        0153
         BALR  @14,@15                                             0153
*   LM(SDWAPTR,ATAPTR,REGSAVE);     /* RESTORE REGISTERS             */
         LM    SDWAPTR,ATAPTR,REGSAVE(SRBDREG)                     0154
*   RFY                                                            0155
*    (VERFREG,                                                     0155
*     R5,                                                          0155
*     R6,                                                          0155
*     R7) UNRSTD;                                                  0155
*   IF RTCODE=SUCCESS THEN          /* AIA/ACE VALID ?               */
         SLR   @14,@14                                             0156
         CR    RTCODE,@14                                          0156
         BNE   @RF00156                                            0156
*     DO;                           /* AIA/ACE IS VALID              */
*       RFY                                                        0158
*         ACEPTR RSTD;                                             0158
*       ACEPTR=ATAAIACE;            /* ACE ADDRESSIBILITY            */
         L     ACEPTR,ATAAIACE(,ATAPTR)                            0159
*       IF ACEOP=ACETRPAG THEN      /* TRANSFER PAGE ACE ?           */
         CLI   ACEOP(ACEPTR),4                                     0160
         BNE   @RF00160                                            0160
*         DO;                       /* YES- PROCESS ACE              */
*                                                                  0161
*           /*********************************************************/
*           /*                                                       */
*           /* A CURRENT ACE IS CHECKPOINTED ONLY WHEN THE ILRTRANS  */
*           /* SUBROUTINE OF ILRPOS IS PROCESSING. THE ACE CAN BE SET*/
*           /* UP FOR REPROCESSING AFTER INSURING THAT A SLOT WHICH  */
*           /* MAY ALREADY HAVE BEEN FREED BY ILRTRANS WILL NOT BE   */
*           /* FREED AGAIN.                                          */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0162
*           IF ACETLPME^=ZERO THEN  /* SLOT ASSIGNED ?               */
         L     @12,ACETLPME(,ACEPTR)                               0162
         CR    @12,@14                                             0162
         BE    @RF00162                                            0162
*             ACETLPME->ASPLVALD=OFF;/* INVALIDATE LPME              */
         NI    ASPLVALD(@12),B'01111111'                           0163
*           ACELGE->LGEWRKPD=ON;    /* REPROCESS THE ACE             */
@RF00162 L     @14,ACELGE(,ACEPTR)                                 0164
         OI    LGEWRKPD(@14),B'10000000'                           0164
*         END;                      /* TRANSFER PAGE ACE             */
*       ELSE                                                       0166
*         DO;                       /* MUST BE AN AIA                */
*                                                                  0166
         B     @RC00160                                            0166
@RF00160 DS    0H                                                  0167
*           /*********************************************************/
*           /*                                                       */
*           /* A CURRENT AIA IS CHECKPOINTED ONLY WHEN THE ILRESTRT  */
*           /* SUBROUTINE OF ILRPOS IS PROCESSING. THE CURRENT AIA   */
*           /* REPRESENTS THAT PART OF THE INTERNAL AIA QUEUE NOT YET*/
*           /* PROCESSED.                                            */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0167
*           RFY                                                    0167
*             AIAPTR RSTD;                                         0167
*           AIAPTR=ATAAIACE;        /* ADDRESSIBILITY TO AIA         */
         L     AIAPTR,ATAAIACE(,ATAPTR)                            0168
*           IF AIABADID=ON×AIAPRIER=ON THEN/* ERROR FLAG IN AIA ?    */
         TM    AIABADID(AIAPTR),B'00001001'                        0169
         BZ    @RF00169                                            0169
*             DO;                   /* YES- ADD TO PART ERROR QUEUE  */
*               AIALPMEP->ASPLOPIN=ON;/* CLEAR LPME IN PROCESS FLAG  */
         L     @14,AIALPMEP(,AIAPTR)                               0171
         OI    ASPLOPIN(@14),B'00100000'                           0171
*               ATAAIACE=AIANXAIA;  /* DEQUEUE THIS AIA              */
         MVC   ATAAIACE(4,ATAPTR),AIANXAIA(AIAPTR)                 0172
*               RFY                                                0173
*                (COMPREG,                                         0173
*                 PARTPTR) RSTD;                                   0173
*               PARTPTR=ASMPART;    /* GET PART ADDRESS              */
         L     PARTPTR,ASMPART(,ASMVTPTR)                          0174
*               COMPREG=PARTAIAE;   /* GET ERROR QUEUE ANCHOR        */
         L     COMPREG,PARTAIAE(,PARTPTR)                          0175
*RTRYCS1:                                                          0176
*               AIANXAIA=COMPREG;   /* CHAIN TO THIS AIA             */
RTRYCS1  ST    COMPREG,AIANXAIA(,AIAPTR)                           0176
*               CS(COMPREG,AIAPTR,PARTAIAE);/* UPDATE ERROR QUEUE    */
         CS    COMPREG,@09,PARTAIAE(PARTPTR)                       0177
*               BC(NE,RTRYCS1);     /* FAILED ?- TRY AGAIN           */
         BC    7,RTRYCS1                                           0178
*               RFY                                                0179
*                (COMPREG,                                         0179
*                 PARTPTR) UNRSTD;                                 0179
*             END;                  /* AIA ERROR FLAG ON             */
*           ELSE                                                   0181
*             DO;                   /* NON- ERROR FLAG PROCESSING    */
*                                                                  0181
         B     @RC00169                                            0181
@RF00169 DS    0H                                                  0182
*               /*****************************************************/
*               /*                                                   */
*               /* THE AIA COMPLETED PROCESSING IF CURRENTLY LAST ON */
*               /* ASMVT STAGE QUEUE. OTHERWISE, THE AIA IS SETUP FOR*/
*               /* REPROCESSING BY THE SRB CONTROLLER. THE ASHIOCNT, */
*               /* ASSUMED TO HAVE BEEN INCREMENTED FOR THIS AIA, IS */
*               /* DECREMENTED. FOR A WRITE AIA, A SLOT MAY HAVE BEEN*/
*               /* FREED BY ILRESTRT. INVALIDATING THE LPME WILL     */
*               /* PREVENT FREEING THE SLOT TWICE.                   */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0182
*               RFY                                                0182
*                (R5,                                              0182
*                 R6,                                              0182
*                 R7) RSTD;         /* DESTROYED BY VERIFICATION     */
*               CALL ILRVASGQ;      /* VERIFY STAGING QUEUE          */
         L     @15,@CV02111                                        0183
         BALR  @14,@15                                             0183
*               RFY                                                0184
*                (R5,                                              0184
*                 R6,                                              0184
*                 R7) UNRSTD;                                      0184
*               IF AIAPTR=ASMSTAGL THEN/* AIA LAST ON STAGING QUEUE ?*/
         C     AIAPTR,ASMSTAGL(,ASMVTPTR)                          0185
         BNE   @RF00185                                            0185
*                 ATAAIACE=AIANXAIA;/* DEQUEUE FROM CURRENT AIA QUEUE*/
         MVC   ATAAIACE(4,ATAPTR),AIANXAIA(AIAPTR)                 0186
*               ELSE                                               0187
*                 DO;               /* SET UP AIA FOR REPROCESSING   */
         B     @RC00185                                            0187
@RF00185 DS    0H                                                  0188
*                   ASHIOCNT=ASHIOCNT-1;/* ASSUME UPDATED FOR THIS 0188
*                                      AIA                           */
         L     @14,ASHIOCNT(,RSMHDPTR)                             0188
         BCTR  @14,0                                               0188
         ST    @14,ASHIOCNT(,RSMHDPTR)                             0188
*                   IF AIALPMEP^=ZERO THEN/* SLOT ASSIGNED TO AIA ?  */
         L     @14,AIALPMEP(,AIAPTR)                               0189
         LTR   @14,@14                                             0189
         BZ    @RF00189                                            0189
*                     DO;           /* LPME IDENTIFIED               */
*                       AIALPMEP->ASPLOPIN=ON;/* CLEAR LPME IN     0191
*                                      PROCESS FLAG                  */
         OI    ASPLOPIN(@14),B'00100000'                           0191
*                       IF AIAWRITE=YES THEN/* WRITE AIA ?           */
         TM    AIAWRITE(AIAPTR),B'10000000'                        0192
         BNO   @RF00192                                            0192
*                         AIALPMEP->ASPLVALD=OFF;/* INVALIDATE THE 0193
*                                      LPME                          */
         NI    ASPLVALD(@14),B'01111111'                           0193
*                     END;          /* NON-ZERO LPME POINTER         */
@RF00192 DS    0H                                                  0195
*                 END;              /* SETUP AIA REPROCESSING        */
@RF00189 DS    0H                                                  0196
*             END;                  /* NON ERROR FLAG PROCESSING     */
@RC00185 DS    0H                                                  0197
*           ATAAIAQ=ATAAIACE;       /* GET UNPROCESSED AIAS          */
@RC00169 MVC   ATAAIAQ(4,ATAPTR),ATAAIACE(ATAPTR)                  0197
*           RFY                                                    0198
*             AIAPTR UNRSTD;                                       0198
*         END;                      /* AIA CHECKPOINTED              */
*       RFY                                                        0200
*         ACEPTR UNRSTD;                                           0200
@RC00160 DS    0H                                                  0201
*     END;                          /* VALID AIA/ACE CHECKPOINTED    */
*   RFY                                                            0202
*     RTCODE UNRSTD;                                               0202
@RF00156 DS    0H                                                  0203
*                                                                  0203
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS ATA AIA QUEUE                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0203
*   RFY                                                            0203
*    (VERFREG,                                                     0203
*     R5,                                                          0203
*     R6,                                                          0203
*     R7) RSTD;                     /* VERIFICATION REGISTERS        */
*   VERFREG=ADDR(ATAAIAQ);          /* INTERNAL AIA QUEUE            */
         LA    VERFREG,ATAAIAQ(,ATAPTR)                            0204
*   CALL ILRVAIAQ;                  /* VALIDITY CHECK AIA QUEUE      */
         L     @15,@CV02108                                        0205
         BALR  @14,@15                                             0205
*   RFY                                                            0206
*     AIAPTR RSTD;                                                 0206
*   AIAPTR=ATAAIAQ;                 /* GET FIRST AIA                 */
         L     AIAPTR,ATAAIAQ(,ATAPTR)                             0207
*   DO WHILE AIAPTR^=ZERO;          /* PROCESS EACH AIA              */
         B     @DE00208                                            0208
@DL00208 DS    0H                                                  0209
*     AIALPMEP->ASPLOPIN=ON;        /* CLEAR LPME IN PROCESS FLAG    */
         L     @12,AIALPMEP(,AIAPTR)                               0209
         OI    ASPLOPIN(@12),B'00100000'                           0209
*     AIALGE->LGEWRKPD=ON;          /* LGE WILL BE CHECKED           */
         L     @12,AIALGE(,AIAPTR)                                 0210
         OI    LGEWRKPD(@12),B'10000000'                           0210
*     AIAPRINO=OFF;                 /* AIA WILL BE REPROCESSED       */
         NI    AIAPRINO(AIAPTR),B'10111111'                        0211
*     AIAPTR=AIANXAIA;              /* GET NEXT AIA                  */
         L     AIAPTR,AIANXAIA(,AIAPTR)                            0212
*   END;                            /* ATA AIA QUEUE LOOP            */
@DE00208 LTR   AIAPTR,AIAPTR                                       0213
         BNZ   @DL00208                                            0213
*   RFY                                                            0214
*    (AIAPTR,                                                      0214
*     VERFREG,                                                     0214
*     R5,                                                          0214
*     R6,                                                          0214
*     R7) UNRSTD;                                                  0214
*                                                                  0215
*   /*****************************************************************/
*   /*                                                               */
*   /* SCHEDULE SRB CONTROLLER'S SRB, IF NECESSARY, TO PROCESS WORK  */
*   /* LEFT ON THE ASMHD LGE QUEUE BY THE RECOVERY ROUTINE.          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0215
*SCHED:                                                            0215
*   IF ASHSCHED=OFF THEN            /* SRBC REQUIRES A SCHEDULE ?    */
SCHED    TM    ASHSCHED(RSMHDPTR),B'10000000'                      0215
         BNZ   @RF00215                                            0215
*     DO;                           /* YES- SCHEDULE                 */
*       RFY                                                        0217
*         SRBPTR RSTD;                                             0217
*       ASHSCHED=ON;                /* INDICATE SRBC NOW SCHEDULED   */
         OI    ASHSCHED(RSMHDPTR),B'10000000'                      0218
*       SRBPTR=ASHVSRBP;            /* ADDRESS OF MEMORY SRB         */
         L     SRBPTR,ASHVSRBP(,RSMHDPTR)                          0219
*       GEN REFS(CVTLSMQ,SRBFLNK)(SCHEDULE SRB=(SRBPTR),SCOPE=LOCAL);
         SCHEDULE SRB=(SRBPTR),SCOPE=LOCAL
*       RFY                                                        0221
*         SRBPTR UNRSTD;                                           0221
*     END;                                                         0222
*CLEANUP:                                                          0223
*                                                                  0223
*   /*****************************************************************/
*   /*                                                               */
*   /* FREE ILRSRBC AND ILRRLG00 WORKAREA CELLS, IF NECESSARY. IF    */
*   /* ILRRLG00 WAS IN CONTROL AT THE TIME OF ERROR, A WORKAREA CELL */
*   /* AND AN ACTIVE ASPCT MAY BE CHECKPOINTED IN THE EPATH. THE     */
*   /* ASPCT POINTER IN THE LGE IS ZEROED TO PREVENT FREEING ASPCT   */
*   /* SLOTS TWICE.                                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0223
*   RFY                                                            0223
*     EPAPTR RSTD;                                                 0223
@RF00215 DS    0H                                                  0223
CLEANUP  DS    0H                                                  0224
*   EPAPTR=ATAEPATH;                /* ADDRESSIBILITY TO EPATH       */
         L     EPAPTR,ATAEPATH(,ATAPTR)                            0224
*   IF EPAAASP^=ZERO THEN           /* ACTIVE ASPCT CHECKPOINTED ?   */
         SLR   @12,@12                                             0225
         L     @11,EPAAASP(,EPAPTR)                                0225
         CR    @11,@12                                             0225
         BE    @RF00225                                            0225
*     EPAAASP->ASPLGE->LGEASPCT=ZERO;/* YES- CLEAR LGE ASPCT PTR     */
         L     @11,ASPLGE(,@11)                                    0226
         ST    @12,LGEASPCT(,@11)                                  0226
*   RFY                                                            0227
*     CELLADDR RSTD;                                               0227
@RF00225 DS    0H                                                  0228
*   CELLADDR=EPAOWKA;               /* RLG'S WORKAREA CELL           */
         L     CELLADDR,EPAOWKA(,EPAPTR)                           0228
*   CALL FREECELL;                  /* FREE THE CELL                 */
         BAL   @14,FREECELL                                        0229
*   CELLADDR=EPASWKA;               /* SRB CONTROLLER'S WORK AREA    */
         L     CELLADDR,EPASWKA(,EPAPTR)                           0230
*   CALL FREECELL;                  /* FREE THE CELL                 */
         BAL   @14,FREECELL                                        0231
*   RFY                                                            0232
*    (EPAPTR,                                                      0232
*     CELLADDR) UNRSTD;                                            0232
*   RFY                                                            0233
*     R14 RSTD;                                                    0233
*   R14=SAVER14;                    /* RESTORE RTM RETURN ADDRESS    */
         L     R14,SAVER14(,SRBDREG)                               0234
*   RFY                                                            0235
*     R14 UNRSTD;                                                  0235
*   RETURN;                         /* TO RTM                        */
         B     @EL00001                                            0236
*                                                                  0237
*/********************************************************************/
*/*                                                                  */
*/*  FREECELL: SUBROUTINE TO VERIFY AND FREE A WORKAREA CELL         */
*/*                                                                  */
*/*  INPUT: REG 1 = SDWA ADDRESS                                     */
*/*         REG 2 = CELL ADDRESS TO BE FREED                         */
*/*         REG 13 = ADDRESS OF 18 WORD SAVE AREA                    */
*/*         REG 14 = RETURN ADDRESS                                  */
*/*                                                                  */
*/*  PROCESS: ADDRESS VERIFY AND FREE THE WORKAREA CELL              */
*/********************************************************************/
*/*FREECELL: CHART (SEQ) FREECELL SUBROUTINE                         */
*/*FREECELL:E ENTRY TO FREECELL SUBROUTINE                           */
*/*         N INPUT- R1= SDWA@, R2= CELL@ OR ZERO                    */
*/*         D (YES,%RETN2,NO,) NON-ZERO CELL ADDRESS ?               */
*/*         P SET UP REGISTERS FOR IEAVEADV                          */
*/*         S IEAVEADV: VERIFY CELL STORAGE                          */
*/*         D (YES,,NO,%RETN2) STORAGE VALID ?                       */
*/*         P SET UP REGISTERS FOR ILRGMA                            */
*/*         L ILRGMA: FREE WORKAREA CELL                             */
*/*%RETN2:  R RETURN TO CALLER                                       */
*/*FREECELL: END                                                     */
*                                                                  0237
*FREECELL:                                                         0237
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* FREE CELL SUBROUTINE          */
FREECELL DS    0H                                                  0238
*   RFY                                                            0238
*    (R0,                                                          0238
*     R1,                                                          0238
*     R14,                                                         0238
*     CELLADDR) RSTD;                                              0238
*   SAV2R14=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,SAV2R14(,SRBDREG)                               0239
*   RFY                                                            0240
*     R14 UNRSTD;                                                  0240
*   IF CELLADDR^=ZERO THEN          /* CELL ADDRESS WAS PASSED ?     */
         LTR   CELLADDR,CELLADDR                                   0241
         BZ    @RF00241                                            0241
*     DO;                           /* YES - PROCESS CELL            */
*       RFY                                                        0243
*         RTCODE RSTD;                                             0243
*       R0=CELLGTH;                 /* LENGTH OF AREA TO VERIFY      */
         LA    R0,256                                              0244
*       CALL IEAVEADV;              /* VERIFY STORAGE ADDRESS        */
         L     @15,@CV02106                                        0245
         BALR  @14,@15                                             0245
*       IF RTCODE=SUCCESS THEN      /* STORAGE VALID ?               */
         LTR   RTCODE,RTCODE                                       0246
         BNZ   @RF00246                                            0246
*         DO;                       /* YES- FREE THE CELL            */
*           ASMVTPTR=SAVASMVT;      /* DESTROYED BY VERIFICATION     */
         L     ASMVTPTR,SAVASMVT(,SRBDREG)                         0248
*           R1=CELLADDR;            /* INPUT REGISTER FOR ILRGMA     */
         LR    R1,CELLADDR                                         0249
*                                                                  0250
*           /*********************************************************/
*           /*                                                       */
*           /* BEGIN ILRGMA MACRO EXPANSION                          */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0250
*           DO;                     /* ILRGMA FREE                 0250
*                                      CELL(BWK)WORKREGS(R6,R7)      */
*             DECLARE               /* ASMVT VECTOR TO ILRPEX        */
*               ILRPEX ENTRY BASED(ASMPEX) VALRG(0);               0251
*             DECLARE               /* MAP FOR CELL CONTROL WORDS    */
*               1 GMACELL BASED BDY(WORD),                         0252
*                2 GMANEXT PTR(31); /* PTR NEXT FREE CELL            */
*             RESPECIFY                                            0253
*              (R0,                                                0253
*               R1,                                                0253
*               R6,                                                0253
*               R7,                                                0253
*               R14,                                               0253
*               R15) RESTRICTED;                                   0253
*             RESPECIFY                                            0254
*               ASMPOOLS BASED(R6);                                0254
*             RESPECIFY                                            0255
*               GMACELL BASED(R1);                                 0255
*             R6=ADDR(ASMBWKPC);                                   0256
         LA    R6,ASMBWKPC(,ASMVTPTR)                              0256
*             R14=ASMCPAVL;                                        0257
         L     R14,ASMCPAVL(,R6)                                   0257
*GMA00052:                                                         0258
*             GMANEXT=R14;          /* PUT ADDR CURRENT FIRST IN   0258
*                                      INPUT CELL                    */
GMA00052 ST    R14,GMANEXT(,R1)                                    0258
*             CS(R14,R1,ASMCPAVL);  /* ADD INPUT CELL TO POOL        */
         CS    R14,@01,ASMCPAVL(R6)                                0259
*             BC(7,GMA00052);                                      0260
         BC    7,GMA00052                                          0260
*             RESPECIFY                                            0261
*              (R0,                                                0261
*               R1,                                                0261
*               R6,                                                0261
*               R7,                                                0261
*               R14,                                               0261
*               R15) UNRESTRICTED;                                 0261
*           END;                    /* ILRGMA FREE                 0262
*                                      CELL(BWK)WORKREGS(R6,R7)      */
*                                                                  0262
*           /*********************************************************/
*           /*                                                       */
*           /* END ILRGMA MACRO EXPANSION                            */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0263
*         END;                      /* VALID STORAGE ADDRESS         */
*       RFY                                                        0264
*         RTCODE UNRSTD;                                           0264
@RF00246 DS    0H                                                  0265
*     END;                          /* NON ZERO CELL ADDRESS         */
*   RFY                                                            0266
*     R14 RSTD;                                                    0266
@RF00241 DS    0H                                                  0267
*   R14=SAV2R14;                    /* RESTORE RETURN ADDRESS        */
         L     R14,SAV2R14(,SRBDREG)                               0267
*   RFY                                                            0268
*    (R0,                                                          0268
*     R1,                                                          0268
*     R14,                                                         0268
*     CELLADDR) UNRSTD;                                            0268
*   END FREECELL;                                                  0269
@EL00002 DS    0H                                                  0269
@EF00002 DS    0H                                                  0269
@ER00002 BR    @14                                                 0269
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00P PTR(31) REG(0),                                       0270
*     GPR01P PTR(31) REG(1),                                       0270
*     GPR14P PTR(31) REG(14),                                      0270
*     GPR15P PTR(31) REG(15);                                      0270
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0271
*     I031F FIXED(31) BASED,                                       0271
*     I031P PTR(31) BASED,                                         0271
*     I015F FIXED(15) BASED,                                       0271
*     I015P PTR(15) BASED,                                         0271
*     I008P PTR(8) BASED,                                          0271
*     I001C CHAR(1) BASED;                                         0271
*   END ILRSRB01                                                   0272
*                                                                  0272
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (ILRACE  )                                       */
*/*%INCLUDE SYSLIB  (ILRAIA  )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (ILRASMHD)                                       */
*/*%INCLUDE SYSLIB  (ILRASMVT)                                       */
*/*%INCLUDE SYSLIB  (ILRASPCT)                                       */
*/*%INCLUDE SYSLIB  (ILRATA  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (ILREPATH)                                       */
*/*%INCLUDE SYSLIB  (ILRLGE  )                                       */
*/*%INCLUDE SYSLIB  (ILRPART )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHARSMHD)                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (IHASRB  )                                       */
*                                                                  0272
*       ;                                                          0272
@DATA    DS    0H
@CH00398 DC    H'24'
@DATD    DSECT
         DS    0F
ILRSRB01 CSECT
         DS    0F
@DATD    DSECT
         DS    0D
@ENDDATD EQU   *
ILRSRB01 CSECT
         NOPR  ((@ENDDATD-@DATD)*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV02106 DC    V(IEAVEADV)
@CV02107 DC    V(ILRCQIOE)
@CV02108 DC    V(ILRVAIAQ)
@CV02109 DC    V(ILRVACEQ)
@CV02110 DC    V(ILRVLPRQ)
@CV02111 DC    V(ILRVASGQ)
@CV02112 DC    V(ILRVAIAC)
         DS    0D
@CC02084 DC    C'ILRSRBC ILRSRBC ILRSRB01'
@CC02082 DC    C'ILRQIOE '
@CB02080 DC    X'C0D000'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
ACEPTR   EQU   @05
AIAPTR   EQU   @09
ASMVTPTR EQU   @03
ATAPTR   EQU   @04
EPAPTR   EQU   @05
LGEPTR   EQU   @00
PARTPTR  EQU   @06
RSMHDPTR EQU   @02
SDWAPTR  EQU   @01
SRBPTR   EQU   @01
R0       EQU   @00
VERFREG  EQU   @00
R1       EQU   @01
CELLADDR EQU   @02
R5       EQU   @05
COMPREG  EQU   @05
TRMCODE  EQU   @05
R6       EQU   @06
TRMASID  EQU   @06
R7       EQU   @07
SRBDREG  EQU   @08
QIOEDREG EQU   @09
SAVLAST  EQU   @09
BASEREG  EQU   @10
R11      EQU   @11
SAREG    EQU   @13
R14      EQU   @14
R15      EQU   @15
RTCODE   EQU   @15
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR14P   EQU   @14
GPR15P   EQU   @15
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
ACE      EQU   0
ACEOP    EQU   ACE+8
ACEFLG1  EQU   ACE+9
ACEFLG3  EQU   ACE+11
ACELGE   EQU   ACE+12
ACELGN   EQU   ACE+16
ACERPN   EQU   ACELGN+4
ACETLPME EQU   ACERPN
ACESYM   EQU   ACE+24
ACESRCID EQU   ACESYM
ACESRBWK EQU   ACE+36
AIA      EQU   0
AIAFLG1  EQU   AIA+9
AIAWRITE EQU   AIAFLG1
AIAFLG2  EQU   AIA+10
AIAPRIER EQU   AIAFLG2
AIABADID EQU   AIAFLG2
AIAFLG3  EQU   AIA+11
AIAPRINO EQU   AIAFLG3
AIANXAIA EQU   AIA+12
AIAID    EQU   AIA+16
AIALPID  EQU   AIAID
AIALGID  EQU   AIALPID
AIALSID  EQU   AIALGID
AIASSID  EQU   AIALSID+1
AIARPN   EQU   AIALPID+4
AIALSID2 EQU   AIARPN
AIALPMEP EQU   AIALSID2
AIAGRPSZ EQU   AIA+24
AIALGE   EQU   AIAGRPSZ
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBASID EQU   ASCB+36
ASCBRSM  EQU   ASCB+52
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
ASMVT    EQU   0
ASMFLAG1 EQU   ASMVT
ASMFLAG2 EQU   ASMVT+1
ASMPART  EQU   ASMVT+8
ASMSTAGQ EQU   ASMVT+32
ASMSTAGL EQU   ASMSTAGQ+4
ASMPCCWQ EQU   ASMVT+64
ASMLSAI  EQU   ASMVT+144
ASMGOSQS EQU   ASMVT+152
ASMPEX   EQU   ASMVT+224
ASMBWKPC EQU   ASMVT+312
ASMWKSA1 EQU   ASMVT+368
ASMWKSA2 EQU   ASMVT+448
ASMWKSA3 EQU   ASMVT+528
ASMWKSA4 EQU   ASMVT+608
ASMWKSA5 EQU   ASMVT+688
ASMPOOLS EQU   0
ASMCPAVQ EQU   ASMPOOLS+8
ASMCPAVL EQU   ASMCPAVQ
ASMCPRSQ EQU   ASMPOOLS+16
ASPCT    EQU   0
ASPHDR   EQU   ASPCT
ASPBKEY  EQU   ASPHDR+8
ASPLGE   EQU   ASPHDR+24
ASPFLAG  EQU   ASPHDR+28
ASPEXTSN EQU   0
ASPEHDR  EQU   ASPEXTSN
ASPEXKEY EQU   ASPEHDR+8
ASPSECTA EQU   ASPEXTSN+64
ASPLPME  EQU   0
ASPLPFLG EQU   ASPLPME
ASPLVALD EQU   ASPLPFLG
ASPLOPIN EQU   ASPLPFLG
ASPVLSID EQU   ASPLPME+1
ATA      EQU   0
ATAMODID EQU   ATA
ATASFLGS EQU   ATA+1
ATAQIOE  EQU   ATASFLGS
ATARFLGS EQU   ATA+4
ATARCRSN EQU   ATA+6
ATACLEAR EQU   ATA+8
ATAAIACE EQU   ATACLEAR
ATAAIAQ  EQU   ATACLEAR+4
ATAACEQ  EQU   ATACLEAR+8
ATAEPATH EQU   ATACLEAR+12
CVTMAP   EQU   0
CVTBTERM EQU   CVTMAP+52
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
EPATH    EQU   0
EPAVSAM  EQU   EPATH
EPAOWKA  EQU   EPAVSAM
EPAVWKA  EQU   EPAVSAM+4
EPATMWKA EQU   EPAVWKA
EPASWKA  EQU   EPATMWKA
EPAAASP  EQU   EPAVSAM+8
EPABASP  EQU   EPAVSAM+12
EPARASP  EQU   EPAVSAM+16
EPARTYRG EQU   EPAVSAM+20
EPABKSLT EQU   EPARTYRG
EPAFLAG1 EQU   EPAVSAM+24
EPAGRPOP EQU   EPAFLAG1
EPAFLAG2 EQU   EPAVSAM+25
LGE      EQU   0
LGEPROCQ EQU   LGE
LGEFLAG1 EQU   LGE+8
LGEWRKPD EQU   LGEFLAG1
LGEGRINP EQU   LGEFLAG1
LGEASPCT EQU   LGE+12
LGENEXT  EQU   LGE+16
PART     EQU   0
PARTHDR  EQU   PART
PARTAIAE EQU   PARTHDR+12
PARTTPAR EQU   PARTHDR+24
PARTCOMQ EQU   PARTHDR+48
PARTSPLQ EQU   PARTHDR+56
PARTDUPQ EQU   PARTHDR+64
PARTLOCQ EQU   PARTHDR+72
PARTENT  EQU   0
PARELKUP EQU   PARTENT+4
PARELKFL EQU   PARELKUP
PARETYPE EQU   PARTENT+8
PAREFLG1 EQU   PARTENT+9
RSMHD    EQU   0
RSMFLG1  EQU   RSMHD+12
RSMQS    EQU   RSMHD+20
RSMLFQ   EQU   RSMQS
RSMLSQA  EQU   RSMQS+4
RSMLIOQ  EQU   RSMQS+8
RSMASMHD EQU   RSMHD+40
SDWA     EQU   0
SDWAPARM EQU   SDWA
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWACMPC EQU   SDWAABCC+1
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAERRD EQU   SDWAFLGS+3
SDWAIOFS EQU   SDWA+238
SDWARTYA EQU   SDWA+240
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWARCDE EQU   SDWAPARQ
SDWAACF2 EQU   SDWAPARQ+1
SDWARCRD EQU   SDWAACF2
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWAAPLW EQU   SDWALKWS+16
SDWARECP EQU   SDWA+292
SDWACSCT EQU   SDWARECP+8
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
SDWAURAL EQU   SDWARA+3
SDWAVRA  EQU   SDWARA+4
SRBSECT  EQU   0
SRB      EQU   SRBSECT
SRBFLNK  EQU   SRB+4
SRBFLC   EQU   SRB+12
DATAMAP  EQU   0
SAVER14  EQU   DATAMAP+92
SAVBASE  EQU   DATAMAP+96
SAV2R14  EQU   SAVBASE
REGSAVE  EQU   DATAMAP+100
SAVRSMHD EQU   REGSAVE+4
SAVASMVT EQU   REGSAVE+8
WRKAREA  EQU   DATAMAP+116
SAVAREA  EQU   WRKAREA
RECSDWA  EQU   0
FRRWORKA EQU   0
NXSEQIN  EQU   0
I256C    EQU   0
GMACELL  EQU   0
GMANEXT  EQU   GMACELL
ILRPEX   EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
ASCBPTR  EQU   PSAAOLD
DUMMY    EQU   RSMASMHD
ASMHD    EQU   DUMMY
ASHFLAG1 EQU   ASMHD
ASHFLAG2 EQU   ASMHD+1
ASHSCHED EQU   ASHFLAG2
ASHIOCNT EQU   ASMHD+8
ASHLOCK  EQU   ASMHD+20
ASHVSRBP EQU   ASMHD+24
ASHLGEQ  EQU   ASMHD+28
ASM1WKSV EQU   ASMWKSA1
ASM1RGSV EQU   ASM1WKSV
ASM1WRKA EQU   ASM1WKSV+60
ASM2WKSV EQU   ASMWKSA2
ASM2WRKA EQU   ASM2WKSV+52
ASM2FLGS EQU   ASM2WRKA+12
ASM3WKSV EQU   ASMWKSA3
ASM4WKSV EQU   ASMWKSA4
ASM4RGSV EQU   ASM4WKSV
ASM5WKSV EQU   ASMWKSA5
ASM5RGSV EQU   ASM5WKSV
ASPASST  EQU   ASPSECTA
CVTPTR   EQU   FLCCVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTLSMQ  EQU   CVTS01+268
CVTASMVT EQU   CVTS01+356
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
PSARSVTE EQU   PSARSVT
ASPLPMEE EQU   ASPSECTA
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
ASPASSTE EQU   ASPASST
ASM5FLGS EQU   ASM5WKSV+64
ASM5AIA  EQU   ASM5WKSV+60
ASM5GCTR EQU   ASM5WKSV+56
ASM5SR14 EQU   ASM5WKSV+52
@NM00008 EQU   ASM5RGSV+4
ASM5RG2  EQU   ASM5RGSV
@NM00007 EQU   ASM4RGSV+4
ASM4RG2  EQU   ASM4RGSV
ASM3SR13 EQU   ASM3WKSV+28
ASM3R14B EQU   ASM3WKSV+24
ASM3R14A EQU   ASM3WKSV+20
ASM3GRPA EQU   ASM3WKSV+16
ASM3TMPA EQU   ASM3WKSV+12
ASM3PIOP EQU   ASM3WKSV+8
ASM3GENQ EQU   ASM3WKSV+4
ASM3SWPQ EQU   ASM3WKSV
ASM2SR14 EQU   ASM2WRKA+16
@NM00006 EQU   ASM2WRKA+13
ASM2WFLG EQU   ASM2FLGS
ASM2RFLG EQU   ASM2FLGS
ASM2DUPQ EQU   ASM2WRKA+8
ASM2CAQ  EQU   ASM2WRKA+4
ASM2PAQ  EQU   ASM2WRKA
ASM2RGSV EQU   ASM2WKSV
ASM1NXTA EQU   ASM1WRKA+4
ASM1ASCB EQU   ASM1WRKA
ASM1RG15 EQU   ASM1RGSV+56
@NM00005 EQU   ASM1RGSV+4
ASM1RG1  EQU   ASM1RGSV
ASHCAPQ  EQU   ASMHD+16
ASHSWAPQ EQU   ASMHD+12
ASHBKSLT EQU   ASMHD+4
ASHSWPCT EQU   ASMHD+2
ASHRSV12 EQU   ASHFLAG2
ASHRSV11 EQU   ASHFLAG2
ASHRSV10 EQU   ASHFLAG2
ASHRSV9  EQU   ASHFLAG2
ASHRSV8  EQU   ASHFLAG2
ASHRSV7  EQU   ASHFLAG2
ASHRSV13 EQU   ASHFLAG2
ASHRSV6  EQU   ASHFLAG1
ASHRSV5  EQU   ASHFLAG1
ASHRSV4  EQU   ASHFLAG1
ASHRSV3  EQU   ASHFLAG1
ASHRSV2  EQU   ASHFLAG1
ASHPERME EQU   ASHFLAG1
ASHCAPER EQU   ASHFLAG1
ASHSWPOT EQU   ASHFLAG1
@NM00104 EQU   WRKAREA+72
SAVATA   EQU   REGSAVE+12
SAVSDWA  EQU   REGSAVE
VERAREA  EQU   DATAMAP
@NM00103 EQU   SRB+40
@NM00102 EQU   SRB+38
SRBPRIOR EQU   SRB+37
SRBPKF   EQU   SRB+36
SRBSAVE  EQU   SRB+32
SRBPARM  EQU   SRB+28
SRBRMTR  EQU   SRB+24
SRBEP    EQU   SRB+20
SRBPTCB  EQU   SRBFLC+4
SRBPASID EQU   SRBFLC+2
SRBCPAFF EQU   SRBFLC
SRBASCB  EQU   SRB+8
SRBID    EQU   SRB
@NM00101 EQU   SDWA+512
@NM00100 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
@NM00099 EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00098 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00097 EQU   SDWADDAT+3
@NM00096 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00095 EQU   SDWADDAT+1
@NM00094 EQU   SDWASDAT
SDWAQQS  EQU   SDWASDAT
SDWACBS  EQU   SDWASDAT
SDWAGTF  EQU   SDWASDAT
SDWASWA  EQU   SDWASDAT
SDWALSQA EQU   SDWASDAT
SDWASQA  EQU   SDWASDAT
SDWANUC  EQU   SDWASDAT
@NM00093 EQU   SDWADUMP+2
@NM00092 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00091 EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWAREXN EQU   SDWARECP+16
SDWAMODN EQU   SDWARECP
@NM00090 EQU   SDWA+290
SDWAASID EQU   SDWA+288
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00089 EQU   SDWAACF3
@NM00088 EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
@NM00087 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00086 EQU   SDWAACF2
SDWALCPU EQU   SDWACPUA+2
@NM00085 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
@NM00084 EQU   SDWA+239
@NM00083 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
@NM00082 EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
SDWACLUP EQU   SDWAERRD
@NM00081 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAPERC EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00080 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWAMCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00079 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00078 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00077 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00076 EQU   SDWAINC2
@NM00075 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00074 EQU   SDWAILC2
@NM00073 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00072 EQU   SDWANXT2
@NM00071 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00070 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00069 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00068 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00067 EQU   SDWAINC1
@NM00066 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00065 EQU   SDWAILC1
@NM00064 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00063 EQU   SDWANXT1
@NM00062 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00061 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00060 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00059 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00058 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00057 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00056 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
@NM00055 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00054 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAREQ  EQU   SDWACMPF
RSMFOEQ  EQU   RSMHD+36
RSMLIOQL EQU   RSMLIOQ+4
RSMLIOQF EQU   RSMLIOQ
RSMLSQAL EQU   RSMLSQA+2
RSMLSQAF EQU   RSMLSQA
RSMLFQL  EQU   RSMLFQ+2
RSMLFQF  EQU   RSMLFQ
RSMRSV2  EQU   RSMHD+16
RSMCNTFX EQU   RSMHD+14
RSMRSV1  EQU   RSMHD+13
@NM00053 EQU   RSMFLG1
RSMFAIL  EQU   RSMFLG1
RSMGFADD EQU   RSMFLG1
RSMCPNC  EQU   RSMFLG1
RSMCPNU  EQU   RSMFLG1
RSMGFAD  EQU   RSMFLG1
RSMIOCPC EQU   RSMFLG1
RSMIOCPU EQU   RSMFLG1
RSMASCB  EQU   RSMHD+8
RSMSPCT  EQU   RSMHD+4
RSMVSTO  EQU   RSMHD
@NM00028 EQU   PARTENT+62
PARELCYL EQU   PARTENT+60
PARERQTM EQU   PARTENT+56
PAREWTQE EQU   PARTENT+52
PARENODE EQU   PARTENT+48
PAREUCBP EQU   PARTENT+44
PAREEDBP EQU   PARTENT+40
PAREPCTP EQU   PARTENT+36
PAREPATP EQU   PARTENT+32
PAREIORB EQU   PARTENT+28
PARERRCT EQU   PARTENT+24
PARESLTA EQU   PARTENT+20
PARESZSL EQU   PARTENT+16
PAREIOEQ EQU   PARTENT+12
PARENN   EQU   PARTENT+10
@NM00027 EQU   PAREFLG1
PAREINCP EQU   PAREFLG1
PAREDSBD EQU   PAREFLG1
PARENUSE EQU   PAREFLG1
@NM00026 EQU   PARETYPE
PARELOCL EQU   PARETYPE
PAREDPLX EQU   PARETYPE
PARECOMM EQU   PARETYPE
PAREPLPA EQU   PARETYPE
PARECPCT EQU   PARELKUP+2
PAREIORN EQU   PARELKUP+1
@NM00025 EQU   PARELKFL
PAREFSIP EQU   PARELKFL
PAREPARE EQU   PARTENT
PARTENTS EQU   PART+80
PARTLOCL EQU   PARTLOCQ+4
PARTLOCF EQU   PARTLOCQ
PARTDUPL EQU   PARTDUPQ+4
PARTDUPF EQU   PARTDUPQ
PARTSPLL EQU   PARTSPLQ+4
PARTSPLF EQU   PARTSPLQ
PARTCOML EQU   PARTCOMQ+4
PARTCOMF EQU   PARTCOMQ
PARTLOCK EQU   PARTHDR+44
PARTLKUP EQU   PARTHDR+40
@NM00024 EQU   PARTHDR+34
PARTLCNT EQU   PARTHDR+32
PARTPCTQ EQU   PARTHDR+28
PARTDSNL EQU   PARTTPAR
PARTCIR2 EQU   PARTHDR+20
PARTCIR1 EQU   PARTHDR+16
PARTEUSE EQU   PARTHDR+8
PARTSIZE EQU   PARTHDR+4
PARTIDEN EQU   PARTHDR
@NM00023 EQU   LGE+24
LGELGID  EQU   LGE+20
LGESLTCT EQU   LGE+10
@NM00022 EQU   LGE+9
LGERSV5  EQU   LGEFLAG1
LGERSV4  EQU   LGEFLAG1
LGERSV3  EQU   LGEFLAG1
LGERSV2  EQU   LGEFLAG1
LGESAVRQ EQU   LGEFLAG1
LGERELLG EQU   LGEFLAG1
LGEPROCL EQU   LGEPROCQ+4
LGEPROCF EQU   LGEPROCQ
@NM00021 EQU   EPAVSAM+50
EPARSIZE EQU   EPAVSAM+48
EPARBASP EQU   EPAVSAM+44
EPAACE   EQU   EPAVSAM+40
EPASRB   EQU   EPAVSAM+36
EPALGEP  EQU   EPAVSAM+32
EPALGVTP EQU   EPAVSAM+28
EPALSIZE EQU   EPAVSAM+26
@NM00020 EQU   EPAFLAG2
EPARECUR EQU   EPAFLAG2
EPATMI   EQU   EPAFLAG2
EPAMAST  EQU   EPAFLAG2
EPABUILD EQU   EPAFLAG2
EPACOLD  EQU   EPAFLAG2
EPAWARM  EQU   EPAFLAG2
EPATMXIT EQU   EPAFLAG2
EPARPLB  EQU   EPAFLAG1
EPAUNSAV EQU   EPAFLAG1
EPAASGN  EQU   EPAFLAG1
EPAACASR EQU   EPAFLAG1
EPAACT   EQU   EPAGRPOP
EPASAVE  EQU   EPAGRPOP
EPARLG   EQU   EPAGRPOP
EPAVSAMI EQU   EPAFLAG1
EPATMISV EQU   EPABKSLT
EPATMACB EQU   EPARASP
EPATMIBA EQU   EPABASP
EPADSLST EQU   EPAAASP
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00019 EQU   CVTFIX+248
@NM00018 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
ATARCODE EQU   ATA+7
ATARCRF8 EQU   ATARCRSN
ATARCRF7 EQU   ATARCRSN
ATARCRF6 EQU   ATARCRSN
ATARCRF5 EQU   ATARCRSN
ATARCRF4 EQU   ATARCRSN
ATARCRF3 EQU   ATARCRSN
ATARCRF2 EQU   ATARCRSN
ATARCRF1 EQU   ATARCRSN
ATARSV2  EQU   ATARFLGS
ATABADPK EQU   ATARFLGS
ATASCCWP EQU   ATARFLGS
ATASGNST EQU   ATARFLGS
ATARSV1  EQU   ATASFLGS+1
ATASRT   EQU   ATASFLGS+1
ATASWPDR EQU   ATASFLGS+1
ATATRPAG EQU   ATASFLGS+1
ATASWAP  EQU   ATASFLGS+1
ATAPAGCM EQU   ATASFLGS
ATAPAGIO EQU   ATASFLGS
ATAPOS   EQU   ATASFLGS
ATAPCOMP EQU   ATASFLGS
ATAVIOCM EQU   ATASFLGS
ATASCOMP EQU   ATASFLGS
ATASLSQA EQU   ATASFLGS
ASPSLOT  EQU   ASPVLSID+1
ASPPRTNN EQU   ASPVLSID
@NM00017 EQU   ASPLPFLG
ASPLSVRP EQU   ASPLPFLG
ASPLIOER EQU   ASPLPFLG
ASPLSAVE EQU   ASPLPFLG
@NM00016 EQU   ASPEXTSN+1088
@NM00015 EQU   ASPEHDR+24
ASPASSTI EQU   ASPEHDR+22
@NM00014 EQU   ASPEHDR+21
ASPASSTN EQU   ASPEHDR+20
ASPEXTNM EQU   ASPEXKEY+8
ASPESSYM EQU   ASPEXKEY
@NM00013 EQU   ASPEHDR+4
ASPEIDNT EQU   ASPEHDR
@NM00012 EQU   ASPCT+1088
ASPLPMES EQU   ASPCT+64
ASPASSTP EQU   ASPCT+48
ASPAEXCT EQU   ASPHDR+46
ASPLEXCT EQU   ASPHDR+44
ASPSAVCT EQU   ASPHDR+40
ASPBKSLT EQU   ASPHDR+36
ASPMAXPN EQU   ASPHDR+32
@NM00011 EQU   ASPHDR+29
@NM00010 EQU   ASPFLAG
ASPSAVRP EQU   ASPFLAG
ASPSAVED EQU   ASPFLAG
ASPASCB  EQU   ASPHDR+20
@NM00009 EQU   ASPBKEY+8
ASPSSYM  EQU   ASPBKEY
ASPLGID  EQU   ASPHDR+4
ASPIDENT EQU   ASPHDR
ASMCPRES EQU   ASMCPRSQ+4
ASMCPTAK EQU   ASMCPRSQ
ASMCPCNT EQU   ASMCPAVQ+4
ASMCPEXT EQU   ASMPOOLS+6
ASMCPSIZ EQU   ASMPOOLS+4
ASMCPID  EQU   ASMPOOLS
ASMRSV12 EQU   ASMVT+1000
ASMSAVE  EQU   ASMVT+928
ASMWKSA7 EQU   ASMVT+848
ASMWKSA6 EQU   ASMVT+768
ASMACEPC EQU   ASMVT+344
ASMSWKPC EQU   ASMVT+328
ASMIOEPC EQU   ASMVT+296
ASMRSV10 EQU   ASMVT+280
ASMPVACE EQU   ASMVT+276
ASMPIOFR EQU   ASMVT+272
ASMPVACQ EQU   ASMVT+268
ASMPMSGS EQU   ASMVT+264
ASMPMSG0 EQU   ASMVT+260
ASMPFRLG EQU   ASMVT+256
ASMPRLG  EQU   ASMVT+252
ASMPACT  EQU   ASMVT+248
ASMPSAV  EQU   ASMVT+244
ASMPCMP  EQU   ASMVT+240
ASMPCMPA EQU   ASMVT+236
ASMPCMPN EQU   ASMVT+232
ASMPCMPD EQU   ASMVT+228
ASMVRMTR EQU   ASMVT+220
ASMPSRBC EQU   ASMVT+216
ASMPSRMT EQU   ASMVT+212
ASMPSWPD EQU   ASMVT+208
ASMPTM   EQU   ASMVT+204
ASMPFRSW EQU   ASMVT+200
ASMPFRSL EQU   ASMVT+196
ASMPQIOE EQU   ASMVT+192
ASMRSV8  EQU   ASMVT+184
ASMTASCB EQU   ASMVT+180
ASMRLGWQ EQU   ASMVT+176
ASMRLGRQ EQU   ASMVT+172
ASMTMECB EQU   ASMVT+168
ASMTCBPT EQU   ASMVT+164
ASMREQCT EQU   ASMVT+160
ASMGOSWK EQU   ASMGOSQS+4
ASMGOSWT EQU   ASMGOSQS
ASMLSAIH EQU   ASMLSAI+4
ASMLSAIL EQU   ASMLSAI
ASMCINV  EQU   ASMVT+140
ASMSTGXA EQU   ASMVT+136
ASMLGVT  EQU   ASMVT+132
ASMSLOTV EQU   ASMVT+128
ASMERRS  EQU   ASMVT+124
ASMNVSC  EQU   ASMVT+120
ASMVSC   EQU   ASMVT+116
ASMSLOTS EQU   ASMVT+112
ASMBKSLT EQU   ASMVT+108
ASMRSV7  EQU   ASMVT+92
ASMPSRB  EQU   ASMVT+88
ASMSRBCT EQU   ASMVT+84
ASMIOCNT EQU   ASMVT+80
ASMBURST EQU   ASMVT+76
ASMPCCWN EQU   ASMVT+72
ASMPCCWC EQU   ASMPCCWQ+4
ASMPCCWA EQU   ASMPCCWQ
ASMRSV6  EQU   ASMVT+48
ASMIORQC EQU   ASMVT+44
ASMIORQR EQU   ASMVT+40
ASMSTAGF EQU   ASMSTAGQ
ASMRSV5  EQU   ASMVT+28
ASMMSGBF EQU   ASMVT+24
ASMEREC  EQU   ASMVT+20
ASMTRPAG EQU   ASMVT+16
ASMGOS   EQU   ASMVT+12
ASMSART  EQU   ASMVT+4
ASMRSV4  EQU   ASMVT+2
ASMWARM  EQU   ASMFLAG2
ASMQUICK EQU   ASMFLAG2
ASMNOTPT EQU   ASMFLAG2
ASMNOTMR EQU   ASMFLAG2
ASMNOSAV EQU   ASMFLAG2
ASMCALLQ EQU   ASMFLAG2
ASMPLPAS EQU   ASMFLAG1
ASMCOMMF EQU   ASMFLAG1
ASMPLPAF EQU   ASMFLAG1
ASMNODPX EQU   ASMFLAG1
ASMRSV1  EQU   ASMFLAG1
ASMNOLCL EQU   ASMFLAG1
ASMNOCWQ EQU   ASMFLAG1
ASMDUPLX EQU   ASMFLAG1
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
AIADPXCT EQU   AIALGE
AIACEPTR EQU   AIALPMEP
AIASLOT  EQU   AIASSID+1
@NM00004 EQU   AIASSID
@NM00003 EQU   AIALSID
AIARCSN  EQU   AIANXAIA+2
AIACYL   EQU   AIANXAIA
AIARSV9  EQU   AIAFLG3
AIARSV8  EQU   AIAFLG3
AIARSV7  EQU   AIAFLG3
AIALPMEC EQU   AIAFLG3
AIARSV6  EQU   AIAFLG3
AIATRPSP EQU   AIAFLG3
AIARSV5  EQU   AIAFLG3
AIAERROR EQU   AIAFLG2
AIASECER EQU   AIAFLG2
AIARSV4  EQU   AIAFLG2
AIAIORTY EQU   AIAFLG2
AIATERMR EQU   AIAFLG2
AIAFRAUX EQU   AIAFLG2
AIARSV1  EQU   AIAFLG1
AIASWPFX EQU   AIAFLG1
AIAPAGDS EQU   AIAFLG1
AIALSQA  EQU   AIAFLG1
AIADUPLX EQU   AIAFLG1
AIAVIO   EQU   AIAFLG1
AIAPRIV  EQU   AIAFLG1
AIAOP    EQU   AIA+8
AIABQPA  EQU   AIA+4
AIAFQPA  EQU   AIA
@NM00002 EQU   ACE+40
ACEECB   EQU   ACE+32
ACEAIAPT EQU   ACESYM+4
ACEVLSID EQU   ACESRCID+1
@NM00001 EQU   ACESRCID
ACELGID  EQU   ACELGN
ACERSV10 EQU   ACEFLG3
ACERSV9  EQU   ACEFLG3
ACERSV8  EQU   ACEFLG3
ACELPMEC EQU   ACEFLG3
ACERSV7  EQU   ACEFLG3
ACERSV6  EQU   ACEFLG3
ACEPRINO EQU   ACEFLG3
ACEGRPRQ EQU   ACEFLG3
ACEFLG2  EQU   ACE+10
ACERSV5  EQU   ACEFLG1
ACERSV4  EQU   ACEFLG1
ACERSV3  EQU   ACEFLG1
ACERSV2  EQU   ACEFLG1
ACENOACT EQU   ACEFLG1
ACEOVRID EQU   ACEFLG1
ACETRPWT EQU   ACEFLG1
ACEUSYM  EQU   ACEFLG1
ACEBQPA  EQU   ACE+4
ACEFQPA  EQU   ACE
@NM00052 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00051 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00050 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00049 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00048 EQU   FLCFSA
@NM00047 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00046 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00045 EQU   FLCIOA
@NM00044 EQU   FLCMCLA+15
@NM00043 EQU   FLCMCLA+14
@NM00042 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00041 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00040 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00039 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00038 EQU   FLCPER
@NM00037 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00036 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00035 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00034 EQU   FLCPIILC
@NM00033 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00032 EQU   FLCSVILC
@NM00031 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00030 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00029 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@ENDDATA EQU   *
         END   ILRSRB01,(C'PLS2057',0701,76114)
