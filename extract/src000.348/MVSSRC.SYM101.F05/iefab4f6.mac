IEFAB4F6 CSECT
* SU/4 MODULE MERGED BACK TO THE REL 037 BASE              @ZA28412*
* MODULE REWRITTEN FOR SU4                                     @ZM41392
********************************************************************
*                                                                  *
* MODULE NAME                      IEFAB4F6                        *
*                                                                  *
*        DESCRIPTIVE NAME          GET SPACE AND FREE SPACE SERVICE*
*                                                                  *
*        COPYRIGHT                 N/A                             *
*                                                                  *
*  STATUS - REL 037 PTF                                    @ZA28412*
*                                                                  *
* FUNCTION                                                         *
*        THIS MODULE PROVIDES THE CALLER WITH THE ABILITY TO       *
*        OBTAIN STORAGE FOR AUTOMATIC VARAIBLES AND SAVE AREAS.    *
*        THE USE IS RESTRICTED TO LIFO ALLOCATION  (LAST ALLOCATED *
*        IS THE FIRST FREED) REQUESTES.                            *
*                                                                  *
* ENTRY POINTS                                                     *
*        GSPACE  RETURNS AQUIRED STORAGE                           *
*        FSPACE FREES STORAGE OBTAINED BY REQUEST TO IEFAB4F6      *
*        GSPACE1  RESUME AFTER GETTING STORAGE                     *
*                                                                  *
* INPUT                                                            *
*        GSPACE                                                    *
*            R0 : SUBPOOL NUMBER (BYTE 0)                          *
*                 SIZE REQUIRED  (BYTES 1,2 AND 3)                 *
*            R1 : PTR INTO BUFFER (IF THERE WAS                    *
*                 ONE) OR ANY VALUE (IF THERE WAS NO LAST          *
*                 AREA)                                            *
*            R2-R13 : PRESERVED                                    *
*            R14 : RETURN ADDR                                     *
*            R15 : ADDR OF GSPACE                                  *
*        FSPACE                                                    *
*            R0 : PRESERVED                                        *
*            R1 : PTR TO AUTOMATIC AREA TO BE FREED                *
*            R2-R13 : PRESERVED                                    *
*            R14 : RETURN ADDR                                     *
*            R15 : ADDR OF FSPACE                                  *
*                                                                  *
* OUTPUT                                                           *
*        GSPACE                                                    *
*            R0 : N/A                                              *
*            R1 : PTR TO NEW AUTOMATIC AREA                        *
*            R2-R13 : SAME AS ON ENTRY                             *
*            R14 : N/A                                             *
*            R15 : N/A                                             *
*        FSPACE                                                    *
*            R0 : N/A                                              *
*            R1 : N/A                                              *
*            R2-R13 : SAME AS ON ENTRY                             *
*            R14 : N/A                                             *
*            R15 : N/A                                             *
*                                                                  *
* RESTRICTIONS                                                     *
*        R1 MUST NOT CONTAIN AN ADDR THAT WILL RESULT IN A FETCH   *
*        PROTECTION WHEN REFERENCED.                               *
*                                                                  *
* ERROR CONDITIONS                                                 *
*        OUT OF STORAGE WILL RESULT IN AN ABEND FROM GETMAIN.      *
* CHANGE ACTIVITY                                                  *
*        PTM VS43506                                       @ZM43506*
*        ZA28412                                           @ZA28412*
*                                                                  *
* DATA STRUCTURE                                                   *
*    +0K ×----------------×----------------×                       *
*        ×    BUFFTOP     ×   BUFFID       ×                       *
*        ×----------------×----------------×                       *
*        ×    NEXTSLOT    ×   BUFFSIZE     ×                       *
*        ×----------------×----------------×                       *
*        ×FLAG×           ×   NEXTBUFF     ×                       *
*        ×----------------×----------------×                       *
*        ×    RESERVED    ×   BUFFEND      ×                       *
*        ×----------------×----------------×                       *
*        ×    REGISTER SAVE AREA FOR       ×                       *
*        ×      GSPACE AND FSPACE          ×                       *
*        ×----------------×----------------×                       *
*        ×                                 ×                       *
*        ×                                 ×                       *
*        ×                                 ×                       *
*        ×                                 ×                       *
*        ×                                 ×                       *
*        ×     FREE SPACE                  ×                       *
*        ×                                 ×                       *
*        ×                                 ×                       *
*        ×                                 ×                       *
*        ×                                 ×                       *
*    +4K ×----------------×                ×                       *
*        ×    TOP POINTER ×                ×                       *
*        ×----------------×                ×                       *
*        ×                                 ×                       *
*        ×----------------×----------------×<---NEXTSLOT           *
*        ×                                 ×                       *
*        ×                                 ×                       *
*        ×                                 ×                       *
*        ×     ALLOCATED SPACE             ×                       *
*        ×                                 ×                       *
*        ×                                 ×                       *
*        ×                                 ×                       *
*        ×                                 ×                       *
*    +8K ×----------------×----------------×<---BUFFEND            *
*                                                                  *
********************************************************************
         EJECT
         ENTRY GSPACE
         ENTRY GSPACE1
         ENTRY FSPACE
         EJECT
********************************************************************
*                                                                  *
*        MAIN  ENTRY POINT TO ALLOCATE SPACE FOR A NEW             *
*        DSA.                                                      *
*              R0 CONTAINS THE LENGTH DESIRED AND THE SUBPOOL      *
*              R1 CONTAINS A PTR INTO AN OBTAINED BUFFER           *
*                                                                  *
********************************************************************
GSPACE   DS    0H
         USING *,15
         B     GQ0
         DC    CL8'IEFAB4F6'
GQ0      DS    0H
         CLM   R0,M0111,MAXSIZE+1  IS SIZE TOO BIG
         BH    NOTQUE                 YES, THEN START NEW QUEUE
*
         LTR   R1,R1               IS ADDR ZERO
         BZ    NOTQUE                 YES, THEN START NEW QUEUE
*
         N     R1,PAGERND          BACK UP PTR TO SLOT HEADER
         CLC   BUFFID(4,R1),IDSTRING IS IDENTIFING STRING PRESENT
         BNE   NOTQUE                 NO, THEN START NEW QUEUE
         L     R1,0(R1)            GET BACK PTR IN SLOT HEADER @ZM43506
*
         CLM   R0,M1000,SUBPOOL(R1) IS BUFFER IN RIGHT SUBPOOL
         BNE   NOTQUE                 NO, THEN START NEW QUEUE
*
         STM   R2,R5,REGS(R1)      SAVE IN BUFFER HEADER
         LR    R3,R0               ROUND DESIRED SIZE TO DBLWRD
         LA    R3,7(R3)
         N     R3,DBLWRD
*
         EJECT
********************************************************************
*                                                                  *
*        ALLOCATE A SLOT IN THE BUFFER AND ADJUST NEXT SLOT PTR    *
*                                                                  *
********************************************************************
GQ1      DS    0H
         L     R5,NEXTSLOT(R1)     GET NEXT AVAILIBLE SLOT
         SR    R5,R3               MOVE SLOT PTR UP BY SIZE OF ENTRY
         LA    R2,HDRLENG(R1)      PTR TO TOP OF ALLOCATABLE SPACE
         CR    R2,R5               IS THERE ENOUGH ROOM FOR ENTRY
         BH    NEWBUFF                NO, THEN GET ANOTHER BUFFER
*
         ST    R5,NEXTSLOT(R1)     SAVE TRAILER ADDR IN BUFFER HDR
*
         LR    R0,R5               SHUFFLE PTR FOR RESTORE
         LM    R2,R5,REGS(R1)      RESTORE USERS REGS
         LR    R1,R0               TRANSFER ADDR OF NEW STORAGE
         BR    14                  ANOTHER HAPPY USER
*
*
         EJECT
********************************************************************
*                                                                  *
*        R1 DOES NOT CONTAIN A POINTER TO A BUFFER, THEREFORE      *
*        A NEW BUFFER MUST BE GOT  AND THE HEADER INITIALIZED.     *
*        THE SIZE OF THE BUFFER IS EITHER THE DEFAULT OR           *
*        THE REQUESTED SIZE PLUS HDR SIZE ROUNDED UP TO 4K.        *
*        THE FLAG BYTE INDICATES THE TOP OF A BUFFER CHAIN.        *
*                                                                  *
********************************************************************
NOTQUE   DS    0H
         L     R1,HIGHBIT          SET HIGHBIT FOR GETMAIN
         OR    R1,R14              TRANSFER RETRUN ADDR
         LR    R14,R0              REMEMBER REQUESTED SIZE
         CLM   R14,M0111,MAXSIZE+1 IS REQUEST FOR LARGE BLOCK
         BH    GQ4                    YES, THEN LOAD SIZE INTO REG
         ICM   R0,M0111,DFLTSIZE+1 LOAD BUFFER SIZE INTO REG
         B     4(R1)               GO BACK FOR A GETMAIN
GQ4      DS    0H
         A     R0,LRGBKRND         SIZE PLUS OVERHEAD PLUS 4K-1
         N     R0,PAGERND          ROUND TO FOUR K
         B     4(R1)               GO BACK FOR A GETMAIN
*
         EJECT
********************************************************************
*                                                                  *
*        THIS  ENTRY POINT GETS CONTROL AFTER THE GETMAIN FOR      *
*        THE INITIAL BUFFER IN A CHAIN.                           *
*              R0 CONTAINS DESIRED LENGTH                         *
*              R1 CONTAINS PTR TO  GETMAINED STORAGE               *
*                                                                  *
********************************************************************
GSPACE1  DS    0H
         USING *,15                ESTABLISH ADDRESSABILITY
         L     R15,BASEADDR        TO MAIN ENTRY POINT
         USING IEFAB4F6,R15
*
         MVI   BUFFFLAG(R1),X'10'
         STM   R2,R5,REGS(R1)      SAVE USERS REGS
         LR    R3,R0
         CLM   R3,M0111,MAXSIZE+1  IS THIS A LARGE BLOCK
         BH    GQ5                    YES, THEN COMPUTE SIZE
*
         ICM   R0,M0111,DFLTSIZE+1 ALLOCATED IS DEFAULT
         B     GQ6
*
GQ5      DS    0H
         A     R0,LRGBKRND         ADD OVERHEAD PLUS 4K-1
         N     R0,PAGERND          ROUND TO FOUR K BOUNDRY
GQ6      DS    0H
         LA    R3,7(R3)            ROUND TO A DBLWRD
         N     R3,DBLWRD
         B     GQ2
*
         EJECT
********************************************************************
*                                                                  *
*        THIS  SECTION OBTAINS STORAGE FOR BUFFERS AFTER THE       *
*        INITIAL BUFFER.  THE FORWARD CHAIN POINTER (NEXTBUFF)     *
*        IS FILLED IN.                                            *
*                                                                  *
********************************************************************
NEWBUFF  DS    0H
         L     R4,NEXTBUFF(R1)     GET NEXT BUFFER PTR
         LTR   R4,R4               IS THIS PTR NULL
         BNZ   GQ3                    NO, THEN USE BUFFER OVER
*
         LR    R5,R1               SAVE PTR TO LAST BUFFER
         ICM   R0,M0111,DFLTSIZE+1
         LR    R2,R0               SUBPOOL AND SIZE REQUESTED
         GETMAIN R,LV=(0)
*
         BALR  R15,R0              RE ESTABLISH ADDRESSABILITY
         USING *,R15
         L     R15,BASEADDR
         USING IEFAB4F6,R15
*
         LR    R0,R2               SUBPOOL AND SIZE
         MVI   BUFFFLAG(R1),X'00'  TOP OF CHAIN FLAG = OFF
         ST    R1,NEXTBUFF(R5)     SAVE FORWARD CHAIN PTR
         MVC   REGS(16,R1),REGS(R5) MOVE REG SAVE AREA FROM LAST BUFFER
         EJECT
********************************************************************
*                                                                  *
*        THIS  SECTION INITAILIZES A NEW BUFFER HEADER.            *
*        THE BUFFER MAY BE THE INITIAL BUFFER OR A FOLLOWING       *
*        BUFFER.                                                   *
*                                                                  *
********************************************************************
GQ2      DS    0H
         L     R2,IDSTRING         GET IDENTIFING STRING
         ST    R2,BUFFID(R1)            SAVE IN HDR
         ST    R0,BUFFSIZE(R1)     SAVE SUBPOOL AND SIZE
         LR    R2,R0
         LA    R2,0(R1,R2)         COMPUTE END OF BUFFER ADDR
         LR    R4,R1               R4 POINTS TO SUCCESIVE 4 K BLOCKS
GQ7      ST    R1,0(R4)            SAVE PTR TO TOP OF BUFFER
         A     R4,FOURK            GET ADDR OF NEXT 4K BLOCK
         CR    R4,R2               HAVE WE REACHED END OF BUFFER
         BL    GQ7                    NO, THEN CONTINUE ON
         ST    R2,NEXTSLOT(R1)     SAVE PTR TO BOTTOM AS NEXT SLOT
         ST    R2,BUFFEND(R1)      SAVE PTR TO BOTTOM AS BUFFER END
         SLR   R4,R4               ZERO
         ST    R4,NEXTBUFF(R1)     SAVE NULL IN NEXT BUFFER POINTER
         B     GQ1
*
GQ3      DS    0H
         MVC   REGS(16,R4),REGS(R1) MOVE REG SAVE AREA FROM LAST BUFFER
         LR    R1,R4               SET NEW BUFFER PTR IN R1
         B     GQ1                 GO ALLOCATE STORAGE FROM BUFFER
*
         EJECT
********************************************************************
*                                                                  *
*        THIS  ENTRY POINT DEALLOCATES A DSA.                      *
*              R0 CONTAINS THE SIZE TO FREE                       *
*              R1 CONTAINS A POINTER INTO THE BUFFER               *
*                                                                  *
********************************************************************
FSPACE   DS    0H
         USING *,R15
         L     R15,BASEADDR        SET BASE REG TO TOP OF CSECT
         USING IEFAB4F6,R15
*
         LTR   R1,R1               IS PTR NULL
         BZR   R14                    NO, THEN FORGET IT AND RETURN
*
         N     R1,PAGERND          BACK OFF PTR TO SLOT HDR
         L     R1,0(R1)            GET BACK PTR IN SLOT HDR
         CLC   BUFFID(4,R1),IDSTRING IS IDENTIFING STRING PRESENT
         BNER  R14                    NO, THEN FORGET IT AND RETURN
*
         STM   R2,R5,REGS(R1)      SAVE USERS REGISTERS
         L     R2,NEXTSLOT(R1)     GET TRAILER ADDR
         LR    R3,R0               GET SIZE TO BE FREED
         LA    R3,7(R3)            ROUND SIZE TO DBLWRD
         N     R3,DBLWRD
         LR    R4,R2               USE R4 TO POINT TO 4K BLOCKS
         N     R4,PAGERND
         AR    R2,R3               MOVE NEXT SLOT PTR TO NEXT ENTRY
FQ1      DS    0H
         ST    R1,0(R4)            RESTORE POINTER TO TOP
         A     R4,FOURK            GET NEXT BLOCK
         CR    R4,R2               HAVE WE PAST INTO ALLOCATED YET
         BL    FQ1                    NO, THEN CONTINUE TO RESTORE
         ST    R2,NEXTSLOT(R1)     SAVE NEXTSLOT IN BUFFER HDR
*
         C     R2,BUFFEND(R1)      IS BUFFER EMPTY
         BE    FREEBUFF               YES, THEN TRY TO FREE A BUFFER
*
DONE     DS    0H
         LM    R2,R5,REGS(R1)      RESTORE USERS REGISTERS
         BR    R14                 AND RETURN
*
         EJECT
********************************************************************
*                                                                  *
*        THIS  SECTION CHECKS TO SEE BUFFER IS TOP OF CHAIN.       *
*        IF IT IS THEN FREE ALL FOLLOWING BUFFERS AND THEN         *
*        THE FIRST BUFFER.                                         *
*                                                                  *
********************************************************************
FREEBUFF DS    0H
         TM    BUFFFLAG(R1),X'10'  IS THIS TOP OF A CHAIN
         BNO   DONE                   NO, THEN CONTINUE ON
         LR    R2,R1               KEEP PTR TO THIS BUFFER
         L     R3,NEXTBUFF(R1)     GET NEXT FREE BUFFER
FQ2      DS    0H
         LR    R1,R3
         LTR   R3,R3               IF THERE IS ONE
         BZ    FQ3                    NO NEXT BUFFER
*
         L     R3,NEXTBUFF(R3)     GET NEXT BUFFER
         L     R0,BUFFSIZE(R1)     GET SIZE TO FREE
*
         FREEMAIN R,LV=(0),A=(1)
*
         BALR  R15,R0              RE ESTABLISH ADDRESSABILITY
         USING *,R15
         L     R15,BASEADDR
         USING IEFAB4F6,R15
         B     FQ2                 GO DO ANOTHER BUFFER
*
FQ3      DS    0H
         L     R0,BUFFSIZE(R2)     GET BUFFER SIZE
         LR    R1,R2               SET PTR TO BUFFER
         LM    R2,R5,REGS(R1)      LAST CHANCE TO RESTORE REGISTERS
*
         FREEMAIN R,LV=(0),A=(1)
*
         BR    R14                 RETURN
         EJECT
BUFFER   DSECT
BUFFTOP  EQU   *-BUFFER
         DS    A
BUFFID   EQU   *-BUFFER            OFFSET OF ID STRING
         DS    C'GQUE'
NEXTSLOT EQU   *-BUFFER            OFFSET TO PTR TO NEXT AVAILIBLE SLOT
         DS    A
BUFFSIZE EQU   *-BUFFER            OFFSET TO SUBPOOL AND BUFFER SIZE
         DS    F
BUFFFLAG EQU   *-BUFFER            OFFSET TO FLAG BYTE
         DS    X
         DS    AL3
NEXTBUFF EQU   *-BUFFER            OFFSET TO PTR TO NEXT BUFFER
         DS    A
RESERVE  EQU   *-BUFFER
         DS    A
BUFFEND  EQU   *-BUFFER            OFFSET TO PTR TO END OF BUFFER
         DS    A
REGS     EQU   *-BUFFER            OFFSET TO REGISTER SAVE AREA
         DS    4F
HDRLENG  EQU   *-BUFFER            LENGTH OF HDR
SUBPOOL  EQU   BUFFSIZE
IEFAB4F6 CSECT
         EJECT
BUFFCON  EQU   4096                DEFAULT BUFFER SIZE
*
         DS    0F
IDSTRING DC    CL4'GQUE'
M1000    EQU   B'1000'
M0111    EQU   B'0111'
FOURK    DC    F'4096'
F8       DC    F'8'
LRGBKRND DC    A(HDRLENG+4095)     FOR ROUNDING LARGE BLOCKS
HIGHBIT  DC    X'80000000'
DBLWRD   DC    X'FFFFFFF8'
PAGERND  DC    X'FFFFF000'
BASEADDR DC    A(IEFAB4F6)
DFLTSIZE DC    A(BUFFCON)
MAXSIZE  DC    A(BUFFCON-48)
PATCH    DC    8F'0'
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
