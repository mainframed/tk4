         TITLE 'IEFAB4DC - DATASET RESERVATION/RELEASE                 *
                        '
IEFAB4DC CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'IEFAB4DC  76.274'                              01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @12,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@12                                      01S0001
         L     @00,@SIZDATD                                     01S0001
         MODESET EXTKEY=SCHED,SAVEKEY=(2)
         GSPACE   R,LV=(0)
         LR    @11,@01                                          01S0001
         USING @DATD,@11                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         STC   @02,@OLDKEY                                      01S0001
         MODESET KEYADDR=(2)
         LM    @00,@02,20(@13)                                  01S0001
         ST    @11,8(,@13)                                      01S0001
         LR    @13,@11                                          01S0001
         MODESET EXTKEY=ZERO
         MVC   @PC00001(44),0(@01)                              01S0001
         MODESET EXTKEY=SCHED
*RETCODE=ZERO;                         /*INITIALIZE RETURN CODE TO 0 */
         L     @09,@PC00001+32                                  01S0062
         SLR   @15,@15                                          01S0062
         ST    @15,RETCODE(,@09)                                01S0062
*SAVEREC=ZERO;                         /*ADDRESS OF RECORD WITH SPACE*/
         SLR   SAVEREC,SAVEREC                                  01S0063
*DSNFOUND=OFF;                         /*ASSUME DSN ENTRY NOT FOUND  */
*ENQFAIL=OFF;                          /*ASSUME ENQ NOT NECESSARY OR
*                                        SUCCESSFUL                  */
*ASSIGN=OFF;                           /*ASSUME NO ASSIGNS   @YM06161*/
         NI    DSNFOUND,B'10101110'                             01S0066
*IF ADDRPASS=OFF × SRCHDSNM=ON THEN    /*DSENQ ENTRY NOT PASSED OR
*                                        DSNAME SEARCH       @YM07288*/
         L     @09,@PC00001                                     01S0067
         TM    ADDRPASS(@09),B'10000000'                        01S0067
         BZ    @RT00067                                         01S0067
         TM    SRCHDSNM(@09),B'00000010'                        01S0067
         BNO   @RF00067                                         01S0067
@RT00067 DS    0H                                               01S0068
*  DO;                                 /*NECESSARY TO SEARCH FOR DSN */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT - SRCHDSN                                                */
*/*                                                                  */
*/* DESCRIPTIVE NAME - SEARCH DSENQ FOR DSNAME ENTRY                 */
*/*                                                                  */
*/* FUNCTION - READ THE RECORDS OF THE DSENQ TABLE AND SEARCH FOR A  */
*/*            MATCH ON THE INPUT DSNAME.  (FUNCTION 1 - IF READALL  */
*/*            AND INCORREC ARE BOTH OFF.)                           */
*/*                                                                  */
*/*            READ ALL RECORDS OF THE DSENQ TABLE, SEARCH FOR A     */
*/*            MATCH ON THE INPUT DSNAME, AND CHAIN THE RECORDS      */
*/*            TOGETHER VIA THE IN CORE POINTERS.  (FUNCTION 2 - IF  */
*/*            READALL IS ON.)                                       */
*/*                                                                  */
*/*            SEARCH THE RECORDS THAT ARE CHAINED TOGETHER IN CORE  */
*/*            FOR A MATCH ON THE INPUT DSNAME.  (FUNCTION 3 - IF    */
*/*            INCORREC IS ON.)                                      */
*/*                                                                  */
*/*            DETERMINE WHETHER THE ENTRY FOR THIS DSNAME WILL      */
*/*            FIT IN THE RECORD BEING SEARCHED, SO THAT IF THE ENTRY*/
*/*            MUST BE ADDED, A RECORD WON'T HAVE TO BE ASSIGNED.    */
*/*            (FUNCTION 4 - IN ALL CASES.)                          */
*/*                                                                  */
*/*            RETURN POINTERS TO DSENQ ENTRY AND BLOCK IF   @YM07288*/
*/*            THE SEARCH ONLY FUNCTION IS REQUESTED AND     @YM07288*/
*/*            THE DSNAME IS FOUND. (FUNCTION 5)             @YM07288*/
*/*                                                                  */
*/* OPERATION - CALCULATE THE ACTUAL LENGTH OF THE INPUT DSNAME.     */
*/*                                                                  */
*/*             CALCULATE THE NUMBER OF BYTES REQUIRED FOR A NEW     */
*/*             DSENQ ENTRY FOR THIS DSNAME.                         */
*/*                                                                  */
*/*             IF THE IN CORE POINTERS ARE NOT PASSED, READ THE     */
*/*             DSENQ TABLE A RECORD AT A TIME. WHEN READING RECORDS,*/
*/*             CHAIN THEM VIA IN CORE POINTERS IF THIS FUNCTION IS  */
*/*             REQUESTED IN THE INPUT FUNCTION MAP.                 */
*/*                                                                  */
*/*             SEARCH FOR A MATCH ON DSNAME.  THE SEARCH IS ENDED   */
*/*             AT EITHER OF THE FOLLOWING CONDITIONS -              */
*/*               WHEN AN ENTRY FOR THE DSNAME IS FOUND (FUNCTIONS 1 */
*/*               3 AND 5),                                  @YM07288*/
*/*               AT THE END OF THE DSENQ TABLE (FUNCTIONS 1 AND 3   */
*/*               WHEN AN ENTRY FOR THE DSNAME IS NOT FOUND, AND     */
*/*               ALWAYS FOR FUNCTION 2).                            */
*/*                                                                  */
*/*             WHEN THE SEARCH OF EACH RECORD IS ENDED, A CHECK IS  */
*/*             MADE TO SEE IF THE ENTRY FOR THIS DSNAME WILL FIT IN */
*/*             THE RECORD AND IF SO, THE ADDRESS OF THIS ENTRY IS   */
*/*             SAVED FOR LATER USE (IF THE ENTRY HAS TO BE ADDED    */
*/*             TO THE DSENQ TABLE).                                 */
*/*                                                                  */
*/*             IF THE SEARCH DSNAME FUNCTION HAS REQUESTED, @YM07288*/
*/*             AND THE DSNAME WAS FOUND, AND RETURN         @YM07288*/
*/*             INFO WAS REQUESTED, RETURN THE ADDRESS       @YM07288*/
*/*             OF THE DATA SET ENQ TABLE ENTRY AND THE      @YM07288*/
*/*             ADDRESS OF THE BLOCK CONTAINING THE ENTRY.   @YM07288*/
*/*                                                                  */
*/* ENTRY - SRCHDSN (INCLUDED SEGMENT)                               */
*/*                                                                  */
*/*  INPUT DATA - JCTDETDA - SVA OF FIRST DSENQ RECORD               */
*/*               READALL  - ON, INDICATING READ AND CHAIN ALL DSENQ */
*/*                          RECORDS WHILE SEARCHING FOR DSNAME MATCH*/
*/*                          OFF, INDICATING READ AS MANY DSENQ      */
*/*                          RECORDS AS NECEASARY WHILE SEARCHING    */
*/*                          FOR DSNAME MATCH                        */
*/*               INCORREC - ON, INDICATING RECORDS ARE ALREADY IN   */
*/*                          CORE AND FIRSTREC CONTAINS ADDRESS OF   */
*/*                          FIRST DSENQ RECORD                      */
*/*                          OFF, INDICATING DSENQ TABLE HAS TO BE   */
*/*                          READ                                    */
*/*               DSNFOUND - OFF, ASSUMING DSNAME ENTRY NOT FOUND    */
*/*               SAVEREC  - ZERO, INDICATING NO RECORD HAS BEEN     */
*/*                          FOUND WHICH COULD CONTAIN THE DSNAME    */
*/*                          ENTRY                                   */
*/*               DSNLNGH  - LENGTH OF INPUT DSNAME                  */
*/*               DSNAME   - INPUT DSNAME                            */
*/*               FIRSTREC - ADDRESS OF FIRST IN CORE RECORD IF      */
*/*                          INCORREC IS ON                          */
*/*               SRCHDSNM - INDICATOR IN FUNCTION MAP       @YM07288*/
*/*                          REQUESTING ADDRESS OF DSENQ ENT @YM07288*/
*/*                          AND BLOCK CONTAINING DSNAME.    @YM07288*/
*/*               RETADDR  - INDICATOR IN FUNCTION MAP USED  @YM07288*/
*/*                          (IF SRCHDSNM = ON) TO DETERMINE @YM07288*/
*/*                          IF INFORMATION SHOULD BE        @YM07288*/
*/*                          RETURNED WHEN THE DSNAME IS     @YM07288*/
*/*                          FOUND.                          @YM07288*/
*/*                                                                  */
*/* EXIT - TO NEXT SEQUENTIAL INSTRUCTION                            */
*/*                                                                  */
*/*  OUTPUT DATA - IF DSNFOUND=OFF, THE DSNAME WAS NOT FOUND IN THE  */
*/*                DSENQ TABLE AND                                   */
*/*                  SAVEREC=ZERO INDICATING AN ASSIGN IS NECESSARY  */
*/*                               FOR A NEW DSENQ RECORD TO CONTAIN  */
*/*                               THE DSNAME ENTRY OR                */
*/*                          ADDR OF FIRST RECORD WHICH HAS ROOM FOR */
*/*                               DSNAME ENTRY.                      */
*/*                  DSNQPTR=ADDR OF LAST DSENQ RECORD.              */
*/*                  DSNQENTP=ADDR OF LAST DSENQ ENTRY.              */
*/*                                                                  */
*/*                IF DSNFOUND=ON, THE ENTRY WAS FOUND IN DSENQ      */
*/*                TABLE AND                                         */
*/*                  DSNQPTR=ADDR OF RECORD CONTAINING DSNAME ENTRY. */
*/*                  DSNQENTP=ADDR OF DSNAME ENTRY.                  */
*/*                                                                  */
*/*                IF SRCHDSNM = ON AND RETADDR = ON, THE    @YM07288*/
*/*                SEARCH FUNCTION WAS REQUESTED AND         @YM07288*/
*/*                  ENTADDR, IN CALLERS PARM LIST, CONTAINS @YM07288*/
*/*                  POINTER TO DSENQ ENTRY CONTAINING SEARCH@YM07288*/
*/*                  DSNAME.                                 @YM07288*/
*/*                  RECADDR, IN CALLERS PARM LIST, CONTAINS @YM07288*/
*/*                  POINTER TO DSENQ BLOCK CONTAINING       @YM07288*/
*/*                  DSENQ ENTRY ABOVE.                      @YM07288*/
*/*                                                                  */
*/*                IF READALL IS ON AND THE DSENQ TABLE EXISTS,      */
*/*                  FIRSTREC=ADDR OF THE FIRST DSENQ RECORD.        */
*/*                                                                  */
*/*                REALNGTH CONTAINS THE ACTUAL LENGTH OF THE INPUT  */
*/*                  DSNAME.                                         */
*/*                                                                  */
*/*                ENTRYLNG CONTAINS THE LENGTH OF THE ENTRY TO BE   */
*/*                  ADDED.                                          */
*/*                                                                  */
*/********************************************************************/
*DO REALNGTH=DSNLNGH TO 1 BY -1 WHILE(DSNAME(REALNGTH)=BLANK);  02S0069
         L     @09,@PC00001+8                                   02S0069
         LH    REALNGTH,DSNLNGH(,@09)                           02S0069
         B     @DE00069                                         02S0069
@DL00069 L     @09,@PC00001+8                                   02S0069
         ALR   @09,REALNGTH                                     02S0069
         CLI   DSNAME-1(@09),C' '                               02S0069
         BNE   @DC00069                                         02S0069
*END;                                  /*CALCULATE ACTUAL DSN LENGTH */
         BCTR  REALNGTH,0                                       02S0070
@DE00069 LTR   REALNGTH,REALNGTH                                02S0070
         BP    @DL00069                                         02S0070
@DC00069 DS    0H                                               02S0071
*ENTRYLNG=ENTRYHDR+REALNGTH;           /*CALCULATE ENTRY LENGTH      */
         LR    ENTRYLNG,REALNGTH                                02S0071
         AL    ENTRYLNG,ENTRYHDR                                02S0071
*IF INCORREC=OFF THEN                  /*ARE RECORDS IN CORE         */
         L     @05,@PC00001                                     02S0072
         TM    INCORREC(@05),B'00001000'                        02S0072
         BNZ   @RF00072                                         02S0072
*  DO;                                 /*NO, SET UP TO READ          */
*    READEPA=READEPA && READEPA;       /*CLEAR EPA                   */
         XC    READEPA(16),READEPA                              02S0074
*    SWACTLS=SWACTLS && SWACTLS;       /*CLEAR SWA MNGR INTERFACE MAP*/
         LH    @05,SWACTLS                                      02S0075
         N     @05,@CF01316                                     02S0075
         LR    @15,@05                                          02S0075
         XR    @15,@05                                          02S0075
         STH   @15,SWACTLS                                      02S0075
*    SWREAD=ON;                        /*READ FUNCTION REQUIRED      */
*    SWMOD=ON;                         /*MODIFY EXISTING EPA         */
         OI    SWREAD,B'00100010'                               02S0077
*  END;                                /*END SET UP TO READ          */
*ELSE;                                 /*RECORDS ARE IN CORE         */
@RF00072 DS    0H                                               02S0080
*IF READALL=ON THEN                    /*READ AND CHAIN ALL RECORDS  */
         L     @05,@PC00001                                     02S0080
         TM    READALL(@05),B'00010000'                         02S0080
         BNO   @RF00080                                         02S0080
*  DO;                                 /*YES, READ THEM ALL IN       */
*    SVA=JCTDETDA;                     /*GET SVA OF FIRST RECORD     */
         L     @05,@PC00001+4                                   02S0082
         L     @05,JCTPTR(,@05)                                 02S0082
         MVC   SVA(3),JCTDETDA(@05)                             02S0082
*    FRSTREAD=ON;                      /*ASSUME PROCESSING FIRST REC */
         OI    FRSTREAD,B'00001000'                             02S0083
*    DO WHILE(SVA^=ZERO);              /*READ AND CHAIN ALL RECORDS  */
         B     @DE00084                                         02S0084
@DL00084 DS    0H                                               02S0085
*      CALL IEFAB4F7(SWACTLS,ADDR(READEPA),0,ADDR(SVAID),       02S0085
*                    ADDR(BLOCK),0,1); /*SWA MNGR INTFC RTN TO READ  */
         LA    @05,SWACTLS                                      02S0085
         ST    @05,@AL00001                                     02S0085
         LA    @05,READEPA                                      02S0085
         ST    @05,@TF00001                                     02S0085
         LA    @05,@TF00001                                     02S0085
         ST    @05,@AL00001+4                                   02S0085
         LA    @05,@CF00182                                     02S0085
         ST    @05,@AL00001+8                                   02S0085
         LA    @05,SVAID                                        02S0085
         ST    @05,@TF00002                                     02S0085
         LA    @05,@TF00002                                     02S0085
         ST    @05,@AL00001+12                                  02S0085
         LA    @05,BLOCK                                        02S0085
         ST    @05,@TF00003                                     02S0085
         LA    @05,@TF00003                                     02S0085
         ST    @05,@AL00001+16                                  02S0085
         LA    @05,@CF00182                                     02S0085
         ST    @05,@AL00001+20                                  02S0085
         LA    @05,@CF00099                                     02S0085
         ST    @05,@AL00001+24                                  02S0085
         L     @15,@CV00211                                     02S0085
         LA    @01,@AL00001                                     02S0085
         BALR  @14,@15                                          02S0085
*      IF FRSTREAD=ON THEN             /*FIRST RECORD JUST READ      */
         TM    FRSTREAD,B'00001000'                             02S0086
         BNO   @RF00086                                         02S0086
*        DO;                           /*YES, PERFORM SPECIAL PROCESS*/
*          FIRSTREC=BLOCK;             /*SAVE ADDR OF FIRST RECORD   */
         L     @07,@PC00001+36                                  02S0088
         L     @05,BLOCK                                        02S0088
         ST    @05,FIRSTREC(,@07)                               02S0088
*          FRSTREAD=OFF;               /*INDICATE NOT FIRST READ     */
         NI    FRSTREAD,B'11110111'                             02S0089
*        END;                          /*END FIRST RECORD PROCESSING */
*      ELSE                            /*RECORD OTHER THAN THE FIRST */
*        DSNQNEXT=BLOCK;               /*CHAIN THIS RECORD TO LAST   */
         B     @RC00086                                         02S0091
@RF00086 L     @05,BLOCK                                        02S0091
         ST    @05,DSNQNEXT(,DSNQPTR)                           02S0091
*      DSNQPTR=BLOCK;                  /*ADDRESS OF DSENQ RECORD     */
@RC00086 L     DSNQPTR,BLOCK                                    02S0092
*      SVA=DSNQNSVA;                   /*SVA OF NEXT RECORD          */
         MVC   SVA(3),DSNQNSVA(DSNQPTR)                         02S0093
*    END;                              /*END READ AND CHAIN ALL RECS */
@DE00084 ICM   @05,7,SVA                                        02S0094
         BNZ   @DL00084                                         02S0094
*  END;                                /*END READ THEM ALL IN        */
*IF READALL=ON × INCORREC=ON THEN      /*RECORDS CHAINED IN CORE     */
@RF00080 L     @05,@PC00001                                     02S0096
         TM    READALL(@05),B'00011000'                         02S0096
         BZ    @RF00096                                         02S0096
*  DO;                                 /*YES, READ NOT NECESSARY     */
*    NOREAD=ON;                        /*INDICATE READ NOT NECESSARY */
         OI    NOREAD,B'00000100'                               02S0098
*    RECPTR=FIRSTREC;                  /*GET ADDR OF FIRST RECORD    */
         L     @05,@PC00001+36                                  02S0099
         L     RECPTR,FIRSTREC(,@05)                            02S0099
*  END;                                /*END READ NOT NECESSARY      */
*ELSE                                  /*RECORDS NOT IN CORE         */
*  DO;                                 /*PREPARE TO READ DSENQ RECS  */
         B     @RC00096                                         02S0101
@RF00096 DS    0H                                               02S0102
*    NOREAD=OFF;                       /*READ NECESSARY FOR RECORDS  */
         NI    NOREAD,B'11111011'                               02S0102
*    SVA=JCTDETDA;                     /*SVA OF FIRST DSENQ RECORD   */
         L     @05,@PC00001+4                                   02S0103
         L     @05,JCTPTR(,@05)                                 02S0103
         MVC   SVA(3),JCTDETDA(@05)                             02S0103
*  END;                                /*END PREPARE TO READ DSENQ   */
*DO WHILE( DSNFOUND=OFF &                                       02S0105
*          ( (NOREAD=ON & RECPTR^=ZERO) × /*SEARCH IN CORE RECORDS
*                                        TILL NAME FOUND OR TABLE END*/
*            (NOREAD=OFF &  SVA^=ZERO) ) ); /*READ & SEARCH DSENQ RECS
*                                        UNTIL NAME FOUND OR TBL END */
@RC00096 B     @DE00105                                         02S0105
@DL00105 DS    0H                                               02S0106
*  IF NOREAD=OFF THEN                  /*ARE RECORDS CHAINED IN CORE */
         TM    NOREAD,B'00000100'                               02S0106
         BNZ   @RF00106                                         02S0106
*    DO;                               /*NO, READ A DSENQ RECORD     */
*      CALL IEFAB4F7(SWACTLS,ADDR(READEPA),0,ADDR(SVAID),       02S0108
*                ADDR(BLOCK),0,1);     /*SWA MNGR INTFC RTN TO READ  */
         LA    @06,SWACTLS                                      02S0108
         ST    @06,@AL00001                                     02S0108
         LA    @06,READEPA                                      02S0108
         ST    @06,@TF00001                                     02S0108
         LA    @06,@TF00001                                     02S0108
         ST    @06,@AL00001+4                                   02S0108
         LA    @06,@CF00182                                     02S0108
         ST    @06,@AL00001+8                                   02S0108
         LA    @06,SVAID                                        02S0108
         ST    @06,@TF00002                                     02S0108
         LA    @06,@TF00002                                     02S0108
         ST    @06,@AL00001+12                                  02S0108
         LA    @06,BLOCK                                        02S0108
         ST    @06,@TF00003                                     02S0108
         LA    @06,@TF00003                                     02S0108
         ST    @06,@AL00001+16                                  02S0108
         LA    @06,@CF00182                                     02S0108
         ST    @06,@AL00001+20                                  02S0108
         LA    @06,@CF00099                                     02S0108
         ST    @06,@AL00001+24                                  02S0108
         L     @15,@CV00211                                     02S0108
         LA    @01,@AL00001                                     02S0108
         BALR  @14,@15                                          02S0108
*      DSNQPTR=BLOCK;                  /*ADDRESS OF DSENQ RECORD     */
         L     DSNQPTR,BLOCK                                    02S0109
*    END;                              /*END READ A DSENQ RECORD     */
*  ELSE                                /*RECORDS ARE CHAINED IN CORE */
*    DSNQPTR=RECPTR;                   /*ADDR OF CURRENT RECORD      */
         B     @RC00106                                         02S0111
@RF00106 LR    DSNQPTR,RECPTR                                   02S0111
*  DSNQENTP=ADDR(DSNQENTS);            /*ADDRESS OF FIRST DSENQ ENTRY*/
@RC00106 LA    DSNQENTP,DSNQENTS(,DSNQPTR)                      02S0112
*  ENDRCRD=DSNQPTR+BLOCKLEN-DSNQFREE;  /*END OF BYTES USED THIS REC  */
         LR    ENDRCRD,DSNQPTR                                  02S0113
         AL    ENDRCRD,BLOCKLEN                                 02S0113
         SH    ENDRCRD,DSNQFREE(,DSNQPTR)                       02S0113
*  DO WHILE(DSNFOUND=OFF & DSNQENTP<ENDRCRD); /*SEARCH DSENQ REC DSN */
         B     @DE00114                                         02S0114
@DL00114 DS    0H                                               02S0115
*    IF DSNQDSNL=REALNGTH &            /*LENGTHS ARE EQUAL           */
*       DSNQDSN(1:DSNQDSNL)=DSNAME(1:DSNQDSNL) THEN /*DSNAMES EQUAL  */
         SLR   @15,@15                                          02S0115
         IC    @15,DSNQDSNL(,DSNQENTP)                          02S0115
         CR    @15,REALNGTH                                     02S0115
         BNE   @RF00115                                         02S0115
         L     @14,@PC00001+8                                   02S0115
         BCTR  @15,0                                            02S0115
         EX    @15,@SC01321                                     02S0115
         BNE   @RF00115                                         02S0115
*      DSNFOUND=ON;                    /*INDICATE ENTRY FOUND        */
         OI    DSNFOUND,B'01000000'                             02S0116
*    ELSE                              /*ENTRY DOESN'T MATCH DSNAME  */
*      DSNQENTP=DSNQENTP+ENTRYHDR+DSNQDSNL; /*ADDR NEXT DSENQ ENTRY  */
         B     @RC00115                                         02S0117
@RF00115 LR    @15,DSNQENTP                                     02S0117
         AL    @15,ENTRYHDR                                     02S0117
         SLR   @14,@14                                          02S0117
         IC    @14,DSNQDSNL(,DSNQENTP)                          02S0117
         ALR   @15,@14                                          02S0117
         LR    DSNQENTP,@15                                     02S0117
*  END;                                                         02S0118
@RC00115 DS    0H                                               02S0118
@DE00114 TM    DSNFOUND,B'01000000'                             02S0118
         BNZ   @DC00114                                         02S0118
         CR    DSNQENTP,ENDRCRD                                 02S0118
         BL    @DL00114                                         02S0118
@DC00114 DS    0H                                               02S0119
*  IF DSNFOUND=OFF THEN                /*ENTRY NOT FOUND YET         */
         TM    DSNFOUND,B'01000000'                             02S0119
         BNZ   @RF00119                                         02S0119
*    DO;                               /*YES, READ NEXT RECORD       */
*      IF SAVEREC=ZERO & ENTRYLNG<=DSNQFREE THEN /*NEW ENTRY WILL FIT*/
         LTR   SAVEREC,SAVEREC                                  02S0121
         BNZ   @RF00121                                         02S0121
         CH    ENTRYLNG,DSNQFREE(,DSNQPTR)                      02S0121
         BH    @RF00121                                         02S0121
*        SAVEREC=DSNQPTR;              /*SAVE ADDRESS OF RECORD      */
         LR    SAVEREC,DSNQPTR                                  02S0122
*      IF NOREAD=ON THEN               /*RECORDS CHAINED IN CORE?    */
@RF00121 TM    NOREAD,B'00000100'                               02S0123
         BNO   @RF00123                                         02S0123
*        RECPTR=DSNQNEXT;              /*YES, GET ADDR OF NEXT RECORD*/
         L     RECPTR,DSNQNEXT(,DSNQPTR)                        02S0124
*      ELSE                            /*RECORDS NEED TO BE READ     */
*        SVA=DSNQNSVA;                 /*PREPARE FOR NEXT READ       */
         B     @RC00123                                         02S0125
@RF00123 MVC   SVA(3),DSNQNSVA(DSNQPTR)                         02S0125
*    END;                              /*END READ NEXT RECORD        */
@RC00123 DS    0H                                               02S0127
*END;                                  /*END SEARCH DSENQ TABLE      */
@RF00119 DS    0H                                               02S0127
@DE00105 TM    DSNFOUND,B'01000000'                             02S0127
         BNZ   @DC00105                                         02S0127
         TM    NOREAD,B'00000100'                               02S0127
         BNO   @GL00006                                         02S0127
         LTR   RECPTR,RECPTR                                    02S0127
         BNZ   @DL00105                                         02S0127
@GL00006 TM    NOREAD,B'00000100'                               02S0127
         BNZ   @DC00105                                         02S0127
         ICM   @05,7,SVA                                        02S0127
         BNZ   @DL00105                                         02S0127
@DC00105 DS    0H                                               02S0128
*IF SRCHDSNM = ON & RETADDR = ON                                02S0128
*   & DSNFOUND = ON THEN               /*SEARCH              @YM07288*/
         L     @05,@PC00001                                     02S0128
         TM    SRCHDSNM(@05),B'01000010'                        02S0128
         BNO   @RF00128                                         02S0128
         TM    DSNFOUND,B'01000000'                             02S0128
         BNO   @RF00128                                         02S0128
*  DO;                                 /*FOR DSNAME RTN PTRS @YM07288*/
*    ENTADDR = DSNQENTP;               /*REQ & DSN FOUND,RTN @YM07288*/
         L     @05,@PC00001+24                                  02S0130
         ST    DSNQENTP,ENTADDR(,@05)                           02S0130
*    RECADDR = DSNQPTR;                /*DSNQENTRY AND BLOCK @YM07288*/
         ST    DSNQPTR,RECADDR(,@05)                            02S0131
*  END;                                /*POINTERS            @YM07288*/
*  END;                                /*END DSENQ SEARCH            */
*ELSE                                  /*ENTRY ADDRESS PASSED        */
*  DO;                                 /*SET UP DSENQ POINTERS       */
         B     @RC00067                                         01S0134
@RF00067 DS    0H                                               01S0135
*    DSNQENTP=ENTADDR;                 /*ADDRESS OF DSENQ ENTRY      */
         L     @05,@PC00001+24                                  01S0135
         L     DSNQENTP,ENTADDR(,@05)                           01S0135
*    DSNQPTR=RECADDR;                  /*ADDRESS OF DSENQ RECORD     */
         L     DSNQPTR,RECADDR(,@05)                            01S0136
*    REALNGTH=DSNQDSNL;                /*LENGTH OF DSN FROM DSENQ ENT*/
         SLR   REALNGTH,REALNGTH                                01S0137
         IC    REALNGTH,DSNQDSNL(,DSNQENTP)                     01S0137
*    ENTRYLNG=ENTRYHDR + REALNGTH;     /*ACTUAL LENGTH OF DSENQ ENTRY*/
         LR    ENTRYLNG,REALNGTH                                01S0138
         AL    ENTRYLNG,ENTRYHDR                                01S0138
*    DSNFOUND=ON;                      /*DSN ENTRY FOUND IN DSENQ    */
         OI    DSNFOUND,B'01000000'                             01S0139
*  END;                                /*END ENTRY ADDRESS PASSWORD  */
*IF ADCHONLY=ON × ADCHENQ=ON THEN      /*ADD/CHANGE FUNCTION REQUEST */
@RC00067 L     @05,@PC00001                                     01S0141
         TM    ADCHONLY(@05),B'01100000'                        01S0141
         BZ    @RF00141                                         01S0141
*  DO;                                 /*PROCESS REQUEST             */
*    CHSHRXCL=OFF;                     /*ASSUME USE CHANGE NOT NEEDED*/
         NI    CHSHRXCL,B'01111111'                             01S0143
*    CHNGSTEP=OFF;                     /*ASSUME STEP NUMB OK @YM08191*/
         NI    CHNGSTEP,B'10111111'                             01S0144
*    IF DSNFOUND=ON THEN               /*DSNAME ALREADY IN TABLE     */
         TM    DSNFOUND,B'01000000'                             01S0145
         BNO   @RF00145                                         01S0145
*      DO;                             /*YES, CHECK REQUESTED VS.
*                                        FOUND USE ATTRIBUTES        */
*        IF DSNQSHR=ON & ENQEXCL=ON THEN /*FOUND SHR, REQUESTED EXCL */
         TM    DSNQSHR(DSNQENTP),B'10000000'                    01S0147
         BNO   @RF00147                                         01S0147
         TM    ENQEXCL(@05),B'00000001'                         01S0147
         BNO   @RF00147                                         01S0147
*          DO;                         /*YES, CHANGE DSENQ TABLE     */
*            CHSHRXCL=ON;              /*INDCIATE USE CHANGE REQUIRED*/
         OI    CHSHRXCL,B'10000000'                             01S0149
*          END;                        /*END CHANGE USE REQUIRED     */
*        ELSE;                         /*ENTRY IS GOOD AS IS         */
@RF00147 DS    0H                                               01S0152
*        IF STEPNUMB > DSNQSTEP THEN   /*INPUT STP > STP IN ENTRY
*                                                            @YM08191*/
         L     @05,@PC00001+20                                  01S0152
         CLC   STEPNUMB(1,@05),DSNQSTEP(DSNQENTP)               01S0152
         BNH   @RF00152                                         01S0152
*          CHNGSTEP=ON;                /*YES,CHANGE STEP NUMB@YM08191*/
         OI    CHNGSTEP,B'01000000'                             01S0153
*      END;                            /*END ENTRY FOUND PROCESSING  */
@RF00152 DS    0H                                               01S0155
*    IF DSNFOUND=OFF ×                 /*DSENQ ENTRY TO BE CREATED OR*/
*       (CHSHRXCL=ON & NOSHRXCL=OFF) × /*USE ATTRIBUTE CHANGED OR    */
*       CHNGSTEP=ON THEN               /*STEP NUMBER CHANGED?@YM08191*/
@RF00145 TM    DSNFOUND,B'01000000'                             01S0155
         BZ    @RT00155                                         01S0155
         TM    CHSHRXCL,B'10000000'                             01S0155
         BNO   @GL00011                                         01S0155
         L     @05,@PC00001                                     01S0155
         TM    NOSHRXCL(@05),B'00000100'                        01S0155
         BZ    @RT00155                                         01S0155
@GL00011 TM    CHNGSTEP,B'01000000'                             01S0155
         BNO   @RF00155                                         01S0155
@RT00155 DS    0H                                               01S0156
*      DO;                             /*YES, UPDATE DSENQ TABLE     */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT - UPDENT                                                 */
*/*                                                                  */
*/* DESCRIPTIVE NAME - UPDATE THE DSENQ TABLE                        */
*/*                                                                  */
*/* FUNCTION - TO CHANGE AN EXISTING DSENQ ENTRY FROM SHARE TO       */
*/*            EXCLUSIVE.                                            */
*/*            TO CHANGE THE STEP NUMBER OF AN EXISTING      @YM08191*/
*/*            DSENQ ENTRY.                                  @YM08191*/
*/*            TO CREATE A NEW ENTRY FOR THE INPUT DSNAME IN THE     */
*/*            DSENQ TABLE.  IF THERE IS NO RECORD WHICH CAN CONTAIN */
*/*            THE NEW ENTRY OR THE DSENQ TABLE DOES NOT EXIST, A    */
*/*            RECORD IS ASSIGNED.  APPROPRIATE CHAINING     @YM08602*/
*/*            IS DONE BY LATER PROCESSING, AFTER THE        @YM08602*/
*/*            ASSIGNED RECORD IS WRITTEN.                   @YM08602*/
*/*                                                                  */
*/*            THE INPUT EPA IS UPDATED TO CHAIN EPA'S FOR ANY       */
*/*            UPDATED RECORDS AND THE ADDRESS OF THE LAST   @YM06161*/
*/*            EPA REPLACES THE ADDRESS OF THE INPUT LAST    @ZA04136*/
*/*            EPA UNLESS THE CALLER REQUESTED NO EPA PROC-  @ZA04136*/
*/*            ESSING BY SPECIFYING NEPAPROC=ON.             @ZA04136*/
*/*            (ANY ASSIGNED RECORD WILL BE WRITTEN TO SWA   @YM06161*/
*/*            BY LATER PROCESSING IN IEFAB4DC.)             @YM06161*/
*/*                                                                  */
*/* OPERATION - IF DSNFOUND IS OFF -                                 */
*/*             IF THERE IS NO RECORD AVAILABLE WITH ROOM FOR THE    */
*/*             NEW DSNAME ENTRY OR THE DSENQ TABLE DOES             */
*/*             NOT YET EXIST (SAVEREC=ZERO), THE SWA MANAGER        */
*/*             INTERFACE ROUTINE, IEFAB4F7, IS INVOKED TO ASSIGN    */
*/*             ONE RECORD.  THE SVA OF THE ASSIGNED RECORD  @YM08602*/
*/*             IS SAVED.  (IT WILL BE PLACED IN THE JCT OR  @YM08602*/
*/*             THE PREVIOUS RECORD WHEN THE ASSIGNED RECORD @YM08602*/
*/*             IS WRITTEN.)  IF THE READ AND CHAIN          @YM08602*/
*/*             ALL DSENQ RECORDS OPTION WAS REQUESTED, THE          */
*/*             ADDRESS OF THE ASSIGNED RECORD IS RETURNED AS THE    */
*/*             ADDRESS OF THE FIRST DSENQ RECORD.  THE              */
*/*             ASSIGNED RECORD IS THEN INITIALIZED.                 */
*/*                                                                  */
*/*             WHEN ASSIGN PROCESSING IS COMPLETE OR IF IT WAS NOT  */
*/*             NECESSARY, A DSENQ ENTRY IS MADE FOR THIS DSNAME.    */
*/*                                                                  */
*/*             IF CHSHRXCL IS ON-                                   */
*/*             CHANGE THE USE ATTRIBUTE IN THE DSENQ ENTRY,I.E.     */
*/*             DSNQSHR IS SET OFF TO INDICATE EXCLUSIVE USE.        */
*/*                                                          @YM08191*/
*/*             IF CHNGSTEP IS ON -                          @YM08191*/
*/*             CHANGE THE STEP NUMBER IN THE DSENQ ENTRY    @YM08191*/
*/*             TO THE INPUT STEP NUMBER.                    @YM08191*/
*/*                                                                  */
*/*             IF THE CALLER REQUESTED EPA PROCESSING.      @ZA04136*/
*/*             A WRITE EPA IS CREATED AND CHAINED FOR THE UPDATED   */
*/*             RECORD (EXCEPT FOR THE JCT IF AN EPA FOR THE JCT     */
*/*             IS ALREADY ON THE EPA CHAIN).                        */
*/*             AS THE RECORDS ARE BEING UPDATED, THE UPDATED RECORD */
*/*             EPA IS COMPLETED, IF REQUESTED.              @ZA04136*/
*/*             (THE SWA MANAGER INTERFACE ROUTINE HAS BUILT @YM06161*/
*/*             THE EPA FOR THE NEW RECORD.)                 @YM06161*/
*/*             WHEN THE ABOVE PROCESSING IS COMPLETE, THE UPDATED   */
*/*             RECORD EPA IS CHAINED TO THE INPUT LAST EPA AND THE  */
*/*             INPUT LAST EPA ADDRESS IS UPDATED TO THE LAST EPA    */
*/*             ON THE CHAIN, IF REQUESTED.                  @ZA04136*/
*/*                                                                  */
*/* ENTRY - UPDENT (INCLUDED SEGMENT)                                */
*/*                                                                  */
*/*  INPUT DATA - JCTDETDA - SVA OF FIRST DSENQ RECORD OR            */
*/*                          ZERO (IF NO DSENQ RECORD EXISTS)        */
*/*               SAVEREC  - ADDRESS OF RECORD WITH ROOM FOR DSNAME  */
*/*                           ENTRY OR                               */
*/*                          ZERO (IF AN ASSIGN IS NECESSARY)        */
*/*               DSNLNGH  - LENGTH OF INPUT DSNAME                  */
*/*               DSNAME   - INPUT DSNAME                            */
*/*               STEPNUMB - INPUT STEP NUMBER                       */
*/*               ENQSHR   - INDICATES SHARED USE OF DATA SET IF ON  */
*/*                           EXCLUSIVE USE OTHERWISE                */
*/*               ENTRYLNG - LENGTH OF DSN ENTRY IN DSENQ RECORD     */
*/*               REALNGTH - ACTUAL LENGTH OF DSNAME                 */
*/*               CHSHRXCL - ON, INDICATING CHANGE USE ATTRIBUTE     */
*/*                          FROM SHARE TO EXCLUSIVE                 */
*/*               EPAJCTEX - ON, INDICATING AN EPA FOR THE JCT IS    */
*/*                          ALREADY ON THE CHAIN                    */
*/*               DSNFOUND - OFF, INDICATING AN ENTRY SHOULD BE ADDED*/
*/*                          TO THE DSENQ TABLE                      */
*/*               JCTPTR   - ADDRES OF THE JCT                       */
*/*               EPADDR   - ADDRESS OF INPUT EPA                    */
*/*               DSNQPTR  - ADDRESS OF RECORD CONTAINING ENTRY TO   */
*/*                          BE CHANGED                              */
*/*               DSNQENTP - ADDRESS OF ENTRY TO BE CHANGED          */
*/*               FIRSTREC - MAY BE USED TO CONTAIN ADDR OF FIRST REC*/
*/*               READALL  - ON, INDICATING READ AND CHAIN ALL RECS  */
*/*               ASSIGN   - OFF, INDICATING ASSIGN HAS NOT  @YM06161*/
*/*                          YET BEEN DONE.                  @YM06161*/
*/*               CHNGSTEP - ON, INDICATING CHANGE THE       @YM08191*/
*/*                          STEP NUMBER IN THE DSENQ        @YM08191*/
*/*                          ENTRY.                          @YM08191*/
*/*                                                                  */
*/* EXIT - TO NEXT SEQUENTIAL INSTRUCTION                            */
*/*                                                                  */
*/*  OUTPUT DATA - IF AN ASSIGN WAS NECESSARY AND NO DSENQ TABLE     */
*/*                EXISTS                                            */
*/*                   ASGNDSVA IS SET TO THE ASSIGNED SVA.   @YM08602*/
*/*                   AN EPA FOR THE JCT IS PLACED ON THE    @ZA04136*/
*/*                   CHAIN ONLY IF THE EPA FOR THE JCT IS   @ZA04136*/
*/*                   NOT ALREADY ON THE EPA CHAIN, AND      @ZA04136*/
*/*                   NEPAPROC = OFF.                        @ZA04136*/
*/*                   EPAJCTEX SET ON IF AN EPA ADDED FOR THE JCT.   */
*/*                   FIRSTREC SET TO THE ADDRESS OF FIRST DSENQ     */
*/*                            RECORD IF READALL IS ON.              */
*/*                   ASSIGN SET ON TO CAUSE LATER           @YM06161*/
*/*                   PROCESSING TO WRITE THE ASSIGNED       @YM06161*/
*/*                   RECORD TO SWA.                         @YM06161*/
*/*                                                                  */
*/*                IF AN ASSIGN WAS NECESSARY AND THE DSENQ TABLE    */
*/*                EXISTS                                            */
*/*                   ASGNDSVA IS SET TO THE ASSIGNED SVA.   @YM08602*/
*/*                   DSNQNEXT IS SET TO THE ASSIGNED ADDRESS AND    */
*/*                            THE ASSIGNED RECORD BECOMES THE LAST  */
*/*                            DSENQ RECORD.                         */
*/*                   SAVDSNQP IS SET TO THE ADDRESS OF THE  @YM08602*/
*/*                            BLOCK IN WHICH TO PLACE THE   @YM08602*/
*/*                            SVA OF THE ASSIGNED BLOCK.    @YM08602*/
*/*                   AN EPA FOR THE UPDATED RECORD IS               */
*/*                   PLACED ON THE CHAIN.                           */
*/*                   ASSIGN SET ON TO CAUSE LATER           @YM06161*/
*/*                   PROCESSING TO WRITE THE ASSIGNED       @YM06161*/
*/*                   RECORD TO SWA.                         @YM06161*/
*/*                                                                  */
*/*                IF NO ASSIGN WAS NECESSARY OR THE USE ATTRIBUTES  */
*/*                WERE CHANGED, AN EPA FOR THE UPDATED RECORD IS    */
*/*                PLACED ON THE CHAIN, IF NEPAPROC = OFF.   @ZA04136*/
*/*                                                                  */
*/*                IF AN ASSIGN WAS NECESSARY, THE RECORD IS         */
*/*                INITIALIZED (SEE OPERATION TEXT).                 */
*/*                                                                  */
*/*                IN ALL CASES THE DSNAME ENTRY IS CREATED IN THE   */
*/*                RECORD (SEE OPERATION TEXT).                      */
*/*                                                                  */
*/*                DSNQENTP CONTAINS THE ADDRESS OF THE NEW DSENQ    */
*/*                ENTRY.                                            */
*/*                                                                  */
*/*                DSNQPTR CONTAINS THE ADDRESS OF THE DSENQ RECORD  */
*/*                CONTAINING THE ENTRY.                             */
*/*                                                                  */
*/*                EPADDR CONTAINS THE ADDRESS OF THE LAST EPA       */
*/*                PLACED ON THE CHAIN, IF NEPAPROC = OFF.   @ZA04136*/
*/*                                                                  */
*/********************************************************************/
*UPDATE=OFF;                           /*ASSUME NO REC UPDATE@YM06161*/
         NI    UPDATE,B'01111111'                               02S0157
*IF (CHNGSTEP=ON ×                     /*CHNG STEP NUMBER    @ZA04136*/
*   CHSHRXCL=ON ×                      /*CHANGE USE OF EXISTING ENTRY*/
*   SAVEREC^=ZERO ×                    /*ASSIGN IS NOT NECESSARY     */
*   JCTDETDA^=ZERO ×                   /*DSENQ TABLE EXISTS          */
*   EPAJCTEX=OFF) &                    /*JCT EPA NOT ON CHAIN@ZA04136*/
*   NEPAPROC=OFF THEN                  /*CALLER WANTS EPA    @ZA04136*/
         TM    CHNGSTEP,B'01000000'                             02S0158
         BO    @GL00014                                         02S0158
         TM    CHSHRXCL,B'10000000'                             02S0158
         BO    @GL00014                                         02S0158
         LTR   SAVEREC,SAVEREC                                  02S0158
         BNZ   @GL00014                                         02S0158
         L     @05,@PC00001+4                                   02S0158
         L     @05,JCTPTR(,@05)                                 02S0158
         ICM   @02,7,JCTDETDA(@05)                              02S0158
         BNZ   @GL00014                                         02S0158
         L     @05,@PC00001                                     02S0158
         TM    EPAJCTEX(@05),B'00000100'                        02S0158
         BNZ   @RF00158                                         02S0158
@GL00014 L     @05,@PC00001                                     02S0158
         TM    NEPAPROC(@05),B'00000001'                        02S0158
         BNZ   @RF00158                                         02S0158
*  DO;                                 /*YES, GETMAIN FOR EPA FOR
*                                        UPDATED RECORD, OR RECORD TO
*                                        WHICH NEW RECORD WILL BE
*                                        CHAINED, OR FOR JCT IF TABLE
*                                        DOES NOT EXIST.             */
*    RFY (R0,R1) RESTRICTED;           /*RESTRICT REGISTERS 0 AND 1  */
*    R0=LENGTH(SWAEPA);                /*LENGTH OF EPA               */
         LA    R0,16                                            02S0161
*    R0=R0 × SUBPOLNO;                 /*GET FROM CORRECT SUBPOOL    */
         O     R0,SUBPOLNO                                      02S0162
*    GENERATE;                         /*GET CORE FOR EPA            */
     GETMAIN R,LV=(0)
*    SWEPAPTR=R1;                      /*ADDR OF FIRST EPA TO CHAIN  */
         LR    SWEPAPTR,R1                                      02S0164
*    SWAEPA=SWAEPA && SWAEPA;          /*CLEAR THE EPA               */
         XC    SWAEPA(16,SWEPAPTR),SWAEPA(SWEPAPTR)             02S0165
*    UPDATE=ON;                        /*RECORD UPDATED      @YM06161*/
         OI    UPDATE,B'10000000'                               02S0166
*    RFY (R0,R1) UNRESTRICTED;         /*RELEASE REGISTERS 0 AND 1   */
*  END;                                /*END GETMAIN FOR EPA         */
*UPJCTEPA=OFF;                         /*ASSUME JCT EPA NOT TO BE
*                                        PUT ON CHAIN                */
@RF00158 NI    UPJCTEPA,B'11011111'                             02S0169
*IF DSNFOUND=OFF THEN                  /*ADD FUNCTION TO BE PERFORMED*/
         TM    DSNFOUND,B'01000000'                             02S0170
         BNZ   @RF00170                                         02S0170
*  DO;                                 /*ADD ENTRY TO DSENQ TABLE    */
*    IF SAVEREC=ZERO THEN              /*IS AN ASSIGN NECESSARY      */
         LTR   SAVEREC,SAVEREC                                  02S0172
         BNZ   @RF00172                                         02S0172
*      DO;                             /*YES, INVOKE SWA MNGR        */
*        SWACTLS=SWACTLS && SWACTLS;   /*ZERO CONTROL SWITCHES       */
         LH    @08,SWACTLS                                      02S0174
         N     @08,@CF01316                                     02S0174
         LR    @06,@08                                          02S0174
         XR    @06,@08                                          02S0174
         STH   @06,SWACTLS                                      02S0174
*        ASSGNEPA=ASSGNEPA && ASSGNEPA; /*CLEAR ASSIGN EPA   @YM06161*/
         XC    ASSGNEPA(16),ASSGNEPA                            02S0175
*        SWASN=ON;                     /*ASSIGN FUNCTION             */
*        SWMOD=ON;                     /*USE EPA PASSED      @YM06161*/
         OI    SWASN,B'10000010'                                02S0177
*        TID=DSNQTID;                  /*ID OF DSENQ TABLE           */
         MVI   TID,X'0F'                                        02S0178
*        ASSIGN=ON;                    /*RECORD ASSIGNED     @YM06161*/
         OI    ASSIGN,B'00000001'                               02S0179
*        CALL IEFAB4F7                                          02S0180
*        (SWACTLS,ADDR(ASSGNEPA),0,ADDR(SVAID),                 02S0180
*               ADDR(BLOCK),BLOCKLEN,1); /*ASSIGN NEW DSENQ RECORD   */
         LA    @08,SWACTLS                                      02S0180
         ST    @08,@AL00001                                     02S0180
         LA    @08,ASSGNEPA                                     02S0180
         ST    @08,@TF00001                                     02S0180
         LA    @08,@TF00001                                     02S0180
         ST    @08,@AL00001+4                                   02S0180
         LA    @08,@CF00182                                     02S0180
         ST    @08,@AL00001+8                                   02S0180
         LA    @08,SVAID                                        02S0180
         ST    @08,@TF00002                                     02S0180
         LA    @08,@TF00002                                     02S0180
         ST    @08,@AL00001+12                                  02S0180
         LA    @08,BLOCK                                        02S0180
         ST    @08,@TF00003                                     02S0180
         LA    @08,@TF00003                                     02S0180
         ST    @08,@AL00001+16                                  02S0180
         LA    @08,BLOCKLEN                                     02S0180
         ST    @08,@AL00001+20                                  02S0180
         LA    @08,@CF00099                                     02S0180
         ST    @08,@AL00001+24                                  02S0180
         L     @15,@CV00211                                     02S0180
         LA    @01,@AL00001                                     02S0180
         BALR  @14,@15                                          02S0180
*        ASGNDSVA = SVA;               /*SAVE ASSIGNED SVA.  @YM08602*/
         MVC   ASGNDSVA(3),SVA                                  02S0181
*        IF JCTDETDA=ZERO THEN         /*DOES DSENQ TABLE EXIST      */
         L     @08,@PC00001+4                                   02S0182
         L     @08,JCTPTR(,@08)                                 02S0182
         ICM   @06,7,JCTDETDA(@08)                              02S0182
         BNZ   @RF00182                                         02S0182
*          DO;                         /*NO, START DSENQ CHAIN AT JCT*/
*            IF READALL=ON THEN        /*READ AND CHAIN ALL RECORDS  */
         L     @08,@PC00001                                     02S0184
         TM    READALL(@08),B'00010000'                         02S0184
         BNO   @RF00184                                         02S0184
*              FIRSTREC=BLOCK;         /*YES, SAVE ADDR OF FIRST REC */
         L     @08,@PC00001+36                                  02S0185
         L     @05,BLOCK                                        02S0185
         ST    @05,FIRSTREC(,@08)                               02S0185
*            IF EPAJCTEX=OFF &         /*JCT EPA ON CHAIN    @ZA04136*/
*               NEPAPROC = OFF THEN    /*CALLER WANTS EPA    @ZA04136*/
@RF00184 L     @08,@PC00001                                     02S0186
         TM    EPAJCTEX(@08),B'00000101'                        02S0186
         BNZ   @RF00186                                         02S0186
*              DO;                     /*NO, FILL IN EPA FOR JCT     */
*                SWBLKPTR=JCTPTR;      /*ADDRESS OF THE JCT          */
         L     @08,@PC00001+4                                   02S0188
         L     @08,JCTPTR(,@08)                                 02S0188
         ST    @08,SWBLKPTR(,SWEPAPTR)                          02S0188
*                SWVA=JCTDSKAD;        /*SVA OF JCT                  */
         MVC   SWVA(3,SWEPAPTR),JCTDSKAD(@08)                   02S0189
*                SWBLKID=JCTIDENT;     /*ID OF JCT                   */
         MVC   SWBLKID(1,SWEPAPTR),JCTIDENT(@08)                02S0190
*                SWLNGTH=BLOCKLEN;     /*LENGTH OF JCT               */
         L     @08,BLOCKLEN                                     02S0191
         ST    @08,SWLNGTH(,SWEPAPTR)                           02S0191
*                UPJCTEPA=ON;          /*EPA FOR JCT PUT ON CHAIN    */
         OI    UPJCTEPA,B'00100000'                             02S0192
*              END;                    /*END FILL IN EPA FOR JCT     */
*          END;                        /*END START CHAIN AT JCT      */
*        ELSE                          /*DSENQ TABLE ALREADY EXISTS  */
*          DO;                         /*CHAIN NEW RECORD            */
         B     @RC00182                                         02S0195
@RF00182 DS    0H                                               02S0196
*            DSNQNEXT=BLOCK;           /*ADDR OF NEW DSENQ RECORD    */
         L     @08,BLOCK                                        02S0196
         ST    @08,DSNQNEXT(,DSNQPTR)                           02S0196
*            SAVDSNQP = DSNQPTR;       /*SAVE CURNT BLK PTR. @ZA04136*/
         LR    SAVDSNQP,DSNQPTR                                 02S0197
*            IF NEPAPROC = OFF THEN    /*CALLER WANTS EPA?   @ZA04136*/
         L     @08,@PC00001                                     02S0198
         TM    NEPAPROC(@08),B'00000001'                        02S0198
         BNZ   @RF00198                                         02S0198
*              DO;                     /*YES-                @ZA04136*/
*                SWBLKPTR=DSNQPTR;     /*ADDR OLD DSENQ REC  @ZA04136*/
         ST    DSNQPTR,SWBLKPTR(,SWEPAPTR)                      02S0200
*                SWVA=DSNQSVA;         /*SVA OLD DSENQ REC   @ZA04136*/
         MVC   SWVA(3,SWEPAPTR),DSNQSVA(DSNQPTR)                02S0201
*                SWBLKID=DSNQID;       /*ID OF OLD DSENQ REC @ZA04136*/
         MVC   SWBLKID(1,SWEPAPTR),DSNQID(DSNQPTR)              02S0202
*                SWLNGTH=BLOCKLEN;     /*LENG OLD DSENQ REC  @ZA04136*/
         L     @08,BLOCKLEN                                     02S0203
         ST    @08,SWLNGTH(,SWEPAPTR)                           02S0203
*              END;                    /*                    @ZA04136*/
*          END;                        /*END CHAIN NEW RECORD        */
@RF00198 DS    0H                                               02S0206
*        DSNQPTR=BLOCK;                /*ADDRESS OF NEW RECORD       */
@RC00182 L     DSNQPTR,BLOCK                                    02S0206
*        DSNQENTP=ADDR(DSNQENTS);      /*ADDRESS OF FIRST ENTRY      */
         LA    DSNQENTP,DSNQENTS(,DSNQPTR)                      02S0207
*        DSNQSVA=SVA;                  /*SVA OF THIS RECORD          */
         MVC   DSNQSVA(3,DSNQPTR),SVA                           02S0208
*        DSNQID=DSNQTID;               /*DSENQ ID IS '0F'X           */
         MVI   DSNQID(DSNQPTR),X'0F'                            02S0209
*        DSNQFREE=LENGTH(DSNQENTS);    /*NUMBER OF AVAILABLE BYTES   */
         MVC   DSNQFREE(2,DSNQPTR),@CH00283                     02S0210
*      END;                            /*END ASSIGN DSENQ RECORD     */
*    ELSE                              /*ASSIGN IS NOT NECESSARY     */
*      DO;                             /*SAVE PTRS TO CHAIN EPA      */
         B     @RC00172                                         02S0212
@RF00172 DS    0H                                               02S0213
*        DSNQPTR=SAVEREC;              /*ADDRESS OF DSENQ RECORD WITH
*                                        ROOM FOR THE NEW ENTRY      */
         LR    DSNQPTR,SAVEREC                                  02S0213
*        IF NEPAPROC = OFF THEN        /*CALLER WANTS EPA?   @ZA04136*/
         L     @08,@PC00001                                     02S0214
         TM    NEPAPROC(@08),B'00000001'                        02S0214
         BNZ   @RF00214                                         02S0214
*          DO;                         /*YES -               @ZA04136*/
*             SWBLKPTR=DSNQPTR;        /*ADDR OF DSENQ REC   @ZA04136*/
         ST    DSNQPTR,SWBLKPTR(,SWEPAPTR)                      02S0216
*            SWVA=DSNQSVA;             /*SVA OF DSENQ RECORD @ZA04136*/
         MVC   SWVA(3,SWEPAPTR),DSNQSVA(DSNQPTR)                02S0217
*            SWBLKID=DSNQID;           /*ID OF DSENQ RECORD  @ZA04136*/
         MVC   SWBLKID(1,SWEPAPTR),DSNQID(DSNQPTR)              02S0218
*            SWLNGTH=BLOCKLEN;         /*LENGTH OF DSENQ REC @ZA04136*/
         L     @08,BLOCKLEN                                     02S0219
         ST    @08,SWLNGTH(,SWEPAPTR)                           02S0219
*          END;                        /*                    @ZA04136*/
*      END;                            /*END SAVE PTRS TO CHAIN EPA  */
@RF00214 DS    0H                                               02S0222
*    DSNQENTP=DSNQPTR+176-DSNQFREE;    /*ADDR OF AVAILABLE ENTRY     */
@RC00172 LA    DSNQENTP,176                                     02S0222
         ALR   DSNQENTP,DSNQPTR                                 02S0222
         SH    DSNQENTP,DSNQFREE(,DSNQPTR)                      02S0222
*    DSNQSTEP=STEPNUMB;                /*SET STEP NUMBER             */
         L     @08,@PC00001+20                                  02S0223
         IC    @05,STEPNUMB(,@08)                               02S0223
         STC   @05,DSNQSTEP(,DSNQENTP)                          02S0223
*    DSNQFLG1=CLEAR;                   /*CLEAR FLAG FIELD    @ZA10134*/
         MVC   DSNQFLG1(1,DSNQENTP),CLEAR                       02S0224
*    IF ENQSHR=ON THEN                 /*REQUEST FOR SHARED USAGE    */
         L     @08,@PC00001                                     02S0225
         TM    ENQSHR(@08),B'00000010'                          02S0225
         BNO   @RF00225                                         02S0225
*      DSNQSHR=ON;                     /*YES, SET SHARE IN DSENQ     */
         OI    DSNQSHR(DSNQENTP),B'10000000'                    02S0226
*    DSNQDSNL=REALNGTH;                /*LENGTH OF DSNAME            */
@RF00225 STC   REALNGTH,DSNQDSNL(,DSNQENTP)                     02S0227
*    DSNQDSN(1:REALNGTH)=DSNAME(1:REALNGTH); /*DSNAME                */
         LR    @08,REALNGTH                                     02S0228
         BCTR  @08,0                                            02S0228
         L     @05,@PC00001+8                                   02S0228
         EX    @08,@SM01330                                     02S0228
*    DSNQFREE=DSNQFREE-ENTRYLNG;       /*UPDATE AVAILABLE BYTES IN
*                                        RECORD                      */
         LH    @08,DSNQFREE(,DSNQPTR)                           02S0229
         SLR   @08,ENTRYLNG                                     02S0229
         STH   @08,DSNQFREE(,DSNQPTR)                           02S0229
*    IF NEPAPROC = OFF &               /*CALLER WANTS EPA?   @ZA04136*/
*      UPDATE = ON THEN                /*EPA CREATED?        @ZA04136*/
         L     @02,@PC00001                                     02S0230
         TM    NEPAPROC(@02),B'00000001'                        02S0230
         BNZ   @RF00230                                         02S0230
         TM    UPDATE,B'10000000'                               02S0230
         BNO   @RF00230                                         02S0230
*      DO;                             /*YES                 @ZA04136*/
*        EPADDR->SWCHNPTR=SWEPAPTR;    /*NEW EPA ON INPUT CH @ZA04136*/
         L     @15,@PC00001+12                                  02S0232
         L     @01,EPADDR(,@15)                                 02S0232
         ST    SWEPAPTR,SWCHNPTR(,@01)                          02S0232
*        EPADDR=SWEPAPTR;              /*UPDATE TO LAST EPA  @ZA04136*/
         ST    SWEPAPTR,EPADDR(,@15)                            02S0233
*        UPDATE=OFF;                   /*EPA UPDATED         @ZA04136*/
         NI    UPDATE,B'01111111'                               02S0234
*        IF UPJCTEPA=ON THEN           /*JCT EPA ADDED TO CH @ZA04136*/
         TM    UPJCTEPA,B'00100000'                             02S0235
         BNO   @RF00235                                         02S0235
*          EPAJCTEX=ON;                /*SET FUNCTION MAP    @ZA04136*/
         OI    EPAJCTEX(@02),B'00000100'                        02S0236
*      END;                            /*                    @ZA04136*/
@RF00235 DS    0H                                               02S0238
*  END;                                /*END ADD PROCESSING          */
@RF00230 DS    0H                                               02S0239
*IF CHSHRXCL=ON THEN                   /*CHANGE USE ATTRIBUTE NEEDED */
@RF00170 TM    CHSHRXCL,B'10000000'                             02S0239
         BNO   @RF00239                                         02S0239
*  DSNQSHR=OFF;                        /*TURN OFF SHARE INDICATOR    */
         NI    DSNQSHR(DSNQENTP),B'01111111'                    02S0240
*IF CHNGSTEP=ON THEN                   /*CHNG STEP NUMBER    @YM08191*/
@RF00239 TM    CHNGSTEP,B'01000000'                             02S0241
         BNO   @RF00241                                         02S0241
*  DSNQSTEP=STEPNUMB;                  /*STEP NUMB IN ENTRY  @YM08191*/
         L     @02,@PC00001+20                                  02S0242
         IC    @15,STEPNUMB(,@02)                               02S0242
         STC   @15,DSNQSTEP(,DSNQENTP)                          02S0242
*IF UPDATE=ON THEN                     /*RECORD UPDATED      @YM06161*/
@RF00241 TM    UPDATE,B'10000000'                               02S0243
         BNO   @RF00243                                         02S0243
*  DO;                                 /*YES, CHAIN EPA      @YM06161*/
*    SWBLKPTR=DSNQPTR;                 /*ADDRESS OF DSENQ RECORD     */
         ST    DSNQPTR,SWBLKPTR(,SWEPAPTR)                      02S0245
*    SWVA=DSNQSVA;                     /*SVA OF DSENQ RECORD         */
         MVC   SWVA(3,SWEPAPTR),DSNQSVA(DSNQPTR)                02S0246
*    SWBLKID=DSNQID;                   /*ID OF DSENQ RECORD  @ZA04136*/
         MVC   SWBLKID(1,SWEPAPTR),DSNQID(DSNQPTR)              02S0247
*    SWLNGTH=BLOCKLEN;                 /*LENGTH OF DSENQ RECORD      */
         L     @02,BLOCKLEN                                     02S0248
         ST    @02,SWLNGTH(,SWEPAPTR)                           02S0248
*    EPADDR->SWCHNPTR=SWEPAPTR;        /*PUT NEW EPA ON INPUT CHAIN  */
         L     @02,@PC00001+12                                  02S0249
         L     @01,EPADDR(,@02)                                 02S0249
         ST    SWEPAPTR,SWCHNPTR(,@01)                          02S0249
*    EPADDR=SWEPAPTR;                  /*UPDATE ADDRESS TO LAST EPA  */
         ST    SWEPAPTR,EPADDR(,@02)                            02S0250
*  END;                                /*END CHAIN EPA       @YM06161*/
*      END;                            /*END CREATE DSENQ ENTRY      */
@RF00243 DS    0H                                               01S0253
*    IF RETADDR=ON THEN                /*RETURN ENTRY ADDR REQUESTED */
@RF00155 L     @15,@PC00001                                     01S0253
         TM    RETADDR(@15),B'01000000'                         01S0253
         BNO   @RF00253                                         01S0253
*      DO;                             /*YES, RETURN  ADDRRESSES     */
*        ENTADDR=DSNQENTP;             /*SAVE ADDRESS OF DSENQ ENT   */
         L     @15,@PC00001+24                                  01S0255
         ST    DSNQENTP,ENTADDR(,@15)                           01S0255
*        RECADDR=DSNQPTR;              /*ADDRESS OF DSENQ RECORD     */
         ST    DSNQPTR,RECADDR(,@15)                            01S0256
*      END;                            /*END RETURN ADDRESSES        */
*    IF RETINDIC=ON THEN               /*RETURN INFO REQUESTED       */
@RF00253 L     @15,@PC00001                                     01S0258
         TM    RETINDIC(@15),B'00100000'                        01S0258
         BNO   @RF00258                                         01S0258
*      DO;                             /*YES, INDICATE PROCESS DONE  */
*        IF ADCHENQ=ON & DSNFOUND=OFF THEN /*DSNAME ENQ'D AND   01S0260
*                                        ADDED TO DSENQ TABLE        */
         TM    ADCHENQ(@15),B'00100000'                         01S0260
         BNO   @RF00260                                         01S0260
         TM    DSNFOUND,B'01000000'                             01S0260
         BNZ   @RF00260                                         01S0260
*          DEQDSNSW=ON;                /*DEQ NECESSARY ON ERROR      */
         L     @15,@PC00001+28                                  01S0261
         OI    DEQDSNSW(@15),B'00100000'                        01S0261
*        IF CHSHRXCL=ON & NOSHRXCL=ON THEN /*CHANGE ATTRIBUTE REQ'D  */
@RF00260 TM    CHSHRXCL,B'10000000'                             01S0262
         BNO   @RF00262                                         01S0262
         L     @15,@PC00001                                     01S0262
         TM    NOSHRXCL(@15),B'00000100'                        01S0262
         BNO   @RF00262                                         01S0262
*          NQEXCLSW=ON;                /*ENQ RET=CHANGE REQUIRED     */
         L     @15,@PC00001+28                                  01S0263
         OI    NQEXCLSW(@15),B'00001000'                        01S0263
*      END;                            /*END RETURN INDICATORS       */
@RF00262 DS    0H                                               01S0265
*    IF ADCHENQ=ON & (DSNFOUND=OFF ×   /*ENQ REQSTD AND NEED @YM08661*/
*       (NOSHRXCL=OFF & CHSHRXCL=ON)) THEN /*CHNG REQSTD,NEED@YM08661*/
@RF00258 L     @15,@PC00001                                     01S0265
         TM    ADCHENQ(@15),B'00100000'                         01S0265
         BNO   @RF00265                                         01S0265
         TM    DSNFOUND,B'01000000'                             01S0265
         BZ    @RT00265                                         01S0265
         TM    NOSHRXCL(@15),B'00000100'                        01S0265
         BNZ   @RF00265                                         01S0265
         TM    CHSHRXCL,B'10000000'                             01S0265
         BNO   @RF00265                                         01S0265
@RT00265 DS    0H                                               01S0266
*      DO;                             /*YES, BUILD PARMS AND ENQ    */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT - ENQDSN                                                 */
*/*                                                                  */
*/* DESCRIPTIVE NAME - ENQUEUE DATA SET NAME                         */
*/*                                                                  */
*/* FUNCTION - TO ENQUEUE THE DATA SET NAME                          */
*/*                                                                  */
*/* OPERATION - MOVE ENQ LIST FORM TO THE PARM LIST, GET ADDRESS     */
*/*             OF THE MINOR NAME (DSNAME), THE LENGTH OF THE MINOR  */
*/*             NAME, AND THE ADDRESS OF THE TCB FOR THE DIRECTED    */
*/*             ENQ.  DETERMINE THE ENQ OPTIONS FROM THE INPUT       */
*/*             AND ISSUE THE PROPER EXECUTE FORM OF THE MACRO.      */
*/*             IF THE REQUEST WAS TO CHANGE THE USE         @Y30QPPB*/
*/*             ATTRIBUTE, SEGMENT CHANGENQ PROCESSES THE    @Y30QPPB*/
*/*             REQUEST.                                     @Y30QPPB*/
*/*             IF THE ENQ WAS NOT SUCCESSFUL, THE TYPE OF REQUEST   */
*/*             IS DETERMINED AND ERRCODE SET APPROPRIATELY.         */
*/*                IF THE WAIT OPTION WAS REQUESTED, THE SEGMENT,    */
*/*                 WAITDSN, IS USED TO INFORM THE OPERATOR OF THE   */
*/*                 IMPENDING WAIT.                                  */
*/*                IF THE ENQ WAS TO CHANGE THE USE ATTRIBUTE,       */
*/*                 ERRCODE IS SET TO RCXCLUSV.                      */
*/*                ERRCODE IS SET TO RCDSUNAV IN ALL OTHER CASES.    */
*/*                                                                  */
*/* ENTRY - ENQDSN (INCLUDED SEGMENT)                                */
*/*                                                                  */
*/*  INPUT DATA - TCBPTR - TCB ADDRESS FOR DIRECTED ENQ              */
*/*               DSNQDSNL - LENGTH OF DSNAME                        */
*/*               DSNQDSN  - DSNAME                                  */
*/*               ENQEXCL SET ON FOR EXCLUSIVE USE                   */
*/*               CHSHRXCL SET ON TO CHANGE USE ATTRIBUTES           */
*/*               ENQWAIT SET ON TO WAIT FOR DSNAME AVAILABILITY     */
*/*               ENQFAIL SET OFF ASSUMING ENQ SUCCESSFUL            */
*/*                                                                  */
*/* EXIT - TO NEXT SEQUENTIAL INSTRUCTION                            */
*/*                                                                  */
*/*  OUTPUT DATA - ENQ SUCCESSFUL                                    */
*/*                  DSNAME ENQUED                                   */
*/*                ENQ UNSUCCESSFUL                                  */
*/*                  ERRCODE=RCXCLUSV IF CHANGE USE ATTRIBUTES       */
*/*                          REQUESTED                               */
*/*                  ERRCODE=RCDSUNAV IN ALL OTHER CASES             */
*/*                  ENQFAIL SET ON                                  */
*/*                                                                  */
*/********************************************************************/
*PARMS=ENQLIST;                        /*MOVE IN LIST FORM OF ENQ    */
         MVC   PARMS(12),ENQLIST                                02S0267
*RFY (R2,R3,R4) RESTRICTED;            /*RESTRICT REGS R2,R3,R4      */
*R2=TCBPTR;                            /*TCB ADDRESS FOR ENQ         */
         L     @05,@PC00001+16                                  02S0269
         L     R2,TCBPTR(,@05)                                  02S0269
*R3=ADDR(DSNQDSN);                     /*ADDRESS OF DSN- MINOR NAME  */
         LA    R3,DSNQDSN(,DSNQENTP)                            02S0270
*R4=DSNQDSNL;                          /*LENGTH OF DSN- MINOR NAME   */
         SLR   @15,@15                                          02S0271
         IC    @15,DSNQDSNL(,DSNQENTP)                          02S0271
         LR    R4,@15                                           02S0271
*ENQECB=ENQECB && ENQECB;              /*CLEAR ENQ ECB               */
         L     @05,ENQECB                                       02S0272
         LR    @14,@05                                          02S0272
         XR    @14,@05                                          02S0272
         ST    @14,ENQECB                                       02S0272
*IF CHSHRXCL=ON THEN                   /*CHANGE USE REQUIRED         */
         TM    CHSHRXCL,B'10000000'                             02S0273
         BNO   @RF00273                                         02S0273
*  DO;                                 /*YES, ENQ TO CHANGE USE      */
*/********************************************************************/
*/*                                                          @Y30QPPB*/
*/* SEGMENT - CHANGENQ                                       @Y30QPPB*/
*/*                                                          @Y30QPPB*/
*/* DESCRIPTIVE NAME - CHANGE ENQ USE ATTRIBUTE              @Y30QPPB*/
*/*                                                          @Y30QPPB*/
*/* FUNCTION - TO DETERMINE IF THE ENQ USE ATTRIBUTE CAN     @Y30QPPB*/
*/*            BE CHANGED FROM SHARE TO EXCLUSIVE            @Y30QPPB*/
*/*                                                          @Y30QPPB*/
*/* OPERATION - BUILD THE SSOB AND FUNCTION DEPENDENT AREA   @Y30QPPB*/
*/*             AND EXIT TO JES3 SUBSYSTEM TO DETERMINE IF   @Y30QPPB*/
*/*             IT IS POSSIBLE TO CHANGE THE USE ATTRIBUTE   @Y30QPPB*/
*/*             ACROSS PROCESSORS. IF IT IS POSSIBLE ACROSS  @Y30QPPB*/
*/*             PROCESSORS, ENQ WITH THE RET=CHNG OPTION IS  @Y30QPPB*/
*/*             ISSUED.                                      @Y30QPPB*/
*/*             IF IT IS NOT POSSIBLE ACROSS PROCESSORS, THE @Y30QPPB*/
*/*             RETURN CODE FIELD IN THE ENQ PARAMETER LIST  @Y30QPPB*/
*/*             IS MADE NON-ZERO SO THAT THE ENQDSN SEGMENT  @Y30QPPB*/
*/*             WILL SET THE PROPER RETURN CODE.             @Y30QPPB*/
*/*                                                          @Y30QPPB*/
*/* ENTRY - CHANGENQ (INCLUDED SEGMENT)                      @Y30QPPB*/
*/*                                                          @Y30QPPB*/
*/*  INPUT DATA - R2 - TCB ADDRESS                           @Y30QPPB*/
*/*               R3 - PTR TO DATASET NAME                   @Y30QPPB*/
*/*               R4 - LENGTH OF DATASET NAME                @Y30QPPB*/
*/*               PARMS - LIST FORM OF ENQ PARAMETER LIST    @Y30QPPB*/
*/*               DSNQDSNL - LENGTH OF DATA SET NAME         @Y30QPPB*/
*/*               DSNQDSN - DATA SET NAME                    @Y30QPPB*/
*/*                                                          @Y30QPPB*/
*/* EXIT - TO NEXT SEQUENTIAL INSTRUCTION                    @Y30QPPB*/
*/*                                                          @Y30QPPB*/
*/*  OUTPUT DATA - ENQDEQCD - SET TO ZERO IF ENQ SUCCESSFUL. @Y30QPPB*/
*/*                           IF ENQ FAILED OR THE JES3 EXIT @Y30QPPB*/
*/*                           INDICATED IT IS NOT CURRENTLY  @Y30QPPB*/
*/*                           POSSIBLE TO CHANGE THE USE     @Y30QPPB*/
*/*                           ATTRIBUTE, THIS FIELD CONTAINS @Y30QPPB*/
*/*                           A NON-ZERO VALUE.              @Y30QPPB*/
*/*                                                          @Y30QPPB*/
*/********************************************************************/
*SSOB=SSOB && SSOB;                    /*CLEAR SSOB          @Y30QPPB*/
         XC    SSOB(20),SSOB                                    03S0275
*FLAGS=FLAGS && FLAGS;                 /*CLEAR FLAGS         @Y30QPPB*/
         XC    FLAGS(2),FLAGS                                   03S0276
*SSOBID=SSOBCHAR;                      /*SSOB ID - 'SSOB'    @Y30QPPB*/
         MVC   SSOBID(4),SSOBCHAR                               03S0277
*SSOBLEN=LENGTH(SSOB);                 /*LENGTH OF SSOB      @Y30QPPB*/
         MVC   SSOBLEN(2),@CH00403                              03S0278
*SSOBFUNC=SSOBNQCD;                    /*FUNC TO CHANGE ENQ  @Y30QPPB*/
         MVC   SSOBFUNC(2),@CH01281                             03S0279
*SSOBINDV=ADDR(SSNQ);                  /*ADDR FUNCTION AREA  @Y30QPPB*/
         LA    @05,SSNQ                                         03S0280
         ST    @05,SSOBINDV                                     03S0280
*SSNQ=SSNQ && SSNQ;                    /*CLEAR FUNCTION AREA @Y30QPPB*/
         XC    SSNQ(16),SSNQ                                    03S0281
*SSNQLEN=LENGTH(SSNQ);                 /*LENGTH FUNCTN AREA  @Y30QPPB*/
         MVC   SSNQLEN(2),@CH00066                              03S0282
*SSNQDSNP=ADDR(JESDSNAM);              /*ADDR DSNAME BUFFER  @Y30QPPB*/
         LA    @05,JESDSNAM                                     03S0283
         ST    @05,SSNQDSNP                                     03S0283
*SSNQFLGP=ADDR(FLAGS);                 /*SDDR FLAG FIELD     @Y30QPPB*/
         LA    @05,FLAGS                                        03S0284
         ST    @05,SSNQFLGP                                     03S0284
*JESDSNAM='';                          /*BLANK DSNAME BUFFER @Y30QPPB*/
         MVI   JESDSNAM,C' '                                    03S0285
         MVC   JESDSNAM+1(43),JESDSNAM                          03S0285
*JESDSNAM(1:DSNQDSNL)=DSNQDSN(1:DSNQDSNL); /*DSNAME TO BUFFER@Y30QPPB*/
         BCTR  @15,0                                            03S0286
         EX    @15,@SM01332                                     03S0286
*SHRTOXCL=ON;                          /*CHANGE SHR TO EXCL  @Y30QPPB*/
*                                                               03S0287
         OI    SHRTOXCL,B'10000000'                             03S0287
* /* ? IEFSSREQ  (SSOB);*/                                      03S0288
*/*                                           */                03S0288
*/*  PASS CONTROL TO JOB ENTRY SUBSYSTEM TO   */                03S0288
*/*  PROCESS REQUEST -                        */                03S0288
*/*                                           */                03S0288
*/*    INPUT - REGISTER 1 POINTS TO A ONE-    */                03S0288
*/*            WORD PARAMETER LIST WHICH      */                03S0288
*/*            POINTS TO THE SSOB             */                03S0288
*/*                                           */                03S0288
*CALL SSREQ(SSOB);                     /*INVOKE JES3         @Y30QPPB*/
         LA    @05,SSOB                                         03S0288
         ST    @05,@AL00001                                     03S0288
         MVI   @AL00001,X'80'                                   03S0288
         L     @05,CVTPTR                                       03S0288
         L     @05,CVTJESCT(,@05)                               03S0288
         L     @15,JESSSREQ(,@05)                               03S0288
         LA    @01,@AL00001                                     03S0288
         BALR  @14,@15                                          03S0288
*IF SSOBRETN^=SSOBNQOK THEN            /*OK TO TRY ENQ CHNG? @Y30QPPB*/
         L     @05,SSOBRETN                                     03S0289
         LTR   @05,@05                                          03S0289
         BZ    @RF00289                                         03S0289
*  ENQDEQCD=ERROR;                     /*NO, SET ERROR INDIC @Y30QPPB*/
         IC    @05,ERROR                                        03S0290
         STC   @05,ENQDEQCD                                     03S0290
*ELSE                                  /*TRY CHANGE ENQ USE  @Y30QPPB*/
*  DO;                                 /*ENQ TO CHANGE USE   @Y30QPPB*/
         B     @RC00289                                         03S0291
@RF00289 DS    0H                                               03S0292
*    GENERATE;                         /*ISSUE ENQ           @Y30QPPB*/
     ENQ (MAJOR,(3),E,(4),SYSTEM),RET=CHNG,TCB=(2),MF=(E,PARMS)
*  END;                                /*END ENQ TO CHANGE   @Y30QPPB*/
*  END;                                /*END ENQ CHANGE USE ATTRIBUTE*/
*ELSE                                  /*CHANGE USE NOT REQUIRED     */
*  DO;                                 /*ENQ THE DSNAME              */
         B     @RC00273                                         02S0295
@RF00273 DS    0H                                               02S0296
*    IF ENQWAIT=OFF THEN               /*WAIT FUNCTION NOT REQUESTED */
         L     @05,@PC00001                                     02S0296
         TM    ENQWAIT(@05),B'10000000'                         02S0296
         BNZ   @RF00296                                         02S0296
*      IF ENQEXCL=ON THEN              /*EXCLUSIVE USE REQUEST       */
         TM    ENQEXCL(@05),B'00000001'                         02S0297
         BNO   @RF00297                                         02S0297
*        DO;                           /*YES, PERFORM ENQ            */
*          GENERATE;                   /*EXCLUSIVE 'NO WAIT' ENQ     */
           ENQ (MAJOR,(3),E,(4),SYSTEM),RET=USE,TCB=(2),MF=(E,PARMS)
*        END;                          /*END EXCLUSIVE 'NO WAIT' ENQ */
*      ELSE                            /*NOT EXCLUSIVE USE REQUEST   */
*        DO;                           /*ENQ FOR SHARED USE          */
         B     @RC00297                                         02S0301
@RF00297 DS    0H                                               02S0302
*          GENERATE;                   /*SHARED 'NO WAIT' ENQ        */
           ENQ (MAJOR,(3),S,(4),SYSTEM),RET=USE,TCB=(2),MF=(E,PARMS)
*        END;                          /*END SHARED 'NO WAIT' ENQ    */
*    ELSE                              /*WAIT FUNCTION REQUESTED     */
*      DO;                             /*YES, DO 'WAIT' ENQ          */
         B     @RC00296                                         02S0304
@RF00296 DS    0H                                               02S0305
*        PARMS=ENQWAITL;               /*MOVE IN 'WAIT' LIST FORM    */
         MVC   PARMS(12),ENQWAITL                               02S0305
*        IF ENQEXCL=ON THEN            /*EXCLUSIVE USE REQUEST       */
         L     @05,@PC00001                                     02S0306
         TM    ENQEXCL(@05),B'00000001'                         02S0306
         BNO   @RF00306                                         02S0306
*          DO;                         /*YES, PERFORM ENQ            */
*            GENERATE;                 /*EXCLUSIVE 'WAIT' ENQ        */
             ENQ (MAJOR,(3),E,(4),SYSTEM),ECB=ENQECB,MF=(E,PARMS)
*          END;                        /*END EXCLUSIVE 'WAIT' ENQ    */
*        ELSE                          /*NOT EXCLUSIVE USE REQUEST   */
*          DO;                         /*ENQ FOR SHARED USE          */
         B     @RC00306                                         02S0310
@RF00306 DS    0H                                               02S0311
*            GENERATE;                 /*SHARED 'WAIT' ENQ           */
             ENQ (MAJOR,(3),S,(4),SYSTEM),ECB=ENQECB,MF=(E,PARMS)
*          END;                        /*END SHARED 'WAIT' ENQ       */
*      END;                            /*END 'WAIT' ENQ              */
@RC00306 DS    0H                                               02S0314
*  END;                                /*END ENQ ON DSNAME           */
@RC00296 DS    0H                                               02S0315
*IF ENQDEQCD^=ZERO THEN                /*ERROR ON ENQ                */
@RC00273 CLI   ENQDEQCD,0                                       02S0315
         BE    @RF00315                                         02S0315
*  DO;                                 /*YES, SET PROPER RETURN CODE */
*    IF ENQWAIT=ON & CHSHRXCL=OFF THEN /*REQUEST TO WAIT, NOT CHANGE */
         L     @05,@PC00001                                     02S0317
         TM    ENQWAIT(@05),B'10000000'                         02S0317
         BNO   @RF00317                                         02S0317
         TM    CHSHRXCL,B'10000000'                             02S0317
         BNZ   @RF00317                                         02S0317
*      DO;                             /*YES, TELL OPERATOR AND WAIT */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT - WAITDSN                                                */
*/*                                                                  */
*/* DESCRIPTIVE NAME - WAIT FOR DSNAME ENQUEUE                       */
*/*                                                                  */
*/* FUNCTION - TO WAIT UNTIL THE UNAVAILABLE RESOURCE IS AVAILABLE   */
*/*            OR THE OPERATOR INDICATES THAT THE RESOURCE SHOULD    */
*/*            NOT BE WAITED FOR                                     */
*/*                                                                  */
*/* OPERATION - MOVE THE LIST FORMS OF THE WTO AND WTOR      @ZA13227*/
*/*             MESSAGES TO AUTOMATIC STORAGE. MOVE THE      @ZA13227*/
*/*             JOBNAME, STEPNAME, AND DATA SET NAME TO THE  @ZA13227*/
*/*             APPROPRIATE MESSAGE. ISSUE THE WTO'S AND,    @ZA13227*/
*/*             ISSUE THE WTOR TO INFORM THE OPERATOR THAT A WAIT    */
*/*             IS TAKING PLACE AND ALLOW THE OPERATOR TO            */
*/*             DISCONTINUE THE WAIT BY REPLYING 'NO' TO THE MESSAGE.*/
*/*             AT THIS POINT, THE MODULE WAITS FOR ONE OF THE       */
*/*             FOLLOWING TO OCCUR -                                 */
*/*               .CASE 1 - THE RESOURCE BECOMES AVAILABLE (THE ENQ  */
*/*                         ECB IS POSTED).   OR                     */
*/*               .CASE 2 - THE OPERATOR REPLIES TO THE MESSAGE (THE */
*/*                         WTOR ECB IS POSTED).                     */
*/*             IN CASE 1 THE OUTSTANDING WTOR IS DELETED VIA THE    */
*/*             DOM FACILITY.                                        */
*/*             IN CASE 2 THE REPLY MAY BE ENTERED BY THE OPERATOR IN*/
*/*             LOWER OR UPPER CASE.  IN ORDER TO COMPARE WITH UPPER */
*/*             CASE THE REPLY IN THE BUFFER IS CHANGED TO UPPER CASE*/
*/*             BY OR'ING EACH CHARACTER IN THE REPLY WITH X'40'.    */
*/*             (THIS CHANGES LOWER TO UPPER CASE OR LEAVES UPPER    */
*/*             CASE UNCHANGED.)  THE BUFFER IS COMPARED FOR 'NO'. IF*/
*/*             IT IS NOT FOUND, THE REPLY BUFFER IS BLANKED, THE    */
*/*             WTOR ECB IS CLEARED, AND THE WTO'S AND       @ZA13227*/
*/*             THE WTOR MESSAGES ARE ISSUED AGAIN.          @ZA13227*/
*/*             IF IT IS FOUND, THE OUTSTANDING ENQ IS DELETED VIA   */
*/*             DEQ.  THE DEQ IS NOT DONE IN THIS SEGMENT BUT THE    */
*/*             ERROR CODE IS SET TO RCDSUNAV AND THE ENQFAIL SWITCH */
*/*             IS SET ON.  THIS SWITCH WILL CAUSE ANOTHER SEGMENT,  */
*/*             DEQDSN, TO DEQ THE DATASET NAME AND REMOVE THE ENTRY */
*/*             FROM THE DSENQ TABLE.                                */
*/*             NOTE - IF BOTH ECBS ARE SIMULTANEOUSLY POSTED, THE   */
*/*                    ENQ ECB WILL BE HONORED.  THE RATIONALE FOR   */
*/*                    THIS DECISION IS THAT THE OBJECTIVE OF THE    */
*/*                    WTOR IS TO PROVIDE A MECHANISM WHEREBY THE    */
*/*                    OPERATOR MAY GET ALLOCATION OUT OF THE WAIT   */
*/*                    STATE, WHICH, WHEN BOTH ECBS ARE POSTED, HAS  */
*/*                    BEEN ACCOMPLISHED.  IT IS NOT INTENDED AS A   */
*/*                    MECHANISM WHEREBY THE OPERATOR IS BEING       */
*/*                    ASKED TO AUTHORIZE THE USER'S USAGE OF THE    */
*/*                    REQUESTED RESOURCE.                           */
*/*                                                                  */
*/* ENTRY - WAITDSN (INCLUDED SEGMENT)                               */
*/*                                                                  */
*/*  INPUT DATA - JOBNAME - THE INPUT JOBNAME TO BE USED IN THE MSG  */
*/*               STEPNAME - THE INPUT STEPNAME TO BE USED IN THE MSG*/
*/*               DSNQDSNL - LENGTH OF INPUT DSNAME          @ZA13227*/
*/*               DSNQDSN - INPUT DSNAME FOR MESSAGE         @ZA13227*/
*/*                                                                  */
*/* EXIT - TO NEXT SEQUENTIAL INSTRUCTION                            */
*/*                                                                  */
*/*  OUTPUT DATA - DSNAME ENQUEUED IF THE RESOURCE BECAME AVAILABLE  */
*/*                MESSAGE TO THE OPERATOR INDICATING WAIT FOR       */
*/*                  DATASET IS NECESSARY                            */
*/*                IF OPERATOR REPLIED 'NO' TO THE MESSAGE -         */
*/*                  ENQFAIL IS ON INDICATING DEQ IS NECESSARY       */
*/*                  ERRCODE SET TO RCCANCEL INDICATING THE  @YM05564*/
*/*                          OPERATOR DID NOT ALLOW WAIT     @YM05564*/
*/*                                                                  */
*/* NOTE - BEFORE ISSUING THE WTOR THE LENGTH OF THE WTOR MUST BE    */
*/*        CALCULATED.  WTORLNGH IS THE LENGTH OF THE MESSAGE AS     */
*/*        INITIALIZED IN THE LIST FORM OF THE WTOR AND INCLUDES THE */
*/*        MAXIMUM LENGTH FOR BOTH JOBNAME AND STEPNAME.  IN ORDER TO*/
*/*        CORRECTLY ADJUST THE LENGTH FOR VARIABLE LENGTH JOBNAME   */
*/*        AND STEPNAME, THE MAXIMUM LENGTH OF BOTH JOBNAME AND      */
*/*        STEPNAME IS SUBTRACTED FROM THE LENGTH IN THE LIST FORM.  */
*/*        THE ACTUAL LENGTHS OF THE JOBNAME AND STEPNAME ARE THEN   */
*/*        ADDED TO THAT RESULT.                                     */
*/********************************************************************/
*WTORPARM(1:20)=WTORLIST(1:20);        /*MOVE IN HEADER OF WTOR LIST */
         L     @05,@CV00212                                     03S0319
         MVC   WTORPARM(20),WTORLIST(@05)                       03S0319
*DO JOBNLNG=LENGTH(JOBNAME) TO 1 BY -1 WHILE(JOBNAME(JOBNLNG)=BLANK);
         LA    JOBNLNG,8                                        03S0320
@DL00320 L     @08,@PC00001+40                                  03S0320
         L     @08,MSGPARMP(,@08)                               03S0320
         ALR   @08,JOBNLNG                                      03S0320
         BCTR  @08,0                                            03S0320
         CLI   JOBNAME(@08),C' '                                03S0320
         BNE   @DC00320                                         03S0320
*END;                                  /*CALCULATE LENGTH OF JOBNAME */
         BCTR  JOBNLNG,0                                        03S0321
         LTR   JOBNLNG,JOBNLNG                                  03S0321
         BP    @DL00320                                         03S0321
@DC00320 DS    0H                                               03S0322
*DO STEPNLNG=LENGTH(STEPNAME) TO 1 BY -1                        03S0322
*                          WHILE(STEPNAME(STEPNLNG)=BLANK);     03S0322
         LA    STEPNLNG,8                                       03S0322
@DL00322 L     @05,@PC00001+40                                  03S0322
         L     @05,MSGPARMP(,@05)                               03S0322
         ALR   @05,STEPNLNG                                     03S0322
         CLI   STEPNAME-1(@05),C' '                             03S0322
         BNE   @DC00322                                         03S0322
*END;                                  /*CALCULATE LENGTH OF STEPNAME*/
         BCTR  STEPNLNG,0                                       03S0323
         LTR   STEPNLNG,STEPNLNG                                03S0323
         BP    @DL00322                                         03S0323
@DC00322 DS    0H                                               03S0324
*WTORPTR=ADDR(WTORJOB);                /*ADDRESS OF JOBNAME IN MSG   */
         LA    WTORPTR,WTORJOB                                  03S0324
*WTORBUF(1:JOBNLNG)=JOBNAME(1:JOBNLNG); /*MOVE JOBNAME TO BUFFER     */
         LR    @15,JOBNLNG                                      03S0325
         BCTR  @15,0                                            03S0325
         L     @14,@PC00001+40                                  03S0325
         L     @14,MSGPARMP(,@14)                               03S0325
         EX    @15,@SM01334                                     03S0325
*WTORPTR=WTORPTR+JOBNLNG;              /*POINT BEYOND JOBNAME        */
         ALR   WTORPTR,JOBNLNG                                  03S0326
*WTORBUF(1)=BLANK;                     /*PLACE BLANK AFTER JOBNAME   */
         MVI   WTORBUF(WTORPTR),C' '                            03S0327
*WTORPTR=WTORPTR+1;                    /*POINT BEYOND BLANK          */
         LA    @15,1                                            03S0328
         ALR   WTORPTR,@15                                      03S0328
*IF STEPNAME(1)^=BLANK THEN            /*WAS STEPNAME SPECIFIED?     */
         CLI   STEPNAME(@14),C' '                               03S0329
         BE    @RF00329                                         03S0329
*  DO;                                 /*YES, MOVE IT TO MSG BUFFER  */
*    WTORBUF(1:STEPNLNG)=STEPNAME(1:STEPNLNG); /*STEPNAME TO BUFFER  */
         LR    @01,STEPNLNG                                     03S0331
         BCTR  @01,0                                            03S0331
         EX    @01,@SM01336                                     03S0331
*    WTORPTR=WTORPTR+STEPNLNG;         /*POINT BEYOND STEPNAME       */
         ALR   WTORPTR,STEPNLNG                                 03S0332
*    WTORBUF(1)=BLANK;                 /*PLACE BLANK AFTER JOBNAME   */
         MVI   WTORBUF(WTORPTR),C' '                            03S0333
*    WTORPTR=WTORPTR+1;                /*POINT BEYOND BLANK          */
         ALR   WTORPTR,@15                                      03S0334
*  END;                                /*END MOVE IT TO MSG BUFFER   */
*ELSE                                  /*STEPNAME IS BLANK           */
*  STEPNLNG=ZERO;                      /*SET STEPNAME LNGTH TO ZERO  */
         B     @RC00329                                         03S0336
@RF00329 SLR   STEPNLNG,STEPNLNG                                03S0336
*WTORBUF(1:50)=WTORLIST(39:88);        /*MOVE REMAINDER OF MESSAGE   */
@RC00329 L     @15,@CV00212                                     03S0337
         MVC   WTORBUF(50,WTORPTR),WTORLIST+38(@15)             03S0337
*WTORLNGH=WTORLNGH-(LENGTH(JOBNAME)+LENGTH(STEPNAME))+JOBNLNG+STEPNLNG;
         LH    @05,WTORLNGH                                     03S0338
         SL    @05,@CF00066                                     03S0338
         ALR   @05,JOBNLNG                                      03S0338
         ALR   @05,STEPNLNG                                     03S0338
         STH   @05,WTORLNGH                                     03S0338
*                                      /*CALCULATE THE LENGTH OF
*                                        THE MESSAGE.  SEE NOTE IN
*                                        SPEC FOR DETAILS.           */
*IF STEPNLNG=ZERO THEN                 /*WAS STEPNAME ALL BLANK      */
         LTR   STEPNLNG,STEPNLNG                                03S0339
         BNZ   @RF00339                                         03S0339
*  WTORLNGH=WTORLNGH-1;                /*YES, NO BLANK AFTER STEPNAME*/
         BCTR  @05,0                                            03S0340
         STH   @05,WTORLNGH                                     03S0340
*RFY WTOLIST BASED(ADDR(IEF861I));      /*BASE WTOLIST       @ZA13227*/
@RF00339 DS    0H                                               03S0342
*MSG861I=WTOLIST(1:LENGTH(MSG861I));    /*MOVE IN LIST FORM  @ZA13227*/
         L     @08,@CV00213                                     03S0342
         MVC   MSG861I(73),WTOLIST(@08)                         03S0342
*RFY WTOLIST BASED(ADDR(IEF863I));      /*BASE WTOLIST       @ZA13227*/
*MSG863I=WTOLIST(1:LENGTH(MSG863I));    /*MOVE IN LIST FORM  @ZA13227*/
         L     @08,@CV00214                                     03S0344
         MVC   MSG863I(66),WTOLIST(@08)                         03S0344
*M861JOBN=JOBNAME(1:JOBNLNG);           /*MOVE IN JOBNAME    @ZA13227*/
         MVI   M861JOBN+1,C' '                                  03S0345
         MVC   M861JOBN+2(6),M861JOBN+1                         03S0345
         LR    @08,JOBNLNG                                      03S0345
         BCTR  @08,0                                            03S0345
         L     @05,@PC00001+40                                  03S0345
         L     @05,MSGPARMP(,@05)                               03S0345
         EX    @08,@SM01338                                     03S0345
*M863DSN=DSNQDSN(1:DSNQDSNL);           /*MOVE IN DSNAME     @ZA13227*/
         MVI   M863DSN+1,C' '                                   03S0346
         MVC   M863DSN+2(42),M863DSN+1                          03S0346
         SLR   @08,@08                                          03S0346
         IC    @08,DSNQDSNL(,DSNQENTP)                          03S0346
         LR    @05,@08                                          03S0346
         BCTR  @05,0                                            03S0346
         EX    @05,@SM01340                                     03S0346
*M861LEN=M861LEN-LENGTH(M861JOBN)+JOBNLNG; /*NEW LENGTH OF MESSAGE
*                                                            @ZA13227*/
         LH    @05,M861LEN                                      03S0347
         SL    @05,@CF00057                                     03S0347
         ALR   @05,JOBNLNG                                      03S0347
         STH   @05,M861LEN                                      03S0347
*M863LEN=M863LEN-LENGTH(M863DSN)+DSNQDSNL; /*NEW LENGTH OF MESSAGE
*                                                            @ZA13227*/
         LH    @09,M863LEN                                      03S0348
         SL    @09,@CF00142                                     03S0348
         ALR   @09,@08                                          03S0348
         STH   @09,M863LEN                                      03S0348
*MSG861I(M861LEN+1:M861LEN+5)=M861RTCD;/*MOVE ROUTE CODE     @ZA13227*/
         LA    @01,MSG861I(@05)                                 03S0349
         MVC   @TS00001(4),M861RTCD                             03S0349
         MVI   4(@01),C' '                                      03S0349
         MVC   0(4,@01),@TS00001                                03S0349
*MSG863I(M863LEN+1:M863LEN+5)=M863RTCD;/*MOVE ROUTE CODE     @ZA13227*/
         LA    @05,MSG863I(@09)                                 03S0350
         MVC   @TS00001(4),M863RTCD                             03S0350
         MVI   4(@05),C' '                                      03S0350
         MVC   0(4,@05),@TS00001                                03S0350
*ENDWAIT=OFF;                          /*INITIALIZE END SWITCH       */
         NI    ENDWAIT,B'11111101'                              03S0351
*DO WHILE(ENDWAIT=OFF);                /*ISSUE WTOR AND WAIT         */
         B     @DE00352                                         03S0352
@DL00352 DS    0H                                               03S0353
*  WTORECB=WTORECB && WTORECB;         /*CLEAR WTOR ECB              */
         L     @09,WTORECB                                      03S0353
         LR    @05,@09                                          03S0353
         XR    @05,@09                                          03S0353
         ST    @05,WTORECB                                      03S0353
*  REPLYBUF=BLANKS;                    /*BLANK THE REPLY BUFFER      */
         MVC   REPLYBUF(2),BLANKS                               03S0354
*  RFY R1 RESTRICTED;                  /*RESTRICT REGISTER 1         */
*  GENERATE                            /*INFORM OPERATOR OF     03S0356
*                                        WAIT                @ZA13227*/
*    REFS(MSG861I,MSG863I,REPLYBUF,WTORECB,WTORPARM);   /*   @ZA13227*/
   WTO MF=(E,MSG861I)                                         @ZA13227
   WTO MF=(E,MSG863I)                                         @ZA13227
   WTOR ,REPLYBUF,2,WTORECB,MF=(E,WTORPARM)
*  MSGID=R1;                           /*SAVE MESSAGE ID FOR DOM     */
         LR    MSGID,R1                                         03S0357
*  RFY R1 UNRESTRICTED;                /*RELEASE REGISTER 1          */
*  WAITWTOR=ADDR(WTORECB);             /*ADDRESS OF WTOR ECB         */
         LA    @09,WTORECB                                      03S0359
         ST    @09,WAITWTOR                                     03S0359
*  WAITENQ=ADDR(ENQECB);               /*ADDRESS OF ENQECB           */
         LA    @09,ENQECB                                       03S0360
         ST    @09,WAITENQ                                      03S0360
*  WAITEND=ON;                         /*INDICATE END OF ECB LIST    */
         OI    WAITEND,B'10000000'                              03S0361
*  GENERATE;                                                    03S0362
   WAIT 1,ECBLIST=WAITECBS,LONG=YES    WAIT FOR EITHER EVENT @YM05089
*  IF ECBPOST=ON THEN                  /*RESOURCE AVAILABLE NOW      */
         TM    ECBPOST,B'01000000'                              03S0363
         BNO   @RF00363                                         03S0363
*    DO;                               /*YES, DELETE OPERATOR MSG,DOM*/
*      RFY R1 RESTRICTED;              /*RESTRICT REGISTER 1         */
*      R1=MSGID;                       /*ID OF WTOR MESSAGE          */
         LR    R1,MSGID                                         03S0366
*      GENERATE;                       /*DELETE THE OUTSTANDING MSG  */
       DOM MSG=(1),REPLY=YES
*      RFY R1 UNRESTRICTED;            /*RELEASE REGISTER 1          */
*      ENDWAIT=ON;                     /*TERMINATE WAIT LOOP         */
         OI    ENDWAIT,B'00000010'                              03S0369
*    END;                              /*END DELETE OPERATOR MESSAGE */
*  ELSE                                /*OPERATOR REPLIED TO MSG     */
*    DO;                               /*CHECK REPLY-IT SHOULD BE NO */
         B     @RC00363                                         03S0371
@RF00363 DS    0H                                               03S0372
*      REPLYBUF=REPLYBUF×FOLDMASK;     /*BE SURE REPLY IS UPPER CASE
*                                        SINCE COMPARE IS WITH UPPER
*                                        CASE                        */
         OC    REPLYBUF(2),FOLDMASK                             03S0372
*      IF REPLYBUF=NO THEN             /*IS REPLY CORRECT            */
         CLC   REPLYBUF(2),NO                                   03S0373
         BNE   @RF00373                                         03S0373
*        DO;                           /*YES,DELETE OUTSTANDING ENQ  */
*          ENQFAIL=ON;                 /*INDICATE ENQ FAIL, NEED DEQ */
         OI    ENQFAIL,B'00010000'                              03S0375
*          ERRCODE=RCCANCEL;           /*OP DENIED WAIT RET CODE
*                                                            @YM05564*/
         L     @05,@PC00001+32                                  03S0376
         MVC   ERRCODE(2,@05),@CH00538                          03S0376
*          ENDWAIT=ON;                 /*TERMINATE WAIT LOOP         */
         OI    ENDWAIT,B'00000010'                              03S0377
*        END;                          /*END DELETE OUTSTANDING END  */
*      ELSE;                           /*REPLY INCORRECT- WTOR AGAIN */
@RF00373 DS    0H                                               03S0380
*    END;                              /*END CHECK OPERATOR REPLY    */
*END;                                  /*END ISSUE WTOR AND WAIT     */
@RC00363 DS    0H                                               03S0381
@DE00352 TM    ENDWAIT,B'00000010'                              03S0381
         BZ    @DL00352                                         03S0381
*      END;                            /*END TELL OPERATOR AND WAIT  */
*    ELSE                              /*ENQ FAILED, NO WAIT         */
*      DO;                             /*END SET ENQ FAIL INDICATORS */
         B     @RC00317                                         02S0383
@RF00317 DS    0H                                               02S0384
*        ENQFAIL=ON;                   /*INDICATE ENQ FAILED         */
         OI    ENQFAIL,B'00010000'                              02S0384
*        IF CHSHRXCL=ON THEN           /*CHANGE USE REQUIRED         */
         TM    CHSHRXCL,B'10000000'                             02S0385
         BNO   @RF00385                                         02S0385
*          ERRCODE=RCXCLUSV;           /*YES, CHANGE NOT POSSIBLE NOW*/
         L     @05,@PC00001+32                                  02S0386
         MVC   ERRCODE(2,@05),@CH00426                          02S0386
*        ELSE                          /*REGULAR ENQ ON DSNAME       */
*          ERRCODE=RCDSUNAV;           /*DSNAME NOT AVAILABLE        */
         B     @RC00385                                         02S0387
@RF00385 L     @05,@PC00001+32                                  02S0387
         MVC   ERRCODE(2,@05),@CH00428                          02S0387
*      END;                            /*END SET ENQ FAIL INDICATORS */
@RC00385 DS    0H                                               02S0389
*  END;                                /*END ENQ ERROR               */
@RC00317 DS    0H                                               02S0390
*      END;                            /*END ENQ DSN PROCESS         */
@RF00315 DS    0H                                               01S0391
*  END;                                /*END ADD OR CHANGE PROCESS   */
@RF00265 DS    0H                                               01S0392
*IF ENQFAIL=ON ×                       /*ENQUEUE FUNCTION FAILED OR  */
*   DELEONLY=ON × DELEDEQ=ON THEN      /*DELETE FUNCTION REQUESTED   */
@RF00141 TM    ENQFAIL,B'00010000'                              01S0392
         BO    @RT00392                                         01S0392
         L     @05,@PC00001                                     01S0392
         TM    DELEONLY(@05),B'00011000'                        01S0392
         BZ    @RF00392                                         01S0392
@RT00392 DS    0H                                               01S0393
*  DO;                                 /*YES, UPDATE DSENQ ENTRY     */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT - DEQDSN                                                 */
*/*                                                                  */
*/* DESCRIPTIVE NAME - DEQUEUE DATA SET NAME                         */
*/*                                                                  */
*/* FUNCTION - TO DEQUEUE THE DATA SET NAME IF NECESSARY AND         */
*/*            DELETE THE ENTRY FROM THE DSENQ TABLE.                */
*/*                                                                  */
*/* OPERATION - DETERMINE IF THE DATASET NAME IS NEEDED IN A         */
*/*             SUBSEQUENT STEP.  IF SO, DEQ IS NOT POSSIBLE, AND NO */
*/*             FURTHER PROCESSING IS DONE.  IF NOT, DEQ IS POSSIBLE.*/
*/*             IF THE DELETE AND DEQ FUNCTION IS REQUESTED, DEQ THE */
*/*             DATASET NAME.                                        */
*/*             NOTE - IF DEQ FUNCTION IS REQUESTED, BUT THE DSNAME  */
*/*                    LENGTH IN THE DSENQ TABLE ENTRY IS ZERO, DEQ  */
*/*                    IS AVOIDED TO PREVENT A POSSIBLE ABEND. THIS  */
*/*                    CASE CAN ONLY HAPPEN IF THE ESTAE ROUTINE GETS*/
*/*                    CONTROL AFTER THE ENTRY IS REMOVED FROM THE   */
*/*                    DSENQ TABLE AND BEFORE DEQDSNSW IS SET OFF IN */
*/*                    THE CASE OF AN ENQ FAILURE.                   */
*/*             INITIALIZE THE DEQ PARAMETER LIST WITH LIST FORM OF  */
*/*             MACRO. INITIALIZE THE POINTER TO THE MINOR NAME      */
*/*             (DSNAME), THE LENGTH OF THE MINOR NAME, THE TCB      */
*/*             ADDRESS, AND DEQUEUE.                                */
*/*             IF THE DELETE FUNCTION WAS REQUESTED OR THE ENQ      */
*/*             FAILED AFTER AN ENTRY HAD BEEN ADDED TO THE DSENQ    */
*/*             TABLE, REMOVE THE DATASET NAME ENTRY FROM THE PROPER */
*/*             RECORD OF THE DSENQ TABLE BY MOVING ALL ENTRIES      */
*/*             FOLLOWING THIS ONE OVER THIS ONE AND ZEROING THE     */
*/*             BYTES BEYOND THE LAST ENTRY.                         */
*/*             IF ENQ FAILED AFTER THE USE ATTRIBUTE HAD BEEN       */
*/*             CHANGED FROM SHARE TO EXCLUSIVE IN THE ENTRY, SET THE*/
*/*             USE ATTRIBUTE TO SHARE IN THE DSNAME ENTRY.          */
*/*             IF THE DELETE FUNCTION WAS REQUESTED, GET, BUILD     */
*/*             AND CHAIN AN EPA FOR THE DSENQ RECORD.               */
*/*                                                                  */
*/* ENTRY - DEQDSN (INCLUDED SEGMENT)                                */
*/*                                                                  */
*/*  INPUT DATA - DSNQDSNL - LENGTH OF DSNAME IN DSENQ ENTRY         */
*/*               DSNQDSN  - DSNAME IN DSENQ ENTRY                   */
*/*               TCBPTR   - INPUT ADDRESS OF TCB                    */
*/*               DSNQPTR  - ADDRESS OF DSENQ RECORD CONTAINING      */
*/*                          THE DATASET NAME ENTRY                  */
*/*               DSNQENTP - ADDRESS OF THE DATASET NAME ENTRY       */
*/*               EPADDR   - ADDRESS OF THE LAST EPA                 */
*/*               ENQFAIL  - ON IF ENQ WAS NOT SUCCESSFUL AND ENTRY  */
*/*                          MUST BE REMOVED FROM DSENQ RECORD       */
*/*               STEPNUMB - INPUT STEP NUMBER                       */
*/*                                                                  */
*/* EXIT - TO NEXT SEQUENTIAL INSTRUCTION                            */
*/*                                                                  */
*/*  OUTPUT DATA - DATA SET NAME NO LONGER ENQUEUED                  */
*/*                DEQDSNSW - OFF, IF IT HAD BEEN SET ON WHEN ENQ    */
*/*                FAILED                                            */
*/*                                                                  */
*/********************************************************************/
*IF DSNFOUND=ON × ENQFAIL=ON THEN      /*DSENQ ENTRY FOUND,ENQ FAILED*/
         TM    DSNFOUND,B'01010000'                             02S0394
         BZ    @RF00394                                         02S0394
*  DO;                                 /*YES, CAN NAME BE REMOVED    */
*    IF STEPNUMB>=DSNQSTEP THEN        /*DSN NEEDED IN LATER STEP    */
         L     @05,@PC00001+20                                  02S0396
         CLC   STEPNUMB(1,@05),DSNQSTEP(DSNQENTP)               02S0396
         BL    @RF00396                                         02S0396
*      DO;                             /*NO, SEE IF DEQ NECESSARY    */
*        IF DELEDEQ=ON & DSNQDSNL^=ZERO THEN /*DEQ FUNCTION REQUESTED*/
         L     @05,@PC00001                                     02S0398
         TM    DELEDEQ(@05),B'00001000'                         02S0398
         BNO   @RF00398                                         02S0398
         CLI   DSNQDSNL(DSNQENTP),0                             02S0398
         BE    @RF00398                                         02S0398
*          DO;                         /*YES, BUILD PARMS AND DEQ    */
*            PARMS=DEQLIST;            /*MOVE IN LIST FORM OF DEQ    */
         MVC   PARMS(12),DEQLIST                                02S0400
*            RFY (R2,R3,R4) RESTRICTED; /*RESTRICT REGISTERS 2,3,4   */
*            R2=TCBPTR;                /*STORE TCB ADDRESS           */
         L     @05,@PC00001+16                                  02S0402
         L     R2,TCBPTR(,@05)                                  02S0402
*            R3=ADDR(DSNQDSN);         /*DSNAME IS MINOR NAME        */
         LA    R3,DSNQDSN(,DSNQENTP)                            02S0403
*            R4=DSNQDSNL;              /*LENGTH OF MINOR NAME (DSN)  */
         SLR   R4,R4                                            02S0404
         IC    R4,DSNQDSNL(,DSNQENTP)                           02S0404
*            GENERATE;                 /*DEQ DSN IF ENQUEUED         */
             DEQ (MAJOR,(3),(4),SYSTEM),RET=HAVE,TCB=(2),MF=(E,PARMS)
*            RFY (R2,R3,R4) UNRESTRICTED; /*RELEASE REGISTERS 2,3,4  */
*          END;                        /*END DEQ DSN PROCESS         */
*        IF DELEONLY=ON × (DELEDEQ=ON & ENQDEQCD=ZERO) × /*DELETE OR */
*           ENQFAIL=ON THEN            /*ENQUEUE FAILED              */
@RF00398 L     @15,@PC00001                                     02S0408
         TM    DELEONLY(@15),B'00010000'                        02S0408
         BO    @RT00408                                         02S0408
         TM    DELEDEQ(@15),B'00001000'                         02S0408
         BNO   @GL00028                                         02S0408
         CLI   ENQDEQCD,0                                       02S0408
         BE    @RT00408                                         02S0408
@GL00028 TM    ENQFAIL,B'00010000'                              02S0408
         BNO   @RF00408                                         02S0408
@RT00408 DS    0H                                               02S0409
*          DO;                         /*REMOVE ENTRY FROM DSENQ     */
*            IF ENQFAIL=ON & CHSHRXCL=ON THEN /*CHANGE USE ENQ FAILD */
         TM    ENQFAIL,B'10010000'                              02S0410
         BNO   @RF00410                                         02S0410
*              DSNQSHR=ON;             /*PUT SHR BIT BACK ON         */
         OI    DSNQSHR(DSNQENTP),B'10000000'                    02S0411
*            ELSE                      /*NOT ENQ CHANGE FAILURE      */
*              DO;                     /*REMOVE ENTRY                */
         B     @RC00410                                         02S0412
@RF00410 DS    0H                                               02S0413
*                OLDDSNL=DSNQDSNL+ENTRYHDR; /*LENGTH OF DSNAME ENTRY */
         SLR   OLDDSNL,OLDDSNL                                  02S0413
         IC    OLDDSNL,DSNQDSNL(,DSNQENTP)                      02S0413
         AL    OLDDSNL,ENTRYHDR                                 02S0413
*                MOVELNG=BLOCKLEN-     /*LENGTH TO MOVE IS LENGTH OF
*                                        BLOCK MINUS SUM OF -        */
*                     ((DSNQENTP-DSNQPTR) + /*BYTES PRIOR TO ENTRY,  */
*                      OLDDSNL + DSNQFREE); /*OLD ENTRY, FREE BYTES  */
         LR    MOVELNG,DSNQENTP                                 02S0414
         SLR   MOVELNG,DSNQPTR                                  02S0414
         ALR   MOVELNG,OLDDSNL                                  02S0414
         AH    MOVELNG,DSNQFREE(,DSNQPTR)                       02S0414
         LCR   MOVELNG,MOVELNG                                  02S0414
         AL    MOVELNG,BLOCKLEN                                 02S0414
*                IF MOVELNG^=ZERO THEN /*BYTES TO MOVE               */
         LTR   MOVELNG,MOVELNG                                  02S0415
         BZ    @RF00415                                         02S0415
*                  DO;                 /*YES, MOVE THEM              */
*                    TEMPAREA(1:MOVELNG)=                       02S0417
*                              DSENQ(OLDDSNL+1:OLDDSNL+MOVELNG);
         LR    @15,MOVELNG                                      02S0417
         BCTR  @15,0                                            02S0417
         LR    @01,DSNQENTP                                     02S0417
         ALR   @01,OLDDSNL                                      02S0417
         EX    @15,@SM01345                                     02S0417
*                    DSENQ(1:MOVELNG)=TEMPAREA(1:MOVELNG);      02S0418
         EX    @15,@SM01347                                     02S0418
*                    DSNQENTP=DSNQENTP+MOVELNG;/*END OF OTHER ENTRIES*/
         ALR   DSNQENTP,MOVELNG                                 02S0419
*                  END;                /*END OF MOVE BYTES           */
*                DSENQ(1:OLDDSNL)=DSENQ(1:OLDDSNL) && DSENQ(1:OLDDSNL);
@RF00415 LR    @03,OLDDSNL                                      02S0421
         BCTR  @03,0                                            02S0421
         EX    @03,@SX01349                                     02S0421
*                                      /*ZERO BYTES AT THE END OF THE
*                                        RECORD.  THE LENGTH TO BE
*                                        ZEROED IS THE LENGTH OF THE
*                                        ENTRY BEING REMOVED.        */
*                DSNQFREE=DSNQFREE+OLDDSNL; /*UPDATE FREE BYTES      */
         LR    @06,OLDDSNL                                      02S0422
         AH    @06,DSNQFREE(,DSNQPTR)                           02S0422
         STH   @06,DSNQFREE(,DSNQPTR)                           02S0422
*                IF ENQFAIL=ON THEN    /*ENQ FAILED                  */
         TM    ENQFAIL,B'00010000'                              02S0423
         BNO   @RF00423                                         02S0423
*                  DO;                 /*YES, RESET INDICATOR        */
*                    IF RETINDIC=ON &  /*INDICATOR SET       @ZA04136*/
*                       DSNFOUND=OFF THEN /*                 @ZA04136*/
         L     @15,@PC00001                                     02S0425
         TM    RETINDIC(@15),B'00100000'                        02S0425
         BNO   @RF00425                                         02S0425
         TM    DSNFOUND,B'01000000'                             02S0425
         BNZ   @RF00425                                         02S0425
*                      DEQDSNSW=OFF;   /*YES, RESET IT TO ZERO       */
         L     @15,@PC00001+28                                  02S0426
         NI    DEQDSNSW(@15),B'11011111'                        02S0426
*                  END;                /*END RESET INDICATORS        */
*                ELSE                  /*DELETE FUNCTION PROCESSING  */
*                  IF NEPAPROC=OFF THEN /*CALLER WANT EPA?   @ZA04136*/
         B     @RC00423                                         02S0428
@RF00423 L     @06,@PC00001                                     02S0428
         TM    NEPAPROC(@06),B'00000001'                        02S0428
         BNZ   @RF00428                                         02S0428
*                  DO;                 /*YES                 @ZA04136*/
*                    RFY (R0,R1) RESTRICTED; /*RESTRICT REGS 0 AND 1 */
*                    R0=LENGTH(SWAEPA); /*LENGTH OF EPA              */
         LA    R0,16                                            02S0431
*                    R0=R0 × SUBPOLNO; /*GET FROM CORRECT SUBPOOL    */
         O     R0,SUBPOLNO                                      02S0432
*                    GENERATE;         /*GET CORE FOR EPA            */
                     GETMAIN R,LV=(0)
*                    RFY SWAEPA BASED(R1); /*BASE EPA R1     @ZA04136*/
*                    SWAEPA=SWAEPA && SWAEPA; /*EPA EQ 0     @ZA04136*/
         XC    SWAEPA(16,R1),SWAEPA(R1)                         02S0435
*                    SWBLKPTR=DSNQPTR; /*DSENQ PTR IN EPA    @ZA04136*/
         ST    DSNQPTR,SWBLKPTR(,R1)                            02S0436
*                      SWVA=DSNQSVA;     /*SVA DSENQ IN EPA  @ZA04136*/
         MVC   SWVA(3,R1),DSNQSVA(DSNQPTR)                      02S0437
*                      SWBLKID=DSNQID;   /*ID DSENQ IN EPA   @ZA04136*/
         MVC   SWBLKID(1,R1),DSNQID(DSNQPTR)                    02S0438
*                      SWLNGTH=BLOCKLEN; /*LENG DSENQ - EPA  @ZA04136*/
         L     @15,BLOCKLEN                                     02S0439
         ST    @15,SWLNGTH(,R1)                                 02S0439
*                      EPADDR->SWCHNPTR=R1; /*CHAIN NEW EPA  @ZA04136*/
         L     @15,@PC00001+12                                  02S0440
         L     @15,EPADDR(,@15)                                 02S0440
         ST    R1,SWCHNPTR(,@15)                                02S0440
*                      RFY SWAEPA BASED(SWEPAPTR); /*REBASE  @ZA04136*/
*                      RFY (R0,R1) UNRESTRICTED;   /*RELEASE @ZA04136*/
*                    END;              /*                    @ZA04136*/
*              END;                    /*END NOT ENQ CHANGE FAILURE  */
@RF00428 DS    0H                                               02S0444
@RC00423 DS    0H                                               02S0445
*          END;                        /*END REMOVE DSENQ ENTRY      */
@RC00410 DS    0H                                               02S0446
*      END;                            /*END DSNAME NOT NEEDED LATER */
@RF00408 DS    0H                                               02S0447
*  END;                                /*END DSENQ ENTRY FOUND       */
@RF00396 DS    0H                                               02S0448
*  END;                                /*END DELETE PROCESS          */
@RF00394 DS    0H                                               01S0449
*IF ASSIGN = ON THEN                   /*DSENQ RECORD ASSGND @YM06161*/
@RF00392 TM    ASSIGN,B'00000001'                               01S0449
         BNO   @RF00449                                         01S0449
*  DO;                                 /*YES,WRITE NEW RECORD@YM06161*/
*    SWACTLS=SWACTLS && SWACTLS;       /*ZERO CONTROL SWITCHS@YM06161*/
         LH    @15,SWACTLS                                      01S0451
         N     @15,@CF01316                                     01S0451
         LR    @14,@15                                          01S0451
         XR    @14,@15                                          01S0451
         STH   @14,SWACTLS                                      01S0451
*    SWWRT=ON;                         /*WRITE FUNCTION      @YM06161*/
*    SWOLD=ON;                         /*USE EXISTING EPA    @YM06161*/
         OI    SWWRT,B'00010001'                                01S0453
*    CALL IEFAB4F7                     /*WRITE RECORD        @YM06161*/
*          (SWACTLS,ADDR(ASSGNEPA),0,0,0,0,0); /*            @YM06161*/
         MVC   @AL00001+8(20),@AL00454                          01S0454
         LA    @15,SWACTLS                                      01S0454
         ST    @15,@AL00001                                     01S0454
         LA    @15,ASSGNEPA                                     01S0454
         ST    @15,@TF00001                                     01S0454
         LA    @15,@TF00001                                     01S0454
         ST    @15,@AL00001+4                                   01S0454
         L     @15,@CV00211                                     01S0454
         LA    @01,@AL00001                                     01S0454
         BALR  @14,@15                                          01S0454
*    IF JCTDETDA = ZERO THEN           /*DSENQ SVA IN JCT?   @YM08602*/
         L     @15,@PC00001+4                                   01S0455
         L     @15,JCTPTR(,@15)                                 01S0455
         ICM   @14,7,JCTDETDA(@15)                              01S0455
         BNZ   @RF00455                                         01S0455
*      JCTDETDA = ASGNDSVA;            /*NO,PUT ASGND SVA IN.@YM08602*/
         MVC   JCTDETDA(3,@15),ASGNDSVA                         01S0456
*    ELSE                              /*DSENQ TBL EXISTS.   @YM08602*/
*      SAVDSNQP -> DSNQNSVA = ASGNDSVA; /*ADD ASSIGNED BLK TO CHAIN
*                                         OF BLOCKS.         @YM08602*/
         B     @RC00455                                         01S0457
@RF00455 MVC   DSNQNSVA(3,SAVDSNQP),ASGNDSVA                    01S0457
*  END;                                /*END WRITE NEW RECORD@YM06161*/
@RC00455 DS    0H                                               01S0459
*RETURN CODE(0);                       /*RETURN TO CALLER            */
@RF00449 IC    @02,@OLDKEY                                      01S0459
         L     @13,4(,@13)                                      01S0459
         L     @00,@SIZDATD                                     01S0459
         LR    @01,@11                                          01S0459
         FSPACE   R,LV=(0),A=(1)
         MODESET KEYADDR=(2)
         SLR   @15,@15                                          01S0459
         L     @14,12(,@13)                                     01S0459
         LM    @00,@12,20(@13)                                  01S0459
         BR    @14                                              01S0459
*END IEFAB4DC                                                   01S0460
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (DSNRDATA)                                        *
*/*%INCLUDE SYSLIB  (IEFZB505)                                        *
*/*%INCLUDE SYSLIB  (IEFZB4D6)                                        *
*/*%INCLUDE SYSLIB  (IEFZB4D7)                                        *
*/*%INCLUDE SYSLIB  (IEFZB902)                                        *
*/*%INCLUDE SYSLIB  (IEFAJCTB)                                        *
*/*%INCLUDE SYSLIB  (IEFZB436)                                        *
*/*%INCLUDE SYSLIB  (IEFZB4DA)                                        *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*/*%INCLUDE SYSLIB  (IEFJESCT)                                        *
*/*%INCLUDE SYSLIB  (IEFJSSOB)                                        *
*/*%INCLUDE SYSLIB  (SRCHDSN )                                        *
*/*%INCLUDE SYSLIB  (UPDENT  )                                        *
*/*%INCLUDE SYSLIB  (ENQDSN  )                                        *
*/*%INCLUDE SYSLIB  (CHANGENQ)                                        *
*/*%INCLUDE SYSLIB  (WAITDSN )                                        *
*/*%INCLUDE SYSLIB  (DEQDSN  )                                        *
*;                                                              01S0460
@DATA    DS    0H
@CH00403 DC    H'20'
@CH01281 DC    H'27'
@CH00283 DC    H'162'
@CH00426 DC    XL2'020C'
@CH00428 DC    XL2'0210'
@CH00538 DC    XL2'0484'
@SC01321 CLC   DSNQDSN(0,DSNQENTP),DSNAME(@14)
@SM01330 MVC   DSNQDSN(0,DSNQENTP),DSNAME(@05)
@SM01332 MVC   JESDSNAM(0),DSNQDSN(DSNQENTP)
@SM01334 MVC   WTORBUF(0,WTORPTR),JOBNAME(@14)
@SM01336 MVC   WTORBUF(0,WTORPTR),STEPNAME(@14)
@SM01338 MVC   M861JOBN(0),JOBNAME(@05)
@SM01340 MVC   M863DSN(0),DSNQDSN(DSNQENTP)
@SM01345 MVC   TEMPAREA(0),DSENQ(@01)
@SM01347 MVC   DSENQ(0,DSNQENTP),TEMPAREA
@SX01349 XC    DSENQ(0,DSNQENTP),DSENQ(DSNQENTP)
         DS    0F
@AL00454 DC    A(@CF00182)             LIST WITH   5 ARGUMENT(S)
         DC    A(@CF00182)
         DC    A(@CF00182)
         DC    A(@CF00182)
         DC    A(@CF00182)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    11F
@AL00001 DS    7A
@TF00001 DS    F
@TF00002 DS    F
@TF00003 DS    F
IEFAB4DC CSECT
         DS    0F
@CF00182 DC    F'0'
@CF00099 DC    F'1'
@CF00057 DC    F'8'
@CF00066 DC    F'16'
@CH00066 EQU   @CF00066+2
@CF00142 DC    F'44'
@CF01316 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
ENQECB   DS    FL4
         ORG   ENQECB
ECBWAIT  DS    BL1
ECBPOST  EQU   ENQECB+0
ECBCOMP  EQU   ENQECB+0
         ORG   ENQECB+4
WTORECB  DS    FL4
         ORG   WTORECB
WECBWAIT DS    BL1
WECBPOST EQU   WTORECB+0
WECBCOMP EQU   WTORECB+0
         ORG   WTORECB+4
LASTDSNQ DS    F
SWACTLS  DS    FL2
         ORG   SWACTLS
SWASN    DS    BL1
SWDEL    EQU   SWACTLS+0
SWREAD   EQU   SWACTLS+0
SWWRT    EQU   SWACTLS+0
SWNEW    EQU   SWACTLS+0
SWFREE   EQU   SWACTLS+0
SWMOD    EQU   SWACTLS+0
SWOLD    EQU   SWACTLS+0
SWCHN    DS    BL1
@NM00032 EQU   SWACTLS+1
         ORG   SWACTLS+2
@TS00001 DS    CL4
ASGNDSVA DS    CL3
REPLYBUF DS    CL2
DSNRRSWS DS    CL2
         ORG   DSNRRSWS
CHSHRXCL DS    BL1
DSNFOUND EQU   DSNRRSWS+0
UPJCTEPA EQU   DSNRRSWS+0
ENQFAIL  EQU   DSNRRSWS+0
FRSTREAD EQU   DSNRRSWS+0
NOREAD   EQU   DSNRRSWS+0
ENDWAIT  EQU   DSNRRSWS+0
ASSIGN   EQU   DSNRRSWS+0
UPDATE   DS    BL1
CHNGSTEP EQU   DSNRRSWS+1
@NM00001 EQU   DSNRRSWS+1
         ORG   DSNRRSWS+2
         DS    CL3
@NM00002 DS    CL8
         ORG   @NM00002
BLOCK    DS    FL4
SVAID    DS    CL4
         ORG   SVAID
SVA      DS    CL3
TID      DS    CL1
         ORG   @NM00002+8
ENQDEQP  DS    CL16
         ORG   ENQDEQP
TCBADDR  DS    FL4
PARMS    DS    CL12
         ORG   PARMS
EOT      DS    CL1
MINORLN  DS    AL1
EOPTIONS DS    BL1
ENQDEQCD DS    AL1
MAJORNM  DS    AL4
MINORNM  DS    AL4
         ORG   ENQDEQP+16
MSG861I  DS    CL73
         ORG   MSG861I
M861LEN  DS    FL2
@NM00003 DS    CL2
M861TXT  DS    CL57
M861JOBN DS    CL8
M861RTCD DS    CL4
         ORG   MSG861I+73
         DS    CL1
MSG863I  DS    CL66
         ORG   MSG863I
M863LEN  DS    FL2
@NM00004 DS    CL2
M863TXT  DS    CL14
M863DSN  DS    CL44
M863RTCD DS    CL4
         ORG   MSG863I+66
WAITECBS DS    CL8
         ORG   WAITECBS
WAITWTOR DS    FL4
WAITENQ  DS    FL4
         ORG   WAITENQ
@NM00005 DS    BL4
         ORG   @NM00005
WAITEND  DS    BL1
@NM00006 EQU   @NM00005+0
         ORG   WAITECBS+8
WTORPARM DS    CL88
         ORG   WTORPARM
@NM00007 DS    CL8
WTORLNGH DS    FL2
@NM00008 DS    CL10
WTORJOB  DS    CL8
@NM00009 DS    CL60
         ORG   WTORPARM+88
JESDSNAM DS    CL44
READEPA  DS    CL16
ASSGNEPA DS    CL16
TEMPAREA DS    CL162
         DS    CL2
SSOB     DS    CL20
         ORG   SSOB
SSOBID   DS    CL4
SSOBLEN  DS    FL2
SSOBFUNC DS    FL2
SSOBSSIB DS    AL4
SSOBRETN DS    AL4
SSOBINDV DS    AL4
         ORG   SSOB+20
SSNQ     DS    CL16
         ORG   SSNQ
SSNQLEN  DS    FL2
SSNQRSV0 DS    FL2
SSNQDSNP DS    AL4
SSNQFLGP DS    AL4
SSNQRSV1 DS    FL4
         ORG   SSNQ+16
FLAGS    DS    CL2
         ORG   FLAGS
SHRTOXCL DS    BL1
@NM00036 EQU   FLAGS+0
         ORG   FLAGS+2
@OLDKEY  DS    AL1
IEFAB4DC CSECT
         DS    0F
@SIZDATD DC    AL1(230)
         DC    AL3(@ENDDATD-@DATD)
@CV00211 DC    V(IEFAB4F7)
@CV00212 DC    V(IEF458D)
@CV00213 DC    V(IEF861I)
@CV00214 DC    V(IEF863I)
         DS    0D
ENTRYHDR DC    AL4(1+1+1)
BLOCKLEN DC    AL4(176)
CLEAR    DC    X'00'
ERROR    DC    X'FF'
         DS    CL2
SUBPOLNO DC    X'E6000000'
MAJOR    DC    CL8'SYSDSN'
BLANKS   DC    CL2'  '
SSOBCHAR DC    CL4'SSOB'
FOLDMASK DC    X'4040'
NO       DC    CL2'NO'
IEFAB4DC CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
IEFAB4DC CSECT
ENQLIST  ENQ (MAJOR,,,,SYSTEM),RET=USE,TCB=0,MF=L
ENQWAITL ENQ (MAJOR,,,,SYSTEM),ECB=0,MF=L
DEQLIST  DEQ (MAJOR,,,SYSTEM),RET=HAVE,TCB=0,MF=L
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEFAB4DC CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
MSGID    EQU   @08
STEPNLNG EQU   @08
JOBNLNG  EQU   @09
REALNGTH EQU   @04
ENTRYLNG EQU   @09
ENDRCRD  EQU   @05
OLDDSNL  EQU   @02
MOVELNG  EQU   @03
DSNQPTR  EQU   @07
RECPTR   EQU   @02
WTORPTR  EQU   @05
SWEPAPTR EQU   @03
SAVEREC  EQU   @08
SAVDSNQP EQU   @10
DSNQENTP EQU   @06
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
CVTPTR   EQU   16
MSGPARMS EQU   0
JOBNAME  EQU   MSGPARMS
STEPNAME EQU   MSGPARMS+8
WTORBUF  EQU   0
WTOLIST  EQU   0
SWAEPA   EQU   0
SWBLKPTR EQU   SWAEPA
SWVAFW   EQU   SWAEPA+4
SWVA     EQU   SWVAFW
SWBLKID  EQU   SWVAFW+3
SWLNGTH  EQU   SWAEPA+8
SWCHNPTR EQU   SWAEPA+12
DSNQTABL EQU   0
DSNQSVA  EQU   DSNQTABL
DSNQID   EQU   DSNQTABL+3
DSNQNSVA EQU   DSNQTABL+4
DSNQNEXT EQU   DSNQTABL+8
DSNQFREE EQU   DSNQTABL+12
DSNQENTS EQU   DSNQTABL+14
WTORLIST EQU   0
DSNQNTRY EQU   0
DSNQSTEP EQU   DSNQNTRY
DSNQFLG1 EQU   DSNQNTRY+1
DSNQSHR  EQU   DSNQFLG1
DSNQDSNL EQU   DSNQNTRY+2
DSNQDSN  EQU   DSNQNTRY+3
DSENQ    EQU   0
INJMJCT  EQU   0
JCTDSKAD EQU   INJMJCT
JCTIDENT EQU   INJMJCT+3
JCTJSTAT EQU   INJMJCT+5
INDMCTLG EQU   JCTJSTAT
JCTJBYTE EQU   INJMJCT+7
JCTJMGLV EQU   JCTJBYTE
JCTCCODE EQU   INJMJCT+54
JCTRSW1  EQU   INJMJCT+86
JCTRSW2  EQU   INJMJCT+87
JCTDETDA EQU   INJMJCT+88
JCTJSB   EQU   INJMJCT+111
JCTSTAT2 EQU   INJMJCT+116
IEFAACTB EQU   0
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTJESCT EQU   CVTMAP+296
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
JESCT    EQU   0
JESWAA   EQU   JESCT+8
JESSSREQ EQU   JESCT+20
JESALLOC EQU   JESCT+32
JESUNALC EQU   JESCT+36
JESCATL  EQU   JESCT+40
SSREQ    EQU   0
IEFAB4F5 EQU   0
IEFBB410 EQU   0
IEFW21SD EQU   0
SWAMGR   EQU   0
DSRRFMAP EQU   0
ADDRPASS EQU   DSRRFMAP
ADCHONLY EQU   DSRRFMAP
ADCHENQ  EQU   DSRRFMAP
DELEONLY EQU   DSRRFMAP
DELEDEQ  EQU   DSRRFMAP
NOSHRXCL EQU   DSRRFMAP
ENQSHR   EQU   DSRRFMAP
ENQEXCL  EQU   DSRRFMAP
ENQWAIT  EQU   DSRRFMAP+1
RETADDR  EQU   DSRRFMAP+1
RETINDIC EQU   DSRRFMAP+1
READALL  EQU   DSRRFMAP+1
INCORREC EQU   DSRRFMAP+1
EPAJCTEX EQU   DSRRFMAP+1
SRCHDSNM EQU   DSRRFMAP+1
NEPAPROC EQU   DSRRFMAP+1
JCTPTR   EQU   0
DSNPARM  EQU   0
DSNLNGH  EQU   DSNPARM
DSNAME   EQU   DSNPARM+2
EPADDR   EQU   0
TCBPTR   EQU   0
STEPNUMB EQU   0
INPTADDR EQU   0
ENTADDR  EQU   INPTADDR
RECADDR  EQU   INPTADDR+4
ALFNCMAP EQU   0
INPUTSW  EQU   ALFNCMAP
PROCESSW EQU   ALFNCMAP+6
ERRPROSW EQU   PROCESSW
DEQDSNSW EQU   ERRPROSW
NQEXCLSW EQU   PROCESSW
RETCODE  EQU   0
ERRCODE  EQU   RETCODE
FIRSTREC EQU   0
MSGPARMP EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
INFOCODE EQU   RETCODE+2
@NM00013 EQU   PROCESSW+1
HSKPDQSW EQU   PROCESSW+1
DISMSGSW EQU   PROCESSW+1
USERERSW EQU   PROCESSW+1
EPALSISW EQU   PROCESSW+1
EPASCTSW EQU   PROCESSW+1
EPAJCTSW EQU   PROCESSW
FRRPERSW EQU   PROCESSW
DCBSPCSW EQU   PROCESSW
UNALOCSW EQU   ERRPROSW
COPYSW   EQU   PROCESSW
@NM00012 EQU   PROCESSW
@NM00011 EQU   INPUTSW+3
PCATINIT EQU   INPUTSW+3
UNITDEVT EQU   INPUTSW+3
MOUNTSW  EQU   INPUTSW+2
CATLOGSW EQU   INPUTSW+2
TIOTNQSW EQU   INPUTSW+2
OFFLINSW EQU   INPUTSW+2
WTUNTSW  EQU   INPUTSW+2
NORESSW  EQU   INPUTSW+2
WTDSNSW  EQU   INPUTSW+2
WTVOLSW  EQU   INPUTSW+2
@NM00010 EQU   INPUTSW
JOBRLSYS EQU   INPUTSW
NOMONTSW EQU   INPUTSW
NOCNVTSW EQU   INPUTSW
ONCNVTSW EQU   INPUTSW
JESPJESN EQU   JESCT+28
JESSSCT  EQU   JESCT+24
JESRESQM EQU   JESCT+16
JESQMGR  EQU   JESCT+12
JESUNITS EQU   JESCT+4
@NM00035 EQU   JESCT
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00034 EQU   CVTFIX+248
@NM00033 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
ACTACCNT EQU   IEFAACTB+32
ACTJNFLD EQU   IEFAACTB+31
ACTJTIME EQU   IEFAACTB+28
ACTPRGNM EQU   IEFAACTB+8
@NM00031 EQU   IEFAACTB+7
ACTNEXT  EQU   IEFAACTB+4
ACTIDENT EQU   IEFAACTB+3
ACTDSKAD EQU   IEFAACTB
@NM00030 EQU   INJMJCT+175
JCTVULDP EQU   INJMJCT+172
JCTACODE EQU   INJMJCT+168
JCTPRFMF EQU   INJMJCT+167
JCTUSER  EQU   INJMJCT+160
JCTSSD   EQU   INJMJCT+157
@NM00029 EQU   INJMJCT+156
JCTSRBT  EQU   INJMJCT+152
JCTJMRJD EQU   INJMJCT+149
JCTJMRJT EQU   INJMJCT+146
JCTJMRSS EQU   INJMJCT+143
JCTJMRTL EQU   INJMJCT+140
JCTJMRCL EQU   INJMJCT+139
JCTJMROP EQU   INJMJCT+138
JCTJMRD  EQU   INJMJCT+137
JCTJMR   EQU   INJMJCT+134
JCTCKIDT EQU   INJMJCT+118
JCTCKIDL EQU   INJMJCT+117
@NM00028 EQU   JCTSTAT2
JCTBLP   EQU   JCTSTAT2
JCTPERFM EQU   JCTSTAT2
JCTSWSM  EQU   JCTSTAT2
JCTENDIT EQU   JCTSTAT2
JCTADSPC EQU   JCTSTAT2
JCTSPSYS EQU   JCTSTAT2
@NM00027 EQU   INJMJCT+115
JCTSSTR  EQU   INJMJCT+112
JCTJSBTM EQU   JCTJSB
JCTJSBEX EQU   JCTJSB
JCTJSBAL EQU   JCTJSB
JCTJSBIN EQU   JCTJSB
@NM00026 EQU   JCTJSB
JCTVOLSQ EQU   INJMJCT+110
JCTNRCKP EQU   INJMJCT+108
JCTNTRK  EQU   INJMJCT+107
JCTCKTTR EQU   INJMJCT+104
JCTDEVT  EQU   INJMJCT+100
@NM00025 EQU   INJMJCT+99
JCTSTIOT EQU   INJMJCT+96
JCTSNUMB EQU   INJMJCT+95
JCTQIDNT EQU   INJMJCT+94
JCTEQREG EQU   INJMJCT+92
@NM00024 EQU   INJMJCT+91
JCTDSDRA EQU   JCTRSW2
JCTDSOJB EQU   JCTRSW2
JCTDSOCR EQU   JCTRSW2
JCTRESTT EQU   JCTRSW2
JCTNOCKP EQU   JCTRSW2
JCTNORST EQU   JCTRSW2
JCTNARST EQU   JCTRSW2
JCTSYSCK EQU   JCTRSW2
@NM00023 EQU   JCTRSW1
JCTSTEPR EQU   JCTRSW1
JCTCKPTR EQU   JCTRSW1
JCTCKFT  EQU   JCTRSW1
JCTCONTR EQU   JCTRSW1
JCTSTERM EQU   JCTRSW1
JCTWARMS EQU   JCTRSW1
@NM00022 EQU   JCTCCODE+3
JCTJDPOP EQU   JCTCCODE+2
JCTJDPCD EQU   JCTCCODE
@NM00021 EQU   INJMJCT+53
JCTSCT   EQU   INJMJCT+52
JCTSMRBA EQU   INJMJCT+44
@NM00020 EQU   INJMJCT+43
JCTACTAD EQU   INJMJCT+40
@NM00019 EQU   INJMJCT+39
JCTJCTX  EQU   INJMJCT+36
@NM00018 EQU   INJMJCT+35
JCTSDKAD EQU   INJMJCT+32
JCTJCSMF EQU   INJMJCT+31
JCTGDGNT EQU   INJMJCT+28
@NM00017 EQU   INJMJCT+27
JCTPDIP  EQU   INJMJCT+24
JCTJTPTN EQU   INJMJCT+16
JCTJNAME EQU   INJMJCT+8
JCTJPRTY EQU   JCTJBYTE
INCMMGL1 EQU   JCTJMGLV
INCMMGL2 EQU   JCTJMGLV
@NM00016 EQU   JCTJMGLV
INCMALL  EQU   JCTJMGLV
JCTJMGPO EQU   INJMJCT+6
INCMNSET EQU   JCTJSTAT
INCMCAT  EQU   INDMCTLG
INCMSTS  EQU   JCTJSTAT
JCTABEND EQU   JCTJSTAT
@NM00015 EQU   JCTJSTAT
JCTJSTPC EQU   JCTJSTAT
@NM00014 EQU   JCTJSTAT
JCTJBLBS EQU   JCTJSTAT
JCTJSRNO EQU   INJMJCT+4
DSNQRS02 EQU   DSNQFLG1
DSNQRS01 EQU   DSNQTABL+7
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00128 EQU   @RC00067
@RF00186 EQU   @RC00182
@RC00289 EQU   @RC00273
@RC00297 EQU   @RC00296
@RF00425 EQU   @RC00423
@ENDDATA EQU   *
         END   IEFAB4DC,(C'PLS1919',0701,76274)
