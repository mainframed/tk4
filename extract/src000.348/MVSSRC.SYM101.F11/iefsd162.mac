         TITLE 'IEFSD162, DEVICE ALLOCATION INTERFACE ROUTINE'
IEFSD062 CSECT
*        SEE CHANGE LEVEL IN PROLOG FOR FLAGGING INFORMATION.
*
* D-STATEMENTS NEAR LABEL SKIPKEY                              @ZA03944
* C-STATEMENTS NEAR LABEL SKIPKEY                              @ZA03944
* A-STATEMENTS NEAR LABEL NOTREAL                              @ZA03944
* C-STATEMENTS NEAR LABEL IEFSD030                             @ZA05831
* M STATEMENTS FOR PROCESSING UNSUCCESSFUL OPENING OF CATALOGS @ZA07506
* A STATEMENTS IN OPEN JOBLIB OR STEPLIB AND OPEN FETCHLIB     @ZA07506
* A STATEMENTS FOR PROCESSING UNSUCCESSFUL OPENING OF CATALOGS @ZA07506
*   JOBLIBS - STEPLIBS AND FETCHLIBS WITH NEW MSG IEF689I      @ZA07506
* IEFSD005 C - WRITE TO THE JOURNAL REGARDLESS OF THE ALLOCA-  @ZA08701
*              TION RETURN CODE FOR SWA CREATE AT WARMSTART.   @ZA08701
* ALLOCATE C - MOVE CURRENT STEP NUMBER FROM LCT TO JSCBSTEP   @ZA10117
* A STATEMENTS NEAR LABEL IEFSD035                             @ZA11857
* A STATEMENTS NEAR LABEL NOTREAL                              @ZA11857
* DELETED STATEMENTS THAT WERE ADDED FOR @ZA11857              @ZA16879
* ADDED STATEMENTS NEAR LABEL ALLOCATE                         @ZA16879
* ADDED STATEMENTS NEAR LABELS SKIPKEY                         @ZA16879
**********************************************************************
*
*   MODULE NAME= IEFSD062 (IEFSD162)
*
*   DESCRIPTIVE NAME= DEVICE ALLOCATION INTERFACE ROUTINE
*
*   COPYRIGHT= NONE
*
*   STATUS = SU7 PTF                                           @ZA16879
*
*   FUNCTION= THIS MODULE INVOKES DEVICE ALLOCATION FOR THE STEP
*   BEING INITIATED AND OPENS JOBLIB, STEPLIB, AND FETCHLIB.
*
*      OPERATION=
*      1. CALCULATE THE STEP TIME LIMIT.
*
*      2. SKIP TO STEP 3 IF NOT A STARTED PROBLEM PROGRAM OR
*      SYSTEM TASK. THE FOLLOWING PROCESSING IS DONE SO A
*      STARTED TASK CAN BE CANCELED WHILE IN ALLOCATION.
*
*         A. IF A TASKNAME (ID) WAS SPECIFIED ON THE START
*         COMMAND, MOVE THAT ID FROM THE SCT PROCSTEP NAME
*         FIELD TO THE SCT STEPNAME FIELD AND CLEAR THE SCT
*         PROCSTEP NAME FIELD. THEN CONTINUE WITH STEP 3.
*
*         B. IF NO ID WAS SPECIFIED (INDICATED BY A PROCSTEP
*         NAME OF STARTING) READ IN THE SIOT'S FOR THE STEP UNTIL
*         AN IEFRDER SIOT IS FOUND. IF NO IEFRDER SIOT IS FOUND,
*         SKIP TO STEP D. IF AN IEFRDER SIOT IS FOUND BUT IT
*         CONTAINS NO UNIT TYPE, CONTINUE WITH STEP D.
*
*         C. IF A UNIT TYPE IS FOUND IN THE IEFRDER SIOT, MOVE
*         THE UNIT TYPE TO THE SCT STEPNAME FIELD AND TO CHKEY.
*         CONTINUE WITH STEP E.
*
*         D. MOVE THE JOBNAME FROM THE JCT TO CHKEY AND TO THE
*         SCT STEPNAME FIELD.
*
*         E. CLEAR THE SCT PROCSTEP NAME FIELD. SET AN
*         INDICATOR IN THE LCT WHICH MEANS THAT A TASKNAME WAS
*         NOT ON THE COMMAND. MOVE THE VALUE IN CHKEY TO THE
*         CURRENT TASK'S TIOT'S STEPNAME FIELD. (CHKEY IS SET
*         EITHER IN STEP C OR D.)
*
*      2A.  CALL THE SUBSYSTEM TO NOTIFY OF STEP INITIATION.   @Y02BPSR
*      IF THE REGISTER 15 RETURN CODE DOES NOT INDICATE        @Y02BPSR
*      'SUCCESSFUL CALL' OR ' FUNCTION NOT SUPPORTED BY        @Y02BPSR
*      SUBSYSTEM', ISSUE 0BA ABEND.                            @Y02BPSR
*
*      3. TO PERFORM PROCESSING REQUIRED FOR CHECKPOINT          Y02641
*      RESTART, CALL IEFXB604. IEFXB604 WILL SET JOB STATUS      Y02641
*      BITS AS REQUIRED TO INDICATE THE STEP HAS ENTERED         Y02641
*      ALLOCATION AND WRITE THE STEP HEADER RECORD.              Y02641
*
*      4. GET STORAGE FOR A 72-BYTE SAVEAREA AND A 24-BYTE
*      PARAMETER AREA FOR ALLOCATION.  MOVE THE STEP NUMBER TO @ZA10117
*      JSCBSTEP FROM LCTSNUMB.                                 @ZA10117
*
*      5. BALR TO DEVICE ALLOCATION (IEFW21SD). IF NOT ALREADY @Z40FPPJ
*      CANCELABLE, MARK THE CSCB CANCELABLE BEFORE THE LINK AND
*      RESTORE IT AFTER CONTROL IS RETURNED. UPON RETURN, FREE
*      THE SAVEAREA.
*
*      6. IF THE RETURN CODE FROM ALLOCATION IS NON-ZERO, SET
*      THE ALLOCATION ERROR CODE IN THE IEL.
*
*
*         A. TURN OFF THE 'NO JOURNALING' SWITCH IN THE JSCB   @ZA08701
*            (IN CASE IT IS ON).                               @ZA08701
*
*         B. CALL THE JOURNAL WRITE ROUTINE (IEFXB500) TO      @ZA08701
*            JOURNAL THE CONTROL BLOCKS FOR THE JOB STEP.      @ZA08701
*            STEPS THAT ARE NOT EXECUTED MUST BE JOURNALED     @ZA08701
*            AS WELL AS STEPS THAT ARE EXECUTED SO THAT THE    @ZA08701
*            JOURNAL MERGE ROUTINE (IEFXB601) CAN RESOLVE THE  @ZA08701
*            ADDRESSES IN THE NEW SWA.                         @ZA08701
*
*         C. THEN CONTINUE WITH STEP 23.                         Y02665
*
*
*      7. IF NOT A STARTED TASK, SKIP TO STEP 8. THE FOLLOWING
*      DESCRIBES HOW CHKEY IS SET UP SO THAT THE TASK CAN BE
*      CANCELED WHILE IT IS RUNNING.
*
*         A. SCAN THE NEWLY CREATED TIOT FOR AN IEFRDER ENTRY.
*         IF NO IEFRDER IS FOUND, SKIP TO STEP C. IF AN IERFRDER
*         IS FOUND, MOVE THE UCB NAME TO CHUNIT.
*
*         B. IF THE LCT SWITCH INDICATES A TASKNAME WAS
*         SPECIFIED ON THE START COMMAND, CONTINUE WITH STEP 8.
*         OTHERWISE, MOVE THE UCB NAME TO CHKEY. CONTINUE WITH
*         STEP D.
*
*         C. CONTINUE WITH STEP 8 IF THE LCT INDICATES A
*         TASKNAME WAS SPECIFIED ON THE START COMMAND.
*         OTHERWISE, MOVE CHCLS TO CHKEY.
*
*         D. MOVE THE ID AT CHKEY TO THE STEPNAME FIELD OF BOTH
*         THE CURRENT AND NEW TIOT'S.
*
*      8. THE FOLLOWING PROCESSING IS PERFORMED TO SUPPORT       Y02641
*      CHECKPOINT/RESTART:                                       Y02641
*
*         A. TURN OFF THE JOB STATUS INDICATORS IN THE JCT AND   Y02641
*         JSCB AND SET JCTJSBX AND JSCBJSBX TO INDICATE THAT THE Y02641
*         JOB STEP HAS COMPLETED ALLOCATION.                     Y02641
*
*      8A. IF THE LCT INDICATES 'DISALLOW CHECKPOINT RESTART,'   Y02641
*      CONTINUE WITH STEP 9 (BECAUSE ANY SPECIAL PROCESSING      Y02641
*      REQUIRED SHOULD HAVE ALREADY BEEN DONE). OTHERWISE, TURN  Y02641
*      OFF THE TCB FLAG WHICH INDICATES 'SUPPRESS CHECKPOINTS.'  Y02641
*      (THE INDICATOR MAY HAVE BEEN SET IN THE INITIATOR TCB FOR Y02641
*      THE PREVIOUS STEP.) IF THE SCT INDICATES THAT CHECKPOINTS Y02641
*      ARE TO BE SUPPRESSED FOR THIS STEP, THEN SET THE          Y02641
*      CORRESPONDING INDICATOR IN THE TCB. (THE INDICATOR WILL   Y02641
*      BE PROPOGATED TO THE JOB STEP TCB BY ATTACH.)             Y02641
*
*      9. WRITE THE JCT AND SCT TO SWA (LOCATE MODE), SO THEY   YM01566
*      WILL BE JOURNALED.                                       YM01566
*
*      10. READ THE SCT EXTENSION BLOCK (WHICH CONTAINS THE USER
*      PARM FIELD).
*
*      11. GET STORAGE FOR THE ATTACH PARAMETER LIST AND
*      IEFPARAM. AFTER INITIALIZING IEFPARAM (INCLUDING THE P/P  Y02653
*      TIOT POINTER, STORE A POINTER TO IEFPARAM IN THE STAE     Y02653
*      EXIT PARAMETER LIST.                                      Y02653
*
*      12. PUT THE JOB STEP TIOT POINTER IN THE INITIATOR TCB.
*      CLEAR THE INDICATORS IN THE STEPL WHICH TELL WHETHER      Y02653
*      JOBLIB, STEPLIB OR FETCHLIB WAS THE LAST LIBRARY OPENED.  Y02653
*
*      13. IF JSCBPCC IS ZERO, SKIP TO STEP 14. (IF THERE ARE NO Y02665
*      PCCB'S AT THIS POINT, THERE WILL BE NO CATALOGS TO OPEN.) Y02665
*      IF THERE ARE PCCB'S, CALL IEFICATL TO INVOKE IEFAB4F5 TO  Y02665
*      OPEN CATALOGS AND UPDATE THE PCCB CHAIN.                  Y02665
*
*      13A. IF THE RETURN CODE IN REGISTER 15 IS NON-ZERO, THEN  Y02665
*      DO THE FOLLOWING PROCESSING FOR A CATALOG ERROR. (A       Y02665
*      CATALOG ERROR IS TREATED THE SAME AS AN ALLOCATION        Y02665
*      ERROR.)                                                   Y02665
*
*         A. RESTORE THE INITIATOR TIOT POINTER.                 Y02665
*
*         B. FREE IEFPARAM AND THE ATTACH PARAMETER LIST.        Y02665
*
*         C. FREE THE STORAGE USED FOR THE USER PARMS.           Y02665
*
*         D. SET THE ALLOCATION ERROR RETURN CODE IN THE IEL     Y02665
*         AND THE ALLOCATION ERROR INDICATOR IN THE LCT.         Y02665
*
*         E. SET THE JOB FAILED INDICATOR IN THE LCT.            Y02665
*
*         F. CONTINUE WITH STEP 23.                              Y02665
*
*      14. OPEN THE DCB'S FOR JOBLIB, STEPLIB, AND FETCHLIB AS
*      FOLLOWS. WHEN OPENING ANY LIBRARY, INDICATE IN THE STEPL  Y02653
*      THAT THE LAST LIBRARY OPENED WAS JOBLIB, STEPLIB, OR      Y02653
*      FETCHLIB. THIS IS SO IEFIB621 CAN SET THE CORRESPONDING   Y02653
*      INDICATOR IN IELRTNCD IF THERE WAS AN ABEND RESULTING     Y02653
*      FROM AN OPEN.                                             Y02653
*
*         A. OPEN STEPLIB OR JOBLIB IF PRESENT (IF BOTH EXIST,
*         ONLY STEPLIB IS OPENED).
*
*         B. OPEN FETCHLIB IF PRESENT.
*
*      14A. IF THE OPEN BIT IS NOT SET UPON RETURN FROM THE    @ZA07506
*      SVC, MESSAGE IEF689I WILL BE ISSUED TO THE PROGRAMMER   @ZA07506
*      AND THE JOB WILL BE FAILED.                             @ZA07506
*
*      14B. RESTORE TIOT POINTER IN THE INITIATOR'S TCB TO SAME
*      CONDITION AS BEFORE THE OPEN'S.
*
*      15. FREE THE 24-BYTE PARAMETER LIST GOTTEN FOR ALLOCATION.
*
*      16. IF THE LCT INDICATES THAT ONE OR MORE SPECIAL         Y02656
*      PROPERTIES HAVE BEEN ASSIGNED TO THE                      Y02656
*      JOB STEP, AND A JOBLIB OR STEPLIB IS PRESENT, CHECK THE   Y02656
*      DEB TO DETERMINE WHETHER THE LIBRARY IS DEFINED TO        Y02656
*      CONTAIN AUTHORIZED PROGRAMS. IF NOT AUTHORIZED,           Y02656
*      SUBSTITUTE THE 'NORMAL' PROBLEM PROGRAM ATTRIBUTES FOR    Y02656
*      THE FOLLOWING SPECIAL PROPERTIES:                         Y02656
*         NON-CANCELABLE                                         Y02656
*         REQUIRES SPECIAL PROTECT KEY                           Y02656
*         AUTHORIZED TO BE NON-SWAPPABLE                         Y02656
*         PRIVILEGED                                             Y02656
*         SYSTEM TASK                                            Y02656
*         NO DATA SET INTEGRITY                                  Y02656
*         CPU-TASK AFFINITY                                      Y02651
*         BYPASS PASSWORD PROTECTION                             Y02656
*         AUTHORIZED TO USE PREFERRED STORAGE (FIRST,SECOND,   @ZA16879
*              NOT SECOND LEVELS)                              @ZA16879
*
*      IF NOT AUTHORIZED,
*      SET THE INDICATOR IN THE LCT WHICH INDICATES THIS         Y02656
*      MODULE SHOULD ISSUE MESSAGE IEF188I PROBLEM PROGRAM       Y02656
*      ATTRIBUTES ASSIGNED.                                      Y02656
*
*      17. IF THE TASK IS A SYSTEM TASK (INDICATED BY THE LCT)   Y02652
*      SET THE LCT INDICATOR WHICH MEANS 'DON'T TIME THIS TASK.' Y02652
*
*      18. IF THE LCT INDICATES 'DON'T TIME THIS TASK,' SET      Y02652
*      THE TIME LIMIT IN LCTTMWRK+4 TO THE EQUIVALENT OF 24      Y02652
*      HOURS. (THE LCT INDICATOR MAY HAVE BEEN SET WHEN THE      Y02652
*      IEL OPTION SWITCHES WERE MOVED TO THE LCT OR IN STEP 17   Y02652
*      ABOVE.)                                                   Y02652
*
*      19. IF THE LCT INDICATES 'NO DATA SET INTEGRITY,' ISSUE   Y02652
*      GENERIC DEQ TO ELIMINATE DATA SET INTEGRITY FOR THAT JOB. Y02652
*
*      20A.  IF BYPASS PASSWORD PROTECTION IS REQUIRED, SET    @ZA03944
*      THE INDICATOR IN THE JSCB. (THE JSCBPASS BIT.)          @ZA03944
*
*      21. IF THE CORRESPONDING INDICATOR IN THE LCT IS ON,      Y02656
*      ISSUE MESSAGE IEF188I PROBLEM PROGRAM ATTRIBUTES          Y02656
*      ASSIGNED.                                                 Y02656
*
*      22. EXIT TO IEFSD103.
*
*      23. FREE THE GETPART WORK TABLE IF IT EXISTS. THEN EXIT   Y02665
*      TO IEFSD164.                                              Y02665
*
*   NOTES
*
*      CHARACTER CODE DEPENDENCIES= NONE
*
*      DEPENDENCIES= NONE
*
*      RESTRICTIONS= NONE
*
*      REGISTER CONVENTIONS= STANDARD
*
*      PATCH-LABEL= PATCH
*
*   MODULE TYPE= PROCEDURE
*
*      PROCESSOR= ASSEMBLER (XF)
*
*      MODULE SIZE= 4096 BYTES
*
*      ATTRIBUTES= PAGED LPA, ZERO PSW PROTECT KEY, REENTRANT
*      REUSABLE, REFRESHABLE, SUPERVISOR STATE
*
*   ENTRY POINT= IEFSD062
*
*      PURPOSE= SAME AS FUNCTION
*
*      LINKAGE= FROM IEFSD102 VIA BRANCH
*
*      INPUT DATA=
*      REGISTER 1 POINTS TO LCT
*      JSCB (POINTED TO BY LCT)
*      JCT (POINTED TO BY LCT)
*      SCT (POINTED TO BY LCT)
*      DEB (POINTED TO BY DCB)
*
*      REGISTERS SAVED= NONE
*
*      REGISTER CONTENTS DURING PROCESSING=
*      REGISTER 8 POINTS TO LCT
*
*      REGISTERS RESTORED= NONE
*
*   EXIT - NORMAL= TO IEFSD103, VIA BALR
*
*      CONDITIONS= ALWAYS, UNLESS NON-ZERO RETURN CODE FROM
*      ALLOCATION
*
*      OUTPUT DATA= REGISTER 1 POINTS TO IEFPARAM, WHICH CONTAINS
*      THE FOLLOWING INFORMATION:
*         POINTER TO USER PARM FIELD
*         POINTER TO EMPTY ATTACH LIST
*         POINTER TO TIOT POINTER
*         POINTER TO CURRENT TCB
*         POINTER TO LCT
*         ECB LIST
*         POINTER TO FETCHLIB DCB
*      THE LCT CONTAINS A POINTER TO THE OPEN JOBLIB/STEPLIB DCB
*      JOB STATUS BITS ARE SET IN THE JCT AND JSCB               Y02641
*      THE JOURNAL OF THE STEP'S CONTROL BLOCKS IS CREATED BY    Y02641
*         THE SUBROUTINES IEFXB604 AND IEFXB500                  Y02641
*
*      RETURN CODES= NONE
*
*   EXIT - ERROR=
*
*      TO IEFSD164 VIA BRANCH
*
*      CONDITIONS= NON-ZERO RETURN CODE FROM ALLOCATION
*      OR IEFICATL, THE ALLOCATE CATALOG CONTROL INTERFACE       Y02665
*      ROUTINE.                                                  Y02665
*
*      OUTPUT DATA=
*      RETURN CODE SET IN IEL TO INDICATE ALLOC. ERROR.
*      ALLOC. ERROR INDICATOR IS SET IN LCTOPSW3.
*      THE PARAMETER LIST RETURNED FROM ALLOC. IS PASSED IN
*         REGISTER 1. (FIRST WORD OF LIST POINTS TO LCT.)
*      IF A CATALOG FAILURE, THE JOB FAILED INDICATOR IN THE     Y02665
*         LCT IS SET.                                            Y02665
*
*   EXTERNAL REFERENCES=
*
*      ROUTINES=
*      IEFXB604, TO WRITE STEP HEADER RECORD                     Y02641
*      INPUT IS LCT POINTER                                      Y02641
*      LINKAGE IS VIA BALR                                       Y02641
*
*      IEFW21SD, DEVICE ALLOCATION
*      INPUT IS A 24-BYTE PARAMETER LIST POINTED TO DIRECTLY BY
*         REGISTER 1, WHICH CONTAINS POINTERS TO THE LCT AND JCT
*      LINKAGE IS VIA BALR IF SU 4 IS INSTALLED                @ZA16879
*      LINKAGE IS VIA LINK IF SU4 IS NOT INSTALLED             @ZA16879
*
*      IEFQMRAW, TO READ SIOT AND SCTX
*      INPUT IS QMPA
*      LINKAGE IS VIA BALR
*
*      IEFXB500, TO JOURNAL THE JOB STEP'S CONTROL BLOCKS WHEN   Y02641
*         ALLOCATION IS COMPLETE                                 Y02641
*      INPUT IS A LIST CONTAINING                                Y02641
*         AN INDICATOR TO 'JOURNAL A CHAIN OF CONTROL BLOCKS'    Y02641
*         POINTER TO LCT                                         Y02641
*      LINKAGE IS VIA BALR                                       Y02641
*
*      IEFICATL, TO HAVE CATALOGS OPENED                         Y02665
*      INPUT IS A POINTER TO THE INITIATOR'S JSCB                Y02665
*      LINKAGE IS VIA BALR                                       Y02665
*
*      SWA MANAGER LOCATE MODE, TO WRITE THE JCT AND SCT        YM01566
*      INPUT IS A CODE OF WL AND AN EPA PTR.                    YM01566
*      LINKAGE IS VIA THE JESCT                                 YM01566
*
*      SUBSYSTEM INTERFACE TO NOTIFY THE SUBSYSTEM OF STEP     @Y02BPSR
*         INITIATION                                           @Y02BPSR
*      INPUT IS AN 'SI' SSOB                                   @Y02BPSR
*      LINKAGE IS VIA IEFSSREQ                                 @Y02BPSR
*
*      DATA AREAS= IEFIB650 (CONTAINS MESSAGE TEXTS), JESCT      Y02656
*         SSOB                                                 @Y02BPSR
*
*      CONTROL BLOCKS= DCB, CSCB, IEZATTCH, LCT, JCT, SCT, TIOT,
*      UCB, SIOT, TCB, JSCB, IEL, ASCB                           Y02665
*
*      TABLES=
*      IEFPARAM (PARAMETER LIST BETWEEN INITIATOR MODULES)
*      STEPL (STAE EXIT PARAMETER LIST, FOR INITIATOR ESTAE)     Y02653
*      QMPA
*      GETPART WORK TABLE (GWT)
*
*      MACROS= GETMAIN, FREEMAIN, DEQ, OPEN, IEFSSREQ,         @ZA16879
*              LINK (USED IN NON SU 4 ENVIRONMENT ONLY)        @ZA16879
*
*      ENQUEUE RESOURCES=
*      GENERIC DEQ IS ISSUED AGAINST SYSDSN IF DATA SET          Y02652
*      INTEGRITY IS TO BE TURNED OFF.                            Y02652
*
*      CHANGE LEVEL= SEE MODID MACRO
*      CODE HAS BEEN ADDED FOR THE FOLLOWING SUPPORT CODES:
*                                                                Y02641
*                                                                Y02652
*                                                                Y02653
*                                                                Y02656
*                                                                Y02665
*                                                                Y02669
*                                                                Y02651
*                                                              @Y02BPSR
*                                                              @Z40FPPJ
*
*      CODE HAS BEEN ADDED FOR THE FOLLOWING APARS:
*                                                              @ZA03944
*                                                              @ZA05831
*                                                              @ZA07506
*                                                              @ZA08701
*                                                              @ZA10117
*                                                              @ZA11857
*                                                              @ZA16879
*   MESSAGES= IEF188I PROBLEM PROGRAM ATTRIBUTES ASSIGNED        Y02656
*             IEF689I JOB JJJJJJJJ FAILED DDDDDDDD DID NOT     @ZA07506
*                     OPEN                                     @ZA07506
*   CODES = 0BA                                                @Y02BPSR
*
**********************************************************************
         EJECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
         BALR  R12,0
         USING IOPARAMS,R9
         USING  IEFLOT,R8
         USING IEFJCT,R7
         USING IEFSCT,R6
         USING IEFCSCB,R5
         USING *,R12
IEFSD162 MODID                                                   Y01886
***********************************************************************
         EJECT
         LR    R8,R1                    ADDRESS OF LCT
         L     R6,LCTSCTAD              ADDR OF SCT.               CR17
         L     R7,LCTJCTAD         JCT ADDRESS FROM LCT            I272
         LA    R9,QMGR1                LOAD ADDR OF QMGR PARAM AREA
*
*THE FOLLOWING SECTION OF CODE WHICH CALCULATES THE STEP TIME    A41879
*HAS BEEN MOVED FROM A POSITION AFTER THE LINK TO ALLOCATION     A41879
*TO THIS POSITION BEFORE THE LINK. IEFVKIMP NEEDS THE            A41879
*INFORMATION CALCULATED BY THIS ROUTINE FOR PART OF ITS          A41879
*DETERMINATION IF THE PRESENT STEP SHOULD BE RUN.                A41879
STEPTIME LA    R1,LCTTMWRK+4     2ND WORD OF TIMER AREA          A41879
*        CLEAR THE TIME USED FIELDS IN THE LCT IN CASE THEY     YM08110
*        ARE NOT RE-INITIALIZED IN THE NORMAL MANNER. THIS      YM08110
*        COULD HAPPEN IN ONE OF THE FOLLOWING WAYS:             YM08110
*              - A STEP IS NOT TIMED                            YM08110
*              - A STEP IS NOT ATTACHED BECAUSE OF A GETPART    YM08110
*                ERROR                                          YM08110
*              - NORMAL PROCESSING IS SKIPPED BECAUSE THE       YM08110
*                ESTAE EXIT ROUTINE RECEIVES CONTROL FOR SOME   YM08110
*                REASON.                                        YM08110
*        (CURRENTLY IEFSD161 CLEARS THE TASK TIME BETWEEN       YM08110
*        JOBS. IEFSD263 CLEARS THE TASK TIME BETWEEN STEPS      YM08110
*        FOR THE FIRST 2 CASES, BUT NOT THE THIRD CASE.         YM08110
*        WITHOUT THIS FIX, THE SRB TIME WOULD NOT BE CLEARED    YM08110
*        FOR ANY OF THESE SITUATIONS.)                          YM08110
         XR    R5,R5                                            YM08110
         ST    R5,LCTTSTU4                                      YM08110
         ST    R5,LCTTSRB4                                      YM08110
         CLC   SCTSTIME,CF0      IS THIS A PROC STEP             A41879
         BE    STEPLEFT          THE USER SPECIFIED TIME=        A41879
*                                FOR THE WHOLE PROC. THAT        A41879
*                                APPLIED TO 1ST STEP. NOW        A41879
*                                WE SHALL USE WHAT IS LEFT.      A41879
         MVC   1(3,R1),SCTSTIME  ELSE MOVE IN TIME               A41879
STEPLEFT EQU   *                                                 A41879
         MVC   SCTSTIME(3),1(R1) MOVE TIME REMAINING TO SCT      A41879
         MVI   LCTTMWRK+DEC8,HEX00  IND THAT TIME VALUE IS       A41879
*                                   FOR STEP                     A41879
         L     R14,JCTJMRTL      GET JOB TIME LIMIT              A41879
         SRL   R14,DEC8                                          A41879
         LTR   R14,R14           IS THERE A JOB TIME LIMIT       A41879
         BZ    IEFSD022          NO,USE STEP TIME IN SCT         A41879
         CL    R14,HOURS24       DOES ORIG JOB TIME=1440         A41879
         BE    LONGJOB           YES                             A41879
         S     R14,LCTTMWRK      GET JOB TIME LEFT               A41879
         BNM   NOTMINUS          SET TO ZERO IF MINUS            A41879
         SR    R14,R14                                           A41879
NOTMINUS EQU   *                                                 A41879
         CL    R14,LCTTMWRK+DEC4  JOB TIME LEFT GT STEP          A41879
*                                 TIME NEEDED                    A41879
         BNL   IEFSD022          YES,USE STEP TIME FROM SCT      A41879
LONGJOB  EQU   *                                                 A41879
         ST    R14,DEC0(R1)      NO-USE JOB TIME LEFT            A41879
         MVI   LCTTMWRK+DEC8,HEX80  IND THAT TIME IS FOR JOB     A41879
*****************************************************************
*
*        FOR STARTED TASKS, SET THE SCT STEPNAME FIELD IN CHKEY
*        SO THAT THE TASK CAN BE CANCELED WHILE IN ALLOCATION.
*
*****************************************************************
IEFSD022 EQU   *
         L     R5,LCTQDRTY        ADDRESS OF CSCB                  I272
         CLI   CHVCD,MOUNTCMD      CHECK FOR MOUNT COMMAND       Y02652
         BE    STARTING            SO IT CAN BE CANCELED DURING  Y02652
*                                  ALLOCATION, A MOUNT COMMAND   Y02652
*                                  MUST BE TREATED THE SAME AS A Y02652
*                                  START COMMAND                 Y02652
         CLI   CHVCD,SPROGRAM      IS THIS A STARTED TASK         20032
         BNE   IEFSD024            BRANCH NOT STARTED TASK        20032
STARTING EQU   *                                                  M3431
         CLC   SCTSCLPC(X8),ACSTARTG  TASKNAME ON COMMAND          I272
         BNE   SKIPSCAN           TASK SPECIFIED SKIP SCAN         I272
         LA    R0,X256            GET CORE  8 BYTES FOR PARM,      I272
         GETMAIN  R,LV=(0)        176 BYTES FOR READ AREA, 72 RSA  I272
         LR    R3,R1              ADDRESS OFEXTERNAL LIST          I272
         LA    R10,X8(R3)          ADDRESS OF READ IN AREA         I272
         LA    R13,X184(R3)       ADDRESS OF REG SAVE AREA
         USING SIOT,R10           TEMP SIOT BASE                   I272
         ST    R10,X0(R3)          ADDRESS OF READ IN AREA         I272
         MVC   X4(X4,R3),SCTFSIOT  TTR OF SIOT FROM SCT            I272
         CLC   SCTLSIOT(LRBA),CF0  CHECK WHETHER ANY SIOTS EXIST Y02670
         BE    NODDRDER             BRANCH NO SIOTS                I272
         ST    R3,QMPCM            PARM LIST                       I272
         MVI   QMPCM,ONEREC        READ ONE RECORD                 I272
         MVI   QMPOP,READCODE      READ OP CODE                    I272
REREAD   L     R15,IEFQMGRV       ADDRESS OF IEFQMRAW              I272
         LR    R1,R9              ADDRESS OF QMPA                  I272
         BALR  R14,R15                                             I272
         CLC   SCTDDNAM(X8),IEFRDER  IS DDNAME IEFRDER             I272
         BE    DDRDER             BRANCH YES                       I272
         CLC   SCTLSIOT(LRBA),SIOTDSKA  CHECK FOR LAST SIOT      Y02670
         BNE   NEXTTTR             NOT LAST, GET NEXT SIOT       Y02670
         B     NODDRDER           IEFRDER NOT FOUND DEFAULT PROC   I272
NEXTTTR  MVC   X4(X4,R3),SCTPSIOT  TTR OF NEXT TTR IN CHAIN        I272
         B     REREAD                                              I272
NODDRDER MVC   CHKEY(X8),JCTJNAME MOVE PROC TO CSCB AS TASK NAME   I272
         MVC   SCTSNAME(X8),JCTJNAME  MAKE JOBNAME STEPNAME        I272
         B     IEF16205                                            I272
SKIPSCAN MVC   SCTSNAME(X8),SCTSCLPC  MOVE TASKNAME TO STEP NAME   I272
         MVI   SCTSCLPC,BLANK      INSERT BLANK                    I272
         MVC   SCTSCLPC+X1(X7),SCTSCLPC  BLANK STEP                I272
         B     IEFSD024                                            I272
DDRDER   CLC   SCTUTYPE(X4),BLANKFW  IS UNIT TYPE SPECIFIED        I272
         BE    NODDRDER            BRANCH ON NO UNIT               I272
         MVC   SCTSNAME(X8),SCTUTYPE  SAVE UNIT NAME IN SCT        I272
         MVC   CHKEY(X8),SCTUTYPE  SAVE UNIT WANTED IN CSCB        I272
IEF16205 EQU   *                                                   I272
         MVI   SCTSCLPC,BLANK      INSERT BLANK                    I272
         MVC   SCTSCLPC+X1(X7),SCTSCLPC  BLANK STEP THAT CALLED    I272
         DROP R10
         OI    LCTINTSW,LCTSTART  SET SWITCH                       I272
         L     R10,LCTTCBAD       ADDRESS OF INIT'S TCB            I272
         USING TCB,R10                 TCB ADDRESSABILITY         20029
         L     R10,TCBTIO              ADDRESS OF TIOT            20029
         DROP  R10                                                20029
         USING IEFTIOT,R10             TIOT ADDRESSABILITY        20029
         MVC   TIOCSTEP(X8),CHKEY TIOT STEP NAME = CHKEY           I272
         LR    R1,R3              SET UP TO FREE READIN AREA       I272
         LA R0,X256               LENGTH TO BE FREED               I272
         FREEMAIN  R,LV=(0),A=(1) FREE CORE                        I272
         DROP  R10                                             @Y02BPSR
IEFSD024 EQU   *                                                   I272
*****************************************************************
*
*        CALL THE SUBSYSTEM TO NOTIFY OF STEP INITIATION       @Y02BPSR
*
*****************************************************************
         LA    R13,REGSAVE                                     @Y02BPSR
         L     R2,LCTSSOBA         POINT TO SSOB HEADER        @Y02BPSR
         USING SSOB,R2                                         @Y02BPSR
         LA    R3,LCTIWORK         USE BEGINNING OF INIT.      @Y02BPSR
*                                  WORK AREA AS THE SSOB       @Y02BPSR
*                                  FUNCTIONAL SECTION          @Y02BPSR
         USING SSOBEXT,R3                                      @Y02BPSR
         XC    SSSIBGN(SSSISIZE),SSSIBGN CLEAR FUNCTIONAL      @Y02BPSR
*                                  SECTION                     @Y02BPSR
         LA    R1,SSOBNSSI         SET FUNCTION ID IN HEADER   @Y02BPSR
         STH   R1,SSOBFUNC                                     @Y02BPSR
         XR    R1,R1               CLEAR SSI RETURN CODE       @Y02BPSR
         ST    R1,SSOBRETN                                     @Y02BPSR
         ST    R3,SSOBINDV         POINT HEADER TO THE         @Y02BPSR
*                                  FUNTIONAL SECTION           @Y02BPSR
         LA    R1,SSSISIZE         SET SIZE OF FUNCTIONAL      @Y02BPSR
*                                  SECTION                     @Y02BPSR
         STH   R1,SSSILEN                                      @Y02BPSR
*        PASS PTR. TO NAME ON THE EXEC PGM=   STATEMENT        @Y02BPSR
         LA    R1,SCTSNAME                                     @Y02BPSR
         ST    R1,SSSIPSNM                                     @Y02BPSR
*        PASS PTR. TO NAME ON THE EXEC PROC=   STATEMENT       @Y02BPSR
         LA    R1,SCTSCLPC                                     @Y02BPSR
         ST    R1,SSSIPPSN                                     @Y02BPSR
*        PASS PTR. TO STEP NUMBER                              @Y02BPSR
         LA    R1,SCTSNUMB                                     @Y02BPSR
         ST    R1,SSSIPSNO                                     @Y02BPSR
*        SAVE THE PROTECT KEY FROM THE CURRENT TCB AND SET THE @Y02BPSR
*        TCB KEY TO 1. THIS IS DONE IN CASE THE SUBSYSTEM USES @Y02BPSR
*        THE TCB KEY TO DETERMINE THE KEY TO BE ASSIGNED TO    @Y02BPSR
*        GOTTEN STORAGE.                                       @Y02BPSR
         L     R10,LCTTCBAD                                    @Y02BPSR
         USING TCB,R10                                         @Y02BPSR
         MVC   LCTPARM2(L'TCBPKF),TCBPKF                       @Y02BPSR
         MVI   TCBPKF,KEYSCHED                                 @Y02BPSR
*        SET UP THE PARAMETER LIST AND CALL THE SUBSYSTEM      @Y02BPSR
         ST    R2,LCTPARM1                                     @Y02BPSR
         OI    LCTPARM1,HEX80      MARK END OF LIST            @Y02BPSR
         LA    R1,LCTPARM1                                     @Y02BPSR
         SPACE 1                                               @Y02BPSR
         IEFSSREQ                                              @Y02BPSR
         SPACE 1                                               @Y02BPSR
         MVC   TCBPKF,LCTPARM2     RESTORE THE TCB PROTECT KEY @Y02BPSR
         DROP  R10                                             @Y02BPSR
*        CHECK THE RETURN CODE FROM THE SSI                    @Y02BPSR
         LA    R1,SSRTOK                                       @Y02BPSR
         CR    R1,R15                                          @Y02BPSR
         BE    SSCALLOK            SUCCESSFUL CALL             @Y02BPSR
         LA    R1,SSRTNSUP                                     @Y02BPSR
         CR    R1,R15                                          @Y02BPSR
         BE    SSCALLOK            OK, THIS FUNCTION IS NOT    @Y02BPSR
*                                  SUPPORTED BY ALL SUBSYSTEMS @Y02BPSR
*        FOR OTHER RETURN CODES FROM SSI, ABEND WITH THE SSI   @Y02BPSR
*        COMPLETION CODE (0BA)                                 @Y02BPSR
         L     R1,ABENCODE                                     @Y02BPSR
         ABEND (1),,,SYSTEM                                    @Y02BPSR
SSCALLOK EQU   *                                               @Y02BPSR
*        CLEAR PART OF THE SSOB HEADER, TO AVOID POSSIBLE      @Y02BPSR
*        CONFUSION                                             @Y02BPSR
         XC    SSOBFUNC,SSOBFUNC                               @Y02BPSR
         XC    SSOBRETN,SSOBRETN                               @Y02BPSR
         XC    SSOBINDV,SSOBINDV                               @Y02BPSR
         DROP  R2                                              @Y02BPSR
         DROP  R3                                              @Y02BPSR
*****************************************************************
*
*        PRE-ALLOCATION CHECKPOINT RESTART PROCESSING
*
*****************************************************************
*        SET UP TO PASS PARAMETERS TO IEFZB604, A PLS MODULE     Y02641
         ST    R8,LCTPARM2         PASS LCT PTR. (AS PARAMETER)  Y02641
         LA    R1,LCTPARM2         GET POINTER TO PARAMETER      Y02641
         ST    R1,LCTPARM1                                       Y02641
         LA    R1,LCTPARM1         PASS PTR. TO PARM LIST        Y02641
         LA    R13,REGSAVE         PASS REGISTER SAVE AREA       Y02641
         L     R15,VCON604         CALL IEFXB604, WHICH WILL     Y02641
*                                  WRITE THE STEP HEADER RECORD  Y02641
*                                  TO THE JOURNAL AND SET JOB    Y02641
*                                  STATUS BITS TO INDICATE THE   Y02641
*                                  STEP HAS ENTERED ALLOCATION   Y02641
         BALR  R14,R15             CALL IEFXB604                 Y02641
***********************************************************************
*                                                                     *
*        INVOKE DEVICE ALLOCATION
*                                                                     *
***********************************************************************
*  THE FOLLOWING SECTION OF CODE BRANCHES TO THE ALLOCATE SUBROUTINE  *
*  AND,UPON ALLOCATE'S RETURN, CHECKS A RETURN CODE IN R15. IF R15 IS *
*  ZERO, PROCESSING CONTINUES NORMALLY. IF R15 IS NOT ZERO, THE       *
*  ATTACH MODULE (IEFSD263) IS BYPASSED                               *
         L     R2,LCTPARM3         SAVE GWT ADDRESS IN REG         I272
         LA    R0,X96              GETMAIN SIZE                  Y02652
         LA    R1,TCORE           LOAD SUBPOOL                     I272
         SLL   R1,X24             SUBPOOL IN HIGH ORDER BYTE       I272
         OR    R0,R1              SUBPOOL AND LENGTH               I272
         GETMAIN  R,LV=(0)        72 BYTE SAVE AREA 24 PARM AREA   I272
         LA    R13,X24(R1)        ADDRESS OF SAVE AREA             I272
         L     R3,LCTJCTAD              JCT ADDRESS FROM LCT
         ST    R3,4(0,R1)               TO PARAMETER LIST
         ST    R8,0(0,R1)               LCT ADDRESS TO PAR LST
         LR    R3,R1              SAVE PARM REGISTER               M069
*        SET CANCELABLE IN CASE NOT CANCELABLE
         OI    CHACT,CHCL       SET CANCELABLE BIT                 M069
ALLOCATE EQU   *                                                   M069
         L     R9,LCTJSCB          GET JSCB POINTER            @ZA10117
         USING IEZJSCB,R9          SET JSCB ADDRESSABILITY     @ZA10117
         MVC   JSCBSTEP,LCTSNUMB   MOVE STEP NUMBER TO JSCB    @ZA10117
         SR    R4,R4               CLEAR REGISTER FOR SWITCH        O99
         SPACE 2
         L     R14,CVTPTR(0,0)     ESTABLISH ADDR.             @ZA16879
         USING CVTMAP,R14          TO CVT                      @ZA16879
         L     R10,CVTIHASU        GET ADDR OF INSTALLED       @ZA16879
         USING SUBITS,R10          SU BIT STRING               @ZA16879
         TM    SUBYTE1,SU4BIT      IS SU4 IN THIS SYSTEM?      @ZA16879
         BO    IEFSD003            YES, SKIP LINK              @ZA16879
         LINK  EP=IEFW21SD,MF=(E,(1))                          @ZA16879
         B     IEFSD004            CONTINUE                    @ZA16879
         DROP  R10                                             @ZA16879
         DROP  R14                                             @ZA16879
         SPACE 2
IEFSD003 EQU   *                   SET UP FOR BALR             @ZA16879
         L     R15,CVTPTR          GET PTR TO CVT              @Z40FPPJ
         USING CVTMAP,R15                                      @Z40FPPJ
         L     R15,CVTJESCT        GET PTR TO JESCT            @Z40FPPJ
         DROP  R15                                             @Z40FPPJ
         USING JESCT,R15                                       @Z40FPPJ
         L     R15,JESALLOC        GET ADDRESS OF ALLOC        @Z40FPPJ
         BALR  R14,R15             GO TO DEVICE ALLOC          @Z40FPPJ
         DROP  R15                                             @Z40FPPJ
*                                                                   O99
IEFSD004 EQU   *                                               @ZA16879
         ST    R2,LCTPARM3         RESTORE SAVED GWT ADDRESS       I272
         LR    R3,R15                   SAVE RETURN CODE
         LR    R2,R1                    SAVE NEW PARAMETER LIST ADDRESS
         OI    LCTERR,LCTACOMP     TURN ON THE ALLOCATION COMP  YM07219
*                                  FLAG USED FOR ESTAE RETRY    YM07219
         TM    LCTOPSW1,LCTCANF   TEST FOR CANCELABLE TASK         I272
         BZ    IEFSD005           BRANCH IF CANCELABLE TASK        I272
         NI    CHACT,X255-CHCL     RESET TO NON-CANCELLABLE        I272
IEFSD005 EQU   *                                                    O99
         LR    R1,R13                   RESTORE ARSA POINTER.      CR17
         FREEMAIN R,LV=N72,A=(1),SP=TCORE  FREE SAVE AREA        Y02652
***********************************************************************
*
*        POST ALLOCATION JOURNAL PROCESSING
*
***********************************************************************
         NI    JSCBJJSB,X'FF'-JSCBJNLN  TURN OFF 'NO JOURNAL'  @ZA08701
         LA    R1,LCTPARM1              USE LCTPARM1 AND 2     @ZA08701
         USING JNLPARM,R1               SET ADDRESSABILITY     @ZA08701
         XR    R14,R14                                         @ZA08701
         ST    R14,JNLPCALL             CLEAR FIRST WORD       @ZA08701
         MVI   JNLPCALL,JNLINIT    INDICATE INITIATOR CALL     @ZA08701
*                                  AFTER ALLOCATION            @ZA08701
         ST    R8,JNLPPTRX         PASS LCT POINTER            @ZA08701
         ST    R1,LCTPARM4         PASS POINTER TO PARAMETER   @ZA08701
         LA    R1,LCTPARM4         LOAD PARM PTR REG           @ZA08701
         LA    R13,REGSAVE         PASS REGISTER SAVE AREA     @ZA08701
         L     R15,VCON500         GET ADDRESS OF IEFXB500     @ZA08701
         BALR  R14,R15             CALL JOURNAL WRITE ROUTINE  @ZA08701
         LTR   R3,R3                    SHOUD ATTACH BE BYPASSED.  CR17
         BZ    IEFSD010                 NO.                        CR17
         L     R14,LCTENTR         ADDRESS OF IEL                 20032
         USING IEZIEL,R14          IEL ADDRESSABILITY             20032
         L     R14,IELEXIT         ADDRESS OF EXIT LIST           20032
         USING IELEXITS,R14        EXIT LIST ADDRESSABILITY       20032
*        IF A STEP IS BEING BYPASSED BECAUSE OF CONDITION       YA02927
*        CODES, DO NOT SET THE ALLOCATION ERROR RETURN CODE     YA02927
*        IN THE IEL. THIS IS TO PREVENT STC FROM WRITING A      YA02927
*        MESSAGE INDICATING AN ALLOCATION ERROR IN THAT         YA02927
*        SITUATION.                                             YA02927
         TM    LCTERR,LCTSFAIL                                  YA02927
         BO    BYPASS1            SKIP SETTING RETURN CODE      YA02927
         CLI   IELRTNCD,IELRTGD    HAS RET CD ALREADY BEEN SET   Y02652
         BNE   BYPASS1             YES, DONT DESTROY IT           M0397
         MVI   IELRTNCD,IELRTALC   ALLOC ERROR RETURN CODE       Y02652
         MVI   IELRCXT,IELINIT     SET RETURN CODE ORIGIN OF     Y02668
*                                  'INITIATOR'                   Y02669
         DROP  R14                                                20032
BYPASS1  EQU   *                                                  M0397
         OI    LCTOPSW3,LCTALERR   INDICATE ALLOC ERR TO 164      M0475
         B     EXIT164             CALL SUBROUTINE TO TAKE       Y02665
*                                  ERROR EXIT                    Y02665
****************************************************************** CR17
*                                                                  CR17
*        FOR STARTED TASKS, SET UP CHUNIT AND CHKEY SO THE TASK
*        CAN BE CANCELED. ALSO SET THE CURRENT AND NEW TIOTS'
*        STEPNAME FIELDS TO THE VALUE AT CHKEY.
*                                                                  CR17
****************************************************************** CR17
IEFSD010 EQU    *                                                  CR17
         CLI   CHVCD,SPROGRAM     CHECK FOR STARTED PROGRAM        I272
         BNE   IEFSD011           BRANCH NOT A STARTED TASK        I272
         L     R10,12(R2)         LOAD TIOT LIST PTR               I272
         L     R10,0(R10)         PTR TO TIOT                      I272
         USING IEFTIOT,R10                                     @Y02BPSR
TIOTSRCH CLC   TIOEDDNM(X8),IEFRDER  IS DDNAME IEFRDER             I272
         BE    UCBADDR            BRANCH YES                       I272
         SR    R3,R3              ZERO REGISTER                    I272
         IC    R3,TIOELNGH        LENGTH OF TIOT ENTRY             I272
         LTR   R3,R3              TEST FOR END OF TIOT             I272
         BZ    NORDER             BRANCH END OF TIOT               I272
         AR    R10,R3             ADD ENTRY LENGTH TO BASE         I272
         B     TIOTSRCH           TEST NEXT DD ENTRY               I272
UCBADDR  L     R3,TIOESTTB        LOAD UCB POINTER                 I272
         LA    R3,X0(R3)           ZERO HIGH ORDER BYTE            I272
         LTR   R3,R3              TEST FOR ZERO UCB REQUEST FOR    I272
*                                 DUMMY DEVICE                     I272
         BZ    NORDER             BRANCH IF ZERO                   I272
         USING UCBOB,R3           ADDRESSABILITY FOR UCB           I272
MOVENAME MVC   CHUNIT(X3),UCBNAME  MOVE UCB NAME INTO CSCB         I272
         TM    LCTINTSW,LCTSTART  WAS TASK NAME ON COMMAND         I272
         BZ    IEFSD011           BRANCH NAME SPECIFIED            I272
         MVI   CHKEY,BLANK        MOVE IN BLANK                    I272
         MVC   CHKEY+X1(X7),CHKEY BLANK CHKEY FIELD                I272
         MVC   CHKEY(X3),UCBNAME  MOVE UCB NAME INTO CSCB          I272
         B     TIOTKEY                                             I272
         DROP  R3                                                  I272
NORDER   TM    LCTINTSW,LCTSTART  WAS TASK NAME ON COMMAND         I272
         BZ    IEFSD011           BRANCH NAME SPECIFIED            I272
         MVC   CHKEY(X8),CHCLS    MOVE PROC NAME INTO ID FIELD     I272
         DROP  R10                                             @Y02BPSR
TIOTKEY  L     R10,LCTTCBAD       ADDRESS OF INIT'S TCB            I272
         USING TCB,R10                 TCB ADDRESSABILITY         20029
         L     R10,TCBTIO              ADDRESS OF TIOT            20029
         DROP  R10                                                20029
         USING IEFTIOT,R10             TIOT ADDRESSABILITY        20029
         MVC   TIOCSTEP(X8),CHKEY TIOT STEP NAME = CHKEY           I272
         L     R10,12(R2)         LOAD TIOT LIST POINTER           I272
         L     R10,X0(R10)        PTR TO TIOT                      I272
         MVC   TIOCSTEP(X8),CHKEY TIOT STEP NAME = CHKEY           I272
         DROP  R10                                             @Y02BPSR
*****************************************************************
*
*        POST-ALLOCATION CHECKPOINT RESTART PROCESSING
*
*****************************************************************
IEFSD011 EQU   *                                                   I272
         NI    JCTJSB,X'FF'-(JCTJSBIN+JCTJSBAL+JCTJSBTM)         Y02641
*                                  TURN OFF ALL JOB STATUS BITS  Y02641
*                                  (EXCEPT PERHAPS JCTJSBEX)     Y02641
         OI    JCTJSB,JCTJSBEX     INDICATE JOB HAS COMPLETED    Y02641
*                                  ALLOCATION                    Y02641
         NI    JSCBJJSB,X'FF'-(JSCBJSBI+JSCBJSBA+JSCBJSBT)  TURN Y02641
*                                  OFF ALL JOB STATUS BITS       Y02641
*                                  (EXCEPT PERHAPS JSCBJSBX)     Y02641
         OI    JSCBJJSB,JSCBJSBX   INDICATE JOB HAS COMPLETED    Y02641
*                                  ALLOCATION                    Y02641
         DROP  R9                                                Y02641
         TM    LCTOPSW2,LCTCRF     CHECK 'DISALLOW C/R' INDIC.   Y02641
         BO    SKPNOCKP            SKIP SETTING 'NO CHECKPOINT'  Y02641
*                                  INDICATOR IF LCT INDICATOR IS Y02641
*                                  ON, BECAUSE THE SPECIAL       Y02641
*                                  PROCESSING REQUIRED HAS       Y02641
*                                  ALREADY BEEN DONE             Y02641
         L     R4,LCTTCBAD         POINT TO INIT TCB             Y02641
         USING TCB,R4                                            Y02641
         NI    TCBABF,X'FF'-TCBNOCHK  TURN OFF INDICATOR WHICH   Y02641
*                                  SUPPRESSES CHECKPOINTS IN     Y02641
*                                  CASE IT HAD BEEN SET FOR THE  Y02641
*                                  PREVIOUS STEP                 Y02641
         TM    SCTSSTAT,SCTNOCKP   CHECK WHETHER THE STEP        Y02641
*                                  REQUESTED BYPASSING           Y02641
*                                  CHECKPOINTS                   Y02641
         BZ    SKPNOCKP            NO, DO NOT SET INDICATOR      Y02641
         OI    TCBABF,TCBNOCHK     SET 'NO CHECKPOINT' INDIC.    Y02641
         DROP  R4                                                Y02641
SKPNOCKP EQU   *                                                 Y02641
         OI    SCTSTEND,STEPSTRT        SET STEP STARTED BIT IN THE SCT
         NI    JCTRSW2,X'FF'-(CRMASK+JCTNARST)  TURN OFF BITS    Y02641
*                                  WHICH WILL BE PROPOGATED FROM Y02641
*                                  THE SCT AND A BIT WHICH MUST  Y02641
*                                  BE CLEARED BETWEEN STEPS      Y02641
         LA    R4,CRMASK           GET MASK OF BITS TO BE        Y02641
*                                  PROPOGATED FROM THE SCT       Y02641
         SR    R10,R10             ZERO REGISTER,                  CR17
         IC    R10,SCTSSTAT        LOAD STATUS INDICATORS          CR17
         NR    R10,R4              GET RID OF ALL BITS BUT C/R     CR17
         EX    R10,SETBITS         EXEC INSTRUCTION TO SET BITS    CR17
*                                                               YM01566
*        BUILD EPA'S AND INVOKE SWA MANAGER WRITE LOCATE FOR    YM01566
*        THE JCT AND SCT, TO CAUSE THE INFORMATION IN THE JCT   YM01566
*        AND SCT TO BE JOURNALED.                               YM01566
         LA    R13,REGSAVE         REGISTER SAVE AREA           YM01566
         LA    R1,REGSAVE+72       USE SECOND REGISTER SAVE     YM01566
*                                  AREA IN LCT TO BUILD THE     YM01566
*                                  INTERFACE FOR THE SWA MGR.   YM01566
         USING SMPARMS,R1                                       YM01566
         LA    R15,SMEPAPTR                                     YM01566
         ST    R15,SMPARM1         SET POINTER TO FIRST         YM01566
*                                  PARAMETER (EPA PTR.)         YM01566
         LA    R15,SMCODE                                       YM01566
         ST    R15,SMPARM2         SET POINTER TO SECOND        YM01566
*                                  PARAMETER (CODE OF WL)       YM01566
         LA    R15,SMEPA1                                       YM01566
         ST    R15,SMEPAPTR        SET POINTER TO FIRST EPA     YM01566
         MVC   SMCODE,WL           SET CODE FOR WRITE LOCATE    YM01566
         XC    SMEPA1(SMEND-SMEPA1),SMEPA1 CLEAR EPA'S          YM01566
         LA    R14,SMEPA1          INITIALIZE FIRST EPA (TO     YM01566
*                                  WRITE JCT)                   YM01566
         USING ZB505,R14                                        YM01566
         ST    R7,SWBLKPTR                                      YM01566
         MVC   SWVA,LCTJCTVA                                    YM01566
         LA    R15,SWLGTH                                       YM01566
         ST    R15,SWLNGTH                                      YM01566
         LA    R15,SMEPA2                                       YM01566
         ST    R15,SWCHNPTR                                     YM01566
*        INITIALIZE SECOND (AND LAST) EPA (TO WRITE SCT)        YM01566
         LA    R14,SMEPA2                                       YM01566
         USING ZB505,R14                                        YM01566
         ST    R6,SWBLKPTR                                      YM01566
         MVC   SWVA,LCTSCTVA                                    YM01566
         LA    R15,SWLGTH                                       YM01566
         ST    R15,SWLNGTH                                      YM01566
         DROP  R14                                              YM01566
*        GET ENTRY POINT OF SWA MANAGER LOCATE MODE             YM01566
         L     R15,CVTPTR                                       YM01566
         USING CVTMAP,R15                                       YM01566
         L     R15,CVTJESCT                                     YM01566
         USING JESCT,R15                                        YM01566
         L     R15,JESWAA                                       YM01566
         DROP  R15                                              YM01566
*        INVOKE THE SWA MANAGER                                 YM01566
         BALR  R14,R15                                          YM01566
         DROP  R1                                               YM01566
****************************************************************** CR17
*                                                                  CR17
* GET CORE FOR THE USER PARAM LIST,BUILD PARAM LIST,SET UP THE PRO CR17
* INTERFACE AND SAVE THE ADDR IN REGISTER 4.                       CR17
*                                                                  CR17
****************************************************************** CR17
         USING IHADCB,R3                                           I272
         LH    R3,SCTSEXEC              GET CORE FOR THE NO.OF USE CR17
         LA    R0,8(0,R3)              PLUS 8 FOR GETMAIN         18428
*        THE EXTRA 8 BYTES ARE USED AS FOLLOWS:                  Y02652
*              FIRST WORD - POINTER TO LENGTH                    Y02652
*              SECOND WORD - LENGTH (IMMEDIATELY BEFORE PARM)    Y02652
         LA    R14,TCORE                                           CR17
         SLL   R14,24                                              CR17
         OR    R0,R14                                              CR17
         GETMAIN    R,LV=(0)            GET USER PARAMS CORE.      CR17
         LR    R4,R1                    SAVE ADDR IN REG 4.        CR17
         ST    R3,4(0,R1)              LENGTH TO LIST             18428
         LA    R0,4(R1)                 ADDR OF LENGTH FIELD IN LI CR17
         ST    R0,0(R1)                                            CR17
         OI    0(R1),128                SET HIGH ORDER BIT TO 1.   CR17
         LA    R9,QMGR1                 Q MNGR PARAMETER AREA      CR17
         USING IOPARAMS,R9                                      YM01566
         BCTR  R3,0                                                CR17
         LTR   R3,R3                                               CR17
         BM    SD06220                                             CR17
         LA    R0,176                                              CR17
         GETMAIN R,LV=(0)               GEYMAIN FOR READ BUFFER    CR17
         LR    R5,R1                    SAVE FOR FREEMAIN          CR17
         LA    R13,REGSAVE              REGISTER SAVE AREA         CR17
         LA    R1,REGSAVE+72           REMOTE PARAMETER AREA       CR17
         ST    R1,QMPCL                STORE ADDR OF REMOTE PARAM  CR17
         MVI   QMPOP,4                  READ INDICATOR             CR17
         MVI   QMPNC,X'01'              READ ONE RECORD            CR17
         ST    R5,0(0,R1)              STORE BUFFER ADDRESS        CR17
         MVC   4(4,R1),SCTXBTTR        MOVE TTR                    CR17
         LR    R1,R9                    ADDRESS OF Q MGR PARAMETER CR17
         L     R15,IEFQMGRV             ADDRESS OF Q MNGR          CR17
         BALR  R14,R15                  READ THE RECORD.           CR17
         EX    R3,IEFMOVE1                                         CR17
         LR    R1,R5                   RESTORE POINTER             CR17
         LA    R0,176                                              CR17
         FREEMAIN R,LV=(0),A=(1)                                   CR17
SD06220  EQU   *                                                   CR17
         USING IEFPARAM,R11                                        M069
*                                                                     *
***********************************************************************
*
*        GET STORAGE FOR IEFPARAM AND THE ATTACH PARAMETER LIST.
*        THE ATTACH PARAMETER LIST IS INITIALIZED BY IEFSD103.
*
***********************************************************************
         LA    R0,LISTSIZE        SIZE OF PARMETER LISTS           I270
         LA    R13,LISTSIZE-1     SIZE OF PARM AREA LESS ONE       I270
         LA    R1,TCORE           SUBPOOL 253                      I270
         SLL   R1,X24             SP IN LIGH ORDER BYTE            I270
         OR    R0,R1              SP AND LENGTH IN REG 0           I270
         GETMAIN R,LV=(0)                                          I270
         EX    R13,CLEARCOR       ZERO GOTTON CORE                 I270
         LR    R11,R1             EST ADDRESSABILITY OF PARM ARE   I270
         ST    R4,IEFUSADD        ADDRESS OF USER PARMS            I272
         LA    R0,IEFPSIZE(R11)   ADDRESS OF ATTACH PARM LIST      I270
         ST    R0,IEFREMLS        ADDR OF ATTACH LIST IN PARM LT   I270
         L     R3,12(0,R2)              TIOTLIST POINTER
         ST    R3,IEFTIOTA              PLACE IN PARAMETER LIST
         L     R5,LCTQDRTY              GET CSCB BASE REGISTER
         L     R4,LCTTCBAD        ADDRESS OF INIT'S TCB            I272
         ST    R4,IEFTCBAD              PLACE IN PARAMETER LIST
         USING TCB,R4                  TCB ADDRESSABILITY         20029
         ST    R8,IEFLCTAD              PLACE LCT POINTER INTO PAR LST
         L     R9,LCTSTEPL         GET POINTER TO STAE EXIT      Y02653
*                                  PARAMETER LIST                Y02653
         LTR   R9,R9               CHECK WHETHER PRESENT         Y02653
         BZ    NOSTEPL             SKIP PROCESSING               Y02653
         USING STEPL,R9                                          Y02653
         ST    R11,STEPARAM        SAVE POINTER TO IEFPARAM FOR  Y02653
*                                  IEFIB620                      Y02653
NOSTEPL  EQU   *                                                 Y02653
         LA    R3,IEFAECB               ADDRESS OF ATTACH ECB
         ST    R3,ATTECBAD        ADDRESS OF ATTACH ECB           20030
         DROP  R4                                                Y02652
         LA    R4,CHCECB                                           I272
         ST    R4,CANECBAD        ADDRESS OF CANCEL ECB           20030
         OI    CANECBAD,HEX80     INDICATE END OF ECB LIST       Y02652
*****************************************************************
*
*        OPEN CATALOGS, JOBLIB, STEPLIB, OR FETCHLIB, AS NECESSARY
*
*****************************************************************
*        WHEN JOBLIB AND CATALOGS ARE OPENED, THE CURRENT TCB
*        MUST POINT TO THE P/P TIOT.
*        (WHEN ENTERED, THE INITIATOR RECOVERY ROUTINE WILL      Y02652
*        RESTORE THE POINTER IF PARTIOTB IS NOT 0.)              Y02652
         L     R4,LCTTCBAD                                       Y02652
         USING TCB,R4                                            Y02652
         MVC   PARTIOTB,TCBTIO     SAVE PTR. TO INIT. TIOT       Y02652
         L     R15,IEFTIOTA        GET PTR. TO TIOT PTR.         Y02652
         MVC   TCBTIO,0(R15)       MOVE P/P TIOT PTR. TO INIT.   Y02652
*                                  TCB                           Y02652
*        REG 9 WAS INITIALIZED TO POINT TO THE STEPL JUST        Y02653
*        BEFORE LABEL NOSTEPL.                                   Y02653
         LTR   R9,R9               CHECK WHETHER A STEPL EXISTS  Y02653
         BZ    NOSTEPL2            SKIP PROCESSING IF NO STEPL   Y02653
         NI    STEFLAGS,X'FF'-(STEJOBLB+STESTPLB+STEFCHLB) TURN  Y02653
*                                  OFF ANY LIBRARY INDICATOR     Y02653
*                                  WHICH MAY HAVE BEEN SET FOR   Y02653
*                                  THE PREVIOUS STEP             Y02653
NOSTEPL2 EQU   *                                                 Y02653
*****************************************************************
*
*        OPEN CATALOGS
*
*****************************************************************
         L     R15,LCTJSCB         POINT TO P/P JSCB             Y02665
         USING IEZJSCB,R15                                       Y02665
         L     R14,JSCBPCC         CHECK WHETHER PCCB'S EXIST    Y02665
*                                  (CHAINED OFF P/P JSCB)        Y02665
         LTR   R14,R14                                           Y02665
         BZ    NOPCCBS             NO, NO CATALOGS TO OPEN       Y02665
         DROP  R15                                               Y02665
         L     R1,TCBJSCB          POINT TO INITIATOR JSCB       Y02665
         ST    R1,LCTPARM2         PASS POINTER AS A PARAMETER   Y02665
         LA    R1,LCTPARM2                                       Y02665
         ST    R1,LCTPARM1         PASS POINTER TO PARAMETER     Y02665
         LA    R1,LCTPARM1         POINT TO PARAMETER LIST       Y02665
         LA    R13,REGSAVE         PASS REG. SAVE AREA PTR.      Y02665
         L     R15,VCONCATL                                      Y02665
         BALR  R14,R15             INVOKE IEFICATL               Y02665
         LTR   R15,R15             CHECK RETURN CODE             Y02665
         BNZ   OPENERR3            BRANCH IF ERROR             @ZA07506
NOPCCBS  EQU   *                                                 Y02665
*****************************************************************
*
*        OPEN JOBLIB OR STEPLIB
*
*****************************************************************
         L     R10,TCBTIO              GET TIOT ADDRESS           20029
         USING IEFTIOT,R10                                        M3140
         DROP  R4                                                 20029
         TM    SCTSTAT2,SCTSTPLB       IS STEPLIB PRESENT         17052
         BZ    IEFJOBLB                NO, CHECK JOBLIB           17052
         LA    R0,IEFDCBN-IEFDCBS  DCB LENGTH                     17052
         LR    R4,R0               SUBTRACT ONE                   17052
         BCTR  R4,0                TO EXECUTE MOVE INSTRUCTION    17052
         LA    R14,TCORE           SUBPOOL NUMBER                 17052
         SLL   R14,24              TO HIGH-ORDER BYTE             17052
         OR    R0,R14              OF LENGTH FIELD                17052
*
         GETMAIN R,LV=(0)          GET DCB CORE                   17052
*
         LR    R3,R1               ADDR TO DCB BASE REGISTER      17052
         EX    R4,MOVEDCB          MOVE REMOTE DCB TO GOTTEN CORE 17052
         MVC   DCBDDNAM,STEPLIB        PUT STEPLIB DDNAME INTO DCB17052
         B     IEFJSOPE                OPEN  STEPLIB  DCB         17052
IEFJOBLB TM    JCTJSTAT,JOBLIB         WAS JOBLIB SPECIFIED IN    17052
*                                       JOB
         BZ    IEFSD030                 NO, CHECK FOR FETCH
         LA    R0,IEFDCBN-IEFDCBS       NO.  LENGTH OF DCB.        CR17
         LR    R4,R0                    LENGTH OF DCB - 1
         BCTR  R4,0                     TO EXECUTE
         LA    R14,TCORE                SUBPOOL NUMBER
         SLL   R14,24                   TO HIGH ORDER BYTE
         OR    R0,R14                   OF LENGTH FIELD
         GETMAIN R,LV=(0)               GETMAIN FOR DCB
         LR    R3,R1                    ADDRESS OF REMOTE DCB
         EX    R4,MOVEDCB               MOVE DCB TO GOTTEN CORE
         MVC   DCBDDNAM(8),TIOEDDNM     PUT THE DDNAME IN THE DCB
IEFJSOPE EQU   *
         LTR   R9,R9               CHECK WHETHER A STEPL EXISTS  Y02653
         BZ    NOSTEPL3            NONE, BRANCH AROUND           Y02653
         TM    SCTSTAT2,SCTSTPLB   CHECK WHETHER IT IS JOBLIB    Y02653
*                                  OR STEPLIB                    Y02653
         BZ    SETJOBLB            GO SET JOBLIB INDICATOR       Y02653
         OI    STEFLAGS,STESTPLB   SET STEPLIB INDICATOR         Y02653
*        THE INDICATORS ARE SET SO THAT IN CASE OF AN OPEN       Y02653
*        ABEND, IEFIB621 CAN SET THE CORRESPONDING OPEN ERROR    Y02653
*        RETURN CODE IN THE IXL.                                 Y02653
         B     NOSTEPL3            BRANCH AROUND ELSE CLAUSE     Y02653
SETJOBLB EQU   *                                                 Y02653
         OI    STEFLAGS,STEJOBLB   SET JOBLIB INDICATOR          Y02653
NOSTEPL3 EQU   *                                                 Y02653
         LR    R1,R2                   ALLOCATE PARMLIST         A16531
         MVI   0(R1),X'80'              INDICATE END OF LIST
         OPEN ((3),INPUT),MF=(E,(1))    OPEN THE DCB
         USING IHADCB,R3                                       @ZA07506
         TM    DCBOFLGS,DCBOFOPN        WAS OPEN SUCCESSFUL    @ZA07506
         BZ    OPENERR2                 NO GO TO ERROR ROUTINE @ZA07506
         ST    R3,LCTJOBLB              SAVE JOBLIB DCB POINTER
IEFSD030 TM    SCTSTYPE,SCTGOSTP       WAS FETCHLIB SPECIFIED? @ZA05831
         BZ    IEFSD035               NO, DON'T  OPEN FETCHLIB @ZA05831
*****************************************************************
*
*        OPEN FETCHLIB
*****************************************************************
         LA    R0,IEFDCBN-IEFDCBS       DCB LENGTH
         LR    R4,R0                    DECREMENT BY ONE
         BCTR  R4,0                     FOR EXECUTING MOVE
         LA    R14,TCORE                SUBPOOL NUMBER
         SLL   R14,24                   TO HIGH ORDER BYTE
         OR    R0,R14                   OF LENGTH FIELD
         GETMAIN R,LV=(0)               GET DCB CORE
         LR    R3,R1                    PLACE ADDRESS IN R3
         EX    R4,MOVEDCB               MOVE DCB TO GOTTEN CORE
         MVC   DCBDDNAM,SDFETCH    PLACE PGM=*.DD IN DCB       @ZA05831
         LTR   R9,R9               CHECK WHETHER STEPL EXISTS    Y02653
         BZ    NOSTEPL4            NONE, BRANCH AROUND           Y02653
         NI    STEFLAGS,X'FF'-(STEJOBLB+STESTPLB)  TURN OFF      Y02653
*                                  JOBLIB OR STEPLIB INDICATOR   Y02653
*                                  IN CASE ONE WAS SET           Y02653
         OI    STEFLAGS,STEFCHLB   SET STEPLIB INDICATOR         Y02653
NOSTEPL4 EQU   *                                                 Y02653
         LR    R1,R2                    ADDRESS OF REMOTE LIST
         MVI   0(R1),X'80'              INDICATE END OF LIST
         OPEN ((3),INPUT),MF=(E,(1))    OPEN THE DCB
         TM    DCBOFLGS,DCBOFOPN       WAS OPEN SUCCESSFUL?    @ZA07506
         BZ    OPENERR1                NO GO TO OPEN ROUTINE   @ZA07506
         ST    R3,IEFDCBAD        DCB ADDRESS IN PARM LIST         I270
         DROP  R3                                                Y02652
IEFSD035 EQU   *
*        RESTORE THE INITIATOR TIOT POINTER TO THE INITIATOR TCB Y02652
         L     R4,IEFTCBAD             GET ADDRESS OF INITIATOR'S TCB
         USING TCB,R4                                            Y02652
         MVC   TCBTIO,PARTIOTB     RESTORE TIOT PTR.             Y02652
         XR    R1,R1                                             Y02652
         ST    R1,PARTIOTB         CLEAR SO THE INITIATOR        Y02652
*                                  RECOVERY ROUTINE WILL NOT     Y02652
*                                  ATTEMPT TO RESORE THE PTR.    Y02652
         XC    LCTPARM1(X4),LCTPARM1 ZERO FIELD                    I272
         LR    R1,R2                    ADDRESS OF INPUT LIST
         FREEMAIN  R,LV=24,A=(1),SP=TCORE
         L     R9,LCTASCBA                                       Y02656
         USING ASCB,R9                                           Y02656
***********************************************************************
*                                                                     *
*        IF SPECIAL PROPERTIES WERE REQUESTED AND A JOBLIB OR
*        STEPLIB IS PRESENT, THE LIBRARY MUST BE CHECKED FOR
*        AUTHORIZATION BEFORE ANY SPECIAL PROPERTIES ARE GIVEN
*        TO THE JOB STEP.
*                                                                     *
***********************************************************************
         TM    LCTINTSW,LCTINPPT   WAS PGM. NAME IN PPT          Y02656
         BZ    NOCHECK             NO, DO NOT CHECK JOBLIB       Y02656
         L     R14,LCTJOBLB        A DCB POINTER WILL EXIST ONLY Y02656
*                                  IF JOBLIB OR STEPLIB IS       Y02656
*                                  PRESENT                       Y02656
         LTR   R14,R14                                           Y02656
         BZ    NOCHECK             NO LIBRARY TO CHECK           Y02656
         USING IHADCB,R14                                        Y02656
         L     R14,DCBDEBAD                                      Y02656
         USING DEBBASIC,R14                                      Y02656
         TM    DEBFLGS1,DEBAPFIN   1 MEANS AUTHORIZED            Y02656
         BO    NOCHECK             LEAVE PROPERTIES              Y02656
*        TURN OFF ALL PROPERTIES WHICH MAY HAVE BEEN ASSIGNED IN Y02656
*        IEFSD101                                                Y02656
         NI    LCTOPSW1,X'FF'-LCTCANF  TURN OFF 'CANCEL ONLY AT  Y02656
*                                  ALLOCATION'                   Y02656
         OI    CHACT,CHCL          MAKE CANCELABLE               Y02656
*        TURN OFF SPECIAL PROTECT KEY                            Y02656
         TM    SCTSSTAT,EAADDRBT   CHECK FOR V=R                 Y02656
         BNO   VIRTKEY             NOT V=R, SET V=V KEY          Y02656
         MVC   TCBPKF,JCTJSRNO     MOVE UNIQUE KEY FOR V=R       Y02656
         B     SKIPKEY             BRANCH AROUND 'ELSE' CLAUSE   Y02656
VIRTKEY  EQU   *                                                 Y02656
         MVI   TCBPKF,KEYVIRT      SET V=V KEY                   Y02656
         DROP  R4
SKIPKEY  EQU   *                                                 Y02656
         NI    LCTPUBYT,X'FF'-(LCT1LPU+LCT2LPU+LCTN2LP+LCTNSWP)
*                                  TURN OFF PREFERRED USAGE INDICATORS
*                                  AND 'AUTHORITY TO BE NON-SWAPPABLE'
*                                                              @ZA16879
         NI    LCTINTSW,X'FF'-LCTPRIV  TURN OFF 'PRIVILEGED'     Y02656
         NI    LCTINTS2,X'FF'-LCTSYS  TURN OFF 'SYSTEM TASK'     Y02652
         NI    LCTINTSW,X'FF'-LCTNDSI  TURN OFF NDSI             Y02656
         MVC   ASCBAFFN,NOAFFIN    TURN OFF CPU-TASK AFFINITY    Y02651
         NI    LCTINTS2,X'FF'-LCTBPPAS TURN OFF BYPASS PASSWORD
*                                  PROTECTION                  @ZA03944
         OI    LCTINTSW,LCTPPAA    SET SWITCH TO INDICATE MSG.   Y02656
*                                  IEF188I                       Y02656
*****************************************************************
*
*        COMPLETE ASSIGNMENT OF SPECIAL PROPERTIES               Y02652
*
*****************************************************************
NOCHECK  EQU   *                                                 Y02656
         TM    LCTINTS2,LCTSYS     CHECK FOR SYSTEM TASK         Y02652
         BNO   LVTIME1             BRANCH AROUND 'THEN' CLAUSE   Y02652
         OI    LCTOPSW2,LCTTIMEF   SET 'NOT TO BE TIMED'         Y02652
LVTIME1  EQU   *                                                 Y02652
         TM    LCTOPSW2,LCTTIMEF   CHECK WHETHER JOB IS TO BE    Y02652
*                                  TIMED                         Y02652
*        (THE LCT BIT MAY HAVE BEEN PROPAGATED FROM A BIT IN     Y02652
*        IELOPSW2.)                                              Y02652
         BNO   LVTIME2             BRANCH AROUND 'THEN' CLAUSE   Y02652
         MVC   LCTTMWRK+DEC4,HOURS24  INDICATE STEP IS NOT TO BE Y02652
*                                  TIMED                         Y02652
         MVI   LCTTMWRK+DEC8,HEX80 INDICATE TIME OF 24 HOURS IS  Y02652
*                                  FOR ENTIRE JOB                Y02652
LVTIME2  EQU   *                                                 Y02652
*
*        ASSIGN 'NO DATA SET INTEGRITY' (NDSI)                   Y02652
*
         TM    LCTINTSW,LCTNDSI                                  Y02652
         BZ    NONDSI              NDSI WAS NOT INDICATED        Y02652
         L     R10,LCTPARM3        SAVE PTR. TO GWT              Y02652
         MVC   LCTPARM1(GENLNGTH),GENERIC MOVE THE DEQ PARAMETER Y02652
*                                  LIST TO LCTPARM1-3            Y02652
*        (THE LIST CANNOT BE LEFT IN THE MODULE BECAUSE DEQ      Y02652
*        STORES A RETURN CODE INTO THE LIST AND THIS MODULE      Y02652
*        MUST BE READ-ONLY.)                                     Y02652
         DEQ   MF=(E,LCTPARM1)                                   Y02652
         ST    R10,LCTPARM3        RESTORE GWT PTR WHEN DEQ      Y02652
*                                  IS COMPLETE                   Y02652
         XR    R15,R15
         ST    R15,JCTDETDA        CLEAR THE POINTER TO THE     YM04256
*                                  DS ENQ TABLE                 YM04256
*        (IF THE POINTER IS NOT CLEARED HERE, PROBLEMS MIGHT    YM04256
*        OCCUR WHEN DYNAMIC ALLOCATION ATTEMPTED TO DEQ FROM    YM04256
*        A DATA SET TO CHANGE IT'S ATTRIBUTES FROM SHR TO       YM04256
*        EXCLUSIVE.) THIS WILL ALSO IMPROVE PERFORMANCE, BY     YM04256
*        ELIMINATING THE DEQ BY UNALLOCATION.                   YM04256
NONDSI   EQU   *                                                 Y02652
         L     R15,LCTJSCB                                     @ZA03944
         USING IEZJSCB,R15                                     @ZA03944
         TM    LCTINTS2,LCTBPPAS        WAS BYPASS PASSWORD    @ZA03944
*                                       PROTECTION SPECIFED?   @ZA03944
         BNO   NOPASS                   DON'T BYPASS PASSWORD  @ZA03944
*                                       PROTECTION             @ZA03944
         OI    JSCBSWT1,JSCBPASS        SET BYPASS PASSWORD    @ZA03944
         DROP  R15                                             @ZA03944
NOPASS   EQU   *                        PROTECTOIN IN JSCB     @ZA03944
*****************************************************************
*
*        ISSUE MESSAGE IEF188I IF INDICATED                      Y02656
*
*****************************************************************
         TM    LCTINTSW,LCTPPAA    SHOULD MESSAGE BE WRITTEN     Y02656
         BNO   NOMSG               NO, BRANCH AROUND 'THEN'      Y02656
*                                  CLAUSE                        Y02656
         L     R14,LCTIMSG         GET POINTER TO MESSAGE MODULE Y02656
*                                  (IEFIB650)                    Y02656
         LA    R15,MSG6(0,R14)     GET POINTER TO ENTRY FOR THIS Y02656
*                                  MESSAGE IN TABLE AT BEGINNING Y02656
*                                  OF IEFIB650                   Y02656
         AH    R14,X2(0,R15)       POINT TO MESSAGE              Y02656
         WTO   MF=(E,(R14))                                      Y02656
NOMSG    EQU   *                                                 Y02656
*****************************************************************
*
*        NORMAL EXIT
*
*****************************************************************
         LR    R1,R11                   POINT TO PARAMETER LIST
         L     R15,IEFV103         ADDRESS OF PRE-ATTACH RTN      20032
         BR    R15                 GO TO PRE-ATTACH ROUTINE       20032
***************************************************************@ZA07506
*                                                              @ZA07506
*        PROCESSING FOR UNSUCCESSFUL OPENING OF                @ZA07506
*        JOBLIBS - STEPLIBS AND FETCHLIBS                      @ZA07506
*                                                              @ZA07506
***************************************************************@ZA07506
OPENERR1 LA    R14,SDFETCH         POINT TO FETCHLIB FOR       @ZA07506
         B     PUTMSG              THE PUT MESSAGE ROUTINE     @ZA07506
         USING STEPL,R9                                        @ZA07506
OPENERR2 TM    STEFLAGS,STEJOBLB   IS IT JOBLIB OR STEPLIB     @ZA07506
         BZ    OPSTEPER            STEPLIB                     @ZA07506
         LA    R14,JOBCONS         POINT TO JOBLIB FOR THE     @ZA07506
         B     PUTMSG              PUT MESSAGE ROUTINE         @ZA07506
OPSTEPER LA    R14,STEPLIB         POINT TO STEPLIB FOR        @ZA07506
PUTMSG   NI    STEFLAGS,X'FF'-(STEFCHLB+STEJOBLB+STESTPLB)     @ZA07506
         DROP  R9                                              @ZA07506
         LA    R0,80                   SIZE OF GETMAIN         @ZA07506
         GETMAIN R,LV=(0)              GETMAIN FOR MESSAGE     @ZA07506
         LR    R9,R1                   SAVE CORE PTR FOR FREE  @ZA07506
         LR    R7,R0                   SAVE SIZE FOR FREEMAIN  @ZA07506
         L     R3,LCTIMSG              POINT TO MESSAGE MODULE @ZA07506
         AH    R3,MSGF+X2(0,R3)        POINT TO MESSAGE        @ZA07506
         LH    R4,0(0,R3)              GET LENGTH OF MESSAGE   @ZA07506
         LA    R4,3(0,R4)              ADD LENGTH OF DESCRIPTOR@ZA07506
         EX    R4,MESMOV               EXECUTE MOVE MESSAGE    @ZA07506
         MVC   32(8,R1),0(R14)         MOVE PROPER DD IDENT    @ZA07506
         USING PSA,0                   ADDRESSABILITY FOR THE PSA
         L     R14,PSATOLD             GET THE CURRENT TCB     @ZA07506
         USING TCB,R14                 ADDRESSABILITY TO TCB   @ZA07506
         L     R14,TCBTIO              GET THE TIOT FROM TCB   @ZA07506
         USING TIOT1,R14               ADDRESSABILITY TO TIOT  @ZA07506
         MVC   16(8,R1),TIOCNJOB       MOVE JOBNAME TO MESSAGE @ZA07506
         DROP R14                      DROP MACRO REG          @ZA07506
         WTO   MF=(E,(R1))             WRITE THE MESSAGE       @ZA07506
         LR    R0,R7                   RESTORE SIZE FOR FREE   @ZA07506
         LR    R1,R9                   RESTORE PTR FOR FREE    @ZA07506
         FREEMAIN R,LV=(0),A=(R1)      FREE THE CORE           @ZA07506
***********************************************************************
*                                                              @ZA07506
*        PROCESSING FOR UNSUCCESSFUL OPENING OF CATALOGS       @ZA07506
*        JOBLIBS - STEPLIBS AND FETCHLIBS                      @ZA07506
*                                                              @ZA07506
***********************************************************************
         L     R4,LCTTCBAD         RESTORE TCB REG BEFORE MOVE @ZA07506
         USING TCB,R4
OPENERR3 MVC   TCBTIO,PARTIOTB     RESTORE INITIATOR TIOT PTR. @ZA07506
         DROP  R4                                                Y02665
         XR    R1,R1                                             Y02665
         ST    R1,PARTIOTB         CLEAR SO THE INITIATOR        Y02665
*                                  RECOVERY ROUTINE WILL NOT     Y02665
*                                  ATTEMPT TO RESTORE THE PTR.   Y02665
*        FREE IEFPARAM AND THE ATTACH PARAMETER LIST (THEY WERE  Y02665
*        GOTTEN CONTIGUOUSLY WITH THE SAME GETMAIN.)             Y02665
         LA    R0,LISTSIZE         GET SIZE OF IEFPARAM AND      Y02665
*                                  ATTACH PARAMETER LIST         Y02665
         O     R0,SUBPOOL                                        Y02665
         FREEMAIN R,LV=(0),A=(11)                                Y02665
*                                                                Y02665
*        FREE STORAGE USED FOR USER PARMS                        Y02665
         LH    R14,SCTSEXEC        GET SIZE OF USER PARMS        Y02665
         LA    R0,HEADER(0,R14)    ADD SIZE OF HEADER            Y02665
         O     R0,SUBPOOL                                        Y02665
         L     R1,IEFUSADD         GET POINTER TO PARMS          Y02665
         XR    R15,R15                                           Y02665
         ST    R15,IEFUSADD        CLEAR PTR. TO PARMS           Y02665
         FREEMAIN R,LV=(0),A=(1)                                 Y02665
         L     R14,LCTENTR         ADDRESS OF IEL                Y02665
         USING IEZIEL,R14                                        Y02665
         L     R14,IELEXIT         ADDRESS OF EXIT LIST          Y02665
         USING IELEXITS,R14                                      Y02665
         CLI   IELRTNCD,IELRTGD    CHECK FOR PREVIOUS ERROR      Y02665
         BNE   BYPASS2             DO NOT DESTROY OLD CODE       Y02665
         MVI   IELRTNCD,IELRTALC   ALLOC ERROR RETURN CODE       Y02665
         MVI   IELRCXT,IELINIT     SET ORIGIN OF 'INITIATOR'     Y02665
         DROP  R14                                               Y02665
BYPASS2  EQU   *                                                 Y02665
         OI    LCTOPSW3,LCTALERR   INDICATE ALLOC. ERROR TO      Y02665
*                                  IEFSD164                      Y02665
         OI    LCTERR,LCTJFAIL     SET LCT JOB FAILED BIT        Y02665
         ST    R8,0(0,R2)          RESTORE LCT PTR IN PARMLIST @ZA07506
         SPACE 5
*****************************************************************
*
*        ERROR EXIT
*
*****************************************************************
EXIT164  EQU   *                                                 Y02665
         L     R1,LCTPARM3        LOAD ADDRESS OF GWT              I272
         LA    R1,0(0,R1)          CLEAR HIGH ORDER BYTE (TCB    Y02665
*                                  PRIORITY MAY HAVE BEEN SAVED  Y02665
*                                  THERE)                        Y02665
         LTR   R1,R1               CHECK WHETHER GWT EXISTS      Y01054
         BZ    NOGWT               DOES NOT EXIST, DON'T ATTEMPT Y01054
*                                  TO FREE IT                    Y01054
         L     R0,GETMAIN1         GET SUBPOOL AND SIZE          Y01054
         FREEMAIN  R,LV=(0),A=(1)      FREE ITS CORE               LS17
NOGWT    EQU   *                                                 Y01054
         L     R15,IEFSD64V        STEP DELETE RTN               S21474
         LR    R1,R2                    RESTORE PARAM LIST PTR.    CR17
         BR    R15                 GO TO IEFSD164                S21474
         EJECT
IEFMOVE1 MVC   8(0,R4),4(R5)       MOVE USER PARAMS FROM BUFFER   18428
CLEARCOR XC    X0(X0,R1),X0(R1)                                    I270
SETBITS  OI    JCTRSW2,X'00'       PUT C/R BITS IN JCT             CR17
MOVEDCB  MVC   0(0,R3),IEFDCBS          MOVE DCB TO GOTTN CORE
MESMOV   MVC   0(0,R1),0(R3)       MOVE FOR EXECUTE IEF689     @ZA07506
NOAFFIN  DC    X'FFFF'             TO TURN OFF CPU-TASK AFFINITY Y02651
         SPACE
IEFRDER  DC    CL8'IEFRDER'                                        I272
JOBCONS  DC    CL8' JOBLIB '            DDNAME FOR MESSAGE 689 @ZA07506
STEPLIB  DC    CL8'STEPLIB '            DDNAME FOR DCB             OC42
SDFETCH  DC    CL8'PGM=*.DD'       DDNAME FOR FETCHLIB         @ZA05831
SYSDSN   DC    CL8'SYSDSN'                                       Y02652
ACSTARTG DC    C'STARTING'                                         I272
BLANKFW  DC    C'    '
WL       DC    C'WL'               CODE FOR SWA MANAGER WRITE   YM01566
*                                  LOCATE MODE                  YM01566
         SPACE
CF0      DC    F'0'                     WORD OF ZEROES FOR COMPARES
HOURS24  DC    F'8640000'              1440 MIN IM HUNDREDTH OF SEC.
GETMAIN1 DS    0F                  TO FREE GWT                   Y01054
         DC    AL1(TCORE)          SUBPOOL                       Y01054
         DC    AL3(GPSIZE)         SIZE                          Y01054
SUBPOOL  DS    0F                                                Y02665
         DC    AL1(TCORE)                                        Y02665
         DC    AL3(0)                                            Y02665
ABENCODE DC    X'000000BA'         SSI ABEND CODE              @Y02BPSR
         SPACE
IEFQMGRV DC    V(IEFQMRAW)
IEFV103  DC    V(IEFSD103)         ADDRESS OF PRE-ATTACH RTN      20032
IEFSD64V DC    V(IEFSD064)         ADDR OF STEP DELETE RTN       S21474
VCON604  DC    V(IEFXB604)                                       Y02641
VCON500  DC    V(IEFXB500)         JOURNAL WRITE ROUTINE         Y02652
VCONCATL DC    V(IEFICATL)                                       Y02665
         SPACE
GENERIC  DEQ   (SYSDSN,,,SYSTEM),RET=HAVE,GENERIC=YES,MF=L       Y02652
GENLNGTH EQU   *-GENERIC                                         Y02652
         SPACE
PATCH    DC    25F'0'              PATCH AREA                    Y02652
         EJECT
TCORE    EQU   253
N0       EQU   0                                                    O99
N1       EQU   1                                                    O99
N4       EQU   4                                                    O99
N72      EQU   72                                                   O99
JOBLIB   EQU   X'80'
X0       EQU   0                                                   I272
X1       EQU   1                                                   I272
X3       EQU   3                                                   I272
X4       EQU   4                                                   I272
X7       EQU   7                                                   I272
X8       EQU   8                   DISPLACEMENT                    I272
X24      EQU   24                                                  I272
X96      EQU   96                                                  I272
X184     EQU   184                                                 I272
X255     EQU   255                 USED IN MASK                    I272
X256     EQU   256                                                 I272
BLANK    EQU   C' '                                                I272
NOSIOTS  EQU   X'00'                                               I272
ONEREC   EQU   X'01'                                               I272
READCODE EQU   X'04'                                               I272
RTNCODE4 EQU   X'04'                                               I272
SPROGRAM EQU   X'04'              VERB CODE FOR STARTED PROGRAM    I272
MOUNTCMD EQU   X'0C'              VERB CODE FOR MOUNT COMMAND    Y02652
NO       EQU   0                                                   M069
KEYVIRT  EQU   X'80'                                             Y02656
KEYSCHED EQU   X'10'               STORAGE KEY 1               @Y02BPSR
X2       EQU   2                                                 Y02656
MSG6     EQU   20                  DISPLACEMENT OF INDEX TO MSG. Y02656
MSGF     EQU   56                                              @ZA07506
*                                  IEF188I                       Y02656
HEX00    EQU   X'00'                   HEX EQUATE
DEC8     EQU   8                       NUMERIC EQUATE
DEC4     EQU   4                       NUMERIC EQUATE
DEC0     EQU   0                       NUMERIC EQUATE
HEX80    EQU   X'80'                   HEX EQUATE
LRBA     EQU   3                   LENGTH OF AN RBA              Y02670
STEPSTRT EQU   X'80'                                             Y02652
HEADER   EQU   8                   LENGTH OF HEADER OF USER PARM Y02665
*                                  LIST (CONTAINS POINTER TO     Y02665
*                                  PARMS AND LENGTH)             Y02665
SWLGTH   EQU   176                 LENGTH OF JCT OR SCT         YM01566
         EJECT
IEFDCBS  DS    0F
         DCB DSORG=PO,MACRF=E
         EJECT
IEFDCBN  EQU   *
         DCBD  DSORG=(PO,XE)
         EJECT
SMPARMS  DSECT                     USED TO INVOKE SWA MANAGER   YM01566
*                                  LOCATE MODE                  YM01566
SMPARM1  DS    F                   PTR. TO EPAPTR               YM01566
SMPARM2  DS    F                   PTR. TO CODE                 YM01566
SMEPAPTR DS    F                   PTR. TO EPA                  YM01566
SMCODE   DS    CL2                 CODE FOR LOCATE MODE         YM01566
SMEPA1   DS    4F                  FIRST EPA                    YM01566
SMEPA2   DS    4F                  SECOND EPA                   YM01566
SMEND    EQU   *                                                YM01566
         SPACE 4
         IEFZB507
         SPACE 4
         IEFZB505
         SPACE 4
         IEFZB630
         SPACE 4
IEFLOT   DSECT
         IEFALLCT
         SPACE 4
         IEFZB600                                                Y01054
         SPACE 4
         IEFZB622
         SPACE 4
         IEZATTCH                                                  I270
LISTSIZE EQU   IEFPSIZE+ATLSTSIZ                                   I270
         SPACE 4
IEFJCT   DSECT
         IEFAJCTB
JCTDETDA EQU   IEFJCT+88           SVA OF DSENQ DABLE           YM04256
*        (INCLUDED IN THE MACRO AS A COMMENT ONLY)              YM04256
         SPACE
CRMASK   EQU   JCTNORST+JCTNOCKP+JCTRESTT  MASK OF BITS TO BE    Y02641
*                                  PROPOGATED FROM THE SCT TO    Y02641
*                                  THE JCT FOR                   Y02641
*                                  CHECKPOINT/RESTART            Y02641
         SPACE 4
IEFSCT   DSECT
         IEFASCTB
SCTSTEND EQU   INSMSCT+172         THIS FIELD IS IN THE SCT AS   Y02652
*                                  A COMMENT                     Y02652
         SPACE 4
IEFTIOT  DSECT
         IEFTIOT1
         SPACE 4
UCB      DSECT                                                     I272
         IEFUCBOB                                                  I272
         SPACE 4
SIOT     DSECT                                                     I272
         IEFASIOT                                                  I272
         SPACE 4
         IHAASCB
         SPACE 4
IEFCSCB  DSECT
         IEECHAIN
         SPACE 4
         IEFQMNGR
         SPACE 4
         IKJTCB                                                   20029
         SPACE 4
         IEZJSCB                                                   I272
         SPACE 4
IEZIEL   DSECT                                                    20032
         IEZIEL    EXITS=RTN
         SPACE 4
         IEZDEB
         SPACE 4
         CVT   DSECT=YES
         SPACE 4
         IEFJESCT
         SPACE 4
         IEFJSSOB SI,CONTIG=NO                                 @Y02BPSR
         SPACE 4
         IHAPSA                     FOR PSATOLD DEFINITION     @ZA07506
         SPACE 4
         IHASUBIT                                              @ZA16879
         END
