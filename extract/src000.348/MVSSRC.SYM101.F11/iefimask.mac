         TITLE 'IEFIMASK, CONVERT BIT MASK                           '
IEFIMASK CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IEFIMASK  73.143'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         LM    @00,@01,20(@13)                                     0001
         MVC   @PC00001(16),0(@01)                                 0001
*   BITSLOCL=BITS;                  /* COPY SO THE ORIGINAL VERSION
*                                      WILL BE PRESERVED             */
         L     @10,@PC00001                                        0011
         MVC   BITSLOCL(2),BITS(@10)                               0011
*   LISTPOS=0;                                                     0012
         SR    LISTPOS,LISTPOS                                     0012
*   DO BITPOS=1 TO NUMBITS;         /* BITPOS REPRESENTS THE ORIGINAL
*                                      POSITION OF THE BIT NOW AT  0013
*                                      BITONE                        */
         LA    BITPOS,1                                            0013
         B     @DE00013                                            0013
@DL00013 DS    0H                                                  0014
*     IF BITONE='1'B THEN                                          0014
         TM    BITONE,B'10000000'                                  0014
         BNO   @RF00014                                            0014
*       DO;                         /* IF BIT IS ON SET ITS INDEX IN
*                                      THE LIST                      */
*                                                                  0015
*         /***********************************************************/
*         /*                                                         */
*         /* SOME SPECIAL PROCESSING IS REQUIRED TO ACCOUNT FOR THE  */
*         /* FACT THAT THE NUMBER OF COMMAS IS ONE LESS THAN THE     */
*         /* NUMBER OF ELEMENTS IN THE LIST. THIS MODULE HAS SPECIAL */
*         /* PROCESSING FOR THE SETTING OF THE FIRST ELEMENT OF THE  */
*         /* LIST. OTHER SOLUTIONS WERE REJECTED FOR ONE OF THE      */
*         /* FOLLOWING REASONS: (1) ONE OR MORE EXTRA COMMAS WOULD BE*/
*         /* SET AFTER THE LAST ELEMENT IF NOT ALL THE BITS ARE ON.  */
*         /* (2) AN EXTRA LOOP WOULD BE REQUIRED TO COUNT THE NUMBER */
*         /* OF COMMAS REQUIRED OR TO SET THE COMMAS SEPARATELY.     */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0016
*         IF LISTPOS=0 THEN                                        0016
         LTR   LISTPOS,LISTPOS                                     0016
         BNZ   @RF00016                                            0016
*           CPUZERO=CONVCHAR(BITPOS);/* SET FIRST ELEMENT IN LIST    */
         L     @10,@PC00001+8                                      0017
         LA    @01,CONVCHAR-1(BITPOS)                              0017
         MVC   CPUZERO(1,@10),0(@01)                               0017
*         ELSE                                                     0018
*           DO;                     /* SET ELEMENT WHICH IS NOT FIRST
*                                      ELEMENT IN LIST (PRECEEDED BY
*                                      A COMMA)                      */
         B     @RC00016                                            0018
@RF00016 DS    0H                                                  0019
*             COMMA(LISTPOS)=COMMAC;                               0019
         LR    @10,LISTPOS                                         0019
         AR    @10,@10                                             0019
         L     @15,@PC00001+8                                      0019
         ST    @10,@TF00001                                        0019
         ALR   @10,@15                                             0019
         AL    @10,@CF00063                                        0019
         MVI   COMMA-1(@10),C','                                   0019
*             ELEMENT(LISTPOS)=CONVCHAR(BITPOS);                   0020
         AL    @15,@TF00001                                        0020
         LA    @10,CONVCHAR-1(BITPOS)                              0020
         MVC   ELEMENT-2(1,@15),0(@10)                             0020
*           END;                                                   0021
*         LISTPOS=LISTPOS+1;        /* INCREMENT INDEX IN OUTPUT   0022
*                                      LIST, AFTER SETTING AN ELEMENT*/
@RC00016 AH    LISTPOS,@CH00043                                    0022
*       END;                                                       0023
*     BITSLOCL=2*BITSLOCL;          /* SHIFT LEFT ONE POSITION, SO WE
*                                      CAN CHECK THE HIGH ORDER BIT  */
@RF00014 SR    @10,@10                                             0024
         ICM   @10,3,BITSLOCL                                      0024
         AR    @10,@10                                             0024
         STH   @10,BITSLOCL                                        0024
*   END;                                                           0025
         AH    BITPOS,@CH00043                                     0025
@DE00013 L     @10,@PC00001+4                                      0025
         CH    BITPOS,NUMBITS(,@10)                                0025
         BNH   @DL00013                                            0025
*   NUMLIST=LISTPOS;                /* RETURN NUMBER OF ELEMENTS PUT
*                                      IN LIST. (THIS IS ONE GREATER
*                                      THAN THE LAST INDEX USED    0026
*                                      BECAUSE THE COUNT MUST START
*                                      AT 1 INSTEAD OF 0.)           */
         L     @10,@PC00001+12                                     0026
         STH   LISTPOS,NUMLIST(,@10)                               0026
*   END;                                                           0027
@EL00001 DS    0H                                                  0027
@EF00001 L     @00,@SIZDATD                                        0027
         LR    @01,@11                                             0027
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0027
         BR    @14                                                 0027
@DATA    DS    0H
@CH00043 DC    H'1'
@DATD    DSECT
         DS    0F
@PC00001 DS    4F
@TF00001 DS    F
IEFIMASK CSECT
         DS    0F
@CF00063 DC    F'-1'
@DATD    DSECT
         DS    0D
BITSLOCL DS    CL2
         ORG   BITSLOCL
BITONE   DS    BL1
@NM00002 EQU   BITSLOCL+0
         ORG   BITSLOCL+2
IEFIMASK CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
CONVCHAR DC    CL16'0123456789ABCDEF'
IEFIMASK CSECT
         DS   0H
PATCHLOC DC (25)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEFIMASK CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
LISTPOS  EQU   @02
BITPOS   EQU   @03
BITS     EQU   0
NUMBITS  EQU   0
LIST     EQU   0
CPUZERO  EQU   LIST
@NM00001 EQU   LIST+1
COMMA    EQU   @NM00001
ELEMENT  EQU   @NM00001+1
NUMLIST  EQU   0
@ENDDATA EQU   *
         END   IEFIMASK
