         TITLE 'IEFSD161-JOB SELECTION                                 *
                        '
IEFSD061 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(24)                                             0001
         DC    C'IEFSD061 77270  UZ14651 '                         0001
         DROP  @15
@PROLOG  BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         LR    @03,@01                                             0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         LR    @01,@03                                             0001
         MVC   @PC00001(4),0(@01)                                  0001
JSCBDISP EQU 188
JSCBAOS1 EQU  72
JSCBAOS2 EQU 192
*                                      THE FIRST SCT OF JOB FOR USE
*                                      BY SRM                @Z40BPPJ*/
*   LOOPSWCH=ON;                    /* INITIALIZE LOOP SWITCH TO NON
*                                      ZERO                          */
         MVC   LOOPSWCH(4),ON                                      0134
*   RESPECIFY                                                      0135
*     R1 RSTD;                                                     0135
*   LCTPTR=R1;                      /* ADDRESSABILITY FOR THE LCT    */
         LR    LCTPTR,R1                                           0136
*   SAVEREGS=ADDR(REGSAVE);         /* SET UP REG SAVE AREA          */
         LA    SAVEREGS,REGSAVE(,LCTPTR)                           0137
*JOBSELCT:                                                         0138
*   RESPECIFY                                                      0138
*     R1 UNRSTD;                                                   0138
*                                                                  0138
JOBSELCT DS    0H                                                  0139
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING SECTION OF CODE CHECKS THE INTERNAL STOP        */
*   /* INDICATOR TO DETERMINE IF ITS BEING ENTERED FOR STOP          */
*   /* PROCESSING. IF IT IS BEING ENTERED FOR STOP PROCESSING,IT     */
*   /* FREES THE SSOB HEADER AND THE SSIB. IF A STAE EXIT PARAMETER  */
*   /* LIST EXISTS IT FREES THAT ALSO, THEN IT FREES THE LCT AND     */
*   /* TAKES THE EXIT                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0139
*   DO WHILE LOOPSWCH=ON;           /* DO UNTIL A JOB IS SELECTED OR
*                                      THE EXIT IS TAKEN             */
         B     @DE00139                                            0139
@DL00139 DS    0H                                                  0140
*     IF LCTSTOP='1'B THEN                                         0140
         TM    LCTSTOP(LCTPTR),B'00000100'                         0140
         BNO   @RF00140                                            0140
*       DO;                         /* IF BEING ENTERED FOR INTERNAL
*                                      STOP PROCESSING, FREE THE   0141
*                                      SSOB,SSIB STEPL IF ONE      0141
*                                      EXISTS,CANCEL STAE AND TAKE 0141
*                                      EXIT                          */
*         RESPECIFY                                                0142
*          (R0,                                                    0142
*           COREPTR) RSTD;                                         0142
*         IF LCTONEJF='0'B THEN                                    0143
         TM    LCTONEJF(LCTPTR),B'00000100'                        0143
         BNZ   @RF00143                                            0143
*           DO;                     /* IF THIS IS AN INITIATOR, FREE
*                                      THE SSOB AND SSIB             */
*             R0=LENGTH(SSIB);      /* GET THE LENGTH OF THE SSIB    */
         LA    R0,36                                               0145
*             R0=R0×COREPOOL;       /* PUT IN THE SUBPOOL NUMBER     */
         O     R0,COREPOOL                                         0146
*             COREPTR=SSOBSSIB;     /* PUT THE SSIB PTR IN REG 1     */
         L     @10,LCTSSOBA(,LCTPTR)                               0147
         L     COREPTR,SSOBSSIB(,@10)                              0147
*             GEN(FREEMAIN R,LV=(0),A=(1));/* FREE THE SSIB          */
         FREEMAIN R,LV=(0),A=(1)
*             R0=LENGTH(SSOB);      /* GET THE LENGTH OF THE SSOB    */
         LA    R0,20                                               0149
*             R0=R0×COREPOOL;       /* PUT IN THE SUBPOOL NUMBER     */
         O     R0,COREPOOL                                         0150
*             COREPTR=LCTSSOBA;     /* GET THE SSOB PTR              */
         L     COREPTR,LCTSSOBA(,LCTPTR)                           0151
*             GEN(FREEMAIN  R,LV=(0),A=(1));/* FREE THE SSOB         */
         FREEMAIN  R,LV=(0),A=(1)
*           END;                                                   0153
*         IF LCTSTEPL^=0 THEN                                      0154
@RF00143 ICM   @10,15,LCTSTEPL(LCTPTR)                             0154
         BZ    @RF00154                                            0154
*           DO;                     /* IF THERE EXISTS A STAE EXIT 0155
*                                      PARAMETER LIST, FREE IT       */
*             GEN(ESTAE 0);         /* CANCEL ESTAE                  */
         ESTAE 0
*             R0=LENGTH(STEPL);     /* GET LENGTH OF STEPL           */
         LA    R0,16                                               0157
*             R0=R0×COREPOOL;       /* PUT IN THE SUBPOOL NO.        */
         O     R0,COREPOOL                                         0158
*             COREPTR=LCTSTEPL;     /* PUT STEPL ADDR IN REG 1       */
         L     COREPTR,LCTSTEPL(,LCTPTR)                           0159
*             GEN(FREEMAIN R,LV=(0),A=(1));/* FREE THE STEPL         */
         FREEMAIN R,LV=(0),A=(1)
*           END;                                                   0161
*         RESPECIFY                                                0162
*          (IELPTR,                                                0162
*           RTNREG) RSTD;                                          0162
@RF00154 DS    0H                                                  0163
*         IELPTR=LCTENTR;           /* SAVE ADDR OF THE IEL          */
         L     IELPTR,LCTENTR(,LCTPTR)                             0163
*         RTNREG=LCTRTRN;           /* SAVE THE RETURN ADDRESS       */
         L     RTNREG,LCTRTRN(,LCTPTR)                             0164
*         SUBPNO=JSCBSWSP;          /* SUBPOOL FOR THE LCT           */
         L     @15,LCTTCBAD(,LCTPTR)                               0165
         L     @15,TCBJSCB(,@15)                                   0165
         MVC   SUBPNO(1),JSCBSWSP(@15)                             0165
*         CORELNG=LENGTH(LCT);      /* GET THE LENGTH OF THE LCT     */
*                                                                  0166
         MVC   CORELNG(3),@CF02695+1                               0166
*         /***********************************************************/
*         /*                                                         */
*         /* THE MODESET IS ISSUED FOR THE FREEMAIN OF THE LCT SINCE */
*         /* IT WAS GOTTEN IN KEY 1                                  */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0167
*         GEN(MODESET EXTKEY=SCHED);/* GET PSW KEY 1          YM02391*/
         MODESET EXTKEY=SCHED
*         R0=SUBPOOOL;              /* PUT SUBPOOL # AND CORE LENGTH
*                                      IN R0                         */
         L     R0,SUBPOOOL                                         0168
*         COREPTR=LCTPTR;           /* PUT THE LCT ADDR IN REG 1     */
         LR    COREPTR,LCTPTR                                      0169
*         GEN(FREEMAIN R,LV=(0),A=(1));/* FREE THE LCT               */
         FREEMAIN R,LV=(0),A=(1)
*         COREPTR=IELPTR;           /* SAVE IEL PTR IN REG 1         */
         LR    COREPTR,IELPTR                                      0171
*         GEN(MODESET EXTKEY=SUPR); /* GET PSW KEY 0          YM02391*/
*                                                                  0172
         MODESET EXTKEY=SUPR
*         /***********************************************************/
*         /*                                                         */
*         /* THE FOLLOWING SECTION OF CODE IS A GENERALIZED          */
*         /* SUBROUTINE TO HANDLE ALL POST TERMINATION INITIATOR     */
*         /* EXITS NOTE- END OF TASK FREES THE CORE GOTTEN FOR DATA  */
*         /* AREAS UPON ENTRY TO THIS MODULE                         */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0173
*         IF IELEXIT>0 THEN                                        0173
         L     @15,IELEXIT(,IELPTR)                                0173
         LTR   @15,@15                                             0173
         BNP   @RF00173                                            0173
*           DO;                     /* IF AN EXIT LIST EXISTS      0174
*                                      DETERMINE WHICH TYPE OF EXIT
*                                      TO TAKE                       */
*             RESPECIFY                                            0175
*               EXITPTR RSTD;                                      0175
*             EXITSAVE=IELEXIT+IELXTLEN-8;/* GET ADDR OF FIRST ENTRY
*                                      -8                            */
         LH    EXITSAVE,IELXTLEN(,@15)                             0176
         ALR   EXITSAVE,@15                                        0176
         SH    EXITSAVE,@CH00062                                   0176
*             EXITPTR=IELEXIT;      /* GET ADDR OF EXIT LIST         */
         LR    EXITPTR,@15                                         0177
*             RESPECIFY                                            0178
*               IELEXITS BASED(EXITPTR);                           0178
*             DO WHILE EXITPTR<EXITSAVE;/* DETERMINE IF A POST     0179
*                                      TERMINATION EXIT EXISTS       */
         B     @DE00179                                            0179
@DL00179 DS    0H                                                  0180
*               IF RTNEXID='80'X THEN                              0180
         CLI   RTNEXID(EXITPTR),X'80'                              0180
         BNE   @RF00180                                            0180
*                 DO;               /* IF THIS IS THE POST TERM-   0181
*                                      INATION EXIT THEN PROCESS IT  */
*                   RESPECIFY                                      0182
*                     R15 RSTD;                                    0182
*                   IF RTNEXLK^='40'X THEN                         0183
         CLI   RTNEXLK(EXITPTR),X'40'                              0183
         BE    @RF00183                                            0183
*                     DO;           /* IF THIS IS NOT A BRANCH EXIT,
*                                      BUILD A SUPV LIST             */
*                       RESPECIFY                                  0185
*                         PARMPTR RSTD;                            0185
*                       R0=16;      /* LGTH OF REMOTE & SUPV LIST    */
         LA    R0,16                                               0186
*                       GEN(GETMAIN R,LV=(0));/* GET CORE FOR REMOTE
*                                      & SUPV LIST                   */
         GETMAIN R,LV=(0)
*                       PARMPTR=COREPTR;/* SAVE THE CORE ADDR        */
         LR    PARMPTR,COREPTR                                     0188
*                       SUPVLIST=''B;/* ZERO THE LIST                */
         XC    SUPVLIST(16,PARMPTR),SUPVLIST(PARMPTR)              0189
*                       RLISTPTR=ADDR(EXITNAME);/* REMOTE LIST ADDR  */
         LA    @10,EXITNAME(,PARMPTR)                              0190
         ST    @10,RLISTPTR(,PARMPTR)                              0190
*                       EXITNAME=RTNEXNM;/* PUT EXIT NAME IN THE LIST*/
         MVC   EXITNAME(6,PARMPTR),RTNEXNM(EXITPTR)                0191
*                       PADBLANK=BLANKS;/* PAD THE NAME WITH BLANKS  */
         MVC   PADBLANK(2,PARMPTR),BLANKS                          0192
*                       COREPTR=IELPTR;/* PUT ADDR OF PARMLIST IN R1 */
         LR    COREPTR,IELPTR                                      0193
*                       R15=PARMPTR;/* ADDR OF SUPV LIST             */
         LR    R15,PARMPTR                                         0194
*                       IF RTNEXLK='C0'X THEN                      0195
         CLI   RTNEXLK(EXITPTR),X'C0'                              0195
         BNE   @RF00195                                            0195
*                         DO;       /* IF THIS IS AN XCTL EXIT THEN
*                                      XCTL                          */
*                           GEN(XCTL  ,MF=(E,(1)),SF=(E,(15)));/* GO
*                                      TO THE EXIT RTN               */
         XCTL  ,MF=(E,(1)),SF=(E,(15))
*                         END;                                     0198
*                       RESPECIFY                                  0199
*                         RTNSAVE RSTD;                            0199
@RF00195 DS    0H                                                  0200
*                       RTNSAVE=RTNREG;/* SAVE THE RETURN ADDR       */
         LR    RTNSAVE,RTNREG                                      0200
*                       GEN(LINK  ,MF=(E,(1)),SF=(E,(15)));/* LINK TO
*                                      EXIT RTN                      */
         LINK  ,MF=(E,(1)),SF=(E,(15))
*                       R0=16;      /* LGTH OF REMOTE & SUPV LIST    */
         LA    R0,16                                               0202
*                       COREPTR=PARMPTR;/* PUT LIST ADDR IN REG 1    */
         LR    COREPTR,PARMPTR                                     0203
*                       GEN(FREEMAIN R,LV=(0),A=(1));/* FREE THE LIST*/
         FREEMAIN R,LV=(0),A=(1)
*                       COREPTR=IELPTR;/* GET ADDR OF IEL            */
         LR    COREPTR,IELPTR                                      0205
*                       RTNREG=RTNSAVE;/* GET RETURN ADDR            */
         LR    RTNREG,RTNSAVE                                      0206
*                       R15=0;      /* CLEAR RETURN CODE      YM01620*/
         SLR   R15,R15                                             0207
*                       GEN(BR R14);/* RETURN TO THE CALLER   YM01620*/
         BR R14
*                       RESPECIFY                                  0209
*                        (RTNSAVE,                                 0209
*                         PARMPTR) UNRSTD;                         0209
*                     END;                                         0210
*                   R15=RTNEXAD;    /* ADDR OF BRANCH EXIT RTN       */
@RF00183 L     R15,RTNEXAD(,EXITPTR)                               0211
*                   GEN(BR R15);    /* TAKE THE EXIT          YM01620*/
         BR R15
*                   RESPECIFY                                      0213
*                     R15 UNRSTD;                                  0213
*                 END;                                             0214
*               EXITPTR=EXITPTR+8;  /* ADDR OF NEXT ENTRY            */
@RF00180 AH    EXITPTR,@CH00062                                    0215
*             END;                                                 0216
@DE00179 CR    EXITPTR,EXITSAVE                                    0216
         BL    @DL00179                                            0216
*           END;                                                   0217
*         RFY                                                      0218
*           R15 RSTD;               /*                        YM01620*/
@RF00173 DS    0H                                                  0219
*         R15=0;                    /* CLEAR RETURN CODE      YM01620*/
         SLR   R15,R15                                             0219
*         GEN(BR R14);              /* RETURN TO THE CALLER   YM01620*/
         BR R14
*         RESPECIFY                                                0221
*          (R0,                                                    0221
*           COREPTR,                                               0221
*           EXITPTR,                                               0221
*           R15) UNRSTD;            /*                        YM01620*/
*       END;                                                       0222
*     RESPECIFY                                                    0223
*      (IELPTR,                                                    0223
*       RTNREG) UNRSTD;                                            0223
*                                                                  0223
@RF00140 DS    0H                                                  0224
*     /***************************************************************/
*     /*                                                             */
*     /* IF AN SSOB HEADER DOES NOT ALREADY EXIST GET CORE FOR ONE.  */
*     /* WHETHER ONE HAS TO BE GOTTEN OR NOT, GET CORE FOR AN SSOB   */
*     /* JOB SELECTION FUNCTIONAL SECTION AND ISSUE IEFSSREQ TO HAVE */
*     /* A JOB SELECTED.                                             */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0224
*     RESPECIFY                                                    0224
*       IEL BASED(LCTENTR);                                        0224
*     RESPECIFY                                                    0225
*       IELEXITS BASED(IELEXIT);                                   0225
*     IF LCTSSOBA=0 THEN                                           0226
         ICM   @10,15,LCTSSOBA(LCTPTR)                             0226
         BNZ   @RF00226                                            0226
*       DO;                         /* IF A SSOB HEADER DOES NOT   0227
*                                      ALREADY EXIST, GET CORE FOR 0227
*                                      ONE                           */
*         RESPECIFY                                                0228
*          (R0,                                                    0228
*           COREPTR) RSTD;                                         0228
*         R0=LENGTH(SSOB);          /* GET THE LENGTH OF THE HEADER  */
         LA    R0,20                                               0229
*         R0=R0×COREPOOL;           /* PUT IN THE SUBPOOL NO.        */
         O     R0,COREPOOL                                         0230
*         GEN(GETMAIN R,LV=(0));    /* GET CORE FOR THE SSOB HEADER  */
         GETMAIN R,LV=(0)
*         LCTSSOBA=COREPTR;         /* SAVE THE ADDR IN THE LCT      */
         ST    COREPTR,LCTSSOBA(,LCTPTR)                           0232
*         SSOB=''B;                 /* ZERO THE HEADER               */
         L     @10,LCTSSOBA(,LCTPTR)                               0233
         XC    SSOB(20,@10),SSOB(@10)                              0233
*         SSOBID=SSOBIDD;           /* SET THE SSOB ID               */
         MVC   SSOBID(4,@10),SSOBIDD                               0234
*         SSOBLEN=LENGTH(SSOB);     /* GET LENGTH OF SSOB            */
         MVC   SSOBLEN(2,@10),@CH01845                             0235
*       END;                                                       0236
*     R0=LENGTH(SSJS);              /* GET LENGTH OF JOB SELECTION 0237
*                                      SSOB FUNCTIONAL SECTION       */
@RF00226 LA    R0,58                                               0237
*     R0=R0×COREPOOL;               /* PUT IN THE SUBPOOL # (255)    */
         O     R0,COREPOOL                                         0238
*     GEN(GETMAIN R,LV=(0));        /* GET CORE FOR THE FUNCTIONAL 0239
*                                                             SECTION*/
         GETMAIN R,LV=(0)
*     SSOBINDV=COREPTR;             /* PUT FUNCTIONAL ADDR IN THE  0240
*                                      HEADER                        */
         L     @10,LCTSSOBA(,LCTPTR)                               0240
         ST    COREPTR,SSOBINDV(,@10)                              0240
*     SSJS=''B;                     /* INITIALIZE FUNCTIONAL TO ZERO */
         L     @03,LCTSSOBA(,LCTPTR)                               0241
         L     @03,SSOBINDV(,@03)                                  0241
         XC    SSJS(58,@03),SSJS(@03)                              0241
*     SSJSLEN=LENGTH(SSJS);         /* SET LENGTH IN FUNCTIONAL    0242
*                                      SECTION               @VS41390*/
         MVC   SSJSLEN(2,@03),@CH02696                             0242
*     RESPECIFY                                                    0243
*      (R0,                                                        0243
*       COREPTR) UNRSTD;                                           0243
*     SSOBFUNC=SSOBJBSL;            /* SET JOB SELECTION INDICATOR   */
         MVC   SSOBFUNC(2,@10),@CH01142                            0244
*     SSJSLCT=LCTPTR;               /* PUT THE LCT PTR IN THE SSOB   */
         ST    LCTPTR,SSJSLCT(,@03)                                0245
*     SSOBPNTR=LCTSSOBA;            /* PUT THE ADDR OF THE SSOB IN 0246
*                                      THE PARM                      */
         ST    @10,SSOBPNTR                                        0246
*     TCBPKF=TCBPKF&'0F'X;          /* ZERO CURRENT TCB KEY          */
         L     @10,LCTTCBAD(,LCTPTR)                               0247
         NI    TCBPKF(@10),X'0F'                                   0247
*     TCBPKF=TCBPKF×'10'X;          /* SET CURRENT TCB KEY TO 1      */
         OI    TCBPKF(@10),X'10'                                   0248
*     ENDLIST='1'B;                 /* SET END OF LIST INDICATOR     */
         OI    ENDLIST,B'10000000'                                 0249
*     LCTSTOP='1'B;                 /* SET THE INTERNAL STOP       0250
*                                      INDICATOR                     */
         OI    LCTSTOP(LCTPTR),B'00000100'                         0250
*     RESPECIFY                                                    0251
*       R1 RSTD;                                                   0251
*     R1=ADDR(PARMLST);             /* PUT THE ADDR OF THE PARAMETER
*                                      LIST IN REG 1                 */
         LA    R1,PARMLST                                          0252
*     CALL SSREQ;                   /* GO TO SELECT A JOB            */
*                                                                  0253
         L     @10,CVTPTR                                          0253
         L     @10,CVTJESCT(,@10)                                  0253
         L     @15,JESSSREQ(,@10)                                  0253
         BALR  @14,@15                                             0253
*     /***************************************************************/
*     /*                                                             */
*     /* ON RETURN FROM IEFSSREQ, REGISTER 15 CONTAINS A NONZERO     */
*     /* RETURN CODE IF THE SUBSYSTEM INTERFACE ENCOUNTERED AN ERROR */
*     /* OR ZERO IF JOB SELECTION WAS INVOKED. SSOBRETN CONTAINS A   */
*     /* NON ZERO IF THE SUBSYSTEM WANTS THE INITIATOR TO STOP OR IF */
*     /* AN ERROR WAS ENCOUNTERED. IF SSOBRETN AND REG 15 ARE BOTH   */
*     /* ZERO, A JOB HAS BEEN SELECTED.                              */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0254
*     RESPECIFY                                                    0254
*       R1 UNRSTD;                                                 0254
*     RESPECIFY                                                    0255
*      (CODEREGG) RSTD;                                            0255
*     CODESAVE=CODEREGG;                                           0256
         ST    CODEREGG,CODESAVE                                   0256
*     SSCDSAVE=SSJSSERR;            /* SAVE THE SYSTEM ERROR CODE    */
         L     @14,LCTSSOBA(,LCTPTR)                               0257
         L     @14,SSOBINDV(,@14)                                  0257
         L     SSCDSAVE,SSJSSERR(,@14)                             0257
*     RESPECIFY                                                    0258
*      (R0,                                                        0258
*       COREPTR) RSTD;                                             0258
*     R0=LENGTH(SSJS);              /* GET THE LGTH OF THE SSOB    0259
*                                      FUNCTIONAL                    */
         LA    R0,58                                               0259
*     R0=R0×COREPOOL;               /* PUT IN THE SUBPOOL #          */
         O     R0,COREPOOL                                         0260
*     COREPTR=SSOBINDV;             /* GET THE ADDR OF THE SSOB    0261
*                                      FUNCTIONAL SECTION            */
         LR    COREPTR,@14                                         0261
*     GEN(FREEMAIN R,LV=(0),A=(1)); /* FREE THE SSOB JOB SELECTION 0262
*                                      FUNCTI ONAL SECTION           */
         FREEMAIN R,LV=(0),A=(1)
*     RESPECIFY                                                    0263
*      (R0,                                                        0263
*       COREPTR) UNRSTD;                                           0263
*     SSOBINDV=0;                   /* CLEAR THE FUNCTION PTR IN THE
*                                      SSOB HEADER                   */
         SLR   @14,@14                                             0264
         L     @10,LCTSSOBA(,LCTPTR)                               0264
         ST    @14,SSOBINDV(,@10)                                  0264
*     IF(SSOBRETN=0)&(CODESAVE=0) THEN                             0265
         C     @14,SSOBRETN(,@10)                                  0265
         BNE   @RF00265                                            0265
         C     @14,CODESAVE                                        0265
         BNE   @RF00265                                            0265
*       DO;                         /* IF THE SUBSYSTEM INTERF ACE 0266
*                                      SENT BACK A RETURN CODE OF  0266
*                                      ZERO AND THE SUBSYSTEM DID NOT
*                                      REQUEST THE INITIATOR TO STOP,
*                                      THEN TURN THE INTER NAL STOP
*                                      AND THE DO WHILE INDICATOR S
*                                      OFF                           */
*         LCTSTOP='0'B;             /* TURN INTERNAL STOP INDICATOR
*                                      OFF                           */
         NI    LCTSTOP(LCTPTR),B'11111011'                         0267
*         LOOPSWCH=OFFF;            /* TURN THE DO WHILE INDICATOR 0268
*                                      OFF                           */
         MVC   LOOPSWCH(4),OFFF                                    0268
*         IELRTNCD=0;               /* CLEAR THE RETURN CODE FIELD   */
         L     @14,LCTENTR(,LCTPTR)                                0269
         L     @14,IELEXIT(,@14)                                   0269
         MVI   IELRTNCD(@14),X'00'                                 0269
*       END;                                                       0270
*     ELSE                                                         0271
*       DO;                         /* IF RETURN CODES NOT ZERO    0271
*                                      PROCESS THEM                  */
         B     @RC00265                                            0271
@RF00265 DS    0H                                                  0272
*         IF CODESAVE=0 THEN                                       0272
         ICM   @14,15,CODESAVE                                     0272
         BNZ   @RF00272                                            0272
*           DO;                     /* IF NO ERROR FROM THE SUBSYSTEM
*                                      INTERFACES THEN CHECK FOR STOP
*                                      INDICATOR                     */
*             IF(SSOBRETN^=SSJSISTP)&(SSOBRETN^=SSJSYSER) THEN     0274
         L     @14,LCTSSOBA(,LCTPTR)                               0274
         L     @14,SSOBRETN(,@14)                                  0274
         CH    @14,@CH00084                                        0274
         BE    @RF00274                                            0274
         CH    @14,@CH00052                                        0274
         BE    @RF00274                                            0274
*               DO;                 /* IF NO STOP WAS SPECIFIED AND
*                                      THERE WAS NOT A SYSTEM ERROR,
*                                      RETURN TO CALLER INDICATING 0275
*                                      JOB SELECT ERROR              */
*                 IELRTNCD=SSOBRETN;/* PUT ERROR CODE IN EXIT LIST   */
         L     @10,LCTENTR(,LCTPTR)                                0276
         L     @10,IELEXIT(,@10)                                   0276
         STC   @14,IELRTNCD(,@10)                                  0276
*                 IELRCXT='04'X;    /* INDICATE JOB SELECT ERROR     */
         MVI   IELRCXT(@10),X'04'                                  0277
*               END;                                               0278
*             IF SSOBRETN=SSJSYSER THEN                            0279
@RF00274 L     @14,LCTSSOBA(,LCTPTR)                               0279
         CLC   SSOBRETN(4,@14),@CF00052                            0279
         BNE   @RF00279                                            0279
*               DO;                 /* IF A SYSTEM ERROR WAS       0280
*                                      ENCOUNTER ED,PUT ERROR CODE IN
*                                      EXIT LIST AND RETURN TO CALLER*/
*                 IELRTNCD=SSCDSAVE;/* PUT SYSTER ERROR CODE IN EXIT
*                                      LIST                          */
         L     @14,LCTENTR(,LCTPTR)                                0281
         L     @14,IELEXIT(,@14)                                   0281
         STC   SSCDSAVE,IELRTNCD(,@14)                             0281
*                 IELRCXT='02'X;    /* INDICATE ERROR OCCURRED IN SWA
*                                      CREATE OR THE INTERPRETER     */
         MVI   IELRCXT(@14),X'02'                                  0282
*               END;                                               0283
*           END;                                                   0284
*         ELSE                                                     0285
*           DO;                     /* IF THERE WAS AN ERROR FROM THE
*                                      SUBSYSTEM INTERFACE DETERMINE
*                                      WHICH TYPE                    */
         B     @RC00272                                            0285
@RF00272 DS    0H                                                  0286
*             IF(CODESAVE=SSRTNSUP×CODESAVE=SSRTNTUP×CODESAVE=SSRTNOSS)
*                 &(LCTONEJF='0'B) THEN                            0286
         L     @14,CODESAVE                                        0286
         CH    @14,@CH00084                                        0286
         BE    @GL00003                                            0286
         CH    @14,@CH00062                                        0286
         BE    @GL00003                                            0286
         CH    @14,@CH01842                                        0286
         BNE   @RF00286                                            0286
@GL00003 TM    LCTONEJF(LCTPTR),B'00000100'                        0286
         BNZ   @RF00286                                            0286
*               DO;                 /* IF THE SUBSYSTEM DOES NOT   0287
*                                      SUPPORT THE JOB SELECTION   0287
*                                      FUNCTION OR THE SUBSYSTEM IS
*                                      NOT ACTIVE OR IF THE SUBSYSTEM
*                                      DOES NOT EXIST AND AN       0287
*                                      INITIATOR WAS ATTEMPTING TO 0287
*                                      INITIATE A PROBLEM PROGRAM, 0287
*                                      RETURN TO CALLER WITH JOB   0287
*                                      SELECT ERROR                  */
*                 IELRTNCD=CODESAVE;/* PUT ERROR CODE IN EXIT LIST   */
         L     @14,LCTENTR(,LCTPTR)                                0288
         L     @14,IELEXIT(,@14)                                   0288
         MVC   IELRTNCD(1,@14),CODESAVE+3                          0288
*                 IELRCXT='04'X;    /* INDICATE JOB SELECT ERROR     */
         MVI   IELRCXT(@14),X'04'                                  0289
*               END;                                               0290
*             ELSE                                                 0291
*               DO;                 /* IF THE ABOVE CONDITIONS WERE
*                                      NOT MET, ABEND WITH A       0291
*                                      SUBSYSTEM INTERFACE ERROR CODE*/
         B     @RC00286                                            0291
@RF00286 DS    0H                                                  0292
*                 RESPECIFY                                        0292
*                   R1 RSTD;                                       0292
*                 R1=ABENCODE;      /* PUT ABEND CODE IN REG 1       */
         L     R1,ABENCODE                                         0293
*                 GEN(ABEND (1),,,SYSTEM);/* ISSUE AN ABEND          */
         ABEND (1),,,SYSTEM
*                 RESPECIFY                                        0295
*                   R1 UNRSTD;                                     0295
*               END;                                               0296
*           END;                                                   0297
@RC00286 DS    0H                                                  0298
*       END;                                                       0298
@RC00272 DS    0H                                                  0299
*     RESPECIFY                                                    0299
*      (CODEREGG) UNRSTD;                                          0299
@RC00265 DS    0H                                                  0300
*   END;                                                           0300
@DE00139 CLC   LOOPSWCH(4),ON                                      0300
         BE    @DL00139                                            0300
*   RESPECIFY                                                      0301
*    (R0,                                                          0301
*     R1) RSTD;                                                    0301
*                                                                  0301
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING SECTION OF CODE DOES PROCESSING FOR THE         */
*   /* INITIATOR'S STAE EXIT ROUTINES                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0302
*   IF LCTSTEPL^=0 THEN                                            0302
         L     @10,LCTSTEPL(,LCTPTR)                               0302
         LTR   @10,@10                                             0302
         BZ    @RF00302                                            0302
*     DO;                           /* IF THERE EXISTS AN INITIATOR
*                                      STAE EXIT PARAMETER LIST    0303
*                                      ,PERFORM STAE PROCESSING      */
*       IF STERETRY='1'B THEN                                      0304
         TM    STERETRY(@10),B'10000000'                           0304
         BNO   @RF00304                                            0304
*         DO;                       /* IF THE RETRY INDICATOR IS ON,
*                                      TURN IT OFF AND TURN ON THE 0305
*                                      MUST COMPLETE                 */
*           STERETRY='0'B;          /* TURN THE RETRY INDICATOR OFF  */
*           STETJMR='1'B;           /* TURN THE MUST RUN INDICATOR ON*/
         OI    STETJMR(@10),B'01000000'                            0307
         NI    STERETRY(@10),B'01111111'                           0307
*         END;                                                     0308
*       ELSE                                                       0309
*         STETJMR='0'B;             /* TURN THE MUST RUN INDICATOR 0309
*                                      OFF                           */
         B     @RC00304                                            0309
@RF00304 L     @10,LCTSTEPL(,LCTPTR)                               0309
         NI    STETJMR(@10),B'10111111'                            0309
*     END;                                                         0310
*                                                                  0310
@RC00304 DS    0H                                                  0311
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING CODE FREES THE END OF THE CSCB THAT IS NO LONGER*/
*   /* NEEDED AND READS IN THE JOB'S FIRST SCT                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0311
*   CHSZE=(ADDR(CHSHORT)-ADDR(CHAIN))/8;/* LENGTH OF SHORTENED CSCB  */
@RF00302 L     @10,LCTQDRTY(,LCTPTR)                               0311
         LA    @03,9                                               0311
         STC   @03,CHSZE(,@10)                                     0311
*   R0=ADDR(CHLAST)-ADDR(CHSHORT);  /* LENGTH TO BE FREED            */
         LA    R0,104                                              0312
*   R0=R0×SUBPOOL2;                 /* PUT IN THE SUBPOOL NO.        */
         O     R0,SUBPOOL2                                         0313
*   R1=ADDR(CHSHORT);               /* GET ADDR OF THE SECTION TO  0314
*                                      FREE                          */
         LA    R1,CHSHORT(,@10)                                    0314
*   GEN(FREEMAIN R,LV=(0),A=(1));   /* FREE THE END OF THE CSCB      */
         FREEMAIN R,LV=(0),A=(1)
*   RESPECIFY                                                      0316
*    (R0,                                                          0316
*     R1) UNRSTD;                                                  0316
*   RESPECIFY                                                      0317
*     CHAIN BASED(JSCBCSCB);                                       0317
*   IF CHTRKID='03'X THEN                                          0318
         L     @10,LCTTCBAD(,LCTPTR)                               0318
         L     @03,TCBJSCB(,@10)                                   0318
         L     @03,JSCBCSCB(,@03)                                  0318
         CLI   CHTRKID(@03),X'03'                                  0318
         BNE   @RF00318                                            0318
*     TIOCSTEP(9:16)=JCTJNAME;      /* IF THE JOB BEING PROCESSED WAS
*                                      INITIATED, PUT THE JOBNAME IN
*                                      THE INITIATOR'S TIOT          */
         L     @10,TCBTIO(,@10)                                    0319
         L     @03,LCTJCTAD(,LCTPTR)                               0319
         MVC   TIOCSTEP+8(8,@10),JCTJNAME(@03)                     0319
*   RESPECIFY                                                      0320
*     CHAIN BASED(LCTQDRTY);                                       0320
*                                                                  0320
@RF00318 DS    0H                                                  0321
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE EPA AND INVOKE SWA MANAGER LOCATE MODE TO GET      */
*   /* ADDRESS OF SCT FOR FIRST STEP.                         YM01566*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0321
*   SWEPAPTR=ADDR(EPA1);            /*                        YM01566*/
         LA    @10,EPA1                                            0321
         ST    @10,SWEPAPTR                                        0321
*   SWAEPA=''B;                     /*                        YM01566*/
         XC    SWAEPA(16,@10),SWAEPA(@10)                          0322
*   SWVA=JCTSSTR;                   /*                        YM01566*/
*                                                                  0323
         L     @03,LCTJCTAD(,LCTPTR)                               0323
         MVC   SWVA(3,@10),JCTSSTR(@03)                            0323
*   /*****************************************************************/
*   /*                                                               */
*   /* ?SWAREQ (RL) EPA (SWEPAPTR);                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0324
*   CALL SWAMGR(SWEPAPTR,'RL');     /* YM01566                       */
         LA    @10,SWEPAPTR                                        0324
         ST    @10,@AL00001                                        0324
         LA    @10,@CC02678                                        0324
         ST    @10,@AL00001+4                                      0324
         L     @10,CVTPTR                                          0324
         L     @10,CVTJESCT(,@10)                                  0324
         L     @15,JESWAA(,@10)                                    0324
         LA    @01,@AL00001                                        0324
         BALR  @14,@15                                             0324
*   LCTSCTAD=SWBLKPTR;              /* SET SCT STORAGE ADDRESS     0325
*                                                             YM01566*/
         L     @10,SWEPAPTR                                        0325
         L     @10,SWBLKPTR(,@10)                                  0325
         ST    @10,LCTSCTAD(,LCTPTR)                               0325
*   LCTSCTVA=JCTSSTR;               /* PUT SVA OF SCT IN LCT         */
         L     @03,LCTJCTAD(,LCTPTR)                               0326
         MVC   LCTSCTVA(3,LCTPTR),JCTSSTR(@03)                     0326
*   SCTFSTEP='1'B;                  /* INDICATE LOGICAL FIRST STEP   */
*                                                                  0327
         OI    SCTFSTEP(@10),B'00100000'                           0327
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING SECTION OF CODE ISSUES A SYSEVENT TO INFORM THE */
*   /* RESOURCE MANAGER THAT A JOB HAS BEEN SELECTED                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0328
*   RFY                                                            0328
*    (R1) RSTD;                     /*                       @Z40BPPJ*/
*   R1=ADDR(CHCLS);                 /* LOAD JOBNAME ADDRESS INTO REG1
*                                      FOR SYSEVENT          @Z40BPPJ*/
         L     R1,LCTQDRTY(,LCTPTR)                                0329
         LA    R1,CHCLS(,R1)                                       0329
*   PERFGRP=SCTPRFMF;               /* COPY PERFORMANCE GROUP NUMBER
*                                      TO LOCAL STORAGE SO IT CAN BE
*                                      PASSED TO SRM         @Z40BPPJ*/
         MVC   PERFGRP(1),SCTPRFMF(@10)                            0330
*   GEN REFS(PERFGRP)(SYSEVENT JOBSELCT,PGN=PERFGRP);/* INFORM THE 0331
*                                      RESOURCE MANAGER THAT A JOB 0331
*                                      HAS BEEN SELECTED     @Z40BPPJ*/
         SYSEVENT JOBSELCT,PGN=PERFGRP
*   RFY                                                            0332
*    (R1) UNRSTD;                   /*                       @Z40BPPJ*/
*                                                                  0333
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION OF CODE DETERMINES IF THE JOB IS BEING           */
*   /* WARMSTARTED. IF IT IS, 24 BYTES OF CORE FOR A PARAMETER LIST  */
*   /* IS GOTTEN,THE LCT ADDRESS IS PUT IN THE FIRST WORD, AND       */
*   /* CONTROL IS PASSED TO IEFSD164                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0333
*   IF JCTWARMS='1'B THEN                                          0333
         L     @10,LCTJCTAD(,LCTPTR)                               0333
         TM    JCTWARMS(@10),B'10000000'                           0333
         BNO   @RF00333                                            0333
*     DO;                           /* IF THE JOB IS BEING         0334
*                                      WARMSTARTED, GO TO IEFSD164   */
*       RESPECIFY                                                  0335
*         R0 RSTD;                                                 0335
*       R0=LENGTH(IEFPARM);         /* GET LENGTH OF PARAMETER LIST  */
         LA    R0,24                                               0336
*       R0=R0×SUBPOOL1;             /* PUT IN SUBPOOL 253            */
         O     R0,SUBPOOL1                                         0337
*       GEN( GETMAIN R,LV=(0));     /* GET CORE FOR PARAMETER LIST   */
          GETMAIN R,LV=(0)
*       RESPECIFY                                                  0339
*         R0 UNRSTD;                                               0339
*       RESPECIFY                                                  0340
*        (COREPTR,                                                 0340
*         WORKREG) RSTD;                                           0340
*       WORKREG=COREPTR;            /* SET UP ADDRESSABILITY FOR THE
*                                      PARAMETER LIST                */
         LR    WORKREG,COREPTR                                     0341
*       IEFPARM=''B;                /* INITIALIZE TO ZEROES          */
         XC    IEFPARM(24,WORKREG),IEFPARM(WORKREG)                0342
*       LCTAD=LCTPTR;               /* PUT THE LCTPTR IN THE PARMLIST*/
         ST    LCTPTR,LCTAD(,WORKREG)                              0343
*       JCTAD=LCTJCTAD;             /* PUT JCT PTR IN PARMLIST       */
         MVC   JCTAD(4,WORKREG),LCTJCTAD(LCTPTR)                   0344
*       SCTAD=LCTSCTAD;             /* PUT SCT PTR IN PARMLIST       */
         MVC   SCTAD(4,WORKREG),LCTSCTAD(LCTPTR)                   0345
*       RESPECIFY                                                  0346
*        (RTNREG,                                                  0346
*         R15) RSTD;                                               0346
*       RTNREG=ADDR(RTNPT);         /* SET UP RETURN POINT AFTER   0347
*                                      DUMMY RETURN                  */
         LA    RTNREG,RTNPT                                        0347
*       RETURN;                     /* DO A DUMMY RETURN TO FREE THE
*                                      CORE GOTTEN BY THE PLS2     0348
*                                      COMPILER                      */
@EL00001 DS    0H                                                  0348
@EF00001 L     @00,@SIZDATD                                        0348
         LR    @01,@11                                             0348
         FREEMAIN R,LV=(0),A=(1)
@ER00001 BR    @14                                                 0348
*RTNPT:                                                            0349
*       R15=ADDR(IEFSD064);         /* GET ADDR OF IEFSD164          */
RTNPT    L     R15,@CV00056                                        0349
*       COREPTR=WORKREG;            /* PUT PARM PTR IN REG 1         */
         LR    COREPTR,WORKREG                                     0350
*       GEN(BR 15);                 /* BRANCH TO IEFSD164            */
         BR 15
*       RESPECIFY                                                  0352
*        (RTNREG,                                                  0352
*         R15) UNRSTD;                                             0352
*     END;                                                         0353
*                                                                  0354
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION OF CODE CHECKS THE JCT TO DETERMINE IF THE JOB   */
*   /* BEING STARTED REQUIRES A UNIQUE PROTECT KEY. IF ONE IS        */
*   /* REQUESTED, THEN ENQUEUE ON THE PROTECT KEY RESOURCE AND       */
*   /* DETERMINE IF A KEY IS AVAILABLE. IF A KEY IS AVAILABLE, ASSIGN*/
*   /* IT. IF A KEY IS NOT AVAILABLE,AND THE JOB WAS STARTED,WRITE A */
*   /* JOB FAIL MSG (IEF091I) AND SET THE JOB FAILED INDICATOR IN THE*/
*   /* JCT.IF THE JOB WAS INITIATED AND NO KEY IS AVAILABLE, WRITE   */
*   /* MSG (IEF090E) AND ENQUEUE THE JOB ON THE HOLDQ                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0354
*   JCTJSRNO=0;                     /* INITIALIZE THE PROTECT KEY  0354
*                                      FIELD TO ZERO                 */
@RF00333 L     @10,LCTJCTAD(,LCTPTR)                               0354
         MVI   JCTJSRNO(@10),X'00'                                 0354
*   IF JCTADSPC='1'B THEN                                          0355
         TM    JCTADSPC(@10),B'01000000'                           0355
         BNO   @RF00355                                            0355
*     DO;                           /* IF THE JOB REQUIRES TO RUN IN
*                                      V=R, THE GET A UNIQUE PROTECT
*                                      KEY                           */
*       GEN(ENQ MF=(E,IEFSD61A));   /* ENQ ON THE PROTECT KEY      0357
*                                      RESOURCE                      */
*                                                                  0357
         ENQ MF=(E,IEFSD61A)
*       /*************************************************************/
*       /*                                                           */
*       /* THIS CODE SCANS THE PROTECT KEY LIST IN MASTER RESIDENT   */
*       /* CORE TO DETERMINE IF A UNIQUE PROTECT KEY IS AVAILABLE    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0358
*       RESPECIFY                                                  0358
*        (R0,                                                      0358
*         R1,                                                      0358
*         R15) RSTD;                                               0358
*       R0=BAPKES;                  /* PICK UP KEY MASK              */
         L     @14,CVTPTR                                          0359
         L     @14,CVTMSER(,@14)                                   0359
         LH    R0,BAPKES(,@14)                                     0359
*       R0=R0&'0000FFFF'X;          /* CLEAR HIGH ORDER HALF WORD    */
         N     R0,@CF02681                                         0360
*       R1=7;                       /* INITIALIZE LOOP CONTROL       */
         LA    R1,7                                                0361
*       R15='00008000'X;            /* INITIALIZE MASK SWITCH        */
         L     R15,@CF02682                                        0362
*       DO WHILE R1^=0;             /* DETERMINE IF A KEY IS       0363
*                                      AVAILABLE                     */
         B     @DE00363                                            0363
@DL00363 DS    0H                                                  0364
*         R15=R15&R0;               /* CHECK PROTECT KEY VALUE       */
         NR    R15,R0                                              0364
*         IF R15=0 THEN                                            0365
         LTR   R15,R15                                             0365
         BNZ   @RF00365                                            0365
*           DO;                     /* IF A KEY IS AVAILABLE ASSIGN
*                                      IT                            */
*             R1=R1+8;              /* ADD TO GET REAL KEY VALUE     */
         AH    R1,@CH00062                                         0367
*             R15=1;                /* SET UP FOR SHIFT              */
         LA    R15,1                                               0368
*             GEN( SLA 15,0(1));    /* SHIFT BIT TO KEY VALUE      0369
*                                      POSITION                      */
          SLA 15,0(1)
*             R0=R0×R15;            /* MARK THE KEY ALLOCATED        */
         OR    R0,R15                                              0370
*             PROTKEY=R0;           /* RESTORE THE MASK              */
         L     @14,CVTPTR                                          0371
         L     @14,CVTMSER(,@14)                                   0371
         STH   R0,PROTKEY(,@14)                                    0371
*             GEN(SLL 1,4);         /* MAKE 4 HIGH ORDER BITS      0372
*                                      REPRESENT VALUE OF THE PROTECT
*                                      KEY                           */
         SLL 1,4
*             JCTJSRNO=R1;          /* SAVE THE NEW KEY VALUE        */
         L     @14,LCTJCTAD(,LCTPTR)                               0373
         STC   R1,JCTJSRNO(,@14)                                   0373
*             R1=0;                 /* SET END OF LOOP INDICATOR     */
         SLR   R1,R1                                               0374
*           END;                                                   0375
*         ELSE                                                     0376
*           DO;                                                    0376
         B     @RC00365                                            0376
@RF00365 DS    0H                                                  0377
*             R15=R15/2;            /* TEST NEXT KEY INDICATOR       */
         SRL   R15,1                                               0377
*             R1=R1-1;              /* DECREASE LOOP CONTROL VALUE   */
         BCTR  R1,0                                                0378
*           END;                                                   0379
*       END;                                                       0380
@RC00365 DS    0H                                                  0380
@DE00363 LTR   R1,R1                                               0380
         BNZ   @DL00363                                            0380
*       RESPECIFY                                                  0381
*        (R0,                                                      0381
*         R1,                                                      0381
*         R15) UNRSTD;                                             0381
*       GEN(DEQ  MF=(E,IEFSD61A));  /* DEQ FROM THE PROTECT KEY    0382
*                                      RESOURCE                      */
         DEQ  MF=(E,IEFSD61A)
*       IF JCTJSRNO=0 THEN                                         0383
         L     @10,LCTJCTAD(,LCTPTR)                               0383
         CLI   JCTJSRNO(@10),0                                     0383
         BNE   @RF00383                                            0383
*         DO;                       /* IF A UNIQUE PROTECT KEY WAS 0384
*                                      NOT AVAILA BLE DEQ FROM THE 0384
*                                      RESOURCE AND DETERMIN E     0384
*                                      WHETHER THE JOB WAS STARTED OR
*                                      INITIATED. IF THE JOB WAS   0384
*                                      STARTED ISSUE MSG IEF091I AND
*                                      SET THE JOB FAIL INDICATOR IN
*                                      THE JCT. IF A KEY WAS NOT   0384
*                                      AVAILABLE AND THE JOB WAS   0384
*                                      INITIATED, ISSUE MSG IEF090E
*                                      AND RE-ENQUEUE THE JOB.       */
*           RESPECIFY                                              0385
*            (R0,                                                  0385
*             COREPTR,                                             0385
*             WORKREG) RSTD;        /*                         Y02651*/
*           IF CHVCD=START THEN                                    0386
         L     @15,LCTQDRTY(,LCTPTR)                               0386
         CLC   CHVCD(1,@15),START                                  0386
         BNE   @RF00386                                            0386
*             DO;                   /* IF THIS JOB WAS STARTED FAIL
*                                      IT                            */
*               INCMSTS='1'B;       /* SET THE JOB FAIL INDICATOR    */
         OI    INCMSTS(@10),B'00000100'                            0388
*               MSGPTR=LCTIMSG+DISPL2;/* GET PTR TO MSG IEF091I      */
         L     @10,LCTIMSG(,LCTPTR)                                0389
         LH    MSGPTR,DISPL2(,@10)                                 0389
         ALR   MSGPTR,@10                                          0389
*               R0=MSGLGTH2;        /* GET LENGTH OF MSG IEF091I     */
         SLR   R0,R0                                               0390
         IC    R0,MSGLGTH2(,@10)                                   0390
*               GEN(GETMAIN R,LV=(0));/* GET CORE FOR THE MESSAGE    */
         GETMAIN R,LV=(0)
*               WORKREG=COREPTR;    /* SAVE THE CORE ADDRESS         */
         LR    WORKREG,COREPTR                                     0392
*               MSGAREA(1:MSGLGTH2)=MSGAREA1;/* MOVE THE MSG TO    0393
*                                      DYNAMIC CORE                  */
         L     @10,LCTIMSG(,LCTPTR)                                0393
         SLR   @07,@07                                             0393
         IC    @07,MSGLGTH2(,@10)                                  0393
         BCTR  @07,0                                               0393
         EX    @07,@SM02707                                        0393
*               JOBNAME2=CHCLS;     /* PUT THE JOBNAME IN THE MSG    */
         L     @10,LCTQDRTY(,LCTPTR)                               0394
         MVC   JOBNAME2(8,WORKREG),CHCLS(@10)                      0394
*               R0=CHUCMP;          /* GET THE CONSOLE ID            */
         SLR   R0,R0                                               0395
         IC    R0,CHUCMP(,@10)                                     0395
*               GEN(WTO MF=(E,(WORKREG)));/* ISSUE MSG IEF091I       */
         WTO MF=(E,(WORKREG))
*               R0=MSGLGTH2;        /* GET THE LENGTH OF THE MSG     */
         L     @10,LCTIMSG(,LCTPTR)                                0397
         SLR   R0,R0                                               0397
         IC    R0,MSGLGTH2(,@10)                                   0397
*               GEN(FREEMAIN R,LV=(0),A=(WORKREG));/* FREE THE CORE  */
         FREEMAIN R,LV=(0),A=(WORKREG)
*               JCTJSRNO='80'X;     /* PUT IN VIRTUAL KEY            */
         L     @10,LCTJCTAD(,LCTPTR)                               0399
         MVI   JCTJSRNO(@10),X'80'                                 0399
*             END;                                                 0400
*           ELSE                                                   0401
*             DO;                   /* IF THE JOB WAS INITIATED, THEN
*                                      ENQUEUE IT ON THE HOLD-Q      */
         B     @RC00386                                            0401
@RF00386 DS    0H                                                  0402
*               JOBSNAME=CHCLS;     /* SAVE JOBNAME FOR MESSAGE,   0402
*                                      BECAUSE CSCB WILL BE FREED  0402
*                                      BEFORE THE MESSAGE IS ISSUED
*                                                              Y02651*/
         L     @10,LCTQDRTY(,LCTPTR)                               0402
         MVC   JOBSNAME(8),CHCLS(@10)                              0402
*               CALL REENQJOB;      /* CALL SUBROUTINE TO REENQUEUE
*                                      JOB ON HOLD QUEUE       Y02651*/
         BAL   @14,REENQJOB                                        0403
*               IF(CODESAVE=0)&(SSOBRETN=0) THEN                   0404
         SLR   @10,@10                                             0404
         C     @10,CODESAVE                                        0404
         BNE   @RF00404                                            0404
         L     @15,LCTSSOBA(,LCTPTR)                               0404
         C     @10,SSOBRETN(,@15)                                  0404
         BNE   @RF00404                                            0404
*                 DO;               /* IF NO ERROR WAS ENCOUNTERED,
*                                      ISSUE JOB PUT OH HOLD-Q MSG   */
*                   MSGPTR=LCTIMSG+DISPL1;/* GET PTR TO MSG IEF090E  */
         L     @10,LCTIMSG(,LCTPTR)                                0406
         LH    MSGPTR,DISPL1(,@10)                                 0406
         ALR   MSGPTR,@10                                          0406
*                   R0=MSGLGTH1;    /* LENGTH OF MESSAGE IEF090E     */
         SLR   R0,R0                                               0407
         IC    R0,MSGLGTH1(,@10)                                   0407
*                   GEN(GETMAIN R,LV=(0));/* GET CORE FOR MSG IEF090E*/
         GETMAIN R,LV=(0)
*                   WORKREG=COREPTR;/* SAVE THE CORE ADDRESS         */
         LR    WORKREG,COREPTR                                     0409
*                   MSGAREA(1:MSGLGTH1)=MSGAREA1;/* MOVE MSG IEF090E
*                                      TO DYNAMIC CORE               */
         L     @10,LCTIMSG(,LCTPTR)                                0410
         SLR   @07,@07                                             0410
         IC    @07,MSGLGTH1(,@10)                                  0410
         BCTR  @07,0                                               0410
         EX    @07,@SM02707                                        0410
*                   JOBNAME1(1:8)=JOBSNAME;/* PUT THE JOBNAME IN THE
*                                      MSG                           */
         MVC   JOBNAME1(8,WORKREG),JOBSNAME                        0411
*                   GEN(WTO MF=(E,(WORKREG)));/* ISSUE MSG IEF090E   */
         WTO MF=(E,(WORKREG))
*                   R0=MSGLGTH1;    /* GET THE LENGTH OF MSG IEF090E */
         L     @10,LCTIMSG(,LCTPTR)                                0413
         SLR   R0,R0                                               0413
         IC    R0,MSGLGTH1(,@10)                                   0413
*                   GEN(FREEMAIN R,LV=(0),A=(WORKREG));/* FREE THE 0414
*                                      CORE                          */
         FREEMAIN R,LV=(0),A=(WORKREG)
*                 END;                                             0415
*               GOTO JOBSELCT;      /* GO SELECT ANOTHER JOB         */
         B     JOBSELCT                                            0416
*             END;                                                 0417
*           RFY                                                    0418
*            (R0,                                                  0418
*             COREPTR,                                             0418
*             WORKREG) UNRSTD;      /*                         Y02651*/
@RC00386 DS    0H                                                  0419
*         END;                                                     0419
*     END;                                                         0420
*   ELSE                                                           0421
*     JCTJSRNO='80'X;               /* SET VIRTUAL KEY               */
         B     @RC00355                                            0421
@RF00355 L     @10,LCTJCTAD(,LCTPTR)                               0421
         MVI   JCTJSRNO(@10),X'80'                                 0421
*   ASCBAFFN=NOAFFIN;               /* TURN OFF CPU-TASK AFFINITY IN
*                                      CASE IT WAS SET FOR THE LAST
*                                      STEP OF THE PREVIOUS JOB AND
*                                      IEFSD263 WAS BYPASSED.      0422
*                                      (IEFSD263 WOULD BE BYPASSED IF
*                                      THERE WAS AN ALLOCATION     0422
*                                      ERROR.)                 Y02651*/
@RC00355 L     @10,LCTASCBA(,LCTPTR)                               0422
         MVC   ASCBAFFN(2,@10),@CB02629                            0422
*   IF INCMSTS='0'B THEN                                           0423
         L     @10,LCTJCTAD(,LCTPTR)                               0423
         TM    INCMSTS(@10),B'00000100'                            0423
         BNZ   @RF00423                                            0423
*     DO;                           /* IF THE JOB HAS NOT BEEN     0424
*                                      FAILED, ASSIGN CPU-TASK     0424
*                                      AFFINITY                Y02651*/
*                                                                  0424
*       /*************************************************************/
*       /*                                                           */
*       /* USE THE PROGRAM PROPERTIES TABLE TO DETERMINE IF CPU/TASK */
*       /* AFFINITY IS REQUIRED. IF YES, ASSIGN THE AFFINITY. IF THE */
*       /* AFFINITY CANNOT BE ASSIGNED, FAIL THE JOB OR PUT IT ON THE*/
*       /* HOLD QUEUE, DEPENDING UPON WHETHER THE JOB WAS STARTED OR */
*       /* INITIATED.                                          Y02651*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0425
*       DO PPTINDEX=1 BY 1 WHILE(PPTNAME(PPTINDEX)^=SCTPGMNM&PPTNAME(
*             PPTINDEX)^=PPTLAST);  /* SCAN TO DETERMINE THE INDEX IN
*                                      THE PPT OF THAT PROGRAM NAME
*                                      OR TO DETERMINE THAT THE    0425
*                                      PROGRAM NAME IS NOT IN THE PPT
*                                                              Y02651*/
         LA    PPTINDEX,1                                          0425
         B     @DE00425                                            0425
@DL00425 DS    0H                                                  0426
*       END;                        /*                         Y02651*/
         AH    PPTINDEX,@CH00091                                   0426
@DE00425 LR    @10,PPTINDEX                                        0426
         SLA   @10,4                                               0426
         L     @07,@CV00057                                        0426
         L     @03,LCTSCTAD(,LCTPTR)                               0426
         ALR   @07,@10                                             0426
         AL    @07,@CF02709                                        0426
         CLC   PPTNAME(8,@07),SCTPGMNM(@03)                        0426
         BE    @DC00425                                            0426
         L     @07,@CV00057                                        0426
         ALR   @07,@10                                             0426
         AL    @07,@CF02709                                        0426
         CLC   PPTNAME(8,@07),@CB02248                             0426
         BNE   @DL00425                                            0426
@DC00425 DS    0H                                                  0427
*       IF PPTNAME(PPTINDEX)=SCTPGMNM/* MAKE SURE WE EXITED FROM THE
*                                      LOOP BECAUSE THE PROGRAM NAME
*                                      WAS FOUND               Y02651*/
*         THEN                                                     0427
         LR    @10,PPTINDEX                                        0427
         SLA   @10,4                                               0427
         L     @07,@CV00057                                        0427
         L     @03,LCTSCTAD(,LCTPTR)                               0427
         ALR   @07,@10                                             0427
         AL    @07,@CF02709                                        0427
         CLC   PPTNAME(8,@07),SCTPGMNM(@03)                        0427
         BNE   @RF00427                                            0427
*         IF PPTCPUA(PPTINDEX)^=NOAFFIN THEN                       0428
         L     @07,@CV00057                                        0428
         ALR   @07,@10                                             0428
         AL    @07,@CF02710                                        0428
         CLC   PPTCPUA-10(2,@07),@CB02629                          0428
         BE    @RF00428                                            0428
*           DO;                     /* ASSIGN AFFINITY IF THE PROGRAM
*                                      REQUIRES A SPECIAL CPU  Y02651*/
*             RFY                                                  0430
*               R15 RSTD;           /*                         Y02651*/
*             CALL IEFICPUA(PPTCPUA(PPTINDEX),CSDCPUJS,ASCBAFFN);/*
*                                      ASSIGN AFFINITY         Y02651*/
         L     @14,@CV00057                                        0431
         AL    @14,@CF02710                                        0431
         LA    @14,PPTCPUA-10(@10,@14)                             0431
         ST    @14,@AL00001                                        0431
         L     @14,CVTPTR                                          0431
         L     @14,CVTCSD(,@14)                                    0431
         LA    @14,CSDCPUJS(,@14)                                  0431
         ST    @14,@AL00001+4                                      0431
         L     @14,LCTASCBA(,LCTPTR)                               0431
         LA    @14,ASCBAFFN(,@14)                                  0431
         ST    @14,@AL00001+8                                      0431
         L     @15,@CV00058                                        0431
         LA    @01,@AL00001                                        0431
         BALR  @14,@15                                             0431
*             IF R15^=0 THEN                                       0432
         LTR   R15,R15                                             0432
         BZ    @RF00432                                            0432
*               DO;                 /* PERFORM ERROR PROCESSING IF 0433
*                                      AFFINITY COULD NOT BE ASSIGNED
*                                                              Y02651*/
*                 RFY                                              0434
*                   R15 UNRSTD;     /*                         Y02651*/
*                 JOBSNAME=CHCLS;   /* SAVE JOBNAME FOR MESSAGE,   0435
*                                      BECAUSE CSCB MAY BE FREED   0435
*                                      BEFORE THE MESSAGE IS ISSUED
*                                                              Y02651*/
         L     @10,LCTQDRTY(,LCTPTR)                               0435
         MVC   JOBSNAME(8),CHCLS(@10)                              0435
*                 IF LCTONEJF='1'B THEN                            0436
         TM    LCTONEJF(LCTPTR),B'00000100'                        0436
         BNO   @RF00436                                            0436
*                   DO;             /*                         Y02651*/
*                                                                  0437
*                     /***********************************************/
*                     /*                                             */
*                     /* IF THE JOB WAS NOT INITIATED, FAIL IT AND   */
*                     /* ISSUE MESSAGE IEF173I.                Y02651*/
*                     /*                                             */
*                     /***********************************************/
*                                                                  0438
*                     INCMSTS='1'B; /* FAIL THE JOB            Y02651*/
         L     @10,LCTJCTAD(,LCTPTR)                               0438
         OI    INCMSTS(@10),B'00000100'                            0438
*                     MSGDTO=MSGDFROM;/* MOVE MESSAGE FROM IEFIB650
*                                      TO BUFFER               Y02651*/
         L     @10,LCTIMSG(,LCTPTR)                                0439
         LH    @07,DISPLD(,@10)                                    0439
         ALR   @07,@10                                             0439
         MVC   MSGDTO(78),MSGDFROM(@07)                            0439
*                     MSGDJOB=JOBSNAME;/* PUT JOBNAME IN MESSAGE   0440
*                                                              Y02651*/
         MVC   MSGDJOB(8),JOBSNAME                                 0440
*                     CALL IEFIMASK(PPTCPUA(PPTINDEX),NUMBITS,MSGDLIST,
*                         NUMMOVED);/* INVOKE IEFIMASK TO CONVERT BIT
*                                      STRING TO A LIST        Y02651*/
         LR    @10,PPTINDEX                                        0441
         SLA   @10,4                                               0441
         L     @07,@CV00057                                        0441
         AL    @07,@CF02710                                        0441
         LA    @10,PPTCPUA-10(@10,@07)                             0441
         ST    @10,@AL00001                                        0441
         LA    @10,NUMBITS                                         0441
         ST    @10,@AL00001+4                                      0441
         LA    @10,MSGDLIST                                        0441
         ST    @10,@AL00001+8                                      0441
         LA    @10,NUMMOVED                                        0441
         ST    @10,@AL00001+12                                     0441
         L     @15,@CV00059                                        0441
         LA    @01,@AL00001                                        0441
         BALR  @14,@15                                             0441
*                     BYTESMVD=2*NUMMOVED-1;/* CONVERT NUMBER OF   0442
*                                      ENTRIES IN THE LIST TO THE  0442
*                                      NUMBER OF BYTES IN THE LIST 0442
*                                                              Y02651*/
         LH    BYTESMVD,NUMMOVED                                   0442
         ALR   BYTESMVD,BYTESMVD                                   0442
         BCTR  BYTESMVD,0                                          0442
*                     MSGDLIST(BYTESMVD+1:BYTESMVD+LENGTH(MSGDEND))=
*                         MSGDEND;  /* MOVE RIGHT HAND PORTION OF  0443
*                                      MESSAGE TO REMOVE EXCESS    0443
*                                      BLANKS                  Y02651*/
         LA    @10,MSGDLIST(BYTESMVD)                              0443
         MVC   0(13,@10),MSGDEND                                   0443
*                     MSGDSIZE=MSGDSIZE-(LENGTH(MSGDLIST)-BYTESMVD);
         LR    @10,BYTESMVD                                        0444
         SH    @10,@CH00037                                        0444
         AH    @10,MSGDSIZE                                        0444
         STH   @10,MSGDSIZE                                        0444
*                                   /* REDUCE SIZE OF MESSAGE TO   0445
*                                      ACCOUNT FOR REDUCTION IN SIZE
*                                      OF TEXT                 Y02651*/
*                     RFY                                          0445
*                       R0 RSTD;    /*                         Y02651*/
*                     R0=CHUCMP;    /* PASS IF OF CONSOLE WHICH    0446
*                                      ISSUED THE START COMMAND, SO
*                                      THAT CONSOLE WILL RECEIVE THE
*                                      MESSAGE                 Y02651*/
         L     @10,LCTQDRTY(,LCTPTR)                               0446
         SLR   R0,R0                                               0446
         IC    R0,CHUCMP(,@10)                                     0446
*                     GEN(WTO MF=(E,MSGDTO));/* ISSUE MSG. IEF173I 0447
*                                                              Y02651*/
         WTO MF=(E,MSGDTO)
*                     RFY                                          0448
*                       R0 UNRSTD;  /*                         Y02651*/
*                   END;                                           0449
*                 ELSE                                             0450
*                   DO;             /*                         Y02651*/
*                                                                  0450
         B     @RC00436                                            0450
@RF00436 DS    0H                                                  0451
*                     /***********************************************/
*                     /*                                             */
*                     /* IF THE JOB WAS INITIATED, PUT IT ON THE HOLD*/
*                     /* QUEUE AND ISSUE MESSAGE IEF172E.      Y02651*/
*                     /*                                             */
*                     /***********************************************/
*                                                                  0451
*                     CALL REENQJOB;/* PUT THE JOB ON THE HOLD QUEUE
*                                                              Y02651*/
         BAL   @14,REENQJOB                                        0451
*                     IF(CODESAVE=0)&(SSOBRETN=0) THEN             0452
         SLR   @10,@10                                             0452
         C     @10,CODESAVE                                        0452
         BNE   @RF00452                                            0452
         L     @07,LCTSSOBA(,LCTPTR)                               0452
         C     @10,SSOBRETN(,@07)                                  0452
         BNE   @RF00452                                            0452
*                       DO;         /* IF NO ERROR WAS ENCOUNTERED,
*                                      ISSUE MESSAGE SAYING THE JOB
*                                      WAS PUT ON HOLD QUEUE   Y02651*/
*                         MSGCTO=MSGCFROM;/* MOVE MESSAGE FROM     0454
*                                      IEFIB650 TO BUFFER      Y02651*/
         L     @10,LCTIMSG(,LCTPTR)                                0454
         LH    @07,DISPLC(,@10)                                    0454
         ALR   @07,@10                                             0454
         MVC   MSGCTO(76),MSGCFROM(@07)                            0454
*                         MSGCJOB=JOBSNAME;/* PUT JOBNAME IN MESSAGE
*                                                              Y02651*/
         MVC   MSGCJOB(8),JOBSNAME                                 0455
*                         CALL IEFIMASK(PPTCPUA(PPTINDEX),NUMBITS, 0456
*                             MSGCLIST,NUMMOVED);/* INVOKE IEFIMASK
*                                      TO CONVERT BIT STRING TO A  0456
*                                      LIST                    Y02651*/
         LR    @10,PPTINDEX                                        0456
         SLA   @10,4                                               0456
         L     @07,@CV00057                                        0456
         AL    @07,@CF02710                                        0456
         LA    @10,PPTCPUA-10(@10,@07)                             0456
         ST    @10,@AL00001                                        0456
         LA    @10,NUMBITS                                         0456
         ST    @10,@AL00001+4                                      0456
         LA    @10,MSGCLIST                                        0456
         ST    @10,@AL00001+8                                      0456
         LA    @10,NUMMOVED                                        0456
         ST    @10,@AL00001+12                                     0456
         L     @15,@CV00059                                        0456
         LA    @01,@AL00001                                        0456
         BALR  @14,@15                                             0456
*                         BYTESMVD=2*NUMMOVED-1;/* CONVERT NUMBER OF
*                                      ENTRIES IN THE LIST TO THE  0457
*                                      NUMBER OF BYTES IN THE LIST 0457
*                                                              Y02651*/
         LH    BYTESMVD,NUMMOVED                                   0457
         ALR   BYTESMVD,BYTESMVD                                   0457
         BCTR  BYTESMVD,0                                          0457
*                         MSGCLIST(BYTESMVD+1:BYTESMVD+LENGTH(MSGCEND))
*                             =MSGCEND;/* MOVE RIGHT HAND PORTION OF
*                                      MESSAGE TO REMOVE EXCESS    0458
*                                      BLANKS                  Y02651*/
         LA    @10,MSGCLIST(BYTESMVD)                              0458
         MVC   0(13,@10),MSGCEND                                   0458
*                         MSGCSIZE=MSGCSIZE-(LENGTH(MSGCLIST)-BYTESMVD)
*                             ;     /* REDUCE SIZE OF MESSAGE TO   0459
*                                      ACCOUNT FOR REDUCTION IN SIZE
*                                      OF TEXT                 Y02651*/
         LR    @10,BYTESMVD                                        0459
         SH    @10,@CH00037                                        0459
         AH    @10,MSGCSIZE                                        0459
         STH   @10,MSGCSIZE                                        0459
*                         GEN(WTO MF=(E,MSGCTO));/* ISSUE MSG.     0460
*                                      IEF172E                 Y02651*/
         WTO MF=(E,MSGCTO)
*                       END;                                       0461
*                     GOTO JOBSELCT;/* GO SELECT ANOTHER JOB   Y02651*/
         B     JOBSELCT                                            0462
*                   END;                                           0463
*               END;                                               0464
@RC00436 DS    0H                                                  0465
*           END;                                                   0465
@RF00432 DS    0H                                                  0466
*     END;                                                         0466
@RF00428 DS    0H                                                  0466
@RF00427 DS    0H                                                  0467
*                                                                  0467
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION OF CODE DETERMINES IF DATA SET INTEGRITY SHOULD  */
*   /* BE PERFORMED. IF IT SHOULD, THEN EACH DATA SET TABLE IS READ  */
*   /* FROM SWA AND EACH DATA SET NAME IS PASSED TO IEFDSTBL TO      */
*   /* ELIMINATE DUPLICATE NAMES. EACH DATA SET TABLE IS WRITTEN BACK*/
*   /* TO SWA WITH DUPLICATE NAMES ELIMINATED.AFTER ALL DATA SET     */
*   /* TABLES HAVE BEEN PROCESSED, CONTROL IS PASSED TO IEFDSLST TO  */
*   /* BUILD THE DATA SET ENQ LIST                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0467
*   LCTPARM1=0;                     /* CLEAR DATA SET ENQ TABLE PTR  */
@RF00423 SLR   @10,@10                                             0467
         ST    @10,LCTPARM1(,LCTPTR)                               0467
*   LCTPARM2=0;                     /* CLEAR SUBPOOL AND LENGTH      */
         ST    @10,LCTPARM2(,LCTPTR)                               0468
*   LCTTMWRK=''B;                   /* CLEAR TIMER WORK AREA         */
         XC    LCTTMWRK(16,LCTPTR),LCTTMWRK(LCTPTR)                0469
*   LCTSNUMB=SCTSNUMB;              /* PUT STEP NO. IN LCT   @ZA02114*/
         L     @10,LCTSCTAD(,LCTPTR)                               0470
         MVC   LCTSNUMB(1,LCTPTR),SCTSNUMB(@10)                    0470
*   IF(INCMSTS='0'B)&(JCTDETDA^=0) THEN                            0471
         L     @10,LCTJCTAD(,LCTPTR)                               0471
         TM    INCMSTS(@10),B'00000100'                            0471
         BNZ   @RF00471                                            0471
         ICM   @03,7,JCTDETDA(@10)                                 0471
         BZ    @RF00471                                            0471
*     DO;                           /* IF THE JOB HAS NOT FAILED AND
*                                      THERE IS A DSENQ TABLE PERFORM
*                                      DATA SET INTEGRITY            */
*       RESPECIFY                                                  0473
*        (R0,                                                      0473
*         COREPTR,                                                 0473
*         WORKREG) RSTD;            /*                         Y02651*/
*       R0=LENGTH(DSTABLE);         /* LENGTH OF THE WORK AREA       */
         LA    R0,378                                              0474
*       GEN(GETMAIN R,LV=(0));      /* GET CORE FOR THE WORKAREA     */
         GETMAIN R,LV=(0)
*       WORKREG=COREPTR;            /* SET UP ADDRESSABILITY FOR THE
*                                      WORKAREA                      */
         LR    WORKREG,COREPTR                                     0476
*       RESPECIFY                                                  0477
*        (R0,                                                      0477
*         COREPTR) UNRSTD;                                         0477
*       INPUTREC=''B;               /* ZERO THE INPUT RECORD SPACE   */
         XC    INPUTREC(176,WORKREG),INPUTREC(WORKREG)             0478
*       STBLPARM=''B;               /* ZERO PARM LIST FOR IEFSDTBL   */
         XC    STBLPARM(16,WORKREG),STBLPARM(WORKREG)              0479
*       DATASAVE=''B;               /* ZERO RECORDS LIST             */
         XC    DATASAVE(6,WORKREG),DATASAVE(WORKREG)               0480
*       REMREAD=ADDR(INPUTREC);     /* SET UP THE SWA MGR READ     0481
*                                      PARMLIST                      */
         ST    WORKREG,REMREAD                                     0481
*       REMRBA=JCTDETDA;            /* SVA OF THE FIRST DSENQ TABLE  */
         L     @10,LCTJCTAD(,LCTPTR)                               0482
         MVC   REMRBA(3),JCTDETDA(@10)                             0482
*       QMPCMNC=ONEREC;             /* INDICATE ONE OPERATION        */
         LA    @10,248                                             0483
         ALR   @10,LCTPTR                                          0483
         MVC   QMPCMNC(1,@10),ONEREC                               0483
*       QMPOP=SWAREAD;              /* INDICATE A READ OPERATION     */
         MVC   QMPOP(1,@10),SWAREAD                                0484
*       QMPACL=ADDR(REMLST);        /* POINT TO REMOTE LIST   YM01566*/
         LA    @15,REMLST                                          0485
         STCM  @15,7,QMPACL(@10)                                   0485
*       DO WHILE REMRBA^=0;         /* PROCESS ALL DSENQ TABLES      */
         B     @DE00486                                            0486
@DL00486 DS    0H                                                  0487
*         RESPECIFY                                                0487
*           R1 RSTD;                                               0487
*         R1=ADDR(QMGR1);           /* GET ADDR OF THE QMPA          */
         LA    R1,QMGR1(,LCTPTR)                                   0488
*         CALL SWAMNGR;             /* READ IN THE DSENQ TABLE       */
         BAL   @14,SWAMNGR                                         0489
*         OUTREC=''B;               /* ZERO THE OUTPUT RECORD SPACE  */
         XC    OUTREC(176,WORKREG),OUTREC(WORKREG)                 0490
*         RESPECIFY                                                0491
*           R1 UNRSTD;                                             0491
*         DSNQFREE=LENGTH(OUTAREA); /* INITIALIZE TO LENGTH OF TABLE */
         MVC   DSNQFREE(2,WORKREG),@CH02521                        0492
*         RECADDR=ADDR(INPAREA);    /* SET UP PTR TO FIRST DATA SET
*                                      ENTRY                         */
         LA    @10,INPAREA(,WORKREG)                               0493
         ST    @10,RECADDR(,WORKREG)                               0493
*         SPACEPTR=ADDR(OUTAREA);   /* SET UP PTR TO PLACE TO PUT  0494
*                                      FIRST OUTPUT DATA SET ENTRY   */
         LA    @10,OUTAREA(,WORKREG)                               0494
         ST    @10,SPACEPTR(,WORKREG)                              0494
*         DO WHILE DSNLGTH^=0;      /* ELIMINATE DUPLICATES DATA SET
*                                      ENTRIES UNTIL ALL IN THE    0495
*                                      RECORD HAVE BEEN PROC- ESSED  */
         B     @DE00495                                            0495
@DL00495 DS    0H                                                  0496
*           DSNSTEP=SCTSNUMB;       /* PUT THE STEP NO. OF THE FIRST
*                                      STEP TO BE RUN IN THE       0496
*                                      PARAMETER LIST FOR IEFDSTBL-
*                                      THE STEP NO. CAN BE DIFFERENT
*                                      FROM 1 IF THE JOB IS BEING  0496
*                                      RESTARTED                     */
         L     @10,LCTSCTAD(,LCTPTR)                               0496
         MVC   DSNSTEP(1,WORKREG),SCTSNUMB(@10)                    0496
*           DSENQSVA=ICSVA;         /* PASS THE SWA VIRTUAL ADDRR OF
*                                      THE DSENQ TABLE               */
         MVC   DSENQSVA(3,WORKREG),ICSVA(WORKREG)                  0497
*           RESPECIFY                                              0498
*             R1 RSTD;                                             0498
*           R1=ADDR(STBLPARM);      /* PUT ADDR OF IEFDSTBL'S      0499
*                                      PARMLIST IN REG 1             */
         LA    R1,STBLPARM(,WORKREG)                               0499
*           RESPECIFY                                              0500
*             R1 UNRSTD;                                           0500
*           CALL IEFDSTBL;          /* GO TO ADD THE DATA SET ENTRY
*                                      TO THE TREE IF IT WAS NOT A 0501
*                                      DUPLICATE                     */
         L     @15,@CV00054                                        0501
         BALR  @14,@15                                             0501
*           RESPECIFY                                              0502
*             R15 RSTD;                                            0502
*           IF R15=0 THEN                                          0503
         LTR   R15,R15                                             0503
         BNZ   @RF00503                                            0503
*             DO;                   /* IF THE ENTRY WAS NOT A      0504
*                                      DUPLICATE,ADD IT TO THE DATA
*                                      SET ENQ TABLE TO BE USED BY 0504
*                                      UNALLOCATION                  */
*               RESPECIFY                                          0505
*                 R15 UNRSTD;                                      0505
*               DSNQFREE=DSNQFREE-DSNLGTH-3;/* CALCULATE NUMBER OF 0506
*                                      BYTES LEFT IN THE TABLE       */
         LA    @10,3                                               0506
         L     @15,RECADDR(,WORKREG)                               0506
         SLR   @14,@14                                             0506
         IC    @14,DSNLGTH(,@15)                                   0506
         LH    @09,DSNQFREE(,WORKREG)                              0506
         SLR   @09,@14                                             0506
         SLR   @09,@10                                             0506
         STH   @09,DSNQFREE(,WORKREG)                              0506
*               CHARSAV=CHARSAV+DSNLGTH;/* KEEP A CUMM COUNT OF THE
*                                      DATA SET LENGTHS              */
         L     @09,CHARSAV(,WORKREG)                               0507
         ALR   @09,@14                                             0507
         ST    @09,CHARSAV(,WORKREG)                               0507
*               DSNCT=DSNCT+1;      /* ADD ONE TO CUMM. DATA SET   0508
*                                      ENTRY COUNT                   */
         LA    @09,1                                               0508
         AH    @09,DSNCT(,WORKREG)                                 0508
         STH   @09,DSNCT(,WORKREG)                                 0508
*               OUTENTRY(1:DSNLGTH+3)=DSNENTRY;/* MOVE THE ENTRY TO
*                                      THE OUTPUT AREA               */
         L     @09,SPACEPTR(,WORKREG)                              0509
         LA    @08,2                                               0509
         ALR   @08,@14                                             0509
         EX    @08,@SM02711                                        0509
*               SPACEPTR=SPACEPTR+DSNLGTH+3;/* UPDATE OUTPUT AREA  0510
*                                      NEXT ENTRY PTR                */
         ALR   @09,@14                                             0510
         ALR   @09,@10                                             0510
         ST    @09,SPACEPTR(,WORKREG)                              0510
*             END;                                                 0511
*           RECADDR=RECADDR+DSNLGTH+3;/* UPDATE TO NEXT INPUT ENTRY  */
@RF00503 L     @10,RECADDR(,WORKREG)                               0512
         SLR   @15,@15                                             0512
         IC    @15,DSNLGTH(,@10)                                   0512
         ALR   @15,@10                                             0512
         AH    @15,@CH00321                                        0512
         ST    @15,RECADDR(,WORKREG)                               0512
*         END;                                                     0513
@DE00495 L     @10,RECADDR(,WORKREG)                               0513
         CLI   DSNLGTH(@10),0                                      0513
         BNE   @DL00495                                            0513
*         OLSVA=ILSVA;              /* ADDR OF NEXT TABLE            */
         MVC   OLSVA(3,WORKREG),ILSVA(WORKREG)                     0514
*         OCSVA=ICSVA;              /* PUT CURRENT SVA IN THE TABLE  */
         MVC   OCSVA(3,WORKREG),ICSVA(WORKREG)                     0515
*         DSNQID='0F'X;             /* DSNAME TABLE ID               */
         MVI   DSNQID(WORKREG),X'0F'                               0516
*         REMREAD=ADDR(OUTREC);     /* ADDR OF WHERE TO READ FROM    */
         LA    @10,OUTREC(,WORKREG)                                0517
         ST    @10,REMREAD                                         0517
*         REMRBA=OCSVA;             /* RBA OF WHERE TO WRITE THE   0518
*                                      TABLE                         */
         MVC   REMRBA(3),OCSVA(WORKREG)                            0518
*         QMPCMNC=ONEREC;           /* INDICATE WRITE ONE RECORD     */
         LA    @10,248                                             0519
         ALR   @10,LCTPTR                                          0519
         MVC   QMPCMNC(1,@10),ONEREC                               0519
*         QMPOP=SWAWRITE;           /* INDICATE A WRITE OPERATION    */
         MVC   QMPOP(1,@10),SWAWRITE                               0520
*         RESPECIFY                                                0521
*           R1 RSTD;                                               0521
*         R1=ADDR(QMGR1);           /* PUT ADDR OF QMPA IN R1        */
         LA    R1,QMGR1(,LCTPTR)                                   0522
*         CALL SWAMNGR;             /* WRITE THE TABLE TO SWA        */
         BAL   @14,SWAMNGR                                         0523
*         RESPECIFY                                                0524
*           R1 UNRSTD;                                             0524
*         REMREAD=ADDR(INPUTREC);   /* ADDR OF WHER SWA MGR IS TO  0525
*                                      READ THE NEXT DSNAME TABLE    */
         ST    WORKREG,REMREAD                                     0525
*         REMRBA=ILSVA;             /* RBA OF TABLE TO BE READ       */
         MVC   REMRBA(3),ILSVA(WORKREG)                            0526
*         QMPCMNC=ONEREC;           /* INDICATE READ ONE RECORD      */
         LA    @10,248                                             0527
         ALR   @10,LCTPTR                                          0527
         MVC   QMPCMNC(1,@10),ONEREC                               0527
*         QMPOP=SWAREAD;            /* INDICATE READ OPERATION       */
         MVC   QMPOP(1,@10),SWAREAD                                0528
*       END;                                                       0529
@DE00486 ICM   @10,7,REMRBA                                        0529
         BNZ   @DL00486                                            0529
*       RESPECIFY                                                  0530
*        (R0,                                                      0530
*         COREPTR) RSTD;                                           0530
*                                                                  0531
*       /*************************************************************/
*       /*                                                           */
*       /* THE FOLLOWING CODE GETS 12 BYTES OF CORE FOR EACH DSNAME  */
*       /* ENTRY, + ENOUGH CORE FOR THE LENGTH OF THE COMBINED       */
*       /* DSNAMES,+ 24 BYTES FOR A DSENQ LIST HEADER. IT INITIALIZES*/
*       /* THE HEADER WITH THE MAJOR NAME,BUILD A 4 WORD PARAMETER   */
*       /* LIST AND PASS CONTROL TO IEFSDLST TO BUILD THE DSENQ LIST */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0531
*       R0=(CHARSAV+24)+12*DSNCT;   /* LENGTH OF DSENQ LIST          */
         LA    R0,24                                               0531
         AL    R0,CHARSAV(,WORKREG)                                0531
         LH    @10,DSNCT(,WORKREG)                                 0531
         MH    @10,@CH01842                                        0531
         ALR   R0,@10                                              0531
*       R0=R0×COREPOOL;             /* PUT IN SP 255                 */
         O     R0,COREPOOL                                         0532
*       LCTPARM2=R0;                /* SAVE SUBPOOL AND LGTH IN LCT  */
         ST    R0,LCTPARM2(,LCTPTR)                                0533
*       GEN(GETMAIN R,LV=(0));      /* GET CORE FOR THE LIST         */
         GETMAIN R,LV=(0)
*       TREEADDR=TREEPTR;           /* PUT ADDR OF DSN TREE IN THE 0535
*                                      PARMLIST                      */
         MVC   TREEADDR(4,WORKREG),TREEPTR(WORKREG)                0535
*       LCTPARM1=COREPTR;           /* PUT ADDR OF ENQ LIST IN THE 0536
*                                      LCT                           */
         ST    COREPTR,LCTPARM1(,LCTPTR)                           0536
*       LISTADDR=COREPTR;           /* PUT ADDR OF MAJOR NAME IN THE
*                                      PARM                          */
         ST    COREPTR,LISTADDR(,WORKREG)                          0537
*       MAJORNM=SYSDSN;             /* PUT MAJORNAME IN ENQ LIST     */
         MVC   MAJORNM(8,COREPTR),SYSDSN                           0538
*       BUILDADR=LISTADDR+24;       /* ADDR OF WHERE TO BUILD THE  0539
*                                      FIRST ENTRY                   */
         L     @10,LISTADDR(,WORKREG)                              0539
         AH    @10,@CH00100                                        0539
         ST    @10,BUILDADR(,WORKREG)                              0539
*       DSCOUNT=DSNCT;              /* PUT NO. OF DATA SET ENTRIES IN
*                                      THE PARMLIST                  */
         LH    @10,DSNCT(,WORKREG)                                 0540
         ST    @10,DSCOUNT(,WORKREG)                               0540
*       COREPTR=ADDR(SLSTPARM);     /* PUT ADDR OF PARMLIST IN REG 1 */
         LA    COREPTR,SLSTPARM(,WORKREG)                          0541
*       CALL IEFDSLST;              /* GO BUILD THE DSENQ LIST       */
         L     @15,@CV00055                                        0542
         BALR  @14,@15                                             0542
*       IF DSNCT=0 THEN                                            0543
         ICM   @10,3,DSNCT(WORKREG)                                0543
         BNZ   @RF00543                                            0543
*         DO;                       /* IF THERE WERE NO DATA SETS TO
*                                      ADD TO THE DSENQ LIST, FREE 0544
*                                      THE DSENQ LIST AND CLEAR IT 0544
*                                      PTR ,SUBPOOL # AND LENGTH IN
*                                      THE LCT                       */
*           COREPTR=LCTPARM1;       /* GET ADDR OF DSENQ LIST        */
         L     COREPTR,LCTPARM1(,LCTPTR)                           0545
*           R0=LCTPARM2;            /* GET LENGTH AND SUBPOOL #      */
         L     R0,LCTPARM2(,LCTPTR)                                0546
*           GEN(FREEMAIN R,LV=(0),A=(1));/* FREE THE DSENQ LIST      */
         FREEMAIN R,LV=(0),A=(1)
*           LCTPARM1=0;             /* CLEAR ITS PTR IN THE LCT      */
         SLR   @10,@10                                             0548
         ST    @10,LCTPARM1(,LCTPTR)                               0548
*           LCTPARM2=0;             /* CLEAR IT SUBPOOL # AND LENGTH
*                                      IN THE LCT                    */
         ST    @10,LCTPARM2(,LCTPTR)                               0549
*         END;                                                     0550
*       R0=LENGTH(DSTABLE);         /* GET LENGTH OF THE WORK AREA   */
@RF00543 LA    R0,378                                              0551
*       COREPTR=WORKREG;            /* GET ADDR OF THE WORKAREA      */
         LR    COREPTR,WORKREG                                     0552
*       GEN(FREEMAIN R,LV=(0),A=(1));/* FREE THE WORK AREA           */
         FREEMAIN R,LV=(0),A=(1)
*       RFY                                                        0554
*        (R0,                                                      0554
*         WORKREG) UNRSTD;          /*                         Y02651*/
*     END;                                                         0555
*   RESPECIFY                                                      0556
*    (RTNREG,                                                      0556
*     R15) RSTD;                                                   0556
@RF00471 DS    0H                                                  0557
*   RTNREG=ADDR(RTNPT2);            /* SET RETURN POINT FOR DUMMY  0557
*                                      RETURN                        */
         LA    RTNREG,RTNPT2                                       0557
*   RETURN;                         /* DO DUMMY RETURN TO FREE CORE
*                                      GOTTEN BY THE PLS2 COMPILER   */
         B     @EL00001                                            0558
*RTNPT2:                                                           0559
*   R15=ADDR(IEFSD101);             /* GET ADDR OF IEFSD101          */
RTNPT2   L     R15,@CV00053                                        0559
*   COREPTR=LCTPTR;                 /* PUT THE LCT ADDR IN REG 1     */
         LR    COREPTR,LCTPTR                                      0560
*   GEN(BR R15);                    /* PASS CONTROL TO IEFSD101      */
         BR R15
*   RESPECIFY                                                      0562
*    (COREPTR,                                                     0562
*     RTNREG,                                                      0562
*     R15) UNRSTD;                  /*                         Y02651*/
*SWAMNGR:                                                          0563
*   PROC;                                                          0563
         B     @EL00001                                            0563
SWAMNGR  STM   @14,@12,@SA00002                                    0563
*   RFY                                                            0564
*     R15 RSTD;                     /*                         Y02651*/
*/*      06/30/72  R2                                                */
*                                                                  0565
*   DCL                                                            0565
*     SWAMGPTR REG(15) PTR(31);                                    0565
*   SWAMGPTR=CVTJESCT->JESQMGR;                                    0566
         L     @10,CVTPTR                                          0566
         L     @10,CVTJESCT(,@10)                                  0566
         L     SWAMGPTR,JESQMGR(,@10)                              0566
*   GEN(BALR 14,15);                /* GO TO SWA MANAGER             */
         BALR 14,15
*   END;                                                           0568
@EL00002 DS    0H                                                  0568
@EF00002 DS    0H                                                  0568
@ER00002 LM    @14,@12,@SA00002                                    0568
         BR    @14                                                 0568
*REENQJOB:                                                         0569
*   PROC;                           /*                         Y02651*/
*                                                                  0569
REENQJOB STM   @14,@12,@SA00003                                    0569
*   /*****************************************************************/
*   /*                                                               */
*   /* ENQUEUE THE JOB ON THE HOLD QUEUE, FREE THE JOB'S CONTROL     */
*   /* BLOCKS, AND PROCESS RETURN CODES FROM SSREQ.            Y02651*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0570
*   RESPECIFY                                                      0570
*    (R0,                                                          0570
*     R1) RSTD;                     /*                         Y02651*/
*   R0=LENGTH(SSRQ);                /* LENGTH OF RE-ENQ SSOB       0571
*                                      FUNCTIONAL                    */
         LA    R0,8                                                0571
*   R0=R0×COREPOOL;                 /* PUT IN THE SUBPOOL NO.        */
         O     R0,COREPOOL                                         0572
*   GEN(GETMAIN R,LV=(0));          /* GET CORE FOR THE RE-ENQ     0573
*                                      FUNCTIONAL                    */
         GETMAIN R,LV=(0)
*   SSOBINDV=R1;                    /* PUT ADDR OF FUNCTIONAL IN SSOB
*                                      HDR                           */
         L     @14,LCTSSOBA(,LCTPTR)                               0574
         ST    R1,SSOBINDV(,@14)                                   0574
*   SSRQ=''B;                       /* ZERO THE RE-ENQ FUNCTIONAL  0575
*                                      SECTION                       */
         L     @10,LCTSSOBA(,LCTPTR)                               0575
         L     @10,SSOBINDV(,@10)                                  0575
         XC    SSRQ(8,@10),SSRQ(@10)                               0575
*   SSRQLEN=LENGTH(SSRQ);           /* LENGTH OF THE FUNCTIONAL    0576
*                                      SECTION                       */
         MVC   SSRQLEN(2,@10),@CH00062                             0576
*   SSRQSTEP=SCTSNUMB;              /* PUT IN THE STEP NO.           */
         L     @03,LCTSCTAD(,LCTPTR)                               0577
         SLR   @09,@09                                             0577
         IC    @09,SCTSNUMB(,@03)                                  0577
         STH   @09,SSRQSTEP(,@10)                                  0577
*   SSRQHOLD='1'B;                  /* INDICATE THE JOB IS TO BE PUT
*                                      ON THE HOLD-0                 */
         OI    SSRQHOLD(@10),B'00010000'                           0578
*   SSOBFUNC=SSOBRENQ;              /* SET THE RE-ENQ FUNCTION CODE  */
         MVC   SSOBFUNC(2,@14),@CH01879                            0579
*   SSOBPNTR=LCTSSOBA;              /* PUT THE ADDR OF THE SSOB IN 0580
*                                      THE PARM LIST                 */
         ST    @14,SSOBPNTR                                        0580
*   ENDLIST='1'B;                   /* SET END OF LIST INDICATOR     */
         OI    ENDLIST,B'10000000'                                 0581
*   R1=ADDR(PARMLST);               /* PUT THE PARMLIST ADDR IN REG 1*/
         LA    R1,PARMLST                                          0582
*   CALL SSREQ;                     /* GO ENQ THE JOB ON THE HOLD Q  */
         L     @10,CVTPTR                                          0583
         L     @10,CVTJESCT(,@10)                                  0583
         L     @15,JESSSREQ(,@10)                                  0583
         BALR  @14,@15                                             0583
*   RESPECIFY                                                      0584
*     CODEREGG RSTD;                                               0584
*   CODESAVE=CODEREGG;              /* SAVE RETURN CODE              */
         ST    CODEREGG,CODESAVE                                   0585
*   SSIBJBID=''B;                   /* SET JOBID TO 0                */
         L     @14,LCTSSOBA(,LCTPTR)                               0586
         L     @10,SSOBSSIB(,@14)                                  0586
         XC    SSIBJBID(8,@10),SSIBJBID(@10)                       0586
*   R0=LENGTH(SSRQ);                /* LENGTH OF THE FUNCTIONAL    0587
*                                      SECTION                       */
         LA    R0,8                                                0587
*   R0=R0×COREPOOL;                 /* PUT IN THE SUBPOOL NO.        */
         O     R0,COREPOOL                                         0588
*   R1=SSOBINDV;                    /* GET THE FUNCTIONAL SECTION  0589
*                                      ADDR                          */
         L     R1,SSOBINDV(,@14)                                   0589
*   GEN(FREEMAIN R,LV=(0),A=(1));   /* FREE THE FUNCTIONAL SECTION   */
         FREEMAIN R,LV=(0),A=(1)
*   SSOBINDV=0;                     /* CLEAR THE PTR IN THE SSOB     */
*                                                                  0591
         SLR   @14,@14                                             0591
         L     @10,LCTSSOBA(,LCTPTR)                               0591
         ST    @14,SSOBINDV(,@10)                                  0591
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION OF CODE FREES ALL CONTROL BLOCKS ASSOCIATED WITH */
*   /* THIS JOB                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0592
*   COREPTR=LCTJSCB;                /* ADDRESS OF THE JSCB           */
         L     COREPTR,LCTJSCB(,LCTPTR)                            0592
*   JSCBACT=TCBJSCB;                /* MAKE INIT'S JSCB THE CURRENT
*                                      JSCB                          */
         L     @10,LCTTCBAD(,LCTPTR)                               0593
         L     @10,TCBJSCB(,@10)                                   0593
         ST    @10,JSCBACT(,@10)                                   0593
*   LCTJSCB=0;                      /* SET JSCB PTR TO ZERO          */
         ST    @14,LCTJSCB(,LCTPTR)                                0594
*   GEN( FREEJSCB SYSTEM=AOS);      /* FREE THE JSCB                 */
          FREEJSCB SYSTEM=AOS
*   LCTSCTAD=0;                     /* SET SCT PTR TO ZERO           */
         SLR   @14,@14                                             0596
         ST    @14,LCTSCTAD(,LCTPTR)                               0596
*   LCTSCTVA=0;                     /* CLEAR SCT SVA IN LCT          */
         STCM  @14,7,LCTSCTVA(LCTPTR)                              0597
*   LCTJCTAD=0;                     /* SET JCT PTR TO ZERO           */
         ST    @14,LCTJCTAD(,LCTPTR)                               0598
*   LCTJCTVA=0;                     /* CLEAR JCT SVA IN LCT          */
*                                                                  0599
         STCM  @14,7,LCTJCTVA(LCTPTR)                              0599
*   /*****************************************************************/
*   /*                                                               */
*   /* DELETE BLOCKS ON SWA                                    Y02651*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0600
*   QMPOP=QMDELETE;                 /*                         Y02651*/
         MVI   QMPOP+248(LCTPTR),B'00001000'                       0600
*   R1=ADDR(QMGR1);                 /*                         Y02651*/
         LA    R1,QMGR1(,LCTPTR)                                   0601
*   CALL SWAMNGR;                   /*                         Y02651*/
         BAL   @14,SWAMNGR                                         0602
*   CHDL='1'B;                      /* SET THE DELETE INDICATOR      */
*   CHAD='0'B;                      /* TURN OFF THE ADDITION       0604
*                                      INDICATOR                     */
*   CHFC='1'B;                      /* INDICATE TO FREE THE CORE     */
         L     @14,LCTQDRTY(,LCTPTR)                               0605
         OI    CHDL(@14),B'00000110'                               0605
         NI    CHAD(@14),B'11110111'                               0605
*   R1=LCTQDRTY;                    /* ADDR OF THE CSCB              */
         LR    R1,@14                                              0606
*   LCTQDRTY=0;                     /* CLEAR CSCB PTR IN LCT         */
         SLR   @14,@14                                             0607
         ST    @14,LCTQDRTY(,LCTPTR)                               0607
*   ASCBJBNI=0;                     /* SET ASCB PTR TO JOBNAME TO 0  */
         L     @10,LCTASCBA(,LCTPTR)                               0608
         ST    @14,ASCBJBNI(,@10)                                  0608
*   GEN(MGCR (1),CHAIN);            /* FREE THE CSCB                 */
         MGCR (1),CHAIN
*   IF CODESAVE^=0 THEN                                            0610
         ICM   @14,15,CODESAVE                                     0610
         BZ    @RF00610                                            0610
*     DO;                           /* IF AN ERROR WAS RETURNED FROM
*                                      THE SUBSYSTEM INTERFACE,    0611
*                                      ABEND, INDICATING SUBSYSTEM 0611
*                                      INTERFACE ERROR               */
*       R1=ABENCODE;                /* PUT SSI ABEND CODE IN REG 1   */
         L     R1,ABENCODE                                         0612
*       GEN(ABEND (1),,,SYSTEM);    /* ABEND                         */
         ABEND (1),,,SYSTEM
*     END;                                                         0614
*   IF SSOBRETN^=0 THEN                                            0615
@RF00610 L     @14,LCTSSOBA(,LCTPTR)                               0615
         L     @14,SSOBRETN(,@14)                                  0615
         LTR   @14,@14                                             0615
         BZ    @RF00615                                            0615
*     DO;                           /* IF AN ERROR WAS RETURNED FROM
*                                      A SUBSYSTEM, PUT THE ERROR  0616
*                                      CODE IN THE EXIT LIST AND   0616
*                                      RETURN TO THE CALLER          */
*       IELRTNCD=SSOBRETN;          /* PUT THE ERROR CODE IN THE EXIT
*                                      LIST                          */
         L     @10,LCTENTR(,LCTPTR)                                0617
         L     @10,IELEXIT(,@10)                                   0617
         STC   @14,IELRTNCD(,@10)                                  0617
*       IELRCXT='06'X;              /* INDICATE SUBSYSTEM ERROR      */
         MVI   IELRCXT(@10),X'06'                                  0618
*       LCTSTOP='1'B;               /* SET STOP INDICATOR            */
         OI    LCTSTOP(LCTPTR),B'00000100'                         0619
*     END;                                                         0620
*   LOOPSWCH=ON;                    /* SET LOOP INDICATOR ON         */
@RF00615 MVC   LOOPSWCH(4),ON                                      0621
*   RESPECIFY                                                      0622
*    (R0,                                                          0622
*     R1,                                                          0622
*     CODEREGG) UNRSTD;                                            0622
*   END;                                                           0623
@EL00003 DS    0H                                                  0623
@EF00003 DS    0H                                                  0623
@ER00003 LM    @14,@12,@SA00003                                    0623
         BR    @14                                                 0623
*   END IEFSD061                                                   0624
*                                                                  0624
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IEFALLCT)                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IEZJSCB )                                       */
*/*%INCLUDE SYSLIB  (IEFTIOT1)                                       */
*/*%INCLUDE SYSLIB  (IEECHAIN)                                       */
*/*%INCLUDE SYSLIB  (IEFJSSOB)                                       */
*/*%INCLUDE SYSLIB  (IEFJSSIB)                                       */
*/*%INCLUDE SYSLIB  (IEFZB622)                                       */
*/*%INCLUDE SYSLIB  (IEFASCTB)                                       */
*/*%INCLUDE SYSLIB  (IEFJESCT)                                       */
*/*%INCLUDE SYSLIB  (IEFAJCTB)                                       */
*/*%INCLUDE SYSLIB  (IEZIELDF)                                       */
*/*%INCLUDE SYSLIB  (IEZIEL  )                                       */
*/*%INCLUDE SYSLIB  (IEFQMNGR)                                       */
*/*%INCLUDE SYSLIB  (IEFZB610)                                       */
*/*%INCLUDE SYSLIB  (IHACSD  )                                       */
*/*%INCLUDE SYSLIB  (IEFZB505)                                       */
*/*%INCLUDE SYSLIB  (IEEBASEA)                                       */
*/*%INCLUDE SYSLIB  (IEFQMREQ)                                       */
*                                                                  0624
*       ;                                                          0624
@DATA    DS    0H
@CH00091 DC    H'1'
@CH00321 DC    H'3'
@CH00084 DC    H'4'
@CH01142 DC    H'5'
@CH00062 DC    H'8'
@CH01842 DC    H'12'
@CH01879 DC    H'13'
@CH01845 DC    H'20'
@CH00100 DC    H'24'
@CH00037 DC    H'31'
@CH02696 DC    H'58'
@CH02521 DC    H'162'
@SM02707 MVC   MSGAREA(0,WORKREG),MSGAREA1(MSGPTR)
@SM02711 MVC   OUTENTRY(0,@09),DSNENTRY(@15)
@DATD    DSECT
         DS    0F
@PC00001 DS    1F
@SA00003 DS    15F
@SA00002 DS    15F
@AL00001 DS    4A
IEFSD061 CSECT
         DS    0F
@CF00052 DC    F'16'
@CH00052 EQU   @CF00052+2
@CF02695 DC    F'512'
@CF02709 DC    F'-16'
@CF02710 DC    F'-6'
@CF02681 DC    XL4'0000FFFF'
@CF02682 DC    XL4'00008000'
@DATD    DSECT
         DS    0D
SWEPAPTR DS    A
SUBPOOOL DS    FL4
         ORG   SUBPOOOL
SUBPNO   DS    BL1
CORELNG  DS    FL3
         ORG   SUBPOOOL+4
PARMLST  DS    FL4
         ORG   PARMLST
SSOBPNTR DS    AL4
         ORG   SSOBPNTR
ENDLIST  DS    BL1
@NM00219 EQU   SSOBPNTR+0
         ORG   PARMLST+4
LOOPSWCH DS    F
CODESAVE DS    A
KEYSWCH  DS    F
NUMMOVED DS    H
PERFGRP  DS    AL1
         DS    CL1
REMLST   DS    CL7
         ORG   REMLST
REMREAD  DS    FL4
REMRBA   DS    FL3
         ORG   REMLST+7
JOBSNAME DS    CL8
         DS    CL1
MSGCTO   DS    CL76
         ORG   MSGCTO
MSGCSIZE DS    FL2
@NM00224 DS    CL10
MSGCJOB  DS    CL8
@NM00225 DS    CL12
MSGCLIST DS    CL31
MSGCEND  DS    CL13
         ORG   MSGCTO+76
MSGDTO   DS    CL78
         ORG   MSGDTO
MSGDSIZE DS    FL2
@NM00226 DS    CL10
MSGDJOB  DS    CL8
@NM00227 DS    CL14
MSGDLIST DS    CL31
MSGDEND  DS    CL13
         ORG   MSGDTO+78
         DS    CL2
EPA1     DS    CL16
IEFSD061 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00053 DC    V(IEFSD101)
@CV00054 DC    V(IEFDSTBL)
@CV00055 DC    V(IEFDSLST)
@CV00056 DC    V(IEFSD064)
@CV00057 DC    V(IEFSDPPT)
@CV00058 DC    V(IEFICPUA)
@CV00059 DC    V(IEFIMASK)
         DS    0D
SUBPOOL1 DC    XL4'FD000000'
COREPOOL DC    XL4'FF000000'
SUBPOOL2 DC    XL4'F5000000'
ON       DC    XL4'00000001'
OFFF     DC    XL4'00000000'
ABENCODE DC    XL4'000000BA'
NUMBITS  DC    H'16'
@CC02678 DC    C'RL'
@CB02248 DC    X'FF00000000000000'
@CB02629 DC    X'FFFF'
BLANKS   DC    CL4' '
SSOBIDD  DC    CL4'SSOB'
START    DC    B'00000100'
ONEREC   DC    B'00000001'
SWAREAD  DC    B'00000100'
SWAWRITE DC    B'00000011'
IEFSD061 CSECT
IEFSD61A  ENQ  (IEFSQCBS,IEFQ6QCB,E,2,SYSTEM),MF=L
IEFSQCBS   DC  C'SYSIEFSD'
SYSDSN   DC   CL8'SYSDSN'
IEFQ6QCB  DC  C'Q6'
IEFSD061 CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEFSD061 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
BYTESMVD EQU   @06
PPTINDEX EQU   @06
SSCDSAVE EQU   @06
EXITSAVE EQU   @06
MSGPTR   EQU   @06
R0       EQU   @00
R1       EQU   @01
COREPTR  EQU   @01
LCTPTR   EQU   @02
RTNSAVE  EQU   @02
WORKREG  EQU   @03
IELPTR   EQU   @03
EXITPTR  EQU   @04
PARMPTR  EQU   @05
RTNREG   EQU   @14
R15      EQU   @15
CODEREGG EQU   @15
SAVEREGS EQU   @13
SWAMGPTR EQU   @15
R14      EQU   @14
CVTPTR   EQU   16
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTMSER  EQU   CVTMAP+148
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTJESCT EQU   CVTMAP+296
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
LCT      EQU   0
LCTQDRTY EQU   LCT
LCTSRTAD EQU   LCT+4
LCTTCBAD EQU   LCT+8
LCTQENTY EQU   LCT+12
@NM00009 EQU   LCTQENTY
LCTJCTAD EQU   LCT+16
LCTSCTAD EQU   LCT+20
LCTSCTDA EQU   LCT+24
LCTWORKA EQU   LCTSCTDA
LCTSCTVA EQU   LCTWORKA
LCTPSPAR EQU   LCT+28
LCTERROR EQU   LCT+32
LCTERR   EQU   LCTERROR
LCTPARM1 EQU   LCT+36
LCTPARM2 EQU   LCT+40
LCTCMCBA EQU   LCT+52
LCTNSPAD EQU   LCT+56
LCTJFCBH EQU   LCT+57
LCTSNUMB EQU   LCT+58
LCTSMBAD EQU   LCT+60
LCTCOMCD EQU   LCT+68
LCTRTRN  EQU   LCT+72
LCTSREG  EQU   LCTRTRN
@NM00036 EQU   LCT+76
LCTINTSW EQU   @NM00036
LCTSTOP  EQU   LCTINTSW
LCTPUBYT EQU   @NM00036+1
LCTTMWRK EQU   LCT+80
LCTTJTU4 EQU   LCTTMWRK
LCTTSTL4 EQU   LCTTMWRK+4
LCTTSTR4 EQU   LCTTMWRK+8
LCTSMF   EQU   LCTTSTR4
LCTTMBYT EQU   LCTSMF
LCTTSTU4 EQU   LCTTMWRK+12
LCTJOBLB EQU   LCT+96
LCTATLST EQU   LCT+100
REGSAVE  EQU   LCT+104
QMGR1    EQU   LCT+248
LCTASCBA EQU   LCT+320
LCTECBAD EQU   LCT+328
ECBLIST  EQU   LCTECBAD
LCTIDENT EQU   LCT+332
LCTSPIL  EQU   LCTIDENT+4
LCTALCFG EQU   LCTSPIL+2
LCTTSRB4 EQU   LCT+348
LCTENTR  EQU   LCT+352
LCTEXIT  EQU   LCTENTR
LCTOPSW1 EQU   LCTEXIT
LCTONEJF EQU   LCTOPSW1
@NM00066 EQU   LCT+356
LCTOPSW2 EQU   @NM00066
LCTJSCB  EQU   LCT+360
LCTOPSW3 EQU   LCTJSCB
LCTSTEPL EQU   LCT+400
LCTSSOBA EQU   LCT+404
LCTJCTDA EQU   LCT+408
LCTJCTVA EQU   LCTJCTDA
LCTSTATA EQU   LCT+416
LCTSTATB EQU   LCT+417
LCTRFB   EQU   LCT+418
@NM00078 EQU   LCT+420
LCTINTS2 EQU   @NM00078+1
LCTIMSG  EQU   LCT+432
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBRSM  EQU   ASCB+52
ASCBRSMF EQU   ASCBRSM
ASCBFW1  EQU   ASCB+100
ASCBAFFN EQU   ASCBFW1
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBJBNI EQU   ASCB+172
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBTIO   EQU   TCB+12
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBXSCT  EQU   TCB+240
TCBXSCT1 EQU   TCBXSCT
TCBFOE   EQU   TCB+244
TCBSTAWA EQU   TCB+252
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
IEZJSCB  EQU   0
JSCBSEC1 EQU   IEZJSCB+188
JSCHPCE  EQU   JSCBSEC1+4
JSCBDCB  EQU   JSCBSEC1+36
JSCBOPTS EQU   JSCBSEC1+48
JSCBSWT1 EQU   JSCBSEC1+55
JSCBWTP  EQU   JSCBSEC1+64
JSCBWTFG EQU   JSCBWTP
JSCBCSCB EQU   JSCBSEC1+68
JSCBEND1 EQU   IEZJSCB+260
TIOT1    EQU   0
TIOCSTEP EQU   TIOT1+8
CHAIN    EQU   0
CHFLG    EQU   CHAIN+4
CHVCD    EQU   CHFLG
CHSZE    EQU   CHFLG+1
CHSTS    EQU   CHFLG+2
CHAD     EQU   CHSTS
CHDL     EQU   CHSTS
CHFC     EQU   CHSTS
CHACT    EQU   CHFLG+3
CHKEY    EQU   CHAIN+8
CHPARM   EQU   CHKEY
CHCLS    EQU   CHAIN+16
CHPKE    EQU   CHAIN+28
CHTRKID  EQU   CHPKE
CHUCMP   EQU   CHAIN+29
CHTJID   EQU   CHAIN+30
CHPROCSN EQU   CHAIN+32
CHACT1   EQU   CHPROCSN+3
CHASM    EQU   CHAIN+40
CHCIBP   EQU   CHASM+4
CHRGNSZ  EQU   CHASM+8
CHSTEP   EQU   CHASM+24
CHSWT    EQU   CHSTEP
CHSHORT  EQU   CHASM+32
SSOB     EQU   0
SSOBID   EQU   SSOB
SSOBLEN  EQU   SSOB+4
SSOBFUNC EQU   SSOB+6
SSOBSSIB EQU   SSOB+8
SSOBRETN EQU   SSOB+12
SSOBINDV EQU   SSOB+16
SSJS     EQU   0
SSJSLEN  EQU   SSJS
SSJSFLG1 EQU   SSJS+6
SSJSLCT  EQU   SSJS+8
SSJSSERR EQU   SSJS+32
SSJSPASS EQU   SSJS+40
SSJSPAS2 EQU   SSJS+49
SSRQ     EQU   0
SSRQLEN  EQU   SSRQ
SSRQSTEP EQU   SSRQ+4
SSRQFLG1 EQU   SSRQ+6
SSRQHOLD EQU   SSRQFLG1
SSIB     EQU   0
SSIBFLG1 EQU   SSIB+6
SSIBJBID EQU   SSIB+12
STEPL    EQU   0
@NM00103 EQU   STEPL+8
STEFLAGS EQU   @NM00103
STERETRY EQU   STEFLAGS
STETJMR  EQU   STEFLAGS
INSMSCT  EQU   0
SCTSSTAT EQU   INSMSCT+4
SCTSNUMB EQU   INSMSCT+64
SCTSTYPE EQU   INSMSCT+67
SCTSDPTY EQU   INSMSCT+94
SCTFSTEP EQU   SCTSDPTY
SCTSTAT2 EQU   INSMSCT+104
SCTBCT   EQU   SCTSTAT2
SCTPGMNM EQU   INSMSCT+108
SCTPRFMF EQU   INSMSCT+116
SCTCDENT EQU   INSMSCT+118
SCTSTEND EQU   INSMSCT+172
@NM00125 EQU   0
SCTABCND EQU   @NM00125
JESCT    EQU   0
JESWAA   EQU   JESCT+8
JESQMGR  EQU   JESCT+12
JESSSREQ EQU   JESCT+20
JESALLOC EQU   JESCT+32
JESUNALC EQU   JESCT+36
JESCATL  EQU   JESCT+40
SWAMGR   EQU   0
SSREQ    EQU   0
INJMJCT  EQU   0
JCTJSRNO EQU   INJMJCT+4
JCTJSTAT EQU   INJMJCT+5
INCMSTS  EQU   JCTJSTAT
INDMCTLG EQU   JCTJSTAT
JCTJBYTE EQU   INJMJCT+7
JCTJMGLV EQU   JCTJBYTE
JCTJNAME EQU   INJMJCT+8
JCTCCODE EQU   INJMJCT+54
JCTRSW1  EQU   INJMJCT+86
JCTWARMS EQU   JCTRSW1
JCTRSW2  EQU   INJMJCT+87
JCTDETDA EQU   INJMJCT+88
JCTJSB   EQU   INJMJCT+111
JCTSSTR  EQU   INJMJCT+112
JCTSTAT2 EQU   INJMJCT+116
JCTADSPC EQU   JCTSTAT2
IEFAACTB EQU   0
IEL      EQU   0
IELLIST  EQU   IEL
IELOPLST EQU   IELLIST+8
IELEXIT  EQU   IELLIST+20
IELLAST  EQU   IELEXIT
IELOPTS  EQU   0
IELOPSW1 EQU   IELOPTS+2
IELOPSW2 EQU   IELOPTS+3
IELOPSW3 EQU   IELOPTS+5
IELEXITS EQU   0
IELEXHDR EQU   IELEXITS
IELXTLEN EQU   IELEXHDR
IELRTNCD EQU   IELEXHDR+2
IELRCXT  EQU   IELEXHDR+3
RTNEXT   EQU   IELEXITS+8
RTNEXLK  EQU   RTNEXT
RTNEXID  EQU   RTNEXT+1
RTNEXNM  EQU   RTNEXT+2
RTNEXAD  EQU   RTNEXNM+2
QMPA     EQU   0
QMNAM    EQU   QMPA
QMPOP    EQU   QMPA+8
QMSTA    EQU   QMPA+16
QMPCL    EQU   QMPA+32
QMPCMNC  EQU   QMPCL
QMPACL   EQU   QMPCL+1
SWAQMPA  EQU   0
PPT      EQU   0
PPTNAME  EQU   PPT
PPTBYTE1 EQU   PPT+8
PPTCPUA  EQU   PPT+10
PPTFLGS  EQU   PPT+12
PPTPUBYT EQU   PPTFLGS
CSD      EQU   0
CSDCPUJS EQU   CSD+4
CSDCPUAL EQU   CSD+8
CSDSCWRD EQU   CSD+12
CSDSCFL1 EQU   CSDSCWRD
CSDSCFL2 EQU   CSDSCWRD+1
CSDSCFL3 EQU   CSDSCWRD+2
CSDSCFL4 EQU   CSDSCWRD+3
CSDFLAGS EQU   CSD+23
SWAEPA   EQU   0
SWBLKPTR EQU   SWAEPA
SWVAFW   EQU   SWAEPA+4
SWVA     EQU   SWVAFW
BASE     EQU   0
@NM00167 EQU   BASE+13
BALGSTAT EQU   BASE+24
BALOG    EQU   BALGSTAT+4
BASFL    EQU   BASE+36
BARSW    EQU   BASFL
BAPKES   EQU   BASE+40
MSLOGST  EQU   BASE+46
BASPBYTE EQU   BASE+47
BAMONITR EQU   BASE+56
@NM00189 EQU   BASE+104
MSLGCLOZ EQU   BASE+108
MSCLOSSW EQU   MSLGCLOZ
MSLGWLOG EQU   BASE+112
MSWLOGSW EQU   MSLGWLOG
MSLGWTR  EQU   BASE+116
MSWTRSW  EQU   MSLGWTR
MSLGSTRT EQU   BASE+120
MSSTRTSW EQU   MSLGSTRT
MS1BASEX EQU   BASE+136
BASES01  EQU   0
MSNTAL   EQU   BASES01
MSSSB    EQU   BASES01+1
MSBTN    EQU   MSSSB
MSPFG    EQU   BASES01+2
MSECBFL  EQU   BASES01+3
MSTUS    EQU   BASES01+4
MSSSA    EQU   MSTUS
MSINLSW  EQU   MSSSA
MSREOF   EQU   MSSSA
MSNWP    EQU   MSSSA
MSFHF    EQU   BASES01+5
DSTABLE  EQU   0
INPUTREC EQU   DSTABLE
ICSVA    EQU   INPUTREC
ILSVA    EQU   INPUTREC+4
INPAREA  EQU   INPUTREC+14
OUTREC   EQU   DSTABLE+176
OCSVA    EQU   OUTREC
DSNQID   EQU   OUTREC+3
OLSVA    EQU   OUTREC+4
DSNQFREE EQU   OUTREC+12
OUTAREA  EQU   OUTREC+14
STBLPARM EQU   DSTABLE+352
DSENQSVA EQU   STBLPARM+1
RECADDR  EQU   STBLPARM+4
TREEPTR  EQU   STBLPARM+8
DSNSTEP  EQU   STBLPARM+15
SPACEPTR EQU   DSTABLE+368
DATASAVE EQU   DSTABLE+372
CHARSAV  EQU   DATASAVE
DSNCT    EQU   DATASAVE+4
DSNENTRY EQU   0
DSNLGTH  EQU   DSNENTRY+2
MAJORNM  EQU   0
MSGAREA1 EQU   0
MSGRTNHD EQU   0
MSGLGTH1 EQU   MSGRTNHD+1
DISPL1   EQU   MSGRTNHD+2
MSGLGTH2 EQU   MSGRTNHD+5
DISPL2   EQU   MSGRTNHD+6
@NM00215 EQU   MSGRTNHD+44
DISPLC   EQU   @NM00215+2
@NM00217 EQU   MSGRTNHD+48
DISPLD   EQU   @NM00217+2
IEFPARM  EQU   0
LCTAD    EQU   IEFPARM
JCTAD    EQU   IEFPARM+4
SCTAD    EQU   IEFPARM+8
SUPVLIST EQU   0
RLISTPTR EQU   SUPVLIST
EXITNAME EQU   SUPVLIST+8
PADBLANK EQU   SUPVLIST+14
MSGAREA  EQU   0
JOBNAME1 EQU   MSGAREA+36
JOBNAME2 EQU   JOBNAME1+6
OUTENTRY EQU   0
MSGCFROM EQU   0
MSGDFROM EQU   0
IEFAB4F5 EQU   0
IEFBB410 EQU   0
IEFW21SD EQU   0
INDMDSNT EQU   0
PARMMS   EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTCSD   EQU   CVTS01+312
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
JSCBSEC2 EQU   JSCBEND1
JSCBSEC3 EQU   JSCBEND1
JSCBJCT  EQU   JSCBSEC3
JSCBJCTA EQU   JSCBJCT+1
JSCBASID EQU   JSCBSEC3+8
JSCBFBYT EQU   JSCBSEC3+10
JSCBJNL  EQU   JSCBSEC3+28
JSCBJJSB EQU   JSCBJNL
JSCBSUB  EQU   JSCBSEC3+40
JSCSCT   EQU   JSCBSEC3+68
JSCBSWSP EQU   JSCBSEC3+87
JSCBACT  EQU   JSCBSEC3+88
JSCRSV45 EQU   JSCBSEC3+112
JSCRSV46 EQU   JSCRSV45
JSCRSV47 EQU   JSCRSV45+2
TIOENTRY EQU   TIOT1+24
TIOESTTA EQU   TIOENTRY+1
TIOERLOC EQU   TIOENTRY+2
TIOELINK EQU   TIOERLOC+1
TIOESYOT EQU   TIOELINK
TIOESTTC EQU   TIOENTRY+15
TIOESTTB EQU   TIOENTRY+16
POOLSTAR EQU   TIOENTRY+20
TIOEDEVE EQU   TIOESTTB
TIOSTTB  EQU   TIOEDEVE
CHAINS01 EQU   CHASM
CHTYPE   EQU   CHAINS01+124
CHTRSTAT EQU   CHAINS01+125
CHCSYSO  EQU   CHAINS01+134
CHLAST   EQU   CHAINS01+136
PROTKEY  EQU   BAPKES
SLSTPARM EQU   STBLPARM
TREEADDR EQU   SLSTPARM
LISTADDR EQU   SLSTPARM+4
BUILDADR EQU   SLSTPARM+8
DSCOUNT  EQU   SLSTPARM+12
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CHSPA    EQU   CHAINS01+135
CHUSERID EQU   CHCSYSO
CHJB     EQU   CHCSYSO
CHDUMP   EQU   CHCSYSO
CHQUE    EQU   CHCSYSO
CHHOLD   EQU   CHCSYSO
CHOUT    EQU   CHCSYSO
CHINN    EQU   CHCSYSO
CHALL    EQU   CHCSYSO
CHINC    EQU   CHAINS01+132
CHPEND   EQU   CHAINS01+128
CHARID   EQU   CHAINS01+127
CHCNID   EQU   CHAINS01+126
@NM00094 EQU   CHTRSTAT
CHTSL    EQU   CHTRSTAT
CHTS     EQU   CHTRSTAT
CHINITL  EQU   CHTRSTAT
CHINIT   EQU   CHTRSTAT
CHJOBSL  EQU   CHTRSTAT
CHJOBS   EQU   CHTRSTAT
CHDEF    EQU   CHTYPE
CHHIAR   EQU   CHTYPE
CHARSV29 EQU   CHTYPE
CHARSV28 EQU   CHTYPE
CHARSV27 EQU   CHTYPE
CHARSV26 EQU   CHTYPE
CHARSV25 EQU   CHTYPE
CHDSTAT  EQU   CHTYPE
CHBUF    EQU   CHAINS01
TIOUCBP  EQU   TIOEDEVE+1
TIOVERF  EQU   TIOSTTB
TIOUNLD  EQU   TIOSTTB
TIOMNTD  EQU   TIOSTTB
TIOSETU  EQU   TIOSTTB
TIOVLSR  EQU   TIOSTTB
TIOPVIO  EQU   TIOSTTB
TIOREQD  EQU   TIOSTTB
TIOUSED  EQU   TIOSTTB
TIOTFEND EQU   POOLSTAR+16
TIOPSLOT EQU   POOLSTAR+13
TIOPSTTB EQU   POOLSTAR+12
TIOPPOOL EQU   POOLSTAR+4
TIOPNSRT EQU   POOLSTAR+3
@NM00090 EQU   POOLSTAR+2
TIOPNSLT EQU   POOLSTAR+1
@NM00089 EQU   POOLSTAR
TIOEFSRT EQU   TIOENTRY+17
TIOSVERF EQU   TIOESTTB
TIOSUNLD EQU   TIOESTTB
TIOSMNTD EQU   TIOESTTB
TIOSSETU EQU   TIOESTTB
TIOSVLSR EQU   TIOESTTB
TIOSPVIO EQU   TIOESTTB
TIOSREQD EQU   TIOESTTB
TIOSUSED EQU   TIOESTTB
TIOSBALS EQU   TIOESTTC
TIOSBALP EQU   TIOESTTC
TIOSVOLS EQU   TIOESTTC
TIOSVOLP EQU   TIOESTTC
TIOSAFFS EQU   TIOESTTC
TIOSAFFP EQU   TIOESTTC
TIOSDEFR EQU   TIOESTTC
TIOSDKCR EQU   TIOESTTC
TIOEJFCB EQU   TIOENTRY+12
TIOEDDNM EQU   TIOENTRY+4
TIOTREM  EQU   TIOELINK
TIOESSDS EQU   TIOESYOT
TIOESYIN EQU   TIOELINK
TIOEQNAM EQU   TIOELINK
TIOEDYNM EQU   TIOELINK
TIOTTERM EQU   TIOELINK
TIOTRV01 EQU   TIOELINK
TIOSYOUT EQU   TIOELINK
TIOEWTCT EQU   TIOERLOC
TIOSDSP2 EQU   TIOESTTA
TIOSDSP1 EQU   TIOESTTA
TIOSLABL EQU   TIOESTTA
TIOSDADS EQU   TIOESTTA
TIOSJBLB EQU   TIOESTTA
TIOSPLTS EQU   TIOESTTA
TIOSPLTP EQU   TIOESTTA
TIOSLTYP EQU   TIOESTTA
TIOELNGH EQU   TIOENTRY
JSCBEND3 EQU   JSCBSEC3+120
JSCRSV52 EQU   JSCBSEC3+116
JSCRSV51 EQU   JSCRSV47+1
JSCRSV50 EQU   JSCRSV47
JSCRSV49 EQU   JSCRSV46+1
JSCRSV48 EQU   JSCRSV46
JSCRSV44 EQU   JSCBSEC3+108
JSCRSV43 EQU   JSCBSEC3+104
JSCRSV42 EQU   JSCBSEC3+100
JSCBASWA EQU   JSCBSEC3+96
JSCBUFPT EQU   JSCBSEC3+92
JSCRSV33 EQU   JSCBSEC3+86
JSCDDNUM EQU   JSCBSEC3+84
JSCRSV53 EQU   JSCBSEC3+82
JSCDDNNO EQU   JSCBSEC3+80
JSCBVATA EQU   JSCBSEC3+76
JSCTMCOR EQU   JSCBSEC3+72
JSCSCTP  EQU   JSCSCT+1
JSCRSV55 EQU   JSCSCT
JSCRSV54 EQU   JSCBSEC3+64
JSCDSABQ EQU   JSCBSEC3+60
JSCBSSIB EQU   JSCBSEC3+56
JSCBFRBA EQU   JSCBSEC3+48
JSCRSV28 EQU   JSCBSEC3+46
JSCBSONO EQU   JSCBSEC3+44
JSCBSUBA EQU   JSCBSUB+1
JSCRSV31 EQU   JSCBSUB
JSCBSMLR EQU   JSCBSEC3+36
JSCBJNLR EQU   JSCBSEC3+32
JSCBJNLA EQU   JSCBJNL+1
JSCBJSBT EQU   JSCBJJSB
JSCBJSBX EQU   JSCBJJSB
JSCBJSBA EQU   JSCBJJSB
JSCBJSBI EQU   JSCBJJSB
@NM00088 EQU   JSCBJJSB
JSCBJNLE EQU   JSCBJJSB
JSCBJNLF EQU   JSCBJJSB
JSCBJNLN EQU   JSCBJJSB
@NM00087 EQU   JSCBSEC3+24
JSCBJRBA EQU   JSCBSEC3+16
JSCBIECB EQU   JSCBSEC3+12
JSCBRV08 EQU   JSCBSEC3+11
JSCBRV07 EQU   JSCBFBYT
JSCBRV06 EQU   JSCBFBYT
JSCBRV05 EQU   JSCBFBYT
JSCBRV04 EQU   JSCBFBYT
JSCBRV03 EQU   JSCBFBYT
JSCBRV02 EQU   JSCBFBYT
JSCBADSP EQU   JSCBFBYT
JSCBRV01 EQU   JSCBFBYT
JSCBTJID EQU   JSCBASID
JSCBPSCB EQU   JSCBSEC3+4
JSCJCTP  EQU   JSCBJCTA
JSCRSV24 EQU   JSCBJCT
JSCBEND2 EQU   JSCBSEC2
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
@NM00223 EQU   JOBNAME1
@NM00222 EQU   MSGAREA
@NM00221 EQU   SUPVLIST+4
@NM00220 EQU   IEFPARM+12
MSGLGTHD EQU   @NM00217+1
@NM00218 EQU   @NM00217
MSGLGTHC EQU   @NM00215+1
@NM00216 EQU   @NM00215
@NM00214 EQU   MSGRTNHD+8
@NM00213 EQU   MSGRTNHD+4
@NM00212 EQU   MSGRTNHD
DSNAME   EQU   DSNENTRY+3
@NM00211 EQU   DSNENTRY+1
STEP#    EQU   DSNENTRY
@NM00210 EQU   STBLPARM+12
@NM00209 EQU   STBLPARM
@NM00208 EQU   OUTREC+7
@NM00207 EQU   INPUTREC+7
@NM00206 EQU   INPUTREC+3
MSSPARE  EQU   BASES01+48
MSUCBAL  EQU   BASES01+44
MSUCBPR  EQU   BASES01+40
MSBOBECB EQU   BASES01+36
MSSJQ    EQU   BASES01+32
MSECB    EQU   BASES01+28
MSPBP    EQU   BASES01+24
MSERM    EQU   BASES01+22
MSPASS   EQU   BASES01+14
MSVRB    EQU   BASES01+6
MSQHR    EQU   MSFHF
@NM00205 EQU   MSFHF
MSPSDT   EQU   MSFHF
MSREPLYB EQU   MSFHF
MSFAX    EQU   MSFHF
MSTTT    EQU   MSFHF
MSCSD    EQU   MSFHF
MSNMF    EQU   MSFHF
MSJNF    EQU   MSSSA
MSYOUT   EQU   MSNWP
MSNRP    EQU   MSSSA
MSSRDR   EQU   MSREOF
MSWRLOG  EQU   MSSSA
MSNUPSW  EQU   MSSSA
MSWRPEN  EQU   MSSSA
MSSSSIPL EQU   MSINLSW
MSSUM    EQU   MSECBFL
MSMCR    EQU   MSECBFL
MSYSOUT  EQU   MSECBFL
MSYSIN   EQU   MSECBFL
MSATTN   EQU   MSECBFL
MSWTL    EQU   MSECBFL
MSWTO    EQU   MSECBFL
MSEXT    EQU   MSECBFL
MSCCS    EQU   MSPFG
MSBSP    EQU   MSPFG
MSSYT    EQU   MSPFG
MSSYN    EQU   MSPFG
MSICR    EQU   MSPFG
MSCMC    EQU   MSPFG
MSPNB    EQU   MSPFG
MSDATE   EQU   MSPFG
@NM00204 EQU   MSBTN
MSTN     EQU   MSBTN
@NM00203 EQU   MSBTN
@NM00202 EQU   MSBTN
MSSO     EQU   MSBTN
MSROLFLG EQU   MSBTN
MSCANFLG EQU   MSBTN
MSCONFLG EQU   MSBTN
MSPNIP   EQU   MSNTAL
MSQNIP   EQU   MSNTAL
MSCURE34 EQU   MSNTAL
@NM00201 EQU   MSNTAL
@NM00200 EQU   MSNTAL
@NM00199 EQU   MSNTAL
@NM00198 EQU   MSNTAL
MSNIP    EQU   MSNTAL
@NM00197 EQU   MS1BASEX+40
@NM00196 EQU   MS1BASEX+20
@NM00195 EQU   MS1BASEX
@NM00194 EQU   BASE+128
MSLGJSCB EQU   BASE+124
@NM00193 EQU   MSSTRTSW
MSSTRTP  EQU   MSSTRTSW
MSSTRTW  EQU   MSSTRTSW
@NM00192 EQU   MSWTRSW
MSWTRP   EQU   MSWTRSW
MSWTRW   EQU   MSWTRSW
@NM00191 EQU   MSWLOGSW
MSWLOGP  EQU   MSWLOGSW
MSWLOGW  EQU   MSWLOGSW
@NM00190 EQU   MSCLOSSW
MSCLOSP  EQU   MSCLOSSW
MSCLOSW  EQU   MSCLOSSW
MSLOGLMT EQU   @NM00189+1
MSLOGCLS EQU   @NM00189
BAASCB   EQU   BASE+100
MSSMFPRM EQU   BASE+96
MSCOMMND EQU   BASE+92
BASP12   EQU   BASE+90
BASTCNT  EQU   BASE+88
BASESCT  EQU   BASE+86
BAJNCNT  EQU   BASE+84
BASUBECB EQU   BASE+80
BALOGCOM EQU   BASE+76
BADACNT  EQU   BASE+74
BATACNT  EQU   BASE+72
BAJBNR   EQU   BASE+64
BASP11   EQU   BASE+62
BALCCNT  EQU   BASE+61
BADUMPID EQU   BASE+60
BABCMAX  EQU   BASE+58
BAMONTR2 EQU   BASE+57
@NM00188 EQU   BAMONITR
BAMACTVE EQU   BAMONITR
@NM00187 EQU   BAMONITR
@NM00186 EQU   BAMONITR
@NM00185 EQU   BAMONITR
@NM00184 EQU   BAMONITR
BASPACE  EQU   BAMONITR
BADSN    EQU   BAMONITR
BADSO    EQU   BASE+52
BALOGECB EQU   BASE+48
@NM00183 EQU   BASPBYTE
@NM00182 EQU   BASPBYTE
@NM00181 EQU   BASPBYTE
@NM00180 EQU   BASPBYTE
@NM00179 EQU   BASPBYTE
BAMASCH  EQU   BASPBYTE
BATRACE  EQU   BASPBYTE
BAMSSTAR EQU   BASPBYTE
@NM00178 EQU   MSLOGST
@NM00177 EQU   MSLOGST
MSLOGSTA EQU   MSLOGST
MSLOGIPL EQU   MSLOGST
MSLOGDAR EQU   MSLOGST
MSLOGCOM EQU   MSLOGST
MSLOGTHD EQU   MSLOGST
MSLOGENQ EQU   MSLOGST
BAMIPAR2 EQU   BASE+44
BAMINPAR EQU   BASE+42
BAICTR   EQU   BASE+38
@NM00176 EQU   BASE+37
BADSET   EQU   BARSW
BANOSET  EQU   BARSW
BAMIDNT  EQU   BARSW
BAHR     EQU   BARSW
BAVU     EQU   BARSW
BAINTSET EQU   BARSW
MSTODWTO EQU   BARSW
BAIN     EQU   BARSW
BACV     EQU   BASE+32
@NM00175 EQU   BALOG
@NM00174 EQU   BALOG
@NM00173 EQU   BALOG
@NM00172 EQU   BALOG
@NM00171 EQU   BALOG
@NM00170 EQU   BALOG
@NM00169 EQU   BALOG
BALOGINT EQU   BALOG
MSLOGSVC EQU   BALGSTAT
BAPRC    EQU   BASE+20
BAQ      EQU   BASE+16
BAIPLCC  EQU   @NM00167+2
@NM00168 EQU   @NM00167
BAIPL    EQU   BASE+12
BALAD    EQU   BASE+8
BATRM    EQU   BASE+4
BACHN    EQU   BASE
SWCHNPTR EQU   SWAEPA+12
SWLNGTH  EQU   SWAEPA+8
SWBLKID  EQU   SWVAFW+3
@NM00166 EQU   CSD+160
CSDMASK  EQU   CSD+128
CSDUCNT  EQU   CSD+124
CSDTCNT  EQU   CSD+120
CSDGDTOD EQU   CSD+116
CSDGDINT EQU   CSD+112
CSDGDCC  EQU   CSD+108
CSDDDRCT EQU   CSD+106
CSDRV044 EQU   CSD+104
CSDMAFF  EQU   CSD+24
CSDRV038 EQU   CSDFLAGS
CSDRV037 EQU   CSDFLAGS
CSDRV036 EQU   CSDFLAGS
CSDRV035 EQU   CSDFLAGS
CSDRV034 EQU   CSDFLAGS
CSDRV033 EQU   CSDFLAGS
CSDRV032 EQU   CSDFLAGS
CSDMP    EQU   CSDFLAGS
CSDACR   EQU   CSD+22
CSDMF1CP EQU   CSD+20
CSDRV043 EQU   CSD+16
CSDRV030 EQU   CSDSCFL4
CSDRV029 EQU   CSDSCFL4
CSDRV028 EQU   CSDSCFL4
CSDRV027 EQU   CSDSCFL4
CSDRV026 EQU   CSDSCFL4
CSDRV025 EQU   CSDSCFL4
CSDRV024 EQU   CSDSCFL4
CSDRV023 EQU   CSDSCFL4
CSDRV022 EQU   CSDSCFL3
CSDRV021 EQU   CSDSCFL3
CSDRV020 EQU   CSDSCFL3
CSDRV019 EQU   CSDSCFL3
CSDRV018 EQU   CSDSCFL3
CSDRV017 EQU   CSDSCFL3
CSDRV016 EQU   CSDSCFL3
CSDRV015 EQU   CSDSCFL3
CSDRV014 EQU   CSDSCFL2
CSDRV013 EQU   CSDSCFL2
CSDRV012 EQU   CSDSCFL2
CSDRV011 EQU   CSDSCFL2
CSDRV010 EQU   CSDSCFL2
CSDRV009 EQU   CSDSCFL2
CSDRV008 EQU   CSDSCFL2
CSDRV007 EQU   CSDSCFL2
CSDRV006 EQU   CSDSCFL1
CSDRV005 EQU   CSDSCFL1
CSDRV004 EQU   CSDSCFL1
CSDRV003 EQU   CSDSCFL1
CSDRV002 EQU   CSDSCFL1
CSDRV001 EQU   CSDSCFL1
CSDSYSND EQU   CSDSCFL1
CSDRV042 EQU   CSDSCFL1
CSDCPUOL EQU   CSD+10
CSDSAFF  EQU   CSDCPUAL
CSDCHAD  EQU   CSD+6
CSDCSD   EQU   CSD
@NM00165 EQU   PPTFLGS+1
@NM00164 EQU   PPTPUBYT
PPTN2LP  EQU   PPTPUBYT
PPT1LPU  EQU   PPTPUBYT
PPT2LPU  EQU   PPTPUBYT
PPTKEY   EQU   PPT+9
@NM00163 EQU   PPTBYTE1
PPTNOPAS EQU   PPTBYTE1
PPTNDSI  EQU   PPTBYTE1
PPTSYSTK EQU   PPTBYTE1
PPTPRIV  EQU   PPTBYTE1
PPTNSWP  EQU   PPTBYTE1
PPTSKEY  EQU   PPTBYTE1
PPTNCNCL EQU   PPTBYTE1
QMRBN    EQU   SWAQMPA+12
@NM00162 EQU   SWAQMPA+1
QMSWSP   EQU   SWAQMPA
QMPNC    EQU   QMPCMNC
QMPCM    EQU   QMPCMNC
QMEIA    EQU   QMPA+28
QMWTQ    EQU   QMPA+24
QMRSD1   EQU   QMPA+22
QMTID    EQU   QMPA+20
QMLNK    EQU   QMPA+18
QMPRI    EQU   QMPA+17
@NM00161 EQU   QMSTA
QMSJNL   EQU   QMSTA
@NM00160 EQU   QMSTA
QMTPY    EQU   QMPA+15
QMNOT    EQU   QMPA+14
QMTLN    EQU   QMPA+12
QMTST    EQU   QMPA+11
QMFLT    EQU   QMPA+9
QMPEB    EQU   QMNAM+4
QMCAN    EQU   QMNAM
@NM00159 EQU   RTNEXAD
@NM00158 EQU   RTNEXNM
IELCOM   EQU   IELEXHDR+4
@NM00157 EQU   IELOPTS+7
IELSWAS  EQU   IELOPTS+6
IELNSYS  EQU   IELOPSW3
@NM00156 EQU   IELOPSW3
@NM00155 EQU   IELOPSW3
IELTSIZ  EQU   IELOPTS+4
IELOENQU EQU   IELOPSW2
IELONORC EQU   IELOPSW2
@NM00154 EQU   IELOPSW2
@NM00153 EQU   IELOPSW2
@NM00152 EQU   IELOPSW2
@NM00151 EQU   IELOPSW2
IELCRF   EQU   IELOPSW2
IELTIMEF EQU   IELOPSW2
@NM00150 EQU   IELOPSW1
IELICMDF EQU   IELOPSW1
IELONEJF EQU   IELOPSW1
IELCANF  EQU   IELOPSW1
@NM00149 EQU   IELOPSW1
@NM00148 EQU   IELOPSW1
IELDWFF  EQU   IELOPSW1
IELDPSWA EQU   IELOPSW1
IELOPLEN EQU   IELOPTS
@NM00147 EQU   IELLAST
IELEND   EQU   IELLAST
IELSTEPL EQU   IELLIST+16
IELRTNA  EQU   IELLIST+12
IELCSCB  EQU   IELLIST+4
IELSSOBA EQU   IELLIST
ACTACCNT EQU   IEFAACTB+32
ACTJNFLD EQU   IEFAACTB+31
ACTJTIME EQU   IEFAACTB+28
ACTPRGNM EQU   IEFAACTB+8
@NM00146 EQU   IEFAACTB+7
ACTNEXT  EQU   IEFAACTB+4
ACTIDENT EQU   IEFAACTB+3
ACTDSKAD EQU   IEFAACTB
@NM00145 EQU   INJMJCT+175
JCTVULDP EQU   INJMJCT+172
JCTACODE EQU   INJMJCT+168
JCTPRFMF EQU   INJMJCT+167
JCTUSER  EQU   INJMJCT+160
JCTSSD   EQU   INJMJCT+157
@NM00144 EQU   INJMJCT+156
JCTSRBT  EQU   INJMJCT+152
JCTJMRJD EQU   INJMJCT+149
JCTJMRJT EQU   INJMJCT+146
JCTJMRSS EQU   INJMJCT+143
JCTJMRTL EQU   INJMJCT+140
JCTJMRCL EQU   INJMJCT+139
JCTJMROP EQU   INJMJCT+138
JCTJMRD  EQU   INJMJCT+137
JCTJMR   EQU   INJMJCT+134
JCTCKIDT EQU   INJMJCT+118
JCTCKIDL EQU   INJMJCT+117
@NM00143 EQU   JCTSTAT2
JCTBLP   EQU   JCTSTAT2
JCTPERFM EQU   JCTSTAT2
JCTSWSM  EQU   JCTSTAT2
JCTENDIT EQU   JCTSTAT2
JCTSPSYS EQU   JCTSTAT2
@NM00142 EQU   INJMJCT+115
JCTJSBTM EQU   JCTJSB
JCTJSBEX EQU   JCTJSB
JCTJSBAL EQU   JCTJSB
JCTJSBIN EQU   JCTJSB
@NM00141 EQU   JCTJSB
JCTVOLSQ EQU   INJMJCT+110
JCTNRCKP EQU   INJMJCT+108
JCTNTRK  EQU   INJMJCT+107
JCTCKTTR EQU   INJMJCT+104
JCTDEVT  EQU   INJMJCT+100
@NM00140 EQU   INJMJCT+99
JCTSTIOT EQU   INJMJCT+96
JCTSNUMB EQU   INJMJCT+95
JCTQIDNT EQU   INJMJCT+94
JCTEQREG EQU   INJMJCT+92
@NM00139 EQU   INJMJCT+91
JCTDSDRA EQU   JCTRSW2
JCTDSOJB EQU   JCTRSW2
JCTDSOCR EQU   JCTRSW2
JCTRESTT EQU   JCTRSW2
JCTNOCKP EQU   JCTRSW2
JCTNORST EQU   JCTRSW2
JCTNARST EQU   JCTRSW2
JCTSYSCK EQU   JCTRSW2
@NM00138 EQU   JCTRSW1
JCTSTEPR EQU   JCTRSW1
JCTCKPTR EQU   JCTRSW1
JCTCKFT  EQU   JCTRSW1
JCTCONTR EQU   JCTRSW1
JCTSTERM EQU   JCTRSW1
@NM00137 EQU   JCTCCODE+3
JCTJDPOP EQU   JCTCCODE+2
JCTJDPCD EQU   JCTCCODE
@NM00136 EQU   INJMJCT+53
JCTSCT   EQU   INJMJCT+52
JCTSMRBA EQU   INJMJCT+44
@NM00135 EQU   INJMJCT+43
JCTACTAD EQU   INJMJCT+40
@NM00134 EQU   INJMJCT+39
JCTJCTX  EQU   INJMJCT+36
@NM00133 EQU   INJMJCT+35
JCTSDKAD EQU   INJMJCT+32
JCTJCSMF EQU   INJMJCT+31
JCTGDGNT EQU   INJMJCT+28
@NM00132 EQU   INJMJCT+27
JCTPDIP  EQU   INJMJCT+24
JCTJTPTN EQU   INJMJCT+16
JCTJPRTY EQU   JCTJBYTE
INCMMGL1 EQU   JCTJMGLV
INCMMGL2 EQU   JCTJMGLV
@NM00131 EQU   JCTJMGLV
INCMALL  EQU   JCTJMGLV
JCTJMGPO EQU   INJMJCT+6
INCMNSET EQU   JCTJSTAT
INCMCAT  EQU   INDMCTLG
JCTABEND EQU   JCTJSTAT
@NM00130 EQU   JCTJSTAT
JCTJSTPC EQU   JCTJSTAT
@NM00129 EQU   JCTJSTAT
JCTJBLBS EQU   JCTJSTAT
JCTIDENT EQU   INJMJCT+3
JCTDSKAD EQU   INJMJCT
JESPJESN EQU   JESCT+28
JESSSCT  EQU   JESCT+24
JESRESQM EQU   JESCT+16
JESUNITS EQU   JESCT+4
@NM00128 EQU   JESCT
@NM00127 EQU   @NM00125+1
SCTONLY  EQU   SCTABCND
SCTEVEN  EQU   SCTABCND
SCTABEND EQU   SCTABCND
SCTONLYC EQU   SCTABCND
SCTABCAN EQU   SCTABCND
@NM00126 EQU   SCTABCND
@NM00124 EQU   INSMSCT+173
@NM00123 EQU   SCTSTEND
SCTSYSCK EQU   SCTSTEND
SCTSTPND EQU   SCTSTEND
SCTSTSRT EQU   SCTSTEND
@NM00122 EQU   INSMSCT+168
SCTCATCT EQU   INSMSCT+166
SCTSDPSA EQU   SCTCDENT+3
SCTSDPOP EQU   SCTCDENT+2
SCTSDPCD EQU   SCTCDENT
@NM00121 EQU   INSMSCT+117
SCTTIOT  EQU   INSMSCT+105
@NM00120 EQU   SCTBCT
SCTJBEND EQU   SCTBCT
SCTSPSYS EQU   SCTBCT
SCTSTPLB EQU   SCTBCT
@NM00119 EQU   SCTBCT
SCTMCVOL EQU   SCTBCT
@NM00118 EQU   SCTBCT
SCTGOTTR EQU   INSMSCT+100
SCTSMF   EQU   INSMSCT+96
@NM00117 EQU   SCTSDPTY+1
SCTSDP   EQU   SCTSDPTY
@NM00116 EQU   SCTSDPTY
@NM00115 EQU   SCTSDPTY
SCTNIUSL EQU   INSMSCT+92
@NM00114 EQU   INSMSCT+90
SCTMSSZE EQU   INSMSCT+88
SCTPCAT  EQU   INSMSCT+84
SCTLDSTB EQU   INSMSCT+80
SCTSRBT  EQU   INSMSCT+76
SCTMSADR EQU   INSMSCT+72
@NM00113 EQU   INSMSCT+71
SCTXBTTR EQU   INSMSCT+68
SCTJSCAT EQU   SCTSTYPE
SCTINITB EQU   SCTSTYPE
SCTSJFHK EQU   SCTSTYPE
SCTOUTMC EQU   SCTSTYPE
SCTINPUT EQU   SCTSTYPE
SCTGOSTP EQU   SCTSTYPE
@NM00112 EQU   INSMSCT+66
SCTNSMSG EQU   INSMSCT+65
@NM00111 EQU   INSMSCT+62
SCTRPACT EQU   INSMSCT+60
SCTSNAME EQU   INSMSCT+52
SCTSCLPC EQU   INSMSCT+44
@NM00110 EQU   INSMSCT+43
SCTADSTB EQU   INSMSCT+40
@NM00109 EQU   INSMSCT+36
@NM00108 EQU   INSMSCT+35
SCTAFACT EQU   INSMSCT+32
SCTDDNT  EQU   INSMSCT+28
@NM00107 EQU   INSMSCT+27
SCTLSIOT EQU   INSMSCT+24
@NM00106 EQU   INSMSCT+23
SCTANSCT EQU   INSMSCT+20
@NM00105 EQU   INSMSCT+19
SCTAALOC EQU   INSMSCT+16
@NM00104 EQU   INSMSCT+15
SCTFSIOT EQU   INSMSCT+12
SCTLALOC EQU   INSMSCT+10
SCTSEXEC EQU   INSMSCT+8
SCTSTIME EQU   INSMSCT+5
INCMSSTS EQU   SCTSSTAT
SCTGRPH  EQU   SCTSSTAT
SCTKEY0  EQU   SCTSSTAT
SCTDORST EQU   SCTSSTAT
SCTNOCKP EQU   SCTSSTAT
SCTNORST EQU   SCTSSTAT
EACAUSER EQU   SCTSSTAT
EAADDRBT EQU   SCTSSTAT
SCTTBLID EQU   INSMSCT+3
SCTDISKA EQU   INSMSCT
STESMFTC EQU   STEPL+12
STEFCHLB EQU   STEFLAGS
STESTPLB EQU   STEFLAGS
STEJOBLB EQU   STEFLAGS
STEPARAM EQU   STEPL+4
STELCT   EQU   STEPL
SSIBSUSE EQU   SSIB+32
SSIBRSV1 EQU   SSIB+28
SSIBDEST EQU   SSIB+20
SSIBSSNM EQU   SSIB+8
SSIBRESV EQU   SSIB+7
@NM00102 EQU   SSIBFLG1
SSIBPJES EQU   SSIBFLG1
SSIBLEN  EQU   SSIB+4
SSIBID   EQU   SSIB
@NM00101 EQU   SSRQ+7
@NM00100 EQU   SSRQFLG1
SSRQCNRS EQU   SSRQFLG1
SSRQCHRS EQU   SSRQFLG1
SSRQSTRS EQU   SSRQFLG1
@NM00099 EQU   SSRQ+2
SSJSPSW2 EQU   SSJSPAS2+1
SSJSPSL2 EQU   SSJSPAS2
SSJSPSWD EQU   SSJSPASS+1
SSJSPSLN EQU   SSJSPASS
SSJSAIAD EQU   SSJS+36
SSJSJMR  EQU   SSJS+28
SSJSIPRM EQU   SSJS+24
SSJSTACB EQU   SSJS+20
SSJSJACB EQU   SSJS+16
SSJSMACB EQU   SSJS+12
@NM00098 EQU   SSJS+7
@NM00097 EQU   SSJSFLG1
SSJSAIFG EQU   SSJSFLG1
SSJSWARM EQU   SSJSFLG1
@NM00096 EQU   SSJSFLG1
SSJSCNRS EQU   SSJSFLG1
SSJSCHRS EQU   SSJSFLG1
SSJSSTRS EQU   SSJSFLG1
SSJSSTEP EQU   SSJS+4
@NM00095 EQU   SSJS+2
CHARSV16 EQU   CHSHORT+100
CHARSV15 EQU   CHSHORT+96
CHJSCBVS EQU   CHSHORT+92
CHUSCVS  EQU   CHSHORT+88
@NM00093 EQU   CHSHORT+84
@NM00092 EQU   CHSHORT+80
CHSQA    EQU   CHSHORT+44
CHQPA    EQU   CHSHORT+8
CHJCL    EQU   CHSHORT+4
CHSPC    EQU   CHSHORT
CHSPB    EQU   CHSTEP+4
CHTCB    EQU   CHSTEP+1
CHARSV23 EQU   CHSWT
CHARSV22 EQU   CHSWT
CHARSV21 EQU   CHSWT
CHAC     EQU   CHSWT
CHPSF    EQU   CHSWT
CHPSD    EQU   CHSWT
CHJCT    EQU   CHSWT
CHARSV20 EQU   CHSWT
CHCECB   EQU   CHASM+20
CHECB    EQU   CHASM+16
CHRGNAD  EQU   CHASM+12
CHARSV18 EQU   CHRGNSZ+1
CHRPRTY  EQU   CHRGNSZ
@NM00091 EQU   CHCIBP
CHEND    EQU   CHCIBP
CHECBP   EQU   CHASM
CHDER    EQU   CHPROCSN+4
CHARSV10 EQU   CHACT1
CHARSV09 EQU   CHACT1
CHARSV08 EQU   CHACT1
CHARSV07 EQU   CHACT1
CHARSV06 EQU   CHACT1
CHARSV05 EQU   CHACT1
CHARSV04 EQU   CHACT1
CHRDWTR  EQU   CHACT1
CHARSV30 EQU   CHPROCSN+2
CHQID    EQU   CHPROCSN
CHASID   EQU   CHTJID
CHCIBCTR EQU   CHAIN+27
CHUNIT   EQU   CHAIN+24
CHPCOI   EQU   CHPARM
CHIFY    EQU   CHACT
CHAIFX   EQU   CHACT
CHCLD    EQU   CHACT
CHCL     EQU   CHACT
CHDSI    EQU   CHACT
CHDISC   EQU   CHACT
CHTERM   EQU   CHACT
CHSWAP   EQU   CHACT
CHABTERM EQU   CHSTS
CHQSPC   EQU   CHSTS
CHSOUT   EQU   CHSTS
CHSYS    EQU   CHSTS
CHAP     EQU   CHSTS
CHPTR    EQU   CHAIN
TIOCNJOB EQU   TIOT1
JSCBPMG  EQU   JSCBWTP+2
JSCBWTSP EQU   JSCBWTP+1
JSCRSV23 EQU   JSCBWTFG
JSCRSV22 EQU   JSCBWTFG
JSCRSV21 EQU   JSCBWTFG
JSCRSV20 EQU   JSCBWTFG
JSCRSV19 EQU   JSCBWTFG
JSCRSV18 EQU   JSCBWTFG
JSCBRET  EQU   JSCBWTFG
JSCBIOFG EQU   JSCBWTFG
@NM00086 EQU   JSCBSEC1+60
JSCBQMPI EQU   JSCBSEC1+56
JSCBPMSG EQU   JSCBSWT1
JSCRSV16 EQU   JSCBSWT1
JSCRSV15 EQU   JSCBSWT1
JSCRSV14 EQU   JSCBSWT1
JSCRSV13 EQU   JSCBSWT1
JSCRSV12 EQU   JSCBSWT1
JSCRSV11 EQU   JSCBSWT1
JSCBPASS EQU   JSCBSWT1
JSCBTTTR EQU   JSCBSEC1+52
JSCRSV10 EQU   JSCBSEC1+49
JSCBAUTH EQU   JSCBOPTS
JSCSIOTS EQU   JSCBOPTS
JSCRSV08 EQU   JSCBOPTS
JSCRSV07 EQU   JSCBOPTS
JSCRSV06 EQU   JSCBOPTS
JSCBLONG EQU   JSCBOPTS
JSCRSV05 EQU   JSCBOPTS
JSCRSV04 EQU   JSCBOPTS
JSCBSECB EQU   JSCBSEC1+44
JSCRSV03 EQU   JSCBSEC1+41
JSCBSTEP EQU   JSCBSEC1+40
JSCBDCBA EQU   JSCBDCB+1
JSCRSV02 EQU   JSCBDCB
JSCBID   EQU   JSCBSEC1+32
JSCBDBTB EQU   JSCBSEC1+28
JSCBIJSC EQU   JSCBSEC1+24
JSCBTCBP EQU   JSCBSEC1+20
JSCBPCC  EQU   JSCBSEC1+16
JSCBTCP  EQU   JSCBSEC1+12
JSCBSHR  EQU   JSCBSEC1+8
JSCHPCEA EQU   JSCHPCE+1
JSCRSV32 EQU   JSCHPCE
JSCRSV01 EQU   JSCBSEC1
@NM00085 EQU   IEZJSCB
@NM00084 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBRV143 EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00083 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBRV327 EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBRV326 EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBSTAFX EQU   TCBSTAWA
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBCCPVI EQU   TCBXSCT+2
TCBRV325 EQU   TCBXSCT+1
TCBRV324 EQU   TCBXSCT1
TCBRV323 EQU   TCBXSCT1
TCBRV322 EQU   TCBXSCT1
TCBRV321 EQU   TCBXSCT1
TCBRV320 EQU   TCBXSCT1
TCBRV319 EQU   TCBXSCT1
TCBS3A   EQU   TCBXSCT1
TCBACTIV EQU   TCBXSCT1
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00082 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00081 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSMA EQU   ASCBRSM+1
ASCBRV54 EQU   ASCBRSMF
ASCBRV53 EQU   ASCBRSMF
ASCBRV52 EQU   ASCBRSMF
ASCBRV51 EQU   ASCBRSMF
ASCBVEQR EQU   ASCBRSMF
ASCBN2LP EQU   ASCBRSMF
ASCB1LPU EQU   ASCBRSMF
ASCB2LPU EQU   ASCBRSMF
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
LCTLABEL EQU   LCT+504
LCTIWORK EQU   LCT+440
@NM00080 EQU   LCT+436
LCTLBWAP EQU   LCT+428
@NM00079 EQU   LCT+424
LCTATTC  EQU   LCTINTS2
LCTTSWPC EQU   LCTINTS2
LCTBPPAS EQU   LCTINTS2
LCTSYS   EQU   LCTINTS2
LCTTSIZ  EQU   @NM00078
LCTRFB1  EQU   LCT+419
@NM00077 EQU   LCTRFB
LCTRFBRP EQU   LCTRFB
LCTRFBEF EQU   LCTRFB
LCTRFBMS EQU   LCTRFB
LCTRFBDC EQU   LCTRFB
LCTRFBRV EQU   LCTRFB
LCTRFBCR EQU   LCTRFB
LCTRFBSM EQU   LCTRFB
LCTMFTIO EQU   LCTSTATB
LCTNPKEY EQU   LCTSTATB
LCTSBPOL EQU   LCTSTATB
LCTNREAD EQU   LCTSTATB
LCTWRITE EQU   LCTSTATB
LCTNOATC EQU   LCTSTATB
LCTNOREG EQU   LCTSTATB
LCTECBPB EQU   LCTSTATB
LCTCPART EQU   LCTSTATA
LCTNOGCB EQU   LCTSTATA
LCTNOSDP EQU   LCTSTATA
LCTJCPIB EQU   LCTSTATA
LCTNECBL EQU   LCTSTATA
LCTBTJOB EQU   LCTSTATA
LCTSNOWK EQU   LCTSTATA
LCTSUSPD EQU   LCTSTATA
LCTTIOTI EQU   LCT+412
@NM00076 EQU   LCTJCTDA+3
@NM00075 EQU   LCT+364
@NM00074 EQU   LCTJSCB+1
@NM00073 EQU   LCTOPSW3
@NM00072 EQU   LCTOPSW3
LCTALERR EQU   LCTOPSW3
LCTJNLF  EQU   LCTOPSW3
@NM00071 EQU   LCTOPSW3
LCTNSYS  EQU   LCTOPSW3
LCTRDER  EQU   LCTOPSW3
@NM00070 EQU   LCTOPSW3
@NM00069 EQU   @NM00066+1
LCTENQU  EQU   LCTOPSW2
LCTNORC  EQU   LCTOPSW2
LCTBPRAC EQU   LCTOPSW2
@NM00068 EQU   LCTOPSW2
@NM00067 EQU   LCTOPSW2
LCTCKRST EQU   LCTOPSW2
LCTCRF   EQU   LCTOPSW2
LCTTIMEF EQU   LCTOPSW2
@NM00065 EQU   LCTEXIT+1
@NM00064 EQU   LCTOPSW1
@NM00063 EQU   LCTOPSW1
LCTCANF  EQU   LCTOPSW1
@NM00062 EQU   LCTOPSW1
@NM00061 EQU   LCTOPSW1
LCTDWFF  EQU   LCTOPSW1
LCTDPSWA EQU   LCTOPSW1
LCTTSRB3 EQU   LCTTSRB4+1
@NM00060 EQU   LCTTSRB4
@NM00059 EQU   LCT+340
@NM00058 EQU   LCTSPIL+3
@NM00057 EQU   LCTALCFG
@NM00056 EQU   LCTALCFG
@NM00055 EQU   LCTALCFG
@NM00054 EQU   LCTALCFG
@NM00053 EQU   LCTALCFG
@NM00052 EQU   LCTALCFG
LCTMSGWT EQU   LCTALCFG
LCTODSFL EQU   LCTALCFG
LCTDSBCT EQU   LCTSPIL
LCTPIB   EQU   LCTIDENT
@NM00051 EQU   ECBLIST+1
@NM00050 EQU   ECBLIST
LCTJMRAD EQU   LCT+324
@NM00049 EQU   LCT+284
@NM00048 EQU   LCTATLST+1
@NM00047 EQU   LCTATLST
@NM00046 EQU   LCTJOBLB+1
@NM00045 EQU   LCTJOBLB
LCTTSTU3 EQU   LCTTSTU4+1
@NM00044 EQU   LCTTSTU4
LCTTSTR3 EQU   LCTSMF+1
LCTTTIFJ EQU   LCTTMBYT
LCTTSTL3 EQU   LCTTSTL4+1
@NM00043 EQU   LCTTSTL4
LCTTJTU3 EQU   LCTTJTU4+1
@NM00042 EQU   LCTTJTU4
@NM00041 EQU   @NM00036+2
@NM00040 EQU   LCTPUBYT
@NM00039 EQU   LCTPUBYT
@NM00038 EQU   LCTPUBYT
@NM00037 EQU   LCTPUBYT
LCTNSWP  EQU   LCTPUBYT
LCTN2LP  EQU   LCTPUBYT
LCT1LPU  EQU   LCTPUBYT
LCT2LPU  EQU   LCTPUBYT
LCTNDSI  EQU   LCTINTSW
LCTABEND EQU   LCTINTSW
LCTSTART EQU   LCTINTSW
LCTMINRG EQU   LCTINTSW
LCTPPAA  EQU   LCTINTSW
LCTPRIV  EQU   LCTINTSW
LCTINPPT EQU   LCTINTSW
@NM00035 EQU   LCTSREG+1
@NM00034 EQU   LCTSREG
LCTCOMD2 EQU   LCTCOMCD+2
LCTCOMD1 EQU   LCTCOMCD
LCTBATMN EQU   LCT+64
@NM00033 EQU   LCTSMBAD+1
@NM00032 EQU   LCTSMBAD
LCTACTON EQU   LCT+59
@NM00031 EQU   LCTJFCBH
@NM00030 EQU   LCTJFCBH
@NM00029 EQU   LCTJFCBH
@NM00028 EQU   LCTJFCBH
@NM00027 EQU   LCTJFCBH
LCTS2FES EQU   LCTJFCBH
LCTS2COP EQU   LCTJFCBH
LCTS2PEM EQU   LCTJFCBH
LCTSTIND EQU   LCTNSPAD
@NM00026 EQU   LCTCMCBA+1
@NM00025 EQU   LCTCMCBA
LCTPARM4 EQU   LCT+48
LCTPARM3 EQU   LCT+44
LCTJCFAL EQU   LCTERR
LCTACOMP EQU   LCTERR
LCTSFAIL EQU   LCTERR
LCTPALCD EQU   LCTERR
LCTSALCD EQU   LCTERR
LCTJFAIL EQU   LCTERR
@NM00024 EQU   LCTPSPAR+1
@NM00023 EQU   LCTPSPAR
@NM00022 EQU   LCTWORKA+3
@NM00021 EQU   LCTSCTAD+1
@NM00020 EQU   LCTSCTAD
@NM00019 EQU   LCTJCTAD+1
@NM00018 EQU   LCTJCTAD
@NM00017 EQU   LCTQENTY+1
LCTERRM  EQU   @NM00009
@NM00016 EQU   @NM00009
@NM00015 EQU   @NM00009
@NM00014 EQU   @NM00009
@NM00013 EQU   @NM00009
@NM00012 EQU   @NM00009
@NM00011 EQU   @NM00009
@NM00010 EQU   @NM00009
@NM00008 EQU   LCTTCBAD+1
@NM00007 EQU   LCTTCBAD
@NM00006 EQU   LCTSRTAD+1
@NM00005 EQU   LCTSRTAD
@NM00004 EQU   LCTQDRTY+1
@NM00003 EQU   LCTQDRTY
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00002 EQU   CVTFIX+248
@NM00001 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00279 EQU   @RC00272
@RF00404 EQU   JOBSELCT
@RF00383 EQU   @RC00355
@RF00452 EQU   JOBSELCT
@PB00003 EQU   @EL00001
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IEFSD061,(C'PLS1940',0701,77270)
