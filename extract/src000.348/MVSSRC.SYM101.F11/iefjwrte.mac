         TITLE 'PSEUDO ACCESS METHOD WRITE A SEQUENTIAL RECORD       '
IEFJWRTE CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IEFJWRTE  72.321'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         LM    @00,@01,20(@13)                                     0001
*   RPLPTR=R1;                      /* SAVE THE POINTER TO THE RPL   */
         LR    RPLPTR,R1                                           0008
*   RFY                                                            0009
*     R1 UNRSTD;                    /* RELEASE R1                    */
*   RFY                                                            0010
*     IFGRPL BASED(RPLPTR);         /* THE RPL MACRO IS BASED ON THE
*                                      CONTENTS OF RPLPTR            */
*   RFY                                                            0011
*     IFGACB BASED(RPLDACB);        /* THE ACB IS BASED ON A PTR IN
*                                      THE RPL                       */
*   RFY                                                            0012
*     ACBPRFIX BASED(ADDR(IFGACB)-4);/* GET THE ACB PREFIX           */
*   RFY                                                            0013
*     IEFJAMWD BASED(ACBPRFIX);     /* THE ACCESS METHOD WORK AREA IS
*                                      BASED ON THE ACB PREFIX       */
*   RFY                                                            0014
*     IEFJAREA BASED(AMWDLAST);     /* THE COMMON DATA RECORD AREA   */
*                                                                  0015
*   /*****************************************************************/
*   /*                                                               */
*   /* PERFORM A SEQUENTIAL WRITE                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0015
*   TEXTLGTH=RPLRLEN+8;             /* SAVE RECORD LGTH AND ADD 8  0015
*                                      BYTES FOR A REC PREFIX        */
         LA    TEXTLGTH,8                                          0015
         A     TEXTLGTH,RPLRLEN(,RPLPTR)                           0015
*   SPNUM=10;                       /* SUBPOOL USED IS 10            */
         MVI   SPNUM,X'0A'                                         0016
*   SPLEN=TEXTLGTH;                 /* TEXTLGTH EQUALS THE SIZE OF 0017
*                                      CORE REQUIRED                 */
         STCM  TEXTLGTH,7,SPLEN                                    0017
*   RFY                                                            0018
*    (R0,                                                          0018
*     R1)RSTD;                      /* RESTRICT R1, R0               */
*   R0=R0INPUT;                     /* THE SUBPOOL NUMBER AND LENGTH
*                                      ARE SET IN R0                 */
         L     R0,R0INPUT                                          0019
*   GEN(GETMAIN R,LV=(0));          /* ISSUE GETMAIN                 */
         GETMAIN R,LV=(0)
*   GETMNADD=R1;                    /* SAVE ADDR RETURNED            */
         LR    GETMNADD,R1                                         0021
*   RFY                                                            0022
*    (R0,                                                          0022
*     R1)UNRSTD;                    /* RELEASE R0,R1                 */
*   IF AMWDFRST^=0 THEN             /* IS THIS THE FIRST REC IN THE
*                                      CHAIN                         */
         L     @10,RPLDACB(,RPLPTR)                                0023
         AL    @10,@CF00233                                        0023
         L     @10,ACBPRFIX(,@10)                                  0023
         ICM   @07,15,AMWDFRST(@10)                                0023
         BZ    @RF00023                                            0023
*     NEXTPTR=GETMNADD;             /* IF NOT CHAIN TO LAST RECORD   */
         L     @10,AMWDLAST(,@10)                                  0024
         ST    GETMNADD,NEXTPTR(,@10)                              0024
*   ELSE                            /* IF THIS IS THE FIRST REC IN 0025
*                                      THE CHAIN THEN SET AMWDFRST   */
*     AMWDFRST=GETMNADD;            /* EQUAL TO ADDR OF CORE         */
         B     @RC00023                                            0025
@RF00023 L     @10,RPLDACB(,RPLPTR)                                0025
         AL    @10,@CF00233                                        0025
         L     @10,ACBPRFIX(,@10)                                  0025
         ST    GETMNADD,AMWDFRST(,@10)                             0025
*   AMWDLAST=GETMNADD;              /* BASE RECORD FORMAT ON THE ADDR
*                                      OF THE GOTTEN AREA            */
@RC00023 L     @10,RPLDACB(,RPLPTR)                                0026
         AL    @10,@CF00233                                        0026
         L     @10,ACBPRFIX(,@10)                                  0026
         ST    GETMNADD,AMWDLAST(,@10)                             0026
*   TEXTPTR=RPLAREA;                /* TEXTPTR NOW POINTS TO THE AREA
*                                      THAT THE REC WILL BE WRITTEN
*                                      FROM                          */
         L     TEXTPTR,RPLAREA(,RPLPTR)                            0027
*   RECPTR=ADDR(IEFJAREA);          /* RECPTR POINTS TO THE REC TO BE
*                                      RE-WRITTEN                    */
         L     @10,RPLDACB(,RPLPTR)                                0028
         AL    @10,@CF00233                                        0028
         L     @10,ACBPRFIX(,@10)                                  0028
         L     @10,AMWDLAST(,@10)                                  0028
         LR    RECPTR,@10                                          0028
*   IF RPLRLEN<=256 THEN            /* CHECK LENGTH OF REC IF > 256
*                                      MORE THAN ONE MOVE IS       0029
*                                      NECESSARY                     */
         CLC   RPLRLEN(4,RPLPTR),@CF00232                          0029
         BH    @RF00029                                            0029
*     RECTEXT(1:RPLRLEN)=TEXTAREA(1:RPLRLEN);/* LESS THAN 256 MOVE 0030
*                                      AND END                       */
         L     @07,RPLRLEN(,RPLPTR)                                0030
         BCTR  @07,0                                               0030
         EX    @07,@SM00234                                        0030
*   ELSE                                                           0031
*     DO;                                                          0031
         B     @RC00029                                            0031
@RF00029 DS    0H                                                  0032
*       CTR=RPLRLEN/256;            /* SET CTR TO THE NUMBER OF MOVES
*                                      NECESSARY                     */
         L     CTR,RPLRLEN(,RPLPTR)                                0032
         SRL   CTR,8                                               0032
*       DO WHILE CTR>0;             /* EXECUTE UNTIL ALL 256 BYTE  0033
*                                      BLOCKS HAVE BEEN MOVED        */
         B     @DE00033                                            0033
@DL00033 DS    0H                                                  0034
*         RECPTR->RECTEXT(1:256)=TEXTAREA(1:256);/* MOVE 256 BYTES AT
*                                      A TIME                        */
         MVC   RECTEXT(256,RECPTR),TEXTAREA(TEXTPTR)               0034
*         TEXTPTR=TEXTPTR+256;      /* UPDATE POINTER                */
         LA    @10,256                                             0035
         AR    TEXTPTR,@10                                         0035
*         RECPTR=RECPTR+256;        /* UPDATE POINTER                */
         AR    RECPTR,@10                                          0036
*         CTR=CTR-1;                /* DECREMENT COUNTER             */
         BCTR  CTR,0                                               0037
*       END;                                                       0038
@DE00033 LTR   CTR,CTR                                             0038
         BP    @DL00033                                            0038
*       CTR=RPLRLEN//256;           /* SET REMAINING LENGTH IN CTR   */
         L     CTR,RPLRLEN(,RPLPTR)                                0039
         N     CTR,@CF00236                                        0039
*       RECPTR->RECTEXT(1:CTR)=TEXTAREA(1:CTR);/* MOVE REMAINING   0040
*                                      LENGTH                        */
         LR    @10,CTR                                             0040
         BCTR  @10,0                                               0040
         EX    @10,@SM00237                                        0040
*     END;                                                         0041
*   LGTH=TEXTLGTH;                  /* SET THE LENGTH                */
@RC00029 L     @10,RPLDACB(,RPLPTR)                                0042
         AL    @10,@CF00233                                        0042
         L     @10,ACBPRFIX(,@10)                                  0042
         L     @10,AMWDLAST(,@10)                                  0042
         ST    TEXTLGTH,LGTH(,@10)                                 0042
*   NEXTPTR=0;                      /* THE NEXTPTR IS ALWAYS SET TO
*                                      ZERO BECAUSE THERE IS NO WAY
*                                      OF KNOWING IF THIS IS THE LAST
*                                      REC                           */
         SR    @03,@03                                             0043
         ST    @03,NEXTPTR(,@10)                                   0043
*   RPLDDDD=ADDR(RECTEXT);          /* RETURN THE ADDR IN THE RPL    */
         LA    @10,RECTEXT(,@10)                                   0044
         ST    @10,RPLDDDD(,RPLPTR)                                0044
*   END IEFJWRTE                    /* RETURN TO CALLER              */
*                                                                  0045
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IEFJAMWD)                                       */
*/*%INCLUDE SYSLIB  (IEFJAREA)                                       */
*                                                                  0045
*       ;                                                          0045
@EL00001 DS    0H                                                  0045
@EF00001 L     @00,@SIZDATD                                        0045
         LR    @01,@11                                             0045
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0045
         BR    @14                                                 0045
@DATA    DS    0H
@SM00234 MVC   RECTEXT(0,@10),TEXTAREA(TEXTPTR)
@SM00237 MVC   RECTEXT(0,RECPTR),TEXTAREA(TEXTPTR)
@DATD    DSECT
         DS    0F
IEFJWRTE CSECT
         DS    0F
@CF00233 DC    F'-4'
@CF00236 DC    F'255'
@CF00232 DC    F'256'
@DATD    DSECT
         DS    0D
R0INPUT  DS    CL4
         ORG   R0INPUT
SPNUM    DS    FL1
SPLEN    DS    FL3
         ORG   R0INPUT+4
@ENDDATD EQU   *
IEFJWRTE CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
PTCHWRTE DC    X'00'
         DS    9XL1
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
GETMNADD EQU   @03
CTR      EQU   @03
TEXTLGTH EQU   @06
RECPTR   EQU   @05
TEXTPTR  EQU   @04
RPLPTR   EQU   @02
R1       EQU   @01
R0       EQU   @00
ACBPRFIX EQU   0
TEXTAREA EQU   0
IFGACB   EQU   0
ACBAMBL  EQU   IFGACB+4
ACBIXLST EQU   ACBAMBL
ACBJWA   EQU   ACBIXLST
ACBMACRF EQU   IFGACB+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBLFB   EQU   IFGACB+20
ACBBUFPL EQU   ACBLFB
ACBRECFM EQU   IFGACB+24
ACBCCTYP EQU   IFGACB+25
ACBOPT   EQU   IFGACB+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBEXLST EQU   IFGACB+36
ACBDDNM  EQU   IFGACB+40
ACBOFLGS EQU   IFGACB+48
ACBINFLG EQU   IFGACB+50
ACBUJFCB EQU   IFGACB+52
ACBWAPTR EQU   ACBUJFCB
IFGRPL   EQU   0
RPLIDWD  EQU   IFGRPL
RPLECB   EQU   IFGRPL+8
RPLSTAT  EQU   IFGRPL+12
RPLFDBK  EQU   IFGRPL+13
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLKEYLE EQU   IFGRPL+16
RPLDACB  EQU   IFGRPL+24
RPLAREA  EQU   IFGRPL+32
RPLOPTCD EQU   IFGRPL+40
RPLOPT1  EQU   RPLOPTCD
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLNXTRP EQU   IFGRPL+44
RPLRLEN  EQU   IFGRPL+48
RPLRBAR  EQU   IFGRPL+60
RPL6RBA  EQU   RPLRBAR+2
RPLDDDD  EQU   RPL6RBA+2
IEFJAMWD EQU   0
AMWDFRST EQU   IEFJAMWD
AMWDLAST EQU   IEFJAMWD+4
AMWDFLG1 EQU   IEFJAMWD+8
IEFJAREA EQU   0
NEXTPTR  EQU   IEFJAREA
LGTH     EQU   IEFJAREA+4
RECTEXT  EQU   IEFJAREA+8
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00019 EQU   IEFJAMWD+10
AMWDFLG2 EQU   IEFJAMWD+9
@NM00018 EQU   AMWDFLG1
AMWDMV80 EQU   AMWDFLG1
AMWDEOF  EQU   AMWDFLG1
RPLERMSA EQU   IFGRPL+72
RPLEMLEN EQU   IFGRPL+70
@NM00017 EQU   IFGRPL+68
RPLS2S2  EQU   RPL6RBA
RPLS1S1  EQU   RPLRBAR
@NM00016 EQU   IFGRPL+56
RPLBUFL  EQU   IFGRPL+52
RPLCHAIN EQU   RPLNXTRP
RPLOPT4  EQU   RPLOPTCD+3
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
@NM00015 EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBSW EQU   RPLOPT1
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLARG   EQU   IFGRPL+36
RPLTCBPT EQU   IFGRPL+28
RPLCCHAR EQU   IFGRPL+20
RPLSTRID EQU   IFGRPL+18
RPLKEYL  EQU   RPLKEYLE
RPLERRCD EQU   RPLCNDCD+1
RPLCMPON EQU   RPLCNDCD
RPLERREG EQU   RPLRTNCD
@NM00014 EQU   RPLSTAT
RPLEDRQI EQU   RPLSTAT
RPLCHKI  EQU   RPLSTAT
RPLACTIV EQU   RPLSTAT
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   IFGRPL+4
RPLLEN   EQU   RPLIDWD+3
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
@NM00013 EQU   IFGACB+72
@NM00012 EQU   IFGACB+68
ACBUAPTR EQU   IFGACB+64
ACBLRECL EQU   IFGACB+62
ACBBLKSZ EQU   IFGACB+60
ACBBUFSP EQU   IFGACB+56
@NM00011 EQU   ACBWAPTR+1
ACBOPTN  EQU   ACBWAPTR
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00010 EQU   ACBINFLG
ACBERFLG EQU   IFGACB+49
ACBIOSFG EQU   ACBOFLGS
ACBEXFG  EQU   ACBOFLGS
@NM00009 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00008 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAMETH EQU   ACBDDNM+3
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   IFGACB+32
@NM00007 EQU   IFGACB+28
@NM00006 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00005 EQU   ACBDSORG
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00004 EQU   ACBCCTYP
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
@NM00003 EQU   ACBBUFPL
ACBBUFNI EQU   IFGACB+18
ACBBUFND EQU   IFGACB+16
ACBSTRNO EQU   IFGACB+14
@NM00002 EQU   ACBMACR2
@NM00001 EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
ACBCHN   EQU   ACBMACR2
ACBCBRD  EQU   ACBMACR2
ACBCBOPN EQU   ACBMACR2
ACBUPD   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   IFGACB+8
ACBIBCT  EQU   ACBJWA
ACBLENG  EQU   IFGACB+2
ACBSTYP  EQU   IFGACB+1
ACBID    EQU   IFGACB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@ENDDATA EQU   *
         END   IEFJWRTE
