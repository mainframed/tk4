         TITLE 'IEFDSTBL - DATA SET TREE CREATE                        *
                        '
IEFDSTBL CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IEFDSTBL  73.321'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
*                                                                    */
*                                                                  0003
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION CHECKS FOR FIRST ENTRY. IF IT IS THE FIRST ENTRY */
*   /* THEN THE FIRST 1024 BYTE SEGMENT OF THE TREE MUST BE GOTTEN.  */
*   /* THE POINTERS ARE SET UP AND THE FIRST DATA SET ENTRY IS ADDED */
*   /* TO THE TREE. IF IT IS NOT THE FIRST ENTRY THEN THE CURRENT    */
*   /* POINTER HAS TO BE SET TO POINT TO THE FIRST ENTRY AND ALSO THE*/
*   /* TREEPTR MUST BE SAVED.                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0003
*   PARMPTR=R1;                     /* SET UP POINTER TO PARAMTER  0003
*                                      LIST                          */
         LR    PARMPTR,R1                                          0003
*   INDICT=16;                      /* SET UP INDICATOR              */
         LA    INDICT,16                                           0004
*   IF TREEPTR=0 THEN               /* IF ZERO THEN THIS IS FIRST  0005
*                                      ENTRY                         */
         ICM   @00,15,TREEPTR(PARMPTR)                             0005
         BNZ   @RF00005                                            0005
*     DO;                                                          0006
*       CALL GETFIRST;              /* FIRST ENTRY, GET THE FIRST  0007
*                                      SEGMENT                       */
         BAL   @14,GETFIRST                                        0007
*       IF STEP>STEP1 THEN          /* CHECK RESTARTING STEP         */
         L     @05,DATASET(,PARMPTR)                               0008
         CLC   STEP(1,PARMPTR),STEP1(@05)                          0008
         BNH   @RF00008                                            0008
*         INDICT=4;                 /* SET INDICATOR                 */
         LA    INDICT,4                                            0009
*     END;                                                         0010
*   ELSE                                                           0011
*     DO;                                                          0011
         B     @RC00005                                            0011
@RF00005 DS    0H                                                  0012
*       CURRENT=FIRSTSVA;           /* SET CURRENT TO POINT TO FIRST
*                                      ENTRY                         */
         L     @05,TREEPTR(,PARMPTR)                               0012
         MVC   CURRENT(4,@05),FIRSTSVA(@05)                        0012
*       SAVETREE=TREEPTR;           /* SAVE THE TREE POINTER         */
         LR    SAVETREE,@05                                        0013
*     END;                                                         0014
*                                                                  0015
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS DO WHILE LOOP INDEXS THROUGH THE TREE TO FIND AN EQUAL   */
*   /* DATA SET NAME. IF AN EQUAL LENGTH IS FOUND THEN THE NAME IS   */
*   /* CHECKED. IF THE NAME IS EQUAL THEN SWAUPDTE IS CALLED TO      */
*   /* UPDATE THE STEP NUMBER OUT ON SWA. IF THE LENGTH IS NOT EQUAL */
*   /* THEN CURRENT IS UPDATED TO POINT TO THE NEXT DATA SET ENTRY IN*/
*   /* THE TREE. IF CURRENT POINTS TO FOXES THEN WE MUST GO TO THE   */
*   /* NEXT 1024 SEGMENT AND REBASE TREEPTR. IF CURRENT IS ZERO THEN */
*   /* WE CAN ADD THE DATA SET TO THE TREE.                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0015
*   DO WHILE INDICT=16;             /* FIND AN EQUAL OR THE END OF 0015
*                                      THE TREE                      */
@RC00005 B     @DE00015                                            0015
@DL00015 DS    0H                                                  0016
*     IF STEP>STEP1 THEN                                           0016
         L     @05,DATASET(,PARMPTR)                               0016
         CLC   STEP(1,PARMPTR),STEP1(@05)                          0016
         BNH   @RF00016                                            0016
*       DO;                                                        0017
*         TREEPTR=SAVETREE;         /* RESTORE THE TREE POINTER      */
         ST    SAVETREE,TREEPTR(,PARMPTR)                          0018
*         RETURN CODE(4);           /* INDICATE DUPLICATE ,        0019
*                                      RESTARTING STEP GREATER THAN
*                                      THIS STEP                     */
         LA    @15,4                                               0019
         L     @14,12(,@13)                                        0019
         LM    @00,@12,20(@13)                                     0019
         BR    @14                                                 0019
*       END;                                                       0020
*     IF DSLGH^=0 THEN                                             0021
@RF00016 L     @05,TREEPTR(,PARMPTR)                               0021
         L     @05,CURRENT(,@05)                                   0021
         CLI   DSLGH(@05),0                                        0021
         BE    @RF00021                                            0021
*       DO;                         /* NOT FIRST ENTRY IN TABLE ,GO
*                                      ON                            */
*         IF DSLGH=DSLGH1 THEN      /* ARE THE DATA SET NAMES LENGTH
*                                      EQUAL                         */
         L     @15,DATASET(,PARMPTR)                               0023
         CLC   DSLGH(1,@05),DSLGH1(@15)                            0023
         BNE   @RF00023                                            0023
*           DO;                     /* YES, THEN ARE THE NAMES THE 0024
*                                      SAME?                         */
*             IF NEW(1:DSLGH)=DATASETN(1:DSLGH) THEN               0025
*                                                                  0025
         SLR   @14,@14                                             0025
         IC    @14,DSLGH(,@05)                                     0025
         BCTR  @14,0                                               0025
         EX    @14,@SC00106                                        0025
         BNE   @RF00025                                            0025
*               /*****************************************************/
*               /*                                                   */
*               /* THE NAME IS VARIABLE LENGTH, INDEX BY THE LENGTH  */
*               /* FOR THE COMPARE                                   */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0026
*               CALL SWAUPDTE;      /* UPDATE THE COUNT FIELD ON SWA */
         BAL   @14,SWAUPDTE                                        0026
*           END;                                                   0027
@RF00025 DS    0H                                                  0028
*         IF INDICT=16 THEN                                        0028
@RF00023 CH    INDICT,@CH00088                                     0028
         BNE   @RF00028                                            0028
*           DO;                     /* UPDATE CURRENT AND CKECK FOR
*                                      END OF TREE                   */
*             CURRENT=CURRENT+7+DSLGH;/* UPDATE CURRENT TO POINT TO
*                                      NEXT ENTRY                    */
         L     @05,TREEPTR(,PARMPTR)                               0030
         L     @15,CURRENT(,@05)                                   0030
         LA    @00,7                                               0030
         ALR   @00,@15                                             0030
         SLR   @14,@14                                             0030
         IC    @14,DSLGH(,@15)                                     0030
         ALR   @00,@14                                             0030
         ST    @00,CURRENT(,@05)                                   0030
*             IF SVA=FOXES THEN     /* IS THIS THE END OF THIS     0031
*                                      SEGMENT?                      */
         LR    @15,@00                                             0031
         CLC   SVA(4,@15),FOXES                                    0031
         BNE   @RF00031                                            0031
*               DO;                                                0032
*                 TREEPTR=TREE2;    /* YES, INDEX TO NEXT     SEGMENT*/
         L     @05,TREE2(,@05)                                     0033
         ST    @05,TREEPTR(,PARMPTR)                               0033
*                 CURRENT=FIRSTSVA; /* POINT TO FIRST DSNAME         */
         MVC   CURRENT(4,@05),FIRSTSVA(@05)                        0034
*               END;                                               0035
*             IF SVA=0 THEN         /* END OF TREE IS FOUND IF SVA IS
*                                      ZERO                          */
@RF00031 SLR   @05,@05                                             0036
         L     @15,TREEPTR(,PARMPTR)                               0036
         L     @15,CURRENT(,@15)                                   0036
         C     @05,SVA(,@15)                                       0036
         BNE   @RF00036                                            0036
*               INDICT=0;           /* SET INDICTOR                  */
         LR    INDICT,@05                                          0037
*           END;                                                   0038
*       END;                                                       0039
*     ELSE                                                         0040
*       INDICT=0;                   /* INDICATE ADD ENTRY            */
         B     @RC00021                                            0040
@RF00021 SLR   INDICT,INDICT                                       0040
*   END;                                                           0041
@RC00021 DS    0H                                                  0041
@DE00015 CH    INDICT,@CH00088                                     0041
         BE    @DL00015                                            0041
*                                                                  0042
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION OF CODE ADDS THE DATA SET ENTRY TO THE TREE OR   */
*   /* FALLS THROUGH IF THE DATA SET PROCESSED IS A DUPLICATE ENTRY. */
*   /* IF THERE IS NOT ENOUGH ROOM IN THE 1024 BYTE SEGMENT THEN     */
*   /* GETNEWAR IS CALLED TO GET A NEW SEGMENT AND CHAIN THEM        */
*   /* TOGETHER.                                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0042
*   IF INDICT=0 THEN                /* IF ZERO, ADD DATA SET ENTRY   */
         CH    INDICT,@CH00089                                     0042
         BNE   @RF00042                                            0042
*     DO;                                                          0043
*       IF LASTWORD-CURRENT<52 THEN                                0044
*                                                                  0044
         L     @05,TREEPTR(,PARMPTR)                               0044
         L     @03,LASTWORD(,@05)                                  0044
         SL    @03,CURRENT(,@05)                                   0044
         CH    @03,@CH00094                                        0044
         BNL   @RF00044                                            0044
*         /***********************************************************/
*         /*                                                         */
*         /* IF LESS THEN 52 BYTES IN SEGMENT THEN GET A NEW SEGMENT */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0045
*         CALL GETNEWAR;            /* GET A NEW SEGMENT             */
         BAL   @14,GETNEWAR                                        0045
*       SVA=SVADSET;                /* ADD THE SWA VIRTUAL ADDRESS TO
*                                      TREE                          */
@RF00044 L     @05,TREEPTR(,PARMPTR)                               0046
         L     @05,CURRENT(,@05)                                   0046
         MVC   SVA(4,@05),SVADSET(PARMPTR)                         0046
*       STEP3=STEP1;                /* MOVE IN THE STEP NUMBER       */
         L     @03,DATASET(,PARMPTR)                               0047
         MVC   STEP3(1,@05),STEP1(@03)                             0047
*       EXSHR=EXSHR1;               /* SET THE EXCLUSIVE OR SHARED 0048
*                                      BYTE                          */
         MVC   EXSHR(1,@05),EXSHR1(@03)                            0048
*       DSLGH=DSLGH1;               /* MOVE IN DATA SET LENGTH       */
         MVC   DSLGH(1,@05),DSLGH1(@03)                            0049
*       NEW(1:DSLGH)=DATASETN;      /* MOVE IN VARIABLE DSNAME       */
         SLR   @15,@15                                             0050
         IC    @15,DSLGH(,@05)                                     0050
         BCTR  @15,0                                               0050
         EX    @15,@SM00108                                        0050
*       TREEPTR=SAVETREE;           /* RESTORE BEGINNING TREE POINTER*/
         ST    SAVETREE,TREEPTR(,PARMPTR)                          0051
*       RETURN CODE(0);             /* INDICATE DATA SET ENTRY ADDED */
         SLR   @15,@15                                             0052
         L     @14,12(,@13)                                        0052
         LM    @00,@12,20(@13)                                     0052
         BR    @14                                                 0052
*     END;                                                         0053
*   TREEPTR=SAVETREE;               /* RESTORE TREE POINTER          */
@RF00042 ST    SAVETREE,TREEPTR(,PARMPTR)                          0054
*   RETURN CODE(4);                 /* INDICATE DUPLICATE DSNAME   0055
*                                                                    */
         LA    @15,4                                               0055
         L     @14,12(,@13)                                        0055
         LM    @00,@12,20(@13)                                     0055
         BR    @14                                                 0055
*                                                                  0056
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE GETS THE FIRST 1024 BYTE SEGMENT FOR THE TREE.*/
*   /* IT SETS UP THE POINTERS IN THE TREE AND PUTS THE ADDRESS OF   */
*   /* THE TREE IN THE PARAMETER LIST PASSED TO IEFDSTBL. IT SAVES   */
*   /* THE TREE POINTER TO BE RESTORED LATER.                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0056
*GETFIRST:                                                         0056
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0056
@EL00001 DS    0H                                                  0056
@EF00001 DS    0H                                                  0056
@ER00001 LM    @14,@12,12(@13)                                     0056
         BR    @14                                                 0056
@PB00001 DS    0H                                                  0056
GETFIRST DS    0H                                                  0057
*   RFY                                                            0057
*    (R14) RSTD;                                                   0057
*   GEN(GETMAIN  R,LV=1024,SP=0);                                  0058
         GETMAIN  R,LV=1024,SP=0
*   TREEPTR=R1;                     /* BASE THE TREE ON THE AREA   0059
*                                      GOTTEN                        */
         ST    R1,TREEPTR(,PARMPTR)                                0059
*   TREE2=TREE2&&TREE2;             /* CLEAR POINTER TO NEXT SEGMENT */
         L     @15,TREEPTR(,PARMPTR)                               0060
         L     @05,TREE2(,@15)                                     0060
         LR    @00,@05                                             0060
         XR    @00,@05                                             0060
         ST    @00,TREE2(,@15)                                     0060
*   AREA=AREA&&AREA;                /* CLEAR AREA                    */
         XC    AREA(250,@15),AREA(@15)                             0061
*   AREA1=AREA1&&AREA1;             /* CLEAR AREA                    */
         XC    AREA1(250,@15),AREA1(@15)                           0062
*   AREA2=AREA2&&AREA2;             /* CLEAR AREA                    */
         XC    AREA2(250,@15),AREA2(@15)                           0063
*   AREA3=AREA3&&AREA3;             /* CLEAR AREA                    */
         XC    AREA3(250,@15),AREA3(@15)                           0064
*   ENDTREE=ENDTREE&&ENDTREE;       /* CLEAR LAST WORD IN TREE       */
         L     @05,ENDTREE(,@15)                                   0065
         LR    @00,@05                                             0065
         XR    @00,@05                                             0065
         ST    @00,ENDTREE(,@15)                                   0065
*   FIRSTSVA=ADDR(AREA);            /* SET UP POINTER TO FIRST AREA  */
         LA    @05,AREA(,@15)                                      0066
         ST    @05,FIRSTSVA(,@15)                                  0066
*   LASTWORD=ADDR(ENDTREE);         /* FIND THE LAST ADDRESS IN    0067
*                                      SEGMENT                       */
         LA    @00,ENDTREE(,@15)                                   0067
         ST    @00,LASTWORD(,@15)                                  0067
*   CURRENT=FIRSTSVA;               /* SET UP CURRENT                */
         ST    @05,CURRENT(,@15)                                   0068
*   INDICT=0;                       /* INDICATE ADD THE DATA SET   0069
*                                      ENTRY                         */
         SLR   INDICT,INDICT                                       0069
*   SAVETREE=TREEPTR;               /* SAVE THE TREE POINTER         */
         LR    SAVETREE,@15                                        0070
*   RFY                                                            0071
*    (R14) UNRSTD;                                                 0071
*   END;                                                           0072
@EL00002 DS    0H                                                  0072
@EF00002 DS    0H                                                  0072
@ER00002 BR    @14                                                 0072
*                                                                  0073
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE GETS A NEW 1024 BYTE SEGMENT FOR THE TREE. IT */
*   /* PUTS THE FOXES IN THE LAST SEGMENT TO INDICATE THE END OF IT  */
*   /* AND SETS UP THE POINTERS IN THE NEW SEGMENT.                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0073
*GETNEWAR:                                                         0073
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0073
GETNEWAR DS    0H                                                  0074
*   RFY                                                            0074
*    (R14) RSTD;                                                   0074
*   SVA=FOXES;                      /* INDICATE END OF SEGMENT       */
         L     @15,TREEPTR(,PARMPTR)                               0075
         L     @15,CURRENT(,@15)                                   0075
         MVC   SVA(4,@15),FOXES                                    0075
*   GEN(GETMAIN  R,LV=1024,SP=0);                                  0076
         GETMAIN  R,LV=1024,SP=0
*   TREE2=R1;                       /* SET POINTER TO OTHER SEGMENT
*                                      IN TREE                       */
         L     @15,TREEPTR(,PARMPTR)                               0077
         ST    R1,TREE2(,@15)                                      0077
*   TREEPTR=TREE2;                  /* REBASE TREE POINTER TO NEW  0078
*                                      SEGMENT                       */
         L     @15,TREEPTR(,PARMPTR)                               0078
         L     @15,TREE2(,@15)                                     0078
         ST    @15,TREEPTR(,PARMPTR)                               0078
*   AREA=AREA&&AREA;                /* CLEAR THE AREA                */
         XC    AREA(250,@15),AREA(@15)                             0079
*   AREA1=AREA1&&AREA1;             /* CLEAR THE AREA                */
         XC    AREA1(250,@15),AREA1(@15)                           0080
*   AREA2=AREA2&&AREA2;             /* CLEAR THE AREA                */
         XC    AREA2(250,@15),AREA2(@15)                           0081
*   AREA3=AREA3&&AREA3;             /* CLEAR THE AREA                */
         XC    AREA3(250,@15),AREA3(@15)                           0082
*   TREE2=TREE2&&TREE2;             /* CLEAR POINTER TO NEXT SEGMENT */
         L     @05,TREE2(,@15)                                     0083
         LR    @03,@05                                             0083
         XR    @03,@05                                             0083
         ST    @03,TREE2(,@15)                                     0083
*   ENDTREE=ENDTREE&&ENDTREE;       /* CLEAR LAST WORD IN TREE       */
         L     @05,ENDTREE(,@15)                                   0084
         LR    @03,@05                                             0084
         XR    @03,@05                                             0084
         ST    @03,ENDTREE(,@15)                                   0084
*   FIRSTSVA=ADDR(AREA);            /* SET POINTER TO FIRST AREA     */
         LA    @05,AREA(,@15)                                      0085
         ST    @05,FIRSTSVA(,@15)                                  0085
*   LASTWORD=ADDR(ENDTREE);         /* PUT END OF SEGMENT ADDR IN  0086
*                                      TREE                          */
         LA    @03,ENDTREE(,@15)                                   0086
         ST    @03,LASTWORD(,@15)                                  0086
*   CURRENT=FIRSTSVA;               /* SET CURRENT POINTER           */
         ST    @05,CURRENT(,@15)                                   0087
*   RFY                                                            0088
*    (R14) UNRSTD;                                                 0088
*   END;                                                           0089
@EL00003 DS    0H                                                  0089
@EF00003 DS    0H                                                  0089
@ER00003 BR    @14                                                 0089
*                                                                  0090
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE IS CALLED TO UPDATE THE STEP FIELD FOR THE    */
*   /* DATA SET ENTRY OUT ON SWA. THE DATA SET ENQ BLOCK ON SWA IS   */
*   /* INDEXED UNTIL THE DATA SET ENTRY IS FOUND. THEN THE HIGHEST   */
*   /* STEP NUMBER IS PUT IN THE ENTRY ON SWA.                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0090
*SWAUPDTE:                                                         0090
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0090
SWAUPDTE DS    0H                                                  0091
*   RFY                                                            0091
*    (R14) RSTD;                                                   0091
*   SWAPTR=ADDR(NEW1);              /* POINT TO FIRST ENTRY IN SWA   */
         L     @15,TREEPTR(,PARMPTR)                               0092
         L     @05,CURRENT(,@15)                                   0092
         L     @05,SVA(,@05)                                       0092
         LA    @05,NEW1(,@05)                                      0092
         ST    @05,SWAPTR(,@15)                                    0092
*   DO WHILE INDICT^=4;             /* SET UP TO LOOP THROUGH SWA  0093
*                                      BLOCK                         */
         B     @DE00093                                            0093
@DL00093 DS    0H                                                  0094
*     IF DSLGH=DSLGH2 THEN          /* IS THIS DATA SET LENGTH EQUAL?*/
         L     @15,TREEPTR(,PARMPTR)                               0094
         L     @05,CURRENT(,@15)                                   0094
         L     @15,SWAPTR(,@15)                                    0094
         CLC   DSLGH(1,@05),DSLGH2(@15)                            0094
         BNE   @RF00094                                            0094
*       DO;                                                        0095
*                                                                  0095
*         /***********************************************************/
*         /*                                                         */
*         /* YES, ARE DATA SET NAMES EQUAL??                         */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0096
*         IF NEW(1:DSLGH)=DSNAME(1:DSLGH) THEN                     0096
         SLR   @11,@11                                             0096
         IC    @11,DSLGH(,@05)                                     0096
         BCTR  @11,0                                               0096
         EX    @11,@SC00110                                        0096
         BNE   @RF00096                                            0096
*           DO;                                                    0097
*             IF STEP2<STEP3 THEN   /* PUT IN SWA HIGHEST STEP NUMBER*/
         CLC   STEP2(1,@15),STEP3(@05)                             0098
         BNL   @RF00098                                            0098
*               STEP2=STEP3;        /* HIGHEST IS ONE NOT ON SWA     */
         MVC   STEP2(1,@15),STEP3(@05)                             0099
*             EXSHR2=EXSHR2&EXSHR1; /* SET THE MOST RESTRICTIVE    0100
*                                      ATTRIBUTE                     */
@RF00098 L     @15,TREEPTR(,PARMPTR)                               0100
         L     @05,SWAPTR(,@15)                                    0100
         L     @11,DATASET(,PARMPTR)                               0100
         NC    EXSHR2(1,@05),EXSHR1(@11)                           0100
*             EXSHR=EXSHR2;         /* PUT THIS ATTRIBUTE IN THE TREE
*                                      ALSO                          */
         L     @15,CURRENT(,@15)                                   0101
         MVC   EXSHR(1,@15),EXSHR2(@05)                            0101
*             INDICT=4;             /* SET INDICTOR TO STOP DO LOOP  */
         LA    INDICT,4                                            0102
*           END;                                                   0103
*       END;                                                       0104
@RF00096 DS    0H                                                  0105
*     SWAPTR=SWAPTR+3+DSLGH2;       /* UPDATE PTR IN TREE TO SWA     */
@RF00094 L     @15,TREEPTR(,PARMPTR)                               0105
         L     @05,SWAPTR(,@15)                                    0105
         LA    @00,3                                               0105
         ALR   @00,@05                                             0105
         SLR   @11,@11                                             0105
         IC    @11,DSLGH2(,@05)                                    0105
         ALR   @00,@11                                             0105
         ST    @00,SWAPTR(,@15)                                    0105
*   END;                                                           0106
@DE00093 CH    INDICT,@CH00091                                     0106
         BNE   @DL00093                                            0106
*   RFY                                                            0107
*    (R14) UNRSTD;                                                 0107
*   END;                                                           0108
@EL00004 DS    0H                                                  0108
@EF00004 DS    0H                                                  0108
@ER00004 BR    @14                                                 0108
*   END IEFDSTBL;                                                  0109
@DATA    DS    0H
@CH00089 DC    H'0'
@CH00091 DC    H'4'
@CH00088 DC    H'16'
@CH00094 DC    H'52'
@SC00106 CLC   NEW(0,@05),DATASETN(@15)
@SM00108 MVC   NEW(0,@05),DATASETN(@03)
@SC00110 CLC   NEW(0,@05),DSNAME(@15)
@DATD    DSECT
         DS    0F
IEFDSTBL CSECT
         DS    0F
@DATD    DSECT
         DS    0D
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEFDSTBL CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
FOXES    DC    XL4'FFFFFFFF'
PATCH    DC    X'00'
         DS    44XL1
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
SAVETREE EQU   @04
PARMPTR  EQU   @02
INDICT   EQU   @03
R1       EQU   @01
R13      EQU   @13
R14      EQU   @14
PARMLST  EQU   0
SVADSET  EQU   PARMLST
DATASET  EQU   PARMLST+4
TREEPTR  EQU   PARMLST+8
STEP     EQU   PARMLST+15
TREE     EQU   0
TREE2    EQU   TREE
FIRSTSVA EQU   TREE+4
LASTWORD EQU   TREE+8
CURRENT  EQU   TREE+12
SWAPTR   EQU   TREE+16
AREA     EQU   TREE+20
AREA1    EQU   TREE+270
AREA2    EQU   TREE+520
AREA3    EQU   TREE+770
ENDTREE  EQU   TREE+1020
DSENTRY  EQU   0
STEP1    EQU   DSENTRY
EXSHR1   EQU   DSENTRY+1
DSLGH1   EQU   DSENTRY+2
DATASETN EQU   DSENTRY+3
DATATREE EQU   0
SVA      EQU   DATATREE
STEP3    EQU   DATATREE+4
EXSHR    EQU   DATATREE+5
DSLGH    EQU   DATATREE+6
NEW      EQU   DATATREE+7
DSENQ    EQU   0
NEW1     EQU   DSENQ+30
DSENQTRY EQU   0
STEP2    EQU   DSENQTRY
EXSHR2   EQU   DSENQTRY+1
DSLGH2   EQU   DSENQTRY+2
DSNAME   EQU   DSENQTRY+3
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
HEADER   EQU   DSENQ
@NM00001 EQU   PARMLST+12
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00008 EQU   @RC00005
@RF00028 EQU   @RC00021
@RF00036 EQU   @RC00021
@PB00004 EQU   @EL00001
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IEFDSTBL
