         TITLE 'IEFJREAD - PSEUDO ACCESS METHOD READ A SEQUENTIAL REC'
IEFJREAD CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IEFJREAD  72.341'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
*   RPLPTR=R1;                      /* SAVE THE POINTER TO THE RPL   */
         LR    RPLPTR,R1                                           0008
*   RFY                                                            0009
*     R1 UNRSTD;                                                   0009
*   RFY                                                            0010
*     IFGRPL BASED(RPLPTR);         /* THE RPL MACRO IS BASED ON   0010
*                                      RPLPTR                        */
*   RFY                                                            0011
*     IFGACB BASED(RPLDACB);        /* THE ACB IS BASED ON A PTR IN
*                                      THE RPL                       */
*   RFY                                                            0012
*     ACBPRFIX BASED(ADDR(IFGACB)-4);/* GET THE ACB PREFIX           */
*   RFY                                                            0013
*     IEFJAMWD BASED(ACBPRFIX);     /* THE ACCESS METHOD WORK AREA IS
*                                      BASED ON THE ACB PREFIX       */
*   RFY                                                            0014
*     IEFJAREA BASED(CURNTREC);     /* THE COMMON DATA RECORD AREA IS
*                                      BASED ON A PTR TO THE REC TO
*                                      BE READ                       */
*                                                                  0015
*   /*****************************************************************/
*   /*                                                               */
*   /* PERFORM A SEQUENTIAL READ                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0015
*   CURNTREC=AMWDLAST;              /* SET PTR OF REC TO BE READ     */
         L     @10,RPLDACB(,RPLPTR)                                0015
         AL    @10,@CF00232                                        0015
         L     @10,ACBPRFIX(,@10)                                  0015
         L     CURNTREC,AMWDLAST(,@10)                             0015
*   AMWDLAST=NEXTPTR;               /* THE LAST REC NEXTPTR IS IS  0016
*                                      USED TO GET THE NEW REC. THE
*                                      REC FORMAT IS BASED ON      0016
*                                      AMWDLAST                      */
         L     @05,NEXTPTR(,CURNTREC)                              0016
         ST    @05,AMWDLAST(,@10)                                  0016
*   IF NEXTPTR=0 THEN               /* DO A LOOK AHEAD AT THE NEW  0017
*                                      NEXTPTR                       */
         LTR   @05,@05                                             0017
         BNZ   @RF00017                                            0017
*     AMWDEOF=ON;                   /* IF EQUAL TO ZERO THIS IS THE
*                                      LAST REC SO TURN ON EOF BIT   */
         OI    AMWDEOF(@10),B'10000000'                            0018
*   TEXTPTR=RPLAREA;                /* TEXTPTR POINTS TO THE WHERE 0019
*                                      THE REC WILL BE READ INTO     */
@RF00017 L     TEXTPTR,RPLAREA(,RPLPTR)                            0019
*   RECPTR=ADDR(IEFJAREA);          /* POINT TO THE REC TO BE READ   */
         LR    RECPTR,CURNTREC                                     0020
*   IF AMWDMV80=ON THEN             /* IS THE REC TO BE READ A FIXED
*                                      LENGTH                        */
         L     @10,RPLDACB(,RPLPTR)                                0021
         AL    @10,@CF00232                                        0021
         L     @10,ACBPRFIX(,@10)                                  0021
         TM    AMWDMV80(@10),B'01000000'                           0021
         BNO   @RF00021                                            0021
*     TEXTAREA(1:80)=RECTEXT(1:80); /* MOVE A FIXED LGTH REC         */
         MVC   TEXTAREA(80,TEXTPTR),RECTEXT(CURNTREC)              0022
*   ELSE                            /* IF THE AMWDMV80 BIT IS OFF  0023
*                                      MOVE THE VARIABLE LENGTH    0023
*                                      RECTEXT TO THE SPECIFIED AREA */
*     DO;                                                          0023
         B     @RC00021                                            0023
@RF00021 DS    0H                                                  0024
*       TEXTLGTH=LGTH-8;            /* GET THE ACTUAL LGTH           */
         L     TEXTLGTH,LGTH(,CURNTREC)                            0024
         SH    TEXTLGTH,@CH00050                                   0024
*       IF TEXTLGTH<=256 THEN       /* IF GREATER THEN 256 MORE THEN
*                                      ONE MOVE IS NECESSARY         */
         CH    TEXTLGTH,@CH00231                                   0025
         BH    @RF00025                                            0025
*         TEXTAREA(1:TEXTLGTH)=RECTEXT(1:TEXTLGTH);/* MOVE ONCE AND
*                                      END                           */
         LR    @10,TEXTLGTH                                        0026
         BCTR  @10,0                                               0026
         EX    @10,@SM00234                                        0026
*       ELSE                                                       0027
*         DO;                       /* MORE THEN ONE MOVE IS       0027
*                                      NECESSARY                     */
         B     @RC00025                                            0027
@RF00025 DS    0H                                                  0028
*           CTR=TEXTLGTH/256;       /* GET NO OF 256 BYTE MOVES      */
         LR    @00,TEXTLGTH                                        0028
         SRDA  @00,32                                              0028
         D     @00,@CF00231                                        0028
         LR    CTR,@01                                             0028
*           DO WHILE CTR>0;         /* EXECUTE UNTIL ZERO            */
         B     @DE00029                                            0029
@DL00029 DS    0H                                                  0030
*             TEXTAREA(1:256)=RECPTR->RECTEXT(1:256);/* MOVE TEXT    */
         MVC   TEXTAREA(256,TEXTPTR),RECTEXT(RECPTR)               0030
*             TEXTPTR=TEXTPTR+256;  /* UPDATE POINTERS               */
         LA    @10,256                                             0031
         AR    TEXTPTR,@10                                         0031
*             RECPTR=RECPTR+256;    /* UPDATE POINTERS               */
         AR    RECPTR,@10                                          0032
*             CTR=CTR-1;            /* DECREMENT CTR                 */
         BCTR  CTR,0                                               0033
*           END;                                                   0034
@DE00029 LTR   CTR,CTR                                             0034
         BP    @DL00029                                            0034
*           CTR=TEXTLGTH//256;      /* GET REMAINING LGTH            */
         LR    CTR,TEXTLGTH                                        0035
         N     CTR,@CF00236                                        0035
*           TEXTAREA(1:CTR)=RECPTR->RECTEXT(1:CTR);/* MOVE REMAINDRE */
         LR    @10,CTR                                             0036
         BCTR  @10,0                                               0036
         EX    @10,@SM00237                                        0036
*         END;                                                     0037
*     END;                                                         0038
@RC00025 DS    0H                                                  0039
*   RPLDDDD=ADDR(RECTEXT);          /* RETURN THE ADDR OF THE REC IN
*                                      THE RPL                       */
@RC00021 LA    @10,RECTEXT(,CURNTREC)                              0039
         ST    @10,RPLDDDD(,RPLPTR)                                0039
*   END IEFJREAD                    /* RETURN CONTROL TO THE CALLER  */
*                                                                  0040
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IEFJAMWD)                                       */
*/*%INCLUDE SYSLIB  (IEFJAREA)                                       */
*                                                                  0040
*       ;                                                          0040
@EL00001 DS    0H                                                  0040
@EF00001 DS    0H                                                  0040
@ER00001 LM    @14,@12,12(@13)                                     0040
         BR    @14                                                 0040
@DATA    DS    0H
@CH00050 DC    H'8'
@SM00234 MVC   TEXTAREA(0,TEXTPTR),RECTEXT(CURNTREC)
@SM00237 MVC   TEXTAREA(0,TEXTPTR),RECTEXT(RECPTR)
@DATD    DSECT
         DS    0F
IEFJREAD CSECT
         DS    0F
@CF00232 DC    F'-4'
@CF00236 DC    F'255'
@CF00231 DC    F'256'
@CH00231 EQU   @CF00231+2
@DATD    DSECT
         DS    0D
@ENDDATD EQU   *
IEFJREAD CSECT
         NOPR  ((@ENDDATD-@DATD)*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
PTCHREAD DC    X'00'
         DS    9XL1
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RECPTR   EQU   @07
CTR      EQU   @03
CURNTREC EQU   @02
TEXTLGTH EQU   @06
TEXTPTR  EQU   @05
RPLPTR   EQU   @04
R1       EQU   @01
ACBPRFIX EQU   0
TEXTAREA EQU   0
IFGACB   EQU   0
ACBAMBL  EQU   IFGACB+4
ACBIXLST EQU   ACBAMBL
ACBJWA   EQU   ACBIXLST
ACBMACRF EQU   IFGACB+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBLFB   EQU   IFGACB+20
ACBBUFPL EQU   ACBLFB
ACBRECFM EQU   IFGACB+24
ACBCCTYP EQU   IFGACB+25
ACBOPT   EQU   IFGACB+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBEXLST EQU   IFGACB+36
ACBDDNM  EQU   IFGACB+40
ACBOFLGS EQU   IFGACB+48
ACBINFLG EQU   IFGACB+50
ACBUJFCB EQU   IFGACB+52
ACBWAPTR EQU   ACBUJFCB
IFGRPL   EQU   0
RPLIDWD  EQU   IFGRPL
RPLECB   EQU   IFGRPL+8
RPLSTAT  EQU   IFGRPL+12
RPLFDBK  EQU   IFGRPL+13
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLKEYLE EQU   IFGRPL+16
RPLDACB  EQU   IFGRPL+24
RPLAREA  EQU   IFGRPL+32
RPLOPTCD EQU   IFGRPL+40
RPLOPT1  EQU   RPLOPTCD
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLNXTRP EQU   IFGRPL+44
RPLRBAR  EQU   IFGRPL+60
RPL6RBA  EQU   RPLRBAR+2
RPLDDDD  EQU   RPL6RBA+2
IEFJAMWD EQU   0
AMWDLAST EQU   IEFJAMWD+4
AMWDFLG1 EQU   IEFJAMWD+8
AMWDEOF  EQU   AMWDFLG1
AMWDMV80 EQU   AMWDFLG1
IEFJAREA EQU   0
NEXTPTR  EQU   IEFJAREA
LGTH     EQU   IEFJAREA+4
RECTEXT  EQU   IEFJAREA+8
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00019 EQU   IEFJAMWD+10
AMWDFLG2 EQU   IEFJAMWD+9
@NM00018 EQU   AMWDFLG1
AMWDFRST EQU   IEFJAMWD
RPLERMSA EQU   IFGRPL+72
RPLEMLEN EQU   IFGRPL+70
@NM00017 EQU   IFGRPL+68
RPLS2S2  EQU   RPL6RBA
RPLS1S1  EQU   RPLRBAR
@NM00016 EQU   IFGRPL+56
RPLBUFL  EQU   IFGRPL+52
RPLRLEN  EQU   IFGRPL+48
RPLCHAIN EQU   RPLNXTRP
RPLOPT4  EQU   RPLOPTCD+3
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
@NM00015 EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBSW EQU   RPLOPT1
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLARG   EQU   IFGRPL+36
RPLTCBPT EQU   IFGRPL+28
RPLCCHAR EQU   IFGRPL+20
RPLSTRID EQU   IFGRPL+18
RPLKEYL  EQU   RPLKEYLE
RPLERRCD EQU   RPLCNDCD+1
RPLCMPON EQU   RPLCNDCD
RPLERREG EQU   RPLRTNCD
@NM00014 EQU   RPLSTAT
RPLEDRQI EQU   RPLSTAT
RPLCHKI  EQU   RPLSTAT
RPLACTIV EQU   RPLSTAT
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   IFGRPL+4
RPLLEN   EQU   RPLIDWD+3
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
@NM00013 EQU   IFGACB+72
@NM00012 EQU   IFGACB+68
ACBUAPTR EQU   IFGACB+64
ACBLRECL EQU   IFGACB+62
ACBBLKSZ EQU   IFGACB+60
ACBBUFSP EQU   IFGACB+56
@NM00011 EQU   ACBWAPTR+1
ACBOPTN  EQU   ACBWAPTR
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00010 EQU   ACBINFLG
ACBERFLG EQU   IFGACB+49
ACBIOSFG EQU   ACBOFLGS
ACBEXFG  EQU   ACBOFLGS
@NM00009 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00008 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAMETH EQU   ACBDDNM+3
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   IFGACB+32
@NM00007 EQU   IFGACB+28
@NM00006 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00005 EQU   ACBDSORG
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00004 EQU   ACBCCTYP
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
@NM00003 EQU   ACBBUFPL
ACBBUFNI EQU   IFGACB+18
ACBBUFND EQU   IFGACB+16
ACBSTRNO EQU   IFGACB+14
@NM00002 EQU   ACBMACR2
@NM00001 EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
ACBCHN   EQU   ACBMACR2
ACBCBRD  EQU   ACBMACR2
ACBCBOPN EQU   ACBMACR2
ACBUPD   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   IFGACB+8
ACBIBCT  EQU   ACBJWA
ACBLENG  EQU   IFGACB+2
ACBSTYP  EQU   IFGACB+1
ACBID    EQU   IFGACB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@ENDDATA EQU   *
         END   IEFJREAD
