         TITLE 'IGG019TI - FIRST LEVEL DATA HANDLER                    *
                        '
IGG019TI CSECT ,                                                01S0001
@PROLOG  DS    0H                                               01S0002
*                                   /*
*        FIRST LEVEL DATA HANDLER QCB - 3 WORDS
         DC    A(0)                     ELEMENT CHAIN
         DC    A(0)                     LINK
         DC    AL1(06)                  STCB VTO
         DC    AL3(*-1)                 STCB POINTER
         USING IGG019TI,RBASE           MODULE ADDRESSABILITY
*   RBASE=RQCB;                     /* SET BASE REGISTER - REGISTER 7
*                                      AT ENTRY POINTS TO QCB AT
*                                      OFFSET +0 IN THIS MODULE      */
         LR    RBASE,RQCB                                       02S0287
*   RFY                                                         02S0288
*     RQCB UNRSTD;                                              02S0288
*   GEN NOREFS NOSETS NOEXIT SEQFLOW;                           02S0289
IGG019TI IEDHJN AFTERHJN,HJN            IDENTIFICATION MACRO
*   IF RINPUT->PRFPRI=PRIAIPL THEN  /* IF INPUT IS LCB       @YM02949*/
         CLI   PRFPRI(RINPUT),X'DE'                             02S0290
         BNE   @RF00290                                         02S0290
*     DO;                           /* POST OPRE TO OPERATOR CONTROL
*                                                            @YM02949*/
*       RLCB=RINPUT;                /* GET LCB ADDRESS       @YM02949*/
         LR    RLCB,RINPUT                                      02S0292
*       RPARM=CPAOPRE;              /* GET OPRE ADDRESS      @YM02949*/
         L     RPARM,CPAOPRE(,RLCB)                             02S0293
*       CALL DSPPOST;               /* POST OPRE TO OPERATOR CONTROL
*                                                            @YM02949*/
         LA    @15,DSPPOST(,RDISP)                              02S0294
         BALR  @14,@15                                          02S0294
*     END;                          /*                       @YM02949*/
*                                                               02S0296
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS: THIS SEGMENT DOES THE PROCESSING THAT IS NECESSARY TO*/
*   /* PERFORM THE FUNCTION OF THE MODULE.                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0296
*                                                               03S0296
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS.ENTRY: AT ENTRY ESTABLISH THE LCB ADDRESS, MOVE THE   */
*   /* FIRST CCW BACK INTO THE UNIT FROM THE PREFIX, AND INITIALIZE  */
*   /* THE FREE QUEUE POINTER AND THE INTERNAL STATE VALUES.         */
*   /*                                                               */
*   /*****************************************************************/
*                                                               03S0296
*   RPIU=RINPUT&CLRHI;              /* GET POINTER TO FIRST PIU (AND
*                                      CLEAR HI ORDER BYTE)          */
@RF00290 LR    RPIU,RINPUT                                      03S0296
         N     RPIU,@CF01538                                    03S0296
*   RUNIT=RPIU-LENGTH(IEDQCCW);     /* GET ADDR OF CCW IN PREFIX TO
*                                      THE 1ST PIU                   */
         LR    @10,RPIU                                         03S0297
         SL    @10,@CF00044                                     03S0297
         LR    RUNIT,@10                                        03S0297
*   RLCB=PRF1WD2;                   /* GET 3705 LCB ADDR SAVED BY TH
*                                                            @ZM48011*/
         L     RLCB,PRF1WD2(,@10)                               03S0298
*   PRFRCB=RUNIT->CCW;              /* RESTORE CCW FROM PREFIX TO
*                                      START OF THE PIU              */
         MVC   PRFRCB(8,RPIU),CCW(RUNIT)                        03S0299
*   LCBFSBFR=ZERO;                  /* RESET FREE QUEUE POINTER      */
         SLR   @10,@10                                          03S0300
         STCM  @10,7,LCBFSBFR(RLCB)                             03S0300
*   RSTATE=NOSTATE;                 /* INITIALIZE INTERNAL STATE
*                                      VALUES                @YM03702*/
         SLR   RSTATE,RSTATE                                    03S0301
*   RUNIT=RPIU;                     /* SET CURRENT UNIT POINTER TO
*                                      CURRENT PIU POINTER           */
         LR    RUNIT,RPIU                                       03S0302
*   RFY                                                         03S0303
*     RINPUT UNRSTD;                                            03S0303
*   IF PRFOPCDE=CCWWRITE×           /* TEST 1ST CCW IN CHANNEL ...   */
*       PRFOPCDE=CCWBRK THEN        /* ... PROGRAM FOR A WRITE       */
         CLI   PRFOPCDE(RPIU),X'01'                             02S0304
         BE    @RT00304                                         02S0304
         CLI   PRFOPCDE(RPIU),X'09'                             02S0304
         BNE   @RF00304                                         02S0304
@RT00304 DS    0H                                               02S0305
*     DO;                           /* PROCESS WRITE PIU'S           */
*                                                               03S0306
*       /*************************************************************/
*       /*                                                           */
*       /* PROCESS.WRITEPIU: PROCESS EACH WRITE PIU IN THE CHANNEL   */
*       /* PROGRAM. THOSE PIU'S WHICH WERE NOT TRANSMITTED           */
*       /* SUCCESSFULLY ARE REENQUEUED FOR LATER TRANSMISSION. THE   */
*       /* UNITS OF THOSE WHICH WERE TRANSMITTED SUCCESSFULLY ARE    */
*       /* PLACED ON THE FREE QUEUE.                                 */
*       /*                                                           */
*       /*************************************************************/
*                                                               03S0306
*       IF(LCBCSWCA-LENGTH(IEDQCCW))->CCWOPCDE=CCWWS0×/* IF INTERRUPT
*                                      IS ON A WRITE START CCW THEN
*                                                            @YM09094*/
*           (LCBCSWCA-LENGTH(IEDQCCW))->CCWOPCDE=CCWWS1 THEN/*  03S0306
*                                                            @YM09094*/
         L     @10,LCBCSWCA-1(,RLCB)                            03S0306
         LA    @10,0(,@10)                                      03S0306
         SL    @10,@CF00044                                     03S0306
         CLI   CCWOPCDE(@10),X'31'                              03S0306
         BE    @RT00306                                         03S0306
         CLI   CCWOPCDE(@10),X'51'                              03S0306
         BNE   @RF00306                                         03S0306
@RT00306 DS    0H                                               03S0307
*         RSTATE=DRAIN;             /* ALL PIUS IN THE WRITE BTU
*                                      SHOULD BE REPOSTED TO THE CORE
*                                      QUEUE                 @YM09094*/
         LA    RSTATE,1                                         03S0307
*       DO UNTIL RSTATE=ENDWRITE;   /*                       @YM03702*/
@RF00306 DS    0H                                               03S0308
@DL00308 DS    0H                                               03S0309
*                                                               04S0309
*         /***********************************************************/
*         /*                                                         */
*         /* PROCESS.WRITEPIU.SCANPIU: SCAN THE WRITE PIU COUNTING   */
*         /* THE UNITS IN THE THE PIU. IF THE INTERRUPTED CCW IS IN  */
*         /* THE PIU,SET THE INDICATOR 'DRAIN' SO THAT THE PIU (AND  */
*         /* ALL SUBSEQUENT WRITE PIU'S) WILL BE REENQUEUED TO THE   */
*         /* LCB CORE QUEUE.                                         */
*         /*                                                         */
*         /***********************************************************/
*                                                               04S0309
*         RFY                                                   04S0309
*          (RWORK,                                              04S0309
*           RPIUSZ) RSTD;                                       04S0309
*         RPIU=RUNIT;               /* SET PIU TO THE CURRENT UNIT   */
         LR    RPIU,RUNIT                                       04S0310
*         RPIUSZ=PRFPIUO+LENGTH(IEDTH)+TTHDCF;/* COMPUTE PIU SIZE    */
         SLR   @07,@07                                          04S0311
         IC    @07,PRFPIUO(,RPIU)                               04S0311
         LA    RPIUSZ,10                                        04S0311
         ALR   RPIUSZ,@07                                       04S0311
         LA    @03,PRFPIUO(,RPIU)                               04S0311
         ALR   @07,@03                                          04S0311
         SLR   @03,@03                                          04S0311
         ICM   @03,3,TTHDCF(@07)                                04S0311
         ALR   RPIUSZ,@03                                       04S0311
*         RCOUNT=ZERO;              /* INITIALIZE COUNT OF UNITS     */
         SLR   RCOUNT,RCOUNT                                    04S0312
*         DO UNTIL RPIUSZ<=ZERO;    /* PROCESS EACH UNIT OF THE PIU
*                                      UNTIL THE END OF THE PIU IS
*                                      REACHED                       */
@DL00313 DS    0H                                               04S0314
*           IF RSTATE^=DRAIN THEN   /* HAS THE INTERRUPTED CCW BEEN
*                                      FOUND                 @YM03702*/
         LA    @07,1                                            04S0314
         CR    RSTATE,@07                                       04S0314
         BE    @RF00314                                         04S0314
*             DO;                   /* NO, TEST FOR INTERRUPTED CCW  */
*               IF RUNIT->PRFOPCDE=CCWBRK THEN/* IS THIS A WRITE
*                                      BREAK CCW                     */
         CLI   PRFOPCDE(RUNIT),X'09'                            04S0316
         BNE   @RF00316                                         04S0316
*                 IF RUNIT=LCBCSWCA THEN/* YES, WAS INTERRUPT ON THIS
*                                      CCW                           */
         L     @03,LCBCSWCA-1(,RLCB)                            04S0317
         LA    @03,0(,@03)                                      04S0317
         CR    RUNIT,@03                                        04S0317
         BNE   @RF00317                                         04S0317
*                   RSTATE=DRAIN;   /* INDICATE THAT THE INTERRUPTED
*                                      CCW IS FOUND          @YM03702*/
         LR    RSTATE,@07                                       04S0318
*                 ELSE                                          04S0319
*                   ;                                           04S0319
@RF00317 DS    0H                                               04S0320
*               ELSE                /* CCW IS NOT A WRITE BREAK      */
*                 IF RUNIT=LCBCSWCA-LENGTH(IEDQCCW) THEN/* WAS  04S0320
*                                      INTERRUPT ON THIS CCW         */
         B     @RC00316                                         04S0320
@RF00316 L     @07,LCBCSWCA-1(,RLCB)                            04S0320
         LA    @07,0(,@07)                                      04S0320
         SL    @07,@CF00044                                     04S0320
         CR    RUNIT,@07                                        04S0320
         BNE   @RF00320                                         04S0320
*                   RSTATE=DRAIN;   /* INDICATE THAT THE INTERRUPTED
*                                      CCW IS FOUND          @YM03702*/
         LA    RSTATE,1                                         04S0321
*             END;                                              04S0322
@RF00320 DS    0H                                               04S0322
@RC00316 DS    0H                                               04S0323
*           RWORK=RUNIT;            /* SAVE UNIT ADDR (IN CASE IT IS
*                                      LAST UNIT)                    */
@RF00314 LR    RWORK,RUNIT                                      04S0323
*           RUNIT=RUNIT->PRFTI0;    /* GET NEXT UNIT                 */
         L     @07,PRFTI0-1(,RUNIT)                             04S0324
         LA    @07,0(,@07)                                      04S0324
         LR    RUNIT,@07                                        04S0324
*           RCOUNT=RCOUNT+1;        /* INCREMENT COUNT OF UNITS IN
*                                      THE PIU                       */
         AL    RCOUNT,@CF00059                                  04S0325
*           RPIUSZ=RPIUSZ-AVTKEYLE; /* DECREMENT PIU SIZE BY LENGTH
*                                      OF A UNIT                     */
         SH    RPIUSZ,AVTKEYLE(,RAVT)                           04S0326
*         END;                                                  04S0327
@DE00313 LTR   RPIUSZ,RPIUSZ                                    04S0327
         BP    @DL00313                                         04S0327
*         RWORK->PRFTIC=INVTIC;     /* SET INVALID TIC IN LAST UNIT  */
         MVC   PRFTIC(4,RWORK),INVTIC                           04S0328
*         RFY                                                   04S0329
*          (RWORK,                                              04S0329
*           RPIUSZ) UNRSTD;                                     04S0329
*         IF RSTATE=DRAIN THEN      /* SHOULD PIU BE REENQUEUED 03S0330
*                                                            @YM03702*/
         C     RSTATE,@CF00059                                  03S0330
         BNE   @RF00330                                         03S0330
*           DO;                     /* YES, REENQUEUE ON LCB CORE
*                                      QUEUE                         */
*             PRFQCBA=ADDR(LCBCOREQ);/* QUEUE TO LCB CORE QUEUE      */
         LA    @10,LCBCOREQ(,RLCB)                              03S0332
         STCM  @10,7,PRFQCBA(RPIU)                              03S0332
*             PRFPRI=PRIOUTQ;       /* SET PRIORITY                  */
         MVI   PRFPRI(RPIU),X'E0'                               03S0333
*             RFY                                               03S0334
*               RPARM RSTD;                                     03S0334
*             RPARM=RPIU;           /* MAKE THE PIU THE ELEMENT TO
*                                      TPOST                         */
         LR    RPARM,RPIU                                       03S0335
*             CALL DSPPOSTR;        /* CALL DISPATCHER TO TPOST THE
*                                      ELEMENT                       */
         LA    @15,DSPPOSTR(,RDISP)                             03S0336
         BALR  @14,@15                                          03S0336
*             RFY                                               03S0337
*               RPARM UNRSTD;                                   03S0337
*           END;                                                03S0338
*         ELSE                      /* DO NOT REENQUEUE              */
*           DO;                     /* PLACE ITS UNITS ON FREE QUEUE */
         B     @RC00330                                         03S0339
@RF00330 DS    0H                                               03S0340
*                                                               04S0340
*             /*******************************************************/
*             /*                                                     */
*             /* PROCESS.WRITEPIU.PROCPIU: PLACE THE UNITS OF THE    */
*             /* WRITE PIU ON THE FREE QUEUE.                        */
*             /*                                                     */
*             /*******************************************************/
*                                                               04S0340
*             RFY                                               04S0340
*               RWORK RSTD;                                     04S0340
*             PRFNBUNT=RCOUNT;      /* SET COUNT OF UNITS IN THIS
*                                      BUFFER                        */
         STC   RCOUNT,PRFNBUNT(,RPIU)                           04S0341
*             IF LCBFSBFR^=ZERO THEN/* IS THERE A BUFFER ON THE FREE
*                                      QUEUE                         */
         L     @10,LCBFSBFR-1(,RLCB)                            04S0342
         LA    @10,0(,@10)                                      04S0342
         LTR   @10,@10                                          04S0342
         BZ    @RF00342                                         04S0342
*               DO UNTIL RCOUNT=ZERO;/* YES, ADD UNITS OF THIS PIU TO
*                                      THE BUFFER                    */
@DL00343 DS    0H                                               04S0344
*                 RWORK=PRFTI0;     /* GET NEXT UNIT                 */
         L     RWORK,PRFTI0-1(,RPIU)                            04S0344
         LA    RWORK,0(,RWORK)                                  04S0344
*                 IF LCBFSBFR->PRFNBUNT=MAXUNITS THEN/* IS MAXIMUM
*                                      UNITS PER BUFFER REACHED      */
         L     @10,LCBFSBFR-1(,RLCB)                            04S0345
         LA    @10,0(,@10)                                      04S0345
         CLI   PRFNBUNT(@10),255                                04S0345
         BNE   @RF00345                                         04S0345
*                   DO;             /* YES, MAX IS REACHED           */
*                     PRFNBUNT=1;   /* BEGIN NEW BUFFER BY SETTING
*                                      NUMBER OF UNITS TO 1          */
         MVI   PRFNBUNT(RPIU),X'01'                             04S0347
*                     PRFLINK=LCBFSBFR;/* LINK CURRENT PIU TO BUFFER
*                                      ON FREE QUEUE                 */
         STCM  @10,7,PRFLINK(RPIU)                              04S0348
*                     PRFTIC=INVTIC;/* SET INVALID TIC IN UNIT       */
         MVC   PRFTIC(4,RPIU),INVTIC                            04S0349
*                     LCBFSBFR=RPIU;/* PUT CURRENT UNIT AS 1ST BUFFER
*                                      ON FREE QUEUE                 */
         STCM  RPIU,7,LCBFSBFR(RLCB)                            04S0350
*                   END;                                        04S0351
*                 ELSE              /* MAX IS NOT REACHED            */
*                   DO;                                         04S0352
         B     @RC00345                                         04S0352
@RF00345 DS    0H                                               04S0353
*                     PRFNBUNT=LCBFSBFR->PRFNBUNT+1;/* INCREMENT
*                                      NUMBER OF UNITS ON FREE QUEUE */
         L     @10,LCBFSBFR-1(,RLCB)                            04S0353
         LA    @10,0(,@10)                                      04S0353
         LA    @07,1                                            04S0353
         SLR   @03,@03                                          04S0353
         IC    @03,PRFNBUNT(,@10)                               04S0353
         ALR   @07,@03                                          04S0353
         STC   @07,PRFNBUNT(,RPIU)                              04S0353
*                     PRFTI0=LCBFSBFR;/* POINT THIS UNIT TO 1ST ON
*                                      FREE QUEUE                    */
         STCM  @10,7,PRFTI0(RPIU)                               04S0354
*                     PRFLINK=LCBFSBFR->PRFLINK;/* SAVE LINK FROM OLD
*                                      1ST ON QUEUE                  */
         MVC   PRFLINK(3,RPIU),PRFLINK(@10)                     04S0355
*                     LCBFSBFR=RPIU;/* MAKE THIS UNIT 1ST ON FREE
*                                      QUEUE                         */
         STCM  RPIU,7,LCBFSBFR(RLCB)                            04S0356
*                   END;                                        04S0357
*                 RCOUNT=RCOUNT-1;  /* DECREMENT COUNT OF UNITS      */
@RC00345 BCTR  RCOUNT,0                                         04S0358
*                 RPIU=RWORK;       /* GET ADDRESS OF NEXT UNIT      */
         LR    RPIU,RWORK                                       04S0359
*               END;                                            04S0360
@DE00343 LTR   RCOUNT,RCOUNT                                    04S0360
         BNZ   @DL00343                                         04S0360
*             ELSE                  /* NO BUFFERS ON FREE QUEUE      */
*               DO;                                             04S0361
         B     @RC00342                                         04S0361
@RF00342 DS    0H                                               04S0362
*                 LCBFSBFR=RPIU;    /* ADD THIS UNIT AS FIRST ON FREE
*                                      QUEUE                         */
         STCM  RPIU,7,LCBFSBFR(RLCB)                            04S0362
*                 PRFLINK=ZERO;     /* CLEAR LINK                    */
         SLR   @10,@10                                          04S0363
         STCM  @10,7,PRFLINK(RPIU)                              04S0363
*               END;                                            04S0364
*             RFY                                               04S0365
*               RWORK UNRSTD;                                   04S0365
@RC00342 DS    0H                                               04S0366
*           END;                                                03S0366
*         IF RUNIT=INVTICA×         /* IS ADDR OF NEXT UNIT INVALID
*                                      OR ...                        */
*             RUNIT->PRFOPCDE=CCWREAD THEN/* ... IS NEXT CCW A READ  */
@RC00330 SLR   @10,@10                                          03S0367
         ICM   @10,7,INVTICA                                    03S0367
         CR    RUNIT,@10                                        03S0367
         BE    @RT00367                                         03S0367
         CLI   PRFOPCDE(RUNIT),X'02'                            03S0367
         BNE   @RF00367                                         03S0367
@RT00367 DS    0H                                               03S0368
*           RSTATE=ENDWRITE;        /* YES, INDICATE THAT THE END OF
*                                      THE WRITE PIU'S IS REACHED
*                                                            @YM03702*/
         LA    RSTATE,2                                         03S0368
*       END;                                                    03S0369
@RF00367 DS    0H                                               03S0369
@DE00308 C     RSTATE,@CF00130                                  03S0369
         BNE   @DL00308                                         03S0369
*     END;                                                      02S0370
*   RFY                                                         02S0371
*     IEDQPRF BASED(RPRF);          /* BASE FOR BUFFER UNIT          */
@RF00304 DS    0H                                               02S0372
*   RPRF=RUNIT;                     /* SET CURRENT BUFFER TO CURRENT
*                                      UNIT                          */
         LR    RPRF,RUNIT                                       02S0372
*   READBTU=0;                      /* INITIALIZE POINTER TO READ BTU*/
         SLR   @10,@10                                          02S0373
         STCM  @10,7,READBTU(RLCB)                              02S0373
*   IF RPRF^=INVTICA THEN           /* TEST FOR PRESENSE OF A VALID
*                                      CCW => READ PIU               */
         SLR   @10,@10                                          02S0374
         ICM   @10,7,INVTICA                                    02S0374
         CR    RPRF,@10                                         02S0374
         BE    @RF00374                                         02S0374
*     DO;                           /* PROCESS THE READ PIU'S        */
*                                                               03S0376
*       /*************************************************************/
*       /*                                                           */
*       /* PROCESS.READPIU.SCANREAD: SCAN EACH READ PIU AND COUNT THE*/
*       /* TOTAL NUMBER OF UNITS NEEDED TO REPLENISH THE UNIT COUNT. */
*       /*                                                           */
*       /*************************************************************/
*                                                               03S0376
*       RFY                                                     03S0376
*        (REG9,                                                 03S0376
*         REG10) RSTD;                                          03S0376
*       GEN REFS(LCBBFRAV,CSMASK2) SETS(REG9,REG10,LCBBFRAV);   03S0377
*                                     /*
         L     REG10,LCBBFRAV-3(,RLCB)  LOAD WORD CONTAINING   @YM04622
*                                       LCBBFRAV               @YM04622
CSLOOP2  EQU   *                                               @YM04622
         LR    REG9,REG10                                      @YM04622
         N     REG9,CSMASK2             TURN OFF LCBBFRAV IN 9 @YM04622
         CS    REG10,REG9,LCBBFRAV-3(RLCB) CS LCBBFRAV         @YM04622
         BNE   CSLOOP2                  DO AGAIN IF NOT EQUAL  @YM04622
*       RFY                                                     03S0378
*        (REG9,                                                 03S0378
*         REG10) UNRSTD;            /*                       @YM04622*/
*       READBTU=RPRF;               /* SAVE READ BTU FOR POST        */
         STCM  RPRF,7,READBTU(RLCB)                             03S0379
*       RCOUNT=ZERO;                /* CLEAR COUNT FIELD             */
         SLR   RCOUNT,RCOUNT                                    03S0380
*       DO UNTIL RPRF=INVTICA;      /* LOOP THROUGH READ CCW'S UNTIL
*                                      INVALID TIC IS FOUND          */
@DL00381 DS    0H                                               03S0382
*         RCOUNT=RCOUNT+1;          /* INCREMENT COUNT OF UNITS      */
         AL    RCOUNT,@CF00059                                  03S0382
*         RPRF=PRFTI0;              /* GET NEXT UNIT                 */
         L     @10,PRFTI0-1(,RPRF)                              03S0383
         LA    @10,0(,@10)                                      03S0383
         LR    RPRF,@10                                         03S0383
*       END;                                                    03S0384
@DE00381 SLR   @10,@10                                          03S0384
         ICM   @10,7,INVTICA                                    03S0384
         CR    RPRF,@10                                         03S0384
         BNE   @DL00381                                         03S0384
*       LCBRBCT1=1;                 /* SET ONE BUFFER NEEDED         */
         MVI   LCBRBCT1(RLCB),X'01'                             03S0385
*       LCBRBCT2=RCOUNT;            /* SET NUMBER OF UNITS NEEDED IN
*                                      THE BUFFER                    */
         STC   RCOUNT,LCBRBCT2(,RLCB)                           03S0386
*     END;                                                      02S0387
*                                                               03S0388
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS.READPIU: SCAN THE READ PIU'S COUNTING THE NUMBER OF   */
*   /* UNITS NEEDED TO REPLENISH THE READ COUNT. USE THE UNITS ON THE*/
*   /* FREE QUEUE TO REPLENISH THE COUNT. IF MORE UNITS ARE ON THE   */
*   /* QUEUE THAN ARE NEEDED, THEN POST THE EXTRA UNITS TO THE FREE  */
*   /* POOL. IF NOT ENOUGH UNITS ARE AVAILABLE, THEN POST THE ERB TO */
*   /* REQUEST MORE.                                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                               03S0388
*   DO WHILE LCBFSBFR^=ZERO;        /* REMOVE BUFFERS FROM THE FREE
*                                      QUEUE WHILE THERE ARE BUFFERS
*                                      ON THE QUEUE                  */
@RF00374 B     @DE00388                                         03S0388
@DL00388 DS    0H                                               03S0389
*     RPRF=LCBFSBFR;                /* MAKE 1ST ON THE FREE QUEUE THE
*                                      CURRENT BUFFER                */
         L     RPRF,LCBFSBFR-1(,RLCB)                           03S0389
         LA    RPRF,0(,RPRF)                                    03S0389
*     LCBFSBFR=PRFLINK;             /* MAKE THE NEXT BUFFER THE 1ST
*                                      ON FREE QUEUE                 */
         MVC   LCBFSBFR(3,RLCB),PRFLINK(RPRF)                   03S0390
*     IF LCBRBCT2^=ZERO THEN        /* ARE UNITS NEEDED TO REPLENISH
*                                      READ COUNT                    */
         CLI   LCBRBCT2(RLCB),0                                 03S0391
         BE    @RF00391                                         03S0391
*       IF PRFNBUNT>=LCBRBCT2 THEN  /* YES, ARE THERE ENOUGH UNITS IN
*                                      THIS BUFFER TO REPLENISH THE
*                                      COUNT                         */
         CLC   PRFNBUNT(1,RPRF),LCBRBCT2(RLCB)                  03S0392
         BL    @RF00392                                         03S0392
*         DO;                       /* YES, MOVE THE UNITS TO THE ERB
*                                      FROM THE FREE QUEUE           */
*                                                               04S0394
*           /*********************************************************/
*           /*                                                       */
*           /* PROCESS.READPIU.ADDUNITS: ADD UNITS TO THE ERB. THE   */
*           /* UNITS ARE OBTAINED FROM THE FREE QUEUE.               */
*           /*                                                       */
*           /*********************************************************/
*                                                               04S0394
*           DO UNTIL LCBRBCT2=ZERO; /* ADD UNITS TO ERB UNTIL NUMBER
*                                      OF REQUIRED UNITS IS OBTAINED */
@DL00394 DS    0H                                               04S0395
*             RUNIT=RPRF;           /* DELINK ...                    */
         LR    RUNIT,RPRF                                       04S0395
*             RPRF=PRFTI0;          /* ... THE UNIT                  */
         L     @10,PRFTI0-1(,RPRF)                              04S0396
         LA    @10,0(,@10)                                      04S0396
         LR    RPRF,@10                                         04S0396
*             IF RPRF^=INVTICA THEN /* IS THERE ANOTHER UNIT         */
         SLR   @10,@10                                          04S0397
         ICM   @10,7,INVTICA                                    04S0397
         CR    RPRF,@10                                         04S0397
         BE    @RF00397                                         04S0397
*               PRFNBUNT=RUNIT->PRFNBUNT-1;/* YES, CHANGE THE UNIT
*                                      COUNT                         */
         SLR   @10,@10                                          04S0398
         IC    @10,PRFNBUNT(,RUNIT)                             04S0398
         BCTR  @10,0                                            04S0398
         STC   @10,PRFNBUNT(,RPRF)                              04S0398
*             IF LCBERBCH=ZERO THEN /* IS THE ERB CHAIN EMPTY        */
@RF00397 L     @10,LCBERBCH-1(,RLCB)                            04S0399
         LA    @10,0(,@10)                                      04S0399
         LTR   @10,@10                                          04S0399
         BNZ   @RF00399                                         04S0399
*               RUNIT->PRFNBUNT=1;  /* YES, INDICATE ONE UNIT ON
*                                      CHAIN                         */
         MVI   PRFNBUNT(RUNIT),X'01'                            04S0400
*             ELSE                  /* ERB CHAIN IS NOT EMPTY        */
*               RUNIT->PRFNBUNT=LCBERBCH->PRFNBUNT+1;/* UPDATE COUNT
*                                      OF UNITS                      */
         B     @RC00399                                         04S0401
@RF00399 L     @10,LCBERBCH-1(,RLCB)                            04S0401
         LA    @09,1                                            04S0401
         SLR   @07,@07                                          04S0401
         IC    @07,PRFNBUNT(,@10)                               04S0401
         ALR   @09,@07                                          04S0401
         STC   @09,PRFNBUNT(,RUNIT)                             04S0401
*             RUNIT->PRFTI0=LCBERBCH;/* CHAIN THE UNIT ...           */
@RC00399 MVC   PRFTI0(3,RUNIT),LCBERBCH(RLCB)                   04S0402
*             LCBERBCH=RUNIT;       /* ... OFF THE ERB               */
         STCM  RUNIT,7,LCBERBCH(RLCB)                           04S0403
*             LCBRBCT2=LCBRBCT2-1;  /* DECREMENT COUNT OF UNITS 04S0404
*                                      NEEDED                        */
         SLR   @10,@10                                          04S0404
         IC    @10,LCBRBCT2(,RLCB)                              04S0404
         BCTR  @10,0                                            04S0404
         STC   @10,LCBRBCT2(,RLCB)                              04S0404
*           END;                                                04S0405
@DE00394 CLI   LCBRBCT2(RLCB),0                                 04S0405
         BNE   @DL00394                                         04S0405
*           LCBERBQB=RLCB;          /* POST ERB TO DRIVE THE RECEIVE
*                                      SCHEDULER                     */
         STCM  RLCB,7,LCBERBQB(RLCB)                            04S0406
*           LCBERBPY=PRIINTRQ;      /* SET PRIORITY                  */
         MVI   LCBERBPY(RLCB),X'E4'                             04S0407
*           RFY                                                 04S0408
*             RPARM RSTD;                                       04S0408
*           RPARM=ADDR(LCBERB);     /* MAKE THE ERB THE ELEMENT TO
*                                      TPOST*                        */
         LA    RPARM,LCBERB(,RLCB)                              04S0409
*           CALL DSPPOSTR;          /* CALL DISPATCHER TO TPOST THE
*                                      ELEMENT                       */
         LA    @15,DSPPOSTR(,RDISP)                             04S0410
         BALR  @14,@15                                          04S0410
*           RFY                                                 04S0411
*             RPARM UNRSTD;                                     04S0411
*         END;                                                  03S0412
*     IF RPRF^=INVTICA THEN         /* ARE THERE UNITS IN THIS BUFFER
*                                      THAT ARE NOT NEEDED           */
@RF00392 DS    0H                                               03S0413
@RF00391 SLR   @10,@10                                          03S0413
         ICM   @10,7,INVTICA                                    03S0413
         CR    RPRF,@10                                         03S0413
         BE    @RF00413                                         03S0413
*       DO;                         /* YES, POST THEM TO THE FREE
*                                      POOL                          */
*         PRFQCBA=ADDR(AVTBFRTB);   /* SET TO QUEUE TO FREE POOL     */
         LA    @10,AVTBFRTB(,RAVT)                              03S0415
         STCM  @10,7,PRFQCBA(RPRF)                              03S0415
*         PRFPRI=PRIBFRTB;          /* SET PRIORITY                  */
         MVI   PRFPRI(RPRF),X'E0'                               03S0416
*         RFY                                                   03S0417
*           RPARM RSTD;                                         03S0417
*         RPARM=RPRF;               /* MAKE THE BUFFER THE ELEMENT TO
*                                      TPOST                         */
         LR    RPARM,RPRF                                       03S0418
*         CALL DSPPOSTR;            /* CALL DISPATCHER TO TPOST THE
*                                      ELEMENT                       */
         LA    @15,DSPPOSTR(,RDISP)                             03S0419
         BALR  @14,@15                                          03S0419
*         RFY                                                   03S0420
*           RPARM UNRSTD;                                       03S0420
*       END;                                                    03S0421
*   END;                                                        03S0422
@RF00413 DS    0H                                               03S0422
@DE00388 L     @10,LCBFSBFR-1(,RLCB)                            03S0422
         LA    @10,0(,@10)                                      03S0422
         LTR   @10,@10                                          03S0422
         BNZ   @DL00388                                         03S0422
*                                                               04S0423
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS.READPIU.POSTERB: IF BUFFER UNITS ARE NEEDED FROM THE  */
*   /* BUFFER FREE POOL TO REPLENISH THE READ COUNT, THEN POST THE   */
*   /* ERB TO GET THEM.                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                               04S0423
*   IF LCBRBCT2^=ZERO THEN          /* ARE UNITS NEEDED              */
         CLI   LCBRBCT2(RLCB),0                                 04S0423
         BE    @RF00423                                         04S0423
*     DO;                           /* YES, POST THE ERB             */
*       LCBDLNKN=OFF;               /* INDICATE ERB POSTED           */
         NI    LCBDLNKN(RLCB),B'11111110'                       04S0425
*       LCBRCQCB=RLCB;              /* SET QCB TO WHICH BUFFERS WILL
*                                      BE TPOSTED                    */
         ST    RLCB,LCBRCQCB(,RLCB)                             04S0426
*       LCBERBQB=ADDR(AVTBFREB);    /* QUEUE ERB TO AVAILABLE BUFFER
*                                      ROUTINE                       */
         LA    @10,AVTBFREB(,RAVT)                              04S0427
         STCM  @10,7,LCBERBQB(RLCB)                             04S0427
*       LCBERBPY=PRIINTRQ;          /* SET PRIORITY                  */
         MVI   LCBERBPY(RLCB),X'E4'                             04S0428
*       RFY                                                     04S0429
*         RPARM RSTD;                                           04S0429
*       RPARM=ADDR(LCBERB);         /* MAKE THE ERB THE ELEMENT TO
*                                      TPOST                         */
         LA    RPARM,LCBERB(,RLCB)                              04S0430
*       CALL DSPPOSTR;              /* CALL DISPATCHER TO TPOST 04S0431
*                                      ELEMENT                       */
         LA    @15,DSPPOSTR(,RDISP)                             04S0431
         BALR  @14,@15                                          04S0431
*       RFY                                                     04S0432
*         RPARM UNRSTD;                                         04S0432
*     END;                                                      04S0433
*                                                               03S0434
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS.EXIT: POST LCB TO ITSELF IF THE ERB HAS NOT BEEN      */
*   /* POSTED. SET LCB FIELDS AND POST ANY READ PIU'S TO PATH        */
*   /* CONTROL.                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                               03S0434
*   IF LCBDLNKN=ON&                 /* IS THE ...                    */
*       LCBERBCH=ZERO THEN          /* ... ERB POSTED                */
@RF00423 TM    LCBDLNKN(RLCB),B'00000001'                       03S0434
         BNO   @RF00434                                         03S0434
         L     @10,LCBERBCH-1(,RLCB)                            03S0434
         LA    @10,0(,@10)                                      03S0434
         LTR   @10,@10                                          03S0434
         BNZ   @RF00434                                         03S0434
*     DO;                           /* NO, POST THE LCB TO ITSELF    */
*       LCBQCBA=RLCB;               /* SET LCB AS THE QCB            */
         STCM  RLCB,7,LCBQCBA(RLCB)                             03S0436
*       LCBPRI=PRIRESUM;            /* SET PRIORITY          @YM08511*/
         MVI   LCBPRI(RLCB),X'E5'                               03S0437
*       RFY                                                     03S0438
*         RPARM RSTD;                                           03S0438
*       RPARM=RLCB;                 /* MAKE THE LCB THE ELEMENT TO
*                                      TPOST                         */
         LR    RPARM,RLCB                                       03S0439
*       CALL DSPPOSTR;              /* CALL DISPATCHER TO TPOST 03S0440
*                                      ELEMENT                       */
         LA    @15,DSPPOSTR(,RDISP)                             03S0440
         BALR  @14,@15                                          03S0440
*       RFY                                                     03S0441
*         RPARM UNRSTD;                                         03S0441
*     END;                                                      03S0442
*   LCBSTAT1=CLEAR;                 /* CLEAR STATE FIELD             */
@RF00434 MVI   LCBSTAT1(RLCB),X'00'                             03S0443
*   RFY                                                         03S0444
*    (REG9,                                                     03S0444
*     REG10) RSTD;                  /*                       @YM04622*/
*   GEN REFS(CSMASK1,LCBRECVN)      /*                       @YM04622*/
*       SETS(REG9,REG10,LCBRECVN);                              03S0445
*                              /* @YM04622*/
*                                     /*
         L     REG10,LCBRECVN-2(,RLCB)  LOAD WORD CONTAINING   @YM04622
*                                       LCBRECVN               @YM04622
CSLOOP1  EQU   *                                               @YM04622
         LR    REG9,REG10                                      @YM04622
         O     REG9,CSMASK1             TURN ON LCBRECVN IN 9  @YM04622
         CS    REG10,REG9,LCBRECVN-2(RLCB) CS LCBRECVN         @YM04622
         BNE   CSLOOP1                  DO AGAIN IF NOT EQUAL  @YM04622
*   RFY                                                         03S0446
*    (REG9,                                                     03S0446
*     REG10) UNRSTD;                /*                       @YM04622*/
*   LCBTSTSW=CLEAR;                 /* CLEAR TEST-AND-SET SWITCH     */
         MVI   LCBTSTSW(RLCB),X'00'                             03S0447
*   RFY                                                         03S0448
*    (RPARM,                                                    03S0448
*     RSTCB,                                                    03S0448
*     RQCB,                                                     03S0448
*     RRETURN) RSTD;                                            03S0448
*   IF READBTU^=ZERO THEN           /* IS READ BTU AVAILABLE         */
         L     @15,READBTU-1(,RLCB)                             03S0449
         LA    @15,0(,@15)                                      03S0449
         LTR   @15,@15                                          03S0449
         BZ    @RF00449                                         03S0449
*     DO;                           /* YES                           */
*       RPARM=READBTU;              /* SET CURRENT PIU TO READ PIU   */
         LR    RPARM,@15                                        03S0451
*       RPARM->PRFQCBA=SAVTIPCQ;    /* SET DSPBYPAS QCB ADDRESS      */
         L     @15,AVTSAVTP(,RAVT)                              03S0452
         L     @15,SAVTIPCQ(,@15)                               03S0452
         STCM  @15,7,PRFQCBA(RPARM)                             03S0452
*       RPARM->PRFPRI=PRIFLDH;      /* SET DSPBYPAS PRIORITY         */
         MVI   PRFPRI(RPARM),X'E4'                              03S0453
*       RQCB=SAVTIPCQ;              /* QUEUE TO PATH CONTROL @YM03681*/
         LR    RQCB,@15                                         03S0454
*       RSTCB=QCBSTCHN;             /* SET STCB POINTER      @YM03681*/
         L     RSTCB,QCBSTCHN-1(,RQCB)                          03S0455
         LA    RSTCB,0(,RSTCB)                                  03S0455
*       RRETURN=ADDR(DSPBYPAS);     /* EXIT TO BY-PASS               */
         LA    RRETURN,DSPBYPAS(,RDISP)                         03S0456
*     END;                                                      03S0457
*   ELSE                            /* READ BTU NOT AVAILABLE        */
*     RRETURN=ADDR(DSPDISP);        /* RETURN TO DISPATCHER          */
         B     @RC00449                                         03S0458
@RF00449 LA    RRETURN,DSPDISP(,RDISP)                          03S0458
*   RFY                                                         03S0459
*    (RPARM,                                                    03S0459
*     RSTCB,                                                    03S0459
*     RQCB,                                                     03S0459
*     RRETURN) UNRSTD;                                          03S0459
*   END IGG019TI                                                01S0460
*                                                               01S0460
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (TAVTD   )                                       */
*/*%INCLUDE SYSLIB  (TCCWD   )                                       */
*/*%INCLUDE SYSLIB  (TDISPD  )                                       */
*/*%INCLUDE SYSLIB  (TLCBD   )                                       */
*/*%INCLUDE SYSLIB  (TPRFD   )                                       */
*/*%INCLUDE SYSLIB  (TPRIOR  )                                       */
*/*%INCLUDE SYSLIB  (TQCBD   )                                       */
*/*%INCLUDE SYSLIB  (TTHD    )                                       */
*/*%INCLUDE SYSUT5  (RFY     )                                       */
*/*%INCLUDE SYSUT5  (DCL     )                                       */
*/*%INCLUDE SYSUT5  (PROLOGUE)                                       */
*/*%INCLUDE SYSUT5  (PROCESS )                                       */
*/*%INCLUDE SYSUT5  (ENTRY   )                                       */
*/*%INCLUDE SYSUT5  (WRITEPIU)                                       */
*/*%INCLUDE SYSUT5  (SCANPIU )                                       */
*/*%INCLUDE SYSUT5  (PROCPIU )                                       */
*/*%INCLUDE SYSUT5  (SCANREAD)                                       */
*/*%INCLUDE SYSUT5  (READPIU )                                       */
*/*%INCLUDE SYSUT5  (ADDUNITS)                                       */
*/*%INCLUDE SYSUT5  (POSTERB )                                       */
*/*%INCLUDE SYSUT5  (EXIT    )                                       */
*                                                               01S0460
*       ;                                                       01S0460
@EL00001 DS    0H                                               01S0460
@EF00001 DS    0H                                               01S0460
@ER00001 BR    @14                                              01S0460
@DATA    DS    0H
         DS    0F
         DS    0F
@CF00059 DC    F'1'
@CF00130 DC    F'2'
@CF00044 DC    F'8'
@CF01538 DC    XL4'00FFFFFF'
         DS    0D
CSMASK1  DC    X'00000200'
CSMASK2  DC    X'FFFFFFFD'
INVTIC   DS    CL4
         ORG   INVTIC
INVTICC  DC    X'08'
INVTICA  DC    X'000002'
         ORG   INVTIC+4
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
IEDQAPTR EQU   @13
RDISP    EQU   @11
IEDQLPTR EQU   @04
LCBXPTR  EQU   @05
IEDQPPTR EQU   @06
IEDQQPTR EQU   @07
RPIU     EQU   @06
RAVT     EQU   @13
RLCB     EQU   @04
RQCB     EQU   @07
RINPUT   EQU   @01
RPARM    EQU   @01
RSTATE   EQU   @02
RSTCB    EQU   @03
RCOUNT   EQU   @05
RPRF     EQU   @06
RUNIT    EQU   @08
RWORK    EQU   @09
REG9     EQU   @09
REG10    EQU   @10
RPIUSZ   EQU   @10
RBASE    EQU   @12
RRETURN  EQU   @14
RBRANCH  EQU   @15
REG0     EQU   @00
IEDQAVTD EQU   0
AVTSAVEX EQU   IEDQAVTD+216
@NM00003 EQU   IEDQAVTD+316
AVTCKFLG EQU   @NM00003
AVTBASE  EQU   IEDQAVTD+340
AVTPKF   EQU   AVTBASE
AVTOSECB EQU   IEDQAVTD+420
AVTECB1  EQU   AVTOSECB
AVTHG02  EQU   IEDQAVTD+456
AVTDISP  EQU   IEDQAVTD+480
AVTHD    EQU   IEDQAVTD+484
AVTSCOPT EQU   AVTHD
AVTSAVTP EQU   IEDQAVTD+540
AVTSAVTF EQU   AVTSAVTP
AVTCKPEL EQU   IEDQAVTD+580
AVTCKRMV EQU   AVTCKPEL
AVTCKELF EQU   IEDQAVTD+608
AVTCKBYT EQU   IEDQAVTD+619
AVTHG01  EQU   IEDQAVTD+620
AVTCKLNK EQU   IEDQAVTD+624
AVTCRELE EQU   IEDQAVTD+636
AVTCCELE EQU   AVTCRELE
AVTCLRHI EQU   IEDQAVTD+644
AVTADBUF EQU   IEDQAVTD+648
AVTSYSER EQU   IEDQAVTD+656
AVTBFREB EQU   IEDQAVTD+708
AVTBFRFG EQU   IEDQAVTD+712
AVTBFRTB EQU   IEDQAVTD+720
AVTCKPQB EQU   IEDQAVTD+732
AVTCKPTB EQU   AVTCKPQB
AVTCKPEC EQU   AVTCKPQB+4
AVTCKPCC EQU   AVTCKPEC
AVTOPCQB EQU   IEDQAVTD+744
AVTOPCOB EQU   AVTOPCQB
AVTOPCEC EQU   AVTOPCQB+4
AVTOPCCC EQU   AVTOPCEC
AVTOLTQB EQU   IEDQAVTD+756
AVTCWFL1 EQU   IEDQAVTD+852
AVTCWFL2 EQU   IEDQAVTD+853
AVTSUBT  EQU   IEDQAVTD+876
AVTIOTR  EQU   IEDQAVTD+877
AVTKEYLE EQU   IEDQAVTD+960
AVTBIT1  EQU   IEDQAVTD+978
AVTBIT2  EQU   IEDQAVTD+979
AVTBIT3  EQU   IEDQAVTD+980
AVTBIT4  EQU   IEDQAVTD+1064
@NM00085 EQU   IEDQAVTD+1160
IEDNSVTD EQU   0
SAVTDIAG EQU   IEDNSVTD
SAVTDIAF EQU   SAVTDIAG
SAVTLUSQ EQU   IEDNSVTD+88
SAVTIPCQ EQU   IEDNSVTD+144
SAVTTCPU EQU   IEDNSVTD+238
SAVTZELM EQU   IEDNSVTD+270
SAVTRDRV EQU   IEDNSVTD+284
SAVTCKQB EQU   IEDNSVTD+300
SAVTCKTB EQU   SAVTCKQB
SAVTCKEC EQU   SAVTCKQB+4
SAVTCKCC EQU   SAVTCKEC
SAVTNETF EQU   IEDNSVTD+324
SAVTCDRV EQU   IEDNSVTD+332
IEDQCCW  EQU   0
CCW      EQU   IEDQCCW
CCWOPCDE EQU   CCW
CCWFLAGS EQU   CCW+4
IEDQDISP EQU   0
DSPDISP  EQU   4
DSPBYPAS EQU   20
DSPPOST  EQU   24
DSPPOSTR EQU   28
IEDQLCB  EQU   0
LCBRCB   EQU   IEDQLCB
LCBQCBA  EQU   LCBRCB+1
LCBPRI   EQU   LCBRCB+4
LCBTSOB  EQU   IEDQLCB+19
LCBCHAIN EQU   IEDQLCB+20
LCBSCRNN EQU   LCBCHAIN
LCBTETEN EQU   LCBCHAIN
LCBINSRC EQU   IEDQLCB+21
LCBLKMDE EQU   LCBINSRC+2
LCBNTXT  EQU   IEDQLCB+24
LCBSTAT4 EQU   LCBNTXT
LCBPHASE EQU   LCBSTAT4
LCBSCBDA EQU   IEDQLCB+25
LCBMHA   EQU   IEDQLCB+29
LCBFSBFR EQU   LCBMHA
LCBFLAG1 EQU   IEDQLCB+32
LCBIOBSN EQU   IEDQLCB+33
LCBSNS   EQU   LCBIOBSN+1
LCBSENS0 EQU   LCBSNS
LCBLOSDT EQU   LCBSENS0
LCBTMOUT EQU   LCBSENS0
LCBFLAG3 EQU   LCBIOBSN+7
LCBCSW   EQU   LCBIOBSN+8
LCBCSWCA EQU   LCBCSW
LCBCSWST EQU   LCBCSW+3
LCBCSWUS EQU   LCBCSWST
LCBCSWCS EQU   LCBCSWST+1
LCBSIOCC EQU   LCBIOBSN+15
LCBDCBPT EQU   IEDQLCB+52
LCBRCQCB EQU   IEDQLCB+56
LCBRESTR EQU   LCBRCQCB
@NM00118 EQU   IEDQLCB+60
LCBINCAM EQU   @NM00118
LCBERRCT EQU   IEDQLCB+62
LCBLSPCI EQU   IEDQLCB+65
LCBRCBFR EQU   LCBLSPCI
LCBSTATE EQU   IEDQLCB+70
LCBSTAT1 EQU   LCBSTATE
LCBRECVN EQU   LCBSTAT1
LCBSTAT2 EQU   LCBSTATE+1
LCBBEOTN EQU   LCBSTAT2
LCBSYNC  EQU   LCBSTAT2
LCBDIAL  EQU   LCBSTAT2
LCBBFRAV EQU   LCBDIAL
LCBTSTSW EQU   IEDQLCB+72
LCBERB   EQU   IEDQLCB+76
LCBERBQB EQU   LCBERB+1
LCBERBPY EQU   IEDQLCB+80
LCBERBST EQU   IEDQLCB+84
LCBDLNKN EQU   LCBERBST
LCBERBCH EQU   IEDQLCB+85
LCBERBCT EQU   IEDQLCB+88
LCBRBCT1 EQU   LCBERBCT
LCBRBCT2 EQU   LCBERBCT+1
LCBMSGFM EQU   IEDQLCB+92
LCBOBRCH EQU   IEDQLCB+96
LCBERMSK EQU   LCBOBRCH
LCBNXMOD EQU   LCBERMSK
LCBSTAT7 EQU   LCBNXMOD
LCBINVPT EQU   LCBOBRCH+1
LCBBFRW  EQU   LCBINVPT
LCBTPCD  EQU   IEDQLCB+100
LCBSTAT5 EQU   LCBTPCD
LCBSTAT6 EQU   LCBTPCD+4
LCBRSPSV EQU   LCBTPCD+8
LCBSAVSN EQU   IEDQLCB+112
LCBERCCW EQU   IEDQLCB+120
LCBCPA   EQU   IEDQLCB+144
LCBCCW1  EQU   LCBCPA
LCBCCW2  EQU   LCBCPA+8
LCBCCW5  EQU   LCBCPA+32
LCBATTEL EQU   LCBCCW5
LCBQEBPL EQU   LCBATTEL
IEDQLCBX EQU   0
LCBXCON  EQU   IEDQLCBX
LCBXFLAG EQU   LCBXCON
LCBXDCT  EQU   LCBXCON+1
LCBXRADR EQU   LCBXCON+4
IEDQPRF  EQU   0
PRFRCB   EQU   IEDQPRF
PRFKEY   EQU   PRFRCB
PRFOPCDE EQU   PRFKEY
PRFQCBA  EQU   PRFRCB+1
PRFPRI   EQU   PRFRCB+4
PRFLINK  EQU   PRFRCB+5
PRFTIC   EQU   IEDQPRF+8
PRFTICC  EQU   PRFTIC
PRFTI0   EQU   PRFTIC+1
PRFVTCHK EQU   PRFTI0+2
PRFNBUNT EQU   IEDQPRF+12
PRFSUNIT EQU   PRFNBUNT
PRFPLQCB EQU   PRFSUNIT
PRFPIUO  EQU   PRFPLQCB
PRFSRCSZ EQU   IEDQPRF+16
PRFSTAT1 EQU   IEDQPRF+20
PRFEOFN  EQU   PRFSTAT1
PRFCORE  EQU   IEDQPRF+21
PRFXTRA  EQU   PRFCORE
PRFLU1TT EQU   PRFXTRA+1
PRFSCAN  EQU   IEDQPRF+24
PRFTQBCK EQU   IEDQPRF+26
PRFNTXT  EQU   PRFTQBCK
PRFEOBOF EQU   PRFNTXT
PRFLU2TT EQU   PRFNTXT+1
PRFCHDR  EQU   IEDQPRF+32
PRFHQBCK EQU   IEDQPRF+35
IEDPF1   EQU   0
PRF1FLG1 EQU   IEDPF1+3
PRF1WD2  EQU   IEDPF1+4
PRF1SEQP EQU   PRF1WD2
PRF1SQID EQU   PRF1SEQP
PRF1TAG1 EQU   PRF1SQID
PRF1RULN EQU   PRF1SEQP+2
IEDPF2   EQU   0
PRF2FLG2 EQU   IEDPF2
PRF2WD2  EQU   IEDPF2+4
IEDQQCB  EQU   0
QCBDSFLG EQU   IEDQQCB
QCBDISK  EQU   QCBDSFLG
QCBELCHN EQU   IEDQQCB+1
QCBSTCHN EQU   IEDQQCB+9
QCBEOLDT EQU   IEDQQCB+16
QCBBYTE1 EQU   QCBEOLDT+1
QCBLKRLN EQU   IEDQQCB+18
QCBRETCT EQU   QCBLKRLN
QCBSTAT  EQU   IEDQQCB+19
QCBINSRC EQU   IEDQQCB+21
QCBTSOF2 EQU   QCBINSRC+1
QCBTSOF1 EQU   QCBINSRC+2
QCBINTVL EQU   IEDQQCB+24
QCBPREN  EQU   IEDQQCB+28
QCBLKRRN EQU   QCBPREN+1
QCBDCBAD EQU   IEDQQCB+33
QCBFLAG  EQU   IEDQQCB+36
IEDQPQCB EQU   0
QCBFHDLZ EQU   IEDQPQCB+3
QCBFHDTZ EQU   IEDQPQCB+6
QCBINTLF EQU   IEDQPQCB+12
IEDNQCB  EQU   0
QCBSTAT1 EQU   IEDNQCB+4
QCBPLCBA EQU   IEDNQCB+5
IEDTH    EQU   0
TTHBYTE0 EQU   IEDTH
TTHSNF   EQU   IEDTH+6
TTHTAG   EQU   TTHSNF
TTHTAG1  EQU   TTHTAG
TTHDCF   EQU   IEDTH+8
DSPCHAIN EQU   12
DSPLIFO  EQU   56
DSPLIFOR EQU   60
DSPLIST  EQU   8
DSPPRIO  EQU   48
DSPPRIOR EQU   52
DSPTRACE EQU   64
DSPTSTQ  EQU   32
DSPTSTQR EQU   36
DSPUNAV  EQU   40
DSPUNAVR EQU   44
DSPWAIT  EQU   16
QCBLDCB  EQU   0
LCBRSPIN EQU   LCBIOBSN
LCBRHSV  EQU   LCBRSPIN+2
LCBLUSNS EQU   LCBRSPIN+5
LCBSCPRS EQU   LCBRSPIN+9
LCBCSWU1 EQU   LCBSCPRS+2
LCBRSPFG EQU   LCBRSPIN+15
LCBCOREQ EQU   LCBTPCD
@NM00140 EQU   LCBCPA+40
LCBQNX   EQU   LCBERCCW
LCBQNXMN EQU   LCBQNX
LCBCANCL EQU   LCBSAVSN
LCBCANFG EQU   LCBCANCL
@NM00163 EQU   PRFSRCSZ
@NM00173 EQU   QCBFHDLZ
READBTU  EQU   LCBCCW2+5
CPA      EQU   LCBCCW1
CPAOPRE  EQU   CPA+4
PRFSHDR  EQU   IEDQPRF+42
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00178 EQU   CPA
QCBPFEFO EQU   @NM00173+1
QCBDATFL EQU   @NM00173
PRFSVFLG EQU   @NM00163+3
PRFSVFFO EQU   @NM00163
@NM00147 EQU   LCBCANCL+3
LCBCANTH EQU   LCBCANCL+1
@NM00146 EQU   LCBCANFG
LCBCANCD EQU   LCBCANFG
@NM00145 EQU   LCBCANFG
LCBCANEB EQU   LCBCANFG
LCBCANXT EQU   LCBCANFG
LCBUNADD EQU   LCBQNX+21
LCBUASZE EQU   LCBQNX+20
LCBDSTEA EQU   LCBQNX+16
@NM00144 EQU   LCBQNX+8
LCBIOSBS EQU   LCBQNX+5
@NM00143 EQU   LCBQNX+4
LCBSTSAV EQU   LCBQNX+1
@NM00142 EQU   LCBQNXMN
LCBNX509 EQU   LCBQNXMN
LCBNX162 EQU   LCBQNXMN
LCBNX142 EQU   LCBQNXMN
LCBNX064 EQU   LCBQNXMN
LCBSIBPT EQU   @NM00140+8
LCBSUSPT EQU   @NM00140+4
LCBNCPPT EQU   @NM00140+1
@NM00141 EQU   @NM00140
LCBWRSCH EQU   LCBCOREQ+8
LCBCQLNK EQU   LCBCOREQ+4
LCBCQELE EQU   LCBCOREQ
LCBPAKCH EQU   LCBRSPIN+16
@NM00139 EQU   LCBRSPFG
LCBIMRSP EQU   LCBRSPFG
LCBPRSPO EQU   LCBRSPFG
LCBRSRH  EQU   LCBRSPFG
LCBEXPI  EQU   LCBRSPFG
@NM00138 EQU   LCBRSPIN+12
LCBUSUE1 EQU   LCBCSWU1
@NM00137 EQU   LCBCSWU1
@NM00136 EQU   LCBSCPRS+1
LCBDFCMD EQU   LCBSCPRS
LCBUSER  EQU   LCBLUSNS+2
LCBSMIN  EQU   LCBLUSNS+1
LCBSMAJ  EQU   LCBLUSNS
LCBPACRS EQU   LCBRHSV
@NM00135 EQU   LCBRHSV
LCBSNS0  EQU   LCBRSPIN+1
@NM00134 EQU   LCBRSPIN
TTHTAG2  EQU   TTHTAG+1
@NM00177 EQU   TTHTAG1
TTHTAGS  EQU   TTHTAG1
TTHOAF   EQU   IEDTH+4
TTHDAF   EQU   IEDTH+2
TTHBYTE1 EQU   IEDTH+1
TTHEFI   EQU   TTHBYTE0
@NM00176 EQU   TTHBYTE0
TTHEBIU  EQU   TTHBYTE0
TTHBBIU  EQU   TTHBYTE0
TTHFTYPE EQU   TTHBYTE0
QCBTTCIN EQU   QCBPLCBA+1
@NM00175 EQU   QCBPLCBA
@NM00174 EQU   QCBSTAT1
QCBFLUSH EQU   QCBSTAT1
QCBNDXRQ EQU   QCBSTAT1
QCBESIG  EQU   QCBSTAT1
QCBRCVRQ EQU   QCBSTAT1
QCBSNDRQ EQU   QCBSTAT1
QCBWAITC EQU   QCBSTAT1
QCBPLCBN EQU   QCBSTAT1
QCBCHAIN EQU   IEDNQCB
QCBPQBCK EQU   IEDQPQCB+25
QCBPRIPQ EQU   IEDQPQCB+24
QCBCFHDR EQU   IEDQPQCB+21
QCBLFEFO EQU   IEDQPQCB+18
QCBFFEFO EQU   IEDQPQCB+15
QCBPREVF EQU   QCBINTLF
QCBINTFF EQU   IEDQPQCB+9
QCBDATSQ EQU   QCBFHDTZ+1
@NM00172 EQU   QCBFHDTZ
QCBDNHDR EQU   IEDQPQCB
QCBQBACK EQU   IEDQQCB+37
QCBCKPT  EQU   QCBFLAG
QCBPROC  EQU   QCBFLAG
QCBSDFFO EQU   QCBFLAG
QCBTERMQ EQU   QCBFLAG
QCBRSRV  EQU   QCBFLAG
QCBREAD  EQU   QCBFLAG
QCBNOBRK EQU   QCBFLAG
QCBTSSES EQU   QCBFLAG
QCBLGBAD EQU   QCBDCBAD
QCBRELLN EQU   IEDQQCB+32
QCBTJID  EQU   QCBLKRRN+1
QCBCARCT EQU   QCBLKRRN
QCBPRLVL EQU   QCBPREN
QCBMSGCT EQU   IEDQQCB+26
QCBEXTO  EQU   QCBINTVL
QCBDISC  EQU   QCBTSOF1
QCBDELAY EQU   QCBTSOF1
QCBPARTO EQU   QCBTSOF1
QCBSATRD EQU   QCBTSOF1
QCBNOBUF EQU   QCBTSOF1
QCBTPUT  EQU   QCBTSOF1
QCBTGET  EQU   QCBTSOF1
QCBWRBRK EQU   QCBTSOF1
QCBSATLC EQU   QCBTSOF2
QCBSATTI EQU   QCBTSOF2
QCBSATCH EQU   QCBTSOF2
QCBSIMRD EQU   QCBTSOF2
QCBDSSMI EQU   QCBTSOF2
QCBPOSTO EQU   QCBTSOF2
QCBBUFQ  EQU   QCBTSOF2
QCBINHBN EQU   QCBTSOF2
QCBSATCT EQU   QCBINSRC
QCBSCBOF EQU   IEDQQCB+20
QCBTIME  EQU   QCBSTAT
QCBCLOCK EQU   QCBSTAT
QCBSCHDL EQU   QCBSTAT
QCBSMODE EQU   QCBSTAT
QCBSEND  EQU   QCBSTAT
QCBBUFRD EQU   QCBSTAT
QCBTRMHO EQU   QCBSTAT
QCBEOM   EQU   QCBSTAT
QCBHUCT  EQU   QCBRETCT
QCBIEND  EQU   QCBRETCT
QCBEND   EQU   QCBRETCT
QCBNL    EQU   QCBRETCT
QCBLOGCT EQU   QCBRETCT
@NM00171 EQU   QCBBYTE1
QCBRITRM EQU   QCBBYTE1
@NM00170 EQU   QCBEOLDT
QCBSLINK EQU   IEDQQCB+13
QCBSTPRI EQU   IEDQQCB+12
QCBSTVTO EQU   IEDQQCB+8
QCBLINK  EQU   IEDQQCB+5
QCBPRI   EQU   IEDQQCB+4
QCBCNTEN EQU   QCBELCHN+2
@NM00169 EQU   QCBELCHN+2
@NM00168 EQU   QCBELCHN
QCBHELD  EQU   QCBDSFLG
QCBFQCB  EQU   QCBDSFLG
QCBDRQQ  EQU   QCBDSFLG
QCBALTMH EQU   QCBDSFLG
QCBREUS  EQU   QCBDISK
QCBNREUS EQU   QCBDISK
QCBCORE  EQU   QCBDSFLG
QCBTSQ   EQU   QCBDSFLG
PRF2SEQP EQU   PRF2WD2
@NM00167 EQU   IEDPF2+1
@NM00166 EQU   PRF2FLG2
PRF2TERM EQU   PRF2FLG2
PRF2SMI  EQU   PRF2FLG2
PRF2FORM EQU   PRF2FLG2
PRF2TNTI EQU   PRF2FLG2
PRF1RCDE EQU   PRF1RULN
PRF1TAG2 EQU   PRF1SQID+1
@NM00165 EQU   PRF1TAG1
PRF1TAGS EQU   PRF1TAG1
@NM00164 EQU   PRF1FLG1
PRF1LOGD EQU   PRF1FLG1
PRF1USS  EQU   PRF1FLG1
PRF1FORM EQU   PRF1FLG1
PRF1EXPI EQU   PRF1FLG1
PRF1FIDI EQU   PRF1FLG1
PRF1RH   EQU   IEDPF1
PRFDEST  EQU   IEDQPRF+40
PRFISEQ  EQU   IEDQPRF+38
PRFSTXT  EQU   PRFHQBCK
PRFNHDR  EQU   PRFCHDR
PRFCRCD  EQU   IEDQPRF+29
PRFSVSEQ EQU   PRFLU2TT
PRFSVPRI EQU   PRFEOBOF
PRFISIZE EQU   PRFSCAN+1
@NM00162 EQU   PRFSCAN
PRFEOB   EQU   PRFLU1TT
PRFSTSO  EQU   PRFXTRA
PRFNHDRN EQU   PRFSTAT1
PRFNLSTN EQU   PRFSTAT1
PRFLOCK  EQU   PRFEOFN
PRFDUPLN EQU   PRFSTAT1
PRFTSMSG EQU   PRFSTAT1
PRFITCPN EQU   PRFSTAT1
PRFERMGN EQU   PRFSTAT1
PRFCNCLN EQU   PRFSTAT1
PRFSIZE  EQU   PRFSRCSZ+2
PRFSRCE  EQU   PRFSRCSZ
PRFLCB   EQU   IEDQPRF+13
@NM00161 EQU   PRFVTCHK
PRFITSET EQU   PRFVTCHK
@NM00160 EQU   PRFVTCHK
@NM00159 EQU   PRFTI0
@NM00158 EQU   PRFTICC
@NM00157 EQU   PRFTICC
@NM00156 EQU   PRFTICC
PRFTICON EQU   PRFTICC
@NM00155 EQU   PRFTICC
@NM00154 EQU   PRFTICC
PRFBFMM  EQU   PRFTICC
PRFEOMSG EQU   PRFTICC
PRFCOUNT EQU   PRFLINK+1
@NM00153 EQU   PRFLINK
PRFFLAGS EQU   PRFPRI
PRFIOADR EQU   PRFQCBA
LCBERADR EQU   LCBXRADR+1
LCBPCIRC EQU   LCBXRADR
LCBDCT3  EQU   LCBXDCT+2
LCBDCT2  EQU   LCBXDCT+1
LCBDCT1  EQU   LCBXDCT
@NM00152 EQU   LCBXFLAG
LCBERPND EQU   LCBXFLAG
LCBSRCPF EQU   LCBXFLAG
LCBGPCTV EQU   LCBXFLAG
@NM00151 EQU   LCBXFLAG
@NM00150 EQU   LCBXFLAG
@NM00149 EQU   LCBXFLAG
@NM00148 EQU   LCBXFLAG
LCBCCW10 EQU   LCBCPA+72
LCBCCW9  EQU   LCBCPA+64
LCBCCW8  EQU   LCBCPA+56
LCBCCW7  EQU   LCBCPA+48
LCBCCW6  EQU   LCBCPA+40
LCBCP    EQU   LCBQEBPL+4
LCBIOSB  EQU   LCBQEBPL+1
LCBSIO   EQU   LCBQEBPL
LCBCCW4  EQU   LCBCPA+24
LCBCCW3  EQU   LCBCPA+16
@NM00133 EQU   LCBERCCW+16
LCBATL05 EQU   LCBERCCW+8
@NM00132 EQU   LCBERCCW
LCBCSWSV EQU   LCBSAVSN+1
LCBSNSV  EQU   LCBSAVSN
LCBBFSNS EQU   LCBRSPSV
LCBWAITC EQU   LCBTPCD+5
LCBINPAK EQU   LCBSTAT6
LCBMHBID EQU   LCBSTAT6
@NM00131 EQU   LCBSTAT6
LCBHDRPD EQU   LCBSTAT6
LCBCHN   EQU   LCBSTAT6
LCBBFRSV EQU   LCBTPCD+1
@NM00130 EQU   LCBSTAT5
LCBSUSFG EQU   LCBSTAT5
LCBLUS   EQU   LCBSTAT5
LCBLUNIT EQU   LCBSTAT5
LCBPERM  EQU   LCBSTAT5
LCBNXCMD EQU   LCBBFRW
@NM00129 EQU   LCBSTAT7
LCBCDFD0 EQU   LCBSTAT7
LCBSCBA  EQU   IEDQLCB+93
LCBOLT   EQU   LCBMSGFM
LCBEOT   EQU   LCBMSGFM
LCBENQ   EQU   LCBMSGFM
LCBTTD   EQU   LCBMSGFM
LCBRSTRT EQU   LCBMSGFM
LCBVSTRT EQU   LCBMSGFM
LCBACKI  EQU   LCBMSGFM
LCBNAK   EQU   LCBMSGFM
LCBTTCIN EQU   IEDQLCB+90
@NM00128 EQU   LCBRBCT2
LCBDCNT  EQU   LCBRBCT2
LCBCOMPL EQU   LCBDLNKN
LCBPRCPG EQU   LCBERBST
LCBERROR EQU   LCBERBST
@NM00127 EQU   LCBERBST
LCBINQ   EQU   LCBERBST
LCBRDERR EQU   LCBERBST
LCBEOMSG EQU   LCBERBST
LCBMSG   EQU   LCBERBST
LCBERBLK EQU   IEDQLCB+81
LCBERBKY EQU   LCBERB
LCBRECAD EQU   IEDQLCB+73
@NM00126 EQU   LCBTSTSW
@NM00125 EQU   LCBTSTSW
@NM00124 EQU   LCBTSTSW
@NM00123 EQU   LCBTSTSW
@NM00122 EQU   LCBTSTSW
@NM00121 EQU   LCBTSTSW
@NM00120 EQU   LCBTSTSW
LCBCONCT EQU   LCBTSTSW
LCBRESP  EQU   LCBSTAT2
LCBATTN  EQU   LCBSYNC
LCBNEGRP EQU   LCBSTAT2
LCBSNDPR EQU   LCBSTAT2
LCBCONNN EQU   LCBBEOTN
LCBMSGNN EQU   LCBSTAT2
LCBTRACE EQU   LCBSTAT2
LCBSENDN EQU   LCBSTAT1
LCBFREEN EQU   LCBSTAT1
LCBCONT  EQU   LCBSTAT1
LCBINITN EQU   LCBSTAT1
LCBOCNI  EQU   LCBSTAT1
LCBOCWTN EQU   LCBSTAT1
LCBRCLLN EQU   LCBSTAT1
LCBRECOF EQU   IEDQLCB+68
LCBRDBFR EQU   LCBRCBFR
LCBUCBX  EQU   IEDQLCB+64
LCBTTBIN EQU   LCBERRCT
LCBINTBF EQU   LCBINCAM+1
@NM00119 EQU   LCBINCAM
LCBGETMN EQU   LCBINCAM
@NM00117 EQU   LCBRESTR+1
LCBCMDSV EQU   LCBRESTR
LCBPCILK EQU   LCBDCBPT
LCBSTART EQU   LCBIOBSN+16
LCBAP4OL EQU   LCBSIOCC
LCBAP3OL EQU   LCBSIOCC
LCBAP2OL EQU   LCBSIOCC
LCBAP1OL EQU   LCBSIOCC
LCBSIOC2 EQU   LCBSIOCC
LCBSIOC1 EQU   LCBSIOCC
@NM00116 EQU   LCBSIOCC
LCBCSWRC EQU   LCBCSW+5
LCBCSCHC EQU   LCBCSWCS
LCBCSICC EQU   LCBCSWCS
LCBCSCCC EQU   LCBCSWCS
LCBCSCDC EQU   LCBCSWCS
LCBCSPTC EQU   LCBCSWCS
LCBCSPGC EQU   LCBCSWCS
LCBCSIL  EQU   LCBCSWCS
LCBCSPCI EQU   LCBCSWCS
LCBUSUE  EQU   LCBCSWUS
LCBUSUC  EQU   LCBCSWUS
LCBUSDE  EQU   LCBCSWUS
LCBUSCE  EQU   LCBCSWUS
LCBUSBSY EQU   LCBCSWUS
LCBUSCUE EQU   LCBCSWUS
LCBUSSM  EQU   LCBCSWUS
LCBUSAT  EQU   LCBCSWUS
LCBOBR   EQU   LCBFLAG3
LCBOBRRD EQU   LCBFLAG3
LCBIOMSG EQU   LCBFLAG3
LCBSOHC  EQU   LCBFLAG3
LCBRLAD  EQU   LCBFLAG3
LCBSOHR  EQU   LCBFLAG3
@NM00115 EQU   LCBFLAG3
LCBECBPT EQU   LCBIOBSN+4
LCBECBCC EQU   LCBIOBSN+3
LCBSENS1 EQU   LCBSNS+1
LCBABORT EQU   LCBTMOUT
LCBNOTIN EQU   LCBLOSDT
LCBOVRUN EQU   LCBSENS0
LCBDATCK EQU   LCBSENS0
LCBEQUCK EQU   LCBSENS0
LCBBUSCK EQU   LCBSENS0
LCBINTRQ EQU   LCBSENS0
LCBCMDRJ EQU   LCBSENS0
LCBFLAG2 EQU   LCBIOBSN
@NM00114 EQU   LCBFLAG1
LCBUNREL EQU   LCBFLAG1
LCBEXCPN EQU   LCBFLAG1
@NM00113 EQU   LCBFLAG1
LCBERPIN EQU   LCBFLAG1
@NM00112 EQU   LCBFLAG1
LCBISZE  EQU   IEDQLCB+28
LCBLNENT EQU   LCBSCBDA+1
@NM00111 EQU   LCBSCBDA
LCBCPGMH EQU   LCBSTAT4
LCBREAL  EQU   LCBPHASE
@NM00110 EQU   LCBSTAT4
LCBACTRQ EQU   LCBSTAT4
LCBIPLRQ EQU   LCBSTAT4
LCBDACRQ EQU   LCBSTAT4
LCBDMPRQ EQU   LCBSTAT4
@NM00109 EQU   LCBLKMDE
LCBLOCKI EQU   LCBLKMDE
LCBLOCKR EQU   LCBLKMDE
LCBHMFLG EQU   LCBLKMDE
LCBBDFLG EQU   LCBLKMDE
LCBLKDST EQU   LCBINSRC
LCBABRTN EQU   LCBCHAIN
LCBCTLMD EQU   LCBTETEN
LCBBFRSZ EQU   LCBCHAIN
LCBUREQN EQU   LCBCHAIN
LCBNORTY EQU   LCBCHAIN
LCBERMSG EQU   LCBCHAIN
LCBEXCP  EQU   LCBCHAIN
LCBINVRQ EQU   LCBSCRNN
LCB2741N EQU   LCBTSOB
LCBINHBN EQU   LCBTSOB
LCBCIRCD EQU   LCBTSOB
LCBPREP  EQU   LCBTSOB
LCBSOPL  EQU   LCBTSOB
LCBSATRD EQU   LCBTSOB
LCBTSBUF EQU   LCBTSOB
LCBWRBRK EQU   LCBTSOB
LCBTDL   EQU   IEDQLCB+18
LCBEOLTD EQU   IEDQLCB+16
LCBRSLNK EQU   IEDQLCB+13
LCBRSPRI EQU   IEDQLCB+12
LCBSTCBA EQU   IEDQLCB+9
LCBRSKEY EQU   IEDQLCB+8
LCBLINK  EQU   LCBRCB+5
LCBKEY   EQU   LCBRCB
CCWCOUNT EQU   CCW+6
CCWRSV   EQU   CCW+5
@NM00108 EQU   CCWFLAGS
CCWIDA   EQU   CCWFLAGS
CCWPCI   EQU   CCWFLAGS
CCWSKIP  EQU   CCWFLAGS
CCWSLI   EQU   CCWFLAGS
CCWCC    EQU   CCWFLAGS
CCWCD    EQU   CCWFLAGS
CCWADDR  EQU   CCW+1
SAVTLLCB EQU   IEDNSVTD+380
SAVTSCF0 EQU   IEDNSVTD+376
SAVTLSNY EQU   IEDNSVTD+372
SAVTLSZP EQU   IEDNSVTD+368
SAVTOMSU EQU   IEDNSVTD+364
SAVTGTSB EQU   IEDNSVTD+360
SAVTHIBL EQU   IEDNSVTD+356
SAVTHISY EQU   IEDNSVTD+352
SAVTNAX2 EQU   IEDNSVTD+348
SAVTCDRU EQU   IEDNSVTD+344
SAVTPOLC EQU   IEDNSVTD+342
SAVTPOLM EQU   IEDNSVTD+340
SAVTPOLR EQU   IEDNSVTD+336
SAVTCDRN EQU   SAVTCDRV
SAVTPOLL EQU   IEDNSVTD+328
SAVTPOLN EQU   IEDNSVTD+326
@NM00107 EQU   IEDNSVTD+325
@NM00106 EQU   SAVTNETF
SAVTSDIS EQU   SAVTNETF
SAVTROUT EQU   SAVTNETF
SAVTNETW EQU   SAVTNETF
SAVTDIAL EQU   IEDNSVTD+320
SAVTRQUT EQU   IEDNSVTD+316
SAVTBITN EQU   IEDNSVTD+312
@NM00105 EQU   SAVTCKQB+8
@NM00104 EQU   SAVTCKEC+1
@NM00103 EQU   SAVTCKCC
SAVTCKPO EQU   SAVTCKCC
SAVTCKWA EQU   SAVTCKCC
SAVTCKCH EQU   SAVTCKTB+1
SAVTCKVT EQU   SAVTCKTB
@NM00102 EQU   IEDNSVTD+297
SAVTRDFG EQU   SAVTRDRV+12
@NM00101 EQU   SAVTRDRV+5
SAVTRDPY EQU   SAVTRDRV+4
SAVTRDQB EQU   SAVTRDRV+1
SAVTRDKY EQU   SAVTRDRV
SAVTNID  EQU   IEDNSVTD+280
SAVTDVAS EQU   IEDNSVTD+276
SAVTPLSZ EQU   IEDNSVTD+274
@NM00100 EQU   IEDNSVTD+273
SAVTSUBL EQU   IEDNSVTD+272
@NM00099 EQU   SAVTZELM+1
SAVTSUBM EQU   SAVTZELM
SAVTMHDX EQU   IEDNSVTD+268
SAVTNAT1 EQU   IEDNSVTD+266
SAVTSH20 EQU   IEDNSVTD+264
SAVTLCBS EQU   IEDNSVTD+260
SAVTRNMP EQU   IEDNSVTD+256
SAVTTNTX EQU   IEDNSVTD+252
SAVTNAX  EQU   IEDNSVTD+248
SAVTSUBV EQU   IEDNSVTD+247
SAVTSUBA EQU   IEDNSVTD+246
SAVTSIBC EQU   IEDNSVTD+244
SAVTBSM  EQU   IEDNSVTD+240
SAVTSCPT EQU   SAVTTCPU
SAVTRQTG EQU   IEDNSVTD+236
SAVTRQCH EQU   IEDNSVTD+232
SAVTMAND EQU   IEDNSVTD+228
SAVTSPLN EQU   IEDNSVTD+224
SAVTNADL EQU   IEDNSVTD+222
SAVTNATL EQU   IEDNSVTD+220
SAVTMHTB EQU   IEDNSVTD+216
SAVTSSMH EQU   IEDNSVTD+212
SAVTQRS  EQU   IEDNSVTD+208
SAVTRQIN EQU   IEDNSVTD+204
SAVTDFCO EQU   IEDNSVTD+200
SAVTSAO  EQU   IEDNSVTD+196
SAVTSARI EQU   IEDNSVTD+192
SAVTSAC  EQU   IEDNSVTD+188
SAVTSAI  EQU   IEDNSVTD+184
SAVTCSCI EQU   IEDNSVTD+180
SAVTSSRP EQU   IEDNSVTD+176
SAVTSSRQ EQU   IEDNSVTD+172
SAVTSCLU EQU   IEDNSVTD+168
SAVTXTRQ EQU   IEDNSVTD+164
SAVTMVBF EQU   IEDNSVTD+160
@NM00098 EQU   IEDNSVTD+148
@NM00097 EQU   IEDNSVTD+136
SAVTXFMI EQU   IEDNSVTD+132
@NM00096 EQU   IEDNSVTD+124
SAVTXFMO EQU   IEDNSVTD+120
@NM00095 EQU   IEDNSVTD+116
SAVTSSSR EQU   IEDNSVTD+112
SAVTSCPQ EQU   IEDNSVTD+108
SAVTSLCB EQU   IEDNSVTD+104
SAVTLUSR EQU   IEDNSVTD+100
@NM00094 EQU   SAVTLUSQ+8
SAVTLUSP EQU   SAVTLUSQ+4
SAVTLUSB EQU   SAVTLUSQ
@NM00093 EQU   IEDNSVTD+84
SAVTSAT  EQU   IEDNSVTD+80
SAVTNAT  EQU   IEDNSVTD+76
SAVTCLUP EQU   IEDNSVTD+72
SAVTPIUT EQU   IEDNSVTD+68
SAVTRNTA EQU   IEDNSVTD+64
SAVTDNIR EQU   IEDNSVTD+60
SAVTCNIR EQU   IEDNSVTD+56
SAVTFLDH EQU   IEDNSVTD+52
SAVTSRTN EQU   IEDNSVTD+48
SAVTSREQ EQU   IEDNSVTD+44
SAVTFAIL EQU   IEDNSVTD+42
SAVTSUSE EQU   IEDNSVTD+40
SAVTSIB  EQU   IEDNSVTD+36
SAVTPRTN EQU   IEDNSVTD+32
@NM00092 EQU   IEDNSVTD+28
SAVTWH20 EQU   IEDNSVTD+26
SAVTPWT  EQU   IEDNSVTD+24
SAVTPRTQ EQU   IEDNSVTD+20
SAVTPREQ EQU   IEDNSVTD+16
SAVTPH20 EQU   IEDNSVTD+14
SAVTPUSE EQU   IEDNSVTD+12
SAVTPLCB EQU   IEDNSVTD+8
SAVTPOOL EQU   IEDNSVTD+4
SAVTPRMT EQU   SAVTDIAF
SAVTVIRT EQU   SAVTDIAF
AVTSITS  EQU   IEDQAVTD+1192
AVTMSUHI EQU   IEDQAVTD+1188
AVTSITU  EQU   IEDQAVTD+1184
AVTSITP  EQU   IEDQAVTD+1180
AVTPADDR EQU   IEDQAVTD+1176
@NM00091 EQU   IEDQAVTD+1174
AVTCPBNO EQU   IEDQAVTD+1172
AVTHRESS EQU   IEDQAVTD+1171
@NM00090 EQU   IEDQAVTD+1170
@NM00089 EQU   IEDQAVTD+1169
@NM00088 EQU   IEDQAVTD+1168
@NM00087 EQU   IEDQAVTD+1165
@NM00086 EQU   IEDQAVTD+1164
AVTHRESE EQU   @NM00085
AVTRADDR EQU   IEDQAVTD+1156
AVTNADDR EQU   IEDQAVTD+1152
AVTHRESN EQU   IEDQAVTD+1148
AVTVOLRN EQU   IEDQAVTD+1144
AVTTOTNN EQU   IEDQAVTD+1140
AVTTRCYN EQU   IEDQAVTD+1136
AVTRCTRN EQU   IEDQAVTD+1132
AVTNOVON EQU   IEDQAVTD+1128
AVTADEBN EQU   IEDQAVTD+1124
AVTVOLRR EQU   IEDQAVTD+1120
AVTTOTNR EQU   IEDQAVTD+1116
AVTTRCYR EQU   IEDQAVTD+1112
AVTRCTRR EQU   IEDQAVTD+1108
AVTNOVOR EQU   IEDQAVTD+1104
AVTADEBR EQU   IEDQAVTD+1100
AVTLODPT EQU   IEDQAVTD+1096
AVTIOBN  EQU   IEDQAVTD+1092
AVTIOBR  EQU   IEDQAVTD+1088
AVTCPBPT EQU   IEDQAVTD+1084
AVTFCPB  EQU   IEDQAVTD+1080
@NM00084 EQU   IEDQAVTD+1076
AVTINCPQ EQU   IEDQAVTD+1072
@NM00083 EQU   IEDQAVTD+1068
@NM00082 EQU   IEDQAVTD+1065
@NM00081 EQU   AVTBIT4
@NM00080 EQU   AVTBIT4
@NM00079 EQU   AVTBIT4
@NM00078 EQU   AVTBIT4
@NM00077 EQU   AVTBIT4
@NM00076 EQU   AVTBIT4
@NM00075 EQU   AVTBIT4
AVTRUFTN EQU   AVTBIT4
@NM00074 EQU   IEDQAVTD+1060
AVTNOBFQ EQU   IEDQAVTD+1056
@NM00073 EQU   IEDQAVTD+1052
AVTDKENQ EQU   IEDQAVTD+1048
@NM00072 EQU   IEDQAVTD+1044
AVTDKAPQ EQU   IEDQAVTD+1040
AVTCOPY  EQU   IEDQAVTD+1036
AVTIA    EQU   IEDQAVTD+1032
AVTFL    EQU   IEDQAVTD+1028
@NM00071 EQU   IEDQAVTD+1024
AVTNCPBQ EQU   IEDQAVTD+1020
AVTTOTNC EQU   IEDQAVTD+1016
AVTCMAX  EQU   IEDQAVTD+1012
AVTCMIN  EQU   IEDQAVTD+1008
AVTHM02  EQU   IEDQAVTD+1004
AVTOPCIN EQU   IEDQAVTD+1002
AVTDCTLN EQU   IEDQAVTD+1000
AVTOPMSK EQU   IEDQAVTD+996
AVTDDFT  EQU   IEDQAVTD+992
AVTSTEAL EQU   IEDQAVTD+988
AVTOPTN  EQU   IEDQAVTD+984
AVTDSKCT EQU   IEDQAVTD+982
AVTCKRST EQU   IEDQAVTD+981
AVTSTAN  EQU   AVTBIT3
AVTSTACN EQU   AVTBIT3
AVTSTAIN EQU   AVTBIT3
AVTSTAYN EQU   AVTBIT3
AVTOLTBN EQU   AVTBIT3
AVTTSAB  EQU   AVTBIT3
AVTRFULN EQU   AVTBIT3
AVTRECVN EQU   AVTBIT3
@NM00070 EQU   AVTBIT2
@NM00069 EQU   AVTBIT2
AVTOPEIN EQU   AVTBIT2
AVTSTRTN EQU   AVTBIT2
AVTTOPOL EQU   AVTBIT2
AVTCOPYN EQU   AVTBIT2
AVTREUSN EQU   AVTBIT2
AVTEXTSC EQU   AVTBIT2
AVTDISKN EQU   AVTBIT1
AVTQUCKN EQU   AVTBIT1
AVTCLOSN EQU   AVTBIT1
AVTREADN EQU   AVTBIT1
AVTDLAYN EQU   AVTBIT1
AVTAQTAN EQU   AVTBIT1
AVTTSON  EQU   AVTBIT1
AVTAPLKN EQU   AVTBIT1
AVTDUMBR EQU   IEDQAVTD+976
AVTDLQX  EQU   IEDQAVTD+974
AVTINTLV EQU   IEDQAVTD+972
AVTSMCNT EQU   IEDQAVTD+970
AVTAVFCT EQU   IEDQAVTD+968
AVTOPCON EQU   IEDQAVTD+966
AVTOPCNT EQU   IEDQAVTD+964
AVTLNCNT EQU   IEDQAVTD+962
AVTHA16  EQU   IEDQAVTD+958
AVTHA7   EQU   IEDQAVTD+956
AVTHA4   EQU   IEDQAVTD+954
AVTHA3   EQU   IEDQAVTD+952
AVTHA2   EQU   IEDQAVTD+950
AVTGETMS EQU   IEDQAVTD+949
@NM00068 EQU   IEDQAVTD+948
AVTGETMD EQU   IEDQAVTD+944
AVTGETMN EQU   IEDQAVTD+940
AVTCWTOT EQU   IEDQAVTD+936
AVTCWINT EQU   IEDQAVTD+884
AVTDTRAP EQU   IEDQAVTD+880
@NM00067 EQU   IEDQAVTD+878
@NM00066 EQU   AVTIOTR
AVTIOTRH EQU   AVTIOTR
AVTIOTRE EQU   AVTIOTR
@NM00065 EQU   AVTSUBT
AVTSUBPT EQU   AVTSUBT
AVTSUBON EQU   AVTSUBT
AVTAFE30 EQU   IEDQAVTD+872
AVTAFE20 EQU   IEDQAVTD+868
AVTAFE10 EQU   IEDQAVTD+864
AVTCWEC2 EQU   IEDQAVTD+860
AVTCWPM2 EQU   IEDQAVTD+856
AVTCWTS2 EQU   IEDQAVTD+855
AVTCWTS1 EQU   IEDQAVTD+854
AVTCWCLD EQU   AVTCWFL2
AVTCWRAP EQU   AVTCWFL2
@NM00064 EQU   AVTCWFL2
@NM00063 EQU   AVTCWFL2
@NM00062 EQU   AVTCWFL2
@NM00061 EQU   AVTCWFL2
@NM00060 EQU   AVTCWFL2
AVTCWACT EQU   AVTCWFL2
@NM00059 EQU   AVTCWFL1
@NM00058 EQU   AVTCWFL1
@NM00057 EQU   AVTCWFL1
@NM00056 EQU   AVTCWFL1
@NM00055 EQU   AVTCWFL1
@NM00054 EQU   AVTCWFL1
@NM00053 EQU   AVTCWFL1
AVTCOMWN EQU   AVTCWFL1
AVTCWEC1 EQU   IEDQAVTD+848
AVTCWPM1 EQU   IEDQAVTD+844
AVTCAREA EQU   IEDQAVTD+840
AVTFZERO EQU   IEDQAVTD+836
AVTCADDR EQU   IEDQAVTD+832
AVTCOREC EQU   IEDQAVTD+828
@NM00052 EQU   IEDQAVTD+820
AVTCPBCB EQU   IEDQAVTD+816
@NM00051 EQU   IEDQAVTD+808
AVTDSIOB EQU   IEDQAVTD+804
@NM00050 EQU   IEDQAVTD+796
AVTCPRMB EQU   IEDQAVTD+792
@NM00049 EQU   IEDQAVTD+784
AVTCLOSB EQU   IEDQAVTD+780
@NM00048 EQU   IEDQAVTD+772
AVTACTIB EQU   IEDQAVTD+768
@NM00047 EQU   IEDQAVTD+764
AVTOLTEB EQU   IEDQAVTD+760
AVTOLTCH EQU   AVTOLTQB+1
AVTOLTVT EQU   AVTOLTQB
@NM00046 EQU   AVTOPCQB+8
@NM00045 EQU   AVTOPCEC+1
@NM00044 EQU   AVTOPCCC
AVTOPCPO EQU   AVTOPCCC
AVTOPCWA EQU   AVTOPCCC
AVTOPCCH EQU   AVTOPCOB+1
AVTOPCVT EQU   AVTOPCOB
@NM00043 EQU   AVTCKPQB+9
AVTCKPTS EQU   AVTCKPQB+8
@NM00042 EQU   AVTCKPEC+1
@NM00041 EQU   AVTCKPCC
AVTCKPPO EQU   AVTCKPCC
AVTCKPWA EQU   AVTCKPCC
AVTCKPCH EQU   AVTCKPTB+1
AVTCKPVT EQU   AVTCKPTB
@NM00040 EQU   IEDQAVTD+724
@NM00039 EQU   IEDQAVTD+716
AVTSELCH EQU   IEDQAVTD+713
AVTBFRTN EQU   AVTBFRFG
AVTTIMQ  EQU   IEDQAVTD+704
@NM00038 EQU   IEDQAVTD+700
AVTIMQPS EQU   IEDQAVTD+696
AVTINOUT EQU   IEDQAVTD+694
AVTREFTM EQU   IEDQAVTD+692
@NM00037 EQU   IEDQAVTD+680
AVTDELYB EQU   IEDQAVTD+676
AVTOCQPT EQU   IEDQAVTD+672
AVTTSOPT EQU   IEDQAVTD+668
AVTSUPPT EQU   IEDQAVTD+664
AVTCBQCB EQU   IEDQAVTD+660
AVTMSGS  EQU   IEDQAVTD+657
@NM00036 EQU   AVTSYSER
@NM00035 EQU   AVTSYSER
@NM00034 EQU   AVTSYSER
@NM00033 EQU   AVTSYSER
@NM00032 EQU   AVTSYSER
@NM00031 EQU   AVTSYSER
AVTCMAXN EQU   AVTSYSER
AVTCMINN EQU   AVTSYSER
AVT2260L EQU   IEDQAVTD+652
AVTABEPL EQU   AVTADBUF
AVTHFF   EQU   AVTCLRHI+2
@NM00030 EQU   AVTCLRHI
AVTCCLNK EQU   AVTCRELE+5
AVTCCPRI EQU   AVTCRELE+4
AVTCCQCB EQU   AVTCCELE+1
AVTCCKEY EQU   AVTCCELE
AVTDELAD EQU   IEDQAVTD+632
AVTDELEM EQU   IEDQAVTD+628
AVTBSX   EQU   AVTCKLNK
AVTOPETR EQU   AVTHG01
@NM00029 EQU   AVTCKBYT
AVTCKONQ EQU   AVTCKBYT
@NM00028 EQU   AVTCKBYT
@NM00027 EQU   AVTCKBYT
@NM00026 EQU   AVTCKBYT
@NM00025 EQU   AVTCKBYT
@NM00024 EQU   AVTCKBYT
@NM00023 EQU   AVTCKBYT
AVTOPERT EQU   IEDQAVTD+618
AVTOPXCL EQU   IEDQAVTD+616
AVTOPERL EQU   IEDQAVTD+615
@NM00022 EQU   IEDQAVTD+614
AVTCKTIM EQU   IEDQAVTD+612
AVTCKELV EQU   IEDQAVTD+610
AVTCPRCD EQU   IEDQAVTD+609
AVTWARMN EQU   AVTCKELF
AVTCRTLN EQU   AVTCKELF
AVTCPIPN EQU   AVTCKELF
AVTCCLCN EQU   AVTCKELF
AVTCINCN EQU   AVTCKELF
@NM00021 EQU   AVTCKELF
AVTCMCPN EQU   AVTCKELF
AVTNQBCK EQU   AVTCKELF
AVTCKQAD EQU   IEDQAVTD+605
AVTSCBSZ EQU   IEDQAVTD+604
@NM00020 EQU   IEDQAVTD+600
AVTCKELE EQU   IEDQAVTD+596
@NM00019 EQU   AVTCKPEL+8
AVTCKRLK EQU   AVTCKPEL+5
AVTCKRPR EQU   AVTCKPEL+4
AVTCKRMQ EQU   AVTCKRMV+1
AVTCKRKY EQU   AVTCKRMV
AVTHK    EQU   IEDQAVTD+576
AVTHI    EQU   IEDQAVTD+572
AVTIOT   EQU   IEDQAVTD+568
AVTNX    EQU   IEDQAVTD+564
AVTTONE  EQU   IEDQAVTD+560
AVTA3TL  EQU   IEDQAVTD+556
AVTDMECB EQU   IEDQAVTD+552
AVTABEND EQU   IEDQAVTD+546
AVTPLCBN EQU   IEDQAVTD+544
@NM00018 EQU   AVTSAVTP+1
@NM00017 EQU   AVTSAVTF
AVTSNA   EQU   AVTSAVTF
AVTONSNA EQU   AVTSAVTF
AVTVTMCP EQU   AVTSAVTF
@NM00016 EQU   IEDQAVTD+536
AVTCMBSS EQU   IEDQAVTD+532
AVTRCV   EQU   IEDQAVTD+528
AVTSEND  EQU   IEDQAVTD+524
AVTCSCH  EQU   IEDQAVTD+520
AVTQ1    EQU   IEDQAVTD+516
AVTE7    EQU   IEDQAVTD+512
AVTHB    EQU   IEDQAVTD+508
AVTR1    EQU   IEDQAVTD+504
AVTBZ    EQU   IEDQAVTD+500
AVTEZ    EQU   IEDQAVTD+496
AVTEC    EQU   IEDQAVTD+492
AVTEW    EQU   IEDQAVTD+488
AVTNDIAL EQU   AVTSCOPT
AVTN2741 EQU   AVTSCOPT
AVTCONCO EQU   AVTSCOPT
AVTCONC  EQU   AVTSCOPT
AVTCMBUF EQU   AVTSCOPT
AVTAPDMP EQU   AVTSCOPT
@NM00015 EQU   AVTSCOPT
AVTHA    EQU   AVTDISP
AVTEA    EQU   IEDQAVTD+476
AVTAX    EQU   IEDQAVTD+472
AVTA3    EQU   IEDQAVTD+468
AVTGD    EQU   IEDQAVTD+464
AVTAL    EQU   IEDQAVTD+460
AVTOLTST EQU   AVTHG02
AVTE8    EQU   IEDQAVTD+452
AVTUI    EQU   IEDQAVTD+448
AVTCOMPT EQU   IEDQAVTD+444
AVTCRSRF EQU   IEDQAVTD+440
@NM00014 EQU   IEDQAVTD+436
AVTKA02  EQU   IEDQAVTD+432
AVTOPTPT EQU   IEDQAVTD+428
AVTPCBPT EQU   IEDQAVTD+424
@NM00013 EQU   AVTECB1
AVTCOMP  EQU   AVTECB1
@NM00012 EQU   AVTECB1
AVTOPECA EQU   IEDQAVTD+416
AVTOLECA EQU   IEDQAVTD+412
AVTCKECA EQU   IEDQAVTD+408
AVTCWECA EQU   IEDQAVTD+404
AVTCWTCB EQU   IEDQAVTD+400
AVTOLTCB EQU   IEDQAVTD+396
AVTOCTCB EQU   IEDQAVTD+392
AVTCKTCB EQU   IEDQAVTD+388
AVTAS    EQU   IEDQAVTD+384
AVTNOLBF EQU   IEDQAVTD+382
AVTNCKPR EQU   IEDQAVTD+381
AVTCIB   EQU   IEDQAVTD+380
AVTSPLPT EQU   IEDQAVTD+376
AVTMVBFR EQU   IEDQAVTD+372
AVTSBTA  EQU   IEDQAVTD+368
AVTRARTN EQU   IEDQAVTD+364
AVTBSCAN EQU   IEDQAVTD+360
AVTRDYA  EQU   IEDQAVTD+356
AVTRNMPT EQU   IEDQAVTD+352
AVTDISTR EQU   IEDQAVTD+348
AVTPARM3 EQU   IEDQAVTD+344
@NM00011 EQU   AVTPKF
@NM00010 EQU   AVTPKF
@NM00009 EQU   AVTPKF
AVTFTCHF EQU   AVTPKF
@NM00008 EQU   AVTPKF
@NM00007 EQU   AVTPKF
@NM00006 EQU   AVTPKF
@NM00005 EQU   AVTPKF
AVTPARM  EQU   IEDQAVTD+336
AVTEXS2A EQU   IEDQAVTD+330
AVTEXA2S EQU   IEDQAVTD+324
AVTOCGET EQU   IEDQAVTD+320
AVTCKAVT EQU   @NM00003+1
@NM00004 EQU   AVTCKFLG
AVTCKHLT EQU   AVTCKFLG
AVTCKREQ EQU   AVTCKFLG
AVTCKENV EQU   AVTCKFLG
AVTCKNAC EQU   AVTCKFLG
AVTCKTAC EQU   AVTCKFLG
@NM00002 EQU   IEDQAVTD+312
AVTREADD EQU   IEDQAVTD+308
AVTREADY EQU   IEDQAVTD+304
AVTRACE  EQU   IEDQAVTD+300
AVTTCB   EQU   IEDQAVTD+296
AVTPASWD EQU   IEDQAVTD+288
AVTCTLCH EQU   IEDQAVTD+280
AVTDOUBL EQU   IEDQAVTD+272
AVTDOUBX EQU   IEDQAVTD+264
AVTDPARM EQU   IEDQAVTD+260
AVTCSTCS EQU   IEDQAVTD+256
AVTDLQ   EQU   AVTSAVEX+32
@NM00001 EQU   AVTSAVEX
AVTSAVE4 EQU   IEDQAVTD+144
AVTSAVE3 EQU   IEDQAVTD+72
AVTSAVE2 EQU   IEDQAVTD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00449 EQU   @EL00001
@ENDDATA EQU   *
         END   IGG019TI,(C'PLS2308',0701,77354)
