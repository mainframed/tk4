R2 TITLE '''IGG019R2'' - DISK END APPENDAGE'
IGG019R2 CSECT
*A184000-185000,553000,585000-639000                             Y02027
*D294100-295702,576000-648000,651400-654200
         SPACE 3                                                SA63974
*  CHANGE ACTIVITY AS FOLLOWS
********************MICROFICHE FLAGS ************************ SUPT CODE
*A256980,651000                                                  A42413
*C261500                                                         A42413
*D720200-722920,780000                                           A42413
*A228000                                                         S21101
*C261500                                                         S21101
*A294000,438000                                                  S21101
*D653000                                                         S21101
*C724000                                                         S21101
*A735000                                                         S21101
*C792000                                                         S21101
*C261000                                                         S21903
*D 657000-663000                                                SA63974
*A 669000                                                       SA63974
*C261000                                                         S21903
*A207000,256800,260000,295700,732000,781000                      X01004
*C294000-294020,723000-724000                                    X01004
*D256982                                                         X01004
*A736000                                                         X02004
*C257000,295706,483000,492000,732450,732630                      X02004
*D255000                                                         X02004
*C249000,253000,256988-294080,294090-295716,354000-357000      2Z40X9QG
*C444698-444778,444938,444178-446718,449028-449078             2Z40X9QG
*C449258,453000-456000,459000,462000-465000,471000             2Z40X9QG
*C477000-492000,723000-726000,732090-723360,732450-732720      2Z40X9QG
*C732990-733080,734340-734430,736600-777000                    2Z40X9QG
*D468000                                                       2Z40X9QG
*C444938-445018                                                @OY12418
*A256820                                                       @OS78337
*C266588-267188,270788-271388                                  @OS78337
*C450000,487000,754800-771600                                  @OZ26164
         EJECT                                                 @Z40X9QG
***********************************************************************
*                                                                     *
*TITLE -- 'IGG019R2' - DISK END APPENDAGE                             *
*                                                                     *
*  MODULE NAME = IGG019R2                                             *
*                                                                     *
*  DESCRIPTIVE NAME = DISK END APPENDAGE                              *
*                                                                     *
*  COPYRIGHT = 'NONE'                                                 *
*                                                                     *
*  STATUS CHANGE LEVEL 9                                       @Z40X9QG
*                                                                     *
*FUNCTION -- THIS APPENDAGE IS TO RECEIVE CONTROL FROM IOS AT THE     *
*   END OF A DISK I/O OPERATION.  IT REMOVES THE CPBS FROM THE IOB    *
*   AND MAKES THEM AVAILABLE FOR CPB CLEANUP ROUTINE.  IF ANY CPBS    *
*   ARE AVAILABLE ON THE RETQ, THESE ARE PASSED BACK TO IOS WITH A    *
*   REQUEST TO 'RETRY' THE DISK CHANNEL PROGRAM. TCAM DISPATCHER'S    *
*   ECB IS POSTED COMPLETE TO ACTIVATE THE TCAM TASK.          @Z40X9QG
*                                                                     *
*   A TEST ALSO IS MADE FOR AN ERROR IN THE I/O OPERATION.  IF IN99226
*   ERROR, THE BAD CPB IS FOUND AND FLAGGED.  THE FOLLOWING CPB  99226
*   IS EXPANDED AND RETURNED WITH A REQUEST TO RETRY.            99226
*                                                                99226
*   THIS MODULE IS ALSO THE START I/O APPENDAGE ROUTINE. SEE   @Z40X9QG
*   PROLOGUE AT LABEL DISKSIO FOR INFORMATION FOR THAT ENTRY   @Z40X9QG
*   POINT.                                                     @Z40X9QG
*ENTRY POINTS - DISK APPENDAGE HAS TWO ENTRY POINTS:           @Z40X9QG
*   CHANNEL END APPENDAGE (CHE)                                @Z40X9QG
*        LINKAGE                                               @Z40X9QG
*              L    15,IOSNRM                                  @Z40X9QG
*              BALR 14,15                                      @Z40X9QG
*   ABNORMAL END APPENDAGE (ABE)                               @Z40X9QG
*        LINKAGE                                               @Z40X9QG
*              L    15,IOSABN                                  @Z40X9QG
*              BALR 14,15                                      @Z40X9QG
*                                                                     *
*INPUT                                                         @Z40X9QG
*   REGISTER 1  - ADDRESS OF IOSB                              @Z40X9QG
*   REGISTER 13 - ADDRESS OF 16 WORD SAVE AREA                 @Z40X9QG
*   REGISTER 14 - RETURN ADDRESS                               @Z40X9QG
*   REGISTER 15 - ENTRY POINT ADDRESS                          @Z40X9QG
*                                                                     *
*OUTPUT                                                        @Z40X9QG
*   CHANNEL END APPENDAGE                                      @Z40X9QG
*        COMPLETED CPB'S ARE CHAINED TO CPB CLEANUP QUEUE,     @Z40X9QG
*        CPB CLEANUP QCB IS POSTED, AND TCAM'S DISPATCHER      @Z40X9QG
*        IS POSTED. I/O IS 'RETRIED' ON CPB'S ON IOSBERET.     @Z40X9QG
*   ABNORMAL END APPENDAGE                                     @Z40X9QG
*        IF ENTERED WITH ERROR BITS IN IOSTATUS AND NOT        @Z40X9QG
*        PERMANENT ERROR, RETURN FOR RETRY. IF PERMANENT ERROR @Z40X9QG
*        COMPLETED CPB'S ARE CHAINED TO CPB CLEANUP QUEUE,     @Z40X9QG
*        CPB CLEANUP QCB IS POSTED, AND TCAM'S DISPATCHER      @Z40X9QG
*        IS POSTED. THE CPB IN ERROR IS FLAGGED AND THE        @Z40X9QG
*        FOLLOWING CPB'S ARE EXPANDED AND RETURNED TO IOS      @Z40X9QG
*        FOR RETRY.                                            @Z40X9QG
*                                                                99226
*EXTERNAL ROUTINES.                                                   *
*        'OS POST' - POSTS TCAM'S ECB TO ACTIVATE DISPATCHER.         *
*                                                                     *
*EXITS-NORMAL -- RETURN TO IOS VIA REGISTER 14 IF NO RETRY.           *
*   RETURN TO IOS VIA REGISTER 14+8 IF RETRY IS TO BE ATTEMPTED.      *
*                                                                     *
*EXITS-ERROR -- N/A                                                   *
*                                                                     *
*TABLES/WORKAREAS -- QCB, FOR CPB CLEANUP.  IT IS ENQUEUED ON         *
*   ASYNCHRONOUS READY Q FOR TCAM DISPATCHER TO ACTIVATE. PRIORITY    *
*   IS PUT INTO QCBPRI.                                               *
*                                                                     *
*   CPB - CPBS ARE PICKED UP FROM IOBSTART USING CPBNEXT AS CHAINING  *
*   POINTER.  CPBNEXT OF LAST CPB IS ZERO.  CPBS ARE PASSED TO CPB    *
*   CLEANUP VIA ONE OF TWO FIFO QUEUES, AVTDKAPQ AND AVTDKENQ.        *
*   AVT - THE CPB CLEANUP QCB IS TAGGED 'AVTCPBCB'.                   *
*   IN AVTBIT1, BIT X'80' IF SET CAUSES AVTDKENQ TO BE USED           *
*   INSTEAD OF AVTDKAPQ TO HOLD CPBS BEING RETURNED TO CPB CLEANUP.   *
*                                                                     *
*ATTRIBUTES - REUSABLE, REFRESHABLE, ENTERED WITH LOCAL LOCK   @Z40X9QG
*                                                                     *
*NOTES -- THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A         *
*   PARTICULAR INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET. *
*                                                                     *
*   THIS ROUTINE IS LOADED FROM SVCLIB WHEN THE FIRST DISK MESSAGE    *
*   QUEUE DATA SET IS OPENED.                                         *
***********************************************************************
         EJECT                                                  SA63974
R15      EQU   15                       ENTRY ADDRESS
R14      EQU   14                       RETURN ADDRESS
R13      EQU   13                       SAVEAREA POINTER
RBASE    EQU   12                       PROGRAM BASE
R12      EQU   12                       TCB ADDR FOR OS POST
R11      EQU   11                       ECB ADDR
RCPB     EQU   11                       CPB DSECT BASE
RQCB     EQU   11                       CPB CLEANUP'S QCB ADDRESS
R10      EQU   10                       REGISTER TEN             X01004
R9       EQU   9                        ERRORED CPB WORKAREA     99226
*                                         THEN, CLEARED FOR IOS  99226
RAVT     EQU   8                        AVT BASE               @Z40X9QG
RIOSBE   EQU   7                        POINTER TO IOSBE       @Z40X9QG
CURR     EQU   6                        ADDR OF CURRENT ELEMENT  Y02027
*                                       ON ASYNCH READY QUEUE    Y02027
R6       EQU   6                        WORK REGISTER          @Z40X9QG
R5       EQU   5                        WORK REGISTER          @Z40X9QG
R4       EQU   4                        WORK REGISTER          @Z40X9QG
R3       EQU   3                        REGS 3 THRU 6 USED IN    S21101
*                                         MOVING CCWS IN CPB     S21101
RIOSB    EQU   2                        POINTER TO IOSB        @Z40X9QG
R1       EQU   1                        REGISTER 1             @Z40X9QG
R0       EQU   0
*
         USING IEDQCPB,RCPB
         USING IOSB,RIOSB               IOSB ADDRESSABILITY    @Z40X9QG
         USING REGSAVE,R13              SAVE AREA              @Z40X9QG
*                                       ADDRESSABILITY         @Z40X9QG
         USING IEDQAVTD,RAVT
         USING IOSBE,RIOSBE             IOSBE ADDRESSABILITY   @Z40X9QG
*
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* EQUATES                                                    * @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
ZERO     EQU   0                        NUMERIC VALUE          @Z40X9QG
ONE      EQU   1                        NUMERIC VALUE          @Z40X9QG
TWO      EQU   2                        NUMERIC VALUE          @Z40X9QG
THREE    EQU   3                        NUMERIC VALUE          @Z40X9QG
AD       EQU   7                        3- BYTE ICM/STCM MASK    X01004
SM       EQU   X'31'                    SEARCH ID EQUAL CCW OP   X01004
NOTIC    EQU   7                        TIC CCW MASK             X01004
EIGHT    EQU   8                        CONSTANT                 X01004
NO       EQU   8                        BRANCH CONDITION CODE    X01004
ALL      EQU   15                       4- BYTE ICM/STCM MASK    X01004
SXTN     EQU   16                       OFFSET INTO SAVE AREA    X01004
GOODCODE EQU   X'7F'                    SUCCESSFUL COMPLETION    99226
INTCODE  EQU   X'7E'                    INTERCEPT CONDITION    @OS78337
CPBER    EQU   X'01'                    FLAG TO INDICATE BAD CPB 99226
SETBACK  EQU   16                       ALLOW FOR OFFSET IN CPB  99226
RWFLAG   EQU   4                        RD/WR FLAG DISPLACEMENT  99226
FOUR     EQU   4                        DISPLACEMENT OF FOUR     99226
SEVEN    EQU   7                                                 Y02027
SECRW    EQU   8                        SECOND RD/WR DISPL       99226
TIC2     EQU   8                        TIC2 DISPL               99226
NEXT     EQU   9                        NEXT DISPL               99226
INC      EQU   1                        INCREMENTOR TO NEXT BYTE
W2       EQU   4                        OFFSET TO SECOND WORD OF AREA
WAITBIT  EQU   X'80'                    WAIT BIT               @Z40X9QG
RETRY    EQU   8                        VALUE ADDED TO R14 TO
*                                         CAUSE RETRY
*
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* CONSTANTS THAT MUST NOT BE MOVED                           * @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
         SPACE 1                                               @Z40X9QG
         DC    AL2(END19R2-IGG019R2)    LENGTH OF MODULE       @Z40X9QG
         DC    AL2(DISKSIO-IGG019R2)    OFFSET OF SIO CCW      @Z40X9QG
*                                       TRANSLATION CODE CALLED@Z40X9QG
*                                       BY IEDQEB              @Z40X9QG
IGG019R2 IEDHJN ,                                              @Z40X9QG
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* ENTRY POINT FOR CHANNEL END AND ABNORMAL APPENDAGES.       * @Z40X9QG
* IF I/O COMPLETION CODE IS NOT '7F' OR '7E', THEN THIS      * @OS78337
* ENTRY IS FOR ABE - DO ABE PROCESSING                       * @OS78337
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
         USING *,R15                    ADDRESSABILITY         @Z40X9QG
CHE      EQU   *                                               @Z40X9QG
ABE      EQU   *                                               @Z40X9QG
         CLI   IOSCOD-IOSB(R1),INTCODE  PERMANENT ERROR        @OS78337
         BL    SETUP                    YES,DO ERROR PROCESSING@OS78337
         SPACE 2                                               @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* IF COMPLETION CODE IS '7F', AND IF ERROR BITS ARE SET      * @Z40X9QG
* IN IOSTATUS (IN CSW), THEN THIS IS ENTRY FOR ABE -         * @Z40X9QG
* RETURN TO IOS FOR RETRY. IF NO ERROR BITS, THIS IS         * @Z40X9QG
* CHE ENTRY - CONTINUE.                                      * @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
         SPACE 1                                               @Z40X9QG
         NC    IOSTATUS-IOSB(L'IOSTATUS,R1),ERRBITS ANY ERRORS @Z40X9QG
         BNZR  R14                      YES, RETURN TO IOS     @Z40X9QG
         SPACE 2                                               @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* DO SETUP INITIALIZATION                                    * @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
         SPACE 1                                               @Z40X9QG
SETUP    EQU   *                                               @Z40X9QG
         STM   R0,R15,REGSAVE           SAVE REGS IN SAVE AREA @Z40X9QG
*                                       PROVIDED BY IOS        @Z40X9QG
         BALR  RBASE,0                  SET BASE REG           @Z40X9QG
         DROP  R15                                             @Z40X9QG
         USING *,RBASE                  SET ADDRESSABILITY     @Z40X9QG
         LR    RIOSB,R1                 SET IOSB ADDRESS       @Z40X9QG
         L     RIOSBE,IOSUSE            SET IOSBE ADDRESS      @Z40X9QG
         USING CVT,R3                   CVT ADDRESSABILITY     @Z40X9QG
         L     R3,CVTPTR                GET CVT ADDRESS        @Z40X9QG
         L     R10,CVTAQAVT             GET TCX ADDRESS        @Z40X9QG
         L     RAVT,TCXAVT-IEDQTCX(,R10) GET AVT ADDRESS       @Z40X9QG
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* TRANSLATE CCW'S FROM REAL TO VIRTUAL                       * @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
         SPACE 1                                               @Z40X9QG
         USING IEDQCCW,R11              CCW ADDRESSABILITY     @Z40X9QG
         NI    IOSBEFLG,IOSBECPV        RESET TRANSLATION FLAG @Z40X9QG
         L     R11,IOSVST               GET START OF CHANNEL   @Z40X9QG
*                                       PROGRAM                @Z40X9QG
         L     R10,CVTPTRV              ADDR OF REAL TO        @Z40X9QG
*                                       VIRTUAL CONVERTER      @Z40X9QG
         DROP  R3                                              @Z40X9QG
         SPACE 1                                               @Z40X9QG
CONVRLOP EQU   *                                               @Z40X9QG
         LR    R15,R10                  SET CONVERTER ADDR     @Z40X9QG
         SLR   R1,R1                    CLEAR FOR INSERT       @Z40X9QG
         ICM   R1,AD,CCWADDR            I/O ADDRESS            @Z40X9QG
         BALR  R14,R15                  CONVERT ADDRESS        @Z40X9QG
         STCM  R1,AD,CCWADDR            SET VIRTUAL ADDRESS      X01004
         CLI   CCWOPCDE,SM              STATUS MODIFIER EXPECTED X01004
         BE    SMNOTIC                  BRANCH YES               X01004
         TM    CCWOPCDE,NOTIC           IS THIS CCW A TIC        X01004
         BZ    ITSTIC                   BRANCH YES               X01004
         TM    CCWFLAGS,CCWCC+CCWCD     CHAINING SPECIFIED       X01004
         BZ    TESTQ                    NO, BRANCH             @Z40X9QG
PLUS8V   EQU   *                                                 X01004
         LA    R11,CCW+EIGHT            BUMP TO NEXT CCW         X01004
         B     CONVRLOP                 CONTINUE LOOP            X01004
SMNOTIC  EQU   *                                                 X01004
         LA    R11,CCW+EIGHT            BUMP TO TIC              X01004
         LR    R15,R10                  SET CONVERTER ADDR     @Z40X9QG
         SR    R1,R1                    CLEAR HIGH-ORDER BYTE    X01004
         ICM   R1,AD,CCWADDR            TIC TO ADDRESS           X01004
         BALR  R14,R15                  CONVERT                @Z40X9QG
         SPACE 1                                                 X01004
         STCM  R1,AD,CCWADDR            SET VIRTUAL ADDRESS      X01004
         B     PLUS8V                   GET NEXT CCW             X01004
ITSTIC   EQU   *                                                 X01004
         LR    R11,R1                   NEXT CCW IS TIC TO ADDR. X01004
         B     CONVRLOP                 CONTINUE LOOP            X01004
         DROP  R11                                               X01004
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* CHECK FOR AVAILABILITY OF DISABLE FIFO QUEUE               * @Z40X9QG
* FOR CPB CLEANUP                                            * @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
         USING IEDQCPB,RCPB             CPB ADDRESSABILITY     @Z40X9QG
TESTQ    EQU   *                                                 99226
         LA    R14,AVTDKAPQ             GET ADDR OF DISABLED FIFO Q
*                                         OF CPBS TO BE PASSED
         TS    AVTEZERO(R14)            QUEUE LOCKED             Y02027
         BZ    LOOP                     NO,  BRANCH (AND USE   @Z40X9QG
*                                       DISABLED QUEUE)        @Z40X9QG
         SPACE 2                                               @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* IF STARTUP IS IN PROGRESS, THESE CPBS ARE NOT FOR CPB CLEANUP,
* BUT FOR THE CHECKPOINT OPEN ROUTINE WHO REQUESTED THE DISK I/O.
* OPEN IS IN A WAIT STATE, WAITING FOR APPENDAGE TO HANG THE CPB
* ON AVTDKAPQ FOR REPROCESSING BY OPEN.
*
************************************************************** @Z40X9QG
LOCKED   EQU   *
         LA    R14,AVTDKENQ             GET ADDR OF ENABLED FIFO Q
*                                         OF CPBS TO BE PASSED
*                                         TO CPB CLEANUP
         TS    AVTEZERO(R14)            QUEUE LOCKED             Y02027
         BNE   TESTQ                    YES, RETRY DISABLE QUEUE Y02027
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* R14 HAS ADDR OF FIFO Q TO RECEIVE CPB
*
************************************************************** @Z40X9QG
LOOP     EQU   *
         L     RCPB,IOSVST              GET ADDR OF 1ST CPB    @Z40X9QG
         MVC   IOSVST+INC(THREE),CPBNEXT BUMP TO NEXT CPB      @Z40X9QG
         SPACE 2                                               @Z40X9QG
************************************************************** @Z40X9QG
*
* ENQUEUE CPB ONTO FIFO Q FOR CPB CLEANUP
*
************************************************************** @Z40X9QG
         XC    CPBNEXT,CPBNEXT          ZERO FORWARD POINTER IN CPB
*                                         WHICH MAY BECOME LAST ON Q
         L     R15,W2(,R14)             GET ADDR OF LAST CPB ALREADY
*                                         ON Q FROM 2ND WORD OF Q
         ST    RCPB,W2(,R14)            SET Q TO POINT TO NEW CPB
*                                         AS NEW LAST CPB ON Q
         NC    INC(L'CPBNEXT,R14),INC(R14) IF 1ST WORD OF Q IS 0,
*                                         THE Q WAS EMPTY
         BNZ   NOTEMPTY                 BRANCH IF SOMETHING ALREADY
*                                         ON THE Q
*                                       CONTINUE IF NEW CPB IS NOW
*                                         THE ONLY CPB TO BE ON Q
         MVC   INC(L'CPBNEXT,R14),W2+INC(R14) BEING ONLY CPB, BOTH
*                                         FIRST & LAST WORD OF Q
*                                         POINTS TO SAME CPB
         B     ENQUEUED                 CPB HAS BEEN ADDED TO AN
*                                         EMPTY Q
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* ADJUST CCW'S IN THE CPB (IF NECESSARY). SUBROUTINE         * @Z40X9QG
* USES REGS 3,4,5,6, AND 15 AS WORK REGISTERS.               * @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
ENQSUBR  EQU   *                        CPB HAS BEEN PASSED TO   99226
*                                         CPB CLEANUP SUBTASK    99226
         LA    R15,0(,RCPB)             SET PSEUDO BASE OF CPB   S21101
*                                       AND CLEAR HIGH BYTE      S21101
         CLI   CPBSEEK,CPBSEEKC         IS FIRST CCW SEEK        S21101
         BNE   NOTSEEK                    NO, NOT LARGE CPB      S21101
*                                         YES, LARGE CPB         S21101
         CLI   CPBSET,CPBSETC           IS SECOND CCW SET CCW    S21101
         BE    OUT                        YES, LARGE CPB WITH SETS21101
*                                         NO, LARGE WITHOUT SET  S21101
LESS8    EQU   *                                                 S21101
         SH    R15,H8                   ADJUST FOR MISSING CCW   S21101
         B     OUT                      PSEUDO CPB BASE SET      S21101
*                                                                S21101
NOTSEEK  EQU   *                        NOT LARGE CPB            S21101
         CLI   CPBSEEK,CPBSETC          IS FIRST CCW SET         S21101
         BE    LESS8                      YES, MEDIUM CPB WITH SES21101
*                                           GO ADJUST FOR MISSINGS21101
*                                         SEEK                   S21101
*                                         NO, NOT SET CCW        S21101
         CLI   CPBSEEK,CPBSRCHC         IS FIRST CCW SEARCH      S21101
         BE    LESS16                     YES, MEDIUM CPB        S21101
*                                         WITHOUT SET            S21101
*                                         NO, SMALL CPB          S21101
         SH    R15,H16                  ADJUST FOR MISSING       S21101
*                                         SEARCH-TIC             S21101
LESS16   EQU   *                        MEDIUM CPB WITHOUT SET   S21101
         SH    R15,H16                  ADJUST FOR MISSING       S21101
*                                         SEEK, SET              S21101
OUT      EQU   *                        R15 IS ADJUSTED PSEUDO   S21101
*                                         CPB BASE               S21101
         LM    R3,R6,CPBRDWR-IEDQCPB(R15) GET RD, RD CCWS FROM   S21101
*                                         PSEUDO CPB             S21101
         TM    CPBXDWR-IEDQCPB(R15),CPBTICC IS THIS TIC OR FF    S21101
         BZ    NOTTIC                   NO, BRANCH             @Z40X9QG
         SH    R15,H8                   ADDR OF DISK UNIT AT     S21121
*                                         CPBAREA, NOT CPBXREA   S21101
NOTTIC   EQU   *                                               @Z40X9QG
         L     R15,CPBXREAF-IEDQCPB(,R15) GET UNIT ADDRESS       S21101
         STM   R3,R6,CPBRDWR            RESTORE RD, RD CCWS TO   S21101
*                                         PROPER POSITION        S21101
         ST    R15,CPBXREAF             SET BUFFER ADDRESS TO    S21101
*                                         PROPER POSITION        S21101
         BR    R9                       RETURN TO CALLER         99226
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* ADD CPB TO CLEANUP QUEUE AND CALL TO ADJUST CCW'S IN CPB   * @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
*                                                                99226
NOTEMPTY EQU   *                        NEW CPB IS TO BE ADDED TO99226
*                                         OTHERS ON Q            99226
         MVC   CPBNEXT-IEDQCPB(,R15),W2+INC(R14) PUT ADDR OF NEW 99226
*                                         CPB IN FORWARD POINTER 99226
*                                         OF OLD LAST CPB        99226
ENQUEUED EQU   *                                                 99226
         BAL   R9,ENQSUBR               LINK TO ENQUEUE SUBR     99226
*                                                                99226
         MVI   CPBSEEK,AVTEZERO         FLAG ADJUSTED CPB AS     99226
*                                       SERVICED BY APPENDAGE    99226
         SPACE 2                                               @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* IF THERE WERE ANY ERRORS IN THE I/O OPERATION,                 99226
*   FIND THE BAD CPB AND FLAG IT,                                99226
*   TEST IF THE BAD CPB IS THE LAST ONE,                         99226
*    IF LAST, TEST RETRY INDICATORS,                             99226
*    IF NOT, RUN THROUGH THE CPB CLEANUP SUBTASK AND THE BUILD   99226
*      SEARCH TIC ROUTINE WITH THE NEXT CPB AND GO TO SET RETRY  99226
*                                                                99226
************************************************************** @Z40X9QG
         CLI   IOSCOD,GOODCODE          ANY ERRORS             @Z40X9QG
         BE    TESTIOB                  NO, BRANCH             @Z40X9QG
*                                         YES, CPB BAD SOMEWHERE 99226
         CLC   IOSCSWCA,AVTCPBPT+1      TEST IF CSW IN LOW CORE@OY12418
         BL    FLAGIT                   YES, FLAG FIRST CPB    @OY12418
*                                         NO, LOOK FOR BAD CPB   99226
         SLR   R9,R9                    CLEAR FOR INSERT       @Z40X9QG
         ICM   R9,AD,IOSCSWCA           GET CMD ADDR FROM CSW  @Z40X9QG
         LA    RCPB,0(,RCPB)            CLEAR HIGH ORDER BYTE    99226
         SR    R9,RCPB                                           99226
         BM    TESTIOB                  THIS NOT BAD CPB         99226
*                                                                99226
         C     R9,BADCCW                                         99226
         BH    TESTIOB                  THIS NOT BAD CPB         99226
*                                                                99226
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* FLAG CPB THAT IS IN ERROR                                  * @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
         SPACE 1                                               @Z40X9QG
FLAGIT   EQU   *                                                 99226
         MVI   AVTEZERO(R14),AVTEZERO   CLEAR Q LOCK FLAG        Y02027
         OI    CPBFLAG,CPBER            FLAG THIS CPB AS BAD     99226
         MVC   CPBFLAG3(EIGHT),IOSCC    SAVE CONDITION CODE    @Z40X9QG
*                                       AND CSW                @Z40X9QG
         MVC   CPBFLAG1(TWO),IOSFLA     SAVE FLAGS ...         @Z40X9QG
         MVC   CPBSENS0(TWO),IOSSNS     ... AND SENSE BYTES .. @Z40X9QG
         MVC   CPBECBCC,IOSCOD          ... AND COMPLETION     @Z40X9QG
*                                       CODE                   @Z40X9QG
         L     R9,IOSUCB                GET UCB ADDRESS        @Z40X9QG
         MVC   CPBUCBID,UCBNAME-UCB(R9) PASS UCB ID            @Z40X9QG
         SPACE 1                                               @Z40X9QG
         ICM   RCPB,ALL,IOSVST          IS THERE ANOTHER CPB   @Z40X9QG
         BZ    LASTCPB                    NO, LAST WAS BAD       99226
*                                         YES, MORE TO DO        99226
         BAL   R9,ENQSUBR               LINK TO ENQUEUE SUBR     99226
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*                                                                99226
*   BUILD SEARCH TIC ROUTINE                                     99226
*                                                                99226
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
         STM   R3,R6,CPBRDWR-SETBACK    SET UP RDWR CODES        99226
         LA    R15,CPBABSAD+3           ADDRESS OF CCHHR STORED  99226
         ST    R15,CPBSRECF-SETBACK       IN PTR TO RECORD ID    99226
         MVI   CPBSRCH-SETBACK,CPBSRCHC SET SEARCH ID EQ OP CODE 99226
         MVI   CPBSRHFL-SETBACK,CPBCCC  SET SEARCH CCW FLAG AS CC99226
         LA    R15,CPBSRH5              SET SEARCH COUNT AS 5    99226
         STH   R15,CPBSRHCT-SETBACK                              99226
         LA    R15,CPBSRCH-SETBACK      PTR TO RECORD ID STORED  99226
         ST    R15,CPBTICSF-SETBACK       AS ADDR OF SEARCH CCW  99226
         MVI   CPBTIC1-SETBACK,CPBTICC  SET ON TIC TO SEARCH CCW 99226
         LA    R9,CPBRDWR-SETBACK       GET RD/WR CCW PTR        99226
         CLI   0(R9),CPBRDKC            TEST IF RD K & D         99226
         BNE   CCTEST                     NO, LOOK FOR CC HERE   99226
*                                         YES, RESET PTR         99226
         LA    R9,SECRW(R9)             GET 2ND RD WR CCW        99226
CCTEST   EQU   *                                                 99226
         CLI   RWFLAG(R9),CPBCCC        TEST COMMAND CHAINING    99226
         BNE   SETRETRY                   NO, CONTINUE           99226
*                                         YES, SET NEXT CPB PTR  99226
         MVI   TIC2(R9),CPBTICC         SET ON TIC TO NEXT CPB   99226
         MVC   NEXT(3,R9),CPBNEXT       PTR TO NEXT CPB          99226
SETRETRY EQU   *                                                 Y02027
         BAL   R3,REDRIVE               SET UP TO 'REDRIVE'    @VS41086
         B     RETURN                   PREPARE TO RETURN      @Z40X9QG
         SPACE 2                                               @VS41086
************************************************************** @VS41086
*                                                            * @VS41086
* REDRIVE I/O BY RETURNING TO IOS AT R14 + 8. BEFORE         * @VS41086
* RETURNING, CALL DISKSIO SUBROUTINE TO INITIALIZE THE       * @VS41086
* IOSB AND TRANSLATE CCW'S.                                  * @VS41086
*                                                            * @VS41086
************************************************************** @VS41086
REDRIVE  EQU   *                                               @VS41086
         L     R1,SAVE14                GET RETURN ADDR TO IOS @VS41086
         LA    R1,RETRY(,R1)            BUMP TO 'RETRY' ADDR   @VS41086
         ST    R1,SAVE14                SAVE ADDRESS           @VS41086
         LA    R15,DISKSIO              ADDR OF DISKSIO CODE   @VS41086
         BALR  R14,R15                  DO SIO PROCESSING      @VS41086
         BR    R3                       RETURN TO CALLER       @VS41086
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* TEST FOR ANOTHER CPB. IF AT LASTCPB, THEN SET UP FOR RETRY * @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
         SPACE 1                                               @Z40X9QG
TESTIOB  EQU   *                                                 99226
         ICM   RCPB,ALL,IOSVST          IS THERE ANOTHER CPB   @Z40X9QG
         BNZ   LOOP                       YES, GO GET IT         99226
*                                         NO, LAST CPB           99226
         MVI   AVTEZERO(R14),AVTEZERO   CLEAR Q LOCK FLAG        Y02027
*                                                                99226
LASTCPB  EQU   *                                                 99226
         TS    IOSBELCK                 IS RETRY DOOR LOCKED   @OZ26164
         BZ    DORETRY                  NO, RETRY              @Z40X9QG
         OI    IOSBEFLG,IOSBERDY        INDICATE THAT IOSBE    @Z40X9QG
*                                       READY FOR NEW I/O      @Z40X9QG
         B     RETURN                   PREPARE TO RETURN      @Z40X9QG
         SPACE 1                                               @Z40X9QG
DORETRY  EQU   *                                               @Z40X9QG
         ICM   RCPB,AD,IOSBERET         IS RETRY QUEUE ZERO    @Z40X9QG
         BNZ   CLRRET                   NO, BRANCH             @Z40X9QG
         OI    IOSBEFLG,IOSBERDY        INDICATE THAT IOSBE    @Z40X9QG
*                                       IS READY FOR NEW I/O   @Z40X9QG
         B     UNLOCK                   PREPARE TO RETURN      @Z40X9QG
         SPACE 1                                               @Z40X9QG
CLRRET   EQU   *                                               @Z40X9QG
         XC    IOSBERET,IOSBERET        ZERO RETRY QUEUE       @Z40X9QG
*                                                                99226
         BAL   R3,REDRIVE               SET UP TO 'REDRIVE'    @VS41086
         SPACE 1                                               @Z40X9QG
         DROP  RCPB                                            @Z40X9QG
         SPACE 2                                               @Z40X9QG
UNLOCK   EQU   *                                               @Z40X9QG
         MVI   IOSBELCK,AVTEZERO        UNLOCK RETRY DOOR      @OZ26164
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*
* IF STARTUP IS IN PROGRESS, CHECKPOINT OPEN IS USING CPBS TO LOOK
* AT THE DISK MESSAGE QUEUES.  THESE CPBS ARE HANDLED BY EXCP
* DRIVER (IGG019RC), AND ALSO DISK END APPENDAGE.  IF THE TCAM
* SYSTEM IS NOT YET ACTIVATED, AND STARTUP IS IN PROGRESS, THESE
* CPBS COMING THRU APPENDAGE ARE TO BE RETURNED TO CHECKPOINT OPEN,
* NOT CPB CLEANUP (IEDQFA).  TO PREVENT CPB CLEANUP'S QCB FROM
* BEING POSTED TO THE DISABLED READY QUEUE, CHECKPOINT OPEN PUTS
* A NON-ZERO DUMMY 'PRIORITY' IN THE CPB CLEANUP QCB.  APPENDAGE
* CHECKS THIS PRIORITY FIELD, FINDS IT TO BE NON-ZERO, THINKS THE
* QCB IS ALREADY POSTED, SO SKIPS POSTING THE QCB.  WHEN CHECKPOINT
* OPEN IS FINISHED, IT ZEROS THE PRIORITY FIELD SO APPENDAGE WILL
* ACTIVATE CPB CLEANUP WHEN THE NEXT CPB COMES IN.
*
************************************************************** @Z40X9QG
         SPACE 2                                               @Z40X9QG
RETURN   EQU   *                                               @Z40X9QG
         LA    RQCB,AVTCPBCB            USING CPB CLEANUP QCB AS
*                                         ELEMENT, HANG ELE ON
*                                         DISABLED APENDAGE Q
         USING IEDQQCB,RQCB
         USING CVT,R3                   CVT ADDRESSABILITY     @Z40X9QG
         L     R3,CVTPTR                GET CVT ADDRESS        @Z40X9QG
         CLI   QCBPRI,AVTEZERO          IS QCB ALREADY POSTED
         BNZ   STARTING                   YES, ALREADY POSTED
*                                         NO, POST IT
         MVI   QCBPRI,PRICPBCL          PUT PRIORITY TO QCB
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*
* PUT CPB CLEANUP QCB ON ASYNCHRONOUS READY QUEUE            * @Z40X9QG
*
************************************************************** @Z40X9QG
         L     R10,CVTAQAVT             GET ADDR OF TCAM'S     @Z40X9QG
*                                       CVT EXTENSION            Y02027
         USING IEDQTCX,R10              TCX ADDRESSABILITY     @Z40X9QG
         L     CURR,TCXREADY            PICKUP ADDR OF CURRENT   Y02027
*                                       ELEMENT ON AYNCHRONOUS   Y02027
*                                       READY QUEUE              Y02027
NEWCURR  STCM  CURR,SEVEN,QCBLINK       LINK NEW ELEMENT TO THE  Y02027
*                                       CURRENT ELEMENT          Y02027
         CS    CURR,RQCB,TCXREADY       WAS CURRENT ELEMENT      Y02027
*                                       UPDATED ASYNCHRONOUSLY   Y02027
         BNE   NEWCURR                  YES, LINK NEW ELEMENT    Y02027
*                                       TO NEW CURRENT ELEMENT   Y02027
*                                       NO, ASYNCHRONOUS RDY Q   Y02027
*                                       IS UPDATED WITH NEW ELEM Y02027
*                                       BY COMPARE-AND-SWAP INST Y02027
         DROP  R10                                             @Z40X9QG
         DROP  RQCB                                            @Z40X9QG
         SPACE 2                                               @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* DETERMINE WHICH ECB IS TO BE POSTED                        * @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
STARTING EQU   *                                               @Z40X9QG
         LA    R11,AVTOSECB             ASSUME TCAM'S ECB      @Z40X9QG
         TM    AVTBIT1,AVTREADN         WAS READ ISSUED BY     @Z40X9QG
*                                       CHECKPOINT QUEUE SCAN  @Z40X9QG
         BO    QPOST                    NO, BRANCH             @Z40X9QG
         LA    R11,AVTCKECA             GET CKPT ECB           @Z40X9QG
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* USE 'QUICK POST' TECHNIQUE TO POST ECB                     * @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
QPOST    EQU   *                                               @Z40X9QG
         L     R14,ZERO(,R11)           GET CONTENTS OF ECB    @Z40X9QG
         L     R15,POSTBIT              GET COMPLETION BIT AND @Z40X9QG
*                                       CODE TO BE COMPARED AND@Z40X9QG
*                                       SWAPPED                @Z40X9QG
         TM    ZERO(R11),WAITBIT        ECB WAITING            @Z40X9QG
         BO    POST                     YES, BRANCH            @Z40X9QG
         CS    R14,R15,ZERO(R11)        DO COMPARE AND SWAP TO @Z40X9QG
*                                       SET ECB POSTED         @Z40X9QG
         BZ    EXIT                     BR IF CS SUCCESSFUL    @Z40X9QG
         SPACE 2                                               @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* USE BRANCH ENTRY TO POST ECB                               * @Z40X9QG
*        REGISTER 10 - COMPLETION CODE                       * @Z40X9QG
*        REGISTER 11 - ADDRESS OF ECB                        * @Z40X9QG
*        REGISTER 14 - RETURN ADDRESS                        * @Z40X9QG
*        REGISTER 15 - POST ENTRY POINT                      * @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
POST     EQU   *                                               @Z40X9QG
         L     R15,CVT0PT01             OS POST ENTRY ADDR
         SLR   R10,R10                  CLEAR REG 10           @Z40X9QG
         BALR  R14,R15                  POST TCAM'S ECB TO
*                                         ACTIVATE TCAM DISPATCHER
         SPACE 2                                               @Z40X9QG
************************************************************** @Z40X9QG
* IF STARTUP IS IN PROGRESS, CHECKPOINT OPEN IS THE ONLY ONE USING
* CPBS.  IT HAS ISSUED A 'WAIT' ON AVTOSECB AFTER PASSING CPBS TO
* EXCP DRIVER TO GET I/O STARTED.  WHEN APPENDAGE POSTS AVTOSECB,
* THIS SATISFIES THE CHECKPOINT OPEN, GIVING IT CONTROL.  IF TCAM
* IS ACTUALLY RUNNING (NOT A STARTUP SITUATION), THIS POST SATISFIES
* THE 'WAIT' ISSUED BY THE TCAM DISPATCHER.
*
************************************************************** @Z40X9QG
EXIT     EQU   *
         LM    R0,R15,REGSAVE           RESTORE REGISTERS      @Z40X9QG
         BR    R14                      EXIT TO IOS
*
   TITLE '''IGG019R2'' - START I/O APPENDAGE'
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* DESCRIPTIVE NAME - START I/O APPENDAGE                     * @Z40X9QG
*                                                            * @Z40X9QG
* FUNCTION - INITIALIZE THE IOSB AND TRANSLATE CCW'S FROM    * @Z40X9QG
*            VIRTUAL TO REAL                                 * @Z40X9QG
*                                                            * @Z40X9QG
* ENTRY POINT  - DISKSIO                                     * @Z40X9QG
*                                                            * @Z40X9QG
* INPUT -                                                    * @Z40X9QG
*        REGISTER 2  - ADDRESS OF IOSB                       * @Z40X9QG
*        REGISTER 7  - ADDRESS OF IOSBE                      * @Z40X9QG
*        REGISTER 11 - ADDRESS OF CPB                        * @Z40X9QG
*        REGISTER 14 - RETURN ADDRESS                        * @Z40X9QG
*        REGISTER 15 - ENTRY POINT ADDRESS                   * @Z40X9QG
*                                                            * @Z40X9QG
* OUTPUT - INITIALIZED IOSB AND TRANSLATED CCW'S. THE        * @Z40X9QG
*          FOLLOWING ARE USED AS WORK REGISTERS: 1,10,11     * @Z40X9QG
*                                                            * @Z40X9QG
* CALLED BY -                                                * @Z40X9QG
*        IEDQEB   - BEFORE STARTIO MACRO ISSUED              * @Z40X9QG
*        IGG019R2 - AS SUBROUTINE BEFORE RETURN TO IOS       * @Z40X9QG
*                   FOR RETRY                                * @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
         SPACE 1                                               @Z40X9QG
         USING IEDQCPB,RCPB             CPB ADDRESSABILITY     @Z40X9QG
         USING IOSB,RIOSB               IOSB ADDRESSABILITY    @Z40X9QG
         USING IOSBE,RIOSBE             IOSBE ADDRESSABILITY   @Z40X9QG
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* INITIALIZE THE IOSB                                        * @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
         SPACE 1                                               @Z40X9QG
         USING DISKSIO,R15              USE R15 AS BASE        @Z40X9QG
DISKSIO  EQU   *                                               @Z40X9QG
         SLR   R1,R1                    CLEAR REGISTER         @Z40X9QG
         ST    R1,IOSFLA                CLEAR FLAGS            @Z40X9QG
         MVI   IOSFLA,IOSACHN           SET CHAINING FLAGS     @Z40X9QG
         MVI   IOSPRLVL,ZERO            CLEAR PRLVL            @VS41093
         MVI   IOSOPT,IOSTSLL           SET NO LOCK FOR        @Z40X9QG
*                                       TERMINATION ROUTINE    @Z40X9QG
         MVI   IOSOPT2,ZERO             CLEAR OPT2             @Z40X9QG
         ST    R1,IOSAPMSK              CLEAR MASK AND SENSE   @Z40X9QG
         ST    R1,IOSIPIB               CLEAR IPIB             @Z40X9QG
         ST    R1,IOSERP                CLEAR ERP WORK AREA    @Z40X9QG
         STCM  R1,THREE,IOSAFF          CLEAR AFFINITY AND ... @Z40X9QG
*                                       ... 1ST BYTE OF PATH   @Z40X9QG
         STH   R1,IOSMDB                CLEAR ERP BYTES        @Z40X9QG
         MVC   IOSEEK,CPBABSAD          SET MBBCCHHR           @Z40X9QG
         MVC   IOSEEKA,CPBABSAD         SET MBBCCHHR           @Z40X9QG
         DROP  RCPB                                            @Z40X9QG
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* TRANSLATE CCW'S FROM VIRTUAL TO REAL ADDRESSES             * @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
         SPACE 1                                               @Z40X9QG
         USING IEDQCCW,R10              CCW ADDRESSABILITY     @Z40X9QG
         LA    R10,ZERO(,RCPB)          GET ADDRESS OF         @Z40X9QG
*                                       CHANNEL PROGRAM        @Z40X9QG
         ST    R10,IOSVST               SET VIRTUAL ADDRESS OF @Z40X9QG
*                                       CHANNEL PROGRAM        @Z40X9QG
         LRA   R1,ZERO(,R10)            CONVERT TO REAL        @Z40X9QG
         ST    R1,IOSRST                SET REAL CHANNEL       @Z40X9QG
*                                       PROGRAM ADDRESS        @Z40X9QG
         SPACE 1                                               @Z40X9QG
         TM    IOSBEFLG,IOSBECPR        CCW'S REAL             @Z40X9QG
         BOR   R14                      YES, RETURN TO CALLER  @Z40X9QG
         OI    IOSBEFLG,IOSBECPR        SET TRANSLATE FLAG     @Z40X9QG
CONVLOOP EQU   *                                                 X01004
         ICM   R11,AD,CCWADDR           I/O ADDRESS              X01004
         LRA   R1,ZERO(,R11)            CONVERT TO REAL        @Z40X9QG
         STCM  R1,AD,CCWADDR            SET REAL ADDRESS       @Z40X9QG
         CLI   CCWOPCDE,SM              STATUS MODIFIER EXPECTED X01004
         BE    STATUSM                  BRAVCH YES               X01004
         TM    CCWOPCDE,NOTIC            THIS CCW A TIC          X01004
         BZ    ISATIC                   BRANCH YES               X01004
         TM    CCWFLAGS,CCWCC+CCWCD     CHAINING FLAGS SET       X01004
         BCR   NO,R14                   BRANCH NO - END OF CHAIN X01004
*                                       RETURN TO IOS            X01004
PLUS8    EQU   *                                                 X01004
         LA    R10,CCW+EIGHT            BUMP TO NEXT CCW         X01004
         B     CONVLOOP                 CONTINUE LOOP            X01004
STATUSM  EQU   *                                                 X01004
         LA    R10,CCW+EIGHT            BUMP TO TIC              X01004
         ICM   R11,AD,CCWADDR           TIC TO ADDRESS           X01004
         LRA   R1,ZERO(,R11)            CONVERT TO REAL        @Z40X9QG
         STCM  R1,AD,CCWADDR            SET REAL ADDRESS       @Z40X9QG
         B     PLUS8                    GET NEXT CCW             X01004
ISATIC   EQU   *                                                 X01004
         LR    R10,R11                  NEXT CCW IS TIC TO ADDR. X01004
         B     CONVLOOP                 CONTINUE LOOP            X01004
*
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* DATA DEFINITIONS                                           * @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
         SPACE 2                                               @Z40X9QG
         DS    0F                                              @Z40X9QG
POSTBIT  DC    X'40000000'              COMPLETION BIT AND CODE@Z40X9QG
BADCCW   DC    A(CPBABSAD-IEDQCPB)      CPB ADDR OUT OF RANGE    99226
         SPACE 2                                               @Z40X9QG
*        ERROR BITS TO CHECK IN CSW                            @Z40X9QG
ERRBITS  DS    0XL2                     UNIT AND CHANNEL ...   @Z40X9QG
*                                       ... STATUS BITS        @Z40X9QG
UNITSTAT DC    XL1'03'                  UNIT STATUS            @Z40X9QG
*                                        02 - UNIT CHECK       @Z40X9QG
*                                        01 - UNIT EXCEPTION   @Z40X9QG
CHANSTAT DC    XL1'7F'                  CHANNEL STATUS         @Z40X9QG
*                                        40 - INCORRECT LENGTH @Z40X9QG
*                                        20 - PROGRAM CHECK    @Z40X9QG
*                                        10 - PROTECTION CHECK @Z40X9QG
*                                        08 - CHANNEL DATA     @Z40X9QG
*                                             CHECK            @Z40X9QG
*                                        04 - CHANNEL CONTROL  @Z40X9QG
*                                             CHECK            @Z40X9QG
*                                        02 - INTERFACE        @Z40X9QG
*                                             CONTROL CHECK    @Z40X9QG
*                                        01 - CHAINING CHECK   @Z40X9QG
         SPACE 2                                               @Z40X9QG
H8       DC    H'8'                     ADJUST PSEUDO CPB REG    S21101
H16      DC    H'16'                    ADJUST PSEUDO CPB REG    S21101
         SPACE 1                                               @Z40X9QG
PATCH    DC    20H'0'                   PATCH AREA             @Z40X9QG
         SPACE 2                                               @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
*        END OF LOAD MODULE - DO NOT ADD CODE AFTER          * @Z40X9QG
*        THIS EQUATE                                         * @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
         CNOP  0,8                      ALIGN TO DOUBLEWORD      X02004
END19R2  EQU   *                        END OF LOAD MODULE       X02004
         EJECT                                                 @Z40X9QG
*        DSECT FOR IOS SAVE AREA                               @Z40X9QG
         SPACE 1                                               @Z40X9QG
REGSAVE  DSECT
SAVE0    DS    A                        SAVE AREA FOR REG0     @Z40X9QG
SAVE1    DS    A                        SAVE AREA FOR REG1     @Z40X9QG
SAVE2    DS    A                        SAVE AREA FOR REG2     @Z40X9QG
SAVE3    DS    A                        SAVE AREA FOR REG3     @Z40X9QG
SAVE4    DS    A                        SAVE AREA FOR REG4     @Z40X9QG
SAVE5    DS    A                        SAVE AREA FOR REG5     @Z40X9QG
SAVE6    DS    A                        SAVE AREA FOR REG6     @Z40X9QG
SAVE7    DS    A                        SAVE AREA FOR REG7     @Z40X9QG
SAVE8    DS    A                        SAVE AREA FOR REG8     @Z40X9QG
SAVE9    DS    A                        SAVE AREA FOR REG9     @Z40X9QG
SAVE10   DS    A                        SAVE AREA FOR REG10    @Z40X9QG
SAVE11   DS    A                        SAVE AREA FOR REG11    @Z40X9QG
SAVE12   DS    A                        SAVE AREA FOR REG12    @Z40X9QG
SAVE13   DS    A                        SAVE AREA FOR REG13    @Z40X9QG
SAVE14   DS    A                        SAVE AREA FOR REG14    @Z40X9QG
SAVE15   DS    A                        SAVE AREA FOR REG15    @Z40X9QG
         SPACE 5                                               @Z40X9QG
         TIOSBED                                               @OZ26164
         EJECT                                                 @Z40X9QG
         IECDIOSB                                              @Z40X9QG
         EJECT                                                 @Z40X9QG
         TCPBD 3330                                              99226
*                                                                99226
* IN DISK ERROR CONDITIONS, DISK APPENDAGE PASSES ERROR STATUS   99226
* INFORMATION IN THE CPB AS FOLLOWS                              99226
*                                                                99226
         ORG   CPBSEEK                  REDEFINE FROM CPB START  99226
         DS    A                        RESERVED FOR IEDQRQ      99226
CPBFLAG3 DS    C                        FROM IOBFLAG3            99226
CPBCSW   DS    CL7                      FROM IOBCSW              99226
CPBFLAG1 DS    C                        FROM IOBFLAG1            99226
CPBFLAG2 DS    C                        FROM IOBFLAG2            99226
CPBSENS0 DS    C                        FROM IOBSENS0            99226
CPBSENS1 DS    C                        FROM IOBSENS1            99226
CPBECBCC DS    C                        FROM IOBECBCC            99226
CPBUCBID DS    CL3                      FROM UCBNAME             99226
         EJECT                                                 @Z40X9QG
         TCCWD
         EJECT                                                 @Z40X9QG
         TPRIOR
         EJECT                                                 @Z40X9QG
         TQCBD
         EJECT                                                 @Z40X9QG
         TAVTD                                                   99226
         EJECT                                                 @Z40X9QG
UCB      DSECT                                                   99226
         IEFUCBOB                                                99226
         EJECT                                                 @Z40X9QG
CVT      DSECT
         CVT
         EJECT                                                 @Z40X9QG
         TTCXD
         SPACE 2                                               @Z40X9QG
         END
