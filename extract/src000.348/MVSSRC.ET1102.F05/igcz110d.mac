         TITLE 'IGCZ110D - MCPCLOSE PROCESSING ROUTINE'
IGCZ110D CSECT
         SPACE 3
*  CHANGE ACTIVITY AS FOLLOWS:                                        *
******************** MICROFICHE FLAGS *********************** SUPT CODE
*A000000-999999                                                  S99240
*C446000-448000,457000                                          SA58434
*A545001                                                        SA59972
*C465000-465001                                                 SA59972
*A405000                                                        SA60325
*A382000                                                       @XA05285
*A294000,540000                                                @SA70313
*C141857,141871                                                @OZ09246
*D141878                                                       @OZ09246
*A141892                                                       @OZ09246
*A323000,337000,399000,458000,459000,522000                    @OX13498
*C327000,436000-437000,468000-469000                           @OX13498
*C300000                                                       @OY14092
*A548840                                                       @OY14092
*A292000,382600,388000,548840                                  @OZ24311
*C465001,545001                                                @OZ24822
*C292500                                                       @OZ26899
         SPACE 3
***********************************************************************
*                                                                     *
*MODULE-NAME=IGCZ110D                                                 *
*                                                                     *
*DESCRIPTIVE-NAME=MCPCLOSE PROCESSING ROUTINE                         *
*                                                                     *
*COPYRIGHT='NONE'                                                     *
*                                                                     *
*  STATUS: CHANGE LEVEL 5                                             *
*                                                                     *
*FUNCTION: THIS ROUTINE PROCESSES AN MCPCLOSE MACRO FROM AN APPLICAT  *
*   TION PROGRAM OR A HALT COMMAND FROM A TERMINAL OR CONSOLE. IT     *
*   RECEIVES CONTROL FROM THE FIRST LOAD OF MCPCLOSE, IGCZ010D.       *
*   IGCZ010D SYNTAX CHECKS THE COMMAND AND IF VALID XCTLS TO IGCZ110D.*
*                                                                     *
*   IT CHECKS BIT IN OPERATOR CONTROL ELEMENT TO SEE IF A QUICK OR A  *
*   FLUSH CLOSEDOWN WAS REQUESTED.IF QUICK IT SETS A BIT IN TCAM AVT. *
*   IT THEN LOOPS THROUGH THE LCBS CHECKING LINE ACTIVITY FOR SENDING *
*   ONLY OR FOR SENDING OR RECEIVING. AFTER 1ST LOOP THROUGH IT SETS  *
*   THE MCPCLOSEDOWN BIT IN THE AVT AND 'WAITS' FOR REUSABLE DISK     *
*   SUBTASK TO COMPLETE ITS ACTIVITIES BEFORE CHECKING LINE ACTIVITY  *
*   AGAIN.                                                            *
*                                                                     *
*   WHEN DISK ACTIVITY CEASES IT AGAIN CHECKS LINES FOR ACTIVITY      *
*   ON THIS LOOP THROUGH LCBS IT ISSUES A WAIT SVC AND IS POSTED      *
*   COMPLETE WHEN QEVENT POSTS THE OPERATOR CONTROL ECB  AFTER EACH   *
*   POST IT LOOPS THROUGH THE LCBS CHECKING LINE ACTIVITY. WHEN ALL   *
*   LINE ARE FINISHED IT AGAIN LOOPS THROUGH LCBS THIS TIME CHECKING  *
*   TO SEE IF THE LINES ARE STOPPED. IF STOPPED IT GETS THE NEXL LCB. *
*   IF ONE IS FOUND THAT IS NOT STOPPED IT OBTAINS A UNIT,BUILDS AND  *
*   FORMATS A STOPLINE REQUEST AND TPOSTS THE UNIT TO STOPLINE QCB    *
*   THEN XCTLS TO IGC0010D UNTIL THE REQUEST HAS BEEN HONORED.        *
*   STOPLINE WILL TPOST THE STOPPED LCB TO THE OPERATOR CONTROL QCB.  *
*   IGC0010D WILL PASS THIS STOPPED LCB TO IGCZ110D. AGAIN THE LCBS   *
*   ARE LOOPED THROUGH AND STOPLINE REQUESTS BUILT UNTIL ALL LCBS     *
*   ARE STOPPED. THEN A CHECK IS MADE FOR ANY OPEN PCB'S IN APPLICAT- *
*   ION PROGRAMS BY CHECKING THE USE COUNT IN EACH OPENED PCB. IF ANY *
*   ARE OPENED THE OPERATOR IS NOTIFIED AND WAIT IS ISSUED FOR CLOSE  *
*   TO BE ISSUED. IF FORCE CLOSE WAS SPECIFIED THE EODAD EXIT IS      *
*   FORCED TO ALLOW THE USER TO ISSUE A CLOSE.                        *
*                                                                     *
*   WHEN ALL PCBS ARE CLOSED AN XCTL TO IGCZ010D IS DONE TO FACILITATE*
*   POSTING THE CHECKPOINT REQUEST ELEMENT TO THE CHECKPOINT ROUTINE  *
*   IF CHECKPOINT DCB IS OPEN AND A QUICKCLOSE WAS REQUESTED OR FOR A *
*   FLUSHCLOSE THE CLOSEDOWN COMPLETION QCB.                          *
*ENTRY POINT:                                                         *
*                                                                     *
*        IGCZ110D                                                     *
*                                                                     *
*INPUT:REGISTER 1 HAS THE ADDRESS OF THE OPERATOR CONTROL AVT         *
*                                                                     *
*OUTPUT:NONE                                                          *
*                                                                     *
*EXTERNAL REFERENCES --                                               *
*                                                                     *
*        AQCTL SVC-QPOSTS ELEMENT TO READY QUEUE                      *
*                                                                     *
*EXITS,NORMAL: THIS MODULE RETURNS TO IGC0010D OR IGCZ010D            *
*                                                                     *
*EXITS,ERROR--                                                        *
*   ERROR MESSAGES ARE-                                               *
*   IED098I DCB NOT CLOSED FOR MESSAGE PROCESSING PROGRAM             *
*                                                                     *
*TABLES/WORK AREAS:                                                   *
*                                                                     *
*        CVT                                                          *
*        AVT(AVTBIT1,AVTTCB,AVTCOB+4,AVTCCELE,AVTCLOSB)       @ZM46681*
*        TCB                                                          *
*        DEB                                                          *
*        DCB                                                          *
*        LCB                                                          *
*        OPCE                                                         *
*                                                                     *
*                                                                     *
*ATTRIBUTES-- SERIALLY REUSABLE,TRANSIENT(TYPE 4),DISABLED,SUPERVISOR *
*   MODE,NON-REENTRANT,REFRESHABLE                                    *
*                                                                     *
*CHARACTER CODE DEPENDENCY                                            *
*        THE OPERATION OF THIS MODULE DEPENDS UPON AN INTERNAL        *
*        REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS        *
*        EQUIVALENT TO THE ONE USED AT ASSEMBLY TIME.  THE CODING     *
*        HAS BEEN ARRANGED SO THAT REDEFINITION OF CHARACTER          *
*        CONSTANTS, BY REASSEMBLY WILL RESULT IN A CORRECT MODULE     *
*        FOR THE NEW DEFINITION.                                      *
*                                                                     *
*NOTES - COMMUNICATIONS BETWEEN THE VARIOUS TRANSIENT MODULES IS      *
*        PRIMARILY THROUGH THE OPERATOR CONTROL AVT.                  *
*                                                                     *
*        THIS IS A MODULE RE-WRITE OF IEDQC0 AS OF OS/TCAM LEVEL II   *
***********************************************************************
         EJECT
*        REGISTER EQUATES
R0       EQU   0                        TEMPORARY REG
R1       EQU   1                        ADDRESS OF OPERATOR CONTROL    X
                                        WORK AREA
ROPCAVT  EQU   2                        BASE FOR OPC AVT
R2       EQU   2                        ADDRESS OF INPUT (BFR,CIB)
ROPCE    EQU   3                        BASE FOR OPC ELEMENT
R3       EQU   3                        POSITION IN BUFFER
R4       EQU   4                        BASE FOR TCB
RAVT     EQU   4                        BASE REG FOR TCAM AVT
R5       EQU   5                        BASE FOR DEB
R6       EQU   6                        BASE FOR DCB
R7       EQU   7                        BASE FOR LCB
R8       EQU   8                        BASE FOR PCB
R9       EQU   9                        ADDRESS OF AVT
R10      EQU   10                       COUNT OF LINES IN A GROUP
R11      EQU   11                       WORK REG
R12      EQU   12                       BASE REG
RBASE    EQU   12                       BASE REG FOR IGCZ110D
R13      EQU   13                       SAVE REG
R14      EQU   14                       RETURN REG
R15      EQU   15                       BRANCH REG
         SPACE 3
         USING IEDQOPCD,ROPCAVT         BASE FOR OPERATOR CONTROL AVT
         USING IEDQAVTD,RAVT            BASE FOR TCAM AVT
         USING IEDQOPCE,ROPCE           BASE FOR OPC ELEMENT
         BALR  RBASE,ZERO               ESTABLISH ADDRESSABILITY
         USING *,RBASE
IGCZ110D IEDHJN SKIPID
         LR    ROPCAVT,R1               SET UP BASE REG FOR OPC AVT
         L     RAVT,OPCAVTPT            SET TCAM AVT BASE
         L     ROPCE,OPCCOPCE           SET OPC ELEMENT BASE
         SR    R15,R15                  CLEAR REGISTER ON ENTERING
         TM    AVTBIT1,AVTCLOSN         CHECK FOR 2ND ENTRY TO RTN
         BO    STOPDLCB                 BRANCH IF 2ND ENTRY
         SPACE 3
*DETERMINE TYPE OF CLOSEDOWN REQUESTED
         SPACE
         MVI   AVTCLOSB+EIGHT,HEXFF     INDICATE NOT FROM CONSOLE
         TM    OCSWITCH,HEX80           QUICK CLOSE REQUESTED
         BNO   QC040                    NO - FLUSH
QC038    EQU   *
         OI    AVTBIT1,AVTQUCKN         TURN ON QUICK CLOSE SWITCH
         L     R8,CVTPTR                LOAD CVT ADDR            Y02027
         L     R8,CVTAQAVT-CVT(R8)      LOAD TCAM CVT EXTENSION  Y02027
         OI    TCXBIT1-IEDQTCX(R8),AVTQUCKN                      Y02027
*                                       MAP CLOSE BIT FOR COMM   Y02027
*                                       TASK                     Y02027
QC040    EQU   *
         LA    R11,QC0STOP              FLAG FOR STOPPED LINES
         LA    R8,LCBSENDN+LCBRECVN+LCBFREEN VALUE FOR EXECUTE INST
         BAL   R14,QC04105              FLAG ALL LCB WHICH ARE STPD
         OI    AVTBIT1,AVTCLOSN         TURN ON MCPCLOSE SWITCH
         L     R8,CVTPTR                LOAD CVT ADDR            Y02027
         L     R8,CVTAQAVT-CVT(R8)      LOAD TCAM CVT EXTENSION  Y02027
         OI    TCXBIT1-IEDQTCX(R8),AVTCLOSN                      Y02027
*                                       MAP CLOSE BIT FOR COMM   Y02027
*                                       TASK                     Y02027
         SPACE 1
***********************************************************************
*  SEARCH AVTOPCOB FOR ANY ELEMENTS FROM AN APPLICATION PROGRAM AND   *
*  IF ANY, DEQUEUE THE ELEMENT AND XMPOST THE WAITING ECB USING THE   *
*  BRANCH ENTRY TO XMPOST.                                       Y02027
***********************************************************************
LOCKQUE  SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE,               X
               RELATED=(AVTOPCOB,IGCZ110D,FREEQUE)               Y02027
         SR    R10,R10                  CLEAR REG                Y02027
         ICM   R10,ADD,AVTOPCOB+ONE     GET HEAD OF ELEMENT CHN  Y02027
         LA    R5,AVTOPCOB+ONE          SET REG FOR POSSIBLE MVC Y02027
QLOOP    EQU   *                                                 Y02027
         C     R10,AVTDELAD             DUMMY LAST ELEMENT       Y02027
         BE    FREEQUE                  YES BRANCH               Y02027
         TM    ZERO(R10),MPPKEY         APPL PROG ELEMENT        Y02027
         BO    DEQUE                    YES, BRANCH TO CLEANUP   Y02027
         SPACE 1
GETLINK  EQU   *                                                 Y02027
         LA    R5,FIVE(,R10)            ADJUST PTR TO LINK FLD   Y02027
*                                       FOR UPDATE               Y02027
         ICM   R10,ADD,FIVE(R10)        GET NEXT ELEMENT         Y02027
         B     QLOOP                    GO CHECK IT              Y02027
DEQUE    EQU   *                                                 Y02027
         MVC   ZERO(THREE,R5),FIVE(R10) DEQUEUE ELE & UPDATE Q   Y02027
         LA    R1,X10                   BACK UP TO BEGINNING OF  Y02027
         SR    R10,R1                   AIB/CIB                  Y02027
         USING IEDQAIB,R10              AIB ADDRESSABILITY       Y02027
         L     R1,AIBPCBAD              GET APPL PROG PCB OR ASCBY02027
         TM    AIBPCBAD,USEASCB         ASCB OR PCB ?            Y02027
         BO    GOPOST                   BRANCH IF ASCB PTR       Y02027
         ICM   R1,ALL,PCBPEBAD-IEDQPCB(R1)  GET PEB ADDR         Y02027
         BZ    GETLINK                  BR IF APPL PROGRAM       Y02027
*                                       NO LONGER ACTIVE         Y02027
         ICM   R1,ALL,PEBASCB-IEDQPEB(R1) GET APPL PROG ASCB PTR Y02027
         BM    GETLINK                  BR IF APPL PROG CLOSE IS Y02027
*                                       IN PROGRESS              Y02027
         SPACE 1
GOPOST   EQU   *                                                 Y02027
         MVI   AIBOPRC,HEX80            SET ERR RET CODE IN AIB  Y02027
         ST    R1,AIBXMLST              SAVE ASCB PTR            Y02027
         L     R7,CVTPTR                GET CVT PTR              Y02027
         L     R1,CVTAQAVT-CVT(R7)      GET TCX PTR              Y02027
         L     R1,TCXASCB-IEDQTCX(R1)   GET OUR ASCB PTR         Y02027
         L     R1,ASCBASXB-ASCB(R1)     GET ASXB PTR             Y02027
         L     R1,ASXBSPSA-ASXB(R1)     S/A VECTOR TABLE ADDR    Y02027
         L     R1,WSALCWSA-WSAL(R1)     COMMON SAVE AREA ADDRESS Y02027
         STM   R0,R14,ZERO(R1)          SAVE REGS                Y02027
         LR    R9,R1                    SAVE SAVEAREA PTR        Y02027
         SPACE 1
         L     R15,CVT0PT01-CVT(R7)     GET XMPOST BR ENTRY ADDR Y02027
         LA    R13,CVTBRET-CVT(R7)      USE BR 14 INST IN      @OZ09246
*                                       CVT FOR ERROR EXIT       Y02027
         ICM   R13,EIGHT,X80            SET FLAG=USE REGS      @OZ09246
         L     R11,AIBECBA              GET ECB TO BE POSTED     Y02027
         ICM   R11,EIGHT,X80            TURN ON BIT = XMPOST     Y02027
         LR    RBASE,R13                SET UP ERROR EXIT      @OZ09246
         L     R13,AIBXMLST             PICK UP APPL PROG ASCB @OZ09246
         BALR  R14,R15                  GOT TO XMPOST            Y02027
         LM    R0,R14,ZERO(R9)          RESTORE REGS             Y02027
         ICM   R10,ADD,ZERO(R5)         PICK UP NEXT ELEMENT     Y02027
         B     QLOOP                    GO CHECK                 Y02027
         DROP  R10                      FREE REG                 Y02027
         SPACE 1
FREEQUE  EQU   *                                                 Y02027
         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE,RELATED=(AVTOPCOB,        X
               IGCZ110D,LOCKQUE)                                 Y02027
         SR    R15,R15                  CLEAR REG                Y02027
*WAIT FOR REUS DISK SUBTASK TO COMPLETE ITS ACTIVITIES BEFORE CHECKING
*LINE ACTIVITY.
         SPACE
QC0405   EQU   *
         TM    AVTBIT2,AVTREUSN         CHECK FOR REUS ACTIVITY
         BZ    QC041                    BRANCH IF NOT ACTIVE
         BAL   R14,WAITSUB              WAIT
         B     QC0405                   BRANCH BACK AND CHECK AGAIN
         SPACE 3
*GET DEB CHAIN FROM MESSAGE CONTROL TCB AND CHECK FOR ANY LINES
*STILL NOT STOPPED.
         SPACE
QC041    EQU   *
         LA    R8,LCBSENDN              VALUE FOR EXECUTE INST
         SR    R11,R11                  CLEAR REG TO INDICATE WAIT
         SR    R15,R15                  CLEAR REGISTER
         BAL   R14,QC04105              CHECK LINE ACTIVITY
         LA    R15,FOUR                 STOPPING LCBS THRU HK
         B     QC04105                  LOOP THRU LCBS STOP THOSE NOT
*                                       NOT ALREADY STOPPED
         SPACE 3
*SUBROUTINE TO CHECK LINE ACTIVITY FOR SENDING ONLY OR FOR SENDING
*OR RECEIVING
         SPACE
QC04105  EQU   *
         L     R9,AVTTCB                GET TCAM TCB ADDRESS
         USING TCB,R9                   BASE FOR TCB
QC042    EQU   *
         L     R5,TCBDEB                GET ADDRESS OF DEB CHAIN
         SR    R13,R13                  INITIALIZE WAIT SWITCH
         USING IEDQDEB,R5               BASE FOR DEB
         SPACE 3
*BEGINNING OF LOOP THROUGH DEB CHAIN
         SPACE
QC043    EQU   *
         LA    R5,0(,R5)                CLEAR HIGH ORDER BYTE
         LTR   R5,R5                    CHECK FOR END OF DEB CHAIN
         BZ    QC047                    BRANCH IF END OF CHAIN
         L     R6,DEBDCBAD-ONE          GET ADDRESS OF DCB
         USING IHADCB,R6                BASE FOR DCB
         TM    DCBDSORG+ONE,IEDQLINE    CHECK FOR LINE DCB
         BZ    QC046                    BRANCH TO END OF LOOP
         SPACE
         L     R7,DCBIOBAD              GET ADDR OF IOB IN LCB
         XR    R9,R9                    CLEAR INDEX REGISTER
         IC    R9,DCBEIOBX              GET LEN OF LCB FOR INDEX
         XR    R10,R10                  CLEAR
         IC    R10,DEBNMEXT             NUMBER OF LINES IN GROUP
         SPACE 3
*BEGINNING OF LOOP THROUGH LCB LIST
         SPACE
         LA    R1,LCBFLAG1-IEDQLCB      DISPLACEMENT FOR LCB BEGIN
         SR    R7,R1                    ADDR OF LCB BEGINNING
QC044    EQU   *
         AR    R7,R9                    MOVE TO NEXT LCB
         USING IEDQLCB,R7               BASE FOR LCB
QC04401  EQU   *
         TM    LCBSTAT1,LCBSENDN+LCBRECVN LINE MARKED AS SENDING AND
*                                       RECEIVING (SET BY LINE OPEN
*                                       IF SENDING STATUS NOT RECEIVED
         BO    QC04505                  BRANCH IF YES
         CH    R15,AVTHA4               IS IT TIME TO STOP LINES
         BE    QC0STOPL                 YES
         EX    R8,QC0TEST               CHECK FOR LINE ACTIVITY
         BZ    QC045                    BRANCH IF STOPPED OR RECEIVING
         TM    LCBSTAT1,LCBFREEN        CHECK FOR FREE LINE
         BZ    QC04403                  BRANCH IF NOT FREE
         SR    R1,R1                    CLEAR INDEX REGISTER
         IC    R1,LCBUCBX               GET UCB INDEX
         SLL   R1,2                     MULTIPLY BY 4
         L     R1,DCBINVLI(R1)          GET INVITATION LIST ADDR
         CLI   FOUR(R1),ZERO            CHECK FOR BFR SCH TIME DELAY
         BE    QC045                    BRANCH IF NOT IN TIME DELAY
QC04403  EQU   *
         SPACE 3
         LR    R13,R12                  SET WAIT SWITCH TO NON-ZERO
         B     QC04505                  BRANCH AROUND STOPPED LINE
QC045    EQU   *
         TM    LCBSTAT1,LCBRECVN+LCBFREEN IS LINE STILL RECEIVING
         BNZ   QC04505                  BRANCH IF RECEIVING OR FREE
         EX    R11,QC0SETFL             MARK LCB
         TM    LCBSTCBA+TWO,QC0STOP     CHECK FOR STOPPED LCB
         BO    QC04505                  BRANCH IF STOPPED PREVIOUS
         CH    R11,AVTHA2               CHECK FOR POST FUNCTION
         BNE   QC04505                  BRANCH IF LCBS ARE NOT TO      X
                                        BE POSTED TO THEMSELVES
         NI    LCBSTCBA+TWO,AVTEFF-QC0TWO TURN OFF BIT IF TURNED ON
         LR    R0,R7                    ADDR OF LCB
         ST    R7,0(,R7)                POST LCB TO ITSELF
         MVI   LCBPRI,PRILNFRE          SET LCB PRIORITY
         LR    R6,R14                   SAVE REG
         BAL   R14,QC080                POST ELEMENT TO READY QUEUE
         LR    R14,R6                   RESTORE REG
QC04505  EQU   *
         BCT   R10,QC044                SUBTRACT FROM NO. OF LINES
         SPACE
*END OF LOOP THROUGH LCB LIST
         SPACE 3
QC046    EQU   *
         L     R5,DEBDEBAD-ONE          GET ADDRESS OF NEXT DEB
         B     QC043                    BRANCH TO BEGINNING OF LOOP
         SPACE
*END OF LOOP THROUGH DEB CHAIN
         SPACE 3
QC047    EQU   *
         CH    R15,AVTHA4               CHECK TO SEE IF IN PROCESS
*                                       OF STOPPING LCBS USING HK
         BE    ALLSTOP                   LCBS ARE ALL STOPPED
         LTR   R13,R13                  CHECK WAIT SWITCH
         BCR   8,R14                    BRANCH IF ALL LINES STOPPED    X
                                        OR RECEIVING LAST MSG
         LTR   R11,R11                  CHECK FOR WAIT FUNCTION
         BCR   7,R14                    BRANCH IF NO WAIT TO BE DON
         SPACE
         LR    R6,R14                   SAVE REG
         BAL   R14,WAITSUB              GO WAIT AWHILE
         LR    R14,R6                   RESTORE REG
         B     QC04105                  LOOP THROUGH LCBS AGAIN
         SPACE 3
QC0STOPL EQU   *
         CLI   LCBSTAT1,AVTEZERO        IS LINE ALREADY STOPPED
         BE    QC04505                  YES GET NEXT LCB
*                                       NO - MUST BUILD CMD IN BUFFER
*                                       UNIT REQUESTING HK STOP THE
*                                       LINE
         NI    OCUNIT+THREE,HEXFC       SET UP BOUNDARY
         L     R1,OCUNIT                STOPLINE UNIT ADDR
         TM    OCSWITCH,HEX40           OPCE AND STOPLINE UNIT ARE
*                                       AVAILABLE FOR RE-USE
         BO    SETUNIT                  BRANCH IF YES
GETUNIT  EQU   *
         LR    R8,R13                   SET UP FOR ENQUEUE
         LR    R10,R15                  SAVE VALUE IN REG 15
         LA    R1,ONEUNIT               VALUE OF 1 -- WANT 1 UNIT
         LA    R13,OPCSAVE              SETUP REG SAVEAREA FOR CA
         L     R15,OPCGETBF             ADDR OF BUFFER REQUEST RTN
         BALR  R14,R15                  BRANCH TO GET A BUFFER UNIT
         ST    R1,OCUNIT                SAVE ADDR OF STOPLINE UNIT
         LR    R13,R8                   SAVE VALUE IN REG 8
         LR    R15,R10                  SAVE VALUE IN REG 15
SETUNIT  EQU   *
         L     R8,OPCWAITL              GET OPCE IF ONE PRESENT
         LA    R8,OPCZERO(R8)           CLEAR HI ORDER BYTE
         LTR   R8,R8                    OPCE IN CHAIN
         ST    ROPCE,OPCWAITL           INSERT OPCE IN CHAIN AT TOP
         MVC   OCLINK,AVTFZERO          ZERO OUT LINK FIELD
         BZ    QC0BY                    NO OPCE NOT IN CHAIN
         ST    R8,OCLINK                INSERT ELEMENT IN FRONT OF OLD
*                                       ELEMENT
QC0BY    EQU   *
         OI    OCSWITCH,HEX40           INDICATE OPCE IS IN OPCWAITL
         OI    OCSWITCH,HEX20           OPCE CANNOT BE REUSED  @OZ26899
         MVC   OCBACKUP(TWO),MODNAME    SAVE NAME FOR MATCH    @OZ26899
         ST    R7,LCBOFF(R1)            INSERT LCB ADDR IN UNIT@OZ26899
         ST    R5,DEBOFF(R1)            INSERT ADDR OF DEB IN UNIT
         MVI   PLCBFLG1(R1),HEXFF       INDICATE NOT A PLCB    @SA70313
         L     R11,AVTHK                GET ADDR OF HKQCB
         IC    R10,OPCZERO(R1)          SAVE HI ORDER BYTE
         ST    R11,OPCZERO(R1)          INSERT HKQCB  ADDR IN UNIT
         STC   R10,OPCZERO(R1)          RESTORE HI ORDER BYTE
         MVI   OPCFOUR(R1),STOPLINE     INSERT DC IN UNIT FOR HK
         TM    OCSWITCH,HEX80          QUICK CLOSE             @OY14092
         BZ    FLUSH                   NO,BRANCH               @OY14092
         OI    OPCEIGHT(R1),LOGOFF     SET TO FORCE LOGOFF     @OY14092
FLUSH    EQU   *                                               @OY14092
         LR    R0,R1                    SAVE ADDR OF UNIT
         BAL   R14,QC080                POST UNIT TO DISABLED RQ
OUT      EQU   *
         MVC   OCBACKUP(TWO),MODNAME    SAVE NAME FOR MATCH LATER
EXIT     EQU   *
         MVC   OPCLDNME+OPCTHREE(OPCTWO),XCTL00 PREPARE TO XCTL
         LA    R0,NOTCA                 INDICATE TO IGC0010D THAT
*                                       CONTROL DIDN'T COME FROM CA
XCTL     EQU   *
         LR    R1,ROPCAVT               PREPARE TO XCTL TO 00
         XCTL  SF=(E,OPCXCTL)           XCTL TO IGC0010D
         SPACE 3
***********************************************************************
*THIS IS THE SECOND ENTRY TO THIS MODULE. STOP LINES HAVE BEEN DONE.
*CHECK FOR ANC OPEN DCB'S IN APPLICATION PROGRAMS BY CHECKING THE
*USE COUNT IN EACH OPENED PCB.  IF ANY DCB'S ARE OPEN, NOTIFY THE
*OPERATOR AND WAIT FOR CLOSE TO BE ISSUED IF FORCE CLOSE WAS
*SPECIFIED FORCE THE EODAD EXIT ALSO.
***********************************************************************
         SPACE
         USING IEDQPCB,R8               BASE FOR PCB
ALLSTOP  EQU   *
         SR    R15,R15                  ZERO OUT THE REGISTER
         MVI   OCRLN,AVTEZERO           CLEAR SWITCHES         @OX13498
CHKPCBS  EQU   *
         L     R8,AVTPCBPT              ADDRESS OF PCB CHAIN
         LA    R8,ZERO(,R8)             CLEAR HIGH ORDER BYTE    Y02027
         LTR   R8,R8                    CHECK FOR NO PCBS
         BZ    QC0510                   BRANCH IF NONE         @OX13498
QC050    EQU   *
         L     R11,PCBPEBAD             GET PEB ADDRESS          Y02027
         LTR   R11,R11                  HAS APPL PROG CLOSED     Y02027
         BZ    QC051                    BRANCH IF PEB ADDR HAS   Y02027
*                                       BEEN INVALIDATED = APPL  Y02027
*                                       PROG CLOSED              Y02027
         L     R11,PEBASCB-IEDQPEB(R11) GET PTR TO ASCB          Y02027
         LTR   R11,R11                  IS APPL PROG CLOSE IN    Y02027
*                                       PROGRESS                 Y02027
         BNM   QC070                    BRANCH IF YES            Y02027
         SPACE 1
QC051    EQU   *
         NC    PCBLINK,PCBLINK          CHECK FOR END OF CHAIN
         L     R8,PCBLINK-ONE           GET NEXT PCB
         BNZ   QC050                    BRANCH IF NOT END OF CHAIN
         SPACE 1
QC0510   EQU   *                                               @OX13498
         TM    OCRLN,WAITN              WAIT NEEDED            @OX13498
         BZ    QC052                    NO, BRANCH             @OX13498
         OI    OCRLN,PASS2              INDICATE SCAN COMPLETED@OS13498
         BAL   R14,WAITSUB              GO ISSUE WAIT          @OX13498
         NI    OCRLN,AVTEFF-WAITN       RESET WAIT SWITCH      @OX13498
         B     CHKPCBS                  GO SCAN AGAIN          @OX13498
         SPACE 3
*CHECK LINE ACTIVITY AGAIN. WAIT FOR LINES TO STOP SENDING AND
*RECEIVING BEFORE GOING ON
         SPACE
QC052    EQU   *
*        BAL   R8,QC0402                CHECK FOR NEW OPC CMDS ON
         LA    R8,LCBSENDN+LCBRECVN+LCBFREEN VALUE FOR EXECUTE INST
         SR    R11,R11                  SET NO WAIT FLAG
         BAL   R14,QC04105              BRANCH TO SUBROUTINE
         LH    R11,AVTHA2               INDICATE LCB IS TO BE POSTD
         BAL   R14,QC04105              ACTIVATE LCBS ONCE MORE
         SR    R11,R11                  WAIT FOR LINE ACTIVITY
         BAL   R14,QC04105              WAIT FOR LINE ACTIVITY
         SR    R8,R8                    CLEAR CPB COUNT
         TM    AVTBIT1,AVTDISKN         DISK=YES SPECIFIED
         BNO   QC056                    BRANCH IF NO
         L     R5,AVTFCPB               GET 1ST CPB ON FREE POOL
         SPACE 3
*BEGINNING OF LOOP THROUGH CPBS IN FREEPOOL. CHECK FOR DISK ACTIVITY.
         SPACE
QC054    EQU   *
         LA    R5,0(,R5)                CLEAR HIGH ORDER BYTE
         LTR   R5,R5                    CHECK FOR END OF CPB CHAIN
         BZ    QC055                    BRANCH IF END OF CHAIN
         LA    R8,ONE(,R8)              ADD 1 TO COUNT OF CPBS
         USING IEDQCPB,R5               BASE FOR CPB
         L     R5,CPBNEXTF              GET NEXT CPB IN CHAIN
         B     QC054                    CHECK FOR END OF CHAIN
         SPACE
*END OF LOOP THROUGH CPBS IN THE FREE POOL
         SPACE 3
QC055    EQU   *
         CH    R8,AVTCPBNO              CHECK TOTAL NO. OF CPBS
         BL    QC052                    BRANCH IF SOME NOT IN FREEP
         SPACE 3
*POST CHECKPOINT REQUEST ELEMENT TO READY QUEUE AND POST
*DISPATCHER'S ECB.
*  WILL XCTL BACK TO IGCZ010D TO ACCOMPLISH THIS.
         SPACE
QC056    EQU   *
         MVC   OPCLDNME+OPCTHREE(OPCTWO),XCTLZ0 INSERT ID OF MOD
         OI    OPCFLAG2,QC0FF           INDICATE TO Z0 2ND ENTRY
         B     XCTL                     EXIT TO IGCZ010D
         SPACE 3
STOPDLCB EQU   *
         MVI   LCBSTAT1-IEDQLCB(R3),LCBSENDN+LCBRECVN MARK LCB @XA05285
*                                        AS SEND & RECV FOR CKPTOX05285
         LR    R9,R3                    SAVE LCB ADDRESS       @OZ24311
         LA    R15,FOUR                 INDICATES STOPPING LCBS
         LA    R10,OPCWAITL             GET ADDR OF WAIT LIST OF LCBS
         L     R3,OPCWAITL              GET 1ST ELEMENT
CHKOPCE  EQU   *
         CLC   OCBACKUP(TWO),MODNAME    MCPCLOSE'S ELEMENT
         BNE   GETNEXT                  NO
         L     R5,OCUNIT                GET ADDR OF HK BUFFER  @OZ24311
         CLM   R9,ADD,LCBOFF+ONE(R5)    IS THIS CORRECT LCB    @OZ24311
         BNE   EXIT                     IF NOT, RETURN TO 00   @OZ24311
         TM    OCSWITCH,HEX20           HAS BFR BEEN THRU QHK  @OZ24311
         BO    EXIT                     IF NOT, RETURN TO 00   @OZ24311
         MVC   OPCZERO(OPCFOUR,R10),OCLINK UPDATE CHAIN
         ST    R3,OPCCOPCE              SET AS CURRENT ELEMENT   S22024
         B     QC04105                  LOOP THRU LCBS AGAIN
GETNEXT  EQU   *
         LR    R10,R3                   SAVE OPCE ADDRESS
         L     R3,OCLINK                GET NEXT OPCE IN CHAIN
         LA    R3,OPCZERO(R3)           CLEAR HI ORDER BYTE
         B     CHKOPCE                  CHECK TO SEE IF MCPCLOSE'S
         SPACE 3
*ERROR CONDITION-A DCB IN AN APPLICATION PROGRAM WAS OPEN.
         SPACE
QC070    EQU   *
         OI    OCRLN,WAITN              INDICATE WAIT NEEDED   @OX13498
         L     R7,CVTPTR                BET CVT POINTER          Y02027
         L     R7,CVTAQAVT-CVTMAP(R7)   GET TCX PTR              Y02027
         L     R7,TCXPEWAC-IEDQTCX(R7)  BEGINNING OF PEWA CHAIN  Y02027
         LA    R7,ZERO(,R7)             CLEAR HIGH ORDER BYTE    Y02027
         USING IEDQPEWA,R7              PEWA ADDRESSABILITY      Y02027
         SPACE 1
COMPPCB  EQU   *                                                 Y02027
         CLM   R8,ADD,PEPCBAD+ONE       THIS THE PEWA            Y02027
*                                       LOOKING FOR              Y02027
         BE    PCBMATCH                 YES, BRANCH              Y02027
GETNXT   EQU   *                                                 Y02027
         ICM   R7,ADD,PEWALINK+ONE      GET NEXT PEWA            Y02027
         BZ    QC071                    GO WRITE OUT ERROR MSG   Y02027
         B     COMPPCB                  CHECK FOR MATCHING PCB   Y02027
PCBMATCH EQU   *                                                 Y02027
         TM    PEWAOPT2,PEWAIN          INPUT DCB                Y02027
         BNO   GETNXT                   NO, BRANCH               Y02027
         LA    R5,DCBSTFLS              SET REG = 'FLUSH CLOSE'  Y02027
         TM    AVTBIT1,AVTQUCKN         IS THIS QUICK CLOSE      Y02027
         BZ    TEST                     NO, BRANCH               Y02027
         AR    R5,R5                    SET REG = 'QUICK CLOSE'  Y02027
TEST     EQU   *                                                 Y02027
         IC    R0,PEWAFLG1              GET FLAG BYTE INDICATING Y02027
*                                       TYPE OF CLOSE IN WHICH   Y02027
*                                       EODAD EXIT CAN BE TAKEN  Y02027
         NR    R5,R0                    OK TO TAKE EODAD         Y02027
         BZ    GETNXT                   NO, BRANCH               Y02027
         NI    PEWAFLG1,AVTEFF-DCBSTQCK-DCBSTFLS   TURN OFF FLAG Y02027
*                                       TO PREVENT A 2ND PASS TO Y02027
*                                       EODAD EXIT               Y02027
         ICM   R0,ADD,PEWAECBA          GET APPL PROG ECB PTR    Y02027
         BZ    SETEOF                   BR IF NO ECB             Y02027
         TM    PEWAFLG,ERBBUSY          READ IN PROGRESS         Y02027
         BZ    POSTBUF                  NO, BRANCH               Y02027
SETEOF   EQU   *                                                 Y02027
         OI    PEWAOPTC,EODADFLG        TURN ON EODAD FLAG       Y02027
         B     GETNXT                   CHECK NEXT PEWA        @OX13498
POSTBUF  EQU   *
         LR    R10,R15                  SAVE SWITCH            @ZM47866
         LA    R1,ONEUNIT               REQUEST ONE UNIT       @ZM47866
         LA    R13,OPCSAVE              ADDR OF SAVEAREA       @ZM47866
         L     R15,OPCGETBF             ADDR OFF BUFFER REQUEST@ZM47866
         BALR  R14,R15                  GET A BUFFER           @ZM47866
         LR    R15,R10                  RESTORE SWITCH         @ZM47866
         LR    R14,R1                   INITIALIZE BASE        @ZM47866
         USING IEDQPRF,R14                                     @ZM47866
         MVI   PRFSTAT1,PRFNHDRN        SET TEXT LAST
         MVI   PRFNBUNT,ONE             SET UNIT COUNT
         LA    R10,PERAQCB              READ AHEAD QUE ADDR
         ST    R10,PRFQCBA-ONE          SET BUFFER
         MVI   PRFPRI,PRIAPBFR          POST PRIORITY
         SR    R0,R0                    CLEAR REG
         STH   R0,PRFSIZE               SET ZERO PRFSIZE
         L     R1,PEWAPROC              GET PROCESS ENTRY AND    Y02027
         ICM   R1,ADD,TRMDESTQ-IEDQTRM(R1)   DESTINATION QCB     Y02027
         USING IEDQQCB,R1               QCB ADDRESSABILITY       Y02027
         LA    R10,QCBSTVTO             STCB CHAIN PTR           Y02027
         LR    R0,R14                   SET REGS                SA58434
         CLM   R10,ADD,PEWAQCBS+ONE     SCHEDULER IN PEWA        Y02027
         LA    R14,QC071                SET RETURN ADDRESS       Y02027
         BE    QC080                    YES  BRANCH              Y02027
         MVC   QCBSTCHN(3),QCBSLINK     MOVE GET                 Y02027
         MVC   QCBSLINK(3),PEWAQCBS+ONE SCHEDULER                Y02027
         ST    R10,PEWAQCBS             TO READ AHEAD QCB        Y02027
         DROP  R1
         BAL   R14,QC080                POST BUFFER
         B     GETNXT                   CHECK NEXT PEWA        @OX13498
QC071    EQU   *
         TM    OCRLN,PASS2              SCAN COMPLETED BEFORE  @OX13498
         BO    QC075                    YES, BYPASS WTO        @OX13498
         CLC   QC0MSG2+FIFTY8(8),PCBJOBNA  CHK PREV MSG ISSUED   Y02027
         MVC   QC0MSG2+FIFTY8(EIGHT),PCBJOBNA    MOVE JOBNAME TO Y02027
*                                       MESSAGE                  Y02027
         BE    QC075                    BRANCH IF SAME MSG
         L     R1,OPCWORK               WORKAREA ADDRESS        SA59972
         MVC   AVTEZERO(SEVENTY,R1),QC0MSG2  MOVE MSG TO WORKA @OZ24822
         WTO   MF=(E,(1))               WRITE IT OUT
QC075    EQU   *
         B     QC051                    CHECK NEXT PCB         @OX13498
         SPACE 3
***********************************************************************
*SUBROUTINE TO TPOST AN ELEMENT TO THE DISABLED READY QUEUE WITH SVC
***********************************************************************
         SPACE
QC080    EQU   *
         LR    R1,R0
         XC    FIVE(THREE,R1),FIVE(R1)  CLEAR LINK FIELD
         STM   R0,R1,OPCAQCTL           PARM FOR QPOST SVC     @ZM46681
         LA    R1,OPCAQCTL              SET UP PARAMETER REG   @ZM46681
         MVI   OPCAQREQ,HEX0C           PUT CODE IN 1ST BYTE   @ZM46681
         MVI   OPCAQRQ2,HEX80           SET END OF PARA LIST   @ZM46681
         AQCTL                          USE SVC
         BR    R14                      RETURN FROM SUBROUTINE
         SPACE
         SPACE 3
***********************************************************************
*        WAIT SUBROUTINE                                              *
***********************************************************************
         SPACE 1
WAITSUB  EQU   *
         WAIT  ECB=AVTOPCOB+4           WAIT FOR COMPLETION OF REUS
         MVI   AVTOPCOB+FOUR,ZERO       CLEAR EDB
         BR    R14                      RETURN
         SPACE 3
***********************************************************************
*        EXECUTED INSTRUCTIONS                                        *
***********************************************************************
         SPACE 3
         USING IEDQLCB,R7               BASE FOR LCB
QC0TEST  TM    LCBSTAT1,ZERO            USED TO TEST LINE ACTIVITY
QC0SETFL OI    LCBSTCBA+TWO,ZERO        MARK LCB AS STOPPED
         SPACE 3
QC0MSG2  WTO 'IED098I DCB NOT CLOSED FOR MESSAGE PROCESSING PROGRAM-   X
                    ',MF=L,ROUTCDE=(1,11),DESC=4
         SPACE 3
MODNAME  DC    C'Z1'                    MOD ID TO MATCH
XCTL00   DC    C'00'                    MODULE ID OF IGC0010D
XCTLZ0   DC    C'Z0'                    ID OF IGCZ010D
X80      DC    X'80'                    BIT ON FOR XMPOST        Y02027
ALL      EQU   15                       MASK FOR ICM ALL BYTES   Y02027
X10      EQU   16                       LEN TO BACK UP TO START  Y02027
*                                       OF AIB                   Y02027
MPPKEY   EQU   X'18'                    FLAG = REQ FROM APPL PRG Y02027
USEASCB  EQU   X'80'                    FLAG = ALREADY HAVE ASCB Y02027
         SPACE 3
*IMMEDIATE DATA
         SPACE
IEDQLINE EQU   X'40'                    BIT ARRANGEMENT FOR TCAM       X
                                        LINE DSORG+1 FIELD
QC0ERROR EQU   4                        RETURN CODE FOR INVALID KEY
QC0CANCL EQU   8                        RETURN CODE FOR CANCELLED
QC0LAST  EQU   0                        RETURN CODE FOR COMPLETION
QC0STOP  EQU   1                        FLAG FOR LCBQCBA+2 TO          X
                                        INDICATE LINE STOPPED AT       X
                                        ENTRY TO CLOSEDOWN
QC0FF    EQU   X'FF'                    INVALID TCB ADDR IN PCB
QC0TWO   EQU   2                        EQUATED VALUE FOR AVTHA2
WAIT     EQU   X'80'                    ECB WAIT BIT
WAITN    EQU   X'80'                    WAIT NEEDED FLAG       @OX13498
PASS2    EQU   X'40'                    FLAG TO INDICATE THAT  @OX13498
*                                       THE PCBS WERE SCANNED  @OX13498
*                                       BEFORE                 @OX13498
         SPACE 3
OPCZERO  EQU   0                        OFFSET = 0               Y02027
OPCONE   EQU   1                        OFFSET = 1               Y02027
OPCTWO   EQU   2                        OFFSET = 2               Y02027
OPCTHREE EQU   3                        OFFSET = 3               Y02027
OPCFOUR  EQU   4                        OFFSET = 4               Y02027
OPCFIVE  EQU   5                        OFFSET = 5               Y02027
OPCSIX   EQU   6                        OFFSET = 6               Y02027
OPCSEVEN EQU   7                        OFFSET = 7               Y02027
OPCEIGHT EQU   8                        OFFSET = 8               Y02027
OPCNINE  EQU   9                        OFFSET = 9               Y02027
OPCTEN   EQU   10                       OFFSET = 10              Y02027
ONEUNIT  EQU   1                        UNIT COUNT               Y02027
LCBSTOP  EQU   X'E8'                    INDICATES STOPPED LCB TO Z1
STOPLINE EQU   X'DC'                    TO HK MEANS TO STOP LINE
NOTCA    EQU   2                        NOTCA INDICATOR
LCBOFF   EQU   16                       OFFSET IN UNIT FOR LCB ADDR
DEBOFF   EQU   12                       OFFSET IN UNIT FOR DEB ADDR
PLCBFLG1 EQU   X'20'                    OFFSET TO LCBFLG1      @SA70313
DCBQCOMP EQU   X'04'                    QTAM COMPAT DCB
DCBSTQCK EQU   X'80'                    STOP EQUAL QUICK
DCBSTFLS EQU   X'40'                    STOP EQUAL FLUSH
SEVENTY  EQU   70                       MSG AND ROUTE CDE LNGTH@OZ24822
ZERO     EQU   0                        ZERO
TWO      EQU   2                        TWO
EIGHT    EQU   8                        EIGHT
ONE      EQU   1                        OFFSET
THREE    EQU   3                        OFFSET
FOUR     EQU   4                        OFFSET
FIVE     EQU   5                        OFFSET
TWELVE   EQU   12                       OFFSET
FIFTY8   EQU   58                       OFFSET
TWO55    EQU   255                      OFFSET
HEXFF    EQU   X'FF'                    HEXFF          -
HEX80    EQU   X'80'                    HEX80
HEXFC    EQU   X'FC'                    HEXFC
HEX40    EQU   X'40'                    HEX40
HEX0C    EQU   X'0C'                    HEX0C
HEX20    EQU   X'20'                    HEX20                  @OZ24311
LOGOFF   EQU   X'10'                   FORCE LOGOFF            @OY14092
ADD      EQU   7                        ADDRESS MASK             Y02027
CVTMAP   CVT   DSECT=YES                                         Y02027
         SPACE 1
         TTCXD                                                   Y02027
         SPACE 1
         TPEBD                                                   Y02027
         SPACE 1
         TQCBD                                                   Y02027
         SPACE 1
         TTRMD                                                   Y02027
         TPEWAD                         PROC WRK AREA DSECT
         TAVTD
         TPCBD
         TOPCED
         TOPCAVTD
         TPRIOR
         TPRFD
         TLCBD
         TCPBD     3330
         TSCBD
IEDQCIB DSECT
         IEZCIB
TCB      DSECT
         DS    D                        SPACE FILLER
TCBDEB   DS    F                        ADDRESS OF QUEUE OF DEB'S
         SPACE 3
*DSECT FOR CVT
         SPACE
         SPACE
         DCBD  DSORG=TX
DCBFLAG1 EQU   IHADCB+60                DCB TCAM FLAGBYTE
         SPACE 3
*DSECT FOR DEB
         SPACE
IEDQDEB  DSECT
         ORG   IEDQDEB+5                OFFSET TO NEXT DEB ADDRESS
DEBDEBAD DS    AL3                      ADDRESS OF NEXT DEB
         ORG   IEDQDEB+16               OFFSET TO NUMBER OF EXTENTS
DEBNMEXT DS    X                        NO OF EXTENTS IN DATA SET
         ORG   IEDQDEB+25               OFFSET TO DCB ADDRESS
DEBDCBAD DS    AL3                      ADDR OF DCB
         SPACE
         ORG   IEDQDEB+32               OFFSET TO DEVICE MODIFIER BYTE
DEBDVMOD DS    XL1                      DEVICE MODIFIER
DEBUCBAD DS    XL3                      ADDRESS OF UCB
DEBBINUM DS    XL2                      BIN NO
DEBSTRCC DS    XL2                      CYLINDER ADDR FOR START
DEBSTRHH DS    XL2                      TRACK ADDR FOR START OF EXT
DEBENDCC DS    XL2                      CYLINDER ADDR FOR EXTNT END
DEBENDHH DS    XL2                      TRACK ADDR FOR EXTENT END
DEBNMTRK DS    XL2                      NO TRACKS IN THIS EXTENT
DEBEND  EQU   *
DEBPCBAD EQU   IEDQDEB+9                DEB FIELD
DEBQCBAD EQU   IEDQDEB+17               DEB FIELD
DEBTAMWA EQU   IEDQDEB+21               DEB FIELD
DEBSEGLN EQU   DEBEND-DEBDVMOD          LNGTH OF SEG FOE EACH EXTNT
         SPACE 2
         TAIBD                                                   Y02027
         SPACE 2
         IHAPSA                                                  Y02027
         SPACE 2
         IHAWSAVT CLASS=LOCAL,DSECT=YES                          Y02027
         SPACE 2
         IHAASCB                                                 Y02027
         SPACE 2
         IHAASXB                                                 Y02027
         SPACE 2
         END
