         TITLE 'IECVIOPM - I/O AND PATH MASK UPDATE ROUTINE            *
                        '
IECVIOPM CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(22)                                             0001
         DC    C'IECVIOPM UZ18956 78142'                           0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
*                                                                  0155
         EJECT
*/********************************************************************/
*/*          INITIALIZE REGISTERS AND GET WORKING STORAGE            */
*/********************************************************************/
*                                                                  0156
*   WRK11=PARAMREG;                 /* SAVE PARAMETER ADDR           */
         LR    WRK11,PARAMREG                                      0156
*   UCBPTR=UCBADDR;                 /* GET UCB ADDRESS               */
         L     UCBPTR,UCBADDR-1(,WRK11)                            0157
         LA    UCBPTR,0(,UCBPTR)                                   0157
*/********************************************************************/
*/*      TEST FOR VALID FUNCTION CODE = 0, 1 OR 2           *        */
*/********************************************************************/
*                                                                  0158
*   IF FUNCTION>TWO THEN            /*                               */
         CLI   FUNCTION(WRK11),2                                   0158
         BNH   @RF00158                                            0158
*     DO;                           /*                               */
*       WRK10=RC16;                 /* INVALID FUNCTION              */
         LA    WRK10,16                                            0160
*       GO TO EXIT2;                /* SET RC AND EXIT               */
         B     EXIT2                                               0161
*     END;                                                         0162
*   ELSE                                                           0163
*     ;                             /*                               */
@RF00158 DS    0H                                                  0164
*/********************************************************************/
*/*      ISSUE GETMAIN TO OBTAIN WORKING STORAGE FOR IOPM   *        */
*/********************************************************************/
*                                                                  0164
*PMSK010:                                                          0164
*   DO;                             /* GETMAIN (RC)                0164
*                                      LV(LENGTH(PMSKWORK)) SP(245)  */
PMSK010  DS    0H                                                  0165
*     RESPECIFY                                                    0165
*      (GPR01F,                                                    0165
*       GPR15F,                                                    0165
*       GPR00F) RESTRICTED;                                        0165
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0166
*     GPR15F=0;                     /* RC-TYPE GETMAIN               */
         SLR   GPR15F,GPR15F                                       0167
*     GPR00F=LENGTH(PMSKWORK);      /* LENGTH REQUESTED              */
         LA    GPR00F,328                                          0168
*     GPR15F=GPR15F×((245)*256);    /* SP IN BYTE 2                  */
         O     GPR15F,@CF02785                                     0169
*     SVC(120);                     /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0170
*     RESPECIFY                                                    0171
*      (GPR01F,                                                    0171
*       GPR15F,                                                    0171
*       GPR00F) UNRESTRICTED;                                      0171
*   END;                            /* GETMAIN (RC)                0172
*                                      LV(LENGTH(PMSKWORK)) SP(245)  */
*/********************************************************************/
*/*        TEST RETURN CODE FROM GETMAIN                             */
*/********************************************************************/
*                                                                  0173
*   IF RCREG^=ZERO THEN                                            0173
         LTR   RCREG,RCREG                                         0173
         BZ    @RF00173                                            0173
*     DO;                           /* TEST RETURN CODE              */
*       WRK10=RC12;                 /* SET RETURN CODE               */
         LA    WRK10,12                                            0175
*       GO TO EXIT2;                /* PREPARE TO EXIT               */
         B     EXIT2                                               0176
*     END;                                                         0177
*   ELSE                                                           0178
*     ;                             /* NULL                          */
@RF00173 DS    0H                                                  0179
*/********************************************************************/
*/*      ZERO WORKING STORAGE EXCEPT SRB AND IOSB           *        */
*/********************************************************************/
*                                                                  0179
*   WORKREG=PARAMREG;               /* SAVE ADDRESS OF GOTTEN STORAGE*/
         LR    WORKREG,PARAMREG                                    0179
*   PMSKRB=PMSKRB&&PMSKRB;          /*                       @ZA16160*/
         XC    PMSKRB(96,WORKREG),PMSKRB(WORKREG)                  0180
*   PARMSAVE=PMSKPARM;              /* SAVE INPUT PARMS              */
         MVC   PARMSAVE(8,WORKREG),PMSKPARM(WRK11)                 0181
*   SVUCBCHM=UCBCHM;                /* SAVE UCBCHM                   */
         MVC   SVUCBCHM(1,WORKREG),UCBCHM(UCBPTR)                  0182
*   REG13SV=RSAVE;                  /* SAVE REGISTER 13              */
         ST    RSAVE,REG13SV(,WORKREG)                             0183
*   RSAVE=ADDR(REG0FSV);            /* POINT AT SAVE AREA            */
         LA    RSAVE,REG0FSV(,WORKREG)                             0184
*   PARAMREG=ADDR(ESTAELST);        /* POINT AT PARAMETER LIST       */
         LA    PARAMREG,ESTAELST(,WORKREG)                         0185
*   GEN REFS(ESTRTN);                                              0186
PMSK020  ESTAE ESTRTN,PARAM=(WORKREG),MF=(E,(1)),                     CC
               RELATED=(-,IECVIOPM(PMSK030))
*   GEN(EJECT);                                                    0187
*                                                                  0187
         EJECT
*/********************************************************************/
*/*        USE IOSGEN MAP FUNCTION TO DETERMINE AVAILABLE PATHS      */
*/********************************************************************/
*                                                                  0188
*   LINKREG=ADDR(PMSKCHCK);         /* RETURN FROM IOSGEN            */
         LA    LINKREG,PMSKCHCK                                    0188
*   RFY                                                            0189
*    (REG5) RSTD;                                                  0189
*   REG5=ADDR(PATHMAP);             /* POINT AT PATHMAP              */
         LA    REG5,PATHMAP(,WORKREG)                              0190
*   GEN REFS(UCBCHA,UCBCHM,UCBFL5,UCBLCI,UCBUA,CVTILCH,CVTCSD,CVTPCCAT,
*       PCCACPUA,PCCACAFM,PCCACAT,CSDCPUAL,CATFLG,LCHTCH,CVTPTR,UCBBGN,
*       UCBWGT,UCBBASE,UCBOB)(IOSGEN MAP,TABLE=(REG5),UCB=UCBPTR,VAR=1)
*       ;                                                          0191
         IOSGEN MAP,TABLE=(REG5),UCB=UCBPTR,VAR=1
*   RFY                                                            0192
*    (REG5) UNRSTD;                                                0192
*   GEN(EJECT);                                                    0193
*                                                                  0193
         EJECT
*/********************************************************************/
*/*                                                                  */
*/*      RETURN FROM IOSGEN TO MAP AVAILABLE PATHS                   */
*/*      TEST FOR AVAILABLE PATHS                                    */
*/********************************************************************/
*                                                                  0194
*PMSKCHCK:                                                         0194
*   IF(PRIME=BOTHOFF&SECOND=BOTHOFF)/*                               */
*       &(FUNCTION=ZERO×UCBVALPH=ON)/*                               */
*     THEN                                                         0194
PMSKCHCK CLC   PRIME(2,WORKREG),@CB02621                           0194
         BNE   @RF00194                                            0194
         CLC   SECOND(2,WORKREG),@CB02621                          0194
         BNE   @RF00194                                            0194
         CLI   FUNCTION(WRK11),0                                   0194
         BE    @RT00194                                            0194
         TM    UCBVALPH(UCBPTR),B'00000010'                        0194
         BNO   @RF00194                                            0194
@RT00194 DS    0H                                                  0195
*     DO;                                                          0195
*       WRK10=RC8;                  /* NO AVAILABLE PATHS            */
         LA    WRK10,8                                             0196
*       GO TO EXIT;                 /* SET RC AND EXIT               */
         B     EXIT                                                0197
*     END;                                                         0198
*   ELSE                                                           0199
*     ;                                                            0199
@RF00194 DS    0H                                                  0200
*   PATHSAVE=PATHMAP;               /* SAVE ORIG PATH MAP            */
         MVC   PATHSAVE(8,WORKREG),PATHMAP(WORKREG)                0200
*/********************************************************************/
*/*        SET OFFLINE MASK EQUAL TO IOSGEN MASK                     */
*/********************************************************************/
*                                                                  0201
*   IF PRCPUA=PATHOFF               /* IF PATH OFFLINE               */
*     THEN                                                         0201
         CLI   PRCPUA(WORKREG),X'00'                               0201
         BNE   @RF00201                                            0201
*     PCPUA2=ON;                    /* SET OFFLINE EQUAL             */
         OI    PCPUA2(WORKREG),B'10000000'                         0202
*   ELSE                                                           0203
*     ;                             /* NULL                          */
@RF00201 DS    0H                                                  0204
*   IF PRCPUB=PATHOFF               /* IF PATH OFFLINE               */
*     THEN                                                         0204
         CLI   PRCPUB(WORKREG),X'00'                               0204
         BNE   @RF00204                                            0204
*     PCPUB2=ON;                    /* SET OFFLINE EQUAL             */
         OI    PCPUB2(WORKREG),B'00100000'                         0205
*   ELSE                                                           0206
*     ;                             /* NULL                          */
@RF00204 DS    0H                                                  0207
*   IF SECCPUA=PATHOFF              /* IF PATH OFFLINE               */
*     THEN                                                         0207
         CLI   SECCPUA(WORKREG),X'00'                              0207
         BNE   @RF00207                                            0207
*     SCPUA2=ON;                    /* SET OFFLINE EQUAL             */
         OI    SCPUA2(WORKREG),B'01000000'                         0208
*   ELSE                                                           0209
*     ;                             /* NULL                          */
@RF00207 DS    0H                                                  0210
*   IF SECCPUB=PATHOFF              /* IF PATH OFFLINE               */
*     THEN                                                         0210
         CLI   SECCPUB(WORKREG),X'00'                              0210
         BNE   @RF00210                                            0210
*     SCPUB2=ON;                    /* SET OFFLINE EQUAL             */
         OI    SCPUB2(WORKREG),B'00010000'                         0211
*   ELSE                                                           0212
*     ;                             /* NULL                          */
@RF00210 DS    0H                                                  0213
*                                                                  0213
*/********************************************************************/
*/*      TEST FOR VALIDATING ALL PATHS  -- IF NO, ADJUST             */
*/*      VALIDATION PATHS FOR VARY CPU (FC1)                         */
*/*      AND VARY CPU-CHANNEL (FC2)                                  */
*/********************************************************************/
*                                                                  0213
*   IF UCBVALPH='0'B THEN           /* DO ALL PATHS          @ZA00078*/
         TM    UCBVALPH(UCBPTR),B'00000010'                        0213
         BNZ   @RF00213                                            0213
*     DO;                           /* NEED TO BE            @ZA00078
*                                      VALIDATED?            @ZA00078
*                                      NO                    @ZA00078*/
*/********************************************************************/
*/*      FOR FUNCTION=1 (VARY CPU) AND FUNCTION 2 )VARY CPU-         */
*/*      CHAN) ADJUST PATH MAP AND OFFMASK2 IN ACCORDANCE            */
*/*      TO THE VARY REQUEST                                         */
*/********************************************************************/
*                                                                  0215
*       IF FUNCTION^=ZERO THEN      /* VARY CPU OR CPU CHAN          */
         CLI   FUNCTION(WRK11),0                                   0215
         BE    @RF00215                                            0215
*         DO;                       /* YES                    @YM5433*/
*           IF CPUA=ON THEN         /* VARY CPU0              @YM5433*/
         TM    CPUA(WRK11),B'10000000'                             0217
         BNO   @RF00217                                            0217
*             DO;                   /* YES                    @YM5433*/
*               PRCPUA=PATHON;      /* SET PATH ONLINE PRIME  @YM5433*/
         MVI   PRCPUA(WORKREG),X'01'                               0219
*               PCPUA2=NOTON;       /* SET PATH ONLINE PRIME  @YM5433*/
         NI    PCPUA2(WORKREG),B'01111111'                         0220
*               IF PRADDR^=SECADDR THEN/* IS THERE A SECONDARY PATH  */
         CLC   PRADDR(2,WORKREG),SECADDR(WORKREG)                  0221
         BE    @RF00221                                            0221
*                 DO;               /* YES                           */
*                   SECCPUA=PATHON; /* MUST                          */
         MVI   SECCPUA(WORKREG),X'01'                              0223
*                   SCPUA2=NOTON;   /* TEST                          */
         NI    SCPUA2(WORKREG),B'10111111'                         0224
*                 END;                                             0225
*               SAMASK=OFFMASK2;    /* SAVE IOSGEN MASK              */
@RF00221 MVC   SAMASK(1,WORKREG),OFFMASK2(WORKREG)                 0226
*               PRCPUB=PATHOFF;     /* SET OTHER OFF          @YM5433*/
         MVI   PRCPUB(WORKREG),X'00'                               0227
*               SECCPUB=PATHOFF;    /* SET OTHER OFF          @YM5433*/
         MVI   SECCPUB(WORKREG),X'00'                              0228
*               PCPUB2=ON;          /* SET OTHER OFF IN MASK @ZA10125*/
*               SCPUB2=ON;          /* SET OTHER OFF IN MASK @ZA10125*/
         OI    PCPUB2(WORKREG),B'00110000'                         0230
*             END;                                                 0231
*           ELSE                                                   0232
*             DO;                                                  0232
         B     @RC00217                                            0232
@RF00217 DS    0H                                                  0233
*               IF CPUB=ON THEN     /* VARY CPU1              @YM5433*/
         TM    CPUB(WRK11),B'01000000'                             0233
         BNO   @RF00233                                            0233
*                 DO;               /*                        @YM5433*/
*                   PRCPUB=PATHON;  /*                        @YM5433*/
         MVI   PRCPUB(WORKREG),X'01'                               0235
*                   PCPUB2=NOTON;   /*                        @YM5433*/
         NI    PCPUB2(WORKREG),B'11011111'                         0236
*                   IF PRADDR^=SECADDR THEN/* IS THERE A SECONDARY 0237
*                                      PATH                          */
         CLC   PRADDR(2,WORKREG),SECADDR(WORKREG)                  0237
         BE    @RF00237                                            0237
*                     DO;           /* YES                           */
*                       SECCPUB=PATHON;/* MUST                       */
         MVI   SECCPUB(WORKREG),X'01'                              0239
*                       SCPUB2=NOTON;/* TEST                         */
         NI    SCPUB2(WORKREG),B'11101111'                         0240
*                     END;                                         0241
*                   SAMASK=OFFMASK2;/* SAVE IOSGEN MASK              */
@RF00237 MVC   SAMASK(1,WORKREG),OFFMASK2(WORKREG)                 0242
*                   PRCPUA=PATHOFF; /*                        @YM5433*/
         MVI   PRCPUA(WORKREG),X'00'                               0243
*                   SECCPUA=PATHOFF;/*                        @YM5433*/
         MVI   SECCPUA(WORKREG),X'00'                              0244
*                   PCPUA2=ON;      /* SET OTHER OFF IN MASK @ZA10125*/
*                   SCPUA2=ON;      /* SET OTHER OFF IN MASK @ZA10125*/
         OI    PCPUA2(WORKREG),B'11000000'                         0246
*                 END;                                             0247
*               ELSE                                               0248
*                 DO;                                              0248
         B     @RC00233                                            0248
@RF00233 DS    0H                                                  0249
*                   WRK10=RC8;      /* INVALID REQUEST               */
         LA    WRK10,8                                             0249
*                   GO TO EXIT;     /* GO TO EXIT                    */
         B     EXIT                                                0250
*                 END;                                             0251
*             END;                                                 0252
@RC00233 DS    0H                                                  0253
*         END;                                                     0253
@RC00217 DS    0H                                                  0254
*     END;                          /*                       @ZA00078*/
@RF00215 DS    0H                                                  0255
*                                                                  0255
*/********************************************************************/
*/*      FOR VARY CPU-CHAN (FC2) CHECK IF PRI OR SEC CHANNEL         */
*/*      IS EQUAL CHANNEL MASK PASSED AS A PARAMETER                 */
*/********************************************************************/
*                                                                  0255
*   IF FUNCTION=TWO THEN            /* THIS A VARY CPU-CHANNEL     0255
*                                                             @YM8136*/
@RF00213 CLI   FUNCTION(WRK11),2                                   0255
         BNE   @RF00255                                            0255
*     DO;                           /* YES                           */
*       IF PRACHA^=CHANMSK&SECCHA^=CHANMSK THEN/* VALID REQUEST      */
         L     @09,CHANMSK-1(,WRK11)                               0257
         LA    @09,0(,@09)                                         0257
         SLR   @08,@08                                             0257
         IC    @08,PRACHA(,WORKREG)                                0257
         CR    @09,@08                                             0257
         BE    @RF00257                                            0257
         SLR   @08,@08                                             0257
         IC    @08,SECCHA(,WORKREG)                                0257
         CR    @09,@08                                             0257
         BE    @RF00257                                            0257
*         DO;                       /* NO RETURN              @YM8136*/
*           WRK10=RC8;                                             0259
         LA    WRK10,8                                             0259
*           GO TO EXIT;                                            0260
         B     EXIT                                                0260
*         END;                                                     0261
*       IF PRADDR^=SECADDR THEN     /* ARE PRIMARY&SEC.SAME   @YM8136*/
@RF00257 CLC   PRADDR(2,WORKREG),SECADDR(WORKREG)                  0262
         BE    @RF00262                                            0262
*         DO;                       /* NO                            */
*           IF CPUA=ON THEN         /* MUST DETERMINE CORRECT CPU    */
         TM    CPUA(WRK11),B'10000000'                             0264
         BNO   @RF00264                                            0264
*             DO;                   /* AND CHAN ADDR          @YM8136*/
*               IF PRACHA=CHANMSK THEN/*                      @YM8136*/
         SLR   @09,@09                                             0266
         IC    @09,PRACHA(,WORKREG)                                0266
         L     @08,CHANMSK-1(,WRK11)                               0266
         LA    @08,0(,@08)                                         0266
         CR    @09,@08                                             0266
         BNE   @RF00266                                            0266
*                 DO;               /* PRIMARY EQUAL CHANMSK  @YM8136*/
*                   SECCPUA=PATHOFF;/* YES SET                @YM8136*/
         MVI   SECCPUA(WORKREG),X'00'                              0268
*                   SCPUA2=ON;      /* ACCORDINGLY            @YM8136*/
         OI    SCPUA2(WORKREG),B'01000000'                         0269
*                 END;                                             0270
*               ELSE                /* NO SET                 @YM8136*/
*                 DO;               /* SECONDARY              @YM8136*/
         B     @RC00266                                            0271
@RF00266 DS    0H                                                  0272
*                   PRCPUA=PATHOFF; /* ACCORDINGLY            @YM8136*/
         MVI   PRCPUA(WORKREG),X'00'                               0272
*                   PCPUA2=ON;      /*                        @YM8136*/
         OI    PCPUA2(WORKREG),B'10000000'                         0273
*                 END;                                             0274
*             END;                                                 0275
*           ELSE                                                   0276
*             DO;                                                  0276
         B     @RC00264                                            0276
@RF00264 DS    0H                                                  0277
*               IF PRACHA=CHANMSK THEN/* PRIM EQ ON CPUB      @YM8136*/
         SLR   @09,@09                                             0277
         IC    @09,PRACHA(,WORKREG)                                0277
         L     @08,CHANMSK-1(,WRK11)                               0277
         LA    @08,0(,@08)                                         0277
         CR    @09,@08                                             0277
         BNE   @RF00277                                            0277
*                 DO;               /* YES                    @YM8136*/
*                   SECCPUB=PATHOFF;/*                        @YM8136*/
         MVI   SECCPUB(WORKREG),X'00'                              0279
*                   SCPUB2=ON;      /*                        @YM8136*/
         OI    SCPUB2(WORKREG),B'00010000'                         0280
*                 END;                                             0281
*               ELSE                                               0282
*                 DO;                                              0282
         B     @RC00277                                            0282
@RF00277 DS    0H                                                  0283
*                   PRCPUB=PATHOFF; /* NO ON SECONDARY        @YM8136*/
         MVI   PRCPUB(WORKREG),X'00'                               0283
*                   PCPUB2=ON;                                     0284
         OI    PCPUB2(WORKREG),B'00100000'                         0284
*                 END;                                             0285
*             END;                                                 0286
@RC00277 DS    0H                                                  0287
*         END;                                                     0287
@RC00264 DS    0H                                                  0288
*     END;                                                         0288
*                                                                  0288
@RF00262 DS    0H                                                  0289
*/********************************************************************/
*/*      ADJUST SAMASK TO REFLECT NON-AVAILABLE PATHS NOT    @ZA17325*/
*/*      INVOLVED WITH PATHS TO BE VALIDATED.  THE OFFMASK2          */
*/*      (REFLECTING PATHS TO BE VALIDATED BY ISSUING I/O)           */
*/*      IS 'ANDED' WITH THE ACTIVE UCB MASK (UCBCHM).               */
*/*      THIS RESULT IS 'ORED' WITH SAMASK.                          */
*/********************************************************************/
*                                                                  0289
*   AVUCBCHM=UCBCHM;                /* SAVE UCBCHM AGAIN     @ZA17325*/
@RF00255 MVC   AVUCBCHM(1,WORKREG),UCBCHM(UCBPTR)                  0289
*   OFFMASK3=AVUCBCHM&OFFMASK2;     /*                       @ZA17325*/
         MVC   OFFMASK3(1,WORKREG),AVUCBCHM(WORKREG)               0290
         NC    OFFMASK3(1,WORKREG),OFFMASK2(WORKREG)               0290
*   SAMASK=SAMASK×OFFMASK3;         /*                       @ZA17325*/
         OC    SAMASK(1,WORKREG),OFFMASK3(WORKREG)                 0291
*                                                                  0292
*/********************************************************************/
*/*        USE IOSGEN FLAG FUNCTION TO INSURE STARTABLE DEVICE       */
*/********************************************************************/
*                                                                  0292
*   IF UCBNRY=ON THEN               /* SAVE READY STATUS     @ZA00901*/
         TM    UCBNRY(UCBPTR),B'01000000'                          0292
         BNO   @RF00292                                            0292
*     UCBSRDY=ON;                   /* IN WORK AREA          @ZA00901*/
         OI    UCBSRDY(WORKREG),B'01000000'                        0293
*/********************************************************************/
*/* IN FIRST IOSGEN MACRO THE TABLE= CHANGED FROM UCBNRY TO  @ZA18157*/
*/* TABLE=UCBRVRS TO RESET BOTH UCBNRY AND UCBIVRS BITS TO   @ZA18157*/
*/* ALLOW ANY INTERVENTION MESSAGES TO BE SENT.              @ZA18157*/
*/********************************************************************/
*                                                                  0294
*   GEN REFS(UCBFLA,UCBFLB,CVTPTR,CVTMAP,CVTIXAVL,IOCOM,IOCGENA,UCBBGN,
*       UCB3TAPE);                                                 0294
*                                                                  0294
@RF00292 DS    0H                                                  0294
         IOSGEN  UCBFLG,UCB=(UCBPTR),VAR=OFF,TABLE=UCBRVRS
         IOSGEN  UCBFLG,UCB=(UCBPTR),VAR=OFF,TABLE=UCBIORST,REG=UNCOND
*/* PLACE ADDRESS OF PURGE ROUTINE IN THE VOID TABLE         @ZA04107*/
*                                                                  0295
*   RESPECIFY                                                      0295
*    (REG2,                                                        0295
*     REG3,                                                        0295
*     REG4,                                                        0295
*     REG5) RESTRICTED;             /*                       @ZA04107*/
*IOLOOP:                            /*                       @ZA29505*/
*   REG2=IOSPRGID;                  /* SET DRIVER ID         @ZA04107*/
IOLOOP   LA    REG2,10                                             0296
*   REG3=ADDR(PURGE);               /* SET PURGE ROUTINE ADDR@ZA04107*/
         LA    REG3,PURGE                                          0297
*   GEN REFS(CVTPTR,CVTMAP,CVTIXAVL,IOCOM,IOCVOID,VOIPRG,VOIENTRY) 0298
*       FLOWS(PURGE);                                              0298
*                                                        /* MZA04107*/
     IOSGEN SETVOID,VAR=(PURGE,A),REG=(REG2,REG3,REG4,REG5) @ZA04107
*   RESPECIFY                                                      0299
*    (REG2,                                                        0299
*     REG3,                                                        0299
*     REG4,                                                        0299
*     REG5) UNRESTRICTED;           /*                       @ZA04107*/
*                                                                  0300
*/********************************************************************/
*/*        GO TO THE I/O SUBROUTINE                                  */
*/********************************************************************/
*                                                                  0300
*   CALL IORTN;                     /* GO ISSUE THE I/O              */
         BAL   @14,IORTN                                           0300
*/********************************************************************/
*/*        TEST FOR SPECIAL RETURN CODES                             */
*/********************************************************************/
*                                                                  0301
*RETRY:                             /*                       @ZA19306*/
*   IF TIMERSET=ON THEN             /* STIMER MACRO ISSUED?? @ZA19306*/
RETRY    TM    TIMERSET(WORKREG),B'00000100'                       0301
         BNO   @RF00301                                            0301
*     DO;                           /*                       @ZA19306*/
*       TIMERSET=NOTON;             /* RESET TIMERSET FLAG   @ZA19306*/
         NI    TIMERSET(WORKREG),B'11111011'                       0303
*       GEN SETS(REG0);                                            0304
*                                                           @ZA04107
* CANCEL ANY TIME REMAINING                                 @ZA04107
        TTIMER CANCEL,TU,ERRET=NEXT2                        @ZA04107
NEXT2   DS    0H                                            @ZA04107
*     END;                          /*                       @ZA19306*/
*   IF SWAPSW=ON THEN               /* SWAP OK NEEDED?       @ZA04107*/
@RF00301 TM    SWAPSW(WORKREG),B'00010000'                         0306
         BNO   @RF00306                                            0306
*     DO;                                                          0307
*       GEN(SYSEVENT OKSWAP);       /* ALLOW SWAPPING        @ZA04107*/
         SYSEVENT OKSWAP
*       SWAPSW=NOTON;               /*                       @ZA04107*/
         NI    SWAPSW(WORKREG),B'11101111'                         0309
*     END;                                                         0310
*   RESPECIFY                                                      0311
*    (REG2,                                                        0311
*     REG3,                                                        0311
*     REG4,                                                        0311
*     REG5) RESTRICTED;             /*                       @ZA04107*/
@RF00306 DS    0H                                                  0312
*   REG2=IOSPRGID;                  /* SET DRIVER ID         @ZA04107*/
         LA    REG2,10                                             0312
*   GEN REFS(CVTPTR,CVTMAP,CVTIXAVL,IOCOM,IOCVOID,VOIPRG,VOIENTRY);
* REMOVE VOID TABLE ENTRY                                   @ZA04107
    IOSGEN SETVOID,VAR=(PURGE,R),REG=(REG2,REG3,REG4,REG5)  @ZA04107
*   RESPECIFY                                                      0314
*    (REG2,                                                        0314
*     REG3,                                                        0314
*     REG4,                                                        0314
*     REG5) UNRESTRICTED;           /*                       @ZA04107*/
*   IF TERMSW=ON                    /* TEST FOR PROGRAM ERROR        */
*     THEN                                                         0315
         TM    TERMSW(WORKREG),B'01000000'                         0315
         BNO   @RF00315                                            0315
*     DO;                           /* YES                           */
*       WRK10=RC24;                 /* SET RETURN CODE               */
         LA    WRK10,24                                            0317
*       GO TO EXIT;                 /* EXIT FROM ROUTINE             */
         B     EXIT                                                0318
*     END;                                                         0319
*   ELSE                                                           0320
*     ;                             /* NULL                          */
@RF00315 DS    0H                                                  0321
*   IF GDPRDSW=ON                   /* TEST FOR RESERVED DEVICE      */
*     THEN                                                         0321
         TM    GDPRDSW(WORKREG),B'10000000'                        0321
         BNO   @RF00321                                            0321
*     DO;                           /* YES                           */
*       WRK10=RC20;                 /* SET RETURN CODE               */
         LA    WRK10,20                                            0323
*       GO TO EXIT;                 /* EXIT FROM ROUTINE             */
         B     EXIT                                                0324
*     END;                                                         0325
*   ELSE                                                           0326
*     ;                             /* NULL                          */
@RF00321 DS    0H                                                  0327
*   IF TIMESW=ON&IOCOUNT^=ZERO      /* WAS I/O PURGED        @ZA04107*/
*     THEN                          /*                       @ZA04107*/
         TM    TIMESW(WORKREG),B'00100000'                         0327
         BNO   @RF00327                                            0327
         LH    @09,IOCOUNT(,WORKREG)                               0327
         LTR   @09,@09                                             0327
         BZ    @RF00327                                            0327
*     DO;                           /* YES                   @ZA04107*/
*       GO TO IOLOOP;               /* CONTINUE WITH REMAINING PATHS
*                                                            @ZA29505*/
         B     IOLOOP                                              0329
*     END;                          /*                       @ZA04107*/
*/********************************************************************/
*/*        SET RETURN CODE IF NO PATHS AVAILABLE                     */
*/********************************************************************/
*                                                                  0331
*   IF NOPTHSW=ON THEN              /* IORTN FIND NO PATHS@ZA11371   */
@RF00327 TM    NOPTHSW(WORKREG),B'00001000'                        0331
         BNO   @RF00331                                            0331
*     DO;                           /* YES                   @ZA11371*/
*       WRK10=RC8;                  /* SET RETURN CODE       @ZA11371*/
         LA    WRK10,8                                             0333
*       GO TO EXIT;                 /* EXIT FROM ROUTINE     @ZA11371*/
         B     EXIT                                                0334
*     END;                          /*                       @ZA11371*/
*   ELSE                                                           0336
*     ;                             /*                       @ZA11371*/
@RF00331 DS    0H                                                  0337
*   IF OFFMASK2=ALLOFF              /* WERE ANY PATHS FOUND          */
*     THEN                                                         0337
         CLI   OFFMASK2(WORKREG),X'F0'                             0337
         BNE   @RF00337                                            0337
*     DO;                           /* NO                            */
*       WRK10=RC4;                  /* SET RETURN CODE               */
         LA    WRK10,4                                             0339
*       GO TO EXIT;                 /* EXIT FROM ROUTINE             */
         B     EXIT                                                0340
*     END;                                                         0341
*   IF UCBWTOID^=NOWTOID THEN                                      0342
@RF00337 L     @09,UCBEXTPT(,UCBPTR)                               0342
         CLC   UCBWTOID(3,@09),NOWTOID                             0342
         BE    @RF00342                                            0342
*     DO;                           /* MSG TO BE DOM'ED      @YM06828*/
*       RFY                                                        0344
*        (REG2,                                                    0344
*         REG3,                                                    0344
*         REG4) RSTD;               /* RESTRICT WORK REGS    @YM06828*/
*       GEN;                                                       0345
        LR    REG3,PARAMREG            SAVE REG. 1            @YM06828
        L     REG4,UCBEXTPT(UCBPTR)    LOAD EXTENSION PTR     @YM06828
        IC    REG2,UCBWTOID-1(REG4)    GET HIORDER BYTE       @YM06828
        SLL   REG2,24                  ZERO 3 BYTES AND ALIGN @YM06828
        L     REG1,UCBWTOID-1(REG4)    GET UCBWTOID WORD      @YM06828
        CS    REG1,REG2,UCBWTOID-1(REG4) STORE ZERO UCBWTOID  @YM06828
        BNE   PMSK10                   ALREADY DOMED          @YM06828
        LA    REG1,0(REG1)             ZERO HIORDER BYTE      @YM06828
        DOM   MSG=(1)                  DELETE CC3 MESSAGE     @YM06828
PMSK10 LR    PARAMREG,REG3            RESTORE REG. 1         @YM06828
*       RFY                                                        0346
*        (REG2,                                                    0346
*         REG3,                                                    0346
*         REG4) UNRSTD;             /* FREE UP WORK REGS     @YM06828*/
*     END;                          /*                       @YM06828*/
*   IF NOTREADY=ON THEN             /* IF DEVICE NOT READY   @ZA04137*/
@RF00342 TM    NOTREADY(WORKREG),B'10000000'                       0348
         BNO   @RF00348                                            0348
*     DO;                           /* CHECK IF TAPE OR DASD @ZA04137*/
*       IF UCB3TAPE='1'B×UCB3DACC='1'B/*                     @ZA04137*/
*         THEN                                                     0350
         TM    UCB3TAPE(UCBPTR),B'10100000'                        0350
         BZ    @RF00350                                            0350
*         DO;                       /* MARK DEVICE NOT READY @ZA04137*/
*           GEN REFS(UCBFLA,CVTPTR,CVTMAP,CVTIXAVL,IOCOM,IOCGENA); 0352
            IOSGEN UCBFLG,UCB=(UCBPTR),VAR=ON,TABLE=UCBNRY,REG=UNCOND
*         END;                      /*                       @ZA00901*/
*     END;                          /*                       @ZA04137*/
*                                                                  0354
@RF00350 DS    0H                                                  0355
*   /*****************************************************************/
*   /*                                                               */
*   /* OTHERWISE LEAVE READY AS IOPM SETS                    @ZA04137*/
*   /* IT, SINCE DISPLAY DEVICES MAY BE USED                 @ZA04137*/
*   /* AS SYSTEM CONSOLES AND COMM TASK                      @ZA04137*/
*   /* WILL QUEUE MESSAGES TO CONSOLE. IF LEFT               @ZA04137*/
*   /* NOT READY SYSTEM MAY RUN OUT OF SQA AND               @ZA04137*/
*   /* DRY UP, BECAUSE OF WQE'S. ALSO KEEP                   @ZA04137*/
*   /* COMPATIBLE WITH IEAVNP02 PROCESSING AS TO             @ZA04137*/
*   /* DEVICES THAT ARE NOT READY'ED AT IPL                  @ZA04137*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0355
*   NOTREADY=NOTON;                 /*                       @YM04928*/
@RF00348 DS    0H                                                  0356
*   UCBSRDY=NOTON;                  /*                       @ZA00901*/
         NI    NOTREADY(WORKREG),B'00111111'                       0356
*   GEN(EJECT);                                                    0357
*                                                                  0357
         EJECT
*/********************************************************************/
*/********************************************************************/
*/*             UPDATE THE UCB CHANNEL MASK TO CURRENT STATUS        */
*/********************************************************************/
*/********************************************************************/
*                                                                  0358
*   IF UCBVALPH='0'B THEN           /* PATH ON               @ZA00078*/
         TM    UCBVALPH(UCBPTR),B'00000010'                        0358
         BNZ   @RF00358                                            0358
*     DO;                           /*                       @ZA00078*/
*/********************************************************************/
*/*      FOR FUNCTION 1 (VARY CPU) AND FUNCTION 2(VARY CPU-CHAN) -   */
*/*            OR THE SAMASK AND OFFMASK BYTES AND REPLACE IT        */
*/*            WITH THE CONTENTS OF UCBCHM                           */
*/********************************************************************/
*                                                                  0360
*       IF FUNCTION^=ZERO           /* VARY CPU OR VARY CPU CHAN     */
*         THEN                      /* YES -                         */
         CLI   FUNCTION(WRK11),0                                   0360
         BE    @RF00360                                            0360
*         DO;                       /* MUST CHANNEL MASK             */
*           RFY                                                    0362
*            (REG2,                                                0362
*             REG3) RSTD;                                          0362
*           GEN;                                                   0363
PMSK20   SR   REG2,REG2
         ICM  REG2,B'1000',SAMASK(WORKREG) GET SVED MSK MINUS CPU TST
         L    REG3,UCBCHM(UCBPTR) GET FULLWORD
         ICM  REG3,B'1000',OFFMASK(WORKREG) GET MASK
         OR   REG3,REG2            TRUE MASK                  @YM04966
         L    REG2,UCBCHM(UCBPTR)  GET CURRENT FULLWORD       @YM06165
         CS   REG2,REG3,UCBCHM(UCBPTR) PLACE NEW MASK IN UCB  @YM07688
         BNE  PMSK20               NO-TRY AGAIN
*           RFY                                                    0364
*            (REG2,                                                0364
*             REG3) UNRSTD;                                        0364
*           WRK10=RC0;                                             0365
         SLR   WRK10,WRK10                                         0365
*           GO TO EXIT;                                            0366
         B     EXIT                                                0366
*         END;                                                     0367
*     END;                          /* ALL PATH VALIDATED    @ZA00078*/
*/********************************************************************/
*/*        UPDATE THE UCB CHANNEL MASK TO CURRENT STATUS             */
*/*         INSURE NOT AVAILABLE PATHS ARE OFFLINE                   */
*/********************************************************************/
*                                                                  0369
*   ELSE                            /* PATHS WERE FOUND      @ZA00901*/
*     IF UCBVALPH=ON THEN           /* MOVE IOSGEN MAP       @ZA00901*/
         B     @RC00358                                            0369
@RF00358 TM    UCBVALPH(UCBPTR),B'00000010'                        0369
         BNO   @RF00369                                            0369
*       OFFMASK=OFFMASK2;           /* (LOGICAL PATH)        @ZA00901*/
         MVC   OFFMASK(1,WORKREG),OFFMASK2(WORKREG)                0370
*   RFY                                                            0371
*    (REG2,                                                        0371
*     REG3) RSTD;                   /* RESTRICT REGISTERS            */
@RF00369 DS    0H                                                  0371
@RC00358 DS    0H                                                  0372
*   GEN;                                                           0372
         L     REG2,UCBCHM(UCBPTR)     GET CURRENT CHANNEL MASK
PMSK025  LR    REG3,REG2               COPY MASK
         ICM   REG3,B'1000',OFFMASK(WORKREG)    GET NEW MASK  @YM03345
         OR    REG3,REG2                                      @YM06212
         CS    REG2,REG3,UCBCHM(UCBPTR) PUT NEW MASK IN UCB
         BNE   PMSK025                 TRY TILL SUCCESSFUL
*   RFY                                                            0373
*    (REG2,                                                        0373
*     REG3) UNRSTD;                 /* FREE THE REGISTERS            */
*   WRK10=RC0;                      /* SET RETURN CODE               */
         SLR   WRK10,WRK10                                         0374
*   IF UCBCHM^=ALLOFF THEN          /* SOME PATHS            @ZA00078*/
         CLI   UCBCHM(UCBPTR),X'F0'                                0375
         BE    @RF00375                                            0375
*     UCBVALPH='0'B;                /* VALIDATED, YES        @ZA00078*/
         NI    UCBVALPH(UCBPTR),B'11111101'                        0376
*/********************************************************************/
*/*        RETURN THE GOTTEN STORAGE AND RESET THE ESTAE ROUTINE     */
*/********************************************************************/
*                                                                  0377
*EXIT:                                                             0377
*   RSAVE=REG13SV;                  /* RESTORE REGISTER 13           */
@RF00375 DS    0H                                                  0377
EXIT     L     RSAVE,REG13SV(,WORKREG)                             0377
*   GEN;                                                           0378
PMSK030  ESTAE 0,RELATED=(-,IECVIOPM(PMSK020))
*PMSK040:                                                          0379
*   DO;                             /* FREEMAIN(RC) LV(LENGTH(PMSKWOR
*                                      K))A(PMSKWORK) SP(245)        */
PMSK040  DS    0H                                                  0380
*     RESPECIFY                                                    0380
*      (GPR01F,                                                    0380
*       GPR15F,                                                    0380
*       GPR00F) RESTRICTED;                                        0380
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0381
*     GPR15F=1;                     /* SET TYPE                      */
         LA    GPR15F,1                                            0382
*     GPR00F=LENGTH(PMSKWORK);      /* LENGTH REQUESTED              */
         LA    GPR00F,328                                          0383
*     GPR01F=ADDR(PMSKWORK);        /* SET REGISTER ONE              */
         LR    GPR01F,WORKREG                                      0384
*     GPR15F=GPR15F+((245)*256);    /* SUBPOOL VALUE                 */
         AL    GPR15F,@CF02785                                     0385
*     SVC(120);                     /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0386
*     RESPECIFY                                                    0387
*      (GPR01F,                                                    0387
*       GPR15F,                                                    0387
*       GPR00F) UNRESTRICTED;                                      0387
*   END;                            /* FREEMAIN(RC) LV(LENGTH(PMSKWOR
*                                      K))A(PMSKWORK) SP(245)        */
*EXIT2:                                                            0389
*   GEN(ST   WRK10,16(13));         /* SET RETURN CODE               */
EXIT2    ST   WRK10,16(13)
*   RETURN;                         /* RETURN TO CALLER              */
@EL00001 DS    0H                                                  0390
@EF00001 DS    0H                                                  0390
@ER00001 LM    @14,@12,12(@13)                                     0390
         BR    @14                                                 0390
*   GEN(EJECT);                                                    0391
*                                                                  0391
         EJECT
*/********************************************************************/
*/*        I/O SUBROUTINE                                            */
*/*         THIS SUBROUTINE ISSUES THE I/O AND WAITS ON IT'S         */
*/*         COMPLETION                                               */
*/********************************************************************/
*                                                                  0392
*IORTN:                                                            0392
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0392
         B     @PB00002                                            0392
IORTN    DS    0H                                                  0393
*   IORTNSV=LINKREG;                /* SAVE RETURN ADDRESS           */
         ST    LINKREG,IORTNSV(,WORKREG)                           0393
*   IOCOUNT=ZERO;                   /* INITIALIZE IOCOUNTER          */
         SLR   @09,@09                                             0394
         STH   @09,IOCOUNT(,WORKREG)                               0394
*   IF PRCPUA=PATHON                /* IS THIS PATH ELIGIBLE         */
*     THEN                                                         0395
         CLI   PRCPUA(WORKREG),X'01'                               0395
         BNE   @RF00395                                            0395
*     IOCOUNT=IOCOUNT+ONE;          /* ADD ONE TO COUNT              */
         AL    @09,@CF00063                                        0396
         STH   @09,IOCOUNT(,WORKREG)                               0396
*   ELSE                                                           0397
*     ;                             /* NULL                          */
@RF00395 DS    0H                                                  0398
*   IF PRCPUB=PATHON                /* TEST NEXT PATH                */
*     THEN                                                         0398
         CLI   PRCPUB(WORKREG),X'01'                               0398
         BNE   @RF00398                                            0398
*     IOCOUNT=IOCOUNT+ONE;          /* ADD ONE                       */
         LA    @09,1                                               0399
         AH    @09,IOCOUNT(,WORKREG)                               0399
         STH   @09,IOCOUNT(,WORKREG)                               0399
*   ELSE                                                           0400
*     ;                             /* NULL                          */
@RF00398 DS    0H                                                  0401
*   IF SECCPUA=PATHON               /* TEST NEXT PATH                */
*     THEN                                                         0401
         CLI   SECCPUA(WORKREG),X'01'                              0401
         BNE   @RF00401                                            0401
*     IOCOUNT=IOCOUNT+ONE;          /* ADD ONE                       */
         LA    @09,1                                               0402
         AH    @09,IOCOUNT(,WORKREG)                               0402
         STH   @09,IOCOUNT(,WORKREG)                               0402
*   ELSE                                                           0403
*     ;                             /* NULL                          */
@RF00401 DS    0H                                                  0404
*   IF SECCPUB=PATHON               /* TEST NEXT PATH                */
*     THEN                                                         0404
         CLI   SECCPUB(WORKREG),X'01'                              0404
         BNE   @RF00404                                            0404
*     IOCOUNT=IOCOUNT+ONE;          /* ADD ONE                       */
         LA    @09,1                                               0405
         AH    @09,IOCOUNT(,WORKREG)                               0405
         STH   @09,IOCOUNT(,WORKREG)                               0405
*   ELSE                                                           0406
*     ;                             /* NULL                          */
@RF00404 DS    0H                                                  0407
*/********************************************************************/
*/* TEST IOCOUNT FOR ZERO BEFORE PROCEEDING TO STARTIO       @ZA11371*/
*/********************************************************************/
*                                                                  0407
*   IF IOCOUNT=ZERO THEN            /* ANY PATHS AVAIL.?     @ZA11371*/
         LH    @09,IOCOUNT(,WORKREG)                               0407
         LTR   @09,@09                                             0407
         BNZ   @RF00407                                            0407
*     DO;                           /* NO                    @ZA11371*/
*       NOPTHSW=ON;                 /* SET SWITCH            @ZA11371*/
         OI    NOPTHSW(WORKREG),B'00001000'                        0409
*       GO TO IOEXIT;               /* EXIT FROM I/O RTN     @ZA11371*/
         B     IOEXIT                                              0410
*     END;                          /*                       @ZA11371*/
*   ELSE                                                           0412
*     ;                             /* YES, PROCEED          @ZA11371*/
@RF00407 DS    0H                                                  0413
*/********************************************************************/
*/*        BUILD THE CHANNEL PROGRAM                                 */
*/********************************************************************/
*                                                                  0413
*   CCWADDR=ADDR(CCWADDR);          /* DATA ADDRESS                  */
         LA    @09,CCWADDR(,WORKREG)                               0413
         STCM  @09,7,CCWADDR(WORKREG)                              0413
*   IF UCBTBYT3='41'X&UCBCTCAD=0 THEN/* CTC?                 @ZA31685*/
         CLI   UCBTBYT3(UCBPTR),X'41'                              0414
         BNE   @RF00414                                            0414
         L     @09,UCBCTCAD(,UCBPTR)                               0414
         LTR   @09,@09                                             0414
         BNZ   @RF00414                                            0414
*     CCWOP=SENSECB;                /* SENSE COMMAND BYTE    @ZA31685*/
         MVI   CCWOP(WORKREG),X'14'                                0415
*   ELSE                            /* NOT CTC               @ZA31685*/
*     CCWOP=NOP;                    /* NOP CCW                       */
         B     @RC00414                                            0416
@RF00414 MVI   CCWOP(WORKREG),X'03'                                0416
*   CCWFLAGS=CCWFLGS;               /* SLI FLAG                      */
@RC00414 MVC   CCWFLAGS(2,WORKREG),@CB02632                        0417
*   CCWCOUNT=ONEH;                  /* COUNT OF ONE                  */
         MVC   CCWCOUNT(2,WORKREG),@CH00063                        0418
*/********************************************************************/
*/*      ZERO THE SRB AND IOSB                                       */
*/********************************************************************/
*                                                                  0419
*   PMSKRC=PMSKRC&&PMSKRC;          /* ZERO SRB/IOSB                 */
         XC    PMSKRC(152,WORKREG),PMSKRC(WORKREG)                 0419
*/********************************************************************/
*/*        INITIALIZE THE SRB                                        */
*/********************************************************************/
*                                                                  0420
*   SRBPARM=ADDR(IOSB);             /* POINT SRB AT THE IOSB         */
         LA    @09,220                                             0420
         ALR   @09,WORKREG                                         0420
         ST    @09,SRBPARM+176(,WORKREG)                           0420
*/********************************************************************/
*/*        INITIALIZE THE IOSB                                       */
*/********************************************************************/
*                                                                  0421
*   IOSASID=ASCBASID;               /* FILL IN ASID                  */
         L     @08,ASCBPTR                                         0421
         MVC   IOSASID(2,@09),ASCBASID(@08)                        0421
*   IOSDVRID=IOSPRGID;              /* SET DRIVER ID         @ZA04107*/
         MVI   IOSDVRID(@09),X'0A'                                 0422
*   IOSPGAD=ADDR(PMSKTERM);         /* SET TERMINATION ADDR          */
         LA    @08,PMSKTERM                                        0423
         ST    @08,IOSPGAD(,@09)                                   0423
*   IOSBYP=ON;                      /* BYPASS CHANNEL PROGRAM        */
*   IOSNERP=ON;                     /* NO ERROR ROUTINES WANTED      */
         OI    IOSBYP(@09),B'10001000'                             0425
*   IOSNRM=ADDR(PMSKNRM);           /* SET APPENDAGE ADDRESS         */
         LA    @08,PMSKNRM                                         0426
         ST    @08,IOSNRM(,@09)                                    0426
*   IOSABN=ADDR(PMSKABN);           /* SET APPENDAGE ADDRESS         */
         LA    @08,PMSKABN                                         0427
         ST    @08,IOSABN(,@09)                                    0427
*   IOSUCB=UCBPTR;                  /* SET UCB ADDRESS               */
         ST    UCBPTR,IOSUCB(,@09)                                 0428
*   IOSVST=ADDR(NOPCCW);            /* SET VIRTUAL START ADDR        */
         ST    WORKREG,IOSVST(,@09)                                0429
*   IOSUSE=WORKREG;                 /* ADDRESS OF WORK AREA          */
         ST    WORKREG,IOSUSE(,@09)                                0430
*   RFY                                                            0431
*    (REG5) RSTD;                                                  0431
*   GEN(LRA   REG5,NOPCCW(WORKREG));                               0432
         LRA   REG5,NOPCCW(WORKREG)
*   IOSRST=REG5;                    /* REAL CHANNEL PROGRAM ADDR     */
         LA    @04,220                                             0433
         ALR   @04,WORKREG                                         0433
         ST    REG5,IOSRST(,@04)                                   0433
*   RFY                                                            0434
*    (REG5) UNRSTD;                                                0434
*   IOSDSID=PSATOLD-1;              /* SET DSID FOR PURGE TO @ZA04107
*                                      TCB ADDRESS (LESS 1   @ZA04107
*                                      FOR UNIQUENESS)       @ZA04107*/
         L     @05,PSATOLD                                         0435
         BCTR  @05,0                                               0435
         ST    @05,IOSDSID(,@04)                                   0435
*/********************************************************************/
*/*  BOTH THE IOSPSLL AND IOSTSLL BITS IN THE IOSB ARE SET   @ZA16155*/
*/*  OFF.  AS SUCH, ON ENTRY TO APPENDAGE AND TERMINATION    @ZA16155*/
*/*  ROUTINES, THE LOCAL LOCK WILL HAVE BEEN OBTAINED BY     @ZA16155*/
*/*  POST STATUS.                                            @ZA16155*/
*/********************************************************************/
*/********************************************************************/
*/*        MAKE A RELEASE FUNCTION IF SHARED DASD DEVICE             */
*/********************************************************************/
*                                                                  0436
*   IF UCB3DACC=ON                  /* TEST FOR DA DEVICE            */
*     THEN                          /* YES                           */
         TM    UCB3DACC(UCBPTR),B'00100000'                        0436
         BNO   @RF00436                                            0436
*     IF UCBRR=ON                   /* SHAREABLE DEVICE?             */
*         ×UCBSHRUP=ON              /* OR SHARED U.P.        @ZA00805*/
*       THEN                                                       0437
         TM    UCBRR(UCBPTR),B'00100000'                           0437
         BO    @RT00437                                            0437
         L     @09,UCBEXTPT(,UCBPTR)                               0437
         TM    UCBSHRUP(@09),B'01000000'                           0437
         BNO   @RF00437                                            0437
@RT00437 DS    0H                                                  0438
*       IOSRELSE=ON;                /* SET RELEASE FUNCTION          */
         OI    IOSRELSE+220(WORKREG),B'00000001'                   0438
*     ELSE                                                         0439
*       ;                           /* NULL                          */
@RF00437 DS    0H                                                  0440
*   ELSE                                                           0440
*     ;                             /* NULL                          */
@RF00436 DS    0H                                                  0441
*/********************************************************************/
*/*        SELECT A PATH AND ISSUE THE STARTIO MACRO                 */
*/********************************************************************/
*                                                                  0441
*   CALL PATHSEL;                   /* GO SELECT A PATH              */
         BAL   @14,PATHSEL                                         0441
*   ECB=ZERO;                       /* ZERO OUT THE ECB              */
*                                                                  0442
         SLR   @09,@09                                             0442
         ST    @09,ECB(,WORKREG)                                   0442
*   /*****************************************************************/
*   /*                                                               */
*   /* INDICATE NONSWAPPABLE WHILE I/O IS ACTIVE -- THIS PREVENTS AN */
*   /* INTERLOCK IF THE TIMER POPS WITH THE TCB NONDISPATCHABLE      */
*   /* WAITING FOR A SWAP OUT                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0443
*   GEN(SYSEVENT DONTSWAP);         /*                       @ZA04107*/
         SYSEVENT DONTSWAP
*   IF RCREG=ZERO THEN              /* DONTSWAP OK?          @ZA04107*/
         LTR   RCREG,RCREG                                         0444
         BNZ   @RF00444                                            0444
*     SWAPSW=ON;                    /* YES--SO INDICATE      @ZA04107*/
         OI    SWAPSW(WORKREG),B'00010000'                         0445
*   PARAMREG=ADDR(SRB);             /* POINT AT THE SRB              */
@RF00444 LA    PARAMREG,176                                        0446
         ALR   PARAMREG,WORKREG                                    0446
*   GEN REFS(IOCSTIO,TIME) FLOWS(PMSKNRM,PMSKABN,PMSKTERM,TIMEOUT,NEXT1
*       );                                                         0447
*                                                                  0447
*                                                        /* @ZA19306*/
        SPACE 1
         STM  LINKREG,BASEREG,0(RSAVE)
         STARTIO  SRB=(1),TCB=0
         LM   LINKREG,BASEREG,0(RSAVE)
        SPACE 1
* SET TIMER TO POP IN CASE I/O IS UNABLE TO COMPLETE DUE TO   @ZA04107
* HARDWARE PROBLEMS OR NEVER ENDING RESERVE FROM A LOOSELY    @ZA04107
* COUPLED CPU.                                                @ZA04107
        TTIMER ,TU,ERRET=NEXT1        TEST TIMER              @ZA04107
        LTR   REG0,REG0               CALLING TASK TIMED      @ZA04107
        BNZ   NEXT1                   YES--SKIP TIMING        @ZA04107
        STIMER REAL,TIMEOUT,DINTVL=TIME,ERRET=NEXT1           @ZA04107
*   /*****************************************************************/
*   /*                                                               */
*   /* SET TIMERSET FLAG TO INDICATE THAT IOPM ISSUED        @ZA19306*/
*   /* STIMER MACRO.                                         @ZA19306*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0448
*   TIMERSET=ON;                    /* IOPM ISSUED STIMER    @ZA19306*/
         OI    TIMERSET(WORKREG),B'00000100'                       0448
*NEXT1:                             /*                       @ZA19306*/
*/********************************************************************/
*/*        WAIT ON THE I/O REQUEST                                   */
*/********************************************************************/
*                                                                  0449
*   PARAMREG=ADDR(ECB);             /* POINT AT THE ECB              */
NEXT1    LA    PARAMREG,ECB(,WORKREG)                              0449
*   GEN;                                                           0450
         WAIT  ECB=(1),                                               CC
               RELATED=('ECB IS POSTED OUT OF TERMINATION ROUTINE')
*IOEXIT:                            /*                       @ZA11371*/
*   LINKREG=IORTNSV;                /* RESTORE RETURN ADDRESS        */
IOEXIT   L     LINKREG,IORTNSV(,WORKREG)                           0451
*   END IORTN;                                                     0452
@EL00002 DS    0H                                                  0452
@EF00002 DS    0H                                                  0452
@ER00002 BR    @14                                                 0452
@PB00002 DS    0H                                                  0453
*   GEN(EJECT);                                                    0453
*                                                                  0453
         EJECT
*/********************************************************************/
*/*        THIS SUBROUTINE SELECTS A PATH FOR THE I/O                */
*/*         IOSPATH AND IOSAFF ARE SET HERE                          */
*/********************************************************************/
*                                                                  0454
*PATHSEL:                                                          0454
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0454
         B     @PB00003                                            0454
PATHSEL  DS    0H                                                  0455
*   PATH=PATHOFF;                   /* RESET ALL BITS AT START       */
         MVI   PATH(WORKREG),X'00'                                 0455
*/********************************************************************/
*/*        TEST FOR PRIMARY PATH - CPU A                             */
*/********************************************************************/
*                                                                  0456
*   IF PRCPUA=PATHON                /* TEST FOR PRIMARY - CPU A      */
*     THEN                                                         0456
         CLI   PRCPUA(WORKREG),X'01'                               0456
         BNE   @RF00456                                            0456
*     DO;                           /* YES                           */
*       IOSPATH=PRADDR;             /* SET PATH FOR I/O REQUEST      */
         LA    @09,220                                             0458
         ALR   @09,WORKREG                                         0458
         LH    @08,PRADDR(,WORKREG)                                0458
         STH   @08,IOSPATH(,@09)                                   0458
*       IOSAFF=CPUID00;             /* SET CPU AFFINITY TO CPU A     */
         MVI   IOSAFF(@09),X'00'                                   0459
*       PRCPUA=PATHOFF;             /* RESET BIT                     */
         MVI   PRCPUA(WORKREG),X'00'                               0460
*       PA=ON;                      /* SHOW PATH SELECTED            */
         OI    PA(WORKREG),B'10000000'                             0461
*       PAACT=ON;                   /* SHOW PATH ACTIVATED   @ZA16156*/
         OI    PAACT(WORKREG),B'10000000'                          0462
*       GO TO PATHEXIT;             /* ALL DONE                      */
         B     PATHEXIT                                            0463
*     END;                                                         0464
*   ELSE                                                           0465
*     ;                             /* NULL                          */
@RF00456 DS    0H                                                  0466
*/********************************************************************/
*/*        TEST FOR SECONDARY PATH - CPU A                           */
*/********************************************************************/
*                                                                  0466
*   IF SECCPUA=PATHON               /* TEST FOR SECONDARY - CPU A    */
*     THEN                                                         0466
         CLI   SECCPUA(WORKREG),X'01'                              0466
         BNE   @RF00466                                            0466
*     DO;                           /* YES                           */
*       IOSPATH=SECADDR;            /* SET PATH FOR I/O REQUEST      */
         LA    @09,220                                             0468
         ALR   @09,WORKREG                                         0468
         LH    @08,SECADDR(,WORKREG)                               0468
         STH   @08,IOSPATH(,@09)                                   0468
*       IOSAFF=CPUID00;             /* SET CPU AFFINITY TO CPU A     */
         MVI   IOSAFF(@09),X'00'                                   0469
*       SECCPUA=PATHOFF;            /* RESET BIT                     */
         MVI   SECCPUA(WORKREG),X'00'                              0470
*       SA=ON;                      /* SHOW PATH SELECTED            */
         OI    SA(WORKREG),B'00100000'                             0471
*       SAACT=ON;                   /* SHOW PATH ACTIVATED   @ZA16156*/
         OI    SAACT(WORKREG),B'00100000'                          0472
*       GO TO PATHEXIT;             /* ALL DONE                      */
         B     PATHEXIT                                            0473
*     END;                                                         0474
*   ELSE                                                           0475
*     ;                             /* NULL                          */
@RF00466 DS    0H                                                  0476
*/********************************************************************/
*/*        TEST FOR PRIMARY PATH - CPU B                             */
*/********************************************************************/
*                                                                  0476
*   IF PRCPUB=PATHON                /* TEST FOR PRIMARY - CPU B      */
*     THEN                                                         0476
         CLI   PRCPUB(WORKREG),X'01'                               0476
         BNE   @RF00476                                            0476
*     DO;                           /* YES                           */
*       IOSPATH=PRADDR;             /* SET PATH FOR I/O REQUEST      */
         LA    @09,220                                             0478
         ALR   @09,WORKREG                                         0478
         LH    @08,PRADDR(,WORKREG)                                0478
         STH   @08,IOSPATH(,@09)                                   0478
*       IOSAFF=CPUID01;             /* SET CPU AFFINITY TO CPU B     */
         MVI   IOSAFF(@09),X'01'                                   0479
*       PRCPUB=PATHOFF;             /* RESET BIT                     */
         MVI   PRCPUB(WORKREG),X'00'                               0480
*       PB=ON;                      /* SHOW PATH SELECTED            */
         OI    PB(WORKREG),B'01000000'                             0481
*       PBACT=ON;                   /* SHOW PATH ACTIVATED   @ZA16156*/
         OI    PBACT(WORKREG),B'01000000'                          0482
*       GO TO PATHEXIT;             /* ALL DONE                      */
         B     PATHEXIT                                            0483
*     END;                                                         0484
*   ELSE                                                           0485
*     DO;                           /* DEFAULT TO LAST PATH          */
@RF00476 DS    0H                                                  0486
*/********************************************************************/
*/*        SET SECONDARY PATH - CPU B                                */
*/********************************************************************/
*                                                                  0486
*       IOSPATH=SECADDR;            /* SET PATH FOR I/O REQUEST      */
         LA    @09,220                                             0486
         ALR   @09,WORKREG                                         0486
         LH    @08,SECADDR(,WORKREG)                               0486
         STH   @08,IOSPATH(,@09)                                   0486
*       IOSAFF=CPUID01;             /* SET CPU AFFINITY TO CPU B     */
         MVI   IOSAFF(@09),X'01'                                   0487
*       SECCPUB=PATHOFF;            /* RESET BIT                     */
         MVI   SECCPUB(WORKREG),X'00'                              0488
*       SB=ON;                      /* SHOW PATH SELECTED            */
         OI    SB(WORKREG),B'00010000'                             0489
*       SBACT=ON;                   /* SHOW PATH ACTIVATED   @ZA16156*/
         OI    SBACT(WORKREG),B'00010000'                          0490
*     END;                                                         0491
*PATHEXIT:                                                         0492
*   IOSGDP=ON;                      /* MAKE A GDP REQUEST            */
PATHEXIT OI    IOSGDP+220(WORKREG),B'10000000'                     0492
*   END PATHSEL;                    /* END OF ROUTINE                */
@EL00003 DS    0H                                                  0493
@EF00003 DS    0H                                                  0493
@ER00003 BR    @14                                                 0493
@PB00003 DS    0H                                                  0494
*   GEN(EJECT);                                                    0494
*                                                                  0494
         EJECT
*/********************************************************************/
*/*        NORMAL AND ABNORMAL END APPENDAGES                        */
*/********************************************************************/
*                                                                  0495
*PMSKNRM:                                                          0495
*PMSKABN:                                                          0495
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0495
         B     @PB00004                                            0495
PMSKNRM  DS    0H                                                  0495
PMSKABN  DS    0H                                                  0496
*   RFY                                                            0496
*    (REG2,                                                        0496
*     REG3,                                                        0496
*     REG4,                                                        0496
*     REG5) RSTD;                   /* RESTRICT REGS USED BY POST  0496
*                                      STATUS                        */
*/********************************************************************/
*/*        SET UP ADDRESSABILITY                                     */
*/********************************************************************/
*                                                                  0497
*   GEN;                                                           0497
         LR   BASEREG,RCREG
         LA   RCREG,PMSKNRM-@PSTART
         SR   BASEREG,RCREG
*   RFY                                                            0498
*     IOSB BASED(PARAMREG);                                        0498
*   WORKREG=IOSUSE;                 /* POINT AT THE WORK AREA        */
         L     WORKREG,IOSUSE(,PARAMREG)                           0499
*   RFY                                                            0500
*     IOSB BASED(ADDR(PMSKIOSB));                                  0500
*   APPSV=LINKREG;                  /* SAVE RETURN ADDRESS           */
         ST    LINKREG,APPSV(,WORKREG)                             0501
*   UCBPTR=IOSUCB;                  /* POINT AT THE UCB              */
         LA    @09,220                                             0502
         ALR   @09,WORKREG                                         0502
         L     UCBPTR,IOSUCB(,@09)                                 0502
*/********************************************************************/
*/*        TEST FOR SPECIAL COMPLETION CODES                         */
*/********************************************************************/
*                                                                  0503
*   IF IOSCOD=IOSNRMC               /* TEST FOR NORMAL COMPLETION    */
*     THEN                                                         0503
         CLI   IOSCOD(@09),X'7F'                                   0503
         BE    @RT00503                                            0503
*     GO TO PMSKFIRT;               /* YES - TRY NEXT PATH@YM06212   */
*   ELSE                                                           0505
*     ;                             /* NULL                          */
*   IF IOSCOD=IOSFINTC              /* TEST FOR INTERCEPT            */
*     THEN                                                         0506
         CLI   IOSCOD(@09),X'7E'                                   0506
         BE    @RT00506                                            0506
*     GO TO PMSKRTRY;               /* YES - RETRY REQUEST           */
*   ELSE                                                           0508
*     ;                             /* NULL                          */
*   IF IOSCOD=IOSGDPCC              /* TEST FOR GUARANTEED           */
*     THEN                                                         0509
         CLI   IOSCOD(@09),X'4D'                                   0509
         BE    @RT00509                                            0509
*     GO TO PMSKOFFL;               /* DEVICE - YES - SET OFFLINE    */
*   ELSE                                                           0511
*     ;                             /* NULL                          */
*   IF IOSCOD=IOSGDPRD              /* TEST FOR RESERVED DEVICE      */
*     THEN                                                         0512
         CLI   IOSCOD(@09),X'4E'                                   0512
         BNE   @RF00512                                            0512
*     DO;                           /* YES                           */
*       GDPRDSW=ON;                 /* SHOW SPECIAL RETURN CODE      */
         OI    GDPRDSW(WORKREG),B'10000000'                        0514
*       GO TO PMSKCOMP;             /* PREPARE TO EXIT               */
         B     PMSKCOMP                                            0515
*     END;                                                         0516
*   ELSE                                                           0517
*     ;                             /* NULL                          */
@RF00512 DS    0H                                                  0518
*   IF IOSCOD=IOSGDPCO              /* TEST FOR CPU OFFLINE          */
*     THEN                                                         0518
         CLI   IOSCOD+220(WORKREG),X'4F'                           0518
         BE    @RT00518                                            0518
*     GO TO PMSKOFFL;               /* YES - SET OFFLINE             */
*   ELSE                                                           0520
*     ;                             /* NULL                          */
*/********************************************************************/
*/*        TEST FOR UNIT CHECK                                       */
*/********************************************************************/
*                                                                  0521
*PMSKFIRT:                                                         0521
*   IF IOSTSA(7:7)=NOTON            /* TEST FOR UNIT CHECK@YM06212   */
*     THEN                                                         0521
PMSKFIRT LA    @09,220                                             0521
         ALR   @09,WORKREG                                         0521
         TM    IOSTSA(@09),B'00000010'                             0521
         BZ    @RT00521                                            0521
*     GO TO PMSKSUBT;               /* NO - TRY NEXT PATH            */
*   ELSE                                                           0523
*     ;                             /* NULL                          */
*   IF IOSNS0B1=ON THEN             /* INTERVENTION REQ'D    @YM04928*/
         TM    IOSNS0B1(@09),B'01000000'                           0524
         BNO   @RF00524                                            0524
*     NOTREADY=ON;                  /* YES                   @YM04928*/
         OI    NOTREADY(WORKREG),B'10000000'                       0525
*   ELSE                                                           0526
*     ;                                                            0526
@RF00524 DS    0H                                                  0527
*   IF UCB3TAPE=ON                  /* TEST FOR TAPE DEVICE          */
*     THEN                                                         0527
*                                                                  0527
         TM    UCB3TAPE(UCBPTR),B'10000000'                        0527
         BNO   @RF00527                                            0527
*/********************************************************************/
*/*        IF TAPE, AND STATUS A & B ON, MAKE OFFLINE                */
*/********************************************************************/
*                                                                  0528
*     IF IOSNS1B1=NOTON&IOSNS1B2=NOTON THEN                        0528
         TM    IOSNS1B1+220(WORKREG),B'01100000'                   0528
         BZ    @RT00528                                            0528
*       GO TO PMSKOFFL;             /* TEST FOR STATUS A & B OFF     */
*     ELSE                                                         0530
*       GO TO PMSKSUBT;             /* NO - TRY NEXT PATH            */
         B     PMSKSUBT                                            0530
*   ELSE                                                           0531
*     ;                             /* NULL                          */
@RF00527 DS    0H                                                  0532
*/********************************************************************/
*/*        IF DASD, AND COMMAND REJECT ON, RESET SHARED BIT          */
*/********************************************************************/
*                                                                  0532
*   IF UCB3DACC=ON                  /* TEST FOR DA DEVICE            */
*     THEN                          /* YES                           */
         TM    UCB3DACC(UCBPTR),B'00100000'                        0532
         BNO   @RF00532                                            0532
*     IF IOSNS0B0=ON                /* TEST FOR COMMAND REJECT       */
*       THEN                        /* YES                           */
         LA    @09,220                                             0533
         ALR   @09,WORKREG                                         0533
         TM    IOSNS0B0(@09),B'10000000'                           0533
         BNO   @RF00533                                            0533
*       IF IOSRELSE=ON              /* TEST FOR RELEASE FUNCTION     */
*         THEN                                                     0534
         TM    IOSRELSE(@09),B'00000001'                           0534
         BNO   @RF00534                                            0534
*         DO;                       /* YES                           */
*           UCBRR=NOTON;            /* RESET SHAREABLE BIT           */
         NI    UCBRR(UCBPTR),B'11011111'                           0536
*           UCBSHRUP=NOTON;         /* RESET U.P. BIT        @ZA00805*/
         L     @08,UCBEXTPT(,UCBPTR)                               0537
         NI    UCBSHRUP(@08),B'10111111'                           0537
*           IOSRELSE=NOTON;         /* RESET RELEASE FUNCTION        */
         NI    IOSRELSE(@09),B'11111110'                           0538
*           RFY                                                    0539
*            (WRK8) RSTD;                                          0539
*           GEN(LRA   WRK8,NOPCCW(WORKREG));                       0540
         LRA   WRK8,NOPCCW(WORKREG)
*           IOSRST=WRK8;            /* REAL CHANNEL PROGRAM ADDR     */
         ST    WRK8,IOSRST+220(,WORKREG)                           0541
*           RFY                                                    0542
*            (WRK8) UNRSTD;                                        0542
*         END;                                                     0543
*       ELSE                                                       0544
*         ;                         /* NULL                          */
@RF00534 DS    0H                                                  0545
*     ELSE                                                         0545
*       ;                           /* NULL                          */
@RF00533 DS    0H                                                  0546
*   ELSE                                                           0546
*     ;                             /* NULL                          */
@RF00532 DS    0H                                                  0547
*/********************************************************************/
*/*        CHECK FOR ALL I/O DONE                                    */
*/********************************************************************/
*                                                                  0547
*PMSKSUBT:                                                         0547
*   IOCOUNT=IOCOUNT-ONE;            /* SUBTRACT 1 FROM NUMBER I/O    */
PMSKSUBT LH    @09,IOCOUNT(,WORKREG)                               0547
         BCTR  @09,0                                               0547
         STH   @09,IOCOUNT(,WORKREG)                               0547
*   IF IOCOUNT=ZERO                 /* FINISHED?                     */
*     THEN                                                         0548
         LTR   @09,@09                                             0548
         BZ    @RT00548                                            0548
*     GO TO PMSKCOMP;               /* YES - GO POST                 */
*   ELSE                                                           0550
*     ;                             /* NULL                          */
*   CALL PATHSEL;                   /* SELECT THE NEXT PATH          */
         BAL   @14,PATHSEL                                         0551
*/********************************************************************/
*/*        RE-ISSUE THE I/O REQUEST                                  */
*/********************************************************************/
*                                                                  0552
*PMSKRTRY:                                                         0552
*   IOSERR=NOTON;                   /* RESET IOSERR                  */
PMSKRTRY DS    0H                                                  0553
*   IOSEX=NOTON;                    /* RESET IOSEX                   */
         NI    IOSERR+220(WORKREG),B'11011011'                     0553
*   LINKREG=APPSV;                  /* RESTORE RETURN ADDRESS        */
         L     LINKREG,APPSV(,WORKREG)                             0554
*   GEN(BC   15,8(14));             /* RETURN RETRY VECTOR           */
         BC   15,8(14)
*/********************************************************************/
*/*        THIS SUBROUTINE POSTS THE I/O ROUTINE OUT OF              */
*/*         THE WAIT STATE AND RETURNS TO POST STATUS ON THE         */
*/*         IGNORE VECTOR                                            */
*/********************************************************************/
*                                                                  0556
*PMSKCOMP:                                                         0556
*   WRK10=ZERO;                     /* NO SPECIAL COMPLETION CODE    */
PMSKCOMP SLR   WRK10,WRK10                                         0556
*   IF IOSIPIB^=ZERO THEN           /* PURGE ENVIRONMENT     @ZA01937*/
         L     @09,IOSIPIB+220(,WORKREG)                           0557
         LTR   @09,@09                                             0557
         BZ    @RF00557                                            0557
*     DO;                                                          0558
*       REG0=ZERO;                  /* INDICATE LOCAL LOCK HELD    0559
*                                                            @ZA01937*/
         SLR   REG0,REG0                                           0559
*       REG1=IOSIPIB;               /* GET THE IPIB @        @ZA01937*/
         LR    REG1,@09                                            0560
*       CALL IOCQCNT;               /* CALL PURGE TO DECREMENT     0561
*                                                            @ZA01937*/
         L     @09,FLCCVT                                          0561
         L     @09,IOCOMPTR(,@09)                                  0561
         L     @15,IOCQCNT(,@09)                                   0561
         BALR  @14,@15                                             0561
*     END;                          /* THE IPIB COUNT        @ZA01937*/
*   WRK11=ADDR(ECB);                /* POINT AT THE ECB              */
@RF00557 LA    WRK11,ECB(,WORKREG)                                 0563
*   RCREG=CVT0PT01;                 /* GET ADDRESS OF POST           */
         L     @09,FLCCVT                                          0564
         L     RCREG,CVT0PT01(,@09)                                0564
*   GEN(BALR LINKREG,RCREG);        /* GO TO POST ROUTINE            */
         BALR LINKREG,RCREG
*   RCREG=ADDR(DUMMY);              /* POINT AT BR14                 */
         LA    RCREG,DUMMY                                         0566
*   LINKREG=APPSV;                  /* RESTORE RETURN ADDRESS        */
         L     LINKREG,APPSV(,WORKREG)                             0567
*   GEN(BC   15,4(14));             /* RETURN IGNORE VECTOR          */
         BC   15,4(14)
*DUMMY:                                                            0569
*   GEN(BCR  15,14);                /* DUMMY ROUTINE                 */
DUMMY    BCR  15,14
*/********************************************************************/
*/*        THE PATH IS SET HERE TO BE MARKED OFFLINE                 */
*/********************************************************************/
*                                                                  0570
*PMSKOFFL:                                                         0570
*   IF PA=ON                        /* PATH TO P0                    */
*     THEN                                                         0570
PMSKOFFL TM    PA(WORKREG),B'10000000'                             0570
         BNO   @RF00570                                            0570
*     DO;                           /* YES                           */
*       PCPUA=ON;                   /* SHOW AS OFFLINE               */
         OI    PCPUA(WORKREG),B'10000000'                          0572
*       PCPUA2=ON;                                                 0573
         OI    PCPUA2(WORKREG),B'10000000'                         0573
*     END;                                                         0574
*   ELSE                                                           0575
*     ;                             /* NULL                          */
@RF00570 DS    0H                                                  0576
*   IF PB=ON                        /* PATH TO P1                    */
*     THEN                                                         0576
         TM    PB(WORKREG),B'01000000'                             0576
         BNO   @RF00576                                            0576
*     DO;                           /* YES                           */
*       PCPUB=ON;                   /* SHOW AS OFFLINE               */
         OI    PCPUB(WORKREG),B'00100000'                          0578
*       PCPUB2=ON;                                                 0579
         OI    PCPUB2(WORKREG),B'00100000'                         0579
*     END;                                                         0580
*   ELSE                                                           0581
*     ;                             /* NULL                          */
@RF00576 DS    0H                                                  0582
*   IF SA=ON                        /* PATH TO S0                    */
*     THEN                                                         0582
         TM    SA(WORKREG),B'00100000'                             0582
         BNO   @RF00582                                            0582
*     DO;                           /* YES                           */
*       SCPUA=ON;                   /* SHOW AS OFFLINE               */
         OI    SCPUA(WORKREG),B'01000000'                          0584
*       SCPUA2=ON;                                                 0585
         OI    SCPUA2(WORKREG),B'01000000'                         0585
*     END;                                                         0586
*   ELSE                                                           0587
*     ;                             /* NULL                          */
@RF00582 DS    0H                                                  0588
*   IF SB=ON                        /* PATH TO S1                    */
*     THEN                                                         0588
         TM    SB(WORKREG),B'00010000'                             0588
         BNO   @RF00588                                            0588
*     DO;                           /* YES                           */
*       SCPUB=ON;                   /* SHOW AS OFFLINE               */
         OI    SCPUB(WORKREG),B'00010000'                          0590
*       SCPUB2=ON;                                                 0591
         OI    SCPUB2(WORKREG),B'00010000'                         0591
*     END;                                                         0592
*   ELSE                                                           0593
*     ;                             /* NULL                          */
@RF00588 DS    0H                                                  0594
*   GO TO PMSKSUBT;                 /* TRY NEXT PATH                 */
         B     PMSKSUBT                                            0594
*   END PMSKNRM;                                                   0595
@PB00004 DS    0H                                                  0596
*   GEN(EJECT);                                                    0596
*                                                                  0596
         EJECT
*/********************************************************************/
*/*        TERMINATION SUBROUTINE                                    */
*/*        LOCAL LOCK OBTAINED BY POST STATUS.               @ZA16155*/
*/********************************************************************/
*                                                                  0597
*PMSKTERM:                                                         0597
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0597
         B     @PB00005                                            0597
PMSKTERM DS    0H                                                  0598
*   GEN;                                                           0598
         LR    BASEREG,RCREG
         LA    RCREG,PMSKTERM-@PSTART
         SR    BASEREG,RCREG
*   RFY                                                            0599
*     IOSB BASED(PARAMREG);         /* POINT AT IOSB                 */
*   WORKREG=IOSUSE;                 /* POINT AT WORK AREA            */
         L     WORKREG,IOSUSE(,PARAMREG)                           0600
*   TERMSW=ON;                      /* INDICATE PROGRAM ERROR        */
         OI    TERMSW(WORKREG),B'01000000'                         0601
*   RFY                                                            0602
*     IOSB BASED(ADDR(PMSKIOSB));                                  0602
*   RFY                                                            0603
*    (REG4,                                                        0603
*     REG5) RSTD;                                                  0603
*   REG4=BASEREG;                   /* SAVE BASE ADDRESS             */
         LR    REG4,BASEREG                                        0604
*   REG5=LINKREG;                   /* SAVE RETURN ADDRESS           */
         LR    REG5,LINKREG                                        0605
*/* TERMINATION SUBROUTINE IS ONLY ENTER IF IOS MAINLINE HAS @ZA01937*/
*/* A COMPLETION CODE OF X'45', WHICH INDICATES THAT         @ZA01937*/
*/* IECIOSCN OR IECVPST TOOK A PROGRAM CHECK, THEREBY        @ZA01937*/
*/* CAUSING A PURGE SITUATION.                               @ZA01937*/
*                                                                  0606
*   IF IOSIPIB^=ZERO THEN           /* PURGE ENV.            @ZA01937*/
         L     @09,IOSIPIB+220(,WORKREG)                           0606
         LTR   @09,@09                                             0606
         BZ    @RF00606                                            0606
*     DO;                                                          0607
*       REG0=ZERO;                  /* LOCAL LOCK HELD       @ZA01937*/
         SLR   REG0,REG0                                           0608
*       REG1=IOSIPIB;               /* GET IPIP @            @ZA01937*/
         LR    REG1,@09                                            0609
*       CALL IOCQCNT;               /* GOTO PURGE TO         @ZA01937*/
         L     @09,FLCCVT                                          0610
         L     @09,IOCOMPTR(,@09)                                  0610
         L     @15,IOCQCNT(,@09)                                   0610
         BALR  @14,@15                                             0610
*     END;                          /* DECREMENT IPIB COUNT  @ZA01937*/
*/********************************************************************/
*/*        POST THE I/O COMPLETE                                     */
*/********************************************************************/
*                                                                  0612
*   BASEREG=REG4;                   /* RESTORE THE BASE REGISTER     */
@RF00606 LR    BASEREG,REG4                                        0612
*   WRK10=ZERO;                     /* NO COMPLETION CODE            */
         SLR   WRK10,WRK10                                         0613
*   WRK11=ADDR(ECB);                /* POINT AT THE ECB              */
         LA    WRK11,ECB(,WORKREG)                                 0614
*   RCREG=CVT0PT01;                 /* ADDRESS OF POST               */
         L     @09,FLCCVT                                          0615
         L     RCREG,CVT0PT01(,@09)                                0615
*   GEN(BALR  LINKREG,RCREG);       /* GO TO POST                    */
         BALR  LINKREG,RCREG
*   LINKREG=REG5;                   /* RESTORE RETURN ADDRESS        */
         LR    LINKREG,REG5                                        0617
*   END PMSKTERM;                                                  0618
@EL00005 DS    0H                                                  0618
@EF00005 DS    0H                                                  0618
@ER00005 BR    @14                                                 0618
@PB00005 DS    0H                                                  0619
*   GEN(EJECT);                                                    0619
*                                                                  0619
         EJECT
*/***********************************************************@ZA04107*/
*/*      TIMER ROUTINE                                       @ZA04107*/
*/***********************************************************@ZA04107*/
*                                                                  0620
*TIMEOUT:                           /*                       @ZA04107*/
*   PROC OPTIONS(NOSAVEAREA);       /*                       @ZA04107*/
         B     @PB00006                                            0620
TIMEOUT  STM   @14,@12,12(@13)                                     0620
*   GEN;                                                           0621
*                                                           @ZA04107
        LR    BASEREG,RCREG            SET UP               @ZA04107
        LA    RCREG,TIMEOUT-@PSTART    ADDRESSABILITY       @ZA04107
        SR    BASEREG,RCREG            FROM MAIN MODULE     @ZA04107
*   DO;                             /* GETMAIN (RC) LV(LENGTH(PPL))
*                                      SP(245)                       */
*     RESPECIFY                                                    0623
*      (GPR01F,                                                    0623
*       GPR15F,                                                    0623
*       GPR00F) RESTRICTED;                                        0623
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0624
*     GPR15F=0;                     /* RC-TYPE GETMAIN               */
         SLR   GPR15F,GPR15F                                       0625
*     GPR00F=LENGTH(PPL);           /* LENGTH REQUESTED              */
         LA    GPR00F,16                                           0626
*     GPR15F=GPR15F×((245)*256);    /* SP IN BYTE 2                  */
         O     GPR15F,@CF02785                                     0627
*     SVC(120);                     /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0628
*     RESPECIFY                                                    0629
*      (GPR01F,                                                    0629
*       GPR15F,                                                    0629
*       GPR00F) UNRESTRICTED;                                      0629
*   END;                            /* GETMAIN (RC) LV(LENGTH(PPL))
*                                      SP(245) GET PURGE     @ZA04107
*                                      PARM LIST             @ZA04107*/
*   IF RCREG^=ZERO                  /* TEST GETMAIN RET CODE @ZA04107*/
*     THEN                          /* FAILED--CAN NOT ISSUE @ZA04107
*                                      PURGE                 @ZA04107*/
         LTR   RCREG,RCREG                                         0631
         BNZ   @RT00631                                            0631
*     RETURN;                       /*                       @ZA04107*/
*   PPL=PPL&&PPL;                   /* CLEAR PARM LIST       @ZA04107*/
         XC    PPL(16,PARAMREG),PPL(PARAMREG)                      0633
*   PPLDS=ON;                       /* INDICATE DSID PURGE   @ZA04107*/
*   PPLHIO=ON;                      /* INDICATE HALT         @ZA04107*/
         OI    PPLDS(PARAMREG),B'10100000'                         0635
*   PPLDVRID=IOSPRGID;              /* SET DRIVER ID         @ZA04107*/
         MVI   PPLDVRID(PARAMREG),X'0A'                            0636
*   PPLDSIDA=PSATOLD-1;             /* SET DSID TO PURGE     @ZA04107*/
         L     @09,PSATOLD                                         0637
         BCTR  @09,0                                               0637
         STCM  @09,7,PPLDSIDA(PARAMREG)                            0637
*   REG2=REG1;                      /* SAVE PARM LIST FOR    @ZA04107
*                                      FREEMAIN              @ZA04107*/
         LR    REG2,REG1                                           0638
*/* PURGE I/O REQUEST TO VERIFY PATH                         @ZA04107*/
*                                                                  0639
*   GEN(PURGE (1));                 /* ISSUE PURGE           @ZA04107*/
         PURGE (1)
*   DO;                             /* FREEMAIN(RC)                0640
*                                      LV(LENGTH(PPL))A(REG2->PPL) 0640
*                                      SP(245)                       */
*     RESPECIFY                                                    0641
*      (GPR01F,                                                    0641
*       GPR15F,                                                    0641
*       GPR00F) RESTRICTED;                                        0641
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0642
*     GPR15F=1;                     /* SET TYPE                      */
         LA    GPR15F,1                                            0643
*     GPR00F=LENGTH(PPL);           /* LENGTH REQUESTED              */
         LA    GPR00F,16                                           0644
*     GPR01F=ADDR(REG2->PPL);       /* SET REGISTER ONE              */
         LR    GPR01F,REG2                                         0645
*     GPR15F=GPR15F+((245)*256);    /* SUBPOOL VALUE                 */
         AL    GPR15F,@CF02785                                     0646
*     SVC(120);                     /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0647
*     RESPECIFY                                                    0648
*      (GPR01F,                                                    0648
*       GPR15F,                                                    0648
*       GPR00F) UNRESTRICTED;                                      0648
*   END;                            /* FREEMAIN(RC)                0649
*                                      LV(LENGTH(PPL))A(REG2->PPL) 0649
*                                      SP(245)               @ZA04107
*                                      FREE PPL              @ZA04107*/
*   RETURN;                         /* EXIT                  @ZA04107*/
@EL00006 DS    0H                                                  0650
@EF00006 DS    0H                                                  0650
@ER00006 LM    @14,@12,12(@13)                                     0650
         BR    @14                                                 0650
*   END TIMEOUT;                    /*                       @ZA04107*/
         B     @EL00006                                            0651
@PB00006 DS    0H                                                  0652
*   GEN(EJECT);                                                    0652
*                                                                  0652
         EJECT
*/***********************************************************@ZA04107*/
*/*      PURGE ROUTINE                                       @ZA04107*/
*/***********************************************************@ZA04107*/
*                                                                  0653
*PURGE:                             /*                       @ZA04107*/
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                       @ZA04107*/
         B     @PB00007                                            0653
PURGE    DS    0H                                                  0654
*   GEN;                                                           0654
*                                  /*                       @ZA04107*/
        STM   REG0,RCREG,0(RSAVE)      SAVE REGISTERS       @ZA04107
        LR    BASEREG,RCREG            SET UP               @AA04107
        LA    RCREG,PURGE-@PSTART      ADDRESSABILITY       @ZA04107
        SR    BASEREG,RCREG            FROM MAIN STORAGE    @ZA04107
*   IF IPIBHALT^=ON                 /* NOT HALT              @ZA04107*/
*       ×IPIBIO=ZERO                /* NO I/O OUTSTANDING    @ZA04107*/
*       ×IPIBIO->SRBPARM->IOSDSID^=PSATOLD-1/* AND NOT       @ZA04107
*                                      RIGHT DSID            @ZA04107*/
*     THEN                          /*                       @ZA04107*/
         TM    IPIBHALT(PARAMREG),B'00000100'                      0655
         BNO   @RT00655                                            0655
         L     @09,IPIBIO(,PARAMREG)                               0655
         LTR   @09,@09                                             0655
         BZ    @RT00655                                            0655
         L     @09,SRBPARM(,@09)                                   0655
         L     @08,PSATOLD                                         0655
         BCTR  @08,0                                               0655
         C     @08,IOSDSID(,@09)                                   0655
         BNE   @RT00655                                            0655
*     GO TO PEXIT;                  /* EXIT                  @ZA04107*/
*   WORKREG=IPIBIO->SRBPARM->IOSUSE;/* GET POINTER TO        @ZA04107
*                                      WORKING STORAGE       @ZA04107*/
         L     WORKREG,IOSUSE(,@09)                                0657
*   TIMESW=ON;                      /* INDICATE PURGE WORKED @ZA04107*/
*   TIMERSET=NOTON;                 /* RESET STIMER ISSUED.  @ZA32263*/
         OI    TIMESW(WORKREG),B'00100000'                         0659
         NI    TIMERSET(WORKREG),B'11111011'                       0659
*   IOCOUNT=IOCOUNT-1;              /* DECREMENT I/O COUNT   @ZA29505*/
         LH    @09,IOCOUNT(,WORKREG)                               0660
         BCTR  @09,0                                               0660
         STH   @09,IOCOUNT(,WORKREG)                               0660
*   IF PA=ON                        /* PATH TO P0            @ZA29505*/
*     THEN                                                         0661
         TM    PA(WORKREG),B'10000000'                             0661
         BNO   @RF00661                                            0661
*     DO;                           /* YES                   @ZA29505*/
*       PCPUA=ON;                   /* SHOW AS OFFLINE       @ZA29505*/
         OI    PCPUA(WORKREG),B'10000000'                          0663
*       PCPUA2=ON;                  /*                       @ZA29505*/
         OI    PCPUA2(WORKREG),B'10000000'                         0664
*     END;                          /*                       @ZA29505*/
*   ELSE                                                           0666
*     ;                             /* NULL                  @ZA29505*/
@RF00661 DS    0H                                                  0667
*   IF PB=ON                        /* PATH TO P1            @ZA29505*/
*     THEN                                                         0667
         TM    PB(WORKREG),B'01000000'                             0667
         BNO   @RF00667                                            0667
*     DO;                           /* YES                   @ZA29505*/
*       PCPUB=ON;                   /* SHOW AS OFFLINE       @ZA29505*/
         OI    PCPUB(WORKREG),B'00100000'                          0669
*       PCPUB2=ON;                  /*                       @ZA29505*/
         OI    PCPUB2(WORKREG),B'00100000'                         0670
*     END;                          /*                       @ZA29505*/
*   ELSE                                                           0672
*     ;                             /* NULL                  @ZA29505*/
@RF00667 DS    0H                                                  0673
*   IF SA=ON                        /* PATH TO S0            @ZA29505*/
*     THEN                                                         0673
         TM    SA(WORKREG),B'00100000'                             0673
         BNO   @RF00673                                            0673
*     DO;                           /* YES                   @ZA29505*/
*       SCPUA=ON;                   /* SHOW AS OFFLINE       @ZA29505*/
         OI    SCPUA(WORKREG),B'01000000'                          0675
*       SCPUA2=ON;                  /*                       @ZA29505*/
         OI    SCPUA2(WORKREG),B'01000000'                         0676
*     END;                          /*                       @ZA29505*/
*   ELSE                                                           0678
*     ;                             /* NULL                  @ZA29505*/
@RF00673 DS    0H                                                  0679
*   IF SB=ON                        /* PATH TO S1            @ZA29505*/
*     THEN                                                         0679
         TM    SB(WORKREG),B'00010000'                             0679
         BNO   @RF00679                                            0679
*     DO;                           /* YES                   @ZA29505*/
*       SCPUB=ON;                   /* SHOW AS OFFLINE       @ZA29505*/
         OI    SCPUB(WORKREG),B'00010000'                          0681
*       SCPUB2=ON;                  /*                       @ZA29505*/
         OI    SCPUB2(WORKREG),B'00010000'                         0682
*     END;                          /*                       @ZA29505*/
*   ELSE                                                           0684
*     ;                             /* NULL                  @ZA29505*/
@RF00679 DS    0H                                                  0685
*   DO;                             /* POST (ECB)                    */
*     RESPECIFY                                                    0686
*      (GPR00F,                                                    0686
*       GPR01P) RESTRICTED;                                        0686
*     GPR00F=0;                     /* POST CODE IN R0               */
         SLR   GPR00F,GPR00F                                       0687
*     GPR01P=ADDR(ECB);             /* ECB ADDRESS                   */
         LA    GPR01P,ECB(,WORKREG)                                0688
*     SVC(2);                       /* ISSUE POST SVC                */
         SVC   2                                                   0689
*     RESPECIFY                                                    0690
*      (GPR00F,                                                    0690
*       GPR01P) UNRESTRICTED;                                      0690
*   END;                            /* POST (ECB) POST I/O COMPLETE
*                                                            @ZA04107*/
*PEXIT:                             /*                       @ZA04107*/
*   GEN EXIT NOSEQFLOW;                                            0692
PEXIT    DS    0H                                                  0692
*                                                           @ZA04107
        LM    REG0,RCREG,0(RSAVE)      RESTORE REGISTERS    @ZA04107
        BR    LINKREG                  RETURN               @ZA04107
*   END PURGE;                      /*                       @ZA04107*/
@PB00007 DS    0H                                                  0694
*   GEN(EJECT);                                                    0694
*                                                                  0694
         EJECT
*/********************************************************************/
*/*        ESTAE EXIT ROUTINE                                        */
*/********************************************************************/
*                                                                  0695
*ESTRTN:                                                           0695
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0695
         B     @PB00008                                            0695
ESTRTN   DS    0H                                                  0696
*   RFY                                                            0696
*    (REG4,                                                        0696
*     REG5) RSTD;                                                  0696
*   GEN;                                                           0697
         LR   BASEREG,RCREG
         LA   RCREG,ESTRTN-@PSTART
         SR   BASEREG,RCREG
*   IF REG0=TWELVE THEN                                            0698
         C     REG0,@CF01567                                       0698
         BNE   @RF00698                                            0698
*     DO;                           /* TEST FOR AN SDWA              */
*       WORKREG=REG2;               /* POINT AT WORK AREA            */
         LR    WORKREG,REG2                                        0700
*       REG5=ZERO;                  /* INDICATE NO SDWA              */
         SLR   REG5,REG5                                           0701
*     END;                                                         0702
*   ELSE                                                           0703
*     DO;                           /* SDWA PASSED                   */
         B     @RC00698                                            0703
@RF00698 DS    0H                                                  0704
*       WORKREG=SDWAPARM;           /* POINT AT WORK AREA            */
         L     WORKREG,SDWAPARM(,PARAMREG)                         0704
*       REG5=PARAMREG;              /* INDICATE AN SDWA              */
         LR    REG5,PARAMREG                                       0705
*     END;                                                         0706
*   TERMSW=ON;                      /* INDICATE PROGRAM ERROR        */
@RC00698 OI    TERMSW(WORKREG),B'01000000'                         0707
*   RSAVE=ADDR(REG0FSV);            /* POINT AT SAVE AREA            */
         LA    RSAVE,REG0FSV(,WORKREG)                             0708
*   REG4=LINKREG;                   /* SAVE RETURN ADDRESS           */
         LR    REG4,LINKREG                                        0709
*   GEN;                                                           0710
         LA    REG1,SDMPLST                                   @ZA13433
         SDUMP MF=(E,(1))                                     @ZA13433
*   LINKREG=REG4;                   /* RESTORE RETURN ADDRESS        */
         LR    LINKREG,REG4                                        0711
*   IF REG5=ZERO THEN                                              0712
         LTR   REG5,REG5                                           0712
         BNZ   @RF00712                                            0712
*     DO;                           /* IF NO SDWA, SET UP RETURN     */
*       REG0=ADDR(RETRY);           /* RETRY ROUTINE                 */
         LA    REG0,RETRY                                          0714
*       RCREG=FOUR;                 /* INDICATE RETRY TO RTM         */
         LA    RCREG,4                                             0715
*       GO TO ESTEXIT;              /* ALL DONE                      */
         B     ESTEXIT                                             0716
*     END;                                                         0717
*   ELSE                                                           0718
*     ;                             /* NULL                          */
@RF00712 DS    0H                                                  0719
*   PARAMREG=REG5;                  /* RESTORE SDWA POINTER          */
         LR    PARAMREG,REG5                                       0719
*   GEN(STM   0,15,SDWASRSV(PARAMREG));/* RESTORE ALL REGS           */
         STM   0,15,SDWASRSV(PARAMREG)
*   SDWAURAL=LENGTH(PMSKRB);        /* SET LENGTH            @ZA16160*/
         MVI   SDWAURAL(PARAMREG),X'60'                            0721
*   SDWAVRA=PMSKRB;                 /* MOVE IN WORK AREA     @ZA16160*/
         MVI   SDWAVRA+96(PARAMREG),C' '                           0722
         MVC   SDWAVRA+97(11,PARAMREG),SDWAVRA+96(PARAMREG)        0722
         MVC   SDWAVRA(96,PARAMREG),PMSKRB(WORKREG)                0722
*   SDWAHEX=ON;                     /* INDICATE DUMP IN HEX          */
         OI    SDWAHEX(PARAMREG),B'10000000'                       0723
*   DO;                             /* SETRP RETADDR(RETRY)RETREGS(YE
*                                      S)RECORD(YES)RECPARM(PMSKNAME)
*                                      RC(4)FRESDWA(YES)             */
*     RESPECIFY                                                    0725
*      (GPR00P,                                                    0725
*       GPR01P,                                                    0725
*       GPR14P,                                                    0725
*       GPR15P) RSTD;                                              0725
*     GPR01P->SDWARCDE=4;           /* STORE RC INTO SDWA            */
         MVI   SDWARCDE(GPR01P),X'04'                              0726
*     GPR01P->SDWARTYA=ADDR(RETRY); /* SAVE RETRY ADDRESS            */
         LA    @09,RETRY                                           0727
         ST    @09,SDWARTYA(,GPR01P)                               0727
*     GPR01P->SDWAFREE='1'B;        /* SET FLAG TO FREE SDWA         */
*     GPR01P->SDWARCRD='1'B;        /* TURN ON RECORD INDICATOR      */
         OI    SDWAFREE(GPR01P),B'10000100'                        0729
*     GPR15P=ADDR(PMSKNAME);        /* ACCESS RECORD PARAMETER LIST  */
         LA    GPR15P,PMSKNAME                                     0730
*     GPR01P->SDWARECP=GPR15P->I256C(1:24);/* COPY RECORD PARAMETERS */
         MVC   SDWARECP(24,GPR01P),I256C(GPR15P)                   0731
*     GPR01P->SDWAUPRG='1'B;        /* TURN ON RETREGS INDICATOR     */
         OI    SDWAUPRG(GPR01P),B'00001000'                        0732
*     RESPECIFY                                                    0733
*      (GPR00P,                                                    0733
*       GPR01P,                                                    0733
*       GPR14P,                                                    0733
*       GPR15P) UNRSTD;                                            0733
*   END;                                                           0734
*   RFY                                                            0735
*    (REG4,                                                        0735
*     REG5) UNRSTD;                                                0735
*ESTEXIT:                                                          0736
*   END ESTRTN;                                                    0736
@EL00008 DS    0H                                                  0736
@EF00008 DS    0H                                                  0736
@ER00008 BR    @14                                                 0736
*   END IECVIOPM                                                   0737
*                                                                  0737
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IECDCAT )                                       */
*/*%INCLUDE SYSLIB  (IECDIOCM)                                       */
*/*%INCLUDE SYSLIB  (IECDIOSB)                                       */
*/*%INCLUDE SYSLIB  (IECDLCH )                                       */
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IHACSD  )                                       */
*/*%INCLUDE SYSLIB  (IHAPCCA )                                       */
*/*%INCLUDE SYSLIB  (IHAPCCAT)                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (IHASRB  )                                       */
*/*%INCLUDE SYSLIB  (IECDVOID)                                       */
*/*%INCLUDE SYSLIB  (IECDPPL )                                       */
*/*%INCLUDE SYSLIB  (IECDIPIB)                                       */
*                                                                  0737
*       ;                                                          0737
         B     @EL00001                                            0737
@DATA    DS    0H
         DS    0F
         DS    0F
@CF00063 DC    F'1'
@CH00063 EQU   @CF00063+2
@CF01567 DC    F'12'
@CF02785 DC    F'62720'
         DS    0D
@CB02621 DC    X'0000'
@CB02632 DC    X'3000'
NOWTOID  DC    X'000000'
PMSKNAME DS    CL24
         ORG   PMSKNAME
@NM00102 DC    CL8'IECVIOPM'
@NM00103 DC    CL8'IECVIOPM'
@NM00104 DC    CL8'ESTRTN'
         ORG   PMSKNAME+24
         DS    CL1
TIME     DC    CL8'00010000'
IECVIOPM CSECT
*                                                        /*@ZA13433*/
SDMPLST  SDUMP HDR='IECVIOPM PROGRAM ERROR',QUIESCE=NO,       @ZA13433CC
               SDATA=(NUC,SQA,LPA,TRT),MF=L                   @ZA13433
IECVIOPM CSECT
PMSKPTCH DC    (12+((*+139-@MAINENT)/140))A(0)
IECVIOPM CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
BASEREG  EQU   @12
UCBPTR   EQU   @06
WRK11    EQU   @11
WORKREG  EQU   @07
REG0     EQU   @00
REG1     EQU   @01
PARAMREG EQU   @01
REG2     EQU   @02
REG3     EQU   @03
REG4     EQU   @04
REG5     EQU   @05
WRK8     EQU   @08
WRK10    EQU   @10
RSAVE    EQU   @13
LINKREG  EQU   @14
RCREG    EQU   @15
GPR00F   EQU   @00
GPR01F   EQU   @01
GPR15F   EQU   @15
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR14P   EQU   @14
GPR15P   EQU   @15
CVTPTR   EQU   16
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSAPCCAV EQU   PSA+520
PSATOLD  EQU   PSA+540
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIXAVL EQU   CVTMAP+124
CVTILCH  EQU   CVTMAP+140
CVTIERLC EQU   CVTMAP+144
CVT0PT01 EQU   CVTMAP+152
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
CAT      EQU   0
CATENTRY EQU   CAT
CATFLG   EQU   CATENTRY
CATFLA   EQU   CAT+1
IOCOM    EQU   0
IOCSTIO  EQU   IOCOM+28
IOCVOID  EQU   IOCOM+32
IOCGENA  EQU   IOCOM+84
IOCQCNT  EQU   IOCOM+116
IOSB     EQU   0
IOSFLA   EQU   IOSB
IOSACHN  EQU   IOSFLA
IOSERR   EQU   IOSFLA
IOSEX    EQU   IOSFLA
IOSFLB   EQU   IOSB+1
IOSFLC   EQU   IOSB+2
IOSDVALT EQU   IOSFLC
IOSDVRID EQU   IOSB+4
IOSASID  EQU   IOSB+6
IOSPGAD  EQU   IOSB+8
IOSPKEY  EQU   IOSB+12
IOSCOD   EQU   IOSB+13
IOSOPT   EQU   IOSB+14
IOSBYP   EQU   IOSOPT
IOSNERP  EQU   IOSOPT
IOSRELSE EQU   IOSOPT
IOSOPT2  EQU   IOSB+15
IOSUCB   EQU   IOSB+16
@NM00006 EQU   IOSB+20
IOSCSW   EQU   @NM00006+1
IOSTATUS EQU   IOSCSW+3
IOSTSA   EQU   IOSTATUS
IOSUSE   EQU   IOSB+32
IOSSNS   EQU   IOSB+42
IOSIPIB  EQU   IOSB+44
IOSNRM   EQU   IOSB+60
IOSABN   EQU   IOSB+64
IOSRST   EQU   IOSB+72
IOSVST   EQU   IOSB+76
IOSDSID  EQU   IOSB+80
IOSAFF   EQU   IOSB+85
IOSPATH  EQU   IOSB+86
IOSCHN   EQU   IOSPATH
IOSGDP   EQU   IOSCHN
IOSCKEY  EQU   IOSB+89
IOSEEKA  EQU   IOSB+100
IOSCCHH  EQU   IOSEEKA+3
IOSSKHH  EQU   IOSCCHH+2
LCH      EQU   0
LCHENTRY EQU   LCH
LCHTCH   EQU   LCH+16
LCHFLA   EQU   LCH+21
LCHPTR   EQU   0
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBCHAN  EQU   UCBOB+4
UCBCHA   EQU   UCBCHAN
UCBUA    EQU   UCBCHAN+1
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBVALPH EQU   UCBFLB
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBLCI   EQU   UCBOB+10
UCBWGT   EQU   UCBOB+12
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCBRR    EQU   UCBDUDN1
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCB3TAPE EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00016 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBSHRUP EQU   UCBFLP1
UCBMIHBY EQU   UCBCMEXT+16
UCBWTOID EQU   UCBCMEXT+17
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCB3800X EQU   0
UCBOPTNS EQU   UCB3800X
UCBACTIV EQU   UCB3800X+3
UCBMDRBF EQU   UCB3800X+36
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
UCBBGN   EQU   0
ASCB     EQU   0
ASCBASID EQU   ASCB+36
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
CSD      EQU   0
CSDCPUAL EQU   CSD+8
CSDSCWRD EQU   CSD+12
CSDSCFL1 EQU   CSDSCWRD
CSDSCFL2 EQU   CSDSCWRD+1
CSDSCFL3 EQU   CSDSCWRD+2
CSDSCFL4 EQU   CSDSCWRD+3
CSDFLAGS EQU   CSD+23
PCCA     EQU   0
PCCACPUA EQU   PCCA+16
PCCACAFM EQU   PCCA+18
PCCATMST EQU   PCCA+128
PCCATMFL EQU   PCCATMST
PCCATODE EQU   PCCATMST+1
PCCACCE  EQU   PCCATMST+2
PCCAINTE EQU   PCCATMST+3
PCCAEMSB EQU   PCCA+136
PCCAEMSI EQU   PCCAEMSB
PCCARISP EQU   PCCAEMSI
PCCAEMS2 EQU   PCCAEMSI+1
PCCAEMS3 EQU   PCCAEMSI+2
PCCARMSB EQU   PCCAEMSI+3
PCCAWERP EQU   PCCA+280
PCCACHPF EQU   PCCAWERP+4
PCCACHBL EQU   PCCAWERP+5
PCCACHVA EQU   PCCAWERP+6
PCCACHTS EQU   PCCAWERP+7
PCCACHS1 EQU   PCCA+288
PCCACHS2 EQU   PCCA+289
PCCACHRB EQU   PCCA+290
PCCACHF1 EQU   PCCA+308
PCCACHF2 EQU   PCCA+309
PCCACHF3 EQU   PCCA+310
PCCACHF4 EQU   PCCA+311
PCCACAT  EQU   PCCA+384
PCCAPTR  EQU   0
PCCAVT   EQU   0
SDWA     EQU   0
SDWAPARM EQU   SDWA
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAERRD EQU   SDWAFLGS+3
SDWAIOFS EQU   SDWA+238
SDWARTYA EQU   SDWA+240
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWARCDE EQU   SDWAPARQ
SDWAACF2 EQU   SDWAPARQ+1
SDWARCRD EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
SDWAHEX  EQU   SDWADPVA
SDWAURAL EQU   SDWARA+3
SDWAVRA  EQU   SDWARA+4
SRBSECT  EQU   0
SRB      EQU   SRBSECT
SRBFLC   EQU   SRB+12
SRBPARM  EQU   SRB+28
VOID     EQU   0
VOIENTRY EQU   VOID
VOIPRG   EQU   VOIENTRY
PPL      EQU   0
PPLDSID  EQU   PPL
PPLOPT1  EQU   PPLDSID
PPLDS    EQU   PPLOPT1
PPLHIO   EQU   PPLOPT1
PPLDSIDA EQU   PPLDSID+1
PPLTCB   EQU   PPL+4
PPLPIRL  EQU   PPL+8
PPLDVRID EQU   PPLPIRL
PPLOPT2  EQU   PPL+12
IPIB     EQU   0
IPIBOPT  EQU   IPIB
IPIBHALT EQU   IPIBOPT
IPIBFLG1 EQU   IPIB+2
IPIBIO   EQU   IPIB+20
PMSKPARM EQU   0
FUNCTION EQU   PMSKPARM
UCBADDR  EQU   PMSKPARM+1
CPUMASK  EQU   PMSKPARM+4
CPUA     EQU   CPUMASK
CPUB     EQU   CPUMASK
CHANMSK  EQU   PMSKPARM+5
PMSKWORK EQU   0
PMSKRA   EQU   PMSKWORK
NOPCCW   EQU   PMSKRA
CCWOP    EQU   NOPCCW
CCWADDR  EQU   NOPCCW+1
CCWFLAGS EQU   NOPCCW+4
CCWCOUNT EQU   NOPCCW+6
REGSAVE  EQU   PMSKRA+8
REG0FSV  EQU   REGSAVE
PMSKRB   EQU   PMSKWORK+80
REG13SV  EQU   PMSKRB
LINKSAVE EQU   PMSKRB+4
IORTNSV  EQU   LINKSAVE
APPSV    EQU   LINKSAVE+4
ECB      EQU   PMSKRB+12
ESTAELST EQU   PMSKRB+16
PATHMAP  EQU   PMSKRB+32
PRADDR   EQU   PATHMAP
PRACHA   EQU   PRADDR
PRIME    EQU   PATHMAP+2
PRCPUA   EQU   PRIME
PRCPUB   EQU   PRIME+1
SECADDR  EQU   PATHMAP+4
SECCHA   EQU   SECADDR
SECOND   EQU   PATHMAP+6
SECCPUA  EQU   SECOND
SECCPUB  EQU   SECOND+1
PATHSAVE EQU   PMSKRB+40
PARMSAVE EQU   PMSKRB+48
IOCOUNT  EQU   PMSKRB+64
OFFMASK  EQU   PMSKRB+66
PCPUA    EQU   OFFMASK
SCPUA    EQU   OFFMASK
PCPUB    EQU   OFFMASK
SCPUB    EQU   OFFMASK
OFFMASK2 EQU   PMSKRB+67
PCPUA2   EQU   OFFMASK2
SCPUA2   EQU   OFFMASK2
PCPUB2   EQU   OFFMASK2
SCPUB2   EQU   OFFMASK2
SAMASK   EQU   PMSKRB+68
PATH     EQU   PMSKRB+69
PA       EQU   PATH
PB       EQU   PATH
SA       EQU   PATH
SB       EQU   PATH
PATHACT  EQU   PMSKRB+70
PAACT    EQU   PATHACT
PBACT    EQU   PATHACT
SAACT    EQU   PATHACT
SBACT    EQU   PATHACT
SVUCBCHM EQU   PMSKRB+71
AVUCBCHM EQU   PMSKRB+72
OFFMASK3 EQU   PMSKRB+73
SWITCH   EQU   PMSKRB+74
GDPRDSW  EQU   SWITCH
TERMSW   EQU   SWITCH
TIMESW   EQU   SWITCH
SWAPSW   EQU   SWITCH
NOPTHSW  EQU   SWITCH
TIMERSET EQU   SWITCH
STAT     EQU   PMSKRB+75
NOTREADY EQU   STAT
UCBSRDY  EQU   STAT
PMSKRC   EQU   PMSKWORK+176
PMSKSRB  EQU   PMSKRC
PMSKIOSB EQU   PMSKRC+44
I256C    EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTCSD   EQU   CVTS01+312
CVTPCCAT EQU   CVTS01+416
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
IOCOMPTR EQU   CVTIXAVL
IOSATTSC EQU   IOSIPIB
IOSWTOWA EQU   IOSIPIB
IOSPCISC EQU   IOSIPIB
UCBOBS01 EQU   UCBDEV
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBBASE  EQU   UCBOBS01+16
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00015 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBCTCAD EQU   UCBOBS08
UCBCTCF1 EQU   UCBOBS08+4
UCBOBS09 EQU   UCBDEV
ASCBPTR  EQU   PSAAOLD
PSARSVTE EQU   PSARSVT
IOSENSE  EQU   IOSSNS
IOSENSE0 EQU   IOSENSE
IOSNS0B0 EQU   IOSENSE0
IOSNS0B1 EQU   IOSENSE0
IOSENSE1 EQU   IOSENSE+1
IOSNS1B1 EQU   IOSENSE1
IOSNS1B2 EQU   IOSENSE1
FLC      EQU   PSA
*                                      START UNREFERENCED COMPONENTS
IOSNS1B7 EQU   IOSENSE1
IOSNS1B6 EQU   IOSENSE1
IOSNS1B5 EQU   IOSENSE1
IOSNS1B4 EQU   IOSENSE1
IOSNS1B3 EQU   IOSENSE1
IOSNS1B0 EQU   IOSENSE1
IOSNS0B7 EQU   IOSENSE0
IOSNS0B6 EQU   IOSENSE0
IOSNS0B5 EQU   IOSENSE0
IOSNS0B4 EQU   IOSENSE0
IOSNS0B3 EQU   IOSENSE0
IOSNS0B2 EQU   IOSENSE0
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBRV082 EQU   UCBCTCF1
UCBRV081 EQU   UCBCTCF1
UCBRV080 EQU   UCBCTCF1
UCBRV079 EQU   UCBCTCF1
UCBRV078 EQU   UCBCTCF1
UCBRV077 EQU   UCBCTCF1
UCBRV076 EQU   UCBCTCF1
UCBCTC80 EQU   UCBCTCF1
UCBCTCAL EQU   UCBCTCAD
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00015
UCBSKPFG EQU   @NM00015
UCBRIPND EQU   @NM00015
UCBRTIAC EQU   @NM00015
UCBRSV79 EQU   @NM00015
UCBRSV78 EQU   @NM00015
UCBRSV77 EQU   @NM00015
UCBOLTEP EQU   @NM00015
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBDQDSP EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00014 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRESVP EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVOLI  EQU   UCBOBS01+4
UCBVTOC  EQU   UCBOBS01
IOSPCIWA EQU   IOSPCISC+44
IOSPCIRS EQU   IOSPCISC+8
@NM00011 EQU   IOSPCISC+4
@NM00010 EQU   IOSPCISC
IOSWRNDR EQU   IOSWTOWA+4
IOSWTOPT EQU   IOSWTOWA+3
IOSWTOCP EQU   IOSWTOWA+2
IOSWTOCH EQU   IOSWTOWA
IOSATTWA EQU   IOSATTSC+40
@NM00009 EQU   IOSATTSC+24
IOSATTSN EQU   IOSATTSC
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
PPLAREA  EQU   PMSKRB+80
PMSKRSVB EQU   PMSKRB+76
@NM00101 EQU   STAT
SVUCBSPB EQU   SVUCBCHM
SVUCBPPB EQU   SVUCBCHM
SVUCBSPA EQU   SVUCBCHM
SVUCBPPA EQU   SVUCBCHM
FSB      EQU   SAMASK
FB       EQU   SAMASK
FSA      EQU   SAMASK
FA       EQU   SAMASK
PMSKRSVA EQU   PMSKRB+56
SECUA    EQU   SECADDR+1
PRAUA    EQU   PRADDR+1
RSVD     EQU   ESTAELST+13
FLAG2    EQU   ESTAELST+12
TCBADDR  EQU   ESTAELST+8
PARMLST  EQU   ESTAELST+4
RTNADDR  EQU   ESTAELST+1
FLAG1    EQU   ESTAELST
@NM00100 EQU   CPUMASK
IPIBEND  EQU   IPIB+44
IPIBASCB EQU   IPIB+40
IPIBLNK  EQU   IPIB+36
IPIBPSQ  EQU   IPIB+32
IPIBPIRL EQU   IPIB+28
IPIBDVRU EQU   IPIB+24
IPIBSRB  EQU   IPIB+16
IPIBARG  EQU   IPIB+12
IPIBECB  EQU   IPIB+8
IPIBCNT  EQU   IPIB+4
@NM00099 EQU   IPIB+3
@NM00098 EQU   IPIBFLG1
IPIBDQ   EQU   IPIBFLG1
IPIBDVID EQU   IPIB+1
@NM00097 EQU   IPIBOPT
IPIBOTCB EQU   IPIBOPT
IPIBREL  EQU   IPIBOPT
IPIBPOST EQU   IPIBOPT
IPIBRBP  EQU   IPIBOPT
IPIBTASK EQU   IPIBOPT
IPIBMEM  EQU   IPIBOPT
PPLEND   EQU   PPL+16
PPLASID  EQU   PPL+14
@NM00096 EQU   PPL+13
@NM00095 EQU   PPLOPT2
PPLBSS   EQU   PPLOPT2
PPLTSKM  EQU   PPLOPT2
PPLOTCB  EQU   PPLOPT2
PPLVC    EQU   PPLOPT2
PPLMEM   EQU   PPLOPT2
@NM00094 EQU   PPLOPT2
PPLCAN   EQU   PPLOPT2
PPLPIRLA EQU   PPLPIRL+1
PPLTCBA  EQU   PPLTCB+1
PPLCC    EQU   PPLTCB
PPLEXR   EQU   PPLOPT1
PPLTASK  EQU   PPLOPT1
PPLRB    EQU   PPLOPT1
@NM00093 EQU   PPLOPT1
PPLREL   EQU   PPLOPT1
PPLPOST  EQU   PPLOPT1
VOIEND   EQU   VOID+12
VOIEXTNT EQU   VOID+8
VOIRSTR  EQU   VOID+4
@NM00092 EQU   SRB+40
@NM00091 EQU   SRB+38
SRBPRIOR EQU   SRB+37
SRBPKF   EQU   SRB+36
SRBSAVE  EQU   SRB+32
SRBRMTR  EQU   SRB+24
SRBEP    EQU   SRB+20
SRBPTCB  EQU   SRBFLC+4
SRBPASID EQU   SRBFLC+2
SRBCPAFF EQU   SRBFLC
SRBASCB  EQU   SRB+8
SRBFLNK  EQU   SRB+4
SRBID    EQU   SRB
@NM00090 EQU   SDWA+512
@NM00089 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
@NM00088 EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00087 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00086 EQU   SDWADDAT+3
@NM00085 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00084 EQU   SDWADDAT+1
@NM00083 EQU   SDWASDAT
SDWAQQS  EQU   SDWASDAT
SDWACBS  EQU   SDWASDAT
SDWAGTF  EQU   SDWASDAT
SDWASWA  EQU   SDWASDAT
SDWALSQA EQU   SDWASDAT
SDWASQA  EQU   SDWASDAT
SDWANUC  EQU   SDWASDAT
@NM00082 EQU   SDWADUMP+2
@NM00081 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00080 EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWAREXN EQU   SDWARECP+16
SDWACSCT EQU   SDWARECP+8
SDWAMODN EQU   SDWARECP
@NM00079 EQU   SDWA+290
SDWAASID EQU   SDWA+288
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00078 EQU   SDWAACF3
@NM00077 EQU   SDWAACF2
@NM00076 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00075 EQU   SDWAACF2
SDWALCPU EQU   SDWACPUA+2
@NM00074 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
@NM00073 EQU   SDWA+239
@NM00072 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
@NM00071 EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
SDWACLUP EQU   SDWAERRD
@NM00070 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAPERC EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00069 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWAMCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00068 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00067 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00066 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00065 EQU   SDWAINC2
@NM00064 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00063 EQU   SDWAILC2
@NM00062 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00061 EQU   SDWANXT2
@NM00060 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00059 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00058 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00057 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00056 EQU   SDWAINC1
@NM00055 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00054 EQU   SDWAILC1
@NM00053 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00052 EQU   SDWANXT1
@NM00051 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00050 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00049 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00048 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00047 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00046 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00045 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
SDWACMPC EQU   SDWAABCC+1
@NM00044 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00043 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAREQ  EQU   SDWACMPF
PCCAT00P EQU   PCCAVT
@NM00018 EQU   PCCA+512
PCCARV36 EQU   PCCA+380
PCCARV35 EQU   PCCA+378
PCCARV01 EQU   PCCA+377
PCCACPUM EQU   PCCA+376
PCCARV63 EQU   PCCA+372
PCCARV62 EQU   PCCA+368
PCCARV61 EQU   PCCA+364
PCCARV60 EQU   PCCA+360
PCCARV59 EQU   PCCA+356
PCCARV58 EQU   PCCA+352
PCCARV57 EQU   PCCA+348
PCCARV56 EQU   PCCA+344
PCCARV55 EQU   PCCA+340
PCCARV54 EQU   PCCA+336
PCCALOGA EQU   PCCA+332
PCCACHID EQU   PCCA+324
PCCACHSV EQU   PCCA+312
PCCARV79 EQU   PCCACHF4
PCCARV78 EQU   PCCACHF4
PCCARV77 EQU   PCCACHF4
PCCARV76 EQU   PCCACHF4
PCCARV75 EQU   PCCACHF4
PCCARV74 EQU   PCCACHF4
PCCARV73 EQU   PCCACHF4
PCCARV72 EQU   PCCACHF4
PCCARV71 EQU   PCCACHF3
PCCARV70 EQU   PCCACHF3
PCCARV69 EQU   PCCACHF3
PCCARV68 EQU   PCCACHF3
PCCARV67 EQU   PCCACHF3
PCCARV66 EQU   PCCACHF3
PCCARV65 EQU   PCCACHF3
PCCARV64 EQU   PCCACHF3
PCCACF28 EQU   PCCACHF2
PCCACF27 EQU   PCCACHF2
PCCACF26 EQU   PCCACHF2
PCCACF25 EQU   PCCACHF2
PCCACF24 EQU   PCCACHF2
PCCACF23 EQU   PCCACHF2
PCCACF22 EQU   PCCACHF2
PCCACF21 EQU   PCCACHF2
PCCACF18 EQU   PCCACHF1
PCCACF17 EQU   PCCACHF1
PCCACF16 EQU   PCCACHF1
PCCACF15 EQU   PCCACHF1
PCCACF14 EQU   PCCACHF1
PCCACF13 EQU   PCCACHF1
PCCACF12 EQU   PCCACHF1
PCCACF11 EQU   PCCACHF1
PCCARV05 EQU   PCCA+306
PCCACHPB EQU   PCCA+305
PCCALGP2 EQU   PCCA+304
PCCALGP1 EQU   PCCA+303
PCCALOGL EQU   PCCA+302
PCCARV80 EQU   PCCA+300
PCCACHW2 EQU   PCCA+296
PCCACHW1 EQU   PCCA+292
PCCAIOSI EQU   PCCA+291
PCCACNRB EQU   PCCACHRB
PCCACCVB EQU   PCCACHRB
PCCACSNB EQU   PCCACHRB
PCCARV52 EQU   PCCACHRB
PCCACHIB EQU   PCCACHRB
PCCACTIB EQU   PCCACHRB
PCCACINB EQU   PCCACHRB
PCCACSIB EQU   PCCACHRB
PCCARV51 EQU   PCCACHS2
PCCARV50 EQU   PCCACHS2
PCCACCRA EQU   PCCACHS2
PCCACURC EQU   PCCACHS2
PCCACNLG EQU   PCCACHS2
PCCACMOD EQU   PCCACHS2
PCCACALT EQU   PCCACHS2
PCCACIOR EQU   PCCACHS2
PCCARV47 EQU   PCCACHS1
PCCACUCB EQU   PCCACHS1
PCCACIBC EQU   PCCACHS1
PCCACAND EQU   PCCACHS1
PCCACNLS EQU   PCCACHS1
PCCACFRR EQU   PCCACHS1
PCCACNRE EQU   PCCACHS1
PCCACCMP EQU   PCCACHS1
PCCACSEQ EQU   PCCACHTS
PCCACDIN EQU   PCCACHTS
PCCARV44 EQU   PCCACHTS
PCCARV43 EQU   PCCACHTS
PCCACTEC EQU   PCCACHTS
PCCACDAV EQU   PCCACHVA
PCCACCHV EQU   PCCACHVA
PCCACCMD EQU   PCCACHVA
PCCACUNS EQU   PCCACHVA
PCCACSQV EQU   PCCACHVA
PCCARV42 EQU   PCCACHVA
PCCARV41 EQU   PCCACHVA
PCCACITF EQU   PCCACHVA
PCCARV40 EQU   PCCACHBL
PCCARV39 EQU   PCCACHBL
PCCARV38 EQU   PCCACHBL
PCCACCUE EQU   PCCACHBL
PCCACSTG EQU   PCCACHBL
PCCACSCU EQU   PCCACHBL
PCCACCHA EQU   PCCACHBL
PCCACCPU EQU   PCCACHBL
PCCACNOR EQU   PCCACHPF
PCCACCNT EQU   PCCACHPF
PCCACSNS EQU   PCCACHPF
PCCARV37 EQU   PCCACHPF
PCCACHIO EQU   PCCACHPF
PCCACTIO EQU   PCCACHPF
PCCACINT EQU   PCCACHPF
PCCACSIO EQU   PCCACHPF
PCCACHUB EQU   PCCAWERP
PCCACHEL EQU   PCCA+168
PCCALRBR EQU   PCCA+164
PCCALRBV EQU   PCCA+160
PCCAPWAR EQU   PCCA+156
PCCAPWAV EQU   PCCA+152
PCCAEMSA EQU   PCCAEMSB+12
PCCAEMSE EQU   PCCAEMSB+8
PCCAEMSP EQU   PCCAEMSB+4
PCCARMS  EQU   PCCARMSB
PCCARV34 EQU   PCCARMSB
PCCARV33 EQU   PCCARMSB
PCCARV32 EQU   PCCARMSB
PCCARV31 EQU   PCCARMSB
PCCARV30 EQU   PCCARMSB
PCCARV29 EQU   PCCARMSB
PCCARV28 EQU   PCCARMSB
PCCARV27 EQU   PCCAEMS3
PCCARV26 EQU   PCCAEMS3
PCCARV25 EQU   PCCAEMS3
PCCARV24 EQU   PCCAEMS3
PCCARV23 EQU   PCCAEMS3
PCCARV22 EQU   PCCAEMS3
PCCARV21 EQU   PCCAEMS3
PCCARV20 EQU   PCCAEMS3
PCCARV19 EQU   PCCAEMS2
PCCARV18 EQU   PCCAEMS2
PCCARV17 EQU   PCCAEMS2
PCCARV16 EQU   PCCAEMS2
PCCARV15 EQU   PCCAEMS2
PCCARV14 EQU   PCCAEMS2
PCCARV13 EQU   PCCAEMS2
PCCARV12 EQU   PCCAEMS2
PCCARV11 EQU   PCCARISP
PCCARV10 EQU   PCCARISP
PCCARV09 EQU   PCCARISP
PCCARV08 EQU   PCCARISP
PCCARV07 EQU   PCCARISP
PCCARV06 EQU   PCCARISP
PCCASERL EQU   PCCARISP
PCCAPARL EQU   PCCARISP
PCCARPB  EQU   PCCA+132
PCCACTIN EQU   PCCAINTE
PCCANFIN EQU   PCCAINTE
PCCANUIN EQU   PCCAINTE
PCCACTCC EQU   PCCACCE
PCCANFCC EQU   PCCACCE
PCCANUCC EQU   PCCACCE
PCCACTTD EQU   PCCATODE
PCCANFTD EQU   PCCATODE
PCCANUTD EQU   PCCATODE
PCCARV04 EQU   PCCATMFL
PCCARV03 EQU   PCCATMFL
PCCARV02 EQU   PCCATMFL
PCCAMINT EQU   PCCATMFL
PCCAMCC  EQU   PCCATMFL
PCCAVKIL EQU   PCCATMFL
PCCASYNC EQU   PCCATMFL
PCCAINIT EQU   PCCATMFL
PCCARV9E EQU   PCCA+124
PCCARV9D EQU   PCCA+120
PCCARV9C EQU   PCCA+116
PCCARV9B EQU   PCCA+112
PCCARV9A EQU   PCCA+108
PCCARV99 EQU   PCCA+104
PCCARV98 EQU   PCCA+100
PCCARV97 EQU   PCCA+96
PCCARV96 EQU   PCCA+92
PCCARV95 EQU   PCCA+88
PCCARV94 EQU   PCCA+84
PCCARV93 EQU   PCCA+80
PCCARV92 EQU   PCCA+76
PCCARV91 EQU   PCCA+72
PCCARV90 EQU   PCCA+68
PCCARV89 EQU   PCCA+64
PCCARV88 EQU   PCCA+60
PCCARV87 EQU   PCCA+56
PCCARV86 EQU   PCCA+52
PCCARV85 EQU   PCCA+48
PCCARV84 EQU   PCCA+44
PCCARV83 EQU   PCCA+40
PCCARV82 EQU   PCCA+36
PCCARV81 EQU   PCCA+32
PCCAPSAR EQU   PCCA+28
PCCAPSAV EQU   PCCA+24
PCCATQEP EQU   PCCA+20
PCCACPID EQU   PCCA+4
PCCAPCCA EQU   PCCA
@NM00017 EQU   CSD+160
CSDMASK  EQU   CSD+128
CSDUCNT  EQU   CSD+124
CSDTCNT  EQU   CSD+120
CSDGDTOD EQU   CSD+116
CSDGDINT EQU   CSD+112
CSDGDCC  EQU   CSD+108
CSDDDRCT EQU   CSD+106
CSDRV044 EQU   CSD+104
CSDMAFF  EQU   CSD+24
CSDRV038 EQU   CSDFLAGS
CSDRV037 EQU   CSDFLAGS
CSDRV036 EQU   CSDFLAGS
CSDRV035 EQU   CSDFLAGS
CSDRV034 EQU   CSDFLAGS
CSDRV033 EQU   CSDFLAGS
CSDRV032 EQU   CSDFLAGS
CSDMP    EQU   CSDFLAGS
CSDACR   EQU   CSD+22
CSDMF1CP EQU   CSD+20
CSDRV043 EQU   CSD+16
CSDRV030 EQU   CSDSCFL4
CSDRV029 EQU   CSDSCFL4
CSDRV028 EQU   CSDSCFL4
CSDRV027 EQU   CSDSCFL4
CSDRV026 EQU   CSDSCFL4
CSDRV025 EQU   CSDSCFL4
CSDRV024 EQU   CSDSCFL4
CSDRV023 EQU   CSDSCFL4
CSDRV022 EQU   CSDSCFL3
CSDRV021 EQU   CSDSCFL3
CSDRV020 EQU   CSDSCFL3
CSDRV019 EQU   CSDSCFL3
CSDRV018 EQU   CSDSCFL3
CSDRV017 EQU   CSDSCFL3
CSDRV016 EQU   CSDSCFL3
CSDRV015 EQU   CSDSCFL3
CSDRV014 EQU   CSDSCFL2
CSDRV013 EQU   CSDSCFL2
CSDRV012 EQU   CSDSCFL2
CSDRV011 EQU   CSDSCFL2
CSDRV010 EQU   CSDSCFL2
CSDRV009 EQU   CSDSCFL2
CSDRV008 EQU   CSDSCFL2
CSDRV007 EQU   CSDSCFL2
CSDRV006 EQU   CSDSCFL1
CSDRV005 EQU   CSDSCFL1
CSDRV004 EQU   CSDSCFL1
CSDRV003 EQU   CSDSCFL1
CSDRV002 EQU   CSDSCFL1
CSDRV001 EQU   CSDSCFL1
CSDSYSND EQU   CSDSCFL1
CSDRV042 EQU   CSDSCFL1
CSDCPUOL EQU   CSD+10
CSDSAFF  EQU   CSDCPUAL
CSDCHAD  EQU   CSD+6
CSDCPUJS EQU   CSD+4
CSDCSD   EQU   CSD
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBLGCB EQU   ASCB+180
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBCMSB EQU   ASCB+132
ASCBCMSF EQU   ASCB+128
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBQSVC EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSM  EQU   ASCB+52
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBLSLQ EQU   ASCB+24
ASCBFSLQ EQU   ASCB+20
ASCBIOSP EQU   ASCB+16
ASCBLOCK EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBFCBPE EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBMDRBA EQU   UCBMDRBF+1
UCBRV075 EQU   UCBMDRBF
UCBRV074 EQU   UCB3800X+32
UCBIMAGE EQU   UCB3800X+28
UCBFCBNM EQU   UCB3800X+24
UCBCHAR4 EQU   UCB3800X+20
UCBCHAR3 EQU   UCB3800X+16
UCBCHAR2 EQU   UCB3800X+12
UCBCHAR1 EQU   UCB3800X+8
UCBCGMID EQU   UCB3800X+4
UCBBRSTA EQU   UCBACTIV
UCBRV063 EQU   UCBACTIV
UCBRV062 EQU   UCBACTIV
UCBRV061 EQU   UCBACTIV
UCBRV060 EQU   UCBACTIV
UCBRV059 EQU   UCBACTIV
UCBRV058 EQU   UCBACTIV
UCBRV057 EQU   UCBACTIV
UCBRV050 EQU   UCB3800X+2
UCBCGMNO EQU   UCB3800X+1
UCBRV083 EQU   UCBOPTNS
UCBBRSTR EQU   UCBOPTNS
UCBRV056 EQU   UCBOPTNS
UCBRV055 EQU   UCBOPTNS
UCBRV054 EQU   UCBOPTNS
UCBRV053 EQU   UCBOPTNS
UCBRV052 EQU   UCBOPTNS
UCBRV051 EQU   UCBOPTNS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBMIHTI EQU   UCBMIHBY
UCBMIHT2 EQU   UCBMIHBY
UCBMIHT1 EQU   UCBMIHBY
UCBMIHPB EQU   UCBMIHBY
UCBMIHSF EQU   UCBMIHBY
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBERLOG EQU   UCBFLP1
UCBSWAPF EQU   UCBFLP1
UCBINHIO EQU   UCBFLP1
UCBNSWAP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00016
UCBHALI  EQU   @NM00016
UCBRSV09 EQU   @NM00016
UCBRSV08 EQU   @NM00016
UCBRSV07 EQU   @NM00016
UCBRSV06 EQU   @NM00016
UCBRSV05 EQU   @NM00016
UCBRSV04 EQU   @NM00016
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBNAME  EQU   UCBOB+13
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBSIGP  EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBMMSGP EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBDUC   EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00013 EQU   UCB
LCHEND   EQU   LCH+32
LCHPYBSY EQU   LCH+30
LCHLGBSY EQU   LCH+28
LCHRSV03 EQU   LCH+26
LCHTOTAL EQU   LCH+24
LCHRSV02 EQU   LCH+22
@NM00012 EQU   LCHFLA
LCHLKHLD EQU   LCHFLA
LCHCHCNT EQU   LCH+20
LCHRSV01 EQU   LCH+12
LCHLOCK  EQU   LCH+8
LCHLST   EQU   LCH+4
LCHFST   EQU   LCHENTRY
IOSEND   EQU   IOSB+108
IOSSKR   EQU   IOSEEKA+7
IOSSKH2  EQU   IOSSKHH+1
IOSSKH1  EQU   IOSSKHH
IOSSKCC  EQU   IOSCCHH
IOSSKBB  EQU   IOSEEKA+1
IOSSKM   EQU   IOSEEKA
IOSEEK   EQU   IOSB+92
IOSMDM   EQU   IOSB+91
IOSMDB   EQU   IOSB+90
IOSCKEY7 EQU   IOSCKEY
IOSCKEY6 EQU   IOSCKEY
IOSCKEY5 EQU   IOSCKEY
IOSCKEY4 EQU   IOSCKEY
@NM00008 EQU   IOSCKEY
IOSFMSK  EQU   IOSB+88
IOSCUDEV EQU   IOSPATH+1
@NM00007 EQU   IOSCHN
IOSPATH3 EQU   IOSCHN
IOSPATH2 EQU   IOSCHN
IOSEXP   EQU   IOSCHN
IOSRSS1B EQU   IOSB+84
IOSDIE   EQU   IOSB+68
IOSPCI   EQU   IOSB+56
IOSERP   EQU   IOSB+52
IOSPCHN  EQU   IOSB+48
IOSAPMSK EQU   IOSB+40
IOSRES4A EQU   IOSB+36
IOSSRB   EQU   IOSB+28
IOSCSWRC EQU   IOSCSW+5
IOSTSB   EQU   IOSTATUS+1
IOSCSWCA EQU   IOSCSW
IOSCC    EQU   @NM00006
IOSOPT2X EQU   IOSOPT2
IOSIGP   EQU   IOSOPT2
IOSHTP   EQU   IOSOPT2
IOSAPR   EQU   IOSOPT
IOSTSLL  EQU   IOSOPT
IOSPSLL  EQU   IOSOPT
IOSQISCE EQU   IOSOPT
IOSDEP   EQU   IOSOPT
IOSPKY7  EQU   IOSPKEY
IOSPGDPX EQU   IOSPKEY
IOSIDR   EQU   IOSPKEY
IOSLCL   EQU   IOSPKEY
@NM00005 EQU   IOSPKEY
IOSPRLVL EQU   IOSB+5
IOSPROC  EQU   IOSB+3
IOSFLC7  EQU   IOSFLC
IOSCTCNR EQU   IOSFLC
IOSRWAIT EQU   IOSFLC
IOSTP    EQU   IOSFLC
IOSCC3WE EQU   IOSFLC
IOSVERIF EQU   IOSDVALT
IOSDVMNT EQU   IOSFLC
IOSLOG   EQU   IOSFLB
IOSBDCST EQU   IOSFLB
IOSMSG   EQU   IOSFLB
IOSFLB4  EQU   IOSFLB
IOSFLB3  EQU   IOSFLB
IOSNOTRS EQU   IOSFLB
IOSSDR   EQU   IOSFLB
IOSDIESE EQU   IOSFLB
IOSIOSB  EQU   IOSFLA
IOSDOM   EQU   IOSFLA
IOSSMDB  EQU   IOSFLA
IOSSMDA  EQU   IOSFLA
IOSCCHN  EQU   IOSACHN
IOSDCHN  EQU   IOSACHN
IOCOEND  EQU   IOCOM+128
IOCPATCH EQU   IOCOM+124
IOCUCBBM EQU   IOCOM+120
IOCIOSDQ EQU   IOCOM+112
IOCIOSEQ EQU   IOCOM+108
IOCSVCF  EQU   IOCOM+104
IOCTCCW  EQU   IOCOM+100
IOCRSVTB EQU   IOCOM+96
IOCMFCNT EQU   IOCOM+92
IOCMFHK  EQU   IOCOM+88
IOCCCH   EQU   IOCOM+80
IOCASYNQ EQU   IOCOM+76
IOCLCHTB EQU   IOCOM+72
IOCATTBL EQU   IOCOM+68
IOCOMEX  EQU   IOCOM+64
IOCSYNCH EQU   IOCOM+56
IOCCATLK EQU   IOCOM+48
IOCPRGID EQU   IOCOM+44
IOCIOSCP EQU   IOCOM+40
IOCORMGT EQU   IOCOM+36
@NM00004 EQU   IOCOM+24
@NM00003 EQU   IOCOM+20
IOCINT   EQU   IOCOM+16
IOCCTBL  EQU   IOCOM+12
IOCHIO   EQU   IOCOM+8
IOCPST   EQU   IOCOM+4
IOCPGCT  EQU   IOCOM+2
IOCVOICT EQU   IOCOM
CATEND   EQU   CAT+8
CATCHID  EQU   CAT+4
CATSIOCT EQU   CAT+2
CATFLARS EQU   CATFLA
CATSOL   EQU   CATFLA
CATMCRST EQU   CATFLA
CATCCRST EQU   CATFLA
CATIORST EQU   CATFLA
CATBSY   EQU   CATFLA
CATDSABL EQU   CATFLG
CATFLG6  EQU   CATFLG
CATFLG5  EQU   CATFLG
CATNID   EQU   CATFLG
CATNCPU  EQU   CATFLG
CATNGEN  EQU   CATFLG
CATNOP   EQU   CATFLG
CATRES1  EQU   CATFLG
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00002 EQU   CVTFIX+248
@NM00001 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00042 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00041 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00040 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00039 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSAULCMS EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00038 EQU   FLCFSA
@NM00037 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00036 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00035 EQU   FLCIOA
@NM00034 EQU   FLCMCLA+15
@NM00033 EQU   FLCMCLA+14
@NM00032 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00031 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00030 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00029 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00028 EQU   FLCPER
@NM00027 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00026 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00025 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00024 EQU   FLCPIILC
@NM00023 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00022 EQU   FLCSVILC
@NM00021 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00020 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00019 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
*                                      END UNREFERENCED COMPONENTS
@RC00266 EQU   @RC00264
@RF00360 EQU   @RC00358
@RT00503 EQU   PMSKFIRT
@RT00506 EQU   PMSKRTRY
@RT00509 EQU   PMSKOFFL
@RT00518 EQU   PMSKOFFL
@RT00521 EQU   PMSKSUBT
@RT00528 EQU   PMSKOFFL
@RF00528 EQU   PMSKSUBT
@RT00548 EQU   PMSKCOMP
@RT00631 EQU   @EL00006
@RT00655 EQU   PEXIT
ESTEXIT  EQU   @EL00008
@PB00008 EQU   @EL00001
@ENDDATA EQU   *
         END   IECVIOPM,(C'PLS1747',0701,78142)
