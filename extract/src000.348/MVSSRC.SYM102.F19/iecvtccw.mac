TRAT     TITLE '    IECVTCCW -- CCW TRANSLATOR -- PROLOGUE'
***********************************************************************
*                                                                     *
* MODULE NAME = IECVTCCW                                              *
*                                                                     *
* DESCRIPTIVE NAME = CCW TRANSLATOR                                   *
*                                                                     *
* COPYRIGHT = NONE                                                    *
*                                                                     *
* STATUS = RELEASE 2 LEVEL 0                                          *
*                                                                     *
* FUNCTION --                                                         *
*    THE CCW TRANSLATOR HAS THREE MAIN FUNCTIONS. THEY ARE:           *
*    1. TO TRANSLATE VIRTUAL CHANNEL PROGRAMS TO REAL AND TO FIX      *
*    ALL DATA AREAS IN CORE FOR THE DURATION OF THE I/O EVENT.        *
*    IT CREATES A COPY OF THE VIRTUAL CHANNEL PROGRAM (PASSED         *
*    TO IT BY ONE OF THE PROCESSORS, EG EXCP) IN FIXED VIRTUAL        *
*    STORAGE AND, AFTER FIXING DATA AREAS, TRANSLATES ADDRESSES       *
*    TO REAL STORAGE LOCATIONS.                                       *
*    2. TO RE-TRANSLATE ADDRESSES FROM THE REAL CHANNEL PROGRAM       *
*    (CREATED ABOVE) TO MAP BACK INTO THE VIRTUAL CHANNEL PROGRAM.    *
*    (EG. CSW ADDRESS).                                               *
*    3. TO UNFIX DATA AREAS UPON COMPLETION OF THE I/O EVENT AND      *
*    TO GATHER ALL WORKING STORAGE TOGETHER TO BE FREED.              *
*    4. TRANSLATE A SINGLE ADDRESS IN THE CCW CHAIN FROM VIRTUAL      *
*    CHAIN TO REAL CHAIN.                                             *
*                                                                     *
* NOTES = PATCH AREA ADDRESS - PATCH                                  *
*                                                                     *
*    DEPENDENCIES = NONE                                              *
*                                                                     *
*    RESTRICTIONS = NONE                                              *
*                                                                     *
*    REGISTER CONVENTIONS = 0 - REG0 - PARAMETER REGISTER 0           *
*                           1 - REG1 - PARAMETER REGISTER 1           *
*                           2 - REG2 - PARAMETER REGISTER 2           *
*                           3 - BASREG - BASE REGISTER FOR MODULE     *
*                           4 - UCBREG - UCB ADDRESS REGISTER         *
*                           5 - BEBREG - BEB ADDRESS BASE             *
*                           6 - WKREG1 - UTILITY REGISTER             *
*                           7 - WKREG2 - UTILITY REGISTER             *
*                           8 - WKREG3 - UTILITY REGISTER             *
*                           9 - CCWREG - BASE FOR THE CURRENT CCW     *
*                          10 - DATARG - DATA ADDRESS FOR CURRENT CCW *
*                          11 - TCCWREG - TCCW ADDRESS BASE           *
*                          12 - FIXREG - FIX LIST ADDRESS BASE        *
*                          12 - RTNREG - RETURN ADDRESS REGISTER      *
*                          14 - REG14 - RETURN ADDRESS REGISTER       *
*                          15 - REG15 - CALLING ADDRESS REGISTER      *
*                                                                     *
* MODULE TYPE = PROCEDURE                                             *
*                                                                     *
*    PROCESSOR = ASSEMBLER                                            *
*                                                                     *
*    MODULE SIZE = HEX A84 BYTES                                      *
*                                                                     *
*    ATTRIBUTES  =                                                    *
*     REENTRANT, KEY 0, SUPERVISOR STATE, RESIDENT.                   *
*     MAY BE CALLED BY A ROUTINE RUNNING AS AN SVC OR UNDER AN SRB.   *
*                                                                     *
* ENTRY POINT = IECVTCCW                                              *
*                                                                     *
*    PURPOSE = TRANSLATION ENTRY POINT. TCCWOPTN,A BYTE IN            *
*              THE TCCW BLOCK DESCRIBES THE WORK TO BE DONE.          *
*                                                                     *
*    LINKAGE =                                                        *
*      REGISTER 1 CONTAINS A POINTER TO A TCCW BLOCK SUCH THAT:       *
*         TCCWOPTN - 00 MEANS TRANSLATE CCWS AND UCB,TCB,BEB,         *
*                       PGLK,FVC CONTAIN VALID INFORMATION. BEB       *
*                       AND PGLK CONTAIN POINTERS TO 160 BYTE         *
*                       BLOCKS OF UNFORMATTED CORE.                   *
*         TCCWOPTN - 04 MEANS REAL TO VIRTUAL TRANSLATION REQUEST     *
*                       ON THE ADDRESS IN REGISTER 0.                 *
*         TCCWOPTN - 08 MEANS UNFIX AND CHAIN BLOCKS OF CORE.         *
*         TCCWOPTN - 0C MEANS SECOND ENTRY TO TRANSLATOR OPTION 00.   *
*                       REGISTER 0 CONTAINS ADDRESS OF 160 BYTE       *
*                       BLOCK OF UNFORMATTED CORE.                    *
*         TCCWOPTN - 10 MEANS VIRTUAL TO REAL SINGLE ADDRESS XLAT     *
*    REGISTER 14 CONTAINS RETURN ADDRESS.                             *
*    REGISTER 15 CONTAINS CCW TRANSLATOR ENTRY POINT.                 *
*                                                                     *
*                                                                     *
*    INPUT = TCCW                                                     *
*                                                                     *
*    OUTPUT = TRANSLATED CCW'S ATTACHED TO THE TCCW - CONTROL BLOCKS  *
*             CREATED AND ATTACHED TO THE TCCW INCLUDE THE BEB,FIX,   *
*             AND IDAL.                                               *
*                                                                     *
*    EXIT-NORMAL = REGISTER 15 CONTAINS A RETURN CODE SUCH THAT:      *
*         RETURN CODE 0 - TRANSLATION IS COMPLETED SUCCESSFULLY.      *
*                         REGISTER 1 CONTAINS THE ADDRESS OF THE      *
*                         TCCW IN WHICH THE VIRTUAL ADDRESS OF THE    *
*                         FIRST REAL CCW ADDRESS MAY BE FOUND AT      *
*                         TCCWFRC AND THE CORRESPONDING REAL ADDRESS  *
*                         OF THE SAME FIELD IS IN REGISTER 0.         *
*                         FOR OPTION 4, REGISTER 0 CONTAINS THE       *
*                         VIRTUAL ADDRESS OF THE VIRTUAL CCW.         *
*         RETURN CODE 4 - TRANSLATION ERRORS FOUND. REGISTER 1        *
*                         CONTAINS A CHAIN OF BLOCKS TO BE FREED      *
*                         THE FIRST BLOCK IN THE CHAIN IS THE TCCW    *
*                         AND TCCWOPTN DESCRIBES THE ERROR THAT       *
*                         THAT OCCURRED. OPTION 4 - ADDRESS           *
*                         PASSED WAS NOT WITHIN BOUNDARIES OF REAL    *
*                         CHANNEL PROGRAM.                            *
*         RETURN CODE 8 - PAGES HAVE BEEN UNFIXED - FREE ALL BLOCKS   *
*                         IN CHAIN OFF OF REGISTER 1.                 *
*         RETURN CODE C - REGISTER 1 CONTAINS THE ADDRESS OF TCCW     *
*                         WITH TCCWOPTN SET FOR RE-ENTRY. CALLER      *
*                         IS TO GET A 160 BYTE BLOCK OF STORAGE AND   *
*                         PASS IT BACK TO THE TRANSLATOR.             *
*                                                                     *
*    EXIT-ERROR = SEE NORMAL EXIT RC=4                                *
*                                                                     *
* EXTERNAL REFERENCES = SEE BELOW                                     *
*                                                                     *
*    ROUTINES =                                                       *
*     IEAVPSIX - ROUTINE WHICH FIXES VIRTUAL STORAGE PAGES.           *
*     IEAVPSIF - ROUTINE WHICH UNFIXES VIRTUAL STORAGE PAGES.         *
*                                                                     *
*    DATA AREAS = BEB,FIX LIST,IDAL                                   *
*                                                                     *
*    CONTROL BLOCKS = TCCW                                            *
*                                                                     *
* TABLES=                                                             *
*     TCCW - TRANSLATION CONTROL BLOCK - IECDTCCW                     *
*     BEB - BEGIN END BLOCK - IECDBEB                                 *
*     FIX - FIX LIST - IECDFIX                                        *
*     IDAL - INDIRECT ADDRESS LIST - IECDIDAL                         *
*                                                                     *
* MACROS = NONE                                                       *
*                                                                     *
* CHANGE ACTIVITY =                                                   *
*    NEW MODULE FOR VS2/2                                             *
*                                                                     *
***********************************************************************
         PRINT OFF
*/*IECVTCCW: CHART */
*/* HEADER  PAGE #
*/*                    CCW TRANSLATOR
*/*                                                      PAGE # */
*/*IECVTCCW: E ENTRY FROM DRIVER */
*/* P SAVE REGS, ESTABLISH ADDRESSABILITY */
*/* P ESTABLISH TCCW BASE REGISTER */
*/* P (+0,TCCWI000,+4,TCCWR000,+8,TCCWU000,+12,TCCWG000,+16,TCCWX000)
*/*USING TCCWOPTN, BRANCH TO REQUESTED ROUTINE */
*/*TCCWG000: P LOAD POINTER TO ADDRESS TO GO TO */
*/* R GO TO ROUTINE WANTING BLOCK */
*/*TCCWI000: P STORE FIRST BEB POINTER AS CURRENT */
*/* P INITIALIZE FIRST BEB, VIRTUAL START, REAL START */
*/* P INITIALIZE FIX LIST WITH ZERO CHAIN AND FIRST ENTRY */
*/* P STORE FIRST REAL CCW POINTER IN TCCW, CURRENT REAL POINTER */
*/* P STORE CURRENT FIX ENTRY, ZERO IDAL PTR AND TIC LIST */
*/* P SET CURRENT VIRTUAL CCW TO FIRST VIRTUAL CCW */
*/* P SET NUMBER OF CCWS WHICH CAN FIX INTO A BEB, ZERO IDAL COUNT */
*/* P ZERO REMAINING FIELDS IN TCCW */
*/*TCCWS000: D (NO,TCCWM300,YES,) ANY ROOM IN BEB FOR NEXT CCW */
*/* P LOAD POINTERS TO VIRTUAL AND REAL CCWS */
*/* P INITIALIZE DATA ADDRESS REGISTER */
*/* P MOVE VIRTUAL CCW TO REAL CCW AREA */
*/* P SET NUMERIC PORTION OF COMMAND CODE AS EFFECTIVE CODE */
*/* D (NO,TCCWS020,YES,) COMMAND A TIC */
*/* P (,TCCWS260) CALCULATE AND STORE POSSIBLE REAL TIC TO ADDRESS */
*/*TCCWS020: D (NO,TCCWS040,YES,) DATA CHAINING IN PREVIOUS CCW */
*/* P MAKE EFFECTIVE CODE EQUAL TO PREVIOUS COMMAND CODE */
*/*TCCWS040: D (YES,TCCWS080,NO,) DATA ADDRESS REQUIRE XLATION */
*/* D (YES,TCCWS075,NO,) STATUS MODIFIER CCW ? */
*/* D (YES,TCCWS055,NO,) CONTROL COMMAND CCW ? */
*/* D (YES,,NO,TCCWS050) UNIT RECORD DEVICE ? */
*/* P INDICATE A CONTROL COMMAND IN REAL CCW. */
*/* D (YES,TCCWS080,NO,) 3211 DEVICE ? */
*/* D (YES,TCCWS080,NO,) 1287 DEVICE ? */
*/* D (YES,TCCWS080,NO,TCCWS070) 1288 DEVICE ? */
*/*TCCWS050: D (YES,,NO,TCCWS055) IS IT A DISPLAY COMMAND ? */
*/* D (YES,TCCWS075,NO,) 3890 DEVICE ? */
*/*TCCWS055: P INDICATE A CONTROL COMMAND IN REAL CCW. */
*/* D (YES,,NO,TCCWS070) COMMUNICA - TIONS DEVICE ? */
*/* D (YES,,NO,TCCWS080) 2955 DEVICE ? */
*/*TCCWS070: P (,TCCWS260) ZERO DATA ADDRESS. */
*/*TCCWS075: P INDICATE STATUS MODIFIER IN REAL CCW. */
*/*TCCWS080: D (NO,TCCWS100,YES,) SKIP DATA XFER BIT IN CCW ON */
*/* D (YES,TCCWS100,NO,) IS IT A WRITE COMMAND */
*/* P (,TCCWS260) SET DATA ADDRESS EQUAL TO DATA LENGTH */
*/*TCCWS100: D (NO,TCCWS120,YES,) READ BACKWARDS COMMAND */
*/* P (,TCCWS140) CALCULATE BEGINNING AND ENDING ADDRESSES OF AREA */
*/*TCCWS120: P CALC BEGINNING AND ENDING ADDRESSES OF DATA AREA */
*/*TCCWS140: D (NO,TCCWS160,YES,) DATA LENGTH ZERO */
*/* P (,TCCWS240) SET START AND END ADDRESSES THE SAME */
*/*TCCWS160: D (NO,TCCWM000,YES,) DATA AREA WITHIN BOUNDS FIXED */
*/*TCCWS200: P SAVE START AND END OF DATA ADDRESS */
*/* P TRUNCATE START AND END TO PAGE BOUNDARIES */
*/* D (YES,TCCWM400,NO,) MORE THAN ONE PAGE IN DATA AREA */
*/*TCCWS240: P (FAIL,TCCWM000,OK,) XLATE DATA ADDRESS TO REAL */
*/*TCCWS260: P INCREMENT TO NEXT REAL AND VIRTUAL CCW AREAS */
*/* P DECREMENT NO OF REAL CCW AREAS IN BEB BY ONE */
*/* D (NO,TCCWS280,YES,) WAS THIS CCW A TIC */
*/* P (,TCCWM100) STORE VIRTUAL TIC ADDR IN TCCW */
*/*TCCWS280: D (YES,TCCWS300,NO,) CHAINING IN CCW */
*/* D (YES,TCCWS300,NO,) WAS PREVIOUS CCW A STATUS MODIFIER */
*/*TCCWS290: P (,TCCWM200) SET REAL END AND VIRTUAL END IN BEB */
*/*TCCWS300: D (YES,TCCWS320,NO,) DATA CHAINING IN PREVIOUS CCW */
*/* P STORE OP-POINTER AND CCW COMMAND CODE IN TCCW */
*/*TCCWS320: D (YES,TCCWS000,NO,) DATA CHAINING */
*/* P (,TCCWS000) SET COMMAND CODE IN TCCW TO ZERO */
*/*TCCWM000: P ROUND BEGINNING AND END OF AREA TO PAGE BOUNDARIES */
*/* P SET LOW AND HIGH COMPARE ADDRESSES */
*/* P POINT TO BEGINNING OF FIX LIST */
*/*TCCWM010: P INCREMENT TO NEXT ENTRY */
*/*TCCWM015: D (YES,TCCWM030,NO,) LAST ENTRY IN FIX LIST */
*/* D (YES,TCCWM020,NO,) CONTINUATION ENTRY */
*/* D (YES,TCCWM010,NO,) NEW START LT ENTRY START */
*/* D (YES,TCCWM010,NO,TCCWS200) NEW END GT ENTRY END */
*/*TCCWM020: P (,TCCWM015) LOAD CONTINUATION POINTER */
*/*TCCWM030: P LOAD POINTER TO PAGE FIX LIST */
*/*TCCWM040: D (NO,TCCWM050,YES,) ANOTHER FIX BLOCK */
*/* P (,TCCWM040) LOAD POINTER TO NEXT BLOCK */
*/*TCCWM050: P FIND END OF FIX BLOCK */
*/* D (NO,TCCWM060,YES,) SPACE IN FIX LIST GONE */
*/* P BACK UP A FIX ENTRY AND RESET LAST ENTRY INDICATOR */
*/* P SET UP TO GET A BLOCK OF STORAGE FROM CALLER */
*/*TCCWM055: L GET 160 BYTE BLOCK */
*/* P RELOAD REGISTER CONTENTS BEFIRE GETTING THE BLOCK */
*/* P CHAIN NEW BLOCK TO CURRENT FIX LIST BLOCK */
*/* P SET CONTINUATION POINTER IN LAST BLOCK */
*/*TCCWM060: P STORE FIX ENTRY IN LIST */
*/*TCCWM062: P ACCESS EACH PAGE. */
*/*TCCWM063: P RESTORE FIX REGISTERS */
*/* P ZERO LAST ENTRY INDICATOR IN LAST BLOCK */
*/* P LOAD ADDRESS OF ECB, TCB */
*/* P SET REGISTERS FOR FIX ENTRY REGISTER TYPE */
*/* L IEAVPSIB: FIX THE PAGES IN THE FIX ENTRY */
*/* D (0,TCCWM090,N-0,) RETURN CODE */
*/* D (YES,TCCWM070,NO,) RETURN CODE 8 */
*/*TCCWM065: P SET FIX ERROR INDICATOR */
*/* P (,TCCWU000) SET END OF ENTRIES IN PREV ENTRY */
*/*TCCWM070: P GET CURRENT ENTRY IN REGISTERS */
*/* P SET INDICATOR FOR FIX PROCESS USED BY EXCP FRR */
*/*TCCWM075: P ACCESS THE PAGE IN ENTRY */
*/* P INCREMENT TO NEXT PAGE */
*/* D (NO,TCCWM075,YES,) FINISHED WITH THE ENTRY */
*/* P RESET FIX PROCESS INDICATOR */
*/* D (YES,TCCWM065,NO,) ECB POSTED IN ERROR */
*/*TCCWM090: P RESET ECB IN USE FLAG */
*/* P (,TCCWS200) INCREMENT ENTRY POINTER AND STORE IN TCCW */
*/*TCCWM100: P SET REAL END AND VIRTUAL END IN BEB */
*/* D (NO,TCCWM130,YES,) TIC TO ADDRESS ON DOUBLE WORD BDY */
*/* D (YES,TCCWM120,NO,) TIC LESS THAN START ADDRESS */
*/*TCCWM110: D (LOW,TCCWM150,EQ,TCCWM160,HI,) COMPARE TIC ADDR WITH
*/*NEXT CCW */
*/*TCCWM120: P PLACE TIC ON UNRESOLVED TIC LIST */
*/*TCCWM130: P GET THE COMMAND CODE FROM PREVIOUS CCW */
*/*TCCWM140: D (NO,TCCWM200,YES,) WAS IT A STATUS MODIFIER */
*/* P (,TCCWS000) RESET OP POINTER TO STATUS MODIFIER */
*/*TCCWM150: P (,TCCWM140) POINT TO POSSIBLE LOC OF STATUS MODIFIER */
*/*TCCWM160: D (YES,TCCWS000,N0,) ROOM FOR MORE THAN 1 CCW */
*/* P (,TCCWM305) SET NEW VIRT CCW ADDR */
*/*TCCWM200: D (NO,TCCWM900,YES,) TIC ON UNRESOLVED TIC LIST */
*/* P GET THE ADDRESS OF FIRST BEB */
*/*TCCWM210: P GET REAL ADDRESS OF REAL START */
*/* D (YES,TCCWM220,NO,) TIC ON SAME PAGE */
*/* P (,TCCWM210) GET POINTER TO NEXT BEB */
*/*TCCWM220: P CONVERT REAL ADDRESS TO VIRTUAL */
*/* P MOVE NEXT TIC ADDRESS TO TCCW */
*/* P GET TIC VIRTUAL ADDRESS */
*/* P LOAD POINTER TO FIRST BEB */
*/*TCCWM225: D (LOW,TCCWM230,NL,) TIC LESS THAN START ADDRESS */
*/* D (LOW,TCCWM260,NL,) TIC LESS THAN ENDING ADDRESS */
*/*TCCWM230: D (NO,TCCWM240,YES,) SECOND SET OF POINTERS USED */
*/* D (LOW,TCCWM240,NL,) TIC LESS THAN SECOND START ADDR */
*/* D (LOW,TCCWM250,NL,) TIC LESS THAN SECOND END ADDR */
*/*TCCWM240: D (NO,TCCWM270,YES,) ANOTHER BEB IN CHAIN */
*/* P (,TCCWM225) LOAD POINTER TO NEXT BEB IN CHAIN */
*/*TCCWM250: P ADJUST BEB POINTER TO SECOND SET OF POINTERS */
*/*TCCWM260: P GET REAL ADDRESS OF REAL START TO CALCULATE OFFSET */
*/* P (,TCCWM200) STORE REAL ADDRESS IN TIC AND SET TO TIC */
*/*TCCWM270: D (NO,TCCWM280,YES,) SECOND SET OF POINTERS AVAILABLE */
*/* D (NO,TCCWM280,YES,) ROOM FOR AT LEAST 3 CCWS LEFT */
*/* P (,TCCWM298) SET BASE UP TO SECOND PTRS , SET REAL START AND INDIC
*/* 2ND USED */
*/*TCCWM280: P SET UP TO GET A BLOCK FROM CALLER */
*/* L GET 160 BYTE BLOCK */
*/*TCCWM290: P SET UP REGS TO BEFORE GOT BLOCK */
*/*TCCWM295: P ZERO 12 WORDS OF NEW BLOCK */
*/* P CHAIN NEW BLOCK TO LAST BLOCK, SET NEW LOOP COUNT */
*/* P UPDATE POINTER TO REAL START AND STORE IT IN TCCW AND BEB */
*/*TCCWM298: P SET VIRTUAL START ADDRESS IN BEB AND TCCW */
*/* P (,TCCWS000) SET NEW CURRENT REAL ADDRESS IN TCCW AND TIC */
*/*TCCWM300: P STORE VIRTUAL ENDING ADDRESS IN BEB */
*/*TCCWM305: P STORE REAL ENDING ADDRESS IN BEB */
*/* P SAVE ENVIRONMENT ACROSS GET OF BLOCK */
*/* L GET A 160 BYTE BLOCK FROM CALLER */
*/*TCCWM310: P RESTORE ENVIRONMENT BEFORE CALL */
*/*TCCWM320: P CLEAR 12 WORDS OF NEW BLOCK */
*/* P CHAIN NEW BLOCK TO LAST ONE */
*/* P POINT TO 2ND TO LAST CCW AND INDIC 2 TICS NEEDED */
*/* D (YES,TCCWM340,NO,) STATUS MODIFIER COMMAND */
*/* P INCREMENT PTR TO NEXT CCW AND INDIC 1 TIC NEEDED */
*/*TCCWM340: P STORE PTR AS NEW REAL END PTR */
*/* P CALCULATE AND STORE NEW VIRTUAL END PTR */
*/* P SET NEW BEB AS CURRENT IN TCCW */
*/* P INITIALIZE POINTER IN NEW BEB */
*/* P (,TCCWS000) SET TIC TO NEW BEB */
*/*TCCWM400: P CALCULATE NUMBER OF IDAL WORDS REQUIRED */
*/* D (NO,TCCWM500,YES,) ENOUGH FOR THIS IDAL */
*/*TCCWM405: P SET INCREMENT TO TWO K */
*/* D (NO,TCCWM410,YES,) COMMAND A READ BACKWARDS */
*/* P CHANGE INCREMENT TO NEGATIVE */
*/* P (,TCCWM420) INTERCHANGE DATA START, END ADDRESSES AND ROUND */
*/*TCCWM410: P TRUNCATE 2 K FROM ENDING ADDRESS */
*/*TCCWM420: P SET INDIRECT ADDRESS FLAG IN CCW */
*/* P STORE IDAL REAL ADDRESS IN CCW */
*/* P LOAD POINTER TO IDAL START */
*/*TCCWM425: P TRANSLATE START ADDRESS TO REAL */
*/* P MOVE START TO IDAL AREA */
*/* P INCREMENT INDEX AND DECREMENT LOOP COUNT */
*/* D (NO,TCCWM430,YES,) READ BACKWARD COMMAND */
*/* P (,TCCWM440) ROUND RESULT UP TO END OF PAGE */
*/*TCCWM430: P TRUNCATE RESULT TO PAGE BOUNDARY */
*/*TCCWM440: D (YES,TCCWM450,NO,) START AND END ADDRESSES MATCH */
*/* P (,TCCWM425) INCREMENT BY 2 K TO DO NEXT ENTRY */
*/*TCCWM450: D (YES,,NO,TCCWM455) PIC 10 OCCUR WHILE FIXING ?*/
*/* P DECREMENT INDIRECT LOOP COUNT BY 1. */
*/*TCCWM455: P STORE INDIRECT LOOP COUNT RESULT */
*/*TCCWM455: P STORE INDIRECT LOOP COUNT RESULT */
*/* P (,TCCWS260) STORE INDIRECT RECEIVER RESULT */
*/*TCCWM500: P SAVE ENVIRONMENT ACROSS GET */
*/* L GET A 160 BYTE BLOCK FROM CALLER */
*/*TCCWM510: P SET ADDRESS OF IDAL LIST POINTER */
*/*TCCWM520: D (YES,TCCWM530,NO,) IS CHAIN POINTER ZERO */
*/* P (,TCCWM520) LOAD POINTER TO CHAIN POINTER */
*/*TCCWM530: P STORE NEW CHAIN POINTER */
*/* P ZERO CHAIN POINTER IN NEW BLOCK */
*/* P SET NUMBER OF ENTRIES IN NEW BLOCK */
*/* P RESTORE ENVIRONMENT BEFORE GET */
*/* P (,TCCWM405) INITIALIZE NUMBER OF ENTRIES REGISTER */
*/*TCCWR000: P ZERO HIGH BYTE OF ADDRESS TO BE COMPARED */
*/* P LOAD POINTER TO FIRST BEB IN CHAIN */
*/*TCCWR100: D (LOW,TCCWR200,NL,) CCW ADDR LESS THAN REAL START */
*/* D (NH,TCCWR400,HIGH,) CCW ADDRESS GREATER THAN END ADDR */
*/* D (NO,TCCWR200,YES,) SECOND SET OF POINTERS USED */
*/* D (NH,TCCWR300,HIGH,) CCW ADDR GREATER THAN SECOND END */
*/*TCCWR200: P GET POINTER TO NEXT BEB IN CHAIN */
*/* D (YES,TCCWR100,NO,TCCWRC4) ANOTHER BEB */
*/*TCCWR300: P INCREMENT TO SECOND SET OF POINTERS */
*/*TCCWR400: P CALCULATE OFFSET INTO BLOCK */
*/* P ADD THAT TO VIRTUAL START TO GET VIRTUAL CCW ADDRESS */
*/* P (,TCCWE0R0) PLACE ADDRESS IN PARAMETER REGISTER */
*/*TCCWU000: P GET FIX LIST POINTER FROM TCCW */
*/* P ZERO ECB POINTER */
*/* D (NO,TCCWU050,YES,) ECB IN USE */
*/* P LOAD ADDRESS OF THE ECB */
*/*TCCWU050: D (NO,TCCWU500,YES,) ANY FIX LIST ENTRIES */
*/* P SET UP FOR UNFIX */
*/* L IEAVPSIB: UNFIX ENTRIES IN FIX LIST */
*/* D (NO,TCCWU500,YES,) WAS ECB REQUIRED */
*/* P SET ONE PAGE INCREMENT REGISTER */
*/*TCCWU100: D (YES,TCCWU400,NO,) CONTINUATION POINTER */
*/*TCCWU200: P LOAD ADDRESS OF FIRST PAGE */
*/*TCCWU300: P ACCESS THE PAGE */
*/* P INCREMENT TO NEXT PAGE IN ENTRY */
*/* D (NO,TCCWU300,YES,) END OF ENTRY */
*/* D (YES,TCCWU500,NO,) LAST ENTRY */
*/* P (,TCCWU100) INCREMENT TO NEXT ENTRY */
*/*TCCWU400: P (,TCCWU200) LOAD CONTINUATION POINTER */
*/*TCCWU500: P MOVE IDAL BLOCKS TO FREE CHAIN */
*/* S TCCWU900: SEARCH FOR END OF CHAIN */
*/* P MOVE FIX LIST TO END OF IDAL CHAIN */
*/* S TCCWU900: SEARCH FOR END OF CHAIN */
*/* P MOVE BEBS TO END OF FIX CHAIN */
*/* D (YES,TCCWRC4,NO,TCCWRC8) ERROR OCCUR IN TRANSLATION */
*/*TCCWU900: D (YES,%HERE,NO,) END OF CHAIN */
*/* P (,TCCWU900) GET POINTER TO NEXT BLOCK */
*/*%HERE: R RETURN TO MAIN ROUTINE */
*/*TCCWX000: P ZERO HIGH BYTE OF ADDRESS TO BE COMPARED */
*/* P LOAD ADDRESS OF FIRST BEB */
*/*TCCWX100: D (LOW,TCCWX200,NL,) CCW ADDRESS LESS THAN VIRT START */
*/* D (LOW,TCCWX400,NL,) CCW ADDR LESS THAN END ADDR */
*/* D (NO,TCCWX200,YES,) SECOND SET OF POINTERS USED */
*/* D (LOW,TCCWX300,NL,) CCW ADDR LESS THAN 2ND END */
*/*TCCWX200:P LOAD POINTER TO NEXT BEB */
*/* D (YES,TCCWX100,NO,) ANOTHER BEB IN CHAIN */
*/* P (,TCCWRC4) SET TRANSLATE ERROR */
*/*TCCWX300: P INCREMENT TO SECOND POINTERS */
*/*TCCWX400: P CALCULATE OFFSET INTO BLOCK */
*/* P CALCULATE REAL CCW ADDR USING REAL START */
*/* P (,TCCWE0R0) PLACE ADDRESS IN PARAMETER REG */
*/*TCCWM900: P GET THE FIRST REAL CCW REAL ADDRESS IN REG 0 */
*/*TCCWE0R0: P SET OPTION BYTE TO ZERO SAYING OK */
*/* P (,TCCWEXIT) ZERO REG 15 FOR RETURN CODE */
*/*TCCWRC4: P (,TCCWEXIT) SET RETURN CODE 4 IN REG 15 */
*/*TCCWRC8: P (,TCCWEXIT) SET RETURN CODE 8 IN REG 15 */
*/*TCCWGETM: P SET RETURN CODE 12 IN REG 15 */
*/* P SET GETMAIN RETURN IN TCCWOPTN */
*/*TCCWEXIT: P RESTORE REGISTERS 1 - 14 */
*/* R RETURN TO CALLER */
*/*IECVTCFR: E ENTRY FROM EXCP'S FRR */
*/* D (YES,TCCWM065,NO,) WAS FIRST PAGE INVALID ? */
*/* D (YES,TCCWM065,NO,) KEY ZERO CALLER ? */
*/* P TURN ON PIC 10 FLAG. */
*/* P STORE PIC 10 ADDRESS AS HIGH ADDRESS IN FIX LIST. */
*/* P STORE NEW HIGH COMPARE ADDRESS. */
*/* P (,TCCWM063) GET HIGHEST VALID ADDRESS IN WKREG2. */
         PRINT ON
         TITLE '    IECVTCCW -- CCW TRANSLATOR -- DSECTS'
         IECDTCCW
         EJECT
         IECDBEB
         EJECT
         IECDFIX
         EJECT
         IECDIDAL
         EJECT
         IKJTCB
         EJECT
UCB      DSECT
         IEFUCBOB
         EJECT
CCWD     DSECT
***********************************************************************
*                                                                     *
* THIS DSECT DESCRIBES THE CCW AND ITS USE. THE FLAGS ARE NAMED       *
* SO THEY MAY BE REFERENCED IN CODE.                                  *
*                                                                     *
***********************************************************************
         SPACE 2
CCW      DS    0D                  CCW IS A DOUBLE WORD
CCWCMD   DS    X                   COMMAND CODE
CCWRITE  EQU   X'01'               WRITE COMMAND
CCWRDBK  EQU   X'0C'               READ BACKWARDS COMMAND
TIC      EQU   X'08'               TIC COMMAND
CCWNOP   EQU   X'03'               NO-OP COMMAND               @ZA05348
         SPACE 1
CCWDATA  DS    AL3                 DATA ADDRESS
CCWFLAG  DS    XL1                 FLAGS
*        FLAG BITS FOR CHAINING
CCWDC    EQU   X'80'               DATA CHAINING
CCWCC    EQU   X'40'               COMMAND CHAINING
CCWSKIP  EQU   X'10'               SKIP BIT
CCWIDA   EQU   X'04'               INDIRECT ADDRESS LIST USED
         SPACE 1
CCWUNU   DS    XL1                 UNUSED BY CHANNEL, USED FOR
*                                  TRANSLATION FLAGS
*        TRANSLATION FLAGS
CCWSTATM EQU   X'80'               STATUS MODIFIER COMMAND
CCWCTRLC EQU   X'40'               CONTROL COMMAND
         SPACE 1
CCWCNT   DS    XL2                 NUMBER OF BYTES TRANSFERED
CCWLENG  EQU   8                   CCW LENGTH
         TITLE '    IECVTCCW -- CCW TRANSLATOR -- EQUATES'
***********************************************************************
*                                                                     *
*                        REGISTER DEFINITIONS                         *
*                                                                     *
***********************************************************************
         SPACE 2
REG0     EQU   0                   PARAMETER REGISTER 0
REG1     EQU   1                   PARAMETER REGISTER 1
REG2     EQU   2                   PARAMETER REGISTER 2
BASREG   EQU   3                   BASE REGISTER FOR MODULE
UCBREG   EQU   4                   UCB ADDRESS REGISTER
BEBREG   EQU   5                   BEB ADDRESS BASE
WKREG1   EQU   6                   UTILITY REGISTER
WKREG2   EQU   7                   UTILITY REGISTER
WKREG3   EQU   8                   UTILITY REGISTER
CCWREG   EQU   9                   BASE FOR THE CURRENT CCW
DATARG   EQU   10                  DATA ADDRESS FOR CURRENT CCW
TCCWREG  EQU   11                  TCCW ADDRESS BASE
FIXREG   EQU   12                  FIX LIST ADDRESS BASE
RTNREG   EQU   13                  RETURN ADDRESS REGISTER
REG14    EQU   14                  RETURN ADDRESS REGISTER
REG15    EQU   15                  CALLING ADDRESS REGISTER
         SPACE 4
*        MISCELLANEOUS EQUATES
C0       EQU   0                   DISPLACEMENT OF 0
C1       EQU   1                   DISPLACEMENT OF 1
C2       EQU   2                   DISPLACEMENT OF 2
C3       EQU   3                   DISPLACEMENT OF 3
C4       EQU   4                   DISPLACEMENT OF 4
C5       EQU   5                   DISPLACEMENT OF 5
C6       EQU   6                   DISPLACEMENT OF 6           @ZA16175
C8       EQU   8                   DISPLACEMENT OF 8
C12      EQU   12                  DISPLACEMENT OF 12
C16      EQU   16                  DISPLACEMENT OF 16
C30      EQU   30                  DISPLACEMENT OF 30
C31      EQU   31                  DISPLACEMENT OF 31
C32      EQU   32                  DISPLACEMENT OF 32          @ZA16169
C48      EQU   48                  DISPLACEMENT OF 48
         EJECT
F0       EQU   X'F0'               MASK OF F0
FC       EQU   X'FC'               MASK OF FC                  @ZA08128
FF       EQU   X'FF'               MASK OF FF
HIORDBYT EQU   8                   MASK FOR HIGH ORD BYTE OF REG
LORD3BYT EQU   7                   MASK FOR ADDRESS PORTION OF REG
DBLWD    EQU   7                   MASK TO TEST FOR DOUBLE WORD BDY
TWOKEX   EQU   11                  SHIFT VALUE FOR TWO K
TWOK     EQU   2048                VALUE OF TWO K
X00      EQU   X'00'               ZERO MASK USED TO ACCESS PG @ZA01894
         SPACE 2
******** UNIT RECORD DEVICE TYPE EQUATES ********************* @ZA12710
UR3211   EQU   X'09'               3211 PRINTER                @ZA12710
UR3890   EQU   X'16'               3890 MICR                   @ZA12710
UR3886   EQU   X'17'               3886 OPTICAL CHAR READER    @ZA12710
UR3895   EQU   X'19'               3895 PRINTER                @ZA16170
UR1287   EQU   X'1B'               1287 OPTICAL READER         @ZA12710
UR1288   EQU   X'1C'               1288 OPTICAL READER         @ZA12710
UR3851   EQU   X'42'               3851 MASS STORAGE CONTROL   @ZA12710
UR3800   EQU   X'0E'               3800 PRINTER                @ZA12710
UR3540   EQU   X'44'               3540 DISKETTE               @ZA12708
         SPACE 1                                               @ZA12710
******** COMMAND CODES IN TCCW OP TABLE THAT HAVE THE          @ZA12710
*        UNIQUE BIT SET FOR UNIT RECORD DEVICES                @ZA12710
CMD01    EQU   X'01'               WRITE   COMMAND CODE 01     @ZA16170
CMD09    EQU   X'09'               WRITE   COMMAND CODE 09     @ZA16180
CMD23    EQU   X'23'               CONTROL COMMAND CODE 23     @ZA12710
CMD33    EQU   X'33'               CONTROL COMMAND CODE 33     @ZA12710
CMD43    EQU   X'43'               CONTROL COMMANC CODE 43     @ZA12710
CMD63    EQU   X'63'               CONTROL COMMAND CODE 63     @ZA12710
CMD73    EQU   X'73'               CONTROL COMMAND CODE 73     @ZA12710
CMD83    EQU   X'83'               CONTROL COMMAND CODE 83     @ZA12710
CMDA3    EQU   X'A3'               CONTROL COMMAND CODE A3     @ZA12710
CMDB3    EQU   X'B3'               CONTROL COMMAND CODE B3     @ZA12710
CMD07    EQU   X'07'               CONTROL COMMAND CODE 07     @ZA12710
CMD27    EQU   X'27'               CONTROL COMMAND CODE 27     @ZA12710
CMD87    EQU   X'87'               CONTROL COMMAND CODE 87     @ZA12710
CMD5B    EQU   X'5B'               CONTROL COMMAND CODE 5B     @ZA12710
         SPACE 1                                               @ZA12710
TP2955   EQU   X'14'               2955 COMMUNICATION DEVICE   @ZA12710
TP3705   EQU   X'05'               3704/3705 COMMUNICATION DEV @ZA16180
UCBDVC02 EQU   X'02'               DEVICE CLASS 02             @ZA28956
         TITLE '    IECVTCCW -- CCW TRANSLATOR -- MAIN ROUTINE'
IECVTCCW CSECT
         ENTRY IECVTCFR
         USING TCCW,REG1           ADDRESSABILITY FOR TCCW
         STM   REG1,REG14,TCCWRGSV SAVE REGISTERS UPON ENTRY
         LR    BASREG,REG15        ESTABLISH BASE REGISTER
         USING IECVTCCW,BASREG     ADDRESSABILITY FOR MODULE
         DROP  REG1                DROP ADDRESSABILITY FOR TCCW
         LR    TCCWREG,REG1        ESTABLISH MAIN TCCW REGISTER
         USING TCCW,TCCWREG        RE-ESTABLISH ADDRESSABILITY FOR
*                                  TCCW BLOCK
         SPACE 2
* THIS SECTION USES THE TCCW OPTION BYTE AS AN INDEX TO DETERMINE
* THE WORK TO BE DONE.
         SPACE 1
         SR    WKREG2,WKREG2       ZERO WORK REGISTER FOR INSERT
         IC    WKREG2,TCCWOPTN     GET THE OPTION BYTE FOR BRANCH
         B     TCCWI000(WKREG2)    BRANCH ACCORDING TO OPTION BYTE
         SPACE 1
TCCWI000 EQU   *                   BRANCH VECTOR TABLE
         B     TCCWI100            0 -- CCW TRANSLATION
         B     TCCWR000            4 -- ADDRESS RE- TRANSLATION
         B     TCCWU000            8 -- UNFIX PAGES - FREE CORE
         B     TCCWG000            C -- GETMAIN RETURN
         B     TCCWX000            10--SINGLE ADDRESS TRANSLATION
         SPACE 4
         DC    CL8'IECVTCCW'       STORAGE DUMP IDENTIFIER     @ZA08754
         DC    C'&SYSDATE'         DATE                        @ZA08754
         SPACE 4
** RETURN FROM CALLER WITH ADDRESS OF A 160 BYTE BLOCK IN      @ZA16169
** REGISTER 0.  RELOAD TCCW REQUESTOR'S SAVED REGS AND RETURN  @ZA16169
** TO CONTINUE CCW TRANSLATION.                                @ZA16169
TCCWG000 EQU   *                                               @ZA16169
         LR    REG15,REG0          MOVE 160 B BLK POINTER.     @ZA16169
         SR    REG0,REG0           ZERO REGISTER.              @ZA16169
         ST    REG0,C0(REG15)      ZERO THE FIRST FOUR         @ZA16169
         ST    REG0,C4(REG15)       WORDS OF THE               @ZA16169
         ST    REG0,C8(REG15)        OBTAINED                  @ZA16169
         ST    REG0,C12(REG15)        160 BYTE BLOCK.          @ZA16169
         L     BEBREG,TCCWSAV5     RESTORE BEB REGISTER.       @ZA16169
         L     RTNREG,TCCWSAVD     RESTORE CALLERS ADDRESS.    @ZA16169
         L     UCBREG,TCCWUCB-C1   RESTORE UCB POINTER.        @ZA16169
         BR    RTNREG              RETURN TO CONTINUE          @ZA16169
         EJECT
* CCW TRANSLATOR INITIALIZATION --
*        THIS ROUTINE INITIALIZES THE TCCW, BEB AND FIX LIST FOR
*        THE CCW TRANSLATOR SECTION OF THE ROUTINE
TCCWI100 EQU   *                   INITIALIZATION CONTINUATION POINT
******** INITIALIZE BEB BLOCK                                  @ZA16169
         L     BEBREG,TCCWBEB      LOAD BEB POINTER FROM TCCW
         USING BEB,BEBREG          ADDRESSABILITY FOR BEB
         ST    BEBREG,TCCWCBEB     STORE CURRENT BEB POINTER IN TCCW
         SR    WKREG2,WKREG2       ZERO REG FOR STORE
         ST    WKREG2,BEBCHAIN     ZERO CHAIN POINTER
         ST    WKREG2,BEBFLAG      ZERO FLAG
         LA    WKREG3,BEBSCCW      GET ADDRESS OF FIRST REAL CCW
         ST    WKREG3,BEBRLST      STORE FIRST REAL CCW POINTER
         ST    WKREG2,BEBRLEN      ZERO REAL END
         MVI   TCCWFVC,C0          INITIALIZE HIGH BYTE
         ST    WKREG2,BEBVREN      ZERO VIRTUAL END
         ST    WKREG2,BEBRLST2     ZERO SECOND SET OF POINTERS
         ST    WKREG2,BEBRLEN2     *
         ST    WKREG2,BEBVRST2     *
         ST    WKREG2,BEBVREN2     *
         ST    WKREG2,BEBSCCW      ZERO FIRST CCW IN STRING
         ST    WKREG2,BEBSCCW+C4   *
         SPACE 1
******** INITIALIZE FIX BLOCK                                  @ZA16169
         L     FIXREG,TCCWFIX      GET ADDRESS OF FIX LIST
         USING FIX,FIXREG          ADDRESSABILITY TO FIX LIST
         ST    WKREG2,FIXCHAIN     ZERO CHAIN POINTER
         ST    WKREG2,FIXLSTST          AND FIRST
         ST    WKREG2,FIXLSTEN          ENTRY
         SPACE 1
******** INITIALIZE THE TCCW BLOCK                             @ZA16169
         ST    WKREG3,TCCWFRC      STORE FIRST REAL CCW IN TCCW
         ST    WKREG3,TCCWCCWR     STORE CURRENT REAL CCW POINTER
         LA    WKREG3,FIXLSTST     GET ADDR OF FIRST FIX ENTRY
         ST    WKREG3,TCCWPLKR     STORE CURRENT FIX ENTRY POINTER
         ST    WKREG2,TCCWINDA     ZERO IDAL PTR
         ST    WKREG2,TCCWTICL     ZERO TIC LIST PTR
         ST    WKREG2,TCCWINDR     INDIRECT RECEIVER
         L     WKREG3,TCCWFVC      SET UP FIRST VIRTUAL CCW    @ZA16169
         ST    WKREG3,BEBVRST      ADDRESS IN BEBVRST AND      @ZA16169
         ST    WKREG3,TCCWCCWA     IN TCCWCCWA                 @ZA16169
         MVI   TCCWMODB,C0         ZERO TRANSLATION FLAGS
         MVI   TCCWCCWL,BEBNE      SET BEB LOOP COUNT
         STH   WKREG2,TCCWINDL     ZERO IDAL COUNT AND OPBT
         ST    WKREG2,TCCWTICA     ZERO TIC ADDRESS
         ST    WKREG2,TCCWLOCA     ZERO LOW COMPARE
         ST    WKREG2,TCCWHICA     ZERO HIGH COMPARE
         ST    WKREG2,TCCWOPTR     ZERO OPBT AND OPTR
         L     UCBREG,TCCWUCB-C1   UCB ADDRESS REGISTER
         USING UCB,UCBREG          ADDRESSABILITY TO UCB
         EJECT
***********************************************************************
*                                                                     *
* CCW TRANSLATOR MAIN ROUTINE --                                      *
*        THIS ROUTINE TRANSLATES THE CCW DATA ADDRESSES TO REAL       *
*        ADDRESSES AND CREATES A REAL CCW STRING FROM THE VIRTUAL     *
*        STRING. IT DETERMINES FOR EACH CCW WHETHER THE DATA PAGES    *
*        NEED TO BE FIXED AND WHETHER AN INDIRECT ADDRESS WORD        *
*        LIST IS NECESSARY                                            *
*                                                                     *
***********************************************************************
         SPACE 1
TCCWS000 CLI   TCCWCCWL,C0         IF LOOP COUNT IS ZERO, GO GET
         BE    TCCWM300            MORE ROOM FOR CCWS
         SPACE 1
         L     WKREG3,TCCWCCWA     LOAD ADDRESS OF VIRTUAL CCW
         L     CCWREG,TCCWCCWR     LOAD ADDRESS OF REAL CCW
         L     DATARG,C0(WKREG3)   INITIALIZE DATA ADDRESS REGISTER
         LA    DATARG,C0(DATARG)   ZERO HIGH ORDER BYTE
         USING CCWD,CCWREG         ADDRESSABILITY FOR CCW FORMAT
         MVC   CCW,C0(WKREG3)      MOVE CCW TO REAL CHANNEL PROGRAM
         MVI   CCWUNU,C0           ZERO UNUSED BYTE
         MVN   TCCWEFOP,CCWCMD     SET COMMAND CODE AS EFFECTIVE
         SR    WKREG2,WKREG2       ZERO REGISTER FOR IC
         IC    WKREG2,CCWCMD       PICK UP COMMAND CODE FOR LATER CMPR
         CLI   TCCWEFOP,TIC        IS THE COMMAND A TIC
         BNE   TCCWS020            NO, CONTINUE TRANSLATE
         LR    WKREG3,DATARG       * SET TIC ADDRESS EQUAL TO CCW
         LR    WKREG2,CCWREG       * RECEIVING ADDRESS PLUS ORIGINAL
         LRA   WKREG2,C0(WKREG2)   * DATA ADDRESS MINUS CCW ADDRESS.
         AR    WKREG3,WKREG2       * RESULT IS POSSIBLE REAL ADDRESS
         S     WKREG3,TCCWCCWA     * IN TIC
         STCM  WKREG3,LORD3BYT,CCWDATA  STORE DATA ADDRESS
         B     TCCWS260            UPDATE POINTERS
         SPACE 2
TCCWS020 CLI   TCCWOPBT,C0         OPCODE BYTE ZERO
         BE    TCCWS040            YES, EFFECTIVE OPCODE EQ COMMAND COD
         MVN   TCCWEFOP,TCCWOPBT   NO, MAKE EFF. OPCODE EQ TO OPBYTE
         IC    WKREG2,TCCWOPBT     GET COMMAND FOR INDEX
         STC   WKREG2,CCWCMD       SET CMD CODE TO DC CCW.     @ZA26927
         SPACE 1
TCCWS040 EQU   *                                               @ZA06069
         TM    CCWFLAG,CCWIDA      IDA BIT SET IN VIRT CCW ??  @ZA06069
         BZ    TCCWS041             NO, OK PROCEED             @ZA06069
         MVI   TCCWOPTN,TCCWIDAE   YES, SET TCCW OPTION CODE   @ZA06069
         SR    REG0,REG0           INSURE FIELD IS ZERO        @ZA16175
         ST    REG0,TCCWSAVA                                   @ZA16175
         B     TCCWU000            AND DO ANY UNFIXING.        @ZA06069
         EJECT                                                 @ZA12710
* AT THIS POINT, THE CORRECT COMMAND TO BE PROCESSED HAS BEEN* @ZA12710
* DETERMINED EITHER FROM THE CCW OR FROM A PREVIOUS COMMAND  * @ZA12710
* CODE AS A RESULT OF DATA CHAINING.                         * @ZA12710
* NOW, THE OP TABLE IS INTERROGATED TO CHECK FOR SM SUPPORT, * @ZA12710
* CONTROL COMMAND HANDLING AND SPECIAL HANDLING FOR          * @ZA12710
* UNIT RECORD DEVICES.                                       * @ZA12710
         SPACE 1                                               @ZA12710
TCCWS041 EQU   *                                               @ZA06069
         IC    WKREG2,OPTABLE(WKREG2) INSERT MASK FOR CMD CODE @ZA06069
         EX    WKREG2,TCCWTEST     SPECIAL PROCESSING REQ FOR CCW
         BZ    TCCWS080            NO, CONTINUE NORMAL PROCESSING
*                                  TREAT AS REQ DATA XFR       @ZA12710
         SPACE 1                                               @ZA12710
         SLL   WKREG2,C30          ISOLATE LOW ORDER BITS FOR TYPE CCW
         LTR   WKREG2,WKREG2       WAS IT A CONTROL COMMAND
         BZ    TCCWS079            NO, WAS A STATUS MODIFIER   @YM04190
*                                  W/O UR UNIQUE TESTING       @ZA12710
         BP    TCCWS073            YES, ZERO THE DATA ADDRESS  @YM04190
*                                  FOR CTL CMD W/O UNIQUE BIT. @ZA12710
*        UNIQUE BIT SET IN OP TABLE, CHECK UCB FOR UNIT RECORD @ZA12710
*        DEVICE. IF SO, THEN SPECIAL CHECKS ARE NEEDED FOR     @ZA12710
*        HANDLING CONTROL COMMANDS FOR CERTAIN UNIT RECORD     @ZA12710
*        DEVICES.                                              @ZA12710
         OI    CCWUNU,CCWCTRLC     INDICATE CONTROL COMMAND.   @ZA12710
         TM    UCBDVCLS,UCB3UREC   UNIT RECORD DEVICE CLASS ?? @ZA12710
         BO    TCCWS051            YES, PROCEED WITH UNIT      @ZA28956
*                                       RECORD UNIQUE CHECKS   @ZA28956
*                                                              @ZA28956
*        CHECK FOR DEVICE CLASS X'02' - UNSUPPORTED DEVICE     @ZA28956
*        CLASS ASSIGNED TO THE 3168 SVP.                       @ZA28956
         CLI   UCBDVCLS,UCBDVC02   UNSUPPORTED DEV CLASS 02 ?  @ZA28956
         BNE   TCCWS074            NO, BYPASS FURTHER CHECKS,  @ZA28956
*                                   TREAT AS NON-DATA XFR CMD  @ZA28956
******   UNIQUE DEVICE CLASS X'02' CHECK                ****** @ZA28956
         SPACE 1                                               @ZA28956
         CLI   CCWCMD,CMD01        WRITE COMMAND               @ZA28956
         BE    TCCWS080            YES, REQUIRES DATA XFR      @ZA28956
         B     TCCWS076            NO, TREAT CMD CODES 06 AND  @ZA28956
*                                      27 AS NON DATA XFR CMDS @ZA28956
         SPACE 1                                               @ZA12710
******   UNIQUE UNIT RECORD DEVICE CLASS CHECK          ****** @ZA12710
         SPACE 1                                               @ZA12710
TCCWS051 EQU   *                                               @ZA28956
         CLI   CCWCMD,CMD01        WRITE COMMAND               @ZA16170
         BNE   TCCWS052             YES                        @ZA16170
         CLI   UCBUNTYP,UR3895     3895 PRINTER ??             @ZA16170
         BNE   TCCWS080             NO, TREAT AS DATA XFR CMD  @ZA16170
         B     TCCWS079            YES, TREAT AS REQUIRING SM  @ZA16170
TCCWS052 EQU   *                                               @ZA16170
         CLI   UCBUNTYP,UR3211     3211 PRINTER ??             @ZA12710
         BNE   TCCWS053            NO, STEP TO NEXT UR DEV     @ZA12710
         CLI   CCWCMD,CMD63        COMMAND CODE 63 ??          @ZA12710
         BE    TCCWS080            YES, REQ DATA XFR           @ZA12710
         B     TCCWS076            NO, TREAT REST AS NON D/T   @ZA12710
TCCWS053 EQU   *                                               @ZA12710
         CLI   UCBUNTYP,UR3800     3800 PRINTER ??             @ZA12710
         BNE   TCCWS054            NO, STEP TO NEXT UR DEVICE  @ZA12710
         CLI   CCWCMD,CMD63        COMMAND CODE 23, 43 OR 63 ? @ZA12710
         BNH   TCCWS080            YES, ALL REQUIRE DATA XFR   @ZA12710
         CLI   CCWCMD,CMD83        COMMAND CODE 83 ?           @ZA12710
         BE    TCCWS080            YES, REQUIRES DATA XFR      @ZA12710
         B     TCCWS076            NO, TREAT REST AS NON D/T   @ZA12710
TCCWS054 EQU   *                                               @ZA12710
         CLI   UCBUNTYP,UR1287     1287 OPTICAL READER ??      @ZA12710
         BE    TCCWS055            YES                         @YM07221
         CLI   UCBUNTYP,UR1288     1288 OPTICAL READER ??      @ZA12710
         BNE   TCCWS056            NO, STEP TO NEXT UR DEV     @YM07221
TCCWS055 EQU   *                                               @ZA12710
         CLI   CCWCMD,CMD5B        COMMAND CODE 5B ??          @ZA12710
         BE    TCCWS078            YES, REQ SM SUPPORT         @ZA12710
         B     TCCWS076            NO, TREAT REST AS NON D/T   @ZA12710
TCCWS056 EQU   *                                               @ZA12710
         CLI   UCBUNTYP,UR3890     3890 MICR ??                @ZA08754
         BNE   TCCWS058            NO, STEP TO NEXT UR DEV     @ZA08754
         CLI   CCWCMD,CMD23        COMMAND CODE 23 ??          @ZA12710
         BE    TCCWS078            YES, REQS SM SUPPORT        @ZA12710
         CLI   CCWCMD,CMD33        COMMAND CODE 33 ??          @ZA12710
         BE    TCCWS078            YES, REQS SM SUPPORT        @ZA12710
         CLI   CCWCMD,CMDB3        COMMAND CODE B3 ??          @ZA12710
         BE    TCCWS080            YES, REQ DATA XFR           @ZA12710
         B     TCCWS076            NO, TREAT REST AS NON D/T   @ZA12710
TCCWS058 EQU   *                                               @ZA12710
         CLI   UCBUNTYP,UR3886     3886 OPTICAL CHAR READER ?  @ZA01927
         BNE   TCCWS060            NO, STEP TO NEXT UR DEV     @ZA01927
         CLI   CCWCMD,CMD63        COMMAND CODE 63 ??          @ZA12710
         BE    TCCWS080            YES, REQ DATA XFR           @ZA12710
         CLI   CCWCMD,CMD73        COMMAND CODE 73 ??          @ZA12710
         BE    TCCWS080            YES, REQUIRES DATA XFR      @ZA12710
         B     TCCWS076            NO, TREAT REST AS NON D/T   @ZA12710
TCCWS060 EQU   *                                               @ZA12710
         CLI   UCBUNTYP,UR3851     3851 MASS STORAGE CONTROL ? @ZA04760
         BE    TCCWS080            YES, TREAT CTL CMD CODES 43 @ZA12710
*                                  A3, 27 AND 87 AS DATA XFR.  @ZA12710
TCCWS062 EQU   *                                               @ZA12708
         CLI   UCBUNTYP,UR3540     3540 DISKETTE ??            @ZA12708
         BNE   TCCWS074            NO, TREAT REST AS NON D/T   @ZA12708
         CLI   CCWCMD,CMD07        COMMAND CODE 07 ??          @ZA12708
         BE    TCCWS080            YES, REQUIRES DATA XFR      @ZA12708
         B     TCCWS076            NO, TREAT REST AS NON D/T   @ZA12708
         SPACE 2
TCCWS073 EQU   *                                               @ZA12710
         OI    CCWUNU,CCWCTRLC     INDICATE CONTROL COMMAND    @ZA12710
TCCWS074 EQU   *                                               @ZA12710
         CLI   UCBDVCLS,UCB3COMM   COMMUNICATIONS DEVICE CLASS @ZA12710
         BNE   TCCWS076            NO, TREAT AS NON D/T        @ZA12710
         CLI   UCBUNTYP,TP2955     2955 ??                     @ZA05348
         BE    TCCWS076            YES, TREAT AS NON D/T       @ZA05348
         CLI   CCWCMD,CCWNOP       NOP CONTROL COMMAND ??      @ZA05348
         BE    TCCWS076            YES, TREAT AS NON D/T       @ZA16180
*              CHECK FOR WRITE BREAK CCW FOR 3704/3705 -----   @ZA16180
         CLI   CCWCMD,CMD09        COMMAND CODE 09 ??          @ZA16180
         BNE   TCCWS080            NO, TREAT AS D/T CMD        @ZA16180
         MVI   TCCWSAVA,C0         ZERO BYTE                   @ZA27596
         MVN   TCCWSAVA(C1),UCBUNTYP YES, LOCALIZE BITS 4-7    @ZA27596
         CLI   TCCWSAVA,TP3705     IS TP DEVICE A 3704/3705    @ZA27596
         BNE   TCCWS078            NO, REQS SM SUPPORT         @ZA16180
         B     TCCWS080            YES, TREAT AS D/T CMD       @ZA16180
TCCWS076 EQU   *                                               @ZA12710
         SR    WKREG2,WKREG2       ZERO WORK REGISTER          @ZA12710
         STCM  WKREG2,LORD3BYT,CCWDATA  ZERO DATA ADDR FIELD   @ZA12710
         B     TCCWS260            GO UPDATE POINTERS          @ZA12710
         SPACE 2                                               @ZA12710
TCCWS078 EQU   *                                               @ZA12710
         NI    CCWUNU,FF-CCWCTRLC  RESET CTL COMMAND FLAG      @ZA12710
TCCWS079 EQU   *                                               @ZA12710
         OI    CCWUNU,CCWSTATM     SET STATUS MODIFIER BIT     @ZA12710
TCCWS080 EQU   *                                               @ZA12710
         TM    CCWFLAG,CCWSKIP     SKIP BIT ON IN CCW FLAGS ?? @ZA12710
         BNO   TCCWS100            NO, DATA ADDRESS IS VALID
         TM    TCCWEFOP,CCWRITE    IS CCW A WRITE TYPE
         BO    TCCWS100            YES, USE DATA ADR SKIP BIT OR NO
         NI    CCWDATA+C2,FC       NO, INSURE DATA ADDRESS     @ZA08128
*                                      ON WORD BDY FOR 2880 CH @ZA08128
         B     TCCWS260            UPDATE POINTERS
         SPACE 1
* AT THIS POINT IT HAS BEEN DETERMINED THE COMMAND DOES REQUIRE A
* DATA ADDRESS. THE SECTION FOLLOWING DETERMINES DATA BOUNDARIES
         SPACE 1
TCCWS100 EQU   *                                               @ZA12683
         LR    WKREG2,DATARG       LOAD DATA ADDR IN WORK REG  @ZA12683
         LR    WKREG3,DATARG       LOAD DATA ADDR IN WORK REG  @ZA12683
         LH    REG0,CCWCNT         LOAD DATA COUNT FROM CCW    @ZA12683
         LTR   REG0,REG0           IS DATA COUNT ZERO ??       @ZA12683
         BZ    TCCWS240            YES, START EQ STOP ADDR     @ZA12683
         N     REG0,TCCWPOS         NO, INSURE COUNT IS        @ZA12683
*                                   POSITIVE- MAX CT IS 64K    @ZA12683
         BCTR  REG0,REG0           SUBTRACT ONE FOR LIMITS     @ZA12683
         SPACE 1                                               @ZA12683
         AR    WKREG2,REG0         ADD DATA CT TO WORK REG     @ZA12683
         SPACE 1                                               @ZA12683
         CLI   TCCWEFOP,CCWRDBK    READ BACKWARDS CMD CODE ??  @ZA12683
         BNE   TCCWS160             NO, GO TEST FOR FIXING     @ZA12683
         SR    WKREG3,REG0         YES, SUBT TO SET START ADDR @ZA12683
         LR    WKREG2,DATARG       SET DATA ADDR AS END ADDR   @ZA12683
         SPACE 2
* THIS SECTION TESTS TO SEE IF PAGES REQUIRE FIXING. IF SO
*             SUBROUTINE TCCWM000 IS ENTERED.
*   WKREG3 -  START ADDRESS OF DATA INVOLVED WITH CCW        * @ZA12683
*   WKREG2 -    END ADDRESS OF DATA INVOLVED WITH CCW        * @ZA12683
TCCWS160 C     WKREG3,TCCWLOCA     IF START ADDRESS IS LESS THAN
         BL    TCCWM000            LOW COMPARE ADDRESS OR END
         C     WKREG2,TCCWHICA     ADDRESS IS GREATER THAN HIGH
         BNL   TCCWM000            COMPARE ADDRESS,STORE LOW DATA
TCCWS200 EQU   *                   TCCWM000 RETURN POINT
         SPACE 2
*        DETERMINE IF AN IDAL ENTRY IS REQUIRED.
         SPACE 1
TCCWS220 LR    WKREG1,WKREG2       SAVE END DATA ADDRESS
         LR    REG0,WKREG3         SAVE START DATA ADDRESS
         N     WKREG1,TCCWTRUN     TRUNCATE END TO PAGE BOUNDARY
         N     REG0,TCCWTRUN       TRUNCATE START TO PAGE BOUNDARY
         SR    WKREG1,REG0         SUBTRACT TO SEE HOW MANY PAGES
         BNZ   TCCWM400            MORE THAN ONE IDAL NEEDED
         SPACE 2
* COMPLETE THE CCW AND PREPARE TO DO NEXT CCW IF ONE EXISTS
TCCWS240 LRA   REG0,C0(DATARG)     TRANSLATE CCW DATA ADDRESS
         BNZ   TCCWM000            FAILED, GO FIX PAGE
         STCM  REG0,LORD3BYT,CCWDATA STORE REAL ADDRESS IN CCW
         SPACE 1
TCCWS260 LA    WKREG1,CCWLENG(CCWREG) INCREMENT CCW LENGTH BY A CCW
         ST    WKREG1,TCCWCCWR     STORE IN TCCW FOR NEXT TIME
         L     WKREG1,TCCWCCWA     GET CURRENT VIRTUAL CCW PTR
         LA    WKREG1,CCWLENG(WKREG1) INCREMENT BY A CCW
         ST    WKREG1,TCCWCCWA     STORE FOR NEXT TIME THROUGH LOOP
         IC    WKREG3,TCCWCCWL     GET CURRENT LOOP COUNTER
         BCTR  WKREG3,REG0         SUBTRACT ONE FOR FINISHED CCW
         STC   WKREG3,TCCWCCWL     STORE FOR NEXT TIME IN LOOP
         CLI   TCCWEFOP,TIC        WAS IT A TIC
         BNE   TCCWS280            NO, LOOK FOR CHAINING
         ST    DATARG,TCCWTICA     STORE DATA ADDRESS
         B     TCCWM100            GO PROCESS TIC
         SPACE 1
TCCWS280 TM    CCWFLAG,CCWDC+CCWCC CCW SPECIFY CHAINING
         BNZ   TCCWS300            YES, LOOK AT TYPE OF CHAINING
         SR    WKREG2,WKREG2       ZERO A REG FOR INSERT
         SH    WKREG1,TCCW16       GET SECOND TO LAST CCW ADDRESS
         C     WKREG1,BEBVRST      BACK BEYOND CCW STRING
         BL    TCCWS290            YES, END OF CCW CHAIN
         L     WKREG1,TCCWCCWR     GET THE LAST CCW ADDR
         SH    WKREG1,TCCW16       POINT TO 2ND TO LAST
         TM    CCWUNU-CCW(WKREG1),CCWSTATM STATUS MODIFIER
         BO    TCCWS295            YES, MORE CCWS TO XLATE     @YM05113
         SPACE 1
TCCWS290 MVI   TCCWOPBT,C0         SET OPBYTE TO ZERO
         MVC   BEBRLEN,TCCWCCWR    SET REAL END IN BEB
         MVC   BEBVREN,TCCWCCWA    SET VIRTUAL END IN BEB
         B     TCCWM200            CHECK FOR UNRESOLVED TICS
         SPACE 2
TCCWS295 CLI   CCWCMD-CCW(WKREG1),TIC  IS IT A TIC ?           @YM05113
         BE    TCCWS290            YES, CHECK UNRESOLVED TIC'S @YM05113
TCCWS300 CLI   TCCWOPBT,C0         IF OPBYTE IS ZERO, REPLACE
         BNE   TCCWS320            OPBYTE WITH WORKAREA CCW
         L     WKREG1,TCCWCCWA     RELOAD THE CURRENT CCW ADDRESS
         SH    WKREG1,TCCWAINC     OP-POINTER WITH CCW ADDRESS
         ST    WKREG1,TCCWOPTR     FOR NEXT TIME IN LOOP
         MVC   TCCWOPBT,CCWCMD     COMMAND CODE AND REPLACE
TCCWS320 TM    CCWFLAG,CCWDC       DATA CHAINING
         BO    TCCWS000            YES, PROCESS NEXT CCW
         MVI   TCCWOPBT,C0         NO, ZERO OP BYTE
         B     TCCWS000            PROCESS NEXT CCW
         TITLE '    IECVTCCW -- CCW TRANSLATOR -- FIX ROUTINE'
***********************************************************************
*                                                                     *
* THIS ROUTINE IS ENTERED IF THE TCCW ROUTINE INDICATES THAT A PAGE   *
* NEEDS TO BE FIXED. IT SEARCHES THE EXISTING FIX LIST FOR THE SAME   *
* ENTRY. IF THE PAGE IS ALREADY FIXED, CONTROL RETURNS TO THE TCCW    *
* SUBROUTINE, IF NOT THE PAGE IS FIXED. IF THERE IS NO ROOM IN THE    *
* PAGE FIX LIST, A SUBROUTINE IS ENTERED WHICH GETS A NEW LIST. THIS  *
* ROUTINE LINKS TO THE SERVICE INTERFACE ROUTINE (IEAVPSIB) TO FIX THE*
* REQUIRED PAGES.                                                     *
*                                                                     *
***********************************************************************
         SPACE 2
TCCWM000 LR    REG1,WKREG3         GET LOW DATA ADDRESS
         N     REG1,TCCWTRUN       TRUNCATE TO PAGE BOUNDARY
         LR    REG2,WKREG2         GET HIGH DATA ADDRESS
         O     REG2,TCCWROUN       ROUND TO END OF DATA PAGE
         ST    REG1,TCCWLOCA       SET LOW COMPARE ADDRESS
         ST    REG2,TCCWHICA       SET HIGH COMPARE ADDRESS
         SPACE 1
* SEARCH THE EXISTING FIX LIST TO SEE IF REQUESTED PAGE(S) HAVE
* ALREADY BEEN FIXED.
         SPACE 1
         L     REG15,TCCWFIX       LOAD BEGINNING OF FIX LIST
TCCWM010 LA    REG15,FIXEL(REG15)  INCREMENT BEYOND HEADER
TCCWM015 C     REG15,TCCWPLKR      IS THIS THE LAST ENTRY
         BE    TCCWM030            YES, NOT IN FIX LIST
         TM    C0(REG15),FIXCONT   CONTINUED IN ANOTHER BLOCK
         BO    TCCWM020            YES, GET NEXT BLOCK
         CLM   REG1,LORD3BYT,C1(REG15) NEW START LESS THAN ENTRY START
         BL    TCCWM010            YES, LOOK AT NEXT ENTRY
         CLM   REG2,LORD3BYT,C5(REG15) NEW END GT ENTRY END
         BNH   TCCWS200            NO, NO FIX NEEDED
         B     TCCWM010            YES, LOOK AT NEXT ENTRY
         SPACE 1
TCCWM020 L     REG15,C0(REG15)     GET POINTER TO NEXT FIX ENTRY
         B     TCCWM015            CONTINUE SEARCH
         SPACE 2
* THE PAGES TO BE FIXED ARE NOT IN LIST, MUST FIX THEM, FIND ROOM FOR
* ENTRY.
         SPACE 1
TCCWM030 L     FIXREG,TCCWFIX      GET ADDR OF PAGE FIX LIST
         SR    REG0,REG0           ZERO REG FOR COMPARE
         USING FIX,FIXREG          ADDRESSABILITY FOR FIX LIST
TCCWM040 C     REG0,FIXCHAIN       CHAIN POINTER
         BE    TCCWM050            NO, END OF CHAIN
         L     FIXREG,FIXCHAIN     LOAD CHAIN POINTER
         B     TCCWM040            LOOK FOR ANOTHER BLOCK
         EJECT
TCCWM050 LA    WKREG1,FIXEL*FIXNE(FIXREG) FIND END OF LIST
         C     WKREG1,TCCWPLKR     IS SPACE GONE
         BH    TCCWM060            NO, BUILD ENTRY
         SPACE 1
** NEED AN ADDITIONAL 160 BYTE BLOCK FOR FIX LIST ENTRIES      @ZA16169
         ST    FIXREG,TCCWPLKR     STORE CURRENT FIX LIST PTR  @ZA16169
         BAL   RTNREG,TCCWGTM0     RETURN TO CALLER FOR BLOCK  @ZA16169
         SPACE 1                                               @ZA16169
** RETURN FROM CALLER: REG 15 POINTS TO NEW 160 BYTE BLOCK.    @ZA16169
** INITIALIZE 160 BYTE BLOCK FOR FIX LIST AND CONTINUE PROC    @ZA16169
TCCWM055 EQU   *                                               @ZA16169
         SPACE 1                                               @ZA16169
         L     FIXREG,TCCWPLKR     LOAD CURRENT FIX LIST POINTER
         SPACE 1
         ST    REG15,FIXCHAIN      STORE PTR TO NEW FIX LIST   @ZA16169
         LA    REG15,FIXHL(REG15)  FIND FIRST ENTRY
         LA    WKREG1,FIXEL*FIXNE(FIXREG) FIND LAST ENTRY
         LR    WKREG2,WKREG1       BACK UP A FIX ENTRY.        @ZA16175
         SH    WKREG2,TCCWAINC     SUBTRACT BY EIGHT.          @ZA16175
         NI    C4(WKREG2),FF-LASTENT RESET LAST ENT INDICATOR  @ZA16175
         ST    REG15,C0(WKREG1)    STORE CHAIN PTR
         ST    REG15,TCCWPLKR      STORE NEW NEXT ENTRY
         MVI   C0(WKREG1),FIXCONT  SET CONTINUATION POINTER
         MVI   C4(WKREG1),C0       ZERO BYTE 4 FLAGS OF VSL    @ZA28114
         L     FIXREG,FIXCHAIN     LOAD NEW FIX LIST CHAIN
         L     REG1,TCCWLOCA       RESTORE THE FIX ENTRY       @ZA16169
         L     REG2,TCCWHICA        ADDRESSES.                 @ZA16169
         LM    WKREG2,DATARG,TCCWSAV7   RESTORE SAVED REGS     @ZA16169
         SPACE 2
* BUILD FIX ENTRY AND FIX PAGES
TCCWM060 L     REG15,TCCWPLKR      LOAD CURRENT ENTRY POINT
         ST    REG1,C0(REG15)      STORE FIX ENTRY INTO        @ZA16169
         ST    REG2,C4(REG15)       FIX LIST.                  @ZA16169
         OI    C4(REG15),LASTENT   SET LAST ENTRY INDICATOR    @ZA16175
         OI    TCCWMODB,TCCWPGCK   SET PAGE FAULT INDICATOR
TCCWM062 TM    C0(REG1),X00        ACCESS THE PAGE             @ZA01894
         A     REG1,TCCWPAGE       INCREMENT BY PAGE
         CR    REG1,REG2           END OF ENTRY
         BL    TCCWM062            NO CONTINUE
         EJECT                                                 @ZA16169
TCCWM063 EQU   *                                               @ZA16169
         L     REG1,C0(REG15)      RESTORE THIS FIX ENTRY      @ZA16169
         L     REG2,C4(REG15)       FROM FIX LIST.             @ZA16169
         SH    REG15,TCCWAINC      BACK UP A FIX ENTRY
         NI    FIXLSTEN-FIXLSTST(REG15),FF-LASTENT ZERO THE LAST
*                                  ENTRY INDICATOR
         SR    REG0,REG0           ZERO REG FOR STORE
         L     FIXREG,TCCWFIX      LOAD PTR TO FIX LIST
         ST    REG0,FIXECB         ZERO ECB
         LA    REG0,FIXECB         GET ADDR OF ECB
         OI    TCCWMODB,TCCWECBU   SET ECB IN USE FLAG
         SR    UCBREG,UCBREG       DO NOT ASSOCIATE FIX WITH TCB
         L     REG15,TCCWFX        LOAD ADDRESS OF IEAVPSIX    @YM05518
         O     REG1,TCCWRFIX       SET FOR REGISTER FIX ENTRY
         BALR  REG14,REG15         GO FIX PAGES
         L     UCBREG,TCCWUCB-C1   RESTORE UCB ADDRESS
         LTR   REG15,REG15         DID IT WORK
         BZ    TCCWM090            YES, CONTINUE IN LINE
         LA    REG14,C8            GET CONSTANT OF 8
         CR    REG14,REG15         WAS RETURN CODE 8
         BNE   TCCWT000            NO, ERROR DURING FIX.       @ZA16175
         SPACE 2
TCCWM070 L     REG15,TCCWPLKR      GET CURRENT ENTRY POINTER
         LM    REG1,REG2,C0(REG15) PICK UP CURRENT ENTRY
         LA    REG2,C0(REG2)       ZERO ANY VSL FLAGS          @ZA27292
TCCWM075 TM    C0(REG1),X00        ACCESS THE PAGE             @ZA01894
         A     REG1,TCCWPAGE       INCREMENT BY PAGE
         CR    REG1,REG2           END OF ENTRY
         BL    TCCWM075            NO CONTINUE
         CLI   FIXECB,C4           ECB POSTED IN ERROR
         BE    TCCWT000            YES, SET FIX ERROR          @ZA16175
TCCWM090 L     WKREG1,TCCWPLKR     GET CURRENT ENTRY POINTER
         NI    TCCWMODB,FF-TCCWECBU-TCCWPGCK    RESET FLAGS    @ZA12683
         LA    WKREG1,C8(WKREG1)   INCREMENT ENTRY POINTER
         ST    WKREG1,TCCWPLKR     STORE IN TCCW
         B     TCCWS200            RETURN TO LOOP
         TITLE '    IECVTCCW -- CCW TRANSLATOR -- -- TIC ROUTINE'
***********************************************************************
*                                                                     *
* THIS ROUTINE IS ENTERED WHENEVER THE TCCW SUBROUTINE ENCOUNTERS A   *
* TRANSFER IN CHANNEL (TIC) CCW COMMAND. THE TIC ADDRESSES IN THE     *
* REAL STRING ARE CREATED TO INDICATE THE INTENT OF THE VIRTUAL TIC   *
*                                                                     *
***********************************************************************
         SPACE 1
TCCWM100 MVC   BEBRLEN,TCCWCCWR    GET REAL END ADDRESS
         MVC   BEBVREN,TCCWCCWA    GET VIRTUAL ADDRESS
         L     WKREG1,TCCWTICA     GET TIC TO ADDRESS
         TM    TCCWTICA+C3,DBLWD   TIC ON DBLWD BOUNDARY
         BNZ   TCCWM153            NO, TREAT AS RESOLVED       @ZA03223
         C     WKREG1,BEBVRST      IS TIC LESS THAN LOW LIMIT
         BL    TCCWM120            YES, CHECK FURTHER
         SPACE 1
TCCWM110 C     WKREG1,BEBVREN      IS TIC A NOP TIC
         BE    TCCWM160            IF EQUAL, A NOP TIC
         BL    TCCWM150            IF LOW, IN THE CURRENT STRING
         SPACE 2
*        PLACE TIC ON UNRESOLVED TIC LIST
TCCWM120 L     WKREG1,TCCWCCWR     GET ADR OF COMMAND AFTER TIC
         SH    WKREG1,TCCWAINC     GET ADR OF TIC
         MVC   C1(C3,WKREG1),TCCWTICL+C1 PUT TIC ON UNRES LIST
         LRA   WKREG2,C0(WKREG1)   GET REAL ADDRESS
         ST    WKREG2,TCCWTICL     SET POINTER IN TIC LIST
         MVC   C4(C4,WKREG1),TCCWTICA SAVE VIRT TIC ADDRESS
TCCWM130 SH    WKREG1,TCCWAINC     GET PREVIOUS CCW POINTER
TCCWM140 CLI   CCWCMD-CCW(WKREG1),TIC  TIC FOLLOWED BY TIC     @YM04961
         BE    TCCWM200            HANDLE UNRESOLVED TICS      @YM04961
         TM    CCWUNU-CCW(WKREG1),CCWSTATM STATUS MODIFIER TIC @YM04961
         BNO   TCCWM200            HANDLE UNRESOLVED TICS      @ZA03223
         CLI   TCCWCCWL,C0         IF LOOP CNT ZERO,REMOVE TIC @ZA03223
         BNE   TCCWS000            NOT ZERO, TRANSLATE NEXT CCW@ZA03223
         SPACE
*        LAST CCW ON BEB IS TIC PRECEDED BY STATUS MODIFIER    @ZA03223
         LA    WKREG1,C8(WKREG1)   POINT TO TIC
         MVC   TCCWTICL+C1(C3),C1(WKREG1)  TAKE OFF UNRES LIST @ZA03223
         B     TCCWM300            ANOTHER BEB FOR CCWS        @ZA03223
         SPACE 2
TCCWM150 L     WKREG1,TCCWCCWR     GET REAL END ADDRESS
         SH    WKREG1,TCCW16       POINT TO THE POSSIBLE LOC OF
*                                  A STATUS MODIFIER CCW
         B     TCCWM154            CHECK TO SEE IF A STATUS MOD@ZA03223
         SPACE
TCCWM153 SH    WKREG1,TCCWAINC     GET PREVIOUS CCW POINTER    @ZA03223
TCCWM154 CLI   CCWCMD-CCW(WKREG1),TIC   TIC FOLLOWED BY TIC    @ZA03223
         BE    TCCWM200            HANDLE UNRESOLVED TICS      @ZA03223
         TM    CCWUNU-CCW(WKREG1),CCWSTATM STATUS MODIFIER TIC @ZA03223
         BO    TCCWS000            TRANSLATE NEXT CCW
         B     TCCWM200            HANDLE UNRESOLVED TICS      @ZA03223
         SPACE 2
*        NOP TIC PROCESSING TO AVOID TIC TO TIC SITUATION
TCCWM160 CLI   TCCWCCWL,C1         ONLY ROOM FOR ONE MORE CCW
         BH    TCCWS000            NO, PLENTY OF ROOM, CONTINUE
         L     WKREG1,TCCWCCWA     LOAD ADDRESS OF VIRTUAL CCW
         LA    WKREG1,BEBEL(,WKREG1) INCREMENT BY A CCW
         ST    WKREG1,TCCWCCWA     STORE NEW VIRTUAL CCW ADDR
         B     TCCWM305            NO ROOM, GET A NEW BEB
         SPACE 2
***********************************************************************
* THIS ROUTINE IS ENTERED FOR A TIC WHICH IS NOT A NOP OR PRECEEDED   *
* BY A STATUS MODIFIER OR WHEN THE CCW BEING PROCESSED INDICATES END  *
* OF CHAIN. IF THERE ARE NO UNRESOLVED TICS, CONTROL PASSES TO THE 900*
* ROUTINE WHICH DOES END OF TRANSLATION PROCESSING AND EXITS. IF THERE*
* IS AN UNRESOLVED TIC, A NEW BEBLK IS CREATED AND CONTROL PASSES TO  *
* THE TCCW SUBROUTINE.                                                *
***********************************************************************
TCCWM200 L     WKREG2,TCCWTICL     GET ADDRESS OF FIRST TIC
         LTR   WKREG2,WKREG2       IS THERE AN ENTRY IN TIC LIST
         BZ    TCCWM900            NO, END OF PROCESSING
         L     BEBREG,TCCWBEB      GET FIRST BEBLK ADDRESS
TCCWM210 L     WKREG3,BEBRLST      GET REAL START ADDRESS
         LRA   WKREG1,C0(WKREG3)   GET REAL ADDRESS OF REAL START
         XR    WKREG1,WKREG2       CHECK FOR SAME PAGE
         N     WKREG1,TCCWTRUN     AND OFF 4K NOISE BITS
         BZ    TCCWM220            SAME PAGE, CONT CONVERSION
         L     BEBREG,BEBCHAIN     GET POINTER TO NEXT BEBLK
         B     TCCWM210            GO CHECK NEXT BEBLK
         SPACE 1
TCCWM220 AR    WKREG2,WKREG3       CONVERT REAL
         LRA   WKREG3,C0(WKREG3)   ADDRESS TO VIRTUAL
         SR    WKREG2,WKREG3       *
         MVC   TCCWTICL+C1(C3),C1(WKREG2) MOVE NEXT TIC ADDR TO TCCW
         L     WKREG3,C4(WKREG2)   GET TIC VIRTUAL ADDRESS
         LR    REG0,WKREG3         SAVE IT IN REG
         L     BEBREG,TCCWBEB      GET FIRST BEB POINTER
TCCWM225 C     WKREG3,BEBVRST      TIC LESS THAN START ADDR
         BL    TCCWM230            YES, CHECK SECOND POINTERS
         C     WKREG3,BEBVREN      TIC GREATER THAN END
         BL    TCCWM260            NO, CALCULATE ADDRESS
TCCWM230 TM    BEBFLAG,BEB2INUS    SECOND SET OF POINTERS USED
         BZ    TCCWM240            NO, CHECK NEXT BEB BLOCK
         C     WKREG3,BEBVRST2     TIC LESS THAN START ADDRESS
         BL    TCCWM240            YES, CHECK NEXT BEBLK
         C     WKREG3,BEBVREN2     TIC GREATER THAN END ADDRESS
         BL    TCCWM250            NO, CALCULATE ADDRESS
TCCWM240 C     WKREG1,BEBCHAIN     ANOTHER BEB BLOCK
         BE    TCCWM270            NO, CHECK SECOND POINTERS
         L     BEBREG,BEBCHAIN     YES, GET CHAIN POINTER
         B     TCCWM225            CHECK NEW BEB BLOCK
         SPACE 2
TCCWM250 LA    BEBREG,C16(BEBREG)  ADJUST BEB POINTER FOR SECOND PTRS
TCCWM260 L     WKREG3,BEBRLST      GET REAL START ADDRESS
         LRA   WKREG3,C0(WKREG3)   GET REAL ADDR OF REAL START
         L     WKREG1,BEBVRST      GET VIRTUAL START ADDRESS
         AR    REG0,WKREG3         ADD OR
         SR    REG0,WKREG1         SUBTRACT DISPLACEMENT
         ST    REG0,C0(WKREG2)     STORE REAL ADDRESS IN TIC
         MVI   C0(WKREG2),TIC      SET IT TO A TIC
         B     TCCWM200            YES, CHECK NEXT ENTRY
         SPACE 2
TCCWM270 TM    BEBFLAG,BEB2INUS    SECOND SET OF POINTERS AVAILABLE
         BO    TCCWM280            NO, GET A NEW BEB BLOCK
         CLI   TCCWCCWL,C3         ROOM FOR 3 CCWS OR MORE
         BL    TCCWM280            NO, GET A NEW BEB BLOCK
         OI    BEBFLAG,BEB2INUS    INDICATE SECOND PTRS IN USE
         LA    BEBREG,C16(BEBREG)  SET BASE UP TO SECOND POINTERS
         L     WKREG1,TCCWCCWR     SET REAL START ADDRESS      @ZA16169
         ST    WKREG1,BEBRLST      FROM TCCW TO BEB.           @ZA16169
         B     TCCWM298            BRANCH TO SET UP ADDRESS
         SPACE 1
** NEED AN ADDITIONAL 160 BYTE BLOCK FOR BEB BLOCK, REAL CP    @ZA16169
TCCWM280 EQU   *                                               @ZA16169
         BAL   RTNREG,TCCWGTM2     RETURN TO CALLER FOR BLOCK  @ZA16169
         SPACE 1                                               @ZA16169
** RETURN FROM CALLER: REG 15 POINTS TO NEW 160 BYTE BLOCK.    @ZA16169
** INITIALIZE 160 BYTE BLOCK FOR BEB BLOCK AND CONTINUE.       @ZA16169
TCCWM290 EQU   *                                               @ZA16169
         XC    C16(C32,REG15),C16(REG15) ZERO 8 WORDS.         @ZA16169
         SPACE 2
         ST    REG15,BEBCHAIN      STORE POINTER TO NEXT BLOCK @ZA16169
         LR    BEBREG,REG15        ESTABLISH BASE              @ZA16169
         ST    BEBREG,TCCWCBEB     STORE AS CURRENT BEB
         MVI   TCCWCCWL,BEBNE      SET LOOP COUNT
         LA    WKREG1,BEBSCCW      GET REAL START ADDRESS
         ST    WKREG1,BEBRLST      INIT REAL START PTR IN BEB
         L     WKREG2,TCCWSAV7     RESTORE WKREG2.             @ZA16169
         ST    WKREG1,TCCWCCWR     UPDATE PTR TO NEW REAL START
TCCWM298 EQU   *                                               @ZA16169
         L     WKREG1,C4(WKREG2)   VIRTUAL START ADDRESS       @ZA16169
         ST    WKREG1,BEBVRST      .STORE IN BEB               @ZA16169
         ST    WKREG1,TCCWCCWA     .STORE IN TCCW              @ZA16169
         L     WKREG1,TCCWCCWR     GET RECEIVER ADDRESS
         LRA   WKREG1,C0(WKREG1)   GET REAL ADDRRSS
         STCM  WKREG1,LORD3BYT,C1(WKREG2) STORE IN TIC
         B     TCCWS000            BRANCH TO TRANSLATE CCWS
         TITLE '    IECVTCCW -- CCW TRANSLATOR -- TIC INSERTION'
***********************************************************************
* THIS ROUTINE IS ENTERED IF THE TCCW ROUTINE RUNS OUT OF ROOM FOR    *
* BUILDING THE REAL CCW STRING. A NEW BEBLOCK WITH ROOM FOR 15 MORE   *
* CCWS IS OBTAINED AND INITIALIZED. A TIC CCW IS INSERTED AT THE      *
* END OF THE CURRENT CCW SEGMENT TO POINT TO THE NEW CCW SEGMENT. A   *
* CHECK IS MADE NOT TO SPLIT A TIC CCW FROM A STATUS MODIFIER CCW.    *
***********************************************************************
TCCWM300 L     WKREG1,TCCWCCWA     GET CURRENT VIRTUAL ADDRESS
         ST    WKREG1,BEBVREN      AND STORE AS VIRTUAL END
TCCWM305 L     WKREG1,TCCWCCWR     GET CURRENT REAL ADDRESS
         ST    WKREG1,BEBRLEN      AND STORE AS REAL END
** NEED AN ADDITIONAL 160 BYTE BLOCK FOR BEB BLOCK             @ZA16169
         BAL   RTNREG,TCCWGTM1     RETURN TO CALLER FOR BLOCK. @ZA16169
** RETURN FROM CALLER: REG 15 POINTS TO NEW 160 BYTE BLOCK.    @ZA16169
** INITIALIZE 160 BYTE BLOCK FOR BEB BLOCK AND CONTINUE.       @ZA16169
TCCWM310 EQU   *                                               @ZA16169
         XC    C16(C32,REG15),C16(REG15)     ZERO 8 WORDS      @ZA16169
         L     REG14,TCCWCBEB      INSURE BEB PTR IS TO TOP OF BLOCK
         ST    REG15,BEBCHAIN-BEB(REG14)   SET CHAIN POINTER TO NEXT
*                                          BLOCK               @ZA16169
         LA    REG1,C16            TWO CCWS IN LENGTH
         L     WKREG1,TCCWSAV6     RESTORE WORK REGISTER 1.    @ZA16169
         SR    WKREG1,REG1         POINT TO 2ND TO LAST CCW
         TM    CCWUNU-CCW(WKREG1),CCWSTATM STATUS MODIFIER
         BO    TCCWM330            YES, BACK UP FOR TIC        @ZA03223
         LA    WKREG1,CCWLENG(WKREG1) WANT TIC HERE
         LA    REG1,CCWLENG        INDICATE ONE TIC NEEDED
         B     TCCWM340            JUST REPLACE LAST INSTR     @ZA03223
         SPACE
TCCWM330 SH    WKREG1,TCCWAINC     BACK UP ONE STEP FURTHER
         TM    CCWUNU-CCW(WKREG1),CCWSTATM  ALSO STAT MODIFIER?@ZA03223
         BO    TCCWM335            YES UPDATE REG1
         LA    WKREG1,CCWLENG(WKREG1)   POINT BACK TO CORRECT  @ZA03223
         B     TCCWM340                 ONLY ONE STAT MODIF    @ZA03223
TCCWM335 LA    REG1,CCWLENG(REG1)  DISP FOR VIRT CCW BACK UP   @ZA03223
         SPACE 1
TCCWM340 ST    WKREG1,BEBRLEN      STORE NEW END POINTER
         L     WKREG2,TCCWCCWA     LOAD VIRTUAL CCW POINTER
         SR    WKREG2,REG1         BACK OFF REQUIRED BYTES
         ST    WKREG2,BEBVREN      STORE NEW VIRTUAL END
         ST    WKREG2,TCCWCCWA     STORE IN TCCW
         SPACE 1
*        SET UP TO POINT TO NEW BEB AS PRIMARY BEB              YM01244
         LR    BEBREG,REG15        GET PTR TO BEB              @ZA16169
         ST    BEBREG,TCCWCBEB     STORE AS CURRENT BEB IN TCCW YM01244
         SPACE 1
         ST    WKREG2,BEBVRST      STORE NEW VIRTUAL START      YM01244
         LA    REG14,BEBSCCW       POINT TO FIRST CCW           YM01244
         ST    REG14,BEBRLST       STORE NEW REAL START         YM01244
         ST    REG14,TCCWCCWR      STORE NEW REAL START
         LRA   WKREG2,C0(REG14)    GET REAL ADDRESS FOR TIC
         ST    WKREG2,CCW-CCW(WKREG1) STORE IN CCW
         MVI   CCWCMD-CCW(WKREG1),TIC SET TIC COMMAND CODE
         MVI   TCCWCCWL,BEBNE      SET NUMBER OF ENTRIES
         B     TCCWS000            CONTINUE TRANSLATION
         TITLE '    IECVTCCW -- CCW TRANSLATOR -- IDAL ROUTINE'
***********************************************************************
*
* BUILD IDAL SUBROUTINE --
*                                                                     *
* THIS SUBROUTINE BUILDS AN INDIRECT ADDRESS WORD LIST FOR EACH CCW   *
* WHOSE DATA AREA CROSSES ONE OR MORE PAGE BOUNDARIES. THE LIST       *
* CONSISTS OF THE TRANSLATED CCW DATA ADDRESS PLUS THE ADDRESS OF     *
* EACH SUBSEQUENT PAGE REFERENCED BY THE DATA AREA. THE ADDRESS OF    *
* THE LIST REPLACES THE DATA ADDRESS IN THE CCW AND THE INDIRECT      *
* FLAG IS TURNED ON.                                                  *
*                                                                     *
***********************************************************************
TCCWM400 EQU   *                                               @ZA26257
         TM    TCCWMODB,TCCWPC10   0C4 OCCUR DURING FIXING.    @ZA26257
         BZ    TCCWM401            NO,                         @ZA26257
         L     WKREG2,TCCWHICA     YES, ADJ END DATA ADDRESS   @ZA26257
*                                       TO LAST VALID PAGE.    @ZA26257
         LR    WKREG1,WKREG2       MOVE START AND END DATA     @ZA26257
         LR    REG0,WKREG3         ADDRESS AND TRUNCATE BOTH   @ZA26257
         N     WKREG1,TCCWTRUN     TO PAGE BOUNDARIES AND      @ZA26257
         N     REG0,TCCWTRUN       SUBTRACT TO EVALUATE THE    @ZA26257
         SR    WKREG1,REG0         NUMBER OF PAGES.            @ZA26257
         SRA   WKREG1,TWOKEX       CALCULATE NUMBER OF IDAWS   @ZA26257
         LA    WKREG1,C3(WKREG1)   REQUIRED FOR DATA.          @ZA26257
         B     TCCWM402                                        @ZA26257
TCCWM401 EQU   *                                               @ZA26257
         SRA   WKREG1,TWOKEX       CALCULATE NUMBER OF IDAWS   @ZA26257
         LA    WKREG1,C2(WKREG1)   REQUIRED FOR DATA.          @ZA26257
TCCWM402 EQU   *                                               @ZA26257
         SR    REG0,REG0           SET NUMBER OF AVAILABLE     @ZA26257
         IC    REG0,TCCWINDL       IDAWS IN IDAL BLOCK.        @ZA26257
         CR    WKREG1,REG0         ENOUGH IDAW SLOTS AVAILABLE @ZA26257
         BNH   TCCWM408            YES,                        @ZA26257
         SPACE 2
** NEED AN ADDITIONAL 160 BYTE BLOCK FOR IDAL BLOCK            @ZA16169
         BAL   RTNREG,TCCWGTM0     RETURN TO CALLER FOR BLOCK  @ZA16169
         SPACE 1                                               @ZA16169
** RETURN FROM CALLER: REG 15 POINTS TO NEW 160 BYTE BLOCK.    @ZA16169
** INITIALIZE 160 BYTE BLOCK FOR IDAL BLOCK AND CONTINUE.      @ZA16169
         LA    WKREG1,TCCWINDA     GET ADDRESS OF IDAL LIST    @ZA16169
TCCWM405 EQU   *                                               @ZA16169
         L     DATARG,C0(WKREG1)   GET CHAIN POINTER
         LTR   DATARG,DATARG       WAS CHAIN ZERO
         BZ    TCCWM406            YES, STORE POINTER
         LR    WKREG1,DATARG       SET CHAIN IN POINTER REG
         B     TCCWM405            LOOP BACK TO FIND CHAIN END
         SPACE 1
TCCWM406 EQU   *                                               @ZA16169
         ST    REG15,C0(WKREG1)    STORE CHAIN POINTER.        @ZA16169
         LA    REG15,IDALHL(REG15)   POINT TO FIRST ENTRY      @ZA16169
         ST    REG15,TCCWINDR      ST ENT AS INDIRECT REC      @ZA16169
         MVI   TCCWINDL,IDALNE     SET NUMBER OF ENTRIES AS LOOP COUNT
         LM    WKREG2,DATARG,TCCWSAV7   RESTORE REGISTERS      @ZA16169
         LA    REG0,IDALNE         INITIALIZE NUMBER OF ENTRIES REG
         EJECT
TCCWM408 LA    WKREG1,TWOK         SET AN INCREMENT TO 2K
         CLI   TCCWEFOP,CCWRDBK    IF EFFECTIVE COMMAND CODE
         BNE   TCCWM410            IS READ BACKWARD
         LNR   WKREG1,WKREG1       CHANGE INCREMENT TO -2K
         LR    WKREG2,WKREG3       INTERCHANGE DATA START AND
         LR    WKREG3,DATARG       END ADDRESSES AND ROUND END
         O     WKREG2,TCCWRON2     ADDRESS UP TO END
         B     TCCWM420            GO TO COMMON CODE
         SPACE 2
TCCWM410 N     WKREG2,TCCWTRN2     TRUNCATE 2K FROM END ADDRESS.
TCCWM420 OI    CCWFLAG,CCWIDA      TURN ON INDIRECT ADDRESS FLAG
         L     REG15,TCCWINDR      GET REAL ADDRESS AND
         LRA   REG15,C0(REG15)     PUT INDIRECT RECEIVER ADDRESS
         STCM  REG15,LORD3BYT,CCWDATA  STORE DATA ADDRESS
         L     REG14,TCCWINDR      IN CCW DATA ADDRESS AND INDEX.
TCCWM425 LRA   REG15,C0(WKREG3)    TRANSLATE START ADDRESS TO REAL
         ST    REG15,C0(REG14)     MOVE REAL START TO AREA
         LA    REG14,C4(REG14)     INDICATED BY INDEX. INCREMENT
         BCTR  REG0,C0             INDEX BY ENTRY LENGTH AND DECREMENT
         CLI   TCCWEFOP,CCWRDBK    INDIRECT LOOP COUNT BY 1. IF
         BNE   TCCWM430            COMMAND CODE EQ READ BACKWARD,
         O     WKREG3,TCCWRON2     ROUND RESULT UP TO END OF PAGE AND
         B     TCCWM440            BRANCH TO SEE IF LIST IS FINISHED.
         SPACE 2
TCCWM430 N     WKREG3,TCCWTRN2     OTHERWISE ROUND RESULT DOWN TO START
TCCWM440 CR    WKREG3,WKREG2       OF PAGE AND SEE IF IALLIST IS
         BE    TCCWM450            COMPLETE. COMPARE START AND END ADRS
         AR    WKREG3,WKREG1       IF EQUAL, IAL COMPLETE. IF NOT INCR
         B     TCCWM425            START ADDRESS AND BUILD NEXT ENTRY
         SPACE 2
TCCWM450 TM    TCCWMODB,TCCWPC10   PIC 10 OCCUR WHILE FIXING ? @YM04960
         BNO   TCCWM455            NO, BYPASS ZERO IDAL        @YM04960
         BCTR  REG0,C0             DECREMENT INDIRECT LOOP CT  @YM04960
         L     WKREG1,TCCWIDAL     STORE AN INVALID IDAL AFTER @ZA26337
         ST    WKREG1,C0(REG14)    LAST VALID PAGE SO THAT A   @ZA26337
*                                  CHANNEL PROTECTION CK WILL  @ZA32872
*                                  OCCUR IF IDAL IS REFERENCED @ZA26337
*                                  DURING DATA XFR    @YM04960,@ZA26337
         LA    REG14,C4(REG14)     STEP IDAW PTR IN IDAL BLOCK @YM04960
         NI    TCCWMODB,FF-TCCWPC10  RESET TCCWPC10 FLAG       @ZA12683
TCCWM455 STC   REG0,TCCWINDL       STORE INDIR LOOP COUNT, SET @YM04960
         ST    REG14,TCCWINDR      INDIRECT RECEIVER ADR TO INDEX AND
         B     TCCWS260            BRANCH TO PROCESS NEXT CCW.
         TITLE '   IECVTCCW -- CCW TRANSLATOR -- RE-TRANSLATE FUNCTION'
***********************************************************************
*                                                                     *
* ADDRESS RE-TRANSLATE FUNCTION --                                    *
*        THE BEB BLOCKS ARE SEARCHED FOR THE ADDRESS PASSED IN        *
*        REGISTER ZERO. IF FOUND, THE ADDRESS IN THE VIRTUAL          *
*        CHANNEL PROGRAM IS CALCULATED.                               *
*                                                                     *
***********************************************************************
         SPACE 2
TCCWR000 LR    CCWREG,REG0         PLACE REAL CCW ADDRESS IN REG.
         LA    CCWREG,C0(CCWREG)   ZERO HIGH BYTE FOR COMPARE
         L     BEBREG,TCCWBEB      LOAD ADDRESS OF FIRST BEB BLOCK
         USING BEB,BEBREG          ADDRESSABILITY FOR BEB BLOCK
         SPACE 2
TCCWR100 C     CCWREG,BEBRLST      CCW ADDR LESS THAN REAL START
         BL    TCCWR200            YES, NOT IN THIS BLOCK
         C     CCWREG,BEBRLEN      CCW ADDR GREATER THAN END
         BNH   TCCWR400            NO, WITHIN LIMITS OF POINTERS
         TM    BEBFLAG,BEB2INUS    SECOND SET OF POINTERS USED
         BZ    TCCWR200            NO, LOOK AT NEXT BEB
* AT THIS POINT IT IS KNOWN THAT CCW ADDRESS IS NOT LESS THAN
*  BEBRLST2 FROM LAST TWO COMPARES.
         C     CCWREG,BEBRLEN2     CCW ADDR GREATER THAN END TWO
         BNH   TCCWR300            NO, WITHIN LIMITS OF POINTERS 2
TCCWR200 L     BEBREG,BEBCHAIN     GET POINTER TO NEXT BEB
         LTR   BEBREG,BEBREG       ANOTHER BEB BLOCK
         BNZ   TCCWR100            YES, CONTINUE SCAN
         B     TCCWRC4             NO, ERROR EXIT
         SPACE 2
* CORRECT BEB FOUND CALCULATE VIRTUAL ADDRESS
         SPACE 1
TCCWR300 LA    BEBREG,BEBPTRLN(BEBREG) INCREMENT TO SECOND POINTERS
         SPACE 1
TCCWR400 S     CCWREG,BEBRLST      CALCULATE OFFSET INTO BLOCK
         A     CCWREG,BEBVRST      CALCULATE VIRTUAL CCW OFFSET
         LR    REG0,CCWREG         PLACE ADDR IN PARM REG
         B     TCCWE0R0            EXIT RC 0, DO NOT LOAD REG 0
         TITLE '    IECVTCCW -- CCW TRANSLATOR -- UNFIX-FREE ROUTINE'
***************************************************************@ZA16175
* THIS ROUTINE IS ENTERED WHEN AN ERROR OCCURS IN THE         *@ZA16175
* PROCESS OF FIXING PAGES, VIA PAGE FIX SERVICES.             *@ZA16175
*                                                             *@ZA16175
***************************************************************@ZA16175
         SPACE 1                                               @ZA16175
TCCWT000 EQU   *                                               @ZA16175
         NI    TCCWMODB,FF-TCCWPC10-TCCWPGCK-TCCWECBU          @ZA26555
*                                                 RESET FLAGS  @ZA26555
         CLI   TCCWOPTN,TCCWUNFX   UNFIX PROCESSING ACTIVE ??  @ZA16175
         BE    TCCWU500            YES, UNFIXING ACTIVE.       @ZA16175
         MVI   TCCWOPTN,TCCWPGER   SET TCCW OPTION CODE TO     @ZA16175
*                                  INDICATE FIX ERROR.         @ZA16175
         L     REG14,TCCWPLKR      LD PTR TO CURRENT FIX ENTRY @ZA16175
         SH    REG14,TCCWAINC       BACK UP TO PREV ENTRY.     @ZA16175
         OI    C4(REG14),LASTENT   SET AS LAST ENTRY.          @ZA16175
         SPACE 1                                               @ZA16175
*              ALL PAGES IN THE LAST FIX ENTRY HAVE BEEN       @ZA16175
*              UNFIXED, SO LAST FIX ENTRY IS NOT INCLUDED      @ZA16175
*              IN FIX LIST FOR UNFIXING.                       @ZA16175
***********************************************************************
*
* UNFIX - FREE FUNCTION -
*        UNFIXES DATA PAGES AND CREATES A STRING OF 160-BYTE BLOCKS
*        TO FREE.
*
***********************************************************************
         SPACE 2
TCCWU000 L     FIXREG,TCCWFIX      GET FIX LIST POINTER
         SR    REG0,REG0           ZERO ECB POINTER
         TM    TCCWMODB,TCCWECBU   IS THE ECB REQUIRED
         BZ    TCCWU050            NO, LEAVE THE REGISTER ZERO
         LA    REG0,FIXECB         POINT TO THE ECB
TCCWU050 LA    FIXREG,FIXHL(FIXREG) ZERO HIGH ORDER BYTE
         C     FIXREG,TCCWPLKR     ANY FIX LIST ENTRIES
         BE    TCCWU500            NO, NO UNFIX REQUIRED
         LR    REG1,FIXREG         LOAD PARM REG WITH LIST
         MVI   C0(FIXREG),UNFIXIND SET UNFIX REQUEST INDICATOR
         O     REG1,LISTFORM       SET LIST FORM INDICATOR
         SR    UCBREG,UCBREG       DO NOT ASSOCIATE FREE WITH TCB
         OI    TCCWMODB,TCCWPGCK   SET FLAG SO THAT IECVXFRR,  @ZA16175
*                                  IN EXPR WILL RETURN ON ERR  @ZA16175
         L     REG15,TCCWFREE      LOAD PTR TO UNFIX ROUTINE   @YM05518
         BALR  REG14,REG15         GO UNFIX THE PAGES
         NI    TCCWMODB,FF-TCCWPGCK   RESET FLAG               @ZA26555
         SPACE 2
         TM    TCCWMODB,TCCWECBU   WAS ECB REQUIRED
         BZ    TCCWU500            NO, UNFIX COMPLETE
         L     WKREG2,TCCWPAGE     SET ONE PAGE INCREMENT REG
TCCWU100 TM    C0(FIXREG),FIXCONT  CONTINUATION POINTER
         BO    TCCWU400            YES, FIND NEXT LIST
TCCWU200 L     WKREG3,C0(FIXREG)   LOAD ADDRESS OF FIRST PAGE
TCCWU300 TM    C0(WKREG3),X00      ACCESS PAGE - IF NOT IN CORE@ZA01894
*                                  A PAGE EXCEPTION WILL OCCUR
         AR    WKREG3,WKREG2       INCREMENT BY ONE PAGE
         CLM   WKREG3,LORD3BYT,C4(FIXREG) END OF FIX ENTRY
         BL    TCCWU300            NO, ACCESS NEXT PAGE
         SPACE 1
         TM    C4(FIXREG),LASTENT  END OF FIX ENTRIES
         BO    TCCWU500            YES, GATHER BLOCKS TO FREE
         LA    FIXREG,FIXEL(FIXREG) INCREMENT TO NEXT ENTRY
         B     TCCWU100            LOOP BACK TO CHECK ENTRY
         SPACE 2
TCCWU400 L     FIXREG,C0(FIXREG)   GET CONTINUATION
         B     TCCWU200            CONTINUE LOOP
         SPACE 2
TCCWU500 EQU   *
         TM    TCCWMODB,TCCWFCHN   HAVE BLOCKS BEEN CHAINED
*                                                     @ZA05848,@ZA26555
         BO    TCCWU600            YES, BYPASS CHAINING        @ZA26555
         SPACE
         MVC   TCCW(C4),TCCWINDA   MOVE IDAL BLKS TO FREE CHAIN@ZA05848
         LA    WKREG2,TCCW         LOAD CHAIN POINTER
         BAL   REG14,TCCWU900      SEARCH FOR END OF CHAIN
         SPACE 1
         MVC   C0(C4,WKREG2),TCCWFIX MV FIX LIST TO END OF CHAIN
         BAL   REG14,TCCWU900      SEARCH FOR END OF CHAIN
         SPACE 1
         MVC   C0(C4,WKREG2),TCCWBEB MOVE BEBS TO CHAIN END
         OI    TCCWMODB,TCCWFCHN   SET FREE CHAIN BUILT FLAG   @ZA26555
TCCWU600 EQU   *                                               @ZA06069
         TM    TCCWOPTN,F0         ERROR OCCUR
         BZ    TCCWRC8             NO ERROR, NORMAL RETURN
         B     TCCWRC4             ERROR, RETURN CODE 4
         SPACE 2
* SUBROUTINE TO FIND END OF CHAIN
         SPACE 1
TCCWU900 L     WKREG3,C0(WKREG2)   GET POINTER TO NEXT BLOCK     YM1928
         LA    WKREG3,C0(WKREG3)   CLEAR HIGH BYTE               YM1928
         LTR   WKREG3,WKREG3       END OF CHAIN                  YM1928
         BZR   REG14               YES RETURN TO CALLER          YM1928
         LR    WKREG2,WKREG3       GET POINTER TO NEXT CHAIN     YM1928
         B     TCCWU900            LOOP BACK
         TITLE 'IECVTCCW -- CCW TRANSLATOR -- SINGLE ADDRESS TRANSLATE'
***********************************************************************
*                                                                     *
* SINGLE ADDRESS TRANSLATION FUNCTION -                               *
*        TRANSLATE THE ADDRESS OF THE VIRTUAL CCW PASSED IN REGISTER  *
*        ZERO TO ITS CORRESPONDING ADDRESS IN THE REAL CHANNEL        *
*        PROGRAM.                                                     *
*                                                                     *
***********************************************************************
         SPACE 2
TCCWX000 LR    CCWREG,REG0         PLACE VIRTUAL ADDRESS IN REG
         LA    CCWREG,C0(CCWREG)   ZERO HIGH BYTE FOR COMPARE
         L     BEBREG,TCCWBEB      LOAD ADDRESS OF FIRST BEB BLOCK
         SPACE 2
TCCWX100 C     CCWREG,BEBVRST      CCW ADDRESS LESS THAN VIRT START
         BL    TCCWX150            YES, NOT IN THIS SEG         YM01453
         C     CCWREG,BEBVREN      CCW ADDR GREATER THAN END
         BL    TCCWX400            NO, WITHIN LIMITS OF POINTERS
TCCWX150 TM    BEBFLAG,BEB2INUS    SECOND SET OF POINTERS USED  YM01453
         BZ    TCCWX200            NO, LOOK AT NEXT BEB
         C     CCWREG,BEBVRST2     CCW ADDR GREATER THAN BEG 2  YM01453
         BL    TCCWX200            NO, OUTSIDE LIMITS OF PTRS 2 YM01453
         C     CCWREG,BEBVREN2     CCW ADDR GREATER THAN END 2
         BL    TCCWX300            NO, WITHIN LIMITS OF PTRS 2
TCCWX200 L     BEBREG,BEBCHAIN     GET POINTER TO NEXT BEB
         LTR   BEBREG,BEBREG       ANOTHER BEB BLOCK
         BNZ   TCCWX100            YES, CONTINUE SCAN
         MVI   TCCWOPTN,TCCWTRER   SET TRANSLATE ERROR
         B     TCCWRC4             NO, ERROR EXIT
         SPACE 2
TCCWX300 LA    BEBREG,BEBPTRLN(BEBREG) INCREMENT TO SECOND POINTERS
         SPACE 1
TCCWX400 S     CCWREG,BEBVRST      CALCULATE OFFSET INTO BLOCK
         A     CCWREG,BEBRLST      CALCULATE REAL CCW OFFSET
         LR    REG0,CCWREG         PLACE ADDR IN PARM REG
         B     TCCWE0R0            EXIT RC 0, DO NOT LOAD ZERO
         TITLE '    IECVTCCW -- CCW TRANSLATOR -- EXITS'
************************************************************** @ZA16169
*                                                            * @ZA16169
* T C C W   E X I T S                                        * @ZA16169
*                                                            * @ZA16169
************************************************************** @ZA16169
         SPACE 2
TCCWM900 L     WKREG3,TCCWFRC      FIND FIRST REAL CCW
         LRA   REG0,C0(WKREG3)     GET THE REAL ADDRESS
TCCWE0R0 MVI   TCCWOPTN,C0         SET OPTION BYTE TO ZERO SAYING OK
         SR    REG15,REG15         ZERO RETURN CODE
         SPACE 2
TCCWEXIT LM    REG1,REG14,TCCWRGSV LOAD REGISTERS
         BR    REG14               RETURN TO CALLER
         SPACE 2
TCCWRC4  LA    REG15,C4            RETURN CODE FOUR
         B     TCCWEXIT            RETURN TO CALLER
         SPACE 2
TCCWRC8  LA    REG15,C8            RETURN CODE 8
         B     TCCWEXIT            RETURN TO CALLER
         SPACE 2
** RETURN TO CALLER OF TCCW TO OBTAIN A 160 BYTE BLOCK.        @ZA16169
TCCWGTM0 EQU   *                                               @ZA16169
         STM   WKREG3,DATARG,TCCWSAV8   SAVE REGS 8 TO 10.     @ZA16169
TCCWGTM1 EQU   *                                               @ZA16169
         ST    WKREG1,TCCWSAV6     SAVE WORK REGISTER 1.       @ZA16169
TCCWGTM2 EQU   *                                               @ZA16169
         ST    BEBREG,TCCWSAV5     SAVE BEB REGISTER.          @ZA16169
         ST    WKREG2,TCCWSAV7     SAVE WORK REGISTER 2        @ZA16169
         ST    RTNREG,TCCWSAVD     SAVE 160B BLK REQ ADDR      @ZA16169
         MVI   TCCWOPTN,TCCWGTMN   SET TCCW OPTION CODE AND    @ZA16169
         LA    REG15,C12           RETURN TO INDICATE 160 BYTE @ZA16169
*                                  BLOCK IS REQUIRED.          @ZA16169
         B     TCCWEXIT            BRANCH TO COMMON EXIT.      @ZA16169
         TITLE 'IECVTCCW-- CCW TRANSLATOR -- RECOVERY ROUTINE'
************************************************************** @YM04960
*                                                              @YM04960
* T C C W   R E C O V E R Y  R O U T I N E                     @ZA16175
*                                                              @ZA16175
* THIS ROUTINE RECEIVES CONTROL FROM IECVXFRR, THE EXCP FRR    @ZA16175
* ROUTINE IN IECVEXPR, VIA RTM.  CONTROL IS RETURNED ON --     @ZA16175
*                                                              @ZA16175
* 1. INVALID PAGE FAULT RECOVERY ROUTINE:                      @ZA16175
*   THIS ENTRY IS NECESSARY FOR COMPATABILITY WITH OS MVT      @YM04960
*   AND VS2 RELEASE 1. IT ALLOWS THE USER TO SET A READ        @YM04960
*   COUNT LARGER THAN HIS BUFFER SIZE. THE CHANGES MADE FOR    @YM04960
*   THIS PTM WILL FIX ALL THE VALID PAGES IN THE BUFFER AND    @YM04960
*   SET THE LAST IDAL ENTRY TO ZERO SO THE CHANNEL PROGRAM     @YM04960
*   WILL GET A CHANNEL PROTECTION CHECK IF THE RECORD BEING    @YM04960
*   READ IS LARGER THAN THE VALID SIZE OF THE BUFFER.          @YM04960
*                                                              @YM04960
* 2. ABEND 028 FROM PAGE FIX SERVICES:                         @ZA16175
*    ALL PAGES UP TO ABEND CONDITION HAVE BEEN UNFIXED.  THE   @ZA16175
*    UNFIX ENTRY IS NOT NECESSARY FOR THE UNFIX PROCESS.       @ZA16175
*                                                              @ZA16175
* 3. ABEND 171 FROM PAGE FIX SERVICES:                         @ZA16175
*    ALL PAGES UP TO ABEND CONDITION HAVE BEEN UNFIXED. THE    @ZA16175
*    UNFIX ENTRY IS NOT NECESSARY FOR THE UNFIX PROCESS.       @ZA16175
************************************************************** @YM04960
IECVTCFR LR    BASREG,REG15        SAVE BASE AS FROM RTM       @ZA05153
         LA    REG15,IECVTCFR-IECVTCCW CALCULATE THIS DISP.    @ZA05153
         SR    BASREG,REG15        BACK UP BASE REGISTER       @ZA05153
         LH    REG2,TCCWSAVA+C2    LOAD SAVED ABEND CODE       @ZA16175
         CH    REG2,ABEND028       ABEND CODE 028 ??           @ZA16175
         BE    TCCWT000            YES, CK FOR UNFIXING        @ZA16175
         CH    REG2,ABEND171       ABEND CODE 171 ??           @ZA16175
         BE    TCCWT000            YES, CK FOR UNFIXING        @ZA16175
         SPACE 1                                               @ZA16175
*                             CHECK FOR COMPATABILITY CASE     @ZA16175
         L     REG15,TCCWPLKR      RESTORE FIX ENTRY PTR       @ZA05153
         L     REG2,C0(REG15)      GET FIRST PAGE TO BE FIXED  @YM04960
         CR    REG2,REG1           WAS FIRST PAGE INVALID      @YM04960
         BE    TCCWT000            YES, FREE CORE. 800 ABEND   @ZA16169
         L     WKREG1,TCCWTCB      GET TCB ADDRESS             @YM04960
         USING TCB,WKREG1          ADDRESSABILITY FOR TCB.     @YM04960
         TM    TCBPKF,TCBFLAG      KEY ZERO REQUESTOR ?        @YM04960
         BZ    TCCWT000            YES, FREE CORE. 800 ABEND.  @ZA16169
         OI    TCCWMODB,TCCWPC10   INDICATE A PIC 10 OCCURRED. @YM04960
         BCTR  REG1,REG0           GET LAST GOOD PAGE.         @YM08367
         STCM  REG1,LORD3BYT,C5(REG15)  SET LAST GOOD PAGE TO  @ZA26258
*                                       THIS FIX ENTRY.        @ZA26258
         ST    REG1,TCCWHICA       RESET HI FIX ADDRESS.       @YM04960
*        THE INSTRUCTION TO ADJUST THE END DATA ADDRESS TO THE @ZA26257
*        LAST GOOD DATA ADDRESS IS DELETED.  THE END DATA      @ZA26257
*        ADDRESS WILL BE ADJUSTED IN THE IDAL ROUTINE.         @ZA26257
         B     TCCWM063            RESUME PROCESSING           @YM04960
         DROP  WKREG1                                          @YM04960
         TITLE '    IECVTCCW -- CCW TRANSLATOR -- CONSTANTS'
TCCWFX   DC    V(IEAVPSIX)         PAGE FIX ENTRY POINT        @YM05518
TCCWFREE DC    V(IEAVPSIF)         UNFIX ENTRY POINT           @YM05518
TCCWTRUN DC    X'FFFFF000'         FIELD FOR TRUNCATING TO 4K BOUNDARY
TCCWROUN DC    X'00000FFF'         FIELD OO ROUND UP TO PAGE END
TCCWTEST TM    UCBTBYT3,C0         COMMAND TEST
LISTFORM DC    AL1(128)            BIT 0 OF REG1 INDICATOR
         DC    AL3(0)              FOR FIX LIST FORMAT FOR FIX
TCCWTRN2 DC    X'FFFFF800'         2K BOUNDARY FOR CHANNEL
TCCWRON2 DC    X'000007FF'         2K BOUNDARY FOR CHANNEL
TCCWPOS  DC    X'0000FFFF'         MASK TO MAKE A POSITIVE VALUE FROM A
*                                  HALF WORD
TCCWRFIX DC    X'40000000'         REGISTER FIX FLAGS
TCCWPAGE DC    X'00001000'         PAGE SIZE FOR INCREMENT
***********************************************************************
*****************INVALID IDAW FOR OS MVT COMPATABILITY*****************
*                                                              @ZA32872
* THE INVALID IDAW WORD MUST BE CONSTRUCTED TO CAUSE A CHANNEL @ZA32872
* PROTECTION CHECK INSTEAD OF CHANNEL PROGRAM CHECK. THERE IS  @ZA32872
* A CASE WHERE SOME CHANNELS WILL TAKE CHARGE OF THE NEXT IDAW @ZA32872
* AND TREAT THE 'INVALID IDAW' (FF00000F) AS THE NEXT IDAW AND @ZA32872
* SO PRESENT A FALSE CHANNEL PROGRAM CHECK.  THIS CASE OCCURS  @ZA32872
* WHEN THE LAST DATA TRANSFER COMPLETES ON THE LAST BYTE OF    @ZA32872
* THE LAST VALID PAGE.  SINCE THE BYTE COUNT IS NOT ZERO, THE  @ZA32872
* CHANNEL FETCHES THE NEXT IDAW AND TAKES CHARGE OF IT EVEN    @ZA32872
* THOUGH THERE IS NO DATA TRANSFER TO STORAGE.                 @ZA32872
***********************************************************************
TCCWIDAL DC    X'00000000'                                     @ZA32872
TCCWAINC DC    H'8'                CCW LENGTH
TCCW16   DC    H'16'               TWO CCWS WORTH
ABEND028 DC    X'0028'             ABEND 028                   @ZA16175
ABEND171 DC    X'0171'             ABEND 171                   @ZA16175
         EJECT
* THE OPTABLE CONTAINS AN INDICATOR FOR EACH COMMAND OF STATUS
* MODIFIERS AND CONTROL COMMANDS DEPENDING ON DEVICE TYPE
* X'80' INDICATES TAPE
* X'40' INDICATES TELEPROCESSING
* X'20' INDICATES DIRECT ACCESS
* X'10' INDICATES DISPLAY
* X'08' INDICATES UNIT RECORD
*                                                              @ZA12710
* X'04' RESERVED                                               @ZA12710
* X'02' INDICATES UNIQUE DEVICE TESTING REQUIRED FOR FOLLOWING @ZA12710
*       UNIT RECORD DEVICES: 1287, 1288, 3211, 3851, 3886      @ZA12710
*       3890, 3540 AND 3800.                                   @ZA12710
* X'01' 0 - STATUS MODIFIER REQUIRED FOR COMMAND CODE          @ZA12710
*       1 - INDICATES CONTROL COMMAND, NONE DATA TRANSFER      @ZA12710
         SPACE 1                                               @ZA12710
* THE MASK IS TESTED AGAINST THE DEVICE TYPE. IF A BIT IS ON IN
* COMMON, THEN THE COMMAND IS EITHER A STATUS MODIFIER OR
* CONTROL COMMAND. THE LOW ORDER BIT IS THEN TESTED TO SEE WHICH
* IT IS.
         SPACE 2
*        DC    X'-0-1-2-3-4-5-6-7-8-9-A-B-C-D-E-F'     X'--'
OPTABLE  DS    0XL256
         DC    X'000A00F90000438B0042001900000081'     X'0-'   @ZA24880
         DC    X'000000A9000000990000000908004099'     X'1-'   @ZA12710
         DC    X'0000009B002000CB002000D9002000D1'     X'2-'   @ZA16184
         DC    X'0020009B002000990020009908000099'     X'3-'   @ZA12710
         DC    X'0000009B002000090020000900200000'     X'4-'   @ZA12710
         DC    X'00200091002000090000009B08000000'     X'5-'   @ZA12710
         DC    X'0000009B002000090020009900200000'     X'6-'   @ZA12710
         DC    X'0020009B002000090000009908000000'     X'7-'   @ZA12710
         DC    X'0000009B0000000A0000001900000000'     X'8-'   @ZA12710
         DC    X'00000899210000090000009900000000'     X'9-'   @ZA12710
         DC    X'0000009B002000090020009900200000'     X'A-'   @ZA12710
         DC    X'0020089B212000090020009900000000'     X'B-'   @ZA13435
         DC    X'00000099002000090020009900200000'     X'C-'   @ZA12710
         DC    X'00200099412000090000009900000000'     X'D-'   @ZA12710
         DC    X'00000099002000090020009900200000'     X'E-'   @ZA12710
         DC    X'00200091412000090000009100000000'     X'F-'   @ZA12710
*                                                              @ZA04760
TCCWZAP  DC    3CL16'IECVTCCW PATCH  '  ZAP AREA               @ZA08754
IDENTF   DC    C'IECVTCCW'         TRANSLATOR ID
         DC    C' UZ19523  '       PTF NUMBER                  @ZA32872
         DC    C'&SYSDATE'                                     @ZA08128
         END
