         TITLE 'IECVIRST - IOS LOST CHANNEL RECOVERY PROCESSOR         *
                        '
IECVIRST CSECT ,                                                   0001
@MAINENT BALR  @15,0                                               0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(24)                                             0001
         DC    C'IECVIRST 78009  UZ85100 '                         0001
         DROP  @15
@PROLOG  BALR  @09,0                                               0001
@PSTART  LA    @10,4095(,@09)                                      0001
         USING @PSTART,@09                                         0001
         USING @PSTART+4095,@10                                    0001
*   R11=R0;                         /* ADDR OF SRB IN REG FOR      0206
*                                      ADDRESSABILITY                */
         LR    R11,R0                                              0206
*   GEN REFS(R11,DISABLE);                                         0207
         STNSM 0(R11),DISABLE          DISABLE, ST CURR MASK IN SRB
*   PSAIOSUP='1'B;                  /* IOS SUPER BIT, DISABLED     0208
*                                      WITHOUT HOLDING A LOCK        */
         OI    PSAIOSUP,B'10000000'                                0208
*   R11=ADDR(IRSTFRR);              /* ADDR OF FRR FOR SETFRR MACRO  */
         LA    R11,IRSTFRR                                         0209
*   GEN REFS(R11) SETS(R14,R4,FRRWPTR) FLOWS(IRSTFRR);             0210
*                                                  /*ADD FRR TO STACK*/
ADDRFRR1 SETFRR    A,FRRAD=(R11),WRKREGS=(R14,R4),PARMAD=(FRRWPTR)
*   FRRBASE1=R9;                    /* SAVE BASE REG IN FRR WORK     */
         ST    R9,FRRBASE1(,FRRWPTR)                               0211
*   FRRBASE2=R10;                   /* SAVE BASE REG IN FRR WORK     */
         ST    R10,FRRBASE2(,FRRWPTR)                              0212
*   FRRINPUT=R1;                    /* SAVE INPUT PARAMETER          */
         ST    R1,FRRINPUT(,FRRWPTR)                               0213
*   RFY                                                            0214
*     R15 RSTD;                                                    0214
*   GEN SETS(R14,R15,R0,R1) REFS(R11,R12,R13);                     0215
*                                           /*OBTAIN SALLOC LOCK     */
GETSALC1 SETLOCK   OBTAIN,TYPE=SALLOC,MODE=UNCOND,DISABLED,REGS=USE,   X
               RELATED=(FRESALC1,'OBTAIN SALLOC LOCK')
*   FRRSALOC='1'B;                  /* INDICATE SALLOC LOCK HELD     */
         OI    FRRSALOC(FRRWPTR),B'10000000'                       0216
*   GEN(L     R15,@SIZDATD);        /* LEN, SUBPOOL FOR GETMAIN      */
         L     R15,@SIZDATD
*   GEN(LA    R0,0(R15));           /* CLEAR HIGH ORDER BYTE         */
         LA    R0,0(R15)
*   RFY                                                            0219
*     R3 RSTD;                                                     0219
*   GEN REFS(R11) SETS(R4,R1,R3,R14,R15);                          0220
*                                      /*OBTAIN GENERAL WORK AREA    */
OBTMAIN1 GETMAIN   RU,LV=(0),BRANCH=(YES,GLOBAL),SP=245
*   RFY                                                            0221
*     R3 UNRSTD;                                                   0221
*   IRSTWPTR=R1;                    /* BASE FOR AUTO DATA AREA       */
         LR    IRSTWPTR,R1                                         0222
*   GEN;                                                           0223
         USING @DATD,IRSTWPTR
*   IRSTSTRT=IRSTSTRT&&IRSTSTRT;    /* CLEAR FIRST RESERVE TAB SEG   */
         XC    IRSTSTRT(208),IRSTSTRT                              0224
*   IRSTFLG1=IRSTFLG1&&IRSTFLG1;    /* CLEAR FLAGS                   */
         XC    IRSTFLG1(2),IRSTFLG1                                0225
*   FRRGWPTR=R1;                    /* SAVE WORK AREA PTR IN FRR WK  */
         ST    R1,FRRGWPTR(,FRRWPTR)                               0226
*   GEN REFS(R11,R12,R13) SETS(R14,R15,R0,R1);                     0227
*                                           /*RELEASE SALLOC LOCK    */
FRESALC1 SETLOCK   RELEASE,TYPE=SALLOC,DISABLED,REGS=USE,              X
               RELATED=(GETSALC1,'RELEASE SALLOC LOCK')
*   RFY                                                            0228
*     R15 UNRSTD;                                                  0228
*   FRRSALOC='0'B;                  /* INDICATE SALLOC LOCK FREED    */
         NI    FRRSALOC(FRRWPTR),B'01111111'                       0229
*   IF FRRINCOD=MACHCKIN THEN       /* IF ERR DETECTED ON MACH CHK   */
         CLI   FRRINCOD(FRRWPTR),1                                 0230
         BNE   @RF00230                                            0230
*     DO;                                                          0231
*       PCCAIRST='1'B;              /* IND IECVIRST RECOVERING LOST
*                                      CHANNELS DETECTED ON MACH CK.
*                                      IF IGFCCHED DETECTS 'MORE'  0232
*                                      LOST CHANNELS WHILE PCCAIRST
*                                      IS SET HE WILL SET PCCAEXDM.  */
         L     @15,PCCAPTR                                         0232
         OI    PCCAIRST(@15),B'10000000'                           0232
*       PWAEDSRB='00'X;             /* MACH CK SRB IS AVAILABLE      */
         L     @15,PWAPTR(,@15)                                    0233
         MVI   PWAEDSRB(@15),X'00'                                 0233
*     END;                                                         0234
*   ELSE                                                           0235
*     PCCASRBL='00'X;               /* FREE CCH MAINLINE SRB         */
         B     @RC00230                                            0235
@RF00230 L     @15,PCCAPTR                                         0235
         MVI   PCCASRBL(@15),X'00'                                 0235
*   FRRSRBLK='1'B;                  /* IND SRB AVAILABLE             */
@RC00230 OI    FRRSRBLK(FRRWPTR),B'00100000'                       0236
*   IRSTCAT=PCCACAT;                /* COPY CAT INCASE A HUNG INTER-
*                                      FACE OCCURS WHILE IECVIRST IS
*                                      PROCESSING THIS ERROR         */
         L     @15,PCCAPTR                                         0237
         MVC   IRSTCAT(128),PCCACAT(@15)                           0237
*   RFY                                                            0238
*    (R0,                                                          0238
*     R1,                                                          0238
*     R11,                                                         0238
*     R14,                                                         0238
*     R4) UNRSTD;                                                  0238
*                                                                  0238
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SEGMENT BUILDS THE RESERVE TABLE. THE COPIED CAT, IN     */
*   /* IRSTCAT IS SCANNED FOR CHANNELS SUFFERING AN ERR THAT MATCHES */
*   /* THE INPUT PARAM: MACHCKIN->CATMCRST,CHANCKIN->CATCCRST. WHEN  */
*   /* SUCH A CHANNEL IS FOUND, INTERNAL PROCEDURE FINDUCB IS CALLED */
*   /* TO LOCATE THE UCB FOR EACH DEVICE ON THE CHANNEL. IF THE      */
*   /* DEVICE IS RESERVED IT WILL BE INSERTED INTO THE RESERVE TABLE.*/
*   /* IF A RESERVE TABLE SEGMENT IS FILLED, ANOTHER SEGMENT WILL BE */
*   /* OBTAINED.                                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0239
*   RFY                                                            0239
*    (UCBPTR,                                                      0239
*     R11,                                                         0239
*     R14) RSTD;                                                   0239
*   IRSTRPTR=ADDR(IRSTRESV);        /* ADDR OF FIRST SEG             */
         LA    @15,IRSTRESV                                        0240
         ST    @15,IRSTRPTR                                        0240
*   RESVCNT=1;                      /* FIRST ENTRY IN SEG            */
         LA    @05,1                                               0241
         ST    @05,RESVCNT(,@15)                                   0241
*   IRSTCATP=ADDR(IRSTCAT);         /* ADDRESS COPIED CAT            */
         LA    IRSTCATP,IRSTCAT                                    0242
*   RFY                                                            0243
*     CAT BASED(IRSTCATP);          /* SCAN COPIED CAT               */
*   IRSTCHMK=IRSTCHMK&&IRSTCHMK;    /* ZERO CHAN MASK                */
         XC    IRSTCHMK(4),IRSTCHMK                                0244
*   DO IRSTLOOP=1 TO LENGTH(IRSTCAT)/LENGTH(CAT);/* CHECK EACH ENTRY
*                                      IN CAT *NOTE* WE ARE SCANNING
*                                      COPIED CAT                    */
         STC   @05,IRSTLOOP                                        0245
@DL00245 DS    0H                                                  0246
*     IRSTCHAN=IRSTLOOP-1;          /* CHAN ADDRESS                  */
         BCTR  @05,0                                               0246
         STC   @05,IRSTCHAN                                        0246
*     IF(FRRINCOD=MACHCKIN&CATMCRST='1'B)×/* MACH CK DETECTED        */
*         (FRRINCOD=CHANCKIN&CATCCRST='1'B) THEN/* CHAN CK DETECTED  */
         CLI   FRRINCOD(FRRWPTR),1                                 0247
         BNE   @GL00001                                            0247
         TM    CATMCRST(IRSTCATP),B'00010000'                      0247
         BO    @RT00247                                            0247
@GL00001 CLI   FRRINCOD(FRRWPTR),2                                 0247
         BNE   @RF00247                                            0247
         TM    CATCCRST(IRSTCATP),B'00100000'                      0247
         BNO   @RF00247                                            0247
@RT00247 DS    0H                                                  0248
*       DO;                         /* SCAN LOST CHAN FOR RESERVED 0248
*                                      DEVICES                       */
*         IRSTTEMP=HIGHORDR;        /* BIT 0 IS ON                   */
         MVC   IRSTTEMP(4),@CB02987                                0249
*         SRL(IRSTTEMP,IRSTCHAN);   /* CORRESPONDING MASK BIT TO CHAN
*                                      IS ON                         */
         L     @15,IRSTTEMP                                        0250
         SLR   @05,@05                                             0250
         IC    @05,IRSTCHAN                                        0250
         SRL   @15,0(@05)                                          0250
         ST    @15,IRSTTEMP                                        0250
*         IRSTCHMK=IRSTCHMK×IRSTTEMP;/* ACCUMULATE LOST CH           */
         OC    IRSTCHMK(4),IRSTTEMP                                0251
*         IRSTCALL=ADDR(FICALL1);   /* RTN FINDUCB IS TO CALL        */
         LA    @15,FICALL1                                         0252
         ST    @15,IRSTCALL                                        0252
*         RFY                                                      0253
*          (R0,                                                    0253
*           R1,                                                    0253
*           R3,                                                    0253
*           R4,                                                    0253
*           R13,                                                   0253
*           R15) RSTD;              /* FINDUCB PATH SETS             */
*         CALL FINDUCB;             /* LOCATE UCB                    */
         BAL   @14,FINDUCB                                         0254
*         RFY                                                      0255
*          (R0,                                                    0255
*           R1,                                                    0255
*           R3,                                                    0255
*           R4,                                                    0255
*           R13,                                                   0255
*           R15) UNRSTD;                                           0255
*FICALL1:                                                          0256
*         PROC OPTIONS(NOSAVE,NOSAVEAREA);/* FICALL1 PROCEEDURE IS 0256
*                                      CALLED BY THE FINDUCB       0256
*                                      PROCEDURE FOR EACH DEVICE ON
*                                      THE LOST CHAN. FICALL1 WILL 0256
*                                      DETERMINE IF THE DEVICE IS  0256
*                                      RESERVED, ADD IT TO THE     0256
*                                      RESERVE TABLE AND RETURN TO 0256
*                                      FINDUCB. FINDUCB WILL CONTINUE
*                                      TO CALL FICALL1 UNTIL ALL THE
*                                      DEVICES ON THE LOST CHANNEL 0256
*                                      HAVE BEEN PROCESSED. FINDUCB
*                                      WILL THEN RETURN TO ITS     0256
*                                      CALLER.                       */
         B     @PB00002                                            0256
FICALL1  DS    0H                                                  0257
*         IRSTFI14=R14;             /* RET ADDR-> FINDUCB            */
         ST    R14,IRSTFI14                                        0257
*         IF UCBCPU=PSACPUSA&       /* LAST SIO THIS CPU     @ZM47978*/
*             UCBCHA=IRSTCHAN&      /* LAST SIO LOST CHAN            */
*             UCBIORST='0'B THEN    /* NOT ALREADY PROCES            */
         SLR   @15,@15                                             0258
         IC    @15,UCBCPU(,UCBPTR)                                 0258
         CH    @15,PSACPUSA                                        0258
         BNE   @RF00258                                            0258
         CLC   UCBCHA(1,UCBPTR),IRSTCHAN                           0258
         BNE   @RF00258                                            0258
         TM    UCBIORST(UCBPTR),B'10000000'                        0258
         BNZ   @RF00258                                            0258
*           DO;                     /* PROCESS DEVICE                */
*             IF UCB3DACC='1'B&     /* DASD                          */
*                 UCBRR='1'B&       /* SHARABLE DEVICE               */
*                 UCBRESVH='1'B&    /* RESERVED                      */
*                 UCBSQC^=0 THEN    /* NO. RESERVE MACROS            */
         TM    UCB3DACC(UCBPTR),B'00100000'                        0260
         BNO   @RF00260                                            0260
         TM    UCBRR(UCBPTR),B'00100000'                           0260
         BNO   @RF00260                                            0260
         TM    UCBRESVH(UCBPTR),B'00010000'                        0260
         BNO   @RF00260                                            0260
         CLI   UCBSQC(UCBPTR),0                                    0260
         BE    @RF00260                                            0260
*               DO;                 /* RESERVED DEVICE               */
*                 FRRRESVE='1'B;    /* IND RESERVE FOUND             */
         OI    FRRRESVE(FRRWPTR),B'00010000'                       0262
*                 RESVDEVA(RESVCNT)=UCBCHAN;/* DEVICE ADDRESS        */
         L     @15,IRSTRPTR                                        0263
         L     @05,RESVCNT(,@15)                                   0263
         LR    @04,@05                                             0263
         SLA   @04,4                                               0263
         SLR   @03,@03                                             0263
         ICM   @03,3,UCBCHAN(UCBPTR)                               0263
         LA    @02,0(@04,@15)                                      0263
         AL    @02,@CF03300                                        0263
         STH   @03,RESVDEVA-8(,@02)                                0263
*                 RESVUCBA(RESVCNT)=UCBPTR;/* UCB ADDRESS            */
         AL    @15,@CF03301                                        0264
         ST    UCBPTR,RESVUCBA-12(@04,@15)                         0264
*                 IF RESVCNT=MAXENTRS THEN/* RESERVE SEG FULL        */
         CH    @05,@CH00796                                        0265
         BNE   @RF00265                                            0265
*                   DO;             /* GET ANOTHER SEG               */
*                     R11=IRSTUCBL; /* FREE UCB LOCK                 */
         L     R11,IRSTUCBL                                        0267
*                     RFY                                          0268
*                      (R15,                                       0268
*                       R0,                                        0268
*                       R1) RSTD;                                  0268
*                     GEN REFS(R11,R12,R13) SETS(R14,R15,R0,R1);   0269
FREUCB2  SETLOCK   RELEASE,TYPE=IOSUCB,ADDR=(11),DISABLED,REGS=USE,    X
               RELATED=(GETUCB1,'FREE UCBLOCK')
*                     RFY                                          0270
*                      (R15,                                       0270
*                       R0,                                        0270
*                       R1) UNRSTD;                                0270
*                     FRRSUCB='0'B; /* IND UCB LOCK FREED            */
         NI    FRRSUCB(FRRWPTR),B'10111111'                        0271
*                     IRSTOBPN=LENGTH(IRSTRESV);/* LEN OF RESERE SEG */
         LA    IRSTOBPN,200                                        0272
*                     RFY                                          0273
*                      (R0,                                        0273
*                       R1,                                        0273
*                       R3,                                        0273
*                       R4,                                        0273
*                       R15) RSTD;  /* OBTSTOR PATH SETS R0,R1,R3, 0273
*                                      R4,R14,R15                    */
*                     CALL OBTSTOR; /* GET ANOTHER SEG               */
         BAL   @14,OBTSTOR                                         0274
*                     RFY                                          0275
*                      (R0,                                        0275
*                       R1,                                        0275
*                       R3,                                        0275
*                       R4,                                        0275
*                       R15) UNRSTD;                               0275
*                     IRSTOBPN->RESVTAB=IRSTOBPN->RESVTAB&&IRSTOBPN->
*                         RESVTAB;  /* CLEAR                         */
         XC    RESVTAB(200,IRSTOBPN),RESVTAB(IRSTOBPN)             0276
*                     RESVNEXT=IRSTOBPN;/* CHAIN TO PREVIOUS         */
         L     @15,IRSTRPTR                                        0277
         ST    IRSTOBPN,RESVNEXT(,@15)                             0277
*                     IRSTRPTR=IRSTOBPN;/* ADDR NEW SEGMENT          */
         ST    IRSTOBPN,IRSTRPTR                                   0278
*                     RESVCNT=1;    /* FIRST ENTRY                   */
         L     @15,IRSTRPTR                                        0279
         MVC   RESVCNT(4,@15),@CF00103                             0279
*                   END;            /* END GET ANOTHER        SEGMENT*/
*                 ELSE                                             0281
*                   RESVCNT=RESVCNT+1;/* SEGMENT NOT FULL, SETUP FOR
*                                      NEXT ENTRY                    */
         B     @RC00265                                            0281
@RF00265 L     @15,IRSTRPTR                                        0281
         LA    @05,1                                               0281
         AL    @05,RESVCNT(,@15)                                   0281
         ST    @05,RESVCNT(,@15)                                   0281
*               END;                /* END RESERVE DEV PROCESS       */
*             ELSE                                                 0283
*               UCBRESVH='0'B;      /* DEVICE NOT RESERVED, TURN OFF
*                                      RESERVE IND. IOS MAY HAVE A 0283
*                                      DEVICE RESERVED THAT DOES NOT
*                                      NEED TO BE RESERVED (UCBSQC=0)*/
         B     @RC00260                                            0283
@RF00260 NI    UCBRESVH(UCBPTR),B'11101111'                        0283
*           END;                    /* END PROCESS DEVICE            */
*         ELSE                                                     0285
*           ;                       /* LAST SIO NOT FROM THIS CPU    */
@RF00258 DS    0H                                                  0286
*         R14=IRSTFI14;             /* RESTORE RETURN ADDR           */
@RC00258 L     R14,IRSTFI14                                        0286
*       END FICALL1;                                               0287
@EL00002 DS    0H                                                  0287
@EF00002 DS    0H                                                  0287
@ER00002 BR    @14                                                 0287
@PB00002 DS    0H                                                  0288
*   END;                            /* FINISHED WITH CHANNEL         */
*   ELSE                                                           0289
*     ;                             /* CHAN NOT LOST                 */
@RF00247 DS    0H                                                  0290
*   IRSTCATP=IRSTCATP+LENGTH(CAT);  /* PTR TO NEXT ENTRY             */
         AH    IRSTCATP,@CH00101                                   0290
*   END;                            /* DONE WITH ALL CHANNELS        */
         LA    @05,1                                               0291
         SLR   @15,@15                                             0291
         IC    @15,IRSTLOOP                                        0291
         ALR   @05,@15                                             0291
         STC   @05,IRSTLOOP                                        0291
         CH    @05,@CH00830                                        0291
         BNH   @DL00245                                            0291
*   RFY                                                            0292
*     CAT BASED(CATPTR);                                           0292
*   RFY                                                            0293
*    (UCBPTR,                                                      0293
*     R11,                                                         0293
*     R14) UNRSTD;                                                 0293
*   IF FRRINCOD=MACHCKIN×           /* IF MACH CK DETECT ERR         */
*       (FRRINCOD=CHANCKIN&FRRRESVE='1'B) THEN/* OR CHAN CK WITH   0294
*                                      RESERVE                       */
         CLI   FRRINCOD(FRRWPTR),1                                 0294
         BE    @RT00294                                            0294
         CLI   FRRINCOD(FRRWPTR),2                                 0294
         BNE   @RF00294                                            0294
         TM    FRRRESVE(FRRWPTR),B'00010000'                       0294
         BNO   @RF00294                                            0294
@RT00294 DS    0H                                                  0295
*     DO;                           /* COMMUNICATE WITH OPER         */
*                                                                  0295
*       /*************************************************************/
*       /*                                                           */
*       /* THIS SEGMENT COMMUNICATES WITH THE OPERATOR VIA           */
*       /* RESTARTABLE WAIT STATES. IT IS INCLUDED BY SEGMENT        */
*       /* RESVSCAN IF THE LOSS OF THE CHANNEL(S) WAS DETECTED DURING*/
*       /* PROCESSING FOR AN EXTERNAL DAMAGE MACHINE CHECK OR DURING */
*       /* PROCESSING FOR A CHANNEL CHECK AND RESERVED DEVICES EXIST */
*       /* ON THE LOST CHANNEL. WAIT STATE CODE 04D IS FOR CHANNEL   */
*       /* CHECK WITH RESERVES. WAIT STATE CODE 04C IS FOR MACHINE   */
*       /* CHECK WITH RESERVES. WAIT STATE CODE 04B IS FOR MACHINE   */
*       /* CHECK WITHOUT RESERVES. LOADWAIT IS CALLED TO ACTUALLY    */
*       /* CAUSE THE WAIT STATE TO BE LOADED.                        */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0296
*       IF FRRINCOD=MACHCKIN THEN   /* IF DETECTED DURING MACH CK    */
         CLI   FRRINCOD(FRRWPTR),1                                 0296
         BNE   @RF00296                                            0296
*         DO;                       /* DETERMINE CORRECT WAIT CODE   */
*           IF FRRRESVE='1'B THEN   /* IF RESERVED DEVICES           */
         TM    FRRRESVE(FRRWPTR),B'00010000'                       0298
         BNO   @RF00298                                            0298
*             IRSTWTCD=MCRESERV;    /* RESERVED CODE ON MACH CK      */
         MVC   IRSTWTCD(4),@CF02948                                0299
*           ELSE                                                   0300
*             IRSTWTCD=MCNORESR;    /* CODE FOR NO RESERVES          */
         B     @RC00298                                            0300
@RF00298 MVC   IRSTWTCD(4),@CF02946                                0300
*         END;                                                     0301
*       ELSE                                                       0302
*         IRSTWTCD=CCRESERV;        /* CHAN CK WITH RESERVED DEV     */
         B     @RC00296                                            0302
@RF00296 MVC   IRSTWTCD(4),@CF02950                                0302
*RELOADWT:                                                         0303
*       ;                           /* IF OPER ACTION CODE REQ AND IS
*                                      INVALID OR REQ RE-LOAD WAIT,
*                                      BRANCH TO THIS LABEL          */
@RC00296 DS    0H                                                  0303
RELOADWT DS    0H                                                  0304
*       IRSTWAIT='1'B;              /* IND WAIT IS RESTARTABLE       */
         OI    IRSTWAIT,B'10000000'                                0304
*       RFY                                                        0305
*        (R0,                                                      0305
*         R1,                                                      0305
*         R3,                                                      0305
*         R4,                                                      0305
*         R13,                                                     0305
*         R14,                                                     0305
*         R15) RSTD;                /* LOADWAIT PATH SETS THESE      */
*       CALL LOADWAIT;              /* CAUSE WAIT STATE TO BE LOAD   */
         BAL   @14,LOADWAIT                                        0306
*       RFY                                                        0307
*        (R0,                                                      0307
*         R1,                                                      0307
*         R3,                                                      0307
*         R4,                                                      0307
*         R13,                                                     0307
*         R14,                                                     0307
*         R15) UNRSTD;                                             0307
*       IF FRRINCOD=MACHCKIN&       /* IF ACTION CODE REQ AND        */
*           (IRSTOPAC^=ACDOWAIT&IRSTOPAC^=ACNOWAIT)/* INVALID OR REQ
*                                      RE-LOAD                       */
*         THEN                                                     0308
         CLI   FRRINCOD(FRRWPTR),1                                 0308
         BNE   @RF00308                                            0308
         CLI   IRSTOPAC,X'02'                                      0308
         BE    @RF00308                                            0308
         CLI   IRSTOPAC,X'01'                                      0308
         BNE   @RT00308                                            0308
*         GO TO RELOADWT;           /* GO RE-LOAD WAIT STATE         */
*       ELSE                                                       0310
*         ;                                                        0310
@RF00308 DS    0H                                                  0311
*     END;                          /* END COMM WITH OPER            */
*   ELSE                                                           0312
*     ;                                                            0312
*                                                                  0312
@RF00294 DS    0H                                                  0313
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SEGMENT WILL ATTEMPT TO RECOVER THE LOST CHANNELS. IF THE*/
*   /* LOST CHANNEL(S) WAS DETECTED DURING I/O INTERRUPT PROCESSING, */
*   /* SEGMENT HUNGINTF IS INCLUDED TO RECOVER A HUNG INTERFACE      */
*   /* CONDITION. ELSE, SEGMENT MACHCHK IS INCLUDED TO RECOVER LOST  */
*   /* CHANNELS DETECTED DURING PROCESSING FOR AN EXTERNAL DAMAGE    */
*   /* MACHINE CHECK. MESSAGE IEA410I IS ISSUED FOR ANY CHANNEL THAT */
*   /* FAILED TO RECOVER.                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0313
*   FRRCLRCH='1'B;                  /* IND CHANNELS RESET FOR FRR    */
         OI    FRRCLRCH(FRRWPTR),B'01000000'                       0313
*   IF FRRINCOD=CHANCKIN THEN       /* IF SCHED VIA CHAN CK HANDLER  */
         CLI   FRRINCOD(FRRWPTR),2                                 0314
         BNE   @RF00314                                            0314
*     DO;                           /* RECOVER HUNG INTERFACE        */
*                                                                  0315
*       /*************************************************************/
*       /*                                                           */
*       /* THIS SEGMENT WILL ATTEMPT TO RECOVER A HUNG INTERFACE     */
*       /* CONDITION. IT IS INCLUDED BY SEGMENT RCVCHANS WHEN        */
*       /* IECVIRST IS SCHEDULED BY THE CCH. THIS SEGMENT WILL SCAN  */
*       /* THE COPIED CAT FOR A CHANNEL(S) SUFFERING A HUNG INTERFACE*/
*       /* CONDITION. A CLEAR CHANNEL (CLRCH) INSTRUCTION WILL THEN  */
*       /* BE ISSUED TO THE CHANNEL. A TCH INSTRUCTION WILL THEN BE  */
*       /* ISSUED. A CC=0 RETURNED FROM THE CLRCH INSTRUCTION AND THE*/
*       /* TCH INSTRUCTION INDICATES SUCCESSFUL RECOVERY OF THE      */
*       /* CHANNEL. IF ANY OTHER CC IS RETURNED FROM EITHER          */
*       /* INSTRUCTION, THE CHANNEL IS ASSUMED PERMANENTLY LOST AND  */
*       /* WILL NOT BE REUSED.                                       */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0316
*       RFY                                                        0316
*         R15 RSTD;                                                0316
*       IRSTCATP=ADDR(IRSTCAT);     /* ADDRESS OF COPIED CAT         */
         LA    IRSTCATP,IRSTCAT                                    0317
*       RFY                                                        0318
*         CAT BASED(IRSTCATP);                                     0318
*       DO IRSTLOOP=1 TO LENGTH(IRSTCAT)/LENGTH(CAT);/* SCAN COPIED
*                                      CAT                           */
         LA    @14,1                                               0319
         STC   @14,IRSTLOOP                                        0319
@DL00319 DS    0H                                                  0320
*         IRSTCHAN=IRSTLOOP-1;      /* CHANNEL ADDRESS               */
         BCTR  @14,0                                               0320
         STC   @14,IRSTCHAN                                        0320
*         IF CATCCRST='1'B THEN     /* IF HUNG INTERFACE CONDITION   */
         TM    CATCCRST(IRSTCATP),B'00100000'                      0321
         BNO   @RF00321                                            0321
*           DO;                     /* RECOVER CHANNEL               */
*             R15=IRSTCHAN*256;     /* CHAN ADDR IN POS FOR INSTR    */
         SLA   @14,8                                               0323
         LR    R15,@14                                             0323
*             GEN REFS(R15);                                       0324
         DC    X'9F01F000'              CLEAR CHANNEL
*             BC(NOTZERO,STILHUNG); /* IF CC^0, ASSUME STILL HUNG    */
         BC    7,STILHUNG                                          0325
*             TCH(R15);             /* TEST CHANNEL                  */
         TCH   0(R15)                                              0326
*             BC(CC3,STILHUNG);     /* IF CC=3, ASSUME STILL HUNG    */
         BC    1,STILHUNG                                          0327
*             IF IRSTCHAN=FRRINCHN THEN/* IF THE CHAN PART OF THE  0328
*                                      DEVICE ADDR PASSED AS INPUT BY
*                                      CCH IS THE SAME AS THE ONE WE
*                                      ARE PROCESSING                */
         CLC   IRSTCHAN(1),FRRINCHN(FRRWPTR)                       0328
         BNE   @RF00328                                            0328
*               DO;                 /* SEE IF STILL HUNG             */
*                 R15=FRRINPUT;     /* DEV ADDR STORED BY HDWARE ON
*                                      I/O INT INDICATING HUNG INTF  */
         L     R15,FRRINPUT(,FRRWPTR)                              0330
*                 TIO(R15);         /* GO OUT OVER INTERFACE         */
         TIO   0(R15)                                              0331
*                 BC(NOTCC1,CHANRCOV);/* ASSUME ANYTHING BUT HUNG  0332
*                                      INTF INDICATES CHAN USABLE    */
         BC    11,CHANRCOV                                         0332
*                 IF ICC='1'B&HUNGINF='1'B THEN                    0333
         TM    ICC,B'00000010'                                     0333
         BNO   @RF00333                                            0333
         TM    HUNGINF,B'00100000'                                 0333
         BO    @RT00333                                            0333
*                   GO TO STILHUNG;                                0334
*                 ELSE                                             0335
*                   ;                                              0335
@RF00333 DS    0H                                                  0336
*CHANRCOV:                                                         0336
*                 ;                 /* BRANCH HERE IF TIO DOES NOT 0336
*                                      STORE CSW                     */
CHANRCOV DS    0H                                                  0337
*               END;                /* END SEE IF STILL HUNG         */
*             ELSE                                                 0338
*               ;                   /* ASSUME CHANNEL RECOVERED      */
@RF00328 DS    0H                                                  0339
*             CATNOP='0'B;          /* SET OPERATINAL IN COPIED CAT  */
         NI    CATNOP(IRSTCATP),B'10111111'                        0339
*             EVAL(ADDR(PCCACAT)+(IRSTCHAN*LENGTH(CAT)))->CATNOP='0'B;
         L     @14,PCCAPTR                                         0340
         LA    @14,PCCACAT(,@14)                                   0340
         SLR   @11,@11                                             0340
         IC    @11,IRSTCHAN                                        0340
         SLA   @11,3                                               0340
         ALR   @14,@11                                             0340
         NI    CATNOP(@14),B'10111111'                             0340
*                                   /* SET OPERATIONAL IN REAL CAT   */
*STILHUNG:                                                         0341
*             ;                                                    0341
STILHUNG DS    0H                                                  0342
*           END;                    /* END RECOVER CHANNEL           */
*         ELSE                                                     0343
*           ;                                                      0343
@RF00321 DS    0H                                                  0344
*         IRSTCATP=IRSTCATP+LENGTH(CAT);/* ADR NEXT ENTRY IN COPIED
*                                      CAT                           */
         AH    IRSTCATP,@CH00101                                   0344
*       END;                                                       0345
         LA    @14,1                                               0345
         SLR   @11,@11                                             0345
         IC    @11,IRSTLOOP                                        0345
         ALR   @14,@11                                             0345
         STC   @14,IRSTLOOP                                        0345
         CH    @14,@CH00830                                        0345
         BNH   @DL00319                                            0345
*       RFY                                                        0346
*         R15 UNRSTD;                                              0346
*       RFY                                                        0347
*         CAT BASED(CATPTR);                                       0347
*     END;                          /* END RECOVER HUNG INTERFACE    */
*   ELSE                            /* SCHED VIA MACH CK HANDLER     */
*     DO;                           /* RECOVER LOST CHANNELS         */
*                                                                  0349
         B     @RC00314                                            0349
@RF00314 DS    0H                                                  0350
*       /*************************************************************/
*       /*                                                           */
*       /* THIS SEGMENT ATTEMPTS TO RECOVER LOST CHANNEL(S) WHICH    */
*       /* WERE DETECTED DURING PROCESSING OF AN EXTERNAL DAMAGE     */
*       /* MACHINE CHECK. IT IS INCLUDED BY SEGMENT RCVCHANS. A CLRCH*/
*       /* INSTRUCTION IS ISSUED TO EVERY (***NOTE EVERY***) CHANNEL */
*       /* THAT RETURNS CC=3 TO A TCH INSTRUCTION. THIS IS TO INSURE */
*       /* THAT IN THE CASE OF A HARD GROUP ERROR, EACH CHANNEL IN   */
*       /* THE GROUP IS RESET. A CLRCH INSTRUCTION MUST BE ISSUED TO */
*       /* EVERY CHANNEL IN A GROUP IF A IMPL IS TO BE DONE. AFTER   */
*       /* ALL THE NECESSARY CLRCH INSTRUCTIONS HAVE BEEN DONE, THE  */
*       /* OPERATOR SUPPLIED ACTION CODE IS EXAMINED. IF THE CODE IS */
*       /* 02, SEGMENT SETDIE IS INCLUDED TO WAIT FOR A POSSIBLE IMPL*/
*       /* TO COMPLETE. THE LOST CHANNELS ARE THEN TESTED FOR        */
*       /* AVAILABILITY. FOR EACH LOST CHANNEL THAT RETURNS CC=0 TO A*/
*       /* TCH INSTRUCTION, THE CATNOP FLAG IS TURNED OFF. ANY LOST  */
*       /* CHANNEL THAT RETURNS A CC OTHER THAN 0, IS CONSIDERED     */
*       /* PERMANENTLY LOST AND ITS RELATED CATNOP FLAG IS LEFT ON.  */
*       /* IF THE OPERATOR SUPPLIED ACTION CODE IS 01, THE OPERATOR  */
*       /* DOES NOT WANT TO RE-USE THE CHANNELS AND THEY ARE         */
*       /* CONSIDERED PERMANENTLY LOST.                              */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0350
*       RFY                                                        0350
*         R15 RSTD;                                                0350
*       DO IRSTLOOP=1 TO LENGTH(IRSTCAT)/LENGTH(CAT);/* CHECK ALL  0351
*                                      CHANNELS                      */
         LA    @14,1                                               0351
         STC   @14,IRSTLOOP                                        0351
@DL00351 DS    0H                                                  0352
*         IRSTCHAN=IRSTLOOP-1;      /* CHANNEL ADDRESS               */
         BCTR  @14,0                                               0352
         STC   @14,IRSTCHAN                                        0352
*         R15=IRSTCHAN*256;         /* OPERAND FOR TCH INSTRUCTION   */
         SLA   @14,8                                               0353
         LR    R15,@14                                             0353
*         TCH(R15);                 /* TEST CHANNEL                  */
         TCH   0(R15)                                              0354
*         BC(NOTCC3,CHANOK);        /* IF NOT CC=3, CHAN STILL OPER  */
         BC    14,CHANOK                                           0355
*         GEN REFS(R15);                                           0356
    DC    X'9F01F000'                  CLEAR CHANNEL
*CHANOK:                                                           0357
*         ;                         /* BRANCH HERE AFTER TEST CHANNEL
*                                      IF CHAN STILL OPERATIONAL     */
CHANOK   DS    0H                                                  0358
*       END;                                                       0358
         LA    @14,1                                               0358
         SLR   @12,@12                                             0358
         IC    @12,IRSTLOOP                                        0358
         ALR   @14,@12                                             0358
         STC   @14,IRSTLOOP                                        0358
         CH    @14,@CH00830                                        0358
         BNH   @DL00351                                            0358
*       RFY                                                        0359
*         R15 UNRSTD;                                              0359
*       IF IRSTOPAC=ACDOWAIT&       /* IF OPER REQ WAIT, REUSE CHAN  */
*           PCCAEXDM='0'B THEN      /* 'MORE' CHANS NOT LOST         */
         CLI   IRSTOPAC,X'02'                                      0360
         BNE   @RF00360                                            0360
         L     @12,PCCAPTR                                         0360
         TM    PCCAEXDM(@12),B'01000000'                           0360
         BNZ   @RF00360                                            0360
*         DO;                       /* WAIT FOR IMPL, TEST RECOVERY  */
*                                                                  0361
*           /*********************************************************/
*           /*                                                       */
*           /* THIS SEGMENT WILL WAIT 30 SECONDS FOR A POSSIBLE IMPL */
*           /* OF THE FAILING CHANNEL GROUP TO COMPLETE. THE TIMER   */
*           /* SETDIE FUNCTION WILL BE BRANCH ENTERED TO ESTABLISH A */
*           /* DISABLED INTERRUPT EXIT. IF THE DIE IS SUCCESSFULLY   */
*           /* ESTABLISHED, EXIT IS MADE TO THE SRB DISPATCHER.      */
*           /* IECVIRST WILL AWAKEN AT DIERTN (DIE) AND RESCHEDULE   */
*           /* IECVIRST AT SRBRTN ON THE CORRECT PROCESSOR. THE      */
*           /* SRBRTN WILL RE-ESTABLISH IECVIRST AS IF THE WAIT HAD  */
*           /* NOT OCCURRED. IF THE DIE WAS NOT ESTABLISHED,         */
*           /* PROCESSING WILL CONTINUE WITHOUT THE WAIT.            */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0362
*           SRB=SRB&&SRB;           /* CLEAR SRB TO ZEROES           */
         LA    @11,IRSTSRB                                         0362
         XC    SRB(44,@11),SRB(@11)                                0362
*           SRBID='SRB ';           /* SRB ID                        */
         MVC   SRBID(4,@11),@CC03186                               0363
*           SRBASCB=ADDR(IEAMASCB); /* MASTER ADDR SP ASCB ADDRESS   */
         L     @07,@CV02940                                        0364
         ST    @07,SRBASCB(,@11)                                   0364
*           SRBCPAFF=PCCACAFM;      /* PROCESSOR AFFINITY-BIT MASK   */
         MVC   SRBCPAFF(2,@11),PCCACAFM(@12)                       0365
*           SRBRMTR=ADDR(CVTBRET);  /* RESOURCE MANAGER              */
         L     @12,CVTPTR                                          0366
         LA    @07,CVTBRET(,@12)                                   0366
         ST    @07,SRBRMTR(,@11)                                   0366
*           SRBEP=ADDR(SRBRTN);     /* ENTRY POINT TO BE SCHEDULED   */
         LA    @07,SRBRTN                                          0367
         ST    @07,SRBEP(,@11)                                     0367
*           SRBPARM=IRSTWPTR;       /* PARAM IS ADDRESS OF WORKAREA  */
         ST    IRSTWPTR,SRBPARM(,@11)                              0368
*           IRSTTQE=IRSTTQE&&IRSTTQE;/* CLEAR TQE. TQEAID, TQETCB, 0369
*                                      AND TQEASCB ARE SET TO ZERO   */
         XC    IRSTTQE(128),IRSTTQE                                0369
*           TQEEXIT=ADDR(DIERTN);   /* ADDRESS OF DIE                */
         LA    @11,IRSTTQE                                         0370
         LA    @07,DIERTN                                          0370
         ST    @07,TQEEXIT(,@11)                                   0370
*           TQEVAL=WAITTIME;        /* WAIT 30 SECONDS               */
         MVC   TQEVAL(8,@11),@CB02991                              0371
*           RFY                                                    0372
*            (R1,                                                  0372
*             R15,                                                 0372
*             R14) RSTD;                                           0372
*           R1=ADDR(IRSTTQE);       /* PARM IS ADDRESS OF TQE        */
         LR    R1,@11                                              0373
*           IRSTFRRW=FRRWORK;       /* SAVE STATUS KEPT IN FRRWORK   */
         MVC   IRSTFRRW(24),FRRWORK(FRRWPTR)                       0374
*           RFY                                                    0375
*            (R11,                                                 0375
*             R12,                                                 0375
*             R13,                                                 0375
*             R0) RSTD;                                            0375
*           CALL SETDIE;            /* ESTABLISH DIE. NOTE REGS 11-0
*                                      DESTROYED ON RETURN.          */
         L     @07,CVTPTR                                          0376
         L     @07,TPCPTR(,@07)                                    0376
         L     @15,TPCSDIE(,@07)                                   0376
         BALR  @14,@15                                             0376
*           RFY                                                    0377
*            (R11,                                                 0377
*             R12,                                                 0377
*             R13,                                                 0377
*             R0) UNRSTD;                                          0377
*           IF R15=0 THEN           /* IF DIE SUCCESSFULLY ESTABLIH  */
         LTR   R15,R15                                             0378
         BNZ   @RF00378                                            0378
*             DO;                   /* EXIT TO SRB DISPATCHER        */
*               GEN SETS(R1,R15);                                  0380
*                                      /*DELETE FRR                  */
         SETFRR    D,WRKREGS=(R1,R15)
*               PSAIOSUP='0'B;      /* TURN OFF SUPER BIT            */
         NI    PSAIOSUP,B'01111111'                                0381
*               GEN REFS(IRSTWPTR,ENABLE) SETS(IRSTSYSM);          0382
         STOSM IRSTSYSM,ENABLE           ENABLE I/O,EXT INTERRUPTS
*               R14=CVTSRBRT;       /* EXIT ADDRESS                  */
         L     @12,CVTPTR                                          0383
         L     R14,CVTSRBRT(,@12)                                  0383
*               GEN FLOWS(DIERTN);                                 0384
* INDICATE PROCESSING CONTINUES AT DIERTN
*               RETURN;             /* EXIT TO SRB DISPATCHER        */
@EL00001 DS    0H                                                  0385
@EF00001 DS    0H                                                  0385
@ER00001 BR    @14                                                 0385
*DIERTN:                                                           0386
*               PROC OPTIONS(NOSAVE,NOSAVEAREA);                   0386
*                                                                  0386
DIERTN   DS    0H                                                  0387
*               /*****************************************************/
*               /*                                                   */
*               /* THIS IS THE DIE ROUTINE. IT RUNS UNDER THE TIMER  */
*               /* SLIH IN ANY ADDRESS SPACE ON ANY PROCESSOR. IT IS */
*               /* DISABLED AND IN SUPERVISOR STATE. IT MUST NOT     */
*               /* OBTAIN THE LOCAL LOCK OR ASSUME IT IS HELD OR NOT */
*               /* HELD. REGISTERS 2-12 ARE THE SAME AS WHEN SETDIE  */
*               /* WAS CALLED. THIS ROUTINE WILL SCHEDULE IECVIRST AS*/
*               /* AN SRB AT SRBRTN ON THE PROCESSOR IECVIRST WAS    */
*               /* ORIGINALLY RUNNING ON (ONE SUFFERING THE LOSS OF  */
*               /* CHANNELS). R14 CONTAINS THE RETURN ADDRESS.       */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0387
*               R15=ADDR(IRSTFRR);  /* ADDRESS OF FRR ROUTINE        */
         LA    R15,IRSTFRR                                         0387
*               RFY                                                0388
*                 R4 RSTD;                                         0388
*               GEN SETS(FRRWPTR,R1,R4) REFS(R15) FLOWS(IRSTFRR);  0389
         SETFRR    A,FRRAD=(R15),WRKREGS=(R1,R4),PARMAD=(FRRWPTR)
*               RFY                                                0390
*                 R4 UNRSTD;                                       0390
*               FRRWORK=IRSTFRRW;   /* RESTORE FRR WORK AREA         */
         MVC   FRRWORK(24,FRRWPTR),IRSTFRRW                        0391
*               R1=ADDR(IRSTSRB);   /* SRB TO RE-SCHEDULE IECVIRST   */
         LA    R1,IRSTSRB                                          0392
*               GEN REFS(R1) SETS(R15,R1);                         0393
         SCHEDULE  SRB=(1),SCOPE=GLOBAL     RE-SCHEDULE IECVIRST
         SETFRR    D,WRKREGS=(R1,R15)       DELETE FRR
*               GEN FLOWS(SRBRTN);                                 0394
* INDICATE PROCESSING CONTINUES AT SRBRTN
*             END DIERTN;           /* RETURN TO TIMER SLIH          */
@EL00003 DS    0H                                                  0395
@EF00003 DS    0H                                                  0395
@ER00003 BR    @14                                                 0395
*SRBRTN:                                                           0396
*           ;                                                      0396
*                                                                  0396
SRBRTN   DS    0H                                                  0397
*           /*********************************************************/
*           /*                                                       */
*           /* THIS ROUTINE IS SCHEDULED BY THE DIE ROUTINE (DIERTN).*/
*           /* IT WILL RE-ESTABLISH IECVIRST TO CONTINUE RECOVERY    */
*           /* PROCESSING.                                           */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0397
*           IRSTWPTR=R1;            /* PARM IS ADDR OF GEN WK AREA   */
         LR    IRSTWPTR,R1                                         0397
*           RFY                                                    0398
*             FRRWORK BASED(ADDR(IRSTFRRW));/* FRR WORK AREA IN GEN
*                                      WKAREA                        */
*           R9=FRRBASE1;            /* RESTORE FIRST BASE REGISTER   */
         LA    @12,IRSTFRRW                                        0399
         L     R9,FRRBASE1(,@12)                                   0399
*           R10=FRRBASE2;           /* RESTORE SECOND BASE REGISTER  */
         L     R10,FRRBASE2(,@12)                                  0400
*           GEN REFS(IRSTWPTR,DISABLE) SETS(IRSTSYSM);             0401
         STNSM IRSTSYSM,DISABLE          DISABLE I/O, EXT INTERRUPTS
*           PSAIOSUP='1'B;          /* IND DISABLED WITHOUT A LOCK   */
         OI    PSAIOSUP,B'10000000'                                0402
*           R1=ADDR(IRSTFRR);       /* ADDR OF FRR ROUTINE           */
         LA    R1,IRSTFRR                                          0403
*           GEN REFS(R1) SETS(FRRWPTR,R14,R15);                    0404
         SETFRR    A,FRRAD=(R1),PARMAD=(FRRWPTR),WRKREGS=(R14,R15)
*           RFY                                                    0405
*             FRRWORK BASED(FRRWPTR);                              0405
*           FRRWORK=IRSTFRRW;       /* RESTORE FRR WORK AREA         */
         MVC   FRRWORK(24,FRRWPTR),IRSTFRRW                        0406
*         END;                      /* END DIE PROCESSING            */
*       ELSE                                                       0408
*         ;                         /* DIE NOT ESTABLISHED           */
@RF00378 DS    0H                                                  0409
*       RFY                                                        0409
*        (R1,                                                      0409
*         R14,                                                     0409
*         R15) UNRSTD;                                             0409
*                                                                  0409
*       /*************************************************************/
*       /*                                                           */
*       /* DETERMINE IF LOST CHANNELS RECOVERED                      */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0410
*       IRSTCATP=ADDR(IRSTCAT);     /* SCAN COPIED CAT               */
         LA    IRSTCATP,IRSTCAT                                    0410
*       RFY                                                        0411
*         CAT BASED(IRSTCATP);                                     0411
*       DO IRSTLOOP=1 TO LENGTH(IRSTCAT)/LENGTH(CAT);/* SCAN COPIED
*                                      CAT                           */
         LA    @11,1                                               0412
         STC   @11,IRSTLOOP                                        0412
@DL00412 DS    0H                                                  0413
*         IRSTCHAN=IRSTLOOP-1;      /* CHANNEL ADDRESS               */
         BCTR  @11,0                                               0413
         STC   @11,IRSTCHAN                                        0413
*         IF CATMCRST='1'B THEN     /* IF CHANNEL 'LOST'             */
         TM    CATMCRST(IRSTCATP),B'00010000'                      0414
         BNO   @RF00414                                            0414
*           DO;                                                    0415
*             RFY                                                  0416
*               R15 RSTD;                                          0416
*             R15=IRSTCHAN*256;     /* CHAN ADDR IN PROPER POSITION  */
         SLA   @11,8                                               0417
         LR    R15,@11                                             0417
*             TCH(R15);             /* SEE IF CHAN RECOVERED         */
         TCH   0(R15)                                              0418
*             RFY                                                  0419
*               R15 UNRSTD;                                        0419
*             BC(CC3,STILLOST);     /* IF CC=3, ASSUME IT DID NOT    */
         BC    1,STILLOST                                          0420
*             CATNOP='0'B;          /* CC^3, IND OPERATIONAL IN    0421
*                                      COPIED CAT                    */
         NI    CATNOP(IRSTCATP),B'10111111'                        0421
*             EVAL(ADDR(PCCACAT)+(IRSTCHAN*LENGTH(CAT)))->CATNOP='0'B;
         L     @11,PCCAPTR                                         0422
         LA    @11,PCCACAT(,@11)                                   0422
         SLR   @07,@07                                             0422
         IC    @07,IRSTCHAN                                        0422
         SLA   @07,3                                               0422
         ALR   @11,@07                                             0422
         NI    CATNOP(@11),B'10111111'                             0422
*                                   /* UPDATE REAL CAT IN PCCA       */
*STILLOST:                                                         0423
*             ;                     /* BRANCH HERE IF CHANNEL DID NOT
*                                      RECOVER                       */
STILLOST DS    0H                                                  0424
*           END;                    /* END CHANNEL LOST              */
*         ELSE                                                     0425
*           ;                                                      0425
@RF00414 DS    0H                                                  0426
*         IRSTCATP=IRSTCATP+LENGTH(CAT);/* ADDR NEXT CAT ENTRY       */
         AH    IRSTCATP,@CH00101                                   0426
*       END;                        /* END SCAN COPIED CAT           */
         LA    @11,1                                               0427
         SLR   @07,@07                                             0427
         IC    @07,IRSTLOOP                                        0427
         ALR   @11,@07                                             0427
         STC   @11,IRSTLOOP                                        0427
         CH    @11,@CH00830                                        0427
         BNH   @DL00412                                            0427
*     END;                          /* END WAIT FOR IMPL             */
*   ELSE                                                           0429
*     ;                             /* WAIT NOT REQD BY OPER         */
@RF00360 DS    0H                                                  0430
*   END;                            /* END RECOVER LOST CHANNELS     */
*   IRSTMESG=IRSTMESG&&IRSTMESG;    /* CLEAR MESSAGE BUFFER TO ZERO  */
@RC00314 XC    IRSTMESG(128),IRSTMESG                              0431
*   MSG410(1:LENGTH(MSG410))=IEA410I(1:LENGTH(MSG410));/* BASIC    0432
*                                      MESSAGE                       */
         MVC   MSG410(44),IEA410I                                  0432
*   M410CPU=PSACPUSA×'F0'X;         /* PROCESSOR PHYS ADDR IN MESG 0433
*                                                            @ZM47978*/
         LH    @11,PSACPUSA                                        0433
         O     @11,@CF02559                                        0433
         STC   @11,M410CPU                                         0433
*   IRSTRDLN=LENGTH(MSG410);        /* LEN OF MESSAGE FOR RECORD     */
         MVC   IRSTRDLN(2),@CH00809                                0434
*   IRSTRECD='1'B;                  /* IND RECORD MACRO TYPE IS WTO  */
         OI    IRSTRECD,B'01000000'                                0435
*   IRSTCATP=ADDR(IRSTCAT);         /* ADDRESS COPIED CAT            */
         LA    IRSTCATP,IRSTCAT                                    0436
*   RFY                                                            0437
*     CAT BASED(IRSTCATP);                                         0437
*   DO IRSTLOOP=1 TO LENGTH(IRSTCAT)/LENGTH(CAT);/* SCAN COPIED CAT  */
         LA    @11,1                                               0438
         STC   @11,IRSTLOOP                                        0438
@DL00438 DS    0H                                                  0439
*     IRSTCHAN=IRSTLOOP-1;          /* CHANNEL ADDRESS               */
         BCTR  @11,0                                               0439
         STC   @11,IRSTCHAN                                        0439
*     IF CATNOP='1'B&               /* IF CHANNEL NOT OPERATIONAL    */
*         ((FRRINCOD=CHANCKIN&      /* SCHED VIA CHAN CK HANDLER     */
*         CATCCRST='1'B)×           /* BECAUSE OF HUNG INTERFACE     */
*         (FRRINCOD=MACHCKIN&       /* SCHED VIA MACH CK HANDLER     */
*         CATMCRST='1'B)) THEN      /* CHAN CHECK STOP/TIMEOUT       */
         TM    CATNOP(IRSTCATP),B'01000000'                        0440
         BNO   @RF00440                                            0440
         CLI   FRRINCOD(FRRWPTR),2                                 0440
         BNE   @GL00016                                            0440
         TM    CATCCRST(IRSTCATP),B'00100000'                      0440
         BO    @RT00440                                            0440
@GL00016 CLI   FRRINCOD(FRRWPTR),1                                 0440
         BNE   @RF00440                                            0440
         TM    CATMCRST(IRSTCATP),B'00010000'                      0440
         BNO   @RF00440                                            0440
@RT00440 DS    0H                                                  0441
*       DO;                         /* ISSUE MESSAGE IEA410I         */
*         IF IRSTCHAN<10 THEN       /* INSERT CHAN NO. IN MESSAGE    */
         CLI   IRSTCHAN,10                                         0442
         BNL   @RF00442                                            0442
*           M410CHAN=IRSTCHAN×'F0'X;                               0443
         LA    @11,240                                             0443
         SLR   @07,@07                                             0443
         IC    @07,IRSTCHAN                                        0443
         OR    @11,@07                                             0443
         STC   @11,M410CHAN                                        0443
*         ELSE                                                     0444
*           M410CHAN=(IRSTCHAN-9)×'C0'X;                           0444
         B     @RC00442                                            0444
@RF00442 SLR   @11,@11                                             0444
         IC    @11,IRSTCHAN                                        0444
         SH    @11,@CH00033                                        0444
         O     @11,@CF03200                                        0444
         STC   @11,M410CHAN                                        0444
*         RFY                                                      0445
*          (R0,                                                    0445
*           R1,                                                    0445
*           R3,                                                    0445
*           R4,                                                    0445
*           R13,                                                   0445
*           R14,                                                   0445
*           R15) RSTD;              /* RECORD PATH SETS THESE        */
@RC00442 DS    0H                                                  0446
*         CALL RECORD;              /* USE RECORD TO ISSUE MESSAGE   */
         BAL   @14,RECORD                                          0446
*         RFY                                                      0447
*          (R0,                                                    0447
*           R1,                                                    0447
*           R3,                                                    0447
*           R4,                                                    0447
*           R13,                                                   0447
*           R14,                                                   0447
*           R15) UNRSTD;                                           0447
*       END;                        /* END ISSUE MESSAGE             */
*     ELSE                                                         0449
*       ;                           /* CHANNEL IS OPERATIONAL        */
@RF00440 DS    0H                                                  0450
*     IRSTCATP=IRSTCATP+LENGTH(CAT);/* PTR TO NEXT ENTRY IN CAT      */
         AH    IRSTCATP,@CH00101                                   0450
*   END;                            /* END SCAN COPIED CAT           */
         LA    @11,1                                               0451
         SLR   @07,@07                                             0451
         IC    @07,IRSTLOOP                                        0451
         ALR   @11,@07                                             0451
         STC   @11,IRSTLOOP                                        0451
         CH    @11,@CH00830                                        0451
         BNH   @DL00438                                            0451
*   RFY                                                            0452
*     CAT BASED(CATPTR);                                           0452
*   IF PCCAEXDM='0'B&               /* IF 'MORE' CHANNELS NOT LOST   */
*       FRRRESVE='1'B THEN          /* IF RESERVED DEV FOUND         */
         L     @12,PCCAPTR                                         0453
         TM    PCCAEXDM(@12),B'01000000'                           0453
         BNZ   @RF00453                                            0453
         TM    FRRRESVE(FRRWPTR),B'00010000'                       0453
         BNO   @RF00453                                            0453
*     DO;                           /* RE-RESERVE RESERVED DEVICES   */
*                                                                  0454
*       /*************************************************************/
*       /*                                                           */
*       /* THIS SEGMENT WILL ATTEMPT TO RE-RESERVE ALL THOSE DEVICES */
*       /* FOR WHICH THE RESERVES HAVE BEEN RESET BY A CLRCH         */
*       /* INSTRUCTION. THE IOSGEN MACRO WITH THE MAP FUNCTION WILL  */
*       /* BE ISSUED FOR ALL UCBS WHICH ARE IN THE RESERVE TABLE TO  */
*       /* DETERMINE WHAT PATHS EXIST TO THE DEVICE. IF ANY OF THE   */
*       /* DEVICES HAVE NO PATHS THEN WAIT STATE 04E                 */
*       /* (NON-RESTARTABLE) MUST BE LOADED. IF ALL DEVICES HAVE A   */
*       /* PATH THEN AN ATTEMPT WILL BE MADE TO RESERVE THE DEVICE   */
*       /* DOWN EACH AVAILABLE PATH UNTIL A SUCCESSFUL RESERVE IS    */
*       /* ACCOMPLISHED. IF ALL PATHS TO ALL DEVICES IN THE TABLE    */
*       /* HAVE BEEN ATTEMPTED AND ANY DEVICE IS STILL NOT RESERVED  */
*       /* THEN AN UNCONDITIONAL RESERVE (UR) WILL BE TRIED FOR THOSE*/
*       /* DEVICES. IF ALL DEVICES ARE NOT RESERVED THEN             */
*       /* NON-RESTARTABLE WAIT STATE 04C OR 04D WILL BE LOADED. IF  */
*       /* ALL DEVICES HAVE BEEN RE-RESERVED THEN PROCESSING WILL    */
*       /* CONTINUE TO THE RESTART IO SEGMENT.                       */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0455
*       IRSTRPTR=ADDR(IRSTRESV);    /* INIT PTR TO 1ST SEG OF RSVTBL */
         LA    @12,IRSTRESV                                        0455
         ST    @12,IRSTRPTR                                        0455
*       DO WHILE IRSTRPTR^=0;       /* SCAN ALL SEGMENTS OF TABLE    */
         B     @DE00456                                            0456
@DL00456 DS    0H                                                  0457
*         DO IRSTI=1 TO RESVCNT BY 1 WHILE RESVUCBA(IRSTI)^=0;/*   0457
*                                      PROCESS EACH TABLE ENTRY      */
         LA    IRSTI,1                                             0457
         B     @DE00457                                            0457
@DL00457 L     @12,IRSTRPTR                                        0457
         LR    @11,IRSTI                                           0457
         SLA   @11,4                                               0457
         LA    @07,0(@11,@12)                                      0457
         AL    @07,@CF03301                                        0457
         L     @07,RESVUCBA-12(,@07)                               0457
         LTR   @07,@07                                             0457
         BZ    @DC00457                                            0457
*           RFY                                                    0458
*            (R4,                                                  0458
*             R5,                                                  0458
*             R13,                                                 0458
*             R14) RSTD;            /* RESTRICT REGS FOR IOSGEN      */
*           R4=RESVUCBA(IRSTI);     /* UCB ADDRESS FOR IOSGEN        */
         LR    R4,@07                                              0459
*           R5=ADDR(RESVUCBL(IRSTI));/* TABLE ADDRESS FOR IOSGEN     */
         LA    R5,RESVUCBL-16(@11,@12)                             0460
*           CALL IOSGENPT;          /* INVOKE IOSGEN MAP FUNCTION    */
         BAL   @14,IOSGENPT                                        0461
*           RFY                                                    0462
*            (R4,                                                  0462
*             R5,                                                  0462
*             R13,                                                 0462
*             R14) UNRSTD;          /* UNRESTRICT REGISTERS          */
*           IF RESVPCP0(IRSTI)=0&RESVPCP1(IRSTI)=0&RESVSCP0(IRSTI)=0&
*               RESVSCP1(IRSTI)=0   /* NO PATHS                      */
*             THEN                                                 0463
         SLR   @12,@12                                             0463
         L     @11,IRSTRPTR                                        0463
         LR    @07,IRSTI                                           0463
         SLA   @07,4                                               0463
         SLR   @02,@02                                             0463
         IC    @02,RESVPCP0-16(@07,@11)                            0463
         CR    @12,@02                                             0463
         BNE   @RF00463                                            0463
         SLR   @02,@02                                             0463
         IC    @02,RESVPCP1-16(@07,@11)                            0463
         CR    @12,@02                                             0463
         BNE   @RF00463                                            0463
         SLR   @02,@02                                             0463
         IC    @02,RESVSCP0-16(@07,@11)                            0463
         CR    @12,@02                                             0463
         BNE   @RF00463                                            0463
         SLR   @02,@02                                             0463
         IC    @02,RESVSCP1-16(@07,@11)                            0463
         CR    @12,@02                                             0463
         BNE   @RF00463                                            0463
*             IRSTNOGO='1'B;        /* INDICATE WAIT TO BE LOADED    */
         OI    IRSTNOGO,B'00100000'                                0464
*         END;                                                     0465
@RF00463 AL    IRSTI,@CF00103                                      0465
@DE00457 L     @12,IRSTRPTR                                        0465
         C     IRSTI,RESVCNT(,@12)                                 0465
         BNH   @DL00457                                            0465
@DC00457 DS    0H                                                  0466
*         IRSTRPTR=RESVNEXT;        /* UPDATE TO NEXT TABLE   SEGMENT*/
         L     @12,IRSTRPTR                                        0466
         L     @12,RESVNEXT(,@12)                                  0466
         ST    @12,IRSTRPTR                                        0466
*       END;                                                       0467
@DE00456 ICM   @12,15,IRSTRPTR                                     0467
         BNZ   @DL00456                                            0467
*       DO IRSTK=1 TO 2 BY 1 WHILE IRSTNOGO='0'B;/* TRY RESERVE AND
*                                      UR IF REQ.                    */
         LA    @12,1                                               0468
         ST    @12,IRSTK                                           0468
@DL00468 TM    IRSTNOGO,B'00100000'                                0468
         BNZ   @DC00468                                            0468
*         IRSTRPTR=ADDR(IRSTRESV);  /* POINT TO FIRST TABLE   SEGMENT*/
         LA    @12,IRSTRESV                                        0469
         ST    @12,IRSTRPTR                                        0469
*         DO WHILE IRSTRPTR^=0;     /* DO FOR ALL SEGMENTS           */
         B     @DE00470                                            0470
@DL00470 DS    0H                                                  0471
*           RFY                                                    0471
*            (R2) RSTD;             /* RESTRICT FOR LOOP             */
*           DO R2=1 TO RESVCNT BY 1 WHILE RESVUCBA(R2)^=0;/* DO FOR
*                                      EACH TABLE ENTRY              */
         LA    R2,1                                                0472
         B     @DE00472                                            0472
@DL00472 L     @12,IRSTRPTR                                        0472
         LR    @11,R2                                              0472
         SLA   @11,4                                               0472
         LA    @07,0(@11,@12)                                      0472
         AL    @07,@CF03301                                        0472
         L     @07,RESVUCBA-12(,@07)                               0472
         LTR   @07,@07                                             0472
         BZ    @DC00472                                            0472
*             IF RESVCOMP(R2)='0'B THEN/* IF DEVICE NOT YET RESERVED */
         ALR   @11,@12                                             0473
         AL    @11,@CF03305                                        0473
         TM    RESVCOMP-10(@11),B'10000000'                        0473
         BNZ   @RF00473                                            0473
*               DO;                 /* TRY TO RESERVE                */
*                 RFY                                              0475
*                  (R1) RSTD;       /* RESTRICT R1 FOR CALL TO     0475
*                                      RESVSIO                       */
*                 R1=RESVPDEV(R2);  /* GET PRIMARY DEVICE ADDR       */
         LR    @11,R2                                              0476
         SLA   @11,4                                               0476
         LH    R1,RESVPDEV-16(@11,@12)                             0476
*                 IF(PSACPUSA='0000'X&RESVPCP0(R2)='01'X)×(PSACPUSA=
*                     '0001'X&RESVPCP1(R2)='01'X)/* IF PRIM PATH FROM
*                                                            @ZM47978*/
*                   THEN                                           0477
         ICM   @07,3,PSACPUSA                                      0477
         BNZ   @GL00023                                            0477
         SLR   @07,@07                                             0477
         IC    @07,RESVPCP0-16(@11,@12)                            0477
         CH    @07,@CH02185                                        0477
         BE    @RT00477                                            0477
@GL00023 CLC   PSACPUSA(2),@CH03204                                0477
         BNE   @RF00477                                            0477
         LR    @12,R2                                              0477
         SLA   @12,4                                               0477
         L     @11,IRSTRPTR                                        0477
         SLR   @07,@07                                             0477
         IC    @07,RESVPCP1-16(@12,@11)                            0477
         CH    @07,@CH02185                                        0477
         BNE   @RF00477                                            0477
@RT00477 DS    0H                                                  0478
*                   CALL RESVSIO;   /* THIS CPU EXISTS-TRY RESERVE   */
         BAL   @14,RESVSIO                                         0478
*                 IF RESVCOMP(R2)='0'B THEN/* DEVICE RESERVED?       */
@RF00477 L     @12,IRSTRPTR                                        0479
         LR    @11,R2                                              0479
         SLA   @11,4                                               0479
         ALR   @11,@12                                             0479
         AL    @11,@CF03305                                        0479
         TM    RESVCOMP-10(@11),B'10000000'                        0479
         BNZ   @RF00479                                            0479
*                   DO;             /* NO-TRY SECONDARY PATH         */
*                     R1=RESVSDEV(R2);/* GET SECONDARY SIO ADDRESS   */
         LR    @11,R2                                              0481
         SLA   @11,4                                               0481
         LH    R1,RESVSDEV-16(@11,@12)                             0481
*                     IF PSACPUSA='0000'X&RESVSCP0(R2)='01'X×/* IF 0482
*                                      SEC PATH                      */
*                         PSACPUSA='0001'X&RESVSCP1(R2)='01'X/* FROM
*                                      THIS CPU                      */
*                       THEN                                       0482
         ICM   @07,3,PSACPUSA                                      0482
         BNZ   @GL00026                                            0482
         SLR   @07,@07                                             0482
         IC    @07,RESVSCP0-16(@11,@12)                            0482
         CH    @07,@CH02185                                        0482
         BE    @RT00482                                            0482
@GL00026 CLC   PSACPUSA(2),@CH03204                                0482
         BNE   @RF00482                                            0482
         LR    @12,R2                                              0482
         SLA   @12,4                                               0482
         L     @11,IRSTRPTR                                        0482
         SLR   @07,@07                                             0482
         IC    @07,RESVSCP1-16(@12,@11)                            0482
         CH    @07,@CH02185                                        0482
         BNE   @RF00482                                            0482
@RT00482 DS    0H                                                  0483
*                       CALL RESVSIO;/* THEN TRY RESERVE ON SEC PATH */
         BAL   @14,RESVSIO                                         0483
*                     IF RESVCOMP(R2)='0'B THEN                    0484
@RF00482 LR    @12,R2                                              0484
         SLA   @12,4                                               0484
         L     @11,IRSTRPTR                                        0484
         ALR   @11,@12                                             0484
         AL    @11,@CF03305                                        0484
         TM    RESVCOMP-10(@11),B'10000000'                        0484
         BNZ   @RF00484                                            0484
*                       IRSTNOGO='1'B;/* IF RESV NOT DONE INDIC SOME
*                                      DEVICES NOT RESV              */
         OI    IRSTNOGO,B'00100000'                                0485
*                   END;                                           0486
@RF00484 DS    0H                                                  0487
*                 RFY                                              0487
*                  (R1) UNRSTD;     /* UNRESTRICT R1                 */
@RF00479 DS    0H                                                  0488
*               END;                                               0488
*           END;                                                   0489
@RF00473 AL    R2,@CF00103                                         0489
@DE00472 L     @12,IRSTRPTR                                        0489
         C     R2,RESVCNT(,@12)                                    0489
         BNH   @DL00472                                            0489
@DC00472 DS    0H                                                  0490
*           RFY                                                    0490
*            (R2) UNRSTD;           /* END OF DO LOOP                */
*           IRSTRPTR=RESVNEXT;      /* GET NEXT TABLE SEGMENT        */
         L     @12,IRSTRPTR                                        0491
         L     @12,RESVNEXT(,@12)                                  0491
         ST    @12,IRSTRPTR                                        0491
*         END;                                                     0492
@DE00470 ICM   @12,15,IRSTRPTR                                     0492
         BNZ   @DL00470                                            0492
*         IF IRSTNOGO='1'B&IRSTUNCR='0'B THEN/* IF NOT ALL RESERVES
*                                      DONE                          */
         TM    IRSTNOGO,B'00100000'                                0493
         BNO   @RF00493                                            0493
         TM    IRSTUNCR,B'00010000'                                0493
         BNZ   @RF00493                                            0493
*           DO;                     /* AND UR NOT TRIED YET          */
*             IRSTNOGO='0'B;        /* TRY AGAIN                     */
*             IRSTUNCR='1'B;        /* USING UNCONDITIONAL RESERVE   */
         OI    IRSTUNCR,B'00010000'                                0496
         NI    IRSTNOGO,B'11011111'                                0496
*           END;                                                   0497
*         ELSE                                                     0498
*           IRSTK=2;                /* IF RESERVES DONE OR UNC     0498
*                                      RESERVE ALREADY TRIED GET OUT
*                                      OF LOOP                       */
         B     @RC00493                                            0498
@RF00493 MVC   IRSTK(4),@CF00115                                   0498
*       END;                                                       0499
@RC00493 LA    @12,1                                               0499
         AL    @12,IRSTK                                           0499
         ST    @12,IRSTK                                           0499
         CH    @12,@CH00115                                        0499
         BNH   @DL00468                                            0499
@DC00468 DS    0H                                                  0500
*       IF IRSTNOGO='0'B THEN       /* ALL RE-RESERVES DONE          */
         TM    IRSTNOGO,B'00100000'                                0500
         BNZ   @RF00500                                            0500
*         DO;                                                      0501
*           FRRRESVE='0'B;          /* RESET RESERVES OUTSTANDING    */
*           FRRLDWT='0'B;           /* RESET WAIT REQUIRED BIT       */
         NI    FRRRESVE(FRRWPTR),B'11100111'                       0503
*           IRSTRECD='1'B;          /* INDICATE RECORD = WTO         */
         OI    IRSTRECD,B'01000000'                                0504
*           IRSTRDLN=LENGTH(MSG421);/* INDICATE LENGTH OF MSG        */
         MVC   IRSTRDLN(2),@CH03277                                0505
*           MSG421=IEA421I;         /* INDICATE MSG TEXT             */
         MVC   MSG421(40),IEA421I                                  0506
*           RFY                                                    0507
*            (R0,                                                  0507
*             R1,                                                  0507
*             R3,                                                  0507
*             R4,                                                  0507
*             R13,                                                 0507
*             R15) RSTD;                                           0507
*           CALL RECORD;            /* ISSUE MSG IEA421I             */
         BAL   @14,RECORD                                          0508
*           RFY                                                    0509
*            (R0,                                                  0509
*             R1,                                                  0509
*             R3,                                                  0509
*             R4,                                                  0509
*             R13,                                                 0509
*             R15) UNRSTD;                                         0509
*         END;                                                     0510
*       ELSE                        /* SOME RESERVES FAILED          */
*         DO;                                                      0511
         B     @RC00500                                            0511
@RF00500 DS    0H                                                  0512
*           IRSTWTCD=CANTRESV;      /* WAIT STATE 4E, UNABLE TO    0512
*                                      RESERVE                       */
         MVC   IRSTWTCD(4),@CF02952                                0512
*           FRRLDWT='1'B;           /* INDICATE WAIT STATE REQUIRED  */
         OI    FRRLDWT(FRRWPTR),B'00001000'                        0513
*         END;                                                     0514
*     END;                          /* END RE-RESERVE RESERVED DEV   */
*   ELSE                                                           0516
*     ;                                                            0516
@RF00453 DS    0H                                                  0517
*   IF PCCAEXDM='0'B&               /* IF 'MORE' CHANNELS NOT LOST   */
*       FRRLDWT='0'B THEN           /* RE-RESERVE WAS SUCCESSFUL     */
@RC00453 L     @12,PCCAPTR                                         0517
         TM    PCCAEXDM(@12),B'01000000'                           0517
         BNZ   @RF00517                                            0517
         TM    FRRLDWT(FRRWPTR),B'00001000'                        0517
         BNZ   @RF00517                                            0517
*     DO;                           /* RESTART ACTIVE I/O            */
*                                                                  0518
*       /*************************************************************/
*       /*                                                           */
*       /* THIS SEGMENT WILL SEARCH THE CAT FOR CHANNELS WHICH       */
*       /* REQUIRE THAT I/O BE REDRIVEN. EACH CAT ENTRY WHICH HAS THE*/
*       /* CATIORST FLAG ON AND THE ERROR FLAG ON CORRESPONDING TO   */
*       /* THE ERROR BEING HANDLED (I.E. IF CHANNEL                  */
*       /* CHECK-CATCCRST=ON, IF EXTERNAL DAMAGE-CATMCRST=ON) WILL   */
*       /* REQUIRE PROCESSING. A UCB LOOKUP BE PERFORMED FOR EACH    */
*       /* POSSIBLE DEVICE ON EACH CHANNEL TO BE PROCESSED. FOR EACH */
*       /* ADDRESS WHICH HAS A CORRESPONDING UCB THE UCBLOCK WILL BE */
*       /* OBTAINED. THEN THE UCBUDE FLAG WILL BE TURNED ON TO FORCE */
*       /* VOLUME VERIFICATION TO BE PERFORMED PRIOR TO ANY          */
*       /* SUBSEQUENT I/O TO THE DEVICE. THEN A CHECK WILL BE MADE TO*/
*       /* DETERMINE IF ANY PATHS EXIST TO THE DEVICE. IF THERE ARE  */
*       /* NO PATHS THE DEVICE WILL BE TAKEN OFFLINE AND THE UCBIORST*/
*       /* FLAG TURNED ON TO FORCE ANY I/O REQUESTS TO THE DEVICE TO */
*       /* TERMINATE IN ERROR. THE DEVICE ADDRESS WILL ALSO BE BUILD */
*       /* INTO A MESSAGE (IEA004I) TO INFORM THE OPERATOR OF THE    */
*       /* LOSS OF THE DEVICE. IF THE DEVICE WAS ACTIVE ON THE       */
*       /* FAILING CHANNEL AN INTERRUPT WILL BE SIMULATED BY BRANCH  */
*       /* ENTERING THE I/O SLIH TO CAUSE THE I/O REQUEST TO BE      */
*       /* RETRIED OR POSTED IN ERROR.                               */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0519
*       MSG004=IEA004I;             /* INITIALIZE MESSAGE BUFFER     */
         MVC   MSG004(88),IEA004I                                  0519
*       IRSTDNUM=1;                 /* INITIALIZE INDEX INTO MSG     */
         MVI   IRSTDNUM,X'01'                                      0520
*       IRSTRECD='1'B;              /* INDICATE TYPE=WTO FOR RECORD
*                                      ROUTINE                       */
         OI    IRSTRECD,B'01000000'                                0521
*       IRSTRDLN=LENGTH(MSG004);    /* INDICATE MESSAGE LENGTH FOR 0522
*                                      RECORD RTN                    */
         MVC   IRSTRDLN(2),@CH03278                                0522
*       RFY                                                        0523
*        (UCBPTR,                                                  0523
*         R11,                                                     0523
*         R14) RSTD;                                               0523
*       IRSTCATP=ADDR(IRSTCAT);     /* GET POINTER TO COPIED CAT     */
         LA    IRSTCATP,IRSTCAT                                    0524
*       RFY                                                        0525
*         CAT BASED(IRSTCATP);                                     0525
*       DO IRSTLOOP=1 TO LENGTH(IRSTCAT)/LENGTH(CAT);/* LOOP THROUGH
*                                      CAT ENTRIES                   */
         LA    @15,1                                               0526
         STC   @15,IRSTLOOP                                        0526
@DL00526 DS    0H                                                  0527
*         IRSTCHAN=IRSTLOOP-1;      /* SET UP CHANNEL ADDRESS        */
         BCTR  @15,0                                               0527
         STC   @15,IRSTCHAN                                        0527
*         IF(FRRINCOD=MACHCKIN&CATMCRST='1'B)×/* PROCESS CAT ENTRY IF*/
*             (FRRINCOD=CHANCKIN&CATCCRST='1'B)/* PROCESSING IS      */
*           THEN                                                   0528
         CLI   FRRINCOD(FRRWPTR),1                                 0528
         BNE   @GL00030                                            0528
         TM    CATMCRST(IRSTCATP),B'00010000'                      0528
         BO    @RT00528                                            0528
@GL00030 CLI   FRRINCOD(FRRWPTR),2                                 0528
         BNE   @RF00528                                            0528
         TM    CATCCRST(IRSTCATP),B'00100000'                      0528
         BNO   @RF00528                                            0528
@RT00528 DS    0H                                                  0529
*           DO;                     /* REQUIRED FOR TYPE OF ERROR  0529
*                                      BEING HANDLED                 */
*             IRSTCALL=ADDR(FICALL3);/* ADDR OF RTN FINDUCB IS TO  0530
*                                      CALL                          */
         LA    @15,FICALL3                                         0530
         ST    @15,IRSTCALL                                        0530
*             RFY                                                  0531
*              (R0,                                                0531
*               R1,                                                0531
*               R3,                                                0531
*               R4,                                                0531
*               R5,                                                0531
*               R13,                                               0531
*               R15) RSTD;          /* FINDUCB PATH SETS THESE       */
*             CALL FINDUCB;         /* GET UCBS FOR DEVICES ON CHAN  */
         BAL   @14,FINDUCB                                         0532
*             RFY                                                  0533
*              (R0,                                                0533
*               R1,                                                0533
*               R3,                                                0533
*               R4,                                                0533
*               R5,                                                0533
*               R13,                                               0533
*               R15) UNRSTD;                                       0533
*FICALL3:                                                          0534
*             PROC OPTIONS(NOSAVE,NOSAVEAREA);/* FICALL3 PROCEEDURE
*                                      IS CALLED BY THE FINDUCB    0534
*                                      PROCEEDURE FOR EACH DEVICE ON
*                                      THE LOST CHAN. FICALL3 WILL 0534
*                                      DETERMINE IF THE DEVICE IS  0534
*                                      ACTIVE AND SIMULATE AN I/O  0534
*                                      INTERRUPT TO RESTART I/O.   0534
*                                      FICALL3 WILL RETURN TO      0534
*                                      FINDUCB. FINDUCB WILL CONTINUE
*                                      TO CALL FICALL3 UNTIL ALL   0534
*                                      DEVICES ON THE LOST CHAN HAVE
*                                      BEEN PROCESSED. FINDUCB WILL
*                                      THEN RETURN TO ITS CALLER     */
         B     @PB00004                                            0534
FICALL3  DS    0H                                                  0535
*             IRSTFI14=R14;         /* SAVE RETURN ADDRESS           */
         ST    R14,IRSTFI14                                        0535
*             PCCAWERP(5:8)=ERPIBSTD;/* INITIALIZE ERPIB             */
         L     @15,PCCAPTR                                         0536
         MVC   PCCAWERP+4(4,@15),ERPIBSTD                          0536
*             PCCACHUB=UCBPTR;      /* PUT UCB ADDR IN ERPIB         */
         ST    UCBPTR,PCCACHUB(,@15)                               0537
*             IF(UCBBSY='0'B&UCBPSNS='0'B)×(UCBCHA=IRSTCHAN&UCBCPU=
*                 PSACPUSA) THEN                                   0538
         TM    UCBBSY(UCBPTR),B'10010000'                          0538
         BZ    @RT00538                                            0538
         CLC   UCBCHA(1,UCBPTR),IRSTCHAN                           0538
         BNE   @RF00538                                            0538
         SLR   @15,@15                                             0538
         IC    @15,UCBCPU(,UCBPTR)                                 0538
         CH    @15,PSACPUSA                                        0538
         BNE   @RF00538                                            0538
@RT00538 DS    0H                                                  0539
*               DO;                 /* IF DEVICE NOT BUSY ON ANOTHER
*                                      CPU OR CHANNEL THEN FORCE DAVV
*                                                            @ZM47978*/
*                 UCBUDE='1'B;      /* TURN ON UDE TO FORCE VOLUME 0540
*                                      VERIFICATION                  */
         OI    UCBUDE(UCBPTR),B'00100000'                          0540
*                 UCBSAP='0'B;      /* TURN OFF STANDALONE PROCESS   */
         NI    UCBSAP(UCBPTR),B'11111011'                          0541
*                 IF UCB3DACC='1'B THEN                            0542
         TM    UCB3DACC(UCBPTR),B'00100000'                        0542
         BNO   @RF00542                                            0542
*                   UCBAMV='0'B;    /* INDICATE UDE TO VSAM  @ZM46229*/
         NI    UCBAMV(UCBPTR),B'10111111'                          0543
*               END;                                               0544
@RF00542 DS    0H                                                  0545
*             RFY                                                  0545
*              (R4,                                                0545
*               R5,                                                0545
*               R13) RSTD;                                         0545
@RF00538 DS    0H                                                  0546
*             R4=UCBPTR;            /* SET UP INPUT TO IOSGEN R4=  0546
*                                      ADDR (UCB)                    */
         LR    R4,UCBPTR                                           0546
*             R5=ADDR(IRSTUCBP);    /* R5=ADDR OF WORKAREA           */
         LA    R5,IRSTUCBP                                         0547
*             CALL IOSGENPT;        /* CALL IOSGEN TO SEE IF PATHS 0548
*                                      EXIST                         */
         BAL   @14,IOSGENPT                                        0548
*             RFY                                                  0549
*              (R4,                                                0549
*               R5,                                                0549
*               R13) UNRSTD;                                       0549
*             IF IRSTPCP0=0&IRSTPCP1=0&IRSTSCP0=0&IRSTSCP1=0 THEN  0550
         CLI   IRSTPCP0,0                                          0550
         BNE   @RF00550                                            0550
         CLI   IRSTPCP1,0                                          0550
         BNE   @RF00550                                            0550
         CLI   IRSTSCP0,0                                          0550
         BNE   @RF00550                                            0550
         CLI   IRSTSCP1,0                                          0550
         BNE   @RF00550                                            0550
*               DO;                 /* NO PATHS-ISSUE MSG, FORCE   0551
*                                      OFFLINE                       */
*                 PCCACNOR='1'B;    /* INDICATE NO RETRY FOR ERP     */
         L     @15,PCCAPTR                                         0552
         OI    PCCACNOR(@15),B'00000001'                           0552
*                 IF(UCBMTPXP='1'B&UCBBASE+'200'X=UCBPTR&UCBIORST='0'B)
*                     ×(UCBMTPXP='0'B&UCBIORST='0'B) THEN/* DO ONLY
*                                      FOR BASE UCB (MULT EXP)       */
         TM    UCBMTPXP(UCBPTR),B'00001000'                        0553
         BNO   @GL00038                                            0553
         LA    @15,512                                             0553
         AL    @15,UCBBASE(,UCBPTR)                                0553
         CR    @15,UCBPTR                                          0553
         BNE   @GL00038                                            0553
         TM    UCBIORST(UCBPTR),B'10000000'                        0553
         BZ    @RT00553                                            0553
@GL00038 TM    UCBMTPXP(UCBPTR),B'00001000'                        0553
         BNZ   @RF00553                                            0553
         TM    UCBIORST(UCBPTR),B'10000000'                        0553
         BNZ   @RF00553                                            0553
@RT00553 DS    0H                                                  0554
*                   DO;             /* AND UCBS NOT ALREADY PROCESSED*/
*                     RUCBONLI='0'B;/* INDICATE DEVICE OFFLINE     0555
*                                      (UCBONLI)                     */
         L     @15,RUCBONLI-3(,UCBPTR)                             0555
@GL00042 LR    @05,@15                                             0555
         N     @05,@CF03309                                        0555
         CS    @15,@05,RUCBONLI-3(UCBPTR)                          0555
         BNE   @GL00042                                            0555
*                     RUCBVHRN='1'B;/* OFFLINE DUE TO PATH (UCBONLI) */
         L     @15,RUCBVHRN(,UCBPTR)                               0556
@GL00043 LR    @05,@15                                             0556
         O     @05,@CF03312                                        0556
         CS    @15,@05,RUCBVHRN(UCBPTR)                            0556
         BNE   @GL00043                                            0556
*                     GEN SETS(UCBONLI,UCBVHRSN);                  0557
*  DUMMY GEN TO PUT UCB BIT IN CROSS REFERENCE
*                     UCBIORST='1'B;/* I/O TO BE POSTED PERM ERROR   */
         OI    UCBIORST(UCBPTR),B'10000000'                        0558
*                     IF IRSTDNUM=1 THEN/* COMMA NOT REQ IS 1ST DEV  */
         CLI   IRSTDNUM,1                                          0559
         BNE   @RF00559                                            0559
*                       M004DEV(IRSTDNUM,1:1)=':';                 0560
         SLR   @15,@15                                             0560
         IC    @15,IRSTDNUM                                        0560
         SLA   @15,2                                               0560
         LA    @01,M004DEV-4(@15)                                  0560
         MVI   0(@01),C':'                                         0560
*                     ELSE                                         0561
*                       M004DEV(IRSTDNUM,1:1)=',';                 0561
         B     @RC00559                                            0561
@RF00559 SLR   @15,@15                                             0561
         IC    @15,IRSTDNUM                                        0561
         SLA   @15,2                                               0561
         LA    @01,M004DEV-4(@15)                                  0561
         MVI   0(@01),C','                                         0561
*                     M004DEV(IRSTDNUM,2:4)=UCBNAME;/* PUT IN DEVADR */
@RC00559 SLR   @15,@15                                             0562
         IC    @15,IRSTDNUM                                        0562
         SLA   @15,2                                               0562
         LA    @01,M004DEV-3(@15)                                  0562
         MVC   0(3,@01),UCBNAME(UCBPTR)                            0562
*                     IF IRSTDNUM=DIM(M004DEV) THEN                0563
         CLI   IRSTDNUM,8                                          0563
         BNE   @RF00563                                            0563
*                       DO;         /* IF MSG IS FULL-ISSUE RECORD   */
*                         RFY                                      0565
*                          (R4,                                    0565
*                           R13,                                   0565
*                           R15,                                   0565
*                           R0,                                    0565
*                           R1,                                    0565
*                           R3) RSTD;                              0565
*                         CALL RECORD;                             0566
         BAL   @14,RECORD                                          0566
*                         RFY                                      0567
*                          (R4,                                    0567
*                           R13,                                   0567
*                           R15,                                   0567
*                           R0,                                    0567
*                           R1,                                    0567
*                           R3) UNRSTD;                            0567
*                         IRSTDNUM=0;/* INITIALIZE TO START NEW MSG  */
         MVI   IRSTDNUM,X'00'                                      0568
*                       END;                                       0569
*                     IRSTDNUM=IRSTDNUM+1;/* UPDATE DEV PTR IN MSG   */
@RF00563 IC    @15,IRSTDNUM                                        0570
         LA    @15,1(,@15)                                         0570
         STC   @15,IRSTDNUM                                        0570
*                   END;                                           0571
*               END;                                               0572
@RF00553 DS    0H                                                  0573
*             IF(UCBBSY='1'B×UCBPSNS='1'B)&UCBCHA=IRSTCHAN&UCBCPU= 0573
*                 PSACPUSA THEN                                    0573
@RF00550 TM    UCBBSY(UCBPTR),B'10010000'                          0573
         BZ    @RF00573                                            0573
         CLC   UCBCHA(1,UCBPTR),IRSTCHAN                           0573
         BNE   @RF00573                                            0573
         SLR   @15,@15                                             0573
         IC    @15,UCBCPU(,UCBPTR)                                 0573
         CH    @15,PSACPUSA                                        0573
         BNE   @RF00573                                            0573
*               DO;                 /* DO IF DEVICE ACTIVE ON FAILING
*                                      CHANNEL               @ZM47978*/
*                 RFY                                              0575
*                  (R15,                                           0575
*                   R0,                                            0575
*                   R1) RSTD;                                      0575
*                 R11=IRSTUCBL;     /* GET UCBLOCK ADDR AND RELEASE
*                                      LOCK                          */
         L     R11,IRSTUCBL                                        0576
*                 GEN SETS(R14,R15,R0,R11) REFS(R11,R12,R13);      0577
         SETLOCK RELEASE,TYPE=IOSUCB,ADDR=(11),DISABLED,REGS=USE,      X
               RELATED=(GETUCB1,'FREE UCB LOCK')
*                 FRRSUCB='0'B;     /* INDICATE UCB LOCK RELEASED    */
         NI    FRRSUCB(FRRWPTR),B'10111111'                        0578
*                 RFY                                              0579
*                  (R15,                                           0579
*                   R0,                                            0579
*                   R1) UNRSTD;                                    0579
*                 RFY                                              0580
*                  (R4,                                            0580
*                   R5,                                            0580
*                   R13) RSTD;                                     0580
*                 R11='0A'X;        /* INDICATE TO IOS A PSEUDO INT  */
         LA    R11,10                                              0581
*                 R5=ADDR(IECINT);  /* GET ADDRESS OF I/O SLIH       */
         L     R5,@CV02934                                         0582
*                 R13=WSACRSTI;     /* GET SAVE AREA ADDRESS         */
         L     @15,LCCAPTR                                         0583
         L     @15,LCCACPUS(,@15)                                  0583
         L     R13,WSACRSTI(,@15)                                  0583
*                 CALL IGFPSAD0;    /* ALLOW MODIFICATION OF FLC     */
         L     @15,@CV02941                                        0584
         BALR  @14,@15                                             0584
*                 FLCIOAA=UCBCHAN;  /* INIT I/O INTERRUPT ADDRESS    */
         SLR   @15,@15                                             0585
         ICM   @15,3,UCBCHAN(UCBPTR)                               0585
         STCM  @15,7,FLCIOAA                                       0585
*                 FLCCSW=FLCCSW&&FLCCSW;/* ZERO CSW STATUS           */
         XC    FLCCSW(8),FLCCSW                                    0586
*                 ICC='1'B;         /* INTERFACE CTL CHECK=ON        */
*                 CCC='1'B;         /* CHANNEL CTL CHECK=ON          */
         OI    ICC,B'00000110'                                     0588
*                 CALL IGFPSAE0;    /* PREVENT MODIFICATION OF FLC   */
         L     @15,@CV02942                                        0589
         BALR  @14,@15                                             0589
*                 PCCACCHA='1'B;    /* INDICATE CHANNEL IS CAUSE OF
*                                      ERROR                         */
         L     @15,PCCAPTR                                         0590
         OI    PCCACCHA(@15),B'01000000'                           0590
*                 GEN( STM 0,15,0(13));/* SAVE REGS                  */
          STM 0,15,0(13)
*                 GEN( BAL 4,4(5)); /* BRANCH ENTER I/O SLIH         */
          BAL 4,4(5)
*                 GEN( LM 0,15,0(13));/* RESTORE REGS                */
          LM 0,15,0(13)
*                 RFY                                              0594
*                  (R4,                                            0594
*                   R5,                                            0594
*                   R13) UNRSTD;                                   0594
*               END;                                               0595
*             PCCAWERP=PCCAWERP&&PCCAWERP;/* ZERO ERPIB              */
@RF00573 L     @15,PCCAPTR                                         0596
         XC    PCCAWERP(8,@15),PCCAWERP(@15)                       0596
*             R14=IRSTFI14;         /* RESTORE R14                   */
         L     R14,IRSTFI14                                        0597
*           END FICALL3;                                           0598
@EL00004 DS    0H                                                  0598
@EF00004 DS    0H                                                  0598
@ER00004 BR    @14                                                 0598
@PB00004 DS    0H                                                  0599
*         RFY                                                      0599
*          (R4,                                                    0599
*           R5,                                                    0599
*           R13) RSTD;                                             0599
*         R11='0A'X;                /* INDICATE PSEUDO INTERRUPT     */
         LA    R11,10                                              0600
*         R5=ADDR(IECINT);          /* GET ADDR OF SLIH              */
         L     R5,@CV02934                                         0601
*         R13=WSACRSTI;             /* GET SAVE AREA ADDRESS         */
         L     @15,LCCAPTR                                         0602
         L     @15,LCCACPUS(,@15)                                  0602
         L     R13,WSACRSTI(,@15)                                  0602
*         CALL IGFPSAD0;            /* ALLOW MODIFICATION OF FLC     */
         L     @15,@CV02941                                        0603
         BALR  @14,@15                                             0603
*         FLCIOAA=IRSTCHAN*256;     /* STORE INTERRUPT ADDR          */
         SLR   @15,@15                                             0604
         IC    @15,IRSTCHAN                                        0604
         SLA   @15,8                                               0604
         STCM  @15,7,FLCIOAA                                       0604
*         FLCCSW=FLCCSW&&FLCCSW;                                   0605
         XC    FLCCSW(8),FLCCSW                                    0605
*         CALL IGFPSAE0;            /* PREVENT MODIFICATION OF FLC   */
         L     @15,@CV02942                                        0606
         BALR  @14,@15                                             0606
*         GEN( STM 0,15,0(13));                                    0607
          STM 0,15,0(13)
*         GEN( BAL 4,4(5));         /* SIMULATE CHANNEL AVAIL      0608
*                                      INTERRUPT                     */
          BAL 4,4(5)
*         GEN( LM 0,15,0(13));                                     0609
          LM 0,15,0(13)
*         RFY                                                      0610
*          (R4,                                                    0610
*           R5,                                                    0610
*           R13) UNRSTD;                                           0610
*         IRSTCATP=ADDR(PCCACAT)+(IRSTCATP-ADDR(IRSTCAT));/* GET ADDR
*                                      OF REAL CAT                   */
         L     @15,PCCAPTR                                         0611
         LA    @15,PCCACAT(,@15)                                   0611
         LA    @05,IRSTCAT                                         0611
         LCR   @05,@05                                             0611
         ALR   @05,IRSTCATP                                        0611
         ALR   @15,@05                                             0611
         LR    IRSTCATP,@15                                        0611
*         IF FRRINCOD=MACHCKIN      /* IF HANDLING MACHINE CHECK     */
*           THEN                                                   0612
         CLI   FRRINCOD(FRRWPTR),1                                 0612
         BNE   @RF00612                                            0612
*           CATMCRST='0'B;          /* RESET CAT MACH CK INDICATOR   */
         NI    CATMCRST(IRSTCATP),B'11101111'                      0613
*         IF FRRINCOD=CHANCKIN      /* IF HANDLING CHANNEL CHECK     */
*           THEN                                                   0614
@RF00612 CLI   FRRINCOD(FRRWPTR),2                                 0614
         BNE   @RF00614                                            0614
*           CATCCRST='0'B;          /* RESET CAT CHANNEL CHECK IND   */
         NI    CATCCRST(IRSTCATP),B'11011111'                      0615
*         IF CATMCRST='0'B&CATCCRST='0'B THEN                      0616
@RF00614 TM    CATMCRST(IRSTCATP),B'00110000'                      0616
         BNZ   @RF00616                                            0616
*           CATIORST='0'B;          /* IF NO ERROR BITS RESET I/O  0617
*                                      RESTART REQ                   */
         NI    CATIORST(IRSTCATP),B'10111111'                      0617
*         IRSTCATP=ADDR(IRSTCAT)+(IRSTCATP-ADDR(PCCACAT))+LENGTH(CAT);
@RF00616 LA    @15,IRSTCAT                                         0618
         L     @01,PCCAPTR                                         0618
         LA    @05,PCCACAT(,@01)                                   0618
         LCR   @05,@05                                             0618
         ALR   @05,IRSTCATP                                        0618
         ALR   @15,@05                                             0618
         AH    @15,@CH00101                                        0618
         LR    IRSTCATP,@15                                        0618
*                                   /* USE COPIED CAT                */
*       END;                                                       0619
*   ELSE                                                           0620
*     IRSTCATP=IRSTCATP+LENGTH(CAT);                               0620
         B     @RC00528                                            0620
@RF00528 AH    IRSTCATP,@CH00101                                   0620
*     END;                                                         0621
@RC00528 LA    @15,1                                               0621
         SLR   @05,@05                                             0621
         IC    @05,IRSTLOOP                                        0621
         ALR   @15,@05                                             0621
         STC   @15,IRSTLOOP                                        0621
         CH    @15,@CH00830                                        0621
         BNH   @DL00526                                            0621
*   IF IRSTDNUM^=1 THEN             /* MSG OUTSTANDING ?             */
         CLI   IRSTDNUM,1                                          0622
         BE    @RF00622                                            0622
*     DO;                                                          0623
*       DO UNTIL IRSTDNUM=(DIM(M004DEV)+1);/* BLANK UNUSED ENTRIES   */
@DL00624 DS    0H                                                  0625
*         M004DEV(IRSTDNUM)='    ';                                0625
         SLR   @15,@15                                             0625
         IC    @15,IRSTDNUM                                        0625
         LR    @12,@15                                             0625
         SLA   @12,2                                               0625
         LA    @01,M004DEV-4(@12)                                  0625
         MVC   0(4,@01),@CC03215                                   0625
*         IRSTDNUM=IRSTDNUM+1;                                     0626
         LA    @15,1(,@15)                                         0626
         STC   @15,IRSTDNUM                                        0626
*       END;                                                       0627
@DE00624 CLI   IRSTDNUM,9                                          0627
         BNE   @DL00624                                            0627
*       RFY                                                        0628
*        (R4,                                                      0628
*         R13,                                                     0628
*         R15,                                                     0628
*         R0,                                                      0628
*         R1,                                                      0628
*         R3) RSTD;                                                0628
*       CALL RECORD;                /* ISSUE MESSAGE                 */
         BAL   @14,RECORD                                          0629
*       RFY                                                        0630
*        (R4,                                                      0630
*         R13,                                                     0630
*         R15,                                                     0630
*         R0,                                                      0630
*         R1,                                                      0630
*         R3) UNRSTD;                                              0630
*     END;                                                         0631
*   RFY                                                            0632
*    (UCBPTR,                                                      0632
*     R11,                                                         0632
*     R14) UNRSTD;                                                 0632
@RF00622 DS    0H                                                  0633
*   END;                            /* END RESTART ACTIVE I/O        */
*   ELSE                                                           0634
*     ;                                                            0634
@RF00517 DS    0H                                                  0635
*   PCCAIRST='0'B;                  /* DONE RECOVERING CHANNELS      */
         L     @12,PCCAPTR                                         0635
         NI    PCCAIRST(@12),B'01111111'                           0635
*   IF FRRLDWT='0'B&                /* IF RESERVE SUCCESSFUL BUT     */
*       PCCAEXDM='1'B THEN          /* IF MORE CHANNELS LOST WHILE   */
         TM    FRRLDWT(FRRWPTR),B'00001000'                        0636
         BNZ   @RF00636                                            0636
         TM    PCCAEXDM(@12),B'01000000'                           0636
         BNO   @RF00636                                            0636
*     DO;                           /* IECVIRST WAS PROCESSING       */
*       IRSTWTCD=MORECHLT;          /* WAIT STATE PARM FOR LOADWAIT  */
         MVC   IRSTWTCD(4),@CF02944                                0638
*       FRRLDWT='1'B;               /* IND WAIT TO BE LOADED         */
         OI    FRRLDWT(FRRWPTR),B'00001000'                        0639
*     END;                                                         0640
*   ELSE                                                           0641
*     ;                                                            0641
@RF00636 DS    0H                                                  0642
*   IF FRRLDWT='1'B THEN            /* WAIT TO BE LOADED             */
         TM    FRRLDWT(FRRWPTR),B'00001000'                        0642
         BNO   @RF00642                                            0642
*     DO;                                                          0643
*       IRSTWAIT='0'B;              /* IND NON RESTARTABLE WAIT      */
         NI    IRSTWAIT,B'01111111'                                0644
*       CALL LOADWAIT;              /* GO LOAD WAIT STATE            */
         BAL   @14,LOADWAIT                                        0645
*     END;                                                         0646
*   ELSE                                                           0647
*     DO;                           /* RETURN PROCESSING             */
*                                                                  0647
         B     @RC00642                                            0647
@RF00642 DS    0H                                                  0648
*       /*************************************************************/
*       /*                                                           */
*       /* THIS SEGMENT WILL RELEASE RESOURCES PRIOR TO EXIT. THE    */
*       /* CHANNEL LOGOUT AREAS (LCL AND IOEL) ARE SET TO 1'S. ANY   */
*       /* RESERVE TABLE SEGMENTS GETMAINED ARE FREED. THE GENERAL   */
*       /* WORK AREA IS FREED. THE FRR IS DELETED. THE SUPER BIT IS  */
*       /* TURNED OFF AND THE SYSTEM IS ENABLED.                     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0648
*       CALL IGFPSAD0;              /* ALLOW MODIFICATION OF FLC     */
         L     @15,@CV02941                                        0648
         BALR  @14,@15                                             0648
*       FLCLCL='FFFFFFFF'X;         /* SET LCL TO ALL 1'S            */
         MVC   FLCLCL(4),@CB03216                                  0649
*       FLCCSW=FLCCSW&&FLCCSW;      /* CLEAR CSW TO ZERO             */
         XC    FLCCSW(8),FLCCSW                                    0650
*       CALL IGFPSAE0;              /* PREVENT MODIFICATION OF FLC   */
         L     @15,@CV02942                                        0651
         BALR  @14,@15                                             0651
*       PCCAELAD->LOGOUT='FFFFFFFF'X;/* SET FIRST WORD OF IOEL TO 1  */
         L     @12,PCCAPTR                                         0652
         L     @12,PCCAELAD(,@12)                                  0652
         MVC   LOGOUT(4,@12),@CB03216                              0652
*       RFY                                                        0653
*        (R0,                                                      0653
*         R1,                                                      0653
*         R14,                                                     0653
*         R15) RSTD;                                               0653
*       GEN SETS(R14,R15,R0,R1) REFS(R11,R12,R13);                 0654
*                                           /*OBT SALLOC FOR GETMAIN */
CLGSALCO SETLOCK   OBTAIN,TYPE=SALLOC,MODE=UNCOND,DISABLED,REGS=USE,   X
               RELATED=(CLFSALCO,'GET SALLOC LOCK')
*       FRRSALOC='1'B;              /* IND SALLOC LOCK HELD          */
         OI    FRRSALOC(FRRWPTR),B'10000000'                       0655
*       IRSTRPTR=ADDR(IRSTRESV);    /* FIRST SEGMENT OF RESERVE TAB  */
         LA    @12,IRSTRESV                                        0656
         ST    @12,IRSTRPTR                                        0656
*       R1=RESVNEXT;                /* NEXT SEGMENT OR ZERO          */
         L     R1,RESVNEXT(,@12)                                   0657
*       RESVNEXT=0;                 /* BREAK CHAIN FOR FRR           */
         SLR   @11,@11                                             0658
         ST    @11,RESVNEXT(,@12)                                  0658
*       IRSTRPTR=R1;                /* FIRST SEGMENT TO FREE         */
         ST    R1,IRSTRPTR                                         0659
*       DO WHILE IRSTRPTR^=0;       /* FREE ALL GETMAINED SEGMENTS   */
         B     @DE00660                                            0660
@DL00660 DS    0H                                                  0661
*         R1=IRSTRPTR;              /* ADDRESS FOR FREEMAIN          */
         L     @12,IRSTRPTR                                        0661
         LR    R1,@12                                              0661
*         R0=LENGTH(RESVTAB);       /* LENGTH                        */
         LA    R0,200                                              0662
*         IRSTRPTR=RESVNEXT;        /* ADDRESS OF NEXT TO BE FREED   */
         L     @12,RESVNEXT(,@12)                                  0663
         ST    @12,IRSTRPTR                                        0663
*         RFY                                                      0664
*          (R3,                                                    0664
*           R4) RSTD;                                              0664
*         GEN SETS(R3,R4,R14,R15) REFS(R0,R1);                     0665
         FREEMAIN  RU,LV=(0),A=(1),BRANCH=(YES,GLOBAL),SP=245
*         RFY                                                      0666
*          (R3,                                                    0666
*           R4) UNRSTD;                                            0666
*       END;                        /* ALL GETMAINED SEGMENTS FREED  */
@DE00660 ICM   @12,15,IRSTRPTR                                     0667
         BNZ   @DL00660                                            0667
*       R1=IRSTWPTR;                /* ADDR WORK AREA FOR FREEMAIN   */
         LR    R1,IRSTWPTR                                         0668
*       GEN(L     R15,@SIZDATD);    /* LENGTH AND SUBPOOL            */
         L     R15,@SIZDATD
*       GEN(LA    R0,0(R15));       /* CLEAR HIGH ORDER BYTE         */
         LA    R0,0(R15)
*       FRRGWPTR=0;                 /* IND FREED FOR FRR             */
         SLR   @12,@12                                             0671
         ST    @12,FRRGWPTR(,FRRWPTR)                              0671
*       IRSTWPTR=0;                 /* CANNOT USE WORK AREA          */
         SLR   IRSTWPTR,IRSTWPTR                                   0672
*       RFY                                                        0673
*        (R3,                                                      0673
*         R4) RSTD;                                                0673
*       GEN SETS(R3,R4,R14,R15) REFS(R0,R1);                       0674
*                                      /*FREE GENERAL WORK AREA      */
         FREEMAIN  RU,LV=(0),A=(1),BRANCH=(YES,GLOBAL),SP=245
*       RFY                                                        0675
*        (R3,                                                      0675
*         R4) UNRSTD;                                              0675
*       GEN SETS(R14,R15,R0,R1) REFS(R11,R12,R13);                 0676
*                                           /*RELEASE SALLOC LOCK    */
CLFSALOC SETLOCK   RELEASE,TYPE=SALLOC,DISABLED,REGS=USE,              X
               RELATED=(CLGSALOC,'RELEASE SALLOC LOCK')
*       FRRSALOC='0'B;              /* IND SALLOC LOCK NOT HELD      */
         NI    FRRSALOC(FRRWPTR),B'01111111'                       0677
*       GEN SETS(R15,R1);                                          0678
*                                      /*DELETE FRR          @ZM48745*/
         SETFRR    D,WRKREGS=(R15,R1)                          @ZM48745
*       RFY                                                        0679
*        (R0,                                                      0679
*         R1,                                                      0679
*         R14,                                                     0679
*         R15) UNRSTD;                                             0679
*       RFY                                                        0680
*         R13 RSTD;                                                0680
*       R13=WSACRSTI;               /* STORAGE ADDR FOR STOSM INSTR  */
         L     @11,LCCAPTR                                         0681
         L     @11,LCCACPUS(,@11)                                  0681
         L     R13,WSACRSTI(,@11)                                  0681
*       PSAIOSUP='0'B;              /* TURN OFF SUPER BIT            */
         NI    PSAIOSUP,B'01111111'                                0682
*       GEN REFS(R13,ENABLE) SETS(IORWSAVE);                       0683
*                                      /*ENABLE I/O AND EXT INTERRUPT*/
         STOSM 0(R13),ENABLE
*       RFY                                                        0684
*         R13 UNRSTD;                                              0684
*       RFY                                                        0685
*         R14 RSTD;                                                0685
*       R14=CVTSRBRT;               /* RETURN TO SRB DISPATCHER      */
         L     @12,CVTPTR                                          0686
         L     R14,CVTSRBRT(,@12)                                  0686
*     END;                          /* END RETURN PROCESSING         */
*OBTSTOR:                                                          0688
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* GET STORAGE FOR CALLER        */
*                                                                  0688
         B     @PB00005                                            0688
OBTSTOR  DS    0H                                                  0689
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SEGMENT OBTAINS STORAGE BY BRANCH ENTERING GETMAIN.      */
*   /* STORAGE IS OBTAINED FROM SQA SUBPOOL 245. INPUT: IRSTOBPN IS  */
*   /* THE LENGTH OF STORAGE TO BE OBTAINED. R14 IS THE RETURN       */
*   /* ADDRESS. OUTPUT: IRSTOBPN WILL CONTAIN THE ADDRESS OF THE     */
*   /* REQUESTED STORAGE. CALLERS: RESVSCAN TO OBTAIN ANOTHER RESERVE*/
*   /* TABLE SEGMENT. RECORD TO OBTAIN STORAGE TO COPY THE MESSAGE   */
*   /* BUFFER IF THE RECORD SYSTEM FUNCTION CANNOT 'BUFFER' THE      */
*   /* MESSAGE.                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0689
*   RFY                                                            0689
*    (R0,                                                          0689
*     R1,                                                          0689
*     R4,                                                          0689
*     R14,                                                         0689
*     R15,                                                         0689
*     R3) RSTD;                                                    0689
*   IRSTOBRT=R14;                   /* SAVE RETURN ADDRESS           */
         LR    IRSTOBRT,R14                                        0690
*   GEN REFS(R11,R12,R13) SETS(R14,R15,R0,R1);                     0691
*                                           /*GETMAIN REQUIRES SALLOC*/
GETSALC2 SETLOCK   OBTAIN,TYPE=SALLOC,MODE=UNCOND,DISABLED,REGS=USE,   X
               RELATED=(FRESALC2,'OBTAIN SALLOC LOCK')
*   FRRSALOC='1'B;                  /* IND SALLOC LOCK HELD          */
         OI    FRRSALOC(FRRWPTR),B'10000000'                       0692
*   R0=IRSTOBPN;                    /* LEN FOR GETMAIN               */
         LR    R0,IRSTOBPN                                         0693
*   GEN REFS(R0) SETS(R4,R14,R15,R1,R3);                           0694
OBTMAIN2 GETMAIN   RU,LV=(0),BRANCH=(YES,GLOBAL),SP=245
*   IRSTOBPN=R1;                    /* RET ADDR OF STORAGE           */
         LR    IRSTOBPN,R1                                         0695
*   GEN REFS(R11,R12,R13) SETS(R14,R15,R0,R1);                     0696
FRESALC2 SETLOCK   RELEASE,TYPE=SALLOC,DISABLED,REGS=USE,              X
               RELATED=(GETSALC2,'RELEASE SALLOC LOCK')
*   FRRSALOC='0'B;                  /* IND SALLOC NOT HELD           */
         NI    FRRSALOC(FRRWPTR),B'01111111'                       0697
*   R14=IRSTOBRT;                   /* RESTORE RETURN ADDRESS        */
         LR    R14,IRSTOBRT                                        0698
*   RFY                                                            0699
*    (R0,                                                          0699
*     R1,                                                          0699
*     R4,                                                          0699
*     R14,                                                         0699
*     R15,                                                         0699
*     R3) UNRSTD;                                                  0699
*   END OBTSTOR;                                                   0700
@EL00005 DS    0H                                                  0700
@EF00005 DS    0H                                                  0700
@ER00005 BR    @14                                                 0700
*RECORD:                                                           0701
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* ISSUE RECORD MACRO            */
*                                                                  0701
RECORD   DS    0H                                                  0702
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS PROCEDURE ISSUES THE RECORD MACRO TO WRITE A RECORD TO   */
*   /* THE LOGREC DATASET OR TO ISSUE A MESSAGE TO THE OPERATOR. THE */
*   /* RECORD IS ALREADY BUILT IN THE MESSAGE BUFFER. THE LENGTH OF  */
*   /* THE RECORD IS IN IRSTRDLN. IRSTRECD=0 INDICATE LOGREC.        */
*   /* IRSTRECD=1 INDICATES WTO. IF THE RECORD MACRO RETURNS CODES OF*/
*   /* 8 OR 12, OBTSTOR WILL BE CALLED TO GETMAIN ENOUGH STORAGE TO  */
*   /* HOLD THE RECORD, THE RECORD WILL BE COPIED TO THE GETMAINED   */
*   /* STORAGE AND THE RECORD MACRO WILL BE RE-ISSUED WITH BUFFER=NO.*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0702
*   RFY                                                            0702
*    (R14,                                                         0702
*     R15,                                                         0702
*     R0,                                                          0702
*     R1,                                                          0702
*     R13) RSTD;                                                   0702
*   IRSTRERT=R14;                   /* SAVE RETURN ADDRESS           */
         LR    IRSTRERT,R14                                        0703
*   R1=ADDR(IRSTMESG);              /* ADDRESS OF RECORD             */
         LA    R1,IRSTMESG                                         0704
*   R0=IRSTRDLN;                    /* LENGTH OF RECORD              */
         LH    R0,IRSTRDLN                                         0705
*   R13=WSACRSTI;                   /* SAVE AREA FOR RECORD          */
         L     @05,LCCAPTR                                         0706
         L     @05,LCCACPUS(,@05)                                  0706
         L     R13,WSACRSTI(,@05)                                  0706
*   IF IRSTRECD='0'B THEN           /* IF RECORDING WAIT STATE       */
         TM    IRSTRECD,B'01000000'                                0707
         BNZ   @RF00707                                            0707
*     DO;                           /* RECORD TYPE IS LOGREC         */
*       GEN REFS(R0,R1) SETS(R14,R15);                             0709
         RECORD    TYPE=LOGREC,RCVRY=SETFRR,PARMADR=(1),LENGTH=(0),    X
               BUFFER=YES,HEADER=YES
*     END;                          /* END RECORD TYPE IS LOGREC     */
*   ELSE                            /* RECORDING MESSAGE             */
*     DO;                           /* RECORD TYPE IS WTO            */
         B     @RC00707                                            0711
@RF00707 DS    0H                                                  0712
*       GEN REFS(R0,R1) SETS(R14,R15);                             0712
         RECORD    TYPE=WTO,RCVRY=SETFRR,DATAADR=(1),LENGTH=(0),       X
               BUFFER=YES
*     END;                          /* END RECORD TYPE IS WTO        */
*   IF R15=8×                       /* IF MESSAGE TRUNCATED          */
*       R15=12 THEN                 /* MESSAGE NOT BUFFERED          */
@RC00707 CH    R15,@CH00101                                        0714
         BE    @RT00714                                            0714
         CH    R15,@CH00796                                        0714
         BNE   @RF00714                                            0714
@RT00714 DS    0H                                                  0715
*     DO;                           /* RE-RECORD WITH BUFFER=NO      */
*       IF IRSTRECD='0'B THEN       /* IF LOGREC RECORD              */
         TM    IRSTRECD,B'01000000'                                0716
         BNZ   @RF00716                                            0716
*         IRSTOBPN=IRSTRDLN+LENGTH(LRB);/* GETMAIN LEN INCLUDES    0717
*                                      HEADER                        */
         LA    IRSTOBPN,24                                         0717
         AH    IRSTOBPN,IRSTRDLN                                   0717
*       ELSE                                                       0718
*         IRSTOBPN=IRSTRDLN;        /* WTO LEN IS COMPLETE LENGTH    */
         B     @RC00716                                            0718
@RF00716 LH    IRSTOBPN,IRSTRDLN                                   0718
*       RFY                                                        0719
*        (R3,                                                      0719
*         R4) RSTD;                 /* OBTSOR PATH SETS            0719
*                                      R0,R1,R3,R4,R14,R15           */
@RC00716 DS    0H                                                  0720
*       CALL OBTSTOR;               /* GETMAIN STORAGE TO COPY RCD   */
         BAL   @14,OBTSTOR                                         0720
*       RFY                                                        0721
*        (R3,                                                      0721
*         R4) UNRSTD;                                              0721
*       IF IRSTRECD='0'B THEN       /* IF LOGREC LENGTH              */
         TM    IRSTRECD,B'01000000'                                0722
         BNZ   @RF00722                                            0722
*         DO;                                                      0723
*           R0=IRSTRDLN+LENGTH(LRB);/* ADD LEN OF HEADER             */
         LA    R0,24                                               0724
         AH    R0,IRSTRDLN                                         0724
*           LRBHREL=0;              /* FIX LRB HDR AS RECORD MACRO 0725
*                                      WILL NOT FORMAT               */
         LA    @03,IRSTMESG                                        0725
         MVI   LRBHREL(@03),X'00'                                  0725
*           LRBMSYST='1'B;          /* INDICATE SYSTEM TERMINATED    */
         OI    LRBMSYST(@03),B'00100000'                           0726
*           LOGDATAA=0;             /* DATA IN PROPER POS IN RCD     */
         SLR   @05,@05                                             0727
         ST    @05,LOGDATAA(,@03)                                  0727
*         END;                                                     0728
*       ELSE                                                       0729
*         R0=IRSTRDLN;              /* WTO LEN IS COMPLETE LENGTH    */
         B     @RC00722                                            0729
@RF00722 LH    R0,IRSTRDLN                                         0729
*       IRSTOBPN->GETMBUFF(1:R0)=IRSTMESG(1:R0);/* COPY RECORD       */
@RC00722 LR    @03,R0                                              0730
         BCTR  @03,0                                               0730
         EX    @03,@SM03316                                        0730
*       R1=IRSTOBPN;                /* ADDR OF NEW MESSAGE BUFFER    */
*                                                                  0731
         LR    R1,IRSTOBPN                                         0731
*       /*************************************************************/
*       /*                                                           */
*       /* RECORD FROM NEW BUFFER                                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0732
*       IF IRSTRECD='0'B THEN       /* IF RECORDING WAIT STATE       */
         TM    IRSTRECD,B'01000000'                                0732
         BNZ   @RF00732                                            0732
*         DO;                       /* RECORD MACRO TYPE IS LOGREC   */
*           GEN REFS(R0,R1) SETS(R14,R15);                         0734
         RECORD    TYPE=LOGREC,RCVRY=SETFRR,DATAADR=(1),LENGTH=(0),    X
               BUFFER=NO
*         END;                      /* END RECORD TYPE IS LOGREC     */
*       ELSE                        /* RECORDING MESSAGE             */
*         DO;                       /* RECORD MACRO TYPE IS WTO      */
         B     @RC00732                                            0736
@RF00732 DS    0H                                                  0737
*           GEN REFS(R0,R1) SETS(R14,R15);                         0737
         RECORD    TYPE=WTO,RCVRY=SETFRR,DATAADR=(1),LENGTH=(0),       X
               BUFFER=NO
*         END;                      /* END RECORD TYPE IS WTO        */
*     END;                          /* END RC=8×12 FROM RECORD       */
*   ELSE                                                           0740
*     ;                                                            0740
@RF00714 DS    0H                                                  0741
*   R14=IRSTRERT;                   /* RETURN ADDRESS                */
@RC00714 LR    R14,IRSTRERT                                        0741
*   RFY                                                            0742
*    (R0,                                                          0742
*     R1,                                                          0742
*     R14,                                                         0742
*     R15,                                                         0742
*     R13) UNRSTD;                                                 0742
*   END RECORD;                                                    0743
@EL00006 DS    0H                                                  0743
@EF00006 DS    0H                                                  0743
@ER00006 BR    @14                                                 0743
*FINDUCB:                                                          0744
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* LOCATE UCB                    */
*                                                                  0744
FINDUCB  DS    0H                                                  0745
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SEGMENT LOCATES THE UCBS FOR EACH DEVICE ON A CHANNEL. A */
*   /* DO LOOP IS SETUP FOR EVERY POSSIBLE DEVICE ADDRESS, X00 THRU  */
*   /* XFF WHERE X IS THE CHANNEL ADDRESS. EACH POSSIBLE ADDRESS IS  */
*   /* INPUTED TO THE UCBLOOK FUNCTION OF IOSGEN. ON RETURN FROM     */
*   /* IOSGEN, A ZERO RETURN CODE INDICATES THE DEVICE EXISTS. UCBPTR*/
*   /* WILL CONTAIN THE UCB ADDRESS. THE UCBLOCK WILL BE OBTAINED AND*/
*   /* THE CALLER RETURNED TO. AFTER ALL POSSIBLE DEVICE ADDRESSES   */
*   /* HAVE BEEN EXAMINED, THE CALLER IS RETURNED TO WITH A ZERO     */
*   /* UCBPTR. INPUT: IRSTCHAN CONTAINS THE CHANNEL ADDRESS. R14     */
*   /* CONTAINS THE RETURN ADDRESS. OUTPUT: UCBPTR CONTAINS A UCB    */
*   /* ADDRESS OR ZERO. IRSTUCBL CONTAINS ADDRESS OF UCBLOCK. FRRSUCB*/
*   /* INDICATES LOCK HELD. CALLERS: RESVSCAN, RESTARIO              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0745
*   RFY                                                            0745
*    (R14,                                                         0745
*     UCBPTR,                                                      0745
*     R13,                                                         0745
*     R15,                                                         0745
*     R11,                                                         0745
*     R0,                                                          0745
*     R1) RSTD;                                                    0745
*   IRSTFIRT=R14;                   /* SAVE RETURN ADDRESS           */
         ST    R14,IRSTFIRT                                        0746
*   IRSTDOCH=IRSTCHAN;              /* CHANNEL ADDRESS               */
         MVC   IRSTDOCH(1),IRSTCHAN                                0747
*   IRSTDODE=0;                     /* FIRST POSSIBLE DEVICE ADDR    */
         MVI   IRSTDODE,X'00'                                      0748
*   IRSTLACH=IRSTCHAN;              /* END OF DO LOOP                */
         MVC   IRSTLACH(1),IRSTCHAN                                0749
*   IRSTLADE='FF'X;                 /* LAST DEVICE ON CHANNEL        */
         MVI   IRSTLADE,X'FF'                                      0750
*   DO IRSTDOLP=IRSTDOLP TO IRSTLAST;/* SCAN ALL POSSIBLE DEV ADDR   */
         LH    @05,IRSTDOLP                                        0751
         B     @DE00751                                            0751
@DL00751 DS    0H                                                  0752
*     R13=WSACRSTI;                 /* SAVE AREA FOR IOSGEN          */
         L     @04,LCCAPTR                                         0752
         L     @04,LCCACPUS(,@04)                                  0752
         L     R13,WSACRSTI(,@04)                                  0752
*     R11=IRSTDOLP;                 /* DEVICE ADDRESS                */
         LR    R11,@05                                             0753
*     GEN REFS(CVTILK1,CVTILK2,CVTIXAVL,CVTMAP,IOCOMEX,CVTPTR,IOCOM,IOX
*         ,IOCUCBBM,IOXHICH) SETS(R15,UCBPTR)                      0754
*         (IOSGEN UCBLOOK,UCB=(UCBPTR),REG=(R11));/* LOCATE UCB      */
         IOSGEN UCBLOOK,UCB=(UCBPTR),REG=(R11)
*     IF R15=0 THEN                 /* IF UCB FOUND, DEV ADDR VALID  */
         LTR   R15,R15                                             0755
         BNZ   @RF00755                                            0755
*       DO;                         /* PROCESS DEVICE                */
*         IF UCBMTPXP='1'B THEN     /* IF MULTI-EXPOSURE DEVICE      */
         TM    UCBMTPXP(UCBPTR),B'00001000'                        0757
         BNO   @RF00757                                            0757
*           R11=ADDR(UCBBASE->UCBLOCK);/* LOCK ON BASE UCB           */
         L     R11,UCBBASE(,UCBPTR)                                0758
         LA    R11,UCBLOCK(,R11)                                   0758
*         ELSE                                                     0759
*           R11=ADDR(UCBLOCK);      /* ADDR OF UCB LOCK WORD         */
         B     @RC00757                                            0759
@RF00757 LR    R11,UCBPTR                                          0759
         AL    R11,@CF03300                                        0759
*         IRSTUCBL=R11;             /* SAVE ADDR OF LOCK TO FREE     */
@RC00757 ST    R11,IRSTUCBL                                        0760
*         GEN SETS(R14,R15,R0,R1) REFS(R11,R12,R13);               0761
*                                                   /*OBTAIN UCBLOCK */
GETUCB1  SETLOCK   OBTAIN,TYPE=IOSUCB,ADDR=(11),MODE=UNCOND,DISABLED,  X
               REGS=USE,RELATED=(FREUCB1,FREUCB2,'GETUCB LOCK')
*         FRRSUCB='1'B;             /* INDICATE UCB LOCK HELD        */
         OI    FRRSUCB(FRRWPTR),B'01000000'                        0762
*         RFY                                                      0763
*          (R3,                                                    0763
*           R4,                                                    0763
*           R5) RSTD;               /* FICALLER PATH SETS R0,R1,R3 0763
*                                      R4,R5,R11,R13,R14,R15         */
*         CALL FICALLER;            /* CALL CALLER, UCBPTR CONTAINS
*                                      ADDR OF UCB                   */
         L     @15,IRSTCALL                                        0764
         BALR  @14,@15                                             0764
*         RFY                                                      0765
*          (R3,                                                    0765
*           R4,                                                    0765
*           R5) UNRSTD;                                            0765
*         IF FRRSUCB='1'B THEN      /* IF CALLER DID NOT FREE UCBLK  */
         TM    FRRSUCB(FRRWPTR),B'01000000'                        0766
         BNO   @RF00766                                            0766
*           DO;                     /* FREE IT NOW                   */
*             R11=IRSTUCBL;         /* ADDR OF UCB LOCK WORD         */
         L     R11,IRSTUCBL                                        0768
*             GEN SETS(R14,R15,R0,R1) REFS(R11,R12,R13);           0769
FREUCB1  SETLOCK   RELEASE,TYPE=IOSUCB,ADDR=(11),DISABLED,REGS=USE,    X
               RELATED=(GETUCB1,'FREE UCB LOCK')
*             FRRSUCB='0'B;         /* IND UCB LOCK NOT HELD         */
         NI    FRRSUCB(FRRWPTR),B'10111111'                        0770
*           END;                    /* END FREE UCB LOCK             */
*         ELSE                                                     0772
*           ;                       /* UCBLOCK FREED BY CALLER       */
@RF00766 DS    0H                                                  0773
*       END;                        /* END PROCESS DEVICE            */
*     ELSE                                                         0774
*       ;                                                          0774
@RF00755 DS    0H                                                  0775
*   END;                            /* END DO LOOP, ALL DEV FOUND    */
         LA    @05,1                                               0775
         AH    @05,IRSTDOLP                                        0775
         STH   @05,IRSTDOLP                                        0775
@DE00751 CH    @05,IRSTLAST                                        0775
         BNH   @DL00751                                            0775
*   UCBPTR=0;                       /* IND TO CALLER, RETURN         */
         SLR   UCBPTR,UCBPTR                                       0776
*   R14=IRSTFIRT;                   /* RETURN ADDRESS                */
         L     R14,IRSTFIRT                                        0777
*   RFY                                                            0778
*    (R14,                                                         0778
*     UCBPTR,                                                      0778
*     R13,                                                         0778
*     R15,                                                         0778
*     R11,                                                         0778
*     R0,                                                          0778
*     R1) UNRSTD;                                                  0778
*   END FINDUCB;                                                   0779
@EL00007 DS    0H                                                  0779
@EF00007 DS    0H                                                  0779
@ER00007 BR    @14                                                 0779
*RESVSIO:                                                          0780
*   PROC OPTIONS(NOSAVE,NOSAVEAREA,PARMREG);/* DO RESERVE SIOS       */
*                                                                  0780
RESVSIO  DS    0H                                                  0781
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE DOES THE ACTUAL I/O REQUIRED TO RESERVE DEVICES. */
*   /* INPUT TO THIS ROUTINE IS A DEVICE ADDRESS TO BE USED FOR THE  */
*   /* SIO INSTRUCTION. THIS IS PASSED IN REGISTER 1. IF THE RESERVE */
*   /* IS SUCCESSFUL A RESERVE COMPLETE INDICATOR IS SET IN THE      */
*   /* RESERVE TABLE AND THE UCB IS MARKED AS RESERVED. IF THE       */
*   /* RESERVE IS NOT SUCCESSFUL THE RESERVE COMPLETE INDICATOR IS   */
*   /* NOT TURNED ON.                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0781
*   RFY                                                            0781
*    (R1) RSTD;                                                    0781
*   RFY                                                            0782
*    (R2,                                                          0782
*     R7) RSTD;                     /* RESTRICT REGS FOR COUNTERS    */
*   RFY                                                            0783
*    (R14) RSTD;                                                   0783
*   IRSTR14=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,IRSTR14                                         0784
*   RFY                                                            0785
*    (R14) UNRSTD;                                                 0785
*   IF IRSTUNCR='1'B THEN           /* IF UNCONDITIONAL RESERVE GET  */
         TM    IRSTUNCR,B'00010000'                                0786
         BNO   @RF00786                                            0786
*     GEN REFS(URESVCCW)( LRA 7,URESVCCW);/* REAL ADDRESS OF UR CCW  */
          LRA 7,URESVCCW
*   ELSE                                                           0788
*     GEN REFS(RESVCCW)( LRA 7,RESVCCW);/* GET REAL ADDR OF RESV CCW */
         B     @RC00786                                            0788
@RF00786 DS    0H                                                  0788
          LRA 7,RESVCCW
*   CALL IGFPSAD0;                  /* ALLOW MODIFICATION OF FLC     */
@RC00786 L     @15,@CV02941                                        0789
         BALR  @14,@15                                             0789
*   FLCCAW=R7;                      /* INITIALIZE CAW WITH CCW ADDR  */
         ST    R7,FLCCAW                                           0790
*   CALL IGFPSAE0;                  /* PREVENT MODIFICATION OF FLC   */
         L     @15,@CV02942                                        0791
         BALR  @14,@15                                             0791
*   RFY                                                            0792
*    (R7) UNRSTD;                                                  0792
*   RESVSNS(R2)='0'B;               /* RESET SENSE REQUIRED INDICATOR*/
         L     @11,IRSTRPTR                                        0793
         LR    @07,R2                                              0793
         SLA   @07,4                                               0793
         ALR   @07,@11                                             0793
         AL    @07,@CF03305                                        0793
         NI    RESVSNS-10(@07),B'10111111'                         0793
*   IRSTSIOC=0;                     /* SET SIO COUNTER TO ZERO       */
         SLR   IRSTSIOC,IRSTSIOC                                   0794
*   IRSTTIOC=0;                     /* SET TIO COUNTER TO ZERO       */
         SLR   IRSTTIOC,IRSTTIOC                                   0795
*   RESVXIO(R2)='1'B;               /* INDICATE SIO ISSUED           */
         LR    @07,R2                                              0796
         SLA   @07,4                                               0796
         ALR   @11,@07                                             0796
         AL    @11,@CF03305                                        0796
         OI    RESVXIO-10(@11),B'00100000'                         0796
*DOSIO:                                                            0797
*   IRSTSIOC=IRSTSIOC+1;            /* INCREMENT SIO COUNTER         */
DOSIO    AL    IRSTSIOC,@CF00103                                   0797
*   IF IRSTSIOC=SIOMAX THEN                                        0798
         C     IRSTSIOC,@CF02984                                   0798
         BE    @RT00798                                            0798
*     GO TO EXIT;                   /* IF COUNT=MAXIMUM-EXIT, RESERVE
*                                      FAILED                        */
*   SIO(R1);                        /* ISSUE SIO FOR RESERVE         */
         SIO   0(R1)                                               0800
*   BC(4,CC1);                      /* CC=1, CHECK STATUS            */
         BC    4,CC1                                               0801
*   BC(2,BUSY);                     /* CC=2, ENABLE AND RETRY        */
         BC    2,BUSY                                              0802
*   BC(1,EXIT);                     /* CC=3, EXIT-RESERVE FAILED     */
         BC    1,EXIT                                              0803
*/*FALL THROUGH TO TIO LOOP ON SIO CC=0                              */
*                                                                  0804
*DOTIO:                             /* TIO IS USED TO BRING IN     0804
*                                      INTERRUPT FROM SIO WITHOUT  0804
*                                      ENABLING                      */
*   RESVXIO(R2)='0'B;               /* RESET SIO BIT TO INDICATE TIO
*                                      ISSUED                        */
DOTIO    LR    @11,R2                                              0804
         SLA   @11,4                                               0804
         L     @07,IRSTRPTR                                        0804
         ALR   @07,@11                                             0804
         AL    @07,@CF03305                                        0804
         NI    RESVXIO-10(@07),B'11011111'                         0804
*   IRSTTIOC=IRSTTIOC+1;            /* INCREMENT TIO COUNT           */
         AL    IRSTTIOC,@CF00103                                   0805
*   IF IRSTTIOC=TIOMAX THEN                                        0806
         C     IRSTTIOC,@CF02984                                   0806
         BE    @RT00806                                            0806
*     GO TO EXIT;                   /* IF TIO COUNT=MAXIMUM, RESERVE
*                                      FAILED                        */
*   TIO(R1);                        /* ISSUE TIO TO BRING IN       0808
*                                      INTERRUPT                     */
         TIO   0(R1)                                               0808
*   BC(9,EXIT);                     /* CC=3, CC=0, ERROR-EXIT, RESV
*                                      FAILED                        */
         BC    9,EXIT                                              0809
*   BC(4,CC1);                      /* CC=1, CHECK STATUS            */
         BC    4,CC1                                               0810
*   GO TO DOTIO;                    /* CC=2, LOOP ON TIO TILL COUNT
*                                      EXPIRES                       */
         B     DOTIO                                               0811
*CC1:                               /* CHECK CSW STATUS ON CC=1 FROM
*                                                             SIO,TIO*/
*   IF CDC='1'B×CCC='1'B×ICC='1'B THEN                             0812
CC1      TM    CDC,B'00001110'                                     0812
         BNZ   @RT00812                                            0812
*     ;                             /* CHANNEL ERRORS-RESV FAILED    */
*   ELSE                                                           0814
*     IF UC='1'B THEN                                              0814
         TM    UC,B'00000010'                                      0814
         BNO   @RF00814                                            0814
*       RESVSNS(R2)='1'B;           /* UC-RESVERVE FAILED-SENSE    0815
*                                      NEEDED                        */
         LR    @12,R2                                              0815
         SLA   @12,4                                               0815
         L     @11,IRSTRPTR                                        0815
         ALR   @11,@12                                             0815
         AL    @11,@CF03305                                        0815
         OI    RESVSNS-10(@11),B'01000000'                         0815
*     ELSE                                                         0816
*       IF RESVXIO(R2)='0'B&DE='1'B /* DE ON TIO-RESERVE SUCCESSFUL  */
*         THEN                                                     0816
         B     @RC00814                                            0816
@RF00814 L     @11,IRSTRPTR                                        0816
         LR    @07,R2                                              0816
         SLA   @07,4                                               0816
         ALR   @07,@11                                             0816
         AL    @07,@CF03305                                        0816
         TM    RESVXIO-10(@07),B'00100000'                         0816
         BNZ   @RF00816                                            0816
         TM    DE,B'00000100'                                      0816
         BNO   @RF00816                                            0816
*         RESVCOMP(R2)='1'B;        /* SET DEVICE RESERVED INDICATOR */
         LR    @12,R2                                              0817
         SLA   @12,4                                               0817
         ALR   @11,@12                                             0817
         AL    @11,@CF03305                                        0817
         OI    RESVCOMP-10(@11),B'10000000'                        0817
*       ELSE                                                       0818
*         IF RESVXIO(R2)='0'B       /* CC1 OCCURRED ON TIO           */
*           THEN                                                   0818
         B     @RC00816                                            0818
@RF00816 L     @11,IRSTRPTR                                        0818
         LR    @07,R2                                              0818
         SLA   @07,4                                               0818
         ALR   @07,@11                                             0818
         AL    @07,@CF03305                                        0818
         TM    RESVXIO-10(@07),B'00100000'                         0818
         BZ    @RT00818                                            0818
*           GO TO DOTIO;            /* RETRY TIO                     */
*         ELSE                                                     0820
*           IF BSY='1'B&DE='1'B THEN                               0820
         TM    BSY,B'00010100'                                     0820
         BNO   @RF00820                                            0820
*             DO;                   /* BUSY, DE ON SIO               */
*               RFY                                                0822
*                (UCBPTR) RSTD;                                    0822
*               UCBPTR=RESVUCBA(R2);/* GET UCB ADDRESSABILITY        */
         LR    @15,R2                                              0823
         SLA   @15,4                                               0823
         AL    @11,@CF03301                                        0823
         L     UCBPTR,RESVUCBA-12(@15,@11)                         0823
*               UCBUDE='1'B;        /* SET UNSOLICITED DE ON TO FORCE
*                                      DAVV                          */
         OI    UCBUDE(UCBPTR),B'00100000'                          0824
*               UCBSAP='0'B;        /* TURN OF STAND ALONE PROCESS 0825
*                                      INDICATOR                     */
         NI    UCBSAP(UCBPTR),B'11111011'                          0825
*               RFY                                                0826
*                (UCBPTR) UNRSTD;                                  0826
*               GO TO DOSIO;        /* RETRY SIO                     */
         B     DOSIO                                               0827
*             END;                                                 0828
*           ELSE                                                   0829
*             IF BSY='1'B&STATM='1'B&CUE='1'B THEN                 0829
@RF00820 TM    BSY,B'01110000'                                     0829
         BO    @RT00829                                            0829
*               GO TO DOSIO;        /* SHORT BUSY-RETRY SIO          */
*             ELSE                                                 0831
*               IF BSY='1'B         /* DEVICE BUSY?                  */
*                 THEN                                             0831
         TM    BSY,B'00010000'                                     0831
         BO    @RT00831                                            0831
*                 GO TO BUSY;       /* ENABLE AND RETRY              */
*               ELSE                                               0833
*                 IF CE='1'B&DE='1'B/* CE,DE ON-RESERVE GOOD         */
*                   THEN                                           0833
         TM    CE,B'00001100'                                      0833
         BNO   @RF00833                                            0833
*                   RESVCOMP(R2)='1'B;/* INDICATE RESERVE DONE       */
         LR    @12,R2                                              0834
         SLA   @12,4                                               0834
         L     @11,IRSTRPTR                                        0834
         ALR   @11,@12                                             0834
         AL    @11,@CF03305                                        0834
         OI    RESVCOMP-10(@11),B'10000000'                        0834
*                 ELSE                                             0835
*                   IF CE='1'B      /* CE, W/O DE?                   */
*                     THEN                                         0835
         B     @RC00833                                            0835
@RF00833 TM    CE,B'00001000'                                      0835
         BO    @RT00835                                            0835
*                     GO TO DOTIO;  /* DO TIO TO GET DE INTERRUPT    */
*EXIT:                              /* IF CC1 FALLS THRU-INVALID   0837
*                                      STATUS-RESERVE FAILED         */
*   IF RESVSNS(R2)='1'B THEN        /* SENSE REQUIRED                */
@RC00833 DS    0H                                                  0837
@RC00816 DS    0H                                                  0837
@RC00814 DS    0H                                                  0837
@RT00812 DS    0H                                                  0837
EXIT     LR    @12,R2                                              0837
         SLA   @12,4                                               0837
         L     @11,IRSTRPTR                                        0837
         ALR   @11,@12                                             0837
         AL    @11,@CF03305                                        0837
         TM    RESVSNS-10(@11),B'01000000'                         0837
         BNO   @RF00837                                            0837
*     DO;                           /* ISSUE SENSE                   */
*       RFY                                                        0839
*        (R7) RSTD;                                                0839
*       GEN REFS(SNSCCW) SETS(R7)( LRA R7,SNSCCW);/* GET REAL ADDR OF
*                                      SENSE CCW                     */
          LRA R7,SNSCCW
*       CALL IGFPSAD0;              /* ALLOW MODIFICATION OF FLC     */
         L     @15,@CV02941                                        0841
         BALR  @14,@15                                             0841
*       FLCCAW=R7;                  /* PUT CCW ADDR IN CAW,KEY=0     */
         ST    R7,FLCCAW                                           0842
*       CALL IGFPSAE0;              /* PREVENT MODIFICATION OF FLC   */
         L     @15,@CV02942                                        0843
         BALR  @14,@15                                             0843
*       RFY                                                        0844
*        (R7) UNRSTD;                                              0844
*       SIO(R1);                    /* ISSUE SENSE                   */
         SIO   0(R1)                                               0845
*     END;                                                         0846
*   IF RESVCOMP(R2)='1'B THEN       /* RESERVE SUCCESSFUL ?          */
@RF00837 L     @12,IRSTRPTR                                        0847
         LR    @11,R2                                              0847
         SLA   @11,4                                               0847
         ALR   @11,@12                                             0847
         AL    @11,@CF03305                                        0847
         TM    RESVCOMP-10(@11),B'10000000'                        0847
         BNO   @RF00847                                            0847
*     DO;                           /* INDICATE RESERVE IN UCB       */
*       RFY                                                        0849
*        (UCBPTR) RSTD;                                            0849
*       UCBPTR=RESVUCBA(R2);        /* GET UCB ADDRESS               */
         LR    @11,R2                                              0850
         SLA   @11,4                                               0850
         AL    @12,@CF03301                                        0850
         L     UCBPTR,RESVUCBA-12(@11,@12)                         0850
*       UCBRESVH='1'B;              /* TURN ON RESERVED INDICATOR    */
         OI    UCBRESVH(UCBPTR),B'00010000'                        0851
*       UCBCPU=CURRCPU(2:2);        /* INDICATE CPU RESERVED TO      */
         MVC   UCBCPU(1,UCBPTR),CURRCPU+1                          0852
*       UCBCHAN=R1;                 /* INDICATE ADDR RESERVED ON     */
         STH   R1,UCBCHAN(,UCBPTR)                                 0853
*       RFY                                                        0854
*        (UCBPTR) UNRSTD;                                          0854
*     END;                                                         0855
*   RFY                                                            0856
*    (R14) RSTD;                                                   0856
@RF00847 DS    0H                                                  0857
*   R14=IRSTR14;                    /* RESTORE RETURN ADDRESS        */
         L     R14,IRSTR14                                         0857
*   RETURN;                         /* RETURN TO CALLER              */
@EL00008 DS    0H                                                  0858
@EF00008 DS    0H                                                  0858
@ER00008 BR    @14                                                 0858
*   RFY                                                            0859
*    (R14) UNRSTD;                                                 0859
*                                                                  0859
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION OF CODE RECEIVES CONTROL IF A BUSY (CC=2 OR CC=1 */
*   /* AND DEVICE BUSY) IS ENCOUNTERED ON THE RESERVE SIO. IT WILL   */
*   /* ENABLE THE SYSTEM FOR INTERRUPTS FROM THE CHANNEL IN USE IN   */
*   /* ORDER TO CLEAR THE INTERRUPT SO THAT THE SIO CAN BE REISSUED. */
*   /* IT TAKES OVER THE I/O NEW PSW AND SELECTIVELY ENABLES THE     */
*   /* CHANNEL BY MODIFYING CONTROL REGISTER 2. WHEN THE INTERRUPT   */
*   /* OCCURS IT IS PASSED TO THE I/O SLIH. CONTROL REGISTER 2 AND   */
*   /* THE I/O NEW PSW ARE RESTORED AND THE SIO IS RETRIED. IF NO    */
*   /* INTERRUPT OCCURS THE RESERVE IS NOT RE-ATTEMPTED.             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0860
*BUSY:                                                             0860
*   IRSTIPSW=FLCINPSW(5:8);         /* SAVE THE IO NEW PSW           */
BUSY     MVC   IRSTIPSW(4),FLCINPSW+4                              0860
*   CALL IGFPSAD0;                  /* ALLOW MODIFICATION OF FLC     */
         L     @15,@CV02941                                        0861
         BALR  @14,@15                                             0861
*   FLCINPSW(5:8)=ADDR(INTERUPT);   /* U/D IO NEW PSW INSTRUCTION  0862
*                                      ADDRESS                       */
         LA    @11,INTERUPT                                        0862
         ST    @11,FLCINPSW+4                                      0862
*   CALL IGFPSAE0;                  /* PREVENT MODIFICATION OF FLC   */
         L     @15,@CV02942                                        0863
         BALR  @14,@15                                             0863
*   FRRIOPSW='1'B;                  /* INDICATE FOR FRR PSW IS     0864
*                                      MODIFIED                      */
         OI    FRRIOPSW(FRRWPTR),B'00000001'                       0864
*   GEN REFS(IRSTCTLR);                                            0865
*                            /*SAVE CONTROL REGISTER 2               */
          STCTL 2,2,IRSTCTLR
*   RFY                                                            0866
*    (R13,                                                         0866
*     R11) RSTD;                    /* RESTRICT REGS TO ENABLE     0866
*                                      CHANNEL                       */
*   R13=R1/256;                     /* GET CHANNEL IN LOW ORDER BYTE
*                                      OF REG                        */
         LR    R13,R1                                              0867
         SRL   R13,8                                               0867
*   R11=HIGHORDR;                   /* TURN ON HIGH ORDER BIT IN REG */
         L     R11,@CF02987                                        0868
*   SRL(R11,R13);                   /* SET CORRECT BYTE TO ENABLE  0869
*                                      RIGHT CHAN                    */
         SRL   R11,0(R13)                                          0869
*   IRSTCTLT=R11;                   /* PUT NEW CTL REG2 VALUE IN   0870
*                                      WORKAREA                      */
         ST    R11,IRSTCTLT                                        0870
*   RFY                                                            0871
*    (R13,                                                         0871
*     R11) UNRSTD;                                                 0871
*   GEN REFS(IRSTCTLT);                                            0872
*                            /*UPDATE CTL REG 2 TO ENABLE 1 CHAN ONLY*/
         LCTL  2,2,IRSTCTLT
*   FRRCTLR2='1'B;                  /* INDICATE FOR FRR CTL REG    0873
*                                      MODIFIED                      */
         OI    FRRCTLR2(FRRWPTR),B'10000000'                       0873
*   DO IRSTM=1 TO ENBLMAX;          /* ENABLE TILL COUNT EXPIRES     */
         LA    IRSTM,1                                             0874
@DL00874 DS    0H                                                  0875
*     GEN REFS(IRSTSYSM);                                          0875
*                            /*ENABLE FOR INTERRUPT                  */
         STOSM IRSTSYSM,X'02'
*   END;                                                           0876
         AL    IRSTM,@CF00103                                      0876
         C     IRSTM,@CF02982                                      0876
         BNH   @DL00874                                            0876
*   GEN REFS(IRSTSYSM);                                            0877
*                              /*INTERRUPT DID NOT OCCUR-DISABLE     */
         STNSM IRSTSYSM,X'FD'
*INTERUPT:                                                         0878
*   GEN REFS(IRSTCTLR);                                            0878
INTERUPT DS    0H                                                  0878
*                              /*RESTORE CTL REG 2                   */
         LCTL  2,2,IRSTCTLR
*   FRRCTLR2='0'B;                  /* TURN OFF FRR INDICATOR        */
         NI    FRRCTLR2(FRRWPTR),B'01111111'                       0879
*   FLCINPSW(5:8)=IRSTIPSW;         /* RESTORE I/O NEW PSW           */
         MVC   FLCINPSW+4(4),IRSTIPSW                              0880
*   FRRIOPSW='0'B;                  /* TURN OFF FRR INDICATOR        */
         NI    FRRIOPSW(FRRWPTR),B'11111110'                       0881
*   IF IRSTM^=ENBLMAX THEN          /* ENTERED DUE TO INTERRUPT ?    */
         C     IRSTM,@CF02982                                      0882
         BE    @RF00882                                            0882
*     DO;                           /* HANDLE INTERRUPT              */
*       RFY                                                        0884
*        (R5,                                                      0884
*         R11,                                                     0884
*         R13,                                                     0884
*         R4) RSTD;                 /* RESTRICT REGS FOR CALL TO SLIH*/
*       R11='08'X;                  /* INDICATE IORESTART ENTERING 0885
*                                      SLIH                          */
         LA    R11,8                                               0885
*       R13=WSACRSTI;               /* GET SAVE AREA ADDRESS         */
         L     @07,LCCAPTR                                         0886
         L     @07,LCCACPUS(,@07)                                  0886
         L     R13,WSACRSTI(,@07)                                  0886
*       R5=ADDR(IECINT);            /* GET SLIH ADDRESS              */
         L     R5,@CV02934                                         0887
*       GEN(STM 0,15,0(13));        /* SAVE REGS                     */
         STM 0,15,0(13)
*       GEN( BAL 4,4(5));           /* BRANCH ENTER SLIH TO HANDLE 0889
*                                      INTERRUPT                     */
          BAL 4,4(5)
*       GEN(LM 0,15,0(13));         /* RESTORE REGS                  */
         LM 0,15,0(13)
*       RFY                                                        0891
*        (R5,                                                      0891
*         R11,                                                     0891
*         R13,                                                     0891
*         R4) UNRSTD;                                              0891
*       GO TO DOSIO;                /* TRY SIO AGAIN                 */
         B     DOSIO                                               0892
*     END;                                                         0893
*   ELSE                                                           0894
*     GO TO EXIT;                   /* NOT INTERRUPT - RESERVE FAILED*/
*   RFY                                                            0895
*    (R1) UNRSTD;                                                  0895
*   END RESVSIO;                                                   0896
*                                                                  0897
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE ISSUES THE MAP FUNCTION OF THE IOSGEN MACRO. ON  */
*   /* ENTRY R4 MUST CONTAIN A UCB ADDRESS AND R5 MUST CONTAIN THE   */
*   /* ADDRESS OF AN 8 BYTE WORK AREA WHERE IOSGEN WILL STORE THE    */
*   /* RESULTS OF THE PATH MAPPING. R13 WILL BE DESTROYED. IOSGEN    */
*   /* WILL RETURN DIRECTLY TO THE CALLER OF THIS ROUTINE.           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0897
*IOSGENPT:                                                         0897
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0897
IOSGENPT DS    0H                                                  0898
*   RFY                                                            0898
*    (R4,                                                          0898
*     R5,                                                          0898
*     R13,                                                         0898
*     R14) RSTD;                                                   0898
*   R13=WSACRSTI;                                                  0899
         L     @15,LCCAPTR                                         0899
         L     @15,LCCACPUS(,@15)                                  0899
         L     R13,WSACRSTI(,@15)                                  0899
*   GEN REFS(UCBCHA,UCBCHM,UCBFL5,UCBLCI,UCBUA,CVTILCH,CVTCSD,CVTPCCAT,
*       PCCACPUA,PCCACAFM,PCCACAT,CSDCPUAL,CATFLG,LCHTCH,CVTPTR,UCBOB,
*       UCBWGT,UCBBASE)( IOSGEN MAP,VAR=1);                        0900
          IOSGEN MAP,VAR=1
*   RFY                                                            0901
*    (R4,                                                          0901
*     R5,                                                          0901
*     R13,                                                         0901
*     R14) UNRSTD;                                                 0901
*   END IOSGENPT;                                                  0902
@EL00009 DS    0H                                                  0902
@EF00009 DS    0H                                                  0902
@ER00009 BR    @14                                                 0902
*LOADWAIT:                                                         0903
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* LOAD A WAIT STATE             */
*                                                                  0903
LOADWAIT DS    0H                                                  0904
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE WILL INTERFACE WITH THE STOP/RESTART ROUTINE     */
*   /* (IEESTPRS) TO LOAD A WAIT STATE. THE WAIT WILL BE RECORDED BY */
*   /* BUILDING A LOGREC RECORD AND CALLING THE RECORD PROCEDURE. THE*/
*   /* RESTART LOCK WILL BE OBTAINED AND IEESTPRS WILL BE CALLED. IF */
*   /* THE RESTART KEY IS PRESSED, THE CALLER OF THIS PROCEDURE WILL */
*   /* BE RETURNED TO. IF THE RESTART LOCK IS NOT OBTAINABLE OR      */
*   /* IEESTPRS CANNOT STOP THE SYSTEM, THIS PROCEDURE WILL ASSUME A */
*   /* UP SYSTEM AND STOP THIS PROCESSOR BY LOADING A WAIT PSW WITH  */
*   /* THE RESTART PSW SETUP TO A RESUME POINT IN THIS PROCEDURE.    */
*   /* CALLED BY OPERINF SEG, THE TOP SEG AND THE FRR. INPUT IS THE  */
*   /* WAIT STATE CODE IN IRSTWTCD.                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0904
*   RFY                                                            0904
*    (R14,                                                         0904
*     R0,                                                          0904
*     R1,                                                          0904
*     R13,                                                         0904
*     R15) RSTD;                                                   0904
*   IRSTLORT=R14;                   /* SAVE RETURN ADDRESS           */
         LR    IRSTLORT,R14                                        0905
*   IRSTMESG=IRSTMESG&&IRSTMESG;    /* CLEAR LOGREC BUFFER           */
         XC    IRSTMESG(128),IRSTMESG                              0906
*   IF IRSTWAIT='1'B THEN           /* IF WAIT RESTARTABLE           */
         TM    IRSTWAIT,B'10000000'                                0907
         BNO   @RF00907                                            0907
*     LRBHTYPE=LOGRSHDR;            /* SET RESTARTABLE HEADER        */
         LA    @12,IRSTMESG                                        0908
         MVI   LRBHTYPE(@12),X'84'                                 0908
*   ELSE                                                           0909
*     LRBHTYPE=LRBHTER;             /* SYSTEM TERMINATION HDR        */
         B     @RC00907                                            0909
@RF00907 LA    @12,IRSTMESG                                        0909
         MVI   LRBHTYPE(@12),X'81'                                 0909
*   LRBMSYST='1'B;                  /* IND SYSTEM TERMINATED         */
@RC00907 LA    @12,IRSTMESG                                        0910
         OI    LRBMSYST(@12),B'00100000'                           0910
*   LRBHSYS=LRBHSW1;                /* IN PROPER HEADER SPOT FOR   0911
*                                      RECORD MACRO                  */
         MVC   LRBHSYS(1,@12),LRBHSW1(@12)                         0911
*   LRBMSYST='0'B;                  /* ZERO OTHER HEADER BYTE      0912
*                                      POSITIONS                     */
         NI    LRBMSYST(@12),B'11011111'                           0912
*   LOGDATAA=ADDR(LRBTTER);         /* DATA PTR FOR RCD MACRO        */
         LA    @07,LRBTTER(,@12)                                   0913
         ST    @07,LOGDATAA(,@12)                                  0913
*   LRBTLNH=(LENGTH(LRBTTER)+LENGTH(LOGTUSR));/* LEN OF DATA IN    0914
*                                      RECORD                        */
         LA    @07,100                                             0914
         ST    @07,LRBTLNH(,@12)                                   0914
*   IRSTRDLN=(LENGTH(LRBTTER)+LENGTH(LOGTUSR));/* LEN FOR RECORD   0915
*                                      MACRO                         */
         STH   @07,IRSTRDLN                                        0915
*   LRBTWSC=IRSTWTCD;               /* WAIT STATE CODE IN RCD        */
         MVC   LRBTWSC(4,@12),IRSTWTCD                             0916
*   STM(R0,R15,LOGREGS);            /* REGS INTO USER FIELD          */
         STM   R0,R15,LOGREGS(@12)                                 0917
*   LOGFRRWK=FRRWORK;               /* FRR WK AREA INTO USER         */
         MVC   LOGFRRWK(24,@12),FRRWORK(FRRWPTR)                   0918
*   LOGCHMSK=IRSTCHMK;              /* LOST CHAN MASK, LOST=1        */
         MVC   LOGCHMSK(4,@12),IRSTCHMK                            0919
*   IRSTRECD='0'B;                  /* IND RECORD(LOGREC) OPTION FOR
*                                      RECORD MACRO                  */
         NI    IRSTRECD,B'10111111'                                0920
*   CALL RECORD;                    /* RECORD WAIT STATE             */
         BAL   @14,RECORD                                          0921
*   R14=0;                          /* COMPARSION FOR CS INSTR       */
         SLR   R14,R14                                             0922
*   IRSTCPUA=PSACPULA;              /* GET CPUID FOR RESTART WORD  0923
*                                                            @ZM47978*/
         MVC   IRSTCPUA(2),PSACPULA                                0923
*   IRSTREID=RESTRTID;              /* I/O RESTART ID = IS           */
         MVC   IRSTREID(2),@CC02960                                0924
*   R15=IRSTREST;                   /* LOCKED VALUE                  */
         L     R15,IRSTREST                                        0925
*   CS(R14,R15,CVTRSTWD);           /* OBTAIN RESTART LOCK           */
         L     @12,CVTPTR                                          0926
         CS    R14,@15,CVTRSTWD(@12)                               0926
*   BC(NOTZERO,LOADIT);             /* NOT OBTAINABLE-LOAD WT        */
         BC    7,LOADIT                                            0927
*   FRRRESTL='1'B;                  /* IND IECVIRST HAS LOCK         */
         OI    FRRRESTL(FRRWPTR),B'00000010'                       0928
*RELOADIT:                                                         0929
*   ;                               /* BRANCH HERE, RELOAD WT        */
RELOADIT DS    0H                                                  0930
*   R0=IRSTWTCD;                    /* WAIT STATE CODE               */
         L     R0,IRSTWTCD                                         0930
*   R1=0;                           /* NOT QUIESCE OPER CMD          */
         SLR   R1,R1                                               0931
*   R13=WSACRSTI;                   /* POINT TO SAVE AREA            */
         L     @07,LCCAPTR                                         0932
         L     @07,LCCACPUS(,@07)                                  0932
         L     R13,WSACRSTI(,@07)                                  0932
*   PSAWTCOD=ADDR(IRSTCHMK);        /* PARM FOR OPERATOR             */
         LA    @12,IRSTCHMK                                        0933
         ST    @12,PSAWTCOD                                        0933
*   PSAACTCD=0;                     /* INITIAL(DEFAULT) VALUE OF OPER
*                                      SUPPLIED ACT CD               */
         MVI   PSAACTCD,X'00'                                      0934
*   CALL IEESTPRS;                  /* STOP THE SYSTEM               */
*                                                                  0935
         L     @12,CVTPTR                                          0935
         L     @15,CVTSTPRS(,@12)                                  0935
         BALR  @14,@15                                             0935
*   /*****************************************************************/
*   /*                                                               */
*   /* REACH HERE IF OPERATOR HITS RESTART KEY OR IEESTPRS CANNOT    */
*   /* STOP THE SYSTEM                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0936
*   IF R15=0&                       /* IF OPER HIT RESTART BUT       */
*       IRSTWAIT='0'B THEN          /* NOT RESTARTABLE WAIT          */
         LTR   R15,R15                                             0936
         BNZ   @RF00936                                            0936
         TM    IRSTWAIT,B'10000000'                                0936
         BZ    @RT00936                                            0936
*     GO TO RELOADIT;               /* RELOAD WAIT STATE             */
*   ELSE                                                           0938
*     ;                                                            0938
@RF00936 DS    0H                                                  0939
*   IF R15^=0 THEN                  /* IF IEESTPRS CANNOT STOP SYS   */
         LTR   R15,R15                                             0939
         BZ    @RF00939                                            0939
*     DO;                           /* ASSUME UP, DO IT HERE         */
*LOADIT:                                                           0941
*       ;                           /* COULD NOT OBTAIN RESTART LOCK
*                                      STOP SYSTEM HERE              */
LOADIT   DS    0H                                                  0942
*       IRSTRPSW=FLCRNPSW;          /* SAVE SYS RESTART NEW PSW      */
         MVC   IRSTRPSW(8),FLCRNPSW                                0942
*RELDIT:                                                           0943
*       ;                           /* BRANCH HERE TO RELOAD WAIT    */
RELDIT   DS    0H                                                  0944
*       IRSTWSYS=HWAITPSW;          /* FIRST HALF OF WAIT PSW        */
         MVC   IRSTWSYS(4),@CB02969                                0944
*       PSAWTCOD=ADDR(IRSTCHMK);    /* PARM FOR OPERATOR             */
         LA    @12,IRSTCHMK                                        0945
         ST    @12,PSAWTCOD                                        0945
*       PSAACTCD=0;                 /* DEFAULT ACTION CODE           */
         MVI   PSAACTCD,X'00'                                      0946
*       FRRRSPSW='1'B;              /* IND RESTART PSW CHANGED       */
         OI    FRRRSPSW(FRRWPTR),B'00000100'                       0947
*       CALL IGFPSAD0;              /* ALLOW MODIFICATION OF FLC     */
         L     @15,@CV02941                                        0948
         BALR  @14,@15                                             0948
*       FLCRNPSW(1:4)=HRESTPSW;     /* FIRST HALF RESTART PSW        */
         MVC   FLCRNPSW(4),@CB02971                                0949
*       GEN(STOSM FLCRNPSW,X'00');  /* CONTINUE WITH CURR SYS MASK   */
         STOSM FLCRNPSW,X'00'
*       FLCRNPSW(5:8)=ADDR(RESTARTP);/* RESTART POINT ADDRESS        */
         LA    @12,RESTARTP                                        0951
         ST    @12,FLCRNPSW+4                                      0951
*       CALL IGFPSAE0;              /* PREVENT MODIFICATION OF FLC   */
         L     @15,@CV02942                                        0952
         BALR  @14,@15                                             0952
*       LPSW(IRSTWPSW);             /* LOAD WAIT STATE PSW           */
*                                                                  0953
         LPSW  IRSTWPSW                                            0953
*       /*************************************************************/
*       /*                                                           */
*       /* CONTROL REACHES HERE ONLY IF OPERATOR HITS THE RESTART KEY*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0954
*RESTARTP:                                                         0954
*       ;                                                          0954
RESTARTP DS    0H                                                  0955
*       IF IRSTWAIT='0'B THEN       /* IF NON RESTARTABLE WAIT       */
         TM    IRSTWAIT,B'10000000'                                0955
         BZ    @RT00955                                            0955
*         GO TO RELDIT;             /* GO RE LOAD WAIT STATE         */
*       ELSE                                                       0957
*         ;                                                        0957
*     END;                          /* END IECVIRST STOP SYSTEM      */
*   ELSE                                                           0959
*     ;                             /* IEESTPRS DID STOP SYSTEM      */
@RF00939 DS    0H                                                  0960
*   IF FRRINCOD=MACHCKIN THEN       /* IF OPER ACT CODE REQUIRED     */
         CLI   FRRINCOD(FRRWPTR),1                                 0960
         BNE   @RF00960                                            0960
*     IRSTOPAC=PSAACTCD;            /* SAVE FOR LATER PROCESSING     */
         MVC   IRSTOPAC(1),PSAACTCD                                0961
*   ELSE                                                           0962
*     ;                                                            0962
@RF00960 DS    0H                                                  0963
*   IF FRRRSPSW='1'B THEN           /* IF RESTART PSW CHANGED        */
         TM    FRRRSPSW(FRRWPTR),B'00000100'                       0963
         BNO   @RF00963                                            0963
*     DO;                                                          0964
*       CALL IGFPSAD0;              /* ALLOW MODIFICATION OF FLC     */
         L     @15,@CV02941                                        0965
         BALR  @14,@15                                             0965
*       FLCRNPSW=IRSTRPSW;          /* RESTORE RESTART PSW           */
         MVC   FLCRNPSW(8),IRSTRPSW                                0966
*       CALL IGFPSAE0;              /* PREVENT MODIFICATION OF FLC   */
         L     @15,@CV02942                                        0967
         BALR  @14,@15                                             0967
*       FRRRSPSW='0'B;              /* RESTART PSW NOT CHANGED       */
         NI    FRRRSPSW(FRRWPTR),B'11111011'                       0968
*     END;                                                         0969
*   ELSE                                                           0970
*     ;                                                            0970
@RF00963 DS    0H                                                  0971
*   IF FRRRESTL='1'B THEN           /* IF RESTART LOCK HELD          */
         TM    FRRRESTL(FRRWPTR),B'00000010'                       0971
         BNO   @RF00971                                            0971
*     DO;                                                          0972
*       CVTRSTWD=0;                 /* FREE RESTART RESOURCE         */
         L     @12,CVTPTR                                          0973
         SLR   @07,@07                                             0973
         ST    @07,CVTRSTWD(,@12)                                  0973
*       FRRRESTL='0'B;              /* IND RESTART LOCK NOT HELD     */
         NI    FRRRESTL(FRRWPTR),B'11111101'                       0974
*     END;                                                         0975
*   ELSE                                                           0976
*     ;                                                            0976
@RF00971 DS    0H                                                  0977
*   R14=IRSTLORT;                   /* RESTORE RETURN ADDRESS        */
         LR    R14,IRSTLORT                                        0977
*   RFY                                                            0978
*    (R14,                                                         0978
*     R0,                                                          0978
*     R1,                                                          0978
*     R13,                                                         0978
*     R15) UNRSTD;                                                 0978
*   END LOADWAIT;                                                  0979
@EL00010 DS    0H                                                  0979
@EF00010 DS    0H                                                  0979
@ER00010 BR    @14                                                 0979
*IRSTFRR:                                                          0980
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0980
*                                                                  0980
IRSTFRR  DS    0H                                                  0981
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SEGMENT IS THE FUNCTIONAL RECOVERY ROUTINE FOR IECVIRST. */
*   /* IT WILL RELEASE RESOURCES OBTAINED BY IECVIRST OR CAUSE THEN  */
*   /* TO BE RELEASED BY RTM. IF ANY RESERVES HAVE BEEN RESET AND NOT*/
*   /* RE-RESERVED THEN A NON RESTARTABLE WAIT STATE WILL BE LOADED. */
*   /* OTHERWISE, CONTROL WILL BE RETURNED TO RTM AND IT WILL        */
*   /* PERCOLATE.                                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0981
*   RFY                                                            0981
*    (SDWAPTR,                                                     0981
*     R11,                                                         0981
*     R14) RSTD;                                                   0981
*   FRRWPTR=SDWAPARM;               /* GET ADDRESSABILITY TO FRR   0982
*                                      PARMS                         */
         L     FRRWPTR,SDWAPARM(,SDWAPTR)                          0982
*   R9=FRRBASE1;                    /* ESTABLISH BASE REGISTER 1     */
         L     R9,FRRBASE1(,FRRWPTR)                               0983
*   R10=FRRBASE2;                   /* ESTABLISH BASE REGISTER 2     */
         L     R10,FRRBASE2(,FRRWPTR)                              0984
*   IRSTWPTR=FRRGWPTR;              /* GET ADDRESSABILITY TO GENERAL
*                                      WORK AREA                     */
         L     IRSTWPTR,FRRGWPTR(,FRRWPTR)                         0985
*   FRRSDWA=SDWAPTR;                /* ADDR OF SDWA IN FRRWORK IF  0986
*                                      WAIT STATE LOADED             */
         ST    SDWAPTR,FRRSDWA(,FRRWPTR)                           0986
*   R11=R14;                        /* SAVE R14 TO RETURN TO RTM     */
         LR    R11,R14                                             0987
*   RFY                                                            0988
*    (R14) UNRSTD;                                                 0988
*   SDWAMODN=MODNAME;                                              0989
         MVC   SDWAMODN(8,SDWAPTR),@CC02996                        0989
*   SDWACSCT=MODNAME;                                              0990
         MVC   SDWACSCT(8,SDWAPTR),@CC02996                        0990
*   SDWAREXN=FRRNAME;                                              0991
         MVC   SDWAREXN(8,SDWAPTR),@CC02998                        0991
*   SDWAURAL=LENGTH(RCDVRA);        /* LEN OF USER DATA              */
         MVI   SDWAURAL(SDWAPTR),X'1C'                             0992
*   SDWAHEX='1'B;                   /* DUMP USER DATA IN HEX         */
         OI    SDWAHEX(SDWAPTR),B'10000000'                        0993
*   RCDFRRW=FRRWORK;                /* RCD FRRWORK AREA              */
         MVC   RCDFRRW(24,SDWAPTR),FRRWORK(FRRWPTR)                0994
*   RCDCHMSK=RCDCHMSK&&RCDCHMSK;    /* CLEAR LOST CHAN MASK          */
         XC    RCDCHMSK(4,SDWAPTR),RCDCHMSK(SDWAPTR)               0995
*   SDWARCRD='1'B;                  /* RECORD ERROR                  */
         OI    SDWARCRD(SDWAPTR),B'10000000'                       0996
*   IF FRRSALOC='1'B THEN           /* IF SALLOC LOCK HELD           */
         TM    FRRSALOC(FRRWPTR),B'10000000'                       0997
         BNO   @RF00997                                            0997
*     SDWASALL='1'B;                /* INDICATE RTM SHOULD FREE IT   */
         OI    SDWASALL(SDWAPTR),B'00000100'                       0998
*   IF FRRSUCB='1'B THEN            /* IF UCB LOCK HELD              */
@RF00997 TM    FRRSUCB(FRRWPTR),B'01000000'                        0999
         BNO   @RF00999                                            0999
*     DO;                                                          1000
*       SDWAIUCB='1'B;              /* INDICATE RTM SHOULD FREE LOCK */
         OI    SDWAIUCB(SDWAPTR),B'10000000'                       1001
*       SDWAIULW=IRSTUCBL;          /* GIVE LOCK ADDRESS TO RTM      */
         MVC   SDWAIULW(4,SDWAPTR),IRSTUCBL                        1002
*     END;                                                         1003
*   IF FRRRESTL='1'B                /* IF RESTART LOCK IS HELD       */
*     THEN                                                         1004
@RF00999 TM    FRRRESTL(FRRWPTR),B'00000010'                       1004
         BNO   @RF01004                                            1004
*     CVTRSTWD=0;                   /* RELEASE RESTART LOCK          */
         L     @12,CVTPTR                                          1005
         SLR   @07,@07                                             1005
         ST    @07,CVTRSTWD(,@12)                                  1005
*   CALL IGFPSAD0;                  /* ALLOW MODIFICATION OF FLC     */
@RF01004 L     @15,@CV02941                                        1006
         BALR  @14,@15                                             1006
*   IF FRRIOPSW='1'B                /* IF I/O NEW PSW MODIFIED       */
*     THEN                                                         1007
         TM    FRRIOPSW(FRRWPTR),B'00000001'                       1007
         BNO   @RF01007                                            1007
*     FLCINPSW(5:8)=IRSTIPSW;       /* RESTORE I/O NEW PSW           */
         MVC   FLCINPSW+4(4),IRSTIPSW                              1008
*   IF FRRCTLR2='1'B THEN           /* RESTORE CONTROL REG2 IF     1009
*                                      MODIFIED                      */
@RF01007 TM    FRRCTLR2(FRRWPTR),B'10000000'                       1009
         BNO   @RF01009                                            1009
*     DO;                                                          1010
*       GEN REFS(IRSTCTLR)( LCTL 2,2,IRSTCTLR);                    1011
          LCTL 2,2,IRSTCTLR
*     END;                                                         1012
*   IF FRRRSPSW='1'B                /* IF RESTART PSW MODIFIED       */
*     THEN                                                         1013
@RF01009 TM    FRRRSPSW(FRRWPTR),B'00000100'                       1013
         BNO   @RF01013                                            1013
*     FLCRNPSW=IRSTRPSW;            /* RESTORE RESTART PSW           */
         MVC   FLCRNPSW(8),IRSTRPSW                                1014
*   FLCLCL='FFFFFFFF'X;             /* FOX OUT LIMITED CHANNEL LOGOUT*/
@RF01013 MVC   FLCLCL(4),@CB03216                                  1015
*   CALL IGFPSAE0;                  /* PREVENT MODIFICATION OF FLC   */
         L     @15,@CV02942                                        1016
         BALR  @14,@15                                             1016
*   PCCAELAD->LOGOUT='FFFFFFFF'X;   /* FOX OUT I/O EXTENDED LOGOUT   */
         L     @12,PCCAPTR                                         1017
         L     @12,PCCAELAD(,@12)                                  1017
         MVC   LOGOUT(4,@12),@CB03216                              1017
*   IF IRSTWPTR^=0 THEN             /* IF WORK AREA EXISTS           */
         LTR   IRSTWPTR,IRSTWPTR                                   1018
         BZ    @RF01018                                            1018
*     DO;                           /* LOAD WAIT/TAKE DUMP/FREEMAIN  */
*       RCDCHMSK=IRSTCHMK;          /* RECORD LOST CHAN MASK         */
         MVC   RCDCHMSK(4,SDWAPTR),IRSTCHMK                        1020
*       IF FRRRESVE='1'B×FRRCLRCH='0'B THEN/* IF RESERVES WERE FOUND
*                                      OR                            */
         TM    FRRRESVE(FRRWPTR),B'00010000'                       1021
         BO    @RT01021                                            1021
         TM    FRRCLRCH(FRRWPTR),B'01000000'                       1021
         BNZ   @RF01021                                            1021
@RT01021 DS    0H                                                  1022
*         DO;                       /* CLRCH HAS NOT RESET RESERVES-
*                                      WAIT STATE                    */
*           IRSTWTCD=CANTRESV;      /* SET WAIT STATE CODE TO 04E    */
         MVC   IRSTWTCD(4),@CF02952                                1023
*           IRSTWAIT='0'B;          /* INDICATE NON-RESTARTABLE WAIT */
         NI    IRSTWAIT,B'01111111'                                1024
*           FRRLDWT='1'B;           /* SET WAIT REQUIRED INDICATOR   */
         OI    FRRLDWT(FRRWPTR),B'00001000'                        1025
*         END;                                                     1026
*       PCCAIRST='0'B;              /* IND DONE RECOVERING CHANNELS  */
@RF01021 L     @12,PCCAPTR                                         1027
         NI    PCCAIRST(@12),B'01111111'                           1027
*       IF PCCAEXDM='1'B&           /* IF MORE CHANNELS LOST AND     */
*           FRRLDWT='0'B THEN       /* WAIT STATE NOT ALREADY SET    */
         TM    PCCAEXDM(@12),B'01000000'                           1028
         BNO   @RF01028                                            1028
         TM    FRRLDWT(FRRWPTR),B'00001000'                        1028
         BNZ   @RF01028                                            1028
*         DO;                                                      1029
*           IRSTWTCD=MORECHLT;      /* MORE CHANNELS LOST            */
         MVC   IRSTWTCD(4),@CF02944                                1030
*           IRSTWAIT='0'B;          /* WAIT STATE NOT RESTARTABLE    */
         NI    IRSTWAIT,B'01111111'                                1031
*           FRRLDWT='1'B;           /* SET WAIT REQUIRED INDICATOR   */
         OI    FRRLDWT(FRRWPTR),B'00001000'                        1032
*         END;                                                     1033
*       ELSE                                                       1034
*         ;                                                        1034
@RF01028 DS    0H                                                  1035
*       IF FRRLDWT='1'B THEN                                       1035
         TM    FRRLDWT(FRRWPTR),B'00001000'                        1035
         BNO   @RF01035                                            1035
*         CALL LOADWAIT;            /* LOAD NON-RESTARTABLE WAIT   1036
*                                      STATE                         */
         BAL   @14,LOADWAIT                                        1036
*       RFY                                                        1037
*        (R4,                                                      1037
*         R5) RSTD;                                                1037
@RF01035 DS    0H                                                  1038
*       R4=CVTSDBF&HIOFF;           /* GET DUMP BUFFER LOCKWORD      */
         L     @12,CVTPTR                                          1038
         L     R4,CVTSDBF(,@12)                                    1038
         N     R4,@CF02989                                         1038
*       R5=R4×HIGHORDR;             /* TURN ON LOCK BIT IN REGISTER  */
         LR    R5,R4                                               1039
         O     R5,@CF02987                                         1039
*       CS(R4,R5,CVTSDBF);          /* OBTAIN DUMP BUFFER LOCK IF  1040
*                                      AVAIL                         */
         CS    R4,@05,CVTSDBF(@12)                                 1040
*       BC(7,NODUMP);               /* SKIP DUMP IF NO BUFFER        */
         BC    7,NODUMP                                            1041
*       R4=ADDR(SDBDATA);           /* GET ADDR OF DATA AREA IN    1042
*                                      BUFFER                        */
         L     @12,CVTPTR                                          1042
         L     @12,CVTSDBF(,@12)                                   1042
         LA    R4,SDBDATA(,@12)                                    1042
*       SDBDATAD=IRSTWPTR;          /* PUT IT IN BUFFER HEADER FOR 1043
*                                      SDUMP                         */
         ST    IRSTWPTR,SDBDATAD(,@12)                             1043
*       RFY                                                        1044
*        (R7) RSTD;                                                1044
*       GEN;                                                       1045
*                                      /*GET LEN OF WK AREA FOR MVCL */
         L     R5,@SIZDATD               LEN OF AUTO DAT AREA
         LA    R5,0(R5)                  CLEAR HIGH ORDER BYTE
         LR    R7,R5                     LEN OF AUTO DATA AREA
*       MVCL(R4,IRSTWPTR);          /* COPY WORK AREA INTO DUMP    1046
*                                      BUFFER, MVCL UPDATES BUFFER 1046
*                                      PTR TO NEXT UNUSED SPOT       */
         MVCL  R4,IRSTWPTR                                         1046
*       IRSTWPTR=FRRGWPTR;          /* RESTORE WORK AREA POINTER - IT
*                                      WAS UPDATED BY MVCL           */
         L     IRSTWPTR,FRRGWPTR(,FRRWPTR)                         1047
*       RFY                                                        1048
*        (R5,                                                      1048
*         R7) UNRSTD;                                              1048
*       IRSTRPTR=ADDR(IRSTRESV);    /* GET RESERVE TABLE ADDRESS     */
         LA    @12,IRSTRESV                                        1049
         ST    @12,IRSTRPTR                                        1049
*       R4=((R4+7)/8)*8;            /* ROUND TO WORD BOUNDARY        */
         LA    @14,7                                               1050
         ALR   @14,R4                                              1050
         SRDA  @14,32                                              1050
         D     @14,@CF00101                                        1050
         SLA   @15,3                                               1050
         LR    R4,@15                                              1050
*       DO WHILE RESVNEXT^=0&       /* COPY RESVTBL SEGMENTS TO DUMP
*                                      BUFFER                        */
*             R4<((CVTSDBF&HIOFF)+'FFF'X-LENGTH(RESVTAB)-6);       1051
         B     @DE01051                                            1051
@DL01051 DS    0H                                                  1052
*         IRSTRPTR=RESVNEXT;        /* GET ADDR OF SEGMENT TO COPY   */
         L     @12,IRSTRPTR                                        1052
         L     @12,RESVNEXT(,@12)                                  1052
         ST    @12,IRSTRPTR                                        1052
*         R4->RESVTAB=RESVTAB;      /* COPY TO DUMP BUFFER           */
         MVC   RESVTAB(200,R4),RESVTAB(@12)                        1053
*         R4=R4+LENGTH(RESVTAB);    /* UPDATE BUFFER POINTER         */
         AH    R4,@CH03276                                         1054
*       END;                                                       1055
@DE01051 L     @12,IRSTRPTR                                        1055
         ICM   @07,15,RESVNEXT(@12)                                1055
         BZ    @DC01051                                            1055
         L     @12,CVTPTR                                          1055
         L     @12,CVTSDBF(,@12)                                   1055
         N     @12,@CF02989                                        1055
         SH    @12,@CH03282                                        1055
         CR    R4,@12                                              1055
         BL    @DL01051                                            1055
@DC01051 DS    0H                                                  1056
*       R4->SDBDATA(1:6)='00'X;     /* INDICATE END OF DATA          */
         XC    SDBDATA+1(5,R4),SDBDATA+1(R4)                       1056
         MVI   SDBDATA(R4),X'00'                                   1056
*       SDBDLN=R4-ADDR(SDBDATA);    /* PUT LENGTH IN BUFFER HEADER   */
         L     @12,CVTPTR                                          1057
         L     @12,CVTSDBF(,@12)                                   1057
         LA    @07,SDBDATA(,@12)                                   1057
         LCR   @07,@07                                             1057
         ALR   @07,R4                                              1057
         STH   @07,SDBDLN(,@12)                                    1057
*       SDBPAD=0;                                                  1058
         SLR   @07,@07                                             1058
         STH   @07,SDBPAD(,@12)                                    1058
*       RFY                                                        1059
*        (R0,                                                      1059
*         R14,                                                     1059
*         R15,                                                     1059
*         R5,                                                      1059
*         R13) RSTD;                                               1059
*       R5=SDWAPTR;                 /* SAVE SDWA ADDRESS OVER SDUMP  */
         LR    R5,SDWAPTR                                          1060
*       IRSTSDMP=SDUMPARM;          /* INIT SDUMP PARM LIST          */
         MVC   IRSTSDMP(24),SDUMPARM                               1061
*       R0=0;                       /* ASID FOR SDUMP                */
         SLR   R0,R0                                               1062
*       R13=WSACRSTI;               /* SAVE AREA FOR SDUMP           */
         L     @07,LCCAPTR                                         1063
         L     @07,LCCACPUS(,@07)                                  1063
         L     R13,WSACRSTI(,@07)                                  1063
*       GEN;                                                       1064
         SDUMP ASID=(R0),BRANCH=YES,MF=(E,IRSTSDMP)
*       SDWAPTR=R5;                 /* RESTORE SDWA ADDRESS          */
         LR    SDWAPTR,R5                                          1065
*       RFY                                                        1066
*         R13 UNRSTD;                                              1066
*NODUMP:                            /* LABEL FOR BRANCH AFTER CS     */
*       RFY                                                        1067
*        (R7,                                                      1067
*         R4) RSTD;                                                1067
NODUMP   DS    0H                                                  1068
*       R7=SDWAPTR;                 /* SAVE SDWA ADDR                */
         LR    R7,SDWAPTR                                          1068
*       GEN SETS(R14,R15,R0,R1) REFS(R11,R12,R13);                 1069
FRRGSALK SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,DISABLED,REGS=USE,     X
               RELATED=(RTM,'GET SALLOC LOCK')
*       IRSTRPTR=ADDR(IRSTRESV);    /* GET FIRST RESERVE TABLE     1070
*                                      SEGMENT                       */
         LA    @12,IRSTRESV                                        1070
         ST    @12,IRSTRPTR                                        1070
*       IRSTRPTR=RESVNEXT;          /* GET PTR TO FIRST GETMAINED  1071
*                                      SEGMENT                       */
         L     @12,RESVNEXT(,@12)                                  1071
         ST    @12,IRSTRPTR                                        1071
*       RFY                                                        1072
*         R3 RSTD;                                                 1072
*       DO WHILE IRSTRPTR^=0;       /* FREE ALL SEGMENTS             */
         B     @DE01073                                            1073
@DL01073 DS    0H                                                  1074
*         R0=LENGTH(RESVTAB);       /* SET UP LENGTH                 */
         LA    R0,200                                              1074
*         R5=IRSTRPTR;                                             1075
         L     @12,IRSTRPTR                                        1075
         LR    R5,@12                                              1075
*         IRSTRPTR=RESVNEXT;                                       1076
         L     @12,RESVNEXT(,@12)                                  1076
         ST    @12,IRSTRPTR                                        1076
*         GEN SETS(R4,R3);                                         1077
         FREEMAIN RU,LV=(0),A=(5),BRANCH=(YES,GLOBAL),SP=245
*       END;                                                       1078
@DE01073 ICM   @12,15,IRSTRPTR                                     1078
         BNZ   @DL01073                                            1078
*       GEN(L     R15,@SIZDATD);    /* GET LEN AND SUBPOOL FOR WORK
*                                      AREA                          */
         L     R15,@SIZDATD
*       GEN(LA    R0,0(R15));       /* CLEAR HIGH ORDER BYTE         */
         LA    R0,0(R15)
*       GEN SETS(R4,R3);                                           1081
*                                      /*FREEMAIN WRK AREA RLSE SALOC*/
         FREEMAIN RU,LV=(0),A=(IRSTWPTR),BRANCH=(YES,GLOBAL),SP=245
*       SDWAPTR=R7;                 /* RESTORE SDWA ADDRESS          */
         LR    SDWAPTR,R7                                          1082
*       SDWASALL='1'B;              /* INDICATE RTM TO FREE SALLOC   */
         OI    SDWASALL(SDWAPTR),B'00000100'                       1083
*       RFY                                                        1084
*        (R0,                                                      1084
*         R4,                                                      1084
*         R5,                                                      1084
*         R14,                                                     1084
*         R15,                                                     1084
*         R3) UNRSTD;                                              1084
*     END;                                                         1085
*   IF FRRSRBLK='0'B THEN                                          1086
@RF01018 TM    FRRSRBLK(FRRWPTR),B'00100000'                       1086
         BNZ   @RF01086                                            1086
*     IF FRRINCOD=MACHCKIN THEN                                    1087
         CLI   FRRINCOD(FRRWPTR),1                                 1087
         BNE   @RF01087                                            1087
*       PWAEDSRB='00'X;             /* FREE SRB LOCKS                */
         L     @12,PCCAPTR                                         1088
         L     @12,PWAPTR(,@12)                                    1088
         MVI   PWAEDSRB(@12),X'00'                                 1088
*     ELSE                                                         1089
*       PCCASRBL='00'X;                                            1089
         B     @RC01087                                            1089
@RF01087 L     @12,PCCAPTR                                         1089
         MVI   PCCASRBL(@12),X'00'                                 1089
*   PSAIOSUP='0'B;                  /* TURN OFF SUPER BIT            */
@RC01087 DS    0H                                                  1090
@RF01086 NI    PSAIOSUP,B'01111111'                                1090
*   RFY                                                            1091
*    (R14) RSTD;                                                   1091
*   R14=R11;                        /* RESTORE RETURN REG            */
         LR    R14,R11                                             1092
*   END IRSTFRR;                                                   1093
@EL00011 DS    0H                                                  1093
@EF00011 DS    0H                                                  1093
@ER00011 BR    @14                                                 1093
@PB00011 DS    0H                                                  1094
*   RFY                                                            1094
*    (R14) UNRSTD;                                                 1094
*   DCL                                                            1095
*     PATCHLOC FIXED(31) STATIC;                                   1095
*   GEN DATA DEFS(PATCHLOC);                                       1096
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       1097
*     I031F FIXED(31) BASED,                                       1097
*     I031P PTR(31) BASED,                                         1097
*     I015F FIXED(15) BASED,                                       1097
*     I015P PTR(15) BASED,                                         1097
*     I008P PTR(8) BASED,                                          1097
*     I001C CHAR(1) BASED;                                         1097
*   END IECVIRST                                                   1098
*                                                                  1098
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSUT5  (PROLOGUE)                                       */
*/*%INCLUDE SYSUT5  (DECLARES)                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHAPCCA )                                       */
*/*%INCLUDE SYSLIB  (IECDCAT )                                       */
*/*%INCLUDE SYSLIB  (IGFPWA  )                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (IHATQE  )                                       */
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                       */
*/*%INCLUDE SYSLIB  (IEAVVTPC)                                       */
*/*%INCLUDE SYSLIB  (IHAWSAVT)                                       */
*/*%INCLUDE SYSLIB  (IHAFRRS )                                       */
*/*%INCLUDE SYSLIB  (IHALCCA )                                       */
*/*%INCLUDE SYSLIB  (IHALRB  )                                       */
*/*%INCLUDE SYSLIB  (IHASRB  )                                       */
*/*%INCLUDE SYSLIB  (IECDIOCM)                                       */
*/*%INCLUDE SYSLIB  (IECDIOCX)                                       */
*/*%INCLUDE SYSLIB  (IECDLCH )                                       */
*/*%INCLUDE SYSLIB  (IHACSD  )                                       */
*/*%INCLUDE SYSLIB  (IHASDUMP)                                       */
*/*%INCLUDE SYSUT5  (INITIAL )                                       */
*/*%INCLUDE SYSUT5  (RESVSCAN)                                       */
*/*%INCLUDE SYSUT5  (OPERINTF)                                       */
*/*%INCLUDE SYSUT5  (RCVCHANS)                                       */
*/*%INCLUDE SYSUT5  (HUNGINTF)                                       */
*/*%INCLUDE SYSUT5  (MACHCHK )                                       */
*/*%INCLUDE SYSUT5  (SETDIE  )                                       */
*/*%INCLUDE SYSUT5  (RERESRVE)                                       */
*/*%INCLUDE SYSUT5  (RESTARIO)                                       */
*/*%INCLUDE SYSUT5  (CLEANUP )                                       */
*/*%INCLUDE SYSUT5  (OBTSTOR )                                       */
*/*%INCLUDE SYSUT5  (RECORD  )                                       */
*/*%INCLUDE SYSUT5  (FINDUCB )                                       */
*/*%INCLUDE SYSUT5  (RESVSIO )                                       */
*/*%INCLUDE SYSUT5  (IOSGENPT)                                       */
*/*%INCLUDE SYSUT5  (LOADWAIT)                                       */
*/*%INCLUDE SYSUT5  (IRSTFRR )                                       */
*                                                                  1098
*       ;                                                          1098
         B     @EL00001                                            1098
@DATA    DS    0H
@CH00033 DC    H'9'
@CH00796 DC    H'12'
@CH00830 DC    H'16'
@CH03277 DC    H'40'
@CH00809 DC    H'44'
@CH03278 DC    H'88'
@CH03276 DC    H'200'
@CH03282 DC    H'-3889'
@CH03204 DC    XL2'0001'
@CH02185 DC    XL2'01'
@SM03316 MVC   GETMBUFF(0,IRSTOBPN),IRSTMESG
@DATD    DSECT
         DS    0F
IECVIRST CSECT
         DS    0F
@CF00103 DC    F'1'
@CF00115 DC    F'2'
@CH00115 EQU   @CF00115+2
@CF00101 DC    F'8'
@CH00101 EQU   @CF00101+2
@CF03300 DC    F'-8'
@CF03305 DC    F'-6'
@CF03301 DC    F'-4'
@CF02944 DC    XL4'0000004F'
@CF02946 DC    XL4'0000004B'
@CF02948 DC    XL4'0000004C'
@CF02950 DC    XL4'0000004D'
@CF02952 DC    XL4'0000004E'
@CF02982 DC    XL4'00FFFFFF'
@CF02984 DC    XL4'000FFFFF'
@CF02987 DC    XL4'80000000'
@CF02989 DC    XL4'7FFFFFFF'
@CF02559 DC    XL4'F0'
@CF03200 DC    XL4'C0'
@CF03309 DC    BL4'11111111111111111111111101111111'
@CF03312 DC    BL4'00000010000000000000000000000000'
@DATD    DSECT
         DS    0D
IRSTCALL DS    A
IRSTRPTR DS    A
IRSTFIRT DS    A
IRSTFI14 DS    A
IRSTR14  DS    A
IRSTCTLR DS    F
IRSTCTLT DS    F
IRSTIPSW DS    F
IRSTK    DS    A
IRSTDOLP DS    AL2
         ORG   IRSTDOLP
IRSTDOCH DS    AL1
IRSTDODE DS    AL1
         ORG   IRSTDOLP+2
IRSTLAST DS    AL2
         ORG   IRSTLAST
IRSTLACH DS    AL1
IRSTLADE DS    AL1
         ORG   IRSTLAST+2
IRSTRDLN DS    H
IRSTDNUM DS    AL1
IRSTCHAN DS    AL1
IRSTLOOP DS    AL1
         DS    CL3
IRSTTQE  DS    CL128
IRSTSRB  DS    CL44
         DS    CL4
IRSTCAT  DS    CL128
IRSTSTRT DS    CL208
         ORG   IRSTSTRT
IRSTUCBL DS    AL4
IRSTCHMK DS    BL4
IRSTRESV DS    CL200
         ORG   IRSTSTRT+208
IRSTFRRW DS    CL24
IRSTSDMP DS    CL24
IRSTWPSW DS    CL8
         ORG   IRSTWPSW
IRSTWSYS DS    CL4
IRSTWTCD DS    AL4
         ORG   IRSTWPSW+8
IRSTUCBP DS    CL8
         ORG   IRSTUCBP
IRSTPPTH DS    CL4
         ORG   IRSTPPTH
IRSTPDEV DS    FL2
IRSTPCP0 DS    AL1
IRSTPCP1 DS    AL1
         ORG   IRSTUCBP+4
IRSTSPTH DS    CL4
         ORG   IRSTSPTH
IRSTSDEV DS    FL2
IRSTSCP0 DS    AL1
IRSTSCP1 DS    AL1
         ORG   IRSTUCBP+8
IRSTFLG1 DS    BL2
         ORG   IRSTFLG1
IRSTWAIT DS    BL1
IRSTRECD EQU   IRSTFLG1+0
IRSTNOGO EQU   IRSTFLG1+0
IRSTUNCR EQU   IRSTFLG1+0
@NM00191 EQU   IRSTFLG1+0
         ORG   IRSTFLG1+2
         DS    CL2
IRSTREST DS    CL4
         ORG   IRSTREST
IRSTCPUA DS    AL2
         ORG   IRSTCPUA
@NM00192 DS    AL1
IRSTACPU DS    AL1
         ORG   IRSTREST+2
IRSTREID DS    CL2
         ORG   IRSTREST+4
IRSTRPSW DS    CL8
IRSTSYSM DS    BL1
IRSTOPAC DS    BL1
         DS    CL2
IRSTTEMP DS    BL4
IECVIRST CSECT
         DS    0F
@SIZDATD DC    AL1(245)
         DC    AL3(@ENDDATD-@DATD)
@CV02934 DC    V(IECINT)
@CV02940 DC    V(IEAMASCB)
@CV02941 DC    V(IGFPSAD0)
@CV02942 DC    V(IGFPSAE0)
         DS    0D
@CC02996 DC    C'IECVIRST'
@CC02998 DC    C'IRSTFRR '
@CC03186 DC    C'SRB '
@CC03215 DC    C'    '
@CC02960 DC    C'IS'
@CB02991 DC    X'0000001E00000000'
@CB02969 DC    X'00020000'
@CB02971 DC    X'000C0000'
@CB02987 DC    X'80000000'
@CB03216 DC    X'FFFFFFFF'
         DS    CL6
RESVCCW  DC    X'B400000030000001'
URESVCCW DC    X'1400000030000001'
SNSCCW   DC    X'0400000030000001'
ERPIBSTD DC    X'00001007'
IECVIRST CSECT
ENABLE   EQU   X'03'              IMMED FIELD TO ENABLE PSW SYS MASK
DISABLE  EQU   X'FC'              IMMED FIELD TO DISABLE PSW SYS MASK
IECVIRST CSECT
IEA004I  WTO   'IEA004I DEVICE 11112222333344445555666677778888 SET FORX
                I/O REQUEST TERMINATION.',ROUTCDE=(1,10),DESC=(4),MF=L
IEA410I  WTO   'IEA410I CHANNEL (X,Y) FORCED OFFLINE',                 X
               ROUTCDE=(1,10),DESC=(4),MF=L
IEA421I  WTO   'IEA421E START STOPPED PROCESSORS',                     X
               ROUTCDE=(1,10),DESC=(2),MF=L                    @ZM47780
SDUMPARM SDUMP HDR='IECVIRST ERROR',SDATA=(SQA,NUC,PSA,TRT),BUFFER=YES,X
               MF=L,QUIESCE=YES
IECVIRST CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IECVIRST CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
IRSTM    EQU   @04
IRSTI    EQU   @03
IRSTLORT EQU   @11
IRSTTIOC EQU   @12
IRSTSIOC EQU   @03
IRSTRERT EQU   @07
IRSTCATP EQU   @12
IRSTOBPN EQU   @02
IRSTOBRT EQU   @05
UCBPTR   EQU   @07
SDWAPTR  EQU   @01
FRRWPTR  EQU   @08
IRSTWPTR EQU   @06
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
FLCCSW   EQU   PSA+64
FLCCAW   EQU   PSA+72
FLCINPSW EQU   PSA+120
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCCHNID EQU   FLCMCLA
FLCCHTM  EQU   FLCCHNID
FLCIOEL  EQU   FLCMCLA+4
FLCLCL   EQU   FLCMCLA+8
FLCIOA   EQU   FLCMCLA+16
FLCIOAA  EQU   FLCIOA+1
PSAMEDC  EQU   FLCMCLA+76
FLCFSA   EQU   FLCMCLA+80
PSACPULA EQU   PSA+518
PSAPCCAV EQU   PSA+520
PSALCCAV EQU   PSA+528
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSAIOSUP EQU   PSASUP3
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSAACTCD EQU   PSA+782
PSACPUSA EQU   PSA+794
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
PSAWTCOD EQU   PSA+1036
CATPTR   EQU   0
TQEPTR   EQU   0
FRRSPTR  EQU   0
FRREPTR  EQU   0
LCHPTR   EQU   0
SDUMPPTR EQU   0
LRBPTR   EQU   0
SRBPTR   EQU   0
TQE      EQU   0
TQEFLGS  EQU   TQE+14
TQEFLGS2 EQU   TQE+15
TQEVAL   EQU   TQE+16
TQEEXIT  EQU   TQE+28
TQESRB   EQU   TQE+44
TQEFLGS3 EQU   TQE+88
TQESTCK  EQU   TQE+120
LRB      EQU   0
LRBHTYPE EQU   LRB
LRBHREL  EQU   LRB+1
LRBHSYS  EQU   LRBHREL
LRBHSW0  EQU   LRB+2
LRBHSW1  EQU   LRB+3
LRBHSW2  EQU   LRB+4
LRBMACT  EQU   LRBHSW2
LRBHSW3  EQU   LRB+5
LRBHCPID EQU   LRB+16
LRBBASE  EQU   LRB+24
SRBSECT  EQU   0
SRB      EQU   SRBSECT
SRBID    EQU   SRB
SRBASCB  EQU   SRB+8
SRBFLC   EQU   SRB+12
SRBCPAFF EQU   SRBFLC
SRBEP    EQU   SRB+20
SRBRMTR  EQU   SRB+24
SRBPARM  EQU   SRB+28
CVTMAP   EQU   0
CVTILK1  EQU   CVTMAP+36
CVTILK2  EQU   CVTMAP+40
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTBRET  EQU   CVTMAP+82
CVTTPC   EQU   CVTMAP+88
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIXAVL EQU   CVTMAP+124
CVTILCH  EQU   CVTMAP+140
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
PCCA     EQU   0
PCCACPUA EQU   PCCA+16
PCCACAFM EQU   PCCA+18
PCCATMST EQU   PCCA+128
PCCATMFL EQU   PCCATMST
PCCATODE EQU   PCCATMST+1
PCCACCE  EQU   PCCATMST+2
PCCAINTE EQU   PCCATMST+3
PCCAEMSB EQU   PCCA+136
PCCAEMSI EQU   PCCAEMSB
PCCARISP EQU   PCCAEMSI
PCCAEMS2 EQU   PCCAEMSI+1
PCCAEMS3 EQU   PCCAEMSI+2
PCCARMSB EQU   PCCAEMSI+3
PCCAPWAV EQU   PCCA+152
PCCAELAD EQU   PCCA+168
PCCACHAN EQU   PCCA+224
PCCAIRST EQU   PCCACHAN
PCCAEXDM EQU   PCCACHAN
PCCASRBL EQU   PCCA+225
PCCAWERP EQU   PCCA+280
PCCACHUB EQU   PCCAWERP
PCCACHPF EQU   PCCAWERP+4
PCCACNOR EQU   PCCACHPF
PCCACHBL EQU   PCCAWERP+5
PCCACCHA EQU   PCCACHBL
PCCACHVA EQU   PCCAWERP+6
PCCACHTS EQU   PCCAWERP+7
PCCACHS1 EQU   PCCA+288
PCCACHS2 EQU   PCCA+289
PCCACHRB EQU   PCCA+290
PCCACHF1 EQU   PCCA+308
PCCACHF2 EQU   PCCA+309
PCCACHF3 EQU   PCCA+310
PCCACHF4 EQU   PCCA+311
PCCAATTR EQU   PCCA+376
PCCACAT  EQU   PCCA+384
CAT      EQU   0
CATENTRY EQU   CAT
CATFLG   EQU   CATENTRY
CATNOP   EQU   CATFLG
CATFLA   EQU   CAT+1
CATIORST EQU   CATFLA
CATCCRST EQU   CATFLA
CATMCRST EQU   CATFLA
PWA      EQU   0
PWAFRR   EQU   PWA+384
PWAFLAGS EQU   PWA+778
PWAEDSRB EQU   PWA+779
SDWA     EQU   0
SDWAPARM EQU   SDWA
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAERRD EQU   SDWAFLGS+3
SDWAIOFS EQU   SDWA+238
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWAACF2 EQU   SDWAPARQ+1
SDWARCRD EQU   SDWAACF2
SDWAACF3 EQU   SDWAPARQ+2
SDWASALL EQU   SDWAACF3
SDWAACF4 EQU   SDWAPARQ+3
SDWAIUCB EQU   SDWAACF4
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWAIULW EQU   SDWALKWS+4
SDWARECP EQU   SDWA+292
SDWAMODN EQU   SDWARECP
SDWACSCT EQU   SDWARECP+8
SDWAREXN EQU   SDWARECP+16
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
SDWAHEX  EQU   SDWADPVA
SDWAURAL EQU   SDWARA+3
SDWAVRA  EQU   SDWARA+4
UCB      EQU   0
UCBLOCK  EQU   UCB+504
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBSTAT  EQU   UCBOB+3
UCBONLI  EQU   UCBSTAT
UCBCHAN  EQU   UCBOB+4
UCBCHA   EQU   UCBCHAN
UCBUA    EQU   UCBCHAN+1
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBPSNS  EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBIORST EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBLCI   EQU   UCBOB+10
UCBCPU   EQU   UCBOB+11
UCBWGT   EQU   UCBOB+12
UCBMTPXP EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBNAME  EQU   UCBOB+13
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCBRR    EQU   UCBDUDN1
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCB3DACC EQU   UCBDVCLS
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBUDE   EQU   UCBFLC
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00086 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCB3800X EQU   0
UCBOPTNS EQU   UCB3800X
UCBACTIV EQU   UCB3800X+3
UCBMDRBF EQU   UCB3800X+36
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
TPC      EQU   0
IEATPC   EQU   TPC
TPCFLGS1 EQU   IEATPC+4
TPCHDCCQ EQU   IEATPC+12
TPCDMTQE EQU   IEATPC+16
DFD      EQU   TPCDMTQE+4
TPCMNTQE EQU   IEATPC+40
MNIGHT   EQU   TPCMNTQE+16
TPCMFTQE EQU   IEATPC+64
IEATSELM EQU   IEATPC+88
TPCLMTQE EQU   IEATPC+112
TPCWORK  EQU   IEATPC+264
TPCSDIE  EQU   IEATPC+412
WSAG     EQU   0
WSAC     EQU   0
WSACRSTI EQU   WSAC+40
FRRS     EQU   0
FRRSHEAD EQU   FRRS
FRRSENTR EQU   0
FRRSFLGS EQU   FRRSENTR+4
FRRSFLG1 EQU   FRRSFLGS
LCCA     EQU   0
LCCAIHRC EQU   LCCA+520
LCCAIHR1 EQU   LCCAIHRC
LCCAIHR2 EQU   LCCAIHRC+1
LCCAIHR3 EQU   LCCAIHRC+2
LCCAIHR4 EQU   LCCAIHRC+3
LCCASPIN EQU   LCCA+524
LCCASPN1 EQU   LCCASPIN
LCCASPN2 EQU   LCCASPIN+1
LCCASPN3 EQU   LCCASPIN+2
LCCASPN4 EQU   LCCASPIN+3
LCCACPUS EQU   LCCA+536
LCCADSF1 EQU   LCCA+540
LCCADSF2 EQU   LCCA+541
LCCASPSA EQU   LCCA+544
LCCACRFL EQU   LCCA+692
LCCACREX EQU   LCCA+693
LCCALKFG EQU   LCCA+694
LCCASRBF EQU   LCCA+720
LRBCVAR  EQU   0
LRBCMP   EQU   LRBCVAR+8
IOCOM    EQU   0
IOCOMEX  EQU   IOCOM+64
IOCUCBBM EQU   IOCOM+120
IOCX     EQU   0
IOX      EQU   IOCX
IOXHICH  EQU   IOCX+4
LCH      EQU   0
LCHENTRY EQU   LCH
LCHTCH   EQU   LCH+16
LCHFLA   EQU   LCH+21
CSD      EQU   0
CSDCPUAL EQU   CSD+8
CSDSCWRD EQU   CSD+12
CSDSCFL1 EQU   CSDSCWRD
CSDSCFL2 EQU   CSDSCWRD+1
CSDSCFL3 EQU   CSDSCWRD+2
CSDSCFL4 EQU   CSDSCWRD+3
CSDFLAGS EQU   CSD+23
SDUMP    EQU   0
SDUSDAT1 EQU   SDUMP+2
SDUSDAT2 EQU   SDUMP+3
FRRWORK  EQU   0
FRRBASE1 EQU   FRRWORK
FRRBASE2 EQU   FRRWORK+4
FRRGWPTR EQU   FRRWORK+8
FRRINPUT EQU   FRRWORK+12
FRRINCOD EQU   FRRINPUT
FRRINDEV EQU   FRRINPUT+2
FRRINCHN EQU   FRRINDEV
FRRFLAGS EQU   FRRWORK+16
FRRSALOC EQU   FRRFLAGS
FRRSUCB  EQU   FRRFLAGS
FRRSRBLK EQU   FRRFLAGS
FRRRESVE EQU   FRRFLAGS
FRRLDWT  EQU   FRRFLAGS
FRRRSPSW EQU   FRRFLAGS
FRRRESTL EQU   FRRFLAGS
FRRIOPSW EQU   FRRFLAGS
FRRCTLR2 EQU   FRRFLAGS+1
FRRCLRCH EQU   FRRFLAGS+1
FRRSDWA  EQU   FRRWORK+20
IEESTPRS EQU   0
FICALLER EQU   0
SETDIE   EQU   0
IORWSAVE EQU   0
LOGOUT   EQU   0
SDBUF    EQU   0
SDBDATAD EQU   SDBUF
SDBDLN   EQU   SDBUF+4
SDBPAD   EQU   SDBUF+6
SDBDATA  EQU   SDBUF+8
RESVTAB  EQU   0
RESVNEXT EQU   RESVTAB
RESVCNT  EQU   RESVTAB+4
RESVENTY EQU   RESVTAB+8
RESVDEVA EQU   RESVENTY
RESVFLGS EQU   RESVENTY+2
RESVCOMP EQU   RESVFLGS
RESVSNS  EQU   RESVFLGS
RESVXIO  EQU   RESVFLGS
RESVUCBA EQU   RESVENTY+4
RESVUCBL EQU   RESVENTY+8
RESVPPTH EQU   RESVUCBL
RESVPDEV EQU   RESVPPTH
RESVPCP0 EQU   RESVPPTH+2
RESVPCP1 EQU   RESVPPTH+3
RESVSPTH EQU   RESVUCBL+4
RESVSDEV EQU   RESVSPTH
RESVSCP0 EQU   RESVSPTH+2
RESVSCP1 EQU   RESVSPTH+3
GETMBUFF EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
UCBBGN   EQU   0
PWAPTR   EQU   PCCAPWAV
PCCAPTR  EQU   PSAPCCAV
TPCPTR   EQU   CVTTPC
LCCAPTR  EQU   PSALCCAV
IOCOMPTR EQU   CVTIXAVL
IOCXPTR  EQU   IOCOMEX
CVTPTR   EQU   FLCCVT
IRSTMESG EQU   IRSTTQE
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTSRBRT EQU   CVTS01+100
CVTSDBF  EQU   CVTS01+240
CVTCSD   EQU   CVTS01+312
CVTSPSA  EQU   CVTS01+336
CVTRSTWD EQU   CVTS01+368
CVTPCCAT EQU   CVTS01+416
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTSTPRS EQU   CVTS01+536
CVTGSDA  EQU   CVTS01+600
PSARSVTE EQU   PSARSVT
UCBOBS01 EQU   UCBDEV
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBSQC   EQU   UCBOBS01+12
UCBFL4   EQU   UCBOBS01+13
UCBBASE  EQU   UCBOBS01+16
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00085 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBCTCAD EQU   UCBOBS08
UCBCTCF1 EQU   UCBOBS08+4
UCBOBS09 EQU   UCBDEV
LRBHRSW1 EQU   LRBHSW1
LRBHCSW1 EQU   LRBHSW1
LRBHMSW1 EQU   LRBHSW1
LRBMSYST EQU   LRBHMSW1
LRBMMCH  EQU   LRBBASE
LRBMCEIA EQU   LRBMMCH+8
LRBMTERM EQU   LRBMCEIA
LRBMHARD EQU   LRBMCEIA+1
LRBMINTM EQU   LRBMCEIA+2
LRBMSOFT EQU   LRBMCEIA+3
LRBMPDAR EQU   LRBMMCH+12
LRBMRSR1 EQU   LRBMMCH+13
LRBMRSR2 EQU   LRBMMCH+14
LRBMFLO  EQU   LRBMMCH+24
LRBMCIC  EQU   LRBMFLO
@NM00141 EQU   LRBMCIC
@NM00143 EQU   LRBMCIC+1
@NM00145 EQU   LRBMCIC+2
@NM00147 EQU   LRBMCIC+3
@NM00149 EQU   LRBMCIC+5
LRBMEDC  EQU   LRBMFLO+12
LRBRDDR  EQU   LRBBASE
LRBCCCH  EQU   LRBBASE
LRBCCUA  EQU   LRBCCCH+49
LRBDMDR  EQU   LRBBASE
LRBNMIH  EQU   LRBBASE
LRBTTER  EQU   LRBBASE
LRBTLNH  EQU   LRBTTER
LRBTWSC  EQU   LRBTTER+4
LRBTUSR  EQU   LRBTTER+8
LOGTUSR  EQU   LRBTUSR
LOGREGS  EQU   LOGTUSR
LOGFRRWK EQU   LOGTUSR+64
LOGCHMSK EQU   LOGTUSR+88
LOGDATAA EQU   LRBHSW2
MSG004   EQU   IRSTMESG
M004DEV  EQU   MSG004+19
MSG421   EQU   IRSTMESG
MSG410   EQU   IRSTMESG
M410CHAN EQU   MSG410+21
M410CPU  EQU   MSG410+23
RCDVRA   EQU   SDWAVRA
RCDFRRW  EQU   RCDVRA
RCDCHMSK EQU   RCDVRA+24
CURRCPU  EQU   PSACPUSA
@NM00176 EQU   UCBSTAT
RUCBONLI EQU   @NM00176
@NM00178 EQU   UCBWGT
RUCBVHRN EQU   @NM00178
STATUS   EQU   FLCCSW+4
STATM    EQU   STATUS
CUE      EQU   STATUS
BSY      EQU   STATUS
CE       EQU   STATUS
DE       EQU   STATUS
UC       EQU   STATUS
CDC      EQU   STATUS+1
CCC      EQU   STATUS+1
ICC      EQU   STATUS+1
LIMCHANL EQU   FLCLCL
@NM00186 EQU   LIMCHANL+2
HUNGINF  EQU   @NM00186
FLC      EQU   PSA
LOGRECRD EQU   IRSTMESG
TQEECB   EQU   TQEEXIT
*                                      START UNREFERENCED COMPONENTS
@NM00189 EQU   LIMCHANL+3
@NM00188 EQU   @NM00186
@NM00187 EQU   @NM00186
@NM00185 EQU   LIMCHANL+1
@NM00184 EQU   LIMCHANL
@NM00183 EQU   STATUS+1
@NM00182 EQU   STATUS
@NM00181 EQU   STATUS
@NM00180 EQU   @NM00178
@NM00179 EQU   @NM00178
@NM00177 EQU   @NM00176
RCDEND   EQU   RCDVRA+28
@NM00175 EQU   MSG410+40
M410TXT2 EQU   MSG410+24
M410COMA EQU   MSG410+22
M410TXT1 EQU   MSG410+4
@NM00174 EQU   MSG410
@NM00173 EQU   MSG421+36
M421TXT1 EQU   MSG421+4
@NM00172 EQU   MSG421
@NM00171 EQU   MSG004+84
M004TXT2 EQU   MSG004+51
M004TXT1 EQU   MSG004+4
@NM00170 EQU   MSG004
LRBNINT  EQU   LRBNMIH+24
LRBNDEVT EQU   LRBNMIH+20
LRBNVOL  EQU   LRBNMIH+14
LRBNCUA1 EQU   LRBNMIH+11
LRBNCUA2 EQU   LRBNMIH+8
LRBNJOB  EQU   LRBNMIH
LRBDSENS EQU   LRBDMDR+8
LRBDVOL  EQU   LRBDMDR+2
LRBDCUA1 EQU   LRBDMDR
LRBCCLOG EQU   LRBCCCH+56
LRBCLOGL EQU   LRBCCCH+54
LRBCHCUA EQU   LRBCCCH+52
LRBCCUA2 EQU   LRBCCUA+1
@NM00155 EQU   LRBCCUA
LRBCCHID EQU   LRBCCCH+48
LRBCDEVT EQU   LRBCCCH+44
LRBCECSW EQU   LRBCCCH+40
LRBCFCSW EQU   LRBCCCH+32
LRBCFCCW EQU   LRBCCCH+24
LRBCAIO  EQU   LRBCCCH+8
LRBCJOB  EQU   LRBCCCH
LRBRDEV2 EQU   LRBRDDR+32
LRBRCUA2 EQU   LRBRDDR+29
LRBRPH2  EQU   LRBRDDR+28
LRBRDEV1 EQU   LRBRDDR+24
LRBRCUA1 EQU   LRBRDDR+21
LRBRPH1  EQU   LRBRDDR+20
LRBRVOL2 EQU   LRBRDDR+14
LRBRVOL1 EQU   LRBRDDR+8
LRBRJOB  EQU   LRBRDDR
LRBMCEL  EQU   LRBMMCH+304
@NM00154 EQU   LRBMFLO+20
LRBMFSA  EQU   LRBMFLO+16
@NM00153 EQU   LRBMFLO+13
LRBMDISC EQU   LRBMEDC
LRBMINTR EQU   LRBMEDC
LRBMINST EQU   LRBMEDC
LRBMCCF  EQU   LRBMEDC
LRBMCNOP EQU   LRBMEDC
LRBMEXSR EQU   LRBMEDC
LRBMCOPR EQU   LRBMEDC
@NM00152 EQU   LRBMEDC
@NM00151 EQU   LRBMFLO+8
LRBMCELL EQU   LRBMCIC+6
LRBMVCC  EQU   @NM00149
LRBMVPT  EQU   @NM00149
@NM00150 EQU   @NM00149
@NM00148 EQU   LRBMCIC+4
LRBMVST  EQU   @NM00147
LRBMVLG  EQU   @NM00147
LRBMVCR  EQU   @NM00147
LRBMVGR  EQU   @NM00147
LRBMVFP  EQU   @NM00147
LRBMVED  EQU   @NM00147
LRBMVRC  EQU   @NM00147
LRBMVFA  EQU   @NM00147
LRBMVIA  EQU   @NM00145
LRBMVPM  EQU   @NM00145
LRBMVMS  EQU   @NM00145
LRBMVWP  EQU   @NM00145
@NM00146 EQU   @NM00145
LRBMFKE  EQU   @NM00145
LRBMFSC  EQU   @NM00145
LRBMFSE  EQU   @NM00145
LRBMIDY  EQU   @NM00143
LRBMIBU  EQU   @NM00143
@NM00144 EQU   @NM00143
LRBMFWN  EQU   @NM00143
LRBMFDG  EQU   @NM00141
@NM00142 EQU   @NM00141
LRBMFED  EQU   @NM00141
LRBMFCD  EQU   @NM00141
LRBMFTD  EQU   @NM00141
LRBMFSR  EQU   @NM00141
LRBMFPD  EQU   @NM00141
LRBMFSD  EQU   @NM00141
LRBMMOSW EQU   LRBMMCH+16
LRBMPWL  EQU   LRBMMCH+15
LRBMVEQR EQU   LRBMRSR2
LRBMPGFX EQU   LRBMRSR2
LRBMLSQA EQU   LRBMRSR2
LRBMFSQA EQU   LRBMRSR2
LRBMNUCL EQU   LRBMRSR2
LRBMSPER EQU   LRBMRSR2
LRBMINTC EQU   LRBMRSR2
LRBMOFLN EQU   LRBMRSR2
LRBMCHNG EQU   LRBMRSR1
LRBMSER  EQU   LRBMRSR1
@NM00140 EQU   LRBMRSR1
@NM00139 EQU   LRBMPDAR
LRBMRSRF EQU   LRBMPDAR
LRBMRSRC EQU   LRBMPDAR
LRBMINVP EQU   LRBMPDAR
@NM00138 EQU   LRBMPDAR
LRBMSBUF EQU   LRBMSOFT
LRBMSHIR EQU   LRBMSOFT
LRBMSECC EQU   LRBMSOFT
LRBMSEXD EQU   LRBMSOFT
@NM00137 EQU   LRBMSOFT
LRBMSSFT EQU   LRBMSOFT
LRBMIL80 EQU   LRBMINTM
LRBMICTM EQU   LRBMINTM
LRBMICKC EQU   LRBMINTM
LRBMITOD EQU   LRBMINTM
@NM00136 EQU   LRBMINTM
LRBMHIPD EQU   LRBMHARD
LRBMHSPF EQU   LRBMHARD
LRBMHSTO EQU   LRBMHARD
LRBMHINV EQU   LRBMHARD
LRBMHSD  EQU   LRBMHARD
@NM00135 EQU   LRBMHARD
LRBMHHRD EQU   LRBMHARD
LRBMTINV EQU   LRBMTERM
LRBMTDMG EQU   LRBMTERM
LRBMTWRN EQU   LRBMTERM
LRBMTCKS EQU   LRBMTERM
LRBMTSEC EQU   LRBMTERM
LRBMTTHR EQU   LRBMTERM
@NM00134 EQU   LRBMTERM
LRBMWSC  EQU   LRBMMCH+4
LRBMLNH  EQU   LRBMMCH
@NM00133 EQU   LRBHMSW1
@NM00132 EQU   LRBHMSW1
@NM00131 EQU   LRBHCSW1
LRBCERPP EQU   LRBHCSW1
LRBCDATA EQU   LRBHCSW1
LRBCICUA EQU   LRBHCSW1
LRBCNOSP EQU   LRBHCSW1
@NM00130 EQU   LRBHCSW1
LRBCINCO EQU   LRBHCSW1
LRBCMESG EQU   LRBHCSW1
@NM00129 EQU   LRBHRSW1
LRBRSYSI EQU   LRBHRSW1
LRBROPER EQU   LRBHRSW1
LRBRSEC  EQU   LRBHRSW1
LRBRPRIM EQU   LRBHRSW1
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBRV082 EQU   UCBCTCF1
UCBRV081 EQU   UCBCTCF1
UCBRV080 EQU   UCBCTCF1
UCBRV079 EQU   UCBCTCF1
UCBRV078 EQU   UCBCTCF1
UCBRV077 EQU   UCBCTCF1
UCBRV076 EQU   UCBCTCF1
UCBCTC80 EQU   UCBCTCF1
UCBCTCAL EQU   UCBCTCAD
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00085
UCBSKPFG EQU   @NM00085
UCBRIPND EQU   @NM00085
UCBRTIAC EQU   @NM00085
UCBRSV79 EQU   @NM00085
UCBRSV78 EQU   @NM00085
UCBRSV77 EQU   @NM00085
UCBOLTEP EQU   @NM00085
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBDQDSP EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00084 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBMAT   EQU   UCBFL4
UCBHOLD  EQU   UCBFL4
UCBATTN  EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRESVP EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVOLI  EQU   UCBOBS01+4
UCBVTOC  EQU   UCBOBS01
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
@NM00190 EQU   RESVFLGS
@NM00169 EQU   FRRFLAGS+1
@NM00168 EQU   FRRINPUT+1
@NM00167 EQU   SDUMP+20
@NM00166 EQU   SDUMP+16
@NM00165 EQU   SDUMP+12
@NM00164 EQU   SDUMP+8
@NM00163 EQU   SDUMP+4
@NM00162 EQU   SDUSDAT2
SDUSWA   EQU   SDUSDAT2
SDUCSA   EQU   SDUSDAT2
SDUTRT   EQU   SDUSDAT1
SDULPA   EQU   SDUSDAT1
SDURGN   EQU   SDUSDAT1
SDULSQA  EQU   SDUSDAT1
SDUSQA   EQU   SDUSDAT1
SDUNUC   EQU   SDUSDAT1
SDUPSA   EQU   SDUSDAT1
SDUALPSA EQU   SDUSDAT1
@NM00161 EQU   SDUMP
@NM00160 EQU   CSD+160
CSDMASK  EQU   CSD+128
CSDUCNT  EQU   CSD+124
CSDTCNT  EQU   CSD+120
CSDGDTOD EQU   CSD+116
CSDGDINT EQU   CSD+112
CSDGDCC  EQU   CSD+108
CSDDDRCT EQU   CSD+106
CSDRV044 EQU   CSD+104
CSDMAFF  EQU   CSD+24
CSDRV038 EQU   CSDFLAGS
CSDRV037 EQU   CSDFLAGS
CSDRV036 EQU   CSDFLAGS
CSDRV035 EQU   CSDFLAGS
CSDRV034 EQU   CSDFLAGS
CSDRV033 EQU   CSDFLAGS
CSDRV032 EQU   CSDFLAGS
CSDMP    EQU   CSDFLAGS
CSDACR   EQU   CSD+22
CSDMF1CP EQU   CSD+20
CSDRV043 EQU   CSD+16
CSDRV030 EQU   CSDSCFL4
CSDRV029 EQU   CSDSCFL4
CSDRV028 EQU   CSDSCFL4
CSDRV027 EQU   CSDSCFL4
CSDRV026 EQU   CSDSCFL4
CSDRV025 EQU   CSDSCFL4
CSDRV024 EQU   CSDSCFL4
CSDRV023 EQU   CSDSCFL4
CSDRV022 EQU   CSDSCFL3
CSDRV021 EQU   CSDSCFL3
CSDRV020 EQU   CSDSCFL3
CSDRV019 EQU   CSDSCFL3
CSDRV018 EQU   CSDSCFL3
CSDRV017 EQU   CSDSCFL3
CSDRV016 EQU   CSDSCFL3
CSDRV015 EQU   CSDSCFL3
CSDRV014 EQU   CSDSCFL2
CSDRV013 EQU   CSDSCFL2
CSDRV012 EQU   CSDSCFL2
CSDRV011 EQU   CSDSCFL2
CSDRV010 EQU   CSDSCFL2
CSDRV009 EQU   CSDSCFL2
CSDRV008 EQU   CSDSCFL2
CSDRV007 EQU   CSDSCFL2
CSDRV006 EQU   CSDSCFL1
CSDRV005 EQU   CSDSCFL1
CSDRV004 EQU   CSDSCFL1
CSDRV003 EQU   CSDSCFL1
CSDRV002 EQU   CSDSCFL1
CSDRV001 EQU   CSDSCFL1
CSDSYSND EQU   CSDSCFL1
CSDRV042 EQU   CSDSCFL1
CSDCPUOL EQU   CSD+10
CSDSAFF  EQU   CSDCPUAL
CSDCHAD  EQU   CSD+6
CSDCPUJS EQU   CSD+4
CSDCSD   EQU   CSD
LCHEND   EQU   LCH+32
LCHPYBSY EQU   LCH+30
LCHLGBSY EQU   LCH+28
LCHRSV03 EQU   LCH+26
LCHTOTAL EQU   LCH+24
LCHRSV02 EQU   LCH+22
@NM00159 EQU   LCHFLA
LCHLKHLD EQU   LCHFLA
LCHCHCNT EQU   LCH+20
LCHRSV01 EQU   LCH+12
LCHLOCK  EQU   LCH+8
LCHLST   EQU   LCH+4
LCHFST   EQU   LCHENTRY
IOXEND   EQU   IOCX+32
IOXPSIF  EQU   IOCX+28
IOXPSIX  EQU   IOCX+24
IOXSTIDC EQU   IOCX+20
IOXCRHD  EQU   IOCX+16
IOXCRHA  EQU   IOCX+12
IOXTCQSC EQU   IOCX+8
@NM00158 EQU   IOCX+6
IOXLCHCT EQU   IOCX+5
IOXCHMSK EQU   IOCX+2
IOXOFSET EQU   IOX
IOCOEND  EQU   IOCOM+128
IOCPATCH EQU   IOCOM+124
IOCQCNT  EQU   IOCOM+116
IOCIOSDQ EQU   IOCOM+112
IOCIOSEQ EQU   IOCOM+108
IOCSVCF  EQU   IOCOM+104
IOCTCCW  EQU   IOCOM+100
IOCRSVTB EQU   IOCOM+96
IOCMFCNT EQU   IOCOM+92
IOCMFHK  EQU   IOCOM+88
IOCGENA  EQU   IOCOM+84
IOCCCH   EQU   IOCOM+80
IOCASYNQ EQU   IOCOM+76
IOCLCHTB EQU   IOCOM+72
IOCATTBL EQU   IOCOM+68
IOCSYNCH EQU   IOCOM+56
IOCCATLK EQU   IOCOM+48
IOCPRGID EQU   IOCOM+44
IOCIOSCP EQU   IOCOM+40
IOCORMGT EQU   IOCOM+36
IOCVOID  EQU   IOCOM+32
IOCSTIO  EQU   IOCOM+28
IOCSCOMP EQU   IOCOM+24
IOCHD160 EQU   IOCOM+20
IOCINT   EQU   IOCOM+16
IOCCTBL  EQU   IOCOM+12
IOCHIO   EQU   IOCOM+8
IOCPST   EQU   IOCOM+4
IOCPGCT  EQU   IOCOM+2
IOCVOICT EQU   IOCOM
LRBCMPCS EQU   LRBCMP+2
LRBCMPPA EQU   LRBCMP
LRBCMPNO EQU   LRBCVAR+6
LRBCMPF2 EQU   LRBCVAR+5
LRBCMPF1 EQU   LRBCVAR+4
LRBCRESD EQU   LRBCVAR+2
LRBCFT   EQU   LRBCVAR
LCCAR125 EQU   LCCA+964
LCCAR124 EQU   LCCA+960
LCCASGPR EQU   LCCA+896
LCCADRT2 EQU   LCCA+888
LCCADRT1 EQU   LCCA+880
LCCAR103 EQU   LCCA+876
LCCAESS2 EQU   LCCA+872
LCCASPLJ EQU   LCCA+868
LCCASMQJ EQU   LCCA+864
LCCAIRT  EQU   LCCA+736
LCCAASID EQU   LCCA+732
LCCARV89 EQU   LCCA+728
LCCAPGTA EQU   LCCASRBF+2
LCCASAFN EQU   LCCASRBF
LCCAECSA EQU   LCCA+716
LCCAICR0 EQU   LCCA+712
LCCALWTM EQU   LCCA+704
LCCARV78 EQU   LCCA+700
LCCAPINV EQU   LCCA+696
LCCARV88 EQU   LCCA+695
LCCARV87 EQU   LCCALKFG
LCCARV86 EQU   LCCALKFG
LCCARV85 EQU   LCCALKFG
LCCARV84 EQU   LCCALKFG
LCCALKRD EQU   LCCALKFG
LCCALKAQ EQU   LCCALKFG
LCCALKSA EQU   LCCALKFG
LCCALKDP EQU   LCCALKFG
LCCACRST EQU   LCCACREX
LCCACRDP EQU   LCCACREX
LCCACRLM EQU   LCCACREX
LCCACRIN EQU   LCCACREX
LCCACRRT EQU   LCCACREX
LCCACRLE EQU   LCCACREX
LCCACRRM EQU   LCCACREX
LCCACREF EQU   LCCACREX
LCCAVARY EQU   LCCACRFL
LCCARV73 EQU   LCCACRFL
LCCARV72 EQU   LCCACRFL
LCCARV71 EQU   LCCACRFL
LCCARV70 EQU   LCCACRFL
LCCARV69 EQU   LCCACRFL
LCCACLMS EQU   LCCACRFL
LCCACRTM EQU   LCCACRFL
LCCALCR0 EQU   LCCA+688
LCCACRLC EQU   LCCA+684
LCCARCPU EQU   LCCA+680
LCCADCPU EQU   LCCA+676
LCCASRBJ EQU   LCCA+672
LCCADSSR EQU   LCCA+668
LCCADSSC EQU   LCCA+660
LCCADSS3 EQU   LCCA+648
LCCADSS2 EQU   LCCA+636
LCCADSS1 EQU   LCCA+624
LCCAWTIM EQU   LCCA+616
LCCAITOD EQU   LCCA+608
LCCADTOD EQU   LCCA+600
LCCASTOD EQU   LCCA+592
LCCARIR5 EQU   LCCASPSA+44
LCCARIR4 EQU   LCCASPSA+40
LCCARIR3 EQU   LCCASPSA+36
LCCARIR2 EQU   LCCASPSA+32
LCCARPR5 EQU   LCCASPSA+28
LCCARPR4 EQU   LCCASPSA+24
LCCARPR3 EQU   LCCASPSA+20
LCCARPR2 EQU   LCCASPSA+16
LCCADSR5 EQU   LCCASPSA+12
LCCADSR4 EQU   LCCASPSA+8
LCCADSR3 EQU   LCCASPSA+4
LCCADSR2 EQU   LCCASPSA
LCCARV68 EQU   LCCA+543
LCCAPSMK EQU   LCCA+542
LCCARV67 EQU   LCCADSF2
LCCARV66 EQU   LCCADSF2
LCCARV65 EQU   LCCADSF2
LCCARV64 EQU   LCCADSF2
LCCADSRW EQU   LCCADSF2
LCCADSPL EQU   LCCADSF2
LCCAGSRB EQU   LCCADSF2
LCCASRBM EQU   LCCADSF2
LCCARV61 EQU   LCCADSF1
LCCARV60 EQU   LCCADSF1
LCCARV59 EQU   LCCADSF1
LCCARV58 EQU   LCCADSF1
LCCATIMR EQU   LCCADSF1
LCCADSS  EQU   LCCADSF1
LCCAVCPU EQU   LCCADSF1
LCCAACR  EQU   LCCADSF1
LCCAASCP EQU   LCCA+532
LCCAESSA EQU   LCCA+528
LCCARV55 EQU   LCCASPN4
LCCARV54 EQU   LCCASPN4
LCCARV53 EQU   LCCASPN4
LCCARV52 EQU   LCCASPN4
LCCARV51 EQU   LCCASPN4
LCCARV50 EQU   LCCASPN4
LCCARV49 EQU   LCCASPN4
LCCARV48 EQU   LCCASPN4
LCCARV47 EQU   LCCASPN3
LCCARV46 EQU   LCCASPN3
LCCARV45 EQU   LCCASPN3
LCCARV44 EQU   LCCASPN3
LCCARV43 EQU   LCCASPN3
LCCARV42 EQU   LCCASPN3
LCCARV41 EQU   LCCASPN3
LCCARV40 EQU   LCCASPN3
LCCARV39 EQU   LCCASPN2
LCCARV38 EQU   LCCASPN2
LCCARV37 EQU   LCCASPN2
LCCARV36 EQU   LCCASPN2
LCCARV35 EQU   LCCASPN2
LCCARV34 EQU   LCCASPN2
LCCARV33 EQU   LCCASPN2
LCCARV32 EQU   LCCASPN2
LCCARV31 EQU   LCCASPN1
LCCARV30 EQU   LCCASPN1
LCCAMFIO EQU   LCCASPN1
LCCARSTR EQU   LCCASPN1
LCCATSPN EQU   LCCASPN1
LCCALOCK EQU   LCCASPN1
LCCASIGP EQU   LCCASPN1
LCCAPTLB EQU   LCCASPN1
LCCARV27 EQU   LCCAIHR4
LCCARV26 EQU   LCCAIHR4
LCCARV25 EQU   LCCAIHR4
LCCARV24 EQU   LCCAIHR4
LCCARV23 EQU   LCCAIHR4
LCCARV22 EQU   LCCAIHR4
LCCARV21 EQU   LCCAIHR4
LCCARV20 EQU   LCCAIHR4
LCCARV19 EQU   LCCAIHR3
LCCARV18 EQU   LCCAIHR3
LCCARV17 EQU   LCCAIHR3
LCCARV16 EQU   LCCAIHR3
LCCARV15 EQU   LCCAIHR3
LCCARV14 EQU   LCCAIHR3
LCCARV13 EQU   LCCAIHR3
LCCARV12 EQU   LCCAIHR3
LCCARV11 EQU   LCCAIHR2
LCCARV10 EQU   LCCAIHR2
LCCARV09 EQU   LCCAIHR2
LCCARV08 EQU   LCCAIHR2
LCCARV07 EQU   LCCAIHR2
LCCARV06 EQU   LCCAIHR2
LCCARV05 EQU   LCCAIHR2
LCCARV04 EQU   LCCAIHR2
LCCARV03 EQU   LCCAIHR1
LCCARV02 EQU   LCCAIHR1
LCCARV01 EQU   LCCAIHR1
LCCAPPIE EQU   LCCAIHR1
LCCAPSG1 EQU   LCCAIHR1
LCCAPDAT EQU   LCCAIHR1
LCCAXRC2 EQU   LCCAIHR1
LCCAXRC1 EQU   LCCAIHR1
LCCAIOPS EQU   LCCA+512
LCCAGPGR EQU   LCCA+448
LCCAR133 EQU   LCCA+444
LCCAR132 EQU   LCCA+440
LCCAR131 EQU   LCCA+436
LCCAR130 EQU   LCCA+432
LCCAR129 EQU   LCCA+428
LCCAR128 EQU   LCCA+424
LCCAR127 EQU   LCCA+420
LCCAR126 EQU   LCCA+416
LCCARSGR EQU   LCCA+352
LCCAXGR3 EQU   LCCA+288
LCCAXGR2 EQU   LCCA+224
LCCAXGR1 EQU   LCCA+160
LCCACR0  EQU   LCCA+156
LCCAMCR1 EQU   LCCA+152
LCCAPVAD EQU   LCCA+148
LCCAPINT EQU   LCCA+144
LCCAPPSW EQU   LCCA+136
LCCAPGR2 EQU   LCCA+72
LCCAPGR1 EQU   LCCA+8
LCCARV77 EQU   LCCA+6
LCCACPUA EQU   LCCA+4
LCCALCCA EQU   LCCA
FRRSPARM EQU   FRRSENTR+8
@NM00123 EQU   FRRSFLGS+1
@NM00122 EQU   FRRSFLG1
FRRSNEST EQU   FRRSFLG1
FRRSRCUR EQU   FRRSFLG1
FRRSFRRA EQU   FRRSENTR
FRRSENTS EQU   FRRS+84
FRRSRTMW EQU   FRRS+16
FRRSCURR EQU   FRRSHEAD+12
FRRSELEN EQU   FRRSHEAD+8
FRRSLAST EQU   FRRSHEAD+4
FRRSEMP  EQU   FRRSHEAD
WSACASMS EQU   WSAC+60
WSACASMD EQU   WSAC+56
WSACCCH  EQU   WSAC+52
WSACRRSA EQU   WSAC+48
WSACREST EQU   WSAC+44
WSACABTM EQU   WSAC+36
WSACMF1  EQU   WSAC+32
WSACEDS0 EQU   WSAC+28
WSACIOS  EQU   WSAC+24
WSACRTMK EQU   WSAC+20
WSACACR  EQU   WSAC+16
WSACTIME EQU   WSAC+12
WSACOPTM EQU   WSAC+8
WSACGTF  EQU   WSAC+4
WSACCWSA EQU   WSAC
WSAGSCHE EQU   WSAG+40
WSAGREST EQU   WSAG+36
WSAGNQDQ EQU   WSAG+32
WSAGMEMT EQU   WSAG+28
WSAGOPTM EQU   WSAG+24
WSAGSTAT EQU   WSAG+20
WSAGEMS0 EQU   WSAG+16
WSAGSSRS EQU   WSAG+12
WSAGRSM  EQU   WSAG+8
WSAGGMFM EQU   WSAG+4
WSAGPGIO EQU   WSAG
TPCOCL   EQU   IEATPC+416
TPCCLA   EQU   IEATPC+408
TPCCKQ   EQU   IEATPC+404
TPCRSRB  EQU   IEATPC+360
TPCTCWA  EQU   IEATPC+356
TPCCRSAV EQU   IEATPC+352
TPCFRRP  EQU   IEATPC+348
TPCVPTR  EQU   IEATPC+344
TPCMISC  EQU   IEATPC+272
TPCWORKR EQU   TPCWORK+4
TPCWORKL EQU   TPCWORK
TPCSAVE2 EQU   IEATPC+200
TPCSAVE1 EQU   IEATPC+136
@NM00121 EQU   TPCLMTQE+16
@NM00120 EQU   TPCLMTQE+15
@NM00119 EQU   TPCLMTQE+14
@NM00118 EQU   TPCLMTQE+12
@NM00117 EQU   TPCLMTQE+8
@NM00116 EQU   TPCLMTQE+4
@NM00115 EQU   TPCLMTQE
@NM00114 EQU   IEATSELM+16
@NM00113 EQU   IEATSELM+15
@NM00112 EQU   IEATSELM+14
@NM00111 EQU   IEATSELM+12
@NM00110 EQU   IEATSELM+8
@NM00109 EQU   IEATSELM+4
@NM00108 EQU   IEATSELM
@NM00107 EQU   TPCMFTQE+16
@NM00106 EQU   TPCMFTQE+15
@NM00105 EQU   TPCMFTQE+14
@NM00104 EQU   TPCMFTQE+12
@NM00103 EQU   TPCMFTQE+8
@NM00102 EQU   TPCMFTQE+4
@NM00101 EQU   TPCMFTQE
MNIGHTRH EQU   MNIGHT+4
MNIGHTLH EQU   MNIGHT
@NM00100 EQU   TPCMNTQE+15
@NM00099 EQU   TPCMNTQE+14
@NM00098 EQU   TPCMNTQE+12
@NM00097 EQU   TPCMNTQE+8
@NM00096 EQU   TPCMNTQE+4
@NM00095 EQU   TPCMNTQE
@NM00094 EQU   TPCDMTQE+16
@NM00093 EQU   TPCDMTQE+15
@NM00092 EQU   TPCDMTQE+14
@NM00091 EQU   TPCDMTQE+12
@NM00090 EQU   TPCDMTQE+8
@NM00089 EQU   TPCDMTQE
TPCTZORG EQU   IEATPC+8
TPCCC    EQU   IEATPC+7
@NM00088 EQU   IEATPC+5
@NM00087 EQU   TPCFLGS1
TPCSYNC  EQU   TPCFLGS1
TPCABND  EQU   TPCFLGS1
TPCTPCA  EQU   IEATPC
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBFCBPE EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBMDRBA EQU   UCBMDRBF+1
UCBRV075 EQU   UCBMDRBF
UCBRV074 EQU   UCB3800X+32
UCBIMAGE EQU   UCB3800X+28
UCBFCBNM EQU   UCB3800X+24
UCBCHAR4 EQU   UCB3800X+20
UCBCHAR3 EQU   UCB3800X+16
UCBCHAR2 EQU   UCB3800X+12
UCBCHAR1 EQU   UCB3800X+8
UCBCGMID EQU   UCB3800X+4
UCBBRSTA EQU   UCBACTIV
UCBRV063 EQU   UCBACTIV
UCBRV062 EQU   UCBACTIV
UCBRV061 EQU   UCBACTIV
UCBRV060 EQU   UCBACTIV
UCBRV059 EQU   UCBACTIV
UCBRV058 EQU   UCBACTIV
UCBRV057 EQU   UCBACTIV
UCBRV050 EQU   UCB3800X+2
UCBCGMNO EQU   UCB3800X+1
UCBRV083 EQU   UCBOPTNS
UCBBRSTR EQU   UCBOPTNS
UCBRV056 EQU   UCBOPTNS
UCBRV055 EQU   UCBOPTNS
UCBRV054 EQU   UCBOPTNS
UCBRV053 EQU   UCBOPTNS
UCBRV052 EQU   UCBOPTNS
UCBRV051 EQU   UCBOPTNS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBMIHTI EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBERLOG EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBINHIO EQU   UCBFLP1
UCBNSWAP EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00086
UCBHALI  EQU   @NM00086
UCBRSV09 EQU   @NM00086
UCBRSV08 EQU   @NM00086
UCBRSV07 EQU   @NM00086
UCBRSV06 EQU   @NM00086
UCBRSV05 EQU   @NM00086
UCBRSV04 EQU   @NM00086
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCB3TAPE EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBRV029 EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBSIGP  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBMMSGP EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBDUC   EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBPXST  EQU   UCB+504
@NM00083 EQU   UCB
@NM00079 EQU   SDWA+512
@NM00078 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
@NM00077 EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00076 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00075 EQU   SDWADDAT+3
@NM00074 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00073 EQU   SDWADDAT+1
@NM00072 EQU   SDWASDAT
SDWAQQS  EQU   SDWASDAT
SDWACBS  EQU   SDWASDAT
SDWAGTF  EQU   SDWASDAT
SDWASWA  EQU   SDWASDAT
SDWALSQA EQU   SDWASDAT
SDWASQA  EQU   SDWASDAT
SDWANUC  EQU   SDWASDAT
@NM00071 EQU   SDWADUMP+2
@NM00070 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00069 EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
@NM00068 EQU   SDWA+290
SDWAASID EQU   SDWA+288
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00067 EQU   SDWAACF3
@NM00066 EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
@NM00065 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00064 EQU   SDWAACF2
SDWARCDE EQU   SDWAPARQ
SDWALCPU EQU   SDWACPUA+2
@NM00063 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
SDWARTYA EQU   SDWA+240
@NM00062 EQU   SDWA+239
@NM00061 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
@NM00060 EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
SDWACLUP EQU   SDWAERRD
@NM00059 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAPERC EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00058 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWAMCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00057 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00056 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00055 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00054 EQU   SDWAINC2
@NM00053 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00052 EQU   SDWAILC2
@NM00051 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00050 EQU   SDWANXT2
@NM00049 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00048 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00047 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00046 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00045 EQU   SDWAINC1
@NM00044 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00043 EQU   SDWAILC1
@NM00042 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00041 EQU   SDWANXT1
@NM00040 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00039 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00038 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00037 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00036 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00035 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00034 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
SDWACMPC EQU   SDWAABCC+1
@NM00033 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00032 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAREQ  EQU   SDWACMPF
PWACCTHB EQU   PWA+992
PWAPTTHB EQU   PWA+976
PWATCTHB EQU   PWA+960
PWAIVTHB EQU   PWA+944
PWASDTHB EQU   PWA+928
PWAPDTHB EQU   PWA+912
PWANRSRB EQU   PWA+868
PWACCSRB EQU   PWA+824
PWAWRK   EQU   PWA+792
PWATEST  EQU   PWA+784
PWACPUAD EQU   PWA+782
@NM00031 EQU   PWA+781
PWACNTR  EQU   PWA+780
@NM00030 EQU   PWAFLAGS
PWAENABL EQU   PWAFLAGS
PWANRHED EQU   PWAFLAGS
PWACCHED EQU   PWAFLAGS
PWAREST  EQU   PWAFLAGS
PWAINIT  EQU   PWA+777
PWAMFAFL EQU   PWA+776
PWARPSW  EQU   PWA+768
PWARGPR  EQU   PWA+704
PWACR15  EQU   PWA+700
PWACR14  EQU   PWA+696
PWASFLC  EQU   PWA+464
PWAINTC  EQU   PWA+456
PWASOSW  EQU   PWA+448
PWAFRR00 EQU   PWAFRR+12
PWAFRR15 EQU   PWAFRR+8
PWAFRR13 EQU   PWAFRR+4
PWAFRR12 EQU   PWAFRR
PWAFRRCT EQU   PWA+380
PWAFRRCD EQU   PWA+376
PWADGTHB EQU   PWA+368
PWASRTHB EQU   PWA+360
PWAESA   EQU   PWA+288
PWASA4   EQU   PWA+216
PWASA3   EQU   PWA+144
PWASA2   EQU   PWA+72
PWASA1   EQU   PWA
CATEND   EQU   CAT+8
CATCHID  EQU   CAT+4
CATSIOCT EQU   CAT+2
CATFLARS EQU   CATFLA
CATBSY   EQU   CATFLA
CATFLG7  EQU   CATFLG
CATFLG6  EQU   CATFLG
CATFLG5  EQU   CATFLG
CATNID   EQU   CATFLG
CATNCPU  EQU   CATFLG
CATNGEN  EQU   CATFLG
CATRES1  EQU   CATFLG
@NM00029 EQU   PCCA+512
PCCARV36 EQU   PCCA+380
PCCARV35 EQU   PCCA+378
PCCARV01 EQU   PCCA+377
PCCAR105 EQU   PCCAATTR
PCCAR104 EQU   PCCAATTR
PCCAR103 EQU   PCCAATTR
PCCAR102 EQU   PCCAATTR
PCCAR101 EQU   PCCAATTR
PCCAR100 EQU   PCCAATTR
PCCAIO   EQU   PCCAATTR
PCCACPUM EQU   PCCAATTR
PCCARV63 EQU   PCCA+372
PCCARV62 EQU   PCCA+368
PCCARV61 EQU   PCCA+364
PCCARV60 EQU   PCCA+360
PCCARV59 EQU   PCCA+356
PCCARV58 EQU   PCCA+352
PCCARV57 EQU   PCCA+348
PCCARV56 EQU   PCCA+344
PCCARV55 EQU   PCCA+340
PCCARV54 EQU   PCCA+336
PCCALOGA EQU   PCCA+332
PCCACHID EQU   PCCA+324
PCCACHSV EQU   PCCA+312
PCCARV79 EQU   PCCACHF4
PCCARV78 EQU   PCCACHF4
PCCARV77 EQU   PCCACHF4
PCCARV76 EQU   PCCACHF4
PCCARV75 EQU   PCCACHF4
PCCARV74 EQU   PCCACHF4
PCCARV73 EQU   PCCACHF4
PCCARV72 EQU   PCCACHF4
PCCARV71 EQU   PCCACHF3
PCCARV70 EQU   PCCACHF3
PCCARV69 EQU   PCCACHF3
PCCARV68 EQU   PCCACHF3
PCCARV67 EQU   PCCACHF3
PCCARV66 EQU   PCCACHF3
PCCASLCK EQU   PCCACHF3
PCCAISRB EQU   PCCACHF3
PCCACF28 EQU   PCCACHF2
PCCACF27 EQU   PCCACHF2
PCCACF26 EQU   PCCACHF2
PCCACF25 EQU   PCCACHF2
PCCACF24 EQU   PCCACHF2
PCCACF23 EQU   PCCACHF2
PCCACF22 EQU   PCCACHF2
PCCACF21 EQU   PCCACHF2
PCCACF18 EQU   PCCACHF1
PCCACF17 EQU   PCCACHF1
PCCACF16 EQU   PCCACHF1
PCCACF15 EQU   PCCACHF1
PCCACF14 EQU   PCCACHF1
PCCACF13 EQU   PCCACHF1
PCCACF12 EQU   PCCACHF1
PCCACF11 EQU   PCCACHF1
PCCARV05 EQU   PCCA+307
PCCACHPB EQU   PCCA+306
PCCALGP2 EQU   PCCA+305
PCCALGP1 EQU   PCCA+304
PCCACELL EQU   PCCA+302
PCCALOGL EQU   PCCA+300
PCCACHW2 EQU   PCCA+296
PCCACHW1 EQU   PCCA+292
PCCAIOSI EQU   PCCA+291
PCCACNRB EQU   PCCACHRB
PCCACCVB EQU   PCCACHRB
PCCACSNB EQU   PCCACHRB
PCCARV52 EQU   PCCACHRB
PCCACHIB EQU   PCCACHRB
PCCACTIB EQU   PCCACHRB
PCCACINB EQU   PCCACHRB
PCCACSIB EQU   PCCACHRB
PCCARV51 EQU   PCCACHS2
PCCARV50 EQU   PCCACHS2
PCCACCRA EQU   PCCACHS2
PCCACURC EQU   PCCACHS2
PCCACNLG EQU   PCCACHS2
PCCACMOD EQU   PCCACHS2
PCCACALT EQU   PCCACHS2
PCCACIOR EQU   PCCACHS2
PCCARV47 EQU   PCCACHS1
PCCACUCB EQU   PCCACHS1
PCCACIBC EQU   PCCACHS1
PCCACAND EQU   PCCACHS1
PCCACNLS EQU   PCCACHS1
PCCACFRR EQU   PCCACHS1
PCCACNRE EQU   PCCACHS1
PCCACCMP EQU   PCCACHS1
PCCACSEQ EQU   PCCACHTS
PCCACDIN EQU   PCCACHTS
PCCARV44 EQU   PCCACHTS
PCCARV43 EQU   PCCACHTS
PCCACTEC EQU   PCCACHTS
PCCACDAV EQU   PCCACHVA
PCCACCHV EQU   PCCACHVA
PCCACCMD EQU   PCCACHVA
PCCACUNS EQU   PCCACHVA
PCCACSQV EQU   PCCACHVA
PCCARV42 EQU   PCCACHVA
PCCARV41 EQU   PCCACHVA
PCCACITF EQU   PCCACHVA
PCCARV40 EQU   PCCACHBL
PCCARV39 EQU   PCCACHBL
PCCARV38 EQU   PCCACHBL
PCCACCUE EQU   PCCACHBL
PCCACSTG EQU   PCCACHBL
PCCACSCU EQU   PCCACHBL
PCCACCPU EQU   PCCACHBL
PCCACCNT EQU   PCCACHPF
PCCACSNS EQU   PCCACHPF
PCCARV37 EQU   PCCACHPF
PCCACHIO EQU   PCCACHPF
PCCACTIO EQU   PCCACHPF
PCCACINT EQU   PCCACHPF
PCCACSIO EQU   PCCACHPF
PCCAR106 EQU   PCCA+228
PCCAR113 EQU   PCCA+226
PCCAR112 EQU   PCCACHAN
PCCAR111 EQU   PCCACHAN
PCCAR110 EQU   PCCACHAN
PCCAR109 EQU   PCCACHAN
PCCAR108 EQU   PCCACHAN
PCCAR107 EQU   PCCACHAN
PCCASRB  EQU   PCCA+180
PCCACCHM EQU   PCCA+176
PCCAELBA EQU   PCCA+172
PCCALRBR EQU   PCCA+164
PCCALRBV EQU   PCCA+160
PCCAPWAR EQU   PCCA+156
PCCAEMSA EQU   PCCAEMSB+12
PCCAEMSE EQU   PCCAEMSB+8
PCCAEMSP EQU   PCCAEMSB+4
PCCARMS  EQU   PCCARMSB
PCCARV34 EQU   PCCARMSB
PCCARV33 EQU   PCCARMSB
PCCARV32 EQU   PCCARMSB
PCCARV31 EQU   PCCARMSB
PCCARV30 EQU   PCCARMSB
PCCARV29 EQU   PCCARMSB
PCCARV28 EQU   PCCARMSB
PCCARV27 EQU   PCCAEMS3
PCCARV26 EQU   PCCAEMS3
PCCARV25 EQU   PCCAEMS3
PCCARV24 EQU   PCCAEMS3
PCCARV23 EQU   PCCAEMS3
PCCARV22 EQU   PCCAEMS3
PCCARV21 EQU   PCCAEMS3
PCCARV20 EQU   PCCAEMS3
PCCARV19 EQU   PCCAEMS2
PCCARV18 EQU   PCCAEMS2
PCCARV17 EQU   PCCAEMS2
PCCARV16 EQU   PCCAEMS2
PCCARV15 EQU   PCCAEMS2
PCCARV14 EQU   PCCAEMS2
PCCARV13 EQU   PCCAEMS2
PCCARV12 EQU   PCCAEMS2
PCCARV11 EQU   PCCARISP
PCCARV10 EQU   PCCARISP
PCCARV09 EQU   PCCARISP
PCCARV08 EQU   PCCARISP
PCCARV07 EQU   PCCARISP
PCCARV06 EQU   PCCARISP
PCCASERL EQU   PCCARISP
PCCAPARL EQU   PCCARISP
PCCARPB  EQU   PCCA+132
PCCACTIN EQU   PCCAINTE
PCCANFIN EQU   PCCAINTE
PCCANUIN EQU   PCCAINTE
PCCACTCC EQU   PCCACCE
PCCANFCC EQU   PCCACCE
PCCANUCC EQU   PCCACCE
PCCACTTD EQU   PCCATODE
PCCANFTD EQU   PCCATODE
PCCANUTD EQU   PCCATODE
PCCARV04 EQU   PCCATMFL
PCCARV03 EQU   PCCATMFL
PCCARV02 EQU   PCCATMFL
PCCAMINT EQU   PCCATMFL
PCCAMCC  EQU   PCCATMFL
PCCAVKIL EQU   PCCATMFL
PCCASYNC EQU   PCCATMFL
PCCAINIT EQU   PCCATMFL
PCCARV9E EQU   PCCA+124
PCCARV9D EQU   PCCA+120
PCCARV9C EQU   PCCA+116
PCCARV9B EQU   PCCA+112
PCCARV9A EQU   PCCA+108
PCCARV99 EQU   PCCA+104
PCCARV98 EQU   PCCA+100
PCCARV97 EQU   PCCA+96
PCCARV96 EQU   PCCA+92
PCCARV95 EQU   PCCA+88
PCCARV94 EQU   PCCA+84
PCCARV93 EQU   PCCA+80
PCCARV92 EQU   PCCA+76
PCCARV91 EQU   PCCA+72
PCCARV90 EQU   PCCA+68
PCCARV89 EQU   PCCA+64
PCCARV88 EQU   PCCA+60
PCCARV87 EQU   PCCA+56
PCCARV86 EQU   PCCA+52
PCCARV85 EQU   PCCA+48
PCCARV84 EQU   PCCA+44
PCCARV83 EQU   PCCA+40
PCCARV82 EQU   PCCA+36
PCCARV81 EQU   PCCA+32
PCCAPSAR EQU   PCCA+28
PCCAPSAV EQU   PCCA+24
PCCATQEP EQU   PCCA+20
PCCACPID EQU   PCCA+4
PCCAPCCA EQU   PCCA
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00002 EQU   CVTFIX+248
@NM00001 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTSVDCB EQU   CVTMAP+84
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00157 EQU   SRB+40
@NM00156 EQU   SRB+38
SRBPRIOR EQU   SRB+37
SRBPKF   EQU   SRB+36
SRBSAVE  EQU   SRB+32
SRBPTCB  EQU   SRBFLC+4
SRBPASID EQU   SRBFLC+2
SRBFLNK  EQU   SRB+4
LRBHMCEL EQU   LRBHCPID+6
LRBHMDL  EQU   LRBHCPID+4
LRBHCSER EQU   LRBHCPID+1
@NM00128 EQU   LRBHCPID
LRBHTIME EQU   LRB+12
LRBHDATE EQU   LRB+8
@NM00127 EQU   LRB+7
LRBHCNT  EQU   LRB+6
LRBMCLB  EQU   LRBHSW3
LRBNDEM  EQU   LRBMACT
LRBNCEM  EQU   LRBMACT
@NM00126 EQU   LRBHSW0
LRBHTMC  EQU   LRBHSW0
@NM00125 EQU   LRBHSW0
LRBHNS   EQU   LRBHSW0
LRBHMORE EQU   LRBHSW0
@NM00124 EQU   LRBHSYS
LRBHSYSB EQU   LRBHSYS
TQESTCKR EQU   TQESTCK+4
TQESTCKL EQU   TQESTCK
TQERSAVE EQU   TQE+116
@NM00082 EQU   TQE+89
@NM00081 EQU   TQEFLGS3
TQEDIE   EQU   TQEFLGS3
TQEDREGS EQU   TQESRB
TQELHPSW EQU   TQE+40
TQEASCB  EQU   TQE+36
TQETCB   EQU   TQE+32
TQESADDR EQU   TQE+24
TQEVALRH EQU   TQEVAL+4
TQEVALLH EQU   TQEVAL
TQEMIDN  EQU   TQEFLGS2
TQEMF1   EQU   TQEFLGS2
TQEOPT   EQU   TQEFLGS2
TQELM    EQU   TQEFLGS2
TQEDUM   EQU   TQEFLGS2
TQECRH   EQU   TQEFLGS2
TQEUSER  EQU   TQEFLGS2
TQECOMP  EQU   TQEFLGS2
TQETYPE  EQU   TQEFLGS
TQEXITSP EQU   TQEFLGS
TQEINCOM EQU   TQEFLGS
TQEWLIM  EQU   TQEFLGS
@NM00080 EQU   TQEFLGS
TQETOD   EQU   TQEFLGS
TQEOFF   EQU   TQEFLGS
TQEAID   EQU   TQE+12
TQEBLNK  EQU   TQE+8
TQEFLNK  EQU   TQE+4
TQETQE   EQU   TQE
@NM00028 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00027 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00026 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00025 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSAULCMS EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSAPCCAR EQU   PSA+524
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00024 EQU   FLCFSA
@NM00023 EQU   FLCMCLA+77
PSAMDISC EQU   PSAMEDC
PSAMINTR EQU   PSAMEDC
PSAMINST EQU   PSAMEDC
PSAMCCF  EQU   PSAMEDC
PSAMCNOP EQU   PSAMEDC
PSAMEXSR EQU   PSAMEDC
PSAMCOPR EQU   PSAMEDC
@NM00022 EQU   PSAMEDC
@NM00021 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00020 EQU   FLCMCLA+20
@NM00019 EQU   FLCIOA
@NM00018 EQU   FLCMCLA+15
@NM00017 EQU   FLCMCLA+14
@NM00016 EQU   FLCMCLA+12
FLCIOELA EQU   FLCIOEL+1
@NM00015 EQU   FLCIOEL
FLCCHIL  EQU   FLCCHNID+2
FLCCHMOD EQU   FLCCHTM
FLCCHTYP EQU   FLCCHTM
@NM00014 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00013 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00012 EQU   FLCPER
@NM00011 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00010 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00009 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00008 EQU   FLCPIILC
@NM00007 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00006 EQU   FLCSVILC
@NM00005 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00004 EQU   PSA+128
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00003 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
*                                      END UNREFERENCED COMPONENTS
@RC00260 EQU   @RC00258
@RC00298 EQU   @RC00296
@RT00308 EQU   RELOADWT
@RT00333 EQU   STILHUNG
@RC00500 EQU   @RC00453
@RC00732 EQU   @RC00714
@RT00798 EQU   EXIT
@RT00806 EQU   EXIT
@RT00818 EQU   DOTIO
@RT00829 EQU   DOSIO
@RT00831 EQU   BUSY
@RT00835 EQU   DOTIO
@RF00882 EQU   EXIT
@RT00936 EQU   RELOADIT
@RT00955 EQU   RELDIT
@PB00010 EQU   @PB00011
@RC00265 EQU   @RC00260
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@RC00642 EQU   @PB00005
@ENDDATA EQU   *
         END   IECVIRST,(C'PLS1735',0701,78009)
