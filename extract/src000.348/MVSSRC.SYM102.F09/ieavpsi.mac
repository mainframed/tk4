 TITLE 'IEAVPSI -- PAGE SERVICES INTERFACE ROUTINE'
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVPSI
*
*02*     CSECT-NAME = IEAVPSI
*
*01*  DESCRIPTIVE-NAME = PAGE SERVICES INTERFACE (PSI) MODULE
*
*01*   COPYRIGHT = NONE
*
*01*   STATUS = OS/VS2 RELEASE 3.7 WITH SU7
*               PTF LEVEL UZ09817
*
*01*  FUNCTION = THIS MODULE RECEIVES ALL PAGE SERVICE REQUESTS, BOTH
*     SVC AND BRANCH ENTRY. THE REQUESTS SERVICED ARE PGFIX, PGFREE,
*     PGLOAD, PGRLSE, AND PGOUT. THIS MODULE CHECKS INPUT PARAMETERS
*     FOR ERRORS AND ROUTES CONTROL BETWEEN THE PAGE SERVICES MODULES
*     NECESSARY TO SATISFY THE INPUT REQUEST.
*
*02*     OPERATION = THIS MODULE CREATES AN FRR RECOVERY ENVIRONMENT
*        UPON ENTRY TO HANDLE ANY UNEXPECTED ERRORS THAT COULD ARISE.
*        THESE WOULD BE ASSUMED TO BE ERRORS CAUSED BY USER SUPPLIED
*        DATA. THE ROUTINE WORKS ALMOST EXCLUSIVELY WITH THE USER
*        SUPPLIED PARAMETERS.
*
*01*   NOTES = ALL ENTRY POINTS IN THIS MODULE SET UP A COMMON WORK
*      AREA (CIWA) KNOWN TO ALL PAGE SERVICES MODULES.
*
*02*     DEPENDENCIES = THIS MODULE WILL RUN ON ANY VS2 RELEASE 2 LEVEL
*        HARDWARE/SOFTWARE CONFIGURATION. LOCKS REQUIRED AT ENTRY ARE
*        DISCUSSED SEPARATELY FOR EACH ENTRY POINT.
*
*03*        CHARACTER-CODE-DEPENDENCIES = NONE
*
*02*     RESTRICTIONS = NONE
*
*02*     REGISTER-CONVENTIONS = SEE REGISTER EQUATES BELOW
*
*02*     PATCH-LABEL = NUCLEUS PATCH AREA
*
*01*  MODULE-TYPE = PROCEDURE
*
*02*     PROCESSOR = ASSEMBLER-S370R
*
*02*     MODULE-SIZE = 2700 BYTES
*
*02*     ATTRIBUTES = NUCLEUS, ZERO PROTECT KEY, DISABLED, REUSABLE,
*        SUPERVISOR MODE, REFRESHABLE
*
*01*  ENTRY-POINT = IGC112
*
*02*     PURPOSE = ENTERED FROM SVC FLIH AS A RESULT OF THE ISSUANCE OF
*        AN SVC INSTRUCTION GENERATED BY THE PGRLSE MACRO INSTRUCTION.
*
*02*     LINKAGE = BALR
*
*02*     INPUT =
*          LOCKS HELD: LOCAL LOCK
*          R0: LOW ADDRESS OF VIRTUAL AREA TO BE RELEASED
*          R1: HIGH ADDRESS OF VIRTUAL AREA TO BE RELEASED
*          R2: IRRELEVANT
*          R3: CVT ADDRESS
*          R4: TCB ADDRESS
*          R5: RB ADDRESS
*          R6: ENTRY POINT ADDRESS
*          R7: ASCB ADDRESS
*          R8-R13: IRRELEVANT
*          R14: RETURN ADDRESS
*          R15: IRRELEVANT
*
*02*     OUTPUT = NO STREAM OR LIST OUTPUT
*
*02*     REGISTERS-SAVED = 14
*
*02*     REGISTERS-RESTORED = 14
*
*01*  EXIT-NORMAL = RETURN
*
*02*     CONDITIONS = USER'S REQUEST SATISFIED WITH NO ERRORS. RETURN
*        IS MADE USING REGISTER 14.
*
*02*     OUTPUT =
*          LOCKS HELD: LOCAL LOCK
*          R0-R13: UNPREDICTABLE
*          R14: UNCHANGED
*          R15: RETURN CODE
*
*02*     RETURN-CODES =
*          0 - REQUEST SATISFIED SUCCESSFULLY
*
*01*  EXIT-ERROR = RETURN4
*
*02*     CONDITIONS = THE USER WAS NOT ALLOWED TO RELEASE PAGES
*        SPECIFIED OR PROCESSING COULD NOT BE PERFORMED BY RSM BECAUSE
*        OF BAD INPUT PARAMETERS OR SYSTEM CONDITIONS. RETURN IS MADE
*        USING REGISTER 14.
*
*02*     OUTPUT =
*          LOCKS HELD: LOCAL LOCK
*          R0-R13: UNPREDICTABLE
*          R14: UNCHANGED
*          R15: RETURN CODE
*
*02*     RETURN-CODES =
*          4 - REQUEST NOT HONORED
*
*01*  ENTRY-POINT = IGC113
*
*02*     PURPOSE = ENTERED FROM SVC FLIH AS THE RESULT OF THE ISSUANCE
*        OF AN SVC INSTRUCTION GENERATED BY A PGFIX, PGFREE, PGLOAD, OR
*        PGOUT MACRO INSTRUCTION.
*
*02*     LINKAGE = BALR
*
*02*     INPUT =
*          LOCKS HELD: LOCAL LOCK
*          R0: ECB ADDRESS OR ZERO    --- NOTE: THE ECB ADDRESS MUST BE
*                  A POSITIVE VALUE. IN OS/VS2 RELEASE 1, THE
*                  NEGATIVE ECB ADDRESS WAS USED TO INDICATE THE
*                  'ECBIND' OPTION OF THE PAGE SERVICES. THIS MODE OF
*                  OPERATION IS NOT SUPPORTED BY THIS VERSION OF THE
*                  INTERFACE MODULE, THEREFORE, A NEGATIVE ECB ADDRESS
*                  IS TREATED AS AN INPUT PARAMETER ERROR.
*          R1,R15: IF BYTE 0 BIT 0 OF R1=1, THEN R1 CONTAINS A POINTER
*                  TO A VIRTUAL SUBAREA LIST (VSL) AND R15 IS
*                  IRRELEVANT.
*                  IF BYTE 0, BIT 0 OF R1=0, THEN R1 AND R15 CONTAIN A
*                  VSL ENTRY.
*          R2: IRRELEVANT
*          R3: CVT ADDRESS
*          R4: TCB ADDRESS
*          R5: RB ADDRESS
*          R6: ENTRY POINT ADDRESS
*          R7: ASCB ADDRESS
*          R8-R13: IRRELEVANT
*          R14: RETURN ADDRESS
*
*02*     OUTPUT = NO STREAM OR LIST OUTPUT
*
*02*     REGISTERS-SAVED = 14
*
*02*     REGISTERS-RESTORED = 14
*
*01*  EXIT-NORMAL = EXITRTN
*
*02*     CONDITIONS = THE INPUT REQUEST HAS BEEN SATISFIED OR IS IN THE
*        PROCESS OF BEING SATISFIED IF PAGING I/O WAS REQUIRED. RETURN
*        IS MADE USING REGISTER 14.
*
*02*     OUTPUT =
*          LOCKS HELD: UNCHANGED FROM ENTRY
*          R0-R13: UNPREDICTABLE
*          R14: UNCHANGED
*          R15: RETURN CODE
*
*          ECB: UNCHANGED IF RETURN CODE = 8. OTHERWISE, POSTED
*               COMPLETE WITH POST CODE
*               0 - OPERATION COMPLETED SUCCESSFULLY.
*
*               IF RETURN CODE = 8, POSTED COMPLETE WHEN PAGING I/O
*               COMPLETES WITH POST CODE
*               0 - OPERATION COMPLETED SUCCESSFULLY.
*               4 - OPERATION TERMINATED ABNORMALLY.
*
*02*     RETURN-CODES =
*          0 - OPERATION COMPLETED SUCCESSFULLY; ECB HAS BEEN POSTED
*              IF PASSED AS INPUT.
*          8 - OPERATION PROCEEDING; ECB WILL BE POSTED WHEN PAGING I/O
*              COMPLETES.
*
*01*  EXIT-ERROR = EXITRTN
*
*02*     CONDITIONS = THE INPUT REQUEST WAS IN ERROR FOR ONE OF THE
*        REASONS LISTED WITH EACH RETURN CODE. THIS RETURN CODE IS
*        LOADED INTO REGISTER 15 BEFORE THE ABEND IS ISSUED. EXIT IS
*        MADE VIA THE ABEND MACRO INSTRUCTION.
*
*02*     OUTPUT =
*          LOCKS HELD: UNCHANGED FROM ENTRY
*          R0-R13: UNPREDICTABLE
*          R14: UNCHANGED
*          R15: RETURN CODE
*
*          VSL: IF A LIST FORM ENTRY WAS USED AND THE RETURN
*               CODE = 4, THE VSL ENTRY CONTAINING THE BAD ADDRESS IS
*               FLAGGED IN ERROR. ALL OTHER ENTRIES ARE UNCHANGED.
*               OTHERWISE, ALL ENTRIES ARE UNCHANGED.
*
*          ECB: POSTED COMPLETE WITH A POST CODE OF 4 IF THE RETURN
*               CODE = 4. OTHERWISE, UNCHANGED.
*
*02*     RETURN-CODES =
*          4 - OPERATION NOT DONE; INVALID ADDRESS IN VSL ENTRY OR
*              REGISTER. ECB HAS BEEN POSTED COMPLETE. ABEND IS ISSUED
*              FOR THE REQUESTOR'S TCB.
*         16 - INPUT PARAMETER ERROR. EITHER AN INVALID COMBINATION
*              OF OPERATION OR OPTION FLAGS WAS SPECIFIED ON ENTRY, OR
*              THE VSL, ECB OR TCB ADDRESSES WERE INVALID IF SUPPLIED.
*              NO ECB IS POSTED IN THIS CASE. ABEND IS ISSUED FOR THE
*              REQUESTOR'S TCB.
*              BEFORE ABENDING THE CALLER, THESE REGISTERS ARE
*              LOADED TO PERMIT DIAGNOSIS OF THE PARAMETER ERROR
*              FROM DATA IN THE STORAGE DUMP. (X'171' ABEND ONLY)
*                R11: THE ADDRESS OF THE INPUT VSL LIST OR 0 (R-FORM)
*                R12: THE ADDRESS OF THE INPUT ECB.
*                R13-R14: THE CURRENT VSL ENTRY BEING PROCESSED.
*                R15: THE RETURN CODE.
*
*01*  ENTRY-POINT = IEAVPSIB
*
*02*     PURPOSE = BRANCH ENTERED FROM A SUPERVISOR STATE, KEY 0
*        ROUTINE DESIRING A PAGE SERVICES FUNCTION.
*
*02*     LINKAGE = BALR
*
*02*     INPUT =
*          LOCKS HELD: LOCAL LOCK
*          R0: ECB ADDRESS OR ZERO    --- NOTE: THE ECB ADDRESS MUST BE
*                  A POSITIVE VALUE. IN OS/VS2 RELEASE 1, THE
*                  NEGATIVE ECB ADDRESS WAS USED TO INDICATE THE
*                  'ECBIND' OPTION OF THE PAGE SERVICES. THIS MODE OF
*                  OPERATION IS NOT SUPPORTED BY THIS VERSION OF THE
*                  INTERFACE MODULE, THEREFORE, A NEGATIVE ECB ADDRESS
*                  IS TREATED AS AN INPUT PARAMETER ERROR.
*          R1,R2: IF BYTE 0 BIT 0 OF R1=1, THEN R1 CONTAINS A POINTER
*                 TO A VIRTUAL SUBAREA LIST (VSL) AND R2 IS
*                 IRRELEVANT.
*                 IF BYTE 0, BIT 0 OF R1=0, THEN R1 AND R2 CONTAIN A
*                 VSL ENTRY.
*          R3: IRRELEVANT
*          R4: TCB ADDRESS -- NOTE: IF A NULL (0) TCB ADDRESS IS GIVEN,
*           THEN THE USER MUST TAKE THE RESPONSIBILITY FOR
*           FREEING ANY PAGES FIXED AS A RESULT OF HIS PGFIX REQUEST,
*           SINCE NO FOE'S ARE CREATED WHEN A NULL TCB IS PRESENTED.
*           FOR PGFIX, PGLOAD AND PGOUT REQUESTS, THE USER SHOULD KNOW
*           THAT PAGING I/O REQUESTS MADE WITH A ZERO TCB ADDRESS
*           CANNOT BE RELATED TO ANY GIVEN TASK AND WILL NOT BE PURGED
*           AT TASK TERMINATION. A ZERO TCB ADDRESS FOR PGRLSE HAS NO
*           EFFECT.
*
*          R5-R13: IRRELEVANT
*          R14: RETURN ADDRESS
*          R15: ENTRY POINT ADDRESS
*
*02*     OUTPUT = NO STREAM OR LIST OUTPUT
*
*02*     REGISTERS-SAVED = 0 - 14  (USES RSM LOCAL SAVE AREA)
*
*02*     REGISTERS-RESTORED = 0 - 14
*
*01*  EXIT-NORMAL = EXITRTN
*
*02*     CONDITIONS = SAME AS ENTRY POINT IGC113
*
*02*     OUTPUT =
*          LOCKS HELD: UNCHANGED FROM ENTRY
*          R0-R14: UNCHANGED
*          R15: RETURN CODE
*
*          VSL: SAME AS NORMAL EXIT FROM ENTRY POINT IGC113
*
*          ECB: SAME AS NORMAL EXIT FROM ENTRY POINT IGC113
*
*02*     RETURN-CODES = SAME AS NORMAL EXIT FROM ENTRY POINT IGC113
*
*01*  EXIT-ERROR = EXITRTN
*
*02*     CONDITIONS = SAME AS ENTRY POINT IGC113
*
*02*     OUTPUT =
*          LOCKS HELD: UNCHANGED FROM ENTRY
*          R0-R14: UNCHANGED
*          R15: RETURN CODE
*
*          VSL: SAME AS ERROR EXIT FROM ENTRY POINT IGC113
*
*          ECB: SAME AS ERROR EXIT FROM ENTRY POINT IGC113
*
*02*     RETURN-CODES = SAME AS ERROR EXIT FROM ENTRY POINT IGC113
*
*01*  ENTRY-POINT = IEAVPSIX
*
*02*     PURPOSE = BRANCH ENTERED FROM THE I/O SUPERVISOR
*        IN KEY ZERO, SUPERVISOR STATE FOR AN R-FORM PAGEFIX.
*
*02*     LINKAGE = BALR
*
*02*     INPUT =
*          LOCKS HELD: LOCAL LOCK
*          R0: ECB ADDRESS    --- NOTE: THE ECB ADDRESS IS
*                  ASSUMED TO BE A POSITIVE VALUE.
*          R1,R2: TOGETHER CONTAIN A VIRTUAL SUBAREA LIST (VSL).
*          R3-R13: IRRELEVANT
*          R14: RETURN ADDRESS
*          R15: ENTRY POINT ADDRESS
*
*02*     OUTPUT = NO STREAM OR LIST OUTPUT
*
*02*     REGISTERS-SAVED = 0 - 14  (USES RSM LOCAL SAVE AREA)
*
*02*     REGISTERS-RESTORED = 0 - 14
*
*01*  EXIT-NORMAL = EXITRTN
*
*02*     CONDITIONS = SAME AS ENTRY POINT IGC113
*
*02*     OUTPUT =
*          LOCKS HELD: UNCHANGED FROM ENTRY
*          R0-R14: UNCHANGED
*          R15: RETURN CODE
*
*          ECB: SAME AS NORMAL EXIT FROM ENTRY POINT IGC113
*
*02*     RETURN-CODES = SAME AS NORMAL EXIT FROM ENTRY POINT IGC113
*
*01*  EXIT-ERROR = EXITRTN
*
*02*     CONDITIONS = SAME AS ENTRY POINT IGC113
*
*02*     OUTPUT =
*          LOCKS HELD: UNCHANGED FROM ENTRY
*          R0-R14: UNCHANGED
*          R15: RETURN CODE
*
*          ECB: SAME AS ERROR EXIT FROM ENTRY POINT IGC113
*
*02*     RETURN-CODES = SAME AS ERROR EXIT FROM ENTRY POINT IGC113
*
*01*  ENTRY-POINT = IEAVPSIF
*
*02*     PURPOSE = BRANCH ENTERED FROM THE I/O SUPERVISOR
*        IN KEY ZERO, SUPERVISOR STATE FOR AN L-FORM PAGEFREE.
*
*02*     LINKAGE = BALR
*
*02*     INPUT =
*          LOCKS HELD: LOCAL LOCK
*          R0: IRRELEVANT
*          R1: CONTAINS THE ADDRESS OF A VIRTUAL SUBAREA LIST (VSL).
*          R2-R13: IRRELEVANT
*          R14: RETURN ADDRESS
*          R15: ENTRY POINT ADDRESS
*
*02*     OUTPUT = NO STREAM OR LIST OUTPUT
*
*02*     REGISTERS-SAVED = 0 - 14  (USES RSM LOCAL SAVE AREA)
*
*02*     REGISTERS-RESTORED = 0 - 14
*
*01*  EXIT-NORMAL = EXITRTN
*
*02*     CONDITIONS = SAME AS ENTRY POINT IGC113
*
*02*     OUTPUT =
*          LOCKS HELD: UNCHANGED FROM ENTRY
*          R0-R14: UNCHANGED
*          R15: RETURN CODE
*
*          VSL: SAME AS NORMAL EXIT FROM ENTRY POINT IGC113
*
*02*     RETURN-CODES = SAME AS NORMAL EXIT FROM ENTRY POINT IGC113
*
*01*  EXIT-ERROR = EXITRTN
*
*02*     CONDITIONS = SAME AS ENTRY POINT IGC113
*
*02*     OUTPUT =
*          LOCKS HELD: UNCHANGED FROM ENTRY
*          R0-R14: UNCHANGED
*          R15: RETURN CODE
*
*          VSL: SAME AS ERROR EXIT FROM ENTRY POINT IGC113
*
*02*     RETURN-CODES = SAME AS ERROR EXIT FROM ENTRY POINT IGC113
*
*01*  ENTRY-POINT = IEAVPSII
*
*02*     PURPOSE = BRANCH ENTERED FROM ANOTHER RSM ROUTINE REQUIRING A
*        PAGE SERVICES FUNCTION.
*
*02*     LINKAGE = BALR
*
*02*     INPUT =
*          LOCKS HELD: LOCAL AND SALLOC LOCKS --IT SHOULD BE NOTED THAT
*           THE LOCAL LOCK IS REQUIRED IF EITHER A NON-ZERO TCB ADDRESS
*           OR A NON-ZERO ECB ADDRESS IS GIVEN.
*          R0: ZERO OR THE ADDRESS OF AN ECB RESIDING IN FIXED STORAGE.
*           -- NOTE: A SYNCHRONOUS POST MAY BE ISSUED IF A NON-ZERO ECB
*           ADDRESS IS PASSED.
*          R1,R2:  R1 AND R2 CONTAIN A VSL ENTRY.
*          R3: PVT ADDRESS
*          R4: TCB ADDRESS OR ZERO --- NOTE: FOR PGFIX OR PGFREE
*           REQUESTS, AN FOE IS CREATED/DELETED IF A TCB ADDRESS IS
*           PASSED. (THIS CAUSES A GETMAIN OR FREEMAIN TO OCCUR). IF A
*           NULL TCB ADDRESS IS PASSED, NO FOE'S ARE CREATED, AND THE
*           CALLER MUST ASSUME THE RESPONSIBILITY FOR ISSUING PGFREES
*           FOR THOSE (AND ONLY THOSE) PAGES HE HAS CAUSED TO BE FIXED
*           BY THIS NULL TCB REQUEST. ON PGOUT AND PGLOAD REQUESTS, THE
*           TCB ADDRESS IS PLACED IN ANY PCB'S CREATED, SO THAT PAGING
*           I/O MAY BE PURGED FOR THE GIVEN TASK. IF PAGING I/O SHOULD
*           NOT BE PURGED ON TASK TERMINATION (OR IF IT DOESN'T MATTER)
*           THEN A ZERO TCB ADDRESS MAY BE PASSED FOR THESE REQUESTS.
*           NOTE ALSO THAT ALTHOUGH THE TCB SERVES NO PURPOSE ON PGRLSE
*           REQUESTS, THE REGISTER MUST CONTAIN A VALID TCB ADDRESS, IF
*           A NULL ADDRESS IS NOT GIVEN.
*          R5-R13: IRRELEVANT
*          R14: RETURN ADDRESS
*          R15: ENTRY POINT ADDRESS
*
*02*     OUTPUT = NO STREAM OR LIST OUTPUT
*
*02*     REGISTERS-SAVED = 0 - 14   (USES PVTWSA4)
*
*02*     REGISTERS-RESTORED = 0 - 14
*
*01*  EXIT-NORMAL = EXITRTN
*
*02*     CONDITIONS = SAME AS ENTRY POINT IGC113
*
*02*     OUTPUT =
*          LOCKS HELD: UNCHANGED FROM ENTRY
*          R0-R14: UNCHANGED
*          R15: RETURN CODE
*
*          VSL: SAME AS NORMAL EXIT FROM ENTRY POINT IGC113
*
*          ECB: SAME AS NORMAL EXIT FROM ENTRY POINT IGC113
*
*02*     RETURN-CODES = SAME AS NORMAL EXIT FROM ENTRY POINT IGC113
*
*01*  EXIT-ERROR = EXITRTN
*
*02*     CONDITIONS = SAME AS ENTRY POINT IGC113
*
*02*     OUTPUT =
*          LOCKS HELD: UNCHANGED FROM ENTRY
*          R0-R14: UNCHANGED
*          R15: RETURN CODE
*
*          VSL: SAME AS ERROR EXIT FROM ENTRY POINT IGC113
*
*          ECB: SAME AS ERROR EXIT FROM ENTRY POINT IGC113
*
*01*  ENTRY-POINT = NEXTVSL
*
*02*     PURPOSE = BRANCH ENTERED FROM ANOTHER RSM ROUTINE REQUIRING
*        THE VALIDATION OF A VSL ENTRY IN THE CIWA.
*
*02*     LINKAGE = BALR
*
*02*     INPUT =
*          LOCKS HELD: LOCAL AND SALLOC LOCKS
*          R2: RSM HEADER ADDRESS.
*          R3: PVT ADDRESS
*          R4: CIWA ADDRESS
*          R5-R13: IRRELEVANT
*          R14: RETURN ADDRESS
*          R15: ENTRY POINT ADDRESS
*
*02*     OUTPUT = THE NEXT VSL ADDRESSED BY THE CIWA IS MOVED INTO THE
*        CIWA VSL AREA, AFTER BEING VALIDATED, AND THE NEXT VSL ADDRESS
*        IS UPDATED IN THE CIWA.
*
*02*     REGISTERS-SAVED = 5 - 9   (USES PVTSAVE)
*
*02*     REGISTERS-RESTORED = 5 - 9
*
*01*  EXIT-NORMAL = VSLDONE
*
*02*     CONDITIONS = SUCCESSFUL VALIDATION OF THE VSL.
*
*02*     OUTPUT =
*          LOCKS HELD: UNCHANGED FROM ENTRY
*          R0-R1: DESTROYED
*          R2-R14: UNCHANGED
*          R15: RETURN CODE
*
*02*     RETURN-CODES = 0  & 8 (THERE ARE NO MORE VSL ENTRIES).
*
*01*  EXIT-ERROR = ERR4
*
*02*     CONDITIONS = THE VSL DOES NOT PASS THE VALIDATION.
*
*02*     OUTPUT =
*          LOCKS HELD: UNCHANGED FROM ENTRY
*          R0-R1: UNPREDICTABLE
*          R2-R14: UNCHANGED
*          R15: RETURN CODE
*
*01*  EXTERNAL-REFERENCES =
*
*02*     ROUTINES =
*       LOCK MANAGER VIA THE SET LOCK MACRO INSTRUCTION TO GET AND FREE
*       THE SALLOC LOCK.
*
*       RECOVERY MANAGER VIA THE SETFRR MACRO INSTRUCTION TO CREATE AND
*       DELETE AN RSM FRR FROM THE FRR STACK.
*
*       POST AT ENTRY POINT IEA0PT01 TO POST A REQUESTOR'S ECB
*
*       TEST AUTHORIZATION ROUTINE VIA TESTAUTH MACRO INSTRUCTION TO
*       CHECK THE AUTHORIZATION OF PAGE SERVICES REQUESTORS
*
*       PAGE SERVICES MODULES AT ENTRY POINTS IEAVFXLD, IEAVFREE,
*       IEAVOUT, AND IEAVRELS TO SATISFY THE INPUT REQUESTS.
*
*       RSM FRR VIA ABEND MACRO
*          TO EXIT FROM THIS MODULE AS THE RESULT OF USER ERRORS, OR
*          RSM PROBLEMS IN FIXING THE INPUT ECB, OR GETTING OR
*          FREEING THE SALLOC LOCK. PSI EXPECTS THE CALLER OF PSI TO
*          BE ABENDED.
*
*02*     DATA-AREAS =
*       USER SUPPLIED VSL (VIRTUAL SUBAREA LIST).
*          IF A LIST FORM ENTRY IS USED, THE SECOND WORD OF THE VSL
*          ENTRIES MAY BE ALTERED BY PSI OR ONE OF THE PAGE SERVICES
*          MODULES.
*
*02*     CONTROL-BLOCKS =
*          CVT    R
*          TCB    ADDRESSED ONLY, NO REFERENCES MADE
*          PVT    R/W
*          PFTE   R
*          VSL    R
*          RCA    C/D/R/W
*          ASCB   R
*          ASXB   R
*          PCBR   R
*          PSA    R
*
*01*  TABLES = COMMON INTERNAL WORK AREA (CIWA)
*          THIS WORK AREA IS ALWAYS BASED ON REGISTER 4 AND INITIALIZED
*          BY THIS MODULE ON EACH PAGE SERVICES REQUEST. IT IS USED
*          EXTENSIVELY BY ALL PAGE SERVICES MODULES AS A WORK AREA AND
*          AS A COMMUNICATIONS AREA FOR DATA FLOW BETWEEN THESE MODULES
*          AND THIS MODULE.
*
*01*  MACROS =
*       EXECUTABLE MACROS
*          SETLOCK
*          SETFRR
*          TESTAUTH
*          ABEND
*
*       MAPPING MACROS
*          CVT
*          IHAPVT
*          IHAPFTE
*          IHAVSL
*          IEACIWA
*          IHARCA
*          IHAASCB
*          IHAASXB
*          IHAFRRS
*          IHAPSA
*          IHAWSAVT
*          IHAPCBR
*          IKJTCB
*          IKJRB
*
*02*    SERIALIZATION = THE GLOBAL SALLOC LOCK IS OBTAINED BY THIS
*       MODULE AND RELEASED BY THIS MODULE AT THOSE ENTRY POINTS WHERE
*       IT IS NOT HELD ON ENTRY. THE LOCAL LOCK IS ALWAYS HELD ON ENTRY
*       AND IS NEVER OBTAINED OR RELEASED BY THIS MODULE.
*
*01*  CHANGE-ACTIVITY = NEW FOR 0S/VS2 -- Y02752
*            APAR OZ19332                                      @ZA19332
*                 OZ19344                                      @ZA19344
*
*01*  MESSAGES = NONE
*
*01*  ABEND-CODES = X'028' AN RSM INTERNAL ERROR WAS DETECTED.
*                   X'171' SVC 113 PARAMETER ERRORS HAVE BEEN DETECTED.
*                   X'271' AN UNAUTHORIZED REQUEST HAS BEEN DETECTED.
*                   X'C0D' A SYSTEM ERROR HAS BEEN NOTED AND RECORDED
*
**** END OF SPECIFICATIONS ***/
         EJECT
IEAVPSI  CSECT
         MODID BR=NO
R0       EQU   0               SCRATCH REGISTER AFTER 'COMMON' ENTERED
R1       EQU   1               SCRATCH REGISTER AFTER 'COMMON' ENTERED
R2       EQU   2               SCRATCH REGISTER AFTER 'COMMON' ENTERED
R3       EQU   3               PVT ADDRESS (THROUGHOUT THE MODULE)
R4       EQU   4               CIWA ADDRESS (THROUGHOUT THE MODULE)
R5       EQU   5               RCA ADDRESS (THROUGHOUT THE MODULE)
R6       EQU   6               PROGRAM BASE REGISTER (EXCEPT NEXTVSL)
R7       EQU   7               ASCB ADDRESS (EXCEPT IN NEXTVSL
*                              AND AFTER THE ROUTER IS REACHED - WHEN
*                              IT BECOMES AN INTERNAL LINKAGE REGISTER)
R8       EQU   8               RETURN ADDRESS SAVE AREA (FOR SVC 113)
R9       EQU   9               SCRATCH -- TCB ADDRESS UP TO ROUTER
R10      EQU   10              SCRATCH -- ECB ADDRESS UP TO ROUTER
*                              NOTE THAT THE REGISTER CONTAINS THE
*                              REAL STORAGE ADDRESS OF THE ECB, ONCE
*                              THE VIRTUAL ADDRESS HAS BEEN SAVED IN
*                              THE CIWA.
R11      EQU   11              SCRATCH REGISTER
R12      EQU   12              SCRATCH REGISTER
R13      EQU   13              SCRATCH REGISTER
R14      EQU   14              SCRATCH REGISTER
R15      EQU   15              SCRATCH REGISTER
 TITLE 'SVC 112 -- PAGE RELEASE SERVICE INTERFACE'
***********************************************************************
*        THE SVC 112 PORTION OF IEAVPSI OBTAINS THE SALLOC LOCK,
*        SETS UP THE RECOVERY ENVIRONMENT FOR THE PAGE RELEASE
*        MODULE, AND PERFORMS SOME INITIAL CHECKS ON THE INPUT
*        PARAMETERS. ONCE THIS IS DONE, IT CALLS IEAVRELS, AND,
*        AFTER THE RETURN, DELETES THE LOCK AND RECOVERY ENVIRONMENTS
*        THAT IT HAS CREATED, AND RETURNS TO THE CALLER.
***********************************************************************
         DC    CL8'IGC112'            ENTRY SYMBOL
         ENTRY IGC112
IGC112   DS    0H
         USING *,R6
         USING PSA,R0
SVC112LB EQU   *
         LR    R8,R14    SAVE RETURN ADDRESS AROUND SETLOCK & TESTAUTH
         USING CVT,R3
         L     R9,CVTPVTP     GET ADDRESS OF PAGE VECTOR TABLE
         USING PVT,R9
***********************************************************************
*        ESTABLISH THE RECOVERY ENVIRONMENT, BY USING THE
*        RSM FRR ROUTINE ADDRESS IN THE PVT.
***********************************************************************
         SETFRR A,FRRAD=PVTPRCV,PARMAD=(R5),WRKREGS=(R5,R15)
         EJECT
***********************************************************************
*        SET UP THE RECOVERY CONTROL AREA, WHICH WILL BE
*        USED TO PASS RECOVERY INFORMATION BETWEEN THE SERVICE
*        AND RECOVERY ROUTINES.
***********************************************************************
         USING RCA,R5
         MVI   RCACSECT,RCACPS     CSECT IDENT. INTO RCA
         MVI   RCANAME3,RCAPS112   ENTRY ID INTO RCA.
***********************************************************************
*        OBTAIN THE GLOBAL LOCK, SO THAT THE RELEASE
*        OPERATION IS SERIALIZED WITH ALL OTHER RSM OPERATIONS.
***********************************************************************
SALLGT12 SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,RELATED=(SALLOC,IEAVPSI*
               (SALLRL12))
         L     R15,PVTPCIWA   GET COMMON INTERNAL WORK AREA ADDRESS
         ST    R4,CIWTCB-CIWA(R15) SAVE THE INPUT TCB ADDRESS
         USING TCB,R4
         L     R14,TCBRBP     OBTAIN THE RB ADDRESS
         USING RBBASIC,R14
         LR    R4,R15         TRANSFER THE CIWA ADDR TO ITS NORMAL BASE
         USING CIWA,R4
         ST    R5,PVTPRCA          SAVE CURRENT RCA PTR IN PVT
         OI    RCALOCKS,RCASAL     FOOTPRINT SALLOC LOCK ACQUISITION
         XC    CIWA(CIWALEN),CIWA  CLEAR COMMON INTERNAL WORK AREA
         MVC   CIWKEY,RBOPSW+1     RETRIEVE CALLER'S KEY
         DROP  R14
         NI    CIWKEY,KEYMASK      TURN OFF UNNECESSARY BITS
***********************************************************************
*        SET UP THE PARAMETERS FOR THE RELEASE ROUTINE AND
*        PERFORM THE NECESSARY VALIDITY CHECKING ON THE REQUEST.
***********************************************************************
         ST    R0,CIWSTRT          SET UP INTERNAL VSL IN CIWA
         ST    R1,CIWEND1           FROM PARAMETERS PASSED.
         OI    CIWFLG1,CIWSVC2     INDICATE SVC 112 ENTRY
         SR    R1,R0               TEST FOR VALID RANGE OF ADDRESSES
         BM    RC4                 RANGE < 0, ERROR RETURN
         EJECT
***********************************************************************
*        TEST TO SEE IF THE CALLER IS AUTHORIZED, SINCE VALIDITY
*        CHECKING CAN BE SKIPPED FOR THE AUTHORIZED CALLER.
***********************************************************************
         TESTAUTH STATE=YES,FCTN=1,KEY=YES,RBLEVEL=1,BRANCH=YES
         LTR   R15,R15             IS THE USER AUTHORIZED?
         BZ    SETUP          YES, SKIP THE VSL ADDRESS VALIDATION
         SPACE
***********************************************************************
*        THE CALLER IS UNAUTHORIZED, VALIDITY CHECK THE REQUEST.
***********************************************************************
         CLC   CIWSTRTA(L'PVTLPRIV),PVTLPRIV TEST ADDR AGAINST LOW END
         BL    RC4             OF PRIVATE AREA AND GIVE ERROR IF LOW
         CLC   CIWEND1A(L'PVTLCSA),PVTLCSA TEST ADDR AGAINST LOW END
         BNL   RC4             OF CSA AND GIVE ERROR IF NOT LOW
*                             NOTE THAT THE END ADDRESS IS KNOWN TO BE
*                             HIGHER THAN THE START ADDRESS, SINCE IT
*                             GAVE A POSITIVE RESULT WHEN SUBTRACTED.
***********************************************************************
*        NOW CALL THE PAGE RELEASE ROUTINE, SINCE THE CALLER
*        IS EITHER AUTHORIZED, OR HAS PASSED THE VALIDITY CHECK.
***********************************************************************
SETUP    EQU   *
         OI    CIWOPFL1,CIWRLS     SET PAGE RELEASE REQUEST FLAG
         LR    R3,R9               PASS THE PVT ADDRESS
         USING ASCB,R7
         L     R2,ASCBRSM          PASS THE RSM HEADER ADDRESS
         DROP  R9                  CHANGE OVER THE PVT BASE
         USING PVT,R3              REGISTER (REMAINS TO END OF ROUTINE)
         STM   R0,R15,PVTWSA11     SAVE NECESSARY REGISTERS
*****    THE PAGE RELEASE ROUTINE MUST GUARANTEE THE RETURN OF
*****    REGISTER 3.
         L     R15,PVTPRELS        ADDRESS OF IEAVRELS FUNCTION
         BALR  R14,R15             INVOKE THE PAGE RELEASE ROUTINE
         LM    R0,R15,PVTWSA11     RESTORE MY OWN REGISTERS
         MVI   RCACSECT,RCACPS     RESET CSECT ID IN RCA
         SR    R15,R15             PASS RETURN CODE FROM PGRLS
         IC    R15,CIWRETC         BY LOADING IT FROM THE CIWA
         EJECT
***********************************************************************
*        REMOVE THE ENVIRONMENT CREATED ON ENTRANCE, BY RELEASING
*        THE GLOBAL (SALLOC) LOCK AND DELETING THE FRR COVERAGE.
***********************************************************************
EXIT112  EQU   *
SALLRL12 SETLOCK RELEASE,TYPE=SALLOC,RELATED=(SALLOC,IEAVPSI(SALLGT12))
         LTR   R13,R13             WAS THE LOCK FREED SUCCESSFULLY?
         BZ    EXIT112A            YES, SKIP ERROR RECORDING
***********************************************************************
*        IF THE SALLOC LOCK CANNOT BE FREED, THE EVENT IS RECORDED
***********************************************************************
         MVI   RCARCRD,SALLNOFR    SET 'LOCK NOT HELD' CODE FOR FRR.
         ABEND X'C0D',,,SYSTEM     RECORD THE ERROR
EXIT112A EQU   *
         SETFRR D,WRKREGS=(R1,R2)  DELETE RSM FRR ROUTINE
         BR    R8                  RETURN
***********************************************************************
*        ALL ERROR RETURNS IN SVC 112 ARE ROUTED HERE, TO SET UP A
*        RETURN CODE AND RETURN TO THE CALLER.
***********************************************************************
RC4      EQU   *
         LA    R15,4               ERROR RETURN CODE OF 4
         B     EXIT112             RETURN
         DROP  R3,R5,R6,R4,R7
 TITLE ' SVC 113 -- PAGE SERVICES INTERFACE FOR PAGE FIX, FREE, LOAD AN*
               D OUT'
***********************************************************************
*        THE SVC 113 ENTRY POINT CONVERTS THE INPUT PARMS TO LOOK
*        AS THOUGH THE ROUTINE WAS ENTERED AT IEAVPSIB, AND THEN
*        ESTABLISHES THE RECOVERY ENVIRONMENT FOR THE FUNCTION.
*        IN THE RCA, AN INDICATION IS MADE SO THAT THE ENTRY POINT
*        USED TO ACCESS THE MODULE IS KNOWN.
***********************************************************************
         ENTRY IGC113
         DC    CL8'IGC113'    ENTRY POINT SYMBOL
IGC113   DS    0H
         USING IGC113,R6
         LR    R2,R15         PREPARE THE VSL IN THE INTERNAL FORMAT
         LR    R8,R14         SAVE THE RETURN ADDRESS
         USING CVT,R3
         L     R3,CVTPVTP     GET THE PAGE VECTOR TABLE ADDRESS
         USING PVT,R3
*******  ESTABLISH THE RECOVERY ENVIRONMENT FOR THE FUNCTION,
*******  USING THE STANDARD RSM RECOVERY ROUTINE.
         SETFRR A,FRRAD=PVTPRCV,PARMAD=(R5),WRKREGS=(R5,R15)
         USING RCA,R5
*******  INDICATE IN THE RCA THAT THE SVC 113 ENTRY POINT WAS
*******  USED TO OBTAIN ACCESS TO THE MODULE.
         OI    RCANAME6,RCAPS113   SVC 113 (IGC113) ENTRY POINT FLAG
         B     COMMON              CONTINUE WITH COMMON PATH
         DROP  R3,R5,R6
 TITLE 'PAGE SERVICES BRANCH ENTRY INTERFACE FOR OTHER THAN REAL STORAG*
               E MGMT. ROUTINES.'
***********************************************************************
*        AT THIS ENTRY POINT, THE CALLER'S REGISTERS ARE SAVED IN THE
*        RSM LOCAL SAVE AREA. THIS CAN BE SAFELY DONE, SINCE THE CALLER
*        MUST HOLD THE LOCAL LOCK. AT THIS ENTRY POINT, THE RECOVERY
*        ENVIRONMENT IS ESTABLISHED FOR THE FUNCTION, AND THE COMMON
*        CODE ROUTINE IS THEN ENTERED.
***********************************************************************
         ENTRY IEAVPSIB
         DC    CL8'IEAVPSIB'       ENTRY SYMBOL
IEAVPSIB DS    0H
         USING IEAVPSIB,R15
         L     R15,PSAAOLD    ADDRESS OF CURRENT ASCB
         USING ASCB,R15
         L     R15,ASCBASXB         ASXB ADDRESS
         USING ASXB,R15
         L     R15,ASXBSPSA         SAVE AREA VECTOR TABLE ADDR.
         USING WSAL,R15
         L     R15,WSALRSM          RSM LOCAL SAVE AREA ADDR.
         STM   R0,R14,0(R15)        SAVE ALL ENTRY REGISTERS
         DROP  R15
         L     R7,PSAAOLD           CURRENT ASCB ADDRESS
         USING ASCB,R7
         L     R3,FLCCVT           RESTORE CVT ADDRESS
         USING CVT,R3
         L     R3,CVTPVTP          ADDRESS OF PAGE VECTOR TABLE
         USING PVT,R3
         BALR  R6,0           ESTABLISH A TEMPORARY PROGRAM BASE REG.
         USING *,R6
*******  ESTABLISH THE RECOVERY ENVIRONMENT
         SETFRR A,FRRAD=PVTPRCV,PARMAD=(R5),WRKREGS=(R5,R15)
*******  PASS THE ENTRY POINT INDICATOR IN THE RCA, SO THAT
*******  THE COMMON ROUTINE WILL KNOW WHERE THE MODULE WAS ENTERED.
         USING RCA,R5
         OI    RCANAME3,RCAPSIB    IEAVPSIB ENTRY INDICATOR
 TITLE 'COMMON PROCESSOR - SVC 113 AND EXTERNAL (NON-RSM) BRANCH ENTRIE*
               S'
***********************************************************************
*        THE COMMON ROUTINE ESTABLISHES THE BASE REGISTER FOR THE
*        MODULE, AND THEN OBTAINS THE GLOBAL (SALLOC) LOCK, SO THAT
*        THE REQUESTED OPERATION MAY BE SERIALIZED WITH ALL OTHER RSM
*        FUNCTIONS IN THE SYSTEM.
***********************************************************************
COMMON   BALR  R6,0                RE-ESTABLISH PROGRAM BASE REGISTER
         USING *,R6
COMMON00 EQU   *
         MVI   RCACSECT,RCACPS     IEAVPSI CSECT IDENTIFIER
         OI    RCAFLAGS,RCAPSIER   INDICATE ECB/VSL CHECKING HAS BEGUN.
*                                  THE FRR WILL CONVERT ANY PROGRAM
*                                  CHECKS ENCOUNTERED WHILE CHECKING
*                                  THE ECB OR VSL TO X'171' ABENDS.
         LTR   R10,R0              XFER ECB ADDR TO USEABLE REGISTER
         BNP   SALLGT13            BR IF ECB NOT SUPPLIED OR   @ZA19344*
                                   IT IS NEGATIVE.             @ZA19344
COMMON2  TM    ECB(R10),X'FF'      REFER TO ECB TO FORCE PAGE-IN       *
                                   (IF NECESSARY)
SALLGT13 SETLOCK OBTAIN,TYPE=SALLOC,RELATED=(SALLOC,IEAVPSI(SALLRL13,EC*
               BSLCRL)),MODE=UNCOND
         OI    RCALOCKS,RCASAL     FOOTPRINT SALLOC LOCK ACQUISITION
         ST    R5,PVTPRCA          STORE THE CURRENT RCA ADDRESS
         LTR   R10,R10             TEST FOR ECB ADDRESS         YM02029
         BNP   SAVETCB             NONE GIVEN OR NEGATIVE      @ZA19344
         LRA   R0,ECB(R10)         TEST ECB ADDRESS PASSED
****     NOTE: R0 MUST REMAIN CONSTANT UNTIL THE VIRTUAL ECB ADDRESS IS
*****    SAVED BELOW.
         BZ    ECBINOK             ECB IS VALID AND ADDRESSABLE
***********************************************************************
*        THE ECB ADDRESS IS NOT RESOLVED, RELEASE THE SALLOC LOCK
*        AND REFERENCE THE ECB AGAIN. THIS WILL CAUSE A PAGE-FAULT
*        TO OCCUR, FORCING THE ECB PAGE INTO STORAGE, OR AN ERROR
*        TO OCCUR IF THE ADDRESS IS INVALID.
***********************************************************************
ECBSLCRL SETLOCK RELEASE,TYPE=SALLOC,RELATED=(SALLOC,IEAVPSI(SALLGT13))
         NI    RCALOCKS,X'FF'-RCASAL RESET LOCK HELD FLAG
         B     COMMON2             RETURN TO COMMON ROUTINE
         EJECT
***********************************************************************
*        WITH THE SALLOC LOCK OBTAINED AND THE ECB SECURELY IN STORAGE,
*        THE REQUEST IS VALIDITY CHECKED AND THE PARAMETERS ARE
*        PREPARED FOR THE PAGE SERVICE BY PLACING THEM IN THE
*        COMMON INTERNAL WORK AREA (CIWA).
***********************************************************************
ECBINOK  EQU   *
         L     R13,ECB(R10)        GET THE CONTENTS OF THE ECB AND
         CS    R13,R13,ECB(R10)     SYNCHRONOUSLY STORE IT TO PREVENT
*                                   STEALING BY RSM LSQA ROUTINE.
***********************************************************************
*        THE ECB HAS EITHER BEEN STORED OR THE CONTENTS HAVE IN SOME
*        WAY BEEN CHANGED. IN EITHER CASE, THE PAGE CONTAINING THE ECB
*        HAS BEEN CHANGED, PREVENTING THE FRAME FROM BEING STOLEN
*        DURING SUBSEQUENT PROCESSING.
***********************************************************************
SAVETCB  EQU   *                                                YM02029
         LR    R9,R4               SAVE THE INPUT TCB ADDRESS
         L     R4,PVTPCIWA         COMMON INTERNAL WORK AREA ADDR.
         USING CIWA,R4
         XC    CIWA(CIWALEN),CIWA  INITIALIZE THE CIWA
         ST    R10,CIWECB          SAVE THE ECB ADDRESS
         LR    R10,R0              REAL STORAGE ADDRESS OF THE ECB
****     NOTE: REGISTER ZERO MAY NOW BE USED FOR SCRATCH AGAIN.
****
***********************************************************************
*        SET THE APPROPRIATE ENTRY POINT INDICATOR IN THE CIWA.
***********************************************************************
         TM    RCANAME6,RCAPS113   ENTERED AT SVC 113??
         BO    SVC113EP            YES, SET UP SVC113 ENTRY FLAGS
         OI    CIWFLG1,CIWBREX      NO, SET THE IEAVPSIB FLAG IN CIWA
         B     REGTST              CONTINUE WITH THE COMMON PATH
SVC113EP OI    CIWFLG1,CIWSVC3     SET THE SVC 113 FLAG IN THE CIWA
         USING TCB,R9
         L     R15,TCBRBP          GET CALLER'S RB ADDRESS
         USING RBBASIC,R15
         MVC   CIWKEY,RBOPSW+1     GET KEY OF CALLER
         DROP  R15
         NI    CIWKEY,KEYMASK      TURN OFF THE EXTRANEOUS BITS
         EJECT
***********************************************************************
*        TEST THE REQUEST FOR THE LIST OR REGISTER FORMAT.
***********************************************************************
REGTST   EQU   *
         LTR   R1,R1               IS THIS A REGISTER FORM CALL?
         BM    LIST                NO, GO TO LIST PROCESSING ROUTINE
***********************************************************************
*        REGISTER FORM CALL, GET THE VSL DATA INTO THE CIWA FROM
*        THE CONTENTS OF REGISTERS 1 AND 2.
***********************************************************************
         ST    R1,CIWSTRT          NO, SET UP THE VSL IN THE CIWA
         ST    R2,CIWEND1           FROM THE INPUT PARAMETERS.
         STCM  R1,B'1000',CIWOPFL1  SAVE THE OPTION FLAGS FROM THE VSL
         STCM  R2,B'1000',CIWOPFL2   IN THE PAGE SERVICES OP FLAG AREAS
         LA    R2,0(R2)            CLEAR OUT ANY FLAG BITS FIRST, THEN
         LTR   R2,R2                TEST IF SECOND VSL ENTRY ADDR = 0?
         BNZ   TSTRSAOP            NO, SKIP ADDRESS CREATION
         LA    R1,1(R1)            YES, SET END ADDR = START ADDR +1
         STCM  R1,ADDRMASK,CIWEND1A     AND STORE IN VSL
         EJECT
***********************************************************************
*        COMMON PROCESSING, THE VSL IS NOW IN THE CIWA, HAVING EITHER
*        BEEN STORED FROM THE REGISTERS (REGISTER FORM), OR HAVING BEEN
*        MOVED FROM A VSL LIST BY THE NEXTVSL ROUTINE (LIST FORM).
*        PERFORM AN AUTHORIZATION TEST ON THE CALLER UNLESS THE
*        BRANCH ENTRY WAS USED OR THE CALLER IS NOT REQUESTING A FIX OR
*        FREE OPERATION, BOTH OF WHICH REQUIRE AUTHORIZATION.
***********************************************************************
TSTRSAOP EQU   *
         NI    RCAFLAGS,X'FF'-RCAPSIER  RESET ECB/VSL CHECKING FLAG.
         TM    CIWOPFL2,CIWRAO    RSAOPT REQUEST?
         BO    RC16A               YES, ERROR EXIT
         TM    RCANAME6,RCAPS113   SVC 113 ENTRY?
         BZ    BRANCH              NO, GO TO BRANCH ENTRY PROCESSING
         TM    CIWOPFL1,CIWFIX+CIWFREE     YES, PAGEFIX OR PAGEFREE?
         BZ    SETTCB              NO, SKIP AUTHORIZATION CHECK
         LR    R12,R3         SAVE THE PVT ADDRESS ACROSS TESTAUTH
         TESTAUTH STATE=YES,FCTN=1,KEY=YES,RBLEVEL=1,BRANCH=YES
         LR    R3,R12         RESTORE THE PVT ADDRESS AFTER TESTAUTH
         LTR   R15,R15             IS CALLER AUTHORIZED?
         BNZ   RC16E               NO, ERROR RETURN
         SPACE 2
***********************************************************************
*        THE CALLER IS EITHER AUTHORIZED, USED THE BRANCH ENTRY OR IS
*        REQUESTING A SERVICE THAT DOES NOT REQUIRE AUTHORIZATION,
*        NOW COMPLETE THE GENERAL VALIDITY CHECK.
***********************************************************************
SETTCB   EQU   *
         ST    R9,CIWTCB           SAVE TCB ADDRESS IN CIWA
ECBCHK   EQU   *
         LTR   R10,R10             CHECK FOR NULL ECB ADDRESS
         BP    ECBONWRD            ECB GIVEN, VALIDATE IT.     @ZA19344
         BM    RC16G               NEGATIVE VALUE, ERROR (SEE  @ZA19344*
                                   PROLOGUE RE: IGC113 AND     @ZA19344*
                                   IEAVPSIB ENTRIES).          @ZA19344
         TM    CIWOPFL1,CIWFIX     FIX REQUEST?
         BZ    ROUTER              NO, GO TO ROUTER ROUTINE.
         B     RC16D               YES, ECB REQUIRED FOR FIX, ERROR
ECBONWRD EQU   *
         TM    CIWECB+L'CIWECB-1,WORDBDRY IS THE ECB ON A WORD BOUNDARY
         BNZ   RC16D               NO, ERROR RETURN.
         TM    CIWOPFL2,CIWPGOUT   YES, IS THIS A PGOUT REQUEST?
         BO    RC16D               YES, ECB NOT ALLOWED, ERROR RETURN
         CLI   CIWKEY,0            NO, IS THE CALLER KEY ZERO?
         BE    ROUTER              YES, SKIP ECB KEY CHECK
         LR    R15,R10             OBTAIN ECB REAL STORAGE ADDRESS
         N     R15,ISKPREP         SET UP FOR ISK INSTRUCTION
         ISK   R1,R15              GET KEY OF ECB
         N     R1,KEYMASKW         REMOVE THE EXTRANEOUS BITS
         CLM   R1,B'0001',CIWKEY   DOES THE CALLER KEY MATCH?
         BE    ROUTER              YES, BRANCH TO THE ROUTER
         B     RC16D               NO, ERROR RETURN
         SPACE 3
***********************************************************************
*        THE REQUEST WAS OF THE LIST FORM, SO THE VSL ENTRY MUST BE
*        VALIDATED. TO DO THIS, IT IS PASSED TO THE 'NEXTVSL' ROUTINE,
*        WHICH IS LOCATED IN THIS MODULE.
***********************************************************************
LIST     EQU   *                   LIST FORM REQUEST, PROCESS VSL
         LA    R1,0(R1)            CLEAR EXTRANEOUS BITS FROM ADDRESS
         ST    R1,CIWINVSL         SAVE VSL LIST ADDRESS
         USING VSL,R1
         MVC   CIWOPFL1,VSLFLAG1   COPY VSL OPTION FLAGS        YM02034
         MVC   CIWOPFL2,VSLFLAG2    TO THE CIWA FLAG AREAS.     YM02034
         DROP  R1
         S     R1,FVSLLEN          BACK UP CURRENT VSL POINTER FOR
         ST    R1,CIWCUVSL          USE BY NEXTVSL ROUTINE AND SAVE IT
         LA    R15,NEXTVSL         NEXTVSL ENTRY ADDRESS
         BALR  R14,R15             GO VALIDATE THIS VSL ENTRY
         LTR   R15,R15             IS IT VALID?
         BZ    TSTRSAOP            YES, CONTINUE
         B     RC16B               NO, ERROR
         SPACE 2
***********************************************************************
*        THE CALL WAS VIA A BRANCH ENTRY, CHECK IF A VALID TCB
*        ADDRESS WAS SUPPLIED.
***********************************************************************
BRANCH   EQU   *
         LTR   R9,R9               WAS A TCB ADDRESS GIVEN?
         BZ    ECBCHK              NO, CHECK THE ECB (IF ANY)
         ST    R9,CIWTCB           YES, SAVE THE TCB ADDRESS.
         TM    CIWTCB+L'CIWTCB-1,WORDBDRY IS IT ON A WORD BOUNDARY
         BZ    ECBCHK              YES, GO TEST FOR VALID ECB
         B     RC16C               NO, ERROR RETURN
         DROP  R7             REMOVE ASCB ADDRESSABILITY
 TITLE 'REAL STORAGE MANAGEMENT BRANCH ENTRY INTERFACE'
**********************************************************************
*        ENTRY AT THIS POINT DOES NOT REQUIRE THE SETTING
*        UP OF THE RECOVERY ENVIRONMENT OR ACQUISITION OF THE SALLOC
*        LOCK, NOR IS IT NECESSARY TO PERFORM MUCH VALIDITY CHECKING
*        FOR USERS OF THIS ENTRY. THEREFORE, THE ROUTINE ONLY SETS
*        UP THE REGISTERS NECESSARY TO OPERATE IN THE COMMON
*        ROUTINES, AND DISPATCHES CONTROL ACCORDINGLY.
**********************************************************************
         ENTRY IEAVPSII
         DC    CL8'IEAVPSII'       ENTRY POINT SYMBOL
         USING PVT,R3
IEAVPSII STM   R0,R15,PVTWSA4      SAVE ALL REGISTERS IN THE PVT
         USING IEAVPSII,R15
         LR    R14,R4              SAVE TCB ADDRESS
         L     R4,PVTPCIWA         COMMON WORK AREA ADDRESS
         USING CIWA,R4
         XC    CIWA(CIWALEN),CIWA  INITIALIZE THE CIWA
         L     R5,PVTPRCA          RECOVERY WORK AREA ADDRESS
         USING RCA,R5
         MVI   RCACSECT,RCACPS     PSI CSECT IDENTIFIER FOR RECOVERY
         OI    RCANAME3,RCAPSII    IEAVPSII ENTRY ID FOR RECOVERY
         ST    R14,CIWTCB          SAVE THE INPUT TCB ADDRESS
         ST    R0,CIWECB           SAVE THE INPUT ECB ADDRESS
         LA    R6,IEAVPSII-COMMON00     ESTABLISH COMMON BASE
         LNR   R6,R6               ADDRESSABILITY, SO THAT THE COMMON
         AR    R6,R15              SUBROUTINES CAN BE USED.
         LTR   R1,R1               TEST THE ENTRY FORMAT AND IF NOT
         BNP   RC16                 REGISTER FORM, ERROR RETURN
         ST    R1,CIWSTRT          SET UP THE VSL IN THE CIWA,
         ST    R2,CIWEND1           USING THE INPUT DATA.
         STCM  R1,B'1000',CIWOPFL1 SAVE THE OPTION FLAGS FROM THE VSL
         STCM  R2,B'1000',CIWOPFL2  IN THE PAGE SERVICES OP FLAG AREAS.
         OI    CIWFLG1,CIWBRIN     INDICATE INTERNAL BRANCH ENTRY (RSM)
         L     R15,PSAAOLD         ADDRESS OF CURRENT ASCB
         USING ASCB,R15
         L     R2,ASCBRSM          ADDRESS OF THE RSM HEADER
         DROP  R15
         USING COMMON00,R6
         LA    R7,EXIT        PREPARE FOR RETURN TO EXIT FROM SUBROUTE
**********************************************************************
*        ROUTE CONTROL TO THE PROPER SUBROUTINE, BY TESTING THE MASK
*        BITS IN THE FLG1 AND FLG2 FIELDS OF THE INPUT VSL.
**********************************************************************
         TM    CIWOPFL2,CIWPGOUT   TEST FOR PAGE OUT REQUEST
         BO    PSIIPOUT            PAGE OUT REQUEST, BRANCH
         BXLE  R1,R1,PSIIFIX       IF BIT 1, PAGE FIX REQUEST, BRANCH
         BXLE  R1,R1,PSIIFREE      IF BIT 2, PAGE FREE REQUEST, BRANCH
         BXLE  R1,R1,PSIILOAD      IF BIT 3, PAGE LOAD REQUEST, BRANCH
         BXLE  R1,R1,PSIIRLSE      IF BIT 4, PAGE RELEASE, BRANCH
         B     RC16                UNKNOWN REQUEST, ERROR EXIT
 TITLE 'ROUTER ROUTINE FOR SVC 113 AND NON-REAL STORAGE MGMT. BRANCH EN*
               TRY CALLS.'
**********************************************************************
*       THE ROUTER ROUTINE PERFORMS THE NECESSARY VALIDITY CHECKS
*       PRIOR TO SETTING UP THE PARAMETERS FOR INVOKING THE
*       DESIRED ROUTINE. LINKAGE TO THE ROUTINE IS ESTABLISHED,
*       AND, ON RETURN, THE RCA CSECT IDENTIFIER IS RESET.
**********************************************************************
ROUTER   EQU   *
         USING ASCB,R7             RE-ESTABLISH ASCB ADDRESSABILITY
         L     R2,ASCBRSM          GET RSM HEADER ADDRESS FOR ROUTER
         DROP  R7                  DELETE ASCB ADDRESSABILITY
         TM    CIWOPFL2,CIWERR+CIWEXTRS    ANY ERRORS?
         BNZ   RC16                YES, ERROR RETURN
***********************************************************************
*        IF THERE ARE NO ERRORS INDICATED, DISPATCH THE NECESSARY
*        ERROR CHECKING, AS DETERMINED BY THE REQUESTED FUNCTION.
*        THE REQUESTED FUNCTION IS DETERMINED BY TESTING THE BITS
*        IN THE FLG1 AND FLG2 FIELDS OF THE VSL IN THE CIWA.
***********************************************************************
         LA    R7,EXIT             SET UP TO EXIT ON RETURN
         TM    CIWOPFL2,CIWPGOUT   IF A PAGE OUT REQUEST,
         BO    ERRTST7             GO TO PAGEOUT VALIDATION ROUTINE.
         L     R15,CIWSTRT         FLG1 FIELD IN BYTE 0 OF R15
         BXLE  R15,R15,ERRTST2     IF BIT 1 IS ON, PAGE FIX
         BXLE  R15,R15,ERRTST4     IF BIT 2 IS ON, PAGE FREE
         BXLE  R15,R15,ERRTST3     IF BIT 3 IS ON, PAGE LOAD
         BXLE  R15,R15,ERRTST6     IF BIT 4 IS ON, PAGE RELEASE
         B     RC16                UNKNOWN REQUEST, ERROR RETURN
         SPACE 2
ERRTST7  EQU   *                   PAGE OUT REQUEST ERROR CHECKING
         TM    CIWOPFL1,CIWLONG+CIWFIX+CIWFREE+CIWLOAD+CIWRLS IF ANY
         BNZ   RC16                 EXTRANEOUS BITS FOR PGOUT, ERROR.
PSIIPOUT EQU   *                   INTERNAL ROUTER POINT FOR PAGE OUT
         L     R15,PVTPOUT         ADDRESS OF PAGE OUT ROUTINE
***********************************************************************
*        THIS ROUTINE SAVES THE NECESSARY REGISTERS PRIOR TO LINKING TO
*        THE SUBROUTINE WHOSE ADDRESS IS IN REGISTER 15. ON RETURN, IT
*        RE-ESTABLISHES THE CSECT ID IN THE RCA AND RETURNS TO ITS
*        INVOKER VIA REGISTER 7.
***********************************************************************
SUBROUTE EQU   *
         STM   R0,R15,PVTWSA11    SAVE NECESSARY REGISTERS
*        THE CALLED SUBROUTINE MUST GUARANTEE THE RETURN OF
*        REGISTER 3.
         BALR  R14,R15             BRANCH (LINK) TO REQUESTED FUNCTION
         LM    R0,R15,PVTWSA11      RESTORE REQUIRED REGISTERS
         MVI   RCACSECT,RCACPS     RESET CSECT IDENTIFIER
         BR    R7                  RETURN TO PRESET CALLER ADDRESS
 TITLE 'PAGE SERVICE ROUTINE INTERFACES FOR ALL FORMS OF ENTRY'
***********************************************************************
*        PAGE LOAD REQUESTS FROM IEAVPSIB AND SVC113 COME HERE.
***********************************************************************
ERRTST3  EQU   *                   PAGE LOAD ERROR CHECKING
         TM    CIWOPFL1,CIWFREE+CIWLONG LONG-FIX OR FREE REQUEST?
         BZ    ERRTST2A            NO, CONTINUE
         B     RC16                YES, ERROR RETURN
         SPACE 2
***********************************************************************
*        PAGE FIX REQUESTS FROM IEAVPSIB AND SVC113 COME HERE.
***********************************************************************
ERRTST2  EQU   *                   PAGE FIX ERROR TESTING
         BXLE  R15,R15,RC16        IF THE PGFREE BIT IS ON, ERROR
ERRTST2A EQU   *
         TM    CIWOPFL2,CIWPGOUT+CIWKEPRL KEEPREAL OR PAGE-OUT REQUEST?
         BNZ   RC16                YES, ERROR RETURN
         SPACE 2
***********************************************************************
*        PAGE FIX AND PAGE LOAD REQUESTS FROM IEAVPSII COME HERE.
***********************************************************************
PSIILOAD EQU   *                   INTERNAL ROUTER ENTRY FOR LOAD
PSIIFIX  EQU   PSIILOAD            INTERNAL ROUTER ENTRY FOR PAGE-FIX
         TM    CIWOPFL1,CIWRLS     RELEASE OPTION?
         BZ    CFXLD               NO, SKIP CALL TO RELEASE
         L     R15,PVTPRELS        RELEASE FUNCTION ADDRESS
         BAL   R7,SUBROUTE         GET ROUTED TO IEAVRELS
***********************************************************************
*        A RETURN CODE OF 4 FROM PAGE RELEASE IS TREATED AS A PROPER
*        RETURN (LIKE ZERO), IF THE OPERATION DESIRED IS A COMBINATION
*        OF PAGE RELEASE AND SOME OTHER PAGE SERVICE.
***********************************************************************
         CLI   CIWRETC,4           ERROR RETURN CODE? (>4?)
         BH    EXIT                YES, EXIT
         NI    CIWFLG1,X'FF'-CIWFIXC-CIWOUTKR  RESET INTERNAL FLAGS
         SR    R15,R15             ZERO OUT THE TWO RETURN CODE
         STH   R15,CIWRETC          AREAS IN THE CIWA.
         XC    CIWCURPG(RICIWLEN),CIWCURPG   CLEAR CIWA WORK AREA
         L     R15,CIWINVSL        NO, SET UP VSL (IF LIST FORM),
         LTR   R15,R15              TO ADDRESS THE ORIGINAL LIST OF
         BZ    CFXLD                VSLS, ELSE SKIP (FOR REGISTER FORM)
         MVC   CIWVSL,0(R15)       COPY THE FIRST VSL INTO THE CIWA
         ST    R15,CIWCUVSL         AND RESET CURRENT ADDRESS IN CIWA
CFXLD    EQU   *
         L     R15,PVTPFXLD        NO, CALL IEAVFXLD
         LA    R7,EXIT             PREPARE FOR RETURN TO EXIT
         B     SUBROUTE             AFTER BEING ROUTED TO IEAVFXLD
         EJECT
***********************************************************************
*        PAGE FREE REQUESTS FROM IEAVPSIB AND IGC113 COME HERE.
***********************************************************************
ERRTST4  EQU   *                   PAGE-FREE ERROR CHECKING
         BXLE  R15,R15,RC16        IF THE PGLOAD BIT IS ON, ERROR.
         TM    CIWOPFL2,CIWPGOUT+CIWKEPRL KEEPREAL OR PAGEOUT REQUEST?
         BNZ   RC16                YES, ERROR RETURN
         SPACE 2
***********************************************************************
*        PAGE FREE REQUESTS FROM IEAVPSII COME HERE.
***********************************************************************
PSIIFREE EQU   *                   INTERNAL ROUTER ENTRY FOR PAGE-FREE
         L     R15,PVTPFREE        PAGE-FREE FUNCTION ADDRESS
         BAL   R7,SUBROUTE         GET ROUTED TO IEAVFREE
         CLI   CIWRETC,0           ERROR RETURN CODE?
         BNE   EXIT                YES, EXIT
         TM    CIWOPFL1,CIWRLS     RELEASE OPTION?
         BNO   EXIT                NO, EXIT
         NI    CIWFLG1,X'FF'-CIWFIXC-CIWOUTKR  RESET INTERNAL FLAGS
         SR    R15,R15             ZERO OUT THE TWO RETURN CODE
         STH   R15,CIWRETC          AREAS IN THE CIWA.
         XC    CIWCURPG(RICIWLEN),CIWCURPG   CLEAR CIWA WORK AREA
         L     R15,CIWINVSL        NO, SET UP VSL (IF LIST FORM),
         LTR   R15,R15              TO ADDRESS THE ORIGINAL LIST OF
         BZ    CALLRLS              VSLS, ELSE SKIP (FOR REGISTER FORM)
         MVC   CIWVSL,0(R15)       COPY THE FIRST VSL INTO THE CIWA
         ST    R15,CIWCUVSL         AND RESET CURRENT ADDRESS IN CIWA
         B     CALLRLS             NOW CALL IEAVRELS
         SPACE 3
***********************************************************************
*        PAGE RELEASE REQUESTS FROM IEAVPSIB AND IGC113 COME HERE.
*        SINCE THE PGRLSE (PAGE RELEASE) MACRO ONLY INVOKES
*        SVC 112, ANY SVC 113 ENTRY TO THIS POINT IS INVALID.
***********************************************************************
ERRTST6  EQU   *                   ERROR CHECKING FOR PAGE-RELEASE
         TM    CIWFLG1,CIWBREX     EXTERNAL BRANCH ENTRY?
         BZ    RC16                NO, ERROR
         TM    CIWOPFL2,CIWKEPRL+CIWPGOUT KEEPREAL OR PAGE-OUT REQUEST?
         BNZ   RC16                YES, ERROR RETURN
         TM    CIWOPFL1,CIWLONG    LONG-FIX OPTION IS ALLOWED ONLY ON
         BO    RC16                 PGFIX REQUESTS, ERROR
         EJECT
***********************************************************************
*        PAGE RELEASE REQUESTS FROM IEAVPSII COME HERE.
***********************************************************************
PSIIRLSE EQU   *                   INTERNAL ROUTER ENTRY FOR RELEASE
CALLRLS  EQU   *
         L     R15,PVTPRELS        RELEASE FUNCTION ADDRESS
         BAL   R7,SUBROUTE          ROUTE TO IEAVRELS
***********************************************************************
*        A RETURN CODE OF 4 FROM PAGE RELEASE IS TREATED AS A PROPER
*        RETURN (LIKE ZERO), IF THE OPERATION DESIRED IS A COMBINATION
*        OF PAGE RELEASE AND SOME OTHER PAGE SERVICE. THEREFORE, IF
*        PAGE RELEASE WAS CALLED AFTER PAGE FREE, WE MUST CONVERT A
*        RETURN CODE OF 4 FROM PAGE RELEASE INTO A RETURN CODE OF
*        ZERO.
***********************************************************************
         CLI   CIWRETC,4           RETURN CODE = UNAUTHORIZED RELEASE?
         BNE   EXIT                NO, RETURN FOR NORMAL PROCESSING
         TM    CIWOPFL1,CIWFREE    YES, WAS THE REQUEST FREE W/RELEASE?
         BZ    EXIT                NO, RETURN NORMALLY
         MVI   CIWRETC,0           YES, CONVERT THE RETURN CODE TO 0
         B     EXIT                AND RETURN TO EXIT PROCESSING
 TITLE 'IEAVPSI -- PAGE SERVICES MODULE -- COMMON EXIT PROCESSOR'
***********************************************************************
*        ALL INTERNAL ERRORS WHICH WILL REQUIRE THE RELEASE
*        OF THE SALLOC LOCK OR REMOVAL OF THE RECOVERY ROUTINE
*        ARE ROUTED TO ONE OF THE FOLLOWING ENTRY POINTS. SET UP
*        AN ERROR RETURN CODE OF 16 (FOR PARAMETER ERROR), AND
*        CONTINUE TO THE NORMAL EXIT PROCESSING.
***********************************************************************
RC16A    EQU   *
RC16B    EQU   *
RC16C    EQU   *
RC16D    EQU   *
RC16G    EQU   *
RC16     EQU   *
         MVI   CIWRETC,RTCODE16    SET ERROR RETURN CODE
         B     NOPOST              PREPARE TO RETURN
         SPACE
RTCODE16 EQU   16
         SPACE 2
RC16E    EQU   *                   UNAUTHORIZED REQUEST
         MVI   CIWRETC,RTCODE16    SET ERROR RETURN CODE
         LA    R10,X'271'          PREPARE FOR PROPER ABEND
         B     LOAD15B             AND BRANCH TO EXITING ROUTINE.
         EJECT
**********************************************************************
*        THE EXIT ROUTINE PERFORMS ANY NECESSARY CLEANING UP PRIOR
*        TO LEAVING IEAVPSI. THIS INCLUDES DELETION OF THE RECOVERY
*        ENVIRONMENT, RELEASE OF THE SALLOC LOCK AND RESTORATION OF
*        THE CALLER'S REGISTERS. ON EXIT FROM IEAVPSII, ONLY THE
*        RESTORATION OF THE REGISTERS TAKES PLACE.
**********************************************************************
EXIT     CLI   CIWRETC,RTCODE16    TEST THE RETURN CODE, IF
         BL    EXIT0                PAGE SERVICES ERROR, CONTINUE
         BE    NOPOST              IF PARAMETER ERROR (=16),
*                                   GO TO GENERAL PURPOSE EXIT
         LA    R10,X'028'          IF UNKNOWN RETURN CODE (>16), GO TO
         B     LOAD15B              INTERNAL ERROR ABEND EXIT.
EXIT0    SR    R15,R15             CLEAR THE INDEX REGISTER
         IC    R15,CIWRETC         OBTAIN THE RETURN CODE
         B     *+4(R15)            BRANCH ACCORDING TO RETURN CODE
         B     EXIT00              RETURN CODE OF ZERO, NORMAL RETURN
         B     EXIT04              RETURN CODE = 4, POST ECB
         B     EXIT08              RETURN CODE = 8, FIX ECB
EXIT00   EQU   *                   RETURN CODE = 12, NORMAL RETURN
         L     R11,CIWECB          IS THERE AN INPUT ECB?
         LTR   R11,R11             TEST FOR NULL (0) VALUE
         BZ    LOAD15              NO ECB PRESENT, SKIP POST CODE
         TM    CIWOPFL1,CIWFREE    PAGE FREE REQUEST?
         BO    LOAD15              YES, DO NOT POST ECB.
         TM    CIWFLG1,CIWNOPST    POST TO BE SUPPRESSED?
         BO    LOAD15              YES, SKIP POST CODE
         L     R14,0(R11)          GET THE ECB CONTENTS
         LTR   R14,R14             HAS THE ECB BEEN WAITED ON ?
         BM    GOPOSTIT            YES, CALL POST TO POST IT.
         L     R15,POSTECB0        NO, SET UP TO SIMULATE POST.
         CS    R14,R15,0(R11)      STORE THE POSTED ECB.
         BE    LOAD15              POSTED SUCCESSFULLY, CONTINUE.
GOPOSTIT EQU   *                   ECB HAS CHANGED, CALL POST ROUTINE.
         SR    R10,R10             SET POST CODE TO 0
         L     R15,FLCCVT          GET CVT ADDRESS TO LINK TO POST
         USING CVT,R15
*****    NOTE: THE LOCAL LOCK MUST BE HELD IN ORDER FOR POST TO WORK.
         L     R15,CVT0PT01        ADDRESS OF THE POST ROUTINE
         BALR  R14,R15             LINK TO POST (IEAOPT01)
LOAD15   SR    R15,R15             PREPARE FOR RETURN BY SETTING
         IC    R15,CIWRETC         UP RETURN CODE
LOAD15A  TM    CIWFLG1,CIWBRIN     ENTERED AT IEAVPSII?
         BZ    NOINTL              NO, GO TO NON-RSM CALLER'S EXIT
**********************************************************************
*        IF THE ROUTINE WAS ENTERED AT IEAVPSII, IT WILL EXIT HERE.
**********************************************************************
INTERNAL NI    RCANAME3,X'FF'-RCAPSII   RESET ENTRY FLAG FOR IEAVPSII
         LM    R0,R14,PVTWSA4      RESTORE CALLER'S REGISTERS
         BR    R14                 RETURN
         EJECT
**********************************************************************
*        THIS IS THE NORMAL EXIT FOR EITHER IEAVPSIB OR IGC113.
*        THE SALLOC LOCK IS RELEASED, AND THE RECOVERY SHIELD IS
*        LIFTED AT THIS POINT.
**********************************************************************
NOINTL   EQU   *
SALLRL13 SETLOCK RELEASE,TYPE=SALLOC,RELATED=(SALLOC,IEAVPSI(SALLGT13))
         LTR   R13,R13             RELEASED LOCK SUCCESSFULLY?
         BZ    NRSMFRR1            YES, CONTINUE
         BAL   R7,RSMC0DAB         NO, RECORD THE ERROR AND RETURN
NRSMFRR1 TM    RCANAME6,RCAPS113   ENTERED AT IGC113?
         BO    RELFRR         YES, REGISTERS ARE NOT RESTORED ON EXIT
         L     R13,PSAAOLD    NO, GET THE ASCB ADDRESS TO RESTORE
         USING ASCB,R13        REGISTERS FROM THE LOCAL SAVE AREA
         L     R13,ASCBASXB        GET ASXB ADDRESS
         USING ASXB,R13
         L     R13,ASXBSPSA        SAVE AREA VECTOR
         USING WSAL,R13
         L     R13,WSALRSM         RSM LOCAL SAVE AREA ADDRESS
RELFRR   SETFRR D,WRKREGS=(R1,R2)  REMOVE RSM FRR COVERAGE
         LTR   R13,R13        IF THERE IS NO ADDRESS IN REG 13,
         BZR   R8              EXIT (NO REGISTERS NEED BE RESTORED FOR *
                                IGC113), BUT REGISTER 8 MUST BE KEPT   *
                                FROM THE ENTRY AT IGC113.
**********************************************************************
*        EXIT WILL OCCUR HERE, IF ENTERED AT IEAVPSIB.
**********************************************************************
         LM    R0,R14,0(R13)       RESTORE CALLER'S REGISTERS
         BR    R14                 RETURN TO CALLER
         EJECT
**********************************************************************
*        THIS ROUTINE PROCESSES RETURN CODES OF 8.
*        THESE RETURNS INDICATE THAT THE REQUEST WAS STARTED
*        CORRECTLY, BUT WILL COMPLETE ASYNCHRONOUSLY. THE USER'S
*        ECB WILL BE POSTED UPON COMPLETION. THE ECB MUST BE FIXED
*        IN STORAGE IN ORDER FOR THIS TO OCCUR, THEREFORE, THE ECB
*        WILL BE FIXED AT THIS TIME.
**********************************************************************
EXIT08   EQU   *
         L     R15,CIWECB          GET THE INPUT ECB ADDRESS
         LTR   R15,R15             IS THERE AN ECB PRESENT?
         BZ    LOAD15A             NO, RETURN CODE = 0 (PGLOAD, NO ECB)
         LRA   R0,0(R15)           TEST THE ECB FOR ADDRESSABILITY.
         BNZ   LOAD15              NOT IN STORAGE, SKIP FIX ATTEMPT.
**********************************************************************
*        IF THE ECB IS NOT PRESENTLY IN STORAGE, IT WAS PROBABLY
*        IN THE PAGE(S) JUST RELEASED BY THE INPUT REQUEST.
**********************************************************************
         ST    R15,CIWSTRT         STORE ECB ADDRESS IN THE VSL
         LA    R15,4(R15)           GET ECB END ADDRESS        @ZA19332
         ST    R15,CIWEND1          STORE IT IN THE INTERNAL VSL
         MVI   CIWOPFL1,CIWFIX     SET FLAGS IN CIWA PREPARATORY TO
         MVI   CIWOPFL2,0           DOING A PAGE FIX ON THE INPUT ECB.
         SR    R13,R13             PRESERVE THE CURRENT RETURN
         IC    R13,CIWRETC          CODE ACROSS THE PAGE FIX INTERFACE
         SR    R0,R0               ZERO OUT THE NEXT AND CURRENT
         ST    R0,CIWINVSL         VSL POINTERS IN THE
         ST    R0,CIWCUVSL         CIWA.
         ST    R0,CIWTCB           ZERO TCB ADDR- PREVENT GETTING FOE
         NI    CIWFLG1,X'FF'-CIWFIXC-CIWOUTKR  RESET INTERNAL FLAGS
         STH   R0,CIWRETC          RESET RETURN CODE AREAS
*        NOW FIX THE ECB
         L     R15,PVTPFXLD        V(IEAVFXLD)  -- ADDRESS OF PAGE-FIX
         L     R10,CIWWRK2         GET ADDRESS OF THE ROOT PCB
         XC    CIWCURPG(RICIWLEN),CIWCURPG   CLEAR BALANCE OF THE CIWA
         USING PCBR,R10
*****    THIS ADDRESS IS PRESERVED BY THE SUBROUTE ROUTINE
         BAL   R7,SUBROUTE         CALL IEAVFXLD TO FIX THE ECB
         CLI   CIWRETC,0            FIX SUCCESSFUL?
         STC   R13,CIWRETC         RESTORE THE ORIGINAL RETURN CODE
         BNE   RSMFRR2             FIX ERROR, FORCE RSM FRR ENTRY
         OI    PCBRFLAG,PCBRFECB   SET 'FREE ECB' FLAG TO CAUSE PAGE   *
                                   FREE TO TAKE PLACE ON THE ECB
         B     LOAD15              RETURN TO NORMAL EXIT PATH
         EJECT
**********************************************************************
*        THIS ROUTINE PROCESSES ERRORS OF SEVERITY 4.
*        THESE CONDITIONS INDICATE ERRORS IN THE VSL DATA PASSED.
*        SINCE THIS IS A FORM OF PARAMETER ERROR, THE CALLER IS
*        ABENDED WITH THE PARAMETER ERROR ABEND CODE.
*        THE SPACE ALLOCATION LOCK IS RELEASED PRIOR TO POSTING THE
*        INPUT ECB, SINCE IT MAY HAVE BEEN IN A PAGE INVALIDATED
*        BY THE REQUEST JUST PROCESSED, AND A PAGE-FAULT MAY OCCUR
*        WHEN THE POST IS ATTEMPTED.
**********************************************************************
EXIT04   EQU   *
NOPOST   EQU   *
         LA    R10,X'171'          SET UP PARAMETER ERROR ABEND CODE
**********************************************************************
*        ALL RETURN CODES OTHER THAN 0, 8, AND 12 FINALLY END UP HERE.
**********************************************************************
LOAD15B  EQU   *
         SR    R9,R9               SET UP RETURN CODE FROM THE @ZM30618
         IC    R9,CIWRETC          ONE STORED IN THE CIWA.    @ZM30618
*         SAVE VSL, VSL ADDRESS, AND ECB IN WORK REGISTERS   @ZM30618
*
         L     R8,CIWINVSL         SAVE VSL ADDRESS    @ZM30618
         L     R7,CIWECB           SAVE ECB ADDRESS    @ZM30618
         LM    R2,R3,CIWVSL           SAVE CURRENT VSL  @ZM30618
         TM    CIWFLG1,CIWBRIN     IF ENTRY WAS MADE VIA IEAVPSII,
         BO    RCAFLAG             SKIP LOCK RELEASE, AS REGISTERS
*                                  MUST BE RESTORED FROM THE PVT.
SALLFR13 SETLOCK RELEASE,TYPE=SALLOC,RELATED=(SALLOC,IEAVPSI(SALLGT13))
         CH    R9,CHKRC4           POSTING REQUIRED? (RC=4)? @ZM30618
         BNE   RELSFRR             NO, SKIP OVER POST CODE.
         LTR   R11,R7               IS THERE AN ADDRESS?  @ZM30618
         BZ    RELSFRR             NO, SKIP POST CODE
         LA    R10,4               SET POST CODE TO 4
         L     R15,FLCCVT          GET CVT ADDRESS TO ENTER POST
         USING CVT,R15
         L     R15,CVT0PT01        ADDRESS OF THE POST ROUTINE
         BALR  R14,R15             LINK TO POST (IEA0PT01)
         LA    R10,X'171'          SET UP PARAMETER ERROR ABEND CODE
RELSFRR  EQU   *
         SETFRR D,WRKREGS=(R11,R12) REMOVE RSM FRR    @ZM30618
ABEND    EQU   *
         CH    R10,X171            IS THIS A PARAMETER ERROR ABEND?
         BNE   ABENDXXX             NO, CONTINUE WITH ABEND.
         LR    R11,R8               YES, SET UP VSL ADDRESS @ZM30618
         LR    R12,R7               ECB ADDRESS,        @ZM30618
         LR    R13,R2               AND CURRENT VSL,      @ZM30618
         LR    R14,R3               FOR DIAGNOSTIC USE.    @ZM30618
ABENDXXX EQU   *
         LR    R15,R9               RESET RC FOR CALLER     @ZM30618
         ABEND (R10),DUMP,,SYSTEM
         SPACE 2
RCAFLAG  EQU   *
         NI    RCANAME3,X'FF'-RCAPSII RESET ENTRY FLAG (IEAVPSII)
         B     ABEND               AND ABEND
         EJECT
**********************************************************************
*        THIS POINT WILL BE REACHED IF AN ERROR OCCURS WHILE
*        FIXING THE ECB.
**********************************************************************
RSMFRR2  EQU   *
         LA    R7,LOAD15B          SET UP TO CONTINUE AFTER POST CODE
         LA    R10,X'028'          SET UP INTERNAL ERROR ABEND CODE
         MVI   RCARCRD,PGFIXERR    INDICATE CAUSE OF ERROR TO FRR
         B     RSMC0D00            EXECUTE ABEND
         SPACE 2
**********************************************************************
*        AN ERROR HAS OCCURRED THAT SHOULD BE RECORDED, CAUSE
*        THE RSM FRR TO RECEIVE CONTROL AND RECORDING OF THE ERROR
*        TO TAKE PLACE, THEN CONTINUE WITH EXIT.
**********************************************************************
RSMC0DAB EQU   *
         MVI   RCARCRD,SALLNOFR    SET 'LOCK NOT HELD' CODE FOR FRR.
RSMC0D00 EQU   *
         ABEND X'C0D',,,SYSTEM
         BR    R7                  CONTINUE AT PRESET POINT.
         DROP  R6
 TITLE 'IEAVPSIX - SPECIAL IOS FAST-PATH PAGE FIX ROUTINE.'
***********************************************************************
*        AT THIS ENTRY POINT, THE CALLER'S REGISTERS ARE SAVED IN THE
*        RSM LOCAL SAVE AREA. THIS CAN BE SAFELY DONE, SINCE THE CALLER
*        MUST HOLD THE LOCAL LOCK. AT THIS ENTRY POINT, THE RECOVERY
*        ENVIRONMENT IS ESTABLISHED FOR THE FUNCTION.
*
*        REGISTER CONTENTS IN IEAVPSIX:
*
*        R0 - ECB ADDR (ON INPUT), SCRATCH    R8 - SAVE AREA ADDRESS
*        R1 - 1ST HALF OF VSL, SCRATCH        R9 - SCRATCH
*        R2 - 2ND HALF OF VSL, RSMHD ADDR.    R10 - ECB ADDRESS
*        R3 - PVT ADDRESS                     R11 - SCRATCH
*        R4 - CIWA ADDRESS                    R12 - SCRATCH
*        R5 - RCA ADDRESS                     R13 - SCRATCH
*        R6 - BASE REGISTER FOR PROGRAM       R14 - SCRATCH
*        R7 - ASCB ADDRESS                    R15 - SCRATCH
*
***********************************************************************
         ENTRY IEAVPSIX
         DC    CL8'IEAVPSIX'       ENTRY SYMBOL
IEAVPSIX DS    0H
         USING IEAVPSIX,R15
         L     R15,PSAAOLD         ADDRESS OF CURRENT ASCB
         USING ASCB,R15
         L     R15,ASCBASXB        ASXB ADDRESS
         USING ASXB,R15
         L     R15,ASXBSPSA        SAVE AREA VECTOR TABLE ADDR.
         USING WSAL,R15
         L     R15,WSALRSM         RSM LOCAL SAVE AREA ADDR.
         STM   R0,R14,0(R15)       SAVE ALL ENTRY REGISTERS
         LR    R8,R15              RETAIN THE  SAVE AREA ADDRESS
         DROP  R15
         L     R7,PSAAOLD          CURRENT ASCB ADDRESS
         USING ASCB,R7
         L     R3,FLCCVT           RESTORE CVT ADDRESS
         USING CVT,R3
         L     R3,CVTPVTP          ADDRESS OF PAGE VECTOR TABLE
         USING PVT,R3
         BALR  R6,0                ESTABLISH THE PROGRAM BASE REG.
         USING *,R6
         EJECT
*******  ESTABLISH THE RECOVERY ENVIRONMENT
         SETFRR A,FRRAD=PVTPRCV,PARMAD=(R5),WRKREGS=(R5,R15)
*******  PASS THE ENTRY POINT INDICATOR IN THE RCA, SO THAT
*******  THE COMMON ROUTINE WILL KNOW WHERE THE MODULE WAS ENTERED.
         USING RCA,R5
         OI    RCANAME6,RCAPSIX    IEAVPSIX ENTRY INDICATOR
         MVI   RCACSECT,RCACPS     IEAVPSI CSECT IDENTIFIER
         LR    R10,R0              PRESERVE THE INPUT ECB ADDRESS.
XCOMMON2 EQU   *
         OI    RCAFLAGS,RCAPSIER   INDICATE PSI PARAMETER CHECKING
*                                  HAS BEGUN. THIS ALLOWS THE FRR TO
*                                  CONVERT ANY PROGRAM CHECKS
*                                  ENCOUNTERED WHILE CHECKING THE
*                                  ECB TO X'171' ABENDS.
         TM    ECB(R10),X'FF'      REFER TO ECB TO FORCE PAGE-IN       *
                                   (IF NECESSARY)
         EJECT
XALLGT13 SETLOCK OBTAIN,TYPE=SALLOC,RELATED=(SALLOC,IEAVPSI(XALLRL13,XC*
               BSLCRL)),MODE=UNCOND
         OI    RCALOCKS,RCASAL     FOOTPRINT SALLOC LOCK ACQUISITION
         ST    R5,PVTPRCA          STORE THE CURRENT RCA ADDRESS
         LRA   R0,ECB(R10)         TEST ECB ADDRESS PASSED
         BZ    XECBINOK            ECB IS VALID AND ADDRESSABLE
***********************************************************************
*        IF THE ECB ADDRESS IS NOT VALID, RELEASE THE SALLOC LOCK
*        AND REFERENCE THE ECB AGAIN. WHEN THE ECB IS REFERRED TO,
*        THIS WILL ALLOW A PAGE-FAULT TO OCCUR, FORCING THE ECB PAGE
*        TO BE PAGED INTO STORAGE, OR AN ERROR TO OCCUR IF THE ADDRESS
*        IS INVALID.
***********************************************************************
XCBSLCRL SETLOCK RELEASE,TYPE=SALLOC,RELATED=(SALLOC,IEAVPSI(XALLGT13))
         NI    RCALOCKS,X'FF'-RCASAL RESET LOCK HELD FLAG
         B     XCOMMON2            RETURN TO COMMON ROUTINE
         SPACE 2
***********************************************************************
*        WITH THE SALLOC LOCK OBTAINED AND THE ECB SECURELY IN STORAGE,
*        THE REQUEST IS VALIDITY CHECKED AND THE PARAMETERS ARE
*        PREPARED FOR THE PAGE SERVICE BY PLACING THEM IN THE
*        COMMON INTERNAL WORK AREA (CIWA).
***********************************************************************
XECBINOK EQU   *
         L     R13,ECB(R10)        GET THE CONTENTS OF THE ECB AND
         CS    R13,R13,ECB(R10)     SYNCHRONOUSLY STORE IT TO PREVENT
*                                   STEALING BY RSM LSQA ROUTINE.
*****    NOTE: THE ECB BOUNDARY ALIGNMENT REQUIRED FOR POST HAS BEEN
*****    ASSURED BY THE CS INSTRUCTION (WHICH IS BOUNDARY ALIGNED).
*****    SHOULD THE ALIGNMENT REQUIREMENT FOR CS CHANGE, THE ECB
*****    WILL HAVE TO BE CHECKED ANOTHER WAY.
         NI    RCAFLAGS,X'FF'-RCAPSIER  RESET ECB CHECKING FLAG.
*        THE ECB HAS EITHER BEEN STORED OR THE CONTENTS HAVE IN SOME
*        WAY BEEN CHANGED. IN EITHER CASE, THE PAGE CONTAINING THE ECB
*        HAS BEEN CHANGED, PREVENTING THE FRAME FROM BEING STOLEN
*        DURING SUBSEQUENT PROCESSING.
         L     R4,PVTPCIWA         COMMON INTERNAL WORK AREA ADDR.
         USING CIWA,R4
         XC    CIWA(CIWALEN),CIWA  INITIALIZE THE CIWA
         ST    R10,CIWECB          SAVE THE ECB ADDRESS
         OI    CIWFLG1,CIWBREX     INDICATE NON-RSM BRANCH ENTRY CALL
         EJECT
***********************************************************************
*        THIS IS A REGISTER FORM CALL, GET THE VSL DATA INTO THE
*        THE CIWA FROM CONTENTS OF REGISTERS 1 AND 2.
***********************************************************************
         ST    R1,CIWSTRT          SET UP THE VSL IN THE CIWA
         ST    R2,CIWEND1           FROM THE INPUT PARAMETERS.
         STCM  R1,B'1000',CIWOPFL1  SAVE THE OPTION FLAGS FROM THE VSL
         STCM  R2,B'1000',CIWOPFL2   IN THE PAGE SERVICES OP FLAG AREAS
         L     R2,ASCBRSM          GET RSM HEADER ADDRESS FOR PGFIX
         TM    CIWOPFL2,CIWERR+CIWEXTRS    ANY ERRORS?
         BNZ   RC16XX              YES, ERROR RETURN
         L     R15,PVTPFXLD        NO, CALL IEAVFXLD
         STM   R0,R15,PVTWSA11     SAVE NECESSARY REGISTERS
*        THE CALLED SUBROUTINE MUST GUARANTEE THE RETURN OF
*        REGISTER 3.
         BALR  R14,R15             BRANCH (LINK) TO REQUESTED FUNCTION
         LM    R0,R15,PVTWSA11     RESTORE REQUIRED REGISTERS
         MVI   RCACSECT,RCACPS     RESET CSECT IDENTIFIER
         CLI   CIWRETC,0           WAS THE OPERATION SUCCESSFUL?
         BNE   ERRTEST             NO, SET UP TO USE COMMON ERROR CODE.
         TM    CIWFLG1,CIWNOPST    POST TO BE SUPPRESSED?
         BO    LOAD15X             YES, SKIP POST CODE
         L     R14,0(R10)          GET THE ECB CONTENTS
         LTR   R14,R14             HAS THE ECB BEEN WAITED ON ?
         BM    XOPOSTIT            YES, CALL POST TO POST IT.
         L     R15,POSTECB0        NO, SET UP TO SIMULATE POST.
         CS    R14,R15,0(R10)      STORE THE POSTED ECB.
         BE    LOAD15X             POSTED SUCCESSFULLY, CONTINUE.
XOPOSTIT EQU   *                   ECB HAS CHANGED, CALL POST ROUTINE.
         SR    R10,R10             SET POST CODE TO 0
         L     R15,FLCCVT          GET CVT ADDRESS TO LINK TO POST
         USING CVT,R15
*****    NOTE: THE LOCAL LOCK MUST BE HELD IN ORDER FOR POST TO WORK.
         L     R15,CVT0PT01        ADDRESS OF THE POST ROUTINE
         BALR  R14,R15             LINK TO POST (IEAOPT01)
LOAD15X  EQU   *
         SR    R15,R15             PREPARE FOR RETURN BY SETTING
         IC    R15,CIWRETC         UP RETURN CODE
         EJECT
**************************************************************
*        THE FAST PAGE-FIX HAS COMPLETED SUCCESSFULLY, RELEASE
*        THE SALLOC LOCK AND THE RSM FRR COVERAGE, THEN RETURN
*        TO THE CALLER.
**************************************************************
XALLRL13 SETLOCK RELEASE,TYPE=SALLOC,RELATED=(SALLOC,IEAVPSI(XALLGT13))
         LTR   R13,R13             RELEASED LOCK SUCCESSFULLY?
         BZ    XRSMFRR1            YES, CONTINUE
         ABEND X'C0D',,,SYSTEM     NO, RECORD THE ERROR AND CONTINUE
XRSMFRR1 EQU   *
         SETFRR D,WRKREGS=(R1,R2)  REMOVE RSM FRR COVERAGE
         LM    R0,R14,0(R8)        RESTORE CALLER'S REGISTERS
         BR    R14                 RETURN TO CALLER
         EJECT
**************************************************************
*        ALL ERROR RETURNS FROM IEAVPSIX ARE FUNNELED THROUGH THE
*        MAIN EXIT ROUTINE IN IEAVPSI, SO AS TO MINIMIZE STORAGE.
*        THE FOLLOWING CODE ESTABLISHES ADDRESSABILITY IN THE MAIN
*        ROUTINE AND BRANCHES TO IT.
**************************************************************
RC16XX   EQU   *
         MVI   CIWRETC,16          SET UP PARAMETER ERROR CODE
ERRTEST  EQU   *
         LA    R6,PSIXBASE-COMMON00    ESTABLISH ADDRESSABILITY
         BALR  R15,0               TO THE COMMON ROUTINE,
PSIXBASE EQU   *
         LNR   R6,R6               SO THAT THE ERROR EXIT ROUTINES
         AR    R6,R15              CAN BE USED FOR ERROR PROCESSING.
         USING COMMON00,R6
         B     EXIT                GO TO COMMON EXIT HANDLING
         DROP  R6
 TITLE 'IEAVPSIF - SPECIAL IOS PAST-PATH PAGE FREE ROUTINE.'
***********************************************************************
*        AT THIS ENTRY POINT, THE CALLER'S REGISTERS ARE SAVED IN THE
*        RSM LOCAL SAVE AREA. THIS CAN BE SAFELY DONE, SINCE THE CALLER
*        MUST HOLD THE LOCAL LOCK. AT THIS ENTRY POINT, THE RECOVERY
*        ENVIRONMENT IS ESTABLISHED FOR THE FUNCTION.
*
*        REGISTER CONTENTS IN IEAVPSIF:
*
*        R0 - ECB ADDR (ON INPUT), SCRATCH    R8 - SAVE AREA ADDRESS
*        R1 - ADDRESS OF VSL, SCRATCH         R9 - SCRATCH
*        R2 - RSMHD ADDR.                     R10 - SCRATCH
*        R3 - PVT ADDRESS                     R11 - SCRATCH
*        R4 - CIWA ADDRESS                    R12 - SCRATCH
*        R5 - RCA ADDRESS                     R13 - SCRATCH
*        R6 - BASE REGISTER FOR PROGRAM       R14 - SCRATCH
*        R7 - ASCB ADDRESS                    R15 - SCRATCH
*
***********************************************************************
         ENTRY IEAVPSIF
         DC    CL8'IEAVPSIF'       ENTRY SYMBOL
IEAVPSIF DS    0H
         USING IEAVPSIF,R15
         L     R15,PSAAOLD         ADDRESS OF CURRENT ASCB
         USING ASCB,R15
         L     R15,ASCBASXB        ASXB ADDRESS
         USING ASXB,R15
         L     R15,ASXBSPSA        SAVE AREA VECTOR TABLE ADDR.
         USING WSAL,R15
         L     R15,WSALRSM         RSM LOCAL SAVE AREA ADDR.
         STM   R0,R14,0(R15)       SAVE ALL ENTRY REGISTERS
         LR    R8,R15              RETAIN THE SAVE AREA ADDRESS
         DROP  R15
         L     R7,PSAAOLD          CURRENT ASCB ADDRESS
         USING ASCB,R7
         L     R3,FLCCVT           RESTORE CVT ADDRESS
         USING CVT,R3
         L     R3,CVTPVTP          ADDRESS OF PAGE VECTOR TABLE
         USING PVT,R3
         BALR  R6,0                ESTABLISH THE PROGRAM BASE REG.
         USING *,R6
         EJECT
*******  ESTABLISH THE RECOVERY ENVIRONMENT
         SETFRR A,FRRAD=PVTPRCV,PARMAD=(R5),WRKREGS=(R5,R15)
*******  PASS THE ENTRY POINT INDICATOR IN THE RCA, SO THAT
*******  THE COMMON ROUTINE WILL KNOW WHERE THE MODULE WAS ENTERED.
         USING RCA,R5
         OI    RCANAME6,RCAPSIF    IEAVPSIF ENTRY INDICATOR
         MVI   RCACSECT,RCACPS     IEAVPSI CSECT IDENTIFIER
FALLGT13 SETLOCK OBTAIN,TYPE=SALLOC,RELATED=(SALLOC,IEAVPSI(FALLRL13)),*
               MODE=UNCOND
         OI    RCALOCKS,RCASAL     FOOTPRINT SALLOC LOCK ACQUISITION
         ST    R5,PVTPRCA          STORE THE CURRENT RCA ADDRESS
         L     R4,PVTPCIWA         COMMON INTERNAL WORK AREA ADDR.
         USING CIWA,R4
         XC    CIWA(CIWALEN),CIWA  INITIALIZE THE CIWA
         OI    CIWFLG1,CIWBREX     INDICATE NON-RSM BRANCH ENTRY CALLER
         EJECT
***********************************************************************
*        THE REQUEST WAS OF THE LIST FORM, SO THE VSL ENTRY MUST BE
*        VALIDATED. TO DO THIS, IT IS PASSED TO THE 'NEXTVSL' ROUTINE,
*        WHICH IS LOCATED IN THIS MODULE.
***********************************************************************
         LA    R1,0(R1)            CLEAR EXTRANEOUS BITS FROM ADDRESS
         ST    R1,CIWINVSL         SAVE VSL LIST ADDRESS
         USING VSL,R1
         OI    RCAFLAGS,RCAPSIER   INDICATE VSL CHECKING HAS BEGUN.
*                                  THE FRR WILL CONVERT ANY PROGRAM
*                                  CHECKS ENCOUNTERED WHILE CHECKING
*                                  THE VSL TO X'171' ABENDS.
         IC    R15,VSLFLAG1        COPY THE VSL OPTION FLAGS
         STC   R15,CIWOPFL1         FROM THE VSL INTO THE
         IC    R15,VSLFLAG2         PAGE SERVICES OPERATION FLAG
         STC   R15,CIWOPFL2         AREAS IN THE CIWA.
         NI    RCAFLAGS,X'FF'-RCAPSIER  RESET VSL CHECKING FLAG.
         DROP  R1
         S     R1,FVSLLEN          BACK UP CURRENT VSL POINTER FOR
         ST    R1,CIWCUVSL          USE BY NEXTVSL ROUTINE AND SAVE IT
         LA    R15,NEXTVSL         NEXTVSL ENTRY ADDRESS
         BALR  R14,R15             GO VALIDATE THIS VSL ENTRY
         LTR   R15,R15             IS IT VALID?
         BNZ   RC16GF              NO, ERROR
         L     R2,ASCBRSM          GET RSM HEADER ADDRESS FOR PGFREE
         TM    CIWOPFL2,CIWERR+CIWEXTRS    ANY ERRORS?
         BNZ   RC16GF              YES, ERROR RETURN
         L     R15,PVTPFREE        PAGE-FREE FUNCTION ADDRESS
***********************************************************************
*        THIS ROUTINE SAVES THE NECESSARY REGISTERS PRIOR TO LINKING TO
*        THE SUBROUTINE WHOSE ADDRESS IS IN REGISTER 15. ON RETURN, IT
*        RE-ESTABLISHES THE CSECT ID IN THE RCA AND RETURNS TO ITS
*        INVOKER VIA REGISTER 7.
***********************************************************************
         STM   R0,R15,PVTWSA11    SAVE NECESSARY REGISTERS
*        THE CALLED SUBROUTINE MUST GUARANTEE THE RETURN OF
*        REGISTER 3.
         BALR  R14,R15             BRANCH (LINK) TO REQUESTED FUNCTION
         LM    R0,R15,PVTWSA11      RESTORE REQUIRED REGISTERS
         MVI   RCACSECT,RCACPS     RESET CSECT IDENTIFIER
         CLI   CIWRETC,0           WAS THE PAGEFREE SUCCESSFUL?
         BNE   PSIFERR             NO, GO TO ERROR PROCESSOR
         SR    R15,R15             PREPARE FOR RETURN BY SETTING
         IC    R15,CIWRETC         UP RETURN CODE
         EJECT
**********************************************************************
*        THIS IS THE NORMAL EXIT FOR IEAVPSIF.
*        THE SALLOC LOCK IS RELEASED, AND THE RECOVERY SHIELD IS
*        LIFTED AT THIS POINT.
**********************************************************************
FALLRL13 SETLOCK RELEASE,TYPE=SALLOC,RELATED=(SALLOC,IEAVPSI(FALLGT13))
         LTR   R13,R13             RELEASED LOCK SUCCESSFULLY?
         BZ    FRSMFRR1            YES, CONTINUE
         ABEND X'C0D',,,SYSTEM     NO, RECORD THE ERROR AND RETURN
FRSMFRR1 EQU   *
         SETFRR D,WRKREGS=(R1,R2)  REMOVE RSM FRR COVERAGE
         LM    R0,R14,0(R8)        RESTORE CALLER'S REGISTERS
         BR    R14                 RETURN TO CALLER
         EJECT
*******************************************************************
*        ALL ERROR RETURNS FROM IEAVPSIF ARE FUNNELED THROUGH THE
*        MAIN EXIT ROUTINE IN IEAVPSI, SO AS TO MINIMIZE STORAGE.
*        THE FOLLOWING CODE ESTABLISHES ADDRESSABILITY IN THE MAIN
*        ROUTINE AND BRANCHES TO IT.
*******************************************************************
RC16GF   EQU   *
         MVI   CIWRETC,16          SET UP PARAMETER ERROR CODE
         SPACE 3
PSIFERR  EQU   *
         LA    R6,PSIFBASE-COMMON00    ESTABLISH ADDRESSABILITY
         BALR  R15,0               TO THE COMMON ROUTINE CODE SO
PSIFBASE EQU   *
         LNR   R6,R6               THAT THE COMMON ERROR PROCESSING
         AR    R6,R15              ROUTINES CAN BE USED.
         USING COMMON00,R6
         B     EXIT                BRANCH TO THE COMMON EXIT PROCESSOR.
         DROP  R6
 TITLE 'VSL VALIDATION ROUTINE FOR LIST FORM REQUESTS'
**********************************************************************
*        THIS ROUTINE OBTAINS THE NEXT VSL IN A VSL LIST THAT
*        IS ADDRESSED FROM THE CIWA. IT WILL THEN VALIDITY CHECK
*        THIS VSL ENTRY AND PASS IT BACK BY STORING IT
*        IN THE COMMON INTERNAL WORK AREA (CIWA).
**********************************************************************
         ENTRY NEXTVSL
         DC    CL8'NEXTVSL'       ENTRY POINT SYMBOL
NEXTVSL  DS    0H
         USING NEXTVSL,R15
         USING PVT,R3
         STM   R5,R13,PVTSAVE      SAVE CALLER'S REGISTERS
         USING CIWA,R4
TESTLAST TM    CIWIFLG2,CIWILAST   LAST ENTRY ALREADY PROCESSED?
         BO    VSLDONE             YES, EXIT
         L     R5,CIWCUVSL         NO, GET CURRENT VSL ENTRY ADDRESS
         LA    R5,VSLLEN(R5)        ADD THE LENGTH OF A VSL ENTRY
         LR    R10,R5              SAVE THE VSL'S VIRTUAL ADDRESS
ADDRTST0 EQU   *
         TM    CIWCUVSL+L'CIWCUVSL-1,WORDBDRY     IF THE VSL IS NOT
         BNZ   ERR4                ON A WORD BOUNDARY, ERROR RETURN.
         ST    R5,CIWCUVSL         STORE ADDRESS OF THE NEW CURRENT VSL
ADDRTEST LRA   R6,0(R5)            GET REAL STORAGE ADDRESS OF VSL
         BNZ   ERR4                CANNOT BE RESOLVED, ERROR
         CLM   R5,VBNMASK,PVTLPRIV TEST FOR VSL ADDRESS IN PRIVATE AREA
         BL    KEYCHECK            VSL IS IN NUCLEUS, SKIP CHECKS
         LR    R7,R6               CHECK TO SEE IF THE VSL IS IN FIXED
         SRL   R7,12                STORAGE BY LOCATING THE ASSOCIATED
         L     R9,PVTPFTP           PAGE FRAME TABLE ENTRY AND CHECKING
         SLL   R7,4                 TO SEE IF THE PAGE IS FIXED.
         LA    R9,0(R9,R7)         ADDRESS OF THE PFTE
         USING PFTE,R9
         LH    R7,PFTFXCT          GET AND TEST THE FIX COUNT FOR THE
         LTR   R7,R7                FRAME, CHECKING FOR A ZERO COUNT
         BZ    LOCCHECK            THE PAGE IS NOT FIXED, CONTINUE
         TM    CIWOPFL1,CIWFREE    IF NOT PGFREE, CONTINUE WITH
         BNO   KEYCHECK             NORMAL PROCESSING, OTHERWISE,
         BCT   R7,KEYCHECK         IF THE FIX COUNT IS > 1, CONTINUE
*********************************************************************
*        THE VSL IS FOR A PAGE FREE OF A PAGE HAVING A FIX COUNT OF
*        EXACTLY ONE. THE VSL ADDRESSES MUST NOW BE CHECKED TO
*        ASCERTAIN IF THE PAGE FREE WILL FREE THE VSL AS WELL.
*********************************************************************
         USING VSL,R10
         SR    R11,R11             GET THE VBN OF THE FRAME
         ICM   R11,VBNHWRD,PFTVBN CONTAINING THE VSL.
         LA    R13,16(R11)         GENERATE THE VBN OF THE NEXT FRAME.
         SR    R12,R12             IF THE VBN OF THE FRAME CONTAINING
         ICM   R12,ADDRMASK,VSLEND1A THE VSL IS HIGHER THAN
         BCTR  R12,0                THE ENDING ADDRESS OF THE
         SLL   R11,8                AREA TO BE FREED (VSLEND1A
         CR    R11,R12              -1) THEN THE VSL IS ABOVE THE
         BH    KEYCHECK              AREA TO BE FREED, CONTINUE.
         CLM   R13,VBNHWRD,VSLSTRTA  IF IT IS BELOW THE START ADDRESS
         BNH   KEYCHECK              OF THE AREA TO BE FREED, CONTINUE.
         B     ERR4                OTHERWISE, THE VSL WOULD BE FREED
*                                  BY THIS REQUEST, PARAMETER ERROR.
         SPACE
LOCCHECK EQU   *
         TM    PFTFLAG1,PFTLSQA+PFTVRALC    NOT FIXED, IT IT AN L/SQA  *
                                    FRAME OR IS THE PAGE IN V=R AREA?
         BZ    ERR4                NO, ERROR RETURN
KEYCHECK EQU   *
         CLI   CIWKEY,0            IS THE CALLER'S KEY EQUAL TO ZERO?
         BE    SECNDWD             YES, SKIP THE REMAINING CHECKS
*                                  NO, SET UP TO DO AN ISK ON THE
         N     R6,ISKPREP          'REAL' STORAGE ADDRESS OF THE VSL
         ISK   R9,R6               GET THE KEY OF THE VSL ENTRY
         N     R9,KEYMASKW         TURN OFF THE EXTRANEOUS BITS
         CLM   R9,B'0001',CIWKEY   DOES THE CALLER'S KEY MATCH?
         BNE   ERR4                NO, ERROR RETURN
         SPACE 2
**********************************************************************
*        ONE WORD OF THE VSL PASSES THE TEST, IF IT WAS THE FIRST
*        WORD, AND THE VSL SPANS A PAGE, THE SECOND WORD MUST ALSO
*        BE VALIDATED.
**********************************************************************
SECNDWD  EQU   *
         C     R5,CIWCUVSL         IS THIS THE FIRST PASS FOR THIS VSL?
         BNE   STORVSL             NO, STORE THE ENTRY AND EXIT
         LA    R7,L'VSLSTRT(R5)    YES, GET THE ADDRESS OF THE SECOND
         LR    R9,R7                PART OF THE VSL ENTRY AND CHECK
         N     R7,PAGEBDRY          IT FOR RESIDENCE ON A NEW PAGE
**********************************************************************
*        IF THE VSL SPANS A PAGE, THE STARTING ADDRESS MUST BE
*        X'...FFC' (I.E., X'...000'-4). THEREFORE, IF 4 IS ADDED TO THE
*        ADDRESS AND ALL BITS <4096 ARE 'AND'ED OFF, THE ADDRESS WILL
*        REMAIN UNCHANGED IF AND ONLY IF THE VSL SPANS A PAGE.
**********************************************************************
         CR    R7,R9               DOES THE VSL SPAN A PAGE?
         BNE   STORVSL2            NO, STORE THE VSL
GETPAGE  EQU   *                   SINCE THE VSL ENTRY SPANS A PAGE, WE
         LR    R5,R9               MUST PASS THE SECOND WORD ADDRESS
         B     ADDRTEST             THROUGH ALL THE SAME CHECKS
         EJECT
**********************************************************************
*        THE VSL SATISFACTORILY PASSES THE VALIDITY CHECKS, STORE
*        IT IN THE CIWA INTERNAL VSL FIELD.
**********************************************************************
STORVSL  EQU   *
         L     R5,CIWCUVSL         RESTORE THE VSL ADDRESS
STORVSL2 EQU   *
         MVC   CIWVSL,0(R5)        MOVE THE VSL INTO THE CIWA
         TM    CIWIFLG2,CIWINULL   NULL VSL ENTRY?
         BO    TESTLAST            YES, RECYCLE THROUGH IF ANY OTHERS
         TM    CIWIFLG1,CIWICONT   CONTINUED VSL?
         BO    GETADDR             YES, CONTINUE
         SR    R15,R15             NO, RETURN CODE = 0
         LM    R5,R13,PVTSAVE      RESTORE CALLER'S REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE 2
**********************************************************************
*        THE VSL ENTRY DOES NOT PASS THE VALIDITY CHECK, SET
*        THE ERROR CODE OF 4 AND RETURN.
**********************************************************************
ERR4     LA    R15,4               SET RETURN CODE TO 4
         LM    R5,R13,PVTSAVE      RESTORE CALLER'S REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE 2
**********************************************************************
*        THERE ARE NO MORE VSL ENTRIES LEFT TO PROCESS, RETURN
*        A CODE OF EIGHT TO ADVISE THE CALLER OF THIS CONDITION.
**********************************************************************
VSLDONE  EQU   *
         LA    R15,8               SET RETURN CODE = 8
         LM    R5,R13,PVTSAVE      RESTORE CALLER'S REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE 2
**********************************************************************
*        A CONTINUATION VSL ENTRY HAS BEEN FOUND, GET THE NEXT VSL
*        ADDRESS FROM THE FIRST WORD OF THE CONTINUATION ENTRY.
**********************************************************************
GETADDR  EQU   *
         L     R5,CIWSTRT          SET UP TO HANDLE CONTINUATION ENTRY
         B     ADDRTST0            AND GO ON WITH PROCESS.
 TITLE 'IEAVPSI -- PAGE SERVICES INTERFACE ROUTINE'
**********************************************************************
*        THESE ARE THE CONSTANTS AND WORK AREAS REQUIRED BY THE ROUTINE
**********************************************************************
WORDBDRY EQU   3                   MASK FOR WORD-ALIGNMENT TESTING
VBNHWRD  EQU   3                   MASK TO EFFECT A 'CLH' ON A VBN
KEYMASK  EQU   X'F0'          MASK TO REMOVE EXTRANEOUS BITS FROM KEY
ECB      EQU   0                   DISPLACEMENT TO ECB
ADDRMASK EQU   7                   MASK FOR STORING/ LOADING ADDRESSES
VBNMASK  EQU   6              MASK TO COMPARE ADDRS AGAINST RBN/VBN'S
SALLNOFR EQU   6                   RETURN CODE FOR FRR TO INDICATE THAT*
                AN ATTEMPT WAS MADE TO FREE A LOCK NOT HELD.
PGFIXERR EQU   X'1C'             RETURN CODE TO INFORM FRR THAT PGFIX  *
                                   COULD NOT FIX THE ECB.
FVSLLEN  DC    A(VSLLEN)           LENGTH OF A VSL ENTRY
ISKPREP  DC    X'FFFFFFF0'    MASK TO PREPARE AN ADDRESS FOR AN 'ISK'
KEYMASKW DC    X'000000F0'    MASK FOR ISOLATING 4-BIT KEY AFTER 'ISK'
PAGEBDRY DC    X'FFFFF000'         MASK FOR PAGE BOUNDARY DETERMINATION
POSTECB0 DC    X'40000000'         IMAGE OF A POSTED ECB WITH CODE=0
X171     DS    0H                  ABEND CODE FOR PARAMETER ERRORS,
         DC    X'0171'              USED TO TEST FOR ABEND TYPE
CHKRC4   DS    0H                   INDICATES ECB POSTING REQUIRED
         DC    X'0004'              USED ON ERROR PATH
         EJECT
         CVT    DSECT=YES
         IHAPVT
         EJECT
         IHAPFTE
         EJECT
         IHAVSL
         EJECT
         IEACIWA
RICIWLEN EQU   *-CIWCURPG    LENGTH OF CIWA TO BE RE-INITIALIZED       *
               WHEN TWO PAGE SERVICES ROUTINES ARE CALLED IN SEQUENCE
         EJECT
         IHARCA
         EJECT
         IHAASCB
         EJECT
         IHAASXB
         EJECT
         IHAFRRS
         EJECT
         IHAPSA
         EJECT
         IHAWSAVT CLASS=LOCAL
         EJECT
         IHAPCBR
         EJECT
         IKJTCB
         EJECT
         IKJRB
         EJECT
*/*IGC112: CHART */
*/* E IGC112 */
*/* S SETFRR:CREATE FRR ELEMENT FOR RSM */
*/* P INIT. RCA WITH MODULE ID AND ENTRY POINT FLAG */
*/* S SETLOCK:GET THE SALLOC LOCK */
*/* P SET SALLOC FLAG IN RCA. STORE RCA ADDR IN PVT */
*/* P CLEAR CIWA. CIWKEY = CALLERS KEY FROM RB PSW */
*/* P PLACE R0 AND R1 IN INTERNAL VSL, INDICATE SVC112 CALL */
*/* D (NO,,YES,RC4) START ADDR > END ADDR+1 */
*/* S TESTAUTH: CHECK CALLERS AUTHORIZATION. R14-R3 CHANGED */
*/* D (NO,,YES,SETUP) AUTHORIZED CALLER ? */
*/* D (NO,,YES,RC4) AREA TO BE RELEASED COMMON AREA ? */
*/*SETUP: P SET UP THE CIWA FOR A PAGE RELEASE */
*/* S IEAVRELS: PAGE RELEASE FUNCTION */
*/* P RESET MODULE ID IN RCA */
*/* P R15 = RETURN CODE IN CIWA  */
*/*EXIT112: S SETLOCK:RELEASE SALLOC LOCK */
*/* D (YES,EXIT112A,NO,%IMMEXIT) LOCK RELEASED O.K. ? */
*/*EXIT112A: S SETFRR:REMOVE RSM FRR FROM STACK */
*/* R RETURN TO CALLER */
*/*%IMMEXIT: S (,EXIT112A) ABEND: RSM FRR VIA ABEND X'C0D' */
*/*RC4: P (,EXIT112) SET RETURN CODE = 4 */
*/*IGC112: END */
*/*MAIN: CHART */
*/* E (,%ENTRY1) IGC113 */
*/* E (,%ENTRY2) IEAVPSIB */
*/*%ENTRY1: P MOVE CONTENTS OF REGISTER 15 TO REGISTER 2 FOR
*/*COMMON PROCESSING */
*/* S SETFRR:CREATE FRR ELEMENT FOR RSM */
*/* P (,COMMON) INIT. RCA WITH ENTRY POINT FLAG */
*/*%ENTRY2: P SAVE CALLERS REGISTERS IN RSM LOCAL SAVE AREA */
*/* S SETFRR:CREATE FRR ELEMENT FOR RSM */
*/* P INIT. RCA WITH ENTRY POINT FLAG */
*/*COMMON: P SET MODULE ID IN THE RCA */
*/* D (YES,,NO,SALLGT13) IS THERE AN INPUT ECB? */
*/* D (YES,RC16X,NO,COMMON2) ECBIND OPTION (NEGATIVE ECB ADDR) ? */
*/*COMMON2: P REFERENCE INPUT ECB TO PAGE IT INTO STORAGE */
*/*SALLGT13: S SETLOCK:GET SALLOC LOCK */
*/* P SET SALLOC FLAG IN RCA AND POINT THE PVT TO THE RCA */
*/* D (YES,,NO,%CCIWA) IS THERE AN ECB GIVEN ? */
*/* P GET THE REAL STORAGE ADDRESS OF THE ECB */
*/* D (YES,ECBINOK,NO,GETECBIN) ECB IN STORAGE ? */
*/*GETECBIN: S SETLOCK:RELEASE SALLOC LOCK */
*/* P (,COMMON2) RESET SALLOC FLAG IN RCA */
*/*ECBINOK: P STORE ECB IN ECB TO PREVENT
*/*STEALING OF FRAME. */
*/*%CCIWA: P CLEAR CIWA TO 0 AND SET CIWECB = INPUT ECB ADDR */
*/* D (YES,SVC113EP,NO,) ENTERED VIA SVC 113 ? */
*/* P (,REGTST) SET (IEAVPSIB) BRANCH ENTRY FLAG IN THE CIWA */
*/*SVC113EP: P SET SVC 113 ENTRY FLAG IN THE CIWA */
*/* P GET THE CALLERS KEY FROM RB PSW  */
*/*REGTST: D (YES,,NO,LIST) REGISTER FORM ENTRY */
*/* P SET UP THE CIWA'S VSL FROM REGISTERS 1 AND 2 */
*/* D (YES,,NO,MOVEFLGS) END ADDRESS OMITTED ? */
*/* P GENERATE A ONE BYTE REQUEST ENDING ADDRESS */
*/*MOVEFLGS: P (,TSTRSAOP) COPY INPUT OPTION FLAGS INTO PAGE SERVICES
*/*AREAS IN CIWA */
*/*TSTRSAOP: D (NO,,YES,RC16X) REAL ADDR OPTION REQUESTED */
*/* D (YES,,NO,BRANCH) ENTERED AT IGC113 (SVC 113) ? */
*/* D (YES,,NO,SETTCB) FIX OR FREE REQUEST ? */
*/* S TESTAUTH:TEST REQUESTORS AUTHORIZATION. R14-R3 CHANGED */
*/* D (YES,,NO,RC16E) CALLER AUTHORIZED ? */
*/*SETTCB: P STORE THE INPUT TCB ADDR IN THE CIWA */
*/*ECBCHK: D (YES,ECBONWRD,NO,%FIXTEST) INPUT ECB SUPPLIED ? */
*/*%FIXTEST: D (YES,RC16X,NO,SETRSMHD) PGFIX REQUEST ? */
*/*ECBONWRD: D (YES,,NO,RC16X) ECB ON A FULLWORD BOUNDARY ? */
*/* D (NO,,YES,RC16X) PGOUT REQUEST ? */
*/* D (NO,,YES,SETRSMHD) KEY ZERO CALLER ? */
*/* D (YES,,NO,RC16X) ECB HAVE CORRECT PROTECT KEY ? */
*/*SETRSMHD: P GET THE RSM HEADER ADDRESS FOR THE ROUTER */
*/* R GO TO ROUTER RTN. */
*/*RC16E: P SET UP RETURN CODE = 16 AND ABEND CODE = X'271' */
*/* R EXIT ROUTINE AT LOAD15B */
*/*LIST: P STORE THE VSL ADDR IN THE CIWA AND COPY THE OPTION FLAGS */
*/* P CIWCUVSL = (VSL ADDR - 8) FOR CALL TO NEXTVSL */
*/* S NEXTVSL:CHECK FIRST VSL ENTRY AND STORE IN CIWA */
*/* D (YES,TSTRSAOP,NO,RC16X) VSL VALIDATION SUCCEED ? */
*/*BRANCH: P STORE THE INPUT TCB ADDR IN THE CIWA */
*/* D (YES,,NO,ECBCHK) TCB ADDRESS SUPPLIED ? */
*/* D (YES,ECBCHK,NO,RC16X) TCB ADDR ON FULLWORD BOUNDARY ? */
*/*RC16X: P SET THE RETURN CODE (CIWRETC) = 16 */
*/* R GO TO EXIT RTN. */
*/*MAIN: END */
*/*ROUTER: CHART */
*/*IEAVPSIX: E IOS FAST-FIX */
*/*         P SAVE REGISTERS IN RSM LOCAL SAVE AREA */
*/*         S SETFRR: ESTABLISH RSM RECOVERY */
*/*         P SET CSECT AND ENTRY FLAGS IN RCA */
*/*XCOMMON2: P SET PSI VULNERABLE FLAG IN EVENT OF PROGRAM CHECK */
*/*         P REFERENCE THE ECB TO PAGE-FAULT IT INTO STORAGE */
*/*         S SETLOCK: OBTAIN THE SALLOC LOCK */
*/*         P STORE RCA ADDR., SET SALLOC LOCK FLAG */
*/*         D (NO,XCBSLCRL,YES,XECBINOK) ECB IN REAL STORAGE ? */
*/*XCBSLCRL: S (,XCOMMON2) SETLOCK: RELEASE THE SALLOC LOCK */
*/*XECBINOK: P STORE THE ECB IN ITSELF TO PREVENT PAGE STEALING */
*/*         P RESET PSI VULNERABLE FLAG, CLEAR THE CIWA */
*/*         P SAVE THE ECB ADDR. IN THE CIWA, INDICATE BRANCH ENTRY */
*/*         P STORE THE VSL IN THE CIWA */
*/*         D (NO,,YES,RC16XX) VSL NULL OR IN ERROR ? */
*/*         S IEAVFXLD: FIX THE PAGE(S) REQUESTED */
*/*         P RESET CSECT ID IN THE CIWA */
*/*         D (YES,,NO,ERRTEST) PGFIX SUCCEED ? */
*/*         D (NO,,YES,LOAD15X) POST SUPPRESSED ? */
*/*         D (NO,,YES,XOPOSTIT) ECB BEEN WAITED ON YET ? */
*/*         P COMPARE AND SWAP ECB (POST CODE = 0) */
*/*         D (YES,LOAD15X,NO,XOPOSTIT) ECB STORED ? */
*/*XOPOSTIT: S (,LOAD15X) POST: POST THE ECB, CODE = 0 */
*/*LOAD15X:  P SET UP RETURN CODE FROM THE CIWA */
*/*         S SETLOCK: RELEASE THE SALLOC LOCK */
*/*         D (NO,,YES,XRSMFRR1) LOCK RELEASED OK? */
*/*         S ABEND: ABEND X'C0D' TO RECORD THE ERROR. */
*/*XRSMFRR1: S SETFRR: REMOVE RSM RECOVERY */
*/*         R RESTORE REGS AND RETURN */
*/*RC16XX:   P (,ERRTEST) SET RETURN CODE = 16 */
*/*ERRTEST:  P ESTABLISH ADDRESSABILITY TO THE MAINLINE */
*/*         R GO TO COMMON EXIT ROUTINE */
*/*IEAVPSIF: E IOS FAST-FREE */
*/*         P SAVE REGISTERS IN RSM LOCAL SAVE AREA */
*/*         S SETFRR: ESTABLISH RSM RECOVERY */
*/*         P SET CSECT AND ENTRY FLAGS IN RCA */
*/*         S SETLOCK: OBTAIN THE SALLOC LOCK */
*/*         P STORE RCA ADDR., SET SALLOC LOCK FLAG */
*/*         P CLEAR THE CIWA, INDICATE BRANCH ENTRY */
*/*         P STORE THE VSL IN THE CIWA */
*/*         S NEXTVSL: VALIDATE THE FIRST VSL ENTRY */
*/*         D (YES,,NO,RC16GF) IS IT VALID ? */
*/*         D (NO,,YES,RC16GF) VSL NULL OR IN ERROR ? */
*/*         S IEAVFREE: FREE THE PAGE(S) REQUESTED */
*/*         P RESET CSECT ID IN THE CIWA */
*/*         D (YES,,NO,PSIFERR) PGFREE SUCCEED ? */
*/*         P SET UP RETURN CODE FROM THE CIWA */
*/*         S SETLOCK: RELEASE THE SALLOC LOCK */
*/*         D (NO,,YES,FRSMFRR1) LOCK RELEASED OK? */
*/*         S ABEND: ABEND X'C0D' TO RECORD THE ERROR. */
*/*FRSMFRR1: S SETFRR: REMOVE RSM RECOVERY */
*/*         R RESTORE REGS AND RETURN */
*/*RC16GF:   P (,PSIFERR) SET RETURN CODE = 16 */
*/*PSIFERR:  P ESTABLISH ADDRESSABILITY TO THE MAINLINE */
*/*         R GO TO COMMON EXIT ROUTINE */
*/* E IEAVPSII */
*/* P SAVE REGISTERS IN PVT (WSA4) */
*/* P CLEAR CIWA. SET MODULE ID AND ENTRY POINT FLAG IN RCA */
*/* P SET UP THE CIWA: STORE TCB ADDR. AND ECB ADDR. */
*/* P ESTABLISH COMMON ADDRESSABILITY */
*/* D (NO,RC16,YES,) REGISTER FORM ENTRY ? */
*/* P COPY OPTION FLAGS, STORE VSL FROM REGS. 1 & 2 */
*/* P SET ENTRY POINT FLAG IN CIWA, GET RSM HEADER ADDR. */
*/* D (YES,PSIIPOUT,NO,) PGOUT REQUEST ? */
*/* D (YES,PSIILOAD,NO,) PGFIX REQUEST ? */
*/* D (NO,,YES,PSIIFREE) PGFREE REQUEST ? */
*/* D (NO,,YES,PSIILOAD) PGLOAD REQUEST ? */
*/* D (NO,RC16,YES,PSIIRLSE) PGRLSE REQUEST ? */
*/*ROUTER: E ENTRY TO THE ROUTER RTN. */
*/* D (NO,,YES,RC16) ANY ERRORS INDICATED ? */
*/* D (NO,,YES,ERRTST7) PGOUT REQUEST ? */
*/* D (NO,,YES,ERRTST2) PGFIX REQUEST ? */
*/* D (NO,,YES,ERRTST4) PGFREE REQUEST ? */
*/* D (NO,,YES,ERRTST3) PGLOAD REQUEST ? */
*/* D (NO,,YES,ERRTST6) PGRLSE REQUEST ? */
*/*RC16: P SET THE RETURN CODE (CIWRETC) = 16 */
*/*EXIT: R GO TO EXIT RTN. */
*/*ERRTST2: D (NO,ERRTST2A,YES,RC16) PGFREE BIT ON? */
*/*ERRTST2A: D (NO,PSIILOAD,YES,RC16) PGOUT OR KEEPREAL OPTION ? */
*/*PSIILOAD: D (YES,,NO,CFXLD) RELEASE OPTION SPECIFIED ? */
*/* S IEAVRELS:PGRLSE FUNCTION (VIA SUBROUTE) */
*/* D (YES,,NO,EXIT) PGRLSE SUCCEED ? */
*/* P (,CFXLD) RESET FIELDS IN CIWA CHANGED BY PAGE RELEASE SET UP FOR
*/*PGLOAD */
*/*CFXLD: S (,EXIT) IEAVFXLD:PGFIX/PGLOAD FUNCTION (VIA SUBROUTE) */
*/*ERRTST3: D (YES,RC16,NO,ERRTST2) PGFREE OR LONG-FIX OPTION ? */
*/*ERRTST4: D (NO,,YES,RC16) PGOUT OR KEEPREAL OPTION ? */
*/* D (NO,PSIIFREE,YES,RC16) PGLOAD BIT ON? */
*/*PSIIFREE: S IEAVFREE:PGFREE FUNCTION (VIA SUBROUTE) */
*/* D (YES,,NO,EXIT) PAGE FREE SUCCEED ? */
*/* D (YES,,NO,EXIT) RELEASE OPTION SPECIFIED ? */
*/* P (,PSIIRLSE) RESET CIWA FIELDS CHANGED BY PAGE FREE SET UP FOR
*/*PAGE RELEASE */
*/*PSIIRLSE: S IEAVRELS:PGRLSE FUNCTION (VIA SUBROUTE) */
*/* D (NO,EXIT,YES,) RETURN CODE = 4 AND PAGE FREE ? */
*/* P (,EXIT) ALTER CIWRETC TO REFLECT SUCCESSFUL OPERATION */
*/*ERRTST6: D (NO,,YES,RC16) ENTRY MADE VIA SVC 113 ? */
*/* D (YES,RC16,NO,PSIIRLSE) PGOUT, LONG-FIX OR KEEPREAL OPTION ? */
*/*ERRTST7: D (NO,PSIIPOUT,YES,RC16) LONG-FIX OPTION ? */
*/*PSIIPOUT: S (,EXIT) IEAVOUT:PGOUT FUNCTION (VIA SUBROUTE) */
*/*ROUTER: END */
*/*EXITRTN: CHART */
*/*EXIT: E ENTRY TO EXIT RTN. */
*/* D (YES,%AB028,NO,%RC016) RETURN CODE > 16 ? */
*/*%AB028: P (,LOAD15B) SETUP FOR X'028' ABEND */
*/*%RC016: D (YES,%AB171,NO,%RC012) RETURN CODE = 16 ? */
*/*%AB171: P (,LOAD15B) SETUP FOR X'171' ABEND */
*/*%RC012: D (YES,EXIT00,NO,%CHCKRC8) RETURN CODE = 0 OR 12 ? */
*/*EXIT00: D (YES,,NO,LOAD15) INPUT ECB GIVEN ? */
*/* D (NO,,YES,LOAD15) POST TO BE SUPPRESSED ? */
*/* D (YES,LOAD15,NO,) PAGE FREE REQUEST ? */
*/* D (NO,,YES,GOPOSTIT) ECB WAITED ON YET ? */
*/* P (,LOAD15) SIMULATE POST WITH RETURN CODE = 0, USING COMPARE &
*/*SWAP. */
*/*GOPOSTIT: S POST: POST REQUESTORS ECB WITH POST CODE OF 0 */
*/*LOAD15: P R15 = RETURN CODE (CIWRETC) */
*/* D (NO,NOINTL,YES,INTERNAL) ENTERED VIA IEAVPSII ? */
*/*NOINTL: S SETLOCK:RELEASE SALLOC LOCK */
*/* D (YES,NRSMFRR1,NO,) LOCK RELEASED O.K. ? */
*/* S (,NRSMFRR1) ABEND: RSM FRR VIA ABEND X'C0D' */
*/*NRSMFRR1: S SETFRR:CANCEL RSM RECOVERY COVERAGE */
*/* P RESTORE CALLERS REGISTERS FROM RSM LOCAL SAVE AREA (NOT DONE
*/*FOR SVC 113) */
*/*%RETURN: R RETURN TO CALLER */
*/*INTERNAL: P TURN OFF ENTRY POINT FLAG IN THE RCA */
*/* P (,%RETURN) RESTORE REGISTERS FROM PVT (WSA4) */
*/*%CHCKRC8: D (YES,EXIT08,NO,EXIT04) RETURN CODE (CIWRETC) = 8 ? */
*/*EXIT08: D (YES,%EXIT8,NO,LOAD15A) IS THERE AN ECB ? */
*/*%EXIT8: P SAVE CIWRETC. SET UP THE CIWA TO PAGE FIX THE INPUT ECB */
*/* S IEAVFXLD:FIX THE INPUT ECB */
*/* P RESET MODULE ID IN RCA */
*/* P RESTORE SAVED RETURN CODE */
*/* D (YES,,NO,RSMFRR2) PAGE FIX SUCCEED ? */
*/* P (,LOAD15) TURN ON THE FREE ECB FLAG IN THE ROOT PCB FOR THE
*/*REQUEST */
*/*EXIT04: D (YES,,NO,NOPOST) WAS AN ECB SUPPLIED ? */
*/* S (,NOPOST) POST:POST REQUESTORS ECB WITH A POST CODE OF 4 */
*/*NOPOST: P (,LOAD15B) SET UP TO ABEND WITH CODE = X'171' */
*/*LOAD15B: P (,LOAD15A) RETURN CODE = CIWRETC */
*/*LOAD15A: D (NO,,YES,RCAFLAG) ENTERED VIA IEAVPSII ? */
*/* S SETLOCK:FREE THE SALLOC LOCK */
*/* D (YES,NRSMFRR3,NO,%RSMFRR3) LOCK RELEASED O.K. ? */
*/*%RSMFRR3: S (,NRSMFRR3) ABEND: RSM FRR VIA ABEND X'C0D' */
*/*NRSMFRR3: S SETFRR:CANCEL RSM RECOVERY COVERAGE */
*/*ABEND: R ABEND WITH PRESET CODE */
*/*RCAFLAG: P (,ABEND) TURN OFF ENTRY POINT FLAG IN THE RCA */
*/*RSMFRR2: P SET UP TO ABEND WITH X'028' AFTER X'C0D' CALL */
*/* S (,LOAD15B) ABEND: RSM FRR VIA ABEND X'C0D' */
*/*EXIT: END */
*/*NEXTVSL: CHART */
*/* E NEXTVSL */
*/* N THIS SUBROUTINE IS CALLED BY ALL PAGE SERVICES MODULES. */
*/* N IT MUST ONLY BE CALLED FOR LIST FORM REQUESTS */
*/* P OBTAIN THE CURRENT ENTRY STORED IN THE CIWA */
*/*TESTLAST: D (NO,,YES,VSLDONE) IS IT THE LAST ENTRY */
*/* P SET UP TO TEST THE FIRST HALF OF THE VSL */
*/*ADDRTST0: D (YES,,NO,ERR4) VSL ON A WORD BOUNDARY ? */
*/* P STORE ADDRESS OF NEXT VSL IN CIWCUVSL */
*/*ADDRTEST: P GET THE REAL STORAGE ADDRESS OF THE VSL HALF UNDER TEST
*/**/
*/* D (YES,,NO,ERR4) IS IT IN STORAGE ? */
*/* D (NO,,YES,KEYCHECK) IS IT IN THE NUCLEUS ? */
*/* P GET PFTE FOR REAL FRAME OCCUPIED BY THE VSL HALF UNDER TEST */
*/* D (NO,LOCCHECK,YES,%FXCHECK) IS THE STORAGE FIXED ? */
*/*%FXCHECK: D (YES,,NO,KEYCHECK) PAGE FREE REQUEST ? */
*/* D (YES,,NO,KEYCHECK) FIX COUNT = 1 ? */
*/* D (YES,ERR4,NO,KEYCHECK) VSL IN PAGE TO BE FREED ? */
*/*LOCCHECK: D (NO,ERR4,YES,KEYCHECK) IS IT SQA, LSQA OR V=R ? */
*/*KEYCHECK: D (NO,,YES,SECNDWD) KEY ZERO CALLER ? */
*/* P GET THE STORAGE PROTECT KEY OF THIS VSL HALF */
*/* D (YES,,NO,ERR4) SAME AS CALLER'S KEY ? */
*/*SECNDWD: D (YES,,NO,STORVSL) IS THIS THE FIRST VSL HALF ? */
*/* D (NO,STORVSL2,YES,GETPAGE) VSL SPAN A PAGE ? */
*/*STORVSL:  P RECOVER THE VSL ADDRESS */
*/*STORVSL2: P STORE THE NEW VSL ENTRY IN THE CIWA */
*/* N START ADDR > THAN END ADDR+1 TEST NOT PERFORMED HERE */
*/* D (NO,,YES,GETADDR) IS THIS A CONTINUATION ENTRY ? */
*/* D (NO,,YES,TESTLAST) IS THIS A NULL ENTRY ? */
*/* R RETURN TO THE CALLER. RETURN CODE = 0 */
*/*VSLDONE: R RETURN TO THE CALLER. RETURN CODE = 8 */
*/*ERR4: R RETURN TO THE CALLER. RETURN CODE = 4 */
*/*GETADDR: P (,ADDRTST0) RESET CURRENT VSL POINTER CIWCUVSL =
*/*1ST WORD OF CURRENT VSL ENTRY */
*/*GETPAGE: P (,ADDRTEST) SET UP ADDR OF SECOND WORD OF VSL */
*/*NEXTVSL: END */
         END
