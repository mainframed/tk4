         TITLE 'IEAVRCV: RSM FUNCTIONAL RECOVERY ROUTINE               *
                        '
IEAVRCV  CSECT
         USING  *,15
         MODID  BR=NO
IEAVRCV2 DS     0H
         ENTRY  IEAVRCV2
         BALR   BASEREG,0           ESTABLISH ADDRESSABILITY
         USING  *,BASEREG
*   SDWAPTR=PARMREG;                /* BASE FOR THE SDWA             */
         LR    SDWAPTR,PARMREG                                     0087
*   RCAPTR=SDWAPARM;                /* BASE FOR THE CURRENT RCA      */
         L     RCAPTR,SDWAPARM(,SDWAPTR)                           0088
*   RSET13=R0;                      /* SAVE @ OF WORK AREA           */
         LR    RSET13,R0                                           0089
*   S14=RRETURN;                    /* SAVE RETURN @                 */
         ST    RRETURN,S14(,RSET13)                                0090
*   GENERATE;                                                      0091
*                                 /*ESTABLISH RECOVERY*/
         SETFRR  A,FRRAD=FRRADD,PARMAD=(NEWRCA),WRKREGS=(WORKA,WORKB)
*   OLDRCA=RCAPTR;                  /* OLD RCA PTR IN NEW RCA        */
         ST    RCAPTR,OLDRCA(,NEWRCA)                              0092
*   IF CVTPVTP^=PVTADDR THEN        /* IS PVT PTR CLOBBERED?         */
         L     @12,PVTADDR                                         0093
         L     @08,CVTPTR                                          0093
         L     @06,CVTPVTP(,@08)                                   0093
         CR    @06,@12                                             0093
         BE    @RF00093                                            0093
*     DO;                                                          0094
*       PVTCLOBR=CVTPVTP;           /* COPY BAD VALUE IN RCRDING AREA*/
         ST    @06,PVTCLOBR(,SDWAPTR)                              0095
*       CVTPVTP=PVTADDR;            /* REFRESH THE PVT PTR           */
         ST    @12,CVTPVTP(,@08)                                   0096
*     END;                                                         0097
*                                                                  0097
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK NOW TO SEE IF ERROR OCCURRED WHILE IN TRAS MODE. IF YES,*/
*   /* THEN MUST TRAS BACK EXCEPT IN CASE OF 0FC ABEND. IN THIS CASE */
*   /* RTM HAS ALREADY TRASSED BACK.                         @ZA16816*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0098
*   IF PVTTASID^=0 THEN             /* IF PVTTASID NOT ZERO  @ZA16816*/
@RF00093 L     @12,CVTPTR                                          0098
         L     @12,PVTPTR(,@12)                                    0098
         LH    @12,PVTTASID(,@12)                                  0098
         N     @12,@CF02408                                        0098
         LTR   @12,@12                                             0098
         BZ    @RF00098                                            0098
*     DO;                           /* WERE IN TRAS MODE     @ZA16816*/
*       IF SDWACMPC=FC THEN         /* IF 0FC ABEND          @ZA16816*/
         CLC   SDWACMPC(3,SDWAPTR),FC                              0100
         BNE   @RF00100                                            0100
*         DO;                       /* THEN                  @ZA16816*/
*           WORKA=PVTTASID;         /* MEMTERM TO ADDR SPACE @ZA16816*/
         LR    WORKA,@12                                           0102
*           GENERATE CODE;                                         0103
             CALLRTM TYPE=MEMTERM,COMPCOD=X'0FC',ASID=(WORKA)
*           PVTTASID=0;             /* CLEAR TRAS INDICATOR  @ZA16816*/
         L     @12,CVTPTR                                          0104
         L     @12,PVTPTR(,@12)                                    0104
         SLR   @08,@08                                             0104
         STH   @08,PVTTASID(,@12)                                  0104
*         END;                      /*                       @ZA16816*/
*       ELSE                        /* IF NOT 0FC ABEND      @ZA16816*/
*         DO;                       /* THEN                  @ZA16816*/
         B     @RC00100                                            0106
@RF00100 DS    0H                                                  0107
*           WORKA=PSAAOLD;          /* TRAS BACK TO CURRENT  @ZA16816*/
         L     WORKA,PSAAOLD                                       0107
*           GENERATE CODE REFS(ASCBSTOR);                          0108
             LCTL 1,1,ASCBSTOR(WORKA)
*           PVTTASID=0;             /* CLEAR TRAS INDICATOR  @ZA16816*/
         L     @12,CVTPTR                                          0109
         L     @12,PVTPTR(,@12)                                    0109
         SLR   @08,@08                                             0109
         STH   @08,PVTTASID(,@12)                                  0109
*         END;                      /*                       @ZA16816*/
*     END;                          /*                       @ZA16816*/
@RC00100 DS    0H                                                  0112
*   IF SDWAPERC='0'B×SDWAEAS='0'B THEN/* IF PERCOLATION AND RECOVERY
*                                      ALREADY DONE, DO NOT RECORD   */
@RF00098 TM    SDWAPERC(SDWAPTR),B'00011000'                       0112
         BO    @RF00112                                            0112
*     SDWARCRD='1'B;                /* INDICATE TO RECORD            */
         OI    SDWARCRD(SDWAPTR),B'10000000'                       0113
*   SDWAREXN='IEAVRCV';             /* FRR ROUTINE NAME              */
@RF00112 MVI   SDWAREXN+7(SDWAPTR),C' '                            0114
         MVC   SDWAREXN(7,SDWAPTR),@CC02364                        0114
*   SDWAMODN(1:4)='IEAV';           /* BUILD MODULE NAME             */
         MVC   SDWAMODN(4,SDWAPTR),@CC02365                        0115
*   SDWAMODN(5:8)=TABLE(RCACSECT);  /* MODULE IN CONTROL AT TIME OF
*                                      ERROR                         */
         SLR   @12,@12                                             0116
         IC    @12,RCACSECT(,RCAPTR)                               0116
         SLA   @12,2                                               0116
         LA    @08,TABLE-4(@12)                                    0116
         MVC   SDWAMODN+4(4,SDWAPTR),0(@08)                        0116
*   SDWACSCT=SDWAMODN;              /* CSECT IN CONTROL              */
*                                                                  0117
         MVC   SDWACSCT(8,SDWAPTR),SDWAMODN(SDWAPTR)               0117
*   /*****************************************************************/
*   /*                                                               */
*   /* ALTER CSECT NAMES IN SDWACSCT FIELD IF NECESSARY              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0118
*   IF RCAVEQRI='1'B THEN           /* IF ITS THE V=R INTERCEPT RTN  */
         TM    RCAVEQRI(RCAPTR),B'00000010'                        0118
         BNO   @RF00118                                            0118
*     SDWACSCT(5:8)='EQR ';         /* SET THE IEAVEQR ID            */
         MVC   SDWACSCT+4(4,SDWAPTR),@CC02320                      0119
*   ELSE                            /* ELSE,                         */
*     IF RCARCFI='1'B THEN          /* IF ITS RECONFIGURATION      0120
*                                      INTERCEPT                     */
         B     @RC00118                                            0120
@RF00118 TM    RCARCFI(RCAPTR),B'00000100'                         0120
         BNO   @RF00120                                            0120
*       SDWACSCT(5:8)='RCF ';       /* SET THE IEAVRCF ID            */
         MVC   SDWACSCT+4(4,SDWAPTR),@CC02331                      0121
*     ELSE                                                         0122
*       ;                           /* ELSE,                         */
@RF00120 DS    0H                                                  0123
*   IF RCAINV='1'B THEN             /* IF ITS PAGE INVALIDATION      */
@RC00118 TM    RCAINV(RCAPTR),B'00000001'                          0123
         BNO   @RF00123                                            0123
*     SDWACSCT(5:8)='INV ';         /* SET IT TO IEAVINV             */
         MVC   SDWACSCT+4(4,SDWAPTR),@CC02366                      0124
*   ELSE                            /* ELSE,                         */
*     IF RCAPCB='1'B THEN           /* IF ITS THE PCB MANAGER        */
         B     @RC00123                                            0125
@RF00123 TM    RCAPCB(RCAPTR),B'00010000'                          0125
         BNO   @RF00125                                            0125
*       SDWACSCT(5:8)='PCB ';       /* SET IEAVPCB                   */
         MVC   SDWACSCT+4(4,SDWAPTR),@CC02367                      0126
*     ELSE                          /* ELSE,                         */
*       IF RCAPFTE='1'B THEN        /* IF ITS PFTE ENQ-DEQ           */
         B     @RC00125                                            0127
@RF00125 TM    RCAPFTE(RCAPTR),B'00001000'                         0127
         BNO   @RF00127                                            0127
*         SDWACSCT(5:8)='PFTE';     /* SET NAME TO IEAVPFTE          */
         MVC   SDWACSCT+4(4,SDWAPTR),@CC02368                      0128
*       ELSE                        /* ELSE,                         */
*         IF RCAOPBR='1'B THEN      /* FOR IEAVOPBR                  */
         B     @RC00127                                            0129
@RF00127 TM    RCAOPBR(RCAPTR),B'00001000'                         0129
         BNO   @RF00129                                            0129
*           SDWACSCT(5:8)='OPBR';   /* SET ID FOR IEAVOPBR ENTRY IN
*                                      IEAVPIOP              @Z40WPYD*/
         MVC   SDWACSCT+4(4,SDWAPTR),@CC02369                      0130
*         ELSE                                                     0131
*           IF RCAPIOP='1'B THEN    /* FOR IEAVPIOP          @Z40WPYD*/
         B     @RC00129                                            0131
@RF00129 TM    RCAPIOP(RCAPTR),B'00000001'                         0131
         BNO   @RF00131                                            0131
*             DO;                                                  0132
*               SDWACSCT(5:8)='PIOP';/* SET ID FOR IEAVPIOP ENTRY  0133
*                                                            @Z40WPYD*/
         MVC   SDWACSCT+4(4,SDWAPTR),@CC02334                      0133
*               ERPCBAIA=RCAPARM1->PCB;/* COPY THE ERROR PCB INTO THE
*                                      SDWA VARIABLE LENGTH FIELD, 0134
*                                      (SDWAVRA)             @Z40WPYD*/
         L     @12,RCAPARM1(,RCAPTR)                               0134
         MVC   ERPCBAIA(64,SDWAPTR),PCB(@12)                       0134
*             END;                                                 0135
*           ELSE                                                   0136
*             IF RCAPRSS='1'B THEN  /* IF IT IS THE RSB FRAME STEAL
*                                      ROUTINE                       */
         B     @RC00131                                            0136
@RF00131 TM    RCAPRSS(RCAPTR),B'00001000'                         0136
         BNO   @RF00136                                            0136
*               SDWACSCT(5:8)='PRSB';/* SET ID FOR MODULE IEAVPRSB 0137
*                                                            @G33VPOD*/
         MVC   SDWACSCT+4(4,SDWAPTR),@CC02317                      0137
*             ELSE                                                 0138
*               ;                   /* NO MORE NAMES TO CHECK        */
@RF00136 DS    0H                                                  0139
*   SDWAHEX='1'B;                   /* DATA TO BE DUMPED IN HEX      */
@RC00131 DS    0H                                                  0139
@RC00129 DS    0H                                                  0139
@RC00127 DS    0H                                                  0139
@RC00125 DS    0H                                                  0139
@RC00123 OI    SDWAHEX(SDWAPTR),B'10000000'                        0139
*   SDWAURAL=LENGTH(USERECRD);      /* LENGTH OF VARIABLE AREA       */
         MVI   SDWAURAL(SDWAPTR),X'62'                             0140
*   RCACOPY=RCA;                    /* COPY OF RCA IN RCRD AREA      */
         MVC   RCACOPY(24,SDWAPTR),RCA(RCAPTR)                     0141
*   SDWAUPRG='1'B;                  /* REGS FOR RETRY IN SDWASRSV    */
         OI    SDWAUPRG(SDWAPTR),B'00001000'                       0142
*   IF RCAABEND='1'B THEN           /* DID RSM ROUTINE SAY ABEND?    */
         TM    RCAABEND(RCAPTR),B'00100000'                        0143
         BNO   @RF00143                                            0143
*     SDWARCRD='0'B;                /* IF SO, DONT RECORD            */
         NI    SDWARCRD(SDWAPTR),B'01111111'                       0144
*   ELSE                            /* RSM ROUTINE DID NOT SAY ABEND */
*     DO;                                                          0145
*                                                                  0145
         B     @RC00143                                            0145
@RF00143 DS    0H                                                  0146
*       /*************************************************************/
*       /*                                                           */
*       /* IF THE ENTRY TO IEAVRCV WAS CAUSED BY AN RSM-ISSUED 'C0D' */
*       /* ABEND, ISSUE SDUMP AND RETRY AT THE NEXT SEQUENTIAL       */
*       /* INSTRUCTION                                               */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0146
*       IF SDWACMPC=COD&SDWAPERC='0'B THEN                         0146
         CLC   SDWACMPC(3,SDWAPTR),COD                             0146
         BNE   @RF00146                                            0146
         TM    SDWAPERC(SDWAPTR),B'00010000'                       0146
         BNZ   @RF00146                                            0146
*         DO;                                                      0147
*           SDWARTYA=SDWANXT1;      /* RETRY AT NSI                  */
         L     @12,SDWANXT1(,SDWAPTR)                              0148
         ST    @12,SDWARTYA(,SDWAPTR)                              0148
*           SDWARCDE=SDWARETY;      /* INDICATE TO RETRY             */
         MVI   SDWARCDE(SDWAPTR),X'04'                             0149
*           RCARCRD=0;                                             0150
         MVI   RCARCRD(RCAPTR),X'00'                               0150
*           IF PVTDUMP='1'B THEN    /* DID RSM REQUEST DUMP?         */
         L     @12,CVTPTR                                          0151
         L     @12,PVTPTR(,@12)                                    0151
         TM    PVTDUMP(@12),B'00000001'                            0151
         BO    @RT00151                                            0151
*             GOTO DUMPCALL;        /* YES,GO TO SCHEDULE DUMP       */
*           ELSE                    /* IF NO DUMP NEEDED             */
*             GOTO EXITING;         /* GO TO EXIT PROCESSING         */
         B     EXITING                                             0153
*         END;                                                     0154
*       ELSE                        /* IF NOT A 'C0D' ABEND          */
*         DO;                                                      0155
*                                                                  0155
@RF00146 DS    0H                                                  0156
*           /*********************************************************/
*           /*                                                       */
*           /* IF OPERATOR DID NOT HIT RESTART KEY, CHECK FOR        */
*           /* POSSIBILITY OF A RETRY.                               */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0156
*           IF SDWARKEY='0'B THEN                                  0156
*                                                                  0156
         TM    SDWARKEY(SDWAPTR),B'00100000'                       0156
         BNZ   @RF00156                                            0156
*             /*******************************************************/
*             /*                                                     */
*             /* IF AN INTERCEPT ROUTINE WAS IN CONTROL, PUT VRBN IN */
*             /* REG 1 AND RETRY AT THE ADDRESS IN REG 14            */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0157
*             IF RCAVEQRI='1'B×RCARCFI='1'B THEN                   0157
         TM    RCAVEQRI(RCAPTR),B'00000010'                        0157
         BO    @RT00157                                            0157
         TM    RCARCFI(RCAPTR),B'00000100'                         0157
         BNO   @RF00157                                            0157
@RT00157 DS    0H                                                  0158
*               DO;                                                0158
*                 SDWASRSV=PVTWSA3(1:64);/* RESTORE REGS FOR PFTE  0159
*                                      RETURN                        */
         L     @12,CVTPTR                                          0159
         L     @12,PVTPTR(,@12)                                    0159
         MVC   SDWASRSV(64,SDWAPTR),PVTWSA3(@12)                   0159
*                 SDWARTYA=SDWASR14;/* RETRY ADDRESS                 */
         L     @12,SDWASR14(,SDWAPTR)                              0160
         ST    @12,SDWARTYA(,SDWAPTR)                              0160
*                 SDWARCDE=SDWARETY;/* RETRY RETURN CODE             */
         MVI   SDWARCDE(SDWAPTR),X'04'                             0161
*                 RCAVEQRI='0'B;    /* ZERO FOOTPRINT                */
         NI    RCAVEQRI(RCAPTR),B'11111101'                        0162
*                 RCARCFI='0'B;     /* ZERO FOOTPRINT                */
         NI    RCARCFI(RCAPTR),B'11111011'                         0163
*                 GOTO DUMPCALL;    /* TAKE DUMP                     */
         B     DUMPCALL                                            0164
*               END;                                               0165
*             ELSE                  /* IF NOT AN INTERCEPT ROUTINE   */
*               IF RCAPIX='1'B THEN /* WAS PIX PROCESSING?           */
@RF00157 TM    RCAPIX(RCAPTR),B'10000000'                          0166
         BNO   @RF00166                                            0166
*                 DO;                                              0167
*                                                                  0167
*                   /*************************************************/
*                   /*                                               */
*                   /* IF THE FRR WAS ENTERED DUE TO ERRORS IN PAGE  */
*                   /* FAULT PROCESSING (NON-'C0D') RETRY AT THE     */
*                   /* ROUTINE PIXRETRY IN MODULE IEAVRCV            */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0168
*                   SDWASR01=RCAPARM1;/* SET UP REG1 WITH PARM       */
         L     @12,RCAPARM1(,RCAPTR)                               0168
         ST    @12,SDWASR01(,SDWAPTR)                              0168
*                   RCAPARM1=0;     /* ZERO PARM FOR RETRY           */
         SLR   @12,@12                                             0169
         ST    @12,RCAPARM1(,RCAPTR)                               0169
*                   SDWARTYA=ADDR(PIXRETRY);/* RETRY ROUTINE @       */
         LA    @12,PIXRETRY                                        0170
         ST    @12,SDWARTYA(,SDWAPTR)                              0170
*                   SDWASR02=RCAPTR;/* SAVE RCA PTR FOR PIXRETRY     */
         ST    RCAPTR,SDWASR02(,SDWAPTR)                           0171
*                   SDWARCDE=SDWARETY;/* INDICATE RETRY              */
         MVI   SDWARCDE(SDWAPTR),X'04'                             0172
*                   GOTO DUMPCALL;  /* TAKE SDUMP                    */
         B     DUMPCALL                                            0173
*                 END;                                             0174
*               ELSE                /* NOT PAGE FAULT PROCESSING     */
*                 IF RCASIRT='1'B×RCASWIN='1'B THEN/* CHECK FOR    0175
*                                      SWAP-IN OR SWAP-IN ROOT EXIT
*                                      IN ERROR              @Z40WPYD*/
@RF00166 TM    RCASIRT(RCAPTR),B'00100000'                         0175
         BO    @RT00175                                            0175
         TM    RCASWIN(RCAPTR),B'01000000'                         0175
         BNO   @RF00175                                            0175
@RT00175 DS    0H                                                  0176
*                   DO;             /* YES,EITHER SWAP-IN OR SWIN  0176
*                                      ROOT EXIT IN ERROR    @Z40WPYD*/
*                     RSMHDPTR=PVTWSA7(69:72);/* GET RSM HEADER PTR
*                                                            @Z40WPYD*/
         L     @12,CVTPTR                                          0177
         L     @12,PVTPTR(,@12)                                    0177
         ICM   RSMHDPTR,15,PVTWSA7+68(@12)                         0177
*                     RSMFAIL='1'B; /* INDICATE LSQA IS UNAVAILABLE
*                                                            @Z40WPYD*/
*                                                                  0178
         OI    RSMFAIL(RSMHDPTR),B'00000010'                       0178
*                     /***********************************************/
*                     /*                                             */
*                     /* IF SWAP ROOT EXIT ROUTINE IN CONTROL AT TIME*/
*                     /* OF ERROR, MEMTERM THE MEMORY IN TROUBLE AND */
*                     /* RETRY                                       */
*                     /*                                             */
*                     /***********************************************/
*                                                                  0179
*                     IF RCASIRT='1'B THEN/* CHECK SWAP-IN ROOT EXIT
*                                      FLAG                          */
         TM    RCASIRT(RCAPTR),B'00100000'                         0179
         BNO   @RF00179                                            0179
*                       DO;                                        0180
*                         RASID=PVTWSA7(65:68);/* ASID TO          0181
*                                      MEMTERM--THE SAVE AREA TO USE
*                                      IS THE ONE PASSED BY RTM      */
         ICM   RASID,15,PVTWSA7+64(@12)                            0181
*                         RSET5=RCAPTR;/* SAVE REG ACROSS CALLRTM    */
         LR    RSET5,RCAPTR                                        0182
*                         GENERATE;                                0183
                  CALLRTM TYPE=MEMTERM,COMPCOD=X'028',ASID=(RASID)
*                         RCAPTR=RSET5;/* RESTORE REG                */
         LR    RCAPTR,RSET5                                        0184
*                         SDWASRSV=PVTWSA7(1:64);/* SET REGISTERS FOR
*                                      RETRY                         */
         L     @12,CVTPTR                                          0185
         L     @12,PVTPTR(,@12)                                    0185
         MVC   SDWASRSV(64,SDWAPTR),PVTWSA7(@12)                   0185
*                         SDWARTYA=SDWASR14;/* RETRY @ FROM SAVED REG
*                                      14                            */
         L     @12,SDWASR14(,SDWAPTR)                              0186
         ST    @12,SDWARTYA(,SDWAPTR)                              0186
*                         SDWARCDE=SDWARETY;/* RETRY RETURN CODE     */
         MVI   SDWARCDE(SDWAPTR),X'04'                             0187
*                         RCASIRT='0'B;/* TURN OFF FOOTPRINT         */
         NI    RCASIRT(RCAPTR),B'11011111'                         0188
*                         GOTO DUMPCALL;/* TAKE DUMP                 */
         B     DUMPCALL                                            0189
*                       END;                                       0190
*                     ELSE                                         0191
*                       IF RCASWIN='1'B THEN/* SWAP-IN IN CONTROL?   */
*                                                                  0191
@RF00179 TM    RCASWIN(RCAPTR),B'01000000'                         0191
         BNO   @RF00191                                            0191
*                         /*******************************************/
*                         /*                                         */
*                         /* IF THE ERROR OCCURRED DURING SWAP-IN    */
*                         /* PROCESSING, MEMTERM THE MEMORY AND RETRY*/
*                         /* AT THE ADDRESS IN CVTSRBRT - ACTUAL     */
*                         /* RETRY IS WITHIN RSM (AT PIXRETRY) TO    */
*                         /* FREE LOCKS GOTTEN BY RSM AND TO DELETE  */
*                         /* THE FRR BEFORE BRANCHING TO CVTSRBRT.   */
*                         /*                                         */
*                         /*******************************************/
*                                                                  0192
*MEMTRM:                                                           0192
*                         DO;                                      0192
MEMTRM   DS    0H                                                  0193
*                           RASID=RCAPARM1->ASCBASID;/* GET THE ASID
*                                      TO MEMTERM            @Z40WPYD*/
         L     @12,RCAPARM1(,RCAPTR)                               0193
         LH    RASID,ASCBASID(,@12)                                0193
         N     RASID,@CF02408                                      0193
*                           RSET5=RCAPTR;/* SAVE REG ACROSS CALLRTM  */
         LR    RSET5,RCAPTR                                        0194
*                           GENERATE;                              0195
*                                   /* MEMTERM THE MEMORY IN TROUBLE*/
               CALLRTM  TYPE=MEMTERM,COMPCOD=X'028',ASID=(RASID)
*                           RCAPTR=RSET5;/* RESTORE REG              */
         LR    RCAPTR,RSET5                                        0196
*                           SDWARTYA=ADDR(PIXRETRY);/* RETRY ADDRESS */
         LA    @12,PIXRETRY                                        0197
         ST    @12,SDWARTYA(,SDWAPTR)                              0197
*                           SDWASR02=RCAPTR;/* SAVE RCA PTR FOR    0198
*                                      PIXRETRY                      */
         ST    RCAPTR,SDWASR02(,SDWAPTR)                           0198
*                           SDWARCDE=SDWARETY;/* INDICATE RETRY      */
         MVI   SDWARCDE(SDWAPTR),X'04'                             0199
*                           GOTO DUMPCALL;/* GO TAKE DUMP            */
         B     DUMPCALL                                            0200
*                         END;                                     0201
*                   END;            /* END OF RECOVERY FOR SWIN OR 0202
*                                      SWIN ROOT EXIT        @Z40WPYD*/
*                 ELSE              /* NOT A SWAP-IN NOR SWIN ROOT 0203
*                                      EXIT                  @Z40WPYD*/
*                   IF RCASWPP='1'B THEN                           0203
*                                                                  0203
         B     @RC00175                                            0203
@RF00175 TM    RCASWPP(RCAPTR),B'00000100'                         0203
         BNO   @RF00203                                            0203
*                     /***********************************************/
*                     /*                                             */
*                     /* IF SWPP WAS IN CONTROL AT THE TIME OF THE   */
*                     /* ERROR, THEN IF THE SALLOC IS HELD, FREE AND */
*                     /* RETRY INTO SWPP IF THERE IS A NON-ZERO RETRY*/
*                     /* ADDRESS. IF THE RETRY ADDRESS IS ZERO, THEN */
*                     /* MEMTERM THE MEMORY @Z40WPYD.                */
*                     /*                                             */
*                     /***********************************************/
*                                                                  0204
*                     DO;                                          0204
*                       IF RCASAL='1'B THEN/* IF THE SALLOC LOCK IS
*                                      HELD RELEASE IT       @Z40WPYD*/
         TM    RCASAL(RCAPTR),B'10000000'                          0205
         BNO   @RF00205                                            0205
*                         DO;                                      0206
*                           WORKA=RSET13;/* SAVE REG ACROSS SETLOCK  */
         LR    WORKA,RSET13                                        0207
*                           GENERATE;                              0208
FRESAL SETLOCK RELEASE,TYPE=SALLOC,RELATED=(RSM,IEAVSWIN(SWINPOST))
*                           RSET13=WORKA;/* RESTORE REG              */
         LR    RSET13,WORKA                                        0209
*                           RCASAL='0'B;/* RSM RELEASED SALLOC LOCK
*                                                            @Z40WPYD*/
         NI    RCASAL(RCAPTR),B'01111111'                          0210
*                         END;                                     0211
*                       IF RCARETAD^=0 THEN/* IS THERE A RETRY     0212
*                                      ADDRESS               @Z40WPYD*/
@RF00205 SLR   @12,@12                                             0212
         L     @08,RCARETAD(,RCAPTR)                               0212
         CR    @08,@12                                             0212
         BE    @RF00212                                            0212
*                         DO;       /* YES, THERE IS A RETRY ADDRESS
*                                                            @Z40WPYD*/
*                           SDWASR00=RCAPARM0;/* RESTORE PARM        */
         L     @06,RCAPARM0(,RCAPTR)                               0214
         ST    @06,SDWASR00(,SDWAPTR)                              0214
*                           SDWASR01=RCAPARM1;/* RESTORE PARM        */
         L     @06,RCAPARM1(,RCAPTR)                               0215
         ST    @06,SDWASR01(,SDWAPTR)                              0215
*                           SDWARTYA=RCARETAD;/* RETRY ADDRESS       */
         ST    @08,SDWARTYA(,SDWAPTR)                              0216
*                           SDWARCDE=SDWARETY;/* RETRY RETURN CODE   */
         MVI   SDWARCDE(SDWAPTR),X'04'                             0217
*                           RCARETAD=0;/* ZERO RETRY @ TO PREVENT  0218
*                                      RECURSION                     */
         ST    @12,RCARETAD(,RCAPTR)                               0218
*                           GOTO DUMPCALL;/* TAKE DUMP               */
         B     DUMPCALL                                            0219
*                         END;                                     0220
*                       ELSE        /* ZERO RETRY ADDRESS            */
*                         SDWARCDE=SDWACWT;/* INDICATE PERCOLATION 0221
*                                                            @Z40WPYD*/
@RF00212 MVI   SDWARCDE(SDWAPTR),X'00'                             0221
*                       GOTO LLREL; /* IF SWPP CANNOT HANDLE RETRY,
*                                      CONTINUE WITH TERMINATION   0222
*                                                            @Z40WPYD*/
         B     LLREL                                               0222
*                     END;                                         0223
*                   ELSE            /* NOT SWAP OUT EITHER           */
*                                                                  0224
*                     /***********************************************/
*                     /*                                             */
*                     /* IF INVALIDATE MASTER ROUTINE ENCOUNTERED AN */
*                     /* ERROR, DUPLICATE PTLB AND PAGE INVALIDATE   */
*                     /* FUNCTIONS                                   */
*                     /*                                             */
*                     /***********************************************/
*                                                                  0224
*                     IF RCAINV='1'B THEN/* WAS INVALIDATE MASTER IN
*                                      CONTROL?                      */
@RF00203 TM    RCAINV(RCAPTR),B'00000001'                          0224
         BNO   @RF00224                                            0224
*                       DO;                                        0225
*                         IF SDWAPERC^='1'B THEN/* IF NOT A        0226
*                                      PERCOLATION CASE              */
         TM    SDWAPERC(SDWAPTR),B'00010000'                       0226
         BO    @RF00226                                            0226
*                           IF SLAVSPIN='1'B THEN/* IF SLAVSPIN ON,
*                                      SIGP WAS ISSUED               */
         L     @12,CVTPTR                                          0227
         L     @12,PVTPTR(,@12)                                    0227
         TM    SLAVSPIN(@12),B'10000000'                           0227
         BNO   @RF00227                                            0227
*                             DO;   /* IF SO, DUPLICATE            0228
*                                      PROCESSING--IF SECOND ERROR 0228
*                                      OCCURS, PERCOLATION IS DESIRED*/
*                               IF PTEPTR^=0 THEN/* CHECK FOR PTLB 0229
*                                      ONLY                          */
         L     @12,PTEPTR(,SDWAPTR)                                0229
         LTR   @12,@12                                             0229
         BZ    @RF00229                                            0229
*                                 PGTPVM='1'B;/* SET INVALID BIT     */
         OI    PGTPVM(@12),B'00001000'                             0230
*                               PVTPTLB=GO;/* RESET GO INDICATOR AND
*                                      FRR RECURSE BIT IF IT HAD BEEN
*                                      SET ON                        */
@RF00229 L     @12,CVTPTR                                          0231
         L     @12,PVTPTR(,@12)                                    0231
         MVI   PVTPTLB(@12),X'80'                                  0231
*                               GENERATE;                          0232
                PTLB                         PURGE BUFFERS
*                               SDWASRSV=PVTWSA14;/* RESTORE INV'S 0233
*                                      CALLER'S REGS                 */
         L     @12,CVTPTR                                          0233
         L     @12,PVTPTR(,@12)                                    0233
         MVC   SDWASRSV(64,SDWAPTR),PVTWSA14(@12)                  0233
*                               SDWARTYA=SDWASR14;/* INV'S RETURN  0234
*                                      POINT                         */
         L     @12,SDWASR14(,SDWAPTR)                              0234
         ST    @12,SDWARTYA(,SDWAPTR)                              0234
*                               SDWARCDE=SDWARETY;/* INDICATE RETRY  */
         MVI   SDWARCDE(SDWAPTR),X'04'                             0235
*                               RCAINV='0'B;/* RESET INV FLAG        */
         NI    RCAINV(RCAPTR),B'11111110'                          0236
*                               GOTO DUMPCALL;/* TAKE DUMP           */
         B     DUMPCALL                                            0237
*                             END;                                 0238
*                           ELSE    /* IF SIGP NOT ALREADY ISSUED    */
*                             IF RECURSE='0'B THEN/* IF THIS IS NOT A
*                                      RECURSION ENTRY               */
@RF00227 L     @12,CVTPTR                                          0239
         L     @12,PVTPTR(,@12)                                    0239
         TM    RECURSE(@12),B'00001000'                            0239
         BNZ   @RF00239                                            0239
*                               DO;                                0240
*                                 PVTPTLB=GO;/* RESET GO INDICATOR   */
         MVI   PVTPTLB(@12),X'80'                                  0241
*                                 RECURSE='1'B;/* TURN ON RECURSION
*                                      BIT FOR RETRY                 */
         OI    RECURSE(@12),B'00001000'                            0242
*                                 SDWASRSV=PVTWSA14;/* RESTORE REGS  */
         MVC   SDWASRSV(64,SDWAPTR),PVTWSA14(@12)                  0243
*                                 SDWARTYA=ADDR(INVRETRY);/* RETRY 0244
*                                      ADDRESS IN IEAVINV            */
         L     @12,@CV02285                                        0244
         ST    @12,SDWARTYA(,SDWAPTR)                              0244
*                                 SDWARCDE=SDWARETY;/* INDICATE RETRY*/
         MVI   SDWARCDE(SDWAPTR),X'04'                             0245
*                                 GOTO DUMPCALL;/* GO DUMP AND RETRY */
         B     DUMPCALL                                            0246
*                               END;                               0247
*                             ELSE                                 0248
*                               ;   /* FOR RECURSION, PERCOLATE      */
@RF00239 DS    0H                                                  0249
*                         ELSE                                     0249
*                           ;       /* FOR PERCOLATION, CONTINUE WITH
*                                      TERMINATION                   */
@RF00226 DS    0H                                                  0250
*                         SDWARCDE=SDWACWT;/* CONTINUE WITH        0250
*                                      TERMINATION                   */
         MVI   SDWARCDE(SDWAPTR),X'00'                             0250
*                         PVTPTLB=GO;/* RESET GO INDICATOR           */
         L     @12,CVTPTR                                          0251
         L     @12,PVTPTR(,@12)                                    0251
         MVI   PVTPTLB(@12),X'80'                                  0251
*                         GOTO LLREL;/* FREE RSM OBTAINED LOCKS      */
         B     LLREL                                               0252
*                       END;                                       0253
*                     ELSE          /* NOT INVALIDATE                */
*                       IF RCARETAD^=0 THEN/* CHECK FOR ANOTHER    0254
*                                      RETRIABLE CASE                */
@RF00224 SLR   @12,@12                                             0254
         L     @08,RCARETAD(,RCAPTR)                               0254
         CR    @08,@12                                             0254
         BE    @RF00254                                            0254
*                         DO;                                      0255
*                                                                  0255
*                           /*****************************************/
*                           /*                                       */
*                           /* GENERAL RETRY--IF RCARETAD DOES NOT   */
*                           /* EQUAL ZERO, RETRY AT THIS ADDRESS TO  */
*                           /* ALLOW ROUTINE TO ATTEMPT OWN RECOVERY */
*                           /*                                       */
*                           /*****************************************/
*                                                                  0256
*                           SDWASR01=RCAPARM1;/* MOVE PARMS FROM RCA */
         L     @06,RCAPARM1(,RCAPTR)                               0256
         ST    @06,SDWASR01(,SDWAPTR)                              0256
*                           SDWASR00=RCAPARM0;/* TO SDWA             */
         L     @06,RCAPARM0(,RCAPTR)                               0257
         ST    @06,SDWASR00(,SDWAPTR)                              0257
*                           SDWASR03=CVTPVTP;/* PVT PTR FOR RETRY  0258
*                                      ROUTINE                       */
         L     @06,CVTPTR                                          0258
         L     @06,CVTPVTP(,@06)                                   0258
         ST    @06,SDWASR03(,SDWAPTR)                              0258
*                           SDWARTYA=RCARETAD;/* RETRY ADDRESS       */
         ST    @08,SDWARTYA(,SDWAPTR)                              0259
*                           SDWARCDE=SDWARETY;/* RETRY RETURN CODE   */
         MVI   SDWARCDE(SDWAPTR),X'04'                             0260
*                           RCARETAD=0;/* ZERO PRESENT ADDRESS IN RCA*/
         ST    @12,RCARETAD(,RCAPTR)                               0261
*                           GOTO DUMPCALL;/* TAKE DUMP               */
         B     DUMPCALL                                            0262
*                         END;                                     0263
*                       ELSE                                       0264
*                                                                  0264
*                         /*******************************************/
*                         /*                                         */
*                         /* IF PSI PROGRAM CHECKED ON BAD INPUT     */
*                         /* PARAMETERS, CHANGE ABEND CODE TO X'171' */
*                         /* AND CONTINUE TO TERMINATE PSI'S CALLER  */
*                         /*                                         */
*                         /*******************************************/
*                                                                  0264
*                         IF SDWAPCHK='1'B&RCAPSIER='1'B THEN/* IF A
*                                      PGM CHECK OCCURRED WHILE PSI
*                                      WAS PROCESSING CALLER'S PARMS,*/
@RF00254 TM    SDWAPCHK(SDWAPTR),B'01000000'                       0264
         BNO   @RF00264                                            0264
         TM    RCAPSIER(RCAPTR),B'00010000'                        0264
         BNO   @RF00264                                            0264
*                           DO;                                    0265
*                             SDWACMPC=ABEND171;/* CHANGE ABEND CODE
*                                      TO X'171'                     */
         MVC   SDWACMPC(3,SDWAPTR),ABEND171                        0266
*                             SDWAGR15=RC16;/* SET UP REGS AT TIME OF
*                                      ABEND TO CONTAIN MEANINGFUL 0267
*                                      INFO FOR DUMP                 */
         MVC   SDWAGR15(4,SDWAPTR),@CF00052                        0267
*                             SDWAGR11=CIWINVSL;                   0268
         L     @12,CVTPTR                                          0268
         L     @12,PVTPTR(,@12)                                    0268
         L     @12,CIWAPTR(,@12)                                   0268
         L     @08,CIWINVSL(,@12)                                  0268
         ST    @08,SDWAGR11(,SDWAPTR)                              0268
*                             SDWAGR12=CIWECB;                     0269
         L     @08,CIWECB(,@12)                                    0269
         ST    @08,SDWAGR12(,SDWAPTR)                              0269
*                             SDWAGR13=CIWSTRT;                    0270
         L     @08,CIWSTRT(,@12)                                   0270
         ST    @08,SDWAGR13(,SDWAPTR)                              0270
*                             SDWAGR14=CIWEND1;                    0271
         L     @12,CIWEND1(,@12)                                   0271
         ST    @12,SDWAGR14(,SDWAPTR)                              0271
*                             SDWARCDE=SDWACWT;                    0272
         MVI   SDWARCDE(SDWAPTR),X'00'                             0272
*                             GOTO LLREL;/* GO FREE LOCKS AND DUMP   */
         B     LLREL                                               0273
*                           END;                                   0274
*                         ELSE      /*                       @ZA11386*/
*                                                                  0275
*                           /*****************************************/
*                           /*                                       */
*                           /* CHECK FOR FIX/LOAD ROOT EXIT IN       */
*                           /* CONTROL IN SRB MODE, AND A TCB ADDRESS*/
*                           /* SPECIFIED. IF SO, TERMINATE THE TASK  */
*                           /* WITH AN 028 ABEND.                    */
*                           /*                                       */
*                           /*****************************************/
*                                                                  0275
*                           IF RCAFXL='1'B&SDWASRBM='1'B&PCBRTCBA^=0
*                             THEN  /*                       @ZA11386*/
@RF00264 TM    RCAFXL(RCAPTR),B'01000000'                          0275
         BNO   @RF00275                                            0275
         TM    SDWASRBM(SDWAPTR),B'00000001'                       0275
         BNO   @RF00275                                            0275
         L     @12,CVTPTR                                          0275
         L     @12,PVTPTR(,@12)                                    0275
         L     @12,PCBRPTR(,@12)                                   0275
         L     @08,PCBRTCBA-1(,@12)                                0275
         LA    @08,0(,@08)                                         0275
         LTR   @08,@08                                             0275
         BZ    @RF00275                                            0275
*                             DO;   /* TERMINATE THE TASK    @ZA11386*/
*                               RASID=PCBRASCB->ASCBASID;/* ASID FOR
*                                      ABTERM INTF           @ZA11386*/
         L     @12,PCBRASCB(,@12)                                  0277
         LH    RASID,ASCBASID(,@12)                                0277
         N     RASID,@CF02408                                      0277
*                               WORKA=PCBRTCBA;/* TCB ADDR FOR ABTERM
*                                      INTF                  @ZA11386*/
         LR    WORKA,@08                                           0278
*                               RSET5=RCAPTR;/* SAVE RCA ADDR ACROSS
*                                      ABTERM                @ZA11386*/
         LR    RSET5,RCAPTR                                        0279
*                               GENERATE;                          0280
*                                                        /* @ZA11386*/
  CALLRTM TYPE=ABTERM,COMPCOD=X'028',ASID=(RASID),TCB=(WORKA),        **
               STEP=NO,DUMP=NO                                @ZA11386
*                               RCAPTR=RSET5;/* RESTORE RCA POINTER
*                                                            @ZA11386*/
         LR    RCAPTR,RSET5                                        0281
*                             END;  /* TERMINATE THE TASK    @ZA11386*/
*                           ELSE                                   0283
*                             ;     /* NO MORE RETRIES               */
@RF00275 DS    0H                                                  0284
*           ELSE                                                   0284
*             ;                     /* NOW HANDLE NON-RETRYS         */
*                                                                  0284
@RF00156 DS    0H                                                  0285
*           /*********************************************************/
*           /*                                                       */
*           /* IF RETRY IS NOT POSSIBLE RECORD, TAKE DUMP, CONTINUE  */
*           /* WITH TERMINATION                                      */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0285
*           COMPCD1=SDWACMPC;       /* RECORD COMPLETION CODE        */
@RC00156 MVC   COMPCD1(3,SDWAPTR),SDWACMPC(SDWAPTR)                0285
*           SDWACMPC=PAGERROR;      /* CHANGE CODE TO '028'          */
         MVC   SDWACMPC(3,SDWAPTR),PAGERROR                        0286
*           COMPCD2=PAGERROR;       /* RECORD CHANGED CODE           */
         MVC   COMPCD2(3,SDWAPTR),PAGERROR                         0287
*           SDWAEAS='1'B;           /* INDICATE RECOVERY HANDLED     */
         OI    SDWAEAS(SDWAPTR),B'00001000'                        0288
*         END;                                                     0289
*     END;                                                         0290
*   SDWARCDE=SDWACWT;               /* INDICATE CONTINUE WITH      0291
*                                      TERMINATION                   */
@RC00143 MVI   SDWARCDE(SDWAPTR),X'00'                             0291
*LLREL:                                                            0292
*   IF RCALL='1'B THEN              /* IF RSM OBTAINED LOCAL LOCK,   */
LLREL    TM    RCALL(RCAPTR),B'01000000'                           0292
         BNO   @RF00292                                            0292
*     SDWAFLLK='1'B;                /* TELL RTM TO FREE IT           */
         OI    SDWAFLLK(SDWAPTR),B'00000001'                       0293
*   IF RCASAL='1'B THEN             /* IF RSM OBTAINED SALLOC LOCK,  */
@RF00292 TM    RCASAL(RCAPTR),B'10000000'                          0294
         BNO   @RF00294                                            0294
*     SDWASALL='1'B;                /* TELL RTM TO FREE IT           */
         OI    SDWASALL(SDWAPTR),B'00000100'                       0295
*   IF RCADISP='1'B THEN            /* IF RSM OBTAINED DISP LOCK   0296
*                                                            @ZA28519*/
@RF00294 TM    RCADISP(RCAPTR),B'00000010'                         0296
         BNO   @RF00296                                            0296
*     SDWADISP='1'B;                /* TELL RTM TO FREE IT   @ZA28519*/
*                                                                  0297
         OI    SDWADISP(SDWAPTR),B'00010000'                       0297
*   /*****************************************************************/
*   /*                                                               */
*   /* DO NOT DUMP IF ABEND PURPOSELY ISSUED, OR IF PSI PROGRAM      */
*   /* CHECKED ON BAD PARMS.                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0298
*   IF RCAABEND='1'B×RCAPSIER='1'B THEN                            0298
@RF00296 TM    RCAABEND(RCAPTR),B'00110000'                        0298
         BNZ   @RT00298                                            0298
*     GOTO EXITING;                 /* EXIT PROCESSING               */
*                                                                  0299
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP TO SCHEDULE DUMP OF SQA,PVT,PFT. IF IEAVRCV IS RUNNING */
*   /* IN THE FAILING MEMORY, DUMP LSQA ALSO                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0300
*DUMPCALL:                                                         0300
*   ;                               /*                       @G33VPOD*/
DUMPCALL DS    0H                                                  0301
*   IF RCAPRSB='0'B&RCAPRSR='0'B&RCAPRSS='0'B THEN                 0301
         TM    RCAPRSB(RCAPTR),B'00111000'                         0301
         BNZ   @RF00301                                            0301
*     DO;                           /* IF NEITHER OF THE ENTRY POINTS
*                                      IN IEAVPRSB WAS IN ERROR, A 0302
*                                      SDUMP MAY BE SCHEDULED      0302
*                                                            @G33VPOD*/
*       RASID=0;                    /* INDICATE SCHEDULE DUMP TO   0303
*                                      CURRENT A.S.                  */
         SLR   RASID,RASID                                         0303
*       PVTND=CVTPVTP+LENGTH(PVT)-1;/* END OF PVT            @Z40WPYD*/
         L     @12,CVTPTR                                          0304
         L     @08,CVTPVTP(,@12)                                   0304
         SL    @08,@CF02403                                        0304
         ST    @08,PVTND                                           0304
*       PFTBEGIN=PVTPFTP;           /* START OF PFT                  */
         L     @12,PVTPTR(,@12)                                    0305
         L     @08,PVTPFTP(,@12)                                   0305
         ST    @08,PFTBEGIN                                        0305
*       PFTEND=PVTPFTP+PVTLPFN+LENGTH(PFTE);/* END OF PFT            */
         LH    @12,PVTLPFN(,@12)                                   0306
         N     @12,@CF02408                                        0306
         ALR   @08,@12                                             0306
         AL    @08,@CF00052                                        0306
         ST    @08,PFTEND                                          0306
*       END1='80'X;                 /* END OF STORAGE LIST           */
         MVI   END1,X'80'                                          0307
*       IF SDWAFMID=0 THEN          /* RUNNING IN FAILING MEMORY?    */
         LH    @12,SDWAFMID(,SDWAPTR)                              0308
         N     @12,@CF02408                                        0308
         LTR   @12,@12                                             0308
         BNZ   @RF00308                                            0308
*         DO;                       /* SAVE AREA IS WORKAREA PASSED
*                                      BY RTM                        */
*           GENERATE;                                              0310
         SDUMP SDATA=(LSQA,SQA),LIST=DUMPARMS,ASID=(RASID),           **
               HDR='ERROR IN REAL STORAGE MANAGER',BRANCH=YES @ZA11386
*         END;                                                     0311
*       ELSE                        /* DO NOT DUMP LSQA              */
*         DO;                                                      0312
         B     @RC00308                                            0312
@RF00308 DS    0H                                                  0313
*           GENERATE;                                              0313
         SDUMP SDATA=(SQA),LIST=DUMPARMS,ASID=(RASID),                **
               HDR='ERROR IN REAL STORAGE MANAGER',BRANCH=YES @ZA11386
*         END;                                                     0314
*     END;                                                         0315
@RC00308 DS    0H                                                  0316
*EXITING:                           /* COMPLETE CLEAN-UP             */
*   GENERATE;                                                      0316
@RF00301 DS    0H                                                  0316
EXITING  DS    0H                                                  0316
*                           /*DELETE FRR COVERAGE FOR IEAVRCV*/
         SETFRR  D,WRKREGS=(WORKA,WORKB)
*   PARMREG=SDWAPTR;                /* SDWA PTR IN REG1 FOR RTM      */
         LR    PARMREG,SDWAPTR                                     0317
*   RRETURN=S14;                    /* RESTORE RETURN @              */
         L     RRETURN,S14(,RSET13)                                0318
*   GOTO RRETURN;                   /* RETURN TO RTM                 */
         BR    RRETURN                                             0319
*                                                                  0320
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS IS THE RECOVERY FOR ERRORS ENCOUNTERED WHILE TRYING TO   */
*   /* PTLB ON OTHER THAN MASTER CPU DURING PAGE INVALIDATE          */
*   /* PROCESSING. THIS ROUTINE WILL BE CALLED BE SUPER FRR FOR ALL  */
*   /* EXTERNAL CALLS RECOVERY.                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0320
*INVSRTRY:                                                         0320
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0320
INVSRTRY DS    0H                                                  0321
*   GENERATE;                                                      0321
        ENTRY INVSRTRY
        BALR  BASEREG,0                    EST. ADDRESSABILITY
        USING *,BASEREG
*   RESPECIFY                                                      0322
*    (RRETREG,                                                     0322
*     SUPER) RSTD;                  /* SAVE FOR SUPER                */
*   LCCAPTR=PSALCCAV;               /* BASE FOR LCCA                 */
         L     LCCAPTR,PSALCCAV                                    0323
*   IF LCCAPTLB='1'B THEN           /* IF SLAVE WAS IN CONTROL AT  0324
*                                      TIME OF ERROR, RESET SPIN BITS
*                                      AND PTLB                      */
         TM    LCCAPTLB(LCCAPTR),B'10000000'                       0324
         BNO   @RF00324                                            0324
*     DO;                                                          0325
*       LCCAPTLB='0'B;              /* RESET SLAVE'S SPIN BIT        */
         NI    LCCAPTLB(LCCAPTR),B'01111111'                       0326
*       SLAVSPIN='0'B;              /* RESET SLAVSPIN INDICATOR      */
         L     @14,CVTPTR                                          0327
         L     @14,PVTPTR(,@14)                                    0327
         NI    SLAVSPIN(@14),B'01111111'                           0327
*       GENERATE;                                                  0328
        PTLB                              PURGE BUFFERS
*     END;                                                         0329
*   GOTO SUPER;                     /* RETURN TO EXTERNAL FLIH     0330
*                                      RECOVERY                      */
@RF00324 BR    SUPER                                               0330
*   RESPECIFY                                                      0331
*    (SUPER,                                                       0331
*     RRETREG) UNRSTD;                                             0331
*   END INVSRTRY;                                                  0332
*                                                                  0333
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS IS THE RETRY ROUTINE FOR ERRORS ENCOUNTERED DURING PAGE  */
*   /* FAULT PROCESSING. IT ISSUES RESET IF NECESSARY, AND RETURNS TO*/
*   /* THE PCFLIH. IT INCLUDES THE HANDLING OF FREEING LOCKS AND     */
*   /* DELETING THE RSM FRR FOR THE CASES OF SWIN WHERE RESUMED      */
*   /* PROCESSING AT CVTSRBRT IS DESIRED .                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0333
*PIXRETRY:                                                         0333
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0333
PIXRETRY DS    0H                                                  0334
*   GENERATE;                                                      0334
         BALR    BASEREG,0           SET UP ADDRESSABILITY
         USING *,BASEREG
*   IF RCAPIX^='1'B THEN            /* IF NOT PIX ENTRY, THEN JUST 0335
*                                      CLEAN UP LOCKS GOTTEN BY RSM
*                                      AND RETRY AT CVTSRBRT         */
         TM    RCAPIX(RCAPTR),B'10000000'                          0335
         BO    @RF00335                                            0335
*     DO;                                                          0336
*       IF RCALL='1'B THEN          /* RSM GOT LOCAL LOCK?           */
         TM    RCALL(RCAPTR),B'01000000'                           0337
         BNO   @RF00337                                            0337
*         DO;                                                      0338
*           RCALL='0'B;                                            0339
         NI    RCALL(RCAPTR),B'10111111'                           0339
*           GENERATE;                                              0340
              SETLOCK RELEASE,TYPE=LOCAL,RELATED=(LOCAL,IEAVSWIN(SWING**
               ET))
*         END;                                                     0341
*       GOTO ENDPIX;                /* CHECK FOR RSM GOT SALLOC      */
         B     ENDPIX                                              0342
*     END;                                                         0343
*   IF RTRYPARM=0 THEN              /* IF NO PCB EXISTS,             */
@RF00335 LTR   RTRYPARM,RTRYPARM                                   0344
         BNZ   @RF00344                                            0344
*     RRETREG=RC12;                 /* R.C. TO PCFLIH = 12           */
         LA    RRETREG,12                                          0345
*   ELSE                            /* IF A PCB EXITS,               */
*     DO;                           /* TRY TO SAVE THE TASK          */
*                                                                  0346
         B     @RC00344                                            0346
@RF00344 DS    0H                                                  0347
*       /*************************************************************/
*       /*                                                           */
*       /* IF A RESET IS TO BE DONE AND GFA WAS CALLED BEFORE THE    */
*       /* ERROR, THEN GO TO RESET ROUTINE                           */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0347
*       IF PCBRESET='1'B THEN       /* TASK RESET?                   */
         TM    PCBRESET(PCBPTR),B'00010000'                        0347
         BNO   @RF00347                                            0347
*         IF RCAGFA='1'B THEN       /* GFA IN CONTROL?               */
         TM    RCAGFA(RCAPTR),B'00000010'                          0348
         BNO   @RF00348                                            0348
*           DO;                                                    0349
*             IF PCBSRBMD='1'B THEN /* SRB MODE?                     */
         TM    PCBSRBMD(PCBPTR),B'00100000'                        0350
         BNO   @RF00350                                            0350
*               DO;                 /* IF YES,                       */
*                 RSET4=PCBSRB;     /* PUT SRB ADDRESS IN REGISTER 4 */
         L     RSET4,PCBSRB(,PCBPTR)                               0352
*                 RSET5=0;          /* ZERO REGISTER 5               */
         SLR   RSET5,RSET5                                         0353
*               END;                                               0354
*             ELSE                  /* TCB MODE                      */
*               DO;                                                0355
         B     @RC00350                                            0355
@RF00350 DS    0H                                                  0356
*                 RSET4=PCBRTPA;    /* SET TCB ADDRESS               */
         L     RSET4,PCBRTPA-1(,PCBPTR)                            0356
         LA    RSET4,0(,RSET4)                                     0356
*                 RSET5=PCBSRB;     /* SET RB ADDRESS                */
         L     RSET5,PCBSRB(,PCBPTR)                               0357
*               END;                                               0358
*             RTRYPARM=0;           /* SET PARM TO ZERO FOR RECURSION
*                                      POSSIBILITY                   */
@RC00350 SLR   RTRYPARM,RTRYPARM                                   0359
*             RSET6=PAGERROR;       /* COMP CODE TO RESET            */
         SLR   RSET6,RSET6                                         0360
         ICM   RSET6,7,PAGERROR                                    0360
*             RSET13=ADDR(PVTSAVE); /* SAVE AREA TO RESET            */
         L     @08,CVTPTR                                          0361
         L     @08,PVTPTR(,@08)                                    0361
         LA    RSET13,PVTSAVE(,@08)                                0361
*             CALL IEAVRSET;        /* RESET ROUTINE                 */
         L     @15,PVTPRSET(,@08)                                  0362
         BALR  @14,@15                                             0362
*           END;                                                   0363
*       RRETREG=0;                  /* R.C. TO PCFLIH = 0            */
@RF00348 DS    0H                                                  0364
@RF00347 SLR   RRETREG,RRETREG                                     0364
*     END;                          /* TASK HAS BEEN SUSPENDED       */
*ENDPIX:                                                           0366
*   IF RCASAL='1'B THEN             /* IF RSM GOT SALLOC LOCK,       */
@RC00344 DS    0H                                                  0366
ENDPIX   TM    RCASAL(RCAPTR),B'10000000'                          0366
         BNO   @RF00366                                            0366
*     DO;                                                          0367
*       RCASAL='0'B;                /* ZERO FLAG TO PREVENT POSSIBLE
*                                      RECURSION                     */
         NI    RCASAL(RCAPTR),B'01111111'                          0368
*       GENERATE;                                                  0369
*                                /* RELEASE SALLOC*/
       SETLOCK   RELEASE,TYPE=SALLOC,RELATED=(SALLOC,IEAVPIX(GETLOCK))
*     END;                                                         0370
*   IF RCAPIX='1'B THEN             /* RETURN @ FOR PIX ENTRY        */
@RF00366 TM    RCAPIX(RCAPTR),B'10000000'                          0371
         BNO   @RF00371                                            0371
*     RRETURN=ADDR(IEAVEPXR);       /* RETURN @ IN PC FLIH           */
         L     RRETURN,@CV02282                                    0372
*   ELSE                            /* RETURN @ FOR SWIN             */
*     RRETURN=CVTSRBRT;                                            0373
         B     @RC00371                                            0373
@RF00371 L     @12,CVTPTR                                          0373
         L     RRETURN,CVTSRBRT(,@12)                              0373
*   GENERATE;                                                      0374
@RC00371 DS    0H                                                  0374
*                             /*DELETE FRR COVERAGE*/
         SETFRR  D,WRKREGS=(WORKA,WORKB)
*   GOTO RRETURN;                   /* RETURN TO PC FLIH             */
         BR    RRETURN                                             0375
*   END PIXRETRY;                                                  0376
*                                                                  0377
*/********************************************************************/
*/*        THIS IS THE FUNCTIONAL RECOVERY ROUTINE FOR               */
*/*        MODULE IEAVRCV, THE RSM GENERAL FRR.                      */
*/********************************************************************/
*                                                                  0377
*IEAVRCV3:                                                         0377
*   PROC OPTIONS(NOSAVEAREA,DONTSAVE);                             0377
IEAVRCV3 DS    0H                                                  0378
*   GENERATE;                                                      0378
         BALR    BASEREG,0           ESTABLISH ADDRESSABILITY
         USING *,BASEREG
*   SDWAPTR=PARMREG;                /* BASE FOR SDWA                 */
         LR    SDWAPTR,PARMREG                                     0379
*   NEWRCA=SDWAPARM;                /* BASE FOR CURRENT RCA          */
         L     NEWRCA,SDWAPARM(,SDWAPTR)                           0380
*   RCAPTR=OLDRCA;                  /* POINT TO OLD RCA              */
         L     RCAPTR,OLDRCA(,NEWRCA)                              0381
*   RSET13=R0;                      /* WORK AREA PASSED TO FRR BY RTM*/
         LR    RSET13,R0                                           0382
*   IF RCALL='1'B THEN              /* IF RSM GOT LOCAL LOCK,        */
         TM    RCALL(RCAPTR),B'01000000'                           0383
         BNO   @RF00383                                            0383
*     SDWAFLLK='1'B;                /* TELL RTM TO FREE IT           */
         OI    SDWAFLLK(SDWAPTR),B'00000001'                       0384
*   IF RCASAL='1'B THEN             /* IF RSM GOT SALLOC LOCK,       */
@RF00383 TM    RCASAL(RCAPTR),B'10000000'                          0385
         BNO   @RF00385                                            0385
*     SDWASALL='1'B;                /* TELL RTM TO FREE IT           */
         OI    SDWASALL(SDWAPTR),B'00000100'                       0386
*   IF RCADISP='1'B THEN            /* IF RSM OBTAINED DISP LOCK   0387
*                                                            @ZA28519*/
@RF00385 TM    RCADISP(RCAPTR),B'00000010'                         0387
         BNO   @RF00387                                            0387
*     SDWADISP='1'B;                /* TELL TRM TO FREE IT   @ZA28519*/
         OI    SDWADISP(SDWAPTR),B'00010000'                       0388
*   SDWARCRD='1'B;                  /* INDICATE RECORDING            */
@RF00387 OI    SDWARCRD(SDWAPTR),B'10000000'                       0389
*   SDWARCDE=SDWACWT;               /* CONTINUE WITH TERMINATION     */
         MVI   SDWARCDE(SDWAPTR),X'00'                             0390
*   SDWACSCT='IEAVRCV';             /* MODULE AT TIME OF ERROR       */
         MVI   SDWACSCT+7(SDWAPTR),C' '                            0391
         MVC   SDWACSCT(7,SDWAPTR),@CC02364                        0391
*   SDWAMODN=SDWACSCT;              /* CSECT AT TIME OF ERROR        */
         MVC   SDWAMODN(8,SDWAPTR),SDWACSCT(SDWAPTR)               0392
*   SDWAREXN='IEAVRCV2';            /* FRR ROUTINE NAME              */
         MVC   SDWAREXN(8,SDWAPTR),@CC02391                        0393
*   RASID=0;                        /* SCHEDULE DUMP TO CURRENT A.S. */
         SLR   RASID,RASID                                         0394
*   PVTND=CVTPVTP+LENGTH(PVT)-1;    /* END OF PVT            @Z40WPYD*/
         L     @12,CVTPTR                                          0395
         L     @08,CVTPVTP(,@12)                                   0395
         SL    @08,@CF02403                                        0395
         ST    @08,PVTND                                           0395
*   PFTBEGIN=PVTPFTP;               /* START OF PFT                  */
         L     @12,PVTPTR(,@12)                                    0396
         L     @08,PVTPFTP(,@12)                                   0396
         ST    @08,PFTBEGIN                                        0396
*   PFTEND=PVTPFTP+PVTLPFN+LENGTH(PFTE);/* END OF PFT                */
         LH    @12,PVTLPFN(,@12)                                   0397
         N     @12,@CF02408                                        0397
         ALR   @08,@12                                             0397
         AL    @08,@CF00052                                        0397
         ST    @08,PFTEND                                          0397
*   END1='80'X;                     /* END OF STORAGE LIST           */
         MVI   END1,X'80'                                          0398
*   WORKA=RRETURN;                  /* SAVE RETURN ADDRESS OVER SDUMP
*                                                            @ZA03619*/
         LR    WORKA,RRETURN                                       0399
*   GENERATE;                                                      0400
     SDUMP  SDATA=(SQA),LIST=DUMPARMS,ASID=(RASID),BRANCH=YES,        **
               HDR='ERROR IN REAL STORAGE MANAGER FRR'        @ZA11386
*   RRETURN=WORKA;                  /* RESTORE RETURN ADDRESS      0401
*                                                            @ZA03619*/
         LR    RRETURN,WORKA                                       0401
*RCV2RET:                                                          0402
*   GOTO RRETURN;                   /* RETURN TO RTM                 */
RCV2RET  BR    RRETURN                                             0402
*   END IEAVRCV3;                                                  0403
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0404
*     I031F FIXED(31) BASED,                                       0404
*     I031P PTR(31) BASED,                                         0404
*     I015F FIXED(15) BASED,                                       0404
*     I015P PTR(15) BASED,                                         0404
*     I008P PTR(8) BASED,                                          0404
*     I001C CHAR(1) BASED;                                         0404
*   END IEAVRCV                                                    0405
*                                                                  0405
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (IHARCA  )                                       */
*/*%INCLUDE SYSLIB  (IHAPVT  )                                       */
*/*%INCLUDE SYSLIB  (IHARSMHD)                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHAFRRS )                                       */
*/*%INCLUDE SYSLIB  (IHAPCB  )                                       */
*/*%INCLUDE SYSLIB  (IHAPCBR )                                       */
*/*%INCLUDE SYSLIB  (IHAPFTE )                                       */
*/*%INCLUDE SYSLIB  (IEACIWA )                                       */
*/*%INCLUDE SYSLIB  (IHAPGTE )                                       */
*/*%INCLUDE SYSLIB  (IHALCCA )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*                                                                  0405
*       ;                                                          0405
@DATA    DS    0H
         DS    0F
         DS    0F
@CF00052 DC    F'16'
@CF02403 DC    F'-1943'
@CF02408 DC    XL4'0000FFFF'
@CV02279 DC    V(CSECPVT)
@CV02282 DC    V(IEAVEPXR)
@CV02285 DC    V(INVRETRY)
         DS    0D
FRREPTR  DS    A
FRRADD   DC    AL4(IEAVRCV3)
PVTADDR  DC    VL4(CSECPVT)
@CC02391 DC    C'IEAVRCV2'
@CC02364 EQU   @CC02391
@CC02317 DC    C'PRSB'
@CC02320 DC    C'EQR '
@CC02331 DC    C'RCF '
@CC02334 DC    C'PIOP'
@CC02365 EQU   @CC02391
@CC02366 DC    C'INV '
@CC02367 DC    C'PCB '
@CC02368 DC    C'PFTE'
@CC02369 DC    C'OPBR'
PAGERROR DC    B'000000101000000000000000'
COD      DC    B'110000001101000000000000'
FC       DC    B'000011111100000000000000'
ABEND171 DC    B'000101110001000000000000'
DUMPARMS DS    CL16
         ORG   DUMPARMS
PVTBEGIN DC    VL4(CSECPVT)
PVTND    DS    AL4
PFTBEGIN DC    A(0)
PFTEND   DC    A(1)
         ORG   PFTEND
END1     DS    FL1
END2     DS    AL3
         ORG   DUMPARMS+16
TABLE    DC    CL4'    '
         DC    CL4'PRSB'
         DC    CL4'PIOI'
         DC    CL4'SQA '
         DC    CL4'EQR '
         DC    CL4'PSI '
         DC    CL4'RELS'
         DC    CL4'ITAS'
         DC    CL4'DLAS'
         DC    CL4'CSEG'
         DC    CL4'DSEG'
         DC    CL4'REP1'
         DC    CL4'PIX '
         DC    CL4'GFA '
         DC    CL4'RFR '
         DC    CL4'RCF '
         DC    CL4'TERM'
         DC    CL4'SWPC'
         DC    CL4'PIOP'
         DC    CL4'IOCP'
         DC    CL4'FREE'
         DC    CL4'FXLD'
         DC    CL4'OUT '
         DC    CL4'AMSI'
         DC    CL4'SWIN'
         DC    CL4'SOUT'
IEAVRCV  CSECT
SNAP3  SNAP  SDATA=ALL,PDATA=(PSW,REGS),MF=L
IEAVRCV  CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RSMHDPTR EQU   @05
SDWAPTR  EQU   @07
RCAPTR   EQU   @02
PCBPTR   EQU   @01
PFTEPTR  EQU   @04
LCCAPTR  EQU   @07
R0       EQU   @00
PARMREG  EQU   @01
RTRYPARM EQU   @01
WORKA    EQU   @03
WORKB    EQU   @04
RASID    EQU   @04
RSET4    EQU   @04
RSET5    EQU   @05
RSET6    EQU   @06
NEWRCA   EQU   @06
BASEREG  EQU   @09
SUPER    EQU   @11
RSET13   EQU   @13
RRETURN  EQU   @14
RRETREG  EQU   @15
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSALCCAV EQU   PSA+528
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
CVTPTR   EQU   16
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBASID EQU   ASCB+36
ASCBSTOR EQU   ASCB+44
ASCBRSM  EQU   ASCB+52
ASCBRSMF EQU   ASCBRSM
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
SDWA     EQU   0
SDWAPARM EQU   SDWA
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWACMPC EQU   SDWAABCC+1
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR15 EQU   SDWAGRSV+60
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWASR00 EQU   SDWASRSV
SDWASR01 EQU   SDWASRSV+4
SDWASR02 EQU   SDWASRSV+8
SDWASR03 EQU   SDWASRSV+12
SDWASR05 EQU   SDWASRSV+20
SDWASR14 EQU   SDWASRSV+56
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAPCHK EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAERRB EQU   SDWAFLGS+1
SDWASRBM EQU   SDWAERRB
SDWAERRC EQU   SDWAFLGS+2
SDWAPERC EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAERRD EQU   SDWAFLGS+3
SDWAFMID EQU   SDWA+236
SDWAIOFS EQU   SDWA+238
SDWARTYA EQU   SDWA+240
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWARCDE EQU   SDWAPARQ
SDWAACF2 EQU   SDWAPARQ+1
SDWARCRD EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
SDWAACF3 EQU   SDWAPARQ+2
SDWADISP EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAACF4 EQU   SDWAPARQ+3
SDWAFLLK EQU   SDWAACF4
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWAMODN EQU   SDWARECP
SDWACSCT EQU   SDWARECP+8
SDWAREXN EQU   SDWARECP+16
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWASDA0 EQU   SDWASDAT
SDWASDA1 EQU   SDWASDAT+1
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
SDWAHEX  EQU   SDWADPVA
SDWAURAL EQU   SDWARA+3
SDWAVRA  EQU   SDWARA+4
RCA      EQU   0
RCAPARM0 EQU   RCA
RCAPARM1 EQU   RCA+4
RCANAME7 EQU   RCA+8
RCAPRSB  EQU   RCANAME7
RCAPRSR  EQU   RCANAME7
RCAPRSS  EQU   RCANAME7
RCACSECT EQU   RCA+9
RCAFLAGS EQU   RCA+10
RCASAL   EQU   RCAFLAGS
RCALL    EQU   RCAFLAGS
RCAABEND EQU   RCAFLAGS
RCAPSIER EQU   RCAFLAGS
RCADISP  EQU   RCAFLAGS
RCARCRD  EQU   RCA+11
RCANAMES EQU   RCA+12
RCANAME1 EQU   RCANAMES
RCAGFA   EQU   RCANAME1
RCAINV   EQU   RCANAME1
RCANAME2 EQU   RCANAMES+1
RCAPCB   EQU   RCANAME2
RCAPFTE  EQU   RCANAME2
RCASWPP  EQU   RCANAME2
RCAPIOP  EQU   RCANAME2
RCANAME3 EQU   RCANAMES+2
RCAPIX   EQU   RCANAME3
RCARCFI  EQU   RCANAME3
RCANAME4 EQU   RCANAMES+3
RCASWIN  EQU   RCANAME4
RCAVEQRI EQU   RCANAME4
RCANAME5 EQU   RCANAMES+4
RCASIRT  EQU   RCANAME5
RCAOPBR  EQU   RCANAME5
RCANAME6 EQU   RCANAMES+5
RCAFXL   EQU   RCANAME6
RCARETAD EQU   RCA+20
PVT      EQU   0
PVTFLAG1 EQU   PVT
PVTDUMP  EQU   PVTFLAG1
PVTFLAG2 EQU   PVT+1
PVTSSPIN EQU   PVT+11
PVTPFTP  EQU   PVT+12
PVTLPFN  EQU   PVT+18
PVTPTLB  EQU   PVT+31
PVTPCIWA EQU   PVT+64
PVTPRSET EQU   PVT+244
PVTQS    EQU   PVT+304
PVTWSAX  EQU   PVT+344
PVTWSA3  EQU   PVTWSAX+144
PVTWSA7  EQU   PVTWSAX+432
PVTWSA14 EQU   PVTWSAX+968
PVTSAVE  EQU   PVTWSAX+1328
PVTPCBQS EQU   PVT+1852
PVTTASID EQU   PVT+1942
RSMHD    EQU   0
RSMFLG1  EQU   RSMHD+12
RSMFAIL  EQU   RSMFLG1
RSMQS    EQU   RSMHD+20
RSMLFQ   EQU   RSMQS
RSMLSQA  EQU   RSMQS+4
RSMLIOQ  EQU   RSMQS+8
FRRS     EQU   0
FRRSHEAD EQU   FRRS
FRRSENTR EQU   0
FRRSFLGS EQU   FRRSENTR+4
FRRSFLG1 EQU   FRRSFLGS
PCB      EQU   0
PCBFQP   EQU   PCB
PCBBQP   EQU   PCB+4
PCBRTP   EQU   PCB+8
PCBFL1   EQU   PCBRTP
PCBSRBMD EQU   PCBFL1
PCBRTPA  EQU   PCBRTP+1
PCBRLP   EQU   PCB+12
PCBXPT   EQU   PCB+16
PCBFL2   EQU   PCBXPT
PCBRESET EQU   PCBFL2
PCBPGT   EQU   PCB+20
PCBFL3   EQU   PCBPGT
PCBBLOCK EQU   PCB+28
PCBSRB   EQU   PCBBLOCK
PCBRB    EQU   PCBSRB
PCBR     EQU   0
PCBRTCB  EQU   PCBR
PCBRFLAG EQU   PCBRTCB
PCBRTCBA EQU   PCBRTCB+1
PCBRASCB EQU   PCBR+12
PFTE     EQU   0
PFTPGID  EQU   PFTE
PFTQPTRS EQU   PFTE+4
PFTFLAGS EQU   PFTE+12
PFTFLAG1 EQU   PFTFLAGS
PFTFLAG2 EQU   PFTFLAGS+1
CIWA     EQU   0
CIWFLG1  EQU   CIWA
CIWOPFL1 EQU   CIWA+2
CIWOPFL2 EQU   CIWA+3
CIWINVSL EQU   CIWA+8
CIWVSL   EQU   CIWA+16
CIWSTRT  EQU   CIWVSL
CIWIFLG1 EQU   CIWSTRT
CIWEND1  EQU   CIWVSL+4
CIWIFLG2 EQU   CIWEND1
CIWECB   EQU   CIWA+28
PGTPTE   EQU   0
PGTRSA   EQU   PGTPTE
PGTBITS  EQU   PGTRSA+1
PGTPVM   EQU   PGTBITS
LCCA     EQU   0
LCCAIHRC EQU   LCCA+520
LCCAIHR1 EQU   LCCAIHRC
LCCAIHR2 EQU   LCCAIHRC+1
LCCAIHR3 EQU   LCCAIHRC+2
LCCAIHR4 EQU   LCCAIHRC+3
LCCASPIN EQU   LCCA+524
LCCASPN1 EQU   LCCASPIN
LCCAPTLB EQU   LCCASPN1
LCCASPN2 EQU   LCCASPIN+1
LCCASPN3 EQU   LCCASPIN+2
LCCASPN4 EQU   LCCASPIN+3
LCCADSF1 EQU   LCCA+540
LCCADSF2 EQU   LCCA+541
LCCASPSA EQU   LCCA+544
LCCACRFL EQU   LCCA+692
LCCACREX EQU   LCCA+693
LCCALKFG EQU   LCCA+694
LCCASRBF EQU   LCCA+720
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
IEAVRSET EQU   0
FRRRCA   EQU   0
OLDRCA   EQU   FRRRCA
WORK     EQU   0
S14      EQU   WORK+72
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
PGTEND   EQU   0
ASCBPTR  EQU   RCAPARM1
CVTS01   EQU   CVTPGSIA
CVTPVTP  EQU   CVTS01+8
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTSRBRT EQU   CVTS01+100
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
PVTPTR   EQU   CVTPVTP
PSARSVTE EQU   PSARSVT
PSACSTK  EQU   PSARSVTE
FRRSPTR  EQU   PSACSTK
CIWAPTR  EQU   PVTPCIWA
PTEPTR   EQU   SDWASR05
PVTPTLB2 EQU   PVTPTLB
RECURSE  EQU   PVTPTLB2
PVTSPIN2 EQU   PVTSSPIN
SLAVSPIN EQU   PVTSPIN2
FXLDRTSV EQU   PVTWSA7
PCBRPTR  EQU   FXLDRTSV+4
USERECRD EQU   SDWAVRA
RCACOPY  EQU   USERECRD
PVTCLOBR EQU   USERECRD+24
COMPCD1  EQU   USERECRD+28
COMPCD2  EQU   USERECRD+31
ERPCBAIA EQU   USERECRD+34
FLC      EQU   PSA
*                                      START UNREFERENCED COMPONENTS
@NM00101 EQU   FXLDRTSV+8
@NM00100 EQU   FXLDRTSV
@NM00099 EQU   PVTSPIN2
@NM00098 EQU   PVTPTLB2
GONOGO   EQU   PVTPTLB2
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
SAVE     EQU   WORK
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00097 EQU   CVTFIX+248
@NM00096 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTBAH   EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTRV490 EQU   CVTMAP+388
CVTSU    EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTVS1B  EQU   CVTOPTB
CVTVS1A  EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
LCCAR125 EQU   LCCA+964
LCCAR124 EQU   LCCA+960
LCCASGPR EQU   LCCA+896
LCCADRT2 EQU   LCCA+888
LCCADRT1 EQU   LCCA+880
LCCAR103 EQU   LCCA+876
LCCAESS2 EQU   LCCA+872
LCCASPLJ EQU   LCCA+868
LCCASMQJ EQU   LCCA+864
LCCAIRT  EQU   LCCA+736
LCCAASID EQU   LCCA+732
LCCARV89 EQU   LCCA+728
LCCAPGTA EQU   LCCASRBF+2
LCCASAFN EQU   LCCASRBF
LCCAECSA EQU   LCCA+716
LCCAICR0 EQU   LCCA+712
LCCALWTM EQU   LCCA+704
LCCARV78 EQU   LCCA+700
LCCAPINV EQU   LCCA+696
LCCARV88 EQU   LCCA+695
LCCARV87 EQU   LCCALKFG
LCCARV86 EQU   LCCALKFG
LCCARV85 EQU   LCCALKFG
LCCARV84 EQU   LCCALKFG
LCCALKRD EQU   LCCALKFG
LCCALKAQ EQU   LCCALKFG
LCCALKSA EQU   LCCALKFG
LCCALKDP EQU   LCCALKFG
LCCACRST EQU   LCCACREX
LCCACRDP EQU   LCCACREX
LCCACRLM EQU   LCCACREX
LCCACRIN EQU   LCCACREX
LCCACRRT EQU   LCCACREX
LCCACRLE EQU   LCCACREX
LCCACRRM EQU   LCCACREX
LCCACREF EQU   LCCACREX
LCCAVARY EQU   LCCACRFL
LCCARV73 EQU   LCCACRFL
LCCARV72 EQU   LCCACRFL
LCCARV71 EQU   LCCACRFL
LCCARV70 EQU   LCCACRFL
LCCARV69 EQU   LCCACRFL
LCCACLMS EQU   LCCACRFL
LCCACRTM EQU   LCCACRFL
LCCALCR0 EQU   LCCA+688
LCCACRLC EQU   LCCA+684
LCCARCPU EQU   LCCA+680
LCCADCPU EQU   LCCA+676
LCCASRBJ EQU   LCCA+672
LCCADSSR EQU   LCCA+668
LCCADSSC EQU   LCCA+660
LCCADSS3 EQU   LCCA+648
LCCADSS2 EQU   LCCA+636
LCCADSS1 EQU   LCCA+624
LCCAWTIM EQU   LCCA+616
LCCAITOD EQU   LCCA+608
LCCADTOD EQU   LCCA+600
LCCASTOD EQU   LCCA+592
LCCARIR5 EQU   LCCASPSA+44
LCCARIR4 EQU   LCCASPSA+40
LCCARIR3 EQU   LCCASPSA+36
LCCARIR2 EQU   LCCASPSA+32
LCCARPR5 EQU   LCCASPSA+28
LCCARPR4 EQU   LCCASPSA+24
LCCARPR3 EQU   LCCASPSA+20
LCCARPR2 EQU   LCCASPSA+16
LCCADSR5 EQU   LCCASPSA+12
LCCADSR4 EQU   LCCASPSA+8
LCCADSR3 EQU   LCCASPSA+4
LCCADSR2 EQU   LCCASPSA
LCCARV68 EQU   LCCA+543
LCCAPSMK EQU   LCCA+542
LCCARV67 EQU   LCCADSF2
LCCARV66 EQU   LCCADSF2
LCCARV65 EQU   LCCADSF2
LCCARV64 EQU   LCCADSF2
LCCADSRW EQU   LCCADSF2
LCCADSPL EQU   LCCADSF2
LCCAGSRB EQU   LCCADSF2
LCCASRBM EQU   LCCADSF2
LCCARV61 EQU   LCCADSF1
LCCARV60 EQU   LCCADSF1
LCCARV59 EQU   LCCADSF1
LCCARV58 EQU   LCCADSF1
LCCATIMR EQU   LCCADSF1
LCCADSS  EQU   LCCADSF1
LCCAVCPU EQU   LCCADSF1
LCCAACR  EQU   LCCADSF1
LCCACPUS EQU   LCCA+536
LCCAASCP EQU   LCCA+532
LCCAESSA EQU   LCCA+528
LCCARV55 EQU   LCCASPN4
LCCARV54 EQU   LCCASPN4
LCCARV53 EQU   LCCASPN4
LCCARV52 EQU   LCCASPN4
LCCARV51 EQU   LCCASPN4
LCCARV50 EQU   LCCASPN4
LCCARV49 EQU   LCCASPN4
LCCARV48 EQU   LCCASPN4
LCCARV47 EQU   LCCASPN3
LCCARV46 EQU   LCCASPN3
LCCARV45 EQU   LCCASPN3
LCCARV44 EQU   LCCASPN3
LCCARV43 EQU   LCCASPN3
LCCARV42 EQU   LCCASPN3
LCCARV41 EQU   LCCASPN3
LCCARV40 EQU   LCCASPN3
LCCARV39 EQU   LCCASPN2
LCCARV38 EQU   LCCASPN2
LCCARV37 EQU   LCCASPN2
LCCARV36 EQU   LCCASPN2
LCCARV35 EQU   LCCASPN2
LCCARV34 EQU   LCCASPN2
LCCARV33 EQU   LCCASPN2
LCCARV32 EQU   LCCASPN2
LCCARV31 EQU   LCCASPN1
LCCARV30 EQU   LCCASPN1
LCCAMFIO EQU   LCCASPN1
LCCARSTR EQU   LCCASPN1
LCCATSPN EQU   LCCASPN1
LCCALOCK EQU   LCCASPN1
LCCASIGP EQU   LCCASPN1
LCCARV27 EQU   LCCAIHR4
LCCARV26 EQU   LCCAIHR4
LCCARV25 EQU   LCCAIHR4
LCCARV24 EQU   LCCAIHR4
LCCARV23 EQU   LCCAIHR4
LCCARV22 EQU   LCCAIHR4
LCCARV21 EQU   LCCAIHR4
LCCARV20 EQU   LCCAIHR4
LCCARV19 EQU   LCCAIHR3
LCCARV18 EQU   LCCAIHR3
LCCARV17 EQU   LCCAIHR3
LCCARV16 EQU   LCCAIHR3
LCCARV15 EQU   LCCAIHR3
LCCARV14 EQU   LCCAIHR3
LCCARV13 EQU   LCCAIHR3
LCCARV12 EQU   LCCAIHR3
LCCARV11 EQU   LCCAIHR2
LCCARV10 EQU   LCCAIHR2
LCCARV09 EQU   LCCAIHR2
LCCARV08 EQU   LCCAIHR2
LCCARV07 EQU   LCCAIHR2
LCCARV06 EQU   LCCAIHR2
LCCARV05 EQU   LCCAIHR2
LCCARV04 EQU   LCCAIHR2
LCCARV03 EQU   LCCAIHR1
LCCARV02 EQU   LCCAIHR1
LCCARV01 EQU   LCCAIHR1
LCCAPPIE EQU   LCCAIHR1
LCCAPSG1 EQU   LCCAIHR1
LCCAPDAT EQU   LCCAIHR1
LCCAXRC2 EQU   LCCAIHR1
LCCAXRC1 EQU   LCCAIHR1
LCCAIOPS EQU   LCCA+512
LCCAGPGR EQU   LCCA+448
LCCAR133 EQU   LCCA+444
LCCAR132 EQU   LCCA+440
LCCAR131 EQU   LCCA+436
LCCAR130 EQU   LCCA+432
LCCAR129 EQU   LCCA+428
LCCAR128 EQU   LCCA+424
LCCAR127 EQU   LCCA+420
LCCAR126 EQU   LCCA+416
LCCARSGR EQU   LCCA+352
LCCAXGR3 EQU   LCCA+288
LCCAXGR2 EQU   LCCA+224
LCCAXGR1 EQU   LCCA+160
LCCACR0  EQU   LCCA+156
LCCAMCR1 EQU   LCCA+152
LCCAPVAD EQU   LCCA+148
LCCAPINT EQU   LCCA+144
LCCAPPSW EQU   LCCA+136
LCCAPGR2 EQU   LCCA+72
LCCAPGR1 EQU   LCCA+8
LCCARV77 EQU   LCCA+6
LCCACPUA EQU   LCCA+4
LCCALCCA EQU   LCCA
PGTPAM   EQU   PGTBITS
@NM00095 EQU   PGTBITS
@NM00094 EQU   PGTBITS
@NM00093 EQU   PGTBITS
@NM00092 EQU   PGTBITS
@NM00091 EQU   PGTBITS
@NM00090 EQU   PGTBITS
PGTREAL  EQU   PGTRSA
CIWWRK5  EQU   CIWA+60
CIWWRK4  EQU   CIWA+56
CIWWRK3  EQU   CIWA+52
CIWWRK2  EQU   CIWA+48
CIWWRK1  EQU   CIWA+44
CIWRETRN EQU   CIWA+40
CIWLSTPG EQU   CIWA+36
CIWCURPG EQU   CIWA+32
CIWTCB   EQU   CIWA+24
CIWEND1A EQU   CIWEND1+1
@NM00089 EQU   CIWIFLG2
CIWIKPRL EQU   CIWIFLG2
CIWIOUT  EQU   CIWIFLG2
@NM00088 EQU   CIWIFLG2
CIWIERR  EQU   CIWIFLG2
CIWIRAO  EQU   CIWIFLG2
CIWINULL EQU   CIWIFLG2
CIWILAST EQU   CIWIFLG2
CIWSTRTA EQU   CIWSTRT+1
@NM00087 EQU   CIWIFLG1
CIWILONG EQU   CIWIFLG1
@NM00086 EQU   CIWIFLG1
CIWIRLS  EQU   CIWIFLG1
CIWILOAD EQU   CIWIFLG1
CIWIFREE EQU   CIWIFLG1
CIWIFIX  EQU   CIWIFLG1
CIWICONT EQU   CIWIFLG1
CIWCUVSL EQU   CIWA+12
@NM00085 EQU   CIWA+7
CIWKEY   EQU   CIWA+6
CIWSAVRC EQU   CIWA+5
CIWRETC  EQU   CIWA+4
CIWEXTRS EQU   CIWOPFL2
CIWKEPRL EQU   CIWOPFL2
CIWPGOUT EQU   CIWOPFL2
@NM00084 EQU   CIWOPFL2
CIWERR   EQU   CIWOPFL2
CIWRAO   EQU   CIWOPFL2
CIWNULL  EQU   CIWOPFL2
CIWLAST  EQU   CIWOPFL2
@NM00083 EQU   CIWOPFL1
CIWLONG  EQU   CIWOPFL1
@NM00082 EQU   CIWOPFL1
CIWRLS   EQU   CIWOPFL1
CIWLOAD  EQU   CIWOPFL1
CIWFREE  EQU   CIWOPFL1
CIWFIX   EQU   CIWOPFL1
CIWCONT  EQU   CIWOPFL1
CIWFLG2  EQU   CIWA+1
CIWNOPST EQU   CIWFLG1
CIWFIXC  EQU   CIWFLG1
CIWOUTKR EQU   CIWFLG1
CIWBRIN  EQU   CIWFLG1
CIWBREX  EQU   CIWFLG1
@NM00081 EQU   CIWFLG1
CIWSVC3  EQU   CIWFLG1
CIWSVC2  EQU   CIWFLG1
PFTUIC   EQU   PFTE+15
PFTQNDX  EQU   PFTE+14
@NM00080 EQU   PFTFLAG2
@NM00079 EQU   PFTFLAG2
PFTPREF  EQU   PFTFLAG2
PFTSTEAL EQU   PFTFLAG2
PFTIRRG  EQU   PFTFLAG2
PFTVR    EQU   PFTFLAG2
PFTOFFLN EQU   PFTFLAG2
PFTDFRLS EQU   PFTFLAG2
PFTOFINT EQU   PFTFLAG1
PFTVRALC EQU   PFTFLAG1
PFTBADPG EQU   PFTFLAG1
PFTPCBSI EQU   PFTFLAG1
PFTVRPLT EQU   PFTFLAG1
PFTLSQA  EQU   PFTFLAG1
PFTVRINT EQU   PFTFLAG1
PFTONAVQ EQU   PFTFLAG1
PFTRSV1  EQU   PFTE+10
PFTFXCT  EQU   PFTE+8
PFTBQPTR EQU   PFTQPTRS+2
PFTFQPTR EQU   PFTQPTRS
PFTVBN   EQU   PFTPGID+2
PFTASID  EQU   PFTPGID
PCBRWRKB EQU   PCBR+60
PCBRWRKA EQU   PCBR+56
PCBRWRK9 EQU   PCBR+52
PCBRWRK8 EQU   PCBR+48
PCBRWRK7 EQU   PCBR+44
PCBRWRK6 EQU   PCBR+40
PCBRWRK5 EQU   PCBR+36
PCBRWRK4 EQU   PCBR+32
PCBRWRK3 EQU   PCBR+28
PCBRWRK2 EQU   PCBR+24
PCBRWRK1 EQU   PCBR+20
PCBRRSV1 EQU   PCBR+18
PCBRCNT  EQU   PCBR+16
PCBRECB  EQU   PCBR+8
PCBRGOTO EQU   PCBR+4
PCBRPOF  EQU   PCBRFLAG
PCBRFECB EQU   PCBRFLAG
PCBRLOAD EQU   PCBRFLAG
PCBRFAIL EQU   PCBRFLAG
PCBRFPCB EQU   PCBRFLAG
PCBRPB   EQU   PCBRFLAG
PCBRETRY EQU   PCBRFLAG
PCBRINT  EQU   PCBRFLAG
PCBEND   EQU   PCB+64
PCBAIA   EQU   PCB+36
PCBASCB  EQU   PCB+32
PCBSPCTE EQU   PCBRB
PCBVBN   EQU   PCB+26
PCBRBN   EQU   PCB+24
PCBPGTA  EQU   PCBPGT+1
PCBSWPS2 EQU   PCBFL3
@NM00078 EQU   PCBFL3
PCBNOREC EQU   PCBFL3
PCBDFRLS EQU   PCBFL3
PCBSWPLS EQU   PCBFL3
PCBSWPS1 EQU   PCBFL3
PCBSWPIN EQU   PCBFL3
PCBSWPOT EQU   PCBFL3
PCBXPTA  EQU   PCBXPT+1
@NM00077 EQU   PCBFL2
@NM00076 EQU   PCBFL2
PCBVIO   EQU   PCBFL2
PCBSUPRS EQU   PCBFL2
PCBIOERR EQU   PCBFL2
PCBGFAD  EQU   PCBFL2
PCBFREAL EQU   PCBFL2
PCBRLPA  EQU   PCBRLP+1
PCBFXC   EQU   PCBRLP
PCBIOCMP EQU   PCBFL1
PCBIOI   EQU   PCBFL1
PCBROOT  EQU   PCBFL1
PCBLFR   EQU   PCBFL1
PCBLLHLD EQU   PCBFL1
PCBPEX   EQU   PCBFL1
@NM00075 EQU   PCBFL1
PCBBQPA  EQU   PCBBQP
PCBFQPA  EQU   PCBFQP+1
PCBCQN   EQU   PCBFQP
FRRSPARM EQU   FRRSENTR+8
@NM00074 EQU   FRRSFLGS+1
@NM00073 EQU   FRRSFLG1
FRRSNEST EQU   FRRSFLG1
FRRSRCUR EQU   FRRSFLG1
FRRSFRRA EQU   FRRSENTR
FRRSENTS EQU   FRRS+84
FRRSRTMW EQU   FRRS+16
FRRSCURR EQU   FRRSHEAD+12
FRRSELEN EQU   FRRSHEAD+8
FRRSLAST EQU   FRRSHEAD+4
FRRSEMP  EQU   FRRSHEAD
RSMASMHD EQU   RSMHD+40
RSMFOEQ  EQU   RSMHD+36
RSMLIOQL EQU   RSMLIOQ+4
RSMLIOQF EQU   RSMLIOQ
RSMLSQAL EQU   RSMLSQA+2
RSMLSQAF EQU   RSMLSQA
RSMLFQL  EQU   RSMLFQ+2
RSMLFQF  EQU   RSMLFQ
RSMRSV2  EQU   RSMHD+16
RSMCNTFX EQU   RSMHD+14
RSMRSV1  EQU   RSMHD+13
@NM00048 EQU   RSMFLG1
RSMGFADD EQU   RSMFLG1
RSMCPNC  EQU   RSMFLG1
RSMCPNU  EQU   RSMFLG1
RSMGFAD  EQU   RSMFLG1
RSMIOCPC EQU   RSMFLG1
RSMIOCPU EQU   RSMFLG1
RSMASCB  EQU   RSMHD+8
RSMSPCT  EQU   RSMHD+4
RSMVSTO  EQU   RSMHD
PVTEND   EQU   PVT+1944
PVTXXXXX EQU   PVT+1940
PVTMVCLC EQU   PVT+1936
PVTVCONS EQU   PVT+1896
PVTPRSB  EQU   PVT+1892
PVTCIOQL EQU   PVTPCBQS+36
PVTCIOQF EQU   PVTPCBQS+32
PVTGFADL EQU   PVTPCBQS+28
PVTGFADF EQU   PVTPCBQS+24
PVTFPCBL EQU   PVTPCBQS+20
PVTFPCBF EQU   PVTPCBQS+16
PVTPCBQR EQU   PVTPCBQS
PVTLPAFX EQU   PVT+1850
PVTLSQAF EQU   PVT+1848
PVTLPAR  EQU   PVT+1844
PVTLPAI  EQU   PVT+1840
PVTLPAFC EQU   PVT+1838
PVTCHUIC EQU   PVT+1836
PVTCOMFX EQU   PVT+1834
PVTSQAFX EQU   PVT+1832
PVTCNTFX EQU   PVT+1830
PVTDEFFX EQU   PVT+1828
PVTFIXOK EQU   PVT+1826
PVTPEROK EQU   PVT+1824
PVTMAXFX EQU   PVT+1822
PVTPERFX EQU   PVT+1820
PVTRSRB  EQU   PVT+1776
PVTRESV5 EQU   PVT+1773
PVTSRBS  EQU   PVT+1772
PVTSSRB  EQU   PVT+1768
PVTACA   EQU   PVTWSAX+1400
PVTWSA18 EQU   PVTWSAX+1256
PVTWSA17 EQU   PVTWSAX+1184
PVTWSA16 EQU   PVTWSAX+1112
PVTWSA15 EQU   PVTWSAX+1040
PVTWSA13 EQU   PVTWSAX+896
PVTWSA12 EQU   PVTWSAX+824
PVTWSA11 EQU   PVTWSAX+752
PVTWSA10 EQU   PVTWSAX+672
PVTWSA9  EQU   PVTWSAX+592
PVTWSA8  EQU   PVTWSAX+504
PVTWSA6  EQU   PVTWSAX+360
PVTWSA5  EQU   PVTWSAX+288
PVTWSA4  EQU   PVTWSAX+216
PVTWSA2  EQU   PVTWSAX+72
PVTWSA1  EQU   PVTWSAX
PVTPFTQR EQU   PVTQS+20
PVTRSBQL EQU   PVTQS+18
PVTRSBQF EQU   PVTQS+16
PVTSQAQL EQU   PVTQS+14
PVTSQAQF EQU   PVTQS+12
PVTCFQL  EQU   PVTQS+10
PVTCFQF  EQU   PVTQS+8
PVTRSRVL EQU   PVTQS+6
PVTRSRVF EQU   PVTQS+4
PVTAFQL  EQU   PVTQS+2
PVTAFQF  EQU   PVTQS
PVTSPFR  EQU   PVT+302
PVTCFMCT EQU   PVT+300
PVTSPREC EQU   PVT+296
PVTCAREC EQU   PVT+292
PVTCAOUT EQU   PVT+288
PVTCAIN  EQU   PVT+284
PVTNSWPS EQU   PVT+280
PVTNPREC EQU   PVT+276
PVTSPOUT EQU   PVT+272
PVTSPIN  EQU   PVT+268
PVTVAMR  EQU   PVT+264
PVTVAMO  EQU   PVT+260
PVTVAMI  EQU   PVT+256
PVTNPOUT EQU   PVT+252
PVTNPIN  EQU   PVT+248
PVTFRSLT EQU   PVT+240
PVTPAGIO EQU   PVT+236
PVTSWPIO EQU   PVT+232
PVTPSWPP EQU   PVT+228
PVTPPREF EQU   PVT+224
PVTPOPBR EQU   PVT+220
PVTPRELF EQU   PVT+216
PVTPRELV EQU   PVT+212
PVTPFREE EQU   PVT+208
PVTPRELS EQU   PVT+204
PVTPOUT  EQU   PVT+200
PVTPFXLD EQU   PVT+196
PVTPITAS EQU   PVT+192
PVTPSRBP EQU   PVT+188
PVTPDSEG EQU   PVT+184
PVTPCSGB EQU   PVT+180
PVTPCSEG EQU   PVT+176
PVTPINV  EQU   PVT+172
PVTPSWPC EQU   PVT+168
PVTPSOUT EQU   PVT+164
PVTPSWIN EQU   PVT+160
PVTPRCV  EQU   PVT+156
PVTPRCFI EQU   PVT+152
PVTPRCF  EQU   PVT+148
PVTPVRC  EQU   PVT+144
PVTPVRIN EQU   PVT+140
PVTPVRLS EQU   PVT+136
PVTPVEQR EQU   PVT+132
PVTPPIOI EQU   PVT+128
PVTPVRPO EQU   PVT+124
PVTPRFR  EQU   PVT+120
PVTPFP2  EQU   PVT+116
PVTPFP   EQU   PVT+112
PVTPFTE  EQU   PVT+108
PVTPCB   EQU   PVT+104
PVTREP2  EQU   PVT+100
PVTPIOCP EQU   PVT+96
PVTPIOP  EQU   PVT+92
PVTPGFAD EQU   PVT+88
PVTPGFA  EQU   PVT+84
PVTPSQA  EQU   PVT+80
PVTPSINT EQU   PVT+76
PVTPSIB  EQU   PVT+72
PVTSRBID EQU   PVT+68
PVTHQSA  EQU   PVT+62
PVTLQSA  EQU   PVT+60
PVTOROOT EQU   PVT+56
PVTPRCA  EQU   PVT+52
PVTREUS  EQU   PVT+48
PVTSQNPC EQU   PVT+47
PVTSQVRC EQU   PVT+46
PVTRSUS  EQU   PVT+44
PVTVROOT EQU   PVT+40
PVTPCBLO EQU   PVT+38
PVTPCBCT EQU   PVT+36
PVTDFRS  EQU   PVT+34
PVTRSQA  EQU   PVT+32
PVTPCBNO EQU   PVT+30
PVTSRBNO EQU   PVT+29
PVTSQDC  EQU   PVT+28
PVTLCSA  EQU   PVT+26
PVTLPRIV EQU   PVT+24
PVTLVR   EQU   PVT+22
PVTFVR   EQU   PVT+20
PVTFPFN  EQU   PVT+16
PVTPCBS  EQU   PVT+10
PVTPOOL  EQU   PVT+8
PVTAFCOK EQU   PVT+6
PVTAFCLO EQU   PVT+4
PVTAFC   EQU   PVT+2
@NM00047 EQU   PVTFLAG2
PVTRSMGM EQU   PVTFLAG2
PVTSIT   EQU   PVTFLAG1
PVTLSI   EQU   PVTFLAG1
PVTAPREF EQU   PVTFLAG1
PVTPCBLT EQU   PVTFLAG1
PVTSRBIU EQU   PVTFLAG1
PVTBGMS  EQU   PVTFLAG1
PVTPMSG  EQU   PVTFLAG1
RCATASID EQU   RCA+18
RCAREP1  EQU   RCANAME6
RCAPSIF  EQU   RCANAME6
RCAPSIX  EQU   RCANAME6
RCAVEQRP EQU   RCANAME6
RCARCFC  EQU   RCANAME6
RCACSGB  EQU   RCANAME6
RCAPS113 EQU   RCANAME6
RCAFREE  EQU   RCANAME5
RCARFR2  EQU   RCANAME5
RCACPBR  EQU   RCANAME5
RCASORT  EQU   RCANAME5
RCARELV  EQU   RCANAME5
RCARELF  EQU   RCANAME5
RCAGFAD  EQU   RCANAME4
RCAVEQRF EQU   RCANAME4
RCAVEQRC EQU   RCANAME4
RCATERM  EQU   RCANAME4
RCASQA   EQU   RCANAME4
RCASOUT  EQU   RCANAME4
RCARFR   EQU   RCANAME3
RCARELS  EQU   RCANAME3
RCARCF   EQU   RCANAME3
RCAPSII  EQU   RCANAME3
RCAPSIB  EQU   RCANAME3
RCAPS112 EQU   RCANAME3
RCASWPC  EQU   RCANAME2
RCAOUT   EQU   RCANAME2
RCAITAS  EQU   RCANAME2
RCAIOCP  EQU   RCANAME2
RCAFXLD  EQU   RCANAME1
RCAVEQR  EQU   RCANAME1
RCADSEG  EQU   RCANAME1
RCADLAS  EQU   RCANAME1
RCACSEG  EQU   RCANAME1
RCAVAMSI EQU   RCANAME1
@NM00046 EQU   RCAFLAGS
@NM00045 EQU   RCAFLAGS
RCAQS    EQU   RCAFLAGS
@NM00044 EQU   RCANAME7
RCAPSIY  EQU   RCANAME7
RCAPIOI  EQU   RCANAME7
@NM00043 EQU   SDWA+512
@NM00042 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
SDWAERTM EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00041 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00040 EQU   SDWADDAT+3
@NM00039 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00038 EQU   SDWASDA1
SDWAERR  EQU   SDWASDA1
SDWAIO   EQU   SDWASDA1
SDWADM   EQU   SDWASDA0
SDWAQQS  EQU   SDWASDA0
SDWACBS  EQU   SDWASDA0
SDWAGTF  EQU   SDWASDA0
SDWASWA  EQU   SDWASDA0
SDWALSQA EQU   SDWASDA0
SDWASQA  EQU   SDWASDA0
SDWANUC  EQU   SDWASDA0
@NM00037 EQU   SDWADUMP+2
@NM00036 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00035 EQU   SDWADPFS
SDWAENSN EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWASEQ# EQU   SDWA+290
SDWAASID EQU   SDWA+288
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
@NM00034 EQU   SDWAACF3
@NM00033 EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
@NM00032 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00031 EQU   SDWAACF2
SDWALCPU EQU   SDWACPUA+2
@NM00030 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
SDWACPUI EQU   SDWA+239
@NM00029 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAERFL EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
SDWACLUP EQU   SDWAERRD
@NM00028 EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00027 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWAMCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00026 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00025 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00024 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR04 EQU   SDWASRSV+16
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00023 EQU   SDWAINC2
@NM00022 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00021 EQU   SDWAILC2
@NM00020 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00019 EQU   SDWANXT2
@NM00018 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00017 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00016 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00015 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00014 EQU   SDWAINC1
@NM00013 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00012 EQU   SDWAILC1
@NM00011 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00010 EQU   SDWANXT1
@NM00009 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00008 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00007 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00006 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00005 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00004 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00003 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
@NM00002 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00001 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAREQ  EQU   SDWACMPF
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSMA EQU   ASCBRSM+1
ASCBRV54 EQU   ASCBRSMF
ASCBRV53 EQU   ASCBRSMF
ASCBRV52 EQU   ASCBRSMF
ASCBRV51 EQU   ASCBRSMF
ASCBVEQR EQU   ASCBRSMF
ASCBN2LP EQU   ASCBRSMF
ASCB1LPU EQU   ASCBRSMF
ASCB2LPU EQU   ASCBRSMF
ASCBLDA  EQU   ASCB+48
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
@NM00072 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00071 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00070 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00069 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSAULCMS EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00068 EQU   FLCFSA
@NM00067 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00066 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00065 EQU   FLCIOA
@NM00064 EQU   FLCMCLA+15
@NM00063 EQU   FLCMCLA+14
@NM00062 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00061 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00060 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00059 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00058 EQU   FLCPER
@NM00057 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00056 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00055 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00054 EQU   FLCPIILC
@NM00053 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00052 EQU   FLCSVILC
@NM00051 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00050 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00049 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
*                                      END UNREFERENCED COMPONENTS
@RT00151 EQU   DUMPCALL
@RF00151 EQU   EXITING
@RC00175 EQU   @RC00156
@RT00298 EQU   EXITING
@RF00337 EQU   ENDPIX
@RF00191 EQU   @RC00175
@ENDDATA EQU   *
         END   IEAVRCV,(C'PLS2024',0701,78164)
