         TITLE 'IEAVPFTE: PFTE ENQ/DEQ                                 *
                        '
IEAVPFTE CSECT
         USING *,15
         MODID BR=NO
         ENTRY IEAVPFT2
IEAVPFT2 DS    0H
         DROP  R15
         STM   R0,R15,PVTWSA12(PVTPTR)      SAVE INPUT REGS
         BALR  R12,R0                       ESTABLISH ADDRESS
PSTART   DS    0H
         USING PSTART,R12
*   RCAPTR=PVTPRCA;                 /* GET THE ADDRESS OF THE RSM RCA*/
         L     RCAPTR,PVTPRCA(,PVTPTR)                             0073
*   RCAPFTE='1'B;                   /* SET MODULE-ENTERED FLAG IN THE
*                                      RCA                           */
         OI    RCAPFTE(RCAPTR),B'00001000'                         0074
*                                                                  0075
*/********************************************************************/
*/* THE FOLLOWING SECTION DOES THE DEQUEUE PROCESSING. A TEST IS MADE*/
*/* TO DETERMINE IF A DEQUEUE OPERATION IS REQUIRED. IF THE DEQUEUE  */
*/* OPERATION IS NOT REQUIRED, CONTROL PASSES TO THE ENQUEUE         */
*/* PROCESSOR. IF THE DEQUEUE OPERATION IS REQUIRED, IT IS DONE IN   */
*/* THIS SECTION. IF THE PFTE WAS DEQUEUED FROM THE AFQ, THE AFC IS  */
*/* DECREMENTED. IF THE AFC IS NOW BELOW ITS SAFE THRESHOLD, THE     */
*/* PVTLSI IS CHECKED TO DETERMINE IF THE SRM HAS BEEN               */
*/* NOTIFIED. IF NOT NOTIFIED, A SYSEVENT IS ISSUED TO WARN OF THE   */
*/* LOW AFC. THE PVTLSI IS TURNED ON. IF THE PVTLSI IS ALREADY ON,   */
*/* AND THE AFC IS ZERO, THE SYSEVENT WILL BE RE-ISSUED WITH A       */
*/* DESPERATION CODE IN REG 1. IN ALL DEQUEUE OPERATIONS, THE PFTE IS*/
*/* LEFT IN THE LOGICALLY UNQUEUED STATE. CONTROL CONTINUES AT THE   */
*/* ENQUEUE PROCESSOR.                                               */
*/********************************************************************/
*                                                                  0075
*   RSVEXTRA='0'B;                  /* CLEAR FLAG INDICATING EXTRA 0075
*                                      PFTE ON SQA RSV QUEUE IS TO BE
*                                      REMOVED FROM THE SQA RESERVE
*                                      QUEUE                 @ZA10767*/
         NI    RSVEXTRA(PVTPTR),B'10111111'                        0075
*SETUPDQT:                                                         0076
*   ;                               /*                       @ZA10767*/
SETUPDQT DS    0H                                                  0077
*   RESPECIFY                                                      0077
*    (PFTERBN,                                                     0077
*     PFTEPTR) RESTRICTED;                                         0077
*   PFTERBN=SAVERBN;                /* GET RBN OF INPUT PFTE         */
         SLR   PFTERBN,PFTERBN                                     0078
         ICM   PFTERBN,3,SAVERBN(PVTPTR)                           0078
*   PFTEPTR=PVTPFTP+PFTERBN;        /* GET ADDR OF THE INPUT PFTE    */
         LR    PFTEPTR,PFTERBN                                     0079
         AL    PFTEPTR,PVTPFTP(,PVTPTR)                            0079
*   SAVEDQID=PFTQNDX;               /* Q ID WHERE PFTE IS NOW      0080
*                                                            @Z40FPYL*/
         MVC   SAVEDQID(1),PFTQNDX(PFTEPTR)                        0080
*DEQTEST:                                                          0081
*                                                                  0081
*   /*****************************************************************/
*   /*                                                               */
*   /* PFTE IS TO BE DEQUEUED. DO THE DEQUEUE PROCESSING NEXT.       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0081
*   IF PFTQNDX=PFTNQN THEN          /* SEE IF PFTE NEEDS TO BE DEQD  */
DEQTEST  CLI   PFTQNDX(PFTEPTR),X'FF'                              0081
         BNE   @RF00081                                            0081
*     DO;                           /* IT DOES NOT           @Z40FPYL*/
*       IF SAVETQID=PFTCFQN THEN    /* II'S GOING TO CFQ     @Z40FPYL*/
         CLI   SAVETQID(PVTPTR),8                                  0083
         BNE   @RF00083                                            0083
*         PVTCFMCT=PVTCFMCT+1;      /* INCREMENT PVTCFMCT    @Z40FPYL*/
         LA    @11,1                                               0084
         AH    @11,PVTCFMCT(,PVTPTR)                               0084
         STH   @11,PVTCFMCT(,PVTPTR)                               0084
*       ELSE                        /* NOT GOING TO THE CFQ  @Z40FPYL*/
*         IF SAVETQID=PFTLFQN×SAVETQID=PFTLSQAN THEN/*       @Z40FPYL*/
         B     @RC00083                                            0085
@RF00083 CLI   SAVETQID(PVTPTR),128                                0085
         BE    @RT00085                                            0085
         CLI   SAVETQID(PVTPTR),132                                0085
         BNE   @RF00085                                            0085
@RT00085 DS    0H                                                  0086
*           DO;                     /* FOR LFQ OR FOR LSQA INCREMENT
*                                      ASCBFMCT              @Z40FPYL*/
*             RSMHDPTR=SAVEASCB->ASCBRSM;/* INPUT TO PGSECS  @Z40FPYL*/
         L     @11,SAVEASCB(,PVTPTR)                               0087
         L     RSMHDPTR,ASCBRSM(,@11)                              0087
*             CALL PGSECS;          /* FIRST CALCULATE PAGE-SECONDS
*                                                            @Z40FPYL*/
         BAL   @14,PGSECS                                          0088
*             SAVEASCB->ASCBFMCT=SAVEASCB->ASCBFMCT+1;/*     @Z40FPYL*/
         L     @11,SAVEASCB(,PVTPTR)                               0089
         LA    @07,1                                               0089
         AH    @07,ASCBFMCT(,@11)                                  0089
         STH   @07,ASCBFMCT(,@11)                                  0089
*           END;                    /*                       @Z40FPYL*/
*         ELSE                                                     0091
*           ;                       /* NOT GOING TO CFQ OR LFQ     0091
*                                                            @Z40FPYL*/
@RF00085 DS    0H                                                  0092
*       GOTO ENQTEST;               /* WHATEVER Q IT'S GOING TO, MUST*/
         B     ENQTEST                                             0092
*     END;                          /* TEST FOR ENQ          @Z40FPYL*/
*   ELSE                                                           0094
*     ;                             /* PFTE DOES NEED TO BE DEQD   0094
*                                                            @Z40FPYL*/
@RF00081 DS    0H                                                  0095
*   RESPECIFY                                                      0095
*    (QHEADEND) RESTRICTED;                                        0095
*   IF PFTQNDX<QCOMPARE THEN        /* TEST TO DETERMINE IF THE PFTE
*                                      IS ON A LOCAL OR GLOBAL FRAME
*                                      QUEUE                         */
         CLI   PFTQNDX(PFTEPTR),X'80'                              0096
         BNL   @RF00096                                            0096
*     QHEADEND=ADDR(PVTQS)+PFTQNDX; /* IS ON A GLOBAL QUEUE. QUEUE 0097
*                                      POINTERS ARE IN THE PVT. GET
*                                      THE ADDRESS OF THESE QUEUE  0097
*                                      POINTERS                      */
         LA    QHEADEND,PVTQS(,PVTPTR)                             0097
         SLR   @11,@11                                             0097
         IC    @11,PFTQNDX(,PFTEPTR)                               0097
         ALR   QHEADEND,@11                                        0097
*   ELSE                            /* IS ON A LOCAL QUEUE           */
*     QHEADEND=ADDR(RSMQS)+(PFTQNDX-QCOMPARE);/* QUEUE POINTERS ARE
*                                      IN THE RSMHD. GET THE ADDRESS
*                                      OF THESE QUEUE POINTERS       */
         B     @RC00096                                            0098
@RF00096 LA    QHEADEND,RSMQS(,RSMHDPTR)                           0098
         SLR   @11,@11                                             0098
         IC    @11,PFTQNDX(,PFTEPTR)                               0098
         SH    @11,@CH00100                                        0098
         ALR   QHEADEND,@11                                        0098
*   IF PFTFQPTR=0 THEN              /* TEST TO SEE IF THIS IS THE  0099
*                                      LAST PFTE IN THE QUEUE.       */
@RC00096 ICM   @11,3,PFTFQPTR(PFTEPTR)                             0099
         BNZ   @RF00099                                            0099
*     ENDPTR=PFTBQPTR;              /* IS THE LAST ENTRY. MAKE THE 0100
*                                      PFTE WHICH POINTS FOREWARD TO
*                                      THIS PFTE THE NEW LAST ENTRY
*                                      IN THE QUEUE.                 */
         MVC   ENDPTR(2,QHEADEND),PFTBQPTR(PFTEPTR)                0100
*   ELSE                            /* IS NOT THE LAST ENTRY.        */
*     DO;                           /* PROCESS BACK POINTERS OF PFTES*/
         B     @RC00099                                            0101
@RF00099 DS    0H                                                  0102
*       RESPECIFY                                                  0102
*        (LASTPFTE) RESTRICTED;                                    0102
*       LASTPFTE=PVTPFTP+PFTFQPTR;  /* GET THE ADDRESS OF THE NEXT 0103
*                                      PFTE                          */
         SLR   LASTPFTE,LASTPFTE                                   0103
         ICM   LASTPFTE,3,PFTFQPTR(PFTEPTR)                        0103
         AL    LASTPFTE,PVTPFTP(,PVTPTR)                           0103
*       LASTPFTE->PFTBQPTR=PFTBQPTR;/* MAKE THE BACKWARD PTR OF THE
*                                      NEXT PFTE POINT TO THE PFTE 0104
*                                      PREVIOUS TO THE PFTE TO BE  0104
*                                      DEQUEUED.                     */
         MVC   PFTBQPTR(2,LASTPFTE),PFTBQPTR(PFTEPTR)              0104
*       RESPECIFY                                                  0105
*        (LASTPFTE) UNRESTRICTED;                                  0105
*     END;                                                         0106
*   IF PFTBQPTR=0 THEN              /* TEST TO SEE IF THIS IS THE  0107
*                                      FIRST PFTE IN THE QUEUE.      */
@RC00099 ICM   @11,3,PFTBQPTR(PFTEPTR)                             0107
         BNZ   @RF00107                                            0107
*     HEADPTR=PFTFQPTR;             /* IS THE FIRST PFTE IN THE    0108
*                                      QUEUE. MAKE THE PFTE WHICH IS
*                                      FOREWARD POINTED TO BY THIS 0108
*                                      PFTE THE NEW FIRST ENTRY IN 0108
*                                      THE QUEUE.                    */
         MVC   HEADPTR(2,QHEADEND),PFTFQPTR(PFTEPTR)               0108
*   ELSE                            /* IS NOT THE FIRST PFTE IN THE
*                                      QUEUE.                        */
*     DO;                           /* PROCESS FOREWARD POINTERS OF
*                                      PFTES                         */
         B     @RC00107                                            0109
@RF00107 DS    0H                                                  0110
*       RESPECIFY                                                  0110
*        (FRSTPFTE) RESTRICTED;                                    0110
*       FRSTPFTE=PVTPFTP+PFTBQPTR;  /* GET THE ADDRESS OF THE      0111
*                                      PREVIOUS PFTE                 */
         SLR   FRSTPFTE,FRSTPFTE                                   0111
         ICM   FRSTPFTE,3,PFTBQPTR(PFTEPTR)                        0111
         AL    FRSTPFTE,PVTPFTP(,PVTPTR)                           0111
*       FRSTPFTE->PFTFQPTR=PFTFQPTR;/* MAKE THE FOREWARD PTR OF THE
*                                      PREVIOUS PFTE POINT TO THE  0112
*                                      PFTE AFTER THE PFTE TO BE   0112
*                                      DEQUEUED.                     */
         MVC   PFTFQPTR(2,FRSTPFTE),PFTFQPTR(PFTEPTR)              0112
*     END;                                                         0113
*   RESPECIFY                                                      0114
*    (QHEADEND,                                                    0114
*     FRSTPFTE) UNRESTRICTED;                                      0114
@RC00107 DS    0H                                                  0115
*   IF PFTQNDX=PFTAFQN THEN         /* IF THE PFTE WAS ON THE AFQ, 0115
*                                      SPECIAL PROCESSING MUST BE  0115
*                                      DONE                          */
         CLI   PFTQNDX(PFTEPTR),X'00'                              0115
         BNE   @RF00115                                            0115
*     DO;                                                          0116
*       IF SAVETQID=PFTCFQN THEN    /* IT'S GOING TO CFQ     @Z40FPYL*/
         CLI   SAVETQID(PVTPTR),8                                  0117
         BNE   @RF00117                                            0117
*         PVTCFMCT=PVTCFMCT+1;      /* INCREMENT PVTCFMCT    @Z40FPYL*/
         LA    @11,1                                               0118
         AH    @11,PVTCFMCT(,PVTPTR)                               0118
         STH   @11,PVTCFMCT(,PVTPTR)                               0118
*       ELSE                        /*                       @Z40FPYL*/
*         IF SAVETQID=PFTLFQN×SAVETQID=PFTLSQAN THEN/*       @Z40FPYL*/
         B     @RC00117                                            0119
@RF00117 CLI   SAVETQID(PVTPTR),128                                0119
         BE    @RT00119                                            0119
         CLI   SAVETQID(PVTPTR),132                                0119
         BNE   @RF00119                                            0119
@RT00119 DS    0H                                                  0120
*           DO;                     /* INCREMENT ASCBFMCT    @Z40FPYL*/
*             RSMHDPTR=SAVEASCB->ASCBRSM;/* INPUT TO PGSECS  @Z40FPYL*/
         L     @11,SAVEASCB(,PVTPTR)                               0121
         L     RSMHDPTR,ASCBRSM(,@11)                              0121
*             CALL PGSECS;          /* AFTER CALCULATING PAGE-SECONDS
*                                                            @Z40FPYL*/
         BAL   @14,PGSECS                                          0122
*             SAVEASCB->ASCBFMCT=SAVEASCB->ASCBFMCT+1;/*     @Z40FPYL*/
         L     @11,SAVEASCB(,PVTPTR)                               0123
         LA    @07,1                                               0123
         AH    @07,ASCBFMCT(,@11)                                  0123
         STH   @07,ASCBFMCT(,@11)                                  0123
*           END;                    /*                       @Z40FPYL*/
*         ELSE                                                     0125
*           ;                       /* NOT GOING TO CFQ, LFQ, OR LSQA
*                                                            @Z40FPYL*/
@RF00119 DS    0H                                                  0126
*       PFTONAVQ='0'B;              /* THE ON-AFQ FLAG IS TURNED OFF */
@RC00117 NI    PFTONAVQ(PFTEPTR),B'01111111'                       0126
*       PVTAFC=PVTAFC-1;            /* THE AVAILABLE FRAME COUNT IS
*                                      DECREMENTED                   */
         LH    @11,PVTAFC(,PVTPTR)                                 0127
         BCTR  @11,0                                               0127
         STH   @11,PVTAFC(,PVTPTR)                                 0127
*       IF PVTAFC<PVTAFCLO THEN     /* TEST IF THE AFC IS BELOW    0128
*                                      THRESHOLD                     */
         CH    @11,PVTAFCLO(,PVTPTR)                               0128
         BNL   @RF00128                                            0128
*         DO;                       /* AFC IS TOO LOW:NOTIFY SRM     */
*                                                                  0129
*           /*********************************************************/
*           /*                                                       */
*           /* SYSEVENTS ARE ISSUED TO NOTIFY THE SRM OF SYSTEM      */
*           /* STATUS. THE AVQLOW SYSEVENT IS TO WARN WHEN THE NUMBER*/
*           /* OF AVAILABLE FRAMES IS TOO LOW. IF THE COUNT OF       */
*           /* AVAILABLE FRAMES EVER GOES TO ZERO, A SPECIAL CODE IN */
*           /* REG 1 IS USED TO NOTIFY THE SRM OF THE COMING DOOM.   */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0130
*           IF PVTLSI='0'B THEN     /* TEST IF THE SRM HAS ALREADY 0130
*                                      BEEN NOTIFIED                 */
         TM    PVTLSI(PVTPTR),B'00000100'                          0130
         BNZ   @RF00130                                            0130
*             DO;                   /* SRM NOT NOTIFIED: ISSUE AVQLOW
*                                      SYSEVENT                      */
*               RESPECIFY                                          0132
*                (R1,                                              0132
*                 R13) RESTRICTED;                                 0132
*               R13=ADDR(PVTSAVE);  /* GET SAVE AREA ADDR FOR SRM TO
*                                      USE                           */
         LA    R13,PVTSAVE(,PVTPTR)                                0133
*               R1=REGSYS;          /* SET CODE FOR REGULAR AVQLOW 0134
*                                      SYSEVENT                      */
         LA    R1,1                                                0134
*               GENERATE            /* ISSUE AVQLOW SYSEVENT         */
*                   NODEFS REFS(CVTPTR,CVTOPTE,CVT) NOSETS NOFLOWS;
         SYSEVENT AVQLOW,ENTRY=BRANCH        AFQ NEEDS PFTES
*               RESPECIFY                                          0136
*                (R13) UNRESTRICTED;                               0136
*               PVTLSI='1'B;        /* SET FLAG: SRM NOTIFIED FOR LOW
*                                      AFC                           */
         OI    PVTLSI(PVTPTR),B'00000100'                          0137
*             END;                                                 0138
*           IF PVTAFC=0 THEN        /* TEST IF AFC IS ZERO           */
@RF00130 ICM   @11,3,PVTAFC(PVTPTR)                                0139
         BNZ   @RF00139                                            0139
*             DO;                   /* AFC IS NOW ZERO. NOTIFY SRM OF
*                                      EMPTY AFQ                     */
*               RESPECIFY                                          0141
*                (R1,                                              0141
*                 R13) RESTRICTED;                                 0141
*               R13=ADDR(PVTSAVE);  /* GET SAVE AREA ADDR FOR SRM TO
*                                      USE                           */
         LA    R13,PVTSAVE(,PVTPTR)                                0142
*               R1=DESPSYS;         /* SET CODE FOR DESPERATION    0143
*                                      AVQLOW SYSEVENT               */
         LA    R1,2                                                0143
*               GENERATE            /* ISSUE ANOTHER AVQLOW SYSEVENT */
*                   NODEFS REFS(CVTPTR,CVTOPTE,CVT) NOSETS NOFLOWS;
         SYSEVENT AVQLOW,ENTRY=BRANCH        AFQ NEEDS PFTES
*               RESPECIFY                                          0145
*                (R13) UNRESTRICTED;                               0145
*             END;                                                 0146
*         END;                                                     0147
@RF00139 DS    0H                                                  0148
*     END;                                                         0148
@RF00128 DS    0H                                                  0149
*   PFTQNDX=PFTNQN;                 /* SET QUEUE ID IN DEQUEUED PFTE
*                                      TO SHOW THE UNQUEUED STATUS   */
@RF00115 MVI   PFTQNDX(PFTEPTR),X'FF'                              0149
*                                                                  0150
*/********************************************************************/
*/* THE FOLLOWING SECTION DOES THE ENQUEUE PROCESSING. A TEST IS MADE*/
*/* TO DETERMINE IF AN ENQUEUE OPERATION IS REQUIRED. IF THE ENQUEUE */
*/* OPERATION IS NOT REQUIRED CONTROL PASSES TO THE EXIT PROCESSOR   */
*/* WHICH WILL RETURN CONTROL TO THE CALLER. IF THE ENQUEUE OPERATION*/
*/* IS REQUIRED, A TEST IS MADE TO DETERMINE IF THE PFTE IS TO BE    */
*/* ENQUEUED TO THE AFQ. IF THE PFTE IS TO BE ENQUEUED TO THE AFQ,   */
*/* CONTROL PASSES TO THE AFQ ENQUEUE PROCESSOR. IF THE PFTE IS TO BE*/
*/* ENQUEUED TO A QUEUE OTHER THAN THE AFQ, IT IS DONE IN THIS       */
*/* SECTION. A SUBROUTINE DOES THE ACTUAL ENQUEUE OPERATION. THE     */
*/* SUBROUTINE WILL THEN PASS CONTROL TO THE EXIT PROCESSOR WHICH    */
*/* WILL RETURN CONTROL TO THE CALLER.                               */
*/********************************************************************/
*                                                                  0150
*ENQTEST:                                                          0150
*   PFTQPTRS=0;                     /* ZERO THE FORWARD AND BACKWARD
*                                      POINTERS IN THE UNQUEUED PFTE */
ENQTEST  SLR   @11,@11                                             0150
         ST    @11,PFTQPTRS(,PFTEPTR)                              0150
*   IF SAVETQID=PFTNQN THEN         /* SEE IF PFTE NEEDS TO BE ENQD  */
         CLI   SAVETQID(PVTPTR),255                                0151
         BNE   @RF00151                                            0151
*     DO;                           /* IF DOES NOT           @Z40FPYL*/
*       IF SAVEDQID=PFTCFQN THEN    /* IF IT CAME FROM THE CFQ     0153
*                                                            @Z40FPYL*/
         CLI   SAVEDQID,8                                          0153
         BNE   @RF00153                                            0153
*         PVTCFMCT=PVTCFMCT-1;      /* DECREMENT PVTCFMCT    @Z40FPYL*/
         LH    @11,PVTCFMCT(,PVTPTR)                               0154
         BCTR  @11,0                                               0154
         STH   @11,PVTCFMCT(,PVTPTR)                               0154
*       ELSE                        /*                       @Z40FPYL*/
*         IF SAVEDQID=PFTLFQN×SAVEDQID=PFTLSQAN THEN/* IF IT CAME  0155
*                                      FROM THE LFQ          @Z40FPYL*/
         B     @RC00153                                            0155
@RF00153 CLI   SAVEDQID,128                                        0155
         BE    @RT00155                                            0155
         CLI   SAVEDQID,132                                        0155
         BNE   @RF00155                                            0155
@RT00155 DS    0H                                                  0156
*           DO;                     /* DECREMENT ASCBFMCT AFTER    0156
*                                                            @Z40FPYL*/
*             CALL PGSECS;          /* CALCULATING PAGE-SECONDS    0157
*                                                            @Z40FPYL*/
         BAL   @14,PGSECS                                          0157
*             RSMASCB->ASCBFMCT=RSMASCB->ASCBFMCT-1;/*       @Z40FPYL*/
         L     @11,RSMASCB(,RSMHDPTR)                              0158
         LH    @07,ASCBFMCT(,@11)                                  0158
         BCTR  @07,0                                               0158
         STH   @07,ASCBFMCT(,@11)                                  0158
*           END;                    /*                       @Z40FPYL*/
*         ELSE                                                     0160
*           ;                       /* NOT FROM CFQ OR LFQ   @Z40FPYL*/
@RF00155 DS    0H                                                  0161
*       GOTO EXITPFTE;              /* NO MATTER WHERE IT CAME FROM  */
         B     EXITPFTE                                            0161
*     END;                          /* MUST GO TO EXIT ROUTINE     0162
*                                                            @Z40FPYL*/
*   ELSE                                                           0163
*     ;                             /* PFTE DOES NEED TO BE ENQD   0163
*                                                            @Z40FPYL*/
@RF00151 DS    0H                                                  0164
*   IF SAVETQID=PFTAFQN THEN        /* TEST IF THE PFTE IS TO BE   0164
*                                      ENQUEUED TO THE AFQ           */
         CLI   SAVETQID(PVTPTR),0                                  0164
         BNE   @RF00164                                            0164
*     DO;                           /*                       @Z40FPYL*/
*       IF SAVEDQID=PFTCFQN THEN    /* IT CAME FROM CFQ      @Z40FPYL*/
         CLI   SAVEDQID,8                                          0166
         BNE   @RF00166                                            0166
*         PVTCFMCT=PVTCFMCT-1;      /* DECREMENT PVTCFMCT    @ZA0FPYL*/
         LH    @11,PVTCFMCT(,PVTPTR)                               0167
         BCTR  @11,0                                               0167
         STH   @11,PVTCFMCT(,PVTPTR)                               0167
*       ELSE                                                       0168
*         IF SAVEDQID=PFTLFQN×SAVEDQID=PFTLSQAN THEN/*       @Z40FPYL*/
         B     @RC00166                                            0168
@RF00166 CLI   SAVEDQID,128                                        0168
         BE    @RT00168                                            0168
         CLI   SAVEDQID,132                                        0168
         BNE   @RF00168                                            0168
@RT00168 DS    0H                                                  0169
*           DO;                     /* FROM LFQ OR LSQA DECREMENT  0169
*                                      ASCBFMCT AFTER        @Z40FPYL*/
*             CALL PGSECS;          /* CALCULATING PGSECS    @Z40FPYL*/
         BAL   @14,PGSECS                                          0170
*             RSMASCB->ASCBFMCT=RSMASCB->ASCBFMCT-1;/*       @Z40FPYL*/
         L     @11,RSMASCB(,RSMHDPTR)                              0171
         LH    @07,ASCBFMCT(,@11)                                  0171
         BCTR  @07,0                                               0171
         STH   @07,ASCBFMCT(,@11)                                  0171
*           END;                    /*                       @Z40FPYL*/
*         ELSE                                                     0173
*           ;                       /* WHEREVER IT CAME FROM @Z40FPYL*/
@RF00168 DS    0H                                                  0174
*       GOTO ENQAFQ;                /* IT MUST GO TO AFQ ENQ @Z40FPYL*/
         B     ENQAFQ                                              0174
*     END;                          /* PROCESSOR             @Z40FPYL*/
*   ELSE                                                           0176
*     ;                             /* TO BE ENQD BUT NOT TO AFQ   0176
*                                                            @Z40FPYL*/
@RF00164 DS    0H                                                  0177
*   IF SAVETQID=PFTLFQN×SAVETQID=PFTLSQAN THEN/*             @Z40FPYL*/
         CLI   SAVETQID(PVTPTR),128                                0177
         BE    @RT00177                                            0177
         CLI   SAVETQID(PVTPTR),132                                0177
         BNE   @RF00177                                            0177
@RT00177 DS    0H                                                  0178
*     DO;                           /* IF FRAME GOES FROM THE CFQ TO
*                                      EITHER THE            @Z40FPYL*/
*       IF SAVEDQID=PFTCFQN THEN    /* LFQ OR LSQA Q THE     @Z40FPYL*/
         CLI   SAVEDQID,8                                          0179
         BNE   @RF00179                                            0179
*         DO;                       /* COUNTS IN THE PVT AND ASCB  0180
*                                      HAVE TO               @Z40FPYL*/
*           PVTCFMCT=PVTCFMCT-1;    /* BE ADJUSTED           @Z40FPYL*/
         LH    @11,PVTCFMCT(,PVTPTR)                               0181
         BCTR  @11,0                                               0181
         STH   @11,PVTCFMCT(,PVTPTR)                               0181
*           RSMHDPTR=SAVEASCB->ASCBRSM;/*                    @Z40FPYL*/
         L     @11,SAVEASCB(,PVTPTR)                               0182
         L     RSMHDPTR,ASCBRSM(,@11)                              0182
*           CALL PGSECS;            /*                       @Z40FPYL*/
         BAL   @14,PGSECS                                          0183
*           SAVEASCB->ASCBFMCT=SAVEASCB->ASCBFMCT+1;/*       @Z40FPYL*/
         L     @11,SAVEASCB(,PVTPTR)                               0184
         LA    @07,1                                               0184
         AH    @07,ASCBFMCT(,@11)                                  0184
         STH   @07,ASCBFMCT(,@11)                                  0184
*         END;                      /*                       @Z40FPYL*/
*       ELSE                        /*                       @ZA16816*/
*         DO;                       /* IF FRAME FROM LFQ OR LSQAQ  0186
*                                                            @ZA16816*/
         B     @RC00179                                            0186
@RF00179 DS    0H                                                  0187
*           IF SAVEDQID=PFTLFQN×    /* AND GOING TO LFQ      @ZA16816*/
*               SAVEDQID=PFTLSQAN THEN/* OR LSQA Q           @ZA16816*/
         CLI   SAVEDQID,128                                        0187
         BE    @RT00187                                            0187
         CLI   SAVEDQID,132                                        0187
         BNE   @RF00187                                            0187
@RT00187 DS    0H                                                  0188
*             DO;                   /* THEN                  @ZA16816*/
*               CALL PGSECS;        /* CALC PAGE SECS        @ZA16816*/
         BAL   @14,PGSECS                                          0189
*               RSMASCB->ASCBFMCT=RSMASCB->ASCBFMCT-1;/* DECR COUNT
*                                      FOR LOCAL DEQ         @ZA16816*/
         L     @11,RSMASCB(,RSMHDPTR)                              0190
         LH    @07,ASCBFMCT(,@11)                                  0190
         BCTR  @07,0                                               0190
         STH   @07,ASCBFMCT(,@11)                                  0190
*               RSMHDPTR=SAVEASCB->ASCBRSM;/*                @ZA16816*/
         L     @11,SAVEASCB(,PVTPTR)                               0191
         L     RSMHDPTR,ASCBRSM(,@11)                              0191
*               CALL PGSECS;        /* CALC PAGE SECS        @ZA16816*/
         BAL   @14,PGSECS                                          0192
*               SAVEASCB->ASCBFMCT=SAVEASCB->ASCBFMCT+1;/* BUMP COUNT
*                                      FOR LOCAL ENQ         @ZA16816*/
         L     @11,SAVEASCB(,PVTPTR)                               0193
         LA    @07,1                                               0193
         AH    @07,ASCBFMCT(,@11)                                  0193
         STH   @07,ASCBFMCT(,@11)                                  0193
*             END;                  /*                       @ZA16816*/
*           ELSE                    /*                       @ZM45087*/
*             DO;                   /*                       @ZM45087*/
         B     @RC00187                                            0195
@RF00187 DS    0H                                                  0196
*               IF SAVEDQID=PFTRSBQN THEN/* IF FRAME WAS STOLEN FROM
*                                      THE RSB QUEUE FOR LSQA      0196
*                                      ALLOCATION, THE COUNT IN THE
*                                      ASCB MUST BE ADJUSTED @ZM45087*/
         CLI   SAVEDQID,16                                         0196
         BNE   @RF00196                                            0196
*                 DO;               /*                       @ZM45087*/
*                   RSMHDPTR=SAVEASCB->ASCBRSM;/*            @ZM45087*/
         L     @11,SAVEASCB(,PVTPTR)                               0198
         L     RSMHDPTR,ASCBRSM(,@11)                              0198
*                   CALL PGSECS;    /*                       @ZM45087*/
         BAL   @14,PGSECS                                          0199
*                   SAVEASCB->ASCBFMCT=SAVEASCB->ASCBFMCT+1;/*     0200
*                                                            @ZM45087*/
         L     @11,SAVEASCB(,PVTPTR)                               0200
         LA    @07,1                                               0200
         AH    @07,ASCBFMCT(,@11)                                  0200
         STH   @07,ASCBFMCT(,@11)                                  0200
*                 END;              /*                       @ZM45087*/
*             END;                  /*                       @ZA16816*/
*         END;                      /*                       @ZA16816*/
*     END;                          /*                       @Z40FPYL*/
*   ELSE                                                           0205
*     ;                             /*                       @Z40FPYL*/
@RF00177 DS    0H                                                  0206
*   IF SAVETQID=PFTSQAN THEN        /* IF FRAME WAS STOLEN   @Z4OFPYL*/
@RC00177 CLI   SAVETQID(PVTPTR),12                                 0206
         BNE   @RF00206                                            0206
*     DO;                           /* FROM LFQ OR CFQ FOR   @Z40FPYL*/
*       IF SAVEDQID=PFTLFQN THEN    /* SQA ALLOCATION FRAME  @Z40FPYL*/
         CLI   SAVEDQID,128                                        0208
         BNE   @RF00208                                            0208
*         DO;                       /* COUNTS MUST BE        @Z40FPYL*/
*           CALL PGSECS;            /* DECREMENTED.          @Z40FPYL*/
         BAL   @14,PGSECS                                          0210
*           RSMASCB->ASCBFMCT=RSMASCB->ASCBFMCT-1;/*         @Z40FPYL*/
         L     @11,RSMASCB(,RSMHDPTR)                              0211
         LH    @07,ASCBFMCT(,@11)                                  0211
         BCTR  @07,0                                               0211
         STH   @07,ASCBFMCT(,@11)                                  0211
*         END;                      /*                       @Z4OFPYL*/
*       ELSE                        /*                       @Z40FPYL*/
*         IF SAVEDQID=PFTCFQN THEN  /*                       @Z40FPYL*/
         B     @RC00208                                            0213
@RF00208 CLI   SAVEDQID,8                                          0213
         BNE   @RF00213                                            0213
*           PVTCFMCT=PVTCFMCT-1;    /*                       @Z40FPYL*/
         LH    @11,PVTCFMCT(,PVTPTR)                               0214
         BCTR  @11,0                                               0214
         STH   @11,PVTCFMCT(,PVTPTR)                               0214
*         ELSE                                                     0215
*           ;                       /*                       @Z40FPYL*/
@RF00213 DS    0H                                                  0216
*     END;                          /*                       @Z40FPYL*/
*   ELSE                                                           0217
*     ;                             /*                       @Z40FPYL*/
@RF00206 DS    0H                                                  0218
*   IF SAVETQID=PFTCFQN THEN        /* IF FRAME WAS STOLEN   @Z40FPYL*/
@RC00206 CLI   SAVETQID(PVTPTR),8                                  0218
         BNE   @RF00218                                            0218
*     DO;                           /* FROM LFQ FOR CFQ      @Z40FPYL*/
*       IF SAVEDQID=PFTLFQN THEN    /* THE COUNTS IN THE     @Z40FPYL*/
         CLI   SAVEDQID,128                                        0220
         BNE   @RF00220                                            0220
*         DO;                       /* PVT AND ASCB HAVE TO  @Z40FPYL*/
*           PVTCFMCT=PVTCFMCT+1;    /* BE ADJUSTED           @Z40FPYL*/
         LA    @11,1                                               0222
         AH    @11,PVTCFMCT(,PVTPTR)                               0222
         STH   @11,PVTCFMCT(,PVTPTR)                               0222
*           CALL PGSECS;            /*                       @Z40FPYL*/
         BAL   @14,PGSECS                                          0223
*           RSMASCB->ASCBFMCT=RSMASCB->ASCBFMCT-1;/*         @Z40FPYL*/
         L     @11,RSMASCB(,RSMHDPTR)                              0224
         LH    @07,ASCBFMCT(,@11)                                  0224
         BCTR  @07,0                                               0224
         STH   @07,ASCBFMCT(,@11)                                  0224
*         END;                      /*                       @Z40FPYL*/
*       ELSE                        /*                       @Z40FPYL*/
*         DO;                       /*                       @ZM45087*/
         B     @RC00220                                            0226
@RF00220 DS    0H                                                  0227
*           IF SAVEDQID=PFTRSBQN THEN/*                      @ZM45087*/
         CLI   SAVEDQID,16                                         0227
         BNE   @RF00227                                            0227
*             PVTCFMCT=PVTCFMCT+1;  /* IF FRAME WAS STOLEN FROM THE
*                                      RSBQ FOR CFQ, THE COUNT IN THE
*                                      PVT HAS TO BE ADJUSTED      0228
*                                                            @ZM45087*/
         LA    @11,1                                               0228
         AH    @11,PVTCFMCT(,PVTPTR)                               0228
         STH   @11,PVTCFMCT(,PVTPTR)                               0228
*         END;                      /*                       @ZM45087*/
*     END;                          /*                       @Z40FPYL*/
*   ELSE                                                           0231
*     ;                             /*                       @Z40FPYL*/
@RF00218 DS    0H                                                  0232
*   IF SAVETQID=PFTRSBQN THEN       /*                       @ZM45087*/
@RC00218 CLI   SAVETQID(PVTPTR),16                                 0232
         BNE   @RF00232                                            0232
*     PVTCFMCT=PVTCFMCT-1;          /* IF FRAME IS GOING TO THE RSBQ,
*                                      THEN THE PVT CFQ COUNT MUST BE
*                                      DECREMENTED BECAUSE AN RSB  0233
*                                      FRAME CAN ONLY BE STOLEN FROM
*                                      CFQ.                  @ZM45087*/
         LH    @11,PVTCFMCT(,PVTPTR)                               0233
         BCTR  @11,0                                               0233
         STH   @11,PVTCFMCT(,PVTPTR)                               0233
*   PFTQNDX=SAVETQID;               /* PFTE IS TO BE ENQUEUED. SET 0234
*                                      THE QUEUE ID TO THE REQUESTED
*                                      QUEUE ID                      */
@RF00232 SLR   @11,@11                                             0234
         IC    @11,SAVETQID(,PVTPTR)                               0234
         STC   @11,PFTQNDX(,PFTEPTR)                               0234
*   RESPECIFY                                                      0235
*    (QHEADEND,                                                    0235
*     TQID) RESTRICTED;                                            0235
*   TQID=SAVETQID;                  /* GET THE TQID IN A REGISTER    */
         LR    TQID,@11                                            0236
*   IF TQID<QCOMPARE THEN           /* TEST IF THE PFTE IS TO BE   0237
*                                      ENQUEUED TO A GLOBAL QUEUE    */
         CH    TQID,@CH00100                                       0237
         BNL   @RF00237                                            0237
*     QHEADEND=ADDR(PVTQS)+TQID;    /* IS TO BE ENQUEUED TO A GLOBAL
*                                      QUEUE. QUEUE POINTERS ARE IN
*                                      THE PVT. GET THE ADDRESS OF 0238
*                                      THESE POINTERS.               */
         LA    QHEADEND,PVTQS(,PVTPTR)                             0238
         ALR   QHEADEND,TQID                                       0238
*   ELSE                            /* IS TO BE ENQUEUED TO A LOCAL
*                                      QUEUE. QUEUE POINTERS ARE IN
*                                      THE RSMHD                     */
*     DO;                           /* GET THE ADDRESS OF THESE    0239
*                                      POINTERS                      */
         B     @RC00237                                            0239
@RF00237 DS    0H                                                  0240
*       TQID=TQID-QCOMPARE;         /* GET QUEUE OFFSET INTO RSMHD   */
*                                                                  0240
         SH    TQID,@CH00100                                       0240
*       /*************************************************************/
*       /*                                                           */
*       /* GET THE ADDRESS OF THE QUEUE POINTERS                     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0241
*       QHEADEND=ADDR(SAVEASCB->ASCBRSM->RSMQS)+TQID;              0241
         L     @11,SAVEASCB(,PVTPTR)                               0241
         L     QHEADEND,ASCBRSM(,@11)                              0241
         LA    QHEADEND,RSMQS(,QHEADEND)                           0241
         ALR   QHEADEND,TQID                                       0241
*     END;                                                         0242
*   GOTO PFTENQ;                    /* GO TO THE ENQUEUE PROCESSOR   */
         B     PFTENQ                                              0243
*   RESPECIFY                                                      0244
*    (QHEADEND,                                                    0244
*     TQID) UNRESTRICTED;                                          0244
*                                                                  0245
*/********************************************************************/
*/* THE FOLLOWING SECTION PROCESSES PFTES TO BE ENQUEUED TO THE AFQ. */
*/* IF THE PFTE HAS BEEN INTERCEPTED, THE INTERCEPT PROCESSOR WILL   */
*/* PROCESS THE PFTE. IF THE PFTE HAS NOT BEEN INTERCEPTED, THE SQA  */
*/* DEFICIT COUNT WILL BE TESTED TO DETERMINE IF THE SQA RESERVE     */
*/* QUEUE NEEDS PFTE'S. IF THE SQA DEFICIT COUNT INDICATES A NEED OF */
*/* PFTE'S, THE SQA RESERVE PROCESSOR WILL BE CALLED TO ENQUEUE THE  */
*/* PFTE TO THE SQA RESERVE QUEUE. IF THE COUNT DOES NOT INDICATE A  */
*/* NEED, THE PFTE WILL BE ENQUEUED TO THE AFQ. IF THE PFTE IS TO BE */
*/* QUEUED TO THE HEAD OF THE AFQ, THE ENQUEUE PROCESS IS DONE IN    */
*/* THIS SECTION. OTHERWISE, THE PFTE IS PASSED TO THE ENQUEUE       */
*/* PROCESSOR TO BE ENQUEUED TO THE END OF THE AFQ. THE ENQUEUE      */
*/* PROCESSOR THEN WILL RETURN CONTROL TO CHECK THE AFC.             */
*/* THE FIRST SECTION PROCESSES PFTE'S SENT TO THE AFQ WHICH HAVE    */
*/* BEEN INTERCEPTED BY OTHER RSM FUNCTIONS. PROCESSING IS DETERMINED*/
*/* BY THE OFFLINE AND V=R INTERCEPT FLAGS. IF EITHER FLAG IS ON, THE*/
*/* APPROPRIATE INTERCEPT ROUTINE WILL BE CALLED. IF THE PFTE IS NOT */
*/* RETURNED, CONTROL IS PASSED TO THE EXIT ROUTINE TO RETURN TO THE */
*/* CALLER. IF THE PFTE IS NOT INTERCEPTED, CONTROL PASSES TO CHECK  */
*/* THE SQA RESERVE QUEUE.                                           */
*/********************************************************************/
*                                                                  0245
*ENQAFQ:                                                           0245
*   PFTFXCT=0;                      /* ZERO THE FIX COUNT    @VS01962*/
ENQAFQ   SLR   @11,@11                                             0245
         STH   @11,PFTFXCT(,PFTEPTR)                               0245
*   PFTUIC=0;                       /* ZERO THE UIC.         @VS01962*/
         MVI   PFTUIC(PFTEPTR),X'00'                               0246
*   IF PFTVRINT='1'B THEN           /* TEST IF THE PFTE IS         0247
*                                      INTERCEPTED FOR V=R ALLOCATION*/
         TM    PFTVRINT(PFTEPTR),B'01000000'                       0247
         BNO   @RF00247                                            0247
*     DO;                           /* IS INTERCEPTED FOR V=R      0248
*                                      ALLOCATION. PASS THE PFTE TO
*                                      THE V=R INTERCEPT ROUTINE TO
*                                      PROCESS.                      */
*       SAVECSID=RCACSECT;          /* SAVE THE CALLER'S MODULE ID   */
         MVC   SAVECSID(1,PVTPTR),RCACSECT(RCAPTR)                 0249
*       RESPECIFY                                                  0250
*        (R1) RESTRICTED;                                          0250
*       R1=PFTERBN;                 /* GET THE RBN OF THE PFTE       */
         LR    R1,PFTERBN                                          0251
*       CALL IEAVEQRI;              /* CALL V=R INTERCEPT            */
         L     @15,PVTPVRIN(,PVTPTR)                               0252
         BALR  @14,@15                                             0252
*       RCACSECT=SAVECSID;          /* RESTORE THE CALLER'S MODULE ID*/
         MVC   RCACSECT(1,RCAPTR),SAVECSID(PVTPTR)                 0253
*       IF R1=0 THEN                /* TEST IF V=R PROCESSED THE PFTE*/
         LTR   R1,R1                                               0254
         BZ    @RT00254                                            0254
*         GOTO EXITPFTE;            /* V=R PROCESSED THE PFTE. GO TO
*                                      THE EXIT PROCESSOR.           */
*     END;                                                         0256
*   IF PFTOFINT='1'B THEN           /* TEST IF THE PFTE IS         0257
*                                      INTERCEPTED FOR OFFLINE       */
@RF00247 TM    PFTOFINT(PFTEPTR),B'00000001'                       0257
         BNO   @RF00257                                            0257
*     DO;                           /* IS INTERCEPTED FOR OFFLINE. 0258
*                                      PASS THE PFTE TO THE OFFLINE
*                                      INTERCEPTION ROUTINE          */
*       SAVECSID=RCACSECT;          /* SAVE THE CALLER'S MODULE ID   */
         MVC   SAVECSID(1,PVTPTR),RCACSECT(RCAPTR)                 0259
*       R1=PFTERBN;                 /* GET THE RBN OF THE PFTE       */
         LR    R1,PFTERBN                                          0260
*       CALL IEAVRCFI;              /* CALL RECONFIGURATION INTERCEPT*/
         L     @15,PVTPRCFI(,PVTPTR)                               0261
         BALR  @14,@15                                             0261
*       RCACSECT=SAVECSID;          /* RESTORE THE CALLER'S MODULE ID*/
         MVC   RCACSECT(1,RCAPTR),SAVECSID(PVTPTR)                 0262
*       IF R1=0 THEN                /* TEST IF RECONFIG. PROCESSED 0263
*                                      THE PFTE.                     */
         LTR   R1,R1                                               0263
         BZ    @RT00263                                            0263
*         GOTO EXITPFTE;            /* RECONFIG. PROCESSED THE PFTE.
*                                      GO TO THE EXIT PROCESSOR.     */
*     END;                                                         0265
*   RESPECIFY                                                      0266
*    (R1) UNRESTRICTED;                                            0266
@RF00257 DS    0H                                                  0267
*   PFTDFRLS='0'B;                  /* TURN OFF DEF RELS FLAG      0267
*                                                            @VS01962*/
*   PFTOFFLN='0'B;                  /* TURN OFF OFFLINE FLAG @VS01962*/
*   PFTSTEAL='0'B;                  /* TURN OFF STEAL FLAG           */
         NI    PFTDFRLS(PFTEPTR),B'00110111'                       0269
*                                                                  0270
*/********************************************************************/
*/* THE FOLLOWING SECTION DIVERTS A PFTE WHICH WAS TO BE ENQUEUED TO */
*/* THE AFQ AND PREPARES IT TO BE ENQUEUED TO THE SQA RESERVE QUEUE. */
*/********************************************************************/
*                                                                  0270
*   IF PVTSQDC^=0 THEN              /* TEST IF THE SQA RESERVE QUEUE
*                                      NEEDS PFTES                   */
         CLI   PVTSQDC(PVTPTR),0                                   0270
         BE    @RF00270                                            0270
*     DO;                                                          0271
*                                                                  0271
*       /*************************************************************/
*       /*                                                           */
*       /* SINCE PFTSQDC IS NOT ZERO, THE SQA RESERVE QUEUE NEEDS    */
*       /* PREFERRED AREA FRAMES. IF PVTSQDC IS GREATER THAN PVTSQNPC*/
*       /* THE QUEUE IS SHORT OF FRAMES AND THE INPUT PFTE SHOULD BE */
*       /* ADDED TO THE QUEUE. IF PVTSQDC=PVTSQNPC THEN THE QUEUE IS */
*       /* NOT SHORT OF PFTES, BUT DOES NOT HAVE ALL PREFERRED AREA  */
*       /* FRAMES AS DESIRED. IN THIS CASE, EXCHANGE THE INPUT FRAME */
*       /* WITH ONE ON THE QUEUE WHICH IS LESS DESIRABLE.    @ZA16816*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0272
*       IF PVTSQDC=PVTSQNPC THEN    /* IF COUNTS ARE EQUAL,  @ZA16816*/
         CLC   PVTSQDC(1,PVTPTR),PVTSQNPC(PVTPTR)                  0272
         BNE   @RF00272                                            0272
*         DO;                       /* EXCHANGE FRAMES.      @ZA16816*/
*           IF PFTPREF='1'B THEN    /* IF PREF - TAKE FRAME  @ZA16816*/
         TM    PFTPREF(PFTEPTR),B'00000100'                        0274
         BNO   @RF00274                                            0274
*             PVTSQDC=PVTSQDC-1;    /* NO QUESTIONS ASKED.   @ZA16816*/
         SLR   @11,@11                                             0275
         IC    @11,PVTSQDC(,PVTPTR)                                0275
         BCTR  @11,0                                               0275
         STC   @11,PVTSQDC(,PVTPTR)                                0275
*           ELSE                    /* IF NON-PREF - REFUSE  @ZA16816*/
*             DO;                   /*                       @ZA16816*/
         B     @RC00274                                            0276
@RF00274 DS    0H                                                  0277
*               IF PFTVR='1'B×      /* FRAME UNLESS IT IS    @ZA16816*/
*                   PVTSQVRC=0 THEN /* BETTER THAN WHAT IS   @ZA16816*/
         TM    PFTVR(PFTEPTR),B'00100000'                          0277
         BO    @RT00277                                            0277
         CLI   PVTSQVRC(PVTPTR),0                                  0277
         BE    @RT00277                                            0277
*                 GOTO AFQENQ;      /* ALREADY ON SQA RSV Q. @ZA16816*/
*               ELSE                /*                       @ZA16816*/
*                 PVTSQNPC=PVTSQNPC+1;/* INC NONPREF COUNT   @ZA16816*/
         LA    @11,1                                               0279
         SLR   @07,@07                                             0279
         IC    @07,PVTSQNPC(,PVTPTR)                               0279
         ALR   @11,@07                                             0279
         STC   @11,PVTSQNPC(,PVTPTR)                               0279
*             END;                  /*                       @ZA16816*/
*           RSVEXTRA='1'B;          /* INDICATE EXTRA FRAME  @ZA16816*/
@RC00274 OI    RSVEXTRA(PVTPTR),B'01000000'                        0281
*         END;                      /* END EXCHANGE MODE     @ZA16816*/
*       ELSE                        /* IF COUNTS ARE NOT EQ  @ZA16816*/
*         DO;                       /* ADD PFTE TO QUEUE     @ZA16816*/
         B     @RC00272                                            0283
@RF00272 DS    0H                                                  0284
*           IF PFTPREF='1'B THEN    /* IF A PREF FRAME,      @ZA16816*/
         TM    PFTPREF(PFTEPTR),B'00000100'                        0284
         BNO   @RF00284                                            0284
*             PVTSQDC=PVTSQDC-1;    /* DECR DEFICIT COUNT    @ZA16816*/
         SLR   @11,@11                                             0285
         IC    @11,PVTSQDC(,PVTPTR)                                0285
         BCTR  @11,0                                               0285
         STC   @11,PVTSQDC(,PVTPTR)                                0285
*           ELSE                    /* IF A NON-PREF         @ZA16816*/
*             DO;                   /* THEN                  @ZA16816*/
         B     @RC00284                                            0286
@RF00284 DS    0H                                                  0287
*               PVTSQNPC=PVTSQNPC+1;/* INCR NON-PREF COUNT   @ZA16816*/
         LA    @11,1                                               0287
         SLR   @07,@07                                             0287
         IC    @07,PVTSQNPC(,PVTPTR)                               0287
         ALR   @07,@11                                             0287
         STC   @07,PVTSQNPC(,PVTPTR)                               0287
*               IF PFTVR='1'B THEN  /* AND IF V=R,           @ZA16816*/
         TM    PFTVR(PFTEPTR),B'00100000'                          0288
         BNO   @RF00288                                            0288
*                 PVTSQVRC=PVTSQVRC+1;/* INCR V=R COUNT ALSO @ZA16816*/
         SLR   @07,@07                                             0289
         IC    @07,PVTSQVRC(,PVTPTR)                               0289
         ALR   @11,@07                                             0289
         STC   @11,PVTSQVRC(,PVTPTR)                               0289
*             END;                  /*                       @ZA16816*/
@RF00288 DS    0H                                                  0291
*           PVTSQAFX=PVTSQAFX+1;    /* PVTSQAFX AND PVTCNTFX @YA01572*/
@RC00284 LA    @11,1                                               0291
         LH    @07,PVTSQAFX(,PVTPTR)                               0291
         ALR   @07,@11                                             0291
         STH   @07,PVTSQAFX(,PVTPTR)                               0291
*           PVTCNTFX=PVTCNTFX+1;    /* ARE INCREMENTED       @YA01572*/
*                                                                  0292
         AH    @11,PVTCNTFX(,PVTPTR)                               0292
         STH   @11,PVTCNTFX(,PVTPTR)                               0292
*           /*********************************************************/
*           /*                                                       */
*           /* NOTIFY SRM WHEN THE MAXIMUM NUMBER OF FRAMES HAS BEEN */
*           /* FIXED                                         @YA01572*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0293
*           IF PVTCNTFX=PVTMAXFX THEN/* CHECK THRESHOLD      @YA01572*/
         CH    @11,PVTMAXFX(,PVTPTR)                               0293
         BNE   @RF00293                                            0293
*             DO;                   /* FOR SRM               @YA01572*/
*               RESPECIFY                                          0295
*                (R1,                                              0295
*                 R13) RESTRICTED;  /*                       @YA01572*/
*               R13=ADDR(PVTSAVE);  /* SRM SAVE AREA         @YA01572*/
         LA    R13,PVTSAVE(,PVTPTR)                                0296
*               R1=MAXSYS;          /* CODE FOR THRESHOLD REACHED FOR
*                                      MAX FIX-COUNT         @YA0A572*/
         LA    R1,4                                                0297
*               GENERATE NODEFS REFS(CVTPTR,CVTOPTE,CVT) NOSETS NOFLOWS
*                   ;                                              0298
       SYSEVENT AVQLOW,ENTRY=BRANCH
*               RESPECIFY                                          0299
*                (R1,                                              0299
*                 R13) UNRESTRICTED;                               0299
*             END;                  /* END OF SYSEVENT       @YA01572*/
*         END;                      /* END ADD MODE          @ZA16816*/
@RF00293 DS    0H                                                  0302
*       PFTQNDX=PFTSRQN;            /* SET ID= SQA RSV QUEUE @ZA16816*/
@RC00272 MVI   PFTQNDX(PFTEPTR),X'04'                              0302
*       PFTPGID=0;                  /* PREVENT RECLAIM       @ZA16816*/
         SLR   @11,@11                                             0303
         ST    @11,PFTPGID(,PFTEPTR)                               0303
*       PFTFLAG1='00'X;             /* TURN OFF FLAGS        @ZA16816*/
         MVI   PFTFLAG1(PFTEPTR),X'00'                             0304
*       QHEADEND=ADDR(PVTRSRVF);    /* INIT FOR SQA RSV QUEUE      0305
*                                                            @ZA16816*/
         LA    QHEADEND,PVTRSRVF(,PVTPTR)                          0305
*       GOTO PFTENQ;                /* GO PUT PFTE ON QUEUE  @ZA16816*/
         B     PFTENQ                                              0306
*     END;                          /* END OF SQA RSV Q PROCESS    0307
*                                                            @ZA16816*/
*                                                                  0308
*/********************************************************************/
*/* THE FOLLOWING SECTION PERFORMS THE SPECIAL PROCESSING ASSOCIATED */
*/* WITH SENDING A PFTE TO THE AFQ. THE AFC IS INCREMENTED AND THE   */
*/* STORAGE KEYS OF THE FRAME ARE ZEROED. IF THE REQUESTOR HAS       */
*/* INDICATED THAT THE PFTE IS TO BE QUEUED TO THE HEAD OF THE AFQ,  */
*/* THAT OPERATION IS PERFORMED IN THIS SECTION. CONTROL PASSES TO   */
*/* THE AFC CHECK ROUTINE. IF THE PFTE IS NOT TO BE QUEUED TO THE    */
*/* HEAD OF THE AFQ, THE PFTE IS PASSED TO THE ENQUEUE PROCESSOR,    */
*/* WHICH WILL ENQUEUE THE PFTE TO THE AFQ. THE ENQUEUE PROCESSOR    */
*/* WILL RETURN CONTROL TO THE AFC CHECK ROUTINE.                    */
*/********************************************************************/
*                                                                  0308
*AFQENQ:                                                           0308
*   RESPECIFY                                                      0308
*    (KEYREG,                                                      0308
*     PFTERBN2,                                                    0308
*     PFTERBN) RSTD;                /*                       @Z40WPYD*/
@RF00270 DS    0H                                                  0308
AFQENQ   DS    0H                                                  0309
*   GENERATE NODEFS                 /* SET THE STORAGE KEYS OF THE 0309
*                                      PAGE TO ZERO                  */
*       REFS(KEYREG,PFTERBN2,PFTERBN) SETS(KEYREG,PFTERBN2) NOFLOWS;
         LR    PFTERBN2,PFTERBN    GET RBN                   @Z40WPYD
         SLL   PFTERBN2,8          MAKE RBN A 24-BIT ADDRESS @Z40WPYD
KEYFLAG  EQU   8                   CONSTANT USED TO SET A FREED FRAMES
*                                  STORAGE KEY TO KEY ZERO, FETCH
*                                  PROTECT
         LA    KEYREG,KEYFLAG      GET THE NEW KEY AND FLAGS
         SSK   KEYREG,PFTERBN2     STORE NEW STORAGE KEY OF 2K BLOCK
*                                                             @Z40WPYD
         LA    PFTERBN2,2048(PFTERBN2) GET NEXT 2K BOUNDARY   @Z40WPYD
         SSK   KEYREG,PFTERBN2     STORE NEW STORAGE KEY OF 2K BLOCK
*   RESPECIFY                                                      0310
*    (KEYREG,                                                      0310
*     PFTERBN2) UNRSTD;             /*                       @Z40WPYD*/
*   PFTQNDX=PFTAFQN;                /* SET QID IN PFTE               */
         MVI   PFTQNDX(PFTEPTR),X'00'                              0311
*   PFTFLAG1='80'X;                 /* TURN OFF FLAGS AND SET FLAG:
*                                      PFTE IS ON AFQ        @VS01962*/
         MVI   PFTFLAG1(PFTEPTR),X'80'                             0312
*   PVTAFC=PVTAFC+1;                /* INCREMENT AVAIL. FRAME COUNT  */
         LA    @11,1                                               0313
         AH    @11,PVTAFC(,PVTPTR)                                 0313
         STH   @11,PVTAFC(,PVTPTR)                                 0313
*   RESPECIFY                                                      0314
*    (QHEADEND) RESTRICTED;                                        0314
*   QHEADEND=ADDR(PVTAFQF);         /* AFQ POINTERS ARE IN THE PVT:
*                                      GET ADDRESS OF THESE POINTERS */
         LA    QHEADEND,PVTAFQF(,PVTPTR)                           0315
*   IF SAVEFLAG='0'B THEN           /* TEST IF PFTE IS TO BE QUEUED
*                                      TO THE HEAD OR END OF THE AFQ */
         TM    SAVEFLAG(PVTPTR),B'10000000'                        0316
         BZ    @RT00316                                            0316
*     GOTO PFTENQ;                  /* IS TO BE ENQUEUED TO THE END
*                                      OF THE AFQ. GO TO THE REGULAR
*                                      ENQ PROCESSOR.                */
*   IF ENDPTR=0 THEN                /* TEST IF THE AFQ IS EMPTY      */
         ICM   @11,3,ENDPTR(QHEADEND)                              0318
         BZ    @RT00318                                            0318
*     GOTO PFTENQ;                  /* AFQ IS EMPTY. GO TO THE     0319
*                                      REGULAR ENQ PROCESSOR.        */
*   RESPECIFY                                                      0320
*    (FRSTPFTE) RESTRICTED;                                        0320
*   FRSTPFTE=PVTPFTP+HEADPTR;       /* GET THE ADDRESS OF THE FIRST
*                                      PFTE ON THE AFQ               */
         SLR   FRSTPFTE,FRSTPFTE                                   0321
         ICM   FRSTPFTE,3,HEADPTR(QHEADEND)                        0321
         AL    FRSTPFTE,PVTPFTP(,PVTPTR)                           0321
*   FRSTPFTE->PFTBQPTR=PFTERBN;     /* MAKE THE FIRST PFTE POINT BACK
*                                      TO THE INPUT PFTE             */
         STH   PFTERBN,PFTBQPTR(,FRSTPFTE)                         0322
*   PFTFQPTR=HEADPTR;               /* MAKE THE INPUT PFTE POINT   0323
*                                      FOREWARD TO THE FIRST PFTE    */
         MVC   PFTFQPTR(2,PFTEPTR),HEADPTR(QHEADEND)               0323
*   HEADPTR=PFTERBN;                /* MAKE THE INPUT PFTE THE NEW 0324
*                                      FIRST PFTE ON THE AFQ         */
         STH   PFTERBN,HEADPTR(,QHEADEND)                          0324
*   RESPECIFY                                                      0325
*    (QHEADEND,                                                    0325
*     FRSTPFTE,                                                    0325
*     PFTERBN,                                                     0325
*     PFTEPTR) UNRESTRICTED;                                       0325
*                                                                  0326
*/********************************************************************/
*/* THE FOLLOWING SECTION CHECKS THE AFC FOR SRM NOTIFICATION.       */
*/* IF THE SRM WAS NOTIFIED THAT THE AFC WAS LOW AND NOW THE         */
*/* AFC IS ABOVE THE SAFE THRESHOLD, THE SRM WILL BE NOTIFIED        */
*/* THAT THE AFC IS NOW OK. THIS SECTION IS EXECUTED WHENEVER A PFTE */
*/* IS ENQUEUED TO THE AFQ.                                          */
*/********************************************************************/
*                                                                  0326
*CHECKAFC:                                                         0326
*   IF PVTLSI='1'B THEN             /* TEST IF THE LOW AFQ SYSEVENT
*                                      HAS BEEN ISSUED               */
CHECKAFC TM    PVTLSI(PVTPTR),B'00000100'                          0326
         BNO   @RF00326                                            0326
*     DO;                           /* SYSEVENT HAS BEEN ISSUED. SEE
*                                      IF AFC IS NOW ABOVE THRESHOLD.*/
*       IF PVTAFC<PVTAFCOK THEN     /* TEST IF THE AFC IS NOW AT THE
*                                      SAFE THRESHOLD.               */
         LH    @11,PVTAFC(,PVTPTR)                                 0328
         CH    @11,PVTAFCOK(,PVTPTR)                               0328
         BL    @RT00328                                            0328
*         GOTO GFADEFER;            /* IS NOT ABOVE THRESHOLD: SKIP
*                                      NOTIFICATION OF THE SRM.      */
*       RESPECIFY                                                  0330
*        (R13) RESTRICTED;                                         0330
*       R13=ADDR(PVTSAVE);          /* GET THE ADDRESS OF THE SAVE 0331
*                                      AREA FOR THE SRM.             */
         LA    R13,PVTSAVE(,PVTPTR)                                0331
*       GENERATE                    /* ISSUE AVQOK SYSEVENT          */
*           NODEFS REFS(CVTPTR,CVTOPTE,CVT) NOSETS NOFLOWS;        0332
         SYSEVENT AVQOK,ENTRY=BRANCH
*       RESPECIFY                                                  0333
*        (R13) UNRESTRICTED;                                       0333
*       PVTLSI='0'B;                /* TURN OFF LOW-SYSEVENT-ISSUED
*                                      FLAG.                         */
         NI    PVTLSI(PVTPTR),B'11111011'                          0334
*     END;                                                         0335
*                                                                  0336
*/********************************************************************/
*/* THE FOLLOWING SECTION WILL SCHEDULE THE GFA DEFER PROCESSOR IF   */
*/* THERE IS A DEFERRED REQUEST WHICH CAN NOW BE PROCESSED. THIS     */
*/* SECTION IS EXECUTED WHENEVER A PFTE IS ENQUEUED TO THE AFQ. IF   */
*/* THERE IS A PCB ON THE GFA QUEUE WHICH HAS NOT HAD GFA SCHEDULED  */
*/* FOR IT AND WHOSE ADDRESS SPACE HAS NOT HAD GFA SCHEDULED IN IT,  */
*/* THEN GFA DEFER WILL BE SCHEDULED IN THE ADDRESS SPACE OF THE PCB.*/
*/* WHETHER OR NOT GFA DEFER IS SCHEDULED, CONTROL PASSES TO THE     */
*/* EXIT PROCESSOR WHICH RETURNS CONTROL TO THE CALLER.              */
*/********************************************************************/
*                                                                  0336
*GFADEFER:                                                         0336
*   RESPECIFY                                                      0336
*    (PCBPTR) RESTRICTED;                                          0336
@RF00326 DS    0H                                                  0336
GFADEFER DS    0H                                                  0337
*   PCBPTR=PVTGFADF;                /* GET THE ADDRESS OF THE FIRST
*                                      PCB ON THE QUEUE.             */
         L     PCBPTR,PVTGFADF(,PVTPTR)                            0337
*   IF PCBPTR=0 THEN                /* TEST IF THE GFA DEFER QUEUE IS
*                                      EMPTY                         */
         LTR   PCBPTR,PCBPTR                                       0338
         BZ    @RT00338                                            0338
*     GOTO EXITPFTE;                /* GFA DEFER QUEUE IS EMPTY: GO
*                                      TO THE EXIT PROCESSOR         */
*NEXTPCB:                                                          0340
*   IF PCBGFAD='1'B THEN            /* TEST IF THIS PCB HAS ALREADY
*                                      HAD GFA SCHEDULED             */
NEXTPCB  TM    PCBGFAD(PCBPTR),B'01000000'                         0340
         BO    @RT00340                                            0340
*     GOTO GETPCB;                  /* GFA HAS BEEN SCHEDULED FOR  0341
*                                      THIS PCB: GO GET THE NEXT PCB
*                                      ON THE GFA DEFER QUEUE        */
*   IF PCBASCB->ASCBRSM->RSMGFAD='0'B THEN/* TEST IF GFA HAS BEEN  0342
*                                      SCHEDULED FOR THIS ADDRESS  0342
*                                      SPACE                         */
         L     @11,PCBASCB(,PCBPTR)                                0342
         L     @11,ASCBRSM(,@11)                                   0342
         TM    RSMGFAD(@11),B'00100000'                            0342
         BNZ   @RF00342                                            0342
*     DO;                           /*                       @YA01572*/
*       RESPECIFY                                                  0344
*        (R15) RESTRICTED;          /*                       @YA01572*/
*       PTR1=PCBPTR;                /*                       @YA01572*/
         LR    PTR1,PCBPTR                                         0345
*       DO WHILE PTR1^=0;           /*                       @YA01572*/
         B     @DE00346                                            0346
@DL00346 DS    0H                                                  0347
*         IF PTR1->PCBFXC^=0 THEN   /*                       @YA01572*/
         CLI   PCBFXC(PTR1),0                                      0347
         BE    @RF00347                                            0347
*           DO;                                                    0348
*             IF PVTAFC>PVTDEFFX THEN/* WHEN AVAILABLE FRAME @YA01572*/
         LH    @14,PVTAFC(,PVTPTR)                                 0349
         CH    @14,PVTDEFFX(,PVTPTR)                               0349
         BH    @RT00349                                            0349
*               GOTO SCHEDGFA;      /* COUNT > THAN DEFER    @YA01572*/
*             ELSE                  /* THRESHOLD, SCHEDULE   @YA01572*/
*               GOTO GETPCB;        /* GFA DEFER PROCESSOR   @YA01572*/
         B     GETPCB                                              0351
*           END;                    /*                       @YA01572*/
*         ELSE                      /* CHECK RELATEDS FOR A FIX    0353
*                                                            @YA01572*/
*           PTR1=PTR1->PCBRLPA;     /* REQUEST PCB.          @YA01572*/
@RF00347 SLR   @14,@14                                             0353
         ICM   @14,7,PCBRLPA(PTR1)                                 0353
         LR    PTR1,@14                                            0353
*       END;                        /*                       @YA01572*/
@DE00346 LTR   PTR1,PTR1                                           0354
         BNZ   @DL00346                                            0354
*       GOTO SCHEDGFA;              /* SCHEDULE GFA DEFER FOR      0355
*                                                            @YA01572*/
         B     SCHEDGFA                                            0355
*     END;                          /* A PAGE-FAULT PCB.     @YA01572*/
*GETPCB:                                                           0357
*   PCBPTR=PCBFQPA;                 /* ARE MORE PCB'S ON THE GFA   0357
*                                      DEFER QUEUE. GET THE ADDRESS
*                                      OF THE NEXT PCB.              */
@RF00342 DS    0H                                                  0357
GETPCB   SLR   @14,@14                                             0357
         ICM   @14,7,PCBFQPA(PCBPTR)                               0357
         LR    PCBPTR,@14                                          0357
*   IF PCBPTR=0 THEN                /* TEST IF THERE ARE ANY MORE  0358
*                                      PCB'S ON THE GFA DEFER QUEUE  */
         LTR   PCBPTR,PCBPTR                                       0358
         BZ    @RT00358                                            0358
*     GOTO EXITPFTE;                /* ARE NO MORE PCB'S ON THE GFA
*                                      DEFER QUEUE. GO TO THE EXIT 0359
*                                      PROCESSOR WITHOUT SCHEDULING
*                                      GFA DEFER.                    */
*   GOTO NEXTPCB;                   /* GO TEST IF GFA NEEDS TO BE  0360
*                                      SCHEDULED FOR THE NEXT PCB.   */
         B     NEXTPCB                                             0360
*   RESPECIFY                                                      0361
*    (SAVER3) RESTRICTED;                                          0361
*SCHEDGFA:                                                         0362
*   SAVER3=R3;                      /* SAVE REG 3 ACROSS INTERFACE   */
SCHEDGFA LR    SAVER3,R3                                           0362
*   RESPECIFY                                                      0363
*    (R0,                                                          0363
*     R1,                                                          0363
*     R15) RESTRICTED;                                             0363
*   R0=PVTSRBID;                    /* GET THE CELL POOL ID FOR THE
*                                      POOL OF RSM SRB'S             */
         L     R0,PVTSRBID(,PVTPTR)                                0364
*   GENERATE                        /* GET A SRB FROM THE CELL POOL
*                                      TO SCHEDULE GFA               */
*       NODEFS REFS(CVTPTR,CVTGETCL,CVTMAP) SETS(R3,R14,R15) NOFLOWS;
         GETCELL CPID=(0),BRANCH=YES,SAVE=NO
*   R3=SAVER3;                      /* RESTORE REG 3                 */
         LR    R3,SAVER3                                           0366
*   RESPECIFY                                                      0367
*    (SAVER3,                                                      0367
*     R0) UNRESTRICTED;                                            0367
*   IF R15^=0 THEN                  /* TEST IF THE SRB WAS OBTAINED  */
         LTR   R15,R15                                             0368
         BNZ   @RT00368                                            0368
*     GOTO SCHEDRP1;                                               0369
*                                                                  0369
*   /*****************************************************************/
*   /*                                                               */
*   /* SRB NOT OBTAINED; LEAVE THE PCB ON THE GFA DEFER QUEUE.       */
*   /* PREPARE TO SCHEDULE IEAVREP1 (SRB REPLENISH) IN MASTER'S      */
*   /* ADDRESS SPACE.                                        @Z40WPYD*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0370
*   RESPECIFY                                                      0370
*    (R15) UNRESTRICTED;                                           0370
*                                                                  0370
*   /*****************************************************************/
*   /*                                                               */
*   /* SRB OBTAINED SUCCESSFULLY                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0371
*   SRB=SRB&&SRB;                   /* ZERO THE SRB                  */
         XC    SRB(44,SRBPTR),SRB(SRBPTR)                          0371
*   SRBASCB=PCBASCB;                /* GET ADDRESS OF ADDRESS SPACE
*                                      IN WHICH GFA DEFER IS TO RUN  */
         L     @11,PCBASCB(,PCBPTR)                                0372
         ST    @11,SRBASCB(,SRBPTR)                                0372
*   SRBEP=PVTPGFAD;                 /* GET GFA DEFER ENTRY POINT     */
         MVC   SRBEP(4,SRBPTR),PVTPGFAD(PVTPTR)                    0373
*   SRBID='SRB ';                   /* SET SRB IDENTIFIER            */
         MVC   SRBID(4,SRBPTR),@CC01799                            0374
*   SRBRMTR=PVTPSRBP;               /* GET RMTR ENTRY POINT          */
         MVC   SRBRMTR(4,SRBPTR),PVTPSRBP(PVTPTR)                  0375
*   SRBPARM=PCBASCB;                /* ASCB ADDRESS IS PARAMETER     */
         ST    @11,SRBPARM(,SRBPTR)                                0376
*   SRBPRIOR=NONQ;                  /* NON-QUIESCE PRIORITY          */
         MVI   SRBPRIOR(SRBPTR),X'04'                              0377
*   SRBPASID=PCBASCB->ASCBASID;     /* GET ASID OF THE ADDRESS SPACE
*                                      IN WHICH GFA IS TO RUN        */
         MVC   SRBPASID(2,SRBPTR),ASCBASID(@11)                    0378
*   PCBGFAD='1'B;                   /* FLAG THE PCB AS HAVING HAD GFA
*                                      SCHEDULED FOR IT.             */
         OI    PCBGFAD(PCBPTR),B'01000000'                         0379
*   PCBASCB->ASCBRSM->RSMGFAD='1'B; /* FLAG THE RSMHD AS HAVING HAD
*                                      GFA SCHEDULED FOR THIS ADDRESS
*                                      SPACE.                        */
         L     @11,ASCBRSM(,@11)                                   0380
         OI    RSMGFAD(@11),B'00100000'                            0380
*   GENERATE                        /* SCHEDULE GFA DEFER TO THE   0381
*                                      ADDRESS SPACE OF THE PCB.     */
*       NODEFS REFS(CVTMAP,CVTPTR,CVTLSMQ,SRBFLNK,SRBSECT) SETS(R0,R15)
*       NOFLOWS;                                                   0381
         SCHEDULE SRB=(1),SCOPE=LOCAL
*   GOTO EXITPFTE;                  /* GO TO THE EXIT PROCESSOR      */
         B     EXITPFTE                                            0382
*   RESPECIFY                                                      0383
*    (PCBPTR,                                                      0383
*     R1) UNRESTRICTED;                                            0383
*                                                                  0384
*/********************************************************************/
*/* THE FOLLOWING SECTION ENQUEUES A PFTE TO THE FRAME QUEUE SET UP  */
*/* BY OTHER PROCESSORS. IF THE PFTE WAS ENQUEUED TO THE AFQ, CONTROL*/
*/* PASSES TO CHECK THE AFC.  IF THE PFTE WAS ENQUEUED TO THE SQA    */
*/* RESERVE QUEUE PUTTING THE NUMBER OF PFTES OVER THE AMOUNT NEEDED */
*/* (RSVEXTRA=1), THEN THE LEAST DESIRABLE PFTE ON THE SQA RESERVE   */
*/* QUEUE IS SELECTED AND THE PFTE MANAGER IS STARTED OVER AGAIN AT  */
*/* THE DEQUEUE PROCESS TO DEQUEUE THE SELECTED PFTE AND ENQUEUE IT  */
*/* ONTO THE AFQ. OTHERWISE, CONTROL GOES TO THE EXIT PROCESSOR      */
*/* TO RETURN CONTROL TO THE CALLER.                         @ZA16816*/
*/********************************************************************/
*                                                                  0384
*   RESPECIFY                                                      0384
*    (QHEADEND,                                                    0384
*     LASTPFTE,                                                    0384
*     PFTERBN,                                                     0384
*     PFTEPTR) RESTRICTED;                                         0384
*PFTENQ:                                                           0385
*   IF ENDPTR=0 THEN                /* TEST IF THE QUEUE IS EMPTY    */
PFTENQ   ICM   @11,3,ENDPTR(QHEADEND)                              0385
         BNZ   @RF00385                                            0385
*     HEADPTR=PFTERBN;              /* QUEUE IS EMPTY: MAKE PFTE   0386
*                                      FIRST PFTE ON THE QUEUE.      */
         STH   PFTERBN,HEADPTR(,QHEADEND)                          0386
*   ELSE                            /* QUEUE IS NOT EMPTY            */
*     DO;                           /* ENQUEUE THE PFTE TO THE QUEUE */
         B     @RC00385                                            0387
@RF00385 DS    0H                                                  0388
*       LASTPFTE=PVTPFTP+ENDPTR;    /* GET THE ADDRESS OF THE LAST 0388
*                                      PFTE ON THE QUEUE.            */
         SLR   LASTPFTE,LASTPFTE                                   0388
         ICM   LASTPFTE,3,ENDPTR(QHEADEND)                         0388
         AL    LASTPFTE,PVTPFTP(,PVTPTR)                           0388
*       LASTPFTE->PFTFQPTR=PFTERBN; /* SET THE FOREWARD POINTER IN 0389
*                                      THE LAST PFTE TO POINT TO THE
*                                      INPUT PFTE.                   */
         STH   PFTERBN,PFTFQPTR(,LASTPFTE)                         0389
*       RESPECIFY                                                  0390
*        (LASTPFTE) UNRESTRICTED;                                  0390
*       PFTBQPTR=ENDPTR;            /* SET THE BACK POINTER IN THE 0391
*                                      INPUT PFTE TO POINT TO THE  0391
*                                      LAST PFTE.                    */
         MVC   PFTBQPTR(2,PFTEPTR),ENDPTR(QHEADEND)                0391
*     END;                                                         0392
*   ENDPTR=PFTERBN;                 /* MAKE THE INPUT PFTE THE NEW 0393
*                                      LAST PFTE.                    */
@RC00385 STH   PFTERBN,ENDPTR(,QHEADEND)                           0393
*   RESPECIFY                                                      0394
*    (PFTERBN) UNRESTRICTED;                                       0394
*   IF PFTQNDX=PFTAFQN THEN         /* TEST IF THE PFTE WAS ENQUEUED
*                                      TO THE AFQ                    */
         CLI   PFTQNDX(PFTEPTR),X'00'                              0395
         BE    @RT00395                                            0395
*     GOTO CHECKAFC;                /* PFTE WAS ENQUEUED TO THE AFQ:
*                                      GO TEST IF THE AFC NEEDS    0396
*                                      PROCESSING.                   */
*   ELSE                            /*                       @ZA16816*/
*     DO;                           /*                       @ZA16816*/
*       IF RSVEXTRA='0'B THEN       /* IF NO EXTRA ON SQA RSV      0398
*                                                            @ZA16816*/
         TM    RSVEXTRA(PVTPTR),B'01000000'                        0398
         BZ    @RT00398                                            0398
*         GOTO EXITPFTE;            /* THEN RETURN TO CALLER @ZA16816*/
*       ELSE                        /* AN EXTRA IS ON SQA RSV      0400
*                                                            @ZA16816*/
*         DO;                       /* REMOVE LEAST DESIRABLE      0400
*                                                            @ZA16816*/
*           RSVEXTRA='0'B;          /* RESET INDICATOR       @ZA16816*/
         NI    RSVEXTRA(PVTPTR),B'10111111'                        0401
*           SAVERBN=0;              /* INITIALIZE FOR SEARCH @ZA16816*/
         SLR   @11,@11                                             0402
         STH   @11,SAVERBN(,PVTPTR)                                0402
*           PFTEPTR=PVTPFTP+PVTRSRVF;/* GET 1ST RSV PFTE     @ZA16816*/
         SLR   PFTEPTR,PFTEPTR                                     0403
         ICM   PFTEPTR,3,PVTRSRVF(PVTPTR)                          0403
         AL    PFTEPTR,PVTPFTP(,PVTPTR)                            0403
*           DO WHILE PFTEPTR^=PVTPFTP;/* SCAN ENTIRE QUEUE   @ZA16816*/
         B     @DE00404                                            0404
@DL00404 DS    0H                                                  0405
*             IF PFTPREF='1'B THEN  /* IF PREFERRED PFTE     @ZA16816*/
         TM    PFTPREF(PFTEPTR),B'00000100'                        0405
         BNO   @RF00405                                            0405
*               PFTEPTR=PVTPFTP+PFTFQPTR;/* SKIP IT- GET NEXT      0406
*                                                            @ZA16816*/
         SLR   @11,@11                                             0406
         ICM   @11,3,PFTFQPTR(PFTEPTR)                             0406
         AL    @11,PVTPFTP(,PVTPTR)                                0406
         LR    PFTEPTR,@11                                         0406
*             ELSE                  /* IF NOT PREFERRED      @ZA16816*/
*               DO;                 /* CHECK FOR V=R         @ZA16816*/
         B     @RC00405                                            0407
@RF00405 DS    0H                                                  0408
*                 SAVERBN=PFTEPTR-PVTPFTP;/* SAVE THE RBN    @ZA16816*/
         L     @11,PVTPFTP(,PVTPTR)                                0408
         LR    @15,PFTEPTR                                         0408
         SLR   @15,@11                                             0408
         STH   @15,SAVERBN(,PVTPTR)                                0408
*                 IF PFTVR='0'B THEN/* IF NOT V=R PFTE       @ZA16816*/
         TM    PFTVR(PFTEPTR),B'00100000'                          0409
         BNZ   @RF00409                                            0409
*                   PFTEPTR=PVTPFTP+PFTFQPTR;/* CONTINUE SCAN      0410
*                                                            @ZA16816*/
         SLR   @15,@15                                             0410
         ICM   @15,3,PFTFQPTR(PFTEPTR)                             0410
         ALR   @11,@15                                             0410
         LR    PFTEPTR,@11                                         0410
*                 ELSE              /* IF ITS V=R THEN       @ZA16816*/
*                   DO;             /* DONE- FOUND PFTE      @ZA16816*/
         B     @RC00409                                            0411
@RF00409 DS    0H                                                  0412
*                     PFTEPTR=PVTPFTP;/* STOP THE SCAN       @ZA16816*/
         L     PFTEPTR,PVTPFTP(,PVTPTR)                            0412
*                     PVTSQVRC=PVTSQVRC-1;/* DECR V=R RSV CNT      0413
*                                                            @ZA16816*/
         SLR   @11,@11                                             0413
         IC    @11,PVTSQVRC(,PVTPTR)                               0413
         BCTR  @11,0                                               0413
         STC   @11,PVTSQVRC(,PVTPTR)                               0413
*                   END;            /*                       @ZA16816*/
*               END;                /*                       @ZA16816*/
@RC00409 DS    0H                                                  0416
*           END;                    /* END OF DO WHILE       @ZA16816*/
@RC00405 DS    0H                                                  0416
@DE00404 C     PFTEPTR,PVTPFTP(,PVTPTR)                            0416
         BNE   @DL00404                                            0416
*           IF SAVERBN=0 THEN       /* SHOULD HAVE AN RBN.   @ZA16816*/
         ICM   @11,3,SAVERBN(PVTPTR)                               0417
         BNZ   @RF00417                                            0417
*             DO;                   /* ERROR IF ITS ZERO -   @ZA16816*/
*               PVTSQDC=0;          /* SHUT DOWN THE SQA     @ZA16816*/
         MVI   PVTSQDC(PVTPTR),X'00'                               0419
*               PVTRSRVF=0;         /* RESERVE QUEUE AND     @ZA16816*/
         SLR   @11,@11                                             0420
         STH   @11,PVTRSRVF(,PVTPTR)                               0420
*               PVTRSRVL=0;         /* ABEND C0D             @ZA16816*/
         STH   @11,PVTRSRVL(,PVTPTR)                               0421
*               RCARCRD='21'X;      /* SET REASON CODE       @ZA16816*/
         MVI   RCARCRD(RCAPTR),X'21'                               0422
*               GENERATE(ABEND X'C0D',,,SYSTEM);/*           @ZA16816*/
         ABEND X'C0D',,,SYSTEM
*               GOTO EXITPFTE;      /* EXIT                  @ZA16816*/
         B     EXITPFTE                                            0424
*             END;                  /*                       @ZA16816*/
*           PVTSQNPC=PVTSQNPC-1;    /* DECR NON-PREF RSV CNT @ZA16816*/
@RF00417 SLR   @11,@11                                             0426
         IC    @11,PVTSQNPC(,PVTPTR)                               0426
         BCTR  @11,0                                               0426
         STC   @11,PVTSQNPC(,PVTPTR)                               0426
*           SAVETQID=PFTAFQN;       /* INIT FOR AFQ ENQUEUE  @ZA16816*/
         MVI   SAVETQID(PVTPTR),X'00'                              0427
*           GOTO SETUPDQT;          /* GO DEQ/ENQ THE PFTE   @ZA16816*/
         B     SETUPDQT                                            0428
*         END;                      /*                       @ZA16816*/
*     END;                          /*                       @ZA16816*/
*   RESPECIFY                                                      0431
*    (QHEADEND,                                                    0431
*     PFTEPTR) UNRESTRICTED;                                       0431
*SCHEDRP1:                                                         0432
*   RSMGFADD='1'B;                  /* INDICATE THAT IEAVGFAD MUST BE
*                                      SCHEDULED FOR THIS MEMORY BY
*                                      IEAVREP1              @Z40WPYD*/
SCHEDRP1 OI    RSMGFADD(RSMHDPTR),B'00000100'                      0432
*   IF PVTSRBIU='0'B THEN           /* HAS SRB REPLENISH BEEN      0433
*                                      SCHEDULED?            @Z40WPYD*/
         TM    PVTSRBIU(PVTPTR),B'00100000'                        0433
         BNZ   @RF00433                                            0433
*     DO;                           /* NO, SCHEDULE IEAVREP1 INTO  0434
*                                      MASTER'S MEMORY.      @Z40WPYD*/
*       PVTSRBIU='1'B;              /* INDICATE IEAVREP1 HAS BEEN  0435
*                                      SCHEDULED             @Z40WPYD*/
         OI    PVTSRBIU(PVTPTR),B'00100000'                        0435
*       SRBPTR=ADDR(PVTRSRB);       /* GET ADDRESS OF RESERVED     0436
*                                      SRB@Z40WPYD                   */
         LA    SRBPTR,PVTRSRB(,PVTPTR)                             0436
*       SRB=SRB&&SRB;               /* ZERO THE SRB          @Z40WPYD*/
         XC    SRB(44,SRBPTR),SRB(SRBPTR)                          0437
*       SRBASCB=CVTASVT->ASVTENTY(1);/* GET MASTER'S ASCB ADDRESS  0438
*                                                            @Z40WPYD*/
         L     @11,CVTPTR                                          0438
         L     @11,CVTASVT(,@11)                                   0438
         L     @11,ASVTENTY(,@11)                                  0438
         ST    @11,SRBASCB(,SRBPTR)                                0438
*       SRBEP=ADDR(IEAVREP1);       /* SET ENTRY POINT ADDRESS     0439
*                                                            @Z40WPYD*/
         L     @00,@CV00094                                        0439
         LR    @15,@00                                             0439
         ST    @15,SRBEP(,SRBPTR)                                  0439
*       SRBPASID=SRBASCB->ASCBASID; /* SET ASID              @Z40WPYD*/
         MVC   SRBPASID(2,SRBPTR),ASCBASID(@11)                    0440
*       SRBID='SRB ';               /* SET SRB ID            @Z40WPYD*/
         MVC   SRBID(4,SRBPTR),@CC01799                            0441
*       SRBPRIOR=4;                 /* SET NON-QUIESCABLE PRIORITY 0442
*                                                            @Z40WPYD*/
         MVI   SRBPRIOR(SRBPTR),X'04'                              0442
*       SRBRMTR=PVTPSRBP;           /* GET SRB PURGE ROUTINE ENTRY 0443
*                                      POINT. SRBPARM=0.     @Z40WPYD*/
         MVC   SRBRMTR(4,SRBPTR),PVTPSRBP(PVTPTR)                  0443
*       GENERATE NODEFS REFS(CVTMAP,CVTPTR,CVTLSMQ,SRBFLNK,SRBSECT)
*           SETS(R0,R15) NOFLOWS;                                  0444
          SCHEDULE SRB=(1),SCOPE=LOCAL
*     END;                                                         0445
*PGSECS:                                                           0446
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                       @YA01572*/
         B     @PB00002                                            0446
PGSECS   DS    0H                                                  0447
*/********************************************************************/
*/*                                                                  */
*/* SUBROUTINE - PGSECS                                              */
*/*                                                                  */
*/* FUNCTION - CALCULATE PAGE-SECONDS                                */
*/*                                                                  */
*/* INPUT - R2 RSMHEADER ADDRESS                                     */
*/*         R3 PVT ADDRESS                                           */
*/*         R0-R1 USED AS WORK REGISTERS                             */
*/*         R4-R15 UNUSED; R14 HAS RETURN ADDRESS IN IT              */
*/*                                                                  */
*/* OUTPUT - OUCBPGS CONTAINS CURRENT PAGE-SECONDS                   */
*/*          OUCBPST CONTAINS LAST TIME PAGE-SECONDS WAS             */
*/*                  CALCULATED                                      */
*/*                                                                  */
*/* LINKAGE - BRANCHED TO BEFORE ASCBFMCT IS UPDATED IN IEAVPFTE     */
*/*                                                                  */
*/********************************************************************/
*                                                                  0447
*   RESPECIFY                                                      0447
*    (R0,                                                          0447
*     R14,                                                         0447
*     R1) RESTRICTED;               /*                       @Z40FPYL*/
*   RESPECIFY                                                      0448
*     ASCB BASED(RSMASCB);          /*                       @Z40FPYL*/
*   LM(REVEN,RODD,ASCBEJST);        /* CPU TIME FOR JOB STEP @Z40FPYL*/
         L     @15,RSMASCB(,RSMHDPTR)                              0449
         LM    REVEN,RODD,ASCBEJST(@15)                            0449
*   SRDL(REVEN,SHIFT22);            /* RESOLVE TO MILLISECONDS     0450
*                                                            @Z40FPYL*/
         SRDL  REVEN,22                                            0450
*   IF RODD>OUCBPST THEN            /* COMPARE RESOLVED ASCBEJST   0451
*                                                            @Z40FPYL*/
         L     @11,OUCBPTR(,@15)                                   0451
         L     @09,OUCBPST(,@11)                                   0451
         CLR   RODD,@09                                            0451
         BNH   @RF00451                                            0451
*     DO;                           /* AGAINST OUCBPST. WHEN >     0452
*                                      CALCULATE DURATION    @Z40FPYL*/
*       REVEN=RODD-OUCBPST;         /* AND MULTIPLY IT BY #  @Z40FPYL*/
         LCR   @09,@09                                             0453
         ALR   @09,RODD                                            0453
         LR    REVEN,@09                                           0453
*       REVEN=REVEN*ASCBFMCT;       /* OF FRAMES             @Z40FPYL*/
         LR    @09,REVEN                                           0454
         MH    @09,ASCBFMCT(,@15)                                  0454
         LR    REVEN,@09                                           0454
*       OUCBPS2=OUCBPS2+REVEN;      /* CURRENT TOTAL         @Z40FPYL*/
         LR    @15,REVEN                                           0455
         AL    @15,OUCBPS2(,@11)                                   0455
         ST    @15,OUCBPS2(,@11)                                   0455
*       GENERATE;                                                  0456
          BC 4,NOCARRY
*       OUCBPS1=OUCBPS1+1;          /* CURRENT TOTAL WITH CARRY    0457
*                                                            @Z40FPYL*/
         L     @15,RSMASCB(,RSMHDPTR)                              0457
         L     @15,OUCBPTR(,@15)                                   0457
         LA    @11,1                                               0457
         AL    @11,OUCBPS1(,@15)                                   0457
         ST    @11,OUCBPS1(,@15)                                   0457
*NOCARRY:                                                          0458
*       OUCBPST=RODD;               /* LAST TIME CALCULATED  @Z40FPYL*/
NOCARRY  L     @15,RSMASCB(,RSMHDPTR)                              0458
         L     @15,OUCBPTR(,@15)                                   0458
         ST    RODD,OUCBPST(,@15)                                  0458
*     END;                          /*                       @Z40FPYL*/
*   ELSE                                                           0460
*     ;                             /*                       @Z40FPYL*/
@RF00451 DS    0H                                                  0461
*   RETURN;                         /*                       @Z40FPYL*/
@EL00002 DS    0H                                                  0461
@EF00002 DS    0H                                                  0461
@ER00002 BR    @14                                                 0461
*   RESPECIFY                                                      0462
*     ASCB BASED(ASCBPTR);          /*                       @Z40FPYL*/
*   RESPECIFY                                                      0463
*    (R0,                                                          0463
*     R14,                                                         0463
*     R1) UNRESTRICTED;                                            0463
*   END PGSECS;                     /* END OF SUBROUTINE     @Z40FPYL*/
@PB00002 DS    0H                                                  0464
*                                                                  0465
*/********************************************************************/
*/* THE FOLLOWING SECTION IS THE EXIT PROCESSOR. CONTROL IS RETURNED */
*/* TO THE CALLER.                                                   */
*/********************************************************************/
*                                                                  0465
*EXITPFTE:                                                         0465
*   RCAPFTE='0'B;                   /* TURN OFF MODULE-ENTERED FLAG  */
EXITPFTE NI    RCAPFTE(RCAPTR),B'11110111'                         0465
*   GENERATE NODEFS                 /* RESTORE CALLER'S REGISTERS  0466
*                                      FROM THE PVT SAVE AREA.       */
*       REFS(PVTWSA12,PVTPTR,R14) NOSETS NOFLOWS;                  0466
         LM    R0,R15,PVTWSA12(PVTPTR)      RESTORE INPUT REGS
         BR    R14                   RETURN TO CALLER
*   END IEAVPFTE                    /* RETURN TO THE CALLER.         */
*                                                                  0467
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IRAOUCB )                                       */
*/*%INCLUDE SYSLIB  (IHAASVT )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHAPVT  )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IHARSMHD)                                       */
*/*%INCLUDE SYSLIB  (IHAPFTE )                                       */
*/*%INCLUDE SYSLIB  (IHAPCB  )                                       */
*/*%INCLUDE SYSLIB  (IHASRB  )                                       */
*/*%INCLUDE SYSLIB  (IHARCA  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*                                                                  0467
*       ;                                                          0467
@DATA    DS    0H
@CH00100 DC    XL2'80'
         DS    0F
         DS    0F
@CV00094 DC    V(IEAVREP1)
         DS    0D
SAVEDQID DS    AL1
@CC01799 DC    C'SRB '
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
R0       EQU   @00
R1       EQU   @01
SRBPTR   EQU   @01
ASCBPTR  EQU   @01
RSMHDPTR EQU   @02
R3       EQU   @03
PVTPTR   EQU   @03
PFTERBN  EQU   @04
TQID     EQU   @05
PFTEPTR  EQU   @06
KEYREG   EQU   @07
QHEADEND EQU   @07
PCBPTR   EQU   @08
LASTPFTE EQU   @08
FRSTPFTE EQU   @08
PFTERBN2 EQU   @09
SAVER3   EQU   @09
RCAPTR   EQU   @10
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
PTR1     EQU   @15
REVEN    EQU   @00
RODD     EQU   @01
R10      EQU   @10
R11      EQU   @11
R2       EQU   @02
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
SAVER2   EQU   @06
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
HEADEND  EQU   0
HEADPTR  EQU   HEADEND
ENDPTR   EQU   HEADEND+2
IEAVEQRI EQU   0
IEAVRCFI EQU   0
ASVTPTR  EQU   0
OUCB     EQU   0
OUCBQFL  EQU   OUCB+16
OUCBSFL  EQU   OUCB+17
OUCBYFL  EQU   OUCB+18
OUCBAFL  EQU   OUCB+19
OUCBTFL  EQU   OUCB+20
OUCBEFL  EQU   OUCB+21
OUCBUFL  EQU   OUCB+23
OUCBCSW  EQU   OUCB+84
OUCBCFL  EQU   OUCBCSW+2
OUCBPSS  EQU   OUCB+112
OUCBPS1  EQU   OUCBPSS
OUCBPS2  EQU   OUCBPSS+4
OUCBPST  EQU   OUCB+120
ASVT     EQU   0
ASVTFRST EQU   ASVT+524
ASVTENTY EQU   ASVT+528
PVT      EQU   0
PVTFLAG1 EQU   PVT
PVTSRBIU EQU   PVTFLAG1
PVTLSI   EQU   PVTFLAG1
PVTFLAG2 EQU   PVT+1
PVTAFC   EQU   PVT+2
PVTAFCLO EQU   PVT+4
PVTAFCOK EQU   PVT+6
PVTPFTP  EQU   PVT+12
PVTSQDC  EQU   PVT+28
PVTSQVRC EQU   PVT+46
PVTSQNPC EQU   PVT+47
PVTPRCA  EQU   PVT+52
PVTSRBID EQU   PVT+68
PVTPGFAD EQU   PVT+88
PVTPVRIN EQU   PVT+140
PVTPRCFI EQU   PVT+152
PVTPSRBP EQU   PVT+188
PVTCFMCT EQU   PVT+300
PVTQS    EQU   PVT+304
PVTAFQF  EQU   PVTQS
PVTRSRVF EQU   PVTQS+4
PVTRSRVL EQU   PVTQS+6
PVTWSAX  EQU   PVT+344
PVTWSA12 EQU   PVTWSAX+824
PVTSAVE  EQU   PVTWSAX+1328
PVTRSRB  EQU   PVT+1776
PVTMAXFX EQU   PVT+1822
PVTDEFFX EQU   PVT+1828
PVTCNTFX EQU   PVT+1830
PVTSQAFX EQU   PVT+1832
PVTPCBQS EQU   PVT+1852
PVTGFADF EQU   PVTPCBQS+24
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBASID EQU   ASCB+36
ASCBRSM  EQU   ASCB+52
ASCBRSMF EQU   ASCBRSM
ASCBEJST EQU   ASCB+64
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBOUCB EQU   ASCB+144
ASCBFMCT EQU   ASCB+152
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
RSMHD    EQU   0
RSMASCB  EQU   RSMHD+8
RSMFLG1  EQU   RSMHD+12
RSMGFAD  EQU   RSMFLG1
RSMGFADD EQU   RSMFLG1
RSMQS    EQU   RSMHD+20
RSMLFQ   EQU   RSMQS
RSMLSQA  EQU   RSMQS+4
RSMLIOQ  EQU   RSMQS+8
PFTE     EQU   0
PFTPGID  EQU   PFTE
PFTQPTRS EQU   PFTE+4
PFTFQPTR EQU   PFTQPTRS
PFTBQPTR EQU   PFTQPTRS+2
PFTFXCT  EQU   PFTE+8
PFTFLAGS EQU   PFTE+12
PFTFLAG1 EQU   PFTFLAGS
PFTONAVQ EQU   PFTFLAG1
PFTVRINT EQU   PFTFLAG1
PFTOFINT EQU   PFTFLAG1
PFTFLAG2 EQU   PFTFLAGS+1
PFTDFRLS EQU   PFTFLAG2
PFTOFFLN EQU   PFTFLAG2
PFTVR    EQU   PFTFLAG2
PFTSTEAL EQU   PFTFLAG2
PFTPREF  EQU   PFTFLAG2
PFTQNDX  EQU   PFTE+14
PFTUIC   EQU   PFTE+15
PCB      EQU   0
PCBFQP   EQU   PCB
PCBFQPA  EQU   PCBFQP+1
PCBBQP   EQU   PCB+4
PCBRTP   EQU   PCB+8
PCBFL1   EQU   PCBRTP
PCBRLP   EQU   PCB+12
PCBFXC   EQU   PCBRLP
PCBRLPA  EQU   PCBRLP+1
PCBXPT   EQU   PCB+16
PCBFL2   EQU   PCBXPT
PCBGFAD  EQU   PCBFL2
PCBPGT   EQU   PCB+20
PCBFL3   EQU   PCBPGT
PCBBLOCK EQU   PCB+28
PCBSRB   EQU   PCBBLOCK
PCBRB    EQU   PCBSRB
PCBASCB  EQU   PCB+32
SRBSECT  EQU   0
SRB      EQU   SRBSECT
SRBID    EQU   SRB
SRBFLNK  EQU   SRB+4
SRBASCB  EQU   SRB+8
SRBFLC   EQU   SRB+12
SRBPASID EQU   SRBFLC+2
SRBEP    EQU   SRB+20
SRBRMTR  EQU   SRB+24
SRBPARM  EQU   SRB+28
SRBPRIOR EQU   SRB+37
RCA      EQU   0
RCANAME7 EQU   RCA+8
RCACSECT EQU   RCA+9
RCAFLAGS EQU   RCA+10
RCARCRD  EQU   RCA+11
RCANAMES EQU   RCA+12
RCANAME1 EQU   RCANAMES
RCANAME2 EQU   RCANAMES+1
RCAPFTE  EQU   RCANAME2
RCANAME3 EQU   RCANAMES+2
RCANAME4 EQU   RCANAMES+3
RCANAME5 EQU   RCANAMES+4
RCANAME6 EQU   RCANAMES+5
CVTMAP   EQU   0
CVT      EQU   CVTMAP
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
OUCBPTR  EQU   ASCBOUCB
SAVEINFO EQU   PVTWSA12
SAVEBYTE EQU   SAVEINFO
SAVEFLAG EQU   SAVEBYTE
RSVEXTRA EQU   SAVEBYTE
SAVETQID EQU   SAVEINFO+1
SAVERBN  EQU   SAVEINFO+2
SAVEASCB EQU   SAVEINFO+4
SAVECSID EQU   SAVEINFO+64
CVTPTR   EQU   FLCCVT
PSARSVTE EQU   PSARSVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTGETCL EQU   CVTS01+144
CVTOPTE  EQU   CVTS01+188
CVTASVT  EQU   CVTS01+208
CVTLSMQ  EQU   CVTS01+268
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
FLC      EQU   PSA
*                                      START UNREFERENCED COMPONENTS
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
@NM00007 EQU   SAVEINFO+8
@NM00006 EQU   SAVEBYTE
@NM00005 EQU   SAVEBYTE
@NM00004 EQU   SAVEBYTE
@NM00003 EQU   SAVEBYTE
@NM00002 EQU   SAVEBYTE
@NM00001 EQU   SAVEBYTE
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00047 EQU   CVTFIX+248
@NM00046 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTBAH   EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTRV490 EQU   CVTMAP+388
CVTSU    EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTVS1B  EQU   CVTOPTB
CVTVS1A  EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
RCARETAD EQU   RCA+20
RCATASID EQU   RCA+18
RCAREP1  EQU   RCANAME6
RCAPSIF  EQU   RCANAME6
RCAPSIX  EQU   RCANAME6
RCAVEQRP EQU   RCANAME6
RCARCFC  EQU   RCANAME6
RCACSGB  EQU   RCANAME6
RCAFXL   EQU   RCANAME6
RCAPS113 EQU   RCANAME6
RCAFREE  EQU   RCANAME5
RCARFR2  EQU   RCANAME5
RCACPBR  EQU   RCANAME5
RCAOPBR  EQU   RCANAME5
RCASORT  EQU   RCANAME5
RCASIRT  EQU   RCANAME5
RCARELV  EQU   RCANAME5
RCARELF  EQU   RCANAME5
RCAGFAD  EQU   RCANAME4
RCAVEQRI EQU   RCANAME4
RCAVEQRF EQU   RCANAME4
RCAVEQRC EQU   RCANAME4
RCATERM  EQU   RCANAME4
RCASQA   EQU   RCANAME4
RCASWIN  EQU   RCANAME4
RCASOUT  EQU   RCANAME4
RCARFR   EQU   RCANAME3
RCARELS  EQU   RCANAME3
RCARCFI  EQU   RCANAME3
RCARCF   EQU   RCANAME3
RCAPSII  EQU   RCANAME3
RCAPSIB  EQU   RCANAME3
RCAPS112 EQU   RCANAME3
RCAPIX   EQU   RCANAME3
RCAPIOP  EQU   RCANAME2
RCASWPC  EQU   RCANAME2
RCASWPP  EQU   RCANAME2
RCAPCB   EQU   RCANAME2
RCAOUT   EQU   RCANAME2
RCAITAS  EQU   RCANAME2
RCAIOCP  EQU   RCANAME2
RCAINV   EQU   RCANAME1
RCAGFA   EQU   RCANAME1
RCAFXLD  EQU   RCANAME1
RCAVEQR  EQU   RCANAME1
RCADSEG  EQU   RCANAME1
RCADLAS  EQU   RCANAME1
RCACSEG  EQU   RCANAME1
RCAVAMSI EQU   RCANAME1
@NM00045 EQU   RCAFLAGS
RCADISP  EQU   RCAFLAGS
@NM00044 EQU   RCAFLAGS
RCAQS    EQU   RCAFLAGS
RCAPSIER EQU   RCAFLAGS
RCAABEND EQU   RCAFLAGS
RCALL    EQU   RCAFLAGS
RCASAL   EQU   RCAFLAGS
@NM00043 EQU   RCANAME7
RCAPRSS  EQU   RCANAME7
RCAPRSR  EQU   RCANAME7
RCAPRSB  EQU   RCANAME7
RCAPSIY  EQU   RCANAME7
RCAPIOI  EQU   RCANAME7
RCAPARM1 EQU   RCA+4
RCAPARM0 EQU   RCA
@NM00042 EQU   SRB+40
@NM00041 EQU   SRB+38
SRBPKF   EQU   SRB+36
SRBSAVE  EQU   SRB+32
SRBPTCB  EQU   SRBFLC+4
SRBCPAFF EQU   SRBFLC
PCBEND   EQU   PCB+64
PCBAIA   EQU   PCB+36
PCBSPCTE EQU   PCBRB
PCBVBN   EQU   PCB+26
PCBRBN   EQU   PCB+24
PCBPGTA  EQU   PCBPGT+1
PCBSWPS2 EQU   PCBFL3
@NM00040 EQU   PCBFL3
PCBNOREC EQU   PCBFL3
PCBDFRLS EQU   PCBFL3
PCBSWPLS EQU   PCBFL3
PCBSWPS1 EQU   PCBFL3
PCBSWPIN EQU   PCBFL3
PCBSWPOT EQU   PCBFL3
PCBXPTA  EQU   PCBXPT+1
@NM00039 EQU   PCBFL2
@NM00038 EQU   PCBFL2
PCBVIO   EQU   PCBFL2
PCBSUPRS EQU   PCBFL2
PCBRESET EQU   PCBFL2
PCBIOERR EQU   PCBFL2
PCBFREAL EQU   PCBFL2
PCBRTPA  EQU   PCBRTP+1
PCBIOCMP EQU   PCBFL1
PCBIOI   EQU   PCBFL1
PCBROOT  EQU   PCBFL1
PCBLFR   EQU   PCBFL1
PCBLLHLD EQU   PCBFL1
PCBSRBMD EQU   PCBFL1
PCBPEX   EQU   PCBFL1
@NM00037 EQU   PCBFL1
PCBBQPA  EQU   PCBBQP
PCBCQN   EQU   PCBFQP
@NM00036 EQU   PFTFLAG2
@NM00035 EQU   PFTFLAG2
PFTIRRG  EQU   PFTFLAG2
PFTVRALC EQU   PFTFLAG1
PFTBADPG EQU   PFTFLAG1
PFTPCBSI EQU   PFTFLAG1
PFTVRPLT EQU   PFTFLAG1
PFTLSQA  EQU   PFTFLAG1
PFTRSV1  EQU   PFTE+10
PFTVBN   EQU   PFTPGID+2
PFTASID  EQU   PFTPGID
RSMASMHD EQU   RSMHD+40
RSMFOEQ  EQU   RSMHD+36
RSMLIOQL EQU   RSMLIOQ+4
RSMLIOQF EQU   RSMLIOQ
RSMLSQAL EQU   RSMLSQA+2
RSMLSQAF EQU   RSMLSQA
RSMLFQL  EQU   RSMLFQ+2
RSMLFQF  EQU   RSMLFQ
RSMRSV2  EQU   RSMHD+16
RSMCNTFX EQU   RSMHD+14
RSMRSV1  EQU   RSMHD+13
@NM00034 EQU   RSMFLG1
RSMFAIL  EQU   RSMFLG1
RSMCPNC  EQU   RSMFLG1
RSMCPNU  EQU   RSMFLG1
RSMIOCPC EQU   RSMFLG1
RSMIOCPU EQU   RSMFLG1
RSMSPCT  EQU   RSMHD+4
RSMVSTO  EQU   RSMHD
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBOUXB EQU   ASCB+148
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSMA EQU   ASCBRSM+1
ASCBRV54 EQU   ASCBRSMF
ASCBRV53 EQU   ASCBRSMF
ASCBRV52 EQU   ASCBRSMF
ASCBRV51 EQU   ASCBRSMF
ASCBVEQR EQU   ASCBRSMF
ASCBN2LP EQU   ASCBRSMF
ASCB1LPU EQU   ASCBRSMF
ASCB2LPU EQU   ASCBRSMF
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
PVTEND   EQU   PVT+1944
PVTTASID EQU   PVT+1942
PVTXXXXX EQU   PVT+1940
PVTMVCLC EQU   PVT+1936
PVTVCONS EQU   PVT+1896
PVTPRSB  EQU   PVT+1892
PVTCIOQL EQU   PVTPCBQS+36
PVTCIOQF EQU   PVTPCBQS+32
PVTGFADL EQU   PVTPCBQS+28
PVTFPCBL EQU   PVTPCBQS+20
PVTFPCBF EQU   PVTPCBQS+16
PVTPCBQR EQU   PVTPCBQS
PVTLPAFX EQU   PVT+1850
PVTLSQAF EQU   PVT+1848
PVTLPAR  EQU   PVT+1844
PVTLPAI  EQU   PVT+1840
PVTLPAFC EQU   PVT+1838
PVTCHUIC EQU   PVT+1836
PVTCOMFX EQU   PVT+1834
PVTFIXOK EQU   PVT+1826
PVTPEROK EQU   PVT+1824
PVTPERFX EQU   PVT+1820
PVTRESV5 EQU   PVT+1773
PVTSRBS  EQU   PVT+1772
PVTSSRB  EQU   PVT+1768
PVTACA   EQU   PVTWSAX+1400
PVTWSA18 EQU   PVTWSAX+1256
PVTWSA17 EQU   PVTWSAX+1184
PVTWSA16 EQU   PVTWSAX+1112
PVTWSA15 EQU   PVTWSAX+1040
PVTWSA14 EQU   PVTWSAX+968
PVTWSA13 EQU   PVTWSAX+896
PVTWSA11 EQU   PVTWSAX+752
PVTWSA10 EQU   PVTWSAX+672
PVTWSA9  EQU   PVTWSAX+592
PVTWSA8  EQU   PVTWSAX+504
PVTWSA7  EQU   PVTWSAX+432
PVTWSA6  EQU   PVTWSAX+360
PVTWSA5  EQU   PVTWSAX+288
PVTWSA4  EQU   PVTWSAX+216
PVTWSA3  EQU   PVTWSAX+144
PVTWSA2  EQU   PVTWSAX+72
PVTWSA1  EQU   PVTWSAX
PVTPFTQR EQU   PVTQS+20
PVTRSBQL EQU   PVTQS+18
PVTRSBQF EQU   PVTQS+16
PVTSQAQL EQU   PVTQS+14
PVTSQAQF EQU   PVTQS+12
PVTCFQL  EQU   PVTQS+10
PVTCFQF  EQU   PVTQS+8
PVTAFQL  EQU   PVTQS+2
PVTSPFR  EQU   PVT+302
PVTSPREC EQU   PVT+296
PVTCAREC EQU   PVT+292
PVTCAOUT EQU   PVT+288
PVTCAIN  EQU   PVT+284
PVTNSWPS EQU   PVT+280
PVTNPREC EQU   PVT+276
PVTSPOUT EQU   PVT+272
PVTSPIN  EQU   PVT+268
PVTVAMR  EQU   PVT+264
PVTVAMO  EQU   PVT+260
PVTVAMI  EQU   PVT+256
PVTNPOUT EQU   PVT+252
PVTNPIN  EQU   PVT+248
PVTPRSET EQU   PVT+244
PVTFRSLT EQU   PVT+240
PVTPAGIO EQU   PVT+236
PVTSWPIO EQU   PVT+232
PVTPSWPP EQU   PVT+228
PVTPPREF EQU   PVT+224
PVTPOPBR EQU   PVT+220
PVTPRELF EQU   PVT+216
PVTPRELV EQU   PVT+212
PVTPFREE EQU   PVT+208
PVTPRELS EQU   PVT+204
PVTPOUT  EQU   PVT+200
PVTPFXLD EQU   PVT+196
PVTPITAS EQU   PVT+192
PVTPDSEG EQU   PVT+184
PVTPCSGB EQU   PVT+180
PVTPCSEG EQU   PVT+176
PVTPINV  EQU   PVT+172
PVTPSWPC EQU   PVT+168
PVTPSOUT EQU   PVT+164
PVTPSWIN EQU   PVT+160
PVTPRCV  EQU   PVT+156
PVTPRCF  EQU   PVT+148
PVTPVRC  EQU   PVT+144
PVTPVRLS EQU   PVT+136
PVTPVEQR EQU   PVT+132
PVTPPIOI EQU   PVT+128
PVTPVRPO EQU   PVT+124
PVTPRFR  EQU   PVT+120
PVTPFP2  EQU   PVT+116
PVTPFP   EQU   PVT+112
PVTPFTE  EQU   PVT+108
PVTPCB   EQU   PVT+104
PVTREP2  EQU   PVT+100
PVTPIOCP EQU   PVT+96
PVTPIOP  EQU   PVT+92
PVTPGFA  EQU   PVT+84
PVTPSQA  EQU   PVT+80
PVTPSINT EQU   PVT+76
PVTPSIB  EQU   PVT+72
PVTPCIWA EQU   PVT+64
PVTHQSA  EQU   PVT+62
PVTLQSA  EQU   PVT+60
PVTOROOT EQU   PVT+56
PVTREUS  EQU   PVT+48
PVTRSUS  EQU   PVT+44
PVTVROOT EQU   PVT+40
PVTPCBLO EQU   PVT+38
PVTPCBCT EQU   PVT+36
PVTDFRS  EQU   PVT+34
PVTRSQA  EQU   PVT+32
PVTPTLB  EQU   PVT+31
PVTPCBNO EQU   PVT+30
PVTSRBNO EQU   PVT+29
PVTLCSA  EQU   PVT+26
PVTLPRIV EQU   PVT+24
PVTLVR   EQU   PVT+22
PVTFVR   EQU   PVT+20
PVTLPFN  EQU   PVT+18
PVTFPFN  EQU   PVT+16
PVTSSPIN EQU   PVT+11
PVTPCBS  EQU   PVT+10
PVTPOOL  EQU   PVT+8
@NM00033 EQU   PVTFLAG2
PVTRSMGM EQU   PVTFLAG2
PVTDUMP  EQU   PVTFLAG1
PVTSIT   EQU   PVTFLAG1
PVTAPREF EQU   PVTFLAG1
PVTPCBLT EQU   PVTFLAG1
PVTBGMS  EQU   PVTFLAG1
PVTPMSG  EQU   PVTFLAG1
ASVTEND  EQU   ASVT+528
ASVTAVAL EQU   ASVTENTY
ASVTAVAI EQU   ASVTFRST
ASVTRS00 EQU   ASVT+520
ASVTMAXU EQU   ASVT+516
ASVTASVT EQU   ASVT+512
ASVTBEGN EQU   ASVT+512
@NM00008 EQU   ASVT
OUCBEND  EQU   OUCB+136
OUCBNTSP EQU   OUCB+134
OUCBNDS  EQU   OUCB+132
OUCBTIO  EQU   OUCB+128
OUCBTCP  EQU   OUCB+124
OUCBIOSM EQU   OUCB+108
OUCBTMP  EQU   OUCB+104
OUCBR03  EQU   OUCB+102
OUCBIOR  EQU   OUCB+100
OUCBCRV  EQU   OUCB+98
OUCBIRV  EQU   OUCB+96
OUCBWMR  EQU   OUCB+92
OUCBCMRV EQU   OUCB+88
OUCBCF2  EQU   OUCBCFL
OUCBRSM  EQU   OUCBCFL
OUCBRDY  EQU   OUCBCFL
OUCBACN  EQU   OUCBCSW
OUCBACT  EQU   OUCB+80
OUCBWSS  EQU   OUCB+78
OUCBPSO  EQU   OUCB+76
OUCBTMO  EQU   OUCB+72
OUCBTMS  EQU   OUCB+68
OUCBMSO  EQU   OUCB+64
OUCBIOC  EQU   OUCB+60
OUCBCPU  EQU   OUCB+56
OUCBWMS  EQU   OUCB+52
OUCBTMW  EQU   OUCB+48
OUCBIMCB EQU   OUCB+44
OUCBASCB EQU   OUCB+40
OUCBSWC  EQU   OUCB+38
OUCBSRC  EQU   OUCB+37
OUCBDMN  EQU   OUCB+36
OUCBDMO  EQU   OUCB+34
OUCBWMG  EQU   OUCB+32
OUCBPGP  EQU   OUCB+31
OUCBR40  EQU   OUCB+30
OUCBR30  EQU   OUCB+29
OUCBSPG  EQU   OUCB+28
OUCBRDP  EQU   OUCB+27
OUCBNDP  EQU   OUCB+26
OUCBRPG  EQU   OUCB+25
OUCBNPG  EQU   OUCB+24
OUCBUF7  EQU   OUCBUFL
OUCBUF6  EQU   OUCBUFL
OUCBUF5  EQU   OUCBUFL
OUCBTSWC EQU   OUCBUFL
OUCBTSWP EQU   OUCBUFL
OUCBRSWP EQU   OUCBUFL
OUCBJSAS EQU   OUCBUFL
OUCBJSFS EQU   OUCBUFL
OUCBNQC  EQU   OUCB+22
OUCBMWT  EQU   OUCBEFL
OUCBQSC  EQU   OUCBEFL
OUCBQSS  EQU   OUCBEFL
OUCBNQF  EQU   OUCBEFL
OUCBCIM  EQU   OUCBEFL
OUCBOWT  EQU   OUCBEFL
OUCBTRM  EQU   OUCBEFL
OUCBLWT  EQU   OUCBEFL
OUCBINC  EQU   OUCBTFL
OUCBINP  EQU   OUCBTFL
OUCBMAR  EQU   OUCBTFL
OUCBPCH  EQU   OUCBTFL
OUCBRTR  EQU   OUCBTFL
OUCBNTR  EQU   OUCBTFL
OUCBSTR  EQU   OUCBTFL
OUCBATR  EQU   OUCBTFL
OUCBASW  EQU   OUCBAFL
OUCBNWT  EQU   OUCBAFL
OUCBR02  EQU   OUCBAFL
OUCBJSR  EQU   OUCBAFL
OUCBCPL  EQU   OUCBAFL
OUCBRMA  EQU   OUCBAFL
OUCBAPG  EQU   OUCBAFL
OUCBAF0  EQU   OUCBAFL
OUCBFXS  EQU   OUCBYFL
OUCBDTA  EQU   OUCBYFL
OUCBAXS  EQU   OUCBYFL
OUCBPSTR EQU   OUCBYFL
OUCBMNT  EQU   OUCBYFL
OUCBLOG  EQU   OUCBYFL
OUCBSTT  EQU   OUCBYFL
OUCBPSTE EQU   OUCBYFL
OUCBSCN  EQU   OUCBSFL
OUCBENQ  EQU   OUCBSFL
OUCBPVL  EQU   OUCBSFL
OUCBNSWI EQU   OUCBSFL
OUCBINV  EQU   OUCBSFL
OUCBBIB  EQU   OUCBSFL
OUCBCTI  EQU   OUCBSFL
OUCBNSW  EQU   OUCBSFL
OUCBQF7  EQU   OUCBQFL
OUCBQF6  EQU   OUCBQFL
OUCBOUT  EQU   OUCBQFL
OUCBOFF  EQU   OUCBQFL
OUCBQSFL EQU   OUCBQFL
OUCBGOB  EQU   OUCBQFL
OUCBGOI  EQU   OUCBQFL
OUCBGOO  EQU   OUCBQFL
OUCBTMA  EQU   OUCB+12
OUCBBCK  EQU   OUCB+8
OUCBFWD  EQU   OUCB+4
OUCBNAME EQU   OUCB
@NM00032 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00031 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00030 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00029 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSAULCMS EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00028 EQU   FLCFSA
@NM00027 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00026 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00025 EQU   FLCIOA
@NM00024 EQU   FLCMCLA+15
@NM00023 EQU   FLCMCLA+14
@NM00022 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00021 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00020 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00019 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00018 EQU   FLCPER
@NM00017 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00016 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00015 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00014 EQU   FLCPIILC
@NM00013 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00012 EQU   FLCSVILC
@NM00011 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00010 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00009 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
*                                      END UNREFERENCED COMPONENTS
@RC00083 EQU   ENQTEST
@RC00153 EQU   EXITPFTE
@RC00166 EQU   ENQAFQ
@RC00179 EQU   @RC00177
@RC00187 EQU   @RC00177
@RF00196 EQU   @RC00177
@RC00208 EQU   @RC00206
@RC00220 EQU   @RC00218
@RF00227 EQU   @RC00218
@RC00237 EQU   PFTENQ
@RT00254 EQU   EXITPFTE
@RT00263 EQU   EXITPFTE
@RT00277 EQU   AFQENQ
@RT00316 EQU   PFTENQ
@RT00318 EQU   PFTENQ
@RT00328 EQU   GFADEFER
@RT00338 EQU   EXITPFTE
@RT00340 EQU   GETPCB
@RT00349 EQU   SCHEDGFA
@RF00349 EQU   GETPCB
@RT00358 EQU   EXITPFTE
@RT00368 EQU   SCHEDRP1
@RT00395 EQU   CHECKAFC
@RT00398 EQU   EXITPFTE
@RF00433 EQU   @PB00002
@ENDDATA EQU   *
         END   IEAVPFTE,(C'PLS1451',0701,78164)
