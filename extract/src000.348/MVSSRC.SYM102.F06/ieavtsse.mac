         TITLE 'IEAVTSSE-SUMMARY DUMP PROCESSOR FOR SVC ENTRY TO SDUMP'
IEAVTSSE CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IEAVTSSE  78.208'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @09,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@09                                         0001
*                                      WORKAREA                      */
*   SVCDMPNM=MODNAME;               /* IDENTIFY THIS MODULE FOR    0118
*                                      RECOVERY TRACKING             */
         MVC   SVCDMPNM(8,SDWKPTR),@CC02998                        0118
*   SMWKPTR=RTCTSDSW;               /* GET ADDR OF SUMDUMP WORKAREA  */
         L     @12,CVTPTR                                          0119
         L     @08,CVTRTMCT(,@12)                                  0119
         L     SMWKPTR,RTCTSDSW(,@08)                              0119
*   RFY                                                            0120
*     SMWK BASED(SMWKPTR);          /* R6 POINTS TO SUMDUMP WORKAREA */
*   RFY                                                            0121
*     SMDLR BASED(ADDR(SMWKHEAD));  /* WILL BUILD EACH SUMMARY DUMP
*                                      RECORD HEADER IN THE SMWKHEAD
*                                      STORAGE AREA, THEN THE OUTPUTP
*                                      INTERNAL PROCEDURE WILL COPY
*                                      IT TO THE OUTPUT BUFFER FOR 0121
*                                      SVC DUMPS                     */
*   SMWKHEAD=SMWKHEAD&&SMWKHEAD;    /* INITIALIZE SUMMARY DUMP RECORD
*                                      HEADER TO ZEROS               */
         XC    SMWKHEAD(20,SMWKPTR),SMWKHEAD(SMWKPTR)              0122
*   WORKSWS=WORKSWS&&WORKSWS;       /* INITIALIZE INTERNAL SWITCHES
*                                      (CONTAINED IN SMWK) TO ZEROS  */
         XC    WORKSWS(1,SMWKPTR),WORKSWS(SMWKPTR)                 0123
*   SAVECSA=SAREG;                  /* SAVE CALLER'S SAVE AREA ADDR
*                                      BECAUSE WILL CHANGE SAREG NEXT*/
         ST    SAREG,SAVECSA(,SMWKPTR)                             0124
*   SAREG=ADDR(SDWRGSV2);           /* PROVIDE SAVE AREA FOR SETLOCK
*                                      AND IEAVTSDP          @ZA27227*/
         LA    SAREG,SDWRGSV2(,SDWKPTR)                            0125
*                                                                  0126
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE THE 4104 BYTE OUTPUT BUFFER FOR SVC DUMPS          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0126
*/*  *****************************************************************
*    *                                                               *
*    *              THE AMDPRDMP DATA RECORD HEADER, MAPPED BY       *
*    *              AMDDATA MACRO (PRDINPUT), IS AT THE BEGINNING    *
*    *              OF THE BUFFER:                                   *
*    *                                                               *
*    *              (NOTE -- THE BUFFER IS AT THE END OF THE         *
*    *               SDWORK CONTROL BLOCK, AT LABEL SDBUFFER.)       *
*    *                                                               *
*    *                          +1        +2                         *
*    *  SDSMBUFF ->  +0 ×---------------------------------------×    *
*    *                  × PRDKEY1 × PRDKEY2 × PRDASID           ×    *
*    *               +4 ×---------------------------------------×    *
*    *                  × PSEUDOAD                              ×    *
*    *               +8 ×---------------------------------------×    *
*    *                    (THE VARIABLE LENGTH PRDDATA IS NEXT)      *
*    *                                                               *
*    *  AFTER INITIALIZATION:                                        *
*    *               +0   0000FFFA                                   *
*    *               +4   00080000  (WILL INCREASE BY '1000'X AFTER  *
*    *                               EACH BUFFER IS WRITTEN... )     *
*    *                                  00081000                     *
*    *                                  00082000 ETC.                *
*    *                                                               *
*    *****************************************************************/
*                                                                  0126
*   PRDKEY1=0;                      /* INIT DUMP RECORD HEADER       */
         L     @08,PRDINPTR(,SDWKPTR)                              0126
         MVI   PRDKEY1(@08),X'00'                                  0126
*   PRDKEY2=0;                      /* INIT DUMP RECORD HEADER       */
         MVI   PRDKEY2(@08),X'00'                                  0127
*   PRDASID=SMDPASID;               /* USE THE SUMMARY DUMP PSEUDO 0128
*                                      ASID OF 'FFFA'X TO PUT THE  0128
*                                      DATA INTO THE DUMP IN A FORMAT
*                                      COMPATIBLE WITH THE REST OF 0128
*                                      THE DUMP, BUT UNIQUELY      0128
*                                      IDENTIFIED                    */
         MVC   PRDASID(2,@08),@CB02319                             0128
*   IF SMWKPSSE=ZERO THEN           /* IF THIS IS THE FIRST ADDRESS
*                                      SPACE IN THE SUMDUMP  @ZM45052*/
         L     @02,SMWKPSSE(,SMWKPTR)                              0129
         LTR   @02,@02                                             0129
         BNZ   @RF00129                                            0129
*     PSEUDOAD=PASTRT;              /* BEGIN THE PSEUDO ADDRESSES FOR
*                                      THE PSEUDO ADDRESS SPACE THAT
*                                      WILL CONTAIN THE SUMMARY DUMP
*                                      DATA AT THE START OF THE    0130
*                                      PRIVATE AREA FOR DUMMY ASID OF
*                                      'FFFA', SO THAT AMDPRDMP WILL
*                                      NOT CONFUSE IT WITH COMMON  0130
*                                      STORAGE AND SO AMDPRDMP CAN 0130
*                                      RETRIEVE DATA BY 'PSEUDOAD' 0130
*                                      REQUESTED BY THE SUMDUMP    0130
*                                      FORMATTER                     */
         L     @12,GDAPTR(,@12)                                    0130
         L     @12,PASTRT(,@12)                                    0130
         ST    @12,PSEUDOAD(,@08)                                  0130
*   ELSE                            /* IF THIS IS CONTINUED SUMDUMP  */
*     DO;                           /*                       @ZM45052*/
         B     @RC00129                                            0131
@RF00129 DS    0H                                                  0132
*       IF(SMWKPSSE+LENGTH(PRDDATA))<=(PASTRT+PASIZE) THEN/* IF HAVE
*                                      ROOM LEFT IN THE PSEUDO     0132
*                                      ADDRESS SPACE         @ZM45052*/
         L     @12,SMWKPSSE(,SMWKPTR)                              0132
         L     @08,@CF01017                                        0132
         ALR   @08,@12                                             0132
         L     @02,CVTPTR                                          0132
         L     @02,GDAPTR(,@02)                                    0132
         L     @15,PASTRT(,@02)                                    0132
         AL    @15,PASIZE(,@02)                                    0132
         CR    @08,@15                                             0132
         BH    @RF00132                                            0132
*         PSEUDOAD=SMWKPSSE;        /* INDICATE NEXT PAGE IN PSEUDO
*                                      ADDRESS SPACE         @ZM45052*/
         L     @08,PRDINPTR(,SDWKPTR)                              0133
         ST    @12,PSEUDOAD(,@08)                                  0133
*       ELSE                        /* ELSE, IF NO ROOM LEFT,@ZM45052*/
*         ENDSW=ON;                 /* TERMINATE THE SUMDUMP @ZM45052*/
         B     @RC00132                                            0134
@RF00132 OI    ENDSW(SMWKPTR),B'00001000'                          0134
*     END;                          /*                       @ZM45052*/
@RC00132 DS    0H                                                  0136
*   BUFFPTR=ADDR(PRDDATA);          /* INITIALIZE POINTER FOR NEXT 0136
*                                      FREE AREA IN OUTPUT BUFFER TO
*                                      ADDRESS OF THE BUFFER, MINUS
*                                      THE AMDPRDMP DATA RECORD    0136
*                                      HEADER                        */
@RC00129 L     @12,PRDINPTR(,SDWKPTR)                              0136
         LA    @12,PRDDATA(,@12)                                   0136
         ST    @12,BUFFPTR(,SMWKPTR)                               0136
*   ENDBUFF=ADDR(PRDDATA)+LENGTH(PRDDATA)-ONE;/* SAVE ADDRESS OF END
*                                      OF OUTPUT BUFFER              */
         SL    @12,@CF03164                                        0137
         ST    @12,ENDBUFF(,SMWKPTR)                               0137
*                                                                  0138
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZATION FOR ERROR RECOVERY                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0138
*   SAVECRTY=ERRRETRY;              /* SAVE CALLER'S RETRY ADDRESS 0138
*                                      BECAUSE THIS MODULE WILL BE 0138
*                                      UPDATING IT                   */
         L     @12,ERRRETRY(,ERR6WPTR)                             0138
         ST    @12,SAVECRTY(,SMWKPTR)                              0138
*   ERRBASE1=BASEREG;               /* PUT THE BASE REG IN THE ERROR
*                                      RTN PARMLIST TO BE RESTORED IF
*                                      THERE IS A RETRY (THIS      0139
*                                      STATEMENT MUST IMMEDIATELY  0139
*                                      PRECEDE THE FIRST SETTING OF
*                                      ERRRETRY)                     */
         ST    BASEREG,ERRBASE1(,ERR6WPTR)                         0139
*   ERRBASE2=SMWKPTR;               /* RESTORE REG 6 FOR RECOVERY  0140
*                                                            @ZA29445*/
         ST    SMWKPTR,ERRBASE2(,ERR6WPTR)                         0140
*                                                                  0141
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS EACH PART OF THE SUMMARY SVC DUMP...                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0141
*   ERRRETRY=ADDR(SSERTY10);        /* GET FIRST RETRY LOCATION ADDR */
*                                                                  0141
         LA    @12,SSERTY10                                        0141
         ST    @12,ERRRETRY(,ERR6WPTR)                             0141
*   /*****************************************************************/
*   /*                                                               */
*   /* CREATE HEADER CONTAINING ASID, JOBNAME, AND STEPNAME          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0142
*   IF ENDSW=OFF THEN               /* IF NO ERROR FOUND SO FAR    0142
*                                                            @ZA19201*/
         TM    ENDSW(SMWKPTR),B'00001000'                          0142
         BNZ   @RF00142                                            0142
*     CALL ASIDP;                   /* CREATE HEADER RECORD -NOTE- 0143
*                                      WILL ONLY DUMP THIS RECORD IF
*                                      OTHER OUTPUT RECORDS ARE    0143
*                                      CREATED FOR THIS ADDR SPACE 0143
*                                                            @ZA19201*/
         BAL   @14,ASIDP                                           0143
*SSERTY10:                          /* WILL RETRY HERE IF ASIDP    0144
*                                      ABENDS                @ZA19201*/
*   ERRRETRY=ADDR(SSERTY20);        /* GET NEXT RETRY LOCATION     0144
*                                      ADDRESS               @ZA19201*/
@RF00142 DS    0H                                                  0144
SSERTY10 LA    @12,SSERTY20                                        0144
         ST    @12,ERRRETRY(,ERR6WPTR)                             0144
*   ERRNORCD=ON;                    /* INDICATE NO LOGREC RECORDING
*                                      IS NEEDED (WILL BE REFERENCING
*                                      SUMLIST AND RTM2WA REGISTER 0145
*                                      STORAGE AREAS)                */
         OI    ERRNORCD(ERR6WPTR),B'00000010'                      0145
*   NORCDSW=ON;                     /* TELL CHECKP TO RESET ERRNORCD
*                                      ON IF ABENDED         @ZA19201*/
*                                                                  0146
         OI    NORCDSW(SMWKPTR),B'00000100'                        0146
*   /*****************************************************************/
*   /*                                                               */
*   /* DUMP AREAS SPECIFIED WITH SUMLIST KEYWORD                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0147
*   IF SDUNEW=ON&                   /* IF THIS IS A SU 33 PARMLIST   */
*       SDUSULST=ON&                /* AND SUMLIST KWD WAS ON MACRO  */
*       ENDSW=OFF THEN              /* AND NO ERROR FOUND SO FAR     */
         L     @12,CVTPTR                                          0147
         L     @12,CVTRTMCT(,@12)                                  0147
         L     @12,SDUMPPTR(,@12)                                  0147
         TM    SDUNEW(@12),B'00101000'                             0147
         BNO   @RF00147                                            0147
         TM    ENDSW(SMWKPTR),B'00001000'                          0147
         BNZ   @RF00147                                            0147
*     CALL SUMLISTP;                /* DUMP THE SPECIFIED STORAGE  0148
*                                      RANGES                        */
         BAL   @14,SUMLISTP                                        0148
*SSERTY20:                          /* WILL RETRY HERE IF SUMLISTP 0149
*                                      ABENDS                @ZA19201*/
*   ERRRETRY=ADDR(SSERTY30);        /* GET NEXT RETRY LOCATION ADDR  */
@RF00147 DS    0H                                                  0149
SSERTY20 LA    @12,SSERTY30                                        0149
         ST    @12,ERRRETRY(,ERR6WPTR)                             0149
*   ERRNORCD=ON;                    /* INDICATE NO LOGREC RECORDING
*                                      IS NEEDED (MUST RESET BIT   0150
*                                      BECAUSE A BAD SUMLIST PARMLIST
*                                      COULD CAUSE AN ABEND AND    0150
*                                      SDUMP'S ESTAE TURNS THE BIT 0150
*                                      OFF WHEN IT IS ENTERED FOR AN
*                                      ABEND)                @ZM45191*/
         OI    ERRNORCD(ERR6WPTR),B'00000010'                      0150
*                                                                  0151
*   /*****************************************************************/
*   /*                                                               */
*   /* DUMP RTM2WA'S, ANY SAVED TRACE TABLE, AND AREAS POINTED TO BY */
*   /* PSW AND REGISTERS AT TIME OF ERROR                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0151
*   IF ENDSW=OFF THEN               /* IF CAN STILL WRITE TO DUMP  0151
*                                      DATA SET                      */
         TM    ENDSW(SMWKPTR),B'00001000'                          0151
         BNZ   @RF00151                                            0151
*     CALL RTM2P;                   /* USE INTERNAL PROC TO DUMP   0152
*                                      RTM2WA'S AND ASSOCIATED AREAS */
         BAL   @14,RTM2P                                           0152
*SSERTY30:                          /* RETRY HERE IF RTM2P ABENDS    */
*   ERRRETRY=ADDR(SSERTY40);        /* GET NEXT RETRY LOCATION ADDR  */
@RF00151 DS    0H                                                  0153
SSERTY30 LA    @12,SSERTY40                                        0153
         ST    @12,ERRRETRY(,ERR6WPTR)                             0153
*   NORCDSW=OFF;                    /* TELL CHECKP NOT TO RESET    0154
*                                      ERRNORCD ON IF HAVE ABEND   0154
*                                                            @ZA19201*/
         NI    NORCDSW(SMWKPTR),B'11111011'                        0154
*   ERRNORCD=OFF;                   /* INDICATE LOGREC RECORDING IS
*                                      NEEDED IF ABEND (DONE       0155
*                                      REFERENCING SUMLIST AND RTM2WA
*                                      REGISTER STORAGE AREAS)       */
*                                                                  0155
         NI    ERRNORCD(ERR6WPTR),B'11111101'                      0155
*   /*****************************************************************/
*   /*                                                               */
*   /* DUMP THE SUPERVISOR TRACE TABLE                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0156
*   IF CVTGTFAV=OFF                 /* IF GTF TRACE IS NOT ACTIVE    */
*       &TRRTM2SW=OFF               /* AND NO SAVED TRACE TABLE WAS
*                                      FOUND FOR AN RTM2WA           */
*       &SMWKPSSE=ZERO              /* AND THIS IS THE FIRST ADDRESS
*                                      SPACE IN THE SUMDUMP          */
*       &ENDSW=OFF THEN             /* AND CAN STILL WRITE TO DUMP 0156
*                                      DATA SET                      */
         L     @12,CVTPTR                                          0156
         TM    CVTGTFAV(@12),B'10000000'                           0156
         BNZ   @RF00156                                            0156
         TM    TRRTM2SW(SMWKPTR),B'00010000'                       0156
         BNZ   @RF00156                                            0156
         L     @12,SMWKPSSE(,SMWKPTR)                              0156
         LTR   @12,@12                                             0156
         BNZ   @RF00156                                            0156
         TM    ENDSW(SMWKPTR),B'00001000'                          0156
         BNZ   @RF00156                                            0156
*     CALL TRACEP;                  /* USE INTERNAL PROC TO DUMP   0157
*                                      TRACE DATA (IF HAD TRT OPTION)*/
         BAL   @14,TRACEP                                          0157
*SSERTY40:                          /* RETRY HERE IF TRACEP ABENDS   */
*   ERRRETRY=ADDR(RTYEND);          /* RETRY TO END OF IEAVTSSE      */
@RF00156 DS    0H                                                  0158
SSERTY40 LA    @12,RTYEND                                          0158
         ST    @12,ERRRETRY(,ERR6WPTR)                             0158
*                                                                  0159
*   /*****************************************************************/
*   /*                                                               */
*   /* CLEAN UP AND RETURN TO CALLER...                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0159
*   IF ENDSW=OFF THEN               /* IF CAN STILL WRITE TO DUMP  0159
*                                      DATA SET                      */
         TM    ENDSW(SMWKPTR),B'00001000'                          0159
         BNZ   @RF00159                                            0159
*     DO;                                                          0160
*       CALL CLEANUPP;              /* EITHER WRITE 'END OF SUMMARY
*                                      DUMP' RECORD OR WRITE NULL  0161
*                                      RECORD FOR REST OF SUMMARY  0161
*                                      DUMP, IF OTHER ASIDS WILL BE
*                                      DUMPED                @ZA19201*/
         BAL   @14,CLEANUPP                                        0161
*     END;                          /* END OF IF ENDSW = OFF         */
*RTYEND:                            /* RETRY HERE IF CLEAN-UP LOGIC
*                                      ABENDS                        */
*   ERRRETRY=SAVECRTY;              /* RESTORE CALLER'S RETRY ADDRESS*/
@RF00159 DS    0H                                                  0163
RTYEND   L     @12,SAVECRTY(,SMWKPTR)                              0163
         ST    @12,ERRRETRY(,ERR6WPTR)                             0163
*   SAREG=SAVECSA;                  /* RESTORE SAVE AREA POINTER TO
*                                      ITS VALUE ON ENTRY            */
         L     SAREG,SAVECSA(,SMWKPTR)                             0164
*   RETURN;                         /* RETURN TO CALLER (IEAVTSDT OR
*                                      IEAVAD00)                     */
@EL00001 DS    0H                                                  0165
@EF00001 DS    0H                                                  0165
@ER00001 LM    @14,@12,12(@13)                                     0165
         BR    @14                                                 0165
*   RFY                                                            0166
*    (R14,                                                         0166
*     RETNREG) RSTD;                /* RESERVE REGISTER 14 FOR RETURN
*                                      ADDRESS, SO WON'T DEFAULT TO A
*                                      WORK REGISTER IN INTERNAL   0166
*                                      PROCEDURES                    */
*                                                                  0167
*/********************************************************************/
*/*                                                                  */
*/*INTERNAL PROCEDURE NAME-                                          */
*/*          ASIDP                                                   */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          DUMP ASID,JOBNAME,AND STEPNAME INFORMATION              */
*/*                                                                  */
*/*CALLERS-                                                          */
*/*          THE MAINLINE CODE IN THIS MODULE                        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0167
*ASIDP:                                                            0167
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0167
*                                                                  0167
ASIDP    DS    0H                                                  0168
*/*A-20800933-20826533                                       @ZA19201*/
*                                                                  0168
*   ASIDS=RETNREG;                  /* SAVE RETURN ADDRESS BECAUSE 0168
*                                      LATER CALL WILL DESTROY IT    */
         ST    RETNREG,ASIDS(,SMWKPTR)                             0168
*   SMDLRID=SMDASIDR;               /* USE RECORD ID FOR ASID INFO   */
         LA    @15,656                                             0169
         ALR   @15,SMWKPTR                                         0169
         MVC   SMDLRID(2,@15),@CH02414                             0169
*   SMDLRLEN=LENGTH(SSEASIDD);      /* GET LENGTH OF DATA FOR RECORD */
         MVC   SMDLRLEN(4,@15),@CF02367                            0170
*   SMDLRADR=ADDR(SSEASIDD);        /* WILL CREATE LOCAL COPY OF ASID
*                                      RECORD DATA                   */
         LA    @12,SSEASIDD(,SMWKPTR)                              0171
         ST    @12,SMDLRADR(,@15)                                  0171
*   SSEASIDA=ASCBASID;              /* PUT ASID FROM ASCB INTO DATA
*                                      AREA                          */
         L     @15,ASCBPTR                                         0172
         LH    @12,ASCBASID(,@15)                                  0172
         N     @12,@CF03175                                        0172
         STH   @12,SSEASIDA(,SMWKPTR)                              0172
*   TCBPTR=ASXBLTCB;                /* POINT TO LAST TCB IN THIS   0173
*                                      ADDRESS SPACE (WANT MOST    0173
*                                      RECENTLY CREATED TIOT INFO)   */
         L     @15,ASXBPTR(,@15)                                   0173
         L     @15,ASXBLTCB(,@15)                                  0173
         ST    @15,TCBPTR(,SMWKPTR)                                0173
*   SSEASIDJ=TIOCNJOB;              /* PUT JOBNAME FROM TIOT INTO  0174
*                                      DATA AREA                     */
         L     @15,TIOTPTR(,@15)                                   0174
         MVC   SSEASIDJ(8,SMWKPTR),TIOCNJOB(@15)                   0174
*   SSEASIDS=TIOCSTEP;              /* PUT PROCSTEPNAME/STEPNAME FROM
*                                      TIOT INTO DATA AREA           */
         MVC   SSEASIDS(16,SMWKPTR),TIOCSTEP(@15)                  0175
*   CALL OUTPUTP;                   /* PUT THIS RECORD INTO THE    0176
*                                      OUTPUT BUFFER                 */
         BAL   @14,OUTPUTP                                         0176
*   RETNREG=ASIDS;                  /* RESTORE RETURN ADDRESS        */
         L     RETNREG,ASIDS(,SMWKPTR)                             0177
*   END ASIDP;                                                     0178
@EL00002 DS    0H                                                  0178
@EF00002 DS    0H                                                  0178
@ER00002 BR    @14                                                 0178
*                                                                  0179
*/********************************************************************/
*/*                                                                  */
*/*INTERNAL PROCEDURE NAME-                                          */
*/*          SUMLISTP                                                */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          DUMP AREAS SPECIFIED WITH SUMLIST KEYWORD               */
*/*                                                                  */
*/*CALLERS-                                                          */
*/*          THE MAINLINE CODE IN THIS MODULE                        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0179
*SUMLISTP:                                                         0179
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0179
SUMLISTP DS    0H                                                  0180
*   SUMLISTS=RETNREG;               /* SAVE RETURN ADDRESS BECAUSE 0180
*                                      LATER CALL WILL DESTROY IT    */
         ST    RETNREG,SUMLISTS(,SMWKPTR)                          0180
*   RFY                                                            0181
*     STORLIST BASED(WORKREGB);     /* MAP SUMDUMP STORAGE LIST      */
*   SMDLRID=SMDLIST;                /* INITIALIZE HEADER FOR  SUMLIST*/
         MVC   SMDLRID+656(2,SMWKPTR),@CH02330                     0182
*   WORKREGB=SDUSUMLP;              /* GET ADDRESS OF SUMDUMP STORAGE
*                                      LIST (SUMLIST)                */
         L     @15,CVTPTR                                          0183
         L     @15,CVTRTMCT(,@15)                                  0183
         L     @15,SDUMPPTR(,@15)                                  0183
         L     WORKREGB,SDUSUMLP(,@15)                             0183
*   SMWKIDX1=ONE;                   /* INITIALIZE LOOP COUNTER TO ONE*/
         MVC   SMWKIDX1(2,SMWKPTR),@CH00076                        0184
*   ERRRETRY=ADDR(SSERTYBP);        /* GET NEXT RETRY ADDR (SPECIAL
*                                      RETRY FOR BAD PARMLIST)       */
*                                                                  0185
         LA    @15,SSERTYBP                                        0185
         ST    @15,ERRRETRY(,ERR6WPTR)                             0185
*   /*****************************************************************/
*   /*                                                               */
*   /* LOOP TO PROCESS ALL STORAGE RANGES SPECIFIED FOR SUMLIST --   */
*   /* VALIDITY CHECK EACH ADDRESS AND COPY VALID RANGES TO THE      */
*   /* BUFFER                                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0186
*   DO WHILE(LASTSW=OFF);                                          0186
         B     @DE00186                                            0186
@DL00186 DS    0H                                                  0187
*     WORKREGA=ADDR(STORLIST(SMWKIDX1));/* GET VIRTUAL ADDRESS OF  0187
*                                      RANGE                         */
         LH    @15,SMWKIDX1(,SMWKPTR)                              0187
         SLA   @15,3                                               0187
         LR    WORKREGA,WORKREGB                                   0187
         AL    WORKREGA,@CF03176                                   0187
         LA    WORKREGA,STORLIST(@15,WORKREGA)                     0187
*     IF WORKREGB^=ZERO&            /* CONTINUE IF SUMLIST ISN'T AT
*                                      LOCATION 0 AND                */
*         BEGHOBIT(SMWKIDX1)=OFF&   /* CONTINUE IF FIRST ADDRESS IN
*                                      PAIR DOES NOT INDICATE END OF
*                                      SUMLIST AND                   */
*         BEGADDR(SMWKIDX1)<=       /* IF RANGE BEGINNING ADDRESS IS
*                                      LESS THAN OR EQUAL TO         */
*         (ENDADDR(SMWKIDX1)&HIGHBIT0) THEN/* END ADDRESS            */
         SLR   @12,@12                                             0188
         CR    WORKREGB,@12                                        0188
         BE    @RF00188                                            0188
         ALR   @15,WORKREGB                                        0188
         AL    @15,@CF03176                                        0188
         TM    BEGHOBIT(@15),B'10000000'                           0188
         BNZ   @RF00188                                            0188
         LH    @15,SMWKIDX1(,SMWKPTR)                              0188
         SLA   @15,3                                               0188
         LR    @08,WORKREGB                                        0188
         AL    @08,@CF03176                                        0188
         L     @08,BEGADDR(@15,@08)                                0188
         AL    @15,@CF03177                                        0188
         L     @15,ENDADDR-4(@15,WORKREGB)                         0188
         N     @15,@CF03000                                        0188
         CR    @08,@15                                             0188
         BH    @RF00188                                            0188
*       DO;                         /* RANGE VALID--TRY TO MOVE IT   */
*         SMDLRADR=BEGADDR(SMWKIDX1);/* BEGINNING ADDRESS IN HEADER  */
         ST    @08,SMDLRADR+656(,SMWKPTR)                          0190
*         IF ENDSW=OFF              /* IF BUFFER NOT FULL            */
*             &(SMWKPSSE=ZERO       /* AND IF SYSTEM STORAGE HASN'T
*                                      BEEN DUMPED YET               */
*             ×(SMDLRADR>=PASTRT&SMDLRADR<(PASTRT+PASIZE)))/* OR IF
*                                      THIS IS STORAGE IN THE PRIVATE
*                                      AREA                          */
*           THEN                                                   0191
         TM    ENDSW(SMWKPTR),B'00001000'                          0191
         BNZ   @RF00191                                            0191
         C     @12,SMWKPSSE(,SMWKPTR)                              0191
         BE    @RT00191                                            0191
         L     @15,CVTPTR                                          0191
         L     @15,GDAPTR(,@15)                                    0191
         L     @12,PASTRT(,@15)                                    0191
         CR    @08,@12                                             0191
         BL    @RF00191                                            0191
         AL    @12,PASIZE(,@15)                                    0191
         CR    @08,@12                                             0191
         BNL   @RF00191                                            0191
@RT00191 DS    0H                                                  0192
*           DO;                     /* BUILD HEADER FOR THIS RANGE   */
*             IF BEGADDR(SMWKIDX1)=(ENDADDR(SMWKIDX1)&HIGHBIT0)/* IF
*                                      MINIMUM RANGE SPECIFIED       */
*               THEN                                               0193
         LH    @15,SMWKIDX1(,SMWKPTR)                              0193
         SLA   @15,3                                               0193
         LR    @12,WORKREGB                                        0193
         AL    @12,@CF03177                                        0193
         L     @12,ENDADDR-4(@15,@12)                              0193
         N     @12,@CF03000                                        0193
         AL    @15,@CF03176                                        0193
         C     @12,BEGADDR(@15,WORKREGB)                           0193
         BNE   @RF00193                                            0193
*               SMWKSVLN=LENDFLT;   /* DEFAULT THE RANGE LENGTH      */
         MVC   SMWKSVLN(4,SMWKPTR),@CF00052                        0194
*             ELSE                                                 0195
*               SMWKSVLN=(ENDADDR(SMWKIDX1)&HIGHBIT0)-BEGADDR(SMWKIDX1)
*                   +ONE;           /* CALCULATE LENGTH OF THIS RANGE*/
*                                                                  0195
         B     @RC00193                                            0195
@RF00193 LH    @15,SMWKIDX1(,SMWKPTR)                              0195
         SLA   @15,3                                               0195
         LR    @12,WORKREGB                                        0195
         AL    @12,@CF03177                                        0195
         L     @12,ENDADDR-4(@15,@12)                              0195
         N     @12,@CF03000                                        0195
         AL    @15,@CF03176                                        0195
         SL    @12,BEGADDR(@15,WORKREGB)                           0195
         AL    @12,@CF00076                                        0195
         ST    @12,SMWKSVLN(,SMWKPTR)                              0195
*             /*******************************************************/
*             /*                                                     */
*             /* COPY THIS RANGE TO THE OUTPUT BUFFER                */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0196
*             DO WHILE(SMWKSVLN>ZERO);/* LOOP TO SUPPORT SUMLIST   0196
*                                      RANGES GREATER THAN 64K (A  0196
*                                      SEGMENT) IN SIZE              */
@RC00193 B     @DE00196                                            0196
@DL00196 DS    0H                                                  0197
*               IF SMWKSVLN>MAXLEN  /* IF LENGTH GREATER THAN SEGMENT*/
*                 THEN                                             0197
         L     @15,@CF02991                                        0197
         C     @15,SMWKSVLN(,SMWKPTR)                              0197
         BNL   @RF00197                                            0197
*                 SMDLRLEN=MAXLEN;  /* MAKE LENGTH MAXIMUM FOR NOW   */
         ST    @15,SMDLRLEN+656(,SMWKPTR)                          0198
*               ELSE                                               0199
*                 SMDLRLEN=SMWKSVLN;/* IF LENGTH NOT TOO BIG USE REAL
*                                      LENGTH                        */
         B     @RC00197                                            0199
@RF00197 L     @15,SMWKSVLN(,SMWKPTR)                              0199
         ST    @15,SMDLRLEN+656(,SMWKPTR)                          0199
*               RFY                                                0200
*                 R15 RSTD;                                        0200
@RC00197 DS    0H                                                  0201
*               CALL CHECKP;        /* MAKE SURE THE USER-SUPPLIED 0201
*                                      ADDRESS IS VALID BEFORE     0201
*                                      PUTTING THIS SUMDUMP RECORD IN
*                                      THE OUTPUT BUFFER             */
         BAL   @14,CHECKP                                          0201
*               IF R15=ZERO THEN    /* IF RANGE CAN BE ACCESSED      */
         LTR   R15,R15                                             0202
         BNZ   @RF00202                                            0202
*                 CALL OUTPUTP;     /* PUT THE SUMLIST RANGE IN THE
*                                      DUMP                          */
         BAL   @14,OUTPUTP                                         0203
*               RFY                                                0204
*                 R15 UNRSTD;                                      0204
@RF00202 DS    0H                                                  0205
*               SMWKSVLN=SMWKSVLN-SMDLRLEN;/* FIND LEFT-OVER LENGTH  */
         LA    @15,656                                             0205
         ALR   @15,SMWKPTR                                         0205
         L     @12,SMDLRLEN(,@15)                                  0205
         L     @08,SMWKSVLN(,SMWKPTR)                              0205
         SLR   @08,@12                                             0205
         ST    @08,SMWKSVLN(,SMWKPTR)                              0205
*               SMDLRADR=SMDLRADR-SMDLRLEN;/* POINT TO NEXT PART OF
*                                      THIS SUMLIST RANGE    @ZA19201*/
         LCR   @12,@12                                             0206
         AL    @12,SMDLRADR(,@15)                                  0206
         ST    @12,SMDLRADR(,@15)                                  0206
*             END;                  /* END OF LOOP FOR MULTIPLE    0207
*                                      SEGMENTS                      */
@DE00196 L     @15,SMWKSVLN(,SMWKPTR)                              0207
         LTR   @15,@15                                             0207
         BP    @DL00196                                            0207
*           END;                    /* END OF BUILD HEADER FOR THIS
*                                      RANGE                         */
*         IF LASTADDR(SMWKIDX1)=ON THEN/* IF PROCESSING LAST RANGE   */
@RF00191 LH    @15,SMWKIDX1(,SMWKPTR)                              0209
         SLA   @15,3                                               0209
         ALR   @15,WORKREGB                                        0209
         AL    @15,@CF03177                                        0209
         TM    LASTADDR-4(@15),B'10000000'                         0209
         BNO   @RF00209                                            0209
*           LASTSW=ON;              /* END RANGE LOOP                */
         OI    LASTSW(SMWKPTR),B'10000000'                         0210
*         ELSE                                                     0211
*           SMWKIDX1=SMWKIDX1+ONE;  /* UPDATE INDEX AND CONTINUE LOOP*/
         B     @RC00209                                            0211
@RF00209 LA    @15,1                                               0211
         AH    @15,SMWKIDX1(,SMWKPTR)                              0211
         STH   @15,SMWKIDX1(,SMWKPTR)                              0211
*       END;                        /* END RANGE VALID--TRY TO MOVE
*                                      IT                            */
*                                                                  0213
*     /***************************************************************/
*     /*                                                             */
*     /* PARMLIST IS INVALID--PUT OUT ERROR HEADER AND END THE LOOP  */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0213
*     ELSE                                                         0213
*SSERTYBP:                          /* LABEL BRANCHED TO IF SUMLISTP
*                                      ABENDS (BAD SUMLIST PARMLIST) */
*       DO;                                                        0213
         B     @RC00188                                            0213
@RF00188 DS    0H                                                  0213
SSERTYBP DS    0H                                                  0214
*         ERRRETRY=ADDR(SSERTY10);  /* GET NEXT RETRY LOCATION     0214
*                                      ADDRESS                       */
         LA    @15,SSERTY10                                        0214
         ST    @15,ERRRETRY(,ERR6WPTR)                             0214
*         SMDLRLEN=ZERO;            /* GIVE ZERO TOTAL LENGTH        */
         SLR   @15,@15                                             0215
         LA    @12,656                                             0215
         ALR   @12,SMWKPTR                                         0215
         ST    @15,SMDLRLEN(,@12)                                  0215
*         SMDLRADR=ZERO;            /* GIVE ZERO AREA ADDRESS        */
         ST    @15,SMDLRADR(,@12)                                  0216
*         SMDLRMSG=SMDLSTER;        /* INDICATE SUMDUMP LIST IN ERROR*/
         MVI   SMDLRMSG(@12),X'01'                                 0217
*         CALL OUTPUTP;             /* PUT ERROR RECORD IN BUFFER    */
         BAL   @14,OUTPUTP                                         0218
*         LASTSW=ON;                /* END PROCESS ALL RANGE LOOP    */
         OI    LASTSW(SMWKPTR),B'10000000'                         0219
*       END;                        /* END OF RANGE IS INVALID       */
*   END;                            /* END OF PROCESS ALL STORAGE  0221
*                                      RANGES                        */
@RC00188 DS    0H                                                  0221
@DE00186 TM    LASTSW(SMWKPTR),B'10000000'                         0221
         BZ    @DL00186                                            0221
*   RFY                                                            0222
*     STORLIST BASED;                                              0222
*   RETNREG=SUMLISTS;               /* RESTORE CALLER'S RETURN     0223
*                                      ADDRESS BEFORE RETURN         */
         L     RETNREG,SUMLISTS(,SMWKPTR)                          0223
*   END SUMLISTP;                                                  0224
@EL00003 DS    0H                                                  0224
@EF00003 DS    0H                                                  0224
@ER00003 BR    @14                                                 0224
*                                                                  0225
*/********************************************************************/
*/*                                                                  */
*/*INTERNAL PROCEDURE NAME-                                          */
*/*          RTM2P                                                   */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          DUMP THE RTM2WA AND STORAGE POINTED TO BY FAILURE       */
*/*          REGISTERS SAVED IN RTM2WA                               */
*/*                                                                  */
*/*CALLERS-                                                          */
*/*          THE MAINLINE CODE IN THIS MODULE                        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0225
*RTM2P:                                                            0225
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0225
RTM2P    DS    0H                                                  0226
*   RTM2S=RETNREG;                  /* SAVE RETURN ADDRESS BECAUSE 0226
*                                      LATER CALL WILL DESTROY IT    */
         ST    RETNREG,RTM2S(,SMWKPTR)                             0226
*   TCBPTR=ASXBFTCB;                /* GET FIRST TCB ON TCB QUEUE FOR
*                                      THIS ADDRESS SPACE            */
*                                                                  0227
         L     @15,ASCBPTR                                         0227
         L     @15,ASXBPTR(,@15)                                   0227
         L     @15,ASXBFTCB(,@15)                                  0227
         ST    @15,TCBPTR(,SMWKPTR)                                0227
*   /*****************************************************************/
*   /*                                                               */
*   /* LOOP TO PROCESS EACH TCB ON THE TCBTCB QUEUE IN THIS ADDRESS  */
*   /* SPACE                                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0228
*   DO WHILE TCBPTR^=0;                                            0228
         B     @DE00228                                            0228
@DL00228 DS    0H                                                  0229
*     RTM2PTR=TCBRTWA;              /* ADDRESS OF FIRST RTM2WA ON  0229
*                                      QUEUE IS IN THE TCB           */
         L     @15,TCBPTR(,SMWKPTR)                                0229
         L     @15,TCBRTWA(,@15)                                   0229
         ST    @15,RTM2PTR(,SMWKPTR)                               0229
*     IF RTM2PTR^=ZERO THEN         /* IF CURRENT TCB HAS AT LEAST 0230
*                                      ONE RTM2WA                    */
         SLR   @12,@12                                             0230
         CR    @15,@12                                             0230
         BE    @RF00230                                            0230
*       DO;                                                        0231
*                                                                  0231
*         /***********************************************************/
*         /*                                                         */
*         /* LOOP TO PROCESS EACH RTM2WA (AND ASSOCIATED STORAGE) ON */
*         /* THE RTM2PREV QUEUE OFF A FAILURE'S TCB                  */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0232
*         DURTM2SW=ON;              /* INDICATE AT LEAST ONE RTM2WA
*                                      EXISTS (AND WILL BE DUMPED) 0232
*                                                            @ZA19201*/
         OI    DURTM2SW(SMWKPTR),B'00100000'                       0232
*         SMWKREGN=ZERO;            /* INITIALIZE COUNTER TO INDICATE
*                                      NO PSWS OR REGISTERS SAVED  0233
*                                      FROM RTM2WA'S                 */
         STH   @12,SMWKREGN(,SMWKPTR)                              0233
*         DO RTM2INDX=ONE TO LOOPMAX WHILE(RTM2PTR^=ZERO);/* CONTINUE
*                                      LOOPING UNTIL RUN OUT OF    0234
*                                      RTM2WA'S ON RTM2PREV QUEUE. 0234
*                                      ALSO END THE LOOP IF REACH  0234
*                                      MAXIMUM NUMBER OF RTM2WA'S TO
*                                      PUT IN DUMP. (HAVE A MAXIMUM
*                                      TO AVOID AN INFINITE LOOP IF A
*                                      RTM2PREV POINTER IS BAD.)     */
*                                                                  0234
         LA    @15,1                                               0234
         STC   @15,RTM2INDX(,SMWKPTR)                              0234
@DL00234 L     @15,RTM2PTR(,SMWKPTR)                               0234
         LTR   @15,@15                                             0234
         BZ    @DC00234                                            0234
*           /*********************************************************/
*           /*                                                       */
*           /* PUT EACH RTM2WA IN THE SUMMARY DUMP                   */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0235
*           SMDLRID=SMDRTM2A;       /* INITIALIZE RECORD ID          */
         LA    @12,656                                             0235
         ALR   @12,SMWKPTR                                         0235
         MVC   SMDLRID(2,@12),@CH02410                             0235
*           SMDLRLEN=LENGTH(RTM2WA);/* INITIALIZE TOTAL LENGTH OF  0236
*                                      RECORD                        */
         MVC   SMDLRLEN(4,@12),@CF03166                            0236
*           SMDLRADR=ADDR(RTM2WA);  /* SAVE VIRTUAL ADDRESS OF RTM2WA*/
         ST    @15,SMDLRADR(,@12)                                  0237
*           CALL OUTPUTP;           /* PUT THIS RECORD IN THE DUMP.
*                                      NOTE--DON'T CHECK FOR VALID 0238
*                                      'RTM2' PREFIX ON THE CONTROL
*                                      BLOCK BECAUSE WANT BAD INFO 0238
*                                      DUMPED IN CASE IT IS NEEDED TO
*                                      SOLVE THE PROBLEM.            */
*                                                                  0238
         BAL   @14,OUTPUTP                                         0238
*           /*********************************************************/
*           /*                                                       */
*           /* DUMP STORAGE AREA POINTED TO BY THE PSW FROM TIME OF  */
*           /* ERROR (RTM2NXT1 FIELD IN THIS RTM2WA)                 */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0239
*           SMDLRID=SMDPSWS;        /* PUT PSW VALUE ID IN HDR     0239
*                                                            @ZA19201*/
         LA    @15,656                                             0239
         ALR   @15,SMWKPTR                                         0239
         MVC   SMDLRID(2,@15),@CH02335                             0239
*           SMDLRLEN=RTM2ILC1+MAXINSTR;/* PUT AREA LENGTH IN HEADER  */
         L     @12,RTM2PTR(,SMWKPTR)                               0240
         SLR   @08,@08                                             0240
         IC    @08,RTM2ILC1(,@12)                                  0240
         LA    @02,6                                               0240
         ALR   @02,@08                                             0240
         ST    @02,SMDLRLEN(,@15)                                  0240
*           SMDLRADR=RTM2NXT1-RTM2ILC1;/* DUMP INSTRUCTION BEFORE  0241
*                                      ADDRESS FROM EC PSW AT TIME OF
*                                      ERROR AND INSTRUCTION AT ADDR
*                                      FROM PSW                      */
         LCR   @08,@08                                             0241
         AL    @08,RTM2NXT1(,@12)                                  0241
         ST    @08,SMDLRADR(,@15)                                  0241
*           RFY                                                    0242
*             R15 RSTD;             /* NOTE-PUT OUT SHORT COPY OF PSW
*                                      AREA HERE IN CASE THE 2K PSW
*                                      AREA (DUMPED LATER) CAN'T BE
*                                      DUMPED. ALSO WANT A PSW AREA
*                                      IMMEDIATELY FOLLOWING THE   0242
*                                      RTM2WA FOR FASTER LOOKUP.     */
*           CALL CHECKP;            /* CHECK DATA ADDRESS BEFORE   0243
*                                      PUTTING RECORD IN OUTPUT    0243
*                                      BUFFER                        */
         BAL   @14,CHECKP                                          0243
*           IF R15=ZERO THEN        /* IF ADDRESS IS GOOD            */
         LTR   R15,R15                                             0244
         BNZ   @RF00244                                            0244
*             CALL OUTPUTP;         /* COPY THIS AREA TO BUFFER      */
         BAL   @14,OUTPUTP                                         0245
*           ELSE                    /* IF COULDN'T ACCESS THE ADDRESS*/
*             DO;                                                  0246
         B     @RC00244                                            0246
@RF00244 DS    0H                                                  0247
*               SMDLRLEN=RTM2ILC1;  /* PUT JUST PSW INSTR LENGTH IN
*                                      HDR                           */
         LA    @12,656                                             0247
         ALR   @12,SMWKPTR                                         0247
         L     @08,RTM2PTR(,SMWKPTR)                               0247
         SLR   @02,@02                                             0247
         IC    @02,RTM2ILC1(,@08)                                  0247
         ST    @02,SMDLRLEN(,@12)                                  0247
*               IF SMDLRLEN=ZERO THEN                              0248
         LTR   @02,@02                                             0248
         BNZ   @RF00248                                            0248
*                 SMDLRLEN=MAXINSTR;/* IF HAVE ZERO INSTRUCTION    0249
*                                      LENGTH, DEFAULT TO MAXIMUM  0249
*                                      INSTR LENGTH          @ZA19201*/
         MVC   SMDLRLEN(4,@12),@CF01075                            0249
*               SMDLRADR=RTM2NXT1;  /* PUT JUST PSW INSTR ADDR IN HDR*/
@RF00248 L     @12,RTM2PTR(,SMWKPTR)                               0250
         L     @12,RTM2NXT1(,@12)                                  0250
         ST    @12,SMDLRADR+656(,SMWKPTR)                          0250
*               CALL CHECKP;        /* CHECK THIS ADDRESS AND LENGTH */
         BAL   @14,CHECKP                                          0251
*               IF R15^=ZERO THEN   /* IF THIS ADDRESS IS BAD      0252
*                                                            @ZA19201*/
         LTR   R15,R15                                             0252
         BZ    @RF00252                                            0252
*                 BADADRSW=ON;      /* TELL OUTPUTP          @ZA19201*/
         OI    BADADRSW(SMWKPTR),B'00000010'                       0253
*               CALL OUTPUTP;       /* COPY THIS RECORD TO THE BUFFER
*                                                            @ZA19201*/
@RF00252 BAL   @14,OUTPUTP                                         0254
*             END;                                                 0255
*           RFY                                                    0256
*             R15 UNRSTD;           /*                       @ZA19201*/
@RC00244 DS    0H                                                  0257
*                                                                  0257
*           /*********************************************************/
*           /*                                                       */
*           /* PUT ANY SAVED TRACE TABLE (POINTED TO FROM RTM2WA) IN */
*           /* THE SUMMARY DUMP                                      */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0257
*           IF RTM2TRTB^=ZERO&RTM2TRLN^=ZERO THEN                  0257
         SLR   @15,@15                                             0257
         L     @12,RTM2PTR(,SMWKPTR)                               0257
         L     @08,RTM2TRTB(,@12)                                  0257
         CR    @08,@15                                             0257
         BE    @RF00257                                            0257
         L     @12,RTM2TRLN(,@12)                                  0257
         CR    @12,@15                                             0257
         BE    @RF00257                                            0257
*             DO;                   /*                       @ZA19201*/
*               TRRTM2SW=ON;        /* WON'T DUMP SYSTEM TRACE TABLE */
         OI    TRRTM2SW(SMWKPTR),B'00010000'                       0259
*               SMDLRID=SMDR2TRT;   /* PUT TRACE TABLE ID IN HEADER  */
         LA    @15,656                                             0260
         ALR   @15,SMWKPTR                                         0260
         MVC   SMDLRID(2,@15),@CH02327                             0260
*               SMDLRLEN=RTM2TRLN;  /* PUT LENGTH OF TRACE TABLE IN
*                                      HEADER                @ZA19201*/
         ST    @12,SMDLRLEN(,@15)                                  0261
*               SMDLRADR=RTM2TRTB;  /* OBTAIN TRACE TABLE START ADDR
*                                                            @ZA19201*/
         ST    @08,SMDLRADR(,@15)                                  0262
*               CALL OUTPUTP;       /* COPY TRACE TABLE TO THE BUFFER*/
         BAL   @14,OUTPUTP                                         0263
*             END;                                                 0264
*                                                                  0264
*           /*********************************************************/
*           /*                                                       */
*           /* SAVE ADDRESSES OF UNIQUE AREAS POINTED TO BY PSW AND  */
*           /* REGISTERS IN RTM2WA                                   */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0265
*           IF SMWKREGN<DIM(SMWKSREG) THEN/* IF ROOM LEFT TO SAVE  0265
*                                      ADDRS                         */
@RF00257 LH    @15,SMWKREGN(,SMWKPTR)                              0265
         C     @15,@CF00091                                        0265
         BNL   @RF00265                                            0265
*             DO;                                                  0266
*               SMWKREGN=SMWKREGN+ONE;/* UPDATE SAVED ADDR COUNT     */
         LA    @12,1                                               0267
         ALR   @15,@12                                             0267
         STH   @15,SMWKREGN(,SMWKPTR)                              0267
*               SMWKSREG(SMWKREGN)=RTM2NXT1;/* SAVE ADDR FROM PSW AT
*                                      TIME OF ERROR                 */
         SLA   @15,2                                               0268
         L     @08,RTM2PTR(,SMWKPTR)                               0268
         L     @02,RTM2NXT1(,@08)                                  0268
         ST    @02,SMWKSREG-4(@15,SMWKPTR)                         0268
*               WORKREGA=ADDR(RTM2EREG);/* GET ADDRESS OF GENERAL  0269
*                                      PURPOSE REGISTERS AT TIME OF
*                                      ERROR                         */
         LA    WORKREGA,RTM2EREG(,@08)                             0269
*               RFY                                                0270
*                 REGARRAY BASED(WORKREGA);/* MAP THE INPUT REGISTER
*                                      SAVE AREA                     */
*               DO SMWKIDX1=ONE TO NUMREGS;/* SAVE ALL UNIQUE      0271
*                                      CONTENTS IN SMWK              */
         STH   @12,SMWKIDX1(,SMWKPTR)                              0271
@DL00271 DS    0H                                                  0272
*                 DUPREGSW=OFF;     /* INITIALIZE DUP/SKIP FLAG      */
         NI    DUPREGSW(SMWKPTR),B'10111111'                       0272
*                 DO SMWKIDX2=ONE TO SMWKREGN WHILE(DUPREGSW=OFF);/*
*                                      LOOP, CHECK NEW REGISTER    0273
*                                      AGAINST ALL SAVED REGS OR   0273
*                                      UNTIL A DUPLICATE IS FOUND    */
         LA    @15,1                                               0273
         B     @DE00273                                            0273
@DL00273 TM    DUPREGSW(SMWKPTR),B'01000000'                       0273
         BNZ   @DC00273                                            0273
*                   IF REGVALUE(SMWKIDX1)=SMWKSREG(SMWKIDX2)/* IS  0274
*                                      THIS A DUP REG                */
*                     THEN                                         0274
         LH    @15,SMWKIDX1(,SMWKPTR)                              0274
         SLA   @15,2                                               0274
         LH    @12,SMWKIDX2(,SMWKPTR)                              0274
         SLA   @12,2                                               0274
         AL    @15,@CF03177                                        0274
         L     @15,REGVALUE-1(@15,WORKREGA)                        0274
         LA    @15,0(,@15)                                         0274
         C     @15,SMWKSREG-4(@12,SMWKPTR)                         0274
         BNE   @RF00274                                            0274
*                     DUPREGSW=ON;  /* INDICATE DUP SO IT IS NOT   0275
*                                      SAVED                         */
         OI    DUPREGSW(SMWKPTR),B'01000000'                       0275
*                   ELSE                                           0276
*                     IF REGVALUE(SMWKIDX1)<=HALFPAGE/* IS REG     0276
*                                      CONTENT <=2K          @ZA26680*/
*                       THEN                                       0276
         B     @RC00274                                            0276
@RF00274 LH    @15,SMWKIDX1(,SMWKPTR)                              0276
         SLA   @15,2                                               0276
         ALR   @15,WORKREGA                                        0276
         AL    @15,@CF03183                                        0276
         CLC   REGVALUE-1(3,@15),@CF02986+1                        0276
         BH    @RF00276                                            0276
*                       DUPREGSW=ON;/* YES - DON'T SAVE IT (DON'T  0277
*                                      WANT TO DUMP STORAGE IF     0277
*                                      REGISTER WAS USED FOR COUNTER)*/
         OI    DUPREGSW(SMWKPTR),B'01000000'                       0277
*                 END;              /* END DUP LOOP FOR ALL SAVED  0278
*                                      REGS                          */
@RF00276 DS    0H                                                  0278
@RC00274 LA    @15,1                                               0278
         AH    @15,SMWKIDX2(,SMWKPTR)                              0278
@DE00273 STH   @15,SMWKIDX2(,SMWKPTR)                              0278
         CH    @15,SMWKREGN(,SMWKPTR)                              0278
         BNH   @DL00273                                            0278
@DC00273 DS    0H                                                  0279
*                 IF DUPREGSW=OFF THEN/* IF NEW VALUE IS OK THEN SAVE
*                                      IT                            */
         TM    DUPREGSW(SMWKPTR),B'01000000'                       0279
         BNZ   @RF00279                                            0279
*                   DO;             /* SAVE NEW REG - UPDATE COUNTER */
*                     IF SMWKREGN<DIM(SMWKSREG) THEN/* LAST SLOT   0281
*                                      FULL?                         */
         LH    @15,SMWKREGN(,SMWKPTR)                              0281
         C     @15,@CF00091                                        0281
         BNL   @RF00281                                            0281
*                       DO;         /* NO....                @ZA26680*/
*                         SMWKREGN=SMWKREGN+ONE;/* BUMP TO NEXT SLOT
*                                                            @ZA26680*/
         AL    @15,@CF00076                                        0283
         STH   @15,SMWKREGN(,SMWKPTR)                              0283
*                         SMWKSREG(SMWKREGN)=REGVALUE(SMWKIDX1);/* 0284
*                                      SAVE                  @ZA26680*/
         SLA   @15,2                                               0284
         LH    @12,SMWKIDX1(,SMWKPTR)                              0284
         SLA   @12,2                                               0284
         AL    @12,@CF03177                                        0284
         L     @12,REGVALUE-1(@12,WORKREGA)                        0284
         LA    @12,0(,@12)                                         0284
         ST    @12,SMWKSREG-4(@15,SMWKPTR)                         0284
*                       END;        /* END.... REG SAVE CODE @ZA26680*/
*                     ELSE          /* YES....               @ZA26680*/
*                       DO;         /* NO SLOTS LEFT         @ZA26680*/
         B     @RC00281                                            0286
@RF00281 DS    0H                                                  0287
*                         SMWKIDX1=NUMREGS;/* INNER LOOP EXIT FORCE
*                                                            @ZA26680*/
         MVC   SMWKIDX1(2,SMWKPTR),@CH00064                        0287
*                       END;        /* END.... NO ROOM LEFT  @ZA26680*/
*                   END;            /* END OF NEW VALUE SAVED        */
@RC00281 DS    0H                                                  0290
*               END;                /* END OF SAVE ALL UNIQUE      0290
*                                      CONTENTS                      */
@RF00279 LA    @12,1                                               0290
         AH    @12,SMWKIDX1(,SMWKPTR)                              0290
         STH   @12,SMWKIDX1(,SMWKPTR)                              0290
         C     @12,@CF00064                                        0290
         BNH   @DL00271                                            0290
*             END;                  /* END OF IF ROOM LEFT TO SAVE 0291
*                                      ADDRS                         */
*           RTM2PTR=RTM2PREV;       /* POINT TO NEXT RTM2WA ON TCB'S
*                                      QUEUE                         */
@RF00265 L     @15,RTM2PTR(,SMWKPTR)                               0292
         L     @15,RTM2PREV(,@15)                                  0292
         ST    @15,RTM2PTR(,SMWKPTR)                               0292
*         END;                      /* END OF LOOP TO PROCESS EACH 0293
*                                      RTM2WA FOR THIS TCB           */
*                                                                  0293
         LA    @15,1                                               0293
         SLR   @12,@12                                             0293
         IC    @12,RTM2INDX(,SMWKPTR)                              0293
         ALR   @15,@12                                             0293
         STC   @15,RTM2INDX(,SMWKPTR)                              0293
         C     @15,@CF02365                                        0293
         BNH   @DL00234                                            0293
@DC00234 DS    0H                                                  0294
*         /***********************************************************/
*         /*                                                         */
*         /* DUMP STORAGE AREAS (FOR ALL RTM2WA'S FOR THIS TCB)      */
*         /* POINTED TO BY ALL SAVED PSW AND REGISTER VALUES FROM    */
*         /* TIME OF ERROR                                           */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0294
*         SMDLRLEN=HALFPAGE;        /* PUT AREA LENGTH IN HEADER     */
         MVC   SMDLRLEN+656(4,SMWKPTR),@CF02986                    0294
*         DO SMWKIDX1=ONE TO SMWKREGN WHILE(ENDSW=OFF);/* DUMP 2K +
*                                      AND - ALL SAVED PSW AND     0295
*                                      REGISTER VALUES               */
         LA    @15,1                                               0295
         B     @DE00295                                            0295
@DL00295 TM    ENDSW(SMWKPTR),B'00001000'                          0295
         BNZ   @DC00295                                            0295
*           IF SMWKIDX1=ONE THEN    /* PUT PSW VALUE ID IN HEADER IF
*                                      THIS IS THE FIRST SAVED VALUE */
         CLC   SMWKIDX1(2,SMWKPTR),@CH00076                        0296
         BNE   @RF00296                                            0296
*             SMDLRID=SMDPSWS;                                     0297
         MVC   SMDLRID+656(2,SMWKPTR),@CH02335                     0297
*           ELSE                    /* FOR OTHER SAVED VALUES PUT  0298
*                                      REGISTER ID IN THE HEADER     */
*             SMDLRID=SMDREGV;                                     0298
         B     @RC00296                                            0298
@RF00296 MVC   SMDLRID+656(2,SMWKPTR),@CH00998                     0298
*           IF SMWKSREG(SMWKIDX1)>=LOLIM THEN/* IF NOT LOW STORAGE 0299
*                                      ADDR (PSW SAVED VALUES COULD
*                                      BE < 2K)                      */
@RC00296 LA    @15,2048                                            0299
         LH    @12,SMWKIDX1(,SMWKPTR)                              0299
         SLA   @12,2                                               0299
         L     @12,SMWKSREG-4(@12,SMWKPTR)                         0299
         CR    @12,@15                                             0299
         BL    @RF00299                                            0299
*             DO;                                                  0300
*               SMDLRADR=SMWKSREG(SMWKIDX1)-LOLIM;/* DUMP SAVED VALUE
*                                      MINUS 2K                      */
         SLR   @12,@15                                             0301
         ST    @12,SMDLRADR+656(,SMWKPTR)                          0301
*               RFY                                                0302
*                 R15 RSTD;                                        0302
*               CALL CHECKP;        /* CHECK DATA ADDRESS BEFORE   0303
*                                      PUTTING RECORD IN OUTPUT    0303
*                                      BUFFER                        */
         BAL   @14,CHECKP                                          0303
*               IF R15=ZERO THEN    /* IF ADDRESS IS GOOD            */
         LTR   R15,R15                                             0304
         BNZ   @RF00304                                            0304
*                 CALL OUTPUTP;     /* COPY THIS AREA TO BUFFER      */
         BAL   @14,OUTPUTP                                         0305
*               ELSE                /* IF ADDRESS IS BAD             */
*                 DO;                                              0306
         B     @RC00304                                            0306
@RF00304 DS    0H                                                  0307
*                   SMDLRLEN=SHORTLN;/* USE SHORTER LENGTH           */
         MVC   SMDLRLEN+656(4,SMWKPTR),@CF02984                    0307
*                   CALL CHECKP;    /* CHECK AGAIN                   */
         BAL   @14,CHECKP                                          0308
*                   IF R15^=ZERO THEN/* IF THE ADDRESS RANGE IS STILL
*                                      BAD                           */
         LTR   R15,R15                                             0309
         BZ    @RF00309                                            0309
*                     DO;           /*                       @ZA19201*/
*                       BADADRSW=ON;/* TELL OUTPUTP CAN'T DUMP THE 0311
*                                      ADDRESS RANGE         @ZA19201*/
         OI    BADADRSW(SMWKPTR),B'00000010'                       0311
*                       SMDLRLEN=HALFPAGE;/* GIVE DESIRED LENGTH   0312
*                                                            @ZA19201*/
         MVC   SMDLRLEN+656(4,SMWKPTR),@CF02986                    0312
*                     END;          /*                       @ZA19201*/
*                   CALL OUTPUTP;   /* COPY RECORD TO BUFFER         */
@RF00309 BAL   @14,OUTPUTP                                         0314
*                   SMDLRLEN=HALFPAGE;/* RESET TO DEFAULT LENGTH     */
         MVC   SMDLRLEN+656(4,SMWKPTR),@CF02986                    0315
*                 END;                                             0316
*               RFY                                                0317
*                 R15 UNRSTD;                                      0317
@RC00304 DS    0H                                                  0318
*             END;                                                 0318
*           SMDLRADR=SMWKSREG(SMWKIDX1);/* DUMP STARTING AT THE SAVED
*                                      PSW OR REGISTER VALUE         */
@RF00299 LH    @15,SMWKIDX1(,SMWKPTR)                              0319
         SLA   @15,2                                               0319
         L     @15,SMWKSREG-4(@15,SMWKPTR)                         0319
         ST    @15,SMDLRADR+656(,SMWKPTR)                          0319
*           RFY                                                    0320
*             R15 RSTD;                                            0320
*           CALL CHECKP;            /* CHECK DATA ADDRESS BEFORE   0321
*                                      PUTTING RECORD IN OUTPUT    0321
*                                      BUFFER                        */
         BAL   @14,CHECKP                                          0321
*           IF R15=ZERO THEN        /* IF ADDRESS IS GOOD            */
         LTR   R15,R15                                             0322
         BNZ   @RF00322                                            0322
*             CALL OUTPUTP;         /* COPY THIS AREA TO BUFFER      */
         BAL   @14,OUTPUTP                                         0323
*           ELSE                    /* IF ADDRESS IS BAD             */
*             DO;                                                  0324
         B     @RC00322                                            0324
@RF00322 DS    0H                                                  0325
*               SMDLRLEN=SHORTLN;   /* USE SHORTER LENGTH            */
         MVC   SMDLRLEN+656(4,SMWKPTR),@CF02984                    0325
*               CALL CHECKP;        /* CHECK AGAIN                   */
         BAL   @14,CHECKP                                          0326
*               IF R15^=ZERO THEN   /* IF THE ADDRESS RANGE IS STILL
*                                      BAD                           */
         LTR   R15,R15                                             0327
         BZ    @RF00327                                            0327
*                 DO;               /*                       @ZA19201*/
*                   BADADRSW=ON;    /* TELL OUTPUTP CAN'T DUMP THE 0329
*                                      ADDRESS RANGE         @ZA19201*/
         OI    BADADRSW(SMWKPTR),B'00000010'                       0329
*                   SMDLRLEN=HALFPAGE;/* GIVE DESIRED LENGTH @ZA19201*/
         MVC   SMDLRLEN+656(4,SMWKPTR),@CF02986                    0330
*                 END;              /*                       @ZA19201*/
*               CALL OUTPUTP;       /* COPY RECORD TO BUFFER         */
@RF00327 BAL   @14,OUTPUTP                                         0332
*               SMDLRLEN=HALFPAGE;  /* RESET TO DEFAULT LENGTH       */
         MVC   SMDLRLEN+656(4,SMWKPTR),@CF02986                    0333
*             END;                                                 0334
*           RFY                                                    0335
*             R15 UNRSTD;                                          0335
@RC00322 DS    0H                                                  0336
*         END;                      /* END OF DO LOOP TO DUMP PSW AND
*                                      REGISTER AREAS                */
         LA    @15,1                                               0336
         AH    @15,SMWKIDX1(,SMWKPTR)                              0336
@DE00295 STH   @15,SMWKIDX1(,SMWKPTR)                              0336
         CH    @15,SMWKREGN(,SMWKPTR)                              0336
         BNH   @DL00295                                            0336
@DC00295 DS    0H                                                  0337
*       END;                        /* END OF IF TCB HAS AT LEAST ONE
*                                      RTM2WA                        */
*                                                                  0337
*     /***************************************************************/
*     /*                                                             */
*     /* END OF PROCESSING RTM2WA'S FOR THIS TCB - GET ADDRESS OF    */
*     /* NEXT TCB IN THE ADDRESS SPACE                               */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0338
*     TCBPTR=TCBTCB;                /* GET ADDRESS OF NEXT TCB       */
@RF00230 L     @15,TCBPTR(,SMWKPTR)                                0338
         L     @15,TCBTCB(,@15)                                    0338
         ST    @15,TCBPTR(,SMWKPTR)                                0338
*   END;                            /* END OF DO WHILE TCBPTR^=0     */
@DE00228 L     @15,TCBPTR(,SMWKPTR)                                0339
         LTR   @15,@15                                             0339
         BNZ   @DL00228                                            0339
*   RFY                                                            0340
*     REGARRAY BASED;                                              0340
*   RETNREG=RTM2S;                  /* RESTORE CALLER'S RETURN     0341
*                                      ADDRESS BEFORE RETURN         */
         L     RETNREG,RTM2S(,SMWKPTR)                             0341
*   END RTM2P;                                                     0342
@EL00004 DS    0H                                                  0342
@EF00004 DS    0H                                                  0342
@ER00004 BR    @14                                                 0342
*                                                                  0343
*/********************************************************************/
*/*                                                                  */
*/*INTERNAL PROCEDURE NAME-                                          */
*/*          TRACEP                                                  */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          DUMP THE SUPERVISOR TRACE TABLE                         */
*/*                                                                  */
*/*CALLERS-                                                          */
*/*          THE MAINLINE CODE IN THIS MODULE                        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0343
*TRACEP:                                                           0343
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0343
TRACEP   DS    0H                                                  0344
*   TRACES=RETNREG;                 /* SAVE RETURN ADDRESS BECAUSE 0344
*                                      CALL WILL DESTROY IT          */
         ST    RETNREG,TRACES(,SMWKPTR)                            0344
*   IF CVTSDTRC=ON THEN             /* IF SDUMP STOPPED (ACTIVE)   0345
*                                      SUPERVISOR TRACE TABLE      0345
*                                                            @ZA19201*/
         L     @15,CVTPTR                                          0345
         TM    CVTSDTRC(@15),B'00000001'                           0345
         BNO   @RF00345                                            0345
*     DO;                           /* (DON'T TEST RTCTASTR BECAUSE
*                                      DUMP TRACE TABLE EVEN WHEN TRT
*                                      OPTION NOT REQUESTED) @ZA19201*/
*       SMDLRID=SMDTRT;             /* PUT TRACE TABLE ID IN HEADER  */
         LA    @15,656                                             0347
         ALR   @15,SMWKPTR                                         0347
         MVC   SMDLRID(2,@15),@CH00052                             0347
*       SMDLRLEN=(TRTEND+LENGTH(TRTENTY)-FLCTRACE);/* PUT LENGTH OF
*                                      TRACE TABLE IN HEADER         */
         L     @12,FLCTRACE                                        0348
         LA    @08,32                                              0348
         AL    @08,TRTEND(,@12)                                    0348
         SLR   @08,@12                                             0348
         ST    @08,SMDLRLEN(,@15)                                  0348
*       SMDLRADR=FLCTRACE;          /* OBTAIN TRACE TABLE START    0349
*                                      ADDRESS                       */
         ST    @12,SMDLRADR(,@15)                                  0349
*       CALL OUTPUTP;               /* COPY TRACE TABLE TO THE BUFFER*/
         BAL   @14,OUTPUTP                                         0350
*     END;                          /* END OF IF SDUMP STOPPED     0351
*                                      (ACTIVE) SUPV. TRACE TABLE  0351
*                                                            @ZA19201*/
*   RETNREG=TRACES;                 /* RESTORE CALLER'S RETURN     0352
*                                      ADDRESS BEFORE RETURN         */
@RF00345 L     RETNREG,TRACES(,SMWKPTR)                            0352
*   END TRACEP;                                                    0353
@EL00005 DS    0H                                                  0353
@EF00005 DS    0H                                                  0353
@ER00005 BR    @14                                                 0353
*                                                                  0354
*/********************************************************************/
*/*                                                                  */
*/*INTERNAL PROCEDURE NAME-                                          */
*/*          CLEANUPP                                                */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          EITHER WRITE END OF SUMMARY DUMP RECORD OR WRITE NULL   */
*/*          RECORD FOR REST OF SUMMARY DUMP(IF OTHER ASIDS WILL BE  */
*/*          DUMPED)                                                 */
*/*                                                                  */
*/*CALLERS-                                                          */
*/*          THE MAINLINE CODE IN THIS MODULE                        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0354
*CLEANUPP:                                                         0354
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0354
*                                                                  0354
CLEANUPP DS    0H                                                  0355
*/*A-30700533-30726133                                       @ZA19201*/
*                                                                  0355
*   CLEANUPS=RETNREG;               /* SAVE RETURN ADDRESS BECAUSE 0355
*                                      LATER CALLS WILL DESTROY IT   */
*                                                                  0355
         ST    RETNREG,CLEANUPS(,SMWKPTR)                          0355
*   /*****************************************************************/
*   /*                                                               */
*   /* DON'T CREATE ASID HEADER IF NO OTHER SUMDUMP DATA EXISTS FOR  */
*   /* THIS ADDRESS SPACE AND THIS IS A MULTIPLE ADDRESS SPACE DUMP  */
*   /* (DON'T WANT TO CREATE UNNECESSARY 4K SDUMP OUTPUT RECORD)     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0356
*   IF SMDLRID=SMDASIDR             /* IF LAST RECORD ID WAS FOR ASID
*                                      HDR                           */
*       &RTCTSDNA>1 THEN            /* AND HAVE MULTIPLE ADDR SPACE
*                                      DUMP                          */
         CLC   SMDLRID+656(2,SMWKPTR),@CH02414                     0356
         BNE   @RF00356                                            0356
         L     @15,CVTPTR                                          0356
         L     @15,CVTRTMCT(,@15)                                  0356
         CLI   RTCTSDNA(@15),1                                     0356
         BNH   @RF00356                                            0356
*     BUFFPTR=ADDR(PRDDATA);        /* RESET BUFFER POINTER TO     0357
*                                      BEGINNING OF BUFFER.        0357
*                                      NOTE--DON'T WANT ASID HDR FOR
*                                      LAST ASID IN MULTIPLE ADDR  0357
*                                      SPACE DUMP, EVEN THOUGH     0357
*                                      WOULDN'T CREATE EXTRA SDUMP 0357
*                                      RECORD, BECAUSE DON'T PROVIDE
*                                      THIS OUTPUT FOR EARLIER ASIDS
*                                      IN THE DUMP                   */
*                                                                  0357
         L     @15,PRDINPTR(,SDWKPTR)                              0357
         LA    @15,PRDDATA(,@15)                                   0357
         ST    @15,BUFFPTR(,SMWKPTR)                               0357
*   /*****************************************************************/
*   /*                                                               */
*   /* IF HAD OTHER DATA, OR IF THIS IS A SINGLE ADDRESS SPACE DUMP, */
*   /* CREATE MESSAGE 'NO RTM2 WORK AREAS EXIST FOR THIS ASID' IF    */
*   /* NEEDED                                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0358
*   ELSE                                                           0358
*     IF DURTM2SW=OFF THEN          /* IF DIDN'T DUMP ANY RTM2WA   0358
*                                                            @ZA19201*/
         B     @RC00356                                            0358
@RF00356 TM    DURTM2SW(SMWKPTR),B'00100000'                       0358
         BNZ   @RF00358                                            0358
*       DO;                         /*                       @ZA19201*/
*         SMDLRID=SMDNULL;          /* PUT OUT EMPTY RECORD SO ANY 0360
*                                      PREVIOUS RECORD IN THE BUFFER
*                                      IS PROCESSED BEFORE THE     0360
*                                      FOLLOWING MSG         @ZA19201*/
         LA    @15,656                                             0360
         ALR   @15,SMWKPTR                                         0360
         MVC   SMDLRID(2,@15),@CH02412                             0360
*         SMDLRLEN=ZERO;            /* NO DATA               @ZA19201*/
         SLR   @12,@12                                             0361
         ST    @12,SMDLRLEN(,@15)                                  0361
*         SMDLRADR=ZERO;            /* NO DATA ADDRESS       @ZA19201*/
         ST    @12,SMDLRADR(,@15)                                  0362
*         SMDLRMSG=SMDNORT2;        /* WANT MESSAGE 'NO RTM2 WORK  0363
*                                      AREAS EXIST FOR THIS ASID'  0363
*                                                            @ZA19201*/
         MVI   SMDLRMSG(@15),X'02'                                 0363
*         CALL OUTPUTP;             /* PUT THIS RECORD IN OUTPUT   0364
*                                      BUFFER                @ZA19201*/
         BAL   @14,OUTPUTP                                         0364
*       END;                        /*                       @ZA19201*/
*                                                                  0365
*   /*****************************************************************/
*   /*                                                               */
*   /* COUNT NUMBER OF ADDRESS SPACES LEFT TO DUMP                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0366
*   WORKREGA=ZERO;                  /* INITIALIZE COUNTER OF NUMBER
*                                      OF ADDRESS SPACES LEFT TO DUMP*/
@RF00358 DS    0H                                                  0366
@RC00356 SLR   WORKREGA,WORKREGA                                   0366
*   DO WORKREGB=1 TO RTCTSDNA;      /* LOOP THROUGH TABLE FOR ASIDS
*                                      REQUESTED ON SDUMP MACRO      */
         LA    WORKREGB,1                                          0367
         B     @DE00367                                            0367
@DL00367 DS    0H                                                  0368
*     IF RTCTSDDO(WORKREGB)=OFF THEN/* IF A DUMP WAS NOT ATTEMPTED 0368
*                                      FOR THIS ASID                 */
         LR    @15,WORKREGB                                        0368
         SLA   @15,2                                               0368
         L     @12,CVTPTR                                          0368
         L     @12,CVTRTMCT(,@12)                                  0368
         ALR   @12,@15                                             0368
         TM    RTCTSDDO-4(@12),B'00000001'                         0368
         BNZ   @RF00368                                            0368
*       WORKREGA=WORKREGA+ONE;      /* UPDATE COUNTER                */
         AL    WORKREGA,@CF00076                                   0369
*   END;                            /* END OF DO LOOP THROUGH ASID 0370
*                                      TABLE                         */
*                                                                  0370
@RF00368 AL    WORKREGB,@CF00076                                   0370
@DE00367 L     @15,CVTPTR                                          0370
         L     @15,CVTRTMCT(,@15)                                  0370
         SLR   @12,@12                                             0370
         IC    @12,RTCTSDNA(,@15)                                  0370
         CR    WORKREGB,@12                                        0370
         BNH   @DL00367                                            0370
*   /*****************************************************************/
*   /*                                                               */
*   /* IF ONLY ONE ASID (THIS ONE) REMAINS TO HAVE A DUMP TAKEN, PUT */
*   /* AN 'END OF SUMMARY DUMP' RECORD IN THE DUMP                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0371
*   IF WORKREGA<=ONE THEN                                          0371
         C     WORKREGA,@CF00076                                   0371
         BH    @RF00371                                            0371
*     DO;                                                          0372
*       SMDLRID=SMDEOD;             /* RECORD ID IS 'END OF SUMMARY
*                                      DUMP RECORD'                  */
         LA    @15,656                                             0373
         ALR   @15,SMWKPTR                                         0373
         MVC   SMDLRID(2,@15),@CH02416                             0373
*       SMDLRLEN=ZERO;                                             0374
         SLR   @12,@12                                             0374
         ST    @12,SMDLRLEN(,@15)                                  0374
*       SMDLRADR=ZERO;                                             0375
         ST    @12,SMDLRADR(,@15)                                  0375
*       CALL OUTPUTP;               /* PUT THIS RECORD IN THE DUMP   */
         BAL   @14,OUTPUTP                                         0376
*     END;                          /* END OF IF ONLY ONE ASID     0377
*                                      REMAINS                       */
*                                                                  0377
*   /*****************************************************************/
*   /*                                                               */
*   /* IF WILL DUMP MORE ASIDS (AND HAVE SOME DATA IN THE BUFFER),   */
*   /* PUT A NULL RECORD IN THE REST OF THE BUFFER TO FORCE WRITING  */
*   /* OF THE BUFFER BY OUTPUTP (THE AMDPRDMP SERVICE AID'S SUMDUMP  */
*   /* FORMATTER WILL SKIP NULL RECORDS)                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0378
*   ELSE                                                           0378
*     DO;                                                          0378
         B     @RC00371                                            0378
@RF00371 DS    0H                                                  0379
*       IF BUFFPTR^=ADDR(PRDDATA) THEN/* IF HAVE A BUFFER PARTLY FULL
*                                      OF DATA                       */
         L     @15,BUFFPTR(,SMWKPTR)                               0379
         L     @12,PRDINPTR(,SDWKPTR)                              0379
         LA    @12,PRDDATA(,@12)                                   0379
         CR    @15,@12                                             0379
         BE    @RF00379                                            0379
*         DO;                       /* CREATE NULL RECORD            */
*           SMDLRID=SMDNULL;        /* RECORD ID IS FOR EMPTY RECORD */
         LA    @12,656                                             0381
         ALR   @12,SMWKPTR                                         0381
         MVC   SMDLRID(2,@12),@CH02412                             0381
*           SMDLRLEN=ENDBUFF-BUFFPTR;/* GET REMAINING AREA           */
         LCR   @15,@15                                             0382
         AL    @15,ENDBUFF(,SMWKPTR)                               0382
         ST    @15,SMDLRLEN(,@12)                                  0382
*           IF SMDLRLEN>=LENGTH(SMDLRHDR) THEN/* IF RECORD HEADER  0383
*                                      WILL FIT IN BUFFER            */
         LA    @08,20                                              0383
         CR    @15,@08                                             0383
         BL    @RF00383                                            0383
*             SMDLRLEN=SMDLRLEN-LENGTH(SMDLRHDR);/* ALLOW ROOM FOR 0384
*                                      HEADER IN BUFFER              */
         SLR   @15,@08                                             0384
         ST    @15,SMDLRLEN(,@12)                                  0384
*           ELSE                    /* IF MUST CONTINUE HEADER INTO
*                                      NEXT BUFFER                   */
*             SMDLRLEN=SMDLRLEN+LENGTH(PRDDATA)-LENGTH(SMDLRHDR);/*
*                                      INCLUDE DATA LENGTH FOR NEXT
*                                      BUFFER                        */
         B     @RC00383                                            0385
@RF00383 LA    @15,656                                             0385
         ALR   @15,SMWKPTR                                         0385
         L     @12,SMDLRLEN(,@15)                                  0385
         SL    @12,@CF03167                                        0385
         ST    @12,SMDLRLEN(,@15)                                  0385
*           SMDLRADR=ZERO;                                         0386
@RC00383 SLR   @15,@15                                             0386
         ST    @15,SMDLRADR+656(,SMWKPTR)                          0386
*           CALL OUTPUTP;           /* PUT THIS RECORD IN THE DUMP   */
         BAL   @14,OUTPUTP                                         0387
*         END;                      /* END OF IF HAVE BUFFER PART  0388
*                                      FULL                          */
*       SMWKPSSE=PSEUDOAD;          /* SAVE PSEUDO ADDRESS FOR NEXT
*                                      PART OF ENABLED SUMMARY DUMP
*                                                            @ZM45052*/
@RF00379 L     @15,PRDINPTR(,SDWKPTR)                              0389
         L     @15,PSEUDOAD(,@15)                                  0389
         ST    @15,SMWKPSSE(,SMWKPTR)                              0389
*     END;                          /* END OF IF WILL DUMP MORE ASIDS*/
*   RETNREG=CLEANUPS;               /* RESTORE RETURN ADDRESS        */
@RC00371 L     RETNREG,CLEANUPS(,SMWKPTR)                          0391
*   END CLEANUPP;                                                  0392
@EL00006 DS    0H                                                  0392
@EF00006 DS    0H                                                  0392
@ER00006 BR    @14                                                 0392
*                                                                  0393
*/********************************************************************/
*/*                                                                  */
*/*INTERNAL PROCEDURE NAME-                                          */
*/*          CHECKP                                                  */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          REFERENCE THE FIRST AND LAST BYTES OF THE AREA          */
*/*          SPECIFIED WITH THE INPUT ADDRESS AND LENGTH TO ENSURE   */
*/*          THAT THE AREA IS ADDRESSABLE                            */
*/*                                                                  */
*/*INPUT-                                                            */
*/*          SMDLRLEN--NON-ZERO LENGTH OF STORAGE AREA               */
*/*                                                                  */
*/*INPUT-                                                            */
*/*          SMDLRADR--ADDRESS OF STORAGE AREA                       */
*/*                                                                  */
*/*OUTPUT-                                                           */
*/*          R15=0 IF THE AREA IS ADDRESSABLE                        */
*/*                                                                  */
*/*OUTPUT-                                                           */
*/*          R15=4 IF THE AREA IS NOT ADDRESSABLE                    */
*/*                                                                  */
*/*CALLERS-                                                          */
*/*          THE SUMLISTP AND RTM2P INTERNAL PROCEDURES              */
*/*                                                                  */
*/********************************************************************/
*                                                                  0393
*CHECKP:                                                           0393
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0393
CHECKP   DS    0H                                                  0394
*   RFY                                                            0394
*     RETNREG RSTD;                 /* DON'T WANT PLS2 TO USE RETURN
*                                      REGISTER (R14) FOR WORK     0394
*                                      REGISTER                      */
*   SAVEREGA=WORKREGA;              /* SAVE CALLER'S WORKREGA VALUE
*                                      BECAUSE CHECKP WILL USE IT    */
         ST    WORKREGA,SAVEREGA(,SMWKPTR)                         0395
*   SAVEREGB=WORKREGB;              /* SAVE CALLER'S WORKREGB VALUE  */
*                                                                  0396
         ST    WORKREGB,SAVEREGB(,SMWKPTR)                         0396
*   /*****************************************************************/
*   /*                                                               */
*   /* FIRST USE LRA INSTRUCTION TO SEE IF ADDRESSING THE AREA WOULD */
*   /* CAUSE A SEGMENT EXCEPTION                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0397
*   WORKREGB=SMDLRADR+SMDLRLEN-ONE; /* GET ADDRESS OF LAST BYTE OF 0397
*                                      AREA TO BE CHECKED            */
         LA    @15,656                                             0397
         ALR   @15,SMWKPTR                                         0397
         L     WORKREGB,SMDLRADR(,@15)                             0397
         AL    WORKREGB,SMDLRLEN(,@15)                             0397
         BCTR  WORKREGB,0                                          0397
*   GEN(LRA WORKREGA,0(WORKREGB))                                  0398
*   SETS(WORKREGA) REFS(WORKREGB);  /* CHECK VALIDITY OF ADDRESS     */
         LRA WORKREGA,0(WORKREGB)
*   BC(LRACC1,SSERTYBA);            /* BRANCH TO ERROR ROUTINE IF BAD
*                                      SEGMENT ADDRESS               */
         BC    4,SSERTYBA                                          0399
*   WORKREGB=SMDLRADR;              /* GET ADDRESS OF FIRST BYTE OF
*                                      AREA TO BE CHECKED            */
         L     WORKREGB,SMDLRADR+656(,SMWKPTR)                     0400
*   GEN(LRA WORKREGA,0(WORKREGB))                                  0401
*   SETS(WORKREGA) REFS(WORKREGB);  /* CHECK VALIDITY OF ADDRESS     */
         LRA WORKREGA,0(WORKREGB)
*   BC(LRACC1,SSERTYBA);            /* BRANCH TO ERROR ROUTINE IF BAD
*                                      SEGMENT ADDRESS               */
*                                                                  0402
         BC    4,SSERTYBA                                          0402
*   /*****************************************************************/
*   /*                                                               */
*   /* IF NO SEGMENT EXCEPTION, REFERENCE THE AREA TO CHECK FOR PAGE */
*   /* EXCEPTION                                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0403
*   ERRFRR='1'B;                    /* INDICATE FRR IS ACTIVE      0403
*                                                            @ZA27227*/
         OI    ERRFRR(ERR6WPTR),B'10000000'                        0403
*   RFY                                                            0404
*     R14SAVE RSTD;                 /* RESTRICT REG FROM PLS @ZA27227*/
*   R14SAVE=RETNREG;                /* SAVE REG 14 ACROSS SETLOCK  0405
*                                                            @ZA27227*/
         LR    R14SAVE,RETNREG                                     0405
*   GEN REFS(ADDRFRR,PSALITA,PSACSTK,PSA,FRRSCURR,FRRSLAST,PSALSFCC,
*       FRRS,FRRSFRRA,FRRSENTR,FRRSPARM);                          0406
*                                         /*GET RECOVERY FRR @ZA27227*/
GETLOCKM   SETLOCK   OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=SAVE,          X
               RELATED=(SVCDUMP,IEAVTSSE(TSSEFREE))          @ZA27227
             SETFRR A,FRRAD=ADDRFRR,                                   X
               PARMAD=(R3),WRKREGS=(R10,R11)                 @ZA27227
*   RETNREG=R14SAVE;                /* RESTORE REG 14        @ZA27227*/
         LR    RETNREG,R14SAVE                                     0407
*   RFY                                                            0408
*     R14SAVE UNRSTD;               /* ALLOW PLS TO USE REG  @ZA27227*/
*   ERRWORK=ERRORWK;                /* FILL FRR 6 WDS CURR STATUS  0409
*                                                            @ZA27227*/
         MVC   ERRWORK(24,ERR6WPTR),ERRORWK(SDWKPTR)               0409
*   ERRLLOCK='1'B;                  /* INDICATE LOCAL LOCK IS HELD 0410
*                                                            @ZA27227*/
         OI    ERRLLOCK(ERR6WPTR),B'00000010'                      0410
*   ERRRETRY=ADDR(SSERTYBA);        /* SET RETRY ADDRESS FOR       0411
*                                      ADDRESSING ERROR              */
         LA    @15,SSERTYBA                                        0411
         ST    @15,ERRRETRY(,ERR6WPTR)                             0411
*   RFY                                                            0412
*     R15 RSTD;                     /*                       @ZA19201*/
*   R15=SMDLRADR->DATAAREA;         /* USE R15 AS A WORK REGISTER TO
*                                      CHECK THAT THE FIRST BYTE OF
*                                      THE AREA CAN BE ADDRESSED   0413
*                                                            @ZA19201*/
         LA    @12,656                                             0413
         ALR   @12,SMWKPTR                                         0413
         L     @08,SMDLRADR(,@12)                                  0413
         SLR   R15,R15                                             0413
         IC    R15,DATAAREA(,@08)                                  0413
*   R15=(SMDLRADR+SMDLRLEN-ONE)->DATAAREA;/* CHECK THAT THE LAST BYTE
*                                      OF THE AREA CAN BE ADDRESSED
*                                                            @ZA19201*/
         AL    @08,SMDLRLEN(,@12)                                  0414
         BCTR  @08,0                                               0414
         SLR   R15,R15                                             0414
         IC    R15,DATAAREA(,@08)                                  0414
*   R15=ZERO;                       /* SET GOOD RETURN CODE IF NO  0415
*                                      ADDRESSING PROBLEM WAS FOUND  */
         SLR   R15,R15                                             0415
*CHECKEND:                          /* CLEANUP FOR CHECKP INTERNAL 0416
*                                      PROC                          */
*   RFY                                                            0416
*    (R14SAVE,                                                     0416
*     R15SAVE) RSTD;                /* RESTRICT REGS FROM PLS      0416
*                                                            @ZA27227*/
CHECKEND DS    0H                                                  0417
*   R14SAVE=RETNREG;                /* SAVE R14 ACROSS MACRO @ZA27227*/
         LR    R14SAVE,RETNREG                                     0417
*   R15SAVE=R15;                    /* SAVE R15 ACROSS MACRO @ZA27227*/
         LR    R15SAVE,R15                                         0418
*   GEN REFS(PSACSTK,PSALITA,PSA,FRRS,FRRSCURR,FRRSEMP,FRRSELEN);  0419
    SETFRR D,WRKREGS=(R10,R11)                               @ZA27227
TSSEFREE SETLOCK RELEASE,TYPE=LOCAL,REGS=SAVE,                         X
               RELATED=(SVCDUMP,IEAVTSSE(GETLOCKM))          @ZA27227
*   RETNREG=R14SAVE;                /* RESTORE REG 14        @ZA27227*/
         LR    RETNREG,R14SAVE                                     0420
*   RFY                                                            0421
*     R14SAVE UNRSTD;               /* ALLOW PLS TO USE REG  @ZA27227*/
*   R3=ADDR(ERRORWK);               /* ESTAE WORKAREA ADDRESSABILITY
*                                                            @ZA27227*/
         LA    R3,ERRORWK(,SDWKPTR)                                0422
*   ERRFRR='0'B;                    /* BACK TO THE ESTAE METHOD    0423
*                                                            @ZA27227*/
         NI    ERRFRR(ERR6WPTR),B'01111111'                        0423
*   WORKREGA=SAVEREGA;              /* RESTORE SAVED WORK REGISTER   */
         L     WORKREGA,SAVEREGA(,SMWKPTR)                         0424
*   WORKREGB=SAVEREGB;              /* RESTORE SAVED WORK REGISTER   */
         L     WORKREGB,SAVEREGB(,SMWKPTR)                         0425
*   R15=R15SAVE;                    /* RESTORE REG 15        @ZA27227*/
         LR    R15,R15SAVE                                         0426
*   RFY                                                            0427
*     R15SAVE UNRSTD;               /* RETURN REG TO PLS     @ZA27227*/
*   RETURN;                         /* RETURN TO CALLER - RETURN CODE
*                                      IS ALREADY IN R15             */
*                                                                  0428
@EL00007 DS    0H                                                  0428
@EF00007 DS    0H                                                  0428
@ER00007 BR    @14                                                 0428
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING ERROR ROUTINE IS ENTERED FOR A BAD ADDRESS. IT  */
*   /* IS EITHER BRANCHED TO (AFTER AN LRA INSTRUCTION) OR RETRIED TO*/
*   /* (AFTER AN 0C4 ABEND WHEN TRIED TO REFERENCE THE DATA AREA).   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0429
*SSERTYBA:                                                         0429
*   R15=BADADDR;                    /* SET RETURN CODE FOR BAD     0429
*                                      ADDRESS OF AREA               */
SSERTYBA LA    R15,4                                               0429
*   IF NORCDSW=ON THEN              /* IF NO RECORDING IS WANTED   0430
*                                                            @ZA19201*/
         TM    NORCDSW(SMWKPTR),B'00000100'                        0430
         BNO   @RF00430                                            0430
*     ERRNORCD=ON;                  /* INDICATE NO LOGREC RECORDING
*                                      IS NEEDED (MUST RESET BIT   0431
*                                      BECAUSE SDUMP'S ESTAE TURNS 0431
*                                      THE BIT OFF WHEN IT IS ENTERED
*                                      FOR AN ABEND)         @ZM45191*/
         OI    ERRNORCD(ERR6WPTR),B'00000010'                      0431
*   GO TO CHECKEND;                 /* USE COMMON CLEANUP CODE FOR 0432
*                                      THIS INTERNAL PROC            */
         B     CHECKEND                                            0432
*   RFY                                                            0433
*     R15 UNRSTD;                                                  0433
*   RFY                                                            0434
*     RETNREG UNRSTD;                                              0434
*   END CHECKP;                                                    0435
*                                                                  0436
*/********************************************************************/
*/*                                                                  */
*/*INTERNAL PROCEDURE NAME-                                          */
*/*          OUTPUTP                                                 */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          COPY DUMP RECORDS TO THE OUTPUT BUFFER AND CALLWRITEP   */
*/*          WHEN THE BUFFER IS FULL OR THE END OF SUMMARY DUMP      */
*/*          RECORD IS WRITTEN                                       */
*/*                                                                  */
*/*INPUT-                                                            */
*/*          THE SMDLRID,SMDLRLEN,AND SMDLRADR FIELDS IN SMWKHEAD    */
*/*          MUST BE INITIALIZED BY THE CALLER.THE SMDLRMSG FIELD    */
*/*          CAN BE INITIALIZED BY THE CALLER.ALSO THE BADADRSW BIT  */
*/*          CAN BE SET BY THE CALLER TO INDICATE THAT SPECIAL       */
*/*          RECORD HEADERS ARE NEEDED.THE SMDLRPL FIELD MUST BE     */
*/*          ZERO.                                                   */
*/*                                                                  */
*/*OUTPUT-                                                           */
*/*          THE SMDLR HEADER AND ANY DATA IS COPIED TO THE OUTPUT   */
*/*          BUFFER AND THE BUFFER IS WRITTEN IF IT WAS FULL OR IF   */
*/*          AN END OF SUMMARY DUMP RECORD ID IS IN SMWKHEAD.THE     */
*/*          SMDLRPL AND SMDLRMSG FIELDS IN SMWKHEAD ARE RESET TO    */
*/*          ZEROS AND THE SMDLRID,SMDLRLEN,AND SMDLRADR FIELDS      */
*/*          CONTAIN THE INPUT VALUES.                               */
*/*                                                                  */
*/*CALLERS-                                                          */
*/*          THE ASIDP,SUMLISTP,RTM2P,TRACEP,AND CLEANUPP INTERNAL   */
*/*          PROCEDURES                                              */
*/*                                                                  */
*/********************************************************************/
*                                                                  0436
*OUTPUTP:                                                          0436
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0436
OUTPUTP  DS    0H                                                  0437
*                                                                  0437
*/*  *****************************************************************
*    *  SUMMARY OF INPUT AND OUTPUT FOR OUTPUTP INTERNAL PROC:       *
*    *****************************************************************
*    *                                                               *
*    *  SMWKHEAD CONTAINS THE SMDLRHDR INFORMATION THAT IS           *
*    *  THE INPUT TO THIS INTERNAL PROCEDURE.  (SMDLRPL IS NOT       *
*    *  INPUT -- IT IS SET IN THIS INTERNAL PROCEDURE.)              *
*    *                                                               *
*    *                                    +2                         *
*    *  SMWKHEAD  =  +0 ×----------------------------------------    *
*    *                  × SMDLRID           ×   (RSVD)          ×    *
*    *               +4 ×---------------------------------------×    *
*    *                  × SMDLRLEN                              ×    *
*    *               +8 ×----------------------------------------    *
*    *                  × SMDLRADR                              ×  0437
*    *               +C ×----------------------------------------    *
*    *                  × SMDLRPL                               ×    *
*    *              +10 ×---------------------------------------×    *
*    *                  × SMDLRMSG   ×       (RSVD)             ×    *
*    *                  ×---------------------------------------×    *
*    *                                                       @ZA25122*
*    *                                                               *
*    *  THE SMDLRHDR AND ANY DATA POINTED TO BY SMDLRADR WILL BE     *
*    *  COPIED INTO THE 4104 BYTE OUTPUT BUFFER USED BY SVC DUMP:    *
*    *                                                               *
*    *                          +1        +2                         *
*    *  SDSMBUFF ->  +0 -----------------------------------------    *
*    *                  × PRDKEY1 × PRDKEY2 × PRDASID           ×    *
*    *               +4 ×---------------------------------------×    *
*    *                  × PSEUDOAD                              ×    *
*    *               +8 ×---------------------------------------×    *
*    *                  ×                   .                   ×    *
*    *                  ×                   .                   ×    *
*    *                  ×                   .                   ×    *
*    *  BUFFPTR  ->  +? ×---------------------------------------×    *
*    *                  × SMDLRHDR (20 BYTES -- SEE SMWKHEAD)   ×    *
*    *             +?+C ×---------------------------------------×    *
*    *                  × SMDLRDAT (VARIABLE LENGTH)            ×    *
*    *                  -----------------------------------------    *
*    *                                                               *
*    *                                                               *
*    *  EXAMPLE:    +0    0000FFFA                                   *
*    *              +8    00080000  (THE WRITEP INTERNAL PROC WILL   *
*    *                               INCREASE THIS BY '1000'X AFTER  *
*    *                               EACH BUFFER IS WRITTEN... )     *
*    *                                  00081000...00082000... ETC.  *
*    *                                                               *
*    *              +?    00043238  (SMDLRID = 4 AND SMDLRLEN = 3238)*
*    *              +?+8  00FCF940  (SMDLRADR = 'FCF940'X)           *
*    *              +?+10 32380000  (SMDLPL = SMDLRLEN AND REST = 0) *
*    *              +?+14 00FCFE20  (VARIABLE LENGTH SMDLRDAT        *
*    *                    00FCF960   FOLLOWS... THIS IS THE SYSTEM   *
*    *                        .      TRACE TABLE                     *
*    *                        .                                      *
*    *                        .                                      *
*    *****************************************************************/
*                                                                  0437
*                                                                  0437
*   /*****************************************************************/
*   /*                                                               */
*   /* FIRST, COPY SUMMARY DUMP RECORD HEADER INTO OUTPUT BUFFER     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0437
*   IF ENDSW=OFF THEN               /* IF NO TERMINATING ERROR WAS 0437
*                                      FOUND WHILE DOING PRIOR WRITE
*                                      TO THE DUMP DATA SET          */
         TM    ENDSW(SMWKPTR),B'00001000'                          0437
         BNZ   @RF00437                                            0437
*     DO;                                                          0438
*       OUTPUTS=RETNREG;            /* SAVE RETURN ADDRESS BECAUSE 0439
*                                      LATER CALL WILL DESTROY IT    */
         ST    RETNREG,OUTPUTS(,SMWKPTR)                           0439
*       SAVELRLN=SMDLRLEN;          /* SAVE LOGICAL RECORD LENGTH  0440
*                                      BECAUSE SET ZERO LENGTH IF  0440
*                                      CAN'T ACCESS DATA     @ZA19201*/
         LA    @15,656                                             0440
         ALR   @15,SMWKPTR                                         0440
         L     @12,SMDLRLEN(,@15)                                  0440
         ST    @12,SAVELRLN(,SMWKPTR)                              0440
*       SAVERADR=SMDLRADR;          /* SAVE LOGICAL RECORD ADDRESS 0441
*                                      BECAUSE SET ZERO ADDRESS IF 0441
*                                      CAN'T ACCESS DATA     @ZA19201*/
         L     @08,SMDLRADR(,@15)                                  0441
         ST    @08,SAVERADR(,SMWKPTR)                              0441
*       IF BADADRSW=OFF&            /* IF HAVE DATA TO BE COPIED   0442
*                                                            @ZA19201*/
*           SMDLRLEN>ZERO THEN      /* UPDATE RECORD HEADER BEFORE 0442
*                                      COPY HEADER TO BUFFER         */
         TM    BADADRSW(SMWKPTR),B'00000010'                       0442
         BNZ   @RF00442                                            0442
         LTR   @12,@12                                             0442
         BNP   @RF00442                                            0442
*         DO;                                                      0443
*           SMDLRLEN=(SMDLRLEN+THREE)&FULLWORD;/* ROUND TOTAL DATA 0444
*                                      LENGTH TO A FULL WORD BOUNDARY*/
         AL    @12,@CF02980                                        0444
         N     @12,@CF02993                                        0444
         ST    @12,SMDLRLEN(,@15)                                  0444
*           RFY                                                    0445
*             R15 RSTD;             /*                       @ZA19201*/
*           CALL CHECKP;            /* TRY TO ACCESS SMDLRADR      0446
*                                                            @ZA19201*/
         BAL   @14,CHECKP                                          0446
*           IF R15^=ZERO THEN       /* IF ACCESS FAILED      @ZA19201*/
         LTR   R15,R15                                             0447
         BZ    @RF00447                                            0447
*             BADADRSW=ON;          /* WILL PUT OUT ONLY HEADER    0448
*                                                            @ZA19201*/
         OI    BADADRSW(SMWKPTR),B'00000010'                       0448
*           ELSE                    /* IF DATA CAN BE ACCESSED     0449
*                                                            @ZA19201*/
*             SMDLRPL=SMDLRLEN;     /* SET PARTIAL RECORD LENGTH = 0449
*                                      TOTAL RECORD LENGTH   @ZA19201*/
         B     @RC00447                                            0449
@RF00447 LA    @12,656                                             0449
         ALR   @12,SMWKPTR                                         0449
         L     @08,SMDLRLEN(,@12)                                  0449
         ST    @08,SMDLRPL(,@12)                                   0449
*           RFY                                                    0450
*             R15 UNRSTD;           /*                       @ZA19201*/
@RC00447 DS    0H                                                  0451
*         END;                      /* END OF IF BADADRSW OFF      0451
*                                                            @ZA19201*/
*                                                                  0452
*/*  *****************************************************************
*    *                                                               *
*    *  IF COULDN'T ACCESS AN ADDRESS, CREATE TWO SPECIAL SMDLR      *
*    *  HEADER RECORDS TO FORCE AMDPRDMP'S SUMDUMP FORMATTER TO      *
*    *  ISSUE THE FOLLOWING MESSAGE:                                 *
*    *                                                               *
*    *    ++ SUMMARY DUMP RECORD DATA FROM <NNNN> TO <NNNN + LL - 1> *
*    *       UNAVAILABLE                                             *
*    *                                                               *
*    *****************************************************************
*    *                                                               *
*    *  THE TWO SPECIAL HEADER RECORDS CONTAIN THE FOLLOWING FIELDS  *
*    *  (BUT NOT IN THIS ORDER):                                     *
*    *                                                               *
*    *      SMDLRADR      SMDLRLEN    SMDLRPL                        *
*    *     -------------------------------------                     *
*    *     × NNNN      ×  LL       ×  0000     ×   FIRST RECORD      *
*    *     -------------------------------------                     *
*    *     × NNNN + LL ×  0000     ×  0000     ×   SECOND RECORD     *
*    *     -------------------------------------                     *
*    *                                                               *
*    *  NOTE- THE FIRST RECORD TELLS THE SUMDUMP FORMATTER THAT      *
*    *        DATA IS MISSING AT THE BEGINNING OF THE ADDRESS        *
*    *        RANGE (BECAUSE THE PARTIAL LENGTH IS ZERO) AND THE     *
*    *        SECOND RECORD TELLS THAT DATA IS MISSING IN THE REST   *
*    *        OF THE ADDRESS RANGE (BECAUSE PARTIAL LENGTH=ZERO      *
*    *        AND THE ADDRESS IS OUTSIDE THE FIRST RECORD'S RANGE).  *
*    *                                                               *
*    *****************************************************************/
*                                                                  0452
*       IF BADADRSW=ON THEN         /* IF DATA CAN'T BE ACCESSED   0452
*                                                            @ZA19201*/
@RF00442 TM    BADADRSW(SMWKPTR),B'00000010'                       0452
         BNO   @RF00452                                            0452
*         DO;                       /*                       @ZA19201*/
*           IF SMDLRLEN>ZERO THEN   /* IF HAVE DATA LENGTH   @ZA19201*/
         L     @15,SMDLRLEN+656(,SMWKPTR)                          0454
         LTR   @15,@15                                             0454
         BNP   @RF00454                                            0454
*             DO;                   /*                       @ZA19201*/
*               CALL HEADERP;       /* COPY HEADER, CONTAINING     0456
*                                      SMDLRLEN= ORIGINAL LENGTH AND
*                                      SMDLRPL=ZERO, TO OUTPUT BUFFER
*                                                            @ZA19201*/
         BAL   @14,HEADERP                                         0456
*               SMDLRADR=SMDLRADR+SMDLRLEN;/* GIVE ADDRESS PAST END
*                                      OF ORIGINAL REQUEST, TO TELL
*                                      SUMDUMP FORMATTER TO ISSUE MSG
*                                                            @ZA19201*/
         LA    @15,656                                             0457
         ALR   @15,SMWKPTR                                         0457
         L     @12,SMDLRADR(,@15)                                  0457
         AL    @12,SMDLRLEN(,@15)                                  0457
         ST    @12,SMDLRADR(,@15)                                  0457
*               SMDLRLEN=ZERO;      /* SET TOTAL LENGTH TO ZERO TO 0458
*                                      INDICATE CONTINUATION @ZA19201*/
         SLR   @12,@12                                             0458
         ST    @12,SMDLRLEN(,@15)                                  0458
*               BUFFPTR=ENDRCD+ONE; /* POINT TO NEXT FREE AREA IN THE
*                                      OUTPUT BUFFER         @ZA19201*/
         LA    @15,1                                               0459
         AL    @15,ENDRCD(,SMWKPTR)                                0459
         ST    @15,BUFFPTR(,SMWKPTR)                               0459
*             END;                  /* END OF IF HAVE DATA LEN     0460
*                                                            @ZA19201*/
*           BADADRSW=OFF;           /* DONE WITH SPECIAL LOGIC     0461
*                                                            @ZA19201*/
@RF00454 NI    BADADRSW(SMWKPTR),B'11111101'                       0461
*         END;                      /* END OF IF BADADRSW ON @ZA19201*/
*       CALL HEADERP;               /* COPY THIS RECORD HEADER TO  0463
*                                      OUTPUT BUFFER         @ZA19201*/
@RF00452 BAL   @14,HEADERP                                         0463
*                                                                  0464
*       /*************************************************************/
*       /*                                                           */
*       /* PROCESSING FOR RECORDS WITH DATA                          */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0464
*       IF SMDLRLEN>ZERO THEN       /* IF RECORD HAS DATA TO BE MOVED*/
         LA    @15,656                                             0464
         ALR   @15,SMWKPTR                                         0464
         L     @12,SMDLRLEN(,@15)                                  0464
         LTR   @12,@12                                             0464
         BNP   @RF00464                                            0464
*         DO;                       /* MAKE SURE HAVE ROOM IN BUFFER
*                                      FOR DATA--IF NO ROOM, JUST PUT
*                                      PART OF DATA IN THE BUFFER    */
*           SAVEREGA=WORKREGA;      /* SAVE WORKREGA BECAUSE MOVELP
*                                      WILL USE IT                   */
         ST    WORKREGA,SAVEREGA(,SMWKPTR)                         0466
*           SAVEREGB=WORKREGB;      /* SAVE WORKREGB BECAUSE MOVELP
*                                      WILL USE IT                   */
         ST    WORKREGB,SAVEREGB(,SMWKPTR)                         0467
*           ENDRCD=BUFFPTR+SAVEHDRL+SMDLRLEN-ONE;/* CALCULATE ADDRESS
*                                      OF END OF RECORD IN OUTPUT  0468
*                                      BUFFER                        */
         L     @08,BUFFPTR(,SMWKPTR)                               0468
         AL    @08,SAVEHDRL(,SMWKPTR)                              0468
         ALR   @08,@12                                             0468
         BCTR  @08,0                                               0468
         ST    @08,ENDRCD(,SMWKPTR)                                0468
*           IF ENDRCD<=ENDBUFF THEN /* IF ALL OF THE RECORD DATA WILL
*                                      FIT IN BUFFER                 */
         C     @08,ENDBUFF(,SMWKPTR)                               0469
         BH    @RF00469                                            0469
*             DO;                                                  0470
*                                                                  0470
*               /*****************************************************/
*               /*                                                   */
*               /* COPY RECORD DATA TO OUTPUT BUFFER                 */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0471
*               WORKREGA=SMDLRADR;  /* SET FROM ADDR FOR MOVE = DATA
*                                      ADDR                          */
         L     WORKREGA,SMDLRADR(,@15)                             0471
*               WORKREGB=SMDLRLEN;  /* SET FROM LENGTH FOR MOVE =  0472
*                                      TOTAL LENGTH OF RECORD DATA   */
         LR    WORKREGB,@12                                        0472
*               CALL MOVELP;        /* COPY RECORD DATA INTO OUTPUT
*                                      BUFFER (USE MVCL BECAUSE DATA
*                                      CAN BE LONGER THAN 256 BYTES) */
         BAL   @14,MOVELP                                          0473
*             END;                  /* END OF IF ALL RECORD DATA WILL
*                                      FIT                           */
*                                                                  0474
*           /*********************************************************/
*           /*                                                       */
*           /* PROCESSING FOR RECORDS WITH TOO MUCH DATA TO FIT IN   */
*           /* THE BUFFER                                            */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0475
*           ELSE                    /* IF ALL OF THE RECORD DATA   0475
*                                      WON'T FIT                     */
*             DO;                                                  0475
         B     @RC00469                                            0475
@RF00469 DS    0H                                                  0476
*               WORKREGA=SMDLRADR;  /* GET ADDRESS OF THE RECORD DATA*/
         LA    @15,656                                             0476
         ALR   @15,SMWKPTR                                         0476
         L     WORKREGA,SMDLRADR(,@15)                             0476
*               SAVEREML=SMDLRLEN;  /* SAVE AMOUNT OF DATA LEFT TO BE
*                                      MOVED                         */
         L     @15,SMDLRLEN(,@15)                                  0477
         ST    @15,SAVEREML(,SMWKPTR)                              0477
*               DO UNTIL(SAVEREML=ZERO);/* COPY DATA TO BUFFER AND 0478
*                                      WRITE THE BUFFER UNTIL ALL  0478
*                                      DATA IS PROCESSED             */
*                                                                  0478
@DL00478 DS    0H                                                  0479
*                 /***************************************************/
*                 /*                                                 */
*                 /* COPY THIS PART OF DATA TO OUTPUT BUFFER         */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0479
*                 WORKREGB=ENDBUFF-(BUFFPTR+SAVEHDRL)+ONE;/*       0479
*                                      CALCULATE HOW MUCH DATA WILL
*                                      FIT IN THE BUFFER     @ZM44931*/
         L     WORKREGB,BUFFPTR(,SMWKPTR)                          0479
         AL    WORKREGB,SAVEHDRL(,SMWKPTR)                         0479
         LCR   WORKREGB,WORKREGB                                   0479
         AL    WORKREGB,ENDBUFF(,SMWKPTR)                          0479
         AL    WORKREGB,@CF00076                                   0479
*                 IF WORKREGB>ZERO THEN/* IF HAVE ROOM FOR SOME DATA
*                                      IN THE BUFFER                 */
         LTR   WORKREGB,WORKREGB                                   0480
         BNP   @RF00480                                            0480
*                   DO;                                            0481
*                     SAVEREML=SAVEREML-WORKREGB;/* CALCULATE HOW  0482
*                                      MUCH DATA IS LEFT TO MOVE     */
         L     @15,SAVEREML(,SMWKPTR)                              0482
         SLR   @15,WORKREGB                                        0482
         ST    @15,SAVEREML(,SMWKPTR)                              0482
*                     CALL MOVELP;  /* COPY RECORD DATA INTO OUTPUT
*                                      BUFFER. (USE MVCL BECAUSE DATA
*                                      CAN BE LONGER THAN 256 BYTES.)
*                                      NOTE-- WORKREGA'S FROM ADDR IS
*                                      UPDATED BY THE MVCL.          */
         BAL   @14,MOVELP                                          0483
*                   END;            /* END OF IF HAVE ROOM FOR SOME
*                                      DATA                          */
*                 CALL WRITEP;      /* WRITE BUFFER TO DUMP DATA SET */
@RF00480 BAL   @14,WRITEP                                          0485
*                 ENDRCD=BUFFPTR+SAVEREML-ONE;/* CALCULATE ADDRESS OF
*                                      END OF RECORD IN EMPTIED    0486
*                                      OUTPUT BUFFER                 */
         L     @15,SAVEREML(,SMWKPTR)                              0486
         L     @12,BUFFPTR(,SMWKPTR)                               0486
         ALR   @12,@15                                             0486
         BCTR  @12,0                                               0486
         ST    @12,ENDRCD(,SMWKPTR)                                0486
*                 SAVEHDRL=ZERO;    /* DON'T COUNT HEADER LENGTH   0487
*                                      AFTER EMPTY FIRST BUFFER      */
*                                                                  0487
         SLR   @08,@08                                             0487
         ST    @08,SAVEHDRL(,SMWKPTR)                              0487
*                 /***************************************************/
*                 /*                                                 */
*                 /* COPY LAST PART OF DATA TO OUTPUT BUFFER         */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0488
*                 IF ENDRCD<=ENDBUFF THEN/* IF ALL OF THE REMAINING
*                                      DATA WILL FIT IN BUFFER       */
         C     @12,ENDBUFF(,SMWKPTR)                               0488
         BH    @RF00488                                            0488
*                   DO;                                            0489
*                     WORKREGB=SAVEREML;/* SET FROM LENGTH FOR MOVE =
*                                      REMAINING LENGTH              */
         LR    WORKREGB,@15                                        0490
*                     CALL MOVELP;  /* COPY RECORD DATA INTO OUTPUT
*                                      BUFFER (USE MVCL BECAUSE DATA
*                                      CAN BE LONGER THAN 256 BYTES) */
         BAL   @14,MOVELP                                          0491
*                     SAVEREML=ZERO;/* INDICATE END OF 'DO UNTIL'  0492
*                                      LOOP TO PROCESS DATA FOR    0492
*                                      RECORD                        */
         SLR   @15,@15                                             0492
         ST    @15,SAVEREML(,SMWKPTR)                              0492
*                   END;            /* END OF IF ALL REMAINING DATA
*                                      FITS                          */
*               END;                /* END OF 'DO UNTIL' LOOP TO   0494
*                                      PROCESS RECORD DATA           */
@RF00488 DS    0H                                                  0494
@DE00478 L     @15,SAVEREML(,SMWKPTR)                              0494
         LTR   @15,@15                                             0494
         BNZ   @DL00478                                            0494
*             END;                  /* END OF ELSE (RECORDS WITH TOO
*                                      MUCH DATA TO FIT IN THE     0495
*                                      BUFFER)                       */
*           WORKREGA=SAVEREGA;      /* RESTORE SAVED WORKREGA VALUE  */
@RC00469 L     WORKREGA,SAVEREGA(,SMWKPTR)                         0496
*           WORKREGB=SAVEREGB;      /* RESTORE SAVED WORKREGB VALUE  */
         L     WORKREGB,SAVEREGB(,SMWKPTR)                         0497
*         END;                      /* END OF IF SMDLRLEN > ZERO   0498
*                                      (RECORD WITH DATA)            */
*                                                                  0498
*       /*************************************************************/
*       /*                                                           */
*       /* WRITE THE OUTPUT BUFFER IF AT END OF SUMMARY DUMP OR IF NO*/
*       /* MORE RECORDS WILL FIT IN BUFFER                           */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0499
*       IF SMDLRID=SMDEOD×          /* IF HEADER FOR END OF SUMDUMP  */
*           ENDBUFF=ENDRCD THEN     /* OR IF NOT ENOUGH ROOM FOR   0499
*                                      ANOTHER RECORD IN THE BUFFER  */
@RF00464 CLC   SMDLRID+656(2,SMWKPTR),@CH02416                     0499
         BE    @RT00499                                            0499
         CLC   ENDBUFF(4,SMWKPTR),ENDRCD(SMWKPTR)                  0499
         BNE   @RF00499                                            0499
@RT00499 DS    0H                                                  0500
*         CALL WRITEP;              /* WRITE THE BUFFER TO THE DUMP
*                                      DATA SET                      */
         BAL   @14,WRITEP                                          0500
*       ELSE                        /* IF HAVE ROOM FOR ANOTHER    0501
*                                      RECORD                        */
*         BUFFPTR=ENDRCD+ONE;       /* POINT TO THE NEXT FREE AREA IN
*                                      THE OUTPUT BUFFER             */
         B     @RC00499                                            0501
@RF00499 LA    @15,1                                               0501
         AL    @15,ENDRCD(,SMWKPTR)                                0501
         ST    @15,BUFFPTR(,SMWKPTR)                               0501
*       SMDLRPL=ZERO;               /* PUT ZEROS IN THE NON-REUSED 0502
*                                      FIELDS OF THE SUMMARY DUMP  0502
*                                      HEADER FOR THE NEXT RECORD    */
@RC00499 LA    @15,656                                             0502
         ALR   @15,SMWKPTR                                         0502
         SLR   @12,@12                                             0502
         ST    @12,SMDLRPL(,@15)                                   0502
*       SMDLRMSG=ZERO;                                             0503
         MVI   SMDLRMSG(@15),X'00'                                 0503
*       SMDLRLEN=SAVELRLN;          /* RESTORE LOGICAL RECORD LENGTH
*                                                            @ZA19201*/
         L     @12,SAVELRLN(,SMWKPTR)                              0504
         ST    @12,SMDLRLEN(,@15)                                  0504
*       SMDLRADR=SAVERADR;          /* RESTORE LOGICAL RECORD ADDRESS
*                                                            @ZA19201*/
         L     @12,SAVERADR(,SMWKPTR)                              0505
         ST    @12,SMDLRADR(,@15)                                  0505
*       RETNREG=OUTPUTS;            /* RESTORE CALLER'S RETURN     0506
*                                      ADDRESS BEFORE RETURN         */
         L     RETNREG,OUTPUTS(,SMWKPTR)                           0506
*     END;                          /* END OF IF ENDSW = OFF         */
*   END OUTPUTP;                                                   0508
@EL00008 DS    0H                                                  0508
@EF00008 DS    0H                                                  0508
@ER00008 BR    @14                                                 0508
*                                                                  0509
*/********************************************************************/
*/*                                                                  */
*/*INTERNAL PROCEDURE NAME-                                          */
*/*          HEADERP                                                 */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          COPY RECORD HEADER TO THE OUTPUT BUFFER                 */
*/*                                                                  */
*/*INPUT-                                                            */
*/*          SMWKHEAD CONTAINING RECORD HEADER TO BE COPIED          */
*/*                                                                  */
*/*OUTPUT-                                                           */
*/*          RECORD HEADER COPIED TO BUFFAREA AND SAVEHDRL,ENDRCD    */
*/*          VALUES SET FOR LATER USE BY CALLER                      */
*/*                                                                  */
*/*CALLERS-                                                          */
*/*          THE OUTPUTP INTERNAL PROCEDURE                          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0509
*HEADERP:                                                          0509
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0509
*                                                                  0509
HEADERP  DS    0H                                                  0510
*/*A-40062133-40091233                                       @ZA19201*/
*                                                                  0510
*   HEADERS=RETNREG;                /* SAVE CALLER'S RETURN ADDRESS
*                                      BECAUSE LATER CALL WILL     0510
*                                      DESTROY IT                    */
         ST    RETNREG,HEADERS(,SMWKPTR)                           0510
*   ENDRCD=BUFFPTR+LENGTH(SMDLRHDR)-ONE;/* GET AMOUNT OF SPACE NEEDED
*                                      FOR THIS PART OF THE RECORD IN
*                                      THE BUFFER                    */
         L     @15,BUFFPTR(,SMWKPTR)                               0511
         LR    @12,@15                                             0511
         SL    @12,@CF03168                                        0511
         ST    @12,ENDRCD(,SMWKPTR)                                0511
*   IF ENDRCD<=ENDBUFF THEN         /* IF RECORD HEADER WILL ALL FIT
*                                      IN THE BUFFER                 */
         C     @12,ENDBUFF(,SMWKPTR)                               0512
         BH    @RF00512                                            0512
*     DO;                                                          0513
*       BUFFAREA(1:LENGTH(SMDLRHDR))=SMDLRHDR(1:LENGTH(SMDLRHDR)); 0514
         MVC   BUFFAREA(20,@15),SMDLRHDR+656(SMWKPTR)              0514
*       SAVEHDRL=LENGTH(SMDLRHDR);  /* SAVE HEADER LENGTH FOR USE IN
*                                      DATA COPYING LOGIC            */
         MVC   SAVEHDRL(4,SMWKPTR),@CF01906                        0515
*     END;                                                         0516
*   ELSE                            /* IF HEADER WON'T ALL FIT IN  0517
*                                      BUFFER                        */
*     DO;                           /* PROCESS IT IN PIECES          */
         B     @RC00512                                            0517
@RF00512 DS    0H                                                  0518
*       SAVEHDRL=ENDRCD-ENDBUFF;    /* CALCULATE WHAT PART OF THE  0518
*                                      HEADER WILL NOT FIT IN BUFFER */
         L     @15,ENDRCD(,SMWKPTR)                                0518
         SL    @15,ENDBUFF(,SMWKPTR)                               0518
         ST    @15,SAVEHDRL(,SMWKPTR)                              0518
*       TEMPSAVE=LENGTH(SMDLRHDR)-SAVEHDRL;/* CALCULATE HOW MUCH OF
*                                      THE HEADER TO COPY INTO THIS
*                                      BUFFER                        */
         LCR   @15,@15                                             0519
         AL    @15,@CF01906                                        0519
         ST    @15,TEMPSAVE(,SMWKPTR)                              0519
*       BUFFAREA(1:TEMPSAVE)=SMDLRHDR(1:TEMPSAVE);/* COPY FIRST PART
*                                      OF HEADER TO THE BUFFER       */
         L     @12,BUFFPTR(,SMWKPTR)                               0520
         BCTR  @15,0                                               0520
         EX    @15,@SM03185                                        0520
*       CALL WRITEP;                /* WRITE BUFFER, WHICH ENDS WITH
*                                      A PARTIAL RECORD HEADER, TO 0521
*                                      DUMP DATA SET. (WRITEP UPDATES
*                                      BUFFPTR.)                     */
         BAL   @14,WRITEP                                          0521
*       BUFFAREA(1:SAVEHDRL)=SMDLRHDR(TEMPSAVE+1:LENGTH(SMDLRHDR));/*
*                                      COPY REMAINING PART OF HEADER
*                                      TO THE EMPTIED BUFFER         */
         L     @15,BUFFPTR(,SMWKPTR)                               0522
         L     @12,SAVEHDRL(,SMWKPTR)                              0522
         LR    @08,@12                                             0522
         BCTR  @08,0                                               0522
         L     @02,TEMPSAVE(,SMWKPTR)                              0522
         ALR   @02,SMWKPTR                                         0522
         EX    @08,@SM03187                                        0522
*       ENDRCD=BUFFPTR+SAVEHDRL-ONE;/* OUTPUTP WILL USE THIS VALUE 0523
*                                      FOR UPDATING BUFFPTR IF RECORD
*                                      HAS NO DATA           @ZA19201*/
         ALR   @15,@12                                             0523
         BCTR  @15,0                                               0523
         ST    @15,ENDRCD(,SMWKPTR)                                0523
*     END;                          /* END OF ELSE TO PROCESS HEADER */
*   RETNREG=HEADERS;                /* RESTORE CALLER'S RETURN     0525
*                                      ADDRESS BEFORE RETURN         */
@RC00512 L     RETNREG,HEADERS(,SMWKPTR)                           0525
*   END HEADERP;                                                   0526
@EL00009 DS    0H                                                  0526
@EF00009 DS    0H                                                  0526
@ER00009 BR    @14                                                 0526
*                                                                  0527
*/********************************************************************/
*/*                                                                  */
*/*INTERNAL PROCEDURE NAME-                                          */
*/*          MOVELP                                                  */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          COPY DATA TO THE OUTPUT BUFFER.DATA LENGTH CAN BE       */
*/*          ALMOST 4K,SO MVCL IS NEEDED.                            */
*/*                                                                  */
*/*INPUT-                                                            */
*/*          WORKREGA=FROM ADDR                                      */
*/*                                                                  */
*/*INPUT-                                                            */
*/*          WORKREGB=FROM LENGTH                                    */
*/*                                                                  */
*/*OUTPUT-                                                           */
*/*          DATA COPIED TO BUFFAREA                                 */
*/*                                                                  */
*/*CALLERS-                                                          */
*/*          THE OUTPUTP INTERNAL PROCEDURE                          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0527
*MOVELP:                                                           0527
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0527
MOVELP   DS    0H                                                  0528
*   RFY                                                            0528
*    (TOADDR,                                                      0528
*     TOLEN,                                                       0528
*     RETNREG) RSTD;                /* RESTRICT THE WORK REGISTERS 0528
*                                      AND THE RETURN REGISTER       */
*   TOADDR=BUFFPTR+SAVEHDRL;        /* WILL MOVE INTO DATA AREA OF 0529
*                                      CURRENT SUMMARY DUMP RECORD IN
*                                      OUTPUT BUFFER                 */
         L     TOADDR,BUFFPTR(,SMWKPTR)                            0529
         AL    TOADDR,SAVEHDRL(,SMWKPTR)                           0529
*   TOLEN=WORKREGB;                 /* TO LENGTH OF DATA=FROM LENGTH
*                                      OF DATA                       */
         LR    TOLEN,WORKREGB                                      0530
*                                                                  0531
*/********************************************************************/
*/*                                                                  */
*/* THE MOVE LONG INSTRUCTION WILL USE THE FOLLOWING REGISTERS:      */
*/*  TOADDR = EVEN REGISTER WITH ADDRESS TO MOVE DATA TO             */
*/*  TOLEN = FOLLOWING ODD REGISTER WITH LENGTH FOR MOVE TO 'TOADDR' */
*/*  WORKREGA = EVEN REGISTER WITH ADDRESS TO MOVE DATA FROM         */
*/*  WORKREGB = FOLLOWING ODD REGISTER WITH LENGTH FOR MOVE FROM     */
*/*    ADDRESS IN WORKREGA                                           */
*/*    (DON'T USE PADDING CHARACTER BECAUSE LENGTHS ARE EQUAL)       */
*/*                                                                  */
*/* NOTES:                                                           */
*/*  - THE MVCL CHANGES THE CONTENTS OF ALL FOUR REGISTERS:          */
*/*        WORKREGA = WORKREGA + TOLEN                               */
*/*        WORKREGB = WORKREGB - TOLEN = ZERO                        */
*/*        TOADDR = TOADDR + TOLEN                                   */
*/*        TOLEN = TOLEN - TOLEN = ZERO                              */
*/*  - THE MOVE CAN CAUSE A PROGRAM CHECK (0C4 ABEND) IF THE FROM    */
*/*    ADDRESS IS INVALID.  IN THAT CASE EXECUTION WILL RESUME       */
*/*    AT THE RETRY ADDRESS (ERRRETRY).                              */
*/*                                                                  */
*/********************************************************************/
*                                                                  0531
*   MVCL(TOADDR,WORKREGA);          /* DO THE MOVE LONG              */
         MVCL  TOADDR,WORKREGA                                     0531
*   RFY                                                            0532
*    (TOADDR,                                                      0532
*     TOLEN,                                                       0532
*     RETNREG) UNRSTD;                                             0532
*   END MOVELP;                                                    0533
@EL00010 DS    0H                                                  0533
@EF00010 DS    0H                                                  0533
@ER00010 BR    @14                                                 0533
*                                                                  0534
*/********************************************************************/
*/*                                                                  */
*/*INTERNAL PROCEDURE NAME-                                          */
*/*          WRITEP                                                  */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          INVOKE IEAVTSDP,THE SVC DUMP OUTPUT WRITER,TO WRITE     */
*/*          FROM THE SVC DUMP OUTPUT BUFFER TO THE DUMP DATA SET    */
*/*                                                                  */
*/*INPUT-                                                            */
*/*          BUFFER TO BE WRITTEN(POINTED TO BY SDSMBUFF)            */
*/*                                                                  */
*/*OUTPUT-                                                           */
*/*          THE OUTPUT BUFFER IS WRITTEN TO THE DUMP DATA SET AND   */
*/*          BUFFPTR IS UPDATED TO POINT TO THE BEGINNING OF THE     */
*/*          OUTPUT BUFFER.ENDSW IS SET ON IF FOUND TERMINATING      */
*/*          ERROR.                                                  */
*/*                                                                  */
*/*CALLERS-                                                          */
*/*          THE OUTPUTP INTERNAL PROCEDURE                          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0534
*WRITEP:                                                           0534
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0534
WRITEP   DS    0H                                                  0535
*   IF ENDSW=OFF THEN               /* IF NO TERMINATING ERROR WAS 0535
*                                      FOUND WHILE DOING PRIOR WRITE
*                                      TO THE DUMP DATA SET          */
         TM    ENDSW(SMWKPTR),B'00001000'                          0535
         BNZ   @RF00535                                            0535
*     DO;                                                          0536
*       WRITES=RETNREG;             /* SAVE RETURN ADDRESS BECAUSE 0537
*                                      LATER CALL WILL DESTROY IT    */
         ST    RETNREG,WRITES(,SMWKPTR)                            0537
*       SAVERTY=ERRRETRY;           /* SAVE RETRY ADDR ACROSS CALL TO
*                                      IEAVTSDP                      */
*                                                                  0538
         L     @15,ERRRETRY(,ERR6WPTR)                             0538
         ST    @15,SAVERTY(,SMWKPTR)                               0538
*       /*************************************************************/
*       /*                                                           */
*       /* WRITE THIS 4104 BYTE BUFFER OF SUMMARY DUMP RECORD(S) INTO*/
*       /* THE DUMP DATA SET                                         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0539
*       CALL IEAVTSDP;              /* IEAVTSDP USES SDSMBUFF POINTER
*                                      IN SDWORK FOR ADDRESS OF    0539
*                                      OUTPUT BUFFER TO DUMP. IF THE
*                                      DUMP DATA SET IS FILLED BY  0539
*                                      THIS WRITE, OR IF AN        0539
*                                      UNRECOVERABLE I/O ERROR     0539
*                                      OCCURS, ERRENDMP AND SDRETCOD
*                                      WILL BE SET BY IEAVTSDP.      */
*                                                                  0539
         L     @15,@CV03096                                        0539
         BALR  @14,@15                                             0539
*       /*************************************************************/
*       /*                                                           */
*       /* IT IS NECESSARY TO REESTABLISH MODULE DEPENDENT           */
*       /* INFORMATION HERE BECAUSE IEAVTSDP USES THE SAME ERROR     */
*       /* RECOVERY ROUTINES AND PARMLISTS AS IEAVTSSE               */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0540
*       SVCDMPNM=MODNAME;           /* IDENTIFY THIS MODULE AS IN  0540
*                                      CONTROL                       */
         MVC   SVCDMPNM(8,SDWKPTR),@CC02998                        0540
*       ERRBASE1=BASEREG;           /* PUT THE BASE REG IN THE ERROR
*                                      ROUTINE PARMLIST TO BE      0541
*                                      RESTORED IF THERE IS A RETRY  */
         ST    BASEREG,ERRBASE1(,ERR6WPTR)                         0541
*       ERRRETRY=SAVERTY;           /* AND THEN RESET THE RETRY ADDR */
         L     @15,SAVERTY(,SMWKPTR)                               0542
         ST    @15,ERRRETRY(,ERR6WPTR)                             0542
*                                                                  0543
*       /*************************************************************/
*       /*                                                           */
*       /* UPDATE BUFFER POINTERS                                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0543
*       BUFFPTR=ADDR(PRDDATA);      /* RESET POINTER FOR NEXT FREE 0543
*                                      AREA IN OUTPUT BUFFER TO    0543
*                                      BEGINNING OF THE BUFFER, MINUS
*                                      THE AMDPRDMP DATA RECORD    0543
*                                      HEADER                        */
         L     @15,PRDINPTR(,SDWKPTR)                              0543
         LA    @12,PRDDATA(,@15)                                   0543
         ST    @12,BUFFPTR(,SMWKPTR)                               0543
*       PSEUDOAD=PSEUDOAD+PAGESIZE; /* INCREMENT THE PSEUDO ADDR FOR
*                                      THE NEXT PAGE OF DATA         */
*                                                                  0544
         L     @12,@CF01017                                        0544
         AL    @12,PSEUDOAD(,@15)                                  0544
         ST    @12,PSEUDOAD(,@15)                                  0544
*       /*************************************************************/
*       /*                                                           */
*       /* CHECK FOR ERRORS THAT WILL TERMINATE THE SUMMARY DUMP     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0545
*       IF PSEUDOAD>=PASTRT+PASIZE THEN/* IF HAVE FILLED THE ENTIRE
*                                      (PSEUDO) PRIVATE AREA WITH  0545
*                                      SUMMARY DUMP DATA             */
         L     @15,CVTPTR                                          0545
         L     @15,GDAPTR(,@15)                                    0545
         L     @08,PASTRT(,@15)                                    0545
         AL    @08,PASIZE(,@15)                                    0545
         CR    @12,@08                                             0545
         BL    @RF00545                                            0545
*         ENDSW=ON;                 /* TERMINATE THE SUMMARY DUMP  0546
*                                      (BUT CONTINUE WITH REMAINDER
*                                      OF THE SVC DUMP)              */
         OI    ENDSW(SMWKPTR),B'00001000'                          0546
*       IF ERRENDMP=ON THEN         /* IF IEAVTSDP FILLED THE DUMP 0547
*                                      DATA SET OR HAD AN          0547
*                                      UNRECOVERABLE I/O ERROR       */
@RF00545 TM    ERRENDMP(ERR6WPTR),B'01000000'                      0547
         BNO   @RF00547                                            0547
*         ENDSW=ON;                 /* TERMINATE THE SUMMARY DUMP    */
         OI    ENDSW(SMWKPTR),B'00001000'                          0548
*       RETNREG=WRITES;             /* RESTORE CALLER'S RETURN     0549
*                                      ADDRESS BEFORE RETURN         */
@RF00547 L     RETNREG,WRITES(,SMWKPTR)                            0549
*     END;                          /* END OF IF ENDSW = OFF         */
*   END WRITEP;                                                    0551
@EL00011 DS    0H                                                  0551
@EF00011 DS    0H                                                  0551
@ER00011 BR    @14                                                 0551
*   END IEAVTSSE                                                   0552
*                                                                  0552
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IHAASXB )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHASDERR)                                       */
*/*%INCLUDE SYSLIB  (IHAGDA  )                                       */
*/*%INCLUDE SYSLIB  (AMDDATA )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHAFRRS )                                       */
*/*%INCLUDE SYSLIB  (IHARTCT )                                       */
*/*%INCLUDE SYSLIB  (IHARTM2A)                                       */
*/*%INCLUDE SYSLIB  (IHASNP  )                                       */
*/*%INCLUDE SYSLIB  (IHARMPL )                                       */
*/*%INCLUDE SYSLIB  (IHASDRSB)                                       */
*/*%INCLUDE SYSLIB  (IHASDUMP)                                       */
*/*%INCLUDE SYSLIB  (IHASDWRK)                                       */
*/*%INCLUDE SYSLIB  (IHASMDLR)                                       */
*/*%INCLUDE SYSLIB  (IHASMWK )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IEFTIOT1)                                       */
*                                                                  0552
*       ;                                                          0552
@DATA    DS    0H
@CH02330 DC    H'46'
@CH00998 DC    H'48'
@CH02335 DC    H'49'
@CH02416 DC    H'53'
@CH02410 DC    H'57'
@CH02327 DC    H'58'
@CH02412 DC    H'59'
@CH02414 DC    H'60'
@SM03185 MVC   BUFFAREA(0,@12),SMDLRHDR+656(SMWKPTR)
@SM03187 MVC   BUFFAREA(0,@15),SMDLRHDR+656(@02)
@DATD    DSECT
         DS    0F
IEAVTSSE CSECT
         DS    0F
@CF00076 DC    F'1'
@CH00076 EQU   @CF00076+2
@CF00052 DC    F'4'
@CH00052 EQU   @CF00052+2
@CF01075 DC    F'6'
@CF00064 DC    F'16'
@CH00064 EQU   @CF00064+2
@CF01906 DC    F'20'
@CF02365 DC    F'25'
@CF02367 DC    F'26'
@CF00091 DC    F'32'
@CF02984 DC    F'300'
@CF03166 DC    F'972'
@CF02986 DC    F'2048'
@CF01017 DC    F'4096'
@CF02991 DC    F'65536'
@CF03164 DC    F'-4095'
@CF03167 DC    F'-4076'
@CF03168 DC    F'-19'
@CF03176 DC    F'-8'
@CF03177 DC    F'-4'
@CF03183 DC    F'-3'
@CF02993 DC    XL4'FFFFFFFC'
@CF03000 DC    XL4'7FFFFFFF'
@CF03175 DC    XL4'0000FFFF'
@CF02980 DC    XL4'0003'
@DATD    DSECT
         DS    0D
@ENDDATD EQU   *
IEAVTSSE CSECT
         NOPR  ((@ENDDATD-@DATD)*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV03095 DC    V(SDFRRRTN)
@CV03096 DC    V(IEAVTSDP)
         DS    0D
SMWKLEN  DC    AL4(980)
ADDRFRR  DC    VL4(SDFRRRTN)
@CC02998 DC    C'IEAVTSSE'
@CB02319 DC    X'FFFA'
PATCHLOC DS    CL256
         ORG   PATCHLOC
@NM00130 DC    CL256'***PATCH AREA FOR MODULE IEAVTSSE.  LENGTH IS 256 C
               BYTES.***'
         ORG   PATCHLOC+256
SMDWSAG  DC    AL2(6)
         DC    AL2(7)
         DC    AL2(8)
         DC    AL2(9)
         DC    AL2(10)
         DC    AL2(11)
         DC    AL2(12)
         DC    AL2(13)
         DC    AL2(14)
         DC    AL2(15)
         DC    AL2(16)
SMDWSAC  DC    AL2(17)
         DC    AL2(18)
         DC    AL2(19)
         DC    AL2(20)
         DC    AL2(21)
         DC    AL2(22)
         DC    AL2(23)
         DC    AL2(24)
         DC    AL2(25)
         DC    AL2(26)
         DC    AL2(27)
         DC    AL2(28)
         DC    AL2(29)
         DC    AL2(30)
         DC    AL2(54)
         DC    AL2(55)
SMDWSAL  DC    AL2(31)
         DC    AL2(32)
         DC    AL2(33)
         DC    AL2(34)
         DC    AL2(35)
         DC    AL2(36)
         DC    AL2(37)
         DC    AL2(38)
         DC    AL2(39)
         DC    AL2(40)
         DC    AL2(41)
         DC    AL2(42)
         DC    AL2(43)
         DC    AL2(44)
         DC    AL2(45)
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
BASEREG  EQU   @09
ERR6WPTR EQU   @03
R3       EQU   @03
R14      EQU   @14
R15      EQU   @15
R14SAVE  EQU   @02
TOADDR   EQU   @04
TOLEN    EQU   @05
SMWKPTR  EQU   @06
SDWKPTR  EQU   @07
R15SAVE  EQU   @08
WORKREGA EQU   @10
WORKREGB EQU   @11
SAREG    EQU   @13
RETNREG  EQU   @14
R10      EQU   @10
R11      EQU   @11
R13      EQU   @13
R2       EQU   @02
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
FLCTRACE EQU   PSA+84
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
PSALSFCC EQU   PSA+1012
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBASID EQU   ASCB+36
ASCBRSM  EQU   ASCB+52
ASCBRSMF EQU   ASCBRSM
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBASXB EQU   ASCB+108
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
ASXB     EQU   0
ASXBFTCB EQU   ASXB+4
ASXBLTCB EQU   ASXB+8
ASXBAEQ  EQU   ASXB+168
ASXBSECR EQU   ASXB+199
ASCBSFLG EQU   ASXBSECR
ASXBCASW EQU   ASXB+216
ASXBCRB1 EQU   ASXBCASW
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTGTFAV EQU   CVTGTFS
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
ERRWORK  EQU   0
ERRFLGS1 EQU   ERRWORK
ERRFRR   EQU   ERRFLGS1
ERRLLOCK EQU   ERRFLGS1
ERRFLGS2 EQU   ERRWORK+1
ERRENDMP EQU   ERRFLGS2
ERRNORCD EQU   ERRFLGS2
ERRADDR  EQU   ERRWORK+4
ERRRETRY EQU   ERRADDR
ERRBASE1 EQU   ERRWORK+12
ERRFLAG3 EQU   ERRWORK+16
ERRBASE2 EQU   ERRWORK+20
GDA      EQU   0
GVSMFLAG EQU   GDA
GDAFLAGS EQU   GVSMFLAG
PASTRT   EQU   GDA+16
PASIZE   EQU   GDA+20
VRPOSTQ  EQU   GDA+32
VRWAITQ  EQU   GDA+40
PRDINPUT EQU   0
PRDHDRID EQU   PRDINPUT
PRDASID  EQU   PRDINPUT+2
PRDREGS  EQU   PRDINPUT+120
PRDFPR   EQU   PRDREGS
FRRS     EQU   0
FRRSHEAD EQU   FRRS
FRRSEMP  EQU   FRRSHEAD
FRRSLAST EQU   FRRSHEAD+4
FRRSELEN EQU   FRRSHEAD+8
FRRSCURR EQU   FRRSHEAD+12
FRRSPTR  EQU   0
FRRSENTR EQU   0
FRRSFRRA EQU   FRRSENTR
FRRSFLGS EQU   FRRSENTR+4
FRRSFLG1 EQU   FRRSFLGS
FRRSPARM EQU   FRRSENTR+8
FRREPTR  EQU   0
RTCT     EQU   0
RTCTPLIB EQU   RTCT+4
RTCTSAP  EQU   RTCTPLIB
RTCTSAP1 EQU   RTCTSAP
RTCTSAP2 EQU   RTCTSAP+1
RTCTSAP3 EQU   RTCTSAP+2
RTCTSUP  EQU   RTCTPLIB+4
RTCTSUP1 EQU   RTCTSUP
RTCTSUP2 EQU   RTCTSUP+1
RTCTSUP3 EQU   RTCTSUP+2
RTCTSYD  EQU   RTCTPLIB+8
RTCTSY01 EQU   RTCTSYD
RTCTSDDS EQU   RTCT+36
RTCTFLG  EQU   RTCTSDDS+3
RTCTSDPL EQU   RTCT+156
RTCTRFLG EQU   RTCT+176
RTCTSDSW EQU   RTCT+180
RTCTERID EQU   RTCT+224
RTCTOPT  EQU   RTCT+236
RTCTASO  EQU   RTCT+252
RTCTASO1 EQU   RTCTASO
RTCTASO2 EQU   RTCTASO+1
RTCTSDI  EQU   RTCT+254
RTCTSDNA EQU   RTCTSDI
RTCTSDF  EQU   RTCT+264
RTCTSDF1 EQU   RTCTSDF
RTCTSDF2 EQU   RTCTSDF+1
RTCTR2D2 EQU   RTCTSDF+2
RTCTC3PO EQU   RTCTSDF+3
RTCTSDF3 EQU   RTCT+268
RTCTSDF4 EQU   RTCTSDF3+2
RTCTSDDO EQU   RTCTSDF4
RTCTMOPT EQU   0
RTCTMSAO EQU   RTCTMOPT
RTCTSASD EQU   RTCTMSAO
RTCTSAO1 EQU   RTCTSASD
RTCTSAO2 EQU   RTCTSASD+1
RTCTSAPD EQU   RTCTMSAO+2
RTCTSAO3 EQU   RTCTSAPD
RTCTSAO4 EQU   RTCTSAPD+1
RTCTSAMG EQU   RTCTSAO4
RTCTMSUO EQU   RTCTMOPT+4
RTCTSUSD EQU   RTCTMSUO
RTCTSUO1 EQU   RTCTSUSD
RTCTSUO2 EQU   RTCTSUSD+1
RTCTSUPD EQU   RTCTMSUO+2
RTCTSUO3 EQU   RTCTSUPD
RTCTSUO4 EQU   RTCTSUPD+1
RTCTSUMG EQU   RTCTSUO4
RTCTMSYO EQU   RTCTMOPT+8
RTCTSD01 EQU   RTCTMSYO
RTCTSD04 EQU   RTCTMSYO+3
RTCTSMMG EQU   RTCTSD04
RTCTMSDO EQU   RTCTMOPT+12
RTCTSDOD EQU   RTCTMSDO
RTCTSDO1 EQU   RTCTSDOD
RTCTSDO2 EQU   RTCTSDOD+1
RTCTSDO3 EQU   RTCTMSDO+2
RTCTSDO4 EQU   RTCTMSDO+3
RTCTSDMG EQU   RTCTSDO4
SNPPARMS EQU   0
SNPFLAG  EQU   SNPPARMS+1
SNPSDATA EQU   SNPPARMS+4
SNPSDAT0 EQU   SNPSDATA
SNPSDAT1 EQU   SNPSDATA+1
SNPPDATA EQU   SNPPARMS+6
RMPL     EQU   0
RMPLFLG1 EQU   RMPL
RTM2WA   EQU   0
RTM2DESC EQU   RTM2WA
RTM2RT2D EQU   RTM2DESC+8
RTM2CODE EQU   RTM2WA+28
RTM2CCF  EQU   RTM2CODE
RTM2PGCY EQU   RTM2WA+60
RTM2TRRY EQU   RTM2PGCY
RTM2EEDR EQU   RTM2TRRY
RTM2EREG EQU   RTM2EEDR
RTM2APSW EQU   RTM2EEDR+64
RTM2EPSW EQU   RTM2APSW
RTM2EMK1 EQU   RTM2EPSW
RTM2MWP1 EQU   RTM2EPSW+1
RTM2INT1 EQU   RTM2EPSW+2
RTM2NXT1 EQU   RTM2EPSW+4
RTM2AEC1 EQU   RTM2APSW+8
RTM2ILC1 EQU   RTM2AEC1+1
RTM2INC1 EQU   RTM2AEC1+2
RTM2ICD1 EQU   RTM2INC1+1
RTM2EEDH EQU   RTM2TRRY+92
RTM2STCK EQU   RTM2EEDH
RTM2MCHI EQU   RTM2EEDH+8
RTM2MCHS EQU   RTM2MCHI
RTM2MCHD EQU   RTM2MCHI+1
RTM2RSR1 EQU   RTM2EEDH+12
RTM2RSR2 EQU   RTM2EEDH+13
RTM2FLGS EQU   RTM2TRRY+120
RTM2ERRA EQU   RTM2FLGS
RTM2ERRB EQU   RTM2FLGS+1
RTM2ERRC EQU   RTM2FLGS+2
RTM2ERRD EQU   RTM2FLGS+3
RTM2CVER EQU   RTM2WA+186
RTM2TRRC EQU   RTM2CVER
RTM2IOFS EQU   RTM2TRRC
RTM2IOBP EQU   RTM2TRRC+2
RTM2SCBS EQU   RTM2TRRC+14
RTM2RTCD EQU   RTM2TRRC+26
RTM2SPLL EQU   RTM2RTCD+4
RTM2PARQ EQU   RTM2TRRC+46
RTM2CTL1 EQU   RTM2CVER+50
RTM2CMKA EQU   RTM2CTL1
RTM2MWPA EQU   RTM2CTL1+1
RTM2PMKA EQU   RTM2CTL1+4
RTM2CTL2 EQU   RTM2CVER+58
RTM2CMKP EQU   RTM2CTL2
RTM2MWPP EQU   RTM2CTL2+1
RTM2PMKP EQU   RTM2CTL2+4
RTM2SNAP EQU   RTM2CVER+66
RTM2SPRM EQU   RTM2SNAP+4
RTM2DPSL EQU   RTM2SNAP+24
RTM2FRM1 EQU   RTM2DPSL
RTM2TO1  EQU   RTM2DPSL+4
RTM2FRM2 EQU   RTM2DPSL+8
RTM2TO2  EQU   RTM2DPSL+12
RTM2FRM3 EQU   RTM2DPSL+16
RTM2TO3  EQU   RTM2DPSL+20
RTM2FRM4 EQU   RTM2DPSL+24
RTM2TO4  EQU   RTM2DPSL+28
RTM2SECB EQU   RTM2CVER+138
RTM2ECBA EQU   RTM2SECB
RTM2PREV EQU   RTM2CVER+178
RTM2SFRG EQU   RTM2CVER+186
RTM2SCTL EQU   RTM2CVER+259
RTM2CCTL EQU   RTM2SCTL
RTM2ABDR EQU   RTM2SCTL+4
RTM2ABID EQU   RTM2ABDR
RTM2ABND EQU   RTM2ABDR+1
RTM2RCTL EQU   RTM2SCTL+6
RTM2INTF EQU   RTM2CVER+266
RTM2CTLR EQU   RTM2INTF
RTM2TSKT EQU   RTM2INTF+2
RTM2ABDP EQU   RTM2INTF+4
RTM2ASIR EQU   RTM2INTF+5
RTM2FLX  EQU   RTM2INTF+6
RTM2FLX1 EQU   RTM2FLX
RTM2FLX2 EQU   RTM2FLX+1
RTM2RECL EQU   RTM2CVER+274
RTM2DCTL EQU   RTM2RECL+12
RTM2ECTL EQU   RTM2RECL+13
RTM2TRYR EQU   RTM2RECL+16
RTM2TRF1 EQU   RTM2TRYR
RTM2TRF2 EQU   RTM2TRYR+2
RTM2RECH EQU   RTM2CVER+294
RTM2RRG  EQU   RTM2CVER+314
RTM2CRG  EQU   RTM2CVER+378
RTM2RMIN EQU   RTM2WA+708
RTM2RMPL EQU   RTM2RMIN+4
RTM2RMWA EQU   RTM2RMIN+28
RTM2ERID EQU   RTM2WA+872
RTM2ENSN EQU   RTM2WA+884
RTM2SNLN EQU   RTM2ENSN
RTM2TRLN EQU   RTM2SNLN
RTM2TRTB EQU   RTM2ENSN+4
RTM2RYRG EQU   RTM2WA+904
STORAGE  EQU   0
STORFRM  EQU   STORAGE
STORTO   EQU   STORAGE+4
SMWKRSCB EQU   0
SMWKFLGA EQU   SMWKRSCB
SMWKRSFM EQU   SMWKRSCB+16
SDUMP    EQU   0
SDUFLAG0 EQU   SDUMP
SDUFLAG1 EQU   SDUMP+1
SDUNEW   EQU   SDUFLAG1
SDUSULST EQU   SDUFLAG1
SDUSDAT1 EQU   SDUMP+2
SDUSDAT2 EQU   SDUMP+3
SDUMASID EQU   SDUMP+20
SDUSUMLP EQU   SDUMP+28
SDWORK   EQU   0
SDCNTRL  EQU   SDWORK
SVCDOPTS EQU   SDCNTRL+100
SVCDOPT1 EQU   SVCDOPTS
SVCDOPT2 EQU   SVCDOPTS+1
FLAGSONE EQU   SDCNTRL+102
ERRORWK  EQU   SDCNTRL+104
SVCDMPNM EQU   SDCNTRL+128
SDWRGSV2 EQU   SDCNTRL+288
CVRT11   EQU   SDCNTRL+368
CVRT1    EQU   CVRT11+4
CVRT2    EQU   SDCNTRL+376
SDCVRT4  EQU   CVRT2+2
SVCNAME  EQU   SDCNTRL+392
SVCNM1T5 EQU   SVCNAME
SVCNM6T8 EQU   SVCNAME+5
SVCNM7T8 EQU   SVCNM6T8+1
CCWCHAIN EQU   SDCNTRL+400
CCW1     EQU   CCWCHAIN
FLAGS1   EQU   CCW1+4
CCW2     EQU   CCWCHAIN+8
FLAGS2   EQU   CCW2+4
CCW3     EQU   CCWCHAIN+16
FLAGS3   EQU   CCW3+4
SDSMBUFF EQU   SDCNTRL+424
SDOUTBUF EQU   SDWORK+432
RCDCCHH  EQU   SDOUTBUF
SMDLR    EQU   0
SMDLRHDR EQU   SMDLR
SMDLRID  EQU   SMDLRHDR
SMDLRLEN EQU   SMDLRHDR+4
SMDLRADR EQU   SMDLRHDR+8
SMDLRPL  EQU   SMDLRHDR+12
SMDLRMSG EQU   SMDLRHDR+16
SMWK     EQU   0
SMWKFLGS EQU   SMWK+4
SMWKFLG1 EQU   SMWKFLGS
SMWKSAVE EQU   SMWK+8
SMWKSAV1 EQU   SMWK+80
SMWKPSW  EQU   SMWK+168
SMWKHEAD EQU   SMWK+656
SMWKREGS EQU   SMWK+676
SMWKSREG EQU   SMWKREGS
SMWKIDX1 EQU   SMWK+804
SMWKIDX2 EQU   SMWK+806
SMWKREGN EQU   SMWK+808
SMWKSVLN EQU   SMWK+820
SMWKPSSE EQU   SMWK+960
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBTIO   EQU   TCB+12
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTCB   EQU   TCB+116
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBRTWA  EQU   TCB+224
TCBXSCT  EQU   TCB+240
TCBXSCT1 EQU   TCBXSCT
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
TIOT1    EQU   0
TIOCNJOB EQU   TIOT1
TIOCSTEP EQU   TIOT1+8
BUFFAREA EQU   0
TRTPTRS  EQU   0
TRTCURR  EQU   TRTPTRS
TRTEND   EQU   TRTPTRS+8
TRTENTY  EQU   0
REGARRAY EQU   0
@NM00128 EQU   REGARRAY
REGVALUE EQU   @NM00128+1
STORLIST EQU   0
BEGADDR  EQU   STORLIST
BEGHOBIT EQU   BEGADDR
ENDADDR  EQU   STORLIST+4
LASTADDR EQU   ENDADDR
DATAAREA EQU   0
ASCBPTR  EQU   PSAAOLD
ASXBPTR  EQU   ASCBASXB
CVTPTR   EQU   FLCCVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTSDTRC EQU   CVTCTLFG
CVTGDA   EQU   CVTS01+212
CVTRTMCT EQU   CVTS01+224
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
GDAPTR   EQU   CVTGDA
PRDINPTR EQU   SDSMBUFF
SDUMPPTR EQU   RTCTSDPL
TIOTPTR  EQU   TCBTIO
PRDFLC   EQU   PRDFPR
@NM00010 EQU   PRDHDRID
PRDKEY1  EQU   @NM00010
PRDKEY2  EQU   @NM00010+1
PRDADDR  EQU   @NM00010+4
PRDDATA  EQU   @NM00010+8
@NM00012 EQU   PRDHDRID
PRDFLAGS EQU   @NM00012+2
PSARSVTE EQU   PSARSVT
PSACSTK  EQU   PSARSVTE
TIOENTRY EQU   TIOT1+24
TIOESTTA EQU   TIOENTRY+1
TIOERLOC EQU   TIOENTRY+2
TIOELINK EQU   TIOERLOC+1
TIOESYOT EQU   TIOELINK
TIOESTTC EQU   TIOENTRY+15
TIOESTTB EQU   TIOENTRY+16
POOLSTAR EQU   TIOENTRY+20
TIOEDEVE EQU   TIOESTTB
TIOSTTB  EQU   TIOEDEVE
PSEUDOAD EQU   PRDADDR
SSEWORK  EQU   SMWKSAVE
SAVECRTY EQU   SSEWORK
SAVERTY  EQU   SSEWORK+4
TEMPSAVE EQU   SSEWORK+8
SAVEHDRL EQU   SSEWORK+12
SAVEREML EQU   SSEWORK+16
SAVEREGA EQU   SSEWORK+20
SAVEREGB EQU   SSEWORK+24
BUFFPTR  EQU   SSEWORK+28
ENDBUFF  EQU   SSEWORK+32
ENDRCD   EQU   SSEWORK+36
SAVECSA  EQU   SSEWORK+40
RTM2PTR  EQU   SSEWORK+44
TCBPTR   EQU   SSEWORK+48
SAVERADR EQU   SSEWORK+52
SAVELRLN EQU   SSEWORK+56
SSEWORK2 EQU   SMWKSAV1
ASIDS    EQU   SSEWORK2
SUMLISTS EQU   SSEWORK2+4
RTM2S    EQU   SSEWORK2+8
TRACES   EQU   SSEWORK2+12
CLEANUPS EQU   SSEWORK2+16
OUTPUTS  EQU   SSEWORK2+20
HEADERS  EQU   SSEWORK2+24
WRITES   EQU   SSEWORK2+28
SSEASIDD EQU   SSEWORK2+32
SSEASIDA EQU   SSEASIDD
SSEASIDJ EQU   SSEASIDD+2
SSEASIDS EQU   SSEASIDD+10
RTM2INDX EQU   SSEWORK2+58
WORKSWS  EQU   SSEWORK2+59
WORKSWS1 EQU   WORKSWS
LASTSW   EQU   WORKSWS1
DUPREGSW EQU   WORKSWS1
DURTM2SW EQU   WORKSWS1
TRRTM2SW EQU   WORKSWS1
ENDSW    EQU   WORKSWS1
NORCDSW  EQU   WORKSWS1
BADADRSW EQU   WORKSWS1
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00126 EQU   WORKSWS1
SSEASIDT EQU   SSEASIDS+8
SSEASIDP EQU   SSEASIDS
@NM00125 EQU   SSEWORK+60
TIOUCBP  EQU   TIOEDEVE+1
TIOVERF  EQU   TIOSTTB
TIOUNLD  EQU   TIOSTTB
TIOMNTD  EQU   TIOSTTB
TIOSETU  EQU   TIOSTTB
TIOVLSR  EQU   TIOSTTB
TIOPVIO  EQU   TIOSTTB
TIOREQD  EQU   TIOSTTB
TIOUSED  EQU   TIOSTTB
TIOTFEND EQU   POOLSTAR+16
TIOPSLOT EQU   POOLSTAR+13
TIOPSTTB EQU   POOLSTAR+12
TIOPPOOL EQU   POOLSTAR+4
TIOPNSRT EQU   POOLSTAR+3
@NM00124 EQU   POOLSTAR+2
TIOPNSLT EQU   POOLSTAR+1
@NM00123 EQU   POOLSTAR
TIOEFSRT EQU   TIOENTRY+17
TIOSVERF EQU   TIOESTTB
TIOSUNLD EQU   TIOESTTB
TIOSMNTD EQU   TIOESTTB
TIOSSETU EQU   TIOESTTB
TIOSVLSR EQU   TIOESTTB
TIOSPVIO EQU   TIOESTTB
TIOSREQD EQU   TIOESTTB
TIOSUSED EQU   TIOESTTB
TIOSBALS EQU   TIOESTTC
TIOSBALP EQU   TIOESTTC
TIOSVOLS EQU   TIOESTTC
TIOSVOLP EQU   TIOESTTC
TIOSAFFS EQU   TIOESTTC
TIOSAFFP EQU   TIOESTTC
TIOSDEFR EQU   TIOESTTC
TIOSDKCR EQU   TIOESTTC
TIOEJFCB EQU   TIOENTRY+12
TIOEDDNM EQU   TIOENTRY+4
TIOTREM  EQU   TIOELINK
TIOESSDS EQU   TIOESYOT
TIOESYIN EQU   TIOELINK
TIOEQNAM EQU   TIOELINK
TIOEDYNM EQU   TIOELINK
TIOTTERM EQU   TIOELINK
TIOTRV01 EQU   TIOELINK
TIOSYOUT EQU   TIOELINK
TIOEWTCT EQU   TIOERLOC
TIOSDSP2 EQU   TIOESTTA
TIOSDSP1 EQU   TIOESTTA
TIOSLABL EQU   TIOESTTA
TIOSDADS EQU   TIOESTTA
TIOSJBLB EQU   TIOESTTA
TIOSPLTS EQU   TIOESTTA
TIOSPLTP EQU   TIOESTTA
TIOSLTYP EQU   TIOESTTA
TIOELNGH EQU   TIOENTRY
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
@NM00018 EQU   @NM00012+8
PRDCPUAD EQU   @NM00012+6
@NM00017 EQU   @NM00012+4
@NM00016 EQU   @NM00012+3
@NM00015 EQU   PRDFLAGS
PRDGPRVL EQU   PRDFLAGS
PRDSSINV EQU   PRDFLAGS
PRDUNIPR EQU   PRDFLAGS
@NM00014 EQU   @NM00012+1
@NM00013 EQU   @NM00012
@NM00011 EQU   @NM00010+2
@NM00009 EQU   PRDFLC+12
PRDCAW   EQU   PRDFLC+8
PRDCSW   EQU   PRDFLC
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
@NM00129 EQU   @NM00128
@NM00127 EQU   TRTENTY
TRTBEG   EQU   TRTPTRS+4
@NM00122 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBRV143 EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00121 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBRV327 EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBRV326 EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBSTAWA EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBCCPVI EQU   TCBXSCT+2
TCBRV325 EQU   TCBXSCT+1
TCBRV324 EQU   TCBXSCT1
TCBRV323 EQU   TCBXSCT1
TCBRV322 EQU   TCBXSCT1
TCBRV321 EQU   TCBXSCT1
TCBRV320 EQU   TCBXSCT1
TCBRV319 EQU   TCBXSCT1
TCBS3A   EQU   TCBXSCT1
TCBACTIV EQU   TCBXSCT1
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00120 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00119 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
@NM00118 EQU   SMWK+978
SMWKNSTB EQU   SMWK+976
SMWKNFFD EQU   SMWK+974
SMWKNTDQ EQU   SMWK+972
SMWKNTDI EQU   SMWK+970
SMWKNFUS EQU   SMWK+968
SMWKNFAQ EQU   SMWK+966
SMWKNFRQ EQU   SMWK+964
SMWKTQE  EQU   SMWK+832
@NM00117 EQU   SMWK+828
SMWKTQEA EQU   SMWK+824
SMWKNDIE EQU   SMWK+818
SMWKNFRE EQU   SMWK+816
SMWKNFRI EQU   SMWK+814
SMWKALEN EQU   SMWK+812
SMWKSCBF EQU   SMWK+810
SMWKSMVL EQU   SMWK+652
SMWKSMMV EQU   SMWK+648
SMWKSMBF EQU   SMWK+644
SMWKSMLS EQU   SMWK+640
SMWKSMRG EQU   SMWK+636
SMWKSMDT EQU   SMWK+632
SMWKSDMP EQU   SMWK+628
SMWKSMLK EQU   SMWK+624
@NM00116 EQU   SMWK+622
SMWKFRUS EQU   SMWK+620
SMWKRSIX EQU   SMWK+618
SMWKNFAV EQU   SMWK+616
SMWKRFAD EQU   SMWK+612
SMWKRSM  EQU   SMWK+196
SMWKCPUS EQU   SMWK+192
SMWKPEND EQU   SMWK+188
SMWKSAVA EQU   SMWK+184
SMWKENDA EQU   SMWK+180
SMWKVADR EQU   SMWK+176
SMWKPSWA EQU   SMWKPSW+4
@NM00115 EQU   SMWKPSW+2
SMWKPSWK EQU   SMWKPSW+1
SMWKPSWS EQU   SMWKPSW
SMWKPFXE EQU   SMWK+164
SMWKPFXB EQU   SMWK+160
SMWKSSDE EQU   SMWK+156
SMWKENTY EQU   SMWK+152
SMWKFLG4 EQU   SMWKFLGS+3
SMWKFLG3 EQU   SMWKFLGS+2
SMWKFLG2 EQU   SMWKFLGS+1
@NM00114 EQU   SMWKFLG1
@NM00113 EQU   SMWKFLG1
SMWKSTBK EQU   SMWKFLG1
SMWKSLCL EQU   SMWKFLG1
SMWKRSNM EQU   SMWKFLG1
SMWKRBFL EQU   SMWKFLG1
SMWKRBUF EQU   SMWKFLG1
SMWKSLCK EQU   SMWKFLG1
SMWKNAME EQU   SMWK
SMDLRDAT EQU   SMDLR+20
@NM00112 EQU   SMDLRHDR+17
@NM00111 EQU   SMDLRHDR+2
SDBUFFER EQU   SDWORK+440
DATALEN  EQU   SDOUTBUF+6
KEYLEN   EQU   SDOUTBUF+5
RECORDNO EQU   SDOUTBUF+4
RCDHH    EQU   RCDCCHH+2
RCDCC    EQU   RCDCCHH
SDSMDECB EQU   SDCNTRL+428
BYTECNT3 EQU   CCW3+6
@NM00110 EQU   CCW3+5
PCI3     EQU   FLAGS3
SKIP3    EQU   FLAGS3
SLI3     EQU   FLAGS3
CC3      EQU   FLAGS3
CD3      EQU   FLAGS3
DATAADR3 EQU   CCW3+1
CMDCODE3 EQU   CCW3
BYTECNT2 EQU   CCW2+6
@NM00109 EQU   CCW2+5
PCI2     EQU   FLAGS2
SKIP2    EQU   FLAGS2
SLI2     EQU   FLAGS2
CC2      EQU   FLAGS2
CD2      EQU   FLAGS2
DATAADR2 EQU   CCW2+1
CMDCODE2 EQU   CCW2
BYTECNT1 EQU   CCW1+6
@NM00108 EQU   CCW1+5
PCI1     EQU   FLAGS1
SKIP1    EQU   FLAGS1
SLI1     EQU   FLAGS1
CMDC1    EQU   FLAGS1
CD1      EQU   FLAGS1
DATAADR1 EQU   CCW1+1
CMDCODE1 EQU   CCW1
SVCNM8   EQU   SVCNM7T8+1
SVCNM7   EQU   SVCNM7T8
SVCNM6   EQU   SVCNM6T8
SVCNM1T4 EQU   SVCNM1T5
@NM00107 EQU   SDCNTRL+388
SVC994ID EQU   SDCNTRL+384
CVRT2SGN EQU   SDCVRT4+5
@NM00106 EQU   SDCVRT4
@NM00105 EQU   CVRT2
SDCVRT1  EQU   CVRT1+2
@NM00104 EQU   CVRT1
@NM00103 EQU   CVRT11
CHCNT    EQU   SDCNTRL+366
TIMCNT   EQU   SDCNTRL+364
DSTINDEX EQU   SDCNTRL+360
SDWRGSV1 EQU   SDCNTRL+216
SDRETCOD EQU   SDCNTRL+212
ADDADRWD EQU   SDCNTRL+208
ADDADRWC EQU   SDCNTRL+204
ADDADRWB EQU   SDCNTRL+200
ADDADRWA EQU   SDCNTRL+196
USEEND   EQU   SDCNTRL+192
USESTART EQU   SDCNTRL+188
SPQEADDR EQU   SDCNTRL+184
USERRETA EQU   SDCNTRL+180
PGFRRETA EQU   SDCNTRL+176
SPQERETA EQU   SDCNTRL+172
@NM00102 EQU   SDCNTRL+171
SDWKEY   EQU   SDCNTRL+170
AFFNSAV  EQU   SDCNTRL+168
FREERETA EQU   SDCNTRL+164
LPDERETA EQU   SDCNTRL+160
CDERETA  EQU   SDCNTRL+156
DISPRETA EQU   SDCNTRL+152
SDIORETA EQU   SDCNTRL+148
SVCDLPST EQU   SDCNTRL+136
FLAGSTWO EQU   SDCNTRL+103
SDWPAGOT EQU   FLAGSONE
FLGFLAST EQU   FLAGSONE
FLGTAPEE EQU   FLAGSONE
FLGRTFUL EQU   FLAGSONE
SVCDNSQA EQU   SVCDOPT2
SVCDNAPA EQU   SVCDOPT2
SVCDNSMD EQU   SVCDOPT2
SVCDSMDP EQU   SVCDOPT2
SVCDSWA  EQU   SVCDOPT2
SVCDCSA  EQU   SVCDOPT2
SVCDTRT  EQU   SVCDOPT1
SVCDLPA  EQU   SVCDOPT1
SVCDRGN  EQU   SVCDOPT1
SVCDLSQA EQU   SVCDOPT1
SVCDSQA  EQU   SVCDOPT1
SVCDNUC  EQU   SVCDOPT1
SVCDPSA  EQU   SVCDOPT1
SVCDAPSA EQU   SVCDOPT1
SDWSDPL  EQU   SDCNTRL+96
SDSRBBAS EQU   SDCNTRL+92
SDSRBADR EQU   SDCNTRL+88
SVCDSRBA EQU   SDCNTRL+84
ENDADRNT EQU   SDCNTRL+80
RANGEPTR EQU   SDCNTRL+76
GLOBADDR EQU   SDCNTRL+72
LOCALADR EQU   SDCNTRL+68
NUCADDR  EQU   SDCNTRL+64
DACHARAD EQU   SDCNTRL+60
LSTESTAE EQU   SDCNTRL+44
SDIOB    EQU   SDCNTRL+4
SDECB    EQU   SDCNTRL
SDUSYSMC EQU   SDUMP+36
SDUSYSMS EQU   SDUMP+32
SDUASIDP EQU   SDUMP+24
SDUTASID EQU   SDUMASID+2
SDUCASID EQU   SDUMASID
SDUECBAD EQU   SDUMP+16
SDUHDRAD EQU   SDUMP+12
SDUSTORA EQU   SDUMP+8
SDUDCBAD EQU   SDUMP+4
@NM00101 EQU   SDUSDAT2
SDUNASQA EQU   SDUSDAT2
SDUNAPSA EQU   SDUSDAT2
SDUNSMDP EQU   SDUSDAT2
SDUSMDMP EQU   SDUSDAT2
SDUSWA   EQU   SDUSDAT2
SDUCSA   EQU   SDUSDAT2
SDUTRT   EQU   SDUSDAT1
SDULPA   EQU   SDUSDAT1
SDURGN   EQU   SDUSDAT1
SDULSQA  EQU   SDUSDAT1
SDUSQA   EQU   SDUSDAT1
SDUNUC   EQU   SDUSDAT1
SDUPSA   EQU   SDUSDAT1
SDUALPSA EQU   SDUSDAT1
@NM00100 EQU   SDUFLAG1
SDUSLIP  EQU   SDUFLAG1
SDUASLST EQU   SDUFLAG1
SDUABEND EQU   SDUFLAG1
DUMPTYPE EQU   SDUFLAG1
SDUBRANH EQU   SDUFLAG0
SDUQUIET EQU   SDUFLAG0
SDUASID  EQU   SDUFLAG0
SDUECB   EQU   SDUFLAG0
SDUHDR   EQU   SDUFLAG0
SDUSTOR  EQU   SDUFLAG0
SDUBUF   EQU   SDUFLAG0
SDUDCB   EQU   SDUFLAG0
SMWKFRMA EQU   SMWKRSFM
SMWKPRSR EQU   SMWKRSCB+12
SMWKTSDS EQU   SMWKRSCB+8
SMWKFRPT EQU   SMWKRSCB+4
SMWKFRHD EQU   SMWKRSCB+2
SMWKFLGB EQU   SMWKRSCB+1
@NM00099 EQU   SMWKFLGA
SMWKEVRY EQU   SMWKFLGA
STORBTO  EQU   STORTO
STORB    EQU   STORFRM
RTM2TECB EQU   RTM2RYRG+64
RTM2RYRS EQU   RTM2RYRG
RTM2TRLS EQU   RTM2ENSN+16
RTM2TRFS EQU   RTM2ENSN+12
RTM2TRCU EQU   RTM2ENSN+8
@NM00098 EQU   RTM2WA+882
RTM2ERTM EQU   RTM2ERID+6
RTM2ERAS EQU   RTM2ERID+4
RTM2CPUI EQU   RTM2ERID+2
RTM2SEQ# EQU   RTM2ERID
RTM2RMSA EQU   RTM2RMIN+92
RTM2RMWS EQU   RTM2RMWA
RTM2RMPS EQU   RTM2RMIN
RTM2TRSA EQU   RTM2CVER+450
RTM2CREG EQU   RTM2CRG
RTM2RREG EQU   RTM2RRG
RTM2RBRG EQU   RTM2CVER+313
RTM2WARG EQU   RTM2CVER+312
@NM00097 EQU   RTM2CVER+310
RTM2CTRA EQU   RTM2RECH+12
RTM2STRA EQU   RTM2RECH+8
RTM2SKRA EQU   RTM2RECH+4
RTM2TRRA EQU   RTM2RECH
@NM00096 EQU   RTM2TRYR+3
@NM00095 EQU   RTM2TRF2
RTM2GMR  EQU   RTM2TRF2
RTM2PPR  EQU   RTM2TRF2
RTM2IOR  EQU   RTM2TRF2
RTM2AS3R EQU   RTM2TRF1+1
RTM2AS2R EQU   RTM2TRF1+1
RTM2AS1R EQU   RTM2TRF1+1
RTM2XFLG EQU   RTM2TRF1+1
RTM2XABD EQU   RTM2TRF1+1
RTM2XIP  EQU   RTM2TRF1+1
RTM2RTYS EQU   RTM2TRF1+1
RTM2RCD  EQU   RTM2TRF1+1
RTM2FMS  EQU   RTM2TRF1
RTM2VLDY EQU   RTM2TRF1
RTM2HOOK EQU   RTM2TRF1
RTM2PPS  EQU   RTM2TRF1
RTM2GMS  EQU   RTM2TRF1
RTM2IORS EQU   RTM2TRF1
RTM2IOHS EQU   RTM2TRF1
RTM2IOQS EQU   RTM2TRF1
RTM2TMER EQU   RTM2RECL+14
RTM2EQMN EQU   RTM2ECTL
RTM2EDEQ EQU   RTM2ECTL
RTM2EFRM EQU   RTM2ECTL
RTM2ECLS EQU   RTM2ECTL
RTM2ESNP EQU   RTM2ECTL
RTM2EOPN EQU   RTM2ECTL
RTM2EGET EQU   RTM2ECTL
RTM2EENQ EQU   RTM2ECTL
RTM2DFTK EQU   RTM2DCTL
RTM2DDEQ EQU   RTM2DCTL
RTM2DFRM EQU   RTM2DCTL
RTM2DCLS EQU   RTM2DCTL
RTM2DSNP EQU   RTM2DCTL
RTM2DOPN EQU   RTM2DCTL
RTM2DGET EQU   RTM2DCTL
RTM2DENQ EQU   RTM2DCTL
RTM2SCTX EQU   RTM2RECL+8
RTM2SCTR EQU   RTM2RECL+4
RTM2SCTC EQU   RTM2RECL
@NM00094 EQU   RTM2FLX2
RTM2CERX EQU   RTM2FLX2
RTM2RCRX EQU   RTM2FLX2
RTM2RTRX EQU   RTM2FLX1
RTM2LTX  EQU   RTM2FLX1
RTM2PRX  EQU   RTM2FLX1
RTM2CVX  EQU   RTM2FLX1
RTM2DWX  EQU   RTM2FLX1
RTM2ABX  EQU   RTM2FLX1
RTM2EOTX EQU   RTM2FLX1
RTM2MTX  EQU   RTM2FLX1
@NM00093 EQU   RTM2ASIR
RTM2UPRG EQU   RTM2ASIR
RTM2TRME EQU   RTM2ASIR
@NM00092 EQU   RTM2ABDP
RTM2SMDP EQU   RTM2ABDP
RTM2DMP1 EQU   RTM2ABDP
RTM2MEMT EQU   RTM2INTF+3
@NM00091 EQU   RTM2TSKT
RTM2PURG EQU   RTM2TSKT
@NM00090 EQU   RTM2INTF+1
@NM00089 EQU   RTM2CTLR
RTM2WRAP EQU   RTM2CTLR
RTM2TMEM EQU   RTM2CTLR
RTM2RETR EQU   RTM2CTLR
RTM2RECR EQU   RTM2CTLR
@NM00088 EQU   RTM2RCTL
RTM2JPAQ EQU   RTM2RCTL
RTM2LPAQ EQU   RTM2RCTL
RTM2BFTL EQU   RTM2RCTL
RTM2TRSW EQU   RTM2RCTL
RTM2WANA EQU   RTM2RCTL
RTM2WAIN EQU   RTM2RCTL
RTM2STA2 EQU   RTM2RCTL
RTM2STAT EQU   RTM2ABND
RTM2NDMP EQU   RTM2ABND
@NM00087 EQU   RTM2ABID
RTM2OERR EQU   RTM2ABID
RTM2SAV2 EQU   RTM2ABID
RTM2SAVE EQU   RTM2ABID
RTM2REG  EQU   RTM2ABID
RTM2PSW  EQU   RTM2ABID
RTM2ENQ  EQU   RTM2ABID
RTM2CB   EQU   RTM2ABID
RTM2MCTL EQU   RTM2SCTL+3
RTM2TCTL EQU   RTM2SCTL+2
@NM00086 EQU   RTM2CCTL+1
RTM2PPIO EQU   RTM2CCTL+1
RTM2INPG EQU   RTM2CCTL+1
RTM2NODP EQU   RTM2CCTL+1
RTM2RGEB EQU   RTM2CCTL+1
RTM2DEND EQU   RTM2CCTL+1
RTM2RSCN EQU   RTM2CCTL+1
RTM2CONT EQU   RTM2CCTL
RTM2SLIP EQU   RTM2CCTL
RTM2HEED EQU   RTM2CCTL
RTM2REED EQU   RTM2CCTL
RTM2ISPC EQU   RTM2CCTL
RTM2SQS  EQU   RTM2CCTL
RTM2CNCL EQU   RTM2CCTL
RTM2STPT EQU   RTM2CCTL
RTM2PKEY EQU   RTM2CVER+258
RTM2SFSA EQU   RTM2SFRG
RTM2PRWA EQU   RTM2CVER+182
RTM2SPWA EQU   RTM2CVER+174
RTM2DCBA EQU   RTM2CVER+170
RTM2ECBS EQU   RTM2SECB+16
RTM2LECB EQU   RTM2ECBA
RTM2DTCB EQU   RTM2SNAP+68
RTM2SNCC EQU   RTM2SNAP+64
RTM2DD   EQU   RTM2SNAP+56
RTM2LTO4 EQU   RTM2TO4
RTM2LFR4 EQU   RTM2FRM4
RTM2LTO3 EQU   RTM2TO3
RTM2LFR3 EQU   RTM2FRM3
RTM2LTO2 EQU   RTM2TO2
RTM2LFR2 EQU   RTM2FRM2
RTM2LTO1 EQU   RTM2TO1
RTM2LFR1 EQU   RTM2FRM1
RTM2DPLA EQU   RTM2SNAP
RTM2NXTP EQU   RTM2CTL2+5
RTM2SGP  EQU   RTM2PMKP
RTM2EUP  EQU   RTM2PMKP
RTM2DOP  EQU   RTM2PMKP
RTM2FPP  EQU   RTM2PMKP
RTM2CCP  EQU   RTM2PMKP
RTM2ILP  EQU   RTM2PMKP
RTM2INTP EQU   RTM2CTL2+2
RTM2SPVP EQU   RTM2MWPP
RTM2WATP EQU   RTM2MWPP
RTM2MCKP EQU   RTM2MWPP
@NM00085 EQU   RTM2MWPP
RTM2KEYP EQU   RTM2MWPP
RTM2EXTP EQU   RTM2CMKP
RTM2IOP  EQU   RTM2CMKP
RTM2NXTA EQU   RTM2CTL1+5
RTM2SGA  EQU   RTM2PMKA
RTM2EUA  EQU   RTM2PMKA
RTM2DOA  EQU   RTM2PMKA
RTM2FPA  EQU   RTM2PMKA
RTM2CCA  EQU   RTM2PMKA
RTM2ILA  EQU   RTM2PMKA
RTM2INTA EQU   RTM2CTL1+2
RTM2SPVA EQU   RTM2MWPA
RTM2WATA EQU   RTM2MWPA
RTM2MCKA EQU   RTM2MWPA
@NM00084 EQU   RTM2MWPA
RTM2KEYA EQU   RTM2MWPA
RTM2EXTA EQU   RTM2CMKA
RTM2IOA  EQU   RTM2CMKA
@NM00083 EQU   RTM2PARQ+1
RTM2RCDE EQU   RTM2PARQ
RTM2RYRB EQU   RTM2TRRC+42
RTM2RTYA EQU   RTM2TRRC+38
RTM2COMP EQU   RTM2TRRC+34
RTM2SIZE EQU   RTM2SPLL+1
RTM2SUBP EQU   RTM2SPLL
RTM2RTCA EQU   RTM2RTCD
RTM2SCBO EQU   RTM2SCBS+8
RTM2SCBN EQU   RTM2SCBS+4
RTM2SCBC EQU   RTM2SCBS
RTM2STAR EQU   RTM2TRRC+10
RTM2RBST EQU   RTM2TRRC+6
RTM2FIOB EQU   RTM2IOBP+1
@NM00082 EQU   RTM2IOBP
@NM00081 EQU   RTM2TRRC+1
@NM00080 EQU   RTM2IOFS
RTM2NIOP EQU   RTM2IOFS
RTM2NOIO EQU   RTM2IOFS
RTM2IOHT EQU   RTM2IOFS
RTM2IOQR EQU   RTM2IOFS
RTM2FMID EQU   RTM2TRRY+124
RTM2ERFL EQU   RTM2ERRD
RTM2MCIV EQU   RTM2ERRD
RTM2RPIV EQU   RTM2ERRD
RTM2MABD EQU   RTM2ERRD
RTM2CTS  EQU   RTM2ERRD
RTM2STAE EQU   RTM2ERRD
RTM2NRBE EQU   RTM2ERRD
RTM2CLUP EQU   RTM2ERRD
@NM00079 EQU   RTM2ERRC
RTM2EAS  EQU   RTM2ERRC
RTM2PERC EQU   RTM2ERRC
RTM2IRB  EQU   RTM2ERRC
RTM2STAI EQU   RTM2ERRC
RTM2STAF EQU   RTM2ERRC
RTM2SRBM EQU   RTM2ERRB
RTM2LDIS EQU   RTM2ERRB
RTM2ENRB EQU   RTM2ERRB
RTM2TYP1 EQU   RTM2ERRB
@NM00078 EQU   RTM2ERRB
RTM2PGIO EQU   RTM2ERRA
RTM2TEXC EQU   RTM2ERRA
RTM2SVCE EQU   RTM2ERRA
RTM2ABTM EQU   RTM2ERRA
RTM2SVCD EQU   RTM2ERRA
RTM2RKEY EQU   RTM2ERRA
RTM2PCHK EQU   RTM2ERRA
RTM2MCHK EQU   RTM2ERRA
RTM2TIME EQU   RTM2EEDH+20
RTM2RFSA EQU   RTM2EEDH+16
@NM00077 EQU   RTM2EEDH+14
RTM2VEQR EQU   RTM2RSR2
RTM2PGFX EQU   RTM2RSR2
RTM2FLSQ EQU   RTM2RSR2
RTM2FSQA EQU   RTM2RSR2
RTM2NUCL EQU   RTM2RSR2
RTM2SPER EQU   RTM2RSR2
RTM2INTC EQU   RTM2RSR2
RTM2OFLN EQU   RTM2RSR2
RTM2CHNG EQU   RTM2RSR1
RTM2MSER EQU   RTM2RSR1
@NM00076 EQU   RTM2RSR1
RTM2CPID EQU   RTM2EEDH+10
RTM2TERR EQU   RTM2MCHD
RTM2SOFT EQU   RTM2MCHD
RTM2INSF EQU   RTM2MCHD
RTM2ACR  EQU   RTM2MCHD
RTM2SCK  EQU   RTM2MCHD
RTM2PSWU EQU   RTM2MCHD
RTM2REGU EQU   RTM2MCHD
RTM2SKYF EQU   RTM2MCHD
@NM00075 EQU   RTM2MCHS
RTM2RSRF EQU   RTM2MCHS
RTM2RSRC EQU   RTM2MCHS
RTM2INVP EQU   RTM2MCHS
RTM2TSVL EQU   RTM2MCHS
RTM2RCDF EQU   RTM2MCHS
RTM2SRVL EQU   RTM2MCHS
RTM2SCKE EQU   RTM2STCK+4
RTM2SCKB EQU   RTM2STCK
RTM2ABEP EQU   RTM2TRRY+88
RTM2ABNM EQU   RTM2TRRY+80
RTM2TRAN EQU   RTM2AEC1+4
RTM2IPC1 EQU   RTM2ICD1
RTM2IMC1 EQU   RTM2ICD1
RTM2IPR1 EQU   RTM2ICD1
@NM00074 EQU   RTM2INC1
@NM00073 EQU   RTM2ILC1
RTM2IL1  EQU   RTM2ILC1
@NM00072 EQU   RTM2ILC1
@NM00071 EQU   RTM2AEC1
RTM2ADD1 EQU   RTM2NXT1+1
@NM00070 EQU   RTM2NXT1
@NM00069 EQU   RTM2EPSW+3
RTM2SGN1 EQU   RTM2INT1
RTM2EXP1 EQU   RTM2INT1
RTM2DEC1 EQU   RTM2INT1
RTM2FPO1 EQU   RTM2INT1
RTM2CC1  EQU   RTM2INT1
@NM00068 EQU   RTM2INT1
RTM2PGM1 EQU   RTM2MWP1
RTM2WAT1 EQU   RTM2MWP1
RTM2MCK1 EQU   RTM2MWP1
RTM2ECT1 EQU   RTM2MWP1
RTM2KEY1 EQU   RTM2MWP1
RTM2EXT1 EQU   RTM2EMK1
RTM2AIO1 EQU   RTM2EMK1
RTM2TRM1 EQU   RTM2EMK1
RTM2EAM1 EQU   RTM2EMK1
@NM00067 EQU   RTM2EMK1
RTM2PER1 EQU   RTM2EMK1
@NM00066 EQU   RTM2EMK1
RTM2ER15 EQU   RTM2EREG+60
RTM2ER14 EQU   RTM2EREG+56
RTM2ER13 EQU   RTM2EREG+52
RTM2ER12 EQU   RTM2EREG+48
RTM2ER11 EQU   RTM2EREG+44
RTM2ER10 EQU   RTM2EREG+40
RTM2ER9  EQU   RTM2EREG+36
RTM2ER8  EQU   RTM2EREG+32
RTM2ER7  EQU   RTM2EREG+28
RTM2ER6  EQU   RTM2EREG+24
RTM2ER5  EQU   RTM2EREG+20
RTM2ER4  EQU   RTM2EREG+16
RTM2ER3  EQU   RTM2EREG+12
RTM2ER2  EQU   RTM2EREG+8
RTM2ER1  EQU   RTM2EREG+4
RTM2ER0  EQU   RTM2EREG
RTM2CT   EQU   RTM2WA+56
RTM2VRBT EQU   RTM2WA+52
RTM2TCBT EQU   RTM2WA+48
RTM2SFWA EQU   RTM2WA+32
RTM2CC   EQU   RTM2CODE+1
@NM00065 EQU   RTM2CCF
RTM2EOT  EQU   RTM2CCF
RTM2EOM  EQU   RTM2CCF
RTM2R0DP EQU   RTM2CCF
RTM2STEP EQU   RTM2CCF
RTM2DREQ EQU   RTM2CCF
RTM2ASC  EQU   RTM2WA+24
RTM2VRBC EQU   RTM2WA+20
RTM2TCBC EQU   RTM2WA+16
RTM2CVT  EQU   RTM2WA+12
RTM2LGTH EQU   RTM2RT2D+1
RTM2SPID EQU   RTM2RT2D
RTM2ADDR EQU   RTM2DESC+4
RTM2ID   EQU   RTM2DESC
RMPLDCBL EQU   RMPL+20
RMPLRMWA EQU   RMPL+16
RMPLRBPA EQU   RMPL+12
RMPLTCBA EQU   RMPL+8
RMPLASCB EQU   RMPL+4
RMPLASID EQU   RMPL+2
RMPLFLG2 EQU   RMPL+1
@NM00064 EQU   RMPLFLG1
RMPLWT1M EQU   RMPLFLG1
RMPLJST  EQU   RMPLFLG1
RMPLRCOV EQU   RMPLFLG1
RMPLIPUF EQU   RMPLFLG1
RMPLRBPP EQU   RMPLFLG1
RMPLTERM EQU   RMPLFLG1
RMPLTYPE EQU   RMPLFLG1
SNPHDRA  EQU   SNPPARMS+20
SNPSTOR  EQU   SNPPARMS+16
SNPTCBA  EQU   SNPPARMS+12
SNPDCB   EQU   SNPPARMS+8
@NM00063 EQU   SNPPARMS+7
@NM00062 EQU   SNPPDATA
SNPSPLS  EQU   SNPPDATA
SNPPSW   EQU   SNPPDATA
SNPJPA   EQU   SNPPDATA
SNPLPA   EQU   SNPPDATA
SNPREGS  EQU   SNPPDATA
SNPSAVE2 EQU   SNPPDATA
SNPSAVE  EQU   SNPPDATA
@NM00061 EQU   SNPSDAT1
SNPERR   EQU   SNPSDAT1
SNPIO    EQU   SNPSDAT1
SNPDM    EQU   SNPSDAT0
SNPQCB   EQU   SNPSDAT0
SNPCB    EQU   SNPSDAT0
SNPTRT   EQU   SNPSDAT0
SNPSWA   EQU   SNPSDAT0
SNPLSQA  EQU   SNPSDAT0
SNPSQA   EQU   SNPSDAT0
SNPNUC   EQU   SNPSDAT0
@NM00060 EQU   SNPPARMS+2
SNPHDR   EQU   SNPFLAG
SNPSLIST EQU   SNPFLAG
SNPTCB   EQU   SNPFLAG
SNPID    EQU   SNPFLAG
SNPABEND EQU   SNPFLAG
SNPVS2EN EQU   SNPFLAG
SNPVS2   EQU   SNPFLAG
SNPSNAP  EQU   SNPFLAG
SNPIDENT EQU   SNPPARMS
RTCTISVC EQU   RTCTSDO4
RTCTSDOV EQU   RTCTSDMG
@NM00059 EQU   RTCTSDO4
@NM00058 EQU   RTCTSDO3
RTCTSDPH EQU   RTCTSDO3
RTCTSDPG EQU   RTCTSDO3
@NM00057 EQU   RTCTSDO2
RTCTSDPD EQU   RTCTSDO2
RTCTSDPC EQU   RTCTSDO2
RTCTSDPB EQU   RTCTSDO2
RTCTSDPA EQU   RTCTSDO2
RTCTSDP9 EQU   RTCTSDO2
RTCTSDP8 EQU   RTCTSDO2
RTCTSDP7 EQU   RTCTSDO1
RTCTSDP6 EQU   RTCTSDO1
RTCTSDP5 EQU   RTCTSDO1
RTCTSDP4 EQU   RTCTSDO1
RTCTSDP3 EQU   RTCTSDO1
RTCTSDP2 EQU   RTCTSDO1
RTCTSDP1 EQU   RTCTSDO1
RTCTSDP0 EQU   RTCTSDO1
RTCTISYM EQU   RTCTSD04
RTCTSMOV EQU   RTCTSMMG
@NM00056 EQU   RTCTSD04
RTCTSD03 EQU   RTCTMSYO+2
RTCTSD02 EQU   RTCTMSYO+1
RTCTSDS7 EQU   RTCTSD01
RTCTSDS6 EQU   RTCTSD01
RTCTSDS5 EQU   RTCTSD01
RTCTSDS4 EQU   RTCTSD01
RTCTSDS3 EQU   RTCTSD01
RTCTSDS2 EQU   RTCTSD01
RTCTSDS1 EQU   RTCTSD01
RTCTSDS0 EQU   RTCTSD01
RTCTISYU EQU   RTCTSUO4
RTCTSUOV EQU   RTCTSUMG
@NM00055 EQU   RTCTSUO4
RTCTSYDF EQU   RTCTSUO3
RTCTSYDE EQU   RTCTSUO3
RTCTSYDD EQU   RTCTSUO3
RTCTSYDC EQU   RTCTSUO3
RTCTSYDB EQU   RTCTSUO3
RTCTSYDA EQU   RTCTSUO3
RTCTSYD9 EQU   RTCTSUO3
RTCTSYD8 EQU   RTCTSUO3
@NM00054 EQU   RTCTSUO2
RTCTSYDH EQU   RTCTSUO2
RTCTSYDG EQU   RTCTSUO2
RTCTSYD7 EQU   RTCTSUO1
RTCTSYD6 EQU   RTCTSUO1
RTCTSYD5 EQU   RTCTSUO1
RTCTSYD4 EQU   RTCTSUO1
RTCTSYD3 EQU   RTCTSUO1
RTCTSYD2 EQU   RTCTSUO1
RTCTSYD1 EQU   RTCTSUO1
RTCTSYD0 EQU   RTCTSUO1
RTCTISAB EQU   RTCTSAO4
RTCTSAOV EQU   RTCTSAMG
@NM00053 EQU   RTCTSAO4
RTCTSADF EQU   RTCTSAO3
RTCTSADE EQU   RTCTSAO3
RTCTSADD EQU   RTCTSAO3
RTCTSADC EQU   RTCTSAO3
RTCTSADB EQU   RTCTSAO3
RTCTSADA EQU   RTCTSAO3
RTCTSAD9 EQU   RTCTSAO3
RTCTSAD8 EQU   RTCTSAO3
@NM00052 EQU   RTCTSAO2
RTCTSADH EQU   RTCTSAO2
RTCTSADG EQU   RTCTSAO2
RTCTSAD7 EQU   RTCTSAO1
RTCTSAD6 EQU   RTCTSAO1
RTCTSAD5 EQU   RTCTSAO1
RTCTSAD4 EQU   RTCTSAO1
RTCTSAD3 EQU   RTCTSAO1
RTCTSAD2 EQU   RTCTSAO1
RTCTSAD1 EQU   RTCTSAO1
RTCTSAD0 EQU   RTCTSAO1
RTCTZZZ5 EQU   RTCT+340
RTCTZZZ4 EQU   RTCT+336
RTCTMRMQ EQU   RTCT+332
RTCTSDF5 EQU   RTCTSDF3+3
RTCTSDEN EQU   RTCTSDF4
RTCTSDEQ EQU   RTCTSDF4
RTCTSDTR EQU   RTCTSDF4
RTCTSDRM EQU   RTCTSDF4
RTCTSDAN EQU   RTCTSDF4
RTCTSDNC EQU   RTCTSDF4
RTCTSDSS EQU   RTCTSDF4
RTCTSDAS EQU   RTCTSDF3
@NM00051 EQU   RTCTC3PO
@NM00050 EQU   RTCTR2D2
RTCTSDFX EQU   RTCTSDF2
RTCTSDRW EQU   RTCTSDF2
RTCTSDSL EQU   RTCTSDF2
RTCTSDWF EQU   RTCTSDF2
RTCTSDLA EQU   RTCTSDF2
RTCTSDDI EQU   RTCTSDF2
RTCTSDTQ EQU   RTCTSDF2
RTCTSDMR EQU   RTCTSDF2
RTCTSDSC EQU   RTCTSDF1
RTCTSDRS EQU   RTCTSDF1
RTCTSDSD EQU   RTCTSDF1
RTCTSDEP EQU   RTCTSDF1
RTCTSDMA EQU   RTCTSDF1
RTCTSDSH EQU   RTCTSDF1
RTCTSDND EQU   RTCTSDF1
RTCTSDNO EQU   RTCTSDF1
RTCTZZZ2 EQU   RTCT+257
RTCTSDPR EQU   RTCTSDI+2
RTCTINDX EQU   RTCTSDI+1
@NM00049 EQU   RTCTASO2
RTCTASNQ EQU   RTCTASO2
RTCTASNA EQU   RTCTASO2
RTCTASNS EQU   RTCTASO2
RTCTASSU EQU   RTCTASO2
RTCTASSW EQU   RTCTASO2
RTCTASCS EQU   RTCTASO2
RTCTASTR EQU   RTCTASO1
RTCTASLP EQU   RTCTASO1
RTCTASRG EQU   RTCTASO1
RTCTASLS EQU   RTCTASO1
RTCTASSQ EQU   RTCTASO1
RTCTASNU EQU   RTCTASO1
RTCTASPS EQU   RTCTASO1
RTCTASAL EQU   RTCTASO1
RTCTSDO  EQU   RTCTOPT+12
RTCTSYO  EQU   RTCTOPT+8
RTCTSUO  EQU   RTCTOPT+4
RTCTSAO  EQU   RTCTOPT
RTCTXXX2 EQU   RTCT+234
RTCTETIM EQU   RTCTERID+6
RTCTEASD EQU   RTCTERID+4
RTCTECPU EQU   RTCTERID+2
RTCTESEQ EQU   RTCTERID
RTCTSDWK EQU   RTCT+220
RTCTTDCB EQU   RTCT+184
RTCTSEQ# EQU   RTCT+178
RTCTXXX1 EQU   RTCT+177
@NM00048 EQU   RTCTRFLG
RTCTRSTF EQU   RTCTRFLG
RTCTRPER EQU   RTCTRFLG
RTCTRTER EQU   RTCTRFLG
RTCTTEST EQU   RTCT+172
RTCTMSRB EQU   RTCT+168
RTCTMLCK EQU   RTCT+164
RTCTFMT  EQU   RTCT+160
RTCTSDIP EQU   RTCTSDPL
RTCTDEV  EQU   RTCTSDDS+8
RTCTDCB  EQU   RTCTSDDS+4
@NM00047 EQU   RTCTFLG
RTCTDETP EQU   RTCTFLG
RTCTDSUS EQU   RTCTFLG
RTCTDSST EQU   RTCTFLG
RTCTDSNM EQU   RTCTSDDS
RTCTRCB  EQU   RTCT+32
RTCTRECB EQU   RTCT+28
RTCTFASB EQU   RTCT+24
RTCTMECB EQU   RTCT+20
RTCTSDID EQU   RTCT+18
RTCTYYY1 EQU   RTCT+16
RTCTSY04 EQU   RTCTSYD+3
RTCTSY03 EQU   RTCTSYD+2
RTCTSY02 EQU   RTCTSYD+1
RTCTSYM7 EQU   RTCTSY01
RTCTSYM6 EQU   RTCTSY01
RTCTSYM5 EQU   RTCTSY01
RTCTSYM4 EQU   RTCTSY01
RTCTSYM3 EQU   RTCTSY01
RTCTSYM2 EQU   RTCTSY01
RTCTSYM1 EQU   RTCTSY01
RTCTSYM0 EQU   RTCTSY01
RTCTSUP4 EQU   RTCTSUP+3
RTCTSUDF EQU   RTCTSUP3
RTCTSUDE EQU   RTCTSUP3
RTCTSUDD EQU   RTCTSUP3
RTCTSUDC EQU   RTCTSUP3
RTCTSUDB EQU   RTCTSUP3
RTCTSUDA EQU   RTCTSUP3
RTCTSUD9 EQU   RTCTSUP3
RTCTSUD8 EQU   RTCTSUP3
@NM00046 EQU   RTCTSUP2
RTCTSUDH EQU   RTCTSUP2
RTCTSUDG EQU   RTCTSUP2
RTCTSUD7 EQU   RTCTSUP1
RTCTSUD6 EQU   RTCTSUP1
RTCTSUD5 EQU   RTCTSUP1
RTCTSUD4 EQU   RTCTSUP1
RTCTSUD3 EQU   RTCTSUP1
RTCTSUD2 EQU   RTCTSUP1
RTCTSUD1 EQU   RTCTSUP1
RTCTSUD0 EQU   RTCTSUP1
RTCTSAP4 EQU   RTCTSAP+3
RTCTSABF EQU   RTCTSAP3
RTCTSABE EQU   RTCTSAP3
RTCTSABD EQU   RTCTSAP3
RTCTSABC EQU   RTCTSAP3
RTCTSABB EQU   RTCTSAP3
RTCTSABA EQU   RTCTSAP3
RTCTSAB9 EQU   RTCTSAP3
RTCTSAB8 EQU   RTCTSAP3
@NM00045 EQU   RTCTSAP2
RTCTSABH EQU   RTCTSAP2
RTCTSABG EQU   RTCTSAP2
RTCTSAB7 EQU   RTCTSAP1
RTCTSAB6 EQU   RTCTSAP1
RTCTSAB5 EQU   RTCTSAP1
RTCTSAB4 EQU   RTCTSAP1
RTCTSAB3 EQU   RTCTSAP1
RTCTSAB2 EQU   RTCTSAP1
RTCTSAB1 EQU   RTCTSAP1
RTCTSAB0 EQU   RTCTSAP1
RTCTNAME EQU   RTCT
@NM00044 EQU   FRRSFLGS+1
@NM00043 EQU   FRRSFLG1
FRRSNEST EQU   FRRSFLG1
FRRSRCUR EQU   FRRSFLG1
FRRSENTS EQU   FRRS+84
FRRSRTMW EQU   FRRS+16
@NM00008 EQU   PRDINPUT+382
@NM00007 EQU   PRDINPUT+334
PRDERRID EQU   PRDINPUT+324
@NM00006 EQU   PRDINPUT+292
PRDCVT   EQU   PRDINPUT+288
PRDPSW   EQU   PRDREGS+160
PRDCR    EQU   PRDREGS+96
PRDGPR   EQU   PRDREGS+32
PRDTITLE EQU   PRDINPUT+20
PRDTODVL EQU   PRDINPUT+12
PRDMODNM EQU   PRDINPUT+4
PRDRECID EQU   PRDINPUT+1
GBLCELCT EQU   GDA+60
GLBLCELL EQU   GDA+56
CSASPQEP EQU   GDA+52
PFSTCPAB EQU   GDA+48
VRWLEL   EQU   VRWAITQ+4
VRWFEL   EQU   VRWAITQ
VRPLEL   EQU   VRPOSTQ+4
VRPFEL   EQU   VRPOSTQ
SQASPLFT EQU   GDA+28
SQASPQEP EQU   GDA+24
VRPQEP   EQU   GDA+12
CSAPQEP  EQU   GDA+8
VRDREG   EQU   GDA+4
RESV     EQU   GVSMFLAG+1
@NM00005 EQU   GDAFLAGS
WAITQUE  EQU   GDAFLAGS
SQATHRS2 EQU   GDAFLAGS
SQATHRS1 EQU   GDAFLAGS
GDAFLAG2 EQU   GDAFLAGS
NIPFOURK EQU   GDAFLAGS
GDAFLAG1 EQU   GDAFLAGS
@NM00004 EQU   ERRWORK+18
ERRSAVE  EQU   ERRWORK+17
@NM00003 EQU   ERRFLAG3
ERRSRBSD EQU   ERRFLAG3
ERRDLOCK EQU   ERRFLAG3
ERRTRMNT EQU   ERRFLAG3
ERRCSDT  EQU   ERRFLAG3
ERRSDENQ EQU   ERRFLAG3
ERRENDSW EQU   ERRFLAG3
ERRNOTRM EQU   ERRFLAG3
ERRWKADR EQU   ERRWORK+8
ERRRUBSW EQU   ERRWORK+2
ERRCDOUT EQU   ERRFLGS2
ERRCUDMP EQU   ERRFLGS2
ERRCMSLK EQU   ERRFLGS2
ERRWKFIX EQU   ERRFLGS2
ERRSDFIX EQU   ERRFLGS2
ERRINIO  EQU   ERRFLGS2
ERRSLOCK EQU   ERRFLGS1
ERRGTFGO EQU   ERRFLGS1
ERRTCBND EQU   ERRFLGS1
ERRBFBIT EQU   ERRFLGS1
ERRSDBIT EQU   ERRFLGS1
ERRESTAE EQU   ERRFLGS1
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00002 EQU   CVTFIX+248
@NM00001 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTBAH   EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTRV490 EQU   CVTMAP+388
CVTSU    EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTVS1B  EQU   CVTOPTB
CVTVS1A  EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
ASXBEND  EQU   ASXB+232
ASXBRV25 EQU   ASXB+228
ASXBRV24 EQU   ASXB+224
ASXBPT0E EQU   ASXB+220
ASXBCRB4 EQU   ASXBCASW+3
ASXBCRB3 EQU   ASXBCASW+2
ASXBCRB2 EQU   ASXBCASW+1
ASXBCR06 EQU   ASXBCRB1
ASXBCR05 EQU   ASXBCRB1
ASXBCR04 EQU   ASXBCRB1
ASXBCR03 EQU   ASXBCRB1
ASXBCR02 EQU   ASXBCRB1
ASXBCR01 EQU   ASXBCRB1
ASXBTFD  EQU   ASXBCRB1
ASXBPIP  EQU   ASXBCRB1
ASXBCTDC EQU   ASXB+212
ASXBTDCB EQU   ASXB+208
ASXBRV19 EQU   ASXB+204
ASXBSENV EQU   ASXBSECR+1
ASXBRV34 EQU   ASCBSFLG
ASXBRV33 EQU   ASCBSFLG
ASXBRV32 EQU   ASCBSFLG
ASXBRV31 EQU   ASCBSFLG
ASXBRV30 EQU   ASCBSFLG
ASXBRV29 EQU   ASCBSFLG
ASXBRV28 EQU   ASCBSFLG
ASXBRV27 EQU   ASCBSFLG
ASXBUSER EQU   ASXB+192
ASXBLSRB EQU   ASXBAEQ+20
ASXBFSRB EQU   ASXBAEQ+16
ASXBLRQE EQU   ASXBAEQ+12
ASXBFRQE EQU   ASXBAEQ+8
ASXBLIQE EQU   ASXBAEQ+4
ASXBFIQE EQU   ASXBAEQ
ASXBETSK EQU   ASXB+164
ASXBSIRB EQU   ASXB+160
ASXBPSWD EQU   ASXB+152
ASXBPRG  EQU   ASXB+136
ASXBRV26 EQU   ASXB+132
ASXBOUSB EQU   ASXB+128
ASXBDDR  EQU   ASXB+124
ASXBRCTD EQU   ASXB+120
ASXBRSMD EQU   ASXB+116
ASXBSPSA EQU   ASXB+112
ASXBFRWA EQU   ASXB+108
ASXBFLSA EQU   ASXB+36
ASXBIHSA EQU   ASXB+32
ASXBRV15 EQU   ASXB+28
ASXBRV14 EQU   ASXB+24
ASXBLWA  EQU   ASXB+20
ASXBMPST EQU   ASXB+16
ASXBRS00 EQU   ASXB+14
ASXBTCBS EQU   ASXB+12
ASXBASXB EQU   ASXB
ASXBEGIN EQU   ASXB
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSMA EQU   ASCBRSM+1
ASCBRV54 EQU   ASCBRSMF
ASCBRV53 EQU   ASCBRSMF
ASCBRV52 EQU   ASCBRSMF
ASCBRV51 EQU   ASCBRSMF
ASCBVEQR EQU   ASCBRSMF
ASCBN2LP EQU   ASCBRSMF
ASCB1LPU EQU   ASCBRSMF
ASCB2LPU EQU   ASCBRSMF
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
@NM00042 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00041 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00040 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00039 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSAULCMS EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00038 EQU   FLCFSA
@NM00037 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00036 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00035 EQU   FLCIOA
@NM00034 EQU   FLCMCLA+15
@NM00033 EQU   FLCMCLA+14
@NM00032 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00031 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00030 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00029 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00028 EQU   FLCPER
@NM00027 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00026 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00025 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00024 EQU   FLCPIILC
@NM00023 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00022 EQU   FLCSVILC
@NM00021 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00020 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00019 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00209 EQU   @RC00188
@RF00430 EQU   CHECKEND
@RF00437 EQU   @EL00008
@RF00535 EQU   @EL00011
@ENDDATA EQU   *
         END   IEAVTSSE,(C'PLS1206',0800,78208)
