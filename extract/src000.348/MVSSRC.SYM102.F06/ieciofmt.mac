         TITLE 'IECIOFMT-MAINLINE FOR IOS CONTROL BLOCK FORMATTER      *
                        '
IECIOFMT CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IECIOFMT  77.299'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @10,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@10                                         0001
*   TREG2=ABDPLPTR;                 /* SAVE PARM LIST POINTER      0136
*                                                            @ZA26256*/
         LR    TREG2,ABDPLPTR                                      0136
*   IF ADPLSNPR=OFF THEN            /* SNAP CALLER?          @ZA26256*/
         TM    ADPLSNPR(ABDPLPTR),B'10000000'                      0137
         BNZ   @RF00137                                            0137
*     DO;                           /* YES....               @ZA26256*/
*       PARMPTR=ADDR(ADPLCOM2);     /* ADDRESS OF GETMAIN LIST     0139
*                                                            @ZA26256*/
         LA    @14,ADPLCOM2(,ABDPLPTR)                             0139
         LR    PARMPTR,@14                                         0139
*       GENERATE REFS(DREG,ADPLCOM1);                              0140
*                                                         /* @ZA26256*/
     GETMAIN EC,LV=@ENDDATD-@DATD,SP=253,A=ADPLCOM1(TREG2),  @ZA26256  X
               MF=(E,(1))                                    @ZA26256
*     END;                          /* END... SNAP CALLER    @ZA26256*/
*   ELSE                            /* PRINT DUMP IS CALLER...     0142
*                                                            @ZA26256*/
*     DO;                           /*                       @ZA26256*/
         B     @RC00137                                            0142
@RF00137 DS    0H                                                  0143
*       TREG6=0;                    /*                       @ZA26256*/
         SLR   TREG6,TREG6                                         0143
*       GENERATE REFS(TREG6,ADPLSBPL);                             0144
*                                                         /* @ZA26256*/
     IC TREG6,ADPLSBPL(TREG2)                             /* @ZA26256*/
*       PARMPTR=ADDR(ADPLCOM2);     /*                       @ZA26256*/
         LA    @14,ADPLCOM2(,ABDPLPTR)                             0145
         LR    PARMPTR,@14                                         0145
*       GENERATE REFS(TREG6,ADPLSBPL,ADPLCOM1);                    0146
*                                                         /* @ZA26256*/
     GETMAIN EC,LV=@ENDDATD-@DATD,SP=(TREG6),             /* @ZA26256*/X
               A=ADPLCOM1(TREG2),MF=(E,(1))               /* @ZA26256*/
*     END;                          /* END... PRINT DUMP CALLER    0147
*                                                            @ZA26256*/
*   IF RCREG^=0 THEN                /* ERROR ON GETMAIN?     @ZA26256*/
@RC00137 LTR   RCREG,RCREG                                         0148
         BZ    @RF00148                                            0148
*     DO;                           /* YES...                @ZA26256*/
*       IF ADPLSNPR=OFF THEN        /* SNAP CALLER?          @ZA26256*/
         TM    ADPLSNPR(ABDPLPTR),B'10000000'                      0150
         BNZ   @RF00150                                            0150
*         RETURN CODE(8);           /* YES... HE WANTS RC TO BE 8  0151
*                                                            @ZA26256*/
         LA    @15,8                                               0151
         L     @14,12(,@13)                                        0151
         LM    @00,@12,20(@13)                                     0151
         BR    @14                                                 0151
*       ELSE                        /*                       @ZA26256*/
*         RETURN CODE(4);           /* NO... OTHER GUY WANTS A 4   0152
*                                                            @ZA26256*/
@RF00150 LA    @15,4                                               0152
         L     @14,12(,@13)                                        0152
         LM    @00,@12,20(@13)                                     0152
         BR    @14                                                 0152
*     END;                          /* END... ERROR CODE     @ZA26256*/
*   ABDPLPTR=TREG2;                 /* RESTORE PARM POINTER  @ZA26256*/
@RF00148 LR    ABDPLPTR,TREG2                                      0154
*   DREG=ADPLCOM1;                  /* SAVE GETMAIN ADDRESS  @ZA26256*/
         L     DREG,ADPLCOM1(,ABDPLPTR)                            0155
*   GENERATE REFS(SAVEA1,REG13);                                   0156
*                             /* SAVE AREA CHAINING FOLLOWS  @ZA26256*/
  USING @DATD,DREG                                        /* @ZA26256*/
  ST REG13,SAVEA1+4                                       /* @ZA26256*/
  LA R5,SAVEA1                                            /* @ZA26256*/
  ST R5,8(REG13)                                          /* @ZA26256*/
  LR REG13,R5                                             /* @ZA26256*/
*   RFY                                                            0157
*    (TREG2,                                                       0157
*     TREG6,                                                       0157
*     R5) UNRSTD;                   /*                       @ZA26256*/
*                                                                  0157
*   /*****************************************************************/
*   /*                                                               */
*   /* ESTABLISH THE ESTAE                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0158
*   ESTAERR=ZERO;                   /* TURN OFF ESTAE BITS   @ZM45067*/
         SLR   @14,@14                                             0158
         ST    @14,ESTAERR                                         0158
*   STM(VADR,RCREG,RTYREGS);        /* REGS FOR THE ESTAE UNEXPECTED
*                                      RETRY RETRY           @ZM45067*/
         STM   VADR,RCREG,RTYREGS                                  0159
*   LCALREGS=RTYREGS;               /* REGS FOR EXPECTED RETRY     0160
*                                                            @ZM45067*/
         MVC   LCALREGS(64),RTYREGS                                0160
*   SAVEREG1=ABDPLPTR;              /* SAVE REGISTER 1 ACROSS ESTAE  */
         LR    SAVEREG1,ABDPLPTR                                   0161
*   ESTAEXEC(1:ESTALEN)=ESTALIST(1:ESTALEN);/* MOVE LIST INTO      0162
*                                      AUTOMATIC AREA                */
         L     @14,ESTALEN                                         0162
         BCTR  @14,0                                               0162
         EX    @14,@SM02635                                        0162
*   GEN FLOWS(ESTAERTN)(ESTAE  ESTAERTN,PARAM=(DREG),MF=(E,ESTAEXEC));
         ESTAE  ESTAERTN,PARAM=(DREG),MF=(E,ESTAEXEC)
*                                   /* ESTAE WITH PARAM POINTING TO
*                                      ALL THE AUTOMATIC DATA FOR  0164
*                                      THIS MODULE                   */
*   IF RCREG=ZERO THEN              /* ESTAE RESOLVED FINE           */
         SLR   @14,@14                                             0164
         CR    RCREG,@14                                           0164
         BNE   @RF00164                                            0164
*     DO;                                                          0165
*       ABDPLPTR=SAVEREG1;          /* RESTORE REG 1                 */
*                                                                  0166
         LR    ABDPLPTR,SAVEREG1                                   0166
*       /*************************************************************/
*       /*                                                           */
*       /* CHECK IF THE DUMP LEVEL IS COMPATIBLE AND THE NEEDED INFO */
*       /* IS PASSED                                                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0167
*       IF ADPLTCB=ZERO×ADPLCVT=ZERO THEN/* CALLER DID NOT PASS TCB
*                                      OR CVT ADDRESS                */
         C     @14,ADPLTCB(,ABDPLPTR)                              0167
         BE    @RT00167                                            0167
         C     @14,ADPLCVT(,ABDPLPTR)                              0167
         BNE   @RF00167                                            0167
@RT00167 DS    0H                                                  0168
*         BUFFER(1:LENGTH(NOINF))=NOINF;                           0168
         L     @14,ADPLBUF(,ABDPLPTR)                              0168
         MVC   BUFFER(87,@14),NOINF                                0168
*       ELSE                        /* NEEDED TCB AND CVT PASSED     */
*         DO;                                                      0169
         B     @RC00167                                            0169
@RF00167 DS    0H                                                  0170
*           VADR=ADDR(CVTDCB);      /* OPERATING SYSTEM BYTE         */
         L     @14,CVTPTR(,ABDPLPTR)                               0170
         LA    VADR,CVTDCB(,@14)                                   0170
*           CALL ACCESRTN;          /* ACCESS IT                     */
         BAL   @14,ACCESRTN                                        0171
*           IF RCREG^=ZERO THEN     /* ACCESS ERROR                  */
         LTR   RCREG,RCREG                                         0172
         BZ    @RF00172                                            0172
*             BUFFER(1:LENGTH(INCOMP))=INCOMP;                     0173
         L     @14,ADPLBUF(,ABDPLPTR)                              0173
         MVC   BUFFER(62,@14),INCOMP                               0173
*           ELSE                    /* FOUND OPERATING SYSTEM BYTE   */
*             DO;                                                  0174
         B     @RC00172                                            0174
@RF00172 DS    0H                                                  0175
*               IF ADPLSYTM=ON×(DATABYTE&LOWBIT)^=LOWBIT THEN/* THE
*                                      DUMP SYSTEM WAS NOT AN MVS  0175
*                                      SYSTEM                        */
         TM    ADPLSYTM(ABDPLPTR),B'01000000'                      0175
         BO    @RT00175                                            0175
         SLR   @14,@14                                             0175
         IC    @14,LOWBIT                                          0175
         SLR   @12,@12                                             0175
         IC    @12,DATABYTE(,DATAPTR)                              0175
         NR    @12,@14                                             0175
         CR    @12,@14                                             0175
         BE    @RF00175                                            0175
@RT00175 DS    0H                                                  0176
*                 BUFFER(1:LENGTH(INCOMP))=INCOMP;                 0176
         L     @14,ADPLBUF(,ABDPLPTR)                              0176
         MVC   BUFFER(62,@14),INCOMP                               0176
*               ELSE                /* SYSTEM IS MVS                 */
*                 DO;                                              0177
*                                                                  0177
         B     @RC00175                                            0177
@RF00175 DS    0H                                                  0178
*                   /*************************************************/
*                   /*                                               */
*                   /* DETERMINE IF THE IOS CONTROL BLOCKS ARE       */
*                   /* WANTED. THEY ARE ALWAYS FORMATTED IF THE      */
*                   /* CALLER IS SNAP. IF AMDPRDMP IS CALLER, THE    */
*                   /* TASK MUST BE AN ABENDING TASK.                */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0178
*                   VADR=ADDR(TCBCMP);/* TCB COMPLETION CODE         */
         L     @14,ADPLTCB(,ABDPLPTR)                              0178
         LA    VADR,TCBCMP(,@14)                                   0178
*                   CALL ACCESRTN;  /* ACCESS IT                     */
         BAL   @14,ACCESRTN                                        0179
*                   IF RCREG^=ZERO THEN                            0180
         LTR   RCREG,RCREG                                         0180
         BZ    @RF00180                                            0180
*                     BUFFER(1:LENGTH(TCBERR))=TCBERR;/* COULD NOT 0181
*                                      ACCESS TCB TO FIND COMPLETION
*                                      CODE                          */
         L     @14,ADPLBUF(,ABDPLPTR)                              0181
         MVC   BUFFER(61,@14),TCBERR                               0181
*                   ELSE            /* FOUND COMPLETION CODE         */
*                     DO;                                          0182
         B     @RC00180                                            0182
@RF00180 DS    0H                                                  0183
*                       COMPC=DATAWORD;/* SAME COMPLETION CODE       */
         L     COMPC,DATAWORD(,DATAPTR)                            0183
*                       VADR=ADDR(TCBFLGS1);/* ABEND CODES BYTE      */
         L     @14,ADPLTCB(,ABDPLPTR)                              0184
         LA    VADR,TCBFLGS1(,@14)                                 0184
*                       CALL ACCESRTN;/* ACCESS IT                   */
         BAL   @14,ACCESRTN                                        0185
*                       IF RCREG^=ZERO THEN                        0186
         LTR   RCREG,RCREG                                         0186
         BZ    @RF00186                                            0186
*                         BUFFER(1:LENGTH(TCBERR))=TCBERR;/* TROUBLE
*                                      ACCESSING TCB                 */
         L     @14,ADPLBUF(,ABDPLPTR)                              0187
         MVC   BUFFER(61,@14),TCBERR                               0187
*                       ELSE        /* FOUND ABEND FLAGS             */
*                         DO;                                      0188
         B     @RC00186                                            0188
@RF00186 DS    0H                                                  0189
*                           IF COMPC^=ZERO×/* ABEND COMPLETION CODE
*                                      IN TCB                        */
*                               (FLGS1&HIGHON)=HIGHON×/* ABEND IN  0189
*                                      PROGRESS ON TCB               */
*                               ADPLSNPR=OFF THEN/* THE CALLER IS  0189
*                                      SNAP - THE CONTROL BLOCKS ARE
*                                      WANTED                        */
         LTR   COMPC,COMPC                                         0189
         BNZ   @RT00189                                            0189
         SLR   @14,@14                                             0189
         IC    @14,HIGHON                                          0189
         SLR   @11,@11                                             0189
         IC    @11,FLGS1(,DATAPTR)                                 0189
         NR    @11,@14                                             0189
         CR    @11,@14                                             0189
         BE    @RT00189                                            0189
         TM    ADPLSNPR(ABDPLPTR),B'10000000'                      0189
         BNZ   @RF00189                                            0189
@RT00189 DS    0H                                                  0190
*                             DO;                                  0190
*                               CALL EXCPDRTN;/* FIND EXCP DEBUG AREA
*                                      RTN                           */
         BAL   @14,EXCPDRTN                                        0191
*                               CALL UCBRTN;/* FIND UCBS ROUTINE     */
         BAL   @14,UCBRTN                                          0192
*                             END;  /* END CONTROL BLOCKS WANTED     */
*                           ELSE                                   0194
*                             ;     /* CONTROL BLOCKS NOT WANTED     */
@RF00189 DS    0H                                                  0195
*                         END;      /* END FOUND ABEND FLAGS         */
*                     END;          /* END FOUND COMPLETION CODE     */
@RC00186 DS    0H                                                  0197
*                 END;              /* END MVS SYSTEM                */
@RC00180 DS    0H                                                  0198
*             END;                  /* END OPERATING SYSTEM BYTE   0198
*                                      FOUND                         */
@RC00175 DS    0H                                                  0199
*         END;                      /* END NEEDED TCB & CVT WERE   0199
*                                      PASSED                        */
@RC00172 DS    0H                                                  0200
*TROUBLE:                           /* ENTRY FROM ESTAE TO PRINT   0200
*                                      MESSAGE                       */
*       CALL PRINT;                 /* EITHER BLANK OR ERROR MSG     */
@RC00167 DS    0H                                                  0200
TROUBLE  L     @15,ADPLPRNT(,ABDPLPTR)                             0200
         BALR  @14,@15                                             0200
*       GEN(ESTAE 0);               /* DROP THE ESTAE                */
         ESTAE 0
*     END;                          /* END ESTAE ESTABLISHED         */
*   ELSE                                                           0203
*     ;                             /* ESTAE COULD NOT BE ESTABLISHED*/
@RF00164 DS    0H                                                  0204
*   IF ADPLSNPR=OFF THEN            /* SNAP THE CALLER?      @ZA26256*/
         TM    ADPLSNPR(ABDPLPTR),B'10000000'                      0204
         BNZ   @RF00204                                            0204
*     DO;                           /* YES...                @ZA26256*/
*       GENERATE;                                                  0206
*                                                         /* @ZA26256*/
      L REG13,4(REG13)               RESTORE SAVE AREA PTR   @ZA26256
      FREEMAIN R,LV=@ENDDATD-@DATD,SP=253,A=(DREG)        /* @ZA26256*/
*     END;                          /* END... SNAP CALLER    @ZA26256*/
*   ELSE                            /* NO... PRINT DUMP CALLER     0208
*                                                            @ZA26256*/
*     DO;                           /*                       @ZA26256*/
         B     @RC00204                                            0208
@RF00204 DS    0H                                                  0209
*       RFY                                                        0209
*        (TREG6) RSTD;              /*                       @ZA26256*/
*       GENERATE;                                                  0210
*                                                         /* @ZA26256*/
       L REG13,4(REG13)              RESTORE SAVE AREA PTR   @ZA26256
       IC TREG6,ADPLSBPL(ABDPLPTR)   GET SUBPOOL             @ZA26256
       FREEMAIN R,LV=@ENDDATD-@DATD,SP=(TREG6),A=(DREG)      @ZA26256
*     END;                          /* END... PRINT DUMP CALL      0211
*                                                            @ZA26256*/
*   RFY                                                            0212
*    (TREG6) UNRSTD;                /*                       @ZA26256*/
@RC00204 DS    0H                                                  0213
*   RETURN CODE(0);                 /* RETURN TO CALLER WITH A RETURN
*                                      CODE OF 0 SO THE CALLER WILL
*                                      CONTINUE FORMATTING THE DUMP  */
         SLR   @15,@15                                             0213
         L     @14,12(,@13)                                        0213
         LM    @00,@12,20(@13)                                     0213
         BR    @14                                                 0213
*EXCPDRTN:                                                         0214
*   PROC OPTIONS(SAVE(14));                                        0214
*                                                                  0214
@EL00001 DS    0H                                                  0214
@EF00001 DS    0H                                                  0214
@ER00001 LM    @14,@12,12(@13)                                     0214
         BR    @14                                                 0214
EXCPDRTN ST    @14,@SA00002                                        0214
*/********************************************************************/
*/* FUNCTION -                                                     0215
*      ROUTINE TO SET THE POINTER TO THE EXCPD(XDBA) INTO THE PARAMETER
*      LIST AND CALL THE EXCPD(XDBA) FORMATTER(IECIOEXD).          0215
*                                                                  0215
*   INPUT -                                                        0215
*      REGISTER 1 POINTS TO THE PARMLIST PASSED BY THE CALLER      0215
*                                                                  0215
*   CALLS -                                                        0215
*      ACCESRTN,IECIOEXD, AND PRINT                                0215
*                                                                  0215
*   CALLED BY -                                                    0215
*      IECIOFMT                                                    0215
*                                                                  0215
*   RETURNS TO -                                                   0215
*      CALLER                                                      0215
*                                                                    */
*/********************************************************************/
*                                                                  0215
*   VADR=ADDR(TCBEXCPD);            /* POINTER TO EXCPD              */
         L     @14,ADPLTCB(,ABDPLPTR)                              0215
         LA    VADR,TCBEXCPD(,@14)                                 0215
*   CALL ACCESRTN;                  /* ACCESS IT                     */
         BAL   @14,ACCESRTN                                        0216
*   IF RCREG^=ZERO THEN             /* ACCESS ERROR                  */
         LTR   RCREG,RCREG                                         0217
         BZ    @RF00217                                            0217
*     DO;                                                          0218
*       BUFFER(1:LENGTH(EXDERR))=EXDERR;/* ERROR MESSAGE             */
         L     @14,ADPLBUF(,ABDPLPTR)                              0219
         MVC   BUFFER(67,@14),EXDERR                               0219
*       CALL PRINT;                 /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0220
         BALR  @14,@15                                             0220
*     END;                          /* END ACCESS ERROR              */
*   ELSE                            /* FOUND EXCPD PTR               */
*     DO;                                                          0222
         B     @RC00217                                            0222
@RF00217 DS    0H                                                  0223
*       IF DATAADR^=ZERO THEN       /* NON-ZERO PTR                  */
         ICM   @14,7,DATAADR(DATAPTR)                              0223
         BZ    @RF00223                                            0223
*         DO;                                                      0224
*           CALL PRINT;             /* SPACE 3 BLANKS                */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0225
         BALR  @14,@15                                             0225
*           CALL PRINT;             /* BLANK                         */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0226
         BALR  @14,@15                                             0226
*           CALL PRINT;             /* BLANK                         */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0227
         BALR  @14,@15                                             0227
*           ADPLCOM1=ADDR(ESTAPARM);/* PASS ESTAE PARM LIST TO     0228
*                                      INDIVIDUAL FORMAT ROUTINES    */
         LA    @14,ESTAPARM                                        0228
         ST    @14,ADPLCOM1(,ABDPLPTR)                             0228
*           ADPLFMT2=DATAADR;       /* PLACE INFORMATION INTO      0229
*                                      PARMLIST                      */
         SLR   @14,@14                                             0229
         ICM   @14,7,DATAADR(DATAPTR)                              0229
         ST    @14,ADPLFMT2(,ABDPLPTR)                             0229
*           OFFSET=ZERO;            /* SET OFFSET                    */
         SLR   @14,@14                                             0230
         ST    @14,OFFSET(,ABDPLPTR)                               0230
*           CALL IECIOEXD;          /* EXCPD FORMATTER               */
         L     @15,@CV02383                                        0231
         BALR  @14,@15                                             0231
*         END;                      /* END EXCPD                     */
*       ELSE                                                       0233
*         ;                         /* WAS NO EXCPD-ZERO PTR         */
@RF00223 DS    0H                                                  0234
*     END;                          /* END FOUND EXCPD POINTER       */
*   END EXCPDRTN;                                                  0235
@EL00002 DS    0H                                                  0235
@EF00002 DS    0H                                                  0235
@ER00002 L     @14,@SA00002                                        0235
         BR    @14                                                 0235
*UCBRTN:                                                           0236
*   PROC OPTIONS(SAVE(14));                                        0236
*                                                                  0236
UCBRTN   ST    @14,@SA00003                                        0236
*/********************************************************************/
*/* FUNCTION -                                                     0237
*      ROUTINE TO LOOP THROUGH THE DEB CHAIN AND PROCESS THE UCBS  0237
*      ASSOCIATED WITH EACH DEB. IT SAVES THE UCBS FOR ONE DEB IN  0237
*      SAVESTK AND CALLS THE UCB FORMATTER(IECIOUCB) FOR EACH. IT  0237
*      THEN GOES ON TO PROCESS THE NEXT DEB IN THE CHAIN.          0237
*                                                                  0237
*   INPUT -                                                        0237
*      REGISTER 1 POINTS TO THE PARMLIST PASSED BY THE CALLER      0237
*                                                                  0237
*   CALLS -                                                        0237
*      ACCESRTN,IECIOUCB,UCBORG, RELLOCK, AND PRINT                0237
*                                                                  0237
*   CALLED BY -                                                    0237
*      IECIOFMT                                                    0237
*                                                                  0237
*   RETURNS TO -                                                   0237
*      CALLER                                                      0237
*                                                                    */
*/********************************************************************/
*                                                                  0237
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS LOOP KEEPS A COUNT OF THE NUMBER OF DEBS ALREADY         */
*   /* PROCESSED AND SCANS FROM THE TCB DOWN TO THE DEB WHICH IS THE */
*   /* NEXT ACCORDING TO THE COUNT. THIS IS IN CASE THE DEB CHAIN IS */
*   /* CHANGED BETWEEN THE PROCESSING OF DEBS. THE LOOP WILL END IF  */
*   /* ANY ERROR OCCURS WHILE TRYING TO SEARCH THE CHAIN.            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0237
*   ERRSW=OFF;                      /* INITIALIZE ERROR INDICATOR    */
         NI    ERRSW,B'01111111'                                   0237
*   DEBPTR=1;                       /* DUMMY VALUE TO ALLOW FIRST  0238
*                                      PASS THROUGH LOOP             */
         LA    DEBPTR,1                                            0238
*   DO DEBCNTR=0 TO DEBMAX WHILE(DEBPTR^=ZERO);/* LOOP THROUGH THE 0239
*                                      DEB CHAIN                     */
         SLR   @14,@14                                             0239
         ST    @14,DEBCNTR                                         0239
@DL00239 LTR   DEBPTR,DEBPTR                                       0239
         BZ    @DC00239                                            0239
*     IF ADPLSNPR=OFF THEN          /* LOCAL LOCK NEEDED IF SNAP WAS
*                                      CALLER                        */
         TM    ADPLSNPR(ABDPLPTR),B'10000000'                      0240
         BNZ   @RF00240                                            0240
*       DO;                                                        0241
*         PARMSAVE=ABDPLPTR;        /* SAVE PTR ACCROSS SETLOCK      */
*                                                                  0242
         LR    PARMSAVE,ABDPLPTR                                   0242
*         /***********************************************************/
*         /*                                                         */
*         /* ONLY REGISTER 1,WHICH GETS MODIFIED BY SETLOCK,NEEDS TO */
*         /* BE SAVED                                                */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0243
*         DO;                       /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL) REGS(USE)       0243
*                                      RELATED(IECIOFMT)             */
*           RFY                                                    0244
*            (GPR11P,                                              0244
*             GPR12P,                                              0244
*             GPR13P,                                              0244
*             GPR14P) RSTD;                                        0244
*           RFY                                                    0245
*            (GPR15P,                                              0245
*             GPR00P,                                              0245
*             GPR01P) RSTD;                                        0245
*           GPR15P=GPR11P;          /* SAVE REG. 11 IN REG. 15.      */
         LR    GPR15P,GPR11P                                       0246
*           GPR00P=GPR12P;          /* SAVE REG. 12 IN REG. 0.       */
         LR    GPR00P,GPR12P                                       0247
*           GPR01P=GPR13P;          /* SAVE REG. 13 IN REG. 1.       */
         LR    GPR01P,GPR13P                                       0248
*           GPR13P=PSALITA;         /* ADDRESS OF LOCK INTERFACE   0249
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0249
*           GEN(LM GPR11P,GPR13P,576(GPR13P));/* LOAD LOCKWORD, CLHT
*                                      AND ENTRY ADRS.               */
         LM GPR11P,GPR13P,576(GPR13P)
*           GEN(BALR GPR14P,GPR13P);/* BALR TO SETLOCK RTN.          */
         BALR GPR14P,GPR13P
*           GPR11P=GPR15P;          /* RESTORE REG. 11.              */
         LR    GPR11P,GPR15P                                       0252
*           GPR15P=GPR13P;          /* SAVE RETURN CODE.             */
         LR    GPR15P,GPR13P                                       0253
*           GPR12P=GPR00P;          /* RESTORE REG. 12               */
         LR    GPR12P,GPR00P                                       0254
*           GPR13P=GPR01P;          /* RESTORE REG. 13.              */
         LR    GPR13P,GPR01P                                       0255
*           RFY                                                    0256
*            (GPR15P,                                              0256
*             GPR00P,                                              0256
*             GPR01P) UNRSTD;                                      0256
*           RFY                                                    0257
*            (GPR11P,                                              0257
*             GPR12P,                                              0257
*             GPR13P,                                              0257
*             GPR14P) UNRSTD;                                      0257
*         END;                      /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL) REGS(USE)       0258
*                                      RELATED(IECIOFMT)             */
*         ABDPLPTR=PARMSAVE;        /* RESTORE PARMLIST PTR          */
         LR    ABDPLPTR,PARMSAVE                                   0259
*         LOCKHELD=ON;              /* INDICATE THE LOCAL LOCK IS  0260
*                                      HELD                          */
         OI    LOCKHELD,B'01000000'                                0260
*       END;                        /* END LOCAL LOCK NEEDED         */
*     ELSE                                                         0262
*       ;                           /* LOCK NOT NEEDED               */
@RF00240 DS    0H                                                  0263
*     VADR=ADDR(TCBDEB);            /* DEB CHAIN POINTER             */
         L     @14,ADPLTCB(,ABDPLPTR)                              0263
         LA    VADR,TCBDEB(,@14)                                   0263
*     CALL ACCESRTN;                /* ACCESS IT                     */
         BAL   @14,ACCESRTN                                        0264
*     IF RCREG^=ZERO THEN           /* ERROR ACCESSING TCB           */
         LTR   RCREG,RCREG                                         0265
         BZ    @RF00265                                            0265
*       DO;                                                        0266
*         BUFFER(1:LENGTH(TCBERR))=TCBERR;                         0267
         L     @14,ADPLBUF(,ABDPLPTR)                              0267
         MVC   BUFFER(61,@14),TCBERR                               0267
*         CALL PRINT;               /* PRINT ERROR MSG               */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0268
         BALR  @14,@15                                             0268
*         DEBPTR=ZERO;              /* END THE LOOP                  */
         SLR   DEBPTR,DEBPTR                                       0269
*       END;                        /* END ACCESS ERROR              */
*     ELSE                          /* FOUND DEBPTR                  */
*       DO;                                                        0271
         B     @RC00265                                            0271
@RF00265 DS    0H                                                  0272
*         DEBPTR=DATAWORD;          /* SAVE DEBPTR                   */
*                                                                  0272
         L     DEBPTR,DATAWORD(,DATAPTR)                           0272
*         /***********************************************************/
*         /*                                                         */
*         /* THIS INNER LOOP FINDS THE DEB INDICATED BY THE COUNTER. */
*         /* SINCE THE DEBPTR FROM THE TCB IS ALREADY SET UP, FOR THE*/
*         /* FIRST DEB(DEBCNTR = 0) THE SEARCH WILL BE BYPASSED SINCE*/
*         /* THE DEB PTR IS ALREADY OBTAINED. FOR THE SECOND         */
*         /* DEB(DEBCNTR =1) THE LOOP IS ENTERED ONCE. THE FIRST DEB */
*         /* IS POINTED TO BY THE TCB, THE SECOND RESOLVED IN THE    */
*         /* LOOP                                                    */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0273
*         DO LOOPCNTR=DEBCNTR TO 1 BY-1 WHILE(DEBPTR^=ZERO);/* FIND
*                                      THE PROPER NEXT DEB           */
         L     LOOPCNTR,DEBCNTR                                    0273
         B     @DE00273                                            0273
@DL00273 LTR   DEBPTR,DEBPTR                                       0273
         BZ    @DC00273                                            0273
*           VADR=ADDR(DEBDEBAD);    /* NEXT DEB PTR                  */
         LA    VADR,DEBDEBAD(,DEBPTR)                              0274
*           CALL ACCESRTN;          /* ACCESS IT                     */
         BAL   @14,ACCESRTN                                        0275
*           IF RCREG^=ZERO THEN     /* ACCESS ERROR                  */
         LTR   RCREG,RCREG                                         0276
         BZ    @RF00276                                            0276
*             DO;                                                  0277
*               BUFFER(1:LENGTH(DEBERR))=DEBERR;/* ERROR MSG         */
         L     @14,ADPLBUF(,ABDPLPTR)                              0278
         MVC   BUFFER(56,@14),DEBERR                               0278
*               CALL PRINT;         /* PRINT MESSAGE                 */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0279
         BALR  @14,@15                                             0279
*               DEBPTR=ZERO;        /* END THE LOOP                  */
         SLR   DEBPTR,DEBPTR                                       0280
*             END;                  /* END ACCESS ERROR              */
*           ELSE                                                   0282
*             DEBPTR=DATAADR;       /* SET DEB ADDRESS               */
         B     @RC00276                                            0282
@RF00276 SLR   DEBPTR,DEBPTR                                       0282
         ICM   DEBPTR,7,DATAADR(DATAPTR)                           0282
*         END;                      /* END NEXT DEB LOOP             */
*                                                                  0283
@RC00276 BCTR  LOOPCNTR,0                                          0283
@DE00273 LTR   LOOPCNTR,LOOPCNTR                                   0283
         BP    @DL00273                                            0283
@DC00273 DS    0H                                                  0284
*         /***********************************************************/
*         /*                                                         */
*         /* A VALID DEB WAS FOUND TO BE PROCESSED                   */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0284
*         IF DEBPTR=ZERO THEN       /* COULD NOT FIND A VALID DEB    */
         LTR   DEBPTR,DEBPTR                                       0284
         BNZ   @RF00284                                            0284
*           CALL RELLOCK;           /* NO NEED TO HOLD THE LOCK ANY
*                                      LONGER                        */
         BAL   @14,RELLOCK                                         0285
*         ELSE                      /* FOUND A DEB TO POINT TO UCB'S */
*           DO;                                                    0286
         B     @RC00284                                            0286
@RF00284 DS    0H                                                  0287
*             CALL UCBORG;          /* ROUTINE TO DECIDE IF ACCESS 0287
*                                      METHOD IS ISAM AND SAVE NEEDED
*                                      FIELDS                        */
         BAL   @14,UCBORG                                          0287
*             IF RCREG=ZERO&NMEXT^=ZEROBYTE THEN/* FOUND EVERYTHING
*                                      OK                            */
         LTR   RCREG,RCREG                                         0288
         BNZ   @RF00288                                            0288
         SLR   @14,@14                                             0288
         IC    @14,ZEROBYTE                                        0288
         CR    NMEXT,@14                                           0288
         BE    @RF00288                                            0288
*               DO;                                                0289
*                 IF NMEXT>STKMAX THEN                             0290
         LA    @14,30                                              0290
         CR    NMEXT,@14                                           0290
         BNH   @RF00290                                            0290
*                   NMEXT=STKMAX;   /* WILL ONLY PUT OUT A MAX LIMIT
*                                      OF UCBS                       */
         LR    NMEXT,@14                                           0291
*                 ELSE                                             0292
*                   ;               /* # OF UCBS UNDER LIMIT         */
*                                                                  0292
@RF00290 DS    0H                                                  0293
*                 /***************************************************/
*                 /*                                                 */
*                 /* SAVE ADDESSES OF THE UCBS POINTED TO BY THIS DEB*/
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0293
*                 DO STKPTR=1 TO NMEXT WHILE(ERRSW=OFF);/* SAVE    0293
*                                      UCBS-ERRSW = ON INDICATES   0293
*                                      ERROR ACCESSING DEB           */
         LA    STKPTR,1                                            0293
         B     @DE00293                                            0293
@DL00293 TM    ERRSW,B'10000000'                                   0293
         BNZ   @DC00293                                            0293
*                   VADR=UCBPTR;    /* UCB ADDRESS PTR IN DEB        */
         L     VADR,UCBPTR                                         0294
*                   CALL ACCESRTN;  /* ACCESS IT                     */
         BAL   @14,ACCESRTN                                        0295
*                   IF RCREG^=ZERO THEN/* ACCESS ERROR OR NO UCBS    */
         LTR   RCREG,RCREG                                         0296
         BZ    @RF00296                                            0296
*                     DO;                                          0297
*                       CALL HDRPRINT;/* PRINT DEB HEADER            */
         BAL   @14,HDRPRINT                                        0298
*                       BUFFER(1:LENGTH(UCBERR))=UCBERR;/* ERROR   0299
*                                      MESSAGE                       */
         L     @14,ADPLBUF(,ABDPLPTR)                              0299
         MVC   BUFFER(61,@14),UCBERR                               0299
*                       CALL PRINT; /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0300
         BALR  @14,@15                                             0300
*                       ERRSW=ON;   /* INHIBIT FURTHER PROCESSING OF
*                                      THIS DEB                      */
         OI    ERRSW,B'10000000'                                   0301
*                     END;          /* END ACCESS ERROR              */
*                   ELSE                                           0303
*                     SAVESTK(STKPTR)=DATAADR;/* SAVE UCB ADDRESS    */
         B     @RC00296                                            0303
@RF00296 LR    @14,STKPTR                                          0303
         SLA   @14,2                                               0303
         SLR   @12,@12                                             0303
         ICM   @12,7,DATAADR(DATAPTR)                              0303
         ST    @12,SAVESTK-4(@14)                                  0303
*                   UCBPTR=UCBPTR+EXTENT;/* NEXT UCB PTR IN DEB      */
@RC00296 L     @14,UCBPTR                                          0304
         AL    @14,EXTENT                                          0304
         ST    @14,UCBPTR                                          0304
*                 END;              /* END STACK UP UCBS             */
         AH    STKPTR,@CH00039                                     0305
@DE00293 CR    STKPTR,NMEXT                                        0305
         BNH   @DL00293                                            0305
@DC00293 DS    0H                                                  0306
*                 CALL RELLOCK;     /* RELEASE LOCAL LOCK            */
*                                                                  0306
         BAL   @14,RELLOCK                                         0306
*                 /***************************************************/
*                 /*                                                 */
*                 /* FORMAT EACH UCB                                 */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0307
*                 IF ERRSW=OFF THEN /* NO PROBLEM FINDING UCBS       */
         TM    ERRSW,B'10000000'                                   0307
         BNZ   @RF00307                                            0307
*                   DO;                                            0308
*                     CALL HDRPRINT;/* PRINT DEB HEADER              */
         BAL   @14,HDRPRINT                                        0309
*                     UCBTBLI=UCBTBLI&&UCBTBLI;/* ZERO UCBTBL VIA  0310
*                                      UCBTBLI               @ZA26481*/
         XC    UCBTBLI(120),UCBTBLI                                0310
*                     STKPTR=1;     /* SET UP 1ST UCB FOR PRINT    0311
*                                                            @ZA26481*/
         LA    @14,1                                               0311
         LR    STKPTR,@14                                          0311
*                     UCBTBL(1)=SAVESTK(1);/* REMEMBER 1ST UCB     0312
*                                                            @ZA26481*/
         MVC   UCBTBL(4),SAVESTK                                   0312
*                     TBLINDX=1;    /* INITIALIZE INDEX      @ZA26481*/
         LR    TBLINDX,@14                                         0313
*                     CALL PRINT;   /* SPACE A LINE                  */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0314
         BALR  @14,@15                                             0314
*                     CALL PRINT;   /* SPACE A LINE                  */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0315
         BALR  @14,@15                                             0315
*                     ADPLCOM1=ADDR(ESTAPARM);/* PASS ESTAE PARM LIST
*                                      TO INDIVIDUAL FORMAT ROUTINES */
         LA    @14,ESTAPARM                                        0316
         ST    @14,ADPLCOM1(,ABDPLPTR)                             0316
*                     ADPLFMT2=SAVESTK(STKPTR);/* PLACE UCB ADDRESS
*                                      IN PARMLIST                   */
         LR    @14,STKPTR                                          0317
         SLA   @14,2                                               0317
         L     @14,SAVESTK-4(@14)                                  0317
         ST    @14,ADPLFMT2(,ABDPLPTR)                             0317
*                     OFFSET=ZERO;                                 0318
         SLR   @14,@14                                             0318
         ST    @14,OFFSET(,ABDPLPTR)                               0318
*                     CALL IECIOUCB;/* UCB FORMATTER                 */
         L     @15,@CV02384                                        0319
         BALR  @14,@15                                             0319
*                     DO STKPTR=STKPTR+1 TO NMEXT;/* ALL EXTENTS   0320
*                                      CHECKED               @ZA26481*/
         LA    @14,1                                               0320
         ALR   @14,STKPTR                                          0320
         LR    STKPTR,@14                                          0320
         B     @DE00320                                            0320
@DL00320 DS    0H                                                  0321
*                       UCBMATCH=0; /* INIT TO NO MATCH      @ZA26481*/
         SLR   UCBMATCH,UCBMATCH                                   0321
*                       DO TBLCUR=1 TO TBLINDX;/* CHECK ALL PREVIOUS
*                                                            @ZA26481*/
         LA    TBLCUR,1                                            0322
         B     @DE00322                                            0322
@DL00322 DS    0H                                                  0323
*                         IF SAVESTK(STKPTR)=UCBTBL(TBLCUR) THEN/* 0323
*                                      DONE?                 @ZA26481*/
         LR    @14,STKPTR                                          0323
         SLA   @14,2                                               0323
         LR    @12,TBLCUR                                          0323
         SLA   @12,2                                               0323
         L     @14,SAVESTK-4(@14)                                  0323
         C     @14,UCBTBL-4(@12)                                   0323
         BNE   @RF00323                                            0323
*                           DO;     /* YES.... INDICATE IT   @ZA26481*/
*                             TBLCUR=TBLINDX+1;/* FORCE.... LOOP EXIT
*                                                            @ZA26481*/
         LA    @14,1                                               0325
         LR    TBLCUR,TBLINDX                                      0325
         ALR   TBLCUR,@14                                          0325
*                             UCBMATCH=1;/* WERE NOT GONNA PRINT IT
*                                                            @ZA26481*/
         LR    UCBMATCH,@14                                        0326
*                           END;    /* END.... INDICATE IT   @ZA26481*/
*                       END;        /* END.... CHECK DO      @ZA26481*/
@RF00323 AH    TBLCUR,@CH00039                                     0328
@DE00322 CR    TBLCUR,TBLINDX                                      0328
         BNH   @DL00322                                            0328
*                       IF UCBMATCH=0 THEN/* NEED TO PRINT?  @ZA26481*/
         CH    UCBMATCH,@CH00062                                   0329
         BNE   @RF00329                                            0329
*                         DO;       /* YES.... CONTINUE      @ZA26481*/
*                           CALL PRINT;/* SPACE ONE LINE     @ZA26481*/
         L     @15,ADPLPRNT(,ABDPLPTR)                             0331
         BALR  @14,@15                                             0331
*                           CALL PRINT;/* SPACE ONE MORE LINE      0332
*                                                            @ZA26481*/
         L     @15,ADPLPRNT(,ABDPLPTR)                             0332
         BALR  @14,@15                                             0332
*                           ADPLCOM1=ADDR(ESTAPARM);/* PASS ESTAE  0333
*                                      PARM                  @ZA26481*/
         LA    @14,ESTAPARM                                        0333
         ST    @14,ADPLCOM1(,ABDPLPTR)                             0333
*                           ADPLFMT2=SAVESTK(STKPTR);/* PASS UCB ADDR
*                                                            @ZA26481*/
         LR    @14,STKPTR                                          0334
         SLA   @14,2                                               0334
         L     @14,SAVESTK-4(@14)                                  0334
         ST    @14,ADPLFMT2(,ABDPLPTR)                             0334
*                           OFFSET=ZERO;/*                   @ZA26481*/
         SLR   @14,@14                                             0335
         ST    @14,OFFSET(,ABDPLPTR)                               0335
*                           CALL IECIOUCB;/* UCB FORMATTER   @ZA26481*/
         L     @15,@CV02384                                        0336
         BALR  @14,@15                                             0336
*                           UCBTBL(TBLINDX+1)=SAVESTK(STKPTR);/*   0337
*                                      REMEMBER              @ZA26481*/
         LR    @14,TBLINDX                                         0337
         SLA   @14,2                                               0337
         LR    @12,STKPTR                                          0337
         SLA   @12,2                                               0337
         L     @12,SAVESTK-4(@12)                                  0337
         ST    @12,UCBTBL(@14)                                     0337
*                           TBLINDX=TBLINDX+1;/* INCREMENT TO NEXT 0338
*                                      SLOT                  @ZA26481*/
         AH    TBLINDX,@CH00039                                    0338
*                         END;      /* END.... PRINT DO      @ZA26481*/
*                     END;          /* END.... EXTENT DO     @ZA26481*/
@RF00329 AH    STKPTR,@CH00039                                     0340
@DE00320 CR    STKPTR,NMEXT                                        0340
         BNH   @DL00320                                            0340
*                   END;            /* END NO PROBLEM FINDING UCBS   */
*                 ELSE                                             0342
*                   ;               /* COULD NOT FIND UCBS           */
@RF00307 DS    0H                                                  0343
*               END;                /* END FOUND ALL FIELDS OK       */
*             ELSE                                                 0344
*               ;                   /* DID NOT FIND THE FIELDS OK    */
@RF00288 DS    0H                                                  0345
*           END;                    /* END FOUND A DEB               */
*       END;                        /* END FOUND DEBPTR              */
@RC00284 DS    0H                                                  0347
*   END;                            /* END DEB SCAN LOOP             */
@RC00265 LA    @14,1                                               0347
         AL    @14,DEBCNTR                                         0347
         ST    @14,DEBCNTR                                         0347
         CH    @14,@CH02411                                        0347
         BNH   @DL00239                                            0347
@DC00239 DS    0H                                                  0348
*   END UCBRTN;                                                    0348
@EL00003 DS    0H                                                  0348
@EF00003 DS    0H                                                  0348
@ER00003 L     @14,@SA00003                                        0348
         BR    @14                                                 0348
*UCBORG:                                                           0349
*   PROC OPTIONS(SAVE(14));                                        0349
*                                                                  0349
UCBORG   ST    @14,@SA00004                                        0349
*/********************************************************************/
*/* FUNCTION -                                                     0350
*      ROUTINE TO ACCESS THE DEB TO FIND AND SAVE THE NUMBER OF UCBS
*      ASSOCIATED WITH THE DEB AND THE LENGTH OF EACH EXTENT IN THE
*      DEB. IT ALSO REFERENCES THE DCB AND DEB EXTENSION TRYING TO 0350
*      DETERMINE THE ACCESS METHOD ASSOCIATED WITH THE DEB. THIS IS
*      IMPORTANT SINCE THE UCB POINTER IS DIFFERENT FOR ISAM ACCESS
*      METHOD. THIS ROUTINE ALSO SETS THE POINTER TO THE FIRST UCB.
*                                                                  0350
*   INPUT -                                                        0350
*      REGISTER 1 POINTS TO THE PARMLIST PASSED BY THE CALLER AND  0350
*      DEBPTR HAS THE ADDRESS OF THE DEB TO BE REFERENCED.         0350
*                                                                  0350
*   CALLS -                                                        0350
*      ACCESRTN, RELLOCK, AND PRINT                                0350
*                                                                  0350
*   CALLED BY -                                                    0350
*      UCBRTN                                                      0350
*                                                                  0350
*   RETURNS TO -                                                   0350
*      CALLER WITH RETURN CODE SET BY THE ACCESS SERVICE ROUTINE   0350
*                                                                    */
*/********************************************************************/
*                                                                  0350
*   /*****************************************************************/
*   /*                                                               */
*   /* SET THE LENGTH OF THE DEB EXTENTS                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0350
*   VADR=ADDR(DEBEXSCL);            /* EXTENT SCALE                  */
         LA    VADR,DEBEXSCL(,DEBPTR)                              0350
*   CALL ACCESRTN;                  /* ACCESS IT                     */
         BAL   @14,ACCESRTN                                        0351
*   IF RCREG^=ZERO THEN             /* ACCESS ERROR                  */
         LTR   RCREG,RCREG                                         0352
         BZ    @RF00352                                            0352
*     DO;                                                          0353
*       CALL HDRPRINT;              /* PRINT DEB HEADER              */
         BAL   @14,HDRPRINT                                        0354
*       BUFFER(1:LENGTH(UCBERR))=UCBERR;                           0355
         L     @14,ADPLBUF(,ABDPLPTR)                              0355
         MVC   BUFFER(61,@14),UCBERR                               0355
*       CALL PRINT;                 /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0356
         BALR  @14,@15                                             0356
*     END;                          /* END ACCESS ERROR              */
*   ELSE                            /* FOUND EXTENT SCALE            */
*     DO;                                                          0358
         B     @RC00352                                            0358
@RF00352 DS    0H                                                  0359
*       IF DATABYTE=SHIFT2 THEN     /* SHIFT 2 BITS = 1 WORD         */
         CLC   DATABYTE(1,DATAPTR),SHIFT2                          0359
         BNE   @RF00359                                            0359
*         EXTENT=ONEWORD;           /* 1 WORD LONG                   */
         MVC   EXTENT(4),@CF00078                                  0360
*       ELSE                                                       0361
*         EXTENT=FOURWORD;          /* 4 WORDS LONG                  */
*                                                                  0361
         B     @RC00359                                            0361
@RF00359 MVC   EXTENT(4),@CF00731                                  0361
*       /*************************************************************/
*       /*                                                           */
*       /* SET THE NUMBER OF EXTENTS                                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0362
*       VADR=ADDR(DEBNMEXT);        /* NUMBER OF EXTENTS             */
@RC00359 LA    VADR,DEBNMEXT(,DEBPTR)                              0362
*       CALL ACCESRTN;              /* ACCESS IT                     */
         BAL   @14,ACCESRTN                                        0363
*       IF RCREG^=ZERO THEN         /* ACCESS ERROR                  */
         LTR   RCREG,RCREG                                         0364
         BZ    @RF00364                                            0364
*         DO;                                                      0365
*           CALL HDRPRINT;          /* PRINT THE DEB HEADER          */
         BAL   @14,HDRPRINT                                        0366
*           BUFFER(1:LENGTH(UCBERR))=UCBERR;/* ERROR MESSAGE         */
         L     @14,ADPLBUF(,ABDPLPTR)                              0367
         MVC   BUFFER(61,@14),UCBERR                               0367
*           CALL PRINT;             /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0368
         BALR  @14,@15                                             0368
*         END;                      /* END ACCESS ERROR              */
*       ELSE                        /* FOUND # OF EXTENTS            */
*         DO;                                                      0370
         B     @RC00364                                            0370
@RF00364 DS    0H                                                  0371
*           NMEXT=DATABYTE;         /* SAVE NUMBER OF EXTENTS        */
*                                                                  0371
         SLR   NMEXT,NMEXT                                         0371
         IC    NMEXT,DATABYTE(,DATAPTR)                            0371
*           /*********************************************************/
*           /*                                                       */
*           /* TRY USING DEB EXTENSION TO DETERMINE IF ISAM IS ACCESS*/
*           /* METHOD                                                */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0372
*           RFY                                                    0372
*             DEB BASED(PREFXPTR);                                 0372
*           PREFXPTR=DEBPTR-PREFLEN;/* PTR TO BEGINNING OF FULL    0373
*                                      PREFIX                        */
         LR    PREFXPTR,DEBPTR                                     0373
         SH    PREFXPTR,@CH01935                                   0373
*           VADR=ADDR(DEBXTNP);     /* DEB EXTENSION                 */
         LA    VADR,DEBXTNP(,PREFXPTR)                             0374
*           CALL ACCESRTN;          /* ACCESS IT                     */
         BAL   @14,ACCESRTN                                        0375
*           IF(RCREG=ZERO)&(DATAADR^=ZERO) THEN/* FOUND EXTENSION PTR*/
         LTR   RCREG,RCREG                                         0376
         BNZ   @RF00376                                            0376
         SLR   @14,@14                                             0376
         ICM   @14,7,DATAADR(DATAPTR)                              0376
         LTR   @14,@14                                             0376
         BZ    @RF00376                                            0376
*             DO;                                                  0377
*               DEBEXPTR=DATAADR;   /* SAVE ADDRESS OF DEB EXTENSION */
         LR    DEBEXPTR,@14                                        0378
*               VADR=ADDR(DEBXDSO1);/* DATA SET ORGANIZATION BYTE    */
         LA    VADR,DEBXDSO1(,DEBEXPTR)                            0379
*               CALL ACCESRTN;      /* ACCESS IT                     */
         BAL   @14,ACCESRTN                                        0380
*               IF RCREG=ZERO THEN  /* FOUND DSORG BYTE              */
         LTR   RCREG,RCREG                                         0381
         BNZ   @RF00381                                            0381
*                 IF(DATAHALF&ISAMACB)=ISAMDCB THEN/* ISAM METHOD    */
         SLR   @14,@14                                             0382
         ICM   @14,3,ISAMACB                                       0382
         SLR   @12,@12                                             0382
         ICM   @12,3,DATAHALF(DATAPTR)                             0382
         NR    @14,@12                                             0382
         SLR   @12,@12                                             0382
         ICM   @12,3,ISAMDCB                                       0382
         CR    @14,@12                                             0382
         BNE   @RF00382                                            0382
*                   ISAMBIT=ON;                                    0383
         OI    ISAMBIT,B'10000000'                                 0383
*                 ELSE              /* NOT ISAM                      */
*                   ISAMBIT=OFF;                                   0384
         B     @RC00382                                            0384
@RF00382 NI    ISAMBIT,B'01111111'                                 0384
*               ELSE                                               0385
*                 ;                 /* COULD NOT FIND DSORG BYTE     */
@RF00381 DS    0H                                                  0386
*               DATAADR=DEBEXPTR;   /* RESTORE THE DEB EXTENSION   0386
*                                      POINTER TO INSURE THE DCB   0386
*                                      SEARCH IS ONLY ENTERED WHEN 0386
*                                      NEEDED. THE DCB SEARCH WILL BE
*                                      ENTERED IF THE DEB EXTENSION
*                                      POINTER COULD NOT BE FOUND OR
*                                      IF THE ORGANIZATION BYTE COULD
*                                      NOT BE ACCESSED               */
@RC00381 STCM  DEBEXPTR,7,DATAADR(DATAPTR)                         0386
*             END;                  /* END FOUND EXTENSION PTR       */
*           ELSE                                                   0388
*             ;                     /* COULD NOT FIND EXTENSION PTR  */
@RF00376 DS    0H                                                  0389
*           RFY                                                    0389
*             DEB BASED(DEBAPPAD);                                 0389
*                                                                  0389
*           /*********************************************************/
*           /*                                                       */
*           /* THE DCB SEARCH WILL BE ENTERED IF THE DEB EXTENSION   */
*           /* POINTER COULD NOT BE FOUND, OR IF THE ORGANIZATION    */
*           /* BYTE COULD NOT BE ACCESSED                            */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0390
*           IF(RCREG^=ZERO)×(DATAADR=ZERO) THEN/* ERROR DURING DEB 0390
*                                      EXTENSION SEARCH- TRY TO FIND
*                                      DSORG FROM DCB                */
         LTR   RCREG,RCREG                                         0390
         BNZ   @RT00390                                            0390
         ICM   @14,7,DATAADR(DATAPTR)                              0390
         BNZ   @RF00390                                            0390
@RT00390 DS    0H                                                  0391
*             DO;                                                  0391
*                                                                  0391
*               /*****************************************************/
*               /*                                                   */
*               /* DEB EXTENT SEARCH FAILED - TRY AGAIN IN THE       */
*               /* ASSOCIATED DCB TO FIND IF ISAM WAS ACCESS METHOD  */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0392
*               VADR=ADDR(DEBDCBAD);/* PTR TO DCB                    */
         LA    VADR,DEBDCBAD(,DEBPTR)                              0392
*               CALL ACCESRTN;      /* ACCESS IT                     */
         BAL   @14,ACCESRTN                                        0393
*               IF(RCREG=ZERO)&(DATAADR^=ZERO) THEN/* FOUND DCB    0394
*                                      POINTER                       */
         LTR   RCREG,RCREG                                         0394
         BNZ   @RF00394                                            0394
         SLR   @14,@14                                             0394
         ICM   @14,7,DATAADR(DATAPTR)                              0394
         LTR   @14,@14                                             0394
         BZ    @RF00394                                            0394
*                 DO;                                              0395
*                   DCBPTR=DATAADR;                                0396
         LR    DCBPTR,@14                                          0396
*                   VADR=ADDR(DCBMACF1);/* MACRF BYTE                */
         LA    VADR,DCBMACF1+40(,DCBPTR)                           0397
*                   CALL ACCESRTN;  /* ACCESS IT                     */
         BAL   @14,ACCESRTN                                        0398
*                   IF RCREG^=ZERO THEN/* ACCESS ERROR               */
         LTR   RCREG,RCREG                                         0399
         BZ    @RF00399                                            0399
*                     DO;                                          0400
*                       CALL HDRPRINT;/* PRINT DEB HEADER            */
         BAL   @14,HDRPRINT                                        0401
*                       BUFFER(1:LENGTH(NOMETHOD))=NOMETHOD;       0402
         L     @14,ADPLBUF(,ABDPLPTR)                              0402
         MVC   BUFFER(87,@14),NOMETHOD                             0402
*                       CALL PRINT; /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0403
         BALR  @14,@15                                             0403
*                     END;          /* END ACCESS ERROR              */
*                   ELSE            /* FOUND MACRF BYTE              */
*                     DO;                                          0405
         B     @RC00399                                            0405
@RF00399 DS    0H                                                  0406
*                       IF(DATABYTE&HIGHON)=HIGHON THEN/* EXCP     0406
*                                      METHOD-NOT ISAM               */
         SLR   @14,@14                                             0406
         IC    @14,HIGHON                                          0406
         SLR   @12,@12                                             0406
         IC    @12,DATABYTE(,DATAPTR)                              0406
         NR    @12,@14                                             0406
         CR    @12,@14                                             0406
         BNE   @RF00406                                            0406
*                         ISAMBIT=OFF;                             0407
         NI    ISAMBIT,B'01111111'                                 0407
*                       ELSE        /* NOT EXCP                      */
*                         DO;                                      0408
         B     @RC00406                                            0408
@RF00406 DS    0H                                                  0409
*                           VADR=ADDR(DCBDSORG);/* DSORG BYTE        */
         LA    VADR,DCBDSORG+16(,DCBPTR)                           0409
*                           CALL ACCESRTN;/* ACCESS IT               */
         BAL   @14,ACCESRTN                                        0410
*                           IF RCREG^=ZERO THEN/* ACCESS ERROR       */
         LTR   RCREG,RCREG                                         0411
         BZ    @RF00411                                            0411
*                             DO;                                  0412
*                               CALL HDRPRINT;/* PRINT DEB HEADER    */
         BAL   @14,HDRPRINT                                        0413
*                               BUFFER(1:LENGTH(NOMETHOD))=NOMETHOD;
         L     @14,ADPLBUF(,ABDPLPTR)                              0414
         MVC   BUFFER(87,@14),NOMETHOD                             0414
*                               CALL PRINT;/* PRINT IT               */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0415
         BALR  @14,@15                                             0415
*                             END;  /* END ACCESS ERROR              */
*                           ELSE    /* FOUND DSORG BYTE              */
*                             DO;                                  0417
         B     @RC00411                                            0417
@RF00411 DS    0H                                                  0418
*                               IF(DATAHALF&ISAMACB)=ISAMDCB THEN/*
*                                      ISAM METHOD                   */
         SLR   @14,@14                                             0418
         ICM   @14,3,ISAMACB                                       0418
         SLR   @12,@12                                             0418
         ICM   @12,3,DATAHALF(DATAPTR)                             0418
         NR    @14,@12                                             0418
         SLR   @12,@12                                             0418
         ICM   @12,3,ISAMDCB                                       0418
         CR    @14,@12                                             0418
         BNE   @RF00418                                            0418
*                                 ISAMBIT=ON;                      0419
         OI    ISAMBIT,B'10000000'                                 0419
*                               ELSE                               0420
*                                 ISAMBIT=OFF;/* NOT ISAM            */
         B     @RC00418                                            0420
@RF00418 NI    ISAMBIT,B'01111111'                                 0420
*                             END;  /* END FOUND DSORG               */
*                         END;      /* END NOT EXCP                  */
*                     END;          /* END FOUND MACRF BYTE          */
*                 END;              /* END FOUND DCB PTR             */
*               ELSE                /* COULD NOT FIND DCB PTR        */
*                 DO;                                              0425
         B     @RC00394                                            0425
@RF00394 DS    0H                                                  0426
*                   CALL RELLOCK;   /* RELEASE LOCAL LOCK IF HELD    */
         BAL   @14,RELLOCK                                         0426
*                   CALL HDRPRINT;  /* PRINT DEB HEADER              */
         BAL   @14,HDRPRINT                                        0427
*                   BUFFER(1:LENGTH(NOMETHOD))=NOMETHOD;/* ERROR MSG */
         L     @14,ADPLBUF(,ABDPLPTR)                              0428
         MVC   BUFFER(87,@14),NOMETHOD                             0428
*                   CALL PRINT;     /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0429
         BALR  @14,@15                                             0429
*                   RCREG=4;        /* SET BAD RETURN CODE(IN CASE OF
*                                      A ZERO DCB PTR)               */
         LA    RCREG,4                                             0430
*                   RCCODE=RCREG;   /* SAVE FOR RETURN TO CALLER     */
         LR    RCCODE,RCREG                                        0431
*                 END;              /* END COULD NOT FIND DCB ADR    */
*             END;                  /* END ERROR DURING DEB EXTENSION
*                                      SEARCH                        */
*           ELSE                                                   0434
*             ;                     /* DEB EXTENSION SEARCH OK       */
@RF00390 DS    0H                                                  0435
*           IF RCREG=ZERO THEN      /* FOUND THE ACCESS METHOD TYPE  */
@RC00390 LTR   RCREG,RCREG                                         0435
         BNZ   @RF00435                                            0435
*             DO;                                                  0436
*                                                                  0436
*               /*****************************************************/
*               /*                                                   */
*               /* IF ISAM WAS THE ACCESS METHOD THE NUMBER OF       */
*               /* EXTENTS AND PTR TO THE FIRST UCB MUST BE MODIFIED */
*               /* TO INCLUDE THE ISAM DEPENDENT SECTION             */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0437
*               IF ISAMBIT=ON THEN  /* ISAM ACCESS METHOD            */
         TM    ISAMBIT,B'10000000'                                 0437
         BNO   @RF00437                                            0437
*                 DO;                                              0438
*                   NMEXT=NMEXT-1;  /* DECREMENT # EXTENTS           */
         BCTR  NMEXT,0                                             0439
*                   UCBPTR=ADDR(DEBSUCBA)+ISAMLNTH;/* SET UCB PTR    */
         LA    @14,DEBSUCBA(,DEBPTR)                               0440
         AL    @14,@CF00731                                        0440
         ST    @14,UCBPTR                                          0440
*                 END;              /* END ISAM METHOD               */
*               ELSE                /* NOT ISAM METHOD               */
*                 UCBPTR=ADDR(DEBSUCBA);                           0442
         B     @RC00437                                            0442
@RF00437 LA    @14,DEBSUCBA(,DEBPTR)                               0442
         ST    @14,UCBPTR                                          0442
*               IF NMEXT=ZEROBYTE THEN/* THERE ARE NO UCBS           */
@RC00437 SLR   @14,@14                                             0443
         IC    @14,ZEROBYTE                                        0443
         CR    NMEXT,@14                                           0443
         BNE   @RF00443                                            0443
*                 DO;                                              0444
*                   CALL RELLOCK;   /* RELEASE LOCAL LOCK            */
         BAL   @14,RELLOCK                                         0445
*                   CALL HDRPRINT;  /* PRINT DEB HEADER              */
         BAL   @14,HDRPRINT                                        0446
*                   BUFFER(1:LENGTH(NOUCBS))=NOUCBS;/* MESSAGE       */
         L     @14,ADPLBUF(,ABDPLPTR)                              0447
         MVC   BUFFER(39,@14),NOUCBS                               0447
*                   CALL PRINT;     /* PRINT MESSAGE                 */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0448
         BALR  @14,@15                                             0448
*                 END;              /* END NO UCBS                   */
*               ELSE                                               0450
*                 ;                 /* THERE ARE UCBS                */
@RF00443 DS    0H                                                  0451
*             END;                  /* END FOUND ACCESS METHOD TYPE  */
*           ELSE                                                   0452
*             ;                     /* DID NOT FIND ACCESS METHOD  0452
*                                      TYPE                          */
@RF00435 DS    0H                                                  0453
*         END;                      /* END FOUND # EXTENTS           */
*     END;                          /* END FOUND EXTENT SCALE        */
@RC00364 DS    0H                                                  0455
*   RETURN CODE(RCCODE);                                           0455
@RC00352 LR    @15,RCCODE                                          0455
@EL00004 DS    0H                                                  0455
@EF00004 DS    0H                                                  0455
@ER00004 L     @14,@SA00004                                        0455
         BR    @14                                                 0455
*   END UCBORG;                                                    0456
*HDRPRINT:                                                         0457
*   PROC OPTIONS(SAVE(14));                                        0457
*                                                                  0457
HDRPRINT ST    @14,@SA00005                                        0457
*/********************************************************************/
*/* FUNCTION -                                                     0458
*      ROUTINE TO PRINT THE DEB HEADER BEFORE ANY ERROR MESSAGES, ONCE
*      A VALID DEB HAS BEEN FOUND. THE CODE IS HERE, RATHER THAN IN THE
*      MAINLINE BECAUSE THE HEADER CAN NOT BE PRINTED WHILE THE LOCAL
*      LOCK IS HELD. THIS ROUTINE IS ENTERED IF AN ERROR OCCURED   0458
*      ACCESSING AN AREA OF STORAGE. THIS ABEND WOULD CAUSE THE RELEASE
*      OF THE LOCK, AND THE HEADER CAN BE PRINTED BEFORE THE MESSAGE.
*      THIS ALLOWS THE ERROR MESSAGE TO BE ASSOCIATED WITH A DEB.  0458
*        IF AN ERROR HAS NOT OCCURED, THE LOCK MUST HAVE BEEN RELEASED
*      THROUGH RELLOCK.                                            0458
*                                                                  0458
*   INPUT -                                                        0458
*      DEBPTR HAS THE ADDRESS OF THE DEB                           0458
*                                                                  0458
*   CALLS -                                                        0458
*      PRINT                                                       0458
*                                                                  0458
*   CALLED BY -                                                    0458
*      UCBRTN ,UCBORG                                              0458
*                                                                  0458
*   RETURNS TO -                                                   0458
*      CALLER WITHOUT SETTING A RETURN CODE                        0458
*                                                                    */
*/********************************************************************/
*                                                                  0458
*   /*****************************************************************/
*   /*                                                               */
*   /* PRINT THE DEB HEADER                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0458
*   CALL PRINT;                     /* BLANK LINE                    */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0458
         BALR  @14,@15                                             0458
*   CALL PRINT;                     /* BLANK LINE                    */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0459
         BALR  @14,@15                                             0459
*   BUFFER(1:LENGTH(DEBHDR))=DEBHDR;/* TO ASSOCIATE IOS INFO WITH A
*                                      DEB                           */
         L     @14,ADPLBUF(,ABDPLPTR)                              0460
         MVC   BUFFER(20,@14),DEBHDR                               0460
*   PACKAREA=DEBPTR;                /* MOVE ADDR INTO CHARACTER AREA */
         ST    DEBPTR,PACKAREA                                     0461
*   GARBAGE='04'X;                  /* GARBAGE BYTE FOR THE UNPK     */
         MVI   GARBAGE,X'04'                                       0462
*   UNPK(ADDRESS,UNPACK);           /* UNPK INTO OUTPUT BUFFER       */
         UNPK  ADDRESS(9,@14),UNPACK(5)                            0463
*   TR(ADDRESS,TRANS);              /* MAKE PRINTABLE                */
         TR    ADDRESS(9,@14),TRANS                                0464
*   CALL PRINT;                     /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0465
         BALR  @14,@15                                             0465
*   BUFFER(1:LENGTH(DEBUS))=DEBUS;  /* UNDER SCORE                   */
         L     @14,ADPLBUF(,ABDPLPTR)                              0466
         MVC   BUFFER(19,@14),DEBUS                                0466
*   CALL PRINT;                     /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0467
         BALR  @14,@15                                             0467
*   CALL PRINT;                     /* BLANK                         */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0468
         BALR  @14,@15                                             0468
*   END HDRPRINT;                                                  0469
@EL00005 DS    0H                                                  0469
@EF00005 DS    0H                                                  0469
@ER00005 L     @14,@SA00005                                        0469
         BR    @14                                                 0469
*RELLOCK:                                                          0470
*   PROC OPTIONS(SAVE(14));                                        0470
*                                                                  0470
RELLOCK  ST    @14,@SA00006                                        0470
*/********************************************************************/
*/* FUNCTION -                                                     0471
*      ROUTINE TO RELEASE THE LOCAL LOCK IF IT WAS HELD.           0471
*                                                                  0471
*   INPUT -                                                        0471
*      REGISTER 1 POINTS TO THE PARMLIST PASSED BY THE CALLER      0471
*                                                                  0471
*   CALLS -                                                        0471
*      MAKES NO OUTSIDE CALLS                                      0471
*                                                                  0471
*   CALLED BY -                                                    0471
*      UCBRTN ,UCBORG                                              0471
*                                                                  0471
*   RETURNS TO -                                                   0471
*      CALLER WITHOUT SETTING A RETURN CODE                        0471
*                                                                    */
*/********************************************************************/
*                                                                  0471
*   IF LOCKHELD=ON THEN             /* RELEASE LOCAL LOCK            */
         TM    LOCKHELD,B'01000000'                                0471
         BNO   @RF00471                                            0471
*     DO;                                                          0472
*       PARMSAVE=ABDPLPTR;          /* SAVE PTR ACROSS SETLOCK       */
*                                                                  0473
         LR    PARMSAVE,ABDPLPTR                                   0473
*       /*************************************************************/
*       /*                                                           */
*       /* ONLY REGISTER 1,WHICH GETS MODIFIED BY SETLOCK,NEEDS TO BE*/
*       /* SAVED                                                     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0474
*       DO;                         /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      REGS(USE) RELATED(IECIOFMT)   */
*         RFY                                                      0475
*          (GPR11P,                                                0475
*           GPR12P,                                                0475
*           GPR13P,                                                0475
*           GPR14P) RSTD;                                          0475
*         RFY                                                      0476
*          (GPR15P,                                                0476
*           GPR00P,                                                0476
*           GPR01P) RSTD;                                          0476
*         GPR15P=GPR11P;            /* SAVE REG. 11 IN REG. 15.      */
         LR    GPR15P,GPR11P                                       0477
*         GPR00P=GPR12P;            /* SAVE REG. 12 IN REG. 0.       */
         LR    GPR00P,GPR12P                                       0478
*         GPR01P=GPR13P;            /* SAVE REG. 13 IN REG. 1.       */
         LR    GPR01P,GPR13P                                       0479
*         GPR13P=PSALITA;           /* ADDRESS OF LOCK INTERFACE   0480
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0480
*         GEN(LM GPR11P,GPR13P,588(GPR13P));/* LOAD LOCKWORD, CLHT 0481
*                                      AND ENTRY ADRS.               */
         LM GPR11P,GPR13P,588(GPR13P)
*         GEN(BALR GPR14P,GPR13P);  /* BALR TO SETLOCK RTN.          */
         BALR GPR14P,GPR13P
*         GPR11P=GPR15P;            /* RESTORE REG. 11.              */
         LR    GPR11P,GPR15P                                       0483
*         GPR15P=GPR13P;            /* SAVE RETURN CODE.             */
         LR    GPR15P,GPR13P                                       0484
*         GPR12P=GPR00P;            /* RESTORE REG. 12               */
         LR    GPR12P,GPR00P                                       0485
*         GPR13P=GPR01P;            /* RESTORE REG. 13.              */
         LR    GPR13P,GPR01P                                       0486
*         RFY                                                      0487
*          (GPR15P,                                                0487
*           GPR00P,                                                0487
*           GPR01P) UNRSTD;                                        0487
*         RFY                                                      0488
*          (GPR11P,                                                0488
*           GPR12P,                                                0488
*           GPR13P,                                                0488
*           GPR14P) UNRSTD;                                        0488
*       END;                        /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      REGS(USE) RELATED(IECIOFMT)   */
*       LOCKHELD=OFF;               /* LOCK NO LONGER HELD           */
         NI    LOCKHELD,B'10111111'                                0490
*       ABDPLPTR=PARMSAVE;          /* RESTORE PARM PTR              */
         LR    ABDPLPTR,PARMSAVE                                   0491
*     END;                          /* END LOCAL LOCK RELEASED       */
*   ELSE                                                           0493
*     ;                             /* NO NEED TO RELEASE LOCK       */
@RF00471 DS    0H                                                  0494
*   END RELLOCK;                                                   0494
@EL00006 DS    0H                                                  0494
@EF00006 DS    0H                                                  0494
@ER00006 L     @14,@SA00006                                        0494
         BR    @14                                                 0494
*ACCESRTN:                                                         0495
*   PROC OPTIONS(SAVE(14));                                        0495
*                                                                  0495
ACCESRTN ST    @14,@SA00007                                        0495
*/********************************************************************/
*/* FUNCTION-                                                      0496
*       ROUTINE WHICH CALLS THE ACCESS SERVICE ROUTINE AND MOVES THE
*     VALUE RETURNED IN R0 INTO DATAPTR.                           0496
*                                                                  0496
*                                                                  0496
*   INPUT -                                                        0496
*         VADR(REGISTER 0) CONTAINS THE VIRTUAL ADDRESS OF THE FIELD
*         TO BE ACCESSED.                                          0496
*                                                                  0496
*   OUTPUT -                                                       0496
*         DATAPTR POINTS TO THE DATA JUST ACCESSED.                0496
*                                                                  0496
*    CALLS-                                                        0496
*         ACCESS SERVICE ROUTINE PASSED IN PARMLIST                0496
*                                                                  0496
*    CALLED BY -                                                   0496
*         ALL ROUTINES IN IECIOFMT                                 0496
*                                                                  0496
*    RETURNS TO -                                                  0496
*         CALLER WITH THE RETURN CODE SET BY THE ACCESS            0496
*         SERVICE ROUTINE.                                         0496
*                                                                  0496
*                                                                    */
*/********************************************************************/
*                                                                  0496
*   IF ADPLSNPR=OFF THEN            /* SNAP WAS THE CALLER           */
         TM    ADPLSNPR(ABDPLPTR),B'10000000'                      0496
         BNZ   @RF00496                                            0496
*     DO;                                                          0497
*       RTYADR=ADDR(RETRY);         /* RETRY ADDR FOR ESTAE IN CASE
*                                      OF EXPECTED ERROR-SIMULATES 0498
*                                      PRINT DUMP                    */
         LA    @14,RETRY                                           0498
         ST    @14,RTYADR                                          0498
*       DATAPTR=VADR;               /* PREPARE FOR A LOAD FROM THE 0499
*                                      DUMP INTO AN INTERNAL BUFFER  */
         LR    DATAPTR,VADR                                        0499
*       RCREG=ZERO;                 /* SUCCESS UNLESS OTHERWISE    0500
*                                      CHANGED                       */
         SLR   RCREG,RCREG                                         0500
*       ERREXP=ON;                  /* AN ERROR IS EXPECTED          */
         OI    ERREXP,B'10000000'                                  0501
*       VERIFY=DATADWRD;            /* MOVE A DOUBLE WORD INTO THE 0502
*                                      BUFFER                        */
*                                                                  0502
         MVC   VERIFY(8),DATADWRD(DATAPTR)                         0502
*       /*************************************************************/
*       /*                                                           */
*       /* THIS MOVE WILL CAUSE AN ABEND IF THE DUMP DOES NOT CONTAIN*/
*       /* THIS AREA OR IF THE AREA IS FETCH PROTECTED. IF AN ABEND  */
*       /* OCCURS, THE ESTAE WILL GET CONTROL AND RETRY AT THE POINT */
*       /* WHICH SETS A BAD RETURN CODE AND CONTINUES IN THE         */
*       /* MAINLINE. THIS THEN SIMULATES THE PRINT DUMP ACCESS       */
*       /* ROUTINE. IF THE AREA ASKED FOR IS IN THE DUMP, A DOUBLE   */
*       /* WORD IS MOVED INTO AN INTERNAL BUFFER TO PREVENT AN       */
*       /* UNEXPECTED ERROR WHEN REFERENCING THE AREA AGAIN          */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0503
*       ERREXP=OFF;                 /* AN ERROR IS NO LONGER EXPECTED*/
         NI    ERREXP,B'01111111'                                  0503
*       DATAPTR=ADDR(VERIFY);       /* BASE DATAWORD ON THE BUFFER   */
         LA    DATAPTR,VERIFY                                      0504
*     END;                          /* END SNAP WAS CALLER           */
*   ELSE                            /* CALLER HAS OWN ACCESS ROUTINE */
*     DO;                                                          0506
         B     @RC00496                                            0506
@RF00496 DS    0H                                                  0507
*       CALL ACCESS;                /* ACCESS SERVICE ROUTINE PASSED
*                                      BY CALLER                     */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0507
         BALR  @14,@15                                             0507
*       IF RCREG=ZERO THEN                                         0508
         LTR   RCREG,RCREG                                         0508
         BNZ   @RF00508                                            0508
*         DATAPTR=VADR;             /* SAVE PTR RETURNED BY ACCESS 0509
*                                      SERVICE ROUTINE               */
         LR    DATAPTR,VADR                                        0509
*       ELSE                        /* BAD RETURN CODE               */
*RETRY:                             /* RETRY ADDR FOR THE ESTAE      */
*         RCREG=4;                  /* SET BAD RETURN FOR THE      0510
*                                      MAINLINE                      */
         B     @RC00508                                            0510
@RF00508 DS    0H                                                  0510
RETRY    LA    RCREG,4                                             0510
*     END;                          /* END CALLER NOT SNAP           */
@RC00508 DS    0H                                                  0512
*   RCCODE=RCREG;                   /* SAVE RETURN CODE              */
@RC00496 LR    RCCODE,RCREG                                        0512
*   RETURN CODE(RCCODE);                                           0513
         LR    @15,RCCODE                                          0513
@EL00007 DS    0H                                                  0513
@EF00007 DS    0H                                                  0513
@ER00007 L     @14,@SA00007                                        0513
         BR    @14                                                 0513
*   END ACCESRTN;                                                  0514
*ESTAERTN:                                                         0515
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0515
*                                                                  0515
ESTAERTN DS    0H                                                  0516
*/********************************************************************/
*/* FUNCTION-                                                      0516
*       ROUTINE TO DETERMINE IF THE ERROR WAS EXPECTED AND CONTINUE
*     PROCESSING OR TO CLEAN UP AND EXIT.                          0516
*       IF THE ERROR WAS EXPECTED, THEN CONTROL IS RETURNED TO THE 0516
*     ADDRESS PASSED IN THE ESTAE PARAMETER LIST. THIS RETURN ACTS 0516
*     LIKE THE BAD RETURN FROM THE ACCESS SERVICE ROUTINE.         0516
*       IF THE ERROR WAS NOT EXPECTED, REQUIRED CLEAN UP OF RESOURCES
*     IS DONE. A MESSAGE IS FILLED INTO THE BUFFER AND CONTROL IS  0516
*     RETURNED AT THE END OF THE FORMATTER.                        0516
*                                                                  0516
*    CALLS-                                                        0516
*         MAKES NO OUTSIDE CALLS                                   0516
*                                                                  0516
*    CALLED BY -                                                   0516
*         RTM IN AN ABEND SITUATION                                0516
*                                                                  0516
*    RETURNS TO -                                                  0516
*         CALLER                                                   0516
*                                                                    */
*/********************************************************************/
*                                                                  0516
*   /*****************************************************************/
*   /*                                                               */
*   /* NO RESTORE REGS SPECIFIED                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0516
*   DO;                             /* ENTESTAE PARMREG(DREG)        */
*/*  ENTRY CODE FOR ESTAE ROUTINE.                                   */
*/*  IF RTCA ALLOCATED THEN RESTORE CODE AND                         */
*/*  DATA REGS FROM START OF USERS PARM LIST,                        */
*/*  AND ESTABLISH ADDR TO ESTAE SAVE AREA                           */
*/*  IF REQUIRED.                                                    */
*/*  IF NO RTCA IS AVAILABLE THEN JUST RETURN                        */
*/*  TO RTM TO CONTINUE TERMINATION                                  */
*                                                                  0517
*     GEN(USING *,GPR15P);                                         0517
         USING *,GPR15P
*     GEN(CH    GPR00F,*+14);       /* CHECK IF RTCA ALLOC FAILED    */
         CH    GPR00F,*+14
*     GEN(BNE   *+12);              /* NO,SAVE RTM REGS              */
         BNE   *+12
*     GEN(DROP  GPR15P);            /* DROP LOCAL ADDR               */
         DROP  GPR15P
*     GEN(LA    GPR15P,0);          /* YES, SET CONT TERM RC         */
         LA    GPR15P,0
*     GEN(BR    GPR14P);            /* RETURN TO RTM                 */
         BR    GPR14P
*     GEN(DC    H'12');             /* NO RTCA AVAIL RC              */
         DC    H'12'
*     GEN(STM   GPR14P,GPR12F,12(GPR13P));/* GOOD R13, SAVE RTM'S  0524
*                                      REGS                          */
         STM   GPR14P,GPR12F,12(GPR13P)
*     GEN(L     DREG,0(GPR01P));    /* PTR TO USER PARM LIST         */
         L     DREG,0(GPR01P)
*   END;                            /* ENTESTAE PARMREG(DREG)        */
*                                                                  0526
*   /*****************************************************************/
*   /*                                                               */
*   /* THE ENTRY CODE SET DREG TO BE THE POINTER TO ALL THE AUTOMATIC*/
*   /* DATA FOR THIS MODULE                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0527
*   LM(GPR02P,GPR12F,REG2TO12);     /* RESTORE THE REGS SAVED FROM 0527
*                                      THE MAINLINE                  */
         LM    GPR02P,GPR12F,REG2TO12                              0527
*   SDWAPTR=GPR01P;                 /* SDWA ADDR PASSED TO THIS    0528
*                                      ROUTINE                       */
*                                                                  0528
         ST    GPR01P,SDWAPTR                                      0528
*   /*****************************************************************/
*   /*                                                               */
*   /* TO PREVENT MORE THAN ONE DUMP BEING TAKEN FOR AN X37 TYPE     */
*   /* ABEND, PERCOLATE TO THE CALLERS RECOVERY. THIS WILL PREVENT   */
*   /* THIS ESTAE FROM TAKING THE DUMP, AND LET THE CALLERS RECOVERY */
*   /* TAKE IT.                                              @ZM43805*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0529
*   IF ABNDTYPE^='37'X THEN         /* PERCOLATE FOR ALL X37 TYPE  0529
*                                      ABENDS                @ZM43805*/
         L     @14,SDWAPTR                                         0529
         MVC   @TS00001(2),ABNDTYPE(@14)                           0529
         NC    @TS00001(2),@CB02641                                0529
         CLC   @TS00001(2),@CB02643                                0529
         BE    @RF00529                                            0529
*     DO;                           /* NOT AN X37 ABEND      @ZM43805*/
*       IF ABND^='0C4'X THEN        /* ONLY EXPECTED ERROR CODE      */
         L     @14,SDWAPTR                                         0531
         MVC   @TS00001(2),ABND(@14)                               0531
         NC    @TS00001(2),@CB02645                                0531
         CLC   @TS00001(2),@CB02647                                0531
         BE    @RF00531                                            0531
*         ERREXP=OFF;               /* EVEN IF AN ERROR WAS EXPECTED,
*                                      THIS ABEND CODE WAS NOT THE 0532
*                                      EXPECTED ONE                  */
         NI    ERREXP,B'01111111'                                  0532
*       ELSE                                                       0533
*         ;                         /* SEE IF THE ERROR WAS EXPECTED */
@RF00531 DS    0H                                                  0534
*       IF ERREXP=ON THEN           /* AN ERROR WAS EXPECTED BY THE
*                                      CODE                          */
         TM    ERREXP,B'10000000'                                  0534
         BNO   @RF00534                                            0534
*         DO;                                                      0535
*           ERREXP=OFF;             /* TURN OFF EXPECTED ERROR       */
*           LOCKHELD=OFF;           /* RTM RELEASES THE LOCK         */
         NI    ERREXP,B'00111111'                                  0537
*           SDWASRSV=LCALREGS;      /* SET RETRY REGS FOR EXPECTED 0538
*                                      RETRY                         */
*                                                                  0538
         L     @14,SDWAPTR                                         0538
         MVC   SDWASRSV(64,@14),LCALREGS                           0538
*           /*********************************************************/
*           /*                                                       */
*           /* RETRY AT THE ACCESS RTN WHICH TOOK THE ERROR,AT THAT  */
*           /* POINT THE RETURN CODE WILL BE SET TO 4 TO SIMULATE THE*/
*           /* PRINT DUMP ACCESS SERVICE ROUTINE.                    */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0539
*           DO;                     /* SETRP REGS(14,12)DUMP(NO)RC(4)
*                                      RETADDR(RETRYPT)RETREGS(YES)FR
*                                      ESDWA(YES)                    */
*             RESPECIFY                                            0540
*              (GPR00P,                                            0540
*               GPR01P,                                            0540
*               GPR14P,                                            0540
*               GPR15P) RSTD;                                      0540
*             GPR01P->SDWARCDE=4;   /* STORE RC INTO SDWA            */
         MVI   SDWARCDE(GPR01P),X'04'                              0541
*             GPR01P->SDWARTYA=ADDR(RETRYPT);/* SAVE RETRY ADDRESS   */
         MVC   SDWARTYA(4,GPR01P),RTYADR                           0542
*             GPR01P->SDWAFREE='1'B;/* SET FLAG TO FREE SDWA         */
         OI    SDWAFREE(GPR01P),B'00000100'                        0543
*             GPR01P->SDWAREQ='0'B; /* TURN OFF DUMP INDICATOR       */
         NI    SDWAREQ(GPR01P),B'01111111'                         0544
*             GPR01P->SDWAUPRG='1'B;/* TURN ON RETREGS INDICATOR     */
         OI    SDWAUPRG(GPR01P),B'00001000'                        0545
*             GEN(RETURN (14,12));                                 0546
         RETURN (14,12)
*             RESPECIFY                                            0547
*              (GPR00P,                                            0547
*               GPR01P,                                            0547
*               GPR14P,                                            0547
*               GPR15P) UNRSTD;                                    0547
*           END;                                                   0548
*         END;                      /* END AN ERROR WAS EXPECTED     */
*       ELSE                        /* AN UNEXPECTED ERROR - RETRY AT
*                                      RETURN TO CALLER              */
*         DO;                                                      0550
         B     @RC00534                                            0550
@RF00534 DS    0H                                                  0551
*           IF UNEXP2=OFF THEN      /* THE FIRST UNEXPECTED ERROR    */
         TM    UNEXP2,B'00100000'                                  0551
         BNZ   @RF00551                                            0551
*             DO;                                                  0552
*               UNEXP2=ON;          /* RETRY ONLY ONCE - PREVENT LOOP*/
*               LOCKHELD=OFF;       /* LOCK NO LONGER HELD -RTM    0554
*                                      RELEASED IT                   */
         OI    UNEXP2,B'00100000'                                  0554
         NI    LOCKHELD,B'10111111'                                0554
*               RTYADR=ADDR(TROUBLE);/* RETRY POINT IN MAIN LINE FOR
*                                      UNEXPECTED ERRORS             */
         LA    @14,TROUBLE                                         0555
         ST    @14,RTYADR                                          0555
*               SDWASRSV=RTYREGS;   /* SET RETRY REGS FOR MAINLINE 0556
*                                      RETRY                         */
         L     @12,SDWAPTR                                         0556
         MVC   SDWASRSV(64,@12),RTYREGS                            0556
*               ABDPLPTR=RTYREG1;   /* RESTORE PTR TO PRINT DUMP   0557
*                                      PARMLIST-REG1                 */
         L     ABDPLPTR,RTYREG1                                    0557
*               BUFFER=ENDMSG;      /* ABEND MESSAGE                 */
         L     @11,ADPLBUF(,ABDPLPTR)                              0558
         MVI   BUFFER+41(@11),C' '                                 0558
         MVC   BUFFER+42(78,@11),BUFFER+41(@11)                    0558
         MVC   BUFFER(41,@11),ENDMSG                               0558
*               PACKAREA(3:4)=ABNDCMPC;/* MOVE COMP CODE TO CHAR AREA*/
         MVC   PACKAREA+2(2),ABNDCMPC(@12)                         0559
*               GARBAGE='04'X;      /* GARBAGE BYTE FOR THE UNPK     */
         MVI   GARBAGE,X'04'                                       0560
*               UNPK(BUFFER(42:46),UNPACK(3:5));/* UNPACK INTO THE 0561
*                                      BUFFER                        */
         UNPK  BUFFER+41(5,@11),UNPACK+2(3)                        0561
*               TR(BUFFER(42:46),TRANS);/* TRANSLATE TO PRINTABLE HEX*/
         TR    BUFFER+41(5,@11),TRANS                              0562
*               BUFFER(45:45)=' ';  /* BLANK OUT SECOND HALF BYTE    */
         MVI   BUFFER+44(@11),C' '                                 0563
*               GPR01P=SDWAPTR;     /* RESTORE REGISTER 1 FOR SETRP  */
         LR    GPR01P,@12                                          0564
*               DO;                 /* SETRP REGS(14,12)DUMP(YES)RC(4
*                                      )RETADDR(RETRYPT)RETREGS(YES)F
*                                      RESDWA(YES)                   */
*                 RESPECIFY                                        0566
*                  (GPR00P,                                        0566
*                   GPR01P,                                        0566
*                   GPR14P,                                        0566
*                   GPR15P) RSTD;                                  0566
*                 GPR01P->SDWARCDE=4;/* STORE RC INTO SDWA           */
         MVI   SDWARCDE(GPR01P),X'04'                              0567
*                 GPR01P->SDWARTYA=ADDR(RETRYPT);/* SAVE RETRY     0568
*                                      ADDRESS                       */
         L     @12,RTYADR                                          0568
         ST    @12,SDWARTYA(,GPR01P)                               0568
*                 GPR01P->SDWAFREE='1'B;/* SET FLAG TO FREE SDWA     */
         OI    SDWAFREE(GPR01P),B'00000100'                        0569
*                 GPR01P->SDWAREQ='1'B;/* TURN ON DUMP INDICATOR     */
         OI    SDWAREQ(GPR01P),B'10000000'                         0570
*                 GPR01P->SDWAUPRG='1'B;/* TURN ON RETREGS INDICATOR */
         OI    SDWAUPRG(GPR01P),B'00001000'                        0571
*                 GEN(RETURN (14,12));                             0572
         RETURN (14,12)
*                 RESPECIFY                                        0573
*                  (GPR00P,                                        0573
*                   GPR01P,                                        0573
*                   GPR14P,                                        0573
*                   GPR15P) UNRSTD;                                0573
*               END;                                               0574
*             END;                  /* END FIRST UNEXPECTED ERROR    */
*           ELSE                    /* PERCOLATE FOR SECOND        0576
*                                      UNEXPECTED ERROR              */
*             DO;                   /* SETRP                       0576
*                                      REGS(14,12)DUMP(YES)RC(0)     */
         B     @RC00551                                            0576
@RF00551 DS    0H                                                  0577
*               RESPECIFY                                          0577
*                (GPR00P,                                          0577
*                 GPR01P,                                          0577
*                 GPR14P,                                          0577
*                 GPR15P) RSTD;                                    0577
*               GPR01P->SDWARCDE=0; /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0578
*               GPR01P->SDWAREQ='1'B;/* TURN ON DUMP INDICATOR       */
         OI    SDWAREQ(GPR01P),B'10000000'                         0579
*               GEN(RETURN (14,12));                               0580
         RETURN (14,12)
*               RESPECIFY                                          0581
*                (GPR00P,                                          0581
*                 GPR01P,                                          0581
*                 GPR14P,                                          0581
*                 GPR15P) UNRSTD;                                  0581
*             END;                  /*                       @ZM43805*/
*         END;                      /* END UNEXPECTED ERROR          */
*     END;                          /* END NOT AN X37 TYPE ABEND   0584
*                                                            @ZM43805*/
*   ELSE                            /* IS AN X37 TYPE ABEND -      0585
*                                      PERCOLATE             @ZM43805*/
*     DO;                           /* SETRP                       0585
*                                      REGS(14,12)DUMP(YES)RC(0)     */
         B     @RC00529                                            0585
@RF00529 DS    0H                                                  0586
*       RESPECIFY                                                  0586
*        (GPR00P,                                                  0586
*         GPR01P,                                                  0586
*         GPR14P,                                                  0586
*         GPR15P) RSTD;                                            0586
*       GPR01P->SDWARCDE=0;         /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0587
*       GPR01P->SDWAREQ='1'B;       /* TURN ON DUMP INDICATOR        */
         OI    SDWAREQ(GPR01P),B'10000000'                         0588
*       GEN(RETURN (14,12));                                       0589
         RETURN (14,12)
*       RESPECIFY                                                  0590
*        (GPR00P,                                                  0590
*         GPR01P,                                                  0590
*         GPR14P,                                                  0590
*         GPR15P) UNRSTD;                                          0590
*     END;                          /*                       @ZM43805*/
*   END ESTAERTN;                                                  0592
@EL00008 DS    0H                                                  0592
@EF00008 DS    0H                                                  0592
@ER00008 BR    @14                                                 0592
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00F FIXED(31) REG(0),                                     0593
*     GPR12F FIXED(31) REG(12),                                    0593
*     GPR00P PTR(31) REG(0),                                       0593
*     GPR01P PTR(31) REG(1),                                       0593
*     GPR02P PTR(31) REG(2),                                       0593
*     GPR11P PTR(31) REG(11),                                      0593
*     GPR12P PTR(31) REG(12),                                      0593
*     GPR13P PTR(31) REG(13),                                      0593
*     GPR14P PTR(31) REG(14),                                      0593
*     GPR15P PTR(31) REG(15);                                      0593
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0594
*     I031F FIXED(31) BASED,                                       0594
*     I031P PTR(31) BASED,                                         0594
*     I015F FIXED(15) BASED,                                       0594
*     I015P PTR(15) BASED,                                         0594
*     I008P PTR(8) BASED,                                          0594
*     I001C CHAR(1) BASED;                                         0594
*   END IECIOFMT                                                   0595
*                                                                  0595
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IHAABDPL)                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHADCBDF)                                       */
*/*%INCLUDE SYSLIB  (IHADCB  )                                       */
*/*%INCLUDE SYSLIB  (IEZDEB  )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*                                                                  0595
*       ;                                                          0595
@DATA    DS    0H
@CH00062 DC    H'0'
@CH00039 DC    H'1'
@CH01935 DC    H'36'
@CH02411 DC    H'100'
@SM02635 MVC   ESTAEXEC(0),ESTALIST
@DATD    DSECT
         DS    0F
@SA00007 DS    1F
@SA00002 DS    1F
@SA00003 DS    1F
@SA00006 DS    1F
@SA00004 DS    1F
@SA00005 DS    1F
IECIOFMT CSECT
         DS    0F
@CF00078 DC    F'4'
@CF00731 DC    F'16'
@DATD    DSECT
         DS    0D
DEBDAPTR DS    A
DEBSBPTR DS    A
SDWAPTR  DS    A
TCBPTR   DS    A
DEBCNTR  DS    F
EXTENT   DS    F
UCBPTR   DS    A
@TS00001 DS    CL2
         DS    CL2
SAVEA1   DS    CL72
ERRSW    DS    BL1
         DS    CL3
ESTAPARM DS    CL136
         ORG   ESTAPARM
ESTAERR  DS    BL4
         ORG   ESTAERR
ERREXP   DS    BL1
LOCKHELD EQU   ESTAERR+0
UNEXP2   EQU   ESTAERR+0
@NM00112 EQU   ESTAERR+0
         ORG   ESTAPARM+4
RTYADR   DS    AL4
RTYREGS  DS    CL64
         ORG   RTYREGS
@NM00113 DS    AL4
RTYREG1  DS    AL4
REG2TO12 DS    CL44
@NM00114 DS    CL12
         ORG   ESTAPARM+72
LCALREGS DS    CL64
         ORG   ESTAPARM+136
ISAMBIT  DS    BL1
         DS    CL3
UNPACK   DS    CL5
         ORG   UNPACK
PACKAREA DS    CL4
GARBAGE  DS    CL1
         ORG   UNPACK+5
         DS    CL3
VERIFY   DS    CL8
SAVESTK  DS    30A
UCBTBL   DS    30F
IECIOFMT CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV02383 DC    V(IECIOEXD)
@CV02384 DC    V(IECIOUCB)
         DS    0D
ISAMACB  DC    XL2'8008'
ISAMDCB  DC    XL2'8000'
HIGHON   DC    XL1'80'
LOWBIT   DC    XL1'01'
SHIFT2   DC    XL1'02'
ZEROBYTE DC    XL1'00'
@CB02641 DC    B'0000111111110000'
@CB02643 DC    B'0000001101110000'
@CB02645 DC    B'1111111111110000'
@CB02647 DC    B'0000110001000000'
TRANS    DS    CL256
         ORG   TRANS
@NM00115 DS    CL64
BL       DC    CL1' '
@NM00116 DS    CL175
NUMS     DC    CL16'0123456789ABCDEF'
         ORG   TRANS+256
DEBERR   DC    CL56'*** NOT ALL DEBS ON THE DEB CHAIN COULD BE ACCESSEDC
                ***'
DEBHDR   DC    CL20'FOR DEB AT LOCATION '
DEBUS    DC    CL19'-------------------'
ENDMSG   DC    CL41'IOS FORMATTER TERMINATED WITH ABEND CODE '
EXDERR   DC    CL67'*** EXCPD(XDBA) NOT FORMATTED - DATA NOT AVAILABLE C
               TO ACCESS IT ***'
INCOMP   DC    CL62'*** IOS FORMATTING OMITTED, DUMP IS NOT FROM AN MVSC
                SYSTEM ***'
NOINF    DC    CL87'*** IOS FORMATTER TERMINATED - PARAMETER LIST DID NC
               OT CONTAIN NECESSARY INFORMATION ***'
NOMETHOD DC    CL87'*** UCB PROCESSING TERMINATED FOR THIS DEB - UNABLEC
                TO DETERMINE ACCESS METHOD TYPE ***'
NOUCBS   DC    CL39'*** FOR THIS DEB, THERE ARE NO UCBS ***'
TCBERR   DC    CL61'*** IOS FORMATTER TERMINATED - TCB COULD NOT BE ACCC
               ESSED ***'
UCBERR   DC    CL61'*** UCB NOT FORMATTED - DATA NOT AVAILABLE TO ACCESC
               S IT ***'
IOPATCH  DC    CL200'PATCH AREA FOR IECIOFMT - IT IS 200 BYTES LONG'
@DATD    DSECT
ESTAEXEC   ESTAE  ESTAERTN,MF=L
IECIOFMT CSECT
ESTALIST   ESTAE  ESTAERTN,MF=L
ESTALEN    DC     A(ESTALEN-ESTALIST)
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IECIOFMT CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
PREFXPTR EQU   @02
UCBMATCH EQU   @09
TBLINDX  EQU   @06
TBLCUR   EQU   @08
STKPTR   EQU   @02
SAVEREG1 EQU   @08
RCCODE   EQU   @08
PARMSAVE EQU   @06
NMEXT    EQU   @07
LOOPCNTR EQU   @11
DATAPTR  EQU   @04
COMPC    EQU   @12
DEBEXPTR EQU   @06
DEBPTR   EQU   @05
DCBPTR   EQU   @09
ABDPLPTR EQU   @01
VADR     EQU   @00
PARMPTR  EQU   @01
TREG2    EQU   @02
R5       EQU   @05
TREG6    EQU   @06
REG13    EQU   @13
DREG     EQU   @03
RCREG    EQU   @15
GPR11P   EQU   @11
GPR12P   EQU   @12
GPR13P   EQU   @13
GPR14P   EQU   @14
GPR15P   EQU   @15
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR02P   EQU   @02
GPR12F   EQU   @12
GPR00F   EQU   @00
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
ABDPL    EQU   0
ADPLTCB  EQU   ABDPL
ADPLSBPL EQU   ABDPL+6
ADPLFLAG EQU   ABDPL+7
ADPLSNPR EQU   ADPLFLAG
ADPLSYTM EQU   ADPLFLAG
ADPLBUF  EQU   ABDPL+8
ADPLPRNT EQU   ABDPL+12
ADPLCVT  EQU   ABDPL+16
ADPLMEMA EQU   ABDPL+20
ADPLCOM1 EQU   ABDPL+28
ADPLCOM2 EQU   ABDPL+32
ADPLFMT1 EQU   ABDPL+44
ADPLFMT2 EQU   ABDPL+48
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
IHADCB   EQU   0
IHADCS00 EQU   0
DCBFDAD  EQU   IHADCS00+5
IHADCS01 EQU   0
DCBDVTBL EQU   IHADCS01
IHADCS11 EQU   0
DCBRELB  EQU   IHADCS11
DCBREL   EQU   DCBRELB+1
DCBBUFCB EQU   IHADCS11+4
DCBDSORG EQU   IHADCS11+10
DCBDSRG1 EQU   DCBDSORG
DCBDSRG2 EQU   DCBDSORG+1
DCBIOBAD EQU   IHADCS11+12
DCBODEB  EQU   DCBIOBAD
DCBLNP   EQU   DCBODEB
DCBQSLM  EQU   DCBLNP
DCBIOBAA EQU   DCBODEB+1
IHADCS50 EQU   0
DCBSVCXL EQU   IHADCS50
DCBEODAD EQU   IHADCS50+4
DCBBFALN EQU   DCBEODAD
DCBHIARC EQU   DCBBFALN
DCBBFTEK EQU   DCBHIARC
DCBBFT   EQU   DCBBFTEK
DCBEXLST EQU   IHADCS50+8
DCBRECFM EQU   DCBEXLST
DCBRECLA EQU   DCBRECFM
IHADCS24 EQU   0
DCBOFLGS EQU   IHADCS24+8
DCBOFLWR EQU   DCBOFLGS
DCBIFLG  EQU   IHADCS24+9
DCBIBPCT EQU   DCBIFLG
DCBMACR  EQU   IHADCS24+10
DCBMACR1 EQU   DCBMACR
DCBMRFE  EQU   DCBMACR1
DCBMRGET EQU   DCBMRFE
DCBMRAPG EQU   DCBMACR1
DCBMRRD  EQU   DCBMRAPG
DCBMRCI  EQU   DCBMACR1
DCBMRMVG EQU   DCBMRCI
DCBMRLCG EQU   DCBMACR1
DCBMRABC EQU   DCBMACR1
DCBMRPT1 EQU   DCBMRABC
DCBMRSBG EQU   DCBMRPT1
DCBMRCRL EQU   DCBMACR1
DCBMRCHK EQU   DCBMRCRL
DCBMRRDX EQU   DCBMRCHK
DCBMRDMG EQU   DCBMACR1
DCBMACR2 EQU   DCBMACR+1
DCBMRPUT EQU   DCBMACR2
DCBMRWRT EQU   DCBMACR2
DCBMRMVP EQU   DCBMACR2
DCBMR5WD EQU   DCBMACR2
DCBMRLDM EQU   DCBMR5WD
DCBMRLCP EQU   DCBMRLDM
DCBMR4WD EQU   DCBMACR2
DCBMRPT2 EQU   DCBMR4WD
DCBMRTMD EQU   DCBMRPT2
DCBMR3WD EQU   DCBMACR2
DCBMRCTL EQU   DCBMR3WD
DCBMRSTK EQU   DCBMRCTL
DCBMR1WD EQU   DCBMACR2
DCBMRSWA EQU   DCBMR1WD
DCBMRDMD EQU   DCBMRSWA
IHADCS25 EQU   0
DCBMACRF EQU   IHADCS25+2
DCBMACF1 EQU   DCBMACRF
DCBMFFE  EQU   DCBMACF1
DCBMFGET EQU   DCBMFFE
DCBMFAPG EQU   DCBMACF1
DCBMFRD  EQU   DCBMFAPG
DCBMFCI  EQU   DCBMACF1
DCBMFMVG EQU   DCBMFCI
DCBMFLCG EQU   DCBMACF1
DCBMFABC EQU   DCBMACF1
DCBMFPT1 EQU   DCBMFABC
DCBMFSBG EQU   DCBMFPT1
DCBMFCRL EQU   DCBMACF1
DCBMFCHK EQU   DCBMFCRL
DCBMFDMG EQU   DCBMACF1
DCBMACF2 EQU   DCBMACRF+1
DCBMFPUT EQU   DCBMACF2
DCBMFWRT EQU   DCBMACF2
DCBMFMVP EQU   DCBMACF2
DCBMF5WD EQU   DCBMACF2
DCBMFLDM EQU   DCBMF5WD
DCBMFLCP EQU   DCBMFLDM
DCBMF4WD EQU   DCBMACF2
DCBMFPT2 EQU   DCBMF4WD
DCBMFTMD EQU   DCBMFPT2
DCBMF3WD EQU   DCBMACF2
DCBMFCTL EQU   DCBMF3WD
DCBMFSTK EQU   DCBMFCTL
DCBMF1WD EQU   DCBMACF2
DCBMFSWA EQU   DCBMF1WD
DCBMFDMD EQU   DCBMFSWA
DCBDEBAD EQU   IHADCS25+4
DCBIFLGS EQU   DCBDEBAD
DCBIFPCT EQU   DCBIFLGS
IHADCS26 EQU   0
DCBWRITE EQU   IHADCS26
DCBREAD  EQU   DCBWRITE
DCBWRITA EQU   DCBREAD+1
IHADCS27 EQU   0
DCBGET   EQU   IHADCS27
DCBPUT   EQU   DCBGET
DCBGETA  EQU   DCBPUT+1
IHADCS36 EQU   0
DCBGERR  EQU   IHADCS36
DCBPERR  EQU   DCBGERR
DCBCHECK EQU   DCBPERR
DCBOPTCD EQU   DCBCHECK
DCBOPTH  EQU   DCBOPTCD
DCBOPTO  EQU   DCBOPTH
DCBOPTZ  EQU   DCBOPTCD
DCBGERRA EQU   DCBCHECK+1
DCBPERRA EQU   DCBGERRA
DCBSYNAD EQU   IHADCS36+4
DCBCIND1 EQU   IHADCS36+8
DCBCIND2 EQU   IHADCS36+9
DCBIOBA  EQU   IHADCS36+16
DCBCICB  EQU   DCBIOBA
IHADCS52 EQU   0
DCBDIRCT EQU   IHADCS52
DCBQSWS  EQU   DCBDIRCT
DCBUSASI EQU   DCBQSWS
DCBQADFS EQU   DCBUSASI
DCBBUFOF EQU   DCBDIRCT+1
IHADCS37 EQU   0
DCBFLAG1 EQU   IHADCS37
IHADCS38 EQU   0
DCBEOBR  EQU   IHADCS38
DCBPOINT EQU   IHADCS38+12
DCBCNTRL EQU   DCBPOINT
IHADCS40 EQU   0
DCBEOBAD EQU   IHADCS40
DCBCCCW  EQU   IHADCS40+4
DCBRECAD EQU   DCBCCCW
DCBRECBT EQU   DCBRECAD
DCBRCREL EQU   DCBRECBT
@NM00029 EQU   IHADCS40+12
DCBEROPT EQU   @NM00029
DEBBASIC EQU   0
DEBTCBAD EQU   DEBBASIC
DEBDEBAD EQU   DEBBASIC+4
DEBIRBAD EQU   DEBBASIC+8
DEBOFLGS EQU   DEBIRBAD
DEBOPATB EQU   DEBBASIC+12
DEBFLGS1 EQU   DEBBASIC+14
DEBUSRPG EQU   DEBBASIC+16
DEBNMEXT EQU   DEBUSRPG
DEBRRQ   EQU   DEBBASIC+20
DEBECBAD EQU   DEBRRQ
DEBDCBAD EQU   DEBBASIC+24
DEBPROTG EQU   DEBDCBAD
DEBAPPAD EQU   DEBBASIC+28
DEBEXSCL EQU   DEBAPPAD
DEBBASND EQU   DEBBASIC+32
DEBDASD  EQU   0
DEBUCBAD EQU   DEBDASD
DEBACSMD EQU   0
DEBVOLSQ EQU   DEBACSMD
DEBVOLBT EQU   DEBVOLSQ
DEBDSNM  EQU   DEBACSMD+4
DEBUTSAA EQU   DEBDSNM
DEBACS01 EQU   0
DEBDSNAM EQU   DEBACS01
DEBACS02 EQU   0
DEBDBLK  EQU   DEBACS02
DEBACS03 EQU   0
DEBACS04 EQU   0
DEBTBFRA EQU   DEBACS04
DEBTCCWA EQU   DEBACS04+4
DEBACS05 EQU   0
DEBFUCBA EQU   DEBACS05
DEBLUCBA EQU   DEBACS05+4
DEBACS06 EQU   0
DEBACS07 EQU   0
DEBACS08 EQU   0
DEBSUBNM EQU   0
DEB      EQU   0
DEBAVT   EQU   DEB
DEBEOEA  EQU   DEBAVT
DEBEOEAB EQU   DEBEOEA
DEBSIOA  EQU   DEBAVT+4
DEBSIOAB EQU   DEBSIOA
DEBPCIA  EQU   DEBAVT+8
DEBPCIAB EQU   DEBPCIA
DEBCEA   EQU   DEBAVT+12
DEBCEAB  EQU   DEBCEA
DEBXCEA  EQU   DEBAVT+16
DEBXCEAB EQU   DEBXCEA
DEBPREFX EQU   DEB+20
DEBXTNP  EQU   DEBPREFX+8
DEBXTN   EQU   0
DEBXFLG1 EQU   DEBXTN+2
DEBXDSO1 EQU   DEBXTN+16
SDWA     EQU   0
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWAREQ  EQU   SDWACMPF
SDWACMPC EQU   SDWAABCC+1
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAERRD EQU   SDWAFLGS+3
SDWAIOFS EQU   SDWA+238
SDWARTYA EQU   SDWA+240
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWARCDE EQU   SDWAPARQ
SDWAACF2 EQU   SDWAPARQ+1
SDWAUPRG EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWASDA0 EQU   SDWASDAT
SDWASDA1 EQU   SDWASDAT+1
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBDEB   EQU   TCB+8
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXCPD EQU   TCB+192
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBXSCT  EQU   TCB+240
TCBXSCT1 EQU   TCBXSCT
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
ACCESS   EQU   0
PRINT    EQU   0
BUFFER   EQU   0
ADDRESS  EQU   BUFFER+20
DATABYTE EQU   0
DATADWRD EQU   0
DATAHALF EQU   0
DATAWORD EQU   0
DATAADR  EQU   DATAWORD+1
FLGS1    EQU   0
RETRYPT  EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
CVTPTR   EQU   ADPLCVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
DEBBAS02 EQU   DEBBASND
DEBDDS1  EQU   DEBBAS02
DEBSUCBA EQU   DEBDDS1
DEBDEVED EQU   DEBDDS1+4
DEBRDCB  EQU   DEBDDS1+4
DEBPDCB  EQU   DEBDDS1+8
DEBWDCB  EQU   DEBDDS1+12
DEBACS09 EQU   DEBDEVED
DEBASC09 EQU   DEBACS09
DEBEAMFG EQU   DEBASC09+3
DEBDSID  EQU   DEBASC09+4
DEBEOD   EQU   DEBASC09+12
DEBBOE   EQU   DEBEOD
DEBEODRV EQU   DEBBOE
DEBEODTT EQU   DEBBOE+1
DEBEOD0  EQU   DEBBOE+2
DEBEODSS EQU   DEBBOE+3
DEBBAS01 EQU   DEBBASND
DEBISAM  EQU   DEBBAS01
DEBFIEAD EQU   DEBISAM
DEBFPEAD EQU   DEBISAM+4
DEBFOEAD EQU   DEBISAM+8
DEBEXPT  EQU   DEBISAM+12
DEBRPSID EQU   DEBEXPT
PSARSVTE EQU   PSARSVT
ABNDCMPC EQU   SDWACMPC
ABND     EQU   ABNDCMPC
ABNDTYPE EQU   ABND
OFFSET   EQU   ADPLFMT1
UCBTBLI  EQU   UCBTBL
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00108 EQU   ABND
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
DEBEXPTA EQU   DEBEXPT+1
DEBRSV12 EQU   DEBRPSID
DEBRSV11 EQU   DEBRPSID
DEBRSV10 EQU   DEBRPSID
DEBRSV09 EQU   DEBRPSID
DEBRPSAP EQU   DEBRPSID
DEBRPSO  EQU   DEBRPSID
DEBRPSI  EQU   DEBRPSID
DEBRPSP  EQU   DEBRPSID
DEBFOEB  EQU   DEBFOEAD+1
DEBNOEE  EQU   DEBFOEAD
DEBFPEB  EQU   DEBFPEAD+1
DEBNPEE  EQU   DEBFPEAD
DEBFIEB  EQU   DEBFIEAD+1
DEBNIEE  EQU   DEBFIEAD
DEBBOESS EQU   DEBEODSS
DEBBOE0  EQU   DEBEOD0
DEBBOETT EQU   DEBEODTT
DEBBOERV EQU   DEBEODRV
DEBRV008 EQU   DEBDSID+7
DEBWTPTI EQU   DEBDSID+6
DEBEXDTE EQU   DEBDSID
DEBRV007 EQU   DEBEAMFG
DEBRV006 EQU   DEBEAMFG
DEBRV005 EQU   DEBEAMFG
DEBRV004 EQU   DEBEAMFG
DEBSECVL EQU   DEBEAMFG
DEBVAMSG EQU   DEBEAMFG
DEBDSOPN EQU   DEBEAMFG
DEBMULTI EQU   DEBEAMFG
DEBVSEQU EQU   DEBASC09+2
DEBDSSQL EQU   DEBASC09+1
DEBVOLAC EQU   DEBASC09
DEBWDCBA EQU   DEBWDCB+1
DEBRSV08 EQU   DEBWDCB
DEBPDCBA EQU   DEBPDCB+1
DEBRSV07 EQU   DEBPDCB
DEBRDCBA EQU   DEBRDCB+1
DEBRSV06 EQU   DEBRDCB
DEBSUCBB EQU   DEBSUCBA+1
DEBSDVM  EQU   DEBSUCBA
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
@NM00111 EQU   DATAWORD
@NM00110 EQU   BUFFER+29
@NM00109 EQU   BUFFER
@NM00107 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBRV143 EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00106 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBRV327 EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBRV326 EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBSTAWA EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBCCPVI EQU   TCBXSCT+2
TCBRV325 EQU   TCBXSCT+1
TCBRV324 EQU   TCBXSCT1
TCBRV323 EQU   TCBXSCT1
TCBRV322 EQU   TCBXSCT1
TCBRV321 EQU   TCBXSCT1
TCBRV320 EQU   TCBXSCT1
TCBRV319 EQU   TCBXSCT1
TCBS3A   EQU   TCBXSCT1
TCBACTIV EQU   TCBXSCT1
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00105 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00104 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
@NM00103 EQU   SDWA+512
SDWAVRA  EQU   SDWARA+4
SDWAURAL EQU   SDWARA+3
@NM00102 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
SDWAERTM EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00101 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00100 EQU   SDWADDAT+3
@NM00099 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00098 EQU   SDWASDA1
SDWAERR  EQU   SDWASDA1
SDWAIO   EQU   SDWASDA1
SDWADM   EQU   SDWASDA0
SDWAQQS  EQU   SDWASDA0
SDWACBS  EQU   SDWASDA0
SDWAGTF  EQU   SDWASDA0
SDWASWA  EQU   SDWASDA0
SDWALSQA EQU   SDWASDA0
SDWASQA  EQU   SDWASDA0
SDWANUC  EQU   SDWASDA0
@NM00097 EQU   SDWADUMP+2
@NM00096 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00095 EQU   SDWADPFS
SDWAENSN EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWAREXN EQU   SDWARECP+16
SDWACSCT EQU   SDWARECP+8
SDWAMODN EQU   SDWARECP
SDWASEQ# EQU   SDWA+290
SDWAASID EQU   SDWA+288
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00094 EQU   SDWAACF3
@NM00093 EQU   SDWAACF2
@NM00092 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00091 EQU   SDWAACF2
SDWARCRD EQU   SDWAACF2
SDWALCPU EQU   SDWACPUA+2
@NM00090 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
SDWACPUI EQU   SDWA+239
@NM00089 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
SDWAERFL EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
SDWACLUP EQU   SDWAERRD
@NM00088 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAPERC EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00087 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWAMCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00086 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00085 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00084 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00083 EQU   SDWAINC2
@NM00082 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00081 EQU   SDWAILC2
@NM00080 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00079 EQU   SDWANXT2
@NM00078 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00077 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00076 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00075 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00074 EQU   SDWAINC1
@NM00073 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00072 EQU   SDWAILC1
@NM00071 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00070 EQU   SDWANXT1
@NM00069 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00068 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00067 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00066 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00065 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00064 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00063 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
@NM00062 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00061 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAPARM EQU   SDWA
DEBXSAMB EQU   DEBXTN+28
DEBXOPNJ EQU   DEBXTN+24
DEBXXARG EQU   DEBXTN+20
DEBXMCF2 EQU   DEBXTN+19
DEBXMCF1 EQU   DEBXTN+18
DEBXDSO2 EQU   DEBXTN+17
DEBXDBPR EQU   DEBXTN+12
DEBXDCBM EQU   DEBXTN+8
DEBXDSAB EQU   DEBXTN+4
DEBXRV48 EQU   DEBXTN+3
DEBXRV47 EQU   DEBXFLG1
DEBXRV46 EQU   DEBXFLG1
DEBXRV45 EQU   DEBXFLG1
DEBXRV44 EQU   DEBXFLG1
DEBXRV43 EQU   DEBXFLG1
DEBXDSSI EQU   DEBXFLG1
DEBXTSKC EQU   DEBXFLG1
DEBXCDCB EQU   DEBXFLG1
DEBXLNGH EQU   DEBXTN
DEBTBLOF EQU   DEBPREFX+14
DEBAMTYP EQU   DEBPREFX+13
DEBLNGTH EQU   DEBPREFX+12
DEBDCBMK EQU   DEBXTNP
DEBDSCBA EQU   DEBPREFX+1
DEBWKARA EQU   DEBPREFX
DEBXCEAD EQU   DEBXCEA+1
DEBXCENP EQU   DEBXCEAB
DEBRSV35 EQU   DEBXCEAB
DEBRSV34 EQU   DEBXCEAB
DEBRSV33 EQU   DEBXCEAB
DEBRSV32 EQU   DEBXCEAB
DEBCEAD  EQU   DEBCEA+1
DEBCENP  EQU   DEBCEAB
DEBRSV31 EQU   DEBCEAB
DEBRSV30 EQU   DEBCEAB
DEBRSV29 EQU   DEBCEAB
DEBRSV28 EQU   DEBCEAB
DEBPCIAD EQU   DEBPCIA+1
DEBPCINP EQU   DEBPCIAB
DEBRSV27 EQU   DEBPCIAB
DEBRSV26 EQU   DEBPCIAB
DEBRSV25 EQU   DEBPCIAB
DEBRSV24 EQU   DEBPCIAB
DEBSIOAD EQU   DEBSIOA+1
DEBSIONP EQU   DEBSIOAB
DEBFIX   EQU   DEBSIOAB
DEBIOVR  EQU   DEBSIOAB
DEBSIOX  EQU   DEBSIOAB
DEBPGFX  EQU   DEBSIOAB
DEBEOEAD EQU   DEBEOEA+1
DEBEOENP EQU   DEBEOEAB
DEBRSV22 EQU   DEBEOEAB
DEBRSV21 EQU   DEBEOEAB
DEBRSV20 EQU   DEBEOEAB
DEBESMVR EQU   DEBEOEAB
DEBSUBID EQU   DEBSUBNM
DEBSIOA2 EQU   DEBACS08+24
DEBRPSIO EQU   DEBACS08+20
DEBFREED EQU   DEBACS08+16
@NM00036 EQU   DEBACS08+12
@NM00035 EQU   DEBACS08+8
DEBDISAD EQU   DEBACS08+4
@NM00034 EQU   DEBACS08
DEBRPSST EQU   DEBACS07+64
DEBARECK EQU   DEBACS07+60
DEBAREWT EQU   DEBACS07+56
DEBACHK  EQU   DEBACS07+52
DEBAWRIT EQU   DEBACS07+48
DEBASETL EQU   DEBACS07+44
DEBAREAD EQU   DEBACS07+40
DEBCRECK EQU   DEBACS07+36
DEBCREWT EQU   DEBACS07+32
DEBCCHK  EQU   DEBACS07+28
DEBCWRIT EQU   DEBACS07+24
DEBCSETL EQU   DEBACS07+20
DEBCREAD EQU   DEBACS07+16
DEBWKPT5 EQU   DEBACS07+12
DEBWKPT4 EQU   DEBACS07+8
DEBGET   EQU   DEBACS07+4
@NM00033 EQU   DEBACS07
DEBPUT   EQU   DEBACS06+4
DEBDCBFA EQU   DEBACS06
DEBLUCBB EQU   DEBLUCBA+1
DEBRSV18 EQU   DEBLUCBA
DEBFUCBB EQU   DEBFUCBA+1
DEBRSV17 EQU   DEBFUCBA
DEBTCCWB EQU   DEBTCCWA+1
DEBRSV16 EQU   DEBTCCWA
DEBTBFRB EQU   DEBTBFRA+1
DEBRSV15 EQU   DEBTBFRA
DEBDBPEF EQU   DEBACS03+8
DEBDBPP  EQU   DEBACS03+4
DEBDTPP  EQU   DEBACS03
DEBDBPE  EQU   DEBDBLK+1
DEBDBPT  EQU   DEBDBLK
DEBEXTNM EQU   DEBDSNAM
DEBLRECL EQU   DEBACSMD+14
DEBBLKSI EQU   DEBACSMD+12
DEBRSV14 EQU   DEBDSNM+4
DEBUTSAB EQU   DEBUTSAA+1
DEBRSV13 EQU   DEBUTSAA
DEBVOLNM EQU   DEBACSMD+2
DEBVLSEQ EQU   DEBVOLSQ+1
DEBRSV42 EQU   DEBVOLBT
DEBRSV41 EQU   DEBVOLBT
DEBRSV40 EQU   DEBVOLBT
DEBRSV39 EQU   DEBVOLBT
DEBRSV38 EQU   DEBVOLBT
DEBRSV37 EQU   DEBVOLBT
DEBRSV36 EQU   DEBVOLBT
DEBEXFUL EQU   DEBVOLBT
DEBNMTRK EQU   DEBDASD+14
DEBENDHH EQU   DEBDASD+12
DEBENDCC EQU   DEBDASD+10
DEBSTRHH EQU   DEBDASD+8
DEBSTRCC EQU   DEBDASD+6
DEBBINUM EQU   DEBDASD+4
DEBUCBA  EQU   DEBUCBAD+1
DEBDVMOD EQU   DEBUCBAD
DEBAPPB  EQU   DEBAPPAD+1
DEBDCBB  EQU   DEBDCBAD+1
DEBDEBID EQU   DEBPROTG
DEBECBB  EQU   DEBECBAD+1
DEBPRIOR EQU   DEBECBAD
DEBUSRPB EQU   DEBUSRPG+1
DEBRSV05 EQU   DEBBASIC+15
DEBXTNIN EQU   DEBFLGS1
DEBAPFIN EQU   DEBFLGS1
DEBF1CEV EQU   DEBFLGS1
DEBCINDI EQU   DEBFLGS1
DEBRSV02 EQU   DEBFLGS1
DEBRSIOA EQU   DEBFLGS1
DEBEOFDF EQU   DEBFLGS1
DEBPWCKD EQU   DEBFLGS1
DEBQSCNT EQU   DEBBASIC+13
DEBACCS  EQU   DEBOPATB
DEBPOSIT EQU   DEBOPATB
DEBZERO  EQU   DEBOPATB
DEBABEND EQU   DEBOPATB
DEBIRBB  EQU   DEBIRBAD+1
DEBRERR  EQU   DEBOFLGS
DEBLABEL EQU   DEBOFLGS
DEBSPLIT EQU   DEBOFLGS
DEBDCB   EQU   DEBOFLGS
DEBRLSE  EQU   DEBOFLGS
DEBEOF   EQU   DEBOFLGS
DEBDISP  EQU   DEBOFLGS
DEBDEBB  EQU   DEBDEBAD+1
DEBAMLNG EQU   DEBDEBAD
DEBTCBB  EQU   DEBTCBAD+1
DEBNMSUB EQU   DEBTCBAD
DCBEOB   EQU   IHADCS40+20
DCBPRECL EQU   IHADCS40+18
@NM00032 EQU   IHADCS40+16
@NM00031 EQU   @NM00029+1
@NM00030 EQU   DCBEROPT
DCBERABE EQU   DCBEROPT
DCBERSKP EQU   DCBEROPT
DCBERACC EQU   DCBEROPT
@NM00028 EQU   IHADCS40+10
@NM00027 EQU   IHADCS40+9
@NM00026 EQU   IHADCS40+8
DCBRECA  EQU   DCBRECAD+1
@NM00025 EQU   DCBRECBT
DCBRCFGT EQU   DCBRCREL
DCBRCTRU EQU   DCBRCREL
DCBLCCW  EQU   DCBEOBAD
DCBNOTE  EQU   DCBCNTRL
DCBLRECL EQU   IHADCS38+10
@NM00024 EQU   IHADCS38+8
DCBEOBW  EQU   IHADCS38+4
DCBEOBRA EQU   DCBEOBR+1
DCBNCP   EQU   DCBEOBR
@NM00023 EQU   DCBFLAG1
DCBSTFLS EQU   DCBFLAG1
DCBSTQCK EQU   DCBFLAG1
DCBDIRCQ EQU   DCBBUFOF
DCBQSTRU EQU   DCBUSASI
@NM00022 EQU   DCBUSASI
DCBQADF3 EQU   DCBQADFS
DCBQADF2 EQU   DCBQADFS
DCBQADF1 EQU   DCBQADFS
DCBBLBP  EQU   DCBUSASI
@NM00021 EQU   DCBUSASI
DCBCICBA EQU   DCBCICB+1
@NM00020 EQU   DCBCICB
DCBOFFSW EQU   IHADCS36+15
DCBOFFSR EQU   IHADCS36+14
DCBWCPL  EQU   IHADCS36+13
DCBWCPO  EQU   IHADCS36+12
DCBBLKSI EQU   IHADCS36+10
DCBCNQSM EQU   DCBCIND2
DCBCNFEO EQU   DCBCIND2
DCBCNCHS EQU   DCBCIND2
DCBCNBFP EQU   DCBCIND2
DCBCNIOE EQU   DCBCIND2
DCBCNCLO EQU   DCBCIND2
DCBCNWRO EQU   DCBCIND2
DCBCNSTO EQU   DCBCIND2
DCBCNEXB EQU   DCBCIND1
@NM00019 EQU   DCBCIND1
DCBCNBRM EQU   DCBCIND1
@NM00018 EQU   DCBCIND1
DCBCNEVA EQU   DCBCIND1
DCBCNEVB EQU   DCBCIND1
DCBCNSRD EQU   DCBCIND1
DCBCNTOV EQU   DCBCIND1
DCBSYNA  EQU   DCBSYNAD+1
DCBIOBL  EQU   DCBSYNAD
DCBCHCKA EQU   DCBPERRA
DCBOPTJ  EQU   DCBOPTCD
DCBOPTT  EQU   DCBOPTCD
DCBSRCHD EQU   DCBOPTZ
DCBOPTQ  EQU   DCBOPTCD
DCBBCKPT EQU   DCBOPTO
DCBOPTC  EQU   DCBOPTCD
DCBOPTU  EQU   DCBOPTCD
DCBOPTW  EQU   DCBOPTCD
DCBPUTA  EQU   DCBGETA
@NM00017 EQU   DCBPUT
DCBREADA EQU   DCBWRITA
@NM00016 EQU   DCBREAD
DCBDEBA  EQU   DCBDEBAD+1
@NM00015 EQU   DCBIFLGS
DCBIFIOE EQU   DCBIFLGS
DCBCH12  EQU   DCBIFPCT
DCBCH9   EQU   DCBIFPCT
DCBIFEC  EQU   DCBIFLGS
DCBMFSTI EQU   DCBMFDMD
DCBMFAWR EQU   DCBMFSTK
DCBMFUIP EQU   DCBMFTMD
DCBMFIDW EQU   DCBMFLCP
DCBMFWRK EQU   DCBMFMVP
DCBMFRDQ EQU   DCBMFWRT
DCBMFGTQ EQU   DCBMFPUT
DCBMFSTL EQU   DCBMACF2
DCBMFCK  EQU   DCBMFDMG
DCBMFRDX EQU   DCBMFCHK
DCBMFDBF EQU   DCBMFSBG
DCBMFRDI EQU   DCBMFLCG
DCBMFRDK EQU   DCBMFMVG
DCBMFWRQ EQU   DCBMFRD
DCBMFPTQ EQU   DCBMFGET
DCBMFECP EQU   DCBMACF1
DCBTIOT  EQU   IHADCS25
DCBMRSTI EQU   DCBMRDMD
DCBMRAWR EQU   DCBMRSTK
DCBMRUIP EQU   DCBMRTMD
DCBMRIDW EQU   DCBMRLCP
DCBMRWRK EQU   DCBMRMVP
DCBMRRDQ EQU   DCBMRWRT
DCBMRGTQ EQU   DCBMRPUT
DCBMRSTL EQU   DCBMACR2
DCBMRCK  EQU   DCBMRDMG
DCBPGFXA EQU   DCBMRRDX
DCBMRDBF EQU   DCBMRSBG
DCBMRRDI EQU   DCBMRLCG
DCBMRRDK EQU   DCBMRMVG
DCBMRWRQ EQU   DCBMRRD
DCBMRPTQ EQU   DCBMRGET
DCBMRECP EQU   DCBMACR1
@NM00014 EQU   DCBIFLG
DCBIBIOE EQU   DCBIFLG
DCBICH12 EQU   DCBIBPCT
DCBICH9  EQU   DCBIBPCT
DCBIBEC  EQU   DCBIFLG
DCBOFIOF EQU   DCBOFLGS
DCBOFUEX EQU   DCBOFLGS
DCBOFTM  EQU   DCBOFLGS
DCBOFPPC EQU   DCBOFLGS
DCBOFOPN EQU   DCBOFLGS
DCBOFEOV EQU   DCBOFLGS
DCBOFLRB EQU   DCBOFLGS
DCBOFIOD EQU   DCBOFLWR
DCBDDNAM EQU   IHADCS24
DCBEXLSA EQU   DCBEXLST+1
DCBRECKL EQU   DCBRECFM
DCBRECCC EQU   DCBRECFM
DCBRECSB EQU   DCBRECFM
DCBRECBR EQU   DCBRECFM
DCBRECTO EQU   DCBRECLA
DCBRECL  EQU   DCBRECLA
DCBEODA  EQU   DCBEODAD+1
DCBBFA   EQU   DCBBFTEK
DCBH0    EQU   DCBBFTEK
DCBBFTKD EQU   DCBBFTEK
DCBBFTE  EQU   DCBBFT
DCBBFTKR EQU   DCBBFT
DCBBFTS  EQU   DCBBFT
DCBH1    EQU   DCBBFTEK
DCBSVCXA EQU   DCBSVCXL+1
@NM00013 EQU   DCBSVCXL
DCBODEBA EQU   DCBIOBAA
@NM00012 EQU   DCBQSLM
DCBUPDBT EQU   DCBQSLM
DCBUPDCM EQU   DCBQSLM
DCB1DVDS EQU   DCBQSLM
@NM00011 EQU   DCBDSRG2
DCBDSGTR EQU   DCBDSRG2
DCBACBM  EQU   DCBDSRG2
@NM00010 EQU   DCBDSRG2
DCBDSGTQ EQU   DCBDSRG2
DCBDSGTX EQU   DCBDSRG2
DCBDSGGS EQU   DCBDSRG2
DCBDSGU  EQU   DCBDSRG1
DCBDSGPO EQU   DCBDSRG1
@NM00009 EQU   DCBDSRG1
@NM00008 EQU   DCBDSRG1
DCBDSGCX EQU   DCBDSRG1
DCBDSGDA EQU   DCBDSRG1
DCBDSGPS EQU   DCBDSRG1
DCBDSGIS EQU   DCBDSRG1
DCBBUFL  EQU   IHADCS11+8
DCBBUFCA EQU   DCBBUFCB+1
DCBBUFNO EQU   DCBBUFCB
DCBDEVT  EQU   DCBREL
DCBKEYLE EQU   DCBRELB
DCBTRBAL EQU   IHADCS01+6
@NM00007 EQU   IHADCS01+5
@NM00006 EQU   IHADCS01+4
DCBDVTBA EQU   DCBDVTBL+1
@NM00005 EQU   DCBDVTBL
DCBKEYCN EQU   IHADCS00+4
DCBRELAD EQU   IHADCS00
@NM00004 EQU   IHADCB
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00003 EQU   CVTFIX+248
@NM00002 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTBAH   EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTRV490 EQU   CVTMAP+388
CVTSU    EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTVS1B  EQU   CVTOPTB
CVTVS1A  EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
ADPLABDA EQU   ABDPL+56
ADPLEXT  EQU   ABDPL+52
ADPLCOM4 EQU   ABDPL+40
ADPLCOM3 EQU   ABDPL+36
ADPLFRMT EQU   ABDPL+24
@NM00001 EQU   ADPLFLAG
ADPLDMGT EQU   ADPLFLAG
ADPLASID EQU   ABDPL+4
@NM00060 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00059 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00058 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00057 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00056 EQU   FLCFSA
@NM00055 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00054 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00053 EQU   FLCIOA
@NM00052 EQU   FLCMCLA+15
@NM00051 EQU   FLCMCLA+14
@NM00050 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00049 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00048 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00047 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00046 EQU   FLCPER
@NM00045 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00044 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00043 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00042 EQU   FLCPIILC
@NM00041 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00040 EQU   FLCSVILC
@NM00039 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00038 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00037 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00217 EQU   @EL00002
@RC00382 EQU   @RC00381
@RC00394 EQU   @RC00390
@RC00529 EQU   @EL00008
@RC00399 EQU   @RC00394
@RC00406 EQU   @RC00394
@RC00411 EQU   @RC00394
@RC00418 EQU   @RC00394
@RC00534 EQU   @RC00529
@RC00551 EQU   @RC00529
@ENDDATA EQU   *
         END   IECIOFMT,(C'PLS1918',0701,77299)
