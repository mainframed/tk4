TSDW     TITLE 'IEAVTSDW SUMDUMP WRITER                                *
                        '
IEAVTSDW CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(22)                                             0001
         DC    C'IEAVTSDW UZ09777 77103'                           0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @09,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@09                                         0001
*                                                                  0061
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE ERROR RECOVERY INFORMATION, BASES, AND DATA AREAS  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0061
*   SDWORKP=RTCTSDWK;               /* INIT THE SVC WORK AREA BASE   */
         L     @12,CVTPTR                                          0061
         L     @12,CVTRTMCT(,@12)                                  0061
         L     SDWORKP,RTCTSDWK(,@12)                              0061
*   RFY                                                            0062
*     SDWORK BASED(SDWORKP);                                       0062
*   SMWKBASE=RTCTSDSW;              /* INIT SUMDUMP WORK AREA BASE   */
         L     SMWKBASE,RTCTSDSW(,@12)                             0063
*   RFY                                                            0064
*     SMWK BASED(SMWKBASE);                                        0064
*   SVCDMPNM='IEAVTSDW';            /* IDENTIFY THIS MODULE, TO THE
*                                      ERROR ROUNTINE, AS IN CONTROL */
         MVC   SVCDMPNM(8,SDWORKP),@CC01758                        0065
*   ERRBASE1=BASEREG;               /* PUT THE BASE REG IN THE ERROR
*                                      RTN PARMLIST TO BE RESTORED IF
*                                      THERE IS A RETRY              */
         ST    BASEREG,ERRBASE1(,ERR6WPTR)                         0066
*   ERRADDR=ADDR(RETRYPT);          /* AND THEN SET UP THE RETRY   0067
*                                      ADDRESS                       */
*                                                                  0067
         LA    @12,RETRYPT                                         0067
         ST    @12,ERRADDR(,ERR6WPTR)                              0067
*   /*****************************************************************/
*   /*                                                               */
*   /* PGFIX THE FRR RTN BECAUSE THE SALLOC LOCK WILL BE HELD AND RTM*/
*   /* WON'T BE ABLE TO PAGE IT IN.                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0068
*   SDECB=0;                                                       0068
         SLR   @12,@12                                             0068
         ST    @12,SDECB(,SDWORKP)                                 0068
*   DO;                             /* PGFIX (R) A(SDFRRRTN)       0069
*                                      EA(SDESTAEX) ECB(SDECB)     0069
*                                      LONG(N) RELEASE(N)            */
*     RESPECIFY                                                    0070
*      (GPR00P,                                                    0070
*       GPR01P) RESTRICTED;                                        0070
*     GPR00P=ADDR(SDECB);           /* ECB ADDR                      */
         LR    GPR00P,SDWORKP                                      0071
*     GPR01P=ADDR(SDFRRRTN);        /* PAGE ADDR                     */
         L     GPR01P,@CV01737                                     0072
*     RESPECIFY                                                    0073
*       GPR15P RESTRICTED;                                         0073
*     GPR15P=ADDR(SDESTAEX);        /* VSL ADDR                      */
         L     GPR15P,@CV01736                                     0074
*     GPR01P=GPR01P×'50000000'X;    /* R, PGFIX, RELEASE & LONG FLAGS*/
         O     GPR01P,@CF01763                                     0075
*     SVC(113);                     /* ISSUE PGFIX SVC               */
         SVC   113                                                 0076
*     RESPECIFY                                                    0077
*      (GPR00P,                                                    0077
*       GPR01P) UNRESTRICTED;                                      0077
*     RESPECIFY                                                    0078
*       GPR15P UNRESTRICTED;                                       0078
*   END;                            /* PGFIX (R) A(SDFRRRTN)       0079
*                                      EA(SDESTAEX) ECB(SDECB)     0079
*                                      LONG(N) RELEASE(N)            */
*   DO;                             /* WAIT (1) ECB(SDECB)           */
*     RESPECIFY                                                    0081
*      (GPR00P,                                                    0081
*       GPR01P) RESTRICTED;                                        0081
*     GPR00P=1;                     /* LOAD WAIT COUNT               */
         LA    GPR00P,1                                            0082
*     GPR01P=ADDR(SDECB);           /* ADDRESS OF ECB                */
         LR    GPR01P,SDWORKP                                      0083
*     SVC(1);                       /* WAIT SVC                      */
         SVC   1                                                   0084
*     RESPECIFY                                                    0085
*      (GPR00P,                                                    0085
*       GPR01P) UNRESTRICTED;                                      0085
*   END;                            /* WAIT (1) ECB(SDECB)           */
*                                                                  0087
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE FOR LOOP TO COPY DATA FROM THE REAL STORAGE FRAMES */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0087
*   PRDKEY1=0;                      /* INIT DUMP RECORD HEADER       */
         L     @12,SDSMBUFF(,SDWORKP)                              0087
         MVI   PRDKEY1(@12),X'00'                                  0087
*   PRDKEY2=0;                      /* INIT DUMP RECORD HEADER       */
         MVI   PRDKEY2(@12),X'00'                                  0088
*   PRDASID=SMDPASID;               /* USE THE SUMMARY DUMP PSEUDO 0089
*                                      ASID TO PUT THE DATA INTO THE
*                                      DUMP IN A FORMAT COMPATIBLE 0089
*                                      WITH THE REST OF THE DUMP, BUT
*                                      UNIQUELY IDENTIFIED           */
         MVC   PRDASID(2,@12),@CB01372                             0089
*   PSEUDOAD=PASTRT;                /* BEGIN THE PSEUDO ADDRESSES FOR
*                                      THE PSEUDO ADDRESS SPACE THAT
*                                      WILL CONTAIN THE SUMMARY DUMP
*                                      DATA AT THE START OF THE    0090
*                                      PRIVATE AREA SO THAT AMDPRDMP
*                                      WILL NOT CONFUSE IT WITH    0090
*                                      COMMON STORAGE                */
*                                                                  0090
         L     @02,CVTPTR                                          0090
         L     @02,GDAPTR(,@02)                                    0090
         MVC   PSEUDOAD(4,@12),PASTRT(@02)                         0090
*   /*****************************************************************/
*   /*                                                               */
*   /* LOOP TO COPY DATA FROM THE REAL STORAGE FRAMES AND PASS IT TO */
*   /* IEAVTSDP TO BE PUT IN THE DUMP                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0091
*   DO INDEX=1 TO DIM(SMWKFRMA)     /* LOOP THROUGH THE LIST OF REAL
*                                      STORAGE BUFFERS               */
*         WHILE SMWKFRHD>0;         /* WHILE THERE IS THE POSSIBILITY
*                                      OF REAL BUFFER FRAMES STILL 0091
*                                      BEING HELD. NOTE: SMWKFRHD IS
*                                      A FIELD THAT MUST BE        0091
*                                      SERIALIZED BY THE SALLOC LOCK.
*                                      THIS CHECK OF IT CANNOT BE  0091
*                                      CONSIDERED AS HOLDING TRUE FOR
*                                      ANY CODE WITHIN THIS LOOP.  0091
*                                      HOWEVER, IT IS KNOWN THAT   0091
*                                      SMWKFRHD CAN ONLY BE        0091
*                                      DECREMENTED AT THIS TIME,   0091
*                                      HENCE IF IT IS 0 IT WILL STAY
*                                      0                             */
         LA    INDEX,1                                             0091
@DL00091 CLC   SMWKFRHD+196(2,SMWKBASE),@CH00038                   0091
         BNH   @DC00091                                            0091
*/* HOLDING THE SALLOC LOCK WHILE REFERENCING THE REAL STORAGE BUFFER
*AND SMWK FIELDS ASSOCIATED WITH IT AND WHILE CALLING RSM, PROVIDES
*NEEDED SERIALIZATION.                                               */
*                                                                  0092
*     RFY                                                          0092
*       RETCODE RSTD;               /* INTERFACE TO SETLOCK          */
*GL:                                                               0093
*     DO;                           /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(SALLOC)                0093
*                                      RELATED(IEAVTSDW(FL))         */
GL       DS    0H                                                  0094
*       RFY                                                        0094
*        (GPR11P,                                                  0094
*         GPR12P,                                                  0094
*         GPR13P,                                                  0094
*         GPR14P) RSTD;                                            0094
*       GPR13P=PSALITA;             /* ADDRESS OF LOCK INTERFACE   0095
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0095
*       GEN(LM GPR11P,GPR13P,444(GPR13P));/* LOAD LOCKWORD, CLHT AND
*                                      ENTRY ADRS.                   */
         LM GPR11P,GPR13P,444(GPR13P)
*       GEN(BALR GPR14P,GPR13P);    /* BALR TO SETLOCK RTN.          */
         BALR GPR14P,GPR13P
*       RFY                                                        0098
*        (GPR11P,                                                  0098
*         GPR12P,                                                  0098
*         GPR13P,                                                  0098
*         GPR14P) UNRSTD;                                          0098
*     END;                          /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(SALLOC)                0099
*                                      RELATED(IEAVTSDW(FL))         */
*     RFY                                                          0100
*       RETCODE UNRSTD;                                            0100
*     RFY                                                          0101
*      (FWR1,                                                      0101
*       FWR2) RSTD;                 /* THIS FRR WILL SUPERCEDE THE 0101
*                                      ESTAE WHICH IS THE CURRENT  0101
*                                      RECOVERY ENVIRONMENT. THE   0101
*                                      ESTAE WILL REMAIN AS COVERAGE
*                                      FOR AFTER THE FRR IS DELETED.
*                                      THE BASE FOR THE ERROR RTN  0101
*                                      PARMLIST WILL BE ALTERED TO 0101
*                                      POINT TO THE 6 WORDS RETURNED
*                                      BY SETFRR.                    */
*     ERRFRR=ON;                    /* INDICATE IN THE ERROR RECOVERY
*                                      PARMLIST THAT THE FRR IS BEING
*                                      USED                          */
         OI    ERRFRR(ERR6WPTR),B'10000000'                        0102
*     GEN SETS(FWR1,FWR2,ERR6WPTR) REFS(ADDRFRR,PSACSTK,FRRSCURR,FRRS,
*         FRRSLAST,PSALSFCC,PSA,FRRSFRRA,FRRSENTR,FRRSPARM) CODE   0103
*(SETFRR A,FRRAD=ADDRFRR,WRKREGS=(FWR1,FWR2),PARMAD=(ERR6WPTR));   0103
         SETFRR A,FRRAD=ADDRFRR,WRKREGS=(FWR1,FWR2),PARMAD=(ERR6WPTR)
*     RFY                                                          0104
*      (FWR1,                                                      0104
*       FWR2) UNRSTD;                                              0104
*     ERRWORK=ERRORWK;              /* COPY THE ESTAE PARMLIST INTO
*                                      THE THE FRR PARMLIST WHICH IS
*                                      NOW SUPERCEDING IT.           */
         MVC   ERRWORK(24,ERR6WPTR),ERRORWK(SDWORKP)               0105
*     ERRSLOCK=ON;                  /* SET THE FLAG THAT SHOWS THE 0106
*                                      SALLOC LOCK IS HELD           */
         OI    ERRSLOCK(ERR6WPTR),B'00000001'                      0106
*                                                                  0107
*     /***************************************************************/
*     /*                                                             */
*     /* LOCATE THE NEXT REAL STORAGE BUFFER FRAME TO BE PROCESSED   */
*     /* AND COPY THE CONTENTS TO THE OUTPUT BUFFER. THIS INVOLVES   */
*     /* TURNING DAT OFF BECAUSE THE REAL STORAGE BUFFER FRAME       */
*     /* CURRENTLY HAS NO VIRTUAL PAGE ASSIGNED TO IT.               */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0107
*     IF SMWKFRMA(INDEX)^=0         /* PROCESS THIS ENTRY IN THE LIST
*                                      IF IT STILL POINTS TO A FRAME */
*         &SMWKFRHD>0               /* AND IF THE LAST REAL STORAGE
*                                      BUFFER FRAME HAS NOT BEEN   0107
*                                      PROCESSED. (IF SUM DUMP     0107
*                                      PREVIOUSLY FAILED, OR IF THE
*                                      REAL STORAGE HAS BEEN STOLEN
*                                      BACK OR THE DIE HAS RETURNED
*                                      IT, THIS COUNT WILL ALREADY BE
*                                      0)                            */
*       THEN                        /* YES THIS FRAME CAN BE       0107
*                                      PROCESSED                     */
         LR    @12,INDEX                                           0107
         SLA   @12,2                                               0107
         LA    @02,196                                             0107
         ALR   @02,SMWKBASE                                        0107
         L     @12,SMWKFRMA-4(@12,@02)                             0107
         LTR   @12,@12                                             0107
         BZ    @RF00107                                            0107
         CLC   SMWKFRHD(2,@02),@CH00038                            0107
         BNH   @RF00107                                            0107
*       DO;                                                        0108
*         RFY                                                      0109
*          (TOADDR,                                                0109
*           TOLEN,                                                 0109
*           FROMADDR,                                              0109
*           FROMLEN) RSTD;                                         0109
*         TOLEN=PAGESIZE;           /* SET UP LENGTH FOR MOVE        */
         LH    @02,@CH01347                                        0110
         LR    TOLEN,@02                                           0110
*         FROMLEN=PAGESIZE;         /* SET UP LENGTH FOR MOVE        */
         LR    FROMLEN,@02                                         0111
*         FROMADDR=SMWKFRMA(INDEX); /* COPY FROM THE REAL STORAGE  0112
*                                      FRAME POINTED TO BY THIS ENTRY*/
         LR    FROMADDR,@12                                        0112
*         TOADDR=ADDR(PRDDATA);     /* INTO THE OUTPUT BUFFER        */
         L     TOADDR,SDSMBUFF(,SDWORKP)                           0113
         LA    TOADDR,PRDDATA(,TOADDR)                             0113
*                                                                  0114
*         /***********************************************************/
*         /*                                                         */
*         /* COPY FROM REAL TO VIRTUAL                               */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0114
*         SMWKPSW=''B;              /* INIT THE PSW THAT WILL BE USED
*                                      TO SHIFT FROM DAT ON TO OFF 0114
*                                      AND BACK ON AGAIN             */
         XC    SMWKPSW(8,SMWKBASE),SMWKPSW(SMWKBASE)               0114
*         SMWKPSWK='0C'X;           /* SET UP KEY 0, EC MODE, AND  0115
*                                      ENABLED FOR MACH CHK          */
         MVI   SMWKPSWK(SMWKBASE),X'0C'                            0115
*         GEN SETS(SMWKPSWS,SMWKBASE,SMWKPSWA,TOADDR,TOLEN,WORKREG,
*             FROMLEN) REFS(SMWKPSW,FROMADDR) CODE;                0116
         STOSM SMWKPSWS(SMWKBASE),X'00' USE THE CURRENT SYSTEM MASK
         LRA   TOADDR,0(TOADDR)   CONVERT THE OUTPUT BUFFER ADDRESS
*                                 FROM VIRTUAL TO REAL FOR DAT OFF
         NI    SMWKPSWS(SMWKBASE),X'FB' TURN OFF DAT IN THE MODEL PSW
*                                 NOTE: DAT WILL BE ON FOR THE FRR
*                                 EVEN IF AN ERROR OCCURS HERE
         LRA   WORKREG,DATOFF     GET THE REAL ADDRESS OF THE DAT OFF
*                                 CODE BEGINNING
         ST    WORKREG,SMWKPSWA(SMWKBASE) AND STICK IT IN THE MODEL
*                                 PSW SO THAT IT WILL GET CONTROL
*                                 WHEN DAT IS TURNED OFF
         LA    WORKREG,DATON      WHILE DAT IS STILL WORKING, SAVE
*                                 THE VIRTUAL ADDRESS OF THE DAT ON
*                                 CODE THAT IS TO FOLLOW THE DAT OFF
*                                 CODE
         LPSW  SMWKPSW(SMWKBASE)  TURN DAT OFF
DATOFF   EQU   *
*  THIS CODE EXECUTES WITH DAT OFF TO ALLOW ACCESS TO REAL STORAGE
*  WHICH HAS NO VIRTUAL ADDRESS ASSIGNED TO IT.
         MVCL  TOADDR,FROMADDR    MOVE THE DATA AS PREVIOUSLY SET UP
         LRA   SMWKBASE,0(SMWKBASE) CONVERT THE SUMDUMP WORK AREA BASE
*                                 FOR USE WITH DAT OFF
         OI    SMWKPSWS(SMWKBASE),X'04' TURN ON DAT IN THE MODEL PSW
         ST    WORKREG,SMWKPSWA(SMWKBASE) CHANGE THE MODEL PSW ADDRESS
*                                 TO THE VIRTUAL ADDRESS OF THE CODE
*                                 FOLLOWING THE DAT ON GROUP
         LPSW  SMWKPSW(SMWKBASE)  TURN DAT ON
DATON    EQU   *
*   THIS IS THE END OF THE CODE THAT EXECUTES WITH DAT OFF
*         RFY                                                      0117
*          (TOADDR,                                                0117
*           TOLEN,                                                 0117
*           FROMADDR,                                              0117
*           FROMLEN) UNRSTD;                                       0117
*         SMWKBASE=RTCTSDSW;        /* RESTORE THE SUMDUMP WORK AREA
*                                      BASE TO A VIRTUAL VERSION     */
         L     @12,CVTPTR                                          0118
         L     @12,CVTRTMCT(,@12)                                  0118
         L     SMWKBASE,RTCTSDSW(,@12)                             0118
*                                                                  0119
*         /***********************************************************/
*         /*                                                         */
*         /* CHECK TO SEE IF THERE HAS BEEN AN ERROR PROCESSING THE  */
*         /* DUMP. IF THERE HAS THEN CEASE TRYING TO WRITE DATA INTO */
*         /* THE DUMP DATASET AND JUST FREE ALL THE REAL STORAGE     */
*         /* BUFFER FRAMES                                           */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0119
*         IF ERRENDMP=ON            /* CHECK THE TERMINATE DUE TO  0119
*                                      ERROR FLAG                    */
*             ×SMWKFRHD=1           /* AND THE FRAMES HELD COUNT     */
*           THEN                    /* IF AN ERROR HAS OCCURED OR  0119
*                                      THIS IS THE LAST TIME RSM WILL
*                                      BE CALLED TO FREE FRAMES,   0119
*                                      INDICATE THAT RSM SHOULD FREE
*                                      ALL THE FRAME IT THINKS WE  0119
*                                      HAVE                          */
         TM    ERRENDMP(ERR6WPTR),B'01000000'                      0119
         BO    @RT00119                                            0119
         CLC   SMWKFRHD+196(2,SMWKBASE),@CH00063                   0119
         BNE   @RF00119                                            0119
@RT00119 DS    0H                                                  0120
*           SMWKEVRY=ON;            /* INDICATE TO RSM THAT ALL THE
*                                      FRAMES ARE BEING RETURNED     */
         OI    SMWKEVRY+196(SMWKBASE),B'10000000'                  0120
*         ELSE                      /* IF NO TERMINATING ERROR       */
*           DO;                                                    0121
         B     @RC00119                                            0121
@RF00119 DS    0H                                                  0122
*             SMWKEVRY=OFF;         /* INDICATE TO RSM NOT TO FREE 0122
*                                      THE WHOLE REAL STORAGE BUFFER,
*                                      SO ONLY ONE FRAME WILL BE   0122
*                                      FREED                         */
         LA    @12,196                                             0122
         ALR   @12,SMWKBASE                                        0122
         NI    SMWKEVRY(@12),B'01111111'                           0122
*             SMWKFRPT=SMWKFRMA(INDEX);/* SHOW RSM WHICH FRAME IS  0123
*                                      BEING RETURNED                */
         LR    @02,INDEX                                           0123
         SLA   @02,2                                               0123
         L     @02,SMWKFRMA-4(@02,@12)                             0123
         ST    @02,SMWKFRPT(,@12)                                  0123
*           END;                                                   0124
*                                                                  0124
*         /***********************************************************/
*         /*                                                         */
*         /* CALL RSM TO RETURN THE REAL STORAGE BUFFER FRAME AND    */
*         /* THEN DROP THE LOCK                                      */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0125
*         RFY                                                      0125
*           R1 RSTD;                /* RSM INTERFACE                 */
@RC00119 DS    0H                                                  0126
*         R1=ADDR(SMWKRSCB);        /* PUT THE RSM PARMLIST ADDR INTO
*                                      THE INTERFACE REG             */
         LA    @12,196                                             0126
         ALR   @12,SMWKBASE                                        0126
         LR    R1,@12                                              0126
*         R13=ADDR(SDWRGSV2);       /* PROVIDE A SAVE AREA           */
         LA    R13,SDWRGSV2(,SDWORKP)                              0127
*         CALL IEAVPRSR;            /* RSM FRAME RETURN RTN WHICH  0128
*                                      DOES NOT EXPECT A SAVEAREA    */
         L     @15,SMWKPRSR(,@12)                                  0128
         BALR  @14,@15                                             0128
*         RFY                                                      0129
*           R1 UNRSTD;                                             0129
*         IF ERRENDMP=ON            /* CHECK TO SEE IF THIS IS ERROR
*                                      PROCESSING                    */
*           THEN                    /* IF IT IS ALL THE FRAMES WERE
*                                      RETURNED TO RSM AND NO MORE 0130
*                                      SUMDUMP OUTPUT IS DESIRED     */
         TM    ERRENDMP(ERR6WPTR),B'01000000'                      0130
         BNO   @RF00130                                            0130
*           DO;                                                    0131
*             SMWKFRHD=0;           /* SO SHOW NO FRAMES HELD        */
         SLR   @12,@12                                             0132
         STH   @12,SMWKFRHD+196(,SMWKBASE)                         0132
*             PSEUDOAD=0;           /* ZERO THIS TO SHOW NO DATA TO
*                                      BE WRITTEN OUT                */
         L     @02,SDSMBUFF(,SDWORKP)                              0133
         ST    @12,PSEUDOAD(,@02)                                  0133
*           END;                                                   0134
*         ELSE                      /* IF IT IS OFF                  */
*           DO;                     /* THEN SHOW THE CURRENT FRAME 0135
*                                      RETURNED                      */
         B     @RC00130                                            0135
@RF00130 DS    0H                                                  0136
*             SMWKFRMA(INDEX)=0;    /* CLEAR THE ENTRY IN THE TABLE  */
         LR    @12,INDEX                                           0136
         SLA   @12,2                                               0136
         LA    @02,196                                             0136
         ALR   @02,SMWKBASE                                        0136
         SLR   @15,@15                                             0136
         ST    @15,SMWKFRMA-4(@12,@02)                             0136
*             SMWKFRHD=SMWKFRHD-1;  /* DECREMENT THE COUNT OF FRAMES
*                                      HELD                          */
         SLR   @12,@12                                             0137
         ICM   @12,3,SMWKFRHD(@02)                                 0137
         BCTR  @12,0                                               0137
         STH   @12,SMWKFRHD(,@02)                                  0137
*             SMWKNFRI=SMWKNFRI+1;  /* INCR THE COUNT OF THE NUMBER
*                                      OF REAL STORAGE FRAMES      0138
*                                      RELEASED SINCE THE LAST TIME
*                                      THE DIE RTN IN IEAVTSDX HAS 0138
*                                      RUN. THIS WILL PREVENT IT FROM
*                                      THINKING NOTHING IS GOING ON
*                                      AND THEN FREEING FRAMES ON ITS
*                                      OWN.                          */
         LA    @12,1                                               0138
         AH    @12,SMWKNFRI(,SMWKBASE)                             0138
         STH   @12,SMWKNFRI(,SMWKBASE)                             0138
*           END;                                                   0139
*       END;                        /* OF PROCESSING AN ENTRY IN THE
*                                      REAL STORAGE BUFFER LIST      */
@RC00130 DS    0H                                                  0141
*     ERR6WPTR=ADDR(ERRORWK);       /* CHANGE THE ERROR RTN PARMLIST
*                                      BASE TO POINT BACK TO THE   0141
*                                      ESTAE PARMLIST. THE FRR     0141
*                                      PARMLIST IS NOT COPIED INTO IT
*                                      BECAUSE THE ONLY CHANGE MADE
*                                      WAS TO ERRSLOCK AND THAT IS 0141
*                                      ABOUT TO BE UNDONE            */
@RF00107 LA    ERR6WPTR,ERRORWK(,SDWORKP)                          0141
*     RFY                                                          0142
*      (FWR1,                                                      0142
*       FWR2) RSTD;                 /* FRR COVERAGE IS NO LONGER   0142
*                                      NEEDED SINCE THE SALLOC LOCK
*                                      WILL BE FREED                 */
*     GEN SETS(FWR1,FWR2) REFS(PSACSTK,PSA,FRRSCURR,FRRS,FRRSEMP,  0143
*         FRRSELEN) CODE(SETFRR D,WRKREGS=(FWR1,FWR2) );           0143
         SETFRR D,WRKREGS=(FWR1,FWR2)
*     RFY                                                          0144
*      (FWR1,                                                      0144
*       FWR2) UNRSTD;                                              0144
*     ERRFRR=OFF;                   /* INDICATE THAT THE FRR IS NO 0145
*                                      LONGER BEING USED             */
         NI    ERRFRR(ERR6WPTR),B'01111111'                        0145
*     RFY                                                          0146
*       RETCODE RSTD;               /* THE SALLOC LOCK IS NO LONGER
*                                      NEEDED SINCE THERE WILL BE NO
*                                      MORE REFERENCES TO THE REAL 0146
*                                      STORAGE BUFFER FRAME          */
*FL:                                                               0147
*     DO;                           /* SETLOCK (RELEASE) TYPE(SALLOC)
*                                      RELATED(IEAVTSDW(GL))         */
FL       DS    0H                                                  0148
*       RFY                                                        0148
*        (GPR11P,                                                  0148
*         GPR12P,                                                  0148
*         GPR13P,                                                  0148
*         GPR14P) RSTD;                                            0148
*       GPR13P=PSALITA;             /* ADDRESS OF LOCK INTERFACE   0149
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0149
*       GEN(LM GPR11P,GPR13P,456(GPR13P));/* LOAD LOCKWORD, CLHT AND
*                                      ENTRY ADRS.                   */
         LM GPR11P,GPR13P,456(GPR13P)
*       GEN(BALR GPR14P,GPR13P);    /* BALR TO SETLOCK RTN.          */
         BALR GPR14P,GPR13P
*       RFY                                                        0152
*        (GPR11P,                                                  0152
*         GPR12P,                                                  0152
*         GPR13P,                                                  0152
*         GPR14P) UNRSTD;                                          0152
*     END;                          /* SETLOCK (RELEASE) TYPE(SALLOC)
*                                      RELATED(IEAVTSDW(GL))         */
*     RFY                                                          0154
*       RETCODE UNRSTD;                                            0154
*                                                                  0155
*     /***************************************************************/
*     /*                                                             */
*     /* HAVE THE OUTPUT BUFFER CONTENTS PUT INTO THE DUMP           */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0155
*     IF PSEUDOAD^=0                /* CHECK THE PSEUDO STORAGE    0155
*                                      ADDRESS VALUE BEING USED TO 0155
*                                      GENERATE PSEUDO PAGES IN THE
*                                      DUMP.                         */
*       THEN                        /* IF IT IS NOT 0 THEN DATA WAS
*                                      COPIED FROM THE REAL STORAGE
*                                      BUFFER AND IS WAITING TO BE 0155
*                                      WRITTEN OUT                   */
         L     @12,SDSMBUFF(,SDWORKP)                              0155
         ICM   @02,15,PSEUDOAD(@12)                                0155
         BZ    @RF00155                                            0155
*       DO;                                                        0156
*         R13=ADDR(SDWRGSV2);       /* PROVIDE A SAVE AREA           */
         LA    R13,SDWRGSV2(,SDWORKP)                              0157
*         CALL IEAVTSDP;            /* WRITE THIS PAGE OF SUMMARY  0158
*                                      DUMP DATA INTO THE DUMP       */
         L     @15,@CV01742                                        0158
         BALR  @14,@15                                             0158
*/*  BECAUSE IEAVTSDP USES THE SAME ERROR RECOVER RTNS AND PARMLISTS,
* IT IS NECESSARY TO REESTABLISH THEM HERE.                          */
*                                                                  0159
*         SVCDMPNM='IEAVTSDW';      /* IDENTIFY THIS MODULE AS IN  0159
*                                      CONTROL                       */
         MVC   SVCDMPNM(8,SDWORKP),@CC01758                        0159
*         ERRBASE1=BASEREG;         /* PUT THE BASE REG IN THE ERROR
*                                      RTN PARMLIST TO BE RESTORED IF
*                                      THERE IS A RETRY              */
         ST    BASEREG,ERRBASE1(,ERR6WPTR)                         0160
*         ERRADDR=ADDR(RETRYPT);    /* AND THEN SET UP THE RETRY   0161
*                                      ADDRESS                       */
         LA    @12,RETRYPT                                         0161
         ST    @12,ERRADDR(,ERR6WPTR)                              0161
*         PSEUDOAD=PSEUDOAD+PAGESIZE;/* INCREMENT THE PSEUDO ADDRESS
*                                      FOR THE NEXT PAGE OF DATA     */
         L     @12,SDSMBUFF(,SDWORKP)                              0162
         LH    @02,@CH01347                                        0162
         AL    @02,PSEUDOAD(,@12)                                  0162
         ST    @02,PSEUDOAD(,@12)                                  0162
*       END;                                                       0163
*   END;                            /* OF LOOPING THROUGH THE REAL 0164
*                                      STORAGE BUFFER FRAME LIST     */
*                                                                  0164
@RF00155 AH    INDEX,@CH00063                                      0164
         CH    INDEX,@CH01317                                      0164
         BNH   @DL00091                                            0164
@DC00091 DS    0H                                                  0165
*   /*****************************************************************/
*   /*                                                               */
*   /* EXIT CODE                                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0165
*   DO;                             /* PGFREE(R) A(SDFRRRTN)       0165
*                                      EA(SDESTAEX)                  */
*     RESPECIFY                                                    0166
*      (GPR00P,                                                    0166
*       GPR01P) RESTRICTED;                                        0166
*     GPR00P=0;                     /* INDICATE NO PAGE ECB          */
         SLR   GPR00P,GPR00P                                       0167
*     GPR01P=ADDR(SDFRRRTN);        /* PAGE ADDR                     */
         L     GPR01P,@CV01737                                     0168
*     RESPECIFY                                                    0169
*       GPR15P RESTRICTED;                                         0169
*     GPR15P=ADDR(SDESTAEX);        /* VSL ADDR                      */
         L     GPR15P,@CV01736                                     0170
*     GPR01P=GPR01P×'20000000'X;    /* R, PGFREE & RELEASE FLAG      */
         O     GPR01P,@CF01777                                     0171
*     SVC(113);                     /* ISSUE PGFREE SVC              */
         SVC   113                                                 0172
*     RESPECIFY                                                    0173
*      (GPR00P,                                                    0173
*       GPR01P,                                                    0173
*       GPR15P) UNRESTRICTED;                                      0173
*   END;                            /* PGFREE(R) A(SDFRRRTN)       0174
*                                      EA(SDESTAEX)                  */
*   R13=ADDR(SDWRGSV1);             /* RESTORE THE SAVEAREA PTR TO 0175
*                                      ITS VALUE ON ENTRY            */
         LA    R13,SDWRGSV1(,SDWORKP)                              0175
*   RETURN;                                                        0176
@EL00001 DS    0H                                                  0176
@EF00001 DS    0H                                                  0176
@ER00001 LM    @14,@12,12(@13)                                     0176
         BR    @14                                                 0176
*                                                                  0177
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS IS THE RETRY POINT FOR THE ERROR RECOVER RTNS. ALL IT    */
*   /* DOES IS SET A FAILURE RETURN CODE AND QUIT. CLEANUP THE SALLOC*/
*   /* LOCK AND REAL STORAGE BUFFER FRAMES. WHEN CONTROL IS RECIEVED */
*   /* HERE FROM THE FRR OR ESTAE ONLY 3 REGS CAN BE DEPENDED ON     */
*   /* (BASEREG SDWORKP & ERR6WPTR).                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0177
*RETRYPT:                                                          0177
*   IF ERRFRR=ON                    /* WAS THE FRR SET               */
*     THEN                          /* YES, SO DELETE IT AND FREE THE
*                                      SALLOC LOCK WHICH WOULD ALSO
*                                      BE HELD                       */
RETRYPT  TM    ERRFRR(ERR6WPTR),B'10000000'                        0177
         BNO   @RF00177                                            0177
*     DO;                                                          0178
*       ERR6WPTR=ADDR(ERRORWK);     /* CHANGE THE ERROR RTN PARMLIST
*                                      POINTER BACK TO THE ESTAE LIST*/
         LA    ERR6WPTR,ERRORWK(,SDWORKP)                          0179
*       RFY                                                        0180
*        (FWR1,                                                    0180
*         FWR2) RSTD;                                              0180
*       GEN SETS(FWR1,FWR2) REFS(PSACSTK,PSA,FRRSCURR,FRRS,FRRSEMP,
*           FRRSELEN) CODE(SETFRR D,WRKREGS=(FWR1,FWR2) );         0181
         SETFRR D,WRKREGS=(FWR1,FWR2)
*       RFY                                                        0182
*        (FWR1,                                                    0182
*         FWR2) UNRSTD;                                            0182
*       ERRFRR=OFF;                 /* INDICATE THAT THE FRR IS NO 0183
*                                      LONGER BEING USED             */
         NI    ERRFRR(ERR6WPTR),B'01111111'                        0183
*       RFY                                                        0184
*         RETCODE RSTD;             /* THE SALLOC LOCK IS NO LONGER
*                                      NEEDED SINCE THERE WILL BE NO
*                                      MORE REFERENCES TO THE REAL 0184
*                                      STORAGE BUFFER FRAME          */
*FL2:                                                              0185
*       DO;                         /* SETLOCK (RELEASE) TYPE(SALLOC)
*                                      RELATED(IEAVTSDW(GL))         */
FL2      DS    0H                                                  0186
*         RFY                                                      0186
*          (GPR11P,                                                0186
*           GPR12P,                                                0186
*           GPR13P,                                                0186
*           GPR14P) RSTD;                                          0186
*         GPR13P=PSALITA;           /* ADDRESS OF LOCK INTERFACE   0187
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0187
*         GEN(LM GPR11P,GPR13P,456(GPR13P));/* LOAD LOCKWORD, CLHT 0188
*                                      AND ENTRY ADRS.               */
         LM GPR11P,GPR13P,456(GPR13P)
*         GEN(BALR GPR14P,GPR13P);  /* BALR TO SETLOCK RTN.          */
         BALR GPR14P,GPR13P
*         RFY                                                      0190
*          (GPR11P,                                                0190
*           GPR12P,                                                0190
*           GPR13P,                                                0190
*           GPR14P) UNRSTD;                                        0190
*       END;                        /* SETLOCK (RELEASE) TYPE(SALLOC)
*                                      RELATED(IEAVTSDW(GL))         */
*       RFY                                                        0192
*         RETCODE UNRSTD;                                          0192
*     END;                                                         0193
*   DO;                             /* PGFREE(R) A(SDFRRRTN)       0194
*                                      EA(SDESTAEX)                  */
@RF00177 DS    0H                                                  0195
*     RESPECIFY                                                    0195
*      (GPR00P,                                                    0195
*       GPR01P) RESTRICTED;                                        0195
*     GPR00P=0;                     /* INDICATE NO PAGE ECB          */
         SLR   GPR00P,GPR00P                                       0196
*     GPR01P=ADDR(SDFRRRTN);        /* PAGE ADDR                     */
         L     GPR01P,@CV01737                                     0197
*     RESPECIFY                                                    0198
*       GPR15P RESTRICTED;                                         0198
*     GPR15P=ADDR(SDESTAEX);        /* VSL ADDR                      */
         L     GPR15P,@CV01736                                     0199
*     GPR01P=GPR01P×'20000000'X;    /* R, PGFREE & RELEASE FLAG      */
         O     GPR01P,@CF01777                                     0200
*     SVC(113);                     /* ISSUE PGFREE SVC              */
         SVC   113                                                 0201
*     RESPECIFY                                                    0202
*      (GPR00P,                                                    0202
*       GPR01P,                                                    0202
*       GPR15P) UNRESTRICTED;                                      0202
*   END;                            /* PGFREE(R) A(SDFRRRTN)       0203
*                                      EA(SDESTAEX)                  */
*   R13=ADDR(SDWRGSV1);             /* RESTORE THE SAVEAREA PTR TO 0204
*                                      ITS VALUE ON ENTRY            */
         LA    R13,SDWRGSV1(,SDWORKP)                              0204
*   RTCTSDWK->SDRETCOD=BADCODE;     /* SINCE AN ERROR MUST HAVE    0205
*                                      OCCURRED SETUP A BAD RETURN 0205
*                                      CODE                          */
         L     @12,CVTPTR                                          0205
         L     @12,CVTRTMCT(,@12)                                  0205
         L     @12,RTCTSDWK(,@12)                                  0205
         MVC   SDRETCOD(4,@12),@CF00055                            0205
*   RETURN;                                                        0206
         B     @EL00001                                            0206
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00P PTR(31) REG(0),                                       0207
*     GPR01P PTR(31) REG(1),                                       0207
*     GPR11P PTR(31) REG(11),                                      0207
*     GPR12P PTR(31) REG(12),                                      0207
*     GPR13P PTR(31) REG(13),                                      0207
*     GPR14P PTR(31) REG(14),                                      0207
*     GPR15P PTR(31) REG(15);                                      0207
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0208
*     I031F FIXED(31) BASED,                                       0208
*     I031P PTR(31) BASED,                                         0208
*     I015F FIXED(15) BASED,                                       0208
*     I015P PTR(15) BASED,                                         0208
*     I008P PTR(8) BASED,                                          0208
*     I001C CHAR(1) BASED;                                         0208
*   END IEAVTSDW                                                   0209
*                                                                  0209
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHAFRRS )                                       */
*/*%INCLUDE SYSLIB  (IHARTCT )                                       */
*/*%INCLUDE SYSLIB  (IHAGDA  )                                       */
*/*%INCLUDE SYSLIB  (AMDDATA )                                       */
*/*%INCLUDE SYSLIB  (IHASMDLR)                                       */
*/*%INCLUDE SYSLIB  (IHASDWRK)                                       */
*/*%INCLUDE SYSLIB  (IHASDRSB)                                       */
*/*%INCLUDE SYSLIB  (IHASMWK )                                       */
*                                                                  0209
*       ;                                                          0209
@DATA    DS    0H
@CH00038 DC    H'0'
@CH00063 DC    H'1'
@CH01317 DC    H'100'
@CH01347 DC    H'4096'
@DATD    DSECT
         DS    0F
IEAVTSDW CSECT
         DS    0F
@CF00055 DC    F'4'
@CF01763 DC    XL4'50000000'
@CF01777 DC    XL4'20000000'
@DATD    DSECT
         DS    0D
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEAVTSDW CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV01736 DC    V(SDESTAEX)
@CV01737 DC    V(SDFRRRTN)
@CV01742 DC    V(IEAVTSDP)
         DS    0D
SMWKLEN  DC    AL4(972)
ADDRFRR  DC    VL4(SDFRRRTN)
@CC01758 DC    C'IEAVTSDW'
@CB01372 DC    X'FFFA'
PATCHLOC DC    CL100' PATCH AREA FOR IEAVTSDW. 100 BYTES LONG.'
SMDWSAG  DC    AL2(6)
         DC    AL2(7)
         DC    AL2(8)
         DC    AL2(9)
         DC    AL2(10)
         DC    AL2(11)
         DC    AL2(12)
         DC    AL2(13)
         DC    AL2(14)
         DC    AL2(15)
         DC    AL2(16)
SMDWSAC  DC    AL2(17)
         DC    AL2(18)
         DC    AL2(19)
         DC    AL2(20)
         DC    AL2(21)
         DC    AL2(22)
         DC    AL2(23)
         DC    AL2(24)
         DC    AL2(25)
         DC    AL2(26)
         DC    AL2(27)
         DC    AL2(28)
         DC    AL2(29)
         DC    AL2(30)
         DC    AL2(54)
         DC    AL2(55)
SMDWSAL  DC    AL2(31)
         DC    AL2(32)
         DC    AL2(33)
         DC    AL2(34)
         DC    AL2(35)
         DC    AL2(36)
         DC    AL2(37)
         DC    AL2(38)
         DC    AL2(39)
         DC    AL2(40)
         DC    AL2(41)
         DC    AL2(42)
         DC    AL2(43)
         DC    AL2(44)
         DC    AL2(45)
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
BASEREG  EQU   @09
ERR6WPTR EQU   @03
SMWKBASE EQU   @06
SDWORKP  EQU   @07
RETCODE  EQU   @15
R13      EQU   @13
R1       EQU   @01
INDEX    EQU   @08
FROMADDR EQU   @04
FROMLEN  EQU   @05
TOADDR   EQU   @10
TOLEN    EQU   @11
FWR1     EQU   @04
FWR2     EQU   @05
WORKREG  EQU   @02
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR15P   EQU   @15
GPR11P   EQU   @11
GPR12P   EQU   @12
GPR13P   EQU   @13
GPR14P   EQU   @14
CVTPTR   EQU   16
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
PSALSFCC EQU   PSA+1012
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
FRRS     EQU   0
FRRSHEAD EQU   FRRS
FRRSEMP  EQU   FRRSHEAD
FRRSLAST EQU   FRRSHEAD+4
FRRSELEN EQU   FRRSHEAD+8
FRRSCURR EQU   FRRSHEAD+12
FRRSENTR EQU   0
FRRSFRRA EQU   FRRSENTR
FRRSFLGS EQU   FRRSENTR+4
FRRSFLG1 EQU   FRRSFLGS
FRRSPARM EQU   FRRSENTR+8
RTCT     EQU   0
RTCTPLIB EQU   RTCT+4
RTCTSAP  EQU   RTCTPLIB
RTCTSAP1 EQU   RTCTSAP
RTCTSAP2 EQU   RTCTSAP+1
RTCTSAP3 EQU   RTCTSAP+2
RTCTSUP  EQU   RTCTPLIB+4
RTCTSUP1 EQU   RTCTSUP
RTCTSUP2 EQU   RTCTSUP+1
RTCTSUP3 EQU   RTCTSUP+2
RTCTSYD  EQU   RTCTPLIB+8
RTCTSY01 EQU   RTCTSYD
RTCTSDDS EQU   RTCT+36
RTCTFLG  EQU   RTCTSDDS+3
RTCTSDPL EQU   RTCT+156
RTCTRFLG EQU   RTCT+176
RTCTSDSW EQU   RTCT+180
RTCTSDWK EQU   RTCT+220
RTCTERID EQU   RTCT+224
RTCTOPT  EQU   RTCT+236
RTCTASO  EQU   RTCT+252
RTCTASO1 EQU   RTCTASO
RTCTASO2 EQU   RTCTASO+1
RTCTSDI  EQU   RTCT+254
RTCTSDF  EQU   RTCT+264
RTCTSDF1 EQU   RTCTSDF
RTCTSDF2 EQU   RTCTSDF+1
RTCTSDF3 EQU   RTCT+268
RTCTSDF4 EQU   RTCTSDF3+2
RTCTMOPT EQU   0
RTCTMSAO EQU   RTCTMOPT
RTCTSASD EQU   RTCTMSAO
RTCTSAO1 EQU   RTCTSASD
RTCTSAO2 EQU   RTCTSASD+1
RTCTSAPD EQU   RTCTMSAO+2
RTCTSAO3 EQU   RTCTSAPD
RTCTSAO4 EQU   RTCTSAPD+1
RTCTSAMG EQU   RTCTSAO4
RTCTMSUO EQU   RTCTMOPT+4
RTCTSUSD EQU   RTCTMSUO
RTCTSUO1 EQU   RTCTSUSD
RTCTSUO2 EQU   RTCTSUSD+1
RTCTSUPD EQU   RTCTMSUO+2
RTCTSUO3 EQU   RTCTSUPD
RTCTSUO4 EQU   RTCTSUPD+1
RTCTSUMG EQU   RTCTSUO4
RTCTMSYO EQU   RTCTMOPT+8
RTCTSD01 EQU   RTCTMSYO
RTCTSD04 EQU   RTCTMSYO+3
RTCTSMMG EQU   RTCTSD04
RTCTMSDO EQU   RTCTMOPT+12
RTCTSDOD EQU   RTCTMSDO
RTCTSDO1 EQU   RTCTSDOD
RTCTSDO2 EQU   RTCTSDOD+1
RTCTSDO3 EQU   RTCTMSDO+2
RTCTSDO4 EQU   RTCTMSDO+3
RTCTSDMG EQU   RTCTSDO4
GDA      EQU   0
GVSMFLAG EQU   GDA
GDAFLAGS EQU   GVSMFLAG
PASTRT   EQU   GDA+16
VRPOSTQ  EQU   GDA+32
VRWAITQ  EQU   GDA+40
PRDINPUT EQU   0
PRDHDRID EQU   PRDINPUT
PRDASID  EQU   PRDINPUT+2
PRDREGS  EQU   PRDINPUT+120
PRDFPR   EQU   PRDREGS
SMDLR    EQU   0
SMDLRHDR EQU   SMDLR
SDWORK   EQU   0
SDCNTRL  EQU   SDWORK
SDECB    EQU   SDCNTRL
SVCDOPTS EQU   SDCNTRL+100
SVCDOPT1 EQU   SVCDOPTS
SVCDOPT2 EQU   SVCDOPTS+1
FLAGSONE EQU   SDCNTRL+102
ERRORWK  EQU   SDCNTRL+104
SVCDMPNM EQU   SDCNTRL+128
SDRETCOD EQU   SDCNTRL+212
SDWRGSV1 EQU   SDCNTRL+216
SDWRGSV2 EQU   SDCNTRL+288
CVRT11   EQU   SDCNTRL+368
CVRT1    EQU   CVRT11+4
CVRT2    EQU   SDCNTRL+376
SDCVRT4  EQU   CVRT2+2
SVCNAME  EQU   SDCNTRL+392
SVCNM1T5 EQU   SVCNAME
SVCNM6T8 EQU   SVCNAME+5
SVCNM7T8 EQU   SVCNM6T8+1
CCWCHAIN EQU   SDCNTRL+400
CCW1     EQU   CCWCHAIN
FLAGS1   EQU   CCW1+4
CCW2     EQU   CCWCHAIN+8
FLAGS2   EQU   CCW2+4
CCW3     EQU   CCWCHAIN+16
FLAGS3   EQU   CCW3+4
SDSMBUFF EQU   SDCNTRL+424
SDOUTBUF EQU   SDWORK+432
RCDCCHH  EQU   SDOUTBUF
SMWKRSCB EQU   0
SMWKFLGA EQU   SMWKRSCB
SMWKEVRY EQU   SMWKFLGA
SMWKFRHD EQU   SMWKRSCB+2
SMWKFRPT EQU   SMWKRSCB+4
SMWKPRSR EQU   SMWKRSCB+12
SMWKRSFM EQU   SMWKRSCB+16
SMWKFRMA EQU   SMWKRSFM
SMWK     EQU   0
SMWKFLGS EQU   SMWK+4
SMWKFLG1 EQU   SMWKFLGS
SMWKPSW  EQU   SMWK+168
SMWKPSWS EQU   SMWKPSW
SMWKPSWK EQU   SMWKPSW+1
SMWKPSWA EQU   SMWKPSW+4
SMWKRSM  EQU   SMWK+196
SMWKREGS EQU   SMWK+668
SMWKNFRI EQU   SMWK+806
ERRWORK  EQU   0
ERRFLGS1 EQU   ERRWORK
ERRFRR   EQU   ERRFLGS1
ERRSLOCK EQU   ERRFLGS1
ERRFLGS2 EQU   ERRWORK+1
ERRENDMP EQU   ERRFLGS2
ERRADDR  EQU   ERRWORK+4
ERRBASE1 EQU   ERRWORK+12
ERRFLAG3 EQU   ERRWORK+16
IEAVPRSR EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTGDA   EQU   CVTS01+212
CVTRTMCT EQU   CVTS01+224
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
PSARSVTE EQU   PSARSVT
PSACSTK  EQU   PSARSVTE
FRREPTR  EQU   FRRSCURR
FRRSPTR  EQU   PSACSTK
GDAPTR   EQU   CVTGDA
PRDFLC   EQU   PRDFPR
@NM00048 EQU   PRDHDRID
PRDKEY1  EQU   @NM00048
PRDKEY2  EQU   @NM00048+1
PRDADDR  EQU   @NM00048+4
PRDDATA  EQU   @NM00048+8
@NM00050 EQU   PRDHDRID
PRDFLAGS EQU   @NM00050+2
PSEUDOAD EQU   PRDADDR
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00056 EQU   @NM00050+8
PRDCPUAD EQU   @NM00050+6
@NM00055 EQU   @NM00050+4
@NM00054 EQU   @NM00050+3
@NM00053 EQU   PRDFLAGS
PRDGPRVL EQU   PRDFLAGS
PRDSSINV EQU   PRDFLAGS
PRDUNIPR EQU   PRDFLAGS
@NM00052 EQU   @NM00050+1
@NM00051 EQU   @NM00050
@NM00049 EQU   @NM00048+2
@NM00047 EQU   PRDFLC+12
PRDCAW   EQU   PRDFLC+8
PRDCSW   EQU   PRDFLC
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
ERRBASE2 EQU   ERRWORK+20
@NM00075 EQU   ERRWORK+17
@NM00074 EQU   ERRFLAG3
ERRNOTRM EQU   ERRFLAG3
ERRWKADR EQU   ERRWORK+8
ERRRUBSW EQU   ERRWORK+2
ERRCDOUT EQU   ERRFLGS2
ERRNORCD EQU   ERRFLGS2
ERRCUDMP EQU   ERRFLGS2
ERRCMSLK EQU   ERRFLGS2
ERRWKFIX EQU   ERRFLGS2
ERRSDFIX EQU   ERRFLGS2
ERRINIO  EQU   ERRFLGS2
ERRLLOCK EQU   ERRFLGS1
ERRGTFGO EQU   ERRFLGS1
ERRTCBND EQU   ERRFLGS1
ERRBFBIT EQU   ERRFLGS1
ERRSDBIT EQU   ERRFLGS1
ERRESTAE EQU   ERRFLGS1
@NM00073 EQU   SMWK+970
SMWKNSTB EQU   SMWK+968
SMWKNFFD EQU   SMWK+966
SMWKNTDQ EQU   SMWK+964
SMWKNTDI EQU   SMWK+962
SMWKNFUS EQU   SMWK+960
SMWKNFAQ EQU   SMWK+958
SMWKNFRQ EQU   SMWK+956
SMWKPSSE EQU   SMWK+952
SMWKTQE  EQU   SMWK+824
@NM00072 EQU   SMWK+820
SMWKTQEA EQU   SMWK+816
SMWKSVLN EQU   SMWK+812
SMWKNDIE EQU   SMWK+810
SMWKNFRE EQU   SMWK+808
SMWKALEN EQU   SMWK+804
SMWKSCBF EQU   SMWK+802
SMWKREGN EQU   SMWK+800
SMWKIDX2 EQU   SMWK+798
SMWKIDX1 EQU   SMWK+796
SMWKSREG EQU   SMWKREGS
SMWKHEAD EQU   SMWK+656
SMWKSMVL EQU   SMWK+652
SMWKSMMV EQU   SMWK+648
SMWKSMBF EQU   SMWK+644
SMWKSMLS EQU   SMWK+640
SMWKSMRG EQU   SMWK+636
SMWKSMDT EQU   SMWK+632
SMWKSDMP EQU   SMWK+628
SMWKSMLK EQU   SMWK+624
@NM00071 EQU   SMWK+622
SMWKFRUS EQU   SMWK+620
SMWKRSIX EQU   SMWK+618
SMWKNFAV EQU   SMWK+616
SMWKRFAD EQU   SMWK+612
SMWKCPUS EQU   SMWK+192
SMWKPEND EQU   SMWK+188
SMWKSAVA EQU   SMWK+184
SMWKENDA EQU   SMWK+180
SMWKVADR EQU   SMWK+176
@NM00070 EQU   SMWKPSW+2
SMWKPFXE EQU   SMWK+164
SMWKPFXB EQU   SMWK+160
SMWKSSDE EQU   SMWK+156
SMWKENTY EQU   SMWK+152
SMWKSAV1 EQU   SMWK+80
SMWKSAVE EQU   SMWK+8
SMWKFLG4 EQU   SMWKFLGS+3
SMWKFLG3 EQU   SMWKFLGS+2
SMWKFLG2 EQU   SMWKFLGS+1
@NM00069 EQU   SMWKFLG1
@NM00068 EQU   SMWKFLG1
SMWKSTBK EQU   SMWKFLG1
SMWKSLCL EQU   SMWKFLG1
SMWKRSNM EQU   SMWKFLG1
SMWKRBFL EQU   SMWKFLG1
SMWKRBUF EQU   SMWKFLG1
SMWKSLCK EQU   SMWKFLG1
SMWKNAME EQU   SMWK
SMWKTSDS EQU   SMWKRSCB+8
SMWKFLGB EQU   SMWKRSCB+1
@NM00067 EQU   SMWKFLGA
SDBUFFER EQU   SDWORK+440
DATALEN  EQU   SDOUTBUF+6
KEYLEN   EQU   SDOUTBUF+5
RECORDNO EQU   SDOUTBUF+4
RCDHH    EQU   RCDCCHH+2
RCDCC    EQU   RCDCCHH
SDSMDECB EQU   SDCNTRL+428
BYTECNT3 EQU   CCW3+6
@NM00066 EQU   CCW3+5
PCI3     EQU   FLAGS3
SKIP3    EQU   FLAGS3
SLI3     EQU   FLAGS3
CC3      EQU   FLAGS3
CD3      EQU   FLAGS3
DATAADR3 EQU   CCW3+1
CMDCODE3 EQU   CCW3
BYTECNT2 EQU   CCW2+6
@NM00065 EQU   CCW2+5
PCI2     EQU   FLAGS2
SKIP2    EQU   FLAGS2
SLI2     EQU   FLAGS2
CC2      EQU   FLAGS2
CD2      EQU   FLAGS2
DATAADR2 EQU   CCW2+1
CMDCODE2 EQU   CCW2
BYTECNT1 EQU   CCW1+6
@NM00064 EQU   CCW1+5
PCI1     EQU   FLAGS1
SKIP1    EQU   FLAGS1
SLI1     EQU   FLAGS1
CMDC1    EQU   FLAGS1
CD1      EQU   FLAGS1
DATAADR1 EQU   CCW1+1
CMDCODE1 EQU   CCW1
SVCNM8   EQU   SVCNM7T8+1
SVCNM7   EQU   SVCNM7T8
SVCNM6   EQU   SVCNM6T8
SVCNM1T4 EQU   SVCNM1T5
@NM00063 EQU   SDCNTRL+388
SVC994ID EQU   SDCNTRL+384
CVRT2SGN EQU   SDCVRT4+5
@NM00062 EQU   SDCVRT4
@NM00061 EQU   CVRT2
SDCVRT1  EQU   CVRT1+2
@NM00060 EQU   CVRT1
@NM00059 EQU   CVRT11
CHCNT    EQU   SDCNTRL+366
TIMCNT   EQU   SDCNTRL+364
DSTINDEX EQU   SDCNTRL+360
ADDADRWD EQU   SDCNTRL+208
ADDADRWC EQU   SDCNTRL+204
ADDADRWB EQU   SDCNTRL+200
ADDADRWA EQU   SDCNTRL+196
USEEND   EQU   SDCNTRL+192
USESTART EQU   SDCNTRL+188
SPQEADDR EQU   SDCNTRL+184
USERRETA EQU   SDCNTRL+180
PGFRRETA EQU   SDCNTRL+176
SPQERETA EQU   SDCNTRL+172
@NM00058 EQU   SDCNTRL+171
SDWKEY   EQU   SDCNTRL+170
AFFNSAV  EQU   SDCNTRL+168
FREERETA EQU   SDCNTRL+164
LPDERETA EQU   SDCNTRL+160
CDERETA  EQU   SDCNTRL+156
DISPRETA EQU   SDCNTRL+152
SDIORETA EQU   SDCNTRL+148
SVCDLPST EQU   SDCNTRL+136
FLAGSTWO EQU   SDCNTRL+103
SDWPAGOT EQU   FLAGSONE
FLGFLAST EQU   FLAGSONE
FLGTAPEE EQU   FLAGSONE
FLGRTFUL EQU   FLAGSONE
SVCDNSQA EQU   SVCDOPT2
SVCDNAPA EQU   SVCDOPT2
SVCDNSMD EQU   SVCDOPT2
SVCDSMDP EQU   SVCDOPT2
SVCDSWA  EQU   SVCDOPT2
SVCDCSA  EQU   SVCDOPT2
SVCDTRT  EQU   SVCDOPT1
SVCDLPA  EQU   SVCDOPT1
SVCDRGN  EQU   SVCDOPT1
SVCDLSQA EQU   SVCDOPT1
SVCDSQA  EQU   SVCDOPT1
SVCDNUC  EQU   SVCDOPT1
SVCDPSA  EQU   SVCDOPT1
SVCDAPSA EQU   SVCDOPT1
SDWSDPL  EQU   SDCNTRL+96
SDSRBBAS EQU   SDCNTRL+92
SDSRBADR EQU   SDCNTRL+88
SVCDSRBA EQU   SDCNTRL+84
ENDADRNT EQU   SDCNTRL+80
RANGEPTR EQU   SDCNTRL+76
GLOBADDR EQU   SDCNTRL+72
LOCALADR EQU   SDCNTRL+68
NUCADDR  EQU   SDCNTRL+64
DACHARAD EQU   SDCNTRL+60
LSTESTAE EQU   SDCNTRL+44
SDIOB    EQU   SDCNTRL+4
SMDLRDAT EQU   SMDLR+12
@NM00057 EQU   SMDLRHDR+11
SMDLRMSG EQU   SMDLRHDR+10
SMDLRPL  EQU   SMDLRHDR+8
SMDLRADR EQU   SMDLRHDR+4
SMDLRLEN EQU   SMDLRHDR+2
SMDLRID  EQU   SMDLRHDR
@NM00046 EQU   PRDINPUT+382
@NM00045 EQU   PRDINPUT+334
PRDERRID EQU   PRDINPUT+324
@NM00044 EQU   PRDINPUT+292
PRDCVT   EQU   PRDINPUT+288
PRDPSW   EQU   PRDREGS+160
PRDCR    EQU   PRDREGS+96
PRDGPR   EQU   PRDREGS+32
PRDTITLE EQU   PRDINPUT+20
PRDTODVL EQU   PRDINPUT+12
PRDMODNM EQU   PRDINPUT+4
PRDRECID EQU   PRDINPUT+1
GBLCELCT EQU   GDA+60
GLBLCELL EQU   GDA+56
CSASPQEP EQU   GDA+52
PFSTCPAB EQU   GDA+48
VRWLEL   EQU   VRWAITQ+4
VRWFEL   EQU   VRWAITQ
VRPLEL   EQU   VRPOSTQ+4
VRPFEL   EQU   VRPOSTQ
SQASPLFT EQU   GDA+28
SQASPQEP EQU   GDA+24
PASIZE   EQU   GDA+20
VRPQEP   EQU   GDA+12
CSAPQEP  EQU   GDA+8
VRDREG   EQU   GDA+4
RESV     EQU   GVSMFLAG+1
@NM00043 EQU   GDAFLAGS
WAITQUE  EQU   GDAFLAGS
SQATHRS2 EQU   GDAFLAGS
SQATHRS1 EQU   GDAFLAGS
GDAFLAG2 EQU   GDAFLAGS
NIPFOURK EQU   GDAFLAGS
GDAFLAG1 EQU   GDAFLAGS
RTCTISVC EQU   RTCTSDO4
RTCTSDOV EQU   RTCTSDMG
@NM00042 EQU   RTCTSDO4
@NM00041 EQU   RTCTSDO3
RTCTSDPH EQU   RTCTSDO3
RTCTSDPG EQU   RTCTSDO3
@NM00040 EQU   RTCTSDO2
RTCTSDPD EQU   RTCTSDO2
RTCTSDPC EQU   RTCTSDO2
RTCTSDPB EQU   RTCTSDO2
RTCTSDPA EQU   RTCTSDO2
RTCTSDP9 EQU   RTCTSDO2
RTCTSDP8 EQU   RTCTSDO2
RTCTSDP7 EQU   RTCTSDO1
RTCTSDP6 EQU   RTCTSDO1
RTCTSDP5 EQU   RTCTSDO1
RTCTSDP4 EQU   RTCTSDO1
RTCTSDP3 EQU   RTCTSDO1
RTCTSDP2 EQU   RTCTSDO1
RTCTSDP1 EQU   RTCTSDO1
RTCTSDP0 EQU   RTCTSDO1
RTCTISYM EQU   RTCTSD04
RTCTSMOV EQU   RTCTSMMG
@NM00039 EQU   RTCTSD04
RTCTSD03 EQU   RTCTMSYO+2
RTCTSD02 EQU   RTCTMSYO+1
RTCTSDS7 EQU   RTCTSD01
RTCTSDS6 EQU   RTCTSD01
RTCTSDS5 EQU   RTCTSD01
RTCTSDS4 EQU   RTCTSD01
RTCTSDS3 EQU   RTCTSD01
RTCTSDS2 EQU   RTCTSD01
RTCTSDS1 EQU   RTCTSD01
RTCTSDS0 EQU   RTCTSD01
RTCTISYU EQU   RTCTSUO4
RTCTSUOV EQU   RTCTSUMG
@NM00038 EQU   RTCTSUO4
RTCTSYDF EQU   RTCTSUO3
RTCTSYDE EQU   RTCTSUO3
RTCTSYDD EQU   RTCTSUO3
RTCTSYDC EQU   RTCTSUO3
RTCTSYDB EQU   RTCTSUO3
RTCTSYDA EQU   RTCTSUO3
RTCTSYD9 EQU   RTCTSUO3
RTCTSYD8 EQU   RTCTSUO3
@NM00037 EQU   RTCTSUO2
RTCTSYDH EQU   RTCTSUO2
RTCTSYDG EQU   RTCTSUO2
RTCTSYD7 EQU   RTCTSUO1
RTCTSYD6 EQU   RTCTSUO1
RTCTSYD5 EQU   RTCTSUO1
RTCTSYD4 EQU   RTCTSUO1
RTCTSYD3 EQU   RTCTSUO1
RTCTSYD2 EQU   RTCTSUO1
RTCTSYD1 EQU   RTCTSUO1
RTCTSYD0 EQU   RTCTSUO1
RTCTISAB EQU   RTCTSAO4
RTCTSAOV EQU   RTCTSAMG
@NM00036 EQU   RTCTSAO4
RTCTSADF EQU   RTCTSAO3
RTCTSADE EQU   RTCTSAO3
RTCTSADD EQU   RTCTSAO3
RTCTSADC EQU   RTCTSAO3
RTCTSADB EQU   RTCTSAO3
RTCTSADA EQU   RTCTSAO3
RTCTSAD9 EQU   RTCTSAO3
RTCTSAD8 EQU   RTCTSAO3
@NM00035 EQU   RTCTSAO2
RTCTSADH EQU   RTCTSAO2
RTCTSADG EQU   RTCTSAO2
RTCTSAD7 EQU   RTCTSAO1
RTCTSAD6 EQU   RTCTSAO1
RTCTSAD5 EQU   RTCTSAO1
RTCTSAD4 EQU   RTCTSAO1
RTCTSAD3 EQU   RTCTSAO1
RTCTSAD2 EQU   RTCTSAO1
RTCTSAD1 EQU   RTCTSAO1
RTCTSAD0 EQU   RTCTSAO1
RTCTZZZ5 EQU   RTCT+340
RTCTZZZ4 EQU   RTCT+336
RTCTMRMQ EQU   RTCT+332
RTCTSDF5 EQU   RTCTSDF3+3
RTCTSDDO EQU   RTCTSDF4
RTCTSDEN EQU   RTCTSDF4
RTCTSDEQ EQU   RTCTSDF4
RTCTSDTR EQU   RTCTSDF4
RTCTSDRM EQU   RTCTSDF4
RTCTSDAN EQU   RTCTSDF4
RTCTSDNC EQU   RTCTSDF4
RTCTSDSS EQU   RTCTSDF4
RTCTSDAS EQU   RTCTSDF3
RTCTZZZ3 EQU   RTCT+266
@NM00034 EQU   RTCTSDF2
RTCTSDRW EQU   RTCTSDF2
RTCTSDSL EQU   RTCTSDF2
RTCTSDWF EQU   RTCTSDF2
RTCTSDLA EQU   RTCTSDF2
RTCTSDDI EQU   RTCTSDF2
RTCTSDTQ EQU   RTCTSDF2
RTCTSDMR EQU   RTCTSDF2
RTCTSDSC EQU   RTCTSDF1
RTCTSDRS EQU   RTCTSDF1
RTCTSDSD EQU   RTCTSDF1
RTCTSDEP EQU   RTCTSDF1
RTCTSDMA EQU   RTCTSDF1
RTCTSDSH EQU   RTCTSDF1
RTCTSDND EQU   RTCTSDF1
RTCTSDNO EQU   RTCTSDF1
RTCTZZZ2 EQU   RTCT+257
RTCTSDPR EQU   RTCTSDI+2
RTCTINDX EQU   RTCTSDI+1
RTCTSDNA EQU   RTCTSDI
@NM00033 EQU   RTCTASO2
RTCTASNQ EQU   RTCTASO2
RTCTASNA EQU   RTCTASO2
RTCTASNS EQU   RTCTASO2
RTCTASSU EQU   RTCTASO2
RTCTASSW EQU   RTCTASO2
RTCTASCS EQU   RTCTASO2
RTCTASTR EQU   RTCTASO1
RTCTASLP EQU   RTCTASO1
RTCTASRG EQU   RTCTASO1
RTCTASLS EQU   RTCTASO1
RTCTASSQ EQU   RTCTASO1
RTCTASNU EQU   RTCTASO1
RTCTASPS EQU   RTCTASO1
RTCTASAL EQU   RTCTASO1
RTCTSDO  EQU   RTCTOPT+12
RTCTSYO  EQU   RTCTOPT+8
RTCTSUO  EQU   RTCTOPT+4
RTCTSAO  EQU   RTCTOPT
RTCTXXX2 EQU   RTCT+234
RTCTETIM EQU   RTCTERID+6
RTCTEASD EQU   RTCTERID+4
RTCTECPU EQU   RTCTERID+2
RTCTESEQ EQU   RTCTERID
RTCTTDCB EQU   RTCT+184
RTCTSEQ# EQU   RTCT+178
RTCTXXX1 EQU   RTCT+177
@NM00032 EQU   RTCTRFLG
RTCTRSTF EQU   RTCTRFLG
RTCTRPER EQU   RTCTRFLG
RTCTRTER EQU   RTCTRFLG
RTCTTEST EQU   RTCT+172
RTCTMSRB EQU   RTCT+168
RTCTMLCK EQU   RTCT+164
RTCTFMT  EQU   RTCT+160
RTCTSDIP EQU   RTCTSDPL
RTCTDEV  EQU   RTCTSDDS+8
RTCTDCB  EQU   RTCTSDDS+4
@NM00031 EQU   RTCTFLG
RTCTDETP EQU   RTCTFLG
RTCTDSUS EQU   RTCTFLG
RTCTDSST EQU   RTCTFLG
RTCTDSNM EQU   RTCTSDDS
RTCTRCB  EQU   RTCT+32
RTCTRECB EQU   RTCT+28
RTCTFASB EQU   RTCT+24
RTCTMECB EQU   RTCT+20
RTCTSDID EQU   RTCT+18
RTCTYYY1 EQU   RTCT+16
RTCTSY04 EQU   RTCTSYD+3
RTCTSY03 EQU   RTCTSYD+2
RTCTSY02 EQU   RTCTSYD+1
RTCTSYM7 EQU   RTCTSY01
RTCTSYM6 EQU   RTCTSY01
RTCTSYM5 EQU   RTCTSY01
RTCTSYM4 EQU   RTCTSY01
RTCTSYM3 EQU   RTCTSY01
RTCTSYM2 EQU   RTCTSY01
RTCTSYM1 EQU   RTCTSY01
RTCTSYM0 EQU   RTCTSY01
RTCTSUP4 EQU   RTCTSUP+3
RTCTSUDF EQU   RTCTSUP3
RTCTSUDE EQU   RTCTSUP3
RTCTSUDD EQU   RTCTSUP3
RTCTSUDC EQU   RTCTSUP3
RTCTSUDB EQU   RTCTSUP3
RTCTSUDA EQU   RTCTSUP3
RTCTSUD9 EQU   RTCTSUP3
RTCTSUD8 EQU   RTCTSUP3
@NM00030 EQU   RTCTSUP2
RTCTSUDH EQU   RTCTSUP2
RTCTSUDG EQU   RTCTSUP2
RTCTSUD7 EQU   RTCTSUP1
RTCTSUD6 EQU   RTCTSUP1
RTCTSUD5 EQU   RTCTSUP1
RTCTSUD4 EQU   RTCTSUP1
RTCTSUD3 EQU   RTCTSUP1
RTCTSUD2 EQU   RTCTSUP1
RTCTSUD1 EQU   RTCTSUP1
RTCTSUD0 EQU   RTCTSUP1
RTCTSAP4 EQU   RTCTSAP+3
RTCTSABF EQU   RTCTSAP3
RTCTSABE EQU   RTCTSAP3
RTCTSABD EQU   RTCTSAP3
RTCTSABC EQU   RTCTSAP3
RTCTSABB EQU   RTCTSAP3
RTCTSABA EQU   RTCTSAP3
RTCTSAB9 EQU   RTCTSAP3
RTCTSAB8 EQU   RTCTSAP3
@NM00029 EQU   RTCTSAP2
RTCTSABH EQU   RTCTSAP2
RTCTSABG EQU   RTCTSAP2
RTCTSAB7 EQU   RTCTSAP1
RTCTSAB6 EQU   RTCTSAP1
RTCTSAB5 EQU   RTCTSAP1
RTCTSAB4 EQU   RTCTSAP1
RTCTSAB3 EQU   RTCTSAP1
RTCTSAB2 EQU   RTCTSAP1
RTCTSAB1 EQU   RTCTSAP1
RTCTSAB0 EQU   RTCTSAP1
RTCTNAME EQU   RTCT
@NM00028 EQU   FRRSFLGS+1
@NM00027 EQU   FRRSFLG1
FRRSNEST EQU   FRRSFLG1
FRRSRCUR EQU   FRRSFLG1
FRRSENTS EQU   FRRS+84
FRRSRTMW EQU   FRRS+16
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00002 EQU   CVTFIX+248
@NM00001 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTBAH   EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTRV490 EQU   CVTMAP+388
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTVS1A  EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00026 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00025 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00024 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00023 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00022 EQU   FLCFSA
@NM00021 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00020 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00019 EQU   FLCIOA
@NM00018 EQU   FLCMCLA+15
@NM00017 EQU   FLCMCLA+14
@NM00016 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00015 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00014 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00013 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00012 EQU   FLCPER
@NM00011 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00010 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00009 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00008 EQU   FLCPIILC
@NM00007 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00006 EQU   FLCSVILC
@NM00005 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00004 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00003 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@ENDDATA EQU   *
         END   IEAVTSDW,(C'PLS1810',0701,77103)
