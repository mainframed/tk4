         TITLE 'IEECB907,DISPLAY SLIP OPERATOR COMMAND PROCESSOR       *
                        '
IEECB907 CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'IEECB907  77.070'                              01S0001
         DROP  @15
@PROLOG  BALR  @07,0                                            01S0001
@PSTART  LA    @12,4095(,@07)                                   01S0001
         USING @PSTART,@07                                      01S0001
         USING @PSTART+4095,@12                                 01S0001
         LR    @10,@01                                          01S0001
         L     @00,@SIZDATD                                     01S0001
         GETMAIN  R,LV=(0)
         LR    @11,@01                                          01S0001
         USING @DATD,@11                                        01S0001
         LR    @01,@10                                          01S0001
         ST    @13,@SA00001+4                                   01S0001
         LR    @13,@11                                          01S0001
*   SESTAE=SESTAE&&SESTAE;          /* CLEAR ESTAE PARAMETERS        */
         LA    @10,ESTA906                                      01S0221
         XC    SESTAE(24,@10),SESTAE(@10)                       01S0221
*   SESTDSLP=ON;                    /* TELL ESTAE THIS IS D SLIP.    */
         OI    SESTDSLP(@10),B'01000000'                        01S0222
*   FLAGS=FLAGS&&FLAGS;             /* CLEAR INTERNAL INDICATORS     */
         XC    FLAGS(2),FLAGS                                   01S0223
*   SAVRTN=R14;                     /* SAVE RETURN ADDRESS           */
         ST    R14,SAVRTN                                       01S0224
*   IF R1->WANSCE=ANSCE THEN        /* INPUT AN SCE ??               */
         CLC   WANSCE(4,R1),ANSCE                               01S0225
         BNE   @RF00225                                         01S0225
*     DO;                           /* YES, SETUP FOR DISPLAY ONE.   */
*       SCEPTR=R1;                  /* GET SCE ADDRESS.              */
         LR    SCEPTR,R1                                        01S0227
*       GEN SETS(REGS16,REGS89);                                01S0228
          STM   R1,R6,REGS16           SAVE CALLERS REGS 1-6
          STM   R8,R9,REGS89           SAVE CALLERS REGS 8 AND 9
*       INSCE=ON;                   /* AN SCE ONLY CALL.             */
         OI    INSCE,B'00100000'                                01S0229
*       SESTSEQ=ON;                 /* GOT THE SCE INDICATOR.        */
         LA    @10,ESTA906                                      01S0230
         OI    SESTSEQ(@10),B'00100000'                         01S0230
*     END;                          /* END SCE CALL SETUP.           */
*   ELSE                            /* NOT AN SCE CALL,              */
*     DO;                           /* DO D SLIP SETUP.              */
         B     @RC00225                                         01S0232
@RF00225 DS    0H                                               01S0233
*       CSCBPTR=R1;                 /* GET POINTER TO CSCB           */
         LR    CSCBPTR,R1                                       01S0233
*       SESTCSCB=CSCBPTR;           /* CSCB ADDRESS FOR ESTAE TO
*                                      FREE.                         */
         LA    @10,ESTA906                                      01S0234
         ST    CSCBPTR,SESTCSCB(,@10)                           01S0234
*       CSCBADDR=CSCBPTR;           /* CSCBPTR FOR CB860             */
         ST    CSCBPTR,CSCBADDR                                 01S0235
*       CMDPTR=ADDR(CB860CP);       /* PTR TO CMD LENGTH AND CMD.    */
         LA    @10,CB860CP                                      01S0236
         ST    @10,CMDPTR                                       01S0236
*       GEN SETS(R0,R1)(LOAD EP=IEECB860);/* GET COMMAND COMMON ESTAE
*                                      ADDRESS                       */
         LOAD EP=IEECB860
*       R1=ADDR(CB860PRM);          /* PASS THE PARMS                */
         LA    R1,CB860PRM                                      01S0238
*       R15=R0;                     /* GET CB860 ENTRY POINT         */
         LR    R15,R0                                           01S0239
*       GEN;                                                    01S0240
     STM R2,R12,12(R13)             SAVE REGS, CB860 CLOBBERS THEM
     BALR R14,R15                   GO SETUP COMMON CMD ESTAE
     LM  R2,R12,12(R13)             GET REGS BACK
*     END;                          /* END D SLIP SETUP.             */
*   IF R15=0×INSCE=YES THEN         /* IF ESTAE IS OK                */
@RC00225 LTR   R15,R15                                          01S0242
         BZ    @RT00242                                         01S0242
         TM    INSCE,B'00100000'                                01S0242
         BNO   @RF00242                                         01S0242
@RT00242 DS    0H                                               01S0243
*     DO;                           /* CONTINUE ESTAE SETUP          */
*       IF INSCE=NO THEN            /* IF D SLIP CALL, SET ESTAE.    */
         TM    INSCE,B'00100000'                                01S0244
         BNZ   @RF00244                                         01S0244
*         DO;                       /* DO SLIP ESTAE.                */
*           RFY                                                 01S0246
*            (R0,                                               01S0246
*             R1,                                               01S0246
*             R14,                                              01S0246
*             R15) UNRSTD;          /* RELEASE REGS                  */
*           ESTAELST(1:ESTALN)=ESTAEFRM(1:ESTALN);/* GET LIST FORM
*                                      INTO DYNAMIC STORAGE.         */
         L     @10,ESTALN                                       01S0247
         BCTR  @10,0                                            01S0247
         EX    @10,@SM01936                                     01S0247
*           RFY                                                 01S0248
*            (R1,                                               01S0248
*             R2,                                               01S0248
*             R3,                                               01S0248
*             R15) RSTD;                                        01S0248
*           R2=ADDR(IEECB906);      /* ESTAE EXIT ADDR.              */
         L     R2,@CV00358                                      01S0249
*           R1=ADDR(ESTAELST);      /* ESTAE LIST FORM.              */
         LA    R1,ESTAELST                                      01S0250
*           R3=ADDR(SESTAE);        /* ESTAE PARAMETER AREA. @ZA16842*/
         LA    R3,ESTA906                                       01S0251
*           GEN REFS(IEECB906,SESTAE,R2,R3)                     01S0252
*               (ESTAE (R2),PARAM=(R3),MF=(E,(1)));/* SET SLIP CP
*                                      ESTAE                 @ZA16842*/
         ESTAE (R2),PARAM=(R3),MF=(E,(1))
*           RFY                                                 01S0253
*            (R1,                                               01S0253
*             R2,                                               01S0253
*             R3) UNRSTD;                                       01S0253
*         END;                                                  01S0254
*       IF R15=0×INSCE=YES THEN     /* ESTAE OK OR SCE INPUT.        */
@RF00244 LTR   R15,R15                                          01S0255
         BZ    @RT00255                                         01S0255
         TM    INSCE,B'00100000'                                01S0255
         BNO   @RF00255                                         01S0255
@RT00255 DS    0H                                               01S0256
*         DO;                       /* YES, DO DISPLAY               */
*           RFY                                                 01S0257
*             R15 UNRSTD;                                       01S0257
*           IF INSCE=NO THEN        /* IF D SLIP,SEE IF DISPLAY 01S0258
*                                      SHOULD CONTINUE.              */
         TM    INSCE,B'00100000'                                01S0258
         BNZ   @RF00258                                         01S0258
*             DO;                   /* CHECK DISPLAY.                */
*                                                               02S0260
*/*********************************************************************
*                                                               02S0260
* DSPLOK- THIS SEGMENT SEES IF SLIP IS ACTIVE BUT NOT SERIALIZED(IE.
*         THE SCE CHAIN IS NOT USED BY ANOTHER DISPLAY OR SLIP  02S0260
*         COMMAND AS INDICATED BY THE SHDRSEQ BYTE IN THE SLIP HEADER).
*                                                               02S0260
*   OPERATION - IF SLIP IS ACTIVE(IE. AT LEAST ONE SLIP TRAP IS SET),
*               CHECK FOR SERIALIZATION.                        02S0260
*                 IF SCE'S ARE AVAILABLE SERIALIZE THEM FOR THIS
*                 COMMAND.                                      02S0260
*                 IF SCE'S ARE NOT AVAILABLE, WAIT .3 SECONDS AND TRY
*                 AGAIN, MAYBE A COMMAND WILL DE-SERIALIZE. TRY THIS
*                 5 TIMES FOR A TOTAL WAIT TIME OF 1.5 SECONDS. 02S0260
*                  IF AVAILABLE NOW SERIALIZE FOR THIS COMMAND. 02S0260
*                  IF NOT AVAILABLE, ASK THE OPERATOR IS (S)HE WANTS
*                  TO TRY THIS AGAIN OR FORGET IT (CANCEL THIS  02S0260
*                  DISPLAY).                                    02S0260
*              THE RESULT IS THE SETTING OF THE SESTSEQ BIT IF  02S0260
*              DISPLAY SLIP SHOULD CONTINUE.                    02S0260
*                                                               02S0260
**********************************************************************/
*                                                               02S0260
*               IF CVTRTMS^=0 THEN  /* IF A SLIP COMMAND HAS BEEN
*                                      ISSUED PREVIOUSLY, TRY TO     */
         L     @10,CVTPTR                                       02S0260
         L     @10,CVTRTMS(,@10)                                02S0260
         LTR   @10,@10                                          02S0260
         BZ    @RF00260                                         02S0260
*                 DO WHILE(SESTSEQ=NO&CANCEL=NO);/* OBTAIN SCE CHAIN
*                                      UNTIL IT IS SERIALIZED OR CMD
*                                      CANCELED                      */
         B     @DE00261                                         02S0261
@DL00261 DS    0H                                               02S0262
*                   DO TIMES=1 TO 5 /* SCE'S AVAILABLE? TRY 5        */
*                         WHILE(SESTSEQ=NO);/* TIMES.                */
         LA    TIMES,1                                          02S0262
@DL00262 LA    @10,ESTA906                                      02S0262
         TM    SESTSEQ(@10),B'00100000'                         02S0262
         BNZ   @DC00262                                         02S0262
*                     TS(SHDRSEQ);  /* CHECK FOR SCE AVAILABLE.      */
         L     @10,CVTPTR                                       02S0263
         L     @10,CVTRTMS(,@10)                                02S0263
         TS    SHDRSEQ(@10)                                     02S0263
*                     BC(CC1,NOSCE);/* GET SCE CHAIN?                */
         BC    4,NOSCE                                          02S0264
*                     SESTSEQ=ON;   /* YES,INDICATE AVAILABILITY     */
         LA    @10,ESTA906                                      02S0265
         OI    SESTSEQ(@10),B'00100000'                         02S0265
*NOSCE:                                                         02S0266
*                     ;             /* BRANCH HERE IT IS NO GOOD     */
NOSCE    DS    0H                                               02S0267
*                     IF SESTSEQ=NO THEN/* IF NOT SERIALIZED YET,    */
         LA    @10,ESTA906                                      02S0267
         TM    SESTSEQ(@10),B'00100000'                         02S0267
         BNZ   @RF00267                                         02S0267
*                       GEN REFS(WTIME)(STIMER WAIT,DINTVL=WTIME);/*
*                                      WAIT .3 SECONDS(THIS IS ONLY
*                                      DONE 5 TIMES).                */
         STIMER WAIT,DINTVL=WTIME
*                   END;            /* END SCE TIMER LOOP            */
@RF00267 AL    TIMES,@CF00040                                   02S0269
         C     TIMES,@CF00117                                   02S0269
         BNH   @DL00262                                         02S0269
@DC00262 DS    0H                                               02S0270
*                   ENDWTOR=OFF;    /* SET LOOP CONTROL              */
         NI    ENDWTOR,B'11101111'                              02S0270
*                   IF SESTSEQ=NO THEN/* STILL DON'T HAVE SCE'S ASK  */
         LA    @10,ESTA906                                      02S0271
         TM    SESTSEQ(@10),B'00100000'                         02S0271
         BNZ   @RF00271                                         02S0271
*                     DO WHILE(ENDWTOR=NO);/* OPERATOR FOR      02S0272
*                                      CANCEL/RETRY                  */
         B     @DE00272                                         02S0272
@DL00272 DS    0H                                               02S0273
*                       ECB=0;      /* ZERO ECB.                     */
         SLR   @10,@10                                          02S0273
         ST    @10,ECB                                          02S0273
*                       CALL IEECB908(M732,CHUCMP,0,0,REPLYBUF,ECB);
         LA    @10,M732                                         02S0274
         ST    @10,@AL00001                                     02S0274
         LA    @10,CHUCMP(,CSCBPTR)                             02S0274
         ST    @10,@AL00001+4                                   02S0274
         LA    @10,@CF00362                                     02S0274
         ST    @10,@AL00001+8                                   02S0274
         LA    @10,@CF00362                                     02S0274
         ST    @10,@AL00001+12                                  02S0274
         LA    @10,REPLYBUF                                     02S0274
         ST    @10,@AL00001+16                                  02S0274
         LA    @10,ECB                                          02S0274
         ST    @10,@AL00001+20                                  02S0274
         MVI   @AL00001+20,X'80'                                02S0274
         L     @15,@CV00359                                     02S0274
         LA    @01,@AL00001                                     02S0274
         BALR  @14,@15                                          02S0274
*                                   /* MSG IEE732D                   */
*                       RFY                                     02S0275
*                         R15 RSTD;                             02S0275
*                       IF R15=0 THEN/* WTOR OK?                     */
         LTR   R15,R15                                          02S0276
         BNZ   @RF00276                                         02S0276
*                         DO;       /* YES, WHAT WAS OP REPLY?       */
*                           RFY                                 02S0278
*                             R15 UNRSTD;                       02S0278
*                           IF REPLYBUF(1:LENGTH(OPCANCEL))=OPCANCEL
*                             THEN  /* CANCEL?                       */
         CLC   REPLYBUF(6),OPCANCEL                             02S0279
         BNE   @RF00279                                         02S0279
*                             DO;   /* YES, END IT ALL               */
*                               CALL IEECB908(MSG756,CHUCMP,0,0,0,0);
         MVC   @AL00001(24),@AL00281                            02S0281
         LA    @10,CHUCMP(,CSCBPTR)                             02S0281
         ST    @10,@AL00001+4                                   02S0281
         L     @15,@CV00359                                     02S0281
         LA    @01,@AL00001                                     02S0281
         BALR  @14,@15                                          02S0281
*                                   /* MSG 756 COMMAND CANCELED.     */
*                               CANCEL=ON;/* COMMAND IS CANCELLED    */
         OI    CANCEL,B'01000000'                               02S0282
*                               ENDWTOR=ON;/* END WTOR LOOP          */
         OI    ENDWTOR,B'00010000'                              02S0283
*                             END;  /* END REPLY CANCEL              */
*                           ELSE    /* NOT CANCEL, IS IT RETRY?      */
*                             IF REPLYBUF(1:LENGTH(RETRY))=RETRY THEN
         B     @RC00279                                         02S0285
@RF00279 CLC   REPLYBUF(5),RETRY                                02S0285
         BNE   @RF00285                                         02S0285
*                                   /* YES,                          */
*                               ENDWTOR=ON;/* END WTOR THEN RETRY SCE
*                                      GET                           */
         OI    ENDWTOR,B'00010000'                              02S0286
*                             ELSE                              02S0287
*                               ;   /* ERROR, ISSUE 732 AGAIN        */
@RF00285 DS    0H                                               02S0288
*                         END;      /* END WTOR OK.                  */
*                       ELSE        /* WTOR FAILED.                  */
*                         DO;       /* END THE LOOP.                 */
         B     @RC00276                                         02S0289
@RF00276 DS    0H                                               02S0290
*                           CANCEL=ON;/* INDICATE CANCEL TO END LOOP.*/
         OI    CANCEL,B'01000000'                               02S0290
*                           ENDWTOR=ON;/* DON'T ISSUE ANOTHER WTOR.  */
         OI    ENDWTOR,B'00010000'                              02S0291
*                         END;      /* END WTOR FAILED.              */
*                     END;          /* END,DIDN'T GET SCES           */
@RC00276 DS    0H                                               02S0293
@DE00272 TM    ENDWTOR,B'00010000'                              02S0293
         BZ    @DL00272                                         02S0293
*                   ELSE            /* GOT THE SCES SERIALIZED       */
*                     DO;           /* NOW SEE IF ANY TRAPS SET      */
         B     @RC00271                                         02S0294
@RF00271 DS    0H                                               02S0295
*                       IF SHDRFWD=0 THEN/* IF ZERO NO TRAPS IN 02S0295
*                                      EFFECT                        */
         L     @10,CVTPTR                                       02S0295
         L     @10,CVTRTMS(,@10)                                02S0295
         L     @09,SHDRFWD(,@10)                                02S0295
         LTR   @09,@09                                          02S0295
         BNZ   @RF00295                                         02S0295
*                         DO;       /* UNDO EVERYTHING               */
*                           CANCEL=YES;/* END THE LOOP               */
         OI    CANCEL,B'01000000'                               02S0297
*                           SHDRSEQ=0;/* DESERIALIZE SCES            */
         MVI   SHDRSEQ(@10),X'00'                               02S0298
*                           SESTSEQ=NO;/* NO LONGER HELD BY THIS CMD */
         LA    @10,ESTA906                                      02S0299
         NI    SESTSEQ(@10),B'11011111'                         02S0299
*                           NOSLPMSG=ON;/* NEED A MSG FOR NO TRAPS   */
         OI    NOSLPMSG,B'00100000'                             02S0300
*                         END;      /* END NO TRAPS SET              */
*                       ELSE                                    02S0302
*                         ;         /* THERE IS A TRAP SET           */
@RF00295 DS    0H                                               02S0303
*                     END;          /* END, SCES SERIALIZED          */
*                 END;              /* END PREVIOUS CMD ISSUED       */
@RC00271 DS    0H                                               02S0304
@DE00261 LA    @10,ESTA906                                      02S0304
         TM    SESTSEQ(@10),B'00100000'                         02S0304
         BNZ   @DC00261                                         02S0304
         TM    CANCEL,B'01000000'                               02S0304
         BZ    @DL00261                                         02S0304
@DC00261 DS    0H                                               02S0305
*               ELSE                /* NO PREVIOUS SLIP CMD          */
*                 NOSLPMSG=ON;      /* WRITE SLIP NOT ACTIVE         */
         B     @RC00260                                         02S0305
@RF00260 OI    NOSLPMSG,B'00100000'                             02S0305
*               IF NOSLPMSG=YES THEN/* WRITE AN ERROR MSG?           */
@RC00260 TM    NOSLPMSG,B'00100000'                             02S0306
         BNO   @RF00306                                         02S0306
*                 CALL IEECB908(M733,CHUCMP,0,0,0,0);/* WRITE MSG=733*/
         MVC   @AL00001(24),@AL00307                            02S0307
         LA    @10,CHUCMP(,CSCBPTR)                             02S0307
         ST    @10,@AL00001+4                                   02S0307
         L     @15,@CV00359                                     02S0307
         LA    @01,@AL00001                                     02S0307
         BALR  @14,@15                                          02S0307
*             END;                  /* END DISPLAY OK.               */
@RF00306 DS    0H                                               01S0309
*           IF SESTSEQ=YES THEN     /* SLIP IS ACTIVE AND SCES ARE   */
@RF00258 LA    @10,ESTA906                                      01S0309
         TM    SESTSEQ(@10),B'00100000'                         01S0309
         BNO   @RF00309                                         01S0309
*             DO;                   /* SERIALIZED FOR CMD,CONTINUE   */
*               IF INSCE=NO&CHBUF(1:5)=SLIPONLY THEN/* IF DISPLAY
*                                      SLIP                          */
         TM    INSCE,B'00100000'                                01S0311
         BNZ   @RF00311                                         01S0311
         CLC   CHBUF(5,CSCBPTR),SLIPONLY                        01S0311
         BNE   @RF00311                                         01S0311
*                 DO;               /* THEN DO THE SUMMARY           */
*                                                               02S0313
*/********************************************************************
*                                                               02S0313
* DSPLYALL- THIS SEGMENT CONSTRUCTS THE SUMMARY DISPLAY IN RESPONSE TO
*           OPERATOR COMMAND DISPLAY SLIP.                      02S0313
*                                                               02S0313
*  OPERATION- CLEAR THE WTO WORKAREA AND SETUP CONTROL LINE VIA 02S0313
*             INTERNAL SUBROUTINE SETCNTRL.                     02S0313
*             CONSTRUCT THE LABEL LINE                          02S0313
*             ADD UP TO 8 DATA LINES THEN ISSUE MLWTO           02S0313
*               IF 10 LINES(INCLUDING CONTROL AND LABEL) WERE   02S0313
*               WRITTEN, SETUP AND WRITE UP TO 10 MORE LINES. THIS
*               IS REPEATED UNTIL ALL SLIP TRAPS(SCES) HAVE     02S0313
*               BEEN DISPLAYED.                                 02S0313
**********************************************************************/
*                                                               02S0313
*                   CALL SETCNTRL;  /* SETUP CNTROL LINE AND RETURN
*                                      LINPTR,SAVEIDS AND SPLPTR     */
         BAL   @14,SETCNTRL                                     02S0313
*                   WPLMLLEN=LENGTH(LABEL)+4;/* LABEL LINE+FLAG AREA */
         L     @10,WPLPTR                                       02S0314
         LA    @06,70                                           02S0314
         STC   @06,WPLMLLEN(,@10)                               02S0314
*                   WPLMLLTB=ON;    /* INDICATE LABEL LINE           */
         OI    WPLMLLTB(@10),B'01000000'                        02S0315
*                   WPLMLTXT(1:LENGTH(LABEL))=LABEL;/* MOVE IN LABEL
*                                      LINE                          */
         MVC   WPLMLTXT(66,@10),LABEL                           02S0316
*                   LINPTR->LINENUM=LINPTR->LINENUM+1;/* UPDATE # OF
*                                      LINES                         */
         LA    @04,1                                            02S0317
         SLR   @02,@02                                          02S0317
         IC    @02,LINENUM(,LINPTR)                             02S0317
         ALR   @04,@02                                          02S0317
         STC   @04,LINENUM(,LINPTR)                             02S0317
*                   WPLPTR=WPLPTR+WPLMLLEN;/* POINT 1ST DATA LINE    */
         ALR   @10,@06                                          02S0318
         ST    @10,WPLPTR                                       02S0318
*                   SCEPTR=SHDRFWD; /* ADDRESS LAST TRAP SET         */
         L     @06,CVTPTR                                       02S0319
         L     @06,CVTRTMS(,@06)                                02S0319
         L     SCEPTR,SHDRFWD(,@06)                             02S0319
*                   WPTR=ADDR(WPLMLTXT);/* SETWORK POINTER.          */
         LA    @10,WPLMLTXT(,@10)                               02S0320
         ST    @10,WPTR                                         02S0320
*                   NUMLIN=8;       /* WRITE 8 DATA LINES            */
         LA    NUMLIN,8                                         02S0321
*                   DO WHILE(SCEEND=NO&WTOERR=NO);/* WRITE UNTIL ALL
*                                      SCES ARE SCANNED OR WTO FAILS */
         B     @DE00322                                         02S0322
@DL00322 DS    0H                                               02S0323
*                     DO LINES=1 TO NUMLIN WHILE(SCEEND=NO);/* TOTAL
*                                      10 LINES OR FIND SCE END      */
         LA    LINES,1                                          02S0323
         B     @DE00323                                         02S0323
@DL00323 TM    SCEEND,B'00010000'                               02S0323
         BNZ   @DC00323                                         02S0323
*                       WPLMLTXT(1:MAXDATA)='';/* BLANK OUT THE DATA
*                                      LINE                          */
         L     @10,WPLPTR                                       02S0324
         MVI   WPLMLTXT(@10),C' '                               02S0324
         MVC   WPLMLTXT+1(65,@10),WPLMLTXT(@10)                 02S0324
*                       DO IDS=1 TO MAXIDS/* PUT UP TO 5 IDS PER DATA*/
*                             WHILE(SCEEND=NO);/* LINE               */
         LA    IDS,1                                            02S0325
@DL00325 TM    SCEEND,B'00010000'                               02S0325
         BNZ   @DC00325                                         02S0325
*                         ID(IDS)=SCEID;/* PUT THIS ID IN DATA LINE  */
         L     @10,WPTR                                         02S0326
         LR    @06,IDS                                          02S0326
         MH    @06,@CH00155                                     02S0326
         ST    @06,@TF00001                                     02S0326
         ALR   @06,@10                                          02S0326
         AL    @06,@CF01941                                     02S0326
         MVC   ID(4,@06),SCEID(SCEPTR)                          02S0326
*                         IF SCEDSABL=YES THEN/* IF THIS TRAP IS
*                                      DISABLED                      */
         TM    SCEDSABL(SCEPTR),B'10000000'                     02S0327
         BNO   @RF00327                                         02S0327
*                           DO;     /* SET LENGTH BIT AND DISABLED   */
*                             ENBL=OFF;/* SET ENABLE BIT FOR LENGTH. */
         NI    ENBL,B'01111111'                                 02S0329
*                             STATE(IDS)=DISABLED;/* INDICATE IN
*                                      DISPLAY LINE                  */
         AL    @10,@TF00001                                     02S0330
         AL    @10,@CF01943                                     02S0330
         MVC   STATE-5(8,@10),DISABLED                          02S0330
*                           END;    /* D ALL DISABLED.               */
*                         ELSE      /* NOT DISABLED,                 */
*                           DO;     /* SET LENGTH BIT AND ENABLED    */
         B     @RC00327                                         02S0332
@RF00327 DS    0H                                               02S0333
*                             ENBL=ON;/* LENGTH BIT,SUBTRACT 1       */
         OI    ENBL,B'10000000'                                 02S0333
*                             STATE(IDS)=ENABLED;/* INDICATE TRAP IS
*                                      ENABLED                       */
         LR    @10,IDS                                          02S0334
         MH    @10,@CH00155                                     02S0334
         L     @06,WPTR                                         02S0334
         ALR   @06,@10                                          02S0334
         AL    @06,@CF01943                                     02S0334
         MVC   STATE-5(8,@06),ENABLED                           02S0334
*                           END;    /* D ALL ENABLED.                */
*                         IF SCEFWD=0 THEN/* SCE LAST ON CHAIN,      */
@RC00327 L     @10,SCEFWD(,SCEPTR)                              02S0336
         LTR   @10,@10                                          02S0336
         BNZ   @RF00336                                         02S0336
*                           SCEEND=YES;/* INDICATE ALL TRAPS DONE    */
         OI    SCEEND,B'00010000'                               02S0337
*                         ELSE      /* NOT LAST TRAP                 */
*                           SCEPTR=SCEFWD;/* GET PTR TO NEXT TRAP    */
         B     @RC00336                                         02S0338
@RF00336 L     SCEPTR,SCEFWD(,SCEPTR)                           02S0338
*                       END;        /* END FILL UP DATA LINE         */
@RC00336 AL    IDS,@CF00040                                     02S0339
         C     IDS,@CF00117                                     02S0339
         BNH   @DL00325                                         02S0339
@DC00325 DS    0H                                               02S0340
*                       IF WTO1ST=NO THEN/* 1ST LINE AFTER SVC35 ?   */
         TM    WTO1ST,B'01000000'                               02S0340
         BNZ   @RF00340                                         02S0340
*                         DO;       /* NO,DO MLWTO DATA LINE    02S0341
*                                      PROCESSING.                   */
*                                                               02S0341
*                           /*****************************************/
*                           /*                                       */
*                           /* LENGTH IS NO. IDS TIMES LENGTH OF EACH*/
*                           /* ID SLOT(IE. ID PLUS STATE) PLUS WTO   */
*                           /* FLAGS. SUBTRACT ONE FOR THE EXTRA     */
*                           /* BLANK AFTER THE STATE.                */
*                           /*                                       */
*                           /*****************************************/
*                                                               02S0342
*                           WPLMLLEN=(IDS-1)*ENTLEN+3;/* LENGTH OF
*                                      THIS DATA LINE, #IDS*LENGTH OF
*                                      ID+STATE PLUS WTO HEADER.     */
         L     @10,WPLPTR                                       02S0342
         LR    @06,IDS                                          02S0342
         BCTR  @06,0                                            02S0342
         MH    @06,@CH00155                                     02S0342
         AL    @06,@CF00088                                     02S0342
         STC   @06,WPLMLLEN(,@10)                               02S0342
*                           IF ENBL=YES THEN/* IF ENABLED TRAP       */
         TM    ENBL,B'10000000'                                 02S0343
         BNO   @RF00343                                         02S0343
*                             WPLMLLEN=WPLMLLEN-1;/* DECREMENT LINE
*                                      LENGTH                        */
         BCTR  @06,0                                            02S0344
         STC   @06,WPLMLLEN(,@10)                               02S0344
*                           ELSE                                02S0345
*                             ;     /* NOT DISABLED.                 */
@RF00343 DS    0H                                               02S0346
*                           WPLML0=0;/* FIRST MLWTO BYTE MUST BE
*                                      ZERO.                         */
         L     @10,WPLPTR                                       02S0346
         MVI   WPLML0(@10),X'00'                                02S0346
*                           WPLMLLTF=0;/* MAKE SURE NO EXTRA BITS ARE
*                                      ON.                           */
         SLR   @06,@06                                          02S0347
         STH   @06,WPLMLLTF(,@10)                               02S0347
*                           IF SCEEND=YES THEN/* ALL SCES SEARCHED   */
         TM    SCEEND,B'00010000'                               02S0348
         BNO   @RF00348                                         02S0348
*                             WPLMLLTD=ON;/* YES,INDICATE END LINE   */
         OI    WPLMLLTD(@10),B'00010000'                        02S0349
*                           WPLMLLTC=ON;/* INDICATE DATA LINE        */
@RF00348 L     @10,WPLPTR                                       02S0350
         OI    WPLMLLTC(@10),B'00100000'                        02S0350
*                           WPLPTR=WPLPTR+WPLMLLEN;/* GET TO NEXT
*                                      DATA LINE                     */
         SLR   @06,@06                                          02S0351
         IC    @06,WPLMLLEN(,@10)                               02S0351
         ALR   @06,@10                                          02S0351
         ST    @06,WPLPTR                                       02S0351
*                         END;      /* END MLWTO DATA LINE      02S0352
*                                      PROCESSING.                   */
*                       ELSE        /* IT IS 1ST LINE AFTER SVC35.   */
*                         DO;       /* MAKE A LINE WITH CONTROL INFO.*/
         B     @RC00340                                         02S0353
@RF00340 DS    0H                                               02S0354
*                           WPLLGH=3+(IDS-1)*ENTLEN;/* LENGTH OF THIS
*                                      LINE.                         */
         L     @10,WPLPTR                                       02S0354
         LR    @09,IDS                                          02S0354
         BCTR  @09,0                                            02S0354
         MH    @09,@CH00155                                     02S0354
         AL    @09,@CF00088                                     02S0354
         STH   @09,WPLLGH(,@10)                                 02S0354
*                           IF ENBL=YES THEN/* IF ENABLED GET RID OF
*                                      BLANK.                        */
         TM    ENBL,B'10000000'                                 02S0355
         BNO   @RF00355                                         02S0355
*                             WPLLGH=WPLLGH-1;/* THERES AN EXTRA
*                                      BLANK.                        */
         BCTR  @09,0                                            02S0356
         STH   @09,WPLLGH(,@10)                                 02S0356
*                           WPLMCSF=WPLMCSF&&WPLMCSF;/* CLEAR UNUSED
*                                      BITS.                         */
@RF00355 L     @10,WPLPTR                                       02S0357
         XC    WPLMCSF(2,@10),WPLMCSF(@10)                      02S0357
*                           WPLMCSFJ=ON;/* ITS A MLWTO.OTHER FLAGS
*                                      WERE GIVEN IN 1ST SVC35       */
         OI    WPLMCSFJ(@10),B'01000000'                        02S0358
*                           WPLPTR=WPLPTR+WPLLGH;/* GET TO MLWTO
*                                      FLAGS.                        */
         LH    @09,WPLLGH(,@10)                                 02S0359
         ALR   @09,@10                                          02S0359
         ST    @09,WPLPTR                                       02S0359
*                           WPLLTF=WPLLTF&&WPLLTF;/* CLEAR OUT LINE
*                                      TYPE FLAGS.                   */
         XC    WPLLTF(2,@09),WPLLTF(@09)                        02S0360
*                           WPLLTFC=ON;/* ONLY WANT DATA AND MAYBE
*                                      END.                          */
         OI    WPLLTFC(@09),B'00100000'                         02S0361
*                           IF SCEEND=YES THEN/* ALL SCES DONE ?     */
         TM    SCEEND,B'00010000'                               02S0362
         BNO   @RF00362                                         02S0362
*                             WPLLTFD=ON;/* YES, END THE WTO.        */
         OI    WPLLTFD(@09),B'00010000'                         02S0363
*                           WPLAREA=CHARID;/* AREA ID FOR WTO.       */
@RF00362 L     @10,WPLPTR                                       02S0364
         MVC   WPLAREA(1,@10),CHARID(CSCBPTR)                   02S0364
*                           LINPTR=ADDR(WPLLINES);/* ADDR OF NO OF
*                                      MLWTO LINES.                  */
         LA    LINPTR,WPLLINES(,@10)                            02S0365
*                           WPLLINES=1;/* NUMBER OF LINES SO FAR.    */
         MVI   WPLLINES(@10),X'01'                              02S0366
*                           WTO1ST=OFF;/* NO LONGER 1ST LINE AFTER
*                                      SVC.                          */
         NI    WTO1ST,B'10111111'                               02S0367
*                           WPLPTR=WPLPTR+4;/* ADDRESS NEXT LINE.    */
         AL    @10,@CF00053                                     02S0368
         ST    @10,WPLPTR                                       02S0368
*                         END;      /* END 1ST LINE AFTER SCV35.     */
*                       WPTR=ADDR(WPLMLTXT);/* GET TO TEXT LOC.      */
@RC00340 L     @10,WPLPTR                                       02S0370
         LA    @10,WPLMLTXT(,@10)                               02S0370
         ST    @10,WPTR                                         02S0370
*                     END;          /* END 10 LINES                  */
         AL    LINES,@CF00040                                   02S0371
@DE00323 CR    LINES,NUMLIN                                     02S0371
         BNH   @DL00323                                         02S0371
@DC00323 DS    0H                                               02S0372
*                     IF SCEEND=NO THEN/* IF NOT CHAINED             */
         TM    SCEEND,B'00010000'                               02S0372
         BNZ   @RF00372                                         02S0372
*                       LINPTR->LINENUM=10;/* SET MAX LINE COUNT     */
         MVI   LINENUM(LINPTR),X'0A'                            02S0373
*                     ELSE          /* CHAIN END                     */
*                       LINPTR->LINENUM=LINPTR->LINENUM+/* COMPUTE   */
*                           LINES-1;/* LINE COUNT                    */
         B     @RC00372                                         02S0374
@RF00372 SLR   @10,@10                                          02S0374
         IC    @10,LINENUM(,LINPTR)                             02S0374
         ALR   @10,LINES                                        02S0374
         BCTR  @10,0                                            02S0374
         STC   @10,LINENUM(,LINPTR)                             02S0374
*                     NUMLIN=10;    /* SET UP FOR LOOP               */
@RC00372 LA    NUMLIN,10                                        02S0375
*                     RFY                                       02S0376
*                      (R0,                                     02S0376
*                       R1,                                     02S0376
*                       R15) RSTD;                              02S0376
*                     R0=SAVEIDS;   /* CONSOLE + WTO ID              */
         ICM   R0,15,SAVEIDS                                    02S0377
*                     R1=ADDR(WTOAREA);/* WTO ADDR                   */
         LA    R1,WTOAREA                                       02S0378
*                     GEN(WTO MF=(E,(1)));/* WRITE UP TO 10 LINES    */
         WTO MF=(E,(1))
*                     SAVWTOID=R1;  /* SAVE WTOID FOR CONNECT        */
         STCM  R1,7,SAVWTOID                                    02S0380
*                     SESTWTOI=SAVEIDS;/* SAVE WTOIDS FOR ESTAE.     */
         LA    @14,ESTA906                                      02S0381
         MVC   SESTWTOI(4,@14),SAVEIDS                          02S0381
*                     IF R15^=0 THEN/* WTO OK?                       */
         LTR   R15,R15                                          02S0382
         BZ    @RF00382                                         02S0382
*                       WTOERR=ON;  /* NO END                        */
         OI    WTOERR,B'00001000'                               02S0383
*                     WTO1ST=ON;    /* INDICATE 1ST LINE AFTER SVC35.*/
@RF00382 OI    WTO1ST,B'01000000'                               02S0384
*                     WPLPTR=ADDR(WTOAREA);/* GET TO WTO WORK AREA.  */
         LA    @14,WTOAREA                                      02S0385
         ST    @14,WPLPTR                                       02S0385
*                     WPTR=ADDR(WPLMLTXT);/* SET UP WTO WORK PTR.    */
         LA    @14,WPLMLTXT(,@14)                               02S0386
         ST    @14,WPTR                                         02S0386
*                     RFY                                       02S0387
*                      (R0,                                     02S0387
*                       R1,                                     02S0387
*                       R15) UNRSTD;                            02S0387
*                   END;            /* END ALLSCE LOOP               */
@DE00322 TM    SCEEND,B'00011000'                               02S0388
         BZ    @DL00322                                         02S0388
*                 END;              /* END SUMMARY                   */
*               ELSE                /* ITS DISPLAY SLIP WITH         */
*                 DO;               /* PARAMETER.                    */
         B     @RC00311                                         01S0390
@RF00311 DS    0H                                               01S0391
*                   IF INSCE=YES×CHBUF(1:5)=SLIPID/* DISPLAY    01S0391
*                                      SLIP=XXXX                     */
*                       &CHBUF(10:10)=' ' THEN/* WHERE THE XXXX IS
*                                      LESS/= 4 CHARS OR SCE INPUT.  */
         TM    INSCE,B'00100000'                                01S0391
         BO    @RT00391                                         01S0391
         CLC   CHBUF(5,CSCBPTR),SLIPID                          01S0391
         BNE   @RF00391                                         01S0391
         CLI   CHBUF+9(CSCBPTR),C' '                            01S0391
         BNE   @RF00391                                         01S0391
@RT00391 DS    0H                                               01S0392
*                     DO;           /* YES, DISPLAY SINGLE           */
*                                                               02S0393
*/********************************************************************
*                                                               02S0393
*  DSPLYONE-THIS SEGMENT ISSUES MSG IEE735I OR IEE725I FOR ONE  02S0393
*           PARTICULAR TRAP. THIS TRAP IS IDENTIFIED BY THE OPERAND
*           ON THE DISPLAY SLIP COMMAND OR INPUT SCE.           02S0393
*                                                               02S0393
*    OPERATION- FIND THE CORRESPONDING SCE.                     02S0393
*               FILL IN LINE1 OF DISPLAY WITH TRAP ID,STATE AND ACTION
*               FILL IN LINE2 OF DISPLAY WITH ERROR TYPE.       02S0393
*               FILL IN LINE3 OF DISPLAY WITH MODE(THIS MAY TAKE 2
*               LINES).                                         02S0393
*               THE REST OF THE DISPLAY IS OPTIONAL AND CAN CONTAIN
*               JOBNAME,JSPGM,PVTMOD,LPAMOD,ADDRESS AND ASID.   02S0393
*                                                               02S0393
**********************************************************************/
*                                                               02S0393
*                       CALL SETCNTRL;/* SET UP MLWTO                */
         BAL   @14,SETCNTRL                                     02S0393
*                       IF INSCE=NO THEN/* GET 1ST SCE PTR FOR D
*                                      SLIP.                         */
         TM    INSCE,B'00100000'                                02S0394
         BNZ   @RF00394                                         02S0394
*                         SCEPTR=SHDRFWD;/* GET 1ST SCE              */
         L     @10,CVTPTR                                       02S0395
         L     @10,CVTRTMS(,@10)                                02S0395
         L     SCEPTR,SHDRFWD(,@10)                             02S0395
*                       DO WHILE(SCEFOUND=NO&ALLSCES=NO&INSCE=NO);/*
*                                      FIND ID OR QUIT.              */
@RF00394 B     @DE00396                                         02S0396
@DL00396 DS    0H                                               02S0397
*                         IF SCEID=CHBUF(6:9) THEN/* ID MATCH        */
         CLC   SCEID(4,SCEPTR),CHBUF+5(CSCBPTR)                 02S0397
         BNE   @RF00397                                         02S0397
*                           SCEFOUND=ON;/* YES,FOUND THE TRAP        */
         OI    SCEFOUND,B'00000100'                             02S0398
*                         ELSE      /* DIDN'T MATCH                  */
*                           IF SCEFWD^=0 THEN/* IS THIS THE LAST SCE */
         B     @RC00397                                         02S0399
@RF00397 L     @10,SCEFWD(,SCEPTR)                              02S0399
         LTR   @10,@10                                          02S0399
         BZ    @RF00399                                         02S0399
*                             SCEPTR=SCEFWD;/* GET THE NEXT SCE      */
         LR    SCEPTR,@10                                       02S0400
*                           ELSE    /* LAST SCE                      */
*                             ALLSCES=ON;/* END THE SEARCH           */
         B     @RC00399                                         02S0401
@RF00399 OI    ALLSCES,B'00000010'                              02S0401
*                       END;        /* END ID SEARCH                 */
@RC00399 DS    0H                                               02S0402
@RC00397 DS    0H                                               02S0402
@DE00396 TM    SCEFOUND,B'00000110'                             02S0402
         BNZ   @DC00396                                         02S0402
         TM    INSCE,B'00100000'                                02S0402
         BZ    @DL00396                                         02S0402
@DC00396 DS    0H                                               02S0403
*                       IF INSCE=YES×SCEFOUND=YES THEN/* PROPER SCE
*                                      FOUND?                        */
         TM    INSCE,B'00100000'                                02S0403
         BO    @RT00403                                         02S0403
         TM    SCEFOUND,B'00000100'                             02S0403
         BNO   @RF00403                                         02S0403
@RT00403 DS    0H                                               02S0404
*                         DO;       /* YES, DISPLAY THE DETAILS      */
*                                                               03S0405
*/********************************************************************
*                                                               03S0405
* L1IDSTAC-THIS SEGMENT CREATES THE DATA LINE THAT CONTAINS THE 03S0405
*          SLIP TRAP ID,STATE AND ACTION.                       03S0405
*                                                               03S0405
*   OPERATION-PUT ID=XXXX INTO MSG                              03S0405
*             PUT IN STATE-EITHER ENABLED OR DISABLED           03S0405
*             PUT IN ACTION-EITHER WAIT,SVCD OR IGNORE          03S0405
*                                                               03S0405
**********************************************************************/
*                                                               03S0405
*                           WPTR=ADDR(WPLMLTXT);/* ADDRESS DATA 03S0405
*                                      PORTION                       */
         L     @10,WPLPTR                                       03S0405
         LA    @10,WPLMLTXT(,@10)                               03S0405
         ST    @10,WPTR                                         03S0405
*                           WPTR->WIDEQ=IDEQ;/* PUT IN ID=           */
         MVC   WIDEQ(3,@10),IDEQ                                03S0406
*                           WPTR=WPTR+LENGTH(WIDEQ);/* UPDATE TO ID
*                                      FIELD                         */
         AL    @10,@CF00088                                     03S0407
         ST    @10,WPTR                                         03S0407
*                           WPTR->WID=SCEID;/* GET THE ID IN MSG.    */
         MVC   WID(4,@10),SCEID(SCEPTR)                         03S0408
*                           DO BPTR=WPTR TO WPTR+3 WHILE(BPTR->CHARCK^=
*                                 ' ');/* UPDATE POINTER PAST NON
*                                      BLANK ID PART                 */
         LR    BPTR,@10                                         03S0409
         B     @DE00409                                         03S0409
@DL00409 CLI   CHARCK(BPTR),C' '                                03S0409
         BE    @DC00409                                         03S0409
*                           END;    /* END UPDATE PAST ID            */
         AL    BPTR,@CF00040                                    03S0410
@DE00409 LA    @10,3                                            03S0410
         AL    @10,WPTR                                         03S0410
         CR    BPTR,@10                                         03S0410
         BNH   @DL00409                                         03S0410
@DC00409 DS    0H                                               03S0411
*                           WPTR=BPTR;/* UPDATE AFTER BLANK SCAN.    */
         ST    BPTR,WPTR                                        03S0411
*                           WPTR->WCOMMA=COMMA;/* NEED A        03S0412
*                                      COMMA-ID=XXXX,                */
         L     @10,WPTR                                         03S0412
         MVC   WCOMMA(1,@10),COMMA                              03S0412
*                           WPTR=WPTR+1;/* GET STATE                 */
         AL    @10,@CF00040                                     03S0413
         ST    @10,WPTR                                         03S0413
*                           IF SCEDSABL=YES THEN/* IS THE TRAP  03S0414
*                                      DISABLED?                     */
         TM    SCEDSABL(SCEPTR),B'10000000'                     03S0414
         BNO   @RF00414                                         03S0414
*                             DO;   /* YES, ID=XXXX,DISABLED,        */
*                               WPTR->L1STATE=DISABLED;/* SHOW  03S0416
*                                      DISABLED.                     */
         MVC   L1STATE(8,@10),DISABLED                          03S0416
*                               WPTR=WPTR+LENGTH(DISABLED);/* GET
*                                      ACTION PART.                  */
         AL    @10,@CF00084                                     03S0417
         ST    @10,WPTR                                         03S0417
*                             END;  /* END DISABLED                  */
*                           ELSE    /* ITS ENABLED                   */
*                             DO;   /* INDICATE ENABLED              */
         B     @RC00414                                         03S0419
@RF00414 DS    0H                                               03S0420
*                               WPTR->L1STATE=IDENABL;/*        03S0420
*                                      ID=XXXX,ENABLED,              */
         L     @10,WPTR                                         03S0420
         MVI   L1STATE+7(@10),C' '                              03S0420
         MVC   L1STATE(7,@10),IDENABL                           03S0420
*                               WPTR=WPTR+LENGTH(IDENABL);/* GET TO
*                                      ACTION                        */
         AL    @10,@CF00032                                     03S0421
         ST    @10,WPTR                                         03S0421
*                             END;  /* END ENABLED                   */
*                           WPTR->WACTION=ACTIONEQ;/*           03S0423
*                                      ID=XXXX,ENABLED,ACTION=.      */
@RC00414 L     @10,WPTR                                         03S0423
         MVC   WACTION(8,@10),ACTIONEQ                          03S0423
*                           WPTR=WPTR+LENGTH(ACTIONEQ);/* GET TO
*                                      ACTION DATA.                  */
         AL    @10,@CF00084                                     03S0424
         ST    @10,WPTR                                         03S0424
*                           IF SCEIGNOR=YES THEN/* ACTION IGNORE?    */
         TM    SCEIGNOR(SCEPTR),B'00000100'                     03S0425
         BNO   @RF00425                                         03S0425
*                             DO;   /* YES,                          */
*                               WPTR->WIGNR=IGNOR;/* PUT IN     03S0427
*                                      ACTION=IGNORE                 */
         MVC   WIGNR(6,@10),IGNOR                               03S0427
*                               WPTR=WPTR+LENGTH(IGNOR);/* INCREMENT
*                                      FOR MSGTXT LENGTH             */
         AL    @10,@CF00119                                     03S0428
         ST    @10,WPTR                                         03S0428
*                             END;  /* END FOR IGNORE                */
*                           ELSE    /* NOT IGNORE                    */
*                             IF SCEWAIT=YES THEN/* IS IT WAIT?      */
         B     @RC00425                                         03S0430
@RF00425 TM    SCEWAIT(SCEPTR),B'00001000'                      03S0430
         BNO   @RF00430                                         03S0430
*                               DO; /* YES,                          */
*                                 WPTR->WWAIT=WAIT;/* PUT IN    03S0432
*                                      ACTION=WAIT,                  */
         L     @10,WPTR                                         03S0432
         MVC   WWAIT(4,@10),WAIT                                03S0432
*                                 WPTR=WPTR+LENGTH(WAIT);/* UPDATE
*                                      FOR LENGTH                    */
         AL    @10,@CF00053                                     03S0433
         ST    @10,WPTR                                         03S0433
*                               END;/* END FOR WAIT                  */
*                             ELSE  /* NOT WAIT              @G33NPHE*/
*                               IF SCENODMP=YES THEN/* IS IT NODUMP?
*                                                            @G33NPHE*/
         B     @RC00430                                         03S0435
@RF00430 TM    SCENODMP(SCEPTR),B'00000010'                     03S0435
         BNO   @RF00435                                         03S0435
*                                 DO;/* YES,                 @G33NPHE*/
*                                   WPTR->WNODMP=NODMP;/* PUT IN
*                                      ACTION=NODUMP         @G33NPHE*/
         L     @10,WPTR                                         03S0437
         MVC   WNODMP(6,@10),NODMP                              03S0437
*                                   WPTR=WPTR+LENGTH(NODMP);/* UPDATE
*                                      FOR LENGTH            @G33NPHE*/
         AL    @10,@CF00119                                     03S0438
         ST    @10,WPTR                                         03S0438
*                                 END;/* END FOR NODUMP      @G33NPHE*/
*                               ELSE/* NOT IGNORE,WAIT OR NODUMP
*                                                            @G33NPHE*/
*                                 DO;/* ITS SVCD                     */
         B     @RC00435                                         03S0440
@RF00435 DS    0H                                               03S0441
*                                   WPTR->WSVCD=SVCD;/* ACTION-SVCD  */
         L     @10,WPTR                                         03S0441
         MVC   WSVCD(4,@10),SVCD                                03S0441
*                                   WPTR=WPTR+LENGTH(SVCD);/* UPDATE
*                                      FOR TEXT LENGTH               */
         AL    @10,@CF00053                                     03S0442
         ST    @10,WPTR                                         03S0442
*                                 END;/* END FOR SVCD                */
*                           WPLMLLTB=ON;/* INDICATE TITLE LINE       */
@RC00435 DS    0H                                               03S0444
@RC00430 DS    0H                                               03S0444
@RC00425 L     @10,WPLPTR                                       03S0444
         OI    WPLMLLTB(@10),B'01000000'                        03S0444
*                           WPLMLLEN=WPTR-ADDR(WPLMLTXT)+4;/* LENGTH
*                                      OF TEXT + WTO FLAGS           */
         LA    @06,WPLMLTXT(,@10)                               03S0445
         LCR   @06,@06                                          03S0445
         AL    @06,WPTR                                         03S0445
         AL    @06,@CF00053                                     03S0445
         STC   @06,WPLMLLEN(,@10)                               03S0445
*                                                               03S0446
*/********************************************************************
* L2ERRTYP-THIS SEGMENT DISPLAYS THE ERROR TYPE,REQUESTED ON A PREVIOUS
*          SLIP COMMAND, FOR DISPLAY SLIP=.                     03S0446
*                                                               03S0446
*   OPERATION-THIS SEGMENT IS POSITIONALLY DEPENDENT UPON BIT SETTINGS
*             IN THE SCE THAT CORRESPOND TO THE ERRTYPS CHOSEN. 03S0446
*             CHECK REGISTER FOR NEGATIVE, IF SO MOVE THE APPROPRIATE
*             ERRTYPE TO THE MESSAGE.                           03S0446
*             SHIFT AND DO ABOVE CHECK UNTIL ALL FIELDS ARE CHECKED.
*                                                               03S0446
**********************************************************************/
*                                                               03S0446
*                           LINPTR->LINENUM=LINPTR->LINENUM+1;/*
*                                      UPDATE MLWTO LINE #.          */
         LA    @04,1                                            03S0446
         SLR   @15,@15                                          03S0446
         IC    @15,LINENUM(,LINPTR)                             03S0446
         ALR   @04,@15                                          03S0446
         STC   @04,LINENUM(,LINPTR)                             03S0446
*                           WPLPTR=WPLPTR+WPLMLLEN;/* GET TO NEXT
*                                      SLOT IN WTO AREA.             */
         ALR   @10,@06                                          03S0447
         ST    @10,WPLPTR                                       03S0447
*                           WPLMLTXT='';/* BLANK OUT TEXT.           */
         MVI   WPLMLTXT(@10),C' '                               03S0448
         MVC   WPLMLTXT+1(125,@10),WPLMLTXT(@10)                03S0448
*                           WPLML0=0;/* ZERO HI ORDER BYTE OF LENGTH.*/
         MVI   WPLML0(@10),X'00'                                03S0449
*                           WPLMLLTF=0;/* ZERO LINE TYPE FLAGS.      */
         SLR   @06,@06                                          03S0450
         STH   @06,WPLMLLTF(,@10)                               03S0450
*                           WPTR=ADDR(WPLMLTXT);/* GET WORK POINTER. */
         LA    @10,WPLMLTXT(,@10)                               03S0451
         ST    @10,WPTR                                         03S0451
*                           WPTR->WERRTYP=ERRTYPEQ;/* MOVE IN   03S0452
*                                      ERRORTYP=                     */
         MVC   WERRTYP(7,@10),ERRTYPEQ                          03S0452
*                           WPTR=WPTR+LENGTH(WERRTYP);/* UPDATE TO
*                                      VARIABLE PART.                */
         AL    @10,@CF00032                                     03S0453
         ST    @10,WPTR                                         03S0453
*                           RFY                                 03S0454
*                             SHIFTER RSTD;/* NEED A REGISTER.       */
*                           SHIFTER=0;/* CLEAR SHIFT REG.            */
         SLR   SHIFTER,SHIFTER                                  03S0455
*                           RFY                                 03S0456
*                             R1 RSTD;                          03S0456
*                           R1=SCEPTR;/* ICM BASE.                   */
         LR    R1,SCEPTR                                        03S0457
*                           GEN REFS(SCERRTYP,SHIFTER)/* GET ERRTYP
*                                      FLAGS                         */
*                               (ICM SHIFTER,8,SCERRTYP(R1));/* PUT
*                                      IN HI ORDER BYTE              */
         ICM SHIFTER,8,SCERRTYP(R1)
*                           RFY                                 03S0459
*                             R1 UNRSTD;                        03S0459
*                           DO ECTR=1 TO ENUM;/* LOOP THRU TO GET
*                                      ERRTYPS                       */
         LA    ECTR,1                                           03S0460
@DL00460 DS    0H                                               03S0461
*                             IF SHIFTER<0 THEN/* IF THE BIT IS ON
*                                      THEN                          */
         LTR   SHIFTER,SHIFTER                                  03S0461
         BNM   @RF00461                                         03S0461
*                               DO; /* MOVE IN PROPER ERRTYPE        */
*                                 WPTR->WETYP=ETYP(ECTR);/* GET THE
*                                      ERROR TYPE.                   */
         L     @10,WPTR                                         03S0463
         LR    @06,ECTR                                         03S0463
         SLA   @06,3                                            03S0463
         LA    @04,ETYP-8(@06)                                  03S0463
         MVC   WETYP(8,@10),0(@04)                              03S0463
*                                 WPTR=WPTR+ELEN(ECTR);/* UPDATE MSG
*                                      TEXT PTR.                     */
         SLR   @06,@06                                          03S0464
         IC    @06,ELEN-1(ECTR)                                 03S0464
         ALR   @10,@06                                          03S0464
         ST    @10,WPTR                                         03S0464
*                               END;/* END ERRTYP SPECIFIED.         */
*                             ELSE                              03S0466
*                               ;   /* NO ERRTYP SPECIFIED.          */
@RF00461 DS    0H                                               03S0467
*                             SLL(SHIFTER,1);/* GETUP FOR NEXT ERRTYP
*                                      CHK                           */
         SLL   SHIFTER,1                                        03S0467
*                           END;    /* END ERRORTYPE CHECK LOOP      */
         AL    ECTR,@CF00040                                    03S0468
         C     ECTR,@CF00084                                    03S0468
         BNH   @DL00460                                         03S0468
*                           RFY                                 03S0469
*                             SHIFTER UNRSTD;/* DON'T NEED REG. ANY
*                                      MORE                          */
*                           WPLMLLEN=WPTR-ADDR(WPLMLTXT)-1+4;/* GET
*                                      THE LENGTH OF TEXT,THERE IS AN
*                                      EXTRA COMMA.                  */
         L     @10,WPLPTR                                       03S0470
         LA    @06,WPLMLTXT(,@10)                               03S0470
         L     @04,WPTR                                         03S0470
         SLR   @04,@06                                          03S0470
         AL    @04,@CF00088                                     03S0470
         STC   @04,WPLMLLEN(,@10)                               03S0470
*                           ETXT=WPLMLLEN-4-LENGTH(WERRTYP)-1;/* GET
*                                      LENGTH OF DATA WITHOUT THE
*                                      EXTRA COMMA                   */
         SL    @04,@CF00033                                     03S0471
         LR    ETXT,@04                                         03S0471
*                           WPTR=ADDR(WPLMLTXT)+LENGTH(WERRTYP);/*
*                                      GET PTR TO EXTRA COMMA        */
         AL    @06,@CF00032                                     03S0472
         ST    @06,WPTR                                         03S0472
*                           WPTR->OVRLY(1:ETXT+1)=(WPTR+1)->OVRLY(1:
*                               ETXT+1);/* MOVE DATA OVER COMMA      */
         EX    ETXT,@SM01949                                    03S0473
*                                                               03S0474
*/********************************************************************
*                                                               03S0474
* L3MODE-THIS SEGMENT WRITES THE MODE PORTION OF DISPLAY SLIP=. 03S0474
*                                                               03S0474
* OPERATION-IN ORDER TO REMAIN TABLE DRIVEN, THIS SUBROUTINE IS 03S0474
*           DEPENDENT UPON POSITIONAL PLACEMENT OF BITS WITHIN THE
*           SCE MODE BYTES.                                     03S0474
*           SAME TECHNIQUE AS ERRTYPE (IE. LOAD A REGISTER, SHIFT IT
*           THEN TEST FOR NEGATIVE.)                            03S0474
**********************************************************************/
*                                                               03S0474
*                           CALL MAKELINE;/* GET TO NEXT MLWTO LINE  */
         BAL   @14,MAKELINE                                     03S0474
*                           NEWLINE=OFF;/* TURN IT OFF FOR SCVA PROCS*/
         NI    NEWLINE,B'11111110'                              03S0475
*                           WPTR->WMODEQ=MODEQ;/* PUT IN MODE=       */
         L     @10,WPTR                                         03S0476
         MVC   WMODEQ(5,@10),MODEQ                              03S0476
*                           WPTR=WPTR+LENGTH(WMODEQ);/* GET TO  03S0477
*                                      VARIABLE AREA                 */
         AL    @10,@CF00117                                     03S0477
         ST    @10,WPTR                                         03S0477
*                           IF SCEEVERY=YES THEN/* EVERY,            */
         TM    SCEEVERY(SCEPTR),B'00100000'                     03S0478
         BNO   @RF00478                                         03S0478
*                             DO;   /* YES, PUT IT IN THE MSG.       */
*                               WPTR->WEVERY=EVERY;/* NOW ITS   03S0480
*                                      'MODE=EVERY,'.                */
         MVC   WEVERY(6,@10),EVERY                              03S0480
*                               WPTR=WPTR+LENGTH(WEVERY);/* GET TO
*                                      NEXT PART.                    */
         AL    @10,@CF00119                                     03S0481
         ST    @10,WPTR                                         03S0481
*                             END;  /* END PUT IN EVERY.             */
*                           ELSE    /* NOT EVERY,                    */
*                             DO;   /* ITS ANY                       */
         B     @RC00478                                         03S0483
@RF00478 DS    0H                                               03S0484
*                               WPTR->WANY=ANY;/* NOW ITS'MODE=ANY,' */
         L     @10,WPTR                                         03S0484
         MVC   WANY(4,@10),ANY                                  03S0484
*                               WPTR=WPTR+LENGTH(WANY);/* GET TO NEXT
*                                      SLOT.                         */
         AL    @10,@CF00053                                     03S0485
         ST    @10,WPTR                                         03S0485
*                             END;  /* END PUT IN ANY.               */
*                           RFY                                 03S0487
*                             SHIFTER RSTD;/* NEED A REG.            */
@RC00478 DS    0H                                               03S0488
*                           SHIFTER=0;                          03S0488
         SLR   SHIFTER,SHIFTER                                  03S0488
*                           RFY                                 03S0489
*                             R1 RSTD;                          03S0489
*                           R1=SCEPTR;/* ICM BASE REG.               */
         LR    R1,SCEPTR                                        03S0490
*                           GEN REFS(SCESUPR,SCEDIS,SCEGLSP,SCEGLSD,
*                               SCELLOC,SCETYP1,SCESRB,SCETCB,SCERECV,
*                               SCEPP,SCESUPER,SCESKEY,SCEPKEY,SCEGLOC,
*                               SCELOCK,SCEMODE,SCEMODE1,SCEMODE2)
*                               (ICM   SHIFTER,12,SCEMODE(R1));/* GET
*                                      MODES FOR SHIFT               */
         ICM   SHIFTER,12,SCEMODE(R1)
*                           RFY                                 03S0492
*                             R1 UNRSTD;                        03S0492
*                           DO MCTR=1 TO ALLMODES;/* DO ALL MODES    */
         LA    MCTR,1                                           03S0493
@DL00493 DS    0H                                               03S0494
*                             IF SHIFTER<0 THEN/* IS THIS MODE  03S0494
*                                      SELECTED                      */
         SLR   @10,@10                                          03S0494
         CR    SHIFTER,@10                                      03S0494
         BNL   @RF00494                                         03S0494
*                               DO; /* YES PUT IT IN THE LINE        */
*                                 WPTR->WMODE=MODE(MCTR);/* GET MODE
*                                      FROM LIST.                    */
         L     @06,WPTR                                         03S0496
         LR    @04,MCTR                                         03S0496
         MH    @04,@CH00032                                     03S0496
         LA    @01,MODE-7(@04)                                  03S0496
         MVC   WMODE(7,@06),0(@01)                              03S0496
*                                 WPTR=WPTR+MLN(MCTR);/* UPDATE MODE
*                                      LENGTH                        */
         SLR   @04,@04                                          03S0497
         IC    @04,MLN-1(MCTR)                                  03S0497
         ALR   @06,@04                                          03S0497
         ST    @06,WPTR                                         03S0497
*                                 IF NEWLINE=NO&WPTR-ADDR(WPLMLTXT)>
*                                     MAXMODE&SHIFTER^=0 THEN   03S0498
         TM    NEWLINE,B'00000001'                              03S0498
         BNZ   @RF00498                                         03S0498
         L     @04,WPLPTR                                       03S0498
         LA    @15,WPLMLTXT(,@04)                               03S0498
         LR    @14,@06                                          03S0498
         SLR   @14,@15                                          03S0498
         C     @14,@CF00216                                     03S0498
         BNH   @RF00498                                         03S0498
         CR    SHIFTER,@10                                      03S0498
         BE    @RF00498                                         03S0498
*                                   DO;/* A NEW LINE IF MORE MODES.  */
*                                    WPLMLLEN=WPLMLLEN+WPTR-ADDR(
*                                        WPLMLTXT);/* GET LINE LENGTH*/
         SLR   @10,@10                                          03S0500
         IC    @10,WPLMLLEN(,@04)                               03S0500
         ALR   @06,@10                                          03S0500
         SLR   @06,@15                                          03S0500
         STC   @06,WPLMLLEN(,@04)                               03S0500
*                                    CALL MAKELINE;/* GET A NEWLINE. */
         BAL   @14,MAKELINE                                     03S0501
*                                    WPTR=WPTR+LENGTH(MODEQ);/* START
*                                      OF TEXT                       */
         LA    @10,5                                            03S0502
         AL    @10,WPTR                                         03S0502
         ST    @10,WPTR                                         03S0502
*                                   END;/* END NEW LINE.             */
*                                 ELSE                          03S0504
*                                   ;/* NO NEW LINE NEEDED.          */
@RF00498 DS    0H                                               03S0505
*                               END;/* END MODE SPECIFIED.           */
*                             ELSE                              03S0506
*                               ;   /* NO MODE SPECIFIED.            */
@RF00494 DS    0H                                               03S0507
*                             SLL(SHIFTER,1);/* GET TO NEXT MODE.    */
         SLL   SHIFTER,1                                        03S0507
*                           END;    /* END ALL MODES.                */
         AL    MCTR,@CF00040                                    03S0508
         C     MCTR,@CF00149                                    03S0508
         BNH   @DL00493                                         03S0508
*                           NEWLINE=OFF;/* TURN OFF NEW LINE    03S0509
*                                      INDICATOR                     */
         NI    NEWLINE,B'11111110'                              03S0509
*                           RFY                                 03S0510
*                             SHIFTER UNRSTD;/* FREE UP REG.         */
*                           WPLMLLEN=WPLMLLEN+WPTR-ADDR(WPLMLTXT)-1;
         L     @10,WPLPTR                                       03S0511
         SLR   @06,@06                                          03S0511
         IC    @06,WPLMLLEN(,@10)                               03S0511
         AL    @06,WPTR                                         03S0511
         LA    @04,WPLMLTXT(,@10)                               03S0511
         SLR   @06,@04                                          03S0511
         BCTR  @06,0                                            03S0511
         STC   @06,WPLMLLEN(,@10)                               03S0511
*                                   /* LENTH LESS COMMA.             */
*                           WPLMLLTC=ON;/* THIS IS A DATA LINE.      */
         OI    WPLMLLTC(@10),B'00100000'                        03S0512
*                           LINPTR->LINENUM=LINPTR->LINENUM+1;/*
*                                      UPDATE MLWTO LINE COUNT.      */
         LA    @10,1                                            03S0513
         SLR   @06,@06                                          03S0513
         IC    @06,LINENUM(,LINPTR)                             03S0513
         ALR   @10,@06                                          03S0513
         STC   @10,LINENUM(,LINPTR)                             03S0513
*                           IF SCESCVA^=0 THEN/* ANY OPTIONAL   02S0514
*                                      KEYWORDS?                     */
         L     @10,SCESCVA(,SCEPTR)                             02S0514
         LTR   @10,@10                                          02S0514
         BZ    @RF00514                                         02S0514
*                             DO;   /* YES, WHAT ARE THEY            */
*                               CALL MAKELINE;/* SETUP NEW LINE.     */
         BAL   @14,MAKELINE                                     02S0516
*                               SCVAPTR=SCESCVA+LENGTH(SCVAHDR);/*
*                                      GET 1ST ENTRY                 */
         LA    SCVAPTR,8                                        02S0517
         AL    SCVAPTR,SCESCVA(,SCEPTR)                         02S0517
*                               DO WHILE(SCVAPTR->SID^=1/* DO ALL
*                                      OPTIONAL KEYWORDS AS          */
*                                     &WTOERR=NO);/* LONG AS WTO IS
*                                      OK                            */
         B     @DE00518                                         02S0518
@DL00518 DS    0H                                               02S0519
*                                 IF SCVAPTR->SID=SCVIDCC THEN/*
*                                      COMPLETION CODE KEYWORD?      */
         CLI   SID(SCVAPTR),2                                   02S0519
         BNE   @RF00519                                         02S0519
*                                   CALL COMPCASE;/* COMP SUBCASE.   */
         BAL   @14,COMPCASE                                     02S0520
*                                 ELSE                          02S0521
*                                   IF SCVAPTR->SID=SCVIDAS THEN/*
*                                      ASID OPTION?                  */
         B     @RC00519                                         02S0521
@RF00519 CLI   SID(SCVAPTR),3                                   02S0521
         BNE   @RF00521                                         02S0521
*                                    CALL ASIDCASE;/* GET ASID INFO. */
         BAL   @14,ASIDCASE                                     02S0522
*                                   ELSE                        02S0523
*                                    IF SCVAPTR->SID=SCVIDJN/*  02S0523
*                                      JOBNAME OR                    */
*                                        ×SCVAPTR->SID=SCVIDJS THEN/*
*                                      JSPGM?                        */
         B     @RC00521                                         02S0523
@RF00521 CLI   SID(SCVAPTR),4                                   02S0523
         BE    @RT00523                                         02S0523
         CLI   SID(SCVAPTR),5                                   02S0523
         BNE   @RF00523                                         02S0523
@RT00523 DS    0H                                               02S0524
*                                     CALL JOBNCASE;/* GET JOBNAME
*                                      INFO.                         */
         BAL   @14,JOBNCASE                                     02S0524
*                                    ELSE                       02S0525
*                                     IF SCVAPTR->SID=SCVIDPVT/* PVT
*                                      MOD OR                        */
*                                         ×SCVAPTR->SID=SCVIDLPA THEN
         B     @RC00523                                         02S0525
@RF00523 CLI   SID(SCVAPTR),6                                   02S0525
         BE    @RT00525                                         02S0525
         CLI   SID(SCVAPTR),7                                   02S0525
         BNE   @RF00525                                         02S0525
@RT00525 DS    0H                                               02S0526
*                                      /* LPAMOD?                    */
*                                      CALL LMODCASE;/* LMOD DOES LPA
*                                      AND PRIVATE MOD.              */
         BAL   @14,LMODCASE                                     02S0526
*                                     ELSE                      02S0527
*                                      IF SCVAPTR->SID=SCVIDAD THEN/*
*                                      ADDR?                         */
         B     @RC00525                                         02S0527
@RF00525 CLI   SID(SCVAPTR),8                                   02S0527
         BNE   @RF00527                                         02S0527
*                                       CALL ADDRCASE;/* GET ADDRESS
*                                      VALUES.                       */
         BAL   @14,ADDRCASE                                     02S0528
*                                      ELSE/* NOT A VALID ID.        */
*                                       IF SCVAPTR->SID=0 THEN/* IS
*                                      IT A ZERO ENTRY ?             */
         B     @RC00527                                         02S0529
@RF00527 CLI   SID(SCVAPTR),0                                   02S0529
         BNE   @RF00529                                         02S0529
*                                        SCVAPTR=SCVAPTR+SCVAPTR->SOFF;
         SLR   @10,@10                                          02S0530
         IC    @10,SOFF(,SCVAPTR)                               02S0530
         ALR   SCVAPTR,@10                                      02S0530
*                                   /* GET TO NEXT ENTRY.            */
*                                       ELSE                    02S0531
*                                        ;/* NOT A VALID ENTRY MUST
*                                      BE 1.                         */
@RF00529 DS    0H                                               02S0532
*                               END;/* END SCVA PROCESSING           */
@RC00527 DS    0H                                               02S0532
@RC00525 DS    0H                                               02S0532
@RC00523 DS    0H                                               02S0532
@RC00521 DS    0H                                               02S0532
@RC00519 DS    0H                                               02S0532
@DE00518 CLI   SID(SCVAPTR),1                                   02S0532
         BE    @DC00518                                         02S0532
         TM    WTOERR,B'00001000'                               02S0532
         BZ    @DL00518                                         02S0532
@DC00518 DS    0H                                               02S0533
*                             END;  /* END OPTIONAL KEYWORDS         */
*                           ELSE                                02S0534
*                             ;     /* NO OPTIONAL KEYWORDS          */
@RF00514 DS    0H                                               02S0535
*                           WPLMLLTC=ON;/* DATA LINE.                */
*                           WPLMLLTD=ON;/* END LINE FOR DISPLAY      */
         L     @10,WPLPTR                                       02S0536
         OI    WPLMLLTC(@10),B'00110000'                        02S0536
*                           RFY                                 02S0537
*                            (R0,                               02S0537
*                             R1,                               02S0537
*                             R15) RSTD;                        02S0537
*                           R0=SAVEIDS;/* GET CONSOLE ID             */
         ICM   R0,15,SAVEIDS                                    02S0538
*                           R1=ADDR(WTOAREA);/* ADDRESS WHOLE DISPLAY*/
         LA    R1,WTOAREA                                       02S0539
*                           GEN(WTO MF=(E,(1)));/* WRITE DISPLAY
*                                      SINGLE                        */
         WTO MF=(E,(1))
*                           IF R15^=0 THEN/* WTO WITHOUT ERROR ?     */
         LTR   R15,R15                                          02S0541
         BZ    @RF00541                                         02S0541
*                             WTOERR=ON;/* NO. NEED RETURN CODE=4.   */
         OI    WTOERR,B'00001000'                               02S0542
*                           RFY                                 02S0543
*                            (R0,                               02S0543
*                             R1,                               02S0543
*                             R15) UNRSTD;                      02S0543
@RF00541 DS    0H                                               02S0544
*                         END;      /* END TRAP ID FOUND             */
*                       ELSE        /* DIDN'T FIND THE SCE WITH ID   */
*                         CALL IEECB908(M731,CHUCMP,CHBUF(6:6),0,0,0);
         B     @RC00403                                         02S0545
@RF00403 MVC   @AL00001(24),@AL00545                            02S0545
         LA    @10,CHUCMP(,CSCBPTR)                             02S0545
         ST    @10,@AL00001+4                                   02S0545
         LA    @10,CHBUF+5(,CSCBPTR)                            02S0545
         ST    @10,@AL00001+8                                   02S0545
         L     @15,@CV00359                                     02S0545
         LA    @01,@AL00001                                     02S0545
         BALR  @14,@15                                          02S0545
*                                   /* TRAP WITH SPECIFIED ID DOES
*                                      NOT EXIST                     */
*                     END;          /* END DISPLAY SINGLE.           */
*                   ELSE            /* ITS A PARAMETER ERROR,        */
*                     DO;           /* WRITE AN ERROR MSG            */
         B     @RC00391                                         01S0547
@RF00391 DS    0H                                               01S0548
*                                                               02S0548
*/********************************************************************
*                                                               02S0548
* PARMERR-CALLS SVC 34 MSG MODULE IEE0503D TO WRITE ERROR MSG 308I.
*                                                               02S0548
*   OPERATION-SET UP XSA                                        02S0548
*             LOAD IEE0503D                                     02S0548
*             BALR TO IEE0503D FOR MSG                          02S0548
*                                                               02S0548
**********************************************************************/
*                                                               02S0548
*                       RFY                                     02S0548
*                         XSAPTR RSTD;                          02S0548
*                       XSAPTR=ADDR(XSAREA);/* GET TO XSA.           */
         LA    XSAPTR,XSAREA                                    02S0549
*                       XAE=MSG308; /* MESSAGE NUMBER                */
         IC    @10,MSG308                                       02S0550
         STC   @10,XAE(,XSAPTR)                                 02S0550
*                       XAV=DSLIP;  /* DISPLAY                       */
         MVC   XAV(8,XSAPTR),DSLIP                              02S0551
*                       XAU=CHUCMP;                             02S0552
         MVC   XAU(1,XSAPTR),CHUCMP(CSCBPTR)                    02S0552
*                       XAA=0;                                  02S0553
         SLR   @10,@10                                          02S0553
         STH   @10,XAA(,XSAPTR)                                 02S0553
*                       GEN REFS(R0,R1,R14,R15) SETS(R0,R1,R3,R4,R5);
         LOAD  EP=IEE0503D             GET MSG MOD ADDRESS
         LR    R15,R0                  IEE0503D ENTRY POINT
         BALR  R14,R15                 USE 0503D TO WRITE MSG 308I
         DELETE EP=IEE0503D            DECR.MSG MOD USE CNT
*                       RFY                                     02S0555
*                         XSAPTR UNRSTD;/* FREE REG.                 */
*                     END;          /* END PARMERROR                 */
*                 END;              /* END DISPLY WITH PARAMETER     */
*             END;                  /* END DISPLAY OK                */
*           ELSE                                                01S0559
*             ;                     /* SLIP INACTIVE OR SERIALIZED   */
@RF00309 DS    0H                                               01S0560
*         END;                      /* END ESTAE OR,COMMAND CONTINUES*/
*       ELSE                        /* COULDN'T ESTAE.               */
*         GEN(ABEND 102);           /* WRITE MSG FROM CB860.         */
         B     @RC00255                                         01S0561
@RF00255 DS    0H                                               01S0561
         ABEND 102
*     END;                          /* END CB860 OK COMMAND CONTINUES*/
*   ELSE                                                        01S0563
*     ;                             /* CB860, NO ESTAE               */
@RF00242 DS    0H                                               01S0564
*   IF INSCE=NO THEN                /* D SLIP ?                      */
@RC00242 TM    INSCE,B'00100000'                                01S0564
         BNZ   @RF00564                                         01S0564
*     DO;                           /* YES, CLEANUP.                 */
*       IF SESTSEQ=YES THEN         /* GET SCE CHAIN?                */
         LA    @10,ESTA906                                      01S0566
         TM    SESTSEQ(@10),B'00100000'                         01S0566
         BNO   @RF00566                                         01S0566
*         SHDRSEQ=0;                /* YES, DESERIALIZE.             */
         L     @10,CVTPTR                                       01S0567
         L     @10,CVTRTMS(,@10)                                01S0567
         MVI   SHDRSEQ(@10),X'00'                               01S0567
*       CHFC=ON;                    /* INDICATE FREE THIS CSCB.      */
@RF00566 OI    CHFC(CSCBPTR),B'00000010'                        01S0568
*       RFY                                                     01S0569
*        (R1,                                                   01S0569
*         R14) RSTD;                                            01S0569
*       R1=CSCBPTR;                 /* GET CSCB ADDR.                */
         LR    R1,CSCBPTR                                       01S0570
*       GEN(MGCR (1),CHAIN);        /* FREE THE CSCB.                */
         MGCR (1),CHAIN
*       GEN SETS(R0,R1,R14,R15)(DELETE EP=IEECB860);            01S0572
         DELETE EP=IEECB860
*     END;                          /* END D SLIP CLEANUP.           */
*   GEN REFS(REGS16,REGS89);                                    01S0574
@RF00564 DS    0H                                               01S0574
           LM   R1,R6,REGS16        RESTORE CALLERS REGS 1-6
           LM   R8,R9,REGS89        RESTORE CALLERS REGS 8 AND 9
*   R14=SAVRTN;                     /* GET RETURN ADDRESS            */
         L     R14,SAVRTN                                       01S0575
*   IF WTOERR=YES THEN              /* WTO ERROR ?                   */
         TM    WTOERR,B'00001000'                               01S0576
         BNO   @RF00576                                         01S0576
*     RETURN CODE(4);               /* YES SET RETURN CODE.          */
         L     @13,4(,@13)                                      01S0577
         L     @00,@SIZDATD                                     01S0577
         LR    @01,@11                                          01S0577
         FREEMAIN R,LV=(0),A=(1)
         LA    @15,4                                            01S0577
         BR    @14                                              01S0577
*   ELSE                            /* NO ERROR.                     */
*     RETURN CODE(0);               /* RETURN,END OF TASK            */
@RF00576 L     @13,4(,@13)                                      01S0578
         L     @00,@SIZDATD                                     01S0578
         LR    @01,@11                                          01S0578
         FREEMAIN R,LV=(0),A=(1)
         SLR   @15,@15                                          01S0578
         BR    @14                                              01S0578
*   RFY                                                         01S0579
*    (R1,                                                       01S0579
*     R14) UNRSTD;                                              01S0579
*                                                               02S0580
*/********************************************************************
*                                                               02S0580
* SETCNTRL- AN INTERNAL PROCEDURE THAT CLEARS THE WTO WORK AREA AND
*           SETS UP THE IEE735I CONTROL LINE.                   02S0580
*                                                               02S0580
*   OPERATION- CLEAR WTO WORK AREA                              02S0580
*              SAVE CONSOLE ID                                  02S0580
*              CLEAR MLWTO ID                                   02S0580
*              SET MCS FLAGS                                    02S0580
*              SET CONTROL TEXT                                 02S0580
*              SET ROUTE AND DESCRIPTOR CODES                   02S0580
*              SET MLWTO LINE COUNTER ADDRESS                   02S0580
*                                                               02S0580
**********************************************************************/
*                                                               02S0580
*SETCNTRL:                                                      02S0580
*   PROC;                                                       02S0580
@EL00001 L     @13,4(,@13)                                      02S0580
@EF00001 L     @00,@SIZDATD                                     02S0580
         LR    @01,@11                                          02S0580
         FREEMAIN R,LV=(0),A=(1)
@ER00001 BR    @14                                              02S0580
SETCNTRL STM   @14,@08,@SA00002                                 02S0580
         STM   @10,@12,@SA00002+44                              02S0580
*   WTOA1=WTOA1&&WTOA1;             /* CLEAR WTO AREA                */
         XC    WTOA1(256),WTOA1                                 02S0581
*   WTOA2=WTOA2&&WTOA2;             /* SO ERRONEOUS FLAGS            */
         XC    WTOA2(256),WTOA2                                 02S0582
*   WTOA3=WTOA3&&WTOA3;             /* AREN'T SET.                   */
         XC    WTOA3(256),WTOA3                                 02S0583
*   SAVEIDS=SAVEIDS&&SAVEIDS;       /* CLEAR ID(MLWTO+CONSOLE)       */
         XC    SAVEIDS(4),SAVEIDS                               02S0584
*   WPLPTR=ADDR(WTOAREA);           /* START AT THE BEGINNING        */
         LA    @10,WTOAREA                                      02S0585
         ST    @10,WPLPTR                                       02S0585
*   WPLMCSFA=ON;                    /* ROUTE+DESC CODES PRESENT      */
*   WPLMCSFB=ON;                    /* QUEUE TO CONSOLE              */
*   WPLMCSFC=ON;                    /* COMMAND RESPONSE.             */
         OI    WPLMCSFA(@10),B'11100000'                        02S0588
*   WPLMCSFJ=ON;                    /* THIS IS A MLWTO               */
         OI    WPLMCSFJ(@10),B'01000000'                        02S0589
*   IF INSCE=NO THEN                /* IS IT D SLIP ?                */
         TM    INSCE,B'00100000'                                02S0590
         BNZ   @RF00590                                         02S0590
*     DO;                           /* SET DSLIP CONTROL LINE.       */
*       WPLTXT(1:LENGTH(CNTRL))=CNTRL;/* PUT CONTROL LINE IN WTO     */
         MVC   WPLTXT(29,@10),CNTRL                             02S0592
*       GEN SETS(R0,R1,R14,R15)(TIME DEC,ERRET=TIMERR);/* GET TIME OF
*                                      DAY.                          */
         TIME DEC,ERRET=TIMERR
*       RFY                                                     02S0594
*         R0 RSTD;                                              02S0594
*       SAVTIME=R0;                 /* SAVE TIME FOR UNPK.           */
         STCM  R0,15,SAVTIME                                    02S0595
*       RFY                                                     02S0596
*         R0 UNRSTD;                                            02S0596
*       UNPK(UNPKAREA,SAVTIME);     /* MAKE TIME PRINTABLE.          */
         UNPK  UNPKAREA(10),SAVTIME(4)                          02S0597
*       WPTR=ADDR(WPLTXT);          /* GET TO TEXT.                  */
         L     @10,WPLPTR                                       02S0598
         LA    @10,WPLTXT(,@10)                                 02S0598
         ST    @10,WPTR                                         02S0598
*       HRS(1:2)=UNPKAREA(HR1:HR2); /* MOVE IN HOURS.                */
         MVC   HRS(2,@10),UNPKAREA+3                            02S0599
*       MINS(1:2)=UNPKAREA(MIN1:MIN2);/* MOVE IN MINUTES.            */
         MVC   MINS(2,@10),UNPKAREA+5                           02S0600
*       SECS(1:2)=UNPKAREA(SEC1:SEC2);/* MOVE IN SECONDS.            */
         MVC   SECS(2,@10),UNPKAREA+7                           02S0601
*TIMERR:                                                        02S0602
*       ;                           /* TIMER IS BROKEN. LEAVE 0S IN
*                                      MSG.                          */
TIMERR   DS    0H                                               02S0603
*       WPLLGH=LENGTH(CNTRL)+4;     /* LENGTH OF TXT PLUS WTO INFO   */
         L     @10,WPLPTR                                       02S0603
         MVC   WPLLGH(2,@10),@CH01928                           02S0603
*     END;                          /* END D SLIP CNTRL LINE.        */
*   ELSE                            /* SCE INPUT CALL.               */
*     DO;                           /* SET SLIP PARMS CONTROL LINE.  */
         B     @RC00590                                         02S0605
@RF00590 DS    0H                                               02S0606
*       WPLTXT(1:LENGTH(PCNTRL))=PCNTRL;/* PUT CONTROL LINE IN WTO   */
         L     @10,WPLPTR                                       02S0606
         MVC   WPLTXT(28,@10),PCNTRL                            02S0606
*       WPLLGH=LENGTH(PCNTRL)+4;    /* LENGTH OF TXT PLUS WTO INFO   */
         MVC   WPLLGH(2,@10),@CH00275                           02S0607
*     END;                          /* END SLIP PARM CNTRL.          */
*   WPLPTR=WPLPTR+WPLLGH;           /* GET TO ROUTE&DESCRIPTORS      */
@RC00590 L     @10,WPLPTR                                       02S0609
         LH    @09,WPLLGH(,@10)                                 02S0609
         ALR   @09,@10                                          02S0609
         ST    @09,WPLPTR                                       02S0609
*   WPLDESCE=ON;                    /* COMMAND RESPONSE              */
         OI    WPLDESCE(@09),B'00001000'                        02S0610
*   IF INSCE=NO THEN                /* COMMAND INPUT ?               */
         TM    INSCE,B'00100000'                                02S0611
         BNZ   @RF00611                                         02S0611
*     DO;                           /* YES. NEED DESC 8 AND 9.       */
*       WPLDESCH=ON;                /* OUT OF LINE                   */
         OI    WPLDESCH(@09),B'00000001'                        02S0613
*       WPLDESCI=ON;                /* OPERATOR REQUESTED INFO       */
         OI    WPLDESCI(@09),B'10000000'                        02S0614
*     END;                          /* END COMMAND DESC. CODES.      */
*   WPLPTR=WPLPTR+4;                /* LENGTH OF ROUT&DESC. FIELD    */
@RF00611 LA    @10,4                                            02S0616
         AL    @10,WPLPTR                                       02S0616
         ST    @10,WPLPTR                                       02S0616
*   WPLLTFA=ON;                     /* ITS A CONTROL LINE            */
         OI    WPLLTFA(@10),B'10000000'                         02S0617
*   LINPTR=ADDR(WPLLINES);          /* GET PTR TO                    */
         LA    LINPTR,WPLLINES(,@10)                            02S0618
*   LINPTR->LINENUM=1;              /* NUMBER LINES SO FAR           */
         MVI   LINENUM(LINPTR),X'01'                            02S0619
*   IF INSCE=NO THEN                /* COMMAND INPUT ?               */
         TM    INSCE,B'00100000'                                02S0620
         BNZ   @RF00620                                         02S0620
*     DO;                           /* YES. WTO DATA FROM CSCB.      */
*       SAVCID=CHCNID;              /* SAVE TARGET CONSOLE           */
         MVC   SAVCID(1),CHCNID(CSCBPTR)                        02S0622
*       WPLAREA=CHARID;             /* PUT IN AREA ID                */
         MVC   WPLAREA(1,@10),CHARID(CSCBPTR)                   02S0623
*     END;                          /* END WTO DATA FROM CSCB.       */
*   ELSE                            /* NO, ITS SCE INPUT.            */
*     SAVCID=SCEUCMP;               /* GET CONSOLE ID FROM SCE.      */
         B     @RC00620                                         02S0625
@RF00620 MVC   SAVCID(1),SCEUCMP(SCEPTR)                        02S0625
*   WPLPTR=WPLPTR+4;                /* GET NEXT LINE                 */
@RC00620 LA    @10,4                                            02S0626
         AL    @10,WPLPTR                                       02S0626
         ST    @10,WPLPTR                                       02S0626
*   END SETCNTRL;                   /* END SETTING CONTROL LINE      */
@EL00002 DS    0H                                               02S0627
@EF00002 DS    0H                                               02S0627
@ER00002 LM    @14,@08,@SA00002                                 02S0627
         LM    @10,@12,@SA00002+44                              02S0627
         BR    @14                                              02S0627
*                                                               02S0628
*/********************************************************************
*                                                               02S0628
* MAKELINE-THIS SUBROUTINE IS CALLED TO BUILD A NEW LINE AND COMPLETE
*          WTO DATA FOR THE CURRENT LINE. NEW LINES ARE CREATED WHEN
*          A SEGMENT IS INVOKED FOR AN OPTIONAL KEYWORD AND THAT DATA
*          WILL NOT FIT ON THE CURRENT LINE.                    02S0628
*                                                               02S0628
*    OPERATION-SET WTO INDICATORS                               02S0628
*              UPDATE LINE NUMBER TO CURRENT TOTAL              02S0628
*              SETUP INTERNAL INDICATORS(NEW LINE + WORK PTR.)  02S0628
*                                                               02S0628
******************************************************************** */
*                                                               02S0628
*MAKELINE:                                                      02S0628
*   PROC;                                                       02S0628
MAKELINE STM   @14,@12,12(@13)                                  02S0628
*   WPLMLLTC=ON;                    /* INDICATE DATA LINE.           */
         L     @10,WPLPTR                                       02S0629
         OI    WPLMLLTC(@10),B'00100000'                        02S0629
*   LINPTR->LINENUM=LINPTR->LINENUM+1;/* UPDATE MLWTO LINE #.        */
         LA    @08,1                                            02S0630
         SLR   @06,@06                                          02S0630
         IC    @06,LINENUM(,LINPTR)                             02S0630
         ALR   @08,@06                                          02S0630
         STC   @08,LINENUM(,LINPTR)                             02S0630
*   WPLPTR=WPLPTR+WPLMLLEN;         /* GET TO NEXT SLOT IN WTO AREA. */
         SLR   @08,@08                                          02S0631
         IC    @08,WPLMLLEN(,@10)                               02S0631
         ALR   @08,@10                                          02S0631
         ST    @08,WPLPTR                                       02S0631
*   WPLMLTXT='';                    /* BLANK OUT TEXT.               */
         MVI   WPLMLTXT(@08),C' '                               02S0632
         MVC   WPLMLTXT+1(125,@08),WPLMLTXT(@08)                02S0632
*   WPLML0=0;                       /* ZERO HI ORDER BYTE OF LENGTH. */
         MVI   WPLML0(@08),X'00'                                02S0633
*   WPLMLLEN=4;                     /* WTO LENGTH                    */
         MVI   WPLMLLEN(@08),X'04'                              02S0634
*   WPLMLLTF=0;                     /* ZERO LINE TYPE FLAGS.         */
         SLR   @10,@10                                          02S0635
         STH   @10,WPLMLLTF(,@08)                               02S0635
*   NEWLINE=ON;                     /* NEW LINE CREATED.             */
         OI    NEWLINE,B'00000001'                              02S0636
*   WPTR=ADDR(WPLMLTXT);            /* GET WORK POINTER.             */
         LA    @10,WPLMLTXT(,@08)                               02S0637
         ST    @10,WPTR                                         02S0637
*   END MAKELINE;                                               02S0638
@EL00003 DS    0H                                               02S0638
@EF00003 DS    0H                                               02S0638
@ER00003 LM    @14,@12,12(@13)                                  02S0638
         BR    @14                                              02S0638
*                                                               02S0639
*/*********************************************************************
*                                                               02S0639
* COMP-THIS CASE PROCESSES THE COMPLETION CODE FIELD FOR DISPLAYING
*      THE USER OR SYSTEM CODE SPECIFIED ON THE SLIP COMMAND.   02S0639
*                                                               02S0639
*   OPERATION-USE MAKELINE SUBROUTINE.                          02S0639
*             DETERMINE USER OR SYSTEM CODE                     02S0639
*             UNPACK THE CODE.                                  02S0639
*             PUT IN X'S IF SPECIFIED ON SLIP COMMAND.          02S0639
*                                                               02S0639
**********************************************************************/
*                                                               02S0639
*COMPCASE:                                                      02S0639
*   PROC;                                                       02S0639
COMPCASE STM   @14,@01,@SA00004                                 02S0639
         STM   @03,@12,@SA00004+16                              02S0639
*   IF WPLMLLEN+COMPLN>MAXLNTH THEN /* IF COMP WON'T FIT ON LINE     */
         LA    @10,10                                           02S0640
         L     @08,WPLPTR                                       02S0640
         SLR   @06,@06                                          02S0640
         IC    @06,WPLMLLEN(,@08)                               02S0640
         ALR   @10,@06                                          02S0640
         C     @10,@CF00152                                     02S0640
         BNH   @RF00640                                         02S0640
*     CALL MAKELINE;                /* MAKE A NEW LINE               */
         BAL   @14,MAKELINE                                     02S0641
*   ELSE                                                        02S0642
*     ;                             /* IT WILL FIT.                  */
@RF00640 DS    0H                                               02S0643
*   SAVWPTR=WPTR;                   /* SAVE PTR FOR LENGTH UPDATE    */
         L     @10,WPTR                                         02S0643
         ST    @10,SAVWPTR                                      02S0643
*   IF NEWLINE^=YES THEN            /* IF ITS NOT A NEW LINE         */
         TM    NEWLINE,B'00000001'                              02S0644
         BO    @RF00644                                         02S0644
*     DO;                           /* PUT IN A COMMA                */
*       WPTR->WCOMMA=COMMA;         /* PUT COMMA BEFORE COMP.        */
         MVC   WCOMMA(1,@10),COMMA                              02S0646
*       WPTR=WPTR+1;                /* UPDATE WORK POINTER           */
         AL    @10,@CF00040                                     02S0647
         ST    @10,WPTR                                         02S0647
*     END;                          /* END OLD LINE STUFF            */
*   ELSE                            /* ITS A NEW LINE,NO COMMA       */
*     NEWLINE=OFF;                  /* INDICATE OLD LINE             */
         B     @RC00644                                         02S0649
@RF00644 NI    NEWLINE,B'11111110'                              02S0649
*   WPTR->WCOMPEQ=UCOMP;            /* PUT IN COMP=U                 */
@RC00644 L     @10,WPTR                                         02S0650
         MVC   WCOMPEQ(6,@10),UCOMP                             02S0650
*   WPTR=WPTR+LENGTH(WCOMPEQ);      /* UPDATE TO NEXT FIELD          */
         AL    @10,@CF00119                                     02S0651
         ST    @10,WPTR                                         02S0651
*   IF SCVCCU=NO THEN               /* SYSTEM CODE ?                 */
         TM    SCVCCU(SCVAPTR),B'10000000'                      02S0652
         BNZ   @RF00652                                         02S0652
*     WPTR=WPTR-1;                  /* YES, OVERLAY THE U.           */
         BCTR  @10,0                                            02S0653
         ST    @10,WPTR                                         02S0653
*   UNPK(UNPKAREA,UNCOMP);          /* SET UP TO MAKE PRINTABLE      */
@RF00652 UNPK  UNPKAREA(10),UNCOMP(4,SCVAPTR)                   02S0654
*   IF SCVCCU=NO THEN               /* IS IT A SYSTEM CODE?          */
         TM    SCVCCU(SCVAPTR),B'10000000'                      02S0655
         BNZ   @RF00655                                         02S0655
*     DO PAKCTR=STRCOMP TO ENDCOMP; /* YES, MAKE IT PRINTABLE.       */
         LA    PAKCTR,5                                         02S0656
@DL00656 DS    0H                                               02S0657
*       IF WCHAR(PAKCTR)>F9 THEN    /* WCHAR IS DEFINED ON           */
         LA    @10,WCHAR-1(PAKCTR)                              02S0657
         CLC   0(1,@10),F9                                      02S0657
         BNH   @RF00657                                         02S0657
*         DO;                       /* UNPKAREA,DO HEX NUMBERS       */
*           HEXCTR=(WCHAR(PAKCTR)&ZEROFOX)-9;/* GET PROPER SLOT IN
*                                      TABLE                         */
         SLR   HEXCTR,HEXCTR                                    02S0659
         IC    HEXCTR,WCHAR-1(PAKCTR)                           02S0659
         SLR   @10,@10                                          02S0659
         IC    @10,ZEROFOX                                      02S0659
         NR    HEXCTR,@10                                       02S0659
         SL    HEXCTR,@CF00123                                  02S0659
*           WCHAR(PAKCTR)=HEXTABLE(HEXCTR);/* PUT IN HEX NUMBER      */
         LA    @10,WCHAR-1(PAKCTR)                              02S0660
         LA    @06,HEXTABLE-1(HEXCTR)                           02S0660
         MVC   0(1,@10),0(@06)                                  02S0660
*         END;                      /* END HEX NO. CONVERT           */
*     END;                          /* END SYSTEM CODE               */
@RF00657 AL    PAKCTR,@CF00040                                  02S0662
         C     PAKCTR,@CF00084                                  02S0662
         BNH   @DL00656                                         02S0662
*   IF SCVCCU=YES THEN              /* USER CODE IS FOUR BYTES.      */
@RF00655 TM    SCVCCU(SCVAPTR),B'10000000'                      02S0663
         BNO   @RF00663                                         02S0663
*     WPTR->WCOMP(1:4)=UNPKAREA(STRCOMP:ENDCOMP);/* MOVE CODE TO MSG.*/
         L     @10,WPTR                                         02S0664
         MVC   WCOMP(4,@10),UNPKAREA+4                          02S0664
*   ELSE                            /* NOT USER CODE,SYS CODE IS 3
*                                      BYTES.                        */
*     WPTR->WCOMP(1:3)=UNPKAREA(STRCOMP+1:ENDCOMP);/* CODE TO MSG.   */
         B     @RC00663                                         02S0665
@RF00663 L     @10,WPTR                                         02S0665
         MVC   WCOMP(3,@10),UNPKAREA+5                          02S0665
*   RFY                                                         02S0666
*     WORKREG RSTD;                 /* RESTRICT REG FOR SHIFT        */
@RC00663 DS    0H                                               02S0667
*   WORKREG=SCVCCM;                 /* GET THE X MASK                */
         SLR   WORKREG,WORKREG                                  02S0667
         ICM   WORKREG,7,SCVCCM(SCVAPTR)                        02S0667
*   IF SCVCCU=YES THEN              /* USER CODE HAS 12 BITS EXTRA.  */
         TM    SCVCCU(SCVAPTR),B'10000000'                      02S0668
         BNO   @RF00668                                         02S0668
*     SLL(WORKREG,12);              /* GET RID OF EXTRA BITS.        */
         SLL   WORKREG,12                                       02S0669
*   ELSE                            /* SYSTEM CODE HAS 16 BITS EXTRA.*/
*     SLL(WORKREG,16);              /* MOVE OUT EXTRA BITS.          */
         B     @RC00668                                         02S0670
@RF00668 SLL   WORKREG,16                                       02S0670
*   DO MASKCTR=1 TO 4;              /* DO 4 POSITIONS                */
@RC00668 LA    MASKCTR,1                                        02S0671
@DL00671 DS    0H                                               02S0672
*     IF WORKREG<0 THEN                                         02S0672
         LTR   WORKREG,WORKREG                                  02S0672
         BM    @RT00672                                         02S0672
*       ;                           /* REG IS NEG IF F IS PRESENT    */
*     ELSE                          /* NO F SO NEED AN X.            */
*       WPTR->WCOMP(MASKCTR:MASKCTR)=X;/* PUT X IF NO F IS IN MASK   */
         L     @10,WPTR                                         02S0674
         ALR   @10,MASKCTR                                      02S0674
         BCTR  @10,0                                            02S0674
         MVC   WCOMP(1,@10),X                                   02S0674
*     SLL(WORKREG,4);               /* GET NEXT F OR 0               */
@RT00672 SLL   WORKREG,4                                        02S0675
*   END;                            /* END X CHECK                   */
         AL    MASKCTR,@CF00040                                 02S0676
         C     MASKCTR,@CF00053                                 02S0676
         BNH   @DL00671                                         02S0676
*   IF SCVCCU=NO THEN               /* IS IT USER CODE?              */
         TM    SCVCCU(SCVAPTR),B'10000000'                      02S0677
         BNZ   @RF00677                                         02S0677
*     WPTR=WPTR+3;                  /* NO, SYSTEM CODE               */
         LA    @10,3                                            02S0678
         AL    @10,WPTR                                         02S0678
         ST    @10,WPTR                                         02S0678
*   ELSE                            /* USER CODE,                    */
*     WPTR=WPTR+4;                  /* GET NEXT SLOT IN MESSAGE      */
         B     @RC00677                                         02S0679
@RF00677 LA    @10,4                                            02S0679
         AL    @10,WPTR                                         02S0679
         ST    @10,WPTR                                         02S0679
*   WPLMLLEN=WPLMLLEN+(WPTR-SAVWPTR);/* UPDATE MSG LENGTH            */
@RC00677 L     @10,WPLPTR                                       02S0680
         L     @06,WPTR                                         02S0680
         SL    @06,SAVWPTR                                      02S0680
         SLR   @15,@15                                          02S0680
         IC    @15,WPLMLLEN(,@10)                               02S0680
         ALR   @06,@15                                          02S0680
         STC   @06,WPLMLLEN(,@10)                               02S0680
*   SCVAPTR=SCVAPTR+LENGTH(SCVACOMP);/* GET TO NEXT SCVA SLOT        */
         AL    SCVAPTR,@CF00084                                 02S0681
*   END COMPCASE;                                               02S0682
@EL00004 DS    0H                                               02S0682
@EF00004 DS    0H                                               02S0682
@ER00004 LM    @14,@01,@SA00004                                 02S0682
         LM    @03,@12,@SA00004+16                              02S0682
         BR    @14                                              02S0682
*                                                               02S0683
*/********************************************************************
*                                                               02S0683
* JOBN-PUT THE JOBNAME OR JOBSTEP PROGRAM NAME INTO THE MESSAGE.
*                                                               02S0683
*   OPERATION-USE MAKELINE TO SEE IF A NEW LINE IS REQUIRED.    02S0683
*             MOVE JOBNAME= OR JSPGM= TO THE MESSAGE AREA.      02S0683
*             PUT SPECIFIED NAME INTO MESSAGE.                  02S0683
*             TAKE OUT ANY BLANKS.                              02S0683
*                                                               02S0683
**********************************************************************/
*                                                               02S0683
*JOBNCASE:                                                      02S0683
*   PROC;                                                       02S0683
JOBNCASE STM   @14,@01,@SA00005                                 02S0683
         STM   @03,@12,@SA00005+16                              02S0683
*   IF WPLMLLEN+MAXJOBN>MAXLNTH THEN/* WILL JOBNAME FIT IN THIS      */
         LA    @10,17                                           02S0684
         L     @08,WPLPTR                                       02S0684
         SLR   @06,@06                                          02S0684
         IC    @06,WPLMLLEN(,@08)                               02S0684
         ALR   @10,@06                                          02S0684
         C     @10,@CF00152                                     02S0684
         BNH   @RF00684                                         02S0684
*     CALL MAKELINE;                /* LINE? IF NOT MAKE NEW LINE    */
         BAL   @14,MAKELINE                                     02S0685
*   SAVWPTR=WPTR;                   /* SAVE BEGINNING OF JOBNAME     */
@RF00684 L     @10,WPTR                                         02S0686
         ST    @10,SAVWPTR                                      02S0686
*   IF NEWLINE^=YES THEN            /* A NEW LINE CREATED?           */
         TM    NEWLINE,B'00000001'                              02S0687
         BO    @RF00687                                         02S0687
*     DO;                           /* NO, PUT IN COMMA              */
*       WPTR->WCOMMA=COMMA;         /* PREFIX JOBNAME WITH COMMA     */
         MVC   WCOMMA(1,@10),COMMA                              02S0689
*       WPTR=WPTR+1;                /* UPDATE PAST COMMA             */
         AL    @10,@CF00040                                     02S0690
         ST    @10,WPTR                                         02S0690
*     END;                          /* END OLD LINE                  */
*   ELSE                            /* ITS A NEW LINE                */
*     NEWLINE=OFF;                  /* NOW ITS OLD                   */
         B     @RC00687                                         02S0692
@RF00687 NI    NEWLINE,B'11111110'                              02S0692
*   IF SCVJNID=SCVIDJN THEN         /* IS IT JOBNAME?                */
@RC00687 CLI   SCVJNID(SCVAPTR),4                               02S0693
         BNE   @RF00693                                         02S0693
*     DO;                           /* YES                           */
*       WPTR->WJOBN=JOBNEQ;         /* PUT IN JOBNAME=               */
         L     @10,WPTR                                         02S0695
         MVC   WJOBN(8,@10),JOBNEQ                              02S0695
*       WPTR=WPTR+LENGTH(WJOBN);    /* UPDATE TO DATA PORTION        */
         AL    @10,@CF00084                                     02S0696
         ST    @10,WPTR                                         02S0696
*     END;                          /* END JOBNAME                   */
*   ELSE                            /* NOT JOBNAME ,                 */
*     DO;                           /* ITS JOBSTEP PROGRAM           */
         B     @RC00693                                         02S0698
@RF00693 DS    0H                                               02S0699
*       WPTR->WJSPGM=JSPGMEQ;       /* PUT IN JSPGM=                 */
         L     @10,WPTR                                         02S0699
         MVC   WJSPGM(6,@10),JSPGMEQ                            02S0699
*       WPTR=WPTR+LENGTH(WJSPGM);   /* UPDATE TO DATA PORTION        */
         AL    @10,@CF00119                                     02S0700
         ST    @10,WPTR                                         02S0700
*     END;                          /* END JSPGM=.                   */
*   WPTR->WJOBN=SCVJND;             /* PUT IN SPECIFIED JOBNAME.     */
@RC00693 L     @10,WPTR                                         02S0702
         MVC   WJOBN(8,@10),SCVJND(SCVAPTR)                     02S0702
*   DO BPTR=WPTR TO WPTR+8 WHILE(BPTR->WJOBN(1:1)^=' ');/* BLANK SCAN*/
         LR    BPTR,@10                                         02S0703
         B     @DE00703                                         02S0703
@DL00703 CLI   WJOBN(BPTR),C' '                                 02S0703
         BE    @DC00703                                         02S0703
*   END;                            /* END BLANK SCAN                */
         AL    BPTR,@CF00040                                    02S0704
@DE00703 LA    @10,8                                            02S0704
         AL    @10,WPTR                                         02S0704
         CR    BPTR,@10                                         02S0704
         BNH   @DL00703                                         02S0704
@DC00703 DS    0H                                               02S0705
*   WPTR=BPTR;                      /* GET PTR TO NEXT PART OF MSG
*                                      AREA                          */
         ST    BPTR,WPTR                                        02S0705
*   WPLMLLEN=WPLMLLEN+(WPTR-SAVWPTR);/* UPDATE MESSAGE LENGTH        */
         L     @10,WPLPTR                                       02S0706
         L     @06,WPTR                                         02S0706
         SL    @06,SAVWPTR                                      02S0706
         SLR   @15,@15                                          02S0706
         IC    @15,WPLMLLEN(,@10)                               02S0706
         ALR   @06,@15                                          02S0706
         STC   @06,WPLMLLEN(,@10)                               02S0706
*   SCVAPTR=SCVAPTR+LENGTH(SCVAJOBN);/* GET TO NEXT VARIABLE AREA    */
         AL    SCVAPTR,@CF00123                                 02S0707
*   END JOBNCASE;                                               02S0708
@EL00005 DS    0H                                               02S0708
@EF00005 DS    0H                                               02S0708
@ER00005 LM    @14,@01,@SA00005                                 02S0708
         LM    @03,@12,@SA00005+16                              02S0708
         BR    @14                                              02S0708
*                                                               02S0709
*/*********************************************************************
*                                                               02S0709
* LMOD- THIS CASE PUTS THE LPA OR PRIVATE MODULE NAME IN TO THE MESSAGE
*       THE OFFSETS ARE ALSO PLACED INTO THE MESSAGE.           02S0709
*                                                               02S0709
*  OPERATION-CALL MAKELINE IF NOT ENOUGH ROOM IN THIS LINE FOR  02S0709
*            MODULE NAME AND OFFSETS.                           02S0709
*            MOVE LPAMOD= OR PVTMOD= TO THE MESSAGE             02S0709
*            PUT SPECIFIED NAME IN THE MESSAGE                  02S0709
*            PUT OFFSETS INTO MESSAGE(IF LPAMOD THE OFFSETS MUST
*            BE COMPUTED BY LOADING THE MODULE AND SUBTRACTING THE
*            ENTRY POINT FROM THE ADDRESSES.                    02S0709
*                                                               02S0709
*            NOTE: IF OFFSET 2 IS 7FFFFFFF THEN A SLIP COMMAND WAS
*                  ENTERED WITH NO OFFSETS. THIS DISTINGUISHES  02S0709
*                  BETWEEN PVTMOD=NAME AND PVTMOD=(NAME,0).     02S0709
*                                                               02S0709
**********************************************************************/
*                                                               02S0709
*LMODCASE:                                                      02S0709
*   PROC;                                                       02S0709
LMODCASE STM   @14,@01,@SA00006                                 02S0709
         STM   @03,@12,@SA00006+16                              02S0709
*   IF SCVMDA1^=0×SCVMDA2^=REAL0 THEN/* ANY OFFSETS?                 */
         ICM   @10,15,SCVMDA1(SCVAPTR)                          02S0710
         BNZ   @RT00710                                         02S0710
         CLC   SCVMDA2(4,SCVAPTR),@CF00276                      02S0710
         BE    @RF00710                                         02S0710
@RT00710 DS    0H                                               02S0711
*     MODPART=MODLENTH+OFFLENTH;    /* YES, LENGTH INCLUDES OFFSET   */
         LA    MODPART,34                                       02S0711
*   ELSE                            /* NO OFFSETS                    */
*     MODPART=MODLENTH;             /* LENGTH FOR NAME ONLY          */
         B     @RC00710                                         02S0712
@RF00710 LA    MODPART,16                                       02S0712
*   IF WPLMLLEN+MODPART>MAXLNTH THEN/* WILL MOD STUFF FIT?           */
@RC00710 L     @10,WPLPTR                                       02S0713
         SLR   @08,@08                                          02S0713
         IC    @08,WPLMLLEN(,@10)                               02S0713
         ALR   @08,MODPART                                      02S0713
         C     @08,@CF00152                                     02S0713
         BNH   @RF00713                                         02S0713
*     CALL MAKELINE;                /* NO,MAKE A NEW LINE.           */
         BAL   @14,MAKELINE                                     02S0714
*   SAVWPTR=WPTR;                   /* SAVE BEGINNING OF TEXT.       */
@RF00713 L     @10,WPTR                                         02S0715
         ST    @10,SAVWPTR                                      02S0715
*   IF NEWLINE^=YES THEN            /* IF OLD LINE                   */
         TM    NEWLINE,B'00000001'                              02S0716
         BO    @RF00716                                         02S0716
*     DO;                           /* PUT IN COMMA                  */
*       WPTR->WCOMMA=COMMA;         /* PUT COMMA IN DATA             */
         MVC   WCOMMA(1,@10),COMMA                              02S0718
*       WPTR=WPTR+1;                /* GET TO NEXT SPOT              */
         AL    @10,@CF00040                                     02S0719
         ST    @10,WPTR                                         02S0719
*     END;                          /* END OLD LINE                  */
*   ELSE                            /* NEW LINE                      */
*     NEWLINE=OFF;                  /* INDICATE ITS NOW OLD          */
         B     @RC00716                                         02S0721
@RF00716 NI    NEWLINE,B'11111110'                              02S0721
*   IF SCVMDID=SCVIDLPA THEN        /* IS IT LPAMOD?                 */
@RC00716 CLI   SCVMDID(SCVAPTR),7                               02S0722
         BNE   @RF00722                                         02S0722
*     WPTR->WMOD=LPAMODEQ;          /* YES, PUT IN LPAMOD=           */
         L     @10,WPTR                                         02S0723
         MVC   WMOD(7,@10),LPAMODEQ                             02S0723
*   ELSE                            /* NOT LPAMOD,                   */
*     WPTR->WMOD=PVTMODEQ;          /* PUT IN PVTMOD=                */
         B     @RC00722                                         02S0724
@RF00722 L     @10,WPTR                                         02S0724
         MVC   WMOD(7,@10),PVTMODEQ                             02S0724
*   WPTR=WPTR+LENGTH(WMOD);         /* UPDATE TO DATA PART           */
@RC00722 LA    @10,7                                            02S0725
         AL    @10,WPTR                                         02S0725
         ST    @10,WPTR                                         02S0725
*   WPTR->WMODN=SCVMDNM;            /* MOVE IN SPECIFIED MODNAME     */
         MVC   WMODN(8,@10),SCVMDNM(SCVAPTR)                    02S0726
*   DO BPTR=WPTR TO WPTR+8 WHILE(BPTR->WMODN(1:1)^=' ');/* UPDATE PTR*/
         LR    BPTR,@10                                         02S0727
         B     @DE00727                                         02S0727
@DL00727 CLI   WMODN(BPTR),C' '                                 02S0727
         BE    @DC00727                                         02S0727
*   END;                            /* END PTR UPDATE                */
         AL    BPTR,@CF00040                                    02S0728
@DE00727 LA    @10,8                                            02S0728
         AL    @10,WPTR                                         02S0728
         CR    BPTR,@10                                         02S0728
         BNH   @DL00727                                         02S0728
@DC00727 DS    0H                                               02S0729
*   WPTR=BPTR;                      /* GET UPDATED PTR               */
         ST    BPTR,WPTR                                        02S0729
*   IF SCVMDA1^=0×SCVMDA2^=REAL0 THEN/* OFFSETS?                     */
         ICM   @10,15,SCVMDA1(SCVAPTR)                          02S0730
         BNZ   @RT00730                                         02S0730
         CLC   SCVMDA2(4,SCVAPTR),@CF00276                      02S0730
         BE    @RF00730                                         02S0730
@RT00730 DS    0H                                               02S0731
*     DO;                           /* THERE ARE OFFSETS             */
*       IF SCVMDID=SCVIDLPA THEN    /* IF ITS LPAMOD THEN            */
         CLI   SCVMDID(SCVAPTR),7                               02S0732
         BNE   @RF00732                                         02S0732
*         DO;                       /* GET ENTRY POINT               */
*                                                               03S0734
*/********************************************************************
*                                                               03S0734
* LPADDR- THIS SEGMENT FINDS THE ENTRY POINT OF THE SPECIFIED LPA
*         LOAD MODULE. THIS IS NECESSARY BECAUSE THE SLIP       03S0734
*         CONTROL BLOCK (SCVA) HAS ADDRESSES, THAT ALLOW FASTER 03S0734
*         SLIP PROCESSOR(IEAVTSLP) OPERATION, THAT MUST BE CONVERTED
*         TO OFFSETS.                                           03S0734
*                                                               03S0734
*   OPERATION- 1. USE THE CDE SEARCH ROUTING TO SEE IF THE LPAMOD HAS
*                 ENTRY ON THE ACTIVE QUEUE.                    03S0734
*                                                               03S0734
*              2. USE THE LPA DIRECTORY SEARCH ROUTINE TO SEE IF LPA
*                 MODULE IS THERE.                              03S0734
*                                                               03S0734
**********************************************************************/
*                                                               03S0734
*           RFY                                                 03S0734
*            (R0,                                               03S0734
*             R1,                                               03S0734
*             R3,                                               03S0734
*             R5,                                               03S0734
*             R8,                                               03S0734
*             R9,                                               03S0734
*             R14,                                              03S0734
*             R15) RSTD;                                        03S0734
*           R3=CVTPTR;              /* NEED CVTPRT.                  */
         L     @10,CVTPTR                                       03S0735
         LR    R3,@10                                           03S0735
*           R5=PSATOLD;             /* NEED OLD TCB POINTER.         */
         L     R5,PSATOLD                                       03S0736
*           R9=ADDR(SCVMDNM);       /* ADDRESS LPA MOD NAME.         */
         LA    R9,SCVMDNM(,SCVAPTR)                             03S0737
*           R8=CVTQLPAQ;            /* SEARCH LPA ACTIVE QUEUE.      */
         L     R8,CVTQLPAQ(,@10)                                03S0738
*           R15=CVTQCDSR;           /* CDE SEARCH ROUTINE.           */
         L     R15,CVTQCDSR(,@10)                               03S0739
*           GEN;                                                03S0740
         STM  R3,R12,12(R13)            SAVE REGS(DOESN'T CLOBBER R4
         BALR R14,R15                   GO SEARCH CDES.
         SR   R14,R14                   IF SUCCESSFUL, RETURN HERE
         LR   R0,R11                    R11 HAS THE CDE OR 0
         LM   R3,R12,12(R13)            RESTORE REGS QCDSR CLOBBERS
*           IF R14=0 THEN           /* FOUND IN CDE3                 */
         LTR   R14,R14                                          03S0741
         BNZ   @RF00741                                         03S0741
*             DO;                   /* YES,GET ENTRY POINT.          */
*               CDENTPTR=R0;        /* CDE ADDRESS.                  */
         ST    R0,CDENTPTR                                      03S0743
*               IF CDMIN=YES THEN   /* MINOR CDE ?                   */
         L     @10,CDENTPTR                                     03S0744
         TM    CDMIN(@10),B'00000100'                           03S0744
         BNO   @RF00744                                         03S0744
*                 SAVENT=CDXLMJP->CDXLMJP->XTLMSBAD;/* GET ADDRESS
*                                      FROM EXTENT LIST POINTED TO BY
*                                      MAJOR                         */
         L     @10,CDXLMJP(,@10)                                03S0745
         L     @10,CDXLMJP(,@10)                                03S0745
         L     @10,XTLMSBAD-1(,@10)                             03S0745
         LA    @10,0(,@10)                                      03S0745
         ST    @10,SAVENT                                       03S0745
*               ELSE                /* NOT A MINOR, ADDRESS          */
*                 SAVENT=CDXLMJP->XTLMSBAD;/* EXTENT LIST DIRECTLY.  */
         B     @RC00744                                         03S0746
@RF00744 L     @10,CDENTPTR                                     03S0746
         L     @10,CDXLMJP(,@10)                                03S0746
         L     @10,XTLMSBAD-1(,@10)                             03S0746
         LA    @10,0(,@10)                                      03S0746
         ST    @10,SAVENT                                       03S0746
*             END;                  /* END FOUND IN A CDE.           */
*           ELSE                    /* NOT IN A CDE.                 */
*             DO;                   /* CHECK LPA DIRECTORY.          */
         B     @RC00741                                         03S0748
@RF00741 DS    0H                                               03S0749
*               R14=ADDR(SCVMDNM);  /* MODULE NAME ADDRESS.          */
         LA    R14,SCVMDNM(,SCVAPTR)                            03S0749
*               R15=CVTLPDSR;       /* LPA DIRECTORY SEARCH RTN.     */
         L     @10,CVTPTR                                       03S0750
         L     R15,CVTLPDSR(,@10)                               03S0750
*               GEN;                                            03S0751
         STM R3,R12,12(R13)                REGS MIGHT GET CLOBBERED
         LM    R0,R1,0(R14)                GET MODULE NAME
         BALR  R14,R15                     GO SEARCH LPA DIRECTORY.
         SR    R14,R14                     INDICATE LPDE FOUND.
         SR    R14,R14                     DO IT AGAIN, FILL UP 4 BYTES
         LM R3,R12,12(R13)                 GET REGS BACK.
*               IF R14=0 THEN       /* LPDE FOUND?                   */
         LTR   R14,R14                                          03S0752
         BNZ   @RF00752                                         03S0752
*                 DO;               /* YES, LOOK FOR MAJOR.          */
*                   LPDEPTR=R0;     /* GET LPDE PTR.                 */
         ST    R0,LPDEPTR                                       03S0754
*                   IF LPDEMIN=NO THEN/* MINOR LPDE?                 */
         L     @10,LPDEPTR                                      03S0755
         TM    LPDEMIN(@10),B'00000100'                         03S0755
         BNZ   @RF00755                                         03S0755
*                     SAVENT=LPDEXTAD;/* NO,GET START ADDRESS.       */
         L     @10,LPDEXTAD(,@10)                               03S0756
         ST    @10,SAVENT                                       03S0756
*                   ELSE            /* YES,GET MAJOR.                */
*                     DO;           /* GET START ADDRESS.            */
         B     @RC00755                                         03S0757
@RF00755 DS    0H                                               03S0758
*                       R3=CVTPTR;  /* MAJOR LPDE SEARCH.            */
         L     @10,CVTPTR                                       03S0758
         LR    R3,@10                                           03S0758
*                       R15=CVTLPDSR;/* SET SEARCH ROUTINE.          */
         L     R15,CVTLPDSR(,@10)                               03S0759
*                       R14=ADDR(SCVMDNM);/* GET LPAMOD NAME ADDR.   */
         LA    R14,SCVMDNM(,SCVAPTR)                            03S0760
*                       GEN;                                    03S0761
         LM    R0,R1,0(R14)             MODULE NAME.
         BALR  R14,R15                  LOOK THROUGH LPA DIRECTORY
         SR    R14,R14                  GOOD RETURN
         SR    R14,R14
*                       IF R14=0 THEN/* FIND A MAJOR?                */
         LTR   R14,R14                                          03S0762
         BNZ   @RF00762                                         03S0762
*                         DO;       /* YES.                          */
*                           LPDEPTR=R0;/* GET ITS ADDRESS.           */
         ST    R0,LPDEPTR                                       03S0764
*                           SAVENT=LPDEXTAD;/* GET LPA MOD ENTRY
*                                      POINT.                        */
         L     @10,LPDEPTR                                      03S0765
         L     @10,LPDEXTAD(,@10)                               03S0765
         ST    @10,SAVENT                                       03S0765
*                         END;      /* END FOUND A MAJOR LPDE.       */
*                       ELSE        /* NOT FOUND.                    */
*                         SAVENT=0; /* GIVE ADDRESSES.               */
         B     @RC00762                                         03S0767
@RF00762 SLR   @10,@10                                          03S0767
         ST    @10,SAVENT                                       03S0767
*                     END;          /* END MAJOR LPDE SEARCH.        */
*                 END;              /* LPDE FOUND.                   */
*               ELSE                /* NOT IN LPDE OR CDE.           */
*                 SAVENT=0;         /* GIVE THE ADDRESSES FROM SCVA. */
         B     @RC00752                                         03S0770
@RF00752 SLR   @10,@10                                          03S0770
         ST    @10,SAVENT                                       03S0770
*             END;                  /* NOT IN CDE.                   */
@RC00752 DS    0H                                               03S0772
*           RFY                                                 03S0772
*            (R0,                                               03S0772
*             R1,                                               03S0772
*             R3,                                               03S0772
*             R5,                                               03S0772
*             R8,                                               03S0772
*             R9,                                               03S0772
*             R14,                                              03S0772
*             R15) UNRSTD;                                      03S0772
@RC00741 DS    0H                                               03S0773
*           AD1=SCVMDA1-SAVENT;     /* GET OFFSET1                   */
         L     @10,SAVENT                                       02S0773
         ICM   @06,15,SCVMDA1(SCVAPTR)                          02S0773
         SLR   @06,@10                                          02S0773
         ST    @06,AD1                                          02S0773
*           AD2=SCVMDA2-SAVENT;     /* GET OFFSET2                   */
         LCR   @10,@10                                          02S0774
         ICM   @06,15,SCVMDA2(SCVAPTR)                          02S0774
         ALR   @10,@06                                          02S0774
         ST    @10,AD2                                          02S0774
*         END;                      /* END LPAMOD ENTRY POINT        */
*       ELSE                        /* NOT LPAMOD, ITS PVTMOD        */
*         DO;                       /* DO PVTMOD                     */
         B     @RC00732                                         02S0776
@RF00732 DS    0H                                               02S0777
*           AD1=SCVMDA1;            /* GET 1ST OFFSET                */
         MVC   AD1(4),SCVMDA1(SCVAPTR)                          02S0777
*           AD2=SCVMDA2;            /* GET 2ND OFFSET                */
         MVC   AD2(4),SCVMDA2(SCVAPTR)                          02S0778
*         END;                      /* END PVTMOD ADDRESSES          */
*       WPTR->WCOMMA=COMMA;         /* PUT COMMA AFTER NAME          */
@RC00732 L     @10,WPTR                                         02S0780
         MVC   WCOMMA(1,@10),COMMA                              02S0780
*       WPTR=WPTR+1;                /* UPDATE TO NEXT PART OF MSG.   */
         LA    @06,1                                            02S0781
         ALR   @10,@06                                          02S0781
         ST    @10,WPTR                                         02S0781
*       UNPK(WAD1,UAD1);            /* PUT F'S AS ZONES              */
         UNPK  WAD1(9),UAD1(5)                                  02S0782
*       UNPK(WAD2,UAD2);            /* DO IT AGAIN FOR 2ND OFFSET    */
         UNPK  WAD2(9),UAD2(5)                                  02S0783
*       DO ADCTR=1 TO 17;           /* MAKE BOTH OFFSETS PRINTABLE   */
         LR    ADCTR,@06                                        02S0784
@DL00784 DS    0H                                               02S0785
*         IF WADS(ADCTR)>F9 THEN    /* IF A HEX NUMBER,              */
         LA    @10,WADS-1(ADCTR)                                02S0785
         CLC   0(1,@10),F9                                      02S0785
         BNH   @RF00785                                         02S0785
*           DO;                     /* PUT IN THE PROPER CHARACTER   */
*             WACTR=(WADS(ADCTR)&ZEROFOX)-9;/* OFFSET INTO HEX TABLE */
         SLR   WACTR,WACTR                                      02S0787
         IC    WACTR,WADS-1(ADCTR)                              02S0787
         SLR   @10,@10                                          02S0787
         IC    @10,ZEROFOX                                      02S0787
         NR    WACTR,@10                                        02S0787
         SL    WACTR,@CF00123                                   02S0787
*             WADS(ADCTR)=HEXTABLE(WACTR);/* GET HEX NUMBER(A-F)     */
         LA    @10,WADS-1(ADCTR)                                02S0788
         LA    @06,HEXTABLE-1(WACTR)                            02S0788
         MVC   0(1,@10),0(@06)                                  02S0788
*           END;                    /* END GET HEX NUMBER            */
*         ELSE                                                  02S0790
*           ;                       /* NOT FA-FF                     */
@RF00785 DS    0H                                               02S0791
*       END;                        /* END MAKE OFFSETS PRINTABLE    */
         AL    ADCTR,@CF00040                                   02S0791
         C     ADCTR,@CF00268                                   02S0791
         BNH   @DL00784                                         02S0791
*       WPTR->OFFSET=WAD1;          /* PUT OFFSET 1 INTO MESSAGE     */
         L     @10,WPTR                                         02S0792
         MVC   OFFSET(8,@10),WAD1                               02S0792
*       WPTR=WPTR+LENGTH(OFFSET);   /* UPDATE TO NEXT SLOT           */
         LA    @06,8                                            02S0793
         ALR   @10,@06                                          02S0793
         ST    @10,WPTR                                         02S0793
*       WPTR->WCOMMA=COMMA;         /* PUT COMMA IN MESSAGE          */
         MVC   WCOMMA(1,@10),COMMA                              02S0794
*       WPTR=WPTR+1;                /* GET PAST COMMA.               */
         AL    @10,@CF00040                                     02S0795
         ST    @10,WPTR                                         02S0795
*       WPTR->OFFSET=WAD2;          /* PUT OFFSET 2 INTO MESSAGE     */
         MVC   OFFSET(8,@10),WAD2                               02S0796
*       WPTR=WPTR+LENGTH(OFFSET);   /* UPDATE SLOT PTR               */
         ALR   @10,@06                                          02S0797
         ST    @10,WPTR                                         02S0797
*     END;                          /* END OFFSET PRESENT            */
*   WPLMLLEN=WPLMLLEN+(WPTR-SAVWPTR);/* UPDATE MESSAGE LENGTH        */
@RF00730 L     @10,WPLPTR                                       02S0799
         L     @06,WPTR                                         02S0799
         SL    @06,SAVWPTR                                      02S0799
         SLR   @15,@15                                          02S0799
         IC    @15,WPLMLLEN(,@10)                               02S0799
         ALR   @06,@15                                          02S0799
         STC   @06,WPLMLLEN(,@10)                               02S0799
*   SCVAPTR=SCVAPTR+LENGTH(SCVAMOD);/* GET TO NEXT SCVA PART.        */
         AL    SCVAPTR,@CF00268                                 02S0800
*   END LMODCASE;                                               02S0801
@EL00006 DS    0H                                               02S0801
@EF00006 DS    0H                                               02S0801
@ER00006 LM    @14,@01,@SA00006                                 02S0801
         LM    @03,@12,@SA00006+16                              02S0801
         BR    @14                                              02S0801
*                                                               02S0802
*/********************************************************************
*                                                               02S0802
* ADDR-PLACES THE ADDRESSES,SPECIFIED ON THE SLIP COMMAND, INTO THE
*      DISPLAY.                                                 02S0802
*                                                               02S0802
*   OPERATION-CHECK FOR A NEW LINE NEEDED                       02S0802
*             MAKE ADDRESSES PRINTABLE                          02S0802
*             PUT ADDRESSES INTO MESSAGE                        02S0802
*                                                               02S0802
**********************************************************************/
*                                                               02S0802
*ADDRCASE:                                                      02S0802
*   PROC;                                                       02S0802
ADDRCASE STM   @14,@01,@SA00007                                 02S0802
         STM   @03,@12,@SA00007+16                              02S0802
*   IF WPLMLLEN+ADDRLN>MAXLNTH THEN /* WILL ADDRESS FIT IN THIS      */
         LA    @10,34                                           02S0803
         L     @08,WPLPTR                                       02S0803
         SLR   @06,@06                                          02S0803
         IC    @06,WPLMLLEN(,@08)                               02S0803
         ALR   @10,@06                                          02S0803
         C     @10,@CF00152                                     02S0803
         BNH   @RF00803                                         02S0803
*     CALL MAKELINE;                /* LINE NO MAKE NEW LINE         */
         BAL   @14,MAKELINE                                     02S0804
*   ELSE                                                        02S0805
*     ;                             /* IT WILL FIT                   */
@RF00803 DS    0H                                               02S0806
*   SAVWPTR=WPTR;                   /* SAVE CURRENT MSG PTR          */
         L     @10,WPTR                                         02S0806
         ST    @10,SAVWPTR                                      02S0806
*   IF NEWLINE^=YES THEN            /* NEW LINE CREATED?             */
         TM    NEWLINE,B'00000001'                              02S0807
         BO    @RF00807                                         02S0807
*     DO;                           /* NO                            */
*       WPTR->WCOMMA=COMMA;         /* NEED A COMMA                  */
         MVC   WCOMMA(1,@10),COMMA                              02S0809
*       WPTR=WPTR+1;                /* UPDATE PAST COMMA             */
         AL    @10,@CF00040                                     02S0810
         ST    @10,WPTR                                         02S0810
*     END;                          /* END OLD LINE                  */
*   ELSE                            /* IT IS A NEW LINE.             */
*     NEWLINE=OFF;                  /* TURN OFF NEW INDICATOR.       */
         B     @RC00807                                         02S0812
@RF00807 NI    NEWLINE,B'11111110'                              02S0812
*   WPTR->WADDREQ=ADDREQ;           /* PUT ADDR= IN MSG.             */
@RC00807 L     @10,WPTR                                         02S0813
         MVC   WADDREQ(8,@10),ADDREQ                            02S0813
*   WPTR=WPTR+LENGTH(WADDREQ);      /* GET TO NEXT PART OF MSG.      */
         AL    @10,@CF00084                                     02S0814
         ST    @10,WPTR                                         02S0814
*   UNPK(WAD1,SCVADD1);             /* GET 1ST ADDRESS               */
         UNPK  WAD1(9),SCVADD1(5,SCVAPTR)                       02S0815
*   UNPK(WAD2,SCVADD2);             /* GET 2ND ADDRESS               */
         UNPK  WAD2(9),SCVADD2(5,SCVAPTR)                       02S0816
*   DO ADCTR=1 TO 17;               /* MAKE THEM PRINTABLE           */
         LA    ADCTR,1                                          02S0817
@DL00817 DS    0H                                               02S0818
*     IF WADS(ADCTR)>F9 THEN        /* IS IT HEX                     */
         LA    @10,WADS-1(ADCTR)                                02S0818
         CLC   0(1,@10),F9                                      02S0818
         BNH   @RF00818                                         02S0818
*       DO;                         /* YES, GET THE CHARACTER        */
*         WACTR=(WADS(ADCTR)&ZEROFOX)-9;/* OFFSET INTO TABLE         */
         SLR   WACTR,WACTR                                      02S0820
         IC    WACTR,WADS-1(ADCTR)                              02S0820
         SLR   @10,@10                                          02S0820
         IC    @10,ZEROFOX                                      02S0820
         NR    WACTR,@10                                        02S0820
         SL    WACTR,@CF00123                                   02S0820
*         WADS(ADCTR)=HEXTABLE(WACTR);/* GET PROPER CHARACTER        */
         LA    @10,WADS-1(ADCTR)                                02S0821
         LA    @06,HEXTABLE-1(WACTR)                            02S0821
         MVC   0(1,@10),0(@06)                                  02S0821
*       END;                        /* END HEX NO.                   */
*     ELSE                                                      02S0823
*       ;                           /* NOT HEX                       */
@RF00818 DS    0H                                               02S0824
*   END;                            /* END MAKE PRINTABLE            */
         AL    ADCTR,@CF00040                                   02S0824
         C     ADCTR,@CF00268                                   02S0824
         BNH   @DL00817                                         02S0824
*   WPTR->WADDR=WAD1;               /* PUT 1ST ADDR INTO MESSAGE     */
         L     @10,WPTR                                         02S0825
         MVC   WADDR(8,@10),WAD1                                02S0825
*   WPTR=WPTR+LENGTH(WADDR);        /* UPDATE TO ADDRESS 2           */
         LA    @06,8                                            02S0826
         ALR   @10,@06                                          02S0826
         ST    @10,WPTR                                         02S0826
*   WPTR->WCOMMA=COMMA;             /* PUT IN COMMA                  */
         MVC   WCOMMA(1,@10),COMMA                              02S0827
*   WPTR=WPTR+1;                    /* UPDATE PAST COMMA             */
         AL    @10,@CF00040                                     02S0828
         ST    @10,WPTR                                         02S0828
*   WPTR->WADDR=WAD2;               /* PUT IN 2ND ADDRESS            */
         MVC   WADDR(8,@10),WAD2                                02S0829
*   WPTR=WPTR+LENGTH(WADDR);        /* GET PAST ADDRESS 2            */
         ALR   @10,@06                                          02S0830
         ST    @10,WPTR                                         02S0830
*   WPLMLLEN=WPLMLLEN+(WPTR-SAVWPTR);/* NEW LINE LENGTH              */
         L     @06,WPLPTR                                       02S0831
         SL    @10,SAVWPTR                                      02S0831
         SLR   @15,@15                                          02S0831
         IC    @15,WPLMLLEN(,@06)                               02S0831
         ALR   @10,@15                                          02S0831
         STC   @10,WPLMLLEN(,@06)                               02S0831
*   IF INSCE=YES THEN               /* SCE AS INPUT ?                */
         TM    INSCE,B'00100000'                                02S0832
         BNO   @RF00832                                         02S0832
*     SCVAPTR=SCVAPTR+LENGTH(SCVAMOD);/* YES,SCVA IS REALLY MOD SCVA.*/
         AL    SCVAPTR,@CF00268                                 02S0833
*   ELSE                            /* D SLIP INPUT.                 */
*     SCVAPTR=SCVAPTR+LENGTH(SCVAADDR);/* NEW SCVA PART              */
         B     @RC00832                                         02S0834
@RF00832 AL    SCVAPTR,@CF00123                                 02S0834
*   END ADDRCASE;                                               02S0835
@EL00007 DS    0H                                               02S0835
@EF00007 DS    0H                                               02S0835
@ER00007 LM    @14,@01,@SA00007                                 02S0835
         LM    @03,@12,@SA00007+16                              02S0835
         BR    @14                                              02S0835
*                                                               02S0836
*/********************************************************************
*                                                               02S0836
* ASID-THIS CASE FILLS IN THE ASID'S SPECIFIED ON THE SLIP COMMAND
*                                                               02S0836
*   OPERATION-CALL MAKELINE IF THE ASIDS WON'T FIT ON THE CURRENT LINE
*             PUT IN ASID=                                      02S0836
*             FILL IN ONE LINE UNTIL ALL ASIDS SPECIFIED ARE IN THE
*             MESSAGE OR THE LINE IS FULL.                      02S0836
*                                                               02S0836
**********************************************************************/
*                                                               02S0836
*ASIDCASE:                                                      02S0836
*   PROC;                                                       02S0836
ASIDCASE STM   @14,@01,@SA00008                                 02S0836
         STM   @03,@12,@SA00008+16                              02S0836
*   IF WPLMLLEN+LENGTH(ASIDEQ)+SCVADNO*ASIDLN>MAXLNTH&/* WILL        */
*       NEWLINE^=YES THEN           /* ASID DATA FIT?NO-GET A NEW    */
         LA    @10,5                                            02S0837
         L     @08,WPLPTR                                       02S0837
         SLR   @06,@06                                          02S0837
         IC    @06,WPLMLLEN(,@08)                               02S0837
         ALR   @10,@06                                          02S0837
         SLR   @08,@08                                          02S0837
         IC    @08,SCVADNO(,SCVAPTR)                            02S0837
         SLA   @08,2                                            02S0837
         ALR   @10,@08                                          02S0837
         C     @10,@CF00152                                     02S0837
         BNH   @RF00837                                         02S0837
         TM    NEWLINE,B'00000001'                              02S0837
         BO    @RF00837                                         02S0837
*     CALL MAKELINE;                /* LINE IF NOT ALREADY DONE      */
         BAL   @14,MAKELINE                                     02S0838
*   ELSE                                                        02S0839
*     ;                             /* DON'T NEED NEW LINE           */
@RF00837 DS    0H                                               02S0840
*   SAVWPTR=WPTR;                   /* SAVE START TO COMPUTE LENGTH. */
         L     @10,WPTR                                         02S0840
         ST    @10,SAVWPTR                                      02S0840
*   IF NEWLINE^=YES THEN            /* DON'T HAVE NEW LINE           */
         TM    NEWLINE,B'00000001'                              02S0841
         BO    @RF00841                                         02S0841
*     DO;                           /* DO OLD LINE                   */
*       WPTR->WCOMMA=COMMA;         /* PUT IN COMMA                  */
         MVC   WCOMMA(1,@10),COMMA                              02S0843
*       WPTR=WPTR+1;                /* UPDATE MSG POINTER            */
         AL    @10,@CF00040                                     02S0844
         ST    @10,WPTR                                         02S0844
*     END;                          /* END OLD LINE PROCESSING       */
*   ELSE                            /* THIS IS A NEW LINE.           */
*     NEWLINE=OFF;                  /* ITS NO LONGER A NEW LINE.     */
         B     @RC00841                                         02S0846
@RF00841 NI    NEWLINE,B'11111110'                              02S0846
*   WPTR->WASIDEQ=ASIDEQ;           /* PUT ASID= IN WTO.             */
@RC00841 L     @10,WPTR                                         02S0847
         MVC   WASIDEQ(5,@10),ASIDEQ                            02S0847
*   WPTR=WPTR+LENGTH(WASIDEQ);      /* UPDATE IN TEXT.               */
         AL    @10,@CF00117                                     02S0848
         ST    @10,WPTR                                         02S0848
*   AFIRST=ON;                      /* FIRST ASID.                   */
         OI    AFIRST,B'10000000'                               02S0849
*   DO ASIDNO=1 TO SCVADNO;         /* GET ALL ASIDS SPEC'D.         */
         LA    ASIDNO,1                                         02S0850
         B     @DE00850                                         02S0850
@DL00850 DS    0H                                               02S0851
*     AUNPK=SCVADD(ASIDNO);         /* GET ASID FOR UNPK.            */
         LR    @10,ASIDNO                                       02S0851
         ALR   @10,@10                                          02S0851
         ALR   @10,SCVAPTR                                      02S0851
         MVC   AUNPK(2),SCVADD-2(@10)                           02S0851
*     UNPK(AUNPK1,ASIDUNPK);        /* MAKE ASID PRINTABLE.          */
         UNPK  AUNPK1(5),ASIDUNPK(3)                            02S0852
*     DO HEXCTR=1 TO 4;             /* SCAN FOR A HEX #.             */
         LA    HEXCTR,1                                         02S0853
@DL00853 DS    0H                                               02S0854
*       IF AHEX(HEXCTR)>F9 THEN     /* IF HEX,                       */
         LA    @10,AHEX-1(HEXCTR)                               02S0854
         CLC   0(1,@10),F9                                      02S0854
         BNH   @RF00854                                         02S0854
*         DO;                       /* GET CHAR FROM TABLE.          */
*           ACTR=(AHEX(HEXCTR)&ZEROFOX)-9;/* TABLE OFFSET.           */
         SLR   ACTR,ACTR                                        02S0856
         IC    ACTR,AHEX-1(HEXCTR)                              02S0856
         SLR   @10,@10                                          02S0856
         IC    @10,ZEROFOX                                      02S0856
         NR    ACTR,@10                                         02S0856
         SL    ACTR,@CF00123                                    02S0856
*           AHEX(HEXCTR)=HEXTABLE(ACTR);/* GET CHAR FROM TABLE.      */
         LA    @10,AHEX-1(HEXCTR)                               02S0857
         LA    @06,HEXTABLE-1(ACTR)                             02S0857
         MVC   0(1,@10),0(@06)                                  02S0857
*         END;                      /* END GET PRINTABLE.            */
*       ELSE                                                    02S0859
*         ;                         /* NOT HEX.                      */
@RF00854 DS    0H                                               02S0860
*     END;                          /* END SCAN FOR HEX.             */
         AL    HEXCTR,@CF00040                                  02S0860
         C     HEXCTR,@CF00053                                  02S0860
         BNH   @DL00853                                         02S0860
*     IF AFIRST=NO THEN             /* FIRST ASID ?                  */
         TM    AFIRST,B'10000000'                               02S0861
         BNZ   @RF00861                                         02S0861
*       DO;                         /* NO, NEED A COMMA.             */
*         WPTR->WCOMMA=COMMA;       /* PUT COMMA BEFORE ASID.        */
         L     @10,WPTR                                         02S0863
         MVC   WCOMMA(1,@10),COMMA                              02S0863
*         WPTR=WPTR+1;              /* GET TO NEXT SPOT IN TEXT.     */
         AL    @10,@CF00040                                     02S0864
         ST    @10,WPTR                                         02S0864
*       END;                        /* END NOT 1ST ASID.             */
*     ELSE                          /* IT IS THE 1ST ASID.           */
*       AFIRST=OFF;                 /* TURN OFF FIRST INDICATOR.     */
         B     @RC00861                                         02S0866
@RF00861 NI    AFIRST,B'01111111'                               02S0866
*     WPTR->WASID=AUNPK1;           /* PUT PRINTABLE ASID IN MSG.    */
@RC00861 L     @10,WPTR                                         02S0867
         MVC   WASID(4,@10),AUNPK1                              02S0867
*     WPTR=WPTR+ASIDLN;             /* NOT FIRST,LENTH INCLUDES 02S0868
*                                      COMMA.                        */
         LA    @08,4                                            02S0868
         ALR   @10,@08                                          02S0868
         ST    @10,WPTR                                         02S0868
*     IF WPLMLLEN+(WPTR-SAVWPTR)+ASIDLN>MAXLNTH/* NEXT ASID FIT?     */
*         &ASIDNO<=SCVADNO THEN     /* IF THERE IS ONE.              */
         L     @06,WPLPTR                                       02S0869
         SL    @10,SAVWPTR                                      02S0869
         SLR   @04,@04                                          02S0869
         IC    @04,WPLMLLEN(,@06)                               02S0869
         ALR   @10,@04                                          02S0869
         ALR   @08,@10                                          02S0869
         C     @08,@CF00152                                     02S0869
         BNH   @RF00869                                         02S0869
         SLR   @08,@08                                          02S0869
         IC    @08,SCVADNO(,SCVAPTR)                            02S0869
         CR    ASIDNO,@08                                       02S0869
         BH    @RF00869                                         02S0869
*       DO;                         /* NO. MAKE A NEW LINE.          */
*         WPLMLLEN=WPLMLLEN+(WPTR-SAVWPTR);/* GET LINE LENTH.        */
         STC   @10,WPLMLLEN(,@06)                               02S0871
*         CALL MAKELINE;            /* MAKE A NEW LINE.              */
         BAL   @14,MAKELINE                                     02S0872
*         NEWLINE=OFF;              /* DON'T NEED THIS ON.           */
         NI    NEWLINE,B'11111110'                              02S0873
*         SAVWPTR=WPTR;             /* SAVE BEGINNING OF ASID DATA.  */
         L     @10,WPTR                                         02S0874
         ST    @10,SAVWPTR                                      02S0874
*         WPTR=WPTR+LENGTH(ASIDEQ); /* LINE UP PROPERLY.             */
         AL    @10,@CF00117                                     02S0875
         ST    @10,WPTR                                         02S0875
*       END;                        /* END NEW ASID LINE.            */
*     ELSE                                                      02S0877
*       ;                           /* NO NEW LINE NEEDED.           */
@RF00869 DS    0H                                               02S0878
*   END;                            /* END ALL ASIDS IN MSG.         */
         AL    ASIDNO,@CF00040                                  02S0878
@DE00850 SLR   @10,@10                                          02S0878
         IC    @10,SCVADNO(,SCVAPTR)                            02S0878
         CR    ASIDNO,@10                                       02S0878
         BNH   @DL00850                                         02S0878
*   WPLMLLEN=WPLMLLEN+(WPTR-SAVWPTR);/* ASID DATA LENGTH.            */
         L     @10,WPLPTR                                       02S0879
         L     @06,WPTR                                         02S0879
         SL    @06,SAVWPTR                                      02S0879
         SLR   @15,@15                                          02S0879
         IC    @15,WPLMLLEN(,@10)                               02S0879
         ALR   @06,@15                                          02S0879
         STC   @06,WPLMLLEN(,@10)                               02S0879
*   IF INSCE=YES THEN               /* SCE INPUT?                    */
         TM    INSCE,B'00100000'                                02S0880
         BNO   @RF00880                                         02S0880
*     SCVAPTR=SCVAPTR+LENGTH(SCVADHDR)+32;/* MAX ASID LENGTH.        */
         AL    SCVAPTR,@CF00270                                 02S0881
*   ELSE                            /* NOT SCE INPUT, UPDATE FOR
*                                      SPECIFIED ASIDS ONLY.         */
*     SCVAPTR=SCVAPTR+LENGTH(SCVADHDR)/* GET NEW PTR, HDR            */
*         +SCVADNO*2;               /* PLUS # ASIDS TIMES LENTH OF
*                                      EACH ASID.                    */
         B     @RC00880                                         02S0882
@RF00880 LA    @10,2                                            02S0882
         ALR   @10,SCVAPTR                                      02S0882
         SLR   @06,@06                                          02S0882
         IC    @06,SCVADNO(,SCVAPTR)                            02S0882
         ALR   @06,@06                                          02S0882
         ALR   @10,@06                                          02S0882
         LR    SCVAPTR,@10                                      02S0882
*   END ASIDCASE;                                               02S0883
@EL00008 DS    0H                                               02S0883
@EF00008 DS    0H                                               02S0883
@ER00008 LM    @14,@01,@SA00008                                 02S0883
         LM    @03,@12,@SA00008+16                              02S0883
         BR    @14                                              02S0883
*   END IEECB907                    /* END MAIN PROCEDURE            */
*                                                               01S0884
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (SPEC907 )                                       */
*/*%INCLUDE SYSLIB  (DCL907  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHASHDR )                                       */
*/*%INCLUDE SYSLIB  (IHASCE  )                                       */
*/*%INCLUDE SYSLIB  (IHASCVA )                                       */
*/*%INCLUDE SYSLIB  (IEEZB906)                                       */
*/*%INCLUDE SYSLIB  (IEEXSA  )                                       */
*/*%INCLUDE SYSLIB  (IEZWPL  )                                       */
*/*%INCLUDE SYSLIB  (IEECHAIN)                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHACDE  )                                       */
*/*%INCLUDE SYSLIB  (IHAXTLST)                                       */
*/*%INCLUDE SYSLIB  (IHALPDE )                                       */
*/*%INCLUDE SYSLIB  (DSPLOK  )                                       */
*/*%INCLUDE SYSLIB  (DSPLYALL)                                       */
*/*%INCLUDE SYSLIB  (DSPLYONE)                                       */
*/*%INCLUDE SYSLIB  (L1IDSTAC)                                       */
*/*%INCLUDE SYSLIB  (L2ERRTYP)                                       */
*/*%INCLUDE SYSLIB  (L3MODE  )                                       */
*/*%INCLUDE SYSLIB  (PARMERR )                                       */
*/*%INCLUDE SYSLIB  (SETCNTRL)                                       */
*/*%INCLUDE SYSLIB  (MAKELINE)                                       */
*/*%INCLUDE SYSLIB  (COMPPROC)                                       */
*/*%INCLUDE SYSLIB  (JOBNPROC)                                       */
*/*%INCLUDE SYSLIB  (LMODPROC)                                       */
*/*%INCLUDE SYSLIB  (LPADDR  )                                       */
*/*%INCLUDE SYSLIB  (ADDRPROC)                                       */
*/*%INCLUDE SYSLIB  (ASIDPROC)                                       */
*                                                               01S0884
*       ;                                                       01S0884
@DATA    DS    0H
@CH00155 DC    H'14'
@CH00275 DC    H'32'
@CH01928 DC    H'33'
@SM01936 MVC   ESTAELST(0),ESTAEFRM
@SM01949 MVC   OVRLY(0,@06),OVRLY+1(@06)
         DS    0F
@AL00281 DC    A(MSG756)               LIST WITH   6 ARGUMENT(S)
         DS    F
         DC    A(@CF00362)
         DC    A(@CF00362)
         DC    A(@CF00362)
         DC    AL1(X'80')
         DC    AL3(@CF00362)
@AL00307 DC    A(M733)                 LIST WITH   6 ARGUMENT(S)
         DS    F
         DC    A(@CF00362)
         DC    A(@CF00362)
         DC    A(@CF00362)
         DC    AL1(X'80')
         DC    AL3(@CF00362)
@AL00545 DC    A(M731)                 LIST WITH   6 ARGUMENT(S)
         DS    F
         DS    F
         DC    A(@CF00362)
         DC    A(@CF00362)
         DC    AL1(X'80')
         DC    AL3(@CF00362)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SA00002 DS    14F
@SA00004 DS    14F
@SA00008 DS    14F
@SA00005 DS    14F
@SA00006 DS    14F
@SA00007 DS    14F
@AL00001 DS    6A
@TF00001 DS    F
IEECB907 CSECT
         DS    0F
@CF00362 DC    F'0'
@CF00040 DC    F'1'
@CF00088 DC    F'3'
@CF00053 DC    F'4'
@CF00117 DC    F'5'
@CF00119 DC    F'6'
@CF00032 DC    F'7'
@CH00032 EQU   @CF00032+2
@CF00084 DC    F'8'
@CF00123 DC    F'9'
@CF00033 DC    F'12'
@CF00149 DC    F'15'
@CF00268 DC    F'17'
@CF00270 DC    F'34'
@CF00216 DC    F'63'
@CF00152 DC    F'70'
@CF01941 DC    F'-14'
@CF01943 DC    F'-9'
@CF00276 DC    XL4'7FFFFFFF'
@DATD    DSECT
         DS    0D
WPTR     DS    A
SAVRTN   DS    A
WPLPTR   DS    A
SAVWPTR  DS    A
CDENTPTR DS    A
LPDEPTR  DS    A
XTLSTPTR DS    A
SAVENT   DS    F
ECB      DS    F
FLAGS    DS    BL2
         ORG   FLAGS
ENBL     DS    BL1
CANCEL   EQU   FLAGS+0
NOSLPMSG EQU   FLAGS+0
SCEEND   EQU   FLAGS+0
WTOERR   EQU   FLAGS+0
SCEFOUND EQU   FLAGS+0
ALLSCES  EQU   FLAGS+0
NEWLINE  EQU   FLAGS+0
AFIRST   DS    BL1
WTO1ST   EQU   FLAGS+1
INSCE    EQU   FLAGS+1
ENDWTOR  EQU   FLAGS+1
         ORG   FLAGS+2
         DS    CL2
CB860PRM DS    CL8
         ORG   CB860PRM
CSCBADDR DS    FL4
CMDPTR   DS    AL4
         ORG   CB860PRM+8
REGSAV   DS    CL32
         ORG   REGSAV
REGS16   DS    CL24
REGS89   DS    CL8
         ORG   REGSAV+32
ESTAPARM DS    CL4
         ORG   ESTAPARM
SAVEIDS  DS    CL4
         ORG   SAVEIDS
SAVWTOID DS    CL3
SAVCID   DS    CL1
         ORG   ESTAPARM+4
WTOAREA  DS    CL768
         ORG   WTOAREA
WTOA1    DS    CL256
WTOA2    DS    CL256
WTOA3    DS    CL256
         ORG   WTOAREA+768
SAVTIME  DS    CL4
UNPKAREA DS    CL10
ASIDUNPK DS    CL3
         ORG   ASIDUNPK
AUNPK    DS    CL2
@NM00003 DS    CL1
         ORG   ASIDUNPK+3
AUNPK1   DS    CL5
         DS    CL2
UAD1     DS    CL5
         ORG   UAD1
AD1      DS    FL4
@NM00004 DS    CL1
         ORG   UAD1+5
         DS    CL3
UAD2     DS    CL5
         ORG   UAD2
AD2      DS    FL4
@NM00005 DS    CL1
         ORG   UAD2+5
WAD      DS    CL18
         ORG   WAD
WAD1     DS    CL9
WAD2     DS    CL9
         ORG   WAD+18
REPLYBUF DS    CL119
ESTA906  DS    CL24
XSAREA   DS    CL48
IEECB907 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00358 DC    V(IEECB906)
@CV00359 DC    V(IEECB908)
         DS    0D
M733     DC    H'12'
MSG756   DC    H'9'
M731     DC    H'10'
M732     DC    H'11'
MSG308   DC    AL1(8)
ZEROFOX  DC    XL1'0F'
ANSCE    DC    CL4'SCE'
CNTRL    DC    CL29'IEE735I 00.00.00 SLIP DISPLAY'
PCNTRL   DC    CL28'IEE725I SLIP PARAMETERS ARE-'
SLIPONLY DC    CL5'SLIP'
SLIPID   DC    CL5'SLIP='
         DS    CL7
WTIME    DC    CL8'00000030'
LABEL    DC    CL66'ID   STATE    ID   STATE    ID   STATE    ID   STATC
               E    ID   STATE'
ERRTYPEQ DC    CL7'ERRTYP='
EVERY    DC    CL6'EVERY,'
ANY      DC    CL4'ANY,'
ERRTYPES DS    CL72
         ORG   ERRTYPES
ETYP     DC    CL8',MACH'
         DC    CL8',PROG'
         DC    CL8',REST'
         DC    CL8',ABEND'
         DC    CL8',MEMTERM'
         DC    CL8',SVCERR'
         DC    CL8',DAT'
         DC    CL8',PGIO'
ELEN     DC    3AL1(5)
         DC    AL1(6)
         DC    AL1(8)
         DC    AL1(7)
         DC    AL1(4)
         DC    AL1(5)
         ORG   ERRTYPES+72
MODES    DS    CL120
         ORG   MODES
MODE     DC    CL7'SUPR,'
         DC    CL7'DIS,'
         DC    CL7'GLOCSP,'
         DC    CL7'GLOCSD,'
         DC    CL7'LLOC,'
         DC    CL7'TYP1,'
         DC    CL7'SRB,'
         DC    CL7'TCB,'
         DC    CL7'RECV,'
         DC    CL7'PP,'
         DC    CL7'SUPER,'
         DC    CL7'SKEY,'
         DC    CL7'PKEY,'
         DC    CL7'GLOC,'
         DC    CL7'LOCK,'
MLN      DC    AL1(5)
         DC    AL1(4)
         DC    AL1(7)
         DC    AL1(7)
         DC    AL1(5)
         DC    AL1(5)
         DC    AL1(4)
         DC    AL1(4)
         DC    AL1(5)
         DC    AL1(3)
         DC    AL1(6)
         DC    AL1(5)
         DC    AL1(5)
         DC    AL1(5)
         DC    AL1(5)
         ORG   MODES+120
MODEQ    DC    CL5'MODE='
COMMA    DC    CL1','
UCOMP    DC    CL6'COMP=U'
F9       DC    CL1'9'
X        DC    CL1'X'
ASIDEQ   DC    CL5'ASID='
JOBNEQ   DC    CL8'JOBNAME='
JSPGMEQ  DC    CL6'JSPGM='
ADDREQ   DC    CL8'ADDRESS='
LPAMODEQ DC    CL7'LPAMOD='
PVTMODEQ DC    CL7'PVTMOD='
OPCANCEL DC    CL6'CANCEL'
RETRY    DC    CL5'RETRY'
CB860CP  DS    CL9
         ORG   CB860CP
CMDLEN   DC    AL1(6)
DSLIP    DC    CL8'D SLIP'
         ORG   CB860CP+9
DISABLED DC    CL8'DISABLED'
ENABLED  DC    CL8'ENABLED'
IDEQ     DC    CL3'ID='
IDENABL  DC    CL7'ENABLED'
ACTIONEQ DC    CL8',ACTION='
IGNOR    DC    CL6'IGNORE'
NODMP    DC    CL6'NODUMP'
WAIT     DC    CL4'WAIT'
SVCD     DC    CL4'SVCD'
HEXTABLE DC    CL1'A'
         DC    CL1'B'
         DC    CL1'C'
         DC    CL1'D'
         DC    CL1'E'
         DC    CL1'F'
IEECB907 CSECT
ESTAEFRM ESTAE RECORD=YES,TERM=YES,MF=L
ESTALN DC A(*-ESTAEFRM)
@DATD    DSECT
ESTAELST ESTAE RECORD=YES,TERM=YES,MF=L
IEECB907 CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEECB907 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
LINES    EQU   @04
MODPART  EQU   @04
WACTR    EQU   @05
ADCTR    EQU   @04
ACTR     EQU   @08
ASIDNO   EQU   @05
MASKCTR  EQU   @04
HEXCTR   EQU   @04
PAKCTR   EQU   @03
MCTR     EQU   @03
ETXT     EQU   @03
ECTR     EQU   @03
IDS      EQU   @02
NUMLIN   EQU   @03
SCVAPTR  EQU   @02
TIMES    EQU   @02
LINPTR   EQU   @09
CSCBPTR  EQU   @08
SCEPTR   EQU   @05
BPTR     EQU   @04
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R8       EQU   @08
R9       EQU   @09
R14      EQU   @14
R15      EQU   @15
SHIFTER  EQU   @02
XSAPTR   EQU   @02
WORKREG  EQU   @03
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R6       EQU   @06
R7       EQU   @07
WREG     EQU   @04
CVTPTR   EQU   16
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
WANSCE   EQU   0
TIMEDCL  EQU   0
HRS      EQU   TIMEDCL+8
MINS     EQU   TIMEDCL+11
SECS     EQU   TIMEDCL+14
LINENUM  EQU   0
WID      EQU   0
SSCAN    EQU   0
SID      EQU   SSCAN
SOFF     EQU   SSCAN+1
WERRTYP  EQU   0
WETYP    EQU   0
WEVERY   EQU   0
WANY     EQU   0
OVRLY    EQU   0
WMODEQ   EQU   0
WMODE    EQU   0
WCOMMA   EQU   0
WCOMPEQ  EQU   0
WCOMP    EQU   0
WASIDEQ  EQU   0
WASID    EQU   0
WJOBN    EQU   0
WJSPGM   EQU   0
WADDR    EQU   0
WADDREQ  EQU   0
WMOD     EQU   0
WMODN    EQU   0
OFFSET   EQU   0
TARRAY   EQU   0
ID       EQU   TARRAY
STATE    EQU   TARRAY+5
WIDEQ    EQU   0
CHARCK   EQU   0
L1STATE  EQU   0
WACTION  EQU   0
WIGNR    EQU   0
WNODMP   EQU   0
WWAIT    EQU   0
WSVCD    EQU   0
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTQCDSR EQU   CVTMAP+184
CVTQLPAQ EQU   CVTMAP+188
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
SHDR     EQU   0
SHDRCTFW EQU   SHDR+8
SHDRFWD  EQU   SHDRCTFW+4
SHDRFLGS EQU   SHDR+20
SHDRSEQ  EQU   SHDR+21
SCE      EQU   0
SCECTRFW EQU   SCE+8
SCEFWD   EQU   SCECTRFW+4
SCEFLG1  EQU   SCE+20
SCEDSABL EQU   SCEFLG1
SCEEVERY EQU   SCEFLG1
SCEWAIT  EQU   SCEFLG1
SCEIGNOR EQU   SCEFLG1
SCENODMP EQU   SCEFLG1
SCERRTYP EQU   SCE+21
SCEMODE  EQU   SCE+22
SCEMODE1 EQU   SCEMODE
SCESUPR  EQU   SCEMODE1
SCEDIS   EQU   SCEMODE1
SCEGLSP  EQU   SCEMODE1
SCEGLSD  EQU   SCEMODE1
SCELLOC  EQU   SCEMODE1
SCETYP1  EQU   SCEMODE1
SCESRB   EQU   SCEMODE1
SCETCB   EQU   SCEMODE1
SCEMODE2 EQU   SCEMODE+1
SCERECV  EQU   SCEMODE2
SCEPP    EQU   SCEMODE2
SCESUPER EQU   SCEMODE2
SCESKEY  EQU   SCEMODE2
SCEPKEY  EQU   SCEMODE2
SCEGLOC  EQU   SCEMODE2
SCELOCK  EQU   SCEMODE2
SCEUCMP  EQU   SCE+27
SCEID    EQU   SCE+28
SCESCVA  EQU   SCE+32
SCVA     EQU   0
SCVAHDR  EQU   SCVA
SCVACOMP EQU   0
SCVCCB   EQU   SCVACOMP+1
SCVCCU   EQU   SCVCCB
SCVCCM   EQU   SCVACOMP+2
SCVCCD   EQU   SCVACOMP+5
SCVAASID EQU   0
SCVADHDR EQU   SCVAASID
SCVADNO  EQU   SCVADHDR+1
SCVADD   EQU   SCVAASID+2
SCVAJOBN EQU   0
SCVJNID  EQU   SCVAJOBN
SCVJND   EQU   SCVAJOBN+1
SCVAMOD  EQU   0
SCVMDID  EQU   SCVAMOD
SCVMDNM  EQU   SCVAMOD+1
SCVMDA1  EQU   SCVAMOD+9
SCVMDA2  EQU   SCVAMOD+13
SCVAADDR EQU   0
SCVARD1  EQU   SCVAADDR+1
SCVARD2  EQU   SCVAADDR+5
SESTAE   EQU   0
SESTFLG  EQU   SESTAE
SESTDSLP EQU   SESTFLG
SESTSEQ  EQU   SESTFLG
SESTFLG2 EQU   SESTAE+1
SESTCSCB EQU   SESTAE+4
SESTWTOI EQU   SESTAE+16
XSAMAP   EQU   0
XASVRB   EQU   XSAMAP
XSA      EQU   XASVRB
XAD      EQU   XSA+4
XAX      EQU   XASVRB+8
@NM00020 EQU   XASVRB+16
XAE      EQU   @NM00020
@NM00021 EQU   XASVRB+20
XAV      EQU   XASVRB+24
XAS      EQU   XASVRB+32
XAU      EQU   XASVRB+40
XAA      EQU   XASVRB+42
XASAVLOC EQU   XSAMAP+48
XASAVLOX EQU   XASAVLOC
XASAVSTD EQU   XSAMAP+64
XASAVSTR EQU   XASAVSTD
@NM00023 EQU   XSAMAP+136
XACMFLGS EQU   @NM00023
XACMFLGA EQU   XACMFLGS
XACMFLG1 EQU   XACMFLGA
XACMFLG2 EQU   XACMFLGA+1
XACMFLGB EQU   XACMFLGS+2
XAWORK   EQU   XSAMAP+152
EEXSAS01 EQU   0
EEXSAS02 EQU   0
XADUSWIT EQU   EEXSAS02
EEXSAS03 EQU   0
XASDS    EQU   EEXSAS03+2
@NM00025 EQU   EEXSAS03+4
EEXSAS04 EQU   0
XAXMASK  EQU   EEXSAS04
EEXSAS05 EQU   0
XASOPCOD EQU   EEXSAS05
XASWITCH EQU   EEXSAS05+1
XALTCHG  EQU   XASWITCH
XACOMPMS EQU   XASWITCH
XARESV   EQU   EEXSAS05+2
EEXSAS06 EQU   0
XAAVRANG EQU   EEXSAS06
XAAVRNG2 EQU   EEXSAS06+1
WPLRF    EQU   0
WPLRPTR  EQU   WPLRF
WPL      EQU   0
WPLLGH   EQU   WPL
WPLMCSF  EQU   WPL+2
WPLMCSF1 EQU   WPLMCSF
WPLMCSFA EQU   WPLMCSF1
WPLMCSFB EQU   WPLMCSF1
WPLMCSFC EQU   WPLMCSF1
WPLMCSF2 EQU   WPLMCSF+1
WPLMCSFJ EQU   WPLMCSF2
WPLTXT   EQU   WPL+4
WPLFLGS  EQU   0
WPLDESC  EQU   WPLFLGS
WPLDESC1 EQU   WPLDESC
WPLDESCE EQU   WPLDESC1
WPLDESCH EQU   WPLDESC1
WPLDESC2 EQU   WPLDESC+1
WPLDESCI EQU   WPLDESC2
WPLROUT  EQU   WPLFLGS+2
WPLROUT1 EQU   WPLROUT
WPLROUT2 EQU   WPLROUT+1
WPLMSGTY EQU   WPLFLGS+4
WPLMSGT1 EQU   WPLMSGTY
WPLMSGT2 EQU   WPLMSGTY+1
WPLLS01  EQU   0
WPLLTF   EQU   WPLLS01
WPLLTF1  EQU   WPLLTF
WPLLTFA  EQU   WPLLTF1
WPLLTFC  EQU   WPLLTF1
WPLLTFD  EQU   WPLLTF1
WPLAREA  EQU   WPLLS01+2
WPLLINES EQU   WPLLS01+3
WPLML    EQU   0
WPLML0   EQU   WPLML
WPLMLLEN EQU   WPLML+1
WPLMLLTF EQU   WPLML+2
WPLMLLT1 EQU   WPLMLLTF
WPLMLLTB EQU   WPLMLLT1
WPLMLLTC EQU   WPLMLLT1
WPLMLLTD EQU   WPLMLLT1
WPLMLTXT EQU   WPLML+4
CHAIN    EQU   0
CHFLG    EQU   CHAIN+4
CHSTS    EQU   CHFLG+2
CHFC     EQU   CHSTS
CHACT    EQU   CHFLG+3
CHIFY    EQU   CHACT
CHKEY    EQU   CHAIN+8
CHPARM   EQU   CHKEY
CHPKE    EQU   CHAIN+28
CHUCMP   EQU   CHAIN+29
CHTJID   EQU   CHAIN+30
CHPROCSN EQU   CHAIN+32
CHACT1   EQU   CHPROCSN+3
CHASM    EQU   CHAIN+40
CHCIBP   EQU   CHASM+4
CHRGNSZ  EQU   CHASM+8
CHSTEP   EQU   CHASM+24
CHSWT    EQU   CHSTEP
CHSHORT  EQU   CHASM+32
CDENTRY  EQU   0
CDXLMJP  EQU   CDENTRY+20
CDATTR   EQU   CDENTRY+28
CDMIN    EQU   CDATTR
CDATTR2  EQU   CDENTRY+29
XTLST    EQU   0
XTLMSBLA EQU   XTLST+8
XTLMSBAA EQU   XTLST+12
XTLMSBAD EQU   XTLMSBAA+1
LPDE     EQU   0
LPDEATTR EQU   LPDE+28
LPDEMIN  EQU   LPDEATTR
LPDEATT2 EQU   LPDE+29
LPDEMJNM EQU   LPDE+32
LPDEXTAD EQU   LPDEMJNM+4
ETYPE    EQU   0
WCHAR    EQU   UNPKAREA
AHEX     EQU   AUNPK1
WADS     EQU   WAD
CVTS01   EQU   CVTPGSIA
CVTLPDSR EQU   CVTS01+4
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRTMS  EQU   CVTS01+244
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
SCVADD1  EQU   SCVARD1
SCVADD2  EQU   SCVARD2
UNCOMP   EQU   SCVCCD
CHAINS01 EQU   CHASM
CHBUF    EQU   CHAINS01
CHTYPE   EQU   CHAINS01+124
CHTRSTAT EQU   CHAINS01+125
CHCNID   EQU   CHAINS01+126
CHARID   EQU   CHAINS01+127
CHCSYSO  EQU   CHAINS01+134
PSARSVTE EQU   PSARSVT
FLC      EQU   PSA
*                                      START UNREFERENCED COMPONENTS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
CHLAST   EQU   CHAINS01+136
CHSPA    EQU   CHAINS01+135
CHUSERID EQU   CHCSYSO
CHJB     EQU   CHCSYSO
CHDUMP   EQU   CHCSYSO
CHQUE    EQU   CHCSYSO
CHHOLD   EQU   CHCSYSO
CHOUT    EQU   CHCSYSO
CHINN    EQU   CHCSYSO
CHALL    EQU   CHCSYSO
CHINC    EQU   CHAINS01+132
CHPEND   EQU   CHAINS01+128
@NM00032 EQU   CHTRSTAT
CHTSL    EQU   CHTRSTAT
CHTS     EQU   CHTRSTAT
CHINITL  EQU   CHTRSTAT
CHINIT   EQU   CHTRSTAT
CHJOBSL  EQU   CHTRSTAT
CHJOBS   EQU   CHTRSTAT
CHDEF    EQU   CHTYPE
CHHIAR   EQU   CHTYPE
CHARSV29 EQU   CHTYPE
CHARSV28 EQU   CHTYPE
CHARSV27 EQU   CHTYPE
CHARSV26 EQU   CHTYPE
CHARSV25 EQU   CHTYPE
CHDSTAT  EQU   CHTYPE
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTGETL  EQU   CVTS01
LPDEXTLN EQU   LPDEMJNM
LPDEATT3 EQU   LPDE+30
LPDEAUTH EQU   LPDEATT2
LPDESYSL EQU   LPDEATT2
@NM00067 EQU   LPDEATT2
@NM00066 EQU   LPDEATT2
LPDERLC  EQU   LPDEATT2
LPDEXLE  EQU   LPDEATT2
@NM00065 EQU   LPDEATT2
LPDENLR  EQU   LPDEATTR
@NM00064 EQU   LPDEATTR
@NM00063 EQU   LPDEATTR
LPDESER  EQU   LPDEATTR
LPDEREN  EQU   LPDEATTR
@NM00062 EQU   LPDEATTR
LPDENIP  EQU   LPDEATTR
@NM00061 EQU   LPDE+26
LPDEUSE  EQU   LPDE+24
LPDEXLP  EQU   LPDE+20
LPDENTP  EQU   LPDE+16
LPDENAME EQU   LPDE+8
LPDERBP  EQU   LPDE+4
LPDECHN  EQU   LPDE
@NM00060 EQU   XTLMSBAA
XTLMSBLN EQU   XTLMSBLA+1
@NM00059 EQU   XTLMSBLA
XTLNRFAC EQU   XTLST+4
XTLLNTH  EQU   XTLST
CDATTR3  EQU   CDENTRY+30
CDAUTH   EQU   CDATTR2
CDSYSLIB EQU   CDATTR2
CDOLY    EQU   CDATTR2
@NM00058 EQU   CDATTR2
CDRLC    EQU   CDATTR2
CDXLE    EQU   CDATTR2
CDREL    EQU   CDATTR2
CDSPZ    EQU   CDATTR2
CDNLR    EQU   CDATTR
CDJPA    EQU   CDATTR
CDNFN    EQU   CDATTR
CDSER    EQU   CDATTR
CDREN    EQU   CDATTR
CDNIC    EQU   CDATTR
CDNIP    EQU   CDATTR
@NM00057 EQU   CDENTRY+26
CDUSE    EQU   CDENTRY+24
CDENTPT  EQU   CDENTRY+16
CDNAME   EQU   CDENTRY+8
CDRRBP   EQU   CDENTRY+4
CDCHAIN  EQU   CDENTRY
CHARSV16 EQU   CHSHORT+100
CHARSV15 EQU   CHSHORT+96
CHJSCBVS EQU   CHSHORT+92
CHUSCVS  EQU   CHSHORT+88
@NM00031 EQU   CHSHORT+84
@NM00030 EQU   CHSHORT+80
CHSQA    EQU   CHSHORT+44
CHQPA    EQU   CHSHORT+8
CHJCL    EQU   CHSHORT+4
CHSPC    EQU   CHSHORT
CHSPB    EQU   CHSTEP+4
CHTCB    EQU   CHSTEP+1
CHARSV23 EQU   CHSWT
CHARSV22 EQU   CHSWT
CHARSV21 EQU   CHSWT
CHAC     EQU   CHSWT
CHPSF    EQU   CHSWT
CHPSD    EQU   CHSWT
CHJCT    EQU   CHSWT
CHARSV20 EQU   CHSWT
CHCECB   EQU   CHASM+20
CHECB    EQU   CHASM+16
CHRGNAD  EQU   CHASM+12
CHARSV18 EQU   CHRGNSZ+1
CHRPRTY  EQU   CHRGNSZ
@NM00029 EQU   CHCIBP
CHEND    EQU   CHCIBP
CHECBP   EQU   CHASM
CHDER    EQU   CHPROCSN+4
CHARSV10 EQU   CHACT1
CHARSV09 EQU   CHACT1
CHARSV08 EQU   CHACT1
CHARSV07 EQU   CHACT1
CHARSV06 EQU   CHACT1
CHARSV05 EQU   CHACT1
CHMODIFY EQU   CHACT1
CHRDWTR  EQU   CHACT1
CHARSV30 EQU   CHPROCSN+2
CHQID    EQU   CHPROCSN
CHASID   EQU   CHTJID
CHTRKID  EQU   CHPKE
CHCIBCTR EQU   CHAIN+27
CHUNIT   EQU   CHAIN+24
CHCLS    EQU   CHAIN+16
CHPCOI   EQU   CHPARM
CHAFORCE EQU   CHIFY
CHAIFX   EQU   CHACT
CHCLD    EQU   CHACT
CHCL     EQU   CHACT
CHDSI    EQU   CHACT
CHDISC   EQU   CHACT
CHTERM   EQU   CHACT
CHSWAP   EQU   CHACT
CHABTERM EQU   CHSTS
CHDL     EQU   CHSTS
CHAD     EQU   CHSTS
CHQSPC   EQU   CHSTS
CHSOUT   EQU   CHSTS
CHSYS    EQU   CHSTS
CHAP     EQU   CHSTS
CHSZE    EQU   CHFLG+1
CHVCD    EQU   CHFLG
CHPTR    EQU   CHAIN
WPLMLLT2 EQU   WPLMLLTF+1
WPLRSV24 EQU   WPLMLLT1
WPLRSV23 EQU   WPLMLLT1
WPLRSV22 EQU   WPLMLLT1
WPLRSV21 EQU   WPLMLLT1
WPLMLLTA EQU   WPLMLLT1
WPLLTF2  EQU   WPLLTF+1
WPLRSV20 EQU   WPLLTF1
WPLRSV19 EQU   WPLLTF1
WPLRSV18 EQU   WPLLTF1
WPLRSV17 EQU   WPLLTF1
WPLLTFB  EQU   WPLLTF1
WPLQID   EQU   WPLFLGS+6
WPLRSV32 EQU   WPLMSGT2
WPLRSV31 EQU   WPLMSGT2
WPLRSV30 EQU   WPLMSGT2
WPLRSV29 EQU   WPLMSGT2
WPLRSV28 EQU   WPLMSGT2
WPLRSV27 EQU   WPLMSGT2
WPLRSV26 EQU   WPLMSGT2
WPLRSV25 EQU   WPLMSGT2
WPLRSV16 EQU   WPLMSGT1
WPLRSV15 EQU   WPLMSGT1
WPLMSGTF EQU   WPLMSGT1
WPLRSV14 EQU   WPLMSGT1
WPLMSGTD EQU   WPLMSGT1
WPLMSGTC EQU   WPLMSGT1
WPLMSGTB EQU   WPLMSGT1
WPLMSGTA EQU   WPLMSGT1
WPLRSV13 EQU   WPLROUT2
WPLROUTO EQU   WPLROUT2
WPLROUTN EQU   WPLROUT2
WPLROUTM EQU   WPLROUT2
WPLROUTL EQU   WPLROUT2
WPLROUTK EQU   WPLROUT2
WPLROUTJ EQU   WPLROUT2
WPLROUTI EQU   WPLROUT2
WPLROUTH EQU   WPLROUT1
WPLROUTG EQU   WPLROUT1
WPLROUTF EQU   WPLROUT1
WPLROUTE EQU   WPLROUT1
WPLROUTD EQU   WPLROUT1
WPLROUTC EQU   WPLROUT1
WPLROUTB EQU   WPLROUT1
WPLROUTA EQU   WPLROUT1
WPLRSV12 EQU   WPLDESC2
WPLRSV11 EQU   WPLDESC2
WPLRSV10 EQU   WPLDESC2
WPLRSV09 EQU   WPLDESC2
WPLRSV08 EQU   WPLDESC2
WPLRSV07 EQU   WPLDESC2
WPLDESCJ EQU   WPLDESC2
WPLDESCG EQU   WPLDESC1
WPLDESCF EQU   WPLDESC1
WPLDESCD EQU   WPLDESC1
WPLDESCC EQU   WPLDESC1
WPLDESCB EQU   WPLDESC1
WPLDESCA EQU   WPLDESC1
WPLTXTL  EQU   WPLTXT+125
@NM00028 EQU   WPLTXT
WPLRSV05 EQU   WPLMCSF2
WPLRSV04 EQU   WPLMCSF2
WPLMCSFN EQU   WPLMCSF2
WPLRSV03 EQU   WPLMCSF2
WPLNOWTP EQU   WPLMCSF2
WPLMCSFK EQU   WPLMCSF2
WPLMCSFI EQU   WPLMCSF2
WPLMCSFH EQU   WPLMCSF1
WPLMCSFG EQU   WPLMCSF1
WPLMCSFF EQU   WPLMCSF1
WPLMCSFE EQU   WPLMCSF1
WPLMCSFD EQU   WPLMCSF1
WPLRECB  EQU   WPLRF+4
WPLRPTRA EQU   WPLRPTR+1
WPLRLN   EQU   WPLRPTR
XAARNG16 EQU   XAAVRNG2
XAARNG15 EQU   XAAVRNG2
XAARNG14 EQU   XAAVRNG2
XAARNG13 EQU   XAAVRNG2
XAARNG12 EQU   XAAVRNG2
XAARNG11 EQU   XAAVRNG2
XAARNG10 EQU   XAAVRNG2
XAARNG9  EQU   XAAVRNG2
XAARNG8  EQU   XAAVRANG
XAARNG7  EQU   XAAVRANG
XAARNG6  EQU   XAAVRANG
XAARNG5  EQU   XAAVRANG
XAARNG4  EQU   XAAVRANG
XAARNG3  EQU   XAAVRANG
XAARNG2  EQU   XAAVRANG
XAARNG1  EQU   XAAVRANG
XARTCODE EQU   EEXSAS05+6
XACMDATH EQU   EEXSAS05+4
XALTPTR  EQU   EEXSAS05+3
XACRT2   EQU   XARESV
XACENDCK EQU   XARESV
XARES1   EQU   XASWITCH
XASMF44  EQU   XASWITCH
XASMF42  EQU   XASWITCH
XAHRDREQ EQU   XASWITCH
XASTHDCP EQU   XACOMPMS
XAINHDCP EQU   XALTCHG
XAHRDCMD EQU   XASWITCH
XAROUT   EQU   XASWITCH
XALTCON  EQU   XASOPCOD
XACMD    EQU   XASOPCOD
XALTCOM  EQU   XASOPCOD
XARESB   EQU   XASOPCOD
XAOFF    EQU   XASOPCOD
XAON     EQU   XASOPCOD
XARESA   EQU   XASOPCOD
XACON    EQU   XASOPCOD
XAXSACB  EQU   EEXSAS04+4
XAXUTME  EQU   EEXSAS04+2
XAXFREE  EQU   EEXSAS04+1
@NM00027 EQU   XAXMASK
XAXTSL   EQU   XAXMASK
XAXTS    EQU   XAXMASK
@NM00026 EQU   XAXMASK
XAXJOBSL EQU   XAXMASK
XAXJOBS  EQU   XAXMASK
XASOPTR  EQU   @NM00025+1
XASTSAVE EQU   @NM00025
XASPLS3  EQU   EEXSAS03+3
XASSDS8  EQU   XASDS
XASSDS7  EQU   XASDS
XASSDS6  EQU   XASDS
XASSDS5  EQU   XASDS
XASSDS4  EQU   XASDS
XASSDS3  EQU   XASDS
XASSDS2  EQU   XASDS
XASSDS1  EQU   XASDS
XASDID   EQU   EEXSAS03+1
XASCID   EQU   EEXSAS03
XACAHOLD EQU   EEXSAS02+2
XADRES1  EQU   EEXSAS02+1
XAUBLANK EQU   XADUSWIT
XAOUNIT  EQU   XADUSWIT
XAIOCOMP EQU   XADUSWIT
XARES3   EQU   XADUSWIT
XAUDVC   EQU   XADUSWIT
XARES2   EQU   XADUSWIT
XAIPAREN EQU   XADUSWIT
XAXPAREN EQU   XADUSWIT
@NM00024 EQU   EEXSAS01+44
XAT      EQU   EEXSAS01+20
XAF      EQU   EEXSAS01+12
XAI      EQU   EEXSAS01+4
XAH      EQU   EEXSAS01
XAWORKH  EQU   XAWORK+28
XAWORKG  EQU   XAWORK+24
XAWORKF  EQU   XAWORK+20
XAWORKE  EQU   XAWORK+16
XAWORKD  EQU   XAWORK+12
XAWORKC  EQU   XAWORK+8
XAWORKB  EQU   XAWORK+4
XAWORKA  EQU   XAWORK
XARESRZ  EQU   @NM00023+12
XARESRY  EQU   @NM00023+8
XARESRX  EQU   @NM00023+4
XACMFLG4 EQU   XACMFLGB+1
XACMFLG3 EQU   XACMFLGB
XACMF28  EQU   XACMFLG2
XACMF27  EQU   XACMFLG2
XACMF26  EQU   XACMFLG2
XACMF25  EQU   XACMFLG2
XACMF24  EQU   XACMFLG2
XACMF23  EQU   XACMFLG2
XACMF22  EQU   XACMFLG2
XACMF21  EQU   XACMFLG2
XACMF18  EQU   XACMFLG1
XACMF17  EQU   XACMFLG1
XACMF16  EQU   XACMFLG1
XACMF15  EQU   XACMFLG1
XACMF14  EQU   XACMFLG1
XACMF13  EQU   XACMFLG1
XACMF12  EQU   XACMFLG1
XACMF11  EQU   XACMFLG1
XASAVSDR EQU   XASAVSTR+68
XASAVSDQ EQU   XASAVSTR+64
XASAVSDP EQU   XASAVSTR+60
XASAVSDO EQU   XASAVSTR+56
XASAVSDN EQU   XASAVSTR+52
XASAVSDM EQU   XASAVSTR+48
XASAVSDL EQU   XASAVSTR+44
XASAVSDK EQU   XASAVSTR+40
XASAVSDJ EQU   XASAVSTR+36
XASAVSDI EQU   XASAVSTR+32
XASAVSDH EQU   XASAVSTR+28
XASAVSDG EQU   XASAVSTR+24
XASAVSDF EQU   XASAVSTR+20
XASAVSDE EQU   XASAVSTR+16
XASAVSDD EQU   XASAVSTR+12
XASAVSDC EQU   XASAVSTR+8
XASAVSDB EQU   XASAVSTR+4
XASAVSDA EQU   XASAVSTR
XASAVLC4 EQU   XASAVLOX+12
XASAVLC3 EQU   XASAVLOX+8
XASAVLC2 EQU   XASAVLOX+4
XASAVLC1 EQU   XASAVLOX
XAK      EQU   XASVRB+44
@NM00022 EQU   XASVRB+41
XAL      EQU   @NM00021+1
XAN      EQU   @NM00021
XAR      EQU   @NM00020+1
XAP      EQU   XSA
SESTSCAN EQU   SESTAE+20
SESTSCE  EQU   SESTAE+12
SESTSHDR EQU   SESTAE+8
@NM00019 EQU   SESTAE+2
@NM00018 EQU   SESTFLG2
SESTVTSL EQU   SESTFLG2
SEST503D EQU   SESTFLG2
@NM00017 EQU   SESTFLG
SESTCHN  EQU   SESTFLG
SESTDEL  EQU   SESTFLG
SESTMOD  EQU   SESTFLG
SESTSET  EQU   SESTFLG
SESTSLP  EQU   SESTFLG
SCVARID  EQU   SCVAADDR
SCVADID  EQU   SCVADHDR
@NM00016 EQU   SCVCCB
SCVCCID  EQU   SCVACOMP
SCVADATA EQU   SCVA+8
@NM00015 EQU   SCVAHDR+6
SCVALN   EQU   SCVAHDR+4
SCVACBID EQU   SCVAHDR
@NM00014 EQU   SCE+24
@NM00013 EQU   SCEMODE2
SCEPGIO  EQU   SCERRTYP
SCEDAT   EQU   SCERRTYP
SCESVCER EQU   SCERRTYP
SCEMEMTM EQU   SCERRTYP
SCEABEND EQU   SCERRTYP
SCEREST  EQU   SCERRTYP
SCEPROG  EQU   SCERRTYP
SCEMACH  EQU   SCERRTYP
@NM00012 EQU   SCEFLG1
SCESVCD  EQU   SCEFLG1
SCEDELP  EQU   SCEFLG1
SCEBKWD  EQU   SCE+16
SCECTR   EQU   SCECTRFW
@NM00011 EQU   SCE+4
SCECBID  EQU   SCE
SHDRPROC EQU   SHDR+24
SHDRIDCT EQU   SHDR+22
@NM00010 EQU   SHDRFLGS
SHDRDELP EQU   SHDRFLGS
SHDRFRR  EQU   SHDRFLGS
SHDRBKWD EQU   SHDR+16
SHDRCTR  EQU   SHDRCTFW
SHDRPFC  EQU   SHDR+4
SHDRCBID EQU   SHDR
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00009 EQU   CVTFIX+248
@NM00008 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTBAH   EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTRV490 EQU   CVTMAP+388
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTRSV17 EQU   CVTOPTB
CVTVS1A  EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00007 EQU   TARRAY+13
@NM00006 EQU   TARRAY+4
@NM00002 EQU   TIMEDCL+13
@NM00001 EQU   TIMEDCL+10
MSGHDR   EQU   TIMEDCL
@NM00056 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00055 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00054 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00053 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00052 EQU   FLCFSA
@NM00051 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00050 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00049 EQU   FLCIOA
@NM00048 EQU   FLCMCLA+15
@NM00047 EQU   FLCMCLA+14
@NM00046 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00045 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00044 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00043 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00042 EQU   FLCPER
@NM00041 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00040 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00039 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00038 EQU   FLCPIILC
@NM00037 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00036 EQU   FLCSVILC
@NM00035 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00034 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00033 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
*                                      END UNREFERENCED COMPONENTS
@RC00279 EQU   @RC00276
@RC00255 EQU   @RC00242
@RC00744 EQU   @RC00741
@RC00755 EQU   @RC00752
@RC00762 EQU   @RC00752
@RC00832 EQU   @EL00007
@RC00880 EQU   @EL00008
@RC00309 EQU   @RC00255
@RC00311 EQU   @RC00309
@RC00391 EQU   @RC00309
@RC00403 EQU   @RC00391
@ENDDATA EQU   *
         END   IEECB907,(C'PLS2047',0701,77070)
