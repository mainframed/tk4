         TITLE 'IEAVSTAA..COMMUNICATIONS TASK STAR ROUTINE'
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVSTAA
*
*02*     CSECT-NAME = IEAVSTAA
*
*01*  DESCRIPTIVE-NAME = COMMUNICATIONS TASK STAR ROUTINE
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS = OS/VS2 REL 3.7
*
*01*  FUNCTION = THE COMMUNICATION TASK STAR ROUTINE IS ENTERED BY RTM
*     FOR ALL ABENDS THAT ARE CAUSED BY THE COMMUNICATION TASK. IT IS
*     ALSO GIVEN CONTROL AFTER ALL OTHER RECOVERY PROCESSING (FRR,ESTAE
*     ,ETC.) COMPLETES UNLESS A SUCCESSFUL RETRY COMPLETES BEFORE IT IS
*     SCHEDULED. THIS ROUTINE WILL REINTIALIZE ALL FIELDS NECESSARY TO
*     MAKE THE SYSTEM BELIEVE THAT THE COMMUNICATIONS TASK HAD NOT BEEN
*     ENTERED.
*
*02*     OPERATION =  THE STAR ROUTINE HANDLES NO ABEND RECURSIONS AND
*        WILL ATTEMPT TO DUMP THE LSQA, SQA, COMMUNICATIONS TASK
*        REGIONS, SWA, NUCLEUS, AND ITS RELATED MODULES IN THE LPA.THE
*        SVC DUMP ROUTINE IS UTILIZED TO PRODUCE THE UNFORMATTED DUMP
*        UPON EVERY ENTRY INTO STAR.
*        AFTER PROCESSING, THIS MODULE WILL RETURN CONTROL
*        TO RTM INDICATING RETRY OF IEAVMQWR.                  @ZA05368
*           NOTE:  IF (JES3) SUBSYSTEM HAS CONTROL OF A       @Y02668P
*       CONSOLE THE UCMDISPK BIT IN THE CONSOLES UCME         @Y02668P
*       WILL BE ON. IEAVSTAA WILL NOT MODIFY THE UCME         @Y02668P
*       DURING CONSOLE CLEANUP.                               @Y02668P
*
*01*   NOTES = THIS MODULE WAS MODIFIED TO EXECUTE IN A MVM ENVIRONMENT
*      USING THE LOCAL AND CMS LOCKS FOR SERIALIZATION.
*
*02*     DEPENDENCIES = NO LOCKS OR ENQ RESOURCES ARE REQUIRED UPON
*        ENTRY TO THIS MODULE.
*
*03*        CHARACTER-CODE-DEPENDENCIES = NONE
*
*02*     RESTRICTIONS = NONE
*
*02*     REGISTER-CONVENTIONS = REFER TO REGISTER DECLARES.
*
*02*     PATCH-LABEL = AREA AT END OF MODULE.
*
*01*  MODULE-TYPE = PROCEDURE
*
*02*     PROCESSOR = ASSEMBLER
*
*02*     MODULE-SIZE = 1600 BYTES                              @ZA30307
*
*02*     ATTRIBUTES = ZERO PROTECT KEY , REENTERABLE, SUPERVISOR MODE
*
*01*  ENTRY-POINT = IEAVSTAA
*
*02*     PURPOSE = GIVEN CONTROL BY RTM AS LAST RECOVERY ACTION FOR
*        COMM TASK.
*
*02*     LINKAGE = UPON ENTRY;
*         REG 0: 0=I/O QUIESCE
*                4=I/O HALTED
*                8=NO I/O WAS ACTIVE
*               12=NO SDWA WAS OBTAINED
*               16=NO I/O PROCESSING WAS PERFORMED
*         REG 1: ADDRESS OF SDWA IF REG 0 DOES NOT CONTAIN 12.
*                ABEND COMPLETION CODE IF REG 0 DOES CONTAIN 12.
*         REG 2: ADDRESS OF USER SUPPLIED PARAMETER LIST IF NO SDWA.
*                UNPREDICTABLE IF SDWA
*         REG 13:ADDRESS OF 72 BYTE SAVE AREA IF SDWA WAS OBTAINED.
*         REG 14;RETURN ADDRESS
*         REG 15:ENTRY POINT ADDRESS
*
*02*     INPUT = IN REGISTERS UPON ENTRY.
*
*02*     OUTPUT = NONE
*
*02*     REGISTERS-SAVED = REGISTERS 0 THROUGH 15 ARE SAVED UPON ENTRY.
*
*02*     REGISTER-USAGE = REFER TO REGISTER DECLARATION.
*
*02*     REGISTERS-RESTORED = REGISTER 14 IS RESTORED BEFORE EXIT FROM
*        THIS MODULE.
*
*01*  EXIT-NORMAL = RETURN TO CALLER VIA BRANCH REGISTER 14.
*
*02*     CONDITIONS = THIS EXIT IS TAKEN AFTER NORMAL PROCESSING TO
*        GIVE CONTROL TO IEAVMQWR.
*
*02*     OUTPUT = MESSAGE TO OPERATOR OF SYSTEM ERROR.
*         IEE824A YYY COMMUNICATION TASK ABEND, ZZ DUMP TAKEN
*          YYY = ABEND CODE
*          ZZ  = NO (IF NO DUMP WAS TAKEN)
*           NOTE: THIS MESSAGE MAY NOT APPEAR ON A D23         @ZA13859
*                 RECURSIVE ENTRY INTO IEAVSTAA.               @ZA13859
*
*02*     RETURN-CODES = 4 - RETRY AT IEAVMQWR
*
*01*  EXIT-ERROR = NONE
*
*01*  EXTERNAL-REFERENCES = THE FOLLOWING REFERENCES ARE MADE WITHIN
*     THIS MODULE:
*
*02*     ROUTINES = NONE
*
*02*     DATA-AREAS = NONE
*
*02*     CONTROL-BLOCKS = THIS MODULE REFERS TO THE FOLLOWING CONTROL
*        BLOCKS.
*         CVT   (R), UCB   (R,W), TDCM   (R),                  @ZA15729
*         ORE   (R,W), RDCM   (R,W), SACB   (R,W)              @ZA15729
*         PSA   (R)
*         WQE   (R)
*         UCM   (R,W)
*         SDWA  (R)
*         WWB   (R,W)
*
*01*  TABLES = THE FOLLOWING TABLES AND WORKAREAS ARE DEFINED WITHIN
*     THIS MODULE:
*      WPL        PARM LIST FOR WTO MESSAGE
*      PRNTABL    TABLE TO CONVERT ABEND CODE
*      CTBUF      FIELD TO CONTAIN SVC DUMP HEADER
*
*01*  MACROS = THIS MODULE USES THE FOLLOWING SYSTEM MACROS:
*     GETMAIN/FREEMAIN,SETLOCK,WTO,SDUMP,CALLRTM,SETRP,LOAD
*
*02*     SERIALIZATION = THE LOCAL AND CMS LOCKS ARE USED BY THIS
*        MODULE.
*
*01*  CHANGE-ACTIVITY = Y02756,Y02893,Y02751,ZA05368,ZA13828,ZA13859,
*                       ZA15729, ZA20343, ZA30307
*
*01*  MESSAGES = REFER TO EXIT-NORMAL.
*
*01*  ABEND-CODES = 'B23' TO ABEND WAITING WTOR ISSUERS.
*
**** END OF SPECIFICATIONS ***/
         EJECT
IEAVSTAA CSECT                     *
* DSTRT (A) APPROX. (099500); LABLUCME (A) APPROX. (124530)    @ZA05368
* NORELI (A) APPROX. (238850); SAVEREG (D) APPROX.             @ZA05368
* (092020-092900) DELETE A23 ABEND FOR COMTASK                 @ZA05368
* C (MSGFORM) APPROX. 219500, 228000                           @ZA13859
* A (ABENDD23) APPROX. 282500                                  @ZA13859
* C (DUMPGOOD) APPROX 124503                                   @ZA13828
* A (CKACTIVE) APPROX 124910 - TRACK PROCESSING                @ZA15729
* C (LABLUCME) APPROX 12450001, 12450903                       @ZA20343
* C (NOREL1) APPROX 23885003     RECORD AND FREE SDWAS         @ZA30307
         BALR  RBASE,R0            ESTABLISH
         USING *,RBASE             ADDRESSABILITY FOR MODULE
         MODID BRANCH=YES          MODULE IDENTIFIER             Y02756
ARCSECT  EQU   *                   LABEL TO BRANCH TO
**********************************************************************
*  SET UP DSECT BASES AS FOLLOWS:
*
*        R2    EIL
*        R3    CVT
*        R5    UCME
*        R8    ORE
*        R9    UCM 2 EXTENSION
*        R10   UCM PREFIX
*        R11   UCM
**********************************************************************
         L     R3,CVTPTR           GET CVT ADDRESS
         USING CVT,R3              SET R3 AS BASE
         L     R11,CVTCUCB         GET UCM ADDRESS
         USING UCM,R11             SET R11 AS BASE
         LH    R9,MINUS8           UCM MINUS 8 POINTS TO OTHER ADDR'S
         AR    R9,R11              SUBT 8 FROM UCM (DO NOT DESTROY UCM)
         L     R10,C4(R9)          GET UCM PREFIX ADDRESS
         USING UCMPRFX,R10         SET R10 AS BASE
         L     R9,ZERO(R9)         GET UCM2 ADDRESS
         USING UCM2EXT,R9          SET R9 AS BASE
* THE FOLLOWING TWO REGISTERS ARE INITIALIZED AT A LATER TIME.
         USING OREF,R8             SET R8 AS ORE BASE
         USING UCMLIST,R5          SET R5 AS UCME BASE
         EJECT
*****************************************************************Y02893
*                  STAR  RECURSION  SEGMENT                      Y02893
*                                                                Y02893
* THE FOLLOWING SEQMENT WILL CHECK THE UCM EXTENSION            YM05195
* TO DETERMINE IF THIS ROUTINE HAS BEEN ENTERED BEFORE FOR      YM05195
* A COMMTASK ERROR. IF IT HAS NOT, A FLAG WILL BE SET           YM05195
* INDICATING THAT THIS ROUTINE HAS BEEN ENTERED.                YM05195
*                                                                Y02893
*****************************************************************Y02893
**********************************************************************
         TM    UCM2SFLG,UCM2SENT   IS FIRST ENTRY FLAG ON ?
         BO    NORMAL              YES, CONTINUE NORMAL PROC
**********************************************************************
SENT     OI    UCM2SFLG,UCM2SENT   TURN ON STAR ENTERED FLAG
         EJECT
*****************************************************************Y02893
*              STAR  SDWA  CHECK  SEGMENT                        Y02893
*                                                                Y02893
* THE FOLLOWING SEGMENT WILL EXAMINE THE CONTENT OF REGISTER 0   Y02893
* TO DETERMINE IF AN SDWA WAS PASSED BY RTM. IF REGISTER 0       Y02893
* CONTAINS A CODE OF 12, NO SDWA WAS PASSED BY RTM AND REGISTER 1Y02893
* CONTAINS THE ABEND COMPLETION CODE. WHEN A SDWA HAS BEEN       Y02893
* OBTAINED (REGISTER 0 DOES NOT EQUAL 12), REGISTER 1 CONTAINS   Y02893
* THE SDWA ADDRESS AND REGISTER 13 CONTAINS THE REGISTER SAVE    Y02893
* AREA ADDRESS. IF A SDWA WAS NOT OBTAINED BY RTM, THIS MODULE   Y02893
* WILL GET A 64 BYTE REGISTER SAVE AREA.                         Y02893
*                                                                Y02893
*****************************************************************Y02893
* HANDLE SDWA AND SAVE REGISTERS. DO GETMAIN IF REQUIRED.
NORMAL   LR    R6,R15              *SAVE REGS
         LR    R7,R0               *DESTROYED
         LR    R8,R1               *OVER GETMAIN
* THE REGS ARE SAVED REGARDLESS OF THE NEED FOR IT.
* THIS IS DONE TO FACILITATE CHECKING THE INPUT REGS AT A LATER TIME.
         C     R0,TWELVE           ARE AN SDWA AND SAVE AREA PROVIDED ?
         BE    ALLOC               NO, AVOID NEXT CHECK
* SINCE THEY WERE PROVIDED, SEE IF AN SDWA ADDRESS HAS BEEN SAVED
CHKSEC   TM    UCM2SFLG,UCM2SDWA   IS THE INDICATOR ON ?
         BO    SAVEREGS            YES, DO NOT SAVE THIS ADDRESS
* THIS IS THE FIRST SDWA PROVIDED. THE ADDRESS MUST BE SAVED.
STOWA    STCM  PARMREG,MASK7,UCM2STAA SAVE THE ADDRESS IN UCM2
         OI    UCM2SFLG,UCM2SDWA   INDICATE THAT THE SDWA ADDR IS THERE
         B     SAVEREGS            CONTINUE PROCESSING
* GET 64 BYTES FROM SUBPOOL 229. ADDRESS IS RETURNED IN REG 1    Y02893
ALLOC    GETMAIN  R,SP=C229,LV=C72 GET THE SAVE AREA             Y02756
         LR    R13,R1              PUT AREA ADDRESS IN REG 13
*
SAVEREGS STM   R0,R15,C0(R13)      SAVE THE REGS IN THE REG SAVE AREA
         LR    R4,R13              SAVE SAVE AREA ADDRESS
         EJECT
**********************************************************************
*                  STAR  DUMP  SEGMENT                           Y02893
*
* THE FOLLOWING SEGMENT WILL TAKE A DUMP TO THE                  Y02893
* SYS1.DUMP DATA SET VIA THE SDUMP MACRO.                        Y02893
*
*
**********************************************************************
NOSDWA   TM    UCM2SFLG,UCM2DSTR   HAS DUMP BEEN STARTED ?
         BO    DSTRT               YES, DO NOT SET INDICATOR    YM05195
* INITIATE DUMP PROCEDURE
         OI    UCM2SFLG,UCM2DSTR   INDICATE DUMP HAS BEEN STARTED
DSTRT    GETMAIN R,SP=C229,LV=C80    GET BUFFER AREA             Y02756
         LR    R8,R1               SAVE AREA ADDRESS             Y02756
         MVC   C0(C80,R8),CTHEADER MOVE IN HEADER                Y02756
         L     R5,UCMPXA           GET TCB ADDRESS FOR DUMP
         SDUMP SDATA=(SQA,NUC,LSQA,LPA,SWA,CSA,ALLPSA,PSA,RGN,TRT),    X
               MF=(E,(R8))                                     @ZA05368
* DUMP HAS BEEN DONE - CHECK RETURN CODE
         LTR   R15,R15             WAS DUMP SUCCESSFUL ?
         BNE   DISABLE1            NO, DO NOT TURN ON DUMP INDICATOR
* DUMP WAS TAKEN SUCCESSFULLY. INDICATE THAT IT WAS.
DSUS     OI    UCM2SFLG,UCM2DTAK   TURN ON DUMP TAKEN FLAG
         EJECT
**********************************************************************
*              STAR  SETLOCK  SEGMENT
*
* IN ORDER TO SERIALIZE THE USE OF  COMM TASK RESOURCES, THE     Y02893
* FOLLOWING CODE ISSUES SETLOCKS FOR THE LOCAL AND CMS LOCKS     Y02893
* ALL LOCKS THAT WERE HELD BY A LOWER LEVEL RECOVERY ROUTINE     Y02893
* WERE FREED BY RTM BEFORE ENTRY TO THIS ROUTINE.                Y02893
**********************************************************************
DISABLE1 FREEMAIN  R,SP=C229,LV=C80,A=(R8) FREE AREA             Y02756
DISABLE  LR    R6,RBASE            SAVE BASE REGISTER            Y02756
         LR    R5,R11              SAVE UCM BASE REGISTER        Y02756
SETLOCAL SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                  Y02751X
               RELATED=(ORE,IEAVSTAA(FRELOCAL)) GET LOCAL LOCK   Y02751
SETCMS   SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,                    Y02751X
               RELATED=(ORE,IEAVSTAA(FRECMS)) GET CMS LOCK       Y02751
         LR    R11,R5              RESTORE UCM BASE REG          Y02756
         LR    RBASE,R6            RESTORE BASE REG              Y02756
         EJECT
**********************************************************************
*              STAR CONSOLE CLEANUP SEGMENT                      Y02893
*                                                                Y02893
* THE FOLLOWING SEGMENT WILL MODIFY THE UCMES FOR EACH CONSOLE,  Y02893
* INCLUDING THE UCME FOR THE MASTER CONSOLE. THE AFFECT OF THIS  Y02893
* IS: THE CONSOLES WILL BE CLOSED, INACTIVE, WITH EMPTY OUTPUT   Y02893
* QUEUES, AND APPEAR TO HAVE NEVER BEEN USED.                    Y02893
**********************************************************************
* AT THIS POINT, THE FOLLOWING FIELDS ARE ZEROED.                Y02893
*        1. UCMDCB           4. UCMWLAST          7. UCMDEVC
*        2. UCMSTS           5. UCMMLAST          8. UCMSDS5
*        3. UCMOUTQ          6. UCMMSG            9. UCMUF
**********************************************************************
DUMPGOOD LR    R9,R4               SAVE SAVEAREA REG           @ZA15729
         L     R4,UCMPXA           GET ADDRESS OF TCB          @ZA15729
         L     R7,UCMASCB          GET COMM TASK ASCB          @ZA15729
         SR    R1,R1               ZERO REGISTER 1             @ZA15729
         LA    R0,C72              SET LENGTH OF GETMAIN       @ZA15729
         LR    R2,R3               SAVE CVT POINTER            @ZA15729
         GETMAIN  RU,LV=(R0),SP=C229,BRANCH=YES                @ZA15729
         LR    R13,R1              SAVE SAVEAREA ADDRESS       @ZA15729
         LR    R3,R2               RESTORE CVT POINTER         @ZA15729
*IT WILL BE NECESSARY TO BXLE THROUGH UCMES ZEROING FIELDS.
         LM    R5,R7,UCMVEA        PICK UP INDEX, LENGTH, AND COMPARAND
         LTR   R5,R5               ARE THERE ANY UCMES ?
         BE    PMAST               NO, NOTHING TO ZERO. BRANCH AROUND
LABLUCME TM    UCMDISP2,UCMDISPK   IF SUBSYSTEM CONSOLE        @Y02668P
         BO    CKNEXT              BRANCH, DO NOT CLEANUP      @Y02668P
         XC    UCMSTS(C1),UCMSTS   STATUS FLAGS                @Y02668P
         SR    R4,R4               ZREO WORK REGISTER            Y02756
         ST    R4,UCMDCB           DCB POINTER                   Y02756
         ST    R4,UCMOUTQ          OUTPUT QUEUE ADDRESS          Y02756
         ST    R4,UCMWLAST         LAST WQE SERVICED             Y02756
         ST    R4,UCMMLAST         LAST MINOR WQE SERVICED       Y02756
         XC    UCMMSG(C2),UCMMSG   MESSAGE FLAGS
         XC    UCMDEVC(C1),UCMDEVC DEVICE CONTROL FLAGS
         XC    UCMSDS5(C1),UCMSDS5 SDS FLAGS
         L     R4,UCMUCB            GET UCB ADDR FROM UCME     @ZA20343
         USING UCBOB,R4             EST. UCB ADDRESSABILITY    @ZA20343
         TM    UCMDISP,UCMDISPA    IS THIS MASTER CONSOLE      @ZA13828
         BNO   CKACTIVE            NO, CHECK NON-MASTER ACTIVE @ZA13828
         OI    UCBSTAT,UCBONLI+UCBSYSR TURN ON SYSR& ONLINE    @ZA13828
         B     NXTTEST             CONTINUE CONSOLE SCANNING   @ZA13828
CKACTIVE EQU   *                   PROCESS NON-MASTER CNOSOLE  @ZA13828
         TM    UCMATR,UCMUF        DEVICE ACTIVE ?             @ZA05368
         BNO   NXTTEST             NO, BYPASS UCB SETTING      @ZA05368
***************************************************************@ZA05368
*  IF THE DEVICE IS AN ACTIVE CONSOLE, IT IS MARKED OFFLINE.   @ZA05368
*  THE FOLLOWING FLAGS IN THE UCBS WILL BE TURNED OFF.         @ZA05368
*  ----ONLINE, CHANGING STATUS,ALLOCATED,SYSTEM CONSOLE, AND   @ZA05368
*  CONSOLE STATUS SWITCH.
***************************************************************@ZA05368
         NIL   UCBSTAT,C255-UCBONLI-UCBCHGS-UCBALOC-UCBSYSR-UCBDADI,   *
               REF=UCBOB           SET UCB FLAGS               @ZA05368
         L     R1,UCMXB            GET RESIDENT DCM PTR        @ZA05368
         LTR   R1,R1               IS THERE ONE?               @ZA05368
         BZ    SKIP                NO, BRANCH AROUND           @ZA05368
         USING DCMTSRT,R1          ADDR. FOR DCM               @ZA05368
***************************************************************@ZA15729
* THE FOLLOWING CODE SCANS THE SACBS OF ALL ACTIVE CONSOLES    @ZA15729
* (EXCEPT THE MASTER CONSOLE) LOOKING FOR ACTIVE TRACK         @ZA15729
* PROCESSING. IF ANY ACTIVE TRACK PROCESSING IS FOUND, THE     @ZA15729
* ASSOCIATED STOP TRACK ECB IS LOCATED AND POSTED TO CANCEL    @ZA15729
* THE TRACK PROCESSING.                                        @ZA15729
***************************************************************@ZA15729
         L     R2,DCMADSDS         GET POINTER TO SACB         @ZA15729
         USING DCMACB,R2           ADDRESSABILITY FOR SACB     @ZA15729
STABEGIN LTR   R2,R2               IS THERE A SACB?            @ZA15729
         BZ    STARCONT            NO, RESET ATTN INDEX        @ZA15729
         TM    DCMASACB,DCMAUSE    DISPLAY AREA DEFINED?       @ZA15729
         BNO   STARCONT            NO, PROCESS ATTN INDEX      @ZA15729
         L     R8,DCMATECB         GET POINTER TO TRACK ECB    @ZA15729
         LTR   R8,R8               ANY ECB?                    @ZA15729
         BZ    STARNXT             NO, CHECK NEXT SACB         @ZA15729
         XC    DCMAROW(DCMACBND-DCMAROW),DCMAROW  ZERO OUT SACB
*                                                              @ZA15729
         TM    C0(R8),HEX40        ECB ALREADY POSTED?         @ZA15729
         BZ    STARPOST            NO, POST ECB                @ZA15729
         XC    C1(C3,R8),C1(R8)    CLEAR COMPLETION CODE       @ZA15729
STARNXT  L     R2,DCMACBNX         GET NEXT SACB               @ZA15729
         B     STABEGIN            CHECK SACB                  @ZA15729
STARPOST STM   R0,R15,C0(R13)      SAVE REGISTERS              @ZA15729
         SR    R10,R10             ZERO COMPLETION CODE        @ZA15729
         LR    R11,R8              SET ECB REGISTER            @ZA15729
         L     R15,CVT0PT01        POST ENTRY POINT            @ZA15729
         BALR  R14,R15             BRANCH TO POST ROUTINE      @ZA15729
         LM    R0,R15,C0(R13)      RESTORE REGISTERS           @ZA15729
         B     STARNXT             CHECK NEXT SACB             @ZA15729
STARCONT L     R1,DCMADTRN         POINTER TO PAGEABLE DCM     @ZA15729
         DROP  R1                                              @ZA05368
         DROP  R2                                              @ZA15729
         L     R2,UCBEXTPT         PTR TO UCB EXTENSION        @ZA05368
         USING UCBCMEXT,R2         ADDRESSABILITY FOR EXTENSION@ZA05368
         USING DCMSTRT,R1          ADDR. FOR DCM               @ZA05368
         MVC   UCBATI(C1),DCMATI   RESTORE ATTN INDEX          @ZA05368
         XC    UCBSNS,UCBSNS       CLEAR SENSE DATA            @ZA05368
         B     NXTTEST             CHECK NEXT ENTRY            @ZA05368
SKIP     MVI   UCBATI,ZERO         SET ATTN INDEX TO ZERO
NXTTEST  NI    UCMATR,C255-UCMUF-UCMLF-UCMAT04   TURN OFF FLAGS@ZA05368
         DROP  R1                                              @ZA05368
         DROP  R2                                              @ZA05368
CKNEXT   BXLE  R5,R6,LABLUCME      GO CHECK NEXT ENTRY         @Y02668P
*
* ALL UCMES HAVE BEEN CLEANSED. TIME TO INITIALIZE THE MASTER CONSOLE
* TO ALLOW OPERATOR COMMUNICATION IF REQUIRED.
*
PMAST    LM    R5,R7,UCMVEA        RESET BXLE LOOP REGS
PMAST1   TM    UCMDISP,UCMDISPA    IS THIS THE MASTER CONSOLE ?
         BO    PMAST2              YES, BRANCH OUT
         BXLE  R5,R6,PMAST1        NO, CHECK NEXT ENTRY
* MUST ASSUME THAT THE MASTER CONSOLE WILL BE FOUND. IF IT IS NOT, THE
* AREA OF CORE BEYOND THE LAST UCME WILL BE MANIPULATED.
PMAST2   OI    UCMSTS,UCMTA        TURN ON OPEN PENDING
         OI    UCMATR,UCMUF        TURN ON DEVICE ACTIVE
**********************************************************************
* THE FOLLOWING FIELDS ARE ZEROED IN THE UCM PREFIX
*        1. UCMSYSB          4. UCMCMID          7. UCMDOME
*        2. UCMSYSC          5. UCMXCT           8. UCMFLGS2
*        3. UCMSYSD          6. UCMSDS1
**********************************************************************
* BASE REG 10 IS ALREADY SET AS THE PREFIX BASE
PREFIX1  SR    R4,R4               ZERO WORK REGISTER            Y02756
         ST    R4,UCMDOME          ADDRESS OF FIRST DOMC         Y02756
         NI    UCMSFLG1,C255-UCMSYSB-UCMSYSC-UCMSYSD  FLAGS FOR HARD   *
                  COPY, CMDS TO HARD COPY AND MASTER CONSOLE SWITCH.
PREFIX2  NI    UCMSFLG2,UCMSYSN      BYTE TWO OF SYSTEM CONTROL FLAGS
*                                                               YM04722
         XC    UCMXCT(C1),UCMXCT     EXTERNAL INTERRUPT COUNT
         LA    R14,C1                SET MESSAGE ID NUMBER
         ST    R14,UCMCMID           TO ONE
         XC    UCMSDS1(C1),UCMSDS1   SDS FLAGS
         LA    R15,CVTEXIT           PLACE ADDRESS OF CVT EXIT INSTR
         ST    R15,UCMWTOX           IN THE UCM
LABELUCM SR    R4,R4               ZERO WORK REGISTER            Y02756
         ST    R4,UCMWTOQ          DISCARD ALL SYSTEM OUTPUT MESSAGES
         ST    R4,UCMARECB         ZERO ACR ECB                  Y02756
         ST    R4,UCMAECB          ZERO ATTENTION ECB            Y02756
         ST    R4,UCMOECB          ZERO WTO/R ECB                Y02756
         ST    R4,UCMDECB          ZERO DOM ECB                  Y02756
         ST    R4,UCMNPECB         ZERO NIPS ECB                 Y02756
         ST    R4,UCMMBPTR         ZERO FIRST MMB POINTER        Y02756
         ST    R4,UCMMBEND         ZERO LAST MMB POINTER         Y02756
         ST    R4,UCMMQPTR         ZERO FIRST MQE POINTER        Y02756
         ST    R4,UCMMQEND         ZERO LAST MQE POINTER         Y02756
         ST    R4,UCMMQNXT         ZERO NEXT MQE POINTER         Y02756
         ST    R4,UCMXECB          ZERO EXTERNAL ECB           @YM08199
         EJECT
**********************************************************************
*              STAR  WTOR  SEGMENT                               Y02893
*                                                                Y02893
* AT THIS POINT, ALL  TASKS WHICH HAVE A WTOR OUTSTANDING
* WILL BE ABENDED VIA ABTERM. THE TASKS WITH OUTSTANDING REQUESTS
* WILL BE LOCATED BY SEARCHING DOWN THE ORE CHAIN.
* IF A TEMPORARY BUFFER EXIST FOR AN ORE (INDICATING THE ORE HAS Y02893
* BEEN PARTIALLY PROCESSED BY THE REPLY PROCESSOR) IT WILL BE    Y02893
* FREED BEFORE ABENDING THE TASK.                                Y02893
**********************************************************************
         L     R8,UCMRPYQ          INITIALIZE ORE CHAIN POINTER
         B     ORELOOP1            GO TO ORE LOOP WHERE CHECKS ARE DONE
* THE FOLLOWING LOOP CHECKS ALL THE ORES AND ABENDS NON TSO TASKS
CHECKORE L     R8,ORELKP           GET ADDRESS OF NEXT ORE
ORELOOP1 LTR   R8,R8               IS POINTER ZERO
         BE    PATTERN             YES, SEARCH IS DONE
*              HAS ORE BEEN PARTIALLY PROCESSED BY REPLY ?       Y02893
TASKCHEK L     R5,OREOPBUF         GET POINTER TO TEMP. BUFFER   Y02756
         LTR   R5,R5               TEMPORARY BUFFER EXIST ?      Y02756
         BE    TASKABEN            IF NO, DO NOT FREE CORE       Y02756
         LH    R0,C0(R5)           GET LENGTH OF TEMP. BUFFER    Y02756
         L     R4,UCMPXA           GET ADDRESS OF TCB            Y02756
         L     R7,UCMASCB          GET COMM TASK ASCB            Y02756
         LR    R2,R3               SAVE CVT POINTER              Y02756
         FREEMAIN  RU,LV=(R0),A=(R5),SP=C231,BRANCH=YES          Y02756
*              FREE TEMPORARY BUFFER                             Y02756
         LR    R3,R2               RESTORE CVT POINTER           Y02756
TASKABEN L     R4,ORETCB           GET WTOR ISSUER'S TCB         Y02756
         LR    R7,R8               SAVE CURRENT ORE POINTER      Y02756
STARLOOP L     R8,ORELKP           GET POINTER TO NEXT ORE       Y02756
         LTR   R8,R8               IS POINTER ZERO ?             Y02756
         BE    STARCLTM            ABEND WTOR ISSUER             Y02756
         L     R5,ORETCB           GET TCB OF ANOTHER ORE        Y02756
         CR    R5,R4               ORE FOR SAME TASK ?           Y02756
         BNE   STARLOOP            NO, CONTINUE ORE SEARCH       Y02756
         LR    R8,R7               RESTORE ORE POINTER           Y02756
         B     CHECKORE            IF SAME TASK DO NOT ABEND YET Y02756
STARCLTM LR    R8,R7               RESTORE ORE POINTER           Y02756
         LH    R7,OREASID          GET WTOR ISSUER'S ASID        Y02756
         CALLRTM  TYPE=ABTERM,COMPCOD=X'B23',TCB=(R4),ASID=(R7)  Y02756
*              ABEND WTOR ISSUER                                 Y02756
         B     CHECKORE            GO CHECK NEXT ORE
*
         SPACE 3
*
* AT THIS POINT, FIELDS ASSOCIATED WITH THE ORE ARE CLEARED
*
PATTERN  SR    R4,R4               ZERO WORK REGISTER            Y02756
         ST    R4,UCMRPYQ          ORE CHAIN POINTER             Y02756
         ST    R4,UCMWQEND         LAST WQE POINTER              Y02756
         XC    UCMRPYI(C13),UCMRPYI  REPLY ID PATTERN
         XC    UCMRQNR(C2),UCMRQNR   ORE CURRENT COUNTER
         XC    UCMWQNR(C2),UCMWQNR   WQE CURRENT COUNTER
         XC    UCMMODE(C1),UCMMODE   MODE FLAGS
         EJECT
**********************************************************************
*              STAR  WWB  WAIT  SEGMENT                          Y02893
*                                                                Y02893
* THE FOLLOWING SEGMENT WILL SCAN THE WQE AND ORE WWB CHAINS     Y02893
* LOOKING FOR WAITING TASK BECAUSE OF UNAVAILABLE WQES OR ORES.  Y02893
* IF ANY ARE FOUND THEY WILL BE POSTED VIA CROSS MEMORY POST.    Y02893
*                                                                Y02893
*****************************************************************Y02893
         USING WWB,R6              ADDRESSABILITY FOR WWB        Y02756
         L     R6,UCMWECBH         GET FIRST WQE WWB ON CHAIN    Y02756
         LA    R7,UCMWECBH         GET ADDR OF HEAD POINTER      Y02756
         BAL   R14,STARWWBL        SEARCH WWB CHAIN              Y02756
         L     R6,UCMOECBH         GET FIRST ORE WWB ON CHAIN    Y02756
         LA    R7,UCMOECBH         GET ADDR OF HEAD POINTER      Y02756
         BAL   R14,STARWWBL        SEARCH WWB CHAIN              Y02756
         B     LABLUCM2            GO DO MORE CLEANUP            Y02756
STARWWBL CR    R6,R7               ANY WWBS ON CHAIN ?           Y02756
         BE    STARWWBO            IF NO,CHECK ORE WWB CHAIN     Y02756
         TM    WWBFLAGS,HEX80      POST BIT ON IN WWB ?          Y02756
         BO    STARLNXT            IF NO,GET NEXT WWB            Y02756
         STM   R0,R15,C0(R13)      SAVE REGS ACROSS XMPOST       Y02756
         LR    R9,R13              SAVE ADDR OF SAVEAREA         Y02756
         L     R13,WWBASCB         ADDR OF USERS ASCB            Y02756
         L     R5,UCMWAKUP         GET ERROR EXIT ADDRESS        Y02756
         L     R11,WWBECB          ADDR OF ECB                   Y02756
         L     R15,CVT0PT01        POST ENTRY POINT              Y02756
         O     R11,INTREGPS        INDICATE XMPOST               Y02756
         LR    R12,R5              SET ERROR ADDRESS             Y02756
         SR    R10,R10             POST INTERFACE                Y02756
         BALR  R14,R15             BRANCH TO POST                Y02756
         LR    R13,R9              RESTORE SAVEAREA ADDRESS      Y02756
         LM    R0,R15,C0(R13)      RESTORE REGISTERS             Y02756
         OI    WWBFLAGS,HEX80      TURN WWB POST BIT ON          Y02756
STARLNXT L     R6,WWBFWDPT         GET NEXT WWB                  Y02756
         B     STARWWBL            CHECK FOR EMPTY CHAIN         Y02756
STARWWBO BR    R14                 RETURN TO CALLER              Y02756
         EJECT
**********************************************************************
*              STAR  RELEASE  SEGMENT                            Y02893
*                                                                Y02893
* THE FOLLOWING SEGMENT WILL 1) LOOP THROUGH THE UCMES ZEROING   Y02893
* ALL I/O ECBS, 2) FREE THE REGISTER SAVEAREA USED FOR BRANCH    Y02893
* ENTRIES TO SYSTEM SERVICES AND 3) RELEASE ALL LOCKS HELD.      Y02893
*                                                                Y02893
*****************************************************************Y02893
LABLUCM2 L     R2,UCMLSTP            GET EIL POINTER FROM THE UCM
         USING UCMEIL,R2             ESTABLISH ADDRESSABILITY
         XC    UCMRPYL(C1),UCMRPYL   LAST ASSIGNED REPLY ID
         XC    UCMRQECB(C4),UCMRQECB REPLY REQUEST WAITING ECB
*****************************************************************Y02893
*                                                                Y02893
*        LOOP THROUGH ALL UCMES AND ZERO ALL I/O ECBS.           Y02893
*                                                                Y02893
*****************************************************************Y02893
         LM    R5,R7,UCMVEA        GET FIRST,LENGTH AND LAST UCMEY02756
         SR    R4,R4               SET INDEX REG               @YM08199
STARUCML L     R1,UCMRECBA+C4(R4)  GET ADDR OF I/O ECB           Y02756
         XC    C0(C4,R1),C0(R1)    ZERO I/O ECB                  Y02756
         LA    R4,C4(R4)           SET NEXT ECB INDEX          @YM08199
         BXLE  R5,R6,STARUCML      CHECK FOR END OF LIST         Y02756
*****************************************************************Y02893
*                                                                Y02893
*        FREE THE REGISTER SAVEAREA USED FOR BRANCH ENTRY TO     Y02893
*        SYSTEM SERVICES.                                        Y02893
*                                                                Y02893
*****************************************************************Y02893
         L     R4,UCMPXA           GET ADDRESS OF TCB            Y02756
         L     R7,UCMASCB          GET COMM TASK ASCB            Y02756
         LA    R0,C72              SET LENGTH OF FREEMAIN        Y02756
         LR    R1,R13              SET ADDRESS OF AREA           Y02756
         FREEMAIN  RU,LV=(R0),A=(R1),SP=C229,BRANCH=YES          Y02756
*              FREE SAVEAREA USED BY SYSTEM SERVICES             Y02756
         SPACE
*****************************************************************Y02893
*                                                                Y02893
*        RELEASE THE LOCAL AND CMS LOCKS.                        Y02893
*                                                                Y02893
*****************************************************************Y02893
         LR    R5,RBASE            SAVE BASE REGISTER            Y02756
FRECMS   SETLOCK RELEASE,TYPE=CMS,                               Y02751X
               RELATED=(ORE,IEAVSTAA(SETCMS)) RELEASE CMS LOCK   Y02751
FRELOCAL SETLOCK RELEASE,TYPE=LOCAL,                             Y02751X
               RELATED=(ORE,IEAVSTAA(SETLOCAL)) RELEASE LOCAL    Y02751
         LR    RBASE,R5            RESTORE BASE REGISTER         Y02756
         EJECT
**********************************************************************
*              STAR OPMSG SEGMENT                                Y02893
*                                                                Y02893
* AT THIS POINT THE MESSAGE TO THE OPERATOR WILL BE WRITTEN. IT MUST
* FIRST BE DETERMINED IF THIS ENTRY TO STAR IS THE RESULT OF A @ZA13859
* D23 ABEND. IF SO, SKIP THE OPERATOR MSG. IF NOT, THE MSG     @ZA13859
* BUFFER IS FILLED IN TO INFORM THE OPERATOR OF THE ABEND CODE @ZA13859
* AND THE STATUS OF THE DUMP.                                  @ZA13859
**********************************************************************
MSGFORM  EQU   *                                               @ZA13859
         LR    R1,R9               RESTORE REG SAVE AREA ADDRESS
         L     R9,C36(R1)          RESTORE UCM PREF REG          Y02756
         CLI   R0OFFSET+C3(R1),C12 WHERE IS THE COMP CODE
         BE    ITSIN1              IF R0=12 ON ENTRY, THE CC IS IN R1
*                                  OTHERWISE, CC IS IN THE SDWA
         L     R6,R1OFFSET(R1)     SET STAR WORK AREA POINTER
         LA    R6,C0(R6)           REMOVE FLAG BYTES
         USING SDWA,R6             SET SDWA BASE
         L     R5,SDWACMPF         GET ABEND CODE FROM THE SDWA
         SRL   R5,C12              RIGHT ALIGN
         B     TRANS               GO TO MAKE IT PRINTABLE
*
ITSIN1   L     R5,R1OFFSET(R1)     GET ABEND CODE FROM INPUT REG 1
*
TRANS    EQU   *                   THE ABEND CODE IS IN REG 5. IT IS
*                                  MADE PRINTABLE HERE
         SLL   R5,C20              LEFT ALIGN IN REG 5
         LA    R2,PRNTABL          GET TABLE ADDRESS
         LA    R6,C3               SET LOOP CONTROL
PRNTLOOP SR    R4,R4               ZERO WORK REG
         SLDL  R4,C4               GET FIRST DIGIT
         IC    R15,C0(R2,R4)       GET ITS PRINTABLE EQUIVILANT
         SLL   R15,C8              MOVE OUT OF WAY
         BCT   R6,PRNTLOOP         GO DO NEXT DIGIT IF ANY
         LR    R7,R1               SAVE SAVEAREA ADDRESS       @ZA13859
         TM    UCM2SFLG,UCM2WTOI   WAS STAR WTO ALREADY ISSUED @ZA13859
         BNO   ISSUEWTO            NO, CONTINUE WTO PROCESSING @ZA13859
         CLM   R15,MASKE,ABENDD23  IS COMP CODE = D23          @ZA13859
         BE    NOWTO               YES, BYPASS WTO PROCESSING  @ZA13859
ISSUEWTO EQU   *                   NO, CONTINUE WTO PROCESSING @ZA13859
         OI    UCM2SFLG,UCM2WTOI   TURN ON WTO ISSUED FLAG     @ZA13859
         LR    R6,R15              SAVE R15 ACROSS GETMAIN     @ZA13859
         GETMAIN  R,SP=C229,LV=C64 GET THE WTO BUFFER            Y02756
         LR    R8,R1               SAVE ADDR OF CORE             Y02756
         USING WPLRF,R8            ADDRESSABILITY FOR MSGAREA    Y02756
         MVC   C0(LN,R8),OPMSG1    MOVE MESSAGE TO AREA          Y02756
* IF LAST DIGIT IS DONE, PUT THE RESULTS IN THE MESSAGE
         STCM  R6,MASKE,WPLTXT+C8 RESULTS ARE IN REG6          @ZA13859
*                                    (LEFT ALIGNED)            @ZA13859
* THE ABEND CODE HAS BEEN CONVERTED AND PLACED IN THE MESSAGE
CCINMSG  TM    UCM2SFLG,UCM2DTAK   WAS A DUMP TAKEN
         BZ    NDT                 IF NOT, INDICATE SO IN MSG
* DUMP WAS TAKEN. BLANK OUT FIELD SAYING NO
         MVC   WPLTXT+C38(C2),MSGBL MOVE TWO BLANKS IN           Y02756
         B     OPMSG2              GO WRITE THE MESSAGE
*
NDT      MVC   WPLTXT+C38(C2),MSGNO  MOVE WORD NO INTO THE MSG   Y02756
*
* ISSUE THE WTO TELLING ABOUT THE COMM TASK ABEND
*
OPMSG2   EQU   *                                               @ZA13859
         WTO   MF=(E,(R8))          ISSUE WTO MSG                Y02756
         FREEMAIN  R,SP=C229,LV=C64,A=(R8) FREE AREA             Y02756
* THE ABEND CODE REPLACES THE YYY. BLANKS OR NO REPLACE THE ZZ
* DEPENDING ON WHETHER OR NOT A DUMP WAS TAKEN. THEY ARE NOT RESET
NOWTO   EQU   *                    LABEL TO BYPASS WTO PROCESS @ZA13859
         NI    UCM2SFLG,C255-UCM2WTOI TURN OFF WTO ISSUED FLAG @ZA13859
         EJECT
**********************************************************************
*
*              STAR  EXIT  SEGMENT                               Y02893
*                                                                Y02893
* MESSAGE HAS BEEN WRITTEN. TIME TO CLEAN UP AND EXIT.
*
**********************************************************************
* FIRST RELEASE THE REGISTER SAVE AREA IF ONE WAS OBTAINED.
STAREXIT L     R14,C56(R7)         GET RETURN ADDRESS            Y02756
         CLI   R0OFFSET+C3(R7),C12  12 IN REG 0 SAYS GETMAIN WAS ISSUED
         BNE   NOREL1              IF NOT 12, AVOID FREEMAIN.
* FREE AREA FROM GETMAIN. ADDRESS IS IN REG 1
RELESE   FREEMAIN R,SP=C229,LV=C72,A=(R7) DO FREEMAIN
* LOAD STAR RETRY ROUTINE TO GET THE RELOCATED ADDRESS.
NOREL    LOAD  EP=IEAVMQWR         GET ADDRESS OF RETRY ROUTINE IN R0
* SET RETURN CODE
         LA    R15,C4              RETURN CODE OF 4 SAYS RETRY
**********************************************************************
*                                                                     *
*                           EXIT POINT                                *
*                                                                     *
**********************************************************************
         BR    R14                 EXIT                          Y02756
*                                  RETURN TO CALLER              Y02756
NOREL1   LOAD  EP=IEAVMQWR         ADDRESS OF MQWR               Y02756
         LR    R5,R0               SAVE ADDRESS OF MQWR          Y02756
         L     R1,R1OFFSET(R7)     RESTORE SDWA ADDRESS          Y02756
         CLM   R1,MASK7,UCM2STAA    IS THIS ORIG ERROR SDWA?  @ZA30307
         BE    NSDWAFRE             YES, DO NOT FREE ORIG SDWA @ZA30307
*                                   NO, RECORD AND FREE SDWA   @ZA30307
         SETRP RC=4,RETADDR=(R5),FRESDWA=YES,RECORD=YES        @ZA30307
         BR    R14                  RETURN TO CALLER           @ZA30307
NSDWAFRE DS    0F                   SAVE ORIGINAL ERROR SDWA & @ZA30307
         SETRP RC=4,RETADDR=(R5),FRESDWA=NO,RECORD=YES  RECORD @ZA30307
         SETRP RETADDR=(R5),RC=4               ISSUE SET RP    @ZA05368
         BR    R14                 RETURN TO CALLER              Y02756
         EJECT
**********************************************************************
*                                                                     *
*                          REGISTER EQUATES                           *
*                                                                     *
**********************************************************************
R0       EQU   0                   *
R1       EQU   1                   *
R2       EQU   2                   *
R3       EQU   3                   *
R4       EQU   4                   *
R5       EQU   5                   *
R6       EQU   6                   *
R7       EQU   7                   *
R8       EQU   8                   *
R9       EQU   9                   *
R10      EQU   10                  *
R11      EQU   11                  *
R12      EQU   12                  *
R13      EQU   13                  *
R14      EQU   14                  *
R15      EQU   15                  *
PARMREG  EQU   1                   PARAMETER REGISTER
RBASE    EQU   12                  BASE REGISTER EQUATE
SAVEREG  EQU   13                  SAVE AREA POINTER
**********************************************************************
*                                                                     *
*                       GENERAL EQUATES                               *
*                                                                     *
**********************************************************************
C0       EQU   0                   ZERO
C1       EQU   1                   ONE
C2       EQU   2                   TWO
C3       EQU   3                   THREE
C4       EQU   4                   FOUR
C5       EQU   5                   FIVE
C8       EQU   8                   EIGHT
C12      EQU   12                  TWELVE
C13      EQU   13                  THIRTEEN
C20      EQU   20                  TWENTY
C36      EQU   36                  REG 9 OFFSET                  Y02756
C38      EQU   38                  THIRTY EIGHT
C56      EQU   56                  REG 14 OFFSET                 Y02756
C64      EQU   64                  LENGTH FOR GETMAIN
C231     EQU   231                 SUBPOOL FOR FREEMAIN          Y02756
C229     EQU   229                 SUBPOOL FOR GETMAIN           Y02756
C80      EQU   80                  LENGTH OF MOVE INST.          Y02756
C72      EQU   72                  LENGTH OF GETMAIN             Y02756
C255     EQU   255                 MASK BYTE                     Y02756
*
ZERO     EQU   0                   GENERAL PURPOSE ZERO
EXIT     EQU   3                   SVC OPERAND FOR SVC EXIT
HEX4     EQU   X'04'               TO TEST FOR COUNT OF FOUR     Y02756
HEX80    EQU   X'80'               MASK BYTE                     Y02756
HEX40    EQU   X'40'               MASK BYTE                     Y02756
MASK7    EQU   7                   MASK OF 7 (3 LOW ORDER BITS)
MASK8    EQU   8                   MASK OF 8 (HIGH ORDER BIT)
MASKE    EQU   14                  MASK OF E (3 HIGH ORDER BITS)
INCORE   EQU   8                   CONDITION CODE FOR LRA INST
*  THE FOLLOWING ARE OFFSETS INTO THE SAVE AREA
*  THEY ARE REQUIRED FOR CHECKING REGISTER CONTENTS AFTER THE INPUT
*  REGISTERS HAVE BEEN DESTROYED. NOTE THAT ALTHOUGH THE REGISTERS
*  WERE SAVED IN A 0 TO 15 STORE, REGISTERS 15,0, AND 1 WERE LOADED
*  INTO REGISTERS 6,7, AND 8 BEFORE THE STORE TOOK PLACE. THAT IS THE
*  REASON FOR THE RELATIVELY HIGH OFFSET.
*
R15OFFST EQU   24                  OFFSET OF R15 INTO SAVE AREA
R0OFFSET EQU   28                  OFFSET OF R0 INTO SAVE AREA
R1OFFSET EQU   32                  OFFSET OF R1 INTO SAVE AREA
* THE FOLLOWING ARE OFFSETS IN TO THE MSG OF THE WTO TO FILL IN THE
* VARIABLES. THE CONSTANTS USED FOLLOW THE EQUATES.
MSGBL    DC    C'  '               BLANKS FOR THE DUMP STATUS FIELD
MSGNO    DC    C'NO'               THE WORD NO FOR THE DUMP STAT FLD
* THE CONDITION CODE IS AN INPUT PARAMETER.
         EJECT
**********************************************************************
*                                                                     *
*                 CONSTANTS  AND  WORK  AREAS                         *
*                                                                     *
**********************************************************************
ZERODC   DC    F'0'                USED FOR ZERO COMPARES
TWELVE   DC    F'12'               COMPARAND OF DECIMAL 12
INTREGPS DC    X'80000000'        TO SIGNIFY AN INTERREGION POST Y02756
MINUS8   DC    H'-8'               USED TO ADDRESS THE UCM PRFX ADDR'S
*
*  THE FOLLOWING TABLE IS USED TO MAKE THE ABEND CODE PRINTABLE
PRNTABL  DC    C'0123456789ABCDEF' TO MAKE PRINTABLE
*
*  ABEND CONTROL FIELD
         DS    0F
ABENDA23 DC    X'00A23000'         ABEND DUMP AND ERROR CODE
ABENDB23 DC    X'00B23000'         ABEND DUMP AND ERROR CODE
ABENDD23 DC    X'C4F2F300'         EBCDIC D23 ABEND CODE       @ZA13859
*
**********************************************************************
*                                                                     *
*                        SVC DUMP HEADER LINE                         *
*                                                                     *
**********************************************************************
CTHEADER SDUMP HDR='IEAVSTAA..COMMUNICATIONS TASK STAR DUMP',MF=L
*                                                                Y02756
OPMSG1   WTO   'IEE824A YYY COMMUNICATION TASK ABEND, ZZ DUMP TAKEN',  *
               MF=L,DESC=1,ROUTCDE=1     WRITE THE MSG
LN       EQU   *-OPMSG1            LENGTH OF WTO                 Y02756
         SPACE 3
         DS    90X                 PATCH AREA
         SPACE 3
*
***********************************************************************
*                                                                     *
*                                                                     *
*                        DSECTS FOLLOW                                *
*                                                                     *
*                                                                     *
***********************************************************************
         TITLE 'IEAVSTAA - CVT'
         CVT    DSECT=YES
         TITLE 'IEAVSTAA - ORE'
         IHAORE DSECT=YES
         TITLE 'IEAVSTAA - PSA'
         IHAPSA
         TITLE 'IEAVSTAA - SDWA'
         IHASDWA
         TITLE 'IEAVSTAA - CTM'
         IHACTM  WWB
         TITLE 'IEAVSTAA - UCM'
         IEECUCM  FORMAT=NEW
         TITLE 'IEAVSTAA - WPL'
         IEZWPL  DSECT=YES
         TITLE 'IEAVSTAA - UCB'                                @ZA05368
         IEFUCBOB PREFIX=YES                                   @ZA13859
         IEERDCM                                               @ZA05368
         IEETDCM                                               @ZA05368
*
IEAVSTAA CSECT                     RESTART THE CSECT
ENDOFSTA EQU   *                   END OF PROGRAM REFERENCE
*
         END
