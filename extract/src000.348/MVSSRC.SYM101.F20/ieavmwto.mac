         TITLE 'IEAVMWTO--MLWTO SERVICE ROUTINE'
         MACRO
         PROLOG
*/*   START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVMWTO
*
*02*     CSECT-NAME = IEAVMWTO
*
*01*  DESCRIPTIVE-NAME = MULTI-LINE WTO SERVICE ROUTINE
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS = OS/VS2 REL3
*
*01*  FUNCTION = THE MLWTO SERVICE ROUTINE IS PART OF IGC0003E OR
*     SVC 35. IT RECEIVES CONTROL WHEN AN MLWTO IS ISSUED. A MULTIPLE
*     LINE WTO CAUSES A MAJOR WQE AND ONE OR MORE MINOR WQES TO BE
*     BUILT. THE WQES, MAJOR AND MINOR, CONTAIN MESSAGES FOR THE
*     CONSOLE OPERATOR AND ASSOCIATED CONTROL INFORMATION.
*
*     THE MODULE CONSTRUCTS A MAJOR WQE AND MINOR WQES FOR EACH
*     MLWTO. IT WILL ALSO CONNECT ADDITIONAL DATA LINES (OR MINOR WQES)
*     TO AN EXISTING MLWTO. CONNECTING IS RESERVED FOR KEY ZERO TO
*     SEVEN OR SUPERVISOR MODE USERS OF MLWTO.
*
*     THE ROUTINE PERFORMS THE FOLLOWING MAJOR FUNCTIONS IN HANDLING
*     AN MLWTO REQUEST.
*
*     1. SET UP ADDRESSABILITY AND OBTAIN CORE FOR A WORKAREA.
*
*     2. CHECK THAT THE WPL (WRITE PARAMETER LIST) IS WHOLLY
*        WITHIN THE CALLER'S ACCESSIBLE STORAGE.
*
*     3. CHECK THAT THE LINE TYPES FOR EACH LINE OF THE MESSAGE
*        IS CORRECT. THE MESSAGE WILL BE TERMINATED AT THE LAST
*        CORRECT LINE IF AN INVALID LINE TYPE SITUATION IS FOUND.
*
*     4. GET CORE FOR A MAJOR WQE AND ONE MINOR WQE IF THIS REQUEST
*        IS NOT ASKING TO ADD MORE LINES TO AN EXISTING MESSAGE.
*
*     5. FILL IN THE MAJOR WQE WITH THE FIRST LINE OF THE MESSAGE.
*        IF THE MESSAGE HAS A DESCRIPTOR CODE OF 9 AND NO CONTROL
*        LINE AS THE LINE THEN A DEFAULT CONTROL LINE IS SUPPLIED
*        AS THE FIRST LINE OF THE MESSAGE.
*
*     6. PASS THE FIRST LINE TO THE SUBSYSTEM EXIT.
*        IF THE USER IS A PROBLEM PROGRAM THE WQETEXT IS       @ZA19274
*        TRANSLATED TO INSURE ONLY PRINTABLE AND DISPLAY       @ZA19274
*        CHARACTERS ARE PASSED FROM THIS POINT.                @ZA19274
*
*     7. XMPOST THE UCMOECB SO THAT THE COMMUNICATIONS TASK CAN START
*        PROCESSING THE MLWTO.                                 @ZA03242
*
*     8. CHECK IF THE MAJOR WQE EXISTS SO THAT THE NEXT LINE CAN BE
*        ADDED. IF THE SERVICE REQUEST WAS TO ADD EXTRA LINES THEN
*        THE PROCESSING WOULD SKIP STEPS 4 TO 7. THE MODULE IS
*        WRITTEN SO THAT EACH ADDITIONAL LINE IS HANDLED IN THE
*        SAME MANNER.
*
*     9. CHECK IF THERE IS SPACE IN THE MINOR WQE/WQES FOR THIS LINE.
*        GET A NEW MINOR WQE IF THERE IS NO SPACE. THERE IS ALWAYS
*        AT LEAST ONE MINOR POINTED TO BY THE MAJOR. THIS IS DONE TO
*        MINIMIZE GETMAIN/FREEMAIN USAGE.
*
*     10. FILL IN THE NEXT LINE.
*
*     11. PASS THE MAJOR WQE AND THE MINOR WQE WITH THE NEW LINE
*         TO THE SUBSYSTEM WTO EXIT.
*         ON RETURN THE TEXT IS TRANSLATED AS IN STEP 6.       @ZA19274
*
*     12. POST THE UCMOECB.
*
*     13. IF THERE ARE ANY MORE LINES IN THE WPL THEN GO BACK TO
*         STEP 8. IF NOT THEN RETURN TO IEAVVWTO.
*
*02*     OPERATION = THIS MODULE RELIES HEAVILY ON THE EXTENDED
*        SAVEAREA IN THE SVRB. THE AREA IS MAPPED BY THE MACRO
*        IHACTM AND THE NAME OF THE DSECT IS XVSAV. SOME OF THE
*        INFORMATION IN THIS AREA IS SET UP BY IEAVVWTO PRIOR TO
*        THE CALL TO IEAVMWTO.
*01*  NOTES = THIS MODULE WAS MODIFIED SO THAT IT IS AS STRUCTURED
*     AS POSSIBLE. IT CONSISTS OF A NUMBER OF SEGMENTS THAT ARE
*     INSERTED IN THE TOP-LEVEL SEGMENT VIA THE BAL LOCAL MACRO
*     FEATURE. THE INCLUDED SEGMENTS APPEAR AT THE BEGINNING OF THE
*     ASSEMBLER LISTING. THE MODULE ALSO USES A NUMBER OF INTERNAL
*     SUBROUTINES. THESE ROUTINES APPEAR AT THE END OF THE ASSEMBLER
*     LISTING. THEY ALL START WITH AN ASSEMBLER COMMENT OF
*     '*        MACRO   '. THIS COMMENT WAS USED BY A DEVELOPMENT
*     PRINTING PROGRAM THAT WOULD LIST EACH SEGMENT OR SUBROUTINE
*     INDIVIDUALLY.
*
*     EACH SEGMENT AND ROUTINE WERE ORGANIZED SO THAT THEY HAVE
*     ONLY ONE ENTRY POINT AND ONE EXIT POINT. MOST SEGMENTS AND
*     ROUTINES ARE ALSO WELL STRUCTURED IN TERMS OF INSTRUCTION
*     FLOW. THE SEGMENTS USED IN THIS MODULE ARE LISTED.
*
*     1. PROLOG - THIS SEGMENT.
*
*     2. DATADEFS - CONTAINS THE DATA DECLARATIONS FOR THE DYNAMIC
*        WORKAREA AND MACRO CALLS FOR THE DEFINITION OF SYSTEM
*        CONTROL BLOCKS.
*
*     3. INITIAL - SETS UP ADDRESSABILITY, GETS CORE FOR THE WORKAREA
*        AND CHECKS FOR TYPE OF SERVICE CALL.
*
*     4. TSTMLWTO - CHECKS THAT WPL IS IN USER'S STORAGE AND CHECKS
*        THE WPL FOR CORRECTNESS.
*
*     5. GETLINES - FINDS OUT HOW MANY LINES ARE IN THE WPL.
*
*     6. CHKLINES - LIMITS SERVICE REQUEST TO 10 LINES AT A TIME.
*
*     7. CHKTYPE - CHECKS THAT LINES HAVE THE PROPER LINE TYPE
*        AND IN THE PROPER ORDER.
*
*     8. INCRMNT - LOCATES THE BEGINNING OF THE NEXT LINE IN THE
*        WPL.
*
*     9. WRAPUP - SAVES THE NUMBER OF LINES FOUND IN THE WPL.
*        SETS XVXOUDCL IF THE DEFAULT CONTROL LINE IS TO BE USED.
*
*     10.BLDMAJ - GET SPACE FOR THE MAJOR AND MINOR WQE. BUILD MAJOR.
*
*     11.GETMAJ - OBTAINS SPACE FOR THE WQE
*
*     12.FREEMAJ - FREES THE MAJOR WQE IF A MINOR COULDN'T BE
*        OBTAINED.
*
*     13.BMAJINIT - INITIALIZE THE MAJOR WQE.
*
*     14.BMAJFSTL - SET UP TO MOVE TEXT INTO MAJOR.
*
*     15.BMAJMVMS - MOVE TEXT INTO MAJOR. CHECK FOR TRAILING BLANKS.
*
*     16.BMAJCKNL - HAS BEEN DELETED AND ITS FUNCTION HAS      @ZA19274
*        BEEN CORRECTED AND MOVED TO THE SUBSEXIT SEGMENT.     @ZA19274
*
*     17.BLDMIN - FILL IN MINOR LINES.
*
*     18.MIN1INIT/MIN2INIT - INITIALIZE THE FIRST/SECOND LINE IN
*        THE MINOR WQE.
*
*     19.MIN1MOV/MIN2MOV - MOVE THE TEXT INTO THE FIRST/SECOND LINE
*        OF THE MINOR WQE.
*
*     20.BLNKSCAN - DELETE TRAILING BLANKS FROM TEXT IN MINOR.
*
*     21.SUBSEXIT - PASS MAJOR/MINOR WQE TO SUBSYSTEM WTO EXIT.
*        ON RETURN FROM THE SUBSYSTEM EXIT THE USER IS A       @ZA19274
*        PROBLEM PROGRAM THE WQE TEXT -MAJOR/MINOR- IS TRANS-  @ZA19274
*        LATED TO ALLOW ONLY PRINTABLE AND DISPLAY CHARACTERS  @ZA19274
*        FROM THIS POINT.                                      @ZA19274
*
*     22.POSTOECB - XMPOST UCMOECB TO WAKE UP COMM TASK.       @ZA03242
*
*
*     23. FREESAV - FREE THE MODULES DYNAMIC WORKAREA.
*
*     24. CONSTNTS - CONTAINS DECLARATIONS OF CONSTANTS AND
*        EQUATES USED IN THE PROGRAM.
*
*     THE INTERNAL ROUTINES USED IN THE MODULE ARE DESCRIBED BELOW.
*
*     1. GETMINOR - GETS SPACE FOR A MINOR WQE AND ADDS IT TO
*        QUEUE OF MINORS POINTED TO BY THE MAJOR.
*
*     2. ENDUP - DECREMENTS THE NUMBER OF LINES TO BE DONE. SETS
*        LINE TYPE TO DATA-END IF NEEDED.
*
*     3. FINDID - LOCATES MAJOR TO WHICH THE MINOR LINE IS TO BE
*        ADDED.
*
*     4. LINEHDLR - HAS BEEN DELETED AND ITS FUNCTION HAS BEEN
*        CORRECTED AND MOVED TO THE SUBSEXIT.                  @ZA19274
*
*     5. REFERLEN - CHECKS THAT USER CAN ACCESS THE WPL.
*
*     6. GETWQE - GETS A 192 BYTE WQE FROM THE WQE CELLPOOL.
*
*     7. WAITWQE - WAIT FOR A WQE TO BE FREED.
*
*     8. TEXTLINE - INCREMENTS A POINTER TO THE NEXT LINE IN THE WPL.
*
*     9. FRELCKS - FREES THE CMS AND LOCAL LOCK.
*
*     10.SETLCKS - OBTAINS THE LOCAL AND CMS LOCK.
*
*02*     DEPENDENCIES = THIS MODULE SHOULD BE LINKED WITH IEAVVWTO,
*        IGC0203E, IEEVCTE TO FORM ONE LOAD MODULE (ENTRY POINT
*        IS IEAVVWTO). THIS LINKING IS DONE AT SYSGEN. EACH MODULE
*        SHOULD BE ON A PAGE BOUNDARY.
*        MODULE SHOULD BE ON A PAGE BOUNDARY.
*
*03*        CHARACTER-CODE-DEPENDENCIES = DEPENDENT ON THE FOLLOWING
*           EBCIDIC CHARACTERS: BLANK('40'X), @('7C'X), *('5C'X),
*           +('4E'X). A RECOMPILATION WOULD BE NEEDED IF THESE
*           CHARACTER CODES WERE CHANGED.  IF ANY CHARACTER    @ZA19274
*           CODE IS CHANGED-TO OR FROM DISPLAY CONTROL OR      @ZA19274
*           STANDARD EBCDIC GRAPHICS- DCL TRTAB WILL NEED      @ZA19274
*           TO BE UPDATED TO REFLECT THIS.                     @ZA19274
*
*02*     RESTRICTIONS = NONE
*
*02*     REGISTER-CONVENTIONS = SEE THE DECLARATION OF REGISTERS IN THE
*        DECLARES SEGMENT.
*
*02*     PATCH-LABEL = PATCHLOC IS AN AREA OF 5% OF THE MODULE SIZE. IT
*        IS RESERVED FOR FUTURE USE.
*
*01*  MODULE-TYPE = CSECT
*
*02*     PROCESSOR = ASSEM
*
*02*     MODULE-SIZE = X'1317' BYTES
*
*02*     ATTRIBUTES = PAGED-LPA, ZERO PROTECT KEY, REENTERABLE,
*        SUPERVISOR MODE
*
*01*  ENTRY-POINT = IEAVMWTO
*
*
*02*     PURPOSE = THIS IS THE ONLY ENTRY POINT TO THE ROUTINE. IT
*        IS GIVEN CONTROL BY IEAVVWTO TO PROCESS A MULTI-LINE WTO
*        REQUEST.
*
*02*     LINKAGE = IEAVMWTO IS CALLED BY IEAVVWTO USING STANDARD
*        SYSTEM LINKAGE CONVENTIONS.
*
*02*     INPUT = THE FOLLOWING REGISTERS ARE SET UP BY IEAVVWTO.
*        REG3 = ADDR OF THE CVT.
*        REG4 = ADDR OF THE TCB.
*        REG5 = ADDR OF THE SVRB
*        REG6 = ADDR OF THE WPL.
*        REG7 = ADDR OF THE ASCB.
*        REG10 = ADDR OF THE UCM
*        REG12 = ADDR OF THE XVSAV WORKAREA
*        REG13 = ADDR OF THE CALLER'S SAVEAREA
*        REG14 = RETURN ADDRESS
*        REG15 = ENTRY POINT ADDRESS
*
*        THE WPL HAS BEEN CHECKED FOR VALIDITY BY IEAVVWTO. AT ENTRY
*        WE ALSO KNOW THAT A MULTI-LINE WTOR HAS NOT BEEN ISSUED.
*
*        THE XVSAV AREA HAS BEEN SET UP BY IEAVVWTO IN THE FOLLOWING
*        MANNER:
*        XVA8 = TIME TAKEN BY IEAVVWTO
*        XVDESCD = DESCRIPTOR CODES TO BE USED.
*        XVRCSAVE = ROUTE CODES TO BE USED.
*        XVMSGTYP = MESSAGE TYPE FIELD TO BE USED
*        XVMSGLGH = LENGTH OF FIRST LINE IN WPL.
*        XVD1PRIV = ON IF CALLER IS PRIVILEGED.
*        XVD1PP   = ON IF CALLER IS A PROBLEM PROGRAM.
*        XVD1AUTH = ON IF CALLER IS AUTHORIZED.
*        XVD2RDC  = ON IF ROUTE/DESCRIPTOR CODES WERE FOUND IN THE WPL
*        XVD2MSGT = ON IF MSGTYPE FIELD WAS FOUND IN THE WPL.
*        XVD2VALD = ON
*        XVCONID  = CONSOLE ID PASSED IN REG0 TO SVC 35.
*        SVWQEIDA = MSG ID PASSED IN REG 0 TO SVC 35.
*
*02*     OUTPUT = THIS ROUTINE CREATES NO STREAM OR LIST OUTPUT.
*
*02*     REGISTERS-SAVED = THE CALLER'S REGISTERS ARE SAVED IN HIS
*        SAVE AREA.
*
*02*     REGISTER-USAGE = THE REGISTER USAGE AND THE ASSOCIATED NAMES
*        ARE GIVEN IN THE FOLLOWING TABLE.
*         REG  NAME                 USAGE
*          0  RID       PARM REG FOR SVCS, WORK REG
*             R0        WORK REG
*
*          1  R1        WORK REG
*             RPARM     WORK REG
*             RWQE      ADDR OF WQE
*             RPRFX     ADDR OF THE UCM PREFIX.
*
*          2  RSSOB     ADDR OF SUBSYSTEM OPTIONS BLOCK,
*             RWORK2    WORK REG, ADDR OF MULTI-LINE PART OF WPL
*
*          3  RCVT      ADDR OF THE CVT
*             RCTR      COUNTER FOR HANDLING TEXT LENGTH
*
*          4  RTCB      ADDR OF THE TCB
*             RWPL2     ADDR OF TEXT LINE CURRENTLY BEING PROCESSED.
*
*          5  RWORK5    WORK REGISTER
*
*          6  RWPL      ADDR OF THE WPL
*
*          7  RASCB     ADDR OF THE ASCB
*             RMINR     ADDR OF MINOR WQE
*
*          8  RMAJR     ADDR OF THE MAJOR WQE
*             COUNT     USED ONLY TO DEVELOP COUNT OF NUMBER OF LINES
*                       TO BE PROCESSED.
*          9  RWORK9    WORK REG
*             LEN       USED IN TSTMLWTO SEGMENT AS PTR TO BYTE
*                       IN WPL TO BE TESTED BY REFERLEN.
*          10 UCMREG    BASE FOR UCM
*                       COMPLETION CODE FOR XMPOST             @ZA03242
*          11 RBASE     PROGRAM BASE
*                       ECB ADDR FOR XMPOST                    @ZA03242
*          12 XSAV      BASE FOR XVSAV AREA
*                       ERRET ADDR FOR XMPOST                  @ZA03242
*          13 RWKREG    SAVE AREA BASE AND WORK REG
*                       ADDR ASCB FOR XMPOST                   @ZA03242
*          14 RRETURN   WORK REG
*             R14       WORK REG
*
*          15 R15       WORK REG
*             RWORK15   WORK REG
*             RRET      WORK REG
*
*02*     REGISTERS-RESTORED = ALL OF THE CALLER'S REGISTERS ARE
*        RESTORED.
*
*01*  EXIT-NORMAL = THIS MODULE HAS ONLY ONE EXIT POINT WHICH IS AT
*     THE END OF THE MODULE.
*
*02*     CONDITIONS = IEAVMWTO ALWAYS RETURNS TO ITS CALLER, IEAVVWTO.
*        IT RETURNS AFTER SERVICING THE MULTI-LINE REQUEST.
*
*02*     OUTPUT=THE RETURN TO IEAVVWTO IS TAKEN FOR SUCCESSFUL AND
*        UNSUCCESSFUL SERVICING OF THE MULTI-LINE REQUEST. THE OUTPUT
*        FOR A SUCCESSFUL SERVICING IS:
*         XVWQEID = 3 BYTE MESSAGE SEQUENCE NUMBER, RIGHT JUSTIFIED.
*         XVRETCOD = 0 THEN NOTHING FOUND IN ERROR.
*                    4 AN ERROR WAS FOUND IN THE NUMBER OF LINES.
*                      MESSAGE WAS TRUNCATED TO TEN LINES AND LAST
*                      LINE SET TO DATA/END. OR
*                      THE TEXT LENGTH FOR ONE LINE WAS LESS THAN 1.
*                      THE MESSAGE TRUNCATED AT THE PREVIOUS LINE.
*
*                   12 THE LINE TYPE FOR A LINE WAS INVALID. THE
*                      MESSAGE WAS TO THE LAST VALID LINE AND ITS
*                      LINE TYPE WAS SET TO DATA/END.
*
*                   16 THE MLWTO HAD A WTP ROUTE CODE AND OTHER ROUTE
*                      CODES. THE WTP ROUTE CODE (ROUTE CODE 11)
*                      WAS IGNORED.
*
*        THE OUTPUT FOR AN UNSUCCESSFUL SERVICING IS:
*        XVWQEID = 0. NO MESSAGE WAS PUT OUT.
*        XVRETCOD = 4 -THE NUMBER OF LINES IN THE WPL WAS ZERO.
*
*                     -MESSAGE TEXT LENGTH FOR A LINE WAS      @ZA16869
*                      GREATER THAN 1; ALL LINES UP TO         @ZA16869
*                      ERROR LINE ARE PROCESSED                @ZA16869
*                                                              @ZA16869
*                   8 THE MESSAGE ID PASSED IN REG 0 DID NOT MATCH
*                     ANY ID FOR A WQE CURRENTLY IN THE SYSTEM.
*                     THIS OCCURS ONLY WHEN IEAVMWTO IS ATTEMPTING
*                     TO CONNECT NEW LINES TO AN EXISTING MESSAGE.
*                     THIS PROBLEM CAN ARISE IN THE FOLLOWING WAYS.
*                     1. REG 0 IS NOT ZERO FOR THE FIRST SERVICE
*                        REQUEST OF A MULTI-LINE WTO.
*
*                     2. THE MULTI-LINE MSG WAS GOING TO A CONSOLE
*                        THAT ENCOUNTERED AN I/O ERROR. CONSOLE
*                        SWTICH DELETED THE MSG AS MULTI-LINE MSGS
*                        CANT BE SWITCHED.
*
*                     3. THE USER LOST THE MESSAGE ID PASSED BACK
*                        IN REG 1 BY SVC 35.
*
*                  12 THE NEW MULTI-LINE MSG CONSISTS OF ONLY AN
*                     END LINE.
*
*                  16 ROUTE CODE 11 (WTP) WAS THE ONLY ROUTE CODE
*                     SPECIFIED.
*
*                  20 THE MULTI-LINE MSG WAS TO BE SET TO HARD COPY
*                     ONLY.
*
*02*     RETURN-CODES = THE RETURN CODES ARE SET IN XVRETCOD AND
*        THEIR MEANING IS DESCRIBED ABOVE.
*
*01*  EXIT-ERROR = THERE IS NO ERROR EXIT FROM IEAVMWTO. WHEN AN
*     ABEND CONDITION IS FOUND THE MODULE SETS XVD1PERR AND
*     RETURNS NORMALLY TO IEAVVWTO. IEAVVWTO WILL THEN ABEND THE
*     CALLER WITH A D23 ABEND CODE.
*
*
*02*     CONDITIONS = THE ERROR BIT, XVD1PERR, IS SET FOR THE
*        FOLLOWING REASONS.
*         1. NO SPACE COULD BE OBTAINED IN SUBPOOL 229 FOR THE
*            WORKAREA FOR IEAVMWTO.
*
*         2. THE WPL WASN'T LOCATED IN CORE THAT THE CALLER COULD
*            ACCESS.
*
*         3. SPACE COULD NOT BE OBTAINED FOR A WQE FROM THE WQE
*            CELL POOL.
*
*02*     RETURN-CODES = NONE
*
*01*  EXTERNAL-REFERENCES = SEE THE FOLLOWING
*
*02*     ROUTINES = THIS MODULE CALLS SUBSYSTEM WTO EXIT VIA
*        THE IEFSSREQ MACRO.
*
*02*     DATA-AREAS = THE FOLLOWING EXTERNAL DATA AREAS ARE USED
*        OR REFERENCED BY THIS MODULE.
*        ASCBASID = MEMORY ID
*        CVTCRMN  = ADDR OF GETMAIN BRANCH ENTRY
*        CVTBLDCP = ADDR OF BLD CPOOL ENTRY POINT
*        CVTFRECL/CVTGETCL = ADDR OF GET/FREE CELL ROUTINE.
*        CVTRMBR = ADDR OF FREEMAIN ENTRY POINT.
*        CVTVWAIT = ADDR OF BRANCH ENTRY TO WAIT.
*        PSALITA = ADDR OF LOCK INTERFACE TABLE.
*        TCBFLGS1 = BIT TCBFX IS SET TO PREVENT ASYNCHRONOUS EVENTS
*                   DURING A WAIT FOR A MINOR WQE.
*        UCMASCB  = ADDR OF ASCB FOR COMMTASK'S MEMORY.
*        UCMCMID  = MESSAGE SEQUENCE NUMBER.
*        UCMOECB  = OUTPUT ECB FOR COMM TASK
*        UCMSYST  = THIS BIT IS SET IF MLWTO WAS DELETED BY THE
*                   SUBSYSTEM.
*        UCMWQECP = WQE CELL POOL NUMBER
*        UCMWQEND = ADDR OF LAST WQE ON THE CHAIN.
*        UCMWQLM  = MAX NUMBER OF WQES ALLOWED.
*        UCMWQNR  = CURRENT NUMBER OF WQES.
*        UCMWTOQ  = ADDR OF START OF WQE CHAIN.
*
*01*  TABLES = THE FOLLOWING INTERNAL TABLES ARE USED IN THIS
*     ROUTINE:
*     LTABLE = A TABLE OF LINE LENGTHS FOUND IN THE WPL. THIS TABLE
*              IS USED FOR SECURITY REASONS. ONCE THE WPL HAS BEEN
*              CHECKED THAT IT LIES IN CALLERS STORAGE, THE LENGTHS
*              ARE ALL IN PROTECTED CORE AND CAN NOT BE MODIFIED BY
*              THE CALLER.
*    TRTAB     TABLE OF CHARACTERS USED TO INSURE PRINTABLE    @ZA19274
*              AND NON DISPLAY CONTROL CHARACTERS IN THE WQE   @ZA19274
*
*01*  MACROS = THE FOLLOWING SERVICES ARE USED. GETMAIN, FREEMAIN,
*     FREECELL, WAIT, IEFSSREQ, XMPOST, RETURN; MODESET, GETCELL,
*     BLDCPOOL, SETLOCK.
*
*     THE FOLLOWING MAPPING MACROS ARE USED. IHAWQE, IHACTM, IEZWPL,
*     IHAASCB, IEFJSSOB, IEFJESCT, IHAPSA, IKJRB, IKJTCB, CVT, IHASCVT,
*     IEZJSCB, IEECUCM.
*
*02*     SERIALIZATION = THE LOCAL AND CMS LOCKS ARE USED TO SERIALIZE
*        THE RESOURCES USED IN THIS MODULE.
*
*01*  CHANGE-ACTIVITY = Y02668, ZA03242, ZA08451, ZA14970, ZA14991,
*                       ZA19274,ZA20159,ZA29682
*
*01*  MESSAGES = NONE
*
*01*  ABEND-CODES = NONE
*
         MEND
         MACRO
         DATADEFS
WORKAREA DSECT                                                   Y02893
SAVEREGS DS    19F                STANDARD SAVEAREA              Y02893
RBASESAV DS    F                  USED TO SAVE REG 11            Y02893
XVSAVSAV DS    F                  USED TO SAVE REG 12            Y02893
WKPARMAD DS    F                  SAVE ADDR OF CALLER'S WPL      Y02893
SVRBADDR DS    F                  ADDR OF CURRENT RB             Y02893
LINDEX   DS    F                  INDEX TO LTABLE                Y02893
LTABLE   DS    12C                SAVE TABLE FOR LINE LENGTHS    Y02893
* THE FIRST ENTRY IN LTABLE IS NEVER USED.                       Y02893
GETSAVE  DS    5F                 SAVEAREA FOR GETWQE ROUTINE    Y02893
SPLEXTAD DS    F                  ADDR OF WQE EXTENSION          Y02893
WAITSAVE DS    6F                 SAVE AREA FOR WIITWQE ROUTINE  Y02893
ASCBSAVE DS    F                  SAVE AREA FOIR ASCB ADDR.      Y02893
WPL2SAVE DS    F                  SAVEAREA FOR RWPL2             Y02893
MLPART   DS    F                  ADDR OF START OF MULTI LINE    Y02893
*                                 PART OF WPL.                   Y02893
TCBSAVE  DS    F                  ADDR OF CALLER'S TCB           Y02893
SUBSPARM DS    F                  PTS AT THE SUBSLIST            Y02893
SUBSLIST DS    9F                 CONTAINS THE SSOB & SSWT       Y02893
EPARM    DS    CL24               ESTAE PARM AREA
UCMBPTR  DS    F                  ADDR OF THE UCM
PARMPTR  DS    F                  ADDR OF RECOVERY PARM AREA
         CNOP  2,4
RECSAVE  DS    H                  RESTORE MAP
RECREGS  DS    16F                RESTORE AREA FOR RETRY
WRKLENG  EQU   *                                                 Y02893
WRKSIZE  EQU   WRKLENG-WORKAREA                                  Y02893
IEAVMWTO CSECT                                                   Y02893
         EJECT
         IHAWQE DSECT=YES
         EJECT
         IHACTM XV
         EJECT
         IHACTM WWB                                              Y02893
         EJECT
         IHACTM FTPT
         EJECT
         IHAFRRS
         EJECT
         IEZWPL DSECT=YES
         EJECT
         IHAASCB                                                 Y02756
         EJECT
         IEFJSSOB  (WT),CONTIG=YES                               Y02757
         EJECT
         IEFJESCT                                                Y02757
         EJECT
         IHAPSA                                                  Y02751
         EJECT
         IHAESTA
         EJECT
         IKJRB  DSECT=YES
         EJECT
         IKJTCB  DSECT=YES
         EJECT
         CVT   DSECT=YES,LIST=YES
         EJECT
         IHASCVT LIST=YES
         EJECT
         IEZJSCB
         EJECT
         IEECUCM FORMAT=NEW
         MEND
         MACRO
&LABEL   FREESAVE                 ,                              Y02893
         EJECT
* START OF FREESAVE SEGMENT.                                     Y02893
*  INPUT - RWKREG(13) POINTS AT OUR WORK AREA.                   Y02893
*          FOUR + RWKREG CONTAINS A PTR TO CALLER'S SAVEAREA     Y02893
*                                                                Y02893
*  OUTPUT - OUR WORK AREA IS FREE'D.                             Y02893
*          RWKREG(13) POINTS AT THE CALLERS SAVE AREA.           Y02893
&LABEL   LR    RPARM,RWKREG       MOVE ADDR OF AREA TO REG1.     Y02893
         L     RID,WKFREECN       GET SUBPOOL AND SIZE PARM      Y02893
         L     RWKREG,FOUR(RPARM) RESTORE PTR TO CALLER'S AREA   Y02893
*        FREEMAIN R,LV=(0),A=(1)  FREE OUR AREA                  Y02893
         FREEMAIN R,LV=(0),A=(1)  FREE OUR AREA                  Y02893
* END OF FREESAVE SEGMENT                                        Y02893
         SPACE 2
         MEND
         MACRO
&LABEL   POSTOECB
         EJECT
* POSTOECB SEGMENT
* THIS SEGMENT POSTS THE UCMOECB USING A CROSS MEMORY POST.
        STM   R14,XSAV,SAVEREGS+12  SAVE REGS AROUND XMPOST    @ZA03242
        LR    RWORK9,RWKREG         SAVE SAVEAREA ADDRESS IN   @ZA03242
*                                   R9. REGS 9 AND 14 ARE THE  @ZA03242
*                                   ONLY ONES PRESERVED BY     @ZA03242
*                                   XMPOST.                    @ZA03242
         L     RUCM,UCMBPTR         SETUP UCM BASE REG         @ZA03242
         USING UCM,RUCM                                        @ZA03242
         SLR   R1,R1                SETUP REG1 AS BIT MASK SO  @ZA03242
         O     R1,HIBITON           THAT NO REFERENCES TO      @ZA03242
*                                   STORAGE NEED BE MADE AFTER @ZA03242
*                                   BASE REG IS UPDATED        @ZA03242
         L     XSAV,UCMWAKUP        ADDRESS OF ROUTINE TO GET  @ZA03242
*                                   CONTROL IF XMPOST FAILS    @ZA03242
         OR    XSAV,R1              INDICATE ERRET IS TO RUN   @ZA03242
*                                   MASTER SCHEDULER MEMORY    @ZA03242
         L     RWKREG,UCMASCB       ASCB OF MEMORY CONTAINING  @ZA03242
*                                   ECB TO POST                @ZA03242
         SLR   UCMREG,UCMREG        R10 CONTAINS COMPLETION    @ZA03242
*                                   CODE TO POST WITH          @ZA03242
         LA    RBASE,UCMOECB        ADDR OF ECB TO BE POSTED   @ZA03242
         OR    RBASE,R1             END OF LIST BIT ON         @ZA03242
         L     R15,CVTPTR                                      @ZA03242
         USING CVTMAP,R15                                      @ZA03242
         L     R15,CVT0PT01         BRANCH ENTRY ADDR OF XMPOST@ZA03242
         DROP  R15
         BALR  R14,R15              DO XMPOST                  @ZA03242
         LR    RWKREG,RWORK9        RESTORE SAVEAREA ADDRESS   @ZA03242
         LM    R14,XSAV,SAVEREGS+12 RELOAD REGS                @ZA03242
         DROP  RUCM
* END OF POSTOECB SEGMENT
         SPACE 2
         MEND
         MACRO
&LABEL   GETMAJ                   ,                              Y02893
         EJECT
*  GETMAJ SEGMENT                                                Y02893
*  THIS SEGMENT GETS A MAJOR WQE                                 Y02893
*  INPUT - UNCMWQNR, UCMWQLM, XVD1PRIV, XVD2CON,                 Y02893
*  OUTPUT - RWQE PTS AT THE MAJOR WQE IF ONE WAS AVAILABLE       Y02893
*           RWQE IS ZERO IF ONE WASN'T AVAILABLE.                Y02893
*           THE WQE IS ZEROED OUT                                Y02893
IEAJGET0 EQU   *                                                 Y02893
*  CHECK IF TWO WQES ARE AVAILABLE                               Y02893
&LABEL   L     RUCM,UCMBPTR       GET UCM ADDRESS
         USING UCM,RUCM
         LH    RWORK2,UCMWQNR     NUMBER  OF WQES USED           Y02893
         AH    RWORK2,KTWO        TWO  WQES NEEDED               Y02893
         CH    RWORK2,UCMWQLM     COMPARE WITH LIMIT ON WQES     Y02893
         BNH   IEAJGET1           WQES AVAIL, DON'T WAIT         Y02893
         DROP  RUCM
*  TWO WQES AREN'T AVAILABLE, CHECK IF USER IS PRIVILEGED.       Y02893
         TM    XVD1,XVD1PRIV      IS CALLER PRIVILEGED.          Y02893
         BO    IEAJGET1           YES, GET WQES.                 Y02893
*  USER ISN'T PRIVILEGED. WAIT FOR WQES TO BE FREED.             Y02893
         BAL   RRETURN,WAITWQE    WAIT FOR A WQE                 Y02893
         B     IEAJGET0           CHECK IF TWO WQES ARE AVAIL.   Y02893
IEAJGET1 BAL   RRETURN,GETWQE     GET AND ZERO A WQE.            Y02893
* CHECK IF WQE WAS AVAILABLE                                     Y02893
         LTR   RWQE,RWQE          IS ADDR RETURNED               Y02893
         BNZ   IEAJGET2           YES, STORE ADDR OF MAJOR       Y02893
* WQE WASN'T AVAILABLE. SET ERROR AND STOP FLAGS                 Y02893
         OI    XVX1,XVX1STOP      STOP PROCESSING WPL.           Y02893
         OI    XVD1,XVD1PERR      ABEND USER.                    Y02893
         B     IEAJGET3           SKIP TO CHECK IF WWB ALLOCATED.Y02893
* SET UP MAJOR FOR PROCESSING                                    Y02893
IEAJGET2 ST    RWQE,XVCMAJOR      SAVE ADDR OF MAJOR             Y02893
         OI    XVD3,XVD3BLDJ      SET BUILD MAJOR FLAG           Y02893
* CHECK IF A WWB HAS BEEN OBTAINED, IF SO, THEN FREE IT.         Y02893
IEAJGET3 CLC   XVWWB,KZERO        IS WWB ADDR STILL ZERO         Y02893
         BZ    IEAJGET4           YES, SKIP FREEING WWB.         Y02893
*  FREE THE WWB POINTED AT BY XVWWB.                             Y02893
         L     RWORK2,XVWWB       LOAD ADDR OF OUR WWB           Y02893
         USING WWB,RWORK2                                        Y02893
         L     RPARM,WWBFWDPT     PT AT NEXT WWB FORWARD ON CHN. Y02893
* CONNECT FORWARD WWB TO BACK WWB                                Y02893
         MVC   WWBBCKPT-WWB(FOUR,RPARM),WWBBCKPT                 Y02893
         L     RPARM,WWBBCKPT                                    Y02893
* CONNECT BACK WWB TO FORWARD WWB.                               Y02893
         MVC   WWBFWDPT-WWB(FOUR,RPARM),WWBFWDPT                 Y02893
         DROP  RWORK2                                            Y02893
*  OUR WWB IS NOW OUT OF THE CHAIN. FREE IT                      Y02893
         L     RID,WWBPARM        GET SUBPOOL # AND SIZE         Y02893
         LR    RPARM,RWORK2       ADDR OF WWB                    Y02893
*        FREEMAIN R,LV=(0),A=(1),BRANCH=YES  FREE THE WWB.       Y02893
         FREEMAIN R,LV=(0),A=(1),BRANCH=YES  FREE THE WWB.       Y02893
         MVC   XVWWB,KZERO        SET WWB ADDR TO ZERO.          Y02893
IEAJGET4 EQU   *                                                 Y02893
* END OF GETMAJ SEGMENT                                          Y02893
         SPACE 2
         MEND                                                    Y02893
         MACRO
&LABEL   FREEMAJ                  ,                              Y02756
         EJECT
*  FREEMAJ SEGMENT                                               Y02756
*  THIS SEGMENT FREES THE MAJOR WQE OBTAINED BY BLDMAJ.          Y02756
*  INPUT XVCMAJOR CONTAINS THE WQE ADDR.                         Y02756
&LABEL   L     RUCM,UCMBPTR
         USING UCM,RUCM
         L     RID,UCMWQECP       GET WQE CELL POOL ID           Y02756
         L     RPARM,XVCMAJOR     ADDR OF WQE CELL               Y02756
*        FREECELL  CPID=(0),CELL=(1),BRANCH=YES                  Y02756
         FREECELL  CPID=(0),CELL=(1),BRANCH=YES                  Y02756
*  CHECK IF THIS WQE WAS THE LAST ONE IN AN EXTENSION. IF SO FREEY02756
*  THE EXTENSION.                                                Y02756
         CH    RRET,K20           IS EXTENSION EMPTY             Y02756
         BNE   IEAJFRE2           NO, SKIP FREEING EXTENSION     Y02756
*  YES, THE PARAMETERS TO FREE THE EXTENSION WERE SET UP BY      Y02756
*  FREECELL                                                      Y02756
*        FREEMAIN  R,LV=(0),A=(1),BRANCH=YES                     Y02756
         FREEMAIN  R,LV=(0),A=(1),BRANCH=YES                     Y02756
IEAJFRE2 LH    RPARM,UCMWQNR      DECREMENT COUNT OF WQES        Y02756
         BCTR  RPARM,ZERO                                        Y02756
         STH   RPARM,UCMWQNR                                     Y02756
         MVC   XVCMAJOR,KZERO     INSURE MAJOR ADDR IS ZERO FOR
         DROP  RUCM
*                                 RECOVERY REASONS.
* END OF FREEMAJ SEGMENT                                         Y02893
         SPACE 2
         MEND
         MACRO
&LABEL   SUBSEXIT                 ,                            @Y02668P
         EJECT
*                                                                Y02757
*   SUBSYSTEM EXIT SEGMENT                                       Y02757
*   THIS SEGMENT WILL PASS THE MAJOR AND MINOR LINES TO THE      Y02757
*   SUBSYSTEM EXIT. THE SUBSYSTEM MAY CHANGE THE MSG AND/OR ASK  Y02757
*   THAT THE MESSAGE BE DELETED.                                 Y02757
*                                                                Y02757
*   INPUT - RMAJR IS ADDR OF MAJOR WQE                           Y02757
*           XVCMINOR CONATAINS THE ADDR OF THE MINOR WQE         Y02757
*           XVC3BLD1 AND BLD2 WILL BOTH BE ON IF THE MAJOR WQE   Y02757
*           WAS JUST BUILT                                       Y02757
*   OUTPUT- IF THE SUBSYSTEM ASKS TO DELETE THE MAJOR WQE THEN   Y02757
*           XVD2DELW WILL BE TURNED ON AND WMJMMAJD WILL BE SET  Y02757
*           ON IN THE MAJOR WQE                                  Y02757
*                                                                Y02757
*           THE MINOR MAY ALSO BE ASKED TO BE DELETED, BUT THE   Y02757
*           REQUEST WILL ONLY BE HONORED IF WMJMMAJD IS ON.      Y02757
*                                                                Y02757
*  FREE THE LOCKS                                                Y02757
&LABEL   BAL   RRET,FRELCKS       CALL THE FRELCKS ROUTINE       Y02751
* SET UP RETRY ADDRESS IN CASE SUBSYSTEM EXIT HAS PROBLEMS.
         L     R1,PARMPTR         GET ADDR OF PARM LIST
         USING PARMLIST,R1
         LA    RWORK2,IEAHSSRT        RETRY ADDR
         ST    RWORK2,PARMRTAD        SWITCH ADDR IN ESTAE PARMLIST
         MVI   PARMFTPT,FTSSOB    SET FOOTPRINT
         STM   R0,R15,RECREGS     SAVE THE REGS AT THIS POINT
         DROP  R1
*  SET UP SSOB AND SSWT                                          Y02757
         LA    RSSOB,SUBSLIST     BUILD BLOCKS IN OUR CORE.      Y02757
         ST    RSSOB,SUBSPARM     BUILD PARM LIST PTR            Y02757
         USING SSOB,RSSOB                                        Y02757
         MVC   SSOBID,IDCONS      IDENTIFY BLOCK AS AN SSOB      Y02757
         LA    R1,SSOBHSIZ        LENGTH OF SSOB                 Y02757
         STH   R1,SSOBLEN         PUT INTO SSOB LENGTH FIELD     Y02757
         LA    R1,SSOBWTO         SHOW THAT THIS CALL IS FOR A   Y02757
         STH   R1,SSOBFUNC        WTO                            Y02757
         SR    RWORK5,RWORK5      CLEAR REG FOR ZEROING FIELDS   Y02757
         ST    RWORK5,SSOBSSIB    NO SSIB FOR THIS CALL          Y02757
         ST    RWORK5,SSOBRETN    INSURE RETN IS INITIALLY ZERO  Y02757
         LA    R1,SSWTBGN         POINT SSOB AT SSWT             Y02757
         ST    R1,SSOBINDV                                       Y02757
         LA    R1,SSWTSIZE        PUT IN SIZE OF SSWT            Y02757
         STH   R1,SSWTLEN                                        Y02757
         ST    RMAJR,SSWTWQE      PUT IN ADDR OF MAJOR           Y02757
         ST    RWORK5,SSWTORE     NO ORE THIS TRIP               Y02757
         TM    XVD3,XVD3BLD1+XVD3BLD2  MAJOR WQE                 Y02757
         BNO   IEAHMINS                                          Y02757
         ST    RWORK5,SSWTMIN     NO MINOR YET                   Y02757
         B     IEAHSSGO                                          Y02757
* RETRY ROUTINE IF SUBSYSTEM EXIT ERROR REACHED ESTAE.
IEAHSSRT MVC   SSOBRETN,KZERO     CLEAR RETURN CODE FROM SUBSYSTEM
         L     R1,PARMPTR
         USING PARMLIST,R1
         MVC   PARMRTAD,KZERO     CLEAR RETRY ADDR
         DROP R1
         B     IEAHLOCK
IEAHMINS MVC   SSWTMIN,XVCMINOR   MOVE IN ADDR OF MINOR          Y02757
IEAHSSGO LA    RPARM,SUBSPARM     PT AT PARM LIST POINTER        Y02757
*        IEFSSREQ                 ,CALL THE SUBSYSTEM            Y02757
         IEFSSREQ                 ,CALL THE SUBSYSTEM            Y02757
         LR    RWORK5,RRET     SAVE RETURN INDICATOR FROM EXIT @Y02668P
* SET THE LOCKS AGAIN                                            Y02751
IEAHLOCK BAL   RRET,SETLCKS                                      Y02751
*CHECK TO SEE IF THIS WQE IS FOR A MINOR                         Y02757
         TM    XVD3,XVD3BLD1+XVD3BLD2  BLDING MAJOR              Y02757
         BNO   IEAHSUSP           NO, TURN OFF SUSPEND FLAG    @ZM30432
*CHECK IF SYBSYSTEM WANTS MESSAGE DELETED                        Y02757
* IF THE EXIT WAS SUCCESSFUL THEN REG 15 WAS ZERO ON RETURN FROM Y02893
* THE SUBSYSTEM. CHECK REG1 WHICH HAS RETURN INDICATION.         Y02893
         LTR   RWORK5,RWORK5         WAS EXIT SUCCESSFUL       @Y02668P
         BNZ   IEAHSUSP         NO CHECK IF USER WANTS MSG OUT @Y02668P
*CHECK FOR DELETION REQUEST                                      Y02757
         LA    RWORK5,SSWTNDSP    DON'T DISPLAY MESSAGE          Y02757
         CL    RWORK5,SSOBRETN    DID SUBSYSTEM ASK DON'T DISPLAYY02757
         BNZ   IEAHSUSP           NO CHECK USER                @Y02668P
         DROP  RSSOB                                             Y02893
         USING WMJMEXT,RMAJR      SET ADDRESSING TO MAJOR        Y02893
* NOW SET UP THE FLAGS SO THAT THIS MLWTO IS DELETED AND SENT    Y02893
* TO HARDCOPY.                                                   Y02893
         OI    WMJMECBF,WMJMMAJD  MAJOR IS DELETED               Y02757
* SET UP ADDRESSABILITY FOR UCMPREFIX                            Y02893
         L     RPRFX,UCMBPTR      MOVE OVER ADDR OF UCM          Y02893
         SH    RPRFX,KFOUR        PT AT UCMPRFX PTR              Y02893
         L     RPRFX,0(RPRFX)     PICK UP UCMPRFX PTR            Y02893
         USING UCMPRFX,RPRFX      SET ADDRESSABILITY             Y02893
         OI    UCMSFLG2,UCMSYSI  SET HOUSEKEEEPING IS NEEDED FLG Y02893
         OI    WMJMBUF,WMJMBUFE  MARK WQE AS SERVICED          @Y02668P
* CHECK TO SEE IF THE SUBSYSTEM HAS SPECIFIED HARDCOPY         @Y02668P
* BYPASS.                                                      @Y02668P
         TM    WMJMCS2,WMJMCS2F  HARDCOPY BYPASS SET?          @Y02668P
         BNO   IEAHHCRD          SET H.C. BITS                 @Y02668P
         NI    WMJMDSP,X'FF'-WMJMDSPB IND. DO NOT H.C.         @Y02668P
         B     IEAHSUSP          TURN OFF SUSPEND MODE         @Y02668P
IEAHHCRD OI    WMJMBUF,WMJMBUFC  IND. READY FOR H.C.           @Y02668P
         OI    WMJMDSP,WMJMDSPB  IND. SEND TO H.C.             @Y02668P
         B     IEAHSUSP          TURN OFF SUSPEND MODE         @Y02668P
         DROP  RPRFX              ALL DONE WITH PREFIX ADDRESS   Y02893
*GET RID OF UNPRINTABLE AND NON DISPLAY CHARACTERS IN THE      @ZA19274
* WQE IF THE USER IS A PROBLEM PROGRAM                         @ZA19274
IEAHSUSP EQU   *                                               @ZA19274
         TM    XVD1,XVD1PP    IS CALLED A P/P                  @ZA19274
         BZ    IEAHTRND       NO DO NOT TRANSLATE              @ZA19274
         TM    XVD3,XVD3BLD1+XVD3BLD2   IS IT A MAJOR          @ZA19274
         BNO   IEAHTRMI       IF NOT GO DO MINOR               @ZA19274
         SR    R1,R1            HANDLE MAJOR TEXT              @ZA19274
         LH    R1,WMJMTXTL      LENGTH OF MAJOR TEXT           @ZA19274
         BCTR  R1,0             DECREASE FOR EXEC              @ZA19274
         LA    R15,WMJMTXT      TEXTADDR                       @ZA19274
         EX    R1,TRINST                                       @ZA19274
         B     IEAHTRND      DONE WITH MAJOR WAIT FOR MINOR    @ZA19274
IEAHTRMI SR    R1,R1       DO MINOR                            @ZA19274
         DROP  RMAJR                                           @ZA19274
         USING WMNMEXT,RMINR                                   @ZA19274
         IC    R1,WMNMTL1    LENGTH OF 1ST MINOR TEXT          @ZA19274
         BCTR  R1,0          DECREASE FOR EXEC                 @ZA19274
         LA    R15,WMNMTXT1 START OF TEXT                      @ZA19274
         EX    R1,TRINST     TRANSLATE IT                      @ZA19274
         TM    WMNMML2,WMNMML2H  IS 2ND PRESENT                @ZA19274
         BO    IEAHTRND      END IF NOT                        @ZA19274
         IC    R1,WMNMTL2    PICK UP LENGTH                    @ZA19274
         BCTR  R1,0          DEC FOR EXEC                      @ZA19274
         LA    R15,WMNMTXT2  ADDRESS OF TEXT                   @ZA19274
         EX    R1,TRINST                                       @ZA19274
         DROP  RMINR                                           @ZA19274
         USING WMJMEXT,RMAJR                                   @ZA19274
IEAHTRND NI    WMJMDSP,X'FF'-WMJMDSPG TURN OFF SUSPEND BIT     @ZA19274
* FREE THE LOCKS                                                 Y02751
         BAL   RRET,FRELCKS                                      Y02751
* END OF HASPEXIT SEGMENT                                        Y02757
         SPACE 2
         MEND
         MACRO
         INITIAL                  ,                              Y02893
         EJECT
* SET UP AND INITIALIZE OUR SAVEAREA                             Y02893
IEAVMLWO SAVE  (14,12)            SAVE CALLERS REGISTERS         Y02893
         USING RBBASIC,RWORK5                                    Y02893
         LA    XSAV,RBEXSAVE      GET ADDR OF EXTENDED SAVEAREA  Y02893
         DROP  RWORK5                                            Y02893
         LR    RBASE,RRET         RRET(15) CONTAINS ENTRY POINT  Y02893
         USING IEAVMLWO,RBASE                                    Y02893
         USING XVSAV,XSAV
*        MODID                                                   Y02893
         MODID                                                   Y02893
*  ZERO OUT THE XVX FLAGS FILED SO THAT XVX1STOP BIT CAN BE USED.Y02893
         MVC   XVX,KZERO        XVX HAS R/D CODES FROM USER EXIT Y02893
* NOW GET SPACE FOR SAVE AREA AND WORK AREA                      Y02893
         L     RID,WKSIZE         GET SIZE OF WORK AREA          Y02893
         L     RPARM,WKSUBPL      GET SUBPOOL NUMBER OF WORKAREA Y02893
*        GETMAIN  RC,LV=(0),SP=(1) GET SPACE FOR WORKAREA        Y02893
         GETMAIN  RC,LV=(0),SP=(1) GET SPACE FOR WORKAREA        Y02893
* CHECK IF GETMAIN WAS SUCCESSFUL. IF NOT SET ERROR AND STOP BITSY02893
         LTR   RRET,RRET          CHECK GETMAINS RETURN CODE     Y02893
         BZ    IEAVSAVE           CONTINUE IF NO RETURN CODE     Y02893
* GETMAIN WAS NOT SUCCESSFUL                                     Y02893
         OI    XVD1,XVD1PERR      SET ABEND ERROR CONDITION      Y02893
         OI    XVX1,XVX1STOP      STOP PROCESSING MLWTO          Y02893
         B     IEAVGOBK                                          Y02893
IEAVSAVE ST    RPARM,EIGHT(RWKREG) PUT ADDR OF OUR SAVEAREA IN   Y02893
*                                  CALLERS SAVEAREA.             Y02893
         ST    RWKREG,FOUR(RPARM) POINT OUR AREA AT CALLER'S     Y02893
         LR    RWKREG,RPARM       LOAD ADDR OF OUR SAVEAREA      Y02893
         USING WORKAREA,RWKREG    SET ADDRESSABILITY FOR OUR AREAY02893
         ST    RWPL,WKPARMAD      SAVE ADDR OF WPL IN WKAREA     Y02893
* SET UP SECOND BASE REGISTER FOR THIS MODULE
         ST    UCMREG,UCMBPTR     SAVE ADDR OF THE UCM IN BASE PTR
         LA    RBASE2,K4095(,RBASE)  SET UP SECOND BASE REG
         USING    IEAVMLWO+4095,RBASE2
* ZERO OUT XVWWB FOR ADDR OF WWB                                 Y02893
         MVC   XVWWB,KZERO        MOVE IN A WORD OF ZEROS.       Y02893
* SAVE USER'S ASCB ADDR (REG 7) IN OUR SAVEAREA.                 Y02893
         ST    RASCB,ASCBSAVE                                    Y02893
         ST    RTCB,TCBSAVE       SAVE TCB ADDR                  Y02893
* SAVE THE PTR TO THE CURRENT RB.                                Y02893
         ST    RWORK5,SVRBADDR    ADDR OF SVRB IN REG5 IS INPUT  Y02893
* SET INDEX TO LENGTH TABLE TO TWO.                              Y02893
         LA    RPARM,TWO                                         Y02893
         ST    RPARM,LINDEX                                      Y02893
* CHECK FOR P/P USER OF MLWTO                                    Y02893
IEAVMLWS TM    XVD1,XVD1PP        IS USER A PROBLEM PROGRAM      Y02893
         BZ    IEAVTCON           NO, GO CHECK FOR MSG ID        Y02893
* P/P USERS CAN'T CONNECT MINOR LINES TO THE MAJOR WQE           Y02893
* WE DO WANT TO CHECK XVD1PP AND NOT XVD1AUTH TO INSURE REG 0    Y02893
* ISN'T AN IMPLIED PARAMETER TO SVC 35.                          Y02893
         XC    XVWQEIDA(THREE),XVWQEIDA   ZERO WQE ID
         B     IEAVSETE           SKIP AROUND CONNECTING PROCES  Y02893
* IF NOT PROBLEM PROGRAM, INDICATE PRIVILEGED TASK TO AVOID     YM06331
* MLWTO HANGUP BECAUSE OF UNAVAILABLE WQE'S.                    YM06331
IEAVTCON OI    XVD1,XVD1PRIV        INDICATE PRIVILEGED TASK    YM06331
         CLC   XVWQEIDA,KZERO       CALLER CONNECTING
         BE    IEAVSETE           NO, THE MSG ID FIELD IS EMPTY  Y02893
         OI    XVD2,XVD2CON       YES, INDICATE CONNECTING       Y02893
* SET UP THE ESTAE PROTECTION FOR THIS MODULE
IEAVSETE XC    EPARM(L'EPARM),EPARM    CLEAR THE ESTAE PARM LIST
         L     RUCM,UCMBPTR
         USING UCM,RUCM
         L     RWORK2,UCMFRRAD         GET RECOVERY MODULES ADDR
         LA    COUNT,EPARM       GET ADDR OF ESTAE'S PARM AREA
         MVC   SUBSLIST(ESTALEN),ELIST   MOVE IN ESTAE PARM LIST
         LA    RPARM,SUBSLIST     GET ADDR OF THE LIST
         DROP  RUCM
*        ESTAE (RWORK2),CT,PARAM=(COUNT),RECORD=YES,MF=(E,(1))
         ESTAE (RWORK2),CT,PARAM=(COUNT),RECORD=YES,MF=(E,(1))
         LA    RWORK2,EPARM            GET ADDR OF PARMLIST AREA
         ST    RWORK2,PARMPTR     PT TO PARM AREA
         USING PARMLIST,RWORK2
         LA    RPARM,IEAVRETY     MOVE IN RETRY ADDRESS
         ST    RPARM,PARMRTAD
         LA    RPARM,RECSAVE      ADDR OF REG SAVE AREA
         ST    RPARM,PARMRGAD     SET ESTAE PARM LIST PTR TO SAVEAREA
         MVC   PARMID,MODULEID    IDENTIFY MULE THAT CAUSED PROBLEM
         MVC   RECSAVE,ALLREGS    RELOAD ALL REGS ON RETRY
         STM   R0,R15,RECREGS     SAVE REGS FOR A RETRY
         DROP  RWORK2
IEAVGOBK EQU   *                                                 Y02893
*  END OF INITIAL SEGMENT                                        Y02893
         SPACE 2
         MEND
         MACRO
         CLNUP
* MLWTO CLEANUP ROUTINE.
* THIS ROUTINE GETS CONTROL IF THERE IS AND ERROR UNDER THE
* FRR PROTECTION.  IF SO, THEN WE WERE BUILDING A MAJOR OR MINOR
* WQE AND NO ERROR WAS EXPECTED. THIS ROUTINE WILL INSURE THAT
* THE SUSPENDED BIT IS TURNED OFF IN THE MAJOR WQE AND WILL LET
* THE ERROR CONTINUE.
*
* INPUT
*  REG2 PTS AT THE FRR PARM LIST
*  REG 13 PTS AT CALLERS REG SAVE AREA
*  REG 14-15 ARE THE RETURN AND ENTRY REGS
*  PARMRGAD IN THE PARM AREA IS THE ADDR OF OUR REG RESTORE AREA
*  REGS 3,4,6,7,10,11,12,13 ARE VALID IN THE RESTORE AREA
*
MWTOCLNP SAVE  (14,12),,*         SAVE CALLERS REGS
         USING *,R15
         USING PARMLIST,RWORK2
         LR    R0,RWKREG          MOVE CALLERS SAVEAREA PTR
         L     RPARM,PARMRGAD
         LM    RCVT,RWKREG,14(RPARM) RELOAD REG 3 TO 13 FROM REG SAVE
         DROP  R15                OUR BASE IS NOW SET UP
         L     RPARM,XVCMAJOR     GET ADDR OF MAJOR WQE
         LTR   RPARM,RPARM        IS THER A MAJOR WQE
         BZ    IEAVCLOT           IF NOT RETURN TO FRR
* IF THERE IS A MAJOR WQE, THEN IT SHOULD BE ON THE WQE QUEUE.
* INSURE THAT IT ISNT IN THE SUSPENDED STATE.
         USING WMJM,RPARM
         NI    WMJMDSP,X'FF'-WMJMDSPG TURN OFF SUSPEND BIT
* THE MAJOR WILL BE CLEANED UP BY IEAVMED2 AS LONG AS THE SUSPEND
* BIT IS OFF.
IEAVCLOT LR    RWKREG,R0          RESTORE CALLERS SAVE AREA PTR
         RETURN (14,12)           RETURN TO CALLER
         DROP  RPARM
         DROP  RWORK2
         MEND
         MACRO
         TSTMLWTO                 ,                              Y02893
         EJECT
*
* TESTMLWTO SEGMENT WILL INSURE THAT THE ENTIRE PARM LIST        Y02893
* IS IN CALLER'S STORAGE. IT ALSO CHECKS THE LINE TYPES          Y02893
* FOR CORRECTNESS.                                               Y02893
*
TSTMLWTO EQU   *
         LR    LEN,RWPL           ADDR TO BE TESTED              Y02893
* COMPUTE ADDR OF WPLLTF FIELD                                   Y02893
IEASLEN3 LA    LEN,THREE(LEN)   INCREMENT TO TEST MLWTO
IEASMSGL LA    RWORK2,FOUR      LOAD LGTH OF FIRST PART OF WPL   Y02893
* SET LEN TO POINT TO LAST BYTE IN MESSAGE PART OF WPL           Y02893
         SR    LEN,RWORK2     LEN=RWPL-4                         Y02893
         AH    LEN,XVMSGLGH       + (MSGLEN+4) +3                Y02893
         TM    XVD2,XVD2MSGT   MSG TYPE FIELD PRESENT            Y02893
         BO    IEASDRCP        YES, INCR LEN TO MSGTYP FLD       Y02893
* NO, CHECK FOR PRESENCE OF ROUTING AND DESCRIPTOR CODES.        Y02893
         TM    XVD2,XVD2RDC   ROUT/DESC CODES PRESENT            Y02893
         BZ    IEASSLEN       NO, ALL DONE COMPUTING LEN VALUE   Y02893
* YES INCREMENT LEN TO POINT AT THE LAST BYTE OF ROUTE CODES.    Y02893
         LA    LEN,FOUR(LEN)        +L(ROUTE AND DESC CODES)     Y02893
         B     IEASSLEN
* SET LEN TO POINT AT LAST BYTE OF MSGTYPE FIELD.                Y02893
IEASDRCP LA    LEN,SIX(LEN)       +L(ROUTE/DESC CODES&           Y02893
*                                 MSGTYPE FIELDS)                Y02893
         TM    XVD0,XVD0QID       CHK IF QID PRESENT IN WPL      Y02893
         BZ    IEASSLEN           NO, QID NOT THERE              Y02893
         LA    LEN,TWO(LEN)       INCR LEN TO LAST BYTE IN QID   Y02893
         USING WPL,RWPL
* NOW CHECK IF MLWTO IS QUEUED TO HARDCOPY ONLY.  THIS IS AN     Y02893
* ERROR CONDITION AND GETS A RETURN CODE OF 20(DEC).             Y02893
IEASSLEN TM    WPLMCSF1,WPLMCSFG    QUEUE TO HARD COPY ONLY
         BZ    IEASRTDC             NO, CHECK FOR ROUT/DESC CODES
         MVI   XVRETCOD,HCONLY    SET RETURN CODE 20 AND         Y02893
         OI    XVX1,XVX1STOP      SET STOP PROCESSING FLAG       Y02893
         B     IEASTOPA              IGNORE REQUEST              Y02893
IEASRTDC TM    XVD2,XVD2RDC   ROUT/DESC CODES EXIST              Y02893
         BZ    IEASGETL           NO, SKIP WTP CHECK             Y02893
         TM    XVRCSAVE+ONE,WPLROUTK WAS WTP SPECIFIED.          Y02893
         BZ    IEASGETL           NOT WTP, SKIP ERROR CHK        Y02893
* THIS MLWTO INCLUDES A WTP ROUTE CODE. CHECK IF IT IS A WTP ONLYY02893
         CLC   XVRCSAVE,WTPONLY  ANY OTHER ROUTE CODES           Y02893
         BNE   IEASWTPP           WTP NOT THE ONLY RC            Y02893
* ONLY WTP ROUTE CODE. SET STOP FLAG.                            Y02893
         OI    XVX1,XVX1STOP                                     Y02893
         B     IEASRETC                                          Y02893
IEASWTPP NI    XVRCSAVE+ONE,X'FF'-WPLROUTK TURN OFF WTP RC       Y02893
IEASRETC MVI   XVRETCOD,RCWTP    SET RETURN CODE 16              Y02893
         TM    XVX1,XVX1STOP      WAS STOP PROCESSING SET.       Y02893
         BO    IEASTOPA           YES, THEN SKIP TO STOP         Y02893
*
* NOW GET THE NUMBER OF LINES TO BE PROCESSED.                   Y02893
*
*        GETLINES                 ,                              Y02893
IEASGETL GETLINES                 ,                              Y02893
         TM    XVX1,XVX1STOP      WAS THERE AN ERROR IN GETLINES Y02893
         BO    IEASTOPA           YES THEN SKIP PROCESSING       Y02893
*  CHECK THE LENGTH OF THE MAJOR WPLOR FIRST PORTION OF A CON- @ZA16869
*  NECTING WPL FOR ZERO.                                       @ZA16869
IEASLLGH CLC   WPLLGH,KFOUR        IS LENGTH LESS THAN 4?      @ZA16869
         BNL   IEASTLMK            NO, CHECK # OF LINES.       @ZA16869
         MVI   XVRETCOD,LINERR      ZERO LINE LENGTH -- ERROR  @ZA16869
         OI    XVX1,XVX1STOP      SET STOP FLAG ON             @ZA16869
         B     IEASTOPA            RETURN TO CALLER            @ZA16869
IEASTLMK EQU   *                                               @ZA16869
         DROP  RWPL                                            @ZA16869
         USING WPLLTF,RWORK2                                   @ZA16869
         MVC   XVD0(ONE),WPLLINES  MOVE # OF LINES TO SAVEARES @ZA16869
         CLI   XVD0,NOLINES       ARE THERE ANY LINES TO PROCESS Y02893
         BH    IEASTLMX           YES, CONTINUE CHECKING WPL.  @ZA16869
         MVI   XVRETCOD,LINERR      ZERO # OF LINES -- ERROR
         OI    XVX1,XVX1STOP      SET STOP FLAG ON               Y02893
         B     IEASTOPA            RETURN TO CALLER
*        CHKLINES                 ,                              Y02893
IEASTLMX CHKLINES                 ,                              Y02893
         TM    WPLLTF,WPLLTFD      END LINE
         BZ    IEASTCLN            NO, GO CHECK FOR CONTROL LINE Y02893
         TM    WPLLTF,WPLLTFC      DATA END LINE
         BO    IEASTCLN          YES, START LINE TYPE CHECKING.  Y02893
* THE FIRST LINE IS KNOWN TO BE JUST AN  END LINE. SET FLAG      Y02893
* INDICATING THAT AND CHECK IF CONNECTING.                       Y02893
IEASCONA OI    XVX0,XVX0FLJE       SET LINE 1 JUST END
         TM    XVD2,XVD2CON       CONNECTING
         BO    IEASTORE           YES, SKIP TO STORE LINE COUNT  Y02893
         MVI   XVRETCOD,INVLDLT   NO, SET INVALID LINE TYPE RC   Y02893
         OI    XVX1,XVX1STOP      SET STOP PROCESSING FLAG       Y02893
         B     IEASTOPA
*
*        CHKTYPE                  ,CHECK LINE TYPE               Y02893
IEASTCLN CHKTYPE                  ,CHECK LINE TYPE               Y02893
* CHECK IF WE ARE ALL DONE PROCESSING THIS MLWTO                 Y02893
* WE CHECK FOR AN END FOUND OR FORCED OR FOR THE LINE COUNT MET. Y02893
* IF WE ARE ALL DONE THEN STORE THE LINE COUNT.                  Y02893
         TM    XVX0,XVX0FLJE+XVX0FEDE END FOUND OR FORCED.       Y02893
         BM    IEASTORE           YES, WRAP UP WPL PROCESSING    Y02893
         SR    RWORK15,RWORK15     SET 15 TO 0 FOR COMPARE
         IC    RWORK15,XVD0        # OF LINES
         CR    COUNT,RWORK15       END REACHED
         BE    IEASTORE            YES
*        INCRMNT                  ,NO, POINT TO NEXT LINE IN WPL Y02893
         INCRMNT                  ,NO, POINT TO NEXT LINE IN WPL Y02893
IEASCKLL CH    RWORK5,KFOUR        LENGTH <=4
         BH    IEASTCLN            NO, CHECK IF CONTROL LINE     Y02893
         BCTR  COUNT,0             DO NOT PUT OUT BAD LINE
         MVI   XVRETCOD,LINERR     SET RETURN CODE TO ERROR      Y02893
*                                 IN THE # OF LINES.             Y02893
         OI    XVX0,XVX0FEDE      FORCE END TO MLWTO             Y02893
* NOW STORE THE COUNT AND SET UP FOR CREATING THE FIRST LINE.    Y02893
*        WRAPUP
IEASTORE WRAPUP
*
IEASTOPA EQU   *                                                 Y02893
* END OF TSTMLWTO SEGMENT                                        Y02893
         SPACE 2
         MEND
         MACRO
&LABEL   GETLINES              ,                                 Y02893
         EJECT
* GETLINES SEGMENT                                               Y02893
* THIS SEGMENT WILL CHECK THAT THE FIRST WORD OF THE MLWTO       Y02893
* EXTENSION IS STILL IN USER'S CORE AND WILL PUT THE             Y02893
* NUMBER OF LINES IN XVD0.                                       Y02893
* INPUT = LEN IS ADDR OF LAST BYTE OF SINGLE LINE PART OF WPL    Y02893
*  OUTPUT - XVD0 HAS NUMBER OF LINES.                            Y02893
*           LEN IS THE ADDR OF WPLLINES FIELD.                   Y02893
*           RWORK2 PTS AT WPLLTF AND ADDRESSABILITY IS SET.      Y02893
*          MLPART IS SET TO ADDR OF WPLLTF                       Y02893
*                                                                Y02893
&LABEL   LA    LEN,FOUR(LEN)          INCREMENT LEN FOR FLAGS    Y02893
IEASRERF LR    RRET,LEN            SET INPUT TO REFERLEN
         BAL   RRETURN,REFERLEN    REFERENCE LOCATION
* REFERLEN WILL SET RRET(15) TO ZERO IF LOCATION ISN'T IN        Y02893
* THE CALLER'S ACCESSIBLE CORE.                                  Y02893
         LTR   RRET,RRET          IS WPL OK                      Y02893
         BNZ   IEASTLIN           YES, PICK UP # OF LINES        Y02893
* NO, THE WPL WASN'T IN USER'S ACCESSABLE CORE.                  Y02893
         OI    XVX1,XVX1STOP      STOP PROCESSING.               Y02893
         OI    XVX1,XVD1PERR      ERROR IN WPL                   Y02893
         B     IEASGETE           SKIP TO END OF SEGEMNT/        Y02893
IEASTLIN LR    RWORK2,LEN          REFERENCE MLWTO PORTION
         SH   RWORK2,KTHREE        BACK UP TO BEGINNING OF FLAGS
         ST    RWORK2,MLPART      SAVE ADDR TO MULTILINE PART    Y02893
IEASGETE EQU   *                                                 Y02893
* END OF GETLINES SEGMENT                                        Y02893
         SPACE 2
         MEND
         MACRO
&LABEL   CHKLINES                  ,                             Y02893
* CHKLINES SEGMENT                                               Y02893
* ALLOW NO MORE THAN 10 LINES TO BE PROCESSED AT A TIME.         Y02893
&LABEL   CLI   XVD0,TENLINES         # LINES GREATER THAN 10     Y02893
         BNH   IEASETC1            NO, VALID
         MVI   XVD0,TENLINES       SET # LINES TO 10             Y02893
         MVI   XVRETCOD,LINERR    SET RETURN CODE = 4            Y02893
         OI    XVX0,XVX0FEDE       FORCE END
IEASETC1 LA    COUNT,ONE             SET COUNT=1
* END OF CHKLINES SEGMENT                                        Y02893
         SPACE 2
         MEND
         MACRO
&LABEL   CHKTYPE                   ,                             Y02893
         EJECT
* START OF CHKTYPE SEGMENT                                       Y02893
&LABEL   TM    WPLLTF,WPLLTFA      CONTROL LINE
         BO    IEASCNT0            YES, CHECK COUNT
         TM    WPLLTF,WPLLTFB      LABEL LINE
         BO    IEASTLAB
         TM    WPLLTF,WPLLTFC      DATA LINE
         BO    IEASUPCT
         TM    WPLLTF,WPLLTFD     THIS LINE JUST END
         BO    IEASFEND            YES, FORCE END
         B     IEASRC12            NO, ERROR
IEASCNT0 CH    COUNT,KONE         COUNT=1
         BNE   IEASRC12            NO, ERROR
         TM    WPLLTF1,WPLLTFB+WPLLTFC+WPLLTFD    JUST CONTROL LINE
         BNZ   IEASRC12            NO, ERROR
         TM    XVD2,XVD2CON        CONNECTING
         BO    IEASRC12            YES, ERROR
         OI    XVX0,XVX0FLCL       SET FIRST LINE CONTROL LINE
         B     IEASTEST
IEASTLAB TM    WPLLTF1,WPLLTFA+WPLLTFC+WPLLTFD    JUST LABEL LINE
         BNZ   IEASRC12
         TM    XVX0,XVX0LL2F       LABEL LINE 2 BIT ON
         BO    IEASRC12
         TM    XVX0,XVX0LL1F       LABEL LINE 1 BIT ON
         BO    IEAS1LAB
IEASFLAB OI    XVX0,XVX0LL1F       SET LABLE LINE 1 BIT ON
         TM    XVX0,XVX0FLCL       CONTROL LINE FOUND
         BO    IEASCLF1            YES
         CH    COUNT,KONE         COUNT =1
         BE    IEASTEST
         B     IEASRC12            LABEL LINE INCORRECTLY PLACED
IEASCLF1 CH    COUNT,KTWO          COUNT=2
         BE    IEASTEST
         B     IEASRC12            NO, ERROR
IEAS1LAB TM    XVX0,XVX0FLCL       FIRST LINE CONTROL LINE
         BZ    IEASTC2
         CH    COUNT,KTHREE        COUNT = 3
         BNE   IEASRC12            NO, ERROR
         B     IEASETL2
IEASTC2  CH    COUNT,KTWO          COUNT=2
         BNE   IEASRC12            NO, ERROR
IEASETL2 OI    XVX0,XVX0LL2F       SET LABEL LINE 2 BIT ON
         B     IEASTEST
*
IEASUPCT TM    WPLLTF1,WPLLTFA+WPLLTFB+WPLLTFD
         BZ    IEASTEST
         TM    WPLLTF1,WPLLTFA+WPLLTFB   JUST DATA END LINE
         BNZ   IEASRC12            ERROR
         OI    XVX0,XVX0FEDE      SET END FLAG                   Y02893
         B     IEASTEST           CHECK FOR END OF LOOP          Y02893
IEASRC12 MVI   XVRETCOD,INVLDLT   SET RETURN CODE TO BAD LINETYP Y02893
IEASFEND OI    XVX0,XVX0FEDE      SET FORCE END FLAG
IEASTEST EQU   *
* END OF CHKTYPES SEGMENT                                        Y02893
         SPACE 2
         MEND
         MACRO
&LABEL   INCRMNT                   ,                             Y02893
         EJECT
* INCRMNT SEGMENT                                                Y02893
* THIS SEGMENT WILL STEP TO THE NEXT LINE IN THE WPL.            Y02893
* IT WILL INSURE THAT THE WPL IS IN THE USER'S CORE AND WILL     Y02893
* STORE THE LENGTH OF THE LINE IN MWTO'S SAVEAREA.               Y02893
* INPUT - LEN POINTS AT LAST BYTE OF LAST PROCESSED LINE.        Y02893
&LABEL   LA    COUNT,ONE(COUNT)      INC COUNT
         LA    LEN,TWO(LEN)          REFERENCE NEXT FIELD
         LR    RRET,LEN           LOAD ADDR TO CHECK             Y02893
         BAL   RRETURN,REFERLEN   INSURE BYTE IS IN USER'S CORE  Y02893
         LTR   RRET,RRET          BYTE IN USER'S CORE?           Y02893
         BNZ   IEASINCC           YES, GET LENGTH OF MSG         Y02893
         OI    XVX1,XVX1STOP      STOP PROCESSING                Y02893
         OI    XVD1,XVD1PERR      ABEND USER                     Y02893
         B     IEASTOPA           SKIP TO END OF TSTMLWTO        Y02893
IEASINCC LR    RWORK2,LEN
         SR    RWORK5,RWORK5      ZERO REG FOR INSERT CHAR
         IC    RWORK5,0(RWORK2)    LENGTH OF TEXT+4
* SAVE THE MSG LENGTH IN MWTO'S WORK AREA.                       Y02893
* IN THIS WAY A VALID MESSAGE WILL STAY                          Y02893
* VALID AS THE CALLER CAN NOT CHANGE THE MSG LENGTHS.            Y02893
         STC   RWORK5,LTABLE(COUNT) SAVE LGTH IN SAVEAREA.       Y02893
         AR    LEN,RWORK5          ADD MSG LENGTH +4
         LA    RWORK2,ONE(RWORK2)   INC TO REF LINE TYPE
         SH    LEN,KTWO            LEN=LEN+MSGLEN+4-2
         TM    WPLLTF1,WPLLTFD       END LINE
         BZ    IEASCKLL            NO, CHECK LINE LENGTH
         TM    WPLLTF1,WPLLTFC   DATA END LINE
         BO    IEASCKLL            YES, CHECK LINE LENGTH
         B     IEASTORE           CHECK IF ALL DONE              Y02893
* END OF INCRMNT SEGMENT                                         Y02893
         SPACE 2
         MEND
         MACRO
&LABEL   WRAPUP                  ,                               Y02893
         EJECT
* WRAPUP SEGMENT                                                 Y02893
*  INPUT - COUNT(REG 8 CONTAINS THE COUNT OF THE NUMBER OF LINES Y02893
*  TO PROCESS.                                                   Y02893
*  OUTPUT - COUNT IS STORED IN XVXD0 AND XVX                     Y02893
*   XVX0UDCL IS SET IF DEFAULT CONTROL LINE IS TO BE USED.       Y02893
*   XVD3TXT1 IS SET.                                             Y02893
&LABEL   STC   COUNT,XVD0          STORE COUNT
         STC   COUNT,XVX2           SET UP NO. OF LINES TO DO
         TM    XVD1,XVD1PP         PROB PGM
         BZ    IEASSSET
         OI    XVX0,XVX0FEDE       YES, FORCE END
*  CHECK IF WE NEED TO USE THE DEFAULT LINE.                     Y02893
IEASSSET TM    XVX0,XVX0FLCL       FIRST LINE CONTROL LINE       Y02893
         BO    IEASEXIT            YES, SKIP DEFAULT TEST.       Y02893
         TM    XVD2,XVD2CON        CONNECTING
         BO    IEASEXIT            YES, SKIP                     Y02893
         TM    XVD2,XVD2RDC        ROUT/DESC CODES
         BZ    IEASEXIT            NO, SKIP                      Y02893
         DROP  RWORK2
         TM    XVDESCD+ONE,WPLDESCI   DESC CODE 9                Y02893
         BZ    IEASEXIT
         OI    XVX0,XVX0UDCL       USE DEFAULT CONTROL LINE
IEASEXIT OI    XVD3,XVD3TXT1       NO, INDICATE BEGINNING OF REQUEST
* CHECK IF LAST BYTE IN THE WPL IS IN THE USER'S AREA.           Y02893
         LR    RRET,LEN           LOAD ADDR OF LAST BYTE.        Y02755
         BAL   RRETURN,REFERLEN   CHECK THE BYTE.                Y02755
         LTR   RRET,RRET          IS BYTE IN THE USER'S AREA.    Y02755
         BNZ   IEASTOPA           YES, SKIP TO END               Y02755
         OI    XVX1,XVX1STOP      NO, STOP PROCESSING WPL        Y02755
         OI    XVD1,XVD1PERR      ABEND THE USER.                Y02755
* END OF WRAPUP SEGMENT                                          Y02893
         SPACE 2
         MEND
         MACRO
&LABEL   BLDMAJ                 ,                                Y02893
         EJECT
* BLDMAJ SEGMENT.  THIS SEGMENT CREATES AND BUILDS THE MAJOR     Y02893
* WQE OR FIRST LINE OF THE MLWTO.                                Y02893
* INPUT - THE LOCAL AND CMS LOCKS ARE HELD.                      Y02893
*         THE WPL HAS BEEN CHECKED FOR PROPER LINE TYPES.        Y02893
*         XVSAV CONTAINS THE ROUTE/DESC CODES, MSGTYP FIELD      Y02893
*         AND LENGTH OF THE FIRST LINE.                          Y02893
* OUTPUT - A MAJOR WQE IS CONSTRUCTED AND PUT ON THE WQE CHAIN.  Y02893
*         THE MAJOR HAS AN EMPTY MINOR CHAINED TO IT.            Y02893
*        GETMAJ                   ,GET SPACE FOR A MAJOR WQE     Y02893
&LABEL   GETMAJ                   ,GET SPACE FOR A MAJOR WQE     Y02893
* CHECK IF MAJOR WAS OBTAINED.                                   Y02893
         TM    XVX1,XVX1STOP      IS STOP PROCESSING SET?        Y02893
         BO    IEAJOUT            YES, SKIP TO END AS NO WQE     Y02893
* A MAJOR WQE WAS OBTAINED. GET A MINOR.                         Y02893
         BAL   RRETURN,GETMINOR                                  Y02893
* CHECK IF A MINOR WAS OBTAINED.                                 Y02893
         TM    XVX1,XVX1STOP      IS STOP PROC FLAG SET          Y02893
         BZ    IEAJBINT           NO, GO INIT THE MAJOR          Y02893
* A MINOR WASN'T AVAILABLE. FREE THE MAJOR WQE.                  Y02893
*        FREEMAJ                                                 Y02893
         FREEMAJ                  ,FREE THE MAJOR WQE            Y02893
         B     IEAJOUT            GET OUT OF THE SEGMENT         Y02893
*        BMAJINIT                                                Y02893
IEAJBINT BMAJINIT                 ,INITIALIZE THE MAJOR          Y02893
         TM    XVX0,XVX0FLCL        FIRST LINE CONTROL LINE
         BO    IEAJLEN4           YES, SKIP TO SET UP FIRST LINE Y02893
         TM    XVX0,XVX0UDCL        USE DEFAULT CONTROL LINE
         BZ    IEAJLEN4           NO, SKIP TO SET UP FIRST LINE  Y02893
* SET UP TO MOVE IN THE DEFAULT CONTROL LINE.                    Y02893
         LA    RWORK15,TEXTDCL      USE DEFAULT CONTROL LINE
         LA    RCTR,SEVN               LENDTH DDFAULT CONTOL LINE
         LA    RWORK9,WMJMTXT+TWO    ADR OF TEXT POSITION IN MAJOR
         B     IEAJMOVM                                          Y02893
*        BMAJFSTL                                                Y02893
IEAJLEN4 BMAJFSTL                 ,SETUP TO MOVE FIRST LINE      Y02893
*        BMAJMVMS                                                Y02893
IEAJMOVM BMAJMVMS                 ,MOVE THE MESSAGE INTO WQE     Y02893
         OI    WMJMDSP,WMJMDSPG   SET MAJOR SUSPENDED            Y02751
         TM    XVX0,XVX0UDCL       USE DEFAULT CONTROL LINE
         BZ    IEAJMVLT           NO, MOVE IN LINE TYPE FLAGS    Y02893
         OI    WMJMLTYP,WMJMLTYA  SET LINE TYPE TO CONTROL       Y02893
         LR    RWPL2,RWPL         PREPARE PTR TO LINE BEING      Y02893
*                                 PROCESSED.                     Y02893
         B     IEAJOUT            END OF SEGMENT                 Y02893
         USING WPLLTF,RWORK2
IEAJMVLT MVC   WMJMLTYP,WPLLTF  MOVE LINE TYPE FLAGS TO MAJOR    Y02893
         DROP  RWORK2
IEAJTLNE BAL   RRETURN,TEXTLINE INCR TO NEXT LINE                Y02893
         BAL   RRETURN,ENDUP                                     Y02893
IEAJOUT  OI    XVD2,XVD2CON       INSURE CONNECTING BIT IS SET   Y02893
* END OF BLDMAJ SEGMENT                                          Y02893
         SPACE 2
         MEND
         MACRO
&LABEL   BMAJINIT                 ,                              Y02893
         EJECT
* INITIALIZE THE MAJOR WQE SEGMENT                               Y02893
* INPUT  - XVCMAJOR HAS ADDR OF MAJOR WQE.                       Y02893
*           RTCB CONTAINS ADDR OF OUR TCB.                       Y02893
*           ASCBSAVE CONTAINS ADDR OF OUR ASCB                   Y02893
*           XVA8 CONTAINS THE TIME OF DAY                        Y02893
*           RWPL(6) POINTS AT THE WPL                            Y02893
*           XVSAV HAS VARIOUS FLAGS SET UO SHOW CONDITION OF WPL Y02893
* OUTPUT - INITIAL PART OF MAJOR WQE IS CONSTRUCTED AND WQE IS   Y02893
*              ON THE QUEUE. THE SUSPEND BIT IS SET ON.          Y02893
*          FIRST CHAR OF TEXT IS BLANK                           Y02893
*          TIME AND ROUTE CODES ARE DECODED AND FILLED IN.       Y02893
*          RWORK2 POINT AT WPLLTF IN WPL.                        Y02893
*                                                                Y02893
&LABEL   L     RMAJR,XVCMAJOR       MAJOR WQE ADR
         USING WMJMEXT,RMAJR
         USING WPL,RWPL                                          Y02893
         OI    WMJMMLW,WMJMMLWB     SET MAJOR FLAG
         OI    WMJMBUF,WMJMBUFB+WMJMBUFD  SET IN USE AND GETMAINED
         USING TCB,RTCB
         ST    RTCB,WMJMTCB         STORE TCB ADR
         MVC   WMJMJTCB,TCBJSTCB  PUT ADDR OF JOB STEP'S TCB     Y02756
         L     RASCB,ASCBSAVE     RESTORE ASCB ADDR              Y02893
         USING ASCB,RASCB                                        Y02893
         MVC   WMJMASID,ASCBASID  PUT IN ASID OF CALLER'S MEMORY Y02893
         DROP  RASCB                                             Y02893
         L     RUCM,UCMBPTR
         USING UCM,RUCM
         L     RWORK2,UCMWQEND      END OF OUTPUT QUEUE          Y02893
         LTR   RWORK2,RWORK2        IS IT 0
         BNZ   IEAJLNK              NO, CHAIN TO LAST WQE        Y02893
         LA    RWORK2,UCMWTOQ       ADR OUTPUT QUEUE
IEAJLNK  ST    RMAJR,UCMWQEND       PUT NEW WQE AT END OF QUEUE  Y02893
         DROP  RMAJR
         USING WMJMEXT,RWORK2
         MVC   WMJMNXT(THREE),UCMWQEND+ONE  PUT NEW WQE ON QUEUE
         DROP RWORK2
         DROP  RUCM
         USING WMJMEXT,RMAJR
         MVC   WMJMCS1(TWO),WPLMCSF   MOVE MCS FLAGS
         TM    XVD1,XVD1AUTH      IS USER AUTHORIZED PROG        Y02755
         BZ    IEAJQ0CK           NO, CHK ON USE OF QREG0        Y02755
         OI    WMJMDSP,WMJMDSPH   SET USER AUTHORIZED FLAG.      Y02755
         B     IEAJTIME           SKIP TO UNPACK THE TIME        Y02755
IEAJQ0CK TM    WMJMCS1,WMJMCS1H   IS QREG0 BIT ON                Y02755
         BZ    IEAJTIME           NO, SKIP TO UNPACK             Y02755
* YES IT IS. AN UNAUTHORIZED USER CAN'T USE THE QREG0 MCS        Y02755
* FUNCTION. TURN THE BIT OFF.                                    Y02755
         OI    WMJMCS1,WMJMCS1B   TURN ON REG0 BIT INSTEAD       Y02755
         NI    WMJMCS1,X'FF'-WMJMCS1H TURN OFF QREG0 FLAG        Y02755
IEAJTIME UNPK  XVA0(EIGHT),XVA8(FOUR) UNPACK TIME                Y02893
         MVC   WMJMTS(TWO),XVA0+ONE    MOVE IN HOURS PART        Y02893
         MVI   WMJMTS+TWO,PERIOD  INSERT SEPERATOR               Y02893
         MVC   WMJMTS+THREE(TWO),XVA0+THREE MOVE IN THE MINUTES  Y02893
         MVI   WMJMTS+FIVE,PERIOD INSERT SEPERATOR               Y02893
         MVC   WMJMTS+SIX(TWO),XVA0+FIVE    MOVE IN THE SECONDS  Y02893
         MVI   WMJMPAD1,BLANK       BLANK CHAR AFTER TIME        Y02893
         MVC   WMJMPAD1+ONE(NINE),WMJMPAD1 BLANK OUT JOBNM FIELD Y02893
         MVC   WMJMRR,FZERO       INIT ROUTE CODES TO CHAR ZERO
         TM    XVD2,XVD2RDC         ROUT/DESC CODES
         BZ    IEAJTID1             NO, CHECK MSG TYPE           Y02893
         MVC   WMJMRTC(TWO),XVRCSAVE   MOVE ROUTING CODES        Y02893
         MVC   WMJMDEC(TWO),XVDESCD   DESCRIPTOR CODES           Y02893
         LR    RID,RTCB          SAVE TCB ADR                    Y02893
          LA   R1,FOUR          SET LOOP COUNTER                 Y02893
          L    RWORK5,WMJMRTC      ROUTING CODES
IEAJRCLP SR    RTCB,RTCB           SET UP FOR SHIFT              Y02893
         SLL   RWORK15,EIGHT       MOVE ROUTING CODES TO REG 15
         SLDL  RTCB,FOUR
         IC    RWORK15,TABLE(RTCB)   CONVERT ROUTING CODES
         BCT   R1,IEAJRCLP            TO PRINTABLE FORM          Y02893
         ST    RWORK15,XVA0        AND STORE IN MAJOR
         MVC   WMJMRR(FOUR),XVA0
         LR    RTCB,RID             RESTORE TCB ADR
         MVI   WMJMPAD,BLANK      BLANK AFTER ROUT CODES         Y02893
IEAJTMT1 TM    XVD2,XVD2MSGT      MSG TYPE FIELD PRESENT         Y02893
         BZ    IEAJTID1           NO, MOVE CONSOLE ID IF PASSED  Y02893
         MVC   WMJMMT1,XVMSGTYP  MESSAGE TYPE                    Y02893
IEAJTID1 TM    WPLMCSF1,WPLMCSFB+WPLMCSFH CONSOLE ID PASSED      Y02893
         BZ    IEAJAREA          NO, GET TO AREA ID              Y02893
         MVC   WMJMUID,XVCONID   MOVE CONSOLE ID
IEAJAREA L     RWORK2,MLPART      POINT AT MULTI LINE PART WPL   Y02893
         DROP  RWPL
         USING WPLLTF,RWORK2
IEAMALLF MVC   WMJMAREA,WPLAREA    PUT AREA ID IN MAJOR
         TM    XVD1,XVD1AUTH      IS CALLER AUTHORIZED
         BO    IEAJMBLK           YES. DONT INSERT DEFAULT FOR P/P
*  NON AUTHORIZED USERS OF MLWTO GET AN AREA ID OF 'Z' OR INLINE.
*  THIS IS TO PREVENT AN UNAUTH. CALLER FROM MESSING WITH A
*  AREA BEING USED BY A DYNAMIC STATUS DISPLAY MLWTO.
         MVI   WMJMAREA,CHARZ     AREA GETS SET TO INLINE.
         DROP  RWORK2
IEAJMBLK MVI   WMJMTXT,BLANK        BLANK FIRST CHARACTER
* CHECK IF THIS MLWTO SHOULD BE QUEUED TO HC DUE TO CHANGE IN    Y02893
* THE ROUTE CODES BY THE INSTALLATION EXIT.                      Y02893
         TM    XVD2,XVD2QFHC      DID EXIT CHANGE ROUTE CODES    Y02893
         BZ    IEAJEND            NO, SKIP TO END                Y02893
         OI    WMJMDSP,WMJMDSPB   YES, QUEUE TO HC               Y02893
IEAJEND  EQU   *                                                 Y02893
* END OF BMAJINIT SEGMENT                                        Y02893
         SPACE 2
         MEND
         MACRO
         BMAJFSTL
         EJECT
* BMAJFSTL SEGMENT                                               Y02893
* SET UP THE FIRST LINE FOR THE MOVE INTO THE MAJOR              Y02893
* INPUT  - RWPL PTS AT THE WPL                                   Y02893
*         RMAJR PTS THE MAJOR WQE                                Y02893
*        RWORK2 PTS AT THE WPLLTF FIELD                          Y02893
*         XVMSGLGH CONTAINS THE TEXT LENGTH                      Y02893
* OUTPUT- R15 IS ADDR OF TEXT TO USE                             Y02893
*        RWORK9 IS ADDR OF WHERE TO MOVE TEXT                    Y02893
*        RCTR IS LENGTH OF TEXT TO BE MOVED                      Y02893
*                                                                Y08923
         USING WPL,RWPL
IEAJLEN4 LH    RCTR,XVMSGLGH    TEXT LENGTH                      Y02893
         SH    RCTR,KFOUR
         LA    RWORK9,WMJMTXT+TWO   TEXT POSITION IN MAJOR
         LA    RWORK15,WPLTXT       ADR OF FIRST TEXT LINE
         DROP  RWPL
         USING WPLLTF,RWORK2
         TM    WPLLTF1,WPLLTFA     CONTROL LINE
         DROP  RWORK2
         BZ    IEAJLNLD            NO                            Y02893
         LH    RWORK5,K34         PICK UP ALLOWED LENGTH         YM0214
         TM    XVD1,XVD1AUTH      IS USER AUTHORIZED.            YM0214
         BZ    IEAJCHK1           NO, USE LENGTH OF 34 CHAR.     YM0214
         LH    RWORK5,K35         AUTH USERS CAN HAVE 35 CHARS   YM0214
IEAJCHK1 CR    RCTR,RWORK5     LENGTH > ALLOWED FOR CONTROL LINE YM0214
         BNH   IEAJVTX2            NO, MOVE TEXT                 Y02893
         LR    RCTR,RWORK5        YES,TRUNCATE TO MAX LENGTH     YM0214
         B     IEAJVTX2            MOVE TEXT INTO MAJOR          Y02893
IEAJLNLD LH    RWORK5,K70         PICK UP ALLOWED LENGTH         YM0214
         TM    XVD1,XVD1AUTH      IS USER AUTHORIZED.            YM0214
         BZ    IEAJCHK2           NO, USE LENGTH OF 70 CHAR.     YM0214
         LH    RWORK5,K71         AUTH USERS CAN HAVE 71 CHARS   YM0214
IEAJCHK2 CR    RCTR,RWORK5      LENGTH > MAX DATA OR LABEL LINE  Y02893
         BNH   IEAJVTX2            NO, MOVE TEXT                 Y02893
         LR    RCTR,RWORK5      TRUNCATE                         YM0214
IEAJVTX2 EQU   *                                                 Y02893
* END OF BAMJFSTL SEGMENT                                        Y02893
         SPACE 2
         MEND
         MACRO
&LABEL   BMAJMVMS                    ,                           Y02893
         EJECT
* BMAJMVMS SEGMENT                                               Y02893
* THIS SEGMENT WILL MOVE THE MESSAGE INTO THE MAJOR WQE          Y02893
* INPUT -RCTR IS THE LENGTH OF THE MESSAGE                       Y02893
*        RMAJR IS THE ADDR OF THE MAJOR WEQ                      Y02893
*        RWORK9 IS THE ADDR OF THE TEXT IN THE WQE               Y02893
* OUTPUT- THE TEXT WITH AUTHORIZATION FLAGS IS MOVED INTO THE    Y02893
*        WQE. THE LENGTH AND SEQUENCE NUBMER ARE ALSO ADDED TO   Y02893
*        THE WQE.                                                Y02893
*                                                                Y02893
&LABEL   LR    RWORK5,RCTR         LENGTH FOR EXECUTE            Y02893
         BCTR  RWORK5,0              DEC LENGTH BY 1 FOR EX
         EX    RWORK5,IEAMEXMV
* CHECK TO INSURE THAT TRAILING BLANKS ARE REMOVED. THE CHAR     Y02893
* INDEXED BY RWORK9 & RWORK5 WILL BE PUT INTO R1 AND COMPARED    Y02893
* WITH '00000040'X. IF EQ THEN RWORK5 IS DECREMENTED AND THE LOOPY02893
* CONTINUES. IF RWORK5 GETS TO ZERO THEN TEXT WAS ALL BLANK.     Y02893
         XR    R1,R1               USE R1 FOR IC OF TEXT CHAR    Y02893
IEAJBLKL EQU   *                                               @ZA14970
         LTR   RWORK5,RWORK5      IS RWORK5 ZERO YET?          @ZA14970
         BZ    IEAJBLKE           YES THEN TEXT WAS ALL BLANK  @ZA14970
         IC    R1,0(RWORK5,RWORK9) PICK UP CHAR FROM TEXT      @ZA14970
         CL    R1,BLANKTST         IS R1 JUST ZERO AND BLANK     Y02893
         BNE   IEAJBLKE            NO, GET OUT OF LOOP           Y02893
         BCTR  RWORK5,0            DECREMENT INDEX INTO TEXT     Y02893
         B     IEAJBLKL            LOOP AND TEST FOR END       @ZA14970
* IF THE TEXT WAS ALL BLANK THEN ONLY ONE BLANK IS USED.       @ZA14970
* THE FOLLOWING INSTRUCTION PUTS THE CORRECT LENGTH INTO RCTR    Y02893
* WHEN THE TEXT IS ALL BLANK OR NOT ALL BLANKS                   Y02893
IEAJBLKE LA    RCTR,ONE(RWORK5)    SET RCTR TO LENGTH OF TEXT    Y02893
*                                  WITH TRAILING BLANKS REMOVED  Y02893
         TM    WMJMDEC1,WMJMDECA+WMJMDECB  DESC CODE 1 OR 2
         BNZ   IEAJAUT1             YES, CHECK AUTHORIATION      Y02893
         TM    XVD1,XVD1AUTH        APF AUTHORIZED
         BO    IEAJSTXT              YES, OMIT P/P FLAG          Y02893
         MVI   WMJMTXT+ONE,PPWTOFLG   + FLAG
         LA    RCTR,TWO(RCTR)         UPDATE LENGTH
         B     IEAJSTOR                                          Y02893
IEAJAUT1 TM    XVD1,XVD1AUTH        AUTHORIZED                   Y02893
         BZ    IEAJMVAT                                          Y02893
         MVI   WMJMTXT,SUPACFLG     * FLAG
         B     IEAJSTXT
* ISSUER IS A NON-AUTHORIZED PROGRAM PROBLEM. DESC CODE 1 OR 2 @ZA14991
* SPECIFIED. FORCE DESC CODE 7 ON SO MLWTO WILL BE DOMMED AT   @ZA14991
* TASK TERMINATION.                                            @ZA14991
IEAJMVAT MVI   WMJMTXT,PPACTFLG     @ FLAG                       Y02893
         OI    WMJMDEC1,WMJMDECG  TURN ON DESC CODE 7          @ZA14991
IEAJSTXT LA    RWORK9,WMJMTXT+ONE    SHIFT TEXT TO CHAR POS 2    Y02893
         LA    RWORK15,WMJMTXT+TWO   SET REGS FOR TEXT SHIFT
         LR    RWORK5,RCTR         LENGTH FOR EXECUTE
         BCTR  RWORK5,0            DECR FOR EXECUTE
         EX    RWORK5,IEAMSHFT        SHIFT TEXT
         LA    RWORK9,WMJMTXT+ONE    ADR OF TEXT +1
         AR    RWORK9,RCTR         ADD TEXT LENGTH
         MVI   0(RWORK9),NOLINES   ZERO FIRST CHAR AFTER TEXT    Y02893
         LA    RCTR,ONE(RCTR)         UPDATE LENGTH
IEAJSTOR STH   RCTR,WMJMTXTL       STORE TEXT LENGTH             Y02893
         L     RPRFX,UCMBPTR       UCM ADR
         SH    RPRFX,KFOUR           SUBTRACT TO REFERENCE PREFIX PTR
         L     RPRFX,0(RPRFX)      LOAD PREFIX PTR
         USING UCMPRFX,RPRFX
         MVC   WMJMSEQ(THREE),UCMCMID+ONE    MOVE SEQ # TO MAJOR
         MVC   WMJMMSGN+ONE(THREE),UCMCMID+ONE   MLWTO ID
         MVC   XVWQEIDA(THREE),UCMCMID+ONE    SAVE ID FOR NEXT LINES
         L     RWORK5,UCMCMID
         CVD   RWORK5,XVA0            CONVERT ID TO DECIMAL
         LA    RWORK5,ONE(RWORK5)          INCREMENT SEQ #
         ST    RWORK5,UCMCMID         UPDATE SEQ # IN UCM
         UNPK  WMJMHCID+ONE(THREE),XVA0+SIX(TWO)   CONVERT TO
*                      PRINTABLE FORM AND STORE IN MAJOR
         OI    WMJMHCID+THREE,X'F0'   CHANGE ZONE
         MVI   WMJMHCID,BLANK          BLANK FIRST CHAR OF ID
         DROP  RPRFX
         TM    WMJMDEC2,WMJMDECI     DES CODE 9
         BZ    IEAJONNN            NO, NO ID ON CONTROL LINE     Y02893
         LA    RWORK15,WMJMTXT     ADR OF TEXT IN MAJOR
         AH    RWORK15,WMJMTXTL        ADD TEXT ADR TO LENGTH
         MVC   0(FOUR,RWORK15),WMJMHCID MOVE ID TO TEXT
         MVI   FOUR(RWORK15),BLANK    PUT BLANK AFTER MSG
         LH    RCTR,WMJMTXTL       LENGTH
         LA    RCTR,FIVE(RCTR)        UPDATE LENGTH
         STH   RCTR,WMJMTXTL       TEXT LENGHT
IEAJONNN EQU   *                                                 Y02893
* END OF BMAJMVMS SEGMENT                                        Y02893
         SPACE 2
         MEND
         MACRO
         BLDMIN
         EJECT
* START OF BLDMIN SEGMENT                                        Y02893
* BUILD THE MINOR WQE                                            Y02893
IEA1FIND EQU   *                                                 Y02893
         BAL   RRETURN,FINDID      FIND ID CONNECTING TO         Y02893
         TM    XVX1,XVX1NOID       ID FOUND
         BNO   IEA1YID            YES, CHECK IF MINOR NEEDED.    Y02893
* NO ID FOUND. STOP PROCESSING.                                  Y02893
         OI    XVX1,XVX1STOP      SET STOP PROCESSING FLAG       Y02893
         B     IEA1GOUT                                          Y02893
IEA1YID  L     RMAJR,XVCMAJOR      ADR MAJOR WQE                 Y02893
         USING WMJMEXT,RMAJR
         OI    WMJMMLW,WMJMMLWD    SET CHAIN ALTERED FLAG
* THERE WILL ALWAYS BE A MINOR WQE QUEUED OFF THE MAJOR.         Y02893
* FINDID WILL STORE THE ADDRESS OF THE MINOR TO USE              Y02893
* IN XVCMINOR FOR US.                                            Y02893
         L     RMINR,XVCMINOR      ADR OF MINOR CONNECTING TO
         TM    XVD3,XVD3BLD1+XVD3BLD2 ARE BOTH LINES AVAILABLE   Y02893
         BNZ   IEA1TLN1           BR IF EITHER LINE AVAILABLE    Y02893
* NO LINE AVAILABLE IN LAST MINOR. GET ANOTHER ONE.              Y02893
IEA1ALOC L     RUCM,UCMBPTR
         USING UCM,RUCM
         CLC   UCMWQNR,UCMWQLM     WQE AVAILABLE                 Y02893
         BL    IEA1GETN            YES, GET A MINOR              Y02893
         TM    XVD1,XVD1PRIV       PRIVILEGED USER
         BO    IEA1GETN            YES, WQES ALWAYS AVAILABLE    Y02893
         DROP  RUCM
         EJECT
* NOW BRANCH TO THE WAIT ROUTINE AND WAIT WITHOUT AN ECB.        Y02893
* THIS TYPE OF WAIT IS DONE SO THAT WE WILL GET CONTROL          Y02893
* BACK AFTER OUT MAJOR HAS BEEN DELETED BY IEAVMDSV.             Y02893
* THE BRANCH ENTRY IS USED SO THAT WE HOLD THE LOCAL LOCK.       Y02893
* THIS PREVENTS US FROM BEING POSTED BEFORE WE ISSUE THE WAIT.   Y02893
*                                                                Y02893
* TURN ON THE WAITING BIT IN THE MAJOR WQE                       Y02893
         OI    WMJMECBF,WMJMWAIT                                 Y02893
* DONT ALLOW ASYNCHRONOUS EXITS TO BE DISPATCHED WHIL WAITING    Y02893
* FOR A WQE. THIS COULD CAUSE AN INTERLOCK IF THE RB ISSUED      Y02893
* A WTO THAT THEN WAITED.                                        Y02893
* SET ADDRESSABILITY TO TCB AND SAVE RWPL2 (REG 4).              Y02893
         ST RWPL2,WPL2SAVE         SAVE ADDR OF TEXT LINE        Y02893
         L     RTCB,TCBSAVE        TCB SAVED FROM ENTRY PT       Y02893
         NI    XVD3,X'FF'-XVD3TFX  TURN OF'MWTO SET TFX' BIT     Y02893
         USING TCB,RTCB
         TM    TCBFLGS1,TCBFX      ARE ASYNCH EXITS NOT ALLOWED  Y02893
         BO    IEA1NSET            YES, DONT SET THE TCBFX BIT   Y02893
* THE ASYNCHRONOUS EIXTS ARENT ALLOWED BY SOME OTHER ROUTINE     Y02893
* SO WE SHOULD LEAVE THE TCBFX BIT ALONE.                        Y02893
         OI    TCBFLGS1,TCBFX      NO, BIT NOT SET SO SET IT     Y02893
         OI    XVD3,XVD3TFX        ALSO SET BIT SHOWING THAT     Y02893
* WE SET THE TCBFX BIT SO WE CAN TURN IT OFF                     Y02893
* FREE THE CMS LOCK                                              Y02893
IEA1NSET ST    RBASE,RBASESAV     SAVE BASE REG                  Y02893
         ST    XSAV,XVSAVSAV      SAVE XV BASE                   Y08293
         LR    R0,RWKREG          MOVE ADDR OF WORKAREA          Y02893
*  FREE THE FRR
         SETFRR D,WRKREGS=(11,12)
         LA    XSAV,EPARM         GET ADDR OF ESTAE PARM AREA
         ST    XSAV,PARMPTR       PT TO ESTAE PARM AREA
*        SETLOCK RELEASE,TYPE=CMS,RELATED=(UCM,IEAVMWTO(SETLCKS))Y02893
         SETLOCK RELEASE,TYPE=CMS,RELATED=(UCM,IEAVMWTO(SETLCKS))Y02893
         LR    RWKREG,R0          RESTORE WORKAREA BASE          Y02893
         L     RBASE,RBASESAV     RESTORE RBASE AND XSAV         Y02893
         L     XSAV,XVSAVSAV                                     Y02893
* SET UP FOR BR ENTRY TO WAIT.                                   Y02893
         L     R1,SVRBADDR        PICK UP ADDR OF SVRB           Y02893
         USING RBBASIC,R1         ADDR OF CURRENT RB             Y02893
* SET UP RETURN ADDR FROM WAIT BY STORING THE RETURN POINT ADDR  Y02893
* IN THE OLD PSW IN OUR RB.                                      Y02893
         LA    RWORK15,IEA1WTRT   LOAD ADDR OF RETURN POINT      Y02893
         ST    RWORK15,RBOPSW+FOUR SAVE IN RB                    Y02893
         ST    R1,WMJMAECB        PUT RB ADDR IN MAJOR           Y02893
* IEAVMDSV USES ADDR IN WMJMAECB AS THE RB TO POST.              Y02893
         L     R1,CVTPTR          ADDR THE CVT                 @YM00436
         DROP  R1                                                Y02893
         USING CVT,R1                                            Y02893
         L     R15,CVTVWAIT       BR ENTRY TO WAIT               Y02893
         DROP  R1                                                Y02893
         SR    R1,R1              WAIT WITHOUT ECB               Y02893
         LA    R0,ONE             WAIT COUNT OF ONE              Y02893
         STM   R0,R15,TCBGRS      STORE ALL REGS IN TCB          Y02893
         BR    R15                BRANCH TO WAIT                 Y02893
* THE REGISTERS GET RESTORED BY WAIT                             Y02893
* WAIT WILL FREE THE LOCAL LOCK.  GET BOTH LOCKS BEFORE          Y02751
* RESUMING PROCESSING.                                           Y02751
IEA1WTRT BAL   RRET,SETLCKS       SET LOCAL AND CMS LOCKS        Y02751
* NOW CHECK IF WE NEED TO TURN OFF THE TCBFX BIT. REG4 STILL     Y02893
* CONTAINS THE ADDR OF THE TCB.                                  Y02893
         TM    XVD3,XVD3TFX        DID WE SET THE TCBFX BIT      Y02893
         BNO   IEA1RSET            NO. LEAVE BIT ALONE           Y02893
         NI    TCBFLGS1,X'FF'-TCBFX YES. TURN TCBFX BIT OFF      Y02893
         DROP  RTCB               ADDR OF TCB                    Y02893
IEA1RSET L     RWPL2,WPL2SAVE     RESTORE PTR TO CURRENT LINE    Y02893
         B     IEA1FIND          FIND ID AGAIN TO INSURE THAT IT Y02893
*                                  HAS NOT BEEN PURGED WHILE SYSTEM
         EJECT
*                                  WAS ENABLED
IEA1GETN BAL   RRETURN,GETMINOR   GET A MINOR WQE                Y02893
*
*     THIS SECTION OF CODE BUILDS LINE 1 OF A MINOR WQE.
*
IEA1TLN1 OI    WMJMDSP,WMJMDSPG   SET MAJOR SUSPENDED            Y02751
         TM    XVD3,XVD3BLD1       BUILD LINE 1 OF MINOR         Y02893
         BZ    IEA2BLN2            NO, CHECK IF LINE 2           Y02893
*
*        MIN1INIT                 ,INITIALIZE LINE 1.            Y02893
         MIN1INIT                 ,INITIALIZE LINE 1.            Y02893
         TM    XVX0,XVX0FLJE       FIRST LINE JUST END LINE
         BO    IEA1DECR            YES, SKIP MOVING THE MSG      Y02893
         TM    WMNMLT1,WMNMLT1D    THIS LINE END LINE
         BZ    IEA1TXTL            NO, GET TEXT LENGTH
         TM    WMNMLT1,WMNMLT1C    DATA END LINE
         BZ    IEA1DECR            NO, JUST END LINE
*
*        MIN1MOV                                                 Y02893
IEA1TXTL MIN1MOV                  ,MOVE IN LINE 1                Y02893
         BAL   RRETURN,TEXTLINE    UPDATE TEXT POINTER         @ZA19274
         B     IEA1DECR           SKIP TO ENDUP ROUTINE          Y02893
         EJECT
* THIS SECTION BUILDS LINE 2 OF THE MINOR WQE                    Y02893
*
*        MIN2INIT                                                Y02893
IEA2BLN2 MIN2INIT                 ,INITIALIZE LINE 2             Y02893
         TM    XVX0,XVX0FLJE       FIRST LINE JUST END
         BO    IEA1DECR            YES, POST WTO ECB             Y02893
         TM    WMNMLT2,WMNMLT2D    END LINE
         BZ    IEA2TXTL            NO, GET TEXT LENGTH           Y02893
         TM    WMNMLT2,WMNMLT2C    DAT END LINE
         BZ    IEA1DECR            NO, JUST END LINE--POST ECB   Y02893
*
*        MIN2MOV                                                 Y02893
IEA2GLEN MIN2MOV                  ,MOVE IN LINE 2                Y02893
         BAL   RRETURN,TEXTLINE    UPDATE TEXT POINTER         @ZA19274
IEA1DECR BAL   RRETURN,ENDUP                                     Y02893
IEA1GOUT EQU   *                                                 Y02893
* END OF BLDMIN SEGMENT                                          Y02893
         SPACE 2
         MEND
         MACRO
         MIN1INIT
         EJECT
* MINI1INIT SEGMENT                                              Y02893
* INITIALIZE LINE 1 OF THE MINOR                                 Y02893
IEA1BLN1 L     RMINR,XVCMINOR      ADR OF MINOR                  Y02893
         NI    WMJMMLW,X'FF'-WMJMMLWH    TURN OFF DUMMY MINOR FLAG
         DROP  RMAJR
         USING WMNMEXT,RMINR
         MVC   WMNMUC1(ONE),0(RMAJR)  MOVE USE COUNT TO MINOR LINE 1
         NI    XVD3,X'FF'-XVD3BLD1   RESET BUILD LINE 1 FLAG
         OI    WMNMML2,WMNMML2H    SET 2ND LINE AVAILABLE
         TM    XVD3,XVD3TXT1       TEXT LINE 1 BEING USED
         BZ    IEA1TXL2            NO, MOVE LINE TYPE TO WQE     Y02893
         USING WPL,RWPL
         LA    RWORK15,WPLTXT      ADR OF FIRST TEXT LINE
         LH    RCTR,XVMSGLGH       TEXT LENGTH +4                Y02893
         L     RWORK2,MLPART      LOAD PTR TO WPLML PART         Y02893
         B     IEA1VTYP                                          Y02893
         DROP  RWPL
         USING WPLML,RWPL2
IEA1TXL2 LA    RWORK15,WPLMLTXT    ADDR OF TEXT                  Y20893
         L     R1,LINDEX          PICK UP NUMBER OF LINE         Y02893
         SR    RCTR,RCTR          ZERO FOR INSERT CHAR           Y02893
         IC    RCTR,LTABLE(R1)    GET LENGTH OF THIS LINE        Y02893
         LR    RWORK2,RWPL2        LINE TYPE ADR
         LA    RWORK2,TWO(RWORK2)  INC TO POINT TO LINE TYPE
IEA1VTYP MVC   WMNMLT1(ONE),0(RWORK2) MOVE LINE TYPE TO MINOR    Y02893
* END OF MIN1INIT                                                Y02893
         SPACE 2
         MEND
         MACRO
         MIN1MOV
         EJECT
* START OF MIN1MOV SEGMENT                                       Y02893
* MOVE IN LINE 1 OF THE MINOR                                    Y02893
* SET UP FOR MESSAGE LENGTH TEST                                 Y02893
IEA1TXTL SH    RCTR,KFOUR        ADJUST TEXT LENGTH              Y02893
* CHECK IF USER IS AUTHORIZED. IF SO ALLOW 71 CHARS IN TEXT.     Y02893
         LH    R1,K70             PICK UP LENGTH OF UNAUTH.      YM0214
         TM    XVD1,XVD1AUTH      IS USER AUTHORIZED             YM0214
         BNO   IEA1TXT2           NO, THEN ONLY ALLOW 70 CHARS   YM0214
         LH    R1,K71             YES, LET USER PUT OUT 71 CHARS YM0214
IEA1TXT2 CR    RCTR,R1            LEN<MAX FOR L/D LINE           YM0214
         BNH   IEA1BLK1            YES, USE TEXT LENGTH          YM0214
         LR    RCTR,R1            OTHERWISE, TRUNCATE            YM0214
IEA1BLK1 MVI   WMNMTXT1,BLANK      MOVE BLANK AS FIRST CHAR      Y02893
         TM    XVD1,XVD1AUTH       USER APF AUTHORIZED
         BZ    IEA1OVE3                                          Y02893
         LA    RWORK9,WMNMTXT1+1    ADR OF MINOR TEXT AREA
         LR    RWORK5,RCTR         LENGTH FOR EXECUTE
         BCTR  RWORK5,0            DECR BY 1 FOR EXECUTE
         EX    RWORK5,IEAMVTXT      MOVE TEXT TO MINOR
         LA    RCTR,ONE(RCTR)      UPDATE TEXT LENGTH
         B     IEA1STL1                                          Y02893
         DROP  RWPL2
IEA1OVE3 MVI   WMNMTXT1+ONE,BLANK     BLANK SECOND CHAR          Y02893
         LA    RWORK9,WMNMTXT1+2
         LR    RWORK5,RCTR         LENGTH FOR EXECUTE
         BCTR  RWORK5,0            DECR BY 1 FOR EX
         EX    RWORK5,IEAMVTXT      MOVE TEXT
         LA    RCTR,TWO(RCTR)      UPDATE TEXT LENGTH
IEA1STL1 STC   RCTR,WMNMTL1       STORE TEXT LENGTH IN MINOR     Y02893
         LA    RWORK9,WMNMTXT1      ADR OF TEXT AREA 2
         L     RMAJR,XVCMAJOR      ADR MAJOR WQE
         MVC   WMNMHCT1,WMJMHCID-WMJMEXT(RMAJR)      MOVE HARD COPY ID
*                                  FROM MAJOR T0 MINOR WQE
*        BLNKSCAN WMNMTL1,IEA1                                   Y02893
         BLNKSCAN WMNMTL1,IEA1                                   Y02893
* END OF MIN1MOV SEGMENT                                         Y02893
         SPACE 2
         MEND
         MACRO
&LABEL   BLNKSCAN  &LOCTION,&PRF  SCAN FOR TRAILING BLANKS       Y02893
* START OF BLNKSCAN SEGMENT                                      Y02893
* DELETE ANY TRAILING BLANKS                                     Y02893
&LABEL   LR    R1,RCTR            MOVE IN TEXT LENGTH            Y02893
         AR    R1,RWORK9          PT R1 TO BYTE AFTER TEXT       Y02893
         L     R14,MINUSONE       BXLE INCREMENT                 Y02893
         LR    R15,RWORK9         PREPARE COMPARAND FOR BXLE     Y02893
         LA    R15,TWO(R15)                                      Y02893
&PRF.LOOP BXLE  R1,R14,&PRF.DONE  HAVE WE SCANNED ENTIRE TEXT    Y02893
         CLI   ZERO(R1),BLANK     NO, SI THIS CHAR A BLANK       Y02893
         BE    &PRF.LOOP          YES, LOOP                      Y02893
&PRF.DONE CLR  R1,R15             DID WE STOP AT BEGINNING OF    Y02893
*                                 THE TEXT                       Y02893
         BL    &PRF.SKOT          YES, SKIP TO END               Y02893
* NO, THEN STORE NEW LENGTH OF TEXT                              Y02893
         SR    R1,RWORK9          COMPUTE LENGTH TO LAST NONBLK  Y02893
         LA    R1,ONE(R1)         ADD ONE FOR RIGHT LENGTH       Y02893
         STC   R1,&LOCTION        STORE LENGTH OF MESSAGE        Y02893
         LR    RCTR,R1            MOVE IN NEW LENGTH             Y02893
&PRF.SKOT EQU   *                 SKIP OUT ADDRESS               Y02893
* END OF BLNKSCAN SEGMENT                                        Y02893
         SPACE 2
         MEND
         MACRO
         MIN2INIT
*
*    THIS SECTION BUILDS LINE 2 OF A MINOR WQE.
*
IEA2BLN2 L     RMINR,XVCMINOR      ADR OF MINOR WQE              Y02893
         MVC   WMNMUC2(ONE),0(RMAJR)      COPY USE COUNT FROM MAJOR
         LA    RWORK2,WMNMUC2      ADR OF 2ND MINOR LINE
         O     RWORK2,WMNMUC1      PRESERVE USE COUNT
         ST    RWORK2,WMNMUC1      CHAIN TO FIRST LINE
         OI    WMNMML2,WMNMML2C    INDICATE MINOR
         NI    XVD3,X'FF'-XVD3BLD2 TURN OFF BUILD 2ND LINE FLAG
         NI    WMNMML2,X'FF'-WMNMML2H   RESET 2ND LINE AVAILABLE
         TM    XVD3,XVD3TXT1       TEXT LINE 1 BEING USED
         BZ    IEA2TX2A            GET TEXT ADR FOR NON-LINE 1   Y02893
         USING WPL,RWPL
         LA    RWORK15,WPLTXT      ADR TEXT                      Y02893
         LH    RCTR,XVMSGLGH       TEXT LENGTH +4                Y02893
         L     RWORK2,MLPART      LOAD ADDR OF MULTI LINE PART   Y02893
         B     IEA2MVL2           SKIP TO MOVE OF LINE TYPE      Y02893
         DROP  RWPL
         USING WPLML,RWPL2
IEA2TX2A LA    RWORK15,WPLMLTXT    ADR OF TEXT                   Y02893
         L     R1,LINDEX          GET CURENT LINE NUMBER         Y02893
         SR    RCTR,RCTR          ZERO FOR INSERT CHAR           Y02893
         IC    RCTR,LTABLE(R1)    LOAD LENGTH OF TEXT            Y02893
         LR    RWORK2,RWPL2        RWORK2 CONTAINS ADR OF LINE TYPE
         LA    RWORK2,TWO(RWORK2)   POINT TO LINE TYPE
         DROP  RWPL2
IEA2MVL2 MVC   WMNMLT2(ONE),0(RWORK2) MOVE LINE TYPE TO 2ND LINE Y02893
* END OF MIN2INIT                                                Y02893
         SPACE 2
         MEND
         MACRO
         MIN2MOV
         EJECT
* START OF MIN2M OV SEGMENT                                      Y02893
* MOVE IN LINE 2 OF THE MINOR                                    Y02893
* CHECK WHETHER TO ALLOW 70 OR 71 CHARACTERS OF TEXT             Y02893
IEA2TXTL LH    R1,K70             LOAD NONAUTH USER LENGTH       YM0214
         TM    XVD1,XVD1AUTH      IS USER AUTHORIZED             YM0214
         BNO   IEA2GLEN           NO, USER 70 CHAR               YM0214
         LH    R1,K71             YES, USE 71 CHARS FOR TEST     YM0214
IEA2GLEN SH    RCTR,KFOUR         ADJUST FOR FLAGS               YM0214
         CR    RCTR,R1            LEN < MAX FOR L/D LINE         YM0214
         BNH   IEA2BTXT            YES, BLANK FIRST CHAR         YM0214
         LR    RCTR,R1            NO, TRUNCATE                   Y02893
IEA2BTXT MVI   WMNMTXT2,BLANK      BLANK FIRST CHAR              Y02893
         TM    XVD1,XVD1AUTH       ISSUER APF AUTHORIZED
         BZ    IEA2OVE4            NO, BLANK SECOND CHAR         Y02893
         LA    RWORK9,WMNMTXT2+1    ADR OF MINOR TEXT AREA
         LR    RWORK5,RCTR         LENGTH FOR EXECUTE
         BCTR  RWORK5,0              ADJUST FOR EXECUTE
         EX    RWORK5,IEAMVTXT      MOVE TEXT TO MINOR
         LA    RCTR,ONE(RCTR)      INC MINOR LENGTH BY 1
         B     IEA2STL2                                          Y02893
IEA2OVE4 MVI   WMNMTXT2+1,BLANK    BLANK SECOND CHAR             Y02893
         LA    RWORK9,WMNMTXT2+2    ADR MINOR TEXT AREA
         LR    RWORK5,RCTR         LENGTH FOR EXECUTE
         BCTR  RWORK5,0              ADJUST FOR EXECUTE
         EX    RWORK5,IEAMVTXT
         LA    RCTR,TWO(RCTR)      UPDATE LENGTH
IEA2STL2 STC   RCTR,WMNMTL2       STORE MINOR LENGTH             Y02893
         LA    RWORK9,WMNMTXT2       ADR OF TEXT AREA 2
         MVC   WMNMHCT2,WMNMHCT1     HARD COPY ID
*        BLNKSCAN WMNMTL2,IEA2    SCAN FOR TRAILING BLANKS       Y02893
         BLNKSCAN WMNMTL2,IEA2    SCAN FOR TRAILING BLANKS       Y02893
* END OF MIN2MOV SEGMENT                                         Y02893
         SPACE 2
         MEND
         MACRO
         CONSTNTS
         EJECT
* START OF CONSTANTS FOR IEAVMWTO                                Y02893
*
TEXTDCL  DC    C'IEE932I'          DEFAULT CONTROL LINE
*
IEAMEXMV MVC   0(0,RWORK9),0(RWORK15) MOVE TEXT TO MAJOR
IEAMSHFT MVC   0(0,RWORK9),0(RWORK15) SHIFT TEXT 1 CHAR TO LEFT
IEAMVTXT MVC   0(0,RWORK9),0(RWORK15)  MOVE TEXT TO MINOR
*
*                                                              @ZA19274
TRINST   TR    0(0,R15),TRTAB                                  @ZA19274
*                                                              @ZA19274
         DS    0F                                                Y02893
WKSIZE   DC    AL4(WRKSIZE)   SIZE OF MWTO'S SAVE AND WORK AREA. Y02893
WKSUBPL  DC    AL4(SPL229)   GET CORE FROM SUBPOOL 231           Y02893
WKFREECN DC    AL1(SPL229),AL3(WRKSIZE) FREEMAIN PARAMETER       Y02893
WQEPLSZ  DC    F'4096'            SIZE OF WQE CELL EXTENSION     Y02893
SPLFRECN DC    AL1(SPL231),XL3'1000' FREE WQE EXTENSION PARM     Y02893
WWBPARM  DC    AL1(SPL231),AL3(WWBSIZE) WWB GET/FREE MAIN PARM   Y02893
SPL229   EQU   229
SPL231   EQU   231                                               Y02893
KONE     DC    H'1'
KFOUR    DC    H'4'
K20      DC    H'20'              USED TO CHECK FOR EXTENSION    Y02893
*                                 OF WQE CELL POOL.              Y02893
K34      DC    H'34'
K70      DC    H'70'
KZERO    DC    F'0'
K35      DC    H'35'                                             Y02893
K71      DC    H'71'                                             Y02893
WTPONLY  DC    X'0020'  CHECK FOR ONLY WTP ROUTE CODES           Y02893
MINUSONE DC    F'-1'              USED IN BXLE DECREMENT         Y02893
IDCONS   DC    C'SSOB'            SUBSYSTEM IDENTIFIER           Y02757
BLANKTST DC    X'00000040'         CHECK FOR BLANKS IN MSG       Y02893
MODULEID DC    C'MWTO'            FRR/ESTAE MODULE ID
FZERO    DC    C'0000'            CHARACTER ZEROS
CHARZ    EQU   C'Z'               INLINE AREA DESIGNATOR
NEWLINE  EQU   X'15'              NEWLINE CONTROL CHARACTER      Y02893
SPL250   EQU   250                                               Y02893
ZERO     EQU   0                                                 Y02893
ONE      EQU   1
TWO      EQU   2
THREE    EQU   3
FOUR     EQU   4
FIVE     EQU   5
SIX      EQU   6
SEVN     EQU   7
EIGHT    EQU   8
NINE     EQU   9                  LENGTH OF MOVE FOR JOBNAME     Y02893
TEN      EQU   10
SIXTN    EQU   16
TENLINES EQU   X'0A'              COMPARISON FOR TEN LINES       Y02893
NOLINES  EQU   X'00'                                             Y02893
BLANK    EQU   C' '                                              Y02893
PERIOD   EQU   C'.'               TIME STAMP FIELD SEPERATOR     Y02893
PPWTOFLG EQU   C'+'                PROB PGM--NO ACTION MSG
PPACTFLG EQU   C'@'                PROB PGM ACTION MSG FLAG
SUPACFLG EQU   C'*'                SUPERVISOR ACTION MSG
K4095    EQU   4095
*  RETURN CODE EQUATES                                           Y02893
LINERR   EQU   X'04'  ERROR FOUND IN NUMBER OF LINES             Y02893
NOIDMCH  EQU   X'08'  COULDN'T FIND A MATCH FOR IN IN REG 0      Y02893
INVLDLT  EQU   X'0C'  LINE TYPE WAS INVALID.                     Y02893
RCWTP    EQU   X'10'  WTP ROUTE CODE WAS USED.                   Y02893
HCONLY   EQU   X'14'  MLWTO WAS FOR HARDCOPY ONLY.               Y02893
         DS    0F
TABLE    DC    C'0123456789ABCDEF'   TABLE TO CONVERT ROUT CODES
         DS    0F
TRTAB    DC    74X'40'
         DC    X'4A4B4C4D4E4F504040404040404040405A5B5C5D5E5F' @ZA19274
         DC    X'60614040404040404040406B6C6D6E6F404040404040' @ZA19274
         DC    X'404040407A7B7C7D7E7F408182838485868788894040' @ZA29682
         DC    X'4040404040919293949596979899404040404040'     @ZA19274
         DC    X'4040A2A3A4A5A6A7A8A9'                         @ZA29682
         DC    23X'40'                                         @ZA19274
         DC    X'C1C2C3C4C5C6C7C8C940404040404040D1D2D3D4D5D6' @ZA19274
         DC    X'D7D8D94040404040404040E2E3E4E5E6E7E8E9404040' @ZA19274
         DC    X'404040F0F1F2F3F4F5F6F7F8F9404040404040'
         DS    0F                                              @ZA19274
D23      DC    X'80D23000'         INVALID PARM LSIT ERROR
KTWO     DC    H'2'
KTHREE   DC    H'3'
KTEN     DC    H'10'
ALLREGS  DC    X'FFFF'             RESTORE ALL REGS MAP
HIBITON  DC    X'80000000'         END OF LIST INDICATOR       @ZA03242
PATCHLOC DS    50F                PATCHAREA
FTLOCK   EQU   X'04'              LOCK FOOT PRINT
FTSSOB   EQU   X'03'              SUSBYSTEM EXIT FOOT PRINT
ELIST    ESTAE ,MF=L              CREATE ESTAE PARM LIST
         MEND
         EJECT
         PROLOG                   ,BRING IN SPECIFICATIONS       Y02893
         EJECT
* START OF MAIN SEGMENT
IEAVMWTO CSECT
* ENDUP(C)                                                     @ZA08451
* IEAJBLKL (A,C) APPROX 136220                                 @ZA14970
* IEAJMVAT (A) APPROX 138400                                   @ZA14991
* GETLINES (A,C) APPROX 091400  ZERO LENGTH                    @ZA16869
* PROLOG (A,C) 00470002,00660002,01450003,01900002             @ZA19274
* CONSTANTS (A) APPROX 18110002    APAR FIX TO CONVERT         @ZA19274
* IEAHTRND (A) APPROX 07280002     DISPLAY CONTROL AND         @ZA19274
* IEAHSVSP (C) APPROX 07280002     NONPRINTABLE TO BLANKS      @ZA19274
* IEAJMVLT (D) APPROX 11870002     AFTER RETURN FROM THE       @ZA19274
* BMAJCKNL (D) APPROX 14280002     SUB-SYSTEM EXIT.            @ZA19274
* GETWQE (C) APPROX 219400,219600                              @ZA20159
* TRTAB (C) APPROX 181134  REPAIR XLATE CHARS X'79'- X'7E'     @ZA29682
*
RID       EQU   0      UCM OR CONSOLE ID
R0       EQU   0                  WORK REG ZERO                  Y02893
R1       EQU   1                  WORK REG ONE                   Y02893
RPARM     EQU   1      PARAMETER REG
RWQE      EQU   1    WQE BASE
RPRFX     EQU   1                                                Y02893
RSSOB    EQU   2                  BASE REG FOR SUBSYSTEM BLOCK   Y02757
RWORK2    EQU   2      WORK REG
RCVT      EQU   3      CVT ADDRESS
RCTR      EQU   3
RUCM     EQU   3                  BASE REG FOR THE UCB
RTCB      EQU   4      TCB  ADDRESS
RWPL2    EQU    4     ADR OF TEXT LINE BEING PROCESSED           Y02893
RWORK5    EQU   5
RWPL      EQU   6      PARM LIST BASE
RASCB    EQU   7                  ADDRESS OF CALLER'S ASCB       Y02893
RMINR     EQU   7
RMAJR     EQU   8
COUNT     EQU   8                                                Y02893
RWORK9    EQU   9    WORK REG
LEN       EQU   9
UCMREG    EQU   10     UCM BASE
RBASE2    EQU   10    SECOND BASE REG FOR THE MODULE
RBASE     EQU   11     BASE REG
XSAV      EQU   12      SAVE AREA BASE
RWKREG   EQU   13                 BASE REG FOR OUR SAVE AND WORK Y02893
*                                 AREA.                          Y02893
RRETURN  EQU   14     RETURN ADDR
R14      EQU   14                 REGISTER 14                    Y02893
R15      EQU   15                 REGISTER 15                    Y02893
RRET     EQU   15     XCTL REG
RWORK15  EQU   15
* GET AND INITIALIZE A SAVE AREA                                 Y02893
*        INITIAL                                                 Y02893
         INITIAL                  ,SAVE REGISTERS AND INITIALIZE Y02893
         TM    XVX1,XVX1STOP      CHECK IF NO SPACE FOR WORKAREA Y02893
         BO    IEAMGRET           RETURN TO VWTO IF NO SPACE.    Y02893
*        TSTMLWTO                 ,CHECK THE USERS PARM LIST     Y02893
         TSTMLWTO                 ,CHECK THE USERS PARM LIST     Y02893
*  CHECK IF AN ERROR WAS FOUND IN TSTMLWTO THAT WOULD STOP       Y02893
*   THE PROCESSING OF THIS MLWTO.                                Y02893
IEAMCHKS TM    XVX1,XVX1STOP      IS THE STOP PROCESSING FLAG ON Y02893
         BO    IEAMSTOP           YES, FREE OUR SAVE AREA AND    Y02893
*                                 RETURN.                        Y02893
*  SET THE LOCAL AND CMS LOCKS.                                  Y02751
         L     R1,PARMPTR         PT AT ESTAE PARMAREA
         USING PARMLIST,R1
         MVC   PARMRTAD,KZERO     CLEAR RETRY ADDRESS
         DROP  R1
         BAL   RRET,SETLCKS       CALL THE SET LOCK ROUTINE      Y02751
         STM   R0,R15,RECREGS     SAVE REGS FOR FRR RECOVERY
         MVC   XVCMAJOR,KZERO     INSURE THAT ADDR OF MAJOR IS ZERO
IEAMTSTC TM    XVD2,XVD2CON       ARE WE CONNECTING MINOR LINES
         BO    IEAMBMIN           YES, GO BUILD THE MINOR.
*  NO, THEN WE ARE BUILDING THE MAJOR.
*        BLDMAJ                   ,BUILD THE MAJOR WQE           Y02893
         BLDMAJ                   ,BUILD THE MAJOR WQE           Y02893
         B     IEAMSTTS           TEST IF STOP WAS SET
IEAMBMIN EQU   *                                                 Y02893
*        BLDMIN                   ,BUILD THE MINOR WQES.         Y02893
         BLDMIN                   ,BUILD THE MINOR WQES.         Y02893
IEAMSTTS TM    XVX1,XVX1STOP      WAS AN ERROR FOUND?
         BO    IEAMFREL           YES, DON'T TAKE EXIT OR POST   Y02893
         TM    XVD2,XVD2DELW      MESSAGE TO BE DELETED?       @Y02668P
         BNO   IEAMNOST           NO,TAKE SUBSYSTEM EXIT       @Y02668P
         DROP  RMINR              RELEASE MINOR BASE           @Y02668P
         USING WMJMEXT,RMAJR      ADDRESSABILITY FOR MAJOR     @Y02668P
* NOW SET UP THE FLAGS SO THAT THIS MLWTO IS DELETED AND SENT  @Y02668P
* TO HARDCOPY.                                                 @Y02668P
         OI    WMJMECBF,WMJMMAJD  INDICATE MAJOR IS DELETED    @Y02668P
         L     RPRFX,UCMBPTR      GET ADDRESS OF UCB BASE      @Y02668P
         SH    RPRFX,KFOUR        PT AT PREFIX POINTER         @Y02668P
         L     RPRFX,ZERO(RPRFX)  GET PREFIX ADDRESS           @Y02668P
         USING UCMPRFX,RPRFX      ADDRESSABILITY FOR PREFIX    @Y02668P
         OI    UCMSFLG2,UCMSYSI   INDICATE CLEANUP NEEDED      @Y02668P
         OI    WMJMBUF,WMJMBUFC+WMJMBUFE INDICATE WQE SERVICED @Y02668P
*                                 AND READY FOR HARDCOPY       @Y02668P
         OI    WMJMDSP,WMJMDSPB   INDICATE QUEUB TO H.C.       @Y02668P
         DROP  RPRFX              RELEASE PREFIX BASE          @Y02668P
IEAMNOST EQU   *                  SUBSYSTEM EXIT               @Y02668P
*        SUBSEXIT                 ,PASS LINE TO SUBSYSTEM      @Y02668P
         SUBSEXIT                 ,PASS LINE TO SUBSYSTEM      @Y02668P
* THE LOCKS WILL BE FREE'D BY THE SUBSYSTEM EXIT SEGMENT.        Y02893
*        POSTOECB                 ,POST THE UCMOECB              Y02893
         POSTOECB                 ,POST THE UCMOECB              Y02893
IEAMMORE CLI   XVX2,NOLINES       ANY MORE LINES TO DO           Y02893
         BH    IEAMSKPS           YES, SKIP SETTING THE STOP BIT Y02893
         OI    XVX1,XVX1STOP      NO MORE LINES SO STOP.         Y02893
IEAMSKPS B     IEAMCHKS           GO CHECK IF WE SHOULD STOP.    Y02893
*
* THIS CODE WILL GET CONTROL ONLY IF AN ERROR WAS ENCOUNTERED
* WHILE RUNNING UNDER THE ESTAE. WE ARE PROTECTED BY THE ESTAE
* WHILE CHECKING THE USER'S WPL. IF THERE IS AN ERROR THEN WE ASSUME
* THAT THE WPL CAUSED THE ERROR. THE USER WILL BE ABENDED WITH A
* D23 ABEND CODE.
IEAVRETY OI    XVX1,XVX1STOP      STOP PROCESSING
         OI    XVD1,XVD1PERR      SET ERROR BIT TO ABEND THE USER
         B     IEAMSTOP           GO FREE ESTAE,SAVREA AND RETURN
*
IEAMFREL EQU   *                                                 Y02893
*  FREE THE LOCAL AND CMS LOCKS                                  Y02751
         BAL   RRET,FRELCKS       CALL THE FREE LOCK SUBROUTINE  Y02751
IEAMSTOP EQU   *                                                 Y02893
* FREE THE ESTAE RECOVERY
*        ESTAE 0                  FREE OUR ESTAE
         ESTAE 0                  FREE OUR ESTAE
*        FREESAVE                 ,FREE OUR SAVE AREA            Y02893
         FREESAVE                 ,FREE OUR SAVE AREA            Y02893
*  THE SEGMENT FREESAVE WILL HAVE RESTORED THE POINTER TO THE    Y02893
*  CALLER'S SAVE AREA IN REG 13.                                 Y02893
IEAMGRET L     RPARM,XVCMAJOR       MAJOR WQE ADR                Y02893
         LTR   RPARM,RPARM         IS THERE A MAJOR WQE?         Y02893
         BZ    IEAMRETN           BRANCH IF NONE.
         L     RPARM,XVWQEID     YES, GET SEQUENCE NO. FROM SAVE AREA
         SRL   RPARM,EIGHT      SHIFT OUT CONSOLE ID
* PUT MSG ID OR ZERO INTO XWQEID FIELD IN XVSAV.                 Y02893
* THIS FIELD WILL BE RETURNED TO THE USER BY VMWTO.              Y02893
IEAMRETN ST    RPARM,XVWQEID  PUT MSG ID BACK INTO XVSAV         Y02893
*        RETURN (14,12)           RETURN TO VWTO                 Y02893
         RETURN (14,12)           RETURN TO VWTO                 Y02893
         CLNUP                    ,INSERT FRR CLEANUP ROUTINE
         EJECT
         CONSTNTS                 ,INSERT THE NEEDED CONSTANTS   Y02893
         EJECT
*        MACRO                    START OF GETN SUBROUTINE
*  GETMINOR SUBROUTINE                                           Y02893
*  INPUT - XVCMAJOR CONTAINS ADDR OF A MAJOR WQE                 Y02893
*          XVCMINOR CONTAINS ADDR OF LAST MINOR  ON THE CHAIN    Y02893
*         IF WE ARE CREATING THE NEXT MINOR.                     Y02893
*  THIS ROUTINE ASSUMES THAT A WQE IS AVAILABLE UNDER THE        Y02893
*   UCMWQLM COUNT.                                               Y02893
*  OUTPUT - A NEW MINOR IS QUEUED OFF THE MAJOR WQE.             Y02893
*        THE MINOR IS ZEROED.                                    Y02893
GETMINOR ST    RRETURN,XVA0       SAVE THE CALLER'S ADDR.        Y02893
         USING WMJM,RMAJR                                        Y02893
IEANGETN BAL   RRETURN,GETWQE      GET A MINOR WQE
* CHECK IF A MINOR WAS OBTAINED.                                 Y02893
         LTR   RWQE,RWQE          WAS A WQE OBTAINED.            Y02893
         BNZ   IEANGET1           YES, ADD IT TO THE CHAIN.      Y02893
* NO A WQE WASN'T OBTAINED. SET ERROR FLAGS.                     Y02893
         OI    XVX1,XVX1STOP      STOP PROCCESSING               Y02893
         OI    XVD1,XVD1PERR      SET ERROR FLAGS                Y02893
         B     IEANGET2                                          Y02893
IEANGET1 L     RMAJR,XVCMAJOR      MAJOR WQE ADR
         L     RMINR,WMJMMIN       MINOR QUEUED TO MAJOR
         LTR   RMINR,RMINR         IS THERE A MINOR
         BNZ   IEAMINR2            YES, QUEUE TO LAST MINOR
         ST    RWQE,WMJMMIN        QUEUE NEW MINOR TO MAJOR
         OI    WMJMMLW,WMJMMLWH    SET DUMMY MINOR QUEUED
         B     IEAMBL12            SET MINOR FLAGS
         DROP  RMAJR
         USING WMNMEXT,RMINR
IEAMINR2 L     RMINR,XVCMINOR      ADR LAST MINOR Q'D --FROM FINDID
         O     RWQE,WMNMUC2        PRESERVE USE COUNT FOR 2ND LINE
         ST    RWQE,WMNMUC2        QUEUE MINOR
IEAMBL12 LR    RMINR,RWQE         ADR OF NEW MINOR
         OI    XVD3,XVD3BLD1+XVD3BLD2     BUILD LINE 1 AND 2
         OI    WMNMML1,WMNMML1C+WMNMML1H SET MINOR WQE AND GETMAINED
         DROP  RMINR
         ST    RMINR,XVCMINOR      STORE ADR CURRENT MINOR
IEANGET2 EQU   *                                                 Y02893
         L     RRETURN,XVA0       RESTORE RETURN ADDR            Y02893
         BR    RRETURN            RETURN TO CALLER.              Y02893
         EJECT
*        MACRO                    START OF ENDUP SUBROUTINE
ENDUP    EQU   *                                                 Y02893
         SR    RWORK2,RWORK2       ZERO REG 2                    Y02893
         IC    RWORK2,XVX2         # OF LINE TO DO
         SH    RWORK2,KONE         DECREMENT
         STC   RWORK2,XVX2         UPDATE XVX2
         L     RMAJR,XVCMAJOR      INIT MAJOR ADR FOR FORCE END
         CLI   XVX2,NOLINES        ANY MORE LINES TO DO          Y02893
         BNE   IEAERETN           YES, RETURN TO CALLER          Y02893
IEAMTSTE TM    XVX0,XVX0FEDE       FORCE END
         BZ    IEAERETN           NO, RETURN TO CALLER           Y02893
         USING WMJMEXT,RMAJR
         TM    WMJMMLW,WMJMMLWH    DUMMY MINOR QUEUED
         BO    IEAEJEND            YES, FLAG MAJOR AS END        Y02893
         L     RMINR,XVCMINOR       MINOR ADR
         DROP  RMAJR
         USING WMNMEXT,RMINR
         LTR   RMINR,RMINR         IS THERE AMINOR
         BZ    IEAEJEND            NO, FLAG MAJOR AS END         Y02893
IEAEP2ND CLC   WMNMNX1(THREE),KZERO    NEXT LINE PTR 0           Y02893
         BE    IEAE1END            FLAG LINE 1 AS END            Y02893
         CLC   WMNMNX2(THREE),KZERO    PTR TO NXT MINOR 0
         BE    IEAE2END            FLAG LINE 2 AS END            Y02893
         L     RMINR,WMNMUC2       PTR TO NEXT MINOR
         B     IEAEP2ND            FIND END OF CHARIN            Y02893
IEAE1END CLI   WMNMTL1,ZERO        MINOR CONTAIN TEXT          @ZA08451
         BNE   IEAD1END            YES, THEN DATA END          @ZA08451
         MVI   WMNMLT1,WMNMLT1D    NO, FLAG END LINE ONLY      @ZA08451
         B    IEAERETN             RETURN TO CALLER            @ZA08451
IEAD1END MVI   WMNMLT1,WMNMLT1C+WMNMLT1D  SET DATA END FLAG    @ZA08451
         B     IEAERETN            RETURN TO CALLER            @ZA08451
IEAE2END CLI   WMNMTL2,ZERO        TEXT IN SECOND MINOR        @ZA08451
         BNE   IEAD2END            YES, THEN DATA END          @ZA08451
         MVI   WMNMLT2,WMNMLT2D    NO, FLAG END LINE ONLY      @ZA08451
         B     IEAERETN            RETURN TO CALLER            @ZA08451
IEAD2END MVI   WMNMLT2,WMNMLT2C+WMNMLT2D  SET DATA END FLAG    @ZA08451
         B     IEAERETN            RETURN TO CALLER            @ZA08451
         DROP  RMINR
         USING WMJMEXT,RMAJR                                     Y02893
IEAEJEND MVI   WMJMLTYP,WMJMLTYC+WMJMLTYD  FLAG MAJOR AS DATA ENDY02893
IEAERETN BR    RRETURN            RETURN TO CALLER               Y02893
         EJECT
*        MACRO                    START OF FINDID SUBROUTINE
*
* FINDID SUBROUTINE WILL FIND AN EXISTING ID
* FOR A CONNECTING MLWTO
*
FINDID   EQU   *
* PROTECT CONTENTS OF RWPL2 AROUND CHECK FOR JOBSTEP AND MEMORY  Y02893
         ST    RWPL2,WPL2SAVE     SAVE IN OUR SAVEAREA           Y02893
IEAISTRT L     RUCM,UCMBPTR
         USING UCM,RUCM
         L     RWQE,UCMWTOQ        FIRST WQE ON SYSTEM QUEUE
IEAISEAR LTR   RWQE,RWQE           END OF QUEUE
         BZ    IEAINOID            YES, RETURN
         DROP  RMAJR                                             Y02893
         DROP  RUCM
         USING WMJMEXT,RWQE
         TM    WMJMMLW,WMJMMLWB    MAJOR WQE
         BZ    IEAINXWQ            NO, GET NEXT WQE
         CLC   XVWQEIDA(THREE),WMJMMSGN+ONE       MSG IDS MATCH
         BNE   IEAINXWQ
         TM    WMJMLTYP,WMJMLTYD   IS THIS END LINE
         BO    IEAINOID            YES, ERROR
* CHECK THAT THE MSG WAS ISSUED BY A PROGRAM IN THE SAME         Y02893
* MEMORY AND JOB STEP AS THE CALLER.                             Y02893
         L     RTCB,TCBSAVE       LOAD ADDR OF CALLER'S TCB      Y02893
         L     RASCB,ASCBSAVE     DO SAME FOR ASCB               Y02893
         USING ASCB,RASCB                                        Y02893
         USING TCB,RTCB                                          Y02893
         CLC   WMJMASID,ASCBASID  DO THE MEMORIES MATCH          Y20893
         BNE   IEAINOID           NO, THEN NO ID MATCH           Y02893
         CLC   WMJMJTCB,TCBJSTCB  SAME JOB STEP                  Y02893
         BNE   IEAINOID           NO, THEN NO ID MATCH           Y02893
         DROP  RTCB                                              Y02893
         DROP  RASCB                                             Y02893
* THE MESSAGE WAS ISSUED BY A USER IN THE SAME ADDRESS SPACE     Y02893
* AND JOB STEP. CONTINUE                                         Y02893
         ST    RWQE,XVCMAJOR       STORE MAJOR ADR IN SVRB
         L     RWORK2,WMJMMIN      PTR TO FIRST MINOR
         ST    RWORK2,XVCMINOR     STORE MINOR ADR
         TM    WMJMMLW,WMJMMLWH    DOES MINOR HAVE TEXT
         BO    IEAIDUMM            NO, DUMMY
         B     IEAITST1            CHECK IF MINOR LINE 2 AVAIL
IEAINXWQ L     RWQE,WMJMUC         LINK POINTER
         LA    RWQE,0(RWQE)        CLEAR USE COUNT
         B     IEAISEAR
         USING WMNMEXT,RWORK2
IEAITST1 TM    WMNMLT1,WMNMLT1D    FIRST LINE AN END
         BO    IEAINOID            YES, ERROR
         TM    WMNMLT2,WMNMLT2D    SECOND LINE END
         BO    IEAINOID            YES, ERROR
         L     RWORK2,WMNMUC2      PTR TO NEXT MINOR
         LA    RWORK2,0(RWORK2)    CLEAR USE COUNT
         LTR   RWORK2,RWORK2       IS THERE A MINOR
         BNZ   IEAISADD            NO, STORE ADR AND CONTINUE SEARCH
          L    RWORK2,XVCMINOR     ADR OF LAST MINOR
         TM    WMNMML2,WMNMML2H    SECOND LINE AVAILABLE
         BZ    IEAIRTRN            NO, RETURN
IEAI1ST  OI    XVD3,XVD3BLD2       SET BUILD SECOND LINE FLAG
         B     IEAIRTRN            RETURN TO CALLER
IEAISADD ST    RWORK2,XVCMINOR    SAVE MINOR ADR
         B     IEAITST1            CHECK IF LINE 2 IS AVAILABLE
         DROP  RWORK2
         USING  WMJMEXT,RWQE
IEAIDUMM OI    WMJMMLW,WMJMMLWF   SET CHAIN REUSABLE FLAG
         L     RWORK2,XVCMINOR      LOAD MINOR PTR
         DROP  RWQE
         USING WMNMEXT,RWORK2
         XC    WMNM(WMNMSIZE),WMNM  ZERO MINOR
         OI    WMNMML1,WMNMML1C+WMNMML1H   SET MINOR AND GETMAINED FLAG
         OI    WMNMML2,WMNMML2H    INDICATE LINE 2 AVAILABLE
         OI    XVD3,XVD3BLD1+XVD3BLD2   SET BUILD LINE 1 AND 2
         B     IEAIRTRN            RETURN TO CALLER
         DROP  RWORK2
IEAINOID MVI   XVRETCOD,NOIDMCH    SET RETURN CODE               Y02893
         OI    XVX1,XVX1NOID       INDICATE NO ID FOUND
         XC   XVCMAJOR(EIGHT),XVCMAJOR  ZERO MAJOR AND MINOR PTRS
IEAIRTRN L     RWPL2,WPL2SAVE     RESTORE RWPL2                  Y02893
         BR    RRETURN                                           Y02893
         EJECT
         EJECT
*        MACRO REFERLEN SUBROUTINE                               Y02755
* THIS ROUTINE WILL INSURE THAT THE BYTE WHOSE ADDRESS IS IN     Y02755
* RRET(15) IS ACCESSIBLE BY THE CALLER.                          Y02755
*  INPUT - RRET(15) IS ADDR OF BYTE IN WPL TO BE CHECKED.        Y02755
*  OUTPUT -RRET IS ZERO IF BYTE ISN'T ACCESSIBLE BY THE USER     Y02755
*          RRET IS NONZERO IF OK.                                Y02755
*                                                                Y02755
REFERLEN EQU   *                                                 Y02755
* SWITCH TO USER'S PROTECT KEY                                   Y02755
         ST    RWORK2,XVA0        SAVE REG 2 IN XVSAV            Y02755
         STM   R0,R15,RECREGS     SAVE REGS FOR RETRY
         L     RWORK2,PARMPTR     ADDR OF PARM AREA
         USING PARMLIST,RWORK2
         LA    RPARM,IEARPROB     RETRY ADDR
         ST    RPARM,PARMRTAD     IF ERROR IN INSERT THEN GO TO
*                                 IEARPROB
         DROP  RWORK2
         USING TCB,RTCB                                          Y02755
*        MODESET EXTKEY=RBT234,WORKREG=2                         Y02755
         MODESET EXTKEY=RBT234,WORKREG=2                         Y02755
         DROP  RTCB                                              Y02755
         IC    RWORK2,ZERO(RRET)  ACCESS THE BYTE PTD AT BY RRET Y02755
* IF WE GET HERE THEN THE BYTE IS ACCESSIBLE TO THE USER.        Y02755
IEARSETK EQU   *                                                 Y02893
         MODESET EXTKEY=SUPR      RESTORE SUPERVISOR KEY         Y02755
         L     RWORK2,XVA0        RESTORE CONTENTS OF REG 2.     Y02755
         BR    RRETURN            RETURN TO CALLER               Y02755
IEARPROB EQU   *                                                 Y02755
* IF WE GET HERE THEN THE ESTAE ROUTINE GOT CONTROL.             Y02755
         XR    RRET,RRET          ZERO RRET TO INDICATE ERROR.   Y02755
         B     IEARSETK           GO SET KEY & RETURN.           Y02755
         EJECT
*        MACRO
*   SUBROUTINE GETWQE WILL GET A WQE FROM THE WQE CELL POOL.     Y02893
*   THE WQE WILL BE ZEROED.                                      Y02893
*   INPUTS - UCMWQECP IS THE CELL POOL ID                        Y02893
*            UCMWQNR IS THE NUMBER OF WQES CURRENTLY IN USE.     Y02893
*   OUTPUTS - RWQE WILL CONTAIN THE ADDRESS OF THE ZEROED WQE IF Y02893
*             ONE HAS BEEN OBTAINED.                             Y02893
*             RWQE WILL BE ZERO IF A WQE WASN'T AVAILABLE        Y02893
*   PROCESS - REGS 14,15,0,1,2 ARE SAVED AND USED IN THIS ROUTINEY02893
*             IF A CELL IS NOT AVAILABLE, THE ROUTINE CHECKS IF  Y02893
*             EXTENSION IS NEEDED. IF ONE IS NEEDED IT IS OBTAINDY02893
*             AND WE ATTEMPT TO GET A CELL AGAIN.                Y02893
*                                                                Y02893
GETWQE   EQU   *                                                 Y02893
         STM   RRETURN,RWORK2,GETSAVE                            Y02893
         L     RUCM,UCMBPTR
         USING UCM,RUCM
         LA    RWORK2,KONE        SET NOT DONE INDICATOR IN R2.  Y02893
IEAGLOOP LTR   RWORK2,RWORK2      TEST END OF GET LOOP           Y02893
         BZ    IEAGRETN           YES, RETURN TO USER            Y02893
* NOT DONE. GET A WQE FROM THE CELLPOOL,                         Y02893
         L     RID,UCMWQECP       GET CELLPOOL ID FOR WQES.      Y02893
*        GETCELL CPID=(0),BRANCH=YES GET A WQE CELL              Y02893
         GETCELL CPID=(0),BRANCH=YES GET A WQE CELL              Y02893
* NOW CHECK IF CELL WAS OBTAINED. RETURN CODE IS IN R15.         Y02893
         LTR   RRET,RRET          DID WE GET A CELL              Y02893
         BNZ   IEAGECHK           NO, CHECK TYPE OF RETURN CODE  Y02893
* YES, WE GOT A  WQE                                             Y02893
         XC    0(WMJMSIZE,RWQE),0(RWQE) ZERO OUT THE WQE.        Y02893
         LH    RWORK2,UCMWQNR     INCREMENT NBR OF WQES.         Y02893
         LA    RWORK2,ONE(RWORK2)                                Y02893
         STH   RWORK2,UCMWQNR                                    Y02893
         SR    RWORK2,RWORK2      INDICATE ALL DONE              Y02893
         B     IEAGLOOP                                          Y02893
IEAGECHK EQU   *                  CHECK IF WE SHOULD EXTEND CPOOLY02893
         CH    RRET,KFOUR         IS EXTENSION NEEDED            Y02893
         BNE   IEAGNOWQ           NO, GO SET ERROR CONDITION     Y02893
* YES, EXTENDED THE WQE CELL POOL                                Y02893
* PROTECT THE CONTENTS OF RWPL2 AROUND THE GETMAIN               Y02893
         ST    RWPL2,WPL2SAVE     STORE IN OUR SAVEAREA          Y02893
         LA    RPARM,SPL231       USE SUBPOOL 231                Y02893
         L     RID,WQEPLSZ        GET SIZE OF EXTENSION          Y02893
         L     RTCB,TCBSAVE       GET PTRS TO TCB AND ASCB       Y02893
         L     RASCB,ASCBSAVE                                    Y20893
*        GETMAIN RC,LV=(0),SP=(1),BRANCH=YES                     Y02893
         GETMAIN RC,LV=(0),SP=(1),BRANCH=YES                     Y02893
         L     RWPL2,WPL2SAVE     RESTORE THE CURRENT LINE PTR   Y02893
* CHECK IF GETMAIN WAS SUCCESSFUL                                Y02893
         LTR   RRET,RRET          DID WE GET CORE FOR EXTENSION  Y02893
         BNZ   IEAGNOWQ           NO, SET ERROR CONDITION        Y02893
* GETMAIN OK, EXTEND CELLPOOL.                                   Y02893
         ST    RPARM,SPLEXTAD     SAVE ADDR OF THE EXTENSION     Y02756
         L     RUCM,UCMBPTR       RESTORE BASE FOR UCM           Y02893
         L     RID,UCMWQECP       GET WQE CELL POOL ID.          Y02893
         LA    RRET,WMJMSIZE      SIZE OF CELLS REQUIRED.        Y02893
*  ADDR OF EXTENSION IS IN REG 1.                                Y02756
*        BLDCPOOL  CPID=(0),SP=231,CSIZE=(15),CPADDR=(1),        Y02756
*             AUTODEL=YES,POOLSIZ=4,BRANCH=YES,SERIAL=YES      @ZA20159
         BLDCPOOL  CPID=(0),SP=231,CSIZE=(15),CPADDR=(1),        Y02756X
               AUTODEL=YES,POOLSIZ=4,BRANCH=YES,SERIAL=YES     @ZA20159
*  CHECK IF EXTENSION IS OK.                                     Y02756
         LA    RWORK2,KONE        INSURE RWORK2 SET TO LOOP      Y02756
         LTR   RRET,RRET          WAS CELL POOL EXTENDED.        Y02756
         BZ    IEAGLOOP           YES, GO BACK AND GET A WQE.    Y02756
*  EXTENSION WASN'T SUCCESSFUL. FREE THE CORE FOR THE EXTENSION. Y02756
         L     RID,SPLFRECN       LOAD SUBPOOL AND SIZE          Y02756
         L     RPARM,SPLEXTAD     GET ADDR OF EXTENSION          Y02756
*        FREEMAIN  R,LV=(0),A=(1),BRANCH=YES                     Y02756
         FREEMAIN  R,LV=(0),A=(1),BRANCH=YES                     Y02756
IEAGNOWQ SR    RWQE,RWQE          SET RWQE TO SHOW NO WQE        Y02756
         LR    RWORK2,RWQE        GET OUT OF LOOP                Y02756
         B     IEAGLOOP                                          Y02756
IEAGRETN LM    RRETURN,RID,GETSAVE RESTORE REG 14 TO 0           Y02756
         L     RWORK2,GETSAVE+SIXTN RESTORE REG 2.               Y02756
         BR    RRETURN            RETURN TO CALLER.              Y02756
         DROP  RUCM
         EJECT
*        MACRO - WAITWQE ROUTINE                                 Y02756
*  WAIT FOR A WQE TO BE FREED.                                   Y02756
*  INPUT - XVWWB IS SET TO ZERO BY INITIAL SEGMENT AND TO ADDR OFY02756
*          WWB BY THIS ROUTINE.                                  Y02756
*  OUTPUT -XVWWB CONTAINS THE ADDR OF THE WWB. AT LEAST ONE WQE  Y02756
*          HAS BEEN FREED.                                       Y02756
WAITWQE  STM   RRETURN,RWORK2,WAITSAVE SAVE CALLER'S REGISTERS   Y02756
* CHECK IF A WWB EXISTS. IF NOT THEN GET ONE                     Y02756
         CLC   XVWWB,KZERO        HAS A WWB BEEN OBTAINED.       Y02756
         BNE   IEABWAIT           YES, WAIT ON THE ECB.          Y02756
*  NO, GET A WWB AND CHAIN IT TO WQE WWB CHAIN.                  Y02756
         L     RID,WWBPARM        GETMAIN PARM OF SUBPL & SIZE   Y02756
*        GETMAIN R,LV=(0),BRANCH=YES                             Y02756
         GETMAIN R,LV=(0),BRANCH=YES                             Y02756
         ST    RPARM,XVWWB        SAVE ADDR OF WWB               Y02756
         USING WWB,RPARM          ADDRESSABILITY FOR WWB         Y02756
* NOW SET UP THE WWB.                                            Y02756
         MVC   WWBASCB,ASCBSAVE   PUT IN CALLER'S ASCB ADDR.     Y02756
         ST    RTCB,WWBTCBAD      CALLER'S TCB ADDR              Y02756
         L     RUCM,UCMBPTR
         USING UCM,RUCM
* CONNECT THIS WWB IN TO END OF THE CHAIN                        Y02756
         L     RWORK2,UCMWECBT    GET POINTER TO END OF CHAIN    Y02756
*  RWORK2 NEW PTS AT LAST WWB ON THE CHAIN.                      Y02756
*  MOVE END OF CHAIN ENDICATOR FROM PREVIOUS END TO NEW WWB.     Y02756
         MVC   WWBFWDPT,WWBFWDPT-WWB(RWORK2)                     Y02756
*  POINT LAST WWB ON CHAIN TO NEW WWB                            Y02756
         ST    RPARM,WWBFWDPT-WWB(,RWORK2)                       Y02756
*  POINT NEW WWB BACK TO LAST CHAIN MEMBER                       Y02756
         ST    RWORK2,WWBBCKPT                                   Y02756
*  POINT CHAIN TAIL AT NEW WWB.                                  Y02756
         ST    RPARM,UCMWECBT                                    Y02756
*  THE NEW WWB IS NOW AT THE END OF THE CHAIN.                   Y02756
IEABWAIT L     RPARM,XVWWB        INSURE ADDRESSABILITY OF WWB.  Y02756
         NI    WWBFLAGS,X'FF'-WWBPOSTD  TURN OFF POSTED BIT      Y02756
         MVC   WWBECB,KZERO       ZERO OUT THE ECB               Y02756
* FREE THE LOCKS BEFORE ISSUING THE WAIT.                        Y02751
         BAL   RRET,FRELCKS       CALL THE FREE LOCK SUBROUTINE  Y02751
* CLEAR RETRY ADDRESS IN PARM AREA.
         L     RPARM,PARMPTR      ADDR OF ESTAE PARM AREA
         USING PARMLIST,RPARM
         MVC   PARMRTAD,KZERO     CLEAR RETRY ADDR
         DROP  RPARM
         L     RPARM,XVWWB
         USING WWB,RPARM
* NOW CHECK IF WE ARE IN MEMORY ONE. IF NOT THEN TAKE A LONG WAIT.
         L     RASCB,ASCBSAVE          LOAD ADDR OF OUR ASCB
         USING ASCB,RASCB
         CLC   ASCBASID,KONE      IN MEMORY ONE WITH COMMTASK.
         DROP RASCB
         BNE   IEABLONG           NO GO TAKE A LONG WAIT
         LA    RPARM,WWBECB       GET ADDR OF ECB IN WAIT BLOCK  Y02756
*        WAIT  ,ECB=(1)           WAIT FOR A WQE TO BE FREE'D.   Y02756
         WAIT  ,ECB=(1)           WAIT FOR A WQE TO BE FREE'D.   Y02756
         B     IEABRETN
IEABLONG LA    RPARM,WWBECB       ADDR OF ECB IN WAIT BLOCK
*        WAIT ,ECB=(1),LONG=YES   TAKE A LONG WAIT
         WAIT ,ECB=(1),LONG=YES   TAKE A LONG WAIT
* NOW SET THE LOCAK AND CMS LOCKS.                               Y02751
IEABRETN BAL   RRET,SETLCKS                                      Y02751
         LM    RRETURN,RWORK2,WAITSAVE                           Y02756
         BR    RRETURN            RETURN TO USER.                Y02756
         DROP  RPARM                                             Y02756
         DROP  RUCM
         EJECT
*        MACRO                                                   Y02893
*                                                                Y02893
*  TEXTLINE - SUBROUTINE                                         Y02893
*                                                                Y02893
*  THIS ROUTINE SETS RWPL2(R4) POINTING AT THE NEXT LINE IN THE  Y02893
*  WPL TO BE PROCESSED.                                          Y02893
*                                                                Y02893
*  INPUT - MLPART IS ADDR TO WPLLTP                              Y02893
*          XVD3TXT1 IF ON INDICATES THAT THE FIRST LINE OF THE   Y02893
*            WPL WAS JUST PROCESSED.                             Y02893
*         RWPL2 PTS AT WPLML0 OF CURRENT LINE IF NOT LINE ONE.   Y02893
*              REGS 1 AND 2 CAN BE USED AS WORK REGS             Y02893
*                                                                Y02893
*  OUTPUT- XVD3TXT1 WILL BE OFF                                  Y02893
*          RWPL2 WILL PT AT WPLML0 FOR THE NEXT LINE             Y02893
*          XVX0UDCL WILL BE OFF.                                 Y02893
TEXTLINE TM    XVD3,XVD3TXT1      FIRST LINE JUST PROCESSED      Y02893
         BZ    IEAXNFST           NO, INCREMENT FOR ML AREA      Y02893
* THE FIRST LINE WAS JUST PROCESSED. POINT AT THE FIRST LINE     Y02893
* IN THE MULTI LINE EXTNESION.                                   Y02893
         L     RWPL2,MLPART       ADDR OF WPLLTF                 Y02893
         LA    RWPL2,FOUR(RWPL2)  INCR TO FIRST LINE IN WPLML0   Y02893
         NI    XVD3,X'FF'-XVD3TXT1 TURN OFF LINE I BIT           Y02893
         NI    XVX0,X'FF'-XVX0UDCL ALSO DEFAULT CONTROL LINE FLAGY02893
         B     IEAXRETN           RETURN TO CALLER               Y02893
* RWRL2 PTS AT THE LENGTH OF THE CURRENT LINE(HALFWORD).         Y02893
* INCREMENT RWPL2 TO THE NEXT LINE                               Y02893
IEAXNFST SR    R1,R1              ZERO FOR INSERT CHAR           Y02893
         L     RWORK2,LINDEX      GET INDEX OF LENGTH FROM TABLE Y02893
         IC    R1,LTABLE(RWORK2)  GET LGH OF CURRENT LINE        Y02893
         AR    RWPL2,R1           POINT TO NEXT LINE IN WPL      Y02893
         LA    RWORK2,ONE(RWORK2) INCR LTABLE INDEX              Y02893
         ST    RWORK2,LINDEX      PUT BACK IN WORKAREA           Y02893
IEAXRETN BR    RRETURN            RETURN TO USER                 Y02893
         EJECT
*        MACRO FRELCKS SUBROUTINE                                Y02893
*        START OF FRELCKS SEGMENT                                Y02751
* THE CMS AND LOCAL LOCKS ARE RELEASED                           Y02751
*   REGISTERS 11, 12 AND 13 ARE SAVED. 11 AND 12 GO IN MLWTO'S   Y02751
*   WORKAREA AND 13 IS SAVED IN REGISTER 0.                      Y02751
* RRET(15) IS THE RETURN REGISTER.                               Y02751
FRELCKS  ST    RBASE,RBASESAV     BASE REG SAVED IN WORKAREA.    Y02751
         ST    XSAV,XVSAVSAV      EXTENDED SAVE AREA BASE        Y02751
         LR    RID,RWKREG         MOVE PTR TO SAVEAREA           Y02751
* FREE THE FRR AND RESET THE PARM AREA PTR
*        SETFRR D,WRKREGS=(11,12)
         SETFRR D,WRKREGS=(11,12)
         LA    XSAV,EPARM         ADDR OF ESTAE PARM AREA
         ST    XSAV,PARMPTR       SAVE NEW ADDR
*        SETLOCK RELEASE,TYPE=CMS,                               Y02751
*              RELATED=(UCM,IEAVMWTO(SETLCKS))                   Y02751
*        SETLOCK RELEASE,TYPE=LOCAL,                             Y02751
*              RELATED=(UCM,IEAVMWTO(SETLCKS))                   Y02751
         SETLOCK RELEASE,TYPE=CMS,                               Y02751*
               RELATED=(UCM,IEAVMWTO(SETLCKS))                   Y02751
         SETLOCK RELEASE,TYPE=LOCAL,                             Y02751*
               RELATED=(UCM,IEAVMWTO(SETLCKS))                   Y02751
         LR    RWKREG,RID         RESTORE PTR TO SAVEAREA        Y02751
         L     RBASE,RBASESAV     RESTORE BASE REG               Y02751
         LA    XSAV,EPARM         GET ADDR OF ESTAE PARMLIST     Y02751
         USING PARMLIST,XSAV      ESTABLISH BASE                 Y02751
         NI    PARMFLAG,X'FF'-PARMFRID  TURN OFF FRR INDICATOR   Y02751
         DROP  XSAV               RELEASE BASE                   Y02751
         L     XSAV,XVSAVSAV      RESTORE PTR TO EXTENDED AREA   Y02751
* RETURN TO CALLER                                               Y02751
         BR    RRET                                              Y02751
         EJECT
*        MACRO                   SETLCKS SUBROUTINE              Y02751
*   START OF SETLCKS SEGMENT                                     Y02751
*   THE LOCAL AND CMS LOCKS ARE OBTAINED.                        Y02751
*   REGISTERS 11, 12 AND 13 ARE SAVED. 11 AND 12 GO IN MLWTO'S   Y02751
*   WORKAREA AND 13 IS SAVED IN REGISTER 0.                      Y02751
* RRET(15) IS THE RETURN REGISTER.                               Y02751
SETLCKS  ST    RBASE,RBASESAV     BASE REG SAVED IN WORKAREA.    Y02751
         ST    XSAV,XVSAVSAV      EXTENDED SAVE AREA BASE        Y02751
         LR    RID,RWKREG         MOVE PTR TO SAVEAREA           Y02751
*        SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                  Y02751
*              RELATED=(UCM,IEAVMWTO(FRELCKS))                   Y02751
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                  Y02751*
               RELATED=(UCM,IEAVMWTO(FRELCKS))                   Y02751
*        SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,                    Y02751
*              RELATED=(UCM,IEAVMWTO(FRELCKS))                   Y02751
         SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,                    Y02751*
               RELATED=(UCM,IEAVMWTO(FRELCKS))                   Y02751
         LR    RWKREG,RID         RESTORE PTR TO SAVEAREA        Y02751
         L     RBASE,RBASESAV     RESTORE BASE REG               Y02751
         L     XSAV,XVSAVSAV      RESTORE PTR TO EXTENDED AREA   Y02751
* SET UP THE FRR FOR THIS ROUTINE. LET SETFRR USE REGS 2 AND 3. AS
* WORK REGS. SAVE THE CONTENTS OF 2 AND 3 IN SUBSLIST.
         STM   RWORK2,RCVT,SUBSLIST SAVE REGS 2 AND 3.
         L     RUCM,UCMBPTR
         USING UCM,RUCM
         L     RPARM,UCMFRRAD     GET ADDR OF IEAVMFRR
         DROP  RUCM
*        SETFRR A,FRRAD=(RPARM),PARMAD=PARMPTR,WRKREGS=(RWORK2,RCVT)
         SETFRR A,FRRAD=(RPARM),PARMAD=PARMPTR,WRKREGS=(RWORK2,RCVT)
         L     RPARM,PARMPTR      GET ADDR OF FRR PARMAREA
         USING PARMLIST,RPARM
         LA    RWORK2,RECSAVE     ADDR OF OUR REG SAVE AREA
         ST    RWORK2,PARMRGAD    PT TO REG AREA FOR RETRY
         MVC   PARMID,MODULEID    IDENTIFY AS IEAVMWTO
         DROP  RPARM              DROP PRESENT PARMLIST BASE
         LA    RWORK2,EPARM       GET PTR TO ESTAE PARMLIST
         USING PARMLIST,RWORK2    SET ADDRESSABILITY TO ESTAE PARM
****************************************************************YM04929
* THE FOLLOWING PARMFRID FIELD IN THE ESTAE PARAMETER LIST IS   YM04929
* SET TO ZERO TO GUARANTEE THAT RECOVERY WILL BE DONE ON BOTH   YM04929
* THE ESTAE AND FRR LEVEL.                                      YM04929
****************************************************************YM04929
         NI    PARMFLAG,X'FF'-PARMFRID  TURN OFF FRR INDICATOR  YM04929
         DROP  RWORK2             DROP TEMPORARY BASE
         USING PARMLIST,RPARM     RESET BASE TO FRR PARMLIST
         MVI   PARMFTPT,FTLOCK    SET FOOTPRINT
         LA    RWORK2,MWTOCLNP    ADDR OF MLWTO CLEANUP ROUTINE.
         ST    RWORK2,PARMCLAD
         LM    RWORK2,RCVT,SUBSLIST  RESTORE REGS 2 AND 3
         DROP  RPARM
         BR    RRET               RETURN TO CALLER               Y02751
         EJECT
*        MACRO
         DATADEFS                 ,DEFINE CONTROL BLOCKS         Y02893
         END
