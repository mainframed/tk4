         TITLE 'IEAVVCRX, EXTERNAL INTERRUPT PROCESSOR, PROLOGUE'
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVVCRX
*
*02*     CSECT-NAME = IEAVVCRX
*
*01*  DESCRIPTIVE-NAME = OPERATOR INTERRUPT KEY INTERRUPT PROCESSOR
*
*01*  COPYRIGHT = NONE
*01*  STATUS = 02.01
*
*01*  FUNCTION = THIS MODULE INCREMENTS A COUNT OF EXTERNAL INTERRUPT
*     KEY INTERRUPTS PENDING, AND POST'S COMM TASK TO START PROCESSING
*     AN EXTERNAL INTERRUPT WHICH IS A SIGNAL TO COMMTASK TO PERFORM A
*     MASTER CONSOLE SWITCH.
*
*02*     OPERATION = THE MODULE RECIEVES CONTROL FROM THE EXTERNAL
*        INTERRUPT FLIH WHEN THE CONSOLE INTERRUPT KEY IS DEPRESSED AND
*        INCREMENTS A COUNT OF EXTERNAL INTERRUPTS PENDING MAINTAINED
*        IN FIELD UCMEXT OF THE UCM PREFIX. IN ADDITION, IF THE COUNT
*        WAS ZERO, AN XMPOST IS ISSUED TO TO ECB UCMXECB TO SIGNAL COMM
*        TASK THAT EXTERNAL INTERRUPTS ARE PENDING. THE MODULE THEN
*        RETURNS TO THE EXTERNAL FLIH.
*
*01*   NOTES = THE CONTENTS OF REGISTER 2, WHICH CONTAINS THE RETURN
*      ADDRESS, IS PRESERVED IN REGISTER 9 ACROSS TH XMPOST.
*
*02*     DEPENDENCIES = THIS MODULE DEPENDS ON THE USE OF COMPARE AND
*        SWAP TOO BE USED BY ANY PROGRAMS WHICH MODIFY FIELD 'UCMEXT',
*        AND ON CROSS MEMORY POST (XMPOST) TO NOT OBTAIN ANY SUSPEND
*        TYPE LOCKS SUCH AS LOCAL OR CMS.
*
*03*        CHARACTER-CODE-DEPENDENCIES = THIS MODULE IS NOT DEPENDENT
*           ON CHARACTER CODE.
*
*02*     RESTRICTIONS = THIS MODULE MUST BE SUPERVISOR STATE AND KEY
*        WHEN ENTERED
*
*02*     REGISTER-CONVENTIONS = SEE 'REGISTER EQUATES' BELOW.
*
*02*     PATCH-LABEL = CRXPATCH   (RESERVED FOR FUTURE USE)
*
*01*  MODULE-TYPE = PROCEDURE
*
*02*     PROCESSOR = ASSEMBLER-370R
*
*02*     MODULE-SIZE = 200 BYTES
*
*02*     ATTRIBUTES = NUCLEUS, ZERO PROTECT KEY,
*        REENTERABLE, REFRESHABLE, SUPERVISOR MODE
*
*01*  ENTRY-POINT = IEEBC1PE
*
*02*     PURPOSE = TO NOTIFY COMM TASK THAT THE EXTERNAL INTERRUPT KEY
*        HAS BEEN DEPRESSED.
*
*02*     LINKAGE = BRANCHED TO BY THE EXTERNAL FLIH.
*        AT ENTRY REGISTER 2 CONTAINS THE RETURN ADDRESS AND REGISTER
*        6 CONTAINS THE ENTRY POINT ADDRESS.
*
*02*     INPUT = FIELD UCMXCT, AND UCMXECB
*
*02*     OUTPUT = FIELD UCMXCT INCREMENT BY ONE, AND UCMXECB POSTED
*        (XMPOST) IF COUNT WENT FROM ZERO TO ONE
*
*02*     REGISTERS-SAVED = REGISTER 2
*
*02*     REGISTER-USAGE = REFER TO THE COMMENTS ON THE 'REGISTER
*        EQUATES' BELOW.
*
*02*     REGISTERS-RESTORED = REGISTER 2
*
*01*  EXIT-NORMAL = BR 2
*
*02*     CONDITIONS = CONDITIONS AT EXIT ARE THE SAME AS AT ENTRY, EXIT
*        IS MADE AT COMPLETION OF PROCESSING.
*
*02*     OUTPUT = NONE
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-ERROR = NONE.
*
*01*  EXTERNAL-REFERENCES = POST
*
*02*     ROUTINES = XMPOST, BRANCH ENTRY
*
*02*     DATA-AREAS = UCMXCT
*
*02*     CONTROL-BLOCKS = AS FOLLOWS:
*        CVT
*        UCM
*
*01*  TABLES = NONE
*
*01*  MACROS = NONE
*
*02*     SERIALIZATION = COMPARE AND SWAP FOR UCMXCT
*
*01*  CHANGE-ACTIVITY = Y02751
*
*01*  MESSAGES = NONE
*
*01*  ABEND-CODES = NONE
*
**** END OF SPECIFICATIONS ***/
         TITLE 'IEAVVCRX, EXTERNAL INTERRUPT PROCESSOR, EQUATES'
IEAVVCRX CSECT
         SPACE
IEEBC1PE EQU   *
         ENTRY IEEBC1PE
         SPACE 2
*  REGISTER EQUATES
         SPACE
R0       EQU   0                   REGISTER 0, UNUSED
R1       EQU   1                   REGISTER 1, UNUSED
R2       EQU   2                   RETURN REG
R3       EQU   3                   BASE FOR CVT
R4       EQU   4                   BASE FOR UCM
R5       EQU   5                   BASE FOR UCM PREFIX
R6       EQU   6                   USED IN COMPARE AND SWAP LOOP
R7       EQU   7                   USED IN COMPARE AND SWAP LOOP
R8       EQU   8                   USED IN COMPARE AND SWAP LOOP
R9       EQU   9                   FOR SAVING REG 2 ACROSS POST
R10      EQU   10                  PROGRAM BASE, EP ADDR AT ENTRY
R11      EQU   11                  ADDR OF ECB FOR XMPOST
R12      EQU   12                  CONTAINS ERRET ADDR FOR XMPOST
R13      EQU   13                  USED TO PASS ASCB ADDR TO XMPOST
R14      EQU   14                  RETURN REG FOR CALL TO XMPOST
R15      EQU   15                  USED FOR EP ADDR TO CALL XMPOST
         SPACE 2
*   PARAMETER EQUATES
         SPACE
PREFXPTR EQU   4                   OFFSET TO UCM PREFIX PTR
ZERO     EQU   0                   SYMBOLIC FOR ARITHMATIC 0
ONEBYTE  EQU   8                   SHIFT VALUE TO ISOLATE INT. COUNT
INCRE    EQU   1                   INCRCEMENT FOR INTERRUPT COUNT
         TITLE 'IEAVVCRX, EXTERNAL INTERRUPT PROCESSOR, PROCESSING'
         USING IEAVVCRX,R10
         L     R3,CVTPTR           GET ADDR OF CVT
         USING CVT,R3
         L     R4,CVTCUCB          GET ADDR OF UCM BASE
         USING UCM,R4
         LA    R5,PREFXPTR         DISPLACEMENT TO UCM PREFIX PTR
         LNR   R5,R5               DISPLACEMENT IS NEGATIVE
         AR    R5,R4               GET ADDR OF UCM PREFIX PTR
         L     R5,ZERO(R5)         GET ADDR OF UCM PREFIX
         USING UCMPRFX,R5
         SPACE
         SR    R6,R6               CLEAR REG BEFORE USE
         L     R8,UCMXCT           GET CURRENT COPY OF INTERRUPT COUNT
GETCOUNT DS    0H
         LR    R7,R8               SAVE COPY OF ORIGINAL FOR CS INSTR
         SLDL  R6,ONEBYTE          MOVE INTERRUPT COUNT TO REG 6
         LA    R6,INCRE(R6)        INCREMENT INTERRUPT COUNT
         SRDL  R6,ONEBYTE          MOVE COUNT BACK TO REG 7
         SPACE
         CS    R8,R7,UCMXCT        STORE NEW COUNT IF OLD COUNT VALID
         SPACE
         BNE   GETCOUNT            IF COMPARE FAILED, GO BACK AND TRY
*                                  AGAIN. NEW VALUE OF UCMEXT HAS BEEN
*                                  PLACED IN REG 8 IF COMPARE FAILED.
         SPACE 2
*  TEST WHETHER COUNT WAS INCREMENT FROM 0 TO 1, AND IF IT WAS, POST
*  UCMXECB TO NOTIFY COMM TASK. A CROSS MEMORY POST IS USED. ALL
*  REGISTERS WILL BE DESTROYED BUT R9 WHICH WILL BE USED TO SAVE THE
*  RETURN ADDRESS
         SPACE
         SLDL  R6,ONEBYTE          MOVE NEW COUNT FROM REG 7 TO REG 6
         BCT   R6,NOPOST           IF NEW COUNT IS NOT 1, SKIP POST
         SPACE
*  IF NEW COUNT WAS 1, FALL THRU TO XMPOST
         SPACE
         L     R15,CVT0PT01        GET ENTRY POINT TO POST
         LA    R11,UCMXECB         POINT TO ECB TO BE POSTED
         O     R11,SIGNBIT         TURN ON SIGN BIT FOR XMPOST
         LA    R12,CVTBRET         USE CVT BR 14 FOR ERRET EXIT
         L     R13,UCMASCB         POINT TO ASCB OF COMM TASK
         SPACE
         DROP  R10                 DROP BASE FOR PROGRAM
         SPACE
         SR    R10,R10             SET COMPLETION CODE TO 0
         LR    R9,R2               SAVE RETURN ADDR IN REG 9
         SPACE
         BALR  R14,R15             GO TO XMPOST ROUTINE
         SPACE
         LR    R2,R9               RELOAD THE RETURN REG
NOPOST   DS    0H
         BR    R2                  RETURN TO EXTERNAL FLIH
         TITLE 'IEAVVCRX, EXTERNAL INTERRUPT PROCESSOR, CONSTANTS'
         DS    0F
SIGNBIT  DC    X'80000000'         TO TURN ON HIGH ORDER BIT
         TITLE 'IEAVVCRX, EXTERNAL INTERRUPT PROCESSOR, CVT MAPPING'
         CVT   DSECT=YES
         TITLE 'IEAVVCRX, EXTERNAL INTERRUPT PROCESSOR, UCM MAPPING'
         IEECUCM FORMAT=NEW
         END
