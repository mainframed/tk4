         TITLE 'IEEVDUMY - MISSING MP CODE REPLACEMENT MODULE          *
                        '
*                                                                  0001
IEEVDUMY CSECT ,                                                   0001
@MAINENT BALR  @15,0                                               0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT-2)
IEAVTACR BALR  @15,0                                               0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00002-IEAVTACR-2)
         ENTRY IEAVTACR
IEAVTCR1 BALR  @15,0                                               0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00003-IEAVTCR1-2)
         ENTRY IEAVTCR1
IGFPXMFA BALR  @15,0                                               0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00004-IGFPXMFA-2)
         ENTRY IGFPXMFA
IGFPTAIM BALR  @15,0                                               0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00005-IGFPTAIM-2)
         ENTRY IGFPTAIM
         DROP  @15
@PROLOG  BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 DS    0H                                                  0002
*/*A-000000-999999                                            @Y02703*/
*                                                                  0002
*IEAVTACR:                                                         0002
*   ENTRY;                                                         0002
@EP00002 DS    0H                                                  0003
*IEAVTCR1:                                                         0003
*   ENTRY;                                                         0003
@EP00003 DS    0H                                                  0004
*IGFPXMFA:                                                         0004
*   ENTRY;                                                         0004
@EP00004 DS    0H                                                  0005
*IGFPTAIM:                                                         0005
*   ENTRY;                                                         0005
@EP00005 DS    0H                                                  0006
*                                                                  0006
*/*********************************************************        0006
*                                                                  0006
*          R M S  L O G R E C  R E C O R D  M A C R O              0006
*                                                                  0006
*    STATUS                                                        0006
*        OS/VS2 REL 2-LEVEL 2 - 8/6/73 (PTM-02577)                 0006
*                                                                  0006
*    METHOD OF ACCESS                                              0006
*                                                                  0006
*        PL/S - DCL  LRBPTR  PTR                                   0006
*               IF CHANNEL CHECK HANDLER SECTION IS TO BE USED     0006
*               POINTER LRBCVPTR (NOTE: ANY NAME MAY BE USED, LRBCVPTR
*               IS JUST AN EXAMPLE) MUST BE SET BY USER AS FOLLOWS:
*               DCL LRBCVPTR PTR                                   0006
*               LRBCVPTR = ADDR(LRBCCLOG) + LRBCLOGL               0006
*               RESPECIFY LRBCVAR BASED (LRBCVPTR)                 0006
*        BAL - IHALRB  (MARCO CALL)                                0006
*              USING     LRB,REGA                                  0006
*              LOAD REGA WITH LRB ADDRESS                          0006
*              IF CHANNEL CHECK HANDLER SECTION IS TO BE USED      0006
*              THE FOLLOWING MUST BE DONE BY THE USER              0006
*                                                                  0006
*              LA  REGB,LRBCCLOG      OBTAIN ADDRESS OF LRBCCLOG   0006
*              LH  REGC,LRBCLOGL      OBTAIN LENGTH OF LOGOUT      0006
*              AR  REGB,REGC          ADD LENGTH TO STARTING ADDRESS
*              USING  LRBCFT,REGB                                  0006
*                                                                  0006
*              WHERE REGA AND REGB ARE ANY REGISTER OTHER THAN 0,  0006
*                                                                  0006
*    F.E.'S                                                        0006
*        MICROFICHE LISTINGS - IHALRB                              0006
*                                                                  0006
*    DEVELOPERS                                                    0006
*        BAL LISTING  - SPECIFY LIST=YES ON MACRO CALL             0006
*        PL/S LISTING - SPECIFY %IHALIST='YES' BEFORE INCLUDE      0006
*                                                                  0006
*        FOR INTEGRATION, A LISTING MUST NOT BE REQUESTED UNLESS   0006
*        YOUR MODULE CREATES THE MACRO.                            0006
************************************************************         */
*                                                                  0006
*                                                                  0006
*   /*****************************************************************/
*   /*                                                               */
*   /* COMMON HEADER SECTION                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0006
*   DCL                                                            0006
*     1 LRB BASED(LRBPTR) BDY(DWORD),                              0006
*      2 LRBHTYPE CHAR(1),          /* TYPE OF RECORD                */
*      2 LRBHREL FIXED(8),          /* RELEASE NUMBER                */
*       3 LRBHSYS CHAR(1),          /* SYSTEM TYPE                   */
*        4 LRBHSYSB BIT(3),         /* ACTUAL SYSTEM BITS            */
*        4 * BIT(5),                /* ACTUAL RELEASE BITS           */
*      2 LRBHSW0 CHAR(1),           /* INDEPENDENT SWITCH BYTE       */
*       3 LRBHMORE BIT(1),          /* MULTIPLE RECORDS              */
*       3 LRBHNS BIT(1),            /* NS MACHINE                    */
*       3 * BIT(2),                 /* RESERVED                      */
*       3 LRBHTMC BIT(1),           /* TIME MACRO USED               */
*       3 * BIT(3),                 /* RESERVED                      */
*      2 LRBHSW1 CHAR(1),           /* DEPENDENT SWITCH BYTE 0       */
*      2 LRBHSW2 CHAR(1),           /* DEPENDENT SWITCH BYTE 1       */
*       3 LRBMACT CHAR(1),          /* MCH BUFFER ACTIVE FLAG        */
*        4 LRBNCEM BIT(1),          /* PENDING CHANNEL END           */
*        4 LRBNDEM BIT(1),          /* PENDING DEVICE END            */
*      2 LRBHSW3 CHAR(1),           /* DEPENDENT SWITCH BYTE 2       */
*       3 LRBMCLB CHAR(1),          /* LOGREC CLOBBER FLAG (INDICATES
*                                      LOGREC BUFFER OVERLAYED)      */
*      2 LRBHCNT CHAR(1),           /* PHYSICAL RECORDS PER LOGICAL
*                                      REC CNT                       */
*      2 * CHAR(1),                                                0006
*      2 LRBHDATE CHAR(4),          /* DATE                          */
*      2 LRBHTIME CHAR(4),          /* TIME                          */
*      2 LRBHCPID CHAR(8) BDY(DWORD),/* STIDP OPERAND FIELD          */
*       3 * CHAR(1),                /* RESERVED                      */
*       3 LRBHCSER CHAR(3),         /* CPU SERIAL NUMBER             */
*       3 LRBHMDL CHAR(2),          /* CPU MODEL NUMBER              */
*       3 LRBHMCEL FIXED(16),       /* MAXIMUM MCEL LENGTH           */
*      2 LRBBASE CHAR(*) BDY(WORD); /* DEPENDENT SECTION STARTS      */
*/*                                                                  */
*/*                SWITCH  BYTE 0 OVERLAYED (LRBHSW1)                */
*/*                                                                  */
*                                                                  0007
*   DCL                                                            0007
*     1 LRBHRSW1 DEF(LRBHSW1),                                     0007
*      2 LRBRPRIM BIT(1),           /* DDR PRIMARY STORAGE RECONFIG  */
*      2 LRBRSEC BIT(1),            /* DDR SEC STORAGE RECONFIG      */
*      2 LRBROPER BIT(1),           /* DDR OPERATOR REQUEST RECONFIG */
*      2 LRBRSYSI BIT(1),           /* DDR PERMANENT ERROR REQUEST   */
*      2 * BIT(4);                  /* RESERVED                      */
*   DCL                                                            0008
*     1 LRBHCSW1 DEF(LRBHSW1),                                     0008
*      2 LRBCMESG BIT(1),           /* MESSAGE REQUEST               */
*      2 LRBCINCO BIT(1),           /* RECORD INCOMPLETE             */
*      2 * BIT(1),                                                 0008
*      2 LRBCNOSP BIT(1),           /* CHANNEL NOT SUPPORTED         */
*      2 LRBCICUA BIT(1),           /* ILLEGAL CUA                   */
*      2 LRBCDATA BIT(1),           /* DATA OVERLAYED                */
*      2 LRBCERPP BIT(1),           /* ERP IN PROGRESS               */
*      2 * BIT(1);                                                 0008
*   DCL                                                            0009
*     1 LRBHMSW1 DEF(LRBHSW1),                                     0009
*      2 * BIT(2),                  /* RESERVED                      */
*      2 LRBMSYST BIT(1),           /* SYSTEM TERMINATED             */
*      2 * BIT(5);                  /* RESERVED                      */
*/*                                                                  */
*/*    RECORD TYPE EQUATES (LRBHTYPE)                                */
*/*                                                                  */
*                                                                  0010
*   DCL                                                            0010
*     LRBHREC BIT(8) CONSTANT('60'X);                              0010
*   DCL                                                            0011
*     LRBHMDR BIT(8) CONSTANT('90'X);                              0011
*   DCL                                                            0012
*     LRBHMIH BIT(8) CONSTANT('70'X);                              0012
*   DCL                                                            0013
*     LRBHCCH BIT(8) CONSTANT('21'X);                              0013
*   DCL                                                            0014
*     LRBHMCH BIT(8) CONSTANT('13'X);                              0014
*   DCL                                                            0015
*     LRBHTER BIT(8) CONSTANT('81'X);                              0015
*                                                                  0015
*/*   SYSTEM TYPE EQUATES (LRBHSYS)                                  */
*                                                                  0016
*   DCL                                                            0016
*     LRBHOS BIT(3) CONSTANT('000'B);                              0016
*   DCL                                                            0017
*     LRBHDOS BIT(3) CONSTANT('001'B);                             0017
*   DCL                                                            0018
*     LRBHVS1 BIT(3) CONSTANT('010'B);                             0018
*   DCL                                                            0019
*     LRBHCP67 BIT(3) CONSTANT('011'B);                            0019
*   DCL                                                            0020
*     LRBHVS2 BIT(3) CONSTANT('100'B);                             0020
*                                                                  0020
*/*    MDR EQUATES FOR SWITCH BYTE 2 (LRBHSW2)                       */
*                                                                  0021
*   DCL                                                            0021
*     LRBD3330 BIT(8) CONSTANT('01'X);                             0021
*   DCL                                                            0022
*     LRBD3211 BIT(8) CONSTANT('04'X);                             0022
*   DCL                                                            0023
*     LRBD3340 BIT(8) CONSTANT('09'X);                             0023
*   DCL                                                            0024
*     LRBDICE BIT(8) CONSTANT('07'X);                              0024
*   DCL                                                            0025
*     LRBD2946 BIT(8) CONSTANT('F0'X);                             0025
*   DCL                                                            0026
*     LRBD2948 BIT(8) CONSTANT('F1'X);                             0026
*   DCL                                                            0027
*     LRBD1006 BIT(8) CONSTANT('F2'X);                             0027
*   DCL                                                            0028
*     LRBD2703 BIT(8) CONSTANT('F3'X);                             0028
*   DCL                                                            0029
*     LRBD2969 BIT(8) CONSTANT('F4'X);                             0029
*                                                                  0029
*   /*****************************************************************/
*   /*                                                               */
*   /* MACHINE CHECK HANDLER RECORD                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0030
*   DCL                                                            0030
*     1 LRBMMCH DEF(LRBBASE) BDY(WORD),                            0030
*      2 LRBMLNH FIXED(31),         /* LENGTH OF LOGREC RECORD       */
*      2 LRBMWSC CHAR(4),           /* WAIT STATE CODE               */
*      2 LRBMCEIA CHAR(4),          /* MACHINE CHECK ERROR INDICATOR
*                                      AREA                          */
*       3 LRBMTERM CHAR(1),         /* TERMINAL ERROR FLAGS          */
*        4 * BIT(3),                /* RESERVED                      */
*        4 LRBMTSEC BIT(1),         /* SECONDARY ERROR FLAG          */
*        4 LRBMTCKS BIT(1),         /* CHECK STOP FLAG               */
*        4 LRBMTWRN BIT(1),         /* POWER WARNING FLAG            */
*        4 LRBMTDMG BIT(1),         /* SYSTEM DAMAGE FLAG            */
*        4 LRBMTINV BIT(1),         /* INVALID LOGOUT FLAG (SET WHEN
*                                      LRBMCIC = 0 )                 */
*       3 LRBMHARD CHAR(1),         /* HARD MACHINE ERROR FLAGS      */
*        4 LRBMHHRD BIT(1),         /* ASSUMED HARD ERROR FLAG       */
*        4 * BIT(3),                /* RESERVED                      */
*        4 LRBMHINV BIT(1),         /* REGISTER OR PSW INVALID FLAG  */
*        4 LRBMHSTO BIT(1),         /* HARD STORAGE FAILURE FLAG     */
*        4 LRBMHSPF BIT(1),         /* HARD PROTECTION KEY ERROR FLAG*/
*        4 LRBMHIPD BIT(1),         /* INSTRUCTION PROCESSING DAMAGE
*                                      FLAG                          */
*       3 LRBMINTM CHAR(1),         /* INTERMEDIATE ERROR FLAGS      */
*        4 * BIT(4),                /* RESERVED                      */
*        4 LRBMITOD BIT(1),         /* TOD CLOCK ERROR FLAG          */
*        4 LRBMICKC BIT(1),         /* CLOCK COMPARATOR ERROR FLAG   */
*        4 LRBMICTM BIT(1),         /* CPU TIMER ERROR FLAG          */
*        4 LRBMIL80 BIT(1),         /* INTERVAL TIMER ERROR FLAG     */
*       3 LRBMSOFT CHAR(1),         /* SOFT MACHINE ERROR FLAGS      */
*        4 LRBMSSFT BIT(1),         /* ASSUMED SOFT ERROR FLAG       */
*        4 * BIT(3),                /* RESERVED                      */
*        4 LRBMSEXD BIT(1),         /* EXTERNAL DAMAGE FLAG          */
*        4 LRBMSECC BIT(1),         /* ECC CORRECTED STORAGE ERROR 0030
*                                      FLAG                          */
*        4 LRBMSHIR BIT(1),         /* HIR CORRECTED PROCESSOR ERROR
*                                      FLAG                          */
*        4 LRBMSBUF BIT(1),         /* BUFFER ERROR FLAG             */
*      2 LRBMPDAR CHAR(1),          /* PDAR DATA (SUPPLIED BY RTM)   */
*       3 * BIT(3),                 /* RESERVED                      */
*       3 LRBMINVP BIT(1),          /* STORAGE RECONFIGURED - PAGE 0030
*                                      INVALIDATED                   */
*       3 LRBMRSRC BIT(1),          /* STORAGE RECONFIGURATION STATUS
*                                      AVAILABLE (FOLLOWING TWO BYTES
*                                      ARE MEANINGFULL)              */
*       3 LRBMRSRF BIT(1),          /* STORAGE RECONFIGURATION NOT 0030
*                                      ATTEMPTED                     */
*       3 * BIT(2),                 /* RESERVED                      */
*      2 LRBMRSR1 CHAR(1),          /* STORAGE RECONFIGURATION STATUS
*                                      BYTE 1                        */
*       3 * BIT(6),                 /* RESERVED                      */
*       3 LRBMSER BIT(1),           /* STORAGE ERROR WAS ALREADY SET
*                                      IN FRAME                      */
*       3 LRBMCHNG BIT(1),          /* FRAME HAD CHANGE INDICATOR ON */
*      2 LRBMRSR2 CHAR(1),          /* STORAGE RECONFIGURATION STATUS
*                                      BYTE 2                        */
*       3 LRBMOFLN BIT(1),          /* FRAME IS OFFLINE OR SCHEDULED
*                                      TO GO OFFLINE                 */
*       3 LRBMINTC BIT(1),          /* INTERCEPT - FRAME IS SCHEDULED
*                                      TO GO OFFLINE, HAS A PERMANENT
*                                      STORAGE ERROR, OR IS SCHEDULED
*                                      FOR V=R STATUS                */
*       3 LRBMSPER BIT(1),          /* PERMANENT ERROR OCCURS IN   0030
*                                      FRAME                         */
*       3 LRBMNUCL BIT(1),          /* FRAME CONTAINS PERMANENTLY  0030
*                                      RESIDENT SYSTEM STORAGE       */
*       3 LRBMFSQA BIT(1),          /* FRAME IS IN USE FOR SQA       */
*       3 LRBMLSQA BIT(1),          /* FRAME IS IN USE FOR LSQA      */
*       3 LRBMPGFX BIT(1),          /* FRAME CONTAINS PAGE FIXED DATA*/
*       3 LRBMVEQR BIT(1),          /* FRAME IS IN USE FOR V=R OR IS
*                                      SCHEDULED FOR V=R             */
*      2 LRBMPWL FIXED(8) UNSIGNED, /* PHYSICAL WORD LENGTH (CHECKING
*                                      BLOCK SIZE)                   */
*      2 LRBMMOSW CHAR(8),          /* MACHINE CHECK OLD PSW (FROM 0030
*                                      STORAGE LOCATIONS 48-55)      */
*      2 LRBMFLO CHAR(280) BDY(WORD),/* MACHINE CHECK FIXED LOGOUT 0030
*                                      AREA (MOVED FROM STORAGE    0030
*                                      LOCATIONS 232-511)            */
*       3 LRBMCIC CHAR(8) BDY(WORD),/* MACHINE CHECK INTERRUPT CODE
*                                      (MOVED FROM STORAGE LOCATIONS
*                                      232-239)                      */
*        4 * CHAR(1),               /* 1ST BYTE OF LRBMCIC           */
*         5 LRBMFSD BIT(1),         /* SYSTEM DAMAGE                 */
*         5 LRBMFPD BIT(1),         /* PROCESSING DAMAGE             */
*         5 LRBMFSR BIT(1),         /* SYSTEM RECOVERY               */
*         5 LRBMFTD BIT(1),         /* TIMER DAMAGE                  */
*         5 LRBMFCD BIT(1),         /* CLOCK DAMAGE                  */
*         5 LRBMFED BIT(1),         /* EXTERNAL DAMAGE               */
*         5 * BIT(1),               /* RESERVED                      */
*         5 LRBMFDG BIT(1),         /* DEGRADATION                   */
*        4 * CHAR(1),               /* 2ND BYTE OF LRBMCIC           */
*         5 LRBMFWN BIT(1),         /* POWER WARNING                 */
*         5 * BIT(5),               /* RESERVED                      */
*         5 LRBMIBU BIT(1),         /* BACK UP INDICATOR             */
*         5 LRBMIDY BIT(1),         /* DELAYED                       */
*        4 * CHAR(1),               /* 3RD BYTE OF LRBMCIC           */
*         5 LRBMFSE BIT(1),         /* STORAGE ERROR                 */
*         5 LRBMFSC BIT(1),         /* STORAGE ERROR CORRECTED       */
*         5 LRBMFKE BIT(1),         /* KEY ERROR                     */
*         5 * BIT(1),               /* RESERVED                      */
*         5 LRBMVWP BIT(1),         /* PSW EMWP VALIDITY             */
*         5 LRBMVMS BIT(1),         /* PSW MASKS AND KEY VALIDITY    */
*         5 LRBMVPM BIT(1),         /* PROGRAM MASKS AND CONDITION 0030
*                                      CODE VALIDITY                 */
*         5 LRBMVIA BIT(1),         /* INSTRUCTION ADDRESS VALIDITY  */
*        4 * CHAR(1),               /* 4TH BYTE OF LRBMCIC           */
*         5 LRBMVFA BIT(1),         /* FAILING STORAGE ADDR VALIDITY */
*         5 LRBMVRC BIT(1),         /* REGION CODE VALIDITY          */
*         5 * BIT(1),               /* RESERVED                      */
*         5 LRBMVFP BIT(1),         /* FLOATING POINT REG VALIDITY   */
*         5 LRBMVGR BIT(1),         /* GENERAL PURPOSE REG VALIDITY  */
*         5 LRBMVCR BIT(1),         /* CONTROL REG VALIDITY          */
*         5 LRBMVLG BIT(1),         /* LOGOUT (MCEL) VALIDITY        */
*         5 LRBMVST BIT(1),         /* STORAGE LOGICAL VALIDITY      */
*        4 * CHAR(1),               /* 5TH BYTE OF LRBMCIC (RESERVED)*/
*        4 * CHAR(1),               /* 6TH BYTE OF LRBMCIC           */
*         5 * BIT(6),               /* RESERVED                      */
*         5 LRBMVPT BIT(1),         /* PROCESSOR TIMER VALIDITY      */
*         5 LRBMVCC BIT(1),         /* CLOCK COMPARATOR VALIDITY     */
*        4 LRBMCELL FIXED(16) UNSIGNED,/* MACHINE CHECK EXTENDED   0030
*                                      LOGOUT LENGTH (ACTUAL LENGTH
*                                      OF MCEL DATA STORED FOR THIS
*                                      MACHINE CHECK INTERRUPTION)   */
*       3 * CHAR(8),                /* DATA MOVED FROM STORAGE     0030
*                                      LOCATIONS 240-247             */
*       3 LRBMFSA PTR(31),          /* FAILING STORAGE ADDRESS (MOVED
*                                      FROM STORAGE LOCATIONS 248-251*/
*       3 * CHAR(260),              /* DATA MOVED FROM STORAGE     0030
*                                      LOCATIONS 252-511             */
*      2 LRBMCEL CHAR(*);           /* MACHINE CHECK EXTENDED LOGOUT
*                                      AREA (LENGTH IS MODEL       0030
*                                      DEPENDENT AND VARIES FROM   0030
*                                      MACHINE CHECK TO MACHINE CHECK
*                                      FOR A GIVEN MODEL - THE ACTUAL
*                                      LENGTH IS CONTAINED IN THE  0030
*                                      HALFWORD FIELD 'LRBMCELL', THE
*                                      MAXIMUM LENGTH IS CONTAINED IN
*                                      THE HALFWORD FIELD 'LRBHMCEL',
*                                      AND THE MINIMUM LENGTH IS   0030
*                                      ZERO)                         */
*                                                                  0030
*   /*****************************************************************/
*   /*                                                               */
*   /* RECONFIGURATION (DDR) RECORD                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0031
*   DCL                                                            0031
*     1 LRBRDDR DEF(LRBBASE) BDY(WORD),                            0031
*      2 LRBRJOB CHAR(8),           /* 'FROM' DEVICE USER'S JOB NAME */
*      2 LRBRVOL1 CHAR(6),          /* VOLUME MOUNTED ON 'FROM'    0031
*                                      DEVICE                        */
*      2 LRBRVOL2 CHAR(6),          /* VOLUME MOUNTED ON 'TO' DEVICE */
*      2 LRBRPH1 CHAR(1),           /* PHYSICAL ID OF DEVICE         */
*      2 LRBRCUA1 CHAR(3),          /* PRIMARY CUA OF 'FROM'DEVICE   */
*      2 LRBRDEV1 CHAR(4),          /* 'FROM' DEVICE TYPE            */
*      2 LRBRPH2 CHAR(1),           /* PHYSICAL ID OF 'TO' DEVICE    */
*      2 LRBRCUA2 CHAR(3),          /* PRIMARY CUA OF 'TO' DEVICE    */
*      2 LRBRDEV2 CHAR(4);          /* 'TO' DEVICE TYPE              */
*                                                                  0031
*   /*****************************************************************/
*   /*                                                               */
*   /* CHANNEL CHECK HANDLER RECORD                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0032
*   DCL                                                            0032
*     1 LRBCCCH DEF(LRBBASE) BDY(WORD),                            0032
*      2 LRBCJOB CHAR(8),           /* JOBNAME OF JOB WHOSE I/O    0032
*                                      RESULTED IN A CHANNEL ERROR   */
*      2 LRBCAIO(8) CHAR(2),        /* ADDRESSES OF ACTIVE I/O (2  0032
*                                      BYTES PER ADDRESS)            */
*      2 LRBCFCCW CHAR(8),          /* FAILING CCW                   */
*      2 LRBCFCSW CHAR(8),          /* CSW STORED AT FAILURE         */
*      2 LRBCECSW CHAR(4),          /* EXTENDED CSW                  */
*      2 LRBCDEVT CHAR(4),          /* DEVICE TYPE (FROM UCB)        */
*      2 LRBCCHID CHAR(1),          /* ID OF FAILING CHANNEL         */
*/*                                    00 UNKNOWN TYPE             0032
*                                      01 INTEGRATED MULTIPLEXOR   0032
*                                      02 INTEGRATED SELECTOR      0032
*                                      03 INTEGRATED BLOCK         0032
*                                         MULTIPLEXOR              0032
*                                      04 RESERVED                 0032
*                                      05 2860 SELECTOR            0032
*                                      06 2870 MULTIPLEXOR         0032
*                                      07 2880 BLOCK MULTIPLEXOR   0032
*                                      08 NS SELECTOR              0032
*                                      09 RESERVED                 0032
*                                      0A INTEGRATED FILE ADAPTER  0032
*                                      0B-FF RESERVED                */
*                                                                  0032
*      2 LRBCCUA CHAR(3),           /* ADDRESS OF CHANNEL AND UNIT IN
*                                      USE AT TIME OF FAILURE        */
*       3 * CHAR(1),                                               0032
*       3 LRBCCUA2 CHAR(2),         /* 2 BYTE CHANNEL AND UNIT     0032
*                                      ADDRESS AT TIME OF FAILURE    */
*      2 LRBCHCUA CHAR(2),          /* CHANNEL AND UNIT ADDRESS    0032
*                                      LOGGED BY HARDWARE            */
*      2 LRBCLOGL CHAR(2),          /* LENGTH OF CHANNEL LOGOUT      */
*      2 LRBCCLOG CHAR(*);          /* CHANNEL LOGOUT. LENGTH      0032
*                                      DEPENDANT UPON CHANNEL TYPE   */
*   DCL                                                            0033
*     1 LRBCVAR BASED,              /* CCH VARIABLE POSITION DATA    */
*      2 LRBCFT CHAR(2),            /* CCH FOOTPRINTS                */
*      2 LRBCRESD CHAR(2),          /* RESERVED                      */
*      2 LRBCMPF1 CHAR(1),          /* MP INFORMATION FLAG BYTE ,  0033
*                                      RESERVED                      */
*      2 LRBCMPF2 CHAR(1),          /* MP INFORMATION FLAG BYTE ,  0033
*                                      RESERVED                      */
*      2 LRBCMPNO CHAR(2),          /* NUMBER OF ACTIVE PROCESSORS   */
*      2 LRBCMP(*),                 /* MP CPU ID AND CHANNEL STATUS
*                                      (FOUR BYTES PER CPU)          */
*       3 LRBCMPPA CHAR(2),         /* ADDRESS OF CPU WITH A CHANNEL
*                                      DETECTED ERROR                */
*       3 LRBCMPCS CHAR(2);         /* CHANNEL STATUS (ONLINE OR   0033
*                                      OFFLINE). OFFLINE=1, BIT 0 =
*                                      CHANNEL 0 ETC.                */
*                                                                  0033
*   /*****************************************************************/
*   /*                                                               */
*   /* MISCELLANEOUS DATA RECORDER (MDR) RECORD                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0034
*   DCL                                                            0034
*     1 LRBDMDR DEF(LRBBASE) BDY(WORD),                            0034
*      2 LRBDCUA1 CHAR(2),          /* PRIMARY DEVICE CUA            */
*      2 LRBDVOL CHAR(6),           /* VOLUME SERIAL NUMBER          */
*      2 LRBDSENS CHAR(24);         /* DEVICE SENSE DATA             */
*                                                                  0034
*   /*****************************************************************/
*   /*                                                               */
*   /* MISSING INTERRUPTION HANDLER (MIH) RECORD                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0035
*   DCL                                                            0035
*     1 LRBNMIH DEF(LRBBASE) BDY(WORD),                            0035
*      2 LRBNJOB CHAR(8),           /* I/O REQUEST PENDING JOBNAME   */
*      2 LRBNCUA2 CHAR(3),          /* DEVICE CUA                    */
*      2 LRBNCUA1 CHAR(3),          /* PRIMARY DEVICE CUA            */
*      2 LRBNVOL CHAR(6),           /* VOLUME SERIAL NUMBER          */
*      2 LRBNDEVT CHAR(4),          /* DEVICE UCB TYPE               */
*      2 LRBNINT CHAR(8);           /* TIME INTERVAL                 */
*                                                                  0035
*   /*****************************************************************/
*   /*                                                               */
*   /* SYSTEM TERMINATION RECORD                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0036
*   DCL                                                            0036
*     1 LRBTTER DEF(LRBBASE) BDY(WORD),                            0036
*      2 LRBTLNH FIXED(31),         /* LOGREC RECORD LENGTH          */
*      2 LRBTWSC CHAR(4),           /* WAIT STATE CODE               */
*      2 LRBTUSR CHAR(*);           /* USER DATA FIELD             0036
*                                                                    */
*                                                                  0037
*/* **************************************************************** */
*/*                                                                  */
*/*            PREFIXED SAVE AREA                                    */
*/*                                                                  */
*/*  OS/VS2 RELEASE 2, 11/15/73, LEVEL=24                            */
*/*                                                                  */
*/*  METHOD OF ACCESS                                                */
*/*      BAL  - DSECT IS PRODUCED UNLESS DSECT=NO IS SPECIFIED.      */
*/*             USING ON PSA GIVES ADDRESSABILITY FOR ALL SYMBOLS.   */
*/*      PL/S - PSA WILL BE BASED(0) FOR PL/S I OR LOCATION(0) FOR   */
*/*             PL/S II UNLESS %PSABASE IS SET TO SOME OTHER VALUE   */
*/*             BEFORE INCLUDE FOR MACRO.                            */
*/*                                                                  */
*/*  NOTE                                                            */
*/*      THE LABELS BEGINNING WITH PSA OR FLC ARE THE PROPER LABELS  */
*/*      TO USE.  THE OTHER LABELS ARE GIVEN AS ALIAS NAMES FOR      */
*/*      COMPATIBILITY WITH LABELS USED FOR SYSTEM 360 LOW CORE.     */
*/*                                                                  */
*/* **************************************************************** */
*                                                                  0037
*   DECLARE                                                        0037
*     1 PSA LOCATION(0) BDY(DWORD),                                0037
*      2 FLCRNPSW CHAR(8) BDY(DWORD),/* RESTART NEW PSW (AFTER IPL)  */
*       3 FLCIPPSW CHAR(8) BDY(DWORD),/* IPL PSW                     */
*      2 FLCROPSW CHAR(8) BDY(DWORD),/* RESTART OLD PSW (AFTER IPL)  */
*       3 FLCICCW1 CHAR(8) BDY(DWORD),/* IPL CCW1                    */
*      2 FLCICCW2 CHAR(8) BDY(DWORD),/* IPL CCW2                     */
*       3 FLCCVT PTR(31),           /* ADDRESS OF CVT (AFTER IPL)    */
*       3 * CHAR(4),                /* RESERVED (AFTER IPL)          */
*      2 FLCEOPSW CHAR(8) BDY(DWORD),/* EXTERNAL OLD PSW             */
*      2 FLCSOPSW CHAR(8) BDY(DWORD),/* SVC OLD PSW                  */
*      2 FLCPOPSW CHAR(8) BDY(DWORD),/* PROGRAM CHECK OLD PSW        */
*      2 FLCMOPSW CHAR(8) BDY(DWORD),/* MACHINE CHECK OLD PSW        */
*      2 FLCIOPSW CHAR(8) BDY(DWORD),/* INPUT/OUTPUT OLD PSW         */
*      2 FLCCSW CHAR(8) BDY(DWORD), /* CHANNEL STATUS WORD           */
*      2 FLCCAW CHAR(4) BDY(WORD),  /* CHANNEL ADDRESS WORD          */
*      2 FLCCVT2 PTR(31),           /* ADDRESS OF CVT - USED BY DUMP
*                                      ROUTINES ICB319               */
*      2 FLCTIMER CHAR(4),          /* TIMER                         */
*      2 FLCTRACE PTR(31),          /* ADDRESS OF TRACE TABLE HEADER */
*      2 FLCENPSW CHAR(8) BDY(DWORD),/* EXTERNAL NEW PSW             */
*      2 FLCSNPSW CHAR(8) BDY(DWORD),/* SVC NEW PSW                  */
*      2 FLCPNPSW CHAR(8) BDY(DWORD),/* PROGRAM CHECK NEW PSW        */
*      2 FLCMNPSW CHAR(8) BDY(DWORD),/* MACHINE CHECK NEW PSW        */
*      2 FLCINPSW CHAR(8) BDY(DWORD),/* INPUT/OUTPUT NEW PSW         */
*      2 * CHAR(4),                 /* RESERVED                      */
*      2 PSAEEPSW CHAR(4) BDY(WORD),/* EXTENDED PSW DATA STORED ON 0037
*                                      EXTERNAL INTERRUPT MDC084     */
*       3 PSASPAD FIXED(15),        /* ISSUING PROCESSOR'S PHYSICAL
*                                      ADDRESS ON EMS OR EXTERNAL  0037
*                                      CALL INTERRUPT MDC046         */
*       3 FLCEICOD FIXED(15),       /* EXTERNAL INTERRUPTION CODE    */
*      2 PSAESPSW CHAR(4) BDY(WORD),/* EXTENDED PSW DATA STORED ON 0037
*                                      SVC INTERRUPT MDC085          */
*       3 * CHAR(1),                /* RESERVED - SET TO ZERO        */
*       3 FLCSVILC PTR(8),          /* SVC INSTRUCTION LENGTH COUNTER
*                                      - NUMBER OF BYTES MDC079      */
*        4 * BIT(5),                /* ALWAYS ZERO                   */
*        4 FLCSILCB BIT(3),         /* SIGNIFICANT BITS IN ILC FIELD
*                                      - LAST BIT IS ALWAYS ZERO   0037
*                                      MDC080                        */
*       3 FLCSVCN FIXED(15),        /* SVC INTERRUPTION CODE - SVC 0037
*                                      NUMBER MDC081                 */
*      2 PSAEPPSW CHAR(8) BDY(WORD),/* EXTENDED PSW FOR PROGRAM    0037
*                                      INTERRUPT MDC086              */
*       3 * CHAR(1),                /* RESERVED - SET TO ZERO        */
*       3 FLCPIILC PTR(8),          /* PROGRAM INSTRUCTION LENGTH  0037
*                                      COUNTER - NUMBER OF BYTES IN
*                                      INSTRUCTION CAUSING PROGRAM 0037
*                                      INTERRUPTION MDC082           */
*        4 * BIT(5),                /* ALWAYS ZERO                   */
*        4 FLCPILCB BIT(3),         /* SIGNIFICANT BITS IN ILC FIELD
*                                      - LAST BIT IS ALWAYS ZERO   0037
*                                      MDC083                        */
*       3 FLCPICOD FIXED(15),       /* PROGRAM INTERRUPTION CODE     */
*        4 PSARV049 CHAR(1),        /* RESERVED FOR IMPRECISE      0037
*                                      INTERRUPTS MDC087             */
*        4 PSAPICOD PTR(8),         /* 8-BIT INTERRUPT CODE MDC088   */
*         5 PSAPIPER BIT(1),        /* PER INTERRUPT OCCURRED MDC089 */
*         5 PSAPIMC BIT(1),         /* MONITOR CALL INTERRUPT      0037
*                                      OCCURRED MDC090               */
*         5 PSAPIPC BIT(6),         /* AN UNSOLICITED PROGRAM CHECK
*                                      HAS OCCURRED IF ANY OF THESE 6
*                                      BITS ARE ON MDC091            */
*       3 FLCTEA PTR(31),           /* TRANSLATION EXCEPTION ADDRESS */
*        4 * CHAR(1),               /* RESERVED - SET TO ZERO        */
*        4 FLCTEAA PTR(24),         /* TRANSLATION EXCEPTION ADDRESS */
*      2 * CHAR(1),                 /* RESERVED - SET TO ZERO        */
*      2 FLCMCNUM PTR(8),           /* MONITOR CLASS NUMBER          */
*      2 FLCPERCD CHAR(1),          /* PROGRAM EVENT RECORDING CODE  */
*      2 * CHAR(1),                 /* RESERVED - SET TO ZERO        */
*      2 FLCPER PTR(31),            /* PER ADDRESS                   */
*       3 * CHAR(1),                /* RESERVED - SET TO ZERO        */
*       3 FLCPERA PTR(24),          /* PER ADDRESS                   */
*      2 * CHAR(1),                 /* RESERVED - SET TO ZERO        */
*      2 FLCMTRCD CHAR(3),          /* MONITOR CODE                  */
*      2 * CHAR(8),                 /* RESERVED                      */
*      2 FLCMCLA CHAR(344) BDY(DWORD),/* MACHINE CHECK LOGOUT AREA   */
*       3 FLCCHNID CHAR(4),         /* CHANNEL ID                    */
*       3 FLCIOEL PTR(31),          /* SAME AS FLCIOELA BELOW        */
*        4 * CHAR(1),               /* RESERVED                      */
*        4 FLCIOELA PTR(24),        /* I/O EXTENDED LOGOUT (IOEL)  0037
*                                      POINTER                       */
*       3 FLCLCL CHAR(4),           /* LIMITED CHANNEL LOGOUT (ECSW) */
*       3 * CHAR(2),                /* RESERVED                      */
*       3 * CHAR(1),                /* RESERVED MDC051               */
*       3 * CHAR(1),                /* RESERVED MDC052               */
*       3 FLCIOA PTR(31),           /* I/O ADDRESS                   */
*        4 * CHAR(1),               /* RESERVED                      */
*        4 FLCIOAA PTR(24),         /* I/O ADDRESS                   */
*       3 * CHAR(44),               /* RESERVED                      */
*       3 FLCMCIC CHAR(8),          /* MACHINE-CHECK INTERRUPTION  0037
*                                      CODE                          */
*       3 * CHAR(8),                /* RESERVED                      */
*       3 FLCFSA PTR(31),           /* FAILING STORAGE ADDRESS       */
*        4 * CHAR(1),               /* ZEROES                        */
*        4 FLCFSAA PTR(24),         /* FAILING STORAGE ADDRESS       */
*       3 FLCRGNCD CHAR(4),         /* REGION CODE                   */
*       3 FLCFLA CHAR(96) BDY(WORD),/* FIXED LOGOUT AREA             */
*       3 FLCFPSAV CHAR(32) BDY(DWORD),/* FLOATING POINT REGISTER  0037
*                                      SAVE AREA                     */
*       3 FLCGRSAV(16) FIXED(31),   /* GENERAL REGISTER SAVE AREA    */
*       3 FLCCRSAV(16) FIXED(31),   /* CONTROL REGISTER SAVE AREA    */
*      2 FLCHDEND CHAR(0) BDY(DWORD),/* END OF HARDWARE ASSIGNMENTS  */
*      2 PSAPSA CHAR(4) BDY(WORD),  /* CONTROL BLOCK ACRONYM IN    0037
*                                      EBCDIC                        */
*      2 PSACPUPA PTR(15),          /* PHYSICAL CPU ADDRESS (CHANGED
*                                      DURING ACR) (MDC130)    YM3489*/
*      2 PSACPULA PTR(15),          /* LOGICAL CPU ADDRESS           */
*      2 PSAPCCAV PTR(31),          /* VIRTUAL ADDRESS OF PCCA       */
*      2 PSAPCCAR PTR(31),          /* REAL ADDRESS OF PCCA          */
*      2 PSALCCAV PTR(31),          /* VIRTUAL ADDRESS OF LCCA       */
*      2 PSALCCAR PTR(31),          /* REAL ADDRESS OF LCCA          */
*      2 PSATNEW PTR(31),           /* TCB NEW POINTER               */
*      2 PSATOLD PTR(31),           /* TCB OLD POINTER               */
*      2 PSAANEW PTR(31),           /* ASCB NEW POINTER              */
*      2 PSAAOLD PTR(31),           /* ASCB OLD POINTER              */
*      2 PSASUPER CHAR(4) BDY(WORD),/* SUPERVISOR CONTROL WORD       */
*       3 PSASUP1 BIT(8),           /* FIRST BYTE OF PSASUPER        */
*        4 PSAIO BIT(1),            /* I/O FLIH                      */
*        4 PSASVC BIT(1),           /* SVC FLIH                      */
*        4 PSAEXT BIT(1),           /* EXTERNAL FLIH                 */
*        4 PSAPI BIT(1),            /* PROGRAM CHECK FLIH            */
*        4 PSALOCK BIT(1),          /* LOCK ROUTINE                  */
*        4 PSADISP BIT(1),          /* DISPATCHER                    */
*        4 PSAIPCDR BIT(1),         /* SIGP - DIRECT                 */
*        4 PSAIPCRP BIT(1),         /* SIGP - REMOTE PENDING         */
*       3 PSASUP2 BIT(8),           /* SECOND BYTE OF PSASUPER       */
*        4 PSAIPCRI BIT(1),         /* SIGP - REMOTE IMMEDIATE       */
*        4 PSAGTF BIT(1),           /* GTF GIVEN CONTROL FROM FLIH   */
*        4 PSAIPCEC BIT(1),         /* EXTERNAL CALL SLIH IS ACTIVE
*                                      MDC047                        */
*        4 PSAIPCES BIT(1),         /* EMERGENCY SIGNAL SLIH IS    0037
*                                      ACTIVE MDC048                 */
*        4 PSAIPCE2 BIT(1),         /* EMERGENCY SIGNAL (EMS) SLIH 0037
*                                      RECURSIVE ENTRY FLAG MDC110   */
*        4 PSAACR BIT(1),           /* AUTOMATIC CPU RECONFIGURATION
*                                      (ACR) IN CONTROL MDC119       */
*        4 PSARTM BIT(1),           /* RECOVERY TERMINATION MONITOR
*                                      (RTM) IN CONTROL MDC120       */
*        4 PSALCR BIT(1),           /* LOW CORE REFRESH ROUTINE IS 0037
*                                      ACTIVE MDC126                 */
*       3 PSASUP3 BIT(8),           /* THIRD BYTE OF PSASUPER        */
*        4 PSAIOSUP BIT(1),         /* IF ON, A MAINLINE IOS       0037
*                                      COMPONENT SUCH AS CHANNEL   0037
*                                      SCHEDULER HAS ENTERED A     0037
*                                      PHYSICALLY DISABLED STATE   0037
*                                      WITHOUT REGARD TO LOCKING   0037
*                                      REQUIREMENTS MDC127           */
*        4 PSARV008 BIT(1),         /* RESERVED                      */
*        4 PSARV009 BIT(1),         /* RESERVED                      */
*        4 PSARV010 BIT(1),         /* RESERVED                      */
*        4 PSARV011 BIT(1),         /* RESERVED                      */
*        4 PSARV012 BIT(1),         /* RESERVED                      */
*        4 PSARV013 BIT(1),         /* RESERVED                      */
*        4 PSARV014 BIT(1),         /* RESERVED                      */
*       3 PSASUP4 BIT(8),           /* FOURTH BYTE OF PSASUPER       */
*        4 PSARV015 BIT(1),         /* RESERVED                      */
*        4 PSARV016 BIT(1),         /* RESERVED                      */
*        4 PSARV017 BIT(1),         /* RESERVED                      */
*        4 PSARV018 BIT(1),         /* RESERVED                      */
*        4 PSARV019 BIT(1),         /* RESERVED                      */
*        4 PSARV020 BIT(1),         /* RESERVED                      */
*        4 PSARV021 BIT(1),         /* RESERVED                      */
*        4 PSARV022 BIT(1),         /* RESERVED                      */
*      2 PSAGPREG(3) FIXED(31),     /* REGISTER SAVE AREA FOR I/O  0037
*                                      FLIH, SVC FLIH, EXTERNAL FLIH
*                                      AND SYSTEM TRACE              */
*      2 PSARSREG FIXED(31),        /* RESTART FLIH REGISTER SAVE    */
*      2 PSAPIREG FIXED(31),        /* PROGRAM CHECK FLIH REGISTER 0037
*                                      SAVE                          */
*      2 PSAEXPS1 CHAR(8) BDY(DWORD),/* EXTERNAL FLIH PSW SAVE AREA 1*/
*      2 PSAEXPS2 CHAR(8) BDY(DWORD),/* EXTERNAL FLIH PSW SAVE AREA 2*/
*      2 PSAMPSW CHAR(8) BDY(DWORD),/* SETLOCK MODEL PSW             */
*      2 PSAMCHEX CHAR(8) BDY(DWORD),/* MCH EXIT PSW                 */
*      2 PSAIPCR CHAR(4) BDY(WORD), /* IPC INSTRUCTION TO BE EXECUTED*/
*      2 PSAIPCRM CHAR(1),          /* BYTE USED BY ABOVE IPC      0037
*                                      INSTRUCTION                   */
*      2 * CHAR(3),                 /* RESERVED                      */
*      2 PSAIPCD CHAR(4) BDY(WORD), /* IPC INSTRUCTION TO BE EXECUTED*/
*      2 PSAIPCDM CHAR(1),          /* BYTE USED BY ABOVE IPC      0037
*                                      INSTRUCTION                   */
*      2 * CHAR(3),                 /* RESERVED                      */
*      2 PSAIPCSA FIXED(31),        /* IPC REGISTER SAVE AREA MDC049 */
*      2 PSAHLHIS FIXED(31),        /* SAVE AREA FOR PSAHLHI MDC050  */
*      2 PSARECUR CHAR(1),          /* RESTART FLIH RECURSION      0037
*                                      INDICATOR. IF X'00', FLIH NOT
*                                      IN CONTROL. IF X'FF', FLIH IN
*                                      CONTROL, ENTRY IS RECURSIVE 0037
*                                      MDC093                        */
*      2 PSADSSGO PTR(8),           /* INITIALIZE DSS FLAG, SET BY 0037
*                                      OPERATOR. IF X'00', DSS NOT TO
*                                      BE ACTIVATED. IF NOT X'00', 0037
*                                      NEXT RESTART INTERRUPT FROM 0037
*                                      CONSOLE SHOULD INITIALIZE DSS.
*                                      MDC094                        */
*      2 PSARV050 FIXED(15),        /* RESERVED                      */
*      2 PSASRSA PTR(31),           /* REAL ADDRESS OF SAVE AREA USED
*                                      DURING STOP AND RESTART     0037
*                                      SUBROUTINE MDC095             */
*      2 PSACLHT CHAR(56) BDY(WORD),/* CPU LOCKS HELD TABLE.       0037
*                                      INITIALIZED TO ZERO. IF LOCK
*                                      IS HELD, WORD REPRESENTING  0037
*                                      LOCK HAS ITS ADDRESS.         */
*       3 PSADISPL PTR(31),         /* GLOBAL DISPATCHER LOCK        */
*       3 PSAASML PTR(31),          /* AUXILIARY STORAGE MANAGEMENT
*                                      (ASM) LOCK MDC002             */
*       3 PSASALCL PTR(31),         /* SPACE ALLOCATION LOCK MDC003  */
*       3 PSAIOSSL PTR(31),         /* IOS SYNCHRONIZATION LOCK    0037
*                                      MDC010                        */
*       3 PSAIOSCL PTR(31),         /* IOS CHANNEL AVAILABLE TABLE 0037
*                                      LOCK MDC004                   */
*       3 PSAIOSUL PTR(31),         /* IOS UNIT CONTROL BLOCK LOCK 0037
*                                      MDC005                        */
*       3 PSAIOSLL PTR(31),         /* IOS LOGICAL CHANNEL QUEUE LOCK
*                                      MDC006                        */
*       3 PSATPNCL PTR(31),         /* TCAM'S TPNCP LOCK MDC007      */
*       3 PSATPDNL PTR(31),         /* TCAM'S TPDNCB LOCK MDC008     */
*       3 PSATPACL PTR(31),         /* TCAM'S TPACBDEB LOCK MDC009   */
*       3 PSAOPTL PTR(31),          /* OPTIMIZER LOCK                */
*       3 PSACMSL PTR(31),          /* CROSS MEMORY SERVICES LOCK    */
*       3 PSALOCAL PTR(31),         /* LOCAL LOCK                    */
*       3 PSARV023 PTR(31),         /* RESERVED LOCK                 */
*      2 PSALKSA CHAR(64) BDY(WORD),/* SETLOCK REGISTER SAVE AREA    */
*       3 PSALKR0 FIXED(31),        /* SETLOCK'S CALLER'S REGISTER 0 */
*       3 PSALKR1 FIXED(31),        /* SETLOCK'S CALLER'S REGISTER 1 */
*       3 PSALKR2 FIXED(31),        /* SETLOCK'S CALLER'S REGISTER 2 */
*       3 PSALKR3 FIXED(31),        /* SETLOCK'S CALLER'S REGISTER 3 */
*       3 PSALKR4 FIXED(31),        /* SETLOCK'S CALLER'S REGISTER 4 */
*       3 PSALKR5 FIXED(31),        /* SETLOCK'S CALLER'S REGISTER 5 */
*       3 PSALKR6 FIXED(31),        /* SETLOCK'S CALLER'S REGISTER 6 */
*       3 PSALKR7 FIXED(31),        /* SETLOCK'S CALLER'S REGISTER 7 */
*       3 PSALKR8 FIXED(31),        /* SETLOCK'S CALLER'S REGISTER 8 */
*       3 PSALKR9 FIXED(31),        /* SETLOCK'S CALLER'S REGISTER 9 */
*       3 PSALKR10 FIXED(31),       /* SETLOCK'S CALLER'S REGISTER 10*/
*       3 PSALKR11 FIXED(31),       /* SETLOCK'S CALLER'S REGISTER 11*/
*       3 PSALKR12 FIXED(31),       /* SETLOCK'S CALLER'S REGISTER 12*/
*       3 PSALKR13 FIXED(31),       /* SETLOCK'S CALLER'S REGISTER 13*/
*       3 PSALKR14 FIXED(31),       /* SETLOCK'S CALLER'S REGISTER 14*/
*       3 PSALKR15 FIXED(31),       /* SETLOCK'S CALLER'S REGISTER 15*/
*      2 PSAHLHI CHAR(4) BDY(WORD), /* HIGHEST LOCK HELD INDICATOR   */
*       3 PSACLHS BIT(32) BDY(WORD),/* CPU LOCKS HELD STRING MDC122  */
*      2 PSALITA PTR(31),           /* ADDRESS OF LOCK INTERFACE   0037
*                                      TABLE                         */
*      2 PSAPSWSV CHAR(8) BDY(DWORD),/* PSW SAVE AREA FOR DISPATCHER
*                                      AND ACR                       */
*      2 PSACR0 FIXED(31),          /* SAVE AREA FOR CONTROL REGISTER
*                                      0                             */
*      2 PSAMCHFL BIT(8),           /* MCH RECURSION FLAGS           */
*      2 PSASYMSK CHAR(1),          /* THIS FIELD WILL BE USED IN  0037
*                                      CONJUNCTION WITH THE STNSM  0037
*                                      INSTRUCTION TO PLACE IOS    0037
*                                      CHANNEL SCHEDULER INTO A    0037
*                                      DISABLED STATE AND          0037
*                                      SIMULTANEOUSLY SAVE THE SYSTEM
*                                      MASK OF THE CALLER MDC022     */
*      2 PSARV061 CHAR(1),          /* RESERVED (MDC060)       YM4244*/
*      2 PSAMCHIC CHAR(1),          /* MCH INITIALIZATION COMPLETE 0037
*                                      FLAGS MDC098                  */
*      2 PSAWKRAP PTR(31),          /* REAL ADDRESS OF VARY CPU    0037
*                                      PARAMETER LIST MDC106         */
*      2 PSAWKVAP PTR(31),          /* VIRTUAL ADDRESS OF VARY CPU 0037
*                                      PARAMETER LIST MDC107         */
*      2 PSAVSTAP FIXED(15),        /* WORK AREA FOR VARY CPU MDC108 */
*      2 PSACPUSA PTR(15),          /* PHYSICAL CPU ADDRESS (STATIC)
*                                      (MDC131)                YM3489*/
*      2 PSASTOR FIXED(31),         /* MASTER MEMORY'S SEGMENT TABLE
*                                      ORIGIN REGISTER (STOR) VALUE  */
*      2 PSADSSRS FIXED(31),        /* REGISTER SAVE FOR DSS PROGRAM
*                                      AND SVC INTERRUPT HANDLERS  0037
*                                      MDC053                        */
*      2 PSADSSR2 FIXED(31),        /* REGISTER SAVE AREA FOR DSS I/O
*                                      AND EXTERNAL INTERRUPT      0037
*                                      HANDLERS MDC054               */
*      2 PSADSSR3 FIXED(31),        /* REGISTER SAVE AREA FOR DSS  0037
*                                      ERROR RECOVERY ROUTINE MDC055 */
*      2 PSADSSWK FIXED(31),        /* WORK AREA FOR DSS INTERRUPT 0037
*                                      HANDLERS MDC056               */
*      2 PSADSSTS(5) FIXED(31),     /* REGISTER SAVE FOR DSS MODULES
*                                      MAKING CALLS TO IQATSS MDC023 */
*      2 PSADSSFL CHAR(4) BDY(WORD),/* DSS FLAG BYTES MDC024         */
*       3 PSADSSF1 BIT(8),          /* DSS STATUS BYTE MDC029        */
*        4 PSADSSMV BIT(1),         /* DSS MONITORING, VS2 RUNNING 0037
*                                      MDC030                        */
*        4 PSADSSDM BIT(1),         /* DSS IN VS2-2 VM MDC031        */
*        4 PSADSSDD BIT(1),         /* DSS IN DSS VM MDC032          */
*        4 PSADSSDW BIT(1),         /* DSS IN DSS WAIT MDC033        */
*        4 PSADSSTP BIT(1),         /* DSS PROCESSING SIGP MDC034    */
*        4 PSADSSSP BIT(1),         /* DSS SIGP PENDING MDC035       */
*        4 PSADSSOI BIT(1),         /* DSS EXECUTING OVERLAID      0037
*                                      INSTRUCTION MDC036            */
*        4 PSADSSPI BIT(1),         /* DSS EXECUTING PRIVILEGED    0037
*                                      INSTRUCTION MDC037            */
*       3 PSADSSF2 CHAR(1),         /* SYSTEM STATUS BYTE MDC038     */
*       3 PSADSSF3 BIT(8),          /* DSS FLAG BYTE MDC099          */
*        4 PSADSSGP BIT(1),         /* DSS SIGP INDICATOR MDC100     */
*        4 PSADSSES BIT(1),         /* ERROR SHORT SAVE INDICATOR  0037
*                                      MDC113                        */
*        4 PSADSSNM BIT(1),         /* NON-MONITORABLE CODE INDICATOR
*                                      MDC114                        */
*        4 PSADSSRW BIT(1),         /* DSS OWNS CVTRSTWD MDC117      */
*        4 PSARV054 BIT(1),         /* RESERVED FOR DSS MDC100       */
*        4 PSARV055 BIT(1),         /* RESERVED FOR DSS MDC100       */
*        4 PSARV056 BIT(1),         /* RESERVED FOR DSS MDC100       */
*        4 PSARV057 BIT(1),         /* RESERVED FOR DSS MDC100       */
*       3 PSADSSF4 BIT(8),          /* DSS RECURSION FLAGS MDC101    */
*        4 PSADSSRC BIT(1),         /* PROGRAM-SVC RECURSION FLAG  0037
*                                      MDC057                        */
*        4 PSADSS12 BIT(1),         /* PROGRAM INTERRUPT 12 RECURSION
*                                      FLAG MDC058                   */
*        4 PSADSSIE BIT(1),         /* I/O-EXTERNAL RECURSION FLAG 0037
*                                      MDC059                        */
*        4 PSADSSC0 BIT(1),         /* CONTROL REGISTER 0 INVALID  0037
*                                      FLAG MDC092                   */
*        4 PSADSSDE BIT(1),         /* DAT ERROR WHILE DSS RUNNING IN
*                                      VS2 VM MDC102                 */
*        4 PSADSSVE BIT(1),         /* DAT ERROR WHILE DSS RUNNING IN
*                                      DSS VM MDC103                 */
*        4 PSADSS10 BIT(1),         /* SEGMENT EXCEPTION RECURSION 0037
*                                      FLAG MDC104                   */
*        4 PSADSS05 BIT(1),         /* ADDRESSING EXCEPTION RECURSION
*                                      FLAG MDC105                   */
*      2 PSADSSRP CHAR(8) BDY(DWORD),/* DSS TO VS2-2 RESUME PSW    0037
*                                      MDC025                        */
*      2 PSADSSPP CHAR(8) BDY(DWORD),/* DSS PSW FOR RETURNING CONTROL
*                                      FROM PRIVILEGED INSTRUCTION 0037
*                                      STREAM TO VS2 MDC026          */
*      2 PSADSS14 FIXED(31),        /* RESTART SECOND LEVEL INTERRUPT
*                                      HANDLER CONTROL REGISTER 14 0037
*                                      SAVE AREA MDC115              */
*      2 PSADSSFW FIXED(31),        /* FULL-WORD DSS WORK AREA MDC116*/
*      2 PSADSSPR FIXED(31),        /* DSS REGISTER SAVE FOR       0037
*                                      PRIVILEGED INSTRUCTION STREAM
*                                      MDC028                        */
*      2 PSADSSED CHAR(0) BDY(WORD),/* END OF DSS FIELDS MDC045      */
*      2 PSARV025 FIXED(31),        /* RESERVED FOR DSS              */
*      2 PSARV040 PTR(31),          /* RESERVED FOR DSS              */
*      2 PSARV041 PTR(31),          /* RESERVED FOR DSS              */
*      2 PSARV042 PTR(31),          /* RESERVED FOR DSS              */
*      2 PSARV043 PTR(31),          /* RESERVED FOR DSS              */
*      2 PSARV044 PTR(31),          /* RESERVED FOR DSS              */
*      2 PSARV045 PTR(31),          /* RESERVED FOR DSS              */
*      2 PSARSVT(16) PTR(31),       /* RECOVERY STACK VECTOR TABLE 0037
*                                      (EACH ELEMENT MAPPED BELOW) 0037
*                                      MDC064                        */
*      2 PSASRPSW CHAR(8) BDY(DWORD),/* RESUME PSW FOR STOP AND    0037
*                                      RESTART SUBROUTINE MDC096     */
*      2 PSARSPSW CHAR(8) BDY(DWORD),/* RESUME PSW FIELD FOR RESTART
*                                      INTERRUPT HANDLER MDC097      */
*      2 PSASTART CHAR(16) BDY(DWORD),/* START FATHOM RECORDING    0037
*                                      MDC111                        */
*      2 PSASTOP CHAR(16) BDY(DWORD),/* STOP FATHOM RECORDING MDC112 */
*      2 PSASFACC CHAR(4) BDY(WORD),/* SETFRR ABEND COMPLETION CODE
*                                      USED WHEN A SETFRR ADD IS   0037
*                                      ISSUED AGAINST A FULL FRR   0037
*                                      STACK MDC123                  */
*      2 PSALSFCC CHAR(4) BDY(WORD),/* A LOAD INSTRUCTION TO PRIME 0037
*                                      REGISTER 1 WITH THE SETFRR  0037
*                                      ABEND COMPLETION CODE IN    0037
*                                      PSASFACC MDC124               */
*      2 PSASVC13 CHAR(2),          /* AN SVC 13 INSTRUCTION MDC125  */
*      2 PSARV059 FIXED(15),        /* RESERVED                      */
*      2 PSARV060 FIXED(31),        /* RESERVED                      */
*      2 PSAPCPSW CHAR(8) BDY(DWORD),/* TEMPORARY OLD PSW STORAGE FOR
*                                      PROGRAM FLIH (MDC129)   YM0943*/
*      2 PSAUSEND CHAR(0) BDY(DWORD),/* END OF ASSIGNED FIELDS MDC109*/
*      2 * CHAR(2040) BDY(DWORD),   /* RESERVED                      */
*      2 PSASTAK CHAR(340) BDY(DWORD),/* NORMAL FRR STACK MDC118     */
*      2 * CHAR(684);               /* RESERVED FOR EXPANSION OF   0037
*                                      PSASTAK MDC118                */
*   DECLARE                                                        0038
*     FLC DEF(PSA) CHAR(LENGTH(PSA)) BDY(DWORD);                   0038
*   DECLARE                                                        0039
*     1 PSARSVTE CHAR(64) DEF(PSARSVT) BDY(WORD),/* RECOVERY STACK 0039
*                                      VECTOR TABLE MDC065           */
*      2 PSACSTK PTR(31),           /* ADDRESS OF CURRENTLY USED   0039
*                                      FUNCTIONAL RECOVERY ROUTINE 0039
*                                      (FRR) STACK MDC061            */
*      2 PSANSTK PTR(31),           /* ADDRESS OF NORMAL FRR STACK 0039
*                                      MDC062                        */
*      2 PSASSTK PTR(31),           /* ADDRESS OF SVC-I/O- DISPATCHER
*                                      FRR STACK MDC063              */
*      2 PSASSAV PTR(31),           /* ADDRESS OF INTERRUPTED STACK
*                                      SAVED BY SVC-I/O- DISPATCHER
*                                      MDC066                        */
*      2 PSAMSTK PTR(31),           /* ADDRESS OF MCH FRR STACK    0039
*                                      MDC067                        */
*      2 PSAMSAV PTR(31),           /* ADDRESS OF INTERRUPTED STACK
*                                      SAVED BY MCH MDC068           */
*      2 PSAPSTK PTR(31),           /* ADDRESS OF PROGRAM CHECK FLIH
*                                      FRR STACK MDC069              */
*      2 PSAPSAV PTR(31),           /* ADDRESS OF INTERRUPTED STACK
*                                      SAVED BY PROGRAM CHECK FLIH 0039
*                                      MDC070                        */
*      2 PSAESTK1 PTR(31),          /* ADDRESS OF EXTERNAL FLIH FRR
*                                      STACK FOR NON- RECURSIVE    0039
*                                      ENTRIES MDC071                */
*      2 PSAESAV1 PTR(31),          /* ADDRESS OF INTERRUPTED STACK
*                                      SAVED BY NON- RECURSIVE     0039
*                                      ENTRIES MDC072                */
*      2 PSAESTK2 PTR(31),          /* ADDRESS OF EXTERNAL FLIH FRR
*                                      STACK FOR FIRST LEVEL       0039
*                                      RECURSIONS MDC073             */
*      2 PSAESAV2 PTR(31),          /* ADDRESS OF INTERRUPTED STACK
*                                      SAVED BY EXTERNAL FLIH FOR  0039
*                                      FIRST LEVEL RECURSIONS MDC074 */
*      2 PSAESTK3 PTR(31),          /* ADDRESS OF EXTERNAL FLIH FRR
*                                      STACK FOR SECOND LEVEL      0039
*                                      RECURSIONS AND ACR MDC075     */
*      2 PSAESAV3 PTR(31),          /* ADDRESS OF INTERRUPTED STACK
*                                      SAVED BY EXTERNAL FLIH (ACR)
*                                      FOR SECOND LEVEL RECURSIONS 0039
*                                      MDC076                        */
*      2 PSARSTK PTR(31),           /* ADDRESS OF RESTART FLIH FRR 0039
*                                      STACK MDC077                  */
*      2 PSARSAV PTR(31);           /* ADDRESS OF INTERRUPTED STACK
*                                      SAVED BY RESTART FLIH MDC078
*                                                                    */
*                                                                  0040
*/* **************************************************************** */
*/*                                                                  */
*/*            PHYSICAL CONFIGURATION COMMUNICATION AREA             */
*/*                                                                  */
*/*  OS/VS2 RELEASE 2, 12/22/72, LEVEL=5                             */
*/*                                                                  */
*/*  METHOD OF ACCESS                                                */
*/*      BAL  - DSECT IS PRODUCED UNLESS DSECT=NO IS SPECIFIED.      */
*/*             USING ON PCCA GIVES ADDRESSABILITY FOR ALL SYMBOLS.  */
*/*      PL/S - DCL PCCAPTR PTR                                      */
*/*                                                                  */
*/* **************************************************************** */
*                                                                  0040
*   DECLARE                                                        0040
*     1 PCCA BASED(PCCAPTR) BDY(DWORD),                            0040
*      2 PCCAPCCA CHAR(4) BDY(WORD),/* CONTROL BLOCK ACRONYM IN    0040
*                                      EBCDIC                        */
*      2 PCCACPID CHAR(12) BDY(WORD),/* CPU ID (CONTAINS SERIAL    0040
*                                      NUMBER)                       */
*      2 PCCACPUA PTR(15),          /* PHYSICAL CPU ADDRESS          */
*      2 PCCACAFM BIT(16) BDY(WORD,3),/* BIT MASK CORRESPONDING TO 0040
*                                      PHYSICAL CPU ADDRESS          */
*      2 PCCATQEP PTR(31),          /* TQE POINTER                   */
*      2 PCCAPSAV PTR(31),          /* VIRTUAL ADDRESS OF PSA        */
*      2 PCCAPSAR PTR(31),          /* REAL ADDRESS OF PSA           */
*      2 PCCARV81 PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV82 PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV83 PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV84 PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV85 PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV86 PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV87 PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV88 PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV89 PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV90 PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV91 PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV92 PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV93 PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV94 PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV95 PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV96 PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV97 PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV98 PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV99 PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV9A PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV9B PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV9C PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV9D PTR(31),          /* RESERVED MDC005               */
*      2 PCCARV9E PTR(31),          /* RESERVED MDC005               */
*      2 PCCATMST CHAR(4) BDY(WORD),/* TIMER STATUS BYTES            */
*       3 PCCATMFL BIT(8),          /* FIRST BYTE OF PCCATMST        */
*        4 PCCAINIT BIT(1),         /* ENTRY HAS BEEN INITIALIZED    */
*        4 PCCASYNC BIT(1),         /* CLOCK OUT OF SYNCHRONIZATION  */
*        4 PCCAVKIL BIT(1),         /* VARY CPU SHOULD BE CANCELLED  */
*        4 PCCAMCC BIT(1),          /* PROCESSING FOR PERMANENTLY  0040
*                                      DAMAGED CLOCK COMPARATOR MUST
*                                      BE DONE                       */
*        4 PCCAMINT BIT(1),         /* PROCESSING FOR CPU TIMER MUST
*                                      BE DONE                       */
*        4 PCCARV02 BIT(1),         /* RESERVED                      */
*        4 PCCARV03 BIT(1),         /* RESERVED                      */
*        4 PCCARV04 BIT(1),         /* RESERVED                      */
*       3 PCCATODE PTR(8),          /* TOD CLOCK ERROR FLAGS         */
*        4 PCCANUTD BIT(1),         /* CLOCK CANNOT BE USED          */
*        4 PCCANFTD BIT(1),         /* CLOCK SHOULD NOT BE RESET     */
*        4 PCCACTTD BIT(6),         /* ERROR COUNT                   */
*       3 PCCACCE PTR(8),           /* FLAGS FOR CLOCK COMPARATOR    */
*        4 PCCANUCC BIT(1),         /* CLOCK COMPARATOR CANNOT BE  0040
*                                      USED                          */
*        4 PCCANFCC BIT(1),         /* CLOCK COMPARATOR SHOULD NOT BE
*                                      RESET                         */
*        4 PCCACTCC BIT(6),         /* ERROR COUNT                   */
*       3 PCCAINTE PTR(8),          /* FLAGS FOR CPU TIMER           */
*        4 PCCANUIN BIT(1),         /* CPU TIMER CANNOT BE USED      */
*        4 PCCANFIN BIT(1),         /* CPU TIMER SHOULD NOT BE RESET */
*        4 PCCACTIN BIT(6),         /* ERROR COUNT                   */
*      2 PCCARPB FIXED(31),         /* EXTERNAL CALL SIGP BUFFER     */
*      2 PCCAEMSB CHAR(16) BDY(DWORD),/* EMERGENCY SIGNAL SIGP BUFFER*/
*       3 PCCAEMSI CHAR(4) BDY(WORD),/* FIRST WORD OF EMS BUFFER     */
*        4 PCCARISP BIT(8),         /* CONTAINS PARALLEL/SERIAL    0040
*                                      REQUEST INDICATOR FOR REMOTE
*                                      IMMEDIATE SIGNAL              */
*         5 PCCAPARL BIT(1),        /* PARALLEL REQUEST MDC002       */
*         5 PCCASERL BIT(1),        /* SERIAL REQUEST MDC003         */
*         5 PCCARV06 BIT(1),        /* RESERVED                      */
*         5 PCCARV07 BIT(1),        /* RESERVED                      */
*         5 PCCARV08 BIT(1),        /* RESERVED                      */
*         5 PCCARV09 BIT(1),        /* RESERVED                      */
*         5 PCCARV10 BIT(1),        /* RESERVED                      */
*         5 PCCARV11 BIT(1),        /* RESERVED                      */
*        4 PCCAEMS2 BIT(8),         /* SECOND BYTE OF PCCAEMSI       */
*         5 PCCARV12 BIT(1),        /* RESERVED                      */
*         5 PCCARV13 BIT(1),        /* RESERVED                      */
*         5 PCCARV14 BIT(1),        /* RESERVED                      */
*         5 PCCARV15 BIT(1),        /* RESERVED                      */
*         5 PCCARV16 BIT(1),        /* RESERVED                      */
*         5 PCCARV17 BIT(1),        /* RESERVED                      */
*         5 PCCARV18 BIT(1),        /* RESERVED                      */
*         5 PCCARV19 BIT(1),        /* RESERVED                      */
*        4 PCCAEMS3 BIT(8),         /* THIRD BYTE OF PCCAEMSI        */
*         5 PCCARV20 BIT(1),        /* RESERVED                      */
*         5 PCCARV21 BIT(1),        /* RESERVED                      */
*         5 PCCARV22 BIT(1),        /* RESERVED                      */
*         5 PCCARV23 BIT(1),        /* RESERVED                      */
*         5 PCCARV24 BIT(1),        /* RESERVED                      */
*         5 PCCARV25 BIT(1),        /* RESERVED                      */
*         5 PCCARV26 BIT(1),        /* RESERVED                      */
*         5 PCCARV27 BIT(1),        /* RESERVED                      */
*        4 PCCARMSB BIT(8),         /* CONTAINS RMS INDICATOR        */
*         5 PCCARV28 BIT(1),        /* RESERVED                      */
*         5 PCCARV29 BIT(1),        /* RESERVED                      */
*         5 PCCARV30 BIT(1),        /* RESERVED                      */
*         5 PCCARV31 BIT(1),        /* RESERVED                      */
*         5 PCCARV32 BIT(1),        /* RESERVED                      */
*         5 PCCARV33 BIT(1),        /* RESERVED                      */
*         5 PCCARV34 BIT(1),        /* RESERVED                      */
*         5 PCCARMS BIT(1),         /* SIGP WAS ISSUED VIA RMS       */
*       3 PCCAEMSP PTR(31),         /* REMOTE IMMEDIATE SIGNAL     0040
*                                      PARAMETER ADDRESS             */
*       3 PCCAEMSE PTR(31),         /* REMOTE IMMEDIATE SIGNAL     0040
*                                      RECEIVING ROUTINE ENTRY POINT
*                                      ADDRESS                       */
*       3 PCCAEMSA PTR(31),         /* PCCA ADDRESS OF THE RECEIVING
*                                      ROUTINE                       */
*      2 PCCAPWAV PTR(31),          /* VIRTUAL ADDRESS OF MCH      0040
*                                      PROCESSOR WORK AREA           */
*      2 PCCAPWAR PTR(31),          /* REAL ADDRESS OF MCH PROCESSOR
*                                      WORK AREA                     */
*      2 PCCALRBV PTR(31),          /* VIRTUAL ADDRESS OF MCH LOGREC
*                                      BUFFER                        */
*      2 PCCALRBR PTR(31),          /* REAL ADDRESS OF MCH LOGREC  0040
*                                      BUFFER                        */
*      2 PCCACHEL CHAR(112) BDY(DWORD),/* CHANNEL LOGOUT AREA FOR  0040
*                                      2880 OR M/145                 */
*      2 PCCAWERP CHAR(8) BDY(DWORD),/* WORK ERPIB FOR CCH           */
*       3 PCCACHUB PTR(31),         /* UCB ADDRESS OF THE DEVICE IN
*                                      USE WHEN THE CHANNEL- DETECTED
*                                      ERROR OCCURRED. THIS FIELD IS
*                                      ZERO IF CCH HAS NOT CREATED AN
*                                      ERPIB FOR THE ERP'S.          */
*       3 PCCACHPF BIT(8),          /* PROGRAM FLAGS. INDICATES THE
*                                      SELECTION OR INTERRUPTION   0040
*                                      SEQUENCE WHEN THE CSW WAS   0040
*                                      STORED.                       */
*        4 PCCACSIO BIT(1),         /* THE CSW WAS STORED AFTER A  0040
*                                      START I/O INSTRUCTION WAS   0040
*                                      EXECUTED                      */
*        4 PCCACINT BIT(1),         /* THE CSW WAS STORED AFTER AN 0040
*                                      I/O INTERRUPTION              */
*        4 PCCACTIO BIT(1),         /* THE CSW WAS STORED AFTER A  0040
*                                      TEST I/O INSTRUCTION WAS    0040
*                                      EXECUTED                      */
*        4 PCCACHIO BIT(1),         /* THE CSW WAS STORED AFTER A  0040
*                                      HALT I/O INSTRUCTION WAS    0040
*                                      EXECUTED                      */
*        4 PCCARV37 BIT(1),         /* RESERVED                      */
*        4 PCCACSNS BIT(1),         /* THE SENSE DATA WAS      STORED*/
*        4 PCCACCNT BIT(1),         /* THE CSW COUNT IS VALID        */
*        4 PCCACNOR BIT(1),         /* NO RETRY IS TO BE ATTEMPTED 0040
*                                      UNDER ANY CONDITIONS          */
*       3 PCCACHBL BIT(8),          /* PROBABLE SOURCE OF ERROR      */
*        4 PCCACCPU BIT(1),         /* CPU ERROR                     */
*        4 PCCACCHA BIT(1),         /* CHANNEL ERROR                 */
*        4 PCCACSCU BIT(1),         /* STORAGE CONTROL UNIT ERROR    */
*        4 PCCACSTG BIT(1),         /* STORAGE ERROR                 */
*        4 PCCACCUE BIT(1),         /* CONTROL UNIT ERROR            */
*        4 PCCARV38 BIT(1),         /* RESERVED                      */
*        4 PCCARV39 BIT(1),         /* RESERVED                      */
*        4 PCCARV40 BIT(1),         /* RESERVED                      */
*       3 PCCACHVA BIT(8),          /* VALIDITY INDICATORS. WHEN THE
*                                      DESIGNATED FIELD IS STORED BY
*                                      THE CHANNEL WITH THE CORRECT
*                                      CONTENTS THE VALIDITY BIT IS
*                                      ONE. THE VALIDITY BIT FOR   0040
*                                      NON-STORED FIELDS IS        0040
*                                      MEANINGLESS.                  */
*        4 PCCACITF BIT(1),         /* INTERFACE ADDRESS IS VALID    */
*        4 PCCARV41 BIT(1),         /* RESERVED                      */
*        4 PCCARV42 BIT(1),         /* RESERVED                      */
*        4 PCCACSQV BIT(1),         /* SEQUENCE CODE IS VALID        */
*        4 PCCACUNS BIT(1),         /* UNIT STATUS IS VALID          */
*        4 PCCACCMD BIT(1),         /* COMMAND ADDRESS IS VALID. THE
*                                      CSW CONTAINS A VALID COMMAND
*                                      ADDRESS.                      */
*        4 PCCACCHV BIT(1),         /* CHANNEL ADDRESS IS VALID      */
*        4 PCCACDAV BIT(1),         /* DEVICE ADDRESS IS VALID       */
*       3 PCCACHTS BIT(8),          /* TERMINATION AND SEQUENCE    0040
*                                      (RETRY) CODES                 */
*        4 PCCACTEC BIT(2),         /* TERMINATION CODE. THIS CODE 0040
*                                      SPECIFIES THE TERMINATION   0040
*                                      SIGNALS USED ON THE I/O     0040
*                                      INTERFACE AFTER THE CHANNEL 0040
*                                      DETECTED THE ERROR. THIS FIELD
*                                      HAS MEANING ONLY WHEN ICC OR
*                                      CCC IS INDICATED IN THE CSW.  */
*        4 PCCARV43 BIT(1),         /* RESERVED                      */
*        4 PCCARV44 BIT(1),         /* RESERVED                      */
*        4 PCCACDIN BIT(1),         /* I/O ERROR ALERT               */
*        4 PCCACSEQ BIT(3),         /* SEQUENCE CODE. THESE CODES  0040
*                                      HAVE CHANNEL- DEPENDENT     0040
*                                      MEANINGS.                     */
*      2 PCCACHS1 BIT(8),           /* CCH INTERNAL SWITCH 1         */
*       3 PCCACCMP BIT(1),          /* COMMAND REGISTER PARITY IS  0040
*                                      VALID                         */
*       3 PCCACNRE BIT(1),          /* CCH WILL NOT CREATE A RECORD
*                                      FOR THIS ERROR MDC006         */
*       3 PCCACFRR BIT(1),          /* THE CCH FRR IS IN THE STACK 0040
*                                      MDC007                        */
*       3 PCCACNLS BIT(1),          /* CCH IS TO PERFORM THE RECORD
*                                      FUNCTION ONLY. AN ERPIB IS NOT
*                                      TO BE PLACED IN THE EWA.      */
*       3 PCCACAND BIT(1),          /* ATTENTION HAS BEEN PRESENTED  */
*       3 PCCACIBC BIT(1),          /* AN ERPIB FOR THIS ERROR HAS 0040
*                                      ALREADY BEEN CREATED          */
*       3 PCCACUCB BIT(1),          /* UCB INVALID BIT               */
*       3 PCCARV47 BIT(1),          /* RESERVED                      */
*      2 PCCACHS2 BIT(8),           /* CCH INTERNAL SWITCH 2         */
*       3 PCCACIOR BIT(1),          /* I/O RESTART FUNCTION REQUIRED */
*       3 PCCACALT BIT(1),          /* THE ALTERNATE RETURN TO IOS IS
*                                      TO BE USED                    */
*       3 PCCACMOD BIT(1),          /* NO MODULE IS AVAILABLE TO   0040
*                                      ANALYZE THE CHANNEL LOGOUT    */
*       3 PCCACNLG BIT(1),          /* CCH DETECTED A FAILURE TO LOG
*                                      OR FAILURE TO STORE AN ECSW 0040
*                                      CONDITION                     */
*       3 PCCACURC BIT(1),          /* THE STIDC FIELD OF THE CAT  0040
*                                      ENTRY IS VALID BUT NOT THAT OF
*                                      A SUPPORTED CHANNEL MDC011    */
*       3 PCCARV49 BIT(1),          /* RESERVED                      */
*       3 PCCARV50 BIT(1),          /* RESERVED                      */
*       3 PCCARV51 BIT(1),          /* RESERVED                      */
*      2 PCCACHRB BIT(8),           /* CCH RECORD BYTE               */
*       3 PCCACSIB BIT(1),          /* ERROR ON SIO                  */
*       3 PCCACINB BIT(1),          /* ERROR ON INTERRUPT            */
*       3 PCCACTIB BIT(1),          /* ERROR ON TIO                  */
*       3 PCCACHIB BIT(1),          /* ERROR ON HIO                  */
*       3 PCCARV52 BIT(1),          /* RESERVED                      */
*       3 PCCACSNB BIT(1),          /* SENSE DATA STORED             */
*       3 PCCACCVB BIT(1),          /* COUNT VALID                   */
*       3 PCCACNRB BIT(1),          /* NO RETRY                      */
*      2 PCCAIOSI CHAR(1),          /* IOS INTERCEPT BYTE            */
*      2 PCCACHW1 FIXED(31),        /* CCH WORK AREA 1               */
*      2 PCCACHW2 FIXED(31),        /* CCH WORK AREA 2               */
*      2 PCCARV80 FIXED(15),        /* RESERVED MDC004               */
*      2 PCCALOGL PTR(8),           /* LENGTH OF CHANNEL LOGOUT      */
*      2 PCCALGP1 CHAR(1),          /* LOGOUT PARITY AREA 1          */
*      2 PCCALGP2 CHAR(1),          /* LOGOUT PARITY AREA 2          */
*      2 PCCACHPB PTR(8),           /* LOGOUT PARITY BYTE COUNT      */
*      2 PCCARV05 CHAR(2),          /* RESERVED FOR CCH              */
*      2 PCCACHF1 BIT(8),           /* CCH FOOTPRINT BYTE 1          */
*       3 PCCACF11 BIT(1),          /* IOS GPR'S SAVED               */
*       3 PCCACF12 BIT(1),          /* UCB ADDRESS IS ZERO           */
*       3 PCCACF13 BIT(1),          /* ERPIB EXISTS                  */
*       3 PCCACF14 BIT(1),          /* IGFCCHSI ENTERED              */
*       3 PCCACF15 BIT(1),          /* IGFCCHII ENTERED              */
*       3 PCCACF16 BIT(1),          /* IGFCCHFE ENTERED              */
*       3 PCCACF17 BIT(1),          /* IGFC60 ENTERED                */
*       3 PCCACF18 BIT(1),          /* IGFC70 ENTERED                */
*      2 PCCACHF2 BIT(8),           /* CCH FOOTPRINT BYTE 2          */
*       3 PCCACF21 BIT(1),          /* IGFC80 ENTERED                */
*       3 PCCACF22 BIT(1),          /* IGFCIC ENTERED                */
*       3 PCCACF23 BIT(1),          /* IGFCCHRD ENTERED MDC008       */
*       3 PCCACF24 BIT(1),          /* IGFCCHMP ENTERED              */
*       3 PCCACF25 BIT(1),          /* IGFCCHUC ENTERED              */
*       3 PCCACF26 BIT(1),          /* IGFCCHAS ENTERED MDC009       */
*       3 PCCACF27 BIT(1),          /* IGFCCHIO ENTERED              */
*       3 PCCACF28 BIT(1),          /* EXIT CCH                      */
*      2 PCCACHF3 BIT(8),           /* CCH FOOTPRINT BYTE 3          */
*       3 PCCARV64 BIT(1),          /* RESERVED                      */
*       3 PCCARV65 BIT(1),          /* RESERVED                      */
*       3 PCCARV66 BIT(1),          /* RESERVED                      */
*       3 PCCARV67 BIT(1),          /* RESERVED                      */
*       3 PCCARV68 BIT(1),          /* RESERVED                      */
*       3 PCCARV69 BIT(1),          /* RESERVED                      */
*       3 PCCARV70 BIT(1),          /* RESERVED                      */
*       3 PCCARV71 BIT(1),          /* RESERVED                      */
*      2 PCCACHF4 BIT(8),           /* CCH FOOTPRINT BYTE 4          */
*       3 PCCARV72 BIT(1),          /* RESERVED                      */
*       3 PCCARV73 BIT(1),          /* RESERVED                      */
*       3 PCCARV74 BIT(1),          /* RESERVED                      */
*       3 PCCARV75 BIT(1),          /* RESERVED                      */
*       3 PCCARV76 BIT(1),          /* RESERVED                      */
*       3 PCCARV77 BIT(1),          /* RESERVED                      */
*       3 PCCARV78 BIT(1),          /* RESERVED                      */
*       3 PCCARV79 BIT(1),          /* RESERVED                      */
*      2 PCCACHSV(3) FIXED(31),     /* CCH INTERNAL SAVE AREA. FIRST
*                                      WORD CONTAINS THE ADDRESS OF
*                                      THE CURRENT CCH RECORD BUFFER
*                                      MDC010                        */
*      2 PCCACHID CHAR(8) BDY(WORD),/* STORE CHANNEL ID WORK AREA    */
*      2 PCCALOGA PTR(31),          /* ADDRESS OF CHANNEL LOGOUT   0040
*                                      MDC004                        */
*      2 PCCARV54 PTR(31),          /* RESERVED                      */
*      2 PCCARV55 PTR(31),          /* RESERVED                      */
*      2 PCCARV56 PTR(31),          /* RESERVED                      */
*      2 PCCARV57 PTR(31),          /* RESERVED                      */
*      2 PCCARV58 PTR(31),          /* RESERVED                      */
*      2 PCCARV59 PTR(31),          /* RESERVED                      */
*      2 PCCARV60 PTR(31),          /* RESERVED                      */
*      2 PCCARV61 PTR(31),          /* RESERVED                      */
*      2 PCCARV62 PTR(31),          /* RESERVED                      */
*      2 PCCARV63 PTR(31),          /* RESERVED                      */
*      2 PCCACPUM CHAR(1),          /* INDICATOR THAT DEAD CPU HAD A
*                                      MALFUNCTION                   */
*      2 PCCARV01 CHAR(1),          /* RESERVED                      */
*      2 PCCARV35 FIXED(15),        /* RESERVED                      */
*      2 PCCARV36 FIXED(31),        /* RESERVED                      */
*      2 PCCACAT CHAR(128) BDY(DWORD),/* CHANNEL AVAILABILITY TABLE
*                                      (16 CHANNELS, 8 BYTES PER   0040
*                                      CHANNEL) MDC005               */
*      2 * CHAR(72) BDY(DWORD);     /* RESERVED                      */
*                                                                  0040
*   /*****************************************************************/
*   /*                                                               */
*   /* LABELS                                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0041
*   DCL                                                            0041
*     IGFPTERM ENTRY EXTERNAL;      /* SYSTEM TERMINATION FACILITY   */
*                                                                  0041
*   /*****************************************************************/
*   /*                                                               */
*   /* VARIABLES                                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0042
*   DCL                                                            0042
*     1 STPARM,                     /* PARAMS. FOR SYSTEM TERM. FAC. */
*       3 STMSGP PTR(31),           /* REAL ADDR OF MESSAGE          */
*       3 STLRBP PTR(31);           /* REAL ADDR OF LRB              */
*   DECLARE                         /* WTO PARAMETER LIST            */
*     1 MGTXT STATIC LOCAL BDY(WORD),                              0043
*      2 MGTXT01 FIXED(15) INIT(52),/* TEXT LENGTH                   */
*      2 MGTXT02 BIT(16) INIT('1000000000000000'B),/* MCS FLAG       */
*      2 MGTXT03 CHAR(48) INIT(                                    0043
*            'IEE770W ATTEMPTED EXECUTION OF DELETED MP MODULE'),/*
*                                      MESSAGE TEXT                  */
*      2 MGTXT04 BIT(16) INIT('1000000000000000'B),/* DESCRIPTOR   0043
*                                      CODES                         */
*      2 MGTXT05 BIT(16) INIT('1000000000000000'B);/* ROUTING CODES
*                                                            @YM02690*/
*   DCL                                                            0044
*     1 TERMPSW BDY(DWORD) STATIC LOCAL,/* PSW TO ENTER SYSTERM      */
*       3 * CHAR(1) INIT('00'X),    /* DAT OFF - INTRPTS MASKED OFF  */
*       3 * CHAR(1) INIT('0C'X),    /* MC ENABLED / EC MODE          */
*       3 * CHAR(1) INIT('00'X),    /* CC, PROG MASK                 */
*       3 * CHAR(1) INIT('00'X),    /* RESERVED                      */
*       3 * PTR(31) INIT(ADDR(IGFPTERM));/* SYSTERM ENTRY            */
*   DCL                                                            0045
*     LRBPTR PTR(31) REG(4) RSTD;                                  0045
*   DCL                                                            0046
*     REG1 PTR(31) REG(1) RSTD;                                    0046
*   DCL                                                            0047
*     PCCAPTR PTR(31) BASED;                                       0047
*   LRBPTR=PSAPCCAV->PCCALRBV;      /* GET ADDR OF LRB               */
         L     @15,PSAPCCAV                                        0048
         L     LRBPTR,PCCALRBV(,@15)                               0048
*   LRBMWSC='0000001A'X;            /* SET WAIT STATE CODE IN LRB    */
         MVC   LRBMWSC(4,LRBPTR),@CB00839                          0049
*   LRBHTYPE='81'X;                 /* INDICATE SYSTEM TERMINATION 0050
*                                      RECORD TYPE           @YM04283*/
         MVI   LRBHTYPE(LRBPTR),X'81'                              0050
*   GEN REFS(LRBPTR)(LRA LRBPTR,0(LRBPTR));/* REAL ADDR OF LRB       */
         LRA LRBPTR,0(LRBPTR)
*   STLRBP=LRBPTR;                  /* LRB REAL ADDR TO PARM LIST    */
         ST    LRBPTR,STLRBP                                       0052
*   REG1=ADDR(MGTXT);               /* VIRT. ADDR OF MSG             */
         LA    REG1,MGTXT                                          0053
*   GEN REFS(REG1)(LRA REG1,0(REG1));/* REAL ADDR OF MSG             */
         LRA REG1,0(REG1)
*   STMSGP=REG1;                    /* MSG REAL ADDR TO PARM LIST    */
         ST    REG1,STMSGP                                         0055
*   REG1=ADDR(STPARM);              /* VIRT ADDR OF PARMS            */
         LA    REG1,STPARM                                         0056
*   GEN REFS(REG1)(LRA REG1,0(REG1));/* REAL ADDR OF PARMS           */
         LRA REG1,0(REG1)
*   LPSW(TERMPSW);                  /* GO TO SYSTEM TERMINATION      */
         LPSW  TERMPSW                                             0058
*   END                                                            0059
*                                                                  0059
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (UMYSPEC )                                       */
*/*%INCLUDE SYSLIB  (UMYDCL  )                                       */
*/*%INCLUDE SYSLIB  (IHALRB  )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHAPCCA )                                       */
*                                                                  0059
*       ;                                                          0059
@EL00001 DS    0H                                                  0059
@EF00001 DS    0H                                                  0059
@ER00001 BR    @14                                                 0059
@DATA    DS    0H
         DS    0F
         DS    0F
@CV00811 DC    V(IGFPTERM)
         DS    0D
@CB00839 DC    X'0000001A'
STPARM   DS    CL8
         ORG   STPARM
STMSGP   DS    AL4
STLRBP   DS    AL4
         ORG   STPARM+8
MGTXT    DS    CL56
         ORG   MGTXT
MGTXT01  DC    H'52'
MGTXT02  DC    B'1000000000000000'
MGTXT03  DC    CL48'IEE770W ATTEMPTED EXECUTION OF DELETED MP MODULE'
MGTXT04  DC    B'1000000000000000'
MGTXT05  DC    B'1000000000000000'
         ORG   MGTXT+56
         DS    CL4
TERMPSW  DS    CL8
         ORG   TERMPSW
@NM00057 DC    X'00'
@NM00058 DC    X'0C'
@NM00059 DC    X'00'
@NM00060 DC    X'00'
@NM00061 DC    VL4(IGFPTERM)
         ORG   TERMPSW+8
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
LRBPTR   EQU   @04
REG1     EQU   @01
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSAPCCAV EQU   PSA+520
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
LRB      EQU   0
LRBHTYPE EQU   LRB
LRBHREL  EQU   LRB+1
LRBHSYS  EQU   LRBHREL
LRBHSW0  EQU   LRB+2
LRBHSW1  EQU   LRB+3
LRBHSW2  EQU   LRB+4
LRBMACT  EQU   LRBHSW2
LRBHSW3  EQU   LRB+5
LRBHCPID EQU   LRB+16
LRBBASE  EQU   LRB+24
LRBCVAR  EQU   0
LRBCMP   EQU   LRBCVAR+8
PCCA     EQU   0
PCCATMST EQU   PCCA+128
PCCATMFL EQU   PCCATMST
PCCATODE EQU   PCCATMST+1
PCCACCE  EQU   PCCATMST+2
PCCAINTE EQU   PCCATMST+3
PCCAEMSB EQU   PCCA+136
PCCAEMSI EQU   PCCAEMSB
PCCARISP EQU   PCCAEMSI
PCCAEMS2 EQU   PCCAEMSI+1
PCCAEMS3 EQU   PCCAEMSI+2
PCCARMSB EQU   PCCAEMSI+3
PCCALRBV EQU   PCCA+160
PCCAWERP EQU   PCCA+280
PCCACHPF EQU   PCCAWERP+4
PCCACHBL EQU   PCCAWERP+5
PCCACHVA EQU   PCCAWERP+6
PCCACHTS EQU   PCCAWERP+7
PCCACHS1 EQU   PCCA+288
PCCACHS2 EQU   PCCA+289
PCCACHRB EQU   PCCA+290
PCCACHF1 EQU   PCCA+308
PCCACHF2 EQU   PCCA+309
PCCACHF3 EQU   PCCA+310
PCCACHF4 EQU   PCCA+311
PCCAPTR  EQU   0
LRBHRSW1 EQU   LRBHSW1
LRBHCSW1 EQU   LRBHSW1
LRBHMSW1 EQU   LRBHSW1
LRBMMCH  EQU   LRBBASE
LRBMWSC  EQU   LRBMMCH+4
LRBMCEIA EQU   LRBMMCH+8
LRBMTERM EQU   LRBMCEIA
LRBMHARD EQU   LRBMCEIA+1
LRBMINTM EQU   LRBMCEIA+2
LRBMSOFT EQU   LRBMCEIA+3
LRBMPDAR EQU   LRBMMCH+12
LRBMRSR1 EQU   LRBMMCH+13
LRBMRSR2 EQU   LRBMMCH+14
LRBMFLO  EQU   LRBMMCH+24
LRBMCIC  EQU   LRBMFLO
@NM00018 EQU   LRBMCIC
@NM00020 EQU   LRBMCIC+1
@NM00022 EQU   LRBMCIC+2
@NM00024 EQU   LRBMCIC+3
@NM00027 EQU   LRBMCIC+5
LRBRDDR  EQU   LRBBASE
LRBCCCH  EQU   LRBBASE
LRBCCUA  EQU   LRBCCCH+49
LRBDMDR  EQU   LRBBASE
LRBNMIH  EQU   LRBBASE
LRBTTER  EQU   LRBBASE
PSARSVTE EQU   PSARSVT
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
LRBTUSR  EQU   LRBTTER+8
LRBTWSC  EQU   LRBTTER+4
LRBTLNH  EQU   LRBTTER
LRBNINT  EQU   LRBNMIH+24
LRBNDEVT EQU   LRBNMIH+20
LRBNVOL  EQU   LRBNMIH+14
LRBNCUA1 EQU   LRBNMIH+11
LRBNCUA2 EQU   LRBNMIH+8
LRBNJOB  EQU   LRBNMIH
LRBDSENS EQU   LRBDMDR+8
LRBDVOL  EQU   LRBDMDR+2
LRBDCUA1 EQU   LRBDMDR
LRBCCLOG EQU   LRBCCCH+56
LRBCLOGL EQU   LRBCCCH+54
LRBCHCUA EQU   LRBCCCH+52
LRBCCUA2 EQU   LRBCCUA+1
@NM00031 EQU   LRBCCUA
LRBCCHID EQU   LRBCCCH+48
LRBCDEVT EQU   LRBCCCH+44
LRBCECSW EQU   LRBCCCH+40
LRBCFCSW EQU   LRBCCCH+32
LRBCFCCW EQU   LRBCCCH+24
LRBCAIO  EQU   LRBCCCH+8
LRBCJOB  EQU   LRBCCCH
LRBRDEV2 EQU   LRBRDDR+32
LRBRCUA2 EQU   LRBRDDR+29
LRBRPH2  EQU   LRBRDDR+28
LRBRDEV1 EQU   LRBRDDR+24
LRBRCUA1 EQU   LRBRDDR+21
LRBRPH1  EQU   LRBRDDR+20
LRBRVOL2 EQU   LRBRDDR+14
LRBRVOL1 EQU   LRBRDDR+8
LRBRJOB  EQU   LRBRDDR
LRBMCEL  EQU   LRBMMCH+304
@NM00030 EQU   LRBMFLO+20
LRBMFSA  EQU   LRBMFLO+16
@NM00029 EQU   LRBMFLO+8
LRBMCELL EQU   LRBMCIC+6
LRBMVCC  EQU   @NM00027
LRBMVPT  EQU   @NM00027
@NM00028 EQU   @NM00027
@NM00026 EQU   LRBMCIC+4
LRBMVST  EQU   @NM00024
LRBMVLG  EQU   @NM00024
LRBMVCR  EQU   @NM00024
LRBMVGR  EQU   @NM00024
LRBMVFP  EQU   @NM00024
@NM00025 EQU   @NM00024
LRBMVRC  EQU   @NM00024
LRBMVFA  EQU   @NM00024
LRBMVIA  EQU   @NM00022
LRBMVPM  EQU   @NM00022
LRBMVMS  EQU   @NM00022
LRBMVWP  EQU   @NM00022
@NM00023 EQU   @NM00022
LRBMFKE  EQU   @NM00022
LRBMFSC  EQU   @NM00022
LRBMFSE  EQU   @NM00022
LRBMIDY  EQU   @NM00020
LRBMIBU  EQU   @NM00020
@NM00021 EQU   @NM00020
LRBMFWN  EQU   @NM00020
LRBMFDG  EQU   @NM00018
@NM00019 EQU   @NM00018
LRBMFED  EQU   @NM00018
LRBMFCD  EQU   @NM00018
LRBMFTD  EQU   @NM00018
LRBMFSR  EQU   @NM00018
LRBMFPD  EQU   @NM00018
LRBMFSD  EQU   @NM00018
LRBMMOSW EQU   LRBMMCH+16
LRBMPWL  EQU   LRBMMCH+15
LRBMVEQR EQU   LRBMRSR2
LRBMPGFX EQU   LRBMRSR2
LRBMLSQA EQU   LRBMRSR2
LRBMFSQA EQU   LRBMRSR2
LRBMNUCL EQU   LRBMRSR2
LRBMSPER EQU   LRBMRSR2
LRBMINTC EQU   LRBMRSR2
LRBMOFLN EQU   LRBMRSR2
LRBMCHNG EQU   LRBMRSR1
LRBMSER  EQU   LRBMRSR1
@NM00017 EQU   LRBMRSR1
@NM00016 EQU   LRBMPDAR
LRBMRSRF EQU   LRBMPDAR
LRBMRSRC EQU   LRBMPDAR
LRBMINVP EQU   LRBMPDAR
@NM00015 EQU   LRBMPDAR
LRBMSBUF EQU   LRBMSOFT
LRBMSHIR EQU   LRBMSOFT
LRBMSECC EQU   LRBMSOFT
LRBMSEXD EQU   LRBMSOFT
@NM00014 EQU   LRBMSOFT
LRBMSSFT EQU   LRBMSOFT
LRBMIL80 EQU   LRBMINTM
LRBMICTM EQU   LRBMINTM
LRBMICKC EQU   LRBMINTM
LRBMITOD EQU   LRBMINTM
@NM00013 EQU   LRBMINTM
LRBMHIPD EQU   LRBMHARD
LRBMHSPF EQU   LRBMHARD
LRBMHSTO EQU   LRBMHARD
LRBMHINV EQU   LRBMHARD
@NM00012 EQU   LRBMHARD
LRBMHHRD EQU   LRBMHARD
LRBMTINV EQU   LRBMTERM
LRBMTDMG EQU   LRBMTERM
LRBMTWRN EQU   LRBMTERM
LRBMTCKS EQU   LRBMTERM
LRBMTSEC EQU   LRBMTERM
@NM00011 EQU   LRBMTERM
LRBMLNH  EQU   LRBMMCH
@NM00010 EQU   LRBHMSW1
LRBMSYST EQU   LRBHMSW1
@NM00009 EQU   LRBHMSW1
@NM00008 EQU   LRBHCSW1
LRBCERPP EQU   LRBHCSW1
LRBCDATA EQU   LRBHCSW1
LRBCICUA EQU   LRBHCSW1
LRBCNOSP EQU   LRBHCSW1
@NM00007 EQU   LRBHCSW1
LRBCINCO EQU   LRBHCSW1
LRBCMESG EQU   LRBHCSW1
@NM00006 EQU   LRBHRSW1
LRBRSYSI EQU   LRBHRSW1
LRBROPER EQU   LRBHRSW1
LRBRSEC  EQU   LRBHRSW1
LRBRPRIM EQU   LRBHRSW1
@NM00056 EQU   PCCA+512
PCCACAT  EQU   PCCA+384
PCCARV36 EQU   PCCA+380
PCCARV35 EQU   PCCA+378
PCCARV01 EQU   PCCA+377
PCCACPUM EQU   PCCA+376
PCCARV63 EQU   PCCA+372
PCCARV62 EQU   PCCA+368
PCCARV61 EQU   PCCA+364
PCCARV60 EQU   PCCA+360
PCCARV59 EQU   PCCA+356
PCCARV58 EQU   PCCA+352
PCCARV57 EQU   PCCA+348
PCCARV56 EQU   PCCA+344
PCCARV55 EQU   PCCA+340
PCCARV54 EQU   PCCA+336
PCCALOGA EQU   PCCA+332
PCCACHID EQU   PCCA+324
PCCACHSV EQU   PCCA+312
PCCARV79 EQU   PCCACHF4
PCCARV78 EQU   PCCACHF4
PCCARV77 EQU   PCCACHF4
PCCARV76 EQU   PCCACHF4
PCCARV75 EQU   PCCACHF4
PCCARV74 EQU   PCCACHF4
PCCARV73 EQU   PCCACHF4
PCCARV72 EQU   PCCACHF4
PCCARV71 EQU   PCCACHF3
PCCARV70 EQU   PCCACHF3
PCCARV69 EQU   PCCACHF3
PCCARV68 EQU   PCCACHF3
PCCARV67 EQU   PCCACHF3
PCCARV66 EQU   PCCACHF3
PCCARV65 EQU   PCCACHF3
PCCARV64 EQU   PCCACHF3
PCCACF28 EQU   PCCACHF2
PCCACF27 EQU   PCCACHF2
PCCACF26 EQU   PCCACHF2
PCCACF25 EQU   PCCACHF2
PCCACF24 EQU   PCCACHF2
PCCACF23 EQU   PCCACHF2
PCCACF22 EQU   PCCACHF2
PCCACF21 EQU   PCCACHF2
PCCACF18 EQU   PCCACHF1
PCCACF17 EQU   PCCACHF1
PCCACF16 EQU   PCCACHF1
PCCACF15 EQU   PCCACHF1
PCCACF14 EQU   PCCACHF1
PCCACF13 EQU   PCCACHF1
PCCACF12 EQU   PCCACHF1
PCCACF11 EQU   PCCACHF1
PCCARV05 EQU   PCCA+306
PCCACHPB EQU   PCCA+305
PCCALGP2 EQU   PCCA+304
PCCALGP1 EQU   PCCA+303
PCCALOGL EQU   PCCA+302
PCCARV80 EQU   PCCA+300
PCCACHW2 EQU   PCCA+296
PCCACHW1 EQU   PCCA+292
PCCAIOSI EQU   PCCA+291
PCCACNRB EQU   PCCACHRB
PCCACCVB EQU   PCCACHRB
PCCACSNB EQU   PCCACHRB
PCCARV52 EQU   PCCACHRB
PCCACHIB EQU   PCCACHRB
PCCACTIB EQU   PCCACHRB
PCCACINB EQU   PCCACHRB
PCCACSIB EQU   PCCACHRB
PCCARV51 EQU   PCCACHS2
PCCARV50 EQU   PCCACHS2
PCCARV49 EQU   PCCACHS2
PCCACURC EQU   PCCACHS2
PCCACNLG EQU   PCCACHS2
PCCACMOD EQU   PCCACHS2
PCCACALT EQU   PCCACHS2
PCCACIOR EQU   PCCACHS2
PCCARV47 EQU   PCCACHS1
PCCACUCB EQU   PCCACHS1
PCCACIBC EQU   PCCACHS1
PCCACAND EQU   PCCACHS1
PCCACNLS EQU   PCCACHS1
PCCACFRR EQU   PCCACHS1
PCCACNRE EQU   PCCACHS1
PCCACCMP EQU   PCCACHS1
PCCACSEQ EQU   PCCACHTS
PCCACDIN EQU   PCCACHTS
PCCARV44 EQU   PCCACHTS
PCCARV43 EQU   PCCACHTS
PCCACTEC EQU   PCCACHTS
PCCACDAV EQU   PCCACHVA
PCCACCHV EQU   PCCACHVA
PCCACCMD EQU   PCCACHVA
PCCACUNS EQU   PCCACHVA
PCCACSQV EQU   PCCACHVA
PCCARV42 EQU   PCCACHVA
PCCARV41 EQU   PCCACHVA
PCCACITF EQU   PCCACHVA
PCCARV40 EQU   PCCACHBL
PCCARV39 EQU   PCCACHBL
PCCARV38 EQU   PCCACHBL
PCCACCUE EQU   PCCACHBL
PCCACSTG EQU   PCCACHBL
PCCACSCU EQU   PCCACHBL
PCCACCHA EQU   PCCACHBL
PCCACCPU EQU   PCCACHBL
PCCACNOR EQU   PCCACHPF
PCCACCNT EQU   PCCACHPF
PCCACSNS EQU   PCCACHPF
PCCARV37 EQU   PCCACHPF
PCCACHIO EQU   PCCACHPF
PCCACTIO EQU   PCCACHPF
PCCACINT EQU   PCCACHPF
PCCACSIO EQU   PCCACHPF
PCCACHUB EQU   PCCAWERP
PCCACHEL EQU   PCCA+168
PCCALRBR EQU   PCCA+164
PCCAPWAR EQU   PCCA+156
PCCAPWAV EQU   PCCA+152
PCCAEMSA EQU   PCCAEMSB+12
PCCAEMSE EQU   PCCAEMSB+8
PCCAEMSP EQU   PCCAEMSB+4
PCCARMS  EQU   PCCARMSB
PCCARV34 EQU   PCCARMSB
PCCARV33 EQU   PCCARMSB
PCCARV32 EQU   PCCARMSB
PCCARV31 EQU   PCCARMSB
PCCARV30 EQU   PCCARMSB
PCCARV29 EQU   PCCARMSB
PCCARV28 EQU   PCCARMSB
PCCARV27 EQU   PCCAEMS3
PCCARV26 EQU   PCCAEMS3
PCCARV25 EQU   PCCAEMS3
PCCARV24 EQU   PCCAEMS3
PCCARV23 EQU   PCCAEMS3
PCCARV22 EQU   PCCAEMS3
PCCARV21 EQU   PCCAEMS3
PCCARV20 EQU   PCCAEMS3
PCCARV19 EQU   PCCAEMS2
PCCARV18 EQU   PCCAEMS2
PCCARV17 EQU   PCCAEMS2
PCCARV16 EQU   PCCAEMS2
PCCARV15 EQU   PCCAEMS2
PCCARV14 EQU   PCCAEMS2
PCCARV13 EQU   PCCAEMS2
PCCARV12 EQU   PCCAEMS2
PCCARV11 EQU   PCCARISP
PCCARV10 EQU   PCCARISP
PCCARV09 EQU   PCCARISP
PCCARV08 EQU   PCCARISP
PCCARV07 EQU   PCCARISP
PCCARV06 EQU   PCCARISP
PCCASERL EQU   PCCARISP
PCCAPARL EQU   PCCARISP
PCCARPB  EQU   PCCA+132
PCCACTIN EQU   PCCAINTE
PCCANFIN EQU   PCCAINTE
PCCANUIN EQU   PCCAINTE
PCCACTCC EQU   PCCACCE
PCCANFCC EQU   PCCACCE
PCCANUCC EQU   PCCACCE
PCCACTTD EQU   PCCATODE
PCCANFTD EQU   PCCATODE
PCCANUTD EQU   PCCATODE
PCCARV04 EQU   PCCATMFL
PCCARV03 EQU   PCCATMFL
PCCARV02 EQU   PCCATMFL
PCCAMINT EQU   PCCATMFL
PCCAMCC  EQU   PCCATMFL
PCCAVKIL EQU   PCCATMFL
PCCASYNC EQU   PCCATMFL
PCCAINIT EQU   PCCATMFL
PCCARV9E EQU   PCCA+124
PCCARV9D EQU   PCCA+120
PCCARV9C EQU   PCCA+116
PCCARV9B EQU   PCCA+112
PCCARV9A EQU   PCCA+108
PCCARV99 EQU   PCCA+104
PCCARV98 EQU   PCCA+100
PCCARV97 EQU   PCCA+96
PCCARV96 EQU   PCCA+92
PCCARV95 EQU   PCCA+88
PCCARV94 EQU   PCCA+84
PCCARV93 EQU   PCCA+80
PCCARV92 EQU   PCCA+76
PCCARV91 EQU   PCCA+72
PCCARV90 EQU   PCCA+68
PCCARV89 EQU   PCCA+64
PCCARV88 EQU   PCCA+60
PCCARV87 EQU   PCCA+56
PCCARV86 EQU   PCCA+52
PCCARV85 EQU   PCCA+48
PCCARV84 EQU   PCCA+44
PCCARV83 EQU   PCCA+40
PCCARV82 EQU   PCCA+36
PCCARV81 EQU   PCCA+32
PCCAPSAR EQU   PCCA+28
PCCAPSAV EQU   PCCA+24
PCCATQEP EQU   PCCA+20
PCCACAFM EQU   PCCA+18
PCCACPUA EQU   PCCA+16
PCCACPID EQU   PCCA+4
PCCAPCCA EQU   PCCA
LRBCMPCS EQU   LRBCMP+2
LRBCMPPA EQU   LRBCMP
LRBCMPNO EQU   LRBCVAR+6
LRBCMPF2 EQU   LRBCVAR+5
LRBCMPF1 EQU   LRBCVAR+4
LRBCRESD EQU   LRBCVAR+2
LRBCFT   EQU   LRBCVAR
LRBHMCEL EQU   LRBHCPID+6
LRBHMDL  EQU   LRBHCPID+4
LRBHCSER EQU   LRBHCPID+1
@NM00005 EQU   LRBHCPID
LRBHTIME EQU   LRB+12
LRBHDATE EQU   LRB+8
@NM00004 EQU   LRB+7
LRBHCNT  EQU   LRB+6
LRBMCLB  EQU   LRBHSW3
LRBNDEM  EQU   LRBMACT
LRBNCEM  EQU   LRBMACT
@NM00003 EQU   LRBHSW0
LRBHTMC  EQU   LRBHSW0
@NM00002 EQU   LRBHSW0
LRBHNS   EQU   LRBHSW0
LRBHMORE EQU   LRBHSW0
@NM00001 EQU   LRBHSYS
LRBHSYSB EQU   LRBHSYS
@NM00055 EQU   PSA+3412
PSASTAK  EQU   PSA+3072
@NM00054 EQU   PSA+1032
PSAUSEND EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSARV060 EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSARV054 EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00053 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00052 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSARV011 EQU   PSASUP3
PSARV010 EQU   PSASUP3
PSARV009 EQU   PSASUP3
PSARV008 EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSAIPCRP EQU   PSASUP1
PSAIPCDR EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00051 EQU   FLCFSA
@NM00050 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00049 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00048 EQU   FLCIOA
@NM00047 EQU   FLCMCLA+15
@NM00046 EQU   FLCMCLA+14
@NM00045 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00044 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00043 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00042 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00041 EQU   FLCPER
@NM00040 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00039 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00038 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00037 EQU   FLCPIILC
@NM00036 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00035 EQU   FLCSVILC
@NM00034 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00033 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00032 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@ENDDATA EQU   *
         END   IEEVDUMY
