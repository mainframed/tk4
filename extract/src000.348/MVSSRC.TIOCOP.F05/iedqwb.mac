         TITLE 'IEDQWB - TOTE RESOURCE MANAGEMENT MODULE'
IEDQWB   CSECT
*A000000-999999                                                @Y16X5U0
*** THIS MODULE IS RESEQUENCED AS OF TCAM 10.0                 @Y17XAUU
* CHANGE ACTIVITY AS FOLLOWS:
*A169200,357300,677700,760500,855900                             X02004
*D354600                                                         X02004
*D326222-326330,775610-775760                                   SA41597
*A770000,886000                                                  A41582
*C070000-072000,700030-700050,773500                             A41582
*A106990-107030,688460-688640,775330-775340                      S21903
*C700054,700056-700058                                           S21903
*D326222-326330,775610-775820                                    S21903
*C000000-999999                                                  S22024
*C841500-842400                                                  S05331
*D760600-761000                                                @YA10453
*A129600,664200,833400                                         @YA10453
*A152100,237600,242100,308700,836100938700                     @Y17XAUU
*C678600,675000,834020,334800,340200,602100,606600             @Y17XAUU
*D351650-351700,643500,841500                                  @Y17XAUU
* A012000,038400,129500,305400                                 @XM05671
* D212400-214800                                               @XM05672
*
         EJECT
***********************************************************************
*                                                                     *
* MODULE NAME:  IEDQWB (TCAM,TOTE)                             @Y17XAUU
*                                                                     *
* DESCRIPTIVE NAME:  TOTE RESOURCE MANAGEMENT MODULE                  *
*                                                                     *
* COPYRIGHT:  'NONE'                                                  *
*                                                                     *
* STATUS:  VERSION 10.0                                        @Y17XAUU
*                                                                     *
* FUNCTIONS:                                                          *
*                                                                     *
*    IEDQWB PERFORMS ONE OF THE FOLLOWING FUNCTIONS REQUESTED BY      *
*    MODULE IEDQWA:                                                   *
*                                                                     *
*    FUNCTION 1 - ON THE FIRST PASS, IEDQWB DETERMINES THE CORE       *
*                 AVAILABLE TO TOTE.  IT GETS THE NUMBER OF DUMMY     *
*                 ENTRIES REQUESTED ON THE OLTERM= OPERAND OF THE     *
*                 TTABLE MACRO AND INITIALIZES THE DUMMY TERMNAME     *
*                 TABLE ENTRIES AND THE EXTENDED AREA FOR THE TERMINAL*
*                 ENTRIES (TTE'S) AND QUEUE CONTROL BLOCKS (QCB'S).   *
*                 IT ALSO LOADS THE ACCESS MANAGER ROUTINE     @Y17XAUU
*                 IEDQWO AND ALL SERVICE ROUTINES (IEDQWAA,    @Y17XAUU
*                 IEDQWAB,IEDQWAJ,IEDQWM2,IEDQW35,IEDQW39,     @Y17XAUU
*                 IEDQWP1,IEDQWP2,IEDQW37,IEDQW28,IEDQW36,     @Y17XAUU
*                 IEDQWAC,IEDQW41,IEDQW42,IEDQW44,IEDQW47,     @Y17XAUU
*                 IEDQW16,IEDQW25, AND IEDQW33). IT CHECKS TO  @Y17XAUU
*                 SEE IF THE TOTE MH (IEDTOTMH) HAS BEEN       @Y17XAUU
*                 SYSGEN'ED WITH THE MCP. IF THE TOTE MH IS    @Y17XAUU
*                 PRESENT, ITS ADDRESS IS SAVED IN THE RESPL   @Y17XAUU
*                 CONTROL BLOCK.                               @Y17XAUU
*                                                                     *
*    FUNCTION 2 - THIS FUNCTION CLEANS UP WHEN A TCAM CLOSEDOWN HAS   *
*                 BEEN ISSUED.  IT FREEMAINS ANY CORE GOTTEN BY TOTE, *
*                 DETACHES THE OLT, AND DELETES THE ACCESS MANAGER    *
*                 MODULE IEDQWO AND AND THE SERVICE ROUTINES.  @Y17XAUU
*                                                                     *
*    FUNCTION 3 - THIS FUNCTION IS THE END OF SUBTASK (I.E. OLT) CLEAN*
*                 UP ROUTINE.  IT FREES ANY DUMMY ENTRIES THAT WERE   *
*                 USED AND FREEMAINS THE OLTCB.  IT MANAGES THE CORE  *
*                 IN THE EXTENDED AREA (N X 184 BYTES WHERE N IS THE  *
*                 VALUE SPECIFIED ON OLTERM= OPERAND OF THE TTABLE    *
*                 MACRO) TO MINIMIZE FRAGMENTATION OF THE AREA.       *
*                 IF CLEANUP WAS INITIATED BY OPERATOR CONTROL @XM05671
*                 (VIA POST OF OP CTL CLEANUP ELEMENT), THE    @XM05671
*                 COUNT OF 'TESTS AFFECTED' CONTAINED IN THE   @XM05671
*                 ELEMENT IS DECREMENTED. IF ZERO, OP CTL IS   @XM05671
*                 REDRIVEN BY POSTING THE ELEMENT TO AVTOPCOB. @XM05671
*                                                                     *
*    FUNCTION 4 - THIS FUNCTION ALLOCATES DUMMY TNT ENTRIES, QCB'S,   *
*                 LGB'S AND TTE'S FOR THE CONTROL TERMINAL, ALT@Y17XAUU
*                 PRINTER, PRIMARY TEST DEVICE OR SECONDARY TEST      *
*                 DEVICE WHEN REQUESTED.  IT ASSIGNS THE MAIN STORAGE *
*                 TO THE OLT AND DISPATCHES THE OLT.                  *
*                                                                     *
*    FUNCTION 5 - THIS FUNCTION INITIALIZES THE OLTCB FOR A NEWLY     *
*                 RECEIVED TRM BY ALLOCATING THE CORE REQUIRED,       *
*                 CLEARING THE CORE AND SETTING UP THE REQUIRED       *
*                 CONTROL FIELDS.                                     *
*                                                                     *
*    FUNCTION 6 - THIS FUNCTION PERFORMS CLEANUP WHEN AN OLT          *
*                 ABNORMALLY TERMINATES.  IT INFORMS THE SYSTEM       *
*                 CONSOLE OPERATOR OF THE OLT ABENDING AND THE        *
*                 COMPLETION CODE.                                    *
*                                                                     *
* ENTRY POINT:                                                        *
*                                                                     *
*    IEDQWB                                                    @Y17XAUU
*                                                                     *
* INPUT:  REGISTERS 00,02,04,13,14,15 CONTAIN THE FOLLOWING VALUES:   *
*                                                                     *
*                 00 - PARAMETER REGISTER                             *
*                 01 - RESPL ADDRESS                           @Y17XAUU
*                 02 - BUFFER ADDRESS                          @Y17XAUU
*                 04 - AVT ADDRESS                                    *
*                 13 - SAVE AREA ADDRESS                              *
*                 14 - RETURN ADDRESS                                 *
*                 15 - ENTRY POINT ADDRESS                            *
*                                                                     *
* OUTPUT: REGISTERS 01 AND 15 CONTAIN THE FOLLOWING VALUES:           *
*                                                                     *
*                 01 - PARAMETER LIST ADDRESS                         *
*                 15 - RETURN CODE                                    *
*                                                                     *
* EXTERNAL REFERENCES:  NONE                                          *
*                                                                     *
* EXITS,NORMAL:  RETURNS TO IEDQWA WITH ONE OF THE FOLLOWING          *
*                RETURN CODES SET IN REGISTER 15:                     *
*                                                                     *
*                    0 - CONTINUE QUEUE SCAN                          *
*                    4 - WAIT FOR NEXT REQUEST FROM TCAM              *
*                    8 - RETURN TO TCAM                               *
*                                                                     *
* EXITS,ERROR: NONE                                                   *
*                                                                     *
* MODULE TYPE: PROCEDURE                                       @Y17XAUU
*                                                              @Y17XAUU
* PROCESSOR: ASSEMBLER XF                                      @Y17XAUU
*                                                              @Y17XAUU
* MODULE SIZE: SEE ASSEMBLE LISTING                            @Y17XAUU
*                                                              @Y17XAUU
* MACROS: LOAD                                                 @Y17XAUU
*         DELETE                                               @Y17XAUU
*         IEDHJN                                               @Y17XAUU
*         SAVE                                                 @Y17XAUU
*         OPEN                                                 @Y17XAUU
*         STIMER                                               @Y17XAUU
*         WAIT                                                 @Y17XAUU
*         TTIMER                                               @Y17XAUU
*         DETACH                                               @Y17XAUU
*         ATTACH                                               @Y17XAUU
*         FREEMAIN                                             @Y17XAUU
*         GETMAIN                                              @Y17XAUU
*         POST                                                 @Y17XAUU
*         WTO                                                  @Y17XAUU
*         TOPCTL                                               @Y17XAUU
*                                                              @Y17XAUU
* NOTES: SEE BELOW                                             @Y17XAUU
*                                                              @Y17XAUU
*  DEPENDENCIES: EBCDIC CHARACTER CODE.                        @Y17XAUU
*                                                              @Y17XAUU
*  RESTRICTIONS: NONE                                          @Y17XAUU
*                                                              @Y17XAUU
*  REGISTER CONVENTIONS: SEE REGISTERS ASSIGNMENT              @Y17XAUU
*                                                              @Y17XAUU
*  PATCH: PATCH                                                @Y17XAUU
*                                                              @Y17XAUU
* PURPOSE: SEE FUNCTION                                        @Y17XAUU
*                                                              @Y17XAUU
* TABLES/WORK AREAS:                                                  *
*                                                                     *
*    AVT, CVT, OLTCB, RESPL, TNT, PRF, DCB, LCB, REQ, UCB, SAT,       *
*    NAT, RVT                                                  @Y17XAUU
*                                                                     *
* ATTRIBUTES:                                                         *
*                                                                     *
*    ENABLED, PROBLEM PROGRAM MODE, TRANSIENT                         *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*
*        REGISTER EQUATES
*
***********************************************************************
         SPACE 2
R0       EQU   0                  WORK REGISTER
R1       EQU   1                  PARAMETER LIST ADDRESS
R2       EQU   2                  WORK REGISTER
R3       EQU   3                  WORK REGISTER
R4       EQU   4                  ADDRESS OF AVT
R5       EQU   5                  WORK REGISTER
R6       EQU   6                  WORK REGISTER
R7       EQU   7                  WORK REGISTER
R8       EQU   8                  WORK REGISTER
R9       EQU   9                  WORK REGISTER
R10      EQU   10                 WORK REGISTER
R11      EQU   11                 BASE REGISTER
R12      EQU   12                 ADDRESS OF RESIDENT PARAMETER LIST
R13      EQU   13                 REGISTER SAVE AREA ADDRESS
R14      EQU   14                 RETURN ADDRESS
R15      EQU   15                 RETURN CODE REGISTER
*
         SPACE 3
**************************************************************** S22024
*        MODULE EQUATES                                        * S22024
**************************************************************** S22024
         SPACE 2
D0       EQU   0                  CONSTANT VALUE                 S22024
D1       EQU   1                  CONSTANT VALUE                 S22024
D2       EQU   2                  CONSTANT VALUE                 S22024
D3       EQU   3                  CONSTANT VALUE                 S22024
HWRD     EQU   3                  TO PICKUP HALFWORD           @Y17XAUU
MULTIPLY EQU   3                  TO MULTIPLY BY 8             @Y17XAUU
D4       EQU   4                  CONSTANT VALUE                 S22024
D5       EQU   5                  CONSTANT VALUE                 S22024
D6       EQU   6                  CONSTANT VALUE                 S22024
D7       EQU   7                  CONSTANT VALUE                 S22024
D8       EQU   8                  CONSTANT VALUE                 S22024
D9       EQU   9                  CONSTANT VALUE                 S22024
D10      EQU   10                 CONSTANT VALUE                 S22024
D12      EQU   12                 CONSTANT VALUE                 S22024
D20      EQU   20                 CONSTANT VALUE                 S22024
D21      EQU   21                 CONSTANT VALUE                 S22024
D24      EQU   24                 CONSTANT VALUE                 S22024
D28      EQU   28                 CONSTANT VALUE               @YA10453
D64      EQU   64                 CONSTANT VALUE                 S22024
D80      EQU   80                 CONSTANT VALUE                 S22024
D256     EQU   256                LENGTH FOR CLEARING OLTCB      S22024
XF0      EQU   X'F0'              USED WHEN UNPACKING A NUMBER   S22024
XFF      EQU   X'FF'              USED IN TURNING OFF FLAGS
BLANK    EQU   C' '               BLANK CHARACTER                S22024
ZEROEQ   EQU   0                  THE CONSTANT 0                 S22024
THREEEQU EQU   3                  CONSTANT VALUE 3               S22024
TNTADRLN EQU   3                  LENGTH OF ADDRESS IN TERMINAL  S22024
*                                   NAME TABLE ENTRY             S22024
OLTCBKEY EQU   X'D6'              OLTCB QUEUE ELEMENT KEY        S22024
EXAFQKEY EQU   X'C5'              KEY FOR EXTENDED AREA FREE     S22024
*                                   QUEUE ELEMENTS               S22024
TIMEEND  EQU   X'80'              TIMER COMPLETION FLAG          S22024
SUBTRNSZ EQU   8                  MINIMUM OLT SIZE (8K)        @YM07420
TESTCTR  EQU   8                  OFFSET OF 'AFFECTED TESTS'   @XM05671
*                                  CT. IN REQDATA PORTION OF OP@XM05671
*                                  CTL ELMT (GEN REQUEST ELMT) @XM05671
TICCODE  EQU   X'08'              TIC CHANNEL COMMAND CODE     @XM05671
OPENFLAG EQU   X'8F'              OPEN FLAG                      S21903
SUCCESS  EQU   X'10'              INDICATION OF SUCCESSFUL OPEN  S21903
*                                                                S22024
*        RETURN CODES                                            S22024
*                                                                S22024
CONTINUE EQU   0                  DIRECT IEDQWA TO CONTINUE THE  S22024
*                                   QUEUE SCAN                   S22024
GOWAIT   EQU   4                  DIRECT IEDQWA TO WAIT          S22024
TCAMRET  EQU   8                  DIRECT IEDQWA TO RETURN TO TCAMS22024
OLTFLG   EQU   X'80'              DCB OPEN FLAG (INPUT ONLY)   @Y17XAUU
ADRMSK   EQU   7                  ADDRESS MASK                 @Y17XAUU
MSKHI    EQU   X'08'              MASK FIELD                   @Y17XAUU
         SPACE 2
         EJECT
*
*        SATISFY SYSTEM LINKAGE CONVENTIONS
*
         SAVE  (14,12)
         USING IEDQAVTD,R4        SET UP ADDRESSIBILITY FOR AVT
         LR    R11,R15            GET ENTRY POINT ADDRESS
         USING IEDQWB,R11         ESTABLISH BASE REGISTER
IEDQWB   IEDHJN IEDQWBB,HJN       MODULE ID AND HJN
         ST    R13,REGSAVE+D4     SAVE POINTER TO TCAM REG SAVE AREA
         LR    R12,R13            PUT SAVE AREA POINTER INTO REG 12
         LA    R13,REGSAVE        GET ADDRESS OF OWN SAVE AREA
         ST    R13,D8(R12)        STORE SAVE AREA ADDRESS IN TCAM
*                                   SAVE AREA
         LR    R12,R1             GET ADDRESS OF RESIDENT PARAMETER
*                                   LIST
         USING RESPL,R12          SET UP ADDRESSIBILITY FOR RESIDENT
*                                   PARAMETER LIST (RESPL)
         ST    R2,ELADDR               SAVE BUFFER ADDRESS       X02004
         EJECT
***********************************************************************
*                                                                     *
*        FUNCTION 1 - TOTE INITILIZATION                              *
*                                                                     *
***********************************************************************
FUNCT1   EQU   *
         TM    RESFLAGS,RESINIT   IS THIS THE FIRST PASS?
         BO    FUN140             NO, BRANCH
         OI    RESFLAGS,RESINIT   YES, TURN OFF FIRST TIME SWITCH
         SR    R7,R7              CLEAR REGISTER 7
         IC    R7,AVTOLTST        GET OLT TRANSIENT AREA SIZE OPTION
*                                   FROM THE AVT
         SH    R7,RESSIZE         SUBTRACT TOTE RESIDENT REQUIREMENT
         STH   R7,RESBKTOT        STORE RESULT IN BLOCKS TOTAL
*
*        INITIALIZE DUMMY TNT ENTRIES
*
         L     R5,AVTRNMPT        GET TERMINAL NAME TABLE ADDR
         USING IEDQTNTD,R5        SET UP ADDRESSIBILITY FOR TERMNAME
*                                   TABLE
         LH    R7,TNTLEN          GET NUMBER OF TABLE ENTRIES
         LR    R8,R7                DUPLICATE IT
         SR    R9,R9              GET
         IC    R9,TNTENLEN          LENGTH
         LA    R9,D3(R9)            OF ENTRY
         MR    R6,R9              GET ADDRESS OF TOTE DUMMY
         LA    R3,TNTFIRST(R7)      TNT FIELD
         DROP  R5
         USING DEXT,R3
         MVC   RESTNTCT(D4),DEXTCNT SAVE TOTE TNT ENTRY COUNT
*                                     AND ADDRESS OF EXTENDED AREA
         ST    R3,RESTNTPT-D1     SAVE ADDRESS OF TOTE TNT FIELD
         SR    R7,R7              GET NUMBER OF TOTE
         IC    R7,RESTNTCT        TNT ENTRIES
         LR    R5,R7              DUPLICATE IT
         LTR   R7,R7              IS THE NUMBER ZERO?
         BZ    FUN120             YES, NO DUMMY TNT ENTRIES SPECIFIED
*                                   SO BRANCH AROUND SET UP
         MVI   DEXT,BLANK         FILL TOTE TNT AREA
         MVC   DEXT+D1(D3),DEXT     WITH BLANKS
         LR    R6,R3              SET INITIAL VALUE FOR TNT
         SH    R6,TNTEADLN          ENTRY ADDRESS POINTER
FUN110   EQU   *
         AR    R6,R9              GET POINTER TO NEXT TNT
*                                   ENTRY ADDRESS FIELD
         LA    R8,D1(R8)          GET TNT OFFSET FOR THIS ENTRY
         STH   R8,WBWORK01+D4     STORE OFFSET FOR MVC INSTRUCTION
         MVC   D0(D2,R6),WBWORK01+D4  MOVE OFFSET INTO TNT ENTRY
*                                       ADDRESS FIELD
         BCT   R7,FUN110          LOOP TIL ALL TOTE TNT ENTRY
*                                   OFFSETS ARE SAVED
         SR    R6,R9              CALCULATE ADDRESS
         LA    R6,D3(R6)            OF LAST TOTE TNT ENTRY
         ST    R6,RESTTLST          AND SAVE IN RESIDENT
*                                   CONTROL BLOCK
         DROP  R3
*
*        INITIALIZE EXTENDED AREA FOR QCBS AND TTES
*
*
*        REGISTER R5 CONTAINS NUMBER OF TOTE TNT ENTRIES
*
         L     R2,RESDMTTE-D1     GET EXTENDED AREA ADDRESS
         USING QEL,R2
         LA    R3,RESEFQCB        PUT EXTENDED AREA FREE QCB
         ST    R3,QELQCB-D1         ADDRESS IN ELEMENT
         MVI   QELKEY,EXAFQKEY         AND SET KEY
         LA    R7,DEXTLFTR        GET EXTENDED AREA LENGTH FACTOR
         MR    R6,R5              CALCULATE LENGTH OF EXTENDED
         STH   R7,QELSIZE           AREA AND SAVE IT
         L     R15,RESADDND       GET QUEUE HANDLER ADDRESS
         BALR  R10,R15              AND ADD ELEMENT TO END
*                                   OF QUEUE
         DROP  R2
FUN120   EQU   *
         TM    AVTSAVTF,AVTVTMCP  3705 ENVIRONMENT             @Y17XAUU
         BZ    MHEXIT             NO - BYPASS TOTE MH CHECK    @Y17XAUU
         L     R10,AVTSAVTP       GET SAVT ADDRESS             @Y17XAUU
         LA    R10,D0(R10)        CLEAR FLAG BYTE              @Y17XAUU
         USING IEDNSVTD,R10       ESTABLISH ADDRESSABILITY     @Y17XAUU
         LH    R7,SAVTMHDX        GET INDEX OF FIRST MH ENTRY  @Y17XAUU
         L     R15,SAVTTNTX       GET TTCIN TO NETWORK ADDRESS @Y17XAUU
*                                 CONVERSION ROUTINE ADDRESS   @Y17XAUU
         L     R10,SAVTMHTB       GET MH TABLE ADDRESS         @Y17XAUU
         DROP  R10                                             @Y17XAUU
         USING IEDMHTD,R10        ESTABLISH ADDRESSABILITY     @Y17XAUU
MHLOOP   DS    0H                 CHECK FOR TOTE MH GEN'ED     @Y17XAUU
         CLI   MHTABEND,MHFLGE    END OF TABLE                 @Y17XAUU
         BE    MHEXIT             YES - TOTE MH NOT GEN'ED     @Y17XAUU
         CLC   MHNAME,TOTEMH      TOTE MH ENTRY                @Y17XAUU
         BE    MHFOUND            YES                          @Y17XAUU
         LA    R7,D1(R7)          INCREMENT TTCIN OFFSET       @Y17XAUU
         LA    R1,MHTABLEN        MH TABLE ENTRY LENGTH        @Y17XAUU
         AR    R10,R1             POINT TO NEXT ENTRY          @Y17XAUU
         B     MHLOOP             CHECK NEXT ENTRY             @Y17XAUU
MHFOUND  DS    0H                 TOTE MH HAS BEEN GEN'ED      @Y17XAUU
         MVC   RESTOTMH(D4),MHENTRY SAVE TOTE MH ADDRESS       @Y17XAUU
         STH   R7,RESMHSRC        SAVE TOTE MH TTCIN           @Y17XAUU
         LR    R1,R7              SET UP TO FIND NETWORK ADDR  @Y17XAUU
         BALR  R14,R15            CALL IEDIAP04                @Y17XAUU
         STH   R15,RESMHNAT       SAVE TOTE MH NETWORK ADDRESS @YM07278
MHEXIT   DS    0H                 END OF TOTE MH CHECK         @Y17XAUU
         DROP  R10                                             @Y17XAUU
         LA    R1,RESAPDCB        GET ADDRESS OF DIAGMSG DCB     S21903
         ST    R1,WBWORK01        PUT IN PARM LIST               S21903
         MVI   WBWORK01,OPENFLAG  SET FLAG                       S21903
         LA    R1,WBWORK01        POINT TO PARM LIST             S21903
         OPEN  MF=(E,(1))         OPEN SYSOUT DCB                S21903
         LA    R6,RESPLADR        RESIDENT MOD ADDRESS LIST    @Y17XAUU
         LA    R7,LOADLIST        RESIDENT MOD ID LIST         @Y17XAUU
*                                                            * @Y17XAUU
*        THE ENTRIES IN THE RESIDENT MODULE ADDRESS LIST MUST* @Y17XAUU
*        BE DEFINED IN THE SAME ORDER AS THE RESIDENT MODULE * @Y17XAUU
*        ID LIST.                                            * @Y17XAUU
*                                                            * @Y17XAUU
LOADRES  DS    0H                 LOAD RESIDENT MODULES        @Y17XAUU
         CLC   D0(D2,R7),ENDLIST  END OF LOAD LIST             @Y17XAUU
         BE    LOADEND            YES - EXIT                   @Y17XAUU
         MVC   MODID(D2),D0(R7)   MOVE MOD ID TO LOAD NAME     @Y17XAUU
         LOAD  EPLOC=MODNAME      LOAD THE MODULE              @Y17XAUU
         ST    R0,D0(R6)          SAVE MODULE ADDRESS          @Y17XAUU
         LA    R6,D4(R6)          NEXT ADDRESS SLOT            @Y17XAUU
         LA    R7,D2(R7)          NEXT MOD ID                  @Y17XAUU
         B     LOADRES            LOAD NEXT MODULE             @Y17XAUU
LOADEND  DS    0H                 END OF LOADING               @Y17XAUU
FUN140   EQU   *
         SR    R15,R15            CLEAR REG 15
         IC    R15,RESWBFNC       GET FUNCTION CODE
         B     RESB01(R15)          AND GO PERFORM IT
RESB01   EQU   *
         B     FUNCT1             TOTE INITILIZATION
         B     FUNCT2             ISSUE FREEMAINS, DELETES AND
*                                   INFORMS CE OF CLOSEDOWN
         B     FUNCT3             SUBTASK ENDED CLEAN UP
         B     FUNCT4             HONORS TNT REQUEST, ASSIGN MAIN
*                                   STORAGE, AND DISPATCH OLT
         B     FUNCT5             SET UP OLTCB FOR NEW OLT REQUEST
         B     FUNCT6             OLT ABEND CLEAN UP ROUTINE
         SPACE 2
RETURN2  EQU   *
         LA    R15,GOWAIT         DIRECT IEDQWA TO ENTER
*                                   WAIT STATE
         B     RETURN1              & RETURN
RETURN   EQU   *
         LA    R15,CONTINUE       DIRECT IEDQWA TO
*                                   CONTINUE QUEUE SCAN
RETURN1  EQU   *
         L     R13,D4(R13)        GET CALLER'S SAVE AREA POINTER
         L     R14,D12(R13)       RESTORE REGISTER 14
         LM    R0,R12,D20(R13)    RESTORE REMAINING REGS EXCEPT 15
         BR    R14                    RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        FUNCTION 2 - ISSUE FREEMAINS,DELETES AND INFORM CE OF        *
*                     CLOSEDOWN                                       *
*                                                                     *
***********************************************************************
FUNCT2   EQU   *
         L     R5,RESOBQCB        GET 1ST OLTCB QUEUE ELEMENT
FUN201   EQU   *
         USING TOTOBPTR,R5        SET UP ADDRESSIBILITY FOR OLTCB
         CLI   TOTELKEY,QENDKEY   IS THIS THE END OF OLTCB QUEUE?
         BE    FUN202             YES, BRANCH
         TM    TOTFLG10,TOTOLTED  IS OLT REQUEST SATISFIED?
         BO    FUN2015            YES, BRANCH
         L     R5,TOTELLNK-D1     GET NEXT QUEUE ELEMENT
         DROP  R5
         B     FUN201             BRANCH BACK AND EXAMINE NEXT ELEMENT
FUN2015  EQU   *
         LR    R2,R5              PUT OLTCB ADDRESS INTO REGISTER 2
         BAL   R9,OLTTERM         GO TERMINATE REQUEST
         B     FUNCT2             GET NEXT QUEUE ELEMENT
FUN202   EQU   *
         L     R1,RESOBQCB        GET 1ST OLTCB QUEUE ELEMENT
         USING TOTOBPTR,R1        SET UP ADDRESSIBILITY FOR OLTCB
         CLI   TOTELKEY,QENDKEY   IS OLTCB QUEUE EMPTY?
         BE    FUN203             YES, BRANCH
         DROP  R1
         STIMER REAL,TIMEREND,DINTVL=SECS10  SET 10 SECOND TIMER
         WAIT  ECB=RESTECB1       WAIT FOR OLT COMPLETIONS
         XC    RESTECB1(D4),RESTECB1  CLEAR TOTE ECB
         TTIMER CANCEL            CANCEL TIMER
         TM    WBFLAGS,TIMEEND    DID TIMER TIME OUT?
         BZ    FUNCT2             NO, GO BACK AND GET 1ST OLTCB
         L     R5,RESOBQCB        GET 1ST OLTCB QUEUE ELEMENT
FUN2022  EQU   *
         USING TOTOBPTR,R5        SET UP ADDRESSIBILITY FOR OLTCB
         CLI   TOTELKEY,QENDKEY   IS THIS END OF OLTCB QUEUE?
         BE    FUN203             YES, BYPASS SUBTASK DETACH
         CLC   TOTTCBAD+D1(D3),ZERO HAS THE ATTACH BEEN PERFORMED?
         BE    FUN203             NO, BYPASS SUBTASK DETACH
         OI    TOTFLG04,TOTDTCHD  SET TASK ALREADY DETACHED FLAG
         DETACH TOTTCBAD          DETACH SUBTASK
         L     R5,TOTELLNK-D1     GET NEXT QUEUE ELEMENT
         DROP  R5
         B     FUN2022            GO BACK AND EXAMINE NEXT ELEMENT
FUN203   EQU   *
         LA    R7,RESPLADR        RESIDENT MOD ID LIST         @Y17XAUU
DELLIST  DS    0H                 DELETE RESIDENT MODULES      @Y17XAUU
         CLC   D0(D2,R7),ENDLIST  END OF DELETE LIST           @Y17XAUU
         BE    DELEND             YES - EXIT                   @Y17XAUU
         MVC   MODID(D2),D0(R7)   MOVE MOD ID TO DELETE NAME   @Y17XAUU
         DELETE EPLOC=MODNAME     DELETE THE MODULE            @Y17XAUU
         LA    R7,D2(R7)          NEXT MOD ID                  @Y17XAUU
         B     DELLIST            DELETE NEXT MODULE           @Y17XAUU
DELEND   DS    0H                 END OF DELETING              @Y17XAUU
         LA    R15,TCAMRET        DIRECT IEDQWA TO RETURN TO TCAM
         B     RETURN1            RETURN TO IEDQWA
         EJECT
***********************************************************************
*                                                                     *
*        FUNCTION 3 - END OF SUBTASK CLEAN UP ROUTINE                 *
*                                                                     *
***********************************************************************
FUNCT3   EQU   *
         USING TOTOBPTR,R2        SET UP ADDRESSIBILITY FOR OLTCB
         NI    TOTFLG10,XFF-TOTOLTED  CLEAR SUBTASK ENDED FLAG
         CLC   TOTCMPCD+D1(D3),ZERO   DID THE SUBTASK ABEND?
         BNE   FUNCT6             YES, GO TO OLT ABEND CLEANUP ROUTINE
FUN33    EQU   *
         BAL   R9,OLTTERM         GO TERMINATE REQUEST
         B     RETURN             RETURN TO IEDQWA
         SPACE 5
OLTTERM  EQU   *
         LR    R6,R2              SAVE OLTCB ADDRESS IN R6
         DROP  R2
         USING TOTOBPTR,R6        SET UP ADDRESSIBILITY FOR OLTCB
         MVI   RQQTYPE,D0         SHOW CLEANUP REQUEST         @Y17XAUU
         LA    R7,TOTCTENT        GET C.T. ENTRY ADDRESS
         BAL   R14,TERMLUS        IF LU TERM SESSION           @Y17XAUU
*        IF CT ENTRY NOT ASSIGNED RETURN IS 8(REG14)           @Y17XAUU
         BAL   R14,RVTNAT         RVT/NAT PROCESSING           @Y17XAUU
         BAL   R8,FREETNT           AND GO FREE TNT ENTRY
*                                   AND EXTENDED AREA
         LA    R7,TOTAPENT        GET A.P. ENTRY ADDRESS
         BAL   R14,TERMLUS        IF LU TERM SESSION           @Y17XAUU
*        IF AP ENTRY NOT ASSIGNED RETURN IS 8(REG14)           @Y17XAUU
         BAL   R14,RVTNAT         RVT/NAT PROCESSING           @Y17XAUU
         BAL   R8,FREETNT           AND GO FREE TNT ENTRY
*                                   AND EXTENDED AREA
         LA    R7,TOTPRENT        GET PRIMARY DEVICE ENTRY ADDR
         TM    TOTFLG04,TOTPRCTF  PRIMARY ENTRY ASSIGNED?      @YM08057
         BZ    CHKSCDEV           ENTRY NOT ASSIGNED           @YM08057
         BAL   R14,TERMLUS        IF LU TERM SESSION           @Y17XAUU
*        IF PRIMARY TD IS NOT ASSIGNED RETURN IS 8(REG14)      @Y17XAUU
         BAL   R14,RVTNAT         RVT/NAT PROCESSING           @Y17XAUU
         BAL   R8,FREETNT           AND GO FREE TNT ENTRY
*                                   AND EXTENDED AREA
CHKSCDEV EQU   *                                               @YM08057
         LA    R7,TOTSCENT        GET SECONDARY DEVICE
*                                   ENTRY ADDRESS
         TM    TOTFLG04,TOTSCCTF  SECONDARY ENTRY ASSIGNED?    @YM08057
         BZ    CHKTDEND           NO - CONTINUE                @YM08057
         BAL   14,TERMLUS         IF LU TERM SESSION           @Y17XAUU
*        IF SECONDARY TD IS NOT ASSIGNED RETURN IS 8(REG14)    @Y17XAUU
         BAL   R14,RVTNAT         RVT/NAT PROCESSING           @Y17XAUU
         BAL   R8,FREETNT           AND GO FREE TNT ENTRY
*                                   AND EXTENDED AREA
CHKTDEND EQU   *                                               @YM08057
         OI    TOTFLG01,TOTCLNED  SET "CLEANUP ENDED" FLAG     @XM05671
*                                                              @XM05671
*        CHECK IF CLEANUP WAS INITIATED BY OPERATOR CONTROL.   @XM05671
*        IF SO, DECREMENT 'TESTS AFFECTED' COUNT. IF COUNT     @XM05671
*        IS ZERO, POST OPERATOR CONTROL ELEMENT TO AVTOPCOB    @XM05671
*        TO REDRIVE OPERATOR CONTROL.                          @XM05671
*                                                              @XM05671
         L     R2,TOTOPCLN        ADDR OF FIRST ELMT (IF ANY)  @XM05671
CHKOPCTL DS    0H                 START OF ELEMENT LOOP        @XM05671
         LTR   R2,R2              Q-OP CLT ELMT PRESENT        @XM05671
         BZ    BLKCHK             N-GET OUT OF LOOP            @XM05671
         USING IEDREQD,R2         GENERAL REQUEST ELEMENT DSECT@XM05671
         SR    R8,R8              CLEAR                        @XM05671
         ICM   R8,7,REQLINK       SAVE LINK ADDR               @XM05671
         LH    R7,REQDATA+TESTCTR 'TESTS AFFECTED' COUNTER     @XM05671
         BCTR  R7,R0              DECREMENT                    @XM05671
         STH   R7,REQDATA+TESTCTR STORE BACK IN ELMT           @XM05671
         LTR   R7,R7              Q-LAST TEST AFFECTED         @XM05671
         BNZ   CHKOPEND           N-SEE IF ANY MORE ELEMENTS   @XM05671
         L     R15,TOTRESPL       ADDR OF RESIDENT P LIST      @XM05671
         L     R15,RESREMEL-RESPL(R15) CALL SUBROUTINE TO      @XM05671
         BALR  R10,R15            REMOVE THIS ELMT FROM Q      @XM05671
         MVC   REQQCBA(D3),REQRQCBA MOVE IN RETURN QCB ADDR    @XM05671
         MVC   REQPRI(D1),REQRPRI RETURN POST PRIORITY         @XM05671
         MVI   REQRPRI,TICCODE    SET TIC CHANNEL CMD CODE     @XM05671
         MVC   REQRQCBA(D3),INVTIC+D1 SET INVALID TIC ADDR     @XM05671
         XC    REQLINK(D3),REQLINK CLEAR LINK FIELD            @XM05671
         LA    R0,TOTWAWRK        ADDR OF WORK AREA FOR SUBRT  @XM05671
         LA    R1,0(R2)           ELMT ADDR, HI BYTE INDICATES @XM05671
*                                  NO WAIT TO BE PERFORMED     @XM05671
         L     R4,TOTAVTPT        ADDR TCAM AVT                @XM05671
         L     R15,RESPLRVT       ADDR OF POSTWAIT ROUTINE     @XM05671
         BALR  R14,R15            POST ELMT TO OP CTL          @XM05671
CHKOPEND DS    0H                 END OF LOOP                  @XM05671
         LR    R2,R8              SET BASE WITH LINK ADDRESS   @XM05671
         B     CHKOPCTL           GO TO TOP OF LOOP            @XM05671
         DROP  R2                                              @XM05671
*                                                              @XM05671
BLKCHK   DS    0H                                              @XM05671
         LR    R2,R6              RESTORE OLTCB ADDRESS
         DROP  R6
         USING TOTOBPTR,R2        SET UP ADDRESSIBILITY FOR OLTCB
         SR    R3,R3              CLEAR REGISTER 3
         LH    R3,RESBKTOT        GET CORE AVAILABLE PARAMETER
         L     R7,TOTUSCOR        GET TOTAL BYTES OF CORE IN USE S22024
         SR    R6,R6              CLEAR REGISTER 6               S22024
         D     R6,K1024           GET NUMBER OF 1K BLOCKS        S22024
         LTR   R6,R6              WAS THERE A REMAINDER?         S22024
         BZ    NOADD              NO, NO UPDATE REQUIRED         S22024
         LA    R6,D1              SET R6 TO ONE                  S22024
         AR    R7,R6              ADD ONE TO TOTAL 1K BLOCKS     S22024
NOADD    EQU   *                                                 S22024
         LA    R6,D8              GET MAXIMUM OLT SIZE (DEFAULT) S22024
         CR    R7,R6              WAS MORE THAN DEFAULT USED?    S22024
         BNH   REST1              NO, RESTORE TOTAL BLOCKS USED  S22024
         AR    R3,R7              ADD USED CORE TO TOTAL BLOCKS  S22024
         B     REST2              BRANCH AROUND DEFAULT UPDATE   S22024
REST1    EQU   *                                                 S22024
         AH    R3,TOTBKASN        ADD THE CORE ASSIGNED TO ENDED OLT
REST2    EQU   *                                                 S22024
         AH    R3,OLTCBSZ         ADD THE CORE ASSIGNED TO ENDED OLTCB
         STC   R3,RESBKTOT+D1     STORE NEW CORE AVAILABLE PARAMETER
         L     R15,RESREMEL       GET QUEUE HANDLER ADDRESS AND
         BALR  R10,R15              GO REMOVE ELEMENT FROM QUEUE
QPULLRET EQU   *
*        DELETE PAGE FREEING OF OLTCB -- NOT NEEDED IN MVS     @ZM46680
         LR    R1,R2              SET UP R1 FOR FREEMAIN
         LA    R0,L'TOTSERV+(TOTOBEND-TOTOBPTR) GET OLTCB LEN  @Y17XAUU
         FREEMAIN R,LV=(0),A=(1)     ADR IS IN R1 -- FREE OLTCB CORE
         BR    R9                 RETURN TO CALLER
         EJECT
FREETNT  EQU   *
*
*         REGISTER R6 POINTS TO OLTCB
*         REGISTER R7 POINTS TO DEVICE ENTRY
*         REGISTER R8 IS LINK REGISTER
*         REGISTER R9 IS RESERVED LINKAGE REGISTER
*
         USING TOTOBPTR,R6
         USING ENT,R7
*
*        FREE TOTE TERMINAL NAME TABLE ENTRY
*
         TM    ENTFLAG1,ENTTTASN  WAS TOTE TNT ENTRY ASSIGNED?
         BZ    D0(R8)             NO, RETURN
         L     R3,ENTTNTAD        GET TNT ENTRY ADDRESS
         SR    R5,R5              GET TNT ENTRY
         IC    R5,TOTTTBEL          NAME FIELD LENGTH
         LA    R5,D0(R3,R5)       GET ADDR OF TTE ADDR FIELD
         MVC   WBWORK01+D1(TNTADRLN),D0(R5)  SAVE TOTE TTE POINTER
         MVC   D0(D2,R5),ENTTTOFF SAVE TNT ENTRY OFFSET IN
*                                   TTE ADDRESS FIELD
         USING DUMTNTE,R3
         NI    DTNTFLGS,XFF-DTNTASSN  FREE TNT ENTRY
         DROP  R3
*
*        SET UP EXTENDED AREA BLOCK TO FREE IT
*
         L     R2,WBWORK01        GET EXTENDED AREA ADDRESS
         LA    R5,IEDQTRM-IEDTRM  SET TTE PREFIX SIZE          @YM09003
         SLR   R2,R5              POINT TO START OF EXTENDED A @YM09003
         LA    R2,D0(R2)          CLEAR HIGH ORDER BYTE
*                                   FOR COMPARE
         USING QEL,R2
         MVC   QELSIZE(D2),ENTEABLN  MOVE SIZE INTO EXTENDED AREA
*                                      BLOCK
         LA    R5,RESEFQCB        GET QCB ADDRESS
         ST    R5,QELQCB-D1         AND SAVE IN EXTENDED AREA
*                                   BLOCK
         MVI   QELKEY,EXAFQKEY    SET KEY IN EXTENDED AREA BLOCK
         DROP  R2
         DROP  R7
*
*        FIND CORRECT LOCATION IN QUEUE TO ADD FREED BLOCK
*
*        REGISTER R2 POINTS TO EXTENDED AREA BLOCK TO BE FREED
*        REGISTER R6 POINTS TO OLTCB
*        REGISTER R8 IS RESERVED LINK REGISTER
*        REGISTER R9 IS RESERVED LINK REGISTER
*
         SR    R7,R7              SET INDICATOR FOR NO PREVIOUS
*                                   BLOCK
         LA    R1,RESEFQCB        GET ADDRESS OF QCB
FTNT020  EQU   *
         USING TQCB,R1
         L     R3,TQCBLINK-D1     GET ADDRESS OF NEXT ELEMENT
*                                   IN QUEUE
         LA    R3,D0(R3)          CLEAR HIGH ORDER BYTE
*                                   FOR COMPARE
         USING QEL,R3
         CLI   QELKEY,QENDKEY     IS THIS END OF QUEUE?
         BE    FTNT030            YES, BRANCH
         CR    R2,R3              IS THIS CORRECT LOCATION IN
*                                   QUEUE FOR INSERT?
         BL    FTNT030            YES, BRANCH
         LR    R7,R3              NO, SAVE ADDRESS OF ELEMENT EXAMINED
         LA    R1,QELLINK-D1      GET ADDRESS OF NEXT QUEUE ELEMENT
         B     FTNT020            BRANCH BACK AND TRY AGAIN
         DROP  R1
         DROP  R3
FTNT030  EQU   *
*
*        MERGE NEW ELEMENT WITH PREVIOUS ELEMENT
*             IF THEY ARE CONTIGUOUS
*
*        REGISTER R2 POINTS TO NEW ELEMENT
*        REGISTER R3 POINTS TO NEXT ELEMENT
*        REGISTER R7 POINTS TO PREVIOUS ELEMENT
*
         LTR   R7,R7              WAS THERE A PREVIOUS ELEMENT?
         BZ    FTNT040            NO, BRANCH
         USING QEL,R7
         LR    R5,R7              GET ADDRESS OF END
         AH    R5,QELSIZE           OF PREVIOUS ELEMENT
         CR    R2,R5              IS NEW ELEMENT CONTIGUOUS TO
*                                   PREVIOUS ONE?
         BNE   FTNT040            NO, BRANCH
         LH    R5,QELSIZE         CALCULATE SIZE
         DROP  R7
         USING QEL,R2
         AH    R5,QELSIZE           OF MERGED BLOCK
         DROP  R2
         USING QEL,R7
         STH   R5,QELSIZE           AND STORE IN SIZE FIELD
         DROP  R7
         LR    R2,R7              POINT R2 TO MERGED BLOCK
         B     FTNT050            GO CHECK IF MERGED BLOCK IS
*                                   CONTIGUOUS TO NEXT ONE
FTNT040  EQU   *
*
*        REGISTER R1 POINTS TO PREVIOUS LINK FIELD
*
         LR    R7,R3              SAVE CONTENTS OF REGISTER R3
         L     R15,RESADDAF       GET QUEUE HANDLER ADDRESS AND
         BALR  R10,R15              ADD FREED BLOCK TO QUEUE
         LR    R3,R7              RESTORE REGISTER R3
FTNT050  EQU   *
*
*        MERGE FREED BLOCK WITH NEXT ONE IF THEY ARE CONTIGUOUS
*
*        REGISTER R2 POINTS TO FREED ELEMENT
*        REGISTER R3 POINTS TO NEXT ELEMENT
*        REGISTER R6 POINTS TO OLTCB
*
         USING QEL,R3
         CLI   QELKEY,QENDKEY     IS FREED ELEMENT AT END OF QUEUE?
         BE    D0(R8)             YES, RETURN
         DROP  R3
         LR    R5,R2              CALCULATE END OF
         USING QEL,R5
         AH    R2,QELSIZE           FREED BLOCK
         CR    R2,R3              IS FREED BLOCK CONTIGUOUS TO
*                                   NEXT BLOCK?
         BNE   D0(R8)             NO, RETURN
         L     R15,RESREMEL       GET QUEUE HANDLER ADDRESS
         BALR  R10,R15              AND REMOVE NEXT ELEMENT
*                                   FROM QUEUE
         LH    R7,QELSIZE         CALCULATE SIZE
         DROP  R5
         USING QEL,R3
         AH    R7,QELSIZE           OF MERGED BLOCK
         DROP  R3
         USING QEL,R5
         STH   R7,QELSIZE         STORE SIZE OF MERGED BLOCK
*                                   IN SIZE FIELD
         DROP  R5
         BR    R8                 RETURN TO CALLER
         DROP  R6
         EJECT
***********************************************************************
*        FUNCTION 4 - SERVICE TNT REQUEST, ASSIGN MAIN STORAGE TO     *
*                     SUBTASK, AND DISPATCH OLT                       *
*                                                                     *
***********************************************************************
FUNCT4   EQU   *
         USING TOTOBPTR,R2        SET UP ADDRESSIBILITY FOR OLTCB
         TM    TOTFLG10,TOTOLTED  IS OLT SUBTASK ENDED?
         BO    FUNCT3             YES, GO CLEAN UP
         TM    TOTFLG10,TOTTNTRQ  IS REQUEST FOR TNT ENTRIES?
         BZ    FUN420             NO, BYPASS TNT SERVICE ROUTINE
*
*        SERVICE TNT ENTRY REQUEST
*
         LR    R5,R2              SAVE REQUESTING OLTCB ADDR
         DROP  R2
         USING TOTOBPTR,R5
         CLI   RESTNTCT,ZEROEQ    WERE ANY TNT ENTRIES ALLOCATED?
         BE    FUN4192            NO, GO TO ERROR RETURN
         LA    R6,RQTNT           GET ADDR OF FIRST REQUEST
*                                   ELEMENT ENTRY
         USING RQTNTENT,R6
         TM    RQTNTTYP,RQTYPANY  IS ANY TERMINAL SPECIFIED IN
*                                   REQUEST ELEMENT ENTRY?
         BZ    FUN4192            NO, GO TO ERROR RETURN
         LA    R7,EXAMINSZ        IS SIZE OF REQUESTED EXTENDED
         CH    R7,RQTNTLNT          AREA BLOCK SUFFICIENT?
         BH    FUN4192            NO, GO TO ERROR RETURN
FUN410   EQU   *
         L     R7,RESTNTPT-D1     GET ADDRESS OF FIRST TOTE
*                                   TNT ENTRY
FUN411   EQU   *
         USING DUMTNTE,R7
         LA    R7,D0(R7)          CLEAR HIGH ORDER BYTE FOR COMPARE
         TM    DTNTFLGS,DTNTASSN  IS ENTRY ALREADY ASSIGNED?
         BZ    FUN412             NO, BRANCH
         C     R7,RESTTLST        IS IT THE LAST ENTRY?
         BE    FUN4192            YES, GO TO ERROR RETURN
         L     R8,AVTRNMPT        GET TERMINAL NAME TABLE ADDR
         USING IEDQTNTD,R8
         SR    R9,R9              GET LENGTH OF NAME FIELD
         IC    R9,TNTENLEN          IN TERMINAL NAME TABLE ENTRY
         DROP  R8
         LA    R7,TNTADRLN(R9,R7) GET ADDR OF NEXT ENTRY
         B     FUN411               AND TRY IT
FUN412   EQU   *
         ST    R7,WBWORK01        SAVE ASSIGNED TNT
*                                   ENTRY POINTER
*
*        REGISTER R6 CONTAINS THE ADDRESS OF THE CURRENT REQUEST
*             ELEMENT ENTRY
*
*
*        GET EXTENDED AREA BLOCK
*
         LH    R7,RQTNTLNT        GET REQUESTED EXTENDED AREA
*                                   BLOCK LENGTH
         TM    RQTNTLNT+D1,THREEEQU  IS LENGTH INTEGRAL MULTIPLE
*                                      OF FOUR?
         BZ    FUN4142            YES, BRANCH
         SRL   R7,D2              NO, ROUND UP
         LA    R7,D1(R7)            TO INTEGRAL MULTIPLE
         SLL   R7,D2                OF FOUR
FUN4142  EQU   *
         LA    R1,RESEFQCB        GET EXTENDED AREA FREE
*                                   QUEUE POINTER
FUN4143  EQU   *
         USING TQCB,R1
         L     R2,TQCBLINK-D1     GET NEXT QUEUE ELEMENT
         USING QEL,R2
         CLI   QELKEY,QENDKEY     WAS THERE ANOTHER ELEMENT?
         BE    FUN4192            NO, GO TO ERROR RETURN
         CH    R7,QELSIZE         IS IT LARGE ENOUGH?
         BNH   FUN4144            YES, BRANCH
         LA    R1,QELLINK-D1      NO, GET NEXT ELEMENT IN QUEUE
         B     FUN4143            BRANCH BACK AND EXAMINE THE NEXT
*                                   ELEMENT
         DROP  R2
FUN4144  EQU   *
         USING QEL,R2
         L     R15,RESREMEL       GET QUEUE HANDLER ADDRESS AND
         BALR  R10,R15              AND REMOVE ELEMENT
*                                   FROM QUEUE
         LA    R8,EXAMINSZ(R7)    ADD MINIMUM EXTENDED
*                                   AREA BLOCK SIZE
*                                   TO REQUIRED SIZE
         LH    R9,QELSIZE         GET SIZE OF FREE BLOCK
         SR    R9,R8              IS ENOUGH OF THE BLOCK LEFT TO
*                                   FORM ANOTHER FREE BLOCK?
         BM    FUN4146            NO, BRANCH
*                                 YES, CONTINUE
         LR    R8,R2              SAVE ADDRESS OF ELEMENT
         AR    R2,R7              GET ADDRESS OF NEW ELEMENT
         LA    R9,EXAMINSZ(R9)    GET SIZE OF NEW ELEMENT
         STH   R9,QELSIZE         SAVE SIZE OF NEW ELEMENT
         LA    R9,RESEFQCB        PUT QCB ADDRESS
         ST    R9,QELQCB-D1         IN NEW ELEMENT
         MVI   QELKEY,EXAFQKEY    SAVE KEY IN NEW ELEMENT
         L     R15,RESADDAF       GET QUEUE HANDLER ADDRESS AND
         BALR  R10,R15              ADD ELEMENT TO QUEUE
         LR    R2,R8              RESTORE ASSIGNED ELEMENT ADDR
         B     FUN4158            BRANCH
FUN4146  EQU   *
         LH    R7,QELSIZE         GET ASSIGNED BLOCK SIZE
FUN4158  EQU   *
         LR    R0,R7              PUT BLOCK SIZE IN REGISTER R0
         BAL   R10,BLKCLEAR         AND GO CLEAR IT TO ZEROS
         L     R8,AVTRNMPT        GET TNT ADDR
         USING IEDQTNTD,R8
         SR    R9,R9              GET ENTRY NAME
         IC    R9,TNTENLEN          LENGTH
         DROP  R8
         L     R8,WBWORK01        GET TNT ENTRY ADDRESS
         USING DUMTNTE,R8
         LA    R9,D0(R9,R8)       GET POINTER TO ADDRESS FIELD
*                                   OF ASSIGNED TNT ENTRY
         MVC   WBWORK01+D4(D2),D0(R9)  ALLIGN TNT ENTRY OFFSET
         LH    R10,WBWORK01+D4           AND LOAD INTO REGISTER 10
         ST    R2,WBWORK01        MOVE ADDR OF EXTENDED AREA
         MVC   D0(TNTADRLN,R9),WBWORK01+D1  BLOCK INTO TNT ENTRY
         LA    R7,TOTCTENT        GET ADDRESS OF C.T. PARMS    @Y17XAUU
         TM    RQTNTTYP,RQTNTCT   IS REQUEST FOR CONTROL TERMINAL?
         BO    FUN4170            YES, BRANCH
         LA    R7,TOTAPENT        GET ADDRESS OF A.P. PARMS    @Y17XAUU
         TM    RQTNTTYP,RQTNTAP   IS REQUEST FOR ALTERNATE PRINTER?
         BO    FUN4170            YES, BRANCH
         TM    RQTNTTYP,RQTNTPR   IS REQUEST FOR PRIMARY TEST DEVICE?
         BZ    FUN4160            NO, THEN IT IS A REQUEST FOR
*                                   A SECONDARY ENTRY
         LA    R7,TOTPRENT        GET ADDRESS OF PRIMARY PARMS @Y17XAUU
         OI    TOTPRFLG,TOTPRTAS  SET PRIMARY TNT ENTRY        @Y17XAUU
*                                   ASSIGNED FLAG
         B     FUN4170            GO ASSIGN ENTRY
FUN4160  EQU   *
         LA    R7,TOTSCENT        GET ADDRESS OF SECONDARY PARM@Y17XAUU
         OI    TOTSCFLG,TOTSCTAS  SET SECONDARY TNT ENTRY      @Y17XAUU
*                                   ASSIGNED FLAG
FUN4170  EQU   *
         USING ENT,R7                                          @YM07418
         ST    R8,ENTTNTAD        SAVE ADDRESS OF TNT ENTRY
         MVC   ENTEABLN(D2),RQTNTLNT SAVE LEN OF ASSIGNED      @YM09003
*                                   EXTENDED AREA BLOCK
         STH   R10,ENTTTOFF       SAVE TNT ENTRY OFFSET
         OI    ENTFLAG1,ENTTTASN  SET ASSIGNED FLAG IN
*                                   DEVICE ENTRY
         OI    DTNTFLGS,DTNTASSN  SET ASSIGNED FLAGS IN TNT
*                                   ENTRY
         MVI   RQQTYPE,COUNTER    SET COUNTERFEIT REQUEST      @Y17XAUU
         LR    R6,R5              SET OLTCB BASE               @Y17XAUU
         BAL   R14,RVTNAT         CHECK RVT/NAT COUNTERFEITING @Y17XAUU
         DROP  R7                                              @YM07418
         DROP  R2
         TM    RQTNTFGS,RQTNTLST  IS THIS THE LAST ENTRY?
         BO    FUN4194            YES, BRANCH
         LA    R6,RQTENLEN(R6)    GET NEXT REQUEST ELEMENT FIELD
         DROP  R6
         B     FUN410             LOOP IF MORE ENTRIES
FUN4192  EQU   *
         MVI   RQTNT,RQTNTERR     SET ERROR RETURN CODE
FUN4194  EQU   *
         NI    TOTFLG10,XFF-TOTTNTRQ  CLEAR TNT REQUEST FLAG
         DROP  R5
         DROP  R8
         LR    R2,R5              RESTORE CURRENT ENTRY POINTER
         B     FUN480             RETURN
*
*        ASSIGN MAIN STORAGE TO SUBTASK
*
FUN420   EQU   *
         USING TOTOBPTR,R2        SET UP ADDRESSIBILITY FOR OLTCB
         LH    R3,RESBKTOT        GET CORE AVAILABLE PARAMETER
         AH    R3,TOTBKASN        UPDATE WITH CORE ASSIGNED PARAMETER
         STH   R3,RESBKTOT        STORE IN CORE AVAILABLE FIELD
         XC    TOTBKASN(D2),TOTBKASN  CLEAR CORE BLOCKS ASSIGNED PARM
         SH    R3,TOTBKRQD        SUBTRACT AMOUNT REQUIRED
         BM    RETURN2            BRANCH IF NOT ENOUGH CORE
         STH   R3,RESBKTOT        UPDATE CORE AVAILABLE PARM
         LH    R3,TOTBKRQD        GET NO. OF BLOCKS REQUIRED
         STH   R3,TOTBKASN        ASSIGN REQUIRED CORE TO OLT -
         SLL   R3,D10             CONVERT TO NUMBER OF BYTES
         ST    R3,TOTMMSPC        SAVE RESULT IN OLTCB
         NI    TOTFLG10,XFF-TOTOLTWT  CLEAR OLT WAITING FOR CORE FLAG
*
*        DISPATCH OLT
*
         LA    R1,TOTOLTPL        GET PARAMETERS FOR TRM ANALYSIS
         LA    R3,TOTOLTCB        GET ADDRESS OF OLTCB AND SCT   S22024
         ST    R3,TOTOLTPL        PUT SCT ADDRESS IN OLTCB       S22024
*
         TM    TOTFLG10,TOTOLTRS  IS OLT RESTART REQUESTED?
         BZ    RES052             NO, BRANCH AROUND POST
         NI    TOTFLG10,XFF-TOTOLTRS  CLEAR OLT RESTART FLAG
FUN480   EQU   *
         POST  TOTOTECB           POST OLT TO INDICATE ADDITIONAL      X
                                    CORE ASSIGNED
         B     RETURN             RETURN TO CALLER
RES052   EQU   *
         LA    R2,TOTOLTCB        SET UP OLTCB ADDR FOR SUBTASK  S22024
         USING TOTOLTCB,R2        SET UP ADDRESSIBILITY FOR OLTCBS22024
         MVC   ATTLIST+D21(D3),RESETXRA+D1  MOVE EXIT ADDR TO ATTACH
*                                          PARAMETER LIST
         ATTACH SF=(E,ATTLIST)    ATTACH IEDQWB1- TRM ANALYSIS MODULE
         LTR   R15,R15                  DID ATTACH COMPLETE?   @YA10453
         BNZ   FREECORE                   NO, MOD NOT ATTACHED @YA10453
         MVC   CNAME+D5(D2),CHARB1  RESTORE ATTACH MODULE NAME
         ST    R1,TOTTCBAD        SAVE TCB ADDRESS
         B     RETURN             RETURN TO CALLER
         DROP  R2
         EJECT
***********************************************************************
*                                                                     *
*        FUNCTION 5 - INITILIZE THE OLTCB                             *
*                                                                     *
***********************************************************************
FUNCT5   EQU   *
         LA    R0,L'TOTSERV+(TOTOBEND-TOTOBPTR) GET OLTCB LEN  @Y17XAUU
         GETMAIN R,LV=(0)            GET CORE FOR OLTCB
         LR    R2,R1              SAVE ADDRESS OF OLTCB
         USING TOTOBPTR,R2
*        DELETE PAGE FIXING OF OLTCB -- NOT NEEDED IN MVS      @ZM46680
         LA    R0,L'TOTSERV+(TOTOBEND-TOTOBPTR) GET OLTCB LEN  @Y17XAUU
         BAL   R10,BLKCLEAR       CLEAR OLTCB
         LA    R15,RESOBQCB       PUT ADDRESS OF OLTCB QCB
         ST    R15,TOTELQCB-D1      IN OLTCB
         MVI   TOTELKEY,OLTCBKEY  SET OLTCB ELEMENT KEY
         ST    R4,TOTAVTPT     SAVE AVT ADDRESS
         LH    R10,RESBKTOT       GET TOTAL CORE BLOCKS AVAILABLE
         SH    R10,OLTCBSZ        SUBTRACT OLTCB SIZE
         STH   R10,RESBKTOT       UPDATE TOTAL BLOCKS AVAILABLE PARM
*
*        GET IDENTIFICATION FOR NEW OLT
*
         LA    R5,D1              INITIALIZE I.D. REGISTER
RES0762  EQU   *
         L     R7,RESOBQCB        GET FIRST OLTCB QUEUE ELEMENT
RES0764  EQU   *
         CVD   R5,WBWORK01        CONVERT NEW I.D. TO DECIMAL
         UNPK  TOTOLTID(D2),WBWORK01(D8)  UNPACK NEW I.D.
         OI    TOTOLTID+D1,XF0    SET SIGN OF ID TO F
         DROP  R2
         USING TOTOBPTR,R7        SET UP ADDRESSIBILITY FOR OLTCB
         CLI   TOTELKEY,QENDKEY   IS THIS THE END OF QUEUE?
         BE    RES0768            YES, BRANCH
         CLI   TOTOLTID,D0        HAS ID BEEN ASSIGNED?
         BE    RES0766            NO, BRANCH
         DROP  R7
         USING TOTOBPTR,R2        SET UP ADDRESSIBILITY FOR OLTCB
         CLC   TOTOLTID(D2),TOTOLTID-TOTOBPTR(R7)  ARE SUBTASK I.D.S
*                                                    EQUAL?
         BNE   RES0766            NO, BRANCH
         LA    R5,D1(R5)          YES, GET NEXT HIGHER I.D.
         B     RES0762            GO SEE IF IT IS ALREADY ASSIGNED
RES0766  EQU   *
         DROP  R2
         USING TOTOBPTR,R7
         L     R7,TOTELLNK-D1     GET NEXT QUEUE ELEMENT
         DROP  R7
         B     RES0764            SEE IF IT HAS NEW I.D.
RES0768  EQU   *
         USING TOTOBPTR,R2        SET UP ADDRESSIBILITY FOR OLTCB
         L     R15,RESADDND       GET QUEUE HANDLER ADDRESS AND
         BALR  R10,R15              ADD OLTCB TO END OF QUEUE
*
         MVI   TOTBKRQD+D1,SUBTRNSZ  PUT SUBTASK TRANSIENT AREA
*                                      SIZE DEFAULT IN OLTCB
         OI    TOTFLG10,TOTOLTWT  SET OLT WAITING FOR CORE FLAG
         LA    R7,RES#TBLE        SET UP PARAMETER LIST
         ST    R7,TOT#TBLE          FOR OLT'S
         LA    R1,RESPL           GET ADDRESS OF TOTE RESIDENT PARMS
         ST    R1,TOTRESPL          AND STORE IN OLTCB
         LA    R7,TOTOLTMQ        GET ADDRESS OF OLT MESSAGE QCB
         L     R9,RESTRMQ         GET FIRST TRM QUEUE ELEMENT
         USING IEDQPRF,R9
         LA    R8,PRFSUNIT        GET START OF UNIT
         AH    R8,PRFSCAN           ADD DISPLACEMENT FROM
*                                   SCAN POINTER
         OC    D0(D8,R8),UPPER    CONVERT NAME TO UPPER CASE
         MVC   TOTCTNAM(D9),D0(R8)  MOVE CONTROL TERMINAL NAME INTO
*                                     THE OLTCB
         LA    R5,RES#TBLE        GET BRANCH TABLE ADDRESS
         ST    R5,$TABLE            AND STORE IN SCT
         MVC   TOTSTAE(D4),RESSTAEA  MOVE STAE EXIT ROUTINE      S22024
*                                         ADDRESS INTO OLTCB     S22024
         L     R15,AVTRNMPT       GET TERMNAME TABLE ADDRESS
         USING IEDQTNTD,R15       SET UP ADDRESSIBILITY FOR TERMNAME
*                                   TABLE
         MVC   TOTTTBEL(D1),TNTENLEN  PICK UP MAX. LENGTH OF NAME FIELD
         TM    RESAPOPN,SUCCESS   SUCCESSFUL OPEN OF DIAGMSG     S21903
*                                   DCB?                         S21903
         BNO   FUN575             NO, DON'T DAVE ADDRESS OF DCB  S21903
         LA    R8,RESAPDCB        GET DCB ADDRESS                S21903
         ST    R8,TOTAPDCB        SAVE DCB ADDRESS IN OLTCB      S21903
         DROP  R15
         DROP  R9
         DROP  R2
FUN575   EQU   *
         LA    R1,RESTRMQ         REMOVE FIRST ELEMENT
         L     R15,RESREMFR         FROM TOTE
         BALR  R10,R15              TRM QUEUE
         LTR   R1,R1              WAS QUEUE EMPTY?
         BNP   FUN59              YES, BRANCH
         USING IEDQPRF,R2         SET UP ADDRESSABILITY FOR BUFFER
*                                   PREFIX
         IC    R8,PRFKEY          SAVE PREFIX KEY
         ST    R7,PRFQCBA-D1      PUT OLT MESSAGE QCB ADDRESS
*                                   IN ELEMENT
         STC   R8,PRFKEY          RESTORE PREFIX KEY
         L     R15,RESADDND       GET QUEUE HANDLER ADDRESS AND
         BALR  R10,R15              ADD ELEMENT TO END OF OLT
*                                   MESSAGE QUEUE
FUN59    EQU   *
         B     RETURN             RETURN TO CALLER
         DROP  R2
         EJECT
***********************************************************************
*                                                                     *
*        FUNCTION 6 - OLT ABEND CLEANUP ROUTINE                       *
*                                                                     *
***********************************************************************
*                                                                A41582
FUNCT6   EQU   *                                                 A41582
         USING TOTOBPTR,R2
         L     R7,TOTCMPCD        GET ABEND CODE
         SLL   R7,D8              ELIMINATE HIGH ORDER BYTE      A41582
         LA    R10,D6             GET COUNT FOR CONVERT          A41582
         LA    R9,ABCODE          GET ADDRESS IN MESSAGE         A41582
FUN605   EQU   *                                                 A41582
         SR    R6,R6              CLEAR WORK REGISTER            A41582
         SLDL  R6,D4              GET NEXT HEX CHARACTER         A41582
         IC    R6,CNVTBL(R6)      CONVERT TO EBCDIC              A41582
         STC   R6,D0(R9)          SAVE IN MESSAGE                A41582
         LA    R9,D1(R9)          GET MESSAGE ADDR FOR NEXT CHAR A41582
         BCT   R10,FUN605         LOOP TILL ALL CHARACTERS       A41582
*                                   CONVERTED                    A41582
         MVC   ABID(D2),TOTOLTID  MOVE OLT I.D. TO ABEND MESSAGE
         CNOP  0,4                                               A41582
ABMSG    WTO   'IED284I OLT    ABEND       ',ROUTCDE=10,DESC=7
ABID     EQU   ABMSG+20           OLT ID NUMBER                  S21903
ABCODE   EQU   ABMSG+29           OLT ABEND CODE                 S21903
         TM    TOTFLG06,TOTABEND  DID SUBTASK PREVIOUSLY ABEND?
         BO    FUN33              YES,GO CLEAN UP SUBTASK
         OI    TOTFLG06,TOTABEND+TOTOTERM  NO SET ABEND FLAG
         XC    TOTCMPCD(D4),TOTCMPCD  CLEAR SUBTASK COMPLETION
*                                       CODE IN OLTCB
         MVC   CNAME+D5(D2),CHARE SET ATTACH MODULE NAME
*                                   TO IEDQWE
         B     RES052             GO TO IEDQWE TO CLEAN UP
         DROP  R2
         EJECT
***********************************************************************
*                                                                     *
*                  TIMER COMPLETION ROUTINE                           *
*                                                                     *
***********************************************************************
TIMEREND EQU   *
         USING TIMEREND,R15
         STM   R14,R12,D12(R13)   SAVE REGISTERS
         OI    WBFLAGS,TIMEEND    SET TIMER CONPLETION FLAG
         L     R10,REGSAVE+D4     GET RESIDENT MODULE SAVE AREA
         L     R10,D24(R10)       GET ADDRESS OF RESIDENT PARAMETERS
         USING RESPL,R10
         POST  RESTECB1           POST WAIT COMPLETE             S22024
         DROP  R10
         DROP  R15
         LM    R14,R12,D12(R13)   RESTORE REGISTERS
         BR    R14                RETURN
         EJECT
***********************************************************************
*                                                                     *
*        CLEAR BLOCK OF MAIN STORAGE                                  *
*             REGISTER R0 CONTAINS LENGTH OF BLOCK TO CLEAR           *
*             REGISTER R2 CONTAINS BLOCK ADDRESS                      *
*                                                                     *
***********************************************************************
BLKCLEAR EQU   *
         LR    R14,R0             BACKUP COUNT REGISTER
         LR    R15,R2             BACKUP POINTER REGISTER
         LA    R1,D256            GET LENGTH FOR EXECUTE
CLR010   EQU   *
         CR    R14,R1             IS REMAINDER 256 BYTES OR LONGER?
         BH    CLR020             YES, CLEAR 256 BYTES
         LR    R1,R14             NO, CLEAR REMAINDER
CLR020   EQU   *
         BCTR  R1,D0              DECREMENT COUNT FOR EXECUTE
         EX    R1,CLR099          CLEAR NEXT SEGMENT
         LA    R1,D1(R1)          RESTORE COUNT
         CR    R14,R1             IS CLEAR COMPLETED?
         BNH   D0(R10)            YES, RETURN TO CALLER
         SR    R14,R1             NO, UPDATE REMAINDER
         AR    R15,R1             GET NEXT SEGMENT ADDRESS
         B     CLR010             GO CLEAR NEXT SEGMENT
*
CLR099   XC    D0(D0,R15),D0(R15) CLEAR FOR EXECUTE INSTRUCTION
         EJECT
***********************************************************************
*                                                                     *
*   NOT ENOUGH CORE FOR ATTACH MACRO TO BRING IN ANOTHER      @YA10453*
*     MODULE OR NOT ENOUGH FIXED CORE FOR OPERATOR CONTROL    @YA10453*
*     REQUEST, THEREFORE THE TRM CANNOT BE HONORED AT THIS    @YA10453*
*     TIME.                                                   @YA10453*
*                                                                     *
***********************************************************************
FREECORE EQU   *                                               @YA10453
         LH    R10,RESBKTOT             GET TOTAL CORE BLCKS   @YA10453
         AH    R10,OLTCBSZ              ADD OLTCB SIZE         @YA10453
         STH   R10,RESBKTOT             UPDATE TOTAL BLOCKS    @YA10453
*                                         AVAILABLE PARM       @YA10453
         L     R15,RESREMEL             GET ADDR TO REMOVE     @YA10453
*                                         ELEM. FROM QUEUE     @YA10453
         BALR  R10,R15                  TAKE OLTCB OFF QUEUE   @YA10453
         MVC   FREE1+D28(D8),CNAME      MOVE IN MODNAME THAT   @YA10453
*                                         ATTACH FAILED ON     @YA10453
         MVC   CNAME+D5(D2),CHARB1      RESTORE ATTACH MODNAME @YA10453
FREE1    WTO   'IED330I OLT MODULE          CANNOT BE LOADED',         *
               ROUTCDE=10,DESC=7                               @YA10453
         B     FREECOR2                 GO FREE OLTCB CORE     @YA10453
         SPACE
NOFIXCOR EQU   *                                               @YA10453
         WTO   'IED276I OLT REQUEST REJECTED, UNABLE TO GET FIXED CORE *
               FOR OPERATOR CONTROL REQUEST',ROUTCDE=10,DESC=7 @YA10453
         SPACE
FREECOR2 EQU   *
         LR    R1,R2                    SET UP R1 FOR FREEMAIN @YA10453
         LA    R0,L'TOTSERV+(TOTOBEND-TOTOBPTR) GET OLTCB LEN  @Y17XAUU
         FREEMAIN  R,LV=(0),A=(1)       FREE OLTCB CORE        @YA10453
         LA    R15,TCAMRET              DIRECT IEDQWA TO RTN   @YA10453
         B     RETURN1                  RETURN TO IEDQWA       @YA10453
         EJECT
RVTNAT   DS    0H                 ROUTINE TO COUNTERFEIT OR    @Y17XAUU
*                                 CLEAN UP RVT AND NAT ENTRIES @Y17XAUU
*                                                              @Y17XAUU
*        IF 3705 MODE, SET UP TO COUNTERFEIT RVT AND           @Y17XAUU
*        NAT ENTRIES                                           @Y17XAUU
*                                                              @Y17XAUU
         USING TOTOBPTR,R6        SET OLTCB ADDRESSABILITY     @Y17XAUU
         USING ENT,R7             SET ADDRESSABILITY           @Y17XAUU
         ST    R14,RETSAVE        SAVE RETURN ADDRESS          @Y17XAUU
         L     R1,ENTTNTRL        GET TNT ADDRESS              @Y17XAUU
         SLR   R4,R4              CLEAR REG                    @Y17XAUU
         IC    R4,TOTTTBEL        GET MAX NAME LENGTH          @Y17XAUU
         AR    R1,R4              POINT TO TTE ADDRESS         @Y17XAUU
         ICM   R1,ADRMSK,D0(R1)   GET TTE ADDRESS              @Y17XAUU
         USING IEDQTRM,R1         SET TTE ADDRESSABILITY       @Y17XAUU
         TM    TRMSTATE,TRMPREF   3705 RESOURCE                @Y17XAUU
         BZ    FUNRVTE            NO                           @Y17XAUU
         DROP  R1                                              @Y17XAUU
         LA    R0,TOTWAWRK        POINT TO QWA WORK AREA       @Y17XAUU
         LA    R1,D1              REQUEST ONE BUFFER           @Y17XAUU
         L     R4,TOTAVTPT        GET AVT ADDRESS              @Y17XAUU
         L     R15,RESABUF        ADDRESS OF BUFFER REQ RTN    @Y17XAUU
         LA    R13,REGSAVE2       SET SAVE AREA FOR ALLOCBUF   @YM07351
         BALR  R14,R15            GO REQUEST A BUFFER          @Y17XAUU
         LA    R13,REGSAVE        RESTORE MY SAVE AREA ADDR    @YM07351
         SPACE
*        SET UP BUFFER TO SEND TO POST/WAIT ROUTINE IN QWA     @Y17XAUU
         USING IEDREQD,R1         SET REQ ADDRESSABILITY       @Y17XAUU
         XC    IEDREQD(REQLEN),IEDREQD CLEAR BASIC PORTION     @Y17XAUU
*                                 OF REQUEST ELEMENT           @Y17XAUU
         LA    R15,QWBSYNCH       GET SYNCH QCB ADDRESS        @YM07770
         STCM  R15,ADRMSK,REQQCBA PUT IT IN ELEMENT            @Y17XAUU
         MVI   REQPRI,PRISSOLT    SET POST PRIORITY            @Y17XAUU
         MVI   REQRPRI,PRISSOLT   SET RETURN PRIORITY          @Y17XAUU
         ST    R7,REQDATA         SAVE DEVICE ENTRY CONTROL    @Y17XAUU
*                                 AREA ADDRESS                 @Y17XAUU
         CLI   RQQTYPE,D0         CLEAN UP REQUEST             @Y17XAUU
         BNE   RES00              NO                           @Y17XAUU
         MVI   REQDATA,D0         SHOW CLEANUP REQUEST         @Y17XAUU
         B     RES05              CONTINUE                     @Y17XAUU
RES00    EQU   *                                               @Y17XAUU
         MVI   REQDATA,XFF        INDICATE COUNTERFEIT REQ     @Y17XAUU
         SPACE
RES05    EQU   *                                               @Y17XAUU
*        SET UP TO PASS ELEMENT TO POST/WAIT ROUTINE IN QWA    @Y17XAUU
         LA    R0,TOTWAWRK        POINT TO QWA WORK AREA       @Y17XAUU
         LA    R4,TOTAVTPT        GET AVT ADDRESS              @Y17XAUU
*        REG 1 ALREADY POINTS TO REQUEST ELEMENT               @Y17XAUU
         ICM   R1,MSKHI,WAIT      SET WAIT FLAG                @Y17XAUU
         L     R15,RESPLRVT       ADDRESS OF POST/WAIT ROUTINE @Y17XAUU
         LA    R13,REGSAVE2       SET UP SAVE AREA ADDRESS     @Y17XAUU
         BALR  R14,R15            GO TO POST THE ELEMENT       @Y17XAUU
         LA    13,REGSAVE         RESTORE MY SAVE AREA ADDRESS @Y17XAUU
*        ON RETURN REG 1 POINT TO REQUEST ELEMENT              @Y17XAUU
         MVC   REQRPRI(D4),INVTIC  SET INVALID TIC             @Y17XAUU
         LA    R0,TOTWAWRK        POINT TO QWA WORK AREA       @Y17XAUU
         L     R4,TOTAVTPT        GET AVT ADDRESS              @Y17XAUU
         L     R15,RESFBUF        FREE BUFFER ROUTINE ADDR     @Y17XAUU
         LA    R13,REGSAVE2       SET SAVE AREA FOR FREEBUF    @YM07351
         BALR  R14,R15            FREE THE BUFFER UNIT         @Y17XAUU
         LA    R13,REGSAVE        RESTORE MY SAVE AREA ADDR    @YM07351
FUNRVTE  EQU   *                                               @Y17XAUU
         L     R14,RETSAVE        RESTORE RETURN ADDRESS       @Y17XAUU
         BR    R14                RETURN TO CALLER             @Y17XAUU
         DROP  R1                                              @Y17XAUU
         DROP  R6                                              @Y17XAUU
         DROP  R7                                              @Y17XAUU
         EJECT
TERMLUS  DS    0H                 BOUNDARY ALLIGNMENT          @Y17XAUU
************************************************************** @Y17XAUU
*                                                            * @Y17XAUU
*        IF SNA LU ENTRY AND ASSIGNED, BUILD REQUEST ELEMENT * @Y17XAUU
*        AND POST TO LUS TO TERMINATE LU-LU SESSION.         * @Y17XAUU
*        INPUT - R6 = OLTCB NEG. PREFIX ADDRESS              * @Y17XAUU
*                R7 = ENTRY CONTROL AREA ADDRESS             * @Y17XAUU
*                R14 = RETURN ADDRESS                        * @Y17XAUU
*        IF ENTRY IS NOT ASSIGNED RETURN IS 8(R14)           * @Y17XAUU
*                                                            * @Y17XAUU
************************************************************** @Y17XAUU
         ST    R14,RETSAVE3       SAVE RETURN ADDRESS          @Y17XAUU
         USING TOTOBPTR,R6        SET OLTCB ADDRESSABILITY     @Y17XAUU
         USING ENT,R7             SET DEV ENTRY ADDRESSABILITY @Y17XAUU
         TM    ENTFLAG1,ENTTTASN  WAS ENTRY ASSIGNED           @Y17XAUU
         BZ    D8(R14)            NO - RETURN TO CALLER        @Y17XAUU
         SLR   R1,R1              CLEAR REG                    @Y17XAUU
         IC    R1,TOTTTBEL        GET NAME LENGTH              @Y17XAUU
         L     R8,ENTTNTAD        COUNTERFEIT TNT ADDRESS      @Y17XAUU
         ALR   R8,R1              POINT TO TTE ADDRESS         @Y17XAUU
         ICM   R8,ADRMSK,D0(R8)   GET TTE ADDRESS              @Y17XAUU
         LA    R1,TRMPRFSZ        GET TTE PREFIX SIZE          @Y17XAUU
         SLR   R8,R1              POINT TO TTE PREFIX          @Y17XAUU
         USING IEDNTRM,R8         SET TTE ADDRESSABILITY       @Y17XAUU
         TM    TRMSTATE,TRMPREF   3705 RESOURCE                @Y17XAUU
         BZ    D4(R14)            NO - RETURN TO CALLER        @YM09003
         CLI   TRMTYPE,TRMLUNT    LU ENTRY                     @Y17XAUU
         BNE   D0(R14)            NO - RETURN TO CALLER        @YM09003
         SPACE
*        SET UP TO REQUEST A BUFFER                            @Y17XAUU
         LA    R0,TOTWAWRK        POINT TO QWA WORK AREA       @Y17XAUU
         LA    R1,D1              REQUEST ONE BUFFER           @Y17XAUU
         L     R4,TOTAVTPT        PASS AVT ADDRESS             @Y17XAUU
         USING IEDQAVTD,R4        SET AVT ADDRESSABILITY       @Y17XAUU
         LA    R13,REGSAVE2       SET UP SAVE AREA ADDRESS     @Y17XAUU
         L     R15,RESABUF        ADDRESS OF BUF REQ RTN       @Y17XAUU
         BALR  R14,R15            GO REQUEST A BUFFER          @Y17XAUU
         LA    R13,REGSAVE        RESTORE MY SAVE AREA ADDRESS @Y17XAUU
         SPACE
*        SET UP TO BUILD TERMINATE LU-LU SESSION ELEMENT       @Y17XAUU
         USING IEDREQD,R1         SET REQ ELEM ADDRESSABILITY  @Y17XAUU
         XC    IEDREQD(REQLEN),IEDREQD CLEAR BASIC PORTION     @Y17XAUU
         MVI   REQTYPE,REQLTRM    SET REQUEST TYPE             @Y17XAUU
         MVI   REQPRI,PRILUSR     SET LUS POST PRIORITY        @Y17XAUU
         MVC   REQLTNT(D2),ENTTTOFF COUNTERFEIT TTCIN          @Y17XAUU
         L     R15,AVTSAVTP       GET SAVT ADDRESS             @Y17XAUU
         USING IEDNSVTD,R15       SET SAVT ADDRESSABILITY      @Y17XAUU
         MVI   REQRPRI,PRISSOLT   SET RETURN PRIORITY          @Y17XAUU
         LA    R14,SAVTLUSQ       GET LUS QCB ADDRESS          @Y17XAUU
         DROP  R15                                             @YM08407
         STCM  R14,ADRMSK,REQQCBA PUT IN ELEMENT               @Y17XAUU
         SPACE
*        SET UP TO POST ELEMENT                                @Y17XAUU
         LA    R0,TOTWAWRK        POINT TO QWA WORK AREA       @Y17XAUU
         ICM   R1,MSKHI,WAIT      SET WAIT FLAG                @Y17XAUU
         LA    R13,REGSAVE2       SET UP SAVE AREA ADDRESS     @Y17XAUU
         L     R15,RESPLRVT       ADDRESS OF POST/WAIT ROUTINE @Y17XAUU
         BALR  R14,R15            GO POST THE ELEMENT          @Y17XAUU
         LA    R13,REGSAVE        RESTORE MY SAVE AREA ADDRESS @Y17XAUU
         L     R14,RETSAVE3       RESTORE RETURN ADDRESS       @Y17XAUU
         USING IEDNSVTD,R15                                    @YM08407
         L     R15,AVTSAVTP       GET SAVT ADDRESS             @YM08407
         MVC   SCPT(D2),SAVTSCPT  SET SSCP TTCIN               @YM08407
         DROP  R15                                             @YM08407
TERMLOOP DS    0H                 BOUNDARY ALLIGNMENT          @YM08407
         SLR   R15,R15            CLEAR REG                    @YM08407
         ICM   R15,ADRMSK,TRMSIBPT SET SIB ADDRESS             @YM08407
         BZ    D0(R14)            NO SIB - RETURN TO CALLER    @YM08407
         USING IEDSIBD,R15        SET SIB ADDRESSABILITY       @YM08407
         CLC   SIBINDEX(D2),SCPT  LU-LU SESSION ENDED          @YM08407
         BE    D0(R14)            YES - RETURN TO CALLER       @YM08407
         DROP  R15                                             @YM08407
         STIMER WAIT,DINTVL=SEC05 WAIT 5 SECONDS               @YM08407
         B     TERMLOOP           CHECK AGAIN                  @YM08407
         DROP  R4                                              @Y17XAUU
         DROP  R7                                              @Y17XAUU
         DROP  R8                                              @Y17XAUU
         DROP  R6                                              @Y17XAUU
         DROP  R1                                              @Y17XAUU
         EJECT
         DS    0F                                              @Y17XAUU
*        ROUTINE TO COUNTERFEIT OR CLEANUP TOTE                @Y17XAUU
*        RVT AND NAT ENTRIES                                   @Y17XAUU
*        INPUT- R1 = REQ ELEMENT                               @Y17XAUU
*               R3 = STCB ADDRESS                              @Y17XAUU
*               R7 = QCB ADDRESS                               @Y17XAUU
*               R11= DISPATCHER ADDRESS                        @Y17XAUU
*               R15= ENTRY POINT ADDRESS                       @Y17XAUU
*               R13= AVTSAVE2 ADDRESS                          @Y17XAUU
         ORG   *-8                                             @Y17XAUU
QWBSYNCH EQU   *                                               @Y17XAUU
         ORG
         DC    AL1(DSPMCPL4),AL3(*-1)                          @Y17XAUU
         DROP  R11                        RELEASE              @Y17XAUU
         USING *,R12                      EST. ADDRESSABILITY  @Y17XAUU
         USING IEDQDISP,R11               EST. ADDRESSABILITY  @Y17XAUU
         USING AVTSAVE2,R13               EST. ADDRESSABILITY  @Y17XAUU
         USING IEDREQD,R10                EST. ADDRESSABILTY   @Y17XAUU
         USING ENT,R9                     EST. ADDRESSABILTY   @Y17XAUU
         LR    R12,R15            SET BASE REG                 @Y17XAUU
         LR    R10,R1             GET REQUEST ELEM ADDR        @Y17XAUU
         L     R9,REQDATA         ADDR OF DEV CONTRL INFO      @Y17XAUU
         LA    R9,AVTEZERO(R9)    CLEAR HIGH ORDER BYTE        @Y17XAUU
         LH    R1,ENTTROFF        GET REAL TTCIN               @Y17XAUU
         L     R8,AVTSAVTP        GET SEC AVT ADDR             @Y17XAUU
         LA    R8,AVTEZERO(R8)    CLEAR HIGH ORDER BYTE        @Y17XAUU
         USING IEDNSVTD,R8        EST. ADDRESSABILTY           @Y17XAUU
         L     R15,SAVTTNTX       GET ADDR OF NAT CONVERS RTN  @Y17XAUU
         BALR  R14,R15            CALL IEDIAP04                @Y17XAUU
         STCM  R15,HWRD,SUBA      SAVE NETWORK ADDR            @Y17XAUU
         STCM  R15,HWRD,ELEM      SAVE NETWORK ADDR            @Y17XAUU
*        SEPARATE NETWORK ADDRESS INTO SUBAREA AND ELEMENT     @Y17XAUU
         SLR   R5,R5              CLEAR                        @Y17XAUU
         IC    R5,SAVTSUBL        GET SUBAREA VALUE LENGTH     @Y17XAUU
         SLL   R15,AVTEZERO(R5)  SHIFT OUT SUBAREA'S ADDRESS   @Y17XAUU
        STCM  R15,HWRD,ELEM      SAVE THE RESULT               @Y17XAUU
        SLR   R15,R15            CLEAR REG                     @Y17XAUU
        ICM   R15,HWRD,ELEM      GET INTERMEDIATE RESULT       @Y17XAUU
        SRL   R15,AVTEZERO(R5)   ADJUST ELEMENT ADDRESS        @Y17XAUU
        STCM  R15,HWRD,ELEM      SAVE ELEMENT ADDRESS          @Y17XAUU
        LCR   R5,R5              NEGATE SUBAREA LENGTH         @Y17XAUU
        AL    R5,NABITLEN        GET ELEMENT BIT LENGTH        @Y17XAUU
        SLR   R15,R15            CLEAR                         @Y17XAUU
        ICM   R15,HWRD,SUBA      GET NETWORK ADDRESS           @Y17XAUU
        SRL   R15,AVTEZERO(R5)   SHIFT OUT ELEMENT ADDRESS     @Y17XAUU
        SPACE
*       COUNTERFEIT RVT ENTRY                                  @Y17XAUU
        L     R6,SAVTSAT         GET SAT ADDRESS               @Y17XAUU
        USING IEDSATD,R6         EST. ADDRESSABILITY           @Y17XAUU
        BCTR  R15,R0             DECREMENT SUBAREA VALUE LEN   @Y17XAUU
        SLA   R15,MULTIPLY       GET OFFSET INTO SAT TABLE     @Y17XAUU
        ALR   R6,R15             POINT TO SAT ENTRY            @Y17XAUU
        L     R6,SATRNRVT        GET RVT ADDRESS               @Y17XAUU
        DROP  R6                 RELEASE                       @Y17XAUU
        USING IEDRVTD,R6         SET RVT ADDRESSABILITY        @Y17XAUU
         SLR   R15,R15            CLEAR                        @Y17XAUU
         ICM   R15,HWRD,ELEM      GET ELEMENT ADDRESS          @Y17XAUU
         ALR   R15,R15            MULTIPLY BY TWO              @Y17XAUU
         ALR   R6,R15             GET OFFSET INTO RVT          @Y17XAUU
         CLI   REQDATA,COUNTER    COUNTERFEIT REQUEST          @Y17XAUU
         BNE   QWBSYN20           NO DO NO COUNTERFEITING      @Y17XAUU
         MVC   RVTINDEX(D2),ENTTTOFF INSERT COUNTERFEIT TTCIN  @Y17XAUU
         DROP  R6                 RELEASE                      @Y17XAUU
         L     R6,SAVTNAT         GET NAT ADDRESS              @Y17XAUU
         USING IEDNATD,R6         SET NAT ADDRESSABILITY       @Y17XAUU
         SLR   R15,R15            CLEAR                        @Y17XAUU
         ICM   R15,HWRD,ENTTTOFF  GET COUNTERFEIT TTCIN        @Y17XAUU
         BCTR  R15,R0             DECREMENT                    @Y17XAUU
         ALR   R15,R15            GET OFFSET INTO RVT          @Y17XAUU
         ALR   R6,R15             POINT TO NAT ENTRY           @Y17XAUU
         MVC   NATODAF(D2),SUBA   GET NETWORK ADDRESS          @Y17XAUU
         B     SYNPOST            EXIT                         @Y17XAUU
         DROP  R6                 RELEASE                      @Y17XAUU
QWBSYN20 EQU   *
         USING IEDRVTD,R6         GET RVT ADDR                 @Y17XAUU
         MVC   RVTINDEX(D2),ENTTROFF RESTORE REAL RVT ENTRY    @Y17XAUU
         DROP  R6                 RELEASE                      @Y17XAUU
SYNPOST  EQU   *
         MVC   REQQCBA(D3),REQRQCBA GET RETURN QCB ADDRESS     @Y17XAUU
         MVC   REQPRI(D1),REQRPRI SET RETURN PRIORITY          @Y17XAUU
         XC    REQLINK(D3),REQLINK CLEAR LINK FIELD            @Y17XAUU
         LR    R1,R10             RESTORE ELEMENT ADDRESS      @Y17XAUU
         BAL   R14,DSPPOST        RETURN TO DISPATCHER         @Y17XAUX
         DROP  R10                RELEASE                      @Y17XAUU
         DROP  R12                RELEASE                      @Y17XAUU
         EJECT
WBWORK01 DC    D'0'               WORK AREA
SEC05    DC    X'F0F0F0F0F0F5F0F0' 5 SECOND WAIT               @YM08407
RETSAVE  DS    F                  SAVE AREA FOR RETURN ADDR    @Y17XAUU
PATCH    DC    CL100' '           MAINTENANCE AREA
TOTEMH   DC    CL8'IEDTOTMH'      COMPARAND FOR TOTE MH        @Y17XAUU
LOADLIST DS    0H                 ID OF TOTE RESIDENT MODULES  @Y17XAUU
         DC    CL2'O'             I/O MANAGER                  @Y17XAUU
         DC    CL2'AB'            DATE ROUTINE                 @Y17XAUU
         DC    CL2'AJ'            $CUTEST ROUTINE              @Y17XAUU
         DC    CL2'35'            EXIO ROUTINE                 @Y17XAUU
         DC    CL2'AA'            TIME ROUTINE                 @Y17XAUU
         DC    CL2'39'            DPRINT ROUTINE - LOAD 1      @Y17XAUU
         DC    CL2'P1'            DPRINT ROUTINE - LOAD 2      @Y17XAUU
         DC    CL2'P2'            DPRINT ROUTINE - LOAD 3      @Y17XAUU
         DC    CL2'37'            CECOM ROUTINE                @Y17XAUU
         DC    CL2'28'            PLINK ROUTINE                @Y17XAUU
         DC    CL2'36'            WAITIO ROUTINE               @Y17XAUU
         DC    CL2'AC'            GRAB/$LETGO ROUTINE          @Y17XAUU
         DC    CL2'41'            CONVERT ROUTINE              @Y17XAUU
         DC    CL2'16'            GETCONFIG ROUTINE            @Y17XAUU
         DC    CL2'42'            MORECORE/FREECORE ROUTINE    @Y17XAUU
         DC    CL2'44'            HALT I/O ROUTINE             @Y17XAUU
         DC    CL2'47'            ROUTINE ROUTINE              @Y17XAUU
         DC    CL2'M2'            TRACE ROUTINE                @Y17XAUU
         DC    CL2'25'            SEND ROUTINE                 @Y17XAUU
         DC    CL2'33'            RECEIVE ROUTINE              @Y17XAUU
ENDLIST  DC    XL2'0'             END OF LIST INDICATOR        @Y17XAUU
MODNAME  DS    0CL8               LOAD MODULE NAME             @Y17XAUU
         DC    C'IEDQW'           MODULE PREFIX                @Y17XAUU
MODID    DC    CL3' '             MODULE ID                    @Y17XAUU
ATTLIST  ATTACH EPLOC=CNAME,SF=L  CONTROL PROGRAM PARAMETER LIST
*                                   USED IN EXECUTE FORM OF ATTACH
CNAME    DC    CL8'IEDQWB1'       MODULE NAME USED IN ATTACH MACRO
SECS10   DS    0D
         DC    C'00001000'        TEN SECOND TIMER INTERVAL      A41582
RESSIZE  DC    H'45'              SIZE OF TOTE RESIDENT CODE   @Y17XAUU
*                                 IEDQWA - 2K                  @Y17XAUU
*                                 IEDQWA1 - 4K                 @Y17XAUU
*                                 IEDQWO - 3K                  @Y17XAUU
*                                 SERVICE ROUTINES - 36K       @Y17XAUU
*                                 ***TOTAL*** - 45K            @Y17XAUU
TNTEADLN DC    H'3'               LENGTH OF TNT ENTRY ADDRESS
*                                   FIELD
REGSAVE  DS    18F                REGISTER SAVE AREA
RETSAVE3 DS    F                  REG SAVE AREA                @Y17XAUU
REGSAVE2 DS    18F                SECOND SAVE AREA FOR IEDQWB  @YM07351
WBFLAGS  DC    XL1'00'            IEDQWB FLAG BYTE
*
CNVTBL   DC    CL16'0123456789ABCDEF'  TRANSLATE TABLE
ZERO     DC    XL3'0'             ZERO FIELD FOR COMPARE
OLTCBSZ  DC    H'3'               SIZE OF OLTCB IN BLOCKS      @Y17XAUU
NONAME   DC    CL8'0'             INDICATES NO NAME FOR CONCENTRATOR
UPPER    DC    CL8' '             USED TO CONVERT CONTROL TERMINAL
*                                   NAME TO UPPER CASE
CHARB1   DC    CL2'B1'            USED IN ATTACH MACRO WHEN IEDQWB1
*                                   IS THE MODULE DESIRED
CHARE    DC    CL2'E '            USED IN ATTACH MACRO WHEN IEDQWE IS
*                                   THE MODULE DESIRED
ELADDR   DC    F'0'                    ADDRESS OF BUFFER         X02004
FIX      EQU   X'02'                   PAGE FIX CODE             X02004
FREE     EQU   X'01'                   PAGE FREE CODE            X02004
*                                       BUFFER AND LCB           X02004
RQQTYPE  DC    X'00'              FLAG BYTE FOR COUNTERFEITING @Y17XAUU
COUNTER  EQU   X'FF'              COUNTERFEIT REQUEST          @Y17XAUU
NABITLEN DC    F'16'              NUMBER OF BITS IN NET ADDR   @Y17XAUU
INVTIC   DC    X'08000002'        INVALID TIC                  @Y17XAUU
K1024    DC    F'1024'            BYTE VALUE OF 1 K              S22024
ELEM     DS    H                  TO SAVE NETWORK ADDR(ELEMENT)@Y17XAUU
SUBA     DS    H                  TO SAVE NETWORK ADDR(SUBAREA)@Y17XAUU
SCPT     DS    H                  SSCP TTCIN SAVE AREA         @YM08407
WAIT     DC    X'80'              WAIT FOR POST COMPLETE FLAG  @Y17XAUU
         EJECT
RESPL    RESPL                                                   S22024
         EJECT
DUMTNTE  DSECT
DTNTFLGS DS    BL1                TOTE TNT ENTRY FLAGS
*
DTNTASSN EQU   X'80'              ENTRY ASSIGNED TO OLT
         SPACE 5
DEXT     DSECT
DEXTCNT  DS    XL1                NUMBER OF TNT ENTRIES
DEXTPTR  DS    AL3(0)             POINTER TO TOTE TTE QCB AREA
*
DEXTLFTR EQU   210                FACTOR FOR DETERMINING LENGTH@Y17XAUU
*                                   OF TOTE TTE/QCB/LGB AREA
         SPACE 5
QEL      DSECT
QELKEY   DS    C .           QUEUE ELEMENT KEY
QELQCB   DS    AL3 .         ADDRESS OF QCB
         DS    C                  UNUSED
QELLINK  DS    AL3 .         ELEMENT LINK FIELD
QELSIZE  DS    H .           ELEMENT SIZE
*
QENDKEY  EQU   X'00' .       DUMMY LAST ELEMENT KEY
*
EXAMINSZ EQU   12            MINIMUM EXTENDED AREA BLOCK SIZE
         SPACE 5
TQCB     DSECT
TQCBKEY  DS    C             QCB KEY FIELD
TQCBLINK DS    AL3           QCB LINK FIELD
         SPACE 5
ENT      DSECT
*
ENTUCBAD DS    AL2 .         UCB ADDRESS
ENTTTOFF DS    H .           TNT ENTRY OFFSET (DUMMY)          @Y17XAUU
ENTTROFF DS    H .           TNT ENTRY OFFSET (REAL)           @Y17XAUU
ENTRSID  DS    H .           NETWORK ADDRESS                   @Y17XAUU
ENTRLN   DS    C .           RELATIVE LINE NUMBER
ENTLCBAD DS    AL3 .         LINE CONTROL BLOCK ADDRESS
ENTTNTAD DS    A .           TERMINAL NAME TABLE ENTRY ADDRESS
ENTTNTRL DS    A .                ADDRESS OF REAL TNT ENTRY
ENTEABLN DS    H .           EXTENDED AREA BLOCK LENGTH
ENTFLAG1 DS    BL1 .         DEVICE FLAGS
*
ENTTTASN EQU   X'80' .            TNT ENTRY ASSIGNED FLAG
ENTCONCN DS    CL8                NAME OF CONCENTRATOR ENTRY
*
         EJECT
         TAVTD
         EJECT
         TDISPD
         EJECT
         TNATD
         EJECT
         TPRFD
         EJECT
         TRVTD
         EJECT
         TSATD
         EJECT
         TTNTD
         EJECT
         OLTCB POINTER=YES
         EJECT
         TTRMD
         EJECT
         SPACE 5
RQTNT    EQU   TOTWKSPC
RQTNTERR EQU   X'FF'              ERROR RETURN CODE
*
RQTNTENT DSECT
*
RQTNTFGS DS    BL1           TNT REQUEST FLAGS
*
RQTNTLST EQU   X'80' .            LAST ENTRY FLAG
*
RQTNTTYP DS    BL1           TNT REQUEST ENTRY TYPE FIELD
*
RQTNTCT  EQU   X'80'                CONTROL TERMINAL ENTRY
RQTNTAP  EQU   X'40'                ALTERNATE PRINTER ENTRY
RQTNTPR  EQU   X'20'                PRIMARY TEST DEVICE ENTRY
RQTNTSC  EQU   X'10'                SECONDARY TEST DEVICE ENTRY
RQTYPANY EQU   RQTNTCT+RQTNTAP+RQTNTPR+RQTNTSC
*
RQTNTLNT DS    H             TNT REQUEST BLOCK LENGTH
*
RQTENLEN EQU   4                  LENGTH OF REQUEST
*                                   ELEMENT ENTRY
         SPACE 5
CBSLPL   EQU   TOTWKSPC+4    PARAMETER LIST FOR TCAM POST
CBRQELE  EQU   TOTWKSPC+12   OPERATOR CONTROL REQUEST ELEMENT
CBRQKEY  EQU   CBRQELE            ELEMENT KEY
CBRQQCBA EQU   CBRQELE+1          OPERATOR CONTROL QCB ADDRESS
CBRQPRI  EQU   CBRQELE+4          ELEMENT PRIORTY
CBRQLINK EQU   CBRQELE+5          ELEMENT LINK FIELD
CBRQVBCD EQU   CBRQELE+8          REQUEST VERB CODE
CBRQELNG EQU   CBRQELE+9          ELEMENT LENGTH
CBRQRLN  EQU   CBRQELE+10         RELATIVE LINE NUMBER
CBRQRTCD EQU   CBRQELE+11         RETURN CODE
CBRQECBA EQU   CBRQELE+12         ADDRESS OF ECB TO POST
*                                   SERVICE COMPLETE
CBRQLADR EQU   CBRQELE+16         RESOURCE NAME
         EJECT
DCBDSECT DCBD  DSORG=TQ
         EJECT
         TLCBD
         EJECT                                                 @Y17XAUU
         TMHTABD                                               @Y17XAUU
         EJECT
         TDEBD
         EJECT
         TPRIOR                                                @Y17XAUU
         EJECT
         TREQD                                                 @Y17XAUU
         EJECT
         TSIBD                                                 @YM08407
         EJECT
UCB      DSECT
         IEFUCBOB
         EJECT
         END
