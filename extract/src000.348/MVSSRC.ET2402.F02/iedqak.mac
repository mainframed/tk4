AK01     TITLE '''IEDQAK'' - LINE CONTROL INSERTION ROUTINE'
IEDQAK   CSECT
         SPACE 3
*CHANGE-ACTIVITY = AS FOLLOWS:
******************** MICROFICHE FLAGS *********************** SUPT CODE
*
*A383490                                                         S21903
*D337000,339210,342570-343300                                    S22026
*C339140,342220-342520,343060-343260                             S22026
*A322300-322700,339180-339220,339430-339460,340970-341000        S22026
*A342860-342900,343500-343860,370100-370900,371500               S22026
*A442100-442600,444500,660500                                    S22026
*A257500,263500,269500,301000-301960,323200-323600,324500        S22025
*A333630-333930,334500,339422-339426,339930-339950,343220-343382 S22025
*A343500-343680,378300-378600,382009-384300,386300-386600,387500 S22025
*A389300-389600,408300-408600,419050-420900,510500,513500        S22025
*A514300-514600,517500,542500,556100-556800,622200-622600,657400 S22025
*A660100-664800,671780-671828                                    S22025
*C002016-002532,002720,002880,308000,338000,397000,446000,474000 S22025
*C485000-486000,660200                                           S22025
*D002584-002608,002652-002712,002724-002792,002884-002900        S22025
*D336000-337000,420000,657000,661000-664000                      S22025
*D333100-333600,656090-656900                                   SA58444
*A495000                                                        SA60007
*D380100-380500,495000-495900                                   SA60007
*A380050-380900,490500                                          SA64787
*C495000-500000,503000,507000-508000                            SA64787
*A420800,420850                                                 SA67120
*D513500,517500,542500                                         @SA64367
*A652000                                                       @SA62342
*A338600                                                       @SA74020
*C343298                                                       @SA74051
*C343298,A420740,D420820                                       @SA74884
*A343302,C343310,D343316-343320,C343322,C343330                @SA74884
*D652100-652700                                                @OX12569
*C356000                                                       @Y17XAMG
*$01=OZ42071  JTC2202  79.11.15  726652                            @01A
*$21=OZ55118  JTC2412  81.10.22  460025: LOST MSG AND WAIT         @21A
* $R1=ZM30946 JTC2412  82.03.04  613706: RESERVES FROM LCBISZE     @R1A
***********************************************************************
* $MOD(IEDQAK) COMP(M@) PROD(TCAM):                                @01A
*                                                                     *
*  DESCRIPTIVE NAME = LINE CONTROL INSERTION ROUTINE                  *
*                                                                     *
*  COPYRIGHT = 'NONE'                                                 *
*                                                                     *
*  STATUS:  CHANGE LEVEL 5                                            *
*                                                                     *
*  FUNCTION:  THIS MODULE PERFORMS THREE FUNCTIONS                    *
*                                                                     *
*   1. FOR INPUT OPERATIONS ONLY, THIS ROUTINE DELETES A CHARAC- S22025
*      TER STRING WHEN IT APPEARS AT A GIVEN INTERVAL IN A       S22025
*      MESSAGE.  THIS ROUTINE LINKS TO IEDQAL TO SCAN FOR THE    S22025
*      CHARACTER STRING AT FIXED INTERVALS.  IF THE CHARACTER    S22025
*      STRING IS FOUND, THIS ROUTINE LINKS TO IEDQAF TO DELETE   S22025
*      THE STRING BY CONTRACTING DATA.  IF THE STRING APPEARS TO S22025
*      CROSS BUFFER BOUNDARIES, THIS ROUTINE COPIES THE PART OF  S22025
*      THE STRING FOUND FROM THE CURRENT BUFFER TO A NEW ONE.    S22025
*      THE CURRENT BUFFER IS SHORTENED TO EXCLUDE THE PARTIAL    S22025
*      STRING AND THE NEW BUFFER IS PUT ON A HOLD QUEUE.  THE    S22025
*      PARTIAL STRING REMAINS ON THE HOLD QUEUE UNTIL A SUBSE-   S22025
*      QUENT BUFFER IS RECEIVED FOR THE CURRENT MESSAGE.  THE    S22025
*      PARTIAL STRING IS INSERTED INTO THE BEGINNING OF THE      S22025
*      SUBSEQUENT BUFFER BY IEDQBN.                              S22025
*   2. FOR OUTPUT OPERATIONS ONLY, THIS ROUTINE OPTIONALLY IN-   S22025
*      SERTS LINE CONTROL CHARACTERS AT FIXED INTERVALS.  IF THE S22025
*      DESTINATION IS A BISYNC DEVICE, A 'STX' IS INSERTED       S22025
*      IN THE BEGINNING OF THE MESSAGE.  IF THE DESTINATION IS A S22025
*      NON-BYSYNC DEVICE WITH AN EOA SEQUENCE, IT IS INSERTED    S22025
*      IN THE BEGINNING OF THE MESSAGE.  FOR ALL DESTINATIONS,   S22025
*      AN EOT SEQUENCE IS ADDED TO THE END OF THE MESSAGE.  END- S22025
*      OF-BLOCK SEQUENCES AND SUBBLOCK DELIMITERS ARE OPTIONALLY S22025
*      INSERTED AT FIXED INTERVALS AS SPECIFIED BY THE USER.     S22025
*   3. OR, FOR OUTPUT ONLY, THIS ROUTINE REFORMATS OUTGOING      S22025
*      MESSAGES INTO VARIABLE LENGTH BLOCKS.  STX,EOA,AND EOT    S22025
*      SEQUENCES ARE INSERTED AS DESCRIBED ABOVE.  FOR VARIABLE  S22025
*      LENGTH REBLOCKING, THE USER SPECIFIES THE NUMBER OF SUB-  S22025
*      BLOCKS HE DESIRES PER BLOCK.  THIS ROUTINE SCANS THE      S22025
*      MESSAGE FOR SUBBLOCK DELIMITERS AND INSERTS END-OF-BLOCK  S22025
*      SEQUENCES APPROPRIATELY.  THIS FUNCTION REQUIRES THAT     S22025
*      SUBBLOCK DELIMITERS ALREADY BE IN THE MESSAGE DATA.       S22025
*                                                                     *
*ENTRY POINTS --                                                      *
*       'IEDQAK01' TO INSERT LINE CONTROL IN AN OUTGOING BUFFER.      *
*   CALLING SEQUENCE FROM USER INTERFACE IS:                          *
*                                                                     *
*        L     R12,AVTMSGS-1            GET ADDR OF VCON TABLE        *
*        IC    R15,AVTEZERO(,R1)        GET INDEX TO ROUTINE ADDR     *
*        L     R12,AVTEZERO(R12,R15)    GET ROUTINE ADDRESS           *
*        BR    R12                      EXIT TO ROUTINE               *
*                                                                     *
*INPUT --                                                             *
*   REGISTER 1 - THE ADDRESS OF A MACRO-GENERATED PARAMETER LIST.     *
*                                                                     *
*   REGISTER 3 - THE ADDRESS OF THE SCB.                              *
*                                                                     *
*   REGISTER 4 - THE ADDRESS OF THE LCB.                              *
*                                                                     *
*   REGISTER 9 - THE ADDRESS OF THE AVT.                              *
*                                                                     *
*   REGISTER 12 - ENTRY POINT ADDRESS AND BASE REGISTER FOR THIS      *
*   ROUTINE.                                                          *
*                                                                     *
*                                                                     *
*OUTPUT -- NONE                                                  S22025
*                                                                     *
*EXTERNAL REFERENCES --                                               *
*   'IEDQAF' - INSERT DATA ROUTINE.                                   *
*   'IEDQAO' - UNIT REQUEST INTERFACE                            S22025
*   'IEDQA4' - INMSG/OUTMSG ROUTINE                              S22025
*   'IEDQUI' - USER INTERFACE ROUTINE                            S22025
*   'IEDQAL' - SCAN AT OFFSET ROUTINE                            S22025
*   'IEDQBN' - ATTACH DATA ROUTINE                               S22025
*   'IEDQAX' - SCAN ROUTINE                                      S22025
*   AVT - ADDRESS VECTOR TABLE                                   S22025
*   BUFFER CURRENTLY BEING PROCESSED                             S22025
*   LCB - LINE CONTROL BLOCK                                     S22025
*   SCB - STATION CONTROL BLOCK                                  S22025
*   DCB - DATA CONTROL BLOCK                                     S22025
*   SCT - SPECIAL CHARACTERS TABLE                               S22025
*                                                                     *
*EXITS,  NORMAL --                                                    *
*   RETURN TO THE MESSAGE HANDLER FOR FURTHER PROCESSING.        S22025
*                                                                     *
*EXITS,  ERROR -- N/A.                                                *
*                                                                     *
*TABLES/WORK AREAS -- N/A.                                            *
*                                                                     *
*ATTRIBUTES -- SERIALLY REUSABLE, REFRESHABLE, ENABLED, RESIDENT,     *
*   PROBLEM PROGRAM MODE.                                             *
*                                                                     *
*NOTES -- THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON AN        *
*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.            *
*                                                                     *
***********************************************************************
         EJECT
         SPACE
********* REGISTER EQUATES **********
         SPACE
R0       EQU   0                        WORK REGISTER
         SPACE
R1       EQU   1                        PARAMETER LIST ADDRESS
         SPACE
RWORK2   EQU   2                        WORK REGISTER
RCOUNT   EQU   2                                                 S22025
         SPACE
RSCB3    EQU   3                        SCB ADDRESS
         SPACE
RLCB4    EQU   4                        LCB ADDRESS
         SPACE
RDATAD   EQU   5                        DATA OFFSET REGISTER
RSCAN    EQU   5                        SCAN PTR ADDR            S22025
         SPACE
RPREFIX  EQU   6                        BUFFER ADDRESS
         SPACE
RSCT7    EQU   7                        SCT ADDRESS
         SPACE
RLIM8    EQU   8                        SHIFT LIMIT REGISTER
RICR     EQU   8                                                 S22025
         SPACE
RAVT9    EQU   9                        AVT ADDRESS
         SPACE
RWORK10  EQU   10                       WORK REGISTER
         SPACE
RSIZE    EQU   11                       SIZE REGISTER
         SPACE
RBASE    EQU   12                       BASE REGISTER
         SPACE
R13      EQU   13                       SAVE AREA ADDRESS
R14      EQU   14                       TCAM RETURN REGISTER
R15      EQU   15                       TCAM BRANCH REGISTER
         SPACE
********* OTHER EQUATES **********
         SPACE
PARMAF   EQU   2                        INSERT DATA ROUTINE INDEX
         SPACE
INSOFF   EQU   4                        PREFIX INSERT OFFSET
DATOFF   EQU   6                        PREFIX DATA OFFSET
         SPACE
SCTEOA   EQU   1                        SCT INDEX BYTE TO EOA
SCTPAD   EQU   3                       SCT INDEX TO IDLE CHAR    S99528
SCTEOB   EQU   18                       SCT INDEX BYTE TO EOB
SCTITB   EQU   19                       SCT INDEX BYTE TO ITB
SCTEOT   EQU   20                       SCT INDEX BYTE TO EOT
         SPACE
INDEXA4  EQU   4                        INMSG/OUTMSG ROUTINE INDEX
         SPACE
ONE      EQU   1                        INCREMENT VALUE OF ONE
TWO      EQU   2                        LENGTH OF A HALFWORD
THREE    EQU   3                        OFFSET INTO DEV CHAR ENTRY
FOUR     EQU   4                        OFFSET IN SAVE AREA      S22025
INDEXBN  EQU   4                        INDEX TO IEDQBN          S22025
BSIZE    EQU   2                        OFFSET TO BLOCKSIZE      S22025
CHAR     EQU   12                                                S22025
CHARL    EQU   12                                                S22025
PARMSTAT EQU   5                                                 S22025
OPTFLD   EQU   1                                                 S22025
AEOFF    EQU   12                                                S22025
TWFOUR   EQU   24                                                S22025
FIVE     EQU   5                                                 S22025
NINE     EQU   9                                                 S22025
EIGHT    EQU   8                                                 S22025
MVOFF    EQU   16                                                S22025
CONTR    EQU   X'20'                    DATA CONTRACTION         S22025
BFREDIT  EQU   X'40'                    DATA MOVEMENT FLAG       S22025
LEN      EQU   19                                                S22025
         SPACE
ZERO     EQU   8                        CONDITION CODE: ZEROES
NOTPOS   EQU   13                       CONDITION CODE: NOT PLUS
EQUAL    EQU   8                        CONDITION CODE: EQUAL
         SPACE
FLAG2760 EQU   X'01'                    IBM 2760 DEVICE FLAG
FLAG226R EQU   X'02'                    IBM 2260 REMOTE DEVICE FLAG
INSRTCHK EQU   X'80'                    MASK USED TO CHECK IF    S22025
*                                       ANY INSERTS DONE         S22025
         SPACE
REG1OFF  EQU   X'18'                    OFFSET TO R1 IN SAVE AREA
EXTCHAR  EQU   X'03'                   EXT LINE CONTROL CHAR     S99528
STXCHAR  EQU   X'02'                    STX LINE CONTROL CHAR    S99528
         EJECT
         USING IEDQAK01,RBASE
         USING IEDQAVTD,RAVT9
         USING IEDQLCB,RLCB4
         USING IEDQPRF,RPREFIX
         USING IEDQSCB,RSCB3
         SPACE
IEDQAK01 EQU   *
IEDQAK   IEDHJN LCINSERT                                         S22025
         TM    SCBQTYPE,SCBCONC         SCB FOR A CONCENTRATOR   S22026
         BZ    NOCONC                   NO,GOAHEAD               S22026
         L     RSCB3,LCBSCBDA-1         YES GET CONCENTRATOR SCB S22026
         OI    SCBQTYPE,SCBCONC         SET TEMP FLAG IN CONC SCBS22026
NOCONC   EQU   *                                                 S22026
         TM    SCBSTATE,SCBMGFMN        IS LC INSERTION REQUESTED
         BO    OUTPUT                   YES                      S22025
         SPACE 2
         TM    LCBSTAT1,LCBRECVN        MSGFORM ON INPUT         S22025
         BNO   EXIT2                    NO, EXIT IMMEDIATELY
OUTPUT   EQU   *                                                 S22025
         SPACE
         LH    RSIZE,PRFSIZE            PICK UP BUFFER SIZE
         N     RSIZE,AVTCLRHI           IS THIS A ZERO-LNG BUFFER
         BNZ   INITIALZ                 NO, PROCEED
         SPACE
         STH   RSIZE,SCBEOBAC           YES, CLEAR SCB FIELD
         B     EXIT2                      AND EXIT IMMEDIATELY
         SPACE
INITIALZ EQU   *
         TM    LCBSTAT1,LCBRECVN        MSGFORM ON INPUT         S22025
         BNO   INITIAL3                 NO                       S22025
         LR    RWORK2,R1                SAVE AK'S PARMLIST       S22025
         LA    R1,INDEXBN(,R1)          BUMP TO BN'S LIST        S22025
         L     R15,AVTUI                GET INTERFACE ROUTINE    S22025
         BALR  R14,R15                  SCAN QUEUE FOR LEFTOVER  S22025
         L     RPREFIX,AVTADBUF         RESTORE ORIGINAL BUFFER  S22025
         LH    R15,PARMAF(,R1)          GET AF/AO                S22025
         LR    R1,RWORK2                RESTORE AK'S PARM LIST   S22025
         MVC   PRFKEY(TWO),SCBEOBAC     SAVE DLIST COUNT         S22025
         MVC   SCBEOBAC(TWO),SCBEOBSZ   GET ACCUM COUNT          S22025
         MVC   SCBEOBSZ(TWO),BSIZE(R1)  GET BLOCK SIZE           S22025
         B     INITIAL4                 SAVE AF/AO IN AVT        S22025
*
INITIAL3 EQU   *                                                 S22025
         LH    R15,PARMAF(,R1)          GET IEDQAF/IEDQAO INDICES
INITIAL4 EQU   *                                                 S22025
         STH   R15,AVTPARM+2            SAVE THEM IN AVT PARM LIST
         OI    INSOFF(RPREFIX),INSRTCHK INITIALIZE FIELD TO SHOW S22025
*                                       NO INSERTS DONE YET      S22025
         L     RSCT7,LCBDCBPT           GET ADDRESS OF DCB
         USING IHADCB,RSCT7
         L     RSCT7,DCBSCTAD-1         GET SCT ADDRESS FROM DCB
         LA    RSCT7,AVTEZERO(RSCT7)    CLR THE HI-ORDER BITS  @SA74020
         LTR   RSCT7,RSCT7              EXIT IMMED. IF MSG IS  @SA74020
         BZ    EXIT2                    FOR AN APPLICATION PGM @SA74020
         SPACE
TESTRCL  EQU   *
         TM    PRFSTAT1,PRFNHDRN+PRFCNCLN                        S22026
*                                       TEXT OR RECALLED         S22026
         BZ    TESTSTX                  BRANCH IF NO             S22026
         SPACE
         TM    PRFSTAT1,PRFCNCLN        IS IT RECALLED
         BNO   TESTLC                   NO, GO INSERT LINE CONTROL
         LH    R0,SCBEOB                GET EOB OFFSET           S22025
         TM    LCBSTAT1,LCBRECVN        RECEIVING                S22025
         BO    SETAC                    YES, GO DELETE           S22025
         TM    SCBQTYPE,SCBCONC         CONC                     S22026
         BO    NEWBACS                  BRANCH IF YES            S22026
         TM    PRFSTAT1,PRFNHDRN        TEXT BUFFER              S22026
         BZ    TESTSTX                  BRANCH IF NO             S22026
         SPACE
NEWBACS  EQU   *
         SPACE 2                                              T  S22025
         LA    RWORK2,SCTEOB            REQUEST EOB ADDRESS
         SR    R15,R15                  SET CONDITION CODE = 8
         BAL   R14,GETSCTAD             LINK TO GET EOB ADDRESS
         SPACE
         IC    R15,AVTEZERO(,RWORK2)    PICK UP LENGTH OF EOB
         NC    SCBEOBSZ(2),SCBEOBSZ     BLOCK SIZE SPECIFIED     S22025
         BZ    SCNLOOP                  NO, MUST BE ON COUNT     S22025
         LH    R1,SCBEOBSZ              LOAD INTERVAL
         N     R1,AVTCLRHI                BETWEEN EOBS
         LA    RWORK2,AVTEZERO(R1,R15)  GET BLOCK LENGTH IF NO ITBS
         SPACE
         CLI   SCBITBSZ,AVTEZERO        ARE ITBS BEING INSERTED
         BE    BLOCKNUM                 NO, GO FIGURE NO. OF BLOCKS
         SPACE
         SR    R0,R0                    (CLEAR FOR DIVIDE)
         LR    R14,R0                   (CLEAR FOR INSERT)
         IC    R14,SCBITBSZ             SET ITB INTERVAL AS DIVISOR
         DR    R0,R14                   GET NO. OF ITBS
         BCTR  R1,AVTEZERO                IN EACH BLOCK
         AR    RWORK2,R1                GET BLOCK LENGTH WITH ITBS
         SPACE
BLOCKNUM EQU   *
         LH    R0,SCBEOB                OFFSET TO DATA           S22026
         AH    R0,SCBEOBAC              COMPUTE EOB OFFSET       S22026
         TM    SCBQTYPE,SCBCONC         CONC                     S22026
         BO    CHKITB                   BRANCH IF YES            S22026
         LH    R0,SCBEOB                LOAD OFFSET
         N     R0,AVTCLRHI                LAST GOOD EOB
         LA    R1,AVTTXTSZ              GET SIZE OF PREFIX
         SR    R0,R1                    COMPUTE DATA LENGTH
         BCTR  R0,AVTEZERO                BEFORE LAST GOOD EOB
         LR    R1,R0                    RELOAD FOR DIVIDE
         SR    R0,R0                    (CLEAR FOR DIVIDE)
         DR    R0,RWORK2                COMPUTE NO. BLOCKS BEFORE
*                                         LAST GOOD EOB
CHKITB   EQU   *                                                 S22026
         LR    R15,R0                   SAVE EOB OFFSET          S22026
         CLI   SCBITBSZ,AVTEZERO        ARE ITBS BEING INSERTED  S22026
         BE    SETEOBAC                 BRANCH IF NO             S22026
         LR    R1,R0                    RELOAD FOR DIVIDE
         SR    R0,R0                    (CLEAR FOR DIVIDE)
         IC    R0,SCBITBAC              ITB OFFSET               S22026
         AH    R0,SCBEOB                COMPUTE ITB OFFSET       S22026
         TM    SCBQTYPE,SCBCONC         CONC                     S22026
         BO    SETITBAC                 BRANCH IF YES            S22026
         SR    R0,R0                    ZERO REG                 S22026
         LA    R14,ONE(,R14)            GET SUBBLOCK LENGTH
         DR    R0,R14                   COMPUTE NO. SUBBLOCKS
         SR    R15,R1                   COMPUTE EOB OFFSET       S22026
SETITBAC EQU   *                                                 S22026
         STC   R0,SCBITBAC              SET ITB OFFSET           S22026
         STH   R0,PRFITBAC              SET ITB OFFSET           S22026
SETEOBAC EQU   *                                                 S22026
         STH   R15,SCBEOBAC             SET EOB OFFSET           S22026
         TM    SCBQTYPE,SCBCONC         CONC                     S22026
         BO    TESTSTX                  BRANCH IF YES            S22026
         B     TESTLC                   INSERT LINE CONTROL      S22025
SCNLOOP  EQU   *                        SCAN BUFFER              S22025
         SR    RCOUNT,RCOUNT            CLEAR                    S22025
         IC    RCOUNT,LCBISZE           GET NUMBER OF RESERVES   S22025
         LA    RCOUNT,AVTTXTSZ+1(,RCOUNT)     ADD PREFIX     S   S22025
         STH    RCOUNT,DATOFF(,RPREFIX) SET INITIAL OFFSET       S22025
         LR    RDATAD,R15               SAVE LENGTH OF EOB       S22025
         BCTR  RDATAD,R0                GET NUMBER OF ADDITIONAL S22025
*                                       BYTES PER EOB            S22025
         SR    RCOUNT,RCOUNT            CLEAR FOR COUNT          S22025
         SR    RICR,RICR                CLEAR FOR INCREMENT      S22025
         SR    RSIZE,RSIZE              CLEAR FOR MAX COUNT      S22025
         STC   RCOUNT,SCBBCTR           RESET ACCUM COUNT        S22025
         IC    RSIZE,SCBBLKCT           GET MAX NUMBER OF        S22025
*                                       SUBBLOCKS PER BLOCK      S22025
ASCAN    EQU   *                                                 S22025
         BAL   RWORK10,LINKAXM          GO TO SCAN               S22025
         LR    R1,R0                    GET OFFSET               S22025
         LA    R1,1(R1)                 INCREMENT OFFSET       @SA74884
         STH   R1,DATOFF(,RPREFIX)      SET IN BUFFER            S22025
         LTR   R15,R15                  ANY CHARS FOUND          S22025
         BZ    SETLAST                  NO                       S22025
         LA    RCOUNT,ONE(,RCOUNT)      BUMP COUNTER             S22025
         AR    R0,RICR                  ADD LENGTH-1 OF EOB    @SA74884
         CH    R0,SCBEOB                WAS THERE A PREVIOUS EOB S22025
         BE    SETCTR                   YES,BEGIN INSERTION    @SA74884
         CR    RCOUNT,RSIZE             MAX COUNT FOR BLOCK      S22025
         BNE   ASCAN                    NO,LOOK FOR NEXT       @SA74884
         AR    RICR,RDATAD              ADD NUMBER OF EXTRA BYTESS22025
         SR    RCOUNT,RCOUNT            RESET COUNTER            S22025
         B     ASCAN                    LOOK FOR NEXT          @SA74884
SETCTR   EQU   *                                                 S22025
         SR    RSIZE,RCOUNT             YES, GET ACCUM CT        S22025
         STC   RSIZE,SCBBCTR            SAVE COUNT               S22025
         B     LCOFFSET                 GO GET OFFSETS         @SA74884
SETLAST  EQU   *
         LH    RSIZE,PRFSIZE            GET TOTAL SIZE           S22025
         N     RSIZE,AVTCLRHI           CLEAR HALF               S22025
         B     LAST                     NO INSERT NEEDED         S22025
         EJECT
TESTSTX  EQU   *
         TM    SCBQTYPE,SCBCONC         CONCENTRATOR SCB         S22026
         BZ    CHKBYSNC                 BRANCH IF NO             S22026
         TM    SCBSTAT1,SCBCBGN         CONCENTRATED MSG BEGIN   S22026
         BZ    TESTLC                   NO DO NOT INSERT EOA     S22026
CHKBYSNC EQU   *                                                 S22026
         TM    LCBSTAT1,LCBRECVN        INPUT                    S22025
         BNO   CHKEOA                   NO,CHECK FOR STX OR EOA  S22025
         MVC   SCBEOBAC(2),BSIZE(R1)    SET OFFSET FOR FIRST SCANS22025
         B     STX                      GO INSERT STX
CHKEOA   EQU   *
         TM    LCBSTAT2,LCBSYNC         IS DESTINATION BISYNC
         BO    STX                      YES, INSERT STX
         SPACE
         LH    R1,LCBTTCIN              GET DESTINATION KEY
         N     R1,AVTCLRHI
         L     R15,AVTRNMPT             GET ADDR OF TNT CODE
         BALR  R14,R15                  LINK TO GET TERM ENTRY ADDR
         SPACE
         USING IEDQTRM,R1
         SR    R15,R15                  PICK UP DEVICE
         IC    R15,TRMCHCIN               CHARS TABLE INDEX
         BCTR  R15,AVTEZERO             MAKE IT A TRUE INDEX
         MH    R15,AVTDCTLN             MULTIPLY BY DCT LEN    @Y17XAMG
         A     R15,AVTCSTCS             GET ADDRESS OF OUR ENTRY
         TM    THREE(R15),FLAG226R      IS DESTINATION 2260 REMOTE
         BO    STX                      YES, INSERT EOA
         SPACE
         TM    THREE(R15),FLAG2760      IS DESTINATION A 2760
         BNO   TESTLC                   NO, DON'T INSERT EOA
         SPACE
         TM    LCBSTAT2,LCBRESP         YES, IS IT TETE-A-TETE
         BNO   TESTLC                   NO, DON'T INSERT EOA
         SPACE
STX      EQU   *
         SR    RWORK2,RWORK2
         IC    RWORK2,LCBISZE           PICK UP RESERVE CHAR COUNT
         LA    RWORK2,AVTHDRSZ+1(,RWORK2) ADD PREFIX SIZE + 1
         TM    SCBQTYPE,SCBCONC         CONC                     S22026
         BZ    STINSOFF                 BRANCH IF NO             S22026
         TM    PRFSTAT1,PRFNHDRN        HEADER BUFFER            S22026
         BZ    USEHDR                   BRANCH IF YES            S22026
         LA    RWORK2,AVTTXTSZ+ONE      SET TXT OFFSET           S22026
USEHDR   EQU   *                                                 S22026
         TM    PRFSTAT1,PRFCNCLN        RECALLED                 S22026
         BZ    STINSOFF                 BRANCH IF NO             S22026
         LH    RWORK2,SCBEOB            DATA OFFSET              S22026
         LA    RWORK2,ONE(RWORK2)       ADD ONE                  S22026
STINSOFF EQU   *                                                 S22026
         ST    RWORK2,INSOFF(,RPREFIX)  SET AS INSERT OFFSET
         BO    STXLINK                  BRANCH IF RECALLED       S22026
*                                       CONCENTRATOR BUFFER      S22026
         SPACE
         SR    R0,R0
         CH    R0,SCBEOBSZ              ANY ETBS OR ITBS TO INSERT
         BE    STXLINK                  NO, DON'T SET OFFSETS
         SPACE
         BAL   R14,LCOFFST2             LINK TO SET INITIAL OFFSETS
*                                         INITIAL ETB/ITB OFFSETS
         SPACE
STXLINK  EQU   *
         TM    PRFSTAT1,PRFNHDRN        HEADER BUFFER?          SA64787
         BO    STXLINK1                 NO, BRANCH              SA64787
         SR    R15,R15                  CLEAR REGISTER 15       SA64787
         IC    R15,LCBISZE              GET NUMBER OF IDLE CHARSSA64787
         LA    R15,PRFSHDR(R15)         GET ADDRESS OF FIRST    SA64787
*                                         DATA BYTE             SA64787
         LA    RWORK2,SCTEOA            PICK UP STX ADDRESS     SA64787
         IC    RWORK2,AVTEZERO(RWORK2,RSCT7) GET INDEX TO STX   SA64787
         LA    RWORK2,AVTEZERO(RWORK2,RSCT7) GET ADDR OF STX    SA64787
         CLC   AVTEZERO(ONE,R15),AVTEZERO(RWORK2)  IS FIRST     SA64787
*                                                    BYTE A STX?SA64787
         BNE   STXLINK1                 NO, BRANCH              SA64787
         LA    RWORK2,SCTPAD            GET ADDR OF PAD CHAR    SA64787
         IC    RWORK2,AVTEZERO(RWORK2,RSCT7) GET INDEX TO PAD   SA64787
         LA    RWORK2,AVTEZERO(RWORK2,RSCT7) GET ADDR OF PAD    SA64787
         MVC   AVTEZERO(ONE,R15),AVTEZERO(RWORK2)  OVERLAY STX  SA64787
*                                                    WITH PAD   SA64787
STXLINK1 EQU   *                                                SA64787
         LA    RWORK2,SCTEOA            REQUEST STX ADDRESS
         B     MAINLOOP                 ENTER MAIN LOOP
GOTCHAR  EQU   *                                                 S22025
         L     R15,CHAR(,R1)            GET ADDR OF CHARACTERS   S22025
         LA    R15,0(,R15)              CLEAR HIGH               S22025
         SR    R0,R0                                             S22025
         IC    R0,CHARL(,R1)            GET LENGTH OF CHARACTERS S22025
         B     SETUP                    GO SETUP                 S22025
NOINSRT  EQU   *                                                 S22025
         BCTR  RDATAD,R0                BACK UP ONE              S22025
         STH   RDATAD,SCBEOBAC          SET OFFSET               S22025
         TM    PARMSTAT(R1),OPTFLD      CHARS IN OPT FIELD       S22025
         BNO   GOTCHAR                  NO                       S22025
         LA    R1,AEOFF(,R1)            GET AE PARAMETER LIST    S22025
         L     R15,AVTUI                GET INTERFACE RTN        S22025
         BALR  R14,R15                  LOCATE OPTION            S22025
         LTR   R15,R15                  OPTION FIELD FOUND       S22025
         BZ    ERRLAST                  NO                       S22025
         SR    R0,R0                    CLEAR                    S22025
         IC    R0,0(,R1)                GET LENGTH               S22025
SETUP    EQU   *                                                 S22025
         STH   R0,TWO(,RPREFIX)         SAVE LENGTH              S22025
         STH   R0,PRFXTRA+1             INDICATE DELETE LENGTH   S22025
         SLL   R0,TWFOUR                PUT IN HIGH BYTE         S22025
         LR    RSIZE,R0                 SAVE COUNT               S22025
         LR    RDATAD,R15               SAVE DATA ADDR           S22025
         LH    R1,SCBEOBAC              GET CURRENT OFFSET       S22025
SC1      EQU   *                                                 S22025
         N     R1,AVTCLRHI              CLEAR                    S22025
         CH    R1,PRFSIZE               OUT OF BUFFER            S22025
         BNL   BUFOUT                   YES                      S22025
         AR    R1,RSIZE                 PUT OFFSET WITH COUNT    S22025
         LR    R0,RDATAD                GET DATA ADDRESS         S22025
         LNR   RWORK2,RDATAD                                     S22025
         L     R15,AVTAL                SCAN ROUTINE             S22025
         BALR  R14,R15                  SCAN BUFFER              S22025
         LTR   R15,R15                  CHARS FOUND              S22025
         BNZ   FOUND                    YES                      S22025
SC2      EQU   *                                                 S22025
         LH    R1,SCBEOBAC              NO,GET CURRENT OFFSET    S22025
         AH    R1,SCBEOBSZ              ADD INTERVAL             S22025
         STH   R1,SCBEOBAC              NO, SET NEW OFFSET       S22025
         B     SC1                      SCAN AGAIN               S22025
BUFOUT   EQU   *                                                 S22025
         SH    R1,PRFSIZE               GET LEFTOVER             S22025
NOMORE   EQU   *                                                 S22025
         STH   R1,SCBEOBSZ              SAVE OFFSET              S22025
         MVC   SCBEOBAC(TWO),PRFKEY     RESTORE DLIST COUNT      S22025
         L     R15,AVTUI                GET INTERFACE            S22025
         B     FOUR(R15)                RETURN                   S22025
FOUND    EQU   *                                                 S22025
         CH    R15,TWO(,RPREFIX)        ALL CHARS FOUND          S22025
         BL    PART                     NO                       S22025
         LR    RLIM8,R0                 LOAD DATA OFFSET         S22025
         LA    RLIM8,1(,RLIM8)          BUMP OFFSET BY ONE       S22025
         STH   RLIM8,DATOFF(,RPREFIX)   STORE IT                 S22025
         STH   R15,INSOFF(,RPREFIX)     SET INSERT OFFSET        S22025
         MVI   PRFXTRA,CONTR            INDICATE DATA CONTRACTIONS22025
         LH    RLIM8,PRFSIZE            GET TOTAL SIZE           S22025
         N     RLIM8,AVTCLRHI           CLEAR                    S22025
         SR    RLIM8,R0                 GET SIZE BEYOND CHARS    S22025
         CR    RLIM8,RLIM8              SET CONDITION CODE       S22025
         BAL   R14,LINKAF               GO SHIFT DATA            S22025
         OI    PRFTQBCK+TWO,BFREDIT     INDICATE DATA MOVEMENT   S22025
         LH    RLIM8,PRFSIZE            GET OLD SIZE             S22025
         SH    RLIM8,TWO(,RPREFIX)      ADJUST FOR DELETE        S22025
         STH   RLIM8,PRFSIZE            SET NEW SIZE             S22025
         B     SC2                      GET CURRENT OFFSET       S22025
*
PART     EQU   *                                                 S22025
         TM    PRFSTAT1,PRFNLSTN        LAST BUFFER              S22025
         BNO   SC2                      YES, GET OUT             S22025
         LH    RLIM8,PRFSIZE            GET SIZE                 S22025
         N     RLIM8,AVTCLRHI           CLEAR HALF               S22025
         SR    RLIM8,R15                SUBTRACT LENGTH OF CHARS S22025
         CLC   AVTADBUF+1(3),SCBDEOB+1  LAST GOOD EOB BUFFER     S22025
         BNE   NONEOB                   NO, IGNORE EOB OFFSET    S22025
         SPACE 1                                                 S22025
         CH    RLIM8,SCBEOB             EOB IN DATA TO HOLD      S22025
         BNH   SC2                      YES, GET OUT             S22025
         SPACE 1                                                 S22025
NONEOB   EQU   *                                                 S22025
         STH   R15,SCBEOBAC             SAVE COUNT               S22025
         LA    RLIM8,ONE(,RLIM8)        BUMP FOR AO              S22025
         ST    RLIM8,INSOFF(,RPREFIX)   SET OFFSETS              S22025
         SR    RLIM8,RLIM8              SET CONDITION CODE       S22025
         IC    R15,AVTPARM+3            GET AO INDEX             S22025
         LA    R15,ONE(,R15)            INDICATE DIRECT RETURN
         STC   R15,AVTPARM3             MAKE SURE NEW UNIT GOTTENS22025
         BAL   R14,LKAORET              GO TO AO AND RETURN      S22025
         LTR   R15,R15                  OUT OF UNITS             S22025
         BNZ   ERREXIT                  YES, ERROR               S22025
         BAL   R14,FINALSIZ             GET FINAL SIZE           S22025
         LR    RDATAD,RPREFIX           GET FIRST UNIT           S22025
NEXTUNIT EQU   *                                                 S22025
         L     RDATAD,PRFTIC-IEDQPRF(,RDATAD) GET NEXT           S22025
         CH    RSIZE,AVTKEYLE           DATA END IN THIS UNIT    S22025
         BL    THISUNIT                 YES                      S22025
         SH    RSIZE,AVTKEYLE           GO TO NEXT UNIT          S22025
         B     NEXTUNIT                 NEXT                     S22025
*
THISUNIT EQU   *                                                 S22025
         L     R1,PRFLCB-1             GET LCB ADDR              S22025
*                                                                1 @R1D
         SR    RLIM8,RLIM8             CLEAR                     S22025
         IC    RLIM8,LCBISZE-IEDQLCB(R1) GET NO. OF RESERVES       @R1C
         LA    RLIM8,AVTTXTSZ(,RLIM8)  ADD PREFIX SIZE           S22025
         CR    RLIM8,RSIZE              SPACE AVAILABLE          S22025
         BH    GETUNIT                 NO, GET ANOTHER UNIT      S22025
         IC    R1,PRFNBUNT             YES, GET TOTAL NO. UNITS  S22025
         BCTR  R1,R0                   ADJUST FOR EXTRA UNIT     S22025
         LA    R15,ONE                 SET NO. UNITS FOR HOLD    S22025
         B     BLDPRF                  SET UP PREFIX FOR HOLD Q  S22025
GETUNIT  EQU   *                                                 S22025
         SR    R0,R0                    CLEAR                    S22025
         STH   R0,INSOFF(,RPREFIX)     SET SPACE AVAILABLE TO 0  S22025
         BAL   R14,LINK                GO GET ANOTHER UNIT       S22025
         LTR   R15,R15                 UNIT AVAILABLE            S22025
         BNZ   ERREXIT                 NO,ERROR                  S22025
         LH    R15,PRFSIZE              GET SIZE PLUS NEW UNIT   S22025
         N     R15,AVTCLRHI            CLEAR                     S22025
         SH    R15,AVTKEYLE            GET CORRECT SIZE          S22025
         STH   R15,PRFSIZE             STORE                     S22025
         SR    R1,R1                   CLEAR                     S22025
         IC    R1,PRFNBUNT             GET NO.UNITS TOTAL        S22025
         SH    R1,AVTHA2               ADJUST FOR TWO NEW ONES   S22025
         AH    RSIZE,AVTKEYLE          ADJUST DATA OFFSET        S22025
         LH    R15,AVTHA2              SET NUMBER OF UNITS GOTTENS22025
BLDPRF   EQU   *                                                 S22025
         ST    RSCB3,AVTUMALN(,RDATAD) PUT SCB ADDR IN NEW BUF   S22025
         STC   R1,PRFNBUNT             SET NO. UNITS IN OLD BUF  S22025
         MVC   MVOFF(LEN,RDATAD),MVOFF(RPREFIX) MOVE PREFIX FLDS S22025
         L     RWORK2,AVTADBUF          SAVE POINTER OF ORIGINAL S22025
         ST    RDATAD,AVTADBUF          SET FOR NEW              S22025
         LR    RPREFIX,RDATAD          SET BASE TO NEW BUFFER    S22025
         STC   R15,PRFNBUNT            SET NO. UNITS IN NEW BUF  S22025
         LA    R15,ONE(,RSIZE)         GET DATA OFFSET PLUS 1    S22025
         STH   R15,DATOFF(,RPREFIX)    SET OFFSET FOR AF         S22025
         AH    RSIZE,SCBEOBAC          ADD CHAR LEN TO OFFSET    S22025
         STH   RSIZE,PRFSIZE           SET AS SIZE IN NEW BUF    S22025
         BCTR  R15,R0                  SUBTRACT ONE FROM OFFSET  S22025
         SR    R15,RLIM8               ADJUST FOR PREFIX,RESERVS S22025
         STH   R15,INSOFF(,RPREFIX)    SET SPACE AVAILABLE IN NEWS22025
         OI    PRFSTAT1,PRFNHDRN       INSURE TEXT BUFFER        S22025
         OI    PRFTQBCK+TWO,BFREDIT     INDICATE DATA MOVEMENT   S22025
         STH   RLIM8,PRFSCAN           SET SCAN PAST PRF,RESERVS S22025
         LH    RLIM8,SCBEOBAC          GET LENGTH OF CHAR STRING S22025
         CR    RLIM8,RLIM8             SET CONDITION CODE        S22025
         BAL   R14,LINKAF              CLOSE UP NEW BUFFER       S22025
         LH    RLIM8,PRFSIZE           GET SIZE + AVAIL. SPACE   S22025
         SH    RLIM8,INSOFF(,RPREFIX)  SUBTRACT SPACE AVAILABLE  S22025
         STH   RLIM8,PRFSIZE           STORE CORRECT SIZE        S22025
         LH    R14,AVTHA2              GET TIC ADDR FOR LAST UNITS22025
         SR    R15,R15                 CLEAR                     S22025
         IC    R15,PRFNBUNT            GET NO. UNITS IN NEW BUF  S22025
         CR    R15,R14                 TWO UNITS GOTTEN     BUF  S22025
         BL    ONEUNIT                 NO, FIRST UNIT IS LAST    S22025
         L     RDATAD,PRFTIC           POINT TO NEXT UNIT        S22025
ONEUNIT  EQU   *                                                 S22025
         ST    R14,PRFTIC-IEDQPRF(,RDATAD) PUT IN INVALID TIC ADDR22025
         MVI   PRFTIC-IEDQPRF(RDATAD),EIGHT SET TIC FLAG         S22025
         LR    RDATAD,RPREFIX          POINT TO FIRST UNIT       S22025
         LR    RPREFIX,RWORK2           GET ORIGINAL BUF         S22025
         ST    RPREFIX,AVTADBUF         RESET TO OLD             S22025
         L     R1,FOUR(,R13)            GET PREV SAVE            S22025
         L    R1,REG1OFF(,R1)          GET AK'S PARMLIST         S22025
         MVC   FIVE(3,RDATAD),NINE(R1)  LINK QUEUED TO NEW       S22025
         ST   RDATAD,EIGHT(,R1)         PUT NEW ON QUEUE         S22025
         SR    R1,R1                    SET OFFSET FOR NEXT      S22025
         B     NOMORE                   GET OUT                  S22025
*
         EJECT
SETAC    EQU   *                                                 S22025
         STH   R0,SCBEOBAC             NO,SET INITIAL OFFSET     S22025
TESTLC   EQU   *
         SR    R0,R0
         CH    R0,SCBEOBSZ              ANY LC CHARACTERS TO INSERT
         BNE   NOCT                     CANNOT BE BLOCK ON CNT @SA74884
         CH    R0,SCBEOBAC              IS IT ON COUNT           S22025
         BE    LAST                     NO,GO TO END PROCESSING@SA74884
NOCT     EQU   *                                                 S22025
         SPACE
         BAL   R14,LCOFFSET             LINK TO SET INITIAL OFFSETS
         SPACE
TESTLC2  EQU   *
         BAL   R14,LCSELECT             GET 1ST LC CHAR TO INSERT
         SPACE
         ST    RDATAD,INSOFF(,RPREFIX)  YES, SET INSERT OFFSET
***********************************************************************
*                        ENTER   MAIN   LOOP                     S22025
***********************************************************************
         EJECT
MAINLOOP EQU   *
         NR    RWORK2,RWORK2            SET COND CODE = 8 OR 4 @SA74884
         BAL   R14,GETSCTAD             GO INSERT IT
         SPACE
         LTR   R15,R15                  HAVE WE RUN OUT OF UNITS
         BNZ   ERREXIT                  YES, EXIT IMMEDIATELY
         SPACE
         LH    RDATAD,DATOFF(,RPREFIX)  GET CURRENT DATA OFFSET
         N     RDATAD,AVTCLRHI
         LH    RSIZE,PRFSIZE            GET TOTAL DATA LENGTH
         N     RSIZE,AVTCLRHI
         LA    RSIZE,ONE(,RSIZE)        POINT BEYOND LAST BYTE
         SR    RSIZE,RDATAD             SUBTRACT TO GET RESIDUAL CT
         CH    R15,SCBEOBSZ             BLOCK ON COUNT           S22025
         BE    COMPEOB                  NO                       S22025
         SPACE
         CLI   SCBITBSZ,AVTEZERO        ARE ITBS BEING INSERTED
         BE    COMPEOB                  NO, GO PICK UP EOB EXTENT
         SPACE
         SR    RDATAD,RDATAD
         IC    RDATAD,SCBITBSZ          PICK UP ITB INTERVAL
         B     TESTNEXT                 GO SEE IF ANOTHER WILL FIT
         SPACE
COMPEOB  EQU   *
         LH    RDATAD,SCBEOBSZ          GET EOB INTERVAL
         N     RDATAD,AVTCLRHI
         BNZ   TESTNEXT                 YES, CHECK AVAIL SPACE   S22025
         CH    RDATAD,SCBEOBAC          ACCUM COUNT ZERO         S22025
         BE    CLOSEUP                  GO TO END PROCESSING     S22025
         SPACE 2                                                 S22025
SCANRTN  EQU   *                                                 S22025
HERE     EQU   *                                                 S22025
         SPACE 2                                                 S22025
         LH    RSIZE,PRFSIZE            GET TOTAL DATA LENGTH    S22025
         N     RSIZE,AVTCLRHI                                    S22025
         LA    RSIZE,ONE(,RSIZE)        BUMP PAST END OF BUFFER  S22025
         SH    RSIZE,DATOFF(,RPREFIX)   GET UNMOVED LENGTH       S22025
         CLC   DATOFF(2,RPREFIX),PRFSIZE  OUT OF BUFFER          S22025
         BH    LAST                     YES, GET OUT             S22025
         BAL   RWORK10,LINKAXM          SCAN FOR CHARS           S22025
         LTR   R15,R15                  CHARACTER FOUND          S22025
         BZ    CLOSEUP                  DIDN'T FIND ENDCHAR      S22025
         IC    RDATAD,SCBBCTR           GET COUNTER              S22025
         LA    RDATAD,ONE(,RDATAD)      BUMP ONE                 S22025
         STC   RDATAD,SCBBCTR           RESTORE COUNTER          S22025
         AR    R15,R0                   GET OFFSET OF NEXT       S22025
         LR    RWORK2,R15               SAVE DATA OFFSET         S22025
         LR    RLIM8,R15                SET LENGTH               S22025
         SH    RLIM8,DATOFF(,RPREFIX)   GET LENGTH               S22025
         CR    RLIM8,RLIM8              SET CONDITION CODE       S22025
         BAL   R14,LINKAF               SHIFT ONE SUBBLOCK       S22025
         STH   RWORK2,DATOFF(,RPREFIX)  SET NEW OFFSET           S22025
         CLC   SCBBLKCT(1),SCBBCTR      HAS COUNT REACHED MAX    S22025
         BH    HERE                     NO,GET TOTAL LENGTH    @SA74884
         LH    RWORK2,INSOFF(,RPREFIX)  GET INSERT OFFSET        S22025
         LA    RWORK2,ONE(,RWORK2)      ADJUST FOR EOB           S22025
         STH   RWORK2,INSOFF(,RPREFIX)  STORE NEW OFFSET         S22025
         LA    RWORK2,SCTEOB            GET EOB OFFSET           S22025
         MVI   SCBBCTR,AVTEZERO         SET CTR BACK TO ZERO     S22025
         B     MAINLOOP                 GO TO INSERTING LOOP     S22025
LINKAXM  EQU   *                                                 S22025
         LA    R1,SCBCRLEN              GET PARAMETER LIST       S22025
         LH    R0,DATOFF(,RPREFIX)      LOAD DATA OFFSET         S22025
         N     R0,AVTCLRHI              CLEAR TOP HALF OF REG    S22025
         LR    RSCB3,RWORK2             SAVE COUNT OR BLOCK    @SA74884
         BCTR  R0,R0                    SUBTRACT ONE             S22025
         LNR   RWORK2,R0                INSURE R2 NEGATIVE       S22025
         L     R15,AVTAX                LOAD SCAN ROUT ADDR      S22025
         BALR  R14,R15                  LINK TO SCAN             S22025
         LR    RWORK2,RSCB3             RESTORE COUNT OR BLOCK  SA67120
         L     RSCB3,LCBSCBA-1          RESTORE SCB ADDRESS     SA67120
         BR    RWORK10                  RETURN                   S22025
         SPACE
TESTNEXT EQU   *
         CR    RDATAD,RSIZE             WILL ANOTHER LC CHAR FIT
         BNL   CLOSEUP                  NO, SHIFT TO END OF DATA
         SPACE
         LR    RLIM8,RDATAD             YES, SHIFT TO NEXT LC CHAR
         CR    RLIM8,RLIM8              SET CONDITION CODE = 8
         BAL   R14,LINKAF               GO SHIFT DATA
         SPACE
         LH    RSIZE,PRFSIZE            RESET TRUE
         N     RSIZE,AVTCLRHI             BUFFER SIZE
         BAL   R14,LCSELECT             GET NEXT LC CHAR TO INSERT
         SPACE
         B     MAINLOOP                 REENTER TO INSERT NEXT LC
         SPACE 3
CLOSEUP  EQU   *
         LR    RLIM8,RSIZE              SHIFT TO END OF DATA
         CR    RLIM8,RLIM8              SET CONDITION CODE = 8
         BAL   R14,LINKAF               GO SHIFT DATA
         SPACE
*        B     LAST                     ENTER END PROCESSING
         EJECT
LAST     EQU   *
         SR    R0,R0
         TM    SCBQTYPE,SCBCONC         SCB FOR A CONCENTRATOR   S22026
         BZ    CKLAST                   BRANCH IF NO             S22026
         TM    SCBSTAT1,SCBCEND         CONCENTRATED END OF MSG  S22026
         BO    LASTBFR                  YES,GO PROCESS           S22026
         B     CKINSERT                 BRANCH TO SKIP CHK       S22026
CKLAST   EQU   *                                                 S22026
         TM    PRFSTAT1,PRFNLSTN        IS THIS LAST BUFFER
         BNO   LASTBFR                  YES, GO PROCESS
CKINSERT EQU   *                                                 S22026
         SPACE
         TM    INSOFF(RPREFIX),INSRTCHK ANY INSERTS DONE         S22025
         BO    TESTUPAC                 NO, SIZE IS UNCHANGED
         SPACE
         CR    RPREFIX,RPREFIX          SET CONDITION CODE = 8
         BAL   R14,FINALSIZ             YES, COMPUTE FINAL SIZE
         SPACE
TESTUPAC EQU   *
         CH    R0,SCBEOBSZ              ARE EOBS BEING INSERTED
         BE    EXIT                     NO, EXIT
         SPACE
         LA    RSIZE,ONE(,RSIZE)        POINT BEYOND END OF DATA
         CLI   SCBITBSZ,AVTEZERO        ARE ITBS BEING INSERTED
         BE    UPEOBAC                  NO, GO UPDATE EOBAC
         SPACE
         LH    RDATAD,PRFITBAC          YES, GET OFFSET TO NEXT ITB
         N     RDATAD,AVTCLRHI
         SR    RDATAD,RSIZE             SUBTRACT AND SET INITIAL
         STC   RDATAD,SCBITBAC            ITB OFFSET FOR NEXT BFR
         SPACE
UPEOBAC  EQU   *
         LH    RDATAD,SCBEOBAC          GET OFFSET TO NEXT EOB
         N     RDATAD,AVTCLRHI
         SR    RDATAD,RSIZE             SUBTRACT AND SET INITIAL
         STH   RDATAD,SCBEOBAC            EOB OFFSET FOR NEXT BFR
         B     EXIT                     EXIT
         EJECT
LASTBFR  EQU   *
         TM    INSOFF(RPREFIX),INSRTCHK ANY INSERTS DONE         S22025
         BZ    TESTEOT                  YES, INSERT OFFSETS ARE SET
         SPACE
         LA    RSIZE,ONE(,RSIZE)        POINT BEYOND LAST BYTE
         ST    RSIZE,INSOFF(,RPREFIX)   SET AS INSERT OFFSET
         SPACE
TESTEOT  EQU   *
         LH    RDATAD,DATOFF(,RPREFIX)  PICK UP DATA OFFSET
         N     RDATAD,AVTCLRHI
         SH    RDATAD,INSOFF(,RPREFIX)  POINT TO INSERT POINT
         BCTR  RDATAD,AVTEZERO          POINT TO LAST BYTE
         LR    RWORK2,RPREFIX           LOAD PREFIX ADDR         S22025
         BAL   R14,ENTERLOP             GET ADDR OF SCAN POINTER S22025
         SPACE
         LA    RWORK2,SCTEOT            REQUEST EOT ADDRESS
         SR    R15,R15                  SET CONDITION CODE
         BAL   R14,GETSCTAD             GO GET IT
         SR    R15,R15                  CLEAR REGISTER 15       SA64788
         SPACE
         CLI   0(RWORK2),TWO           IS SCT ENTRY LENGTH 2 (ETX-EOT)
         BNE   COMPEOT                 NO, POINTING TO EOT, GO ON
         SPACE
         CLC   AVTEZERO(ONE,RDATAD),TWO(RWORK2) IS LAST DATA    SA64787
*                                                 BYTE AN EOT?  SA64787
         BNE   COMPEOT                  NO, BRANCH              SA64787
         LA    R15,ONE                  SET NUMBER OF BYTES TO  SA64787
*                                         BE DELETED TO 1       SA64787
         BCTR  RDATAD,AVTEZERO          GET ADDR OF NEXT-TO-LASTSA64787
*                                         DATA BYTE             SA64787
COMPEOT  EQU   *                                                SA64787
         CLC   AVTEZERO(ONE,RDATAD),ONE(RWORK2) IS LAST BYTE AN SA64787
*                                                 EOT OR NEXT   SA64787
*                                                 TO LAST BYTE  SA64787
*                                                 AN ETX?       SA64787
         BNE   CHKSIZE                  NO, GO ADJUST PRFSIZE   SA64787
         LA    R15,ONE(R15)             ADD 1 TO NUMBER OF      SA64787
*                                         BYTES TO BE DELETED   SA64787
         BCTR  RDATAD,0                 DECREMENT                  @01A
* AT THIS POINT ONE OF 3 CONDITIONS EXISTS, EITHER:                @21A
* 1-A ONE-BYTE EOT IS TO BE INSERTED AND THE LAST BYTE OF          @21A
*   DATA WAS AN EOT AND NOW R15=1 OR                               @21A
* 2-A TWO-BYTE EOT WILL BE INSERTED(ETX/EOT) AND THE LAST          @21A
*   TWO BYTES OF DATA WERE ETX/EOT AND NOW R15=2 OR                @21A
* 3-A TWO-BYTE EOT WILL BE INSERTED AND THE LAST BYTE OF           @21A
*   DATA WAS ETX AND NOW R15=1.                                    @21A
         B     BRANCH          GO SHORTEN BY COUNT IN R15          @21A
CHKSIZE  EQU   *                                                SA64787
         SPACE
* AT THIS POINT, IF A ONE-BYTE EOT IS TO BE INSERTED, R15=0        @21A
* AND THERE IS NO NEED  TO CHECK FOR EOB. IF A TWO-BYTE            @21A
* EOT IS TO BE INSERTED, WE MUST INSURE THAT THE ETX WILL          @21A
* OVERLAY ANY EOB AT THE END OF THE DATA.                          @21A
         CLI   0(RWORK2),ONE   IS EOT ONE BYTE                     @21A
         BE    BRANCH          YES, BRANCH TO END                  @21A
         LA    RWORK2,SCTEOB            OFFSET TO INDEX            @01A
         SR    R14,R14                  CLEAR REGISTER             @01A
         BAL   R14,GETSCTAD             GET SCT ADDR               @01A
         SR    R14,R14                  CLEAR                      @01A
         IC    R14,AVTEZERO(,RWORK2)    PICK EOB LENGTH            @01A
         BCTR  R14,0                    DECREMENT LENGTH           @01A
         EX    R14,COMPEOT              EOB                        @01A
         BE    INC                      BRANCH, YES                @01A
         CLI   0(RWORK2),TWO   STX PRECEDE EOB?                    @21C
         BNE   BRANCH                   BRANCH, NO                 @01A
         CLC   AVTEZERO(ONE,RDATAD),ONE(RWORK2) LAST BYTE EOB      @01A
         BNE   BRANCH                   BRANCH, NO                 @01A
INC      LA    R15,ONE(R15)             INCREMENT NUMBER           @01A
BRANCH   EQU   *                                                   @01A
         LH    RWORK2,DATOFF(,RPREFIX)  DECREMENT DATA OFFSET      @01C
         SR    RWORK2,R15                 TO OVERLAY EOT AND/OR SA64787
*                                         ETX                   SA64787
         STH   RWORK2,DATOFF(,RPREFIX)    CURRENTLY IN THE BUFFER
         SPACE
         LH    RWORK2,PRFSIZE           DECREMENT DATA SIZE
         SR    RWORK2,R15                 TO COMPENSATE FOR     SA64787
         STH   RWORK2,PRFSIZE           OVERLAID EOT AND/OR ETX SA64787
         EJECT
TESTBSC  EQU   *
         SR    R0,R0                    CLEAR                    S22025
         TM    LCBSTAT2,LCBSYNC         IS DESTINATION BISYNC
         BO    SETEOT                   YES, GO INSERT EOT
         SPACE
         CH    R0,SCBEOBSZ              ARE EOBS BEING INSERTED
         BNE   SETEOBT                  YES,SET PARAMETERS       S22025
         CH    R0,SCBEOBAC              BLOCK ON COUNT           S22025
         BE    SETEOT                   NO, GO INSERT EOT
         SPACE
SETEOBT  EQU   *
         LA    RWORK2,SCTEOB            REQUEST EOB ADDRESS
         SR    R15,R15                  SET CONDITION CODE
         BAL   R14,GETSCTAD             GO GET IT
         SPACE
         IC    R15,AVTEZERO(,RWORK2)    PICK UP EOB LENGTH
         BCTR  R15,AVTEZERO             (DECREMENT FOR EXECUTE)
         EX    R15,MOVEX                MOVE EOB TO AVT WORK AREA
         LA    RWORK10,ONE(,R15)        RESET & HOLD EOB LENGTH
         SPACE
         LA    RWORK2,SCTEOT            REQUEST EOT ADDRESS
         SR    R15,R15                  SET CONDITION CODE
         BAL   R14,GETSCTAD             GO GET IT
         SPACE
         IC    R15,AVTEZERO(,RWORK2)    PICK UP EOT LENGTH
         BCTR  R15,AVTEZERO             (DECREMENT FOR EXECUTE)
         AR    RAVT9,RWORK10            BUMP AVT BASE BY EOB LENGTH
         EX    R15,MOVEX                MOVE EOT TO AVT WORK AREA
         SR    RAVT9,RWORK10            CORRECT AVT BASE
         SPACE
         LA    R15,ONE(RWORK10,R15)     GET LNG OF EOB + LNG OF EOT
         LA    RWORK2,AVTDOUBL          GET ADDR OF EOB + EOT
         LTR   RWORK2,RWORK2            SET CONDITION CODE
         BAL   R14,LINKAOBT             GO INSERT IT AND EXIT
         SPACE
SETEOT   EQU   *
         LA    RWORK2,SCTEOT            REQUEST EOT ADDRESS
         LTR   RWORK2,RWORK2            SET CONDITION CODE = 2
         BAL   R14,GETSCTAD             INSERT EOT AND EXIT
         EJECT
LCOFFSET EQU   *
         SR    RWORK2,RWORK2
         IC    RWORK2,LCBISZE           PICK UP RESERVE CHAR COUNT
         LA    RWORK2,AVTTXTSZ+1(,RWORK2) ADD LNGTH OF TEXT PREFIX
         TM    PRFSTAT1,PRFNHDRN        IS THIS A HEADER BUFFER
         BO    LCOFFST2                 NO, PRE-DATA SIZE IS GOOD
         SPACE
         LA    RWORK2,AVTHDRSZ-AVTTXTSZ(,RWORK2) YES, ADD EXTRA
         SPACE
LCOFFST2 EQU   *
         SR    RDATAD,RDATAD            CLEAR                    S22025
         CH    RDATAD,SCBEOBSZ          BLOCK LENGTH SPECIFIED   S22025
         BNE   LCOFFST3                 NO                       S22025
         CH    RDATAD,SCBEOBAC          BLOCK ON COUNT           S22025
         BE    LCOFFST3                 GET EOB OFFSET           S22025
         ST    RWORK2,INSOFF(,RPREFIX)  SET INITIAL OFFSET       S22025
         B     SCANRTN                  SCAN FOR CHARACTERS      S22025
*
LCOFFST3 EQU   *                                                 S22025
         LH    RDATAD,SCBEOBAC          PICK UP EOB OFFSET IN DATA
         LA    RDATAD,AVTEZERO(RWORK2,RDATAD) ADD PRE-DATA SIZE
         STH   RDATAD,SCBEOBAC          STORE BACK OFFSET INTO UNIT
         SPACE 1                                                 S22025
         TM    LCBSTAT1,LCBRECVN        INPUT                    S22025
         BO    NOINSRT                  YES, BRANCH              S22025
         SPACE
         CLI   SCBITBSZ,AVTEZERO        ARE ITBS BEING INSERTED
         BCR   ZERO,R14                 NO, RETURN TO CALLER
         SPACE
         SR    RDATAD,RDATAD
         IC    RDATAD,SCBITBAC          PICK UP ITB OFFSET IN DATA
         AR    RDATAD,RWORK2            ADD PRE-DATA SIZE
         STH   RDATAD,PRFITBAC          STORE OFFSET INTO UNIT
         BR    R14                      RETURN TO CALLER
         EJECT
LCSELECT EQU   *
         CLI   SCBITBSZ,AVTEZERO        ARE ITBS BEING INSERTED
         BALR  R15,AVTEZERO             (SAVE CONDITION CODE)
         BE    SETEOB                   NO, NO ITB, GO SET EOB
         SPACE
         CLC   PRFITBAC(TWO),SCBEOBAC   IS NEXT LC CHAR AN ITB
         BL    SETITB                   YES, GO SET ITB
         SPACE
SETEOB   EQU   *
         LH    RDATAD,SCBEOBAC          PICK UP EOB OFFSET
         N     RDATAD,AVTCLRHI
         LA    RWORK2,SCTEOB            SET SCT INDEX TO EOB
         CR    RDATAD,RSIZE             WILL EOB FIT IN THIS BUFFER
         BH    LAST                     NO, GO TO END PROCESSING
         SPACE
         LH    RWORK10,SCBEOBSZ         PICK UP EOB EXTENT
         LA    RWORK10,AVTEZERO(RWORK10,RDATAD) GET NEXT EOB OFFSET
         STH   RWORK10,SCBEOBAC         SET IT BACK IN SCB
         SPACE
         SPM   R15                      ARE ITBS BEING INSERTED
         BCR   EQUAL,R14                NO, RETURN
         SPACE
UPITBAC  EQU   *
         SR    RWORK10,RWORK10
         IC    RWORK10,SCBITBSZ         PICK UP ITB EXTENT
         LA    RWORK10,AVTEZERO(RWORK10,RDATAD) GET NEXT ITB OFFSET
         STH   RWORK10,PRFITBAC         SET IT BACK IN PREFIX
         BR    R14                      RETURN
         SPACE
SETITB   EQU   *
         LH    RDATAD,PRFITBAC          PICK UP ITB OFFSET
         N     RDATAD,AVTCLRHI
         LA    RWORK2,SCTITB            SET SCT INDEX TO ITB
         CR    RDATAD,RSIZE             WILL ITB FIT IN THIS BUFFER
         BH    LAST                     NO, GO TO END PROCESSING
         SPACE
         B     UPITBAC                  YES, GO SET NEXT ITB OFFSET
         EJECT
GETSCTAD EQU   *
         IC    RWORK2,AVTEZERO(RWORK2,RSCT7) PICK UP INDEX TO ITEM
         LA    RWORK2,AVTEZERO(RWORK2,RSCT7) PICK UP ADDR OF ITEM
         BCR   ZERO,R14                 RETURN IF ZERO CONDITION
         SPACE
LINKAO   EQU   *
         SR    R15,R15                  CLEAR FOR INSERT
         IC    R15,AVTEZERO(,RWORK2)    PICK UP INSERT DATA LENGTH
         LA    RWORK2,ONE(,RWORK2)      GET INSERT DATA ADDRESS
         SPACE
*
LINKAOBT EQU   *                        SPECIAL ENTRY FOR EOB & EOT
         ST    RWORK2,AVTPARM3          SET ADDRESS IN PARM LIST
         STC   R15,AVTPARM3             SET LENGTH IN PARM LIST
         SPM   R14                      IS EOT BEING INS5RTED
         BP    LINKAOET                 YES, LEAVE AC FIELDS ALONE
         SR    R1,R1                    CLEAR                    S22025
         CH    R1,SCBEOBSZ              BLOCK LENGTH SPECIFIED   S22025
         BE    LINKAOET                 NO, BLOCK ON COUNT       S22025
         SPACE
         LH    R1,PRFITBAC              INCREMENT ITB
         LA    R1,AVTEZERO(R15,R1)        OFFSET BY
         STH   R1,PRFITBAC                INSERT LENGTH
         SPACE
         LH    R1,SCBEOBAC              INCREMENT EOB
         LA    R1,AVTEZERO(R15,R1)        OFFSET BY
         STH   R1,SCBEOBAC                INSERT LENGTH
         SPACE
LINKAOET EQU   *
         IC    R15,AVTPARM+3            PICK UP IEDQAO INDEX
LKAORET  EQU   *
         STC   R15,AVTPARM              SET INDEX IN PARM LIST
         MVI   AVTPARM+1,AVTEZERO       INDICATE DATA TYPE= CHARS
         SPACE
LINK     EQU   *
         LA    R1,AVTPARM               POINT TO SUBRTN'S PARM LIST
         L     R15,AVTUI                GET USER INTERFACE ADDRESS
         SPM   R14                      TEST PASSED CONDITION CODE
         BCR   NOTPOS,R15               NOT POSITIVE, LINK AND
*                                         RETURN TO CALLER
         BALR  R14,R15                  POSITIVE, LINK AND
*                                         RETURN HERE
         LTR   R15,R15                  HAVE WE RUN OUT OF UNITS
         BNZ   ERREXIT                  YES, GO HANDLE IT
         SPACE
FINALSIZ EQU   *
         LH    RSIZE,DATOFF(,RPREFIX)   GET FINAL DATA OFFSET
         N     RSIZE,AVTCLRHI
         SH    RSIZE,INSOFF(,RPREFIX)   GET FINAL DATA SIZE
         BCTR  RSIZE,AVTEZERO           POINT TO LAST BYTE OF DATA
         STH   RSIZE,PRFSIZE            SET IN BUFFER
         SPM   R14                      TEST PASSED CONDITION CODE
         BCR   ZERO,R14                 IF ZERO, RETURN TO CALLER
         SPACE
EXIT     EQU   *
         L     R13,FOUR(,R13)           PT TO CALLED SAVE AREA   S22025
         L     R1,REG1OFF(,R13)         LOAD PARAMETER LIST ADDR
         SPACE
EXIT2    EQU   *
         L     RSCB3,LCBSCBA-1          RESTORE SCB ADDR         S22026
         TM    LCBSTAT1,LCBRECVN        INPUT                    S22025
         BO    EXIT3                    YES
         SR    R15,R15                  CLEAR REGISTER           S22025
         IC    R15,ONE(,R1)             GET LENGTH OF PARM LIST  S22025
         LA    R1,AVTEZERO(R15,R1)      POINT TO NEXT PARAMETER  S22025
         LA    R13,AVTSAVE2             INITIALIZE SAVE AREA     S22025
         L     R15,AVTUI                GET ADDR OF INTERFACE    S22025
         BR    R15                         MODULE AND BRANCH     S22025
EXIT3    EQU   *
         L     R15,AVTUI                GET INTERFACE
         B     FOUR(R15)                RETURN
         SPACE 3
LINKAF   EQU   *
         IC    R15,AVTPARM+2            PICK UP IEDQAF INDEX
         LA    R15,ONE(,R15)            REQUEST SHIFT-DATA FUNCTION
         STC   R15,AVTPARM              SET INDEX IN PARM LIST
         B     LINK                     GO PERFORM LINK
         SPACE 3
ERREXIT  EQU   *
         OI    SCBERR1,SCBNOBFN         SET 'INSUFF BUFFERS' BIT
         TM    SCBQTYPE,SCBCONC         CONCENTRATOR             S22026
         BZ    NOTCONCZ                 BRANCH IF NO             S22026
         TM    SCBSTAT1,SCBCEND         CONC MSG END             S22026
         BO    ERRLAST                  BRANCH IF YES            S22026
         B     NOTCONCY                 SKIP EOM BUF CHECK       S22026
NOTCONCZ EQU   *                                                 S22026
         TM    PRFSTAT1,PRFNLSTN        IS THIS LAST BUFFER
         BNO   ERRLAST                  YES, GO CLEAR SCB FIELD
NOTCONCY EQU   *                                                 S22026
         SPACE
         MVC   SCBEOBAC,SCBEOBSZ        NO, SET INITIAL OFFSETS FOR
         MVC   SCBITBAC,SCBITBSZ          NEXT BFR AS IF FIRST BFR
         B     EXIT                     EXIT
         SPACE
ERRLAST  EQU   *
         SR    R15,R15                  CLEAR SCB FIELD
         STH   R15,SCBEOBAC               TO ZEROES
         B     EXIT                     EXIT
ADDRLOOP EQU   *                                                 S22025
         L     RWORK2,PRFTIC-IEDQPRF(,RWORK2) POINT TO NEXT UNIT S22025
         SH    RSCAN,AVTKEYLE           SUBT NO OF BYTES PASSED  S22025
ENTERLOP EQU   *                                                 S22025
         CH    RSCAN,AVTKEYLE           IS ITEM IN THIS UNIT     S22025
         BH    ADDRLOOP                 NO, TEST NEXT UNIT       S22025
         LA    RSCAN,AVTUMALN-1(RSCAN,RWORK2) YES, UNIT ADDR     S22025
         BR    R14                      RETURN TO CALLER         S22025
         SPACE 3
********* EXECUTED INSTRUCTION **********
         SPACE
MOVEX    MVC   AVTDOUBL(ONE),ONE(RWORK2) BUILD EOB/EOT STRING
*
REG2SAVE DS    F                       USED TO SAVE REGISTER 2   S99528
         EJECT
********* DSECTS **********
         SPACE
         TAVTD
         EJECT
         DCBD DSORG=TX
         EJECT
         TLCBD
         EJECT
         TPRFD
         SPACE
PRFITBAC EQU   PRFSCAN                  OFFSET TO NEXT ITB
         EJECT
         TPRIOR
         EJECT
         TSCBD
         EJECT
         TTRMD
         SPACE
         END
