         TITLE 'IEDQB3 - AUTOMATIC DATE/TIME INSERTION ROUTINE'
IEDQB3   CSECT
* CHANGE ACTIVITY = AS FOLLOWS:
*D213400-214600,705000-726000                                   SA56226
*C215400                                                        SA56226
*A156000                                                       @OX14779
*C402000-417000                                                @OX14779
***********************************************************************
*                                                                     *
* MODULE-NAME = IEDQB3                                                *
*                                                                     *
* DESCRIPTIVE-NAME = AUTOMATIC DATE/TIME INSERTION ROUTINE            *
*                                                                     *
* COPYRIGHT = 'NONE'                                                  *
*                                                                     *
* STATUS - CHANGE LEVEL=00                                            *
*                                                                     *
*                                                                     *
* FUNCTION - THIS ROUTINE EXPANDS A HEADER BUFFER AND INSERTS THE     *
*    DATE AND TIME.  THIS FUNCTION IS PERFORMED ONLY FOR TPROCESS     *
*    ENTRIES THAT SPECIFY DATE=YES.  IT ALSO REQUIRES THAT DATE=YES   *
*    BE CODED ON THE ASSOCIATED PCB MACRO.                            *
*                                                                     *
*                                                                     *
* ENTRY POINTS - IEDQB3                                               *
*                                                                     *
*                                                                     *
* INPUT - REGISTER  3 HAS THE SCB ADDRESS                             *
*         REGISTER  4 HAS THE LCB ADDRESS                             *
*         REGISTER  9 HAS THE AVT ADDRESS                             *
*         REGISTER  6 HAS THE BUFFER ADDRESS                          *
*         REGISTER 13 HAS A SAVEAREA ADDRESS                          *
*         REGISTER 14 HAS A RETURN ADDRESS                            *
*         REGISTER 15 HAS THE ENTRY POINT ADDRESS                     *
*                                                                     *
*                                                                     *
* OUTPUT - NONE                                                       *
*                                                                     *
*                                                                     *
* EXTERNAL REFERENCES - AVT,SCB,LCB,BUFFER,BUFFER POOL                *
*                                                                     *
*                                                                     *
* EXITS,NORMAL - RETURN TO ADDRESS IN REGISTER 14                     *
*                                                                     *
* EXITS,ERROR - NONE                                                  *
*                                                                     *
*                                                                     *
* TABLES/WORKAREAS - AVTDOUBL                                         *
*                                                                     *
*                                                                     *
* ATTRIBUTES - SERIALLY REUSABLE, REFRESHABLE, ENABLED, RESIDENT,     *
*    PROBLEM PROBLEM MODE                                             *
*                                                                     *
*                                                                     *
* CHARACTER CODE DEPENDENCIES - THE OPERATION OF THIS MODULE HAS      *
*    NO CHARACTER CODE DEPENDENCIES.                                  *
*                                                                     *
* NOTES - NONE                                                        *
*                                                                     *
***********************************************************************
         EJECT
R0       EQU   0                        WORK REGISTER
R1       EQU   1                        INPUT REGISTER
RWORK2   EQU   2                        WORK REGISTER
RSCB     EQU   3                        SCB BASE
RLCB     EQU   4                        LCB BASE
RWORK3   EQU   5                        WORK REGISTER
RPREFIX  EQU   6                        BUFFER BASE REGISTER
RWORK4   EQU   7                        WORK REGISTER
RBUF     EQU   8                        BUFFER POINTER
RAVT     EQU   9                        AVT BASE REGISTER
RWORK    EQU   10                       WORK REGISTER
RWORK1   EQU   11                       WORK REGISTER
RBASE    EQU   12                       MODULE BASE REGISTER
RSAVE    EQU   13                       SAVEAREA BASE REGISTER
RETURN   EQU   14                       RETURN REGISTER
RTO      EQU   14                       WORK REGISTER
RENTRY   EQU   15                       ENTRY POINT REGISTER
RFROM    EQU   15                       WORK REGISTER
OFF1     EQU   1                        OFFSET OF 1
OFF5     EQU   5                        OFFSET OF 5
FOUR     EQU   4                        CONSTANT OF FOUR       @OX14779
OFF8     EQU   8                        OFFSET OF 8
ROFF     EQU   12                       OFFSET OF 12
         EJECT
         USING IEDQB3,RBASE             ADDRESSABILITY
         USING IEDQSCB,RSCB             SCB ADDRESSABILITY
         USING IEDQLCB,RLCB             LCB ADDRESSABILITY
         USING IEDQPRF,RPREFIX          BUFFER ADDRESSABILITY
         USING IEDQAVTD,RAVT            AVT ADDRESSABILITY
         STM   RETURN,RBASE,ROFF(RSAVE) SAVE REGISTERS
         LR    RBASE,RENTRY             GET ENTRY ADDRESS
         B     START                    BEGIN
IEDQB3   IEDHJN
START    DS    0H
BEGIN    EQU   *
         OI    SCBBSCFM,SCBDATEN        SET DATE INSERTED       SA56226
         SR    RBUF,RBUF                CLEAR REG
         SR    RWORK,RWORK              CLEAR FOR DIVIDE
         SPACE 2
***********************************************************************
* THIS SECTION DIVIDES PRFSIZE BY KEYLENGTH TO DETERMINE THE NUMBER
* OF FULL UNOTS AND THE AMOUNT OF DATA IN THE PARTIALLY FILLED UNIT,
* IF THERE IS ONE.
***********************************************************************
         SPACE 2
         LH    RWORK1,PRFSIZE           GET AMOUNT OF DATA
         N     RWORK1,AVTCLRHI          ASSURE POSITIVE VLAUE
         LH   RWORK2,AVTKEYLE           GET UNIT SIZE
         N     RWORK2,AVTCLRHI         AASSURE POSITIVE
         DR    RWORK,RWORK2             DIVIDE PRFSIZE BY INIT
         ST    RWORK1,AVTDOUBL          SAVE NO UNITS FILLED
         ST    RWORK,AVTDOUBL+4         SAVE NO BYTES IN PARTIAL       -
                                         UNIT, IF ANY
         SR    RWORK2,RWORK2            CLEAR FOR COMPARE
         IC    RWORK2,PRFNBUNT          GET NO UNITS IN BUFFER
         LTR  RWORK,RWORK               IS THERE A PARTIAL UNIT
         BZ    UNITFULL                 NO,ALL FULL
         SPACE
         LA    RWORK,OFF8(RWORK)        ADD FOR DATE/TIME
         CH    RWORK,AVTKEYLE           WILL DATE/TIME FIT IN
         BNH   WILLFIT                  YES, GO GET DATE/TIME
         SPACE
         LA    RWORK1,OFF1(RWORK1)      GET TOTAL NO UNITS THAT        -
                                         CONTAIN DATA
         SPACE 2
***********************************************************************
* AT THIS POINT, THERE IS NOT A PARTIALLY FILLED UNIT THAT WILL
* CONTAIN THE 8 BYTES OF DATE/TIME.  THIS SECTION CHECKS TO SEE IF
* THERE ARE UNUSED UNITS AT THE END OF THE BUFFER.
***********************************************************************
         SPACE 2
UNITFULL EQU   *
         CR    RWORK1,RWORK2            IS THERE AN EMPTY UNIT         -
                                         ALREADY IN THE BUFFER
         BL    WILLFIT                  YES, DON'T GET ANOTHER
         SPACE 2
***********************************************************************
         SPACE
* THIS SECTION GETS A UNIT FROM TCAM'S BUFFER POLL (IF AVAILABLE).
***********************************************************************
         SPACE 2
         L     RBUF,AVTBFREB            FIRST UNIT IN POOL
         LA    RBUF,AVTEZERO(RBUF)      CLEAR GARBAGE
         LTR   RBUF,RBUF                POOL EMPTY
         BZ    ALLDONE                 YES, CAN'T DO FUNCTION
         SPACE
         MVC   AVTBFREB+1(3),OFF5(RBUF) DELINK UNIT
         XC    OFF5(3,RBUF),OFF5(RBUF)  CLEAR LINK FIELD
         LH    RWORK1,AVTAVFCT          GET AVAILABLE UNIT COUNT
         BCTR  RWORK1,AVTEZERO          SUBTRACT ONE
         STH   RWORK1,AVTAVFCT          RESTORE UNIT COUNT
         SPACE 2
***********************************************************************
* AT THIS POINT, WE KNOW WE HAVE ENOUGH SPACE IN THE BUFFER.  A BACK
* CHAIN IS SETUP SO THAT EACH UNIT POINTS TO THE PREVIOUS ONE AS
* WELL AS THE NEXT ONE.  IF A NEW UNIT WAS GOTTEN, IT IS CHAINED IN
* AND PRFNBUNT IS BUMPED.
***********************************************************************
         SPACE 2
WILLFIT  EQU  *
         LR    RFROM,RPREFIX            POINT TO FIRST UNIT
         BCTR  RWORK2,AVTEZERO          SUBTRACT ONE FROM UNITS
         CLI   PRFNBUNT,OFF1            IS THERE ONLY ONE UNIT
         BE    ONEUNIT                  YES, NO CHAINING NEEDED
         SPACE
LOOP     EQU   *
         L     RTO,PRFTIC-IEDQPRF(,RFROM) GET ADDRESS OF NEST UNIT
         ST    RFROM,PRFLINK-1-IEDQPRF(,RTO) SET BACK CHAIN
         LR    RFROM,RTO                GO TO NEXT UNIT
         BCT   RWORK2,LOOP              CONTINE CHAIN
ONEUNIT  EQU   *
         LTR   RBUF,RBUF                DID I GET A UNIT
         BZ    SHIFT                    NO, READY TO SHIFT DATA
         SPACE
         MVC   PRFTIC-IEDQPRF(FOUR,RBUF),PRFTIC-IEDQPRF(RFROM) @OX14779
*                                       POINT NEW UNIT TO NEXT @OX14779
*                                        BUFFER                @OX14779
         IC    RWORK2,PRFTIC-IEDQPRF(,RFROM)  CHAIN NEW UNIT   @OX14779
         ST    RBUF,PRFTIC-IEDQPRF(,RFROM)    TO PREVIOUS UNIT @OX14779
         STC   RWORK2,PRFTIC-IEDQPRF(,RFROM)  SAVING TIC FLAGS @OX14779
         ST    RFROM,PRFLINK-1-IEDQPRF(RBUF)  SET BACK CHAIN   @OX14779
         IC    RWORK2,PRFNBUNT          GET ORIGINAL COUNT
         LA    RWORK2,OFF1(RWORK2)     ADD FOR NEW UNIT
         STC   RWORK2,PRFNBUNT          STORE NEW COUNT
         SPACE 2
***********************************************************************
* NOW WE MUST FIND THE LENGTH TO BE MOVED AND THE TO AND FROM POINTS.
***********************************************************************
         SPACE 2
SHIFT    EQU   *
         LR    RFROM,RPREFIX           GET FIRST UNIT
         LH    RWORK,PRFSIZE            GET TOTAL SIZE
         N     RWORK,AVTCLRHI           CLEAR  HALF
LOOP1    EQU   *
         CH    RWORK,AVTKEYLE           LESS THAN A UNIT
         BNH   GOTFROM                  YES, THIS IS FROM UNIT
         SPACE
         L     RFROM,PRFTIC-IEDQPRF(,RFROM) GET NEXT UNIT
         SH    RWORK,AVTKEYLE           ADJUST SIZE
         B     LOOP1                    TRY NEXT
         SPACE
GOTFROM  EQU   *
         LR    RWORK1,RFROM             RWORK=ADDRESS OF 'FROM' UNIT
         LA    RBUF,ROFF(,RWORK1)       RBUF=ADDRESS OF DATA
         CR    RWORK1,RPREFIX           FIRST UNIT
         BNE   NOTFIRST                 NO, IGNORE HEADER FOR NOW
         SPACE
         LA    RBUF,AVTHDRSZ(,RBUF)     BUMP PAST HDR PREFIX
NOTFIRST EQU   *
         LA    RFROM,ROFF(RWORK,RWORK1) BUMP TO END OF DATA
         LA    RWORK,OFF8(,RWORK)       BUMP LENGTH FOR INSERT
         CH    RWORK,AVTKEYLE           WILL UNIT HOLD INSERTION
         BNH   THISONE                  YES, 'TO' AND 'FROM' SAME
         SPACE
         SH    RWORK,AVTKEYLE           GET OFFSET INTO NEW UNIT
         L     RWORK2,PRFTIC-IEDQPRF(,RWORK1) GET NEW UNIT
         LA    RWORK4,ROFF(,RWORK2)     BUMP TO START OF DATA
         LA    RTO,ROFF(RWORK,RWORK2)   GET TARGET ADDRESS+1
         B     GOTTO                    PREPARE TO MOVE DATA
         SPACE
THISONE EQU    *
         LR    RWORK2,RWORK1            TARGET IN SAME UNIT
         LR    RWORK4,RBUF
         LA    RTO,OFF8(,RFROM)         BUMP 8 PAST 'FROM' BYTE
GOTTO    EQU   *
         LH    RWORK,PRFSIZE            GET TOTAL LENGTH
         N     RWORK,AVTCLRHI           CLEAR GARBAGE
         LA    RWORK3,AVTHDRSZ          GET PREFIX SIZE
         SR    RWORK,RWORK3             ADJUST DATA SIZE
         LTR   RWORK,RWORK              ZERO LENGTH
         BZ    ALLDONE                  NO DATA
         SPACE
MOVEL    EQU   *
         BCTR  RFROM,AVTEZERO           BACK UP TO BYTE
         BCTR RTO,AVTEZERO              BACK UP TO TARGET
         MVC   0(1,RTO),0(RFROM)        MOVE DATA
         CR    RFROM,RBUF               END OF 'FROM' UNIT
         BNE   FROMOK                   NO, CONTINUE
         SPACE
         CR    RWORK1,RPREFIX           FIRST UNIT
         BE    SHIFTED                  YES, THAT'S ALL
         SPACE
         L     RWORK1,PRFLINK-1-IEDQPRF(,RWORK1)
         LA    RBUF,ROFF(,RWORK1)       GET DATA START
         CR    RWORK1,RPREFIX           FIRST UNIT
         BNE   NOPRF                    NO, IGNORE PREFIX
         SPACE
         LA    RBUF,AVTHDRSZ(,RBUF)     BUMP PAST HDR
NOPRF    EQU   *
         LH    RFROM,AVTKEYLE           GET UNIT SIZE
         N     RFROM,AVTCLRHI           CLEAR HALF
         LA    RFROM,ROFF(RWORK1,RFROM) GO TO END OF UNIT
FROMOK   EQU   *
         CR    RTO,RWORK4               END OF TARGET UNIT
         BNE   TOOK                     NO, CONTINUE
         SPACE
         L     RWORK2,PRFLINK-1-IEDQPRF(,RWORK2) GET PREVIOUS
         LA    RWORK4,ROFF(,RWORK2)     START OF DATA
* IF THIS IS THE FIRST UNIT, RFROM SHOULD TERMINATE THE LOOP
         LH    RTO,AVTKEYLE             GET UNIT SIZE
         N     RTO,AVTCLRHI             CLEAR
         LA    RTO,ROFF(RWORK2,RTO)     GO TO END OF NEW UNIT
TOOK     EQU   *
         BCT   RWORK,MOVEL              GET NEXT BYTE
         SPACE
SHIFTED  EQU   *
         TIME  DEC
         ST    R1,AVTDOUBL              SAVE DATE
         ST    R0,AVTDOUBL+4            SAVE TIME
         LR    RTO,RPREFIX              GET BUFFER
         LA    RTO,ROFF(,RTO)          BUMP PAST  CCW
         LA    RTO,AVTHDRSZ(,RTO)      BUMP PAST HDR
         LH    RWORK,PRFSCAN            GET SCAN
         N     RWORK,AVTCLRHI           CLEAR
         LA    RWORK,OFF8(RWORK)        ADD FOR DATE/TIME
         STH   RWORK,PRFSCAN            STORE NEW SCAN PTR
         LH    RWORK,PRFSIZE            GET AMOUNT OF DATA
         N     RWORK,AVTCLRHI           CLEAR
         LA    RWORK,OFF8(RWORK)        ADJUST FOR DATE/TIME
         STH   RWORK,PRFSIZE            STORE NEW SIZE
COPY     EQU   *
         L     RWORK,SCBDEOB            GET EOB BUFFER ADDRESS
         LA    RWORK,AVTEZERO(,RWORK)   CLEAR
         CR    RWORK,RPREFIX            THIS ONE
         BNE   NOTDEOB                  NO, IGNORE OFFSET
         SPACE
         LH    RWORK,SCBEOB             GET EOB OFFSET
         N     RWORK,AVTCLRHI           CLEAR
         LA    RWORK,OFF8(RWORK)        ADJUST FOR DATE/TIME
         STH   RWORK,SCBEOB             STORE NEW EOB OFFSET
NOTDEOB  EQU   *
         SR    RWORK,RWORK              CLEAR
         IC    RWORK,LCBISZE            GET NO RESERVES
         AR    RTO,RWORK                BUMP PAST
         MVC   0(8,RTO),AVTDOUBL        INSERT DATE/TIME
ALLDONE EQU    *
         LM    RETURN,RBASE,ROFF(RSAVE) RESTORE GEGISTERS
         BR    RETURN                   RETURN TO CALLER
         EJECT
         TSCBD
         TLCBD
         TPRFD
         TAVTD
         END
