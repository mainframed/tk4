         TITLE 'IGCI210D - ICHNG SERVICE ROUTINE FOR 3705'
IGCI210D CSECT ,                                                   0001
@PROLOG  BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
IGCI210D  IEDHJN  AFTERHJN,HJN
*   ROPCAVT=REG1;                   /* SETUP OP CNTRL AVT    @Y17XARW*/
         LR    ROPCAVT,REG1                                        0485
*   PARAM=OCCIB;                    /* SETUP PARAMETER LIST ADDR   0486
*                                                            @Y17XARW*/
         L     @12,OPCCOPCE(,ROPCAVT)                              0486
         L     @15,OCCIB(,@12)                                     0486
         ST    @15,PARAM(,ROPCAVT)                                 0486
*   AVT=OPCAVTPT;                   /* SETUP TCAM AVT        @Y17XARW*/
         L     AVT,OPCAVTPT(,ROPCAVT)                              0487
*   RSAVE=ADDR(OPCSAVE);            /* SETUP SAVEAREA ADDR   @Y17XARW*/
         LA    RSAVE,OPCSAVE(,ROPCAVT)                             0488
*   ELMNT=PARAM;                    /* GET OP CONTRL         @SA71947
*                                      ELEMENT ADDRESS       @SA71947*/
         ST    @15,ELMNT(,ROPCAVT)                                 0489
*   IF REG0=ZERO                    /* IS PARAMETER REG ZERO         */
*     THEN                                                         0490
         LTR   REG0,REG0                                           0490
         BZ    @RT00490                                            0490
*     GO TO AICHNG1;                /* YES, NORMAL PROCESSING        */
*   WORKAREA(1:12)=WORKAREA(1:12)&&WORKAREA(1:12);/* CLEAR WORK-     */
         XC    WORKAREA(12,@15),WORKAREA(@15)                      0492
*   WORKAREA(17:28)=WORKAREA(17:28)&&WORKAREA(17:28);/* AREA ZERO    */
         XC    WORKAREA+16(12,@15),WORKAREA+16(@15)                0493
*   WENTCD='04'X;                   /* SET ENTRY CODE FOR ICHNG      */
         MVI   WENTCD(@15),X'04'                                   0494
*   WANSCD='10'X;                   /* SET ANSWER CODE               */
         MVI   WANSCD(@15),X'10'                                   0495
*   WFROM=OCACTCD;                  /* SET USERS WORKAREA ADDRESS    */
         L     @14,OCACTCD(,@12)                                   0496
         ST    @14,WFROM(,@15)                                     0496
*   REG1=OCTRMTBL;                  /* GET LINES TNT OFFSET  @Y17XARW*/
         LH    REG1,OCTRMTBL(,@12)                                 0497
         N     REG1,@CF02274                                       0497
*   CALL IEDQTNT;                   /* GET TTE ADDRESS       @Y17XARW*/
         L     @15,AVTRNMPT(,AVT)                                  0498
         BALR  @14,@15                                             0498
*   WTO=REG1;                       /* SAVE TERM ENTRY ADDR  @Y17XARW*/
         L     @12,PARAM(,ROPCAVT)                                 0499
         ST    REG1,WTO(,@12)                                      0499
*   OPCMODID=MODNAME2;              /* SET NAME FOR XCTL     @Y17XARW*/
         MVC   OPCMODID(2,ROPCAVT),MODNAME2                        0500
*   GO TO XCTL;                     /* GO TO NEXT MODULE             */
         B     XCTL                                                0501
*AICHNG1:                                                          0502
*   UNIT=OCUNIT;                    /* SETUP RESPONSE UNIT ADDR    0502
*                                                            @Y17XARW*/
AICHNG1  L     @12,OPCCOPCE(,ROPCAVT)                              0502
         L     UNIT,OCUNIT(,@12)                                   0502
*   RWRK1=UNIT;                     /* SAVE FIRST UNIT ADDRESS       */
         LR    RWRK1,UNIT                                          0503
*   ENDUNIT=UNIT+AVTKEYLE+12;       /* END OF UNIT ADDRESS           */
         L     @12,OPCWORK(,ROPCAVT)                               0504
         LR    @15,UNIT                                            0504
         AH    @15,AVTKEYLE(,AVT)                                  0504
         AL    @15,@CF00272                                        0504
         ST    @15,ENDUNIT(,@12)                                   0504
*   RAREA=ELMNT->WFROM;             /* ADDRESS OF USER WORKAREA      */
         L     @12,ELMNT(,ROPCAVT)                                 0505
         L     RAREA,WFROM(,@12)                                   0505
*REPLACE:                                                          0506
*   RFROM=RAREA+8;                  /* POINTER TO FIRST ENTRY        */
REPLACE  LA    @12,8                                               0506
         LR    RFROM,RAREA                                         0506
         ALR   RFROM,@12                                           0506
*   IF PRURHSDI=ON×                 /* SENSE DATA OR         @Y17XARW*/
*       BDUSYRSP^='60'X THEN        /* WAS RESPONSE BAD?     @Y17XARW*/
         LCR   @12,@12                                             0507
         ALR   @12,UNIT                                            0507
         TM    PRURHSDI(@12),B'00000100'                           0507
         BO    @RT00507                                            0507
         CLI   BDUSYRSP+12(UNIT),X'60'                             0507
         BNE   @RT00507                                            0507
*     GOTO ERREXIT;                 /* GOTO ERROR EXIT       @Y17XARW*/
*   RDATA=ADDR(IEDBDU)+LENGTH(IEDBDU)+LVLBYTE;/* ADDR OF RESPONSE  0509
*                                      DATA                  @Y17XARW*/
         LA    @12,19                                              0509
         ALR   @12,UNIT                                            0509
         ST    @12,RDATA(,ROPCAVT)                                 0509
*   GENERATE;                                                      0510
         BAL   REG12,CHKUNIT       /* CHECK END OF UNIT EXCEEDED     */
*   IF RDATA->FIELD(1)=ZERO         /* IS THIS SWITCH ID     @Y17XARW*/
*     THEN                                                         0511
         L     @12,RDATA(,ROPCAVT)                                 0511
         CLI   FIELD(@12),0                                        0511
         BE    @RT00511                                            0511
*     GO TO SWTCHID;                /* YES, GO TO PROPER ROUTINE     */
*   NMBENT=RAREA->FIELD(1);         /* NUMBER OF ENTRIES TO PROCESS  */
         L     @15,OPCWORK(,ROPCAVT)                               0513
         IC    @14,FIELD(,RAREA)                                   0513
         STC   @14,NMBENT(,@15)                                    0513
*   NUMPROC=ZERO;                   /* NUMBER PROCESSED IS ZERO      */
         MVI   NUMPROC(@15),X'00'                                  0514
*   NUMTNT=ZERO;                    /* CLEAR TNT COUNT       @Y17XARW*/
         MVI   NUMTNT(@15),X'00'                                   0515
*   IF RDATA->FIELD='02'X THEN                                     0516
         CLI   FIELD(@12),X'02'                                    0516
         BNE   @RF00516                                            0516
*     OCICTYPE=OCICMUL;             /* IF THIS IS MULTIPT, SET     0517
*                                      INDICATOR IN OPCE     @Y17XARW*/
         L     @12,OPCCOPCE(,ROPCAVT)                              0517
         MVI   OCICTYPE(@12),X'02'                                 0517
*   ELSE                                                           0518
*     OCICTYPE=OCICLES;             /* ELSE INDICATE A LEASED LINE 0518
*                                                            @Y17XARW*/
         B     @RC00516                                            0518
@RF00516 L     @12,OPCCOPCE(,ROPCAVT)                              0518
         MVI   OCICTYPE(@12),X'01'                                 0518
*   IF AVTSTAIN=ON THEN                                            0519
@RC00516 TM    AVTSTAIN(AVT),B'00000100'                           0519
         BNO   @RF00519                                            0519
*     DO;                           /* IF CHKPT WILL BE TAKEN      0520
*                                                            @Y17XARW*/
*       IF RDATA->FIELD='02'X       /* THEN IF MULTIPT LINE  @Y17XARW*/
*         THEN                                                     0521
         L     @12,RDATA(,ROPCAVT)                                 0521
         CLI   FIELD(@12),X'02'                                    0521
         BNE   @RF00521                                            0521
*         DO;                       /* THEN DO               @Y17XARW*/
*           NUMDEV=RDATA->MULCURNB; /* GET NUMBER OF DEVICE ENTRIES
*                                                            @Y17XARW*/
         L     @15,OPCWORK(,ROPCAVT)                               0523
         SLR   @14,@14                                             0523
         IC    @14,MULCURNB(,@12)                                  0523
         STH   @14,NUMDEV(,@15)                                    0523
*           REG1=(NUMDEV+1)*THREE;  /* GET LENGTH OF ENTRIES @Y17XARW*/
         AL    @14,@CF00089                                        0524
         MH    @14,@CH00103                                        0524
         LR    REG1,@14                                            0524
*           REG0=ZERO;              /* CLEAR REMAINDER REG   @Y17XARW*/
         SLR   REG0,REG0                                           0525
*           RLNGTH=AVTKEYLE;        /* SETUP UNIT LENGTH     @Y17XARW*/
         LH    RLNGTH,AVTKEYLE(,AVT)                               0526
*           GEN REFS(REG0,REG1);                                   0527
         DR   REG0,RLNGTH      CALCULATE NUMBER OF UNITS
*           IF REG0^=ZERO THEN                                     0528
         LTR   REG0,REG0                                           0528
         BZ    @RF00528                                            0528
*             REG1=REG1+1;          /* IF THERE IS REMAINDER,      0529
*                                      INCREMENT NUMBER BY ONE     0529
*                                                            @Y17XARW*/
         LA    REG1,1(,REG1)                                       0529
*           NUMTNT=REG1;            /* SAVE NUMBER OF UNITS  @Y17XARW*/
@RF00528 L     @12,OPCWORK(,ROPCAVT)                               0530
         STC   REG1,NUMTNT(,@12)                                   0530
*         END;                      /*                       @Y17XARW*/
*       REG0=ZERO;                  /* CLEAR UNIT COUNTER    @Y17XARW*/
@RF00521 SLR   REG0,REG0                                           0532
*       REG1=UNIT;                  /* SETUP FIRST UNIT      @Y17XARW*/
         LR    REG1,UNIT                                           0533
*CHKEND:                            /*                       @Y17XARW*/
*       GEN REFS(REG1,OPCHNEND,ROPCAVT);                           0534
CHKEND   DS    0H                                                  0534
      EX  REG1,OPCHNEND(,ROPCAVT) END OF UNIT
*       BC(SEVEN,GETBUFFS);         /* YES, GET BUFFERS      @Y17XARW*/
         BC    7,GETBUFFS                                          0535
*       REG0=REG0+ONE;              /* INCREMENT UNIT COUNT  @Y17XARW*/
         AL    REG0,@CF00089                                       0536
*       REG1=REG1->PRFTIC;          /* GET NEXT UNIT ADDRESS @Y17XARW*/
         L     REG1,PRFTIC(,REG1)                                  0537
*       GOTO CHKEND;                /* CONTINUE CHECK FOR END OF UNIT
*                                                            @Y17XARW*/
         B     CHKEND                                              0538
*GETBUFFS:                          /*                       @Y17XARW*/
*       REG1=REG0+NUMTNT;           /* SETUP NUMBER OF BUFFS @Y17XARW*/
GETBUFFS L     @12,OPCWORK(,ROPCAVT)                               0539
         LR    REG1,REG0                                           0539
         SLR   @15,@15                                             0539
         IC    @15,NUMTNT(,@12)                                    0539
         ALR   REG1,@15                                            0539
*       CALL ALLOCBUF;              /* GET BUFFERS           @Y17XARW*/
         L     @15,OPCGETBF(,ROPCAVT)                              0540
         BALR  @14,@15                                             0540
*       OCPTRSAV=REG1;              /* SAVE ADDRESS OF FIRST BUFFER
*                                                            @Y17XARW*/
         L     @12,OPCCOPCE(,ROPCAVT)                              0541
         ST    REG1,OCPTRSAV(,@12)                                 0541
*       IF RDATA->FIELD='02'X       /* IF THIS IS A MULTIPT LINE   0542
*                                                            @Y17XARW*/
*         THEN                                                     0542
         L     @12,RDATA(,ROPCAVT)                                 0542
         CLI   FIELD(@12),X'02'                                    0542
         BNE   @RF00542                                            0542
*         DO;                       /*                       @Y17XARW*/
*           ICTNTNO=NUMDEV;         /* INITIALIZE NUMBER OF ENTRIES
*                                                            @Y17XARW*/
         L     @12,OPCCOPCE(,ROPCAVT)                              0544
         L     @12,OCPTRSAV(,@12)                                  0544
         L     @15,OPCWORK(,ROPCAVT)                               0544
         LH    @14,NUMDEV(,@15)                                    0544
         STH   @14,ICTNTNO(,@12)                                   0544
*           ICTNTNU=NUMTNT;         /* INITIALIZE NUMBER OF UNITS  0545
*                                                            @Y17XARW*/
         IC    @14,NUMTNT(,@15)                                    0545
         STC   @14,ICTNTNU(,@12)                                   0545
*           TNTOPTR=ADDR(ICTNTOFF); /* SET PTR TO FIRST ENTRY      0546
*                                                            @Y17XARW*/
         LA    @14,ICTNTOFF(,@12)                                  0546
         ST    @14,TNTOPTR(,@15)                                   0546
*           TNTOLEN=AVTKEYLE-THREE; /* SET NUMBER OF BYTES LEFT IN 0547
*                                      UNIT                  @Y17XARW*/
         LH    @14,AVTKEYLE(,AVT)                                  0547
         SL    @14,@CF00103                                        0547
         STH   @14,TNTOLEN(,@15)                                   0547
*           TNTOUNT=OCPTRSAV;       /* SET FIRST UNIT ADDRESS      0548
*                                                            @Y17XARW*/
         ST    @12,TNTOUNT(,@15)                                   0548
*         END;                      /*                       @Y17XARW*/
*     END;                          /*                       @Y17XARW*/
@RF00542 DS    0H                                                  0551
*NXTENT:                                                           0551
*   IF OCICTYPE=OCICMUL THEN        /* IS THIS MULTIPT LINE  @Y17XARW*/
@RF00519 DS    0H                                                  0551
NXTENT   L     @12,OPCCOPCE(,ROPCAVT)                              0551
         CLI   OCICTYPE(@12),2                                     0551
         BNE   @RF00551                                            0551
*     RDATA=RDATA+2;                /* CHECK TYPE OF LINE    @Y17XARW*/
         LA    @12,2                                               0552
         AL    @12,RDATA(,ROPCAVT)                                 0552
         ST    @12,RDATA(,ROPCAVT)                                 0552
*   RDATA=RDATA+ONE;                /* POINT TO DEVICE RECORD      0553
*                                                            @Y17XARW*/
@RF00551 LA    @12,1                                               0553
         AL    @12,RDATA(,ROPCAVT)                                 0553
         ST    @12,RDATA(,ROPCAVT)                                 0553
*   GENERATE;                                                      0554
         BAL   REG12,CHKUNIT       /* CHECK END OF UNIT EXCEEDED     */
*   NEXTRCD=RDATA+RDATA->FCOUNT;    /* ADDRESS NEXT DEV RECORD     0555
*                                                            @Y17XARW*/
         L     @12,OPCWORK(,ROPCAVT)                               0555
         L     @15,RDATA(,ROPCAVT)                                 0555
         SLR   @14,@14                                             0555
         IC    @14,FCOUNT(,@15)                                    0555
         ALR   @14,@15                                             0555
         ST    @14,NEXTRCD(,@12)                                   0555
*   IF RFROM->FIELD(1)='FE'X        /* IS THIS END OF ACTIVE ENTRIES */
*     THEN                                                         0556
         CLI   FIELD(RFROM),X'FE'                                  0556
         BNE   @RF00556                                            0556
*     DO;                           /* YES,                          */
*       OCICINAC=ON;                /* INACTIVE ENTRY PROCESSED    0558
*                                                            @Y17XARW*/
         L     @12,OPCCOPCE(,ROPCAVT)                              0558
         OI    OCICINAC(@12),B'00000001'                           0558
*       RFROM=RFROM+ONE;            /* POINT TO ENTRY                */
         LA    RFROM,1(,RFROM)                                     0559
*     END;                                                         0560
*   RCOUNT=RFROM->FIELD(WIDTH);     /* DEVICE RECORD NUMBER          */
@RF00556 L     @12,OPCWORK(,ROPCAVT)                               0561
         SLR   @15,@15                                             0561
         IC    @15,WIDTH(,RAREA)                                   0561
         BCTR  @15,0                                               0561
         SLR   @14,@14                                             0561
         IC    @14,FIELD(@15,RFROM)                                0561
         ST    @14,RCOUNT(,@12)                                    0561
*   IF RCOUNT>NMBENT×               /* IS INDEX TOO LARGE OR         */
*       RCOUNT=ZERO                 /* IS INDEX ZERO                 */
*     THEN                                                         0562
         SLR   @15,@15                                             0562
         IC    @15,NMBENT(,@12)                                    0562
         CR    @14,@15                                             0562
         BH    @RT00562                                            0562
         LTR   @14,@14                                             0562
         BZ    @RT00562                                            0562
*     GO TO ERREXIT;                /* YES, QUIT PROCESSING          */
*RCRDSRCH:                                                         0564
*   RCOUNT=RCOUNT-ONE;              /* REDUCE BY ONE                 */
RCRDSRCH L     @12,OPCWORK(,ROPCAVT)                               0564
         L     @15,RCOUNT(,@12)                                    0564
         BCTR  @15,0                                               0564
         ST    @15,RCOUNT(,@12)                                    0564
*   IF RCOUNT=ZERO                  /* IS THIS CORRECT DEVICE RECORD */
*     THEN                                                         0565
         LTR   @15,@15                                             0565
         BZ    @RT00565                                            0565
*     GO TO MOVPOLL;                /* YES, PROCESS IT               */
*   RDATA=NEXTRCD;                  /* POINT TO NXT RECORD   @Y17XARW*/
         L     @15,NEXTRCD(,@12)                                   0567
         ST    @15,RDATA(,ROPCAVT)                                 0567
*   NEXTRCD=RDATA+RDATA->FCOUNT;    /* ADDRESS OF NEXT DEVICE RECORD
*                                                            @Y17XARW*/
         SLR   @14,@14                                             0568
         IC    @14,FCOUNT(,@15)                                    0568
         ALR   @14,@15                                             0568
         ST    @14,NEXTRCD(,@12)                                   0568
*   GENERATE;                                                      0569
         BAL   REG12,CHKUNIT       /* CHECK END OF UNIT EXCEEDED     */
*   IF NUMTNT^=ZERO THEN            /* ARE THERE TNT OFSETS  @Y17XARW*/
         L     @12,OPCWORK(,ROPCAVT)                               0570
         CLI   NUMTNT(@12),0                                       0570
         BE    @RF00570                                            0570
*     DO;                           /*                       @Y17XARW*/
*       TNTOPTR=TNTOPTR+THREE;      /* BUMP TO NEXT TNT ENTRY      0572
*                                                            @Y17XARW*/
         LA    @15,3                                               0572
         L     @14,TNTOPTR(,@12)                                   0572
         ALR   @14,@15                                             0572
         ST    @14,TNTOPTR(,@12)                                   0572
*       TNTOLEN=TNTOLEN-THREE;      /* DECREMENT TOTAL LENGTH      0573
*                                                            @Y17XARW*/
         LCR   @15,@15                                             0573
         AH    @15,TNTOLEN(,@12)                                   0573
         STH   @15,TNTOLEN(,@12)                                   0573
*       CALL TNTCHK;                /* CHECK NEXT TNT        @Y17XARW*/
         BAL   @14,TNTCHK                                          0574
*     END;                          /*                       @Y17XARW*/
*   GO TO RCRDSRCH;                 /* GO CHECK IT                   */
         B     RCRDSRCH                                            0576
*MOVPOLL:                                                          0577
*   RDATA=RDATA+ONE;                /* BUMP TO RSID          @Y17XARW*/
MOVPOLL  LA    @12,1                                               0577
         AL    @12,RDATA(,ROPCAVT)                                 0577
         ST    @12,RDATA(,ROPCAVT)                                 0577
*   GENERATE;                                                      0578
*                                       /* CHECK END OF UNIT @ZA01116*/
         BAL   REG12,CHKUNIT            /*  EXCEEDED         @ZA01116*/
*   REG1=RDATA->FIELD(1);           /* GET FIRST RSID BYTE   @Y17XARW*/
         L     @12,RDATA(,ROPCAVT)                                 0579
         SLR   REG1,REG1                                           0579
         IC    REG1,FIELD(,@12)                                    0579
*   RDATA=RDATA+ONE;                /* BUMP TO SECOND        @Y17XARW*/
         AL    @12,@CF00089                                        0580
         ST    @12,RDATA(,ROPCAVT)                                 0580
*   GENERATE;                                                      0581
*                                       /* CHECK END OF UNIT @ZA01116*/
         BAL   REG12,CHKUNIT            /*  EXCEEDED         @ZA01116*/
*   REG1=REG1*256+RDATA->FIELD(1);  /* GET 2ND BYTE OF RSID  @Y17XARW*/
         LR    @12,REG1                                            0582
         SLA   @12,8                                               0582
         L     @15,RDATA(,ROPCAVT)                                 0582
         SLR   @14,@14                                             0582
         IC    @14,FIELD(,@15)                                     0582
         ALR   @12,@14                                             0582
         LR    REG1,@12                                            0582
*   RFY                                                            0583
*     REG15 RSTD;                   /*                       @Y17XARW*/
*   CALL IEDIAP03;                  /* CONVERT NETWORK ADDR TO A TNT
*                                      OFFSET                @Y17XARW*/
         L     @12,AVTSAVTP(,AVT)                                  0584
         L     @15,SAVTNAX(,@12)                                   0584
         BALR  @14,@15                                             0584
*   REG1=REG15;                     /* SET TNT OFFSET        @Y17XARW*/
         LR    REG1,REG15                                          0585
*   RFY                                                            0586
*     REG15 UNRSTD;                 /*                       @Y17XARW*/
*   IF REG1=ZERO                    /* IS TNT VALID                  */
*     THEN                                                         0587
         LTR   REG1,REG1                                           0587
         BZ    @RT00587                                            0587
*     GO TO UPDFROM;                /* NO, GO UPDATE POINTER         */
*   OFFSET=REG1;                    /* SAVE TNT OFFSET       @Y17XARW*/
         L     @12,OPCWORK(,ROPCAVT)                               0589
         STH   REG1,OFFSET(,@12)                                   0589
*   CALL IEDQTNT;                   /* GET TTE ADDRESS       @Y17XARW*/
         L     @15,AVTRNMPT(,AVT)                                  0590
         BALR  @14,@15                                             0590
*   RTRM=REG1-LENGTH(IEDNTRM);      /* SAVE TTE PREFIX ADDRESS     0591
*                                                            @Y17XARW*/
         LR    @12,REG1                                            0591
         SL    @12,@CF00047                                        0591
         ST    @12,RTRM(,ROPCAVT)                                  0591
*   RDATA=RDATA+ONE;                /* POINT TO WIDTH        @Y17XARW*/
         LA    @12,1                                               0592
         AL    @12,RDATA(,ROPCAVT)                                 0592
         ST    @12,RDATA(,ROPCAVT)                                 0592
*   GENERATE;                                                      0593
*                                       /* CHECK END OF UNIT @ZA01116*/
         BAL   REG12,CHKUNIT            /*  EXCEEDED         @ZA01116*/
*   IF RDATA->FIELD(1)^=WIDTH-1     /* IS THE WIDTH CORRECT  @Y17XARW*/
*     THEN                                                         0594
         L     @12,RDATA(,ROPCAVT)                                 0594
         SLR   @15,@15                                             0594
         IC    @15,FIELD(,@12)                                     0594
         SLR   @12,@12                                             0594
         IC    @12,WIDTH(,RAREA)                                   0594
         BCTR  @12,0                                               0594
         CR    @15,@12                                             0594
         BE    @RF00594                                            0594
*     IF RDATA->FIELD(1)=ZERO       /* NO, THEN IS IT ZERO   @Y17XARW*/
*       THEN                                                       0595
         LTR   @15,@15                                             0595
         BZ    @RT00595                                            0595
*       GOTO UPDFROM;               /* YES, UPDATE PTR       @ZA01116*/
*     ELSE                                                         0597
*       GOTO ERREXIT;               /* NO, ERROR             @ZA01116*/
         B     ERREXIT                                             0597
*   RLNGTH=RDATA->FIELD(1);         /* GET THE DATA COUNT    @Y17XARW*/
@RF00594 L     @12,RDATA(,ROPCAVT)                                 0598
         SLR   RLNGTH,RLNGTH                                       0598
         IC    RLNGTH,FIELD(,@12)                                  0598
*   RDATA=RDATA+ONE;                /* POINT TO POLLING      @Y17XARW
*                                      CHARACTERS            @ZA01116*/
         AL    @12,@CF00089                                        0599
         ST    @12,RDATA(,ROPCAVT)                                 0599
*   GENERATE;                                                      0600
         BAL   REG12,CHKUNIT       /* CHECK END OF UNIT EXCEEDED     */
*MOVIT:                                                            0601
*   RDATA->FIELD(1)=RFROM->FIELD(1);/* MOVE ONE BYTE         @Y17XARW*/
MOVIT    L     @12,RDATA(,ROPCAVT)                                 0601
         MVC   FIELD(1,@12),FIELD(RFROM)                           0601
*   RLNGTH=RLNGTH-ONE;              /* REDUCE AMOUNT TO MOVE         */
         BCTR  RLNGTH,0                                            0602
*   RDATA=RDATA+ONE;                /* POINT TO NEXT BYTE    @Y17XARW*/
         AL    @12,@CF00089                                        0603
         ST    @12,RDATA(,ROPCAVT)                                 0603
*   GENERATE;                                                      0604
         BAL   REG12,CHKUNIT       /* CHECK END OF UNIT EXCEEDED     */
*   RFROM=RFROM+ONE;                /* POINT TO NEXT BYTE            */
         LA    @12,1                                               0605
         ALR   RFROM,@12                                           0605
*   IF RLNGTH^=ZERO                 /* HAS ALL BEEN MOVED            */
*     THEN                                                         0606
         LTR   RLNGTH,RLNGTH                                       0606
         BNZ   @RT00606                                            0606
*     GO TO MOVIT;                  /* NO, MOVE MORE                 */
*   RFROM=RFROM+ONE;                /* SKIP OVER INDEX BYTE          */
         ALR   RFROM,@12                                           0608
*   RDATA=RDATA+RDATA->FCOUNT+ONE;  /* POINT TO INPUT ID     @Y17XARW*/
         L     @15,RDATA(,ROPCAVT)                                 0609
         SLR   @14,@14                                             0609
         IC    @14,FCOUNT(,@15)                                    0609
         ALR   @14,@15                                             0609
         ALR   @14,@12                                             0609
         ST    @14,RDATA(,ROPCAVT)                                 0609
*   GENERATE;                                                      0610
         BAL   REG12,CHKUNIT       /* CHECK END OF UNIT EXCEEDED     */
*   IF RDATA->FIELD(1)=ZERO×        /* IS INPUT POSSIBLE IN  @Y17XARW*/
*       TRMINPUT=OFF                /* IN NCP OR IN MCP      @Y17XARW*/
*     THEN                                                         0611
         L     @12,RDATA(,ROPCAVT)                                 0611
         CLI   FIELD(@12),0                                        0611
         BE    @RT00611                                            0611
         L     @12,RTRM(,ROPCAVT)                                  0611
         TM    TRMINPUT(@12),B'01000000'                           0611
         BZ    @RT00611                                            0611
*     GO TO PROCNXT;                /* NO, PROCESS NEXT ENTRY        */
*   IF OCICINAC=OFF                 /* IS THIS ACTIVE ENTRY  @Y17XARW*/
*     THEN                                                         0613
         L     @15,OPCCOPCE(,ROPCAVT)                              0613
         TM    OCICINAC(@15),B'00000001'                           0613
         BNZ   @RF00613                                            0613
*     DO;                           /* YES,                          */
*       TRMRSACT=ON;                /* SET DEVICE ACTIVE     @Y17XARW*/
         L     @15,TRMRSACT(,@12)                                  0615
@GL00004 LR    @14,@15                                             0615
         O     @14,@CF02276                                        0615
         CS    @15,@14,TRMRSACT(@12)                               0615
         BNE   @GL00004                                            0615
*       STATUS=TNTOACT;             /*                       @Y17XARW*/
         L     @12,OPCWORK(,ROPCAVT)                               0616
         MVI   STATUS(@12),X'00'                                   0616
*     END;                                                         0617
*   ELSE                                                           0618
*     DO;                           /* NO,                           */
         B     @RC00613                                            0618
@RF00613 DS    0H                                                  0619
*       TRMRSACT=OFF;               /* SET DEVICE INACTIVE   @Y17XARW*/
         L     @14,RTRM(,ROPCAVT)                                  0619
         L     @12,TRMRSACT(,@14)                                  0619
@GL00005 LR    @15,@12                                             0619
         N     @15,@CF02279                                        0619
         CS    @12,@15,TRMRSACT(@14)                               0619
         BNE   @GL00005                                            0619
*       STATUS=TNTOINAC;            /*                       @Y17XARW*/
         L     @12,OPCWORK(,ROPCAVT)                               0620
         MVI   STATUS(@12),X'01'                                   0620
*     END;                                                         0621
*   IF NUMTNT^=0 THEN                                              0622
@RC00613 L     @12,OPCWORK(,ROPCAVT)                               0622
         CLI   NUMTNT(@12),0                                       0622
         BE    @RF00622                                            0622
*     DO;                           /* IF THIS A MULTIPT LINE WITH 0623
*                                      CHEKPT                @Y17XARW*/
*       LENDATA=THREE;              /* SETUP LEN OF DATA TO MOVE   0624
*                                                            @Y17XARW*/
         MVI   LENDATA(@12),X'03'                                  0624
*       EPTR=ADDR(OFFSET);          /* MOVE                  @Y17XARW*/
         LA    @15,OFFSET(,@12)                                    0625
         ST    @15,EPTR(,ROPCAVT)                                  0625
*       LENMOVE=TNTOLEN;            /* VARIABLE LENGTH TO MOVE     0626
*                                                            @Y17XARW*/
         LH    @15,TNTOLEN(,@12)                                   0626
         STC   @15,LENMOVE(,@12)                                   0626
*       IF LENMOVE>LENDATA THEN                                    0627
         CLC   LENMOVE(1,@12),LENDATA(@12)                         0627
         BNH   @RF00627                                            0627
*         LENMOVE=LENDATA;          /* ADJUST LENGTH         @Y17XARW*/
         IC    @15,LENDATA(,@12)                                   0628
         STC   @15,LENMOVE(,@12)                                   0628
*       DO UNTIL(LENMOVE=ZERO);     /* MOVE ALL OF DATA      @Y17XARW*/
@RF00627 DS    0H                                                  0629
@DL00629 DS    0H                                                  0630
*         TNTOPTR->MOVCHARS(1:LENMOVE)=EPTR->MOVCHARS(1:LENMOVE);/*
*                                      MOVE DATA             @Y17XARW*/
         L     @12,OPCWORK(,ROPCAVT)                               0630
         L     @15,TNTOPTR(,@12)                                   0630
         SLR   @14,@14                                             0630
         IC    @14,LENMOVE(,@12)                                   0630
         LR    @07,@14                                             0630
         BCTR  @07,0                                               0630
         L     @06,EPTR(,ROPCAVT)                                  0630
         EX    @07,@SM02282                                        0630
*         EPTR=EPTR+LENMOVE;        /* BUMP POINTER          @Y17XARW*/
         ALR   @06,@14                                             0631
         ST    @06,EPTR(,ROPCAVT)                                  0631
*         TNTOPTR=TNTOPTR+LENMOVE;  /* BUMP POINTER          @Y17XARW*/
         ALR   @15,@14                                             0632
         ST    @15,TNTOPTR(,@12)                                   0632
*         TNTOLEN=TNTOLEN-LENMOVE;  /* DECREMENT TOTAL LENGTH      0633
*                                                            @Y17XARW*/
         LCR   @14,@14                                             0633
         AH    @14,TNTOLEN(,@12)                                   0633
         STH   @14,TNTOLEN(,@12)                                   0633
*         CALL TNTCHK;              /* CHECK TNT             @Y17XARW*/
         BAL   @14,TNTCHK                                          0634
*         LENDATA=LENDATA-LENMOVE;  /* RESET LENGTH OF DATA  @Y17XARW*/
         L     @12,OPCWORK(,ROPCAVT)                               0635
         SLR   @15,@15                                             0635
         IC    @15,LENDATA(,@12)                                   0635
         SLR   @14,@14                                             0635
         IC    @14,LENMOVE(,@12)                                   0635
         SLR   @15,@14                                             0635
         STC   @15,LENDATA(,@12)                                   0635
*         LENMOVE=LENDATA;          /* RESET LENGTH TO MOVE  @Y17XARW*/
         STC   @15,LENMOVE(,@12)                                   0636
*       END;                        /*                       @Y17XARW*/
@DE00629 L     @12,OPCWORK(,ROPCAVT)                               0637
         CLI   LENMOVE(@12),0                                      0637
         BNE   @DL00629                                            0637
*     END;                          /*                       @Y17XARW*/
*   ELSE                                                           0639
*     OCTRMTBL=OFFSET;              /* SAVE TNT OFFSET       @Y17XARW*/
         B     @RC00622                                            0639
@RF00622 L     @12,OPCCOPCE(,ROPCAVT)                              0639
         L     @15,OPCWORK(,ROPCAVT)                               0639
         LH    @15,OFFSET(,@15)                                    0639
         N     @15,@CF02274                                        0639
         STH   @15,OCTRMTBL(,@12)                                  0639
*PROCNXT:                                                          0640
*   RDATA=ADDR(IEDBDU)+LENGTH(IEDBDU)+LVLBYTE;/* POINT TO START OF 0640
*                                      DATA                  @Y17XARW*/
@RC00622 DS    0H                                                  0640
PROCNXT  LA    @12,19                                              0640
         ALR   @12,UNIT                                            0640
         ST    @12,RDATA(,ROPCAVT)                                 0640
*   IF NUMTNT^=0 THEN                                              0641
         L     @12,OPCWORK(,ROPCAVT)                               0641
         CLI   NUMTNT(@12),0                                       0641
         BE    @RF00641                                            0641
*     DO;                           /* IF NO TNT OFFSETS     @Y17XARW*/
*       TNTOUNT=OCPTRSAV;           /* RESET PTR TO FIRST UNIT     0643
*                                                            @Y17XARW*/
         L     @15,OPCCOPCE(,ROPCAVT)                              0643
         L     @15,OCPTRSAV(,@15)                                  0643
         ST    @15,TNTOUNT(,@12)                                   0643
*       TNTOPTR=ADDR(ICTNTOFF);     /* RESET PTR TO FIRST ENTRY    0644
*                                                            @Y17XARW*/
         LA    @15,ICTNTOFF(,@15)                                  0644
         ST    @15,TNTOPTR(,@12)                                   0644
*       TNTOLEN=AVTKEYLE-THREE;     /* SET LENGTH IN UNIT    @Y17XARW*/
         LH    @15,AVTKEYLE(,AVT)                                  0645
         SL    @15,@CF00103                                        0645
         STH   @15,TNTOLEN(,@12)                                   0645
*     END;                          /*                       @Y17XARW*/
*   NUMPROC=NUMPROC+ONE;            /* UPDATE NUMBER PROCESSED       */
@RF00641 L     @12,OPCWORK(,ROPCAVT)                               0647
         LA    @15,1                                               0647
         SLR   @14,@14                                             0647
         IC    @14,NUMPROC(,@12)                                   0647
         ALR   @15,@14                                             0647
         STC   @15,NUMPROC(,@12)                                   0647
*   IF NUMPROC=NMBENT               /* HAVE ALL ENTRIES BEEN DONE    */
*     THEN                                                         0648
         CLC   NUMPROC(1,@12),NMBENT(@12)                          0648
         BE    @RT00648                                            0648
*     GO TO ALLDONE;                /* YES, EXIT                     */
*   RWRK1=UNIT;                     /* SAVE FIRST UNIT       @ZA01116*/
         LR    RWRK1,UNIT                                          0650
*   ENDUNIT=UNIT+AVTKEYLE+12;       /* END OF UNIT ADDR      @ZA01116*/
         LR    @15,UNIT                                            0651
         AH    @15,AVTKEYLE(,AVT)                                  0651
         AL    @15,@CF00272                                        0651
         ST    @15,ENDUNIT(,@12)                                   0651
*   GO TO NXTENT;                   /* GO PROCESS NEXT ENTRY         */
         B     NXTENT                                              0652
*UPDFROM:                                                          0653
*   RFROM=RFROM+WIDTH;              /* UPDATE TO NEXT ENTRY          */
UPDFROM  SLR   @12,@12                                             0653
         IC    @12,WIDTH(,RAREA)                                   0653
         ALR   RFROM,@12                                           0653
*   GO TO PROCNXT;                  /* GO PROCESS NEXT ENTRY         */
         B     PROCNXT                                             0654
*   RFY                                                            0655
*     REG12 RSTD;                   /*                       @Y17XARW*/
*CHKUNIT:                                                          0656
*   IF RDATA>=ENDUNIT               /* ARE WE PAST END OF UNIT     0656
*                                                            @Y17XARW*/
*     THEN                                                         0656
CHKUNIT  L     @15,RDATA(,ROPCAVT)                                 0656
         L     @14,OPCWORK(,ROPCAVT)                               0656
         L     @07,ENDUNIT(,@14)                                   0656
         CR    @15,@07                                             0656
         BL    @RF00656                                            0656
*     DO;                           /* YES,                          */
*       RDATA=RWRK1->PRFTIC+12+RDATA-ENDUNIT;/* DATA ADDRESS FOR NEW
*                                      UNIT                  @Y17XARW*/
         LA    @06,12                                              0658
         L     @15,PRFTIC(,RWRK1)                                  0658
         LR    @14,@15                                             0658
         ALR   @14,@06                                             0658
         L     @15,RDATA(,ROPCAVT)                                 0658
         ALR   @15,@14                                             0658
         SLR   @15,@07                                             0658
         ST    @15,RDATA(,ROPCAVT)                                 0658
*       NEXTRCD=RWRK1->PRFTIC+12+NEXTRCD-ENDUNIT;/* RESET NEXT DATA
*                                                            @ZA01116
*                                      RECORD POINTER        @ZA01116*/
         L     @15,OPCWORK(,ROPCAVT)                               0659
         AL    @14,NEXTRCD(,@15)                                   0659
         SLR   @14,@07                                             0659
         ST    @14,NEXTRCD(,@15)                                   0659
*       ENDUNIT=RWRK1->PRFTIC+AVTKEYLE+12;/* END OF NEXT UNIT ADDRESS*/
         L     @14,PRFTIC(,RWRK1)                                  0660
         LH    @07,AVTKEYLE(,AVT)                                  0660
         ALR   @07,@14                                             0660
         ALR   @07,@06                                             0660
         ST    @07,ENDUNIT(,@15)                                   0660
*       RWRK1=RWRK1->PRFTIC;        /* NEXT UNIT ADDRESS             */
         LR    RWRK1,@14                                           0661
*       GO TO CHKUNIT;                                             0662
         B     CHKUNIT                                             0662
*     END;                                                         0663
*   GENERATE;                                                      0664
@RF00656 DS    0H                                                  0664
         BR    REG12               /* RETURN TO CALLER               */
*   RFY                                                            0665
*     REG12 UNRSTD;                 /*                       @Y17XARW*/
*ALLDONE:                                                          0666
*   OCPARM=ZERO;                    /* CLEAR FIELDS FOR NEXT MOD   0666
*                                                            @Y17XARW*/
ALLDONE  L     @12,OPCCOPCE(,ROPCAVT)                              0666
         SLR   @15,@15                                             0666
         STH   @15,OCPARM(,@12)                                    0666
*   OCRESP=OFF;                     /*                       @Y17XARW*/
         NI    OCRESP(@12),B'11111110'                             0667
*   OCWTG=MODNAME2;                 /* SETUP WHERE-TO-GO     @Y17XARW*/
         MVC   OCWTG(2,@12),MODNAME2                               0668
*   OCACTREQ=ON;                    /* INDICATE ACTIVATE REQUEST   0669
*                                                            @Y17XARW*/
         OI    OCACTREQ(@12),B'00001000'                           0669
*   PRURH=TRHFID0;                  /* SETUP TH FIELDS       @Y17XARW*/
         LR    @15,UNIT                                            0670
         SL    @15,@CF00073                                        0670
         MVC   PRURH(3,@15),@CB02088                               0670
*   PRUTH=TTH0BYT0;                 /* SETUP RH FIELDS       @Y17XARW*/
         MVI   PRUTH(@15),X'0C'                                    0671
*   BDUMODIF=CD0CRSII;              /* SETUP MOD IDENTIFIER  @Y17XARW*/
         LA    @15,12                                              0672
         ALR   @15,UNIT                                            0672
         MVI   BDUMODIF(@15),X'02'                                 0672
*   BDUHEADR=ON;                    /* INDICATE A HEADER BUFFER    0673
*                                                            @Y17XARW*/
         OI    BDUHEADR(@15),B'01000000'                           0673
*   BDUSYRSP=BDUSYRSP&&BDUSYRSP;    /* CLEAR BDU RESPONSE    @Y17XARW*/
         XC    BDUSYRSP(1,@15),BDUSYRSP(@15)                       0674
*   OPCMODID=MODNAME4;              /* GOTO RU DISPATCHER    @Y17XARW*/
         MVC   OPCMODID(2,ROPCAVT),MODNAME4                        0675
*   WANSCD=ICHNG2;                  /* SETUP ICHNG ENTRY CODE      0676
*                                                            @Y17XARW*/
         L     @15,PARAM(,ROPCAVT)                                 0676
         MVI   WANSCD(@15),X'14'                                   0676
*   IF OCPTRSAV^=INVALTIC THEN                                     0677
         L     @15,OCPTRSAV(,@12)                                  0677
         C     @15,@CF01925                                        0677
         BE    @RF00677                                            0677
*     DO;                           /* IS THERE CHKPT DATA   @Y17XARW*/
*       IF ELMNT->WRTCD=ZERO THEN                                  0679
         L     @14,ELMNT(,ROPCAVT)                                 0679
         CLI   WRTCD(@14),0                                        0679
         BNE   @RF00679                                            0679
*         DO;                       /* YES, IS THIS GOOD RETURN?   0680
*                                                            @Y17XARW*/
*           IF OCICTYPE=OCICMUL THEN                               0681
         CLI   OCICTYPE(@12),2                                     0681
         BNE   @RF00681                                            0681
*             DO;                   /* IS THIS MULTIPT LINE? @Y17XARW*/
*               REG0=ICTNTNU;       /* SETUP NUMBER OF UNITS @Y17XARW*/
         SLR   REG0,REG0                                           0683
         IC    REG0,ICTNTNU(,@15)                                  0683
*               REG1=OCPTRSAV;      /* POINT TO START OF OFFSETS   0684
*                                                            @Y17XARW*/
         LR    REG1,@15                                            0684
*               DO UNTIL REG0=0;    /* FIND FIRST UNIT       @Y17XARW*/
@DL00685 DS    0H                                                  0686
*                 REG1=REG1->PRFTIC;/* POINT TO UNIT         @Y17XARW*/
         L     REG1,PRFTIC(,REG1)                                  0686
*                 REG0=REG0-ONE;    /* DECREMENT COUNT       @Y17XARW*/
         BCTR  REG0,0                                              0687
*               END;                /*                       @Y17XARW*/
@DE00685 LTR   REG0,REG0                                           0688
         BNZ   @DL00685                                            0688
*               PLMVTU=REG1;        /* SETUP TARGET UNIT     @Y17XARW*/
         L     @12,OPCWORK(,ROPCAVT)                               0689
         ST    REG1,PLMVTU(,@12)                                   0689
*               PLMVTD=REG1+12;     /* SETUP TARGET DATA     @Y17XARW*/
         LA    @15,12                                              0690
         ALR   @15,REG1                                            0690
         ST    @15,PLMVTD(,@12)                                    0690
*             END;                  /*                       @Y17XARW*/
*           ELSE                                                   0692
*             DO;                   /* USE FIRST UNIT        @Y17XARW*/
         B     @RC00681                                            0692
@RF00681 DS    0H                                                  0693
*               PLMVTU=OCPTRSAV;    /* SETUP TARGET UNIT     @Y17XARW*/
         L     @12,OPCWORK(,ROPCAVT)                               0693
         L     @15,OPCCOPCE(,ROPCAVT)                              0693
         L     @15,OCPTRSAV(,@15)                                  0693
         ST    @15,PLMVTU(,@12)                                    0693
*               PLMVTD=OCPTRSAV+12; /* SETUP TARGET DATA     @Y71XAR5*/
         AL    @15,@CF00272                                        0694
         ST    @15,PLMVTD(,@12)                                    0694
*             END;                  /*                       @Y17XARW*/
*           TTCIN=PRUTTCIN;         /* SETUP TTCIN IN TARGET @Y17XARW*/
@RC00681 L     @12,OPCCOPCE(,ROPCAVT)                              0696
         L     @12,OCPTRSAV(,@12)                                  0696
         LH    @15,PRUTTCIN(,UNIT)                                 0696
         N     @15,@CF02274                                        0696
         STH   @15,TTCIN(,@12)                                     0696
*           DATCT=PRUDATCT;         /* SETUP DATA COUNT IN TARGET  0697
*                                                            @Y17XARW*/
         LH    @15,PRUDATCT(,UNIT)                                 0697
         STH   @15,DATCT(,@12)                                     0697
*           PLMVLNTH=PRUDATCT;      /* SETUP LENGTH OF DATA  @Y17XARW*/
         L     @12,OPCWORK(,ROPCAVT)                               0698
         STH   @15,PLMVLNTH(,@12)                                  0698
*           PLMVSU=UNIT;            /* SETUP SOURCE UNIT     @Y17XARW*/
         ST    UNIT,PLMVSU(,@12)                                   0699
*           PLMVSD=ADDR(PRUDATA);   /* SETUP SOURCE DATA     @Y17XARW*/
         LA    @15,PRUDATA(,UNIT)                                  0700
         ST    @15,PLMVSD(,@12)                                    0700
*           PLMVFLG1=0;             /* CLEAR UNUSED FLAGS    @Y17XARW*/
         MVI   PLMVFLG1(@12),X'00'                                 0701
*           PLMVFLG2=0;             /*                       @Y17XARW*/
         MVI   PLMVFLG2(@12),X'00'                                 0702
*           PLMVUNCA=0;             /*                       @Y17XARW*/
         SLR   @15,@15                                             0703
         ST    @15,PLMVUNCA(,@12)                                  0703
*           REG1=ADDR(IEDPLMV);     /* SETUP PARM LIST       @Y17XARW*/
         LR    REG1,@12                                            0704
*           CALL IEDMVBFR;          /* MOVE COPY DATA        @Y17XARW*/
         L     @12,AVTSAVTP(,AVT)                                  0705
         L     @15,SAVTMVBF(,@12)                                  0705
         BALR  @14,@15                                             0705
*         END;                      /*                       @Y17XARW*/
*       ELSE                                                       0707
*         DO;                       /* BAD RETURN CODE       @Y17XARW*/
         B     @RC00679                                            0707
@RF00679 DS    0H                                                  0708
*           REG1=OCPTRSAV;          /* GET UNITS TO FREE     @Y17XARW*/
         L     @12,OPCCOPCE(,ROPCAVT)                              0708
         L     REG1,OCPTRSAV(,@12)                                 0708
*           OCPTRSAV=INVALTIC;      /* RESET BUFF POINTER    @Y17XARW*/
         MVC   OCPTRSAV(4,@12),@CF01925                            0709
*           CALL FREEBUFF;          /* FREE SAVED BUFFERS    @Y17XARW*/
         L     @15,OPCFREBF(,ROPCAVT)                              0710
         BALR  @14,@15                                             0710
*         END;                      /*                       @Y17XARW*/
*     END;                          /*                       @Y17XARW*/
*   GOTO XCTL;                      /* XCTL TO NEXT MOD      @Y17XARW*/
         B     XCTL                                                0713
*ERREXIT:                                                          0714
*   ELMNT->WRTCD='1C'X;             /* SET RETURN CODE               */
ERREXIT  L     @12,ELMNT(,ROPCAVT)                                 0714
         MVI   WRTCD(@12),X'1C'                                    0714
*   GOTO ALLDONE;                   /* TELL APPLICATION PROGRAM      */
         B     ALLDONE                                             0715
*SWTCHID:                                                          0716
*   OPCMODID=MODNAME1;              /* SET NAME FOR XCTL     @Y17XARW*/
SWTCHID  MVC   OPCMODID(2,ROPCAVT),MODNAME1                        0716
*XCTL:                                                             0717
*   REG1=ROPCAVT;                   /* SETUP OP CNTRL AVT ADDR     0717
*                                                            @Y17XARW*/
XCTL     LR    REG1,ROPCAVT                                        0717
*   DO;                             /* IEDXCTLRFY REG14 RSTD         */
*     GEN EXIT REFS(ROPCAVT,OPCTRACE,OPCXCTL) NOSEQFLOW;           0719
*                                   /*
         LA    15,OPCXCTL(,ROPCAVT)   POINT TO OPCXCTL LIST
         EX    0,OPCTRACE(,ROPCAVT)    INVOKE XCTL TRACE
         XCTL  SF=(E,(15))             XCTL TO NEXT MODULE
*   END;                            /* END OF IEDXCTL        @Y17XARW*/
*TNTCHK:                                                           0721
*   IF TNTOLEN<=ZERO THEN                                          0721
TNTCHK   L     @12,OPCWORK(,ROPCAVT)                               0721
         LH    @15,TNTOLEN(,@12)                                   0721
         LTR   @15,@15                                             0721
         BP    @RF00721                                            0721
*     DO;                           /* IF NO ROOM IN THIS UNIT     0722
*                                                            @Y17XARW*/
*       TNTOPTR=TNTOUNT->PRFTIC+12-TNTOLEN;/* POINT TO NEXT TNT ENTRY
*                                                            @Y17XARW*/
         L     @14,TNTOUNT(,@12)                                   0723
         L     @14,PRFTIC(,@14)                                    0723
         LA    @07,12                                              0723
         ALR   @07,@14                                             0723
         SLR   @07,@15                                             0723
         ST    @07,TNTOPTR(,@12)                                   0723
*       TNTOLEN=AVTKEYLE+TNTOLEN;   /* CALCULATE LENGTH IN NEXT UNIT
*                                                            @Y17XARW*/
         AH    @15,AVTKEYLE(,AVT)                                  0724
         STH   @15,TNTOLEN(,@12)                                   0724
*       TNTOUNT=TNTOUNT->PRFTIC;    /* RESET UNIT ADDRESS    @Y17XARW*/
         ST    @14,TNTOUNT(,@12)                                   0725
*     END;                          /*                       @Y17XARW*/
*   RETURN;                                                        0727
@EL00001 DS    0H                                                  0727
@EF00001 DS    0H                                                  0727
@ER00001 BR    @14                                                 0727
*   RFY                                                            0728
*     REG14 UNRSTD;                 /*                       @Y17XARW*/
*   END IGCI210D                                                   0729
*                                                                  0729
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (TAVTD   )                                       */
*/*%INCLUDE SYSLIB  (TCD0D   )                                       */
*/*%INCLUDE SYSLIB  (TOPCED  )                                       */
*/*%INCLUDE SYSLIB  (TOPCAVTD)                                       */
*/*%INCLUDE SYSLIB  (TTRMD   )                                       */
*/*%INCLUDE SYSLIB  (TPRFD   )                                       */
*/*%INCLUDE SYSLIB  (TPRUD   )                                       */
*/*%INCLUDE SYSLIB  (TBDUD   )                                       */
*/*%INCLUDE SYSLIB  (TTNTD   )                                       */
*/*%INCLUDE SYSLIB  (TPLMVD  )                                       */
*/*%INCLUDE SYSLIB  (TRHD    )                                       */
*/*%INCLUDE SYSLIB  (TTHD    )                                       */
*                                                                  0729
*       ;                                                          0729
         B     @EL00001                                            0729
@DATA    DS    0H
@SM02282 MVC   MOVCHARS(0,@15),MOVCHARS(@06)
         DS    0F
         DS    0F
@CF00089 DC    F'1'
@CF00103 DC    F'3'
@CH00103 EQU   @CF00103+2
@CF00073 DC    F'8'
@CF00272 DC    F'12'
@CF00047 DC    F'24'
@CF01925 DC    XL4'08000002'
@CF02274 DC    XL4'0000FFFF'
@CF02276 DC    BL4'10000000000000000000000000000000'
@CF02279 DC    BL4'01111111111111111111111111111111'
         DS    0D
@CB02088 DC    X'0B8000'
MODNAME1 DC    CL2'I3'
MODNAME2 DC    CL2'T0'
MODNAME3 DC    CL2'06'
MODNAME4 DC    CL2'02'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
@0       EQU   00
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
REG0     EQU   @00
REG1     EQU   @01
ROPCAVT  EQU   @02
TNTNDX   EQU   @03
RWRK1    EQU   @03
AVT      EQU   @04
UNIT     EQU   @05
LCB      EQU   @08
RFROM    EQU   @08
RAREA    EQU   @09
RLNGTH   EQU   @10
RBASE    EQU   @11
REG12    EQU   @12
RSAVE    EQU   @13
REG14    EQU   @14
REG15    EQU   @15
IEDQAPTR EQU   0
IEDPRUQP EQU   0
IEDQPPTR EQU   0
IEDQNPTR EQU   0
IEDPLMVP EQU   0
ROPCE    EQU   0
IEDQAVTD EQU   0
AVTSAVEX EQU   IEDQAVTD+288
AVTREADD EQU   IEDQAVTD+380
AVTBUFSW EQU   IEDQAVTD+384
@NM00004 EQU   IEDQAVTD+388
AVTCKFLG EQU   @NM00004
AVTBASE  EQU   IEDQAVTD+412
AVTPKF   EQU   AVTBASE
AVTRNMPT EQU   IEDQAVTD+424
AVTHG02  EQU   IEDQAVTD+528
AVTDISP  EQU   IEDQAVTD+552
AVTHD    EQU   IEDQAVTD+556
AVTSCOPT EQU   AVTHD
AVTSAVTP EQU   IEDQAVTD+612
AVTSAVTF EQU   AVTSAVTP
AVTCKPEL EQU   IEDQAVTD+652
AVTCKRMV EQU   AVTCKPEL
AVTCKELF EQU   IEDQAVTD+680
AVTCKBYT EQU   IEDQAVTD+691
AVTHG01  EQU   IEDQAVTD+692
AVTCKLNK EQU   IEDQAVTD+696
AVTCRELE EQU   IEDQAVTD+708
AVTCCELE EQU   AVTCRELE
AVTCLRHI EQU   IEDQAVTD+716
AVTADBUF EQU   IEDQAVTD+720
AVTSYSER EQU   IEDQAVTD+728
AVTBFRFG EQU   IEDQAVTD+784
AVTCKPQB EQU   IEDQAVTD+804
AVTCKPTB EQU   AVTCKPQB
AVTCKPEC EQU   AVTCKPQB+4
AVTCKPCC EQU   AVTCKPEC
AVTOPCQB EQU   IEDQAVTD+816
AVTOPCOB EQU   AVTOPCQB
AVTOPCEC EQU   AVTOPCQB+4
AVTOPCCC EQU   AVTOPCEC
AVTOLTQB EQU   IEDQAVTD+828
AVTCWFL1 EQU   IEDQAVTD+924
AVTCWFL2 EQU   IEDQAVTD+925
AVTSUBT  EQU   IEDQAVTD+948
AVTIOTR  EQU   IEDQAVTD+949
AVTKEYLE EQU   IEDQAVTD+1032
AVTBIT1  EQU   IEDQAVTD+1050
AVTBIT2  EQU   IEDQAVTD+1051
AVTBIT3  EQU   IEDQAVTD+1052
AVTSTAIN EQU   AVTBIT3
AVTBIT4  EQU   IEDQAVTD+1136
@NM00083 EQU   IEDQAVTD+1232
IEDNSVTD EQU   0
SAVTDIAG EQU   IEDNSVTD
SAVTDIAF EQU   SAVTDIAG
SAVTLUSQ EQU   IEDNSVTD+88
SAVTMVBF EQU   IEDNSVTD+160
SAVTSCLU EQU   IEDNSVTD+168
SAVTTCPU EQU   IEDNSVTD+238
SAVTNAX  EQU   IEDNSVTD+248
SAVTZELM EQU   IEDNSVTD+270
SAVTRDRV EQU   IEDNSVTD+284
SAVTCKQB EQU   IEDNSVTD+300
SAVTCKTB EQU   SAVTCKQB
SAVTCKEC EQU   SAVTCKQB+4
SAVTCKCC EQU   SAVTCKEC
SAVTNETF EQU   IEDNSVTD+324
SAVTCDRV EQU   IEDNSVTD+332
IEDQOPCE EQU   0
OCELEM   EQU   IEDQOPCE+4
OCUNIT   EQU   IEDQOPCE+8
OCRUDEST EQU   OCUNIT
OCCKPKEY EQU   OCRUDEST
OCSCAN   EQU   OCCKPKEY
@NM00107 EQU   OCRUDEST+1
OCUNITBF EQU   @NM00107+2
OCOPTCDE EQU   IEDQOPCE+12
OCSWITCH EQU   IEDQOPCE+13
OCFLAG   EQU   IEDQOPCE+14
OCRESP   EQU   OCFLAG
OCRLN    EQU   IEDQOPCE+15
OCCIB    EQU   IEDQOPCE+16
OCMSTSAV EQU   OCCIB
OCDEST   EQU   OCMSTSAV
OCTRMTBL EQU   IEDQOPCE+20
OCLINENO EQU   IEDQOPCE+22
OCTIOT   EQU   OCLINENO
OCWTGB   EQU   OCTIOT
OCTRUNIT EQU   IEDQOPCE+24
OCRSID   EQU   OCTRUNIT
OCALSTAT EQU   OCRSID
OCFNAALL EQU   OCALSTAT
OCACTREQ EQU   OCALSTAT
OCFLAG1  EQU   OCRSID+1
OCPARM   EQU   IEDQOPCE+28
OCWTG    EQU   IEDQOPCE+30
OCBACKUP EQU   IEDQOPCE+32
OCBUFNED EQU   OCBACKUP
OCCOUNT1 EQU   OCBUFNED
OCBUFGOT EQU   OCBACKUP+2
OCCOUNT2 EQU   OCBUFGOT
OCMODNME EQU   IEDQOPCE+40
OCIPLWA  EQU   OCMODNME
OCPTRSAV EQU   OCMODNME+4
OCCKDATA EQU   IEDQOPCE+48
OCRSTGTM EQU   OCCKDATA
OC379RRT EQU   OCRSTGTM
OCNCP    EQU   OCRSTGTM+2
OCOID    EQU   IEDQOPCE+56
IEDQOPCN EQU   0
OCLDNME  EQU   IEDQOPCN
OCLINTTE EQU   OCLDNME
OCREQFLG EQU   OCLINTTE+2
OCPREFLG EQU   OCLINTTE+3
IEDQOPCD EQU   0
OPCAVTPT EQU   IEDQOPCD+8
OPCCOPCE EQU   IEDQOPCD+12
OPCTRACE EQU   IEDQOPCD+32
OPCSAVE  EQU   IEDQOPCD+56
OPCWORK  EQU   IEDQOPCD+140
OPCAQCTL EQU   IEDQOPCD+180
OPCXCTL  EQU   IEDQOPCD+204
OPCLDNME EQU   IEDQOPCD+212
OPCMODID EQU   OPCLDNME+3
OPCGETBF EQU   IEDQOPCD+276
OPCFREBF EQU   IEDQOPCD+280
OPCSPEC  EQU   IEDQOPCD+300
OPCHNEND EQU   IEDQOPCD+302
OPCWRKSP EQU   IEDQOPCD+320
OPCPWCOB EQU   IEDQOPCD+368
OPCPWQCB EQU   OPCPWCOB
OPCPWECB EQU   OPCPWCOB+4
OPCSESS  EQU   IEDQOPCD+384
OPCSFLAG EQU   OPCSESS
OPCSENSE EQU   OPCSESS+8
OPCSNSSY EQU   OPCSENSE
OPCSNSUS EQU   OPCSENSE+2
OPCPCID  EQU   IEDQOPCD+456
OPCUNIQP EQU   OPCPCID+2
OPCSESSF EQU   IEDQOPCD+464
IEDTRM   EQU   0
IEDNTRM  EQU   IEDTRM
TRMDIALQ EQU   IEDNTRM+1
TRMBYTE7 EQU   TRMDIALQ+2
TRMATNDX EQU   IEDNTRM+4
TRMINDEX EQU   IEDNTRM+6
TRMCOHTG EQU   IEDNTRM+8
TRMBYTE6 EQU   TRMCOHTG
TRMCDF0  EQU   TRMBYTE6
TRMBYTE5 EQU   TRMCOHTG+1
TRMBYTE4 EQU   IEDNTRM+10
TRMBYTE3 EQU   IEDNTRM+11
TRMBYTE2 EQU   IEDNTRM+12
TRMRSACT EQU   TRMBYTE2
TRMINPG  EQU   TRMBYTE2
TRMBYTE1 EQU   IEDNTRM+13
TRMSCPRQ EQU   TRMBYTE1
TRMBYTE0 EQU   IEDNTRM+16
TRMINPUT EQU   TRMBYTE0
TRMNOWCD EQU   TRMBYTE0
TRMSIBPT EQU   IEDNTRM+17
TRMLTRAC EQU   TRMSIBPT
TRMLBUFR EQU   TRMLTRAC
TRMRLMCT EQU   IEDNTRM+20
TRMLGBST EQU   TRMRLMCT
IEDQTRM  EQU   IEDTRM+24
TRMSTATE EQU   IEDQTRM
TRMLOG   EQU   TRMSTATE
TRMDESTQ EQU   IEDQTRM+1
TRMRSTRT EQU   TRMDESTQ+2
TRMINSEQ EQU   IEDQTRM+4
TLISTCNT EQU   TRMINSEQ
TRMSESCT EQU   TLISTCNT
TRMOUTSQ EQU   IEDQTRM+6
TLISTEN  EQU   TRMOUTSQ
TRMDSORG EQU   TLISTEN
TRMPLIM  EQU   TLISTEN+1
TRMALTD  EQU   IEDQTRM+8
TRMPRILK EQU   TRMALTD
TRMDEVFL EQU   IEDQTRM+10
TRMADDC  EQU   TRMDEVFL
TRMNCPI  EQU   TRMDEVFL+1
TRMSTAT  EQU   IEDQTRM+12
TRMAPB   EQU   TRMSTAT
TRMSIO   EQU   TRMAPB
TRMOWNER EQU   TRMSIO
TRMSENSE EQU   TRMAPB+3
IEDQPRF  EQU   0
PRFRCB   EQU   IEDQPRF
PRFKEY   EQU   PRFRCB
PRFQCBA  EQU   PRFRCB+1
PRFPRI   EQU   PRFRCB+4
PRFLINK  EQU   PRFRCB+5
PRFTIC   EQU   IEDQPRF+8
PRFTICC  EQU   PRFTIC
PRFTI0   EQU   PRFTIC+1
PRFVTCHK EQU   PRFTI0+2
PRFNBUNT EQU   IEDQPRF+12
PRFSUNIT EQU   PRFNBUNT
PRFPLQCB EQU   PRFSUNIT
PRFLCB   EQU   IEDQPRF+13
PRFSRCSZ EQU   IEDQPRF+16
PRFSTAT1 EQU   IEDQPRF+20
PRFCORE  EQU   IEDQPRF+21
PRFXTRA  EQU   PRFCORE
PRFSCAN  EQU   IEDQPRF+24
PRFTQBCK EQU   IEDQPRF+26
PRFNTXT  EQU   PRFTQBCK
PRFEOBOF EQU   PRFNTXT
PRFLU2TT EQU   PRFNTXT+1
PRFCRCD  EQU   IEDQPRF+29
PRFTSOFL EQU   PRFCRCD
PRFCHDR  EQU   IEDQPRF+32
PRFNHDR  EQU   PRFCHDR
PRFHQBCK EQU   IEDQPRF+35
IEDPF1   EQU   0
PRF1FLG1 EQU   IEDPF1+3
PRF1WD2  EQU   IEDPF1+4
PRF1SEQP EQU   PRF1WD2
PRF1SQID EQU   PRF1SEQP
PRF1TAG1 EQU   PRF1SQID
IEDPF2   EQU   0
PRF2FLG2 EQU   IEDPF2
PRF2WD2  EQU   IEDPF2+4
PRF2SEQP EQU   PRF2WD2
PRF2RFLG EQU   PRF2SEQP
IEDPRUQD EQU   0
PRUTTCIN EQU   IEDPRUQD
PRUDATCT EQU   IEDPRUQD+2
PRUTIC   EQU   IEDPRUQD+8
PRUNUNIT EQU   PRUTIC+1
PRUVTCHK EQU   PRUNUNIT+2
PRUDATA  EQU   IEDPRUQD+12
IEDPRUND EQU   0
PRURHTH  EQU   IEDPRUND
PRURH    EQU   PRURHTH
PRURHFG0 EQU   PRURH
PRURHSDI EQU   PRURHFG0
PRURHFG1 EQU   PRURH+1
PRURHFG2 EQU   PRURH+2
PRUTH    EQU   PRURHTH+3
PRUFIDN  EQU   PRUTH
IEDBDU   EQU   0
BDUMODIF EQU   IEDBDU+1
BDUFNFLG EQU   IEDBDU+2
BDUHEADR EQU   BDUFNFLG
BDUBDUFG EQU   IEDBDU+3
BDURSP   EQU   IEDBDU+4
BDUSYRSP EQU   BDURSP
BDUEXRSP EQU   BDURSP+1
BDUEND   EQU   IEDBDU+6
IEDQTNTD EQU   0
TNTSTART EQU   IEDQTNTD+82
IEDTNTA  EQU   0
IEDPLMV  EQU   0
PLMVTU   EQU   IEDPLMV
PLMVTD   EQU   IEDPLMV+4
PLMVSU   EQU   IEDPLMV+8
PLMVSD   EQU   IEDPLMV+12
PLMVLNTH EQU   IEDPLMV+16
PLMVFLGS EQU   IEDPLMV+18
PLMVFLG1 EQU   PLMVFLGS
PLMVFLG2 EQU   PLMVFLGS+1
PLMVUNCA EQU   IEDPLMV+20
IEDRH    EQU   0
TRHBYTE0 EQU   IEDRH
TRHBYTE1 EQU   IEDRH+1
TRHBYTE2 EQU   IEDRH+2
IEDTH    EQU   0
TTHBYTE0 EQU   IEDTH
TTHSNF   EQU   IEDTH+6
TTHTAG   EQU   TTHSNF
TTHTAG1  EQU   TTHTAG
WORKAREA EQU   0
WENTCD   EQU   WORKAREA+9
WANSCD   EQU   WORKAREA+10
WRTCD    EQU   WORKAREA+11
WTO      EQU   WORKAREA+16
WFROM    EQU   WORKAREA+20
FIELD    EQU   0
FCOUNT   EQU   FIELD
FLAGS    EQU   FCOUNT
LASTID   EQU   FLAGS
CONTROL  EQU   0
WIDTH    EQU   CONTROL+2
ICTNT    EQU   0
ICTNTDAT EQU   ICTNT+12
ICTNTCTL EQU   ICTNTDAT
ICTNTNO  EQU   ICTNTCTL
ICTNTNU  EQU   ICTNTCTL+2
ICTNTOFF EQU   ICTNTDAT+3
WA       EQU   0
RCOUNT   EQU   WA+24
COUNTS   EQU   WA+28
NMBENT   EQU   COUNTS
NUMPROC  EQU   COUNTS+1
TNTDATA  EQU   WA+32
OFFSET   EQU   TNTDATA
STATUS   EQU   TNTDATA+2
NEXTRCD  EQU   WA+36
ENDUNIT  EQU   WA+40
TNTOPTR  EQU   WA+44
TNTOUNT  EQU   WA+48
TNTOLEN  EQU   WA+52
NUMDEV   EQU   WA+54
NUMTNT   EQU   WA+56
LENMOVE  EQU   WA+57
LENDATA  EQU   WA+58
MULTIPNT EQU   0
MULCURNB EQU   MULTIPNT+2
DEVRCD   EQU   0
TNTUNIT  EQU   12
PRUBUFF  EQU   0
TTCIN    EQU   PRUBUFF
DATCT    EQU   PRUBUFF+2
IEDQTNT  EQU   0
ALLOCBUF EQU   0
FREEBUFF EQU   0
IEDMVBFR EQU   0
IEDIAP03 EQU   0
MOVCHARS EQU   0
IEDNBPTR EQU   0
IEDNLPTR EQU   0
IEDQLPTR EQU   0
IEDQQPTR EQU   0
IEDQTPTR EQU   0
TNTDCODE EQU   46
TNTNAME  EQU   0
@NM00114 EQU   OCCKDATA
@NM00116 EQU   OCCIB
@NM00117 EQU   @NM00116+1
OCCKPKY1 EQU   OCCKPKEY
OCCKPTYP EQU   OCCKPKY1
OCICACTN EQU   OCMODNME
OCICDADR EQU   OCICACTN
OCICTYPE EQU   OCICDADR
OCICSW   EQU   OCICDADR+3
OCICINAC EQU   OCICSW
@NM00122 EQU   OCBACKUP
@NM00123 EQU   OCCKDATA
OCMSGFLG EQU   OCPREFLG
OCBKUP1  EQU   OCMODNME
@NM00127 EQU   OCMODNME
OCBKUP2  EQU   OCCKDATA
OCBKUP3  EQU   OCLDNME
OCRESPTR EQU   OCBKUP3+4
OCDIALLN EQU   OCRESPTR
OCIPLDMP EQU   OCLDNME+4
OPCAQWD  EQU   OPCAQCTL
OPCAQWD1 EQU   OPCAQWD
OPCAQWD2 EQU   OPCAQWD+4
OPCAQWD3 EQU   OPCAQWD+8
@NM00161 EQU   TRMSTATE
TRMLUFD0 EQU   TRMBYTE7
TRMSNAST EQU   TRMBYTE6
TRMCDFD0 EQU   TRMBYTE5
TRMPRE1  EQU   TRMBYTE4
TRMNCP1  EQU   TRMBYTE4
TRMLU1   EQU   TRMBYTE4
TRMLINK1 EQU   TRMBYTE4
TRMDCONS EQU   TRMLINK1
TRMPRE   EQU   TRMBYTE3
TRMNCP   EQU   TRMBYTE3
TRMIPLDM EQU   TRMNCP
TRMPU    EQU   TRMBYTE3
TRMLU    EQU   TRMBYTE3
TRMCDMGR EQU   TRMBYTE3
TRMLINK  EQU   TRMBYTE3
@NM00192 EQU   PRFSRCSZ
PRFOPCTL EQU   PRFNHDR
PTRS     EQU   OPCWRKSP
ELMNT    EQU   PTRS
PARAM    EQU   PTRS+4
RTRM     EQU   PTRS+8
RDATA    EQU   PTRS+12
EPTR     EQU   PTRS+16
OCACTCD  EQU   OCMODNME
BDUTEXT  EQU   BDUEND
OCLINRRT EQU   OCTRUNIT
OCPCID   EQU   OCBACKUP
OCRSNCDE EQU   OCALSTAT
OCSENSE  EQU   OCBACKUP
PRFOID   EQU   PRFCRCD
PRFSHDR  EQU   IEDQPRF+42
TNTCODE  EQU   IEDQTNTD
TNTFIRST EQU   TNTSTART
TRMOPT   EQU   IEDQTRM+20
TRMPOOLP EQU   TRMINSEQ
TRMSRPTR EQU   TRMPLIM
*                                      START UNREFERENCED COMPONENTS
@NM00194 EQU   PRFOPCTL+2
PRFOPFLG EQU   PRFOPCTL+1
@NM00193 EQU   PRFOPCTL
PRFSVFLG EQU   @NM00192+3
PRFSVFFO EQU   @NM00192
TRMLDISC EQU   TRMLINK
@NM00180 EQU   TRMLINK
TRMLALOC EQU   TRMLINK
TRMLSTAT EQU   TRMLINK
TRMLINT  EQU   TRMLINK
TRMEPMOD EQU   TRMLINK
TRMCDLOG EQU   TRMCDMGR
@NM00179 EQU   TRMCDMGR
@NM00178 EQU   TRMCDMGR
@NM00177 EQU   TRMCDMGR
@NM00176 EQU   TRMCDMGR
@NM00175 EQU   TRMCDMGR
TRMBKDUP EQU   TRMCDMGR
TRMLULOG EQU   TRMLU
@NM00174 EQU   TRMLU
@NM00173 EQU   TRMLU
@NM00172 EQU   TRMLU
TRMTDIFF EQU   TRMLU
@NM00171 EQU   TRMLU
@NM00170 EQU   TRMLU
@NM00169 EQU   TRMLU
TRMPCONT EQU   TRMPU
TRMPDOCQ EQU   TRMPU
TRMPULOC EQU   TRMPU
TRMPDNAS EQU   TRMPU
TRMPALOC EQU   TRMPU
TRMNCONT EQU   TRMNCP
TRMQUCKN EQU   TRMNCP
TRMSLOWN EQU   TRMNCP
TRMSYGEN EQU   TRMNCP
TRMNCPCL EQU   TRMNCP
TRMCONN  EQU   TRMIPLDM
TRMINOUT EQU   TRMPRE
TRMRDOUT EQU   TRMPRE
TRMNLOUT EQU   TRMPRE
TRMWROUT EQU   TRMPRE
TRMASNXI EQU   TRMPRE
TRMSTMM  EQU   TRMPRE
TRMCMODE EQU   TRMPRE
TRMSTPND EQU   TRMPRE
TRMNCPLK EQU   TRMLINK1
@NM00168 EQU   TRMLINK1
TRMDCONN EQU   TRMDCONS
TRMDCOP  EQU   TRMDCONS
TRMPMARY EQU   TRMLU1
TRMLUNAS EQU   TRMLU1
@NM00167 EQU   TRMLU1
TRMLSCVP EQU   TRMLU1
@NM00166 EQU   TRMLU1
TRMCPOPT EQU   TRMLU1
TRMCPREQ EQU   TRMLU1
@NM00165 EQU   TRMNCP1
TRMANS   EQU   TRMNCP1
TRMLINOP EQU   TRMNCP1
TRMINOP  EQU   TRMNCP1
TRMLYNCH EQU   TRMPRE1
TRMSPOUT EQU   TRMPRE1
TRMERLCK EQU   TRMPRE1
TRMQNPL  EQU   TRMPRE1
TRMSPACT EQU   TRMPRE1
TRMOCNI  EQU   TRMPRE1
TRMSESSN EQU   TRMPRE1
TRMCONT  EQU   TRMPRE1
TRMINERR EQU   TRMCDFD0
TRMLUTM  EQU   TRMCDFD0
TRMLUIT  EQU   TRMCDFD0
TRMLUREQ EQU   TRMCDFD0
TRMCDPRE EQU   TRMCDFD0
TRMWASCD EQU   TRMCDFD0
TRMSRPFG EQU   TRMCDFD0
TRMSESRQ EQU   TRMCDFD0
@NM00164 EQU   TRMSNAST
TRMDRSRC EQU   TRMSNAST
@NM00163 EQU   TRMLUFD0
TRMNOINP EQU   TRMLUFD0
TRMASSOC EQU   TRMLUFD0
TRMAUTO  EQU   TRMLUFD0
@NM00162 EQU   @NM00161
TRMENTRY EQU   @NM00161
OPCAQLST EQU   OPCAQWD3+1
OPCAQRQ3 EQU   OPCAQWD3
OPCAQSEC EQU   OPCAQWD2+1
OPCAQRQ2 EQU   OPCAQWD2
OPCAQFST EQU   OPCAQWD1+1
OPCAQREQ EQU   OPCAQWD1
@NM00130 EQU   OCIPLDMP
OCACTRQ  EQU   OCIPLDMP
OCDACRQ  EQU   OCIPLDMP
OCIPLRQ  EQU   OCIPLDMP
OCDMPRQ  EQU   OCIPLDMP
@NM00129 EQU   OCRESPTR+2
OCOHNATA EQU   OCDIALLN
OCRRTPTR EQU   OCBKUP3
@NM00128 EQU   OCBKUP2+4
OCNHITTC EQU   OCBKUP2+2
OCLINTTC EQU   OCBKUP2
OCCSIB   EQU   @NM00127
@NM00126 EQU   OCBKUP1+6
OCTARTTC EQU   OCBKUP1+4
OCSRTTC  EQU   OCBKUP1+2
OCRSTTC  EQU   OCBKUP1
@NM00125 EQU   OCMSGFLG
OCRRT    EQU   OCMSGFLG
OCNAME   EQU   OCMSGFLG
OCLU1TTE EQU   @NM00123+5
OCSFLAG  EQU   @NM00123+4
OCLU2TTI EQU   @NM00123+2
OCLU1TTI EQU   @NM00123
OCDISTLN EQU   @NM00122+6
OCDISTAD EQU   @NM00122+2
OCDISTNA EQU   @NM00122
@NM00121 EQU   OCICSW
OCICATST EQU   OCICDADR+1
@NM00120 EQU   OCCKPKY1
OCCKPENV EQU   OCCKPKY1
OCCKPRST EQU   OCCKPTYP
OCCKPNCP EQU   OCCKPTYP
OCCKPINC EQU   OCCKPTYP
@NM00119 EQU   @NM00116+2
@NM00118 EQU   @NM00117
OCTSTAT  EQU   @NM00117
OCREASON EQU   @NM00116
@NM00115 EQU   @NM00114+4
OCOIDEP  EQU   @NM00114
TNTSTRT  EQU   TNTUNIT+3
TNTNU    EQU   TNTUNIT+2
TNTNOFF  EQU   TNTUNIT
DEVDATA  EQU   DEVRCD+3
DEVID    EQU   DEVRCD+1
DEVLEN   EQU   DEVRCD
MULRCDS  EQU   MULTIPNT+3
MULMAX   EQU   MULTIPNT+1
MULDESC  EQU   MULTIPNT
@NM00233 EQU   TNTDATA+3
@NM00232 EQU   COUNTS+3
FLAGSN   EQU   COUNTS+2
@NM00231 EQU   WA+20
@NM00230 EQU   WA+16
@NM00229 EQU   WA+12
@NM00228 EQU   WA+8
@NM00227 EQU   WA+4
@NM00226 EQU   WA
ICTNTTIC EQU   ICTNT+8
@NM00225 EQU   ICTNT
CPUID    EQU   CONTROL+4
CNTFLG   EQU   CONTROL+3
ACTENT   EQU   CONTROL+1
TOTENT   EQU   CONTROL
FLDLNG   EQU   FIELD+2
@NM00224 EQU   FIELD+1
INVSTAT  EQU   FLAGS
@NM00223 EQU   FLAGS
CHNGSTAT EQU   LASTID
DEVASSO  EQU   FLAGS
WRQTG    EQU   WORKAREA+26
WTNTNDX  EQU   WORKAREA+24
WECBA    EQU   WORKAREA+12
WVERB    EQU   WORKAREA+8
WLINK    EQU   WORKAREA+5
WPRI     EQU   WORKAREA+4
WQCBADR  EQU   WORKAREA
TTHDCF   EQU   IEDTH+8
TTHTAG2  EQU   TTHTAG+1
@NM00222 EQU   TTHTAG1
TTHTAGS  EQU   TTHTAG1
TTHOAF   EQU   IEDTH+4
TTHDAF   EQU   IEDTH+2
TTHBYTE1 EQU   IEDTH+1
TTHEFI   EQU   TTHBYTE0
@NM00221 EQU   TTHBYTE0
TTHEBIU  EQU   TTHBYTE0
TTHBBIU  EQU   TTHBYTE0
TTHFTYPE EQU   TTHBYTE0
@NM00220 EQU   TRHBYTE2
TRHPDI   EQU   TRHBYTE2
TRHEDI   EQU   TRHBYTE2
TRHCSI   EQU   TRHBYTE2
@NM00219 EQU   TRHBYTE2
TRHCDI   EQU   TRHBYTE2
TRHEB    EQU   TRHBYTE2
TRHBB    EQU   TRHBYTE2
TRHPI    EQU   TRHBYTE1
TRHQRI   EQU   TRHBYTE1
@NM00218 EQU   TRHBYTE1
@NM00217 EQU   TRHBYTE1
TRHER    EQU   TRHBYTE1
TRHDR2   EQU   TRHBYTE1
@NM00216 EQU   TRHBYTE1
TRHDR1   EQU   TRHBYTE1
TRHEC    EQU   TRHBYTE0
TRHBC    EQU   TRHBYTE0
TRHSDI   EQU   TRHBYTE0
TRHFI    EQU   TRHBYTE0
@NM00215 EQU   TRHBYTE0
TRHRUCAT EQU   TRHBYTE0
TRHTYPE  EQU   TRHBYTE0
@NM00214 EQU   PLMVFLG1
PLMVTRIB EQU   PLMVFLG1
PLMVSRIB EQU   PLMVFLG1
PLMVTSKP EQU   PLMVFLG1
PLMVSSKP EQU   PLMVFLG1
PLMVTCTG EQU   PLMVFLG1
PLMVSCTG EQU   PLMVFLG1
PLMVUNCF EQU   PLMVFLG1
TNTTRMAD EQU   IEDTNTA
@NM00213 EQU   IEDQTNTD+46
TNTLEN   EQU   IEDQTNTD+44
@NM00212 EQU   IEDQTNTD+41
TNTENLEN EQU   IEDQTNTD+40
@NM00211 EQU   IEDQTNTD+38
@NM00210 EQU   IEDQTNTD
BDUXGRPH EQU   BDUEXRSP
BDUXFINL EQU   BDUEXRSP
BDUXINIT EQU   BDUEXRSP
BDURESP  EQU   BDUSYRSP
BDUPHASE EQU   BDUSYRSP
BDUERROR EQU   BDUSYRSP
BDUXERLK EQU   BDUBDUFG
BDUALTAK EQU   BDUFNFLG
BDUNEGAK EQU   BDUFNFLG
BDUPOSAK EQU   BDUFNFLG
BDUTPTX  EQU   BDUFNFLG
BDUFRSTB EQU   BDUFNFLG
BDULEADG EQU   BDUFNFLG
BDUSTHDR EQU   BDUFNFLG
BDUCMND  EQU   IEDBDU
@NM00209 EQU   IEDPRUND+6
PRUTAG   EQU   IEDPRUND+4
PRUTHEFI EQU   PRUFIDN
PRUTHUSS EQU   PRUFIDN
PRUTHEIU EQU   PRUFIDN
PRUTHBIU EQU   PRUFIDN
PRUTHTYE EQU   PRUFIDN
@NM00208 EQU   PRURHFG2
PRURHCSI EQU   PRURHFG2
@NM00207 EQU   PRURHFG2
PRURHCDI EQU   PRURHFG2
PRURHEB  EQU   PRURHFG2
PRURHBB  EQU   PRURHFG2
PRURHPI  EQU   PRURHFG1
@NM00206 EQU   PRURHFG1
PRURHER  EQU   PRURHFG1
PRURHDR2 EQU   PRURHFG1
@NM00205 EQU   PRURHFG1
PRURHDR1 EQU   PRURHFG1
PRURHEC  EQU   PRURHFG0
PRURHBC  EQU   PRURHFG0
PRURHFI  EQU   PRURHFG0
@NM00204 EQU   PRURHFG0
PRURUCAT EQU   PRURHFG0
PRURHTYP EQU   PRURHFG0
@NM00203 EQU   PRUVTCHK
PRUITSET EQU   PRUVTCHK
@NM00202 EQU   PRUVTCHK
@NM00201 EQU   PRUNUNIT
@NM00200 EQU   PRUTIC
@NM00199 EQU   IEDPRUQD+4
PRF2RTTI EQU   PRF2SEQP+2
@NM00198 EQU   PRF2SEQP+1
@NM00197 EQU   PRF2RFLG
PRF2RINB EQU   PRF2RFLG
PRF2MDCF EQU   IEDPF2+1
PRF2RAPI EQU   PRF2FLG2
PRF2CSMF EQU   PRF2FLG2
PRF2BNN1 EQU   PRF2FLG2
PRF2NCU2 EQU   PRF2FLG2
PRF2TERM EQU   PRF2FLG2
PRF2SMI  EQU   PRF2FLG2
PRF2FORM EQU   PRF2FLG2
PRF2TNTI EQU   PRF2FLG2
PRF1RULN EQU   PRF1SEQP+2
PRF1TAG2 EQU   PRF1SQID+1
@NM00196 EQU   PRF1TAG1
PRF1TAGS EQU   PRF1TAG1
@NM00195 EQU   PRF1FLG1
PRF1LOGD EQU   PRF1FLG1
PRF1USS  EQU   PRF1FLG1
PRF1FORM EQU   PRF1FLG1
PRF1EXPI EQU   PRF1FLG1
PRF1FIDI EQU   PRF1FLG1
PRF1RH   EQU   IEDPF1
PRFDEST  EQU   IEDQPRF+40
PRFISEQ  EQU   IEDQPRF+38
PRFSTXT  EQU   PRFHQBCK
@NM00191 EQU   PRFTSOFL
PRFNEDIT EQU   PRFTSOFL
PRFSVSEQ EQU   PRFLU2TT
PRFSVPRI EQU   PRFEOBOF
PRFISIZE EQU   PRFSCAN+1
@NM00190 EQU   PRFSCAN
PRFEOB   EQU   PRFXTRA+1
PRFSTSO  EQU   PRFXTRA
PRFNHDRN EQU   PRFSTAT1
PRFNLSTN EQU   PRFSTAT1
PRFFHP   EQU   PRFSTAT1
PRFDUPLN EQU   PRFSTAT1
PRFTSMSG EQU   PRFSTAT1
PRFITCPN EQU   PRFSTAT1
PRFERMGN EQU   PRFSTAT1
PRFCNCLN EQU   PRFSTAT1
PRFSIZE  EQU   PRFSRCSZ+2
PRFSRCE  EQU   PRFSRCSZ
PRFLU1TT EQU   PRFLCB+1
PRFRCDE  EQU   PRFLCB
PRFPIUO  EQU   PRFPLQCB
@NM00189 EQU   PRFVTCHK
PRFITSET EQU   PRFVTCHK
@NM00188 EQU   PRFVTCHK
@NM00187 EQU   PRFTI0
@NM00186 EQU   PRFTICC
@NM00185 EQU   PRFTICC
@NM00184 EQU   PRFTICC
PRFTICON EQU   PRFTICC
@NM00183 EQU   PRFTICC
@NM00182 EQU   PRFTICC
PRFBFMM  EQU   PRFTICC
PRFEOFN  EQU   PRFTICC
PRFCOUNT EQU   PRFLINK+1
@NM00181 EQU   PRFLINK
PRFFLAGS EQU   PRFPRI
PRFIOADR EQU   PRFQCBA
PRFOPCDE EQU   PRFKEY
TRMOPTBL EQU   IEDQTRM+18
TRMOPNO  EQU   IEDQTRM+17
TRMCHCIN EQU   IEDQTRM+16
TRMLOCAD EQU   TRMSENSE
TRMTEMPR EQU   TRMAPB+2
TRMNADDR EQU   TRMOWNER
@NM00160 EQU   TRMDEVFL+1
TRMTPIN  EQU   TRMDEVFL+1
@NM00159 EQU   TRMNCPI
TRMRNTRM EQU   TRMDEVFL+1
@NM00158 EQU   TRMDEVFL+1
TRMLMD   EQU   TRMDEVFL+1
TRMCONC  EQU   TRMDEVFL+1
TRMTSOB  EQU   TRMDEVFL
TRMBFDY  EQU   TRMDEVFL
TRMTBLK  EQU   TRMDEVFL
TRMSBLK  EQU   TRMDEVFL
TRMBLKS  EQU   TRMDEVFL
TRMSCV   EQU   TRMADDC
TRMDDIG  EQU   TRMDEVFL
TRMBUFS  EQU   TRMDEVFL
TRMSTEAL EQU   TRMPRILK
TRMLGB   EQU   TRMDSORG
TRMUTERM EQU   TRMSESCT
TRMVERIF EQU   TRMRSTRT
@NM00157 EQU   TRMRSTRT
@NM00156 EQU   TRMDESTQ
TRMSCNYN EQU   TRMSTATE
TRMOPTFN EQU   TRMSTATE
TRMHELDN EQU   TRMSTATE
TRMACPTN EQU   TRMSTATE
TRMPREF  EQU   TRMSTATE
TRMPROC  EQU   TRMLOG
TRMLIST  EQU   TRMLOG
TRMLINE  EQU   TRMSTATE
TRMSUBST EQU   IEDNTRM+22
TRMTYPE  EQU   IEDNTRM+21
TRMPRIME EQU   TRMLGBST
TRMOWNR  EQU   TRMLBUFR+1
TRMGPCNT EQU   TRMLBUFR
TRMBUFRD EQU   TRMBYTE0
TRMSNA   EQU   TRMBYTE0
TRMGP    EQU   TRMBYTE0
TRMDIAL  EQU   TRMBYTE0
TRMACDC  EQU   TRMNOWCD
TRMOUTPT EQU   TRMBYTE0
TRMUDEF  EQU   TRMBYTE0
TRMCOHRT EQU   IEDNTRM+14
TRMSTOTE EQU   TRMBYTE1
TRMCKPRN EQU   TRMBYTE1
TRMTSATN EQU   TRMBYTE1
TRMTRACE EQU   TRMBYTE1
TRMSWBCK EQU   TRMBYTE1
TRMAUTOC EQU   TRMBYTE1
TRMINPTP EQU   TRMBYTE1
TRMWTNEG EQU   TRMSCPRQ
TRMWRBRK EQU   TRMBYTE2
TRMNOSND EQU   TRMBYTE2
TRMPREP  EQU   TRMBYTE2
TRMGPACT EQU   TRMBYTE2
TRMANDL  EQU   TRMBYTE2
TRMCLOSN EQU   TRMINPG
TRMREMB  EQU   TRMBYTE2
TRMCINOP EQU   TRMCDF0
TRMRSTPD EQU   TRMCDF0
TRMCLNXI EQU   TRMCDF0
TRMDVAS0 EQU   TRMCDF0
TRMPURGE EQU   TRMCDF0
TRMCDST  EQU   TRMINDEX
TRMASNDX EQU   TRMATNDX
TRMBYTE8 EQU   TRMDIALQ+1
@NM00155 EQU   TRMDIALQ
@NM00154 EQU   IEDNTRM
OPCBOTTM EQU   IEDQOPCD+3644
@NM00153 EQU   IEDQOPCD+1948
@NM00152 EQU   IEDQOPCD+1860
@NM00151 EQU   IEDQOPCD+1772
@NM00150 EQU   IEDQOPCD+1696
@NM00149 EQU   IEDQOPCD+1620
OPCDSRWT EQU   IEDQOPCD+1616
@NM00148 EQU   IEDQOPCD+1532
@NM00147 EQU   IEDQOPCD+1336
@NM00146 EQU   IEDQOPCD+1328
@NM00145 EQU   IEDQOPCD+528
OPCRSTRS EQU   IEDQOPCD+524
OPCSAVES EQU   IEDQOPCD+520
OPCRSPBD EQU   IEDQOPCD+516
OPCNFY03 EQU   IEDQOPCD+512
OPCNFY01 EQU   IEDQOPCD+508
OPCURC   EQU   IEDQOPCD+504
OPCCINBD EQU   IEDQOPCD+500
OPCCRKEY EQU   IEDQOPCD+496
OPCDRSET EQU   IEDQOPCD+492
OPCDRCLN EQU   IEDQOPCD+488
OPCDRDEL EQU   IEDQOPCD+484
OPCDRLOD EQU   IEDQOPCD+480
OPCDRLOC EQU   IEDQOPCD+476
OPCDRCVT EQU   IEDQOPCD+472
OPCDRFST EQU   IEDQOPCD+468
OPCLSABC EQU   IEDQOPCD+466
@NM00144 EQU   IEDQOPCD+465
@NM00143 EQU   OPCSESSF
OPCUNIQV EQU   OPCUNIQP+2
OPCUNIQU EQU   OPCUNIQP
OPCOSSCP EQU   OPCPCID
@NM00142 EQU   IEDQOPCD+452
@NM00141 EQU   IEDQOPCD+448
OPCSDUPU EQU   IEDQOPCD+444
OPCSDULU EQU   IEDQOPCD+440
OPCSDRVT EQU   IEDQOPCD+436
OPCSDRET EQU   IEDQOPCD+432
OPCSDHSY EQU   IEDQOPCD+428
OPCSDENQ EQU   IEDQOPCD+424
OPCSDDIA EQU   IEDQOPCD+420
OPCSDAPU EQU   IEDQOPCD+416
OPCSDALU EQU   IEDQOPCD+412
OPCCSKEY EQU   IEDQOPCD+408
OPCSSKEY EQU   IEDQOPCD+404
OPCPRTTE EQU   IEDQOPCD+400
OPCLU2TT EQU   OPCSESS+14
OPCLU1TT EQU   OPCSESS+12
OPCSNSU2 EQU   OPCSNSUS+1
OPCSNSU1 EQU   OPCSNSUS
OPCSNSMN EQU   OPCSNSSY+1
OPCSNSMJ EQU   OPCSNSSY
OPCCSIB  EQU   OPCSESS+4
OPCCTTE  EQU   OPCSESS+1
@NM00140 EQU   OPCSFLAG
OPCISQUD EQU   OPCSFLAG
OPCERRST EQU   OPCSFLAG
OPCISRSP EQU   OPCSFLAG
OPCISQUE EQU   OPCSFLAG
OPCRAPMH EQU   OPCSFLAG
OPCRAPI  EQU   OPCSFLAG
OPCGTSIB EQU   IEDQOPCD+380
@NM00139 EQU   OPCPWCOB+9
@NM00138 EQU   OPCPWCOB+8
@NM00137 EQU   OPCPWECB+1
OPCPWCCC EQU   OPCPWECB
OPCPWCHN EQU   OPCPWQCB+1
OPCPWVTO EQU   OPCPWQCB
OPCWAITV EQU   IEDQOPCD+364
OPCTOTCK EQU   IEDQOPCD+360
OPCAPXTL EQU   IEDQOPCD+356
OPCDECR  EQU   IEDQOPCD+352
OPCBUFWT EQU   IEDQOPCD+348
OPCADGOT EQU   IEDQOPCD+318
OPCRQCNT EQU   IEDQOPCD+316
OPPOLSTP EQU   IEDQOPCD+312
OPCCKCIB EQU   IEDQOPCD+308
OPCEND   EQU   IEDQOPCD+307
OPCSTCBS EQU   IEDQOPCD+306
OPCOQSW  EQU   IEDQOPCD+301
@NM00136 EQU   OPCSPEC
@NM00135 EQU   OPCSPEC
@NM00134 EQU   OPCSPEC
@NM00133 EQU   OPCSPEC
OPCFRMCA EQU   OPCSPEC
OPCRSTRT EQU   OPCSPEC
OPCPART  EQU   OPCSPEC
OPCALTD  EQU   OPCSPEC
OPCBFEND EQU   IEDQOPCD+296
OPCBFIRS EQU   IEDQOPCD+292
OPCAVBUF EQU   IEDQOPCD+290
OPCIPLCT EQU   IEDQOPCD+289
OPCCLNTS EQU   IEDQOPCD+288
OPCHA8   EQU   IEDQOPCD+286
OPCBFREQ EQU   IEDQOPCD+284
OPCNEXT  EQU   IEDQOPCD+272
OPCFMDFC EQU   IEDQOPCD+268
OPCSCNC  EQU   IEDQOPCD+264
OPCHORTG EQU   IEDQOPCD+260
OPCHORT  EQU   IEDQOPCD+256
OPCCKPTL EQU   IEDQOPCD+252
OPCCKPTF EQU   IEDQOPCD+248
OPCWAITA EQU   IEDQOPCD+244
OPCWAITR EQU   IEDQOPCD+240
OPCWAITP EQU   IEDQOPCD+236
OPCWAITO EQU   IEDQOPCD+232
OPCWAITN EQU   IEDQOPCD+228
OPCWAITL EQU   IEDQOPCD+224
OPCWAITC EQU   IEDQOPCD+220
@NM00132 EQU   OPCLDNME+5
@NM00131 EQU   OPCLDNME
OPCWAIT  EQU   IEDQOPCD+192
OPCCKERB EQU   IEDQOPCD+164
OPCBFERB EQU   IEDQOPCD+148
OPCFLAG2 EQU   IEDQOPCD+147
OPCFLAG1 EQU   IEDQOPCD+146
OPCWRKSZ EQU   IEDQOPCD+144
OPCRSAVE EQU   IEDQOPCD+132
OPCQCBAD EQU   IEDQOPCD+128
OPCTRMWA EQU   IEDQOPCD+52
OPCPSTWT EQU   IEDQOPCD+48
OPCTNTEA EQU   IEDQOPCD+44
OPCPGCK  EQU   IEDQOPCD+40
OPCLCB   EQU   IEDQOPCD+36
OPCIPLAD EQU   IEDQOPCD+28
OPCTOFLK EQU   IEDQOPCD+24
OPCOPTLK EQU   IEDQOPCD+20
OPCDCBLK EQU   IEDQOPCD+16
OPCDOUBL EQU   IEDQOPCD
@NM00124 EQU   OCLDNME+6
OC1SQID  EQU   OCLDNME+4
OCWAITPC EQU   OCPREFLG
OCSRCCLN EQU   OCPREFLG
OCREMCON EQU   OCPREFLG
OCCLNUP  EQU   OCPREFLG
OCTOTEP  EQU   OCPREFLG
OCREPOST EQU   OCPREFLG
OCRSPSNT EQU   OCPREFLG
OCBFREQ  EQU   OCPREFLG
OCIDLE   EQU   OCREQFLG
OCFORCE  EQU   OCREQFLG
OCDCARD  EQU   OCREQFLG
OCPARTAL EQU   OCREQFLG
OCADNCP  EQU   OCREQFLG
OCRMPORQ EQU   OCREQFLG
OCCDLACT EQU   OCREQFLG
OCFLUSHZ EQU   OCREQFLG
OCRESPCT EQU   OCLINTTE
@NM00113 EQU   IEDQOPCE+60
OCURC    EQU   OCOID
OCCKPTWA EQU   OCCKDATA+4
OCSRCTTC EQU   OCNCP
OCCKDAT2 EQU   OC379RRT+1
OCCKDAT1 EQU   OC379RRT
OCECHOPT EQU   OCPTRSAV
OCPUADR  EQU   OCIPLWA+2
OCWTGSAV EQU   OCIPLWA
OCDVRDCT EQU   OCBACKUP+6
@NM00112 EQU   OCBACKUP+4
OCBUFRET EQU   OCCOUNT2
OCBUFUSD EQU   OCCOUNT1
OCRESNUM EQU   OCPARM
OCSEQ    EQU   OCTRUNIT+2
OCTYPTRM EQU   OCFLAG1
OCNONE   EQU   OCALSTAT
OCSOME   EQU   OCALSTAT
OCALLFLG EQU   OCALSTAT
OCREDRVE EQU   OCALSTAT
OCSEQIND EQU   OCALSTAT
OCDACTIP EQU   OCFNAALL
OCRENTRD EQU   OCALSTAT
OCDIALX  EQU   OCWTGB
OCATNDX  EQU   OCMSTSAV+2
OCREQVAL EQU   OCDEST+1
OCCONID  EQU   OCDEST
OCLOCAD  EQU   OCRLN
OCATTACH EQU   OCFLAG
OCSSCP   EQU   OCFLAG
OCOUTPUT EQU   OCFLAG
OCLINE   EQU   OCFLAG
OCMPP    EQU   OCFLAG
OCTOTE   EQU   OCFLAG
OCCONSOL EQU   OCFLAG
@NM00111 EQU   OCSWITCH
OCQUCKN  EQU   OCSWITCH
OCPRIFLG EQU   OCOPTCDE
@NM00110 EQU   OCUNITBF
OCINVTIC EQU   OCUNITBF
@NM00109 EQU   OCUNITBF
@NM00108 EQU   @NM00107
@NM00106 EQU   OCSCAN
OCNOTUCB EQU   OCSCAN
OCNONAME EQU   OCSCAN
OCALLRLN EQU   OCSCAN
OCDDNAME EQU   OCSCAN
OCDDNRLN EQU   OCSCAN
OCADDR   EQU   OCSCAN
OCELMPTR EQU   OCELEM+1
OCELMPRI EQU   OCELEM
OCLINK   EQU   IEDQOPCE
SAVTSMAX EQU   IEDNSVTD+500
SAVTSINO EQU   IEDNSVTD+498
SAVTAMAX EQU   IEDNSVTD+496
SAVTAENO EQU   IEDNSVTD+494
SAVTAINO EQU   IEDNSVTD+492
SAVTNMAX EQU   IEDNSVTD+490
SAVTNENO EQU   IEDNSVTD+488
SAVTNINO EQU   IEDNSVTD+486
SAVTRSZE EQU   IEDNSVTD+484
SAVTRMAX EQU   IEDNSVTD+482
SAVTRENO EQU   IEDNSVTD+480
SAVTRINO EQU   IEDNSVTD+478
SAVTRMIN EQU   IEDNSVTD+476
SAVTPMID EQU   IEDNSVTD+474
SAVTRRTC EQU   IEDNSVTD+472
SAVTLUSG EQU   IEDNSVTD+468
SAVTACNQ EQU   IEDNSVTD+464
SAVTCM20 EQU   IEDNSVTD+460
SAVTCFDC EQU   IEDNSVTD+456
SAVTCMOT EQU   IEDNSVTD+452
SAVTCMIN EQU   IEDNSVTD+448
SAVTCPCH EQU   IEDNSVTD+444
SAVTCRGT EQU   IEDNSVTD+440
SAVTNALC EQU   IEDNSVTD+436
SAVTATCT EQU   IEDNSVTD+434
SAVTCRIU EQU   IEDNSVTD+432
SAVTCRHI EQU   IEDNSVTD+430
SAVTCRIB EQU   IEDNSVTD+428
SAVTLCQ  EQU   IEDNSVTD+424
SAVTDRSR EQU   IEDNSVTD+420
SAVTATPT EQU   IEDNSVTD+416
SAVTCSMI EQU   IEDNSVTD+412
SAVTNXCR EQU   IEDNSVTD+408
SAVTCRPT EQU   IEDNSVTD+404
SAVTCIPH EQU   IEDNSVTD+400
SAVTBTCO EQU   IEDNSVTD+396
SAVTBTCI EQU   IEDNSVTD+392
SAVTBPCO EQU   IEDNSVTD+388
SAVTBPCI EQU   IEDNSVTD+384
SAVTLLCB EQU   IEDNSVTD+380
SAVTSCF0 EQU   IEDNSVTD+376
SAVTLSNY EQU   IEDNSVTD+372
SAVTLSZP EQU   IEDNSVTD+368
SAVTOMSU EQU   IEDNSVTD+364
SAVTGTSB EQU   IEDNSVTD+360
SAVTHIBL EQU   IEDNSVTD+356
SAVTHISY EQU   IEDNSVTD+352
SAVTNAX2 EQU   IEDNSVTD+348
SAVTCDRU EQU   IEDNSVTD+344
SAVTPOLC EQU   IEDNSVTD+342
SAVTPOLM EQU   IEDNSVTD+340
SAVTPOLR EQU   IEDNSVTD+336
SAVTCDRN EQU   SAVTCDRV
SAVTPOLL EQU   IEDNSVTD+328
SAVTPOLN EQU   IEDNSVTD+326
@NM00105 EQU   IEDNSVTD+325
@NM00104 EQU   SAVTNETF
SAVTSDIS EQU   SAVTNETF
SAVTROUT EQU   SAVTNETF
SAVTNETW EQU   SAVTNETF
SAVTDIAL EQU   IEDNSVTD+320
SAVTRQUT EQU   IEDNSVTD+316
SAVTBITN EQU   IEDNSVTD+312
@NM00103 EQU   SAVTCKQB+8
@NM00102 EQU   SAVTCKEC+1
@NM00101 EQU   SAVTCKCC
SAVTCKPO EQU   SAVTCKCC
SAVTCKWA EQU   SAVTCKCC
SAVTCKCH EQU   SAVTCKTB+1
SAVTCKVT EQU   SAVTCKTB
@NM00100 EQU   IEDNSVTD+297
SAVTRDFG EQU   SAVTRDRV+12
@NM00099 EQU   SAVTRDRV+5
SAVTRDPY EQU   SAVTRDRV+4
SAVTRDQB EQU   SAVTRDRV+1
SAVTRDKY EQU   SAVTRDRV
SAVTNID  EQU   IEDNSVTD+280
SAVTDVAS EQU   IEDNSVTD+276
SAVTPLSZ EQU   IEDNSVTD+274
@NM00098 EQU   IEDNSVTD+273
SAVTSUBL EQU   IEDNSVTD+272
@NM00097 EQU   SAVTZELM+1
SAVTSUBM EQU   SAVTZELM
SAVTMHDX EQU   IEDNSVTD+268
SAVTNAT1 EQU   IEDNSVTD+266
SAVTSH20 EQU   IEDNSVTD+264
SAVTLCBS EQU   IEDNSVTD+260
SAVTRNMP EQU   IEDNSVTD+256
SAVTTNTX EQU   IEDNSVTD+252
SAVTSUBV EQU   IEDNSVTD+247
SAVTSUBA EQU   IEDNSVTD+246
SAVTSIBC EQU   IEDNSVTD+244
SAVTBSM  EQU   IEDNSVTD+240
SAVTSCPT EQU   SAVTTCPU
SAVTRQTG EQU   IEDNSVTD+236
SAVTRQCH EQU   IEDNSVTD+232
SAVTMAND EQU   IEDNSVTD+228
SAVTSPLN EQU   IEDNSVTD+224
SAVTNADL EQU   IEDNSVTD+222
SAVTNATL EQU   IEDNSVTD+220
SAVTMHTB EQU   IEDNSVTD+216
SAVTSSMH EQU   IEDNSVTD+212
SAVTQRS  EQU   IEDNSVTD+208
SAVTRQIN EQU   IEDNSVTD+204
SAVTDFCO EQU   IEDNSVTD+200
SAVTSAO  EQU   IEDNSVTD+196
SAVTSARI EQU   IEDNSVTD+192
SAVTSAC  EQU   IEDNSVTD+188
SAVTSAI  EQU   IEDNSVTD+184
SAVTCSCI EQU   IEDNSVTD+180
SAVTSSRP EQU   IEDNSVTD+176
SAVTSSRQ EQU   IEDNSVTD+172
SAVTEP   EQU   SAVTSCLU
SAVTXTRQ EQU   IEDNSVTD+164
@NM00096 EQU   IEDNSVTD+148
SAVTIPCQ EQU   IEDNSVTD+144
@NM00095 EQU   IEDNSVTD+136
SAVTXFMI EQU   IEDNSVTD+132
@NM00094 EQU   IEDNSVTD+124
SAVTXFMO EQU   IEDNSVTD+120
@NM00093 EQU   IEDNSVTD+116
SAVTSSSR EQU   IEDNSVTD+112
SAVTSCPQ EQU   IEDNSVTD+108
SAVTSLCB EQU   IEDNSVTD+104
SAVTLUSR EQU   IEDNSVTD+100
@NM00092 EQU   SAVTLUSQ+8
SAVTLUSP EQU   SAVTLUSQ+4
SAVTLUSB EQU   SAVTLUSQ
@NM00091 EQU   IEDNSVTD+84
SAVTSAT  EQU   IEDNSVTD+80
SAVTNAT  EQU   IEDNSVTD+76
SAVTCLUP EQU   IEDNSVTD+72
SAVTPIUT EQU   IEDNSVTD+68
SAVTRNTA EQU   IEDNSVTD+64
SAVTDNIR EQU   IEDNSVTD+60
SAVTCNIR EQU   IEDNSVTD+56
SAVTFLDH EQU   IEDNSVTD+52
SAVTSRTN EQU   IEDNSVTD+48
SAVTSREQ EQU   IEDNSVTD+44
SAVTFAIL EQU   IEDNSVTD+42
SAVTSUSE EQU   IEDNSVTD+40
SAVTSIB  EQU   IEDNSVTD+36
SAVTPRTN EQU   IEDNSVTD+32
@NM00090 EQU   IEDNSVTD+28
SAVTWH20 EQU   IEDNSVTD+26
SAVTPWT  EQU   IEDNSVTD+24
SAVTPRTQ EQU   IEDNSVTD+20
SAVTPREQ EQU   IEDNSVTD+16
SAVTPH20 EQU   IEDNSVTD+14
SAVTPUSE EQU   IEDNSVTD+12
SAVTPLCB EQU   IEDNSVTD+8
SAVTPOOL EQU   IEDNSVTD+4
SAVTPRMT EQU   SAVTDIAF
SAVTVIRT EQU   SAVTDIAF
AVTTVT   EQU   IEDQAVTD+1268
AVTSITS  EQU   IEDQAVTD+1264
AVTMSUHI EQU   IEDQAVTD+1260
AVTSITU  EQU   IEDQAVTD+1256
AVTSITP  EQU   IEDQAVTD+1252
AVTPADDR EQU   IEDQAVTD+1248
@NM00089 EQU   IEDQAVTD+1246
AVTCPBNO EQU   IEDQAVTD+1244
AVTHRESS EQU   IEDQAVTD+1243
@NM00088 EQU   IEDQAVTD+1242
@NM00087 EQU   IEDQAVTD+1241
@NM00086 EQU   IEDQAVTD+1240
@NM00085 EQU   IEDQAVTD+1237
@NM00084 EQU   IEDQAVTD+1236
AVTHRESE EQU   @NM00083
AVTRADDR EQU   IEDQAVTD+1228
AVTNADDR EQU   IEDQAVTD+1224
AVTHRESN EQU   IEDQAVTD+1220
AVTVOLRN EQU   IEDQAVTD+1216
AVTTOTNN EQU   IEDQAVTD+1212
AVTTRCYN EQU   IEDQAVTD+1208
AVTRCTRN EQU   IEDQAVTD+1204
AVTNOVON EQU   IEDQAVTD+1200
AVTADEBN EQU   IEDQAVTD+1196
AVTVOLRR EQU   IEDQAVTD+1192
AVTTOTNR EQU   IEDQAVTD+1188
AVTTRCYR EQU   IEDQAVTD+1184
AVTRCTRR EQU   IEDQAVTD+1180
AVTNOVOR EQU   IEDQAVTD+1176
AVTADEBR EQU   IEDQAVTD+1172
AVTLODPT EQU   IEDQAVTD+1168
AVTIOBN  EQU   IEDQAVTD+1164
AVTIOBR  EQU   IEDQAVTD+1160
AVTCPBPT EQU   IEDQAVTD+1156
AVTFCPB  EQU   IEDQAVTD+1152
@NM00082 EQU   IEDQAVTD+1148
AVTINCPQ EQU   IEDQAVTD+1144
@NM00081 EQU   IEDQAVTD+1140
@NM00080 EQU   IEDQAVTD+1137
@NM00079 EQU   AVTBIT4
@NM00078 EQU   AVTBIT4
@NM00077 EQU   AVTBIT4
@NM00076 EQU   AVTBIT4
@NM00075 EQU   AVTBIT4
@NM00074 EQU   AVTBIT4
@NM00073 EQU   AVTBIT4
AVTRUFTN EQU   AVTBIT4
@NM00072 EQU   IEDQAVTD+1132
AVTNOBFQ EQU   IEDQAVTD+1128
@NM00071 EQU   IEDQAVTD+1124
AVTDKENQ EQU   IEDQAVTD+1120
@NM00070 EQU   IEDQAVTD+1116
AVTDKAPQ EQU   IEDQAVTD+1112
AVTCOPY  EQU   IEDQAVTD+1108
AVTIA    EQU   IEDQAVTD+1104
AVTFL    EQU   IEDQAVTD+1100
@NM00069 EQU   IEDQAVTD+1096
AVTNCPBQ EQU   IEDQAVTD+1092
AVTTOTNC EQU   IEDQAVTD+1088
AVTCMAX  EQU   IEDQAVTD+1084
AVTCMIN  EQU   IEDQAVTD+1080
AVTHM02  EQU   IEDQAVTD+1076
AVTOPCIN EQU   IEDQAVTD+1074
AVTDCTLN EQU   IEDQAVTD+1072
AVTOPMSK EQU   IEDQAVTD+1068
AVTDDFT  EQU   IEDQAVTD+1064
AVTSTEAL EQU   IEDQAVTD+1060
AVTOPTN  EQU   IEDQAVTD+1056
AVTDSKCT EQU   IEDQAVTD+1054
AVTCKRST EQU   IEDQAVTD+1053
AVTSTAN  EQU   AVTBIT3
AVTSTACN EQU   AVTBIT3
AVTSTAYN EQU   AVTBIT3
AVTOLTBN EQU   AVTBIT3
AVTTSAB  EQU   AVTBIT3
AVTRFULN EQU   AVTBIT3
AVTRECVN EQU   AVTBIT3
@NM00068 EQU   AVTBIT2
@NM00067 EQU   AVTBIT2
AVTOPEIN EQU   AVTBIT2
AVTSTRTN EQU   AVTBIT2
AVTTOPOL EQU   AVTBIT2
AVTCOPYN EQU   AVTBIT2
AVTREUSN EQU   AVTBIT2
AVTEXTSC EQU   AVTBIT2
AVTDISKN EQU   AVTBIT1
AVTQUCKN EQU   AVTBIT1
AVTCLOSN EQU   AVTBIT1
AVTREADN EQU   AVTBIT1
AVTDLAYN EQU   AVTBIT1
AVTAQTAN EQU   AVTBIT1
AVTTSON  EQU   AVTBIT1
AVTAPLKN EQU   AVTBIT1
AVTDUMBR EQU   IEDQAVTD+1048
AVTDLQX  EQU   IEDQAVTD+1046
AVTINTLV EQU   IEDQAVTD+1044
AVTSMCNT EQU   IEDQAVTD+1042
AVTAVFCT EQU   IEDQAVTD+1040
AVTOPCON EQU   IEDQAVTD+1038
AVTOPCNT EQU   IEDQAVTD+1036
AVTLNCNT EQU   IEDQAVTD+1034
AVTHA16  EQU   IEDQAVTD+1030
AVTHA7   EQU   IEDQAVTD+1028
AVTHA4   EQU   IEDQAVTD+1026
AVTHA3   EQU   IEDQAVTD+1024
AVTHA2   EQU   IEDQAVTD+1022
AVTGETMS EQU   IEDQAVTD+1021
@NM00066 EQU   IEDQAVTD+1020
AVTGETMD EQU   IEDQAVTD+1016
AVTGETMN EQU   IEDQAVTD+1012
AVTCWTOT EQU   IEDQAVTD+1008
AVTCWINT EQU   IEDQAVTD+956
AVTDTRAP EQU   IEDQAVTD+952
@NM00065 EQU   IEDQAVTD+950
@NM00064 EQU   AVTIOTR
AVTIOTRH EQU   AVTIOTR
AVTIOTRE EQU   AVTIOTR
@NM00063 EQU   AVTSUBT
AVTSUBPT EQU   AVTSUBT
AVTSUBON EQU   AVTSUBT
AVTAFE30 EQU   IEDQAVTD+944
AVTAFE20 EQU   IEDQAVTD+940
AVTAFE10 EQU   IEDQAVTD+936
AVTCWEC2 EQU   IEDQAVTD+932
AVTCWPM2 EQU   IEDQAVTD+928
AVTCWTS2 EQU   IEDQAVTD+927
AVTCWTS1 EQU   IEDQAVTD+926
AVTCWCLD EQU   AVTCWFL2
AVTCWRAP EQU   AVTCWFL2
@NM00062 EQU   AVTCWFL2
@NM00061 EQU   AVTCWFL2
@NM00060 EQU   AVTCWFL2
@NM00059 EQU   AVTCWFL2
@NM00058 EQU   AVTCWFL2
AVTCWACT EQU   AVTCWFL2
@NM00057 EQU   AVTCWFL1
@NM00056 EQU   AVTCWFL1
@NM00055 EQU   AVTCWFL1
@NM00054 EQU   AVTCWFL1
@NM00053 EQU   AVTCWFL1
@NM00052 EQU   AVTCWFL1
@NM00051 EQU   AVTCWFL1
AVTCOMWN EQU   AVTCWFL1
AVTCWEC1 EQU   IEDQAVTD+920
AVTCWPM1 EQU   IEDQAVTD+916
AVTCAREA EQU   IEDQAVTD+912
AVTFZERO EQU   IEDQAVTD+908
AVTCADDR EQU   IEDQAVTD+904
AVTCOREC EQU   IEDQAVTD+900
@NM00050 EQU   IEDQAVTD+892
AVTCPBCB EQU   IEDQAVTD+888
@NM00049 EQU   IEDQAVTD+880
AVTDSIOB EQU   IEDQAVTD+876
@NM00048 EQU   IEDQAVTD+868
AVTCPRMB EQU   IEDQAVTD+864
@NM00047 EQU   IEDQAVTD+856
AVTCLOSB EQU   IEDQAVTD+852
@NM00046 EQU   IEDQAVTD+844
AVTACTIB EQU   IEDQAVTD+840
@NM00045 EQU   IEDQAVTD+836
AVTOLTEB EQU   IEDQAVTD+832
AVTOLTCH EQU   AVTOLTQB+1
AVTOLTVT EQU   AVTOLTQB
@NM00044 EQU   AVTOPCQB+8
@NM00043 EQU   AVTOPCEC+1
@NM00042 EQU   AVTOPCCC
AVTOPCPO EQU   AVTOPCCC
AVTOPCWA EQU   AVTOPCCC
AVTOPCCH EQU   AVTOPCOB+1
AVTOPCVT EQU   AVTOPCOB
@NM00041 EQU   AVTCKPQB+9
AVTCKPTS EQU   AVTCKPQB+8
@NM00040 EQU   AVTCKPEC+1
@NM00039 EQU   AVTCKPCC
AVTCKPPO EQU   AVTCKPCC
AVTCKPWA EQU   AVTCKPCC
AVTCKPCH EQU   AVTCKPTB+1
AVTCKPVT EQU   AVTCKPTB
@NM00038 EQU   IEDQAVTD+796
AVTBFRTB EQU   IEDQAVTD+792
@NM00037 EQU   IEDQAVTD+788
AVTSELCH EQU   IEDQAVTD+785
AVTBFRTN EQU   AVTBFRFG
AVTBFREB EQU   IEDQAVTD+780
AVTTIMQ  EQU   IEDQAVTD+776
@NM00036 EQU   IEDQAVTD+772
AVTIMQPS EQU   IEDQAVTD+768
AVTINOUT EQU   IEDQAVTD+766
AVTREFTM EQU   IEDQAVTD+764
@NM00035 EQU   IEDQAVTD+752
AVTDELYB EQU   IEDQAVTD+748
AVTOCQPT EQU   IEDQAVTD+744
AVTTSOPT EQU   IEDQAVTD+740
AVTSUPPT EQU   IEDQAVTD+736
AVTCBQCB EQU   IEDQAVTD+732
AVTMSGS  EQU   IEDQAVTD+729
@NM00034 EQU   AVTSYSER
@NM00033 EQU   AVTSYSER
@NM00032 EQU   AVTSYSER
@NM00031 EQU   AVTSYSER
@NM00030 EQU   AVTSYSER
@NM00029 EQU   AVTSYSER
AVTCMAXN EQU   AVTSYSER
AVTCMINN EQU   AVTSYSER
AVT2260L EQU   IEDQAVTD+724
AVTABEPL EQU   AVTADBUF
AVTHFF   EQU   AVTCLRHI+2
@NM00028 EQU   AVTCLRHI
AVTCCLNK EQU   AVTCRELE+5
AVTCCPRI EQU   AVTCRELE+4
AVTCCQCB EQU   AVTCCELE+1
AVTCCKEY EQU   AVTCCELE
AVTDELAD EQU   IEDQAVTD+704
AVTDELEM EQU   IEDQAVTD+700
AVTBSX   EQU   AVTCKLNK
AVTOPETR EQU   AVTHG01
@NM00027 EQU   AVTCKBYT
AVTCKONQ EQU   AVTCKBYT
@NM00026 EQU   AVTCKBYT
@NM00025 EQU   AVTCKBYT
@NM00024 EQU   AVTCKBYT
@NM00023 EQU   AVTCKBYT
@NM00022 EQU   AVTCKBYT
@NM00021 EQU   AVTCKBYT
AVTOPERT EQU   IEDQAVTD+690
AVTOPXCL EQU   IEDQAVTD+688
AVTOPERL EQU   IEDQAVTD+687
@NM00020 EQU   IEDQAVTD+686
AVTCKTIM EQU   IEDQAVTD+684
AVTCKELV EQU   IEDQAVTD+682
AVTCPRCD EQU   IEDQAVTD+681
AVTWARMN EQU   AVTCKELF
AVTCRTLN EQU   AVTCKELF
AVTCPIPN EQU   AVTCKELF
AVTCCLCN EQU   AVTCKELF
AVTCINCN EQU   AVTCKELF
@NM00019 EQU   AVTCKELF
AVTCMCPN EQU   AVTCKELF
AVTNQBCK EQU   AVTCKELF
AVTCKQAD EQU   IEDQAVTD+677
AVTSCBSZ EQU   IEDQAVTD+676
@NM00018 EQU   IEDQAVTD+672
AVTCKELE EQU   IEDQAVTD+668
@NM00017 EQU   AVTCKPEL+8
AVTCKRLK EQU   AVTCKPEL+5
AVTCKRPR EQU   AVTCKPEL+4
AVTCKRMQ EQU   AVTCKRMV+1
AVTCKRKY EQU   AVTCKRMV
AVTHK    EQU   IEDQAVTD+648
AVTHI    EQU   IEDQAVTD+644
AVTIOT   EQU   IEDQAVTD+640
AVTNX    EQU   IEDQAVTD+636
AVTTONE  EQU   IEDQAVTD+632
AVTA3TL  EQU   IEDQAVTD+628
AVTDMECB EQU   IEDQAVTD+624
AVTABEND EQU   IEDQAVTD+618
AVTPLCBN EQU   IEDQAVTD+616
@NM00016 EQU   AVTSAVTP+1
@NM00015 EQU   AVTSAVTF
AVTRAPI  EQU   AVTSAVTF
AVTLCLST EQU   AVTSAVTF
AVT370X  EQU   AVTSAVTF
AVTSNA   EQU   AVTSAVTF
AVTONSNA EQU   AVTSAVTF
AVTVTMCP EQU   AVTSAVTF
AVTTRNOS EQU   IEDQAVTD+608
AVTCMBSS EQU   IEDQAVTD+604
AVTRCV   EQU   IEDQAVTD+600
AVTSEND  EQU   IEDQAVTD+596
AVTCSCH  EQU   IEDQAVTD+592
AVTQ1    EQU   IEDQAVTD+588
AVTE7    EQU   IEDQAVTD+584
AVTHB    EQU   IEDQAVTD+580
AVTR1    EQU   IEDQAVTD+576
AVTBZ    EQU   IEDQAVTD+572
AVTEZ    EQU   IEDQAVTD+568
AVTEC    EQU   IEDQAVTD+564
AVTEW    EQU   IEDQAVTD+560
AVTNDIAL EQU   AVTSCOPT
AVTN2741 EQU   AVTSCOPT
AVTCONCO EQU   AVTSCOPT
AVTCONC  EQU   AVTSCOPT
AVTCMBUF EQU   AVTSCOPT
AVTAPDMP EQU   AVTSCOPT
@NM00014 EQU   AVTSCOPT
AVTHA    EQU   AVTDISP
AVTEA    EQU   IEDQAVTD+548
AVTAX    EQU   IEDQAVTD+544
AVTA3    EQU   IEDQAVTD+540
AVTGD    EQU   IEDQAVTD+536
AVTAL    EQU   IEDQAVTD+532
AVTOLTST EQU   AVTHG02
AVTE8    EQU   IEDQAVTD+524
AVTUI    EQU   IEDQAVTD+520
AVTCOMPT EQU   IEDQAVTD+516
AVTCRSRF EQU   IEDQAVTD+512
@NM00013 EQU   IEDQAVTD+508
AVTKA02  EQU   IEDQAVTD+504
AVTOPTPT EQU   IEDQAVTD+500
AVTPCBPT EQU   IEDQAVTD+496
AVTECBAD EQU   IEDQAVTD+492
AVTOPECA EQU   IEDQAVTD+488
AVTOLECA EQU   IEDQAVTD+484
AVTCKECA EQU   IEDQAVTD+480
AVTCWECA EQU   IEDQAVTD+476
AVTCWTCB EQU   IEDQAVTD+472
AVTOLTCB EQU   IEDQAVTD+468
AVTOCTCB EQU   IEDQAVTD+464
AVTCKTCB EQU   IEDQAVTD+460
AVTAS    EQU   IEDQAVTD+456
AVTNOLBF EQU   IEDQAVTD+454
AVTNCKPR EQU   IEDQAVTD+453
AVTCIB   EQU   IEDQAVTD+452
AVTSPLPT EQU   IEDQAVTD+448
AVTMVBFR EQU   IEDQAVTD+444
AVTSBTA  EQU   IEDQAVTD+440
AVTRARTN EQU   IEDQAVTD+436
AVTBSCAN EQU   IEDQAVTD+432
AVTRDYA  EQU   IEDQAVTD+428
AVTDISTR EQU   IEDQAVTD+420
AVTPARM3 EQU   IEDQAVTD+416
@NM00012 EQU   AVTPKF
@NM00011 EQU   AVTPKF
@NM00010 EQU   AVTPKF
AVTFTCHF EQU   AVTPKF
@NM00009 EQU   AVTPKF
@NM00008 EQU   AVTPKF
@NM00007 EQU   AVTPKF
@NM00006 EQU   AVTPKF
AVTPARM  EQU   IEDQAVTD+408
AVTEXS2A EQU   IEDQAVTD+402
AVTEXA2S EQU   IEDQAVTD+396
AVTOCGET EQU   IEDQAVTD+392
AVTCKAVT EQU   @NM00004+1
@NM00005 EQU   AVTCKFLG
AVTCKHLT EQU   AVTCKFLG
AVTCKREQ EQU   AVTCKFLG
AVTCKENV EQU   AVTCKFLG
AVTCKNAC EQU   AVTCKFLG
AVTCKTAC EQU   AVTCKFLG
AVTBUENT EQU   IEDQAVTD+386
@NM00003 EQU   IEDQAVTD+385
AVTFULLT EQU   AVTBUFSW
AVTUNCON EQU   AVTBUFSW
AVTTRAPI EQU   AVTBUFSW
@NM00002 EQU   AVTBUFSW
AVTBUFTR EQU   AVTREADD
AVTREADY EQU   IEDQAVTD+376
AVTRACE  EQU   IEDQAVTD+372
AVTTCB   EQU   IEDQAVTD+368
AVTPASWD EQU   IEDQAVTD+360
AVTCTLCH EQU   IEDQAVTD+352
AVTDOUBL EQU   IEDQAVTD+344
AVTDOUBX EQU   IEDQAVTD+336
AVTDPARM EQU   IEDQAVTD+332
AVTCSTCS EQU   IEDQAVTD+328
AVTDLQ   EQU   AVTSAVEX+32
@NM00001 EQU   AVTSAVEX
AVTSAVE4 EQU   IEDQAVTD+216
AVTSAVE3 EQU   IEDQAVTD+144
AVTSAVE2 EQU   IEDQAVTD+72
AVTSAVE1 EQU   IEDQAVTD
*                                      END UNREFERENCED COMPONENTS
@RT00490 EQU   AICHNG1
@RT00507 EQU   ERREXIT
@RT00511 EQU   SWTCHID
@RT00562 EQU   ERREXIT
@RT00565 EQU   MOVPOLL
@RF00570 EQU   RCRDSRCH
@RT00587 EQU   UPDFROM
@RT00595 EQU   UPDFROM
@RF00595 EQU   ERREXIT
@RT00606 EQU   MOVIT
@RT00611 EQU   PROCNXT
@RT00648 EQU   ALLDONE
@RF00677 EQU   XCTL
@RC00679 EQU   XCTL
@RF00721 EQU   @EL00001
@EL01    EQU   @EL00001
@ENDDATA EQU   *
@DATEND  EQU   *
         END   IGCI210D
