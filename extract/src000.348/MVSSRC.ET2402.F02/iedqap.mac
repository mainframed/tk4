AP01     TITLE '''IEDQAP'' -- REMOVE ROUTINE'
IEDQAP   CSECT
         SPACE 3
******************** MICROFICHE FLAGS *********************** SUPT CODE
*A279000                                                        SA53607
*A105300-107100,202000,231000-242000,339500-341500,516500-518500 S22025
*A569000-611000,643000,667000-668000,874007-874910,907400-913400 S22025
*A931000-932000                                                  S22025
*C240000                                                         S22025
*D228000-236000,258000,570000-624000,639000-648000,906000-915000 S22025
*D924000,933000.934000                                           S22025
*D252000-257000,904200-905400,920000-927000,939000-944000       SA58444
*C909400,938000                                                 SA58444
*A703500                                                        SA67150
*A703000                                                       @YA05473
*D703600-703700                                                @YA05473
*A687000                                                       @YA05443
*A702500,704000                                                @SA69090
*C703600                                                       @XA05316
*D688000                                                       @XA07511
*D702600-702700                                                @OX11935
*A703400                                                       @OX11935
*C703430,703460                                                @OX14760
*D357000                                                       @OX14760
         SPACE
***********************************************************************
*                                                                     *
*MODULE-NAME = IEDQAP                                                 *
*                                                                     *
*DESCRIPTIVE-NAME = MSGEDIT REMOVE ROUTINE                            *
*                                                                     *
*COPYRIGHTS = 'NONE'                                                  *
*                                                                     *
*STATUS: CHANGE LEVEL 5                                               *
*                                                                     *
*FUNCTION --                                                          *
*   REMOVES DATA FROM A SINGLE SPECIFIED LOCATION IN A BUFFER AND     *
*   OPTIONALLY REPLACES IT WITH OTHER DATA.                           *
*                                                                     *
*   ON ENTRY THE ROUTINE COMPUTES THE SIZE OF THE PREFIX, INCLUDING   *
*   RESERVE CHARACTERS (IF ANY).                                      *
*                                                                     *
*   IF THE 'TO' DELIMITER IS A CHARACTER STRING,  THE ROUTINE SETS    *
*   UP THE 'FROM' DELIMITER EITHER FROM THE SCAN POINTER OR,  IF      *
*   THE USER SPECIFIES AN OFFSET,  FROM THE PARAMETER LIST PLUS THE   *
*   PREFIX SIZE.  THE SCAN POINTER IS TEMPORARILY SET TO THE 'FROM'   *
*   OFFSET.  IF THE BUFFER CONTAINS DATA FROM THE HOLD QUEUE, THE     *
*   'FROM' OFFSET IS SET TO THE FIRST BYTE OF DATA. THIS ROUTINE      *
*   LINKS TO THE BUFFER SCAN ROUTINE TO LOOK FOR THE 'TO' CHARACTER   *
*   STRING.                                                           *
*                                                                     *
*   ON RETURN, IF THE ENTIRE STRING WASN'T FOUND, THE ROUTINE CHECKS  *
*   WHETHER THIS IS AN INBLOCK FUNCTION. IF IN INBLOCK AND NOT END    *
*   OF MESSAGE, THE ROUTINE LINKS TO THE CROSS-BUFFER SUBROUTINE.     *
*   OTHERWISE, THE ROUTINE RETURNS TO THE CALLER WITH A MINUS FOUR    *
*   RETURN CODE IN REGISTER 15.                                       *
*                                                                     *
*   IF THE STRING IS FOUND,  THE ROUTINE DETERMINES IF THE 'TO'       *
*   STRING IS TO BE DELETED.  IF NOT, THE OFFSET RETURNED BY THE SCAN *
*   ROUTINE IS DECREMENTED BY THE STRING LENGTH (INCL BLANKS).  IF    *
*   IT IS,  THE OFFSET IS NOT CHANGED.  CONTROL PASSES TO THE         *
*   FUNCTION TEST SUBROUTINE.                                         *
*                                                                     *
*   IF THE 'FROM' DELIMITER IS THE SCAN POINTER,  IT IS LOADED FROM   *
*   THE PREFIX.  IF IT IS AN OFFSET, IT IS LOADED FROM THE PARA-      *
*   METER AND THE PREFIX SIZE IS ADDED TO IT.                         *
*                                                                     *
*   IF THE 'TO' DELIMITER IS AN EXTENT,  IT IS LOADED FROM THE        *
*   PARAMETER LIST AND THE 'FROM' DELIMITER IS ADDED TO IT TO MAKE    *
*   IT AN OFFSET.  CONTROL PASSES TO THE FUNCTION TEST SUBROUTINE.    *
*                                                                     *
*   IF THE 'TO' DELIMITER IS AN OFFSET,  IT IS LOADED FROM THE        *
*   PARAMETER LIST AND THE PREFIX SIZE IS ADDED TO IT.  IT IS THEN    *
*   COMPARED WITH THE 'FROM' DELIMITER TO MAKE SURE THAT THE 'FROM'   *
*   DELIMITER PRECEDES IT.  IF IT DOES NOT,  RETURN IS MADE TO THE    *
*   CALLER.  OTHERWISE CONTROL PASSES TO THE FUNCTION TEST SUB-       *
*   ROUTINE.                                                          *
*                                                                     *
*   FUNCTION TEST SUBROUTINE (FUNCTEST) --                            *
*   THE 'TO' OFFSET IS SET AS THE DATA OFFSET AND THE LENGTH          *
*   BETWEEN THE 'TO' AND 'FROM' OFFSETS BECOMES THE INSERT OFFSET.    *
*   IF THE FUNCTION IS A CONTRACT,  THE ROUTINE BYPASSES THE NEXT     *
*   INSERT.                                                           *
*                                                                     *
*   IF THE FUNCTION IS A REPLACE,  PARAMETERS ARE BUILT FOR THE       *
*   UNIT REQUEST INTERFACE (IEDQAO) AND EXIT IS MADE TO IT TO         *
*   INSERT THE REPLACEMENT DATA INTO THE BUFFER.  ON RETURN,  THE     *
*   ROUTINE DETERMINES IF THE REPLACEMENT DATA WAS EXACTLY AS LONG    *
*   AS THE REMOVED DATA.  IF SO,  RETURN IS MADE TO THE CALLER.  IF   *
*   NOT,  THE BUFFER MUST BE CLOSED UP.                               *
*                                                                     *
*   IF THE FUNCTION IS CONTRACT,  OR IF THE BUFFER MUST BE CLOSED     *
*   UP,  PARAMETERS ARE BUILT FOR THE INSERT DATA ROUTINE (IEDQAF)    *
*   AND THE ROUTINE LINKS TO IT TO SHIFT THE LOGICALLY EMPTY AREA     *
*   TO THE END OF THE BUFFER.  ON RETURN,  THE DATA OFFSET IS         *
*   DECREMENTED BY THE INSERT OFFSET AND THE RESULT SET AS THE NEW    *
*   DATA SIZE (PRFSIZE).  RETURN IS MADE TO THE CALLER.               *
*                                                                     *
*   CROSS-BUFFER ROUTINE                                              *
*   THIS ROUTINE LINKS TO THE UNIT REQUEST ROUTINE AND THE INSERT     *
*   DATA ROUTINE TO GET AN ADDITIONAL UNIT AND SHIFT INTO IT THE      *
*   DATA THAT MUST BE PLACED ON THE HOLD QUEUE.  A PREFIX IS BUILT    *
*   IN THE FIRST UNIT CONTAINING DATA TO BE HELD.  THE ORITINAL       *
*   BUFFER IS SHORTENED APPROPRIATELY. THE NEW BUFFER IS LINKED ONTO  *
*   THE HOLD QUEUE.  CONTROL IS RETURNED TO THE CALLER.               *
*ENTRY POINTS --                                                      *
*       'IEDQAP01' TO REMOVE AND OPTIONALLY REPLACE DATA IN THE       *
*   BUFFER.  CALLING SEQUENCE FROM USER INTERFACE IS:                 *
*                                                                     *
*        L     R12,AVTMSGS-1            GET ADDR OF VCON TABLE        *
*        IC    R15,AVTEZERO(,R1)        GET INDEX TO ROUTINE ADDR     *
*        L     R12,AVTEZERO(R12,R15)    GET ROUTINE ADDRESS           *
*        BR    R12                      EXIT TO ROUTINE               *
*                                                                     *
*INPUT --                                                             *
*   REGISTER 1 - THE ADDRESS OF A MACRO-GENERATED PARAMETER LIST.     *
*   PARAMETER LIST FORMAT IS:                                         *
*                                                                     *
*        *********************************                            *
*        * INDEX *STATUS * INDEX * INDEX *                            *
*        *  TO   * BYTE  *  TO   *  TO   *   'TO' DELIMITER =         *
*        *   AP  *       *    AF *    AO *     CHARACTER STRING       *
*        *********************************                            *
*        *          INSERT DATA          *                            *
*        *          (OPTIONAL)           *                            *
*        *                               *                            *
*        *********************************                            *
*        * (UN-  * PARM  *       * REG   *                            *
*        *  USED)*  LIST * X'00' *   15  *                            *
*        *       * LNGTH *       * OFFSET*                            *
*        *********************************                            *
*        * BLANK *      ADDRESS OF       *                            *
*        *  CHAR *   CHARACTER STRING    *                            *
*        * (OPT) *                       *                            *
*        *********************************                            *
*        *     'AT'      *                                            *
*        *   DELIMITER   *                                            *
*        *   (OPTIONAL)  *                                            *
*        *****************                                            *
*                                                                     *
*        *********************************                            *
*        * INDEX *STATUS * INDEX * INDEX *                            *
*        *  TO   * BYTE  *  TO   *  TO   *   'TO' DELIMITER =         *
*        *   AP  *       *   AF  *   AO  *     EXTENT OR OFFSET       *
*        *********************************                            *
*        *          INSERT DATA          *                            *
*        *          (OPTIONAL)           *                            *
*        *                               *                            *
*        *********************************                            *
*        *     'AT'      *     'TO'      *                            *
*        *   DELIMITER   *   DELIMITER   *                            *
*        *   (OPTIONAL)  *               *                            *
*        *********************************                            *
*                                                                     *
*        INSERT DATA WORD:                                            *
*                                                                     *
*        *********************************                            *
*        *LENGTH *      ADDRESS OF       *   DATA =                   *
*        *  OF   *   CHARACTER STRING    *     CHARACTER STRING       *
*        * STRING*                       *                            *
*        *********************************                            *
*                                                                     *
*        *********************************                            *
*        * NO.   * IDLE  *               *   DATA =                   *
*        *  OF   *  CHAR *   (UNUSED)    *     IDLES                  *
*        * IDLES *       *               *                            *
*        *********************************                            *
*                                                                     *
*        AP INDEX FLAG: X'01' OFF = REMOVE AT SPECIFIED OFFSET        *
*                       X'01' ON = REMOVE AT SCAN POINTER             *
*                                                                     *
*   REGISTER 3 - ADDRESS OF SCB                                       *
*                                                                     *
*   REGISTER 4 - ADDRESS OF LCB                                       *
*                                                                     *
*   REGISTER 6 - ADDRESS OF THE CURRENT BUFFER                        *
*                                                                     *
*   REGISTER 9 - ADDRESS OF THE AVT                                   *
*                                                                     *
*   REGISTER 12 - ENTRY POINT ADDRESS AND BASE REGISTER FOR THIS      *
*   ROUTINE                                                           *
*                                                                     *
*OUTPUT --                                                            *
*   REGISTER 15 - RETURN CODE.  CONTAINS X'00' ON SUCCESSFUL          *
*   COMPLETION,  OTHERWISE CONTAINS NONZERO.                          *
*                                                                     *
*EXTERNAL REFERENCES --                                               *
*   'IEDQAF' - INSERT DATA ROUTINE                                    *
*                                                                     *
*   'IEDQAO' - UNIT REQUEST INTERFACE                                 *
*                                                                     *
*   'IEDQAX' - SCAN BUFFER ROUTINE                                    *
*                                                                     *
*   'IEDQUI' - RETURN INTERFACE ROUTINE                               *
*                                                                     *
*   HOLD QUEUE                                                        *
*                                                                     *
*   AVT - ADDRESS VECTOR TABLE                                        *
*                                                                     *
*   BUFFER CURRENTLY BEING PROCESSED                                  *
*                                                                     *
*   LCB - LINE CONTROL BLOCK                                          *
*                                                                     *
*   SCB - STATION CONTROL BLOCK                                       *
*                                                                     *
*EXITS,  NORMAL --                                                    *
*   THE REQUESTED REMOVE OR REPLACE HAS BEEN PERFORMED.  EXIT IS      *
*   MADE TO THE CALLER VIA THE RETURN INTERFACE ROUTINE.              *
*                                                                     *
*EXITS,  ERROR -- N/A                                                 *
*                                                                     *
*TABLES/WORK AREAS -- N/A                                             *
*                                                                     *
*ATTRIBUTES -- SERIALLY REUSABLE,  REFRESHABLE,  ENABLED,             *
*   RESIDENT,  PROBLEM PROGRAM MODE.                                  *
*                                                                     *
*CHARACTER CODE DEPENDENCY - THIS MODULE DEPENDS UPON AN INTERNAL     *
*   REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS             *
*   EQUIVALENT TO THE ONE USED AT ASSEMBLY TIME.  THE CODING HAS      *
*   BEEN ARRANGED SO THAT REDEFINITION OF ''CHARACTER'' CONSTANTS,    *
*   BY REASSEMBLY, WILL RESULT IN A CORRECT MODULE FOR THE NEW        *
*   DEFINITIONS.                                                      *
***********************************************************************
         EJECT
********* REGISTER EQUATES *********
         SPACE
R0       EQU   0                        WORK REGISTER
         SPACE
R1       EQU   1                        PARAMETER LIST ADDRESS
         SPACE
RWORK2   EQU   2                        WORK REGISTER
         SPACE
RSCB3    EQU   3                        SCB ADDRESS
         SPACE
RLCB4    EQU   4                        LCB ADDRESS
         SPACE
RSCAN5   EQU   5                        SCAN POINTER ADDRESS
         SPACE
RPREFIX  EQU   6                        ADDRESS OF BUFFER
         SPACE
RFROM7   EQU   7                        'FROM' OFFSET
         SPACE
RPARM8   EQU   8                        SUB-PARM LIST ADDRESS
RLIM8    EQU   8                        LIMIT OF SHIFT LOOP
         SPACE
RAVT9    EQU   9                        ADDRESS OF AVT
         SPACE
RPFXSZ11 EQU   11                       SIZE OF PREFIX
         SPACE
RBASE    EQU   12                       BASE REGISTER
         SPACE
R13      EQU   13                       SAVE AREA ADDRESS
R14      EQU   14                       RETURN REGISTER
R15      EQU   15                       LINK REGISTER
         SPACE
RTO15    EQU   15                       'TO' OFFSET
RDATAD5  EQU   5                        REGISTER                 S22025
RWORK8   EQU   8                        REGISTER                 S22025
R10      EQU   10                       REGISTER                 S22025
LEN      EQU   16                      MOVE LENGTH               S22025
THREE    EQU   3                        INCREMENT OF THREE       S22025
MVOFF    EQU   16                       MOVE OFFSET              S22025
BFREDIT  EQU   X'40'                    DATA MOVEMENT FLAG       S22025
FIVE     EQU   5                       INCREMENT OF FIVE         S22025
         SPACE
********* OTHER EQUATES *********
         SPACE
ONE      EQU   1                        INCREMENT VALUE OF ONE
TWO      EQU   2                        OFFSET OF TWO BYTES
FOUR     EQU   4                        OFFSET OF FOUR BYTES
EIGHT    EQU   8                        OFFSET OF EIGHT BYTES
SHIFT8   EQU   8                        SHIFT VALUE OF 1 BYTE
         SPACE
INSOFF   EQU   4                        OFFSET TO INSERT OFFSET
DATOFF   EQU   6                        OFFSET TO DATA OFFSET
         SPACE
PARMINDX EQU   0                        OFFSET TO REMOVE INDEX BYTE
PARMSTAT EQU   1                        OFFSET TO STATUS FIELD
PARMAF   EQU   2                        OFFSET TO IEDQAF OFFSET
PARMAO   EQU   3                        OFFSET TO AO OFFSET
PARMDATA EQU   4                        OFFSET TO INSERT DATA
         SPACE
SBPMCHAR EQU   4                        OFFSET TO CHAR STRING ADDR
         SPACE
DATASTAT EQU   X'80'                    INSERT DATA = CJARACTERS
CONTSTAT EQU   X'20'                    INSERT DATA = CONTRACT
CHARSTAT EQU   X'10'                    'TO' = CHARACTERS
OFFSSTAT EQU   X'08'                    'TO' = OFFSET
TONCSTAT EQU   X'01'                    'TO' INCLUDED IN REMOVE
         SPACE
IDLEFLAG EQU   X'01'                    DATA TYPE = IDLES
SHIFFLAG EQU   X'01'                    SHIFT REQUEST FLAG
SCANFLAG EQU   X'01'                    REMOVE AT SCAN POINTER
         SPACE
TOTALREM EQU   X'80'                    'TOTAL REMOVE' FLAG
SCANADJ  EQU   X'40'                    'SCAN ADJUSTMENT' FLAG
BLANK    EQU   X'02'                    BLANK                    S22025
         EJECT
         USING IEDQAVTD,RAVT9
         USING IEDQLCB,RLCB4
         USING IEDQPRF,RPREFIX
         USING IEDQSCB,RSCB3
         USING IEDQAP,RBASE
         SPACE
IEDQAP01 EQU   *
IEDQAP   IEDHJN REMATOFF
         LH    R0,PARMAF(,R1)           GET AF/AO INDEX          S22025
         STH   R0,AVTPARM+2             SAVE                     S22025
         ST    RPREFIX,AVTPARM3         SAVE PASSED BUFFER ADDRESS22025
         L     RPREFIX,AVTADBUF         GET CURRENT BUFFER       S22025
         MVC   INSOFF(TWO,RPREFIX),AVTFZERO SET SPACE TO ZERO    S22025
         MVC   PRFKEY+2(2),PRFSCAN      SAVE SCAN POINTER
         MVI   PRFKEY+1,AVTEZERO        INDICATE NO SCAN ADJUSTMENT
         LH    RWORK2,PRFSIZE           GET BUFFER SIZE
         LTR   RWORK2,RWORK2            IS THIS A ZERO-LNG BUFFER
         BZ    ERREXIT                  YES, RETURN WITH ERROR CODE
         SPACE
         IC    R15,LCBISZE              PICK UP IDLES COUNT
         LA    RPFXSZ11,AVTTXTSZ(,R15)  ADD SIZE OF TEXT PREFIX
         TM    PRFSTAT1,PRFNHDRN        IS IT HEADER PREFIX
         BO    TSTOCHAR                 NO, GO TEST 'TO' DELIMITER
         SPACE
         LA    RPFXSZ11,AVTHDRSZ-AVTTXTSZ(,RPFXSZ11) YES, ADD EXTRA
         TM    LCBSTAT1,LCBRECVN       RECEIVE OPERATION        SA53607
         BZ    TSTOCHAR                NO, PROCEED              SA53607
         TM    SCBBSCFM,SCBDATEN       DATE/TIME REQUESTED      SA53607
         BZ    TSTOCHAR                NO, PROCEED              SA53607
         LA    RPFXSZ11,EIGHT(RPFXSZ11) YS, ADD FOR DATE/DIME   SA53607
         SPACE
TSTOCHAR EQU   *
         TM    PARMSTAT(R1),CHARSTAT    'TO' DELIMITER CHAR STRING
         BO    TOCHAR                   YES, GET 'TO' STRING
         SPACE
         LA    RFROM7,FOUR(,R1)
         TM    PARMSTAT(R1),CONTSTAT    IS FUNCTION CONTRACT
         BO    INITCT1                  YES, POINTING TO DELIMITS
         SPACE
         LA    RFROM7,FOUR(,RFROM7)     NO, BUMP ANOTHER WORD
         SPACE
INITCT1  EQU   *
         TM    PARMINDX(R1),SCANFLAG    REMOVE AT SCAN POINTER
         BNO   LOADFROM                 NO, GO LOAD FROM PARM LIST
         SPACE
         CLC   PRFSCAN,PRFSIZE          SCAN POINTER BEYOND BFR END
         BH    ERREXIT                  YES, RETURN WITH ERROR CODE
         SPACE
         LH    RTO15,AVTEZERO(,RFROM7)  NO, GET 'TO' DELIMITER
         LH    RFROM7,PRFSCAN           SET SCAN POINTER
         N     RFROM7,AVTCLRHI            AS 'FROM' DELIMITER
         LTR   RTO15,RTO15              TEST FOR ((R))
         BNZ   TSTOOFFS                 NO, GO TEST 'TO' DELIMITER
         SPACE
         LA    RTO15,ONE(,RFROM7)       YES, SET 'FROM' DELIMITER
         B     TESTFUNC                 GO SELECT FUNCTION
         SPACE
LOADFROM EQU   *
         LH    RTO15,TWO(,RFROM7)       GET 'TO' DELIMITER
         N     RTO15,AVTCLRHI           IS 'TO' SCAN POINTER
         BNZ   FROMDELM                 NO, PROCEED
         SPACE
         CLC   PRFSCAN,PRFSIZE          SCAN POINTER BEYOND BFR END
         BH    ERREXIT                  YES, RETURN WITH ERROR CODE
         SPACE
         OI    PRFKEY+1,SCANADJ         INDICATE SCAN ADJUSTMENT
         LH    RTO15,PRFSCAN            YES, SET 'TO' FROM PRFSCAN
         N     RTO15,AVTCLRHI
         SR    RTO15,RPFXSZ11           MAKE IT A USER OFFSET
         BCTR  RTO15,AVTEZERO             FOR VALIDITY CHECKING
         SPACE
FROMDELM EQU   *
         LH    RFROM7,AVTEZERO(,RFROM7) GET 'FROM' DELIMITER
         N     RFROM7,AVTCLRHI
         AR    RFROM7,RPFXSZ11          ADD LENGTH OF PREFIX
         SPACE
TSTOOFFS EQU   *
         LA    RFROM7,ONE(,RFROM7)      BUMP TO START OF SHIFT
         TM    PARMSTAT(R1),OFFSSTAT    IS 'TO' AN OFFSET
         BO    VALIDCHK                 YES, MAKE SURE IT IS VALID
         SPACE
         AR    RTO15,RFROM7             NO, EXTENT, ADD FOR OFFSET
         B     TESTFUNC                 GO SELECT FUNCTION
         SPACE
VALIDCHK EQU   *
         LA    RTO15,ONE(RTO15,RPFXSZ11) ADD PREFIX LNG PLUS ONE
         CR    RFROM7,RTO15             IS 'FROM' BEYOND 'TO'
         BNL   ERREXIT                  YES, RETURN WITH ERROR CODE
         SPACE
         B     TESTFUNC                 GO SELECT FUNCTION
         EJECT
TOCHAR   EQU   *
         LA    RPARM8,FOUR(,R1)
         TM    PARMSTAT(R1),CONTSTAT    IS FUNCTION CONTRACT
         BO    INITCT2                  YES, POINTING TO AJ PARM
*                                         LIST
         LA    RPARM8,FOUR(,RPARM8)     NO, BUMP ANOTHER WORD
         SPACE
INITCT2  EQU   *
         CLC   AVTADBUF+ONE(THREE),AVTPARM3+ONE ENTRY FROM BN    S22025
         BE    NOCROSS                  NO                       S22025
         LR    RFROM7,RPFXSZ11          SET OFFSET FOR START     S22025
         B     SAVESCAN                 CONTINUE                 S22025
NOCROSS  EQU   *                                                 S22025
         TM    PARMINDX(R1),SCANFLAG    REMOVE AT SCAN POINTER
         BNO   LOADFM2                  NO, GO LOAD FROM PARM LIST
         SPACE
         CLC   PRFSCAN,PRFSIZE          SCAN POINTER BEYOND BFR END
         BH    ERREXIT                  YES, RETURN WITH ERROR CODE
         SPACE
         LH    RFROM7,PRFSCAN           GET 'FROM' DELIMITER
         N     RFROM7,AVTCLRHI
         B     SAVESCAN                 GO PREPARE FOR LINK TO AJ
         SPACE
LOADFM2  EQU   *
         LH    RFROM7,EIGHT(,RPARM8)    GET 'FROM' DELIMITER
         N     RFROM7,AVTCLRHI
         AR    RFROM7,RPFXSZ11          ADD LENGTH OF PREFIX
         SPACE
SAVESCAN EQU   *
         SR    RWORK2,RWORK2            CLEAR                    S22025
         LR    R0,RFROM7                GET START FOR SCAN       S22025
         LA    RFROM7,ONE(,RFROM7)      BUMP OFFSET              S22025
         LR    R10,R1                   SAVE AP'S PARMLIST       S22025
         IC    RWORK2,FOUR(,RPARM8)     GET BLANK                S22025
         L     R1,FOUR(,RPARM8)         GET ADDRESS OF CHAR STRNGS22025
         TM    AVTEZERO(RPARM8),BLANK   BLANK SPECIFIED          S22025
         BNO   BLNK                     NO                       S22025
         LNR   RWORK2,RWORK2            MAKE NEGATIVE            S22025
BLNK     EQU   *                                                 S22025
         L     R15,AVTAX                GET ADDRESS OF SCAN      S22025
         BALR  R14,R15                  LINK TO SCAN             S22025
         LR    R1,R10                   RESTORE PARMLIST         S22025
         L     R14,FOUR(,RPARM8)        GET ADDR OF CHARS        S22025
         SR    R10,R10                  CLEAR                    S22025
         IC    R10,AVTEZERO(,R14)       GET CHAR LENGTH          S22025
         CR    R15,R10                  ALL CHARS FOUND          S22025
         BL    PART                     NO                       S22025
         LR    R15,R0                   YES,GET NEW OFFSET       S22025
         LA    R15,ONE(,R15)            BUMP OFFSET TO NEXT      S22025
         TM    PARMSTAT(R1),TONCSTAT    YES, TEST IF 'TO' STRING
*                                         INCLUDED IN REMOVE
         BO    TESTFUNC                 YES, R15 GOOD, PROCEED
         SPACE
         LA    RTO15,ONE(,RWORK2)       POINT TO START OF CHARS  S22025
*        B     TESTFUNC                 PROCEED TO TEST FUNCTION
         EJECT
TESTFUNC EQU   *
         LH    RWORK2,PRFSIZE           PICK UP SIZE OF DATA
         N     RWORK2,AVTCLRHI
         LA    RWORK2,ONE(,RWORK2)      POINT BEYOND END OF DATA
         CR    RFROM7,RWORK2            OUT OF THE BUFFER        S22025
         BNL   ERREXIT                  YES, ERROR               S22025
         CR    RTO15,RWORK2             TEST 'TO' DELIMITER
         BL    SETOFF                   IT'S LOW, PROCEED
         SPACE
         LR    RTO15,RWORK2             IT'S HIGH, SET TOTAL REMOVE
         OI    PRFKEY+1,TOTALREM        INDICATE TOTAL REMOVE
         SPACE
SETOFF   EQU   *
         STH   RTO15,DATOFF(,RPREFIX)   SET 'TO' OFFSET IN PREFIX
         LNR   RFROM7,RFROM7            SUBTRACT TO GET
         AR    RFROM7,RTO15               NO. OF AVAILABLE BYTES
         STH   RFROM7,INSOFF(,RPREFIX)  SET INSERT OFFSET IN PREFIX
         TM    LCBSTAT1,LCBSENDN        SENDING                  S22025
         BO    TSTDEL                   YES, NO UPDATE           S22025
         SPACE 1                                                 S22025
         OI    PRFTQBCK+TWO,BFREDIT     INDICATE DATA MOVEMENT   S22025
         MVC   PRFXTRA(1),PARMSTAT(R1)  SAVE STATUS              S22025
         STH   RFROM7,PRFXTRA+1         SET DELETE LENGTH        S22025
TSTDEL   EQU   *                                                 S22025
         SPACE
         LH    RWORK2,PRFKEY+2          PICK UP SAVED SCAN POINTER
         N     RWORK2,AVTCLRHI
         LA    RWORK2,ONE(,RWORK2)      ADJUST SCAN POINTER    @YA05473
         CR    RPFXSZ11,RWORK2          SCAN POINTER IN PREFIX @YA05473
         BH    ERREXIT                  YES, ERROR BRANCH      @YA05473
         BCTR  RWORK2,AVTEZERO          NO, RESET SCAN POINTER @YA05473
         TM    PRFKEY+ONE,SCANADJ       SCAN ADJUSTMENT NEEDED @OX14760
         BNO   CONTR                    NO, DONT RESET         @OX14760
         SR    RWORK2,RFROM7            DECREMENT NO. BYTES REMOVED
         STH   RWORK2,PRFKEY+2          PUT IT BACK
CONTR    EQU   *                                               @SA69090
         SPACE
         IC    R0,PARMAF(,R1)           PICK UP INSERT-DATA INDEX
         STC   R0,AVTPARM+2             SAVE IN AVT PARAMETER AREA
         SPACE
         TM    PARMSTAT(R1),CONTSTAT    IS FUNCTION CONTRACT
         BO    CONTRACT                 YES, BYPASS INSERTION
         SPACE
         SR    R0,R0
         STH   R0,AVTPARM               CLEAR AVT PARM AREA
         TM    PARMSTAT(R1),DATASTAT    IS INSERT DATA CHARACTERS
         BO    SETPARM                  YES, DATA FLAG IS CORRECT
         SPACE
         MVI   AVTPARM+1,IDLEFLAG       SET DATA = IDLES
         SPACE
SETPARM  EQU   *
         SR    R0,R0                    PICK UP
         IC    R0,PARMDATA(,R1)           LENGTH OF REPLACE DATA
         AR    RWORK2,R0                INCREMENT SAVED SCAN POINTER
         STH   RWORK2,PRFKEY+2          SAVE IT BACK AGAIN
         SPACE
         L     R0,PARMDATA(,R1)         LOAD DATA PARAMETER
         ST    R0,AVTPARM3              PASS IN AVTPARM3
         IC    R0,PARMAO(,R1)           PICK UP IEDQAO OFFSET
         STC   R0,AVTPARM               SET IN AVTPARM
         BAL   R14,LINK                 LINK TO TEST & LINK
         SPACE
         LTR   R15,R15                  TEST IF UNIT NOT FOUND
         BNZ   ERREXIT                  NOT FOUND, RETURN ERROR
         SPACE
         LH    R0,INSOFF(,RPREFIX)      GET NO. OF AVAILABLE BYTES
         LTR   R0,R0                    IS CLOSE-UP NEEDED
         BZ    EXIT                     NO, RETURN TO CALLER
         SPACE
CONTRACT EQU   *
         TM    PRFKEY+1,TOTALREM        IS IT TOTAL REMOVE
         BNO   CLOSEUP                  NO, GO DO CLOSEUP
         SPACE
         LH    R0,DATOFF(,RPREFIX)      YES, GET DATA OFFSET
         N     R0,AVTCLRHI
         BCTR  R0,AVTEZERO              POINT TO LAST BYTE
         B     EXIT1                    GO SET FINAL SIZE & EXIT
         SPACE
CLOSEUP  EQU   *
         IC    R15,AVTPARM+2            PICK UP INSERT-DATA INDEX
         LA    R15,SHIFFLAG(,R15)       REQUEST SHIFT FUNCTION
         STC   R15,AVTPARM              SET IT IN PARM LIST
         MVI   AVTPARM+1,AVTEZERO       INDICATE DATA = CHARACTERS
         LH    RLIM8,PRFSIZE            GET TOTAL DATA SIZE
         N     RLIM8,AVTCLRHI
         LH    RWORK2,DATOFF(,RPREFIX)  GET DATA OFFSET
         N     RWORK2,AVTCLRHI
         BCTR  RWORK2,AVTEZERO
         SR    RLIM8,RWORK2             SUBTRACT FOR SHIFT LIMIT
         LA    R14,EXIT                 SET RETURN TO EXIT
         SPACE
LINK     EQU   *
         LA    R1,AVTPARM               POINT TO CALLED'S PARM LIST
         L     R15,AVTUI                GET USER INTERFACE ADDRESS
         BR    R15                      LINK TO CALLED ROUTINE
         EJECT
PART     EQU   *                                                 S22025
         TM    PARMAO(R1),TWO           INBLOCK                  S22025
         BZ    ERREXIT                  NO                       S22025
         TM    PRFSTAT1,PRFNLSTN        LAST BUFFER              S22025
         BNO   ERREXIT                  YES                      S22025
         CLC   AVTADBUF+1(3),SCBDEOB+1  LAST GOOD EOB IN BUFFER  S22025
         BNE   NOEOB                    NO, PUT DATA ON HOLD Q   S22025
         SPACE 1                                                 S22025
         CH    RFROM7,SCBEOB            EOB IN DATA TO HOLD      S22025
         BNH   ERREXIT                  YES, DON'T HOLD DATA     S22025
         SPACE 1                                                 S22025
NOEOB    EQU   *                                                 S22025
         LR    R10,R1                   SAVE PARMLIST PTR        S22025
         LH    RWORK8,PRFSIZE           GET OFFSET OF END        S22025
         LA    RWORK8,ONE(,RWORK8)      BUMP PAST END            S22025
         SR    RWORK8,RFROM7            GET LENGTH TO KEEP       S22025
         STH   RFROM7,DATOFF(,RPREFIX)  SET AS DATA OFFSET       S22025
         IC    R14,PARMAO(,R1)          GET AO'S INDEX           S22025
         STC   R14,AVTPARM              SET UP PARM LIST         S22025
         OI    AVTPARM,ONE              INDICATE DIRECT RETURN   S22025
         MVI   AVTPARM3,AVTEFF          SET UP FIELD             S22025
         BAL   R14,LINK                 GO GET A UNIT            S22025
         LTR   R15,R15                  ANY UNITS AVAILABLE      S22025
         BNZ   ERREXIT                  NO                       S22025
         LH    RFROM7,DATOFF(,RPREFIX)  GET TOTAL SPACE          S22025
         N     RFROM7,AVTCLRHI          CLEAR                    S22025
         SH    RFROM7,INSOFF(,RPREFIX)  SUBTRACT SPACE AVAIL     S22025
         BCTR  RFROM7,R0                SUBTRACT ONE             S22025
         STH   RFROM7,PRFSIZE           SET NEW SIZE             S22025
         LR    R0,RFROM7                GET OFFSET TO START      S22025
         LR    RFROM7,RWORK8            GET OFFSET OF NEXT       S22025
         LR    RWORK8,R0                SAVE OFFSET OF START     S22025
UNITSCAN EQU   *                        TO FIND THE UNIT         S22025
         CH    RWORK8,AVTKEYLE          END OF DATA IN THIS UNIT S22025
         BNH   QMANIP                   YES                      S22025
         SH    RWORK8,AVTKEYLE          OBTAIN NEXT              S22025
         B     UNITSCAN                 UNIT                     S22025
QMANIP   EQU   *                                                 S22025
         L     RWORK2,PRFLCB-1          LCB ADDRESS              S22025
         L     RWORK2,LCBDCBPT-IEDQLCB(,RWORK2)  DCB ADDRESS     S22025
         SR    R0,R0                    INITIALIZE REGISTER      S22025
         IC    R0,DCBRESER+1-IHADCB(,RWORK2) NO OF TEXT IDLES    S22025
         LR    RWORK2,R0                SAVE NUMBER IDLES        S22025
         LA    RWORK2,AVTTXTSZ(,RWORK2) TEXT PREFIX SIZE         S22025
         LH    R1,PRFSIZE               GET TOTAL SIZE IN OLD    S22025
         CR    RWORK2,RWORK8            SPACE AVAILABLE          S22025
         BNH   BLDPRF                   BUILD A PREFIX           S22025
GETUNIT  EQU   *                                                 S22025
         SR    R0,R0                    CLEAR                    S22025
         STH   R0,INSOFF(,RPREFIX)      ZERO SPACE AVAILABLE     S22025
         LA    R1,AVTPARM               LINK TO                  S22025
         L     R15,AVTUI                AO TO GET                S22025
         BALR  R14,R15                  UNIT                     S22025
         LTR   R15,R15                  ANY UNITS                S22025
         BNZ   ERREXIT                  NO                       S22025
         LH    R1,PRFSIZE               GET SIZE OF UNIT         S22025
         N     R1,AVTCLRHI              CLEAR                    S22025
         SH    R1,AVTKEYLE              GET CORRECT SIZE         S22025
         STH   R1,PRFSIZE               STORE                    S22025
         AH    RWORK8,AVTKEYLE          ADJUST DATA OFFSET       S22025
BLDPRF   EQU   *                                                 S22025
         SR    R15,R15                  CLEAR                    S22025
         IC    R15,PRFNBUNT             GET NO UNITS             S22025
         SR    R0,R0                    CLEAR                    S22025
         N     R1,AVTCLRHI              CLEAR  HIGH              S22025
         LH    R14,AVTKEYLE             GET UNIT SIZE            S22025
         DR    R0,R14                   DIVIDE                   S22025
         LTR   R0,R0                    ANY PARTIAL UNITS        S22025
         BZ    SETUNITS                 NO                       S22025
         LA    R1,ONE(,R1)              ADD TO NO FILLED         S22025
SETUNITS EQU   *                        INDICATE NO UNITS IN     S22025
         STC   R1,PRFNBUNT              SET NO UNITS OLD BUF     S22025
         SR    R15,R1                   GET NO IN NEW            S22025
         LR    RDATAD5,RPREFIX          GET FIRST UNIT           S22025
BLOOP    EQU   *                                                 S22025
         L     RDATAD5,PRFTIC-IEDQPRF(,RDATAD5)  GET UNIT        S22025
         BCT   R1,BLOOP                 GET NEXT UNIT            S22025
         L     RLCB4,PRFLCB-1           GET LCB ADDRESS          S22025
         MVC   PRFLCB-IEDQPRF(THREE,RDATAD5),LCBSCBA SCB ADDR IN S22025
         MVC   MVOFF(LEN,RDATAD5),MVOFF(RPREFIX) MOVE PREFIX     S22025
         L     RLCB4,AVTADBUF           SAVE OLD BUF ADDRESS     S22025
         ST    RDATAD5,AVTADBUF         SET UP NEW BUF ADDRESS   S22025
         LR    RPREFIX,RDATAD5          SET BASE TO NEW BUFFER   S22025
         STC   R15,PRFNBUNT             SET NO UNITS NEW BUF     S22025
         LA    R15,ONE(,RWORK8)         DATA OFFSET PLUS ONE     S22025
         STH   R15,DATOFF(,RPREFIX)     DATA OFFSET              S22025
         BCTR  R15,R0                   SUBT ONE FROM OFFSET     S22025
         SR    R15,RWORK2               SUBTRACT PREFIX+IDLES    S22025
         STH   R15,INSOFF(,RPREFIX)     SPACE AVAILABLE          S22025
         OI    PRFSTAT1,PRFNHDRN        INSURE TEXT BUFFER       S22025
         OI    PRFTQBCK+TWO,BFREDIT     INDICATE DATA MOVEMENT   S22025
         STH   RWORK2,PRFSCAN           SCAN PAST PRFIX AND RES  S22025
         LR    RWORK2,RFROM7            GET OFFSET OF NEXT BYTE  S22025
         AR    RWORK8,RWORK2            GET SIZE                 S22025
         STH   RWORK8,PRFSIZE           STORE SIZE               S22025
         LR    RWORK8,RWORK2            SET UP REG 8 FOR AF      S22025
         IC    R15,AVTPARM+2            AF INDEX                 S22025
         LA    R15,ONE(R15)             SHIFT DATA FUNCTION      S22025
         STC    R15,AVTPARM             PUT INDEX IN PARMLIST    S22025
         MVI   AVTPARM+1,AVTEZERO       INDICATE DATA IA CHAR    S22025
         LA    R1,AVTPARM               POINT TO PARMLIST   T    S22025
         L     R15,AVTUI                GET INTERFACE ROUTINE    S22025
         BALR  R14,R15                  GO TO AF                 S22025
         LH    RWORK2,PRFSIZE           GET SIZE SPACE AVAIL     S22025
         SH    RWORK2,INSOFF(,RPREFIX)  SUBTRACT SPACE AVAIL     S22025
         STH   RWORK2,PRFSIZE           STORE CORRECT SIZE       S22025
         LH    R14,AVTHA2               GET TIC ADDR FOR LAST UNIS22025
         SR    R15,R15                  CLEAR                    S22025
         IC    R15,PRFNBUNT             NO UNITS IN NEW BUF      S22025
         B     LNUNIT                   TRY NEXT                 S22025
FINAL    EQU   *                        LAST UNIT FOUND          S22025
         L     RDATAD5,PRFTIC-IEDQPRF(,RDATAD5) GET NEXT         S22025
LNUNIT   EQU   *                        FIND LAST UNIT           S22025
         BCT   R15,FINAL                FOUND, GET OUT           S22025
         LR    RFROM7,R10               GET AP PARMLIST          S22025
         LA    R10,FOUR                 GET OFFSET               S22025
         SR    RFROM7,R10               BACK UP TO QUEUE         S22025
         ST    R14,PRFTIC-IEDQPRF(,RDATAD5)  INVALID TIC ADDR    S22025
         MVI   PRFTIC-IEDQPRF(RDATAD5),EIGHT SET TIC FLAG        S22025
         LR    RDATAD5,RPREFIX          POINT TO FIRST UNIT      S22025
         LR    RPREFIX,RLCB4            RESTORE ORIGINAL BUFFER  S22025
         ST    RPREFIX,AVTADBUF         IN AVT                   S22025
         NC    ONE(THREE,RFROM7),ONE(RFROM7) IS QUEUE EMPTY      S22025
         BZ    NOBUFS                   YES                      S22025
         L     RWORK8,AVTEZERO(,RFROM7) NO GET NEXT BUFFER       S22025
LOOP1    EQU   *                                                 S22025
         NC    FIVE(THREE,RWORK8),FIVE(RWORK8) IS THIS LAST ON Q S22025
         BZ    QLINK                    YES LINK IN NEW BUF      S22025
         L     RWORK8,FOUR(RWORK8)      NO GET NEXT BUF ADDR     S22025
         B     LOOP1                    GET NEXT BUF ADDR        S22025
QLINK    EQU   *                                                 S22025
         ST    RDATAD5,FOUR(RWORK8)     LINK BUF IN Q            S22025
         B     LASTBUF                  INDICATE LAST BUFFER     S22025
NOBUFS   EQU   *                                                 S22025
         ST    RDATAD5,AVTEZERO(,RFROM7) PUT BUFFER ON QUEUE     S22025
         MVC   FIVE(THREE,RDATAD5),AVTFZERO  CLEAR LINK FIELD    S22025
LASTBUF  EQU   *                                                 S22025
         MVC   INSOFF(TWO,RPREFIX),AVTFZERO NO BYTES LEFT OVER   S22025
EXIT     EQU   *
         LH    R0,PRFSIZE               GET OLD BUFFER SIZE
         N     R0,AVTCLRHI
         SPACE
EXIT1    EQU   *
         SH    R0,INSOFF(,RPREFIX)      SUBTRACT LEFT-OVER BYTES
         STH   R0,PRFSIZE               SET NEW BUFFER SIZE
         LA    RPFXSZ11,ONE(,RPFXSZ11)  GET SIZE IF 1 DATA BYTE
         CR    RPFXSZ11,R0              IS THERE 1 DATA BYTE
         BNH   ZERORTN                  AT LEAST ONE, BRANCH
         SPACE
         STH   RPFXSZ11,PRFSIZE         NOT EVEN ONE, FORCE ONE
         SPACE
ZERORTN  EQU   *
         SR    R15,R15                  SET GOOD RETURN CODE
         SPACE
         TM    PRFKEY+1,SCANADJ         MUST SCAN BE ADJUSTED
         BNO   EXIT2                    NO, RETURN TO MH        SA58444
         SPACE 1
         MVC   PRFSCAN(2),PRFKEY+2      RESTORE SCAN POINTER
         SPACE
EXIT2    EQU   *
         L     RBASE,AVTUI              GET RET INTERFACE ADDR   S22025
         B     FOUR(RBASE)              BRANCH TO RETURN ROUTINE S22025
         SPACE 3
ERREXIT  EQU   *
         LA    R15,AVTECD4              SET ERROR RETURN CODE
         B     EXIT2                    RETURN TO CALLER        SA58444
         EJECT
********* DSECTS *********
         SPACE
         DCBD  DSORG=TX
         EJECT
         SPACE
         TAVTD
         EJECT
         TLCBD
         EJECT
         TPRFD
         EJECT
         TSCBD
         END
