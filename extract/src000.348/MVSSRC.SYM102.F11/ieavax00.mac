         TITLE 'IEAVAX00  STAX SVC SERVICE ROUTINE   SVC 96  IGC0009F'
IGC0009F CSECT ,                                                   0001
@PROLOG  DS    0H                                                  0002
RBPRFXLN EQU 64
RBPRFLNA EQU 32
PRBLEN   EQU 136
SIRBLEN  EQU 200
TIRBLEN  EQU 136
IRBLEN   EQU 128
SVRBLEN  EQU 200
         USING    IGC0009F,6         ESTABLISH ADDRESSABILITY FOR
*                                    MODULE
         USING    TSB,13             ESTABLISH ADDRESSABILITY FOR
*                                    TSB
         MODID    BR=YES
*   RETADDSV=RETADD;                /* SAVE RETURN ADDRESS           */
         ST    RETADD,RETADDSV(,RBSECPTR)                          0086
*   RFY                                                            0087
*    (RETADD) UNRSTD;                                              0087
*   RETCODSV=ZERO;                  /* LOAD RETURN CODE OF ZERO      */
         SLR   @12,@12                                             0088
         ST    @12,RETCODSV(,RBSECPTR)                             0088
*   RFY                                                            0089
*    (R9) RSTD;                                                    0089
*   R9=ADDR(STXFRR);                /* LOAD ADDRESS OF FRR EXIT    0090
*                                      ROUTINE                       */
         LA    R9,STXFRR                                           0090
*   GEN(  SETFRR  A,FRRAD=(R9),PARMAD=(FRRWKAR),WRKREGS=(R11,R10)) 0091
*   REFS(FRRWKAR,R11,R9,R10);       /* PROTECT CODE WITH FRR         */
           SETFRR  A,FRRAD=(R9),PARMAD=(FRRWKAR),WRKREGS=(R11,R10)
*   RFY                                                            0092
*    (R9) UNRSTD;                                                  0092
*   FRRFLAGS=0;                     /* CLEAR FRR FLAG BYTE   @ZA31889*/
         SLR   @12,@12                                             0093
         ST    @12,FRRFLAGS(,FRRWKAR)                              0093
*   IF ASCBTSB^=ZERO THEN           /* CHECK IF TSO USER             */
         C     @12,ASCBTSB(,ASCBPTR)                               0094
         BE    @RF00094                                            0094
*     DO;                                                          0095
*       IF STXPARM^=ZERO THEN       /* CHECK FOR CANCEL REQ  @ZA31889*/
         CR    STXPARM,@12                                         0096
         BE    @RF00096                                            0096
*         DO;                                                      0097
*           R0=LENGTH(STXLIST);     /* GET LENGTH OF LIST    @ZA31889*/
         LA    R0,24                                               0098
*           RFY                                                    0099
*            (R11) RSTD;            /*                       @ZA31889*/
*           R11=R1;                 /* SAVE LIST ADDRESS     @ZA31889*/
         LR    R11,R1                                              0100
*           GEN(   GETMAIN   RU,SP=255,LV=(R0),BRANCH=YES)         0101
*           REFS(R3);               /* DO A GETMAIN FOR SYSTEM LIST
*                                                            @ZA31889*/
            GETMAIN   RU,SP=255,LV=(R0),BRANCH=YES
*           FRRGTGM5=ON;            /* INDICATE GOT 255 AREA @ZA31889*/
*           FRRGTVCH=ON;            /* INDICATE VALIDITY     @ZA31889*/
         OI    FRRGTGM5(FRRWKAR),B'10000001'                       0103
*           GEN(  USING TCB,4);     /* SET TCB BASE REGISTER @ZA31889*/
           USING TCB,4
*           RFY                                                    0105
*            (R13) RSTD;            /*                       @ZA31889*/
*           GEN(  MODESET  EXTKEY=TCB,WORKREG=13);/* GET KEY @ZA31889*/
           MODESET  EXTKEY=TCB,WORKREG=13
*           GEN(  DROP  4);         /* DROP TCB BASE REG     @ZA31889*/
           DROP  4
*           R13=R11->STXEXIT;       /* CHECK FIRST ADDRESS   @ZA31889*/
         L     R13,STXEXIT(,R11)                                   0108
*           R13=R11->STXUSER;       /* CHECK LAST ADDRESS    @ZA31889*/
         SLR   R13,R13                                             0109
         ICM   R13,7,STXUSER(R11)                                  0109
*           RFY                                                    0110
*            (R13) UNRSTD;          /*                       @ZA31889*/
*           GEN(  MODESET  EXTKEY=ZERO);/* RETURN TO ZERO KEY      0111
*                                                            @ZA31889*/
           MODESET  EXTKEY=ZERO
*           FRRGTVCH=OFF;           /* RESET VALIDITY BIT    @ZA31889*/
         NI    FRRGTVCH(FRRWKAR),B'01111111'                       0112
*           STXLIST(1:LENGTH(STXLIST)-4)=R11->STXLIST;/* MOVE      0113
*                                      PARAMETER LIST TO AREA GOTTEN
*                                                            @ZA31889*/
         MVC   STXLIST(20,STXPARM),STXLIST(R11)                    0113
*           STXSAVE=R11;            /* SAVE ADDRESS OF LIST  @ZA31889*/
         ST    R11,STXSAVE(,STXPARM)                               0114
*           RFY                                                    0115
*            (R11) UNRSTD;          /*                       @ZA31889*/
*           IF STXATTON=ON&STXATTOF=ON THEN                        0116
         TM    STXATTON(STXPARM),B'00001100'                       0116
         BNO   @RF00116                                            0116
*             DO;                   /* YES, CLEAR RCTDCLST   @ZA08099*/
*               RCTDCLST=CLEARED;   /* CLEAR COUNT IN RCTDCLST     0118
*                                                            @ZA08099*/
         L     @12,ASXBPTR(,ASCBPTR)                               0118
         L     @12,ASXBRCTD(,@12)                                  0118
         SLR   @15,@15                                             0118
         STH   @15,RCTDCLST(,@12)                                  0118
*             END;                  /*                       @ZA08099*/
*           ELSE                    /* NOT BOTH ON, CHECK FOR ONE ON
*                                                            @ZA08099*/
*             IF STXATTON=ON&STXATTOF=OFF THEN                     0120
         B     @RC00116                                            0120
@RF00116 TM    STXATTON(STXPARM),B'00001000'                       0120
         BNO   @RF00120                                            0120
         TM    STXATTOF(STXPARM),B'00000100'                       0120
         BNZ   @RF00120                                            0120
*               DO;                 /* ONLY STXATTON ON?     @ZA08099*/
*                 RCTDCLST=RCTDCLST+1;/* INCREMENT THE COUNT IN    0122
*                                      RCTDCLST              @ZA08099*/
         L     @12,ASXBPTR(,ASCBPTR)                               0122
         L     @12,ASXBRCTD(,@12)                                  0122
         LA    @15,1                                               0122
         SLR   @14,@14                                             0122
         ICM   @14,3,RCTDCLST(@12)                                 0122
         ALR   @15,@14                                             0122
         STH   @15,RCTDCLST(,@12)                                  0122
*               END;                /*                       @ZA08099*/
*             ELSE                  /* CHECK FOR STXATTOF BEING ON 0124
*                                                            @ZA08099*/
*               IF STXATTON=OFF&STXATTOF=ON THEN                   0124
         B     @RC00120                                            0124
@RF00120 TM    STXATTOF(STXPARM),B'00000100'                       0124
         BNO   @RF00124                                            0124
         TM    STXATTON(STXPARM),B'00001000'                       0124
         BNZ   @RF00124                                            0124
*                 DO;               /* ONLY STXATTOF IS ON   @ZA08099*/
*                   IF RCTDCLST^=CLEARED THEN/* IF COUNT IS NOT ZERO
*                                                            @ZA31889*/
         L     @12,ASXBPTR(,ASCBPTR)                               0126
         L     @12,ASXBRCTD(,@12)                                  0126
         SLR   @15,@15                                             0126
         ICM   @15,3,RCTDCLST(@12)                                 0126
         LTR   @15,@15                                             0126
         BZ    @RF00126                                            0126
*                     RCTDCLST=RCTDCLST-1;/* THEN DECREMENT COUNT  0127
*                                                            @ZA31889*/
         BCTR  @15,0                                               0127
         STH   @15,RCTDCLST(,@12)                                  0127
*                 END;              /*                       @ZA08099*/
*                                                                  0128
@RF00126 DS    0H                                                  0129
*           /*********************************************************/
*           /*                                                       */
*           /* DO NOT GO THRU REMAINDER OF CODE IF ONE/BOTH FLAGS ARE*/
*           /* SET                                           @ZA08099*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0129
*           IF STXATTON=ON×STXATTOF=ON THEN                        0129
@RF00124 DS    0H                                                  0129
@RC00120 DS    0H                                                  0129
@RC00116 TM    STXATTON(STXPARM),B'00001100'                       0129
         BNZ   @RT00129                                            0129
*             GOTO ENDSTAX;         /* IF TRUE THEN EXIT     @ZA08099*/
*           IF STXEXIT^=ZERO THEN   /* CHECK FOR CANCEL REQUESTED    */
         SLR   @12,@12                                             0131
         C     @12,STXEXIT(,STXPARM)                               0131
         BE    @RF00131                                            0131
*             DO;                                                  0132
*               IF STXIBUF^=ZERO THEN/* CHECK IS INPUT BUFFER      0133
*                                      SPECIFIED                     */
         C     @12,STXIBUF(,STXPARM)                               0133
         BE    @RF00133                                            0133
*                 DO;                                              0134
*                   RFY                                            0135
*                    (R10) RSTD;                                   0135
*                   FRRGTVCH=ON;    /* INDICATE GOING TO VALIDITY  0136
*                                      CHECK                         */
         OI    FRRGTVCH(FRRWKAR),B'10000000'                       0136
*                   R10=FRRWKAR;    /* SAVE ADDRESS OF FRR WORK AREA */
         LR    R10,FRRWKAR                                         0137
*                   IF STXISIZ^=ZERO THEN/* CHECK FOR INPUT BUFFER 0138
*                                      NOT ZERO                      */
         ICM   @12,3,STXISIZ(STXPARM)                              0138
         BZ    @RF00138                                            0138
*                     DO;                                          0139
*                       IF STXISIZ>MAXB THEN/* CHECK INPUT BUFFER  0140
*                                      GREATER THAN 32 K             */
         CLC   STXISIZ(2,STXPARM),@CH02417                         0140
         BNH   @RF00140                                            0140
*                         CALL ABEND1;/* ABEND USER                  */
         BAL   @14,ABEND1                                          0141
*                       ELSE        /* COMPUTE ENDING ADDRESS OF   0142
*                                      INPUT BUFFER                  */
*                         R2=STXIBUF+STXISIZ-1;/* LOAD HIGH ADDRESS
*                                      OF INPUT BUFFER       @ZA31889*/
         B     @RC00140                                            0142
@RF00140 SLR   R2,R2                                               0142
         ICM   R2,3,STXISIZ(STXPARM)                               0142
         AL    R2,STXIBUF(,STXPARM)                                0142
         BCTR  R2,0                                                0142
*                     END;                                         0143
*                   ELSE            /* ZERO HIGH ADDRESS             */
*                     R2=ZERO;      /* LOAD ZERO IN REGISTER TO PASS
*                                      TO VALIDITY CHECK             */
         B     @RC00138                                            0144
@RF00138 SLR   R2,R2                                               0144
*                   RFY                                            0145
*                    (R11) RSTD;                                   0145
@RC00138 DS    0H                                                  0146
*                   R11=STXPARM;    /* SAVE ADDRESS OF STAX PARAMETER
*                                      LIST                          */
         LR    R11,STXPARM                                         0146
*                   R1=STXIBUF;     /* SAVE INPUT BUFFER ADDRESS   0147
*                                                            @ZA16401*/
         L     R1,STXIBUF(,STXPARM)                                0147
*                   CALL VALIDITY;  /* CALL VALIDITY CHECK           */
         L     @12,CVTPTR                                          0148
         L     @15,CVT0VL00(,@12)                                  0148
         BALR  @14,@15                                             0148
*                   BC(8,VALITYOK); /* CHECK IF ADDRESS VALID IF   0149
*                                      CONDITION CODE NOT ZERO GO TO
*                                      ABEND PROCESSING              */
         BC    8,VALITYOK                                          0149
*                   STXPARM=R11;    /* RELOAD STAX PARAMETER LIST  0150
*                                      ADDRESS               @ZA31889*/
         LR    STXPARM,R11                                         0150
*                   CALL ABEND1;    /* CALL ROUTINE TO ABEND USER    */
         BAL   @14,ABEND1                                          0151
*VALITYOK:                                                         0152
*                   STXPARM=R11;    /* RELOAD STAX PARAMETER LIST  0152
*                                      ADDRESS                       */
VALITYOK LR    STXPARM,R11                                         0152
*                   FRRWKAR=R10;    /* RESTORE POINTER TO FRR WORK 0153
*                                      AREA                          */
         LR    FRRWKAR,R10                                         0153
*                   FRRRFVCH=ON;    /* INDICATE RETURN FROM VALIDITY
*                                      CHECK                         */
         OI    FRRRFVCH(FRRWKAR),B'01000000'                       0154
*                   RFY                                            0155
*                    (R10,                                         0155
*                     R11) UNRSTD;                                 0155
*                 END;                                             0156
*               IF STXOBUF^=ZERO THEN/* CHECK OBUF SPECIFIED         */
@RF00133 ICM   @12,15,STXOBUF(STXPARM)                             0157
         BZ    @RF00157                                            0157
*                 IF STXOSIZ>MAXB THEN/* CHECK IF OUTPUT BUFFER    0158
*                                      GREATER THAN 32 K             */
         CLC   STXOSIZ(2,STXPARM),@CH02417                         0158
         BNH   @RF00158                                            0158
*                   CALL ABEND1;    /* ABEND USER                    */
         BAL   @14,ABEND1                                          0159
*             END;                                                 0160
@RF00158 DS    0H                                                  0160
@RF00157 DS    0H                                                  0161
*           IF STXDFRYS=ON×STXDFRNO=ON THEN/* CHECK IF BOTH DEFER  0161
*                                      BITS ON                       */
@RF00131 TM    STXDFRYS(STXPARM),B'00110000'                       0161
         BZ    @RF00161                                            0161
*             DO;                                                  0162
*               RBSECPTR=RBLINKB;   /* POINT TO USERS RB             */
         SLR   @12,@12                                             0163
         ICM   @12,7,RBLINKB(RBSECPTR)                             0163
         LR    RBSECPTR,@12                                        0163
*               IF STXDFRYS=ON&STXDFRNO=ON THEN/* IF BOTH DEFER BITS */
         TM    STXDFRYS(STXPARM),B'00110000'                       0164
         BNO   @RF00164                                            0164
*                 CALL ABEND1;      /* THEN ABEND USER               */
         BAL   @14,ABEND1                                          0165
*               IF RBFTP='010'B×RBFTP='100'B THEN/* CHECK IF RUNNING
*                                      UNDER IRB OR SIRB             */
@RF00164 TM    RBFTP(RBSECPTR),B'01000000'                         0166
         BNO   @GL00001                                            0166
         TM    RBFTP(RBSECPTR),B'10100000'                         0166
         BZ    @RT00166                                            0166
@GL00001 TM    RBFTP(RBSECPTR),B'10000000'                         0166
         BNO   @RF00166                                            0166
         TM    RBFTP(RBSECPTR),B'01100000'                         0166
         BNZ   @RF00166                                            0166
@RT00166 DS    0H                                                  0167
*                 DO;                                              0167
*                   RBSECPTR=TCBRBP;/* RESTORE RB POINTER            */
         L     RBSECPTR,TCBRBP(,TCBPTR)                            0168
*                   RETCODSV=EIGHT;                                0169
         MVC   RETCODSV(4,RBSECPTR),@CF00053                       0169
*                   GO TO ENDSTAX;  /* PASS A RETURN CODE OF 8 TO  0170
*                                      USER                          */
         B     ENDSTAX                                             0170
*                 END;                                             0171
*               FRRRBPTR=RBSECPTR;  /* SAVE DEFERED RB ADDRESS       */
@RF00166 ST    RBSECPTR,FRRRBPTR(,FRRWKAR)                         0172
*               IF STXDFRNO=ON THEN /* DEFER NO SPECIFIED            */
         TM    STXDFRNO(STXPARM),B'00010000'                       0173
         BNO   @RF00173                                            0173
*                 DO;                                              0174
*                   FRRDNST=ON;     /* INDICATE DEFER NO SET         */
         OI    FRRDNST(FRRWKAR),B'01000000'                        0175
*                   RBATTN=OFF;     /* CANCEL DEFER PROCESSING       */
         NI    RBATTN(RBSECPTR),B'11011111'                        0176
*                 END;                                             0177
*               ELSE                /* DEFER YES SPECIFIED           */
*                 IF RBATTN=ON THEN /* CHECK IF PREVIOUSLY REQUESTED */
         B     @RC00173                                            0178
@RF00173 TM    RBATTN(RBSECPTR),B'00100000'                        0178
         BNO   @RF00178                                            0178
*                   DO;                                            0179
*                     RBSECPTR=TCBRBP;/* POINT TO SVRB               */
         L     RBSECPTR,TCBRBP(,TCBPTR)                            0180
*                     RETCODSV=PREVDEFR;/* RETURN A CODE OF 4        */
         MVC   RETCODSV(4,RBSECPTR),@CF00037                       0181
*                   END;                                           0182
*                 ELSE              /* DEFER YES NOT PREVIOUSLY    0183
*                                      REQUESTED                     */
*                   DO;                                            0183
         B     @RC00178                                            0183
@RF00178 DS    0H                                                  0184
*                     FRRDYSST=ON;  /* INDICATE DEFER YES SET        */
         OI    FRRDYSST(FRRWKAR),B'10000000'                       0184
*                     RBATTN=ON;    /* DEFER ATTENTION PROCESSING    */
         OI    RBATTN(RBSECPTR),B'00100000'                        0185
*                   END;                                           0186
*               RBSECPTR=TCBRBP;    /* POINT TO SVRB                 */
@RC00178 DS    0H                                                  0187
@RC00173 L     RBSECPTR,TCBRBP(,TCBPTR)                            0187
*               GO TO EXITCK;       /* CHECK IF OTHER PROCESSING     */
         B     EXITCK                                              0188
*             END;                                                 0189
*         END;                                                     0190
@RF00161 DS    0H                                                  0191
*                                                                  0191
*/********************************************************************/
*/*                                                                  */
*/*                     CANCEL PROCESSING                            */
*/*                                                                  */
*/*          THIS ROUTINE WILL DEQUEUE AND FREEMAIN THE              */
*/*          FIRST TAXE ON THE TAXE QUEUE FOR THIS TCB               */
*/*                                                                  */
*/********************************************************************/
*                                                                  0191
*       IF STXPARM=ZERO×STXEXIT=ZERO THEN/* CHECK IF CANCEL WAS    0191
*                                      REQUESTED                     */
@RF00096 SLR   @12,@12                                             0191
         CR    STXPARM,@12                                         0191
         BE    @RT00191                                            0191
         C     @12,STXEXIT(,STXPARM)                               0191
         BNE   @RF00191                                            0191
@RT00191 DS    0H                                                  0192
*CANCEL:                                                           0192
*         DO;                       /* ROUTINE TO CANCEL TAXES       */
CANCEL   DS    0H                                                  0193
*           IF STXPARM^=ZERO THEN                                  0193
         LTR   STXPARM,STXPARM                                     0193
         BZ    @RF00193                                            0193
*             DO;                   /* IF PARMAMETER LIST    @ZA31889*/
*               R0=LENGTH(STXLIST); /* GET LENGTH OF LIST    @ZA31889*/
         LA    R0,24                                               0195
*               FRRGTGM5=OFF;       /* INDICATE NO PARAM LIST@ZA31889*/
         NI    FRRGTGM5(FRRWKAR),B'11111110'                       0196
*               GEN( FREEMAIN RU,SP=255,BRANCH=YES,LV=(0),A=(1))   0197
*               REFS(R3);           /* FREE SYSTEM LIST      @ZA31889*/
          FREEMAIN RU,SP=255,BRANCH=YES,LV=(0),A=(1)
*             END;                  /* FREED PARAMETER LIST  @ZA31889*/
*           CALL SEARCH;            /* CALL ROUTINE TO SEARCH TAXE 0199
*                                      QUEUE                         */
@RF00193 BAL   @14,SEARCH                                          0199
*           IF FONDTAXE^=ZERO THEN  /* CHECK IF NO TAXE FOUND        */
         L     @12,FONDTAXE(,FRRWKAR)                              0200
         LTR   @12,@12                                             0200
         BZ    @RF00200                                            0200
*             DO;                                                  0201
*               RBSECPTR=FONDTAXE;  /* POINT TO RB IN TAXE           */
         LR    RBSECPTR,@12                                        0202
*               IF RBFACTV^=ON&TAXESCHD^=ON THEN/* CHECK IF RB ACTIVE*/
         TM    RBFACTV(RBSECPTR),B'01000000'                       0203
         BO    @RF00203                                            0203
         TM    TAXESCHD(TAXEPTR),B'00001000'                       0203
         BO    @RF00203                                            0203
*                 DO;                                              0204
*                   IF TAXEFREQ=OFF THEN/* CHECK IF EXIT NOT ENTERED */
         TM    TAXEFREQ(TAXEPTR),B'00100000'                       0205
         BNZ   @RF00205                                            0205
*                     DO;                                          0206
*                                                                  0206
*                       /*********************************************/
*                       /*                                           */
*                       /* COMPARE AND SWAP TSBSTAX - 1              */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0207
*                       RFY                                        0207
*                        (R13,                                     0207
*                         CSWORD1,                                 0207
*                         CSWORD2) RSTD;                           0207
*                       R13=ASCBTSB;/* LOAD POINTER TO TSB           */
         L     R13,ASCBTSB(,ASCBPTR)                               0208
*                       CSWORD1=CSWORD3;/* LOAD REGISTER FROM TSBATTN*/
         L     CSWORD1,CSWORD3                                     0209
*LOOP1:                                                            0210
*                       CSWORD2=CSWORD1;/* LOAD SECOND REGISTER      */
LOOP1    LR    CSWORD2,CSWORD1                                     0210
*                       IF(CSWORD2&CSMASK)^=ZERO THEN/* CHECK IF   0211
*                                      TSBSTAX ALREADY ZERO          */
         LR    @12,CSWORD2                                         0211
         N     @12,@CF02411                                        0211
         LTR   @12,@12                                             0211
         BZ    @RF00211                                            0211
*                         CSWORD2=CSWORD2-ONE;/* SUBSTRACT ONE FROM
*                                      TSBSTAX COUNT                 */
         SL    CSWORD2,@CF02415                                    0212
*                       CS(CSWORD1,CSWORD2,CSWORD3);/* COMPARE AND 0213
*                                      SWAP TSBSTAX COUNT            */
@RF00211 CS    CSWORD1,@09,CSWORD3                                 0213
*                       BC(7,LOOP1);/* TRY AGAIN IF NO GOOD          */
         BC    7,LOOP1                                             0214
*                       RFY                                        0215
*                        (R13,                                     0215
*                         CSWORD1,                                 0215
*                         CSWORD2) UNRSTD;                         0215
*                     END;                                         0216
*                   FRRTTBDQ=ON;    /* INDICATE STARTING TO DEQUEUE
*                                      TAXE                          */
@RF00205 OI    FRRTTBDQ(FRRWKAR),B'00000100'                       0217
*                   IF TAXEPREV^=ZERO THEN/* CHECK IF PREVIOUS TAXE
*                                      EXISTS                        */
         L     @12,TAXEPREV(,FRRWKAR)                              0218
         LTR   @12,@12                                             0218
         BZ    @RF00218                                            0218
*                     DO;                                          0219
*                       TAXEPTR=TAXEPREV;/* POINT TO PREVIOUS TAXE   */
         LR    TAXEPTR,@12                                         0220
*                       TAXELNK=NEXTTAXE;/* DEQUEUE TAXE             */
         MVC   TAXELNK(3,TAXEPTR),NEXTTAXE+1(FRRWKAR)              0221
*                     END;                                         0222
*                   ELSE            /* NO PREVIOUS TAXE              */
*                     RCTDTAXE=TAXELNK;/* DEQUEUE FIRST TAXE         */
*                                                                  0223
         B     @RC00218                                            0223
@RF00218 L     @12,ASXBPTR(,ASCBPTR)                               0223
         L     @12,ASXBRCTD(,@12)                                  0223
         SLR   @15,@15                                             0223
         ICM   @15,7,TAXELNK(TAXEPTR)                              0223
         ST    @15,RCTDTAXE(,@12)                                  0223
*                   /*************************************************/
*                   /*                                               */
*                   /* SET UP INTERFACE TO FREEMAIN THE DEQUEUED TAXE*/
*                   /*                                               */
*                   /*************************************************/
*                                                                  0224
*                   FRRTTBDQ=OFF;   /* INDICATE END DEQUEUING TAXE   */
@RC00218 NI    FRRTTBDQ(FRRWKAR),B'11111011'                       0224
*                   TAXEPTR=FONDTAXE;/* POINT TO DEQUEUED TAXE       */
         L     TAXEPTR,FONDTAXE(,FRRWKAR)                          0225
*                   R0='48'X;       /* LOAD LENGTH OF RB SAVE AREA   */
         LA    R0,72                                               0226
*                   R1=RBPPSAV;     /* LOAD ADDRESS OF RB SAVE AREA  */
         L     R1,RBPPSAV(,RBSECPTR)                               0227
*                   FRRGTFM0=ON;    /* INDICATE GOING TO FREEMAIN SP
*                                      250                           */
         OI    FRRGTFM0(FRRWKAR),B'00001000'                       0228
*                   GEN                                            0229
*(  FREEMAIN     RC,SP=250,BRANCH=YES,LV=(0),A=(1))                0229
*                   REFS(CVTCRMN);  /* FREEMAIN RB SAVEAREA          */
           FREEMAIN     RC,SP=250,BRANCH=YES,LV=(0),A=(1)
*                   R1=ADDR(RBPRFXST);/* LOAD ADDRESS OF TAXE        */
         LR    R1,RBSECPTR                                         0230
         AL    R1,@CF02533                                         0230
*                   R0=RBSIZE*8;    /* LOAD LENGTH OF THE TAXE IN  0231
*                                      REGISTER 0                    */
         LH    R0,RBSIZE(,RBSECPTR)                                0231
         SLA   R0,3                                                0231
*                   FRRGTFM3=ON;    /* INDICATE GOING TO FREEMAIN SP
*                                      253                           */
         OI    FRRGTFM3(FRRWKAR),B'00000100'                       0232
*                   GEN                                            0233
*(  FREEMAIN     RC,SP=253,BRANCH=YES,LV=(0),A=(1))                0233
*                   REFS(CVTCRMN);  /* FREEMAIN TAXE                 */
           FREEMAIN     RC,SP=253,BRANCH=YES,LV=(0),A=(1)
*                   FRRRFFM=ON;     /* INDICATE RETURN FROM FREEMAIN */
         OI    FRRRFFM(FRRWKAR),B'00000010'                        0234
*                 END;                                             0235
*               ELSE                /* TAXE ACTIVE                   */
*                 DO;                                              0236
         B     @RC00203                                            0236
@RF00203 DS    0H                                                  0237
*                   FRRTRESM=ON;    /* INDICATE BLOCKING USERS CODE
*                                      BEING ENTERED                 */
         OI    FRRTRESM(FRRWKAR),B'00010000'                       0237
*                   TAXERESM=ON;    /* BLOCK USERS EXIT FROM BEING 0238
*                                      ENTERED                       */
         OI    TAXERESM(TAXEPTR),B'00010000'                       0238
*                   FRRDYNST=ON;    /* INDICATE TAXE MARKED FOR    0239
*                                      CANCELLIATION                 */
         OI    FRRDYNST(FRRWKAR),B'00100000'                       0239
*                   RBFDYN=ON;      /* MARK TAXE TO BE CANCELED BY 0240
*                                      EPILOGUE                      */
         OI    RBFDYN(RBSECPTR),B'00000010'                        0240
*                 END;                                             0241
*             END;                                                 0242
@RC00203 DS    0H                                                  0243
*           STXPARM=ZERO;           /* LOAD ZERO IN REGISTER 1       */
@RF00200 SLR   STXPARM,STXPARM                                     0243
*         END CANCEL;                                              0244
*                                                                  0245
*/********************************************************************/
*/*                                                                  */
*/*                   NOCANCEL PROCESSING                            */
*/*                                                                  */
*/*          THIS ROUTINE WILL CREATE AND QUEUE A NEW TAXE           */
*/*          OR REPLACE THE VALUES IN AN OLD TAXE                    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0245
*       ELSE                                                       0245
*EXITCK:                                                           0245
*         IF STXEXIT^=ZERO THEN     /* CHECK IF CANCEL NOT REQUESTED */
         B     @RC00191                                            0245
@RF00191 DS    0H                                                  0245
EXITCK   ICM   @12,15,STXEXIT(STXPARM)                             0245
         BZ    @RF00245                                            0245
*NOCANCEL:                                                         0246
*           DO;                     /* ROUTINE TO CREATE OR REPLACE
*                                      TAXE                          */
NOCANCEL DS    0H                                                  0247
*             CALL SEARCH;          /* CALL TAXE SEARCH ROUTINE      */
         BAL   @14,SEARCH                                          0247
*             IF FONDTAXE^=ZERO THEN/* CHECK IF TAXE FOUND FOR THIS
*                                      TCB                           */
         L     @12,FONDTAXE(,FRRWKAR)                              0248
         LTR   @12,@12                                             0248
         BZ    @RF00248                                            0248
*               DO;                                                0249
*                 RBSECPTR=FONDTAXE;/* POINT TO RB IN TAXE           */
         LR    RBSECPTR,@12                                        0250
*                 TAXEPTR=FONDTAXE; /* POINT TO THIS TAXE            */
         LR    TAXEPTR,@12                                         0251
*                 RFY                                              0252
*                  (R11) RSTD;                                     0252
*                 R11=TAXESTAX;     /* SAVE ADDRESS OF USER PARAMETER
*                                      LIST IN REG 11                */
         SLR   R11,R11                                             0253
         ICM   R11,7,TAXESTAX(TAXEPTR)                             0253
*                 IF STXRPLNO^=ON THEN/* CHECK IF REPLACE YES      0254
*                                      SPECIFIED                     */
         TM    STXRPLNO(STXPARM),B'01000000'                       0254
         BO    @RF00254                                            0254
*                   IF RBFACTV^=ON THEN/* CHECK IF RB ACTIVE         */
         TM    RBFACTV(RBSECPTR),B'01000000'                       0255
         BO    @RF00255                                            0255
*                     DO;                                          0256
*                       RBSECPTR=TCBRBP;/* POINT TO SVRB             */
         L     RBSECPTR,TCBRBP(,TCBPTR)                            0257
*                       FRRTTBRP=ON;/* INDICATE REPLACING TAXE       */
         OI    FRRTTBRP(FRRWKAR),B'00001000'                       0258
*                       CALL INIT;  /* CALL INITIALIZATION ROUTINE   */
         BAL   @14,INIT                                            0259
*                       FRRTTBRP=OFF;/* TURN OFF REPLACING BIT       */
         NI    FRRTTBRP(FRRWKAR),B'11110111'                       0260
*                       GO TO ENDNO;/* GO TO END OF THE NO CANCEL  0261
*                                      ROUTINE                       */
         B     ENDNO                                               0261
*                     END;                                         0262
*                   ELSE            /* TAXE ACTIVE                   */
*                     DO;                                          0263
@RF00255 DS    0H                                                  0264
*                       FRRDYNST=ON;/* INDICATE TAXE TO BE FREED BY
*                                      EXIT                          */
         OI    FRRDYNST(FRRWKAR),B'00100000'                       0264
*                       RBFDYN=ON;  /* MARK TAXE TO BE CANCELED BY 0265
*                                      EPILOGUE                      */
         OI    RBFDYN(RBSECPTR),B'00000010'                        0265
*                     END;                                         0266
*               END;                                               0267
*             ELSE                  /* NO TAXE FOUND                 */
*               DO;                                                0268
         B     @RC00248                                            0268
@RF00248 DS    0H                                                  0269
*                 RFY                                              0269
*                  (R11) RSTD;                                     0269
*                 R11=ZERO;         /* SAVE INDICATION OF NO PREVIOUS
*                                      TAXE FOUND                    */
         SLR   R11,R11                                             0270
*               END;                                               0271
*                                                                  0271
*             /*******************************************************/
*             /*                                                     */
*             /* SET UP INTERFACE TO STAGE 1 EXIT EFFICTOR           */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0272
*             RFY                                                  0272
*              (R10,                                               0272
*               R13) RSTD;                                         0272
@RC00248 DS    0H                                                  0273
*             R13=STXPARM;                                         0273
         LR    R13,STXPARM                                         0273
*             R1=((LENGTH(TAXE)-LENGTH(TAXEIRB))/8);/* LOAD LENGTH OF
*                                      TAXE MINUS LENGTH OF IRB IN 0274
*                                      DOUBLE WORDS                  */
         LA    R1,6                                                0274
*             R3=CVTPTR;            /* RESTORE CVT POINTER           */
         L     R3,CVTPTR                                           0275
*             R10=R6;               /* SAVE BASE REGISTER            */
         LR    R10,R6                                              0276
*             FRRGTS1E=ON;          /* INDICATE GOING TO STAGE ONE 0277
*                                      EXIT EFFECTOR                 */
         OI    FRRGTS1E(FRRWKAR),B'00100000'                       0277
*             GEN REFS(CVTS1EE,PROLOGA);                           0278
*                            /* CALL STAGE ONE EXIT EFFECTOR         */
        CIRB    EP=PROLOGA,KEY=SUPR,SVAREA=YES,RETIQE=NO,TYPE=IRB,     X
               BRANCH=YES,WKAREA=(1),MODE=SUPR
*             R6=R10;               /* RESTORE BASE REGISTER         */
         LR    R6,R10                                              0279
*             FRRRFS1E=ON;          /* INDICATE RETURN FORM STAGE ONE
*                                      EXIT EFFECTOR                 */
         OI    FRRRFS1E(FRRWKAR),B'00010000'                       0280
*             TAXEPTR=R1;           /* POINT TO NEW TAXE             */
         LR    TAXEPTR,R1                                          0281
*             NEWTAXE=TAXEPTR;      /* SAVE ADDRESS OF NEW TAXE      */
         ST    TAXEPTR,NEWTAXE(,FRRWKAR)                           0282
*             ASCBPTR=PSAAOLD;      /* RESTORE POINTER TO ASCB       */
         L     ASCBPTR,PSAAOLD                                     0283
*             STXPARM=R13;          /* RESTORE POINTER TO STAX     0284
*                                      PARAMETER LIST                */
         LR    STXPARM,R13                                         0284
*             RFY                                                  0285
*              (R10,                                               0285
*               R13) UNRSTD;                                       0285
*             RBSECPTR=TAXEPTR;     /* POINT TO RB IN TAXE           */
         LR    RBSECPTR,TAXEPTR                                    0286
*             RBATNXIT=ON;          /* TURN ON ATTENTION IRB       0287
*                                      INDICATOR IN TAXE             */
         OI    RBATNXIT(RBSECPTR),B'00000010'                      0287
*             RBSECPTR=TCBRBP;      /* POINT TO SVRB                 */
         L     RBSECPTR,TCBRBP(,TCBPTR)                            0288
*             TAXEWORK=''B;         /* CLEAR WORK AREA OF NEW TAXE   */
         XC    TAXEWORK(44,TAXEPTR),TAXEWORK(TAXEPTR)              0289
*             CALL INIT;            /* CALL ROUTINE TO INITIALIZE  0290
*                                      TAXE                          */
         BAL   @14,INIT                                            0290
*             CALL QUEUING;         /* CALL ROUTINE TO QUEUE TAXE    */
         BAL   @14,QUEUING                                         0291
*ENDNO:                                                            0292
*             STXPARM=R11;          /* LOAD INDICATION IN REG 1 OF 0292
*                                      PREVIOUS EXIT                 */
ENDNO    LR    STXPARM,R11                                         0292
*           END NOCANCEL;                                          0293
*     END;                                                         0294
*                                                                  0295
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP INTERFACE TO EXIT. THIS SECTION OF CODE WILL LOAD THE  */
*   /* RETURN CODE IN REGISTER 15 AND THE RETURN ADDRESS IN REGISTER */
*   /* 14                                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0295
*   ELSE                                                           0295
*     ;                                                            0295
@RF00094 DS    0H                                                  0296
*ENDSTAX:                                                          0296
*   IF FRRGTGM5=ON THEN                                            0296
@RC00094 DS    0H                                                  0296
ENDSTAX  TM    FRRGTGM5(FRRWKAR),B'00000001'                       0296
         BNO   @RF00296                                            0296
*     DO;                           /* CHECK FOR GETMAIN AREA      0297
*                                                            @ZA31889*/
*       R0=LENGTH(STXLIST);         /* GET LENGTH OF AREA    @ZA31889*/
         LA    R0,24                                               0298
*       GEN( FREEMAIN RU,SP=255,BRANCH=YES,LV=(0),A=(1));/*  @ZA31889*/
          FREEMAIN RU,SP=255,BRANCH=YES,LV=(0),A=(1)
*     END;                          /*                       @ZA31889*/
*   RFY                                                            0301
*    (RETCODE,                                                     0301
*     RETADD) RSTD;                 /* RETURN TO CALLER              */
@RF00296 DS    0H                                                  0302
*   RBSECPTR=TCBRBP;                /* POINT TO SVRB                 */
         L     RBSECPTR,TCBRBP(,TCBPTR)                            0302
*   RETCODE=RETCODSV;               /* LOAD RETURN CODE              */
         L     RETCODE,RETCODSV(,RBSECPTR)                         0303
*   RETADD=RETADDSV;                /* LOAD THE RETURN ADDRESS       */
         L     RETADD,RETADDSV(,RBSECPTR)                          0304
*   GEN(    SETFRR   D,WRKREGS=(R9,R10));/* DELETE THE FRR           */
             SETFRR   D,WRKREGS=(R9,R10)
*   RFY                                                            0306
*    (RETCODE,                                                     0306
*     RETADD) UNRSTD;                                              0306
*                                                                  0307
*/********************************************************************/
*/*                                                                  */
*/*                       ABEND PROCESSING                           */
*/*                                                                  */
*/*       THIS ROUTINE DELETES THE FRR AND ISUES AN ABEND            */
*/*                                                                  */
*/********************************************************************/
*                                                                  0307
*ABEND1:                                                           0307
*   PROC OPTIONS(NOSAVE,NOSAVEAREA,NOPARMREG,NOENTREG,RETREG);     0307
@EL00001 DS    0H                                                  0307
@EF00001 DS    0H                                                  0307
@ER00001 BR    @14                                                 0307
ABEND1   DS    0H                                                  0308
*   R0=LENGTH(STXLIST);             /* GET LENGTH OF LIST    @ZA31889*/
         LA    R0,24                                               0308
*   GEN(     FREEMAIN  RU,SP=255,BRANCH=YES,LV=(0),A=(1));/* @ZA31889*/
              FREEMAIN  RU,SP=255,BRANCH=YES,LV=(0),A=(1)
*   GEN(     SETFRR    D,WRKREGS=(R9,R10));/* DELETE THE FRR         */
              SETFRR    D,WRKREGS=(R9,R10)
*   GEN(     ABEND     X'260',,,SYSTEM);/* ABEND THE USERS TASK      */
              ABEND     X'260',,,SYSTEM
*   END ABEND1;                                                    0312
*                                                                  0312
@EL00002 DS    0H                                                  0312
@EF00002 DS    0H                                                  0312
@ER00002 BR    @14                                                 0312
*/********************************************************************/
*/*                                                                  */
*/*                   ROUTINE TO SEARCH TAXE QUEUE                   */
*/*                                                                  */
*/*      THIS ROUTINE LOCATES THE FIRST TAXE QUEUED ON THE TAXE      */
*/*      QUEUE FOR THE TCB THAT REQUESTED THIS SVC                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0313
*SEARCH:                                                           0313
*   PROC OPTIONS(NOSAVE,NOSAVEAREA,NOPARMREG,NOENTREG,RETREG);     0313
SEARCH   DS    0H                                                  0314
*   TAXEPTR=RCTDTAXE;               /* POINT TO ADDRESS OF FIRST TAXE*/
         L     @12,ASXBPTR(,ASCBPTR)                               0314
         L     @12,ASXBRCTD(,@12)                                  0314
         L     @12,RCTDTAXE(,@12)                                  0314
         LR    TAXEPTR,@12                                         0314
*   TAXEPREV=ZERO;                  /* STORE ZEROS IN PREVIOUS TAXE
*                                      POINTER                       */
         SLR   @10,@10                                             0315
         ST    @10,TAXEPREV(,FRRWKAR)                              0315
*   IF RCTDTAXE^=ZERO THEN          /* CHECK IF NO TAXES QUEUED      */
         CR    @12,@10                                             0316
         BE    @RF00316                                            0316
*     DO WHILE TAXEPTR^=ZERO&TAXETCB^=TCBPTR;/* SEARCH TILL FIRST  0317
*                                      TAXE FOUND FOR THIS TCB       */
         B     @DE00317                                            0317
@DL00317 DS    0H                                                  0318
*       TAXEPREV=TAXEPTR;           /* STORE ADDRESS OF THIS TAXE    */
         ST    TAXEPTR,TAXEPREV(,FRRWKAR)                          0318
*       TAXEPTR=TAXELNK;            /* POINT TO NEXT TAXE IN QUEUE   */
         SLR   @12,@12                                             0319
         ICM   @12,7,TAXELNK(TAXEPTR)                              0319
         LR    TAXEPTR,@12                                         0319
*     END;                                                         0320
@DE00317 LTR   TAXEPTR,TAXEPTR                                     0320
         BZ    @DC00317                                            0320
         C     TCBPTR,TAXETCB(,TAXEPTR)                            0320
         BNE   @DL00317                                            0320
@DC00317 DS    0H                                                  0321
*   FONDTAXE=TAXEPTR;               /* SAVE ADDRESS OF TAXE          */
@RF00316 ST    TAXEPTR,FONDTAXE(,FRRWKAR)                          0321
*   IF TAXEPTR^=ZERO THEN           /* CHECK FOR TAXE                */
         LTR   TAXEPTR,TAXEPTR                                     0322
         BZ    @RF00322                                            0322
*     NEXTTAXE=TAXELNK;             /* SAVE ADDRESS OF NEXT TAXE     */
         SLR   @12,@12                                             0323
         ICM   @12,7,TAXELNK(TAXEPTR)                              0323
         ST    @12,NEXTTAXE(,FRRWKAR)                              0323
*   END SEARCH;                                                    0324
@EL00003 DS    0H                                                  0324
@EF00003 DS    0H                                                  0324
@ER00003 BR    @14                                                 0324
*                                                                  0325
*/********************************************************************/
*/*                                                                  */
*/*                   INITIALIZE TAXES                               */
*/*                                                                  */
*/*        THIS ROUTINE INITILIALIZES THE TAXE WITH THE VALUES       */
*/*        PASSED TO THIS SVC AT ENTRY                               */
*/*                                                                  */
*/********************************************************************/
*                                                                  0325
*INIT:                                                             0325
*   PROC OPTIONS(NOSAVE,NOSAVEAREA,NOPARMREG,NOENTREG,RETREG);     0325
INIT     DS    0H                                                  0326
*   TAXETCB=TCBPTR;                 /* STORE TCB ADDRESS IN NEW TAXE */
         ST    TCBPTR,TAXETCB(,TAXEPTR)                            0326
*   TAXESTAX=STXSAVE;               /* STORE PARAMETER LIST ADDRESS
*                                      IN NEW TAXE           @ZA31889*/
         MVC   TAXESTAX(3,TAXEPTR),STXSAVE+1(STXPARM)              0327
*   TIQEPARM=TAXEPTR;               /* STORE TAXE ADDRESS IN TIQE    */
         ST    TAXEPTR,TIQEPARM(,TAXEPTR)                          0328
*   TAXEIBUF=STXIBUF;               /* STORE INPUT BUFFER ADDRESS IN
*                                      TAXE                          */
         MVC   TAXEIBUF(4,TAXEPTR),STXIBUF(STXPARM)                0329
*   TIQEIRB=TAXEPTR;                /* STORE IRB ADDRESS IN TIQE     */
         ST    TAXEPTR,TIQEIRB(,TAXEPTR)                           0330
*   TAXEUSER=STXUSER;               /* STORE USER PARAMETER LIST   0331
*                                      ADDRESS IN TAXE               */
         SLR   @12,@12                                             0331
         ICM   @12,7,STXUSER(STXPARM)                              0331
         ST    @12,TAXEUSER(,TAXEPTR)                              0331
*   TAXEEXIT=STXEXIT;               /* STORE USER EXIT ADDRESS IN  0332
*                                      TAXE                          */
         MVC   TAXEEXIT(4,TAXEPTR),STXEXIT(STXPARM)                0332
*   RBSECPTR=RBLINKB;               /* POINT TO USERS RB             */
         SLR   @12,@12                                             0333
         ICM   @12,7,RBLINKB(RBSECPTR)                             0333
         LR    RBSECPTR,@12                                        0333
*   IF UKEY^=('0000'B) THEN         /* CHECK FOR KEY OF ZERO         */
         TM    UKEY(RBSECPTR),B'11110000'                          0334
         BZ    @RF00334                                            0334
*     TAXEFKEY=ON;                  /* SET TAXEFKEY SW TO ONE        */
         OI    TAXEFKEY(TAXEPTR),B'10000000'                       0335
*   ELSE                            /* USER KEY ZERO                 */
*     TAXEFKEY=OFF;                 /* SET TAXEFKEY SW TO ZERO       */
         B     @RC00334                                            0336
@RF00334 NI    TAXEFKEY(TAXEPTR),B'01111111'                       0336
*   IF USTATE=ON THEN               /* CHECK FOR PROBLEM PROGRAM   0337
*                                      STATE                         */
@RC00334 TM    USTATE(RBSECPTR),B'00000001'                        0337
         BNO   @RF00337                                            0337
*     TAXEFMOD=ON;                  /* SET TAXEFMOD SW TO ONE        */
         OI    TAXEFMOD(TAXEPTR),B'01000000'                       0338
*   ELSE                            /* USER SUPV STATE               */
*     TAXEFMOD=OFF;                 /* SET TAXEFMOD SW TO ZERO       */
         B     @RC00337                                            0339
@RF00337 NI    TAXEFMOD(TAXEPTR),B'10111111'                       0339
*   R0=LENGTH(STXLIST);             /* GET LENGTH OF LIST    @ZA31889*/
@RC00337 LA    R0,24                                               0340
*   FRRGTGM5=OFF;                   /* INDICATE LIST FREED   @ZA31889*/
         NI    FRRGTGM5(FRRWKAR),B'11111110'                       0341
*   RFY                                                            0342
*    (R12,                                                         0342
*     RETADD) RSTD;                 /*                       @ZA31889*/
*   R12=RETADD;                     /* SAVE RETURN ADDRESS   @ZA31889*/
         LR    R12,RETADD                                          0343
*   GEN( FREEMAIN RU,SP=255,BRANCH=YES,LV=(0),A=(1))               0344
*   REFS(R3,RETADD);                /* FREE SYSTEM LIST      @ZA31889*/
          FREEMAIN RU,SP=255,BRANCH=YES,LV=(0),A=(1)
*   RETADD=R12;                     /* RESTORE RETURN ADDRESS@ZA31889*/
         LR    RETADD,R12                                          0345
*   RFY                                                            0346
*    (R12,                                                         0346
*     RETADD) UNRSTD;               /*                       @ZA31889*/
*   END INIT;                                                      0347
@EL00004 DS    0H                                                  0347
@EF00004 DS    0H                                                  0347
@ER00004 BR    @14                                                 0347
*                                                                  0348
*/********************************************************************/
*/*                                                                  */
*/*                   QUEUING PROCESSING                             */
*/*                                                                  */
*/*         THIS ROUTINE QUEUES THE NEW TAXE TO ITS PROPER           */
*/*         PLACE ON THE TAXE QUEUE. THE TAXE SHOULD BE PLACED       */
*/*         ON THE QUEUE AS INDICATED BY THE FOLLOWING               */
*/*         TWO RULES                                                */
*/*           1. AN ATTENTION EXIT ROUTINE FOR A TASK WILL ALWAYS    */
*/*              OCCUPY A HIGHER LEVEL THAN THE ATTENTION EXIT       */
*/*              ROUTINE OF ANY OF ITS SUBTASKS                      */
*/*           2. THE ATTENTION EXIT ROUTINE IS PLACED AT THE LOWEST  */
*/*              POSSIBLE ATTENTION LEVEL, WITHOUT VIOLATING RULE 1  */
*/*         THESE TWO RULES ARE DESIGNED TO ELIMINATE INTERLOCKS     */
*/*         WHEN A SUBSTASK IS SET NON-DISPATCHABLE ACCROSS AN       */
*/*         ATTENTION EXIT AND ANOTHER ATTENTION IS FIELDED          */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0348
*QUEUING:                                                          0348
*   PROC OPTIONS(NOSAVE,NOSAVEAREA,NOPARMREG,NOENTREG,RETREG);     0348
QUEUING  DS    0H                                                  0349
*   NEXTTAXE=RCTDTAXE;              /* INDICATE TAXE QUEUED AT HEAD
*                                      OF QUEUE                      */
         L     @12,ASXBPTR(,ASCBPTR)                               0349
         L     @12,ASXBRCTD(,@12)                                  0349
         L     @12,RCTDTAXE(,@12)                                  0349
         ST    @12,NEXTTAXE(,FRRWKAR)                              0349
*   TAXEPREV=ZERO;                  /* INDICATE NO PREVIOUS TAXE     */
         SLR   @10,@10                                             0350
         ST    @10,TAXEPREV(,FRRWKAR)                              0350
*   TAXEPTR=RCTDTAXE;                                              0351
         LR    TAXEPTR,@12                                         0351
*   IF TCBLTC^=ZERO THEN            /* CHECK IF THIS TCB HAS ANY SUB
*                                      TASKS                         */
         C     @10,TCBLTC(,TCBPTR)                                 0352
         BE    @RF00352                                            0352
*     DO WHILE TAXEPTR^=ZERO;       /* SEARCH UNTIL END OF TAXE QUEUE
*                                      REACHED                       */
         B     @DE00353                                            0353
@DL00353 DS    0H                                                  0354
*       TCBPTR=TCBLTC;                                             0354
         L     TCBPTR,TCBLTC(,TCBPTR)                              0354
*       DO WHILE TAXETCB^=TCBPTR;   /* SEARCH UNTIL A SUB TASK IS  0355
*                                      FOUND FOR THIS TAXE           */
         B     @DE00355                                            0355
@DL00355 DS    0H                                                  0356
*         IF TCBLTC^=ZERO THEN      /* CHECK IF NO DAUGHTERS FOR THIS
*                                      TCB                           */
         L     @12,TCBLTC(,TCBPTR)                                 0356
         LTR   @12,@12                                             0356
         BZ    @RF00356                                            0356
*           TCBPTR=TCBLTC;          /* POINT TO YOUNGEST DAUGHTER    */
         LR    TCBPTR,@12                                          0357
*         ELSE                      /* CHECK FOR SISTERS             */
*TCBLOOP:                                                          0358
*           IF TCBNTC^=ZERO THEN    /* CHECK IF ANY SISTERS          */
         B     @RC00356                                            0358
@RF00356 DS    0H                                                  0358
TCBLOOP  L     @12,TCBNTC(,TCBPTR)                                 0358
         LTR   @12,@12                                             0358
         BZ    @RF00358                                            0358
*             TCBPTR=TCBNTC;        /* POINT TO NEXT SISTER          */
         LR    TCBPTR,@12                                          0359
*           ELSE                    /* CHECK MOTHER                  */
*             DO;                                                  0360
         B     @RC00358                                            0360
@RF00358 DS    0H                                                  0361
*               TCBPTR=TCBOTC;      /* POINT TO MOTHER TCB           */
         L     TCBPTR,TCBOTC(,TCBPTR)                              0361
*               IF TCBPTR=PSATOLD THEN/* CHECK IF THIS IS THE TCB FOR
*                                      THIS TASK                     */
         C     TCBPTR,PSATOLD                                      0362
         BNE   @RF00362                                            0362
*                 DO;                                              0363
*                   TAXEPTR=TAXELNK;/* POINT TO NEXT TAXE IN QUEUE   */
         SLR   @12,@12                                             0364
         ICM   @12,7,TAXELNK(TAXEPTR)                              0364
         LR    TAXEPTR,@12                                         0364
*                   GOTO ENDTCB;    /* GO TO END OF TCB SEARCH       */
         B     ENDTCB                                              0365
*                 END;                                             0366
*               ELSE                /* MOTHER NOT CURRENT            */
*                 GOTO TCBLOOP;     /* GO CHECK FOR SISTER   @YM21940*/
*             END;                                                 0368
*       END;                                                       0369
@RC00358 DS    0H                                                  0369
@RC00356 DS    0H                                                  0369
@DE00355 C     TCBPTR,TAXETCB(,TAXEPTR)                            0369
         BNE   @DL00355                                            0369
*       TAXEPREV=TAXEPTR;           /* STORE ADDRESS OF FIRST TAXE 0370
*                                      FOUND FOR THIS SUB TASK       */
         ST    TAXEPTR,TAXEPREV(,FRRWKAR)                          0370
*       TAXEPTR=TAXELNK;            /* POINT TO NEXT TAXE            */
         SLR   @12,@12                                             0371
         ICM   @12,7,TAXELNK(TAXEPTR)                              0371
         LR    TAXEPTR,@12                                         0371
*       TCBPTR=PSATOLD;             /* POINT TO TCB FOR THIS TASK    */
         L     TCBPTR,PSATOLD                                      0372
*ENDTCB:                                                           0373
*     END;                          /* END OF TCB CHECK LOOP         */
ENDTCB   DS    0H                                                  0373
@DE00353 LTR   TAXEPTR,TAXEPTR                                     0373
         BNZ   @DL00353                                            0373
*   FRRTTBQ=ON;                                                    0374
@RF00352 OI    FRRTTBQ(FRRWKAR),B'00000010'                        0374
*   IF TAXEPREV=ZERO THEN           /* CHECK IF NO TAXES FOUND FOR 0375
*                                      ANY SUB TASKS                 */
         ICM   @12,15,TAXEPREV(FRRWKAR)                            0375
         BNZ   @RF00375                                            0375
*     DO;                           /* QUEUE TAXE AT HEAD OF TAXE  0376
*                                      QUEUE                         */
*       TAXEPTR=NEWTAXE;            /* POINT TO NEW TAXE             */
         L     TAXEPTR,NEWTAXE(,FRRWKAR)                           0377
*       TAXELNK=RCTDTAXE;           /* STORE RCTDTAXE IN TAXELNK     */
         L     @12,ASXBPTR(,ASCBPTR)                               0378
         L     @12,ASXBRCTD(,@12)                                  0378
         MVC   TAXELNK(3,TAXEPTR),RCTDTAXE+1(@12)                  0378
*       RCTDTAXE=TAXEPTR;           /* STORE ADDRESS OF NEW TAXE IN
*                                      RCTD                          */
         ST    TAXEPTR,RCTDTAXE(,@12)                              0379
*     END;                                                         0380
*   ELSE                            /* QUEUE TAXE AFTER LAST TAXE  0381
*                                      FOUND FOR ANY SUB TASKS       */
*     DO;                                                          0381
         B     @RC00375                                            0381
@RF00375 DS    0H                                                  0382
*       TAXEPTR=TAXEPREV;           /* POINT TO LAST TAXE FOUND      */
         L     TAXEPTR,TAXEPREV(,FRRWKAR)                          0382
*       NEXTTAXE=TAXELNK;           /* SAVE ADDRESS OF NEXT TAXE     */
         SLR   @12,@12                                             0383
         ICM   @12,7,TAXELNK(TAXEPTR)                              0383
         ST    @12,NEXTTAXE(,FRRWKAR)                              0383
*       TAXELNK=NEWTAXE;            /* STORE ADDRESS OF NEW TAXE IN
*                                      PREVIOUS TAXE                 */
         L     @10,NEWTAXE(,FRRWKAR)                               0384
         STCM  @10,7,TAXELNK(TAXEPTR)                              0384
*       TAXEPTR=TAXELNK;            /* POINT TO NEW TAXE             */
         LR    TAXEPTR,@10                                         0385
*       TAXELNK=NEXTTAXE;           /* STORE ADDRESS OF NEXT TAXE IN
*                                      NEW TAXE                      */
         STCM  @12,7,TAXELNK(TAXEPTR)                              0386
*     END;                                                         0387
*   TAXEPTR=TAXELNK;                /* POINT TO NEXT TAXE            */
@RC00375 SLR   @12,@12                                             0388
         ICM   @12,7,TAXELNK(TAXEPTR)                              0388
         LR    TAXEPTR,@12                                         0388
*   IF TAXEPTR=ZERO×TAXEFREQ^=ON THEN/* CHECK IF NO TAXES ON QUEUE OR
*                                      NEXT TAXE AVAILABLE           */
         LTR   TAXEPTR,TAXEPTR                                     0389
         BZ    @RT00389                                            0389
         TM    TAXEFREQ(TAXEPTR),B'00100000'                       0389
         BO    @RF00389                                            0389
@RT00389 DS    0H                                                  0390
*     DO;                                                          0390
*       TAXEPTR=NEWTAXE;            /* POINT TO NEW TAXE             */
         L     TAXEPTR,NEWTAXE(,FRRWKAR)                           0391
*       TAXEFREQ=OFF;               /* MARK TAXE AVAILABLE           */
*                                                                  0392
         NI    TAXEFREQ(TAXEPTR),B'11011111'                       0392
*       /*************************************************************/
*       /*                                                           */
*       /* COMPARE AND SWAP TSBSTAX + 1                              */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0393
*       RFY                                                        0393
*        (R13,                                                     0393
*         CSWORD1,                                                 0393
*         CSWORD2) RSTD;                                           0393
*       R13=ASCBTSB;                /* ESTABLISH ADDRESSIBILITY TO 0394
*                                      TSB                           */
         L     R13,ASCBTSB(,ASCBPTR)                               0394
*       CSWORD1=CSWORD3;            /* LOAD TSBSTAX COUNT IN REG     */
         L     CSWORD1,CSWORD3                                     0395
*LOOP2:                                                            0396
*       CSWORD2=CSWORD1;            /* LOAD TSBSTAX COUNT IN REG     */
LOOP2    LR    CSWORD2,CSWORD1                                     0396
*       IF(CSWORD2&CSMASK)^=CSMASK THEN/* CHECK IF TSBSTAX COUNT CAN
*                                      BE INCRIMENTED                */
         L     @12,@CF02411                                        0397
         LR    @10,CSWORD2                                         0397
         NR    @10,@12                                             0397
         CLR   @10,@12                                             0397
         BE    @RF00397                                            0397
*         CSWORD2=CSWORD2+ONE;      /* ADD ONE TO TSBSTAX COUNT      */
         AL    CSWORD2,@CF02415                                    0398
*       CS(CSWORD1,CSWORD2,CSWORD3);/* CS TSBSTAX COUNT              */
@RF00397 CS    CSWORD1,@09,CSWORD3                                 0399
*       BC(7,LOOP2);                /* CS FAILED TRY AGAIN           */
         BC    7,LOOP2                                             0400
*       RFY                                                        0401
*        (R13,                                                     0401
*         CSWORD1,                                                 0401
*         CSWORD2) UNRSTD;                                         0401
*     END;                                                         0402
*   ELSE                            /* NEXT TAXE IS UNAVAILABLE      */
*     DO;                                                          0403
         B     @RC00389                                            0403
@RF00389 DS    0H                                                  0404
*       TAXEPTR=NEWTAXE;            /* POINT TO NEW TAXE             */
         L     TAXEPTR,NEWTAXE(,FRRWKAR)                           0404
*       TAXEFREQ=ON;                /* MARK TAXE UNAVAILABLE         */
         OI    TAXEFREQ(TAXEPTR),B'00100000'                       0405
*     END;                                                         0406
*   FRRTTBQ=OFF;                    /* INDICATE QUEUING COMPLETE     */
@RC00389 NI    FRRTTBQ(FRRWKAR),B'11111101'                        0407
*   END QUEUING;                                                   0408
@EL00005 DS    0H                                                  0408
@EF00005 DS    0H                                                  0408
@ER00005 BR    @14                                                 0408
*                                                                  0409
*/********************************************************************/
*/*                                                                  */
*/*                             FRR ROUTINE                          */
*/*                                                                  */
*/*         THIS ROUTINE WILL GET CONTROL IN THE EVENT OF ANY        */
*/*         ERROR ENCOUNTERED DURING STAX SVC PROCESSING FROM        */
*/*         RTM VIA A LOAD PSW. REGISTERS AT INPUT ARE AS FOLLOWS    */
*/*             REGISTER 0 INVALID                                   */
*/*             REGISTER 1 ADDRESS OF SDWA                           */
*/*             REGISTERS 2 - 13 INVALID                             */
*/*             REGISTER 14 RETURN ADDRESS                           */
*/*             REGISTER 15 ENTRY POINT ADDRESS                      */
*/*                                                                  */
*/********************************************************************/
*                                                                  0409
*STXFRR:                                                           0409
*   PROC OPTIONS(NOSAVE,NOSAVEAREA,NOPARMREG,NOENTREG,RETREG);     0409
STXFRR   DS    0H                                                  0410
*   GENERATE CODE NOSETS NODEFS NOFLOWS NOREFS;                    0410
           USING  STXFRR,6             ESTABLISH ADDRESSIBILITY
*                                      FOR THIS ROUTINE
           LR     6,15                 LOAD BASE REGISTER WITH THE
*                                      ENTRY POINT ADDRESS
*   FRRWKAR=SDWAPARM;                                              0411
         L     FRRWKAR,SDWAPARM(,SDWAPTR)                          0411
*   IF SDWAFMID=ZERO THEN           /* CHECK IF ERROR IN THIS ADDRESS
*                                      SPACE                         */
         ICM   @12,3,SDWAFMID(SDWAPTR)                             0412
         BNZ   @RF00412                                            0412
*     DO;                                                          0413
*       IF FRRDYSST=ON THEN         /* CHECK IF DEFER YES PROCESSING
*                                      STARTED                       */
         TM    FRRDYSST(FRRWKAR),B'10000000'                       0414
         BNO   @RF00414                                            0414
*         DO;                                                      0415
*           RBSECPTR=FRRRBPTR;      /* POINT TO USERS RB             */
         L     RBSECPTR,FRRRBPTR(,FRRWKAR)                         0416
*           RBATTN=OFF;             /* TURN DEFER BIT OFF            */
         NI    RBATTN(RBSECPTR),B'11011111'                        0417
*         END;                                                     0418
*       IF FRRDNST=ON THEN          /* WAS DEFER NO PROCESSING     0419
*                                      STARTED                       */
@RF00414 TM    FRRDNST(FRRWKAR),B'01000000'                        0419
         BNO   @RF00419                                            0419
*         DO;                                                      0420
*           RBSECPTR=FRRRBPTR;      /* POINT TO USERS RB             */
         L     RBSECPTR,FRRRBPTR(,FRRWKAR)                         0421
*           RBATTN=ON;              /* TURN DEFER BIT ON             */
         OI    RBATTN(RBSECPTR),B'00100000'                        0422
*         END;                                                     0423
*       IF FRRDYNST=ON THEN         /* CHECK IF TAXE WAS TO BE FREED
*                                      BY EXIT                       */
@RF00419 TM    FRRDYNST(FRRWKAR),B'00100000'                       0424
         BNO   @RF00424                                            0424
*         DO;                                                      0425
*           RBSECPTR=FONDTAXE;      /* POINT TO RB IN TAXE           */
         L     RBSECPTR,FONDTAXE(,FRRWKAR)                         0426
*           RBFDYN=OFF;             /* RESET FREE TAXE FLAG          */
         NI    RBFDYN(RBSECPTR),B'11111101'                        0427
*         END;                                                     0428
*       IF FRRTRESM=ON THEN         /* CHECK IF TAXE WAS MARKED FOR
*                                      CANCELLATION                  */
@RF00424 TM    FRRTRESM(FRRWKAR),B'00010000'                       0429
         BNO   @RF00429                                            0429
*         DO;                                                      0430
*           TAXEPTR=FONDTAXE;       /* POINT TO AFFECTED TAXE        */
         L     TAXEPTR,FONDTAXE(,FRRWKAR)                          0431
*           TAXERESM=OFF;           /* TURN OFF TAXE RESUME BIT      */
         NI    TAXERESM(TAXEPTR),B'11101111'                       0432
*         END;                                                     0433
*       ASCBPTR=PSAAOLD;            /* ESTABLISH ADDRESSIBILITY TO 0434
*                                      CURRENT ASCB                  */
@RF00429 L     ASCBPTR,PSAAOLD                                     0434
*       IF FRRTTBRP=ON×FRRTTBDQ=ON×FRRTTBQ=ON THEN/* CHECK IF TAXE 0435
*                                      WAS BEING QUEUED DEQUEUED OR
*                                      BEING REPLACED                */
         TM    FRRTTBRP(FRRWKAR),B'00001110'                       0435
         BZ    @RF00435                                            0435
*         DO;                                                      0436
*           IF TAXEPREV=ZERO THEN   /* CHECK IF TAXE WAS AT TOP OF 0437
*                                      QUEUE                         */
         ICM   @12,15,TAXEPREV(FRRWKAR)                            0437
         BNZ   @RF00437                                            0437
*             DO;                                                  0438
*               RCTDTAXE=NEXTTAXE;  /* INSURE TAXE IS DEQUEUED       */
         L     @12,ASXBPTR(,ASCBPTR)                               0439
         L     @12,ASXBRCTD(,@12)                                  0439
         MVC   RCTDTAXE(4,@12),NEXTTAXE(FRRWKAR)                   0439
*             END;                                                 0440
*           ELSE                    /* TAXE NOT TOP OF QUEUE         */
*             DO;                                                  0441
         B     @RC00437                                            0441
@RF00437 DS    0H                                                  0442
*               TAXEPTR=TAXEPREV;   /* SET BASE TO PREVIOUS TAXE     */
         L     TAXEPTR,TAXEPREV(,FRRWKAR)                          0442
*               TAXELNK=NEXTTAXE;   /* INSURE TAXE IS DEQUEUED       */
         MVC   TAXELNK(3,TAXEPTR),NEXTTAXE+1(FRRWKAR)              0443
*             END;                                                 0444
*         END;                                                     0445
*                                                                  0445
@RC00437 DS    0H                                                  0446
*       /*************************************************************/
*       /*                                                           */
*       /* THE FOLLOWING SEGMENT OF CODE WILL RESTABLISH THE STAX    */
*       /* COUNT. THE FIRST AVAILABLE TAXE WILL BE FOUND AND THE     */
*       /* SUBSEQUENT TAXES WILL BE COUNTED                          */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0446
*       TAXEPTR=RCTDTAXE;           /* SET TAXE BASE REGISTER        */
@RF00435 L     @12,ASXBPTR(,ASCBPTR)                               0446
         L     @12,ASXBRCTD(,@12)                                  0446
         L     TAXEPTR,RCTDTAXE(,@12)                              0446
*       RFY                                                        0447
*        (R13,                                                     0447
*         CSWORD1,                                                 0447
*         CSWORD2) RSTD;                                           0447
*       R13=ASCBTSB;                /* ESTABLISH ADDRESSIBILITY TO 0448
*                                      TSB                           */
         L     R13,ASCBTSB(,ASCBPTR)                               0448
*       CSWORD2=ZERO;               /* SET NEW COUNT TO ZERO         */
         SLR   CSWORD2,CSWORD2                                     0449
*       DO WHILE TAXEPTR^=ZERO;     /* SEARCH ENTIRE TAXE QUEUE      */
         B     @DE00450                                            0450
@DL00450 DS    0H                                                  0451
*         IF TAXEFREQ=OFF THEN      /* CHECK FOR AVAILABLE TAXES     */
         TM    TAXEFREQ(TAXEPTR),B'00100000'                       0451
         BNZ   @RF00451                                            0451
*           DO;                                                    0452
*             CSWORD2=CSWORD2+ONE;  /* IF AVAILABLE ADD ONE TO COUNT */
         AL    CSWORD2,@CF02415                                    0453
*           END;                                                   0454
*         TAXEPTR=TAXELNK;          /* POINT TO NEXT TAXE            */
@RF00451 SLR   @12,@12                                             0455
         ICM   @12,7,TAXELNK(TAXEPTR)                              0455
         LR    TAXEPTR,@12                                         0455
*       END;                                                       0456
@DE00450 LTR   TAXEPTR,TAXEPTR                                     0456
         BNZ   @DL00450                                            0456
*       IF CSWORD2>CSMASK THEN      /* CHECK FOR COUNT GREATER THAN
*                                      255                           */
         L     @12,@CF02411                                        0457
         CLR   CSWORD2,@12                                         0457
         BNH   @RF00457                                            0457
*         DO;                                                      0458
*           CSWORD2=CSMASK;         /* LOAD STAX COUNT OF 255        */
         LR    CSWORD2,@12                                         0459
*         END;                                                     0460
*       CSWORD1=CSWORD3;            /* LOAD INITIAL VALUE            */
@RF00457 L     CSWORD1,CSWORD3                                     0461
*LOOP3:                                                            0462
*       CSWORD2=(CSWORD1&CSMASKCL)×CSWORD2;/* AND IN NEW COUNT       */
LOOP3    LR    @12,CSWORD1                                         0462
         N     @12,@CF02413                                        0462
         OR    CSWORD2,@12                                         0462
*       CS(CSWORD1,CSWORD2,CSWORD3);/* CS TSBSTAX COUNT              */
         CS    CSWORD1,@09,CSWORD3                                 0463
*       BC(7,LOOP3);                /* CS FAILED TRY AGAIN           */
         BC    7,LOOP3                                             0464
*       RFY                                                        0465
*        (R13,                                                     0465
*         CSWORD1,                                                 0465
*         CSWORD2) UNRSTD;                                         0465
*       IF SDWAVRAL<LENGTH(FRRWKAR1) THEN/* CHECK IF VARIABLE AREA 0466
*                                      WILL HOLD THE ENTIRE FRR WORK
*                                      AREA                          */
         SLR   @12,@12                                             0466
         ICM   @12,3,SDWAVRAL(SDWAPTR)                             0466
         CH    @12,@CH00166                                        0466
         BNL   @RF00466                                            0466
*         DO;                                                      0467
*           SDWAVRA(1:SDWAVRAL)=FRRWKAR1;/* MOVE FRR WORK AREA INTO
*                                      RECORDING AREA                */
         BCTR  @12,0                                               0468
         EX    @12,@SM02540                                        0468
*           SDWAURAL=SDWAVRAL(2:2); /* MOVE LENGTH OF RECORD INTO  0469
*                                      SDWA                          */
         MVC   SDWAURAL(1,SDWAPTR),SDWAVRAL+1(SDWAPTR)             0469
*         END;                                                     0470
*       ELSE                        /* AREA TO SMALL                 */
*         DO;                                                      0471
         B     @RC00466                                            0471
@RF00466 DS    0H                                                  0472
*           SDWAVRA(1:LENGTH(FRRWKAR1))=FRRWKAR1;/* MOVE FRR WORK  0472
*                                      AREA INTO RECORDING AREA AND
*                                      TRUNCATE ON RIGHT             */
         MVC   SDWAVRA(24,SDWAPTR),FRRWKAR1(FRRWKAR)               0472
*           SDWAURAL=LENGTH(FRRWKAR1);/* MOVE LENGTH OF RECORD INTO
*                                      SDWA                          */
         MVI   SDWAURAL(SDWAPTR),X'18'                             0473
*         END;                                                     0474
*       IF FRRGTVCH=ON&FRRRFVCH=OFF THEN/* IF VALIDITY CHECK @ZA31889*/
@RC00466 TM    FRRGTVCH(FRRWKAR),B'10000000'                       0475
         BNO   @RF00475                                            0475
         TM    FRRRFVCH(FRRWKAR),B'01000000'                       0475
         BNZ   @RF00475                                            0475
*         DO;                       /* SETRP RETADDR(ADDRRET)RETREGS(
*                                      YES)RC(4)                     */
*           RESPECIFY                                              0477
*            (GPR00P,                                              0477
*             GPR01P,                                              0477
*             GPR14P,                                              0477
*             GPR15P) RSTD;                                        0477
*           GPR01P->SDWARCDE=4;     /* STORE RC INTO SDWA            */
         MVI   SDWARCDE(GPR01P),X'04'                              0478
*           GPR01P->SDWARTYA=ADDR(ADDRRET);/* SAVE RETRY ADDRESS     */
         MVC   SDWARTYA(4,GPR01P),RETABND                          0479
*           GPR01P->SDWAUPRG='1'B;  /* TURN ON RETREGS INDICATOR     */
         OI    SDWAUPRG(GPR01P),B'00001000'                        0480
*           RESPECIFY                                              0481
*            (GPR00P,                                              0481
*             GPR01P,                                              0481
*             GPR14P,                                              0481
*             GPR15P) UNRSTD;                                      0481
*         END;                      /*                       @ZA31889*/
*       ELSE                        /*                       @ZA31889*/
*         DO;                       /* SETRP RECORD(YES)WKAREA(SDWAPT
*                                      R)RECPARM(FRRMODID)RC(0)      */
         B     @RC00475                                            0483
@RF00475 DS    0H                                                  0484
*           RESPECIFY                                              0484
*            (GPR00P,                                              0484
*             GPR01P,                                              0484
*             GPR14P,                                              0484
*             GPR15P) RSTD;                                        0484
*           GPR01P=SDWAPTR;                                        0485
*           GPR01P->SDWARCDE=0;     /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0486
*           GPR01P->SDWARCRD='1'B;  /* TURN ON RECORD INDICATOR      */
         OI    SDWARCRD(GPR01P),B'10000000'                        0487
*           GPR15P=ADDR(FRRMODID);  /* ACCESS RECORD PARAMETER LIST  */
         LA    GPR15P,FRRMODID                                     0488
*           GPR01P->SDWARECP=GPR15P->I256C(1:24);/* COPY RECORD    0489
*                                      PARAMETERS                    */
         MVC   SDWARECP(24,GPR01P),I256C(GPR15P)                   0489
*           RESPECIFY                                              0490
*            (GPR00P,                                              0490
*             GPR01P,                                              0490
*             GPR14P,                                              0490
*             GPR15P) UNRSTD;                                      0490
*         END;                                                     0491
*     END;                                                         0492
*   ELSE                            /* NOT ERROR THIS ASCB           */
*     DO;                           /* SETRP WKAREA(SDWAPTR)RC(0)    */
         B     @RC00412                                            0493
@RF00412 DS    0H                                                  0494
*       RESPECIFY                                                  0494
*        (GPR00P,                                                  0494
*         GPR01P,                                                  0494
*         GPR14P,                                                  0494
*         GPR15P) RSTD;                                            0494
*       GPR01P=SDWAPTR;                                            0495
*       GPR01P->SDWARCDE=0;         /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0496
*       RESPECIFY                                                  0497
*        (GPR00P,                                                  0497
*         GPR01P,                                                  0497
*         GPR14P,                                                  0497
*         GPR15P) UNRSTD;                                          0497
*     END;                                                         0498
*   END STXFRR;                                                    0499
@EL00006 DS    0H                                                  0499
@EF00006 DS    0H                                                  0499
@ER00006 BR    @14                                                 0499
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00P PTR(31) REG(0),                                       0500
*     GPR01P PTR(31) REG(1),                                       0500
*     GPR14P PTR(31) REG(14),                                      0500
*     GPR15P PTR(31) REG(15);                                      0500
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0501
*     I031F FIXED(31) BASED,                                       0501
*     I031P PTR(31) BASED,                                         0501
*     I015F FIXED(15) BASED,                                       0501
*     I015P PTR(15) BASED,                                         0501
*     I008P PTR(8) BASED,                                          0501
*     I001C CHAR(1) BASED;                                         0501
*   END IGC0009F                                                   0502
*                                                                  0502
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IHAASXB )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHAFRRS )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHARB   )                                       */
*/*%INCLUDE SYSLIB  (IKJRB   )                                       */
*/*%INCLUDE SYSLIB  (IEARCTD )                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (IKJTAXE )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*                                                                  0502
*       ;                                                          0502
@DATA    DS    0H
@CH00166 DC    H'24'
@CH02417 DC    H'32767'
@SM02540 MVC   SDWAVRA(0,SDWAPTR),FRRWKAR1(FRRWKAR)
@DATD    DSECT
         DS    0F
IGC0009F CSECT
         DS    0F
@CF00037 DC    F'4'
@CF00053 DC    F'8'
@CF02533 DC    F'-32'
@CF02411 DC    XL4'00FF0000'
@CF02413 DC    XL4'FF00FFFF'
@CF02415 DC    XL4'00010000'
@DATD    DSECT
         DS    0D
IGC0009F CSECT
         NOPR  ((@ENDDATD-@DATD)*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
PROLOGA  DC    A(0)
RETABND  DC    AL4(ABEND1)
FRRMODID DC    CL24'IEAVAX00IGC0009FSTXFRR'
PATCHARA DC    12A(0)
@DATD    DSECT
          IKJTSB  LIST=YES              INVOKE TSB MAPPING MACRO
@DATD    DSECT
@ENDDATD EQU   *
IGC0009F CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
ASCBPTR  EQU   @07
RBSECPTR EQU   @05
SDWAPTR  EQU   @01
TAXEPTR  EQU   @03
TCBPTR   EQU   @04
STXPARM  EQU   @01
R0       EQU   @00
R1       EQU   @01
FRRWKAR  EQU   @02
R2       EQU   @02
R3       EQU   @03
R6       EQU   @06
CSWORD1  EQU   @08
CSWORD2  EQU   @09
R9       EQU   @09
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
RETADD   EQU   @14
RETCODE  EQU   @15
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR14P   EQU   @14
GPR15P   EQU   @15
ENTRPTR  EQU   @06
R5       EQU   @05
R8       EQU   @08
CVTPTR   EQU   16
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
ASCB     EQU   0
ASCBTSB  EQU   ASCB+60
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBASXB EQU   ASCB+108
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASXB     EQU   0
ASXBRCTD EQU   ASXB+120
ASXBAEQ  EQU   ASXB+168
ASXBSECR EQU   ASXB+199
ASCBSFLG EQU   ASXBSECR
ASXBCASW EQU   ASXB+216
ASXBCRB1 EQU   ASXBCASW
CVTMAP   EQU   0
CVT0VL00 EQU   CVTMAP+24
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
FRRS     EQU   0
FRRSHEAD EQU   FRRS
FRRSCURR EQU   FRRSHEAD+12
FRRSENTR EQU   0
FRRSFLGS EQU   FRRSENTR+4
FRRSFLG1 EQU   FRRSFLGS
RBPRFX   EQU   0
RBBASIC  EQU   0
RBEXRTNM EQU   RBBASIC
RBTMFLD  EQU   RBEXRTNM
RBSTAB   EQU   RBBASIC+10
XSTAB    EQU   RBSTAB
RBSTAB1  EQU   XSTAB
XSTAB1   EQU   RBSTAB1
RBFTCKPT EQU   XSTAB1
RBSTAB2  EQU   XSTAB+1
XSTAB2   EQU   RBSTAB2
RBTCBNXT EQU   XSTAB2
RBFACTV  EQU   XSTAB2
RBFDYN   EQU   XSTAB2
RBECBWT  EQU   XSTAB2
RBOPSW   EQU   RBBASIC+16
XRBPSW   EQU   RBOPSW
RBOPSWB2 EQU   XRBPSW+1
RBLINK   EQU   RBBASIC+28
XRBLNK   EQU   RBLINK
RBWCF    EQU   XRBLNK
RBLINKB  EQU   XRBLNK+1
RBGRSAVE EQU   RBBASIC+32
XRBREG   EQU   RBGRSAVE
RBGRS0   EQU   XRBREG
RBGRS1   EQU   XRBREG+4
RBGRS2   EQU   XRBREG+8
RBGRS3   EQU   XRBREG+12
RBGRS4   EQU   XRBREG+16
RBGRS5   EQU   XRBREG+20
RBGRS6   EQU   XRBREG+24
RBGRS7   EQU   XRBREG+28
RBGRS8   EQU   XRBREG+32
RBGRS9   EQU   XRBREG+36
RBGRS10  EQU   XRBREG+40
RBGRS11  EQU   XRBREG+44
RBGRS12  EQU   XRBREG+48
RBGRS13  EQU   XRBREG+52
RBGRS14  EQU   XRBREG+56
RBGRS15  EQU   XRBREG+60
XRBESA   EQU   RBBASIC+96
RBPREFIX EQU   0
RBRSV019 EQU   RBPREFIX+14
RBRSV028 EQU   RBPREFIX+15
RBRSV041 EQU   RBPREFIX+27
RBPRFXST EQU   RBPREFIX+32
RBRSV054 EQU   RBPREFIX+39
RBRTOPSW EQU   RBPREFIX+40
RBRTPSW2 EQU   RBRTOPSW+8
RBRTICIL EQU   RBRTPSW2
RBFLAGS1 EQU   RBPREFIX+56
RBINTCDA EQU   RBPREFIX+61
RBSECT   EQU   0
RBPPSAV  EQU   RBSECT
RBSIZE   EQU   RBSECT+8
@NM00040 EQU   RBSECT+10
@NM00041 EQU   @NM00040
RBFTP    EQU   @NM00041
RBTRSVRB EQU   @NM00041
RBATNXIT EQU   @NM00041
@NM00043 EQU   @NM00040+1
RBATTN   EQU   @NM00043
RBETXR   EQU   @NM00043
RBEP     EQU   RBSECT+12
RBPGMQ   EQU   RBSECT+24
@NM00050 EQU   RBSECT+28
IRBEND   EQU   RBSECT+96
@NM00054 EQU   RBSECT+96
RBRSV138 EQU   @NM00054+7
RBRSV150 EQU   RBSECT+167
RCTD     EQU   0
RCTDWORK EQU   RCTD+80
RCTDLMAC EQU   RCTDWORK
RCTDCLRL EQU   RCTDLMAC
RCTDTIME EQU   RCTDCLRL
RCTDCLST EQU   RCTD+154
RCTDECBS EQU   RCTD+156
RCTDWPTR EQU   RCTDECBS+4
RCTDTECB EQU   RCTD+164
RCTDTAXE EQU   RCTD+172
RCTDPIRL EQU   RCTD+176
RCTDSLST EQU   RCTD+192
RCTDRCTR EQU   RCTD+216
RCTDMOID EQU   RCTDRCTR
RCTDFLGS EQU   RCTDRCTR+1
RCTDINTF EQU   RCTD+220
RCTDRCTF EQU   RCTDINTF
SDWA     EQU   0
SDWAPARM EQU   SDWA
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAERRD EQU   SDWAFLGS+3
SDWAFMID EQU   SDWA+236
SDWAIOFS EQU   SDWA+238
SDWARTYA EQU   SDWA+240
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWARCDE EQU   SDWAPARQ
SDWAACF2 EQU   SDWAPARQ+1
SDWARCRD EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWAVRAL EQU   SDWARA
SDWADPVA EQU   SDWARA+2
SDWAURAL EQU   SDWARA+3
SDWAVRA  EQU   SDWARA+4
TAXE     EQU   0
TAXEIRB  EQU   TAXE
TAXEWORK EQU   TAXE+100
TIQEPARM EQU   TAXEWORK+4
TIQEIRB  EQU   TAXEWORK+8
TAXETCB  EQU   TAXEWORK+12
TAXELNK  EQU   TAXEWORK+17
TAXEEXIT EQU   TAXEWORK+24
TAXEPARM EQU   TAXEWORK+28
TAXESTAT EQU   TAXEPARM
TAXEFKEY EQU   TAXESTAT
TAXEFMOD EQU   TAXESTAT
TAXEFREQ EQU   TAXESTAT
TAXERESM EQU   TAXESTAT
TAXESCHD EQU   TAXESTAT
TAXESTAX EQU   TAXEPARM+1
TAXEIBUF EQU   TAXEWORK+36
TAXEUSER EQU   TAXEWORK+40
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBRBP   EQU   TCB
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBNTC   EQU   TCB+128
TCBOTC   EQU   TCB+132
TCBLTC   EQU   TCB+136
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
STXLIST  EQU   0
STXEXIT  EQU   STXLIST
STXISIZ  EQU   STXLIST+4
STXOSIZ  EQU   STXLIST+6
STXOBUF  EQU   STXLIST+8
STXIBUF  EQU   STXLIST+12
STXOPTS  EQU   STXLIST+16
STXRPLNO EQU   STXOPTS
STXDFRYS EQU   STXOPTS
STXDFRNO EQU   STXOPTS
STXATTON EQU   STXOPTS
STXATTOF EQU   STXOPTS
STXUSER  EQU   STXLIST+17
STXSAVE  EQU   STXLIST+20
VALIDITY EQU   0
ADDRRET  EQU   0
FRRWKAR1 EQU   0
FRRFLAGS EQU   FRRWKAR1
FRRDYSST EQU   FRRFLAGS
FRRDNST  EQU   FRRFLAGS
FRRDYNST EQU   FRRFLAGS
FRRTRESM EQU   FRRFLAGS
FRRTTBRP EQU   FRRFLAGS
FRRTTBDQ EQU   FRRFLAGS
FRRTTBQ  EQU   FRRFLAGS
FRRGTVCH EQU   FRRFLAGS+1
FRRRFVCH EQU   FRRFLAGS+1
FRRGTS1E EQU   FRRFLAGS+1
FRRRFS1E EQU   FRRFLAGS+1
FRRGTFM0 EQU   FRRFLAGS+1
FRRGTFM3 EQU   FRRFLAGS+1
FRRRFFM  EQU   FRRFLAGS+1
FRRGTGM5 EQU   FRRFLAGS+1
FRRRBPTR EQU   FRRWKAR1+4
NEWTAXE  EQU   FRRWKAR1+8
NEXTTAXE EQU   FRRWKAR1+12
TAXEPREV EQU   FRRWKAR1+16
FONDTAXE EQU   FRRWKAR1+20
I256C    EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
ASXBPTR  EQU   ASCBASXB
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTCRMN  EQU   CVTS01+156
CVTS1EE  EQU   CVTS01+172
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
PSARSVTE EQU   PSARSVT
PSACSTK  EQU   PSARSVTE
FRRSPTR  EQU   PSACSTK
FRREPTR  EQU   FRRSCURR
RBSECS03 EQU   RBEP
RBCDE    EQU   RBSECS03
RBCDFLGS EQU   RBCDE
RBSECS05 EQU   RBPGMQ
RBSQE    EQU   RBSECS05
RBSECS06 EQU   RBPGMQ
RBIQE    EQU   RBSECS06
RBSECS07 EQU   RBPGMQ
RBIQE2   EQU   RBSECS07
RBSECS08 EQU   IRBEND
RBSECS09 EQU   IRBEND
@NM00063 EQU   RCTDFLGS
@NM00065 EQU   RCTDFLGS
@NM00067 EQU   RCTDFLGS
@NM00069 EQU   RCTDFLGS
@NM00071 EQU   RCTDFLGS
@NM00132 EQU   XRBESA
RETADDSV EQU   @NM00132
RETCODSV EQU   @NM00132+4
@NM00133 EQU   RBOPSW
@NM00135 EQU   @NM00133+1
UKEY     EQU   @NM00135
USTATE   EQU   @NM00135
CSWORD3  EQU   TSBATTNC
FLC      EQU   PSA
*                                      START UNREFERENCED COMPONENTS
@NM00137 EQU   @NM00133+2
@NM00136 EQU   @NM00135
@NM00134 EQU   @NM00133
@NM00074 EQU   @NM00071+2
RCTDOPTC EQU   @NM00071+2
RCTDWTLC EQU   @NM00071+2
@NM00073 EQU   @NM00071+2
@NM00072 EQU   @NM00071+1
RCTDRLWB EQU   @NM00071+1
RCTDRLWC EQU   @NM00071+1
RCTDSTAC EQU   @NM00071+1
RCTDWTLB EQU   @NM00071+1
RCTDRIOC EQU   @NM00071+1
RCTDRSLW EQU   @NM00071
RCTDFAIL EQU   @NM00071
RCTDSY18 EQU   @NM00071
RCTDSY19 EQU   @NM00071
RCTDRLLK EQU   @NM00071
RCTDSTAT EQU   @NM00071
RCTDOBLK EQU   @NM00071
RCTDRS17 EQU   @NM00071
@NM00070 EQU   @NM00069+2
RCTDRGL1 EQU   @NM00069+2
RCTDOGL1 EQU   @NM00069+2
RCTDRLL2 EQU   @NM00069+2
RCTDOLL2 EQU   @NM00069+2
RCTDSWPF EQU   @NM00069+2
RCTDSYBC EQU   @NM00069+1
RCTDPRGF EQU   @NM00069+1
RCTDSLFL EQU   @NM00069+1
RCTDQWAI EQU   @NM00069+1
RCTDSWOT EQU   @NM00069+1
RCTDSSRB EQU   @NM00069+1
RCTDSSUB EQU   @NM00069+1
RCTDSY13 EQU   @NM00069+1
RCTDPSRB EQU   @NM00069
RCTDDEQ  EQU   @NM00069
RCTDSV16 EQU   @NM00069
RCTDSY12 EQU   @NM00069
RCTDPSUB EQU   @NM00069
RCTDRLL1 EQU   @NM00069
RCTDOLL1 EQU   @NM00069
RCTDENQ  EQU   @NM00069
@NM00068 EQU   @NM00067
RCTDPMSG EQU   @NM00067
RCTDAFPC EQU   @NM00067
RCTDAFPE EQU   @NM00067
@NM00066 EQU   @NM00065
RCTDCANE EQU   @NM00065
RCTDDETD EQU   @NM00065
RCTDDETS EQU   @NM00065
RCTDRES4 EQU   @NM00065
@NM00064 EQU   @NM00063
RCTDBR2A EQU   @NM00063
RCTDBR2R EQU   @NM00063
RCTDBR2Q EQU   @NM00063
RCTDBR2T EQU   @NM00063
RCTDLOOP EQU   @NM00063
RCTDWAIT EQU   @NM00063
RBRSV161 EQU   RBSECS09+64
RBSIRBWA EQU   RBSECS09
RBIQEWRK EQU   RBSECS08+4
RBNEXAV  EQU   RBSECS08
RBIQEA   EQU   RBIQE2
RBIQE1   EQU   RBIQE+1
RBUSE    EQU   RBIQE
RBSQEA   EQU   RBSQE+1
@NM00055 EQU   RBSQE
RBCDE1   EQU   RBCDE+1
RBCDLOAD EQU   RBCDFLGS
RBCDXCTL EQU   RBCDFLGS
RBCDSYNC EQU   RBCDFLGS
RBCDNODE EQU   RBCDFLGS
RBCDSAVE EQU   RBCDFLGS
RBCDATCH EQU   RBCDFLGS
RBRSV009 EQU   RBCDFLGS
RBNOCELL EQU   RBCDFLGS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
@NM00139 EQU   FRRFLAGS+2
@NM00138 EQU   FRRFLAGS
@NM00131 EQU   STXOPTS
@NM00130 EQU   STXOPTS
@NM00129 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBCAUF  EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00128 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBACTIV EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBCCPVI EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBRSV96 EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBRV306 EQU   TCB+240
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00127 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00126 EQU   TCBPMASK
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
TAXEEND  EQU   TAXE+144
TAXETAIE EQU   TAXEWORK+32
@NM00125 EQU   TAXESTAT
TAXEATTN EQU   TAXESTAT
@NM00124 EQU   TAXEWORK+20
@NM00123 EQU   TAXEWORK+16
TIQELNK  EQU   TAXEWORK
TAXENIQE EQU   TAXE+96
@NM00122 EQU   SDWA+512
@NM00121 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
@NM00120 EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00119 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00118 EQU   SDWADDAT+3
@NM00117 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00116 EQU   SDWADDAT+1
@NM00115 EQU   SDWASDAT
SDWAQQS  EQU   SDWASDAT
SDWACBS  EQU   SDWASDAT
SDWAGTF  EQU   SDWASDAT
SDWASWA  EQU   SDWASDAT
SDWALSQA EQU   SDWASDAT
SDWASQA  EQU   SDWASDAT
SDWANUC  EQU   SDWASDAT
@NM00114 EQU   SDWADUMP+2
@NM00113 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00112 EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWAREXN EQU   SDWARECP+16
SDWACSCT EQU   SDWARECP+8
SDWAMODN EQU   SDWARECP
@NM00111 EQU   SDWA+290
SDWAASID EQU   SDWA+288
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00110 EQU   SDWAACF3
@NM00109 EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
@NM00108 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00107 EQU   SDWAACF2
SDWALCPU EQU   SDWACPUA+2
@NM00106 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
@NM00105 EQU   SDWA+239
@NM00104 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
@NM00103 EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
SDWACLUP EQU   SDWAERRD
@NM00102 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAPERC EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00101 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWAMCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00100 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00099 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00098 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00097 EQU   SDWAINC2
@NM00096 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00095 EQU   SDWAILC2
@NM00094 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00093 EQU   SDWANXT2
@NM00092 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00091 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00090 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00089 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00088 EQU   SDWAINC1
@NM00087 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00086 EQU   SDWAILC1
@NM00085 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00084 EQU   SDWANXT1
@NM00083 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00082 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00081 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00080 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00079 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00078 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00077 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
SDWACMPC EQU   SDWAABCC+1
@NM00076 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00075 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAREQ  EQU   SDWACMPF
RCTDEND  EQU   RCTD+240
RCTDRES1 EQU   RCTD+224
RCTDRES5 EQU   RCTDINTF+1
@NM00062 EQU   RCTDRCTF
RCTDDLCK EQU   RCTDRCTF
RCTDSRBN EQU   RCTDRCTF
RCTDPRGR EQU   RCTDRCTF
RCTDSUBN EQU   RCTDRCTF
RCTDRSBO EQU   RCTDRCTF
@NM00061 EQU   RCTDFLGS
RCTDBRCP EQU   RCTDFLGS
RCTDATTS EQU   RCTDFLGS
RCTDRES3 EQU   RCTDFLGS
RCTDATTD EQU   RCTDFLGS
@NM00060 EQU   RCTDMOID
RCTDDUMP EQU   RCTDMOID
RCTDTERM EQU   RCTDMOID
RCTDATTN EQU   RCTDMOID
RCTDREST EQU   RCTDMOID
RCTDQUIS EQU   RCTDMOID
RCTDCOMN EQU   RCTDMOID
RCTDINIT EQU   RCTDMOID
RCTDSCLR EQU   RCTDSLST
RCTDRTY@ EQU   RCTD+188
RCTDRTRY EQU   RCTD+184
RCTDRC   EQU   RCTD+180
RCTDBASE EQU   RCTDPIRL+1
@NM00059 EQU   RCTDPIRL
RCTDRET@ EQU   RCTD+168
@NM00058 EQU   RCTDTECB
RCTDPOST EQU   RCTDTECB
@NM00057 EQU   RCTDTECB
RCTDECBE EQU   RCTDWPTR
RCTDTPTR EQU   RCTDECBS
RCTDRES2 EQU   RCTD+152
RCTDPRG  EQU   RCTDCLRL+8
@NM00056 EQU   RCTDTIME+4
RCTDTMLH EQU   RCTDTIME
RCTDTCBS EQU   RCTD+76
RCTDTCBD EQU   RCTD+72
RCTDISAV EQU   RCTD
RCTDBEGN EQU   RCTD
SIRBEND  EQU   RBSECT+168
SVRBEND  EQU   RBSECT+168
RBRSV158 EQU   RBRSV150
RBRSV157 EQU   RBRSV150
RBRSV156 EQU   RBRSV150
RBRSV155 EQU   RBRSV150
RBRSV154 EQU   RBRSV150
RBRSV153 EQU   RBRSV150
RBRSV152 EQU   RBRSV150
RBRSV151 EQU   RBRSV150
RBRSV149 EQU   RBSECT+166
RBRSV148 EQU   RBSECT+164
RBSCBB   EQU   RBSECT+144
TIRBEND  EQU   @NM00054+8
PRBEND   EQU   @NM00054+8
RBRSV146 EQU   RBRSV138
RBRSV145 EQU   RBRSV138
RBRSV144 EQU   RBRSV138
RBRSV143 EQU   RBRSV138
RBRSV142 EQU   RBRSV138
RBRSV141 EQU   RBRSV138
RBRSV140 EQU   RBRSV138
RBRSV139 EQU   RBRSV138
RBRSV137 EQU   @NM00054+6
RBRSV136 EQU   @NM00054+4
RBRSV135 EQU   @NM00054
@NM00053 EQU   RBSECT+32
@NM00052 EQU   @NM00050+1
@NM00051 EQU   @NM00050
RBPGMQ1  EQU   RBPGMQ+1
@NM00049 EQU   RBPGMQ
@NM00048 EQU   RBSECT+16
@NM00047 EQU   @NM00043
@NM00046 EQU   @NM00043
RBIQETP  EQU   @NM00043
RBUSIQE  EQU   RBETXR
@NM00045 EQU   @NM00043
@NM00044 EQU   @NM00043
RBPMSVRB EQU   @NM00041
@NM00042 EQU   @NM00041
RBWAITP  EQU   @NM00041
RBFNSVRB EQU   RBTRSVRB
RBABOPSW EQU   RBSECT+4
RBPPSAV1 EQU   RBPPSAV+1
@NM00039 EQU   RBPPSAV
RBPRFXND EQU   RBPREFIX+64
RBINTCOD EQU   RBINTCDA+1
RBINLNTH EQU   RBINTCDA
RBWCSA   EQU   RBPREFIX+60
RBRSV004 EQU   RBPREFIX+57
RBSSSYN  EQU   RBFLAGS1
RBSCB    EQU   RBFLAGS1
RBLONGWT EQU   RBFLAGS1
RBASIR   EQU   RBFLAGS1
RBRSV159 EQU   RBFLAGS1
RBABEND  EQU   RBFLAGS1
RBXWAIT  EQU   RBFLAGS1
RBSLOCK  EQU   RBFLAGS1
RBRTRAN  EQU   RBRTPSW2+4
RBRTINCD EQU   RBRTICIL+2
RBRTILC  EQU   RBRTICIL+1
RBRSV160 EQU   RBRTICIL
RBRTPSW1 EQU   RBRTOPSW
RBRSV062 EQU   RBRSV054
RBRSV061 EQU   RBRSV054
RBRSV060 EQU   RBRSV054
RBRSV059 EQU   RBRSV054
RBRSV058 EQU   RBRSV054
RBRSV057 EQU   RBRSV054
RBRSV056 EQU   RBRSV054
RBRSV055 EQU   RBRSV054
RBRSV053 EQU   RBPREFIX+38
RBRSV052 EQU   RBPREFIX+36
RBRSV051 EQU   RBPREFIX+32
RBRSV050 EQU   RBPREFIX+28
RBRSV049 EQU   RBRSV041
RBRSV048 EQU   RBRSV041
RBRSV047 EQU   RBRSV041
RBRSV046 EQU   RBRSV041
RBRSV045 EQU   RBRSV041
RBRSV044 EQU   RBRSV041
RBRSV043 EQU   RBRSV041
RBRSV042 EQU   RBRSV041
RBRSV040 EQU   RBPREFIX+26
RBRSV039 EQU   RBPREFIX+24
RBRSV038 EQU   RBPREFIX+20
RBRSV037 EQU   RBPREFIX+16
RBRSV036 EQU   RBRSV028
RBRSV035 EQU   RBRSV028
RBRSV034 EQU   RBRSV028
RBRSV033 EQU   RBRSV028
RBRSV032 EQU   RBRSV028
RBRSV031 EQU   RBRSV028
RBRSV030 EQU   RBRSV028
RBRSV029 EQU   RBRSV028
RBRSV027 EQU   RBRSV019
RBRSV026 EQU   RBRSV019
RBRSV025 EQU   RBRSV019
RBRSV024 EQU   RBRSV019
RBRSV023 EQU   RBRSV019
RBRSV022 EQU   RBRSV019
RBRSV021 EQU   RBRSV019
RBRSV020 EQU   RBRSV019
RBRSV018 EQU   RBPREFIX+13
RBRSV017 EQU   RBPREFIX+12
RBSRV016 EQU   RBPREFIX+11
RBRSV015 EQU   RBPREFIX+10
RBRSV014 EQU   RBPREFIX+8
RBRSV013 EQU   RBPREFIX+4
RBRSV012 EQU   RBPREFIX
RBEXSAVE EQU   XRBESA
XRBREG15 EQU   RBGRS15
XRBREG14 EQU   RBGRS14
XRBREG13 EQU   RBGRS13
XRBREG12 EQU   RBGRS12
XRBREG11 EQU   RBGRS11
XRBREG10 EQU   RBGRS10
XRBREG9  EQU   RBGRS9
XRBREG8  EQU   RBGRS8
XRBREG7  EQU   RBGRS7
XRBREG6  EQU   RBGRS6
XRBREG5  EQU   RBGRS5
XRBREG4  EQU   RBGRS4
XRBREG3  EQU   RBGRS3
XRBREG2  EQU   RBGRS2
XRBREG1  EQU   RBGRS1
XRBREG0  EQU   RBGRS0
XRBLNKA  EQU   RBLINKB
XRBWT    EQU   RBWCF
@NM00038 EQU   RBBASIC+24
RBOPSWPS EQU   RBOPSWB2
@NM00037 EQU   RBOPSWB2
@NM00036 EQU   XRBPSW
@NM00035 EQU   RBBASIC+12
XRBWAIT  EQU   RBECBWT
XRBFRRB  EQU   RBFDYN
@NM00034 EQU   XSTAB2
XRBACTV  EQU   RBFACTV
XRBTCBP  EQU   RBTCBNXT
@NM00033 EQU   XSTAB1
XRBCKPT  EQU   RBFTCKPT
@NM00032 EQU   XSTAB1
@NM00031 EQU   RBBASIC+8
@NM00030 EQU   RBEXRTNM+1
RBTMIND3 EQU   RBTMFLD
RBTMIND2 EQU   RBTMFLD
RBTMCMP  EQU   RBTMFLD
RBWLIM   EQU   RBTMFLD
RBRSV005 EQU   RBTMFLD
RBTMTOD  EQU   RBTMFLD
RBTMQUE  EQU   RBTMFLD
@NM00029 EQU   RBPRFX
FRRSPARM EQU   FRRSENTR+8
@NM00004 EQU   FRRSFLGS+1
@NM00003 EQU   FRRSFLG1
FRRSNEST EQU   FRRSFLG1
FRRSRCUR EQU   FRRSFLG1
FRRSFRRA EQU   FRRSENTR
FRRSENTS EQU   FRRS+84
FRRSRTMW EQU   FRRS+16
FRRSELEN EQU   FRRSHEAD+8
FRRSLAST EQU   FRRSHEAD+4
FRRSEMP  EQU   FRRSHEAD
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00002 EQU   CVTFIX+248
@NM00001 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
ASXBEND  EQU   ASXB+232
ASXBRV25 EQU   ASXB+228
ASXBRV24 EQU   ASXB+224
ASXBPT0E EQU   ASXB+220
ASXBCRB4 EQU   ASXBCASW+3
ASXBCRB3 EQU   ASXBCASW+2
ASXBCRB2 EQU   ASXBCASW+1
ASXBCR06 EQU   ASXBCRB1
ASXBCR05 EQU   ASXBCRB1
ASXBCR04 EQU   ASXBCRB1
ASXBCR03 EQU   ASXBCRB1
ASXBCR02 EQU   ASXBCRB1
ASXBCR01 EQU   ASXBCRB1
ASXBTFD  EQU   ASXBCRB1
ASXBPIP  EQU   ASXBCRB1
ASXBCTDC EQU   ASXB+212
ASXBTDCB EQU   ASXB+208
ASXBRV19 EQU   ASXB+204
ASXBSENV EQU   ASXBSECR+1
ASXBRV34 EQU   ASCBSFLG
ASXBRV33 EQU   ASCBSFLG
ASXBRV32 EQU   ASCBSFLG
ASXBRV31 EQU   ASCBSFLG
ASXBRV30 EQU   ASCBSFLG
ASXBRV29 EQU   ASCBSFLG
ASXBRV28 EQU   ASCBSFLG
ASXBRV27 EQU   ASCBSFLG
ASXBUSER EQU   ASXB+192
ASXBLSRB EQU   ASXBAEQ+20
ASXBFSRB EQU   ASXBAEQ+16
ASXBLRQE EQU   ASXBAEQ+12
ASXBFRQE EQU   ASXBAEQ+8
ASXBLIQE EQU   ASXBAEQ+4
ASXBFIQE EQU   ASXBAEQ
ASXBETSK EQU   ASXB+164
ASXBSIRB EQU   ASXB+160
ASXBPSWD EQU   ASXB+152
ASXBPRG  EQU   ASXB+136
ASXBRV26 EQU   ASXB+132
ASXBOUSB EQU   ASXB+128
ASXBDDR  EQU   ASXB+124
ASXBRSMD EQU   ASXB+116
ASXBSPSA EQU   ASXB+112
ASXBFRWA EQU   ASXB+108
ASXBFLSA EQU   ASXB+36
ASXBIHSA EQU   ASXB+32
ASXBRV15 EQU   ASXB+28
ASXBRV14 EQU   ASXB+24
ASXBLWA  EQU   ASXB+20
ASXBMPST EQU   ASXB+16
ASXBRS00 EQU   ASXB+14
ASXBTCBS EQU   ASXB+12
ASXBLTCB EQU   ASXB+8
ASXBFTCB EQU   ASXB+4
ASXBASXB EQU   ASXB
ASXBEGIN EQU   ASXB
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBLGCB EQU   ASCB+180
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBCMSB EQU   ASCB+132
ASCBCMSF EQU   ASCB+128
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBQSVC EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBCSCB EQU   ASCB+56
ASCBRSM  EQU   ASCB+52
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBLSLQ EQU   ASCB+24
ASCBFSLQ EQU   ASCB+20
ASCBIOSP EQU   ASCB+16
ASCBLOCK EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
@NM00028 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00027 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00026 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00025 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSAULCMS EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00024 EQU   FLCFSA
@NM00023 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00022 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00021 EQU   FLCIOA
@NM00020 EQU   FLCMCLA+15
@NM00019 EQU   FLCMCLA+14
@NM00018 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00017 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00016 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00015 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00014 EQU   FLCPER
@NM00013 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00012 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00011 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00010 EQU   FLCPIILC
@NM00009 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00008 EQU   FLCSVILC
@NM00007 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00006 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00005 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
*                                      END UNREFERENCED COMPONENTS
@RT00129 EQU   ENDSTAX
@RC00140 EQU   @RC00138
@RF00254 EQU   @RC00248
@RF00245 EQU   @RC00094
@RC00191 EQU   @RC00094
@RF00322 EQU   @EL00003
@RF00362 EQU   TCBLOOP
@RC00412 EQU   @EL00006
@PB00006 EQU   @EL00001
@PB00005 EQU   @PB00006
@RC00475 EQU   @RC00412
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IGC0009F,(C'PLS2112',0801,78212)
