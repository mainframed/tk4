         TITLE 'IEFAB490 - FINISHUP AND CLEANUP ALLOC                  *
                        '
IEFAB490 CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'IEFAB490  77.020'                              01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @12,0                                            01S0001
@PSTART  LA    @11,4095(,@12)                                   01S0001
         USING @PSTART,@12                                      01S0001
         USING @PSTART+4095,@11                                 01S0001
         L     @00,@SIZDATD                                     01S0001
         GSPACE   R,LV=(0)
         LR    @10,@01                                          01S0001
         USING @DATD,@10                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         LM    @00,@01,20(@13)                                  01S0001
         ST    @10,8(,@13)                                      01S0001
         LR    @13,@10                                          01S0001
         MVC   @PC00001(12),0(@01)                              01S0001
JSCBDISP EQU 188
JSCBAOS1 EQU  72
JSCBAOS2 EQU 192
*                              CATALOG ALLOCATION ISSUE CALL    01S0106
*                              IEFAB4F5                      @Z40FPPJ*/
*RTNCODE = SUCCESS;                    /*INITIALIZE RETURN CODE      */
         SLR   RTNCODE,RTNCODE                                  01S0107
*CLENUPFM = INDICATE;                  /*COPY INDICATORS FROM ALCWA  */
         L     @06,@PC00001                                     01S0108
         L     @06,ALCWAPTR(,@06)                               01S0108
         MVC   CLENUPFM(1),INDICATE(@06)                        01S0108
*SIOT1PTR = SIOT1P;                    /*SAVE FIRST SIOTPTR FOR 01S0109
*                                        GETDEVT             @ZA03279*/
         L     @06,SIOT1P(,@06)                                 01S0109
         ST    @06,SIOT1PTR                                     01S0109
*IF INPUTRC=SUCCESS &                                           01S0110
*   RTNCODE=SUCCESS &                                           01S0110
*   (REQUSW=ON × RETRYSW=ON) THEN/*                             01S0110
*                                        IS ALLOC TO BE REDONE       */
         SLR   @15,@15                                          01S0110
         L     @14,@PC00001+4                                   01S0110
         C     @15,INPUTRC(,@14)                                01S0110
         BNE   @RF00110                                         01S0110
         CR    RTNCODE,@15                                      01S0110
         BNE   @RF00110                                         01S0110
         TM    REQUSW,B'01100000'                               01S0110
         BZ    @RF00110                                         01S0110
*  DO;                                                          01S0111
         ST    @06,@TF00001                                     01S0111
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - FINISALC                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - FINISH ALLOCATION PROCESSING - RETRY,REQU     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE DOES THE FOLLOWING:                             */
*/*       .THE COMMON UNALLOCATION ROUTINE (IEFAB4A0)                */
*/*        IS CALLED TO UNALLOCATE ANY REQUESTS NOT FULLY ALLOCATED  */
*/*        TO MAIN-PATH DEVICES. (SEE SEGMENT 'BACKOUT')             */
*/*        NEXT, THE PARAMETERS ARE SET UP TO RECALL THE COMMON      */
*/*        ALLOCATION RTN (IEFAB421).                                */
*/*                                                                  */
*/*   OPERATION - (THE OPERATION IS DOCUMENTED BY THE CODE ITSELF)   */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     ALCWAPTR - PTR TO ALLOCATION WORK AREA, WHICH CONTAINS:      */
*/*       WAITSW - WAIT HOLDING RESOURCES INDICATOR                  */
*/*       RETRYSW - RETRY ALLOCATION INDICATOR                       */
*/*       FMAPPTR - PTR TO COMMON ALLOCATION FUNCTION MAP            */
*/*       SIOT1P - PTR TO FIRST SIOT IN CHAIN                        */
*/*       JSCBPTR - PTR TO JSCB                                      */
*/*       IOSLUTP - PTR TO IOS UCB LOOKUP TABLE                      */
*/*       TCBP - PTR TO TCB                                          */
*/*       TIOTHDRP - PTR TO JOB, STEP AND PROCSTEP NAMES             */
*/*       FAILRSCP - PTR TO STEP REASON CODE AREA                    */
*/*       SSERBLKP - PTR TO SUBSYSTEM ERROR BLOCK            @G29AN2F*/
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITIONS - FUNCTION COMPLETED SUCCESSFULLY.                  */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*     .IF WAIT-WITHOUT-RESOURCES OR RETRY , NON-MAIN-PATH REQS ARE */
*/*      UNALLOCATED (VIA IEFAB4A0) AND PARAMETERS                   */
*/*      ARE SETUP FOR RECALLING IEFAB421.                           */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE SET TO 0                                */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE)                               */
*/*                                                                  */
*/*   CONDITIONS - GETMAIN ERROR                                     */
*/*                                                                  */
*/*   OUTPUT - STEP REASON CODE 'REASONCD' SET TO 2                  */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE SET TO 4                                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - BACKOUT                                           */
*/*                                                                  */
*/* DESCRIPTIVE NAME - UNALLOCATE REQS FOR RETRY OR REQUEUE          */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE UNALLOCATES ALL REQUESTS NOT FULLY ALLOCATED    */
*/*     TO MAIN-PATH DEVICES.                                        */
*/*                                                                  */
*/*   OPERATION - THIS ROUTINE GETS ENOUGH CORE FOR UNALLOCATION     */
*/*               RB'S AND TO SAVE THE DEVICE TYPE FOR EACH  @YM05565*/
*/*               SIOT. THE SIOTS ARE THEN SCANNED           @YM05565*/
*/*               UNTIL ON 1 SCAN NO NEW REQS TO UNALLOCATE ARE      */
*/*               FOUND. ONLY ON THE FIRST SCAN OF THE SIOTS ARE     */
*/*               SIOTS NOT ALLOCATED TO MAIN PATH DEVICES DETECTED; */
*/*               ON SUBSEQUENT PASSES, REQS WITH AFFINITY TO REQS   */
*/*               BEING UNALLOCATED ARE NOTED.                       */
*/*               IF ANY REQUESTS ARE TO BE UNALLOCATED,     @YM07772*/
*/*               SEGMENT CLEARFF IS INVOKED TO CLEAR ANY    @YM07772*/
*/*               FF VOLSERS WHICH MAY BE IN UCB'S BEING     @YM07772*/
*/*               UNALLOCATED.                               @YM07772*/
*/*               IF ANY REQS ARE TO BE UNALLOCATED, IEFAB4A0 IS     */
*/*               CALLED BY INCLUDED SEGMENT INVOKCU.                */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     SIOT1P - PTR TO THE FIRST SIOT IN THE CHAIN                  */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITIONS - FUNCTION COMPLETED SUCCESSFULLY                   */
*/*                                                                  */
*/*   OUTPUT - NON-MAIN-PATH REQS UNALLOCATED                        */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE SET TO 0                                */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE)                               */
*/*                                                                  */
*/*   CONDITIONS - GETMAIN ERROR                                     */
*/*                                                                  */
*/*   OUTPUT - STEP REASON CODE 'REASONCD' SET TO 2                  */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE SET TO 4                                */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE)                               */
*/*                                                                  */
*/*   CONDITIONS - ERROR DETECTED BY MODULE IEFAB4A0                 */
*/*                                                                  */
*/*   OUTPUT - STEP-RELATED REASON CODE (REASONCD) SET TO 18         */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE SET TO 4                                */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE)                               */
*/*                                                                  */
*/*   CONDITIONS - NON-0 RETURN CODE FROM IEFAB4A0                   */
*/*                                                                  */
*/*   OUTPUT - DD-RELATED REASON CODE (SIOTRSNC) SET TO 55           */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE SET TO 4                                */
*/*                                                                  */
*/********************************************************************/
*SIOTPTR = SIOT1P;                     /*POINT TO FIRST SIOT IN CHAIN*/
         L     SIOTPTR,@TF00001                                 03S0112
*DO NUMUNALS = 1 BY 1 WHILE SIOTPTR^=ZERO; /*COUNT ALL SIOTS         */
         LA    @07,1                                            03S0113
         ST    @07,NUMUNALS                                     03S0113
         B     @DE00113                                         03S0113
@DL00113 DS    0H                                               03S0114
*  SIOTPTR = SIOTNPTR;                                          03S0114
         L     SIOTPTR,SIOTNPTR(,SIOTPTR)                       03S0114
*END;                                                           03S0115
         LA    @07,1                                            03S0115
         AL    @07,NUMUNALS                                     03S0115
         ST    @07,NUMUNALS                                     03S0115
@DE00113 LTR   SIOTPTR,SIOTPTR                                  03S0115
         BNZ   @DL00113                                         03S0115
*RBSIZE = (NUMUNALS-1) * (LENGTH(CMUNRB) /*SIZE OF UNAL RB'S @YM05565*/
*                      + LENGTH(SAVEDEVT)); /*& FOR DEV TYPE @YM05565*/
         L     @08,NUMUNALS                                     03S0116
         BCTR  @08,0                                            03S0116
         MH    @08,@CH00246                                     03S0116
         ST    @08,RBSIZE                                       03S0116
* /* ?GETSTORG (SPID,RBSIZE,FRBPTR);*/                          03S0117
*   /* DEFINITIONS OF GETMAIN PARMS */                          03S0117
*   DCL                                                         03S0117
*     GTSTR0   FIXED(31) REG(0),/*GTMN PARM REG*/               03S0117
*     GTSTR1   FIXED(31) REG(1),/*GTMN PARM REG*/               03S0117
*     GTSTR2   PTR(31)   REG(2),/*GTMN PARM REG*/               03S0117
*     GTSTR15  FIXED(31) REG(15),/*GTMN RET COD*/               03S0117
*     GTSTRTCD FIXED(31); /* GETMAIN RTN CODE  */               03S0117
*   DCL                                                         03S0118
*     GTSTR3   FIXED(31) REG(3),/* CLEARING REG*/               03S0118
*     GTSTR4   FIXED(31) REG(4),/* CLEARING REG*/               03S0118
*     GTSTR5   FIXED(31) REG(5),/* CLEARING REG*/               03S0118
*     GTSTR6   FIXED(31) REG(6),/* CLEARING REG*/               03S0118
*     GTSTR7   FIXED(31) REG(7),/* CLEARING REG*/               03S0118
*     GTSTR8   FIXED(31) REG(8),/* CLEARING REG*/               03S0118
*     GTSTZERO FIXED(31) INIT(0),                               03S0118
*     GTST253  FIXED(31) CONSTANT(253);                         03S0118
*   RFY (GTSTR0,GTSTR1,GTSTR2) RSTD; /*SAVE RGS*/               03S0119
*   GTSTR0 = RBSIZE; /* SET AMOUNT*/                            03S0120
         LR    GTSTR0,@08                                       03S0120
*   GTSTR2 = SPID; /* SET SUBPOOL*/                             03S0121
         LA    GTSTR2,230                                       03S0121
*   GENERATE CODE;                                              03S0122
     GETMAIN RC,LV=(0),SP=(2)  DO GETMAIN
*   GTSTRTCD = GTSTR15; /* SAVE GETMAIN RET COD*/               03S0123
         LR    GTSTRTCD,GTSTR15                                 03S0123
*   FRBPTR = GTSTR1; /* ADDR OF GOTN STORG*/                    03S0124
         ST    GTSTR1,FRBPTR                                    03S0124
*   RFY (GTSTR0,GTSTR1,GTSTR2) UNRSTD; /*RLSE */                03S0125
*   IF GTSTRTCD = 0 THEN /*GETMAIN SUCCESSFUL? */               03S0126
         LTR   GTSTRTCD,GTSTRTCD                                03S0126
         BNZ   @RF00126                                         03S0126
*     DO;               /* YES, CLEAR STORAGE.*/                03S0127
*       RFY (GTSTR2,GTSTR4,GTSTR5,GTSTR6,                       03S0128
*                          GTSTR7,GTSTR8) RSTD;                 03S0128
*       GTSTR4 = FRBPTR; /*STORG PTR*/                          03S0129
         L     @03,FRBPTR                                       03S0129
         LR    GTSTR4,@03                                       03S0129
*       GTSTR5 = RBSIZE; /*STORG AMNT*/                         03S0130
         L     GTSTR5,RBSIZE                                    03S0130
*       GTSTR7 = '00000000'X; /*PAD CHAR & LNTH*/               03S0131
         SLR   GTSTR7,GTSTR7                                    03S0131
*       IF SPID = GTST253 THEN                                  03S0132
         B     @RF00132                                         03S0132
*      GEN                                                      03S0133
*   (MODESET KEYADDR=GTSTZERO,SAVEKEY=(2),WORKREG=8);           03S0133
         MODESET KEYADDR=GTSTZERO,SAVEKEY=(2),WORKREG=8
*       GEN REFS(GTSTR4,GTSTR6);                                03S0134
@RF00132 DS    0H                                               03S0134
          MVCL  GTSTR4,GTSTR6 CLEAR GOTTEN STORG
*       IF SPID = GTST253 THEN                                  03S0135
         B     @RF00135                                         03S0135
*         GEN (MODESET KEYADDR=(2));                            03S0136
         MODESET KEYADDR=(2)
*       RFY (GTSTR2,GTSTR4,GTSTR5,GTSTR6,                       03S0137
*                          GTSTR7,GTSTR8) UNRSTD;               03S0137
@RF00135 DS    0H                                               03S0138
*     END;       /* STORAGE CLEARING COMPLETED */               03S0138
*   ELSE                                                        03S0139
*   FRBPTR= 0;   /* CLEAR RETURN ADDR. */                       03S0139
         B     @RC00126                                         03S0139
@RF00126 SLR   @08,@08                                          03S0139
         ST    @08,FRBPTR                                       03S0139
*   GTSTR15 = GTSTRTCD;    /* GTMN RETURN CODE */               03S0140
@RC00126 LR    GTSTR15,GTSTRTCD                                 03S0140
*                                      /* RESTORE LIST PRINT STATUS  */
*      /*GET CORE                    */                         03S0141
*RTNCODE = REG15;                      /*SAVE THE RETURN CODE        */
         LR    RTNCODE,REG15                                    03S0141
*IF RTNCODE = SUCCESS THEN             /*ANY ERRORS ?                */
         LTR   RTNCODE,RTNCODE                                  03S0142
         BNZ   @RF00142                                         03S0142
*  DO;                                 /*NO, CONTINUE UNALLOC PROCESS*/
*    CMRBPTR = FRBPTR;                                          03S0144
         L     @06,FRBPTR                                       03S0144
         LR    CMRBPTR,@06                                      03S0144
*    SDEVTPTR = FRBPTR + (NUMUNALS-1)                           03S0145
*                      * LENGTH(CMUNRB); /*CORE FOR SAVING DEVICE
*                                        TYPE                @YM05565*/
         L     SDEVTPTR,NUMUNALS                                03S0145
         BCTR  SDEVTPTR,0                                       03S0145
         SLA   SDEVTPTR,4                                       03S0145
         ALR   @06,SDEVTPTR                                     03S0145
         LR    SDEVTPTR,@06                                     03S0145
*    NEWUNALS = ON;                    /*SCAN SIOTS AT LEAST ONCE    */
         OI    NEWUNALS,B'10000000'                             03S0146
*    ONLYAFFS = OFF;                                            03S0147
         NI    ONLYAFFS,B'01111111'                             03S0147
*    DO WHILE NEWUNALS = ON;           /*SCAN SIOTS UNTIL NO MORE
*                                        REQS TO UNALLOC FOUND       */
         B     @DE00148                                         03S0148
@DL00148 DS    0H                                               03S0149
*      NEWUNALS = OFF;                                          03S0149
         NI    NEWUNALS,B'01111111'                             03S0149
*      SIOTPTR = SIOT1P;               /*POINT TO FIRST SIOT IN CHAIN*/
         L     @05,@PC00001                                     03S0150
         L     @05,ALCWAPTR(,@05)                               03S0150
         L     SIOTPTR,SIOT1P(,@05)                             03S0150
*      DO WHILE SIOTPTR ^= ZERO;       /*SCAN ALL SIOTS              */
         B     @DE00151                                         03S0151
@DL00151 DS    0H                                               03S0152
*        IF SVOLUNAD ^= ZERO           /*VU ENTRY EXISTS     @YM08253*/
*            & SVOLUNAD -> VUUNALSW = OFF /*NON-VAM/SUBSYSTEM,DUMMY  */
*            & SIOVAMDS=OFF            /*...AND PART ALLOCATED ?     */
*            & SIOTSSDS=OFF                                     03S0152
*            & SCTDUMMY = OFF THEN                              03S0152
         L     @05,SVOLUNAD(,SIOTPTR)                           03S0152
         LTR   @05,@05                                          03S0152
         BZ    @RF00152                                         03S0152
         TM    VUUNALSW(@05),B'00001000'                        03S0152
         BNZ   @RF00152                                         03S0152
         TM    SIOVAMDS(SIOTPTR),B'00100000'                    03S0152
         BNZ   @RF00152                                         03S0152
         TM    SIOTSSDS(SIOTPTR),B'10000000'                    03S0152
         BNZ   @RF00152                                         03S0152
         TM    SCTDUMMY(SIOTPTR),B'10000000'                    03S0152
         BNZ   @RF00152                                         03S0152
*          DO;                         /*YES,BUILD UNAL RB IF NEEDED */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - BUILDURB                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - BUILD UNALLOCATION REQUEST BLOCK              */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE DETERMINES IF THE INPUT SIOT SHOULD BE          */
*/*     UNALLOCATED  (NOT FULLY ALLOCATED TO MAIN-PATH DEVICES       */
*/*     OR A REQUEST WHICH IS TO BE REARRANGED HAS AFFINITY TO IT).  */
*/*     IF IT IS TO BE UNALLOCATED, THIS ROUTINE BUILDS A COMMON     */
*/*     UNALLOCATION REQUEST BLOCK FOR IT. THE DEVICE TYPE   @YM05565*/
*/*     FROM THE SIOT IS SAVED, AS UNALLOCATION MAY CHANGE   @YM05565*/
*/*     IT. IT IS RESTORED IN SEGMENT INVOKCU.               @YM05565*/
*/*                                                                  */
*/*   OPERATION - (THE OPERATION IS DOCUMENTED BY THE CODE ITSELF)   */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     SIOTPTR - PTR TO SIOT WHICH MAY NEED TO BE UNALLOCATED       */
*/*               (PARTIALLY- OR FULLY-ALLOCATED, NON-VAM,           */
*/*               NON-SUBSYSTEM REQ)                                 */
*/*     ONLYAFFS - 1 INDICATES ONLY AFFINITY MUST BE SHECKED         */
*/*     CMRBPTR - PTR TO NEXT AVAILABLE COMMON UNALLOC RB AREA       */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITIONS - FUNCTION COMPLETED.                               */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*     .IF REQ IS NOT TO BE UNALLOCATED: NONE                       */
*/*     .IF REQ IS TO BE UNALLOCATED: COMMON UNALLOC RB FILLED IN,   */
*/*                                   AND CMRBPTR UPDATED TO NEXT    */
*/*                                   RB AREA.                       */
*/*                                                                  */
*/*   RETURN CODES - (NONE)                                          */
*/*                                                                  */
*/********************************************************************/
*RFY DSAB BASED (SIOTETIO);                                     04S0154
*IF ONLYAFFS = OFF THEN                /*HAVE SIOTS BEEN SCANNED ?   */
         TM    ONLYAFFS,B'10000000'                             04S0155
         BNZ   @RF00155                                         04S0155
*  DO;                                 /*NO, CHECK IF REQ TO BE UNALC*/
*    IF SVOLUNAD->VUDADSME = ON THEN   /*VOLAFF DADSM-ERROR REQ ?    */
         TM    VUDADSME(@05),B'00000100'                        04S0157
         BNO   @RF00157                                         04S0157
*      SVOLUNAD->VUUNALSW = ON;        /*YES, MARK REQ FOR UNALLOC   */
         OI    VUUNALSW(@05),B'00001000'                        04S0158
*    ELSE                              /*NOT A VOLAFF DADSM-ERR REQ  */
*      DO;                                                      04S0159
         B     @RC00157                                         04S0159
@RF00157 DS    0H                                               04S0160
*        IF SIOTETIO = ZERO THEN       /*ANY TIOT?                   */
         ICM   @05,15,SIOTETIO(SIOTPTR)                         04S0160
         BNZ   @RF00160                                         04S0160
*          SVOLUNAD->VUUNALSW = ON;    /*NO,MARK REQ FOR UNALLOC     */
         L     @05,SVOLUNAD(,SIOTPTR)                           04S0161
         OI    VUUNALSW(@05),B'00001000'                        04S0161
*        ELSE                          /*TIOT EXISTS                 */
*          DO DEVCTR = 1 TO TIOEWTCT   /*LOOK AT EACH DEVICE ENTRY   */
*              WHILE (SVOLUNAD->VUUNALSW = OFF);                04S0162
         B     @RC00160                                         04S0162
@RF00160 LA    DEVCTR,1                                         04S0162
         B     @DE00162                                         04S0162
@DL00162 L     @08,SVOLUNAD(,SIOTPTR)                           04S0162
         TM    VUUNALSW(@08),B'00001000'                        04S0162
         BNZ   @DC00162                                         04S0162
*            IF TIOUCBP(DEVCTR) = ZERO THEN /*DEVICE ENTRY NOT ALOC'D*/
         LR    @05,DEVCTR                                       04S0163
         SLA   @05,2                                            04S0163
         L     @03,SIOTETIO(,SIOTPTR)                           04S0163
         L     @03,DSABTIOT(,@03)                               04S0163
         L     @05,TIOUCBP-5(@05,@03)                           04S0163
         LA    @05,0(,@05)                                      04S0163
         LTR   @05,@05                                          04S0163
         BNZ   @RF00163                                         04S0163
*              SVOLUNAD->VUUNALSW = ON; /*YES, MARK REQ FOR UNALLOC  */
         OI    VUUNALSW(@08),B'00001000'                        04S0164
*            ELSE                      /*DEVICE ENTRY IS ALLOCATED   */
*              DO;                                              04S0165
         B     @RC00163                                         04S0165
@RF00163 DS    0H                                               04S0166
*                UCBPTR = TIOUCBP(DEVCTR); /*GET ADRESSABILITY TO UCB*/
         LR    @05,DEVCTR                                       04S0166
         SLA   @05,2                                            04S0166
         L     @03,SIOTETIO(,SIOTPTR)                           04S0166
         L     @03,DSABTIOT(,@03)                               04S0166
         L     UCBPTR,TIOUCBP-5(@05,@03)                        04S0166
         LA    UCBPTR,0(,UCBPTR)                                04S0166
*                IF UCB3COMM ^= ON     /*NON-MAIN-PATH UNIT ?        */
*                   & (UCB3DACC ^= ON                           04S0167
*                   × (UCB3DACC=ON & UCBPRES=OFF & UCBRESV=OFF)) THEN
         TM    UCB3COMM(UCBPTR),B'01000000'                     04S0167
         BO    @RF00167                                         04S0167
         TM    UCB3DACC(UCBPTR),B'00100000'                     04S0167
         BNO   @RT00167                                         04S0167
         TM    UCB3DACC(UCBPTR),B'00100000'                     04S0167
         BNO   @RF00167                                         04S0167
         TM    UCBPRES(UCBPTR),B'00100100'                      04S0167
         BNZ   @RF00167                                         04S0167
@RT00167 DS    0H                                               04S0168
*                  SVOLUNAD->VUUNALSW = ON; /*YES,MARK REQ FOR UNALOC*/
         L     @08,SVOLUNAD(,SIOTPTR)                           04S0168
         OI    VUUNALSW(@08),B'00001000'                        04S0168
*                ELSE;                 /*MAIN-PATH DEVICE            */
@RF00167 DS    0H                                               04S0170
*              END;                                             04S0170
*          END;                                                 04S0171
@RC00163 AH    DEVCTR,@CH00071                                  04S0171
@DE00162 L     @08,SIOTETIO(,SIOTPTR)                           04S0171
         L     @08,DSABTIOT(,@08)                               04S0171
         SLR   @05,@05                                          04S0171
         IC    @05,TIOEWTCT(,@08)                               04S0171
         CR    DEVCTR,@05                                       04S0171
         BNH   @DL00162                                         04S0171
@DC00162 DS    0H                                               04S0172
*      END;                                                     04S0172
*  END;                                                         04S0173
*ELSE;                                 /*SIOTS HAVE BEEN SCANNED     */
@RF00155 DS    0H                                               04S0175
*SPTR = SIOT1P;                        /*POINT TO FIRST SIOT         */
@RC00155 L     @05,@PC00001                                     04S0175
         L     @05,ALCWAPTR(,@05)                               04S0175
         L     SPTR,SIOT1P(,@05)                                04S0175
*DO WHILE (SVOLUNAD->VUUNALSW=OFF & SPTR^=ZERO); /*SCAN SIOTS        */
         B     @DE00176                                         04S0176
@DL00176 DS    0H                                               04S0177
*  IF SPTR->SIOTUNAF = SCTDDINO                                 04S0177
*    & SVOLUNAD ^= ZERO & SPTR -> SVOLUNAD ^= ZERO              04S0177
*    & (SPTR->SIOTETIO = ZERO                                   04S0177
*    × SPTR->SVOLUNAD->VUUNALSW = ON) THEN /*IS AFF REQ TO BE   04S0177
*                                        UNALLOCATED                 */
         CLC   SIOTUNAF(2,SPTR),SCTDDINO(SIOTPTR)               04S0177
         BNE   @RF00177                                         04S0177
         SLR   @05,@05                                          04S0177
         C     @05,SVOLUNAD(,SIOTPTR)                           04S0177
         BE    @RF00177                                         04S0177
         L     @15,SVOLUNAD(,SPTR)                              04S0177
         CR    @15,@05                                          04S0177
         BE    @RF00177                                         04S0177
         C     @05,SIOTETIO(,SPTR)                              04S0177
         BE    @RT00177                                         04S0177
         TM    VUUNALSW(@15),B'00001000'                        04S0177
         BNO   @RF00177                                         04S0177
@RT00177 DS    0H                                               04S0178
*      SVOLUNAD->VUUNALSW = ON;        /*YES, UNALLOCATE THIS REQ    */
         L     @05,SVOLUNAD(,SIOTPTR)                           04S0178
         OI    VUUNALSW(@05),B'00001000'                        04S0178
*  ELSE;                               /*AFF REQ NOT TO BE UNALLOC'D */
@RF00177 DS    0H                                               04S0180
*  SPTR = SPTR->SIOTNPTR;                                       04S0180
         L     SPTR,SIOTNPTR(,SPTR)                             04S0180
*END;                                                           04S0181
@DE00176 L     @05,SVOLUNAD(,SIOTPTR)                           04S0181
         TM    VUUNALSW(@05),B'00001000'                        04S0181
         BNZ   @DC00176                                         04S0181
         LTR   SPTR,SPTR                                        04S0181
         BNZ   @DL00176                                         04S0181
@DC00176 DS    0H                                               04S0182
*IF SVOLUNAD ^= ZERO                   /*IS REQ TO BE UNALLOCATED ?  */
*   & SVOLUNAD -> VUUNALSW = ON THEN                            04S0182
         L     @05,SVOLUNAD(,SIOTPTR)                           04S0182
         LTR   @05,@05                                          04S0182
         BZ    @RF00182                                         04S0182
         TM    VUUNALSW(@05),B'00001000'                        04S0182
         BNO   @RF00182                                         04S0182
*  DO;                                 /*YES, BUILD UNALLOC RB       */
*    NEWUNALS = ON;                    /*INDICATE TO SCAN SIOTS AGAIN*/
         OI    NEWUNALS,B'10000000'                             04S0184
*    IF SIOTDMND=OFF THEN              /*DEMAND REQUEST ?            */
         TM    SIOTDMND(SIOTPTR),B'10000000'                    04S0185
         BNZ   @RF00185                                         04S0185
*      DO;                             /*                    @YM05565*/
*        SAVEDEVT = SIOTDEVT;          /*NO, SAVE DEV TYPE   @YM05565*/
         MVC   SAVEDEVT(4,SDEVTPTR),SIOTDEVT(SIOTPTR)           04S0187
*        SDEVTPTR = SDEVTPTR + LENGTH(SAVEDEVT); /*NEXT SAVE AREA PTR
*                                                            @YM05565*/
         AH    SDEVTPTR,@CH00068                                04S0188
*      END;                            /*                    @YM05565*/
*    CMSIOPTR = SIOTPTR;               /*PUT PTR TO SIOT IN UNAL RB  */
@RF00185 ST    SIOTPTR,CMSIOPTR(,CMRBPTR)                       04S0190
*    CMNODSR =ON;                      /*DONT RELEASE DATA SET NAMES */
         OI    CMNODSR(CMRBPTR),B'10000000'                     04S0191
*    CMORDISP = ON;                    /*INDICATE OVERRIDE DISP      */
         OI    CMORDISP(CMRBPTR),B'00010000'                    04S0192
*    IF SCTSNEW = ON THEN              /*NEW REQUEST ?               */
         TM    SCTSNEW(SIOTPTR),B'00000100'                     04S0193
         BNO   @RF00193                                         04S0193
*      CMODEL = ON;                    /*YES, INDICATE 'DELETE' DISP */
         OI    CMODEL(CMRBPTR),B'00000100'                      04S0194
*    ELSE                              /*NOT NEW REQ, INDICATE 'KEEP'*/
*      CMOKEEP = ON;                                            04S0195
         B     @RC00193                                         04S0195
@RF00193 OI    CMOKEEP(CMRBPTR),B'00001000'                     04S0195
*      CMCKDAVL = ON;                  /*CHECK MULT-ALOC'D VOLS      */
@RC00193 OI    CMCKDAVL(CMRBPTR),B'00010000'                    04S0196
*    CMNRBPTR = CMRBPTR + LENGTH(CMUNRB); /*POINT TO NEXT UNALLOC RB */
         LA    @05,16                                           04S0197
         LR    @03,CMRBPTR                                      04S0197
         ALR   @03,@05                                          04S0197
         ST    @03,CMNRBPTR(,CMRBPTR)                           04S0197
*    CMRBPTR = CMRBPTR + LENGTH(CMUNRB);                        04S0198
         ALR   CMRBPTR,@05                                      04S0198
*  END;                                                         04S0199
*ELSE;                                 /*REQ IS NOT TO BE UNALLOCATED*/
@RF00182 DS    0H                                               04S0201
*RFY DSAB BASED(DSABPTR);                                       04S0201
*          END;                                                 03S0202
*        ELSE;                         /*VAM OR SUBSYSTEM REQ, ETC   */
@RF00152 DS    0H                                               03S0204
*        SIOTPTR = SIOTNPTR;           /*POINT TO THE NEXT SIOT      */
         L     SIOTPTR,SIOTNPTR(,SIOTPTR)                       03S0204
*      END;                                                     03S0205
@DE00151 LTR   SIOTPTR,SIOTPTR                                  03S0205
         BNZ   @DL00151                                         03S0205
*      ONLYAFFS = ON;                  /*ANY AFFINITY REQS CAN BE
*                                      ADDED                         */
         OI    ONLYAFFS,B'10000000'                             03S0206
*    END;                                                       03S0207
@DE00148 TM    NEWUNALS,B'10000000'                             03S0207
         BO    @DL00148                                         03S0207
*    IF CMRBPTR ^= FRBPTR THEN         /*ANY REQS TO UNALLOCATE ?    */
         L     @06,FRBPTR                                       03S0208
         CR    CMRBPTR,@06                                      03S0208
         BE    @RF00208                                         03S0208
*      DO;                             /*YES, PROCESS ..             */
*        CMRBPTR=CMRBPTR-LENGTH(CMUNRB); /*POINT TO LAST UNALLOC RB  */
         SH    CMRBPTR,@CH00048                                 03S0210
*        CMNRBPTR = ZERO;              /*INDICATE LAST ENTRY         */
         SLR   @03,@03                                          03S0211
         ST    @03,CMNRBPTR(,CMRBPTR)                           03S0211
*/********************************************************************/
*/*     THIS SEGMENT ADDED FOR PTM # 7772                    @YM07772*/
*/*                                                                  */
*/* SEGMENT NAME = CLEARFF                                           */
*/*                                                                  */
*/* DESCRIPTIVE NAME - CLEAR FF VOLSERS FROM UCBS BACKING OUT        */
*/*                    OF ALLOCATION                                 */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE CLEARS FF VOLSERS OUT OF UCBS ALLOCATED TO      */
*/*     REQUESTS(SIOTS) WHICH ARE NOW BEING UNALLOCATED IN PREPA-    */
*/*     RATION FOR A REQUEUE OR RETRY.  THE PASSED DATA SET INDICA-  */
*/*     TOR MUST ALSO BE CLEARED FOR ALL UCBS HAVING FF VOLSERS      */
*/*     REMOVED.                                                     */
*/*                                                                  */
*/*     NOTE:  THIS MUST BE DONE TO PREVENT THE 'RETRY'(I.E. RETRY   */
*/*            OR REQUEUE) FROM FINDING THE VOLSER AND ALLOCATING    */
*/*            IT.  SINCE ALL GROUPS ARE RELEASED BEFORE RETRYING,   */
*/*            THE UNIT CONTAINING THE VOLSER COULD HAVE BEEN AL-    */
*/*            LOCATED TO ANOTHER JOB OR REQUEST.                    */
*/*                                                                  */
*/*   OPERATION - THE COMMON UNALLOCATION REQUEST BLOCKS, REPRESENT- */
*/*               ING REQUESTS BEING UNALLOCATED, ARE SCANNED.       */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*                                                                  */
*/*     FRBPTR - PTR TO FIRST COMMON UNALLOCATION REQUEST BLOCK.     */
*/*     CMUNRB - COMMON UNALLOCATION REQUEST BLOCK                   */
*/*       CMSIOPTR - SIOT PTR                                        */
*/*     SIOT - ONE FOR EACH COMMON UNALLOCATION RB                   */
*/*     DSAB - ONE FOR EACH SIOT                                     */
*/*     TIOT ENTRY - ONE FOR EACH PARTIALLY OR FULLY ALLOCATED SIOT  */
*/*                                                                  */
*/* EXIT - NORMAL (INLINE SUBROUTINE)                                */
*/*                                                                  */
*/*   CONDITION - PROCESSING COMPLETE                                */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*                                                                  */
*/*     UCBVOLI - SET TO ZERO IN ALL UCB'S WHICH CONTAINED FF VOLSERS*/
*/*     UCBMONT - SET TO ZERO IN SAME UCB'S WITH UCBVOLI CLEARED     */
*/*                                                                  */
*/*   RETURN CODES - NONE                                            */
*/*                                                                  */
*/********************************************************************/
*RFY DSAB BASED(SIOTETIO);                                      04S0212
*CMRBPTR = FRBPTR;                     /* GET FIRST RB               */
         LR    CMRBPTR,@06                                      04S0213
*DO WHILE CMRBPTR ^= ZERO;             /* LOOK AT ALL RBS            */
         B     @DE00214                                         04S0214
@DL00214 DS    0H                                               04S0215
*  SIOTPTR = CMSIOPTR;                 /* GET SIOT                   */
         L     SIOTPTR,CMSIOPTR(,CMRBPTR)                       04S0215
*  FFTAPESW = OFF;                     /* ASSUME NO FF VOLSER FOUND  */
         NI    FFTAPESW,B'01111111'                             04S0216
*  IF SIO3TAPE = ON &                  /* POSSIBLY ALCD TO TAPE      */
*     SIOTETIO ^= ZERO THEN            /* ETIOT ENTRY EXISTS         */
         TM    SIO3TAPE(SIOTPTR),B'10000000'                    04S0217
         BNO   @RF00217                                         04S0217
         ICM   @07,15,SIOTETIO(SIOTPTR)                         04S0217
         BZ    @RF00217                                         04S0217
*    DO DEVCTR = 1 TO TIOEWTCT         /* LOOK AT EACH UCB ENTRY     */
*       WHILE (FFTAPESW = OFF);        /* UNTIL A FF VOLSER FOUND    */
         LA    DEVCTR,1                                         04S0218
         B     @DE00218                                         04S0218
@DL00218 TM    FFTAPESW,B'10000000'                             04S0218
         BNZ   @DC00218                                         04S0218
*      IF TIOUCBP(DEVCTR) ^= ZERO THEN /* NON-0 UCB PTR              */
         LR    @08,DEVCTR                                       04S0219
         SLA   @08,2                                            04S0219
         L     @07,SIOTETIO(,SIOTPTR)                           04S0219
         L     @07,DSABTIOT(,@07)                               04S0219
         L     @08,TIOUCBP-5(@08,@07)                           04S0219
         LA    @08,0(,@08)                                      04S0219
         LTR   @08,@08                                          04S0219
         BZ    @RF00219                                         04S0219
*        DO;                           /* LOOK AT UCB                */
         ST    @08,@TF00001                                     04S0220
*          UCBPTR = TIOUCBP(DEVCTR);   /* GET UCB                    */
         L     UCBPTR,@TF00001                                  04S0221
*          IF UCB3TAPE = ON &          /* TAPE                       */
*             UCBVOLI(1) = FFVOLSER THEN /* FF VOLSER                */
         TM    UCB3TAPE(UCBPTR),B'10000000'                     04S0222
         BNO   @RF00222                                         04S0222
         CLC   UCBVOLI(1,UCBPTR),FFVOLSER                       04S0222
         BNE   @RF00222                                         04S0222
*            DO;                       /* CLEAN UP UCB               */
*               DO; /*MODESET  KEYADDR(ZERO)*/                  04S0224
*                 SPKA (ZERO); /*SET PSW KEY*/                  04S0225
         SLR   @07,@07                                          04S0225
         SPKA  0(@07)                                           04S0225
*               END; /*MODESET  KEYADDR(ZERO)*/ /* KEY 0 TO LOCK & ALTE
* UCB  */                                                       04S0226
*               DO; /* SETLOCK (OBTAIN) MODE(UNCOND) TYPE(LOCAL) REGS(U
*E) RELATED(UCB,IEFAB490(CLEARFF)) */                           04S0227
*                 RFY (GPR11P,GPR12P,GPR13P,GPR14P) RSTD;       04S0228
*                 RFY (GPR15P,GPR00P,GPR01P) RSTD;              04S0229
*                 GPR15P = GPR11P; /* SAVE REG. 11 IN REG. 15. */
         LR    GPR15P,GPR11P                                    04S0230
*                 GPR00P = GPR12P; /* SAVE REG. 12 IN REG. 0. */
         LR    GPR00P,GPR12P                                    04S0231
*                 GPR01P = GPR13P; /* SAVE REG. 13 IN REG. 1. */
         LR    GPR01P,GPR13P                                    04S0232
*                 GPR13P = PSALITA; /* ADDRESS OF LOCK INTERFACE TABLE.
**/               GEN(LM GPR11P,GPR13P,576(GPR13P)); /* LOAD LOCKWORD,
*LHT AND ENTRY ADRS. */                                         04S0233
         L     GPR13P,PSALITA                                   04S0233
         LM GPR11P,GPR13P,576(GPR13P)
*                 GEN(BALR GPR14P,GPR13P); /* BALR TO SETLOCK RTN. */
         BALR GPR14P,GPR13P
*                 GPR11P = GPR15P; /* RESTORE REG. 11. */       04S0236
         LR    GPR11P,GPR15P                                    04S0236
*                 GPR15P = GPR13P; /* SAVE RETURN CODE. */      04S0237
         LR    GPR15P,GPR13P                                    04S0237
*                 GPR12P = GPR00P; /* RESTORE REG. 12 */        04S0238
         LR    GPR12P,GPR00P                                    04S0238
*                 GPR13P = GPR01P; /* RESTORE REG. 13. */       04S0239
         LR    GPR13P,GPR01P                                    04S0239
*                 RFY(GPR15P,GPR00P,GPR01P) UNRSTD;             04S0240
*                 RFY (GPR11P,GPR12P,GPR13P,GPR14P) UNRSTD;     04S0241
*               END; /* SETLOCK (OBTAIN) MODE(UNCOND) TYPE(LOCAL) REGS(
*SE) RELATED(UCB,IEFAB490(CLEARFF)) */ /* LOCK TO HIT UCB*/     04S0242
*               DO; /* SETLOCK (OBTAIN) MODE(UNCOND) TYPE(CMS) REGS(USE
* RELATED(UCB,IEFAB490(CLEARFF)) */                             04S0243
*                 RFY (GPR11P,GPR12P,GPR13P,GPR14P) RSTD;       04S0244
*                 RFY (GPR15P,GPR00P,GPR01P) RSTD;              04S0245
*                 GPR15P = GPR11P; /* SAVE REG. 11 IN REG. 15. */
         LR    GPR15P,GPR11P                                    04S0246
*                 GPR00P = GPR12P; /* SAVE REG. 12 IN REG. 0. */
         LR    GPR00P,GPR12P                                    04S0247
*                 GPR01P = GPR13P; /* SAVE REG. 13 IN REG. 1. */
         LR    GPR01P,GPR13P                                    04S0248
*                 GPR13P = PSALITA; /* ADDRESS OF LOCK INTERFACE TABLE.
**/               GEN(LM GPR11P,GPR13P,540(GPR13P)); /* LOAD LOCKWORD,
*LHT AND ENTRY ADRS. */                                         04S0249
         L     GPR13P,PSALITA                                   04S0249
         LM GPR11P,GPR13P,540(GPR13P)
*                 GEN(BALR GPR14P,GPR13P); /* BALR TO SETLOCK RTN. */
         BALR GPR14P,GPR13P
*                 GPR11P = GPR15P; /* RESTORE REG. 11. */       04S0252
         LR    GPR11P,GPR15P                                    04S0252
*                 GPR15P = GPR13P; /* SAVE RETURN CODE. */      04S0253
         LR    GPR15P,GPR13P                                    04S0253
*                 GPR12P = GPR00P; /* RESTORE REG. 12 */        04S0254
         LR    GPR12P,GPR00P                                    04S0254
*                 GPR13P = GPR01P; /* RESTORE REG. 13. */       04S0255
         LR    GPR13P,GPR01P                                    04S0255
*                 RFY(GPR15P,GPR00P,GPR01P) UNRSTD;             04S0256
*                 RFY (GPR11P,GPR12P,GPR13P,GPR14P) UNRSTD;     04S0257
*               END; /* SETLOCK (OBTAIN) MODE(UNCOND) TYPE(CMS) REGS(US
*) RELATED(UCB,IEFAB490(CLEARFF)) */                            04S0258
*              UCBVOLI = UCBVOLI && UCBVOLI; /* CLEAR FF VOLSER      */
         XC    UCBVOLI(6,UCBPTR),UCBVOLI(UCBPTR)                04S0259
*              UCBMONT = OFF;          /* PASSED DATA SET INDICATOR  */
         NI    UCBMONT(UCBPTR),B'11111110'                      04S0260
*               DO; /* SETLOCK (RELEASE) TYPE(CMS) REGS(USE) RELATED(UC
*,IEFAB490(CLEARFF)) */                                         04S0261
*                 RFY (GPR11P,GPR12P,GPR13P,GPR14P) RSTD;       04S0262
*                 RFY (GPR15P,GPR00P,GPR01P) RSTD;              04S0263
*                 GPR15P = GPR11P; /* SAVE REG. 11 IN REG. 15. */
         LR    GPR15P,GPR11P                                    04S0264
*                 GPR00P = GPR12P; /* SAVE REG. 12 IN REG. 0. */
         LR    GPR00P,GPR12P                                    04S0265
*                 GPR01P = GPR13P; /* SAVE REG. 13 IN REG. 1. */
         LR    GPR01P,GPR13P                                    04S0266
*                 GPR13P = PSALITA; /* ADDRESS OF LOCK INTERFACE TABLE.
**/               GEN(LM GPR11P,GPR13P,552(GPR13P)); /* LOAD LOCKWORD,
*LHT AND ENTRY ADRS. */                                         04S0267
         L     GPR13P,PSALITA                                   04S0267
         LM GPR11P,GPR13P,552(GPR13P)
*                 GEN(BALR GPR14P,GPR13P); /* BALR TO SETLOCK RTN. */
         BALR GPR14P,GPR13P
*                 GPR11P = GPR15P; /* RESTORE REG. 11. */       04S0270
         LR    GPR11P,GPR15P                                    04S0270
*                 GPR15P = GPR13P; /* SAVE RETURN CODE. */      04S0271
         LR    GPR15P,GPR13P                                    04S0271
*                 GPR12P = GPR00P; /* RESTORE REG. 12 */        04S0272
         LR    GPR12P,GPR00P                                    04S0272
*                 GPR13P = GPR01P; /* RESTORE REG. 13. */       04S0273
         LR    GPR13P,GPR01P                                    04S0273
*                 RFY(GPR15P,GPR00P,GPR01P) UNRSTD;             04S0274
*                 RFY (GPR11P,GPR12P,GPR13P,GPR14P) UNRSTD;     04S0275
*               END; /* SETLOCK (RELEASE) TYPE(CMS) REGS(USE) RELATED(U
*B,IEFAB490(CLEARFF)) */                                        04S0276
*               DO; /* SETLOCK (RELEASE) TYPE(LOCAL) REGS(USE) RELATED(
*CB,IEFAB490(CLEARFF)) */                                       04S0277
*                 RFY (GPR11P,GPR12P,GPR13P,GPR14P) RSTD;       04S0278
*                 RFY (GPR15P,GPR00P,GPR01P) RSTD;              04S0279
*                 GPR15P = GPR11P; /* SAVE REG. 11 IN REG. 15. */
         LR    GPR15P,GPR11P                                    04S0280
*                 GPR00P = GPR12P; /* SAVE REG. 12 IN REG. 0. */
         LR    GPR00P,GPR12P                                    04S0281
*                 GPR01P = GPR13P; /* SAVE REG. 13 IN REG. 1. */
         LR    GPR01P,GPR13P                                    04S0282
*                 GPR13P = PSALITA; /* ADDRESS OF LOCK INTERFACE TABLE.
**/               GEN(LM GPR11P,GPR13P,588(GPR13P)); /* LOAD LOCKWORD,
*LHT AND ENTRY ADRS. */                                         04S0283
         L     GPR13P,PSALITA                                   04S0283
         LM GPR11P,GPR13P,588(GPR13P)
*                 GEN(BALR GPR14P,GPR13P); /* BALR TO SETLOCK RTN. */
         BALR GPR14P,GPR13P
*                 GPR11P = GPR15P; /* RESTORE REG. 11. */       04S0286
         LR    GPR11P,GPR15P                                    04S0286
*                 GPR15P = GPR13P; /* SAVE RETURN CODE. */      04S0287
         LR    GPR15P,GPR13P                                    04S0287
*                 GPR12P = GPR00P; /* RESTORE REG. 12 */        04S0288
         LR    GPR12P,GPR00P                                    04S0288
*                 GPR13P = GPR01P; /* RESTORE REG. 13. */       04S0289
         LR    GPR13P,GPR01P                                    04S0289
*                 RFY(GPR15P,GPR00P,GPR01P) UNRSTD;             04S0290
*                 RFY (GPR11P,GPR12P,GPR13P,GPR14P) UNRSTD;     04S0291
*               END; /* SETLOCK (RELEASE) TYPE(LOCAL) REGS(USE) RELATED
*UCB,IEFAB490(CLEARFF)) */                                      04S0292
*               DO; /*MODESET  EXTKEY(SCHED)*/                  04S0293
*                 SPKA (16); /*SET PSW KEY*/                    04S0294
         LA    @08,16                                           04S0294
         SPKA  0(@08)                                           04S0294
*               END; /*MODESET  EXTKEY(SCHED)*/                 04S0295
*              FFTAPESW = ON;          /* FF VOLSER FOUND            */
         OI    FFTAPESW,B'10000000'                             04S0296
*            END;                      /* END UCB CLEAN-UP           */
*          ELSE;                       /* NOT TAPE AND FF VOLSER     */
@RF00222 DS    0H                                               04S0299
*        END;                                                   04S0299
*      ELSE;                           /* UCB PTR ISN'T THERE        */
@RF00219 DS    0H                                               04S0301
*    END;                              /* END ETIOT ENTRY SCAN       */
         AH    DEVCTR,@CH00071                                  04S0301
@DE00218 L     @08,SIOTETIO(,SIOTPTR)                           04S0301
         L     @08,DSABTIOT(,@08)                               04S0301
         SLR   @07,@07                                          04S0301
         IC    @07,TIOEWTCT(,@08)                               04S0301
         CR    DEVCTR,@07                                       04S0301
         BNH   @DL00218                                         04S0301
@DC00218 DS    0H                                               04S0302
*  ELSE;                               /* NOT TAPE OR NO ETIOT ENTRY */
@RF00217 DS    0H                                               04S0303
*  CMRBPTR = CMNRBPTR;                 /* GET NEXT RB                */
         L     CMRBPTR,CMNRBPTR(,CMRBPTR)                       04S0303
*END;                                  /* END RB SCAN                */
@DE00214 LTR   CMRBPTR,CMRBPTR                                  04S0304
         BNZ   @DL00214                                         04S0304
*RFY DSAB BASED(DSABPTR);                                       04S0305
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - INVOKCU                                           */
*/*                                                                  */
*/* DESCRIPTIVE NAME - CALL IEFAB4A0 TO BACKOUT ALLOCATIONS          */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE CALLS COMMON UNALLOCATION (IEFAB4A0) TO         */
*/*     BACKOUT NON-MAIN PATH ALLOCATIONS, THEN PROCESSES THE        */
*/*     (ERROR) RETURN INFO FROM IEFAB4A0.                           */
*/*     THE SIOT DEVICE TYPE IS RESTORED.                    @YM05565*/
*/*     NOTE: SIOTSTEP & SIOTDSPD ARE CLEARED SO THAT UNALLOCATION   */
*/*           WILL PROCESS CORRECTLY AFTER THE SIOT IS REALLOCATED.  */
*/*                                                                  */
*/*   OPERATION - (THE OPERATION IS DOCUMENTED BY THE CODE ITSELF)   */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     FRBPTR - PTR TO CHAIN OF UNALLOCATION REQUEST BLOCKS         */
*/*     ALCWAPTR - PTR TO ALLOCATION WORK AREA, WHICH CONTAINS       */
*/*       JSCBPTR - PTR TO JSCB                                      */
*/*       SIOT1P - PTR TO FIRST SIOT IN THE CHAIN                    */
*/*       FAILRSCP - PTR TO AREA FOR STEP-RELATED ERROR REASON CODE  */
*/*                                                                  */
*/* EXIT(S) - (SAME AS FOR SEGMENT 'BACKOUT' WHICH INVOKES THIS      */
*/*           SEGMENT, EXCEPT THIS SEGMENT CANNOT GET A GETMAIN      */
*/*           ERROR)                                                 */
*/*                                                                  */
*/********************************************************************/
*CFMAPTR = ADDR(FUNC4A0);              /*GET ADDR FOR FUNCTION MAP   */
         LA    CFMAPTR,FUNC4A0                                  04S0306
*CMUNFMAP = CMUNFMAP && CMUNFMAP;      /*ZERO FUNCTION MAP           */
         XC    CMUNFMAP(4,CFMAPTR),CMUNFMAP(CFMAPTR)            04S0307
*CMDISPRC = ON;                        /*PROCESS DISPS               */
*CMUNUNIT = ON;                        /*UNALLOCATE UNITS            */
*CMVLRLSE = ON;                        /*RELEASE VOLUMES             */
*CMFDSABS = ON;                        /*FREE DSABS                  */
         OI    CMDISPRC(CFMAPTR),B'00100111'                    04S0311
*CMNOVUT = ON;                         /*BYPASS VUT PROCESSING       */
*CMCHATTR = ON;                        /*CHANGE VOLUME ATTRIBUTES    */
*CMRDDENT = ON;                        /*RELEASE TIOT ENTRIES        */
*CMNERMSG = ON;                        /*DONT ISSUE ERROR MSGS       */
*CMPURGE = ON;                         /*OVERRIDE EXPIRATION DATES   */
         OI    CMNOVUT(CFMAPTR),B'01101110'                     04S0316
*CMNOSMF = ON;                         /*SUPPRESS SMF RECORDS        */
*CMSCRVL1 = ON;                        /*ONLY SCRTCH FROM 1ST VOLUME */
         OI    CMNOSMF(CFMAPTR),B'01100000'                     04S0318
*IF NOTIOTNQ = ON THEN                 /*HAS TIOT BEEN ENQ'ED        */
         L     @03,@PC00001                                     04S0319
         L     @03,ALCWAPTR(,@03)                               04S0319
         L     @03,FMAPPTR(,@03)                                04S0319
         TM    NOTIOTNQ(@03),B'00010000'                        04S0319
         BNO   @RF00319                                         04S0319
*  CMTIOTNQ = ON;                      /*YES,DONT HAVE SCRATCH ENQ   */
         OI    CMTIOTNQ(CFMAPTR),B'00000001'                    04S0320
*ELSE;                                 /*TIOT HAS NOT BEEN ENQ'ED YET*/
@RF00319 DS    0H                                               04S0322
*CALL IEFAB4A0 (FUNC4A0,FRBPTR,JSCBPTR,SIOT1P,0,0,0,URCODES,0); 04S0322
         LA    @06,FUNC4A0                                      04S0322
         ST    @06,@AL00001                                     04S0322
         LA    @06,FRBPTR                                       04S0322
         ST    @06,@AL00001+4                                   04S0322
         L     @06,@PC00001                                     04S0322
         L     @06,ALCWAPTR(,@06)                               04S0322
         LA    @15,JSCBPTR(,@06)                                04S0322
         ST    @15,@AL00001+8                                   04S0322
         LA    @06,SIOT1P(,@06)                                 04S0322
         ST    @06,@AL00001+12                                  04S0322
         LA    @06,@CF00198                                     04S0322
         ST    @06,@AL00001+16                                  04S0322
         LA    @06,@CF00198                                     04S0322
         ST    @06,@AL00001+20                                  04S0322
         LA    @06,@CF00198                                     04S0322
         ST    @06,@AL00001+24                                  04S0322
         LA    @06,URCODES                                      04S0322
         ST    @06,@AL00001+28                                  04S0322
         LA    @06,@CF00198                                     04S0322
         ST    @06,@AL00001+32                                  04S0322
         L     @15,@CV00232                                     04S0322
         LA    @01,@AL00001                                     04S0322
         BALR  @14,@15                                          04S0322
*                                      /*CALL COMMON UNALLOC @ZD03010*/
*RTNCODE = REG15;                      /*SAVE THE RETURN CODE        */
         LR    RTNCODE,REG15                                    04S0323
*IF RTNCODE = SUCCESS THEN             /*ANY ERRORS ?                */
         LTR   RTNCODE,RTNCODE                                  04S0324
         BNZ   @RF00324                                         04S0324
*  DO;                                 /*NO, SCAN REQ RETURN INFO    */
*    CMRBPTR = FRBPTR;                 /*POINT TO FIRST UNALLOC RB   */
         L     @06,FRBPTR                                       04S0326
         LR    CMRBPTR,@06                                      04S0326
*    SDEVTPTR = FRBPTR + (NUMUNALS -1) *                        04S0327
*                      LENGTH(CMUNRB); /*SAVE DEV TYPE CORE  @YM05565*/
         L     SDEVTPTR,NUMUNALS                                04S0327
         BCTR  SDEVTPTR,0                                       04S0327
         SLA   SDEVTPTR,4                                       04S0327
         ALR   @06,SDEVTPTR                                     04S0327
         LR    SDEVTPTR,@06                                     04S0327
*    DO WHILE CMRBPTR ^= ZERO;         /*SCAN ALL UNALLOC REQ BLOCKS */
         B     @DE00328                                         04S0328
@DL00328 DS    0H                                               04S0329
*      CMSIOPTR->SIOTALCD = OFF;       /*MARK SIOT UNALLOCATED       */
*      CMSIOPTR->SIODADSM = OFF;       /*MARK SCRATCHED (IF NEEDED)  */
         L     @06,CMSIOPTR(,CMRBPTR)                           04S0330
         NI    SIOTALCD(@06),B'11111001'                        04S0330
*      CMSIOPTR->SIOTDSPD = OFF;                                04S0331
         NI    SIOTDSPD(@06),B'10111111'                        04S0331
*      IF CMSIOPTR->SIOTDMND = OFF THEN /*NOT DEMAND REQ     @YM05565*/
         TM    SIOTDMND(@06),B'10000000'                        04S0332
         BNZ   @RF00332                                         04S0332
*        DO;                           /*                    @YM05565*/
*          CMSIOPTR->SIOTDEVT = SAVEDEVT; /*RESTORE DEV TYPE @YM05565*/
*                                                               04S0334
         MVC   SIOTDEVT(4,@06),SAVEDEVT(SDEVTPTR)               04S0334
*          CMSIOPTR->SIOUCBAD = ZERO;  /*CLEAR UCB ADDR.     @YM05565*/
         SLR   @05,@05                                          04S0335
         STCM  @05,7,SIOUCBAD(@06)                              04S0335
*          SDEVTPTR = SDEVTPTR + LENGTH(SAVEDEVT); /* NEXT DEVICE
*                                        TYPE ADDRESS        @YM05565*/
         AH    SDEVTPTR,@CH00068                                04S0336
*        END;                          /*                    @YM05565*/
*      IF CMRETCDE ^= ZERO THEN        /*ANY ERRORS ?                */
@RF00332 ICM   @06,3,CMRETCDE(CMRBPTR)                          04S0338
         BZ    @RF00338                                         04S0338
*        DO;                           /*YES, INDICATE THE ERROR     */
*          CMSIOPTR->SIOTRSNC = UDDERR; /*SET SIOT REASON CODE       */
         L     @06,CMSIOPTR(,CMRBPTR)                           04S0340
         MVC   SIOTRSNC(2,@06),@CH00229                         04S0340
*          RTNCODE = FAILURE;          /*SET ERROR RETURN CODE       */
         LA    RTNCODE,4                                        04S0341
*        END;                                                   04S0342
*      ELSE                            /*NO ERROR                    */
*        DO;                                                    04S0343
         B     @RC00338                                         04S0343
@RF00338 DS    0H                                               04S0344
*          CMSIOPTR->SIOTSTEP = OFF;                            04S0344
         L     @06,CMSIOPTR(,CMRBPTR)                           04S0344
         NI    SIOTSTEP(@06),B'11110111'                        04S0344
*        END;                                                   04S0345
*      CMRBPTR = CMNRBPTR;             /*POINT TO THE NEXT UNALLOC RB*/
@RC00338 L     CMRBPTR,CMNRBPTR(,CMRBPTR)                       04S0346
*    END;                                                       04S0347
@DE00328 LTR   CMRBPTR,CMRBPTR                                  04S0347
         BNZ   @DL00328                                         04S0347
*  END;                                                         04S0348
*ELSE                                  /*ERROR FROM COMMON UNALOC RTN*/
*  REASONCD = UNALERR;                 /*SET STEP REASON CODE        */
         B     @RC00324                                         04S0349
@RF00324 L     @06,@PC00001                                     04S0349
         L     @06,ALCWAPTR(,@06)                               04S0349
         L     @06,FAILRSCP(,@06)                               04S0349
         MVC   REASONCD(2,@06),@CH00160                         04S0349
*      END;                                                     03S0350
*    ELSE;                             /*NO REQS TO UNALLOCATE       */
@RF00208 DS    0H                                               03S0352
*    RFY (REG0,REG1) RSTD;                                      03S0352
@RC00208 DS    0H                                               03S0353
*    REG0 = RBSIZE;                    /*SIZE OF GETMAIN FOR UNAL RBS*/
         L     REG0,RBSIZE                                      03S0353
*    REG0 = REG0 × SUBPL230;           /*FREE FROM SUBPOOL 230       */
         O     REG0,@CF00189                                    03S0354
*    REG1 = FRBPTR;                    /*PTR TO UNALLO REQ BLOCKS    */
         L     REG1,FRBPTR                                      03S0355
*    GEN ( FREEMAIN R,LV=(0),A=(1));   /*FREE CORE FOR UNALLOC RB'S  */
          FREEMAIN R,LV=(0),A=(1)
*    RFY (REG0,REG1) UNRSTD;                                    03S0357
*  END;                                                         03S0358
*ELSE                                  /*GETMAIN ERROR               */
*  REASONCD = GETMNERR;                /*SET STEP REASON CODE        */
         B     @RC00142                                         03S0359
@RF00142 L     @06,@PC00001                                     03S0359
         L     @06,ALCWAPTR(,@06)                               03S0359
         L     @06,FAILRSCP(,@06)                               03S0359
         MVC   REASONCD(2,@06),@CH00087                         03S0359
*IF RTNCODE = SUCCESS THEN             /*ANY ERRORS ?                */
@RC00142 LTR   RTNCODE,RTNCODE                                  02S0360
         BNZ   @RF00360                                         02S0360
*  DO;                                 /*NO, SETUP PARMS FOR IEFAB421*/
*    COPYFUNC = FUNCMAP;               /*COPY FUNCTION MAP FROM ALCWA*/
         XC    COPYFUNC+2(14),COPYFUNC+2                        02S0362
         L     @06,@PC00001                                     02S0362
         L     @06,ALCWAPTR(,@06)                               02S0362
         L     @01,FMAPPTR(,@06)                                02S0362
         MVC   COPYFUNC(2),FUNCMAP(@01)                         02S0362
*    FMAPPTR = ADDR(COPYFUNC);         /*GET ADDR OF NEW FUNCTION MAP*/
         LA    @15,COPYFUNC                                     02S0363
         ST    @15,FMAPPTR(,@06)                                02S0363
*    IF RETRYSW = ON THEN              /*RETRY WANTED ?              */
         TM    RETRYSW,B'01000000'                              02S0364
         BNO   @RF00364                                         02S0364
*      GENLOKSW = ON;                  /*YES, INDICATE LOCK-WHOLE-GEN*/
         OI    GENLOKSW(@15),B'00000001'                        02S0365
*    ELSE                              /*RETRY NOT WANTED    @YM08171*/
*      GENLOKSW = OFF;                 /*                    @YM08171*/
         B     @RC00364                                         02S0366
@RF00364 L     @06,@PC00001                                     02S0366
         L     @06,ALCWAPTR(,@06)                               02S0366
         L     @06,FMAPPTR(,@06)                                02S0366
         NI    GENLOKSW(@06),B'11111110'                        02S0366
*    EXTRACAL = ON;                    /*INDICATE RECALL     @Y30QPPA*/
@RC00364 L     @06,@PC00001                                     02S0367
         L     @06,ALCWAPTR(,@06)                               02S0367
         L     @01,FMAPPTR(,@06)                                02S0367
         OI    EXTRACAL(@01),B'00000001'                        02S0367
*    SIOT1PTR = SIOT1P;                /*COPY PTR AT FIRST SIOT      */
         MVC   SIOT1PTR(4),SIOT1P(@06)                          02S0368
*    JSCBP = JSCBPTR;                  /*COPY PTR TO JSCB FROM ALCWA */
         MVC   JSCBP(4),JSCBPTR(@06)                            02S0369
*    LUTPTR = IOSLUTP;                 /*COPY PTR TO IOS LOOKUP TABLE*/
         MVC   LUTPTR(4),IOSLUTP(@06)                           02S0370
*    THETCBP = TCBP;                   /*COPY PTR TO TCB FROM ALCWA  */
         MVC   THETCBP(4),TCBP(@06)                             02S0371
*    NAMESP = TIOTHDRP;                /*COPY PTR TO JOB/STEP/P NAMES*/
         MVC   NAMESP(4),TIOTHDRP(@06)                          02S0372
*    RESNCDP = FAILRSCP;               /*COPY PTR TO STEP REASON CODE*/
         MVC   RESNCDP(4),FAILRSCP(@06)                         02S0373
*    STOPECBP = CANCELP;               /*COPY PTR TO CANCEL ECB      */
         MVC   STOPECBP(4),CANCELP(@06)                         02S0374
*    IF SU29BIT = ON THEN              /*IS SU 29 INSTALLED? @G29AN2F*/
         L     @01,CVTPTR                                       02S0375
         L     @01,CVTIHASU(,@01)                               02S0375
         TM    SU29BIT(@01),B'00000100'                         02S0375
         BNO   @RF00375                                         02S0375
*      SSERRBKP = SSERBLKP;            /*YES, SET PTR TO SUBSYSTEM
*                                        ERROR BLOCK         @G29AN2F*/
         MVC   SSERRBKP(4),SSERBLKP(@06)                        02S0376
*    ELSE                              /*NOT INSTALLED       @G29AN2F*/
*      SSERRBKP = ZERO;                /*SET PTR TO ZERO     @G29AN2F*/
         B     @RC00375                                         02S0377
@RF00375 SLR   @06,@06                                          02S0377
         ST    @06,SSERRBKP                                     02S0377
*  END;                                                         02S0378
*ELSE;                                 /*ERROR                       */
@RF00360 DS    0H                                               02S0380
*  END;                                                         01S0380
*ELSE                                  /*ALLOC NOT TO BE REDONE      */
*  IF WRTMSGSW = ON                    /*ALOC MSGLEVEL=1?            */
*    & PRIVASUM = ON THEN              /*ANY STRGE REQUESTS MADE PRIV*/
         B     @RC00110                                         01S0381
@RF00110 L     @06,@PC00001                                     01S0381
         L     @06,ALCWAPTR(,@06)                               01S0381
         L     @01,FMAPPTR(,@06)                                01S0381
         TM    WRTMSGSW(@01),B'01000000'                        01S0381
         BNO   @RF00381                                         01S0381
         TM    PRIVASUM(@06),B'00010000'                        01S0381
         BNO   @RF00381                                         01S0381
*    DO;                               /*YES,ISSUE MESSAGE(S) FOR ALL*/
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - ASUMPVTS                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - WRITE 'PRIVATE ASSUMED' MESSAGES              */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE WRITES A 'PRIVATE ASSUMED' MESSAGE TO THE       */
*/*     PROGRAMMER FOR EACH SIOT WHICH IS MARKED BY SPVTAMSG=1       */
*/*     (MEANING THAT THE REQUEST WAS FOR A STORAGE VOLUME           */
*/*     BUT WHEN NO STORAGE VOLUME COULD SATISFY THE REQUEST, IT     */
*/*     WAS ASSUMED THAT IT WAS A PRIVATE VOLUME REQUEST).           */
*/*                                                                  */
*/*   OPERATION - THE OPERATION IS DOCUMENTED BY THE CODE ITSELF.    */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     RTNCODE - 0                                                  */
*/*     SIOT1P - PTR TO THE FIRST SIOT IN THE CHAIN                  */
*/*     SPVTAMSG - 1 FOR SIOTS NEEDING A 'PVT ASSUMED' MESSAGE       */
*/*                                                                  */
*/* EXIT - NOMRAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITION - FUNCTION COMPLETED SUCCESSFULLY.                   */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*       THE FOLLOWING MESSAGE IS WRITTEN TO THE PROGRAMMER FOR     */
*/*       EACH SIOT WITH SPVTAMSG=1 : IEF506I JJJ.SSS.PPP - NO       */
*/*            STORAGE VOLUMES. 'VOLUME=PRIVATE' ASSUMED.            */
*/*                                                                  */
*/*   RETURN CODE - RTNCODE SET TO 0                                 */
*/*                                                                  */
*/********************************************************************/
*SIOTPTR = SIOT1P;                     /*POINT TO FIRST SIOT         */
         L     @15,@PC00001                                     02S0383
         L     @15,ALCWAPTR(,@15)                               02S0383
         L     SIOTPTR,SIOT1P(,@15)                             02S0383
*DO WHILE(SIOTPTR ^= ZERO              /*SCAN ALL SIOTS              */
*    & RTNCODE = SUCCESS);             /*UNLESS ERROR OCCURS         */
         B     @DE00384                                         02S0384
@DL00384 DS    0H                                               02S0385
*  IF SPVTAMSG = ON THEN               /*REQ CONVERTED TO PRIVATE    */
         TM    SPVTAMSG(SIOTPTR),B'00010000'                    02S0385
         BNO   @RF00385                                         02S0385
*    DO;                               /*YES,SET UP AND ISSUE MESSAGE*/
*      PVTMSGP = ADDR(PVTMSG);                                  02S0387
         L     PVTMSGP,@CA00215                                 02S0387
*      PVTMBUFF(1:TXTLNTH)=                                     02S0388
*          MSGTEXT(1:TXTLNTH);                                  02S0388
         LH    @03,TXTLNTH(,PVTMSGP)                            02S0388
         LR    @15,@03                                          02S0388
         BCTR  @15,0                                            02S0388
         EX    @15,@SM02976                                     02S0388
*      PVTMLNTH = TXTLNTH;                                      02S0389
         ST    @03,PVTMLNTH                                     02S0389
*      PVTJNAM = ALCJOBN;              /*INSERT JOB NAME             */
         MVI   PVTJNAM+8,C' '                                   02S0390
         L     @15,@PC00001                                     02S0390
         L     @01,ALCWAPTR(,@15)                               02S0390
         L     @15,TIOTHDRP(,@01)                               02S0390
         MVC   PVTJNAM(8),ALCJOBN(@15)                          02S0390
*      PVTSNAM = ALCSTEPN;             /*INSERT STEP NAME            */
         MVI   PVTSNAM+8,C' '                                   02S0391
         MVC   PVTSNAM(8),ALCSTEPN(@15)                         02S0391
*      PVTPSNAM = ALCPROCN;            /*INSERT PROCSTEP NAME        */
         MVI   PVTPSNAM+8,C' '                                  02S0392
         MVC   PVTPSNAM(8),ALCPROCN(@15)                        02S0392
*      PVTDDNAM = SCTDDNAM;            /*INSERT DD NAME              */
         MVC   PVTDDNAM(8),SCTDDNAM(SIOTPTR)                    02S0393
*      CALL IEFAB4F3                   /*COMPRESS BLANKS OUT OF MSG  */
*          (ADDR(PVTMBUFF),PVTMLNTH,PVTMLNTH);                  02S0394
         LA    @15,PVTMBUFF                                     02S0394
         ST    @15,@TF00001                                     02S0394
         LA    @15,@TF00001                                     02S0394
         ST    @15,@AL00001                                     02S0394
         LA    @15,PVTMLNTH                                     02S0394
         ST    @15,@AL00001+4                                   02S0394
         LA    @15,PVTMLNTH                                     02S0394
         ST    @15,@AL00001+8                                   02S0394
         L     @15,@CV00212                                     02S0394
         LA    @01,@AL00001                                     02S0394
         BALR  @14,@15                                          02S0394
*      RFY IEZJSCB BASED(JSCBPTR);                              02S0395
*      FUNC4FD = FUNC4FD && FUNC4FD;   /*CLEAR 4FD FUNC MAP          */
         XC    FUNC4FD(1),FUNC4FD                               02S0396
*      WTPONLY = ON;                   /*WTP FUNCTION ONLY           */
         OI    WTPONLY,B'00100000'                              02S0397
*      CALL IEFAB4FD                   /*CALL SYST. MSG. INTERFACE   */
*         (FUNC4FD,ADDR(PVTMBUFF),PVTMLNTH,0,JSCBPTR);          02S0398
         LA    @15,FUNC4FD                                      02S0398
         ST    @15,@AL00001                                     02S0398
         LA    @15,PVTMBUFF                                     02S0398
         ST    @15,@TF00001                                     02S0398
         LA    @15,@TF00001                                     02S0398
         ST    @15,@AL00001+4                                   02S0398
         LA    @15,PVTMLNTH                                     02S0398
         ST    @15,@AL00001+8                                   02S0398
         LA    @15,@CF00198                                     02S0398
         ST    @15,@AL00001+12                                  02S0398
         L     @15,@PC00001                                     02S0398
         L     @01,ALCWAPTR(,@15)                               02S0398
         LA    @15,JSCBPTR(,@01)                                02S0398
         ST    @15,@AL00001+16                                  02S0398
         L     @15,@CV00211                                     02S0398
         LA    @01,@AL00001                                     02S0398
         BALR  @14,@15                                          02S0398
*    END;                                                       02S0399
*  SIOTPTR = SIOTNPTR;                 /*POINT TO NEXT SIOT          */
@RF00385 L     SIOTPTR,SIOTNPTR(,SIOTPTR)                       02S0400
* END;                                                          02S0401
@DE00384 SLR   @15,@15                                          02S0401
         CR    SIOTPTR,@15                                      02S0401
         BE    @DC00384                                         02S0401
         CR    RTNCODE,@15                                      02S0401
         BE    @DL00384                                         02S0401
@DC00384 DS    0H                                               02S0402
*    END;                                                       01S0402
*IF INPUTRC=SUCCESS &                                           01S0403
*   RTNCODE=SUCCESS &                                           01S0403
*   REQUSW=OFF & RETRYSW=OFF THEN/*                             01S0403
*                                        HAS ALLOC COMPLETED OK ?    */
@RF00381 DS    0H                                               01S0403
@RC00110 SLR   @06,@06                                          01S0403
         L     @15,@PC00001+4                                   01S0403
         C     @06,INPUTRC(,@15)                                01S0403
         BNE   @RF00403                                         01S0403
         CR    RTNCODE,@06                                      01S0403
         BNE   @RF00403                                         01S0403
         TM    REQUSW,B'01100000'                               01S0403
         BNZ   @RF00403                                         01S0403
*  DO;                                 /*YES, ALLOC COMPLETED OK     */
*    IF VOLMNTSW = ON THEN             /*IS VM&V NEEDED ?    @ZA10458*/
         L     @06,@PC00001                                     01S0405
         L     @06,ALCWAPTR(,@06)                               01S0405
         L     @01,FMAPPTR(,@06)                                01S0405
         TM    VOLMNTSW(@01),B'10000000'                        01S0405
         BNO   @RF00405                                         01S0405
*      DO;                             /*YES,..                      */
*        CALL IEFAB492(SIOT1P,CANCLECB,VOLUNPTR,VOLUNSZE,ALCWASID,
*                     FAILRSCP,JSCBPTR,QMGRRBP,FMAPPTR,EXITPRMP);
         LA    @15,SIOT1P(,@06)                                 01S0407
         ST    @15,@AL00001                                     01S0407
         L     @01,CANCELP(,@06)                                01S0407
         ST    @01,@AL00001+4                                   01S0407
         LA    @15,VOLUNPTR(,@06)                               01S0407
         ST    @15,@AL00001+8                                   01S0407
         LA    @15,VOLUNSZE(,@06)                               01S0407
         ST    @15,@AL00001+12                                  01S0407
         LA    @15,ALCWASID(,@06)                               01S0407
         ST    @15,@AL00001+16                                  01S0407
         LA    @15,FAILRSCP(,@06)                               01S0407
         ST    @15,@AL00001+20                                  01S0407
         LA    @15,JSCBPTR(,@06)                                01S0407
         ST    @15,@AL00001+24                                  01S0407
         LA    @15,QMGRRBP(,@06)                                01S0407
         ST    @15,@AL00001+28                                  01S0407
         LA    @15,FMAPPTR(,@06)                                01S0407
         ST    @15,@AL00001+32                                  01S0407
         LA    @06,EXITPRMP(,@06)                               01S0407
         ST    @06,@AL00001+36                                  01S0407
         L     @15,@CV00209                                     01S0407
         LA    @01,@AL00001                                     01S0407
         BALR  @14,@15                                          01S0407
*                                      /*HANDLE VM&V  MOUNT REQUESTS */
*        RTNCODE = REG15;              /*SAVE THE RETURN CODE        */
         LR    RTNCODE,REG15                                    01S0408
*      END;                                                     01S0409
*    ELSE;                             /*DONT NEED VM&V              */
@RF00405 DS    0H                                               01S0411
*    IF ALCWISAM = ON & RTNCODE = SUCCESS THEN /*ANY ISAM REQUESTS   */
         L     @06,@PC00001                                     01S0411
         L     @06,ALCWAPTR(,@06)                               01S0411
         TM    ALCWISAM(@06),B'00000010'                        01S0411
         BNO   @RF00411                                         01S0411
         LTR   RTNCODE,RTNCODE                                  01S0411
         BNZ   @RF00411                                         01S0411
*      DO;                             /*YES CALL DADSM FOR THEM     */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - CHEKISAM                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - ERROR CHECK AND OBTAIN SPACE FOR ISAM REQS    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE ISSUES SVC 32 FOR EACH NEW ISAM REQUEST. IN     */
*/*     ADDITION THE FOLLOWING ERROR CONDITIONS ARE TESTED FOR:      */
*/*      (1) ISAM REQ WITH 4 OR MORE CONCATENATED DD'S               */
*/*      (2) ISAM + NON-ISAM REQS CONCATENATED TOGETHER              */
*/*      (3) NEW + OLD ISAM REQS CONCATENATED TOGETHER               */
*/*      (4) ISAM REQ WITH UNIT OTHER THAN DA                @ZA03922*/
*/*      (5) DUMMY + NON-DUMMY REQS CONCATENATED TOGETHER    @ZA03895*/
*/*      (6) AUTOMATIC DATA SET PROTECTION (ADSP) NOT        @Z40RPPE*/
*/*          UNIFORMLY ON/OFF IN ISAM REQUESTS               @Z40RPPE*/
*/*          CONCATENATED TOGETHER                           @Z40RPPE*/
*/*                                                                  */
*/*   OPERATION -                                                    */
*/*     THE SIOT CHAIN IS SCANNED. THE DADSM INTERFACE IS SET UP     */
*/*     FOR EACH CONCATENATED GROUP, BUT IS ONLY USED FOR ISAM       */
*/*     REQUESTS. THE ERROR TESTS AND THE TEST TO SEE IF SVC32       */
*/*     SHOULD BE ISSUED ARE MADE WHEN THE LAST SIOT OF EACH         */
*/*     CONCATENATED GROUP IS REACHED.                               */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     SIOT1P - PTR TO THE FIRST SIOT IN THE CHAIN                  */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*   CONDITIONS - SPACE SUCCESSFULLY OBTAINED FOR NEW ISAM REQS     */
*/*   OUTPUT - DIRECT-ACCESS SPACE OBTAINED                          */
*/*   RETURN CODES - RTNCODE SET TO 0                                */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE)                               */
*/*   CONDITIONS - ERROR CONDITION DETECTED BY THIS ROUTINE          */
*/*                OR SVC 32                                         */
*/*   OUTPUT - SIOT REASON CODE (SIOTRSNC) SET TO INDICATE THE ERROR */
*/*   RETURN CODES - RTNCODE SET TO NON-ZERO                         */
*/*                                                                  */
*/*   CONDITIONS - DSORG OR DISPOSITION ERROR                        */
*/*   OUTPUT -                                                       */
*/*     SIOTRSNC SET TO 28                                           */
*/*     SIOTALCD SET TO 0                                            */
*/*   RETURN CODES - 4                                               */
*/*                                                                  */
*/*   CONDITIONS - MORE THAN 3 DD'S CONCATENATED                     */
*/*   OUTPUT -                                                       */
*/*     SIOTRSNC SET TO 51                                           */
*/*     SIOTALCD SET TO 0                                            */
*/*   RETURN CODES - 4                                               */
*/*                                                                  */
*/*   CONDITIONS - ADSP NOT UNIFORMLY ON/OFF                 @Z40RPPE*/
*/*   OUTPUT -                                               @Z40RPPE*/
*/*     SIOTRSNC SET TO 13                                   @Z40RPPE*/
*/*     SIOTALCD SET TO 0                                    @Z40RPPE*/
*/*   RETURN CODES - 4                                       @Z40RPPE*/
*/*                                                          @Z40RPPE*/
*/********************************************************************/
*RFY DSAB BASED(SIOTETIO);             /*BASE THE DSAB ON PTR IN SIOT*/
*RFY INFMJFCB BASED(SJFCBPTR);         /*BASE JFCB ON PTR IN THE SIOT*/
*SIOTPTR = SIOT1P;                     /*POINT TO THE FIRST SIOT     */
         L     @15,@PC00001                                     02S0415
         L     @15,ALCWAPTR(,@15)                               02S0415
         L     SIOTPTR,SIOT1P(,@15)                             02S0415
*DO WHILE (SIOTPTR^=ZERO & RTNCODE=SUCCESS); /*SCAN ALL SIOTS        */
         B     @DE00416                                         02S0416
@DL00416 DS    0H                                               02S0417
*  IF SIOTCCAT=OFF THEN                /*CONCATENATED TO PREVIOUS DD?*/
         TM    SIOTCCAT(SIOTPTR),B'00100000'                    02S0417
         BNZ   @RF00417                                         02S0417
*    DO;                               /*NO,FIRST SIOT IN CONCAT     */
*      SAVSIOTP = SIOTPTR;             /*SAVE PTR TO THIS SIOT       */
         ST    SIOTPTR,SAVSIOTP                                 02S0419
*      ISAMBITS = ZERO;                /*ZERO SWITCHES FOR CONCAT    */
         MVI   ISAMBITS,X'00'                                   02S0420
*      ISAMNUM = ONE;                  /*INDICATE 1ST SIOT IN CONCAT */
         MVC   ISAMNUM(4),@CF00071                              02S0421
*    END;                                                       02S0422
*  ELSE                                /*CONCATENATED TO PREVIOUS DD */
*    ISAMNUM = ISAMNUM + ONE;          /*INCREMENT NUMBER IN CONCAT  */
         B     @RC00417                                         02S0423
@RF00417 LA    @15,1                                            02S0423
         AL    @15,ISAMNUM                                      02S0423
         ST    @15,ISAMNUM                                      02S0423
*  IF ISAMNUM <= THREE THEN            /*OVER THIRD DD IN CONCAT ?   */
@RC00417 L     @15,ISAMNUM                                      02S0424
         CH    @15,@CH00201                                     02S0424
         BH    @RF00424                                         02S0424
*    ISAMDSAB(ISAMNUM) = SIOTETIO;     /*NO,FILL IN DADSM INTERFACE  */
         SLA   @15,2                                            02S0425
         L     @14,SIOTETIO(,SIOTPTR)                           02S0425
         ST    @14,ISAMDSAB-4(@15)                              02S0425
*  ELSE;                               /*MORE THAN THIRD DD IN CONCAT*/
@RF00424 DS    0H                                               02S0427
*  IF JFCORGIS = ON THEN               /*ISAM REQUEST ?              */
         L     @01,SJFCBPTR(,SIOTPTR)                           02S0427
         TM    JFCORGIS(@01),B'10000000'                        02S0427
         BNO   @RF00427                                         02S0427
*    ISAMSW = ON;                      /*YES, SET SWITCH             */
         OI    ISAMSW,B'00100000'                               02S0428
*  ELSE                                /*INDICATE NON-ISAM REQUEST   */
*    NONISW = ON;                                               02S0429
         B     @RC00427                                         02S0429
@RF00427 OI    NONISW,B'00010000'                               02S0429
*  IF SCTDUMMY = ON THEN               /*DUMMY REQUEST?      @ZA03895*/
@RC00427 TM    SCTDUMMY(SIOTPTR),B'10000000'                    02S0430
         BNO   @RF00430                                         02S0430
*    DUMSW = ON;                       /*SET DUMMY SWITCH    @ZA03895*/
         OI    DUMSW,B'00000010'                                02S0431
*  ELSE                                /*NOT DUMMY -         @ZA03895*/
*    DO;                               /*                    @ZA03895*/
         B     @RC00430                                         02S0432
@RF00430 DS    0H                                               02S0433
*      NDUMSW = ON;                    /*INDICATE NOT DUMMY  @ZA03895*/
         OI    NDUMSW,B'00000001'                               02S0433
*      IF SCTSNEW = ON THEN            /*NEW REQUEST ?               */
         TM    SCTSNEW(SIOTPTR),B'00000100'                     02S0434
         BNO   @RF00434                                         02S0434
*        NEWSW = ON;                   /*YES, SET SWITCH             */
         OI    NEWSW,B'00001000'                                02S0435
*      ELSE                            /*INDICATE OLD REQUEST        */
*        OLDSW = ON;                                            02S0436
         B     @RC00434                                         02S0436
@RF00434 OI    OLDSW,B'00000100'                                02S0436
*    END;                              /*                    @ZA03895*/
@RC00434 DS    0H                                               02S0438
*  IF JFCBADSP = ON THEN               /*ADSP ON IN JFCB?    @Z40RPPE*/
@RC00430 L     @01,SJFCBPTR(,SIOTPTR)                           02S0438
         TM    JFCBADSP(@01),B'00100000'                        02S0438
         BNO   @RF00438                                         02S0438
*    ADSP = ON;                        /*YES, SET SWITCH     @Z40RPPE*/
         OI    ADSP,B'10000000'                                 02S0439
*  ELSE                                /*                    @Z40RPPE*/
*    NOADSP = ON;                      /*NO, INDICATE NO ADSP@Z40RPPE*/
         B     @RC00438                                         02S0440
@RF00438 OI    NOADSP,B'01000000'                               02S0440
*  IF ISAMSW = ON THEN                 /*ISAM CONCATENATION ?        */
@RC00438 TM    ISAMSW,B'00100000'                               02S0441
         BNO   @RF00441                                         02S0441
*    DO;                               /*YES ERR CHECK + CALL SVC 32 */
*      IF (NEWSW=ON & OLDSW=ON)        /*BOTH OLD + NEW ISAM REQS .. */
*          × NONISW = ON               /*OR ALSO NON-ISAM REQS..     */
*          ×(TIOUCBP(ONE)^=ZERO        /*OR REQ IS NOT DA ?  @ZA03922*/
*          & TIOUCBP(ONE)->UCB3DACC^=ON) THEN /*             @ZA03922*/
         TM    NEWSW,B'00001100'                                02S0443
         BO    @RT00443                                         02S0443
         TM    NONISW,B'00010000'                               02S0443
         BO    @RT00443                                         02S0443
         L     @01,SIOTETIO(,SIOTPTR)                           02S0443
         L     @01,DSABTIOT(,@01)                               02S0443
         SLR   @15,@15                                          02S0443
         ICM   @15,7,TIOUCBP(@01)                               02S0443
         LTR   @15,@15                                          02S0443
         BZ    @RF00443                                         02S0443
         TM    UCB3DACC(@15),B'00100000'                        02S0443
         BO    @RF00443                                         02S0443
@RT00443 DS    0H                                               02S0444
*        DO;                           /*YES, INDICATE ERROR         */
*          RTNCODE = FAILURE;                                   02S0445
         LA    RTNCODE,4                                        02S0445
*          SIOTRSNC = ERRCD28;         /*SET 'WRONG DSORG/DISP' CODE */
         MVC   SIOTRSNC(2,SIOTPTR),@CH00162                     02S0446
*          SIOTALCD = OFF;             /*INDIC SIOT NOT FULLY ALOC'D */
         NI    SIOTALCD(SIOTPTR),B'11111101'                    02S0447
*        END;                                                   02S0448
*      ELSE                            /*NO ERROR IN CONCAT SO FAR   */
*        DO;                                                    02S0449
         B     @RC00443                                         02S0449
@RF00443 DS    0H                                               02S0450
*          IF ISAMNUM > THREE THEN     /*MORE THAN 3 DD'S CONCAT'D ? */
         L     @15,ISAMNUM                                      02S0450
         CH    @15,@CH00201                                     02S0450
         BNH   @RF00450                                         02S0450
*            DO;                       /*YES, INDICATE ERROR         */
*              RTNCODE = FAILURE;                               02S0452
         LA    RTNCODE,4                                        02S0452
*              SIOTRSNC = ERRCD51;     /*SET 'TOO MANY CONCAT DD'S'
*                                        CODE                        */
         MVC   SIOTRSNC(2,SIOTPTR),@CH00164                     02S0453
*              SIOTALCD = OFF;         /*INDIC SIOT NOT FULLY ALOC'D */
         NI    SIOTALCD(SIOTPTR),B'11111101'                    02S0454
*            END;                                               02S0455
*          ELSE                        /*NO ERROR IN ISAM CONCAT     */
*            DO;                                                02S0456
         B     @RC00450                                         02S0456
@RF00450 DS    0H                                               02S0457
*              IF DUMSW = ON &         /*BOTH DUMMY AND      @ZA03895*/
*                 NDUMSW = ON THEN     /*NOT DUMMY IN CONCAT?@ZA03895*/
         TM    DUMSW,B'00000011'                                02S0457
         BNO   @RF00457                                         02S0457
*                DO;                   /*YES -               @ZA03895*/
*                  RTNCODE = FAILURE;  /*INDICATE ERROR      @ZA03895*/
         LA    RTNCODE,4                                        02S0459
*                  SIOTRSNC = ERRCD18; /*'INVALID DUMMY' CODE@ZA03895*/
         MVC   SIOTRSNC(2,SIOTPTR),@CH00160                     02S0460
*                  SIOTALCD = OFF;     /*SIOT NOT FULLY ALLOC@ZA03895*/
         NI    SIOTALCD(SIOTPTR),B'11111101'                    02S0461
*                END;                  /*                    @ZA03895*/
*              ELSE                    /*NO ERROR -          @ZA03895*/
*                DO;                   /*                    @ZA03895*/
         B     @RC00457                                         02S0463
@RF00457 DS    0H                                               02S0464
*                  IF ADSP = ON  & NOADSP = ON THEN             02S0464
         TM    ADSP,B'11000000'                                 02S0464
         BNO   @RF00464                                         02S0464
*                                      /*IF ADSP IS ON + OFF @Z40RPPE*/
*                    DO;               /*                    @Z40RPPE*/
*                      RTNCODE = FAILURE; /*SET RETURN CODE  @Z40RPPE*/
         LA    RTNCODE,4                                        02S0466
*                      SIOTRSNC = ERRCD13; /*SET 'ADSP ON/OFF' CODE
*                                                            @Z40RPPE*/
         MVC   SIOTRSNC(2,SIOTPTR),@CH00107                     02S0467
*                      SIOTALCD = OFF; /*SIOT NOT FULLY ALOC.@Z40RPPE*/
         NI    SIOTALCD(SIOTPTR),B'11111101'                    02S0468
*                    END;              /*                    @Z40RPPE*/
*                  ELSE                /*                    @Z40RPPE*/
*                    DO;               /*                    @Z40RPPE*/
         B     @RC00464                                         02S0470
@RF00464 DS    0H                                               02S0471
*                      IF NEWSW = ON   /*END OF NEW ISAM CONCAT ?    */
*                        & (SIOTNPTR = ZERO ×                   02S0471
*                        SIOTNPTR->SIOTCCAT = OFF) THEN         02S0471
         TM    NEWSW,B'00001000'                                02S0471
         BNO   @RF00471                                         02S0471
         L     @15,SIOTNPTR(,SIOTPTR)                           02S0471
         LTR   @15,@15                                          02S0471
         BZ    @RT00471                                         02S0471
         TM    SIOTCCAT(@15),B'00100000'                        02S0471
         BNZ   @RF00471                                         02S0471
@RT00471 DS    0H                                               02S0472
*                        DO;           /*YES, INVOKE DADSM (SVC 32)  */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - ISAMSPAC                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - OBTAIN SPACE FOR ISAM REQUESTS                */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE ISSUES SVC 32 FOR EACH ISAM REQUEST WHICH       */
*/*     NEEDS DIRECT ACCESS SPACE. IT ALSO STORES THE VOLUME SERIAL  */
*/*     NUMBER AND THE NUMBER OF VOLUMES IN THE JFCB IF THE REQUEST  */
*/*     IS NON-SPECIFIC.                                             */
*/*                                                                  */
*/*   OPERATION -  SVC 32 IS ISSUED FOR ALL THE ISAM REQUESTS WHICH  */
*/*       REQUEST SPACE AND ARE CONCATENATED TO THIS REQUEST.        */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*      SAVSIOTP - PTR TO THE FIRST SIOT IN THE CONCATENATION       */
*/*      SIOT FIELDS: SJFCBPTR - PTR TO THE JFCB                     */
*/*                   SIOTETIO - PTR TO THE DSAB                     */
*/*                   SIOTNPTR - PTR TO THE SIOT IN THE CHAIN        */
*/*                   ISAMNUM - NUMBER OF DD'S IN THE CONCATENATION  */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITIONS - SPACE OBTAINED FOR ISAM REQUESTS SUCCESSFULLY     */
*/*                                                                  */
*/*   OUTPUT - DIRECT ACCESS SPACE OBTAINED                          */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE SET TO 0                                */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE)                               */
*/*                                                                  */
*/*   CONDITIONS - ERROR IN SVC 32                                   */
*/*                                                                  */
*/*   OUTPUT - SIOT REASON CODE (SIOTRSNC) SET TO INDICATE THE ERROR */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE SET TO NON-ZERO                         */
*/*                                                                  */
*/********************************************************************/
*ISAMDSAB(ISAMNUM+ONE) = ZERO;         /*INDICATE THE END OF THE LIST*/
         L     @02,ISAMNUM                                      03S0473
         SLA   @02,2                                            03S0473
         SLR   @15,@15                                          03S0473
         ST    @15,ISAMDSAB(@02)                                03S0473
*RFY INDMSIOT BASED(SPTR);                                      03S0474
*SPTR = SAVSIOTP;                      /*POINT TO FIRST SIOT IN GROUP*/
         L     SPTR,SAVSIOTP                                    03S0475
*DO ISAMCTR = ONE TO ISAMNUM           /*PROCESS THE WHOLE ISAM GROUP*/
*    WHILE(RTNCODE = SUCCESS);                                  03S0476
         LA    ISAMCTR,1                                        03S0476
         B     @DE00476                                         03S0476
@DL00476 LTR   RTNCODE,RTNCODE                                  03S0476
         BNZ   @DC00476                                         03S0476
*  IF TIOUCBP(ONE) ^= ZERO THEN        /*NULLFILE REQ        @ZA03895*/
         L     @09,SIOTETIO(,SPTR)                              03S0477
         L     @09,DSABTIOT(,@09)                               03S0477
         SLR   @02,@02                                          03S0477
         ICM   @02,7,TIOUCBP(@09)                               03S0477
         LTR   @02,@02                                          03S0477
         BZ    @RF00477                                         03S0477
*    DO;                               /*NO--                @ZA03895*/
*      CURDSABP = ISAMDSAB(ISAMCTR);   /*COPY PTR TO THIS DSAB       */
         LR    @09,ISAMCTR                                      03S0479
         SLA   @09,2                                            03S0479
         L     @09,ISAMDSAB-4(@09)                              03S0479
         ST    @09,CURDSABP                                     03S0479
*      SAVUPTR = TIOUCBP(ONE);         /*PTR TO UCB TO GET SPACE FROM*/
         ST    @02,SAVUPTR                                      03S0480
*      IF JFCBNVOL = ZERO THEN         /*NON-SPECIFIC REQUEST        */
         L     @09,SJFCBPTR(,SPTR)                              03S0481
         CLI   JFCBNVOL(@09),0                                  03S0481
         BNE   @RF00481                                         03S0481
*        DO;                                                    03S0482
*          JFCBNVOL = ONE;             /*INDICATE 1 VOL IN JFCB      */
         MVI   JFCBNVOL(@09),X'01'                              03S0483
*          JFCBVOLS(1:6) = SAVUPTR->UCBVOLI; /*VOLSER TO JFCB        */
         MVC   JFCBVOLS(6,@09),UCBVOLI(@02)                     03S0484
*        END;                                                   03S0485
*      RFY (REG0,REG1,REG2) RSTD;                               03S0486
@RF00481 DS    0H                                               03S0487
*      REG0 = SJFCBPTR;                /*PTR TO THIS JFCB            */
         L     REG0,SJFCBPTR(,SPTR)                             03S0487
*      REG1 = ADDR(SAVUPTR);           /*PTR TO UCB PTR FOR DADSM    */
         LA    REG1,SAVUPTR                                     03S0488
*      REG2 = ADDR(ISAMPLST);          /*PTR TO LIST OF DDAB PTRS    */
         LA    REG2,ISAMPLST                                    03S0489
*      GEN (SVC 32);                   /*REQUEST SPACE FROM DADSM    */
         SVC 32
*      RFY (REG0,REG1,REG2) UNRSTD;                             03S0491
*      RTNCODE = REG15;                /*SAVE THE RETURN CODE        */
         LR    RTNCODE,REG15                                    03S0492
*      IF RTNCODE ^= SUCCESS THEN      /*WAS DADSM SUCCESSFUL ?      */
         LTR   RTNCODE,RTNCODE                                  03S0493
         BZ    @RF00493                                         03S0493
*        DO;                                                    03S0494
*          SIOTRSNC=ERORCODE(RTNCODE/FOUR); /*CALC REASON CODE       */
         LR    @00,RTNCODE                                      03S0495
         SRDA  @00,32                                           03S0495
         D     @00,@CF00068                                     03S0495
         ALR   @01,@01                                          03S0495
         LH    @09,ERORCODE-2(@01)                              03S0495
         STH   @09,SIOTRSNC(,SPTR)                              03S0495
*          SIOTALCD = OFF;                                      03S0496
         NI    SIOTALCD(SPTR),B'11111101'                       03S0496
*        END;                                                   03S0497
*      ELSE                            /*DADSM WAS SUCCESSFUL        */
*        SIODADSM = ON;                /*INDICATE DADSM SUCCESSFUL   */
         B     @RC00493                                         03S0498
@RF00493 OI    SIODADSM(SPTR),B'00000100'                       03S0498
*      SPTR = SIOTNPTR;                /*POINT TO NEXT SIOT          */
@RC00493 L     SPTR,SIOTNPTR(,SPTR)                             03S0499
*    END;                              /*                    @ZA03895*/
*END;                                                           03S0501
@RF00477 AL    ISAMCTR,@CF00071                                 03S0501
@DE00476 C     ISAMCTR,ISAMNUM                                  03S0501
         BNH   @DL00476                                         03S0501
@DC00476 DS    0H                                               03S0502
*RFY INDMSIOT BASED(SIOTPTR);                                   03S0502
*                        END;                                   02S0503
*                      ELSE;           /*OLD ISAM REQUESTS           */
@RF00471 DS    0H                                               02S0505
*                    END;              /*                    @Z40RPPE*/
*                END;                  /*                    @ZA03895*/
*            END;                                               02S0507
*        END;                                                   02S0508
*    END;                                                       02S0509
*  ELSE;                               /*NOT END OF ISAM CONCAT      */
@RF00441 DS    0H                                               02S0511
*  SIOTPTR = SIOTNPTR;                 /*POINT TO THE NEXT SIOT      */
@RC00441 L     SIOTPTR,SIOTNPTR(,SIOTPTR)                       02S0511
*END;                                                           02S0512
@DE00416 SLR   @15,@15                                          02S0512
         CR    SIOTPTR,@15                                      02S0512
         BE    @DC00416                                         02S0512
         CR    RTNCODE,@15                                      02S0512
         BE    @DL00416                                         02S0512
@DC00416 DS    0H                                               02S0513
*RFY DSAB BASED(DSABPTR);                                       02S0513
*RFY INFMJFCB BASED(JFCBPTR);                                   02S0514
*      END;                                                     01S0515
*    ELSE;                             /*NO ISAM REQS                */
@RF00411 DS    0H                                               01S0517
*    IF ALCWADUL = ON & RTNCODE = SUCCESS THEN /*ANY TIOT ENTRIES TO
*                                        CHANGE                      */
         L     @06,@PC00001                                     01S0517
         L     @06,ALCWAPTR(,@06)                               01S0517
         TM    ALCWADUL(@06),B'00000001'                        01S0517
         BNO   @RF00517                                         01S0517
         LTR   RTNCODE,RTNCODE                                  01S0517
         BNZ   @RF00517                                         01S0517
*      DO;                             /*YES, PROCESS                */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - DUALTIOT                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - SWITCH DEVICE ENTRY IF FIRST IS DUAL-DENSITY  */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE ENSURES THAT ALL MULTI-UNIT TAPE REQUESTS WHICH */
*/*     ARE ALLOCATED TO BOTH DUAL-DENSITY AND SINGLE-DENSITY UNITS  */
*/*     HAVE A SINGLE-DENSITY UNIT AS THE FIRST DEVICE ENTRY IN THE  */
*/*     TIOT. IF SUCH A REQUEST FORMERLY HAD A DUAL-DENSITY UNIT     */
*/*     ALLOCATED AS THE FIRST DEVICE ENTRY, THIS ENTRY AND ITS      */
*/*     ASSOCIATED DSAB GROUP LIST ENTRY ARE SWITCHED WITH A SINGLE  */
*/*     DENSITY DEVICE ENTRY AND ITS DSAB GROUP LIST ENTRY.          */
*/*                                                                  */
*/*   OPERATION - THE OPERATION IS DOCUMENTED BY THE CODE ITSELF.    */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/* INPUT -                                                          */
*/*     JSCBPTR - PTR TO JSCB WHICH CONTAINS                         */
*/*       JSCDSABQ - PTR TO DSAB QDB WHICH CONTAINS                  */
*/*         QDBFELMP PTR TO THE FIRST DSAB IN CHAIN                  */
*/*     UCB FIELDS: UCB3TAPE - 1 = TAPE INDICATOR                    */
*/*                 UCB2OPT2 - 1 = DUAL DENSITY (2400) INDICATOR     */
*/*                 UCB2OPT3 - 1 = DUAL DENSITY (3400) INDICATOR     */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITIONS - FUNCTION COMPLETED.                               */
*/*                                                                  */
*/*   OUTPUT - EACH TIOT ENTRY FOR A TAPE REQUEST HAS A SINGLE-      */
*/*            DENSITY UNIT AS THE FIRST DEVICE ENTRY IF POSSIBLE.   */
*/*                                                                  */
*/*   RETURN CODES - (NONE)                                          */
*/*                                                                  */
*/********************************************************************/
*RFY DSAB BASED(DSABPTR);                                       02S0519
*DSABPTR =JSCDSABQ->QDBFELMP;          /*POINT TO THE FIRST DSAB     */
         L     @06,JSCBPTR(,@06)                                02S0520
         L     @06,JSCDSABQ(,@06)                               02S0520
         L     DSABPTR,QDBFELMP(,@06)                           02S0520
*DO WHILE DSABPTR ^= ZERO;             /*SCAN ALL THE DSABS          */
         B     @DE00521                                         02S0521
@DL00521 DS    0H                                               02S0522
*  UCBPTR = TIOUCBP(1);                /*POINT TO THE FIRST UCB ALOCD*/
         L     @06,DSABTIOT(,DSABPTR)                           02S0522
         SLR   UCBPTR,UCBPTR                                    02S0522
         ICM   UCBPTR,7,TIOUCBP(@06)                            02S0522
*  IF TIOEWTCT > ONE                   /*MORE THAN ONE UNIT ALLOC'D..*/
*      & UCB3TAPE = ON                 /*..AND FIRST UCB IN TIOT IS..*/
*      & (UCB2OPT2 = ON                /*..DUAL-DENSITY TAPE ?       */
*      × UCB2OPT3 = ON) THEN                                    02S0523
         CLI   TIOEWTCT(@06),1                                  02S0523
         BNH   @RF00523                                         02S0523
         TM    UCB3TAPE(UCBPTR),B'10000000'                     02S0523
         BNO   @RF00523                                         02S0523
         TM    UCB2OPT2(UCBPTR),B'00110000'                     02S0523
         BZ    @RF00523                                         02S0523
*    DO;                               /*YES, PROCESS ..             */
*      DUALCHG = OFF;                  /*DEV ENTRY SWITCH NOT MADE   */
         NI    DUALCHG,B'01111111'                              02S0525
*      DO RELDEVNO = TWO TO TIOEWTCT   /*SCAN THE REST OF DEVICE ENTS*/
*          WHILE (DUALCHG = OFF);                               02S0526
         LA    RELDEVNO,2                                       02S0526
         B     @DE00526                                         02S0526
@DL00526 TM    DUALCHG,B'10000000'                              02S0526
         BNZ   @DC00526                                         02S0526
*        UCBPTR = TIOUCBP(RELDEVNO);   /*POINT TO UCB                */
         LR    @06,RELDEVNO                                     02S0527
         SLA   @06,2                                            02S0527
         L     @15,DSABTIOT(,DSABPTR)                           02S0527
         L     @14,TIOUCBP-5(@06,@15)                           02S0527
         LA    @14,0(,@14)                                      02S0527
         LR    UCBPTR,@14                                       02S0527
*        IF UCB2OPT2=OFF & UCB2OPT3=OFF THEN /*DUAL DENSITY ?        */
         TM    UCB2OPT2(UCBPTR),B'00110000'                     02S0528
         BNZ   @RF00528                                         02S0528
*          DO;                         /*NO,SWITCH WITH 1ST DEV TRY  */
*            DUALCHG = ON;             /*INDICATE SWITCH             */
         OI    DUALCHG,B'10000000'                              02S0530
*            SAVUCBP = TIOUCBP(1);     /*SAVE 1ST DEVICE ENTRY       */
         SLR   SAVUCBP,SAVUCBP                                  02S0531
         ICM   SAVUCBP,7,TIOUCBP(@15)                           02S0531
*            SAVGRPID = DSABGRID(1);   /*SAVE 1ST GROUP ID           */
         L     @05,DSABGIDP(,DSABPTR)                           02S0532
         L     SAVGRPID,DSABGRID(,@05)                          02S0532
*            TIOUCBP(1) = TIOUCBP(RELDEVNO);                    02S0533
         STCM  @14,7,TIOUCBP(@15)                               02S0533
*            DSABGRID(1) = DSABGRID(RELDEVNO);                  02S0534
         ST    @06,@TF00001                                     02S0534
         ALR   @06,@05                                          02S0534
         MVC   @TS00001(4),DSABGRID-4(@06)                      02S0534
         MVC   DSABGRID(4,@05),@TS00001                         02S0534
*            TIOUCBP(RELDEVNO) = SAVUCBP;                       02S0535
         AL    @15,@TF00001                                     02S0535
         STCM  SAVUCBP,7,TIOUCBP-4(@15)                         02S0535
*            DSABGRID(RELDEVNO) = SAVGRPID;                     02S0536
         L     @08,@TF00001                                     02S0536
         ST    SAVGRPID,DSABGRID-4(@08,@05)                     02S0536
*          END;                                                 02S0537
*        ELSE;                         /*DEV ENTRY IS DUAL-DENSITY   */
@RF00528 DS    0H                                               02S0539
*      END;                                                     02S0539
         AL    RELDEVNO,@CF00071                                02S0539
@DE00526 L     @06,DSABTIOT(,DSABPTR)                           02S0539
         SLR   @15,@15                                          02S0539
         IC    @15,TIOEWTCT(,@06)                               02S0539
         CR    RELDEVNO,@15                                     02S0539
         BNH   @DL00526                                         02S0539
@DC00526 DS    0H                                               02S0540
*    END;                                                       02S0540
*  ELSE;                               /*DONT PROCESS TIOT ENTRY     */
@RF00523 DS    0H                                               02S0542
*  DSABPTR = DSABFCHN;                 /*POINT TO THE NEXT DSAB      */
         L     DSABPTR,DSABFCHN(,DSABPTR)                       02S0542
*END;                                                           02S0543
@DE00521 LTR   DSABPTR,DSABPTR                                  02S0543
         BNZ   @DL00521                                         02S0543
*      END;                                                     01S0544
*    ELSE;                             /*NO TIOT ENTRIES TO CHANGE   */
@RF00517 DS    0H                                               01S0546
*    IF RTNCODE = SUCCESS THEN         /*ANY ERRORS  ?               */
         LTR   RTNCODE,RTNCODE                                  01S0546
         BNZ   @RF00546                                         01S0546
*      DO;                             /*NO ERRORS                   */
*/********************************************************************/
*/*                                                          @Y30QPPA*/
*/* SEGMENT NAME - TIOTMOVE                                  @Y30QPPA*/
*/*                                                          @Y30QPPA*/
*/* DESCRIPTIVE NAME - REARRANGE TIOT UCB ENTRIES TO         @Y30QPPA*/
*/*                    CORRESPOND TO THE ORDER OF JES3       @Y30QPPA*/
*/*                    DEVICE SELECTION                      @Y30QPPA*/
*/*                                                          @Y30QPPA*/
*/* FUNCTION -                                               @Y30QPPA*/
*/*   THIS SEGMENT INSURES THAT THE ORDER OF UCB ADDRESSES   @Y30QPPA*/
*/*   IN THE TIOT CORRESPONDS TO THE ORDER EXPECTED BY JES3. @Y30QPPA*/
*/*   REORDERING IS ONLY NECESSARY FOR MULTI-UNIT REQUESTS   @Y30QPPA*/
*/*   HANDLED BY JES3 WHICH REQUIRED MORE THAN ONE           @Y30QPPA*/
*/*   NON-SPECIFIC VOLUME.                                   @Y30QPPA*/
*/*                                                          @Y30QPPA*/
*/*   OPERATION -                                            @Y30QPPA*/
*/*      THIS SEGMENT SCANS ALL SIOTS FOR MULTI-UNIT         @Y30QPPA*/
*/*      REQUESTS WHICH WERE HANDLED BY JES3(SIOTJES3=1) AND @Y30QPPA*/
*/*      WHICH REQUIRED TWO OR MORE NON-SPECIFIC VOLUMES.    @Y30QPPA*/
*/*      FOR EACH SUCH SIOT, THE UCB ADDRESSES WHICH WERE    @Y30QPPA*/
*/*      SELECTED BY JES3 AND STORED IN THE VOLUNIT          @Y30QPPA*/
*/*      ENTRIES, OR THE UCB THAT WAS MARKED ALLOCATED IN THE@G18MP21*/
*/*      UCB POOL, ARE COMPARED AGAINST THE THE TIOT UCB     @G18MP21*/
*/*      ENTRIES. IF THE ORDER OF THE UCBS IN THE TIOT IS    @Y30QPPA*/
*/*      INCORRECT, THE CORRECT AND INCORRECT TIOT UCB       @Y30QPPA*/
*/*      ENTRIES ARE EXCHANGED. THIS PROCESSING IS CONTINUED @Y30QPPA*/
*/*      UNTIL THE ORDER OF THE TIOT UCB ENTRIES CORRESPONDS @Y30QPPA*/
*/*      TO THE ORDER OF THE UCB ADDRESSES IN THE VOLUNIT    @Y30QPPA*/
*/*      ENTRIES FOR THE SIOT. THE CORRESPONDING DSAB GROUP  @Y30QPPA*/
*/*      ID LIST ENTRIES ARE ALSO REORDERED.                 @Y30QPPA*/
*/*                                                          @Y30QPPA*/
*/* ENTRY - IN-LINE SUBROUTINE                               @Y30QPPA*/
*/*   PURPOSE - SEE FUNCTION                                 @Y30QPPA*/
*/*   INPUT -                                                @Y30QPPA*/
*/*     ALCWA                                                @Y30QPPA*/
*/*       SIOT1P - PTR TO 1ST SIOT                           @Y30QPPA*/
*/*     SIOT                                                 @Y30QPPA*/
*/*       SIOTJES3 - DEVICE SELECTION MADE BY JES3           @Y30QPPA*/
*/*       SVOLUNAD - PTR TO 1ST VOLUNIT ENTRY FOR SIOT       @Y30QPPA*/
*/*       SVOLUNNO - NUMBER OF VOLUNIT ENTRIES FOR SIOT      @Y30QPPA*/
*/*       SIOTOTUN - NUMBER OF UNITS FOR REQUEST             @Y30QPPA*/
*/*       SIOTETIO - PTR TO DSAB/TIOT                        @Y30QPPA*/
*/*     VOLUNIT TABLE(VOLUNTAB)                              @Y30QPPA*/
*/*       VUUCBP - PTR TO UCB SELECTED BY JES3               @Y30QPPA*/
*/*     DSAB                                                 @Y30QPPA*/
*/*       PTR TO TIOT DD ENTRY                               @Y30QPPA*/
*/*       GROUP ID LIST ENTRY                                @Y30QPPA*/
*/*                                                          @Y30QPPA*/
*/* EXIT-NORMAL -                                            @Y30QPPA*/
*/*   CONDITIONS - TIOT UCB ENTRIES REARRANGED IF NECESSARY  @Y30QPPA*/
*/*   OUTPUT -                                               @Y30QPPA*/
*/*     TIOT UCB ENTRIES AND DSAB GROUP ID ENTRIES           @Y30QPPA*/
*/*     REARRANGED IF NECESSARY                              @Y30QPPA*/
*/*   RETURN CODES - NONE                                    @Y30QPPA*/
*/*                                                          @Y30QPPA*/
*/* EXIT-ERROR - NONE                                        @Y30QPPA*/
*/*                                                          @Y30QPPA*/
*/********************************************************************/
*SIOTPTR = SIOT1P;                     /*PTR TO 1ST SIOT     @Y30QPPA*/
         L     @15,@PC00001                                     02S0548
         L     @01,ALCWAPTR(,@15)                               02S0548
         L     SIOTPTR,SIOT1P(,@01)                             02S0548
*DO WHILE SIOTPTR ^= ZERO;             /*SCAN ALL SIOTS      @Y30QPPA*/
         B     @DE00549                                         02S0549
@DL00549 DS    0H                                               02S0550
*  VUPTR = SVOLUNAD;                   /*PTR 1ST VU ENT      @Y30QPPA*/
         L     @15,SVOLUNAD(,SIOTPTR)                           02S0550
         LR    VUPTR,@15                                        02S0550
*  IF SIOTJES3 = ON &                  /*JES3 CHOSE DEVICES  @Y30QPPA*/
*     SIOTOTUN > 1 THEN                /*MULTI-UNIT REQUEST  @Y30QPPA*/
         TM    SIOTJES3(SIOTPTR),B'00100000'                    02S0551
         BNO   @RF00551                                         02S0551
         CLI   SIOTOTUN(SIOTPTR),1                              02S0551
         BNH   @RF00551                                         02S0551
*    DO;                               /*REARRANGE IF NEEDED @Y30QPPA*/
*          DSABPTR = SIOTETIO;         /*GET PTR TO DSAB     @Y30QPPA*/
         L     DSABPTR,SIOTETIO(,SIOTPTR)                       02S0553
*          VUPTR = SVOLUNAD;           /*1ST VU ENT FOR SIOT @Y30QPPA*/
         LR    VUPTR,@15                                        02S0554
*          TUCBNUM = ZERO;             /*ZERO TIOT ENT INDEX @Y30QPPA*/
         SLR   TUCBNUM,TUCBNUM                                  02S0555
*          DO VUCBCTR = 1 TO SVOLUNNO; /*PROCESS VU ENTS     @Y30QPPA*/
         LA    @04,1                                            02S0556
         B     @DE00556                                         02S0556
@DL00556 DS    0H                                               02S0557
*            TMTCHSW = OFF;            /*INIT LOOP CONTROL   @Y30QPPA*/
         NI    TMTCHSW,B'01111111'                              02S0557
*            IF VDEVREQD = ON THEN     /*UNIT REQUIRED       @Y30QPPA*/
         TM    VDEVREQD(VUPTR),B'00100000'                      02S0558
         BNO   @RF00558                                         02S0558
*              DO;                     /*                    @Y30QPPA*/
*                TUCBNUM = TUCBNUM + 1; /*UP UCB INDEX       @Y30QPPA*/
         LA    @04,1                                            02S0560
         ALR   TUCBNUM,@04                                      02S0560
*                DO TUCBCTR = 1 TO TIOEWTCT /*SCAN TIOT ENTS @Y30QPPA*/
*                   WHILE(TMTCHSW = OFF); /*UNTIL MATCH      @Y30QPPA*/
         LR    TUCBCTR,@04                                      02S0561
         B     @DE00561                                         02S0561
@DL00561 TM    TMTCHSW,B'10000000'                              02S0561
         BNZ   @DC00561                                         02S0561
*                  IF SU18BIT=ON&      /*SU 18 IN SYSTEM?    @G18MP21*/
*                     VDEVREQD=ON THEN /*AND DEVICE REQUIRED @G18MP21*/
         L     @09,CVTPTR                                       02S0562
         L     @09,CVTIHASU(,@09)                               02S0562
         TM    SU18BIT(@09),B'00100000'                         02S0562
         BNO   @RF00562                                         02S0562
         TM    VDEVREQD(VUPTR),B'00100000'                      02S0562
         BNO   @RF00562                                         02S0562
*                    DO;               /*YES, PROCESS SU18   @G18MP21*/
*                      DO I=1 TO VUPOOL# /*SCAN UCB POOL     @G18MP21*/
*                         WHILE VUGRALCD(I)^=ON; /*WHILE ALLOCATED
*                                         UCB NOT FOUND      @G18MP21*/
         LA    I,1                                              02S0564
         B     @DE00564                                         02S0564
@DL00564 LR    @09,I                                            02S0564
         SLA   @09,3                                            02S0564
         L     @01,VUGRID(,VUPTR)                               02S0564
         ALR   @01,@09                                          02S0564
         AL    @01,@CF02982                                     02S0564
         TM    VUGRALCD-4(@01),B'10000000'                      02S0564
         BO    @DC00564                                         02S0564
*                      END;            /*END UCB POOL SCAN   @G18MP21*/
         AL    I,@CF00071                                       02S0565
@DE00564 L     @09,VUUCBP(,VUPTR)                               02S0565
         C     I,VUPOOL#(,@09)                                  02S0565
         BNH   @DL00564                                         02S0565
@DC00564 DS    0H                                               02S0566
*                      ALUCBP=VUCBS(I);/*SAVE ALLOC'D UCB    @G18MP21*/
         LR    @15,I                                            02S0566
         SLA   @15,2                                            02S0566
         L     @01,VUUCBP(,VUPTR)                               02S0566
         L     ALUCBP,VUCBS-4(@15,@01)                          02S0566
*                    END;              /*END SU18 PROCESSING @G18MP21*/
*                  ELSE                /*SU 18 NOT IN SYSTEM @G18MP21*/
*                    ALUCBP=VUUCBP;    /*GET UCB FROM VUTABLE@G18MP21*/
         B     @RC00562                                         02S0568
@RF00562 L     ALUCBP,VUUCBP(,VUPTR)                            02S0568
*                  IF ALUCBP = TIOUCBP(TUCBCTR) THEN /*MATCH @G18MP21*/
@RC00562 LR    @04,TUCBCTR                                      02S0569
         SLA   @04,2                                            02S0569
         L     @15,DSABTIOT(,DSABPTR)                           02S0569
         L     @14,TIOUCBP-5(@04,@15)                           02S0569
         LA    @14,0(,@14)                                      02S0569
         CR    ALUCBP,@14                                       02S0569
         BNE   @RF00569                                         02S0569
*                    DO;               /*                    @Y30QPPA*/
*                      TMTCHSW = ON;   /*EXIT LOOP           @Y30QPPA*/
         OI    TMTCHSW,B'10000000'                              02S0571
*                      IF TUCBNUM ^= TUCBCTR THEN /*         @Y30QPPA*/
         CR    TUCBNUM,TUCBCTR                                  02S0572
         BE    @RF00572                                         02S0572
*                        DO;           /*WRONG ORDER-SWITCH  @Y30QPPA*/
         ST    @04,@TF00001                                     02S0573
*                          SAVUCBP = TIOUCBP(TUCBNUM); /*SAVE UCB
*                                        POINTER             @Y30QPPA*/
         LR    @01,TUCBNUM                                      02S0574
         SLA   @01,2                                            02S0574
         L     SAVUCBP,TIOUCBP-5(@01,@15)                       02S0574
         LA    SAVUCBP,0(,SAVUCBP)                              02S0574
*                          SAVGRPID = DSABGRID(TUCBNUM); /*SAVE GROUP
*                                        ID                  @Y30QPPA*/
         L     @00,DSABGIDP(,DSABPTR)                           02S0575
         LR    @15,@00                                          02S0575
         L     SAVGRPID,DSABGRID-4(@01,@15)                     02S0575
*                          TIOUCBP(TUCBNUM)=TIOUCBP(TUCBCTR); /*SWTH
*                                                            @Y30QPPA*/
         L     @15,DSABTIOT(,DSABPTR)                           02S0576
         ST    @01,@TF00002                                     02S0576
         ALR   @01,@15                                          02S0576
         STCM  @14,7,TIOUCBP-4(@01)                             02S0576
*                          TIOUCBP(TUCBCTR)=SAVUCBP; /*      @Y30QPPA*/
         AL    @15,@TF00001                                     02S0577
         STCM  SAVUCBP,7,TIOUCBP-4(@15)                         02S0577
*                          DSABGRID(TUCBNUM) =                  02S0578
*                            DSABGRID(TUCBCTR);      /*      @Y30QPPA*/
         LR    @04,@00                                          02S0578
         AL    @04,@TF00002                                     02S0578
         LR    @01,@00                                          02S0578
         AL    @01,@TF00001                                     02S0578
         MVC   @TS00001(4),DSABGRID-4(@01)                      02S0578
         MVC   DSABGRID-4(4,@04),@TS00001                       02S0578
*                          DSABGRID(TUCBCTR)=SAVGRPID; /*    @Y30QPPA*/
         LR    @04,@00                                          02S0579
         L     @01,@TF00001                                     02S0579
         ST    SAVGRPID,DSABGRID-4(@01,@04)                     02S0579
*                        END;          /*                    @Y30QPPA*/
*                      ELSE;           /*RIGHT ORDER         @Y30QPPA*/
@RF00572 DS    0H                                               02S0582
*                    END;              /*                    @Y30QPPA*/
*                  ELSE;               /*NO MATCH            @Y30QPPA*/
@RF00569 DS    0H                                               02S0584
*                END;                  /*                    @Y30LPPA*/
         AL    TUCBCTR,@CF00071                                 02S0584
@DE00561 L     @09,DSABTIOT(,DSABPTR)                           02S0584
         SLR   @04,@04                                          02S0584
         IC    @04,TIOEWTCT(,@09)                               02S0584
         CR    TUCBCTR,@04                                      02S0584
         BNH   @DL00561                                         02S0584
@DC00561 DS    0H                                               02S0585
*              END;                    /*                    @Y30LPPA*/
*            ELSE;                     /*UNIT NOT REQUIRED   @Y30LPPA*/
@RF00558 DS    0H                                               02S0587
*            VUPTR = VUPTR + LENGTH(VOLUNTAB); /*NEXT VU     @Y30LPPA*/
         AH    VUPTR,@CH00162                                   02S0587
*          END;                        /*                    @Y30LPPA*/
         LA    @04,1                                            02S0588
         AH    @04,VUCBCTR                                      02S0588
@DE00556 STH   @04,VUCBCTR                                      02S0588
         CH    @04,SVOLUNNO(,SIOTPTR)                           02S0588
         BNH   @DL00556                                         02S0588
*    END;                              /*                    @Y30LPPA*/
*  ELSE;                               /*REQ NOT JES3        @Y30LPPA*/
@RF00551 DS    0H                                               02S0591
*  SIOTPTR = SIOTNPTR;                 /*GET PTR TO NXT SIOT @Y30LPPA*/
         L     SIOTPTR,SIOTNPTR(,SIOTPTR)                       02S0591
*END;                                  /*                    @Y30LPPA*/
@DE00549 LTR   SIOTPTR,SIOTPTR                                  02S0592
         BNZ   @DL00549                                         02S0592
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - ALLOCMSG                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - WRITE 'ALLOCATED' MESSAGES                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THIS ROUTINE IS ENTERED WHEN ALLOCATION MESSAGES ARE TO BE     */
*/*   WRITTEN TO SYSOUT FOR ALL OF THE REQUESTS JUST ALLOCATED.      */
*/*                                                                  */
*/*      THE OPERATION IS DOCUMENTED BY THE CODE ITSELF.             */
*/*                                                                  */
*/* ENTRY - INLINE SUBROUTINE                                        */
*/*                                                                  */
*/*   PURPOSE - TO WRITE ALLOCATION (AND POSSIBLY ALLOCATION HEADER) */
*/*             MESSAGES.                                            */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*       HDRMSGSW - WRITE HEADER MESSAGE INDICATOR IN FUNCMAP       */
*/*                                                                  */
*/* EXIT - NORMAL - INLINE SUBROUTINE                                */
*/*                                                                  */
*/*   CONDITION - MESSAGES WRITTEN SUCCESSFULLY.                     */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*       MESSAGES WRITTEN                                           */
*/*                                                                  */
*/*   RETURN CODES -                                                 */
*/*       RTNCODE - 4                                                */
*/*                                                                  */
*/* EXIT - ERROR - INLINE SUBROUTINE                                 */
*/*                                                                  */
*/*   CONDITION - AN ERROR OCCURRED WHILE WRITING A MESSAGES         */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*       REASONCD SET BY IEFAB4EE                                   */
*/*                                                                  */
*/*   RETURN CODES -                                                 */
*/*       RTNCODE - 4                                                */
*/*                                                                  */
*/********************************************************************/
*MSGFUNC = MINITFNC;                   /*INIT IEFAB4EE FUNCTION MAP  */
         MVC   MSGFUNC(1),MINITFNC                              02S0593
*IF MTRJOBSW = ON & UNITRECS=ON THEN   /*MONITOR JOBNAMES & UNITRECS?*/
         L     @06,@PC00001                                     02S0594
         L     @06,ALCWAPTR(,@06)                               02S0594
         L     @01,FMAPPTR(,@06)                                02S0594
         TM    MTRJOBSW(@01),B'00100000'                        02S0594
         BNO   @RF00594                                         02S0594
         TM    UNITRECS(@06),B'10000000'                        02S0594
         BNO   @RF00594                                         02S0594
*  DO;                                 /*YES, ..                     */
*    RTECONSL = ON;                    /*RTE UR ALLOC MSG TO CONSOLE */
*    BUILDHDR = ON;                    /*WRITE A HEADER MSG          */
         OI    RTECONSL,B'10010000'                             02S0597
*  END;                                                         02S0598
*ELSE;                                 /*NO MONITOR JOBNAMES         */
@RF00594 DS    0H                                               02S0600
*IF WRTMSGSW = ON THEN                 /*ALLOCATION MSGLEVEL=1 ?     */
         L     @06,@PC00001                                     02S0600
         L     @06,ALCWAPTR(,@06)                               02S0600
         L     @06,FMAPPTR(,@06)                                02S0600
         TM    WRTMSGSW(@06),B'01000000'                        02S0600
         BNO   @RF00600                                         02S0600
*  DO;                                 /*YES, ..                     */
*    RTECONLY = OFF;                   /*ROUTE MSGS TO PROGRAMMER    */
         NI    RTECONLY,B'11110111'                             02S0602
*    IF HDRMSGSW = ON THEN             /*HEADER MSG WANTED ?         */
         TM    HDRMSGSW(@06),B'01000000'                        02S0603
         BNO   @RF00603                                         02S0603
*      DO;                                                      02S0604
*        BUILDHDR = ON;                /*YES, WRITE A HEADER MSG     */
*        HDRCONLY = OFF;               /*WRITE HDR TO PROGRAMMER     */
         OI    BUILDHDR,B'10000000'                             02S0606
         NI    HDRCONLY,B'11111011'                             02S0606
*      END;                                                     02S0607
*    ELSE;                             /*HEADER MSG NOT WANTED       */
@RF00603 DS    0H                                               02S0609
*  END;                                                         02S0609
*ELSE;                                 /*ALLOCATION MSGLEVEL=0       */
@RF00600 DS    0H                                               02S0611
*IF BUILDHDR = ON                                               02S0611
*    × RTECONLY = OFF THEN                                      02S0611
         TM    BUILDHDR,B'10000000'                             02S0611
         BNZ   @RT00611                                         02S0611
         TM    RTECONLY,B'00001000'                             02S0611
         BO    @RF00611                                         02S0611
@RT00611 DS    0H                                               02S0612
*  DO;                                 /*WRITE ALLOCATED MSGS        */
*    CALL IEFAB4EE (MSGFUNC,SIOT1P,TIOTHDRP,REASONCD,JSCBPTR,   02S0613
*                   LOJSSNMP);         /*SUBSYSTEM NAME PTR  @G29AN2F*/
         LA    @06,MSGFUNC                                      02S0613
         ST    @06,@AL00001                                     02S0613
         L     @06,@PC00001                                     02S0613
         L     @06,ALCWAPTR(,@06)                               02S0613
         LA    @15,SIOT1P(,@06)                                 02S0613
         ST    @15,@AL00001+4                                   02S0613
         LA    @15,TIOTHDRP(,@06)                               02S0613
         ST    @15,@AL00001+8                                   02S0613
         L     @01,FAILRSCP(,@06)                               02S0613
         ST    @01,@AL00001+12                                  02S0613
         LA    @15,JSCBPTR(,@06)                                02S0613
         ST    @15,@AL00001+16                                  02S0613
         LA    @06,LOJSSNMP(,@06)                               02S0613
         ST    @06,@AL00001+20                                  02S0613
         L     @15,@CV00214                                     02S0613
         LA    @01,@AL00001                                     02S0613
         BALR  @14,@15                                          02S0613
*    RTNCODE = REG15;                  /*SAVE THE RETURN CODE        */
         LR    RTNCODE,REG15                                    02S0614
*  END;                                                         02S0615
*ELSE;                                                          02S0616
@RF00611 DS    0H                                               02S0617
*      END;                                                     01S0617
*    ELSE;                             /*ERROR,DONT WRITE ALLOC MSGS */
@RF00546 DS    0H                                               01S0619
*  END;                                                         01S0619
*ELSE;                                 /*ALLOC NOT DONE AND/OR ERRORS*/
@RF00403 DS    0H                                               01S0621
*IF QMGRRBP ^=ZERO THEN                /*WAS ALLOC Q=MGR EVER CALLED?*/
         SLR   @06,@06                                          01S0621
         L     @15,@PC00001                                     01S0621
         L     @15,ALCWAPTR(,@15)                               01S0621
         C     @06,QMGRRBP(,@15)                                01S0621
         BE    @RF00621                                         01S0621
*  DO;                                 /*YES,END Q=MGR PROCESSING    */
*    IF DSSTAPE = ON THEN              /*WERE TAPES LOCKED ?         */
         TM    DSSTAPE(@15),B'00001000'                         01S0623
         BNO   @RF00623                                         01S0623
*      DO;                                                      01S0624
*         DO; /*MODESET  KEYADDR(ZERO)*/                        01S0625
*           SPKA (ZERO); /*SET PSW KEY*/                        01S0626
         SPKA  0(@06)                                           01S0626
*         END; /*MODESET  KEYADDR(ZERO)*/       /*KEY 0 NEEDED TO REF C
*D     */                                                       01S0627
*        SAVECNT = CSDTCNT;            /*YES, UNLOCK                 */
         L     @06,CVTPTR                                       01S0628
         L     @06,CVTCSD(,@06)                                 01S0628
         L     SAVECNT,CSDTCNT(,@06)                            01S0628
*        TCNTLOOP: MINUSCNT = SAVECNT - ONE;                    01S0629
TCNTLOOP LR    MINUSCNT,SAVECNT                                 01S0629
         BCTR  MINUSCNT,0                                       01S0629
*          CS(SAVECNT,MINUSCNT,CSDTCNT);                        01S0630
         L     @06,CVTPTR                                       01S0630
         L     @06,CVTCSD(,@06)                                 01S0630
         CS    SAVECNT,@03,CSDTCNT(@06)                         01S0630
*          BC(1,TCNTLOOP);             /*CONTINUE UNTIL UPDATE DONE  */
         BC    1,TCNTLOOP                                       01S0631
*          DSSTAP = OFF;                                        01S0632
         L     @06,@PC00001                                     01S0632
         L     @06,ALCWAPTR(,@06)                               01S0632
         L     @06,EXITPRMP(,@06)                               01S0632
         NI    DSSTAP(@06),B'11101111'                          01S0632
*           DO; /*MODESET  EXTKEY(SCHED)*/                      01S0633
*             SPKA (16); /*SET PSW KEY*/                        01S0634
         LA    @06,16                                           01S0634
         SPKA  0(@06)                                           01S0634
*           END; /*MODESET  EXTKEY(SCHED)*/     /*GET SCHED KEY AGAIN
*      */                                                       01S0635
*      END;                                                     01S0636
*    IF DSSUNIT = ON THEN              /*WERE UNIT RCD DEVS LOCKED ? */
@RF00623 L     @06,@PC00001                                     01S0637
         L     @06,ALCWAPTR(,@06)                               01S0637
         TM    DSSUNIT(@06),B'00000100'                         01S0637
         BNO   @RF00637                                         01S0637
*      DO;                                                      01S0638
*         DO; /*MODESET  KEYADDR(ZERO)*/                        01S0639
*           SPKA (ZERO); /*SET PSW KEY*/                        01S0640
         SLR   @06,@06                                          01S0640
         SPKA  0(@06)                                           01S0640
*         END; /*MODESET  KEYADDR(ZERO)*/       /*KEY 0 NEEDED TO REF C
*D     */                                                       01S0641
*        SAVECNT = CSDUCNT;            /*YES, UNLOCK                 */
         L     @06,CVTPTR                                       01S0642
         L     @06,CVTCSD(,@06)                                 01S0642
         L     SAVECNT,CSDUCNT(,@06)                            01S0642
*        UCNTLOOP: MINUSCNT = SAVECNT - ONE;                    01S0643
UCNTLOOP LR    MINUSCNT,SAVECNT                                 01S0643
         BCTR  MINUSCNT,0                                       01S0643
*          CS(SAVECNT,MINUSCNT,CSDUCNT);                        01S0644
         L     @06,CVTPTR                                       01S0644
         L     @06,CVTCSD(,@06)                                 01S0644
         CS    SAVECNT,@03,CSDUCNT(@06)                         01S0644
*          BC(1,UCNTLOOP);             /*CONTINUE UNTIL UPDATE DONE  */
         BC    1,UCNTLOOP                                       01S0645
*           DO; /*MODESET  EXTKEY(SCHED)*/                      01S0646
*             SPKA (16); /*SET PSW KEY*/                        01S0647
         LA    @06,16                                           01S0647
         SPKA  0(@06)                                           01S0647
*           END; /*MODESET  EXTKEY(SCHED)*/     /*GET SCHED KEY AGAIN
*      */                                                       01S0648
*          DSSUNREC = OFF;                                      01S0649
         L     @06,@PC00001                                     01S0649
         L     @06,ALCWAPTR(,@06)                               01S0649
         L     @06,EXITPRMP(,@06)                               01S0649
         NI    DSSUNREC(@06),B'11110111'                        01S0649
*      END;                                                     01S0650
*    IF AQMECODE ^= TERMFUNC THEN      /*Q-MGR ALREADY ENDED ?       */
@RF00637 L     @06,@PC00001                                     01S0651
         L     @06,ALCWAPTR(,@06)                               01S0651
         L     @15,QMGRRBP(,@06)                                01S0651
         CLC   AQMECODE(2,@15),@CH00087                         01S0651
         BE    @RF00651                                         01S0651
*      DO;                             /*NO, TERM Q-MGR              */
*        IF INPUTRC = SUCCESS          /*ALLOC TO BE REQU'ED         */
*          & RTNCODE = SUCCESS                                  01S0653
*          & REQUSW = ON THEN                                   01S0653
         SLR   @14,@14                                          01S0653
         L     @09,@PC00001+4                                   01S0653
         C     @14,INPUTRC(,@09)                                01S0653
         BNE   @RF00653                                         01S0653
         CR    RTNCODE,@14                                      01S0653
         BNE   @RF00653                                         01S0653
         TM    REQUSW,B'00100000'                               01S0653
         BNO   @RF00653                                         01S0653
*          DO;                         /*YES, WAIT WITHOUT RESOURCES */
*            AQMECODE = RLSEFUNC;      /*INDICATE 'RELEASE' FUNCTION */
         MVC   AQMECODE(2,@15),@CH00068                         01S0655
*            AQMMASKP = ADDR(ONESMASK);                         01S0656
         LA    @14,ONESMASK                                     01S0656
         ST    @14,AQMMASKP(,@15)                               01S0656
*            CALL IEFAB4FA(QMGRRBP,EXITPRMP); /*FORCE ALL GROUPS HELD*/
         LA    @15,QMGRRBP(,@06)                                01S0657
         ST    @15,@AL00001                                     01S0657
         LA    @06,EXITPRMP(,@06)                               01S0657
         ST    @06,@AL00001+4                                   01S0657
         L     @15,@CV00210                                     01S0657
         LA    @01,@AL00001                                     01S0657
         BALR  @14,@15                                          01S0657
*            AQMECODE = WAITFUNC;      /*INDICATE WAIT FUNCTION      */
         L     @06,@PC00001                                     01S0658
         L     @06,ALCWAPTR(,@06)                               01S0658
         L     @15,QMGRRBP(,@06)                                01S0658
         MVC   AQMECODE(2,@15),@CH00076                         01S0658
*            AQMMASKP = WMASK2P;       /*POINT TO WAIT MASK          */
         MVC   AQMMASKP(4,@15),WMASK2P(@06)                     01S0659
*            CALL IEFAB4FA(QMGRRBP,EXITPRMP);                   01S0660
         LA    @15,QMGRRBP(,@06)                                01S0660
         ST    @15,@AL00001                                     01S0660
         LA    @06,EXITPRMP(,@06)                               01S0660
         ST    @06,@AL00001+4                                   01S0660
         L     @15,@CV00210                                     01S0660
         LA    @01,@AL00001                                     01S0660
         BALR  @14,@15                                          01S0660
*            RTNCODE = REG15;          /*SAVE THE RETURN CODE        */
         LR    RTNCODE,REG15                                    01S0661
*            IF RTNCODE ^= SUCCESS THEN /*ANY ERRORS                 */
         LTR   RTNCODE,RTNCODE                                  01S0662
         BZ    @RF00662                                         01S0662
*              REASONCD = OPERCANC;    /*YES OPERATOR CANCELLED      */
         L     @06,@PC00001                                     01S0663
         L     @06,ALCWAPTR(,@06)                               01S0663
         L     @06,FAILRSCP(,@06)                               01S0663
         MVC   REASONCD(2,@06),@CH00076                         01S0663
*            ELSE;                     /*NO ERRORS                   */
@RF00662 DS    0H                                               01S0665
*          END;                                                 01S0665
*        ELSE;                         /*NOT REQUEUE                 */
@RF00653 DS    0H                                               01S0667
*        AQMECODE = TERMFUNC;          /*SET TERMINATION FUNC CODE   */
         L     @06,@PC00001                                     01S0667
         L     @06,ALCWAPTR(,@06)                               01S0667
         L     @01,QMGRRBP(,@06)                                01S0667
         MVC   AQMECODE(2,@01),@CH00087                         01S0667
*        CALL IEFAB4FA(QMGRRBP,EXITPRMP); /*CALL ALLOC Q-MGR         */
         LA    @15,QMGRRBP(,@06)                                01S0668
         ST    @15,@AL00001                                     01S0668
         LA    @06,EXITPRMP(,@06)                               01S0668
         ST    @06,@AL00001+4                                   01S0668
         L     @15,@CV00210                                     01S0668
         LA    @01,@AL00001                                     01S0668
         BALR  @14,@15                                          01S0668
*      END;                                                     01S0669
*    ELSE;                             /*Q-MGR ALREADY ENDED         */
@RF00651 DS    0H                                               01S0671
*  END;                                                         01S0671
*ELSE;                                 /*ALLOC Q-MGR NEVER CALLED    */
@RF00621 DS    0H                                               01S0673
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - ALLERMSG                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - ENSURE ALL ERRORS DETECTED                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS MODULE TURNS OFF THE SIOTALCD BIT FOR ANY REQUESTS     */
*/*      WHICH HAD ALL THEIR DEVICE-REQUIRED ENTRIES ALLOCATED,      */
*/*      BUT HAD AN ERROR ON ENTRY WHICH DID NOT REQUIRE A DEVICE.   */
*/*                                                                  */
*/*   OPERATION - THE OPERATION IS DOCUMENTED BY THE CODE ITSELF.    */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*      RTNCODE  - RETURN CODE FOR THIS MODULE                      */
*/*      INPUTRC  - RETURN FOR PREVIOUS ALLOCATION ROUTINES          */
*/*      ALCWAPTR - PTR TO THE ALLOCATION WORK AREA, WHICH CONTAINS  */
*/*        VOLUNPTR - PTR TO THE VOLUNIT TABLE                       */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITIONS - FUNCTION COMPLETED.                               */
*/*                                                                  */
*/*   OUTPUT - SIOTALCD SET TO 0 FOR REQUESTS WITH ERRORS            */
*/*                                                                  */
*/*   RETURN CODES - (NONE)                                          */
*/*                                                                  */
*/********************************************************************/
*IF (RTNCODE^=SUCCESS × INPUTRC^=SUCCESS)                       02S0673
*    & NODEVERR = ON THEN              /*NO ERRORS BUT NOT-DEV-REQD ?*/
         SLR   @06,@06                                          02S0673
         CR    RTNCODE,@06                                      02S0673
         BNE   @GL00037                                         02S0673
         L     @15,@PC00001+4                                   02S0673
         C     @06,INPUTRC(,@15)                                02S0673
         BE    @RF00673                                         02S0673
@GL00037 L     @06,@PC00001                                     02S0673
         L     @06,ALCWAPTR(,@06)                               02S0673
         TM    NODEVERR(@06),B'00001000'                        02S0673
         BNO   @RF00673                                         02S0673
*  DO;                                 /*YES, PROCESS                */
*    VUPTR = VOLUNPTR;                 /*POINT TO FIRST VU ENTRY     */
         L     VUPTR,VOLUNPTR(,@06)                             02S0675
*    DO VUCTR = ONE TO VOLUNSZE/LENGTH(VOLUNTAB); /*SCAN ALL VU'S    */
         LA    VUCTR,1                                          02S0676
         B     @DE00676                                         02S0676
@DL00676 DS    0H                                               02S0677
*      IF VDEVREQD=OFF & VUDNALOC=ON THEN /*NOT-DEV-REQD ERROR       */
         TM    VUDNALOC(VUPTR),B'00001000'                      02S0677
         BNO   @RF00677                                         02S0677
         TM    VDEVREQD(VUPTR),B'00100000'                      02S0677
         BNZ   @RF00677                                         02S0677
*         VOLSIOTP->SIOTALCD = OFF;    /*YES,MARK SIOT NOT-FULLY-ALCD*/
         L     @06,VOLSIOTP(,VUPTR)                             02S0678
         NI    SIOTALCD(@06),B'11111101'                        02S0678
*      ELSE;                                                    02S0679
@RF00677 DS    0H                                               02S0680
*      VUPTR = VUPTR + LENGTH(VOLUNTAB); /*POINT TO NEXT VU ENTRY    */
         AH    VUPTR,@CH00162                                   02S0680
*    END;                                                       02S0681
         AL    VUCTR,@CF00071                                   02S0681
@DE00676 L     @06,@PC00001                                     02S0681
         L     @06,ALCWAPTR(,@06)                               02S0681
         L     @00,VOLUNSZE(,@06)                               02S0681
         SRDA  @00,32                                           02S0681
         D     @00,@CF00162                                     02S0681
         CR    VUCTR,@01                                        02S0681
         BNH   @DL00676                                         02S0681
*  END;                                                         02S0682
*ELSE;                                 /*NO PROCESSING NEEDED        */
@RF00673 DS    0H                                               02S0684
*IF SU18BIT=ON&                        /* SU18 IN SYSTEM AND @G18MP21*/
*   INDRETRY=OFF & INDREQU=OFF THEN    /*NO RETRY OR REQUEUE @G18MP21*/
         L     @06,CVTPTR                                       01S0684
         L     @06,CVTIHASU(,@06)                               01S0684
         TM    SU18BIT(@06),B'00100000'                         01S0684
         BNO   @RF00684                                         01S0684
         L     @06,@PC00001                                     01S0684
         L     @06,ALCWAPTR(,@06)                               01S0684
         TM    INDRETRY(@06),B'01100000'                        01S0684
         BNZ   @RF00684                                         01S0684
*  DO;                                 /*INVOKE JES3 INTERFACE  01S0685
*                                                            @G18MP21*/
*/***********************************************************@G18MP21*/
*/*                                                          @G18MP21*/
*/* SEGMENT NAME - JESINT                                    @G18MP21*/
*/*                                                          @G18MP21*/
*/* DESCRIPTIVE NAME - JES3 INTERFACE SEGMENT                @G18MP21*/
*/*                                                          @G18MP21*/
*/* FUNCTION -                                               @G18MP21*/
*/*   INVOKE THE JES3 INTERFACE INDICATING THAT ALLOCATION   @G18MP21*/
*/*   COMPLETED PROCESSING. THIS SEGMENT BUILDS THE SSOB     @G18MP21*/
*/*   AND THE FUNCTION DEPENDENT EXTENSION TO THE SSOB.      @G18MP21*/
*/*   THIS CALL IS MADE ONLY WHEN ALLOCATION IS TERMINATING  @G18MP21*/
*/*   AND WHEN JES3 HAD CHOSE UNITS FOR A REQUEST.           @G18MP21*/
*/*                                                          @G18MP21*/
*/* OPERATION - NO SPECIAL ALGORITHM USED.                   @G18MP21*/
*/*                                                          @G18MP21*/
*/* ENTRY -  IN-LINE SUBROUTINE.                             @G18MP21*/
*/*   PURPOSE - INVOKE THE JES3 INTERFACE.                   @G18MP21*/
*/*   INPUT -                                                @G18MP21*/
*/*     STEPNUM - STEP NUMBER.                               @G18MP21*/
*/*     ALCWA                                                @G18MP21*/
*/*       SIOT1P - PTR TO FIRST SIOT                         @G18MP21*/
*/*     SIOT                                                 @G18MP21*/
*/*       SIOTJES3 - DEVICE SELECTION MADE BY JES3           @G18MP21*/
*/*                                                          @G18MP21*/
*/* EXIT NORMAL -                                            @G18MP21*/
*/*   CONDITIONS - JES3 INTERFACE INVOKED.                   @G18MP21*/
*/*    RETURN CODES - NONE                                   @G18MP21*/
*/*                                                          @G18MP21*/
*/* EXIT-ERROR - NONE                                        @G18MP21*/
*/*                                                          @G18MP21*/
*/***********************************************************@G18MP21*/
*SIOTPTR=SIOT1P;                       /*PTR 1ST SIOT        @G18MP21*/
         L     @15,@PC00001                                     02S0686
         L     @15,ALCWAPTR(,@15)                               02S0686
         L     SIOTPTR,SIOT1P(,@15)                             02S0686
*DO WHILE SIOTPTR^=ZERO&SIOTJES3=OFF;  /*SCAN TROUGH SIOTS UNTIL IT IS
*                                        KNOWN WHETHER JES3 CHOSE UNIT
*                                                            @G18MP21*/
         B     @DE00687                                         02S0687
@DL00687 DS    0H                                               02S0688
*  SIOTPTR=SIOTNPTR;                   /*NEXT SIOT PRT       @G18MP21*/
         L     SIOTPTR,SIOTNPTR(,SIOTPTR)                       02S0688
*END;                                  /*END SIOT SCAN       @G18MP21*/
@DE00687 LTR   SIOTPTR,SIOTPTR                                  02S0689
         BZ    @DC00687                                         02S0689
         TM    SIOTJES3(SIOTPTR),B'00100000'                    02S0689
         BZ    @DL00687                                         02S0689
@DC00687 DS    0H                                               02S0690
*IF SIOTPTR^=ZERO &                    /*SIOT EXISTS         @ZM44656*/
*   SIOTJES3=ON THEN                   /*JES3 CHOSE UNITS    @ZM44656*/
         LTR   SIOTPTR,SIOTPTR                                  02S0690
         BZ    @RF00690                                         02S0690
         TM    SIOTJES3(SIOTPTR),B'00100000'                    02S0690
         BNO   @RF00690                                         02S0690
*  DO;                                 /*MAKE LAST CALL TO JES3 02S0691
*                                                            @G18MP21*/
*    SSOB=SSOB&&SSOB;                  /*BLANK SSOB          @G18MP21*/
         XC    SSOB(20),SSOB                                    02S0692
*    SSOBID=CHARSSOB;                  /*SET SSOB ID         @G18MP21*/
         MVC   SSOBID(4),@CC00155                               02S0693
*    SSOBLEN=LENGTH(SSOB);             /*SET LENGTH          @G18MP21*/
         MVC   SSOBLEN(2),@CH00246                              02S0694
*    SSOBFUNC=SSOBCACD;                /*SET ALLOC FUNC. CODE@G18MP21*/
         MVC   SSOBFUNC(2),@CH00057                             02S0695
*    SSOBINDV=ADDR(SSCA);              /*SET ADDR EXTENSION  @G18MP21*/
         LA    @06,SSCA                                         02S0696
         ST    @06,SSOBINDV                                     02S0696
*    SSCA=SSCA && SSCA;                /*ZERO EXTENSION      @G18MP21*/
         XC    SSCA(32),SSCA                                    02S0697
*    SSCALEN = LENGTH(SSCA);           /*SET LENGTH          @G18MP21*/
         MVC   SSCALEN(2),@CH00188                              02S0698
*    JESFLAGS= JESFLAGS && JESFLAGS;   /*CLEAR FLAGS         @G18MP21*/
         XC    JESFLAGS(2),JESFLAGS                             02S0699
*    LASTCALL=ON;                      /* SET LAST CALL BIT  @G18MP21*/
         OI    LASTCALL,B'00100000'                             02S0700
*    SSCAPFLG=ADDR(JESFLAGS);          /*SET ADDR. OF FLAGS  @G18MP21*/
         LA    @06,JESFLAGS                                     02S0701
         ST    @06,SSCAPFLG                                     02S0701
*    SSCAPSTN=ADDR(STEPNUM);           /*SET STEP NUMBER     @G18MP21*/
*                                                               02S0702
         L     @06,@PC00001+8                                   02S0702
         ST    @06,SSCAPSTN                                     02S0702
*     /* ? IEFSSREQ  (SSOB);*/                                  02S0703
*/*                                           */                02S0703
*/*  PASS CONTROL TO JOB ENTRY SUBSYSTEM TO   */                02S0703
*/*  PROCESS REQUEST -                        */                02S0703
*/*                                           */                02S0703
*/*    INPUT - REGISTER 1 POINTS TO A ONE-    */                02S0703
*/*            WORD PARAMETER LIST WHICH      */                02S0703
*/*            POINTS TO THE SSOB             */                02S0703
*/*                                           */                02S0703
*CALL SSREQ(SSOB);                /*                    @G18MP21*/
         LA    @06,SSOB                                         02S0703
         ST    @06,@AL00001                                     02S0703
         MVI   @AL00001,X'80'                                   02S0703
         L     @06,CVTPTR                                       02S0703
         L     @06,CVTJESCT(,@06)                               02S0703
         L     @15,JESSSREQ(,@06)                               02S0703
         LA    @01,@AL00001                                     02S0703
         BALR  @14,@15                                          02S0703
*  END;                                /*END LAST JES3 CALL  @G18MP21*/
*  END;                                /*END SU18 DO         @G18MP21*/
@RF00690 DS    0H                                               01S0706
*IF ALCMSSTM = ON&                     /* IF MSS TERM REQ    @G24LPSJ*/
*   INPUTRC = SUCCESS&                 /* AND ALLOCATION     @G24LPSJ*/
*   RTNCODE = SUCCESS&                 /* SUCCESSFULL        @G24LPSJ*/
*   INDRETRY = OFF&                    /* AND NO RETRY       @G24LPSJ*/
*   INDREQU  = OFF THEN                /* AND NO REQUEUE     @G24LPSJ*/
@RF00684 L     @06,@PC00001                                     01S0706
         L     @06,ALCWAPTR(,@06)                               01S0706
         L     @01,FMAPPTR(,@06)                                01S0706
         TM    ALCMSSTM(@01),B'00001000'                        01S0706
         BNO   @RF00706                                         01S0706
         SLR   @15,@15                                          01S0706
         L     @14,@PC00001+4                                   01S0706
         C     @15,INPUTRC(,@14)                                01S0706
         BNE   @RF00706                                         01S0706
         CR    RTNCODE,@15                                      01S0706
         BNE   @RF00706                                         01S0706
         TM    INDRETRY(@06),B'01100000'                        01S0706
         BNZ   @RF00706                                         01S0706
*  DO;                                 /* THEN DO            @G24LPSJ*/
*/***********************************************************@G24LPSJ*/
*/*                                                          @G24LPSJ*/
*/* SEGMENT NAME - TERMCALL                                  @G24LPSJ*/
*/*                                                          @G24LPSJ*/
*/* DESCRIPTIVE NAME - MSSC TERMINATE PROCESSING             @G24LPSJ*/
*/*                                                          @G24LPSJ*/
*/* FUNCTION -                                               @G24LPSJ*/
*/*                                                          @G24LPSJ*/
*/*   THIS SEGMENT WILL ISSUE THE MSS TERMINATE REQUEST IF   @G24LPSJ*/
*/*   ALLOCATION IS SUCCESSFUL FOR ALL UNITS AND MSS         @G24LPSJ*/
*/*   SELECTS WERE DONE BY HOUSEKEEPING.                     @G24LPSJ*/
*/*                                                          @G24LPSJ*/
*/* OPERATION -                                              @G24LPSJ*/
*/*                                                          @G24LPSJ*/
*/*   A MSS TERMINATE BLOCK IS BUILT AND SVC 126 ISSUED.     @G24LPSJ*/
*/*                                                          @G24LPSJ*/
*/* ENTRY - IN-LINE SEGMENT                                  @G24LPSJ*/
*/*                                                          @G24LPSJ*/
*/*   PURPOSE - SEE FUNCTION                                 @G24LPSJ*/
*/*   INPUT - ALCWASID                                       @G24LPSJ*/
*/*                                                          @G24LPSJ*/
*/*                                                          @G24LPSJ*/
*/* EXIT -                                                   @G24LPSJ*/
*/*                                                          @G24LPSJ*/
*/*   CONDITION - MSSC TERMINATE ISSUED                      @G24LPSJ*/
*/*     OUTPUT -                                             @G24LPSJ*/
*/*       NONE                                               @G24LPSJ*/
*/*     RETURN CODES -                                       @G24LPSJ*/
*/*       NONE                                               @G24LPSJ*/
*/*                                                          @G24LPSJ*/
*/***********************************************************@G24LPSJ*/
*RFY TRMRB BASED(ADDR(TERMAREA));      /* SET ADDR FOR TERMINATE
*                                         REQUEST BLOCK      @G24LPSJ*/
*TRMRB = TRMRB && TRMRB;               /* CLEAR BLOCK        @G24LPSJ*/
         LA    @15,TERMAREA                                     02S0709
         XC    TRMRB(16,@15),TRMRB(@15)                         02S0709
*TRMRBLEN = LENGTH(TRMRB);             /* SET TERM LENGTH    @G24LPSJ*/
         MVC   TRMRBLEN(4,@15),@CF00048                         02S0710
*TRMRBOPC = TRMOPCD;                   /* SET TERM OP CODE   @G24LPSJ*/
         MVI   TRMRBOPC(@15),X'8A'                              02S0711
*TRMALLOK = ON;                        /* SET ALLOC OK       @G24LPSJ*/
         OI    TRMALLOK(@15),B'10000000'                        02S0712
*TRMJOBID = ALCWASID;                  /* SET ASID OF STEP   @G24LPSJ*/
         SLR   @14,@14                                          02S0713
         ICM   @14,3,ALCWASID(@06)                              02S0713
         ST    @14,TRMJOBID(,@15)                               02S0713
*RFY REG1 RSTD;                        /* RESTRICT REG 1     @G24LPSJ*/
*REG1 = ADDR(TRMRB);                   /* LOAD ADDR TRMTRB   @G24LPSJ*/
         LR    REG1,@15                                         02S0715
*SVC (126);                            /* CALL MSSC          @G24LPSJ*/
         SVC   126                                              02S0716
*RFY REG1 UNRSTD;                      /* RELEASE REG 1      @G24LPSJ*/
*  END;                                /*                    @G24LPSJ*/
*/*********************************************************************
*/*                                                                  */
*/* SEGMENT NAME - FREEGETS                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - FREE COMMON ALLOCATION GETMAIN AREAS          */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THIS ROUTINE WILL FREE ANY CORE OBTAINED FOR THE FOLLOWING:    */
*/*       .THE GROUP ID LIST FOR SU 18                       @G18MP21*/
*/*       .VOLUNIT TABLE                                             */
*/*       .THE ELIGIBLE DEVICE LISTS (EDL'S) - EACH SIOT MAY HAVE    */
*/*        AN EDL ASSOCIATED WITH IT.                                */
*/*       .THE VOLUME MOUNT AND VERIFY REQUEST BLOCKS - EACH SIOT    */
*/*        CAN HAVE ONE OR MORE (CHAINED) VM+V REQUEST BLOCKS        */
*/*        ASSOCIATED WITH IT.                                       */
*/*       .THE WORK AREA USED BY GENERIC AND RECOVERY ALLOCATION.    */
*/*       .THE ALLOCATION WORK AREA (ALCWA).                         */
*/*   FOR EACH SIOT WHICH HAD AN EDL AND/OR VM+V REQUESTS ASSOCIATED */
*/*   WITH IT, THIS ROUTINE WILL ZERO THE RESPECTIVE SIOT POINTERS   */
*/*   (SIOTEDLP AND SIOTVMVP) AFTER THE CORE FOR THESE TABLES IS     */
*/*   FREED -- IN CASE THIS ALLOCATION IS REQUEUED OR RETRIED.       */
*/*                                                                  */
*/*   OPERATION -                                                    */
*/*      .IN SYSTEMS WITH SU 18, THE GROUP ID LIST IS FREED. @G18MP21*/
*/*       THE ADDRESS AND SIZE OF THE GROUP ID LIST IS       @G18MP21*/
*/*       OBTAINED FROM THE ALCWA.                           @G18MP21*/
*/*                                                          @G18MP21*/
*/*      .IF CORE WAS OBTAINED FOR THE VOLUNIT TABLE, THE ADDRESS    */
*/*       AND SIZE OF THE TABLE ARE CONTAINED IN THE VOLUNPTR AND    */
*/*       VOLUNSZE FIELDS OF THE ALCWA, RESPECTIVELY. THE VOLUNPTR   */
*/*       FIELD WILL BE ZERO IF THE CORE WAS NOT AVAILABLE.          */
*/*                                                                  */
*/*      .EACH SIOT IS EXAMINED TO SEE IF THERE IS AN EDL            */
*/*       (SIOTEDLP NOT ZERO) AND/OR VM+V REQUESTS (SIOTVMVP NOT     */
*/*       ZERO) ASSOCIATED WITH IT.                                  */
*/*                                                                  */
*/*      .THE ADDRESS AND SIZE OF THE ALLOCATION WORK AREA ARE       */
*/*       SPECIFIED BY ALCWAPTR AND WASIZE RESPECTIVELY. THIS        */
*/*       ROUTINE IS NOT CALLED UNLESS THE ALLOCATION WORK AREA      */
*/*       WAS SUCCESSFULLY OBTAINED.                                 */
*/*                                                                  */
*/* ENTRY - INLINE SUBROUTINE                                        */
*/*                                                                  */
*/*   PURPOSE - TO FREE COMMON ALLOCATION GETMAIN AREAS              */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*        ALCWAPTR - POINTER TO THE ALLOCATION WORK AREA (ALCWA)    */
*/*        ALCWA FIELDS - GRIDPTR - PTR TO GROUP ID LIST     @G18MP21*/
*/*                     - GROUPSZ - SIZE OF GROUP ID LIST    @G18MP21*/
*/*                     - VOLUNPTR - PTR TO VOLUNIT TABLE    @G18MP21*/
*/*                     - VOLUNSZE - SIZE OF VOLUNIT TABLE           */
*/*                     - SIOT1P - POINTER TO THE FIRST SIOT         */
*/*                     - ALGTABP - POINTER TO GENERIC WORK AREA     */
*/*                     - ALGTABSZ - SIZE OF GENERIC WORK AREA       */
*/*                     - WASIZE - SIZE OF ALCWA                     */
*/*                                                                  */
*/* EXIT - NORMAL - INLINE SUBROUTINE                                */
*/*                                                                  */
*/*   CONDITION - ALL GETMAIN AREAS FREED.                           */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*        SIOT FIELDS ZEROED - SIOTEDLP - POINTER TO EDL            */
*/*                           - SIOTVMVP - POINTER TO VM+V REQUESTS  */
*/*                           - SVOLUNAD - POINTER TO VOLUNIT        */
*/*                                        ENTRY             @YM05496*/
*/*                           - SIOTAFID - AFFINITY ID               */
*/*                           - SIOTGIID - GROUP INTERSECTION ID     */
*/*                           - SPVTAMSG - PVT ASSUMED MSG           */
*/*                           - SIOPSCNT - PUB/STOR COUNT    @YM04911*/
*/*                           - SIOTGIGN - IGNORE SIOT       @YM04911*/
*/*                                                                  */
*/********************************************************************/
*RFY(REG0,REG1) RSTD;                                           02S0719
@RF00706 DS    0H                                               02S0720
*IF GRIDPTR^=ZERO THEN                 /*GROUP ID LIST?      @G18MP21*/
         L     @06,@PC00001                                     02S0720
         L     @06,ALCWAPTR(,@06)                               02S0720
         L     @15,GRIDPTR(,@06)                                02S0720
         LTR   @15,@15                                          02S0720
         BZ    @RF00720                                         02S0720
*  DO;                                 /*YES, FREE THE CORE  @G18MP21*/
*    REG0=GROUPSZ;                     /*SET SIZE TO FREE    @G18MP21*/
         L     REG0,GROUPSZ(,@06)                               02S0722
*    REG0=REG0×SUBPL230;               /*SET SUBPOOL NUM     @G18MP21*/
         O     REG0,@CF00189                                    02S0723
*    REG1=GRIDPTR;                     /*SET PTR TO GROUP ID LIST
*                                                            @G18MP21*/
         LR    REG1,@15                                         02S0724
*    GEN (FREEMAIN R,LV=(0),A=(1));    /*FREE GROUP ID LIST  @G18MP21*/
         FREEMAIN R,LV=(0),A=(1)
*  END;                                /*END FREEING GROUP ID LIST
*                                                            @G18MP21*/
*IF VOLUNPTR ^= ZERO THEN              /*ANY VOLUNIT TABLE ?         */
@RF00720 L     @06,@PC00001                                     02S0727
         L     @06,ALCWAPTR(,@06)                               02S0727
         L     @15,VOLUNPTR(,@06)                               02S0727
         LTR   @15,@15                                          02S0727
         BZ    @RF00727                                         02S0727
*  DO;                                 /*YES, FREE THAT CORE         */
*    REG0 = VOLUNSZE;                  /*SET VOLUNIT TABLE SIZE      */
         L     @14,@PC00001                                     02S0729
         L     @14,ALCWAPTR(,@14)                               02S0729
         L     REG0,VOLUNSZE(,@14)                              02S0729
*    REG0 = REG0 × SUBPL230;           /*FREE FROM SUBPOOL 230.      */
         O     REG0,@CF00189                                    02S0730
*    REG1 = VOLUNPTR;                  /*SET VOLUNIT TABLE PTR       */
         LR    REG1,@15                                         02S0731
*    GEN(FREEMAIN R,LV=(0),A=(1));     /*FREE VOLUNIT TABLE          */
         FREEMAIN R,LV=(0),A=(1)
*    SIOTPTR = SIOT1P;                 /*POINT TO FIRST SIOT         */
         L     @15,@PC00001                                     02S0733
         L     @15,ALCWAPTR(,@15)                               02S0733
         L     SIOTPTR,SIOT1P(,@15)                             02S0733
*    DO WHILE (SIOTPTR ^= ZERO);       /*CHECK ALL SIOTS             */
         B     @DE00734                                         02S0734
@DL00734 DS    0H                                               02S0735
*      SVOLUNAD = ZERO;                /*CLEAR SIOT VOLUNIT ENTRY
*                                        PTR                 @YM05496*/
         SLR   @15,@15                                          02S0735
         ST    @15,SVOLUNAD(,SIOTPTR)                           02S0735
*      SVOLUNNO = ZERO;                /*CLEAR COUNT OF VOLUNIT 02S0736
*                                        ENTRIES             @ZA11313*/
         STH   @15,SVOLUNNO(,SIOTPTR)                           02S0736
*      IF SIOTEDLP ^= ZERO THEN        /*ANY EDL ?                   */
         L     @14,SIOTEDLP(,SIOTPTR)                           02S0737
         CR    @14,@15                                          02S0737
         BE    @RF00737                                         02S0737
*        DO;                           /*YES, FREE THAT CORE         */
*          REG0 = SIOTEDLS;            /*SET SIZE OF EDL             */
         L     REG0,SIOTEDLS(,SIOTPTR)                          02S0739
*          REG0 = REG0 × SUBPL230;     /*FREE FROM SUBPOOL 230.      */
         O     REG0,@CF00189                                    02S0740
*          REG1 = SIOTEDLP;            /*SET PTR TO EDL              */
         LR    REG1,@14                                         02S0741
*          GEN(FREEMAIN R,LV=(0),A=(1)); /*FREE EDL                  */
         FREEMAIN R,LV=(0),A=(1)
*          SIOTEDLP = ZERO;            /*ZERO OUT SIOT PTR TO EDL    */
         SLR   @15,@15                                          02S0743
         ST    @15,SIOTEDLP(,SIOTPTR)                           02S0743
*        END;                                                   02S0744
*      ELSE;                           /*NO EDL                      */
@RF00737 DS    0H                                               02S0746
*      VMVREQBP = SIOTVMVP;            /*POINT TO FIRST VM+V RB      */
         L     VMVREQBP,SIOTVMVP(,SIOTPTR)                      02S0746
*      SIOTVMVP = ZERO;                /*ZERO OUT SIOT PTR TO VMVRB  */
         SLR   @03,@03                                          02S0747
         ST    @03,SIOTVMVP(,SIOTPTR)                           02S0747
*      DO WHILE VMVREQBP ^= ZERO;      /*PROCESS ALL VM+V REQ BLOCKS */
         B     @DE00748                                         02S0748
@DL00748 DS    0H                                               02S0749
*        REG0 = LENGTH(VMVRQBLK);      /*SET SIZE OF VM+V RB         */
         LA    REG0,52                                          02S0749
*        REG0 = REG0 × SUBPL230;       /*FREE FROM SUBPOOL 230.      */
         O     REG0,@CF00189                                    02S0750
*        REG1 = VMVREQBP;              /*SET PTR TO VM+V RB          */
         LR    REG1,VMVREQBP                                    02S0751
*        VMVREQBP = VMVNREQP;          /*POINT TO NEXT VM+V RB       */
         L     VMVREQBP,VMVNREQP(,VMVREQBP)                     02S0752
*        GEN(FREEMAIN R,LV=(0),A=(1)); /*FREE VM+V REQUEST BLOCK     */
         FREEMAIN R,LV=(0),A=(1)
*      END;                                                     02S0754
@DE00748 SLR   @03,@03                                          02S0754
         CR    VMVREQBP,@03                                     02S0754
         BNE   @DL00748                                         02S0754
*      SIOTAFID = ZERO;                /*CLEAR SIOT FIELDS           */
         STH   @03,SIOTAFID(,SIOTPTR)                           02S0755
*      SIOTGIID = ZERO;                                         02S0756
         STH   @03,SIOTGIID(,SIOTPTR)                           02S0756
*      SPVTAMSG = OFF;                                          02S0757
         NI    SPVTAMSG(SIOTPTR),B'11101111'                    02S0757
*      SIOPSCNT = ZERO;                /*                    @YM04911*/
         MVI   SIOPSCNT(SIOTPTR),X'00'                          02S0758
*      SIOTGIGN = OFF;                 /*                    @YM04911*/
         NI    SIOTGIGN(SIOTPTR),B'11110111'                    02S0759
*      SIOTPTR = SIOTNPTR;             /*POINT TO NEXT SIOT          */
         L     SIOTPTR,SIOTNPTR(,SIOTPTR)                       02S0760
*    END;                                                       02S0761
@DE00734 SLR   @15,@15                                          02S0761
         CR    SIOTPTR,@15                                      02S0761
         BNE   @DL00734                                         02S0761
*    IF ALGTABP ^= ZERO THEN           /*ANY GENERIC WORK AREA ?     */
         L     @06,@PC00001                                     02S0762
         L     @06,ALCWAPTR(,@06)                               02S0762
         L     @14,ALGTABP(,@06)                                02S0762
         CR    @14,@15                                          02S0762
         BE    @RF00762                                         02S0762
*      DO;                             /*YES, FREE THAT CORE         */
*        REG0 = ALGTABSZ;              /*SET SIZE OF GEN WORK AREA   */
         L     REG0,ALGTABSZ(,@06)                              02S0764
*        REG0 = REG0 × SUBPL230;       /*FREE FROM SUBPOOL 230.      */
         O     REG0,@CF00189                                    02S0765
*        REG1 = ALGTABP;               /*SET PTR TO GEN WORK AREA    */
         LR    REG1,@14                                         02S0766
*        GEN(FREEMAIN R,LV=(0),A=(1)); /*FREE GENERIC WORK AREA      */
         FREEMAIN R,LV=(0),A=(1)
*      END;                                                     02S0768
*    ELSE;                             /*NO GENERIC WORK AREA        */
@RF00762 DS    0H                                               02S0770
*  END;                                                         02S0770
*ELSE;                                 /*NO VOLUNIT TABLE            */
@RF00727 DS    0H                                               02S0772
*REG0 = WASIZE;                        /*SET SIZE OF ALCWA           */
         L     @06,@PC00001                                     02S0772
         L     @06,ALCWAPTR(,@06)                               02S0772
         L     REG0,WASIZE(,@06)                                02S0772
*REG0 = REG0 × SUBPL230;               /*FREE FROM SUBPOOL 230.      */
         O     REG0,@CF00189                                    02S0773
*REG1 = ALCWAPTR;                      /*SET PTR TO ALCWA            */
         LR    REG1,@06                                         02S0774
*GEN(FREEMAIN R,LV=(0),A=(1));         /*FREE ALLOC WORK AREA (ALCWA)*/
         FREEMAIN R,LV=(0),A=(1)
*RFY(REG0,REG1) UNRSTD;                                         02S0776
*IF INPUTRC=SUCCESS &                                           01S0777
*   RTNCODE=SUCCESS &                                           01S0777
*   (REQUSW=ON × RETRYSW=ON) THEN/*                             01S0777
*                                        IS ALLOC TO BE REDONE ?     */
         SLR   @06,@06                                          01S0777
         L     @15,@PC00001+4                                   01S0777
         C     @06,INPUTRC(,@15)                                01S0777
         BNE   @RF00777                                         01S0777
         CR    RTNCODE,@06                                      01S0777
         BNE   @RF00777                                         01S0777
         TM    REQUSW,B'01100000'                               01S0777
         BZ    @RF00777                                         01S0777
*  DO;                                 /*YES,CALL COMMON ALLOC RTN   */
*    CALL IEFAB421(COPYFUNC,SIOT1PTR,JSCBP,LUTPTR,RESNCODE,THETCBP,
*                  NAMESP,STOPECBP,                             01S0779
*                  SSERRBKP);          /*PASS PTR TO SUBSYSTEM  01S0779
*                                        ERROR BLOCK         @G29AN2F*/
         LA    @06,COPYFUNC                                     01S0779
         ST    @06,@AL00001                                     01S0779
         LA    @06,SIOT1PTR                                     01S0779
         ST    @06,@AL00001+4                                   01S0779
         LA    @06,JSCBP                                        01S0779
         ST    @06,@AL00001+8                                   01S0779
         LA    @06,LUTPTR                                       01S0779
         ST    @06,@AL00001+12                                  01S0779
         L     @06,RESNCDP                                      01S0779
         ST    @06,@AL00001+16                                  01S0779
         LA    @06,THETCBP                                      01S0779
         ST    @06,@AL00001+20                                  01S0779
         LA    @06,NAMESP                                       01S0779
         ST    @06,@AL00001+24                                  01S0779
         LA    @06,STOPECBP                                     01S0779
         ST    @06,@AL00001+28                                  01S0779
         LA    @06,SSERRBKP                                     01S0779
         ST    @06,@AL00001+32                                  01S0779
         L     @15,@CV00213                                     01S0779
         LA    @01,@AL00001                                     01S0779
         BALR  @14,@15                                          01S0779
*    RTNCODE = REG15;                  /*SAVE RETURN CODE            */
         LR    RTNCODE,REG15                                    01S0780
*  END;                                                         01S0781
*ELSE;                                 /* NOT TO BE REQUEUED    01S0782
*                                         OR RETRIED         @G18MP21*/
@RF00777 DS    0H                                               01S0783
*/********************************************************** @ZA02113*/
*/*                                                          @ZA02113*/
*/* SEGMENT NAME - GETDEVT                                   @ZA02113*/
*/*                                                          @ZA02113*/
*/* DESCRIPTIVE NAME - GET GENERIC DEVICE TYPES INTO SIOTS.  @ZA02113*/
*/*                                                          @ZA02113*/
*/* FUNCTION -                                               @ZA02113*/
*/*     THIS ROUTINE PUTS A GENERIC DEVICE TYPE INTO EACH    @ZA02113*/
*/*     SIOT WHICH WAS ALLOCATED A DEVICE OR DEVICES.        @ZA02113*/
*/*     ALSO, FOR EACH SUCH SIOT, A SEGMENT 'SETPASS', IS    @ZA02721*/
*/*     INCLUDED TO SET THE 'PASS' INDICATOR IN EACH UCB     @ZA02721*/
*/*     ALLOCATED.                                           @ZA02721*/
*/*                                                          @ZA02113*/
*/*   OPERATION - OPTIONAL CHARACTERISTICS ARE TURNED OFF TO @ZA02113*/
*/*       OBTAIN A 'TRUE' GENERIC DEVICE TYPE.               @ZA02113*/
*/*                                                          @ZA02113*/
*/* ENTRY - (IN-LINE SUBROUTINE)                             @ZA02113*/
*/*                                                          @ZA02113*/
*/*   PURPOSE - IN CASE A STEP RESTART OF A SUBSEQUENT STEP  @ZA02113*/
*/*       OCCURS, A REFER-BACK TO A SIOT FOR THE CURRENT     @ZA02113*/
*/*       STEP SHOULD OBTAIN A GENERIC DEVICE TYPE.  THIS    @ZA02113*/
*/*       SEGMENT MAKES THAT POSSIBLE BY PUTTING THE GENERIC @ZA02113*/
*/*       INTO THE SIOT BEFORE THE SIOT IS JOURNALLED.       @ZA02113*/
*/*                                                          @ZA02113*/
*/*   INPUT -                                                @ZA02113*/
*/*     SIOT1PTR - POINTS TO FIRST SIOT                      @ZA03279*/
*/*     INPUTRC - ALLOCATION RETURN CODE PRIOR TO IEFAB490.  @ZA02113*/
*/*     RTNCODE - RETURN CODE FOR IEFAB490                   @ZA02113*/
*/*                                                          @ZA02113*/
*/* EXIT - NORMAL - (IN-LINE SUBROUTINE)                     @ZA02113*/
*/*                                                          @ZA02113*/
*/*   CONDITIONS - FUNCTION COMPLETED                        @ZA02113*/
*/*                                                          @ZA02113*/
*/*   OUTPUT -                                               @ZA02113*/
*/*     SIOT -                                               @ZA02113*/
*/*       SIOTDEVT - CONTAINS GENERIC DEVICE TYPE            @ZA02113*/
*/*                                                          @ZA02113*/
*/*   RETURN CODES - NONE                                    @ZA02113*/
*/*                                                          @ZA02113*/
*/********************************************************** @ZA02113*/
*IF INPUTRC = SUCCESS &                /*NO FAILURE BEFORE   @ZA02113*/
*   RTNCODE = SUCCESS THEN             /*NO FAILURE IN 490   @ZA02113*/
         SLR   @06,@06                                          02S0783
         L     @15,@PC00001+4                                   02S0783
         C     @06,INPUTRC(,@15)                                02S0783
         BNE   @RF00783                                         02S0783
         CR    RTNCODE,@06                                      02S0783
         BNE   @RF00783                                         02S0783
*  DO;                                 /*PROCESS SIOTS.      @ZA02113*/
*    SIOTPTR = SIOT1PTR;               /*GET FIRST SIOT.     @ZA03279*/
         L     SIOTPTR,SIOT1PTR                                 02S0785
*    DO WHILE SIOTPTR ^= ZERO;         /*LOOP THRU SIOTS.    @ZA02113*/
         B     @DE00786                                         02S0786
@DL00786 DS    0H                                               02S0787
*      IF SIOUCBAD ^= ZERO &           /*DEVICE ALLOCATED?   @ZA02113*/
*         SIOUCNVT = ZERO &            /*DEVICE TYPE SPECIFIED OR
*                                        RETRIEVED?          @ZA02113*/
*         SIOVAMDS ^= ON THEN          /*NOT VIO DATA SET    @ZA02113*/
         SLR   @15,@15                                          02S0787
         ICM   @15,7,SIOUCBAD(SIOTPTR)                          02S0787
         LTR   @15,@15                                          02S0787
         BZ    @RF00787                                         02S0787
         CLI   SIOUCNVT(SIOTPTR),0                              02S0787
         BNE   @RF00787                                         02S0787
         TM    SIOVAMDS(SIOTPTR),B'00100000'                    02S0787
         BO    @RF00787                                         02S0787
*        DO;                           /*PROCESS DEVICE TYPE @ZA02113*/
*          SIOTDEVT = SIOUCBAD ->UCBTYP; /*                  @ZA02113*/
         MVC   SIOTDEVT(4,SIOTPTR),UCBTYP(@15)                  02S0789
*/***********************************************************@ZA02721*/
*/*                                                          @ZA02721*/
*/* SEGMENT NAME - SETPASS                                   @ZA02721*/
*/*                                                          @ZA02721*/
*/* DESCRIPTIVE NAME - SET PASS/RETAIN INDICATORS            @ZD03010*/
*/*                                                          @ZA02721*/
*/* FUNCTION - THIS SEGMENT SETS THE PASS/RETAIN INDICATOR   @ZD03010*/
*/*   IN EACH UCB ALLOCATED TO A PASS/RETAIN REQUEST.        @ZD03010*/
*/*                                                          @ZA02721*/
*/*   OPERATION - DOCUMENTED BY THE CODE.                    @ZA02721*/
*/*                                                          @ZA02721*/
*/* ENTRY - (IN-LINE SUBROUTINE)                             @ZA02721*/
*/*                                                          @ZA02721*/
*/*   PURPOSE - SEE FUNCTION                                 @ZA02721*/
*/*                                                          @ZA02721*/
*/*   INPUT -                                                @ZA02721*/
*/*     SIOTPTR - LOCATES CURRENT SIOT.                      @ZA02721*/
*/*                                                          @ZA02721*/
*/* EXIT - NORMAL                                            @ZA02721*/
*/*                                                          @ZA02721*/
*/*   CONDITIONS - FUNCTION COMPLETED                        @ZA02721*/
*/*                                                          @ZA02721*/
*/*   OUTPUT                                                 @ZA02721*/
*/*     UCBMONT  - SET ON IF CORRESPONDING REQUEST WAS       @ZA02721*/
*/*                PASS/RETAIN                               @ZD03010*/
*/*                                                          @ZA02721*/
*/*   RETURN CODES - NONE                                    @ZA02721*/
*/*                                                          @ZA02721*/
*/***********************************************************@ZA02721*/
*RFY DSAB BASED(SIOTETIO);             /*                    @ZA02721*/
*IF (SIOTPASS = ON &                   /* PASSED DATA SET    @ZD03010*/
*    SIO3DACC = ON) ×                  /* DIRECT ACCESS      @ZD03010*/
*   ((SIOTPASS = ON ×                  /* PASSED DATA SET    @ZD03010*/
*     SIOTRETN = ON) &                 /* VOL=RETAIN         @ZD03010*/
*     SIO3TAPE = ON) THEN              /* TAPE               @ZD03010*/
         TM    SIOTPASS(SIOTPTR),B'00010000'                    03S0791
         BNO   @GL00050                                         03S0791
         TM    SIO3DACC(SIOTPTR),B'00100000'                    03S0791
         BO    @RT00791                                         03S0791
@GL00050 TM    SIOTPASS(SIOTPTR),B'10010000'                    03S0791
         BZ    @RF00791                                         03S0791
         TM    SIO3TAPE(SIOTPTR),B'10000000'                    03S0791
         BNO   @RF00791                                         03S0791
@RT00791 DS    0H                                               03S0792
*  DO;                                 /*                    @ZA02721*/
*     DO; /*MODESET  KEYADDR(ZERO)*/                            03S0793
*       SPKA (ZERO); /*SET PSW KEY*/                            03S0794
         SLR   @01,@01                                          03S0794
         SPKA  0(@01)                                           03S0794
*     END; /*MODESET  KEYADDR(ZERO)*/           /* KEY 0 TO HIT UCB'S @
*A02721*/                                                       03S0795
*     DO; /* SETLOCK (OBTAIN) MODE(UNCOND) TYPE(LOCAL) REGS(USE) RELATE
*(UCB,IEFAB490(SETPASS)) */                                     03S0796
*       RFY (GPR11P,GPR12P,GPR13P,GPR14P) RSTD;                 03S0797
*       RFY (GPR15P,GPR00P,GPR01P) RSTD;                        03S0798
*       GPR15P = GPR11P; /* SAVE REG. 11 IN REG. 15. */         03S0799
         LR    GPR15P,GPR11P                                    03S0799
*       GPR00P = GPR12P; /* SAVE REG. 12 IN REG. 0. */          03S0800
         LR    GPR00P,GPR12P                                    03S0800
*       GPR01P = GPR13P; /* SAVE REG. 13 IN REG. 1. */          03S0801
         LR    GPR01P,GPR13P                                    03S0801
*       GPR13P = PSALITA; /* ADDRESS OF LOCK INTERFACE TABLE. */
         L     GPR13P,PSALITA                                   03S0802
*       GEN(LM GPR11P,GPR13P,576(GPR13P)); /* LOAD LOCKWORD, CLHT AND E
*TRY ADRS. */                                                   03S0803
         LM GPR11P,GPR13P,576(GPR13P)
*       GEN(BALR GPR14P,GPR13P); /* BALR TO SETLOCK RTN. */     03S0804
         BALR GPR14P,GPR13P
*       GPR11P = GPR15P; /* RESTORE REG. 11. */                 03S0805
         LR    GPR11P,GPR15P                                    03S0805
*       GPR15P = GPR13P; /* SAVE RETURN CODE. */                03S0806
         LR    GPR15P,GPR13P                                    03S0806
*       GPR12P = GPR00P; /* RESTORE REG. 12 */                  03S0807
         LR    GPR12P,GPR00P                                    03S0807
*       GPR13P = GPR01P; /* RESTORE REG. 13. */                 03S0808
         LR    GPR13P,GPR01P                                    03S0808
*       RFY(GPR15P,GPR00P,GPR01P) UNRSTD;                       03S0809
*       RFY (GPR11P,GPR12P,GPR13P,GPR14P) UNRSTD;               03S0810
*     END; /* SETLOCK (OBTAIN) MODE(UNCOND) TYPE(LOCAL) REGS(USE) RELAT
*D(UCB,IEFAB490(SETPASS)) */ /* LOCAL LOCK       @ZA02721*/     03S0811
*     DO; /* SETLOCK (OBTAIN) MODE(UNCOND) TYPE(CMS) REGS(USE) RELATED(
*CB,IEFAB490(SETPASS)) */                                       03S0812
*       RFY (GPR11P,GPR12P,GPR13P,GPR14P) RSTD;                 03S0813
*       RFY (GPR15P,GPR00P,GPR01P) RSTD;                        03S0814
*       GPR15P = GPR11P; /* SAVE REG. 11 IN REG. 15. */         03S0815
         LR    GPR15P,GPR11P                                    03S0815
*       GPR00P = GPR12P; /* SAVE REG. 12 IN REG. 0. */          03S0816
         LR    GPR00P,GPR12P                                    03S0816
*       GPR01P = GPR13P; /* SAVE REG. 13 IN REG. 1. */          03S0817
         LR    GPR01P,GPR13P                                    03S0817
*       GPR13P = PSALITA; /* ADDRESS OF LOCK INTERFACE TABLE. */
         L     GPR13P,PSALITA                                   03S0818
*       GEN(LM GPR11P,GPR13P,540(GPR13P)); /* LOAD LOCKWORD, CLHT AND E
*TRY ADRS. */                                                   03S0819
         LM GPR11P,GPR13P,540(GPR13P)
*       GEN(BALR GPR14P,GPR13P); /* BALR TO SETLOCK RTN. */     03S0820
         BALR GPR14P,GPR13P
*       GPR11P = GPR15P; /* RESTORE REG. 11. */                 03S0821
         LR    GPR11P,GPR15P                                    03S0821
*       GPR15P = GPR13P; /* SAVE RETURN CODE. */                03S0822
         LR    GPR15P,GPR13P                                    03S0822
*       GPR12P = GPR00P; /* RESTORE REG. 12 */                  03S0823
         LR    GPR12P,GPR00P                                    03S0823
*       GPR13P = GPR01P; /* RESTORE REG. 13. */                 03S0824
         LR    GPR13P,GPR01P                                    03S0824
*       RFY(GPR15P,GPR00P,GPR01P) UNRSTD;                       03S0825
*       RFY (GPR11P,GPR12P,GPR13P,GPR14P) UNRSTD;               03S0826
*     END; /* SETLOCK (OBTAIN) MODE(UNCOND) TYPE(CMS) REGS(USE) RELATED
*UCB,IEFAB490(SETPASS)) */ /* CMS LOCK         @ZA02721*/       03S0827
*    DO RELDEVNO = ONE TO TIOEWTCT;    /* LOOP THRU TIOENTRY @ZA02721*/
         LA    RELDEVNO,1                                       03S0828
         B     @DE00828                                         03S0828
@DL00828 DS    0H                                               03S0829
*      TIOUCBP(RELDEVNO)->UCBMONT = ON;  /* SET PASS/RETAIN. @ZD03010*/
         LR    @02,RELDEVNO                                     03S0829
         SLA   @02,2                                            03S0829
         L     @01,SIOTETIO(,SIOTPTR)                           03S0829
         L     @01,DSABTIOT(,@01)                               03S0829
         L     @02,TIOUCBP-5(@02,@01)                           03S0829
         OI    UCBMONT(@02),B'00000001'                         03S0829
*    END;                              /*                    @ZA02721*/
         AL    RELDEVNO,@CF00071                                03S0830
@DE00828 L     @02,SIOTETIO(,SIOTPTR)                           03S0830
         L     @02,DSABTIOT(,@02)                               03S0830
         SLR   @15,@15                                          03S0830
         IC    @15,TIOEWTCT(,@02)                               03S0830
         CR    RELDEVNO,@15                                     03S0830
         BNH   @DL00828                                         03S0830
*     DO; /* SETLOCK (RELEASE) TYPE(CMS) REGS(USE) RELATED(UCB,IEFAB490
*SETPASS)) */                                                   03S0831
*       RFY (GPR11P,GPR12P,GPR13P,GPR14P) RSTD;                 03S0832
*       RFY (GPR15P,GPR00P,GPR01P) RSTD;                        03S0833
*       GPR15P = GPR11P; /* SAVE REG. 11 IN REG. 15. */         03S0834
         LR    GPR15P,GPR11P                                    03S0834
*       GPR00P = GPR12P; /* SAVE REG. 12 IN REG. 0. */          03S0835
         LR    GPR00P,GPR12P                                    03S0835
*       GPR01P = GPR13P; /* SAVE REG. 13 IN REG. 1. */          03S0836
         LR    GPR01P,GPR13P                                    03S0836
*       GPR13P = PSALITA; /* ADDRESS OF LOCK INTERFACE TABLE. */
         L     GPR13P,PSALITA                                   03S0837
*       GEN(LM GPR11P,GPR13P,552(GPR13P)); /* LOAD LOCKWORD, CLHT AND E
*TRY ADRS. */                                                   03S0838
         LM GPR11P,GPR13P,552(GPR13P)
*       GEN(BALR GPR14P,GPR13P); /* BALR TO SETLOCK RTN. */     03S0839
         BALR GPR14P,GPR13P
*       GPR11P = GPR15P; /* RESTORE REG. 11. */                 03S0840
         LR    GPR11P,GPR15P                                    03S0840
*       GPR15P = GPR13P; /* SAVE RETURN CODE. */                03S0841
         LR    GPR15P,GPR13P                                    03S0841
*       GPR12P = GPR00P; /* RESTORE REG. 12 */                  03S0842
         LR    GPR12P,GPR00P                                    03S0842
*       GPR13P = GPR01P; /* RESTORE REG. 13. */                 03S0843
         LR    GPR13P,GPR01P                                    03S0843
*       RFY(GPR15P,GPR00P,GPR01P) UNRSTD;                       03S0844
*       RFY (GPR11P,GPR12P,GPR13P,GPR14P) UNRSTD;               03S0845
*     END; /* SETLOCK (RELEASE) TYPE(CMS) REGS(USE) RELATED(UCB,IEFAB49
*(SETPASS)) */ /* RELSE CMS LOCK   @ZA02721*/                   03S0846
*     DO; /* SETLOCK (RELEASE) TYPE(LOCAL) REGS(USE) RELATED(UCB,IEFAB4
*0(SETPASS)) */                                                 03S0847
*       RFY (GPR11P,GPR12P,GPR13P,GPR14P) RSTD;                 03S0848
*       RFY (GPR15P,GPR00P,GPR01P) RSTD;                        03S0849
*       GPR15P = GPR11P; /* SAVE REG. 11 IN REG. 15. */         03S0850
         LR    GPR15P,GPR11P                                    03S0850
*       GPR00P = GPR12P; /* SAVE REG. 12 IN REG. 0. */          03S0851
         LR    GPR00P,GPR12P                                    03S0851
*       GPR01P = GPR13P; /* SAVE REG. 13 IN REG. 1. */          03S0852
         LR    GPR01P,GPR13P                                    03S0852
*       GPR13P = PSALITA; /* ADDRESS OF LOCK INTERFACE TABLE. */
         L     GPR13P,PSALITA                                   03S0853
*       GEN(LM GPR11P,GPR13P,588(GPR13P)); /* LOAD LOCKWORD, CLHT AND E
*TRY ADRS. */                                                   03S0854
         LM GPR11P,GPR13P,588(GPR13P)
*       GEN(BALR GPR14P,GPR13P); /* BALR TO SETLOCK RTN. */     03S0855
         BALR GPR14P,GPR13P
*       GPR11P = GPR15P; /* RESTORE REG. 11. */                 03S0856
         LR    GPR11P,GPR15P                                    03S0856
*       GPR15P = GPR13P; /* SAVE RETURN CODE. */                03S0857
         LR    GPR15P,GPR13P                                    03S0857
*       GPR12P = GPR00P; /* RESTORE REG. 12 */                  03S0858
         LR    GPR12P,GPR00P                                    03S0858
*       GPR13P = GPR01P; /* RESTORE REG. 13. */                 03S0859
         LR    GPR13P,GPR01P                                    03S0859
*       RFY(GPR15P,GPR00P,GPR01P) UNRSTD;                       03S0860
*       RFY (GPR11P,GPR12P,GPR13P,GPR14P) UNRSTD;               03S0861
*     END; /* SETLOCK (RELEASE) TYPE(LOCAL) REGS(USE) RELATED(UCB,IEFAB
*90(SETPASS)) */ /*RELSE LOCAL LOCK  @ZA02721*/                 03S0862
*     DO; /*MODESET  EXTKEY(SCHED)*/                            03S0863
*       SPKA (16); /*SET PSW KEY*/                              03S0864
         LA    @01,16                                           03S0864
         SPKA  0(@01)                                           03S0864
*     END; /*MODESET  EXTKEY(SCHED)*/           /* BACK TO SCHED KEY  @
*A02721*/                                                       03S0865
*  END;                                /*                    @ZA02721*/
*ELSE;                                 /*                    @ZA02721*/
@RF00791 DS    0H                                               03S0868
*RFY DSAB BASED(DSABPTR);              /*                    @ZA02721*/
*          IF SIO3DACC = ON THEN       /*DIRECT ACCESS DEVICE@ZA02113*/
         TM    SIO3DACC(SIOTPTR),B'00100000'                    02S0869
         BNO   @RF00869                                         02S0869
*            DO;                       /*TURN OFF OPTION BITS@ZA02113*/
*              SIOUBYT2 = SIOUBYT2 & SHPOWMSK; /*SHARED FILE AND ALTER-
*                                        NATE POWER BITS OFF @ZA02113*/
         NI    SIOUBYT2(SIOTPTR),X'DC'                          02S0871
*              IF SIOUBYT4 = DA3340 THEN /*IF A 3340         @ZA02113*/
         CLI   SIOUBYT4(SIOTPTR),X'0A'                          02S0872
         BNE   @RF00872                                         02S0872
*                SIOUBYT2 = SIOUBYT2 & RPSMASK;                 02S0873
         NI    SIOUBYT2(SIOTPTR),X'EF'                          02S0873
*                                      /*RPS BIT OFF ALSO    @ZA02113*/
*            END;                      /*END IF DIRECT ACCESS@ZA02113*/
@RF00872 DS    0H                                               02S0875
*          IF SIO3TAPE = ON THEN       /*TAPE DEVICE         @ZA02113*/
@RF00869 TM    SIO3TAPE(SIOTPTR),B'10000000'                    02S0875
         BNO   @RF00875                                         02S0875
*            SIOUBYT2 = SIOUBYT2 & OPTIONS;                     02S0876
         NI    SIOUBYT2(SIOTPTR),X'F4'                          02S0876
*                                      /*OPTION BITS OFF     @ZA04104*/
*          IF SIO3UREC = ON THEN       /*UNIT RECORD DEVICE  @ZA02113*/
@RF00875 TM    SIO3UREC(SIOTPTR),B'00001000'                    02S0877
         BNO   @RF00877                                         02S0877
*            IF SIOUBYT4 ^= UR3211 THEN /*NOT A 3211         @ZA02113*/
         CLI   SIOUBYT4(SIOTPTR),X'09'                          02S0878
         BE    @RF00878                                         02S0878
*              SIOUBYT2 = OPTSOFF;     /*ALL OPT BITS OFF    @ZA02113*/
         MVI   SIOUBYT2(SIOTPTR),X'00'                          02S0879
*            ELSE                      /*3211 UNIT RECORD DEV@ZA02113*/
*              SIOUBYT2 = SIOUBYT2 & UCSOPMSK;                  02S0880
         B     @RC00878                                         02S0880
@RF00878 NI    SIOUBYT2(SIOTPTR),X'80'                          02S0880
*                                      /*ALLOW UCS BIT       @ZA02113*/
*          IF SIO3DISP = ON THEN       /*GRAPHICS DEVICE     @ZA02113*/
@RC00878 DS    0H                                               02S0881
@RF00877 TM    SIO3DISP(SIOTPTR),B'00010000'                    02S0881
         BNO   @RF00881                                         02S0881
*            SIOUBYT2 = OPTSOFF;       /*ALL OPTION BITS OFF @ZA02113*/
         MVI   SIOUBYT2(SIOTPTR),X'00'                          02S0882
*        END;                          /*END DEVTYPE PROCESS @ZA02113*/
*      ELSE;                           /*NO DEVICE ALLOCATED @ZA02113*/
@RF00787 DS    0H                                               02S0885
*      SIOTPTR = SIOTNPTR;             /*GET NEXT SIOT.      @ZA02113*/
@RC00787 L     SIOTPTR,SIOTNPTR(,SIOTPTR)                       02S0885
*    END;                              /*END SIOT LOOP.      @ZA02113*/
@DE00786 LTR   SIOTPTR,SIOTPTR                                  02S0886
         BNZ   @DL00786                                         02S0886
*  END;                                /*END SIOT PROCESSING @ZA02113*/
*ELSE;                                                          02S0888
@RF00783 DS    0H                                               02S0889
*                                      /*ALSO, SET UCB(S) PASS  01S0889
*                                        INDICATORS          @ZA02721*/
*RETURN CODE(RTNCODE);                 /*RETURN TO CALLER            */
*                                                               01S0889
*                                                               01S0889
         L     @13,4(,@13)                                      01S0889
         L     @00,@SIZDATD                                     01S0889
         LR    @01,@10                                          01S0889
         FSPACE   R,LV=(0),A=(1)
         LR    @15,@07                                          01S0889
         L     @14,12(,@13)                                     01S0889
         LM    @00,@12,20(@13)                                  01S0889
         BR    @14                                              01S0889
* DECLARE /*GENERAL PURPOSE REGISTERS */                        01S0890
*   GPR00P PTR(31) REG(0),                                      01S0890
*   GPR01P PTR(31) REG(1),                                      01S0890
*   GPR11P PTR(31) REG(11),                                     01S0890
*   GPR12P PTR(31) REG(12),                                     01S0890
*   GPR13P PTR(31) REG(13),                                     01S0890
*   GPR14P PTR(31) REG(14),                                     01S0890
*   GPR15P PTR(31) REG(15);                                     01S0890
*                                                               01S0890
* DECLARE /* COMMON VARIABLES */                                01S0891
*   I256C CHAR(256) BASED,                                      01S0891
*   I031F FIXED(31) BASED,                                      01S0891
*   I031P PTR(31)   BASED,                                      01S0891
*   I015F FIXED(15) BASED,                                      01S0891
*   I015P PTR(15)   BASED,                                      01S0891
*   I008P PTR(8)    BASED,                                      01S0891
*   I001C CHAR(1)   BASED;                                      01S0891
*END IEFAB490                          /*END OF CLEANUP-ALLOCATION   */
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (A490SPEC)                                        *
*/*%INCLUDE SYSLIB  (A490DATA)                                        *
*/*%INCLUDE SYSLIB  (FINIDATA)                                        *
*/*%INCLUDE SYSLIB  (IEFJSSOB)                                        *
*/*%INCLUDE SYSLIB  (IEFZB439)                                        *
*/*%INCLUDE SYSLIB  (IEFASIOT)                                        *
*/*%INCLUDE SYSLIB  (IEFZB448)                                        *
*/*%INCLUDE SYSLIB  (IEFZB423)                                        *
*/*%INCLUDE SYSLIB  (IEFZB431)                                        *
*/*%INCLUDE SYSLIB  (IEFZB425)                                        *
*/*%INCLUDE SYSLIB  (IEFZB427)                                        *
*/*%INCLUDE SYSLIB  (IEFZB428)                                        *
*/*%INCLUDE SYSLIB  (IEFZB447)                                        *
*/*%INCLUDE SYSLIB  (IHAQDB  )                                        *
*/*%INCLUDE SYSLIB  (IHAPSA  )                                        *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*/*%INCLUDE SYSLIB  (IHACSD  )                                        *
*/*%INCLUDE SYSLIB  (IEFJFCBN)                                        *
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                        *
*/*%INCLUDE SYSLIB  (IHADSAB )                                        *
*/*%INCLUDE SYSLIB  (IHASUBIT)                                        *
*/*%INCLUDE SYSLIB  (IEFTIOT1)                                        *
*/*%INCLUDE SYSLIB  (IEZJSCB )                                        *
*/*%INCLUDE SYSLIB  (IEFJESCT)                                        *
*/*%INCLUDE SYSLIB  (FINISALC)                                        *
*/*%INCLUDE SYSLIB  (FINISPEC)                                        *
*/*%INCLUDE SYSLIB  (BACKOUT )                                        *
*/*%INCLUDE SYSLIB  (BACKSPEC)                                        *
*/*%INCLUDE SYSLIB  (BUILDURB)                                        *
*/*%INCLUDE SYSLIB  (BURBSPEC)                                        *
*/*%INCLUDE SYSLIB  (CLEARFF )                                        *
*/*%INCLUDE SYSLIB  (CLRSPEC )                                        *
*/*%INCLUDE SYSLIB  (INVOKCU )                                        *
*/*%INCLUDE SYSLIB  (VOCUSPEC)                                        *
*/*%INCLUDE SYSLIB  (ASUMPVTS)                                        *
*/*%INCLUDE SYSLIB  (ASUMSPEC)                                        *
*/*%INCLUDE SYSLIB  (CHEKISAM)                                        *
*/*%INCLUDE SYSLIB  (CKISSPEC)                                        *
*/*%INCLUDE SYSLIB  (ISAMSPAC)                                        *
*/*%INCLUDE SYSLIB  (ISAMSPEC)                                        *
*/*%INCLUDE SYSLIB  (DUALTIOT)                                        *
*/*%INCLUDE SYSLIB  (DUALSPEC)                                        *
*/*%INCLUDE SYSLIB  (TIOTMOVE)                                        *
*/*%INCLUDE SYSLIB  (MOVESPEC)                                        *
*/*%INCLUDE SYSLIB  (ALLOCMSG)                                        *
*/*%INCLUDE SYSLIB  (AMSGSPEC)                                        *
*/*%INCLUDE SYSLIB  (ALLERMSG)                                        *
*/*%INCLUDE SYSLIB  (ALERSPEC)                                        *
*/*%INCLUDE SYSLIB  (JESINT  )                                        *
*/*%INCLUDE SYSLIB  (JES3SPEC)                                        *
*/*%INCLUDE SYSLIB  (TERMCALL)                                        *
*/*%INCLUDE SYSLIB  (TERMSPEC)                                        *
*/*%INCLUDE SYSLIB  (FREEGETS)                                        *
*/*%INCLUDE SYSLIB  (FREESPEC)                                        *
*/*%INCLUDE SYSLIB  (GETDEVT )                                        *
*/*%INCLUDE SYSLIB  (GETDSPEC)                                        *
*/*%INCLUDE SYSLIB  (SETPASS )                                        *
*/*%INCLUDE SYSLIB  (SETSPEC )                                        *
*;                                                              01S0892
@DATA    DS    0H
@CH00087 DC    H'2'
@CH00201 DC    H'3'
@CH00076 DC    H'5'
@CH00107 DC    H'13'
@CH00160 DC    H'18'
@CH00246 DC    H'20'
@CH00057 DC    H'24'
@CH00188 DC    H'32'
@CH00164 DC    H'51'
@CH00229 DC    H'81'
@SM02976 MVC   PVTMBUFF(0),MSGTEXT(PVTMSGP)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    3F
@AL00001 DS    10A
@TF00001 DS    F
@TF00002 DS    F
IEFAB490 CSECT
         DS    0F
@CF00198 DC    F'0'
@CF00071 DC    F'1'
@CH00071 EQU   @CF00071+2
@CF00068 DC    F'4'
@CH00068 EQU   @CF00068+2
@CF00048 DC    F'16'
@CH00048 EQU   @CF00048+2
@CF00162 DC    F'28'
@CH00162 EQU   @CF00162+2
@CF02982 DC    F'-4'
@CF00189 DC    XL4'E6000000'
@DATD    DSECT
         DS    0D
JSCBP    DS    A
LUTPTR   DS    A
NAMESP   DS    A
RESNCDP  DS    A
SAVSIOTP DS    A
SAVUPTR  DS    A
SIOT1PTR DS    A
STOPECBP DS    A
THETCBP  DS    A
ISAMNUM  DS    F
PVTMLNTH DS    F
FRBPTR   DS    A
SSERRBKP DS    A
FUNC4A0  DS    F
NUMUNALS DS    F
RBSIZE   DS    F
QDBPTR   DS    A
JFCBPTR  DS    A
TIOTPTR  DS    A
TCBJSCB  DS    A
VUCBCTR  DS    H
NONSPCT  DS    H
VOLUNCTR DS    H
@TS00001 DS    CL4
CLENUPFM DS    CL1
         ORG   CLENUPFM
WAITSW   DS    BL1
RETRYSW  EQU   CLENUPFM+0
REQUSW   EQU   CLENUPFM+0
@NM00001 EQU   CLENUPFM+0
         ORG   CLENUPFM+1
COPYFUNC DS    CL16
         ORG   COPYFUNC
@NM00002 DS    BL1
COPYRTRY EQU   COPYFUNC+0
DONTENQV DS    BL1
@NM00003 EQU   COPYFUNC+1
         ORG   COPYFUNC+16
DUALCHG  DS    BL1
FFTAPESW DS    BL1
FUNC4FD  DS    BL1
         ORG   FUNC4FD
@NM00004 DS    BL1
WTPONLY  EQU   FUNC4FD+0
         ORG   FUNC4FD+1
ISAMBITS DS    BL1
         ORG   ISAMBITS
ADSP     DS    BL1
NOADSP   EQU   ISAMBITS+0
ISAMSW   EQU   ISAMBITS+0
NONISW   EQU   ISAMBITS+0
NEWSW    EQU   ISAMBITS+0
OLDSW    EQU   ISAMBITS+0
DUMSW    EQU   ISAMBITS+0
NDUMSW   EQU   ISAMBITS+0
         ORG   ISAMBITS+1
         DS    CL1
ISAMPLST DS    CL20
         ORG   ISAMPLST
CURDSABP DS    AL4
ISAMDSAB DS    4A
         ORG   ISAMPLST+20
JESFLAGS DS    BL2
         ORG   JESFLAGS
@NM00005 DS    BL1
LASTCALL EQU   JESFLAGS+0
@NM00006 EQU   JESFLAGS+0
         ORG   JESFLAGS+2
MSGFUNC  DS    BL1
         ORG   MSGFUNC
BUILDHDR DS    BL1
@NM00007 EQU   MSGFUNC+0
@NM00008 EQU   MSGFUNC+0
RTECONSL EQU   MSGFUNC+0
RTECONLY EQU   MSGFUNC+0
HDRCONLY EQU   MSGFUNC+0
         ORG   MSGFUNC+1
PVTMBUFF DS    CL120
         ORG   PVTMBUFF
@NM00009 DS    CL8
PVTJNAM  DS    CL9
PVTSNAM  DS    CL9
PVTPSNAM DS    CL9
PVTDDNAM DS    CL8
         ORG   PVTMBUFF+120
TMTCHSW  DS    BL1
NEWUNALS DS    BL1
ONLYAFFS DS    BL1
URCODES  DS    CL8
         DS    CL2
SSOB     DS    CL20
         ORG   SSOB
SSOBID   DS    CL4
SSOBLEN  DS    FL2
SSOBFUNC DS    FL2
SSOBSSIB DS    AL4
SSOBRETN DS    AL4
SSOBINDV DS    AL4
         ORG   SSOB+20
SSCA     DS    CL32
         ORG   SSCA
SSCALEN  DS    FL2
SSCARSV0 DS    FL2
SSCAPSTN DS    AL4
SSCAPDDN DS    AL4
SSCAPDSN DS    AL4
SSCAPRPN DS    AL4
SSCAPNUN DS    AL4
SSCAPUAR DS    AL4
SSCAPFLG DS    AL4
         ORG   SSCA+32
TERMAREA DS    CL16
IEFAB490 CSECT
         DS    0F
@SIZDATD DC    AL1(230)
         DC    AL3(@ENDDATD-@DATD)
@CV00209 DC    V(IEFAB492)
@CV00210 DC    V(IEFAB4FA)
@CV00211 DC    V(IEFAB4FD)
@CV00212 DC    V(IEFAB4F3)
@CV00213 DC    V(IEFAB421)
@CV00214 DC    V(IEFAB4EE)
@CA00215 DC    A(PVTMSG)
@CV00232 DC    V(IEFAB4A0)
         DS    0D
GTSTZERO DC    F'0'
@CC00155 DC    C'SSOB'
FFVOLSER DC    X'FF'
MINITFNC DC    B'01001100'
ONESMASK DC    240X'FF'
ERORCODE DC    H'22'
         DC    H'23'
         DC    H'24'
         DC    H'25'
         DC    H'26'
         DC    H'27'
         DC    H'28'
         DC    H'29'
         DC    H'30'
         DC    H'31'
         DC    H'32'
         DC    H'0'
         DC    H'33'
         DC    H'34'
         DC    H'35'
         DC    H'36'
         DC    H'0'
         DC    H'0'
         DC    H'38'
         DC    H'39'
         DC    H'40'
         DC    H'41'
         DC    H'42'
         DC    H'43'
         DC    H'44'
         DC    H'45'
         DC    H'46'
         DC    H'47'
         DC    H'0'
         DC    H'0'
         DC    H'0'
         DC    H'48'
         DC    H'49'
         DC    H'0'
         DC    H'50'
         DC    H'51'
         DC    H'61'
         DC    H'62'
         DC    H'63'
         DC    H'64'
         DC    H'69'
         DC    H'16'
         DC    H'17'
IEFAB490 CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEFAB490 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
GTSTRTCD EQU   @09
DEVCTR   EQU   @09
SPTR     EQU   @03
CMRBPTR  EQU   @02
CFMAPTR  EQU   @02
VUCTR    EQU   @02
TUCBNUM  EQU   @05
TUCBCTR  EQU   @08
SAVGRPID EQU   @09
SAVECNT  EQU   @02
RTNCODE  EQU   @07
RELDEVNO EQU   @03
MINUSCNT EQU   @03
I        EQU   @04
ISAMCTR  EQU   @08
VUPTR    EQU   @03
VMVREQBP EQU   @02
UCBPTR   EQU   @08
SIOTPTR  EQU   @06
SDEVTPTR EQU   @04
SAVUCBP  EQU   @04
PVTMSGP  EQU   @02
DSABPTR  EQU   @02
ALUCBP   EQU   @09
REG0     EQU   @00
REG1     EQU   @01
REG2     EQU   @02
REG15    EQU   @15
GTSTR0   EQU   @00
GTSTR1   EQU   @01
GTSTR2   EQU   @02
GTSTR15  EQU   @15
GTSTR4   EQU   @04
GTSTR5   EQU   @05
GTSTR6   EQU   @06
GTSTR7   EQU   @07
GTSTR8   EQU   @08
GPR11P   EQU   @11
GPR12P   EQU   @12
GPR13P   EQU   @13
GPR14P   EQU   @14
GPR15P   EQU   @15
GPR00P   EQU   @00
GPR01P   EQU   @01
GTSTR3   EQU   @03
         EXTRN PVTMSG
CVTPTR   EQU   16
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
AQMPARAM EQU   0
AQMECODE EQU   AQMPARAM
AQMMASKP EQU   AQMPARAM+4
AQMNORMP EQU   AQMPARAM+20
CANCLECB EQU   0
@NM00010 EQU   0
TXTLNTH  EQU   @NM00010+2
MSGTEXT  EQU   @NM00010+4
REASONCD EQU   0
RESNCODE EQU   0
SAVEDEVT EQU   0
CMUNFMAP EQU   0
CMFMBYT1 EQU   CMUNFMAP
CMDISPRC EQU   CMFMBYT1
CMUNUNIT EQU   CMFMBYT1
CMVLRLSE EQU   CMFMBYT1
CMFDSABS EQU   CMFMBYT1
CMFMBYT2 EQU   CMUNFMAP+1
CMNOVUT  EQU   CMFMBYT2
CMCHATTR EQU   CMFMBYT2
CMRDDENT EQU   CMFMBYT2
CMNERMSG EQU   CMFMBYT2
CMPURGE  EQU   CMFMBYT2
CMTIOTNQ EQU   CMFMBYT2
CMFMBYT3 EQU   CMUNFMAP+2
CMNOSMF  EQU   CMFMBYT3
CMSCRVL1 EQU   CMFMBYT3
CMFMBYT4 EQU   CMUNFMAP+3
CMUNRB   EQU   0
CMNRBPTR EQU   CMUNRB
CMSIOPTR EQU   CMUNRB+4
CMINDIC  EQU   CMUNRB+8
CMRBBYT1 EQU   CMINDIC
CMORDISP EQU   CMRBBYT1
CMRBBYT2 EQU   CMINDIC+1
CMNODSR  EQU   CMRBBYT2
CMCKDAVL EQU   CMRBBYT2
CMRBBYT3 EQU   CMINDIC+2
CMRBBYT4 EQU   CMINDIC+3
CMODISP  EQU   CMUNRB+12
CMOKEEP  EQU   CMODISP
CMODEL   EQU   CMODISP
CMRETCDE EQU   CMUNRB+14
CMOPTFLD EQU   CMUNRB+16
INDMSIOT EQU   0
SCTDDNAM EQU   INDMSIOT+4
SCTUSADD EQU   INDMSIOT+20
SIOTUNAF EQU   SCTUSADD
SIOTAFID EQU   INDMSIOT+26
SIOTOTUN EQU   INDMSIOT+39
SIOPSCNT EQU   INDMSIOT+42
SIOTBYT1 EQU   INDMSIOT+43
SIOVAMDS EQU   SIOTBYT1
SIODADSM EQU   SIOTBYT1
SIOTALCD EQU   SIOTBYT1
SCTDDINO EQU   INDMSIOT+44
SIOTBYT3 EQU   INDMSIOT+46
SIOTJES3 EQU   SIOTBYT3
SIOTTSTC EQU   INDMSIOT+47
SIOTGIID EQU   INDMSIOT+50
SIOTBYT0 EQU   INDMSIOT+52
SIOTSSDS EQU   SIOTBYT0
SPVTAMSG EQU   SIOTBYT0
SIOTGIGN EQU   SIOTBYT0
SCTSDISP EQU   INDMSIOT+55
SIOTRETN EQU   SCTSDISP
SIOTPASS EQU   SCTSDISP
SCTSBYT1 EQU   INDMSIOT+56
SCTDUMMY EQU   SCTSBYT1
SIOTCCAT EQU   SCTSBYT1
SCTSBYT2 EQU   INDMSIOT+57
SCTSBYT3 EQU   INDMSIOT+58
SCTSNEW  EQU   SCTSBYT3
SCTSBYT4 EQU   INDMSIOT+59
SIOTSTEP EQU   SCTSBYT4
SCTUTYPE EQU   INDMSIOT+60
SIOTDEVT EQU   SCTUTYPE
SIOUBYT2 EQU   SIOTDEVT+1
SIOUBYT3 EQU   SIOTDEVT+2
SIO3TAPE EQU   SIOUBYT3
SIO3DACC EQU   SIOUBYT3
SIO3DISP EQU   SIOUBYT3
SIO3UREC EQU   SIOUBYT3
SIOUBYT4 EQU   SIOTDEVT+3
SIOUCNVT EQU   SCTUTYPE+4
SIOUCBAD EQU   SCTUTYPE+5
SIOTBYT4 EQU   INDMSIOT+81
SIOTALTD EQU   INDMSIOT+92
SIOTBYT2 EQU   INDMSIOT+103
SIOTDMND EQU   SIOTBYT2
SIOTDSPD EQU   SIOTBYT2
SIOTRSNC EQU   INDMSIOT+130
SIOTEDLS EQU   INDMSIOT+132
SIOTEDLP EQU   INDMSIOT+136
SVOLUNAD EQU   INDMSIOT+140
SIOTETIO EQU   INDMSIOT+148
SIOTNPTR EQU   INDMSIOT+152
SJFCBPTR EQU   INDMSIOT+156
SIOTVMVP EQU   INDMSIOT+164
SVOLUNNO EQU   INDMSIOT+168
VOLUNTAB EQU   0
VOLSTAT  EQU   VOLUNTAB+6
VOLSTATA EQU   VOLSTAT
VOLSTATB EQU   VOLSTAT+1
VDEVREQD EQU   VOLSTATB
VUDNALOC EQU   VOLSTATB
VUDADSME EQU   VOLSTATB
VOLSTATC EQU   VOLSTAT+2
VOLSTATD EQU   VOLSTAT+3
VUUNALSW EQU   VOLSTATD
VOLSIOTP EQU   VOLUNTAB+16
VUUCBP   EQU   VOLUNTAB+20
VUGRID   EQU   VOLUNTAB+24
VUPOOL   EQU   0
VUPOOL#  EQU   VUPOOL
VUCBS    EQU   VUPOOL+4
VUGRLST  EQU   0
VUGRLENT EQU   VUGRLST
VUGRLFLG EQU   VUGRLENT+4
VUGRALCD EQU   VUGRLFLG
VMVRQBLK EQU   0
VMVFNMAP EQU   VMVRQBLK
VMVOPTB1 EQU   VMVFNMAP
VMVOPTB2 EQU   VMVFNMAP+1
VMVOPTB3 EQU   VMVFNMAP+2
VMVNREQP EQU   VMVRQBLK+4
VMVMINFO EQU   VMVRQBLK+40
VMVACTON EQU   VMVMINFO
VMVUSER  EQU   VMVRQBLK+48
ALCWA    EQU   0
WASIZE   EQU   ALCWA
FMAPPTR  EQU   ALCWA+4
SIOT1P   EQU   ALCWA+8
JSCBPTR  EQU   ALCWA+12
IOSLUTP  EQU   ALCWA+16
FAILRSCP EQU   ALCWA+20
CNTABLE  EQU   ALCWA+28
VOLUNPTR EQU   ALCWA+80
VOLUNSZE EQU   ALCWA+84
ALGTABP  EQU   ALCWA+88
ALGTABSZ EQU   ALCWA+92
QMGRRBP  EQU   ALCWA+108
INDICATE EQU   ALCWA+112
INDRETRY EQU   INDICATE
INDREQU  EQU   INDICATE
PRIVASUM EQU   INDICATE
DSSTAPE  EQU   INDICATE
DSSUNIT  EQU   INDICATE
ALCWISAM EQU   INDICATE
ALCWADUL EQU   INDICATE
@NM00049 EQU   ALCWA+113
UNITRECS EQU   @NM00049
NODEVERR EQU   @NM00049
ALCWASID EQU   ALCWA+114
TCBP     EQU   ALCWA+116
TIOTHDRP EQU   ALCWA+120
WMASK2P  EQU   ALCWA+132
CANCELP  EQU   ALCWA+140
EXITPRMP EQU   ALCWA+144
GRIDPTR  EQU   ALCWA+152
GROUPSZ  EQU   ALCWA+156
SSERBLKP EQU   ALCWA+160
LOJSSNMP EQU   ALCWA+164
NAMES    EQU   0
ALCJOBN  EQU   NAMES
ALCSTEPN EQU   NAMES+8
ALCPROCN EQU   NAMES+16
FUNCMAP  EQU   0
VOLMNTSW EQU   FUNCMAP
WRTMSGSW EQU   FUNCMAP
UWAITSW  EQU   FUNCMAP
VWAITSW  EQU   FUNCMAP
MSSTRMSW EQU   FUNCMAP
ALCMSSTM EQU   MSSTRMSW
OFFDEVSW EQU   FUNCMAP
CCLMNTSW EQU   FUNCMAP
GENLOKSW EQU   FUNCMAP
SSEMSGSW EQU   FUNCMAP+1
HDRMSGSW EQU   FUNCMAP+1
MTRJOBSW EQU   FUNCMAP+1
NOTIOTNQ EQU   FUNCMAP+1
TRKMSW   EQU   FUNCMAP+1
WAITOKSW EQU   FUNCMAP+1
ASNMSW   EQU   FUNCMAP+1
EXTRACAL EQU   FUNCMAP+1
PRMESTAE EQU   0
PRMRESC  EQU   PRMESTAE+252
DSSTAP   EQU   PRMRESC
DSSUNREC EQU   PRMRESC
PRMFUNC  EQU   PRMESTAE+253
QDB      EQU   0
QDBFELMP EQU   QDB+12
TRMRB    EQU   0
TRMRBLEN EQU   TRMRB
TRMRBOPC EQU   TRMRB+4
TRMFLAGS EQU   TRMRB+5
TRMALLOK EQU   TRMFLAGS
TRMJOBID EQU   TRMRB+8
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTJESCT EQU   CVTMAP+296
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
CSD      EQU   0
CSDCPUAL EQU   CSD+8
CSDSCWRD EQU   CSD+12
CSDSCFL1 EQU   CSDSCWRD
CSDSCFL2 EQU   CSDSCWRD+1
CSDSCFL3 EQU   CSDSCWRD+2
CSDSCFL4 EQU   CSDSCWRD+3
CSDFLAGS EQU   CSD+23
CSDTCNT  EQU   CSD+120
CSDUCNT  EQU   CSD+124
INFMJFCB EQU   0
JFCBDSNM EQU   INFMJFCB
JFCBELNM EQU   INFMJFCB+44
JFCBTSDM EQU   INFMJFCB+52
JFCFCBID EQU   INFMJFCB+56
JFCBFRID EQU   JFCFCBID
JFCBLTYP EQU   INFMJFCB+66
JFCBOTTR EQU   INFMJFCB+67
JFCBUFOF EQU   JFCBOTTR
JFCBFLSQ EQU   JFCBOTTR+1
JFCFUNC  EQU   JFCBFLSQ
JFCBMASK EQU   INFMJFCB+72
JFCBFLG1 EQU   JFCBMASK+5
JFCOPEN  EQU   JFCBFLG1
JFCBFLG2 EQU   JFCBMASK+6
JFCDEFER EQU   JFCBFLG2
JFCBIND1 EQU   INFMJFCB+86
JFCBIND2 EQU   INFMJFCB+87
JFCAMPTR EQU   INFMJFCB+88
JFCBUFRQ EQU   JFCAMPTR
JFCBUFNO EQU   JFCBUFRQ
JFCBGNCP EQU   JFCAMPTR+1
JFCBHIAR EQU   JFCBGNCP
JFCBFALN EQU   JFCBHIAR
JFCBFTEK EQU   JFCBFALN
JFCBBFTA EQU   JFCBFTEK
JFCEROPT EQU   INFMJFCB+92
JFCTRTCH EQU   INFMJFCB+93
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBMONT  EQU   UCBJBNR
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBRESV  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCB3TAPE EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00090 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCB3800X EQU   0
UCBOPTNS EQU   UCB3800X
UCBACTIV EQU   UCB3800X+3
UCBMDRBF EQU   UCB3800X+36
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
DSAB     EQU   0
DSABFCHN EQU   DSAB+4
DSABTIOT EQU   DSAB+16
DSABGIDP EQU   DSAB+24
DSABANMP EQU   DSAB+28
DSABORG  EQU   DSAB+32
DSABORG1 EQU   DSABORG
DSABORG2 EQU   DSABORG+1
DSABFLG1 EQU   DSAB+34
DSABFLG2 EQU   DSAB+35
DSABFLG3 EQU   DSAB+36
DSABFLG4 EQU   DSAB+37
DSABANMI EQU   0
DSABGIDL EQU   0
DSABGRID EQU   DSABGIDL+4
SUBITS   EQU   0
SUBYTE1  EQU   SUBITS
SUBYTE2  EQU   SUBITS+1
SUBYTE3  EQU   SUBITS+2
SU18BIT  EQU   SUBYTE3
SUBYTE4  EQU   SUBITS+3
SU29BIT  EQU   SUBYTE4
SUBYTE5  EQU   SUBITS+4
SUBYTE6  EQU   SUBITS+5
SUBYTE7  EQU   SUBITS+6
SUBYTE8  EQU   SUBITS+7
SUBYTE9  EQU   SUBITS+8
SUBYTE10 EQU   SUBITS+9
SUBYTE11 EQU   SUBITS+10
SUBYTE12 EQU   SUBITS+11
SUBYTE13 EQU   SUBITS+12
TIOT1    EQU   0
TIOENTRY EQU   0
TIOESTTA EQU   TIOENTRY+1
TIOERLOC EQU   TIOENTRY+2
TIOEWTCT EQU   TIOERLOC
TIOELINK EQU   TIOERLOC+1
TIOESYOT EQU   TIOELINK
TIOESTTC EQU   TIOENTRY+15
TIOESTTB EQU   TIOENTRY+16
POOLSTAR EQU   TIOENTRY+20
IEZJSCB  EQU   0
JSCBSEC1 EQU   IEZJSCB+188
JSCHPCE  EQU   JSCBSEC1+4
JSCBDCB  EQU   JSCBSEC1+36
JSCBOPTS EQU   JSCBSEC1+48
JSCBSWT1 EQU   JSCBSEC1+55
JSCBWTP  EQU   JSCBSEC1+64
JSCBWTFG EQU   JSCBWTP
JSCBEND1 EQU   IEZJSCB+260
JESCT    EQU   0
JESWAA   EQU   JESCT+8
JESSSREQ EQU   JESCT+20
JESALLOC EQU   JESCT+32
JESUNALC EQU   JESCT+36
JESCATL  EQU   JESCT+40
SSREQ    EQU   0
IEFAB4F5 EQU   0
IEFBB410 EQU   0
IEFW21SD EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
SWAMGR   EQU   0
UCBBGN   EQU   0
ALCWAPTR EQU   0
INPUTRC  EQU   0
STEPNUM  EQU   0
PSARSVTE EQU   PSARSVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTCSD   EQU   CVTS01+312
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
CVTIHASU EQU   CVTS01+696
JFCKEYLE EQU   JFCTRTCH
JFCCODE  EQU   JFCKEYLE
JFCSTACK EQU   JFCTRTCH
JFCMODE  EQU   JFCSTACK
JFCSPPRT EQU   JFCTRTCH
JFCBABFS EQU   JFCSPPRT+2
JFCLIMCT EQU   JFCBABFS
JFCDSORG EQU   JFCSPPRT+5
JFCDSRG1 EQU   JFCDSORG
JFCORGIS EQU   JFCDSRG1
JFCDSRG2 EQU   JFCDSORG+1
JFCRECFM EQU   JFCSPPRT+7
JFCRCFM  EQU   JFCRECFM
JFCOPTCD EQU   JFCSPPRT+8
JFCWVCSP EQU   JFCOPTCD
JFCWVCIS EQU   JFCWVCSP
JFCWVCBD EQU   JFCWVCIS
JFCALLOW EQU   JFCOPTCD
JFCRSV17 EQU   JFCALLOW
JFCOVER  EQU   JFCRSV17
JFCPCIBT EQU   JFCOPTCD
JFCMAST  EQU   JFCPCIBT
JFCEXT   EQU   JFCMAST
JFCBCKPT EQU   JFCOPTCD
JFCIND   EQU   JFCBCKPT
JFCRSV18 EQU   JFCOPTCD
JFCCYL   EQU   JFCRSV18
JFCACT   EQU   JFCCYL
JFCREDUC EQU   JFCOPTCD
JFCRSV19 EQU   JFCREDUC
JFCRSV20 EQU   JFCRSV19
JFCRSV21 EQU   JFCOPTCD
JFCDEL   EQU   JFCRSV21
JFCOPTJ  EQU   JFCOPTCD
JFCREORG EQU   JFCOPTJ
JFCBLKSI EQU   JFCSPPRT+9
JFCBUFSI EQU   JFCBLKSI
JFCAMSYN EQU   JFCSPPRT+11
JFCNCP   EQU   JFCAMSYN+2
JFCNTM   EQU   JFCAMSYN+3
JFCBFSEQ EQU   JFCNTM
JFCPCI   EQU   JFCBFSEQ
JFCRESRV EQU   JFCAMSYN+4
JFCUCSEG EQU   JFCRESRV
JFCUCSOP EQU   JFCUCSEG+4
JFCOUTLI EQU   JFCUCSEG+5
JFCTHRSH EQU   JFCOUTLI
JFCCPRI  EQU   JFCTHRSH
JFCBNVOL EQU   JFCUCSEG+9
JFCBVOLS EQU   JFCUCSEG+10
JFCBS001 EQU   JFCBVOLS
JFCBPQTY EQU   JFCBS001+34
JFCBCTRI EQU   JFCBS001+37
JFCBSQTY EQU   JFCBS001+38
JFCFLGS1 EQU   JFCBS001+41
JFCBADSP EQU   JFCFLGS1
UCBOBS01 EQU   UCBDEV
UCBVOLI  EQU   UCBOBS01+4
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00089 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBCTCAD EQU   UCBOBS08
UCBCTCF1 EQU   UCBOBS08+4
UCBOBS09 EQU   UCBDEV
TIOEDEVE EQU   TIOESTTB
TIOSTTB  EQU   TIOEDEVE
TIOUCBP  EQU   TIOEDEVE+1
JSCBSEC2 EQU   JSCBEND1
JSCBSEC3 EQU   JSCBEND1
JSCBJCT  EQU   JSCBSEC3
JSCBJCTA EQU   JSCBJCT+1
JSCBASID EQU   JSCBSEC3+8
JSCBFBYT EQU   JSCBSEC3+10
JSCBJNL  EQU   JSCBSEC3+28
JSCBJJSB EQU   JSCBJNL
JSCBSUB  EQU   JSCBSEC3+40
JSCDSABQ EQU   JSCBSEC3+60
JSCSCT   EQU   JSCBSEC3+68
JSCRSV45 EQU   JSCBSEC3+112
JSCRSV46 EQU   JSCRSV45
JSCRSV47 EQU   JSCRSV45+2
CMUIDPTR EQU   CMOPTFLD
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
JSCBEND3 EQU   JSCBSEC3+120
JSCRSV52 EQU   JSCBSEC3+116
JSCRSV51 EQU   JSCRSV47+1
JSCRSV50 EQU   JSCRSV47
JSCRSV49 EQU   JSCRSV46+1
JSCRSV48 EQU   JSCRSV46
JSCRSV44 EQU   JSCBSEC3+108
JSCRSV43 EQU   JSCBSEC3+104
JSCRSV42 EQU   JSCBSEC3+100
JSCBASWA EQU   JSCBSEC3+96
JSCBUFPT EQU   JSCBSEC3+92
JSCBACT  EQU   JSCBSEC3+88
JSCBSWSP EQU   JSCBSEC3+87
JSCRSV33 EQU   JSCBSEC3+86
JSCDDNUM EQU   JSCBSEC3+84
JSCRSV53 EQU   JSCBSEC3+82
JSCDDNNO EQU   JSCBSEC3+80
JSCBVATA EQU   JSCBSEC3+76
JSCTMCOR EQU   JSCBSEC3+72
JSCSCTP  EQU   JSCSCT+1
JSCRSV55 EQU   JSCSCT
JSCRSV54 EQU   JSCBSEC3+64
JSCBSSIB EQU   JSCBSEC3+56
JSCBFRBA EQU   JSCBSEC3+48
JSCRSV28 EQU   JSCBSEC3+46
JSCBSONO EQU   JSCBSEC3+44
JSCBSUBA EQU   JSCBSUB+1
JSCRSV31 EQU   JSCBSUB
JSCBSMLR EQU   JSCBSEC3+36
JSCBJNLR EQU   JSCBSEC3+32
JSCBJNLA EQU   JSCBJNL+1
JSCBJSBT EQU   JSCBJJSB
JSCBJSBX EQU   JSCBJJSB
JSCBJSBA EQU   JSCBJJSB
JSCBJSBI EQU   JSCBJJSB
@NM00101 EQU   JSCBJJSB
JSCBJNLE EQU   JSCBJJSB
JSCBJNLF EQU   JSCBJJSB
JSCBJNLN EQU   JSCBJJSB
@NM00100 EQU   JSCBSEC3+24
JSCBJRBA EQU   JSCBSEC3+16
JSCBIECB EQU   JSCBSEC3+12
JSCBRV08 EQU   JSCBSEC3+11
JSCBRV07 EQU   JSCBFBYT
JSCBRV06 EQU   JSCBFBYT
JSCBRV05 EQU   JSCBFBYT
JSCBRV04 EQU   JSCBFBYT
JSCBRV03 EQU   JSCBFBYT
JSCBRV02 EQU   JSCBFBYT
JSCBADSP EQU   JSCBFBYT
JSCBRV01 EQU   JSCBFBYT
JSCBTJID EQU   JSCBASID
JSCBPSCB EQU   JSCBSEC3+4
JSCJCTP  EQU   JSCBJCTA
JSCRSV24 EQU   JSCBJCT
JSCBEND2 EQU   JSCBSEC2
TIOVERF  EQU   TIOSTTB
TIOUNLD  EQU   TIOSTTB
TIOMNTD  EQU   TIOSTTB
TIOSETU  EQU   TIOSTTB
TIOVLSR  EQU   TIOSTTB
TIOPVIO  EQU   TIOSTTB
TIOREQD  EQU   TIOSTTB
TIOUSED  EQU   TIOSTTB
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBRV082 EQU   UCBCTCF1
UCBRV081 EQU   UCBCTCF1
UCBRV080 EQU   UCBCTCF1
UCBRV079 EQU   UCBCTCF1
UCBRV078 EQU   UCBCTCF1
UCBRV077 EQU   UCBCTCF1
UCBRV076 EQU   UCBCTCF1
UCBCTC80 EQU   UCBCTCF1
UCBCTCAL EQU   UCBCTCAD
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00089
UCBSKPFG EQU   @NM00089
UCBRIPND EQU   @NM00089
UCBRTIAC EQU   @NM00089
UCBRSV79 EQU   @NM00089
UCBRSV78 EQU   @NM00089
UCBRSV77 EQU   @NM00089
UCBOLTEP EQU   @NM00089
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBRV038 EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00088 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBMAT   EQU   UCBFL4
UCBHOLD  EQU   UCBFL4
UCBATTN  EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRESVP EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVTOC  EQU   UCBOBS01
JFCBEND  EQU   JFCBS001+58
JFCBSPTN EQU   JFCBS001+57
JFCBVLCT EQU   JFCBS001+56
JFCBDRLH EQU   JFCBS001+53
JFCBSBNM EQU   JFCBS001+50
JFCBABST EQU   JFCBS001+48
JFCBSPNM EQU   JFCBS001+45
JFCBDQTY EQU   JFCBS001+42
JFCBUAFF EQU   JFCFLGS1
JFCRSV45 EQU   JFCFLGS1
JFCVRDS  EQU   JFCFLGS1
JFCBCEOV EQU   JFCFLGS1
JFCBPROT EQU   JFCFLGS1
JFCTOPEN EQU   JFCFLGS1
JFCBDLET EQU   JFCFLGS1
JFCRQID  EQU   JFCBSQTY
JFCROUND EQU   JFCBCTRI
JFCALX   EQU   JFCBCTRI
JFCMIXG  EQU   JFCBCTRI
JFCONTIG EQU   JFCBCTRI
JFCRSV29 EQU   JFCBCTRI
JFCBMSGP EQU   JFCBCTRI
JFCBSPAC EQU   JFCBCTRI
JFCRUNIT EQU   JFCBPQTY
JFCBEXAD EQU   JFCBS001+31
JFCBEXTL EQU   JFCBS001+30
JFCMSVGP EQU   JFCBS001+22
@NM00086 EQU   JFCBS001
JFCAVOLS EQU   JFCBVOLS
JFCBNTCS EQU   JFCUCSEG+8
JFCSOWA  EQU   JFCOUTLI+1
JFCSEND  EQU   JFCCPRI
JFCEQUAL EQU   JFCCPRI
JFCRECV  EQU   JFCCPRI
JFCRSV34 EQU   JFCCPRI
JFCRSV33 EQU   JFCCPRI
JFCRSV55 EQU   JFCCPRI
JFCRSV54 EQU   JFCCPRI
JFCRSV53 EQU   JFCCPRI
JFCRSV27 EQU   JFCUCSOP
JFCRSV26 EQU   JFCUCSOP
JFCFCBVR EQU   JFCUCSOP
JFCFCBAL EQU   JFCUCSOP
JFCVER   EQU   JFCUCSOP
JFCRSV25 EQU   JFCUCSOP
JFCFOLD  EQU   JFCUCSOP
JFCBEXTP EQU   JFCUCSOP
JFCUCSID EQU   JFCUCSEG
JFCINTVL EQU   JFCSPPRT+19
JFCDBUFN EQU   JFCRESRV+3
JFCCYLOF EQU   JFCRESRV+2
JFCRKP   EQU   JFCRESRV
JFCPCIR2 EQU   JFCPCI
JFCPCIR1 EQU   JFCPCI
JFCPCIN2 EQU   JFCPCI
JFCPCIN1 EQU   JFCPCI
JFCPCIA2 EQU   JFCPCI
JFCPCIA1 EQU   JFCPCI
JFCPCIX2 EQU   JFCPCI
JFCPCIX1 EQU   JFCPCI
JFCBUFMX EQU   JFCNCP
JFCLRECL EQU   JFCAMSYN
JFCBAXBF EQU   JFCBUFSI
JFCREL   EQU   JFCREORG
JFCRSV22 EQU   JFCDEL
JFCSRCHD EQU   JFCRSV20
JFCOPTQ  EQU   JFCACT
JFCFEED  EQU   JFCIND
JFCCBWU  EQU   JFCEXT
JFCWUMSG EQU   JFCOVER
JFCSDNAM EQU   JFCWVCBD
@NM00085 EQU   JFCRECFM
JFCCHAR  EQU   JFCRECFM
JFCRFS   EQU   JFCRECFM
JFCRFB   EQU   JFCRECFM
JFCRFO   EQU   JFCRCFM
JFCFMREC EQU   JFCRCFM
JFCRSV16 EQU   JFCDSRG2
JFCRSV15 EQU   JFCDSRG2
JFCORGTR EQU   JFCDSRG2
JFCORGAM EQU   JFCDSRG2
JFCRSV13 EQU   JFCDSRG2
JFCORGTQ EQU   JFCDSRG2
JFCORGTX EQU   JFCDSRG2
JFCORGGS EQU   JFCDSRG2
JFCORGU  EQU   JFCDSRG1
JFCORGPO EQU   JFCDSRG1
JFCORGMQ EQU   JFCDSRG1
JFCORGCQ EQU   JFCDSRG1
JFCORGCX EQU   JFCDSRG1
JFCORGDA EQU   JFCDSRG1
JFCORGPS EQU   JFCDSRG1
JFCTRKBL EQU   JFCLIMCT+1
@NM00084 EQU   JFCLIMCT
JFCDEN   EQU   JFCSPPRT+1
JFCPRTSP EQU   JFCSPPRT
JFCONE   EQU   JFCMODE
JFCTWO   EQU   JFCMODE
JFCRSV07 EQU   JFCMODE
JFCRSV06 EQU   JFCMODE
JFCMODER EQU   JFCMODE
JFCMODEO EQU   JFCMODE
JFCEBCD  EQU   JFCMODE
JFCBIN   EQU   JFCMODE
JFCRSV32 EQU   JFCCODE
JFCTTY   EQU   JFCCODE
JFCASCII EQU   JFCCODE
JFCNCR   EQU   JFCCODE
JFCBUR   EQU   JFCCODE
JFCFRI   EQU   JFCCODE
JFCBCD   EQU   JFCCODE
JFCNOCON EQU   JFCCODE
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
JESSASTA EQU   JESCT+48
JESNUCBS EQU   JESCT+44
JESPJESN EQU   JESCT+28
JESSSCT  EQU   JESCT+24
JESRESQM EQU   JESCT+16
JESQMGR  EQU   JESCT+12
JESUNITS EQU   JESCT+4
@NM00102 EQU   JESCT
JSCBCSCB EQU   JSCBSEC1+68
JSCBPMG  EQU   JSCBWTP+2
JSCBWTSP EQU   JSCBWTP+1
JSCRSV23 EQU   JSCBWTFG
JSCRSV22 EQU   JSCBWTFG
JSCRSV21 EQU   JSCBWTFG
JSCRSV20 EQU   JSCBWTFG
JSCRSV19 EQU   JSCBWTFG
JSCRSV18 EQU   JSCBWTFG
JSCBRET  EQU   JSCBWTFG
JSCBIOFG EQU   JSCBWTFG
@NM00099 EQU   JSCBSEC1+60
JSCBQMPI EQU   JSCBSEC1+56
JSCBPMSG EQU   JSCBSWT1
JSCRSV16 EQU   JSCBSWT1
JSCRSV15 EQU   JSCBSWT1
JSCRSV14 EQU   JSCBSWT1
JSCRSV13 EQU   JSCBSWT1
JSCRSV12 EQU   JSCBSWT1
JSCRSV11 EQU   JSCBSWT1
JSCBPASS EQU   JSCBSWT1
JSCBTTTR EQU   JSCBSEC1+52
JSCRSV10 EQU   JSCBSEC1+49
JSCBAUTH EQU   JSCBOPTS
JSCSIOTS EQU   JSCBOPTS
JSCRSV08 EQU   JSCBOPTS
JSCRSV07 EQU   JSCBOPTS
JSCRSV06 EQU   JSCBOPTS
JSCBLONG EQU   JSCBOPTS
JSCRSV05 EQU   JSCBOPTS
JSCRSV04 EQU   JSCBOPTS
JSCBSECB EQU   JSCBSEC1+44
JSCRSV03 EQU   JSCBSEC1+41
JSCBSTEP EQU   JSCBSEC1+40
JSCBDCBA EQU   JSCBDCB+1
JSCRSV02 EQU   JSCBDCB
JSCBID   EQU   JSCBSEC1+32
JSCBDBTB EQU   JSCBSEC1+28
JSCBIJSC EQU   JSCBSEC1+24
JSCBTCBP EQU   JSCBSEC1+20
JSCBPCC  EQU   JSCBSEC1+16
JSCBTCP  EQU   JSCBSEC1+12
JSCBSHR  EQU   JSCBSEC1+8
JSCHPCEA EQU   JSCHPCE+1
JSCRSV32 EQU   JSCHPCE
JSCRSV01 EQU   JSCBSEC1
@NM00098 EQU   IEZJSCB
TIOTFEND EQU   POOLSTAR+16
TIOPSLOT EQU   POOLSTAR+13
TIOPSTTB EQU   POOLSTAR+12
TIOPPOOL EQU   POOLSTAR+4
TIOPNSRT EQU   POOLSTAR+3
@NM00097 EQU   POOLSTAR+2
TIOPNSLT EQU   POOLSTAR+1
@NM00096 EQU   POOLSTAR
TIOEFSRT EQU   TIOENTRY+17
TIOSVERF EQU   TIOESTTB
TIOSUNLD EQU   TIOESTTB
TIOSMNTD EQU   TIOESTTB
TIOSSETU EQU   TIOESTTB
TIOSVLSR EQU   TIOESTTB
TIOSPVIO EQU   TIOESTTB
TIOSREQD EQU   TIOESTTB
TIOSUSED EQU   TIOESTTB
TIOSBALS EQU   TIOESTTC
TIOSBALP EQU   TIOESTTC
TIOSVOLS EQU   TIOESTTC
TIOSVOLP EQU   TIOESTTC
TIOSAFFS EQU   TIOESTTC
TIOSAFFP EQU   TIOESTTC
TIOSDEFR EQU   TIOESTTC
TIOSDKCR EQU   TIOESTTC
TIOEJFCB EQU   TIOENTRY+12
TIOEDDNM EQU   TIOENTRY+4
TIOTREM  EQU   TIOELINK
TIOESSDS EQU   TIOESYOT
TIOESYIN EQU   TIOELINK
TIOEQNAM EQU   TIOELINK
TIOEDYNM EQU   TIOELINK
TIOTTERM EQU   TIOELINK
TIOTRV01 EQU   TIOELINK
TIOSYOUT EQU   TIOELINK
TIOSDSP2 EQU   TIOESTTA
TIOSDSP1 EQU   TIOESTTA
TIOSLABL EQU   TIOESTTA
TIOSDADS EQU   TIOESTTA
TIOSJBLB EQU   TIOESTTA
TIOSPLTS EQU   TIOESTTA
TIOSPLTP EQU   TIOESTTA
TIOSLTYP EQU   TIOESTTA
TIOELNGH EQU   TIOENTRY
TIOCSTEP EQU   TIOT1+8
TIOCNJOB EQU   TIOT1
SURV104  EQU   SUBITS+13
SURV103  EQU   SUBYTE13
SURV102  EQU   SUBYTE13
SURV101  EQU   SUBYTE13
SU100BT  EQU   SUBYTE13
SU99BIT  EQU   SUBYTE13
SU98BIT  EQU   SUBYTE13
SU97BIT  EQU   SUBYTE13
SU96BIT  EQU   SUBYTE13
SU95BIT  EQU   SUBYTE12
SU94BIT  EQU   SUBYTE12
SU93BIT  EQU   SUBYTE12
SU92BIT  EQU   SUBYTE12
SU91BIT  EQU   SUBYTE12
SU90BIT  EQU   SUBYTE12
SU89BIT  EQU   SUBYTE12
SU88BIT  EQU   SUBYTE12
SU87BIT  EQU   SUBYTE11
SU86BIT  EQU   SUBYTE11
SU85BIT  EQU   SUBYTE11
SU84BIT  EQU   SUBYTE11
SU83BIT  EQU   SUBYTE11
SU82BIT  EQU   SUBYTE11
SU81BIT  EQU   SUBYTE11
SU80BIT  EQU   SUBYTE11
SU79BIT  EQU   SUBYTE10
SU78BIT  EQU   SUBYTE10
SU77BIT  EQU   SUBYTE10
SU76BIT  EQU   SUBYTE10
SU75BIT  EQU   SUBYTE10
SU74BIT  EQU   SUBYTE10
SU73BIT  EQU   SUBYTE10
SU72BIT  EQU   SUBYTE10
SU71BIT  EQU   SUBYTE9
SU70BIT  EQU   SUBYTE9
SU69BIT  EQU   SUBYTE9
SU68BIT  EQU   SUBYTE9
SU67BIT  EQU   SUBYTE9
SU66BIT  EQU   SUBYTE9
SU65BIT  EQU   SUBYTE9
SU64BIT  EQU   SUBYTE9
SU63BIT  EQU   SUBYTE8
SU62BIT  EQU   SUBYTE8
SU61BIT  EQU   SUBYTE8
SU60BIT  EQU   SUBYTE8
SU59BIT  EQU   SUBYTE8
SU58BIT  EQU   SUBYTE8
SU57BIT  EQU   SUBYTE8
SU56BIT  EQU   SUBYTE8
SU55BIT  EQU   SUBYTE7
SU54BIT  EQU   SUBYTE7
SU53BIT  EQU   SUBYTE7
SU52BIT  EQU   SUBYTE7
SU51BIT  EQU   SUBYTE7
SU50BIT  EQU   SUBYTE7
SU49BIT  EQU   SUBYTE7
SU48BIT  EQU   SUBYTE7
SU47BIT  EQU   SUBYTE6
SU46BIT  EQU   SUBYTE6
SU45BIT  EQU   SUBYTE6
SU44BIT  EQU   SUBYTE6
SU43BIT  EQU   SUBYTE6
SU42BIT  EQU   SUBYTE6
SU41BIT  EQU   SUBYTE6
SU40BIT  EQU   SUBYTE6
SU39BIT  EQU   SUBYTE5
SU38BIT  EQU   SUBYTE5
SU37BIT  EQU   SUBYTE5
SU36BIT  EQU   SUBYTE5
SU35BIT  EQU   SUBYTE5
SU34BIT  EQU   SUBYTE5
SU33BIT  EQU   SUBYTE5
SU32BIT  EQU   SUBYTE5
SU31BIT  EQU   SUBYTE4
SU30BIT  EQU   SUBYTE4
SU28BIT  EQU   SUBYTE4
SU27BIT  EQU   SUBYTE4
SU26BIT  EQU   SUBYTE4
SU25BIT  EQU   SUBYTE4
SU24BIT  EQU   SUBYTE4
SU23BIT  EQU   SUBYTE3
SU22BIT  EQU   SUBYTE3
SU21BIT  EQU   SUBYTE3
SU20BIT  EQU   SUBYTE3
SU19BIT  EQU   SUBYTE3
SU17BIT  EQU   SUBYTE3
SU16BIT  EQU   SUBYTE3
SU15BIT  EQU   SUBYTE2
SU14BIT  EQU   SUBYTE2
SU13BIT  EQU   SUBYTE2
SU12BIT  EQU   SUBYTE2
SU11BIT  EQU   SUBYTE2
SU10BIT  EQU   SUBYTE2
SU9BIT   EQU   SUBYTE2
SU8BIT   EQU   SUBYTE2
SU7BIT   EQU   SUBYTE1
SU6BIT   EQU   SUBYTE1
SU5BIT   EQU   SUBYTE1
SU4BIT   EQU   SUBYTE1
SU3BIT   EQU   SUBYTE1
SU2BIT   EQU   SUBYTE1
SU1BIT   EQU   SUBYTE1
SU0BIT   EQU   SUBYTE1
DSABLLEN EQU   DSABGIDL
DSABANAM EQU   DSABANMI+1
DSABANML EQU   DSABANMI
DSABRS04 EQU   DSAB+68
DSABSIOT EQU   DSAB+64
DSABRS03 EQU   DSAB+62
DSABDCBM EQU   DSAB+56
DSABSSCM EQU   DSAB+52
DSABSSNM EQU   DSAB+48
DSABPTTR EQU   DSAB+44
DSABTCBP EQU   DSAB+40
DSABRS02 EQU   DSAB+38
@NM00095 EQU   DSABFLG4
DSABCKSI EQU   DSABFLG4
DSABCKVL EQU   DSABFLG4
DSABCKDS EQU   DSABFLG4
@NM00094 EQU   DSABFLG3
DSABJSCT EQU   DSABFLG3
DSABCATL EQU   DSABFLG3
DSABVMSC EQU   DSABFLG3
DSABVAM  EQU   DSABFLG3
DSABPASS EQU   DSABFLG3
DSABDEFR EQU   DSABFLG3
@NM00093 EQU   DSABFLG2
DSABUNAL EQU   DSABFLG2
DSABIRM  EQU   DSABFLG2
DSABOPEN EQU   DSABFLG2
DSABNUSE EQU   DSABFLG1
DSABCATM EQU   DSABFLG1
DSABPCAT EQU   DSABFLG1
DSABDCAT EQU   DSABFLG1
DSABCONV EQU   DSABFLG1
DSABDCNV EQU   DSABFLG1
DSABPALC EQU   DSABFLG1
DSABDALC EQU   DSABFLG1
@NM00092 EQU   DSABORG2
DSABTR   EQU   DSABORG2
DSABAM   EQU   DSABORG2
@NM00091 EQU   DSABORG2
DSABTQ   EQU   DSABORG2
DSABTX   EQU   DSABORG2
DSABGS   EQU   DSABORG2
DSABU    EQU   DSABORG1
DSABPO   EQU   DSABORG1
DSABMQ   EQU   DSABORG1
DSABCQ   EQU   DSABORG1
DSABCX   EQU   DSABORG1
DSABDA   EQU   DSABORG1
DSABPS   EQU   DSABORG1
DSABIS   EQU   DSABORG1
DSABSSVA EQU   DSAB+21
DSABRS01 EQU   DSAB+20
DSABOPCT EQU   DSAB+14
DSABLNTH EQU   DSAB+12
DSABBCHN EQU   DSAB+8
DSABID   EQU   DSAB
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBRSV50 EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBMDRBA EQU   UCBMDRBF+1
UCBRV075 EQU   UCBMDRBF
UCBRV074 EQU   UCB3800X+32
UCBIMAGE EQU   UCB3800X+28
UCBFCBNM EQU   UCB3800X+24
UCBCHAR4 EQU   UCB3800X+20
UCBCHAR3 EQU   UCB3800X+16
UCBCHAR2 EQU   UCB3800X+12
UCBCHAR1 EQU   UCB3800X+8
UCBCGMID EQU   UCB3800X+4
UCBBRSTA EQU   UCBACTIV
UCBRV063 EQU   UCBACTIV
UCBRV062 EQU   UCBACTIV
UCBRV061 EQU   UCBACTIV
UCBRV060 EQU   UCBACTIV
UCBRV059 EQU   UCBACTIV
UCBRV058 EQU   UCBACTIV
UCBRV057 EQU   UCBACTIV
UCBRV050 EQU   UCB3800X+2
UCBCGMNO EQU   UCB3800X+1
UCBRV083 EQU   UCBOPTNS
UCBBRSTR EQU   UCBOPTNS
UCBRV056 EQU   UCBOPTNS
UCBRV055 EQU   UCBOPTNS
UCBRV054 EQU   UCBOPTNS
UCBRV053 EQU   UCBOPTNS
UCBRV052 EQU   UCBOPTNS
UCBRV051 EQU   UCBOPTNS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBMIHTI EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBERLOG EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBINHIO EQU   UCBFLP1
UCBNSWAP EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00090
UCBHALI  EQU   @NM00090
UCBRSV09 EQU   @NM00090
UCBRSV08 EQU   @NM00090
UCBRSV07 EQU   @NM00090
UCBRSV06 EQU   @NM00090
UCBRSV05 EQU   @NM00090
UCBRSV04 EQU   @NM00090
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBNAME  EQU   UCBOB+13
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBSIGP  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBRV011 EQU   UCBJBNR
UCBMMSGP EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBDUC   EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00087 EQU   UCB
JFCRSV05 EQU   JFCEROPT
JFCRSV04 EQU   JFCEROPT
JFCRSV03 EQU   JFCEROPT
JFCRSV02 EQU   JFCEROPT
JFCTOPT  EQU   JFCEROPT
JFCABN   EQU   JFCEROPT
JFCSKP   EQU   JFCEROPT
JFCACC   EQU   JFCEROPT
JFCBUFL  EQU   JFCAMPTR+2
JFCFWORD EQU   JFCBFTEK
JFCDWORD EQU   JFCBFTEK
JFCHIER1 EQU   JFCBFTEK
JFCDYN   EQU   JFCBFTEK
JFCEXC   EQU   JFCBFTEK
JFCBBFTR EQU   JFCBBFTA
JFCSIM   EQU   JFCBBFTA
JFCHIER  EQU   JFCBFTEK
JFCBFOUT EQU   JFCBUFNO
JFCBUFIN EQU   JFCBUFNO
JFCTEMP  EQU   JFCBIND2
JFCREQ   EQU   JFCBIND2
JFCENT   EQU   JFCBIND2
JFCSHARE EQU   JFCBIND2
JFCSECUR EQU   JFCBIND2
JFCDISP  EQU   JFCBIND2
JFCPDS   EQU   JFCBIND1
JFCGDG   EQU   JFCBIND1
JFCADDED EQU   JFCBIND1
JFCLOC   EQU   JFCBIND1
JFCRLSE  EQU   JFCBIND1
JFCBXPDT EQU   INFMJFCB+83
JFCBCRDT EQU   INFMJFCB+80
JFCBOPS2 EQU   JFCBMASK+7
JFCRCTLG EQU   JFCBFLG2
JFCBBUFF EQU   JFCBFLG2
JFCTRACE EQU   JFCBFLG2
JFCSDRPS EQU   JFCBFLG2
JFCMODNW EQU   JFCBFLG2
JFCNRPS  EQU   JFCDEFER
JFCOUTOP EQU   JFCBFLG2
JFCINOP  EQU   JFCBFLG2
JFCBPWBP EQU   JFCOPEN
@NM00083 EQU   JFCOPEN
JFCDUAL  EQU   JFCBFLG1
JFCSLDES EQU   JFCBFLG1
JFCSLCRE EQU   JFCBFLG1
JFCSTAND EQU   JFCBFLG1
JFCBOPS1 EQU   JFCBMASK
JFCBVLSQ EQU   INFMJFCB+70
JFCRSV31 EQU   JFCFUNC
JFCFNCBT EQU   JFCFUNC
JFCFNCBX EQU   JFCFUNC
JFCFNCBD EQU   JFCFUNC
JFCFNCBW EQU   JFCFUNC
JFCFNCBP EQU   JFCFUNC
JFCFNCBR EQU   JFCFUNC
JFCFNCBI EQU   JFCFUNC
JFCBFOFL EQU   JFCBUFOF
JFCNL    EQU   JFCBLTYP
JFCSL    EQU   JFCBLTYP
JFCNSL   EQU   JFCBLTYP
JFCSUL   EQU   JFCBLTYP
JFCBLP   EQU   JFCBLTYP
JFCBLTM  EQU   JFCBLTYP
JFCBAL   EQU   JFCBLTYP
JFCRSV38 EQU   JFCBLTYP
JFCVINDX EQU   INFMJFCB+64
JFCNLREC EQU   INFMJFCB+62
JFCBADBF EQU   INFMJFCB+60
JFCAMSTR EQU   JFCBFRID+2
JFCAMCRO EQU   JFCBFRID
JFCBDSCB EQU   INFMJFCB+53
JFCPAT   EQU   JFCBTSDM
JFCNDCB  EQU   JFCBTSDM
JFCNDSCB EQU   JFCBTSDM
JFCNWRIT EQU   JFCBTSDM
JFCTTR   EQU   JFCBTSDM
JFCSDS   EQU   JFCBTSDM
JFCVSL   EQU   JFCBTSDM
JFCCAT   EQU   JFCBTSDM
JFCIPLTX EQU   JFCBELNM
JFCBQNAM EQU   JFCBDSNM
@NM00082 EQU   CSD+160
CSDMASK  EQU   CSD+128
CSDGDTOD EQU   CSD+116
CSDGDINT EQU   CSD+112
CSDGDCC  EQU   CSD+108
CSDDDRCT EQU   CSD+106
CSDRV044 EQU   CSD+104
CSDMAFF  EQU   CSD+24
CSDRV038 EQU   CSDFLAGS
CSDRV037 EQU   CSDFLAGS
CSDRV036 EQU   CSDFLAGS
CSDRV035 EQU   CSDFLAGS
CSDRV034 EQU   CSDFLAGS
CSDRV033 EQU   CSDFLAGS
CSDRV032 EQU   CSDFLAGS
CSDMP    EQU   CSDFLAGS
CSDACR   EQU   CSD+22
CSDMF1CP EQU   CSD+20
CSDRV043 EQU   CSD+16
CSDRV030 EQU   CSDSCFL4
CSDRV029 EQU   CSDSCFL4
CSDRV028 EQU   CSDSCFL4
CSDRV027 EQU   CSDSCFL4
CSDRV026 EQU   CSDSCFL4
CSDRV025 EQU   CSDSCFL4
CSDRV024 EQU   CSDSCFL4
CSDRV023 EQU   CSDSCFL4
CSDRV022 EQU   CSDSCFL3
CSDRV021 EQU   CSDSCFL3
CSDRV020 EQU   CSDSCFL3
CSDRV019 EQU   CSDSCFL3
CSDRV018 EQU   CSDSCFL3
CSDRV017 EQU   CSDSCFL3
CSDRV016 EQU   CSDSCFL3
CSDRV015 EQU   CSDSCFL3
CSDRV014 EQU   CSDSCFL2
CSDRV013 EQU   CSDSCFL2
CSDRV012 EQU   CSDSCFL2
CSDRV011 EQU   CSDSCFL2
CSDRV010 EQU   CSDSCFL2
CSDRV009 EQU   CSDSCFL2
CSDRV008 EQU   CSDSCFL2
CSDRV007 EQU   CSDSCFL2
CSDRV006 EQU   CSDSCFL1
CSDRV005 EQU   CSDSCFL1
CSDRV004 EQU   CSDSCFL1
CSDRV003 EQU   CSDSCFL1
CSDRV002 EQU   CSDSCFL1
CSDRV001 EQU   CSDSCFL1
CSDSYSND EQU   CSDSCFL1
CSDRV042 EQU   CSDSCFL1
CSDCPUOL EQU   CSD+10
CSDSAFF  EQU   CSDCPUAL
CSDCHAD  EQU   CSD+6
CSDCPUJS EQU   CSD+4
CSDCSD   EQU   CSD
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00081 EQU   CVTFIX+248
@NM00080 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
TRMSTHDR EQU   TRMRB+12
@NM00079 EQU   TRMRB+6
@NM00078 EQU   TRMFLAGS
TRMSCHAB EQU   TRMFLAGS
QDBRV002 EQU   QDB+28
QDBPRDS  EQU   QDB+26
QDBPRSZ  EQU   QDB+24
QDBBPTDS EQU   QDB+22
QDBFPTDS EQU   QDB+20
QDBLELMP EQU   QDB+16
QDBNELMS EQU   QDB+8
QDBRV001 EQU   QDB+6
QDBATTR  EQU   QDB+4
QDBQDB   EQU   QDB
PRMNELM  EQU   PRMESTAE+288
PRMDSQF  EQU   PRMESTAE+284
PRMDSQL  EQU   PRMESTAE+280
PRMQDBP  EQU   PRMESTAE+276
PRMQMBP  EQU   PRMESTAE+272
PRMQMBLN EQU   PRMESTAE+268
PRMQMGP  EQU   PRMESTAE+264
PRMUCBP  EQU   PRMESTAE+260
PRMSIOTP EQU   PRMESTAE+256
PRMASID  EQU   PRMESTAE+254
@NM00053 EQU   PRMFUNC
VMVCALL  EQU   PRMFUNC
FREECORE EQU   PRMFUNC
DUMPOK   EQU   PRMFUNC
TIOTBLT  EQU   PRMFUNC
DSABCHN  EQU   PRMFUNC
UPDSABCK EQU   PRMFUNC
GENCLNUP EQU   PRMFUNC
@NM00052 EQU   PRMRESC
TPQ      EQU   PRMRESC
CHNGQ    EQU   PRMRESC
DDRQ     EQU   PRMRESC
ENQQ4    EQU   PRMRESC
@NM00051 EQU   PRMESTAE
ALCASDSN EQU   ASNMSW
ALCSUBWT EQU   WAITOKSW
ALCATRKM EQU   TRKMSW
ALCNOENQ EQU   NOTIOTNQ
ALCJOBNM EQU   MTRJOBSW
ALCHDMSG EQU   HDRMSGSW
ALCSSMSG EQU   SSEMSGSW
ALCGENER EQU   GENLOKSW
ALCCANCL EQU   CCLMNTSW
ALCOFFDV EQU   OFFDEVSW
ALCWTVOL EQU   VWAITSW
ALCWTUNT EQU   UWAITSW
ALCMSGLV EQU   WRTMSGSW
ALCMOUNT EQU   VOLMNTSW
ALCNUCBS EQU   ALCWA+148
WORK3MP  EQU   ALCWA+136
WMASKPTR EQU   ALCWA+128
LGENLOCK EQU   ALCWA+124
@NM00050 EQU   @NM00049
NEEDRCVY EQU   @NM00049
ALCWAREC EQU   @NM00049
WAITIGEN EQU   @NM00049
INDWAIT  EQU   INDICATE
RIMTABCT EQU   ALCWA+104
RIMTABLN EQU   ALCWA+100
RIMTABP  EQU   ALCWA+96
@NM00048 EQU   ALCWA+78
LTUNITID EQU   ALCWA+76
TOTVOLUN EQU   CNTABLE+44
NUMREQS  EQU   CNTABLE+40
TOTREQS  EQU   CNTABLE+36
OTHEREQS EQU   CNTABLE+32
SUBSREQS EQU   CNTABLE+28
STRGREQS EQU   CNTABLE+24
PUBLREQS EQU   CNTABLE+20
PVTNREQS EQU   CNTABLE+16
SPECREQS EQU   CNTABLE+12
TPREQS   EQU   CNTABLE+8
VAMREQS  EQU   CNTABLE+4
DMYREQS  EQU   CNTABLE
EDTABPTR EQU   ALCWA+24
@NM00047 EQU   VMVUSER
VMVPROCD EQU   VMVUSER
VMVVUNTP EQU   VMVRQBLK+44
@NM00046 EQU   VMVMINFO+1
@NM00045 EQU   VMVACTON
VMVRTAIN EQU   VMVACTON
VMVDSMT  EQU   VMVACTON
VMVKEEP  EQU   VMVACTON
VMVRETCD EQU   VMVRQBLK+36
VMVJSNMP EQU   VMVRQBLK+32
VMVDSNMP EQU   VMVRQBLK+28
VMVJBNMP EQU   VMVRQBLK+24
VMVMVLSR EQU   VMVRQBLK+18
VMVUVLSR EQU   VMVRQBLK+12
VMVUCBP  EQU   VMVRQBLK+9
@NM00044 EQU   VMVRQBLK+8
VMVOPTB4 EQU   VMVFNMAP+3
@NM00043 EQU   VMVOPTB3
VMVNUMSG EQU   VMVOPTB3
VMVCUVOL EQU   VMVOPTB3
VMVDUPVL EQU   VMVOPTB3
VMVNSPVT EQU   VMVOPTB2
VMVNSLTP EQU   VMVOPTB2
VMVSLTAP EQU   VMVOPTB2
VMVNLTAP EQU   VMVOPTB2
VMVALTAP EQU   VMVOPTB2
VMVSTRG  EQU   VMVOPTB2
VMVPUBLC EQU   VMVOPTB2
VMVPRIVT EQU   VMVOPTB2
VMVVDEND EQU   VMVOPTB1
VMVVRLBL EQU   VMVOPTB1
VMVDWTOR EQU   VMVOPTB1
VMVMTMSG EQU   VMVOPTB1
VMVMOUNT EQU   VMVOPTB1
VMVREWND EQU   VMVOPTB1
VMVUCB   EQU   VMVOPTB1
VMVUNLOD EQU   VMVOPTB1
@NM00042 EQU   VUGRLENT+5
@NM00041 EQU   VUGRLFLG
VUGRLIDS EQU   VUGRLENT
VOLALGTP EQU   VOLUNTAB+12
VOLUNTID EQU   VOLUNTAB+10
VURCVYPR EQU   VOLSTATD
VUVLUNIQ EQU   VOLSTATD
VUDMUNIQ EQU   VOLSTATD
VUDMNDAL EQU   VOLSTATD
VUDMNDOF EQU   VOLSTATD
VUREALOC EQU   VOLSTATD
VUMUGDON EQU   VOLSTATD
@NM00040 EQU   VOLSTATC
@NM00039 EQU   VOLSTATC
VURECVRY EQU   VOLSTATC
VOLURREQ EQU   VOLSTATC
VOLGRREQ EQU   VOLSTATC
VOLDAREQ EQU   VOLSTATC
VOLCOREQ EQU   VOLSTATC
VOLTAREQ EQU   VOLSTATC
VUAFFWRK EQU   VOLSTATB
VUVINELG EQU   VOLSTATB
VUPROCED EQU   VOLSTATB
VOLMNTD  EQU   VOLSTATB
VOLALOC  EQU   VOLSTATB
VOLDEFER EQU   VOLSTATA
VUDADSM  EQU   VOLSTATA
VOLRESVE EQU   VOLSTATA
VOLNSHR  EQU   VOLSTATA
VOLSTG   EQU   VOLSTATA
VOLSPEC  EQU   VOLSTATA
VOLPRV   EQU   VOLSTATA
VOLPUB   EQU   VOLSTATA
VOLID    EQU   VOLUNTAB
SIODDSNL EQU   INDMSIOT+173
SIOVDSNL EQU   INDMSIOT+172
SIOVDSNT EQU   INDMSIOT+170
SIOTJFX  EQU   INDMSIOT+160
SIOTATE  EQU   INDMSIOT+144
SCTANAME EQU   INDMSIOT+122
SIOTSSIC EQU   INDMSIOT+120
@NM00038 EQU   INDMSIOT+108
SIOTSSNM EQU   INDMSIOT+104
@NM00037 EQU   SIOTBYT2
SIOTCVOL EQU   SIOTBYT2
SIOTCNEW EQU   SIOTBYT2
SIOTCALC EQU   SIOTBYT2
SIOTGALL EQU   SIOTBYT2
SIOTOPUC EQU   INDMSIOT+99
SIOTOUTR EQU   INDMSIOT+97
SIOTOUTC EQU   INDMSIOT+96
SIOTSSWA EQU   INDMSIOT+93
SIOTAUNC EQU   SIOTALTD
SIOTACAT EQU   SIOTALTD
SIOTADEL EQU   SIOTALTD
SIOTAKEP EQU   SIOTALTD
SIOTNPRV EQU   SIOTALTD
SIOJCATS EQU   SIOTALTD
@NM00036 EQU   SIOTALTD
@NM00035 EQU   SIOTALTD
@NM00034 EQU   INDMSIOT+91
SIOTNDSB EQU   INDMSIOT+88
@NM00033 EQU   INDMSIOT+84
SIOTDPCD EQU   INDMSIOT+82
@NM00032 EQU   SIOTBYT4
SIOTRACT EQU   SIOTBYT4
SIOTRACD EQU   SIOTBYT4
SIOTPROT EQU   SIOTBYT4
SCTOUTPN EQU   INDMSIOT+80
SCTOUTNO EQU   INDMSIOT+76
SCTOUTNM EQU   INDMSIOT+68
@NM00031 EQU   SIOUBYT3
SIO3COMM EQU   SIOUBYT3
SIOUBYT1 EQU   SIOTDEVT
SIOTOMN  EQU   SCTSBYT4
SIOTIPDI EQU   SCTSBYT4
SIOTVAFF EQU   SCTSBYT4
SIOTASCI EQU   SCTSBYT4
@NM00030 EQU   SCTSBYT4
SIOTGDGA EQU   SCTSBYT4
SCTSGDGS EQU   SCTSBYT4
SCTSOLD  EQU   SCTSBYT3
SCTSMOD  EQU   SCTSBYT3
SCTSYSOU EQU   SCTSBYT3
SCTVREF  EQU   SCTSBYT3
SCTALCHK EQU   SCTSBYT3
SCTSYSNE EQU   SCTSBYT3
SCTDSNRF EQU   SCTSBYT3
SCTRECVD EQU   SCTSBYT2
SCTDEFER EQU   SCTSBYT2
SCTLABEL EQU   SCTSBYT2
SCTUNLBD EQU   SCTSBYT2
SCTJOBLB EQU   SCTSBYT2
SCTVOLAF EQU   SCTSBYT2
SIOTCATL EQU   SCTSBYT2
SIOCLUNL EQU   SCTSBYT2
SIOTJSCT EQU   SCTSBYT1
SCTUNAFF EQU   SCTSBYT1
SCTPARLM EQU   SCTSBYT1
SIOTQDSN EQU   SCTSBYT1
SIOTGDSN EQU   SCTSBYT1
SCTSYSIN EQU   SCTSBYT1
SIOTUNCT EQU   SCTSDISP
SIOTCTLG EQU   SCTSDISP
SIOTDLET EQU   SCTSDISP
SIOTKEEP EQU   SCTSDISP
SIOTPRIV EQU   SCTSDISP
S3400DSP EQU   SCTSDISP
SIOTVLCT EQU   INDMSIOT+54
SCTNMBUT EQU   INDMSIOT+53
SIOTRTRY EQU   SIOTBYT0
SIOTPUPV EQU   SIOTBYT0
SIOTNOPV EQU   SIOTBYT0
SIOTFUDA EQU   SIOTBYT0
SIOTDYAL EQU   SIOTBYT0
SCTVOLCT EQU   INDMSIOT+49
SCTSPOOL EQU   INDMSIOT+48
SIOTQNAM EQU   SIOTTSTC
SIOTDSNM EQU   SIOTTSTC
SIOTTRKM EQU   SIOTTSTC
SIOTSSMG EQU   SIOTTSTC
SIOTSSGP EQU   SIOTTSTC
@NM00029 EQU   SIOTTSTC
SIOTTERM EQU   SIOTTSTC
SIOTINFC EQU   SIOTTSTC
@NM00028 EQU   SIOTBYT3
S3400OFF EQU   SIOTBYT3
SIOCDEVT EQU   SIOTBYT3
SIOALIAS EQU   SIOTBYT3
SIOTDDNT EQU   SIOTBYT1
SIOTDADR EQU   SIOTBYT1
SIODUNAL EQU   SIOTBYT1
SIOTHOLD EQU   SIOTBYT1
SIOTOCKP EQU   SIOTBYT1
SIOTREFN EQU   INDMSIOT+40
SIOTVRSB EQU   INDMSIOT+36
@NM00027 EQU   INDMSIOT+35
SCTPJFCB EQU   INDMSIOT+32
@NM00026 EQU   INDMSIOT+31
SCTPSIOT EQU   INDMSIOT+28
SIOTVLSP EQU   INDMSIOT+24
SIODSNTE EQU   INDMSIOT+22
SIOTDEST EQU   INDMSIOT+12
SIOTTYPE EQU   INDMSIOT+3
SIOTDSKA EQU   INDMSIOT
CMOSYOUT EQU   CMUNRB+13
CMOUNCAT EQU   CMODISP
CMOCATLG EQU   CMODISP
@NM00025 EQU   CMODISP
@NM00024 EQU   CMRBBYT4
@NM00023 EQU   CMRBBYT4
CMNODEN  EQU   CMRBBYT4
CMSSERR  EQU   CMRBBYT4
CMINTERR EQU   CMRBBYT4
CMSSIERR EQU   CMRBBYT4
CMCATERR EQU   CMRBBYT4
CMSCRERR EQU   CMRBBYT4
@NM00022 EQU   CMRBBYT3
CMSSKEEP EQU   CMRBBYT3
CMNOHOLD EQU   CMRBBYT3
CMOVSYOT EQU   CMRBBYT3
CMWAIT   EQU   CMRBBYT3
CMDYNUNA EQU   CMRBBYT3
CMHOLD   EQU   CMRBBYT3
CMDEL    EQU   CMRBBYT3
@NM00021 EQU   CMRBBYT2
@NM00020 EQU   CMRBBYT2
@NM00019 EQU   CMRBBYT2
CMSETPRV EQU   CMRBBYT2
CMCKAVOL EQU   CMRBBYT2
CMCHKUN  EQU   CMRBBYT2
@NM00018 EQU   CMRBBYT1
CMINVUCB EQU   CMRBBYT1
CMOUSRID EQU   CMRBBYT1
CMCNDISP EQU   CMRBBYT1
CMNMDISP EQU   CMRBBYT1
CMNODISP EQU   CMRBBYT1
@NM00017 EQU   CMFMBYT4
@NM00016 EQU   CMFMBYT4
@NM00015 EQU   CMFMBYT4
@NM00014 EQU   CMFMBYT4
@NM00013 EQU   CMFMBYT4
@NM00012 EQU   CMFMBYT4
CMALSTCT EQU   CMFMBYT4
CMLSTCJS EQU   CMFMBYT4
CMJES3   EQU   CMFMBYT3
CMDDQCUR EQU   CMFMBYT3
CMVDQCUR EQU   CMFMBYT3
CMSPSCR  EQU   CMFMBYT3
CMPUBPRV EQU   CMFMBYT3
CMDSRALL EQU   CMFMBYT3
CMGENDEQ EQU   CMFMBYT2
CMNOPOST EQU   CMFMBYT2
CMDSRLSE EQU   CMFMBYT1
CMDPCATS EQU   CMFMBYT1
CMMNSTAT EQU   CMFMBYT1
CMDMSGS  EQU   CMFMBYT1
@NM00011 EQU   @NM00010
AQMQBPTR EQU   AQMPARAM+24
AQMPFLG  EQU   AQMNORMP
AQMCANCP EQU   AQMPARAM+16
AQMLENGT EQU   AQMPARAM+12
AQMASID  EQU   AQMPARAM+8
AQMQCODE EQU   AQMPARAM+2
@NM00077 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00076 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00075 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00074 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00073 EQU   FLCFSA
@NM00072 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00071 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00070 EQU   FLCIOA
@NM00069 EQU   FLCMCLA+15
@NM00068 EQU   FLCMCLA+14
@NM00067 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00066 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00065 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00064 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00063 EQU   FLCPER
@NM00062 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00061 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00060 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00059 EQU   FLCPIILC
@NM00058 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00057 EQU   FLCSVILC
@NM00056 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00055 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00054 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00157 EQU   @RC00155
@RC00160 EQU   @RC00155
@RC00324 EQU   @RC00208
@RC00360 EQU   @RC00110
@RC00443 EQU   @RC00441
@RC00450 EQU   @RC00441
@RC00457 EQU   @RC00441
@RC00464 EQU   @RC00441
@RF00881 EQU   @RC00787
@RC00375 EQU   @RC00360
@ENDDATA EQU   *
         END   IEFAB490,(C'PLS2100',0701,77020)
