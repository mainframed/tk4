         TITLE 'IEFAB491 - WAIT HOLDING RESOURCES                      *
                        '
IEFAB491 CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'IEFAB491  78.124'                              01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @12,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@12                                      01S0001
         L     @00,@SIZDATD                                     01S0001
         MODESET EXTKEY=SCHED,SAVEKEY=(2)
         GSPACE   R,LV=(0)
         LR    @11,@01                                          01S0001
         USING @DATD,@11                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         STC   @02,@OLDKEY                                      01S0001
         MODESET KEYADDR=(2)
         LM    @00,@02,20(@13)                                  01S0001
         ST    @11,8(,@13)                                      01S0001
         LR    @13,@11                                          01S0001
         MODESET EXTKEY=SCHED
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
         MODESET EXTKEY=ZERO
         MVC   @PC00001(4),0(@01)                               01S0001
         MODESET EXTKEY=SCHED
*RTNCODE = SUCCESS;                    /*ASSUME NO ERRORS            */
         SLR   RTNCODE,RTNCODE                                  01S0072
*NUMGROUP = EIGHT * GMTENTLN;          /*CALC NUM OF DEV GROUPS      */
         L     @10,@PC00001                                     01S0073
         L     @10,ALCWAPTR(,@10)                               01S0073
         L     @02,EDTABPTR(,@10)                               01S0073
         L     @02,EDTMSKTP(,@02)                               01S0073
         L     NUMGROUP,GMTENTLN(,@02)                          01S0073
         SLA   NUMGROUP,3                                       01S0073
*ENQLIST(1:ENQLGN) = NOWAITNQ(1:ENQLGN); /*MOVE ENQ/DEQ LIST TO 01S0074
*                                        GOTTEN CORE                 */
         L     @07,ENQLGN                                       01S0074
         BCTR  @07,0                                            01S0074
         EX    @07,@SM01103                                     01S0074
*AQMQCODE = AACODE;                    /*SET ALLOC Q-MGR Q-CODE      */
         L     @10,QMGRRBP(,@10)                                01S0075
         MVC   AQMQCODE(2,@10),@CC00088                         01S0075
*DO MASKBYTE = ONE TO GMTENTLN;        /*'OR'  MASKS OF GROUPS HELD  */
         LA    MASKBYTE,1                                       01S0076
         B     @DE00076                                         01S0076
@DL00076 DS    0H                                               01S0077
*  WORKMASK(MASKBYTE) =WAITMASK(MASKBYTE)                       01S0077
*  × VERIFYMK(MASKBYTE) × KEEPMASK(MASKBYTE);                   01S0077
         LA    @10,WORKMASK-1(MASKBYTE)                         01S0077
         L     @07,@PC00001                                     01S0077
         L     @07,ALCWAPTR(,@07)                               01S0077
         L     @01,WMASK2P(,@07)                                01S0077
         L     @15,WORK3MP(,@07)                                01S0077
         ALR   @01,MASKBYTE                                     01S0077
         BCTR  @01,0                                            01S0077
         MVC   0(1,@10),WAITMASK(@01)                           01S0077
         ALR   @15,MASKBYTE                                     01S0077
         BCTR  @15,0                                            01S0077
         OC    0(1,@10),VERIFYMK(@15)                           01S0077
         L     @07,WMASKPTR(,@07)                               01S0077
         ALR   @07,MASKBYTE                                     01S0077
         BCTR  @07,0                                            01S0077
         OC    0(1,@10),KEEPMASK(@07)                           01S0077
*END;                                                           01S0078
         AH    MASKBYTE,@CH00050                                01S0078
@DE00076 L     @10,@PC00001                                     01S0078
         L     @10,ALCWAPTR(,@10)                               01S0078
         L     @10,EDTABPTR(,@10)                               01S0078
         L     @10,EDTMSKTP(,@10)                               01S0078
         C     MASKBYTE,GMTENTLN(,@10)                          01S0078
         BNH   @DL00076                                         01S0078
*DO WHILE (TOTREQS^=ZERO               /*WAIT UNTIL ALL SATISFIED .. */
*    & RTNCODE=SUCCESS & INDRETRY=OFF); /*..OR ERROR IS DETECTED     */
         B     @DE00079                                         01S0079
@DL00079 DS    0H                                               01S0080
*  AQMECODE = RLSEFUNC;                /*INDICATE GROUP-RLSE FUNCTION*/
         L     @10,@PC00001                                     01S0080
         L     @10,ALCWAPTR(,@10)                               01S0080
         L     @07,QMGRRBP(,@10)                                01S0080
         MVC   AQMECODE(2,@07),@CH00052                         01S0080
*  AQMMASKP = ADDR(WORKMASK);          /*POINT TO (WAIT + VERIFY) MSK*/
         LA    @02,WORKMASK                                     01S0081
         ST    @02,AQMMASKP(,@07)                               01S0081
*  CALL IEFAB4FA (QMGRRBP,EXITPRMP);   /*ALLOW DYNAMIC ALLOCS TO GO
*                                        BY HAVING THE Q-MGR RELEASE
*                                        THE GROUPS FROM THE NO-WAIT
*                                        ('BB') QUEUE                */
         LA    @07,QMGRRBP(,@10)                                01S0082
         ST    @07,@AL00001                                     01S0082
         LA    @10,EXITPRMP(,@10)                               01S0082
         ST    @10,@AL00001+4                                   01S0082
         L     @15,@CV00140                                     01S0082
         LA    @01,@AL00001                                     01S0082
         BALR  @14,@15                                          01S0082
*  GEN;                                /*ALLOW UNLOADS,ETC           */
    DEQ   (,SYSR,8),MF=(E,ENQLIST)
    DEQ   (,DDRDAMIN,5),RET=HAVE,MF=(E,ENQLIST)               @ZA32215
    DEQ   (,DDRTUMIN,7),RET=HAVE,MF=(E,ENQLIST)               @ZA32215
*  AQMECODE = WAITFUNC;                /*INDICATE WAIT-FOR-UNALLOC   */
         L     @10,@PC00001                                     01S0084
         L     @10,ALCWAPTR(,@10)                               01S0084
         L     @07,QMGRRBP(,@10)                                01S0084
         MVC   AQMECODE(2,@07),@CH00092                         01S0084
*  AQMMASKP = WMASK2P;                 /*POINT TO WAIT MASK          */
         MVC   AQMMASKP(4,@07),WMASK2P(@10)                     01S0085
*  CALL IEFAB4FA (QMGRRBP,EXITPRMP);   /*WAIT-FOR-DEVICE-UNALLOCATION*/
         LA    @07,QMGRRBP(,@10)                                01S0086
         ST    @07,@AL00001                                     01S0086
         LA    @10,EXITPRMP(,@10)                               01S0086
         ST    @10,@AL00001+4                                   01S0086
         L     @15,@CV00140                                     01S0086
         LA    @01,@AL00001                                     01S0086
         BALR  @14,@15                                          01S0086
*  RTNCODE = REG15;                    /*SAVE THE RETURN CODE        */
         LR    RTNCODE,REG15                                    01S0087
*  IF RTNCODE = SUCCESS THEN           /*DID OPERATOR CANCEL ?       */
         LTR   RTNCODE,RTNCODE                                  01S0088
         BNZ   @RF00088                                         01S0088
*    DO;                               /*NO, TRY TO ALLOCATE         */
*      AQMECODE = LOCKCODE;            /*INDICATE GROUP-LOCK FUNCTION*/
         L     @10,@PC00001                                     01S0090
         L     @10,ALCWAPTR(,@10)                               01S0090
         L     @07,QMGRRBP(,@10)                                01S0090
         MVC   AQMECODE(2,@07),@CH00107                         01S0090
*      AQMMASKP = ADDR(WORKMASK);      /*POINT TO WAIT + VERIFY MASK */
         LA    @02,WORKMASK                                     01S0091
         ST    @02,AQMMASKP(,@07)                               01S0091
*      CALL IEFAB4FA (QMGRRBP,EXITPRMP); /*STOP DYNAMIC ALLOCATIONS
*                                        BY HAVING THE Q-MGR OBTAIN
*                                        THE GROUPS FROM THE NO-WAIT
*                                        ('BB') QUEUE                */
         LA    @07,QMGRRBP(,@10)                                01S0092
         ST    @07,@AL00001                                     01S0092
         LA    @10,EXITPRMP(,@10)                               01S0092
         ST    @10,@AL00001+4                                   01S0092
         L     @15,@CV00140                                     01S0092
         LA    @01,@AL00001                                     01S0092
         BALR  @14,@15                                          01S0092
*      RTNCODE = REG15;                /*SAVE THE RETURN CODE        */
         LR    RTNCODE,REG15                                    01S0093
*      ENQLIST(1:ENQLGN)=NOWAITNQ(1:ENQLGN); /*REINITIALIZE ENQ 01S0094
*                                              PARM LIST     @ZA32215*/
         L     @10,ENQLGN                                       01S0094
         BCTR  @10,0                                            01S0094
         EX    @10,@SM01103                                     01S0094
*      GEN;                            /*SERIALIZE UNLOAD,ETC@ZA08766*/
        ENQ   (,SYSR,,8),MF=(E,ENQLIST)                       @ZA08766
*      IF DDRTPUR = ON THEN            /*ANY TAPE×UR REQUESTS@ZA32215*/
         L     @10,@PC00001                                     01S0096
         L     @10,ALCWAPTR(,@10)                               01S0096
         TM    DDRTPUR(@10),B'00000100'                         01S0096
         BNO   @RF00096                                         01S0096
*        DO;                           /*YES, ENQ DDR TAPE×UR@ZA32215*/
*          GEN ( ENQ  (,DDRTUMIN,,7),MF=(E,ENQLIST) ); /*    @ZA32215*/
          ENQ  (,DDRTUMIN,,7),MF=(E,ENQLIST)
*        END;                          /*END TAPE×UR TEST    @ZA32215*/
*      IF DDRDA = ON THEN              /*ANY DA REQUESTS     @ZA32215*/
@RF00096 L     @10,@PC00001                                     01S0100
         L     @10,ALCWAPTR(,@10)                               01S0100
         TM    DDRDA(@10),B'00000010'                           01S0100
         BNO   @RF00100                                         01S0100
*        DO;                           /*YES, ENQ DDR DA     @ZA32215*/
*          GEN ( ENQ  (,DDRDAMIN,,5),MF=(E,ENQLIST) ); /*    @ZA32215*/
          ENQ  (,DDRDAMIN,,5),MF=(E,ENQLIST)
*        END;                          /*END DA TEST         @ZA32215*/
*      IF RTNCODE = SUCCESS THEN       /*DID OPERATOR CANCEL ?       */
@RF00100 LTR   RTNCODE,RTNCODE                                  01S0104
         BNZ   @RF00104                                         01S0104
*        DO;                           /*NO, TRY TO ALLOCATE         */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - DMNDCOVR                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - PROCESS SPECIFIC UNITS WAITED FOR             */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THE FUNCTION OF THIS ROUTINE IS AS FOLLOWS:                  */
*/*       .UNLOAD ANY VOLUMES BEING WAITED FOR WHICH HAVE BEEN       */
*/*        UNALLOCATED.                                              */
*/*       .IF ALL VOLUMES NEEDED HAVE BEEN UNLOADED, CALL            */
*/*        IEFAB479 IF THERE ARE ANY DEMAND REQUESTS TO ALLOCATE     */
*/*        AND ALL THE DEMANDED UNITS HAVE BEEN UNALLOCATED.         */
*/*       .INDICATE, BY THE 'CONTINUE' SWITCH, WHETHER ALL NEEDED    */
*/*        VOLUMES AND DEMANDED UNITS WERE UNALLOCATED.              */
*/*                                                                  */
*/*   OPERATION -                                                    */
*/*       SEGMENT 'UNLDVOL' IS INVOKED TO ACTUALLY INTERFACE         */
*/*       WITH THE VOLUME MOUNT + VERIFY (VM+V) ROUTINE TO UNLOAD    */
*/*       VOLUMES.                                                   */
*/*                                                                  */
*/*       ONLY REQS WHICH IEFAB479 IS TO PROCESS ARE MARKED          */
*/*       SIOTGIGN=0 BECAUSE IEFAB479 KEYS OFF THIS INDICATOR.       */
*/*                                                                  */
*/*       (THE REST OF THE OPERATION IS DOCUMENTED BY THE CODE)      */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*      ALCWAPTR - PTR TO ALLOCATION WORK AREA                      */
*/*        VOLUNPTR - PTR TO VOLUNIT TABLE                           */
*/*          VOLALGTP - PTR TO ALGORITHM REQUEST LIST ENTRY          */
*/*            CVRWUCBP - PTR TO UCB WITH VOLUME NEEDED ELSEWHERE    */
*/*              UCBALOC - IF 1, UCB IS ALLOCATED                    */
*/*        VOLUNSZE  - SIZE OF VOLUNIT TABLE                         */
*/*        SIOT1P - PTR TO FIRST SIOT IN CHAIN                       */
*/*          SIOTDMND - IF 1, INDICATES A DEMAND REQUEST             */
*/*          SIOTEDLP - PTR TO EDL (FOR DEMAND REQ THERE IS ONLY     */
*/*                     1 GENERIC,GROUP, AND UCB IN THE EDL)         */
*/*          SIOTNPTR - PTR TO THE NEXT SIOT IN THE CHAIN            */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITION - ALL VOLUMES NEEDED AND ALL DEMANDED UNITS WERE     */
*/*               UNALLOCATED (SO ALL DEMAND REQS ARE SATISFIED)     */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*     TOTREQS DECREMENTED                                          */
*/*     CVRWUCBP = 0 FOR ALL REQUESTS                                */
*/*     CONTINUE = 1                                                 */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE = 0                                     */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITION - ALL VOLUMES NEEDED AND/OR ALL DEMANDED UNITS NOT   */
*/*               UNALLOCATED                                        */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*     CONTINUE = 0                                                 */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE = 0                                     */
*/*                                                                  */
*/* EXIT - ERROR  - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITION - VOLUME NEEDED WAS FOUND MOUNTED ON AN INELIGIBLE,  */
*/*               UNLOCKED DEVICE GROUP. (THIS CONDITION MAY BE      */
*/*               DISCOVERED BY MODULE IEFAB479).                    */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*     INDRETRY = 1                                                 */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE = 0                                     */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE)                               */
*/*                                                                  */
*/*   CONDITION - ERROR DETECTED BY ONE OF THE CALLED ROUTINES       */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*      .IF VM+V ERROR, REASONCD = 2                                */
*/*      .IF IEFAB479 DETECTED AN ERROR, IT WOULD HAVE SET A STEP-   */
*/*       OR DD-RELATED REASON CODE.                                 */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE = NON-ZERO                              */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE)                       @YM08617*/
*/*                                                                  */
*/*   CONDITION - VOLUME NEEDED WAS FOUND MOUNTED ON A       @YM08617*/
*/*               RESERVED UNIT                              @YM08617*/
*/*                                                                  */
*/*   OUTPUT -                                               @YM08617*/
*/*     SIOTRSNC = 58                                        @YM08617*/
*/*                                                                  */
*/*   RETURN CODES - RTNCODE = NON-ZERO                      @YM08617*/
*/*                                                                  */
*/********************************************************************/
*CONTINUE = ON;                        /*ASSUME EVERYTHING UNALLOC'D */
         OI    CONTINUE,B'10000000'                             02S0106
*VUPTR = VOLUNPTR;                     /*POINT TO FIRST VOLUNIT ENTRY*/
         L     @10,@PC00001                                     02S0107
         L     @10,ALCWAPTR(,@10)                               02S0107
         L     VUPTR,VOLUNPTR(,@10)                             02S0107
*DO VUCTR = ONE TO VOLUNSZE/LENGTH(VOLUNTAB) /*SCAN VOLUNIT TABLE    */
*    WHILE RTNCODE = SUCCESS;                                   02S0108
         LA    VUCTR,1                                          02S0108
         B     @DE00108                                         02S0108
@DL00108 SLR   @10,@10                                          02S0108
         CR    RTNCODE,@10                                      02S0108
         BNE   @DC00108                                         02S0108
*    IF VOLALGTP ^= ZERO &                                      02S0109
*      VOLALGTP->CVRWUCBP^=ZERO THEN   /*WAS THE VOLUME NEEDED  02S0109
*                                        ALLOCATED ELSEWHERE?        */
         L     @07,VOLALGTP(,VUPTR)                             02S0109
         CR    @07,@10                                          02S0109
         BE    @RF00109                                         02S0109
         MVC   @ZT00002+2(2),CVRWUCBP(@07)                      02S0109
         L     @10,@ZT00002                                     02S0109
         LTR   @10,@10                                          02S0109
         BZ    @RF00109                                         02S0109
*    DO;                               /*YES,UNLOAD IF VOL UNALLOC'D */
*      UCBPTR = VOLALGTP->CVRWUCBP;    /*GET ADDR OF UCB WITH VOLUME */
         LR    UCBPTR,@10                                       02S0111
*      IF VOLID = UCBVOLI THEN         /*IS THE VOL STILL THERE ?    */
         CLC   VOLID(6,VUPTR),UCBVOLI(UCBPTR)                   02S0112
         BNE   @RF00112                                         02S0112
*        DO;                           /*YES, UNLOAD IT              */
*          IF UCBRESV = OFF THEN       /*DEVICE NOT RESERVED @YM08617*/
         TM    UCBRESV(UCBPTR),B'00100000'                      02S0114
         BNZ   @RF00114                                         02S0114
*            DO;                       /*MAYBE UNLOAD IT     @YM08617*/
*              IF UCBALOC = OFF THEN   /*IS THE UNIT UNALLOCATED ?   */
         TM    UCBALOC(UCBPTR),B'00001000'                      02S0116
         BNZ   @RF00116                                         02S0116
*                DO;                   /*YES,CALL VM+V TO UNLOAD VOL */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - UNLDVOL                                           */
*/*                                                                  */
*/* DESCRIPTIVE NAME - UNLOAD A VOLUME NEEDED ELSEWHERE              */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THIS ROUTINE SETS UP THE INTERFACE FOR AND INVOKES THE         */
*/*   VOLUME MOUNT + VERIFY (VM+V) UNLOAD FUNCTION TO UNLOAD A       */
*/*   VOLUME.                                                        */
*/*                                                                  */
*/*   OPERATION - (THE OPERATION IS DOCUMENTED BY THE CODE ITSELF)   */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*      UCBPTR - PTR TO UNIT TO UNLOAD                              */
*/*      ALCWAPTR - PTR TO THE ALLOCATION WORK AREA                  */
*/*        ALCJOBN - JOB NAME                                        */
*/*        ALCSTEPN - STEP NAME                                      */
*/*        ALSWASID - ASID                                           */
*/*        CANCELP - PTR TO CANCEL ECB                               */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITION - VOLUME UNLOADED                                    */
*/*                                                                  */
*/*   OUTPUT - (NONE)                                                */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE = 0                                     */
*/*                                                                  */
*/* EXIT - EXIT - (INLINE SUBROUTINE)                                */
*/*                                                                  */
*/*   CONDITION - GETMAIN ERROR BY VM+V                              */
*/*                                                                  */
*/*   OUTPUT - STEP REASON CODE, REASONCD, SET TO 2                  */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE = 4                                     */
*/*                                                                  */
*/********************************************************************/
*VMVREQBP = ADDR(VMVRBCOR);            /*POINT TO VM+V REQUEST BLOCK */
         LA    @10,VMVRBCOR                                     03S0118
         ST    @10,VMVREQBP                                     03S0118
*VMVRQBLK = VMVRQBLK && VMVRQBLK;      /*ZERO THE REQUEST BLOCK      */
         XC    VMVRQBLK(52,@10),VMVRQBLK(@10)                   03S0119
*VMVUNLOD = ON;                        /*INDICATE UNLOAD FUNCTION    */
*VMVUCB = ON;                          /*UNLOAD VOLSER IS IN THE UCB */
         OI    VMVUNLOD(@10),B'11000000'                        03S0121
*VMVJBNMP = ADDR(ALCJOBN);             /*POINT TO JOB NAME           */
         L     @07,@PC00001                                     03S0122
         L     @07,ALCWAPTR(,@07)                               03S0122
         L     @15,TIOTHDRP(,@07)                               03S0122
         ST    @15,VMVJBNMP(,@10)                               03S0122
*VMVJSNMP = ADDR(ALCSTEPN);            /*POINT TO STEP NAME          */
         LA    @15,ALCSTEPN(,@15)                               03S0123
         ST    @15,VMVJSNMP(,@10)                               03S0123
*VMVUCBP = UCBPTR;                     /*POINT TO UCB TO BE UNLOADED */
         ST    UCBPTR,@TF00001                                  03S0124
         MVC   VMVUCBP(3,@10),@TF00001+1                        03S0124
*CALL IEFAB49C (VMVREQBP,ALCWASID,CANCLECB); /*CALL VM+V             */
         LA    @10,VMVREQBP                                     03S0125
         ST    @10,@AL00001                                     03S0125
         LA    @10,ALCWASID(,@07)                               03S0125
         ST    @10,@AL00001+4                                   03S0125
         L     @10,CANCELP(,@07)                                03S0125
         ST    @10,@AL00001+8                                   03S0125
         L     @15,@CV00139                                     03S0125
         LA    @01,@AL00001                                     03S0125
         BALR  @14,@15                                          03S0125
*RTNCODE = REG15;                      /*SAVE THE RETURN CODE        */
         LR    RTNCODE,REG15                                    03S0126
*IF RTNCODE ^= SUCCESS THEN            /*ANY ERRORS ?                */
         LTR   RTNCODE,RTNCODE                                  03S0127
         BZ    @RF00127                                         03S0127
*  REASONCD = GETMNERR;                /*YES,INDICATE A GETMAIN ERROR*/
         L     @10,@PC00001                                     03S0128
         L     @10,ALCWAPTR(,@10)                               03S0128
         L     @10,FAILRSCP(,@10)                               03S0128
         MVC   REASONCD(2,@10),@CH00083                         03S0128
*ELSE;                                 /*NO ERROR                    */
@RF00127 DS    0H                                               03S0130
*                  VOLALGTP->CVRWUCBP=ZERO;/*ZERO PTR TO UCB WITH VOL*/
         L     @10,VOLALGTP(,VUPTR)                             02S0130
         SLR   @07,@07                                          02S0130
         STH   @07,CVRWUCBP(,@10)                               02S0130
*                END;                                           02S0131
*              ELSE                    /*UNIT IS ALLOCATED - INDICATE*/
*                CONTINUE = OFF;                                02S0132
         B     @RC00116                                         02S0132
@RF00116 NI    CONTINUE,B'01111111'                             02S0132
*            END;                                               02S0133
*          ELSE                        /*DEVICE IS RESERVED  @YM08617*/
*            DO;                       /*FAIL REQUEST        @YM08617*/
         B     @RC00114                                         02S0134
@RF00114 DS    0H                                               02S0135
*              VOLSIOTP->SIOTRSNC=INELUNIT; /*VOL ON INELIGIBLE 02S0135
*                                        RESERVED UNIT       @YM08617*/
         L     @10,VOLSIOTP(,VUPTR)                             02S0135
         MVC   SIOTRSNC(2,@10),@CH00105                         02S0135
*              RTNCODE = FAILURE;      /*FAIL REQUEST        @YM08167*/
         LA    RTNCODE,4                                        02S0136
*            END;                                               02S0137
*        END;                                                   02S0138
*      ELSE                            /*NEEDED VOL NOT MOUNTED      */
*        VOLALGTP->CVRWUCBP = ZERO;    /*ZERO PTR TO UCB WITH VOL    */
         B     @RC00112                                         02S0139
@RF00112 L     @10,VOLALGTP(,VUPTR)                             02S0139
         SLR   @07,@07                                          02S0139
         STH   @07,CVRWUCBP(,@10)                               02S0139
*    END;                                                       02S0140
*  ELSE;                               /*VOL WASN'T ALLOC'D ELSEWHERE*/
@RF00109 DS    0H                                               02S0142
*  VUPTR = VUPTR + LENGTH(VOLUNTAB);   /*POINT TO NEXT VOLUNIT ENTRY */
@RC00109 AH    VUPTR,@CH01094                                   02S0142
*END;                                                           02S0143
         AH    VUCTR,@CH00050                                   02S0143
@DE00108 L     @10,@PC00001                                     02S0143
         L     @10,ALCWAPTR(,@10)                               02S0143
         L     @00,VOLUNSZE(,@10)                               02S0143
         SRDA  @00,32                                           02S0143
         D     @00,@CF01094                                     02S0143
         CR    VUCTR,@01                                        02S0143
         BNH   @DL00108                                         02S0143
@DC00108 DS    0H                                               02S0144
*IF CONTINUE=ON & RTNCODE=SUCCESS THEN /*ALL UNITS NEEDED UNALLOCATED
*                                        SO FAR, AND NO ERRORS ?     */
         TM    CONTINUE,B'10000000'                             02S0144
         BNO   @RF00144                                         02S0144
         LTR   RTNCODE,RTNCODE                                  02S0144
         BNZ   @RF00144                                         02S0144
*  DO;                                 /*YES,SEE IF DEMAND ALC NEEDED*/
*    DEMANDSW = OFF;                   /*ASSUME DEMAND ALC NOT NEEDED*/
         NI    DEMANDSW,B'10111111'                             02S0146
*    SIOTPTR = SIOT1P;                 /*POINT TO FIRST SIOT IN CHAIN*/
         L     @10,@PC00001                                     02S0147
         L     @10,ALCWAPTR(,@10)                               02S0147
         L     SIOTPTR,SIOT1P(,@10)                             02S0147
*    DO WHILE SIOTPTR ^= ZERO & CONTINUE = ON; /*SCAN ALL SIOTS      */
         B     @DE00148                                         02S0148
@DL00148 DS    0H                                               02S0149
*      SIOTGIGN = ON;                  /*ASSUME IEFAB479 WON'T PROCES*/
         OI    SIOTGIGN(SIOTPTR),B'00001000'                    02S0149
*      IF SIOTDMND = ON & SIOTALCD = OFF THEN /*DEMAND REQ ?         */
         TM    SIOTDMND(SIOTPTR),B'10000000'                    02S0150
         BNO   @RF00150                                         02S0150
         TM    SIOTALCD(SIOTPTR),B'00000010'                    02S0150
         BNZ   @RF00150                                         02S0150
*        DO;                           /*YES,SEE IF UNIT UNALLOCATED */
*          DEMANDSW = ON;              /*INDICATE SOME DEMAND REQS   */
         OI    DEMANDSW,B'01000000'                             02S0152
*          UCBPTR = SIOUCBAD;                                   02S0153
         L     UCBPTR,SIOUCBAD-1(,SIOTPTR)                      02S0153
         LA    UCBPTR,0(,UCBPTR)                                02S0153
*          IF UCBALOC = OFF THEN       /*IS THE DEMANDED UCB UNALLOC?*/
         TM    UCBALOC(UCBPTR),B'00001000'                      02S0154
         BNZ   @RF00154                                         02S0154
*            SIOTGIGN = OFF;           /*YES,INDICATE 479 TO HANDLE  */
         NI    SIOTGIGN(SIOTPTR),B'11110111'                    02S0155
*          ELSE                        /*DEMANDED UNIT ALLOCATED     */
*            CONTINUE = OFF;                                    02S0156
         B     @RC00154                                         02S0156
@RF00154 NI    CONTINUE,B'01111111'                             02S0156
*        END;                                                   02S0157
*      ELSE;                           /*NOT A DEMAND REQUEST        */
@RF00150 DS    0H                                               02S0159
*      SIOTPTR = SIOTNPTR;             /*POINT TO THE NEXT SIOT      */
@RC00150 L     SIOTPTR,SIOTNPTR(,SIOTPTR)                       02S0159
*    END;                                                       02S0160
@DE00148 LTR   SIOTPTR,SIOTPTR                                  02S0160
         BZ    @DC00148                                         02S0160
         TM    CONTINUE,B'10000000'                             02S0160
         BO    @DL00148                                         02S0160
@DC00148 DS    0H                                               02S0161
*    IF CONTINUE=ON & DEMANDSW=ON THEN /*DEMAND ALLOCS TO BE DONE ?  */
         TM    CONTINUE,B'11000000'                             02S0161
         BNO   @RF00161                                         02S0161
*      DO;                             /*YES, CALL DEMAND ALLOC RTN  */
*        CALL IEFAB479 (ALCWAPTR,FUNC479);                      02S0163
         L     @10,@PC00001                                     02S0163
         ST    @10,@AL00001                                     02S0163
         LA    @10,@CB00101                                     02S0163
         ST    @10,@AL00001+4                                   02S0163
         L     @15,@CV00137                                     02S0163
         LA    @01,@AL00001                                     02S0163
         BALR  @14,@15                                          02S0163
*        RTNCODE = REG15;              /*SAVE THE RETURN CODE        */
         LR    RTNCODE,REG15                                    02S0164
*        IF RTNCODE=RETRYRC & INDRETRY=ON THEN  /*RETRY NEEDED ?     */
         CH    RTNCODE,@CH00120                                 02S0165
         BNE   @RF00165                                         02S0165
         L     @10,@PC00001                                     02S0165
         L     @10,ALCWAPTR(,@10)                               02S0165
         TM    INDRETRY(@10),B'01000000'                        02S0165
         BNO   @RF00165                                         02S0165
*          RTNCODE = SUCCESS;          /*YES,ZERO THE RETURN CODE    */
         SLR   RTNCODE,RTNCODE                                  02S0166
*        ELSE;                         /*NOT A RETRY RETURN CODE     */
@RF00165 DS    0H                                               02S0168
*      END;                                                     02S0168
*    ELSE;                             /*DEMAND ALLOC NOT NEEDED NOW */
@RF00161 DS    0H                                               02S0170
*  END;                                                         02S0170
*ELSE;                                 /*ALL VOLUMES NOT UNLOADED    */
@RF00144 DS    0H                                               02S0172
*          IF RTNCODE=SUCCESS & TOTREQS^=ZERO /*ALL SPECIFIC UNITS ..*/
*              & INDRETRY = OFF                                 01S0172
*              & CONTINUE = ON THEN    /*.. ALLOC'D + ALG NEEDED ?   */
         SLR   @10,@10                                          01S0172
         CR    RTNCODE,@10                                      01S0172
         BNE   @RF00172                                         01S0172
         L     @07,@PC00001                                     01S0172
         L     @07,ALCWAPTR(,@07)                               01S0172
         C     @10,TOTREQS(,@07)                                01S0172
         BE    @RF00172                                         01S0172
         TM    INDRETRY(@07),B'01000000'                        01S0172
         BNZ   @RF00172                                         01S0172
         TM    CONTINUE,B'10000000'                             01S0172
         BNO   @RF00172                                         01S0172
*            DO;                       /*YES, TRY TO ALLOCATE        */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - ALGCOVER                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - TRY TO ALLOCATE VIA THE ALGORITHM             */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE DETERMINES IF SUFFICIENT DEVICES HAVE BEEN      */
*/*     UNALLOCATED TO SATISFY ALL THE UNALLOCATED REQUESTS          */
*/*     REMAINING. IF SO, MODULE IEFAB478 IS CALLED TO ALLOCATE      */
*/*     THESE REMAINING REQUESTS.                                    */
*/*     IF ALL REQUESTS WERE NOT SATISFIED THIS ROUTINE ENSURES      */
*/*     THAT A SOLUTION STILL EXISTS IF ALL ALLOCATED DEVICES ARE    */
*/*     CONSIDERED BY THE ALGORITHM.                                 */
*/*                                                                  */
*/*   OPERATION - (THE OPERATION IS DOCUMENTED BY THE CODE ITSELF)   */
*/*                                                                  */
*/* ENTRY - INLINE SUBROUTINE                                        */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*      ALCWAPTR - PTR TO ALLOCATION WORK AREA, WHICH CONTAINS      */
*/*        ALGTABP - PTR TO ALGORITHM INTERFACE TABLES               */
*/*        TOTREQS - NUMBER OF REQS STILL UNALLOCATED                */
*/*        FAILRSCP - PTR TO STEP REASON CODE AREA                   */
*/*        INDRETRY - 'RETRY' INDICATOR BIT (0 ON ENTRY)             */
*/*                                                                  */
*/* EXITS - (SAME AS FOR MODULE IEFAB491 - SEE MODULE SPEC)          */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - UPSTATUS                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - DETERMINE STATUS OF GROUPS WAITED FOR         */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE UPDATES THE ALGORITHM INTERFACE TABLES AS       */
*/*     FOLLOWS:                                                     */
*/*       .ALL ALLOCATED REQUEST LIST ENTRIES ARE MARKED TO-BE-      */
*/*        IGNORED BY THE ALGORITHM (CVRSKFLG=1).                    */
*/*       .THE STATUS OF ALL DEVICE GROUPS BEING WAITED ON IS        */
*/*        UPDATED. THE UCBS ARE CATEGORIZED AS ONE OF THE           */
*/*        FOLLOWING: NOT MOVABLE OR NOT USABLE.                     */
*/*                   OFFLINE                                        */
*/*                   ALREADY ALLOCATED                              */
*/*                   AVAILABLE                                      */
*/*                                                                  */
*/*   OPERATION - (THE OPERATION IS DOCUMENTED BY THE CODE ITSELF)   */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*      ALCWAPTR - PTR TO ALLOCATION WORK AREA, WHICH CONTAINS      */
*/*        ALGTABP - PTR TO ALGORITHM INTERFACE TABLES               */
*/*        WMASK2P - PTR TO MASK OF GROUPS BEING WAITED FOR          */
*/*                                                                  */
*/* EXIT - NORMAL - INLINE SUBROUTINE)                               */
*/*                                                                  */
*/*   CONDITIONS - ALGORITHM INTERFACE TABLES UPDATED                */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*      .ALG REQ LIST ENTRY FIELDS:  CVRSKFLG=1 FOR ALLOCATED REQS  */
*/*      .ALG COUNT TABLE ENTRY FIELDS:                              */
*/*            GRPAVAIL - NUMBER OF AVAILABLE UNITS                  */
*/*            GRPALLCT - NUMBER OF ALLOCATED UNITS                  */
*/*            GRPOFFLN - NUMBER OF OFFLINE UNITS                    */
*/*            GRPTOTAL - TOTAL NUMBER OF UNITS                      */
*/*                                                                  */
*/*   RETURN CODES - (NONE)                                          */
*/*                                                                  */
*/********************************************************************/
*AREQPTR = ALGRQLTP;                   /*POINT TO FIRST ALG REQ ENTRY*/
         L     @10,ALGTABP(,@07)                                03S0174
         L     AREQPTR,ALGRQLTP(,@10)                           03S0174
*DO AREQCTR = ONE TO CVRNREQ;          /*SCAN ALL ALG REQ LIST ENTRYS*/
         LA    AREQCTR,1                                        03S0175
         B     @DE00175                                         03S0175
@DL00175 DS    0H                                               03S0176
*  CVRREQ1 = ONE;                      /*RESET NUM NEEDED IF REDUCED */
         MVC   CVRREQ1(2,AREQPTR),@CH00050                      03S0176
*  IF CVRVUPTR->VOLALOC = ON THEN      /*IS THE REQ ALREADY ALLOC'D  */
         L     @10,CVRVUPTR(,AREQPTR)                           03S0177
         TM    VOLALOC(@10),B'10000000'                         03S0177
         BNO   @RF00177                                         03S0177
*    CVRSKFLG = ON;                    /*YES, DON'T HAVE ALG CONSIDER*/
         OI    CVRSKFLG(AREQPTR),B'10000000'                    03S0178
*  ELSE                                /*REQ IS NOT ALREADY ALLOC'D  */
*    DO;                               /*INDIC NOT COVERED BY CALLER */
         B     @RC00177                                         03S0179
@RF00177 DS    0H                                               03S0180
*      CVRALLCT = ZERO;                                         03S0180
         SLR   @10,@10                                          03S0180
         STH   @10,CVRALLCT(,AREQPTR)                           03S0180
*      AGRPPTR = CVRGRPPT;                                      03S0181
         L     AGRPPTR,CVRGRPPT(,AREQPTR)                       03S0181
*      DO AGRPCTR = ONE TO CVRNGRP;    /*POINT TO GROUP LIST         */
         LA    AGRPCTR,1                                        03S0182
         B     @DE00182                                         03S0182
@DL00182 DS    0H                                               03S0183
*        CVRGRPAL = ZERO;                                       03S0183
         SLR   @10,@10                                          03S0183
         STH   @10,CVRGRPAL(,AGRPPTR)                           03S0183
*        AGRPPTR = AGRPPTR + LENGTH(CVRGPLST); /*POINT TO NEXT ENTRY */
         AH    AGRPPTR,@CH00056                                 03S0184
*      END;                                                     03S0185
         AH    AGRPCTR,@CH00050                                 03S0185
@DE00182 CH    AGRPCTR,CVRNGRP(,AREQPTR)                        03S0185
         BNH   @DL00182                                         03S0185
*    END;                                                       03S0186
*  AREQPTR = AREQPTR + LENGTH(CVRRQLST); /*POINT TO NEXT REQUEST     */
@RC00177 AL    AREQPTR,@CF01094                                 03S0187
*END;                                                           03S0188
         AH    AREQCTR,@CH00050                                 03S0188
@DE00175 L     @10,@PC00001                                     03S0188
         L     @10,ALCWAPTR(,@10)                               03S0188
         L     @10,ALGTABP(,@10)                                03S0188
         L     @10,ALGPARMP(,@10)                               03S0188
         CH    AREQCTR,CVRNREQ(,@10)                            03S0188
         BNH   @DL00175                                         03S0188
*MASKPTR = ADDR(WORKMASK);             /*POINT TO GROUP MASK HELD    */
         LA    @10,WORKMASK                                     03S0189
         ST    @10,MASKPTR                                      03S0189
*RFY GRPENTRY BASED(GROUPPTR);         /*RESPECIFY GROUP TABLE OF EDT*/
*DO GROUPNO = ONE TO NUMGROUP;         /*CONVERT LOCK MASK TO GROUPS */
         LA    @10,1                                            03S0191
         B     @DE00191                                         03S0191
@DL00191 DS    0H                                               03S0192
*  GRPCTPTR=ALGGCNTP+LENGTH(GRPCOUNT)*(GROUPNO-ONE); /*POINT TO..
*                                        ..COUNT TABLE ENTRY         */
         L     @07,@PC00001                                     03S0192
         L     @07,ALCWAPTR(,@07)                               03S0192
         L     @07,ALGTABP(,@07)                                03S0192
         LR    GRPCTPTR,@10                                     03S0192
         BCTR  GRPCTPTR,0                                       03S0192
         SLA   GRPCTPTR,4                                       03S0192
         AL    GRPCTPTR,ALGGCNTP(,@07)                          03S0192
*  GRPCOUNT = GRPCOUNT && GRPCOUNT;    /*ZERO GROUP COUNT            */
         XC    GRPCOUNT(16,GRPCTPTR),GRPCOUNT(GRPCTPTR)         03S0193
*  GRPIDENT=GROUPNO;                   /*PUT GROUP ID BACK           */
         STH   @10,GRPIDENT(,GRPCTPTR)                          03S0194
*  CALL TESTBIT;                       /*SEE IF GROUP WAITED FOR     */
         BAL   @14,TESTBIT                                      03S0195
*  IF BITRTN = ON THEN                 /* WAS GROUP WAIT FOR ?       */
         TM    BITRTN,B'10000000'                               03S0196
         BNO   @RF00196                                         03S0196
*    DO;                               /*YES, FILL IN CT TABLE ENTRY */
*      GROUPPTR = EDTGRPSP + LENGTH(GRPHDR) /*LOCATE GROUP ENTRY IN..*/
*        + LENGTH(GRPENTRY) * (GROUPNO - ONE); /*..SYSGEN TABLES     */
         L     @10,@PC00001                                     03S0198
         L     @10,ALCWAPTR(,@10)                               03S0198
         L     @10,EDTABPTR(,@10)                               03S0198
         LA    GROUPPTR,8                                       03S0198
         AL    GROUPPTR,EDTGRPSP(,@10)                          03S0198
         L     @10,GROUPNO                                      03S0198
         BCTR  @10,0                                            03S0198
         MH    @10,@CH01062                                     03S0198
         ALR   GROUPPTR,@10                                     03S0198
*      GRPTOTAL = GRPUCBNO;            /*FILL IN TOTAL FIELD         */
         MVC   GRPTOTAL(2,GRPCTPTR),GRPUCBNO+2(GROUPPTR)        03S0199
*      DO UCBNO = ONE TO GRPUCBNO;     /*SCAN ALL UCBS IN THE GROUP  */
         LA    UCBNO,1                                          03S0200
         B     @DE00200                                         03S0200
@DL00200 DS    0H                                               03S0201
*        UCBPTR=IOSLUT(EUCBTPOS(UCBNO)+1); /*ADDRESSES UCB           */
         LR    @10,UCBNO                                        03S0201
         ALR   @10,@10                                          03S0201
         L     @04,GRPUCBP(,GROUPPTR)                           03S0201
         BCTR  @04,0                                            03S0201
         BCTR  @04,0                                            03S0201
         LH    @10,EUCBTPOS(@10,@04)                            03S0201
         ALR   @10,@10                                          03S0201
         L     @04,@PC00001                                     03S0201
         L     @04,ALCWAPTR(,@04)                               03S0201
         L     @04,IOSLUTP(,@04)                                03S0201
         ALR   @04,@10                                          03S0201
         MVC   @ZT00002+2(2),IOSLUT(@04)                        03S0201
         L     UCBPTR,@ZT00002                                  03S0201
*        IF ^((UCBNALOC = ON) ×        /*IF UCB NOT USABLE OR        */
*           (UCBSYSR = ON              /*IF ACTIVE CONSOLE OR        */
*           & (UCB3DACC = OFF & UCB3TAPE = OFF)) ×              03S0202
*           (UCB3DACC=ON & UCBPRES=ON  /*IF PERMRES,         @YM05583*/
*           & UCBONLI=ON & (UCBALOC=ON /*ONLINE AND ALLOCD   @YM05583*/
*           × (UCBVOLI ^= NOVOLSER     /*OR WITH VOL MNTD    @YM05583*/
*           & UCBMOUNT = OFF))) ×      /*                    @YM05583*/
*           ((UCB3DACC = ON × UCB3TAPE=ON) /*IF RESERVED.    @YM05583*/
*           & UCBRESV=ON)) THEN        /*..THEN DONT COUNT   @YM05583*/
         TM    UCBNALOC(UCBPTR),B'00000100'                     03S0202
         BO    @RF00202                                         03S0202
         TM    UCBSYSR(UCBPTR),B'00000010'                      03S0202
         BNO   @GL00010                                         03S0202
         TM    UCB3DACC(UCBPTR),B'10100000'                     03S0202
         BZ    @RF00202                                         03S0202
@GL00010 TM    UCB3DACC(UCBPTR),B'00100000'                     03S0202
         BNO   @GL00009                                         03S0202
         TM    UCBPRES(UCBPTR),B'10000100'                      03S0202
         BNO   @GL00009                                         03S0202
         TM    UCBALOC(UCBPTR),B'00001000'                      03S0202
         BO    @RF00202                                         03S0202
         CLC   UCBVOLI(6,UCBPTR),NOVOLSER                       03S0202
         BE    @GL00009                                         03S0202
         TM    UCBMOUNT(UCBPTR),B'10000000'                     03S0202
         BZ    @RF00202                                         03S0202
@GL00009 TM    UCB3DACC(UCBPTR),B'10100000'                     03S0202
         BZ    @RT00202                                         03S0202
         TM    UCBRESV(UCBPTR),B'00100000'                      03S0202
         BO    @RF00202                                         03S0202
@RT00202 DS    0H                                               03S0203
*          DO;                         /*NOT FAST PATH DEVICE        */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - DMNDNEED                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - TEST IF UCB IS DEMANDED                       */
*/*                                                                  */
*/* FUNCTION - THIS ROUTINE DETERMINES IF THE INPUT UCB IS           */
*/*            NEEDED BY A DEMAND REQUEST (E.G. UNIT=190).           */
*/*                                                                  */
*/*   OPERATION - THE SIOT CHAIN IS SCANNED TO LOCATE EACH           */
*/*               DEMAND REQUEST.                                    */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*      SIOT1P - PTR TO THE FIRST SIOT IN THE CHAIN                 */
*/*        SIOTDMND - 1 FOR DEMAND REQUESTS                          */
*/*        SIOUCBAD - FOR DEMAND REQUEST, ADDRESS OF THE             */
*/*                   DEMANDED UCB                                   */
*/*        SIOTNPTR - PTR TO THE NEXT SIOT                           */
*/*      UCBPTR - PTR TO UCB                                         */
*/*                                                                  */
*/* EXIT - NORMAL - INLINE SUBROUTINE                                */
*/*                                                                  */
*/*   CONDITIONS - FUNCTION COMPLETED                                */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*       USEUCB - 1 = NO DEMAND REQ NEEDS THIS UCB                  */
*/*              - 0 = A DEMAND REQ NEEDS THIS UCB                   */
*/*                                                                  */
*/********************************************************************/
*USEUCB = ON;                          /*ASSUME UCB NOT DEMANDED     */
         OI    USEUCB,B'00100000'                               04S0204
*RFY INDMSIOT BASED(SPTR);                                      04S0205
*SPTR = SIOT1P;                        /*POINT TO THE FIRST SIOT     */
         L     @10,@PC00001                                     04S0206
         L     @10,ALCWAPTR(,@10)                               04S0206
         L     SPTR,SIOT1P(,@10)                                04S0206
*DO WHILE (SPTR ^= ZERO                /*SCAN ALL SIOTS ..           */
*    & USEUCB = ON);                   /*..UNTIL UCB FOUND DEMANDED  */
         B     @DE00207                                         04S0207
@DL00207 DS    0H                                               04S0208
*  IF SIOTDMND = ON                    /*DEMAND REQ FOR THIS UCB ?   */
*      & SIOUCBAD = UCBPTR THEN                                 04S0208
         TM    SIOTDMND(SPTR),B'10000000'                       04S0208
         BNO   @RF00208                                         04S0208
         MVC   @ZT00001+1(3),SIOUCBAD(SPTR)                     04S0208
         C     UCBPTR,@ZT00001                                  04S0208
         BNE   @RF00208                                         04S0208
*    DO;                               /*YES,INDICATE UCB IS DEMANDED*/
*      USEUCB = OFF;                                            04S0210
         NI    USEUCB,B'11011111'                               04S0210
*    END;                                                       04S0211
*  ELSE;                               /*NOT DEMAND REQ FOR THIS UCB */
@RF00208 DS    0H                                               04S0213
*  SPTR = SIOTNPTR;                    /*POINT TO THE NEXT SIOT      */
         L     SPTR,SIOTNPTR(,SPTR)                             04S0213
*END;                                                           04S0214
@DE00207 LTR   SPTR,SPTR                                        04S0214
         BZ    @DC00207                                         04S0214
         TM    USEUCB,B'00100000'                               04S0214
         BO    @DL00207                                         04S0214
@DC00207 DS    0H                                               04S0215
*RFY INDMSIOT BASED;                                            04S0215
*            IF USEUCB = ON THEN       /*DEMANDED UCB?               */
         TM    USEUCB,B'00100000'                               03S0216
         BNO   @RF00216                                         03S0216
*              DO;                     /*NO, COUNT                   */
*                IF UCBONLI=OFF THEN   /*OFFLINE                     */
         TM    UCBONLI(UCBPTR),B'10000000'                      03S0218
         BNZ   @RF00218                                         03S0218
*                  DO;                 /*YES,OFFLINE                 */
*                    GRPOFFLN=GRPOFFLN+ONE; /*INCREMENT OFFLINE COUNT*/
         LA    @10,1                                            03S0220
         AH    @10,GRPOFFLN(,GRPCTPTR)                          03S0220
         STH   @10,GRPOFFLN(,GRPCTPTR)                          03S0220
*                  END;                                         03S0221
*                ELSE                  /*NOT OFFLINE DEVICE          */
*                  DO;                                          03S0222
         B     @RC00218                                         03S0222
@RF00218 DS    0H                                               03S0223
*                    IF UCBALOC = ON THEN  /*IS DEVICE ALLOCATED ?   */
         TM    UCBALOC(UCBPTR),B'00001000'                      03S0223
         BNO   @RF00223                                         03S0223
*                      DO;             /*YES, ALLOCATED DEVICE       */
*                        GRPALLCT=GRPALLCT+ONE; /*INCREMENT ALLOC'D
*                                        COUNT                       */
         LA    @10,1                                            03S0225
         AH    @10,GRPALLCT(,GRPCTPTR)                          03S0225
         STH   @10,GRPALLCT(,GRPCTPTR)                          03S0225
*                      END;                                     03S0226
*                    ELSE                   /*NOT ALLOCATED DEVICE   */
*                      DO;                                      03S0227
         B     @RC00223                                         03S0227
@RF00223 DS    0H                                               03S0228
*                        GRPAVAIL=GRPAVAIL+ONE; /*INCREMENT AVAILABLE
*                                        COUNT                       */
         LA    @10,1                                            03S0228
         AH    @10,GRPAVAIL(,GRPCTPTR)                          03S0228
         STH   @10,GRPAVAIL(,GRPCTPTR)                          03S0228
*                      END;                                     03S0229
*                  END;                                         03S0230
*              END;                                             03S0231
*            ELSE;                     /*UCB WAS DEMANDED            */
@RF00216 DS    0H                                               03S0233
*          END;                                                 03S0233
*        ELSE;                         /*FAST-PATH DEVICE            */
@RF00202 DS    0H                                               03S0235
*      END;                                                     03S0235
@RC00202 AH    UCBNO,@CH00050                                   03S0235
@DE00200 C     UCBNO,GRPUCBNO(,GROUPPTR)                        03S0235
         BNH   @DL00200                                         03S0235
*    END;                                                       03S0236
*  ELSE;                               /*GROUP WAS NOT JUST LOCKED   */
@RF00196 DS    0H                                               03S0238
*END;                                                           03S0238
         LA    @10,1                                            03S0238
         AL    @10,GROUPNO                                      03S0238
@DE00191 ST    @10,GROUPNO                                      03S0238
         CR    @10,NUMGROUP                                     03S0238
         BNH   @DL00191                                         03S0238
*CVRFCALL = ON;                        /*SET 1ST CALL WITH THIS DATA */
*CVRAVFLG = ON;                        /*CONSIDER ONLY AVAILABLE DEVS*/
*CVRALFLG = OFF;                                                02S0241
*CVROFFLG = OFF;                                                02S0242
         L     @10,@PC00001                                     02S0242
         L     @10,ALCWAPTR(,@10)                               02S0242
         L     @10,ALGTABP(,@10)                                02S0242
         L     @07,ALGPARMP(,@10)                               02S0242
         OI    CVRFCALL(@07),B'10010000'                        02S0242
         NI    CVRALFLG(@07),B'10011111'                        02S0242
*CALL IEFAB480 (ALGPARMP);             /*TRY TO COVER ALL REQUESTS   */
         ST    @10,@AL00001                                     02S0243
         L     @15,@CV00138                                     02S0243
         LA    @01,@AL00001                                     02S0243
         BALR  @14,@15                                          02S0243
*RTNCODE = REG15;                      /*SAVE THE RETURN CODE        */
         LR    RTNCODE,REG15                                    02S0244
*IF RTNCODE = SUCCESS THEN             /*WERE ALL REQS COVERED?      */
         LTR   RTNCODE,RTNCODE                                  02S0245
         BNZ   @RF00245                                         02S0245
*  DO;                                 /*YES, ALLOCATE THEM          */
*    CALL IEFAB478 (ALCWAPTR, FUNC478);/*ALLOC TO GROUPS ALG PICKED  */
         L     @10,@PC00001                                     02S0247
         ST    @10,@AL00001                                     02S0247
         LA    @10,@CB00101                                     02S0247
         ST    @10,@AL00001+4                                   02S0247
         L     @15,@CV00136                                     02S0247
         LA    @01,@AL00001                                     02S0247
         BALR  @14,@15                                          02S0247
*    RTNCODE = REG15;                  /*SAVE THE RETURN CODE        */
         LR    RTNCODE,REG15                                    02S0248
*    IF RTNCODE=SUCCESS & INDRETRY=OFF THEN /*ANY ERRORS DETECTED    */
         SLR   @10,@10                                          02S0249
         CR    RTNCODE,@10                                      02S0249
         BNE   @RF00249                                         02S0249
         L     @07,@PC00001                                     02S0249
         L     @07,ALCWAPTR(,@07)                               02S0249
         TM    INDRETRY(@07),B'01000000'                        02S0249
         BNZ   @RF00249                                         02S0249
*      DO;                             /*NO ERRORS DETECTED?         */
*        IF TOTREQS ^= ZERO THEN       /*WERE ALL REQS ALLOC'D       */
         C     @10,TOTREQS(,@07)                                02S0251
         BE    @RF00251                                         02S0251
*          DO;                         /*NO, INDICATE ERROR CONDITION*/
*            RTNCODE = FAILURE;                                 02S0253
         LA    RTNCODE,4                                        02S0253
*            REASONCD = CHNGENV;                                02S0254
         L     @10,FAILRSCP(,@07)                               02S0254
         MVC   REASONCD(2,@10),@CH00090                         02S0254
*          END;                                                 02S0255
*        ELSE;                         /*ALL REQS ALLOCATED          */
@RF00251 DS    0H                                               02S0257
*      END;                                                     02S0257
*    ELSE;                             /*ERRORS DETECTED ALLOCATING  */
@RF00249 DS    0H                                               02S0259
*  END;                                                         02S0259
*ELSE                                  /*ALL REQS NOT COVERED        */
*  DO;                                                          02S0260
         B     @RC00245                                         02S0260
@RF00245 DS    0H                                               02S0261
*    IF RTNCODE = PARTALOC THEN        /*ANY ERROR DETECTED ?        */
         CH    RTNCODE,@CH00068                                 02S0261
         BNE   @RF00261                                         02S0261
*      DO;                             /*NO,SEE IF ALLOC'DS CAN COVER*/
*        CVRALFLG = ON;                /*HAVE ALG USE ALLOCATED DEVS */
         L     @10,@PC00001                                     02S0263
         L     @10,ALCWAPTR(,@10)                               02S0263
         L     @10,ALGTABP(,@10)                                02S0263
         L     @07,ALGPARMP(,@10)                               02S0263
         OI    CVRALFLG(@07),B'01000000'                        02S0263
*        CALL IEFAB480 (ALGPARMP);                              02S0264
         ST    @10,@AL00001                                     02S0264
         L     @15,@CV00138                                     02S0264
         LA    @01,@AL00001                                     02S0264
         BALR  @14,@15                                          02S0264
*        RTNCODE = REG15;              /*SAVE THE RETURN CODE        */
         LR    RTNCODE,REG15                                    02S0265
*        IF RTNCODE = PARTALOC THEN    /*DID ALG ONLY PARTIALLY-ALOC?*/
         CH    RTNCODE,@CH00068                                 02S0266
         BNE   @RF00266                                         02S0266
*          REASONCD = CHNGENV;         /*YES, SET ERROR REASON CODE  */
         L     @10,@PC00001                                     02S0267
         L     @10,ALCWAPTR(,@10)                               02S0267
         L     @10,FAILRSCP(,@10)                               02S0267
         MVC   REASONCD(2,@10),@CH00090                         02S0267
*        ELSE                          /*ALG DIDN'T PARTIALLY-ALLOC  */
*          DO;                                                  02S0268
         B     @RC00266                                         02S0268
@RF00266 DS    0H                                               02S0269
*            IF RTNCODE = ERROR480 THEN/*DID ALG HAVE A GETMAIN ERR  */
         CH    RTNCODE,@CH00056                                 02S0269
         BNE   @RF00269                                         02S0269
*              REASONCD = GETMNERR;    /*YES, SET STEP REASON CODE   */
         L     @10,@PC00001                                     02S0270
         L     @10,ALCWAPTR(,@10)                               02S0270
         L     @10,FAILRSCP(,@10)                               02S0270
         MVC   REASONCD(2,@10),@CH00083                         02S0270
*            ELSE;                     /*ALG COVERED ALL REQUESTS    */
@RF00269 DS    0H                                               02S0272
*          END;                                                 02S0272
*      END;                                                     02S0273
*    ELSE                              /*ALG HAD GETMAIN ERROR       */
*      REASONCD = GETMNERR;            /*SET STEP REASON CODE        */
         B     @RC00261                                         02S0274
@RF00261 L     @10,@PC00001                                     02S0274
         L     @10,ALCWAPTR(,@10)                               02S0274
         L     @10,FAILRSCP(,@10)                               02S0274
         MVC   REASONCD(2,@10),@CH00083                         02S0274
*  END;                                                         02S0275
*            END;                                               01S0276
*          ELSE;                       /*DON'T TRY TO ALLOC VIA ALG  */
@RF00172 DS    0H                                               01S0278
*        END;                                                   01S0278
*     ELSE                             /*OPERATOR CANCELLED ALLOC    */
*         REASONCD = OPERCANC;         /*SET STEP REASON CODE        */
         B     @RC00104                                         01S0279
@RF00104 L     @10,@PC00001                                     01S0279
         L     @10,ALCWAPTR(,@10)                               01S0279
         L     @10,FAILRSCP(,@10)                               01S0279
         MVC   REASONCD(2,@10),@CH00092                         01S0279
*    END;                                                       01S0280
*  ELSE                                /*OPERATOR CANCELLED ALLOC    */
*    DO;                                                        01S0281
         B     @RC00088                                         01S0281
@RF00088 DS    0H                                               01S0282
*      ENQLIST(1:ENQLGN)=NOWAITNQ(1:ENQLGN); /*REINITIALIZE ENQ 01S0282
*                                              PARM LIST     @ZA32215*/
         L     @10,ENQLGN                                       01S0282
         BCTR  @10,0                                            01S0282
         EX    @10,@SM01103                                     01S0282
*      REASONCD = OPERCANC;            /*SET STEP REASON CODE        */
         L     @10,@PC00001                                     01S0283
         L     @10,ALCWAPTR(,@10)                               01S0283
         L     @10,FAILRSCP(,@10)                               01S0283
         MVC   REASONCD(2,@10),@CH00092                         01S0283
*      GEN;                            /*SERIALIZE UNLOAD,ETC@ZA08766*/
        ENQ   (,SYSR,,8),MF=(E,ENQLIST)                       @ZA08766
*      IF DDRTPUR = ON THEN            /*ANY TAPE×UR REQUEST @ZA32215*/
         L     @10,@PC00001                                     01S0285
         L     @10,ALCWAPTR(,@10)                               01S0285
         TM    DDRTPUR(@10),B'00000100'                         01S0285
         BNO   @RF00285                                         01S0285
*        DO;                           /*YES, ENQ DDR TAPE×UR@ZA32215*/
*          GEN ( ENQ  (,DDRTUMIN,,7),MF=(E,ENQLIST) ); /*    @ZA32215*/
          ENQ  (,DDRTUMIN,,7),MF=(E,ENQLIST)
*        END;                          /*END TAPE×UR TEST    @ZA32215*/
*      IF DDRDA = ON THEN              /*ANY DA REQUEST      @ZA32215*/
@RF00285 L     @10,@PC00001                                     01S0289
         L     @10,ALCWAPTR(,@10)                               01S0289
         TM    DDRDA(@10),B'00000010'                           01S0289
         BNO   @RF00289                                         01S0289
*        DO;                           /*YES, ENQ DDR DA     @ZA32215*/
*          GEN ( ENQ  (,DDRDAMIN,,5),MF=(E,ENQLIST) ); /*    @ZA32215*/
          ENQ  (,DDRDAMIN,,5),MF=(E,ENQLIST)
*        END;                          /*END DA TEST         @ZA32215*/
*    END;                              /*                    @ZA08766*/
@RF00289 DS    0H                                               01S0294
*END;                                                           01S0294
@RC00088 DS    0H                                               01S0294
@DE00079 SLR   @10,@10                                          01S0294
         L     @07,@PC00001                                     01S0294
         L     @07,ALCWAPTR(,@07)                               01S0294
         C     @10,TOTREQS(,@07)                                01S0294
         BE    @DC00079                                         01S0294
         CR    RTNCODE,@10                                      01S0294
         BNE   @DC00079                                         01S0294
         TM    INDRETRY(@07),B'01000000'                        01S0294
         BZ    @DL00079                                         01S0294
@DC00079 DS    0H                                               01S0295
*IF RTNCODE=SUCCESS & INDRETRY=OFF THEN/*ANY ERRORS ?                */
         LTR   RTNCODE,RTNCODE                                  01S0295
         BNZ   @RF00295                                         01S0295
         L     @10,@PC00001                                     01S0295
         L     @10,ALCWAPTR(,@10)                               01S0295
         TM    INDRETRY(@10),B'01000000'                        01S0295
         BNZ   @RF00295                                         01S0295
*  DO;                                 /*NO, RELEASE WAIT GROUPS     */
*    DO MASKBYTE=ONE TO GMTENTLN;      /*INVERT VERIFY MASK          */
         LA    MASKBYTE,1                                       01S0297
         B     @DE00297                                         01S0297
@DL00297 DS    0H                                               01S0298
*      WORKMASK(MASKBYTE)=VERIFYMK(MASKBYTE) && ALLONES;        01S0298
         LA    @10,WORKMASK-1(MASKBYTE)                         01S0298
         L     @15,@PC00001                                     01S0298
         L     @01,ALCWAPTR(,@15)                               01S0298
         L     @01,WORK3MP(,@01)                                01S0298
         ALR   @01,MASKBYTE                                     01S0298
         BCTR  @01,0                                            01S0298
         MVC   0(1,@10),VERIFYMK(@01)                           01S0298
         XI    0(@10),X'FF'                                     01S0298
*    END;                                                       01S0299
         AH    MASKBYTE,@CH00050                                01S0299
@DE00297 L     @10,@PC00001                                     01S0299
         L     @10,ALCWAPTR(,@10)                               01S0299
         L     @10,EDTABPTR(,@10)                               01S0299
         L     @10,EDTMSKTP(,@10)                               01S0299
         C     MASKBYTE,GMTENTLN(,@10)                          01S0299
         BNH   @DL00297                                         01S0299
*    AQMECODE = RLSEFUNC;              /*INDICATE GROUP-RELEASE FUNC */
         L     @10,@PC00001                                     01S0300
         L     @10,ALCWAPTR(,@10)                               01S0300
         L     @02,QMGRRBP(,@10)                                01S0300
         MVC   AQMECODE(2,@02),@CH00052                         01S0300
*    AQMQCODE = ABCODE;                /*SET ALLOC Q-MGR Q-CODE      */
         MVC   AQMQCODE(2,@02),@CC00084                         01S0301
*    AQMMASKP = ADDR(WORKMASK);        /*POINT TO GRP-MASK TO RELEASE*/
         LA    @15,WORKMASK                                     01S0302
         ST    @15,AQMMASKP(,@02)                               01S0302
*    CALL IEFAB4FA (QMGRRBP,EXITPRMP); /*RELEASE DEVICE GROUPS       */
         LA    @02,QMGRRBP(,@10)                                01S0303
         ST    @02,@AL00001                                     01S0303
         LA    @10,EXITPRMP(,@10)                               01S0303
         ST    @10,@AL00001+4                                   01S0303
         L     @15,@CV00140                                     01S0303
         LA    @01,@AL00001                                     01S0303
         BALR  @14,@15                                          01S0303
*  END;                                                         01S0304
*ELSE;                                                          01S0305
@RF00295 DS    0H                                               01S0306
*RETURN CODE(RTNCODE);                 /*RETURN TO CALLER            */
         IC    @02,@OLDKEY                                      01S0306
         L     @13,4(,@13)                                      01S0306
         L     @00,@SIZDATD                                     01S0306
         LR    @01,@11                                          01S0306
         FSPACE   R,LV=(0),A=(1)
         MODESET KEYADDR=(2)
         LR    @15,@03                                          01S0306
         L     @14,12(,@13)                                     01S0306
         LM    @00,@12,20(@13)                                  01S0306
         BR    @14                                              01S0306
*TESTBIT: PROC;                                                 02S0307
TESTBIT  STM   @14,@12,@SA00002                                 02S0307
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - TESTBIT                                           */
*/*                                                                  */
*/* DESCRIPTIVE NAME - TEST BIT IN GROUP MASK                        */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS SUBROUTINE DETERMINES IF A PARTICULAR BIT IN A         */
*/*      GROUP MASK IS ON OR OFF. THE GROUP MASK IS A VARIABLE       */
*/*      LENGTH BIT MASK POINTED TO BY MASKPTR. THE ONE-ORIGIN       */
*/*      INDEX OF THE BIT TO BE TESTED IS CONTAINED IN FIELD         */
*/*      GROUPNO.                                                    */
*/*                                                                  */
*/*   OPERATION -                                                    */
*/*      THIS SEGMENT GENERATES BAL INSTRUCTIONS                     */
*/*                                                                  */
*/*      ONE IS SUBTRACTED FROM THE GROUPNO TO PRODUCE A ZERO-ORIGIN */
*/*      INDEX. THE INDEX IS THEN DIVIDED BY EIGHT TO DETERMINE THE  */
*/*      BYTE (AND REMAINDER)  OF THE BIT BEING TESTED (IN A SRDL    */
*/*      INSTRUCTION, THE ODD REGISTER GETS THE BITS SHIFTED OUT OF  */
*/*      THE EVEN REGISTER.). THE REMAINDER IS ALIGNED IN A REGISTER */
*/*      AND IS USED TO INDICATE THE BIT POSITION IN THE BYTE. THIS  */
*/*      BIT POSITION IS USED IN A TEST-UNDER-MASK INSTRUCTION VIA   */
*/*      EXECUTE.                                                    */
*/*                                                                  */
*/*      EXAMPLE - IF GROUPNO = 10, THIS OPERATION WILL DETERMINE    */
*/*                THE BIT IS 1 BYTE AFTER THE BEGINNING OF THE      */
*/*                GROUP MASK AND IS THE SECOND BIT POSITION.        */
*/*                                                                  */
*/* ENTRY - THIS CODE IS AN INLINE SUBROUTINE WHICH IS ENTERED       */
*/*         AT THE TOP.                                              */
*/*                                                                  */
*/*   PURPOSE  -  TO DETERMINE IF A PARTICULAR BIT IN A GROUP        */
*/*               MASK IS ON OR OFF.                                 */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*       MASKPTR - PTR TO GROUP MASK                                */
*/*       GROUPNO - 1-ORIGIN INDEX INTO MASK OF THE BIT TO BE TESTED */
*/*       BITRTN - BIT FOR RESULTS OF TEST TO BE RETURNED IN         */
*/*                                                                  */
*/* EXIT - NORMAL - THIS CODE IS AN INLINE SUBROUTINE WHICH          */
*/*                 EXITS FROM THE BOTTOM.                           */
*/*                                                                  */
*/*   CONDITION - BIT TESTED AND RESULTS INDICATED.                  */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*       BITRTN - SET TO 1 IF BIT WAS ON                            */
*/*              - SET TO 0 IF BIT WAS OFF                           */
*/*                                                                  */
*/*   RETURN CODES - (NONE)                                          */
*/*                                                                  */
*/********************************************************************/
*BITRTN = OFFVALUE;                    /*ASSUME BIT IS OFF           */
         NI    BITRTN,B'01111111'                               02S0308
*RFY (EVENREG,ODDREG,MASKREG) RSTD;    /*RESTRICT USE OF REGS 3,4+5  */
*GEN REFS(EVENREG,GROUPNO,MASKPTR,ODDREG,MASKREG,TMINST)        02S0310
*    FLOWS(BITOFF);                                             02S0310
        L     EVENREG,GROUPNO         PUT BIT INDEX INTO REG
        BCTR  EVENREG,0               DECREMENT INDEX FOR ZERO ORIGIN
        SRDL  EVENREG,3               DIVIDE INDEX BY 8.SAVE REMAINDER
        A     EVENREG,MASKPTR         POINT TO CORRECT BYTE
        SRL   ODDREG,29               ALIGN REMAINDER IS REG
        LA    MASKREG,X'80'           INSERT 0-BIT MASK
        SRL   MASKREG,0(ODDREG)       POSITION MASK BIT
        EX    MASKREG,TMINST          TEST IF BIT IS ON
        BNO   BITOFF                  BRANCH IF BIT NOT ON
*RFY (EVENREG,ODDREG,MASKREG) UNRSTD;  /*UNRESTRICT REGS 3,4, AND 5  */
*BITRTN = ONVALUE;                     /*INDICATE BIT WAS ON         */
         OI    BITRTN,B'10000000'                               02S0312
*BITOFF:;                                                       02S0313
*RETURN;                                                        02S0314
@EL00002 DS    0H                                               02S0314
@EF00002 DS    0H                                               02S0314
@ER00002 LM    @14,@12,@SA00002                                 02S0314
         BR    @14                                              02S0314
*END TESTBIT;                                                   02S0315
         B     @EL00002                                         02S0315
*END IEFAB491                          /*END OF WAIT-HOLDING RTN     */
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (A491SPEC)                                        *
*/*%INCLUDE SYSLIB  (A491DATA)                                        *
*/*%INCLUDE SYSLIB  (TBITDATA)                                        *
*/*%INCLUDE SYSLIB  (IEFZB421)                                        *
*/*%INCLUDE SYSLIB  (IEFZB422)                                        *
*/*%INCLUDE SYSLIB  (IEFZB423)                                        *
*/*%INCLUDE SYSLIB  (IEFZB425)                                        *
*/*%INCLUDE SYSLIB  (IEFZB426)                                        *
*/*%INCLUDE SYSLIB  (IEFZB427)                                        *
*/*%INCLUDE SYSLIB  (IEFZB428)                                        *
*/*%INCLUDE SYSLIB  (IEFZB431)                                        *
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                        *
*/*%INCLUDE SYSLIB  (IEFASIOT)                                        *
*/*%INCLUDE SYSLIB  (DMNDCOVR)                                        *
*/*%INCLUDE SYSLIB  (DMNDSPEC)                                        *
*/*%INCLUDE SYSLIB  (UNLDVOL )                                        *
*/*%INCLUDE SYSLIB  (UNLDSPEC)                                        *
*/*%INCLUDE SYSLIB  (ALGCOVER)                                        *
*/*%INCLUDE SYSLIB  (COVASPEC)                                        *
*/*%INCLUDE SYSLIB  (UPSTATUS)                                        *
*/*%INCLUDE SYSLIB  (STUPSPEC)                                        *
*/*%INCLUDE SYSLIB  (DMNDNEED)                                        *
*/*%INCLUDE SYSLIB  (DNEDSPEC)                                        *
*/*%INCLUDE SYSLIB  (TESTBIT )                                        *
*/*%INCLUDE SYSLIB  (TBITSPEC)                                        *
*;                                                              01S0316
@DATA    DS    0H
@CH00050 DC    H'1'
@CH00083 DC    H'2'
@CH00107 DC    H'3'
@CH00052 DC    H'4'
@CH00092 DC    H'5'
@CH00068 DC    H'8'
@CH01062 DC    H'12'
@CH00056 DC    H'16'
@CH00090 DC    H'17'
@CH00120 DC    H'20'
@CH00105 DC    H'58'
@SM01103 MVC   ENQLIST(0),NOWAITNQ
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SA00002 DS    15F
@AL00001 DS    3A
@TF00001 DS    F
@ZTEMPS  DS    0F
@ZT00001 DC    F'0'
@ZT00002 DC    F'0'
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
IEFAB491 CSECT
         DS    0F
@CF01094 DC    F'28'
@CH01094 EQU   @CF01094+2
@DATD    DSECT
         DS    0D
MASKPTR  DS    A
VMVREQBP DS    A
GROUPNO  DS    F
EDTPTR   DS    A
LUVPTR   DS    A
GENPTR   DS    A
GRPTABP  DS    A
GRPPTR   DS    A
EDLPTR   DS    A
EDLGNTP  DS    A
EDLUCBLP DS    A
BITRTN   DS    BL1
SWITCHES DS    BL1
         ORG   SWITCHES
CONTINUE DS    BL1
DEMANDSW EQU   SWITCHES+0
USEUCB   EQU   SWITCHES+0
         ORG   SWITCHES+1
WORKMASK DS    CL240
VMVRBCOR DS    CL52
@OLDKEY  DS    AL1
IEFAB491 CSECT
         DS    0F
@SIZDATD DC    AL1(230)
         DC    AL3(@ENDDATD-@DATD)
@CV00136 DC    V(IEFAB478)
@CV00137 DC    V(IEFAB479)
@CV00138 DC    V(IEFAB480)
@CV00139 DC    V(IEFAB49C)
@CV00140 DC    V(IEFAB4FA)
         DS    0D
@CC00084 DC    C'AB'
@CC00088 DC    C'AA'
@CB00101 DC    B'00000000'
DDRDAMIN DC    CL5'DDRDA'
DDRTUMIN DC    CL7'DDRTPUR'
NOVOLSER DC    X'000000000000'
SYSQ     DC    CL8'SYSIEFSD'
SYSR     DC    CL8'CHNGDEVS'
IEFAB491 CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
IEFAB491 CSECT
NOWAITNQ ENQ (SYSQ,SYSR,S,8,SYSTEM),MF=L
ENQLGN DC A(*-NOWAITNQ)
@DATD    DSECT
ENQLIST ENQ (SYSQ,SYSR,S,8,SYSTEM),MF=L
IEFAB491 CSECT
TMINST  TM    0(EVENREG),0            TEST OF CORRECT BYTE. MASK=BIT
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEFAB491 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
VUCTR    EQU   @05
UCBNO    EQU   @07
RTNCODE  EQU   @03
NUMGROUP EQU   @06
MASKBYTE EQU   @02
AREQCTR  EQU   @05
AGRPCTR  EQU   @04
VUPTR    EQU   @04
UCBPTR   EQU   @02
SPTR     EQU   @04
SIOTPTR  EQU   @04
GRPCTPTR EQU   @03
GROUPPTR EQU   @05
AREQPTR  EQU   @02
AGRPPTR  EQU   @03
REG15    EQU   @15
EVENREG  EQU   @04
MASKREG  EQU   @03
ODDREG   EQU   @05
CANCLECB EQU   0
IOSLUT   EQU   0
KEEPMASK EQU   0
REASONCD EQU   0
VERIFYMK EQU   0
WAITMASK EQU   0
EDTHDR   EQU   0
EDTLUVSP EQU   EDTHDR
EDTGENSP EQU   EDTHDR+4
EDTGRPSP EQU   EDTHDR+8
EDTUCBSP EQU   EDTHDR+12
EDTMSKTP EQU   EDTHDR+16
LUVSECT  EQU   0
LUVHDR   EQU   LUVSECT
LUVENTRY EQU   0
LUVGMTP  EQU   LUVENTRY+12
LUVFLAGS EQU   LUVENTRY+24
GENSECT  EQU   0
GENHDR   EQU   GENSECT
GENENTRY EQU   0
GRPTRTAB EQU   0
GRPSECT  EQU   0
GRPHDR   EQU   GRPSECT
GRPENTRY EQU   0
GRPUCBNO EQU   GRPENTRY+4
GRPUCBP  EQU   GRPENTRY+8
EUCBSECT EQU   0
EUCBHDR  EQU   EUCBSECT
EUCBENTY EQU   0
EUCBTPOS EQU   EUCBENTY
GRMSKTAB EQU   0
GMTHDR   EQU   GRMSKTAB
GMTENTLN EQU   GMTHDR+4
GMTENTRY EQU   0
IEFEDL   EQU   0
EDLHDR   EQU   IEFEDL
EDLUVFLG EQU   EDLHDR+16
EDLENTRY EQU   0
EDLDTFLG EQU   EDLENTRY+20
EDLGNTRY EQU   0
EDLGRFLG EQU   EDLGNTRY+16
EDLUCBL  EQU   0
EDLINDIC EQU   EDLUCBL+2
VOLUNTAB EQU   0
VOLID    EQU   VOLUNTAB
VOLSTAT  EQU   VOLUNTAB+6
VOLSTATA EQU   VOLSTAT
VOLSTATB EQU   VOLSTAT+1
VOLALOC  EQU   VOLSTATB
VOLSTATC EQU   VOLSTAT+2
VOLSTATD EQU   VOLSTAT+3
VOLALGTP EQU   VOLUNTAB+12
VOLSIOTP EQU   VOLUNTAB+16
VUUCBP   EQU   VOLUNTAB+20
VUGRID   EQU   VOLUNTAB+24
VUPOOL   EQU   0
VUGRLST  EQU   0
VUGRLENT EQU   VUGRLST
VUGRLFLG EQU   VUGRLENT+4
ALCWA    EQU   0
FMAPPTR  EQU   ALCWA+4
SIOT1P   EQU   ALCWA+8
IOSLUTP  EQU   ALCWA+16
FAILRSCP EQU   ALCWA+20
EDTABPTR EQU   ALCWA+24
CNTABLE  EQU   ALCWA+28
TOTREQS  EQU   CNTABLE+36
VOLUNPTR EQU   ALCWA+80
VOLUNSZE EQU   ALCWA+84
ALGTABP  EQU   ALCWA+88
QMGRRBP  EQU   ALCWA+108
INDICATE EQU   ALCWA+112
INDRETRY EQU   INDICATE
@NM00008 EQU   ALCWA+113
DDRTPUR  EQU   @NM00008
DDRDA    EQU   @NM00008
ALCWASID EQU   ALCWA+114
TIOTHDRP EQU   ALCWA+120
WMASKPTR EQU   ALCWA+128
WMASK2P  EQU   ALCWA+132
WORK3MP  EQU   ALCWA+136
CANCELP  EQU   ALCWA+140
EXITPRMP EQU   ALCWA+144
NAMES    EQU   0
ALCJOBN  EQU   NAMES
ALCSTEPN EQU   NAMES+8
ALGPTRS  EQU   0
ALGPARMP EQU   ALGPTRS
ALGRQLTP EQU   ALGPTRS+4
ALGGCNTP EQU   ALGPTRS+12
CVRPARM  EQU   0
CVRNREQ  EQU   CVRPARM+4
CVRFLG1  EQU   CVRPARM+8
CVRAVFLG EQU   CVRFLG1
CVRALFLG EQU   CVRFLG1
CVROFFLG EQU   CVRFLG1
CVRFCALL EQU   CVRFLG1
CVRRQLST EQU   0
CVRVUPTR EQU   CVRRQLST
CVRREQ1  EQU   CVRRQLST+4
CVRALLCT EQU   CVRRQLST+6
CVRMIN   EQU   CVRRQLST+10
CVRFLG2  EQU   CVRRQLST+16
CVRSKFLG EQU   CVRFLG2
CVRNGRP  EQU   CVRRQLST+18
CVRGRPPT EQU   CVRRQLST+20
CVRWUCBP EQU   CVRRQLST+24
CVRGPLST EQU   0
CVRGRPAL EQU   CVRGPLST+6
CVRFLG3  EQU   CVRGPLST+12
GRPCOUNT EQU   0
GRPAVAIL EQU   GRPCOUNT
GRPALLCT EQU   GRPCOUNT+2
GRPOFFLN EQU   GRPCOUNT+4
GRPTOTAL EQU   GRPCOUNT+6
GRPIDENT EQU   GRPCOUNT+10
AQMPARAM EQU   0
AQMECODE EQU   AQMPARAM
AQMQCODE EQU   AQMPARAM+2
AQMMASKP EQU   AQMPARAM+4
AQMNORMP EQU   AQMPARAM+20
FUNCMAP  EQU   0
VOLMNTSW EQU   FUNCMAP
WRTMSGSW EQU   FUNCMAP
UWAITSW  EQU   FUNCMAP
VWAITSW  EQU   FUNCMAP
MSSTRMSW EQU   FUNCMAP
OFFDEVSW EQU   FUNCMAP
CCLMNTSW EQU   FUNCMAP
GENLOKSW EQU   FUNCMAP
SSEMSGSW EQU   FUNCMAP+1
HDRMSGSW EQU   FUNCMAP+1
MTRJOBSW EQU   FUNCMAP+1
NOTIOTNQ EQU   FUNCMAP+1
TRKMSW   EQU   FUNCMAP+1
WAITOKSW EQU   FUNCMAP+1
ASNMSW   EQU   FUNCMAP+1
VMVRQBLK EQU   0
VMVFNMAP EQU   VMVRQBLK
VMVOPTB1 EQU   VMVFNMAP
VMVUNLOD EQU   VMVOPTB1
VMVUCB   EQU   VMVOPTB1
VMVOPTB2 EQU   VMVFNMAP+1
VMVOPTB3 EQU   VMVFNMAP+2
VMVUCBP  EQU   VMVRQBLK+9
VMVJBNMP EQU   VMVRQBLK+24
VMVJSNMP EQU   VMVRQBLK+32
VMVMINFO EQU   VMVRQBLK+40
VMVACTON EQU   VMVMINFO
VMVUSER  EQU   VMVRQBLK+48
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBONLI  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCB3TAPE EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00024 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMIHTI EQU   UCBCMEXT+16
@NM00025 EQU   UCBMIHTI
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCB3800X EQU   0
UCBOPTNS EQU   UCB3800X
UCBACTIV EQU   UCB3800X+3
UCBMDRBF EQU   UCB3800X+36
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
INDMSIOT EQU   0
SCTUSADD EQU   INDMSIOT+20
SIOTBYT1 EQU   INDMSIOT+43
SIOTALCD EQU   SIOTBYT1
SIOTBYT3 EQU   INDMSIOT+46
SIOTTSTC EQU   INDMSIOT+47
SIOTBYT0 EQU   INDMSIOT+52
SIOTGIGN EQU   SIOTBYT0
SCTSDISP EQU   INDMSIOT+55
SCTSBYT1 EQU   INDMSIOT+56
SCTSBYT2 EQU   INDMSIOT+57
SCTSBYT3 EQU   INDMSIOT+58
SCTSBYT4 EQU   INDMSIOT+59
SCTUTYPE EQU   INDMSIOT+60
SIOTDEVT EQU   SCTUTYPE
SIOUBYT3 EQU   SIOTDEVT+2
SIOUCBAD EQU   SCTUTYPE+5
SIOTBYT4 EQU   INDMSIOT+81
SIOTALTD EQU   INDMSIOT+92
SIOTBYT2 EQU   INDMSIOT+103
SIOTDMND EQU   SIOTBYT2
SIOTRSNC EQU   INDMSIOT+130
SIOTEDLP EQU   INDMSIOT+136
SIOTNPTR EQU   INDMSIOT+152
UCBBGN   EQU   0
ALCWAPTR EQU   0
UCBOBS01 EQU   UCBDEV
UCBVOLI  EQU   UCBOBS01+4
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBMOUNT EQU   UCBDMCT
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00023 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBCTCAD EQU   UCBOBS08
UCBCTCF1 EQU   UCBOBS08+4
UCBOBS09 EQU   UCBDEV
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBRV082 EQU   UCBCTCF1
UCBRV081 EQU   UCBCTCF1
UCBRV080 EQU   UCBCTCF1
UCBRV079 EQU   UCBCTCF1
UCBRV078 EQU   UCBCTCF1
UCBRV077 EQU   UCBCTCF1
UCBRV076 EQU   UCBCTCF1
UCBCTC80 EQU   UCBCTCF1
UCBCTCAL EQU   UCBCTCAD
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00023
UCBSKPFG EQU   @NM00023
UCBRIPND EQU   @NM00023
UCBRTIAC EQU   @NM00023
UCBRSV79 EQU   @NM00023
UCBRSV78 EQU   @NM00023
UCBRSV77 EQU   @NM00023
UCBOLTEP EQU   @NM00023
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBDQDSP EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00022 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRESVP EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVTOC  EQU   UCBOBS01
SIODDSNL EQU   INDMSIOT+173
SIOVDSNL EQU   INDMSIOT+172
SIOVDSNT EQU   INDMSIOT+170
SVOLUNNO EQU   INDMSIOT+168
SIOTVMVP EQU   INDMSIOT+164
SIOTJFX  EQU   INDMSIOT+160
SJFCBPTR EQU   INDMSIOT+156
SIOTETIO EQU   INDMSIOT+148
SIOTATE  EQU   INDMSIOT+144
SVOLUNAD EQU   INDMSIOT+140
SIOTEDLS EQU   INDMSIOT+132
SCTANAME EQU   INDMSIOT+122
SIOTSSIC EQU   INDMSIOT+120
@NM00039 EQU   INDMSIOT+108
SIOTSSNM EQU   INDMSIOT+104
@NM00038 EQU   SIOTBYT2
SIOTCVOL EQU   SIOTBYT2
SIOTCNEW EQU   SIOTBYT2
SIOTCALC EQU   SIOTBYT2
SIOTGALL EQU   SIOTBYT2
SIOTDSPD EQU   SIOTBYT2
SIOTOPUC EQU   INDMSIOT+99
SIOTOUTR EQU   INDMSIOT+97
SIOTOUTC EQU   INDMSIOT+96
SIOTSSWA EQU   INDMSIOT+93
SIOTAUNC EQU   SIOTALTD
SIOTACAT EQU   SIOTALTD
SIOTADEL EQU   SIOTALTD
SIOTAKEP EQU   SIOTALTD
SIOTNPRV EQU   SIOTALTD
SIOJCATS EQU   SIOTALTD
@NM00037 EQU   SIOTALTD
@NM00036 EQU   SIOTALTD
@NM00035 EQU   INDMSIOT+91
SIOTNDSB EQU   INDMSIOT+88
@NM00034 EQU   INDMSIOT+84
SIOTDPCD EQU   INDMSIOT+82
@NM00033 EQU   SIOTBYT4
SIOTRACT EQU   SIOTBYT4
SIOTRACD EQU   SIOTBYT4
SIOTPROT EQU   SIOTBYT4
SCTOUTPN EQU   INDMSIOT+80
SCTOUTNO EQU   INDMSIOT+76
SCTOUTNM EQU   INDMSIOT+68
SIOUCNVT EQU   SCTUTYPE+4
SIOUBYT4 EQU   SIOTDEVT+3
@NM00032 EQU   SIOUBYT3
SIO3UREC EQU   SIOUBYT3
SIO3DISP EQU   SIOUBYT3
SIO3DACC EQU   SIOUBYT3
SIO3COMM EQU   SIOUBYT3
SIO3TAPE EQU   SIOUBYT3
SIOUBYT2 EQU   SIOTDEVT+1
SIOUBYT1 EQU   SIOTDEVT
SIOTOMN  EQU   SCTSBYT4
SIOTIPDI EQU   SCTSBYT4
SIOTVAFF EQU   SCTSBYT4
SIOTSTEP EQU   SCTSBYT4
SIOTASCI EQU   SCTSBYT4
@NM00031 EQU   SCTSBYT4
SIOTGDGA EQU   SCTSBYT4
SCTSGDGS EQU   SCTSBYT4
SCTSOLD  EQU   SCTSBYT3
SCTSMOD  EQU   SCTSBYT3
SCTSNEW  EQU   SCTSBYT3
SCTSYSOU EQU   SCTSBYT3
SCTVREF  EQU   SCTSBYT3
SCTALCHK EQU   SCTSBYT3
SCTSYSNE EQU   SCTSBYT3
SCTDSNRF EQU   SCTSBYT3
SCTRECVD EQU   SCTSBYT2
SCTDEFER EQU   SCTSBYT2
SCTLABEL EQU   SCTSBYT2
SCTUNLBD EQU   SCTSBYT2
SCTJOBLB EQU   SCTSBYT2
SCTVOLAF EQU   SCTSBYT2
SIOTCATL EQU   SCTSBYT2
SIOCLUNL EQU   SCTSBYT2
SIOTJSCT EQU   SCTSBYT1
SCTUNAFF EQU   SCTSBYT1
SCTPARLM EQU   SCTSBYT1
SIOTQDSN EQU   SCTSBYT1
SIOTGDSN EQU   SCTSBYT1
SIOTCCAT EQU   SCTSBYT1
SCTSYSIN EQU   SCTSBYT1
SCTDUMMY EQU   SCTSBYT1
SIOTUNCT EQU   SCTSDISP
SIOTCTLG EQU   SCTSDISP
SIOTDLET EQU   SCTSDISP
SIOTKEEP EQU   SCTSDISP
SIOTPASS EQU   SCTSDISP
SIOTPRIV EQU   SCTSDISP
S3400DSP EQU   SCTSDISP
SIOTRETN EQU   SCTSDISP
SIOTVLCT EQU   INDMSIOT+54
SCTNMBUT EQU   INDMSIOT+53
SIOTRTRY EQU   SIOTBYT0
SIOTPUPV EQU   SIOTBYT0
SIOTNOPV EQU   SIOTBYT0
SPVTAMSG EQU   SIOTBYT0
SIOTFUDA EQU   SIOTBYT0
SIOTDYAL EQU   SIOTBYT0
SIOTSSDS EQU   SIOTBYT0
SIOTGIID EQU   INDMSIOT+50
SCTVOLCT EQU   INDMSIOT+49
SCTSPOOL EQU   INDMSIOT+48
SIOTQNAM EQU   SIOTTSTC
SIOTDSNM EQU   SIOTTSTC
SIOTTRKM EQU   SIOTTSTC
SIOTSSMG EQU   SIOTTSTC
SIOTSSGP EQU   SIOTTSTC
@NM00030 EQU   SIOTTSTC
SIOTTERM EQU   SIOTTSTC
SIOTINFC EQU   SIOTTSTC
@NM00029 EQU   SIOTBYT3
SIOTDSID EQU   SIOTBYT3
S3400OFF EQU   SIOTBYT3
SIOTJES3 EQU   SIOTBYT3
SIOCDEVT EQU   SIOTBYT3
SIOALIAS EQU   SIOTBYT3
SCTDDINO EQU   INDMSIOT+44
SIOTDDNT EQU   SIOTBYT1
SIODADSM EQU   SIOTBYT1
SIOTDADR EQU   SIOTBYT1
SIODUNAL EQU   SIOTBYT1
SIOVAMDS EQU   SIOTBYT1
SIOTHOLD EQU   SIOTBYT1
SIOTOCKP EQU   SIOTBYT1
SIOPSCNT EQU   INDMSIOT+42
SIOTREFN EQU   INDMSIOT+40
SIOTOTUN EQU   INDMSIOT+39
SIOTVRSB EQU   INDMSIOT+36
@NM00028 EQU   INDMSIOT+35
SCTPJFCB EQU   INDMSIOT+32
@NM00027 EQU   INDMSIOT+31
SCTPSIOT EQU   INDMSIOT+28
SIOTAFID EQU   INDMSIOT+26
SIOTVLSP EQU   INDMSIOT+24
SIODSNTE EQU   INDMSIOT+22
SIOTUNAF EQU   SCTUSADD
SIOTDEST EQU   INDMSIOT+12
SCTDDNAM EQU   INDMSIOT+4
SIOTTYPE EQU   INDMSIOT+3
SIOTDSKA EQU   INDMSIOT
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBFCBPE EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBMDRBA EQU   UCBMDRBF+1
UCBRV075 EQU   UCBMDRBF
UCBRV074 EQU   UCB3800X+32
UCBIMAGE EQU   UCB3800X+28
UCBFCBNM EQU   UCB3800X+24
UCBCHAR4 EQU   UCB3800X+20
UCBCHAR3 EQU   UCB3800X+16
UCBCHAR2 EQU   UCB3800X+12
UCBCHAR1 EQU   UCB3800X+8
UCBCGMID EQU   UCB3800X+4
UCBBRSTA EQU   UCBACTIV
UCBRV063 EQU   UCBACTIV
UCBRV062 EQU   UCBACTIV
UCBRV061 EQU   UCBACTIV
UCBRV060 EQU   UCBACTIV
UCBRV059 EQU   UCBACTIV
UCBRV058 EQU   UCBACTIV
UCBRV057 EQU   UCBACTIV
UCBRV050 EQU   UCB3800X+2
UCBCGMNO EQU   UCB3800X+1
UCBRV083 EQU   UCBOPTNS
UCBBRSTR EQU   UCBOPTNS
UCBRV056 EQU   UCBOPTNS
UCBRV055 EQU   UCBOPTNS
UCBRV054 EQU   UCBOPTNS
UCBRV053 EQU   UCBOPTNS
UCBRV052 EQU   UCBOPTNS
UCBRV051 EQU   UCBOPTNS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
@NM00026 EQU   @NM00025
UCBMIHSF EQU   @NM00025
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBMIHPB EQU   UCBFLP1
UCBMIHTB EQU   UCBFLP1
UCBERLOG EQU   UCBFLP1
UCBSWAPF EQU   UCBFLP1
UCBINHIO EQU   UCBFLP1
UCBNSWAP EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00024
UCBHALI  EQU   @NM00024
UCBRSV09 EQU   @NM00024
UCBRSV08 EQU   @NM00024
UCBRSV07 EQU   @NM00024
UCBRSV06 EQU   @NM00024
UCBRSV05 EQU   @NM00024
UCBRSV04 EQU   @NM00024
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBNAME  EQU   UCBOB+13
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBSIGP  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBMMSGP EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBDUC   EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00021 EQU   UCB
@NM00020 EQU   VMVUSER
VMVPROCD EQU   VMVUSER
VMVVUNTP EQU   VMVRQBLK+44
@NM00019 EQU   VMVMINFO+1
@NM00018 EQU   VMVACTON
VMVRTAIN EQU   VMVACTON
VMVDSMT  EQU   VMVACTON
VMVKEEP  EQU   VMVACTON
VMVRETCD EQU   VMVRQBLK+36
VMVDSNMP EQU   VMVRQBLK+28
VMVMVLSR EQU   VMVRQBLK+18
VMVUVLSR EQU   VMVRQBLK+12
@NM00017 EQU   VMVRQBLK+8
VMVNREQP EQU   VMVRQBLK+4
VMVOPTB4 EQU   VMVFNMAP+3
@NM00016 EQU   VMVOPTB3
VMVNUMSG EQU   VMVOPTB3
VMVCUVOL EQU   VMVOPTB3
VMVDUPVL EQU   VMVOPTB3
VMVNSPVT EQU   VMVOPTB2
VMVNSLTP EQU   VMVOPTB2
VMVSLTAP EQU   VMVOPTB2
VMVNLTAP EQU   VMVOPTB2
VMVALTAP EQU   VMVOPTB2
VMVSTRG  EQU   VMVOPTB2
VMVPUBLC EQU   VMVOPTB2
VMVPRIVT EQU   VMVOPTB2
VMVVDEND EQU   VMVOPTB1
VMVVRLBL EQU   VMVOPTB1
VMVDWTOR EQU   VMVOPTB1
VMVMTMSG EQU   VMVOPTB1
VMVMOUNT EQU   VMVOPTB1
VMVREWND EQU   VMVOPTB1
EXTRACAL EQU   FUNCMAP+1
ALCASDSN EQU   ASNMSW
ALCSUBWT EQU   WAITOKSW
ALCATRKM EQU   TRKMSW
ALCNOENQ EQU   NOTIOTNQ
ALCJOBNM EQU   MTRJOBSW
ALCHDMSG EQU   HDRMSGSW
ALCSSMSG EQU   SSEMSGSW
ALCGENER EQU   GENLOKSW
ALCCANCL EQU   CCLMNTSW
ALCOFFDV EQU   OFFDEVSW
ALCMSSTM EQU   MSSTRMSW
ALCWTVOL EQU   VWAITSW
ALCWTUNT EQU   UWAITSW
ALCMSGLV EQU   WRTMSGSW
ALCMOUNT EQU   VOLMNTSW
AQMQBPTR EQU   AQMPARAM+24
AQMPFLG  EQU   AQMNORMP
AQMCANCP EQU   AQMPARAM+16
AQMLENGT EQU   AQMPARAM+12
AQMASID  EQU   AQMPARAM+8
GRPWPTR  EQU   GRPCOUNT+12
GRPEXCS  EQU   GRPCOUNT+8
@NM00015 EQU   CVRGPLST+13
@NM00014 EQU   CVRFLG3
CVRFORCI EQU   CVRFLG3
CVRGSKP  EQU   CVRFLG3
CVRBOUND EQU   CVRGPLST+10
CVRGALL  EQU   CVRGPLST+8
CVRGRPID EQU   CVRGPLST+4
CVRGCPTR EQU   CVRGPLST
@NM00013 EQU   CVRRQLST+26
@NM00012 EQU   CVRFLG2+1
CVRDUPLI EQU   CVRFLG2+1
CVRWMOVE EQU   CVRFLG2
CVRIGNOR EQU   CVRFLG2
CVRMULTI EQU   CVRFLG2
CVRSCRTH EQU   CVRFLG2
CVRFULL  EQU   CVRFLG2
CVRREACH EQU   CVRFLG2
CVRRUSED EQU   CVRFLG2
CVRGNEXT EQU   CVRRQLST+12
CVRPTS   EQU   CVRMIN
CVRNEED  EQU   CVRRQLST+8
@NM00011 EQU   CVRPARM+9
@NM00010 EQU   CVRFLG1
CVRGRPLK EQU   CVRPARM+6
CVRRQPTR EQU   CVRPARM
ALGGLSTP EQU   ALGPTRS+8
ALCPROCN EQU   NAMES+16
LOJSSNMP EQU   ALCWA+164
SSERBLKP EQU   ALCWA+160
GROUPSZ  EQU   ALCWA+156
GRIDPTR  EQU   ALCWA+152
ALCNUCBS EQU   ALCWA+148
LGENLOCK EQU   ALCWA+124
TCBP     EQU   ALCWA+116
@NM00009 EQU   @NM00008
NODEVERR EQU   @NM00008
NEEDRCVY EQU   @NM00008
ALCWAREC EQU   @NM00008
WAITIGEN EQU   @NM00008
UNITRECS EQU   @NM00008
ALCWADUL EQU   INDICATE
ALCWISAM EQU   INDICATE
DSSUNIT  EQU   INDICATE
DSSTAPE  EQU   INDICATE
PRIVASUM EQU   INDICATE
INDREQU  EQU   INDICATE
INDWAIT  EQU   INDICATE
RIMTABCT EQU   ALCWA+104
RIMTABLN EQU   ALCWA+100
RIMTABP  EQU   ALCWA+96
ALGTABSZ EQU   ALCWA+92
@NM00007 EQU   ALCWA+78
LTUNITID EQU   ALCWA+76
TOTVOLUN EQU   CNTABLE+44
NUMREQS  EQU   CNTABLE+40
OTHEREQS EQU   CNTABLE+32
SUBSREQS EQU   CNTABLE+28
STRGREQS EQU   CNTABLE+24
PUBLREQS EQU   CNTABLE+20
PVTNREQS EQU   CNTABLE+16
SPECREQS EQU   CNTABLE+12
TPREQS   EQU   CNTABLE+8
VAMREQS  EQU   CNTABLE+4
DMYREQS  EQU   CNTABLE
JSCBPTR  EQU   ALCWA+12
WASIZE   EQU   ALCWA
@NM00006 EQU   VUGRLENT+5
@NM00005 EQU   VUGRLFLG
VUGRALCD EQU   VUGRLFLG
VUGRLIDS EQU   VUGRLENT
VUCBS    EQU   VUPOOL+4
VUPOOL#  EQU   VUPOOL
VOLUNTID EQU   VOLUNTAB+10
VURCVYPR EQU   VOLSTATD
VUVLUNIQ EQU   VOLSTATD
VUDMUNIQ EQU   VOLSTATD
VUUNALSW EQU   VOLSTATD
VUDMNDAL EQU   VOLSTATD
VUDMNDOF EQU   VOLSTATD
VUREALOC EQU   VOLSTATD
VUMUGDON EQU   VOLSTATD
@NM00004 EQU   VOLSTATC
@NM00003 EQU   VOLSTATC
VURECVRY EQU   VOLSTATC
VOLURREQ EQU   VOLSTATC
VOLGRREQ EQU   VOLSTATC
VOLDAREQ EQU   VOLSTATC
VOLCOREQ EQU   VOLSTATC
VOLTAREQ EQU   VOLSTATC
VUAFFWRK EQU   VOLSTATB
VUVINELG EQU   VOLSTATB
VUDADSME EQU   VOLSTATB
VUDNALOC EQU   VOLSTATB
VUPROCED EQU   VOLSTATB
VDEVREQD EQU   VOLSTATB
VOLMNTD  EQU   VOLSTATB
VOLDEFER EQU   VOLSTATA
VUDADSM  EQU   VOLSTATA
VOLRESVE EQU   VOLSTATA
VOLNSHR  EQU   VOLSTATA
VOLSTG   EQU   VOLSTATA
VOLSPEC  EQU   VOLSTATA
VOLPRV   EQU   VOLSTATA
VOLPUB   EQU   VOLSTATA
EDLNOJES EQU   EDLINDIC
EDLVOLAF EQU   EDLINDIC
EDLENQ   EQU   EDLINDIC
EDLDADSM EQU   EDLINDIC
EDLALCD  EQU   EDLINDIC
EDLUCBAD EQU   EDLUCBL
EDLJINEL EQU   EDLGRFLG
EDLGRID  EQU   EDLGNTRY+12
EDLLISTP EQU   EDLGNTRY+8
EDLUCBNO EQU   EDLGNTRY+4
EDLNXGRP EQU   EDLGNTRY
EINDEVTP EQU   EDLDTFLG
@NM00002 EQU   EDLENTRY+18
EDLNSCNT EQU   EDLENTRY+16
EDLGRPTR EQU   EDLENTRY+12
EDLGRPNO EQU   EDLENTRY+8
EDLDEVT  EQU   EDLENTRY+4
EDLNXTNT EQU   EDLENTRY
EDLMGENS EQU   EDLUVFLG
EDLVAM   EQU   EDLUVFLG
EDLGMTP  EQU   EDLHDR+12
EDLFGENP EQU   EDLHDR+8
EDLGENNO EQU   EDLHDR+4
EDLLUV   EQU   EDLHDR
GRPMASK  EQU   GMTENTRY
GMTENTNO EQU   GMTHDR
EUCBENLN EQU   EUCBHDR+4
EUCBENNO EQU   EUCBHDR
GRPID    EQU   GRPENTRY
GRPENTLN EQU   GRPHDR+4
GRPENTNO EQU   GRPHDR
GRPTR    EQU   GRPTRTAB
GENGRPTR EQU   GENENTRY+8
GENGRPNO EQU   GENENTRY+4
GENDEVT  EQU   GENENTRY
GENENTLN EQU   GENHDR+4
GENENTNO EQU   GENHDR
LUVAGMTP EQU   LUVENTRY+28
@NM00001 EQU   LUVFLAGS
LUVMGENS EQU   LUVFLAGS
LUVAGMSK EQU   LUVFLAGS
LUVVAM   EQU   LUVFLAGS
LUVGENP  EQU   LUVENTRY+20
LUVGENNO EQU   LUVENTRY+16
LUVALUE  EQU   LUVENTRY+8
UNITNAME EQU   LUVENTRY
LUVENTLN EQU   LUVHDR+4
LUVENTNO EQU   LUVHDR
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00112 EQU   @RC00109
@RC00154 EQU   @RC00150
@RC00216 EQU   @RC00202
@RC00104 EQU   @RC00088
BITOFF   EQU   @EL00002
@RC00114 EQU   @RC00112
@RC00218 EQU   @RC00216
@RC00223 EQU   @RC00216
@RC00172 EQU   @RC00104
@RC00116 EQU   @RC00114
@RC00245 EQU   @RC00172
@RC00261 EQU   @RC00172
@RC00266 EQU   @RC00261
@ENDDATA EQU   *
         END   IEFAB491,(C'PLS1209',0701,78124)
