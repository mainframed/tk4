         TITLE 'IEFAB496 - VERIFY CONTROL RTN                          *
                        '
IEFAB496 CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'IEFAB496  75.314'                              01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @10,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@10                                      01S0001
         L     @00,@SIZDATD                                     01S0001
         GSPACE   R,LV=(0)
         LR    @09,@01                                          01S0001
         USING @DATD,@09                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         LM    @00,@01,20(@13)                                  01S0001
         ST    @09,8(,@13)                                      01S0001
         LR    @13,@09                                          01S0001
         MVC   @PC00001(20),0(@01)                              01S0001
*RETCODE = SUCCESS;                    /*INITIALIZE RETURN CODE      */
         SLR   RETCODE,RETCODE                                  01S0054
*POSTSW = OFF;                         /*INITIALIZE SWITCH           */
         NI    POSTSW,B'01111111'                               01S0055
*READYSW = OFF;                        /*INITIALIZE SWITCH   @YM06182*/
         NI    READYSW,B'01111111'                              01S0056
*VMVREQBP = REQUESTP;                  /*PTR TO FIRST REQUEST BLOCK  */
         L     @12,@PC00001                                     01S0057
         L     VMVREQBP,REQUESTP(,@12)                          01S0057
*JOBNAMEP = VMVJBNMP;                  /*PTR TO JOBNAME              */
         MVC   JOBNAMEP(4),VMVJBNMP(VMVREQBP)                   01S0058
*STEPNAMP = VMVJSNMP;                  /*PTR TO STEPNAME             */
         MVC   STEPNAMP(4),VMVJSNMP(VMVREQBP)                   01S0059
*DO WHILE(VMVREQBP ^= ZERO             /*SCAN REQUEST BLOCKS         */
*     & VERFYCNT ^= ZERO);             /*UNTIL ALL VERIFYS PROCESSED */
         B     @DE00060                                         01S0060
@DL00060 DS    0H                                               01S0061
*  IF (VMVVRLBL = ON                   /*IF VERIFY LABEL             */
*    × VMVVDEND = ON)                  /*OR VERIFY DEVICE END        */
*    & VMVDUPVL = OFF THEN             /*NOT DUPLICATE REQUEST       */
         TM    VMVVRLBL(VMVREQBP),B'00000011'                   01S0061
         BZ    @RF00061                                         01S0061
         TM    VMVDUPVL(VMVREQBP),B'10000000'                   01S0061
         BNZ   @RF00061                                         01S0061
*    DO;                                                        01S0062
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - B496SRUP                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - SEARCH AND UPDATE MOUNT ENTRIES RTN.          */
*/*                                                                  */
*/* FUNCTION - SEARCHES MOUNT ENTRIES FOR A UCB ADDRESS MATCHING     */
*/*            THE ONE REQUESTED IN THE VM&V REQUEST BLOCK,WHEN A    */
*/*            MATCH IS FOUND THE DEVICE ENTRY PORTION OF THE MOUNT  */
*/*            ENTRY IS UPDATED WITH VERIFY INFORMATION.THE ATTENTION*/
*/*            TABLE INDEX IS SET IN THE UCB TO ALLOW WAITING ON     */
*/*            DEVICE END,FOR THOSE UNITS NOT YET READY.             */
*/*   OPERATION -                                                    */
*/*              SETS UP THE PARAMETER LIST AND CALLS IEFAB498 TO    */
*/*              SEARCH THE MVCA CHAIN FOR THE MVCA CORRESPONDING TO */
*/*              THIS CALLER'S ASID.(SEE FUNCTION ALSO).             */
*/*                                                                  */
*/* ENTRY POINT -(INLINE SUBROUTINE - ENTERED AT THE TOP)            */
*/*                                                                  */
*/*   PURPOSE - SEARCH AND UPDATE MOUNT ENTRIES.                     */
*/*                                                                  */
*/*                                                                  */
*/* INPUT - ASID -ADDRESS SPACE IDENTIFIER                           */
*/*             VMVUCBP -PTR TO REQUESTED UCB.                       */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE - EXITS AT BOTTOM)            */
*/*                                                                  */
*/*   CONDITION - MVCAX,MOUNT ENTRY,UCB UPDATED FOR VERIFY REQUEST.  */
*/*                                                                  */
*/*   OUTPUT - MVNUMWTS UPDATED - NUMBER OF VERIFY WAITS(MVCAX).     */
*/*            MTVRYPND - BIT SET TO INDICATE WAIT(MOUNT ENTRY).     */
*/*            UCBATI - ATTENTION INDEX PUT IN UCB(IF NOT READY)     */
*/*            MTVRYLBL - BIT SET IF VERIFY LABEL(MOUNT ENTRY).      */
*/*            READYSW  - SET TO 1 IF ANY UNIT READY         @YM06182*/
*/*                                                                  */
*/*   RETURN CODE - (NONE)                                           */
*/*                                                                  */
*/********************************************************************/
*PARMAREA = PARMAREA && PARMAREA;      /*CLEAR PARM AREA FOR IEFAB498*/
         XC    PARMAREA(8),PARMAREA                             02S0063
*SRCHINDC = ON;                        /*INDICATE SEARCH             */
         OI    SRCHINDC,B'00100000'                             02S0064
*INPTASID = ASID;                      /*ASSIGN ASID                 */
         L     @12,@PC00001+4                                   02S0065
         MVC   INPTASID(2),ASID(@12)                            02S0065
*PARMPTR = ADDR(PARMAREA);             /*PARAMETER AREA PTR          */
         LA    @12,PARMAREA                                     02S0066
         ST    @12,PARMPTR                                      02S0066
*CALL IEFAB498(PARMPTR,VMVEXITP);      /*CALL MVCA CHAIN PROCESSOR
*                                        TO SEARCH FOR ASID          */
         LA    @12,PARMPTR                                      02S0067
         ST    @12,@AL00001                                     02S0067
         L     @12,@PC00001+16                                  02S0067
         ST    @12,@AL00001+4                                   02S0067
         L     @15,@CV00918                                     02S0067
         LA    @01,@AL00001                                     02S0067
         BALR  @14,@15                                          02S0067
*MVCAPTR = MVCAMPTR;                   /*PTR TO MVCA FOR THIS TASK   */
         L     @12,MVCAMPTR                                     02S0068
         ST    @12,MVCAPTR                                      02S0068
*MTENTPTR = MVENTRYP;                  /*PTR TO FIRST MOUNT ENTRY    */
         L     @12,MVCAXPTR(,@12)                               02S0069
         L     MTENTPTR,MVENTRYP(,@12)                          02S0069
*VERCHKSW = OFF;                       /*INITIALIZE SWITCH           */
         NI    VERCHKSW,B'01111111'                             02S0070
*DO WHILE(MTENTPTR ^= ZERO             /*SCAN MOUNT ENTRIES          */
*      & VERCHKSW = OFF);              /*UNTIL UCB MATCH FOUND IN A
*                                        DEVICE ENTRY                */
         B     @DE00071                                         02S0071
@DL00071 DS    0H                                               02S0072
*  MTNODEVE = (MTLENGTH - LENGTH(MTENBASE)) /                   02S0072
*  (LENGTH(MTDEVENT) + LENGTH(MTDOMIDS)); /*NO.OF DEVICE ENTRIES     */
         LH    @00,MTLENGTH(,MTENTPTR)                          02S0072
         SH    @00,@CH00924                                     02S0072
         SRDA  @00,32                                           02S0072
         D     @00,@CF00195                                     02S0072
         ST    @01,MTNODEVE                                     02S0072
*  DO I = ONE TO MTNODEVE BY ONE       /*SCAN MOUNT ENTRY UNTIL UCB  */
*    WHILE(VERCHKSW = OFF);            /*MATCH FOUND IN A DEVICE ENT.*/
         LA    @12,1                                            02S0073
         STH   @12,I                                            02S0073
         B     @DE00073                                         02S0073
@DL00073 TM    VERCHKSW,B'10000000'                             02S0073
         BNZ   @DC00073                                         02S0073
*    IF MTUCBPTR(I) = VMVUCBP THEN     /*IF UCB REQUESTED MATCHES    */
         MH    @12,@CH00128                                     02S0074
         L     @11,MTDEVPTR(,MTENTPTR)                          02S0074
         ST    @12,@TF00001                                     02S0074
         ALR   @12,@11                                          02S0074
         AL    @12,@CF00929                                     02S0074
         CLC   MTUCBPTR-1(3,@12),VMVUCBP(VMVREQBP)              02S0074
         BNE   @RF00074                                         02S0074
*      DO;                             /*DEVICE ENTRY UCB            */
*        MVNUMWTS = MVNUMWTS + ONE;    /*NUMBER OF VERIFY WAITS      */
         L     @12,MVCAPTR                                      02S0076
         L     @12,MVCAXPTR(,@12)                               02S0076
         LA    @06,1                                            02S0076
         AH    @06,MVNUMWTS(,@12)                               02S0076
         STH   @06,MVNUMWTS(,@12)                               02S0076
*        MTVRYPND(I) = ON;             /*INDICATE VERIFY WAIT        */
         LR    @12,@11                                          02S0077
         AL    @12,@TF00001                                     02S0077
         AL    @12,@CF00930                                     02S0077
         OI    MTVRYPND(@12),B'10000000'                        02S0077
*        VERCHKSW = ON;                /*INDICATE UCB PTR MATCH      */
         OI    VERCHKSW,B'10000000'                             02S0078
*        UCBPTR = VMVUCBP;             /*ADDRESS UCB                 */
         SLR   @12,@12                                          02S0079
         ICM   @12,7,VMVUCBP(VMVREQBP)                          02S0079
         ST    @12,UCBPTR                                       02S0079
*        MTSAVNDX(I) = UCBATI;         /*SAVE INDEX             02S0080
*                                        TO BE RESTORED THERE@ZA04550*/
         L     @12,UCBEXTPT(,@12)                               02S0080
         SLR   @06,@06                                          02S0080
         IC    @06,UCBATI(,@12)                                 02S0080
         L     @12,@TF00001                                     02S0080
         AL    @11,@CF00932                                     02S0080
         STC   @06,MTSAVNDX-8(@12,@11)                          02S0080
*         DO; /*MODESET  KEYADDR(ZERO)*/                        02S0081
*           SPKA (ZERO); /*SET PSW KEY*/                        02S0082
         SLR   @12,@12                                          02S0082
         SPKA  0(@12)                                           02S0082
*         END; /*MODESET  KEYADDR(ZERO)*/      /*GET KEY ZERO   02S0083
*      */                                                       02S0083
*         DO; /* SETLOCK (OBTAIN) MODE(UNCOND) TYPE(LOCAL) REGS(USE) RE
*ATED(UCB,IEFAB496(B496SRUP)) */                                02S0084
*           RFY (GPR11P,GPR12P,GPR13P,GPR14P) RSTD;             02S0085
*           RFY (GPR15P,GPR00P,GPR01P) RSTD;                    02S0086
*           GPR15P = GPR11P; /* SAVE REG. 11 IN REG. 15. */     02S0087
         LR    GPR15P,GPR11P                                    02S0087
*           GPR00P = GPR12P; /* SAVE REG. 12 IN REG. 0. */      02S0088
         LR    GPR00P,GPR12P                                    02S0088
*           GPR01P = GPR13P; /* SAVE REG. 13 IN REG. 1. */      02S0089
         LR    GPR01P,GPR13P                                    02S0089
*           GPR13P = PSALITA; /* ADDRESS OF LOCK INTERFACE TABLE. */
         L     GPR13P,PSALITA                                   02S0090
*           GEN(LM GPR11P,GPR13P,576(GPR13P)); /* LOAD LOCKWORD, CLHT A
*D ENTRY ADRS. */                                               02S0091
         LM GPR11P,GPR13P,576(GPR13P)
*           GEN(BALR GPR14P,GPR13P); /* BALR TO SETLOCK RTN. */ 02S0092
         BALR GPR14P,GPR13P
*           GPR11P = GPR15P; /* RESTORE REG. 11. */             02S0093
         LR    GPR11P,GPR15P                                    02S0093
*           GPR15P = GPR13P; /* SAVE RETURN CODE. */            02S0094
         LR    GPR15P,GPR13P                                    02S0094
*           GPR12P = GPR00P; /* RESTORE REG. 12 */              02S0095
         LR    GPR12P,GPR00P                                    02S0095
*           GPR13P = GPR01P; /* RESTORE REG. 13. */             02S0096
         LR    GPR13P,GPR01P                                    02S0096
*           RFY(GPR15P,GPR00P,GPR01P) UNRSTD;                   02S0097
*           RFY (GPR11P,GPR12P,GPR13P,GPR14P) UNRSTD;           02S0098
*         END; /* SETLOCK (OBTAIN) MODE(UNCOND) TYPE(LOCAL) REGS(USE) R
*LATED(UCB,IEFAB496(B496SRUP)) *//*GET LOCAL LOCK           */  02S0099
*         DO; /* SETLOCK (OBTAIN) MODE(UNCOND) TYPE(CMS) REGS(USE) RELA
*ED(UCB,IEFAB496(B496SRUP)) */                                  02S0100
*           RFY (GPR11P,GPR12P,GPR13P,GPR14P) RSTD;             02S0101
*           RFY (GPR15P,GPR00P,GPR01P) RSTD;                    02S0102
*           GPR15P = GPR11P; /* SAVE REG. 11 IN REG. 15. */     02S0103
         LR    GPR15P,GPR11P                                    02S0103
*           GPR00P = GPR12P; /* SAVE REG. 12 IN REG. 0. */      02S0104
         LR    GPR00P,GPR12P                                    02S0104
*           GPR01P = GPR13P; /* SAVE REG. 13 IN REG. 1. */      02S0105
         LR    GPR01P,GPR13P                                    02S0105
*           GPR13P = PSALITA; /* ADDRESS OF LOCK INTERFACE TABLE. */
         L     GPR13P,PSALITA                                   02S0106
*           GEN(LM GPR11P,GPR13P,540(GPR13P)); /* LOAD LOCKWORD, CLHT A
*D ENTRY ADRS. */                                               02S0107
         LM GPR11P,GPR13P,540(GPR13P)
*           GEN(BALR GPR14P,GPR13P); /* BALR TO SETLOCK RTN. */ 02S0108
         BALR GPR14P,GPR13P
*           GPR11P = GPR15P; /* RESTORE REG. 11. */             02S0109
         LR    GPR11P,GPR15P                                    02S0109
*           GPR15P = GPR13P; /* SAVE RETURN CODE. */            02S0110
         LR    GPR15P,GPR13P                                    02S0110
*           GPR12P = GPR00P; /* RESTORE REG. 12 */              02S0111
         LR    GPR12P,GPR00P                                    02S0111
*           GPR13P = GPR01P; /* RESTORE REG. 13. */             02S0112
         LR    GPR13P,GPR01P                                    02S0112
*           RFY(GPR15P,GPR00P,GPR01P) UNRSTD;                   02S0113
*           RFY (GPR11P,GPR12P,GPR13P,GPR14P) UNRSTD;           02S0114
*         END; /* SETLOCK (OBTAIN) MODE(UNCOND) TYPE(CMS) REGS(USE) REL
*TED(UCB,IEFAB496(B496SRUP)) *//*GET CMS LOCK             */    02S0115
*        UCBATI = ATTINDEX;            /*ATTENTION TABLE INDEX IN UCB*/
         L     @12,UCBPTR                                       02S0116
         L     @11,UCBEXTPT(,@12)                               02S0116
         MVC   UCBATI(1,@11),ATTINDEX                           02S0116
*        IF UCBNOTRD = ON THEN         /*IF UNIT NOT READY           */
         TM    UCBNOTRD(@12),B'01000000'                        02S0117
         BNO   @RF00117                                         02S0117
*          POSTSW = ON;                /*DEVICE NOT READY            */
         OI    POSTSW,B'10000000'                               02S0118
*        ELSE                          /*                    @YM06182*/
*          READYSW = ON;               /*INDICATE READY      @YM06182*/
         B     @RC00117                                         02S0119
@RF00117 OI    READYSW,B'10000000'                              02S0119
*         DO; /* SETLOCK (RELEASE) TYPE(CMS) REGS(USE) RELATED(UCB,IEFA
*496(B496SRUP)) */                                              02S0120
@RC00117 DS    0H                                               02S0121
*           RFY (GPR11P,GPR12P,GPR13P,GPR14P) RSTD;             02S0121
*           RFY (GPR15P,GPR00P,GPR01P) RSTD;                    02S0122
*           GPR15P = GPR11P; /* SAVE REG. 11 IN REG. 15. */     02S0123
         LR    GPR15P,GPR11P                                    02S0123
*           GPR00P = GPR12P; /* SAVE REG. 12 IN REG. 0. */      02S0124
         LR    GPR00P,GPR12P                                    02S0124
*           GPR01P = GPR13P; /* SAVE REG. 13 IN REG. 1. */      02S0125
         LR    GPR01P,GPR13P                                    02S0125
*           GPR13P = PSALITA; /* ADDRESS OF LOCK INTERFACE TABLE. */
         L     GPR13P,PSALITA                                   02S0126
*           GEN(LM GPR11P,GPR13P,552(GPR13P)); /* LOAD LOCKWORD, CLHT A
*D ENTRY ADRS. */                                               02S0127
         LM GPR11P,GPR13P,552(GPR13P)
*           GEN(BALR GPR14P,GPR13P); /* BALR TO SETLOCK RTN. */ 02S0128
         BALR GPR14P,GPR13P
*           GPR11P = GPR15P; /* RESTORE REG. 11. */             02S0129
         LR    GPR11P,GPR15P                                    02S0129
*           GPR15P = GPR13P; /* SAVE RETURN CODE. */            02S0130
         LR    GPR15P,GPR13P                                    02S0130
*           GPR12P = GPR00P; /* RESTORE REG. 12 */              02S0131
         LR    GPR12P,GPR00P                                    02S0131
*           GPR13P = GPR01P; /* RESTORE REG. 13. */             02S0132
         LR    GPR13P,GPR01P                                    02S0132
*           RFY(GPR15P,GPR00P,GPR01P) UNRSTD;                   02S0133
*           RFY (GPR11P,GPR12P,GPR13P,GPR14P) UNRSTD;           02S0134
*         END; /* SETLOCK (RELEASE) TYPE(CMS) REGS(USE) RELATED(UCB,IEF
*B496(B496SRUP)) */ /*RELEASE CMS LOCKS       */                02S0135
*         DO; /* SETLOCK (RELEASE) TYPE(LOCAL) REGS(USE) RELATED(UCB,IE
*AB496(B496SRUP)) */                                            02S0136
*           RFY (GPR11P,GPR12P,GPR13P,GPR14P) RSTD;             02S0137
*           RFY (GPR15P,GPR00P,GPR01P) RSTD;                    02S0138
*           GPR15P = GPR11P; /* SAVE REG. 11 IN REG. 15. */     02S0139
         LR    GPR15P,GPR11P                                    02S0139
*           GPR00P = GPR12P; /* SAVE REG. 12 IN REG. 0. */      02S0140
         LR    GPR00P,GPR12P                                    02S0140
*           GPR01P = GPR13P; /* SAVE REG. 13 IN REG. 1. */      02S0141
         LR    GPR01P,GPR13P                                    02S0141
*           GPR13P = PSALITA; /* ADDRESS OF LOCK INTERFACE TABLE. */
         L     GPR13P,PSALITA                                   02S0142
*           GEN(LM GPR11P,GPR13P,588(GPR13P)); /* LOAD LOCKWORD, CLHT A
*D ENTRY ADRS. */                                               02S0143
         LM GPR11P,GPR13P,588(GPR13P)
*           GEN(BALR GPR14P,GPR13P); /* BALR TO SETLOCK RTN. */ 02S0144
         BALR GPR14P,GPR13P
*           GPR11P = GPR15P; /* RESTORE REG. 11. */             02S0145
         LR    GPR11P,GPR15P                                    02S0145
*           GPR15P = GPR13P; /* SAVE RETURN CODE. */            02S0146
         LR    GPR15P,GPR13P                                    02S0146
*           GPR12P = GPR00P; /* RESTORE REG. 12 */              02S0147
         LR    GPR12P,GPR00P                                    02S0147
*           GPR13P = GPR01P; /* RESTORE REG. 13. */             02S0148
         LR    GPR13P,GPR01P                                    02S0148
*           RFY(GPR15P,GPR00P,GPR01P) UNRSTD;                   02S0149
*           RFY (GPR11P,GPR12P,GPR13P,GPR14P) UNRSTD;           02S0150
*         END; /* SETLOCK (RELEASE) TYPE(LOCAL) REGS(USE) RELATED(UCB,I
*FAB496(B496SRUP)) */ /*RELEASE LOCAL LOCKS     */              02S0151
*         DO; /*MODESET  EXTKEY(SCHED)*/                        02S0152
*           SPKA (16); /*SET PSW KEY*/                          02S0153
         LA    @12,16                                           02S0153
         SPKA  0(@12)                                           02S0153
*         END; /*MODESET  EXTKEY(SCHED)*/       /*GET SCHED KEY 02S0154
*      */                                                       02S0154
*        IF VMVVRLBL = ON THEN         /*IF VERIFY LABEL IN REQ.BLK  */
         TM    VMVVRLBL(VMVREQBP),B'00000010'                   02S0155
         BNO   @RF00155                                         02S0155
*          DO;                                                  02S0156
*            MTVRYLBL(I) = ON;         /*INDICATE VERIFY LABEL IN
*                                        DEVICE ENTRY                */
         LH    @12,I                                            02S0157
         MH    @12,@CH00128                                     02S0157
         L     @11,MTDEVPTR(,MTENTPTR)                          02S0157
         ALR   @11,@12                                          02S0157
         AL    @11,@CF00930                                     02S0157
         OI    MTVRYLBL(@11),B'01000000'                        02S0157
*          END;                                                 02S0158
*        ELSE;                         /*NOT VERIFY LABEL            */
@RF00155 DS    0H                                               02S0160
*      END;                                                     02S0160
*    ELSE;                             /*REQUEST UCB PTR NOT IN MOUNT
*                                        ENTRY                       */
@RF00074 DS    0H                                               02S0162
*  END;                                                         02S0162
         LA    @12,1                                            02S0162
         AH    @12,I                                            02S0162
         STH   @12,I                                            02S0162
@DE00073 C     @12,MTNODEVE                                     02S0162
         BNH   @DL00073                                         02S0162
@DC00073 DS    0H                                               02S0163
*  MTENTPTR = MTNXTPTR;                /*PTR TO NEXT MOUNT ENTRY     */
         L     MTENTPTR,MTNXTPTR(,MTENTPTR)                     02S0163
*END;                                                           02S0164
@DE00071 LTR   MTENTPTR,MTENTPTR                                02S0164
         BZ    @DC00071                                         02S0164
         TM    VERCHKSW,B'10000000'                             02S0164
         BZ    @DL00071                                         02S0164
@DC00071 DS    0H                                               02S0165
*      VERFYCNT = VERFYCNT - ONE;      /*DECREMENT VERIFY COUNT      */
         L     @12,@PC00001+12                                  01S0165
         L     @11,VERFYCNT(,@12)                               01S0165
         BCTR  @11,0                                            01S0165
         ST    @11,VERFYCNT(,@12)                               01S0165
*    END;                                                       01S0166
*  ELSE;                               /*NOT VERIFY REQUEST          */
@RF00061 DS    0H                                               01S0168
*  VMVREQBP = VMVNREQP;                /*PTR TO NEXT REQUEST         */
         L     VMVREQBP,VMVNREQP(,VMVREQBP)                     01S0168
*END;                                                           01S0169
@DE00060 SLR   @12,@12                                          01S0169
         CR    VMVREQBP,@12                                     01S0169
         BE    @DC00060                                         01S0169
         L     @11,@PC00001+12                                  01S0169
         C     @12,VERFYCNT(,@11)                               01S0169
         BNE   @DL00060                                         01S0169
@DC00060 DS    0H                                               01S0170
*ECB3PTR = ADDR(MVTPECB);              /*PTR TO TAPE WTOR REPLY ECB  */
         L     @12,MVCAPTR                                      01S0170
         L     @12,MVCAXPTR(,@12)                               01S0170
         LA    @11,MVTPECB(,@12)                                01S0170
         ST    @11,ECB3PTR                                      01S0170
*ECB1PTR = ADDR(MVDEVECB);             /*PTR TO DEVICE END ECB       */
         ST    @12,ECB1PTR                                      01S0171
*IF MVWTORSW = ON THEN                 /*IF WTOR REQUEST             */
         TM    MVWTORSW(@12),B'01000000'                        01S0172
         BNO   @RF00172                                         01S0172
*  DO;                                                          01S0173
*    ECB2PTR = ADDR(MVDAECB);          /*PTR TO DA WTOR REPLY ECB    */
         LA    @12,MVDAECB(,@12)                                01S0174
         ST    @12,ECB2PTR                                      01S0174
*    HIORDER3 = ON;                    /*SET HI ORDER FOR END OF LIST*/
         OI    HIORDER3,B'10000000'                             01S0175
*  END;                                                         01S0176
*ELSE                                  /*NOT WTOR REQUEST            */
*  DO;                                                          01S0177
         B     @RC00172                                         01S0177
@RF00172 DS    0H                                               01S0178
*    ECB2PTR = ADDR(CANCLECB);         /*PTR TO CANCEL ECB           */
         L     @12,@PC00001+8                                   01S0178
         ST    @12,ECB2PTR                                      01S0178
*    HIORDER2 = ON;                    /*SET HI ORDER FOR END OF LIST*/
         OI    HIORDER2,B'10000000'                             01S0179
*  END;                                                         01S0180
*EXITINDC = OFF;                       /*INITIALIZE SWITCH           */
@RC00172 NI    EXITINDC,B'01111111'                             01S0181
*DOMSW = OFF;                          /*INITIALIZE SWITCH           */
         NI    DOMSW,B'01111111'                                01S0182
*DADOMVAL = DADOMVAL && DADOMVAL;      /*CLEAR D A DOM ID            */
         XC    DADOMVAL(4),DADOMVAL                             01S0183
*TPDOMVAL = TPDOMVAL && TPDOMVAL;      /*CLEAR TAPE DOM ID           */
         XC    TPDOMVAL(4),TPDOMVAL                             01S0184
*DO WHILE(EXITINDC = OFF);             /*DO UNTIL NO MORE WAITS      */
         B     @DE00185                                         01S0185
@DL00185 DS    0H                                               01S0186
*  IF POSTSW = ON & READYSW = OFF THEN /*WAITING INDICATED   @YM06182*/
         TM    POSTSW,B'10000000'                               01S0186
         BNO   @RF00186                                         01S0186
         TM    READYSW,B'10000000'                              01S0186
         BNZ   @RF00186                                         01S0186
*    DO;                               /*IF YES THEN                 */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - B496WAIT                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - ISSUE WAIT ON ECBLIST                         */
*/*                                                                  */
*/* FUNCTION - ISSUE WAIT ON ECBLIST                                 */
*/*                                                                  */
*/*   OPERATION - SETS REGISTER ONE TO ADDRESS OF ECBLIST AND ISSUE  */
*/*               WAIT MACRO.                                        */
*/*                                                                  */
*/*                                                                  */
*/*                                                                  */
*/* ENTRY POINT -(INLINE SUBROUTINE - ENTERED AT THE TOP)            */
*/*                                                                  */
*/*   PURPOSE - TO ISSUE WAIT ON ECBLIST                             */
*/*                                                                  */
*/*                                                                  */
*/* INPUT - ECBLIST CONTAINING THE FOLLOWING:                        */
*/*           1) DEVICE END ECB.                                     */
*/*           2) CANCEL ECB OR IF A WTOR REQUEST THE DA WTOR         */
*/*              REPLY ECB AND THE TAPE WTOR ECB.                    */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE - EXITS AT BOTTOM)            */
*/*                                                                  */
*/*   CONDITION - WAIT POSTED                                        */
*/*                                                                  */
*/*   OUTPUT - NONE                                                  */
*/*                                                                  */
*/*                                                                  */
*/*   RETURN CODE - (NONE)                                           */
*/*                                                                  */
*/********************************************************************/
*RFY (REG1) RSTD;                                               02S0188
*REG1 = ADDR(VECBLIST);                /*ADDRESS ECBLIST             */
         LA    REG1,VECBLIST                                    02S0189
*GEN (WAIT ECBLIST=(1),LONG=YES);      /*WAIT ON ECBLIST     @YM05089*/
         WAIT ECBLIST=(1),LONG=YES
*RFY (REG1) UNRSTD;                                             02S0191
*    END;                                                       01S0192
*  ELSE;                               /*ONE OR MORE DEVICES READY   */
@RF00186 DS    0H                                               01S0194
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - B496POST                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - HANDLE ECB POST                               */
*/*                                                                  */
*/* FUNCTION - RECEIVES CONTROL IF ALL REQ'D UNITS WERE FOUND TO BE  */
*/*            READY BEFORE WAITING OR IF A WAIT WAS DONE AND ONE OR */
*/*            MORE OF ECB'S WERE POSTED.IF THE CANCEL ECB WAS POSTED*/
*/*            OR IF THE OPERATOR REPLIED 'NO' TO A MOUNT WTOR THEN  */
*/*            IEFAB49A WILL LATER BE CALLED TO DOMR AND CLEAN-UP.IF */
*/*            ONLY THE DEVICE END ECB WAS POSTED THE DEVICE END RTN */
*/*            IS CALLED.                                            */
*/*   OPERATION -                                                    */
*/*              THE OPERATION IS DOCUMENTED BY THE CODE ITSELF.     */
*/*                                                                  */
*/*                                                                  */
*/*                                                                  */
*/* ENTRY POINT -(INLINE SUBROUTINE - ENTERED AT THE TOP)            */
*/*                                                                  */
*/*   PURPOSE - TO HANDLE ECB POST.                                  */
*/*                                                                  */
*/*                                                                  */
*/* INPUT - POSTECB1 - CANCEL ECB OR IF WTOR REQ. DA WTOR REPLY      */
*/*                    ECB.                                          */
*/*         POSTECB2 - IF WTOR REQUEST TAPE WTOR REPLY ECB.          */
*/*                                                                  */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE - EXITS AT BOTTOM)            */
*/*                                                                  */
*/*   CONDITION - FUNCTION COMPLETED                                 */
*/*                                                                  */
*/*   OUTPUT - EXITINDC SET TO ONE IF NO MORE WAITING TO BE DONE     */
*/*                                                                  */
*/*   RETURN CODE - (NONE)                                           */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE - EXITS AT BOTTOM)             */
*/*                                                                  */
*/*   CONDITION - OPERATOR REPLIED 'NO' TO A MOUNT REQUEST           */
*/*                                                                  */
*/*   OUPUT - DOMSW SET TO ONE                                       */
*/*                                                                  */
*/*   RETURN CODE - 12 IN RETCODE FIELD                              */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE - EXITS AT BOTTOM)             */
*/*                                                                  */
*/*   CONDITION - CANCEL ECB HAS BEEN POSTED                         */
*/*                                                                  */
*/*   OUTPUT - DOMSW SET TO ONE                                      */
*/*                                                                  */
*/*   RETURN CODE - 16 IN RETCODE FIELD                              */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE - EXITS AT BOTTOM)             */
*/*                                                                  */
*/*   CONDITION - VM&V WTOR FORMAT RTN(IEFAB499) RETURNED A GETMAIN  */
*/*               ERROR.                                             */
*/*                                                                  */
*/*   OUTPUT - DOMSW SET TO ONE                                      */
*/*                                                                  */
*/*   RETURN CODE - 4 IN RETCODE FIELD                               */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE - EXITS AT BOTTOM              */
*/*                                                                  */
*/*   CONDITION - DEVICE END RTN (IEFAB49B) RETURNED A GETMAIN ERROR */
*/*                                                                  */
*/*   OUTPUT - DOMSW SET TO ONE                                      */
*/*                                                                  */
*/*   RETURN CODE - 4 IN RETCODE FIELD                               */
*/*                                                                  */
*/********************************************************************/
*POSTSW = ON;                          /*REINITIALIZE SWITCH         */
         OI    POSTSW,B'10000000'                               02S0194
*READYSW = OFF;                        /*REINITIALIZE SWITCH @YM06182*/
         NI    READYSW,B'01111111'                              02S0195
*FAILSW = OFF;                         /*INITIALIZE SWITCH           */
         NI    FAILSW,B'01111111'                               02S0196
*IF ECB2PBIT = ON                      /*IF CANCEL OR ONE OF WTOR    */
*   × ECB3PBIT = ON THEN               /*REPLY ECB'S POSTED          */
         L     @12,ECB2PTR                                      02S0197
         TM    ECB2PBIT(@12),B'01000000'                        02S0197
         BO    @RT00197                                         02S0197
         L     @12,ECB3PTR                                      02S0197
         TM    ECB3PBIT(@12),B'01000000'                        02S0197
         BNO   @RF00197                                         02S0197
@RT00197 DS    0H                                               02S0198
*  DO;                                                          02S0198
*    IF MVWTORSW = ON THEN             /*IF WTOR REPLY ECB POSTED    */
         L     @12,MVCAPTR                                      02S0199
         L     @12,MVCAXPTR(,@12)                               02S0199
         TM    MVWTORSW(@12),B'01000000'                        02S0199
         BNO   @RF00199                                         02S0199
*      DO;                                                      02S0200
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - CHCKRPLY                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - CHECK OPERATOR REPLY                          */
*/*                                                                  */
*/* FUNCTION - TO CHECK IF THE OPERATOR REPLIED'NO'TO A WTOR MOUNT   */
*/*            MSG.AND IF SO TO SET A SWITCH INDICATING A CANCEL     */
*/*            CONDITION.IF THE OPERATOR REPLIED ANYTHING ELSE BUT   */
*/*            'NO' THEN A PARAMETER LIST IS SET UP IN PREPARATION   */
*/*            FOR CALLING THE WTOR LIST FORMAT ROUTINE(IEFAB499).   */
*/*                                                                  */
*/*   OPERATION -                                                    */
*/*               THE OPERATION IS DOCUMENTED BY THE CODE ITSELF.    */
*/*                                                                  */
*/* ENTRY POINT -(INLINE SUBROUTINE - ENTERED AT THE TOP)            */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*                                                                  */
*/* INPUT - MVWTORRA - OPERATOR REPLY BUFFER                         */
*/*         ECB1PBIT - POST BIT IN D.A. POOL WTOR REPLY ECB          */
*/*         ECB2PBIT - POST BIT IN TAPE POOL WTOR REPLY ECB          */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE - EXITS AT BOTTOM)            */
*/*                                                                  */
*/*   CONDITION - OPERATOR REPLIED 'NO'                              */
*/*                                                                  */
*/*   OUTPUT - DADOMVAL(D.A. DOM ID) CLEARED (IF D.A. POST)          */
*/*            TPDOMVAL(TAPE DOM ID) CLEARED (IF TAPE POST)          */
*/*                                                                  */
*/*   RETURN CODE - 12 IN RETCODE FIELD                              */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE - EXITS AT BOTTOM)             */
*/*                                                                  */
*/*   CONDITION - OPERATOR REPLY WAS NOT 'NO'                        */
*/*                                                                  */
*/*   OUTPUT - POSTED ECB CLEARED                                    */
*/*            DAUNIT - DA INDICATOR SET IN PARMLIST(IF DA POST)     */
*/*            TAPEUNIT - TAPE INDC.SET IN PARMLIST(IF TAPE          */
*/*                       POST)                                      */
*/*            DADOMVAL - (D.A. DOM ID) CLEARED (IF D.A. POST)       */
*/*            TPDOMVAL - (TAPE DOM ID) CLEARED (IF TAPE POST)       */
*/*                                                                  */
*/*   RETURN CODE - (NONE)                                           */
*/*                                                                  */
*/********************************************************************/
*IF ECB2PBIT = ON THEN                 /*IF DA WTOR ECB POSTED       */
         L     @12,ECB2PTR                                      03S0201
         TM    ECB2PBIT(@12),B'01000000'                        03S0201
         BNO   @RF00201                                         03S0201
*  DADOMVAL = DADOMVAL && DADOMVAL;    /*CLEAR D.A. DOM ID           */
         XC    DADOMVAL(4),DADOMVAL                             03S0202
*ELSE                                  /*TAPE WTOR ECB POSTED        */
*  TPDOMVAL = TPDOMVAL && TPDOMVAL;    /*CLEAR TAPE DOM ID           */
         B     @RC00201                                         03S0203
@RF00201 XC    TPDOMVAL(4),TPDOMVAL                             03S0203
*  MSGREPLY = MVWTORRA;                /*PICK UP OPERATOR REPLY      */
@RC00201 L     @12,MVCAPTR                                      03S0204
         L     @12,MVCAXPTR(,@12)                               03S0204
         MVC   MSGREPLY(2),MVWTORRA(@12)                        03S0204
*  MSGREPLY = MSGREPLY × FOLDMASK;     /*CONVERT TO CAPITAL LETTERS  */
         OC    MSGREPLY(2),FOLDMASK                             03S0205
*IF MSGREPLY = NO THEN                 /*IF OPERATOR REPLIED NO      */
         CLC   MSGREPLY(2),@CC00201                             03S0206
         BNE   @RF00206                                         03S0206
*  DO;                                                          03S0207
*    RETCODE = OPREPLY;                /*OPERATOR CANCEL             */
         LA    RETCODE,12                                       03S0208
*    FAILSW = ON;                      /*INDICATE COMPLETE CLEAN-UP  */
         OI    FAILSW,B'10000000'                               03S0209
*  END;                                                         03S0210
*ELSE                                  /*OPERATOR REPLY NOT NO       */
*  DO;                                                          03S0211
         B     @RC00206                                         03S0211
@RF00206 DS    0H                                               03S0212
*    PARMLIST = PARMLIST && PARMLIST;  /*CLEAR PARAMETER AREA        */
         XC    PARMLIST(20),PARMLIST                            03S0212
*    IF ECB2PBIT = ON THEN             /*IF D.A.WTOR REPLY ECB POSTED*/
         L     @12,ECB2PTR                                      03S0213
         TM    ECB2PBIT(@12),B'01000000'                        03S0213
         BNO   @RF00213                                         03S0213
*      DO;                                                      03S0214
*        MVDAECB = MVDAECB && MVDAECB; /*CLEAR DA WTOR ECB           */
         L     @12,MVCAPTR                                      03S0215
         L     @12,MVCAXPTR(,@12)                               03S0215
         L     @11,MVDAECB(,@12)                                03S0215
         LR    @08,@11                                          03S0215
         XR    @08,@11                                          03S0215
         ST    @08,MVDAECB(,@12)                                03S0215
*        DAUNIT = ON;                  /*INDICATE D.A. IN PARMLIST   */
         OI    DAUNIT,B'00100000'                               03S0216
*        WTORECBP = ADDR(MVDAECB);     /*DA POOL WTOR ECB REPLY PTR  */
         LA    WTORECBP,MVDAECB(,@12)                           03S0217
*      END;                                                     03S0218
*    ELSE                              /*NOT D.A. POOL REPLY         */
*      DO;                             /*MUST BE TAPE POOL REPLY     */
         B     @RC00213                                         03S0219
@RF00213 DS    0H                                               03S0220
*        MVTPECB = MVTPECB && MVTPECB; /*CLEAR TAPE WTOR ECB         */
         L     @12,MVCAPTR                                      03S0220
         L     @12,MVCAXPTR(,@12)                               03S0220
         L     @11,MVTPECB(,@12)                                03S0220
         LR    @08,@11                                          03S0220
         XR    @08,@11                                          03S0220
         ST    @08,MVTPECB(,@12)                                03S0220
*        TAPEUNIT = ON;                /*INDICATE TAPE IN 499 PLIST  */
         OI    TAPEUNIT,B'00010000'                             03S0221
*        WTORECBP = ADDR(MVTPECB);     /*TAPE POOL WTOR REPLY ECB PTR*/
         LA    WTORECBP,MVTPECB(,@12)                           03S0222
*      END;                                                     03S0223
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - IVRYWTOR                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - ISSUE'INCORRECT REPLY'WTOR                    */
*/*                                                                  */
*/* FUNCTION - TO COMPLETE SET-UP FOR AND TO CALL THE WTOR LIST      */
*/*            FORMAT ROUTINE(IEFAB499).IF THE WTOR LIST FORMAT RTN  */
*/*            IS SUCCESSFUL IN CONSTRUCTING A WTOR LIST THEN THE    */
*/*            WTOR IS ISSUED AND THE DOM ID SAVED.IF IEFAB499       */
*/*            RETURNED AN ERROR A SWITCH IS SET TO INDICATE         */
*/*            COMPLETE CLEAN-UP.                                    */
*/*                                                                  */
*/*   OPERATION -                                                    */
*/*              THE OPERATION IS DOCUMENTED BY THE CODE             */
*/*                                                                  */
*/*                                                                  */
*/*                                                                  */
*/* ENTRY POINT -(INLINE SUBROUTINE - ENTERED AT THE TOP)            */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*                                                                  */
*/* INPUT - PARMLIST - PARAMETER LIST FOR IEFAB499                   */
*/*         DAUNIT - ON IF DA POOL WTOR                              */
*/*                  OFF IF TAPE POOL WTOR                           */
*/*                                                                  */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE - EXITS AT BOTTOM)            */
*/*                                                                  */
*/*   CONDITION - FUNCTION COMPLETE(WTOR MSG ISSUED)                 */
*/*                                                                  */
*/*   OUTPUT - WTOR MSG'INCORRECT REPLY - MOUNT OR REPLY NO'         */
*/*                                                                  */
*/*                                                                  */
*/*   RETURN CODE - NONE                                             */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE - EXITS AT BOTTOM)             */
*/*                                                                  */
*/*   CONDITION - VM&V WTOR FORMAT RTN (IEFAB499) RETURNED A GETMAIN */
*/*               ERROR.                                             */
*/*                                                                  */
*/*   OUTPUT - FAILSW BIT SET TO 1 - INDICATES CANCEL CONDITION      */
*/*                                                                  */
*/*   RETURN CODE - 4 IN RETCODE FIELD                               */
*/*                                                                  */
*/********************************************************************/
*MSGID = VERFYMID;                     /*ASSIGN MSG ID               */
@RC00213 MVI   MSGID,X'04'                                      04S0224
*WTORINDC = ON;                        /*INDICATE WTOR               */
         OI    WTORINDC,B'10000000'                             04S0225
*ADDINFOP = ADDR(VERMSG);              /*MESSAGE TEXT                */
         L     @12,@CA00166                                     04S0226
         LA    @11,VERMSG-VERINVLD(,@12)                        04S0226
         ST    @11,ADDINFOP                                     04S0226
*ADDLILEN =VERMLN;                     /*MESSAGE LENGTH              */
         MVC   ADDLILEN(2),VERMLN-VERINVLD(@12)                 04S0227
*CALL IEFAB499(PARMLIST,WORDZERO,JOBNAMEP,STEPNAMP,WORDZERO);   04S0228
         LA    @12,PARMLIST                                     04S0228
         ST    @12,@AL00001                                     04S0228
         LA    @12,@CF00214                                     04S0228
         ST    @12,@AL00001+4                                   04S0228
         LA    @12,JOBNAMEP                                     04S0228
         ST    @12,@AL00001+8                                   04S0228
         LA    @12,STEPNAMP                                     04S0228
         ST    @12,@AL00001+12                                  04S0228
         LA    @12,@CF00214                                     04S0228
         ST    @12,@AL00001+16                                  04S0228
         L     @15,@CV00919                                     04S0228
         LA    @01,@AL00001                                     04S0228
         BALR  @14,@15                                          04S0228
*RETCODE = REG15;                      /*PICK UP RETURN CODE         */
         LR    RETCODE,REG15                                    04S0229
*IF RETCODE = SUCCESS THEN             /*IF SUCCESS                  */
         LTR   RETCODE,RETCODE                                  04S0230
         BNZ   @RF00230                                         04S0230
*  DO;                                                          04S0231
*    RFY (REG0,REG1,REG2,REG3,REG4) RSTD;                       04S0232
*    REG0 = ZERO;                                               04S0233
         SLR   REG0,REG0                                        04S0233
*    REG1 = WTOLISTP;                  /*ADDR OF CNTRL PROG PARM LIST*/
         L     REG1,WTOLISTP                                    04S0234
*    REG2 = REPLYLEN;                  /*LEN OF REPLY                */
         LH    REG2,REPLYLEN                                    04S0235
*    REG3 = WTORECBP;                  /*PTR TO WTOR ECB             */
         LR    REG3,WTORECBP                                    04S0236
*    REG4 = ADDR(MVWTORRA);            /*REPLY AREA                  */
         L     @12,MVCAPTR                                      04S0237
         L     REG4,MVCAXPTR(,@12)                              04S0237
         LA    REG4,MVWTORRA(,REG4)                             04S0237
*    GEN (WTOR ,(4),(2),(3),MF=(E,(1))); /*ISSUE WTOR                */
         WTOR ,(4),(2),(3),MF=(E,(1))
*    DOMIDVAL = REG1;                  /*SAVE DOMID                  */
         ST    REG1,DOMIDVAL                                    04S0239
*    REG1 = WTOLISTP;                  /*WTO CONTROL PROG LIST       */
         L     REG1,WTOLISTP                                    04S0240
*    REG0 = WTOLSTLN;                  /*LEN OF CNTRL PROG. LIST     */
         LH    REG0,WTOLSTLN                                    04S0241
*    REG0 = REG0 × SUBPL230;           /*FREE FROM SUBPOOL 230       */
         O     REG0,@CF00212                                    04S0242
*    GEN (FREEMAIN R,LV=(0),A=(1));    /*FREE LIST                   */
         FREEMAIN R,LV=(0),A=(1)
*    RFY (REG0,REG1,REG2,REG3,REG4) UNRSTD;                     04S0244
*    IF DAUNIT = ON THEN               /*IF DA POOL WTOR             */
         TM    DAUNIT,B'00100000'                               04S0245
         BNO   @RF00245                                         04S0245
*      DO;                                                      04S0246
*        DADOMVAL = DOMIDVAL;          /*ASSIGN DA POOL WTOR DOM ID  */
         MVC   DADOMVAL(4),DOMIDVAL                             04S0247
*      END;                                                     04S0248
*    ELSE                              /*MUST BE TAPE POOL WTOR      */
*      DO;                                                      04S0249
         B     @RC00245                                         04S0249
@RF00245 DS    0H                                               04S0250
*        TPDOMVAL = DOMIDVAL;          /*SAVE TAPE POOL WTOR DOM ID  */
         MVC   TPDOMVAL(4),DOMIDVAL                             04S0250
*      END;                                                     04S0251
*  END;                                                         04S0252
*ELSE                                  /*IEFAB499 RETURNED ERROR     */
*  DO;                                                          04S0253
         B     @RC00230                                         04S0253
@RF00230 DS    0H                                               04S0254
*    FAILSW = ON;                      /*INDICATE COMPLETE CLEAN-UP  */
         OI    FAILSW,B'10000000'                               04S0254
*  END;                                                         04S0255
*  END;                                                         03S0256
*      END;                                                     02S0257
*    ELSE                              /*CANCEL ECB POSTED           */
*      DO;                                                      02S0258
         B     @RC00199                                         02S0258
@RF00199 DS    0H                                               02S0259
*        RETCODE = CANLCODE;           /*CANCEL RETURN CODE          */
         LA    RETCODE,16                                       02S0259
*        FAILSW = ON;                  /*INDICATE COMPLETE CLEAN-UP  */
         OI    FAILSW,B'10000000'                               02S0260
*      END;                                                     02S0261
*  END;                                                         02S0262
*ELSE                                  /*MUST BE DEVICE END          */
*  DO;                                                          02S0263
         B     @RC00197                                         02S0263
@RF00197 DS    0H                                               02S0264
*    MVDEVECB = MVDEVECB && MVDEVECB;  /*CLEAR DEVICE END ECB        */
         L     @12,MVCAPTR                                      02S0264
         L     @12,MVCAXPTR(,@12)                               02S0264
         L     @11,MVDEVECB(,@12)                               02S0264
         LR    @15,@11                                          02S0264
         XR    @15,@11                                          02S0264
         ST    @15,MVDEVECB(,@12)                               02S0264
*    CALL IEFAB49B(MVCAPTR,CANCLECB,JOBNAMEP,STEPNAMP); /*      02S0265
*                                        EXIT TO DEV END RTN         */
         LA    @12,MVCAPTR                                      02S0265
         ST    @12,@AL00001                                     02S0265
         L     @12,@PC00001+8                                   02S0265
         ST    @12,@AL00001+4                                   02S0265
         LA    @12,JOBNAMEP                                     02S0265
         ST    @12,@AL00001+8                                   02S0265
         LA    @12,STEPNAMP                                     02S0265
         ST    @12,@AL00001+12                                  02S0265
         L     @15,@CV00921                                     02S0265
         LA    @01,@AL00001                                     02S0265
         BALR  @14,@15                                          02S0265
*    RETCODE = REG15;                  /*PICK UP RETURN CODE         */
         LR    RETCODE,REG15                                    02S0266
*    IF RETCODE ^= SUCCESS THEN        /*IF RETURN CODE UNSUCCESSFUL */
         LTR   RETCODE,RETCODE                                  02S0267
         BZ    @RF00267                                         02S0267
*      FAILSW = ON;                    /*INDICATE COMPLETE CLEAN-UP  */
         OI    FAILSW,B'10000000'                               02S0268
*    IF MVNUMWTS = ZERO THEN           /*IF NO MORE WAITING DEVICES  */
@RF00267 L     @12,MVCAPTR                                      02S0269
         L     @12,MVCAXPTR(,@12)                               02S0269
         ICM   @11,3,MVNUMWTS(@12)                              02S0269
         BNZ   @RF00269                                         02S0269
*      EXITINDC = ON;                  /*INDICATE NO MORE WAITING    */
         OI    EXITINDC,B'10000000'                             02S0270
*  END;                                                         02S0271
@RF00269 DS    0H                                               02S0272
*  PARMTABL = PARMTABL && PARMTABL;    /*CLEAR PARAMETER LIST        */
@RC00197 XC    PARMTABL(16),PARMTABL                            02S0272
*  CLNMVCAP = MVCAPTR;                 /*PTR TO MVCA                 */
         L     @12,MVCAPTR                                      02S0273
         ST    @12,CLNMVCAP                                     02S0273
*  VEXMVCAP = MVCAPTR;                 /*MVCA PTR TO ESTAE PARMS     */
         L     @11,@PC00001+16                                  02S0274
         L     @11,VMVEXITP(,@11)                               02S0274
         ST    @12,VEXMVCAP(,@11)                               02S0274
*  IF FAILSW = ON THEN                 /*IF COMPLETE CLEAN-UP SWITCH */
         TM    FAILSW,B'10000000'                               02S0275
         BNO   @RF00275                                         02S0275
*    DO;                               /*ON                          */
*      EXITINDC = ON;                  /*INDICATE NO MORE WAITING    */
         OI    EXITINDC,B'10000000'                             02S0277
*      DOMALL = ON;                    /*INDICATE DOM ALL IDS        */
*      FRMVCACR = ON;                  /*FREE MVCA                   */
         OI    DOMALL,B'01100000'                               02S0279
*      DOMSW = ON;                     /*DOMR AND CLEAN-UP SW        */
         OI    DOMSW,B'10000000'                                02S0280
*    END;                                                       02S0281
*  ELSE                                /*CLEAN-UP NOT INDICATED      */
*    DO;                                                        02S0282
         B     @RC00275                                         02S0282
@RF00275 DS    0H                                               02S0283
*      DOMSINGL = ON;                  /*DOM INDIVIDUAL ID           */
         OI    DOMSINGL,B'10000000'                             02S0283
*      DOMSW = ON;                     /*INDICATE DOM RTN            */
         OI    DOMSW,B'10000000'                                02S0284
*    END;                                                       02S0285
*  IF EXITINDC = ON THEN               /*LOOP EXIT SWITCH SET        */
@RC00275 TM    EXITINDC,B'10000000'                             01S0286
         BNO   @RF00286                                         01S0286
*    DO;                                                        01S0287
*      IF DADOMVAL ^= ZERO THEN        /*IF DA POOL MSG OUTSTANDING  */
         ICM   @12,15,DADOMVAL                                  01S0288
         BZ    @RF00288                                         01S0288
*        DO;                                                    01S0289
*          DOMSW = ON;                 /*INDICATE DOMR               */
         OI    DOMSW,B'10000000'                                01S0290
*          DOMIDV01 = DADOMVAL;        /*PUT DOM ID IN PARMLIST      */
         MVC   DOMIDV01(4),DADOMVAL                             01S0291
*        END;                                                   01S0292
*      ELSE;                           /*MSG NOT ISSUED              */
@RF00288 DS    0H                                               01S0294
*      IF TPDOMVAL ^= ZERO THEN        /*IF TAPE POOL MSG OUTSTANDING*/
         ICM   @12,15,TPDOMVAL                                  01S0294
         BZ    @RF00294                                         01S0294
*        DO;                                                    01S0295
*          DOMSW = ON;                 /*INDICATE DOMR               */
         OI    DOMSW,B'10000000'                                01S0296
*          DOMIDV02 = TPDOMVAL;        /*PUT DOM ID IN PARMLIST      */
         MVC   DOMIDV02(4),TPDOMVAL                             01S0297
*        END;                                                   01S0298
*      ELSE;                           /*TAPE POOL MSG NOT ISSUED    */
@RF00294 DS    0H                                               01S0300
*    END;                                                       01S0300
*  IF DOMSW = ON THEN                  /*IF DOMR REQUIRED            */
@RF00286 TM    DOMSW,B'10000000'                                01S0301
         BNO   @RF00301                                         01S0301
*    CALL IEFAB49A(PARMTABL,VMVEXITP); /*CALL DOMR ROUTINE           */
         LA    @12,PARMTABL                                     01S0302
         ST    @12,@AL00001                                     01S0302
         L     @12,@PC00001+16                                  01S0302
         ST    @12,@AL00001+4                                   01S0302
         L     @15,@CV00920                                     01S0302
         LA    @01,@AL00001                                     01S0302
         BALR  @14,@15                                          01S0302
*END;                                                           01S0303
@RF00301 DS    0H                                               01S0303
@DE00185 TM    EXITINDC,B'10000000'                             01S0303
         BZ    @DL00185                                         01S0303
*RETURN CODE(RETCODE);                                          01S0304
         L     @13,4(,@13)                                      01S0304
         L     @00,@SIZDATD                                     01S0304
         LR    @01,@09                                          01S0304
         FSPACE   R,LV=(0),A=(1)
         LR    @15,@08                                          01S0304
         L     @14,12(,@13)                                     01S0304
         LM    @00,@12,20(@13)                                  01S0304
         BR    @14                                              01S0304
*END IEFAB496                                                   01S0305
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (B496SPEC)                                        *
*/*%INCLUDE SYSLIB  (B496DATA)                                        *
*/*%INCLUDE SYSLIB  (IEFZB433)                                        *
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                        *
*/*%INCLUDE SYSLIB  (IEFZB431)                                        *
*/*%INCLUDE SYSLIB  (IEFZB452)                                        *
*/*%INCLUDE SYSLIB  (IHAPSA  )                                        *
*/*%INCLUDE SYSLIB  (B496SRUP)                                        *
*/*%INCLUDE SYSLIB  (SRUPSPEC)                                        *
*/*%INCLUDE SYSLIB  (B496WAIT)                                        *
*/*%INCLUDE SYSLIB  (WAITSPEC)                                        *
*/*%INCLUDE SYSLIB  (B496POST)                                        *
*/*%INCLUDE SYSLIB  (POSTSPEC)                                        *
*/*%INCLUDE SYSLIB  (CHCKRPLY)                                        *
*/*%INCLUDE SYSLIB  (RPLYSPEC)                                        *
*/*%INCLUDE SYSLIB  (IVRYWTOR)                                        *
*/*%INCLUDE SYSLIB  (IVRYSPEC)                                        *
*;                                                              01S0305
@DATA    DS    0H
@CH00128 DC    H'12'
@CH00924 DC    H'20'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    5F
@AL00001 DS    5A
@TF00001 DS    F
IEFAB496 CSECT
         DS    0F
@CF00214 DC    F'0'
@CF00195 DC    F'16'
@CF00930 DC    F'-12'
@CF00929 DC    F'-11'
@CF00932 DC    F'-4'
@CF00212 DC    XL4'E6000000'
@DATD    DSECT
         DS    0D
MVCAPTR  DS    A
JOBNAMEP DS    A
PARMPTR  DS    A
STEPNAMP DS    A
UCBPTR   DS    A
MTNODEVE DS    F
I        DS    H
DADOMVAL DS    CL4
DOMIDVAL DS    CL4
DOMSW    DS    BL1
EXITINDC DS    BL1
FAILSW   DS    BL1
MSGREPLY DS    CL2
         DS    CL1
PARMAREA DS    CL8
         ORG   PARMAREA
FUNCMAP  DS    CL2
         ORG   FUNCMAP
ADDINDC  DS    BL1
DELTINDC EQU   FUNCMAP+0
SRCHINDC EQU   FUNCMAP+0
@NM00007 EQU   FUNCMAP+0
         ORG   PARMAREA+2
INPTASID DS    CL2
MVCAMPTR DS    AL4
         ORG   PARMAREA+8
PARMLIST DS    CL20
         ORG   PARMLIST
MSGID    DS    FL1
ACTCODE  DS    CL1
UNITADD  DS    CL3
LABELTYP DS    CL1
INDICATS DS    CL2
         ORG   INDICATS
WTORINDC DS    BL1
WTOINDC  EQU   INDICATS+0
DAUNIT   EQU   INDICATS+0
TAPEUNIT EQU   INDICATS+0
@NM00008 EQU   INDICATS+0
         ORG   PARMLIST+8
ADDINFOP DS    AL4
ADDLILEN DS    FL2
WTOLSTLN DS    FL2
WTOLISTP DS    AL4
         ORG   PARMLIST+20
PARMTABL DS    CL16
         ORG   PARMTABL
FUNCTION DS    CL4
         ORG   FUNCTION
DOMSINGL DS    BL1
DOMALL   EQU   FUNCTION+0
FRMVCACR EQU   FUNCTION+0
@NM00009 EQU   FUNCTION+0
         ORG   PARMTABL+4
CLNMVCAP DS    AL4
DOMIDV01 DS    CL4
DOMIDV02 DS    CL4
         ORG   PARMTABL+16
POSTSW   DS    BL1
READYSW  DS    BL1
TPDOMVAL DS    CL4
         DS    CL2
VECBLIST DS    CL12
         ORG   VECBLIST
ECB1PTR  DS    AL4
ECB2PTR  DS    AL4
         ORG   ECB2PTR
HIORDER2 DS    BL1
         ORG   VECBLIST+8
ECB3PTR  DS    AL4
         ORG   ECB3PTR
HIORDER3 DS    BL1
         ORG   VECBLIST+12
VERCHKSW DS    BL1
IEFAB496 CSECT
         DS    0F
@SIZDATD DC    AL1(230)
         DC    AL3(@ENDDATD-@DATD)
@CA00166 DC    A(VERINVLD)
@CV00918 DC    V(IEFAB498)
@CV00919 DC    V(IEFAB499)
@CV00920 DC    V(IEFAB49A)
@CV00921 DC    V(IEFAB49B)
         DS    0D
REPLYLEN DC    AL2(2)
ATTINDEX DC    XL1'0C'
CLEAR    DC    XL1'00'
@CC00201 DC    C'NO'
FOLDMASK DC    X'4040'
IEFAB496 CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEFAB496 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RETCODE  EQU   @08
WTORECBP EQU   @07
VMVREQBP EQU   @04
MTENTPTR EQU   @07
REG0     EQU   @00
REG1     EQU   @01
REG2     EQU   @02
REG3     EQU   @03
REG4     EQU   @04
REG15    EQU   @15
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR14P   EQU   @14
GPR15P   EQU   @15
GPR13P   EQU   @13
GPR12P   EQU   @12
GPR11P   EQU   @11
GPR00F   EQU   @00
GPR01F   EQU   @01
GPR11F   EQU   @11
GPR12F   EQU   @12
GPR13F   EQU   @13
GPR14F   EQU   @14
GPR15F   EQU   @15
         EXTRN VERINVLD
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
MVCA     EQU   0
MVCAXPTR EQU   MVCA+12
MVCAX    EQU   0
MVDEVECB EQU   MVCAX
MVSWITCH EQU   MVCAX+4
MVWTORSW EQU   MVSWITCH
MVNUMWTS EQU   MVCAX+6
MVENTRYP EQU   MVCAX+8
MVWTORRA EQU   MVCAX+12
MVDAECB  EQU   MVCAX+16
MVTPECB  EQU   MVCAX+20
MTENTRY  EQU   0
MTENBASE EQU   MTENTRY
MTLENGTH EQU   MTENBASE
MTNXTPTR EQU   MTENBASE+8
MTDEVPTR EQU   MTENBASE+12
MTDOMPTR EQU   MTENBASE+16
MTDEVENT EQU   0
MTSTATUS EQU   MTDEVENT
MTVRYPND EQU   MTSTATUS
MTVRYLBL EQU   MTSTATUS
MTUCBPTR EQU   MTDEVENT+1
MTSAVNDX EQU   MTDEVENT+8
MTDOMIDS EQU   0
POSTECB2 EQU   0
ECB2PBIT EQU   POSTECB2
POSTECB3 EQU   0
ECB3PBIT EQU   POSTECB3
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBNOTRD EQU   UCBNRY
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00015 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
VMVRQBLK EQU   0
VMVFNMAP EQU   VMVRQBLK
VMVOPTB1 EQU   VMVFNMAP
VMVVRLBL EQU   VMVOPTB1
VMVVDEND EQU   VMVOPTB1
VMVOPTB2 EQU   VMVFNMAP+1
VMVOPTB3 EQU   VMVFNMAP+2
VMVDUPVL EQU   VMVOPTB3
VMVNREQP EQU   VMVRQBLK+4
VMVUCBP  EQU   VMVRQBLK+9
VMVJBNMP EQU   VMVRQBLK+24
VMVJSNMP EQU   VMVRQBLK+32
VMVMINFO EQU   VMVRQBLK+40
VMVACTON EQU   VMVMINFO
VMVUSER  EQU   VMVRQBLK+48
VMVEPRMS EQU   0
VEXMVCAP EQU   VMVEPRMS+192
VEXFLAGS EQU   VMVEPRMS+196
IKEBC    EQU   0
IKEBF15  EQU   0
IKEBF31  EQU   0
IKEBP15  EQU   0
IKEBP31  EQU   0
IKEBP8   EQU   0
UCBBGN   EQU   0
VERMLN   EQU   VERINVLD
VERMSG   EQU   VERINVLD+2
REQUESTP EQU   0
ASID     EQU   0
CANCLECB EQU   0
CNTTAB   EQU   0
VERFYCNT EQU   CNTTAB+8
VMVEXITP EQU   0
UCBOBS01 EQU   UCBDEV
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00014 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBOBS09 EQU   UCBDEV
PSARSVTE EQU   PSARSVT
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBCTCF1 EQU   UCBOBS08+4
UCBCTCAD EQU   UCBOBS08
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00014
UCBSKPFG EQU   @NM00014
UCBRIPND EQU   @NM00014
UCBRTIAC EQU   @NM00014
UCBRSV79 EQU   @NM00014
UCBRSV78 EQU   @NM00014
UCBRSV77 EQU   @NM00014
UCBOLTEP EQU   @NM00014
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBRV038 EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00013 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRV028 EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVOLI  EQU   UCBOBS01+4
UCBVTOC  EQU   UCBOBS01
@NM00006 EQU   CNTTAB+12
@NM00005 EQU   CNTTAB+4
@NM00004 EQU   CNTTAB
VEXASID  EQU   VMVEPRMS+198
@NM00021 EQU   VEXFLAGS
VEXMVCAF EQU   VEXFLAGS
VEXFRR   EQU   VEXFLAGS
VMVEAUTO EQU   VMVEPRMS
@NM00020 EQU   VMVUSER
VMVPROCD EQU   VMVUSER
VMVVUNTP EQU   VMVRQBLK+44
@NM00019 EQU   VMVMINFO+1
@NM00018 EQU   VMVACTON
VMVRTAIN EQU   VMVACTON
VMVDSMT  EQU   VMVACTON
VMVKEEP  EQU   VMVACTON
VMVRETCD EQU   VMVRQBLK+36
VMVDSNMP EQU   VMVRQBLK+28
VMVMVLSR EQU   VMVRQBLK+18
VMVUVLSR EQU   VMVRQBLK+12
@NM00017 EQU   VMVRQBLK+8
VMVOPTB4 EQU   VMVFNMAP+3
@NM00016 EQU   VMVOPTB3
VMVNUMSG EQU   VMVOPTB3
VMVCUVOL EQU   VMVOPTB3
VMVNSPVT EQU   VMVOPTB2
VMVNSLTP EQU   VMVOPTB2
VMVSLTAP EQU   VMVOPTB2
VMVNLTAP EQU   VMVOPTB2
VMVALTAP EQU   VMVOPTB2
VMVSTRG  EQU   VMVOPTB2
VMVPUBLC EQU   VMVOPTB2
VMVPRIVT EQU   VMVOPTB2
VMVDWTOR EQU   VMVOPTB1
VMVMTMSG EQU   VMVOPTB1
VMVMOUNT EQU   VMVOPTB1
VMVREWND EQU   VMVOPTB1
VMVUCB   EQU   VMVOPTB1
VMVUNLOD EQU   VMVOPTB1
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBRSV50 EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBRV043 EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBRV034 EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBRV032 EQU   UCBFLP1
UCBRV031 EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00015
UCBHALI  EQU   @NM00015
UCBRSV09 EQU   @NM00015
UCBRSV08 EQU   @NM00015
UCBRSV07 EQU   @NM00015
UCBRSV06 EQU   @NM00015
UCBRSV05 EQU   @NM00015
UCBRSV04 EQU   @NM00015
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCB3TAPE EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBNAME  EQU   UCBOB+13
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBFLB7  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBRSV02 EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBRV002 EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00012 EQU   UCB
@NM00011 EQU   POSTECB3
@NM00010 EQU   POSTECB2
@NM00003 EQU   MTDEVENT+9
MTDSNMP  EQU   MTDEVENT+4
MTVRSVRD EQU   MTSTATUS
MTVRYVFY EQU   MTSTATUS
MTPRVPTR EQU   MTENBASE+4
@NM00002 EQU   MTENBASE+2
MVNODEVE EQU   MVCAX+14
MVDISDSN EQU   MVSWITCH
MVCANXTP EQU   MVCA+8
MVCAPRVP EQU   MVCA+4
MVCAASID EQU   MVCA+2
@NM00001 EQU   MVCA
@NM00045 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00044 EQU   PSA+1040
PSAUSEND EQU   PSA+1040
PSARV062 EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00043 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00042 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSARV011 EQU   PSASUP3
PSARV010 EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSAIPCRP EQU   PSASUP1
PSAIPCDR EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00041 EQU   FLCFSA
@NM00040 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00039 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00038 EQU   FLCIOA
@NM00037 EQU   FLCMCLA+15
@NM00036 EQU   FLCMCLA+14
@NM00035 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00034 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00033 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00032 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00031 EQU   FLCPER
@NM00030 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00029 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00028 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00027 EQU   FLCPIILC
@NM00026 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00025 EQU   FLCSVILC
@NM00024 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00023 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00022 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00199 EQU   @RC00197
@RC00206 EQU   @RC00199
@RC00230 EQU   @RC00199
@RC00245 EQU   @RC00230
@ENDDATA EQU   *
         END   IEFAB496,(C'PLS2049',0701,75314)
