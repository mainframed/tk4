         TITLE 'IEFAB472 - BUILD GENERIC ALLOC TABLES                  *
                        '
IEFAB472 CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(24)                                          01S0001
         DC    C'IEFAB472 78054  UZ16857 '                      01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @12,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@12                                      01S0001
         L     @00,@SIZDATD                                     01S0001
         MODESET EXTKEY=SCHED,SAVEKEY=(2)
         GSPACE   R,LV=(0)
         LR    @11,@01                                          01S0001
         USING @DATD,@11                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         STC   @02,@OLDKEY                                      01S0001
         MODESET KEYADDR=(2)
         LM    @00,@02,20(@13)                                  01S0001
         ST    @11,8(,@13)                                      01S0001
         LR    @13,@11                                          01S0001
         MODESET EXTKEY=ZERO
         MVC   @PC00001(4),0(@01)                               01S0001
         MODESET EXTKEY=SCHED
*RTNCODE = SUCCESS;                                             01S0079
         SLR   RTNCODE,RTNCODE                                  01S0079
*RFY AQMPARAM BASED(QMGRRBP);                                   01S0080
*RFY EDTHDR BASED(EDTABPTR);                                    01S0081
*NUMGROUP=GMTENTLN*EIGHT;              /*DETERMINE NUMBER OF GROUPS  */
         L     @02,@PC00001                                     01S0082
         L     @02,ALCWAPTR(,@02)                               01S0082
         L     @01,EDTABPTR(,@02)                               01S0082
         L     @01,EDTMSKTP(,@01)                               01S0082
         L     NUMGROUP,GMTENTLN(,@01)                          01S0082
         SLA   NUMGROUP,3                                       01S0082
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - DETSZCTR                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - DETERMINE NUMBER OF TABLE ENTRIES             */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*    THIS CODE DETERMINES NUMBER OF ENTRIES NEEDED FOR             */
*/*    EACH OF THE FOLLOWING TABLES:                                 */
*/*        .REQUEST ID MASK TABLE (NOTE: THE MAXIMUM NUMBER OF       */
*/*               POSSIBLE ENTRIES IS CALCULATED. THE ACTUAL         */
*/*               NUMBER OF ENTRIES USED MAY BE SMALLER.)            */
*/*        .ALGORITHM INTERFACE TABLES - REQUEST LIST                */
*/*                                    - GROUP LIST                  */
*/*               (NOTE: THE NUMBER OF ENTRIES TO BE USED IN THESE   */
*/*                      TABLES IS CALCULATED EXACTLY).              */
*/*                                                                  */
*/*   OPERATION -                                                    */
*/*      ALL THE SIOTS ARE SCANNED. THE COUNT OF REQUEST ID MASK     */
*/*      TABLE ENTRIES IS INCREMENTED FOR EACH UNALLOCATED SIOT.     */
*/*      WHENEVER AN UNALLOCATED REQUEST IS FOUND, THE COUNT OF THE  */
*/*      ALGORITHM INTERFACE REQUEST LIST ENTIES IS INCREMENTED FOR  */
*/*      EACH UNALLOCATED VOLUNIT ENTRY ASSOCIATED WITH THAT SIOT.   */
*/*      FOR EACH VOLUNIT ENTRY WHICH HAD A REQUEST LIST ENTRY       */
*/*      COUNTED, THE COUNT OF THE ALGORITHM INTERFACE GROUP LIST    */
*/*      ENTRIES IS INCREMENTED BY THE NUMBER OF DEVICE GROUPS       */
*/*      ELIGIBLE TO THAT REQUEST.                                   */
*/*                                                                  */
*/* ENTRY - INLINE SUBROUTINE                                        */
*/*                                                                  */
*/*   PURPOSE - TO DETERMINE THE MAXIMUM NUMBER OF ENTRIES NEEDED    */
*/*             FOR THE REQUEST ID MASK TABLE, THE ALGORITHM         */
*/*             INTERFACE REQUEST LIST, AND THE ALGORITHM INTERFACE  */
*/*             GROUP LIST.                                          */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*        SIOT1P - PTR TO FIRST SIOT                                */
*/*                                                                  */
*/* EXIT - NORMAL - INLINE SUBROUTINE                                */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*        RIMTABCT - MAXIMUM NUMBER OF REQUEST ID MASK TABLE ENTRIES*/
*/*        RQLSTCTR - NUMBER OF ALG. INTERFACE REQUEST LIST ENTRIES  */
*/*        RPLSTCTR - NUMBER OF ALG. INTERFACE GROUP LIST ENTRIES    */
*/*                                                                  */
*/*   RETURN CODES - (NONE)                                          */
*/*                                                                  */
*/********************************************************************/
*RIMTABCT = ZERO;                      /*INITIALIZE REQ ID TABLE CNT */
         SLR   @08,@08                                          02S0083
         ST    @08,RIMTABCT(,@02)                               02S0083
*RQLSTCTR = ZERO;                      /*INITIALIZE UNIQUE REQ COUNT */
         SLR   RQLSTCTR,RQLSTCTR                                02S0084
*GPLSTCTR = ZERO;                      /*INITIALIZE CT OF GROUP LIST */
         ST    @08,GPLSTCTR                                     02S0085
*SIOTPTR = SIOT1P;                     /*POINT TO FIRST SIOT         */
         L     SIOTPTR,SIOT1P(,@02)                             02S0086
*DO WHILE SIOTPTR ^= ZERO;             /*SCAN ALL SIOTS              */
         B     @DE00087                                         02S0087
@DL00087 DS    0H                                               02S0088
*  IF SIOTALCD = NO THEN               /*IS REQUEST UNALLOCATED ?    */
         TM    SIOTALCD(SIOTPTR),B'00000010'                    02S0088
         BNZ   @RF00088                                         02S0088
*    DO;                               /*YES, REQ IS UNALLOC..PROCESS*/
*      RIMTABCT = RIMTABCT + ONE;      /*INCREMENT REQ ID COUNT      */
         L     @08,@PC00001                                     02S0090
         L     @08,ALCWAPTR(,@08)                               02S0090
         LA    @05,1                                            02S0090
         L     @02,RIMTABCT(,@08)                               02S0090
         ALR   @02,@05                                          02S0090
         ST    @02,RIMTABCT(,@08)                               02S0090
*      SGRPCNT = ZERO;                 /*INITIALIZE SIOT GROUP COUNT */
         SLR   SGRPCNT,SGRPCNT                                  02S0091
*      MASKPTR = EDLGMTP;              /*POINT TO MASK               */
         L     @08,SIOTEDLP(,SIOTPTR)                           02S0092
         MVC   MASKPTR(4),EDLGMTP(@08)                          02S0092
*      DO GROUPNO=ONE TO NUMGROUP;     /*LOOK AT EACH GROUP BIT      */
         B     @DE00093                                         02S0093
@DL00093 DS    0H                                               02S0094
*        CALL TESTBIT;                 /*TEST IF GROUP IS ELIGIBLE   */
         BAL   @14,TESTBIT                                      02S0094
*        IF BITRTN = ON THEN           /*IS GROUP ELIGIBLE ?         */
         TM    BITRTN,B'10000000'                               02S0095
         BNO   @RF00095                                         02S0095
*          DO;                         /*YES,GROUP IS ELIGIBLE       */
*            SGRPCNT=SGRPCNT+ONE;     /*INCREMENT SIOT GROUP COUNT   */
         AH    SGRPCNT,@CH00058                                 02S0097
*          END;                                                 02S0098
*        ELSE;                         /*GROUP NOT ELIGIBLE          */
@RF00095 DS    0H                                               02S0100
*      END;                                                     02S0100
         LA    @05,1                                            02S0100
         AL    @05,GROUPNO                                      02S0100
@DE00093 ST    @05,GROUPNO                                      02S0100
         CR    @05,NUMGROUP                                     02S0100
         BNH   @DL00093                                         02S0100
*      VUPTR = SVOLUNAD;               /*POINT TO SIOTS FIRST VOLUNIT*/
         L     VUPTR,SVOLUNAD(,SIOTPTR)                         02S0101
*      DO VUCTR = ONE TO SVOLUNNO;     /*PROCESS EACH OF SIOTS VOLUNS*/
         LA    @08,1                                            02S0102
         B     @DE00102                                         02S0102
@DL00102 DS    0H                                               02S0103
*        IF VOLALOC = NO × VUDNALOC = ON THEN /*IS VOLUNIT ENTRY
*                                        UNALLOC ?                   */
         TM    VUDNALOC(VUPTR),B'00001000'                      02S0103
         BNZ   @RT00103                                         02S0103
         TM    VOLALOC(VUPTR),B'10000000'                       02S0103
         BO    @RF00103                                         02S0103
@RT00103 DS    0H                                               02S0104
*          DO;                         /*YES, INCREMENT TABLE COUNTS */
*            RQLSTCTR=RQLSTCTR+ONE;    /*INCREMENT REQ LIST COUNT    */
         AH    RQLSTCTR,@CH00058                                02S0105
*            GPLSTCTR=GPLSTCTR+SGRPCNT;/*INCREMENT GROUP LIST COUNT  */
         LR    @08,SGRPCNT                                      02S0106
         AL    @08,GPLSTCTR                                     02S0106
         ST    @08,GPLSTCTR                                     02S0106
*          END;                                                 02S0107
*        ELSE;                         /*VOLUNIT ENTRY IS ALLOCATED  */
@RF00103 DS    0H                                               02S0109
*        VUPTR = VUPTR + LENGTH(VOLUNTAB); /*POINT TO SIOTS NEXT VOLU*/
         AH    VUPTR,@CH01875                                   02S0109
*      END;                                                     02S0110
         LA    @08,1                                            02S0110
         AL    @08,VUCTR                                        02S0110
@DE00102 ST    @08,VUCTR                                        02S0110
         CH    @08,SVOLUNNO(,SIOTPTR)                           02S0110
         BNH   @DL00102                                         02S0110
*    END;                                                       02S0111
*  ELSE;                               /*SIOT IS ALLOCATED           */
@RF00088 DS    0H                                               02S0113
*  SIOTPTR = SIOTNPTR;                 /*POINT TO NEXT SIOT          */
         L     SIOTPTR,SIOTNPTR(,SIOTPTR)                       02S0113
*END;                                                           02S0114
@DE00087 LTR   SIOTPTR,SIOTPTR                                  02S0114
         BNZ   @DL00087                                         02S0114
*ALGINTLN = LENGTH(ALGPTRS) + LENGTH(CVRPARM) + /*LENGTH OF TABLES   */
*    (LENGTH(CVRRQLST)*RQLSTCTR) +     /*USED TO INTERFACE WITH      */
*    (LENGTH(CVRGPLST)*GPLSTCTR) +     /*COVER/REDUCE ALGORITHMS     */
*    (LENGTH(GRPCOUNT)*NUMGROUP);                               01S0115
         LA    @08,28                                           01S0115
         LR    @01,RQLSTCTR                                     01S0115
         MR    @00,@08                                          01S0115
         ALR   @01,@08                                          01S0115
         L     @00,GPLSTCTR                                     01S0115
         SLA   @00,4                                            01S0115
         ALR   @01,@00                                          01S0115
         LR    @00,NUMGROUP                                     01S0115
         SLA   @00,4                                            01S0115
         ALR   @01,@00                                          01S0115
         ST    @01,ALGINTLN                                     01S0115
*RIMTABLN = LENGTH(RIMID) +            /*DETERMINE LENGTH OF REQUEST */
*    LENGTH(RIMUACT) + GMTENTLN;       /*..ID MARK TABLE ENTRY       */
         L     @15,@PC00001                                     01S0116
         L     @15,ALCWAPTR(,@15)                               01S0116
         L     @14,EDTABPTR(,@15)                               01S0116
         L     @14,EDTMSKTP(,@14)                               01S0116
         L     @14,GMTENTLN(,@14)                               01S0116
         LA    @00,8                                            01S0116
         ALR   @00,@14                                          01S0116
         ST    @00,RIMTABLN(,@15)                               01S0116
*ALGTABSZ = ALGINTLN +                 /*GETMAIN = SIZE OF INTERFACE */
*    (RIMTABLN*RIMTABCT) +             /*+ SIZE OF REQ ID MASK TABLE */
*    LENGTH(AQMPARAM) +                /*+ SIZE OF ALLOC Q-MGR RB    */
*    (GMTENTLN * THREE);               /*+ SPACE FOR 3 MASK AREAS    */
         LR    @03,@00                                          01S0117
         M     @02,RIMTABCT(,@15)                               01S0117
         ALR   @01,@03                                          01S0117
         ALR   @01,@08                                          01S0117
         MH    @14,@CH00123                                     01S0117
         ALR   @01,@14                                          01S0117
         ST    @01,ALGTABSZ(,@15)                               01S0117
* /* ?GETSTORG (SPID,ALGTABSZ,ALGTABP);*/                       01S0118
*   /* DEFINITIONS OF GETMAIN PARMS */                          01S0118
*   DCL                                                         01S0118
*     GTSTR0   FIXED(31) REG(0),/*GTMN PARM REG*/               01S0118
*     GTSTR1   FIXED(31) REG(1),/*GTMN PARM REG*/               01S0118
*     GTSTR2   PTR(31)   REG(2),/*GTMN PARM REG*/               01S0118
*     GTSTR15  FIXED(31) REG(15),/*GTMN RET COD*/               01S0118
*     GTSTRTCD FIXED(31); /* GETMAIN RTN CODE  */               01S0118
*   DCL                                                         01S0119
*     GTSTR3   FIXED(31) REG(3),/* CLEARING REG*/               01S0119
*     GTSTR4   FIXED(31) REG(4),/* CLEARING REG*/               01S0119
*     GTSTR5   FIXED(31) REG(5),/* CLEARING REG*/               01S0119
*     GTSTR6   FIXED(31) REG(6),/* CLEARING REG*/               01S0119
*     GTSTR7   FIXED(31) REG(7),/* CLEARING REG*/               01S0119
*     GTSTR8   FIXED(31) REG(8),/* CLEARING REG*/               01S0119
*     GTSTZERO FIXED(31) INIT(0),                               01S0119
*     GTST253  FIXED(31) CONSTANT(253);                         01S0119
*   RFY (GTSTR0,GTSTR1,GTSTR2) RSTD; /*SAVE RGS*/               01S0120
*   GTSTR0 = ALGTABSZ; /* SET AMOUNT*/                          01S0121
         ST    @01,@TF00001                                     01S0121
         L     GTSTR0,@TF00001                                  01S0121
*   GTSTR2 = SPID; /* SET SUBPOOL*/                             01S0122
         LA    GTSTR2,230                                       01S0122
*   GENERATE CODE;                                              01S0123
     GETMAIN RC,LV=(0),SP=(2)  DO GETMAIN
*   GTSTRTCD = GTSTR15; /* SAVE GETMAIN RET COD*/               01S0124
         ST    GTSTR15,GTSTRTCD                                 01S0124
*   ALGTABP = GTSTR1; /* ADDR OF GOTN STORG*/                   01S0125
         L     @08,@PC00001                                     01S0125
         L     @08,ALCWAPTR(,@08)                               01S0125
         ST    GTSTR1,ALGTABP(,@08)                             01S0125
*   RFY (GTSTR0,GTSTR1,GTSTR2) UNRSTD; /*RLSE */                01S0126
*   IF GTSTRTCD = 0 THEN /*GETMAIN SUCCESSFUL? */               01S0127
         L     @15,GTSTRTCD                                     01S0127
         LTR   @15,@15                                          01S0127
         BNZ   @RF00127                                         01S0127
*     DO;               /* YES, CLEAR STORAGE.*/                01S0128
*       RFY (GTSTR2,GTSTR4,GTSTR5,GTSTR6,                       01S0129
*                          GTSTR7,GTSTR8) RSTD;                 01S0129
*       GTSTR4 = ALGTABP; /*STORG PTR*/                         01S0130
         L     @03,@PC00001                                     01S0130
         L     @03,ALCWAPTR(,@03)                               01S0130
         L     @03,ALGTABP(,@03)                                01S0130
         LR    GTSTR4,@03                                       01S0130
*       GTSTR5 = ALGTABSZ; /*STORG AMNT*/                       01S0131
         L     @03,@PC00001                                     01S0131
         L     @03,ALCWAPTR(,@03)                               01S0131
         L     GTSTR5,ALGTABSZ(,@03)                            01S0131
*       GTSTR7 = '00000000'X; /*PAD CHAR & LNTH*/               01S0132
         SLR   GTSTR7,GTSTR7                                    01S0132
*       IF SPID = GTST253 THEN                                  01S0133
         B     @RF00133                                         01S0133
*      GEN                                                      01S0134
*   (MODESET KEYADDR=GTSTZERO,SAVEKEY=(2),WORKREG=8);           01S0134
         MODESET KEYADDR=GTSTZERO,SAVEKEY=(2),WORKREG=8
*       GEN REFS(GTSTR4,GTSTR6);                                01S0135
@RF00133 DS    0H                                               01S0135
          MVCL  GTSTR4,GTSTR6 CLEAR GOTTEN STORG
*       IF SPID = GTST253 THEN                                  01S0136
         B     @RF00136                                         01S0136
*         GEN (MODESET KEYADDR=(2));                            01S0137
         MODESET KEYADDR=(2)
*       RFY (GTSTR2,GTSTR4,GTSTR5,GTSTR6,                       01S0138
*                          GTSTR7,GTSTR8) UNRSTD;               01S0138
@RF00136 DS    0H                                               01S0139
*     END;       /* STORAGE CLEARING COMPLETED */               01S0139
*   ELSE                                                        01S0140
*   ALGTABP= 0;   /* CLEAR RETURN ADDR. */                      01S0140
         B     @RC00127                                         01S0140
@RF00127 L     @08,@PC00001                                     01S0140
         L     @08,ALCWAPTR(,@08)                               01S0140
         SLR   @15,@15                                          01S0140
         ST    @15,ALGTABP(,@08)                                01S0140
*   GTSTR15 = GTSTRTCD;    /* GTMN RETURN CODE */               01S0141
@RC00127 L     GTSTR15,GTSTRTCD                                 01S0141
*                                      /* RESTORE LIST PRINT STATUS  */
*    /*GET SPACE                   */                           01S0142
*RTNCODE = REG15;                      /*SAVE RETURN CODE            */
         LR    RTNCODE,REG15                                    01S0142
*IF RTNCODE = SUCCESS THEN             /*WAS GETMAIN SUCCESSFUL ?    */
         LTR   RTNCODE,RTNCODE                                  01S0143
         BNZ   @RF00143                                         01S0143
*  DO;                                 /*YES, GETMAIN SUCCESSFUL     */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - DOALGTAB                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - INITIALIZE ALGORITHM INTERFACE TABLE          */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE INITIALIZES THE ALGORITHM INTERFACE TABLES:     */
*/*     POINTERS TO ALL THE ALGORITHM TABLE SECTIONS ARE SET         */
*/*     UP, THEN THE CVRPARM SECTION IS FILLED IN WITH A POINTER     */
*/*     TO THE REQUEST LIST (CVRRQLST) SECTION AND THE NUMBER OF     */
*/*     REQUEST LIST ENTRIES, AND THEN A GROUP ID IS PUT IN EACH     */
*/*     GROUP COUNT ENTRY (GRPCOUNT).                                */
*/*     NEXT, FOR EACH UNALLOCATED VOLUNIT ENTRY, THE FOLLOWING      */
*/*     REQUEST LIST ENTRY INFORMATION IS INITIALIZED: NUMBER OF     */
*/*     UNITS NEEDED(=1),PTR TO FIRST ASSOCIATED GROUP LIST ENTRY,   */
*/*     NUMBER OF ELIGIBLE GROUPS IN THE GROUP LIST ENTRY, AND       */
*/*     STATUS FLAGS. FOR EACH ELIGIBLE GROUP ASSOCIATED WITH A      */
*/*     REQUEST LIST ENTRY, THE FOLLOWING INFORMATION IS INITIALIZED */
*/*     IN THE GROUP LIST ENTRY: GROUP ID AND A PTR TO THE           */
*/*     ASSOCIATED GROUP COUNT TABLE ENTRY.                          */
*/*     IF THE GROUP BEING PROCESSED IS INELIGIBLE           @Y30QPPA*/
*/*     BECAUSE OF JES3 (EDLJINEL = ON) THE GROUP            @Y30QPPA*/
*/*     IGNORE INDICATOR (CVRGSKP) IS SET ON. IF THE         @Y30QPPA*/
*/*     GROUP IS ELIGIBLE TO A JES3 REQUEST BUT NOT          @Y30QPPA*/
*/*     TO THIS PARTICULAR VOLUNIT TABLE UCB ENTRY OR ONE OF @G18MP21*/
*/*     THE ENTRIES IN THE UCB POOL FOR SU 18 THEN THE GROUP @G18MP21*/
*/*     IGNORE INDICATOR(CVRGSKP) IS TURNED ON.              @G18MP21*/
*/*                                                                  */
*/*   OPERATION - THE OPERATION IS DOCUMENTED BY THE CODE ITSELF.    */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT - ALGTABP - PTR TO ALGORITHM TABLES WHICH CONTAIN ALL 0'S*/
*/*           RQLSTCTR - NUMBER OF ALG REQUEST LIST ENTRIES NEEDED   */
*/*           GPLSTCTR - NUMBER OF ALG GROUP LIST ENTRIES NEEDED     */
*/*           GMTENTLN - SIZE OF GROUP MASK                          */
*/*           SIOT1P - PTR FIRST SIOT IN CHAIN                       */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTION)                              */
*/*                                                                  */
*/*  CONDITION - ALGORITHM INTERFACE TABLES ARE INITIALIZED          */
*/*                                                                  */
*/*  OUTPUT - THE FOLLOWING ALGORITHM INTERFACE TABLE FIELDS         */
*/*           HAVE BEEN INITIALIZED: ALL OF ALGPTRS, CVRRQPTR,       */
*/*               CVRNREQ, CVRREQS, CVRFLGS, CVRGSKP,        @Y30QPPA*/
*/*               CVRNGRP,CVRGRPPT,CVRGCPTR, CVRGRPID, AND GRPIDENT. */
*/*                                                                  */
*/*  RETURN CODE - (NONE)                                            */
*/*                                                                  */
*/********************************************************************/
*RFY CVRPARM BASED(ALGPARMP);                                   02S0145
*RFY CVRRQLST BASED(REQENTP);                                   02S0146
*RFY CVRGPLST BASED(GRPENTP);                                   02S0147
*RFY GRPCOUNT BASED(GPCTENTP);                                  02S0148
*ALGPARMP = ALGTABP + LENGTH(ALGPTRS); /*POINT TO INTERFACE CNTRL BLK*/
         L     @08,@PC00001                                     02S0149
         L     @08,ALCWAPTR(,@08)                               02S0149
         L     @08,ALGTABP(,@08)                                02S0149
         LA    @06,16                                           02S0149
         ALR   @06,@08                                          02S0149
         ST    @06,ALGPARMP(,@08)                               02S0149
*ALGRQLTP = ALGPARMP + LENGTH(CVRPARM);  /*POINT TO REQUEST LIST     */
         LA    @03,12                                           02S0150
         ALR   @03,@06                                          02S0150
         ST    @03,ALGRQLTP(,@08)                               02S0150
*CVRRQPTR = ALGRQLTP;                  /*HAVE CNTRL BLK POINT TO REQL*/
         ST    @03,CVRRQPTR(,@06)                               02S0151
*CVRNREQ = RQLSTCTR;                   /*STORE NUMBER OF REQUESTS    */
         STH   RQLSTCTR,CVRNREQ(,@06)                           02S0152
*ALGGLSTP=ALGRQLTP+(LENGTH(CVRRQLST)*RQLSTCTR); /*POINT TO GROUP LIST*/
         LR    @06,RQLSTCTR                                     02S0153
         MH    @06,@CH01875                                     02S0153
         ALR   @03,@06                                          02S0153
         ST    @03,ALGGLSTP(,@08)                               02S0153
*ALGGCNTP=ALGGLSTP+(LENGTH(CVRGPLST)*GPLSTCTR); /*POINT TO GROUP CNTS*/
         L     @10,GPLSTCTR                                     02S0154
         SLA   @10,4                                            02S0154
         ALR   @03,@10                                          02S0154
         ST    @03,ALGGCNTP(,@08)                               02S0154
*GPCTENTP = ALGGCNTP;                  /*POINT TO FIRST GROUP COUNTS */
         LR    GPCTENTP,@03                                     02S0155
*DO THEGROUP=ONE TO NUMGROUP;          /*INSERT GROUPID IN EACH GROUP
*                                        COUNT ENTRY                 */
         LA    THEGROUP,1                                       02S0156
         B     @DE00156                                         02S0156
@DL00156 DS    0H                                               02S0157
*  GRPIDENT = THEGROUP;                                         02S0157
         STH   THEGROUP,GRPIDENT(,GPCTENTP)                     02S0157
*  GPCTENTP = GPCTENTP + LENGTH(GRPCOUNT); /*POINT TO NEXT GROUP CNTS*/
         AH    GPCTENTP,@CH00040                                02S0158
*END;                                                           02S0159
         AH    THEGROUP,@CH00058                                02S0159
@DE00156 CR    THEGROUP,NUMGROUP                                02S0159
         BNH   @DL00156                                         02S0159
*REQENTP = ALGRQLTP;                   /*POINT TO FIRST REQ LIST ENT */
         L     @10,@PC00001                                     02S0160
         L     @10,ALCWAPTR(,@10)                               02S0160
         L     @08,ALGTABP(,@10)                                02S0160
         L     REQENTP,ALGRQLTP(,@08)                           02S0160
*GRPENTP = ALGGLSTP;                   /*POINT TO FIRST GROUP LST ENT*/
         L     GRPENTP,ALGGLSTP(,@08)                           02S0161
*RFY GMTENTRY BASED(EDLGMTP);          /*BASE GROUP MASKS ON EDL PTRS*/
*SAVAFFID = ZERO;                      /*INIT MULTI-UNIT/GEN GROUP ID*/
         SLR   @08,@08                                          02S0163
         STH   @08,SAVAFFID                                     02S0163
*SIOTPTR = SIOT1P;                     /*POINT TO FIRST SIOT         */
         L     SIOTPTR,SIOT1P(,@10)                             02S0164
*DO WHILE SIOTPTR ^= ZERO;             /*SCAN ALL SIOTS              */
         B     @DE00165                                         02S0165
@DL00165 DS    0H                                               02S0166
*  IF SIOTALCD = NO THEN               /*IS REQUEST UNALLOCATED ?    */
         TM    SIOTALCD(SIOTPTR),B'00000010'                    02S0166
         BNZ   @RF00166                                         02S0166
*    DO;                               /*YES, REQ IS UNALLOC..PROCESS*/
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - DETMULTI                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - DETERMINE MULTI-UNIT/GENERIC                  */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE DETERMINES IF THE SIOT REQUIRES MULTIPLE DEVICES*/
*/*     AND IS ALSO ELIGIBLE TO MORE THAN ONE (INCOMPATIBLE) GENERIC.*/
*/*     IF SO, THE 'SETMULTI' SWITCH IS SET ON.                      */
*/*                                                                  */
*/*   OPERATION - THE OPERATION IS DOCUMENTED BY THE CODE ITSELF.    */
*/*                                                                  */
*/*  ENTRY - (INLINE SUBROUTINE)                                     */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT - SVOLUNAD - PTR TO SIOTS FIRST VOLUNIT ENTRY.           */
*/*           SVOLUNNO - NUMBER OF VOLUNIT ENTRIES FOR SIOT.         */
*/*           SIOTEDLP - PTR TO SIOTS ELIGIBLE DEVICE LIST.          */
*/*           SIOTAFID - MULTI-UNIT/GEN ID FIELD                     */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITION - FUNCTION COMPLETED.                                */
*/*                                                                  */
*/*   OUTPUT - SETMULTI SET TO 1 IF SIOT IS MULTI-UNIT/GENERIC.      */
*/*                    SET TO 0 OTHERWISE.                           */
*/*                                                                  */
*/*            SAVAFFID - LAST MULTI-UNIT/GEN GROUP ID ASSIGNED      */
*/*                                                                  */
*/*            SIOTAFID - MULTI-UNIT/GEN ID FIELD                    */
*/*                                                                  */
*/*   RETURN CODE - (NONE)                                           */
*/*                                                                  */
*/********************************************************************/
*SETMULTI = OFF;                       /*ASSUME NOT MULTI=UNIT/GEN   */
         NI    SETMULTI,B'01111111'                             03S0168
*NUMUNITS = ZERO;                      /*INIT COUNT OF UNITS REQUIRED*/
         SLR   NUMUNITS,NUMUNITS                                03S0169
*VUPTR = SVOLUNAD;                     /*POINT TO SIOTS FIRT VU ENTRY*/
         L     VUPTR,SVOLUNAD(,SIOTPTR)                         03S0170
*DO VUCTR = ONE TO SVOLUNNO;           /*SCAN ALL SIOTS VU ENTRIES   */
         LA    @10,1                                            03S0171
         B     @DE00171                                         03S0171
@DL00171 DS    0H                                               03S0172
*  IF VDEVREQD = ON THEN               /*DOES ENTRY REQUIRE A UNIT ? */
         TM    VDEVREQD(VUPTR),B'00100000'                      03S0172
         BNO   @RF00172                                         03S0172
*    DO;                               /*YES UNIT IS REQUIRED        */
*      NUMUNITS = NUMUNITS + ONE;      /*INCREMENT COUNT OF UNITS REQ*/
         AH    NUMUNITS,@CH00058                                03S0174
*    END;                                                       03S0175
*  ELSE;                               /*UNIT IS NOT REQUIRED        */
@RF00172 DS    0H                                               03S0177
*  VUPTR = VUPTR + LENGTH(VOLUNTAB);   /*POINT TO NEXT VU ENTRY      */
         AH    VUPTR,@CH01875                                   03S0177
*END;                                                           03S0178
         LA    @10,1                                            03S0178
         AL    @10,VUCTR                                        03S0178
@DE00171 ST    @10,VUCTR                                        03S0178
         CH    @10,SVOLUNNO(,SIOTPTR)                           03S0178
         BNH   @DL00171                                         03S0178
*IF NUMUNITS > ONE                     /*COULD REQ BE MULTI-UNIT ..  */
*   & EDLMGENS = OFF THEN              /*..AND ONLY 1 TYPE ALLOWED ? */
         LA    @10,1                                            03S0179
         CR    NUMUNITS,@10                                     03S0179
         BNH   @RF00179                                         03S0179
         L     @08,SIOTEDLP(,SIOTPTR)                           03S0179
         TM    EDLMGENS(@08),B'01000000'                        03S0179
         BNZ   @RF00179                                         03S0179
*  DO;                                 /*YES,PROCESS                 */
*    ELIGENCT = ZERO;                  /*SET COUNT OF ELIGIBLES = 0  */
         SLR   ELIGENCT,ELIGENCT                                03S0181
*    EDLPTR = EDLFGENP;                /*POINT TO FIRST EDL GENERIC  */
         L     EDLPTR,EDLFGENP(,@08)                            03S0182
*    DO GENSCTR = ONE TO EDLGENNO;     /*SCAN ALL GENERICS IN EDL    */
         LR    GENSCTR,@10                                      03S0183
         B     @DE00183                                         03S0183
@DL00183 DS    0H                                               03S0184
*      IF EINDEVTP = OFF THEN          /*IS GENERIC STILL ELIGIBLE?  */
         TM    EINDEVTP(EDLPTR),B'10000000'                     03S0184
         BNZ   @RF00184                                         03S0184
*        DO;                           /*YES GENERIC IS ELIGIBLE     */
*          ELIGENCT = ELIGENCT + ONE; /*INCREMENT COUNT OF ELIGIBLE  */
         AH    ELIGENCT,@CH00058                                03S0186
*        END;                                                   03S0187
*      ELSE;                           /*GENERIC IS NOT ELIGIBLE     */
@RF00184 DS    0H                                               03S0189
*      EDLPTR = EDLNXTNT;              /*POINT TO NEXT GENERIC ENTRY */
         L     EDLPTR,EDLNXTNT(,EDLPTR)                         03S0189
*    END;                                                       03S0190
         AH    GENSCTR,@CH00058                                 03S0190
@DE00183 L     @10,SIOTEDLP(,SIOTPTR)                           03S0190
         C     GENSCTR,EDLGENNO(,@10)                           03S0190
         BNH   @DL00183                                         03S0190
*    IF ELIGENCT > ONE THEN            /*IS SIOT ELIBLE TO >1 GENERIC*/
         LA    @10,1                                            03S0191
         CR    ELIGENCT,@10                                     03S0191
         BNH   @RF00191                                         03S0191
*      DO;                             /*YES                         */
*        SETMULTI = YES;               /*INDICATE SIOT IS MULTI TYPE */
         OI    SETMULTI,B'10000000'                             03S0193
*        IF SIOTAFID=ZERO THEN         /*IS SIOT ALREADY PART OF A
*                                        MULTI-UNIT/GEN(MUG) GROUP ? */
         ICM   @08,3,SIOTAFID(SIOTPTR)                          03S0194
         BNZ   @RF00194                                         03S0194
*          DO;                         /*NO, START A NEW GROUP       */
*            SAVAFFID=SAVAFFID + ONE;  /*PICK THE NEXT MULTI-UNIT
*                                        GROUP ID                    */
         AH    @10,SAVAFFID                                     03S0196
         STH   @10,SAVAFFID                                     03S0196
*            SIOTAFID=SAVAFFID;        /*PUT MUG ID IN SIOT          */
         STH   @10,SIOTAFID(,SIOTPTR)                           03S0197
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - FINDAFFS                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - MARK ALL SIOT ASSOCIATED VIA AFFINITIES       */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE LOCATES ALL OTHER SIOTS WHOSE COMBINATION       */
*/*     OF VOLUNIT REQUESTS ALL HAVE 'DEVICE-TYPE' AFFINITY TO       */
*/*     EACH OTHER AND TO THE SIOT BEING PROCESSED. ALL SUCH         */
*/*     SIOTS ARE ASSIGNED THE SAME MULTI-UNIT/MULTI GENERIC         */
*/*     GROUP ID (SIOTAFID) TO INDICATE THAT THESE REQUESTS MUST     */
*/*     ALL BE ASSIGNED TO THE SAME GENERIC DEVICE TYPE.             */
*/*                                                                  */
*/*   OPERATION -                                                    */
*/*       THE SIOT CHAIN IS SCANNED TO LOCATE ALL UNALLOCATED        */
*/*       SIOTS WHICH ARE NOT IN A 'DEVICE-TYPE' AFFINITY GROUP      */
*/*       YET BUT MAY BE. TO SEE IF SUCH A SIOT SHOULD BE IN         */
*/*       THE SAME 'DEVICE-TYPE' AFFINITY GROUP, THIS ROUTINE        */
*/*       DETERMINES IF ANY OF THE SIOT'S VOLUNIT UNITIDS ARE ALSO   */
*/*       ASSIGNED TO OTHER SIOTS IN THE 'DEVICE-TYPE' AFFINITY      */
*/*       GROUP.                                                     */
*/*                                                                  */
*/*       TO ENSURE THAT ALL SIOTS WHOSE COMBINATION OF VOLUNIT      */
*/*       UNITIDS OVERLAP ARE FOUND, THIS CODE CONTINUES TO SCAN     */
*/*       THE SIOT CHAIN UNTIL ON ONE SCAN OF THE SIOTS NO           */
*/*       ADDITIONAL 'AFFINITY' SIOT IS FOUND.                       */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT - SIOT1P - PTR TO THE FIRST SIOT IN THE CHAIN            */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITION - FUNCTION COMPLETED                                 */
*/*                                                                  */
*/*   OUTPUT - SIOTAFID MAY BE SET IN SOME SIOTS (I.E. THOSE WITH    */
*/*            'DEVICE TYPE' AFFINITY TO THE SIOT JUST ASSIGNED      */
*/*            THE LASTEST SIOTAFID.                                 */
*/*                                                                  */
*/*   RETURN CODES - (NONE)                                          */
*/*                                                                  */
*/********************************************************************/
*CONTINUE = ON;                        /*SCAN SIOTS AT LEAST ONCE    */
         OI    CONTINUE,B'10000000'                             04S0198
*DO WHILE CONTINUE = ON;               /*SCAN SIOTS UNTIL NO SIOTAFID
*                                        ASSIGN ON ONE COMPLETE SCAN */
         B     @DE00199                                         04S0199
@DL00199 DS    0H                                               04S0200
*  CONTINUE = OFF;                     /*ASSUME NO SIOTAFID ASSIGNED */
         NI    CONTINUE,B'01111111'                             04S0200
*  SAFFPTR = SIOT1P;                   /*POINT TO FIRST SIOT IN CHAIN*/
         L     @10,@PC00001                                     04S0201
         L     @10,ALCWAPTR(,@10)                               04S0201
         L     SAFFPTR,SIOT1P(,@10)                             04S0201
*  DO WHILE SAFFPTR ^= ZERO;           /*SCAN ALL SIOTS              */
         B     @DE00202                                         04S0202
@DL00202 DS    0H                                               04S0203
*    IF SAFFPTR->SIOTALCD = OFF        /*IS SIOT NOT FULLY ALLOC'D,..*/
*        & SAFFPTR->SIOTEDLP->EDLMGENS=OFF /*..WITHOUT EDLMGENS=1,.. */
*        & SAFFPTR->SIOTAFID = ZERO THEN /*...AND NOT IN A MUG GROUP?*/
         TM    SIOTALCD(SAFFPTR),B'00000010'                    04S0203
         BNZ   @RF00203                                         04S0203
         L     @10,SIOTEDLP(,SAFFPTR)                           04S0203
         TM    EDLMGENS(@10),B'01000000'                        04S0203
         BNZ   @RF00203                                         04S0203
         ICM   @10,3,SIOTAFID(SAFFPTR)                          04S0203
         BNZ   @RF00203                                         04S0203
*      DO;                             /*YES,SEE IF IN NEW MUG GROUP */
*        VAFFPTR = SAFFPTR->SVOLUNAD;  /*PTR TO SIOT'S FIRST VU ENTRY*/
         L     VAFFPTR,SVOLUNAD(,SAFFPTR)                       04S0205
*        DO VAFFCTR= ONE TO SAFFPTR->SVOLUNNO /*SCAN ALL SIOT'S VU'S */
*            WHILE (SAFFPTR->SIOTAFID=ZERO);                    04S0206
         LA    VAFFCTR,1                                        04S0206
         B     @DE00206                                         04S0206
@DL00206 ICM   @10,3,SIOTAFID(SAFFPTR)                          04S0206
         BNZ   @DC00206                                         04S0206
*          VSCANP = VOLUNPTR;          /*POINT TO BEGINNING OF VU TAB*/
         L     @10,@PC00001                                     04S0207
         L     @10,ALCWAPTR(,@10)                               04S0207
         L     VSCANP,VOLUNPTR(,@10)                            04S0207
*          DO VSCANCTR = ONE TO VOLUNSZE/LENGTH(VOLUNTAB)       04S0208
*              WHILE (SAFFPTR->SIOTAFID=ZERO); /*SCAN WHOLE VU TABLE */
         LA    VSCANCTR,1                                       04S0208
         B     @DE00208                                         04S0208
@DL00208 SLR   @15,@15                                          04S0208
         CH    @15,SIOTAFID(,SAFFPTR)                           04S0208
         BNE   @DC00208                                         04S0208
*            IF VSCANP->VOLUNTID=VAFFPTR->VOLUNTID /*SAME UNIT ID    */
*                & VSCANP->VOLSIOTP->SIOTAFID^=ZERO THEN/*AND IN MUG?*/
         CLC   VOLUNTID(2,VSCANP),VOLUNTID(VAFFPTR)             04S0209
         BNE   @RF00209                                         04S0209
         L     @01,VOLSIOTP(,VSCANP)                            04S0209
         LH    @14,SIOTAFID(,@01)                               04S0209
         CR    @14,@15                                          04S0209
         BE    @RF00209                                         04S0209
*              DO;                     /*YES, SIOT IS ALSE IN MUG GRP*/
*                CONTINUE = ON;        /*INDICATE ANOTHER SCAN NEEDED*/
         OI    CONTINUE,B'10000000'                             04S0211
*                SAFFPTR->SIOTAFID=VSCANP->VOLSIOTP->SIOTAFID;  04S0212
         STH   @14,SIOTAFID(,SAFFPTR)                           04S0212
*                                      /*PUT MUG GROUP ID IN SIOT    */
*              END;                                             04S0213
*            ELSE;                     /*NOT SAME UNIT ID OR NO MUG  */
@RF00209 DS    0H                                               04S0215
*            VSCANP=VSCANP + LENGTH(VOLUNTAB); /*PT TO NEXT VU ENTRY */
         AH    VSCANP,@CH01875                                  04S0215
*          END;                                                 04S0216
         AH    VSCANCTR,@CH00058                                04S0216
@DE00208 L     @15,@PC00001                                     04S0216
         L     @01,ALCWAPTR(,@15)                               04S0216
         L     @00,VOLUNSZE(,@01)                               04S0216
         SRDA  @00,32                                           04S0216
         D     @00,@CF01875                                     04S0216
         CR    VSCANCTR,@01                                     04S0216
         BNH   @DL00208                                         04S0216
@DC00208 DS    0H                                               04S0217
*          VAFFPTR=VAFFPTR + LENGTH(VOLUNPTR); /*PT TO SIOTS NEXT VU */
         AH    VAFFPTR,@CH00076                                 04S0217
*        END;                                                   04S0218
         AH    VAFFCTR,@CH00058                                 04S0218
@DE00206 CH    VAFFCTR,SVOLUNNO(,SAFFPTR)                       04S0218
         BNH   @DL00206                                         04S0218
@DC00206 DS    0H                                               04S0219
*      END;                                                     04S0219
*    ELSE;                             /*DONT PROCESS SIOT           */
@RF00203 DS    0H                                               04S0221
*    SAFFPTR = SAFFPTR->SIOTNPTR;      /*POINT TO THE NEXT SIOT      */
         L     SAFFPTR,SIOTNPTR(,SAFFPTR)                       04S0221
*  END;                                                         04S0222
@DE00202 LTR   SAFFPTR,SAFFPTR                                  04S0222
         BNZ   @DL00202                                         04S0222
*END;                                                           04S0223
@DE00199 TM    CONTINUE,B'10000000'                             04S0223
         BO    @DL00199                                         04S0223
*          END;                                                 03S0224
*        ELSE;                         /*SIOT IS ALREADY IN A   03S0225
*                                        MUG GROUP                   */
@RF00194 DS    0H                                               03S0226
*      END;                                                     03S0226
*  END;                                                         03S0227
*ELSE;                                 /*NOT MULTI-UNIT,MULTI-GENERIC*/
@RF00179 DS    0H                                               03S0229
*      VUPTR = SVOLUNAD;               /*POINT TO SIOTS FIRST VOLUNIT*/
@RC00179 L     VUPTR,SVOLUNAD(,SIOTPTR)                         02S0229
*      DO VUCTR = ONE TO SVOLUNNO;     /*PROCESS EACH OF SIOTS VOLUNS*/
         LA    @10,1                                            02S0230
         B     @DE00230                                         02S0230
@DL00230 DS    0H                                               02S0231
*      IF VOLALOC=NO × VUDNALOC = ON THEN /*IS VOLUNIT ENTRY ALLOC'D */
         TM    VUDNALOC(VUPTR),B'00001000'                      02S0231
         BNZ   @RT00231                                         02S0231
         TM    VOLALOC(VUPTR),B'10000000'                       02S0231
         BO    @RF00231                                         02S0231
@RT00231 DS    0H                                               02S0232
*        DO;                           /*NO, MAKE REQUEST LIST ENTRY */
*          CVRVUPTR=VUPTR;             /*PUT VUPTR IN REQ ENTRY      */
         ST    VUPTR,CVRVUPTR(,REQENTP)                         02S0233
*          VOLALGTP=REQENTP;           /*PUT REQ LIST PTR IN VU      */
         ST    REQENTP,VOLALGTP(,VUPTR)                         02S0234
*          CVRREQ1 = ONE;              /*PUT NUMBER OF UNITS NEEDED
*                                        IN TABLE                    */
         LA    @10,1                                            02S0235
         STH   @10,CVRREQ1(,REQENTP)                            02S0235
*          CVRSKFLG = ON;              /*INDICATE DONT PROCESS REQ   */
         OI    CVRSKFLG(REQENTP),B'10000000'                    02S0236
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - INITALGE                                          */
*/*                                                                  */
*/* DESCRIPTIVE - INITIALIZE ALG REQUEST LIST ENTRY FLAGS            */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE INITIALIZES FOUR FLAGS IN AN ALGORITHM          */
*/*     REQUEST LIST TABLE ENTRY. THE FOUR FLAGS INITIALIZED         */
*/*     ARE :                                                        */
*/*         CVRDUPLI - 0 - REQUEST MAY NEED A UNIQUE UNIT.           */
*/*                  - 1 - REQUEST DOES NOT NEED A UNIQUE UNIT.      */
*/*                                                                  */
*/*         CVRSCRTH - 0 - NOT A SHARABLE,NON-PVT,NON-SPECIFIC       */
*/*                        VOLUME REQUEST.                           */
*/*                  - 1 - A SHARABLE NON-PRIVATE, NON-SPECIFIC      */
*/*                        VOLUME REQUEST.                           */
*/*                                                                  */
*/*         CVRMULTI - 0 - NOT A MULTI-UNIT,MULTI-GENERIC REQUEST.   */
*/*                  - 1 - A MULTI-UNIT,MULTI-GENERIC REQUEST.       */
*/*                                                                  */
*/*         CVRIGNOR - 0 - NOT A DEMAND REQUEST                      */
*/*                  - 1 - DEMAND REQUEST                            */
*/*                                                                  */
*/*   OPERATION -                                                    */
*/*       THE VOLUNIT TABLE ENTRIES IN FRONT OF THIS ENTRY ARE       */
*/*       SCANNED TO DETERMINE IF THIS IS A UNIQUE UNIT REQUEST      */
*/*       (I.E. CVRDUPLI SHOULD NOT BE SET).                         */
*/*       FLAGS IN THE VOLUNIT ENTRY ARE USED TO DETERMINE IF        */
*/*       THE CVRSCRTH FLAG SHOULD BE SET.                           */
*/*       IF THE CVRMULTI FLAG IS TO BE SET ON, THEN AN INDICATOR    */
*/*       (SETMULTI) WILL HAVE BEEN SET FOR THIS SIOT BEFORE ENTRY   */
*/*       TO THIS ROUTINE.                                           */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT - VUPTR - POINTER TO VOLUNIT TABLE ENTRY TO PROCESS      */
*/*         -          - PTR TO ALG REQUEST LIST TABLE ENTRY         */
*/*         - VOLUNPTR - PTR TO THE VOLUNIT TABLE                    */
*/*         - SETMULTI - INDICATOR IF SIOT IS MULTI-UNIT+GENERIC     */
*/*                                                                  */
*/* EXIT - (INLINE SUBROUTINE)                                       */
*/*                                                                  */
*/*   CONDITION - ALGORITHM REQUEST LIST TABLE ENTRY FLAGS HAVE      */
*/*               BEEN INITIALIZED.                                  */
*/*                                                                  */
*/*   OUTPUT - THE FOLLOWING FLAGS IN THE ALGORITHM REQUEST          */
*/*            LIST TABLE (CVRRQLST) ARE INITIALIZED.                */
*/*                 CVRDUPLI                                         */
*/*                 CVRSCRTH                                         */
*/*                 CVRMULTI                                         */
*/*                                                                  */
*/*   RETURN CODE - (NONE)                                           */
*/*                                                                  */
*/********************************************************************/
*COMPARID = VOLUNTID;                  /*COPY UNIT ID FROM VOLUNIT   */
         LH    COMPARID,VOLUNTID(,VUPTR)                        03S0237
*UNIQUNIT = YES;                       /*ASSUME UNIQUE UNIT REQUEST  */
         OI    UNIQUNIT,B'10000000'                             03S0238
*RFY VOLUNTAB BASED(SCANVOLP);                                  03S0239
*SCANVOLP = VOLUNPTR;                  /*POINT TO FIRST VOLUNIT ENTRY*/
         L     @15,@PC00001                                     03S0240
         L     @01,ALCWAPTR(,@15)                               03S0240
         L     SCANVOLP,VOLUNPTR(,@01)                          03S0240
*DO VUC = ONE TO VOLUNSZE/LENGTH(VOLUNTAB);/*RESCAN VOLUNIT ENTRIES
*                                        UP TO ENTRY BEING PROCESSED */
         LR    VUC,@10                                          03S0241
         B     @DE00241                                         03S0241
@DL00241 DS    0H                                               03S0242
*  IF VOLUNTID = COMPARID              /*HAS DUP UNIT ID BEEN FOUND? */
*    & (VUPTR>SCANVOLP                                          03S0242
*    × (VOLSIOTP->SIOTDMND = ON                                 03S0242
*    & VOLID = VUPTR->VOLID)) THEN                              03S0242
         CH    COMPARID,VOLUNTID(,SCANVOLP)                     03S0242
         BNE   @RF00242                                         03S0242
         CR    VUPTR,SCANVOLP                                   03S0242
         BH    @RT00242                                         03S0242
         L     @10,VOLSIOTP(,SCANVOLP)                          03S0242
         TM    SIOTDMND(@10),B'10000000'                        03S0242
         BNO   @RF00242                                         03S0242
         CLC   VOLID(6,SCANVOLP),VOLID(VUPTR)                   03S0242
         BNE   @RF00242                                         03S0242
@RT00242 DS    0H                                               03S0243
*    DO;                               /*YES,UNIT ID IS A DUPLICATE  */
*      UNIQUNIT = NO;                  /*INDICATE DUPLICATE UNIT REQ */
         NI    UNIQUNIT,B'01111111'                             03S0244
*      IF VOLSIOTP->SIOTDMND = ON                               03S0245
*        & VUPTR->VOLSIOTP->SIOTDMND=OFF                        03S0245
*        & VOLID = VUPTR -> VOLID THEN                          03S0245
         L     @10,VOLSIOTP(,SCANVOLP)                          03S0245
         TM    SIOTDMND(@10),B'10000000'                        03S0245
         BNO   @RF00245                                         03S0245
         L     @10,VOLSIOTP(,VUPTR)                             03S0245
         TM    SIOTDMND(@10),B'10000000'                        03S0245
         BNZ   @RF00245                                         03S0245
         CLC   VOLID(6,SCANVOLP),VOLID(VUPTR)                   03S0245
         BNE   @RF00245                                         03S0245
*        VUPTR -> VUDNALOC = ON;       /*ONLY ALOC AS AFFINITY       */
         OI    VUDNALOC(VUPTR),B'00001000'                      03S0246
*      ELSE;                                                    03S0247
@RF00245 DS    0H                                               03S0248
*    END;                                                       03S0248
*  ELSE;                               /*DUP UNIT ID NOT YET FOUND   */
@RF00242 DS    0H                                               03S0250
*  SCANVOLP=SCANVOLP + LENGTH(VOLUNTAB);/*POINT TO NEXT VOLUNIT ENTRY*/
         AL    SCANVOLP,@CF01875                                03S0250
*END;                                                           03S0251
         AH    VUC,@CH00058                                     03S0251
@DE00241 L     @10,@PC00001                                     03S0251
         L     @10,ALCWAPTR(,@10)                               03S0251
         L     @00,VOLUNSZE(,@10)                               03S0251
         SRDA  @00,32                                           03S0251
         D     @00,@CF01875                                     03S0251
         CR    VUC,@01                                          03S0251
         BNH   @DL00241                                         03S0251
*RFY VOLUNTAB BASED(VUPTR);            /*USE NORMAL VOLUNIT BASE     */
*IF UNIQUNIT = NO THEN                 /*IS UNIT REQ REALLY UNIQUE ? */
         TM    UNIQUNIT,B'10000000'                             03S0253
         BNZ   @RF00253                                         03S0253
*  DO;                                 /*NO, INDICATE DUPLICATE      */
*    CVRDUPLI = ON;                    /*TURN ON DUPLICATE REQ BIT   */
         OI    CVRDUPLI(REQENTP),B'10000000'                    03S0255
*  END;                                                         03S0256
*ELSE;                                 /*UNIT REQ IS UNIQUE          */
@RF00253 DS    0H                                               03S0258
*IF ((VOLNSHR = OFF)                   /*IS THE REQUEST SHAREABLE    */
*   × (VOLNSHR=ON & VOLTAREQ=ON))                               03S0258
*   & (VOLTAREQ=ON × VOLDAREQ=ON)                               03S0258
*   & VOLPRV = OFF                     /*..AND NOT PRIVATE           */
*   & VOLSPEC = OFF                    /*..AND NOT FOR A SPECIFIC VOL*/
*   & VOLPUB = ON THEN                 /*..BUT NEEDS A PUBLIC VOLUME?*/
         TM    VOLNSHR(VUPTR),B'00001000'                       03S0258
         BZ    @GL00011                                         03S0258
         TM    VOLNSHR(VUPTR),B'00001000'                       03S0258
         BNO   @RF00258                                         03S0258
         TM    VOLTAREQ(VUPTR),B'10000000'                      03S0258
         BNO   @RF00258                                         03S0258
@GL00011 TM    VOLTAREQ(VUPTR),B'10100000'                      03S0258
         BZ    @RF00258                                         03S0258
         TM    VOLPUB(VUPTR),B'10000000'                        03S0258
         BNO   @RF00258                                         03S0258
         TM    VOLPRV(VUPTR),B'01100000'                        03S0258
         BNZ   @RF00258                                         03S0258
*  DO;                                 /*YES,INDICATE IN ALG TABLE   */
*    CVRSCRTH = ON;                    /*TURN ON SCRATCH INDICATOR   */
         OI    CVRSCRTH(REQENTP),B'00001000'                    03S0260
*  END;                                                         03S0261
*ELSE;                                 /*NOT A SCRATCH REQUEST       */
@RF00258 DS    0H                                               03S0263
*IF SETMULTI = ON THEN                 /*IS SIOT MULTI-UNIT/GENERIC? */
         TM    SETMULTI,B'10000000'                             03S0263
         BNO   @RF00263                                         03S0263
*  DO;                                 /*YES..                       */
*    CVRMULTI = ON;                    /*INDICATE IN ALGORITHM TABLE */
         OI    CVRMULTI(REQENTP),B'00000100'                    03S0265
*  END;                                                         03S0266
*ELSE;                                 /*SIOT NOT MULTI-UNIT/GENERIC */
@RF00263 DS    0H                                               03S0268
*IF SIOTDMND=ON THEN                   /*DEMAND REQ ?                */
         TM    SIOTDMND(SIOTPTR),B'10000000'                    03S0268
         BNO   @RF00268                                         03S0268
*  DO;                                 /*YES,...                     */
*    CVRIGNOR = ON;                    /*MARK PERMANENTLY IGNORE     */
         OI    CVRIGNOR(REQENTP),B'00000010'                    03S0270
*  END;                                                         03S0271
*ELSE;                                 /*NOT A DEMAND REQ            */
@RF00268 DS    0H                                               03S0273
*          CVRGRPPT = GRPENTP;         /*POINT REQ TO FIRST GROUP ENT*/
         ST    GRPENTP,CVRGRPPT(,REQENTP)                       02S0273
*          EDLPTR = EDLFGENP;          /*POINT TO FIRST GEN IN EDL   */
         L     @10,SIOTEDLP(,SIOTPTR)                           02S0274
         L     EDLPTR,EDLFGENP(,@10)                            02S0274
*          DO GENSCTR = ONE TO EDLGENNO; /*SCAN ALL GENS             */
         LA    GENSCTR,1                                        02S0275
         B     @DE00275                                         02S0275
@DL00275 DS    0H                                               02S0276
*            IF EINDEVTP = OFF THEN    /*IS GEN ELIGIBLE?            */
         TM    EINDEVTP(EDLPTR),B'10000000'                     02S0276
         BNZ   @RF00276                                         02S0276
*              DO;                     /*YES, PROCESS                */
*                EDLGNTP = EDLGRPTR;   /*POINT TO 1ST GROUP IN GEN   */
         L     EDLGNTP,EDLGRPTR(,EDLPTR)                        02S0278
*                DO EGRPCTR = ONE TO EDLGRPNO;/*SCAN ALL GROUPS IN
*                                        GEN                         */
         LA    @10,1                                            02S0279
         B     @DE00279                                         02S0279
@DL00279 DS    0H                                               02S0280
*                CVRNGRP=CVRNGRP+ONE;  /*INCREMENT COUNT OF ELIGIBLE
*                                        GROUPS IN THE REQ LIST ENTRY*/
         LA    @10,1                                            02S0280
         AH    @10,CVRNGRP(,REQENTP)                            02S0280
         STH   @10,CVRNGRP(,REQENTP)                            02S0280
*                CVRGRPID = EDLGRID;   /*PUT GROUP ID IN GRP LIST ENT*/
         MVC   CVRGRPID(2,GRPENTP),EDLGRID+2(EDLGNTP)           02S0281
*                IF EDLJINEL = ON THEN /*GROUP INELG BECAUSE OF 02S0282
*                                        JES3                @Y30QPPA*/
         TM    EDLJINEL(EDLGNTP),B'10000000'                    02S0282
         BNO   @RF00282                                         02S0282
*                  CVRGSKP = ON;       /*MARK TO IGNOR GROUP @Y30QPPA*/
         OI    CVRGSKP(GRPENTP),B'10000000'                     02S0283
*                ELSE                  /*GROUP ELIGIBLE      @Y30QPPA*/
*                  IF SU18BIT=ON&SIOTJES3=ON& /*SU18 SYSTEM  @G18MP21*/
*                     VDEVREQD=ON THEN /*AND DEVICE REQUIRED @G18MP21*/
         B     @RC00282                                         02S0284
@RF00282 L     @10,CVTPTR                                       02S0284
         L     @10,CVTIHASU(,@10)                               02S0284
         TM    SU18BIT(@10),B'00100000'                         02S0284
         BNO   @RF00284                                         02S0284
         TM    SIOTJES3(SIOTPTR),B'00100000'                    02S0284
         BNO   @RF00284                                         02S0284
         TM    VDEVREQD(VUPTR),B'00100000'                      02S0284
         BNO   @RF00284                                         02S0284
*                    DO;               /*   YES              @G18MP21*/
*                      DO I=1 TO VUPOOL# /*SCAN GROUP LIST   @G18MP21*/
*                         WHILE EDLGRID^=VUGRLIDS(I); /* WHILE  02S0286
*                                         NO MATCH FOUND     @G18MP21*/
         LA    I,1                                              02S0286
         B     @DE00286                                         02S0286
@DL00286 LR    @15,I                                            02S0286
         SLA   @15,3                                            02S0286
         L     @01,VUGRID(,VUPTR)                               02S0286
         L     @14,EDLGRID(,EDLGNTP)                            02S0286
         AL    @01,@CF01885                                     02S0286
         C     @14,VUGRLIDS(@15,@01)                            02S0286
         BE    @DC00286                                         02S0286
*                      END;            /* END SCAN GROUP LIST@G18MP21*/
         AH    I,@CH00058                                       02S0287
@DE00286 L     @01,VUUCBP(,VUPTR)                               02S0287
         C     I,VUPOOL#(,@01)                                  02S0287
         BNH   @DL00286                                         02S0287
@DC00286 DS    0H                                               02S0288
*                      IF EDLGRID^=VUGRLIDS(I) THEN /*MATCH  @G18MP21*/
         LR    @15,I                                            02S0288
         SLA   @15,3                                            02S0288
         L     @01,VUGRID(,VUPTR)                               02S0288
         L     @14,EDLGRID(,EDLGNTP)                            02S0288
         AL    @01,@CF01885                                     02S0288
         C     @14,VUGRLIDS(@15,@01)                            02S0288
         BE    @RF00288                                         02S0288
*                        CVRGSKP=ON;   /* NO, SKIP GROUP     @G18MP21*/
         OI    CVRGSKP(GRPENTP),B'10000000'                     02S0289
*                    END;              /* END SU18 PROCESSING@G18MP21*/
*                  ELSE                /* SU 18 NOT IN SYSTEM@G18MP21*/
*                    IF SIOTJES3 = ON &  /*JES3 REQUEST      @Y30QPPA*/
*                       EDLGRID^=VUGRID THEN/*NOT CHOSEN UNIT@Y30QPPA*/
         B     @RC00284                                         02S0291
@RF00284 TM    SIOTJES3(SIOTPTR),B'00100000'                    02S0291
         BNO   @RF00291                                         02S0291
         CLC   EDLGRID(4,EDLGNTP),VUGRID(VUPTR)                 02S0291
         BE    @RF00291                                         02S0291
*                      CVRGSKP=ON;     /*MARK TO IGNOR GROUP @Y30QPPA*/
         OI    CVRGSKP(GRPENTP),B'10000000'                     02S0292
*                    ELSE;             /*GROUP IS INELIGIBLE TO THIS
*                                        VOLUNIT ENTRY       @Y30QPPA*/
@RF00291 DS    0H                                               02S0294
*                CVRGCPTR=ALGGCNTP+((EDLGRID-ONE)*LENGTH(GRPCOUNT));
@RC00284 DS    0H                                               02S0294
@RC00282 L     @10,@PC00001                                     02S0294
         L     @10,ALCWAPTR(,@10)                               02S0294
         L     @10,ALGTABP(,@10)                                02S0294
         L     @15,EDLGRID(,EDLGNTP)                            02S0294
         BCTR  @15,0                                            02S0294
         SLA   @15,4                                            02S0294
         AL    @15,ALGGCNTP(,@10)                               02S0294
         ST    @15,CVRGCPTR(,GRPENTP)                           02S0294
*                                      /*POINT TO GROUP COUNT ENTRY  */
*                GRPENTP=GRPENTP+LENGTH(CVRGPLST); /*POINT TO THE
*                                        NEXT GROUP LIST ENTRY       */
         AH    GRPENTP,@CH00040                                 02S0295
*                EDLGNTP = EDLNXGRP;   /*POINT TO NEXT GROUP         */
         L     EDLGNTP,EDLNXGRP(,EDLGNTP)                       02S0296
*                END;                                           02S0297
         LA    @10,1                                            02S0297
         AL    @10,EGRPCTR                                      02S0297
@DE00279 ST    @10,EGRPCTR                                      02S0297
         C     @10,EDLGRPNO(,EDLPTR)                            02S0297
         BNH   @DL00279                                         02S0297
*              END;                                             02S0298
*            ELSE;                     /*GENERIC NOT ELIGIBLE        */
@RF00276 DS    0H                                               02S0300
*              EDLPTR=EDLNXTNT;        /*POINT TO NEXT GEN           */
         L     EDLPTR,EDLNXTNT(,EDLPTR)                         02S0300
*          END;                                                 02S0301
         AH    GENSCTR,@CH00058                                 02S0301
@DE00275 L     @10,SIOTEDLP(,SIOTPTR)                           02S0301
         C     GENSCTR,EDLGENNO(,@10)                           02S0301
         BNH   @DL00275                                         02S0301
*          REQENTP=REQENTP+LENGTH(CVRRQLST); /*PTR TO NEXT REQ ENTRY */
         AL    REQENTP,@CF01875                                 02S0302
*        END;                                                   02S0303
*      ELSE;                           /*VOLUNIT ENTRY IS ALLOCATED  */
@RF00231 DS    0H                                               02S0305
*        VUPTR=VUPTR + LENGTH(VOLUNTAB);/*POINT TO SIOTS NEXT VOLUNIT*/
         AL    VUPTR,@CF01875                                   02S0305
*      END;                                                     02S0306
         LA    @10,1                                            02S0306
         AL    @10,VUCTR                                        02S0306
@DE00230 ST    @10,VUCTR                                        02S0306
         CH    @10,SVOLUNNO(,SIOTPTR)                           02S0306
         BNH   @DL00230                                         02S0306
*    END;                                                       02S0307
*  ELSE;                               /*SIOT IS ALLOCATED           */
@RF00166 DS    0H                                               02S0309
*  SIOTPTR = SIOTNPTR;                 /*POINT TO NEXT SIOT          */
         L     SIOTPTR,SIOTNPTR(,SIOTPTR)                       02S0309
*END;                                                           02S0310
@DE00165 LTR   SIOTPTR,SIOTPTR                                  02S0310
         BNZ   @DL00165                                         02S0310
*RFY GMTENTRY BASED(LUVGMTP);          /*RETURN NORMAL GRP MASK BASE */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - MGENMND                                           */
*/*                                                                  */
*/* DESCRIPTIVE NAME - ELIMINATE GENERICS FOR MUG DEMANDS            */
*/*                                                                  */
*/* FUNCTION - THIS SEGMENT DETERMINES IF THERE ARE ANY MULTI-UNIT,  */
*/*            MULTI-GENERIC GROUPS WITH DEMAND REQS - IF THERE ARE, */
*/*            IEFAB481 IS CALLED FOR EACH REQ IN THE MUG GROUP TO   */
*/*            MARK ALL OTHER GENERICS,EXCEPT THE ONE FOR THE        */
*/*            DEMANDED UNIT, AS INELIGIBLE IN BOTH THE EDL AND THE  */
*/*            ALGORITHM GROUP LIST ENTRIES.                         */
*/*                                                                  */
*/*            IT IS AN ERROR IF THERE ARE TWO DEMAND REQS IN THE    */
*/*            SAME MUG GROUP AND THEY DEMAND UNITS FROM DIFFERENT   */
*/*            DEVICE TYPES.                                         */
*/*                                                                  */
*/*   OPERATION - (DOCUMENTED BY THE CODE)                           */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*       SIOT1P - PTR TO THE FIRST SIOT IN THE CHAIN                */
*/*        SIOTAFID - MUG GROUP ID -- NONE IF ZERO                   */
*/*        SIOTDMND - 1 INDICATES A DEMAND REQ                       */
*/*        SIOTEDLP - PTR TO THE ELIGIBLE DEVICES LIST               */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITION - FUNCTION COMPLETED. NO ERRORS                      */
*/*                                                                  */
*/*   OUTPUT - (NONE EXCEPT EDL'S AND ALGORITHM TABLES MAY BE        */
*/*            UPDATED BY IEFAB481 -- SEE IEFAB481'S SPEC )          */
*/*                                                                  */
*/*   RETURN CODES - (NONE)                                          */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE)                               */
*/*                                                                  */
*/*   CONDITION - 2 DEMAND REQS IN SAME MUG GROUP WANTED DIFFERENT   */
*/*               GENERIC DEVICE TYPES                               */
*/*                                                                  */
*/*   OUTPUT - SIOTRSNC=20                                           */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE=4                                       */
*/*                                                                  */
*/********************************************************************/
*SIOTPTR = SIOT1P;                     /*POINT TO FIRST SIOT         */
         L     @10,@PC00001                                     02S0312
         L     @10,ALCWAPTR(,@10)                               02S0312
         L     SIOTPTR,SIOT1P(,@10)                             02S0312
*DO WHILE (SIOTPTR^=ZERO & RTNCODE=SUCCESS); /*SCAN ALL SIOTS        */
         B     @DE00313                                         02S0313
@DL00313 DS    0H                                               02S0314
*  IF SIOTAFID^=ZERO & SIOTDMND=ON THEN /*DEMAND REQ WHICH IS PART OF
*                                         A MULTI-UNIT/GENERIC GROUP?*/
         LH    @10,SIOTAFID(,SIOTPTR)                           02S0314
         LTR   @10,@10                                          02S0314
         BZ    @RF00314                                         02S0314
         TM    SIOTDMND(SIOTPTR),B'10000000'                    02S0314
         BNO   @RF00314                                         02S0314
*    DO;                               /*YES,REMOVE OTHER GENERICS   */
*      SAVAFFID = SIOTAFID;            /*SAVE THE AFID               */
         STH   @10,SAVAFFID                                     02S0316
*      SAVGENID = EDLFGENP->EDLDEVT;   /*SAVE THE GENERIC DEVICE TYPE*/
         L     @10,SIOTEDLP(,SIOTPTR)                           02S0317
         L     @10,EDLFGENP(,@10)                               02S0317
         MVC   SAVGENID(4),EDLDEVT(@10)                         02S0317
*      SIOSCANP = SIOT1P;              /* POINT TO FIRST SIOT        */
         L     @10,@PC00001                                     02S0318
         L     @10,ALCWAPTR(,@10)                               02S0318
         MVC   SIOSCANP(4),SIOT1P(@10)                          02S0318
*      RFY INDMSIOT BASED(SIOSCANP);                            02S0319
*      DO WHILE (SIOSCANP^=ZERO & RTNCODE=SUCCESS); /*SCAN ALL SIOTS */
         B     @DE00320                                         02S0320
@DL00320 DS    0H                                               02S0321
*        IF SIOTAFID = SAVAFFID THEN   /*REQ IN SAME MUG GROUP ?     */
         L     @10,SIOSCANP                                     02S0321
         CLC   SIOTAFID(2,@10),SAVAFFID                         02S0321
         BNE   @RF00321                                         02S0321
*          DO;                         /*YES,MARK OTHER GENS INELIG  */
*            SIOTAFID = ZERO;          /*ZERO AFID INDICATOR         */
         SLR   @06,@06                                          02S0323
         STH   @06,SIOTAFID(,@10)                               02S0323
*            IF SIOTDMND = ON THEN     /*DEMAND REQ ?                */
         TM    SIOTDMND(@10),B'10000000'                        02S0324
         BNO   @RF00324                                         02S0324
*              DO;                     /*YES,ENSURE ELIGIBLE TO GEN  */
*                IF EDLFGENP->EDLDEVT^=SAVGENID THEN /*ELIG TO GEN?  */
         L     @06,SIOTEDLP(,@10)                               02S0326
         L     @06,EDLFGENP(,@06)                               02S0326
         CLC   EDLDEVT(4,@06),SAVGENID                          02S0326
         BE    @RF00326                                         02S0326
*                  DO;                 /*NO,INDICATE ERROR           */
*                    RTNCODE = FAILURE;                         02S0328
         LA    RTNCODE,4                                        02S0328
*                    SIOTRSNC = ERR20;                          02S0329
         MVC   SIOTRSNC(2,@10),@CH00093                         02S0329
*                  END;                                         02S0330
*                ELSE;                 /*ELIGIBLE TO GENERIC CHOSEN  */
@RF00326 DS    0H                                               02S0332
*              END;                                             02S0332
*            ELSE                      /*NON-DEMAND REQ              */
*               CALL IEFAB481(SIOSCANP,SAVGENID); /*MARK GENS INELIG */
         B     @RC00324                                         02S0333
@RF00324 LA    @10,SIOSCANP                                     02S0333
         ST    @10,@AL00001                                     02S0333
         LA    @10,SAVGENID                                     02S0333
         ST    @10,@AL00001+4                                   02S0333
         L     @15,@CV00124                                     02S0333
         LA    @01,@AL00001                                     02S0333
         BALR  @14,@15                                          02S0333
*          END;                                                 02S0334
*        ELSE;                         /*REQ NOT IN SAME MUG GROUP   */
@RF00321 DS    0H                                               02S0336
*        SIOSCANP = SIOTNPTR;          /*POINT TO NEXT SIOT          */
@RC00321 L     @10,SIOSCANP                                     02S0336
         L     @10,SIOTNPTR(,@10)                               02S0336
         ST    @10,SIOSCANP                                     02S0336
*      END;                                                     02S0337
@DE00320 SLR   @10,@10                                          02S0337
         C     @10,SIOSCANP                                     02S0337
         BE    @DC00320                                         02S0337
         CR    RTNCODE,@10                                      02S0337
         BE    @DL00320                                         02S0337
@DC00320 DS    0H                                               02S0338
*      RFY INDMSIOT BASED(SIOTPTR);                             02S0338
*    END;                                                       02S0339
*  ELSE;                               /*NOT DEMAND REQ IN A MUG GRP */
@RF00314 DS    0H                                               02S0341
*  SIOTPTR = SIOTNPTR;                 /*POINT TO NEXT SIOT          */
         L     SIOTPTR,SIOTNPTR(,SIOTPTR)                       02S0341
*END;                                                           02S0342
@DE00313 SLR   @10,@10                                          02S0342
         CR    SIOTPTR,@10                                      02S0342
         BE    @DC00313                                         02S0342
         CR    RTNCODE,@10                                      02S0342
         BE    @DL00313                                         02S0342
@DC00313 DS    0H                                               02S0343
*    IF RTNCODE = SUCCESS THEN         /*ANY ERRORS?                 */
         LTR   RTNCODE,RTNCODE                                  01S0343
         BNZ   @RF00343                                         01S0343
*      DO;                             /*NO,CONTINUE                 */
*        WMASKPTR = ALGTABP + ALGINTLN;/*POINT TO WORK MASK FIELD    */
         L     @10,@PC00001                                     01S0345
         L     @10,ALCWAPTR(,@10)                               01S0345
         L     @06,ALGTABP(,@10)                                01S0345
         AL    @06,ALGINTLN                                     01S0345
         ST    @06,WMASKPTR(,@10)                               01S0345
*        WMASK2P=WMASKPTR + GMTENTLN;  /*POINT TO 2ND WORK MASK      */
         L     @05,EDTABPTR(,@10)                               01S0346
         L     @05,EDTMSKTP(,@05)                               01S0346
         L     @05,GMTENTLN(,@05)                               01S0346
         ALR   @06,@05                                          01S0346
         ST    @06,WMASK2P(,@10)                                01S0346
*        WORK3MP=WMASK2P + GMTENTLN;   /*POINT TO 3RD WORK MASK      */
         ALR   @06,@05                                          01S0347
         ST    @06,WORK3MP(,@10)                                01S0347
*        RIMTABP=WORK3MP + GMTENTLN;   /*POINT TO REQ ID MASK TABLE  */
         ALR   @06,@05                                          01S0348
         ST    @06,RIMTABP(,@10)                                01S0348
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - DORIMTAB                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - FILL IN REQUEST ID MASK TABLE                 */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THIS ROUTINE  IDENTIFIES THOSE UNALLOCATED SIOTS WHOSE GROUP   */
*/*   ELIGIBLIES OVERLAP WITH EACH OTHER. SUCH RELATED SIOTS ARE     */
*/*   GIVEN THE SAME REQUEST ID.                                     */
*/*   FOR EACH REQUEST ID ASSIGNED, A REQUEST ID MASK TABLE ENTRY    */
*/*   IS FILLED IN WITH THE NUMBER OF UNALLOCATED REQUESTS           */
*/*   ASSOCIATED WITH THAT ID AND THE COMBINED GROUP ELIGIBITY       */
*/*   MASKS.                                                         */
*/*                                                                  */
*/*   THE  INFORMATION PUT IN THE REQUEST ID MASK TABLE IS TO BE     */
*/*   USED LATER IN DECIDING TO LOCK AND UNLOCK GROUPS OF DEVICES.   */
*/*                                                                  */
*/*   OPERATION -                                                    */
*/*      THE SIOT CHAIN IS SCANNED TO LOCATE UNALLOCATED REQUESTS.   */
*/*                                                                  */
*/*      TO ENSURE ALL SIOTS WHOSE COMBINTION OF GROUP ELIGIBLITIES  */
*/*      OVERLAP ARE FOUND, THIS CODE CONTINUES TO SCAN SIOT CHAIN   */
*/*      UNTIL ON ONE SCAN OF THE SIOTS NO ADDITIONAL 'RELATED'      */
*/*      SIOTS ARE FOUND.                                            */
*/*                                                                  */
*/*      IF THIS IS A RETRY, SEGMENT 'TAPERIMS' IS CALLED    @YM08171*/
*/*      TO ADD COMPATIBLE TAPE GROUPS TO REQUEST ID MASK    @YM08171*/
*/*      TABLE ENTRIES.                                      @YM08171*/
*/*                                                                  */
*/* ENTRY - INLINE SUBROUTINE                                        */
*/*                                                                  */
*/*   PURPOSE - TO ASSIGN REQUEST IDS TO EACH UNALLOCATED SIOT       */
*/*             AND TO FILL IN THE REQUEST ID MASK TABLE.            */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*        RIMTABP - PTR TO CORE FOR REQUEST ID MASK TABLE           */
*/*        SIOT1P - PTR TO FIRST SIOT                                */
*/*                                                                  */
*/* EXIT - NORMAL - INLINE SUBROUTINE                                */
*/*                                                                  */
*/*   CONDITION - FUNCTION COMPLETED SUCCESSFULLY                    */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*      .SIOTGIID - ID ASSOCIATED WITH SIOT.                        */
*/*      .RIMENTNO - NUMBER OF REQUEST ID TABLE ENTRIES.             */
*/*      .THE FOLLOWING FIELDS ARE FILLED IN FOR EACH REQUEST ID     */
*/*       MASK TABLE ENTRY:                                          */
*/*            RIMID - ENTRY ID                                      */
*/*            RIMUACT - COUNT OF SIOTS WITH THIS ID WHICH ARE STILL */
*/*                      UNALLOCATED.                                */
*/*            RIMMASK - COMBINED GROUP ELIGIBILITY OF ALL THE       */
*/*                      REQUESTS WITH THIS ID.                      */
*/*                                                                  */
*/*   RETURN CODES - (NONE)                                          */
*/*                                                                  */
*/********************************************************************/
*RIMTENTP = RIMTABP;                   /*POINT TO FIRST REQ ID MASK
*                                        TABLE ENTRY                 */
         LR    RIMTENTP,@06                                     02S0349
*RIMCTR = ONE;                         /*INITIALIZE UNIQUE ID VALUE  */
         LA    RIMCTR,1                                         02S0350
*RFY GMTENTRY BASED(EDLGMTP);          /*BASE EDT MASKS ON EDL PTRS  */
*SIOTPTR = SIOT1P;                     /*POINT TO FIRST SIOT         */
         L     SIOTPTR,SIOT1P(,@10)                             02S0352
*DO WHILE SIOTPTR ^= ZERO;             /*SCAN ALL SIOTS              */
         B     @DE00353                                         02S0353
@DL00353 DS    0H                                               02S0354
*  IF SIOTALCD=NO & SIOTGIID=ZERO THEN /*IS SIOT UNALLOCATED AND NOT
*                                        HAVE A REQ ID YET ?         */
         TM    SIOTALCD(SIOTPTR),B'00000010'                    02S0354
         BNZ   @RF00354                                         02S0354
         ICM   @10,3,SIOTGIID(SIOTPTR)                          02S0354
         BNZ   @RF00354                                         02S0354
*    DO;                               /*YES, PROCESS                */
*      SIOTGIID = RIMCTR;              /*ASSIGN REQ ID TO SIOT       */
         STH   RIMCTR,SIOTGIID(,SIOTPTR)                        02S0356
*      RIMID=RIMCTR;                   /*PUT ID IN RIMT ENTRY        */
         ST    RIMCTR,RIMID(,RIMTENTP)                          02S0357
*      RIMUACT = ONE;                  /*SET COUNT OF UNALLOCS TO ONE*/
         MVC   RIMUACT(4,RIMTENTP),@CF00058                     02S0358
*      RIMMASK(ONE:GMTENTLN)=GRPMASK(ONE:GMTENTLN);/*           02S0359
*                                        PUT ELIGIBILITY MASK IN REQ
*                                        ID MASK TABLE ENTRY         */
         L     @10,@PC00001                                     02S0359
         L     @10,ALCWAPTR(,@10)                               02S0359
         L     @10,EDTABPTR(,@10)                               02S0359
         L     @10,EDTMSKTP(,@10)                               02S0359
         L     @10,GMTENTLN(,@10)                               02S0359
         BCTR  @10,0                                            02S0359
         L     @06,SIOTEDLP(,SIOTPTR)                           02S0359
         L     @06,EDLGMTP(,@06)                                02S0359
         EX    @10,@SM01886                                     02S0359
*      CONTINUE = YES;                 /*DO AT LEAST ONE SIOT SCAN   */
         OI    CONTINUE,B'10000000'                             02S0360
*      DO WHILE CONTINUE = YES;        /*KEEP SCANNING SIOTS UNTIL NO
*                                        MORE RELATED SIOTS ARE FOUND*/
         B     @DE00361                                         02S0361
@DL00361 DS    0H                                               02S0362
*        CONTINUE = NO;                /*ASSUME LAST SCAN OF SIOTS   */
         NI    CONTINUE,B'01111111'                             02S0362
*        SIOSCANP = SIOTNPTR;          /*POINT TO NEXT SIOT          */
         MVC   SIOSCANP(4),SIOTNPTR(SIOTPTR)                    02S0363
*        RFY INDMSIOT BASED(SIOSCANP); /*CHANGE SIOT BASE FOR RESCAN */
*        DO WHILE SIOSCANP ^= ZERO;    /*SCAN ALL SIOTS              */
         B     @DE00365                                         02S0365
@DL00365 DS    0H                                               02S0366
*          IF SIOTALCD=NO & SIOTGIID=ZERO THEN /*IS SIOT UNALLOCATED
*                                        AND NOT HAVE A REQ ID YET ? */
         L     @10,SIOSCANP                                     02S0366
         TM    SIOTALCD(@10),B'00000010'                        02S0366
         BNZ   @RF00366                                         02S0366
         ICM   @06,3,SIOTGIID(@10)                              02S0366
         BNZ   @RF00366                                         02S0366
*            DO;                       /*YES, PROCESS                */
*              ANDMASK(ONE:GMTENTLN)=RIMMASK(ONE:GMTENTLN)&GRPMASK(ONE:
*MTENTLN);                                                      02S0368
         L     @06,@PC00001                                     02S0368
         L     @06,ALCWAPTR(,@06)                               02S0368
         L     @05,WMASKPTR(,@06)                               02S0368
         L     @01,EDTABPTR(,@06)                               02S0368
         L     @01,EDTMSKTP(,@01)                               02S0368
         L     @15,GMTENTLN(,@01)                               02S0368
         BCTR  @15,0                                            02S0368
         L     @01,SIOTEDLP(,@10)                               02S0368
         L     @14,EDLGMTP(,@01)                                02S0368
         EX    @15,@SM01888                                     02S0368
         EX    @15,@SN01890                                     02S0368
*                                      /*AND TWO MASKS TOGETHER      */
*              IF ANDMASK(ONE:GMTENTLN)^=ZMASK(ONE:GMTENTLN) THEN/*
*                                                     ANY OVERLAP
*                                        BETWEEN REQS                */
         L     @06,WMASK2P(,@06)                                02S0369
         EX    @15,@SC01892                                     02S0369
         BE    @RF00369                                         02S0369
*                DO;                   /*YES,REQ MASKS DO OVERLAP    */
*                  SIOTGIID = RIMID;   /*ASSIGN REQ ID TO SIOT       */
         MVC   SIOTGIID(2,@10),RIMID+2(RIMTENTP)                02S0371
*                  RIMMASK(ONE:GMTENTLN)=RIMMASK(ONE:GMTENTLN)×GRPMASK(
*NE:GMTENTLN);                                                  02S0372
         EX    @15,@SO01894                                     02S0372
*                                      /*OR TWO MASKS TOGETHER       */
*                  RIMUACT=RIMUACT+ONE;/*INCREMENT UNALLOCS COUNT    */
         LA    @10,1                                            02S0373
         AL    @10,RIMUACT(,RIMTENTP)                           02S0373
         ST    @10,RIMUACT(,RIMTENTP)                           02S0373
*                  CONTINUE = YES;     /*MUST SCAN SIOTS AGAIN       */
         OI    CONTINUE,B'10000000'                             02S0374
*                END;                                           02S0375
*              ELSE;                   /*REQ MASKS DONT OVERLAP      */
@RF00369 DS    0H                                               02S0377
*            END;                                               02S0377
*          ELSE;                       /*SIOT ALLOC OR HAS ID ALREADY*/
@RF00366 DS    0H                                               02S0379
*          SIOSCANP = SIOTNPTR;        /*POINT TO NEXT SIOT          */
         L     @10,SIOSCANP                                     02S0379
         L     @10,SIOTNPTR(,@10)                               02S0379
         ST    @10,SIOSCANP                                     02S0379
*        END;                                                   02S0380
@DE00365 ICM   @10,15,SIOSCANP                                  02S0380
         BNZ   @DL00365                                         02S0380
*        RFY INDMSIOT BASED(SIOTPTR);  /*NORMAL SIOT BASE            */
*      END;                                                     02S0382
@DE00361 TM    CONTINUE,B'10000000'                             02S0382
         BO    @DL00361                                         02S0382
*      RIMTENTP=RIMTENTP + RIMTABLN;   /*POINT TO NEXT RIM ENTRY     */
         L     @10,@PC00001                                     02S0383
         L     @10,ALCWAPTR(,@10)                               02S0383
         AL    RIMTENTP,RIMTABLN(,@10)                          02S0383
*      RIMCTR = RIMCTR + ONE;          /*INCREMENT UNIQUE ID VALUE   */
         AL    RIMCTR,@CF00058                                  02S0384
*    END;                                                       02S0385
*  ELSE;                               /*SIOT ALLOC OR HAS ID ALREADY*/
@RF00354 DS    0H                                               02S0387
*  SIOTPTR = SIOTNPTR;                 /*POINT TO NEXT SIOT          */
         L     SIOTPTR,SIOTNPTR(,SIOTPTR)                       02S0387
*END;                                                           02S0388
@DE00353 LTR   SIOTPTR,SIOTPTR                                  02S0388
         BNZ   @DL00353                                         02S0388
*RIMTABCT = RIMCTR - ONE;              /*SET TRUE ENTRY COUNT        */
         L     @10,@PC00001                                     02S0389
         L     @10,ALCWAPTR(,@10)                               02S0389
         LR    @06,RIMCTR                                       02S0389
         BCTR  @06,0                                            02S0389
         ST    @06,RIMTABCT(,@10)                               02S0389
*IF GENLOKSW = ON THEN                 /*RETRY?              @YM08171*/
         L     @06,FMAPPTR(,@10)                                02S0390
         TM    GENLOKSW(@06),B'00000001'                        02S0390
         BNO   @RF00390                                         02S0390
*  DO;                                 /*YES, ADD IN TAPE MASKS 02S0391
*                                                            @YM08171*/
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - TAPERIMS                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - ADD COMPATIBLE TAPES TO REQ MASKS             */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE ADDS GROUPS TO THE REQUEST ID MASKS (RIM'S)     */
*/*     ASSOCIATED WITH UNALLOCATED TAPE REQUESTS SO THAT BY THE     */
*/*     END OF GENERIC ALLOCATION ANY GROUP WHICH MAY CONTAIN A      */
*/*     TAPE VOLUME WHICH MUST BE MOVED WILL BE LOCKED.              */
*/*                                                                  */
*/*   OPERATION - THE OPERATION IS DOCUMENTED BY THE CODE ITSELF     */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*      ALCWAPTR - PTR TO THE ALLOC WORK ARE, WHICH CONTAINS        */
*/*        EDTABPTR - PTR TO THE EDT                                 */
*/*        SIOT1P - PTR TO THE FIRST SIOT IN THE CHAIN               */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITIONS - FUNCTION COMPLETED                                */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*      RIMMASK'S ASSOCIATED WITH UNALLOCATED TAPE REQUESTS         */
*/*      HAVE 1'S FOR ANY GOURPS WHICH MAY CONTAIN A VOLUME DESIRED  */
*/*      BY THE REQUESTS WITH THIS REQUEST ID.                       */
*/*                                                                  */
*/*   RETURN CODES - (NONE)                                          */
*/*                                                                  */
*/********************************************************************/
*RFY EDTHDR BASED(EDTABPTR);           /*BASE EDT ON ALCWA PTR       */
*TAPEMSKP = TAPEMSKP && TAPEMSKP;      /*ZERO PTRS TO TAPE DENSITIES */
         XC    TAPEMSKP(16),TAPEMSKP                            03S0393
*LUVPTR = EDTLUVSP + LENGTH(LUVHDR);   /*POINT TO FIRST LUV ENTRY    */
         L     @10,EDTABPTR(,@10)                               03S0394
         LA    LUVPTR,8                                         03S0394
         AL    LUVPTR,EDTLUVSP(,@10)                            03S0394
*DO LUVCTR = ONE TO LUVENTNO;          /*SCAN ALL LUV ENTRIES        */
         LA    LUVCTR,1                                         03S0395
         B     @DE00395                                         03S0395
@DL00395 DS    0H                                               03S0396
*  IF UNITNAME = '2400-1  ' THEN       /*2400-1 GENERIC ?            */
         CLC   UNITNAME(8,LUVPTR),@CC01864                      03S0396
         BNE   @RF00396                                         03S0396
*    TMSK7PTR = LUVGMTP;               /*YES, SAVE FOR 7-TRK MASK    */
         MVC   TMSK7PTR(4),LUVGMTP(LUVPTR)                      03S0397
*  IF UNITNAME = '2400    ' THEN       /*2400 GENERIC ?              */
@RF00396 CLC   UNITNAME(8,LUVPTR),@CC01865                      03S0398
         BNE   @RF00398                                         03S0398
*    TMSK800P = LUVGMTP;               /*YES, SAVE FOR 800 BPI MASK  */
         MVC   TMSK800P(4),LUVGMTP(LUVPTR)                      03S0399
*  ELSE;                               /*NOT THE 2400 LUV ENTRY      */
@RF00398 DS    0H                                               03S0401
*  IF UNITNAME = '2400-3  ' THEN       /*2400-3 GENERIC ?            */
         CLC   UNITNAME(8,LUVPTR),@CC01866                      03S0401
         BNE   @RF00401                                         03S0401
*    TMSK160P = LUVGMTP;               /*YES, SAVE FOR 1600 BPI MASK */
         MVC   TMSK160P(4),LUVGMTP(LUVPTR)                      03S0402
*  ELSE;                               /* NOT THE 2400-3 LUV ENTRY   */
@RF00401 DS    0H                                               03S0404
*  IF UNITNAME = '3400-5  ' THEN       /*3400-5 GENERIC ?            */
         CLC   UNITNAME(8,LUVPTR),@CC01867                      03S0404
         BNE   @RF00404                                         03S0404
*    TMSK625P = LUVGMTP;               /*YES, SAVE FOR 6250 BPI MASK */
         MVC   TMSK625P(4),LUVGMTP(LUVPTR)                      03S0405
*  ELSE;                               /*NOT THE 3400-5 GENERIC      */
@RF00404 DS    0H                                               03S0407
*  LUVPTR = LUVPTR + LUVENTLN;         /*POINT TO THE NEXT LUV ENTRY */
         L     @10,@PC00001                                     03S0407
         L     @10,ALCWAPTR(,@10)                               03S0407
         L     @10,EDTABPTR(,@10)                               03S0407
         L     @10,EDTLUVSP(,@10)                               03S0407
         AL    LUVPTR,LUVENTLN(,@10)                            03S0407
*END;                                                           03S0408
         AL    LUVCTR,@CF00058                                  03S0408
@DE00395 L     @10,@PC00001                                     03S0408
         L     @10,ALCWAPTR(,@10)                               03S0408
         L     @10,EDTABPTR(,@10)                               03S0408
         L     @10,EDTLUVSP(,@10)                               03S0408
         C     LUVCTR,LUVENTNO(,@10)                            03S0408
         BNH   @DL00395                                         03S0408
*SIOTPTR = SIOT1P;                     /*POINT TO THE FIRST SIOT     */
         L     @10,@PC00001                                     03S0409
         L     @10,ALCWAPTR(,@10)                               03S0409
         L     SIOTPTR,SIOT1P(,@10)                             03S0409
*DO WHILE SIOTPTR ^= ZERO;             /*SCAN ALL THE SIOTS          */
         B     @DE00410                                         03S0410
@DL00410 DS    0H                                               03S0411
*  IF SIOTALCD = OFF                   /*UNALLOCATED TAPE REQ ?      */
*      & SVOLUNAD->VOLTAREQ = ON THEN                           03S0411
         TM    SIOTALCD(SIOTPTR),B'00000010'                    03S0411
         BNZ   @RF00411                                         03S0411
         L     @10,SVOLUNAD(,SIOTPTR)                           03S0411
         TM    VOLTAREQ(@10),B'10000000'                        03S0411
         BNO   @RF00411                                         03S0411
*    DO;                               /*YES, PROCESS                */
*      RIMTENTP=RIMTABP+((SIOTGIID-1)*RIMTABLN); /*PT TO RIMT ENTRY  */
         L     @10,@PC00001                                     03S0413
         L     @10,ALCWAPTR(,@10)                               03S0413
         LH    @01,SIOTGIID(,SIOTPTR)                           03S0413
         BCTR  @01,0                                            03S0413
         M     @00,RIMTABLN(,@10)                               03S0413
         AL    @01,RIMTABP(,@10)                                03S0413
         LR    RIMTENTP,@01                                     03S0413
*      EDLPTR = EDLFGENP;              /*POINT TO FIRST GEN IN EDL   */
         L     @10,SIOTEDLP(,SIOTPTR)                           03S0414
         L     EDLPTR,EDLFGENP(,@10)                            03S0414
*      DO GENSCTR = ONE TO EDLGENNO;   /*SCAN ALL GENERICS           */
         LA    GENSCTR,1                                        03S0415
         B     @DE00415                                         03S0415
@DL00415 DS    0H                                               03S0416
*    IF EDLDEVT(3) = TAPETYPE THEN     /*TAPE GEN ?                  */
         CLI   EDLDEVT+2(EDLPTR),X'80'                          03S0416
         BNE   @RF00416                                         03S0416
*      DO;                             /*YES, PROCESS                */
*        IF EDLDEVT(1:2) = TYP3000     /*CAN THE GEN SUPPORT 800 BPI?*/
*          × EDLDEVT(1:2) = TYP3420 THEN                        03S0418
         CLC   EDLDEVT(2,EDLPTR),@CB00108                       03S0418
         BE    @RT00418                                         03S0418
         CLC   EDLDEVT(2,EDLPTR),@CB00116                       03S0418
         BNE   @RF00418                                         03S0418
@RT00418 DS    0H                                               03S0419
*          DO;                         /*YES, ADD 800 BPI MASK TO RIM*/
*            TMASKPTR = TMSK800P;                               03S0420
         L     TMASKPTR,TMSK800P                                03S0420
*            RIMMASK (ONE:GMTENTLN)=RIMMASK(ONE:GMTENTLN)×TAPEMASK(ONE:
*MTENTLN);                                                      03S0421
         L     @10,@PC00001                                     03S0421
         L     @10,ALCWAPTR(,@10)                               03S0421
         L     @10,EDTABPTR(,@10)                               03S0421
         L     @10,EDTMSKTP(,@10)                               03S0421
         L     @10,GMTENTLN(,@10)                               03S0421
         BCTR  @10,0                                            03S0421
         EX    @10,@SO01896                                     03S0421
*          END;                                                 03S0422
*        ELSE;                         /*NOT AN 800 BPI GENERIC      */
@RF00418 DS    0H                                               03S0424
*        IF EDLDEVT(1:2) = 3400        /*CAN THE GEN SUPPORT 1600 BPI*/
*          × EDLDEVT(1:2) = TYP3420                             03S0424
*          × EDLDEVT(1:2) = TYP3210 THEN                        03S0424
         CLC   EDLDEVT(2,EDLPTR),@CH01868                       03S0424
         BE    @RT00424                                         03S0424
         CLC   EDLDEVT(2,EDLPTR),@CB00116                       03S0424
         BE    @RT00424                                         03S0424
         CLC   EDLDEVT(2,EDLPTR),@CB00112                       03S0424
         BNE   @RF00424                                         03S0424
@RT00424 DS    0H                                               03S0425
*          DO;                         /*YES,ADD 1600 BPI MASK TO RIM*/
*            TMASKPTR = TMSK160P;                               03S0426
         L     TMASKPTR,TMSK160P                                03S0426
*            RIMMASK(ONE:GMTENTLN)=RIMMASK(ONE:GMTENTLN)×TAPEMASK(ONE:G
*TENTLN);                                                       03S0427
         L     @10,@PC00001                                     03S0427
         L     @10,ALCWAPTR(,@10)                               03S0427
         L     @10,EDTABPTR(,@10)                               03S0427
         L     @10,EDTMSKTP(,@10)                               03S0427
         L     @10,GMTENTLN(,@10)                               03S0427
         BCTR  @10,0                                            03S0427
         EX    @10,@SO01896                                     03S0427
*          END;                                                 03S0428
*        ELSE;                         /*NOT A 1600 BPI GENERIC      */
@RF00424 DS    0H                                               03S0430
*        IF EDLDEVT(1) = TYP32 THEN    /*CAN THE GEN SUPPORT 6250 BPI*/
         CLI   EDLDEVT(EDLPTR),X'32'                            03S0430
         BNE   @RF00430                                         03S0430
*          DO;                         /*YES,ADD 6250 BPI MASK TO RIM*/
*            TMASKPTR = TMSK625P;                               03S0432
         L     TMASKPTR,TMSK625P                                03S0432
*            RIMMASK(ONE:GMTENTLN)=RIMMASK(ONE:GMTENTLN)×TAPEMASK(ONE:G
*TENTLN);                                                       03S0433
         L     @10,@PC00001                                     03S0433
         L     @10,ALCWAPTR(,@10)                               03S0433
         L     @10,EDTABPTR(,@10)                               03S0433
         L     @10,EDTMSKTP(,@10)                               03S0433
         L     @10,GMTENTLN(,@10)                               03S0433
         BCTR  @10,0                                            03S0433
         EX    @10,@SO01896                                     03S0433
*          END;                                                 03S0434
*        ELSE;                         /*NOT A 6250 BPI GENERIC      */
@RF00430 DS    0H                                               03S0436
*        IF EDLGRPTR->EDLLISTP->EDLUCBAD(1)->UCB2OPT0=ON THEN /*7-TRK
*                                        TAPE GEN ?                  */
         L     @10,EDLGRPTR(,EDLPTR)                            03S0436
         L     @10,EDLLISTP(,@10)                               03S0436
         SLR   @09,@09                                          03S0436
         ICM   @09,3,EDLUCBAD(@10)                              03S0436
         TM    UCB2OPT0(@09),B'10000000'                        03S0436
         BNO   @RF00436                                         03S0436
*          DO;                                                  03S0437
*            TMASKPTR = TMSK7PTR;                               03S0438
         L     TMASKPTR,TMSK7PTR                                03S0438
*            RIMMASK(ONE:GMTENTLN)=RIMMASK(ONE:GMTENTLN) × TAPEMASK(ONE
*GMTENTLN);                                                     03S0439
         L     @10,@PC00001                                     03S0439
         L     @10,ALCWAPTR(,@10)                               03S0439
         L     @10,EDTABPTR(,@10)                               03S0439
         L     @10,EDTMSKTP(,@10)                               03S0439
         L     @10,GMTENTLN(,@10)                               03S0439
         BCTR  @10,0                                            03S0439
         EX    @10,@SO01896                                     03S0439
*          END;                                                 03S0440
*        ELSE;                         /*NOT A 7-TRK TAPE GEN        */
@RF00436 DS    0H                                               03S0442
*        END;                                                   03S0442
*      ELSE;                           /*NOT A TAPE GEN              */
@RF00416 DS    0H                                               03S0444
*        EDLPTR = EDLNXTNT;            /*POINT TO NEXT GEN IN EDL    */
         L     EDLPTR,EDLNXTNT(,EDLPTR)                         03S0444
*      END;                                                     03S0445
         AL    GENSCTR,@CF00058                                 03S0445
@DE00415 L     @10,SIOTEDLP(,SIOTPTR)                           03S0445
         C     GENSCTR,EDLGENNO(,@10)                           03S0445
         BNH   @DL00415                                         03S0445
*    END;                                                       03S0446
*  ELSE;                               /*NOT AN UNALLOCATED TAPE REQ */
@RF00411 DS    0H                                               03S0448
*  SIOTPTR = SIOTNPTR;                 /*POINT TO THE NEXT SIOT      */
         L     SIOTPTR,SIOTNPTR(,SIOTPTR)                       03S0448
*END;                                                           03S0449
@DE00410 LTR   SIOTPTR,SIOTPTR                                  03S0449
         BNZ   @DL00410                                         03S0449
*  END;                                                         02S0450
*ELSE;                                 /*NOT RETRY           @YM08171*/
@RF00390 DS    0H                                               02S0452
*RFY GMTENTRY BASED(LUVGMTP);          /*NORMAL EDT MASK BASE        */
*        QMGRRBP=RIMTABP+(RIMTABLN * RIMTABCT); /*PTR TO QMGR RB     */
         L     @10,@PC00001                                     01S0453
         L     @10,ALCWAPTR(,@10)                               01S0453
         L     @01,RIMTABLN(,@10)                               01S0453
         M     @00,RIMTABCT(,@10)                               01S0453
         AL    @01,RIMTABP(,@10)                                01S0453
         ST    @01,QMGRRBP(,@10)                                01S0453
*        PRMQMGP = QMGRRBP;            /*REQUEST BLOCK TO ESTAE PARMS*/
         L     @06,EXITPRMP(,@10)                               01S0454
         ST    @01,PRMQMGP(,@06)                                01S0454
*        AQMECODE = QMINITCD;          /*INDICATE INIT FUNCTION      */
         MVC   AQMECODE(2,@01),@CH00058                         01S0455
*        IF UWAITSW = ON THEN          /*CAN ALLOCATION WAIT         */
         L     @10,FMAPPTR(,@10)                                01S0456
         TM    UWAITSW(@10),B'00100000'                         01S0456
         BNO   @RF00456                                         01S0456
*          DO;                         /*YES ALLOCATION CAN WAIT     */
*            AQMQCODE=ABCODE;          /*SET WAIT CODE               */
         MVC   AQMQCODE(2,@01),@CC00091                         01S0458
*          END;                                                 01S0459
*        ELSE                          /*ALLOCATION CANNOT WAIT      */
*          DO;                                                  01S0460
         B     @RC00456                                         01S0460
@RF00456 DS    0H                                               01S0461
*            AQMQCODE = AACODE;        /*SET NO WAIT CODE            */
         L     @10,@PC00001                                     01S0461
         L     @10,ALCWAPTR(,@10)                               01S0461
         L     @10,QMGRRBP(,@10)                                01S0461
         MVC   AQMQCODE(2,@10),@CC00089                         01S0461
*          END;                                                 01S0462
*        AQMASID(3:4) = ALCWASID;      /*PUT ASID IN QMGR RB         */
@RC00456 L     @10,@PC00001                                     01S0463
         L     @10,ALCWAPTR(,@10)                               01S0463
         L     @06,QMGRRBP(,@10)                                01S0463
         MVC   AQMASID+2(2,@06),ALCWASID(@10)                   01S0463
*        AQMLENGT = GMTENTLN;          /*PUT MASK LENGTH IN QMGR RB  */
         L     @01,EDTABPTR(,@10)                               01S0464
         L     @01,EDTMSKTP(,@01)                               01S0464
         MVC   AQMLENGT(4,@06),GMTENTLN(@01)                    01S0464
*        AQMCANCP = CANCELP;           /*POINT TO CANCEL ECB         */
         MVC   AQMCANCP(4,@06),CANCELP(@10)                     01S0465
*        CALL IEFAB4FA(QMGRRBP,EXITPRMP); /*INIT Q-MGR PROCESSING    */
         LA    @06,QMGRRBP(,@10)                                01S0466
         ST    @06,@AL00001                                     01S0466
         LA    @10,EXITPRMP(,@10)                               01S0466
         ST    @10,@AL00001+4                                   01S0466
         L     @15,@CV00125                                     01S0466
         LA    @01,@AL00001                                     01S0466
         BALR  @14,@15                                          01S0466
*        IF REG15 ^= ZERO THEN         /*WAS Q-MGR INIT SUCCESSFUL ? */
         SLR   @14,@14                                          01S0467
         CR    REG15,@14                                        01S0467
         BE    @RF00467                                         01S0467
*          DO;                         /*NOT SUCCESSFUL ...          */
*            RTNCODE = FAILURE;        /*SET ERROR RETURN CODE       */
         LA    RTNCODE,4                                        01S0469
*            FAILRSC = GETMNERR;       /*INDICATE GETMAIN ERROR      */
         L     @10,@PC00001                                     01S0470
         L     @10,ALCWAPTR(,@10)                               01S0470
         L     @06,FAILRSCP(,@10)                               01S0470
         MVC   FAILRSC(2,@06),@CH00088                          01S0470
*            QMGRRBP = ZERO;           /*ZERO PTR TO QMGR RB SO 01S0471
*                                        TERM FUNCTION WONT BE DONE  */
         ST    @14,QMGRRBP(,@10)                                01S0471
*          END;                                                 01S0472
*        ELSE;                         /*NO Q-MGR ERROR              */
@RF00467 DS    0H                                               01S0474
*      END;                                                     01S0474
*    ELSE;                             /*MGEN GROUP ERROR            */
@RF00343 DS    0H                                               01S0476
*  END;                                                         01S0476
*ELSE                                  /*GETMAIN ERROR FOR TABLES    */
*  DO;                                                          01S0477
         B     @RC00143                                         01S0477
@RF00143 DS    0H                                               01S0478
*    FAILRSC = GETMNERR;               /*INDICATE GETMAIN ERROR      */
         L     @10,@PC00001                                     01S0478
         L     @10,ALCWAPTR(,@10)                               01S0478
         L     @10,FAILRSCP(,@10)                               01S0478
         MVC   FAILRSC(2,@10),@CH00088                          01S0478
*  END;                                                         01S0479
*RETURN CODE(RTNCODE);                 /*RETURN TO CALLER            */
@RC00143 IC    @02,@OLDKEY                                      01S0480
         L     @13,4(,@13)                                      01S0480
         L     @00,@SIZDATD                                     01S0480
         LR    @01,@11                                          01S0480
         FSPACE   R,LV=(0),A=(1)
         MODESET KEYADDR=(2)
         LR    @15,@07                                          01S0480
         L     @14,12(,@13)                                     01S0480
         LM    @00,@12,20(@13)                                  01S0480
         BR    @14                                              01S0480
*TESTBIT: PROC;                                                 02S0481
TESTBIT  STM   @14,@12,@SA00002                                 02S0481
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - TESTBIT                                           */
*/*                                                                  */
*/* DESCRIPTIVE NAME - TEST BIT IN GROUP MASK                        */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS SUBROUTINE DETERMINES IF A PARTICULAR BIT IN A         */
*/*      GROUP MASK IS ON OR OFF. THE GROUP MASK IS A VARIABLE       */
*/*      LENGTH BIT MASK POINTED TO BY MASKPTR . THE ONE-ORIGIN      */
*/*      INDEX OF THE BIT TO BE TESTED IS CONTAINED IN FIELD         */
*/*      GROUPNO.                                                    */
*/*                                                                  */
*/*   OPERATION -                                                    */
*/*      THIS SEGMENT GENERATES BAL INSTRUCTIONS                     */
*/*                                                                  */
*/*      ONE IS SUBTRACTED FROM THE GROUPNO TO PRODUCE A ZERO-ORIGIN */
*/*      INDEX. THE INDEX IS THEN DIVIDED BY EIGHT TO DETERMINE THE  */
*/*      BYTE (AND REMAINDER)  OF THE BIT BEING TESTED (IN A SRDL    */
*/*      INSTRUCTION, THE ODD REGISTER GETS THE BITS SHIFTED OUT OF  */
*/*      THE EVEN REGISTER.). THE REMAINDER IS ALIGNED IN A REGISTER */
*/*      AND IS USED TO INDICATE THE BIT POSITION IN THE BYTE. THIS  */
*/*      BIT POSITION IS USED IN A TEST-UNDER-MASK INSTRUCTION VIA   */
*/*      EXECUTE.                                                    */
*/*                                                                  */
*/*      EXAMPLE - IF GROUPNO = 10, THIS OPERATION WILL DETERMINE    */
*/*                THE BIT IS 1 BYTE AFTER THE BEGINNING OF THE      */
*/*                GROUP MASK AND IS THE SECOND BIT POSITION.        */
*/*                                                                  */
*/* ENTRY - THIS CODE IS AN INLINE SUBROUTINE WHICH IS ENTERED       */
*/*         AT THE TOP.                                              */
*/*                                                                  */
*/*   PURPOSE  -  TO DETERMINE IF A PARTICULAR BIT IN A GROUP        */
*/*               MASK IS ON OR OFF.                                 */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*       MASKPTR - PTR TO GROUP MASK                                */
*/*       GROUPNO - 1-ORIGIN INDEX INTO MASK OF THE BIT TO BE TESTED */
*/*       BITRTN - BIT FOR RESULTS OF TEST TO BE RETURNED IN         */
*/*                                                                  */
*/* EXIT - NORMAL - THIS CODE IS AN INLINE SUBROUTINE WHICH          */
*/*                 EXITS FROM THE BOTTOM.                           */
*/*                                                                  */
*/*   CONDITION - BIT TESTED AND RESULTS INDICATED.                  */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*       BITRTN - SET TO 1 IF BIT WAS ON                            */
*/*              - SET TO 0 IF BIT WAS OFF                           */
*/*                                                                  */
*/*   RETURN CODES - (NONE)                                          */
*/*                                                                  */
*/********************************************************************/
*BITRTN = OFFVALUE;                    /*ASSUME BIT IS OFF           */
         NI    BITRTN,B'01111111'                               02S0482
*RFY (EVENREG,ODDREG,MASKREG) RSTD;    /*RESTRICT USE OF REGS 3,4+5  */
*GEN REFS(EVENREG,GROUPNO,MASKPTR,ODDREG,MASKREG,TMINST)        02S0484
*    FLOWS(BITOFF);                                             02S0484
        L     EVENREG,GROUPNO         PUT BIT INDEX INTO REG
        BCTR  EVENREG,0               DECREMENT INDEX FOR ZERO ORIGIN
        SRDL  EVENREG,3               DIVIDE INDEX BY 8.SAVE REMAINDER
        A     EVENREG,MASKPTR         POINT TO CORRECT BYTE
        SRL   ODDREG,29               ALIGN REMAINDER IS REG
        LA    MASKREG,X'80'           INSERT 0-BIT MASK
        SRL   MASKREG,0(ODDREG)       POSITION MASK BIT
        EX    MASKREG,TMINST          TEST IF BIT IS ON
        BNO   BITOFF                  BRANCH IF BIT NOT ON
*RFY (EVENREG,ODDREG,MASKREG) UNRSTD;  /*UNRESTRICT REGS 3,4, AND 5  */
*BITRTN = ONVALUE;                     /*INDICATE BIT WAS ON         */
         OI    BITRTN,B'10000000'                               02S0486
*BITOFF:;                                                       02S0487
*RETURN;                                                        02S0488
@EL00002 DS    0H                                               02S0488
@EF00002 DS    0H                                               02S0488
@ER00002 LM    @14,@12,@SA00002                                 02S0488
         BR    @14                                              02S0488
*END TESTBIT;                                                   02S0489
         B     @EL00002                                         02S0489
*END IEFAB472                                                   01S0490
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (A472SPEC)                                        *
*/*%INCLUDE SYSLIB  (A472DATA)                                        *
*/*%INCLUDE SYSLIB  (DCNTDATA)                                        *
*/*%INCLUDE SYSLIB  (IEFZB423)                                        *
*/*%INCLUDE SYSLIB  (ATABDATA)                                        *
*/*%INCLUDE SYSLIB  (SETMDATA)                                        *
*/*%INCLUDE SYSLIB  (IALGDATA)                                        *
*/*%INCLUDE SYSLIB  (RIMTDATA)                                        *
*/*%INCLUDE SYSLIB  (TBITDATA)                                        *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*/*%INCLUDE SYSLIB  (IEFZB426)                                        *
*/*%INCLUDE SYSLIB  (IEFZB425)                                        *
*/*%INCLUDE SYSLIB  (IEFZB427)                                        *
*/*%INCLUDE SYSLIB  (IEFASIOT)                                        *
*/*%INCLUDE SYSLIB  (IEFZB421)                                        *
*/*%INCLUDE SYSLIB  (IEFZB422)                                        *
*/*%INCLUDE SYSLIB  (IEFZB428)                                        *
*/*%INCLUDE SYSLIB  (IEFZB447)                                        *
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                        *
*/*%INCLUDE SYSLIB  (IHASUBIT)                                        *
*/*%INCLUDE SYSLIB  (DETSZCTR)                                        *
*/*%INCLUDE SYSLIB  (DCNTSPEC)                                        *
*/*%INCLUDE SYSLIB  (DOALGTAB)                                        *
*/*%INCLUDE SYSLIB  (ATABSPEC)                                        *
*/*%INCLUDE SYSLIB  (DETMULTI)                                        *
*/*%INCLUDE SYSLIB  (SETMSPEC)                                        *
*/*%INCLUDE SYSLIB  (FINDAFFS)                                        *
*/*%INCLUDE SYSLIB  (FAFFSPEC)                                        *
*/*%INCLUDE SYSLIB  (INITALGE)                                        *
*/*%INCLUDE SYSLIB  (IALGSPEC)                                        *
*/*%INCLUDE SYSLIB  (MGENDMND)                                        *
*/*%INCLUDE SYSLIB  (MGENSPEC)                                        *
*/*%INCLUDE SYSLIB  (DORIMTAB)                                        *
*/*%INCLUDE SYSLIB  (RIMTSPEC)                                        *
*/*%INCLUDE SYSLIB  (TAPERIMS)                                        *
*/*%INCLUDE SYSLIB  (TRIMSPEC)                                        *
*/*%INCLUDE SYSLIB  (TESTBIT )                                        *
*/*%INCLUDE SYSLIB  (TBITSPEC)                                        *
*;                                                              01S0490
@DATA    DS    0H
@CH00088 DC    H'2'
@CH00123 DC    H'3'
@CH00076 DC    H'4'
@CH00040 DC    H'16'
@CH00093 DC    H'20'
@CH01868 DC    H'3400'
@SM01886 MVC   RIMMASK(0,RIMTENTP),GRPMASK(@06)
@SM01888 MVC   ANDMASK(0,@05),RIMMASK(RIMTENTP)
@SN01890 NC    ANDMASK(0,@05),GRPMASK(@14)
@SC01892 CLC   ANDMASK(0,@05),ZMASK(@06)
@SO01894 OC    RIMMASK(0,RIMTENTP),GRPMASK(@14)
@SO01896 OC    RIMMASK(0,RIMTENTP),TAPEMASK(TMASKPTR)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SA00002 DS    15F
@AL00001 DS    2A
@TF00001 DS    F
IEFAB472 CSECT
         DS    0F
@CF00058 DC    F'1'
@CH00058 EQU   @CF00058+2
@CF01875 DC    F'28'
@CH01875 EQU   @CF01875+2
@CF01885 DC    F'-8'
@DATD    DSECT
         DS    0D
MASKPTR  DS    A
ALGINTLN DS    F
EGRPCTR  DS    F
GPLSTCTR DS    F
GROUPNO  DS    F
VUCTR    DS    F
SIOSCANP DS    A
EDTPTR   DS    A
GENPTR   DS    A
GRPTABP  DS    A
GRPPTR   DS    A
EDLUCBLP DS    A
UCBPTR   DS    A
GTSTRTCD DS    F
SAVAFFID DS    H
         DS    CL2
TAPEMSKP DS    CL16
         ORG   TAPEMSKP
TMSK7PTR DS    AL4
TMSK800P DS    AL4
TMSK160P DS    AL4
TMSK625P DS    AL4
         ORG   TAPEMSKP+16
BITRTN   DS    BL1
SAVGENID DS    CL4
SETMULTI DS    BL1
UNIQUNIT DS    BL1
CONTINUE DS    BL1
@OLDKEY  DS    AL1
IEFAB472 CSECT
         DS    0F
@SIZDATD DC    AL1(230)
         DC    AL3(@ENDDATD-@DATD)
@CV00124 DC    V(IEFAB481)
@CV00125 DC    V(IEFAB4FA)
         DS    0D
GTSTZERO DC    F'0'
@CC01864 DC    C'2400-1  '
@CC01865 DC    C'2400    '
@CC01866 DC    C'2400-3  '
@CC01867 DC    C'3400-5  '
@CC00089 DC    C'AA'
@CC00091 DC    C'AB'
@CB00108 DC    X'3000'
@CB00112 DC    X'3210'
@CB00116 DC    X'3420'
IEFAB472 CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
IEFAB472 CSECT
TMINST  TM    0(EVENREG),0            TEST OF CORRECT BYTE. MASK=BIT
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEFAB472 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RIMCTR   EQU   @04
COMPARID EQU   @08
SCANVOLP EQU   @04
NUMUNITS EQU   @04
GENSCTR  EQU   @08
ELIGENCT EQU   @02
THEGROUP EQU   @03
REQENTP  EQU   @06
GRPENTP  EQU   @09
GPCTENTP EQU   @02
SGRPCNT  EQU   @04
VUPTR    EQU   @02
VUC      EQU   @05
VSCANCTR EQU   @10
VAFFCTR  EQU   @08
RQLSTCTR EQU   @10
RTNCODE  EQU   @07
I        EQU   @10
NUMGROUP EQU   @09
LUVCTR   EQU   @03
VSCANP   EQU   @04
VAFFPTR  EQU   @05
TMASKPTR EQU   @05
SIOTPTR  EQU   @03
SAFFPTR  EQU   @02
RIMTENTP EQU   @02
LUVPTR   EQU   @02
EDLPTR   EQU   @04
EDLGNTP  EQU   @05
REG15    EQU   @15
EVENREG  EQU   @04
MASKREG  EQU   @03
ODDREG   EQU   @05
GTSTR0   EQU   @00
GTSTR1   EQU   @01
GTSTR2   EQU   @02
GTSTR15  EQU   @15
GTSTR4   EQU   @04
GTSTR5   EQU   @05
GTSTR6   EQU   @06
GTSTR7   EQU   @07
GTSTR8   EQU   @08
GTSTR3   EQU   @03
CVTPTR   EQU   16
FAILRSC  EQU   0
RIMTABLE EQU   0
RIMID    EQU   RIMTABLE
RIMUACT  EQU   RIMTABLE+4
RIMMASK  EQU   RIMTABLE+8
TAPEMASK EQU   0
ZMASK    EQU   0
VOLUNTAB EQU   0
VOLID    EQU   VOLUNTAB
VOLSTAT  EQU   VOLUNTAB+6
VOLSTATA EQU   VOLSTAT
VOLPUB   EQU   VOLSTATA
VOLPRV   EQU   VOLSTATA
VOLSPEC  EQU   VOLSTATA
VOLNSHR  EQU   VOLSTATA
VOLSTATB EQU   VOLSTAT+1
VOLALOC  EQU   VOLSTATB
VDEVREQD EQU   VOLSTATB
VUDNALOC EQU   VOLSTATB
VOLSTATC EQU   VOLSTAT+2
VOLTAREQ EQU   VOLSTATC
VOLDAREQ EQU   VOLSTATC
VOLSTATD EQU   VOLSTAT+3
VOLUNTID EQU   VOLUNTAB+10
VOLALGTP EQU   VOLUNTAB+12
VOLSIOTP EQU   VOLUNTAB+16
VUUCBP   EQU   VOLUNTAB+20
VUGRID   EQU   VOLUNTAB+24
VUPOOL   EQU   0
VUPOOL#  EQU   VUPOOL
VUGRLST  EQU   0
VUGRLENT EQU   VUGRLST
VUGRLIDS EQU   VUGRLENT
VUGRLFLG EQU   VUGRLENT+4
ANDMASK  EQU   0
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
ALGPTRS  EQU   0
ALGPARMP EQU   ALGPTRS
ALGRQLTP EQU   ALGPTRS+4
ALGGLSTP EQU   ALGPTRS+8
ALGGCNTP EQU   ALGPTRS+12
CVRPARM  EQU   0
CVRRQPTR EQU   CVRPARM
CVRNREQ  EQU   CVRPARM+4
CVRFLG1  EQU   CVRPARM+8
CVRRQLST EQU   0
CVRVUPTR EQU   CVRRQLST
CVRREQ1  EQU   CVRRQLST+4
CVRMIN   EQU   CVRRQLST+10
CVRFLG2  EQU   CVRRQLST+16
CVRSKFLG EQU   CVRFLG2
CVRSCRTH EQU   CVRFLG2
CVRMULTI EQU   CVRFLG2
CVRIGNOR EQU   CVRFLG2
CVRDUPLI EQU   CVRFLG2+1
CVRNGRP  EQU   CVRRQLST+18
CVRGRPPT EQU   CVRRQLST+20
CVRGPLST EQU   0
CVRGCPTR EQU   CVRGPLST
CVRGRPID EQU   CVRGPLST+4
CVRFLG3  EQU   CVRGPLST+12
CVRGSKP  EQU   CVRFLG3
GRPCOUNT EQU   0
GRPIDENT EQU   GRPCOUNT+10
ALCWA    EQU   0
FMAPPTR  EQU   ALCWA+4
SIOT1P   EQU   ALCWA+8
FAILRSCP EQU   ALCWA+20
EDTABPTR EQU   ALCWA+24
CNTABLE  EQU   ALCWA+28
VOLUNPTR EQU   ALCWA+80
VOLUNSZE EQU   ALCWA+84
ALGTABP  EQU   ALCWA+88
ALGTABSZ EQU   ALCWA+92
RIMTABP  EQU   ALCWA+96
RIMTABLN EQU   ALCWA+100
RIMTABCT EQU   ALCWA+104
QMGRRBP  EQU   ALCWA+108
INDICATE EQU   ALCWA+112
@NM00014 EQU   ALCWA+113
ALCWASID EQU   ALCWA+114
TIOTHDRP EQU   ALCWA+120
WMASKPTR EQU   ALCWA+128
WMASK2P  EQU   ALCWA+132
WORK3MP  EQU   ALCWA+136
CANCELP  EQU   ALCWA+140
EXITPRMP EQU   ALCWA+144
NAMES    EQU   0
AQMPARAM EQU   0
AQMECODE EQU   AQMPARAM
AQMQCODE EQU   AQMPARAM+2
AQMASID  EQU   AQMPARAM+8
AQMLENGT EQU   AQMPARAM+12
AQMCANCP EQU   AQMPARAM+16
AQMNORMP EQU   AQMPARAM+20
INDMSIOT EQU   0
SCTUSADD EQU   INDMSIOT+20
SIOTAFID EQU   INDMSIOT+26
SIOTBYT1 EQU   INDMSIOT+43
SIOTALCD EQU   SIOTBYT1
SIOTBYT3 EQU   INDMSIOT+46
SIOTJES3 EQU   SIOTBYT3
SIOTTSTC EQU   INDMSIOT+47
SIOTGIID EQU   INDMSIOT+50
SIOTBYT0 EQU   INDMSIOT+52
SCTSDISP EQU   INDMSIOT+55
SCTSBYT1 EQU   INDMSIOT+56
SCTSBYT2 EQU   INDMSIOT+57
SCTSBYT3 EQU   INDMSIOT+58
SCTSBYT4 EQU   INDMSIOT+59
SCTUTYPE EQU   INDMSIOT+60
SIOTDEVT EQU   SCTUTYPE
SIOUBYT3 EQU   SIOTDEVT+2
SIOTBYT4 EQU   INDMSIOT+81
SIOTALTD EQU   INDMSIOT+92
SIOTBYT2 EQU   INDMSIOT+103
SIOTDMND EQU   SIOTBYT2
SIOTRSNC EQU   INDMSIOT+130
SIOTEDLP EQU   INDMSIOT+136
SVOLUNAD EQU   INDMSIOT+140
SIOTNPTR EQU   INDMSIOT+152
SVOLUNNO EQU   INDMSIOT+168
EDTHDR   EQU   0
EDTLUVSP EQU   EDTHDR
EDTGENSP EQU   EDTHDR+4
EDTGRPSP EQU   EDTHDR+8
EDTUCBSP EQU   EDTHDR+12
EDTMSKTP EQU   EDTHDR+16
LUVSECT  EQU   0
LUVHDR   EQU   LUVSECT
LUVENTNO EQU   LUVHDR
LUVENTLN EQU   LUVHDR+4
LUVENTRY EQU   0
UNITNAME EQU   LUVENTRY
LUVGMTP  EQU   LUVENTRY+12
LUVFLAGS EQU   LUVENTRY+24
GENSECT  EQU   0
GENHDR   EQU   GENSECT
GENENTRY EQU   0
GRPTRTAB EQU   0
GRPSECT  EQU   0
GRPHDR   EQU   GRPSECT
GRPENTRY EQU   0
GRPUCBP  EQU   GRPENTRY+8
EUCBSECT EQU   0
EUCBHDR  EQU   EUCBSECT
EUCBENTY EQU   0
GRMSKTAB EQU   0
GMTHDR   EQU   GRMSKTAB
GMTENTLN EQU   GMTHDR+4
GMTENTRY EQU   0
GRPMASK  EQU   GMTENTRY
IEFEDL   EQU   0
EDLHDR   EQU   IEFEDL
EDLGENNO EQU   EDLHDR+4
EDLFGENP EQU   EDLHDR+8
EDLGMTP  EQU   EDLHDR+12
EDLUVFLG EQU   EDLHDR+16
EDLMGENS EQU   EDLUVFLG
EDLENTRY EQU   0
EDLNXTNT EQU   EDLENTRY
EDLDEVT  EQU   EDLENTRY+4
EDLGRPNO EQU   EDLENTRY+8
EDLGRPTR EQU   EDLENTRY+12
EDLDTFLG EQU   EDLENTRY+20
EINDEVTP EQU   EDLDTFLG
EDLGNTRY EQU   0
EDLNXGRP EQU   EDLGNTRY
EDLLISTP EQU   EDLGNTRY+8
EDLGRID  EQU   EDLGNTRY+12
EDLGRFLG EQU   EDLGNTRY+16
EDLJINEL EQU   EDLGRFLG
EDLUCBL  EQU   0
EDLUCBAD EQU   EDLUCBL
EDLINDIC EQU   EDLUCBL+2
FUNCMAP  EQU   0
VOLMNTSW EQU   FUNCMAP
WRTMSGSW EQU   FUNCMAP
UWAITSW  EQU   FUNCMAP
VWAITSW  EQU   FUNCMAP
MSSTRMSW EQU   FUNCMAP
OFFDEVSW EQU   FUNCMAP
CCLMNTSW EQU   FUNCMAP
GENLOKSW EQU   FUNCMAP
SSEMSGSW EQU   FUNCMAP+1
HDRMSGSW EQU   FUNCMAP+1
MTRJOBSW EQU   FUNCMAP+1
NOTIOTNQ EQU   FUNCMAP+1
TRKMSW   EQU   FUNCMAP+1
WAITOKSW EQU   FUNCMAP+1
ASNMSW   EQU   FUNCMAP+1
PRMESTAE EQU   0
PRMRESC  EQU   PRMESTAE+252
PRMFUNC  EQU   PRMESTAE+253
PRMQMGP  EQU   PRMESTAE+264
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT0 EQU   UCBTBYT2
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00037 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCB3800X EQU   0
UCBOPTNS EQU   UCB3800X
UCBACTIV EQU   UCB3800X+3
UCBMDRBF EQU   UCB3800X+36
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
SUBITS   EQU   0
SUBYTE1  EQU   SUBITS
SUBYTE2  EQU   SUBITS+1
SUBYTE3  EQU   SUBITS+2
SU18BIT  EQU   SUBYTE3
SUBYTE4  EQU   SUBITS+3
SUBYTE5  EQU   SUBITS+4
SUBYTE6  EQU   SUBITS+5
SUBYTE7  EQU   SUBITS+6
SUBYTE8  EQU   SUBITS+7
SUBYTE9  EQU   SUBITS+8
SUBYTE10 EQU   SUBITS+9
SUBYTE11 EQU   SUBITS+10
SUBYTE12 EQU   SUBITS+11
SUBYTE13 EQU   SUBITS+12
UCBBGN   EQU   0
ALCWAPTR EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
CVTIHASU EQU   CVTS01+696
UCBOBS01 EQU   UCBDEV
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00036 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBCTCAD EQU   UCBOBS08
UCBCTCF1 EQU   UCBOBS08+4
UCBOBS09 EQU   UCBDEV
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBRV082 EQU   UCBCTCF1
UCBRV081 EQU   UCBCTCF1
UCBRV080 EQU   UCBCTCF1
UCBRV079 EQU   UCBCTCF1
UCBRV078 EQU   UCBCTCF1
UCBRV077 EQU   UCBCTCF1
UCBRV076 EQU   UCBCTCF1
UCBCTC80 EQU   UCBCTCF1
UCBCTCAL EQU   UCBCTCAD
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00036
UCBSKPFG EQU   @NM00036
UCBRIPND EQU   @NM00036
UCBRTIAC EQU   @NM00036
UCBRSV79 EQU   @NM00036
UCBRSV78 EQU   @NM00036
UCBRSV77 EQU   @NM00036
UCBOLTEP EQU   @NM00036
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBDQDSP EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00035 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRESVP EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVOLI  EQU   UCBOBS01+4
UCBVTOC  EQU   UCBOBS01
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
SURV104  EQU   SUBITS+13
SURV103  EQU   SUBYTE13
SURV102  EQU   SUBYTE13
SURV101  EQU   SUBYTE13
SU100BT  EQU   SUBYTE13
SU99BIT  EQU   SUBYTE13
SU98BIT  EQU   SUBYTE13
SU97BIT  EQU   SUBYTE13
SU96BIT  EQU   SUBYTE13
SU95BIT  EQU   SUBYTE12
SU94BIT  EQU   SUBYTE12
SU93BIT  EQU   SUBYTE12
SU92BIT  EQU   SUBYTE12
SU91BIT  EQU   SUBYTE12
SU90BIT  EQU   SUBYTE12
SU89BIT  EQU   SUBYTE12
SU88BIT  EQU   SUBYTE12
SU87BIT  EQU   SUBYTE11
SU86BIT  EQU   SUBYTE11
SU85BIT  EQU   SUBYTE11
SU84BIT  EQU   SUBYTE11
SU83BIT  EQU   SUBYTE11
SU82BIT  EQU   SUBYTE11
SU81BIT  EQU   SUBYTE11
SU80BIT  EQU   SUBYTE11
SU79BIT  EQU   SUBYTE10
SU78BIT  EQU   SUBYTE10
SU77BIT  EQU   SUBYTE10
SU76BIT  EQU   SUBYTE10
SU75BIT  EQU   SUBYTE10
SU74BIT  EQU   SUBYTE10
SU73BIT  EQU   SUBYTE10
SU72BIT  EQU   SUBYTE10
SU71BIT  EQU   SUBYTE9
SU70BIT  EQU   SUBYTE9
SU69BIT  EQU   SUBYTE9
SU68BIT  EQU   SUBYTE9
SU67BIT  EQU   SUBYTE9
SU66BIT  EQU   SUBYTE9
SU65BIT  EQU   SUBYTE9
SU64BIT  EQU   SUBYTE9
SU63BIT  EQU   SUBYTE8
SU62BIT  EQU   SUBYTE8
SU61BIT  EQU   SUBYTE8
SU60BIT  EQU   SUBYTE8
SU59BIT  EQU   SUBYTE8
SU58BIT  EQU   SUBYTE8
SU57BIT  EQU   SUBYTE8
SU56BIT  EQU   SUBYTE8
SU55BIT  EQU   SUBYTE7
SU54BIT  EQU   SUBYTE7
SU53BIT  EQU   SUBYTE7
SU52BIT  EQU   SUBYTE7
SU51BIT  EQU   SUBYTE7
SU50BIT  EQU   SUBYTE7
SU49BIT  EQU   SUBYTE7
SU48BIT  EQU   SUBYTE7
SU47BIT  EQU   SUBYTE6
SU46BIT  EQU   SUBYTE6
SU45BIT  EQU   SUBYTE6
SU44BIT  EQU   SUBYTE6
SU43BIT  EQU   SUBYTE6
SU42BIT  EQU   SUBYTE6
SU41BIT  EQU   SUBYTE6
SU40BIT  EQU   SUBYTE6
SU39BIT  EQU   SUBYTE5
SU38BIT  EQU   SUBYTE5
SU37BIT  EQU   SUBYTE5
SU36BIT  EQU   SUBYTE5
SU35BIT  EQU   SUBYTE5
SU34BIT  EQU   SUBYTE5
SU33BIT  EQU   SUBYTE5
SU32BIT  EQU   SUBYTE5
SU31BIT  EQU   SUBYTE4
SU30BIT  EQU   SUBYTE4
SU29BIT  EQU   SUBYTE4
SU28BIT  EQU   SUBYTE4
SU27BIT  EQU   SUBYTE4
SU26BIT  EQU   SUBYTE4
SU25BIT  EQU   SUBYTE4
SU24BIT  EQU   SUBYTE4
SU23BIT  EQU   SUBYTE3
SU22BIT  EQU   SUBYTE3
SU21BIT  EQU   SUBYTE3
SU20BIT  EQU   SUBYTE3
SU19BIT  EQU   SUBYTE3
SU17BIT  EQU   SUBYTE3
SU16BIT  EQU   SUBYTE3
SU15BIT  EQU   SUBYTE2
SU14BIT  EQU   SUBYTE2
SU13BIT  EQU   SUBYTE2
SU12BIT  EQU   SUBYTE2
SU11BIT  EQU   SUBYTE2
SU10BIT  EQU   SUBYTE2
SU9BIT   EQU   SUBYTE2
SU8BIT   EQU   SUBYTE2
SU7BIT   EQU   SUBYTE1
SU6BIT   EQU   SUBYTE1
SU5BIT   EQU   SUBYTE1
SU4BIT   EQU   SUBYTE1
SU3BIT   EQU   SUBYTE1
SU2BIT   EQU   SUBYTE1
SU1BIT   EQU   SUBYTE1
SU0BIT   EQU   SUBYTE1
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBFCBPE EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBMDRBA EQU   UCBMDRBF+1
UCBRV075 EQU   UCBMDRBF
UCBRV074 EQU   UCB3800X+32
UCBIMAGE EQU   UCB3800X+28
UCBFCBNM EQU   UCB3800X+24
UCBCHAR4 EQU   UCB3800X+20
UCBCHAR3 EQU   UCB3800X+16
UCBCHAR2 EQU   UCB3800X+12
UCBCHAR1 EQU   UCB3800X+8
UCBCGMID EQU   UCB3800X+4
UCBBRSTA EQU   UCBACTIV
UCBRV063 EQU   UCBACTIV
UCBRV062 EQU   UCBACTIV
UCBRV061 EQU   UCBACTIV
UCBRV060 EQU   UCBACTIV
UCBRV059 EQU   UCBACTIV
UCBRV058 EQU   UCBACTIV
UCBRV057 EQU   UCBACTIV
UCBRV050 EQU   UCB3800X+2
UCBCGMNO EQU   UCB3800X+1
UCBRV083 EQU   UCBOPTNS
UCBBRSTR EQU   UCBOPTNS
UCBRV056 EQU   UCBOPTNS
UCBRV055 EQU   UCBOPTNS
UCBRV054 EQU   UCBOPTNS
UCBRV053 EQU   UCBOPTNS
UCBRV052 EQU   UCBOPTNS
UCBRV051 EQU   UCBOPTNS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBRV043 EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBERLOG EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBINHIO EQU   UCBFLP1
UCBNSWAP EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00037
UCBHALI  EQU   @NM00037
UCBRSV09 EQU   @NM00037
UCBRSV08 EQU   @NM00037
UCBRSV07 EQU   @NM00037
UCBRSV06 EQU   @NM00037
UCBRSV05 EQU   @NM00037
UCBRSV04 EQU   @NM00037
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCB3TAPE EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBNAME  EQU   UCBOB+13
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBSIGP  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBMMSGP EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBDUC   EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00034 EQU   UCB
PRMWTOID EQU   PRMESTAE+292
PRMNELM  EQU   PRMESTAE+288
PRMDSQF  EQU   PRMESTAE+284
PRMDSQL  EQU   PRMESTAE+280
PRMQDBP  EQU   PRMESTAE+276
PRMQMBP  EQU   PRMESTAE+272
PRMQMBLN EQU   PRMESTAE+268
PRMUCBP  EQU   PRMESTAE+260
PRMSIOTP EQU   PRMESTAE+256
PRMASID  EQU   PRMESTAE+254
@NM00033 EQU   PRMFUNC
VMVCALL  EQU   PRMFUNC
FREECORE EQU   PRMFUNC
DUMPOK   EQU   PRMFUNC
TIOTBLT  EQU   PRMFUNC
DSABCHN  EQU   PRMFUNC
UPDSABCK EQU   PRMFUNC
GENCLNUP EQU   PRMFUNC
@NM00032 EQU   PRMRESC
MLWTO    EQU   PRMRESC
TPQ      EQU   PRMRESC
DSSUNREC EQU   PRMRESC
DSSTAP   EQU   PRMRESC
CHNGQ    EQU   PRMRESC
DDRQ     EQU   PRMRESC
ENQQ4    EQU   PRMRESC
@NM00031 EQU   PRMESTAE
EXTRACAL EQU   FUNCMAP+1
ALCASDSN EQU   ASNMSW
ALCSUBWT EQU   WAITOKSW
ALCATRKM EQU   TRKMSW
ALCNOENQ EQU   NOTIOTNQ
ALCJOBNM EQU   MTRJOBSW
ALCHDMSG EQU   HDRMSGSW
ALCSSMSG EQU   SSEMSGSW
ALCGENER EQU   GENLOKSW
ALCCANCL EQU   CCLMNTSW
ALCOFFDV EQU   OFFDEVSW
ALCMSSTM EQU   MSSTRMSW
ALCWTVOL EQU   VWAITSW
ALCWTUNT EQU   UWAITSW
ALCMSGLV EQU   WRTMSGSW
ALCMOUNT EQU   VOLMNTSW
EDLNOJES EQU   EDLINDIC
EDLVOLAF EQU   EDLINDIC
EDLENQ   EQU   EDLINDIC
EDLDADSM EQU   EDLINDIC
EDLALCD  EQU   EDLINDIC
EDLUCBNO EQU   EDLGNTRY+4
@NM00030 EQU   EDLENTRY+18
EDLNSCNT EQU   EDLENTRY+16
EDLVAM   EQU   EDLUVFLG
EDLLUV   EQU   EDLHDR
GMTENTNO EQU   GMTHDR
EUCBTPOS EQU   EUCBENTY
EUCBENLN EQU   EUCBHDR+4
EUCBENNO EQU   EUCBHDR
GRPUCBNO EQU   GRPENTRY+4
GRPID    EQU   GRPENTRY
GRPENTLN EQU   GRPHDR+4
GRPENTNO EQU   GRPHDR
GRPTR    EQU   GRPTRTAB
GENGRPTR EQU   GENENTRY+8
GENGRPNO EQU   GENENTRY+4
GENDEVT  EQU   GENENTRY
GENENTLN EQU   GENHDR+4
GENENTNO EQU   GENHDR
LUVAGMTP EQU   LUVENTRY+28
@NM00029 EQU   LUVFLAGS
LUVMGENS EQU   LUVFLAGS
LUVAGMSK EQU   LUVFLAGS
LUVVAM   EQU   LUVFLAGS
LUVGENP  EQU   LUVENTRY+20
LUVGENNO EQU   LUVENTRY+16
LUVALUE  EQU   LUVENTRY+8
SIODDSNL EQU   INDMSIOT+173
SIOVDSNL EQU   INDMSIOT+172
SIOVDSNT EQU   INDMSIOT+170
SIOTVMVP EQU   INDMSIOT+164
SIOTJFX  EQU   INDMSIOT+160
SJFCBPTR EQU   INDMSIOT+156
SIOTETIO EQU   INDMSIOT+148
SIOTATE  EQU   INDMSIOT+144
SIOTEDLS EQU   INDMSIOT+132
SCTANAME EQU   INDMSIOT+122
SIOTSSIC EQU   INDMSIOT+120
@NM00028 EQU   INDMSIOT+108
SIOTSSNM EQU   INDMSIOT+104
@NM00027 EQU   SIOTBYT2
SIOTCVOL EQU   SIOTBYT2
SIOTCNEW EQU   SIOTBYT2
SIOTCALC EQU   SIOTBYT2
SIOTGALL EQU   SIOTBYT2
SIOTDSPD EQU   SIOTBYT2
SIOTOPUC EQU   INDMSIOT+99
SIOTOUTR EQU   INDMSIOT+97
SIOTOUTC EQU   INDMSIOT+96
SIOTSSWA EQU   INDMSIOT+93
SIOTAUNC EQU   SIOTALTD
SIOTACAT EQU   SIOTALTD
SIOTADEL EQU   SIOTALTD
SIOTAKEP EQU   SIOTALTD
SIOTNPRV EQU   SIOTALTD
SIOJCATS EQU   SIOTALTD
@NM00026 EQU   SIOTALTD
@NM00025 EQU   SIOTALTD
@NM00024 EQU   INDMSIOT+91
SIOTNDSB EQU   INDMSIOT+88
@NM00023 EQU   INDMSIOT+84
SIOTDPCD EQU   INDMSIOT+82
@NM00022 EQU   SIOTBYT4
SIOTRACT EQU   SIOTBYT4
SIOTRACD EQU   SIOTBYT4
SIOTPROT EQU   SIOTBYT4
SCTOUTPN EQU   INDMSIOT+80
SCTOUTNO EQU   INDMSIOT+76
SCTOUTNM EQU   INDMSIOT+68
SIOUCBAD EQU   SCTUTYPE+5
SIOUCNVT EQU   SCTUTYPE+4
SIOUBYT4 EQU   SIOTDEVT+3
@NM00021 EQU   SIOUBYT3
SIO3UREC EQU   SIOUBYT3
SIO3DISP EQU   SIOUBYT3
SIO3DACC EQU   SIOUBYT3
SIO3COMM EQU   SIOUBYT3
SIO3TAPE EQU   SIOUBYT3
SIOUBYT2 EQU   SIOTDEVT+1
SIOUBYT1 EQU   SIOTDEVT
SIOTOMN  EQU   SCTSBYT4
SIOTIPDI EQU   SCTSBYT4
SIOTVAFF EQU   SCTSBYT4
SIOTSTEP EQU   SCTSBYT4
SIOTASCI EQU   SCTSBYT4
@NM00020 EQU   SCTSBYT4
SIOTGDGA EQU   SCTSBYT4
SCTSGDGS EQU   SCTSBYT4
SCTSOLD  EQU   SCTSBYT3
SCTSMOD  EQU   SCTSBYT3
SCTSNEW  EQU   SCTSBYT3
SCTSYSOU EQU   SCTSBYT3
SCTVREF  EQU   SCTSBYT3
SCTALCHK EQU   SCTSBYT3
SCTSYSNE EQU   SCTSBYT3
SCTDSNRF EQU   SCTSBYT3
SCTRECVD EQU   SCTSBYT2
SCTDEFER EQU   SCTSBYT2
SCTLABEL EQU   SCTSBYT2
SCTUNLBD EQU   SCTSBYT2
SCTJOBLB EQU   SCTSBYT2
SCTVOLAF EQU   SCTSBYT2
SIOTCATL EQU   SCTSBYT2
SIOCLUNL EQU   SCTSBYT2
SIOTJSCT EQU   SCTSBYT1
SCTUNAFF EQU   SCTSBYT1
SCTPARLM EQU   SCTSBYT1
SIOTQDSN EQU   SCTSBYT1
SIOTGDSN EQU   SCTSBYT1
SIOTCCAT EQU   SCTSBYT1
SCTSYSIN EQU   SCTSBYT1
SCTDUMMY EQU   SCTSBYT1
SIOTUNCT EQU   SCTSDISP
SIOTCTLG EQU   SCTSDISP
SIOTDLET EQU   SCTSDISP
SIOTKEEP EQU   SCTSDISP
SIOTPASS EQU   SCTSDISP
SIOTPRIV EQU   SCTSDISP
S3400DSP EQU   SCTSDISP
SIOTRETN EQU   SCTSDISP
SIOTVLCT EQU   INDMSIOT+54
SCTNMBUT EQU   INDMSIOT+53
SIOTRTRY EQU   SIOTBYT0
SIOTPUPV EQU   SIOTBYT0
SIOTNOPV EQU   SIOTBYT0
SIOTGIGN EQU   SIOTBYT0
SPVTAMSG EQU   SIOTBYT0
SIOTFUDA EQU   SIOTBYT0
SIOTDYAL EQU   SIOTBYT0
SIOTSSDS EQU   SIOTBYT0
SCTVOLCT EQU   INDMSIOT+49
SCTSPOOL EQU   INDMSIOT+48
SIOTQNAM EQU   SIOTTSTC
SIOTDSNM EQU   SIOTTSTC
SIOTTRKM EQU   SIOTTSTC
SIOTSSMG EQU   SIOTTSTC
SIOTSSGP EQU   SIOTTSTC
@NM00019 EQU   SIOTTSTC
SIOTTERM EQU   SIOTTSTC
SIOTINFC EQU   SIOTTSTC
@NM00018 EQU   SIOTBYT3
SIOTDSID EQU   SIOTBYT3
S3400OFF EQU   SIOTBYT3
SIOCDEVT EQU   SIOTBYT3
SIOALIAS EQU   SIOTBYT3
SCTDDINO EQU   INDMSIOT+44
SIOTDDNT EQU   SIOTBYT1
SIODADSM EQU   SIOTBYT1
SIOTDADR EQU   SIOTBYT1
SIODUNAL EQU   SIOTBYT1
SIOVAMDS EQU   SIOTBYT1
SIOTHOLD EQU   SIOTBYT1
SIOTOCKP EQU   SIOTBYT1
SIOPSCNT EQU   INDMSIOT+42
SIOTREFN EQU   INDMSIOT+40
SIOTOTUN EQU   INDMSIOT+39
SIOTVRSB EQU   INDMSIOT+36
@NM00017 EQU   INDMSIOT+35
SCTPJFCB EQU   INDMSIOT+32
@NM00016 EQU   INDMSIOT+31
SCTPSIOT EQU   INDMSIOT+28
SIOTVLSP EQU   INDMSIOT+24
SIODSNTE EQU   INDMSIOT+22
SIOTUNAF EQU   SCTUSADD
SIOTDEST EQU   INDMSIOT+12
SCTDDNAM EQU   INDMSIOT+4
SIOTTYPE EQU   INDMSIOT+3
SIOTDSKA EQU   INDMSIOT
AQMQBPTR EQU   AQMPARAM+24
AQMPFLG  EQU   AQMNORMP
AQMMASKP EQU   AQMPARAM+4
ALCPROCN EQU   NAMES+16
ALCSTEPN EQU   NAMES+8
ALCJOBN  EQU   NAMES
LOJSSNMP EQU   ALCWA+164
SSERBLKP EQU   ALCWA+160
GROUPSZ  EQU   ALCWA+156
GRIDPTR  EQU   ALCWA+152
ALCNUCBS EQU   ALCWA+148
LGENLOCK EQU   ALCWA+124
TCBP     EQU   ALCWA+116
@NM00015 EQU   @NM00014
NODEVERR EQU   @NM00014
NEEDRCVY EQU   @NM00014
ALCWAREC EQU   @NM00014
WAITIGEN EQU   @NM00014
UNITRECS EQU   @NM00014
ALCWADUL EQU   INDICATE
ALCWISAM EQU   INDICATE
DSSUNIT  EQU   INDICATE
DSSTAPE  EQU   INDICATE
PRIVASUM EQU   INDICATE
INDREQU  EQU   INDICATE
INDRETRY EQU   INDICATE
INDWAIT  EQU   INDICATE
@NM00013 EQU   ALCWA+78
LTUNITID EQU   ALCWA+76
TOTVOLUN EQU   CNTABLE+44
NUMREQS  EQU   CNTABLE+40
TOTREQS  EQU   CNTABLE+36
OTHEREQS EQU   CNTABLE+32
SUBSREQS EQU   CNTABLE+28
STRGREQS EQU   CNTABLE+24
PUBLREQS EQU   CNTABLE+20
PVTNREQS EQU   CNTABLE+16
SPECREQS EQU   CNTABLE+12
TPREQS   EQU   CNTABLE+8
VAMREQS  EQU   CNTABLE+4
DMYREQS  EQU   CNTABLE
IOSLUTP  EQU   ALCWA+16
JSCBPTR  EQU   ALCWA+12
WASIZE   EQU   ALCWA
GRPWPTR  EQU   GRPCOUNT+12
GRPEXCS  EQU   GRPCOUNT+8
GRPTOTAL EQU   GRPCOUNT+6
GRPOFFLN EQU   GRPCOUNT+4
GRPALLCT EQU   GRPCOUNT+2
GRPAVAIL EQU   GRPCOUNT
@NM00012 EQU   CVRGPLST+13
@NM00011 EQU   CVRFLG3
CVRFORCI EQU   CVRFLG3
CVRBOUND EQU   CVRGPLST+10
CVRGALL  EQU   CVRGPLST+8
CVRGRPAL EQU   CVRGPLST+6
@NM00010 EQU   CVRRQLST+26
CVRWUCBP EQU   CVRRQLST+24
@NM00009 EQU   CVRFLG2+1
CVRWMOVE EQU   CVRFLG2
CVRFULL  EQU   CVRFLG2
CVRREACH EQU   CVRFLG2
CVRRUSED EQU   CVRFLG2
CVRGNEXT EQU   CVRRQLST+12
CVRPTS   EQU   CVRMIN
CVRNEED  EQU   CVRRQLST+8
CVRALLCT EQU   CVRRQLST+6
@NM00008 EQU   CVRPARM+9
@NM00007 EQU   CVRFLG1
CVRFCALL EQU   CVRFLG1
CVROFFLG EQU   CVRFLG1
CVRALFLG EQU   CVRFLG1
CVRAVFLG EQU   CVRFLG1
CVRGRPLK EQU   CVRPARM+6
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00006 EQU   CVTFIX+248
@NM00005 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00004 EQU   VUGRLENT+5
@NM00003 EQU   VUGRLFLG
VUGRALCD EQU   VUGRLFLG
VUCBS    EQU   VUPOOL+4
VURCVYPR EQU   VOLSTATD
VUVLUNIQ EQU   VOLSTATD
VUDMUNIQ EQU   VOLSTATD
VUUNALSW EQU   VOLSTATD
VUDMNDAL EQU   VOLSTATD
VUDMNDOF EQU   VOLSTATD
VUREALOC EQU   VOLSTATD
VUMUGDON EQU   VOLSTATD
@NM00002 EQU   VOLSTATC
@NM00001 EQU   VOLSTATC
VURECVRY EQU   VOLSTATC
VOLURREQ EQU   VOLSTATC
VOLGRREQ EQU   VOLSTATC
VOLCOREQ EQU   VOLSTATC
VUAFFWRK EQU   VOLSTATB
VUVINELG EQU   VOLSTATB
VUDADSME EQU   VOLSTATB
VUPROCED EQU   VOLSTATB
VOLMNTD  EQU   VOLSTATB
VOLDEFER EQU   VOLSTATA
VUDADSM  EQU   VOLSTATA
VOLRESVE EQU   VOLSTATA
VOLSTG   EQU   VOLSTATA
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00191 EQU   @RC00179
@RF00288 EQU   @RC00284
@RC00324 EQU   @RC00321
BITOFF   EQU   @EL00002
@ENDDATA EQU   *
         END   IEFAB472,(C'PLS1945',0701,78054)
