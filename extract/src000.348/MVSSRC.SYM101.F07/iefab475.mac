         TITLE 'IEFAB475 - ALLOCATE WITHIN A GENERIC                   *
                        '
IEFAB475 CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'IEFAB475  75.090'                              01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @12,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@12                                      01S0001
         L     @00,@SIZDATD                                     01S0001
         GSPACE   R,LV=(0)
         LR    @11,@01                                          01S0001
         USING @DATD,@11                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         LM    @00,@01,20(@13)                                  01S0001
         ST    @11,8(,@13)                                      01S0001
         LR    @13,@11                                          01S0001
         MVC   @PC00001(12),0(@01)                              01S0001
*RTNCODE=SUCCESS;                      /*ASSUME NO ERRORS            */
         SLR   RTNCODE,RTNCODE                                  01S0065
*RFY CVRRQLST BASED(VOLALGTP);                                  01S0066
*DOTYPES = ZERO;                       /*INITIALIZE SWITCHES         */
         MVI   DOTYPES,X'00'                                    01S0067
*SPDEMAND = OFF;                       /*ASSUME NO SPEC DEMANDS      */
         L     @10,@PC00001+8                                   01S0068
         NI    SPDEMAND(@10),B'11011111'                        01S0068
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - FLAGDMAN                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - FLAG ALL REQS EXCEPT DEMANDS ELIGIBLE FOR     */
*/*                    THIS GENERIC                                  */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE MARKS ALL SIOTS EXCEPT DEMAND REQUESTS WHICH    */
*/*     ARE ELIGIBLE FOR THE GENERIC DEVICE TYPE JUST LOCKED -- SO   */
*/*     THAT MODULE IEFAB479 (ALLOCATE DEMAND REQS) WILL ONLY TRY    */
*/*     TO ALLOCATE DEMAND REQUESTS ELIGIBLE FOR THIS GENERIC        */
*/*     (I.E. THE UNMARKED SIOTS).                                   */
*/*                                                                  */
*/*   OPERATION - THE OPERATION IS DOCUMENTED BY THE CODE ITSELF.    */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT - ALCWAPTR - PTR TO THE ALLOCATION WORK AREA (ALCWA)     */
*/*            - SIOT1P - PTR TO THE FIRST SIOT IN THE CHAIN         */
*/*            - LGENLOCK - ID OF THE GENERIC JUST LOCKED            */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITION - FUNCTION COMPLETED                                 */
*/*                                                                  */
*/*   OUTPUT - SIOTGIGN - SET TO 0 FOR DEMAND REQS ELIGIBLE TO THE   */
*/*                       GENERIC JUST LOCKED.                       */
*/*                     - TO 1 FOR ALL OTHER REQS                    */
*/*          - DODEMAND - SET TO 1 IF THERE ARE ANY DEMAND REQS      */
*/*          - SPDEMAND - SET TO 1 IF THERE ARE ANY SPECIFIC         */
*/*                       VOLUME DEMAND REQUESTS                     */
*/*                                                                  */
*/*   RETURN CODE - (NONE)                                           */
*/*                                                                  */
*/********************************************************************/
*SIOTPTR = SIOT1P;                     /*POINT TO FIRST SIOT IN CHAIN*/
         L     @10,@PC00001                                     02S0069
         L     @10,ALCWAPTR(,@10)                               02S0069
         L     SIOTPTR,SIOT1P(,@10)                             02S0069
*DO WHILE SIOTPTR ^= ZERO;             /*SCAN ALL SIOTS              */
         B     @DE00070                                         02S0070
@DL00070 DS    0H                                               02S0071
*  SIOTGIGN = ON;                      /*ASSUME GENERIC NOT NEEDED   */
         OI    SIOTGIGN(SIOTPTR),B'00001000'                    02S0071
*  IF SIOTALCD = OFF THEN              /*IS SIOT FULLY ALLOCATED ?   */
         TM    SIOTALCD(SIOTPTR),B'00000010'                    02S0072
         BNZ   @RF00072                                         02S0072
*    DO;                               /*NO, SIOT IS NOT FULLY ALLOCD*/
*      EDLPTR = EDLFGENP;              /*POINT TO 1ST GENERIC IN EDL */
         L     @10,SIOTEDLP(,SIOTPTR)                           02S0074
         L     EDLPTR,EDLFGENP(,@10)                            02S0074
*        IF EINDEVTP = OFF             /*IS GENERIC FOUND ELIGIBLE.. */
*            & EDLDEVT = LGENLOCK                               02S0075
*            & SIOTDMND = ON THEN      /*FOR A DEMAND REQUEST ?      */
         TM    EINDEVTP(EDLPTR),B'10000000'                     02S0075
         BNZ   @RF00075                                         02S0075
         L     @10,@PC00001                                     02S0075
         L     @10,ALCWAPTR(,@10)                               02S0075
         CLC   EDLDEVT(4,EDLPTR),LGENLOCK(@10)                  02S0075
         BNE   @RF00075                                         02S0075
         TM    SIOTDMND(SIOTPTR),B'10000000'                    02S0075
         BNO   @RF00075                                         02S0075
*          DO;                         /*YES,..                      */
*            SIOTGIGN = OFF;           /*TURN OFF IGNORE INDICATOR   */
         NI    SIOTGIGN(SIOTPTR),B'11110111'                    02S0077
*            DODEMAND = ON;            /*TURN ON DEMAND SWITCH       */
         OI    DODEMAND,B'10000000'                             02S0078
*            IF (SVOLUNAD->VOLSPEC=ON  /*SPECIFIC VOLUME REQ?        */
*              & EDLDEVT(3)=DATYPE)                             02S0079
*              × (EDLDEVT (3)=TAPETYPE) THEN /*OR TAPE REQ ?         */
         L     @10,SVOLUNAD(,SIOTPTR)                           02S0079
         TM    VOLSPEC(@10),B'00100000'                         02S0079
         BNO   @GL00003                                         02S0079
         CLI   EDLDEVT+2(EDLPTR),X'20'                          02S0079
         BE    @RT00079                                         02S0079
@GL00003 CLI   EDLDEVT+2(EDLPTR),X'80'                          02S0079
         BNE   @RF00079                                         02S0079
@RT00079 DS    0H                                               02S0080
*               SPDEMAND = ON;         /*YES, INDICATE TO IEFAB479   */
         L     @10,@PC00001+8                                   02S0080
         OI    SPDEMAND(@10),B'00100000'                        02S0080
*          END;                                                 02S0081
*        ELSE;                         /*GEN NOT FOUND FOR DEMAND REQ*/
@RF00075 DS    0H                                               02S0083
*    END;                                                       02S0083
*  ELSE;                               /*SIOT IS FULLY ALLOCATED     */
@RF00072 DS    0H                                               02S0085
*  SIOTPTR = SIOTNPTR;                 /*POINT TO NEXT SIOT IN CHAIN */
@RC00072 L     SIOTPTR,SIOTNPTR(,SIOTPTR)                       02S0085
*END;                                                           02S0086
@DE00070 LTR   SIOTPTR,SIOTPTR                                  02S0086
         BNZ   @DL00070                                         02S0086
*IF DODEMAND = ON THEN                 /*ARE THERE ANY DEMAND REQS ? */
         TM    DODEMAND,B'10000000'                             01S0087
         BNO   @RF00087                                         01S0087
*  DO;                                 /*YES, PROCESS                */
*    CALL IEFAB479(ALCWAPTR,FLAGBITS); /*ALLOCATE DEMAND REQUESTS    */
         L     @10,@PC00001                                     01S0089
         ST    @10,@AL00001                                     01S0089
         L     @10,@PC00001+8                                   01S0089
         ST    @10,@AL00001+4                                   01S0089
         L     @15,@CV00119                                     01S0089
         LA    @01,@AL00001                                     01S0089
         BALR  @14,@15                                          01S0089
*    RTNCODE=REG15;                    /*SAVE THE RETURN CODES       */
         LR    RTNCODE,REG15                                    01S0090
*  END;                                                         01S0091
*ELSE;                                 /*NO DEMAND REQUESTS          */
@RF00087 DS    0H                                               01S0093
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - FLAGIGEN                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - FLAG REQS NOT ELIGIBLE TO THIS GENERIC        */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE MARKS THOSE UNALLOCATED SIOTS WHICH ARE         */
*/*     NOT ELIGIBLE FOR THIS GENERIC DEVICE TYPE BEING PROCESSED    */
*/*     SO THAT NO ATTEMPTS WILL BE MADE TO ALLOCATE THESE REQUESTS  */
*/*     AT THIS TIME.                                                */
*/*     THE UNALLOCATED REQUESTS WHICH ARE ELIGIBLE TO THIS GENERIC  */
*/*     ARE CATEGORIZED TO DETERMINE WHICH OF THE FOLLOWING          */
*/*     ALLOCATION PROCESSES ARE NECESSARY:                          */
*/*         (1) ALLOCATION OF SPECIFIC VOLUME REQS TO MOUNTED        */
*/*             VOLUMES (NOTE: THE NUMBER OF THESE REQUESTS ARE      */
*/*             ALSO DETERMINED).                                    */
*/*         (2) ALLOCATION OF SCRATCH VOLUME REQS TO MOUNTED VOLUMES */
*/*         (3) ALLOCATION OF ANY REMAINING REQS VIA AN ALGORITHM    */
*/*             IF ANY TAPE OR DA REQUESTS REMAIN AND        @ZA03536*/
*/*             VOLUME MOUNTING IS NOT ALLOWED, THE REQUEST  @ZA03536*/
*/*             IS FAILED.                                   @ZA03536*/
*/*                                                                  */
*/*   OPERATION - THE OPERATION IS DOCUMENTED BY THE CODE ITSELF.    */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT - SIOT1P - PTR TO FIRST SIOT IN THE CHAIN                */
*/*         - ALCWAPTR - PTR TO ALLOCATION WORK AREA (ALCWA)         */
*/*         - LGENLOCK - ID OF GENERIC BEING PROCESSED               */
*/*         - DOTYPES - SET OF SWITCHES                              */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITION - FUNCTION COMPLETED                                 */
*/*                                                                  */
*/*   OUTPUT - SIOTGIGN - SIOT-INELIGIBLE-FOR-GENERIC FLAG           */
*/*            DOTYPES                                               */
*/*              DOSPMNT - SET TO 1 IF THERE ARE ELIGIBLE SPEC VOL RQ*/
*/*              DOSCRMNT - SET TO 1 IF ELIGIBLE SCRATCH VOLUME REQ  */
*/*              DOALG - SET TO 1 IF ALGORITHM NEEDED                */
*/*              SPDOALG - LEFT AS 0                                 */
*/*                                                                  */
*/*   RETURN CODE - (NONE)                                           */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE)                       @ZA03536*/
*/*                                                          @ZA03536*/
*/*   CONDITION - ALGORITHM PROCESSING NEEDED FOR TAPE OR    @ZA03536*/
*/*               DA BUT VOLUME MOUNTING NOT ALLOWED.        @ZA03536*/
*/*                                                          @ZA03536*/
*/*   OUTPUT - SIOTRSNC SET TO 56 (UNABLE TO MOUNT)          @ZA03536*/
*/*                                                          @ZA03536*/
*/*   RETURN CODE - RTNCODE SET TO 4                         @ZA03536*/
*/*                                                                  */
*/********************************************************************/
*SIOTPTR = SIOT1P;                     /*POINT TO FIRST SIOT         */
         L     @10,@PC00001                                     02S0093
         L     @10,ALCWAPTR(,@10)                               02S0093
         L     SIOTPTR,SIOT1P(,@10)                             02S0093
*DO WHILE (SIOTPTR ^= ZERO             /*SCAN ALL SIOTS      @ZA03536*/
*          & RTNCODE = SUCCESS);       /*UNTIL FAILURE       @ZA03536*/
         B     @DE00094                                         02S0094
@DL00094 DS    0H                                               02S0095
*  IF SIOTALCD = NO THEN               /*IS SIOT FULLY ALLOCATED ?   */
         TM    SIOTALCD(SIOTPTR),B'00000010'                    02S0095
         BNZ   @RF00095                                         02S0095
*    DO;                               /*NO SIOT IS NOT ALLOCATED    */
*      SIOTGIGN = ON;                  /*ASSUME GENERIC NOT ELIGIBLE */
         OI    SIOTGIGN(SIOTPTR),B'00001000'                    02S0097
*      EDLPTR = EDLFGENP;              /*POINT TO 1ST GENERIC IN EDL */
         L     @10,SIOTEDLP(,SIOTPTR)                           02S0098
         L     EDLPTR,EDLFGENP(,@10)                            02S0098
*      DO  GENSCTR = ONE TO EDLGENNO   /*SCAN ALL GENERIC ENTRIES... */
*           WHILE (SIOTGIGN = ON       /*UNTIL GENERIC FOUND @ZA03536*/
*                 & RTNCODE = SUCCESS);/*OR UNTIL FAILURE    @ZA03536*/
         LA    GENSCTR,1                                        02S0099
         B     @DE00099                                         02S0099
@DL00099 TM    SIOTGIGN(SIOTPTR),B'00001000'                    02S0099
         BNO   @DC00099                                         02S0099
         LTR   RTNCODE,RTNCODE                                  02S0099
         BNZ   @DC00099                                         02S0099
*        IF EINDEVTP = OFF & EDLDEVT=LGENLOCK THEN /*IS GEN ELIGIBLE?*/
         TM    EINDEVTP(EDLPTR),B'10000000'                     02S0100
         BNZ   @RF00100                                         02S0100
         L     @10,@PC00001                                     02S0100
         L     @10,ALCWAPTR(,@10)                               02S0100
         CLC   EDLDEVT(4,EDLPTR),LGENLOCK(@10)                  02S0100
         BNE   @RF00100                                         02S0100
*          DO;                         /*YES THIS GENERIC IS ELIGIBLE*/
*            SIOTGIGN = OFF;           /*TURN OFF IGNORE INDICATOR   */
         NI    SIOTGIGN(SIOTPTR),B'11110111'                    02S0102
*            IF   SIOTDMND = ON THEN;  /*IGNORE A DEMAND REQ         */
         TM    SIOTDMND(SIOTPTR),B'10000000'                    02S0103
         BO    @RT00103                                         02S0103
*            ELSE                      /*REQ IS NOT A DEMAND REQ     */
*              DO;                                              02S0105
*                VUPTR = SVOLUNAD;     /*POINT TO FIRST VOLUNIT ENTRY*/
         L     VUPTR,SVOLUNAD(,SIOTPTR)                         02S0106
*                DO VUCTR = ONE TO SVOLUNNO /*SCAN ALL VU ENT@ZA03536*/
*                   WHILE (RTNCODE = SUCCESS);/*UNTIL FAILURE@ZA03536*/
         LA    VUCTR,1                                          02S0107
         B     @DE00107                                         02S0107
@DL00107 LTR   RTNCODE,RTNCODE                                  02S0107
         BNZ   @DC00107                                         02S0107
*                  IF VOLALOC=OFF THEN /*IS VOLUNIT ENTRY ALLOCATED? */
         TM    VOLALOC(VUPTR),B'10000000'                       02S0108
         BNZ   @RF00108                                         02S0108
*                   DO;                /*NO,VU ENTRY IS NOT ALLOCATED*/
*                     IF (EDLDEVT(3)=DATYPE  /*IS GENERIC D.A. ?     */
*                        ×   EDLDEVT(3)=TAPETYPE) /*OR TAPE ? AND    */
*                        & ((VOLNSHR=OFF)                       02S0110
*                        ×   (VOLNSHR=ON &VOLTAREQ=ON))         02S0110
*                        & VOLPRV=OFF                           02S0110
*                        & VOLSPEC=OFF                          02S0110
*                        & VOLPUB=ON THEN /*IS THIS A SCRATCH REQ ?  */
         CLI   EDLDEVT+2(EDLPTR),X'20'                          02S0110
         BE    @GL00008                                         02S0110
         CLI   EDLDEVT+2(EDLPTR),X'80'                          02S0110
         BNE   @RF00110                                         02S0110
@GL00008 TM    VOLNSHR(VUPTR),B'00001000'                       02S0110
         BZ    @GL00007                                         02S0110
         TM    VOLNSHR(VUPTR),B'00001000'                       02S0110
         BNO   @RF00110                                         02S0110
         TM    VOLTAREQ(VUPTR),B'10000000'                      02S0110
         BNO   @RF00110                                         02S0110
@GL00007 TM    VOLPUB(VUPTR),B'10000000'                        02S0110
         BNO   @RF00110                                         02S0110
         TM    VOLPRV(VUPTR),B'01100000'                        02S0110
         BNZ   @RF00110                                         02S0110
*                      DO;             /*YES,THIS IS A SCRATCH REQ   */
*                        DOSCRMNT =ON; /*TURN ON SCR/MNT SWITCH      */
         OI    DOSCRMNT,B'00001000'                             02S0112
*                        IF EDLDEVT(3)=TAPETYPE THEN /*TAPE REQ ?    */
         CLI   EDLDEVT+2(EDLPTR),X'80'                          02S0113
         BNE   @RF00113                                         02S0113
*                          DO;         /*YES, MAY ALLOC LIKE SPECIFIC*/
*                            DOSPMNT = ON;                      02S0115
         OI    DOSPMNT,B'01000000'                              02S0115
*                          END;                                 02S0116
*                        ELSE;         /*NOT TAPE REQ                */
@RF00113 DS    0H                                               02S0118
*                      END;                                     02S0118
*                    ELSE              /*NOT A SCRATCH REQ           */
*                      DO;                                      02S0119
         B     @RC00110                                         02S0119
@RF00110 DS    0H                                               02S0120
*                        IF CVRIGNOR=OFF                        02S0120
*                           &CVRDUPLI=OFF THEN/*SHOULD REQ BE PROC'D?*/
         L     @10,VOLALGTP(,VUPTR)                             02S0120
         TM    CVRIGNOR(@10),B'00000010'                        02S0120
         BNZ   @RF00120                                         02S0120
         TM    CVRDUPLI(@10),B'10000000'                        02S0120
         BNZ   @RF00120                                         02S0120
*                          DO;         /*YES...                      */
*                            CVRSKFLG = OFF; /*TURN OFF SKIP SWITCH  */
         NI    CVRSKFLG(@10),B'01111111'                        02S0122
*                          END;                                 02S0123
*                        ELSE;         /*REQ NOT TO BE PROCESSED     */
@RF00120 DS    0H                                               02S0125
*                        IF EDLDEVT(3)=TAPETYPE /*IS GENERIC TAPE ?
*                                                            @YM03490*/
*                           × (EDLDEVT(3)=DATYPE /*OR D.A. AND A     */
*                           & VOLSPEC=ON) THEN /*SPEC VOLUME REQUEST?*/
         CLI   EDLDEVT+2(EDLPTR),X'80'                          02S0125
         BE    @RT00125                                         02S0125
         CLI   EDLDEVT+2(EDLPTR),X'20'                          02S0125
         BNE   @RF00125                                         02S0125
         TM    VOLSPEC(VUPTR),B'00100000'                       02S0125
         BNO   @RF00125                                         02S0125
@RT00125 DS    0H                                               02S0126
*                          DO;         /*YES...                      */
*                            DOSPMNT=YES; /*TURN ON SPEC/MNT SWITCH  */
         OI    DOSPMNT,B'01000000'                              02S0127
*                          END;                                 02S0128
*                        ELSE          /*NOT A SPECIFIC VOL REQUEST  */
*                          DO;                                  02S0129
         B     @RC00125                                         02S0129
@RF00125 DS    0H                                               02S0130
*                          IF CVRSKFLG = OFF THEN /*REG NOT  @ZA03536
*                                        MARK SKIP           @ZA03536*/
         L     @10,VOLALGTP(,VUPTR)                             02S0130
         TM    CVRSKFLG(@10),B'10000000'                        02S0130
         BNZ   @RF00130                                         02S0130
*                            IF (EDLDEVT(3) ^= DATYPE/*NOT DA@ZA03536*/
*                               &EDLDEVT(3) ^= TAPETYPE) /*     02S0131
*                                        NOT TAPE            @ZA03536*/
*                               × VOLMNTSW = ON THEN /*VOL      02S0131
*                                        MOUNTING ALLOWED    @ZA03536*/
         CLI   EDLDEVT+2(EDLPTR),X'20'                          02S0131
         BE    @GL00015                                         02S0131
         CLI   EDLDEVT+2(EDLPTR),X'80'                          02S0131
         BNE   @RT00131                                         02S0131
@GL00015 L     @10,@PC00001                                     02S0131
         L     @10,ALCWAPTR(,@10)                               02S0131
         L     @10,FMAPPTR(,@10)                                02S0131
         TM    VOLMNTSW(@10),B'10000000'                        02S0131
         BNO   @RF00131                                         02S0131
@RT00131 DS    0H                                               02S0132
*                              DOALG = ON;/*ALGORITHM NEEDED @ZA03536*/
         OI    DOALG,B'00010000'                                02S0132
*                            ELSE      /*TAPE OR DA AND         02S0133
*                                        MOUNTING NOT ALLOWED@ZA03536*/
*                              DO;     /*FAIL THE REQUEST    @ZA03536*/
         B     @RC00131                                         02S0133
@RF00131 DS    0H                                               02S0134
*                                RTNCODE = FAILURE;/*FAIL IT @ZA03536*/
         LA    RTNCODE,4                                        02S0134
*                                SIOTRSNC = NOMOUNT;/*CANT MOUNT
*                                                            @ZA03536*/
         MVC   SIOTRSNC(2,SIOTPTR),@CH00103                     02S0135
*                              END;    /*END FAIL THE REQ    @ZA03536*/
*                          END;                                 02S0137
*                      END;                                     02S0138
*                   END;                                        02S0139
*                  ELSE;               /*ENTRY IS ALLOCATED          */
@RF00108 DS    0H                                               02S0141
*                  VUPTR=VUPTR+LENGTH(VOLUNTAB);                02S0141
@RC00108 AH    VUPTR,@CH00979                                   02S0141
*                END;                                           02S0142
         AH    VUCTR,@CH00040                                   02S0142
@DE00107 CH    VUCTR,SVOLUNNO(,SIOTPTR)                         02S0142
         BNH   @DL00107                                         02S0142
@DC00107 DS    0H                                               02S0143
*              END;                                             02S0143
*          END;                                                 02S0144
*        ELSE;                         /*THIS GENERIC NOT ELIGIBLE   */
@RF00100 DS    0H                                               02S0146
*        EDLPTR = EDLNXTNT;            /*POINT TO NEXT GENERIC IN EDL*/
@RC00100 L     EDLPTR,EDLNXTNT(,EDLPTR)                         02S0146
*      END;                                                     02S0147
         AH    GENSCTR,@CH00040                                 02S0147
@DE00099 L     @10,SIOTEDLP(,SIOTPTR)                           02S0147
         C     GENSCTR,EDLGENNO(,@10)                           02S0147
         BNH   @DL00099                                         02S0147
@DC00099 DS    0H                                               02S0148
*    END;                                                       02S0148
*  ELSE;                               /*SIOT IS FULLY ALLOCATED     */
@RF00095 DS    0H                                               02S0150
*  SIOTPTR = SIOTNPTR;                 /*POINT TO NEXT SIOT          */
         L     SIOTPTR,SIOTNPTR(,SIOTPTR)                       02S0150
*END;                                                           02S0151
@DE00094 SLR   @10,@10                                          02S0151
         CR    SIOTPTR,@10                                      02S0151
         BE    @DC00094                                         02S0151
         CR    RTNCODE,@10                                      02S0151
         BE    @DL00094                                         02S0151
@DC00094 DS    0H                                               02S0152
*IF DOSPMNT=ON & RTNCODE=SUCCESS                                01S0152
*  & INDRETRY = OFF THEN               /*ARE THERE ANY SPEC VOL REQS */
         TM    DOSPMNT,B'01000000'                              01S0152
         BNO   @RF00152                                         01S0152
         LTR   RTNCODE,RTNCODE                                  01S0152
         BNZ   @RF00152                                         01S0152
         L     @10,@PC00001                                     01S0152
         L     @10,ALCWAPTR(,@10)                               01S0152
         TM    INDRETRY(@10),B'01000000'                        01S0152
         BNZ   @RF00152                                         01S0152
*  DO;                                 /*YES, PROCESS                */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - ASPCMONT                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - ALLOCATE SPECIFIC VOLUME REQS TO MOUNTED VOLS */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE CALLS MODULE IEFAB433 TO ALLOCATE ANY           */
*/*     UNALLOCATED SPECIFIC VOLUME REQUESTS ELIGIBLE TO THIS        */
*/*     GENERIC. IEFAB433 ONLY ALLOCATES THESE REQUESTS IF THE       */
*/*     NEEDED VOLUMES ARE ALREADY MOUNTED ON ELIGIBLE UNITS IN THIS */
*/*     GENERIC.                                                     */
*/*     UPON RETURN FROM IEFAB433, THIS MODULE DETERMINES WHETHER    */
*/*     ALL THE REQUESTS WERE SATISFIED, THE COVER ALGORITHM MUST    */
*/*     BE USED, OR THE ALLOCATION MUST BE FAILED.(SEE 'EXIT'S)      */
*/*                                                                  */
*/*   OPERATION - THE OPERATION IS DOCUMENTED BY THE CODE ITSELF.    */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT - WHOLEGEN - VOLUME SWITCHING OK INDICATOR               */
*/*           ALCWAPTR - PTR TO ALLOCATION WORK AREA (ALCWA)         */
*/*             TOTVOLUN - NUMBER OF UNALLOCATED VOLUNIT ENTRIES     */
*/*             VOLMNTSW - VOLUME MOUNTING PERMISSION SWITCH         */
*/*             SIOT1P - PTR TO FIRST SIOT                           */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITION - AS MANY SPECIFIC VOLUME REQS AS POSSIBLE HAVE      */
*/*               BEEN ALLOCATED TO VOLUMES MOUNTED ON UCBS IN THIS  */
*/*               GENERIC.                                           */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*       GENERAL - DATA SETS CREATED, REQUESTS ALLOCATED, DSAB AND  */
*/*                 TIOT ENTRIES CREATED, UCBS/SIOTS/JFCBS UPDATED,  */
*/*                 COUNTS OF REQS STILL TO ALLOCATE ARE DECREASED.  */
*/*                                                                  */
*/*       SPECIFIC - 'SPDOALG' SWITCH IS SET TO 1 IF ALL THE SPECIFIC*/
*/*                  VOLUME REQS ELIGIBLE TO THIS GENERIC WERE NOT   */
*/*                  ALLOCATED TO MOUNTED VOLUMES (AND VOLUME        */
*/*                  MOUNTING IS ALLOWED).                           */
*/*                                                                  */
*/*   RETURN CODES - FIELD 'RTNCODE' SET TO 0.                       */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE)                               */
*/*                                                                  */
*/*   CONDITIONS - MODULE IEFAB433 DETECTED AN ERROR                 */
*/*                                                                  */
*/*   OUTPUT - MODULE IEFAB433 WILL HAVE SET A REASON CODE TO        */
*/*            INDICATE THE TYPE OF ERROR DETECTED.                  */
*/*                                                                  */
*/*   RETURN CODES - FIELD 'RTNCODE' SET TO 4.                       */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE)                               */
*/*                                                                  */
*/*   CONDITIONS - ALL SPECIFIC VOLUME REQS WHICH ARE ELIGIBLE TO    */
*/*                THIS GENERIC HAVE NOT BEEN ALLOCATED TO THE       */
*/*                VOLUMES ALREADY AND VOLUME MOUNTING IS NOT        */
*/*                ALLOWED.                                          */
*/*                                                                  */
*/*   OUTPUT - FOR EACH SUCH UNALLOCATED SPECIFIC VOLUME REQ, FIELD  */
*/*            'SIOTRSNC' IN THE SIOT IS SET TO 56 TO SIGNIFY THE    */
*/*            REASON FOR THE ERROR                                  */
*/*                                                                  */
*/*   RETURN CODES - FIELD 'RTNCODE' SET TO 4.                       */
*/*                                                                  */
*/********************************************************************/
*FUNCLIST = INITFUNC;                  /*COPY FUNC MAP INTO GETMAIN  */
         MVC   FUNCLIST(8),INITFUNC                             02S0154
*IF WHOLEGEN = YES THEN                /*IS WHOLE GEN LOCKED ?       */
         L     @10,@PC00001+8                                   02S0155
         TM    WHOLEGEN(@10),B'01000000'                        02S0155
         BNO   @RF00155                                         02S0155
*  DO;                                 /*YES,INDICATE IN FUNCTION MAP*/
*    VOLSWOK = YES;                    /*VOLUME SWITCHING OK         */
         OI    VOLSWOK,B'00000010'                              02S0157
*  END;                                                         02S0158
*ELSE;                                 /*VOL SWITCHING CANT BE DONE  */
@RF00155 DS    0H                                               02S0160
*CALL IEFAB433 (ALCWAPTR,ADDR(FUNCLIST));/*ALLOC SP VOL REQ TO MNTEDS*/
         L     @10,@PC00001                                     02S0160
         ST    @10,@AL00001                                     02S0160
         LA    @10,FUNCLIST                                     02S0160
         ST    @10,@TF00001                                     02S0160
         LA    @10,@TF00001                                     02S0160
         ST    @10,@AL00001+4                                   02S0160
         L     @15,@CV00116                                     02S0160
         LA    @01,@AL00001                                     02S0160
         BALR  @14,@15                                          02S0160
*RTNCODE = REG15;                      /*SAVE THE RETURN CODE        */
         LR    RTNCODE,REG15                                    02S0161
*IF RTNCODE = SUCCESS                                           02S0162
*  & (DOALG = OFF × VOLMNTSW = OFF) THEN /*SUCCESS                   */
         LTR   RTNCODE,RTNCODE                                  02S0162
         BNZ   @RF00162                                         02S0162
         TM    DOALG,B'00010000'                                02S0162
         BZ    @RT00162                                         02S0162
         L     @10,@PC00001                                     02S0162
         L     @10,ALCWAPTR(,@10)                               02S0162
         L     @10,FMAPPTR(,@10)                                02S0162
         TM    VOLMNTSW(@10),B'10000000'                        02S0162
         BNZ   @RF00162                                         02S0162
@RT00162 DS    0H                                               02S0163
*      DO;                                                      02S0163
*        SIOTPTR = SIOT1P;             /*POINT TO FIRST SIOT         */
         L     @10,@PC00001                                     02S0164
         L     @10,ALCWAPTR(,@10)                               02S0164
         L     SIOTPTR,SIOT1P(,@10)                             02S0164
*        DO WHILE SIOTPTR ^= ZERO;     /*SCAN ALL SIOTS              */
         B     @DE00165                                         02S0165
@DL00165 DS    0H                                               02S0166
*          IF SIOTGIGN=OFF & SIOTALCD=NO THEN /*ELIGIBLE,UNALLOC REQ?*/
         TM    SIOTGIGN(SIOTPTR),B'00001000'                    02S0166
         BNZ   @RF00166                                         02S0166
         TM    SIOTALCD(SIOTPTR),B'00000010'                    02S0166
         BNZ   @RF00166                                         02S0166
*            DO;                       /*YES, PROCESS                */
*              VUPTR = SVOLUNAD;       /*POINT TO SIOTS FIRST VOLUNIT*/
         L     VUPTR,SVOLUNAD(,SIOTPTR)                         02S0168
*              DO VUCTR=ONE TO SVOLUNNO /*SCAN SIOTS VOLUNIT ENTRIES */
*                WHILE SIOTRSNC^=NOMOUNT; /*..UNTIL ERROR IS DETECTED*/
         LA    VUCTR,1                                          02S0169
         B     @DE00169                                         02S0169
@DL00169 LA    @10,56                                           02S0169
         CH    @10,SIOTRSNC(,SIOTPTR)                           02S0169
         BE    @DC00169                                         02S0169
*                IF VOLALOC=OFF &                               02S0170
*                   VDEVREQD = ON &                             02S0170
*                   CVRSKFLG=OFF THEN  /*UNALLOC,SPEC REQ?           */
         TM    VDEVREQD(VUPTR),B'00100000'                      02S0170
         BNO   @RF00170                                         02S0170
         TM    VOLALOC(VUPTR),B'10000000'                       02S0170
         BNZ   @RF00170                                         02S0170
         L     @07,VOLALGTP(,VUPTR)                             02S0170
         TM    CVRSKFLG(@07),B'10000000'                        02S0170
         BNZ   @RF00170                                         02S0170
*                  DO;                 /*YES,                        */
*                    IF VOLMNTSW = OFF THEN /*VOLUME MOUNT SW IS OFF */
         L     @07,@PC00001                                     02S0172
         L     @07,ALCWAPTR(,@07)                               02S0172
         L     @07,FMAPPTR(,@07)                                02S0172
         TM    VOLMNTSW(@07),B'10000000'                        02S0172
         BNZ   @RF00172                                         02S0172
*                      DO;                                      02S0173
*                        SIOTRSNC = NOMOUNT;                    02S0174
         STH   @10,SIOTRSNC(,SIOTPTR)                           02S0174
*                        RTNCODE = FAILURE;                     02S0175
         LA    RTNCODE,4                                        02S0175
*                      END;                                     02S0176
*                    ELSE              /*NULL                        */
*                      SPDOALG = ON;                            02S0177
         B     @RC00172                                         02S0177
@RF00172 OI    SPDOALG,B'00100000'                              02S0177
*                  END;                                         02S0178
*                ELSE;                 /*NOT UNALLOC,SPECIFIC VOL REQ*/
@RF00170 DS    0H                                               02S0180
*                  VUPTR=VUPTR + LENGTH(VOLUNTAB); /*POINT TO NEXT VU*/
@RC00170 AH    VUPTR,@CH00979                                   02S0180
*              END;                                             02S0181
         AH    VUCTR,@CH00040                                   02S0181
@DE00169 CH    VUCTR,SVOLUNNO(,SIOTPTR)                         02S0181
         BNH   @DL00169                                         02S0181
@DC00169 DS    0H                                               02S0182
*            END;                                               02S0182
*          ELSE;                       /*INELIGIBLE AND/OR ALLOCATED */
@RF00166 DS    0H                                               02S0184
*          SIOTPTR = SIOTNPTR;         /*POINT TO NEXT SIOT          */
         L     SIOTPTR,SIOTNPTR(,SIOTPTR)                       02S0184
*        END;                                                   02S0185
@DE00165 LTR   SIOTPTR,SIOTPTR                                  02S0185
         BNZ   @DL00165                                         02S0185
*     END;                                                      02S0186
*ELSE;                                 /*NULL                        */
@RF00162 DS    0H                                               02S0188
*  END;                                                         01S0188
*ELSE;                                 /*NO SPEC VOL REQS OR ERROR   */
@RF00152 DS    0H                                               01S0190
*IF (DOALG=YES × SPDOALG = YES ×                                01S0190
*    PARTALG = YES) & RTNCODE = SUCCESS &                       01S0190
*     INDRETRY=OFF THEN                /*ANY REQ FOR ALG TO COVER    */
         TM    DOALG,B'00110000'                                01S0190
         BNZ   @GL00025                                         01S0190
         L     @10,@PC00001+8                                   01S0190
         TM    PARTALG(@10),B'00010000'                         01S0190
         BNO   @RF00190                                         01S0190
@GL00025 LTR   RTNCODE,RTNCODE                                  01S0190
         BNZ   @RF00190                                         01S0190
         L     @10,@PC00001                                     01S0190
         L     @07,ALCWAPTR(,@10)                               01S0190
         TM    INDRETRY(@07),B'01000000'                        01S0190
         BNZ   @RF00190                                         01S0190
*  DO;                                 /*YES, PROCESS                */
*    CALL IEFAB476(ALCWAPTR,FLAGBITS); /*ALLOC VIA ALGORITHM         */
         ST    @10,@AL00001                                     01S0192
         L     @10,@PC00001+8                                   01S0192
         ST    @10,@AL00001+4                                   01S0192
         L     @15,@CV00118                                     01S0192
         LA    @01,@AL00001                                     01S0192
         BALR  @14,@15                                          01S0192
*    RTNCODE = REG15;                  /*SAVE RETURN CODE            */
         LR    RTNCODE,REG15                                    01S0193
*  END;                                                         01S0194
*ELSE;                                 /*NO REQS FOR ALG             */
@RF00190 DS    0H                                               01S0196
*IF DOSCRMNT=ON & RTNCODE=SUCCESS                               01S0196
*  & INDRETRY=OFF THEN                 /*ARE THERE ANY NONSPC VOL REQ*/
         TM    DOSCRMNT,B'00001000'                             01S0196
         BNO   @RF00196                                         01S0196
         LTR   RTNCODE,RTNCODE                                  01S0196
         BNZ   @RF00196                                         01S0196
         L     @10,@PC00001                                     01S0196
         L     @10,ALCWAPTR(,@10)                               01S0196
         TM    INDRETRY(@10),B'01000000'                        01S0196
         BNZ   @RF00196                                         01S0196
*  DO;                                 /*YES, PROCESS                */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - ASCRMONT                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - ALLOCATE SCRATCH VOLUME REQS TO MOUNTED VOLS  */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE BUILDS A LIST OF ALL THE UCBS (IN THE DEVICE    */
*/*     GROUPS JUST LOCKED FOR THIS GENERIC) WHICH HAVE              */
*/*     NON-PRIVATE VOLUMES MOUNTED ON THEM WHICH MAY BE             */
*/*     USED FOR ALLOCATING SCRATCH VOLUME REQUESTS.                 */
*/*     NEXT THIS ROUTINE CALLS MODULE IEFAB436 TO ALLOCATE ANY      */
*/*     SCRATCH VOLUME REQUESTS WHICH CAN BE SATISFIED BY THE        */
*/*     VOLUMES MOUNTED ON THE UCBS IN THE LIST.                     */
*/*                                                                  */
*/*   OPERATION - THE OPERATION IS DOCUMENTED BY THE CODE ITSELF.    */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT - UMAXCTR - NUMBER OF UCBS LOCKED FOR THIS GENERIC       */
*/*         - ALCWAPTR - PTR TO THE ALLOCATION WORK AREA (ALCWA)     */
*/*           - WMASKPTR - PTR TO MASK OF GROUPS JUST LOCKED         */
*/*           - EDTABPTR - PTR TO THE ELIGIBLE DEVICES TABLE (EDT)   */
*/*           - IOSLUTP - PTR TO THE IOS UCB LOOKUP TABLE            */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITION - AS MANY SCRATCH REQS AS POSSIBLE ALLOCATED TO      */
*/*               VOLUMES MOUNTED ON UCBS IN THIS GENERIC.           */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*       GENERAL - DATA SETS CREATED, REQUESTS ALLOCATED, DSAB AND  */
*/*                 TIOT ENTRIES CREATED, UCBS/SIOTS/JFCBS UPDATED,  */
*/*                 COUNTS OF REQS STILL TO ALLOCATE ARE DECREASED.  */
*/*                                                                  */
*/*   RETURN CODES - FIELD 'RTNCODE' SET TO 0.                       */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE)                               */
*/*                                                                  */
*/*   CONDITION - GETMAIN ERROR GETTING SPACE FOR UCB LIST.          */
*/*                                                                  */
*/*   OUTPUT - REASON CODE AREA (REASONCD) SET TO 2                  */
*/*                                                                  */
*/*   RETURN CODES - FIELD 'RTNCODE' SET TO 4.                       */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE)                               */
*/*                                                                  */
*/*   CONDITION - MODULE IEFAB436 DETECTED AN ERROR                  */
*/*                                                                  */
*/*   OUTPUT - MODULE IEFAB436 WILL HAVE SET A REASON CODE TO        */
*/*            INDICATE THE TYPE OF ERROR DETECTED.                  */
*/*                                                                  */
*/*   RETURN CODES - FIELD 'RTNCODE' SET TO 4.                       */
*/*                                                                  */
*/********************************************************************/
*UCBSLGN = (UMAXCTR * TWO) + TWO;      /*DETERMINE MAX LIST SIZE     */
         L     @15,@PC00001+4                                   02S0198
         L     UCBSLGN,UMAXCTR(,@15)                            02S0198
         ALR   UCBSLGN,UCBSLGN                                  02S0198
         AH    UCBSLGN,@CH00145                                 02S0198
* /* ?GETSTORG (SPID,UCBSLGN,UCBLISTP);*/                       02S0199
*   /* DEFINITIONS OF GETMAIN PARMS */                          02S0199
*   DCL                                                         02S0199
*     GTSTR0   FIXED(31) REG(0),/*GTMN PARM REG*/               02S0199
*     GTSTR1   FIXED(31) REG(1),/*GTMN PARM REG*/               02S0199
*     GTSTR2   PTR(31)   REG(2),/*GTMN PARM REG*/               02S0199
*     GTSTR15  FIXED(31) REG(15),/*GTMN RET COD*/               02S0199
*     GTSTRTCD FIXED(31); /* GETMAIN RTN CODE  */               02S0199
*   DCL                                                         02S0200
*     GTSTR3   FIXED(31) REG(3),/* CLEARING REG*/               02S0200
*     GTSTR4   FIXED(31) REG(4),/* CLEARING REG*/               02S0200
*     GTSTR5   FIXED(31) REG(5),/* CLEARING REG*/               02S0200
*     GTSTR6   FIXED(31) REG(6),/* CLEARING REG*/               02S0200
*     GTSTR7   FIXED(31) REG(7),/* CLEARING REG*/               02S0200
*     GTSTR8   FIXED(31) REG(8),/* CLEARING REG*/               02S0200
*     GTSTZERO FIXED(31) INIT(0),                               02S0200
*     GTST253  FIXED(31) CONSTANT(253);                         02S0200
*   RFY (GTSTR0,GTSTR1,GTSTR2) RSTD; /*SAVE RGS*/               02S0201
*   GTSTR0 = UCBSLGN; /* SET AMOUNT*/                           02S0202
         LR    GTSTR0,UCBSLGN                                   02S0202
*   GTSTR2 = SPID; /* SET SUBPOOL*/                             02S0203
         LA    GTSTR2,230                                       02S0203
*   GENERATE CODE;                                              02S0204
     GETMAIN RC,LV=(0),SP=(2)  DO GETMAIN
*   GTSTRTCD = GTSTR15; /* SAVE GETMAIN RET COD*/               02S0205
         LR    GTSTRTCD,GTSTR15                                 02S0205
*   UCBLISTP = GTSTR1; /* ADDR OF GOTN STORG*/                  02S0206
         ST    GTSTR1,UCBLISTP                                  02S0206
*   RFY (GTSTR0,GTSTR1,GTSTR2) UNRSTD; /*RLSE */                02S0207
*   IF GTSTRTCD = 0 THEN /*GETMAIN SUCCESSFUL? */               02S0208
         LTR   GTSTRTCD,GTSTRTCD                                02S0208
         BNZ   @RF00208                                         02S0208
*     DO;               /* YES, CLEAR STORAGE.*/                02S0209
*       RFY (GTSTR2,GTSTR4,GTSTR5,GTSTR6,                       02S0210
*                          GTSTR7,GTSTR8) RSTD;                 02S0210
*       GTSTR4 = UCBLISTP; /*STORG PTR*/                        02S0211
         L     @03,UCBLISTP                                     02S0211
         LR    GTSTR4,@03                                       02S0211
*       GTSTR5 = UCBSLGN; /*STORG AMNT*/                        02S0212
         LR    GTSTR5,UCBSLGN                                   02S0212
*       GTSTR7 = '00000000'X; /*PAD CHAR & LNTH*/               02S0213
         SLR   GTSTR7,GTSTR7                                    02S0213
*       IF SPID = GTST253 THEN                                  02S0214
         B     @RF00214                                         02S0214
*      GEN                                                      02S0215
*   (MODESET KEYADDR=GTSTZERO,SAVEKEY=(2),WORKREG=8);           02S0215
         MODESET KEYADDR=GTSTZERO,SAVEKEY=(2),WORKREG=8
*       GEN REFS(GTSTR4,GTSTR6);                                02S0216
@RF00214 DS    0H                                               02S0216
          MVCL  GTSTR4,GTSTR6 CLEAR GOTTEN STORG
*       IF SPID = GTST253 THEN                                  02S0217
         B     @RF00217                                         02S0217
*         GEN (MODESET KEYADDR=(2));                            02S0218
         MODESET KEYADDR=(2)
*       RFY (GTSTR2,GTSTR4,GTSTR5,GTSTR6,                       02S0219
*                          GTSTR7,GTSTR8) UNRSTD;               02S0219
@RF00217 DS    0H                                               02S0220
*     END;       /* STORAGE CLEARING COMPLETED */               02S0220
*   ELSE                                                        02S0221
*   UCBLISTP= 0;   /* CLEAR RETURN ADDR. */                     02S0221
         B     @RC00208                                         02S0221
@RF00208 SLR   @08,@08                                          02S0221
         ST    @08,UCBLISTP                                     02S0221
*   GTSTR15 = GTSTRTCD;    /* GTMN RETURN CODE */               02S0222
@RC00208 LR    GTSTR15,GTSTRTCD                                 02S0222
*                                      /* RESTORE LIST PRINT STATUS  */
*    /*GET CORE FOR UCB LIST       */                           02S0223
*RTNCODE = REG15;                      /*SAVE THE RETURN CODE        */
         LR    RTNCODE,REG15                                    02S0223
*IF RTNCODE = SUCCESS THEN             /*WAS GETMAIN SUCCESSFUL ?    */
         LTR   RTNCODE,RTNCODE                                  02S0224
         BNZ   @RF00224                                         02S0224
*  DO;                                 /*YES, CONTINUE PROCESSING    */
*    MASKPTR = WMASKPTR;               /*COPY PTR TO MASK JUST LOCKED*/
         L     @10,@PC00001                                     02S0226
         L     @10,ALCWAPTR(,@10)                               02S0226
         MVC   MASKPTR(4),WMASKPTR(@10)                         02S0226
*    RFY EDTHDR BASED(EDTABPTR);       /*BASE EDT ON ALCWA PTR       */
*    RFY GRPENTRY BASED(GROUPPTR);                              02S0228
*    SLOTNO = ONE;                     /*INIT UCB LIST SLOT COUNTER  */
         LA    @10,1                                            02S0229
         LR    SLOTNO,@10                                       02S0229
*    DO GROUPNO = ONE TO EIGHT*GMTENTLN; /*SCAN ALL GROUPS IN MASK   */
         B     @DE00230                                         02S0230
@DL00230 DS    0H                                               02S0231
*      CALL TESTBIT;                   /*SEE IF GROUP WAS JUST LOCKED*/
         BAL   @14,TESTBIT                                      02S0231
*      IF BITRTN = ON THEN             /*WAS GROUP JUST LOCKED ?     */
         TM    BITRTN,B'10000000'                               02S0232
         BNO   @RF00232                                         02S0232
*        DO;                           /*YES,LOOK AT UCBS IN GROUP   */
*          GROUPPTR=EDTGRPSP+LENGTH(GRPHDR) /*LOCATE GROUP ENTRY IN..*/
*             +LENGTH(GRPENTRY)*(GROUPNO-ONE); /*..THE EDT           */
         L     @10,@PC00001                                     02S0234
         L     @10,ALCWAPTR(,@10)                               02S0234
         L     @10,EDTABPTR(,@10)                               02S0234
         LA    GROUPPTR,8                                       02S0234
         AL    GROUPPTR,EDTGRPSP(,@10)                          02S0234
         L     @10,GROUPNO                                      02S0234
         BCTR  @10,0                                            02S0234
         MH    @10,@CH00980                                     02S0234
         ALR   GROUPPTR,@10                                     02S0234
*          DO UCBNO = ONE TO GRPUCBNO; /*SCAN ALL UCBS IN THE GROUP  */
         LA    UCBNO,1                                          02S0235
         B     @DE00235                                         02S0235
@DL00235 DS    0H                                               02S0236
*            UCBPTR=IOSLUT(EUCBTPOS(UCBNO)+1); /*ADDRESS UCB         */
         LR    @10,UCBNO                                        02S0236
         ALR   @10,@10                                          02S0236
         L     @05,GRPUCBP(,GROUPPTR)                           02S0236
         BCTR  @05,0                                            02S0236
         BCTR  @05,0                                            02S0236
         LH    @10,EUCBTPOS(@10,@05)                            02S0236
         ALR   @10,@10                                          02S0236
         L     @05,@PC00001                                     02S0236
         L     @05,ALCWAPTR(,@05)                               02S0236
         L     @05,IOSLUTP(,@05)                                02S0236
         ALR   @05,@10                                          02S0236
         SLR   UCBPTR,UCBPTR                                    02S0236
         ICM   UCBPTR,3,IOSLUT(@05)                             02S0236
*            IF UCBONLI = ON           /*IS UCB ONLINE,              */
*               & UCBCHGS = OFF        /*NOT PENDING OFFLINE,        */
*               & UCBNALOC = OFF       /*USEABLE BY ALLOCATIONS,     */
*               & UCBUNLD = OFF        /*NOT PENDING UNLOAD,         */
*               & ((UCBNOTRD = OFF &   /* READY AND          @YA00818*/
*                   UCBMOUNT = OFF) ×  /*NO MNT PENDING OR   @YA00818*/
*                  (UCB3TAPE = ON &    /*TAPE AND            @YA00818*/
*                   UCBRESV = ON))     /*RESERVED            @YA00818*/
*               & UCBBPRV = OFF        /*NOT PRIVATE,                */
*               & (UCB3TAPE = OFF ×    /*NOT TAPE            @YA00834*/
*                  (UCB3TAPE = ON &    /*OR TAPE BUT         @YA00834*/
*                   UCBMONT = OFF))    /*NO PASSED DATA SET  @YA00834*/
*               & (UCBBPUB=ON ×                                 02S0237
*               (UCB3DACC=ON &  UCBBSTR=ON)) /*HAS USE ATTR          */
*               & ((UCB3TAPE=ON & UCBALOC=OFF) /*NOT ALLOC'D IF TAPE,*/
*               × (UCB3DACC=ON & UCBBSVL=OFF)) THEN /*AND NOT NONSHR?*/
         TM    UCBONLI(UCBPTR),B'10000000'                      02S0237
         BNO   @RF00237                                         02S0237
         TM    UCBCHGS(UCBPTR),B'01000000'                      02S0237
         BNZ   @RF00237                                         02S0237
         TM    UCBNALOC(UCBPTR),B'00000100'                     02S0237
         BNZ   @RF00237                                         02S0237
         TM    UCBUNLD(UCBPTR),B'00010000'                      02S0237
         BNZ   @RF00237                                         02S0237
         TM    UCBNOTRD(UCBPTR),B'01000000'                     02S0237
         BNZ   @GL00036                                         02S0237
         TM    UCBMOUNT(UCBPTR),B'10000000'                     02S0237
         BZ    @GL00032                                         02S0237
@GL00036 TM    UCB3TAPE(UCBPTR),B'10000000'                     02S0237
         BNO   @RF00237                                         02S0237
         TM    UCBRESV(UCBPTR),B'00100000'                      02S0237
         BNO   @RF00237                                         02S0237
@GL00032 TM    UCBBPRV(UCBPTR),B'00010000'                      02S0237
         BNZ   @RF00237                                         02S0237
         TM    UCB3TAPE(UCBPTR),B'10000000'                     02S0237
         BZ    @GL00030                                         02S0237
         TM    UCB3TAPE(UCBPTR),B'10000000'                     02S0237
         BNO   @RF00237                                         02S0237
         TM    UCBMONT(UCBPTR),B'00000001'                      02S0237
         BNZ   @RF00237                                         02S0237
@GL00030 TM    UCBBPUB(UCBPTR),B'00001000'                      02S0237
         BO    @GL00029                                         02S0237
         TM    UCB3DACC(UCBPTR),B'00100000'                     02S0237
         BNO   @RF00237                                         02S0237
         TM    UCBBSTR(UCBPTR),B'00000100'                      02S0237
         BNO   @RF00237                                         02S0237
@GL00029 TM    UCB3TAPE(UCBPTR),B'10000000'                     02S0237
         BNO   @GL00043                                         02S0237
         TM    UCBALOC(UCBPTR),B'00001000'                      02S0237
         BZ    @RT00237                                         02S0237
@GL00043 TM    UCB3DACC(UCBPTR),B'00100000'                     02S0237
         BNO   @RF00237                                         02S0237
         TM    UCBBSVL(UCBPTR),B'10000000'                      02S0237
         BNZ   @RF00237                                         02S0237
@RT00237 DS    0H                                               02S0238
*              DO;                                              02S0238
*                USEUCB = ON;          /*ASSUME UCB IS OK TO USE     */
         OI    USEUCB,B'10000000'                               02S0239
*                IF WAITIGEN = ON THEN /*ARE ANY UCBS BEING WAITED ON*/
         L     @10,@PC00001                                     02S0240
         L     @10,ALCWAPTR(,@10)                               02S0240
         TM    WAITIGEN(@10),B'01000000'                        02S0240
         BNO   @RF00240                                         02S0240
*                  DO;                 /*YES, SEE IF THIS UCB        */
*                    VUPTR = VOLUNPTR; /*POINT TO FIRST VU TABLE     */
         L     VUPTR,VOLUNPTR(,@10)                             02S0242
*                    DO VUCTR=ONE TO VOLUNSZE/LENGTH(VOLUNTAB)  02S0243
*                        WHILE USEUCB=ON; /*SCAN WHOLE VOLUNIT TABLE */
         LA    VUCTR,1                                          02S0243
         B     @DE00243                                         02S0243
@DL00243 TM    USEUCB,B'10000000'                               02S0243
         BNO   @DC00243                                         02S0243
*                      IF VOLALGTP ^= ZERO &                    02S0244
*                         VOLALGTP->CVRWUCBP=UCBPTR THEN /*SAME UCB ?*/
         L     @10,VOLALGTP(,VUPTR)                             02S0244
         LTR   @10,@10                                          02S0244
         BZ    @RF00244                                         02S0244
         SLR   @15,@15                                          02S0244
         ICM   @15,3,CVRWUCBP(@10)                              02S0244
         CR    UCBPTR,@15                                       02S0244
         BNE   @RF00244                                         02S0244
*                          USEUCB = OFF; /*YES,DONT PUT IN UCB LIST  */
         NI    USEUCB,B'01111111'                               02S0245
*                      ELSE;           /*NOT THE SAME UCB            */
@RF00244 DS    0H                                               02S0247
*                      VUPTR=VUPTR+LENGTH(VOLUNTAB); /*PTR TO NEXT VU*/
         AH    VUPTR,@CH00979                                   02S0247
*                    END;                                       02S0248
         AH    VUCTR,@CH00040                                   02S0248
@DE00243 L     @10,@PC00001                                     02S0248
         L     @10,ALCWAPTR(,@10)                               02S0248
         L     @00,VOLUNSZE(,@10)                               02S0248
         SRDA  @00,32                                           02S0248
         D     @00,@CF00979                                     02S0248
         CR    VUCTR,@01                                        02S0248
         BNH   @DL00243                                         02S0248
@DC00243 DS    0H                                               02S0249
*                  END;                                         02S0249
*                ELSE;                 /*NO UCBS BEING WAITED ON     */
@RF00240 DS    0H                                               02S0251
*                IF USEUCB = ON THEN   /*IS THE UCB BEING WAITED ON? */
         TM    USEUCB,B'10000000'                               02S0251
         BNO   @RF00251                                         02S0251
*                  DO;                 /*NO,PUT IN THE UCB LIST      */
*                    PSUCBP(SLOTNO)=UCBPTR;/*PUT UCB IN LIST         */
         LR    @10,SLOTNO                                       02S0253
         ALR   @10,@10                                          02S0253
         L     @05,UCBLISTP                                     02S0253
         BCTR  @05,0                                            02S0253
         BCTR  @05,0                                            02S0253
         STH   UCBPTR,PSUCBP(@10,@05)                           02S0253
*                    SLOTNO=SLOTNO+ONE;/*POINT TO NEXT SLOT IN LIST  */
         AH    SLOTNO,@CH00040                                  02S0254
*                  END;                                         02S0255
*                ELSE;                 /*UCB TO BE WAITED FOR        */
@RF00251 DS    0H                                               02S0257
*              END;                                             02S0257
*            ELSE;                     /*UCB NOT ELIBIBLE FOR ALLOC  */
@RF00237 DS    0H                                               02S0259
*          END;                                                 02S0259
         AH    UCBNO,@CH00040                                   02S0259
@DE00235 C     UCBNO,GRPUCBNO(,GROUPPTR)                        02S0259
         BNH   @DL00235                                         02S0259
*        END;                                                   02S0260
*      ELSE;                           /*DEVICE GROUP IS NOT LOCKED  */
@RF00232 DS    0H                                               02S0262
*    END;                                                       02S0262
         LA    @10,1                                            02S0262
         AL    @10,GROUPNO                                      02S0262
@DE00230 ST    @10,GROUPNO                                      02S0262
         L     @08,@PC00001                                     02S0262
         L     @08,ALCWAPTR(,@08)                               02S0262
         L     @08,EDTABPTR(,@08)                               02S0262
         L     @08,EDTMSKTP(,@08)                               02S0262
         L     @08,GMTENTLN(,@08)                               02S0262
         SLA   @08,3                                            02S0262
         CR    @10,@08                                          02S0262
         BNH   @DL00230                                         02S0262
*    IF SLOTNO > ONE THEN              /*ANY UCBS IN LIST ?          */
         CH    SLOTNO,@CH00040                                  02S0263
         BNH   @RF00263                                         02S0263
*      DO;                             /*YES, ALLOC PUB REQS         */
*        PSUCBP(SLOTNO) = ZERO;        /*INDICATE END OF UCB LIST    */
         LR    @10,SLOTNO                                       02S0265
         ALR   @10,@10                                          02S0265
         L     @08,UCBLISTP                                     02S0265
         ALR   @08,@10                                          02S0265
         BCTR  @08,0                                            02S0265
         BCTR  @08,0                                            02S0265
         SLR   @07,@07                                          02S0265
         STH   @07,PSUCBP(,@08)                                 02S0265
*        FUNCLIST = INITFUNC;          /*COPY FUNC MAP INTO GETMAIN  */
         MVC   FUNCLIST(8),INITFUNC                             02S0266
*        UCBLSIZE = SLOTNO*TWO;        /*INDICATE EXACT UCB LIST SIZE*/
         ST    @10,UCBLSIZE                                     02S0267
*        CALL IEFAB436(ALCWAPTR,UCBLISTP,ADDR(FUNCLIST));/*ALLOC PUB
*                                        REQS                        */
         L     @10,@PC00001                                     02S0268
         ST    @10,@AL00001                                     02S0268
         LA    @10,UCBLISTP                                     02S0268
         ST    @10,@AL00001+4                                   02S0268
         LA    @10,FUNCLIST                                     02S0268
         ST    @10,@TF00001                                     02S0268
         LA    @10,@TF00001                                     02S0268
         ST    @10,@AL00001+8                                   02S0268
         L     @15,@CV00117                                     02S0268
         LA    @01,@AL00001                                     02S0268
         BALR  @14,@15                                          02S0268
*        RTNCODE = REG15;              /*SAVE THE RETURN CODE        */
         LR    RTNCODE,REG15                                    02S0269
*      END;                                                     02S0270
*    ELSE;                             /*NULL                        */
@RF00263 DS    0H                                               02S0272
*    RFY (REG0,REG1) RSTD;                                      02S0272
*    REG0 = UCBSLGN;                   /*LENGTH OF UCB LIST GETMAIN  */
         LR    REG0,UCBSLGN                                     02S0273
*    REG0 = REG0 × SUBPL230;           /*FREE FROM SUBPOOL 230       */
         O     REG0,@CF00149                                    02S0274
*    REG1 = UCBLISTP;                  /*POINT TO UCB LIST GETMAIN   */
         L     REG1,UCBLISTP                                    02S0275
*    GEN(FREEMAIN R,LV=(0),A=(1));     /*FREE UCB LIST CORE          */
         FREEMAIN R,LV=(0),A=(1)
*    RFY (REG0,REG1) UNRSTD;                                    02S0277
*  END;                                                         02S0278
*ELSE                                  /*GETMAIN ERROR               */
*  DO;                                                          02S0279
         B     @RC00224                                         02S0279
@RF00224 DS    0H                                               02S0280
*    REASONCD = GETMNERR;              /*SET GETMAIN ERR REASON CODE */
         L     @10,@PC00001                                     02S0280
         L     @10,ALCWAPTR(,@10)                               02S0280
         L     @10,FAILRSCP(,@10)                               02S0280
         MVC   REASONCD(2,@10),@CH00145                         02S0280
*  END;                                                         02S0281
*  END;                                                         01S0282
*ELSE;                                 /*NO NONSPEC VOL REQS OR ERROR*/
@RF00196 DS    0H                                               01S0284
*IF RTNCODE = RETRYRC & INDRETRY = ON THEN /*RETURN CODE = RETRYRC   */
@RC00196 CH    RTNCODE,@CH00109                                 01S0284
         BNE   @RF00284                                         01S0284
         L     @10,@PC00001                                     01S0284
         L     @10,ALCWAPTR(,@10)                               01S0284
         TM    INDRETRY(@10),B'01000000'                        01S0284
         BNO   @RF00284                                         01S0284
*  DO;                                 /*ZERO RETRY RETURN CODE      */
*    RTNCODE = SUCCESS;                                         01S0286
         SLR   RTNCODE,RTNCODE                                  01S0286
*  END;                                                         01S0287
*ELSE;                                 /*NOT RETRY RETURN CODE       */
@RF00284 DS    0H                                               01S0289
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - UNFLGGEN                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - REMOVE INELIGIBILITY FLAGS                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE REMOVES THE INELIGIBILY FLAG (SIOTGIGN)         */
*/*     FROM EACH SIOT. THIS ROUTINE ALSO UPDATES THE REQUEST        */
*/*     ID MASK TABLE AND INDICATES IF ALL REQUESTS NOT FLAGGED      */
*/*     INELIGIBLE HAVE BEEN ALLOCATED.                              */
*/*                                                                  */
*/*   OPERATION - THIS OPERATION IS DOCUMENTED BY THE CODE ITSELF.   */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT - SIOT1P - PTR TO THE FIRST SIOT IN THE CHAIN.           */
*/*         - RIMTABP  - PTR TO THE REQUEST ID MASK TABLE            */
*/*                                                                  */
*/* EXIT - NORMAL -(INLINE SUBROUTINE)                               */
*/*                                                                  */
*/*   CONDITION - FUNCTION HAS BEEN COMPLETED.                       */
*/*                                                                  */
*/*   OUTPUT - SIOTGIGN - (SET TO 0) INELIGIBILITY FLAG IN SIOT      */
*/*          - RIMUACT  - COUNT OF UNALLOCATED SIOTS ASSOCIATED WITH */
*/*                       REQUEST ID MASK TABLE ENTRIES.             */
*/*          - LASTDONE - INDICATOR OF WHETHER LAST GENERIC          */
*/*                       SATISFIED ALL REQUESTS ELIGIBLE TO IT      */
*/*                                                                  */
*/*   RETURN CODE - (NONE)                                           */
*/*                                                                  */
*/********************************************************************/
*SIOTPTR = SIOT1P;                     /*POINT TO FIRST SIOT         */
         L     @10,@PC00001                                     02S0289
         L     @10,ALCWAPTR(,@10)                               02S0289
         L     SIOTPTR,SIOT1P(,@10)                             02S0289
*DO WHILE SIOTPTR ^= ZERO;             /*SCAN ALL SIOTS              */
         B     @DE00290                                         02S0290
@DL00290 DS    0H                                               02S0291
*  IF SIOTGIGN = OFF THEN              /*IS SIOT ELIGIBLE TO THIS GEN*/
         TM    SIOTGIGN(SIOTPTR),B'00001000'                    02S0291
         BNZ   @RF00291                                         02S0291
*    DO;                               /*YES, PROCESS                */
*      IF SIOTALCD = YES                                        02S0293
*        & (NEEDRCVY = OFF                                      02S0293
*        × SVOLUNAD -> VOLTAREQ = OFF) THEN /*IS SIOT FULLY ALLOC'D  */
         TM    SIOTALCD(SIOTPTR),B'00000010'                    02S0293
         BNO   @RF00293                                         02S0293
         L     @10,@PC00001                                     02S0293
         L     @10,ALCWAPTR(,@10)                               02S0293
         TM    NEEDRCVY(@10),B'00010000'                        02S0293
         BZ    @RT00293                                         02S0293
         L     @10,SVOLUNAD(,SIOTPTR)                           02S0293
         TM    VOLTAREQ(@10),B'10000000'                        02S0293
         BNZ   @RF00293                                         02S0293
@RT00293 DS    0H                                               02S0294
*        DO;                           /*YES, PROCESS                */
*          RIMTENTP=RIMTABP+((SIOTGIID-ONE)*RIMTABLN); /*POINT TO
*                                        ASSOCIATED RIMT ENTRY       */
         L     @10,@PC00001                                     02S0295
         L     @10,ALCWAPTR(,@10)                               02S0295
         LH    @01,SIOTGIID(,SIOTPTR)                           02S0295
         BCTR  @01,0                                            02S0295
         M     @00,RIMTABLN(,@10)                               02S0295
         AL    @01,RIMTABP(,@10)                                02S0295
         LR    RIMTENTP,@01                                     02S0295
*          RIMUACT = RIMUACT - ONE;    /*DECREMENT COUNT OF UNALLOC'D*/
         L     @10,RIMUACT(,RIMTENTP)                           02S0296
         BCTR  @10,0                                            02S0296
         ST    @10,RIMUACT(,RIMTENTP)                           02S0296
*        END;                                                   02S0297
*      ELSE                            /*SIOT IS NOT FULLY ALLOCATED */
*        DO;                                                    02S0298
         B     @RC00293                                         02S0298
@RF00293 DS    0H                                               02S0299
*          LASTDONE = NO;              /*INDICATE ALL NOT SATISFIED  */
         L     @10,@PC00001+8                                   02S0299
         NI    LASTDONE(@10),B'01111111'                        02S0299
*        END;                                                   02S0300
*    END;                                                       02S0301
*  ELSE                                /*SIOT MARKED INELIGIBLE      */
*    DO;                                                        02S0302
         B     @RC00291                                         02S0302
@RF00291 DS    0H                                               02S0303
*      SIOTGIGN = OFF;                 /*REMOVE IGNORE FLAG          */
         NI    SIOTGIGN(SIOTPTR),B'11110111'                    02S0303
*    END;                                                       02S0304
*  SIOTPTR = SIOTNPTR;                 /*POINT TO NEXT SIOT          */
@RC00291 L     SIOTPTR,SIOTNPTR(,SIOTPTR)                       02S0305
*END;                                                           02S0306
@DE00290 LTR   SIOTPTR,SIOTPTR                                  02S0306
         BNZ   @DL00290                                         02S0306
*RETURN CODE(RTNCODE);                 /*RETURN TO CALLER            */
         L     @13,4(,@13)                                      01S0307
         L     @00,@SIZDATD                                     01S0307
         LR    @01,@11                                          01S0307
         FSPACE   R,LV=(0),A=(1)
         LR    @15,@06                                          01S0307
         L     @14,12(,@13)                                     01S0307
         LM    @00,@12,20(@13)                                  01S0307
         BR    @14                                              01S0307
*TESTBIT: PROC;                                                 02S0308
TESTBIT  STM   @14,@12,@SA00002                                 02S0308
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - TESTBIT                                           */
*/*                                                                  */
*/* DESCRIPTIVE NAME - TEST BIT IN GROUP MASK                        */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS SUBROUTINE DETERMINES IF A PARTICULAR BIT IN A         */
*/*      GROUP MASK IS ON OR OFF. THE GROUP MASK IS A VARIABLE       */
*/*      LENGTH BIT MASK POINTED TO BY MASKPTR . THE ONE-ORIGIN      */
*/*      INDEX OF THE BIT TO BE TESTED IS CONTAINED IN FIELD         */
*/*      GROUPNO.                                                    */
*/*                                                                  */
*/*   OPERATION -                                                    */
*/*      THIS SEGMENT GENERATES BAL INSTRUCTIONS                     */
*/*                                                                  */
*/*      ONE IS SUBTRACTED FROM THE GROUPNO TO PRODUCE A ZERO-ORIGIN */
*/*      INDEX. THE INDEX IS THEN DIVIDED BY EIGHT TO DETERMINE THE  */
*/*      BYTE (AND REMAINDER)  OF THE BIT BEING TESTED (IN A SRDL    */
*/*      INSTRUCTION, THE ODD REGISTER GETS THE BITS SHIFTED OUT OF  */
*/*      THE EVEN REGISTER). THE REMAINDER IS ALIGNED IN A REGISTER  */
*/*      AND IS USED TO INDICATE THE BIT POSITION IN THE BYTE. THIS  */
*/*      BIT POSITION IS USED IN A TEST-UNDER-MASK INSTRUCTION VIA   */
*/*      EXECUTE.                                                    */
*/*                                                                  */
*/*      EXAMPLE - IF GROUPNO = 10, THIS OPERATION WILL DETERMINE    */
*/*                THE BIT IS 1 BYTE AFTER THE BEGINNING OF THE      */
*/*                GROUP MASK AND IS THE SECOND BIT POSITION.        */
*/*                                                                  */
*/* ENTRY - THIS CODE IS AN INLINE SUBROUTINE WHICH IS ENTERED       */
*/*         AT THE TOP.                                              */
*/*                                                                  */
*/*   PURPOSE  -  TO DETERMINE IF A PARTICULAR BIT IN A GROUP        */
*/*               MASK IS ON OR OFF.                                 */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*       MASKPTR - PTR TO GROUP MASK                                */
*/*       GROUPNO - 1-ORIGIN INDEX INTO MASK OF THE BIT TO BE TESTED */
*/*       BITRTN - BIT FOR RESULTS OF TEST TO BE RETURNED IN         */
*/*                                                                  */
*/* EXIT - NORMAL - THIS CODE IS AN INTERNAL PROCEDURE WHICH         */
*/*                 EXITS FROM THE BOTTOM.                           */
*/*                                                                  */
*/*   CONDITION - BIT TESTED AND RESULTS INDICATED.                  */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*       BITRTN - SET TO 1 IF BIT WAS ON                            */
*/*              - SET TO 0 IF BIT WAS OFF                           */
*/*                                                                  */
*/*   RETURN CODES - (NONE)                                          */
*/*                                                                  */
*/********************************************************************/
*BITRTN = OFFVALUE;                    /*ASSUME BIT IS OFF           */
         NI    BITRTN,B'01111111'                               02S0309
*RFY (EVENREG,ODDREG,MASKREG) RSTD;    /*RESTRICT USE OF REGS 3,4+5  */
*GEN REFS(EVENREG,GROUPNO,MASKPTR,ODDREG,MASKREG,TMINST)        02S0311
*    FLOWS(BITOFF);                                             02S0311
        L     EVENREG,GROUPNO         PUT BIT INDEX INTO REG
        BCTR  EVENREG,0               DECREMENT INDEX FOR ZERO ORIGIN
        SRDL  EVENREG,3               DIVIDE INDEX BY 8.SAVE REMAINDER
        A     EVENREG,MASKPTR         POINT TO CORRECT BYTE
        SRL   ODDREG,29               ALIGN REMAINDER IN REG
        LA    MASKREG,X'80'           INSERT 0-BIT MASK
        SRL   MASKREG,0(ODDREG)       POSITION MASK BIT
        EX    MASKREG,TMINST          TEST IF BIT IS ON
        BNO   BITOFF                  BRANCH IF BIT NOT ON
*RFY (EVENREG,ODDREG,MASKREG) UNRSTD;  /*UNRESTRICT REGS 3,4, AND 5  */
*BITRTN = ONVALUE;                     /*INDICATE BIT WAS ON         */
         OI    BITRTN,B'10000000'                               02S0313
*BITOFF:;                              /*BITOFF                      */
*RETURN;                               /*RETURN TO CALLER            */
@EL00002 DS    0H                                               02S0315
@EF00002 DS    0H                                               02S0315
@ER00002 LM    @14,@12,@SA00002                                 02S0315
         BR    @14                                              02S0315
*END TESTBIT;                                                   02S0316
         B     @EL00002                                         02S0316
*END IEFAB475                          /*END ALLOC-WITHIN-A-GENERIC  */
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (A475SPEC)                                        *
*/*%INCLUDE SYSLIB  (A475DATA)                                        *
*/*%INCLUDE SYSLIB  (TBITDATA)                                        *
*/*%INCLUDE SYSLIB  (ASCRDATA)                                        *
*/*%INCLUDE SYSLIB  (IEFZB421)                                        *
*/*%INCLUDE SYSLIB  (IEFZB422)                                        *
*/*%INCLUDE SYSLIB  (IEFZB423)                                        *
*/*%INCLUDE SYSLIB  (IEFZB425)                                        *
*/*%INCLUDE SYSLIB  (IEFZB426)                                        *
*/*%INCLUDE SYSLIB  (IEFZB428)                                        *
*/*%INCLUDE SYSLIB  (IEFASIOT)                                        *
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                        *
*/*%INCLUDE SYSLIB  (FLAGDMAN)                                        *
*/*%INCLUDE SYSLIB  (FLGDSPEC)                                        *
*/*%INCLUDE SYSLIB  (FLAGIGEN)                                        *
*/*%INCLUDE SYSLIB  (FLAGSPEC)                                        *
*/*%INCLUDE SYSLIB  (ASPCMONT)                                        *
*/*%INCLUDE SYSLIB  (ASPCSPEC)                                        *
*/*%INCLUDE SYSLIB  (ASCRMONT)                                        *
*/*%INCLUDE SYSLIB  (ASCRSPEC)                                        *
*/*%INCLUDE SYSLIB  (UNFLGGEN)                                        *
*/*%INCLUDE SYSLIB  (UFLGSPEC)                                        *
*/*%INCLUDE SYSLIB  (TESTBIT )                                        *
*/*%INCLUDE SYSLIB  (TBITSPEC)                                        *
*;                                                              01S0317
@DATA    DS    0H
@CH00040 DC    H'1'
@CH00145 DC    H'2'
@CH00980 DC    H'12'
@CH00109 DC    H'20'
@CH00103 DC    H'56'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    3F
@SA00002 DS    15F
@AL00001 DS    3A
@TF00001 DS    F
IEFAB475 CSECT
         DS    0F
@CF00979 DC    F'28'
@CH00979 EQU   @CF00979+2
@CF00149 DC    XL4'E6000000'
@DATD    DSECT
         DS    0D
MASKPTR  DS    A
UCBLISTP DS    A
GROUPNO  DS    F
EDTPTR   DS    A
LUVPTR   DS    A
GENPTR   DS    A
GRPTABP  DS    A
GRPPTR   DS    A
EDLGNTP  DS    A
EDLUCBLP DS    A
SAVOLUNO DS    F
DOTYPES  DS    BL1
         ORG   DOTYPES
DODEMAND DS    BL1
DOSPMNT  EQU   DOTYPES+0
SPDOALG  EQU   DOTYPES+0
DOALG    EQU   DOTYPES+0
DOSCRMNT EQU   DOTYPES+0
@NM00001 EQU   DOTYPES+0
         ORG   DOTYPES+1
         DS    CL3
FUNCLIST DS    CL8
         ORG   FUNCLIST
@NM00002 DS    CL4
         ORG   @NM00002
@NM00003 DS    BL1
         ORG   @NM00003
@NM00004 DS    BL1
VOLSWOK  EQU   @NM00003+0
@NM00005 EQU   @NM00003+0
         ORG   @NM00002+1
@NM00006 DS    AL3
         ORG   FUNCLIST+4
UCBLSIZE DS    FL4
         ORG   FUNCLIST+8
BITRTN   DS    BL1
USEUCB   DS    BL1
IEFAB475 CSECT
         DS    0F
@SIZDATD DC    AL1(230)
         DC    AL3(@ENDDATD-@DATD)
@CV00116 DC    V(IEFAB433)
@CV00117 DC    V(IEFAB436)
@CV00118 DC    V(IEFAB476)
@CV00119 DC    V(IEFAB479)
         DS    0D
GTSTZERO DC    F'0'
INITFUNC DS    CL8
         ORG   INITFUNC
@NM00007 DS    CL4
         ORG   @NM00007
@NM00008 DC    B'00101100'
         ORG   @NM00008
@NM00009 DS    BL1
@NM00010 EQU   @NM00008+0
@NM00011 EQU   @NM00008+0
@NM00012 EQU   @NM00008+0
@NM00013 EQU   @NM00008+0
@NM00014 EQU   @NM00008+0
@NM00015 EQU   @NM00008+0
@NM00016 EQU   @NM00008+0
         ORG   @NM00007+1
@NM00017 DS    AL3
         ORG   INITFUNC+4
@NM00018 DS    FL4
         ORG   INITFUNC+8
IEFAB475 CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
IEFAB475 CSECT
TMINST  TM    0(EVENREG),0            TEST OF CORRECT BYTE. MASK=BIT
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEFAB475 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
GTSTRTCD EQU   @10
UCBSLGN  EQU   @09
UCBNO    EQU   @08
SLOTNO   EQU   @04
UCBPTR   EQU   @02
GROUPPTR EQU   @07
VUCTR    EQU   @05
RTNCODE  EQU   @06
GENSCTR  EQU   @07
VUPTR    EQU   @03
SIOTPTR  EQU   @02
RIMTENTP EQU   @03
EDLPTR   EQU   @04
REG15    EQU   @15
EVENREG  EQU   @04
MASKREG  EQU   @03
ODDREG   EQU   @05
REG0     EQU   @00
REG1     EQU   @01
GTSTR0   EQU   @00
GTSTR1   EQU   @01
GTSTR2   EQU   @02
GTSTR15  EQU   @15
GTSTR4   EQU   @04
GTSTR5   EQU   @05
GTSTR6   EQU   @06
GTSTR7   EQU   @07
GTSTR8   EQU   @08
GTSTR3   EQU   @03
REASONCD EQU   0
RIMTABLE EQU   0
RIMUACT  EQU   RIMTABLE+4
PSUCBP   EQU   0
IOSLUT   EQU   0
EDTHDR   EQU   0
EDTLUVSP EQU   EDTHDR
EDTGENSP EQU   EDTHDR+4
EDTGRPSP EQU   EDTHDR+8
EDTUCBSP EQU   EDTHDR+12
EDTMSKTP EQU   EDTHDR+16
LUVSECT  EQU   0
LUVHDR   EQU   LUVSECT
LUVENTRY EQU   0
LUVGMTP  EQU   LUVENTRY+12
LUVFLAGS EQU   LUVENTRY+24
GENSECT  EQU   0
GENHDR   EQU   GENSECT
GENENTRY EQU   0
GRPTRTAB EQU   0
GRPSECT  EQU   0
GRPHDR   EQU   GRPSECT
GRPENTRY EQU   0
GRPUCBNO EQU   GRPENTRY+4
GRPUCBP  EQU   GRPENTRY+8
EUCBSECT EQU   0
EUCBHDR  EQU   EUCBSECT
EUCBENTY EQU   0
EUCBTPOS EQU   EUCBENTY
GRMSKTAB EQU   0
GMTHDR   EQU   GRMSKTAB
GMTENTLN EQU   GMTHDR+4
GMTENTRY EQU   0
IEFEDL   EQU   0
EDLHDR   EQU   IEFEDL
EDLGENNO EQU   EDLHDR+4
EDLFGENP EQU   EDLHDR+8
EDLUVFLG EQU   EDLHDR+16
EDLENTRY EQU   0
EDLNXTNT EQU   EDLENTRY
EDLDEVT  EQU   EDLENTRY+4
EDLDTFLG EQU   EDLENTRY+20
EINDEVTP EQU   EDLDTFLG
EDLGNTRY EQU   0
EDLGRFLG EQU   EDLGNTRY+16
EDLUCBL  EQU   0
EDLINDIC EQU   EDLUCBL+2
VOLUNTAB EQU   0
VOLSTAT  EQU   VOLUNTAB+6
VOLSTATA EQU   VOLSTAT
VOLPUB   EQU   VOLSTATA
VOLPRV   EQU   VOLSTATA
VOLSPEC  EQU   VOLSTATA
VOLNSHR  EQU   VOLSTATA
VOLSTATB EQU   VOLSTAT+1
VOLALOC  EQU   VOLSTATB
VDEVREQD EQU   VOLSTATB
VOLSTATC EQU   VOLSTAT+2
VOLTAREQ EQU   VOLSTATC
VOLSTATD EQU   VOLSTAT+3
VOLALGTP EQU   VOLUNTAB+12
ALCWA    EQU   0
FMAPPTR  EQU   ALCWA+4
SIOT1P   EQU   ALCWA+8
IOSLUTP  EQU   ALCWA+16
FAILRSCP EQU   ALCWA+20
EDTABPTR EQU   ALCWA+24
CNTABLE  EQU   ALCWA+28
VOLUNPTR EQU   ALCWA+80
VOLUNSZE EQU   ALCWA+84
ALGTABP  EQU   ALCWA+88
RIMTABP  EQU   ALCWA+96
RIMTABLN EQU   ALCWA+100
INDICATE EQU   ALCWA+112
INDRETRY EQU   INDICATE
@NM00025 EQU   ALCWA+113
WAITIGEN EQU   @NM00025
NEEDRCVY EQU   @NM00025
TIOTHDRP EQU   ALCWA+120
LGENLOCK EQU   ALCWA+124
WMASKPTR EQU   ALCWA+128
NAMES    EQU   0
ALGPTRS  EQU   0
CVRPARM  EQU   0
CVRFLG1  EQU   CVRPARM+8
CVRRQLST EQU   0
CVRMIN   EQU   CVRRQLST+10
CVRFLG2  EQU   CVRRQLST+16
CVRSKFLG EQU   CVRFLG2
CVRIGNOR EQU   CVRFLG2
CVRDUPLI EQU   CVRFLG2+1
CVRWUCBP EQU   CVRRQLST+24
CVRGPLST EQU   0
CVRFLG3  EQU   CVRGPLST+12
GRPCOUNT EQU   0
FUNCMAP  EQU   0
VOLMNTSW EQU   FUNCMAP
WRTMSGSW EQU   FUNCMAP
UWAITSW  EQU   FUNCMAP
VWAITSW  EQU   FUNCMAP
OFFDEVSW EQU   FUNCMAP
CCLMNTSW EQU   FUNCMAP
GENLOKSW EQU   FUNCMAP
HDRMSGSW EQU   FUNCMAP+1
MTRJOBSW EQU   FUNCMAP+1
NOTIOTNQ EQU   FUNCMAP+1
TRKMSW   EQU   FUNCMAP+1
WAITOKSW EQU   FUNCMAP+1
ASNMSW   EQU   FUNCMAP+1
INDMSIOT EQU   0
SCTUSADD EQU   INDMSIOT+20
SIOTBYT1 EQU   INDMSIOT+43
SIOTALCD EQU   SIOTBYT1
SIOTBYT3 EQU   INDMSIOT+46
SIOTTSTC EQU   INDMSIOT+47
SIOTGIID EQU   INDMSIOT+50
SIOTBYT0 EQU   INDMSIOT+52
SIOTGIGN EQU   SIOTBYT0
SCTSDISP EQU   INDMSIOT+55
SCTSBYT1 EQU   INDMSIOT+56
SCTSBYT2 EQU   INDMSIOT+57
SCTSBYT3 EQU   INDMSIOT+58
SCTSBYT4 EQU   INDMSIOT+59
SCTUTYPE EQU   INDMSIOT+60
SIOTDEVT EQU   SCTUTYPE
SIOUBYT3 EQU   SIOTDEVT+2
SIOTALTD EQU   INDMSIOT+92
SIOTBYT2 EQU   INDMSIOT+103
SIOTDMND EQU   SIOTBYT2
SIOTRSNC EQU   INDMSIOT+130
SIOTEDLP EQU   INDMSIOT+136
SVOLUNAD EQU   INDMSIOT+140
SIOTNPTR EQU   INDMSIOT+152
SVOLUNNO EQU   INDMSIOT+168
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBMONT  EQU   UCBJBNR
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBONLI  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBNOTRD EQU   UCBNRY
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCB3TAPE EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00055 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
UCBBGN   EQU   0
ALCWAPTR EQU   0
UMAXCTR  EQU   0
FLAGBITS EQU   0
LASTDONE EQU   FLAGBITS
WHOLEGEN EQU   FLAGBITS
SPDEMAND EQU   FLAGBITS
PARTALG  EQU   FLAGBITS
UCBOBS01 EQU   UCBDEV
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBMOUNT EQU   UCBDMCT
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00054 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBOBS09 EQU   UCBDEV
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBCTCF1 EQU   UCBOBS08+4
UCBCTCAD EQU   UCBOBS08
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00054
UCBSKPFG EQU   @NM00054
UCBRIPND EQU   @NM00054
UCBRTIAC EQU   @NM00054
UCBRSV79 EQU   @NM00054
UCBRSV78 EQU   @NM00054
UCBRSV77 EQU   @NM00054
UCBOLTEP EQU   @NM00054
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBRV038 EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00053 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRV028 EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVOLI  EQU   UCBOBS01+4
UCBVTOC  EQU   UCBOBS01
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBRSV50 EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBRV043 EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBRV034 EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBRV032 EQU   UCBFLP1
UCBRV031 EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00055
UCBHALI  EQU   @NM00055
UCBRSV09 EQU   @NM00055
UCBRSV08 EQU   @NM00055
UCBRSV07 EQU   @NM00055
UCBRSV06 EQU   @NM00055
UCBRSV05 EQU   @NM00055
UCBRSV04 EQU   @NM00055
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBNAME  EQU   UCBOB+13
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBFLB7  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBRV011 EQU   UCBJBNR
UCBRSV02 EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBRV002 EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00052 EQU   UCB
SIODDSNL EQU   INDMSIOT+173
SIOVDSNL EQU   INDMSIOT+172
SIOVDSNT EQU   INDMSIOT+170
SIOTVMVP EQU   INDMSIOT+164
SIOTJFX  EQU   INDMSIOT+160
SJFCBPTR EQU   INDMSIOT+156
SIOTETIO EQU   INDMSIOT+148
SIOTATE  EQU   INDMSIOT+144
SIOTEDLS EQU   INDMSIOT+132
SCTANAME EQU   INDMSIOT+122
@NM00051 EQU   INDMSIOT+108
SIOTSSNM EQU   INDMSIOT+104
SIODDQCR EQU   SIOTBYT2
SIOVDQCR EQU   SIOTBYT2
SIOTCVOL EQU   SIOTBYT2
SIOTCNEW EQU   SIOTBYT2
SIOTCALC EQU   SIOTBYT2
SIOTGALL EQU   SIOTBYT2
SIOTDSPD EQU   SIOTBYT2
SIOTOPUC EQU   INDMSIOT+99
SIOTOUTR EQU   INDMSIOT+97
SIOTOUTC EQU   INDMSIOT+96
@NM00050 EQU   INDMSIOT+93
SIOTAUNC EQU   SIOTALTD
SIOTACAT EQU   SIOTALTD
SIOTADEL EQU   SIOTALTD
SIOTAKEP EQU   SIOTALTD
SIOTNPRV EQU   SIOTALTD
SIOJCATS EQU   SIOTALTD
@NM00049 EQU   SIOTALTD
@NM00048 EQU   SIOTALTD
@NM00047 EQU   INDMSIOT+91
SIOTNDSB EQU   INDMSIOT+88
@NM00046 EQU   INDMSIOT+84
SIOTDPCD EQU   INDMSIOT+82
@NM00045 EQU   INDMSIOT+81
SCTOUTPN EQU   INDMSIOT+80
SCTOUTNO EQU   INDMSIOT+76
SCTOUTNM EQU   INDMSIOT+68
SIOUCBAD EQU   SCTUTYPE+5
SIOUCNVT EQU   SCTUTYPE+4
SIOUBYT4 EQU   SIOTDEVT+3
@NM00044 EQU   SIOUBYT3
SIO3UREC EQU   SIOUBYT3
SIO3DISP EQU   SIOUBYT3
SIO3DACC EQU   SIOUBYT3
SIO3COMM EQU   SIOUBYT3
SIO3TAPE EQU   SIOUBYT3
SIOUBYT2 EQU   SIOTDEVT+1
SIOUBYT1 EQU   SIOTDEVT
SIOTOMN  EQU   SCTSBYT4
SIOTIPDI EQU   SCTSBYT4
SIOTVAFF EQU   SCTSBYT4
SIOTSTEP EQU   SCTSBYT4
SIOTASCI EQU   SCTSBYT4
@NM00043 EQU   SCTSBYT4
SIOTGDGA EQU   SCTSBYT4
SCTSGDGS EQU   SCTSBYT4
SCTSOLD  EQU   SCTSBYT3
SCTSMOD  EQU   SCTSBYT3
SCTSNEW  EQU   SCTSBYT3
SCTSYSOU EQU   SCTSBYT3
SCTVREF  EQU   SCTSBYT3
@NM00042 EQU   SCTSBYT3
SCTSYSNE EQU   SCTSBYT3
SCTDSNRF EQU   SCTSBYT3
SCTRECVD EQU   SCTSBYT2
SCTDEFER EQU   SCTSBYT2
SCTLABEL EQU   SCTSBYT2
SCTUNLBD EQU   SCTSBYT2
SCTJOBLB EQU   SCTSBYT2
SCTVOLAF EQU   SCTSBYT2
SIOTCATL EQU   SCTSBYT2
SIOCLUNL EQU   SCTSBYT2
SIOTJSCT EQU   SCTSBYT1
SCTUNAFF EQU   SCTSBYT1
SCTPARLM EQU   SCTSBYT1
SIOTQDSN EQU   SCTSBYT1
SIOTGDSN EQU   SCTSBYT1
SIOTCCAT EQU   SCTSBYT1
SCTSYSIN EQU   SCTSBYT1
SCTDUMMY EQU   SCTSBYT1
SIOTUNCT EQU   SCTSDISP
SIOTCTLG EQU   SCTSDISP
SIOTDLET EQU   SCTSDISP
SIOTKEEP EQU   SCTSDISP
SIOTPASS EQU   SCTSDISP
SIOTPRIV EQU   SCTSDISP
S3400DSP EQU   SCTSDISP
@NM00041 EQU   SCTSDISP
SIOTVLCT EQU   INDMSIOT+54
SCTNMBUT EQU   INDMSIOT+53
SIOTRTRY EQU   SIOTBYT0
SIOTPUPV EQU   SIOTBYT0
SIOTNOPV EQU   SIOTBYT0
SPVTAMSG EQU   SIOTBYT0
SIOTFUDA EQU   SIOTBYT0
SIOTDYAL EQU   SIOTBYT0
SIOTSSDS EQU   SIOTBYT0
SCTVOLCT EQU   INDMSIOT+49
SCTSPOOL EQU   INDMSIOT+48
SIOTQNAM EQU   SIOTTSTC
@NM00040 EQU   SIOTTSTC
SIOTTERM EQU   SIOTTSTC
@NM00039 EQU   SIOTTSTC
@NM00038 EQU   SIOTBYT3
SIOTJES3 EQU   SIOTBYT3
SIOCDEVT EQU   SIOTBYT3
SIOALIAS EQU   SIOTBYT3
SCTDDINO EQU   INDMSIOT+44
SIOTDDNT EQU   SIOTBYT1
SIODADSM EQU   SIOTBYT1
SIOTDADR EQU   SIOTBYT1
SIODUNAL EQU   SIOTBYT1
SIOVAMDS EQU   SIOTBYT1
SIOTHOLD EQU   SIOTBYT1
SIOTOCKP EQU   SIOTBYT1
SIOPSCNT EQU   INDMSIOT+42
SIOTREFN EQU   INDMSIOT+40
SIOTOTUN EQU   INDMSIOT+39
SIOTVRSB EQU   INDMSIOT+36
@NM00037 EQU   INDMSIOT+35
SCTPJFCB EQU   INDMSIOT+32
@NM00036 EQU   INDMSIOT+31
SCTPSIOT EQU   INDMSIOT+28
SIOTAFID EQU   INDMSIOT+26
@NM00035 EQU   INDMSIOT+24
SIODSNTE EQU   INDMSIOT+22
SIOTUNAF EQU   SCTUSADD
SIOTDEST EQU   INDMSIOT+12
SCTDDNAM EQU   INDMSIOT+4
SIOTTYPE EQU   INDMSIOT+3
SIOTDSKA EQU   INDMSIOT
EXTRACAL EQU   FUNCMAP+1
ALCASDSN EQU   ASNMSW
ALCSUBWT EQU   WAITOKSW
ALCATRKM EQU   TRKMSW
ALCNOENQ EQU   NOTIOTNQ
ALCJOBNM EQU   MTRJOBSW
ALCHDMSG EQU   HDRMSGSW
@NM00034 EQU   FUNCMAP+1
ALCGENER EQU   GENLOKSW
ALCCANCL EQU   CCLMNTSW
ALCOFFDV EQU   OFFDEVSW
@NM00033 EQU   FUNCMAP
ALCWTVOL EQU   VWAITSW
ALCWTUNT EQU   UWAITSW
ALCMSGLV EQU   WRTMSGSW
ALCMOUNT EQU   VOLMNTSW
GRPWPTR  EQU   GRPCOUNT+12
GRPIDENT EQU   GRPCOUNT+10
GRPEXCS  EQU   GRPCOUNT+8
GRPTOTAL EQU   GRPCOUNT+6
GRPOFFLN EQU   GRPCOUNT+4
GRPALLCT EQU   GRPCOUNT+2
GRPAVAIL EQU   GRPCOUNT
@NM00032 EQU   CVRGPLST+13
@NM00031 EQU   CVRFLG3
CVRFORCI EQU   CVRFLG3
CVRGSKP  EQU   CVRFLG3
CVRBOUND EQU   CVRGPLST+10
CVRGALL  EQU   CVRGPLST+8
CVRGRPAL EQU   CVRGPLST+6
CVRGRPID EQU   CVRGPLST+4
CVRGCPTR EQU   CVRGPLST
@NM00030 EQU   CVRRQLST+26
CVRGRPPT EQU   CVRRQLST+20
CVRNGRP  EQU   CVRRQLST+18
@NM00029 EQU   CVRFLG2+1
CVRWMOVE EQU   CVRFLG2
CVRMULTI EQU   CVRFLG2
CVRSCRTH EQU   CVRFLG2
CVRFULL  EQU   CVRFLG2
CVRREACH EQU   CVRFLG2
CVRRUSED EQU   CVRFLG2
CVRGNEXT EQU   CVRRQLST+12
CVRPTS   EQU   CVRMIN
CVRNEED  EQU   CVRRQLST+8
CVRALLCT EQU   CVRRQLST+6
CVRREQ1  EQU   CVRRQLST+4
CVRVUPTR EQU   CVRRQLST
@NM00028 EQU   CVRPARM+9
@NM00027 EQU   CVRFLG1
CVRFCALL EQU   CVRFLG1
CVROFFLG EQU   CVRFLG1
CVRALFLG EQU   CVRFLG1
CVRAVFLG EQU   CVRFLG1
CVRGRPLK EQU   CVRPARM+6
CVRNREQ  EQU   CVRPARM+4
CVRRQPTR EQU   CVRPARM
ALGGCNTP EQU   ALGPTRS+12
ALGGLSTP EQU   ALGPTRS+8
ALGRQLTP EQU   ALGPTRS+4
ALGPARMP EQU   ALGPTRS
ALCPROCN EQU   NAMES+16
ALCSTEPN EQU   NAMES+8
ALCJOBN  EQU   NAMES
EXITPRMP EQU   ALCWA+144
CANCELP  EQU   ALCWA+140
WORK3MP  EQU   ALCWA+136
WMASK2P  EQU   ALCWA+132
TCBP     EQU   ALCWA+116
ALCWASID EQU   ALCWA+114
@NM00026 EQU   @NM00025
NODEVERR EQU   @NM00025
ALCWAREC EQU   @NM00025
UNITRECS EQU   @NM00025
ALCWADUL EQU   INDICATE
ALCWISAM EQU   INDICATE
DSSUNIT  EQU   INDICATE
DSSTAPE  EQU   INDICATE
PRIVASUM EQU   INDICATE
INDREQU  EQU   INDICATE
INDWAIT  EQU   INDICATE
QMGRRBP  EQU   ALCWA+108
RIMTABCT EQU   ALCWA+104
ALGTABSZ EQU   ALCWA+92
@NM00024 EQU   ALCWA+78
LTUNITID EQU   ALCWA+76
TOTVOLUN EQU   CNTABLE+44
NUMREQS  EQU   CNTABLE+40
TOTREQS  EQU   CNTABLE+36
OTHEREQS EQU   CNTABLE+32
SUBSREQS EQU   CNTABLE+28
STRGREQS EQU   CNTABLE+24
PUBLREQS EQU   CNTABLE+20
PVTNREQS EQU   CNTABLE+16
SPECREQS EQU   CNTABLE+12
TPREQS   EQU   CNTABLE+8
VAMREQS  EQU   CNTABLE+4
DMYREQS  EQU   CNTABLE
JSCBPTR  EQU   ALCWA+12
WASIZE   EQU   ALCWA
VUGRID   EQU   VOLUNTAB+24
VUUCBP   EQU   VOLUNTAB+20
VOLSIOTP EQU   VOLUNTAB+16
VOLUNTID EQU   VOLUNTAB+10
VURCVYPR EQU   VOLSTATD
VUVLUNIQ EQU   VOLSTATD
VUDMUNIQ EQU   VOLSTATD
VUUNALSW EQU   VOLSTATD
VUDMNDAL EQU   VOLSTATD
VUDMNDOF EQU   VOLSTATD
VUREALOC EQU   VOLSTATD
VUMUGDON EQU   VOLSTATD
@NM00023 EQU   VOLSTATC
@NM00022 EQU   VOLSTATC
@NM00021 EQU   VOLSTATC
VOLURREQ EQU   VOLSTATC
VOLGRREQ EQU   VOLSTATC
VOLDAREQ EQU   VOLSTATC
VOLCOREQ EQU   VOLSTATC
VUAFFWRK EQU   VOLSTATB
VUVINELG EQU   VOLSTATB
VUDADSME EQU   VOLSTATB
VUDNALOC EQU   VOLSTATB
VUPROCED EQU   VOLSTATB
VOLMNTD  EQU   VOLSTATB
VOLDEFER EQU   VOLSTATA
VUDADSM  EQU   VOLSTATA
VOLRESVE EQU   VOLSTATA
VOLSTG   EQU   VOLSTATA
VOLID    EQU   VOLUNTAB
EDLNOJES EQU   EDLINDIC
EDLVOLAF EQU   EDLINDIC
EDLENQ   EQU   EDLINDIC
EDLDADSM EQU   EDLINDIC
EDLALCD  EQU   EDLINDIC
EDLUCBAD EQU   EDLUCBL
EDLJINEL EQU   EDLGRFLG
EDLGRID  EQU   EDLGNTRY+12
EDLLISTP EQU   EDLGNTRY+8
EDLUCBNO EQU   EDLGNTRY+4
EDLNXGRP EQU   EDLGNTRY
@NM00020 EQU   EDLENTRY+18
EDLNSCNT EQU   EDLENTRY+16
EDLGRPTR EQU   EDLENTRY+12
EDLGRPNO EQU   EDLENTRY+8
EDLMGENS EQU   EDLUVFLG
EDLVAM   EQU   EDLUVFLG
EDLGMTP  EQU   EDLHDR+12
EDLLUV   EQU   EDLHDR
GRPMASK  EQU   GMTENTRY
GMTENTNO EQU   GMTHDR
EUCBENLN EQU   EUCBHDR+4
EUCBENNO EQU   EUCBHDR
GRPID    EQU   GRPENTRY
GRPENTLN EQU   GRPHDR+4
GRPENTNO EQU   GRPHDR
GRPTR    EQU   GRPTRTAB
GENGRPTR EQU   GENENTRY+8
GENGRPNO EQU   GENENTRY+4
GENDEVT  EQU   GENENTRY
GENENTLN EQU   GENHDR+4
GENENTNO EQU   GENHDR
LUVAGMTP EQU   LUVENTRY+28
@NM00019 EQU   LUVFLAGS
LUVMGENS EQU   LUVFLAGS
LUVAGMSK EQU   LUVFLAGS
LUVVAM   EQU   LUVFLAGS
LUVGENP  EQU   LUVENTRY+20
LUVGENNO EQU   LUVENTRY+16
LUVALUE  EQU   LUVENTRY+8
UNITNAME EQU   LUVENTRY
LUVENTLN EQU   LUVHDR+4
LUVENTNO EQU   LUVHDR
RIMMASK  EQU   RIMTABLE+8
RIMID    EQU   RIMTABLE
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00075 EQU   @RC00072
@RC00110 EQU   @RC00108
@RC00125 EQU   @RC00108
@RC00131 EQU   @RC00108
@RF00130 EQU   @RC00108
@RT00103 EQU   @RC00100
@RC00172 EQU   @RC00170
@RC00224 EQU   @RC00196
@RC00293 EQU   @RC00291
BITOFF   EQU   @EL00002
@RF00079 EQU   @RC00075
@ENDDATA EQU   *
         END   IEFAB475,(C'PLS1116',0701,75090)
