* /*  START OF SPECIFICATIONS ****
*
*01*  MODULE NAME = IEAVRT02
*
*02*    CSECT-NAME = IEAVRT02
*
*01*  DESCRIPTIVE NAME = TIMER SUPERVISION SETDIE ROUTINE
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS = NEW
*
*01*  FUNCTION = WILL INITIALIZE A SYSTEM PROGRAM SUPPLIED TQE AND
*                ENQUEUE IT UPON THE SYSTEM'S REAL TIME QUEUE. THE TQE
*                WILL HAVE BIT TQEDIE ON TO DISTINGUISH IT FROM STIMER
*                BUILT TQE'S. THE TIMER SUPERVISION SLIH (MODULE
*                IEAVRTI0) WILL RECOGNIZE THESE TQE'S AND GIVE THE
*                SPECIFIED EXIT ROUTINE (CALLED A DIE) CONTROL DIRECTLY
*
*02*    OPERATION = THE MAIN ENTRY POINT TO THIS MODULE IS IEAVRDIE.
*                   WHEN ENTERED, IT WILL SAVE REGISTERS 2 THRU 12 AND
*                   14 IN THE SUPPLIED TQE. FIELDS TQETQE, TQEFLGS,
*                   TQEFLGS2, AND TQEFLGS3 ARE THEN INITIALIZED.
*                   A STCK CLOCK IS THEN ISSUED AND THIS VALUE IS ADDED
*                   TO THE USER'S INTERVAL IN TQEVAL TO GET THE CLOCK
*                   COMPARATOR VALUE. NOTE - IF THE STCK IS NOT
*                   SUCCESSFUL, ENTRY POINT IEAVROCL IN THIS MODULE
*                   WILL BE USED IN AN ATTEMPT TO GET A VALID TOD CLOCK
*                   READING FROM ANOTHER CPU THAT MIGHT BE IN THE
*                   CONFIGUATION.
*                   AFTER TQEVAL IS CALCULATED, THE DISPATCHER
*                   LOCK IS UNCONDITIONALLY OBTAINED. THE TQE IS THEN
*                   ENQUEUED UPON THE SYSTEM'S REAL TIME QUEUE BY MEANS
*                   ON THE TQE ENQUEUE ROUTINE IN MODULE IEAVRTI0. THE
*                   DISPATCHER LOCK IS THEN RELEASED IF IT WAS NOT
*                   ALREADY HELD BY THE CALLER. RETURN IS THEN MADE TO
*                   THE CALLER.
*
*01*  NOTES = SEE BELOW
*
*02*    DEPENDENCIES = THE DISPATCHER LOCK IS OBTAINED TO ENQUEUE THE
*                      CALLER'S TQE.
*
*03*      CHARACTER CODE DEPENDENCIES = NONE
*
*02*    RESTRICTIONS = NONE
*
*02*    REGISTER CONVENTIONS = REGISTER 1= TQE POINTER (INPUT)
*                              REGISTER 1= PCCA POINTER FOR IEAVROCL
*                              REGISTER 3= CVT POINTER
*                              REGISTER 5= CSD POINTER
*                              REGISTER 6= BASE  REGISTER  FOR SETDIE
*                              REGISTER 13= BASE REGISTER FOR IEAVROCL
*                              REGISTER 15= RETURN CODE REGISTER
*
*02*    PATCH LABEL = NONE
*
*01*  MODULE TYPE = BAL CSECT
*
*02*    PROCESSOR = ASSEM
*
*02*    MODULE SIZE = APPROXIMATELY 300 BYTES
*
*02*    ATTRIBUTES = NUCLEUS
*                    SUPERVISOR MODE
*                    PROTECT KEY ZERO
*                    REFRESHABLE
*
*01*  ENTRY POINT = IEAVRDIE (FIRST OF THREE)
*
*02*    PURPOSE =     MAIN ENTRY POINT FOR THE SETDIE FUNCTION
*
*02*    LINKAGE =     BRANCH ENTERED BY CALLER. THE ENTRY POINT IS IN
*                     FIELD TPCSDIE IN THE TPC.
*
*02*    INPUT =       1. SUPERVISOR STATE
*                     2. KEY ZERO
*                     3. REGISTER 1 = TQE ADDRESS. THE TQE MUST BE 128
*                                     BYTES IN SQA. THE USER MUST
*                                     SUPPLY HIS DIE ADDRESS IN TQEEXIT
*                                     AND HIS INTERVAL IN TQEVAL.
*                     4. REGISTERS 2 THRU 12 = PARAMATER REGISTERS
*                                              FOR DIE ENTRY.
*                     5. REGISTER 14= RETURN ADDRESS
*
*02*    OUTPUT =      1. RETURN CODE IN REGISTER 15
*                          0 = TQE WAS SUCCESSFULLY ENQUEUED
*                          4 = FAILURE - TQE NOT ENQUEUED
*
*02*    REGISTERS SAVED/RESTORED = REGISTERS 1 THRU 10
*
*01*  ENTRY POINT = IEAVROCL (SECOND OF THREE)
*
*02*    PURPOSE =     TO OBTAIN THE CORRECT TOD IF THERE EXISTS AT
*                     LEAST ONE USABLE TOD CLOCK IN THE SYSTEM.
*
*02*    LINKAGE =     BRANCH ENTERED BY CALLER. THE ENTRY POINT IS IN
*                     FEALD TPCOCL IN THE TPC.
*
*02*    INPUT =       1. SUPERVISOR STATE
*                     2. KEY ZERO
*                     3. REGISTER 11 = ADDRESS OF 8 BYTE STCK AREA.
*                                      THIS AREA MUST BE ADDRESSABLE
*                                      FROM ANY MEMORY.
*                     4. REGISTER 14= RETURN ADDRESS
*
*02*    OUTPUT =      TOD CLOCK VALUE IN SUPPLIED AREA IF SUCCESSFUL.
*                     ZEROS IN AREA IF NOT SUCCESSFUL.
*
*02*    REGISTERS SAVED/RESTORED = REGISTERS 4 THRU 11
*
*01*  ENTRY POINT = IEAVRTAP (THIRD OF THREE)
*
*02*    PURPOSE =     TO CAUSE A CPU TO STORE ITS TOD CLOCK IN
*                     RESPONSE TO A REQUEST FROM IEAVROCL.
*
*02*    LINKAGE =     FROM EMERGENCY SIGNAL SLIH VIA IPC REQUEST.
*
*02*    INPUT =       1. SUPERVISOR STATE
*                     2. KEY 0
*                     3. R1=ADDRESS OF AN 8 BYTE STCK AREA.
*                           THIS AREA MUST BE ADDRESSABLE FROM
*                           ANY MEMORY.
*                     4. R14=RETURN ADDRESS
*                     5. R15=ENTRY POINT
*
*02*    OUTPUT =      TOD CLOCK VALUE IN SUPPLIED AREA IF SUCCESSFUL.
*                     ZEROES IN AREA IF NOT SUCCESSFUL.
*
*01*  EXIT-NORMAL =ALL THREE ENTRY POINTS RETURN TO THE CALLER VIA
*                   THE SUPPLIED RETURN ADDRESS IN REGISTER 14.
*
*01*  EXIT-ERROR = ALL THREE ENTRY POINTS RETURN TO THE CALLER AS IN
*                  THE NORMAL CASE EVEN IF THE REQUESTED FUNCTION
*                  COULD NOT BE PERFORMED. AN APPROPRIATE ERROR
*                  INDICATOR IS PROVIDED HOWEVER - SEE OUTPUT FOR
*                  EACH ENTRY POINT. THERE ARE NO ABEND EXITS.
*
*01*  EXTERNAL REFERENCES = SEE BELOW
*
*02*    ROUTINES =    1. LOCK MGR  - TO OBTAIN AND RELEASE DISP LOCK
*                     2. IPC       - TO SIGNAL OTHER CPUS TO DO STCK
*
*02*    CTL BLKS =    1. TPC (READ)
*                     2. CVT (READ)
*                     3. PCCAVT (READ)
*                     4. PCCA (READ)
*                     5. TQE (READ/WRITE)
*                     6. CSD (READ)
*                     7. PSA (READ)
*
*01*  MACROS USED = SEE BELOW
*
*02*    EXECUTABLE =  1. SETLOCK
*                     2. RISGNL
*
*02*    NON-EXECUTABL= 1. CVT
*                     2. IHAPCCAT
*                     3. IHAPCCA
*                     4. IEAVVTPC
*                     5. IHATQE
*                     6. IHACSD
*                     7. IHAPSA
*                     8. MODID
*
*01* CHANGE ACTIVITY = Z40FPYB
*
*01* MESSAGES = NONE
*
*01* ABEND CODES = NONE
*
**** END OF SPECIFICATIONS ** */
         EJECT
***********************************************************************
*                                                                     *
*                 START SETDIE SERVICE ROUTINE CSECT                  *
*                                                                     *
***********************************************************************
         SPACE
IEAVRT02 CSECT
         MODID BR=NO
         ENTRY IEAVRDIE            MAIN ENTRY POINT TO SETDIE
         ENTRY IEAVROCL            ENTRY POINT TO OTHER CLOCK ROUTINE
         SPACE 5
*                   ***************************************************
*                   *                                                 *
*                   *              REGISTER EQUATES                   *
*                   *                                                 *
*                   ***************************************************
         SPACE
R0       EQU   0                   WORK REGISTER
R1       EQU   1                   TQE POINTER / PCCA POINTER
R2       EQU   2                   WORK REGISTER
R3       EQU   3                   CVT POINTER
R4       EQU   4                   WORK REGISTER
R5       EQU   5                   CSD POINTER
R6       EQU   6                   BASE REGISTER
R7       EQU   7                   WORK REGISTER
R8       EQU   8                   WORK REGISTER
R9       EQU   9                   WORK REGISTER
R10      EQU  10                   WORK REGISTER
R11      EQU  11                   SETLOCK REGISTER
R12      EQU  12                   SETLOCK REGISTER
R13      EQU  13                   SETLOCK REGISTER
R14      EQU  14                   RETURN ADDRESS REGISTER
R15      EQU  15                   RETURN CODE REGISTER
         SPACE 5
*                   ***************************************************
*                   *                                                 *
*                   *              MISCELLANEOUS EQUATES              *
*                   *                                                 *
*                   ***************************************************
         SPACE
ZERO     EQU   0                   ZERO
TWO      EQU   2                   TWO
FOUR     EQU   4                   FOUR
         SPACE 5
*                   ***************************************************
*                   *                                                 *
*                   *                  USINGS                         *
*                   *                                                 *
*                   ***************************************************
         SPACE
         USING TQE,R1              R1=TQE ADDRESS ABILITY
         USING CVT,R3              R3=CVT  ADDRESSABILITY
         USING CSD,R5              R5=CSD ADDRESSABILITY
         USING BASEDIE,R6          R6=BASE REGISTER FOR EP IEAVRDIE
         USING BASEOCL,R13         R13=BASE REGISTER FOR EP IEAVROCL
         SPACE 5
*                   ***************************************************
*                   *                                                 *
*                   *        START SETDIE (IEAVRDIE) CODE             *
*                   *                                                 *
*                   ***************************************************
         SPACE
IEAVRDIE STM   R2,R12,TQEDREGS     SAVE REGS 2-12 FOR ENTRY TO DIE
         ST    R14,TQERSAVE        SAVE RETURN ADDRESS FOR LATER RETURN
         BALR  R6,ZERO             SET BASE REGISTER FOR SETDIE
BASEDIE  MVC   TQETQE(FOUR),IDTQE  INITIALIZE TQE NAME IN TQE
         OI    TQEFLGS,TQEOFF+TQETYPE+TQEXITSP    INDICATE TQE OFF QUE,
*                                                 REAL TYPE, EXIT SPC.
         OI    TQEFLGS2,TQEUSER    INDICATE USER TYPE TQE
         OI    TQEFLGS3,TQEDIE     INDICATE DIE TQE
         STCK  TQESTCK             GET TIME-OF-DAY FROM TOD CLOCK
         BZ    HAVETOD             SUCCESSFUL? TO HAVETOD IF YES.
         LA    R11,TQESTCK         NO - SET STCK AREA PTR FOR IEAVROCL
         LR    R7,R1               SAVE TQE POINTER ACROSS IEAVROCL
         BAL   R14,IEAVROCL        GET TOD  FROM OTHER CPU
         LR    R1,R7               RESTORE TQE  POINTER
HAVETOD  L     R3,CVTPTR           NOW CHECK CLOCK COMPARATORS
         L     R5,CVTCSD           SET CSD ADDRESSABILITY
         L     R7,CSDGDCC          GET COUNT OF USABLE CLK COMPARATORS
         LTR   R7,R7               ANY USABLE CLOCK COMPARATORS?
         BNZ   LASTCHK             YES  - CONTINUE AT LASTCHK
         XC    TQESTCK(FOUR),TQESTCK     NO - INDICATE ERROR
LASTCHK  L     R7,TQESTCK          FINAL CLOCK TEST....
         LTR   R7,R7               HAVE CORRECT TOD+ CLK  COMP AVAIL?
         BNZ   CLOCKSOK            YES - CONTINUE AT CLOCKSOK
         LA    R15,FOUR            NO  - SET  ERROR RETURN CODE  TO 4
         LM    R2,R12,TQEDREGS     RESTORE  CALLER'S  REGS  2 THRU  12
         L     R14,TQERSAVE        RESTORE RETURN ADDRESS  TO CALLER
         BR    R14                 ERROR RETURN - RC=4
CLOCKSOK LM    R7,R8,TQEVAL        YES, CALCULATE TQEVAL
         AL    R8,TQESTCKR         TQEVAL= USER INTERVAL + TQESTCK
         BC    12,ADDLEFT              DO
         AL    R7,KONE                 DO
ADDLEFT  AL    R7,TQESTCKL             DO
         STM   R7,R8,TQEVAL            DO
GETDISP  SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,RELATED=(RELDISP)
         LR    R7,R13              SAVE SETLOCK RETURN CODE
         L     R15,CVTQTE00        GET TQE ENQUEUE ENTRY POINT
         BALR  R2,R15              ENQUEUE TQE ONTO REAL TIME QUEUE
         LR    R13,R7              RESTORE SETLOCK RETURN CODE
         LM    R2,R12,TQEDREGS     RESTORE CALLER REGISTERS 2-12
         SR    R15,R15             SET UP  FOR RETURN CODE ZERO
         L     R14,TQERSAVE        SAVE RETURN ADDRESS- CAN'T RELY ON
         LTR   R13,R13             TQE FIELDS ONCE DISP LK IS RELEASED
         BNZ   0(R14)              DID SETDIE GET DISP LK? NO- RETURN
         LR    R0,R14              SAVE RET ADDR ACROSS SETLOCK
RELDISP  SETLOCK RELEASE,TYPE=DISP,RELATED=(GETDISP)
         LR    R14,R0              SET RETURN ADDRESS
RETURN   BR    R14                 NORMAL RETURN - RC=0
         SPACE 5
*                   ***************************************************
*                   *                                                 *
*                   *              IEAVRDIE CONSTANTS                 *
*                   *                                                 *
*                   ***************************************************
         SPACE
KONE     DC    F'1'                CONSTANT ONE
IDTQE    DC    C' TQE'             TQE CONTROL BLOCK ID
         SPACE 5
*                   ***************************************************
*                   *                                                 *
*                   *         START IEAVROCL  CODE                    *
*                   *                                                 *
*                   ***************************************************
         SPACE
         USING PCCA,R1
IEAVROCL BALR  R13,ZERO            SET BASE REGISTER FOR IEAVROCL
BASEOCL  LR    R2,R14              SAVE CALLER'S RETURN ADDRESS
         XC    0(8,R11),0(R11)     CLEAR STCK AREA
         LA    R12,IEAVRTAP        SET R12 TO SHOULDER TAP RTN ADDRESS
         L     R3,CVTPTR           GET CVT ADDRESS
         LH    R3,CVTMAXMP         GET MAXIMUM NO OF CPU'S  LESS ONE
         SLA   R3,TWO              MULTIPLY BY FOUR TO INDEX PCCAT00P
NEXTPCCA L     R1,CVTPTR           GET CVT ADDRESS
         L     R1,CVTPCCAT-CVT(0,R1)    GET ADDRESS OF PCCAT00P
         L     R1,0(R1,R3)         GET PCCA ADDRESS
         LTR   R1,R1               IS THERE A PCCA FOR THIS SLOT?
         BZ    TODTEST             NO- GO TO TODTEST
         TM    PCCATODE,PCCANUTD   YES- IS TOD CLOCK FOR CPU USABLE?
         BNZ   TODTEST             NO- GO TO TODTEST
         RISGNL SERIAL,CPU=(1),EP=(12),PARM=(11)
TODTEST  SR    R1,R1               WAS STCK  BY OTHER CPU
         CL    R1,0(R11)           SUCCESSFUL?
         BZ    ENDTEST             NO  - GO TO ENDTEST
         SR    R3,R3               YES - INDICATE END OF SHLDR TAPPING
ENDTEST  LTR   R3,R3               END OF SHOULDER  TAPPING?
         BZ    0(R2)               YES- EXIT TO CALLER
         LA    R1,FOUR             NO
         SR    R3,R1               REDUCE PCCAT00P INDEX BY FOUR AND
         B     NEXTPCCA            LOOP BACK TO GET NEXT PCCA
         DROP  R1
         USING TQE,R1              RESTORE TQE ADDRESSABILITY
         SPACE 5
*                   ***************************************************
*                   *                                                 *
*                   *              START TAPCLOCK (IEAVRTAP) CODE)    *
*                   *                                                 *
*                   ***************************************************
         SPACE
IEAVRTAP STCK  0(R1)               STORE TOD CLOCK INTO SUPPLIED AREA
         BZ    0(R14)              RETURN DIRECTLY IF SUCCESSFUL
         XC    0(8,R1),0(R1)       CLEAR AREA IF NOT SUCCESSFUL
         BR    R14                 RETURN
         EJECT
         IHAPSA
          EJECT
         CVT   DSECT=YES
         EJECT
         IHAPCCAT
         EJECT
         IHAPCCA
         EJECT
         IHACSD
         EJECT
         IEAVVTPC
         EJECT
         IHATQE
          EJECT
*/*IEAVRT02: CHART (AMODE,AREF)*/
*/* HEADER
*/* TIMER SUPERVISION
*/*
*/* SETDIE SERVICE ROUTINE
*/* MODULE IEAVRT02                               PAGE # */
*/* E SETDIE (ENTRY POINT IEAVRDIE)*/
*/* COMMENT (1,3) INPUT- R1=TQE ADDRESS*/
*/* COMMENT (2,3)  R2 THRU R12=PARM REGS*/
*/* COMMENT (3,3)  R14=RETURN ADDRESS  */
*/* COMMENT (4,3)  SUPV STATE + KEY 0  */
*/* COMMENT (12,2) DESTROYS REGS 11 THRU 0*/
*/* P PUT REGISTERS 2 THRU 12 INTO TQEDREGS*/
*/* P SAVE CALLER'S RETURN ADDRESS (R14) IN TQERSAVE*/
*/* P SET BASE REGISTER (SET R6 TO ADDRESS OF BASEDIE)*/
*/*BASEDIE: P SET TQETQE=TQE SET TQEFLGS= 87 SET TQEFLGS2=40
*/*SET TQEFLGS3=80*/
*/* COMMENT (2,3) INITIALIZE USER'S TQE*/
*/* P GET CURRENT TIME OF DAY (STCK INTO TQESTCK)*/
*/* COMMENT (2,4) NOW GET TOD TO */
*/* COMMENT (3,4) CALCULATE TQEVAL*/
*/* D (YES,HAVETOD,NO,) STCK SUCCESSFUL? (CONDITION CODE =0)*/
*/* P SET R11= ADDRESS OF TQESTCK - NEEDED AS INPUT TO IEAVROCL*/
*/* P SAVE THE TQE POINTER (SET R7=R1)*/
*/* S IEAVROCL: DO STCK FROM OTHER CPU IF ANY EXIST*/
*/* COMMENT (12,3) IF STCK FROM OTHER CPU*/
*/* COMMENT (13,3) WAS SUCCESSFUL, TQESTCK*/
*/* COMMENT (14,3) WILL BE NON ZERO*/
*/* P RESTORE TQE POINTER (SET R1=R7)*/
*/*HAVETOD: D (YES,LASTCHK,NO,) ANY GOOD CLOCK COMP IN SYS?
*/*(CSDGDCC >0)*/
*/* P INDICATE NEEDED CLOCK NOT AVAILABLE (SET TQESTCK =0)*/
*/*LASTCHK: D (YES,CLOCKSOK,NO,) NEEDED CLOCKS AVAILABLE? (TQESTCK
*/*^=0)*/
*/* P SET RETURN CODE IN R15 TO 4*/
*/* P RESTORE CALLER'S REGISTERS 2 THRU 12 FROM TQEDREGS*/
*/* P  SET R14=CALLER'S RETURN ADDRESS FROM TQERSAVE*/
*/* R RETURN TO CALLER VIA R14*/
*/*CLOCKSOK: P SET TQEVAL TO CLK COMP VALUE OF INTERRUPT (SET
*/*TQEVAL= TQEVAL+TQESTCK)*/
*/*GETDISP: L SETLOCK: OBTAIN, TYPE=DISP, MODE=UNCOND*/
*/* P SAVE SETLOCK RETURN CODE (SET R7=R13)*/
*/* L ENQTQE: ENQUEUE USER'S TQE ONTO REAL TIME QUEUE */
*/* P RESTORE SETLOCK RETURN CODE (SET R13=R7)*/
*/* P RESTORE CALLER'S REGISTERS 2 THRU 12 FROM TQEDREGS*/
*/* COMMENT (1,4) MUST NOW RESTORE INFO*/
*/* COMMENT (2,4) SAVED IN TQE- ONCE*/
*/* COMMENT (3,4) ENABLED, INFO IN TQE*/
*/* COMMENT (4,4) IS NO LONGER STABLE*/
*/* P SET RETURN CODE IN R15 TO ZERO*/
*/* P SAVE CALLER'S RETURN ADDRESS IN R14 (SET R14=TQERSAVE)*/
*/* D (YES,,NO,%SL) CALLER ALREADY OWN DISP LOCK? (R13 NOT ZERO)*/
*/* R RETURN TO CALLER VIA R14*/
*/*%SL: P SAVE RETURN ADDRESS ACROSS SETLOCK (R0=R14)*/
*/*RELDISP: L SETLOCK: RELEASE, TYPE=DISP*/
*/* COMMENT (1,5) RELEASE OF DISP LOCK*/
*/* COMMENT (2,5) WILL CAUSE EXTERNAL*/
*/* COMMENT (3,5) INTERRUPTS TO BE ENB.*/
*/* COMMENT (12,3) NOTE- SETLOCK DESTROYS*/
*/* COMMENT (13,3) REGISTERS 11 THRU 14*/
*/* P RESTORE RETURN ADDRESS IN R14 FROM R0*/
*/*RETURN: R RETURN TO CALLER VIA R14*/
*/* E IEAVROCL*/
*/* COMMENT (1,2) INPUT-R11=POINTER TO STCK*/
*/* COMMENT (2,2) AREA-DBL WORD ADDRESSABLE*/
*/* COMMENT (3,2) FROM ANY MEM. R14=RET ADR*/
*/* COMMENT (12,2) OUTPUT- R4-R11 PRESERVED*/
*/* COMMENT (13,2) TOD IN AREA IF SUCCESSFUL*/
*/* COMMENT (14,2) 0 IN AREA IF FAILURE*/
*/* P SET BASE REGISTER R13*/
*/* P SAVE RETURN ADDRESS IN R2 (SET R2=R14)*/
*/* P CLEAR USER SUPPLIED STCK AREA POINTED TO BY R11*/
*/* COMMENT (12,3) WILL GET PGM CK IF AREA*/
*/* COMMENT (13,3) NOT IN CALLER'S KEY*/
*/* P SET R12= ADDR OF TAPCLOCK ROUTINE (FOR INPUT TO RISGNL)*/
*/* P SET R3=4*(MAX NUMBER OF CPUS -1)  (USE CVTMAXMP)*/
*/*NEXTPCCA: P SET R1= PCCA ADDR (VIA PCCAT00P ENTRY USING R3 AS
*/*INDEX)*/
*/* D (YES,,NO,TODTEST) ANY PCCA FOR THIS ENTRY? (R1 NOT ZERO)*/
*/* D (YES,,NO,TODTEST) CPU HAVE A GOOD TOD CLOCK? (PCCANUTD =0)*/
*/* L RISGNL: SERIAL, CPU=(1), EP=(12), PARM=(11)*/
*/* COMMENT (1,5) TRY TO GET TOD*/
*/* COMMENT (2,5) FROM OTHER CPU*/
*/* COMMENT (12,4) STCK AREA WILL BE NON*/
*/* COMMENT (13,4) ZERO IF SUCCESSFUL*/
*/*TODTEST: D (YES,,NO,ENDTEST)GOT TOD? (STCK AREA NOT ZERO)*/
*/* P INDICATE PROCESSING SHOULD END (SET R3=0)*/
*/*ENDTEST: D (YES,,NO,%EX) SHOULD PROCESSING END? (R3=0)*/
*/* R RETURN TO CALLER VIA R2*/
*/*%EX: P (,NEXTPCCA) ADJUST PCCAT00P INDEX FOR NEXT ENTRY (R3=R3-4)*/
*/* E TAPCLOCK (ENTRY POINT IEAVRTAP)*/
*/* COMMENT (1,2) INPUT- R1=STCK AREA ADDR*/
*/* COMMENT (2,2) R14=RET ADDR, R15=E.P.*/
*/* COMMENT (3,2) SUPV STATE, KEY ZERO*/
*/* COMMENT (12,2) OUTPUT- STCK AREA NON*/
*/* COMMENT (13,2) ZERO IF SUCCESSFUL-*/
*/* COMMENT (14,2) OTHERWISE ZERO*/
*/* P STCK INTO SUPPLIED AREA POINTED TO BY R1*/
*/* D (YES,,NO,%CLR) STCK SUCCESSFUL? (CONDITION CODE = ZERO)*/
*/* R RETURN TO CALLER VIA R14*/
*/*%CLR: P INDICATE FAILURE (SET STCK AREA TO ZERO)*/
*/* R RETURN TO CALLER VIA R14*/
*/*IEAVRT02: END FL/1 FINISH*/
         END   IEAVRT02         END OF MODULE
