         COPY IKJEGSIO
IKJEGSYM CSECT
SYM      TITLE 'IKJEGSYM - TSO TEST ASSEMBLER SYMBOL PROCESSOR'
*C352800,A889000                                               @YA00074
*C258000                                                       @YM07131
*C180700              WRONG MSGID R3                           @ZA*****
*                     R14 IS ZERO FOR BR RETURN INST           @ZA09494
*C066500                                                       @ZA27196
***********************************************************************
*                                                                     *
* STATUS --                                                           *
*    CHANGE LEVEL 00, VERSION NUMBER 01, OS/VS2                       *
*                                                                     *
* FUNCTION/OPERATION --                                               *
*    THE TEST SYMBOL PROCESSOR PROVIDES MAIN STORAGE ADDRESSES,       *
*    ASSEMBLER SYMBOL ATTRIBUTES AND CSECT NAMES FOR SYMBOLIC         *
*    DEBUGGING.                                                       *
*    BASICALLY MAIN STORAGE ADDRESSES ARE FOUND BY ADDING UP THE      *
*    MODULES LOADED MAIN STORAGE ADDRESS, CSECT DISPLACEMENT INTO     *
*    THE MODULE AND SYMBOL DISPLACEMENT INTO THE CSECT.               *
*    CSECT NAMES AND DISPLACEMENTS ARE FOUND IN THE CESD RECORDS      *
*    FOR THE MODULE.  IF IT IS A LOAD MODULE THEY RESIDE ON           *
*    SECONDARY STORAGE. IF IT IS A OBJECT MODULE LOADED VIA THE       *
*    OS LOADER THE CESD RECORDS ARE IN MAIN STORAGE.                  *
*    ASSEMBLER SYMBOL ATTRIBUTES AND DISPLACEMENTS ARE ONLY           *
*    AVAILIABLE FOR LOAD MODULES AND THE TEST PARM MUST BE PASSED     *
*    TO THE ASSEMBLER AND LINKAGE EDITOR TO OBTAIN THEM.              *
*    CESD AND SYMBOL INFORMATION CAN ONLY BE OBTAINED FROM LOAD       *
*    MODULES IF SVC 061 HAS PROCESSED DURING THEIR FETCH TIME.        *
*    CESD INFORMATION MAY BE OBTAINED FROM AN OBJECT MODULE WHEN      *
*    CHAINNED FROM THE P/P TCB AND THE CDE INDICATES LOADED BY        *
*    THE OS LOADER AND THAT CESD RECORDS ARE PRESENT.                 *
*                                                                     *
* ENTRY POINTS --                                                     *
*         IKJEGSYM     ONLY ENTRY POINT TO IKJEGSYM                   *
*                                                                     *
* INPUT --                                                            *
*    REGISTER 1 POINTS TO A PDE CONTAINING THE FOLLOWING ACCEPTED     *
*    ARGUMENTS                                                        *
*    LOADNAME ENTRYNAME                                               *
*    RETURN MAIN STORAGE ADDRESS IN USER FIELD OF PDE                 *
*    LOADNAME ENTRYNAME SYMBOL                                        *
*    RETURN SYMINFO BLOCK POINTED TO FROM USER FIELD                  *
*    IN PDE WITH THE HIGH ORDER BYTE EQUAL TO X'80'                   *
*    LOADNAME           OFFSET                                        *
*    RETURN CSECT NAME POINTED TO FROM PTR TO ENTRYNAME               *
*    FIELD IN PDE                                                     *
*    MISSING FIELDS ARE FILLED IN FROM THE CURRENTLY QUALIFIED        *
*    LOADNAME.ENTRYNAME OR IN THE CASE OF ENTRYNAME, DEFAULTED        *
*    TO THE FIRST CSECT OF THE MODULE                                 *
*                                                                     *
* OUTPUT --                                                           *
*    FILLED IN PDE, POSSIBLE SYMINFO BLOCK AND RETURN CODES           *
*                                                                     *
* EXTERNAL REFERENCES --                                              *
*         ESATE      - ESTABLISH ABEND RECOVERY EXIT RTN (IKJEGSTA)   *
*         IKJEGIO    - ERROR MESSAGES TO TERMINAL                     *
*         DAIR       - ALLOCATE SYS1.LINKLIB                          *
*         GETMAIN    - FOR WORK AREA, SYMINFO BLK, DAIR PARM LIST     *
*         FREEMAIN   - DAIR PARM LIST, STAE WORK AREA                 *
*         OPEN       - A BPAM DCB FOR READING SYMBOLS                 *
*         CLOSE      - THE DCB FOR READING SYMBOLS                    *
*         READ       - SYMBOLS FROM SECONDARY STORAGE                 *
*         CHECK      - VERIFY READ, WAIT FOR READ TO COMPLETE         *
*         NOTE       - TTR OF FIRST CESD RECORD IN LOADNAME MEMBER    *
*         FIND       - POINT TO SYMBOL RCDS IN LOADNAME MEMBER OF PDS *
*         SYNADAF    - FOR AN I/O ERROR, OBTAIN SYSTEM INFO MESG      *
*         SYNADRLS   - RELEASE SYNADAF WORK AREA                      *
*                                                                     *
* EXITS, NORMAL --                                                    *
*         RETURN TO CALLER WITH RETURN CODES                          *
*         0     SUCCESSFULLY COMPLETED                                *
*         4     PASSED SYMBOLIC NAME NOT FOUND, EITHER LOADNAME       *
*         ENTRYNAME OR SYMBOLNAME, OR NO CORE AVAILABLE               *
*         8     UNABLE TO RESOLVE SYMBOLICS AT THIS TIME,             *
*         CANNOT ISSUE STAE, OPEN DCB, OR ALLOCATE LINKLIB            *
*         12     AN I/O ERROR HAS OCCURRED WHILE READING SECONDARY    *
*         STORAGE                                                     *
*         16     AN ATTENTION OR LOGON/LOGOFF ECB HAS BEEN POSTED     *
*         20     AN ABEND HAS BEEN INTERCEPTED BY STAE                *
*         MESSAGES     - MESSAGES ARE SENT TO THE TERMINAL IF AN I/O  *
*         ERROR HAS OCURRED WHILE READING SECONDARY STORAGE           *
*         OR WHEN SYMMESG SWITCH, EQUATED TO B'00100000', IN          *
*         THE TSTFLGS3 FIELD OF TCOMTAB DSECT IS OFF                  *
*         NO MESSAGES ARE PRINTED WHEN THE REQUEST IS TO RESOLVE      *
*         A PASSED OFFSET                                             *
*                                                                     *
* EXITS, ERROR --                                                     *
*         N/A                                                         *
*                                                                     *
* TABLES/WORK AREAS --                                                *
*    TCOMTAB    - COMMUNICATIONS DSECT FOR ALL OF TEST                *
*    PDE        - CNTRL BLOCK CONTAINNING INPUTED ARGUMENTS           *
*    SYM RCDS   - ON SECONDARY STORAGE                                *
*    CESD RCDS  - ON SECONDARY OR IN MAIN STORAGE                     *
*    SYMTAB     - INCORE SYMBOL TABLE                                 *
*    SYMWORK    - INTERNAL WORK AREA                                  *
*    SVCINFO    - TABLE OF SAVED LOAD MODULE INFO BUILT BY            *
*    TESTRAN SVC 61 (IN DECIMAL)                                      *
*    SYMINFO    - ANSWER BLOCK RETURNED FOR A SYMBOL REQUEST          *
*                                                                     *
* ATTRIBUTES --                                                       *
*    REENTRANT AND REFRESHABLE                                        *
*                                                                     *
* CHARACTER CODE DEPENDENCY --                                        *
*    RE-ASSEMBLY IS REQUIRED FOR CHANGE OF CODE                       *
*                                                                     *
* NOTES --                                                            *
*    THE SYMBOL PROCESSOR IS SET UP FOR BEST RESPONSE TIME WHILE      *
*    RESOLVING SYMBOLS PLACED IN THE INCORE SYMBOL TABLE AND THEN     *
*    PREFIXED WITH THE CURRENTLY QUALIFIED LOADNAME ENTRYNAME.        *
*                                                                     *
***********************************************************************
         EJECT
         SPACE
*        REGISTER EQUATES
*
PARMREG0 EQU   0                            REGISTER 0
PARMREG1 EQU   1                            REGISTER 1
PDEB     EQU   2                            CONTAIN ADDRESS PASSED PDE
WORK1    EQU   3                            REGISTER 3
WORK2    EQU   4                            REGISTER 4
WORK3    EQU   5                            REGISTER 5
WORK4    EQU   6                            REGISTER 6
WORK5    EQU   7                            REGISTER 7
WORK6    EQU   8                            REGISTER 8
TCOMTABB EQU   9                            BASE FOR TCOMTAB DSECT
INFOBLKB EQU   10                           BASE FOR INFO BLOCK
SYMB2    EQU   11                           BASE FOR IKJEGMYS CSECT
SYMB     EQU   12                           BASE FOR IKJEGSYM CSECT
SYMWKB   EQU   13                           BASE FOR SYM WORK AREA
RETURN   EQU   14                           REGISTER 14
RETCODE  EQU   15                           REGISTER 15
*
*        EQUATES FOR SI INSTRUCTION IMEDIATE OPERANDS
*
V00      EQU   X'00'                        HEX 00
V01      EQU   X'01'                        HEX 01
V02      EQU   X'02'                        HEX 02
V03      EQU   X'03'                        HEX 03
V04      EQU   X'04'                        HEX 04
V07      EQU   X'07'                        HEX 07
V08      EQU   X'08'                        HEX 08
V0F      EQU   X'0F'                        HEX 0F
V10      EQU   X'10'                        HEX 10
V20      EQU   X'20'                        HEX 20
V40      EQU   X'40'                        HEX 40
V60      EQU   X'60'                        HEX 60
V80      EQU   X'80'                        HEX 80
V0C      EQU   X'0C'                        HEX 0C
V50      EQU   X'50'                        HEX 50
V7F      EQU   X'7F'                        HEX 7F
V90      EQU   X'90'                        HEX 90
V91      EQU   X'91'                        HEX 91
V9F      EQU   X'9F'                        HEX 9F
VBF      EQU   X'BF'                        HEX BF
VC0      EQU   X'C0'                        HEX C0
VDF      EQU   X'DF'                        HEX DF
VE0      EQU   X'E0'                        HEX E0
VE2      EQU   X'E2'                        HEX E2
VEF      EQU   X'EF'                        HEX EF
VF0      EQU   X'F0'                        HEX F0
VFF      EQU   X'FF'                        HEX FF
LSYMRCD  EQU   C'S'                         IDENTIFY LOGICAL SYM RCD
*
*        NUMBER EQUATES
*
N0       EQU   0                            DECIMAL 0
N1       EQU   1                            DECIMAL 1
N2       EQU   2                            DECIMAL 2
N3       EQU   3                            DECIMAL 3
N4       EQU   4                            DECIMAL 4
N5       EQU   5                            DECIMAL 5
N6       EQU   6                            DECIMAL 6
N7       EQU   7                            DECIMAL 7
N8       EQU   8                            DECIMAL 8
N9       EQU   9                            DECIMAL 9
N10      EQU   10                           DECIMAL 10
N11      EQU   11                           DECIMAL 11
N12      EQU   12                           DECIMAL 12
N13      EQU   13                           DECIMAL 13
N14      EQU   14                           DECIMAL 14
N15      EQU   15                           DECIMAL 15
N16      EQU   16                           DECIMAL 16
N17      EQU   17                           DECIMAL 17
N18      EQU   18                           DECIMAL 18
N20      EQU   20                           DECIMAL 20
N21      EQU   21                           DECIMAL 21
N22      EQU   22                           DECIMAL 22
N23      EQU   23                           DECIMAL 23
N24      EQU   24                           DECIMAL 24
N25      EQU   25                           DECIMAL 25
N26      EQU   26                           DECIMAL 26
N28      EQU   28                           DECIMAL 28
N29      EQU   29                           DECIMAL 29
N30      EQU   30                           DECIMAL 30
N31      EQU   31                           DECIMAL 31
N32      EQU   32                           DECIMAL 32
N33      EQU   33                           DECIMAL 33
N34      EQU   34                           DECIMAL 34
N36      EQU   36                           DECIMAL 36
N37      EQU   37                           DECIMAL 37
N38      EQU   38                           DECIMAL 38
N40      EQU   40                           DECIMAL 40
N41      EQU   41                           DECIMAL 41
N42      EQU   42                           DECIMAL 42
N44      EQU   44                           DECIMAL 44
N45      EQU   45                           DECIMAL 45
N46      EQU   46                           DECIMAL 46
N47      EQU   47                           DECIMAL 47
N48      EQU   48                           DECIMAL 48
N49      EQU   49                           DECIMAL 49
N50      EQU   50                           DECIMAL 50
N51      EQU   51                           DECIMAL 51
N52      EQU   52                           DECIMAL 52
N53      EQU   53                           DECIMAL 53
N54      EQU   54                           DECIMAL 54
N56      EQU   56                           DECIMAL 56
N57      EQU   57                           DECIMAL 57
N58      EQU   58                           DECIMAL 58
N59      EQU   59                           DECIMAL 59
N60      EQU   60                           DECIMAL 60
N61      EQU   61                           DECIMAL 61
N62      EQU   62                           DECIMAL 62
N63      EQU   63                           DECIMAL 63
N64      EQU   64                           DECIMAL 64
N65      EQU   65                           DECIMAL 65
N66      EQU   66                           DECIMAL 66
N68      EQU   68                           DECIMAL 68
N69      EQU   69                           DECIMAL 69
N70      EQU   70                           DECIMAL 70
N71      EQU   71                           DECIMAL 71
N72      EQU   72                           DECIMAL 72
N73      EQU   73                           DECIMAL 73
N74      EQU   74                           DECIMAL 74
N75      EQU   75                           DECIMAL 75
N80      EQU   80                           DECIMAL 80
N83      EQU   83                           DECIMAL 83
N88      EQU   88                           DECIMAL 88
N90      EQU   90                           DECIMAL 90
N94      EQU   94                           DECIMAL 94
N100     EQU   100                          DECIMAL 100
N104     EQU   104                          DECIMAL 104
N110     EQU   110                          DECIMAL 110
N120     EQU   120                          DECIMAL 120
N256     EQU   256                          DECIMAL 256
N800     EQU   800                          DECIMAL 800
*
*        CONDITION CODE EQUATES FOR BCR INSTRUCTIONS
*
ZERO     EQU   8                            BRANCH IF ZERO
ONES     EQU   1                            BRANCH IF ONES
NOTZERO  EQU   7                            BRANCH IF NOT ZERO
LOW      EQU   4                            BRANCH IF LOW
         SPACE 3
***********************************************************************
*                                                                     *
*        THIS IS THE ENTRY INITILIZATION AND MAINLINE ROUTINE.        *
*        SUB-ROUTINES ARE USED TO ANALYZE REQUESTS, GATHER INFO       *
*        ABOUT THE REQUEST AND RESOLVE THE REQUEST.                   *
*                                                                     *
***********************************************************************
         SPACE 2
*
*        ENTRY  INITILIZATION
*
         STM   RETURN,SYMB,N12(SYMWKB)      SAVE CALLER'S REGISTERS
         LR    SYMB,RETCODE                 USE ENTRY PT FOR BASE
         USING IKJEGSYM,SYMB                ESTABLISH ADDRESSABILITY
         LR    PDEB,PARMREG1                ADDR OF PASSED PDE
         USING IKJPARMA,PDEB                BASE FOR PDE DSECT
         MVC   PDEUSER(N4),NO2NDMSG         NO 2ND LEV MSG TO CALLER
         USING TCOMTAB,TCOMTABB             BASE FOR TCOMTAB DSECT
         L     WORK1,TSTSYMWK               ADDR OF SYMWORK IN TCOMTAB
         LTR   WORK1,WORK1                  IS IT FIRST ENTRY
         BZ    FIRSTENT                     YES, GO GET CORE-INITILIZE
         ST    WORK1,N8(SYMWKB)             NO, DO LINKAGE CONVENTIONS
         ST    SYMWKB,N4(WORK1)
         LR    SYMWKB,WORK1                 ADDR OF SYMWORK, SAVE AREA
         USING SYMWORK,SYMWKB
         USING INFOBLK,INFOBLKB             BASE FOR INFO BLK DSECT
*
*        BEGIN PROCESSING  -  RESOLVE REQUEST INTO ACTION
*
IKJEGBEG EQU   *
         ST    SYMB,BASEADDR                MY BASE ADDR IN WORK AREA
         L     WORK1,TSTSTAE                STAE EXIT ADDRESS
         LA    PARMREG1,STAELIST            ADDRESS OF ESTAE LIST
         XC    STAELIST(N16),STAELIST       CLEAR ESTAE LIST AREA
         ESTAE  (WORK1),CT,PARAM=LIST,XCTL=NO,RECORD=YES,MF=(E,(1))
         LTR   RETCODE,RETCODE              WAS STAE SUCCESSFUL
SMTSTAE  DS    0H                           SMT TESTCASE LABEL
*                                            INSUFFICIENT CORE TO ISSUE
*                                            STAE-RC FROM SYM IS 4
*                                            TESTCASE ID  TTSTC160
*                                            TESTCASE ID  TEQU4800
         BZ    STAEON                       ACS IS ESTABLISHED
         STC   RETCODE,TSTESTRC             PRESERVE RETURN CODE
         LA    RETCODE,N24                  SET RC TO 24
         B     TOCALL                       RETURN TO CALLER
         SPACE 1
STAEON   DS    0H
         XC    TSTWHR(N4),TSTWHR            LOADED ADDR FIELD TO 0
         TM    PDEFLG3,AFLG                 IS AN ADDR STRING PASSED
         BZ    ONWARD1                      NO, GO ON
         TM    PDEFLG4,SYMADDR              IS A SYMBOL PASSED
         BZ    ONWARD1                      NO, GO ON
         TM    PDEFLG2,CTNAMFLG             IS SYMBOL QUALIFIED
         BO    ONWARD1                      YES, SKIP INCORE SYM TAB
         BAL   RETURN,SINCORES              NO, GO SEARCH INCORE SYMTB
         LTR   RETCODE,RETCODE              WAS THE SYMBOL FOUND
         BZ    FOUNDSYM                     YES, GO BUILD ANSWER BLOCK
ONWARD1  BAL   RETURN,GETINFO               EVALUATE, GET INFO FOR REQ
         MVC   TSTWHR(N4),LOADNAMA          LOADED ADDR OF MOD
         TM    WHATPASS,V02                 WAS A SYMBOL PASSED
         BO    FINDSYM                      YES, GO FIND SYMBOL
         TM    WHATPASS,V01                 WAS AN OFFSET PASSED
         BZ    ENTRYPSD                     NO, GO SEARCH USE ENTRYNAME
         OI    SWSB,V40                     INDICATE SEARCH USE OFFSET
         BAL   RETURN,FINDCESD              GO RESOLVE CESD REQUEST
         B     FENTRY                       FOUND ENTRYNAME DISPLACMENT
*                                           USING ENTRYNAME AS SEARCH
ENTRYPSD OI    SWSB,V20                     SEARCH USING ENTRYNAME
         BAL   RETURN,FINDCESD              GO RESOLVE CESD REQUEST
         B     FOFFSET                      FOUND ENTRYNAME USING
*                                           OFFSET AS THE SEARCH
         SPACE 1
SVCERR3  DS    0H
         TM    TSTFLGS3,SYMMESG             SHOULD WE ISSUE MSG
         BCR   ONES,RETURN                  IF NO, RETURN
         TM    WHATPASS,V01                 WAS AN OFFSET PASSED
         BCR   ONES,RETURN                  IF NO, RETURN
         ST    RETURN,TERMIO14              SAVE RETURN ADDRESS
         LR    WORK3,RETCODE                PUT RETURN CODE IN WORK3
         XC    TSTIOPRM(L'TSTIOPRM),TSTIOPRM  CLEAR IO DYNAM AREA
         IKJEGSIO SVCERR,SVC=(WORK2),ID=SYM30,RC=(WORK3),              *
               MF=(E,TSTIOPRM)
         L     RETURN,TERMIO14              RESTORE RETURN REGISTER
         BR    RETURN                       RETURN TO CALLER
         SPACE 3
***********************************************************************
*                                                                     *
*        THE FOLLOWING SUB ROUTINES ARE SERVICE ROUTINES FOR THE      *
*        MAIN PROCESSING ROUTINES                                     *
*                                                                     *
***********************************************************************
         SPACE 2
*
*        THIS  ROUTINE FILLS IN THE PDE AFTER A SUCCESSFUL SEARCH
*        FOR AN ENTRYNAME USING AN OFFSET AS THE SEARCH ARGUMENT
*
FENTRY   LA    WORK1,ENTRYNAM               ADDR OF FOUND ENTRYNAME
         ST    WORK1,PDECTNAM               RETURN IN THE PASSED PDE
         LA    WORK1,N8                     LENGTH OF PASSED ENTRYNAME
         STH   WORK1,PDELEN2                RETURN IN THE PASSED PDE
         OI    PDEFLG2,CTNAMFLG             INDICATE ENTRYNAME FOUND
         SR    RETCODE,RETCODE              SUCCESSFUL RET CODE=0
         B     TOCALLER                     GO RETURN TO CALLER
*
*        THIS  ROUTINE FILLS IN THE PDE AFTER A SUCCESSFUL SEARCH
*        FOR A LOADED ADDRESS USING AN ENTRYNAME AS THE SEARCH ARGUMENT
*
FOFFSET  L     WORK1,LOADNAMA               LOADED ADDR OF MODULE
         A     WORK1,ENTRNAMD               PLUS DISPL OF ENTRYNAME
         ST    WORK1,PDEUSER                RETURN IN PASSED PDE
         SR    RETCODE,RETCODE              SUCCESSFUL RET CODE=0
         B     TOCALLER                     GO RETURN TO CALLER
*
*        THIS ROUTINE CHECKS THE ATTENTION AND LOGON/LOGOFF ECBS.  IF
*        THEY HAVE BEEN POSTED, SYM RETURNS TO ITS CALLER WITH A
*        RETCODE OF 16.  IF NOT THIS ROUTINE RETURNS TO ITS CALLER
*
CHECKECB L     WORK1,ECBTMPA                ADDRESS OF ATTENTION ECB
         TM    N0(WORK1),V40                HAS ATTENTION ECB BEEN POST
SMTATTN  DS    0H                           SMT TESTCASE LABEL
*                                            ATTN DURING SYM PROCESSING
*                                            RC FROM SYM IS 16
*                                            TESTCASE ID  TTSTC040
         BO    CODE16                       YES, RET TO CALLER
         L     WORK1,ECBLOG                 ADDR OF LOGON/LOGOFF ECB
         TM    N0(WORK1),V40                HAS LOGON/LOGOFF BEEN POSTD
         BCR   ZERO,RETURN                  NO, GO BACK TO WHAT YOU
*                                            WERE DOING
CODE16   LA    RETCODE,N16                  REQ TO END, RETCODE=16
         B     TOCALLER                     GO RETURN TO CALLER
*
*
*        THIS IS THE STAE RETRY ROUTINE.
*
STAERTRY EQU   *
         L     TCOMTABB,CVTPTR              ADDRESS OF CVT
         L     TCOMTABB,CVTTCBP-CVT(TCOMTABB)   NEW, CURRENT TCBS
         L     TCOMTABB,N4(TCOMTABB)        CURRENT TCB IS TEST TCB
         L     TCOMTABB,TCBTRN-TCB(TCOMTABB)    ADDRESS OF TCOMTAB
         L     SYMWKB,TSTSYMWK              ADDR OF MY WORK AREA-TCOMTB
         L     SYMB,BASEADDR                MY BASE REG FROM WORK ARA
DAIRCORE EQU   *
         TM    SWSC,V40                     CORE FOR DAIR PARM LIST
         BZ    CODE20                       NO, GO GIVE RET CODE=20
         L     PARMREG1,ADAIRCOR            YES, GET ADDR OF GOTTEN COR
         FREEMAIN   RC,LV=N100,A=(PARMREG1),SP=N1   FREE DAIR PARM LIST
         LTR   RETCODE,RETCODE              WAS RETURN CODE NONZERO
         BZ    TURNOFF                      IF ZERO, TURNOFF CORE SW
         LA    WORK2,N120                   GET SVC NUMBER
         BAL   RETURN,SVCERR3               GO ISSUE ERROR MESSAGE
**  THERE IS NO REASON TO PUT OUT A MESSAGE HERE IF WE FAIL
** SINCE WE ARE ON OUR WAY OUT ANYHOW
** AND THERE HAS ALREADY BEEN ONE MESSAGE PUT OUT
** NOTE: WE ARE PROCESSING AN ABEND.
         B     CODE20                     SET CODE TO 20 AND RETURN
TURNOFF  EQU   *
         NI    SWSC,VBF                     TURN DAIR CORE SWITCH OFF
CODE20   EQU   *
         NI    TSTFLGS4,VFF-TSTVALCK        TURN OFF INDICATOR
         NI    TSTFLGS4,VFF-TSTRERTN        TURN OFF INDICATOR
         LA    RETCODE,N20                  STAE ENTRY RET CODE
         B     TOCALLER                     GO RETURN
         EJECT
*
*        THIS ROUTINE ISSUES THE IKJEGSIO MACRO TO OUTPUT
*        ERROR MESSAGES TO THE TERMINAL
*
TERMIO   EQU   *
         TM    TSTFLGS3,SYMMESG             SHOULD WE PRINT A MESSAGE
         BCR   ONES,RETURN                  NO, RETURN TO CALLER
         TM    WHATPASS,V01                 WAS AN OFFSET PASSED
         BCR   ONES,RETURN                  YES, RETURN, NO MESSAGE
         SPACE 1
PRINT    DS    0H
         ST    RETURN,TERMIO14              SAVE RETURN ADDRESS
         XC    TSTIOPRM(L'TSTIOPRM),TSTIOPRM  CLEAR IO DYNM AREA
         SLL   WORK5,N2                     MULTIPLY WORK5 BY 4
         B     PRINT2                       GO PRINT A MESSAGE
*
*        THIS ROUTINE RETURNS TO THE CALLER OF IKJEGSYM
*
TOCALLER EQU   *
*        MVC   TSTRETRY(N4),CALRETRY        RESTORE CALLERS STAE RETRY
*        MVC   ABENTAB1(N4),CABENDTB        RESTORE CALLERS ABEND TABLE
         L     SYMWKB,N4(SYMWKB)            ADDR OF CALLERS SAVE AREA
TOCALL   EQU   *
         RETURN    (14,12),,RC=(15)
         SPACE 3
***********************************************************************
*                                                                     *
*        THIS SUB-ROUTINE ANALYZES THE REQUEST AND GATHERS ALL INFO   *
*        AVAILIABLE ABOUT THE MODULE INVOLVED.                        *
*                                                                     *
***********************************************************************
         SPACE 2
GETINFO  XC    WHATPASS(N3),WHATPASS        SET SWITCHES TO ZERO
         LA    INFOBLKB,TINFOBLK            ADDR OF TEMP INFO BLOCK
         MVI   LOADNAME,V40                 BLANK TO TEMP INFO BLOCK
         MVC   LOADNAME+N1(N23),LOADNAME    CHAR INFO TO BLANKS
         XC    LOADNAMA(N32),LOADNAMA       OTHER INFO TO ZEROES
*
*        ANALYZE THE PASSED INFORMATION AND REFLECT THE ARGUMENT FORM
*
         TM    PDEFLG3,AFLG                 IS AN ADDRESS STRING PASSED
         BZ    NOADDRST                     NO, GO CHECK FUTHER
         TM    PDEFLG4,SYMADDR              IS ADDR STRING A SYM REQ
         BZ    OFFSETRQ                     NO, GO CHECK FOR OFFSET
         OI    WHATPASS,VE2                 INDICATE SYMBOL PASSED AND
*                                            ARGUMENT FORM IS
*                                            LOADNAME.ENTRYNAME.SYMBOL
         MVC   PSYMBOL(N8),BLANKS           CLEAR PASSED SYMBOL FIELD
         LH    WORK1,PDELEN3                LENGTH OF SYMBOL
         BCTR  WORK1,N0                     LEN-1 FOR EXECUTE INSTR
         LA    WORK2,PSYMBOL                MOVE TO PASSED SYMBOL FIELD
         L     WORK3,PDEADRPT               MOVE FROM LOCATION
         EX    WORK1,MOVEINST               MOVE SYMBOL TO PSYMBOL
         B     MODINFO                      GO RESOLVE STATUS OF MODULE
OFFSETRQ EQU   *
         OI    WHATPASS,V91                 INDICATE OFFSET PASSED AND
*                                            THE ARGUMENT FORM IS
*                                            LOADNAME    OFFSET
         XC    POFFSET(N4),POFFSET          OFFSET FIELD TO ZEROES
         LH    WORK1,PDELEN3                LENGTH OF OFFSET
         LA    WORK2,POFFSET                MOVE TO LOCATION
         LA    WORK4,N4                     NO. OF BYTES IN A WORD
         SR    WORK4,WORK1                  NO. OF INDEX BYTES-ALIGN
         AR    WORK2,WORK4                  OFFSET IN INFO BLOCK
         L     WORK3,PDEADRPT               MOVE FROM LOCATION
         BCTR  WORK1,N0                     LEN-1 FOR EXECUTE INSTR
         EX    WORK1,MOVEINST               MOVE OFFSET TO POFFSET
         B     MODINFO                      GO RESOLVE STATUS OF MODULE
NOADDRST OI    WHATPASS,VC0                 INDICATE ARGUMENT IS
*                                            LOADNAME.ENTRYNAM
*
*        BUILD AN INFO BLOCK REFLECTING THE MODULE PRESENTLY WORKING
*        WITH
*
MODINFO  TM    WHATPASS,VC0                 IS ARGUMENT L.E OR JUST L
         BO    LE                           ARGUMENT IS L.E, GO RESOLVE
         TM    PDEFLG1,LDNAMFLG             ARGUMENT=L, IS IT PASSED
         BZ    USECURR                      NO, GO GET CURRENT LOADNAME
         OI    WHATPASS,V08                 INDICATE LOADNAME PASSED
         LH    WORK1,PDELEN1                LENGTH OF PASSED LOADNAME
         BCTR  WORK1,N0                     LEN-1 FOR EXECUTE INSTR
         LA    WORK2,TINFOBLK               MOVE TO TEMP INFO BLOCK
         L     WORK3,PDELDNAM               MOVE FROM LOCATION
         EX    WORK1,MOVEINST               MOVE ENTRYNAME TO INFO BLK
         CLC   TINFOBLK(N8),TSTCURLD        IS IT THE CURRENT LOADNAME
         BE    USECURR                      YES, GO USE CURRENT L
         B     FILLBLK                      GO FILL IN TEMP BLOCK
LE       TM    PDEFLG2,CTNAMFLG             IS ENTRYNAME PASSED
         BZ    USECURR                      NO, GO USE CURRENT L.E
         OI    WHATPASS,V04                 INDICATE ENTRYNAME PASSED
         LH    WORK1,PDELEN2                LENGTH OF PASSED ENTRYNAME
         BCTR  WORK1,N0                     LEN-1 FOR EXECUTE INSTR
         LA    WORK2,ENTRYNAM               MOVE TO LOCATION IN INFO BK
         L     WORK3,PDECTNAM               MOVE FROM LOCATION
         EX    WORK1,MOVEINST               MOVE ENTRYNAME TO TEMP INFO
         TM    PDEFLG1,LDNAMFLG             IS LOADNAME PASSED
         BO    ONWARD01                     YES, GO MOVE TO INFO BLK
         MVC   LOADNAME(N8),TSTCURLD        NO, USE CURRENTLY QUALIFIED
         B     ONWARD02                     GO ON
ONWARD01 LH    WORK1,PDELEN1                LENGTH OF PASSED LOADNAME
         BCTR  WORK1,N0                     LEN-1 FOR EXECUTE INSTR
         L     WORK3,PDELDNAM               ADDR OF PASSED LOADNAME
         LA    WORK2,LOADNAME               MOVE TO LOCATION IN INFO BK
         EX    WORK1,MOVEINST               MOVE LOADNAME TO INFO BLOCK
         OI    WHATPASS,V08                 INDICATE LOADNAME PASSED
ONWARD02 CLC   TSTCURLD(N16),TINFOBLK       IS IT CURRENT L.E
         BE    USECURR                      YES, GO USE CURRENT L.E
         LA    INFOBLKB,TINFOBLK            USE TEMP BLK FOR BASE
         B     FILLBLK                      GO FILL IN TEMP BLOCK
USECURR  LA    INFOBLKB,CINFOBLK            USE CURRENT INFO BLOCK
         CLC   TSTCURLD(N16),CINFOBLK       IS CURR L.E KNOWN BY SYM
         BNE   GETCURR                      NO, GO CLEAR AND RE-BUILD
         CLC   TCBADDR(N4),PPTCB            CURRENT ON SAME TCB
         BNE   GETCURR                      NO, GO CLEAR AND RE-BUILD
         L     WORK1,TSTSYMBA               QUALIFIED SYMBOLIC BASE
         LTR   WORK1,WORK1                  QUALIFING TO A LOADNAME
         BCR   NOTZERO,RETURN               NO, CURR OK, RET TO CALLER
GETCURR  MVC   DDNAME(N8),BLANKS            CLEAR DDNAME FIELD
         MVC   CINFOBLK(N16),TSTCURLD       GET CURRENT L.E
         XC    LOADNAMA(N32),LOADNAMA       OTHER INFO TO ZEROES
*
*        SEARCH THE INFO BLOCKS CREATED BY THE TESTRAN SVC 61 (IN DEC)
*
FILLBLK  L     WORK1,TSTTRN                 ADDR OF FIRST SVC SAVE INFO
         LTR   WORK1,WORK1                  IS THEIR A TCB CNTRL BLK
*                                            FOR THE SVCINFO BLK CHAIN
         BZ    NOSVCINF                     NO SVCINFO, GO CHECK RB
         ST    RETURN,SVCBLK14              SAVE RET ADDR IN MAIN RT
         L     WORK2,PPTCB                  ADDR OF CURR QUALIFIED TCB
CURRTCB1 EQU   *
         C     WORK2,N4(WORK1)              IS THIS TCB CNTRL BLK FOR
*                                            THE CURR QUALIFIED TCB
         BE    CURRTCB2                     YES, GO SET SEARCH SVC BLKS
         L     WORK1,N0(WORK1)              NEXT TCB CNTRL BLK ON CHAIN
         LTR   WORK1,WORK1                  IS THEIR ANYMORE
         BNZ   CURRTCB1                     YES, GO CHECK FOR CURR TCB
         B     VERFYTCB                     NO, GO SEARCH ALL VALID TCB
CURRTCB2 EQU   *
         LR    WORK5,WORK1                  ADDR OF TCB CNTRL BLK FOR
*                                            CURRENT QUALIFIED TCB
         BAL   RETURN,VIEWSVC1              GO SEARCH SVCINFO BLK CHAIN
*
*        GET A TCB ADDRESS FROM THE TCB CNTRL BLK CHAIN FOR EACH
*        SVCINFO BLOCK CHAIN, VERIFY THE TCB STILL EXISTS AND SEARCH
*        THE SVCINFO BLOCKS USING LOADNAME AS THE SEARCH ARGUMENT
*
VERFYTCB EQU   *
         L     WORK1,TSTTRN                 HEAD OF TCB CNTRL BLK CHAIN
VERFYBEG EQU   *
         L     WORK2,TSTTCB                 ADDRESS OF TEST TCB
         LA    WORK3,N0(WORK2)              CLEAR HIGH ORDER BYTE, SAVE
VERFYDAU EQU   *
         L     WORK4,TCBLTC-TCB(WORK2)      ADDRESS OF DAUGHTER
         LA    WORK4,N0(WORK4)              CLEAR HIGH ORDER BYTE
         LTR   WORK4,WORK4                  IS THEIR A DAUGHTER
         BNZ   CHKTCB                       YES, GO SEE IF ONE WE WANT
VERFYSIS EQU   *
         L     WORK4,TCBNTC-TCB(WORK2)      ADDRESS OF SISTER
         LA    WORK4,N0(WORK4)              CLEAR HIGH ORDER BYTE
         LTR   WORK4,WORK4                  IS THEIR A SISTER
         BNZ   CHKTCB                       YES, GO SEE IF ONE WE WNAT
VERFYMOM EQU   *
         L     WORK2,TCBOTC-TCB(WORK2)      ADDRESS OF MOTHER
         LA    WORK2,N0(WORK2)              CLEAR HIGH ORDER BYTE
         CR    WORK2,WORK3                  IS MOTHER THE TEST TCB
         BNE   VERFYSIS                     NO, GO CHECK FOR A SISTER
         B     VERFYEND                     YES, TCB FROM TCB CNTRL BLK
*                                            HAS BEEN DETACHED, GO GET
*                                            NEXT TCB CNTRL BLK
CHKTCB   EQU   *
         C     WORK4,N4(WORK1)              IS THIS THE TCB WE WANT
         BE    TCBMATCH                     YES, GO SET UP TO SEARCH
*                                            SVC BLKS FOR THIS TCB
         LR    WORK2,WORK4                  FIND NEXT TCB UNDER TEST
         B     VERFYDAU                     LOOP UNTIL MATCH OR ALL TCB
*                                            UNDER TEST HAVE BEEN CHKED
TCBMATCH EQU   *
         LR    WORK5,WORK1                  ADDR OF TCB CNTRL BLK
         BAL   RETURN,VIEWSVC1              GO SEARCH SVC BLK CHAIN
VERFYEND EQU   *
         L     WORK1,N0(WORK1)              ADDR OF NEXT TCB CNTRL BLK
         LTR   WORK1,WORK1                  IS THEIR ANOTHER CHAIN
         BNZ   VERFYBEG                     YES, GO VERFIY ITS TCB
         L     RETURN,SVCBLK14              RESTORE RET ADDR IN MAIN RT
         B     NOSVCINF                     GO SEARCH RB CHAIN
VIEWSVC1 EQU   *
         L     WORK5,N8(WORK5)              ADDR OF FIRST BLK ON CHAIN
         USING SVCINFO,WORK5
VIEWSVC2 EQU   *
         CLC   LOADNAME(N8),LMODNAME        IS THIS THE SVC BLOCK
         BE    FOUND1                       YES, GO EXTRACT INFORMATION
         L     WORK5,NEXTBLK                NO, ADDR OF NEXT SVC BLOCK
         LTR   WORK5,WORK5                  IS THEIR ANOTHER SVC BLOCK
         BNZ   VIEWSVC2                     YES, GO SEE IF ITS THE ONE
         BR    RETURN                       NO, RETURN TO CALLER
FOUND1   EQU   *
         L     RETURN,SVCBLK14              ADDR OF MAIN ROUTINE CALLER
         MVC   LOADNAMA(N4),LMLADDR         GET MAIN STORAGE ADDRESS
         MVC   ATTRIBUT(N4),LMATTRIB        GET MEMBER ATTRIBUTES
         MVC   TCBADDR(N4),LMTCB            GET LOADNAME'S TCB ADDRESS
         MVC   POINTER(N4),BEGTTR           GET TTR OF BEGIN OF MEMBER
         OI    MODSWS,V90                   INDICATE IT IS A LOAD MOD
*                                            AND THE TTSVC HAS OPERATED
         TM    LMFLAGS,V80                  DO WE HAVE A DDNAME FOR PDS
         BZ    SEELIB                       NO, GO SEE IF LIB=LINKLIB
         MVC   DDNAME(N8),LMDDNAME          GET DDNAME ALLOCATING PDS
         OI    MODSWS,V04                   YES, INDICATE DDNAME KNOWN
         BR    RETURN                       RETURN TO CALLER
SEELIB   EQU   *
         TM    LMFLAGS,V40                  IS DATASET LINKLIB
         BCR   ONES,RETURN                  YES, CAN ALLOCATE, RETURN
         LA    RETCODE,N44                  NO, SECOND LEV MESG NUMBER
         B     NOFIND                       GO GIVE MESG, RETURN CODE
         DROP  WORK5
*
*        SEARCH THE CDE CHAIN AND USE CDE AND EXTENT LIST INFO
*
NOSVCINF EQU   *
         L     WORK3,PPRB                   ADDRESS OF CURRENT P/P RB
         L     WORK3,RBCDE-RBSECT(WORK3)    ADDRESS OF CDE
         USING CDENTRY,WORK3                ESTABLISH ADDRESS. TO CDE
         CLC   CDNAME(N8),LOADNAME          IS THIS THE PASSED LOADNAME
         BE    FOUND2                       YES, GO EXTRACT INFORMATION
CDECHAIN EQU   *
         SR    WORK1,WORK1                  CLEAR REGISTER TO ZERO
         L     WORK3,TSTTCB                 ADDRESS OF TEST TCB
         L     WORK3,TCBJPQ-TCB(WORK3)      HEAD OF CDE CHAIN
         LA    WORK3,N0(WORK3)              CLEAR HIGH ORDER BYTE
CDE1     EQU   *
         LTR   WORK3,WORK3                  END OF CDE CHAIN
         BNZ   CDE2                         NO, GO CONTINUE SEARCH
         LA    RETCODE,N4                   ERROR, LOADNAME NOT FOUND
         B     NOFIND                       GO SET UP ERROR MESSAGE
CDE2     EQU   *
         CLC   CDNAME(N8),LOADNAME          IS CDE FOR PASSED LOADNAME
         BE    FOUND2                       YES, GO EXTRACT INFORMATION
         L     WORK3,CDCHAIN                ADDRESS OF NEXT CDE
         LA    WORK3,N0(WORK3)              CLEAR HIGH ORDER BYTE
         B     CDE1                         GO CHECK NEXT CDE
FOUND2   EQU   *
         TM    CDATTR,CDMIN                 IS IT A MINOR CDE
         BZ    XL                           NO, GO GET XL ADDRESS
         L     WORK3,CDXLMJP                YES, ADDRESS OF MAJOR CDE
XL       EQU   *
         L     WORK2,CDXLMJP                ADDRESS OF EXTENT LIST
         USING XTLST,WORK2                  ESTABLISH ADDRESS. XTLST
         L     WORK1,XTLNRFAC               NO. SCATTERED BLOCKS
         SLL   WORK1,N2                     TIMES NO. BYTES IN A WORD
         LA    WORK1,XTLMSBLA(WORK1)        ADDR OF FIRST LOADED BLOCK
         MVC   LOADNAMA+N1(N3),N1(WORK1)    MOVE IT TO INFO BLOCK
         TM    CDATTR2,CDSPZ                IS IT LOAD VIA OS  @ZA27196
         BO    OSLOADER                     YES, GO EXTRACT INFO
         OI    MODSWS,V80                   INDICATE IT IS A LOAD MOD
         BR    RETURN                       RETURN TO CALLER
OSLOADER CLI   N7(WORK2),V02                IS THEIR MORE EXTENT INFO
         BCR   LOW,RETURN                   NO, RETURN TO CALLER
         L     WORK5,N12(WORK2)             LENGTH OF SECOND EXTENT
         LA    WORK5,N0(WORK5)              CLEAR HIGH ORDER BYTE
         LTR   WORK5,WORK5                  IS LEN ZERO
         BCR   ZERO,RETURN                  YES, RETURN TO CALLER
         ST    WORK5,CESDTTR                NO, LENGTH OF CESD INFO
         MVC   POINTER+N1(N3),N5(WORK1)     ADDR OF OS LOADER CESD INFO
*                                            INTO INFO BLOCK
         OI    MODSWS,V20                   INDICATE OS LOADER CESD AVA
         BR    RETURN                       RETURN TO CALLER
         SPACE 3
***********************************************************************
*                                                                     *
*        FOR A REQUEST FOR A SYMBOL, THIS ROUTINE SEARCHES SYM RCDS   *
*        IN THE LOADNAME MEMBER OF A PDS ON SECONDARY STORAGE.        *
*                                                                     *
***********************************************************************
         SPACE 2
FINDSYM  EQU   *
         TM    MODSWS,V80                   IS IT A LOAD MODULE
         BO    LMOD                         YES, GO CHECK FOR SYM RCDS
         LA    RETCODE,N8                   NO, NO SYMS WITH OBJ
         B     NOFIND                       GO GIVE ERROR MESG
LMOD     EQU   *
         TM    ATTRIBUT,V10                 WAS MOD LINKEDIT WITH TEST
         BO    ONWARDA                      YES, GO ON
         LA    RETCODE,N20                  LOADNAME LKED, NO TEST PARM
         B     NOFIND                       NO, SYM CANNOT BE FOUND
ONWARDA  TM    ATTRIBUT+N1,V04              ARE SYMBOL RCDS PRESENT
         BO    ONWARDB                      YES, GO ON
         LA    RETCODE,N36                  ENTRYNAME NOT ASM WITH TEST
         B     NOFIND                       NO, SYM CANNOT BE FOUND
ONWARDB  CLC   TSTCURLD(N16),LOADNAME       IS IT CURR LOADNAME-ENTRYNA
         BNE   MBASE                        NO, GO CREATE BASE FOR SYMS
         CLI   ENTRYNAM,V00                 IS CURR E DEFAULTED TO 1ST
         BNE   CURROK                       NO, GO USE TCOMTAB SYM BASE
         OI    SWSB,V10                     SEARCH FOR FIRST CSECT
         BAL   RETURN,FINDCESD              GO GET FIRST CSECT + DISPL
         MVI   SWSB,V00                     TURN OFF CESD SWITCHES
         MVC   TSTCURCT(N8),ENTRYNAM        MAKE FIRST CSECT CURRENT
         L     WORK1,LOADNAMA               GET LOADED ADDRESS
         A     WORK1,ENTRNAMD               ADD FIRST CSECT'S DISPL
         ST    WORK1,TSTSYMBA               CURR SYM BASE TO TCOMTAB
         ST    WORK1,BASEFSYM               ALSO IN CURRENT INFO BLOCK
         B     SYMBACK1                     GO ON
CURROK   MVC   BASEFSYM(N4),TSTSYMBA        YES, SYM BASE FROM TCOMTAB
         B     SYMBACK1                     GO ON
MBASE    CLI   ENTRYNAM,V00                 IS ENTRY DEFAULTED-1ST CSEC
         BNE   ENTRYPRS                     NO, ENTRYNAME IS PRESENT
         OI    SWSB,V10                     SEARCH FOR FIRST CSECT
         BAL   RETURN,FINDCESD              GO GET FIRST CSECT + DISPL
         MVI   SWSB,V00                     TURN OFF CESD SWITCHES
ENTRYPRS TM    MODSWS,V40                   IS ENTRYNAME DISPL PRESENT
         BO    ADDTOLA                      YES, GO CREATE SYM BASE
         OI    SWSB,V20                     SEARCH USING ENTRYNAME
         BAL   RETURN,FINDCESD              GO GET DISPL FOR ENTRYNAME
         MVI   SWSB,V00                     TURN OFF CESD SWITCHES
ADDTOLA  L     WORK1,LOADNAMA               LOADED ADDR OF MODULE
         A     WORK1,ENTRNAMD               ADD DISP OF ENTRYNAME
         ST    WORK1,BASEFSYM               BASE FOR SYMBOL DISPLACMENT
SYMBACK1 DS    0H
         BAL   RETURN,OPENDCB               GO SET UP DCB FOR READ
         LA    PARMREG1,PDSDCB              ADDR OF DCB FOR POINT
SMTSYND1 DS    0H                           SMT TESTCASE LABEL
*                                            ENTER SYNAD ON SYMBOL READ
*                                            RC FROM SYM IS 12
*                                            TESTCASE ID  TTSTC150
         LA    PARMREG0,POINTER             ADDR OF TTR FOR POINT
         BAL   RETURN,DOPOINT               GO DO POINT
READSYM  BAL   RETURN,DOREAD                GO READ SECONDARY STORAGE
         CLI   BUFFER,V40                   WAS A SYM/ESD RCD READ
         BE    SYMRCD1                      YES, GO CHECK FOR GOOD SYM
         TM    SWSA,V80                     WAS A PART ENTRY SAVED
         BZ    NOSYM1                       NO, GO GIVE UNRESOLVED CODE
         BAL   RETURN,INPARTAL              YES, GO CHECK PART ENTRY
NOSYM1   EQU   *
         TM    SWSA,V10                     DID WE FIND ENTRYNAME
         BZ    NOTASM1                      NO, GO GIVE NOT ASEM CODE
         LA    RETCODE,N24                  YES, SYM NOT FOUND
         B     NOFIND                       GO GIVE RET CODE, MESG
NOTASM1  LA    RETCODE,N36                  ENTRYNAME NOT ASM WITH TEST
         B     NOFIND                       GO GIVE RET CODE, MESG
SYMRCD1  EQU   *
         CLI   BUFFER+N1,V00                IS IT A GOOD SYM/ESD RECORD
         BE    SETUPSYM                     YES, GO SET UP TO ANALYZE
         TM    SWSA,V80                     NO, WAS A PART ENTRY SAVED
         BZ    READSYM                      NO, GO READ ANOTHER RECORD
         BAL   RETURN,INPARTAL              YES, GO CHECK PART ENTRY
         B     READSYM                      GO READ ANOTHER RECORD
*
*        THIS  ROUTINE ANALYZES A SYMBOL RECORD READ FROM SECONDARY
*        STORAGE. WORK1 POINTS TO THE BEGINNING OF THE LOGICAL RECORD,
*        WORK2 POINTS TO THE END OF THE PHYSICAL RECORD, WORK3 POINTS
*        TO THE CURRENT POSITION IN THE PHYSICAL RECORD, WORK4 WILL
*        CONTAIN THE NUMBER OF REMAINING DATA BYTES IN THE PRESENT
*        LOGICAL RECORD AND WORK5 WILL CONTAIN THE NUMBER OF BYTES IN
*        THE CURRENT ENTRY.
*
SETUPSYM EQU   *
         LA    WORK1,BUFFER                 ADDR BEG OF PHSYICAL RCD
         LH    WORK2,N2(WORK1)              LENGTH OF PHSYICAL RECORD
         LA    WORK2,N4(WORK1,WORK2)        ADDR OF END OF PHSYICAL RCD
         LA    WORK3,N4(WORK1)              ADDR OF FIRST LOGICAL RCD
         LR    WORK1,WORK3                  ADDR OF FIRST LOGICAL RCD
ISITASYM CLI   N1(WORK3),LSYMRCD            IS THIS A LOGICAL SYM RCD
         BE    ONWARDS1                     YES, GO ON
         TM    SWSA,V80                     WAS A PART ENTRY SAVED
         BZ    NOPART                       NO, GO ON
         BAL   RETURN,INPARTAL              YES, GO CHECK PART ENTRY
NOPART   EQU   *
         LA    WORK3,N80(WORK1)             ADDR OF NEXT LOGICAL RCD
         LR    WORK1,WORK3                  ADDR OF CURRENT LOGICAL RCD
         CR    WORK3,WORK2                  IS IT END OF PHSYICAL RCD
         BNL   READSYM                      YES, GO READ ANOTHER
         B     ISITASYM                     NO, GO CHECK NEXT LOGICAL
ONWARDS1 LH    WORK4,N10(WORK3)             LEN DATA IN LOGICAL RCD
         LA    WORK3,N16(WORK3)             ADDR OF FIRST ENTRY IN RCD
         TM    SWSA,V80                     WAS LAST ENTRY CONTINUED
         BO    ALIGNSYM                     YES, GO ALIGN ENTRY
BACKSYM1 LA    PARMREG1,N20                 MAXIUM ENTRY LENGTH
         CR    WORK4,PARMREG1               COULD NEXT ENTRY OVERFLOW
         BL    SAVEPART                     YES, SAVE POSSIBLE PART ENT
         BAL   RETURN,ENTRYLEN              GO CALCULATE SYM ENTRY LEN
         TM    N0(WORK3),V80                IS IT A DATA TYPE ENTRY
         BO    DATATYPE                     YES, GO CHECK
         BAL   RETURN,NOTDATA               NO, GO ANALYZE NON-DATA
         B     ENDENTRY                     GO END THIS ENTRY
DATATYPE TM    SWSA,V40                     SHOULD WE ANALZE ENTRY
         BZ    ENDENTRY                     NO, GO BYPASS THIS ONE
         TM    N0(WORK3),V08                IS A NAME PRESENT
         BO    ENDENTRY                     NO, DO NOT ANALYZE
         STM   WORK1,WORK3,WORKSAV2         SAVE POINTERS
         MVC   WAREA3(N8),BLANKS            CLEAR WORK AREA
         IC    WORK1,N0(WORK3)              GET ORGANIZATION BYTE
         LA    WORK2,N15                    CREATE 'AND' BYE - 0F
         NR    WORK1,WORK2                  LEN OF SYMBOL-1
         LA    WORK2,WAREA3                 MOVE TO LOCATION IN SYMWORK
         LA    WORK3,N4(WORK3)              ADDRESS OF SYMBOL TO MOVE
         EX    WORK1,MOVEINST               MOVE SYM TO WORK AREA
         LM    WORK1,WORK3,WORKSAV2         RESTORE POINTERS
         CLC   WAREA3(N8),PSYMBOL           IS THIS THE SYMBOL
         BE    FOUNDSYM                     YES, GO CREATE SYMINFO BLK
ENDENTRY AR    WORK3,WORK5                  ADDR OF NEXT ENTRY
         SR    WORK4,WORK5                  LEN OF DATA REMAIN IN RCD
         LTR   WORK4,WORK4                  IS IT END OF A LOGICAL RCD
         BP    BACKSYM1                     NO, GO LOOK AT NEXT ENTRY
         LA    WORK3,N80(WORK1)             YES, ADDR OF NEXT LOGICAL
         LR    WORK1,WORK3                  ADDR OF CURRENT LOGICAL RCD
         CR    WORK3,WORK2                  IS IT END OF PHSYICAL RCD
         BNL   READSYM                      YES, GO READ NEXT PHSYICAL
         B     ISITASYM                     NO, GO LOOK AT NEXT LOGICAL
*
*        THIS ROUTINE WILL ALIGN A LOGICAL SYM RCD.  PARTIAL SYM INFO
*        FROM THE PREVIOUS LOGICAL RCD WILL BE PLACED IN FRONT OF THIS
*        PRESENT SYM RECORD.
*
ALIGNSYM STM   WORK1,WORK3,WORKSAVE         SAVE POINTERS
         L     WORK1,PENTRYLN               LEN OF PART TO ALIGIN
         AR    WORK4,WORK1                  NEW LEN OF DATA IN LOGICAL
         LR    WORK2,WORK3                  PRESENT ENTRY ADDRESS
         SR    WORK2,WORK1                  NEW PRESENT ENTRY ADDRESS
         LA    WORK3,PARTENTY               MOVE FROM LOCATION
         BCTR  WORK1,N0                     LEN-1 FOR EXECUTE INSTR
         EX    WORK1,MOVEINST               PREFIX LOG RCD WITH PARTENT
         LR    WORK3,WORK2                  NEXT ENTRY ADDRESS
         LM    WORK1,WORK2,WORKSAVE         RESTORE BEGIN-END POINTERS
         NI    SWSA,V7F                     TURN PARTIAL LAST ENTRY OFF
         B     BACKSYM1                     GO ANALYZE SYMBOL
*
*        THIS ROUTINE WILL CALCULATE THE LENGTH OF A SYM ENTRY
*
ENTRYLEN STM   WORK1,WORK3,WORKSAV2         SAVE POINTERS
         LA    WORK5,N4                     BASIC SYM LENGTH-ORGANIZATN
*                                             PLUS DISP FROM CSECT
         SR    WORK1,WORK1                  INITIAL LEN OF NAME
         TM    N0(WORK3),V08                IS NAME PRESENT
         BO    NONAME                       NO, GO ON
         IC    WORK1,N0(WORK3)              GET ORGANIZATION BYTE
         LA    WORK2,N15                    CREATE 'AND' FIELD - 0F
         NR    WORK1,WORK2                  LEN OF NAME-1
         LA    WORK1,N1(WORK1)              LENGTH OF NAME
         AR    WORK5,WORK1                  ENTRY LEN  PLUS NAME LENGTH
NONAME   TM    N0(WORK3),V80                IS IT A DATA TYPE
         BO    DATAENTY                     YES, GO CALCULATE LEN
         TM    N0(WORK3),VF0                IS NON-DATA TYPE A SPACE
         BM    GOTLEN                       NO, HAVE LEN, GO RETURN
         LA    WORK5,N1(WORK5)              YES, ADD ALIGN BYTE FIELD
         B     GOTLEN                       HAVE LENGTH, GO RETURN
DATAENTY EQU   *
         LA    WORK5,N1(WORK5)              YES, ADD LEN OF DATA FIELD
         TM    N0(WORK3),V40                IS THEIR ANY MULTIPLICITY
         BZ    NOMULTIP                     NO, GO ON
         LA    WORK5,N3(WORK5)              ENTRY LEN PLUS LEN M FIELD
NOMULTIP TM    N0(WORK3),V10                IS A SCALE FIELD PRESENT
         BZ    NOSCALE                      NO, GO ON
         LA    WORK5,N2(WORK5)              ENTRY LEN PLUS LEN S FIELD
NOSCALE  LA    WORK2,N4(WORK3,WORK1)        ADDR OF DATA FIELD
         CLI   N0(WORK2),V08                IS LENGTH FIELD 1 OR 2 BYTE
         BH    ONEBYTE                      LEN FIELD IS ONE BYTE
         LA    WORK5,N1(WORK5)              ENTRY LEN +2 BYTE LEN FIELD
ONEBYTE  LA    WORK5,N1(WORK5)              ENTRY LEN +1 BYTE LEN FIELD
GOTLEN   LM    WORK1,WORK3,WORKSAV2         RESTORE POINTERS
         BR    RETURN                       GO CHECK NEXT ENTRY
*
*        THIS ROUTINE WILL SAVE A POSSIBLE PARTIAL ENTRY FOR PREFIXING
*        TO THE NEXT LOGICAL SYM RCD
*
SAVEPART STM   WORK1,WORK3,WORKSAVE         SAVE POINTERS
         ST    WORK4,PENTRYLN               LENGTH OF PART TO SAVE
         LR    WORK1,WORK4                  LEN OF PART TO SAVE
         BCTR  WORK1,N0                     LEN-1 FOR EXECUTE INSTR
         LA    WORK2,PARTENTY               MOVE TO LOCATION
         EX    WORK1,MOVEINST               SAVE PART ENTRY IN SYMWORK
         OI    SWSA,V80                     SET LAST ENTRY CONTINUED SW
         LR    WORK5,WORK4                  SET LEN TO REMAIN DATA BYTS
         LM    WORK1,WORK3,WORKSAVE         RESTORE POINTERS
         B     ENDENTRY                     GO END LOGICAL RECORD
*
*        THIS ROUTINE WILL HANDLE NON-DATA TYPES AND DECIDE WHEN TO
*        ANALYZE SYM ENTRIES.
*
NOTDATA  STM   WORK1,WORK3,WORKSAV2         SAVE POINTERS
         MVC   WAREA2(N8),BLANKS            BLANK OUT WORK AREA
         SR    WORK1,WORK1                  CLEAR REG FOR IC INSTRUCTON
         IC    WORK1,N0(WORK3)              GET ORGANIZATION BYTE
         STC   WORK1,WAREA3                 SAVE ORGANIZATION BYTE
         TM    N0(WORK3),V08                IS THEIR A NAME
         BO    SEETYPE                      NO, GO CHECK NON-DATA TYPE
         LA    WORK2,N15                    CREATE 'AND' FIELD - 0F
         NR    WORK1,WORK2                  LEN OF NAME-1
         LA    WORK2,WAREA2                 MOVE TO LOC IN SYMWORK
         LA    WORK3,N4(WORK3)              ADDRESS OF SYMBOL TO MOVE
         EX    WORK1,MOVEINST               MOVE NAME TO A WORK AREA
         L     WORK3,WKSAVE3A               RESTORE ADDRESS OF  YA00074
*                                           ENTRY
SEETYPE  NI    WAREA3,VF0                   NON-DATA TYPE INFO
         CLI   WAREA3,V10                   IS IT A CSECT
         BNE   ISITDSEC                     NO, GO CHECK FOR A DSECT
         CLC   WAREA2(N8),ENTRYNAM          IS IT THE ENTRYNAME CSECT
         BNE   NOCHECK                      NO, GO TURN SWS OFF
         OI    SWSA,V50                     YES, TURN ANALYZE SWITCH ON
*                                            AND INDICATE SYMS ARE
*                                            AVAILABLE FOR THIS
*                                            ENTRYNAME
         NI    SWSA,VDF                     TURN DSECT SW OFF
RNDATA1  LM    WORK1,WORK3,WORKSAV2         RESTORE POINTERS
         BR    RETURN                       GO RETURN TO CALLER
NOCHECK  NI    SWSA,V9F                     TURN OFF ANALYZE,DSECT SWS
         B     RNDATA1                      GO BACK
ISITDSEC CLI   WAREA3,V20                   IS IT A DSECT
         BNE   ISASWON                      NO, GO CHECK ANALYZE SWITCH
         OI    SWSA,V60                     YES, TURN ON ANALYZE,DSECT
         MVC   WAREA1(N8),WAREA2            SAVE DSECT NAME NOW SEARCH-
*                                            ING THROUGH
         B     RNDATA1                      GO RETURN
ISASWON  TM    SWSA,V40                     ARE WE ANALYZING
         BZ    RNDATA1                      NO, RETURN
         CLC   WAREA2(N8),PSYMBOL           YES, IS THIS THE SYMBOL
         BNE   RNDATA1                      NO, RETURN
*
*        SYMBOL FOUND, BUT NOT DATA TYPE, WORK3 POINTS TO ENTRY,
*        WORK1 IS LENGTH OF SYMBOL MINUS ONE
*
         LA    WORK2,N5(WORK3,WORK1)        WORK2 POINT TO DATA FIELD
         CLI   WAREA3,V40                   IS IT AN INSTRUCTION
         BNE   CHECKCCW                     NO, GO CHECK FOR A CCW
         MVI   N0(WORK2),V0C                YES- TYPE IS 0C
         NI    N0(WORK3),V0F                TURN OFF ANY ERRENOUS BITS
         MVI   N1(WORK2),V00                CREATE 1 BYTE LEN FIELD=0
         B     FOUNDSYM                     GO CREATE ANSWER BLOCK
CHECKCCW CLI   WAREA3,V50                   IS IT A CCW
         BNE   DEFAULT                      NO, GO DEFAULT IT
         MVI   N0(WORK2),V04                YES, - MAKE IT HEX
         NI    N0(WORK3),V0F                TURN OFF ANY ERRENOUS BITS
         MVC   N1(N2,WORK2),CCWLENFD        LENGTH FIELD FOR A CCW
         B     FOUNDSYM                     GO CREATE ANSWER BLOCK
DEFAULT  NI    N0(WORK3),V0F                TURN OFF ANY ERRENOUS BITS
         MVI   N0(WORK2),V04                MAKE IT HEX
         MVC   N1(N2,WORK2),DEFLENFD        LEN FIELD FOR DEFAULT
         B     FOUNDSYM                     GO BUILD ANSWER BLOCK
*
*        THIS ROUTINE WILL SEARCH A PARTIAL SAVED ENTRY FROM A
*        LOGICAL SYM RECORD FROM SECONDARY STORAGE
*
INPARTAL EQU   *
         STM   WORK1,WORK3,WORKSAVE         SAVE POINTERS
         ST    RETURN,PART14                SAVE RETURN ADDRESS
         NI    SWSA,V7F                     TURN PARTIAL ENTRY SW OFF
         LA    WORK3,PARTENTY               ADDRESS OF SAVED PART ENTRY
         L     WORK4,PENTRYLN               LEN OF SAVED PARTIAL ENTRY
         LA    WORK2,N0(WORK3,WORK4)        END OF SAVED PART ENTRY
LENCHECK BAL   RETURN,ENTRYLEN              GO CALCUATE LEN NEXT ENTRY
         CR    WORK4,WORK5                  IS THEIR A COMPLETE ENTRY
         BNL   LOOKAT                       YES, GO ON
         LM    WORK1,WORK3,WORKSAVE         RESTORE POINTERS
         L     RETURN,PART14                NO, GET RETURN ADDRESS
         BR    RETURN                       RETURN TO CALLER
LOOKAT   TM    N0(WORK3),V80                IS IT A DATA TYPE
         BO    TYPEDATA                     YES, GO CHECK FUTHER
         BAL   RETURN,NOTDATA               NO, GO CHECK NON-DATA TYPE
         B     ENTRYEND                     GO END THIS ENTRY
TYPEDATA TM    SWSA,V40                     SHOULD WE ANALYZE ENTRY
         BZ    ENTRYEND                     NO, GO END ENTRY
         TM    N0(WORK3),V08                IS A NAME PRESENT
         BO    ENTRYEND                     NO, GO, WE NEED A NAME
         STM   WORK1,WORK3,WORKSAV2         SAVE POINTERS
         MVC   WAREA3(N8),BLANKS            CLEAR WORK AREA
         SR    WORK1,WORK1                  CLEAR REG FOR IC INSTR
         IC    WORK1,N0(WORK3)              GET ORGANIZATION BYTE
         LA    WORK2,N15                    CREATE 'AND' BYTE - 0F
         NR    WORK1,WORK2                  LEN OF SYMBOL-1
         LA    WORK2,WAREA3                 MOVE TO LOCATION
         LA    WORK3,N4(WORK3)              ADDRESS OF SYMBOL TO MOVE
         EX    WORK1,MOVEINST               MOVE SYM TO WORK AREA
         LM    WORK1,WORK3,WORKSAV2         RESTORE POINTERS
         CLC   WAREA3(N8),PSYMBOL           IS THIS THE SYMBOL REQUESTD
         BE    FOUNDSYM                     YES, GO CREATE ANSWER BLOCK
ENTRYEND AR    WORK3,WORK5                  ADDR OF NEXT ENTRY
         SR    WORK4,WORK5                  LEN OF DATA REMAIN IN RCD
         CR    WORK3,WORK2                  ANY MORE ENTRIES IN PARTIAL
         BL    LENCHECK                     YES, GO CHECK FOR NEXT ONE
         L     RETURN,PART14                NO, SYMBOL NOT FOUND
         LM    WORK1,WORK3,WORKSAVE         RESTORE POINTERS
         BR    RETURN                       RETURN TO CALLER
         SPACE 3
***********************************************************************
*                                                                     *
*        FOR A REQUEST FOR A SYMBOL, THIS ROUTINE SEARCHS THE INCORE  *
*        SYMBOL TABLE                                                 *
*        IF THE SEARCH IS FOR A DSECT, THE DSECT NAME WILL BE         *
*        IN WAREA1                                                    *
*                                                                     *
***********************************************************************
         SPACE 2
SINCORES MVC   WAREA1(N8),BLANKS            CLEAR SYMBOL WORK AREA
         LH    WORK1,PDELEN3                LENGTH OF PASSED SYMBOL
         BCTR  WORK1,N0                     LEN-1 FOR EXECUTE INSTR
         L     WORK3,PDEADRPT               ADDR OF PASSED SYMBOL
         LA    WORK2,WAREA1                 MOVE TO LOCATION
         EX    WORK1,MOVEINST               MOVE SYMBOL TO WORK AREA
DSECTIN  L     WORK4,SYMTABLE               ADDR OF INCORE SYM TABLE
         USING INCORE,WORK4                 BASE FOR DESCRIPTIVE DSECT
SEARCH3  LTR   WORK4,WORK4                  IS IT LAST INCORE SYM TABLE
         BC    N7,CSEARCH3                  NO, GO CONTINUE SEARCH
         LA    RETCODE,N4                   YES, SYMBOL NOT FOUND
         BR    RETURN                       RETURN TO CALLER
CSEARCH3 MVC   WAREA2(N8),BLANKS            CLEAR SYMBOL WORK AREA
         LH    WORK1,LENSYM                 LENGTH OF SYMBOL NAME
         BCTR  WORK1,N0                     LEN-1 FOR EXECUTE INSTR
         LA    WORK3,INSYM                  ADDRESS OF SYMBOL
         LA    WORK2,WAREA2                 MOVE TO LOCATION IN SYMWORK
         EX    WORK1,MOVEINST               MOVE SYMBOL TO WORK AREA
         CLC   WAREA1(N8),WAREA2            IS THIS THE SYMBOL
         BE    FOUND3                       YES, GO EXTRACT INFO
         L     WORK4,NXINCORE               NO, POINT TO NEXT INCORE
         B     SEARCH3                      GO LOOK AT NEXT SYM INCORE
FOUND3   LNR   WORK3,WORK4                  SYM FOUND IN INCORE TABLE
         DROP  WORK4
         SR    RETCODE,RETCODE              RETCODE IS ZERO
         BR    RETURN                       RETURN TO CALLER
         SPACE 3
***********************************************************************
*                                                                     *
*        THIS  SUB-ROUTINE OBTAINS CESD INFORMATION EITHER FROM CESD  *
*        RCDS ON SECONDARY STORAGE OR FROM INCORE CESD INFO SAVED BY  *
*        THE OS LOADER.  HOW TO SEARCH IS INDICATED BY SWITCHES, SWSB *
*        AND THEIR ARE THREE POSSIBLTIES- SEARCH USING OFFSET, SEARCH *
*        USING ENTRYNAME OR SEARCH FOR THE FIRST CSECT.               *
***********************************************************************
         SPACE 2
*
*        FOR   LOAD MODULES THIS ROUTINE READS SECONDARY STORAGES
*        AND RETURNS THE DESIRED INFORMATION
*
FINDCESD ST    RETURN,CESD14                SAVE RETURN ADDRESS
         TM    MODSWS,V80                   IS IT A LOAD OR OBJ MODULE
         BZ    OBJMOD                       OBJ MOD, GO ANALYZE
         TM    MODSWS,V10                   HAS THE TTSVC OPERATED
         BO    SVCDID                       YES, GO ON
         LA    RETCODE,N12                  NOT LOADED BY TEST
         B     NOFIND                       NO, ERROR, NO CESD INFO
SVCDID   DS    0H
         BAL   RETURN,OPENDCB               GO OPEN DCB
         TM    MODSWS,V08                   IS A CESD RCD TTR AVAILABLE
         BZ    USESYMS                      NO, GO USE SYMS TTR
SMTSYND2 DS    0H                           SMT TESTCASE LABEL
*                                            ENTER SYNAD ON CESD READ
*                                            RC FROM SYM IS 12
*                                            TESTCASE ID  TTSTC150
         LA    PARMREG0,CESDTTR             YES, USE CESD TTR
         B     ONWARD99                     GO ON
SMTSYND3 DS    0H                           SMT TESTCASE LABEL
*                                            ENTER SYNAD ON CESD READ
*                                            RC FROM SYM IS 12
*                                            TESTCASE ID  TTSTC150
USESYMS  LA    PARMREG0,POINTER             USE SYM TTR FOR POINT
ONWARD99 LA    PARMREG1,PDSDCB              ADDR OF DCB FOR POINT
         BAL   RETURN,DOPOINT               GO ISSUE POINT
READCESD BAL   RETURN,DOREAD                GO READ FROM SECONDARY STOR
         CLI   BUFFER,V20                   IS IT A CESD RECORD
         BE    PROCESS1                     YES, GO PROCESS
         TM    SWSB,V80                     NO, HAS A CESD RCD BEEN RED
         BZ    READCESD                     NO, GO READ AGAIN
         TM    SWSB,V10                     IS SEARCH FOR FIRST CSECT
         BZ    GIVEERR                      NO, GO SET ERROR CODE
         MVC   ENTRYNAM(N8),BLANKS          FIRST CSECT NAME IS BLANK
         MVC   ENTRNAMD(N4),POFFSET         DISPLACEMENT IS OFFSET
         OI    MODSWS,V40                   INDICATE DISPL PRESENT
         L     RETURN,CESD14                GET RETURN ADDRESS
         BR    RETURN                       RETURN TO CALLER
GIVEERR  EQU   *
         LA    RETCODE,N32                  ENTRYNAME NOT IN CESD RCDS
         B     NOFIND                       ERROR, NO MORE CESD RCDS
PROCESS1 OI    SWSB,V80                     INDICATE CESD RCD READ
         TM    MODSWS,V08                   IS A CESD TTR AVAILABLE
         BO    ONWARD98                     YES, GO ON
         LA    PARMREG1,PDSDCB              NO, OBTAIN ONE
         BAL   RETURN,DONOTE                GO NOTE FIRST CESD RECORD
         ST    PARMREG1,CESDTTR             SAVE TTR
         MVC   CESDTTR+N3(N1),POINTER+N3    CONCATENATION NO. TO TTR
         OI    MODSWS,V08                   INDICATE CESD TTR AVALIABLE
ONWARD98 LA    WORK2,BUFFER                 ADDR OF PHYSICAL RCD
         LH    WORK3,N6(WORK2)              LENGTH OF DATA PORTION
         LA    WORK2,N8(WORK2)              ADDR OF FIRST ENTRY
         LA    WORK3,N0(WORK3,WORK2)        ADDR OF END OF PHYSICAL RCD
         TM    SWSB,V20                     IS SEARCH USING ENTRYNAME
         BO    FINDNAME                     YES, SEARCH USING ENTRYNAME
         TM    SWSB,V10                     IS SEARCH FOR FIRST CSECT
         BZ    SEARCH4                      NO, SEARCH USING OFFSET
         SR    WORK1,WORK1                  YES, CREATE A ZERO OFFSET
         ST    WORK1,POFFSET                 AND USE OFFSET SEARCH RT
         TM    ATTRIBUT,V20                 IS LMOD LINK EDITED IN OVLY
         BZ    SEARCH4                      NO, OFFSET OK, GO SEARCH
         STM   WORK1,WORK3,WORKSAV2         SAVE POINTERS
         LA    WORK1,N4                     SET INDEX, 4 REGIONS MAX
         L     WORK3,LOADNAMA               ADDRESS OF SEGTAB CSECT
         SR    WORK4,WORK4                  CLEAR REGISTER TO ZERO
CKREGION EQU   *
         IC    WORK4,N8(WORK3)              GET LAST SEG. NO. IN REGION
         TM    N10(WORK3),VFF               ARE THEIR ANY MORE REGIONS
         BZ    LASTREGN                     NO, GO FIGURE LEN OF SEGTAB
         BCT   WORK1,SETNEXT1               YES, GO SET TO CHECK NEXT
         B     LASTREGN                     NO, HAVE 4 REGNS, GO
SETNEXT1 EQU   *
         LA    WORK3,N2(WORK3)              SEGTAB PTR TO NEXT REGION
         B     CKREGION                     GO CHECK NEXT REGION
LASTREGN EQU   *
         SLL   WORK4,N2                     MULTIPLY LAST SEG NO. BY 4
         LA    WORK2,N24(WORK4)             LENGTH OF SEGTAB CSECT
         ST    WORK2,POFFSET                SAVE
         TM    POFFSET+N3,V04               TEST FOR ALIGNMENT
         BZ    SETSEACH                     ON DOUBLE WORD, GO SEARCH
         LA    WORK2,N4(WORK2)              ALIGNED ON NEXT DOUBLE WORD
         ST    WORK2,POFFSET                OFFSET FOR 1ST CSECT SEARCH
SETSEACH EQU   *
         LM    WORK1,WORK3,WORKSAV2         RESTORE POINTERS
*
*        SEARCH CESD RCD USING PASSED OFFSET, RETURN ENTRYNAME CONTAIN-
*        THAT  OFFSET
*
SEARCH4  NI    N8(WORK2),V0F                TURN OFF L.E. SUBCLASS
         CLI   N8(WORK2),V00                IS IT A SECTION DEFINITION
         BE    SD                           YES, CHECK FOR RIGHT ONE
BACK99   LA    WORK2,N16(WORK2)             POINT TO NEXT ENTRY
         CR    WORK2,WORK3                  IS IT END OF RCD
         BL    SEARCH4                      NO, CONTINUE SEARCH
         B     READCESD                     YES, GO READ ANOTHER RCD
SD       L     WORK4,N8(WORK2)              DISP OF SD ENTRY
         C     WORK4,POFFSET                IS SD ORGIN PAST OFFSET
         BH    BACK99                       YES, GO CHECK NEXT CESD
         L     WORK5,N12(WORK2)             SEGMENT NO. AND LENGTH
         LA    WORK5,N0(WORK5)              LENGTH OF CSECT
         ST    WORK5,WAREA1                 LENGTH TO WORK AREA
         TM    WAREA1+N3,V07                IS LEN DOUBLE WORD MULTIPLE
         BZ    ONDWORD                      YES, GO CONTINUE
         SRL   WORK5,N3                     DISCARD 3 LOW ORDER BITS
         SLL   WORK5,N3                     3 LOW ORDER BITS ARE ZERO
         LA    WORK5,N8(WORK5)              LEN IS MULTIPLE OF DOUBLE
ONDWORD  EQU   *
         AR    WORK4,WORK5                  LEN OF MEMBER, SO FAR
         L     WORK1,POFFSET                OFFSET PASSED IN PDE
         CR    WORK1,WORK4                  IS OFFSET IN THIS CSECT
         BL    FOUND4                       YES, GO FILL IN INFOBLK
         B     BACK99                       NO, SEARCH SOME MORE
FOUND4   EQU   *
         TM    ATTRIBUT,V20                 IS LMOD LINK EDITED IN OVLY
         BZ    INCORE4                      NO, CSECT INCORE, GO PASS
         ST    WORK3,WKSAVE3                SAVE END OF CESD RCD ADDR
         BAL   RETURN,CHKSEGMT              YES, GO SEE IF CSECT INCORE
         L     WORK3,WKSAVE3                RESTORE END OF CESD RCD PTR
         LTR   RETCODE,RETCODE              IS CSECT IN CORE
         BNZ   BACK99                       NO, GO BACK, CONTUNE SEARCH
INCORE4  EQU   *
         MVC   ENTRYNAM(N8),N0(WORK2)       CSECT NAME TO ENTRYNAME FLD
         MVC   ENTRNAMD+N1(N3),N9(WORK2)    GET ENTRYNAME DISPLACMENT
         OI    MODSWS,V40                   ENTRYNAME DISPLACMENT HERE
         L     RETURN,CESD14                GET RETURN ADDR
         BR    RETURN                       RETURN
*
*        SEARCH CESD RCDS USING PASSED ENTRYNAME  RETURN DISPLACEMENT
*        BASED ON LINKAGE EDITOR ADDR 00, OF THAT CSECT
*
FINDNAME CLC   ENTRYNAM(N8),N0(WORK2)       IS THIS THE CSECT
         BE    FOUND5                       YES, GO EXTRACT DISPLACMENT
         LA    WORK2,N16(WORK2)             NO, POINT TO NEXT ENTRY
         CR    WORK2,WORK3                  IS IT THE END OF THE RCD
         BL    FINDNAME                     NO, GO CHECK NEXT CESD ENTY
         B     READCESD                     YES, GO READ ANOTHER RECORD
FOUND5   EQU   *
         TM    ATTRIBUT,V20                 IS LMOD LINK EDITED IN OVLY
         BZ    INCORE5                      NO, CSECT INCORE, GO PASS
         BAL   RETURN,CHKSEGMT              YES, GO SEE IF CSECT INCORE
         LTR   RETCODE,RETCODE              IS CSECT IN CORE
         BZ    INCORE5                      YES, GO PASS TO CALLER
         LA    RETCODE,N40                  NO, PASS 2ND LEVEL MESG NO.
         B     NOFIND                       GO GIVE RET CODE, MESSAGE
INCORE5  EQU   *
         MVC   ENTRNAMD+N1(N3),N9(WORK2)    GET ENTRYNAME DISPLACEMENT
         OI    MODSWS,V40                   INDICATE DISPLACMENT PRESNT
         L     RETURN,CESD14                GET RETURN ADDR
         BR    RETURN                       RETURN
*
*        IF THE LOAD MODULE IS LINK EDITTED IN OVERLAY, SEE IF SEGMENT
*        CONTAINNING ENTRYNAME IS IN CORE
*
CHKSEGMT EQU   *
         SR    RETCODE,RETCODE              INITIAL INDCATE, SEG INCORE
         SR    WORK1,WORK1                  CLEAR REGISTER TO ZERO
         IC    WORK1,N12(WORK2)             SEG NO. OF FOUND ENTRYNAME
         SLL   WORK1,N2                     MULTIPLY BY FOUR
         L     WORK3,LOADNAMA               ADDRESS OF SEGTAB CSECT
         LA    WORK3,N23(WORK3,WORK1)       PTR TO STATUS IND FOR SEGMT
         TM    N0(WORK3),V03                ARE LOW ORDER 2 BITS 00
         BCR   ZERO,RETURN                  YES, SEGMENT INCORE, RETURN
         BO    NOTINMS                      NO, NOT INCORE, GO SET ERR
         TM    N0(WORK3),V02                ARE LOW ORDER 2 BITS 10
         BCR   ONES,RETURN                  YES, SEGMENT INCORE, RETURN
NOTINMS  EQU   *
         LA    RETCODE,N4                   INDICATE SEGMENT NOT INCORE
         BR    RETURN                       RETURN TO CALLER
*
*        THIS ROUTINE SEARCHS INCORE CESD INFO BUILT BY THE OS LOADER
*
OBJMOD   TM    MODSWS,V20                   IS OS LOADER CESD INFO AVAB
SMTOBJ   DS    0H                           SMT TESTCASE LABEL
*                                            OBJ CESD NOT AVAILABLE
*                                            RC FROM SYM IS 4
*                                            TESTCASE ID  TEQU6100
         BO    CESDHERE                     YES, GO ON
         LA    RETCODE,N16                  NO OS LOADER CESD INFO
         B     NOFIND                       NO, CANNOT RESOLVE
CESDHERE L     WORK2,POINTER                ADDR OF OS LOADER CESD INFO
         L     WORK3,CESDTTR                LENGTH OF CESD INFO
         AR    WORK3,WORK2                  END ADDR OF CESD INFO
         XC    WAREA1(N16),WAREA1           CLEAR WORK AREAS TO ZEROES
         TM    SWSB,V20                     IS SEARCH USING ENTRYNAME
         BO    SEARCH6                      YES, GO FIND DISPLACMENT
         L     WORK1,POFFSET                SEARCH USING OFFSET
         LA    WORK1,N8(WORK1)              ADD LEN OF **GO
         ST    WORK1,POFFSET                NEW OFFSET
         B     OBJOFFST                     GO SEARCH USING OFFSET
*
*        THIS ROUTINE SEARCHS OS LOADER CESD INFO FOR A DISPLACEMENT
*        USING A CSECT NAME AS THE SEARCH ARGUMENT. WORK2 CONTAINS
*        THE PRESENT ENTRY ADDRESS, WORK3 CONTAINS THE END ADDRESS
*
SEARCH6  CR    WORK2,WORK3                  ANY MORE OS LOADER CESDS
         BL    CHECK6                       YES, GO CHECK THIS ENTRY
         LA    RETCODE,N32                  ENTRYNAME NOT IN CESD RCDS
         B     NOFIND                       NO, ERROR, CANNOT RESOLVE
CHECK6   CLC   ENTRYNAM(N8),N0(WORK2)       IS THIS THE CSECT
         BE    FOUND6                       YES, GO EXTRACT DISPLACEMNT
         LA    WORK2,N12(WORK2)             POINT TO NEXT ENTRY
         B     SEARCH6                      GO CHECK NEXT ENTRY
FOUND6   MVC   WAREA1+N1(N3),N9(WORK2)      LOADED ADDR OF THIS CSECT
         L     WORK4,WAREA1                 ADDR OF ENTRYNAME IN CORE
         S     WORK4,LOADNAMA               DISPL FROM LOADED ADDR
         ST    WORK4,ENTRNAMD               SAVE IN INFO BLOCK
         OI    MODSWS,V40                   INDICATE DISPLACEMENT PRSNT
         L     RETURN,CESD14                GET RETURN ADDRESS
         BR    RETURN                       RETURN
*
*        THIS ROUTINE SEARCHS OS LOADER CESD INFO FOR A CSECT NAME
*        USING AN OFFSET AS A SEARCH ARGUMENT.  WORK2 CONTAINS THE
*        PRESENT ENTRY ADDRESS AND WORK3 CONTAINS THE END ADDRESS
*
OBJOFFST L     WORK4,LOADNAMA               MAIN STORAGE LOADED ADDRESS
         A     WORK4,POFFSET                CREATE WHERE ADDRESS
         LA    WORK5,N1                     CREATE SMALL ADDRESS
         SR    WORK1,WORK1                  INDICATE NO CESD ENTRY ADDR
SEARCH7  CR    WORK2,WORK3                  ANY MORE CESD INFO
         BL    CHECK7                       YES, GO CHECK THIS ENTRY
         B     MAYBE7                       NO, GO SEE IF WE FOUND ONE
CHECK7   MVC   WAREA2+N1(N3),N9(WORK2)      GET LOADED ADDR OF THIS SEC
         C     WORK4,WAREA2                 IS WHERE ADDR AFTER THIS
         BNL   FOUND17                      YES, GO CHECK FUTHER
PTRTONXT LA    WORK2,N12(WORK2)             POINT TO NEXT ENTRY
         B     SEARCH7                      GO CHECK NEXT ENTRY
FOUND17  C     WORK5,WAREA2                 IS THIS ADDR AFTER LAST ONE
         BH    PTRTONXT                     NO, LAST SAVED ONE HIGHER
         L     WORK5,WAREA2                 YES, GET ITS LOADED ADDR
         LR    WORK1,WORK2                  POINT TO CLOSEST CSECT ENTY
         B     PTRTONXT                     GO POINT TO NEXT ONE
MAYBE7   LTR   WORK1,WORK1                  DID WE FIND ONE
         BC    N7,FOUND7                    YES, GO MOVE TO ENTRY BLOCK
         LA    RETCODE,N4                   NO ENTRYNAME FOR OFFSET
         B     TOCALLER                     NO, ERROR, NO CSECT FOUND
FOUND7   MVC   ENTRYNAM(N8),N0(WORK1)       ENTRYNAME TO INFO BLK
         S     WORK5,LOADNAMA               CALCULATE DISPLACEMENT
         ST    WORK5,ENTRNAMD               DISPLACMENT TO INFO BLOCK
         OI    MODSWS,V40                   ENTRYNAME DISPLACMENT HERE
         L     RETURN,CESD14                GET RETURN ADDRESS
         BR    RETURN                       RETURN
         SPACE 3
***********************************************************************
*                                                                     *
*        THE FOLLOWING SUB-ROUTINES HANDLE SECONDARY STORAGE I/O      *
*                                                                     *
***********************************************************************
         SPACE 2
*
*        THIS ROUTINE OPENS THE DCB FOR READING SECONDARY STORAGE.
*        DAIR IS LINKED TO IF IT IS NECESSARY TO ALLOCATE AND OBTAIN
*        A DDNAME FOR SYS1.LINKLIB
*
OPENDCB  ST    RETURN,OPDCB14               SAVE RETURN ADDRESS
         LA    WORK5,PDSDCB                 ADDR OF DCB IN WORK AREA
         USING IHADCB,WORK5                 BASE FOR DESCRIPTIVE DSECT
         TM    MODSWS,V04                   DO WE HAVE A PASSED DDNAME
         BZ    LINKLIB                      NO, PDS=LINKLIB, GO ALLOCAT
CHECKDCB TM    DCBOFLGS,V10                 IS DCB OPENED
         BZ    DOOPEN                       NO, GO OPEN DCB
         CLC   DDNAME(N8),OPENFDD           IS DCB OPENED FOR PASSED DD
         BNE   DOCLOSE                      NO, GO DO CLOSE AND OPEN
OPENDONE L     RETURN,OPDCB14               RESTORE RETURN ADDRESS
         BR    RETURN                       RETURN TO CALLER
DOCLOSE  BAL   RETURN,CHECKECB              GO CHECK FOR REQ TO END
         LA    PARMREG1,CLOSELST            ADDRESS OF CLOSE LIST
         CLOSE ((WORK5)),MF=(E,(PARMREG1))
DOOPEN   DS    0H
         MVC   DCBDDNAM(N8),DDNAME          OPEN DCB FOR PASSED DDNAME
         BAL   RETURN,CHECKECB              GO CHECK FOR REQ TO END
         LA    PARMREG1,OPENLIST            ADDRESS OF OPEN LIST
         OPEN  ((WORK5)),MF=(E,(PARMREG1))
PABEND3  EQU   *                            POSSIBLE ABEND RESUME ADDR
         TM    DCBOFLGS,V10                 WAS DCB OPENED SUCCESSFULLY
         DROP  WORK5
SMTOPEN  DS    0H                           SMT TESTCASE LABEL
*                                            OPEN UNSUCCESSFUL
*                                            RC FROM SYM IS 8
*                                            TESTCASE ID  TEQU5400
*                                            TESTCASE ID  TPCH6300
         BO    OPENOK                       YES, GO ON
         LA    RETCODE,N4                   CANNOT OPEN DCB
         B     SYSERR                       GO SET UP END AND GIVE MESG
OPENOK   MVC   OPENFDD(N8),DDNAME           INDICATE DD DCB OPENED FOR
         B     OPENDONE                     GO BACK AND RETURN TO CALLR
LINKLIB  TM    SWSC,V80                     IS A DDNAME FOR LINKLIB ON
         BZ    ALLOC                        NO, GO SET TO ALLOC - DAIR
         MVC   DDNAME(N8),LINKLBDD          YES, MOVE TO INFO BLOCK
         OI    MODSWS,V04                   INDICATE WE HAVE A DDNAME
         B     CHECKDCB                     GO CHECK STATUS OF DCB
ALLOC    EQU   *
         GETMAIN   RC,LV=N100,SP=N1         GET PARM BLOCK TO PASS-DAIR
PABEND2  EQU   *                            POSSIBLE ABEND RESUME ADDR
         LTR   RETCODE,RETCODE              IS RETURNCODE NON-ZERO
         BZ    SMTGET01                     IF ZERO, GO SET INDICATOR
         MVI   WAREA3,N8                    SAVE RETURN CODE
         LA    WORK2,N10                    GET SVC NUMBER
         LA    WORK5,N5                     INDICATE TO USE 5TH MACRO
         SPACE
DOPRINT1  BAL   RETURN,TERMIO               GO PUT MESG TO TERMINAL
         SR    RETCODE,RETCODE              CLEAR FOR RETURN CODE
         IC    RETCODE,WAREA3               RETURN CODE FOR CALLER
         B     TOCALLER                     RETURN TO CALLER
SMTGET01 DS    0H                           SMT TESTCASE LABEL
*                                           GET FAILED-DAIR PARM LIST
*                                           TESTCASE ID  TTSTC160
         OI    SWSC,V40                     INDICATE THEIR IS A PARM
*                                           LIST TO FREE IN THE STAE
*                                           RETRY RT IF WE ABEND IN
*                                           DAIR
         ST    PARMREG1,ADAIRCOR            SAVE ADDR OF DAIR LIST CORE
         USING DAPL,PARMREG1
         MVC   DAPLUPT(N4),TSTUPT           POINTER TO UPT FOR DAIR
         MVC   DAPLECT(N4),TSTECT           POINTER TO ECT FOR DAIR
         MVC   DAPLECB(N4),TSTCPECB         POINTER TO CP ECB FOR DAIR
         L     WORK1,TPLPTR                 OBTAIN POINTER TO THE
         USING TPL,WORK1                     PROTECTED STEP CONTROL
         MVC   DAPLPSCB(N4),TPLPSCB          BLOCK FOR DAIR
         DROP  WORK1
         LA    WORK1,N20(PARMREG1)          ADDR OF DAIR LIST FOR X'08'
         ST    WORK1,DAPLDAPB               INTO STANDARD LIST FOR DAIR
         DROP  PARMREG1
         USING DAPB08,WORK1
         LA    WORK2,N8                     DAIR REQ TYPE IS X'08'
         STH   WORK2,DA08CD                 PUT IN DAIR PARM LIST
         SR    WORK2,WORK2                  CLEAR REG TO ZEROES
         STH   WORK2,DA08FLG                FLAGS - ZERO
         ST    WORK2,DA08DARC               ERROR CODES - ZERO
         LA    WORK2,LINKPDS                ADDR OF DS NAME - LINKLIB
         ST    WORK2,DA08PDSN               INTO DAIR PARM LIST
         MVC   DA08DDN(N4),BLANKS           DDNAME IS BLANK
         MVC   DA08UNIT(N4),BLANKS          UNIT IS BLANK
         MVC   DA08SER(N4),BLANKS           VOL SER IS BLANK
         LA    WORK2,N256                   BLOCKSIZE IS 256
         ST    WORK2,DA08BLK                INTO DAIR LIST
         XC    DA08PQTY(N12),DA08PQTY       DASD SPACE REQ IS ZERO
         MVC   DA08MNM(N4),BLANKS           MEMBER NAME IS BLANKS
         MVC   DA08PSWD(N4),BLANKS          PASSWORD IS BLANK
         MVI   DA08DSP1,DA08SHR             DISP1 FIELD SET TO SHR
         MVI   DA08DPS2,DA08KEEP            DISP2 FIELD SET TO KEEP
         MVI   DA08DPS3,DA08KEP             DISP3 FIELD SET TO KEEP
         MVI   DA08CTL,V00                  CONTROL FIELD SET TO ZERO
         LA    RETURN,ALLOCOK               IF LINK FAILS GO TO ALLOCOK
         LINK  EP=IKJDAIR,ERRET=LINKERR1    GO TO DAIR
PABEND4  EQU   *                            POSSIBLE ABEND RESUME ADDR
         B     SMTDAIR                      SKIP LINK ERROR ROUTINE
LINKERR1 EQU   *
         LA    WORK5,N6                     USE 6TH FORM OF MACRO
         LA    WORK2,N6                     SET SVC #
         MVI   WAREA3,N8                    SAVE RETURN CODE
         LR    PARMREG0,PARMREG1            SHIFT ABEND CODE TO REG0
         B     DOPRINT1                     GO PRINT MSG
SMTDAIR  DS    0H                           SMT TESTCASE LABEL
*                                            LINK TO DAIR FAILED
*                                            TESTCASE ID  TTSTC160
         LR    WORK4,RETCODE                SAVE DAIR RETURN CODE
         LTR   PARMREG0,RETCODE             WAS DAIR SUCCESSFUL
         BZ    ALLOCOK                      YES, GO GET DDNAME
         B     DAIRFAIL                     NO, GO PRINT MSG
ALLOCOK  EQU   *
         MVC   LINKLBDD(N8),DA08DDN         GET LINKLIB DD OR BLANKS
         DROP  WORK1
         FREEMAIN  RC,LV=N100,A=(PARMREG1),SP=N1
         LTR   RETCODE,RETCODE              WAS RETURN CODE ZERO
         BZ    TURNOFF2                     YES, TURNOFF PARM LIST SW
         LA    WORK2,N120                   INDICATE SVC NUMBER
         MVI   WAREA3,N8                    SAVE RETURN CODE
         LA    WORK5,N5                     USE 1ST FORM OF SVCERR MAC
         B     DOPRINT1                     GO ISSUE ERROR MESSAGE
TURNOFF2 NI    SWSC,VBF                     TURN PARM LIST GOT SW OFF
         LTR   PARMREG0,WORK4               DID WE ALLOC LINKLIB
         BZ    ALLOCOK1                     YES, GO EXTRACT DDNAME
         BAL   RETURN,TERMIO                GO PUT MESG OUT
CODE8    LA    RETCODE,N8                   RC=8 FOR CALLER
         B     TOCALLER                     GO RETURN TO CALLER
ALLOCOK1 EQU   *
         MVC   DDNAME(N8),LINKLBDD          MOVE IT TO INFO BLOCK
         OI    MODSWS,V04                   INDICATE DDNAME PRESENT
         OI    SWSC,V80                     WE HAVE A DDNAME FOR LINKLB
         B     CHECKDCB                     GO CHECK STATUS OF DCB
*
*        THIS ROUTINE PERFORMS A POINT TO THE LOADNAME INFO IN THE PDS
*
DOPOINT  ST    RETURN,POINT14               SAVE RETURN ADDRESS
         BAL   RETURN,CHECKECB              GO CHECK FOR REQ FOR END
         FIND  (PARMREG1),(PARMREG0),C
         L     RETURN,POINT14               RETURN ADDRESS
         BR    RETURN                       RETURN TO CALLER
*
*        THIS ROUTINE READS SECONDARY STORAGE
*
DOREAD   ST    RETURN,READ14                SAVE RETURN ADDRESS
         LA    WORK4,LSTFREAD               ADDR OF DECB FOR E FORM
         BAL   RETURN,CHECKECB              GO CHECK FOR REQ FOR END
         LA    WORK3,BUFFER                 ADDRESS OF INPUT BUFFER
         LA    WORK5,PDSDCB                 ADDRESS OF DCB
         READ  (WORK4),SF,(WORK5),(WORK3),,,MF=E
         CHECK (WORK4)
         L     RETURN,READ14                GET RETURN ADDRESS
         BR    RETURN                       RETURN TO CALLER
*
*        THIS ROUTINE WILL ISSUE A NOTE FOR THE LAST RECORD READ
*
DONOTE   ST    RETURN,NOTE14                SAVE RETURN ADDRESS
         BAL   RETURN,CHECKECB              GO CHECK FOR REQ TO END
         NOTE  (PARMREG1)
         L     RETURN,NOTE14                GET RETURN ADDR
         BR    RETURN                       RETURN TO CALLER
         SPACE 3
***********************************************************************
*                                                                     *
*        THESE ROUTINES PERFORM LINKAGE TO THE SECOND SECTION OF SYM  *
*                                                                     *
***********************************************************************
         SPACE 2
DAIRFAIL EQU   *
         LA    PARMREG1,N20                 FIFTH ROUTINE IN 2ND SEC
         B     GOTO2SEC                     GO SET UP FOR 2ND SECTION
PRINT2   EQU   *
         LR    RETURN,WORK1                 PRESERVE REG WORK1
         LA    PARMREG1,N16                 FORTH ROUTINE IN 2ND SEC
         B     GOTO2SEC                     GO SET UP FOR 2ND SECTION
FOUNDSYM EQU   *
         LA    PARMREG1,N12                 FORTH ROUTINE IN 2ND SEC
         B     GOTO2SEC                     GO SET UP FOR 2ND SECTION
SYSERR   EQU   *
         LA    PARMREG1,N8                  THIRD ROUTINE IN 2ND SEC
         B     GOTO2SEC                     GO SET UP FOR 2ND SECTION
NOFIND   EQU   *
         LA    PARMREG1,N4                  SECOND ROUTINE IN 2ND SEC
         B     GOTO2SEC                     GO SET FOR 2ND SECTION
FIRSTENT EQU   *
         SR    PARMREG1,PARMREG1            FIRST ROUTINE IN 2ND SEC
GOTO2SEC L     WORK1,SECENTRY               ADDR OF ENTRY TO 2ND
         BR    WORK1                        GO TO SECOND CSECT
         SPACE 3
***********************************************************************
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
***********************************************************************
         SPACE 2
DEFAULTM DC    X'000001'                    DEFAULT MULTIPLICITY VALUE
WLENRCD  DC    C'WRNG.LEN.RECORD'           SYNADAF MESSAGE FOR WRONG
*                                            LENGTH RECORD
CCWLENFD DC    H'7'                         CCW LENGTH FIELD
DEFLENFD DC    H'0'                         DEFAULT LENGTH FIELD
LINKPDS  DC    H'12'                        LENGTH AND NAME OF LINKLIB
         DC    C'SYS1.LINKLIB'              FOR DAIR PARM LIST
SECENTRY DC    A(IKJEGMYS)                  ADDRESS OF SECOND CSECT
MOVEINST MVC   N0(N1,WORK2),N0(WORK3)       TARGET OF EX INSTR
RETRYADR DC    AL3(STAERTRY)                ADDR OF STAE RETRY ROUTINE
BLANKS   DC    8C' '                        BLANKS FOR CLEARING AREAS
NO2NDMSG DC    X'FF000000'                  RC NOT 0, NO 2ND LEV MSG IN
ABENDTAB DS    0F                           ABEND IC TABLE FOR STAE
         DC    X'5C'                        NO CORE CODE
         DC    AL3(PABEND1)                 RESUME IC AFTER GETMAIN
         DC    X'5C'                        NO CORE CODE
         DC    AL3(PABEND2)                 RESUME IC AFTER GETMAIN
         DC    X'60'                        OPEN FAILED CODE
         DC    AL3(PABEND3)                 RESUME IC AFTER OPEN
         DC    X'60'                        LINK FAILED CODE
         DC    AL3(PABEND4)                 RESUME IC AFTER LINK
         DC    X'FF'                        END OF ABEND IC TABLE
         SPACE 1
LIST     IKJEGSPL RTRY=STAERTRY,ABNTB=ABENDTAB,MODNM=IKJEGSYM,TNM=SYM
         SPACE 1
SUPERZAP DC    50CL1'Z'                     PATCH AREA
         EJECT
IKJEGMYS CSECT
*
*
         LR    SYMB2,WORK1                  ADDRESSABILITY
         USING IKJEGMYS,SYMB2                IKJEGMYS CSECT
         B     BTABLE(PARMREG1)             GO TO DESIRED ROUTINE
BTABLE   B     FIRSTIME                     FIRST TIME ROUTINE
         B     NOTFOUND                     UNRESOLVED SYMBOL ROUTINE
         B     NOTABLE                      CANNOT PROCESS SYMS ROUTINE
         B     BUILDSIB                     BUILD SYMINFO BLK ROUTINE
         B     PRINT3                       GO PRINT A MESSAGE
         B     DAIRERR                      GO DAIR ERROR ANALYSIS RTN
         SPACE 3
***********************************************************************
*                                                                     *
*        THIS SUB-ROUTINE PERFORMS FIRST TIME INITILIZATION.          *
*        A WORK AREA IS GOTTEN AND INITILIZED.                        *
*                                                                     *
***********************************************************************
         SPACE 2
FIRSTIME EQU   *
         GETMAIN   RC,LV=N72,SP=N1          GET A TEMPORARY SAVE AREA
         LTR   RETCODE,RETCODE              IS RETURN CODE ZERO
         BZ    SMTGET02                     IF SO, GO TO SMTGET02
         LA    RETURN,RC4                   SET RETURN ADDRESS
         LA    WORK5,N5                     USE SECOND FORM OF MACRO
         LA    WORK2,N10                    SET SVC NUMBER
         LA    WORK4,N8                     SET RETURN CODE
         MVI   WAREA3,N8                    SAVE RETRUN CODE
         B     DOPRINT                      GO ISSUE ERROR MSG
SMTGET02 DS    0H                           SMT TESTCASE LABEL
*                                            GET FAILED-TEMP SAVE AREA
*                                            TESTCASE ID  TTSTC160
         LR    WORK5,PARMREG1               ADDRESS OF GOTTEN CORE
         L     WORK1,WORKAREA               ADDR OF GENERAL CMD WKAREA
         USING TSTCWORK,WORK1               BASE FOR DESCRIPTIVE DSECT
         LA    WORK2,CWORKSYM               ADDR OF SYM PART OF WKAREA
         MVC   N4(N12,WORK2),LFGET          LIST FORM OF GET TO WKAREA
         LA    PARMREG1,N4(WORK2)           ADDR OF LIST FORM FOR GET
         GETMAIN   EC,LV=N800,A=(WORK2),SP=N1,MF=(E,(PARMREG1))
         LTR   RETCODE,RETCODE              DID WE GET THE CORE
SMTGET03 DS    0H                           SMT TESTCASE LABEL
*                                            INSUFFICIENT CORE FOR WORK
*                                            AREA-RC FROM SYM IS 4
*                                            TESTCASE ID  TTSTC160
         BZ    GETOK                        YES, GO CONTINUE PROCESSING
*
*        SETUP TO GIVE INSUFFICIENT MAIN STORAGE MESSAGE
*
         ST    SYMWKB,N4(WORK5)              TO PUT OUT INSUFFICIENT
         LR    SYMWKB,WORK5                  STORAGE MESSAGE
         SR    WORK5,WORK5                  CLEAR REG FOR LATER USE
         TM    TSTFLGS3,SYMMESG             SHOULD WE PRINT A MESSAGE
         BO    FREECORE                     NO, GO FREE TEMP SAVE AREA
         ST    WORK5,N8(SYMWKB)             USE TEMPORARY SAVE AREA
         L     WORK6,NOCOREMG               ADDRESS OF NO CORE MESSAGE
         LA    WORK5,N5                     USE FOURTH FORM OF MACRO
         LA    WORK2,N10                    SET SVC NUMBER
         MVI   WAREA3,N8                    SAVE RETURN CODE
         BAL   RETURN,DOPRINT               GO ISSUE ERROR MSG
         LR    WORK5,RETCODE                SAVE RETCODE FROM I/O
FREECORE EQU   *
         LR    WORK3,SYMWKB                 ADDR OF TEMP SAVE TO FREE
         L     SYMWKB,N4(SYMWKB)            ADDR OF CALLERS SAVE AREA
         FREEMAIN  RC,LV=N72,A=(WORK3),SP=N1 FREE TEMPORARY SAVE AREA
*  THERE IS NO REASON TO CHECK RETURN CODE HERE SINCE WE ARE ON OUR
* WAY OUT BECAUSE OF ERROR IN GETMAIN ABOVE
         LTR   WORK5,WORK5                  WAS I/O SUCCESSFUL
         BZ    RC4                          YES, GO GIVE RETURN CODE 4
         LR    RETCODE,WORK5                NO, PASS BACK I/O RET CODE
         B     TOCALL                       GO RETURN TO CALLER
RC4      EQU   *
         LA    RETCODE,N4                   NO CORE RETURN CODE IS 4
         B     TOCALL                       GO RETURN TO CALLER
*
*        INITILIZE WORK AREA
*
GETOK    EQU   *
         FREEMAIN  RC,LV=N72,A=(WORK5),SP=N1 FREE TEMPORARY SAVE AREA
         LTR   RETCODE,RETCODE              IS RETURN CODE ZERO
         BZ    GETADDR                      IF SO, GET ADDRESS OF CORE
         LA    WORK5,N5                     USE FIFTH FORM OF MACRO
         LA    WORK2,N120                   GET SVC NUMBER
         BAL   RETURN,TERMIO                GO PRINT MSG
         LA    RETCODE,N8                   SET RETURN CODE TO 8
         B     TOCALLER                     RETURN
GETADDR  EQU   *
         L     WORK5,CWORKSYM               ADDRESS OF GOTTEN CORE
         DROP  WORK1
         ST    WORK5,N8(SYMWKB)             MYSAVE ADDR IN CALLERS AREA
         ST    SYMWKB,N4(WORK5)             HIS SAVE ADDR IN MY AREA
         LR    SYMWKB,WORK5                 MY SAVE ADDR IN PROPER REG
         ST    SYMWKB,TSTSYMWK              WKAREA ADDR INTO TCOMTAB
         MVC   STAELIST(LENSTAE),LFSTAE  ESTAE LIST FORM  TO WKAREA
         MVC   OPENLIST(N8),LFOPEN          OPEN LIST TO THE WORK AREA
         MVC   CLOSELST(N8),LFCLOSE         CLOSE LIST TO THE WORK AREA
         MVC   LSTFREAD(N24),SSDECB         LIST FORM READ TO WORK AREA
         MVC   PDSDCB(N88),BPAMDCB          MOVE DCB TO WORK AREA
         LA    WORK1,PDSDCB                 ADDR OF DCB
         ST    WORK1,PDSDCBA                INTO ADDR PART OF WORK AREA
         LA    WORK1,CINFOBLK               ADDR OF CURRENT INFO BLOCK
         ST    WORK1,CINFOBKA               INTO ADDR PART OF WORK AREA
         LA    WORK1,TINFOBLK               ADDR OF TEMP INFO BLOCK
         ST    WORK1,TINFOBKA               INTO ADDR PART OF WORK AREA
         LA    WORK1,BUFFER                 ADDR OF BUFFER
         ST    WORK1,BUFFERA                INTO ADDR PART OF WORK AREA
         LA    INFOBLKB,CINFOBLK            ADDR OF WORK AREA TO CLEAR
         MVI   CINFOBLK,V40                 BLANK TO CURR INFO BLK AREA
         MVC   CINFOBLK+N1(N23),CINFOBLK    BLANK CHAR INFO
         XC    LOADNAMA(N32),LOADNAMA       ZERO OUT OUT DATA
         XC    WHATPASS(N4),WHATPASS        SET ALL SWITCHES TO ZEROES
         B     IKJEGBEG                     GO BACK TO MAIN STREAM IN
*                                            FIRST SECTION
         SPACE 2
***********************************************************************
*                                                                     *
*        SYMBOL FOUND, BUILD ANSWER BLOCK, RET CODE= ZERO, RETURN     *
*        WORK3 POINTS TO FOUND SYMBOL                                 *
*        IF THE SYMBOL WAS FOUND IN A DSECT, THE DSECT NAME WILL BE   *
*        IN WAREA1                                                    *
*                                                                     *
***********************************************************************
         SPACE 2
BUILDSIB EQU   *
         GETMAIN   RC,LV=N16,SP=N1           GET A SYMINFO ANSWER BLOCK
PABEND1  EQU   *                            POSSIBLE ABEND RESUME ADDR
         LTR   RETCODE,RETCODE              IS RETURN CODE ZERO
         BZ    SMTGET04                     IF SO, GO TO SMTGET04
         LA    WORK5,N5                     USE 5TH FJORM OF MACRO
         LA    WORK2,N10                    SET SVC #
         BAL   RETURN,TERMIO                GO PRINT MSG
         LA    RETCODE,N8                   SET RETURN CODE
         B     TOCALLER                     RETURN TO CALLER
SMTGET04 DS    0H                           SMT TESTCASE LABEL
*                                            GET FAILED-SYMINFO BLK-SIB
*                                            TESTCASE ID  TTSTC160
         LA    WORK2,N0(PARMREG1)           ADDR OF GOTTEN CORE
         LA    WORK1,N1                     CREATE 'OR' REG TO SET HIGH
         SLL   WORK1,N31                     ORDER BIT ON
         OR    WORK2,WORK1                  INDICATE POINTER TO ANSW BK
         ST    WORK2,PDEUSER                RETURN IT TO CALLER IN PDE
         LA    WORK2,N0(WORK2)              CLEAR HIGH ORDER BYTE
         SR    PARMREG1,PARMREG1            CLEAR REGISTER
         ST    PARMREG1,N12(WORK2)          LAST BLOCK POINTER IS ZERO
         L     WORK1,SICHAIN                HEAD OF ANSWER BLOCK CHAIN
         LTR   WORK1,WORK1                  IS THEIR A CHAIN
         BC    N7,SEARCH9                   YES, GO SEARCH FOR LAST ONE
         ST    WORK2,SICHAIN                NO, START CHAIN
         B     GOTBLK                       GO FILL IN ANSWER BLOCK
SEARCH9  C     PARMREG1,N12(WORK1)          IS IT END OF CHAIN
         BE    FOUND9                       YES, GO ADD TO CHAIN
         L     WORK1,N12(WORK1)             NO, POINT TO NEXT BLOCK
         B     SEARCH9                      GO CHECK FOR END OF CHAIN
FOUND9   ST    WORK2,N12(WORK1)             LAST BLOCK POINTS TO NEW 1
         USING SYMINFO,WORK2                BASE FOR DESCRIPTIVE DSECT
GOTBLK   LTR   WORK3,WORK3                  WHERE WAS SYMBOL FOUND
         BP    SYMRCD                       IN A SYM RCD ON SEC STORAGE
         LPR   WORK3,WORK3                  ADDR OF INCORE SYMBOL
         USING INCORE,WORK3                 BASE FOR INCORE SYMTAB DSEC
         MVC   ZERO1(N10),ZERO2             INCORE SYM INFO-SYMINFO BLK
         DROP  WORK3
         SR    RETCODE,RETCODE              RET CODE EQUAL ZERO
         B     TOCALLER                     GO BACK TO RET TO CALLER
*
SYMRCD   TM    SWSA,V20                     WAS SYMBOL FOUND IN A DSECT
         BZ    GOODSYM                      NO, USE BASE FOR SYMS
         STM   WORK1,WORK3,WORKSAVE         SAVE POINTERS
         BAL   RETURN,DSECTIN               GO SEARCH INCORE SYMS-DSECT
         LTR   RETCODE,RETCODE              WAS THE DSECT FOUND
         BZ    FOUNDD                       YES, GO EXTRACT ADDR
         LA    RETCODE,N28                  UNRESOLVED, 2ND LEV MESG 28
         B     NOFIND                       NO, ERROR CANNOT RESOLVE
FOUNDD   LPR   WORK3,WORK3                  ADDR OF ADDR BASE FOR DSECT
         L     WORK4,N4(WORK3)              BASE FOR SYMBOL
         LM    WORK1,WORK3,WORKSAVE         RESTORE POINTERS
         B     DSECTIN2                     GO FILL IN ANSWER BLOCK
GOODSYM  L     WORK4,BASEFSYM               BASE FOR SYMBOLS
DSECTIN2 MVC   WAREA2+N1(N3),N1(WORK3)      ALIGN SYMBOL DISPL
         L     WORK5,WAREA2                 SYM DISPLACEMENT
         LA    WORK5,N0(WORK5)              SYM DISP FOR ADDING
         AR    WORK4,WORK5                  LOADED ADDR OF SYMBOL
         ST    WORK4,ZERO1                  RETURN IN SYMINFO ANSWER BK
         SR    WORK1,WORK1                  CLEAR REG FOR IC INSTR
         IC    WORK1,N0(WORK3)              GET ORGANIZATION TYPE BYTE
         LA    WORK4,N15                    CREATE 'AND' BYTE
         NR    WORK1,WORK4                  LENGTH OF NAME-1
         LA    WORK1,N5(WORK1,WORK3)        ADDR OF DATA TYPE FIELD
         MVC   TYPE(N1),N0(WORK1)           DATA TYPE TO ANSWER BLOCK
         CLI   N0(WORK1),V08                DATA TYPE TELLS LEN FIELD
         BH    LEN1BYTE                     LENGTH FIELD-1 BYTE LONG
         MVC   LENGTH(N2),N1(WORK1)         2 BYTE LEN FIELD TO ANS BLK
         LH    WORK5,LENGTH                 LENGTH-1 OF SYMBOL'S CORE
         LA    WORK5,N1(WORK5)              LENGTH OF RESERVED M.S.
         STH   WORK5,LENGTH                 LEN TO ANSWER BLOCK
         LA    WORK1,N3(WORK1)              ADDR OF MULITIPLICITY FIELD
         B     CHECKM                       GO CHECK FOR MULITIPLICITY
LEN1BYTE SR    WORK5,WORK5                  CLEAR REGISTER
         IC    WORK5,N1(WORK1)              GET 1 BYTE LENGTH FIELD
         LA    WORK5,N1(WORK5)              LEN OF RESERVED CORE
         STH   WORK5,LENGTH                 LEN FIELD TO ANSWER BLOCK
         LA    WORK1,N2(WORK1)              ADDR OF MULTIPLICITY FIELD
CHECKM   TM    N0(WORK3),V40                IS MULTIPLICITY PRESENT
         BZ    NOM                          NO, GO GET DEFAULT
         MVC   MULTIPLT(N3),N0(WORK1)       MULTIPLICITY TO ANSWER BLK
         B     BUILTBLK                     ANSWER BLK BUILT, GO ON
NOM      EQU   *
         MVC   MULTIPLT(N3),DEFAULTM        MOVE 1 TO ANSWER BLOCK
BUILTBLK SR    RETCODE,RETCODE              RETCODE = ZERO
         B     TOCALLER                     GO RETURN TO CALLER
         DROP  WORK2
         SPACE 2
***********************************************************************
*                                                                     *
*        THIS ROUTINE RETURNS TO THE CALLER WHEN NOT ABLE TO RESOLVE  *
*        A REQUEST.  ERROR MESSAGES ARE PRINTED IF                    *
*                  SYMMESG SWITCH, EGUATED TO B'00100000', IN THE     *
*                  TSTFLGS3 FIELD OF TCOMTAB DSECT IS OFF             *
*                                                                     *
***********************************************************************
         SPACE 2
*
*        MESSAGE   IKJ57280I
*
NOTFOUND EQU   *
         BAL   RETURN,MSGRT1                GO SET UP FOR MESSAGES
*
*        SECOND LEVEL FOR IKJ57280I
*
         B     M0GETSEC(WORK5)              GO GET PROPER SECOND LEVEL
M0GETSEC B     CODEONLY                     GO GIVE RETCODE ONLY
         B     NOFIND04                     ERROR CODE 04, MESG M0L2A
         B     NOFIND08                     ERROR CODE 08, MESG M0L2B
         B     NOFIND12                     ERROR CODE 12, MESG M0L2C
         B     NOFIND16                     ERROR CODE 16, MESG M0L2D
         B     NOFIND20                     ERROR CODE 20, MESG M0L2E
         B     NOFIND24                     ERROR CODE 24, MESG M0L2F
         B     NOFIND28                     ERROR CODE 28, MESG M0L2G
         B     NOFIND32                     ERROR CODE 32, MESG M0L2H
         B     NOFIND36                     ERROR CODE 36, MESG M0L2I
         B     NOFIND40                     ERROR CODE 40, MESG M0L2J
         B     NOFIND44                     ERROR CODE 44, MESG M0L2K
         SPACE
**********************************************************************
*  WORK1 - WILL POINT TO AN INSERT WHICH CONTAINS THE LOADNAME
*  WORK2 - WILL CONTAIN SECOND LEVEL MESSAGE ID NUMBER (M0L2AP1)
*  WORK5 - WILL INDICATE WHICH FORM OF THE IKJEGSIO MACRO TO USE
*  WORK6 - WILL CONTAIN FIRST LEVEL MESSAGE ID NUMBER (M0L1P1)
**********************************************************************
NOFIND04 MVC   N0(N4,WORK1),INSRTLEN        MOVE LENGTH INDIC TO INSERT
         MVC   N4(N8,WORK1),LOADNAME        LOADNAME TO INSERT
         MVI   N12(WORK1),V40               BLANK AT END OF INSERT
         L     WORK2,M0L2AP1                ID # OF SECOND LEVEL MESG
         L     WORK6,M0L1P1                 ID # OF FIRST LEVEL MESG
         LA    WORK5,N1                     USE FIRST FORM OF MACRO
         B     DOPRINT                      GO PRINT MESSAGE
         SPACE
**********************************************************************
*  WORK1 - WILL POINT TO AN INSERT WHICH CONTAINS THE LOADNAME       *
*  WORK2 - WILL CONTAIN SECOND LEVEL MESSAGE ID NUMBER (MOL2BP1)     *
*  WORK5 - WILL INDICATE WHICH FORM OF THE IKJEGSIO MACRO TO USE     *
*  WORK6 - WILL CONTAIN FIRST LEVEL MESSAGE ID NUMBER (M0L1P1)
**********************************************************************
**********************************************************************
NOFIND08 DS    0H
         MVC   N0(N4,WORK1),INSRTLEN        MOVE LENGTH INDIC TO INSERT
         MVC   N4(N8,WORK1),LOADNAME        LOADNAME TO INSERT
         MVI   N12(WORK1),V40               BLANK AT END OF INSERT
         L     WORK2,M0L2BP1                ID # OF SECOND LEVEL MESG
         L     WORK6,M0L1P1                 ID # OF FIRST LEVEL MESG
         LA    WORK5,N1                     USI FIRST FORM OF MACRO
         B     DOPRINT                      GO PRINT MESSAGE
         SPACE
**********************************************************************
*  WORK1 - WILL POINT TO AN INSERT WHICH CONTAINS THE LOADNAME       *
*  WORK2 - WILL CONTAIN SECOND LEVEL MESSAGE ID NUMBER (MOS2CP1)     *
*  WORK5 - WILL INDICATE WHICH FORM OF THE MACRO TO USE              *
*  WORK6 - WILL CONTAIN FIRST LEVEL MESSAGE ID NUMBER (M0L1P1)
**********************************************************************
**********************************************************************
NOFIND12 MVC   N0(N4,WORK1),INSRTLEN        MOVE LENGTH INDIC TO INSERT
         MVC   N4(N8,WORK1),LOADNAME        LOADNAME TO INSERT
         MVI   N12(WORK1),V40               BLANK AT END OF INSERT
         L     WORK2,M0L2CP1                GET SECOND LEVEL MESG  ID #
         L     WORK6,M0L1P1                 GET FIRST LEVEL MESG  ID #
         LA    WORK5,N1                     USE FIRST FORM OF MACRO
         B     DOPRINT                      GO PRINT MESSAGE
         SPACE
**********************************************************************
*  WORK1 - WILL POINT TO AN INSERT WHICH CONTAINS THE LOADNAME
*  WORK2 - WILL CONTAIN SECOND LEVEL MESSAGE ID NUMBER (M0L2DP1)
*  WORK5 - WILL INDICATE WHICH FORM OF THE MACRO TO USE
*  WORK6 - WILL CONTAIN FIRST LEVEL MESSAGE ID NUMBER (M0L1P1)
**********************************************************************
NOFIND16 MVC   N0(N4,WORK1),INSRTLEN        MOVE LENGTH INDIC TO INSERT
         MVC   N4(N8,WORK1),LOADNAME        LOADNAME TO INSERT
         MVI   N12(WORK1),V40               BLANK AT END OF INSERT
         L     WORK2,M0L2DP1      GET SECOND LEVEL MSG ID # @ZA*****
         LA    WORK5,N1                     USE FIRST FORM OF MACRO
         L     WORK6,M0L1P1                 GET FIRST LEVEL MESG ID #
         B     DOPRINT                      GO PRINT MESSAGE
         SPACE
**********************************************************************
*  WORK1 - WILL POINT TO AN INSERT WHICH CONTAINS THE LOADNAME
*  WORK2 - WILL CONTAIN SECOND LEVEL MESSAGE ID NUMBER (MOL2EP1)
*  WORK5 - WILL INDICATE WHICH FORM OF THE IKJEGSIO MACRO TO USE
*  WORK6 - WILL CONTAIN FIRST LEVEL MESSAGE ID NUMBER (M0L1P1)
**********************************************************************
**********************************************************************
NOFIND20 MVC   N0(N4,WORK1),INSRTLEN        MOVE LENGTH INDIC TO INSERT
         MVC   N4(N8,WORK1),LOADNAME        LOADNAME TO INSERT
         MVI   N12(WORK1),V40               BLANK AT END OF INSERT
         L     WORK2,M0L2EP1                GET SECOND LEVEL MESG ID #
         LA    WORK5,N1                     USE FIRST FJORM OF MACRO
         L     WORK6,M0L1P1                 GET FIRST LEVEL MESG ID #
         B     DOPRINT                      GO PRINT MESSAGE
         SPACE
**********************************************************************
*  WORK1 - WILL POINT TO AN INSERT WHICH CONTAINS THE PSYMBOL
*  WORK2 - WILL CONTAIN SECOND LEVEL MESSAGE ID NUMBER (M0L2FP1)
*  WORK3 - WILL POINT TO AN INSERT WHICH CONTAINS THE LOADNAME
*  WORK4 - WILL POINT TO AN INSERT WHICH CONTAINS THE ENTRYNAM
*  WORK5 - WILL INDICATE WHICH FORM OF THE IKJEGSIO MACRO TO USE
*  WORK6 - WILL CONTAIN FIRST LEVEL MESSAGE ID NUMBER (M0L1P1)
**********************************************************************
NOFIND24 DS    0H
         LR    WORK3,WORK1                  GET POINTER TO WORKAREA
         MVC   N0(N4,WORK3),INSRTLEN        MOVE LENGTH INDIC TO INSERT
         MVC   N4(N8,WORK3),LOADNAME        LOADNAME TO INSERT
         MVI   N12(WORK1),V40               BLANK AT END OF INSERT
         LA    WORK1,N13(WORK3)             GET POINTER TO NEXT INSERT
         MVC   N0(N4,WORK1),INSRTLEN        MOVE LENGTH INDIC TO INSERT
         MVC   N4(N8,WORK1),PSYMBOL         PSYMBOL TO INSERT
         MVI   N12(WORK1),V40               BLANK AT END OF INSERT
         LA    WORK4,N13(WORK1)             GET POINTER TO NEXT INSERT
         MVC   N0(N4,WORK4),INSRTLEN        MOVE LENGTH INDIC TO INSERT
         MVC   N4(N8,WORK4),ENTRYNAM        PSYMBOL TO INSERT
         MVI   N12(WORK4),V40               BLANK AT END OF INSERT
         L     WORK2,M0L2FP1                GETSECOND LEVEL MESG ID #
         LA    WORK5,N3                     USE THIRD FORM OF MACRO
         L     WORK2,M0L2FP1                GETSECOND LEVEL MESG ID #
         L     WORK6,M0L1P1                 GET FIRST LEVEL MESG ID #
         B     DOPRINT                      GO PRINT MESSAGE
         SPACE
**********************************************************************
*  WORK1 - WILL POINT TO AN INSERT WHICH CONTAINS THE PSYMBOL
*  WORK2 - WILL CONTAIN SECOND LEVEL MESSAGE ID NUMBER (M0L2FP1)
*  WORK3 - WILL POINT TO AN INSERT WHICH CONTAINS THE DSECT NAME
*  WORK5 - WILL INDICATE WHICH FORM OF THE IKJEGSIO MACRO TO USE
*  WORK6 - WILL CONTAIN FIRST LEVEL MESSAGE ID NUMBER (M0L1P1)
**********************************************************************
NOFIND28 MVC   N0(N4,WORK1),INSRTLEN        MOVE LENGTH INDIC TO INSERT
         MVC   N4(N8,WORK1),PSYMBOL         PSYMBOL TO INSERT
         MVI   N12(WORK1),V40               BLANK AT END OF INSERT
         LA    WORK3,N13(WORK1)             NEXT INSERT POSITION
         MVC   N0(N4,WORK3),INSRTLEN        MOVE LENGTH INDIC TO INSERT
         MVC   N4(N8,WORK3),WAREA1          DSECT NAME TO INSERT
         MVI   N12(WORK3),V40               BLANK AT END OF INSERT
         L     WORK2,M0L2GP2                ID # OF SECOND LEVEL MESG
         LA    WORK5,N2                     USE SECOND FORM OF MACRO
         L     WORK6,M0L1P1                 ID # OF FIRST LEVEL MESG
         B     DOPRINT                      GO PRINT MESSAGE
         SPACE
**********************************************************************
*  WORK1 - WILL POINT TO AN INSERT WHICH CONTAINS THE ENTRYNAM
*  WORK2 - WILL CONTAIN SECOND LEVEL MESSAGE ID NUMBER (M0L2HP1)
*  WORK3 - WILL POINT TO AN INSERT WHICH CONTAINS THE LOADNAME
*  WORK5 - WILL INDICATE WHICH FORM OF THE MACRO IKJEGSIO TO USE
*  WORK6 - WILL CONTAIN FIRST LEVEL MESSAGE ID NUMBER (M0L1P1)
**********************************************************************
NOFIND32 MVC   N0(N4,WORK1),INSRTLEN        MOVE LENGTH INDIC TO INSERT
         MVC   N4(N8,WORK1),ENTRYNAM        ENTRYNAM TO INSERT
         MVI   N12(WORK1),V40               BLANK AT END OF INSERT
         LA    WORK3,N13(WORK1)             NEXT INSERT POSITION
         MVC   N0(N4,WORK3),INSRTLEN        MOVE LENGTH INDIC TO INSERT
         MVC   N4(N8,WORK3),LOADNAME        LOADNAME TO INSERT
         MVI   N12(WORK3),V40               BLANK AT END OF INSERT
         L     WORK2,M0L2HP1                ID OF SECOND LEVEL MESG
         LA    WORK5,N2                     USE SECOND FORM OF MACRO
         L     WORK6,M0L1P1                 ID OF FIRST LEVEL MESG
         B     DOPRINT                      GO PRINT MESSAGE
         SPACE
**********************************************************************
*  WORK1 - WILL POINT TO AN INSERT WHICH CONTAINS THE ENTRYNAM
*  WORK2 - WILL CONTAIN SECOND LEVEL MESSAGE ID NUMBER (M0L2IP1)
*  WORK5 - WILL INDICATE WHICH FORM OF THE MACRO, IKJEGSIO, TO USE
*  WORK6 - WILL CONTAIN FIRST LEVEL MESSAGE ID NUMBER (M0L1P1)
**********************************************************************
NOFIND36 MVC   N0(N4,WORK1),INSRTLEN        MOVE LENGTH INDIC TO INSERT
         MVC   N4(N8,WORK1),ENTRYNAM        ENTRYNAM TO INSERT
         MVI   N12(WORK1),V40               BLANK AT END OF INSERT
         L     WORK2,M0L2IP1                ID # OF SECOND LEVEL MESG
         LA    WORK5,N1                     USE FIRTST FORM OF MACRO
         L     WORK6,M0L1P1                 ID # OF FIRST LEVEL MESG
         B     DOPRINT                      GO PRINT MESSAGE
         SPACE
**********************************************************************
*  WORK1 - WILL POINT TO AN INSERT WHICH CONTAINS THE LOADNAME
*  WORK2 - WILL CONTAIN SECOND LEVEL MESSAGE ID NUMBER (M0L2JP1)
*  WORK3 - WILL POINT TO AN INSERT WHICH CONTAINS THE ENTRYNAM
*  WORK5 - WILL INDICATE WHICH FORM OF THE MACRO IKJEGSIO TO USE
*  WORK6 - WILL CONTAIN THE FIRST LEVEL MESSAGE ID NUMBER (M0L1P1)
**********************************************************************
NOFIND40 MVC   N0(N4,WORK1),INSRTLEN        MOVE LENGTH INDIC TO INSERT
         MVC   N4(N8,WORK1),LOADNAME        LOADNAME TO INSERT
         MVI   N12(WORK1),V40               BLANK AT END OF INSERT
         LA    WORK3,N13(WORK1)             NEXT INSERT POSITION
         MVC   N0(N4,WORK3),INSRTLEN        MOVE LENGTH INDIC TO INSERT
         MVC   N4(N8,WORK3),ENTRYNAM        ENTRYNAM TO INSERT
         MVI   N12(WORK1),V40               BLANK AT END OF INSERT
         L     WORK2,M0L2JP1                ID # OF SECOND LEVEL MESG
         LA    WORK5,N2                     USE SECOND FORM OF MACRO
         L     WORK6,M0L1P1                 ID # OF FIRST LEVEL MESG
         B     DOPRINT                      GO PRINT MESSAGE
         SPACE
**********************************************************************
*  WORK1 - WILL POINT TO AN INSERT WHICH CONTAINS THE LOADNAME
*  WORK2 - WILL CONTAIN SECOND LEVEL MESSAGE ID NUMBER (M0L2KP1)
*  WORK5 - WILL INDICATE WHICH FORM OF THE MACRO, IKJEGSIO, TO USE
*  WORK6 - WILL CONTAIN FIRST LEVEL MESSAGE ID NUMBER (M0L1P1)
**********************************************************************
NOFIND44 MVC   N0(N4,WORK1),INSRTLEN        MOVE LENGTH INDIC TO INSERT
         MVC   N4(N8,WORK1),LOADNAME        LOADNAME TO INSERT
         MVI   N12(WORK1),V40               BLANK AT END OF INSERT
         L     WORK2,M0L2KP1                ID # OF SECOND LEVEL MESG
         LA    WORK5,N1                     USE FIRST FORM OF MACRO
         L     WORK6,M0L1P1                 ID # OF FIRST LEVEL MESG
         B     DOPRINT                      GO PRINT MESSAGE
*
*        MESSAGE   IKJ57281I
*
         SPACE
**********************************************************************
*  WORK2 - WILL CONTAIN SECOND LEVEL MESSAGE ID NUMBER (M2L2AP1)
*  WORK5 - WILL INDICATE WHICH FORM OF THE IKJEGSIO MACRO TO USE
*  WORK6 - WILL CONTAIN FISRT LEVEL MESSAGE ID NUMBER (M1L211)
**********************************************************************
NOTABLE  EQU   *
         BAL   RETURN,MSGRT1                GO SET UP FOR MESSAGES
         L     WORK2,M1L2BP1                ID # OF 2ND LEVEL MESSAGE
         L     WORK6,M1L1P1                 ID # OF 1ST LEVEL MESSAGE
*
*        SECOND LEVEL FOR IKJ57281I
*
         B     M1GETSEC(WORK5)              GO GET PROPER SECOND LEVEL
M1GETSEC B     CODEONLY                     GO GIVE RET CODE ONLY
         B     SYSERR04                     ERROR CODE 04, MESG M1L2B
         SPACE
**********************************************************************
*  WORK1 - WILL POINT TO AN INSERT WHICH CONTAINS THE DDNAME
*  WORK2 - WILL CONTAIN SECOND LEVEL MESSAGE ID NUMBER (PRESET)
*  WORK5 - WILL INDICATE WHICH FORM OF THE MACRO, IKJEGSIO, TO USE
*  WORK6 - WILL CONTAIN FIRST LEVEL MESSAGE ID NUMBER (M0L1P1)
**********************************************************************
SYSERR04 MVC   N0(N4,WORK1),INSRTLEN        INSERT LENGTH INDIC TO MESG
         MVC   N4(N8,WORK1),DDNAME          DDNAME TO MESSAGE
         LA    WORK5,N1                     INDICATE 1ST MACRO FORM
         B     DOPRINT                      GO PRINT MESSAGE
*
*        SUB ROUTINES FOR MESSAGE BUILDING
*
MSGRT1   EQU   *
         LR    WORK4,PARMREG1               RETURN CODE FOR CALLER
         STC   WORK4,WAREA3                 SAVE RETURN CODE
         LR    WORK5,RETCODE                SECOND LEVEL MESSAGE NUMBER
         TM    TSTFLGS3,SYMMESG             SHOULD WE PRINT A MESSAGE
         BO    CODEONLY                     NO, GO GIVE RETURN CODE
         LTR   RETCODE,RETCODE              IS UNRESOLVED RETURN CODE 0
         BZ    CODEONLY                     YES, GO GIVE RETURN CODE
         LA    WORK1,BUFFER                 ADDR OF FIRST LEVEL BUFFER
         BR    RETURN                       RETURN TO CALLER
MSGRT2   EQU   *
         ST    RETURN,MSGRT214              SAVE RETURN ADDRESS
         LA    PARMREG1,N0(WORK1,WORK2)     NEXT LOCATION IN BUFFER
         LR    PARMREG0,PDEB                POINTER TO ADDRESS PDE
         L     RETCODE,TSTADDR              PTR TO ADDRESS BUILD RT
         BALR  RETURN,RETCODE               GO ADD ADDRESS TO MESSAGE
         AR    WORK2,PARMREG0               LENGTH OF MESSAGE, SO FAR
         L     RETURN,MSGRT214              RETURN ADDRESS
         BR    RETURN                       RETURN TO CALLER
MSGRT3   EQU   *
         SLL   WORK2,N16                    LL00 FIELD FOR FIRST LEV
         ST    WORK2,BUFFER                 PREFIX MESG WITH LL00 FIELD
         LA    WORK1,MIDBUFF                ADDR OF SECOND LEVEL BUFFER
         MVC   N4(N10,WORK1),N0(WORK3)      MESG ID FOR SECOND LEVEL
         LA    WORK2,N14                    LENGTH OF SECOND LEV SO FAR
         LA    WORK1,N0(WORK1,WORK2)        NEXT LOATION IN BUFFER
         BR    RETURN                       RETURN TO CALLER
*
*        PUT OUT MESSAGE
*
DOPRINT  EQU   *
         BAL   RETURN,TERMIO                GO PUT MESG TO TERMINAL
CODEONLY EQU   *
         SR    RETCODE,RETCODE              CLEAR FOR RETURN CODE
         IC    RETCODE,WAREA3               RETURN CODE FOR CALLER
         B     TOCALLER                     GO BACK
         SPACE 2
***********************************************************************
*                                                                     *
*        THIS IS THE SYNAD ROUTINE FOR READING SECONDARY  STORAGE.    *
*        THE SYNADAF ROUTINE IS USED TO OBTAIN A SYSTEM INFO MESG.    *
*        THE SYNAD ROUTINE WILL CHECK FOR AN ATTEMPT TO READ A RECORD *
*        GREATER THAN 256 BYTES.  SUCH A RECORD WOULD IMPLY THE END   *
*        OF CESD RECORDS AND WOULD NOT BE A REAL I/O ERROR            *
*                                                                     *
***********************************************************************
         SPACE 2
SYMSYNAD EQU   *
         L     SYMB2,SECENTRY               ESTABLISH ADDRESSABILITY
         SYNADAF   ACSMETH=BPAM
         LR    WORK2,SYMWKB                 SAVE ADDR OF SYNADAF SAVE
         L     SYMWKB,N4(SYMWKB)            ADDRESS OF MY WORK AREA
         LA    WORK1,MIDBUFF                ADDR OF SECOND LEVEL BUFFER
         MVC   N0(N4,WORK1),LENGTH45        INSERT LENGTH INDICATOR
         MVC   N50(N4,WORK1),LENGTH45        INSERT LENGTH INDICATOR
         MVC   N4(N45,WORK1),N38(PARMREG1)  SYNADAF MESG TO BUFFER
         MVC   N54(N45,WORK1),N83(PARMREG1)  SYNADAF MESG TO BUFFER
         LR    SYMWKB,WORK2                 RESTORE SYNADAF SAVE PTR
         SYNADRLS
         LA    PARMREG1,CLOSELST            ADDR OF LIST FORM OF CLOSE
         LA    WORK1,PDSDCB                 ADDR OF DCB TO CLOSE
         CLOSE ((WORK1)),MF=(E,(PARMREG1))
         LA    WORK1,MIDBUFF                ADDR OF SECOND LEV BUFFER
         CLC   WLENRCD(N15),N53(WORK1)      IS ERR WRONG LEN RECORD
         BNE   GIVEMESG                     NO, GO GIVE I/O ERROR MESG
         LA    RETCODE,N32                  ENTRYNAME NOT IN CESD RCDS
         B     NOFIND                       ERROR, NO MORE CESD RCDS
         SPACE
***********************************************************************
*      WORK2 - CONTAINS THE SECOND LEVEL MESSAGE ID #                 *
***********************************************************************
GIVEMESG EQU   *
         L     WORK2,M1L2AP1                GET 2ND LEVEL MSG ID #
         LA    WORK2,N50(WORK1)             POINT TO 2ND INSERT
         XC    TSTIOPRM(L'TSTIOPRM),TSTIOPRM CLEAR MSG AREA
         IKJEGSIO MSG,FIRST=M0029,INST11=(APDE,(PDEB)),SECOND=M0237,   *
               INST21=(ADDR,WORK1),INST22=(ADDR,WORK2),                *
               ID=SYM30,MF=(E,TSTIOPRM)
         LA    RETCODE,N12                  IO ERR, RET CODE=12, GO
         B     TOCALLER                     RETURN TO CALLER
PRINT3   DS    0H
         LR    WORK1,RETURN                 RESTORE REG WORK1
         B     MACRO(WORK5)                 GO TO PROPER MACRO FORM
MACRO    B     MAC                       0= GO TO FIRST FORM OF MACRO
MAC      B     MACRO1                    1= GO TO FIRST FORM OF MACRO
         B     MACRO2                    2= GO TO SECOND FORM OF MACRO
         B     MACRO3                    3= GO TO THIRD FORM OF MACRO
         B     MACRO4                    4= GO TO FOURTH FORM OF MACRO
         B     SVCERR1                   5= GO TO FIFTH FORM OF MACRO
         B     SVCERR2                   6= GO TO SIXTH FORM OF MACRO
**********************************************************************
*  WORK1 - WILL POINT TO AN INSERT
*  WORK2 - WILL CONTAIN SECOND LEVEL MESSAGE ID NUMBER (M0L2AP1)
*  WORK5 - WILL INDICATE THIS FORM OF THE IKJEGSIO MACRO IS TO BE USED
*  WORK6 - WILL CONTAIN FIRST LEVEL MESSAGE ID NUMBER (M0L1P1)
**********************************************************************
MACRO1   DS    0H                          ONE 2ND LEVEL INSERT
         IKJEGSIO MSG,FIRST=(WORK6),INST11=(APDE,(PDEB)),              *
               SECOND=(WORK2),INST21=(ADDR,(WORK1)),ID=SYM30,          *
               MF=(E,TSTIOPRM)
         B     CHECKIO                   GO CHECK IO RETURN CODE
**********************************************************************
*  WORK1 - POINTS TO AN INSERT
*  WORK2 - CONTAINS SECOND LEVEL MESSAGE ID NUMBER
*  WORK3 - POINTS TO AN INSERT
*  WORK5 - INDICATES SECOND FORM OF THE IKJEGSIO MACRO IS TO BE USED
*  WORK6 - CONTAINS FIRST LEVEL MESSAGE ID NUMBER
**********************************************************************
MACRO2   DS    0H                        TWO 2ND LEVEL INSERTS
         IKJEGSIO MSG,FIRST=(WORK6),INST11=(APDE,(PDEB)),              *
               SECOND=(WORK2),INST21=(ADDR,(WORK1)),                   *
               INST22=(ADDR,(WORK3)),ID=SYM30,MF=(E,TSTIOPRM)
         B     CHECKIO                   GO CHECK IO RETURN CODE
**********************************************************************
*  WORK1 - POINTS TO AN INSERT
*  WORK2 - CONTAINS SECOND LEVEL MESSAGE ID NUMBER
*  WORK3 - POINTS TO AN INSERT
*  WORK4 - POINTS TO AN INSERT
*  WORK5 - INDICATES THIRD FORM OF THE IKJEGSIO MACRO IS TO BE USED
*  WORK6 - CONTAINS FIRST LEVEL MESSAGE ID NUMBER
**********************************************************************
MACRO3   DS    0H                          THREE 2ND LEVEL INSERTS
         IKJEGSIO MSG,FIRST=(WORK6),INST11=(APDE,(PDEB)),              *
               SECOND=(WORK2),INST21=(ADDR,(WORK1)),                   *
               INST22=(ADDR,(WORK3)),INST23=(ADDR,(WORK4)),            *
               ID=SYM30,MF=(E,TSTIOPRM)
         B     CHECKIO                   GO CHECK IO RETURN CODE
MACRO4   DS    0H                           NO 2ND LEVEL INSERT
         IKJEGSIO MSG,FIRST=(WORK6),SECOND=(WORK2),ID=SYM30,           *
               MF=(E,TSTIOPRM)
CHECKIO  LA    WORK1,N16                    ATTENTION RETURN CODE
         CR    RETCODE,WORK1                ATTENTION OR ABEND RET CODE
         BNL   TOCALLER                     YES, GO PASS IT TO CALLER
         L     RETURN,TERMIO14              RETURN ADDRESS
         BR    RETURN                       RETURN TO CALLER
         SPACE 2
***********************************************************************
* INPUT -
* WORK5 - WILL INDICATE WHICH FORM OF MACRO TO USE
* RETCODE - WILL CONTAIN MACRO RETURN CODE
* PARMREG0 - WILL CONTAIN ABEND CODE FROM LINK MACRO IF APPLICABLE
***********************************************************************
SVCERR1  EQU   *
         LR    WORK1,PARMREG0               TRANSFER CONTENT OF REG0
         LR    WORK3,RETCODE                TRANSFER CONTENT OF REG15
         XC    TSTIOPRM(L'TSTIOPRM),TSTIOPRM CLEAR IO AREA
         SPACE 2
GETFRERR IKJEGSIO SVCERR,SVC=(WORK2),RC=(WORK3),ID=SYM30,              *
               MF=(E,TSTIOPRM)
         B     CHECKIO
SVCERR2  EQU   *
         LR    WORK1,PARMREG0               TRANSFER CONTENT OF REG0
         LR    WORK3,RETCODE                TRANSFER CONTENT OF REG15
         XC    TSTIOPRM(L'TSTIOPRM),TSTIOPRM CLEAR IO AREA
LINKERR  IKJEGSIO SVCERR,SVC=(WORK2),ABENDRG=(WORK1),RC=(WORK3),       *
               INST11=(NUM,I0035),ID=SYM30,MF=(E,TSTIOPRM)
         B     CHECKIO                      GO CHECK IO RETURN CODES
         SPACE 3
********************************************************************
***  *****    THIS IS THE DAIR ERROR ANALYSIS ROUTINE  *********
********************************************************************
DAIRERR  DS    0H
         L     WORK2,WORKAREA   ACCESS WORKAREA PTR
         USING TSTCWORK,WORK2 ESTABLISH BASE FOR WORKAREA
         XC    CWORKSYM(N32),CWORKSYM ZERO WORKAREA
         ST    RETCODE,DAIRRC-TSTCWORK(WORK2) STORE RC IN WORKAREA
         LA    PARMREG1,DAIRRC-TSTCWORK(WORK2) R1=ADDR OF RET CODE
         ST    PARMREG1,DAIRCPTR-TSTCWORK(WORK2) 2ND WORD OF PARAM LIST
         LA    PARMREG1,N1         SET UP CALLER ID
         STH   PARMREG1,CALLERID-TSTCWORK(WORK2) STORE IN WORK AREA
         LA    PARMREG1,CALLERID-TSTCWORK(WORK2) R1=ADDR OF CALLER ID
         ST    PARMREG1,IDPTR-TSTCWORK(WORK2)   4TH WORD OF PARAM LIST
         L     PARMREG1,ADAIRCOR GET DAPL POINTER
         ST    PARMREG1,DAPLPTR-TSTCWORK(WORK2) 1ST WORD OF PARAM LIST
         LA    PARMREG1,MSGENTPT-TSTCWORK(WORK2) SET UP MSG WRITER ENT
         ST    PARMREG1,MENTPTR-TSTCWORK(WORK2) STORE IN THIRD WORD
         LA    PARMREG1,CWORKSYM      POINT TO PARAMETER LIST
         LINK  EP=IKJEFF18,ERRET=LINKERR1 LINK TO DAIRFAIL
         LA    RETCODE,N8     INDICATE SYMBOL CAN BE RESOLVED
         B     TOCALLER      RETURN TO CALLER
         SPACE 4
***********************************************************************
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
***********************************************************************
         SPACE 2
         DS    0F
INSRTLEN DC    X'000D0000'   LENGTH INDICATOR FOR 13 CHARACTER INSERTS
         SPACE 2
         DS    0F
LENGTH45 DC    X'003D0000'   LENGTH INDICATOR FOR 45 CHARACTER INSERTS
         SPACE 2
BPAMDCB  DCB   DSORG=PO,MACRF=(R),RECFM=U,BLKSIZE=N256,                C
               SYNAD=SYMSYNAD
ENDBPAM  EQU   *
         READ  SSDECB,SF,,,'S',,,MF=L
ENDSDECB EQU   *
LFSTAE   DS    0F
         ESTAE MF=L
ELFSTAE  EQU   *
LFOPEN   OPEN  (,),MF=L
ELFOPEN  EQU   *
LFCLOSE  CLOSE (,),MF=L
ELFCLOSE EQU   *
LFGET    GETMAIN   MF=L
ELFGET   EQU   *
         SPACE 3
         EJECT
         SPACE
***********************************************************************
* THIS SECTION OF IKJEGSYM CONTAINS THE ERROR MESSAGE NUMBERS.        *
* MESSAGES RESIDE IN THE TSO TEST MESSAGE CSECT IN THE IO MODULE      *
* (IKJEGIO).  PERTINENT SYMBOLIC NAMES ARE ADDED VIA INSERTS THAT     *
* ARE CONTRUCTED IN THE WORKAREA NAMED 'BUFFER'.                      *
*                                                                     *
***********************************************************************
         SPACE 2
*
*        MESSAGE   IKJ57280I
*
M0L1P1   DC    F'028' ADDRESS NOT FOUND
M0L2AP1  DC    F'228' NOT FOUND UNDER THE TEST TASK STRUCTURE NO SYMB'S
M0L2BP1  DC    F'229' LOADED BY OS LOADER, INTERNAL SYMBOL UNAVAILABLE
M0L2CP1  DC    F'230' NOT BROUGHT TO MAIN STORAGE UNDER TEST NO SYMB'S
M0L2DP1  DC    F'231' LOADED BY OS LOADER, NOT ENOUGH MAIN
*                     STORAGE FOR EXTERNAL SYMBOLS
M0L2EP1  DC    F'232' LINK EDITED WITHOUT TEST PARAMETER,
*                     INTERNAL SYMBOLS UNAVAILABLE
M0L2FP1  DC    F'233' NOT IN INTERNAL SYMBOL TABLE FOR
M0L2GP2  DC    F'294' FOUND IN DSECT
*                     FOR WHICH NO BASE ADDRESS EXISTS
M0L2HP1  DC    F'295' NOT FOUND IN EXTERNAL SYMBOL TABLE FOR
M0L2IP1  DC    F'235' ASSEMBLED WITHOUT TEST PARAMETER,
*                     INTERNAL SYMBOLS UNAVAILABLE
M0L2JP1  DC    F'234' LINK EDITED IN OVERLAY,
*                     NOT IN MAIN STORAGE
M0L2KP1  DC    F'236' FROM DATASET IN A LINK LIBRARY LIST,
*                     SYMBOLS UNAVAILABLE
*
*        MESSAGE   IKJ57281I
*
M1L1P1   DC    F'29'  SYMBOL
*                     AVAILABLE, SYSTEM ERROR+
M1L2AP1  DC    F'237' I/O SYNAD ERROR
M1L2BP1  DC    F'238' CANNOT OPEN DATASET, DDNAME
*
*        MESSAGE   IKJ57282I
*
NOCOREMG DC    F'30' NOT ENOUGH STORAGE TO USE SYMBOLS
M2L2AP1  DC    F'239' ABSOLUTE OR RELATIVE ADDRESS MAY BE USED
         EJECT
*
*        OTHER EQUATES
*
LENDCB   EQU   ENDBPAM-BPAMDCB              LEN OF DCB
LENDECB  EQU   ENDSDECB-SSDECB              LEN OF LIST FORM OF READ
LENSTAE  EQU   ELFSTAE-LFSTAE               LEN OF LIST FORM OF ESTAE
LENOPEN  EQU   ELFOPEN-LFOPEN               LEN OF LIST FORM OF OPEN
LENCLOSE EQU   ELFCLOSE-LFCLOSE             LEN OF LIST FORM OF CLOSE
LENGET   EQU   ELFGET-LFGET                 LEN OF LIST FORM OF GETMAIN
         EJECT
***********************************************************************
*                                                                     *
*        DSECTS                                                       *
*                                                                     *
***********************************************************************
         TCOMTAB
         EJECT
         TSTCWORK
DAPLPTR  EQU   CWORKSYM        DAIR PARAMETER LIST PTR
DAIRCPTR EQU   CWORKSYM+N4    DAIR RETURN CODE POINTER
MENTPTR  EQU   CWORKSYM+N8    MSG WTR ENTRY POINT POINTER
IDPTR    EQU   CWORKSYM+N12   CALLER ID POINTER
DAIRRC   EQU   CWORKSYM+N16   DAIR RETURN CODE
MSGENTPT EQU   CWORKSYM+N20   MESSAGE WTR ENTRY POINT
CALLERID EQU   CWORKSYM+N24   CALLER ID
         EJECT
         IKJPARMA       THIS DSECT DESCRIBES THE PASSED PDE CONTAIN-
*                       ING THE ACCEPTED ARGUMENTS
*
         SPACE 2
INFOBLK  DSECT     ,    THIS DSECT DESCRIBES THE INFO BLOCK BUILT TO
*                       REFLECT THE REQUEST AND INFO KNOWN ABOUT THE
*                       MODULE
*
LOADNAME DS    D             LOADNAME
ENTRYNAM DS    D             ENTRYNAME
DDNAME   DS    D             DDNAME FROM TT SVC OR BLANKS
LOADNAMA DS    A             LOADNAME MAIN STORAGE ADDRESS
ENTRNAMD DS    A             ENTRYNAME DISPLACEMENT INTO MODULE
MODSWS   DS    X             SWITCHES REFLECTING MOULE PASSED
*                                BIT 0  IF 0 - OBJECT MODULE
*                                       IF 1 - LOAD MODULE
*                                BTI 1  IF 0 - NO ENTRYNAME DISPL
*                                       IF 1 - ENTRYNAME DISPL PRESENT
*                                BIT 2  IF 0 - NO OS LOADER CESD INFO
*                                       IF 1 - OS LOADER CESD INFO
*                                BIT 3  IF 1 - SVC 61 HAS OPERATED
*                                       IF 0 - SVC 61 DID NOT OPERATE
*                                BIT 4  IF 1 - LMOD CESD TTR AVALIABLE
*                                       IF 0 - CESD TTR NOT AVALIABLE
*                                BIT 5  IF 1 - DDNAME PRESENT
*                                       IF 0 - LMOD IN SYS1.LINKLIB
POINTER  DS    F             OBJ-ADDR OF CESD, LOAD-TTR OF SYMBOLS
CESDTTR  DS    F             LOAD-TTR OF FIRST CESD RCD,
*                             OBJ-LENGTH OF CESD INFO
ATTRIBUT DS    F             LOAD MODULE ATTRIBUTES OR ZERO
BASEFSYM DS    A             MAIN STORAGE ADDRESS TO ADD SYM DISPL TO
TCBADDR  DS    F             ADDRESS OF TCB LOADNAME HUNG OFF OF
         SPACE 2
SYMINFO  DSECT     ,    THIS DSECT DESCRIBES THE ANSWER BLOCK BUILT
*                       BY SYM FOR A REQUEST FOR A SYMBOL
*
ZERO1    DS    X             ONE BYTE EQUAL TO ZEROES
LOADEDAD DS    AL3           MAIN STORAGE ADDR OF SYMBOL
TYPE     DS    X             TYPE OF DATA AT THIS LOCATION
MULTIPLT DS    3X            MULTIPLICITY FACTOR
LENGTH   DS    H             LENGTH OF STORAGE RESERVED
RESERVD1 DS    H             RESERVED
NEXTANSB DS    F             ADDRESS OF NEXT ANSWER BLOCK
         SPACE 2
INCORE   DSECT     ,    THIS DSECT DESCRIBES THE INCORE SYMBOL TABLE
*
NXINCORE DS    F             ADDRESS OF NEXT SYMBOL IN INCORE SYM TABLE
ZERO2    DS    X             ONE BYTE OF ZEROES
LADDRESS DS    AL3           MAIN STORAGE ADDRESS OF SYMBOL
INCTYPE  DS    X             TYPE OF DATA AT THIS LOCATION
MULTIPCY DS    3X            MULTIPLICITY FACTOR
SIZEFILD DS    H             LENGTH OF STORAGE RESERVED
LENSYM   DS    H             NO. BYTES IN SYMBOL NAME
INSYM    DS    2F            SYMBOL NAME
         SPACE 2
SVCINFO  DSECT     ,    THIS DSECT DESCRIBES THE INFO BLKS BUILT BY
*                       THE TESTRAN SVC 61 (IN DEC)
*
LMODNAME DS    D             NAME OF MEMBER
LMLADDR  DS    F             MAIN STORAGE ADDRESS WHERE LOADED
BEGTTR   DS    F             TTR OF BEGINNING OF MEMBER
LMATTRIB DS    H             ATTRIBUTES FOR MEMBER
LMFLAGS  DS    X             FLAGS REFLECTING CONTENTS OF SVCINFO BLOCK
*                                 BIT 0 DDNAME PRESENT
*                                 BIT 1 DATASET IS SYS1.LINKLIB
CONCATNO DS    X             CONCATENATION NO. OF PDS
LMDDNAME DS    2F            DDNAME FOR PDS CONTAINING MEMBER
LMTCB    DS    F             ADDRESS OF TCB LOADNAME HUNG OFF OF
NEXTBLK  DS    A             ADDR OF NEXT SVC SAVED INFO BLOCK
         SPACE 2
SYMWORK  DSECT     ,    THIS DSECT DESCRIBES THE GOTTEN WORK AREA
*
MYSAVE   DS    18F           IKJEGSYM SAVE AREA
PDSDCBA  DS    A             CONTAINS ADDR OF DCB FOR  READING SYMS
CINFOBKA DS    A             CONTAINS ADDR OF CURRENT INFO BLOCK
TINFOBKA DS    A             CONTAINS ADDR OF TEMPORARY INFO BLOCK
BUFFERA  DS    A             CONTAINS ADDR OF BUFFER
WHATPASS DS    X             REFLECTION OF ARGUEMENT AND WHAT PASSED
*                                 BIT  0    LOADNAME
*                                      1    ENTRYNAME
*                                      2    SYMBOL
*                                      3    OFFSET
*                                      4    LOADNAME PASSED
*                                      5    ENTRYNAME PASSED
*                                      6    SYMBOL PASSED
*                                      7    OFFSET PASSED
SWSA     DS    X             SWITHCES USED DURING ANALYST OF SYM RCDS
*                                 BIT  0    LAST ENTRY CONTINUED
*                                      1    ANALYZE PRESENT ENTRY
*                                      2    SEARCHING A DSECT
*                                      3    SYMS AVAILABLE IN SYM RCDS
*                                           FOR THIS ENTRYNAME
SWSB     DS    X             CESD PROCESSING SWITCHS
*                                 BIT  0    A CESD RCD HAS BEEN READ
*                                      1    SEARCH USING OFFSET
*                                      2    SEARCH USING ENTRYNAME
*                                      3    SEARCH FOR FIRST CSECT
SWSC     DS    X             UNIQUE SWITCHES
*                                 BIT  0    DDNAME FOR LINKLIB KNOWN
*                                      1    STORAGE PARM LIST FOR DAIR
PDSDCB   DS    22F           BPAM DCB FOR READING SYMS
STAELIST DS    4F            CONTAIN LIST FORM OF ESTAE MACRO
OPENLIST DS    2F            CONTAIN LIST FORM OF OPEN MACRO
CLOSELST DS    2F            CONTAINS LIST FORM OF CLOSE MACRO
LSTFREAD DS    6F            CONTAINS LIST FORM OF READ MACRO
OPENFDD  DS    2F            DDNAME DCB CURRENTLY OPENED FOR
CINFOBLK DS    16F           CURRENTLY QUALIFIED INFOBLK
TINFOBLK DS    16F           TEMPORARY INFOBLK FOR PRESENT REQUEST
BUFFER   DS    69F           READ SYM RCDS, BUILD ERROR MESGS
MIDBUFF  EQU   BUFFER+N100   MIDDLE OF BUFFER, ADDR OF 2ND LEV MESG
BASEADDR DS    F             BASE FOR IKJEGSYM CSECT
WAREA1   DS    D             WORK AREA
WAREA2   DS    D             WORK AREA
WAREA3   DS    D             WORK AREA
ADAIRCOR DS    F             ADDRESS OF GOTTEN CORE FOR DAIR PARM LIST
PARTENTY DS    5F            POSSIBLE PART ENTRY SAVED BY SYM ANALYZIER
PENTRYLN DS    F             LEN OF POSSIBLE PART SYM ENTRY SAVED
PSYMBOL  DS    D             CONTAINS  SYMBOL THAT IS PASSED
POFFSET  DS    F             CONTAINS  OFFSET THAT IS PASSED
LINKLBDD DS    2F            IF KNOWN, CONTAINS A DDNAME FOR LINKLIB
WORKSAVE DS    3F            SAVE AREA FOR WORK REGISTERS
WKSAVE3  EQU   WORKSAVE+N8   WORK3 SAVE AREA
WORKSAV2 DS    3F            INTERNAL ROUTINES SAVE AREA FOR WORK REGS
WKSAVE3A EQU   WORKSAV2+N8   THIRD WORD OF SAVE AREA            YA00074
CESD14   DS    F             SAVED RETURN ADDR DURING CESD PROCESSING
NOTE14   DS    F             SAVED RETURN ADDR DURING NOTE PROCESSING
TERMIO14 DS    F             RETURN ADDR FOR TERMIO PROCESSING
PART14   DS    F             RETURN ADDR FROM PART ENTRY PROCESSING
OPDCB14  DS    F             SAVED RETURN ADDR DURING DCB OPEN PROCESS
POINT14  DS    F             RETURN ADDRESS FOR POINT ROUTINE
READ14   DS    F             RETURN ADDRESS FOR READ ROUTINE
SVCBLK14 DS    F             RET ADDR FROM SVCINFO BLK SEARCH ROUTINE
MSGRT214 DS    F             RET ADDR FROM ADDR BUILD ROUTINE
ESYMWORK EQU   *          END OF SYMWORK DSECT
         SPACE 2
IHADCB   DCBD  DEVD=DA,DSORG=PO
         SPACE 4
         IKJTPL
         EJECT
         IKJDAPL
         SPACE 2
         IKJDAP08
         EJECT
CVT      DSECT
         CVT
         EJECT
         IHAXTLST
         EJECT
         IHACDE
         EJECT
         IKJTCB
         EJECT
         IKJRB
         END
