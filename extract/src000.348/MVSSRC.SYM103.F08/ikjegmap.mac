MAP      TITLE 'IKJEGMAP, LISTMAP FUNCTION OF TEST COMMAND'
         COPY  IKJEGSIO
         EJECT
IKJEGMAP CSECT
*C187500                                                    @YM07131
*C256500                                                    @ZA00816
*C258000                                                    @ZA00816
*C190500                                                   @ZA04819
*A208100-208300                                               @ZA06657
*C199000                                                      @ZA06657
*********************************************************************
* STATUS   CHANGE LEVEL 00, VERSION NUMBER 02, OS/VS2  (05/17/73)   *
*                                                                   *
* FUNCTION/OPERATION                                                *
*    THE TASK OF THIS COMMAND IS TO DISPLAY A COMPLETE STORAGE MAP  *
*    OF THE REGION IN WHICH THE USER'S PROGRAM IS BEING TESTED.     *
*    THE MAP SHOWS THE LOCATION AND EXTENT OF EACH PROGRAM IN THE   *
*    REGION, AND THE LOCATION AND EXTENT OF EACH AREA OF GOTTEN     *
*    STORAGE BY TASK FOR EACH TASK BELOW THE TEST TASK.             *
*                                                                   *
* ENTRY POINTS                                                      *
*         IKJEGMAP-ENTERED AS A RESULT OF A LINK FROM IKJEGMNL      *
*                                                                   *
* INPUT                                                             *
*    ONE LINE OF INPUT FROM THE TERMINAL CONTAINING THE COMMAND     *
*    PARAMETERS.                                                    *
*                                                                   *
* OUTPUT                                                            *
*    LINES OF OUTPUT TO THE TERMINAL OR SPECIFIED DATA SET CONTAIN  *
*    THE FOLLOWING DATA.                                            *
*    1.   EXTENT OF THE REGION IN WHICH THE PROGRAM IS RUNNING.     *
*    2.   NAME AND EXTENTS OF PROGRAMS ON JOB PACK Q.               *
*    3.   DISPLAY THE ELEMENTS OF GOTTEN STORAGE FOR EACH SUBPOOL   *
*    *    OF EACH TASK RUNNING IN THE SAME REGION AS TEST.          *
*                                                                   *
* EXTERNAL REFERENCES                                               *
*         IKJPARS  - TO SCAN THE INPUT BUFFER FOR PRINT KEYWORD.    *
*         IKJEGIO  - TO OUTPUT DATA TO TERMINAL OR DATA SET         *
*                                                                   *
* EXITS,NORMAL                                                      *
*         IKJEGMNL-RETURN VIA REGISTER 14 WITH ONE OF THE FOLLOWING *
*    RETURN CODES-                                                  *
*    0  - NORMAL RETURN                                             *
*    16 - INDICATING AN ATTENTION INTERRUPT WAS ENCOUNTERED         *
*                                                                   *
* EXITS,ERROR                                                       *
*         IKJEGMNL-VIA REGISTER 14 WITH REGISTER 15 CONTAINING      *
*    A RETURN CODE OF 20 TO INDICATE THE STAE RETRY ROUTINE WAS     *
*    ENTERED, AND RETURN CODE OF 24 INDICATING UNABLE TO ISSUE      *
*    THE ESTAE FOR IKJEGMAP.                                        *
*                                                                   *
* TABLES/WORK AREAS                                                 *
*    TCOMTAB-DSECT CONTAINING THE ADDRESS OF THE OUTPUT BUFFER, THE *
*    COMMAND BUFFER, AND LISTMAP'S SAVEAREA.                        *
*                                                                   *
* ATTRIBUTES                                                        *
*    REENTRANT AND REFRESHABLE                                      *
*                                                                   *
* CHARACTER CODE DEPENDENCY                                         *
*    THE OPERATION OF THIS MODULE DEPENDS UPON AN INTERNAL          *
*    REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS          *
*    EQUIVALENT TO THE ONE USED AT ASSEMBLY TIME.  THE CODING HAS   *
*    BEEN ARRANGED SO THAT REDEFINITION OF CHARACTER CONSTANTS, BY  *
*    REASSEMBLY, WILL RESULT IN A CORRECT MODULE FOR THE NEW        *
*    DEFINITION.                                                    *
*                                                                   *
* NOTES                                                             *
*    ALL LABELS ARE NUMBERED IN SEQUENTIAL FASHION FOR QUICKER      *
*    IDENTIFICATION.                                                *
*    COMMENTS ON STAEMENTS BEGIN IN COLUMN 30.                      *
*    RETRY IS THE ENTRY POINT FOR THE STAE RETRY ROUTINE.  THIS     *
*    ROUTINE IS ENTERED FROM IKJEGSTA.                              *
*********************************************************************
         EJECT
***********************************************************
*                                                         *
*             THIS SECTION CONTAINS ALL EQUATES           *
*                                                         *
***********************************************************
R0       EQU   0             REGISTER 0
R1       EQU   1             REGISTER 1
R2       EQU   2             REGISTER 2
R3       EQU   3             REGISTER 3
R4       EQU   4             REGISTER 4
R5       EQU   5             REGISTER 5
R6       EQU   6             REGISTER 6
R7       EQU   7             REGISTER 7
R8       EQU   8             REGISTER 8
R9       EQU   9             TCOMTAB BASE
R10      EQU   10            REGISTER 10
R11      EQU   11            REGISTER 11
R12      EQU   12            BASE REGISTER
R13      EQU   13            REGISTER 13
R14      EQU   14            REGISTER 14
R15      EQU   15            REGISTER 15
N12      EQU   12            LENGTH OR DISPLACEMTN OF 12
N9       EQU   9             LENGTH OR DISPLACEMENT OF 9
N112     EQU   112           LENGTH OR DISPLACEMENT OF 112
N17      EQU   17            LENGTH OR DISPLACEMENT OF 17
N16      EQU   16            LENGTH OR DISPLACEMENT OF 16
N0       EQU   0             LENGTH OR DISPLACEMENT OF 0
N8       EQU   8             LENGTH OR DISPLACEMENT OF 8
N4       EQU   4             LENGTH OF DISPLACEMENT OF 4
N24      EQU   24            LENGTH OR DISPLACEMENT OF 24
N20      EQU   20            LENGTH OR DISPLACEMENT OF 20
N80      EQU   80            LENGTH OR DISPLACEMENT OF 80
N33      EQU   33            LENGTH OR DISPLACEMENT OF 33
N1       EQU   1             LENGTH OR DISPLACEMENT OF 1
FOUR     EQU   4             NUMBER OF BITS TO SHIFT TO CONVERT TO HEX
N13      EQU   13            LENGTH OR DISPLACEMENT OF 13
F0       EQU   X'F0'         USED TO CONVERT TO HEXADECIMAL
B7       EQU   X'B7'         USED TO CONVERT TO HEXADECIMAL
HEX01    EQU   X'01'         USED TO TEST FOR KEYWORD
HEX04    EQU   X'04'         USED TO TEST FOR AN ALIAS
HEXC0    EQU   X'C0'         INDICATES PRB
HEX40    EQU   X'40'         INDICATES LAST SPQE
HEX80    EQU   X'80'         INDICATES SHARED SUBPOOL
N6       EQU   6             LENGTH OR DISPLACEMENT OF 6
N10      EQU   10            LENGTH OR DISPLACEMENT OF 10
N27      EQU   27            LENGTH OR DISPLACEMENT OF 27
HEXFF    EQU   X'FF'         USED TO SET PRINT SW
N2       EQU   2             LENGTH OR DISPLACEMENT OF 2
N3       EQU   3             LENGTH OR DISPLACEMENT OF 3
N19      EQU   19            LENGTH OR DISPLACEMENT OF 19
LLFINIS  EQU   B'00000100'   USED TO TURN ON LOAD LIST SW DONE
N41      EQU   41            LENGTH OR DISPLACEMENT OF 41
N31      EQU   31            LENGTH OR DISPLACEMENT OF 31
N32      EQU   32            LENGTH OR DISPLACEMENT OF 32
N22      EQU   22            LENGTH OR DISPLACEMENT OF 22
TTCBPKF  EQU   28            SW INDICATING TASK IS IN TEST REGION
TCBADR   EQU   4             ADDR OF CURRENT TCB
N68      EQU   68            LENGTH OR DISPLACEMENT OF 68
MYBASE   EQU   68            REGISTER 12 IN SAVEAREA
SVC61    EQU   61            TEST SVC NUMBER
SVC97    EQU   97            TEST SVC NUMBER
**********************************************************************
*        MESSAGE CONSTANTS
**********************************************************************
MSG050   EQU   50             MAP COMPLETE MESSAGE
MSG103   EQU   103            NO CORE MESSAGE (NO SECOND LEVEL)
MSG104   EQU   104            LISTMAP FAILED----
MSG277   EQU   277            PARSE RETURN CODE 12
INST17   EQU   17             LISTMAP INSERT NO. (FIXED)
         EJECT
         SAVE  (14,12),,*     REGISTERS ARE SAVED BY USING
*******************************************************
** THE FOLLOWING INSTRUCTIONS DO-                    **
**                                                   **
**   1. ESTABLISH TCOMTAB (TEST COMMUNICATION TABLE) **
**      ADDRESSABILITY BY THE USING STATEMENT.       **
**   2. FOLLOWS STANDARD IBM LINKAGE CONVENTIONS BY  **
**      FORWARD AND BACKWARD CHAIN SAVE AREAS AND    **
**      PLACING THE ADDRESS OF MY SAVE AREA INTO R13.**
*******************************************************
         USING TCOMTAB,R9     ESTABLISH COMMUNICATION
*                             REGION ADDRESSABILITY
         LR    R12,R15        ESTABLISH A BASE REGISTER
         USING IKJEGMAP,R12
         L     R4,REGSAVE2    PLACE ADDR OF MY SAVE AREA INTO REG 4
         ST    R4,N8(R13)     PLACE INTO CALLER'S SAVEAREA
*                             AS FORWARD POINTER
         ST    R13,N4(N0,R4)  PLACE INTO MY SAVE AREA AS
*                             BACKWARD CHAIN
         LR    R13,R4         PLACE ADDR OF MY SAVEAREA INTO REG 13
         STM   R14,R12,N12(R13)   SAVE OUR REGISTERS IN SAVEAREA
         L     R2,WORKAREA    PLACE POINTER TO WORKAREA INTO REG 2
         USING TSTCWORK,R2    ESTABLISH ADDRESSABILITY TO IT
         LA    R1,CWORKCMD    SKIP OVER IKJEGCVT'S WORKAREA
         DROP  R2             DROP ADDRESSABILITY TO ENTIRE WORKAREA
         XC    N0(N16,R1),N0(R1)  CLEAR THE ESTAE WORKAREA
         LR    R2,R1          R2= ADDR OF CWORKCMD
         ST    R12,N68(R13)   PLACE MY ENTRY POINT INTO MY SAVEAREA
         L     R3,TSTSTAE     R3= ADDR OF IKJEGSTA
         ESTAE (R3),CT,PARAM=MAPSPL,RECORD=YES,MF=(E,(R2))
         LTR   R15,R15        TEST RETURN CODE FROM STAE
SMTSTAE  DS    0H             SMT LABEL FOR TEST CASE TMAP1800
         BZ    A0020          IF ALL OK CONTINUE
         STC   R15,TSTESTRC   SAVE THE RETRUN CODE FOR MNL
         LA    R15,N24        R15= 24 ESTAE MACRO FAILURE
         B     A00412         EXIT TO MNL
************************************************************
** PROGRAM ADDRESSABILITY IS ESTABLISHED USING REG 12     **
** AS A BASE REG. SINCE IKJPARS WILL BE USED FOR KEYWORD  **
** CHECKING, THE ADDRESS OF A WORKAREA IS OBTAINED FROM   **
** TCOMTAB AND PLACED INTO REG 5. THE UPT, ECT, AND CPECB **
** POINTERS ARE OBTAINED FROM TCOMTAB AND ARE MOVED INTO  **
** THE PARAMETER LIST FOR IKJPARS LOCATED IN THE WORKAREA.**
** THE PCL (PARAMETER CONTROL ENTRIES) IS ALSO  PLACED    **
** INTO THE PARAMETER LIST. THE PROGRAM THEN LINKS TO     **
** IKJPARS.                                               **
************************************************************
A0020    DS    0H
         TM    TSTFLGS3,NOPARMS   SEE IF PRINT KEYWORD WAS ENTERED
         BO    A0030         IF IT WAS NOT THEN GO TO BEGIN PROCESSING
         L     R4,WORKAREA   OBTAIN ADDR OF WORKAREA FROM TCOMTAB
         USING TSTCWORK,R4   ESTABLISH ADDRESSABILITY TO IT
         LA    R5,CWORKCMD   SKIP OVER IKJEGCVT'S WORKAREA
         USING PPL,R5        ESTABLISH ADDRESSABILITY TO PARSE
*                            PARAMETER LIST
         DROP  R4            DROP ADDRESSABILITY TO ENTIRE
*                            WORKAREA
         MVC   PPLUPT(N12),PARMLIST  MOVE UPT, ECT, ECB TO PARSE
         MVC   PPLPCL(N4),PARSEFLD PUT ADDR PCL INTO PARAMETER LIST
         LA    R4,TSTANSPL   GET ADDRESS OF ANSWER PLACE
         ST    R4,PPLANS     PUT IT INTO PARAMETER LIST FOR IKJPARS
         MVC   PPLCBUF(N4),INBUF  PUT ADDR OF COMMAND BUFFER INTO LIST
         LR    R1,R5         REG 1 POINTS TO PARAMETER LIST
         LINK  EP=IKJPARS,ERRET=LINKFAIL  LINK TO PARSE TO
BLOWUP1  DS    0H             LABEL USED BY STAE RETRY ROUTINE
SMTPARS  DS    0H            SMT LABEL FOR TEST CASE TMAP1800
         L     R8,PARSERC(R15) PLACE CORRECT ADCON INTO REG 8
         BR    R8            BRANCH TO PROPER HANDLER
A0025    DS    0H             EQUATE LABEL TO THIS ADDRESS
************************************************************
** ON RETURN FROM IKJPARS, THE PARAMETER DESCRIPTOR LIST  **
** (PDL) IS TESTED TO SEE IF THE PRINT KEYWORD HAD BEEN   **
** SPECIFIED.  A RETURN OF ZERO INDICATES THAT IT WAS NOT.**
** IF IT HAS BEEN SPECIFIED THE PRINT SWITCH IS SET IN    **
** TCOMTAB FOR USE BY IKJEGIO.(I/O ROUTINE)               **
************************************************************
         L     R2,TSTANSPL   PLACE ADDRESS OF PDE INTO REG 2
         USING IKJPARMD,R2   USE REG 2 TO ADDRESS PDE DSECT
         TM    PRINT+N1,HEX01 TEST TO SEE IF KEYWORD WAS ENTERED
         BNO   A0030         IF NOT SPECIFIED WE PRINT TO TERMINAL
         OI    TSTFLGS1,TSTPRINT TURN ON PRINT SW IN TCOMTAB
         LA    R0,DSN        PLACE POINTER TO DSNAME PDE IN REG 0
A0030    DS    0H
         L     R4,TSTTCB     OBTAIN TCB ADDRESS OF TEST'S TCB
         USING TCB,R4        USE TCB DSECT FOR ADDRESSING
         L     R5,TCBPQE     PLACE DUMMY PQE ADDRESS IN REG 5
************************************************************
** TEST TCB ADDRESS IS OBTAINED FROM TCOMTAB. FROM THE    **
** TCB THE PQE ADDRESS IS OBTAINED. 8 BYTES ARE ADDED TO  **
** THE PQE TO OBTAIN THE CORRECT ADDRESS. THE PQE IS USED **
** TO OBTAIN THE REGION SIZE WHICH IS PRINTED OUT TO THE  **
** TERMINAL. FROM THE TCB THE ADDRESS OF THE CONTENTS     **
** DIRECTORY QUEUE IS OBTAINED. THE PROGRAM NAME IS       **
** OBTAINED FROM THE CDE AND PRINTED OUT. THE EXTENT      **
** ADDRESS IS GOTTEN FROM THE CDE AND USED TO OBTAIN CSECT**
** INFORMATION. ALL CSECT INFO IS PRINTED OUT. TEST ARE   **
** MADE TO DETERMINE WHEN THE EXTENT IS EMPTY.            **
** IF THERE ARE ANY MORE CDES THEY ARE ACCESSED ALSO      **
** OTHERWISE CONTINUE ON                                  **
************************************************************
         LA    R6,N8         BECAUSE  DUMMY PQE ADDRESS IS
         AR    R5,R6         MINUS 8 BYTES, ADD 8 BYTES TO
*                            PQE ADDRESS
         L     R6,N0(R5)     LOAD FIRST PQE'S ADDRESS INTO
*                            REG 6
         USING PQESECT,R6    USE PQE DSECT FOR ADDRESSING
         L     R10,PQESIZE   PLACE REGION SIZE FROM PQE INTO REG 10
         BAL   R14,A3000     BRANCH TO HAVE CONVERT CHANGE IT
*                            TO PRINTABLE HEX
         MVC   N24(N8,R1),N0(R2) MOVE REGION SIZE TO OUTPUT
         LA    R2,HDR001     PLACE ADDRESS OF SIZE HDR IN REG 2
         MVC   N8(N16,R1),N0(R2) MOVE HDR TO OUTPUT AREA
         BAL   R14,A0100     BRANCH TO PRINT ROUTINE
         DROP  R4            DROP REG 4 FOR ADDR TCB DSECT
         USING TCB,R5        USE REG 5 TO ADDRESS TCB DSECT
         BAL   R14,CLEARALL  BRANCH TO CLEAR OUT OUTPUT AREA
***********************************************************
** THE CVT IS ACCESSED TO OBTAIN THE ADDRESS OF THE TCB  **
** QUEUE. THIS QUEUE IS FOLLOWED TO ITS END.  THE        **
** PARENT'S TASK ADDRESS OF EACH TCB IS COMPARED AGAINST **
** TEST'S TCB ADDRESS.  IF THEY COMPARE EQUAL THE TASK   **
** IS THEN PROCESSED PUTTING OUT ALL PROGRAMS UNDER THE  **
** LOAD LIST AND RB CHAINS PLUS ALL SUBPOOL INFORMATION. **
***********************************************************
         L     R6,TSTTCB     PLACE TEST TCB ADDR INTO REG 6
A00411   DS    0H             DAUGHTER
         L     R5,D(R6)      GET ADDR OF LAST DAUGHTER TASK
         LTR   R5,R5         IS THERE A DAUGHTER TASK
         BNZ   IKJEGTSK      YES, START PROCESSING
A00411A  DS    0H             SISTER
         L     R5,S(R6)      NO, GET ADDRESS OF NEXT SISTER TCB
         LTR   R5,R5         WAS THERE A SISTER
         BNZ   IKJEGTSK      YES, START PROCESSING
*        NOW WORK ON  MOTHER TCB
         L     R6,M(R6)      NO, GET ADDRESS OF MOTHER TASK
         LA    R6,N0(R6)     CLEAR HIGH ORDER BYTE
         L     R5,TSTTCB     GET ADDRESS OF TEST TCB
         LA    R5,N0(R5)     CLEAR HIGH ORDER BYTE
         CR    R5,R6         DOES MOTHER TASK = TEST TASK
         BNE   A00411A       NO, GO CHECK FOR A SISTER TASK
         NI    TSTFLGS1,HEXFF-TSTPRINT TURN OFF PRINT SW IF IT IS ON
         LA    R2,MSG050     PLACE POINTER TO COMPLETED MSG IN REG 2
         BAL   R14,A0200     GO TO PUT MSG OUT TO TERMINAL
         B     A004123       RETURN TO IKJEGMNL
RETCODE  DS    0H
         B     A004123       RETURN TO IKJEGMNL WITH A 0
         B     A004123       RETURN TO IKJEGMNL WITH A 0
         B     A004123       RETURN TO IKJEGMNL WITH A 0
         B     A004123       RETURN TO IKJEGMNL WITH A 0
         B     A00412        RETURN TO IKJEGMNL WITH A 16
         B     A00412        RETURN TO IKJEGMNL WITH A 20
         B     A00412        RETURN TO IKJEGMNL WITH A 24
NOROOM   DS    0H              EQUATE LABEL TO THIS ADDRESS
         LA    R2,MSG103      R15= RETURN CODE 24 TO MNL
         B     A0200          BRANCH TO RETURN
A004121  DS    0H
         LA    R15,N16       INDICATE ATTENTION INTERRUPT
         B     A00412        RETURN TO IKJEGMNL
A004122  DS    0H
         LA    R15,N20       INDICATE STAE EXIT TAKEN
         B     A00412        RETURN TO IKJEGMNL
A004123A DS    0H
         OI    TSTFLGS4,TSTFLUSH INDICATE TO IKJEGMNL TO FLUSH STACK
A004123  DS    0H
         XR    R15,R15       NORMAL RETURN CODE TO IKJEGMNL
A00412   DS    0H             EQUATE LABEL TO THIS ADDRESS
*-*-*    ISSUE ESTAE 0 AND TURN OFF TSTRERTN SWITCH
         LR    R2,R15        SAVE THE RETURN CODE
         ESTAE 0             REMOVE THE ESTAE
         NI    TSTFLGS4,HEXFF-TSTRERTN  TURN OFF RETRY SWITCH
         LR    R15,R2        RESTORE THE RETURN CODE
         L     R13,N4(R13)   PLACE CALLERS SAVE AREA ADDR INTO REG 13
         RETURN (14,12),RC=(15)    RETURN TO IKJEGMNL
IKJEGTSK EQU  *              EQUATE LABEL TO THIS ADDRESS
         LR    R10,R5        PLACE TCB ADDR TO BE CVTED IN REG 10
         BAL   R14,A3000     BRANCH TO CVT TO PRINT HEX
         MVC   N27(N6,R1),N2(R2) MOVE CVTED TCB ADDR TO OUTPUT
         LA    R2,HDR005     PLACE 'UNDER TCB' HDR IN REG 2
         MVC   N8(N19,R1),N0(R2) MOVE HDR TO OUTPUT AREA
         BAL   R14,A0100     BRANCH TO PUT HDR OUT TO TERMINAL
         BAL   R14,CLEARALL  BRANCH TO CLEAR OUT OUTPUT AREA
         EJECT
**********************************************************************
** BECAUSE IKJEGMAP IS DEPENDENT UPON THE CONTENTS OF THE VARIOUS   **
** CONTROL BLOCKS - THE LLES, THE CDES ETC - THE FOLLOWING CHECKS   **
** HAVE BEEN PUT IN TO AVOID PROGRAM CHECKS.  IF THE TASK IKJEGMAP  **
** IS TRYING TO PROCESS IS ACTIVE THE CONTENTS OF THESE CONTROL     **
** CONTROL BLOCKS MAY BE CHANGING WHILE IKJEGMAP IS PROCESSING. IE. **
** ABEND MAY BE ACTIVE FOR THIS TASK AND COULD BE FREEING UP THESE  **
** CONTROL BLOCKS.  WHEN IKJEGMAP IS GIVEN CONTROL, IKJEGMNL HAS    **
** ISSUED A STATUS SYNCH ON ALL TASKS IN THE TEST REGION.           **
** THIS WILL STOP ALL TASKS THE TCBSTPP FLAG OF THE TCB IS ON       **
** IF THE TASK WAS STOPPED BY THE ISSUANCE OF A STATUS STOP.  WHEN  **
** A TASK HAS TERMINATED THE LLES, CDES, ETC HAVE BEEN REMOVED SO   **
** IKJEGMAP WILL CONTINUE ON TO PROCESS THE NEXT TASK.  IF THE SVRB **
** IS A TEST SVC (IE. SVC 61 OR 97) THEN THE TASK IS IN A WAIT STATE**
** AND IKJEGMAP WILL PROCESS THE TASK.                              **
**********************************************************************
         TM    TCBNDSP2,TCBSTPP  STATUS STOP ISSUED AGAINST THIS
*                            TASK
         BO    A0031C        YES, PROCESS THIS TASK
         TM    TCBFLGS5,TCBFC    NO, HAS THIS TASK TERMINATED
         BZ    A0031A        NO, CHECK FOR A SVRB OFF OF THE TCB
         LA    R3,HDR007      YES, PREPARE TO WRITE OUT MESSAGE
         BAL   R14,PUTMSG    PUT MESSAGE OUT
         LR    R6,R5         FIND NEXT TCB UNDER TEST
         B     A00411        GO GET NEXT TASK
A0031A   DS    0H
         L     R7,TCBRBP     OBTAIN ADDRESS OF SVRB
         LA    R3,RBSECT-RBPREFIX  LENGTH OF PREFIX
         SR    R7,R3          ADDRESS OF BEGINNING OF PREFIX
         USING RBPREFIX,R7    MAKE RBPREFIX ADDRESSABLE
         CLI   RBINTCOD+N1,SVC61   IS THIS ONE OF THE TEST SVCS WAITING
         BE    A0031C        YES, PROCESS THIS TASK
         CLI   RBINTCOD+N1,SVC97   NO, TEST FOR OTHER TEST SVC
         BE    A0031C        YES, PROCESS THIS TASK
         LA    R3,HDR008     NO, ASSUME TASK IS ACTIVE AND
         BAL   R14,PUTMSG    GO PUT OUT MESSAGE
         LR    R6,R5         FIND NEXT TCB UNDER TEST
         B     A00411        GO GET NEXT TASK
A0031C   DS    0H
         USING LLE,R7        USE REG 7 TO ADDR LOAD LIST
         L     R7,TCBLLS     PLACE ADDRESS OF LOAD LIST INTO REG 7
         LA    R3,HDR002     PLACE HEADER INTO REG 1
         BAL   R14,PUTMSG    BRANCH TO PUT HDR OUT TO TERMINAL
A0031    DS    0H             EQUATE LABEL TO THIS ADDRESS
         LA    R7,N0(R7)     ZERO OUT HIGH ORDER DATA
         LTR   R7,R7         SEE IF ANY MORE LOAD LIST ELEMENTS EXIST
         BNZ   A00301        IF MORE EXIST THEN GO PROCESS MORE CDE
         OI    TSTFLGS2,LLFINIS OTHERWISE TURN ON LOAD LIST DONE SW
         B     A0038         AND GO TO PROCESS RB QUEUE
GETCDE   DS    0H             EQUATE LABEL TO THIS ADDRESS
         USING CDENTRY,R8    USE REG 8 TO ADDRESS CDE WITH
         L     R8,CDXLMJP    PLACE ADDRESS OF NEXT CDE INTO REG 8
         LA    R8,N0(R8)      ZERO THE HIGH ORDER BYTE OF R8
         B     A00312        GO CHECK THIS BEING A MINOR CDE
A00301   DS    0H             EQUATE LABEL TO THIS ADDRESS
         L     R8,LLECDPT    PLACE ADDRESS OF CDE INTO REG 8
************************************************************
**  PROGRAM NAME AS CONTAINED WITHIN THE CDE IS PLACED    **
**  IN THE OUTPUT AREA AND PASSED TO THE PRINTOUT ROUTINE **
************************************************************
A00312   DS    0H             EQUATE LABEL TO THIS ADDRESS
         TM    CDATTR,CDMIN  SEE IF THIS IS AN ALIAS           @YM07131
         BO    GETCDE        IF IT IS THEN GO TO GET MAJOR CDE
         L     R1,OUTBUF     PLACE POINTER TO OUTPUT IN REG 1
         USING XTLST,R6      USE REG 6 TO ADDRESS EXTENT Q
         MVC   N17(N8,R1),CDNAME   MOVE PROGRAM NAME FROM CDE
         L     R6,CDXLMJP    PLACE POINTER TO EXTENT IN REG 6
         L     R3,XTLNRFAC   NUMBER OF RELOCATION FACTORS      @ZA04819
         XR    R4,R4         ZERO OUT REG 4 FOR INDEX REG
A00311   DS    0H             EQUATE LABEL TO THIS ADDRESS
         LTR   R3,R3         SEE IF ANY CSECTS LEFT
         BNH   A0035         IF NO MORE THAN BRANCH FOR NEXT CDE
         L     R10,XTLMSBAA(R4) OTHERWISE PLACE CSECT LOC IN REG 10
         BAL   R14,A3000     BRANCH TO HAVE THIS CONVERTED TO HEX
         MVC   N41(N6,R1),N2(R2) MOVE CONVERTED HEX TO OUTPUT
         L     R10,XTLMSBLA(R4) PLACE LENGTH OF CSECT IN REG 10
         LA    R10,N0(R10)   ZERO FLAG (80) HIGH ORDER BYTE
         BAL   R14,A3000     BRANCH TO CONVERT TO PRINT HEX
         MVC   N31(N6,R1),N2(R2) MOVE PRINTABLE TO OUTPUT
         MVC   N8(N4,R1),LNSIZE MOVE LENGTH OF LINE INTO OUTPUT
         BAL   R14,A0100     BRANCH TO PUT INFOR OUT TO TERM
         BAL   R14,CLEARALL  BRANCH TO CLEAR OUT OUTPUT AREA
         BCTR  R3,N0         DECREMENT REG 3 BY 1
         LA    R4,N8(R4)     ADD 8 TO REG 4                    @ZA06657
         B     A00311        BRANCH TO PROCESS NEXT CSECT IF ANY
A0038    DS    0H             EQUATE LABEL TO THIS ADDRESS
         L     R7,TCBRBP     PLACE POINTER TO FIRST RB INTO REG 7
         USING RBSECT,R7     USE REG 7 TO ADDRESS RB
         LA    R7,N0(R7)     ZERO OUT HIGH ORDER BYTE
         LTR   R7,R7         DO WE HAVE A ZERO
         BZ    A00413        BRANCH TO PROCESS REST OF RB
ALABEL   TM    RBSTAB1,RBFTSVRB SEE IF THIS IS AN PRB
         BZ    A0037         YES, BRANCH
A0036    DS    0H             EQUATE LABEL TO THIS ADDRESS
         L     R7,RBLINK     PLACE ADDR OF NEXT RB INTO REG 7
         LA    R7,N0(R7)     ZERO OUT ANY HIGH ORDER DATA
         CR    R7,R5         SEE IF WE ARE AT THE END OF THE CHAIN
         BE    A00413        BRANCH TO PROCESS NEXT TCB
         B     ALABEL        CONTINUE TO END OF CHAIN
A0037    DS    0H
         L     R8,RBCDE      PLACE NEXT CDE INTO REG 8
         LA    R8,0(R8)      ZERO HI BYTE                     @ZA06657
         LTR   R8,R8         IS THE CDE PTR ZERO ???          @ZA06657
         BZ    A0036         YES, GET NEXT RB                 @ZA06657
         B     A00312        BRANCH TO PROCESS THIS CDE
A0035    EQU     *           EQUATE LABEL TO THIS ADDRESS
         TM    TSTFLGS2,LLFINIS SEE IF WE ARE IN THE LL CHAIN
         BO    A0036         IF WE ARE NOT THEN GO TO PROCESS RB QUEUE
         USING LLE,R7        USE REG 7 TO ADDRESS LOADLIST
         L     R7,LLECHN     GET ADDR OF NEXT LOAD LIST
         B     A0031         BRANCH TO PROCESS THIS LOAD LIST
A00413   DS    0H
         NI    TSTFLGS2,HEXFF-LLFINIS TURN OFF LOAD LIST FINIS SW
         L     R4,WORKAREA   PLACE WORKAREA ADDR INTO REG 4
         STM   R0,R15,N112(R4) SAVE ENTERING REGS
         LR    R4,R5         SAVE TCB ADDR IN REG 4
         LA    R3,HDR003     PLACE 'ACTIVE RB' HDR INTO REG 1
         BAL   R14,PUTMSG    BRANCH TO PUT HDR OUT
         L     R7,TCBRBP     LOAD RB ADDRESS FROM TCB INTO REG 7
         USING RBSECT,R7     USE REG 7 TO ADDR THE RB DSECT
************************************************************
** THE RBS ARE ACCESSED,THE TYPE OF RB IS DETERMINED AND  **
** THE CDE CONNECTED WITH THE RB ACCESSED TO GET THE      **
** PROGRAM ID                                             **
************************************************************
         LA    R7,N0(R7)     ZERO OUT HIGH ORDER BYTE OF REG 7
         LTR   R7,R7         ARE THERE ANY RBS
         BZ    A0050         IF NOT THEN BRANCH
A0042    DS    0H
         L     R8,RBCDE      LOAD CDE ADDR INTO REG 8
         USING CDENTRY,R8    USE REG 8 TO ADDR THE CDE DSECT
         LA    R8,N0(R8)     ZERO OUT HIGH ORDER BYTE OF REG 8
         LTR   R8,R8         TEST THAT WE HAVE AN ADDRESS
         BZ    A0047         IF WE DO NOT THEN BRANCH
         TM    RBSTAB1,HEXC0 TEST RB TYPE FOR PRB
         BZ    A0043         IF A PRB THEN BRANCH
         TM    RBSTAB1,RBFTIRB DO WE HAVE AN IRB
         BO    A0044         IF A MATCH THEN BRANCH
         TM    RBSTAB1,RBFTSIRB DO WE HAVE AN SIRB
         BO    A0045         IF SO THEN BRANCH
         LA    R4,N12        PLACE 12 INTO INDEX REG
A0046    DS    0H             MAKE LABEL EQUAL TO THIS ADDR
         L     R1,OUTBUF     PLACE POINTER TO OUTPUT BUFFER INTO REG 1
         L     R3,TYPE(R4)   LOAD PROPER TYPE INTO REG 3
         ST    R3,N24(R1)    STORE IN OUTPUT AREA
         TM    RBSTAB1,HEXC0 DO WE HAVE A SVC RB OR AN IRB
         BZ    A00461        IF NOT THEN BRANCH TO MOVE IN NAME
         MVC   N8(N4,R1),SIZERB2 MOVE IRB MSG SIZE INTO OUTPUT
         B     A00462        BRANCH TO PROCESS THIS IRB
A00461   DS    0H             EQUATE LABEL TO THIS ADDR
         MVC   N33(N8,R1),CDNAME   MOVE PROGRAM NAME INTO OUTPUT
         MVC   N8(N4,R1),SIZERB MOVE SIZE OF LINE TO OUTPUT
A00462   DS    0H             EQUATE LABEL TO THIS ADDRESS
         BAL   R14,A0100     BRANCH TO PUT INFOR OUT ROUTINE
         BAL   R14,CLEARALL  BRANCH TO CLEAR OUT OUTPUT AREA
A0047    DS    0H             EQUATE LABEL TO THIS ADDRESS
         L     R7,RBLINK     PLACE ADDR OF NEXT RB INTO REG 7
         LA    R7,N0(R7)     ZERO OUT ANY HIGH ORDER DATA
         CR    R5,R7         IS THIS THE LAST RB OF THE CHAIN
         BE    A0050         IF RBLINK POINTS BACK TO TCB THEN BRANCH
         B     A0042         BRANCH TO PROCESS THE NEXT RB
A0043    DS    0H             MAKE LABEL EQUAL TO THIS ADDR
         XR    R4,R4         ZERO OUT INDEX REG
         B     A0046         BRANCH TO GENERALIZED ROUTINE
A0044    DS    0H             TO PLACE TYPE INTO OUTPUT AREA
         LA    R4,N4         PLACE A 4 INTO INDEX REGISTER
         B     A0046         BRANCH TO PUT TYPE INTO OUTPUT
A0045    DS    0H             MAKE LABEL EQUAL TO THIS ADDR
         LA    R4,N8         PLACE 8 IN INDEX REG
         B     A0046         BRANCH TO PUT TYPE INTO OUTPUT
A0050    DS    0H             LET LABEL EQUAL THIS ADDRESS
         LA    R3,HDR004     PLACE SUBPOOL HDR INTO REG 1
         BAL   R14,PUTMSG    BRANCH TO PUT HDR OUT TO TERMINAL
         LA    R3,HDR006     PLACE SUBPOOL HEADER IN REG 1
         BAL   R14,PUTMSG    GO TO PUT HEADING OUT TO TERMINAL
         XR    R6,R6         ZERO OUT REG 6 FOR AN INDICATOR
         L     R4,TCBMSS     PLACE SPQE ADDRESS INTO REG 4
         USING SPQESECT,R4   USE REG 4 TO ADDRESS SPQE
************************************************************
**  THE SPQE ADDRESS IS OBTAINED FROM THE TCB. FROM THE   **
**  SPQE THE DQE IS OBTAINED. THE DQE IS ASSOCIATED WITH  **
**  ONE OR MORE 2K BLOCKS OF MAIN STORAGE SET ASIDE AS A  **
**  RESULT OF GETMAIN MACRO INSTRUCTION. EACH DQE ALSO    **
**  CONTAINS POINTERS TO FQE (FREE QUEUE). THESE SUBPOOLS **
**  ARE PUT OUT TO THE TERMINAL IN THE FORM-BLOCKSIZE     **
**  AND BLOCK LOCATION                                    **
************************************************************
         L     R1,OUTBUF     PLACE POINTER TO OUTPUT IN REG 1
         LA    R4,N0(R4)     ZERO OUT HIGH ORDER BYTE OF REG 4
         LTR   R4,R4         ARE THERE ANY SPQES PRESENT
         BZ    A0060         IF NOT THEN BRANCH
A00511   DS    0H             EQUATE LABEL TO THIS ADDRESS
         TM    SPQEFLGS,SPSHARE SEE IF THIS IS OWNED OR SHARED
         BO    A0054         IF SHARED THE 2 WORD IS THE SPQ ADDR
         L     R8,SPDQEPTR   GET ADDR OF DQE FROM SPQE
         USING DQESECT,R8    USING DQEDSECT FOR ADDRESSING
A0052    DS    0H             TEST FOR MORE DQES
         LA    R8,0(R8)      ZERO OUT HIGH ORDER BYTE OF REG 8
         LTR   R8,R8         ARE THERE MORE DQES
         BZ    A0053         IF NO DQE THEN BRANCH
         TM    SPQEID,HEX80  CHECK THE SUBPOOL NUMBER         @ZA00816
         BO    A0053         IF GREATER THAN 127 THEN BRANCH
         XR    R0,R0         CLEAR OUT REG 0
         IC    R0,SPQEID     PLACE SUBPOOL NUMBER INTO REG 0  @ZA00816
         L     R5,WORKAREA   PLACE POINTER TO WORKAREA INTO REG 5
         CVD   R0,N0(R5)     PLACE DECIMAL NUMBER INTO WORKAREA
         MVC   N8(N4,R5),PATTERN MOVE EDIT PATTERN INTO WORKAREA
         ED    N8(N4,R5),N6(R5) EDIT PACKED FIELD IN WORKAREA
         MVC   N13(N3,R1),N9(R5) MOVE SUBPOOL NUMBER TO OUTPUT
         L     R10,DQELNTH   PLACE BLOCKSIZE INTO REG 10
         BAL   R14,A3000     BRANCH TO CONVERT TO PRINTABLE HEX
         MVC   N32(N6,R1),N2(R2) MOVE PRINTABLE QUANTITY TO OUTPUT
         L     R10,DQEBLKAD  LOAD BLOCK LOCATION INTO REG 10
         BAL   R14,A3000     BRANCH TO CONVERT TO PRINTABLE HEX
         MVC   N22(N6,R1),N2(R2) MOVE PRINTABLE TO OUTPUT
         MVC   N8(N4,R1),SIZESPQ  MOVE LENGTH OF LINE INTO OUTPUT
         XR    R0,R0         ZERO OUT REG 0 FOR IO MODULE
         BAL   R14,A0100     GO PUT OUT INFORMATION
         BAL   R14,CLEARALL  BRANCH TO CLEAR OUT OUTPUT
         L     R8,DQEPTR     LOAD NEXT DQE ADDR INTO REG 8
         B     A0052         RETURN TO PROCESS NEXT DQE.
A0053    DS    0H
         LTR   R6,R6         DOES REG 6 HAVE A SPQ ADDR IN IT
         BZ    A0055         IF IT DOES NOT THEN BRANCH AROUND CODE
         LR    R4,R6         OTHERWISE PLACE SPQ ADDR INTO REG 4
         TM    SPQEFLGS,LASTSPQE SEE IF THIS IS THE LAST SPQ
         BO    A0060         IF IT IS THEN BRANCH TO CLEAN UP
         L     R4,N0(R4)     PLACE POINTER TO SPQ INTO REG 4
         XR    R6,R6         ZERO OUT REG 6 AS AN INDICATOR
         B     A00511        BRANCH TO PROCESS THIS SPQ
A0055    DS    0H             EQUATE LABEL TO THIS ADDRESS
         TM    SPQEFLGS,LASTSPQE IS THIS THE LAST SPQ
         BO    A0060         IF IT IS THEN BRANCH TO RETURN
         L     R4,SPQEAD     PLACE ADDRESS OF NEXT SPQE INTO REG 4
         B     A00511        BRANCH TO PROCESS NEXT SPQE
A0054    DS    0H             EQUATE LABEL TO THIS ADDRESS
         LR    R6,R4         PLACE NEXT SPQ ADDR IN REG 6
         L     R4,SPDQEPTR   PLACE 2ND WORD INTO REG 4
         L     R8,SPDQEPTR   PLACE NEXT DQE ADDR INTO REG 8
         B     A0052         BRANCH TO PROCESS THIS DQE
A0060    DS    0H
         L     R4,WORKAREA   PLACE ADDRESS OF WORKAREA INTO REG 4
         LA    R4,N112(R4)   PLACE ADDR FROM WITHIN WORKAREA IN REG 4
         LM    R0,R15,N0(R4) RESTORE REG TO ENTERING VALUE
         LR    R6,R5         FIND NEXT TCB UNDER TEST
         B     A00411        RETURN TO MAINLINE LISTMAP
         EJECT
A3000    DS    0H             EQUATE LABEL TO THIS ADDRESS
** THE FOLLOWING CODE CONVERTS THE DATA TO BE OUTPUTTED TO          **
** HEXADECIMAL.                                                     **
         L     R2,WORKAREA   PLACE WORKAREA ADDR INTO REG 2
         STM   R0,R15,N20(R2) SAVE MY REGISTERS TO FREE SOME UP
         XR    R5,R5         ZERO OUT REG 5 TO USE IT AS COUNTER
         LA    R15,N8        WE NEED AN 8 FOR LATER COMPARISON
         LR    R11,R10       PLACE ADDRESS TO BE CONVERTED INTO REG 11
A30001   DS    0H             EQUATE LABEL TO THIS ADDRESS
         XR    R10,R10       ZERO OUT REG 10
         SLDL  R10,FOUR      MOVE 4 BITS FROM REG 11 INTO REG 10
         CL    R10,NINE      SEE IF REG 10 CONTAINS A 9 OR LESS
         BH    A30005        IF IT DOESNT THEN BRANCH
         LA    R10,F0(R10)   OTHERWISE ADD A X'F0' TO REG 10
A30002   DS    0H             EQUATE LABEL TO THIS ADDRESS
         STC   R10,N0(R2)    PLACE CONTENTS OF REG 10 INTO WORKAREA
         LA    R2,N1(R2)     ADDRESS NEXT BYTE IN WORKAREA
         LA    R5,N1(R5)     ADD 1 TO COUNTER
         CR    R5,R15        SEE IF REG 5 CONTAINS AN 8 YET
         BNE   A30001        IF IT DOES THEN BRANCH
         L     R2,WORKAREA   PLACE ADDRESS OF WORKAREA INTO REG 2
         LM    R0,R15,N20(R2) RESTORE ENTERING REGISTERS
OUTSETUP L     R1,OUTBUF     PLACE POINTER OUTPUT AREA INTO R 1
         LA    R2,N8(R1)     PLACE ADDRESS OF OF ACTUAL MSG INTO REG 2
         ST    R2,N0(R1)     PLACE POINTER TO MSG INTO PARM LIST
         XR    R2,R2         ZERO REGISTER 2
         ST    R2,N4(R1)     PLACE ZEROES INTO 2 WORD OF POINTER
         L     R2,WORKAREA   PLACE ADDRESS OF WORKAREA INTO REG 2
         BR    R14           BRANCH TO NEXT INSTRUCTION
A30005   DS    0H             EQUATE LABEL TO THIS ADDRESS
         LA    R10,B7(R10)   ADD A X'B7' TO REG 10
         B     A30002        BRANCH TO CONTINUE PROCESSING
A0100    DS    0H             EQUATE LABEL TO THIS ADDRESS
         LR    R11,R14       SAVE RETURN ADDRESS IN REG 11
         L     R2,OUTBUF      R2= ADDR OF THE DATA TO BE PRINTED
         L     R2,N0(R2)      R2= ADDR OF THE OUTPUT
         XC    TSTIOPRM(L'TSTIOPRM),TSTIOPRM  CLEAR IO PARM AREA
         IKJEGSIO DATA,DATAPTR=(R2),DSNAME=(R0),ID=MAP21,              *
               MF=(E,TSTIOPRM)    CALL IKJEGIO FOR DATA
         LTR   R15,R15       TEST RETURN CODE FOR ZERO
         BZ    A0103         YES, THEN BRANCH
         B     RETCODE(R15)  GO TO BRANCH TABLE INDEXED BY CONTENTS OF
*                            REGISTER 15
A0103    DS    0H             EQUATE LABEL TO THIS ADDRESS
         TM    TSTFLGS1,TSTPRINT SEE IF THE PRINT SWITCH IS ON
         BNO   A0104         IF IT IS NOT THEN BRANCH
         XR    R0,R0         OTHERWISE ZERO OUT REG O
A0104    DS    0H             EQUATE LABEL TO THIS ADDRESS
         LR    R14,R11       RESTORE RETURN ADDRESS IN REG 14
         BR    R14           BRANCH TO RETURN TO NEXT INSTRUCTION
         SPACE
A0200    DS    0H
** THE FOLLOWING CODE SETS UP AND PUTS OUT THE MESSAGE FOR LISTMAP   **
         XC    TSTIOPRM(L'TSTIOPRM),TSTIOPRM  CLEAR IO PARM AREA
         IKJEGSIO MSG,FIRST=(R2),ID=MAP21,MF=(E,TSTIOPRM) CALL IKJEGIO
         B     RETCODE(R15)  NO, GO HANDLE RETURN CODE
         SPACE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* THE FOLLOWING SECTION OF CODE OUTPUT MESSAGES BY PLACING THEM
* OUTPUT BUFFER.     NOTE OUTSETUP SETS R1 TO OUTBUF
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
PUTMSG   L     R2,WORKAREA   GET SPACE TO SAVE RETURN ADDR
         ST    R14,N0(R2)    SAVE THE RETURN ADDRESS
         BAL   R14,OUTSETUP  SETUP THE OUTPUT BUFFER
         LH    R2,N0(R3)     GET LENGTH OF THE MESSAGE
         BCTR  R2,N0         DECREMENT THE LENGTH BY ONE
         EX    R2,MOVEMSG    MOVE THE MESSAGE TO THE OUTBUFFER
         BAL   R14,A0100     LINK TO OUTPUT THE MESSAGE
         L     R2,WORKAREA   GET ADDR OF WHERE RETURN IS.
         L     R14,N0(R2)    RESTORE THE RETURN ADDRESS
* THE FOLLOWING CODE CLEARS THE OUTPUT BUFFER IN PREPARATION FOR THE *
* NEXT LINE OF OUTPUT.                                               *
CLEARALL DS    0H             EQUATE LABEL TO THIS ADDRESS
         L     R1,OUTBUF      R1= ADDR OF THE OUTPUT BUFFER
         MVI   N9(R1),HEX40  MOVE A BLANK INTO FIRST BYTE OF OUTPUT
         MVC   N10(N80,R1),N9(R1) SPREAD THIS BYTE THRU OUTPUT
         BR    R14           BRANCH TO RETURN TO NEXT INSTRUCTION
*  THIS MOVE CHARACTERS IS EXECUTED TO MOVE OUTPUT TO OUTBUF
MOVEMSG  MVC   N8(N0,R1),N0(R3)
A5006    DS    0H
         LA    R2,MSG104     PUT MSG ADDR INTO REG 2 (FIRST LEVEL)
         LA    R4,INST17     R4= INSERT NO. 17 (LISTMAP)
         LA    R3,MSG277     PUT MSG ADDR INTO REG 3 (SECOND)
         XC    TSTIOPRM(L'TSTIOPRM),TSTIOPRM  CLEAR PARM AREA
         IKJEGSIO MSG,FIRST=(R2),SECOND=(R3),INST11=(NUM,(R4)),        *
               ID=MAP21,MF=(E,TSTIOPRM)  CALL IKJEGIO
         B     RETCODE(R15)   BRANCH AS PER RETURN CODE
         SPACE
LINKFAIL DS    0H                  LINK FAILURE
         XC    TSTIOPRM(L'TSTIOPRM),TSTIOPRM  CLEAR IO PARM AREA
         LR    R2,R15              R2= RETURN CODE
         LR    R3,R1               R3= ABEND CODE
         IKJEGSIO SVCERR,SVC=6,RC=(R2),ABENDRG=(R3),                   *
               ID=MAP21,MF=(E,TSTIOPRM)
         B     RETCODE(R15)   BRANCH AS PER RETURN CODE
         EJECT
***********************************************************************
*        CONSTANTS AND OTHER INFO. SUPERZAP = ZAP AREA
***********************************************************************
SUPERZAP DC    50CL1'Z'      SUPERZAP AREA OF MAP
         DS    0F            TABLE OF RB TYPES
TYPE     DC    C' PRB'       PROGRAM REQUEST BLOCK
         DC    C' IRB'       INTERRUPT REQUEST BLOCK
         DC    C'SIRB'       SYSTEM INTERRUPT REQUEST BLOCK
         DC    C'SVRB'       SUPERVISOR REQUEST BLOCK
NINE     DC    X'00000009'   USED FOR COMPARISON
LNSIZE   DC    X'00400000'   LENGTH FOR OUTPUT MSG
SIZERB   DC    X'00280000'   LENGTH FOR OUTPUT MSG
SIZESPQ  DC    X'00200000'   LENGTH FOR OUTPUT MSG
SIZERB2  DC    X'001C0000'   LENGTH FOR OUTPUT MSG
PATTERN  DC    X'40202120'   PATTERN FOR EDIT COMMAND
PARSERC  DS    0H
         DC    A(A0025)      RETURN CODE OF 0 FROM IKJPARS
         DC    A(A004123A)   RETURN CODE OF 4 FROM IKJPARS
         DC    A(A004121)    RETURN CODE OF 8 FROM IKJPARS
         DC    A(A5006)      RETURN CODE OF 12 FROM IKJPARS
         DC    A(NOROOM)     RETURN CODE OF 16 FROM IKJPARS
         EJECT
***********************************************************************
*        THE FOLLOWING ARE ALL THE POSSIBLE HEADERS PUTOUT FROM LISTMAP
***********************************************************************
HDR001   DS    0H
         DC    AL2(ENDHDR1-HDR001)               LENGTH OF HEADING
         DC    AL2(0)                            TWO BYTES OF ZERO
         DC    C'REGION SIZE         '           HEADER
ENDHDR1  DS    0H                                END
HDR002   DS    0H
         DC    AL2(ENDHDR2-HDR002)               LENGTH OF HEADING
         DC    AL2(0)                            TWO BYTES OF ZERO
         DC    C'     PROGRAM NAME  LENGTH   LOCATION'    HEADER
ENDHDR2  DS    0H                                END
HDR003   DS    0H
         DC    AL2(ENDHDR3-HDR003)               LENGTH OF HEADING
         DC    AL2(0)                            TWO BYTES OF ZERO
         DC    C'ACTIVE RBS:  TYPE   PROGRAM-ID' HEADER
ENDHDR3  DS    0H                                END
HDR004   DS    0H
         DC    AL2(ENDHDR4-HDR004)               LENGTH OF HEADING
         DC    AL2(0)                            TWO BYTES OF ZERO
         DC    C'SUBPOOL INFORMATION:'           HEADER
ENDHDR4  DS    0H
HDR005   DS    0H
         DC    AL2(ENDHDR5-HDR005)               LENGTH OF HEADING
         DC    AL2(0)                            TWO BYTES OF ZERO
         DC    C'UNDER TCB AT         '          HEADER
ENDHDR5  DS    0H                                END
HDR006   DS    0H
         DC    AL2(ENDHDR6-HDR006)               LENGTH OF HEADING
         DC    AL2(0)                            TWO BYTES OF ZERO
         DC    C'NUMBER   LOCATION   LENGTH'     HEADER
ENDHDR6  DS    0H                                END
HDR007   DS    0H
         DC    AL2(ENDHDR7-HDR007)               LENGTH OF MESSAGE
         DC    AL2(0)                            TWO BYTES OF ZERO
         DC    C'TASK HAS TERMINATED'            MESSAGE TEXT
ENDHDR7  DS    0H                                END
HDR008   DS    0H
         DC    AL2(ENDHDR8-HDR008)               LENGTH OF MESSAGE
         DC    AL2(0)                            TWO BYTES OF ZERO
         DC    C'TASK IS ACTIVE'                 MESSAGE TEXT
ENDHDR8  DS    0H                                END
         EJECT
IKJEGPCL IKJPARM
PRINT    IKJKEYWD
         IKJNAME  'PRINT',SUBFLD=DSNAME
DSNAME   IKJSUBF
DSN      IKJPOSIT  DSNAME,PROMPT='DSNAME'
         IKJENDP
         EJECT
PARSEFLD DC    V(IKJEGPCL)   POINTER TO PARSE PCL
************************************************************
**             STAE RETRY CODE AND CONSTANTS              **
************************************************************
MAPSPL   IKJEGSPL RTRY=RETRY,ABNTB=STAETAB,MODNM=IKJEGMAP,TNM=LISTMAP
STAETAB  DS    0F             EQUATE LABEL TO THIS ADDRESS
         DC    AL1(99)       POINTER TO CORRECT MSG
         DC    AL3(BLOWUP1)  POINTER TO INST AFTER LINK TO IKJPARS
         DC    X'FF'         END OF TABLE
         DS    0H            GET US ON A HALF WORD BOUNDARY
RETRY    DS    0H             BEGINNING OF RETRY ROUTINE
         L     R4,CVTPTR     PLACE ADDRESS OF CVT INTO REG 4
         USING CVT,R4        SET UP ADDRESSABILITY TO CVT DSECT
         L     R4,CVTTCBP    GET ADDRESS OF CURRENT TCB
         L     R4,TCBADR(N0,R4) FROM CVT
         DROP  R4
         DROP  R5            BANISH REG 5 AS AN ADDRESSING REGISTER
         USING TCB,R4        USE REG 4 TO ADDRESS TCB DSECT
         L     R9,TCBTRN     PLACE TCOMTAB ADDR INTO REG 9
         L     R13,REGSAVE2  RESTORE MY SAVE REGISTER
         L     R12,MYBASE(R13) RESTORE MY BASE REGISTER
         B     A004122       RETURN TO MAINLINE
         EJECT
***********************************************************
*                                                         *
*              TCOMTAB DSECT                              *
*                                                         *
***********************************************************
COMDSECT TCOMTAB              MACRO WHICH GENERATES TCOMTAB DSECT
         EJECT
         TSTCWORK
         EJECT
         IKJPPL
         EJECT
************************************************************
*                                                          *
*                       PARSE PDE DSECT                    *
*                                                          *
************************************************************
PARSEPDE DSECT               DSECT TO ACCESS PDE CREATED BY PARSE
PRINTFLG DS    CL1           TWO BYTE FIELD USED TO INDICATE PRESENCE
PRINTBIT DS    CL1           SWITCH TO TELL IF PRINT WAS ENTERED
NOTUSED  DS    CL2           EMPTY FIELD
PTRDSNME DS    A             POINTER TO DSNAME
LENGTH1  DS    CL2           LENGTH OF DSNAME UP TO 44 BYTES
FLAGS    DS    CL1           FLAGS
RESERVE1 DS    CL1           RESERVED
         EJECT
************************************************************
** THIS SECTION CONTAINS ALL DSECTS ACCESSED BY IKJEGMAP  **
************************************************************
*                                                          *
*              TCB  TASK CONTROL BLOCK DSECT               *
*                                                          *
************************************************************
TCBDSECT IKJTCB
M        EQU   TCBOTC-TCB    MOTHER TASK
S        EQU   TCBNTC-TCB    SISTER TASK
D        EQU   TCBLTC-TCB    DAUGHTER TASK
         EJECT
*********************************************************************
*        CDE DSECT
*********************************************************************
         IHACDE
         EJECT
*********************************************************************
*        EXTENT LIST DSECT
*********************************************************************
         IHAXTLST
         EJECT
*********************************************************************
*        LOAD LIST DSECT
*********************************************************************
         IHALLE
         EJECT
CVT      DSECT
         CVT
         EJECT
         IKJRB
         EJECT
***********************************************************
*                                                         *
*              SPQE  SUBPOOL QUEUE DSECT                  *
*                                                         *
***********************************************************
         IHASPQE
         EJECT
***********************************************************
*                                                         *
*              DQE   DESCRIPTOR QUEUE ELEMENT DSECT       *
*                                                         *
***********************************************************
         IHADQE
         EJECT
***********************************************************
*                                                         *
*              PQE    DSECT                               *
*                                                         *
***********************************************************
         IHAPQE
         END
