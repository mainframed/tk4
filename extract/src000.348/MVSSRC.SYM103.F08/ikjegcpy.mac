         TITLE  'IKJEGCPY -- COPY SUBCOMMAND FOR TSO/TEST'
* A 326000,366000                                            @ZA10462
***********************************************************************
*
* STATUS --
*    CHANGE LEVEL 000, VERSION 02, OS/VS2
*
* FUNCTION --
*    THIS SUBCOMMAND OF TEST RECEIVES CONTROL FROM TEST'S MAINLINE
*    MODULE(IKJEGMNL) VIA A LINK.
*    IT COPIES FROM STORAGE TO STORAGE , STORAGE TO REGISTERS,
*    REGISTERS TO STORAGE, AND ALSO FROM REGISTERS TO REGISTERS.
*    IT HAS AN ADDITIONAL FUNCTION OF OBTAINING POINTERS.
*    COPY HAS 2 POSITIONAL OPERANDS AND 3 KEYWORDS(LENGTH,POINTER,
*    AND NOPOINT).
*    THE POINTER KEYWORD CHANGES THE MEANING OF THE FROM POSITIONAL.
*    EITHER SPECIFY --
*    COPY  ADDRESS1  ADDRESS2
*    COPY  ADDRESS1  ADDRESS2  LENGTH(DECIMAL)
*    COPY  ADDRESS1  ADDRESS2  POINTER
*    COPY  ADDRESS1  ADDRESS2  LENGTH(DECIMAL)  POINTER
*    ADDRESS1 MAY BE AN ADDRESS OR GENERAL REGISTER.
*    BUT, IF POINTER IS SPECIFIED IT CANNOT BE GENERAL REGISTER.
*    ADDRESS2 MAY BE AN ADDRESS OR GENERAL REGISTER.
*    EXAMPLES OF COPY FOLLOW --
*    COPY  10.%%%+88%  A06A0.  L(512)
*    RELOCATING A TCB TO KEYED(OR GOTTEN) CORE.
*    COPY  80680.  80681.  L(79)
*    PROPIGATION OF 1 BYTE THRU A BUFFER.
*    COPY  80680.  80682.  L(44)
*    MOVING SOME INSTRUCTIONS AROUND. THESE FIELDS OVERLAP BUT
*    THE COPY IS DONE BACKWARDS TO AVOID PROPIGATION.
*    COPY  0R  A0200.  L(64)
*    SAVING ALL REGISTERS FOR A LATER LOAD. ANY LENGTH ABOVE
*    64 WILL DEFAULT TO 64.
*    COPY  13R%+12N  14R  L(60)
*    EQUIVALENT TO A LOAD MULTIPLE FROM A SAVE AREA.
*    COPY  15R  0R  L(8)
*    CONTENTS OF 15 AND 0 TO 0 AND 1
*    COPY  A  3R
*    COPY FROM LOCATION A TO REGISTER 3 WITH A DEFAULT LENGTH OF 4
*    COPY  10.%  3R  P
*    PLACES THE CVT ADDRESS INTO REGISTER 3 ZEROING THE HIGH BYTE.
*    COPY  10.  3R
*    THIS WILL DO THE SAME AS ABOVE WITHOUT THE HIGH BYTE ZEROED.
*    COPY  80.  1R  L(1)  P
*    THIS WILL PUT A X'80' INTO THE HIGH BYTE OF R1,LOW 3 REMAIN.
*    COPY  40.  A  L(1)  P
*    THIS WILL PUT A BLANK AT LOCATION 'A'
*    COPY  A  A+1  L(79)
*    THIS WILL PROPIGATE THE ABOVE BLANK THRU A BUFFER.
*    COPY  IEFBR14.IEFBR14  15R  P
*    THIS WILL PLACE THE ENTRY POINT OF IEFBR14 INTO R15.
*    COPY  6B000.  A+1  L(3)  P
*    A+1 WILL NOW CONTAIN THE 3 BYTE ADDRESS X'06B000'
*    COPY  0.  0R  L(8)
*    THIS WILL NOT ZERO BOTH 0R AND 1R , THE POINTER KEYWORD DEFAULTS
*    TO A MAXIMUM OF 4.  ONLY REG 0 WAS CLEARED.
*
* ENTRY POINTS --
*    IKJEGFM  -- FROM PARSE FOR 'FROM' POSITIONAL.
*    IKJEGTO  -- FROM PARSE FOR 'TO' POSITIONAL.
*    IKJEGLN  -- FROM PARSE FOR 'LENGTH' KEYWORD.
*    STAERTRY -- AFTER AN ABEND
*
* INPUT --
*    A LINE OF INPUT.
*
* OUTPUT --
*    DIAGNOSTIC MESSAGES UPON ERROR.
*
* EXTERNAL REFERENCES --
*    IKJPARS(LINK)
*    IKJEGCVT(BALR) TSTCONVT IN TCOMTAB.
*    IKJEGBLD(BALR) TSTADDR IN TCOMTAB.
*    IKJEGIO(BALR) USING THE IKJEGSIO MACRO.
*
* EXITS, NORMAL --
*    RETURN TO MAINLINE(IKJEGMNL) RC OF 0-NORMAL,16-ATTENTION.
*
* EXITS, ERROR --
*    RETURN TO MAINLINE(IKJEGMNL) RC OF 20-ABEND,24-ESTAE COULDNT BE
*    ISSUED.
*
* TABLES/WORK AREAS --
*    TCOMTAB-TEST'S COMMUNICATION TABLE.
*    WA- COPY'S WORKAREA.
*
* ATTRIBUTES --
*    REENTRANT-REFRESHABLE.
*
* CHARACTER CODE DEPENDENCY --
*    REASSEMBLE IS REQUIRED FOR CHANGE OF CODE.
*
* NOTES --
*    REGISTER CONVENTIONS
*    R0, R1, R3, R4, R5 ARE QUICKY WORK REGS.
*    R2 PDL ADDRESS(MAIN ROUTINE), PDE ADDRESS(VALIDITY CK EXIT)
*    R6 USED AS WORK AREA IN ADDRESS VALIDITY CHECK ROUTINE.
*    R7 IS PARAMETER REG FOR ADDRRESS VALIDITY CHECK ROUTINE.
*    R8 IS THE VALIDITY LIST PASSED FROM IKJPARS.
*    R9 IS TCOMTAB ADDRESS.
*    R10 IS WA ADDRESS. (COPY'S WORK AREA)
*    R11 IS USED AS AN INTERNAL LINK REGISTER ONLY.
*    R12 IS THE BASE REGISTER.
*    THE HIGH BYTE IN REGISTER 12 INDICATES WHICH VALIDITY EXIT IS
*    EXECUTING.
*    PLM = SY35-0004
*    *     TSO COMMAND PROCESSOR LOGIC
*    *     VOLUME III - TEST
* CHANGE-ACTIVITY -
*                 APAR OZ10462 FIXES FETCHING AND STORING OF
*                 REGISTERS IN THE INCORRECT RB WHEN AN
*                 ASYNCHRONOUS EXIT CAUSES AN IRB TO BE QUEUED
*                 ON THE TCB/RB CHAIN.  THE FIX IS AROUND LABELS
*                 SKIP2 AND CHECKTO.  THE SVC 97 SVRB ADDRESS
*                 IS OBTAINED FROM ECBPP+1.
***********************************************************************
         SPACE
         EJECT
         COPY  IKJEGSIO
*        EQUATES
         SPACE
R0       EQU   0              REG.  0
R1       EQU   1              REG.  1
R2       EQU   2              REG.  2
R3       EQU   3              REG.  3
R4       EQU   4              REG.  4
R5       EQU   5              REG.  5
R6       EQU   6              REG.  6
R7       EQU   7              REG.  7
R8       EQU   8              REG.  8
R9       EQU   9              REG.  9
R10      EQU   10             REG. 10
R11      EQU   11             REG. 11
R12      EQU   12             REG. 12
R13      EQU   13             REG. 13
R14      EQU   14             REG. 14
R15      EQU   15             REG. 15
         SPACE
X0       EQU   0              NO.  0
X1       EQU   1              NO.  1
X2       EQU   2              NO.  2
X3       EQU   3              NO.  3
X4       EQU   4              NO.  4
X5       EQU   5              NO.  5
X6       EQU   6              NO.  6
X7       EQU   7              NO.  7
X8       EQU   8              NO.  8
X9       EQU   9              NO.  9
N10      EQU   10             NO. 10
N11      EQU   11             NO. 11
N12      EQU   12             NO. 12
N13      EQU   13             NO. 13
N14      EQU   14             NO. 14
N15      EQU   15             NO. 15
N16      EQU   16             NO. 16
N24      EQU   24             NO. 24
N28      EQU   28             NO. 28
N64      EQU   64             NO. 64
N80      EQU   80             NO. 80
N256     EQU   256            NO. 256
RC8      EQU   8              RETURN CODE 08
RC12     EQU   12             RETURN CODE 12
RC16     EQU   16             RETURN CODE 16
RC20     EQU   20             RETURN CODE 20
CVTPTR   EQU   16             LOCATION OF CVT POINTER
CPYCODE  EQU   0              COPY CODE
FMCODE   EQU   1              FM CODE
TOCODE   EQU   FMCODE+X1      TO CODE
LNCODE   EQU   TOCODE+X1      LN CODE
PTRKEY   EQU   1              PARSE CODE FOR POINTER KEYWORD.
BLANK    EQU   C' '           BLANK
CHARF    EQU   C'F'           F
CHART    EQU   C'T'           T
PLUS     EQU   C'+'           PLUS SIGN.
TESTSVC  EQU   97             TEST SVC NUMBER
X80      EQU   X'80'          HEXIDECIMAL 80
XFF      EQU   X'FF'          X'FF'
* FIRST LEVEL MESSAGE EQUATES
M0064    EQU   64             INVALID LENGTH
M0066    EQU   66             INVALID FROM ADDRESS
M0072    EQU   72             INVALID TO ADDRESS
M0101    EQU   101            INVALID ADDRESS ...
M0103    EQU   103            NOT ENOUGH MAIN STORAGE
M0104    EQU   104            COPY FAILED
* SECOND LEVEL MESSAGE EQUATES
M0266    EQU   266            LEN MAY NOT EXCEED 64
M0267    EQU   267            REG NOT. MUST BE GEN REG
M0268    EQU   268            REG NOT. MUST BE INDIRECT
M0277    EQU   277            PARSE ERROR CODE 12
M0279    EQU   279            ADDRESS IN WRITE PROT. CORE
M0283    EQU   283            SVC 97 RET CODE NONZERO
M0284    EQU   284            LEN MUST BE BTWN 0 AND 65535
* CONSTANT MESSAGE INSERT EQUATES
I0030    EQU   30             COPY
I0040    EQU   40             IKJPARS
I0099    EQU   99             BLOW CODE IN ABENDTABLE
I0097    EQU   97             BLOW CODE IN ABENDTABLE
         EJECT
*        DSECTS
         SPACE
WA       DSECT                WORK AREA DSECT
WALIST   DS    0A             PARSE PARAMETER LIST.
WAUPT    DS    1A             UPT POINTER.
WAECT    DS    1A             ECT POINTER
WAECBPTR DS    1A             ATTENTION ECB POINTER.
WAPRM    DS    1A             PARM BLOCK POINTER.
WANSWER  DS    1A             PTR TO TSTANSPL
WACODE   DS    0X             VALIDITY KEYWORD CODE.
WAINBUF  DS    1A             INPUT BUFFER TO BE PARSED.
WASAVERC DS    0X             ONE BYTE RETURN CODE FORM CVT,SYM OR IO
WAPASS   DS    1A             PARM TO BE PASSED TO VALIDITY EXIT.
WAFROM   DS    1A             FROM ADDRESS OR FROM REGISTER.
WATO     DS    1A             TO ADDRESS OR TO REGISTER.
WALENGTH DS    1A             DEFAULT OR LENGTH SPECIFIED BY THE USER.
WATEMP   DS    3F             TEMPORARY W.A. FOR SVC 97 AND SEARCH RTN
* THREE WORD AREA USED BY SRH RTN TO PASS PARAMETERS
         ORG   WATEMP         ORG TO NAME EACH WORD
WATEMP1  DS    F              FIRST WORD
WATEMP2  DS    F              SECOND WORD
WATEMP3  DS    F              THIRD WORD
WAFMREG  DS    16A            SAVE AREA FOR FROM REGISTER(S)
WATOREG  DS    16A            SAVE AREA FOR NEW REGISTERS
WAEND    EQU   *-WA           LENGTH OF WORKAREA.
         SPACE
VAL      DSECT
VALPDE   DS    1A             PDE PASSED FROM PARSE.
VALPASS  DS    1A             PARM PASSED BY MAIN ROUTINE.
VAL2LVL  DS    1A             2ND LEVEL MESSAGE PTR FOR PARSE.
         SPACE 2
RB       DSECT
RBGRSAVE EQU   RB+32
         EJECT
IKJEGCPY CSECT
*        MAIN PROCESSOR CODE
         SPACE
         USING *,R12          ADDRESSABILITY
         USING TCOMTAB,R9     ADDRESSABILITY
         USING WA,R10         ADDRESSABILITY
         USING IKJPARMD,R2    ADDRESSABILITY
         USING BRKELEM,R6     ADDRESSABILITY
         SAVE  (14,12),,*     SAVE MAINLINES REGISTERS.
         LR    R12,R15        SETUP BASE REG
         L     R3,REGSAVE2    SET FOWARD AND BACKWD POINTERS
         ST    R13,X4(R3)     DITTO
         ST    R3,X8(R13)     DITTO
         LR    R13,R3         SET UP MY SAVE
         L     R4,WORKAREA    GET GENERAL WORK AREA PTR.
         LA    R10,CWORKCMD-TSTCWORK(R4)  SET UP CPY'S W.A. PTR
         L     R3,TSTSTAE     GET ADDRESS OF TEST STAE EXIT (STA)
         STM   R14,R12,N12(R13)  SAVE REGS IF ABEND OCCURS.
         LR    R1,R10         STAE LIST PTR FOR STAE SVC
         MVC   X0(STAELSTL,R10),STAELIST  MOVE IN LIST
         ESTAE (R3),PARAM=LISTESTA,RECORD=YES,MF=(E,(R1))  ISSUE ESTAE
         LTR   R15,R15        Q.GOT AN S.C.B.
         BZ    ESTAEOK        RC=0 FROM ESTAE, ALL OK
         STC   R15,TSTESTRC   STORE RET CODE
         LA    R15,N24        SEND RC=24 TO MAINLINE
         B     MNLRETS        BRANCH TO RETURN
         SPACE
*        WALENGTH IS INITIALIZED.
*        WALENGTH = X'00000004'
*        WHEN THE LENGTH IS NOT SPECIFIED, A DEFAULT OF 4 IS TAKEN.
*        COPY  A1680.  ADDR2 -- WILL CAUSE WAFROM TO BE X'000A1680'
*        COPY  3R      ADDR2 -- WILL CAUSE WAFROM TO BE X'80000003'
*        WATO IS HANDLED THE SAME AS WAFROM.
*        IF A REGISTER IS SPECIFIED IN EITHER THE 'FROM' OR
*        THE 'TO' POITIONALS, A MAXIMUM LENGTH OF 64 MAY
*        BE DEFAULTED TO.
*        ANYTIME POINTER IS SPECIFIED, A MAXIMUM LENGTH OF 4 MAY
*        BE DEFAULTED TO.
         SPACE
ESTAEOK  LA    R0,X4          SET DEFAULT LENGTH OF 4
         ST    R0,WALENGTH    DITTO
PARSE    EQU   *              GOING TO PARSE.
         LR    R1,R10         SET PARM REGISTER.
         MVC   WALIST(N12),PARMLIST  SETUP LIST.
         MVC   WAPRM(X4),PRMAD  DITTO
         LA    R5,TSTANSPL    DITTO
         ST    R5,WANSWER     DITTO
         MVC   WAINBUF(X4),INBUF  DITTO
         ST    R13,WAPASS     PARM TO BE PASSED TO VALIDITY EXIT.
         LINK  EP=IKJPARS,ERRET=LINKERR     GO TO PARSE.
BLOWPARS EQU   *              IF LINK FAILS ABEND WILL OCCUR HERE.
FROMPARS EQU   *              COMING FROM PARSE.
         L     R2,TSTANSPL    GET THE PDL ADDRESS.
         B     TABLE1(R15)    BRANCH TABLE.
TABLE1   B     AOK            ALL O.K. MAYBE.
         B     NOPROMPT       NOPROMPT MODE. QUIT.
         B     ATTN           RET TO MNL WITH A CODE OF 16
         B     BADPARMS       PRINT 'PARSE ERROR CODE 12' RETURN.
         B     NOCORE         PRINT 'NOT ENOUGH CORE' RETURN.
         B     CHECKRC        A RET. CODE HAS BEEN PASSED BY EXIT RTN.
         SPACE
         SPACE
CHECKRC  EQU   *              OBTAIN THE PASSED RET. CODE FROM VAL EXIT
         IC    R15,WASAVERC   R15= RET. CODE.
         CH    R15,ATTNCODE   COMPARE TO CODE 16
         BL    NOPROMPT       IF < 16, SET TO 0 WITH TSTFLUSH
         B     MNLRET         ELSE RETURN WITH CODE PASSED (16 OR 20)
NOCORE   EQU   *              PRINT 'NOT ENOUGH CORE' MSG
         LA    R2,M0103       MSG - NOT ENOUGH CORE
         LA    R3,X0          NO SECOND LEVEL MSG
         BAL   R11,MSG1       GO OUTPUT MESSAGE
         B     MNLRET0        RETURN TO MNL
BADPARMS EQU   *              PRINT 1ST AND 2ND LEVEL MESSAGES
         LA    R2,M0104       MSG - COPY FAILED
         LA    R3,M0277       MSG - PARSE ERROR
         BAL   R11,MSG2       GO OUTPUT MESSAGE
         B     MNLRET0        RETURN TO MNL.
ATTN     EQU   *              RETURN TO MNL WITH CODE OF 16.
         LA    R15,RC16       DITTO
         B     MNLRET         RETURN.
NOPROMPT EQU   *
         OI    TSTFLGS4,TSTFLUSH  SET THE FLUSH BIT
         B     MNLRET0        RETURN TO MAINLINE.
AOK      EQU   *              ALL O.K. MAYBE.
         L     R5,WALENGTH    CHECK LENGTH FOR ZERO.
         LTR   R5,R5          Q. WAS ZERO ENTERED BY USER.
         BZ    MNLRET0        A. YES USERS WISH IS GRANTED.
         CLI   PRMP+X1,PTRKEY  Q.IS POINTER SPECIFIED.
         BNE   NOPOINT        NO.
         TM    WAFROM,X80     Q.IS REGISTER SPECIFIED.
         BZ    POINT          NO. THIS IS LEGAL.
         LA    R2,M0066       MSG - INVAL FROM ADDR.
         LA    R3,M0268       MSG - INDIRECT GEN REG
         BAL   R11,MSG1       GO OUTPUT MESSAGES
         B     NOPROMPT       SET FLUSH BIT AND RETURN.
* IF POINTER IS SPECIFIED, THE VALUE SPECIFIED AS ADDRESS1 IS MOVED
* INTO 'WAFMREG'(USED AS A WORK AREA) AND THE ADDRESS OF WAFMREG IS
* PLACED IN WAFROM.  A MAXIMUM LENGTH OF 4 MAY BE SPECIFIED. IF THE
* LENGTH IS GREATER THAN 4, A LENGTH OF 4 IS ASSUMED. IF THE LENGTH
* IS LESS THAN 4 (=N), THEN ONLY THE 1ST N BYTES OF THE 4 BYTE VALUE
* SPECIFIED WILL BE USED. THEY WILL BE RIGHT JUSTIFIED IN THE FIRST
* 4 BYTES OF WAFMREG.
POINT    EQU   *              POINTER WAS SPECIFIED
         LA    R0,X4          Q. LENGTH HIGHER THAN DEFAULT.
         CR    R0,R5          *
         BH    SKIP1          NO. DONT DEFAULT.
         ST    R0,WALENGTH    DEFAULT TO LENGTH OF 4
         LR    R5,R0          NEW LENGTH TO R5
SKIP1    EQU   *
         LA    R1,WAFROM      GET POINTER TO ADDRESS.
         BCTR  R1,X0          INITIALIZE FOR BUMP.
BUMPONE  EQU   *
         LA    R1,X1(R1)      BUMP ONE.
         CR    R0,R5          Q.MOVE NOW OR BUMP.
         LA    R5,X1(R5)      ADD ONE TO THE LENGTH.
         BNE   BUMPONE        BUMP UNTIL COUNT REACHES FOUR.
         MVI   WAFROM,X0      CLEAR THE HIGH BYTE.
         MVC   WAFMREG(X4),X0(R1)   MOVE POINTER ADDRESS.
         LA    R1,WAFMREG     PLACE ADDRESS OF SLOT 0 TO WAFROM
         ST    R1,WAFROM      DITTO.
         B     CHECKTO        CHECK IF 'TO' WAS ENTERED.
NOPOINT  EQU   *
         TM    WAFROM,X80     Q.IS IT A REGISTER.
         BZ    VALCHKFM       NO. IT IS AN ADDRESS.
REGISTER EQU   *
         LA    R0,N64         REGISTER WAS ENTERED.
         CR    R0,R5          Q.LENGTH GREATER THAN 64.
         BH    SKIP2          A. NO. DO NOT DEFAULT.
         ST    R0,WALENGTH    DEFAULT TO 64.
SKIP2    EQU   *
         L     R1,WAFROM      OBTAIN FROM REGISTER NUMBER.
         SLL   R1,X2          LOSE HIGH BIT. AND MULT BY 4.
         SR    R0,R1          R0=64-(REG NUMX4)
         L     R3,ECBPP       ADDRESSIBILITY TO SVRB REG SA  @ZA10462
         LA    R3,RBGRSAVE-RB(R3)  DITTO.
         LA    R4,WAFMREG     ADDRESSIBILITY TO FM REG SAVE AREA.
         AR    R4,R0          POINTER TO SLOT WHERE REGS WILL BE MOVED
         LTR   R5,R1          Q. WAS R0 SPECIFIED.
         BZ    MOVE2          BYPASS THIS MOVE. ONLY 1 MOVE REQD.
         SPACE
*        AT THIS POINT, ASSUME  COPY  3R  ADDR2 L(64),WAS SPECIFIED.
*        REGS 0,1,2 ARE MOVED FROM SVRB REG SAVE TO THE LAST 3 SLOTS
*        OF WAFMREG SAVE AREA.
         SPACE
         BCTR  R5,X0          MOVE THE FIRST PORTION OF REGISTERS.
         EX    R5,MVC         MOVE THEM.
MOVE2    EQU   *              2ND MOVE UNLESS 0R WAS SPECIFIED.
         AR    R3,R1          POINTER TO REG SLOT IN SVRB.
         LA    R4,WAFMREG     SET POINTER TO BEGINNING OF FM REG AREA.
         LR    R5,R0          LENGTH OF 2ND PORTION TO BE MOVED.
         SPACE
*        AT THIS POINT, ASSUME  COPY  3R  ADDR2 L(64),WAS SPECIFIED.
*        REGS 3,4,5,6,7,8,9,10,11,12,13,14,15 ARE MOVED FROM
*        SVRB REG SAVE TO THE FIRST 13 SLOTS OF WAFMREG SAVE AREA.
         SPACE
         BCTR  R5,X0          DECREMENT FOR MOVE.
         EX    R5,MVC         MOVE THE 2ND PORTION.
         ST    R4,WAFROM      WAFROM= POINTER TO WAFMREG
         B     CHECKTO        CHECK 'TO' ADDRESS
VALCHKFM EQU   *
         SPACE
         L     R3,WAFROM      OBTAIN FROM ADDRESS.
         L     R5,WALENGTH    OBTAIN THE LENGTH.
         LR    R7,R3          PUT ADDRESS TO BE CHECKED IN R7.
         BAL   R11,ADDRCHK    VALIDITY CHECK ROUTINE
         LR    R15,R8         RET CODE TO REG 15
         LA    R8,X8          REG 8 IS 8
         CR    R15,R8         COMPARE RET CODE TO 8
         BL    CHECKTO        0 OR 4 ARE OK
         BH    MNLRET         HAVE RET CODE GREATER THAN 8
         LA    R2,M0066       MSG - INVALID FROM ADDR
         LA    R3,M0279       MSG - ADDR IN PROT. CORE
         BAL   R11,MSG1       GO OUTPUT MESSAGES
         B     NOPROMPT       SET FLUSH BIT AND QUIT.
CHECKTO  EQU   *
         TM    WATO,X80       Q. IS IT ADDRESS OR REGISTER.
         BZ    COPY2          A. IT'S AN ADDRESS . COPY IT.
*  COPY IS TO REGISTERS
         L     R3,ECBPP        ADDRESSABILITY TO SVRB REG SA  @ZA10462
         LA    R3,RBGRSAVE-RB(R3)  DITTO.
         LA    R4,WATOREG     ADDRESSABILITY TO 'TO' REG SAVE AREA.
         LA    R5,N64-X1      MOVE ALL REGS TO 'TO' SAVE AREA.
         EX    R5,MVC         MOVE THEM.
         LA    R0,N64         CHECK FOR LENGTH LARGER THAN 64.
         C     R0,WALENGTH    Q. LARGER THAN 64.
         BH    SKIP5          NO. BYPASS DEFAULT.
         ST    R0,WALENGTH    DEFAULT TO 64.
SKIP5    EQU   *
         L     R1,WATO        GET REGISTER SPECIFIED.
         SLL   R1,X2          DROP HIGH BIT. AND MULT X 4.
         SR    R0,R1          64-(REG NUMX4)= LNG 2ND PORTION
         L     R3,WAFROM      OBTAIN FROM ADDRESS.
         SPACE
*        AT THIS POINT , WAFROM WILL ALWAYS CONTAIN AN ADDRESS.
         SPACE
         LA    R4,WATOREG     ADDRESSIBILITY TO 'TO' REG SAVE AREA.
         AR    R4,R1          POINT TO REG SLOT OF SPECIFIED REG.
         L     R5,WALENGTH    OBTAIN LENGTH TO BE MOVED.
         CR    R5,R0          Q. IS LENGTH GREATER THAN 2ND PORTION OF
*                             'TO' SAVE AREA.
         BH    MORE           YES. TWO MOVES REQUIRED.
         BCTR  R5,X0          ONE MOVE. LENGTH SPECIFIED.
BLOW1A   EQU   *              PROTECTION CHECK HERE, IF ABEND.
         EX    R5,MVC         MOVE IT.
BLOW1    EQU   *              PROTECTION CHECK HERE, IF ABEND.
         BAL   R8,SRH0        CALL SEARCH ROUTINE
         B     COPYR          CHANGE REGS. ALL OF THEM.
MORE     EQU   *              2 MOVES REQUIRED.
         LR    R5,R0          OBTAIN LENGTH OF SECOND PORTION(1ST MOVE)
         BCTR  R5,X0          DECREMENT FOR EXECUTE.
BLOW2A   EQU   *              PROTECTION CHECK HERE, IF ABEND.
         EX    R5,MVC         MOVE IT.
BLOW2    EQU   *              PROTECTION CHECK HERE, IF ABEND.
         BAL   R8,SRH0        CALL SEARCH ROUTINE
         AR    R3,R0          UPDATE FROM ADDRESS FOR 2ND MOVE.
         LA    R4,WATOREG     2ND MOVE GOES TO BEGINNING OF WATOREG
         L     R5,WALENGTH    OBTAIN LENGTH OF 2ND MOVE.
         SR    R5,R0          DITTO.
         BCTR  R5,X0          DECREMENT FOR MOVE.
BLOW3A   EQU   *              PROTECTION CHECK HERE, IF ABEND.
         EX    R5,MVC         MOVE IT.
BLOW3    EQU   *              PROTECTION CHECK HERE, IF ABEND.
         BAL   R8,SRH0        CALL SEARCH ROUTINE
* INVOKE SVC 97 TO MOVE REGS FROM WORK AREA (WATOREG) TO PP TCB.
COPYR    EQU   *              CHANGE ALL REGISTERS.
         L     R3,PPTCB       ADDR OF TCB
         LA    R4,WATOREG     POINTER TO NEW REGS.
         IKJEGS9G AGPR,TCBADDR=(R3),VALUE=(R4),MF=(E,WATEMP)
         LTR   R15,R15        IF CHANGE WAS SUCCESSFUL,
         BZ    MNLRET0        RETURN TO MAINLINE.
         LA    R2,N12         REG 2 = 12 FOR COMPARISON
         CR    R15,R2         COMPARE RET CODE TO 12
         BH    MNLRET         GREATER THAN 12, RETURN TO MNL
         LA    R2,M0104       MSG - COPY FAILED
         LA    R3,M0283       MSG - SVC 97 RET CODE NONZERO
         BAL   R11,MSG2       GO OUTPUT MESSAGES
         B     NOPROMPT       RETURN TO MAINLINE.
         SPACE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*   - THE 'TO' ADDRESS IS NOT A REGISTER -
*        CHECK FOR OVERLAPPING OF FIELDS
*        THE ONLY PERMISSABLE OVERLAP IS
*        IF THE 'TO' ADDRESS IS ONE HIGHER THAN THE 'FROM' ADDRESS
*        IF FIELDS DO OVERLAP THEN THE MOVE IS DONE BACKWARDS.
         SPACE
COPY2    EQU   *              SHOULD COPY BE BACKWARDS OR FORWARDS.
         L     R3,WAFROM      OBTAIN FROM ADDRESS.
         L     R4,WATO        OBTAIN TO ADDRESS.
         L     R5,WALENGTH    OBTAIN LENGTH.
         SPACE
*        R3= 'FROM' ADDRESS
*        R4= 'TO' ADDRESS
*        R5= 'LENGTH'
         SPACE
         LR    R7,R4          PUT ADDRESS TO BE CHECKED IN R7.
         BAL   R11,ADDRCHK    ADDRESS VALIDITY CHECK ROUTINE
         LTR   R15,R8         TEST RETURN CODE
         BZ    GOODTO         IF ZERO, ALL OK SO FAR
         LA    R8,N12         REG 8 IS 12 FOR COMPARISON
         CR    R15,R8         COMPARE RET CODE TO REG 8
         BH    MNLRET         GREATER THAN 12, BACK TO MNL
COPY2B   LA    R2,M0072       MSG - INVALID TO ADDR
         LA    R3,M0279       MSG - ADDR IN PROT. CORE
         BAL   R11,MSG1       GO OUTPUT MESSAGES
         B     NOPROMPT       QUIT. AND RETURN TO MNL.
GOODTO   EQU   *
* REMOVE BREAK POINTS FROM 'TO' AREA BEFORE COPY.
         LA    R1,X8          SEARCH AND REMOVE WITH BACKUP
         ST    R1,WATEMP1     1ST WORD - OPTION CODE
         ST    R4,WATEMP2     2ND WORD - START OF RANGE
         LA    R1,X0(R4,R5)   START PLUS LENGTH OF RANGE
         BCTR  R1,X0          BACK UP ONE
         ST    R1,WATEMP3     3RD WORD - END OF RANGE
         LA    R1,WATEMP      ADDRESS OF PARM LIST
         L     R15,TSTSRHRT   ADDRESS OF SEARCH ROUTINE
         BALR  R14,R15        CALL SEARCH
         CH    R15,H8         CHECK RETURN CODE
         BH    NOFREE         IF ERROR, RETURN
         SPACE
         CR    R3,R4          Q. IS FROM LOWER THAN TO ADDRESS.
         BNL   COPY           NO. CANT OVERLAP.
         LA    R3,X1(R3)      ADD ONE TO FROM ADDRESS.
         CR    R3,R4          Q.IS TO ADDRESS ONLY ONE HIGHER THAN FROM
         BCTR  R3,X0          RESET FROM ADDRESS.
         BE    COPY0          YES. CHECK FOR BREAKPOINT
         AR    R3,R5          GET LAST BYTE OF FROM.
         CR    R3,R4          Q. IS THIS BYTE MORE THAN TO ADDR.
         BNH   COPY           NO. COPY FOWARD.
         SPACE
*        BACKWARD COPY NOW IN PROGRESS.
*        AT THIS POINT THERE ARE OVERLAPPING FIELDS AND THE 'TO'
*        ADDRESS IS MORE THAN 1 GREATER THAN THE 'FROM' ADDRESS.
*        THE MOVE BACKWARDS LOOP IS KEPT TIGHT FOR SPEED.
*        CONSIDERATION HAS BEEN GIVEN TO SMALL LENGTHS RATHER THAN
*        LARGE.
         SPACE
         AR    R4,R5          OBTAIN LAST BYTE OF TO ADDRESS.
COPYLEFT EQU   *              COPY BACKWARDS.
         BCTR  R3,X0          R3=ADDR-1
         BCTR  R4,X0          R4=ADDR-1
BLOW4A   EQU   *              PROTECTION CHECK HERE, IF ABEND.
         MVC   X0(X1,R4),X0(R3) MOVE ONE BYTE AT A TIME.
BLOW4    EQU   *              PROTECTION CHECK HERE, IF ABEND.
         BCT   R5,COPYLEFT    LOOP UNTIL LENGTH IS EXHAUSTED.
         B     COPY1B         COPY COMPLETE. CALL SEARCH RTN.
         SPACE 1
* IF THERE IS A ONE BYTE OVERLAP, THE SEARCH ROUTINE IS CALLED
* BEFORE THE COPY IS DONE.  IF THE 1ST BYTE OF THE 'FROM' RANGE
* CONTAINS A BREAKPOINT, THE ORIGINAL VALUE OF THAT BYTE IS
* PLACED IN THE 1ST BYTE OF THE 'TO' RANGE.  THE 'TO' ADDRESS
* AND 'FROM' ADDRESS ARE BUMPED BY ONE AND THE LENGTH IS DECRE-
* MENTED BY ONE.
COPY0    LA    R1,X4          CODE = SEARCH + LOCATE, NO BACKUP
         ST    R1,WATEMP1     * 1ST WORD OF PARM LIST
         ST    R3,WATEMP3     * 3RD WORD OF PARM LIST (END RANGE)
         BCTR  R3,X0          BACK UP ONE
         ST    R3,WATEMP2     * 2ND WORD OF PARM LIST (START RANGE)
         LA    R1,WATEMP      ADDRESS OF PARM LIST
         L     R15,TSTSRHRT   ADDRESS OF SEARCH ROUTINE
         BALR  R14,R15        CALL SEARCH ROUTINE
         CH    R15,H4         IF ERROR OCCURRED
         BH    NOFREE         RETURN TO MAINLINE
         BE    COPY           IF NOT FOUNT GO DO COPY
         L     R6,X4(R1)      GET ADDR OF BREAK ELEMENT
         L     R7,BRKADDR     GET ADDR OF ORIGINAL INST.
         CR    R7,R3          DOES INST START IN RANGE
         BNE   COPY0B         YES - MOVE 1ST BYTE
         LA    R6,X1(R6)      NO - MOVE 2ND BYTE
BLOW5A   EQU   *              PROTECTION CHECK HERE, IF ABEND.
COPY0B   MVC   X0(X1,R4),BRKINST MOVE CHARACTER
BLOW5    EQU   *              PROTECTION CHECK HERE, IF ABEND.
         BCTR  R5,X0          DECREMENT R5 BY ONE
         LTR   R5,R5          IF LENGTH IS NOW 0
         BZ    MNLRET0        DONE. RETURN TO MAINLINE
         LR    R3,R4          INCREMENT R3 BY ONE
         LA    R4,X1(R4)      INCREMENT R4 BY ONE
         STM   R3,R5,WAFROM   RESET VALUES IN WORK AREA
*        B     COPY
         SPACE 1
* COPY FORWARD USED WHEN
*    (1) FIELDS DO NOT OVERLAP,
*    (2) THE 'FROM' ADDRESS IS GREATER THAN THE 'TO' ADDRESS,
*    (3) THE 'TO' ADDRESS IS 1 GREATER THAN THE 'FROM' ADDRESS
*        (THE FIELD WILL BE SET TO THE SAME CHARACTER AS THE
*        'FROM' FIELD BEGAN WITH).
COPY     EQU   *              COPY AN ADDRESS TO AN ADDRESS FOWARD.
         L     R3,WAFROM      GET FROM ADDRESS.
         L     R4,WATO        GET TO ADDRESS
         LA    R0,N256        MOVE 256 AT A TIME.
         L     R1,WALENGTH    GET THE LENGTH.
         LA    R5,N256-X1     LENGTH OF 256-1
LOOP     EQU   *              COPY LOOP.
         CR    R1,R0          IS LENGTH NOW LESS THAN 256
         BNH   COPY1          YES. FINAL COPY.
BLOW6A   EQU   *              PROTECTION CHECK HERE, IF ABEND.
         EX    R5,MVC         COPY 256
BLOW6    EQU   *              PROTECTION CHECK HERE, IF ABEND.
         ALR   R3,R0          UPDATE FROM ADDRESS.
         ALR   R4,R0          UPDATE TO ADDRESS.
         SR    R1,R0          OBTAIN LENGTH OF WHAT'S LEFT.
         B     LOOP           KEEP GOING.
COPY1    EQU   *              FINAL COPY.
         LR    R5,R1          GET FINAL LENGTH.
         BCTR  R5,X0          DECREMENT FOR EXECUTE.
BLOW7A   EQU   *              PROTECTION CHECK HERE, IF ABEND.
         EX    R5,MVC         MOVE IT.
BLOW7    EQU   *              PROTECTION CHECK HERE, IF ABEND.
         SPACE 1
COPY1B   L     R3,WAFROM      OBTAIN FROM ADDRESS
         L     R4,WATO        OBTAIN TO ADDRESS
         L     R5,WALENGTH    OBTAIN LENGTH
         BCTR  R4,X0          DECREMENT 'TO' ADDRESS
         CR    R3,R4          IS 'TO' 1 GREATER THAN 'FROM'?
         LA    R4,X1(R4)      RESTORE 'TO' ADDRESS
         BE    COPY1C         SEARCH DONE ( 1 BYTE PROPAGATED )
         BAL   R8,SRH         CALL SRH
COPY1C   EQU   *
MNLRET0  SR    R15,R15        RET. TO MNL WITH A CODE OF ZERO.
MNLRET   LR    R2,R15         SAVE RET CODE OVER ESTAE
         ESTAE 0              REMOVE ESTAE REQUEST
         LR    R15,R2         RESTORE RETURN CODE
         NI    TSTFLGS4,XFF-TSTRERTN  SHUT OFF TCOMTAB FLAG
MNLRETS  L     R13,X4(R13)    RESTORE THE REGISTERS.
         RETURN  (14,12),T,RC=(15)  RETURN.
         SPACE
         SPACE
MVC      MVC   X0(X0,R4),X0(R3)  ALL MOVES ARE DONE WITH THIS MVC.
         SPACE
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*  FUNCTION - CALLS THE SEARCH ROUTINE TO LOCATE BREAKPOINTS  *
*        IN THE RANGE SPECIFIED.  FOR EVERY BREAKPOINT FOUND  *
*        IN THE 'FROM' RANGE, IT REPLACES THE INSTRUCTION IN  *
*        THE 'TO' RANGE.                                      *
*  INPUT -                                                    *
*        R3 = 'FROM' ADDRESS                                  *
*        R4 = 'TO' ADDRESS                                    *
*        R5 = LENGTH ( OR LENGTH-1 IF ENTERED AT SRH0 )       *
*        R8 = RETURN ADDRESS                                  *
*  REGISTER USAGE                                             *
*        R1 = WORK REG                                        *
*           = PARM REG                                        *
*           = ADDR OF INST IN 'TO' RANGE                      *
*        R6 = ADDRESS OF BREAK ELEMENT                        *
*        R7 = ADDR OF INST IN 'FROM' RANGE                    *
*  REGISTERS AT OUTPUT -                                      *
*        R1, R6, R7, R14, R15 DESTROYED                       *
*        R5 = LENGTH                                          *
*        OTHERS ARE UNCHANGED                                 *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
SRH      BCTR  R5,X0          LENGTH-1
SRH0     AR    R5,R3          END OF RANGE
         LR    R7,R3          INIT START ADDRESS
         BCTR  R7,X0          BACK UP ONE
SRHLOOP  LA    R1,X4          CODE = SEARCH + LOCATE, NO BACKUP
         ST    R1,WATEMP1     * PARMLIST: CODE = 4
         ST    R7,WATEMP2     *           START OF RANGE
         ST    R5,WATEMP3     *           END OF RANGE
         LA    R1,WATEMP      ADDRESS OF PARM LIST
         L     R15,TSTSRHRT   ADDRESS OF SEARCH ROUTINE
         BALR  R14,R15        CALL SEARCH ROUTINE
         B     SRHRC(R15)     CHECK RETURN CODE
SRHRC    B     SRHFOUND       R.C. 0 = FOUND
         B     SRHDONE        R.C. 4 = NOT FOUND
         B     NOPROMPT       R.C. 8 = INVALID PARAMETERS
         B     NOFREE         R.C.12 = STAE
SRHFOUND L     R6,WATEMP2     GET ADDR OF BREAK ELEMENT
         L     R7,BRKADDR     GET ADDR OF INST
         LR    R1,R7          * DISPLACEMENT INTO
         SR    R1,R3          * 'FROM' AREA
         AR    R1,R4          INST IN 'TO' AREA
         CR    R7,R3          DOES INST START BEFORE RANGE?
         BL    SRHMVC2        YES. MOVE ONLY 1ST BYTE
SRHMVC1  MVC   X0(X1,R1),BRKINST REPLACE 1ST BYTE
         CR    R7,R5          IS THIS LAST BYTE IN RANGE?
         BE    SRHDONE        YES. DONE
SRHMVC2  MVC   X1(X1,R1),BRKINST+X1 REPLACE 2ND BYTE
         LA    R7,X2(R7)      START RANGE AFTER BREAKPOINT
         CR    R7,R5          IS NEW START AFTER END?
         BNH   SRHLOOP        NO. SEARCH FOR MORE BREAKPOINTS
SRHDONE  SR    R5,R3          LENGTH - 1
         LA    R5,X1(R5)      LENGTH
         BR    R8             RETURN
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* INPUT:  R7 = ADDRESS TO BE CHECKED                          *
*         R5 = LENGTH OF FIELD                                *
* RETURNS TO 0(R11) IF ADDRESS IS READ/WRITE                  *
*         TO 4(R11) IF ADDRESS IS NOT READ ONLY               *
*         TO 8(R11) IF ADDRESS IS INVALID                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
ADDRCHK  EQU   *
         L     R6,CVTPTR      ADDRESS CVT
         L     R6,X0(R6)      ADDRESS NEW/OLD
         L     R6,X4(R6)      ADDRESS OF TCB
         IKJEGS9G       ADDRCHK,TCBADDR=(R6),VALUE=(R7),MF=(E,WATEMP)
         LR    R8,R15         SAVE RETURN CODE
         AR    R7,R5          GET END OF FIELD.
         BCTR  R7,X0          - LAST BYTE.
         IKJEGS9G       ADDRCHK,TCBADDR=(R6),VALUE=(R7),MF=(E,WATEMP)
         CR    R8,R15         IS OLD R.C. > NEW R.C.?
         BH    ADDRCHK3       YES. USE OLD R.C.
         LR    R8,R15         NO. USE NEW R.C.
ADDRCHK3 EQU   *
         BR    R11            RETURN
         EJECT
*        VALIDITY CHECK EXIT
         DROP  R2
         SPACE
         USING  IKJPARMA,R2   ADDRESSIBILITY
         USING  VAL,R8        ADDRESSIBILITY
         SPACE
IKJEGFM  DS    0D             'FROM' EXIT.
         STM   R14,R12,N12(R13)  SAVE PARSE'S REGISTERS.
         L     R12,FMBASE-IKJEGFM(R15)  GET FROM KEYWORDS BASE REG.
         B     VALIDITY       GO TO COMMON EXIT.
         SPACE
         SPACE
IKJEGTO  DS    0D             'TO' EXIT.
         STM   R14,R12,N12(R13)  SAVE PARSE'S REGISTERS.
         L     R12,TOBASE-IKJEGTO(R15)  GET TO'S BASE REGISTER
         B     VALIDITY       GO TO COMMON VALIDITY EXIT
         SPACE
IKJEGLN  DS    0D             LENGTH'S KEYWORD EXIT
         STM   R14,R12,N12(R13)  SAVE PARSE'S REGISTERS.
         L     R12,LNBASE-IKJEGLN(R15)  GET LENGTH'S BASE REG.
         SPACE
VALIDITY EQU   *              COMMON VALIDITY EXIT.
         L     R14,VALPASS-VAL(R1)  PARM PASSED IS REGSAVE2 PTR.
         LM    R2,R11,N28(R14)  GET ALL OF MAIN ROUTINE'S REGS.
         LR    R8,R1          SAVE PARSE'S PARM LIST PTR.
         LR    R0,R12         MOVE CODE TO REG 0
         SRL   R0,N24         RIGHT ADJUST IT.
         STC   R0,WACODE      SAVE IT.
         L     R3,REGSAVE3    MY REG SAVE AREA.
         ST    R3,X8(R13)     FOWARD POINTER.
         ST    R13,X4(R3)     BACKWARD POINTER.
         LR    R13,R3         SAVE AREA POINTER TO 13
         SR    R14,R14        CLEAR REG 14
         L     R4,OUTBUF      ACCESS POINTER TO OUTBUF
         ST    R14,X0(R4)     CLEAR 1ST WORD OF OUTBUF
         OI    TSTFLGS4,TSTVALCK INDICATE VALIDITY ROUTINE
         L     R2,VALPDE      ADDRESSABILITY TO P.D.E.
         CLI   WACODE,LNCODE  IS THIS AN EXIT FOR LENGTH Q.Q.Q.
         BE    LENGTHCK       YES. CONVERT IT.
         LNR   R1,R2          CONVERT THE FROM OR TO ADDRESS.
         LPR   R0,R2          PASS THE PDE TO IKJEGCVT.
         L     R15,TSTCONVT   GO TO CONVERT.
         BALR  R14,R15        GO.
FROMCVT  B     TABLE2(R15)    COMING FROM CONVERT.
TABLE2   B     QAOK           ALL SEEMS TO BE O.K.
         B     PROMPT1        CVT SAYS PROMPT.
         B     QUIT           MUST QUIT.
         B     QUIT           MUST QUIT.
         B     QUIT           MUST QUIT.
         B     QUIT           MUST QUIT.
QUIT     EQU   *              QUIT HERE.
         STC   R15,WASAVERC   SAVE TELLTALE RET. CODE.
         LA    R15,RC12       RET TO PARSE .
         B     PARSRET        RETURN.
PROMPT1  EQU   *
         LA    R15,RC8        RETURN TO PARSE WITH 8.
         B     PARSRET        RETURN.
QAOK     EQU   *              IS ALL REALLY O.K.
         L     R3,PDEUSER     GET CONVERT'S ADDRESS.
         LTR   R3,R3          IS IT CONVERT'S OR SYM'S
         BNM   SKIP3          IT REALY IS CONVERTS
         L     R3,X0(R3)      NO. IT'S REALLY SYMS.
SKIP3    EQU   *              IN EITHER CASE , HERE WE ARE.
         LA    R3,X0(R3)      CLEAR FLAGS FROM TOP BYTE
         LH    R4,PDEINDCT    CHECK FOR INDIRECT COUNT.
         LTR   R4,R4          IS COUNT ZERO Q.Q.Q.
         BNZ   SAVEADDR       NO. HAS TO BE AN ADDRESS.
         TM    PDEFLG4,GENR   IS IT A GENERAL REGISTER Q.Q.Q.
         BZ    SKIP4          NO. CHECK FOR FLOATING POINT.
         O     R3,REGCODE     YES IT'S GENERAL REGISTER. SET HIGH BIT.
SKIP4    EQU   *
         TM    PDEFLG4,LFPR+SFPR  Q. IS IT A FLOATING POINT REG.
         BZ    SAVEADDR       NO. IT HAS TO BE AN ADDRESS.
PRINT    EQU   *
         LA    R4,M0101       MSG - INVALID ADDRESS
         LA    R3,M0267       MSG - MUST BE GEN REG
         BAL   R11,MSG4       GO OUTPUT MESSAGES
         CH    R15,ATTNCODE   WAS ATTENTION HIT
         BNL   QUIT           YES, RETURN
         B     PROMPT1        PROMPT 'REENTER'
SAVEADDR EQU   *              HAVE AN ADDRESS. OR GENERAL REG.
         CLI   WACODE,TOCODE  CHECK WHAT KEYWORD.
         BE    SAVETO         'TO'
SAVEFROM ST    R3,WAFROM      'FROM'
         B     PARSRET0       RETURN TO PARSE WITH AOK CODE.
SAVETO   ST    R3,WATO        SAVE THE 'TO' ADDR OR REG.
         B     PARSRET0       AOK BACK TO PARSE.
LENGTHCK EQU   *              CONVERT THE LENGTH.
         SR    R0,R0          CLEAR REG 0
         LPR   R1,R2          PDE ADDR TO R1 AND INSURE POITIVE.
         MVI   PDERSV1,DECIMAL  INDICATE CONVERT TO DECIMAL.
DECIMAL  EQU   X'10'          CONVERT TO DECIMAL INDICATOR.
         L     R15,TSTCONVT   CONVERT'S BRANCH ENTRY.
         BALR  R14,R15        GO TO CONVERT.
FMCVT    LTR   R15,R15        BACK FROM CONVERT.
         BNZ   FROMCVT        NOT ZERO. GO TO BRANCH TABLE.
         L     R3,CONAREA     GET CONVERTED LENGTH.
         L     R4,X1(R3)      DITTO.
         ST    R4,WALENGTH    SAVE IT FOR THE MAIN ROUTINE.
         L     R5,MAXIMUM     Q.GREATER THAN 65,535
         CR    R4,R5          Q. IS IT.
         BNH   REGLNCHK       NO. CHECK FOR REGISTERS SPECIFIED.
         LA    R4,M0064       MSG - INVALID LENGTH
         LA    R3,M0284       MSG - LEN BTWN 0 AND 65535
FMCVT2   BAL   R11,MSG3       GO OUTPUT MESSAGES
         CH    R15,ATTNCODE   WAS ATTENTION HIT
         BNL   QUIT           YES, RETURN
         B     PROMPT1        PROMPT 'REENTER'
         SPACE
REGLNCHK TM    WAFROM,X80     IS REG SPECIFIED AS 'FROM' ADDR ?
         BO    MAX64          YES. CHECK MAX LENGTH OF 64.
         TM    WATO,X80       IS REG SPECIFIED AS 'TO' ADDR ?
         BZ    PARSRET0       NO. RETURN NORMALLY.
MAX64    LA    R5,N64         TOTAL SIZE OF REGS IS 64.
         CR    R4,R5          DOES LENGTH EXCEED 64?
         BNH   PARSRET0       NO. RETURN NORMALLY TO PARSE.
         LA    R4,M0064       MSG - INVALID LENGTH
         LA    R3,M0266       MSG - LEN 64 WHEN REGS SPEC.
         B     FMCVT2         BUILD AND PRINT MESSAGES.
         SPACE
PARSRET0 SR    R15,R15        RET. CODE OF ZERO.
PARSRET  EQU   *              RETURN TO PARSE
         NI    TSTFLGS4,XFF-TSTVALCK SHUT OFF VALIDITY FLAG
         L     R4,OUTBUF      ACCESS POINTER TO OUTBUF
         L     R4,X0(R4)      ACCESS 1ST WORD OF OUTBUF
         LTR   R4,R4          IS THERE A SECOND LEVEL MESSAGE
         BZ    PARSRETN       NO, RETURN TO PARSE
         MVC   VAL2LVL(X4),OUTBUF  YES, GIVE IT TO PARSE
PARSRETN L     R13,X4(R13)    GET PARSE'S R13
         RETURN  (14,12),T,RC=(15)  RETURN.
         SPACE
         EJECT
*        STAE RETRY ROUTINE.
         SPACE
STAERTRY EQU   *              ABEND PROCESSING HERE.
         L     R3,CVTPTR      GET CVT PTR.
         L     R4,X0(R3)      GET DOUBLE WORD PTR(NEW , CURRENT)
         L     R5,X4(R4)      GET CURRENT TCB PTR.
         L     R9,TCBTRN-TCB(R5)  GET TCOMTAB ADDRESS.
         L     R13,REGSAVE2   GET THE MAIN ROUTINE'S REGISTERS.
         L     R12,CPYBASE-STAERTRY(R15)  DITTO.
         LM    R2,R11,N28(R13)  DITTO.
NOFREE   EQU   *
         LA    R15,RC20       RETURN TO MAINLINE(IKJEGMNL) WITH 20
         B     MNLRET         GO.
         EJECT
* THE FOLLOWING ARE MESSAGE OUTPUTTING ROUTINES.
MSG1     XC    TSTIOPRM,TSTIOPRM  CLEAR PARAMETER AREA
         IKJEGSIO MSG,FIRST=(R2),SECOND=(R3),ID=CPY08,                 *
               MF=(E,TSTIOPRM) CALL IO
         CH    R15,ATTNCODE   WAS RET CODE GREATER OR = 16
         BNL   MNLRET         YES, RETURN
         BR    R11            NO, BRANCH AND CONTINUE
         SPACE
MSG2     XC    TSTIOPRM,TSTIOPRM CLEAR PARAMETER AREA
         IKJEGSIO MSG,FIRST=(R2),INST11=(NUM,I0030),SECOND=(R3),       *
               ID=CPY08,MF=(E,TSTIOPRM) CALL IO
         CH    R15,ATTNCODE   WAS RET CODE GREATER OR = 16
         BNL   MNLRET         YES, RETURN
         BR    R11            NO, BRANCH AND CONTINUE
         SPACE
MSG3     XC    TSTIOPRM,TSTIOPRM CLEAR PARAMETER AREA
         IKJEGSIO MSG,FIRST=(R4),INST11=(VPDE,(R2)),SECOND=(R3),       *
               ID=CPY08,MF=(E,TSTIOPRM) CALL IO
         BR    R11            CONTINUE PROCESSING
         SPACE
MSG4     XC    TSTIOPRM,TSTIOPRM CLEAR PARAMETER AREA
         IKJEGSIO MSG,FIRST=(R4),INST11=(APDE,(R2)),SECOND=(R3),       *
               ID=CPY08,MF=(E,TSTIOPRM) CALL IO
         BR    R11            CONTINUE PROCESSING
         SPACE
LINKERR  LR    R3,R1          REG 3 = ABEND CODE
         LR    R4,R15         REG 4 = RETURN CODE
         XC    TSTIOPRM,TSTIOPRM CLEAR PARAMETER AREA
         IKJEGSIO SVCERR,SVC=6,ABENDRG=(R3),RC=(R4),                   *
               INST11=(NUM,I0040),ID=CPY08,MF=(E,TSTIOPRM) CALL IO
         CH    R15,ATTNCODE   IS RET CODE LESS THAN 16
         BNL   MNLRET         NO, RETURN TO MAINLINE
         B     MNLRET0        YES, SET RC=0, RETURN
         SPACE
LISTESTA IKJEGSPL RTRY=STAERTRY,ABNTB=ABTAB,MODNM=IKJEGCPY,            *
               TNM=COPY       SET UP PARAMETER LIST FOR ESTAE
         EJECT
*        LIST FORMS
         SPACE
****ESTAE CHANGES***
****STAELIST ESTAE MF=L
STAELIST ESTAE MF=L           ESTAE LIST FORM.
STAELSTL EQU   *-STAELIST
         EJECT
*        CONSTANTS
         SPACE
STAEADDR DC    AL3(STAERTRY)  ADDRESS OF STAE RETRY ADDRESS.
ONE      DC    H'1'           DECIMAL ONE
SIX      DC    H'6'           DECIMAL 6
ATTNCODE DC    H'16'          DECIMAL 16
H4       DC    H'4'           CONSTANT FOR R.C. COMPARE
H8       DC    H'8'           CONSTANT FOR R.C. COMPARE
         SPACE 1
ABTAB    DS    0F             I.C. TABLE AND CODES FOR IKJEGSTA.
         DC    AL1(I0097),AL3(BLOW1A) PROTECTION CHECK
         DC    AL1(I0097),AL3(BLOW1)  PROTECTION CHECK
         DC    AL1(I0097),AL3(BLOW2A) PROTECTION CHECK
         DC    AL1(I0097),AL3(BLOW2)  PROTECTION CHECK
         DC    AL1(I0097),AL3(BLOW3A) PROTECTION CHECK
         DC    AL1(I0097),AL3(BLOW3)  PROTECTION CHECK
         DC    AL1(I0097),AL3(BLOW4A) PROTECTION CHECK
         DC    AL1(I0097),AL3(BLOW4)  PROTECTION CHECK
         DC    AL1(I0097),AL3(BLOW5A) PROTECTION CHECK
         DC    AL1(I0097),AL3(BLOW5)  PROTECTION CHECK
         DC    AL1(I0097),AL3(BLOW6A) PROTECTION CHECK
         DC    AL1(I0097),AL3(BLOW6)  PROTECTION CHECK
         DC    AL1(I0097),AL3(BLOW7A) PROTECTION CHECK
         DC    AL1(I0097),AL3(BLOW7)  PROTECTION CHECK
         DC    AL1(I0099),AL3(BLOWPARS)   LINK TO PARSE FAILED.
         DC    AL1(255),AL3(0)  END OF TABLE INDICATOR.
         SPACE 1
         DS    0F
CPYBASE  DC    AL1(CPYCODE),AL3(IKJEGCPY)  BASE FOR MAIN ROUTINE.
FMBASE   DC    AL1(FMCODE),AL3(IKJEGCPY)  BASE FOR 'FROM' KEYWORD.
TOBASE   DC    AL1(TOCODE),AL3(IKJEGCPY)  BASE FOR 'TO' KEYWORD.
LNBASE   DC    AL1(LNCODE),AL3(IKJEGCPY)  BASE FOR 'LENGTH' KEYWORD.
MAXIMUM  DC    A(65535)       MAXIMUM LENGTH.
PRMAD    DC    A(IKJEGPRM)    POINTER TO PARSE CSECT.
CHNGREGS DC    X'04000000'    CODE FOR SVC 97.
CHNGALL  DC    X'FF000000'    CODE TO CHANGE ALL REGISTERS.
REGCODE  DC    X'80000000'    HIGH BIT INDICATES GENERAL REGISTER.
CONSTANT DC    60C'Z'         PATCH AREA
         EJECT
         SPACE
*        PARSE CSECT/DSECT
         SPACE
IKJEGPRM IKJPARM
PRMF     IKJPOSIT  ADDRESS,VALIDCK=IKJEGFM,PROMPT='FROM ADDRESS'
PRMT     IKJPOSIT  ADDRESS,VALIDCK=IKJEGTO,PROMPT='TO ADDRESS'
PRMP     IKJKEYWD
         IKJNAME  'POINTER'
         IKJNAME  'NOPOINT'
PRMLNKEY IKJKEYWD
         IKJNAME  'LENGTH',SUBFLD=PRMLNSUB
PRMLNSUB IKJSUBF
PRML     IKJIDENT   'LENGTH',FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=5,    *
               VALIDCK=IKJEGLN,PROMPT='LENGTH'
         IKJENDP
         EJECT
         BRKELEM              BREAK ELEMENT DSECT
         EJECT
         IKJTCB
         EJECT
         TCOMTAB
         EJECT
         TSTCWORK
         SPACE 5
         IKJPARMA
         END
