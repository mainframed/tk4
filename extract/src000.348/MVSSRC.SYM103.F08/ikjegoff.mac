         COPY  IKJEGSIO
         MACRO
         EXPRPDE
***********************************************************************
*                                                                     *
*        MAPPING DSECT FOR PDES FOR EXPRESSIONS                       *
*                                                                     *
*        STATUS -- VERSION NO. 01 - AOS/2 RELEASE NO. 01              *
*                                                                     *
*        CHANGE LEVEL -- 00 - DATE 09/29/71                           *
*                                                                     *
***********************************************************************
EXPRPDE  DSECT
EXPRPTR  DS    F -                      POINTER TO CHARACTER STRING,
*                                       OR ZERO IF NOT PRESENT
EXPRLNH  DS    H -                      LENGTH OF CHARACTER STRING
         DS    H -                      RESERVED
EXPRFLGS DS    XL1 -                    FLAGS
EXPRDEC  EQU   X'04' -                  DECIMAL EXPRESSION FLAG
EXPRHEX  EQU   X'02' -                  HEX EXPRESSION FLAG
EXPRSIGN DS    CL1 -                    ARITHMETIC SIGN OR ZERO
EXPRINDC DS    H -                      INDIRECT COUNT
EXPRCHAI DS    F -                      POINTER TO NEXT EXPRESSION
*                                       PDE OR ZERO
EXPRPDL  EQU   *-EXPRPDE -              LENGTH OF EXPRESSION PDE
         MEND
         EJECT
OFF      TITLE 'IKJEGOFF, OFF COMMAND PROCESSOR  OF TEST'
IKJEGOFF CSECT                     OFF COMMAND PROCESSOR
*C476400                                                         YM2245
*C489900                                                         YM4849
*C531279                                                       @YM07108
         SPACE 2
************************************************************
*                                                         **
* STATUS                                                  **
*    CHANGE LEVEL 00, VERSION NUMBER 01, OS/VS2           **
*                                                         **
* FUNCTION                                                **
*    OFF BASICALLY REMOVES WHATEVER BREAKPOINTS THE 'AT'  **
*    SUB-COMMAND HAD ESTABLISHED. IT HAS THE FACILITY TO  **
*    REMOVE ALL THE BREAKPOINTS IN EFFECT, OR ONLY THOSE  **
*    SPECIFIED BY THE USER.                               **
*                                                         **
*    WHEN PARAMETERS HAVE BEEN ENTERED PARSE IS CALLED    **
*    IS PARSE THE INPUT STGRING. PARSE INVOKES 'OFF'      **
*    VALIDITY CHECK ROUTINE WHICH GOES TO CONVERT 'CVT'   **
*    TO CONVERT THE ADDRESS PDE. IF CONVERT RETURNS WITH  **
*    THAT ADDRESS IS SEARCH FOR ON THE ACTIVE QUEUE,      **
*    (BREAKTAB OF TCOMTAB). NEXT THE DEFERED QUEUE        **
*    (DEFERTAB OF TCOMTAB), IS SEARCH FOR THE ADDRESS.    **
*    WHEN SEARCHING THE DEFERED QUEUE A FULLY QUALIFIED   **
*    ADDRESS MUST HAVE BEEN SPECIFIED.                    **
*    ALL REFERENCES TO THAT BREAKELEMENT ARE REMOVED FROM **
*    BOTH QUEUE'S. IF IT WAS AN ACTIVE BREAKPOINT AN      **
*    ATTEMPT IS MADE TO RESTORE THE PROBLEM PROGRAM INSTR.**
*                                                         **
*    END PROCESSING IS DETERMINED BY THE ENDSW OR  RUNSW  **
*    BEING ON. (ENDSW AND RUNSW ARE IN TCOMTAB).          **
*    DURNING END PROCESSING ALL BREAKS POINTS ARE         **
*    REMOVED AS IF NO PARAMETERS WHERE ENTERED ON A       **
*    'OFF' COMMAND.                                       **
*                                                         **
* ENTRY POINTS                                            **
*         IKJEGOFF - MAIN ENTRY POINT                     **
*         IKJEGVCK - VALIDITY CHECK ROUTINE               **
*                                                         **
* INPUT                                                   **
*    ONE OR MORE LINES OF INPUT FROM THE TERMINAL INTO    **
*    THE INPUT BUFFER.                                    **
*                                                         **
* OUTPUT                                                  **
*    1.  ERROR MESSAGES TO THE MESSAGE WRITER             **
*    2.  RETURN CODES                                     **
*    *          00 - SUCCESSFUL COMPLETION OR BREAKPOINTS **
*    *               NOT REMOVED                          **
*    *          08 - HAVE PARSE ISSUE A 'REENTER'         **
*    *          12 - PARSE VALIDITY CHECK EXIT ERROR      **
*    *               RETURN CODE
*    *          16 - AN ATTENTION HAS BEEN SCHEDULED      **
*    *          20 - STAE RETRY HAS INTERCEPTED AN ABEND  **
*    *          24 - COULD NOT ISSUE ESTAE MACRO          **
*                                                         **
* EXTERNAL REFERENCES                                     **
*         IKJPARS - CHECKS SYNTAX OF ADDRESSES            **
*                                                         **
*         ESTAE   - ESTABLISH ABEND RECOVERY EXIT RTN     **
*         *         (IKJEGSTA)                            **
*                                                         **
*         IKJEGIO - IS INVOKED VIA THE IKJEGSIO MACRO     **
*                   TO PRINT ERROR MESSAGES.              **
*                                                         **
*         IKJEGCVT - CONVERTS AN ABSOLUTE ADDRESS, AN     **
*         *          EXPRESSION, AN INDIRECT ADDRESS, OR  **
*         *          A FULLY QUALIFIED ADDRESS TO BINARY. **
*         *          AT ENTRY, REG 1 CONTAINS THE         **
*         *          COMPLEMENT OF THE PDL ADDRESS TO     **
*         *          INDICATE AN ADDRESS CONVERSION, AND  **
*         *          REG 0 IS SET NEGATIVE TO INDICATE    **
*         *          CONVERT TO BINARY.                   **
*                                                         **
* EXITS, NORMAL                                           **
*    RETURN TO MAINLINE VIA REGISTER 14                   **
*                                                         **
* EXITS, ERROR                                            **
*    RETURN TO MAINLINE VIA REGISTER 14                   **
*                                                         **
* TABLES/WORK AREAS                                       **
*    TCOMTAB -                                            **
*    *     BREAKTAB - PTR TO ACTIVE BREAK ELEMENTS        **
*    *     DEFERTAB - PTR TO DEFERRED BREAK ELEMENTS      **
*    OFFWORKA - OFF'S WORKAREA                            **
*                                                         **
* ATTRIBUTES                                              **
*    REENTRANT AND REFRESHABLE                            **
*                                                         **
* CHARACTER CODE DEPENDENCY                               **
*    THE OPERATION OF THIS MODULE DEPENDS UPON AN INTERNAL**
*    REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS**
*    EQUIVALENT TO THE ONE USED AT ASSEMBLY TIME. THE     **
*    CODING HAS BEEN ARRANGED SO THAT REDEFINITION OF     **
*    'CHARACTER' CONSTANTS, BY REASSEMBLY, WILL RESULT IN **
*    A CORRECT MODULE FOR THE NEW DEFINITIONS.            **
*                                                         **
* NOTES                                                   **
*                                                         **
************************************************************
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        THE FOLLOWING ARE THE EQUATES NEEDED BY THE OFF COMMAND
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
*        REGISTER EQUATES
R0       EQU   0                   GENERAL WORK REGISTER
R1       EQU   1                   GENERAL WORK REGISTER (PARAM PASS)
R2       EQU   2                   GENERAL WORK REGISTER
R3       EQU   3                   GENERAL WORK REGISTER
R4       EQU   4                   GENERAL WORK REGISTER
R5       EQU   5                   GENERAL WORK REGISTER
R6       EQU   6                   BASE REGISTER FOR CONTROL BLOCKS
R7       EQU   7                   BASE REGISTER FOR DEFER & ACTIVE Q
R8       EQU   8                   BASE REGISTER FOR TEMPORARY USE
R9       EQU   9                   BASE REGISTER FOR TCOMTAB
R10      EQU   10                  BASE REGISTER FOR OFFWORK AREA
R11      EQU   11                  EXTRA REGISTER NOT USED
R12      EQU   12                  BASE REGISTER FOR IKJEGOFF
R13      EQU   13                  POINTER TO SAVE AREA
R14      EQU   14                  USED FOR BAL ALSO WORK REG
R15      EQU   15                  USED FOR RETURN CODES ALSO WORK REG
         SPACE
N0       EQU   0                   CONSTANT 0
N1       EQU   1                   CONSTANT 1
N2       EQU   2                   CONSTANT 2
N3       EQU   3                   CONSTANT 3
N4       EQU   4                   CONSTANT 4
N5       EQU   5                   CONSTANT 5
N6       EQU   6                   CONSTANT 6
N7       EQU   7                   CONSTANT 7
N8       EQU   8                   CONSTANT 8
N9       EQU   9                   CONSTANT 9
N10      EQU   10                  CONSTANT 10
N12      EQU   12                  CONSTANT 12
N16      EQU   16                  CONSTANT 16
N20      EQU   20                  CONSTANT 20
N24      EQU   24                  CONSTANT 24
N32      EQU   32                  CONSTANT 32
N56      EQU   56                  CONSTANT 56
N60      EQU   60                  CONSTANT 60
N72      EQU   72                  CONSTANT 72
N120     EQU   120                 CONSTANT 120
****     HEXIDECIMAL EQUATES
HEXC0    EQU   X'C0'               HEX CONSTANT C0
HEX09    EQU   X'09'               HEX CONSTANT 09
HEXFF    EQU   X'FF'               HEX CONSTANT FF
HEX0C    EQU   X'0C'               HEX CONSTANT 0C
HEX10    EQU   X'10'               HEX CONSTANT 10
         EJECT
         ENTRY IKJEGVCK            ENTRY POINT OF THE VALIDITY CHECK
OFFSTART DS    0H                  STARTING POSITION OF OFF
         SAVE  (14,12),,*          SAVE THE CALLERS REGISTERS
         LR    R12,R15             SETUP REG 12 AS OFF'S BASE
         USING OFFSTART,R12        ESTABLISH ADDRESSIBILITY
         USING TCOMTAB,R9          ESTABLISH ADDRESSIBILITY TO TCOMTAB
         L     R15,REGSAVE2        LOAD ADDR OF NEW SAVEAREA (OFF'S)
         ST    R13,N4(R15)         PLACE ADDR USER'S SAVEAREA INTO OFF
         ST    R15,N8(R13)         PLACE ADDR OFF SAVEAREA INTO USERS
         LR    R13,R15             R13= ADDR OF NEW SAVE AREA
****     ESTABLISH ADDRESSIBILITY TO OFF WORKAREA -- USE REG 10
         L     R8,WORKAREA         R1= ADDR OF GENERAL WORKAREA
         USING TSTCWORK,R8         ESTABLISH ADDRESSIBILITY
         LA    R10,CWORKCMD        R10= ADDR OF OFFS WORKAREA
         USING OFFWORKA,R10        COMPLETE ADDRESSIBILITY
         DROP  R8                  RELEASE REG 8
****     SETUP FOR RETRY THRU STAE
         STM   R14,R12,HEX0C(R13)  STORE REGISTERS FOR STAE
*        LA    R1,ABENDTAB         R1= ADDR OF ABEND TABLE
*        ST    R1,ABENTAB1         ADDR ABEND TABLE TO OFFS WORKAREA
*        MVC   TSTRETRY(L'TSTRETRY),ADDRETRY PUT RETRY RTN ADDR IN TCOM
         L     R2,TSTSTAE          R2= IKJEGSTAE ADDR FROM TCOMTAB
         XC    STAEWRK(STAELN),STAEWRK  CLEAR AREA FOR ESTAE ISSUANCE
         ESTAE (R2),PARAM=LIST,MF=(E,OFFWORKA),RECORD=YES  ISSUE ESTAE
         SPACE
SMTSTAE  DS    0H                  SMT TESTING LABEL
         LTR   R15,R15             TEST THE RETURN CODE FROM STAE
         BZ    OFF0000             START THE ACTUAL OFF PROCESSING
         STC   R15,TSTESTRC        PRESERVE ESTAE RETURN CODE
         LA    R15,N24             SET RETURN CODE TO DECIMAL 24
         B     OFF0340             GO RETURN WITH R15=24
         SPACE
****     OFF PROCESSING BEGINS HERE... FIRST CHECK
*        NO PARAMETERS. IF ANY OF THE 3 ARE TRUE REMOVE ALL
*        BREAK POINTS...
OFF0000  DS    0H                  LABEL DO WE REMOVE ALL BRK PTS
         NI    TSTFLGS2,HEXFF-TSTXCTL TURN OFF XCTL SW
         XC    CHNGSWRK,CHNGSWRK   ZERO FIELD USED TO INDICATES REMOVAL
         XC    VCKSWWRK,VCKSWWRK   ZERO VALIDITY CHECK FIELD
         TM    TSTFLGS1,ENDSW      IS THE ENDSW ON
         BO    OFF0040             YES  CLEANUP AND REMOVE ALL BRK PTS
         TM    TSTFLGS1,RUNSW      IS THE RUNSW ON
         BO    OFF0040             YES CLEANUP AND REMOVE ALL BRK PTS
         TM    TSTFLGS3,NOPARMS    IS THERE ANY PARAMETERS ON OFF
         BO    OFF0040             NO JUST REMOVE ALL BREAK PTS
         B     OFF0060             PARAMETERS SUPPLIED GO TO PARSE
         SPACE
OFF0040  DS    0H                  REMOVE ALL BREAK POINTS
****     REMOVE ALL THE BREAK PTS BY BAL TO IKJEGALL
         BAL   R14,IKJEGALL        REMOVE ALL ACTIVE & DEFERED BRK PTS
         B     OFF0300             RETURN NORMALLY TO CALLER
         SPACE
****     SETUP TO LINK TO PARSE TO OBTAIN THE PARAMETERS
OFF0060  DS    0H                  SETUP PPL
         LA    R8,PPLWRK           R8= ADDR OF THE PPL WORKAREA
         USING PPL,R8              EST ADDR'ABILITY TO PPL
****     MOVE THE UPT, ECT, AND ECB POINTERS TO THE PPL WORKAREA
         MVC   PPLWRK(L'TSTUPT+L'TSTECT+L'TSTCPECB),PARMLIST
         MVC   PPLPCL,PCLADDR      INSERT PCL ADDR INTO WORK AREA
         LA    R1,TSTANSPL         R1= ADDR OF TSTANSPL
         ST    R1,PPLANS           STORE ADDR OF ANSWER PLACE IN WORKA
         MVC   PPLCBUF,INBUF       PLACE A POINTER TO INBUF INTO WORKA
         ST    R13,PPLUWA          STORE POINTER TO SAVE AREA IN WORKA
         LINK  EP=IKJPARS,MF=(E,PPLWRK),ERRET=ERRET1 LINK TO PARSE
SMTPARS  DS    0H                  PARSE RETURN
         DROP  R8                  RELEASE ADDR'ABILITY TO THE PPL
         SPACE
         B     OFF0080(R15)       BRANCH ON RETURN CODE INTO TABLE
OFF0080  DS    0H                  PARSE BRANCH TABLE FOR RETURN CODES
         B     OFF0220             ALL THRU RETURN CODE = 0 RETURN
         B     OFF0100             PARSE RETURN CODE = 04
         B     OFF0120             PARSE RETURN CODE = 08
         B     OFF0140             PARSE RETURN CODE = 0C (12)
         B     OFF0160             PARSE RETURN CODE = 10 (16)
         B     OFF0180             PARSE RETURN CODE = 14 (20)
         SPACE
ERRET1   DS    0H
         LA    R2,N6               NO-GET LINK SVC NUMBER
         BAL   R14,SVCERR          GO PUT OUT ERROR MESSAGE
         B     OFF0300
         SPACE
****     THE FOLLOWING CODE HANDLES PARSE ERRORS
OFF0100  DS    0H                  RETURN CODE 04
         OI    TSTFLGS4,TSTFLUSH   TURN ON SWITCH TO FLUSH STACK
         B     OFF0300             RETURN TO CALLER
OFF0120  DS    0H                  RETURN CODE 08
         LA    R15,N16             PLACE 16 INTO REG 5 FOR CALLER
         B     OFF0320             RETURN TO CALLER WITH 16
OFF0140  DS    0H                  RETURN CODE X'0C' FROM PARSE
         LA    R15,N3              INDICATE TO USE 3RD IO MACRO
         LA    R2,N5               INDICATE APPROPRIATE INSERT NUMBER
         LA    R1,MSGPRS0C         PLACE MSG ADDR INTO REG1
         BAL   R14,PUTMSG          OUTPUT THE MESSAGE
         B     OFF0300             THATS ALL
OFF0160  DS    0H                  PARSE RETURN CODE X'10'
         LA    R15,N1              INDICATE TO USE 1ST IO MACRO
         LA    R1,MSGPRS10         PLACE MSG ID INTO REG 1
         BAL   R14,PUTMSG          OUTPUT THE MSG
         B     OFF0300             THATS ALL
OFF0180  DS    0H                  RETURN CODE X'14' FROM PARSE
         CLI   RETCDWRK,N16        WAS THE RETCODE 16 FROM VALIDITY CK
         BNE   OFF0200             NO THEREFORE LOAD 20 AS A RETCODE
         LA    R15,N16             YES THEREFORE RETURN X'16' TO CALLER
         B     OFF0320             RETURN TO CALLER
OFF0200  DS    0H                  RETURN TO  CALLER WITH 20
         CLI   RETCDWRK,N8         WAS RETURN CODE 8 FROM VALIDITY CK
         BE    OFF0300             YES THEREFORE JUST RETURN
         LA    R15,N20             PLACE 20 INTO REG 15 FOR CALLER
         B     OFF0320             RETURN TO CALLER
         SPACE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        BEFORE TERMINATING IS THE PDE NULL (PDEUSER) IN WHICH
*        CASE ALL BREAKPOINTS SHOULD BE REMOVED
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
OFF0220  DS    0H                  CHECK FOR A NULL PDE
         L     R6,TSTANSPL         R6= ADDR OF THE RETURNED PDL
         LA    R6,N8(R6)           R6= ADDR OF THE PDE FROM PARSE
         USING IKJPARMA,R6         R6= ADDR'ABILITY TO PDE
         CLC   PDEUSER(L'PDEUSER),ZEROS   IS PDEUSER FIELD +FLAG = 0000
         DROP  R6                  RELEASE ADDR'ABILITY TO THE PDE
         BE    OFF0040             YES THEREFORE REMOVE ALL BREAKPOINTS
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        WERE ANY BREAKPOINTS REMOVED IN THE VALIDITY CHECK
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         TM    CHNGSWRK,REMOVWRK   WAS ANY BREAKPOINTS REMOVED
         BO    OFF0300             YES THEREFORE EXIT
         LA    R1,MSGNOBRK         R1= ADDR OF THE ERROR MESSAGE SET
         LA    R15,N1              INDICATE TO USE 1ST IO MACRO
         BAL   R14,PUTMSG          OUPUT THE MESSAGE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*   THIS IS THE END OF THE CONTROL PORTION OF THE OFF COMMAND...
*   RETURN TO CALLER (MNL) WITH EITHER A ZERO OR NON-ZERO RETURN CODE
*   THE NON-ZERO RETURN CODE IS PRESET IN REGISTER 15.
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
OFF0300  DS    0H                  RETURN WITH A NORMAL ZERO RET CODE
         XR    R15,R15             ZERO REGISTER 15 AS RETURN CODE
OFF0320  DS    0H                  RETURN WITH AN ERROR NONZERO RET COD
         LR    R2,R15              PRESERVE THE RETURN CODE
         ESTAE 0                   REMOVE SCB
         LR    R15,R2              RESTORE THE RETURN CODE
OFF0340  DS    0H                  RETURN WITH THE RETURN CODE IN R15
         L     R13,N4(R13)         R13= ADDR OF CALLERS SAVE AREA
         RETURN (14,12),,RC=(15)   THIS WILL RETUNR TO THE CALLER
         EJECT
IKJEGALL DS    0H                  ENTRY FOR REMOVING ALL BRK PTS
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*   THE FOLLOWING SECTION OF CODE REMOVES ALL BREAK POINTS ACTIVE
*   AND DEFERED.  ACTIVE BREAK POINTS ARE REMOVED FIRST, BY TAKING
*   THE BREAK PT FROM THE TOP OF THE LIST AND LINKING THE LIST
*   AROUND THE BREAK PT AND CALLING  'REMOVACT' WHICH WIIL REMOVE
*   THE BREAK PT WHOSE ADDR IS IN REGISTER 1. THE PROCESS IS CONTINUED
*   UNTIL THERE IS A NULL LIST.
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         ST    R14,REG14WRK        STORE THE RETURN REG UNTIL DONE
         USING BRKELEM,R8          SETUP ADDR'IBILITY TO ACTIVE BRK PTS
ALL0020  DS    0H                  GET ADDR FROM THE BREAKTAB (TCOMTAB)
         L     R8,BREAKTAB         R8= ADDR OF FIRST BRK ELEMENT
         LA    R1,N0(R8)           R1= ADDR WITH ZERO HIGH ORDER BYTE
         LTR   R1,R1               ARE THERE ANY ACTIVE BRK PTS
         BZ    ALL0100             NO THEREFORE CHECK DEFERTAB
         L     R1,BRKADDR          R1= ADDR TO BE SEARCHED FOR BY SRH
         XC    SRHAWRK(N12),SRHAWRK CLEAR THE SRH WORK AREA
         ST    R1,SRH2WRK          INSERT THE ADDR OF BRKPT TO REMOVED
         LA    R1,SRHAWRK          R1= ADDR OF THE PARAMETER AREA
         L     R15,TSTSRHRT        R15= ADDR OF THE SEARCH ROUTINE
         BALR  R14,R15             HAVE THE BREAKPOINT REMOVED
****     TRANSFER CONTROL WITH RESPECT TO RETURN CODE
         B     ALL0040(R15)        BRANCH INTO TABLE
         SPACE
ALL0040  DS    0H                  SRH RETURN CODE TABLE
         B     ALL0060             OK TURN ON REMOVAL SW
         B     ALL0060             RC= 04 UNABLE TO FIND CK DEFERED
         B     ALL0060             RC= 08 INVALID RANGE
         B     ALL0080             RC= 12 STAE RETRY BLEW IT
         B     OFF0320             RC > 12, SO RETURN TO CALLER(MNL)
         B     OFF0320             RC > 12, SO RETURN TO CALLER(MNL)
         B     OFF0320             RC > 12, SO RETURN TO CALLER(MNL)
         SPACE
ALL0060  DS    0H                  TURN ON REMOVE SW AND CONTINUE
         B     ALL0020             CONTINUE WITH THE NEXT BREAK PT
         SPACE
ALL0080  DS    0H                  RETURN TO MNL W 20
         LA    R15,N20             RETURN TO MAINLINE WITH 20
         B     OFF0320             JUST RETURN TO MNL
         DROP  R8                  RELEASE THE ACT BRK PT Q REG
         SPACE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*   THE NEXT SECTION OF CODE REMOVES THE DEFERED BREAK POINTS.
*   IT ALSO LINKS AROUND THE DME THEN FREES THE 1) DME, 2) PDL,
*   3) INBUF, 4) DBE... 2 THROUGH 4 ARE CONTINUED UNTIL THERE ARE NO
*   MORE DBE'S. THE NEXT DME IS OBTAINED AND THE PROCESS IS CONTINUED
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
ALL0100  DS    0H                  REMOVE ALL DEFERED BREAK POINTS
         USING DME,R8              ESTABLISH ADDR'IBILITY TO THE DME'S
         USING DBE,R7              ESTABLISH ADDR'IBILITY TO THE DBE'S
         L     R8,DEFERTAB         R8= ADDR OF FIRST DME
ALL0120  DS    0H                  BEGIN LOOP OF REMOVING DME'S
         LA    R8,N0(R8)           ZERO THE HIGH ORDER BYTE
         LTR   R1,R8               IF ZEROTHERE ARE NO (MORE) DME'S
         BZ    ALL0200             ALL BREAK POINTS REMOVED RETURN
         L     R7,DMEDBE           R7= ADDR OF THE DBE...
         L     R8,DMEDME           R8= ADDR OF NEXT DME TO BE PROCESSED
         ST    R8,DEFERTAB         LINK AROUND THE DEFERED ELEMENT
         FREEMAIN RC,LV=16,A=(1),SP=1  FREE THE DME...
         LTR   R15,R15             DID ERROR OCCUR IN FREEMAIN
         BZ    ALL0140             ZERO IMPLIES NO ERROR
         LA    R2,N120             SET SVC NUMBER
         SR    R1,R1               INDICATE THAT THERE IS NO ABEND CODE
         BAL   R14,SVCERR          GO PUT OUT ERROR MSG
ALL0140  DS    0H                  PROCESS THE DBE
         LA    R7,N0(R7)           ZERO THE HIGH ORDER BYTE
         LTR   R7,R7               CKECK IF THERE IS A DBE TO PROCESS
         BZ    ALL0120             NO THEREFORE CHECK FOR MORE DME'S
****     RELEASE THE PARSE PDL
         IKJRLSA DBEPDL          RELEASE THE PDL
****     FREE THE INPUT BUFFER POINTED TO IN THE DBE
         L     R1,DBEINBUF         R1= ADDR OF THE INBUF
         LH    R0,N0(R1)           R3= LENGTH OF THE BUFFER
         FREEMAIN RC,LV=(0),A=(1),SP=1   FREE INBUF
         LTR   R15,R15             DID ERROR OCCUR IN FREEMAIN
         BZ    ALL0150             ZERO IMPLIES NO ERROR
         LA    R2,N120             SET SVC NUMBER
         SR    R1,R1               INDICATE THAT THERE IS NO ABEND CODE
         BAL   R14,SVCERR          GO PUT OUT ERROR MSG
****     ISSUE FREEMAIN TO FREE THE DBE LASTLY.
ALL0150  DS    0H
         LR    R1,R7               R1= ADDR OF DBE TO BE FREED
         L     R7,DBEDBE           R7= ADDR OF NEXT DBE IF ANY
         FREEMAIN R,LV=12,A=(1),SP=1 ISSUE FREEMAIN OF DBE
         LTR   R15,R15             DID ERROR OCCUR IN FREEMAIN
         BZ    ALL0140             ZERO IMPLIES NO ERROR
         LA    R2,N120             SET SVC NUMBER
         SR    R1,R1               INDICATE THAT THERE IS NO ABEND CODE
         BAL   R14,SVCERR          GO PUT OUT ERROR MSG
         B     ALL0140             PROCESS NEXT
****     ALL THE BREAK POINTS (ACTIVE AND DEFERED) HAVE BEEN REMOVED
ALL0200  DS    0H                  RETURN TO MAIN OF OFF
         L     R14,REG14WRK        R14= ADDR OF CALLER
         BR    R14                 RETURN TO CALLER
         DROP  R8                  RELEASE ADDR'IBILITY TO DME
         DROP  R7                  RELEASE ADDR'IBILITY TO DBE
         EJECT
         SPACE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*   THE NEXT SECTION OF CODE IS THE VALIDITY CHECK ROUTINE WHICH
*   PARSE RETURNS CONTROL TO VARIFY AN ADDRESS WHICH THE USER ENTERED
*   THE PDE IS INPUT TO THE ROUTINE, IT VARIFIES THE ADDRESS AND
*   REMOVES IT FROM BOTH QUEUE'S....
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
IKJEGVCK DS    0H                  ENTRY POINT FOR THE VALIDITY CK RTN
         SAVE  (14,12),,*          SAVE REGISTERS FROM PARSE
****     RE-ESTABLISH MY ADDRESSIBILITY TO IKJEGOFF...
         USING IKJEGOFF,R12        SETUP ADDR'ABILITY TO BASE
         L     R2,N4(R1)           R13= ADDR OF REGISTER SAVE AREA
****     RESTORE REGISTER 9 (TCOMTAB), 10 (OFFWORKA), AND 12 (OFF BASE)
         LM    R9,R12,N56(R2)      RESTORE REGS 9 THRU 12
****     BEGIN PROCESSING THE PDE FROM PARSE
         OI    VCKSWWRK,VCKONWRK   TURN ON VALIDITY CK SW
         L     R6,N0(R1)           R6=ADDR OF THE PDE FROM PARSE
         LA    R6,N0(R6)           ZERO THE HIGH ORDER BYTE
         USING IKJPARMA,R6         EST ADDR'IBILITY TO THE PDE
****     SAVE PARSE'S REGISTERS AND CHAIN SAVE AREAS TOGETHER
         ST    R1,PARETWRK         SAVE ADDR OF PARM BLOCK
         L     R1,REGSAVE3         R1= ADDR OF THE NEW SAVE AREA
         ST    R13,N4(R1)          STORE THE BACK POINTER
         ST    R1,N8(R13)          STORE THE FOWARD POINTER
         LR    R13,R1              R13= ADDR OF NEW SAVE AREA
         OI    TSTFLGS4,TSTVALCK   TURN ON VALIDITY CHECK INDICATOR
         L     R2,OUTBUF           GET BUFFER ADDRESS
         MVC   N0(N4,R2),ZEROS     SET MESSAGE INDICATOR TO ZERO
         NI    CHNGSWRK,HEXFF-VCKRMWRK TURNOFF VALIDITY CHECK SW SET
         L     R2,BREAKTAB         ARE THERE ANY ACTIVE BRK ELEMENTS
         LA    R2,N0(R2)           ZERO HIGH ORDER BYTE
         LTR   R2,R2               DO WE HAVE AN ADDRESS
         BNZ   VCK0020             YES CONTINUE
         L     R2,DEFERTAB         ARE THERE ANY ACTIVE DEF ELEMENTS
         LA    R2,N0(R2)           ZERO HIGH ORDER BYTE
         LTR   R2,R2               DO WE HAVE AN ADDRESS
         BNZ   VCK0020             YES CONTINUE
****     THERE IS NOTHING ON EITHER Q ALL ADDRESSES ARE INVALID
         LA    R15,N2              INDICATE TO USE 2ND IO MACRO
         LA    R1,MSGNOQUE         PLACE MSGID INTO REGISTER 1 ERROR
         LR    R2,R6               R2= ADDR OF PDE (INSERT)
         NI    TSTFLGS4,HEXFF-TSTVALCK   TURN OFF VALIDITY CHECK SW
         BAL   R14,PUTMSG          OUTPUT THE ERROR MSG
         LA    R1,N8               R1= N8 RETURN CD TO BE SAVED
         ST    R1,RETCDWRK         SAVE THE RET CD FOR MAIN OFF USE
         LA    R15,N12             RETURN TO PARSE W/ 12 END IT
         B     VCK0935             RETURN WITH 12
         SPACE
****     VERFY THAT IT IS A VALID PDE (BOTH HALVES OF THE PDE)
VCK0020  DS    0H                  FIRST HALF OF PDE
         TM    PDEFLG2,CTNAMFLG    WAS AN ENTRYNAME SPECIFIED
         BO    VCK0050             YES THEREFORE CHECK IT
         TM    PDEFLG4,GENR        DO WE HAVE A GENERAL REGISTER
         BNO   VCK0040             CHECK WHAT IT IS ...
         LH    R2,PDEINDCT         R7= INDIRECT COUNT FROM PDE
         LTR   R2,R2               WAS INDIRECTION ALSO SPECIFIED
         BNZ   VCK0050             YES CHECK REGISTER USAGE
         B     VCK0045             INVALID REG ERROR MSG
****     CHECK FOR FLOATING POINT DOUBLE REGISTER USED IF SO INVALID
VCK0040  DS    0H                  LOOK AT ADDRESS TYPE FIELD
         TM    PDEFLG4,LFPR        IS IT A DOUBLE PRECISION REGISTER
         BO    VCK0045             YES THEREFORE ERROR MSG
         TM    PDEFLG4,SFPR        IS IT A FLOATING POINT REGISTER
         BNO   VCK0050             NO, THEREFORE CONTINUE
****     ERROR CONDITION INVALID REGISTER USAGE
VCK0045  DS    0H                  ERROR CONDITION
         LA    R15,N2              INDICATE TO USE 2ND IO MACRO
         LR    R2,R6               R2= ADDR OF PDE (INSERT ADDR)
         LA    R1,MSGFPREG         R1= ADDR OF THE MESSAGE
         BAL   R14,PUTMSG          GO TO THE MESSAGE ROUTINE
         B     VCK0930             RETURN TO PARSE W/REENTER RET CODE
         SPACE
VCK0050  DS    0H                  SECOND HALF OF PDE
         TM    PDE2FLG2,CTNAMFLG   WAS AN ENTRYNAME SPECIFIED
         BO    VCK0060             YES THEREFORE CHECK IT
         TM    PDE2FLG4,GENR       DO WE HAVE A GENERAL REGISTER
         BNO   VCK0055             CHECK WHAT IT IS ...
         LH    R2,PDE2INDC         R7= INDIRECT COUNT FROM PDE
         LTR   R2,R2               WAS INDIRECTION ALSO SPECIFIED
         BNZ   VCK0060             YES CHECK REGISTER USAGE
         B     VCK0045             INVALID REG ERROR MSG
****     CHECK FOR FLOATING POINT DOUBLE REGISTER USED IF SO INVALID
VCK0055  DS    0H                  LOOK AT ADDRESS TYPE FIELD
         TM    PDE2FLG4,LFPR       IS IT A DOUBLE PRECISION REGISTER
         BO    VCK0045             YES THEREFORE ERROR MSG
         TM    PDE2FLG4,SFPR       IS IT A FLOATING POINT REGISTER
         BO    VCK0045             NO, THEREFORE CONTINUE
         SPACE
****     BEGIN ACTUAL PROCESSING GO TO CONVERT TO RESOLVE ADDRESS
VCK0060  DS    0H                  SETUP FOR COVERT
         TM    PDEFLG1,LDNAMFLG    WAS A LOAD NAME ENTERED...
         BNO   VCK0080             NO THEREFORE DO NOT TURN ON SYM SW
         OI    TSTFLGS3,SYMMESG    SW=ON TO STOP SYM MESSAGES
VCK0080  DS    0H                  SETUP FOR A CALL TO PARSE
         OI    TSTFLGS1,RANGESW    TURN ON THE RANGE SW FOR CVT
         LCR   R1,R6               R1= COMPLEMENT ADDR OF PDE
         XR    R0,R0               R0= ZERO FOR CONVERT
         L     R15,TSTCONVT        R15= ADDR OF THE CONVERT ROUTINE
         BALR  R14,R15             GO TO THE CONVERT SUBROUTINE
         TM    TSTFLGS1,RANGESW    IS THE RANGE SW ON
         BO    VCK0085             YES GET AND SAVE FIRST PDEUSER
         L     R2,PDE2USER         R2=ADDR IN PDEUSER 2 (SEC LEVEL MSG)
         B     VCK0090             CONTINUE CHECKING
VCK0085  DS    0H                  USE ADDR IN PDEUSER 1
         L     R2,PDEUSER          R2=ADDR IN PDEUSER 1 (SEC LEVEL MSG)
VCK0090  DS    0H                  CONTINUE CLEANING UP AFTER CONVERT
****     TURN OFF SYMMESG AND RANGESW SWITCHS SAVE PDEUSER (ERROR MSG)
         NI    TSTFLGS3,HEXFF-SYMMESG TURN OFF SYM MESSAGE SWITCH
         NI    TSTFLGS1,HEXFF-RANGESW TURN OFF RANGE MESSAGE SWITCH
****     TRANSFER CONTROL WITH RESPECT TO THE RETURN CODE
         SPACE
         B     VCK0100(R15)        BRANCH INTO THE TABLE
VCK0100  DS    0H                  CVT RETURN CODE TABLE
         B     VCK0200             ZERO RETURN CODE THEREFORE CONTINUE
         B     VCK0140             RET CD= 04 UNABLE TO CONVERT PDE
         B     VCK0140             RET CD= 08 UNABLE TO RESOLVE SYMBOLS
         B     VCK0120             RET CD= 12 IO ERROR
         B     VCK0120             RET CD= 16 AN ATTN WAS POSTED
         B     VCK0120             RET CD= 20 IO PROBLEMS SYM OR CVT
         SPACE
****     RETURN TO PARSE WITH A '12' SAVE THE RETURN CODE FROM CVT
VCK0120  DS    0H                  RETURN TO PARSE WITH '12'
*        ESTAE 0,OV                REMOVE SCB
         ST    R15,RETCDWRK        SAVE CONVERTS RET CODE IN WORKAREA
         LA    R15,N12             R15= '12' AS A RETURN CODE
         B     VCK0960             BRANCH TO RETURN TO PARSE
         SPACE
****     CHECK IF THE PROBLEM IS AN UNRESOLVED LOADNAME ON DEFERED Q
VCK0140  DS    0H                  IS THERE A LOADNAME IN PDE1
         TM    PDEFLG1,LDNAMFLG    IS AN LOADNAME PRESENT
         BZ    VCK0160             NO ASK PARSE FOR REENTER RET CD 08
         TM    PDE2FLG3,AFLG       DOES SECOND HALF OF THE PDE EXIST
         BZ    VCK0400             NO THEREFORE  A SINGLE DEFERED ENTRY
         TM    PDE2FLG1,LDNAMFLG   DOES A LOADNAME EXIST
         BO    VCK0400             YES THEREFORE DEFERED RANGE
****     WE HAVE A BAD  NAME SYM OR CONVERT PROBLEM
         L     R2,PDE2USER         R2= SECOND LEVEL ERROR MESSAGE
         B     VCK0930             RETURN TO PARSE WITH REENTER
VCK0160  DS    0H                  PDEUSER CONTAINS SECOND LEVEL
         L     R2,PDEUSER          R2= SECOND LEVEL MESSAGE
         B     VCK0930             RETURN TO PARSE WITH REENTER
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*    START PROCESSING OF THE ACTUAL ADDRESS, 1) PDEUSER, 2) SIB PTR,
*    3) QUALIFIED NAME. CONDITIONS 1 AND 2 INDICATE ACTIVE, CONDITION
*    3 INDICATES DEFERED. ALL ENTERIES ARE REMOVED ON BOTH QUEUE'S...
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
VCK0200  DS    0H                  START WITH PDE USER FIELD
         XC    SRHAWRK(N12),SRHAWRK CLEAR PARAMETER AREA
         L     R2,PDEUSER          R2= ADDR IN FROM PDEUSER OF THE PDE
         TM    PDEUSER,PDESIB      IS IT THE ACTUAL ADDRESS OR SIB PTR
         BZ    VCK0220             IF POSITIVE A VALID ADDRESS
         L     R2,N0(R2)           GET THE ACTUAL ADDRESS FROM THE SIB
         ST    R2,PDEUSER          VALIDATE THE ADDRESS YOU RECIEVED
         SPACE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*    REMOVE FROM THE ACTIVE BREAK Q THE BREAK POINT WHOSE ADDR IS
*    IN THE PDEUSER FIELD OF THE PDE. THE BREAK Q IS IN INCREASING
*    ORDER BY ADDRESS.
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
VCK0220  DS    0H                  BEGIN THE REMOVAL PROCESSING
         LA    R2,N0(R2)           CLEAR OUT THE HIGH ORDER BYTE
         ST    R2,SRH2WRK          INSERT ADDRESS OF BRKPT TO REMOVE
         L     R3,PDE2USER         R3= ADDR OF SECOND PDEUSER FIELD
         TM    PDE2USER,PDESIB     IS THE 2 PDE AN ADDR OR SIB POINTER
         BZ    VCK0240             IT IS THE ACTUAL ADDRESS
         L     R3,N0(R3)           R3=THE ACTUAL ADDRESS
         ST    R3,PDE2USER         PLACE THE ADDRESS IN PDE2USER
****    WE HAVE THE SECOND ADDRESS OF THE RANGE
****     MAKE SURE ADDR 1 IS LESS THAN ADDR 2 OF RANGE
VCK0240  DS    0H                  VARIFY THE ADDRESS OF A RANGE
         LA    R3,N0(R3)           CLEAR-HIGH-ORDER-BYTE
         ST    R3,SRH3WRK          INSERT ENDING RANGE ADDR (OR ZERO)
         LA    R1,SRHAWRK          R1= ADDR OF THE PARM AREA
         L     R15,TSTSRHRT        R15= ADDR OF THE SEARCH ROUTINE
         BALR  R14,R15             GO TO REMOVAL ROUTINE
****     TRANSFER CONTROL WITH RESPECT OT RETURN CODE
         B     VCK0260(R15)        BRANCH INTO TABLE
         SPACE
VCK0260  DS    0H                  SRH RETURN CODE TABLE
         B     VCK0280             OK TURN ON REMOVAL SW
         B     VCK0400             RC= 04 UNABLE TO FIND CK DEFERED
         B     VCK0300             RC= 08 INVALID RANGE
         B     VCK0320             DUMMY
         B     VCK0320             DUMMY
         B     VCK0320             RC= 20 STAE RETRY BLEW IT
         B     VCK0320             RC= 24 STAE RETRY BLEW IT
         SPACE
VCK0280  DS    0H                  OK JUST TURN ON REMOVED SW
         OI    CHNGSWRK,VCKRMWRK+REMOVWRK INDICATE SOMETHING REMOVED
         B     VCK0400             CHECK THE DEFERED QUEUE
         SPACE
VCK0300  DS    0H                  INVALID RANGE ERROR CONDITION
         LA    R1,MSGIVRNG         R1= ADDR OF ERROR MSG
         LA    R15,N2              INDICATE TO USE 2ND IO MACRO
         LR    R2,R6               R2= ADDR OF PDE (INSERT ADDR)
         BAL   R14,PUTMSG          GO TO THE ERROR OUTPUT ROUTINE
         B     VCK0930             RETURN TO PARSE W/REENTER CODE
         SPACE
VCK0320  DS    0H                  RETURN TO MNL W 20
         LA    R1,N16              R1 = 16 SAVE INDICATOR
         ST    R1,RETCDWRK         SAVE RETRY INDICATOR
         LA    R15,N12             R15= 12 RETURN CODE TO MNL TROUBLE
         B     VCK0960             RETURN TO PARSE
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*    ALL ACTIVE BREAKPOINTS HAVE BEEN REMOVED IF ANY. NOW WE MUST
*    REMOVE ALL DEFERED BREAKPOINTS THAT HAVE BEEN INDICATED IN THE
*    PDE FROM PARSE...
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
VCK0400  DS    0H                  BEGIN DEFERED PROCESSING
         L     R8,DEFERTAB         R7= ADDR OF FIRST ELEMENT OF DEFER Q
         USING DME,R8              EST ADDR'ABILITY TO DEFERED DME'S
         USING DBE,R7              EST ADDR'ABILITY TO DEFERED DBE'S
************************ START DEFERED  -DME- SEARCH ******************
****     START THE DEFERED PROCESSING VARIFY DEFER Q.
         SPACE
         XC    DMEBKWRK(N4),DMEBKWRK   ZERO BACK POINTER FOR DME
         NI    VCKSWWRK,HEXFF-RANSWWRK TURN OFF RANGE SWITCH
         LA    R1,DEFERTAB         R1= ADDR OF DEFERED TABLE ADDRESS
         ST    R1,DMEBKWRK         SAVE THE ADDRESS FOR BACK CHAINING
VCK0420  DS    0H                  EMPTY DEFERED Q
         LA    R8,N0(R8)           ZERO THE HIGH ORDER BYTE
         LTR   R8,R8               NULL DEFERED QUEUE
         BZ    VCK0920             YES THEREFORE WE ARE DONE
****     GET BOTH LOADNAMES AND COMPARE THEM
         LA    R2,DMELOAD          R2= ADDR OF LOADNAME FROM DME
         L     R3,PDELDNAM         R3= ADDR OF THE PDE LOADNMAE
         LH    R4,PDELEN1          R4= LENGTH OF THE PDE LOAD NAME
         BCTR  R4,N0               DECREAMENT R4 FOR COMPARE
         EX    R4,COMPARE          EXECUTE A COMPARE OF THE LOADNAMES
         BE    VCK0440             WE HAVE THE CORRECT DME
         LA    R1,DMEDME           R1= ADDR OF DME POINTER
         ST    R1,DMEBKWRK         SAVE THE ADDR OF THE PREVIOUS DME
         L     R8,DMEDME           R8= ADDR OF THE NEXT DME
         B     VCK0420             CONTINUE SEARCH FOR THE CORRECT DME
         SPACE
************************ START DEFERED -DBE- SEARCH *******************
****     SEARCH FOR THE CORRECT DBE OF THAT DME
VCK0440  DS    0H                  START SEARCH INITIALIZE
         XC    DBEBKWRK(N4),DBEBKWRK ZERO BACK POINTER FOR THE DBE
         L     R7,DMEDBE           R7= ADDR OF FIRST DBE
VCK0460  DS    0H                  CHECK IF DBE EXISTS
         LA    R7,N0(R7)           ZERO THE HIGH ORDER BYTE
         LTR   R7,R7               IS THE DME PTR NULL
         BZ    VCK0920             WE ARE DONE ...
****     GET THE ADDR TO THE PDE WHICH CREATED THIS DEFERED BREAK POINT
****     ESTABLIST ADDRESSABILITY TO THIS PDE
         L     R5,DBEPDL           GET THE PDE WHICH CREATED THE DBE
         LA    R5,N8(R5)           INCREMENT PDE ADDR TO BODY OF PDE
         USING DBEPDECT,R5         EST ADDR'ABILITY TO THE DBE-PDE
VCK0470  DS    0H             CONTINUE THE DBE-PDE SEARCH
         L     R2,DBECTNAM         R2= ADDR OF DBE CSECT NAME
         L     R3,PDECTNAM         R3= ADDR OF PDE CSECT NAME
         LH    R4,PDELEN2          R4= LENGTH OF THE PDE CSECT NAME
         BCTR  R4,N0               DECREAMENT R4 FOR COMPARE
         EX    R4,COMPARE          ARE THE CSECT NAME EQUAL
         BE    VCK0540             YES THEREFORE MUST CHECK FURTHER
         SPACE
****     FIRST CHECK IF THERE IS A CHAIN OF PDE'S OFF THE DBE
VCK0500  DS    0H                  RESTART THE SEARCH FOR DBE
         L     R1,DBE2CHAI         R2= ADDR OF NEXT DBE(PDE) OFF DBE
         LA    R1,N0(R1)           ZERO HIGH ORDER BYTE
         LTR   R1,R1               IS THERE ANOTHER DBEPDE
         BNZ   VCK0510             YES THEREFORE CHECK IT FOR A MATCH
****     THIS DBE IS FINISHED SAVE ADDRESS FOR BACKUP AND GET NEXT DBE
         ST    R7,DBEBKWRK         SAVE THE PREVIOUS DBE ADDRESS
         L     R7,DBEDBE           OTHERWISE GET THE NEXT DBE
         B     VCK0460             CONTINUE THE CSECT SCEARCH
         SPACE
****     CONTINUE SEARCH WITH NEXT DBE-PDE CHAINED OFF OF PREVIOUS
VCK0510  DS    0H                  ADDR'ABILITY TO THE DBE-PDE
         LR    R5,R1               R5= ADDR OF DBE-PDE TO BE SEARCHED
         B     VCK0470             CONTINUE THE SEARCH FOR A MATCH
         SPACE
****     RESTORE THE DBE PTR AS ADDR STRING SEARCH FAILED
VCK0520  DS    0H                  RESTORE DBE
         L     R5,DBEPDWRK         R5= SAVED ADDR OF DBE-PDE WHERE STOP
         L     R7,DBESVWRK         R7= ADDR OF DBE WHICH FAILED
         NI    VCKSWWRK,HEXFF-RANSWWRK TURN OFF RANGE SWITCH
         B     VCK0500             CONTINUE CSECT NAME SEARCH
         DROP  R7                  RELEASE ADDR'ABILITY TO THE DBE
         SPACE
****     WE HAVE A MATCH FOR THE LOAD AND CSECT NAMES, NOW CHECK THE
****     ADDRESS STRING(S) AND/OR THE THIRD QUALIFIER
VCK0540  DS    0H                  STORE THE DBE ADDR FOR RESTART
         ST    R5,DBEPDWRK         SAVE THE ADDR OF THE DBE-PDE
         ST    R7,DBESVWRK         SAVE THE CURRENT DBE
         TM    PDEFLG4,CTONLY      IS THIS A CSECT ONLY SEARCH
         BO    VCK0920             YES THEREFORE WE HAVE A VALID MATCH
VCK0545  DS    0H                  RESTART POSITION FOR SECOND HALF PDE
****     ZERO THE TEMPORARY ADDR EXPRESSION SUMS
         XC    DBESMWRK(N4),DBESMWRK ZERO DBE SUM IN WORKAREA
         XC    PDESMWRK(N4),PDESMWRK ZERO PDE SUM IN WORKAREA
         XC    DBEIDWRK(N2),DBEIDWRK ZERO DBE INDIRECT COUNT IN WRKAREA
         XC    PDEIDWRK(N2),PDEIDWRK ZERO PDE INDIRECT COUNT IN WRKAREA
         TM    PDEFLG3,AFLG        CHECK IF THE ADDR STRING PRESENT
         BZ    VCK0550             THIS SHOULD NEVER HAPPEN IF PARSE OK
         TM    PDEFLG4,RELADDR     IS ADDR STRING NUMERIC
         BO    VCK0580             YES THERFORE PROCESS
         TM    PDEFLG4,SYMADDR     IS IT SYMBOLIC
         BO    VCK0560             YES AS IT BETTER BE
****     IN THEORY THIS PIECE OF CODE SHOULD NEVER BE EXECUTED
****     IT INDICATES AN INVALID PDE WAS ENCOUNTERED
VCK0550  DS    0H                  OUT PUT THE ERROR MESSAGE
         LA    R15,N2              INDICATE TO USE 2ND IO MACRO
         LR    R2,R6               R2= ADDRESS PDE INSERT ADDR
         LA    R1,MSGIVPDE         R1= ADDR OF INVALID PDE MSG
         BAL   R14,PUTMSG          OUTPUT THE MESSAGE
         B     VCK0930             CONTINUE WITH NEXT PDE
         SPACE
****     COMPARE THIRD QUALIFIER
****     A NON NUMERIC ADDR STRING COMPARE IF EQUAL
VCK0560  DS    0H                  COMPARE THE ADDR STRINGS
         L     R2,DBEADRPT         R2= ADDR OF DBE SYMBOL
         L     R3,PDEADRPT         R3= ADDR OF PDE SYMBOL
         LH    R4,PDELEN3          R3= LENGTH OF PDE SYMBOL
         BCTR  R4,N0               DECREMENT R4 FOR EXECUTN OF COMPARE
         EX    R4,COMPARE          ARE THE TWO SYMBOLS EQUAL
         BNE   VCK0520             RESTART CSECT SEARCH
****     THEY ARE EQUAL BUT BOTH INDIRECT
         LH    R2,DBEINDCT         R2= DBE INDIRECT COUNT
         LH    R3,PDEINDCT         R3= PDE INDIRECT COUNT
         CR    R2,R3               ARE THE COUNTS THE SAME
         BNE   VCK0520             NO CONTINUE CSECT SEARCH
         B     VCK0600             CONTINUE WITH THE EXPRESIONS IF ANY
         SPACE
****     BEGIN EVALUATING THE EXPRESSION, THE  NUMERIC ADDR STRING
****     WILL BE THE FIRST OF THE SUM. TERMINATION IS EITHER A NULL
****     EXPRESSION OF AN INDIRECT COUNT
VCK0580  DS    0H                  START WITH ADDR STRING
         LH    R2,PDEINDCT         R2= PDE INDIRECT COUNT
         LTR   R2,R2               DOES AN INDIRECT COUNT EXIST
         BNZ   VCK0560             COMPARE AS THOUGH NON NUMERIC
****     PDE INDIRECT COUNT = 0 SO MUST DBE INDIRECT COUNT
         LH    R2,DBEINDCT         R2=DBE INDIRECT COUNT
         LTR   R2,R2               IS THE DBE INDIRECT COUNT = 0
         BNZ   VCK0520             NO THEREFORE CONTINUE CSECT SEARCH
****     CONVERT BOTH TO BINARY AND ADD TO THE APPROPRIATE SUMS
         L     R1,PDEADRPT         R1= ADDR OF THE PDE NUMERIC
         LH    R3,PDELEN3          R3= LENGTH OF THE EXPRESSION
         BAL   R14,HEXCVT          CONVERT THE NUMBER TO HEX
         ST    R1,PDESMWRK         PLACE THE VALUE IN PDE SUM
         L     R1,DBEADRPT         R1= ADDR OF THE DBE NUMERIC
         LH    R3,DBELEN3          R3= LENGTH OF THE EXPRESSION
         BAL   R14,HEXCVT          CONVERT THE NUMBER TO HEX
         ST    R1,DBESMWRK         PLACE THE VALUE IN DBE SUM
         SPACE
****     UPON ENTERING BOTH PDE SUM AND DBE SUM CONTAIN EITHER A
****     PARTIAL SUM OR THE ARE ZERO
****     START BY LOADING THE APPROPRIATE SIGNS FOR USE
VCK0600  DS    0H                  GET THE CURRENT SIGN
         XR    R2,R2               ZERO REGISTER 2
         IC    R2,PDESIGN          R2= SIGN OF FIRST ADDR EXPRESSION
         L     R1,PDEEXPTR         R1= ADDR OF THE FIRST EXPRESSION
****     SAVE THE INITIAL INFORMATION FOR THE DBE EXPRESSION EVALUATION
         MVC   DBEXPWRK(N4),DBEEXPTR SAVE THE ADDR OF FIRST DBE EXP
         XR    R3,R3               ZERO REGISTER 3
         IC    R3,DBESIGN          R3= SIGN OF FIRST DBE EXPRESSION
         STH   R3,DBESNWRK         SAVE THE SIGN
         SPACE
****     START SUMMING UP THE PDE ADDR EXPRESSIONS
VCK0620  DS    0H                  START OF LOOP SUMMING EXPRESSIONS
         LA    R1,N0(R1)           ZERO THE HIGH ORDER BYTE
         LTR   R7,R1               IS IT A NULL EXPRESSION POINTER
         USING EXPRPDE,R7          EST ADDR'ABILITY TO EXPRESSION PDE
         BZ    VCK0700             THIS EXPRESSION IS THRU
         L     R1,EXPRPTR           R1= ADDR OF THE NUMBER
         LH    R3,EXPRLNH           R3= LENGTH OF THE EXPRESSION
         TM    EXPRFLGS,EXPRHEX    IS THE NUMBER DECIMAL
         BZ    VCK0640             YES GO TO DECIMAL CONVERSION
         BAL   R14,HEXCVT          IT IS HEX CONVERT IT FOR SUM
         B     VCK0660             CONTINUE BY ADDING IN THE VALUE
VCK0640  DS    0H                  BAL TO THE DECIMAL CONVERSION
         BAL   R14,DECCVT          CONVERT THE VALUE FROM DECIMAL
VCK0660  DS    0H                  IS THE NUMBER PLUS OR MINUS
         CH    R2,PLUSIGN          IS IT A POSITIVE NUMBER
         BE    VCK0680             YES THEREFORE OK AS IT IS
         LCR   R1,R1               MUST COMPLEMENT AS IT IS NEGITIVE
VCK0680  DS    0H                  ADD IN THE CONVERTED VALUE
         A     R1,PDESMWRK         R1= SUM OF THE VALUES
         ST    R1,PDESMWRK         PLACE THE SUM IN PDE SUM (PDESMWRK)
         L     R1,EXPRCHAI         R1= ADDR OF THE NEXT EXPRESSION
         IC    R2,EXPRSIGN         R2= SIGN OF THE NEW EXPRESSION
         LH    R3,EXPRINDC         R3= PDE INDIRECT COUNT
         LTR   R3,R3               IF IT IS ZERO
         BZ    VCK0620             CONTINUE WITH PDE EXPRESSIONS
         STH   R3,PDEIDWRK         SAVE THE INDIRECT COUNT
         SPACE
****     THE PDE EXPRESSIONS HAVE BEEN SUMMED UP TO THE FIRST
****     DELIMITER (AN INDIRECT EXPRESSION, OR A NULL POINTER).
****     NOW LOOP THRU THE DBE EXPRESSIONS AND SUMM THEM UP
****     UNTIL A DELIMITER IS REACHED.
VCK0700  DS    0H                  GET THE CURRENT SIGN
         LR    R4,R1               SAVE POINTER TO THE NEXT PDE EXP
         STH   R2,PDESNWRK         SAVE THE CURRENT SIGN LATTER USE
         L     R1,DBEXPWRK         R1= ADDR OF THE STARTING DBE EXP
         LH    R2,DBESNWRK         R2= SIGN OF THE STARTING DBE EXP
         SPACE
VCK0720  DS    0H                  START OF LOOP SUMMING EXPRESSIONS
         LA    R1,N0(R1)           ZERO THE HIGH ORDER BYTE
         LTR   R7,R1               IS IT A NULL EXPRESSION POINTER
         BZ    VCK0800             THIS EXPRESSION IS THRU
         L     R1,EXPRPTR          R1= ADDR OF THE NUMBER
         LH    R3,EXPRLNH          R3= LENGTH OF THE EXPRESSION
         TM    EXPRFLGS,EXPRHEX    IS THE NUMBER DECIMAL
         BZ    VCK0740             YES GO TO DECIMAL CONVERSION
         BAL   R14,HEXCVT          IT IS HEX CONVERT IT FOR SUM
         B     VCK0760             CONTINUE BY ADDING IN THE VALUE
VCK0740  DS    0H                  BAL TO THE DECIMAL CONVERSION
         BAL   R14,DECCVT          CONVERT THE VALUE FROM DECIMAL
VCK0760  DS    0H                  IS THE NUMBER PLUS OR MINUS
         CH    R2,PLUSIGN          IS IT A POSITIVE NUMBER
         BE    VCK0780             YES THEREFORE OK AS IT IS
         LCR   R1,R1               MUST COMPLEMENT AS IT IS NEGITIVE
VCK0780  DS    0H                  ADD IN THE CONVERTED VALUE
         A     R1,DBESMWRK         R1= SUM OF THE VALUES
         ST    R1,DBESMWRK         PLACE THE SUM IN DBE SUM (DBESMWRK)
         L     R1,EXPRCHAI         R1= ADDR OF THE NEXT EXPRESSION
         IC    R2,EXPRSIGN         R2= SIGN OF THE NEW EXPRESSION
         LH    R3,EXPRINDC         R3= DBE INDIRECT COUNT
         LTR   R3,R3               IF IT IS ZERO
         BZ    VCK0720             CONTINUE WITH DBE EXPRESSIONS
         STH   R3,DBEIDWRK         SAVE THE INDIRECT COUNT
         SPACE
****     THERE NOW EXISTS TWO SUMS PDE SUM (PDESMWRK) AND DBE SUM
****    (DBESMWRK) ARE THESE SUM THE EQUAL
VCK0800  DS    0H                  COMPARE THE SUMS
         STH   R2,DBESNWRK         SAVE THE DBE SIGN IN WORKAREA
         L     R2,PDESMWRK         R2= PDE SUM (PDESMWRK)
         L     R3,DBESMWRK         R3= DBE SUM (DBESMWRK)
         CR    R2,R3               ARE THE TWO SUMS THE SAME
         BNE   VCK0520             RESTART THE CSECT SEARCH
****     SO FAR THE EXPRESSIONS MATCH CONTINUE
****     NOW CHECK IF THE INDIRECT COUNTS MATCH
         LH    R2,DBEIDWRK         R2= DBE INDIRECT COUNT
         LH    R3,PDEIDWRK         R3= PDE INDIRECT COUNT
         CR    R2,R3               ARE THE TWO INDIRECT COUNTS EQUAL
         BNE   VCK0520             NO THEREFORE RESTART CSECT SEARCH
         SPACE
****     WERE THE INDIRECT COUNTS ZERO OR NON ZERO (THEY ARE EQUAL)
         LTR   R2,R2               WHAT TERMINATED THE PDE SCAN
         BNZ   VCK0820             TERMINATED BY AN INDIRECT COUNT
****     R1= ADDR OF NEXT DBE EXPRESSION, R4= ADDR OF NEXT PDE EXP
         LA    R1,N0(R1)           CLEAR HIGH ORDER BYTE OF DBE PTR
         LTR   R1,R1               IS IT A NULL DBE PTR
         BNZ   VCK0820             NO CONTINUE EXPRESSION EVALUATION
         LA    R4,N0(R4)           CLEAR HIGH ORDER BYTE OF PDE PTR
         LTR   R4,R4               IS IT A NULL PDE PTR ALSO
         BZ    VCK0840             YES THEREFORE FREE THE CORE
         SPACE
****     SAVE THE DBE INFORMATION (PTR AND SIGN) AND RESTART THE PDE
****     EXPRESSION EVALUATION
VCK0820  DS    0H                  SETUP TO RESTART EXP EVALUATION
         ST    R1,DBEXPWRK         SAVE THE DBE PTR IN WORKAREA
         LR    R1,R4               R1= PTR TO NEXT PDE EXPRESSION
         LH    R2,PDESNWRK         R2= PDE EXPRESSION SIGN
         XC    DBEIDWRK(N2),DBEIDWRK ZERO DBE INDIRECT COUNT IN WRKAREA
         XC    PDEIDWRK(N2),PDEIDWRK ZERO PDE INDIRECT COUNT IN WRKAREA
         B     VCK0620             RESTART THE SEARCH
         SPACE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        UPON ENTRY A MATCH HAS BEEN FOUND BETWEEN THE CURRENT PDE
*        AND A PDE OF A DEFERED BREAK POINT.
*        NEXT SEE IF BOTH ARE A RANGE IF SO THE PROCESS MUST BE
*        REPEATED. ONCE THEY HAVE BEEN DETERMINED EQUAL THEY MAY BE
*        FREED. MAKE SURE THAT A NULL DME IS NOT CREATED.
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
VCK0840  DS    0H                  DOES A SECOND PDE EXIST
         TM    VCKSWWRK,RANSWWRK   IS RANGE SW ON
         BO    VCK0860             YES THEREFORE REMOVE
         L     R1,DBECHAIN         R1= ZERO IF A RANGE NOT SPECIFIED
         LA    R1,N0(R1)           ZERO HIGH ORDER BYTE
         LTR   R1,R1               DOES THE DBE PDE HAVE A SECOND HALF
         BZ    VCK0850             NO THEREFORE CK ORIGINAL PDE
****     THE DBE PDE WAS A RANGE WAS THE ORIGINAL PDE ALSO  A RANGE
         L     R1,PDECHAIN         R1= ZERO IF A RANGE NOT SPECIFIED
         LA    R1,N0(R1)           ZERO HIGH ORDER BYTE
         LTR   R1,R1               DOES THE INPUT PDE HAVE SECOND HALF
         BZ    VCK0520             NO RESTART THE CSECT SEARCH
****     SAVE THE INITIAL INFORMATION FOR THE DBE EXPRESSION EVALUATION
         MVC   DBEXPWRK(N4),DBEEXPTR SAVE THE ADDR OF FIRST DBE EXP
         XR    R3,R3               ZERO REGISTER 3
         IC    R3,DBESIGN          R3= SIGN OF CURRENT DBE EXPRESSION
         STH   R3,DBESNWRK         SAVE THE SIGN
****     SETUP ADDRESSABILITY TO THE SECOND HALF OF THE RESPECTIVE
****     DBE AND INPUT PDE'S...
         LA    R6,PDECHAIN         R6= ADDR OF SECOND HALF OF INPUT PDE
         LA    R5,DBECHAIN         R5= ADDR OF SECOND HALF OF DBE PDE
****     GET BOTH LOADNAMES AND COMPARE THEM
         LA    R2,DMELOAD          R2= ADDR OF LOADNAME FROM DME
         L     R3,PDELDNAM         R3= ADDR OF THE PDE LOADNMAE
         LH    R4,PDELEN1          R4= LENGTH OF THE PDE LOAD NAME
         BCTR  R4,N0               DECREMENT R4 FOR EXECUTN OF COMPARE
         EX    R4,COMPARE          EXECUTE A COMPARE OF THE LOADNAMES
         BNE   VCK0520             LOADNAMES DO NOT AGREE RESTART CSECT
****                               SEARCH WITH NEXT DBE
****     GET BOTH CSECT NAMES AND COMPARE THEM
         L     R2,DBECTNAM         R2= ADDR OF CSECT NAME FROM DME PDE
         L     R3,PDECTNAM         R3= ADDR OF INPUT PDE CSECT NAME
         LH    R4,PDELEN1          R4= LENGTH OF INPUT PDE CSECT NAME
         BCTR  R4,N0               DECREMENT R4 FOR EXECUTN OF COMPARE
         EX    R4,COMPARE          EXECUTE A COMPARE OF THE LOADNAMES
         BNE   VCK0520             CSECTNAME DO NOT AGREE RESTART CSECT
****                               SEARCH WITH NEXT DBE
         OI    VCKSWWRK,RANSWWRK   TURN ON THE RANGE INDICATOR
         B     VCK0545             CHECK IF THE SECOND HALF PDE'S EQUAL
         DROP  R7                  RELEASE ADDR'ABILITY TO EXP DSECT
         SPACE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        THE GENERAL COMPARE INSTRUCTION WHICH IS EXECUTED IN THE
*        SEARCH FOR MATCH PDE'S AND DEFERED BREAK ELEMENTS.
*        R4 = LENGTH OF FIRST CHARACTER STRING (R3).
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
COMPARE  CLC   N0(N0,R3),N0(R2)    COMPARE THE STRINGS (R3 TO R2)
         SPACE
VCK0850  DS    0H                  CHECK IF DE IS A RANGE
****     THE DBE PDE WAS NOT A RANGE WAS THE ORIGINAL PDE  A RANGE
         L     R1,PDECHAIN         R1= ZERO IF A RANGE NOT SPECIFIED
         LA    R1,N0(R1)           ZERO HIGH ORDER BYTE
         LTR   R1,R1               DOES THE INPUT PDE HAVE SECOND HALF
         BNZ   VCK0520             YES RESTART THE CSECT SEARCH
         SPACE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        WE NOW HAVE COMPLETELY VARIFIED THAT THE TWO PDE'S (INPUT
*        AND DBE'S) MATCH, THEREFORE WE CAN NOW DELETE THE DBE,
*        THE PDE, THE INBUF, AND THE DME IF THIS WAS ITS ONLY DBE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
VCK0860  DS    0H                  RELEASE THE DEFERED CORE
         L     R5,DBEPDWRK         R5= START OF CURRENT DBE-PDE
         OI    CHNGSWRK,VCKRMWRK+REMOVWRK  SET REMOVE SW         YM2245
         MVI   DBEFLG5,PDEYECH     TURN ON USELESS INDICATOR
         USING DBE,R7              RE-ESTABLISH ADDR'ABILITY TO THE DBE
         L     R7,DBESVWRK         R7= ADDR OF THE DBE TO BE FREED
****     START AT TOP OF DBE-PDE'S FOR USELESS CHECK (R5= ADDR'ABILITY)
         L     R5,DBEPDL           R5= ADDR OF THE FIRST PDE 0F DBE
         LA    R5,N8(R5)           R5= ADDR OF THE DBE-PDE BODY
****     MAKE SURE ALL OF THE DBE-PDE'S ARE USELESS IF SO FREE THE CORE
VCK0870  DS    0H                  SEARCH ALL DBE-PDE'S FOR USELESS
         TM    DBEFLG5,PDEYECH     IS THE USELESS BTI ON
         BZ    VCK0520             NO THEREFORE CONTINUE THE SEARCH
         L     R5,DBE2CHAI         R5= ADDR OF THE NEXT DBE-PDE
         LA    R5,N0(R5)           ZERO HIGH ORDER BYTE
         LTR   R5,R5               IS THERE ANOTHER DBE-PDE
         BNZ   VCK0870             YES THRERFORE CONTINUE CHECK
         USING DBE,R7              RE-ESTABLISH ADDR'ABILITY TO THE DBE
         L     R7,DBESVWRK         R7= ADDR OF THE DBE TO BE FREED
         OI    CHNGSWRK,VCKRMWRK+REMOVWRK SET SW INDICATE BREAKPT REMOV
****     RELEASE THE PARSE PDL
         IKJRLSA DBEPDL            RELEASE THE PDL
****     FREE THE INPUT BUFFER POINTED TO IN THE DBE
         L     R1,DBEINBUF         R1= ADDR OF THE INBUF
         LH    R3,N0(R1)           R3= LENGTH OF THE BUFFER
         FREEMAIN RC,LV=(3),A=(1),SP=1 FREE INBUF
****     ISSUE FREEMAIN TO FREE THE DBE
         LTR   R15,R15             DID ERROR OCCUR IN FREEMAIN
         BZ    VCK0775              ZERO IMPLIES NO ERROR
         LA    R2,N120             SET SVC NUMBER
         SR    R1,R1               INDICATE THAT THERE IS NO ABEND CODE
         BAL   R14,SVCERR          GO PUT OUT ERROR MSG
VCK0775  DS    0H
         LR    R1,R7               R1= ADDR OF DBE TO BE FREED
         L     R2,DBEDBE           R7= ADDR OF NEXT DBE IF ANY
         FREEMAIN RC,LV=12,A=(1),SP=1  ISSUE FREEMAIN OF DBE
****     R2= NEXT DBE, AND DBEBKWRK=PREVIOUS DBE OR ZERO (NO PREVIOUS)
         LTR   R15,R15             DID ERROR OCCUR IN FREEMAIN
         BZ    VCK0778              ZERO IMPLIES NO ERROR
         LA    R2,N120             SET SVC NUMBER
         SR    R1,R1               INDICATE THAT THERE IS NO ABEND CODE
         BAL   R14,SVCERR          GO PUT OUT ERROR MSG
VCK0778  DS    0H
         L     R7,DBEBKWRK         R7= ADDR OF PREVIOUS DBE
         LA    R7,N0(R7)           ZERO HIGH ORDER BYTE
         LTR   R7,R7               IF ZERO FIRST DBE OF CHAIN
         BNZ   VCK0900             THERE ARE ADITIONAL DBE ELEMENTS
         LA    R2,N0(R2)           ZERO HIGH ORDER BYTE OF NEXT DBE PTR
         LTR   R7,R2               IF ZERO THERE IS NO NEXT DBE
         BNZ   VCK0880             NO THEREFORE PLACE ADDR IN DME
****     NO DBE ARE HANGING OFF THE DME SO FREE THE DME
         LA    R1,N0(R8)           R1= ADDR OF THE DME TO BE FREED
         L     R3,DMEDME           R3= ADDR OF THE NEXT DME OR ZERO
         L     R2,DMEBKWRK         R2= ADDR OF DME POINTER OR DEFERTAB
         ST    R3,N0(R2)           LINK AROUND THE DME TO BE FREED
         FREEMAIN RC,LV=16,A=(1),SP=1  FREE THE DME...
         LTR   R15,R15             DID ERROR OCCUR IN FREEMAIN
         BZ    VCK0920              ZERO IMPLIES NO ERROR        YM4849
         LA    R2,N120             SET SVC NUMBER
         SR    R1,R1               INDICATE THAT THERE IS NO ABEND CODE
         BAL   R14,SVCERR          GO PUT OUT ERROR MSG
         B     VCK0920             ALL THRU WITH THIS ELEMENT ANY MORE
         SPACE
****     PLACE THE ADDR OF THE NEXT DBE INTO THE DME
VCK0880  DS    0H                  LINK IN THE DBE TO THE DME
         ST    R2,DMEDBE           DME PTS TO A DBE CHAIN
         B     VCK0460             ALL THRU WITH THIS ELEMENT ANY MORE
         SPACE
****     JUST LINK AROUND THE REMOVED DBE
****     ADDR'ABILITY CURRENTY IS TO THE PREVIOUS DBE
VCK0900  DS    0H                  R2= ADDR OF DBE TO BE LINKED IN
         ST    R2,DBEDBE           RELINK THE DBE CHAIN
         LR    R7,R2               R7= ADDR OF DBE TO RESTART SEARCH
         B     VCK0460             ALL THRU WITH THIS ELEMENT ANY MORE
         SPACE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        THE PROCESSING IS NOW COMPLETE CHECK IF ANY BREAK POINTS
*        WERE REMOVED. THEN RETURN TO PARSE WITH THE RESPECTIVE
*        RETURN CODE.
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
VCK0920  DS    0H                  THE EXIT PORTION OF VALIDITY CHECK
         TM    CHNGSWRK,VCKRMWRK   WERE ANY BREAKPOINTS REMOVED
         BO    VCK0940             YES RETURN WITH A ZERO RET CODE
         LA    R15,N2              INDICATE TO USE 2ND IO MACRO
         LR    R2,R6               R2= ADDR OF ADDR PDE (INSERT MSG)
         LA    R1,MSGIVBRK         SETUP MSG ID
         BAL   R14,PUTMSG          SEND THE MESSAGE TO THE TERMINAL
VCK0930  DS    0H                  PARSE RE-ENTER ROUTINE
****     NOTE THAT REGISTER 2 CONTAINS ANY SECOND LEVEL OR ZERO
         LA    R15,N8              R15= 8, REENTER RETURN CODE
VCK0935  DS    0H                  RETURN TO PARSE WITH THE PARM BLOCK
         L     R1,PARETWRK         R1= ADDR OF PARSE PARM BLOCK
         L     R14,OUTBUF          GET OF POSSIBLE 2ND LEVEL MSG
         LH    R2,N0(R14)          GET POSSIBLE MESSAGE LENGTH
         LTR   R2,R2               DOES 2ND LEVEL EXIST
         BZ    VCK0960             NO - RETURN TO PARS
         ST    R14,N8(N0,R1)       SET PARS PTR TO 2ND LEVEL MESSAGE
         B     VCK0960             RETURN TO PARSE
VCK0940  DS    0H                  SET RETURN CODE TO ZERO
         XR    R15,R15             R15= ZERO
VCK0960  DS    0H                  RETURN TO PARSE
         L     R13,N4(R13)         R13=ADDR OF CALLERS SAVE AREA
         NI    VCKSWWRK,HEXFF-VCKONWRK TURN OFF VALIDITY CK SW
         NI    TSTFLGS4,HEXFF-TSTVALCK TURN OFF VALIDITY CHECK INDIC
         RETURN (14,12),,RC=(15)   THE END (VALIDITY CHECK)
         DROP  R5                  RELEASE ADDR'ABILITY TO DBE'S PDE
         DROP  R6                  RELEASE ADDR'ABILITY TO THE PDE
         DROP  R7                  RELEASE ADDR'ABILITY TO THE DBE'S
         DROP  R8                  RELEASE ADDR'ABILITY TO THE DME'S
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        THIS ROUTINE OUTPUTS ALL ERROR MESSAGES
*        INPUT IS REGISTER 1, POINTS TO 2 WORD MESSAGE POINTER, AND
*        REGISTER 2 WHICH POINTS TO ADDR PDE IF ANY, (OR ZERO)
*        REGISTERS USED 1 THROUGH 5
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
PUTMSG   DS    0H                  THE GENERAL ERROR MSG HANDLER
         ST    R14,PUTREWRK        SAVE THE RETURN ADDR OF CALLER
****     FIRST SETUP  SECOND LEVEL POINTER**************
         L     R3,N4(R1)           GET SECOND LEVEL MSG ID
         L     R4,N0(R1)           GET FIRST LEVEL MSG ID
         XC    TSTOIPRM(L'TSTOIPRM),TSTOIPRM  CLEAR MSG AREA
         SLL   R15,N2              MULTIPLY CODE BY 4
         B     CHOICE(R15)         BRANCH TO APPROPRIATE IO MACRO
CHOICE   B     CHOICE1             R15 = 0
         B     CHOICE1             R15 = 1
         B     CHOICE2             R15 = 2
         B     CHOICE3             R15 = 3
CHOICE1  DS    0H                 MESSAGE WITH NO INSERTS
         IKJEGSIO MSG,FIRST=(R4),SECOND=(R3),ID=OFF23,MF=(E,TSTOIPRM)
CHKIORC  SR    R1,R1              WAS IO SUCCESSFUL
         LA    R1,N12             PUT DEC 12 IN R1
         CR    R15,R1             WAS IO SUCCESSFUL
         BNH   SETRC              YES, CONTINUE
         B     VCK0960            RET TO CALLER (PARSE) WITH IO RET CD
SETRC    L     R14,PUTREWRK       PREPARE TO RET TO PARSE WITH APPR CD
         BR    R14                 RETURN
         SPACE
CHOICE2  DS    0H                  MESSAGES WITH PDE INSERTS
         IKJEGSIO MSG,FIRST=(R4),INST11=(APDE,(R2)),                   *
               SECOND=(R3),ID=OFF23,MF=(E,TSTOIPRM)
         B     CHKIORC   GO DETERMINE PROPER RETCODE AND RETURN
         SPACE
CHOICE3  DS    0H                  MESSAGES WITH INSERT FROM MSG CSECT
         IKJEGSIO MSG,FIRST=(R4),INST11=(NUM,(R2)),                    *
               SECOND=(R3),ID=OFF23,MF=(E,TSTOIPRM)
         B     CHKIORC   GO DETERMINE PROPER RETCODE AND RETURN
         SPACE
         SPACE
         EJECT
SVCERR   ST    R14,PUTREWRK      SAVE RETURN ADDRESS
         LR    R3,R1              SET ABEND CODE FOR ABENDREG
         LR    R4,R15             SET RETURN CODE
         XC    TSTOIPRM(L'TSTOIPRM),TSTOIPRM
         LTR   R1,R1              ARE WE COMMING FROM ESTAE
         ST    R2,REGSVWRK        PRESERVE REGISTER 2
         BNZ   SVCLINK            NO
         IKJEGSIO SVCERR,SVC=(R2),ID=OFF23,MF=(E,TSTOIPRM)
         L     R2,REGSVWRK        RESTORE REGISTER 2
         B     CHKIORC            GO RETURN WITH APPROPRIATE RC
SVCLINK  IKJEGSIO SVCERR,SVC=(R2),ABENDRG=(R3),MF=(E,TSTOIPRM),        *
               ID=OFF23,INST11=(NUM,I0033)
         L     R2,REGSVWRK        RESTORE REGISTER 2
         B     CHKIORC            GO RETURN WITH APPROPRIATE RC
MSGFPREG DC    F'101'               INVALID ADDRESS
         DC    F'274'               REG NOTATN MUST BE IND GEN REG
MSGPRS0C DC    F'104'               OFF FAILED
         DC    F'277'               PARSE ERROR CODE 12
MSGPRS10 DC    F'103'               NOT ENOUGH STORAGE TO EXECUTE CMD
         DC    F'000'
MSGNOQUE DC    F'101'               INVALID ADDRESS
         DC    F'205'               BREAKPOINT QUEUES EMPTY
MSGNOBRK DC    F'9'                 NO BRKPTS FOUND ON ACT OR DEF QUE
         DC    F'000'               THERE IS NO 2ND LEVEL MSG
MSGIVPDE DC    F'101'               INVALID ADDRESS
         DC    F'208'               INVALID PDE OBTAINED FROM PARSE
MSGIVADR DC    F'101'               INVALID ADDRESS
         DC    F'204'               UNABLE TO CONVERT ADDR TO BINARY
MSGIVRNG DC    F'073'               INVALID RANGE              @YM07108
         DC    F'207'               1ST ADDR OF RNG MUST NOT BE > LAST
MSGIVBRK DC    F'8'                 INVALID BREAKPT ADDR
         DC    F'206'               UNABLE TO LOCATE BREAKPT
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        THIS ROUTINE CONVERTS HEXIDECIMAL INPUT TO BINARY FORM
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
HEXCVT   DS    0H                  CONVERT THE VALUE TO BINARY
         SPACE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        R1 = THE ADDRESS OF THE EXPRESSION TO BE CONVERTED
*        R3 = THE LENGTH OF THE EXPRESSION
*        REGISTERS USED ARE 1,2,3. ONLY REGISTER 2 IS SAVED.....
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
         ST    R2,REGSVWRK         SAVE THE CURRENT VALUE OF R2
         STH   R3,TEMCTWRK         SAVE THE COUNT FOR LATTER USE
         BCTR  R3,N0               DECREMENT R3 FOR EXECUTION OF MOVE
         EX    R3,MOVEHEX          PLACE THE STRING IN THE WORKAREA
         LR    R1,R3               R1= LENGTH TO BE CONVERTED
         XR    R3,R3               ZERO REGISTER THREE
         XR    R2,R2               ZERO REGISTER 0
HEX0020  DS    0H                  START OF LOOP OF CONVERSION
         IC    R2,CONVTWRK(R1)     R2= RIGHT HAND CHARACTER OF STRING
         CH    R2,HEXCVTC7         IS THE CHARACTER A THRU F
         BH    HEX0040             NO THEREFORE NEED LOWER HALF BYTE
         LA    R2,HEX09(R2)        INCREMENT LOWER HALF BYTE
HEX0040  DS    0H                  R1 = PORTION OF CONVERTED NUMBER
         SRDL  R2,N4               PLACE NUMERIC PORTION INTO R3
         BCTR  R1,N0               DECREMENT R1 FOR LOOPING
         LTR   R1,R1               IS THERE MORE OF THE STRING
         BNM   HEX0020             YES CONTINUE UNTIL STRING EMPTY
         LH    R2,TEMCTWRK         R2= ORIGINAL LENGTH OF LIST
         SLL   R2,N2               MULTIPLY LENGTH BY FOUR
         LA    R1,N32              R1= NUMERIC 32 (DECIMAL)
         SR    R1,R2               R1= 32-(LENGTH*4)
         SRL   R3,N0(R1)           R3= CONVERTED NUMBER IN LOWER HALF
         LR    R1,R3               R1= VALUE OF CONVERT HEX NUMBER
         L     R2,REGSVWRK         RESTORE THE VALUE OF R2
         BR    R14                 RETURN TO THE CALLER
MOVEHEX  MVC   CONVTWRK(N0),N0(R1) MOVE STRING TO WORKAREA
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        THIS ROUTINE CONVERTS DECIMAL INPUT TO BINARY FORM
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
DECCVT   DS    0H                  CONVERT THE VALUE TO BINARY
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        R1 = THE ADDRESS OF THE EXPRESSION TO BE CONVERTED
*        R3 = THE LENGTH OF THE EXPRESSION
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
         BCTR  R3,N0               DECREMENT R3 FOR EXECUTION OF PACK
         EX    R3,DECPACK          PACK THE EXPRESSION
         CVB   R1,CONVTWRK         R1= EXPRESSION CONVERTED TO BINARY
         BR    R14                 RETURN TO THE CALLER
DECPACK  PACK  CONVTWRK(N8),N0(N0,R1) PACK INTO THE WORKAREA
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        THE STAE MACRO, RETRY ROUTINE, AND ABEND TABLE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
STAELIST ESTAE MF=L                LIST FORM OF ESTAE MACRO
STAELN   EQU   *-STAELIST          END OF STAE EXPANSION
ABENDTAB DS    0H                  THE ABEND TABLE FOR STAE
         DC    X'63'               CORRECT MESSAGE POINTER
         DC    AL3(SMTPARS)        EXPAND
         DC    X'FF'               END OF TABLE INDICATOR
****     THE BEGINING OF THE RETRY ROUTINE
RETRYRTN DS    0H                  THE RETRY ROUTINE
         L     R5,CVTPTR           R5= ADDR OF THE CVT
         USING CVT,R5              ESTABLISH ADDR'ABILITY TO THE CVT
         L     R1,CVTTCBP          R1= ADDR OF NEW CURRENT TCB'S
         L     R5,N4(,R1)          R5= ADDR OF CURRENT TCB (TEST TCB)
         DROP  R5                  RELEASE ADDR'ABILITY TO THE CVT
         USING TCB,R5              ESTABLISH ADDR'ABILITY TO THE TCB
         L     R9,TCBTRN           R9= ADDR OF TCOMTAB (RESTORE)
         DROP  R5                  RELEASE ADDR'ABILITY TO TCB
****     REESTABLISH ADDRESSABILITY TO OFF WORKAREA
         L     R8,WORKAREA         R8= ADDR OF GENERAL WORKAREA
         USING TSTCWORK,R8         ADDR'ABILITY TO TSTCWORK
         LA    R10,CWORKCMD        R10= ADDRESS OF OFF'S WORKAREA
         DROP  R8                  RELEASE ADDRABILITY
         USING OFFWORKA,R10        COMPLETE ADDRABILITY
         TM    VCKSWWRK,VCKONWRK   CURRENTLY IN VALIDITY CHECK
         BO    STA0000             WE ARE IN VALIDITY CHECK ROUTINE
         L     R13,REGSAVE2        R13= ADDR OF REGULAR SAVEAREA
         B     STA0020             CONTINUE STAE PROCESSING
STA0000  DS    0H                  IN VALIDITY CHECK
         L     R13,REGSAVE3        R13= ADDR OF VALIDITY CHECK SAVEAREA
STA0020  DS    0H                  CONTINUE RESTORING INSTRUCTION
         LM    R14,R12,N12(R13)    RESTORE ALL REGISTERS FOR OFF
         SPACE
****     CHECK IF WE ARE CURRENTLY IN THE VALIDITY CHECK ROUTINE
         LA    R15,N20             R15= DEC 20 (RETURN CODE)
         TM    VCKSWWRK,VCKONWRK   CURRENTLY IN VALIDITY CHECK
         NI    TSTFLGS4,HEXFF-TSTRERTN TURN OFF RETRY INDICATOR
         BO    VCK0120             RETURN TO PARSE WITH 12
         B     OFF0320             RETURN TO CALLER (MAINLINE)
ADDRETRY DC    A(RETRYRTN)         ADDRESS OF RETRY ROUTINE
LIST     IKJEGSPL RTRY=RETRYRTN,ABNTB=ABENDTAB,MODNM=IKJEGOFF,TNM=OFF
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*          CONSTANTS USED BY THE OFF COMMAND
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         DS    0F                  ALIGNMENT
TWELVE   DC    F'12'              CONSTANT USED TO CHECK RETURN CODES
MASKF8   DC    X'00FFFFF8'         MASK TO ZERO TOP BYTE LOWER 3 BITS
ZEROS    DC    X'00000000'         FULL WORD OF ZEROS
SUBPOOL1 DC    X'01000000'         SUBPOOL ONE
HEXCVTC7 DC    X'00C7'             FIRST HEX ALPHA NOT ACCEPTABLE
PLUSIGN  DC    X'004E'             PLUS SIGN
TEXTPLUS EQU   C'+'                PLUS SIGN FOR THE ERROR MESSAGES
DCBOFLGS EQU   X'30'               DISPLACEMENT IN TSTSYMWK TO DCB ADDR
SUPERZAP DC    50CL1'Z'            PATCH AREA
         SPACE 2
****     PCL   ADDRESS VCON
PCLADDR  DC    V(IKJEGPCL)         ADDRESS OF THE PCL CSECT
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        PARSE PARMETER CONTROL LIST
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
IKJEGPCL IKJPARM
GETADDR  IKJPOSIT ADDRESS,LIST,RANGE,VALIDCK=IKJEGVCK
         IKJENDP
         EJECT
         EJECT
************************************************************
**                                                        **
**                  TCOMTAB DSECT                         **
**                                                        **
************************************************************
TCOMTAB TCOMTAB
         EJECT
************************************************************
**                                                        **
**                TCB DSECT                               **
**                                                        **
************************************************************
          IKJTCB
************************************************************
**                                                        **
**             CVT DSECT MACRO EXPANSION                  **
**                                                        **
************************************************************
CVT      DSECT
         CVT
         EJECT
************************************************************
**                                                        **
**                  RB DSECT                              **
**                                                        **
************************************************************
         SPACE
         IKJRB               REQUEST BLOCK DSECT
         EJECT
         IKJEGDME            DEFERED BREAKELEMENT
         SPACE
         IKJEGDBE            DEFERED MODULE ELEMENT
         EJECT
************************************************************
**                                                        **
**                     BREAKPOINT QUEUE DSECT             **
**                                                        **
************************************************************
         BRKELEM
         EJECT
************************************************************
**                                                        **
**             DSECT DESCRIBING  PARSE ADDR*SS PDE        **
**                                                        **
************************************************************
         IKJPARMA
         EJECT
************************************************************
**                                                        **
**                           WORKAREA DSECT               **
**                                                        **
************************************************************
OFFWORKA DSECT                     DSECT TO ADDRESS OFF'S WORKAREA
STAEWRK  DS    3F                  STAE EXPANSION AREA
PPLWRK   DS    7F                  PARSE'S PPL EXPANSION AREA
REG14WRK DS    1F                  TEMPORARY SAVE AREA FOR REG 14
RETCDWRK DS    A                   RETURN CODE SAVE AREA
DBEPDWRK DS    A                   SAVE AREA FOR DBE-PDE ADDRESS
PARETWRK DS    A                   VALIDITY CK RETURN CD
DBESVWRK DS    A                   VALIDITY CK CSECT SEARCH RESUME ADDR
DBESMWRK DS    1F                  DBE SUM OF THE EXPRESSION VALUES
PDESMWRK DS    1F                  PDE SUM OF THE EXPRESSION VALUES
DBESNWRK DS    H                   DBE SIGN OF NEXT EXPRESSION
PDESNWRK DS    H                   PDE SIGN OF NEXT EXPRESSION
DBEXPWRK DS    A                   DBE RESUME EXPRESSION POINTER
DMEBKWRK DS    A                   PREVIOUS DME ENCOUNTERED IN SEARCH
DBEBKWRK DS    A                   PREVIOUS DBE ENCOUNTERED IN SEARCH
DBEIDWRK DS    H                   DBE INDIRECT COUNT
PDEIDWRK DS    H                   PDE INDIRECT COUNT
CHNGSWRK DS    1X                  SWITCH INDICATES WHAT'S BEEN REMOVED
VCKRMWRK EQU   X'08'               SW TO VALIDITY CK INDICATING REMOVAL
REMOVWRK EQU   X'02'               SW TO MAIN RTN INDICATING REMOVAL
VCKSWWRK DS    1X                  SW INDICATING IN VALIDITY ROUTINE
RANSWWRK EQU   X'04'               INDICATES RANGE IN PROCESS
VCKONWRK EQU   X'08'               SW IS ON AT PRESENT
TEMCTWRK DS    2X                  TEMPORARY COUNT FOR HEXCVT
CONVTWRK DS    D                   DOUBLE WORD USED BY CONVERSION RTN'S
DCBARWRK DS    F                   TEMPORARY AREA FOR DCB ADDRESS
PUTREWRK DS    F                   PUT MESSAGE RETURN REGISTER
SRHAWRK  DS    0F                  PARAMETER AREA FOR SEARCH ROUTINE
SRH1WRK  DS    1F                  FIRST WORD FOR FLAGS
SRH2WRK  DS    1F                  SECOND WORD FOR BEGINNING ADDRESS
SRH3WRK  DS    1F                  THIRD WORD FOR ENDING ADDR (OR ZERO)
REGSVWRK DS    1F                  TEMP SAVE AREA FOR A REGISTER
         EJECT
         IKJPPL               PARSE PARAMETER LIST DSECT
         EJECT
         TSTCWORK             TEST WORKAREA DSECT
         EJECT
************************************************************
**         DEFER QUEUE  PDE                               **
************************************************************
DBEPDECT DSECT                     DSECT USED TO ADDR PDE ON DEFERRED Q
*
DBELDNAM DS    A                   POINTER TO LOADNAME
DBELEN1  DS    H                   LENGTH OF LOADNAME
DBEFLG1  DS    X                   FLAG FOR LOADNAME
DBERSV1  DS    X                   NOT USED
DBECTNAM DS    A                   POINTER TO ENTRYNAME
DBELEN2  DS    H                   LENGTH OF ENTRYNAME
DBEFLG2  DS    X                   FLAG FOR ENTRY NAME
DBERSV2  DS    X                   NOT USED
DBEADRPT DS    A                   POINTER TO THE ADDRESS STRING
DBELEN3  DS    H                   LENGTH OF ADDRESS STRING
DBEFLG3  DS    X                   FLAG FOR THE ADDRESS STRING
DBERSV3  DS    X                   NOT USED
DBEFLG4  DS    X                   ADDRESS TYPE FLAG
DBESIGN  DS    C                   EXPRESSION SIGN
DBEINDCT DS    H                   INDIRECT COUNT
DBEEXPTR DS    A                   POINTER TO FIRST EXPRESSION PDE
DBEFLG5  DS    0X                  FLAG BYTE PDEUSER WORD
DBEUSER  DS    A                   RESOLVED ADDR OR SIB POINTER
DBECHAIN DS    A                   CHAIN POINTER FOR ADDR LIST
         ORG   DBECHAIN            RANGE
DBE2LDNA DS    A                   POINTER TO LOADNAME
DBE2LEN1 DS    H                   LENGTH OF LOADNAME
DBE2FLG1 DS    X                   FLAG FOR LOADNAME
DBE2RSV1 DS    X                   NOT USED
DBE2CTNA DS    A                   POINTER TO ENTRYNAME
DBE2LEN2 DS    H                   LENGTH OF ENTRYNAME
DBE2FLG2 DS    X                   FLAG FOR ENTRY NAME
DBE2RSV2 DS    X                   NOT USED
DBE2ADRP DS    A                   POINTER TO THE ADDRESS STRING
DBE2LEN3 DS    H                   LENGTH OF ADDRESS STRING
DBE2FLG3 DS    X                   FLAG FOR THE ADDRESS STRING
DBE2RSV3 DS    X                   NOT USED
DBE2FLG4 DS    X                   ADDRESS TYPE FLAG
DBE2SIGN DS    C                   EXPRESSION SIGN
DBE2INDC DS    H                   INDIRECT COUNT
DBE2EXPT DS    A                   POINTER TO FIRST EXPRESSION PDE
DBE2FLG5 DS    0X                  FLAG BYTE PDEUSER WORD
DBE2USER DS    A                   RESOLVED ADDR OR SIB POINTER
DBE2CHAI DS    A                   CHAIN POINTER FOR ADDR LIST
         EJECT
         EXPRPDE
         END
