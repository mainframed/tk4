         TITLE 'IKJEGSTA'
* /* START OF SPECIFICATIONS ****
*02*  PROCESSOR = ASSEMBLER
**** END OF SPECIFICATIONS ***/
         COPY IKJEGSIO
*c177600                                                       @ZA00918
*C173000,266220                                                @ZA04792
*C001690-001700                                                @ZA07737
********************************************************************
*                                                                  *
* STATUS                                                           *
*    CHANGE LEVEL 000, VERSION 01, OS/VS2                          *
*                                                                  *
* FUNCTION/OPERATION                                               *
*    THIS ROUTINE IS GIVEN CONTROL WHEN AN ABEND SITUATION OCCURS  *
*    IN ANY OF THE TEST COMMAND MODULES. UNLESS THE 'NO MESSAGES'  *
*    OPTION IS REQUESTED, IT WILL INITIALIZE TO PRINT A STANDARD   *
*    1ST AND 2ND LEVEL MESSAGE. THE 1ST LEVEL MESSAGE WILL HAVE    *
*    THE NAME OF THE ABENDING COMMAND MODULE INSERTED.  THE SECOND *
*    LEVEL MSG WILL HAVE AN APPROPRIATE ERROR DESCRIPTION APPENDED.*
*    OBTAINS ADDRESS OF APPROPRIATE RETRY ROUTINE FROM THE ESTAE   *
*    PARAMETER LIST WHICH IS MADE AVAILABLE VIA THE 'LIST' KEYWORD *
*    OF THE ESTAE MACRO, AND PASSES THE ADDRESS BACK TO THE        *
*    ABEND/STAE INTERFACE ROUTINE.                                 *
* ENTRY POINTS                                                     *
*         IKJEGSTA                                                 *
*                                                                  *
* INPUT                                                            *
*                                                                  *
* OUTPUT                                                           *
*    1.  ERROR MESSAGES TO THE MESSAGE WRITER                      *
*    2.  RETURN CODE - R15                                         *
*    *              0     TO INDICATE THAT ABEND PROCESSING SHOULD *
*    *                    CONTINUE. (THIS RETURN CODE RESULTS WHEN *
*    *                    EITHER TCOMTAB WAS FREED PRIOR TO ENTRY  *
*    *                    TO THIS ROUTINE OR AN ERROR WAS ENCOUNT- *
*    *                    ERED BY IKJEGIO1 WHEN CALLED TO WRITE    *
*    *                    OUT MESSAGES.)                           *
*    *              4     TO INDICATE THAT CONTROL IS TO BE GIVEN  *
*    *                    TO A RETRY ROUTINE.                      *
*    3.  R0 = ADDRESS OF RETRY ROUTINE
*                                                                  *
* EXTERNAL REFERENCES                                              *
*         IKJEGIO  - OUTPUTS ERROR MESSAGES. INVOKED BY THE        *
*         *          IKJEGSIO MACRO.                               *
*         IKJEGSCD - USED IN SEARCH FOR NAME OF ABENDING MODULE.   *
*                                                                  *
* EXITS,NORMAL                                                     *
*         RETURN VIA REGISTER 14 TO THE CALLER                     *
*                                                                  *
* EXITS,ERROR                                                      *
*         RETURN VIA REGISTER 14 TO THE CALLER                     *
*                                                                  *
* TABLES/WORK AREAS                                                *
*    TCOMTAB                                                       *
*    STAWORK - STAE WORK AREA                                      *
*                                                                  *
* ATTRIBUTES                                                       *
*    REENTRANT                                                     *
*                                                                  *
* CHARACTER CODE DEPENDENCY                                        *
*    THE OPERATION OF THIS MODULE DEPENDS UPON AN INTERNAL         *
*    REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS         *
*    EQUIVALENT TO THE ONE USED AT ASSEMBLY TIME. THE CODING HAS   *
*    BEEN ARRANGED SO THAT REDEFINITION OF 'CHARACTER' CONSTANTS,  *
*    BY REASSEMBLY, WILL RESULT IN A CORRECT MODULE FOR THE NEW    *
*    DEFINITIONS.                                                  *
*                                                                  *
* NOTES                                                            *
*    1.  AT ENTRY, THE REGISTER CONTENTS WILL BE -                 *
*    * 1A. IF A 512-BYTE WORKAREA IS AVAILABLE...                  *
*    *     REG0 = 0   ACTIVE I/O WAS QUISCED AND IS RESTORABLE     *
*    *            4   ACTIVE I/O WAS HALTED AND IS NOT RESTORABLE  *
*    *            8   NO I/O WAS ACTIVE                            *
*    *                                                             *
*    *     REG1 = PTR TO 512 BYTE WORK AREA                        *
*    *     REGS 2-12 = UNPREDICTABLE                               *
*    *     REG13 = ADDR OF A REG SAVE AREA                         *
*    *     REG14 = RETURN ADDR                                     *
*    *     REG15 = ADDR OF STAE EXIT ROUTINE                       *
*                                                                  *
*    * 1B. IF STORAGE FOR THE 512-BYTE WORKAREA WAS NOT AVAILABLE..*
*    *     REG0  = 12                                              *
*    *     REG1  = ABEND COMPLETION CODE                           *
*    *     REG2  = PTR TO STAE EXIT PARAM LIST                     *
*    *     REGS 3-12 = SAME AS ABOVE                               *
*    *     REG13 = UNPREDICTABLE                                   *
*    *     REGS 14-15 = SAME AS ABOVE                              *
*                                                                  *
*    2.  AT EXIT, THE REGISTER CONTENTS WILL BE -                  *
*                                                                  *
*    *     REG0  = ADDRESS OF RETRY ROUTINE                        *
*    *     REG1  = ADDR OF WORK AREA OR ZERO IF NOT AVAILABLE      *
*    *     REGS 2-12 = UNPREDICTABLE                               *
*    *     REGS 13-14 = SAME AS AT ENTRY                           *
*    *     REG15= RETURN CODE OF 4                                 *
*    3.  PLM = SY35-0004                                           *
*    *     TSO COMMAND PROCESSOR LOGIC                             *
*    *     VOLUME III - TEST                                       *
*                                                                  *
********************************************************************
*    CHANGE ACTIVITY:                                              *
*        @AZ17298 - REMOVED JOB STEP DEPENDENCY FOR TEST.          *
********************************************************************
         EJECT
IKJEGSTA CSECT
******************************************************************
*
*        REGISTER EQUATES
*
R0       EQU   0                   REFLECTS STATUS OF TASK/WORKAREA
R1       EQU   1                   COMPLETION CODE / WORKAREA PTR
R2       EQU   2                   PTR TO PARM LIST
R3       EQU   3                   WORK REG
R4       EQU   4                   *
R5       EQU   5                   *
R6       EQU   6                   *
R7       EQU   7                   *
R8       EQU   8                   *
R9       EQU   9                   TCOMTAB BASE REG
R10      EQU   10                  STA WORKAREA BASE
R11      EQU   11                  MODULE BASE REG
R13      EQU   13                  SAVE AREA PTR
R12      EQU   12                  NOT USED
R14      EQU   14                  RETURN ADDR
R15      EQU   15                  STAE ADDR
*
******************************************************************
         SPACE 2
******************************************************************
*
*        SYMBOL AND NUMBER EQUATES
*
ZERO     EQU   0                   NO. 0
ONE      EQU   1                   NO. 1
TWO      EQU   2                   NO. 2
THREE    EQU   3                   NO. 3
FOUR     EQU   4                   NO. 4
TCBADDR  EQU   4                   DISPLACEMENT FOR TEST'S TCB ADDR
FIVE     EQU   5                   NO. 5
SIX      EQU   6                   NO. 6
SEVEN    EQU   7                   NO. 7
EIGHT    EQU   8                   NO. 8 (DISPL FOR 1ST LEVEL MSG)
NINE     EQU   9                   NO. 9
TEN      EQU   10                  NO. 10
TWELVE   EQU   12                  NO. 12
THIRTN   EQU   13                  NO. 13
N15      EQU   15                  NO. 15
SIXTEEN  EQU   16                  CVT DISPL
TWENTY2  EQU   22                  NO. 22
TWENTY4  EQU   24                  NO. 24
TWENTY9  EQU   29                  NO. 29
THIRTY5  EQU   35                  NO. 35
THIRTY7  EQU   37                  NO. 37
THIRTY8  EQU   38                  NO. 38
FORTY4   EQU   44                  NO. 44
FORTY5   EQU   45                  NO. 45
FIFTY3   EQU   53                  NO. 53
SIXTY9   EQU   69                  NO. 69
EIGHTY1  EQU   81                  NO. 81
NINETY3  EQU   93                  NO. 93
NINETY5  EQU   95                  NO. 95
HEX00    EQU   X'00'               'NO MESSAGE' CODE
HEX07    EQU   7                   NO. 7
BLANK    EQU   X'40'               BLANK
HEX80    EQU   X'80'               NO. 80
RBOK     EQU   X'C0'               INDICATES A PRB
HEXF0    EQU   X'F0'               MASK TO SET SIGN BYTE
HEXFF    EQU   X'FF'               MASK BYTE FOR ABEND COMPL CODE
*
******************************************************************
         EJECT
*        START OF MODULE CODE
*
         LR    R11,R15             SET UP MODULE ADDRESSABILITY
         USING IKJEGSTA,R11
         SPACE
         L     R8,CVTPTR           ADDR OF CVT
         USING CVTDSECT,R8         ADDRESSABILITY TO CVT
         L     R8,CVTTCBP          PTR TO TCB ADDR
         DROP  R8
         L     R8,TCBADDR(ZERO,R8) TCB ADDR
         SPACE
         USING TCB,R8              ADDRESSABILITY TO TCB
*        L     R4,TCBJSTCB        GET JOB STEP TCB ADDR    @ZA06995
*                                 DELETED                  @ZA17298
*        DROP  R8                 DELETED                  @ZA17298
*        USING TCB,R4             DELETED                  @ZA17298
         SLR   R9,R9               TCBTRN FIELD OF TEST'S TCB  @ZA07737
         ICM   R9,HEX07,TCBTRN+1   CONTAINS PTR TO TCOMTAB     @ZA07737
*        DROP  R4                 DELETED                  @ZA17298
*        USING TCB,R8             DELETED                  @ZA17298
         SPACE
***********************************************************************
*  CHECK TO DETERMINE IF THE TCOMTAB HAS BEEN FREED.  IF SO, ISSUE    *
*  THE 'SETRP' MACRO AND PERCOLATE.                                   *
***********************************************************************
         LTR   R9,R9               CHECK IF TCOMTAB HAS BEEN FREED
         BZ    OOPS            IF SO, RECORD IN LOGREC AND RETURN
*                                                              @ZA04792
         SPACE
         USING TCOMTAB,R9          ADDRESSABILITY TO COMMUNICATION AREA
*
         SPACE
         LR    R4,R0               SAVE R0                     ZXCZXCZX
         LR    R3,R1               SAVE R1                     ZXCZXCZX
         L     R0,SAVELNGH         R0 = SAVE AREA LENGTH       ZXCZXCZX
         GETMAIN RU,LV=(0),SP=78   GETMAIN FOR NEW SAVEAREA CHAIN.
         L     R10,WORKAREA        ADDRESS OF COMMON WORK AREA
         USING TSTCWORK,R10        ESTABLISH ADDRESSABILITY
         SPACE
         LA    R10,CWORKSTA        R10 = ADDR OF STAE'S WORK AREA
         DROP  R10
         SPACE
         USING STAWORK,R10         ESTABLISH ADDRESSABILITY
         MVC   FLAGS4(ONE),TSTFLGS4     PRESERVE TSTFLGS4 UNTIL EXIT
         NI    TSTFLGS4,HEXFF-TSTVALCK  TURN OFF VALIDITY CK INDICATOR
         ST    R8,TCBPTR           SAVE TCB ADDRESS
         SPACE
         STM   R13,R14,REGSAV      SAVE REGS 13 AND 14
         LR    R13,R1              R13=ADDR NEW SAVEAREA CHAIN ZXCZXCZX
         LR    R1,R3               RESTORE R1 TO RTCA          ZXCZXCZX
         LR    R0,R4               RESTORE R0                  ZXCZXCZX
         L     R3,ECBTST           GET PTR TO TEST DESPATCHABILITY ECB
         TM    ZERO(R3),HEX80      IS SVC 97 OR 61 ACTIVE
         BZ    CKRETRY             NO - GO CHECK FOR RETRY FAILURE
         OI    FLAGS,SVCFAIL       INDICATE SVC 97 OR 61 FAILURE
         SPACE
***********************************************************************
*  CHECK TO DETERMINE IF RETRY WAS IN PROCESS OR IF I/O WAS TRYING TO
*  SERVICE  AN ESTAE REQUEST WHEN THE ABEND OCCURRED
***********************************************************************
CKRETRY  DS    0H
         TM    TSTFLGS4,TSTRERTN   WAS A RETRY IN PROCESS
         BNZ   DETERMN             IF SO, TURN OFF FLAGS AND PERCOLATE
         SPACE
***********************************************************************
*  DETERMINE IF THE SYSTEM SUCCEEDED IN ESTABLISHING THE RTCA
*  (RECOVERY TERMINATION COMMUNICATION AREA)
***********************************************************************
         LA    R3,TWELVE           GET DECIMAL TWELVE
         CR    R0,R3               DO WE HAVE HAVE THE RTCA
         BE    FINDRB              NO - WE MUST GET INFORMATION ELSEWHR
         B     HAVRTCA             YES
         SPACE 2
***********************************************************************
*  DETERMINE IF THE RTCA IS AVAILABLE FOR RECORDING
*  IF THERE IS NO RTCA, THERE CAN BE NO RECORDING
***********************************************************************
NOTCOMTB DS    0H
DETERMN  DS    0H
         LA    R3,TWELVE           GET DECIMAL TWELVE
         CR    R0,R3               DO WE HAVE HAVE THE RTCA
         BE    PERCOLA1            NO, GO SKIP RECORDING AND PERCOLATE
         B     PERCOLAT            OTHERWISE, RECORD AND PERCOLATE
         EJECT
*****************************************************************
*                                                               *
*        THE OPSW ENTRY IN THE HIGHEST RB ON THE CHAIN, AFTER   *
*        THE FIRST SVRB/SIRB, WILL CONTAIN THE ABENDING         *
*        MODULE'S PSW IC. (IF THIS RB IS ASSOCIATED WITH A      *
*        MODULE THAT IS BEING FETCHED, THE NEXT LOWER RB WILL   *
*        BE USED).  THIS IC WILL BE COMPARED WITH THE IC TABLE  *
*        OF THE LAST MODULE TO ISSUE THE STAE MACRO. A POINTER  *
*        TO THIS TABLE IS FOUND IN TCOMTAB AT THE ABENTAB OR    *
*        ABENTAB1 ENTRIES.                                      *
*                                                               *
*****************************************************************
         SPACE 2
FINDRB   DS    0H
         NI    FLAGS,RTCAN         INDICATE THAT RTCA DOES NOT EXIST
         ST    R2,PARMLST@         SAVE PARAM LIST ADDRESS
         DROP  R8
         LR    R2,R8               GET TCB ADDRESS
         USING TCB,R2              RESTABLISH ADDRESSABILITY TO TCB
         L     R3,TCBRBP           GET PTR TO FIRST RB
         USING RBSECT,R3           SET UP ADDRESSABILITY
         ST    R3,SVRB@            SAVE LAST SVRB ADDRESS
         SPACE
SVRBCHK  TM    RBSTAB1,RBFTSIRB    IS THIS AN SVRB/SIRB
         BO    RBCHK               YES...GO FIND FIRST RB
         ST    R3,SVRB@            SAVE LAST SVRB ADDRESS
         SPACE
         L     R3,RBLINK           CHECK AGAIN
         B     SVRBCHK             CHECK AGAIN
         SPACE
RBCHK    TM    RBSTAB1,RBFTP       IS RB A PRB
         BZ    GETIC               YES...
         ST    R3,SVRB@            SAVE LAST SVRB ADDRESS
         L     R3,RBLINK           GET PTR TO NEXT RB
         B     RBCHK               CHECK AGAIN
         SPACE
GETIC    EQU   *
         TM    FLAGS,SVCFAIL       ARE WE PROCESSING AN SVC ABEND
         BZ    GETCDE              NO - GO GET CDE POINTER
         L     R3,SVRB@            GET SVRB ADDRESS
         B     GETAPSW             GO GET PSW
GETCDE   DS    0H
         L     R4,RBCDE            GET CDE ADDR
         LTR   R4,R4               IS IT ZERO
         BZ    NEXTRB              YES...USE NEXT RB
         SPACE
         USING CDENTRY,R4          ESTABLISH ADDRESSABILITY TO CDE
         TM    CDATTR,BLANK        CHECK FOR 'HEX 40'--MODULE IS
*                                  BEING FETCHED
         BZ    GETAPSW             NO...USE THIS RB
         DROP  R4                  RELEASE CDE BASE REGISTER
         SPACE
NEXTRB   L     R3,RBLINK           GET NEXT LOWER RB
         SPACE
* R3 CONTAINS THE CORRECT RB ADDRESS
GETAPSW  LA    R4,RBABOPSW         GET APSW LOCATION OF RB
         L     R5,ZERO(ZERO,R4)    GET APSW ITSELF
         LTR   R5,R5               IS IT ZERO
         BNZ   USEAPSW             NO...APSW = OPSW
         SPACE
         LA    R4,RBOPSW+FOUR      USE RIGHT HALF OF ABENDING
*                                  MODULE'S PSW
         DROP  R3
USEAPSW  LA    R3,0(ZERO,R4)       PTR TO IC
         SPACE
         SPACE
         BAL   R14,INSERT          BUILD FIRST LEVEL MESSAGE
         SPACE
         L     R5,PARMLST@         GET PARAM LIST ADDRESS
         L     R5,ABENTAB@-LIST(R5)     GET ADDRESS OF ABEND TABLE
         LTR   R5,R5               IS ABENTAB1 = 0  (IF SO, THERE
*                                  IS NO COMMAND MODULE IN CORE)
         BZ    SRCHABTB            SET UP TO SEARCH ABENTAB
         SPACE
         BAL   R14,SEARCH          SEARCH IC'S OF USER'S ABEND TABLE
         SPACE
SRCHABTB L     R5,ABENTAB          GET ADDR OF RESIDENT IC TABLE
SRCH2    DS    0H
         BAL   R14,SEARCH          SEARCH IC'S OF ABENTAB
         B     MSGIO               GO ISSUE MESSAGES
         SPACE 6
***********************************************************************
*  GET INFORMATION FORM THE RTCA AS FOLLOWS:
*  DETERMINE IF PERCOLATION HAS OCCURRED;
*  GET PARAM LIST ADDRESS;
*  GET ABEND INSTRUCTION COUNTER.
***********************************************************************
HAVRTCA  DS    0H
         USING SDWA,R1             ESTABLISH ADDR TO RTCA(SDWA)
         ST    R1,RTCA@            SAVE ADDRESS OF THE RTCA
         TM    SDWAERRC,SDWAPERC   IS THIS EXIT RTN BEING PERCOLATED TO
         BZ    INDICATE            NO - GO INDICATE EXISTENCE OF RTCA
         OI    TSTFLGS4,TSTPERC    INDICATE THAT PERCOLATION HAPPENED
*        B     RETURN              GO ALLOW RETRY TO BE ATTEMPTED
INDICATE OI    FLAGS,RTCA          INDICATE THAT RTCA EXISTS
         MVC   PARMLST@(FOUR),SDWAPARM  GET PARAM LIST ADDRESS
         LA    R4,SDWANXTA         GET INSTRUCTION COUNTER POINTER
         LA    R3,ZERO(ZERO,R4)    PTR TO IC
         N     R3,MASKUP           POINT TO FULL WORD BOUNDARY
*
         BAL   R14,INSERT          BUILD FIRST LEVEL MESSAGE
         L     R5,PARMLST@         GET PARAM LIST ADDRESS
         CLC   MODNAME-LIST(EIGHT,R5),SVC97  DID SVC 97 ABEND  ZXCZXCZX
         BE    INDSVC              YES SET SVC FLAG            ZXCZXCZX
         CLC   MODNAME-LIST(EIGHT,R5),SVC61  DID SVC 61 ABEND  ZXCZXCZX
         BE    INDSVC              YES SET SVC FLAG            ZXCZXCZX
CONTABND DS    0H                  CONTINUE                    ZXCZXCZX
         L     R5,ABENTAB@-LIST(R5)     GET ADDRESS OF ABEND TABLE
         LTR   R5,R5               DID MODULE PROVIDE ABEND TABLE
         BZ    SRCHABTB            IF NOT, SEARCH RESIDENT TABLE
         B     SRCH2               GO SEARCH MODULE ABEND TABLE
         SPACE
INDSVC   DS    0H                  SET SVCFLAG INDICATING SVCS FAILED
         OI    FLAGS,SVCFAIL       SET THE FLAG                ZXCZXCZX
         B     CONTABND            CONTINUE                    ZXCZXCZX
         EJECT
         SPACE 6
RETURN   EQU   *                   RETURN FOR RETRY
         MVC   TSTFLGS4(ONE),FLAGS4     RESTORE TSTFLGS4
         NI    TSTFLGS4,HEXFF-TSTESTAE I/O FINISHED ESATE REQUEST
         OI    TSTFLGS4,TSTRERTN   INDICATE RETRY BENIG ATTEMPTED
         LA    R15,FOUR            INDICATE CONTROL TO BE GIVEN
*                                  TO RETRY ROUTINE
         L     R1,PARMLST@         GET ADDR OF PARAM LIST
         L     R0,ZERO(R1)         GET ADDR OF RETRY ROUTINE
         L     R1,RTCA@            GET ADDR OF 152-BYTE WORKAREA
         LR    R7,R13              SAVE ADDR OF CORE TO FREE  @ZAZZZZZ
         LM    R13,R14,REGSAV      RESTORE SAVE AND RETURN REGS
         TM    FLAGS,SVCFAIL       DID THE SVCS FAIL.
         BO    NOSETRP             YES DO NOT ISSUE SETRP      ZXCZXCZX
         SETRP RETADDR=(R0),RECORD=YES,FRESDWA=YES,RC=4
NOSETRP  DS    0H                  RETURN.                     ZXCZXCZX
         BAL   R8,FREECORE         GO FREE WORK AREA           @ZAZZZZZ
         BR    R14                 RETURN TO CALLER
         SPACE
PERCOLAT EQU   *
         LR    R7,R13         SAVE ADDR OF CORE TO FREE       @ZAZZZZZ
         LM    R13,R14,REGSAV      RESTORE SAVE AND RETURN REGS
         BAL   R8,FREECORE         FREE WORK AREA              @ZAZZZZZ
         NI    TSTFLGS4,HEXFF-TSTESTAE TURN OFF I/O SERVING ESTAE FLAG
         NI    TSTFLGS4,HEXFF-TSTRERTN TURN OFF RETRY IN PROCESS FLAG
OOPS     LA    R3,TWELVE           GET DECIMAL TWELVE          @ZA04792
         CR    R0,R3               DO WE HAVE HAVE THE RTCA
         BE    PERCOLA1            NO - WE MUST NOT ATTEMPT TO RECORD
         SETRP RECORD=YES,RC=0
PERCOLA1 EQU   *
         SR    R0,R0               SET RETRY ADDRESS TO 0
         SR    R15,R15             SET RETURN CODE TO 0 TO ALLOW
*                                  ABEND TO CONTINUE (PERCOLATION)
         BR    R14                 RETURN TO CALLER
         EJECT
FREECORE EQU   *
*******
*  FREE THE WORK AREA BEFORE EXITING                          @ZAZZZZZ
*      R7 POINTS TO THE CORE TO FREE ON ENTRY                 @ZAZZZZZ
*******
         SPACE 3
         LR    R2,R0         SAVE REG 0 ACROSS THE FREEMAIN   @ZAZZZZZ
         LR    R3,R1         SAVE R1                          @ZAZZZZZ
         LR    R4,R15        SAVE R15                         @ZAZZZZZ
         L     R0,SAVELNGH   R0 = WORK AREA LENGTH            @ZAZZZZZ
         FREEMAIN RU,LV=(0),A=(7),SP=78                        @ZAZZZZZ
         LR    R0,R2         RESTORE REG0                     @ZAZZZZZ
         LR    R1,R3         RESTORE REG1                     @ZAZZZZZ
         LR    R15,R4        RESTORE REG15                    @ZAZZZZZ
         BR    R8            RETURN TO CALLER                 @ZAZZZZZ
         EJECT
**********************************************************************
*                                                                    *
*****    CONSTRUCT INSERT FOR FIRST LEVEL MESSAGE                 ****
*                                                                    *
**********************************************************************
INSERT   EQU   *
         L     R15,OUTBUF          ADDR OF OUTPUT BUFFER
         USING INSERTS,R15         EXTABLISH ADDRESSABILITY TO INSERTS
*                                  DSECT
         SPACE
         TM    FLAGS,SVCFAIL       IS THIS AN SVC 97 OR 61 FAILURE
         BO    MOVSVC              YES - GET SVC INSERT FOR 1ST LEVEL
         SPACE
         SPACE
         TM    TSTFLGS1,ENDSW+RUNSW  TEST FOR 'END' COMMAND
         BM    MOVEND                YES...
         SPACE
         SR    R7,R7               CLEAR REG
         IC    R7,TSTRTYCD         HIGH-ORDER BYTE IS THE
*                                  MODULE ID
         LTR   R7,R7               IF ZERO, NO SUB-COMMAND IN CORE
         BZ    MOVETEST            ZERO...GO INSERT 'TEST'
*                                  INTO 1ST LEVEL MSG
         SPACE
         L     R6,SCDADDR          GET ADDR OF CSECT CONTAINING
*                                  LIST OF MODULE NAMES
         BAL   R7,TSTID            SEARCH LIST
         L     R6,SCDADDR2         GET ADDR OF CSECT CONTAINING
*                                  USERS LIST OF MODULE NAMES
         BAL   R7,TSTID            SEARCH LIST
         B     NOFIND              NOT FOUND
         SPACE
TSTID    SR    R5,R5               CLEAR REG
         SPACE 1
TSTID1   IC    R5,ZERO(ZERO,R6)    GET LENGTH OF MODULE NAME IN
*                                  LIST
         CLI   ZERO(R6),HEXFF      END OF MODULE NAME LIST
         BCR   8,R7                YES...
         SPACE
         SR    R4,R4               CLEAR REG
         IC    R4,ONE(R6,R5)       GET ABBREVIATION LENGTH
         LA    R4,TEN(R4,R5)       DISPLACEMENT OF ID
         AR    R4,R6               ADDRESS OF ID
         CLC   TSTRTYCD(ONE),ZERO(R4) COMPARE ID TO TSTRETRY ID
         SPACE
         BE    FOUND               BRANCH TO ADD NAME TO MSG
         SPACE
         LA    R6,ONE(R4)          BUMP TO NEXT MODULE NAME ENTRY
         B     TSTID               GO CHECK NEXT ID
         SPACE
NOFIND   TM    TSTFLGS1,TSTBUILD   TEST FOR 'DEFER' COMMAND
         BO    MOVDEFER            YES...
         SPACE
         LA    R6,ASSIGN           GET ADDR OF 'ASSIGNMENT'
         B     STA001              GO MOVE NAME
         SPACE
MOVEND   LA    R6,ENDNAME          PTR TO 'END'
         B     STA001              GO MOVE NAME
         SPACE
MOVSVC   LA    R6,SVCMSG           PTR TO 'SVC INSERT'
         B     STA001              GO MOVE INSERT TO BUFFER
         SPACE
MOVDEFER LA    R6,DEFERNM          PTR TO 'DEFER'
         B     STA001              GO MOVE NAME
         SPACE
MOVETEST LA    R6,TSTNAME          GET PTR TO 'TEST'
STA001   DS    0H
         SR    R5,R5               CLEAR REG
         IC    R5,ZERO(ZERO,R6)    GET LENGTH
         SPACE
***********************************************************************
* AT ENTRY TO THIS ROUTINE, REGISTER CONTENT IS ASSUMED TO BE AS      *
* FOLLOWS:                                                            *
* R5 = LENGTH OF NAME TO BE INSERTED                                  *
* R6 = @ CORRECT ENTRY IN MOD LIST                                    *
***********************************************************************
FOUND    DS    0H
         MVI   SUBCMDNM,BLANK     PUT A BLANK AT END OF NAME
         MVC   SUBCMDNM+ONE(TWELVE),SUBCMDNM PLACE BLANKS IN CMD NAME
         BCTR  R5,R0               DECR LENGTH BY ONE FOR MOVE
         EX    R5,MOVENAME         MOVE MODULE NAME INTO INSERT
         MVC   LEN1(FOUR),ZERO4    INITIALIZE CONTROL PORTION OF INSERT
*                                  LEVEL MSG
         LA    R5,SIX(R5)          GET LENGTH OF INSERT
         STC   R5,LEN1+ONE         STORE LENGTH OF COMPLETE INSERT
         SPACE 4
**********************************************************************
* SET UP SECOND LEVEL MESSAGE INSERT FOR THE ENTRY POINT
**********************************************************************
         L     R5,PARMLST@         GET ADDRESS OF PARAM LIST
         USING LIST,R5             ESTABLISH R5 AS PARAM LIST BASE
         UNPK  ENTPOINT(NINE),ENTRYPT(FIVE) UNPACK ENTRY POINT
         TR    ENTPOINT(EIGHT),TAB-HEXF0   TRANSLATE ENTRY POINT
         MVC   LEN2(FOUR),ZERO4    INITIALIZE CONTROL PORTION OF INSERT
         MVI   LEN2+ONE,THIRTN     PLACE LENGTH OF COMPLETE INSERT
         MVI   ENTPOINT+EIGHT,BLANK  PUT A BLANK AT END OF NAME
         DROP  R5                  RELEASE PARAM LIST BASE
         SPACE
**********************************************************************
* SET UP SECOND LEVEL MESSAGE INSERT FOR THE COMPLETION CODE
**********************************************************************
         SPACE
         DROP  R2                  FREE R2 AS BASE
         L     R2,TCBPTR           GET TCB ADDRESS
         USING TCB,R2              REESTABLISH ADDRESSABILITY TO TCB
         SPACE
         UNPK  COMPCODE(THREE),TCBCMPC(TWO)   UNPACK
*                                  COMPLETION CODE
         OI    COMPCODE+TWO,HEXF0   SET SIGN PORTION OF LAST BYTE
         TR    COMPCODE(THREE),TAB-HEXF0   TRANSLATE COMPLETION
*                                            CODE TO PRINTABLE HEX
         MVI   COMPCODE+THREE,BLANK PLACE A BLANK AFTER COMPLETION CODE
         MVC   LEN3(FOUR),ZERO4    INITIALIZE CONTROL PORTION OF INSERT
         MVI   LEN3+ONE,EIGHT      PLACE LENGTH OF COMPLETE INSERT
         SPACE
**********************************************************************
* SET UP SECOND LEVEL MESSAGE INSERT FOR THE INSTRUCTION COUNTER
**********************************************************************
         UNPK  INSTCTR(NINE),ZERO(FIVE,R3)   UNPACK PSW IC
         MVI   INSTCTR+EIGHT,BLANK    CLEAR LAST BYTE
         TR    INSTCTR(EIGHT),TAB-HEXF0   TRANSLATE PSW IC TO
         MVC   LEN4(FOUR),ZERO4    INITIALIZE CONTROL PORITON OF INSERT
         MVI   LEN4+ONE,THIRTN     PLACE LENGTH OF COMPLETE INSERT
         L     R7,ZERO(R3)         GET ACTUAL IC
         LA    R7,0(R7)            CLEAR HIGH ORDER BYTE
         BCTR  R7,R0               ADDR OF LAST BYTE
         BAL   R6,ADDRCHK          CHECK IT
         L     R7,ADDRESS          GET ADDRESS
         SPACE
**********************************************************************
* SET UP SECOND LEVEL MESSAGE INSERT FOR THE INSTRUCTION IMAGE
***********************************************************************
         LA    R6,TWELVE-ONE       BACK UP THE IC A
         SR    R7,R6               TOTAL OF TWELVE BYTES
         BAL   R6,ADDRCHK          CHECK THIS ADDRESS
         L     R7,ADDRESS          GET ADDRESS
         LA    R6,INST25@          GET ADDRESS OF 5TH INSERT
         OI    FLAGS,INSERT25      INDICATE THAT THERE IS A 5TH INSERT
         UNPK  INSTIMGE(THIRTN),ZERO(SEVEN,R7)   UNPACK PORTION
*                                  OF INSTRUCTION IMAGE
         TR    INSTIMGE(TWELVE),TAB-HEXF0   TRANSLATE
         SPACE
         UNPK  INSTIMGE+TWELVE(THIRTN),SIX(SEVEN,R7)   UNPACK REST OF
*                                  THE INSTRUCTION IMAGE
         MVI   INSTIMGE+TWENTY4,BLANK   CLEAR LAST BYTE
         TR    INSTIMGE+TWELVE(TWELVE),TAB-HEXF0  TRANSLATE INSTR IMAGE
*                                  TO PRINTABLE HEX
         MVC   LEN5(FOUR),ZERO4    INITIALIZE CONTROL PORTION OF INSERT
         MVI   LEN5+ONE,TWENTY9    ESTABLISH LEN OF COMPLETE INSERT
RET      BR    R14                 RETURN
         SPACE 1
ADDRCHK  ST    R7,ADDRESS          SAVE ADDRESS
         LTR   R7,R7               IF NOT POSITIVE,
         BNP   NOIMAGE             DON'T PRINT IMAGE.
         L     R5,TCBPQE           ADDRESS DUMMY-PQE
         USING PQESECT,R5
         L     R5,PQEFPQE          ADDRESS OF PQE FOR THIS REGION
         C     R7,PQEREGN          START OF REGION.
         BL    NOIMAGE             DON'T PRINT IMAGE.
         L     R7,PQEREGN          START OF REGION.
         A     R7,PQESIZE          END OF REGION.
         C     R7,ADDRESS          IF ADDRESS IS WITHIN REGION,
         BCR   TWO,R6              RETURN.
*                                  ELSE, DON'T PRINT IMAGE.
         SPACE
NOIMAGE  EQU   *                   DON'T PRINT INSTR IMAGE
         LA    R6,INST25@          GET ADDRESS OF 4TH INSERT
         OI    FLAGS,INSERT25      INDICATE THAT THERE IS A 5TH INSERT
         SR    R7,R7               CLEAR REG7
         IC    R7,OUTRGN           GET TEXT LENGTH
         LA    R7,FIVE(R7)         GET TOTAL LENGTH OF INSERT
         MVC   LEN5(FOUR),ZERO4    INITIALIZE CONTROL PORTION OF INSERT
         STC   R7,LEN5+ONE         STORE TOTAL LENGTH OF INSERT
         LA    R7,OUTRGN+ONE       GET ADDRESS OF INSERT TEXT
         MVC   INSTIMGE(TWENTY2),ZERO(R7) PLACE TEXT INTO INSERT
         B     RET                 RETURN
         EJECT
******************************************************************
*                                                                *
*        IC SEARCH ROUTINE -- THIS ROUTINE WILL COMPARE THE      *
*        ADDRESS PORTION OF THE ABENDING MODULE'S PSW TO THE     *
*        ADDRESSES CONTAINED IN THE IC TABLE. IF A MATCH IS      *
*        FOUND, THE APPROPRIATE MESSAGE WILL BE INSERTED INTO    *
*        THE STANDARD 2ND LEVEL MESSAGE, AND CONTROL GIVEN TO    *
*        THE I/O ROUTINE TO WRITE OUT THE MESSAGES. CONTROL IS   *
*        THEN GIVEN TO THE RETRY ROUTINE.                        *
*        IF NO MATCH IS FOUND, RETURN IS MADE TO THE CALLING     *
*        ROUTINE.                                                *
*                                                                *
*        AT ENTRY-- REG3 = PTR TO ABENDING RB'S OPSW+4           *
*                   REG5 = PTR TO MODULE'S IC TABLE              *
*                                                                *
*        AT EXIT -- REG3 = PTR TO ABENDING RB'S OPSW+4           *
*                   REG5 = PTR TO MODULE'S IC TABLE              *
*                   REG7 = INSERT # CORRESPONDING TO IC TABLE    *
*                          ENTRY                                 *
*                                                                *
******************************************************************
         SPACE 2
SEARCH   EQU   *
         TM    TSTFLGS1,TSTFIRST      IS THIS FLAG ON
         BO    RETURN                 YES - DO NOT PUT OUT A MESSAGE
SEARCH2  EQU   *
         SPACE
         MVC   CODESAV(ONE),ZERO(R5)   GET CODE FROM ENTRY
         CLI   CODESAV,HEXFF       CHECK IF CODE = X'FF' (END OF
*                                  TABLE)
         BE    SRCHOUT             YES...EXIT
         SPACE
         CLC   ONE(THREE,R5),ONE(R3)  COMPARE IC TABLE ENTRY TO
*                                     ABENDING RB'S OPSW+5
         BE    MATCH               BRANCH IF EQUAL
         SPACE
         LA    R5,FOUR(ZERO,R5)    BUMP TO NEXT IC TABLE ENTRY
         B     SEARCH2             COMPARE THIS NEXT ENTRY
         SPACE
MOVEXCTL DS    0H
         SR    R7,R7               CLEAR INSERT NUMBER REGISTER
         IC    R7,MSGXCTL          GET NUMBER OF XCTL MSG INSERT
         B     MOVEINIT            INDICATE THAT THERE IS A 6TH INSERT
         SPACE
MATCH    CLI   CODESAV,HEX00       IS IC CODE = 0
         BE    RETURN              YES...NO MESSAGES, GO TO RETRY
         SPACE
         SR    R7,R7               CLEAR REG
         IC    R7,CODESAV          GET CODE
MOVEINIT DS    0H
         OI    FLAGS,INSERT26      INDICATE 6TH INSERT EXISTS
         SR    R6,R6               CLEAR REG
         SPACE
MOVEMSG  DS    0H
         SPACE
         B     MSGIO               GO PRINT
         SPACE
         SPACE
SRCHOUT  DS    0H
         TM    TSTFLGS2,TSTXCTL    CHECK FOR 'XCTL' BIT ON
         BO    MOVEXCTL            YES...GO INSERT 'XCTL FAILED'
         SR    R7,R7               CLEAR REG 7
         NI    FLAGS,NOINST26      INDICATE NO 6TH INSERT
         BR    R14                 RETURN TO CALLING ROUTINE
         EJECT
***********************************************************************
*
*  THESE FORMS OF THE IO MACRO ARE USED TO ISSUE THE FIRST AND SECOND
*  LEVEL MESSAGES.
*
***********************************************************************
MSGIO    DS    0H                  ISSUE MESSAGES
         OI    TSTFLGS4,TSTESTAE   INDICATE I/O SERVICING ESTAE REQUEST
         XC    TSTIOPRM(L'TSTIOPRM),TSTIOPRM CLEAR REMOTE PARM LIST
         LR    R4,R15              GET ADDRESS OF INSERTS
         DROP  R15                 DISCONTINUE R15 AS INSERTS BASE
         USING INSERTS,R4          ESTABLISH R4 AS INSERTS BASE
         L     R5,PARMLST@         GET POINTER TO PARAM LIST
         USING LIST,R5             ESTABLISH R4 AS INSERTS BASE
         TM    FLAGS,INSERT26      DOES 6TH INSERT EXIST
         BZ    IOMACRO2            NO - CHECK SECOND FORM OF MACRO
         TM    FLAGS,INSERT25      DOES 5TH INSERT EXIST
         BZ    IOMACRO3            NO - USE THIRD FORM OF MACRO
IOMACRO1 DS    0H
         IKJEGSIO MSG,FIRST=M0058,INST11=(ADDR,INST11@),SECOND=M0259,  *
               INST21=(ADDR,INST21@),INST22=(ADDR,INST22@),            *
               INST23=(ADDR,INST23@),INST24=(ADDR,INST24@),            *
               INST25=(ADDR,INST25@),INST26=(NUM,(R7)),                *
               ID=STA29,MF=(E,TSTIOPRM)
         B     RETURN                   GO RETURN WITH APPROPRIATE RC
         SPACE 4
IOMACRO2 DS    0H
         TM    FLAGS,INSERT25      IS THERE A 5TH INSERT FOR 2ND LEVEL
         BZ    IOMACRO4            NO - USE FOURTH FORM OF MACRO
         IKJEGSIO MSG,FIRST=M0058,INST11=(ADDR,INST11@),SECOND=M0259,  *
               INST21=(ADDR,INST21@),INST22=(ADDR,INST22@),            *
               INST23=(ADDR,INST23@),INST24=(ADDR,INST24@),            *
               INST25=(ADDR,INST25@),ID=STA29,MF=(E,TSTIOPRM)
         B     RETURN                   GO RETURN WITH APPROPRIATE RC
         SPACE 4
IOMACRO3 DS    0H
         IKJEGSIO MSG,FIRST=M0058,INST11=(ADDR,INST11@),SECOND=M0259,  *
               INST21=(ADDR,INST21@),INST22=(ADDR,INST22@),            *
               INST23=(ADDR,INST23@),INST24=(ADDR,INST24@),            *
               INST26=(NUM,(R7)),ID=STA29,MF=(E,TSTIOPRM)
         B     RETURN                   GO RETURN WITH APPROPRIATE RC
         SPACE 4
IOMACRO4 DS    0H
         IKJEGSIO MSG,FIRST=M0058,INST11=(ADDR,INST11@),SECOND=M0259,  *
               INST21=(ADDR,INST21@),INST22=(ADDR,INST22@),            *
               INST23=(ADDR,INST23@),INST24=(ADDR,INST24@),            *
               ID=STA29,MF=(E,TSTIOPRM)
         B     RETURN                   GO RETURN WITH APPROPRIATE RC
         EJECT
*
         SPACE 8
**** MOVE INSTRUCTIONS   ****
*
*MOVE1    MVC   EIGHT(ZERO,R1),ZERO(R7)  MOVE 1ST LEV MSG TO BUFFER
*                                      OUTPUT BUFFER
MOVE2    MVC   ZERO(ZERO,R4),ZERO(R8)  MOVE 2ND LEVEL MESSAGE TO
*                                         OUTPUT BUFFER
MOVE3    MVC   ZERO(ZERO,R4),ONE(R8)     MOVE INSERT TO 2ND LEVEL
*                                        MESSAGE
MOVENAME MVC   FOUR(ZERO,R15),ONE(R6)    MOVE INSERT TO FIRST
*                                        LEVEL MESSAGE
*
         SPACE
*
*        CONSTANTS
*
         DS    0F
MASKUP   DC    X'FFFFFFFC'         MASK FOR ROUNDING UP
ZERO4    DC    X'00000000'         CONSTANT USED TO INITIALIZE INSERT
SCDADDR  DC    V(IKJEGSCD)         @ MODULE LIST CSECT-IBM SUBCOMMANDS
SCDADDR2 DC    V(IKJEGSCU)         @ MODULE LIST CSECT-USER'S "
SVC61    DC    CL8'IGC0006A'       SVC 61 NAME                 ZXCZXCZX
SVC97    DC    CL8'IGC0009G'       SVC 97 NAME                 ZXCZXCZX
SAVELNGH DC    X'00000048'         LENGTH OF GET MAIN 20       @ZA00918
BLANK9   DC    CL9' '              USED TO INITIALIZE TO BLANKS
MSGXCTL  DC    X'85'               INSERT # OF XCTL MSG INSERT
         EJECT
***********************************************************************
*
* THIS IS A SEQUENCE OF COMMAND NAMES THAT ARE USED IN CONSTRUCTING
* THE FIRST LEVEL MESSAGE
***********************************************************************
ENDNAME  DS    0H
         DC    X'03'               LENGTH OF NAME
         DC    C'END'              COMMAND NAME
*************************PLEASE DO NOT DISTERB THIS INSERT************
         SPACE 4
ASSIGN   DS    0H
         DC    X'0A'               LENGTH OF NAME
         DC    C'ASSIGNMENT'       MODULE NAME (WILL BE CHANGED
*                                  TO 'SET')
*************************PLEASE DO NOT DISTERB THIS INSERT************
         SPACE 4
DEFERNM  DS    0H
         DC    X'05'               LENGTH OF NAME
         DC    C'DEFER'            COMMAND NAME
*************************PLEASE DO NOT DISTERB THIS INSERT************
         SPACE 4
TSTNAME  DS    0H
         DC    X'04'               LENGTH OF NAME
         DC    C'TEST'             COMMAND NAME
*************************PLEASE DO NOT DISTERB THIS INSERT************
         SPACE 4
SVCMSG   DS    0H
         DC    X'0C'               LENGTH OF INSERT TEXT
         DC    C'SVC(97 V 61)'     INSERT TEXT
*************************PLEASE DO NOT DISTERB THIS INSERT************
         EJECT
TAB      DC    C'0123456789ABCDEF' TRANSLATE TABLE FOR ABEND CODE
*
         SPACE 1
OUTRGN   DS    0X
         DC    AL1(OUTRGN2-OUTRGN)      TEXT LENGTH
         DC    C'NOT WITHIN THIS REGION'  INSERT TEXT
OUTRGN2  DS    0X
*
         SPACE 1
CONSTANT DC    60C'Z'              PATCH AREA
         EJECT
         SPACE
*
*
STAWORK  DSECT                     STAE WORK AREA DSECT
*
REGSAV   DS    2F                  SAVE AREA FOR REGS 13 AND 14
RTCA@    DS    F                   ADDR OF 512-BYTE WORKAREA SAVE
CODESAV  DS    X                   IC TABLE CODE SAVE
FLAGS    DS    X                   FLAGS TO INDICATE RESOURCE STATUS
RTCA     EQU   B'10000000'         RTCA OBTAINED
RTCAN    EQU   B'01111111'         RTCA COMPLEMENT
INSERT25 EQU   B'01000000'         5TH INSERT TO ERROR MSG  EXISTS
NOINST25 EQU   B'10111111'         NO 5TH INSERT TO ERROR MSG
INSERT26 EQU   B'00100000'         6TH INSERT TO ERROR MSG  EXISTS
NOINST26 EQU   B'11011111'         NO 6TH INSERT TO ERROR MSG
SVCFAIL  EQU   B'00010000'         WE ARE PROCESSING AN SVC ABEND
FLAGS4   DS    X                   STORAGE SPACE FOR TSTFLGS4
         DS    X                   UNASSIGNED
ADDRESS  DS    F                   AREA FOR ADDRESS BEING VALIDITY CKED
PARMLST@ DS    F                   ADDR OF PARAM LIST FROM ESTAE MACRO
TCBPTR   DS    F                   ADDR OF TCB
SVRB@    DS    F                   ADDR OF SVRB FOR SVC'S 97 AND 61
*
         SPACE 6
LIST     DSECT                     PARAM LIST
RETRY@   DS    F                   RETRY ROUTINE ADDRESS
ABENTAB@ DS    F                   ABEND TABLE ADDRESS DSECT
ENTRYPT  DS    F                   ENTRY POINT OF ABENDING MODULE
MODNAME  DS    CL8                 MODULE NAME
INST21@  DS    0H             ***  1ST INSERT FOR 2ND LEVEL MESSAGE
INSERTLN DS    H                   LENGTH OF COMPLETE TEXT NAME INSERT
         DS    H
TEXTNM   DS    C                   ABENDING MODULE TEXT NAME
         EJECT
*
**********************************************************************
* THIS DSECT MAPS THE INSERTS FOR THE FIRST AND SECOND LEVEL
* MESSAGES
**********************************************************************
         SPACE
INSERTS  DSECT
INST11@  DS    0H                  ADDRESS OF INSERT TO 1ST LEVEL MSG
LEN1     DS    H                   LENGTH OF INST11 + 5
         DS    H                   AREA USED BY IKJEGIO
SUBCMDNM DS    CL13                SUBCOMMAND NAME
*
INST22@  DS    0H                  ADDRESS OF 2ND INSERT TO 2ND LEVEL
LEN2     DS    H                   LENGTH OF INST22 + 4
         DS    H                   AREA USED BY IKJEGIO
ENTPOINT DS    CL9                 ENTRY POINT
*
INST23@  DS    0H                  ADDRESS OF 3RD INSERT TO ERROR MSG
LEN3     DS    H                   LENGTH OF INST23 + 5
         DS    H                   AREA USED BY IKJEGIO
COMPCODE DS    CL4                 COMPLETION CODE
*
INST24@  DS    0H                  ADDRESS OF 4TH INSERT TO 2ND LEVEL
LEN4     DS    H                   LENGTH OF INST24 + 5
         DS    H                   AREA USED BY IKJEGIO
INSTCTR  DS    CL9                 INSTRUCTION COUNTER
*
INST25@  DS    0H                  ADDRESS OF 5TH INSERT TO 2ND LEVEL
LEN5     DS    H                   LENGTH OF INST25 + 5
         DS    H                   AREA USED BY IKJEGIO
INSTIMGE DS    CL25                INSTRUCTION IMAGE
*
INST26@  DS    0H                  ADDRESS OF 6TH INSERT TO 2ND LEVEL
LEN6     DS    H                   LENGTH OF INST26 + 5
         DS    H                   AREA USED BY IKJEGIO
ABENDMSG DS    CL38                MESSAGE CORRESPONDING TO CODE IN
*                                  COMMAND IC TABLE
         EJECT
         TCOMTAB                   COMMUNICATION TABLE
         EJECT
         TSTCWORK
         EJECT
CVTDSECT DSECT
         CVT                       CVT DSECT
         EJECT
         IHAPQE                    PQE DSECT
         EJECT
         IHACDE                    CDE DSECT
         EJECT
         IKJRB                     RB DSECT
         EJECT
         IKJTCB                    TCB DSECT
         EJECT
         IHASDWA                   RTCA DSECT
         END
