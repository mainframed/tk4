         TITLE  'IKJEGEQU, THE EQUATE AND DROP COMMANDS OF TEST'
* /* START OF SPECIFICATIONS ****
*02*  PROCESSOR = ASSEMBLER
**** END OF SPECIFICATIONS ***/
**********************************************************************
* STATUS  CHANGE LEVEL  00  VERSION NO. 01  OS/VS2                   *
*                                                                    *
* FUNCTION                                                           *
*    THIS MODULE IS RESPONSIBLE FOR BUILDING AND MAINTAINING AN IN   *
*    CORE SYMBOL TABLE.  EACH ENTRY IN THE TABLE CONTAINS A POINTER  *
*    TO THE NEXT ENTRY, THE LOAD ADDRESS OF THE SYMBOL, THE          *
*    ATTRIBUTES OF THE SYMBOL AND THE LENGTH OF THE SYMBOL ALONG WITH*
*    THE SYMBOL.  A NEW ENTRY IS BUILT FOR EACH NEW SYMBOL.  IF A    *
*    SYMBOL ALREADY EXISTS IN THE TABLE, THE LOAD ADDRESS AND        *
*    ATTRIBUTES MAY BE OVERRIDEN.  IF THE ATTRIBUTES ARE NOT         *
*    SPECIFIED THE DEFAULTS TAKEN WILL BE TYPE-HEX, LENGTH-4 AND     *
*    MULTIPLICITY-1.  THE MODULE IS CAPABLE OF DEFAULTING THE        *
*    LENGTH AND/OR MULTIPLICITY FOR THE DIFFERENT TYPES.  THIS       *
*    MODULE IS ALSO CAPABLE OF DELETING A LIST OF ENTRIES OR ALL     *
*    ENTRIES FROM THE IN CORE SYMBOL TABLE.                          *
*                                                                    *
* ENTRY POINTS                                                       *
*                                                                    *
*         IKJEGEQU-ENTERED VIA A LINK FROM IKJEGMNL.  REGISTER 9     *
*    WILL POINT TO TCOMTAB, THE COMMON DSECT USED BY TEST.  THIS IS  *
*    THE ENTRY POINT WHEN ADDING OR UPDATING AN ENTRY IN THE         *
*    SYMBOL TABLE POINTED TO BY SYMTABLE IN TCOMTAB.                 *
*                                                                    *
*         IKJEGDRP-ENTERED VIA A LINK FROM IKJEGMNL.  REGISTER 9     *
*    WILL POINT TO TCOMTAB, THE COMMON DSECT USED BY TEST.  THIS IS  *
*    THE ENTRY POINT WHEN DELETING AN ENTRY FROM THE SYMBOL TABLE    *
*    POINTED TO BY SYMTABLE IN TCOMTAB.                              *
*                                                                    *
*         IKJEGVDK-ENTERED FROM IKJPARS.  REGISTER 1 POINTS TO A     *
*    THREE WORD PARAMETER LIST.  THE FIRST WORD IS A POINTER TO THE  *
*    PDE, THE SECOND WORD IS A POINTER TO IKJEGEQU'S OR IKJEGDRP'S   *
*    SAVEAREA.  THE THIRD WORD IS TO BE USED BY THE VALIDITY CHECK   *
*    ROUTINE TO PASS A POINTER TO A SECOND LEVEL MESSAGE BACK TO     *
*    IKJPARS.                                                        *
*                                                                    *
* INPUT                                                              *
*    THE REQUESTED FUNCTION WILL BE POINTED TO BY INBUF IN TCOMTAB.  *
*    FOR THE EQUATE VERB, THE SYMBOL AND ADDRESS PARAMETERS MUST BE  *
*    SPECIFIED.  THE REST OF THE PARAMETERS ARE OPTIONAL.            *
*    THE FORMAT OF THE EQUATE STATEMENT IS                           *
*    EQUATE SYMBOL ADDR TYPE LENGTH(X) MULTIPLE(X) WHERE X IS AN     *
*    INTEGER.                                                        *
*    THE SYMBOL IS AN OPTIONAL PARAMETER FOR THE DROP VERB.  THE     *
*    FORMAT OF THE DROP STATEMENT IS                                 *
*    DROP SYMBOL OR DROP OR DROP SYMBOL,SYMBOL WHERE THE LIST IS     *
*    ENCLOSED BY PARENTHESIS.                                        *
*                                                                    *
* OUTPUT                                                             *
*    IKJEGEQU WILL PUT THE ADDRESS OF THE IN CORE SYMBOL TABLE IN THE*
*    SYMTABLE FIELD IN TCOMTAB.  THE ADDRESS OF EACH NEW ENTRY CAN BE*
*    FOUND IN THE FIRST WORD OF THE PREVIOUS ENTRY.                  *
*    IKJEGDRP WILL DELETE AN ENTRY FROM THE IN CORE SYMBOL TABLE AND *
*    UPDATE THE AFFECTED POINTER TO REFLECT THE DELETION.  IF ALL THE*
*    ENTRIES ARE DELETED SYMTABLE WILL CONTAIN ZEROES.               *
*                                                                    *
* EXTERNAL REFERENCES                                                *
*                                                                    *
*         IKJPARS-TO VALIDITY CHECK AND SCAN THE COMMAND BUFFER.     *
*    REGISTER 1 WILL POINT TO A 7 WORD PARAMETER LIST.               *
*                                                                    *
*         IKJEGCVT-TO CONVERT THE ADDRESS, MULTIPLICITY AND LENGTH   *
*    ATTRIBUTES TO BINARY.  REGISTER 1 WILL BE THE ADDRESS COMPLEMENT*
*    OF THE ADDRESS PDE FOR THE ADDRESS CONVERSION AND WILL BE THE   *
*    ADDRESS OF THE PDE FOR THE ATTRIBUTE CONVERSIONS.  REGISTER 0   *
*    WILL BE POSITIVE TO INDICATE BINARY CONVERSION.                 *
*                                                                    *
*         IKJEGIO-TO WRITE DIAGNOSTIC MESSAGES.                      *
*                                                                    *
* EXITS, NORMAL                                                      *
*                                                                    *
*         IKJPARS-ONE OF THE FOLLOWING RETURN CODES WILL BE PASSED   *
*    VIA REGISTER 15.                                                *
*    0   INDICATING TO CONTINUE PROCESSING THE COMMAND BUFFER        *
*    8   INDICATING IKJPARS SHOULD PROMPT WITH REENTER               *
*    12  INDICATING IKJPARS SHOULD RETURN TO IKJEGEQU WITH A         *
*    *   RETURN CODE OF 20.                                          *
*                                                                    *
*         IKJEGMNL-VIA REGISTER 14 WITH ONE OF THE FOLLOWING         *
*    RETURN CODES IN REGISTER 15-                                    *
*    0   NORMAL RETURN CODE                                          *
*    16  INDICATING AN ATTENTION INTERRUPT WAS ENCOUNTERED           *
*    *   DURING PROCESSING                                           *
*                                                                    *
* EXITS, ERROR                                                       *
*         IKJEGMNL-VIA REGISTER 14 WITH A RETURN CODE OF 20 IN       *
*    REGISTER 15 TO INDICATE THE STAE RETRY ROUTINE WAS ENTERED.     *
*                                                                    *
* TABLES/WORKAREAS                                                   *
*    THIS MODULE USES THE COMMON DSECT OF THE TEST PACKAGE-TCOMTAB.  *
*    THE WORKAREA IS LABELED AREAWORK AND CAN BE FOUND AT A          *
*    DISPLACEMENT OF X'40' FROM THE AREA POINTED TO BY WORKAREA IN   *
*    TCOMTAB.  THE PARAMETER CONTROL LIST FOR IKJPARS IS BUILT IN THE*
*    WORKAREA ALONG WITH SWITCHES USED BY THIS MODULE TO PROCESS.    *
*    TCOMTAB CONTAINS POINTERS TO THIS MODULE'S SAVEAREA, A POINTER  *
*    TO THE COMMAND BUFFER CONTAINING THE REQUEST, AND A POINTER TO  *
*    AN OUTPUT BUFFER.                                               *
*                                                                    *
* ATTRIBUTES                                                         *
*    REENTRANT, REFRESHABLE                                          *
*                                                                    *
* CHARACTER CODE DEPENDENCY                                          *
*    THE OPERATION OF THIS MODULE DEPENDS UPON AN INTERNAL           *
*    REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS EQUIVALENT*
*    TO THE ONE USED AT ASSEMBLY TIME.  THE CODING HAS BEEN ARRANGED *
*    SO THAT REDEFINITION OF CHARACTER CONSTANTS, BY REASSEMBLY,     *
*    WILL RESULT IN A CORRECT MODULE FOR THE NEW DEFINITIONS.        *
*                                                                    *
* NOTES                                                              *
*    ABBREVIATIONS COMMONLY USED IN THE COMMENTS BESIDE THE CODE-    *
*    1.   PDL-PARAMETER DESCRIPTOR LIST                              *
*    2.   PDE-PARAMETER DESCRIPTOR ENTRY                             *
*    3.   PCL-PARAMETER CONTROL LIST                                 *
*    COMMENTS GENERALLY START IN COLUMN 35.                          *
*    ESTAERTN IS THE ENTRY POINT FOR THE STAE RETRY ROUTINE AND IS   *
*    ENTERED FROM IKJEGSTA.                                          *
**********************************************************************
         EJECT
         COPY IKJEGSIO
IKJEGEQU CSECT
** THE COMMENTS FOR THE FOLLOWING STATEMENTS START IN COLUMN 25.    **
R0       EQU    0       REGISTER 0
R1       EQU    1       REGISTER 1
R2       EQU    2       REGISTER 2
R5       EQU    5       REGISTER 5
R6       EQU    6       REGISTER 6
R7       EQU    7       REGISTER 7
R8       EQU    8       REGISTER 8
R9       EQU    9       REGISTER 9
R12      EQU   12       REGISTER 12
R13      EQU   13       REGISTER 13
R14      EQU   14       REGISTER 14
R15      EQU   15       REGISTER 15
** THE FOLLOWING EQUATES ARE USED AS REGISTER NOTATION THROUGHOUT THE**
** MODULE.                                                           **
PARMREG  EQU    1       USED TO PASS PARAMETERS TO OTHER MODULES
MSGREG   EQU    2       USED TO INDICATE MSG NUMBER TO BE OUTPUTTED
LASTENTR EQU    2       POINTS TO THE LAST ENTRY IN THE INCORE
*                       SYMBOL TABLE
WORKREG  EQU    3       GENERAL WORK REGISTER
R3       EQU    3       PARM REGISTER
EVEN     EQU    4       USED AS AN EVEN REGISTER FOR MULTIPLICATION
STRNGPTR EQU    4       USED IN VALIDITY CHECK ROUTINE-PT TO VALUE
OUTBUFRG EQU    4       USED TO INDEX THROUGH OUTPUT BUFFER
ADDRBASE EQU    4       USED TO ADDRESS ADDRESS PDE AFTER RETURNING
*                       FROM IKJPARS
FSTMSG   EQU    5       USED TO ADDRESS FIRST LEVEL MESSAGE
SECNDMSG EQU    5       USED TO ADDRESS SECOND LEVEL MESSAGE
ODD      EQU    5       USED AS ODD REGISTER FOR MULTIPLICATION
ATTREG   EQU    6       USED TO ADDRESS THE ENTRY IN THE INCORE SYMBOL
*                       TABLE
DISPLREG EQU    7       USED TO DETERMINE WHAT CODE IS TO BE PROCESSED
*                       AFTER RETURNING FROM IKJEGIO
WORKREG2 EQU    7       USED AS A GENERAL REGISTER
PDLBASE  EQU    8       USED TO ADDR PDL AFTER RETURNING FROM IKJPARS
PDEPTR   EQU    8       USED TO ADDR THE PDE FROM PARSE IN THE VALIDITY
*                       CHECK ROUTINE
TABBASE  EQU    9       USED TO ADDRESS TCOMTAB
WORKBASE EQU   10       USED TO ADDRESS WORKAREA
BASEREG  EQU   11       BASE REGISTER FOR ADDRESSABILITY WITHIN CSECT
ENTRYREG EQU   12       USED TO ADDRESS NEW ENTRY IN INCORE SYMBOL
*                       TABLE
RETURN   EQU   14       CONTAINS ADDRESS OF NEXT SEQUENTIAL INST
RETCODE  EQU   15       USED FOR RETURNING RETURN CODES
** THE FOLLOWING EQUATES ARE USED THROUGHOUT THE PROGRAM FOR LENGTHS,**
** AND DISPLACEMENTS IN INSTRUCTIONS.                                **
L0       EQU    0       LENGTH OF 0
L1       EQU    1       LENGTH OF 1
L2       EQU    2       LENGTH OF 2
L3       EQU    3       LENGTH OF 3
L4       EQU    4       LENGTH OF 4
L5       EQU    5       LENGTH OF 5
L10      EQU   10       LENGTH OF 10
L16      EQU   16       LENGTH OF 16
L29      EQU   29       LENGTH OF 29
L35      EQU   35       LENGTH OF 35
D0       EQU    0       DISPLACEMENT OF 0
D1       EQU    1       DISPLACEMENT OF 1
D2       EQU    2       DISPLACEMENT OF 2
D3       EQU    3       DISPLACEMENT OF 3
D4       EQU    4       DISPLACEMENT OF 4
D5       EQU    5       DISPLACEMENT OF 5
D6       EQU    6       DISPLACEMENT OF 6
D7       EQU    7       DISPLACEMENT OF 7
D8       EQU    8       DISPLACEMENT OF 8
D9       EQU    9       DISPLACEMENT OF 9
D10      EQU   10       DISPLACEMENT OF 10
D11      EQU   11       DISPLACEMENT OF 11
D12      EQU   12       DISPLACEMENT OF 12
D14      EQU   14       DISPLACEMENT OF 14
D15      EQU   15       DISPLACEMENT OF 15
D16      EQU   16       DISPLACEMENT OF 16
D24      EQU   24       DISPLACEMENT OF 24
D28      EQU   28       DISPLACEMENT OF 28
D29      EQU   29       DISPLACEMENT OF 29
D33      EQU   33       DISPLACEMENT OF 33
D34      EQU   34       DISPLACEMENT OF 34
D39      EQU   39       DISPLACEMENT OF 39
D52      EQU   52       DISPLACEMENT OF 52
D54      EQU   54       DISPLACEMENT OF 54
D56      EQU   56       DISPLACEMENT OF 56
D60      EQU   60       DISPLACEMENT OF 60
D64      EQU   64       DISPLACEMENT OF 64
D67      EQU   67       DISPLACEMENT OF 67
D68      EQU   68       DISPLACEMENT OF 68
D75      EQU   75       DISPLACEMENT OF 75
FACTOR   EQU    3       USED TO CALCULATE MESSAGE DISPLACEMENT
ONE      EQU    1       NUMERICAL ONE
ONES     EQU    1       USED IN TM INSTRUCTION
TWO      EQU    2       NUMERICAL TWO
SEVEN    EQU    7       NUMERICAL SEVEN
EIGHT    EQU    8       NUMERICAL EIGHT
ZERO     EQU    0       NUMERICAL 0
TWELVE   EQU   12       NUMBER OF BYTES IN EACH ENTRY OF ATTRTAB
BLANK    EQU   C' '     BLANK
REGSMASK EQU   X'38'    USED TO TEST FLAG 4 OF ADDR PDE
HEXZERO  EQU   X'00'    USED IN TESTING SWITCHES
HEXONE   EQU   X'01'    USED IN TESTING SWITCHES
HEXTWO   EQU   X'02'    USED IN TESTING SWITCHES
HEXTHREE EQU   X'03'    SIGNIFIES TO STAE THAT A LINK FAILED
HEXFOUR  EQU   X'04'    USED IN TESTING SWITCHES
HEXEIGHT EQU   X'08'    USED IN TESTING SWITCHES
HEX14    EQU   X'14'    USED TO SET TYPE CHARACTER OF PDE
HEX80    EQU   X'80'    USED TO TEST FOR ADDRESS OF BINARY ADDR
HEXFB    EQU   X'FB'    USED TO SET ALLSW
HEXFD    EQU   X'FD'    USED TO TURN CMMNDSW OFF
HEXFE    EQU   X'FE'    USED TO TURN DUPLSW OR LOWSW OFF
HEXFF    EQU   X'FF'    SIGNIFIES END OF STAE ABEND TABLE
RET0     EQU    0       USED TO SET RETURN CODE
RET8     EQU    8       USED TO SET RETURN CODE
RET12    EQU   12       USED TO SET RETURN CODE
RET16    EQU   16       USED TO SET RETURN CODE
RET20    EQU   20       USED TO SET RETURN CODE
INSERTRG EQU   4        EQUATE REG USED FOR INSERTS TO MSG
FIVE     EQU   5        NUMBER FIVE FOR INCREMENTING INST LEN
FOUR     EQU   4        NUMBER FOUR FOR INCREMENTING INST LEN
BADESTAE EQU   24       RTN CODE NUMBER IF BAD ESTAE
SIX      EQU   6        EQUATE NUMBER SIX FOR DATA MANIPULATION
L8       EQU   8        EQUATE NUMBER EIGHT FOR DATA MANIPULATION
M0240    EQU   240      EQUATE NUMBER OF STATIC MESSAGE IN I/O
M0241    EQU   241      EQUATE NUMBER OF STATIC MESSAGE IN I/O
         SPACE 3
         ENTRY IKJEGDRP
         SPACE 3
** THE COMMENTS FOR THE FOLLOWING STATEMENTS START IN COLUMN 35.     **
         EJECT
         SAVE  (14,12),,*         SAVE REGISTERS
         LR    BASEREG,R15        ESTABLISH ADDRESSABILITY FOR
         USING IKJEGEQU,BASEREG   THIS CSECT-BASEREG IS BASE
         USING TCOMTAB,TABBASE    USE TABBASE TO ADDR TCOMTAB
         L     WORKREG,WORKAREA   OBTAIN ADDR OF WORKAREA FROM TCOMTAB
         USING TSTCWORK,WORKREG   ESTABLISH ADDRESSABILITY TO ENTIRE
*                                 WORKAREA
         LA    WORKBASE,CWORKCMD  GET ADDRESS OF IKJEGEQU'S
*                                 WORKAREA
         USING AREAWORK,WORKBASE  USE WORKBASE TO ADDRESS WORKAREA
         DROP  WORKREG            DROP ADDRESSABILITY TO ENTIRE
*                                 WORKAREA
         XC    PPLAREA(ENDWORK-PPLAREA),PPLAREA CLEAR WORKAREA
         B     PARS01C1           GO SET UP SAVEAREAS
         DROP  BASEREG
IKJEGDRP DS    0H
         SAVE  (14,12),,*         SAVE REGISTERS
         USING IKJEGDRP,R15       ESTABLISH ADDRESSABILITY
         L     BASEREG,BASE       GET ADDRESS OF BEGINNING OF PROGRAM
         DROP  R15
         USING IKJEGEQU,BASEREG   BASEREG IS THE BASE REGISTER
         USING TCOMTAB,TABBASE    USE TABBASE TO ADDR TCOMTAB
         L     WORKREG,WORKAREA   OBTAIN ADDR OF WORKAREA FROM TCOMTAB
         USING TSTCWORK,WORKREG   ESTABLISH ADDRESSABILITY TO ENTIRE
*                                 WORKAREA
         LA    WORKBASE,CWORKCMD  GET ADDRESS OF IKJEGDRP'S WORKAREA
         USING AREAWORK,WORKBASE  USE WORKBASE TO ADDRESS WORKAREA
         DROP WORKREG             DROP ADDRESSABILITY TO ENTIRE
*                                 WORKAREA
         XC    PPLAREA(ENDWORK-PPLAREA),PPLAREA CLEAR WORKAREA
         OI    DROPSW,HEXTWO      INDICATE DROP FUNCTION REQUESTED
** THE FOLLOWING CODE SETS UP THE SAVEAREAS FOR THE EQUATE AND DROP  **
** FUNCTIONS.                                                        **
PARS01C1 DS    0H
         MVC   LNGTWORK(L3),CHARZERO   INITIALIZE LENGTH TO CHARACTER
*                                 ZERO
         L     R15,REGSAVE2       GET ADDRESS OF SAVEAREA FROM
*                                 TCOMTAB
         ST    R13,D4(R15)        STORE ADDRESS OF IKJEGMNL SAVEAREA
         ST    R15,D8(R13)        STORE ADDR OF OUR SAVEAREA
         LR    R13,R15            PUT ADDRESS OF OUR SAVEAREA INTO
*                                 REGISTER 13
         STM   R14,R12,D12(R13)   SAVE OUR REGISTERS
*********************************************************************
*                   ISSUE STAE FOR DROP AND EQUATE                  *
*********************************************************************
         L     WORKREG,TSTSTAE    GET ADDR OF STAE EXIT ROUTINE
         LA    R15,STAEAREA       GET ADDR OF STAE WORKAREA
         MVC   D0(STAELEN,R15),STAELIST  MOVE STAE LIST FORM INTO
*                                 WORKAREA
         ESTAE (R3),CT,PARAM=IKJEGSPL,RECORD=YES,XCTL=NO,MF=(E,(R15))
         LTR   R15,R15            IS RETURN CODE ZERO
SMTSTAE  DS    0H                 SMT LABEL FOR TEST CASE TEQU5500
         BZ    PARS01F2           YES, CONTINUE PROCESSING
         STC   R15,TSTESTRC       SAVE RTN CODE FOR MAINLINE
         LA    R15,BADESTAE       INDICATE TO MAINLINE BAD ESTAE
         B     EXIT05F2           RETURN TO MAINLINE
PARS01G1 DS    0H
         XC    TSTIOPRM,TSTIOPRM  ZERO OUT I/O PARM LIST
         IKJEGSIO MSG,FIRST=M0103,ID=EQU13,MF=(E,TSTIOPRM) CALL I/O
         B     MSG06A1            GO TO ERROR CODE ANALYE ROUTINE
PARS01F2 DS    0H
         TM    TSTFLGS3,NOPARMS   WERE PARAMETERS SPECIFIED
         BZ    PARS01A3           YES, GO TO PARSE
         TM    DROPSW,HEXTWO      NO, CHECK FOR DROP COMMAND
         BO    SYM02A1            YES, SKIP GOING TO PARSE
PARS01A3 DS    0H
** THIS CODE BUILDS THE PARAMETER LIST IN THE WORKAREA TO GO TO      **
** IKJPARS TO SCAN AND VALIDITY CHECK THE PARAMETERS OF THE COMMAND  **
** BUFFER.                                                           **
         LR    WORKREG2,WORKBASE  ESTABLISH ADDRESSABILITY TO PARSE
         USING PPL,WORKREG2       PARAMETER LIST
         MVC   PPLUPT(L4),TSTUPT  PUT ADDR UPT INTO PARAMETER LIST
         MVC   PPLECT(L4),TSTECT  PUT ADDR ECT INTO PARAMETER LIST
         MVC   PPLECB(L4),TSTCPECB PUT ADDR ECB INTO PARAMETER LIST
         TM    DROPSW,HEXTWO      IS THE REQUEST TO DELETE AN ENTRY
*                                 FROM THE IN CORE SYMBOL TABLE
         BZ    PARS01C3           NO, GO SET UP PCL FOR EQUATE
         MVC   PPLPCL(L4),PARSDROP YES, PUT ADDR OF DROP'S PCL INTO
*                                 PARAMETER LIST
         B     PARS01D3           GO SET UP REST OF PARAMETER LIST
PARS01C3 DS    0H
         MVC   PPLPCL(L4),PARSADDR PUT ADDR OF EQUATE'S PCL INTO
*                                 PARAMETER LIST
PARS01D3 DS    0H
         LA    WORKREG,TSTANSPL   GET ADDR OF ANSWER PLACE FOR IKJPARS
         ST    WORKREG,PPLANS     PUT ADDRESS INTO THE PCL FOR IKJPARS
         MVC   PPLCBUF(L4),INBUF  MOVE COMMAND BUFFER ADDRESS
*                                 INTO PARAMETER LIST
         ST    R13,PPLUWA         PUT ADDR OF THIS MODULE'S SAVEAREA
*                                 INTO PARAMETER LIST
         LR    PARMREG,WORKBASE   REG 1 POINTS TO PARAMETER LIST
         DROP  WORKREG2           DROP ADDRESSABILITY TO PARSE
*                                 PARAMETER LIST
         LINK  EP=IKJPARS,ERRET=LINKFAIL    GO TO IKJPARS
PARSBLOW DS    0H                 LABEL USED BY STAE RETRY ROUTINE
         B     LINKOK             IF CONTROL COMES HERE OK
LINKFAIL DS    0H
         LR    R6,R1              TRANSFER ABEND CODE
         LR    R5,R15             TRANSFER RTN CODE
         XC    TSTIOPRM,TSTIOPRM  CLEAR PARM LIST
         IKJEGSIO SVCERR,SVC=6,ABENDRG=(R6),RC=(R5),ID=EQU13, CALL I/O *
               INST11=(NUM,I0040),MF=(E,TSTIOPRM) TO ISSUE AN ERROR MSG
         B     EXIT05G5           BRANCH TO EXIT
LINKOK   DS    0H
SMTPARS  DS    0H                 SMT LABEL FOR TEST CASES TEQU4900
*                                 AND TDRP1600
** THE FOLLOWING BRANCH TABLE IS USED TO DETERMINE ACTION TO BE      **
** TAKEN AFTER RETURNING FROM IKJPARS DEPENDENT ON THE RETURN CODE   **
** FROM IKJPARS IN REGISTER 15.                                      **
         B     PARS01F3(RETCODE)  BRANCH TO TABLE INDEXED BY CONTENTS
*                                 OF REGISTER 15
PARS01F3 DS    0H
         B     SYM02A1            0 - CONTINUE PROCESSING
         B     EXIT05G5           4 - RETURN TO IKJEGMNL
         B     ATTN05H4           8 - ATTENTION ENCOUNTERED
         B     PARS01J4           12 - GO WRITE ERROR MESSAGE
         B     PARS01G1           16 - GO WRITE ERROR MESSAGE
         B     EXIT05E2           20 - GO HANDLE SERVICE RTN CODE
PARS01J4 DS    0H
         TM    DROPSW,HEXTWO      WAS DROP FUNCTION REQUESTED
         BZ    PARS01K4           NO, GO WRITE MESSAGE FOR EQUATE
         XC    TSTIOPRM,TSTIOPRM  ZERO OUT I/O PARM FIELD
         IKJEGSIO MSG,FIRST=M0104,INST11=(NUM,I0012),SECOND=M0277,     *
               ID=EQU13,MF=(E,TSTIOPRM)  CALL I/O TO ISSUE MSG
         B     MSG06A1            GO WRITE MESSAGE
PARS01K4 DS    0H
         XC    TSTIOPRM,TSTIOPRM  ZERO OUT I/O PARM FIELD
         IKJEGSIO MSG,FIRST=M0104,INST11=(NUM,I0011),SECOND=M0277,     *
               ID=EQU13,MF=(E,TSTIOPRM)  CALL I/O TO ISSUE MSG
         B     MSG06A1            GO WRITE MESSAGE
SYM02A1  DS    0H
** THE FOLLOWING CODE GETS THE LOAD ADDRESS OF THE SYMBOL FROM THE   **
** PARAMETER DESCRIPTOR LIST (PDL) BUILT BY IKJPARS.  IT CHECKS TO   **
** SEE IF THE ADDRESS IS ALREADY IN THE IN CORE SYMBOL TABLE.  THE   **
** ADDRESS OF THE PDL IS FOUND IN TSTANSPL IN TCOMTAB                **
         L     PDLBASE,TSTANSPL   OBTAIN ADDR OF PDL
         L     WORKREG2,D8(PDLBASE)  GET ADDRESS OF SYMBOL
         L     WORKREG,SYMTABLE   GET ADDRESS OF SYMBOL TABLE
         LA    LASTENTR,SYMTABLE  OBTAIN ADDR OF LAST ENTRY
         TM    DROPSW,HEXTWO      WAS DROP FUNCTION REQUESTED
         BC    ONES,DROP09A1      YES, GO HANDLE REQUEST
         LA    ADDRBASE,D16(PDLBASE) NO, GET ADDRESS OF ADDRESS PDE
         USING IKJPARMA,ADDRBASE  ADDRBASE ADDRESSES ADDRESS PDE
         TM    PDEFLG5,PDESIB     IS LOAD ADDR OF SYMBOL IN PDL
         BZ    SYM02D2A           YES, PICK ADDRESS UP AND TEST FOR
*                                 SYMBOL TABLE
** THIS CODE PICKS THE LOAD ADDRESS UP FROM THE SYM INFO BLOCK       **
** POINTED TO BY THE LAST WORD IN THE ADDRESS PDE.                   **
         L     R5,PDEUSER         NO, GET ADDRESS OF SI BLOCK
         L     R5,D0(R5)          GET LOAD ADDRESS OF SYMBOL
         B     SYM02D2            GO SEE IF SYMBOL TABLE EXIST
SYM02D2A DS    0H
         L     R5,PDEUSER         GET ADDRESS OF SYMBOL FROM PDL
SYM02D2  DS    0H
         LA    R5,0(,R5)          ZERO HIGH ORDER BYTE
         LTR   WORKREG,WORKREG    ARE THERE ANY ENTRIES IN THE IN CORE
*                                 SYMBOL TABLE
         BZ    SYM02E3            NO, GO SET UP FOR GETMAIN
SYM02D3  DS    0H
** THIS CODE CHECKS TO SEE IF THE LENGTH OF THE NEW SYMBOL IS THE    **
** SAME AS THE LENGTH OF ANY SYMBOL ALREADY IN THE IN CORE SYMBOL    **
** TABLE.                                                            **
         CLC   D12(L2,PDLBASE),D14(WORKREG) ARE LENGTHS THE SAME
         BE    SYM02D3A           YES, GO SEE IF SYMBOLS ARE SAME
SYM02D3B DS    0H
** THIS CODE IS ENTERED FROM SYM02D3A AND IS RESPONSIBLE FOR SETTING **
** UP TO CHECK THE NEXT ENTRY IN THE TABLE FOR DUPLICATE SYMBOLS     **
         LR    LASTENTR,WORKREG   NO, SAVE ADDR OF LAST ENTRY SCANNED
         L     WORKREG,D0(WORKREG) GET ADDRESS OF NEXT ENTRY
         LTR   WORKREG,WORKREG    WAS THERE ANOTHER ENTRY
         BNZ   SYM02D3            YES, CONTINUE SEARCH FOR SYMBOL
SYM02E3  DS    0H
** THIS CODE CALCULATES THE LENGTH OF THE ENTRY                      **
         XR    R1,R1              CLEAR A REGISTER
         LH    R1,D12(PDLBASE)    OBTAIN LENGTH OF SYMBOL
SMTGET01 DS    0H                 SMT LABEL FOR TESTCASE TEQU5600 -
*                                 THIS LABEL MUST COME BEFORE THE LAST
*                                 MODIFICATION OF REGISTER 1 WHEN
*                                 ISSUING THE GETMAIN.
         LA    R1,D16(R1)         ADD 16 TO IT FOR ENTRY SIZE
         LR    R0,R1              PUT LENGTH INTO REGISTER 0
SYM02F3  DS    0H
** THIS CODE GETS THE MAIN STORAGE FOR THE TABLE ENTRY               **
*                                 BYTE OF REGISTER 0
         GETMAIN  RC,SP=1,LV=(0)  ISSUE GETMAIN
         LTR   R15,R15            TEST FOR ERROR
         BZ    OKGETMN            CONTINUE IF OK
         LR    R6,R15             TRANSFER RETURN CODE FOR I/O
         XC    TSTIOPRM,TSTIOPRM  CLEAR I/O PARM LIST
         IKJEGSIO SVCERR,SVC=10,RC=(R6),ID=EQU13,MF=(E,TSTIOPRM)
         CH    R15,H16            TEST FOR SERIOUS ERROR
         BL    EXIT05H5           IF NOT SERIOUS CONTINUE
         B     EXIT05J5           RETURN TO MAINLINE WITH CODE
OKGETMN  DS    0H
SYM02G3  DS    0H                 LABEL FOR STAE RETRY ROUTINE
         LR    ENTRYREG,R1        SAVE ADDRESS OF GETMAIN AREA
         USING ENTRY,ENTRYREG     USE ENTRYREG TO ADDRESS TABLE ENTRY
         XC    D0(L16,ENTRYREG),D0(ENTRYREG) CLEAR 16 BYTES OF ENTRY
         ST    R5,ADDRSYM         PUT LOAD ADDRESS OF SYMBOL INTO ENTRY
         XR    R6,R6              CLEAR A REGISTER
         LH    R6,D12(PDLBASE)    GET LENGTH OF SYMBOL
         STH   R6,SYMLNGTH        PUT LENGTH OF SYMBOL INTO TABLE ENTRY
         BCTR  R6,ZERO            TAKE ONE FROM LENGTH OF SYMBOL
         EX    R6,SYM02G3A        GO MOVE SYMBOL INTO ENTRY OF TABLE
         ST    ENTRYREG,D0(LASTENTR) PUT ADDRESS OF NEW ENTRY INTO
*                                 FIRST WORD OF PREVIOUS ENTRY
         B     TYPE03A1           GO GET TYPE ATTRIBUTE
SYM02G3A MVC   D16(L0,ENTRYREG),D0(WORKREG2) MOVE SYMBOL INTO ENTRY
SYM02D3D CLC   D0(L0,WORKREG2),D16(WORKREG)  ARE THE SYMBOLS THE SAME
SYM02D3A DS    0H
         XR    R6,R6              CLEAR A REGISTER
         LH    R6,D12(PDLBASE)    PUT LENGTH OF SYMBOL IN A REGISTER
         BCTR  R6,ZERO            SUBTRACT ONE FROM LENGTH OF SYMBOL
         EX    R6,SYM02D3D        GO CHECK TO SEE IF SYMBOLS ARE SAME
         BNE   SYM02D3B           NO, CONTINUE SEARCHING ENTRIES
SYM02D4  DS    0H
         LR    ENTRYREG,WORKREG   PUT ADDRESS OF ENTRY INTO REGISTER
         USING ENTRY,ENTRYREG     ENTRYREG ADDRESSES TABLE ENTRY
         L     R6,ADDRSYM         GET EXISTING LOAD ADDRESS
         CR    R5,R6              WAS SAME LOAD ADDRESS SPECIFIED
         BNE   SYM02E4            NO, SAVE ADDRESS SPECIFIED
         OI    DUPLSW,HEXONE      YES, INDICATE ENTRY ALREADY EXISTS
         B     TYPE03A1           GO GET TYPE ATTRIBUTE
SYM02E4  DS    0H
         ST    R5,ADDRSYM         PUT LOAD ADDRESS OF SYMBOL INTO TABLE
TYPE03A1 DS    0H
** THIS CODE PUTS THE TYPE ATTRIBUTE INTO THE IN CORE SYMBOL TABLE IF**
** AN ENTRY DOES NOT ALREADY EXISTS AND OVERRIDES THE TYPE FIELD IF  **
** THE ENTRY FOR THIS LOAD ADDRESS ALREADY EXISTS.                   **
         XR    WORKREG2,WORKREG2  CLEAR A REGISTER
         LH    WORKREG2,D52(PDLBASE)    OBTAIN TYPE SPECIFIED FROM
*                                 TYPE KEYWORD INDICATOR FIELD IN PDL
         DROP  ADDRBASE           DROP ADDRESSABILITY TO ADDR PDE
         LA    ATTREG,ATTRTAB     OBTAIN ADDRESS OF BEGINNING OF
*                                 ATTRIBUTE TABLE
         LTR   WORKREG2,WORKREG2  WAS TYPE SPECIFIED
         BNZ   TYPE03B2           YES, GO FIGURE TABLE DISPLACEMENT
         TM    DUPLSW,HEXONE      NO, DID ENTRY ALREADY EXIST
         BC    ONES,LNG04A1A      YES, GO GET LENGTH ATTRIBUTE
         LA    WORKREG2,TWO       NO, DEFAULT TYPE TO HEX
TYPE03B2 DS    0H
** THIS CODE FIGURES THE DISPLACEMENT NEEDED INTO THE ATTRIBUTE      **
** TABLE THAT IS USED TO ASSURE THE ATTRIBUTES ARE SPECIFIED         **
** CORRECTLY.  THE PDL CONTAINS A FIELD WHICH CONTAINS A NUMBER AND  **
** THAT NUMBER MULTIPLIED BY A FACTOR IS USED AS AN INDEX TO         **
** DETERMINE THE TYPE SPECIFIED.                                     **
         LR    EVEN,WORKREG2      PUT INDEX FACTOR INTO A REGISTER
         LA    ODD,TWELVE         PUT NUMBER OF BYTES IN EACH TABLE
*                                 ENTRY OF ATTRTAB INTO A REGISTER
         MR    EVEN,EVEN          MULTIPLY THE INDEX FACTOR BY
*                                 THE NUMBER OF BYTES IN EACH ENTRY
*                                 TO GET THE CORRECT DISPLACEMENT
*                                 INTO THE ATTRIBUTE TABLE
         AR    ATTREG,ODD         ADD THE START OF THE TABLE TO
*                                 THE DISPLACEMENT TO FIND THE
*                                 LIST IN USE
         LA    ODD,TWELVE
         SR    ATTREG,ODD         PLACE POINTER TO BEGINNING OF LIST
         TM    DUPLSW,HEXONE      DOES AN ENTRY ALREADY EXIST
         BC    ONES,TYPE03B4      YES, GO CHECK FOR SAME TYPE
         MVC   ATTRTYPE(L1),D0(ATTREG)  NO, MOVE THE TYPE FIELD INTO
*                                 ENTRY OF IN CORE SYMBOL TABLE
         B     LNG04A1            GO GET LENGTH ATTRIBUTE
TYPE03B4 DS    0H
** THIS CODE TESTS TO SEE IF THE SAME TYPE ATTRIBUTE WAS GIVEN FOR   **
** THE NEW ENTRY AS THE OLD.                                         **
         CLC   D8(L1,WORKREG),D0(ATTREG)  ARE THE TYPES THE SAME
         BE    LNG04A1            YES, GO GET LENGTH ATTRIBUTE
         XC    ATTRTYPE(ATTRLNTH-ATTRTYPE),ATTRTYPE  NO-CLEAR OLD ENTRY
*                                 OUT
         MVC   D8(L1,WORKREG),D0(ATTREG) MOVE TYPE ATTRIBUTE
*                                 INTO TABLE
         NI    DUPLSW,HEXFE       TURN DUPLICATE ENTRY SWITCH OFF
         B     LNG04A1            GO GET LENGTH ATTRIBUTE
LNG04A1A DS    0H
** THIS CODE IS RESPONSIBLE FOR FINDING THE CORRECT ENTRY IN ATTRTAB **
** THAT DESCRIBES THIS TYPE ATTRIBUTE.                               **
         CLC   D0(L1,ATTREG),ATTRTYPE ENTRIES CORRESPOND
         BE    LNG04A1            YES, CONTINUE PROCESSING
         LA    ATTREG,TWELVE(ATTREG) NO, GO TO NEXT ENTRY IN ATTRTAB
         B     LNG04A1A           GO CHECK THIS ENTRY
LNG04A1  DS    0H
** THE FOLLOWING CODE IS RESPONSIBLE FOR PUTTING THE LENGTH ATTRIBUTE**
** INTO THE IN CORE SYMBOL TABLE.  IF DEALING WITH A NEW ENTRY AND   **
** THE LENGTH WAS NOT SPECIFIED THE DEFAULT WILL BE ONE.  IF THE NEW **
** ENTRY IS OVERRIDING AN EXISTING ENTRY THE DEFAULT WILL BE THAT OF **
** THE OLD ENTRY.                                                    **
         XR    R5,R5              CLEAR A REGISTER
         LH    R5,D54(PDLBASE)    OBTAIN LENGTH ATTRIBUTE INDICATOR
*                                 FROM PDL
         LTR   R5,R5              WAS LENGTH ATTRIBUTE SPECIFIED
         BNZ   LNG04A2            YES, GO CHECK VALUE
** THIS CODE DETERMINES IF THE ENTRY OVERLAID AN EXISTING ENTRY.     **
         TM    DUPLSW,HEXONE      IS THIS A NEW ENTRY
         BNZ   MULT05A1           NO, GO GET MULTIPLICITY ATTRIBUTE
** THIS CODE IS EXECUTED IF THE LENGTH ATTRIBUTE WAS NOT SPECIFIED.  **
         MVC   ATTRLNTH+D1(L1),D7(ATTREG)  PUT LENGTH INTO TABLE
         B     MULT05A1           GO GET MULTIPLICITY ATTRIBUTE
LNG04A2  DS    0H
         XR    R5,R5              CLEAR A REGISTER
         LH    R5,D64(PDLBASE)    OBTAIN THE NUMBER OF BYTES SPECIFIED
*                                 IN THE LENGTH ATTRIBUTE
         L     R7,D60(PDLBASE)    OBTAIN ADDR OF CHAR STRING
         SLL   R5,TWO             MULTIPLY NUMBER OF BYTES OF LENGTH
*                                 ATTR BY 4 IN ORDER TO USE THE
*                                 FOLLOWING BRANCH TABLE
TABLE    DS    0H
         B     TABLE(R5)          BRANCH INTO TABLE INDEXED BY THE
*                                 THE CONTENTS OF R5
         B     LNGONE             BRANCH TO HANDLE ONE BYTE
         B     LNGTWO             BRANCH TO HANDLE TWO BYTES
         B     LNGTHREE           BRANCH TO HANDLE THREE BYTES
LNGONE   DS    0H
** THIS CODE HANDLES THE CASE OF THE LENGTH ATTRIBUTE BEING ONE BYTE **
         MVC   LNGTWORK+D2(L1),D0(R7)   PUT SPECIFIED LENGTH INTO
*                                 WORKAREA
         B     LNGTEST            GO TEST VALUE
LNGTWO   DS    0H
** THIS CODE HANDLES THE CASE OF THE LENGTH ATTRIBUTE BEING TWO BYTES**
         MVC   LNGTWORK+D1(L2),D0(R7)  PUT SPECIFIED LENGTH INTO
*                                 WORKAREA
         B     LNGTEST            GO TEST VALUE
LNGTHREE DS    0H
** THIS CODE HANDLES THE CASE OF THE LENGTH ATTRIBUTE BEING THREE    **
** BYTES.                                                            **
         MVC   LNGTWORK(L3),D0(R7) PUT SPECIFIED LENGTH INTO WORKAREA
LNGTEST  DS    0H
         CLC   LNGTWORK(L3),D1(ATTREG)  TEST TO SEE IF VALUE SPECIFIED
*                                 IS LESS THAN MINIMUN VALUE ALLOWED
         BL    LNG04A3            YES, TAKE DEFAULT AND WRITE MESSAGE
         CLC   LNGTWORK(L3),D4(ATTREG) TEST TO SEE IF VALUE SPECIFIED
*                                 IS GREATER THAN MAXIMUN VALUE
*                                 ALLOWED
         BH    LNG04B3            YES, TAKE DEFAULT AND WRITE MESSAGE
         MVI   D67(PDLBASE),HEX14 NO, SET TYPE CHARACTER OF PDE
LNG04C2  DS    0H
** THIS ROUTINE SETS UP THE PARAMETERS TO GO TO IKJEGCVT FOR VALUE   **
** CONVERSION TO BINARY.  REG 1 IS POSITIVE TO INDICATE VALUE        **
** CONVERSION AND CONTAINS THE ADDRESS OF THE PDE.                   **
         LA    PARMREG,D60(PDLBASE) PUT ADDR OF LENGTH PDE INTO REG 1
LNG04D2  DS    0H
** ENTRY POINT FOR OTHER ROUTINES NEEDING TO GO TO CONVERT FOR VALUE **
** CONVERSION.                                                       **
         XR    R0,R0              CLEAR REG 0 TO INDICATE BINARY
*                                 CONVERSION
         L     R15,TSTCONVT       OBTAIN ADDR OF IKJEGCVT FROM TCOMTAB
         BALR  RETURN,R15         GO TO CONVERT ROUTINE
         LTR   R15,R15            IS RETURN CODE FROM IKJEGCVT 0
         BZ    LNG04F3            YES, CONTINUE PROCESSING
         BNZ   EXIT05F2           NO, GO TO CHECK SERVICE RTN RETURN
*                                 CODE
LNG04B3  DS    0H
         LA    MSGREG,M0241       PREPARE TO WRITE MSG IKJ57293I
         B     LNG04A3A           GO GET MESSAGE
LNG04A3  DS    0H
         LA    MSGREG,M0240       PREPARE TO WRITE MSG IKJ57293I
         OI    LOWSW,HEXONE       INDICATE VALUE SPECIFIED WAS TOO LOW
LNG04A3A DS    0H
** THIS CODE IS EXECUTED IF THE LENGTH ATTRIBUTE WAS INCORRECT.  THE **
** DEFAULT VALUE WILL BE SUBSTITUTED AND THE USER WILL BE INFORMED.  **
         MVC   ATTRLNTH+D1(L1),D7(ATTREG) MOVE THE LENGTH ATTRIBUTE
*                                 INTO THE TABLE
BLDMSG   DS    0H
** THIS CODE DOES THE INITIAL WORK OF FINDING THE APPROPRIATE MESSAGE**
** AND SETTING UP THE CORRECT POINTERS TO THE WORK BUFFERS WHEN A    **
** MESSAGE HAS TO BE BUILT.  REGISTER 14 WILL CONTAIN THE ADDRESS OF **
** THE ROUTINE CONTROL SHOULD BE GIVEN BACK TO.                      **
LNG4A3A  DS    0H
         L     INSERTRG,OUTBUF    SET UP DSECT REGISTER
         USING MSGINST,INSERTRG   FOR MSG INSERTS TO BE BUILT
         MVI   WKINSTS,BLANK      MOVE A BLANK TO START OF INSERTS
         MVC   WKINSTS+ONE(OUTBUFRL-ONE),WKINSTS BLANK OUT OUTBUF
         LH    WORKREG,SYMLNGTH   PICK UP SYMBOL LENGTH
         LA    WORKREG,FOUR(WORKREG) CALCULATE INSERT LENGTH
         STH   WORKREG,IN11LENG   STORE INTO INSERT HEADER
         MVC   IN11TXT(L8),SYMBOL MOVE SYMBOL INTO INSERT
** THIS CODE HANDLES THE SECOND PART OF THE FIRST MESSAGE            **
         CLC   D10(L1,ATTREG),CHARZERO IS LENGTH TWO CHARACTERS
         BNE   LNG04A3D           YES, GO HANDLE TWO CHARACTERS
         MVC   IN12TXT(L1),D11(ATTREG) MOVE IN LENGTH INTO INSERT
         LA    WORKREG,SIX        PREPARE TO CALCULATE INSERT LEN
         STH   WORKREG,IN12LENG   STORE LENTH OF INSERT INTO HEADER
         B     LNG04A3E           GO GET THE SECOND LEVEL MESSAGE
LNG04A3D DS    0H
** THIS CODE HANDLES THE CASE OF THE LENGTH FIELD OF THE MESSAGE     **
** TAKING TWO BYTES.                                                 **
         MVC   IN12TXT(L2),D10(ATTREG) MOVE LENGTH INTO INSERT
         LA    WORKREG,SEVEN     CALCULATE INSERT LENGTH
         STH   WORKREG,IN12LENG   STORE LENGTH OF INSERT INTO HEADER
LNG04A3E DS    0H
         CLI   D8(ATTREG),BLANK   IS TYPE ONE CHARACTER
         BE    LNG04A3F           YES, GO HANDLE ONE CHARACTER
** THIS CODE HANDLES THE MOVE OF A TYPE FIELD OF TWO BYTES INTO THE  **
** MESSAGE.                                                          **
         MVC   IN21TXT(L2),D8(ATTREG) MOVE TEXT LENGTH INTO INSERT
         LA    WORKREG,SEVEN      CALCULATE INSERT LENGTH
         STH   WORKREG,IN21LENG   STORE LENGTH OF INSERT INTO HEADER
         B     LNG04A3G           GO GET SECOND PART
LNG04A3F DS    0H
** THIS CODE HANDLES THE MOVE OF A ONE BYTE TYPE FIELD INTO THE      **
** MESSAGE.                                                          **
         MVC   IN21TXT(L1),D9(ATTREG) MOVE TEXT LENGTH INTO INSERT
         LA    WORKREG,SIX        CALCULATE INSERT LENGTH
         STH   WORKREG,IN21LENG   STORE LENGTH OF INSERT INTO HEADER
LNG04A3G DS    0H
** THIS CODE IS RESPONSIBLE FOR HANDLING THE SECOND PART OF THE      **
** SECOND LEVEL MESSAGE.                                             **
         TM    LOWSW,HEXONE       WAS VALUE SPECIFIED TOO LOW
         BC    ONES,LNG04A3M      YES, GO PICK UP LOWEST VALUE ALLOWED
**THIS CODE HANDLES PUTTING THE HIGHEST VALUE ALLOWED INTO THE       **
**MESSAGE.                                                           **
         CLC   D4(L2,ATTREG),CHARZERO IS LENGTH FIELD ONE BYTE
         BE    LNG04A3H           YES, GO HANDLE ONE BYTE
**THIS CODE HANDLES THE CASE OF MOVING TWO BYTES                     **
         MVC   IN22TXT(L2),D5(ATTREG) MOVE INSERT TEXT LENGTH
         LA    WORKREG,SEVEN      CALCULATE INSERT LENGTH
         STH   WORKREG,IN22LENG   STORE LENGTH OF INSERT INTO HEADER
         B     LNG04A3I           GO PREPARE TO WRITE MESSAGE
LNG04A3H DS    0H
**THIS CODE HANDLES THE CASE OF MOVING A LENGTH FIELD OF ONE BYTE    **
         MVC   IN22TXT(L1),D6(ATTREG) MOVE INSERT TEXT LENGTH
         LA    WORKREG,SIX        CALCULATE INSERT LENGTH
         STH   WORKREG,IN22LENG   STORE LENGTH OF INSERT INTO HEADER
         B     LNG04A3I           GO PREPARE TO WRITE MESSAGE
LNG04A3M DS    0H
** THIS CODE HANDLES PUTTING THE LOWEST VALUE ALLOWED INTO THE       **
** MESSAGE.                                                          **
         NI    LOWSW,HEXFE        TURN VALUE SWITCH OFF
         CLC   D1(L2,ATTREG),CHARZERO IS LENGTH FIELD ONE BYTE
         BE    LNG04A3N           YES, GO HANDLE ONE BYTE
** THIS CODE HANDLES THE CASE OF MOVING TWO BYTES                    **
         MVC   IN22TXT(L2),D2(ATTREG) MOVE INSERT TEXT LENGTH
         LA    WORKREG,SEVEN      CALCULATE INSERT LENGTH
         STH   WORKREG,IN22LENG   STORE LENGTH OF INSERT INTO HEADER
         B     LNG04A3I           GO PREPARE TO WRITE MESSAGE
LNG04A3N DS    0H
** THIS CODE HANDLES THE CASE OF MOVING A LENGTH FIELD OF ONE BYTE   **
         MVC   IN22TXT(L1),D3(ATTREG) MOVE INSERT TEXT LENGTH
         LA    WORKREG,SIX        CALCULATE INSERT LENGTH
         STH   WORKREG,IN22LENG   STORE LENGTH OF INSERT INTO HEADER
LNG04A3I DS    0H
** THIS CODE PUTS THE LENGTH FIELD INTO THE FIRST TWO BYTES OF THE   **
** SECOND LEVEL MESSAGE AND PREPARES THE PARAMETER LIST TO IKJEGIO   **
** AND THEN GOES TO THAT MODULE TO HAVE THE MESSAGE PRINTED.         **
         XR    DISPLREG,DISPLREG ZERO OUT DISPLREG REGISTER
         XC    TSTIOPRM,TSTIOPRM  CLEAR I/O PARM LIST
         IKJEGSIO MSG,FIRST=M0031,INST11=(ADDR,IN11),                  *
               INST12=(ADDR,IN12),INST21=(ADDR,IN21),                  *
               INST22=(ADDR,IN22),SECOND=(MSGREG),ID=EQU13,            *
               MF=(E,TSTIOPRM)
         DROP  INSERTRG
         B     MSG06C1            BRANCH TO FINISH UP
LNG04F3  DS    0H
** THIS CODE IS RESPONSIBLE FOR MOVING THE BINARY REPRESENTATION OF  **
** THE ATTRIBUTE INTO THE SYMBOL TABLE.                              **
         L     R7,CONAREA         GET ADDRESS OF CONVERTED ATTRIBUTE
         XR    R5,R5              CLEAR A REGISTER
         IC    R5,D0(R7)          GET LENGTH OF CONVERTED AREA
         LA    R7,D1(R7)          UPDATE PT TO BEGINNING OF OUTPUT
         TM    MULTSW,HEXFOUR     WAS CONVERSION FOR MULTIPLICITY
*                                 ATTRIBUTE
         BC    ONES,LNG04F4       YES, GO MOVE MULTIPLICITY INTO TABLE
         LA    R0,ONE
         CR    R5,R0              NO, IS THERE ONE CONVERTED BYTE
         BE    LNG04G3            YES, GO MOVE ONE BYTE INTO TABLE
         MVC   ATTRLNTH(L2),D0(R7) NO, MOVE LENGTH ATTRIBUTE INTO TABLE
         B     MULT05A1           GO GET MULTIPLICITY ATTRIBUTE
LNG04G3  DS    0H
** MOVES ONE BYTE INTO LENGTH ATTRIBUTE FIELD.  ENTERED FROM LNG04F3 **
         MVC   ATTRLNTH+D1(L1),D0(R7) MOVE LENGTH ATTRIBUTE INTO TABLE
         B     MULT05A1           GO GET MULTIPLICITY ATTRIBUTE
LNG04F4  DS    0H
** THIS CODE MOVES THE MULTIPLICITY ATTRIBUTE INTO THE INCORE SYMBOL **
** TABLE.  ENTERED FROM LNG04F3.                                     **
         LA    R0,ONE
         CR    R5,R0              IS THERE ONE CONVERTED BYTE
         BE    LNG04F4A           YES, GO MOVE MULTIPLICITY ATTRIBUTE
         MVC   ATTRMULT+D1(L2),D0(R7) MOVE TWO BYTES INTO SYMBOL TABLE
         B     EXIT05H5           GO PROCESS SYMBOL
LNG04F4A DS    0H
** MOVES ONE BYTE INTO MULTIPLICITY ATTRIBUTE FIELD OF SYMBOL TABLE  **
         MVC   ATTRMULT+D2(L1),D0(R7) MOVE MULTIPLICITY INTO TABLE
         B     EXIT05H5           GO PROCESS SYMBOL
MULT05A1 DS    0H
** THE FOLLOWING CODE TESTS TO SEE IF THE MULTIPLICITY FACTOR WERE   **
** SPECIFIED AND IF NOT PUTS THE DEFAULT OF ONE INTO THE TABLE.      **
         OI    MULTSW,HEXFOUR     SET SWITCH TO INDICATE
*                                 PROCESSING OF MULTIPLICITY
         XR    R5,R5              CLEAR A REGISTER
         LH    R5,D56(PDLBASE)    OBTAIN MULTIPLICITY INDICATOR
*                                 FROM PDL
         LTR   R5,R5              WAS MULTIPLICITY SPECIFIED
         BNZ   MULT05B2           YES, GO PREPARE TO GO TO IKJEGCVT
** THIS CODE IS EXECUTED WHEN THE MULTIPLICITY ATTRIBUTE WAS NOT     **
** SPECIFIED.  IT CHECKS TO SEE IF THIS ENTRY EXISTED BEFORE.  IF SO **
** THE DEFAULT WILL BE THE PREVIOUS VALUE, IF NOT THE DEFAULT WILL BE**
** ONE.                                                              **
         TM    DUPLSW,HEXONE      DID ENTRY EXIST BEFORE
         BC    ONES,EXIT05H5      YES, SET UP TO RETURN
         MVC   ATTRMULT+D2(L1),BINRYONE  NO, PUT A ONE IN THE
*                                 MULTIPLICITY FIELD OF THE IN CORE
*                                 SYMBOL TABLE
         B     EXIT05H5           GO SET UP TO RETURN
MULT05B2 DS    0H
** SETS REGISTER 1 UP TO GO TO IKJEGCVT.                             **
         LA    PARMREG,D68(PDLBASE) PUT ADDR MULTIPLICITY PDE INTO
*                                 REGISTER 1
         MVI   D75(PDLBASE),HEX14 SET TYPE FIELD OF PDE
         B     LNG04D2            GO SET UP FOR CONVERSION
EXIT05E2 DS    0H
* THE FOLLOWING CODE HANDLES THE SERVICE ROUTINE RETURN CODES         *
         L     R15,REGSAVE        GET RETURN CODE FROM SAVEAREA
EXIT05F2 DS    0H
         B     EXIT05G2(R15)      INDEX THROUGH TABLE BY CONTENTS OF
*                                 REGISTER 15
EXIT05G2 DS    0H
         B     EXIT05H5           0 - FROM SERVICE ROUTINE-RETURN 0
         B     EXIT05H5           4 - FROM SERVICE ROUTINE-RETURN 0
         B     EXIT05H5           8 - FROM SERVICE ROUTINE-RETURN 0
         B     EXIT05H5           12 - FROM SERVICE ROUTINE-RETURN 0
         B     EXIT05J5           16 - FROM SERVICE ROUTINE-RETURN 16
         B     EXIT05J5           20 - FROM SERVICE ROUTINE-RETURN 20
         B     EXIT05J5           24 - FROM SERVICE ROUTINE-RETURN 24
ATTN05H4 DS    0H
         LA    RETCODE,RET16      SET RETURN CODE TO 16 TO INDICATE
*                                 ATTENTION ENCOUNTERED
         B     EXIT05J5           GO PREPARE TO LEAVE
EXIT05J4 DS    0H
         LA    R15,RET20          SET RETURN CODE TO 20 TO INDICATE
*                                 STAE EXIT ROUTINE WAS ENTERED
         B     EXIT05J5           GO PREPARE TO LEAVE
EXIT05G5 DS    0H
         OI    TSTFLGS4,TSTFLUSH  INDICATE IKJEGMNL SHOULD FLUSH STACK
EXIT05H5 DS    0H
** THIS SETS THE RETURN CODE TO IKJEGMNL TO ZERO.                    **
         LA    RETCODE,RET0       SET RETURN CODE TO ZERO
EXIT05J5 DS    0H
         LR    R2,R15             TRANSFER RTNCODE
         ESTAE 0,OV               REMOVE ESTAE
         LR    R15,R2             TRANSFER RTNCODE
         L     R13,D4(R13)        RESTORE SAVEAREA ADDRESS
         NI    TSTFLGS4,HEXFF-TSTRERTN TURN OFF RETRY SW
         RETURN  (14,12),RC=(15)  RELOAD REGISTERS AND RETURN
MSG06A1  DS    0H
** THIS IS ENTERED WHEN A MESSAGE SHOULD BE PRINTED AND AFTERWARDS   **
** IKJEGEQU SHOULD TERMINATE.                                        **
         OI    WRAPUP,HEXEIGHT    INDICATE PROCESSING SHOULD END
         XR    DISPLREG,DISPLREG  INDICATE MAINLINE CALLING MSGRTN
MSG06B1  DS    0H
MSG06C1  DS    0H
         B     MSGTAB(DISPLREG)   BRANCH THROUGH THE FOLLOWING TABLE
*                                 BY CONTENTS OF REGISTER 7
MSGTAB   DS    0H
         B     MSG06E2            GO BACK TO MAINLINE CODE
         B     VDCK08E3           GO BACK TO VALIDITY CHECK ROUTINE
         B     DROP09D1(RETCODE)  GO BACK TO DROP CODE
MSG06E2  DS    0H
** USED TO DETERMINE PROCESSING AFTER RETURNING FROM IKJEGIO         **
         LTR   R15,R15            RETURN CODE FROM IO A ZERO
         BNZ   EXIT05F2           NO, GO HANDLE RETURN CODE
** THE FOLLOWING CODE IS EXECUTED WHEN DISPLREG CONTAINS A ZERO      **
** INDICATING THE MESSAGE WAS PUT OUT FROM EQUATE'S MAINLINE INSTEAD **
** OF THE VALIDITY CHECK ROUTINE.                                    **
         TM    WRAPUP,HEXEIGHT    YES, SHOULD EQUATE TERMINATE
         BZ    MULT05A1           NO, GO GET MULTIPLICITY ATTR
MSG06E3  DS    0H
         B     EXIT05H5           YES, GO SET RETURN CODE AND RETURN
DROP09A1 DS    0H
** WHEN THIS ROUTINE IS ENTERED WORKREG2 POINTS TO THE SYMBOL TO BE  **
** DELETED IF ONE WERE SPECIFIED.  WORKREG CONTAINS THE CONTENTS OF  **
** SYMTABLE AND LASTENTR IS A POINTER TO SYMTABLE.  THE FOLLOWING    **
** CODE IS RESPONSIBLE FOR HANDLING THE DROP VERB.  IT REMOVES AN    **
** ENTRY OR ALL ENTRIES FROM THE IN CORE SYMBOL TABLE.               **
         LA    PDLBASE,D8(PDLBASE) BASE POINTS TO FIRST SYMBOL PDE
         LTR   WORKREG,WORKREG    DOES THE INCORE SYMBOL TABLE EXIST
         BNZ   DROP09A2           YES, GO HANDLE REQUEST
DROP09B1 DS    0H
         XC    TSTIOPRM,TSTIOPRM  ZERO OUT I/O PARM LIST
         IKJEGSIO MSG,FIRST=M0033,ID=EQU13,MF=(E,TSTIOPRM)
         B     MSG06A1            GO TO MESSAGE ROUTINE
DROP09A2 DS    0H
         TM    TSTFLGS3,NOPARMS   WAS A SYMBOL SPECIFIED
         BNO   DROP09A3           YES, GO CHECK FOR ENTRY IN TABLE
** THE FOLLOWING CODE SETS UP TO DELETE THE IN CORE SYMBOL TABLE     **
         OI    ALLSW,HEXFOUR      INDICATE ALL ENTRIES TO BE DELETED
DROP09C2 DS    0H
         L     LASTENTR,D0(WORKREG) SAVE ADDRESS OF NEXT ENTRY
         LTR   LASTENTR,LASTENTR  IS THERE ANOTHER ENTRY
         BNZ   DROP09A5           YES, GO FIGURE SIZE OF ENTRY
         ST    LASTENTR,SYMTABLE  INDICATE IN CORE SYMBLE TABLE EMPTY
         NI    ALLSW,HEXFB        NO, INDICATE THIS IS LAST ENTRY TO
*                                 BE DELETED
         B     DROP09A5           GO FIGURE SIZE OF ENTRY
** THIS SECTION OF CODE SCANS THE IN CORE SYMBOL TABLE FOR THE ENTRY **
** REQUESTED TO BE DELETED.                                          **
DROP09A3 DS    0H
         CLC   D4(L2,PDLBASE),D14(WORKREG) ARE FIELD LENGTHS SAME
         BE    DRP9A31            YES, GO CHECK SYMBOLS
DRP9A34  DS    0H
         LR    LASTENTR,WORKREG   NO, SAVE POINTER TO NEXT TO LAST
*                                 ENTRY BEING SCANNED
         L     WORKREG,D0(WORKREG) GET ADDRESS OF NEXT ENTRY
         LTR   WORKREG,WORKREG    WAS THERE ANOTHER ENTRY
         BNZ   DROP09A3           YES, GO CONTINUE CHECKING
         L     WORKREG,D0(PDLBASE) PICK UP ADDRESS TO PDE
         L     INSERTRG,OUTBUF    SET UP DSECT REGISTER FOR INSERTS
         USING MSGINST,INSERTRG
         MVC   IN11TXT(L8),D0(WORKREG) MOVE IN SYMBOL
         LH    R6,D4(PDLBASE)     PICK UP THE LENGTH
         LA    R6,FIVE(R6)        CALCULATE INSERT LENGTH
         STH   R6,IN11LENG        STORE INTO INSERT HEADER
         XC    TSTIOPRM,TSTIOPRM  ZERO OUT I/O PARM FIELDS
         IKJEGSIO MSG,FIRST=M0034,INST11=(ADDR,IN11),   CALL I/O       *
               ID=EQU13,MF=(E,TSTIOPRM) FOR ERROR MSG
         DROP  INSERTRG
         LA    DISPLREG,D8        INDICATE DROP CODE CALLING MSG RTN
         B     MSG06C1            GO TO THE MESSAGE RTN CODE ROUTINE
DRP09B3A MVC   D0(L0,OUTBUFRG),D0(WORKREG) MOVE SYMBOL INTO BUFFER
DROP09D1 DS    0H
** THE FOLLOWING BRANCH TABLE IS USED TO DETERMINE WHERE CONTROL     **
** SHOULD BE GIVEN AFTER RETURNING FROM IKJEGIO.                     **
         B     DROP09D5           GO SEE IF THERE IS ANOTHER ENTRY
*                                 TO DELETE
         B     DROP09D5           SAME AS ABOVE
         B     EXIT05F2           GO HANDLE SERVICE RTN RETURN CODE
         B     EXIT05F2           GO HANDLE SERVICE RTN RETURN CODE
         B     EXIT05F2           GO HANDLE SERVICE RTN RETURN CODE
DRP9A32  CLC   D0(L0,WORKREG2),D16(WORKREG) ARE SYMBOLS THE SAME
DRP9A31  DS    0H
         LH    R6,D4(PDLBASE)     PUT LENGTH OF SYMBOL INTO REGISTER
         BCTR  R6,ZERO            TAKE ONE FROM LENGTH OF SYMBOL
         EX    R6,DRP9A32         GO SEE IF SYMBOLS ARE SAME
         BNE   DRP9A34            NO, CONTINUE SCANNING
DROP09A4 DS    0H
** THIS CODE PLACES THE POINTER TO THE ENTRY FOLLOWING THE ENTRY TO  **
** BE DELETED INTO THE ENTRY IN FRONT OF THE ENTRY TO BE DELETED.    **
         MVC   D0(L4,LASTENTR),D0(WORKREG) MOVE FORWARD POINTER INTO
*                                 PREVIOUS ENTRY
DROP09A5 DS    0H
** THIS CODE CALCULATES THE LENGTH OF THE ENTRY TO BE DELETED        **
         XR    R1,R1              CLEAR A REGISTER
         LH    R1,D14(WORKREG)    GET LENGTH OF SYMBOL AND ADD 16 TO
         LA    R1,D16(R1)         IT FOR ENTRY SIZE
         LR    R0,R1              PUT LENGTH INTO REGISTER 0 FOR
*                                 FREEMAIN
         LR    R1,WORKREG         PUT ADDRESS OF AREA TO BE DELETED
*                                 INTO REGISTER 1
         FREEMAIN  RC,SP=1,LV=(0),A=(1) ISSUE FREEMAIN
         LTR   R15,R15            TEST THE RETURN CODE
         BZ    OKFREEMN           OK IF  ZERO CONTINUE
         LR    R6,R15             TRANSFER RETURN CODE FOR I/O
         XC    TSTIOPRM,TSTIOPRM  CLEAR PARM LIST FOR I/O
         IKJEGSIO SVCERR,SVC=120,RC=(R6),ID=EQU13,MF=(E,TSTIOPRM)
         CH    R15,H16            TEST FOR SERIOUS ERROR
         BL    EXIT05H5           NOT SERIOUS CONTINUE
         B     EXIT05J5           IF SERIOUS GET OUT WITH RTN CODE
OKFREEMN DS    0H
DROP09C5 DS    0H
         TM    ALLSW,HEXFOUR      ARE ALL ENTRIES TO BE DELETED
         BZ    DROP9C5A           NO, GO TEST FOR NEXT ENTRY
         LR    WORKREG,LASTENTR   YES, GET ADDRESS OF NEXT ENTRY
         B     DROP09C2           GO SET UP TO DELETE NEXT ENTRY
DROP9C5A DS    0H
         TM    TSTFLGS3,NOPARMS   WERE SYMBOLS SPECIFIED
         BO    EXIT05H5           NO, RETURN TO IKJEGMNL
DROP09D5 DS    0H
** THIS CODE TESTS THE WORD FOLLOWING THE SYMBOL PDE FOR NON ZERO    **
** WHICH INDICATES THERE IS A LIST OF SYMBOLS TO BE PROCESSED.       **
         CLC   D8(L0,PDLBASE),ENDCHAIN IS THERE ANOTHER SYMBOL
         BE    EXIT05H5           NO, GO RETURN TO IKJEGMNL
DROP09D4 DS    0H
         L     WORKREG,SYMTABLE   GET ADDRESS OF SYMBOL TABLE
         LTR   WORKREG,WORKREG    DOES THE INCORE SYMBOL TABLE EXIST
         BZ    DROP09B1           NO, GO WRITE MESSAGE
         L     PDLBASE,D8(PDLBASE) YES, POINT TO NEXT SYMBOL PDE
         LA    LASTENTR,SYMTABLE   GET ADDRESS OF LAST ENTRY
         L     WORKREG2,D0(PDLBASE) GET ADDRESS OF SYMBOL
         B     DROP09A3            GO FIND SYMBOL IN SYMBOL TABLE
IKJEGVDK DS    0H
** THIS CODE IS RESPONSIBLE FOR ANALYSING THE PARAMETERS FOR EQUATE  **
** AFTER PARSE HAS CHECKED ONE FOR SYNTAX ERRORS.                    **
         SAVE  (14,12)            SAVE PARSE'S REGISTERS
         L     R15,D4(R1)         OBTAIN ADDR OF SAVEAREA
         LM    R2,R12,D28(R15)    RESTORE REGISTERS
         L     R15,REGSAVE3       GET ADDR OF VALIDITY CHECK RTN'S
*                                 SAVEAREA
         ST    R15,D8(R13)        STORE ADDRESS OF NEW SAVEAREA
         ST    R13,D4(R15)        STORE CALLERS SAVEAREA ADDRESS
*                                 IN VALIDITY RTN'S SAVEAREA
         LR    R13,R15            R13 POINTS TO VALIDITY CHECK
*                                 RTN'S SAVEAREA
         OI    TSTFLGS4,TSTVALCK  TURN ON VALIDITY CHECK BIT
         L     R7,OUTBUF          PICK UP ADDRESS OF OUTBUF
         SR    R8,R8              ZERO REGISTER
         ST    R8,D0(R7)          STORE DEFAULT (NO MESSAGE INDICATOR)
         L     PDEPTR,D0(PARMREG) PDEPTR POINTS TO THE PDE PASSED
*                                 TO THE VALIDITY RTN FROM
*                                 IKJPARS
         TM    CMMNDSW,HEXTWO     IS THIS THE ADDRESS EXIT
         BC    ONES,VDCK08A1      NO, GO TO THE ATTRIBUTE EXIT
** THIS CODE ASSURES THAT THE ADDRESS WAS NOT SPECIFIED AS A REGISTER**
** ADDRESS UNLESS THE REGISTER WAS USED FOR INDIRECT ADDRESSING.     **
** THE CHECK IS FIRST MADE ON THE INDIRECT COUNT FIELD OF THE PDE    **
** AND IF THIS IS NON ZERO INDIRECT ADDRESSING WAS USED.  THE ADDRESS**
** IS SPECIFIED CORRECTLY AND PROCESSING IS CONTINUED AT VDCK07G2.   **
** IF THE INDIRECT COUNT FIELD IS ZERO A CHECK HAS TO BE MADE IN     **
** FLAGS 4 OF THE PDE.  FLAGS 4 INDICATES THE TYPE OF ADDRESS.  IF   **
** THE TYPE IS GENERAL REGISTER, DOUBLE PRECISION FLOATING POINT     **
** REGISTER OR SINGLE PRECISION FLOATING POINT REGISTER THE ADDRESS  **
** IS INCORRECTLY SPECIFIED AND THE VALIDITY CHECK ROUTINE WILL      **
** RETURN TO PARSE WITH A RETURN CODE OF EIGHT.                      **
         USING IKJPARMA,PDEPTR    ESTABLISH ADDRESSABILITY TO ADDR PDE
         CLC   PDEINDCT(L2),HEXZER0 WAS INDIRECT ADDRESSING USED
         BNE   VDCK07G2           YES, GO PROCESS
         TM    PDEFLG4,REGSMASK   NO, IS TYPE OF ADDR REGISTER
         BNZ   VDCK07F3           YES, GO WRITE MESSAGE
VDCK07G2 DS    0H
** THIS CODE SETS UP THE REGISTERS TO GO TO IKJEGCVT (CONVERT) TO    **
** CONVERT THE ADDRESS TO BINARY.                                    **
         OI    CMMNDSW,HEXTWO     TURN SWITCH ON TO INDICATE THE
*                                 ADDRESS EXIT HAS BEEN TAKEN
         XR    R0,R0              CLEAR REG 0 TO INDICATE BINARY
*                                 CONVERSION NEEDED
         LNR   PARMREG,PDEPTR     REG 1 SHOULD BE NEGATIVE TO
*                                 INDICATE ADDRESS CONVERSION AND
*                                 SHOULD POINT TO THE PDE
         L     R15,TSTCONVT       OBTAIN ADDRESS OF IKJEGCVT FROM
*                                 TCOMTAB
         BALR  RETURN,R15         GO TO IKJEGCVT TO CONVERT THE
*                                 ADDRESS TO BINARY
         LPR   PARMREG,PARMREG    RESTORE REGISTER 1 TO POSITIVE
         B     VDCK07J2(RETCODE)  TAKE ONE OF THE FOLLOWING BRANCHES
*                                 DEPENDENT ON THE CONTENTS OF REG 15
VDCK07J2 DS    0H
** USED TO DETERMINE WHAT TO DO UPON RETURN FROM IKJEGCVT            **
         B     VDCK08C1           GO HANDLE 0 RETURN FROM IKJEGCVT
         B     VDCK07K3           GO HANDLE 4 RETURN FROM IKJEGCVT
         B     VDCK08C2           GO HANDLE 8 RETURN FROM IKJEGSYM
         B     VDCK08C2           GO HANDLE 12 RETURN FROM IKJEGSYM
         B     VDCK08D2           16 - ATTENTION INTERRUPT-RETURN
         B     VDCK08D2           20 - CONVERT OR SYM BLEW-RETURN
VDCK07K3 DS    0H
         NI    CMMNDSW,HEXFD      INDICATE ADDRESS NOT PROCESSED
         B     VDCK08B3           GO INDICATE PARSE SHOULD PROMPT
*                                 WITH REENTER
VDCK7F3  DS    0H
VDCK07F3 DS    0H
         XC    TSTIOPRM,TSTIOPRM  ZERO OUT I/O PARM FIELDS
         IKJEGSIO MSG,FIRST=M0072,INST11=(APDE,(PDEPTR)), CALL I/O     *
               SECOND=M0274,ID=EQU13,MF=(E,TSTIOPRM) FOR ERROR MSG
VDCK07F5 DS    0H
** CALCULATES PROPER DISPLACEMENT THAT BRINGS CONTROL BACK TO THE    **
** VALIDITY CHECK ROUTINE AFTER GOING TO THE MESSAGE ROUTINE.        **
         LA    DISPLREG,D4        INDICATE VALIDITY CHECK RTN GOING TO
*                                 MESSAGE ROUTINE
         B     MSG06C1            GO TO THE MESSAGE ROUTINE
VDCK08E3 DS    0H
         LTR   R15,R15            RETURN CODE FROM IO A ZERO
         BZ    VDCK08B4           YES, RETURN TO IKJPARS WITH AN 8
         B     VDCK08D2           NO, RETURN TO IKJPARS WITH A 12
VDCK08A1 DS    0H
** THIS CODE IS RESPONSIBLE FOR CHECKING THE INTERGER SUPPLIED FOR   **
** LENGTH OR MULTIPLICITY BEING SPECIFIED LESS THAN ONE OR GREATER   **
** THAN 256.                                                         **
         XR    WORKREG,WORKREG    CLEAR A REGISTER
         L     STRNGPTR,D0(PDEPTR) GET ADDR OF CHARACTER STRING
         LH    WORKREG,D4(PDEPTR) OBTAIN LENGTH OF ATTRIBUTE
         SLL   WORKREG,TWO        MULTIPLY BY FOUR
VDCKTAB3 DS    0H
         B     VDCKTAB3(WORKREG)  GO PROCESS ACCORDING TO THE NUMBER
*                                 OF BYTES IN THE ATTRIBUTE
         B     VDCKONE            GO HANDLE ONE BYTE
         B     VDCKTWO            GO HANDLE TWO BYTES
         B     VDCKTHRE           GO HANDLE THREE BYTES
** VDCKONE,VDCKTWO, AND VDCKTHREE ALL HAVE THE RESPONSIBILITY OF     **
** CHECKING TO MAKE SURE THE INTERGER SUPPLIED IS NOT ZERO OR GREATER**
** THAN 256.                                                         **
VDCKONE  DS    0H
         CLC   D0(L1,STRNGPTR),CHARZERO  IS INTERGER ZERO
         BE    VDCK08A2           YES, GO PREPARE TO WRITE A MESSAGE
         B     VDCK08C1           NO, GO SET UP TO RETURN
VDCK08A2 DS    0H
         XC    TSTIOPRM,TSTIOPRM  CLEAR I/O PARM FIELDS
         IKJEGSIO MSG,FIRST=M0032,SECOND=M0278,ID=EQU13, CALL I/O      *
               MF=(E,TSTIOPRM)    FOR ERROR MESSAGE
         B     VDCK07F5           GO PREPARE TO RETURN
VDCKTWO  DS    0H
         CLC   D0(L2,STRNGPTR),CHARZERO IS INTERGER ZERO
         BE    VDCK08A2           YES, GO PREPARE TO WRITE A MESSAGE
         B     VDCK08C1           NO, GO SET UP TO RETURN
VDCKTHRE DS    0H
         CLC   D0(L3,STRNGPTR),CHARZERO IS INTERGER ZERO
         BE    VDCK08A2           YES, GO PREPARE TO WRITE A MESSAGE
         CLC   D0(L3,STRNGPTR),MAXLNGTH IS INTERGER GREATER THAN 256
         BH    VDCK08A2           YES, GO PREPARE TO WRITE A MESSAGE
VDCK08C1 DS    0H
** THIS SETS THE RETURN CODE BACK TO IKJPARS TO A ZERO               **
         LA    RETCODE,RET0       SET RETURN CODE TO ZERO
VDCK08D1 DS    0H
** THIS CODE IS RESPONSIBLE FOR RESTORING IKJPARS'S REGISTERS AND    **
** RETURNING TO IKJPARS WITH A CONDITION CODE IN REGISTER 15 TO      **
** INDICATE TO PARSE WHAT EQUATE WANTS PARSE TO DO NEXT.             **
         L     R13,D4(R13)        RESTORE SAVEAREA ADDRESS
         NI    TSTFLGS4,HEXFF-TSTVALCK  TURN OFF VALIDITY CHECK BIT
         L     R5,OUTBUF          PICK UP POINTER TO OUTBUF
         LH    R6,D0(R5)          PICK MSG LENGTH FIELD
         LTR   R6,R6              TEST FOR PRESENTS OF MSG
         BZ    NO2NDMSG           IF ZERO THEN THER ISN'T A MESSAGE
         L     R1,D24(R13)        PICK UP POINTER TO PARSE PARM LIST
         ST    R5,D8(R1)          STORE ADDRESS OF MESSAGE IN P. L.
NO2NDMSG DS    0H
         RETURN (14,12),RC=(15)   RELOAD REGISTERS AND RETURN
VDCK08C2 DS    0H
VDCK08D2 DS    0H
         ST    R15,REGSAVE        SAVE RETURN CODE FOR LATER USE
         LA    RETCODE,RET12      SET RETURN CODE TO 12
         B     VDCK08D1           GO PREPARE TO RETURN TO IKJPARS
VDCK08B3 DS    0H
VDCK08B4 DS    0H
         LA    RETCODE,RET8       SET RETURN CODE TO 8
         B     VDCK08D1           GO PREPARE TO RETURN TO IKJPARS
         DROP  PDEPTR             DROP ADDRESSABILITY TO PDE
**********************************************************************
*                        STAE RETRY ROUTINE                          *
**********************************************************************
ESTAERTN DS    0H
         L     WORKREG,CVTPTR     GET CVT ADDRESS
         USING CVT,WORKREG        ESTABLISH ADDRESSABILITY TO CVT
         L     WORKREG,CVTTCBP    GET ADDRESS OF TCB ADDRESS
         L     WORKREG,D4(WORKREG) GET ADDRESS OF CURRENT TCB
         DROP  WORKREG            DROP ADDRESSABILITY TO CVT
         USING TCB,WORKREG        ESTABLISH ADDRESSABLITY TO TCB
         L     R9,TCBTRN          PICK UP POINTER TO TCOMTAB FROM
         OI    TSTFLGS4,TSTRERTN  TURN ON RETRY SW
*                                 TCBTRN FIELD OF TEST'S TCB
         L     R13,REGSAVE2       GET ADDRESS OF REGISTERS
         L     BASEREG,D64(R13)   RESET ADDRESSABILITY
         B     EXIT05J4           GO SET RETURN CODE FOR IKJEGMNL
         EJECT
IKJEGSPL IKJEGSPL RTRY=ESTAERTN,ABNTB=STATBL,MODNM=IKJEGEQU,TNM=EQUATE/*
               DROP
ZZZZZZZZ DC    52C'Z'              TO BE USED FOR MAINTENANCE
H16      DC    H'16'              USED TO TEST RETURN CODES
ATTRTAB  DS    0H
** THIS TABLE CONTAINS THE PROPER DATA TYPE REPRESENTATION FOR THE   **
** VARIOUS TYPE ATTRIBUTES ALONG WITH THE MIN LENGTH FOLLOWED BY THE **
** MAX LENGTH THAT CAN BE SPECIFIED FOR EACH TYPE.  THESE LENGTHS ARE**
** FOLLOWED BY THE DEFAULT LENGTH.                                   **
CENTRY   DC    X'00'              TYPE ATTRIBUTE IS CHARACTER
         DC    C'001'             MIN LENGTH
         DC    C'256'             MAX LENGTH
         DC    X'01'              DEFAULT LENGTH IN BINARY
         DC    C' C'              TYPE IN PRINTABLE FORM
         DC    C'01'              LENGTH IN PRINTABLE FORM
XENTRY   DC    X'04'              TYPE ATTRIBUTE IS HEX
         DC    C'001'             MIN LENGTH
         DC    C'256'             MAX LENGTH
         DC    X'04'              DEFAULT LENGTH IN BINARY
         DC    C' X'              TYPE IN PRINTABLE FORM
         DC    C'04'              LENGTH IN PRINTABLE FORM
BENTRY   DC    X'08'              TYPE ATTRIBUTE IS BINARY
         DC    C'001'             MIN LENGTH
         DC    C'256'             MAX LENGTH
         DC    X'01'              DEFAULT LENGTH IN BINARY
         DC    C' B'              TYPE IN PRINTABLE FORM
         DC    C'01'              LENGTH DEFAULT IN PRINTABLE FORM
IENTRY   DC    X'0C'              TYPE ATTRIBUTE IS INSTRUCTION
         DC    C'001'             MIN LENGTH
         DC    C'256'             MAX LENGTH
         DC    X'01'              DEFAULT LENGTH
         DC    C' I'              TYPE IN PRINTABLE FORM
         DC    C'01'              DEFAULT LENGTH IN PRINTABLE FORM
FENTRY   DC    X'10'              TYPE ATTRIBUTE IS FIXED PT, FULLWORD
         DC    C'001'             MIN LENGTH
         DC    C'008'             MAX LENGTH
         DC    X'04'              DEFAULT LENGTH
         DC    C' F'              TYPE IN PRINTABLE FORM
         DC    C'04'              DEFAULT IN PRINTABLE FORM
HENTRY   DC    X'14'              TYPE ATTRIBUTE IS FIXED PT, HALFWORD
         DC    C'001'             MIN LENGTH
         DC    C'008'             MAX LENGTH
         DC    X'02'              DEFAULT LENGTH IN BINARY
         DC    C' H'              TYPE IN PRINTABLE FORM
         DC    C'02'              DEFAULT LENGTH IN PRINTABLE FORM
EENTRY   DC    X'18'              TYPE ATTRIBUTE IS FLT PT. FULLWORD
         DC    C'001'             MIN LENGTH
         DC    C'008'             MAX LENGTH
         DC    X'04'              DEFAULT LENGTH IN BINARY
         DC    C' E'              TYPE IN PRINTABLE FORM
         DC    C'04'              DEFAULT LENGTH IN PRINTABLE FORM
DENTRY   DC    X'1C'              TYPE ATTRIBUTE IS FLT PT. DBLWORD
         DC    C'001'             MIN LENGTH
         DC    C'008'             MAX LENGTH
         DC    X'08'              DEFAULT LENGTH
         DC    C' D'              TYPE IN PRINTABLE FORM
         DC    C'08'              DEFAULT LENGTH IN PRINTABLE FORM
AQENTRY  DC    X'20'              TYPE ATTRIBUTE IS A AND Q ADDR CONST
         DC    C'001'             MIN LENGTH
         DC    C'004'             MAX LENGTH
         DC    X'04'              DEFAULT LENGTH IN BINARY
         DC    C' A'              TYPE IN PRINTABLE FORM
         DC    C'04'              DEFAULT LENGTH IN PRINTABLE FORM
YENTRY   DC    X'24'              TYPE ATTRIBUTE IS Y ADDR CONSTANT
         DC    C'001'             MIN LENGTH
         DC    C'002'             MAX LENGTH
         DC    X'02'              DEFAULT LENGTH
         DC    C' Y'              TYPE IN PRINTABLE FORM
         DC    C'02'              DEFAULT LENGTH IN PRINTABLE FORM
SENTRY   DC    X'28'              TYPE ATTRIBUTE IS S ADDR CONSTANT
         DC    C'002'             MIN LENGTH
         DC    C'002'             MAX LENGTH
         DC    X'02'              DEFAULT LENGTH IN BINARY
         DC    C' S'              TYPE IN PRINTABLE FORM
         DC    C'02'              DEFAULT LENGTH IN PRINTABLE FORM
PENTRY   DC    X'30'              TYPE ATTRIBUTE IS PACKED DECIMAL
         DC    C'001'             MIN LENGTH
         DC    C'016'             MAX LENGTH
         DC    X'01'              DEFAULT LENGTH IN BINARY
         DC    C' P'              TYPE IN PRINTABLE FORM
         DC    C'01'              DEFAULT LENGTH IN PRINTABLE FORM
ZENTRY   DC    X'34'              TYPE ATTRIBUTE IS ZONED DECIMAL
         DC    C'001'             MIN LENGTH
         DC    C'016'             MAX LENGTH
         DC    X'01'              DEFAULT LENGTH
         DC    C' Z'              TYPE IN PRINTABLE FORM
         DC    C'01'              DEFAULT LENGTH IN PRINTABLE FORM
         EJECT
BINRYONE DC    X'01'              BINARY ONE-USED IN DEFAULT IN LENGTH
*                                 ATTRIBUTE FIELD
FULLWORD DC    X'03'              USED TO TEST FOR FULLWORD BOUNDARY
HEXZER0  DC    X'0000'            USED TO TEST FOR INDIRECT ADDRESSING
ENDCHAIN DC    X'FF000000'        USED TO TEST FOR END OF PDL CHAIN
CHARZERO DC    C'000000'          USED FOR INITIALIZING AND TESTING
*                                 VALUE SPECIFIED FOR MULTIPLICITY AND
*                                 LENGTH ATTRIBUTES
MAXLNGTH DC    C'256'             MAXIMUN LENGTH ALLOWED SPECIFIED
*                                 FOR LENGTH AND MULTIPLICITY
*                                 ATTRIBUTES
BASE     DC    A(IKJEGEQU)        ADDRESS OF IKJEGEQU CSECT
PARSADDR DC    V(IKJEGPAR)        ADDRESS OF PCL FOR IKJPARS-EQUATE
PARSDROP DC    V(IKJEGPRS)        ADDRESS OF PCL FOR IKJPARS-DROP
POOLONE  DC    X'01000000'        SUBPOOL NUMBER FOR GETMAIN
** THE FOLLOWING IS THE STAE MESSAGE TABLE                           **
STATBL   DS    0F
         DC    AL1(99),AL3(PARSBLOW)  PARSE LINK FAILED
         DC    AL1(92),AL3(SYM02G3)   GETMAIN FAILED
         DC    AL1(HEXFF)             END OF STAE ABEND TABLE
RETRYADR DC    AL3(ESTAERTN)      ADDRESS OF STAE EXIST ROUTINE
STAEL2   DS    0F
STAELIST ESTAE STAELIST,MF=L      LIST FORM STAE MACRO
STAELEN  EQU   *-STAELIST         LENGTH OF STAE LIST
         EJECT
IKJEGPAR IKJPARM DSECT=DSECTEQU
GETSYMBL IKJIDENT 'SYMBOL',MAXLNTH=8,OTHER=ALPHANUM,                   X
               PROMPT='SYMBOL'
GETADDR  IKJPOSIT ADDRESS,PROMPT='ADDRESS',VALIDCK=IKJEGVDK
TYPEADDR IKJKEYWD
         IKJNAME 'C'
         IKJNAME 'X'
         IKJNAME 'B'
         IKJNAME 'I'
         IKJNAME 'F'
         IKJNAME 'H'
         IKJNAME 'E'
         IKJNAME 'D'
         IKJNAME 'A'
         IKJNAME 'Y'
         IKJNAME 'S'
         IKJNAME 'P'
         IKJNAME 'Z'
TYPELNTH IKJKEYWD
         IKJNAME 'LENGTH',SUBFLD=LENGTHCD                        A43351
TYPEMULT IKJKEYWD
         IKJNAME 'MULTIPLE',SUBFLD=MULTCD                        A43351
LENGTHCD IKJSUBF
LENGTH   IKJIDENT  'LENGTH',FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=3,     *
               PROMPT='INTEGER FOR LENGTH',VALIDCK=IKJEGVDK
MULTCD   IKJSUBF
MULTPCTY IKJIDENT  'MULTIPLICITY FACTOR',FIRST=NUMERIC,OTHER=NUMERIC,  *
               PROMPT='INTEGER FOR MULTIPLICITY',VALIDCK=IKJEGVDK
         IKJENDP
IKJEGPRS IKJPARM DSECT=DSECTDRP
DROPSYM  IKJIDENT 'SYMBOL',LIST,MAXLNTH=8,OTHER=ALPHANUM,              *
               PROMPT='SYMBOL'
         IKJENDP
         EJECT
CVT      DSECT
         CVT
         EJECT
         IKJTCB
         EJECT
TCOMTAB  TCOMTAB
         EJECT
         TSTCWORK
         EJECT
AREAWORK DSECT
PPLAREA  DS    7F                 PARSE PARAMETER LIST-DESCRIPTION
*                                 IN PPL MACRO EXPANSION
** THE FOLLOWING TWO WORDS CANNOT BE SEPARATED.  USED AS A PARAMETER **
** LIST TO GO TO IKJEGIO.                                            **
ADDRONE  DS     A                 SAVEAREA FOR ADDR OF 1ST LEVEL MSG
ADDRTWO  DS     A                 SAVEAREA FOR ADDR OF 2ND LEVEL MSG
REGSAVE  DS     F                 SAVEAREA FOR SERVICE RTN RETURN CODES
STAEL    DS    0F                 ALIGN TO FULLWORD BOUNDARY
STAEAREA DS    18C                STAE LIST FORM WORKAREA
LNGTWORK DS    3X                 WORKAREA FOR LENGTH ATTRIBUTE
DUPLSW   EQU    *                 BIT 1 INDICATES ON (X'01')
CMMNDSW  EQU    *                 ADDR EXIT SWITCH ON -(X'02')
MULTSW   EQU    *                 BIT 3 INDICATES ON (X'04')
WRAPUP   DS     X                 TERMINATE SWITCH ON - (X'08')
LOWSW    EQU    *                 LOW VALUE SWITCH ON - (X'01')
DROPSW   EQU    *                 DROP SWITCH ON - (X'02')
ALLSW    DS     X                 DELETE ENTRIE TABLE ON - (X'04')
ENDWORK  EQU    *
         EJECT
ENTRY    DSECT
** THE FOLLOWING SEVEN FIELDS CANNOT BE SEPARATED.                   **
TABENTR  DS    0F
CHAIN    DS     A                 POINTER TO NEXT ENTRY IN SYM TABLE
ADDRSYM  DS     A                 LOAD ADDRESS OF SYMBOL
ATTRTYPE DS     X                 TYPE ATTRIBUTE FIELD
ATTRMULT DS    3X                 MULTIPLICITY ATTRIBUTE FIELD
ATTRLNTH DS    2X                 LENGTH ATTRIBUTE FIELD
SYMLNGTH DS    2X                 LENGTH OF SYMBOL
SYMBOL   DS    8X                 SYMBOL FIELD
         EJECT
** THE FOLLOWING DSECT WILL BE USED TO BUILD MESSAGE INSERTS         **
MSGINST  DSECT
WKINSTS  DS    48X
         ORG   WKINSTS
IN11     DS    0H
IN11LENG DS    H                  HALFWORD WHICH WILL CONTAIN INS. LG
         DS    H                  FILLER
IN11TXT  DS    8C                 AREA FOR TEXT OF THE INSERT
IN12     DS    0H
IN12LENG DS    H                  HALFWORD WHICH WILL CONTAIN INS. LG
         DS    H                  FILLER
IN12TXT  DS    8C                 AREA FOR TEXT OF THE INSERT
IN21     DS    0H
IN21LENG DS    H                  HALFWORD WHICH WILL CONTAIN INS. LG
         DS    H                  FILLER
IN21TXT  DS    8C                 AREA FOR TEXT OF THE INSERT
IN22     DS    0H
IN22LENG DS    H                  HALFWORD WHICH WILL CONTAIN INS. LG
         DS    H                  FILLER
IN22TXT  DS    8C                 AREA FOR TEXT OF THE INSERT
         EJECT
IKJPARMA IKJPARMA
         EJECT
         IKJPPL
         END
