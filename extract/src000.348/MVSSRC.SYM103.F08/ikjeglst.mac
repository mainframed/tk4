         TITLE 'IKJEGLST, ''LIST'' SUBCOMMAND OF TEST, FIRST LOAD'
* /* START OF SPECIFICATIONS ****
*02*  PROCESSOR = ASSEMBLER
**** END OF SPECIFICATIONS ***/
*A375600,375700                                                @YM06177
*A453600,453700,635100,635200                                 @ZA07140
*C463000                                             @ZA09259,@ZA07138
***********************************************************************
*
* STATUS--VERSION NO. 01, OS/VS2 RELEASE NO. 02
*
* FUNCTION--
*    THIS MODULE IS THE FIRST LOAD OF THE 'LIST' SUBCOMMAND OF TEST.
*    IT IS ENTERED INITIALLY WHENEVER A LIST SUBCOMMAND IS ENCOUNTERED
*    BY THE TEST MAINLINE ROUTINE. THE LIST SUBCOMMAND OF TEST
*    DISPLAYS REQUESTED AREAS OF MAIN STORAGE AND/OR THE GENERAL
*    AND FLOATING POINT REGISTERS. THIS MODULE PREFORMS THE LIST
*    INITIALIZATION FUNCTION, THE LIST IN HEXADECIMAL FORMAT FUNCTION,
*    AND THE LIST GENERAL AND FLOATING POINT REGISTERS FUNCTION.
*
* ENTRY POINTS--
*         IKJEGLST
*         1. ENTERED FROM TEST MAINLINE FOR THE LIST SUB-CMD.
*         2. ENTERED FROM IKJEGLSA WITH 'PCHLSTVL' SW IN TSTFLGS1
*         SET TO ONE IF THE NEXT ADDRESS IN AN ADDRESS LIST
*         IS REGISTER TYPE OR IF THE FORMAT TYPE IS HEX (X).
*         IKJPARSE  TO PARSE THE CUBCOMMAND BUFFER.
*
* INPUT--
*    ONE LINE OF INPUT FROM TERMINAL IN INPUT BUFFER.
*
* OUTPUT--
*    LINES TO THE TERMINAL DISPLAYING REQUESTED DATA, OR, IF THE
*    PRINT KEYWORD WAS SPECIFIED, THE DATA IS WRITTEN TO A DATA SET.
*
* EXTERNAL REFERENCES--
*         IKJEGCVT  FOR CONVERSION OF ADDRESSES AND DATA FROM MACHINE
*         FORMAT TO PRINTABLE FORMAT. FOR CONVERSION OF ADDRESSES,
*         CVT IS ENTERED WITH THE HIGH ORDER BIT OF REG 0 SET TO ONE
*         AND REGISTER 1 CONTAINING THE COMPLEMENT OF THE ADDRESS OF
*         AN ADDRESS PDE. THE ADDRESS PDE DESCRIBES THE ADDRESS TO BE
*         CONVERTED. FOR DATA CONVERSIONS, REG 0 IS SET TO ZERO, AND
*         REG 1 CONTAINS THE ADDRESS OF A VALUE PDE DESCRIBING THE
*         DATA TO BE CONVERTED.
*
*         IKJEGIO  TO OUTPUT DATA TO THE TERMINAL OR TO A PRINT DATA
*         SET, AND TO OUTPUT MESSAGES TO THE TERMINAL.
*         IKJPARSE  TO PARSE THE SUB-COMMAND CHAIN.
*
* EXITS, NORMAL--
*         BRANCH REGISTER 14 TO THE ORIGINAL CALLER OF LIST WHEN THE
*         LAST ADDRESS PDE HAS BEEN PROCESSED.
*         XCTL TO IKJEGLSA IF TYPE ATTRIBUTE IS ONE OF THE FOLLOWING-
*         A, B, C, D, E, F, H, I, P, Q, S, V, Y, OR Z.
*
* EXITS, ERROR--
*         NONE
*
* TABLES/WORK AREAS --
*    TCOMTAB  POINTED AT BY REG 9, IS THE COMMUNICATIONS TABLE FOR THE
*    TEST PROCESSOR.
*
*    LSTWORK  THE MAPPING DSECT FOR THE WORK AREA USED BY IKJEGLST AND
*    IKJEGLSA. IT HOLDS WORKING COPIES OF THE ATTRIBUTES, ADDRESSES
*    FOR THE DATA CURRENTLY BEING LISTED, PARAMETER LISTS FOR CALLING
*    VARIOUS ROUTINES, AND A DATA BUFFER FOR REMOVING BREAKPOINT SVC'S
*
*    PARAMETER DESCRIPTOR LIST  (PDE) SET UP BY PARSE
*                                                                     *
* ATTRIBUTES--
*    REENTRANT, REFRESHABLE, PROBLEM PROGRAM.
*
* CHARACTER CODE DEPENDENCY--
*
* NOTES--
*
* CHANGE-ACTIVITY -
*                 APAR OZ07138 - CHANGES TO USE THE CORRECT RB
*                 WHEN COPYING REGISTERS. THE CORRECT POINTER
*                 IS IN TCOMTAB IN ECBPP+1.
*                 APAR OZ09259 - SAME AS ABOVE
*
***********************************************************************
         TITLE 'IKJEGLST, ''LIST'', EUQATES'
         COPY  IKJEGSIO            OBTAIN IO CALLING MACROS
IKJEGLST CSECT
         SPACE 1
***********************************************************************
         SPACE 1
*  REGISTER EQUATES.
         SPACE
R0       EQU   0                   WORK REG
R1       EQU   1                   PARAMETER REG
R2       EQU   2                   WORK REG
R3       EQU   3                   WORK REG
R4       EQU   4                   IN PROCESS SECTION, LENTH CNTRL CTR
R5       EQU   5                   WORK REG
R6       EQU   6                   IN PROCESS SECTION, CUR BUF PTR
R7       EQU   7                   INTERNAL LINKAGE REGISTER
R8       EQU   8                   POINTS TO CURRENT ADDRESS PDE
R9       EQU   9                   BASE FOR TCOMTAB DSECT
R10      EQU   10                  BASE FOR LSTWORK DSECT
R11      EQU   11                  *** SPARE REGISTER, FOR MAINTAINANCE
R12      EQU   12                  PROGRAM BASE REGISTER
R13      EQU   13                  PROGRAM SAVE AREA
R14      EQU   14                  EXTERNAL LINKAGE REGISTER
R15      EQU   15                  EXTERNAL LINKAGE REGISTER
         SPACE 1
***********************************************************************
         SPACE 2
*  DATA EQUATES FOR OPERANDS OF IMMEDIATE TYPE INSTRUCTIONS.
         SPACE
NULL     EQU   0                   USED FOR BALR R,0 AND BCTR R,0.
ZERO     EQU   0                   SYMBOLIC EQUATE
ONE      EQU   1                   SYMBOLIC EQUATE
TWO      EQU   2                   SYMBOLIC EQUATE
THREE    EQU   3                   USED WHERE AN ABSOLUTE 3 IS REQ'D
FOUR     EQU   4                   SYMBOLIC EQUATE
FIVE     EQU   5                   SYMBOLIC EQUATE
EIGHT    EQU   8                   SYMBOLIC EQUATE
TWELVE   EQU   12                  SYMBOLIC FOR 12, USED AS AN RC
SIXTEEN  EQU   16                  SYMBOLIC EQUATE
TWENTY   EQU   20                  ERROR RETURN CODE
HEX80    EQU   X'80'               SYMBOLIC MASK
HEXFF    EQU   X'FF'               SYMBOLIC MASK
         SPACE
BLANK    EQU   C' '                SYMBOLIC FOR BLANK (SPACE).
PERIOD   EQU   C'.'                SYMBOLIC EQUATE
CHAR0    EQU   C'0'                SYMBOLIC FOR  CHARACTER 0
CHAR9    EQU   C'9'                SYMBOLIC FOR CHARACTER 9
BALRCODE EQU   X'05'               OP CODE FOR BALR INSTRUCTION
BALCODE  EQU   X'45'               OP CODE FOR BAL INSTRUCTION
         SPACE
CFLDMASK EQU   B'00011111'         MASK TO ISOLATE REMAINDERS FOR C TYP
DWBDY    EQU   B'00000111'         USED TO TEST ADDRS FOR DBL WRD BDY.
FWBDY    EQU   B'00000011'                                FULL
HWBDY    EQU   B'00000001'                                HALF
INSTRLEN EQU   B'11000000'         FOR TESTING 1ST 2 BITS OF INSTRS
PACKMSK  EQU   X'6F'               USED TO SET UP LNTHS FOR PACK INSTR
         SPACE
*  SYMBOLIC OFFSETS FOR THE SYMINFO BLOCK.
         SPACE
SIDATAPT EQU   0                   OFFSET TO DATA ADDR IN SI-BLOCK
SITYPE   EQU   4                   OFFSET TO TYPE FIELD OF SI-BLOCK
SIMUL    EQU   6                   OFFSET TO LAST 2 BYTES OF MLTPLCTY
SILEN    EQU   8                   OFFSET TO LNTH IN SYMINFO
SINXTPTR EQU   12                  OFFSET INTO SYMINFO BLK FOR CHAIN PT
SYMINFOL EQU   16                  SYMBOLIC FOR LENGTH OF SYMINFO BLK
         SPACE
LSTBUFL  EQU   82                  LENGTH TO BE BLANKED IN BUFFER
MAXLINE  EQU   100                 MAX LINE LENGTH FOR OUTPUT
LSTIBLK  EQU   31                  LNTH OF DATA MOVED TO HOLD AREA
LL00LEN  EQU   4                   SYMBOLIC FOR LENGTH OF LL00 FIELD
ADDRLEN  EQU   7                   LENGTH OF AN ADDR FIELD IN THE BUF
RADDRLEN EQU   3                   LENGTH OF REGISTER ADDRESS FIELD
VPDELEN  EQU   8                   SYMBOLIC FOR LENGTH OF A VALUE PDE
MINLL    EQU   40                  MINIMUM LINE LNTH FORMATTED BY LIST
STDLL    EQU   81                  DEFAULT LINE LNTH WHEN TMPLL IS LOW
         SPACE
H2ND     EQU   1                   OFFSET TO 2ND BYTE OF A HALFWORD
F1STHALF EQU   0                   OFFSET TO 1ST HALFWORD OF A FIELD
LL00OFF  EQU   0                   OFFSET INTO BUFFER FOR LL00 FIELD
DATAOFF  EQU   4                   OFFSET TO DATA PORTION OF BUFFER
R1OFF    EQU   24                  OFFSET INTO SAVE AREA FOR REG 1
R6OFF    EQU   44                  OFFSET INTO SAVE AREA FOR REG 6
R10OFF   EQU   60                  OFFSET INTO SAVE AREA FOR R10
SP1      EQU   1                   DISPLACEMENT FOR 1 SPACE IN BUF
SP2      EQU   2                   SYMBOLIC FOR 2 SPACES
SP4      EQU   4                   FOR INCREMENTING PAST 4 SPACES
SP5      EQU   5                   DISPLACEMENT FOR 5 SPACES IN BUF
CONDATA  EQU   1                   OFFSET TO DATA IN CONVERT OUTPUT
CONLFLD  EQU   0                   OFFSET TO LNTHFLD IN CONVERT OUTPUT
FOREPTR  EQU   8                   OFFSET TO FOREWARD PTR IN SAVE AREA
BACKPTR  EQU   4                   OFFSET TO BACKWARD PTR IN SAVE AREA
CVTSPACE EQU   64                  OFFSET INTO COMMON WORK AREA FOR LST
LSTWRKPT EQU   0                   OFFSET INTO PARM LIST FOR DSECT BASE
LSTPDEPT EQU   4                   OFFSET INTO PARM LIST FOR PDE ADDR
         SPACE
ATTNBIT  EQU   B'01000000'
EQZERO   EQU   8                   COND CODE MASK FOR CC OF 0
NOTONES  EQU   14                  COND. CODE MASK FOR CC OF 0, 1, OR 2
         SPACE
GRINCR   EQU   1                   USED BY LSTREG TO INCRE GEN REG NO.
GRMAX    EQU   15                  HIGHEST GENERAL REGISTER NUMBER
GRFLENO  EQU   11                  LNTH OF OUTPUT DATA, GEN REG F FRMT
GRXLENO  EQU   8                   LNTH OF OUTPUT DATA, GEN REG IN HEX
RBGRSAVE EQU   32                  OFFSET INTO SVRB FOR REG SAVE AREA
         SPACE
FPRINCR  EQU   2                   INCREMENT FOR FLOATING POINT REGS
FPRMAX   EQU   6                   MAX FLOATING POINT REG NUMBER
REINLEN  EQU   4                   LNTH OF INPUT DATA FOR 'RE' ADDRS
RDINLEN  EQU   8                   LNTH OF INPUT DATA FOR 'RD' ADDRS
REXLENO  EQU   8                   LNTH OF HEX OUTPUT FOR 'RE' ADDRS
RDXLENO  EQU   16                  LNTH OF HEX OUTPUT FOR 'RD' ADDRS
REELENO  EQU   15                  LNTH OF 'E' FORMAT OUTPUT
RDDLENO  EQU   24                  LNTH OF 'D' FORMAT OUTPUT
         SPACE
HEXDLEN  EQU   4                   DEFAULT LENGTH FOR HEX FORMAT
         SPACE 2
*  EQUATES FOR THE INTERNAL ASSEMBLER TYPE CODES.
         SPACE
CHARCODE EQU   X'00'               TYPE ATTRIBUTE =CHAR
HEXCODE  EQU   X'04'                ''     ''     =HEXADECIMAL
BINCODE  EQU   X'08'                ''     ''     =BINARY
ICODE    EQU   X'0C'                ''     ''     =INSTRUCTION
FCODE    EQU   X'10'                ''     ''     =FIXED PT, FULLWORD
HCODE    EQU   X'14'                ''     ''       ''   '', HALFWORD
ECODE    EQU   X'18'                ''     ''     =FLT PT, FULLWORD
DCODE    EQU   X'1C'                ''     ''      ''  '', DBL WORD
AQCODE   EQU   X'20'                ''     ''     =A AND Q ADDR CONST
YCODE    EQU   X'24'                ''     ''     =Y ADDR CONST
SCODE    EQU   X'28'                ''     ''     =S ADDR CONST
VCODE    EQU   X'2C'                ''     ''     =V ADDR CONST
PACKCODE EQU   X'30'                ''     ''     =PACKED DECIMAL
ZONECODE EQU   X'34'                ''     ''     =ZONED DECIMAL
LCODE    EQU   X'38'                ''     ''     =FLT PT, EXTENDED
         SPACE
I0083    EQU   83                  NUMBER OF STATIC MESSAGE INSERT
I0084    EQU   84                  NUMBER OF STATIC MESSAGE INSERT
M0219    EQU   219                 NUMBER OF STATIC MESSAGE
M0220    EQU   220                 NUMBER OF STATIC MESSAGE
M0221    EQU   221                 NUMBER OF STATIC MESSAGE
BADESTAE EQU   24                  RETURN CODE FOR UNSUCCESSFUL ESTAE
      TITLE 'IKJEGLST, ''LIST'', INITIALIZATION/COMPLETION ROUTINES'
***********************************************************************
*                                                                     *
*  PROGRAM BEGINS WITH STANDARD LINKAGE CONVENTIONS.                  *
*                                                                     *
***********************************************************************
         SPACE
LIST     SAVE  (14,12),,*
         LR    R12,R15             R12=BASE REG FOR PROG ADDRESSABILITY
         USING IKJEGLST,R12
         USING TCOMTAB,R9          COMMUNICATION TABLE ADDRESSABILITY.
         L     R6,REGSAVE2         R6=NEXT SAVE AREA
         ST    R6,FOREPTR(R13)     FOREWARD CHAIN SAVE AREAS.
         ST    R13,BACKPTR(R6)     BACKWARD CHAIN SAVE AREAS.
         LR    R13,R6              R13=NEXT REGSAVE AREA ADDR.
         SPACE
         TM    TSTFLGS1,PCHLSTVL   IS ENTRY FROM IKJEGLSA
         BO    IKJEGLSS            IF YES, BRANCH AROUND WORKAREA SETUP
         SPACE
*  INITIALIZE WORKING STORAGE
         SPACE
         L     R10,WORKAREA        PICK UP ADDR OF GENERAL WORK SPACE
         USING TSTCWORK,R10
         LA    R10,CWORKCMD        SET UP PTR TO WORK CORE FOR SUB-CMDS
         USING LSTWORK,R10
         XC    LSTWORK(LWLNTH),LSTWORK CLEAR WORK AREA
         MVC   LXCTL(XCTLLEN),XCTLLF   MOVE LIST FORM OF XCTL TO DSECT
         XC    LSTRETCD,LSTRETCD       CLEAR RETURN CODE SAVE AREA
*
*  SET UP FOR AND ISSUE THE  STAE  MACRO
*
LSTINT10 DS    0H
         LA    R1,STAELIST         PTR TO LIST FORM MACRO
         L     R2,TSTSTAE          PTR TO TEST STAE MODULE
         STM   R10,R12,R10OFF(R13)     SAVE BASE PTR
         ESTAE (R2),CT,PARAM=IKJEGSPL,RECORD=YES,XCTL=NO,MF=(E,(R1))
         SPACE
         LTR   R15,R15             TEST RETURN CODE
SMTSTAE  DS    0H                  SMT TEST LABEL FOR STAE MACRO
         BZ    STAEOK              CONTINUE IF ZERO
         SPACE
         STC   R15,TSTESTRC        SAVE RETURN CODE
         LA    R15,BADESTAE        PREPARE TO SEND BACK RTN CODE
         ST    R15,LSTRETCD        SAVE FOR EXIT
         B     LSTMN90             EXIT TO CALLER
         SPACE
***********************************************************************
*                                                                     *
*  INITIALIZE PARAMETER LIST, TEST FOR A SCHEDULED ATTENTION, AND IF  *
*  NO ATTENTION IS PENDING, LINK TO PARSE.                            *
*                                                                     *
***********************************************************************
STAEOK   DS    0H
         TM    TSTFLGS1,PCHLSTVL   WAS ENTRY FROM IKJEGLSA
         BO    MORE02              IF YES, GO PROCESS
         SPACE
*  IF ENTRY WAS NOT FROM IKJEGLSA, THIS IS THE FIRST ENTRY, INITILIZE.
         SPACE
         LA    R1,PARSEPL          PTR TO PARSE LIST
         USING PPL,R1              ADDRESSABILITY FOR LIST
         L     R2,TSTUPT           PTR TO UPT
         L     R3,TSTECT           PTR TO ECT
         L     R4,TSTCPECB         PTR TO P/P ECB
         ST    R2,PPLUPT           PUT PTR TO UPT INTO PARSE LIST
         ST    R3,PPLECT           PUT PTR TO ECT INTO PARSE LIST
         ST    R4,PPLECB           PUT PTR TO P/P ECB INTO PARSE LIST
         L     R2,PARSEPCL         PTR TO PARSE PCL
         LA    R3,TSTANSPL         PTR TO ANSWER PLACE
         L     R4,INBUF            PTR TO INPUT BUFFER
         ST    R2,PPLPCL           PUT PTR TO PARSE PCL INTO PARSE LIST
         ST    R3,PPLANS           PUT PTR TO ANS PLACE INTO PARSE LIST
         ST    R4,PPLCBUF          PUT PTR TO INPUT BUF INTO PARSE LIST
         SPACE
*  R6 SHOULD STILL CONTAIN THE SAVE AREA ADDRESS AT THIS POINT.
         SPACE
         ST    R6,PPLUWA           PUT INTO PARSE LIST
         DROP  R1
         SPACE
         LINK  EP=IKJPARS,ERRET=LINKFAIL LINK TO THE PARSE ROUTINE
PARSEBLO DS    0H
         B     LINKOK              IF OK CONTINUE
LINKFAIL DS    0H
         LR    R6,R1               TRANSFER ABEND CODE
         LR    R5,R15              TRANSFER RETURN CODE
         XC    TSTIOPRM,TSTIOPRM   CLEAR PARM LIST
         IKJEGSIO SVCERR,SVC=6,ABENDRG=(R6),RC=(R5), ISSUE IO CALLING  *
               INST11=(NUM,I0040),ID=LST20,MF=(E,TSTIOPRM) FOR ERR MSG
         CH    R15,H16             TEST RETURN CODE
         BL    LSTMN90             RETURN TO MNL RC=0
         ST    R15,LSTRETCD        SAVE RC FOR MNL
         B     LSTMN90             RETURN TO MNL WITH I/O RTN CODE
LINKOK   DS    0H
         SPACE
SMTPARS  DS    0H                  SMT TEST LABEL FOR PARSE LINK
         SPACE
         SPACE 2
*  TEST THE RETURN CODE FROM PARSE
         SPACE
         LTR   R15,R15             TEST FOR RC=0
         BNZ   PARSRC(R15)         IF NON-ZERO, BRANCH TO BRANCH TABLE
         L     R8,TSTANSPL         PICK UP ADDRESS OF PDL
         USING IKJPARMD,R8
         SPACE
***********************************************************************
*  NEXT EXTRACT THE NECESSARY DATA FROM THE ADDRESS PDE AND SET UP    *
*  THE ADDRESS INFORMATION FIELDS. CONVERT THE LENGTH AND MULTIPLICITY*
*  FACTORS TO BINARY IF THEY WERE SUPPLIED. SET THE TSTPRINT SWITCH   *
*  IF PRINT HAS BEEN SPECIFIED.                                       *
***********************************************************************
         SPACE
         CH    R15,PRINT           TEST FOR PRINT KEYWORD SPECIFIED
         BE    NOPRINT             IF NOT, BRANCH AROUND SETUP
         OI    TSTFLGS1,TSTPRINT   SET THE PRINT SPECIFIED FLAG
NOPRINT  DS    0H
         CH    R15,TYPE            WAS A TYPE KEYWORD USED
         BE    NOTYPE              IF NOT, BRANCH
         OI    LSTFLGS,TYPEFLG     IF TYPE USED, SET FLAG
NOTYPE   DS    0H
         LH    R2,TYPE             PICK UP NUMBER OF TYPE KEYWORD OR 0
         IC    R2,TYPETBL(R2)      GET HEX CODE FOR FORMAT TYPE
         STC   R2,A1TYPE           PLACE TYPE CODE IN ADDR 1 DESCRIPTOR
         STC   R2,TYPESAVE         SAVE TYPE FOR POSSIBLE ADDR LIST
         CH    R15,LATTR           WAS THE LENGTH ATTR KEYWORD USED
         BE    NOLENGTH            IF NOT, BRANCH
         OI    LSTFLGS,LNTHFLG     IF LENGTH GIVEN, SET FLAG
NOLENGTH DS    0H
         CH    R15,MATTR           WAS MULTIPLICITY GIVEN
         BE    NOMULTI             IF NOT, BRANCH
         OI    LSTFLGS,MULTIFLG    IF GIVEN, SET FLAG
NOMULTI  DS    0H
         L     R2,OUTBUF           GET PTR TO THE OUTPUT BUFFER
         XC    LL00OFF(LL00LEN,R2),LL00OFF(R2)   CLEAR LL00 FLD TO ZERO
         MVI   DATAOFF(R2),BLANK   MOVE A BLANK TO START OF DATA AREA
         MVC   DATAOFF+ONE(LSTBUFL,R2),DATAOFF(R2)     BLANK OUT BUFFER
         ST    R2,DATAPR           SET UP IO PARM LIST
         LA    R3,MINLL            SET UP TO SEE THAT TMPLL=MIN LINE
         CH    R3,TMPLL            Q. IS TMPLL GT OR EQ TO MINIMUM
         LA    R3,STDLL            SET UP STANDARD LINE LNTH DEFAULT
         BH    LSTMN02             IF TMPLL LT MINIMUM, BRANCH
         CH    R3,TMPLL            IS TMPLL GREATER THAN STANDARD LL
         BL    LSTMN02             IF SO, USE STANDARD LINE LENGTH
         LH    R3,TMPLL            IF TMPLL NLT MIN, USE TMPLL
LSTMN02  DS    0H
         LA    R2,DATAOFF(R3,R2)   R2=PTR TO END OF BUFFER+1
         ST    R2,ENDOBUF          SETUP END OF BUFFER ADDRESS
         LA    R8,ADDR1            SET UP ADDRESS OF ADDR PDE AS BASE
         USING IKJPARMA,R8         ADDRESSABILITY FOR ADDR PDE DSECT
         EJECT
***********************************************************************
*                                                                     *
*  BEGINNING OF REPEAT SECTION.  THE ROUTINE BELOW IS RE-ENTERED IF   *
*  A LIST OF ADDRESSES HAS BEEN GIVEN.                                *
*                                                                     *
***********************************************************************
LSTMN04  DS    0H
         L     R2,LMATTR           GET LENGTH AND MULTIPLICITY ATTR'S
         ST    R2,A1LMATTR             AND SET ADDRESS 1 ATTRIBUTES.
         TM    PDE2FLG3,AFLG       WAS A SECOND ADDRESS GIVEN
         L     R15,PDEUSER         GET DATA ADDR OR SI PTR
         BO    LSTMN05             IF YES, BRANCH
         TM    PDE2FLG2,CTNAMFLG   WAS 2ND ADDRESS A CSECT NAME
         BNO   LSTMN06             BRANCH IF NO 2ND ADDRESS
LSTMN05  DS    0H
         OI    COMFLGS,TWOADDRS    SET FLAG TO INDICATE ADDRESS RANGE
LSTMN06  DS    0H
         LTR   R15,R15             IF R15 NEG, R15 POINTS TO SYMINFO
         BM    SYM1                IF SYMBOLIC, BRANCH
LSTMN07  DS    0H
         LA    R15,ZERO(R15)       ZERO OUT PDE WRITE BIT
         ST    R15,A1              SAVE ADDR OF CURRENT INPUT
         TM    COMFLGS,TWOADDRS    WERE TWO ADDRESSESS SPECIFIED
         BZ    ONLYONE             IF ONLY ONE ADDR, BRANCH
         L     R15,PDE2USER            GET SECOND ADDR OR SI PTR
         LTR   R15,R15             IF R15 NEG, R15 POINTS TO SYMINFO
         BNM   ONLYONE             IF ADDR2 IS SYMBOLIC, BRANCH
         L     R15,SIDATAPT(R15)   PICK UP INPUT ADDR FROM SYMINFO BLK
ONLYONE  DS    0H
         LA    R15,ZERO(R15)       ZERO OUT PDE WRITE BIT
         ST    R15,A2              SET A2 TO CURRENT SECOND ADDR
         LA    R15,HOLDAREA        MAKE A PTR TO DATA HOLDING AREA
         ST    R15,VPDEPT          SET UP VALUE PDE FOR DATA CONVERT
         SPACE
*  NEXT TEST WHETHER ADDR IS REGISTER TYPE
         SPACE
         TM    PDEFLG4,GENR+LFPR+SFPR  IS ADDRESS TYPE REGISTER
         BZ    NOTREG              IF NOT, BRANCH
         NC    PDEINDCT,PDEINDCT   IF REG, IS IT INDIRECT
         BZ    LSTREG              IF REG ADDR NOT INDIRECTED, BR
         SPACE
*  NEXT TEST WHETHER ADDRESS IS RELATIVE
         SPACE
NOTREG   DS    0H
         TM    PDEFLG4,CTONLY      IS ADDRESS A CSECT ONLY
         BO    LSTMN09             IF CSECT ONLY, BRANCH
         TM    PDEFLG4,RELADDR     IS ADDRESS TYPE RELATIVE
         BZ    LSTMN10             IF NOT RELATIVE, BRANCH
         NC    PDEINDCT,PDEINDCT   IF RELATIVE, IS IT INDIRECTED
         BNZ   LSTMN10             IF INDIRECTED, BRANCH
         TM    PDEEXPTR,HEXFF      IF RELATIVE, IS IT AN EXPRESSION
         BNO   LSTMN10             IF START OF AN EXPRESSION, BRANCH
         OI    A1FLG,A1REL         TURN ON ADDRESS IS RELATIVE FLAG
         TM    PDEFLG2,CTNAMFLG    IS RELATIVE ADDR QUALIFIED
         BNO   LSTMN14             IF NOT QUALIFIED, BRANCH
         SPACE
***********************************************************************
*                                                                     *
*  IF THE ADDRESS IS A QUALIFIED RELATIVE, CALCULATE THE BASE FOR     *
*   RELATIVES BY CONVERTING THE RELATIVE OFFSET TO BINARY AND         *
*    SUBTRACTING IT FROM THE RESOLVED CURRENT ADDRESS. THIS BASE      *
*     ADDRESS IS KEPT IN 'PPTEMP' FOR USE BY IKJEGCVT.                *
*                                                                     *
***********************************************************************
         XC    HOLDAREA(APL),HOLDAREA  CLEAR AN AREA FOR AN ADDR PDE
         L     R2,PDEUSER          GET BINARY START ADDRESS
         LA    R2,ZERO(R2)         ZERO OUT HIGH ORDER BYTE
         SPACE
*  NEXT MOVE THE ADDRESS POINTER AND THE LENGTH TO THE NEW ADDR PDE.
         SPACE
         MVC   HOLDAREA+PDEADRPT-IKJPARMA(PDERSV3-PDEADRPT),PDEADRPT
         MVI   HOLDAREA+PDEEXPTR-IKJPARMA,HEXFF  INDICATE NOT INDIRECT
         SPACE
*  THE ADDRESS TYPE FIELD IS ZERO WHICH IS THE CODE FOR ABSOLUTE.
         SPACE
         LA    R1,HOLDAREA         SET UP A POINTER TO NEW PDE.
         L     R15,TSTCONVT        GET ADDRESS OF CONVERT ROUTINE
         SR    R0,R0               MAKE REG 0, ZERO FOR CONVERT TO BIN
         LCR   R1,R1               MAKE REG 1 NEGATIVE FOR ADDR CONVERT
         BALR  R14,R15             GO CONVERT RELATIVE OFFSET TO BINARY
         LTR   R15,R15             IS THE RETURN CODE ZERO
         L     R1,HOLDAREA+PDEUSER-IKJPARMA  GET CONVERTED DATA
         LA    R1,ZERO(R1)         ZERO OUT HIGH ORDER BYTE
         BNZ   LSTCVTRC            IF RC WAS NOT 0, BRANCH
         SR    R2,R1               SUBTRACT OFFSET FROM ADDRESS
         ST    R2,PPTEMP           SET UP DIFFERENCE AS BASE FOR RELS
         B     LSTMN14             BRANCH AROUND SET UP FOR ABSOLUTE
         SPACE
LSTMN09  DS    0H
         OI    A1FLG,A1SYM         INDICATE ADDRESS IS A SYMBOLIC TYPE
LSTMN10  DS    0H
         XC    APDE(APL),APDE      CLEAR ADDRESS PDE,
         OI    APDE+(PDEFLG4-IKJPARMA),ABSADDR  SET FLAG FOR ABSOLUTE
         OI    APDE+(PDEFLG3-IKJPARMA),AFLG     SET FLAG, ADDR PRESENT
         SPACE
*  TEST FORMAT TYPE TO BE USED
         SPACE
LSTMN14  DS    0H
         CLI   A1TYPE,HEXCODE      IS REQUESTED FORMAT HEX
         BE    LSTHEX              IF HEX, BRANCH
         SPACE 2
*        THE FOLLOWING XCTL IS EXECUTED TO OBTAIN LSA
         SPACE 2
NOBLDL   DS    0H
         L     R13,BACKPTR(R13)    PICK UP ADDR OF CALLERS SAVE AREA
         LA    R15,LXCTL           SET UP PTR TO LIST FORM OF XCTL MAC
         LA    R1,LXCTL1           SET UP PTR TO LIST'S PARM LIST
         ST    R8,LSTPDEPT(R1)     PASS A PTR TO THE CURRENT ADDR PDE
         ST    R10,LSTWRKPT(R1)    PASS THE BASE ADDR OF LSTWORK DSECT
         OI    TSTFLGS2,TSTXCTL    INDICATE XCTL WITHIN LIST SUB-CMD
***********************************************************************
*                                                                     *
*  IF FORMAT TYPE WAS A, B, C, D, E, F, H, I, L, P, S, Y, OR Z---     *
*  XCTL TO SECOND LOAD MODULE OF LIST.                                *
*  IF THE XCTL FAILS, THE TEST MAINLINE STAE RETRY ROUTINE WILL BE    *
*  ENTERED. (FIELD 'TSTRETRY' IN TCOMTAB POINTS TO MAINLINE RTN ACROSS*
*  THE XCTL).                                                         *
*                                                                     *
***********************************************************************
         SPACE
         XCTL  (2,12),EP=IKJEGLSA,SF=(E,(15))
         SPACE
SMTXCTL  DS    0H                  SMT TEST LABEL FOR XCTL MACRO
         EJECT
***********************************************************************
*                                                                     *
*  THIS ENTRY POINT IS USED BY IKJEGLSA, THE 2ND LOAD OF LIST, IF     *
*  AN ADDRESS LIST IS BEING PROCESSED AND---                          *
*        1 THE NEXT ADDRESS IN THE LIST IS A REG ADDR.
*        2 THE NEXT ADDRESS IN THE LIST IS SYMBOLIC AND THE SYMBOLS'  *
*          TYPE ATTRIBUTE IS HEX AND HAS NOT BEEN OVER-RIDDEN         *
*          BY THE USER.
*        3 THE NEXT ADDRESS HAS NO ASSOCIATED ATTRIBUTES AND DEFAULTS
*          TO HEXADECIMAL FORMAT.
*  AFTER SETUP, CONTROL IS PASSED TO THE REPEAT ROUTINE.              *
*                                                                     *
***********************************************************************
         SPACE
IKJEGLSS DS    0H
         L     R8,LSTPDEPT(R1)     PICK UP PTR TO CURRENT ADDR PDE
         L     R10,LSTWRKPT(R1)    SET UP BASE REG FOR LSTWORK DSECT
         NI    TSTFLGS2,HEXFF-TSTXCTL  TURN OFF XCTL IN PROGRESS SW
         B     LSTINT10            GO ISSUE STAE, THEN PROCESS NXT ADDR
         SPACE 3
MORE     DS    0H
         L     R6,OUTBUF           LOAD PTR TO OUTPUT BUFFER
         ST    R6,DATAPR           SET UP THE IO PARM LIST
         BAL   R7,LSTIO            GO TO OUTPUT ROUTINE
         SPACE
         L     R8,PDE2CHAI         GET ADDR OF NEXT PDE FROM CHAIN PTR
MORE02   DS    0H
         XC    LSTRPT(RPTSIZE),LSTRPT  CLEAR ADDR PORTION OF WORK AREA
         IC    R2,TYPESAVE         GET TYPE CODE OR DEFAULT TYPE CODE
         STC   R2,A1TYPE           SET FORMAT TYPE (EXCEPT FOR SYMBOLS)
         B     LSTMN04             GO BACK AND PROCESS NEXT ADDR
         EJECT
***********************************************************************
*                                                                     *
*  COMPLETION ROUTINE, TESTS FOR ADDITIONAL ADDRESSES TO LIST AND     *
*  SETS A 0 RETURN CODE. WHEN ALL ADDRESSES HAVE BEEN PROCESSED,      *
*  THE ROUTINE RETURNS TO THE CALLER.                                 *
*                                                                     *
***********************************************************************
         SPACE
LSTCC0   DS    0H
         TM    COMFLGS,OUTCORE     WAS THE LAST LIST TRUNCATED
         BZ    LSTOK               IF LAST LIST COMPLETE, BRANCH
         XC    TSTIOPRM,TSTIOPRM   ZERO OUT PARM FIELD FOR I/O CALL
         IKJEGSIO  MSG,FIRST=M0022,SECOND=M0272,ID=LST20, ISSUE IO CALL*
               MF=(E,TSTIOPRM)     TO SEND MESSAGE TO USER
         CH    R15,H16             TEST THE RTN CODE
         BL    LSTOK               IF SUCCESSFUL CONTINUE
         ST    R15,LSTRETCD        SAVE THE RETURN CODE FOR MAINLINE
         B     LSTMN90             GO BACK TO MAINLINE
LSTOK    DS    0H
         TM    PDE2CHAI,HEXFF      IS THERE ANOTHER ADDRESS PDE
         BNO   MORE                IF YES, BRANCH
LSTMN90  DS    0H
         NI    TSTFLGS1,HEXFF-TSTPRINT-TSTFIRST-PCHLSTVL-RANGESW
         ESTAE 0,OV                REMOVE THE ESTAE
         L     R15,LSTRETCD        PICK UP RETURN CODE
         L     R13,BACKPTR(R13)    GET ADDR OF PREVIOUS SAVE AREA.
         NI    TSTFLGS4,HEXFF-TSTRERTN TURN OFF THE RETRY SW IF ON
         RETURN (14,12),RC=(15)    RETURN TO CALLER
         SPACE 2
LSTCVTRC DS    0H
         CH    R15,H16             IS RC=16
         BNE   LSTCC0              OTHERWISE, GO CHECK FOR MORE ADDRS
LSTCC16  DS    0H
         LA    R15,SIXTEEN         R15=16
         ST    R15,LSTRETCD        RC=16
         B     LSTMN90             GO CLEAN UP AND RETURN
         EJECT
*  BRANCH TABLE ENTERED WHEN THE RETURN CODE FROM IKJPARS IS GREATER  *
*  THAN ZERO.                                                         *
         SPACE
         ORG   *-4                 REUSE SPACE FOR ZERO COND CODE
PARSRC   DS    0H
         ORG
         B     PRC04               RC = 4, UNABLE TO PROMPT
         B     LSTCC16             ATTN SCHEDULED, GO SET RC=16
         B     PRC12               INVALID PARM, SHOULD NOT OCCUR
         B     PRC16               INSUFFIENT STORAGE FOR PARSE
         B     LSTMN90             RC=20, TERMINATE IMMEDIATELY
         SPACE
PRC04    OI    TSTFLGS4,TSTFLUSH   INITIALIZE STACK FLUSH FOR
*                                  MAINLINE
         B     LSTMN90             RETURN TO MAINLINE
         SPACE
PRC12    DS    0H
         XC    TSTIOPRM,TSTIOPRM   ZERO OUT PARM FIELD FOR I/O CALL
         IKJEGSIO  MSG,FIRST=M0104,INST11=(NUM,I0009), ISSUE I/O CALL- *
               SECOND=M0277,ID=LST20,MF=(E,TSTIOPRM)   ING MACRO
         CH    R15,H16             TEST THE RTN CODE
         BL    LSTMN90             IF SUCCESSFUL CONTINUE
         ST    R15,LSTRETCD        SAVE THE RETURN CODE FOR MAINLINE
         B     LSTMN90             GO BACK TO MAINLINE
PRC16    DS    0H
         XC    TSTIOPRM,TSTIOPRM   ZERO OUT PARM FIELD FOR I/O CALL
         IKJEGSIO MSG,FIRST=M0103,ID=LST20,MF=(E,TSTIOPRM) ISSUE MSG
         CH    R15,H16             TEST THE RTN CODE
         BL    LSTMN90             IF SUCCESSFUL CONTINUE
         ST    R15,LSTRETCD        SAVE THE RETURN CODE FOR MAINLINE
         B     LSTMN90             GO BACK TO MAINLINE
         EJECT
***********************************************************************
*                                                                     *
*  SYMBOLIC ADDRESS SETUP ROUTINE. THIS ROUTINE SETS UP THE A1 FIELD  *
*  AND FILLS IN ANY ATTRIBUTES NOT OVER-RIDDEN BY THE USER.           *
*  AT ENTRY, REGISTER 15 POINTS TO THE SYMINFO BLOCK FOR ADDRESS 1    *
***********************************************************************
SYM1     DS    0H
         TM    LSTFLGS,TYPEFLG     WAS A TYPE GIVEN BY THE USER
         BO    HAVETYPE            IF GIVEN, IGNORE ATTRS OF SYMBOL
         SR    R2,R2               CLEAR A REG,
         IC    R2,SITYPE(R15)         PICK UP THE TYPE,
         STC   R2,A1TYPE                   AND MAKE IT THE TYPE FOR A1
HAVETYPE DS    0H
         TM    LSTFLGS,LNTHFLG     WAS LNTH ATTR GIVEN BY USER
         BO    SYM1L               IF GIVEN, IGNORE ATTRS OF SYMBOL
         LH    R2,SILEN(R15)       PICK UP SYMS LENGTH ATTR
         STH   R2,A1L              ESTABLISH SYMS LNTH FOR THIS DATA
SYM1L    DS    0H
         TM    LSTFLGS,MULTIFLG    WAS MULTIPLICITY ATTR GIVEN BY USER
         BO    SYM1M               IF GIVEN, IGNORE ATTRS OF SYMBOL
         LH    R2,SIMUL(R15)       PICK UP SYMS MULTIPLICITY FACTOR
         STH   R2,A1M              EST. SYMS MULTI FOR THIS DATA
SYM1M    DS    0H
         OI    A1FLG,A1SYM         SET FLAG TO INDICATE ADDR SYMBOLIC
         L     R15,SIDATAPT(R15)   GET PTR TO INPUT FROM SYMINFO
         B     LSTMN07             RETURN TO MAINLINE SETUP ROUTINE
         TITLE 'IKJEGLST, ''LIST'', HEX FORMATTING ROUTINE'
***********************************************************************
*                                                                     *
*  LIST AREAS OF CORE IN HEX FORMAT.                                  *
*        FIRST ANALYZE THE ADDRESS(ES) AS TO TYPE AND NUMBER.         *
*                                                                     *
***********************************************************************
         SPACE
LSTHEX   DS    0H
         MVI   VPDET,HEXCODE       SET TYPE CODE FIELD TO HEX
         LH    R5,A1L              GET USER SPECIFIED LENGTH
         SR    R0,R0               CLEAR FOR COMPARE
         CH    R0,A1M              WAS MULTIPLICITY GIVEN
         BNZ   LSTX04              IF YES, BRANCH AROUND DEFAULT
         MVI   A1M+H2ND,ONE        DEFAULT MULTIPLICITY TO ONE
LSTX04   DS    0H
         TM    COMFLGS,TWOADDRS    HOW MANY ADDRESSES WERE GIVEN
         BO    LSTX24              IF TWO, BRANCH
         OI    COMFLGS,ARTIMSW     INDICATE CONTROL IS ARTIFICIAL
         CR    R0,R5               WAS A LENGTH GIVEN OR IMPLIED
         BNE   LSTX06              IF YES, BRANCH
         LA    R5,HEXDLEN          SET DEFAULT LNTH FOR HEX
         STH   R5,A1L              SAVE DEFAULTED LENGTH
LSTX06   DS    0H
         B     LSTX18              GO TO LENGTH SPECIFIED ROUTINE
LSTX08   DS    0H
         LA    R4,ONE              SET CONTROL TO 1 GROUP PER LINE
         STH   R4,ARTIFMUL         SET ARTIFICIAL MULTIPLICITY
         SPACE
***********************************************************************
*                                                                     *
*  DETERMINE WHETHER ADDRESS IS RELATIVE, SYMBOLIC, OR ABSOLUTE.      *
*                                                                     *
***********************************************************************
LSTX10   DS    0H
         LA    R3,FOUR             SET A CONSTANT OF 4
         CR    R3,R4               COMPARE IT TO NUMBER OF GRPS TO LIST
         BNH   LSTX12              IF 4 OR MORE GROUPS, BRANCH
         L     R15,ENDOBUF         GET END OF BUFFER ADDRESS
         OI    COMFLGS,DATASIZE    IF LESS THAN 4 GROUPS, SET SW
         ST    R15,ENDOGRP         SET END OF GROUP TO END OF BUF
LSTX12   DS    0H
         STH   R5,VPDEL            SET LENGTH FIELD OF VALUE PDE
         STH   R5,A1L              RECORD LENGTH FINALLY CHOSEN
         TM    A1FLG,A1SYM         TEST ADDR TYPE
         BZ    LSTX14              IF ADDR IS ABSOLUTE, BRANCH
         BO    LSTX40              IF ONES, ADDR IS SYMBOLIC
         SPACE
*  IF ADDRESS TYPE IS RELATIVE, FALL THROUGH AND SET UP FOR RELATIVES.
         SPACE
         MVC   APDE(APL),IKJPARMA  MOVE ORIGINAL PDE TO WORK AREA
LSTX14   DS    0H
         LA    R2,A1               GET ADDR OF INPUT DATA PTR
         ST    R2,APDE+(PDEADRPT-IKJPARMA) STORE IT IN THE ADDR PDE
         B     LSTX50              GO TO MAIN ROUTINE FOR HEX.
         SPACE
***********************************************************************
*                                                                     *
*  ROUTINE WHEN LNTH WAS SPECIFIED, OR AVAILABLE THRU A SYMBOLIC ADDR.*
*                                                                     *
***********************************************************************
LSTX18   DS    0H
         BAL   R14,LSTLMTCK        GO TEST FOR EXTENSION BEYOND CORE
         BAL   R14,ADDRCHK         GO CHECK VALIDITY 2ND ADDR
         LTR   R15,R15             WAS REMAINING MULTIPLICITY ZERO
         BZ    LSTX19              IF MULTIPLICITY NON-ZERO, BRANCH
         MVI   A1M+H2ND,ONE        SET MULTIPLICITY TO ONE
         LH    R5,LASTLEN          GET REMAINING LENGTH
         XC    LASTLEN,LASTLEN     CLEAR LASTLEN TO PREVENT RE-USE
         STH   R5,A1L              SET REQUEST LENGTH TO LAST LENGTH
LSTX19   DS    0H
         LA    R2,FOUR             SET UP TEST VALUE
         CR    R5,R2               IS LENGTH GREATER THAN 4
         BNH   LSTX08              IF NOT, GO USE ACTUAL LENGTH
         LA    R1,FWBDY            SET UP TO TEST IF LNTH/4 HAS REMAIN
         LR    R4,R5               GET A WORKING COPY OF THE LENGTH
         NR    R1,R4               PLACE ANY REMAINDER IN R1
         SRL   R4,TWO              DIVIDE LENGTH BY 4
         STH   R4,ARTIFMUL         SAVE ARTIFICIAL MULTIPLICITY
LSTX20   DS    0H
         LR    R5,R2               SET UP LENGTH REGISTER
         STH   R1,REMAIN           SAVE REMAINDER
         STH   R1,REMAIN2          SAVE A COPY OF THE REMAINDER
         B     LSTX10              RETURN TO MAINLINE
         SPACE
***********************************************************************
*                                                                     *
*  ROUTINE TO SET UP FOR TWO ADDRESSES.                               *
*                                                                     *
***********************************************************************
LSTX24   DS    0H
         LA    R2,HEXDLEN          SET UP DEFAULT LENGTH FOR HEX
         L     R4,A2               R4=ADDR OF END OF INPUT DATA FLD.
         S     R4,A1               CALCULATE RANGE IN BYTES.
         LA    R4,ONE(R4)          INCLUDE BYTE AT 2ND ADDRESS
         LA    R1,FWBDY            SET UP TO DETERMINE REMAINDER OF L/4
         NR    R1,R4               PLACE ANY REMAINDER IN R1
         SRA   R4,TWO              DIVIDE LENGTH BY 4
         BNZ   LSTX20              IF QUOTIENT NON-ZERO, BRANCH
         LR    R5,R1               SET LENGTH TO REMAINDER
         B     LSTX08              RETURN TO MAINLINE
         SPACE
*  ROUTINE TO SET UP FOR SYMBOLIC ADDRESSES
         SPACE
LSTX40   DS    0H
         BAL   R7,LSTSYM           GO MOVE SYMBOLIC ADDR TO BUF
         CH    R4,HONE             HOW MANY FIELDS ARE TO BE LISTED
         BH    LSTX42              IF MORE THAN 1 + A REMAINDER, BRANCH
         CH    R4,A1M              ARE THERE MORE FIELDS TO LIST
         BL    LSTX42              IF MORE, BRANCH
         LH    R15,A1L             GET LENGTH OF PRIMARY FIELD
         AH    R15,REMAIN          ADD ANY REMAINDER
         AR    R15,R15             DOUBLE LENGTH TO GET OUTPUT LENGTH
         LA    R15,SP4(R6,R15)     CALCULATE BUF PTR AT END OF DATA
         C     R15,ENDOBUF         WILL DATA FIT
         BNH   LSTX57              IF DATA WILL FIT, BRANCH
         SPACE
*  IF DATA WILL NOT FIT, FALL THROUGH AND PUT OUT ADDRESS SEPARATELY.
         SPACE
LSTX42   DS    0H
         BAL   R7,LSTIO            GO OUTPUT ADDR ONLY
         B     LSTX54              GO OUTPUT DATA
         EJECT
***********************************************************************
*  PROCESS LOOP FOR HEX FORMATTING ROUTINE
*                                                                     *
*        DURING THE PROCESSING CYCLE, THE REGISTER USAGE IS AS FOLLOWS*
*              R0 CONTAINS A NEG (-) NUMBER TO SHOW CONVERT TO PRINT  *
*              R5 CONTAINS THE ADDR OF THE OUTPUT BUFFER.
*              R6 CONTAINS THE ADDR ON THE NEXT AVAILABLE BYTE IN BUF *
*                                                                     *
*        OUTPUT IS PLACED IN THE BUFFER IN ONE OF THE FOLLOWING       *
*        FORMATS, DEPENDING ON LINE SIZE. (AN X REPRESENTS A GROUP OF *
*        2, 4, 6, OR 8 CHARACTERS OF DATA AND ADDR IS RELATIVE OR     *
*        ABSOLUTE. SYMBOL INDICATES SYMBOLIC ADDR.)                   *
*        1.    ADDR  X X X X  X X X X                                 *
*        2.    ADDR  X X X X                                          *
*                    X X X X                                          *
*        3.    ADDR                                                   *
*                X X X X                                              *
*                X X X X                                              *
*        4.    SYMBOL  X           IF ADDR SYMBOLIC AND ONLY 1 GROUP  *
*        5.    SYMBOL                                                 *
*              ADDR  X X X X  X X X X   (SEE 1, 2, AND 3 ABOVE)       *
*        6.    ADDR  X                                                *
*              ADDR  X                                                *
*               ETC.    (THIS FORMAT RESULTS FROM USING MULTIPLICITY) *
***********************************************************************
LSTX50   DS    0H
         L     R6,OUTBUF           GET PTR TO OUTPUT BUFFER
         MVI   DATAOFF(R6),BLANK   MOVE BLANK TO START OF DATA @YM06177
         MVC   DATAOFF+ONE(LSTBUFL,R6),DATAOFF(R6)   BLANK OUT @YM06177
         LA    R6,DATAOFF(R6)      INCRE BUF PTR PAST LL00 FIELD
         L     R3,CONAREA          R3=PTR TO CONVERT OUTPUT AREA
LSTX52   DS    0H
         BAL   R14,LSTBPT          GO CLEAR BREAKPOINT SVC'S FROM DATA
         SPACE
***********************************************************************
*                                                                     *
*  IF ADDRESS WAS SYMBOLIC AND THERE ARE 2 OR MORE FIELDS THE ROUTINE *
*  IS ENTERED HERE. AFTER THE SYMBOL IS PRINTED ON A SEPARATE LINE.   *
*                                                                     *
***********************************************************************
LSTX54   DS    0H
         L     R15,TSTCONVT        PTR TO CONVERT ROUTINE
         LA    R1,APDE             PTR TO ADDR PDE, ADDR TO CONVERT
         LCR   R1,R1               INDICATE ADDR CONVERSION.
         SR    R0,R0               SET R0 NEGATIVE TO
         BCTR  R0,NULL                 INDICATE CONVERT TO PRINTABLE
         BALR  R14,R15             GO TO CONVERT ROUTINE
         LTR   R15,R15             TEST CONVERT RETURN CODE.
         BNZ   LSTCVTRC            IF NON-ZERO, BRANCH
         MVC   ZERO(ADDRLEN,R6),CONDATA(R3)  MOVE ADDR TO BUF
         LA    R6,ADDRLEN(R6)      INCRE BUF PTR PAST ADDR
         TM    COMFLGS,DATASIZE    ARE THERE 4 FIELDS TO LIST
         BO    LSTX57              IF LESS THAN 4, BRANCH
         LR    R2,R5               GET LENGTH OF AN OUTPUT FIELD
         SLL   R2,TWO+ONE          LNTH*4*2  4=NO. OF FLDS, 2=PRINTSIZE
         LA    R2,SP5(R6,R2)       CALCULATE BUF PTR AFTER 4 FIELDS
         C     R2,ENDOBUF          WILL 4 GROUPS + ADDR FIT IN BUF
         BNH   LSTX56              IF GRPS+ADDR WILL FIT, BRANCH
         OI    COMFLGS,NOINDENT    SET SW TO PREVENT INDENTATION.
         BAL   R7,LSTIO            GO OUTPUT ADDR ONLY
         S     R2,AFLEN            REDUCE OUTPUT LINE LNTH BY ADDR+2SP
LSTX55   DS    0H
         SR    R0,R0               SET R0 TO A (-1) TO SHOW
         BCTR  R0,NULL                 CONVERTION TO PRINTABLE.
         SPACE
***********************************************************************
*                                                                     *
*  DATA CONVERT LOOP                                                  *
*  IF THE NEXT GROUPS OF DATA WILL FIT INTO THE BUFFER OR IF THE ADDR *
*  WAS SYMBOLIC AND THERE IS ONLY ONE GROUP, THIS ROUTINE IS ENTERED. *
*                                                                     *
***********************************************************************
LSTX56   DS    0H
         ST    R2,ENDOGRP          SAVE STOP ADDR FOR 4 GROUPS
LSTX57   DS    0H
         LA    R1,VPDE             SET UP FIELDS TO CONVERT A VALUE
         LA    R6,SP1(R6)          INCRE BUF PTR AN EXTRA SPACE
LSTX59   DS    0H
         LA    R6,SP1(R6)          INCRE BUF PTR FOR SPACE BETWN GRPS
         SPACE
         L     R15,TSTCONVT        GET ADDR OF CONVERT ROUTINE
         BALR  R14,R15             GO TO CONVERT ROUTINE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   LSTCVTRC            IF RC=NON-ZERO, BRANCH
         IC    R15,CONLFLD(R3)     PICK UP LENGTH OF CONVERTED DATA
         BCTR  R15,NULL            REDUCE LENGTH BY 1 FOR MVC INSTR
         EX    R15,DATAMOVE        MOVE CONVERTED DATA TO BUF
         LA    R6,ONE(R15,R6)      INCRE BUF PTR PAST A DATA FIELD
         L     R15,VPDEPT              R15=ADDR OF LAST INPUT DATA
         AH    R15,VPDEL           UPDATE DATA PTR BY LNTH OF LAST FLD
         ST    R15,VPDEPT          SET UP VALUE PDE FOR NEXT DATA
         BCT   R4,LSTX62           HAS CONTROL REACHED 0, IF NOT, BRNCH
         CH    R4,REMAIN           IS REMAINDER 0, (NOTE- R4=0)
         BE    LSTX66              IF ZERO, BRANCH TO TEST FOR COMPL
         LH    R2,REMAIN           PICK UP REMAINDE LENGTH
         STH   R2,VPDEL            SET VALUE LENGTH AND
         STH   R4,REMAIN           SET REMAINDER TO 0 (NOTE-- R4=0)
         LA    R4,ONE              SET A CONTROL VALUE OF 1
LSTX62   DS    0H
         C     R6,ENDOGRP          TEST FOR END OF A GROUP OF 4 FIELDS
         BL    LSTX59              IF NOT, GO PUT NEXT FIELD IN BUF
         TM    COMFLGS,SECOND      IS THIS THE 2ND GROUP OF 4
         BO    LSTX76              IF 2ND GROUP, BRANCH
         SPACE 2
***********************************************************************
*  AT THIS POINT, ONE GROUP OF 4 IS IN THE BUF AND A TEST MUST BE MADE*
*  IF A SECOND GROUP OF 4 WILL FIT. IF IT WILL FIT, AN EXTRA SPACE IS *
*  INSERTED IN THE BUF TO SEPARATE THE GROUPS OF 4.                   *
***********************************************************************
         SPACE
         LR    R2,R5               GET LENGTH OF AN OUTPUT FIELD
         SLL   R2,TWO+ONE          L*4*2, LNTH TIMES FLDS/GRP TIMES 2.
         LA    R2,SP5(R6,R2)       INCRE BUF PTR BY 2SP+3SP+(4*DATALEN)
         OI    COMFLGS,SECOND      SET FLAG TO SHOW SECOND GRP
         C     R2,ENDOBUF          TEST WHETHER RESULT IS PAST BUF END
         BNH   LSTX56              IF DATA WILL FIT, BRANCH
         SPACE
LSTX64   DS    0H
         BAL   R7,LSTIO            GO OUTPUT DATA IN BUF
         LR    R2,R5               GET LENGTH OF AN OUTPUT FIELD
         SLL   R2,TWO+ONE          L*4*2, LNTH TIMES FLDS/GRP TIMES 2
         LA    R2,SP5(R6,R2)       CALCULATE BUF PTR AFTER 4 MORE FLDS
         TM    COMFLGS,NOINDENT    TEST IF DATA TO BE INDENTED
         BO    LSTX55              IF NO INDENTATION REQUIRED, BRANCH
         LA    R6,ADDRLEN(R6)      INCRE BUF PTR FOR INDENTATION
         LA    R2,ADDRLEN(R2)      INCRE STOP ADDR BY INDENTATION
         B     LSTX55              GO BACK TO DATA PROCESS LOOP
         SPACE
LSTX66   DS    0H
         TM    COMFLGS,ARTIMSW     WAS CONTROL TRU MULTIPLICITY
         BNO   LSTX68              IF TRU, BRANCH
         LH    R2,A1M              PICK UP TRU MULTIPLICITY
         BCT   R2,LSTX72           DECRE IT AND TEST FOR COMPLETION
LSTX68   DS    0H
         TM    COMFLGS,OUTCORE     WAS REQUEST TRUNCATED BY TOP ADDR
         BO    LSTX84              IF TRUNCATED, BRANCH
LSTX70   DS    0H
         BAL   R7,LSTIO            GO OUTPUT LAST BUF
         B     LSTCC0              GO BACK TO MAINLINE.
LSTX72   DS    0H
         STH   R2,A1M              SAVE REMAINING TRU MULTIPLICITY
         LH    R2,REMAIN2          PICK UP SAVED REMAINDER
         STH   R2,REMAIN           RESTORE IT TO REMAINDER FIELD
         LH    R4,ARTIFMUL         RESET CONTROL TO ARTIFICIAL MULTIP.
         STH   R5,VPDEL            RESET INPUT DATA LENGTH
LSTX76   DS    0H
         BAL   R7,LSTIO            GO OUTPUT CURRENT BUF LOAD
         NI    COMFLGS,HEXFF-SECOND    TURN OFF SECOND GRP FLAG
         B     LSTX52              GO SET UP ANOTHER LINE.
         SPACE
LSTX84   DS    0H
         LH    R4,LASTLEN          PICK UP POSSIBLE SHORT FIELD LENGTH
         LTR   R4,R4               IS THERE A SHORT FIELD TO LIST
         BZ    LSTX70              IF NOT, OR IF DONE, BRANCH
         LA    R5,FOUR             SET UP GROUP LENGTH
         CR    R4,R5               IS THERE MORE THAN ONE GROUP
         BNH   LSTX90              IF NOT, BRANCH
         LA    R15,FWBDY           PREPARE TO ISOLATE ODD NO. OF BYTES
         NR    R15,R4              ISOLATE BYTES NOT A MULTIPLE OF 4
         SRL   R4,TWO              DIVIDE NO. OF BYTES BY 4
LSTX86   DS    0H
         STH   R15,REMAIN2         SAVE ODD BYTES
         STH   R4,ARTIFMUL         SAVE QUOTIENT AS ARTIFICIAL MULTI
         LA    R2,ONE              SET TRUE MULTIPLICITY TO ONE
         XC    LASTLEN,LASTLEN     MAKE LAST LENGTH ZERO TO STOP LOOP
         B     LSTX72              GO FINISH LISTING CORE
         SPACE
LSTX90   DS    0H
         LR    R5,R4               SET FOR LENGTH EQUALS REMAINDER
         SR    R15,R15             SET FOR REMAINDER OF ZERO
         LA    R4,ONE              SET ARTIFICIAL MULTIPLICITY FOR 1
         B     LSTX86              GO FINISH SETUP
         TITLE 'IKJEGLST, ''LIST'', REGISTER LISTING ROUTINE'
***********************************************************************
*                                                                     *
*  LIST REGISTER ROUTINE, LIST THE GENERAL OR FLOATING POINT REGISTERS*
*  IN HEXADECIMAL FORMAT. WILL LIST EITHER A SINGLE REGISTER OR A     *
*  RANGE OF REGISTERS.
*                                                                     *
***********************************************************************
         SPACE
LSTREG   DS    0H
         L     R2,A1               GET REG NUMBER OF FIRST ADDRESS
         L     R6,OUTBUF           ADDR OF OUTPUT BUF
         LA    R6,DATAOFF(R6)      INCREMENT BUF PTR PAST LL00 FIELD
         MVI   ZERO(R6),BLANK   MOVE BLANK TO START OF BUF@ZA07140
         MVC   ONE(LSTBUFL-DATAOFF,R6),ZERO(R6) BLANK OUT @ZA07140
         TM    PDEFLG4,GENR        IS ADDR TYPE GENERAL REGISTER
         BNO   LSTREG30            IF NOT, BRANCH TO FLOATING PT
         SPACE
*  SETUP ROUTINE FOR LISTING CONTENTS OF GENERAL REGISTERS.
         SPACE
         CLI   A1TYPE,FCODE        IS REQUESTED FORMAT FIXED PT BINARY
         LA    R4,GRFLENO          SET UP OUTPUT LNTH FOR FIXED PT
         BE    LSTREG08            IF FIXED, SETUP IS COMPLETE, BRANCH
         SPACE
*  IF FORMAT IS NOT F TYPE, DEFAULT TYPE TO HEX
         SPACE
         MVI   A1TYPE,HEXCODE      SET TYPE FIELD
         LA    R4,GRXLENO          SET UP OUTPUT LNTH FOR HEX DATA
         SPACE
*  NEXT, SET UP A PTR TO THE GENERAL REGISTER SAVE AREA OF THE        *
*  SVRB OF THE BREAKPOINT SVC ON THE TCB OF THE INTERRUPTED PROB PROG *
         SPACE
LSTREG08 DS    0H
         L     R5,ECBPP              GET SVC97 SVRB ADDR      @ZA07138
*                                                             @ZA09259
         LA    R5,RBGRSAVE(R5)     SET UP ADDRESS OF REG SAVE AREA
         SPACE
         MVI   REMAIN+ONE,GRINCR   SET REG NO. INCREMENT FOR GEN REGS
         LA    R3,FOUR             SET INPUT DATA LENGTH (AND INCRE)
         LA    R1,GRMAX            SET MAX REG NUMBER FOR GEN REGS
         STH   R3,VPDEL            SET INPUT DATA LENGTH
         LA    R15,RADDRLEN+SP2(R4)    LNTH OF 1 OUTPUT FIELD TIMES
         SLL   R15,TWO                     FOUR=REQUIRED LINE LNTH.
         LA    R15,THREE*SP2(R15,R6) INCRE LNTH FOR INTER-DATA-GRP SP'S
         MVI   REMAIN2+ONE,SP2     SET UP SPACING FACTOR
         EJECT
***********************************************************************
*                                                                     *
*  COMMON PART OF SETUP ROUTINE, USED BY BOTH FLOATING PT AND GENERAL *
*  REGISTER ROUTINES.  AT ENTRY, REGISTERS MUST BE AS FOLLOWS         *
*        1  MAXIMUM REGISTER NUMBER FOR THE REG TYPE BEING LISTED     *
*        2  REGISTER NUMBER OF THE FIRST REGISTER TO BE LISTED        *
*        3  INPUT DATA INCREMENT (FOR INCREMENTING CORE ADDRESSES     *
*           OF THE RB OR TCB REG SAVE AREA.                           *
*        4  OUTPUT DATA LENGTH OR MAX OUTPUT DATA LENGTH.             *
*        5  ADDRESS OF THE APPROPIATE REGISTER SAVE AREA              *
*        6  PTR TO THE FIRST DATA BYTE OF THE OUTPUT BUFFER           *
*        REMAIN    CONTAINS APPROPIATE INCREMENT FOR REG NUMBERS      *
*        REMAIN2   CONTAINS SPACING FACTOR USED FOR GROUP SEPARATION  *
*                                                                     *
***********************************************************************
LSTREG20 DS    0H
         C     R15,ENDOBUF         IS CUR LINE LNTH ENOUGH FOR 4 GRPS
         BNH   LSTREG22            IF LINE LNTH IS OK, BRANCH
         SPACE
***********************************************************************
*  IF LINE LENGTH TOO SMALL FOR 4 GENERAL REGS OR 2 FLOATING PT REG,  *
*  USE THE NORMAL END OF BUFFER ADDRESS AS A STOPPER AND PUT AS MANY  *
*  GROUPS ON ONE ONE AS WILL FIT.                                     *
***********************************************************************
         SPACE
         L     R15,ENDOBUF         GET END OF BUFFER ADDRESS
         SPACE
LSTREG22 DS    0H
         ST    R15,ENDOGRP         SET END OF LINE (STOPPER) FOR LSTREG
         STH   R3,A1L              SET INPUT DATA INCREMENT
         LR    R3,R2               GET FIRST REG NUMBER TO BE LISTED
         ST    R5,REGSTART         SAVE START ADDRESS OF REG SAVE AREA
         SLL   R3,TWO              MULTIPLY REG NUMBER BY 4 FOR OFFSET
         AR    R5,R3               ADD OFFSET TO REG SAVE START ADDR
         C     R2,A2               COMPARE 1ST ADDR TO LAST (TEST WRAP)
         BNH   LSTREG24            IF REGS DO NOT WRAP, BRANCH
         ST    R1,A2               IF REGS WRAP, SET 2ND ADDR TO MAX
         OI    COMFLGS,WRAPSW          REG NUMBER AND TURN ON WRAP SW.
LSTREG24 DS    0H
         IC    R15,A1TYPE          GET FORMAT TYPE FOR THIS REQUEST
         MVC   APDE(APL),PDELDNAM  MOVE THE ADDRESS PDE TO WORKING CORE
         STC   R15,VPDET           SET VALUE PDE TO PROPER FORMAT TYPE
         LA    R1,A1               GET PTR TO CURRENT REG ADDRESS AND
         ST    R1,APDE+(PDEADRPT-IKJPARMA)  SET ADDR PDE PTR TO IT.
         B     LSTREG50            GO PROCESS LIST REG REQUEST
         EJECT
***********************************************************************
*                                                                     *
*  SETUP ROUTINE FOR LISTING THE CONTENTS OF THE FLOATING POINT REGS.
*                                                                     *
***********************************************************************
LSTREG30 DS    0H
         TM    PDEFLG4,SFPR        TEST REG TYPE FOR RE OR RD
         BO    LSTREG40            IF RE, BRANCH
         TM    LSTFLGS,TYPEFLG     WAS TYPE SPECIFIED BY THE USER
         BZ    LSTREG32            IF NOT, BRANCH, AND DEFAULT TO 'D'
         LA    R4,RDXLENO          SET UP FOR POSSIBLE HEX OUTPUT
         CLI   A1TYPE,HEXCODE      WAS THE SPECIFIED TYPE HEX
         BE    LSTREG34            IF HEX, BRANCH
LSTREG32 DS    0H
         LA    R4,RDDLENO          SET UP OUTPUT LENGTH FOR 'D' FORMAT
         MVI   A1TYPE,DCODE        SET TYPE TO 'D'
LSTREG34 DS    0H
         MVI   VPDEL+ONE,RDINLEN   SET INPUT DATA LENGTH FOR 'D' TYPE
         B     LSTREG46            GO TO COMMON FLT PT SETUP ROUTINE
         SPACE
LSTREG40 DS    0H
         TM    LSTFLGS,TYPEFLG     WAS TYPE SPECIFIED BY THE USER
         BZ    LSTREG42            IF NOT, BRANCH, AND DEFAULT TO 'E'
         LA    R4,REXLENO          SET UP FOR POSSIBLE HEX OUTPUT
         CLI   A1TYPE,HEXCODE      WAS THE SPECIFIED TYPE HEX
         BE    LSTREG44            IF HEX, BRANCH
LSTREG42 DS    0H
         LA    R4,REELENO          SETUP OUTPUT LNTH FOR 'E' FORMAT
         MVI   A1TYPE,ECODE        SET TYPE TO 'E'
LSTREG44 DS    0H
         MVI   VPDEL+ONE,REINLEN   SET INPUT DATA LENGTH FOR 'E' TYPE
         SPACE
***********************************************************************
*  COMMON SET UP FOR FLOATING POINT REGS.                             *
*        SET REGISTER NUMBER INCREMENT
*        SET CORE ADDRESS INCREMENT
*        GET REGISTER SAVE AREA ADDRESS FOR FLOATING POINT REGISTERS
***********************************************************************
LSTREG46 DS    0H
         MVI   REMAIN+ONE,FPRINCR  SET REG NUMBER INCREMENT
         LA    R3,RDINLEN          SET INPUT DATA ADDR INCREMENT
         LA    R1,FPRMAX           MAX REG NUMBER
         SPACE
         L     R5,PPTCB            GET PTR TO TCB FOR BREAKPOINTED TASK
         LA    R15,L'TCBFRS        LNTH OF TCB FLOATING PT REG SAVE
         SR    R5,R15              BACK UP TCB PTR TO TCB PREFIX
         USING TCBFIX,R5           ADDRESSABILITY FOR TCB PREFIX
         LA    R5,TCBFRS           GET PTR TO FLOATING PT REG SAVE
         DROP  R5
         LA    R15,RADDRLEN+SP2(R4)    CALCULATE LENGTH OF OUTPUT
         AR    R15,R15             DOUBLE IT FOR LENTH OF TWO FIELDS
         LA    R15,SP4(R15,R6)     CALCULATE SPACE FOR 2 REGS IN BUF
         MVI   REMAIN2+ONE,SP4     SET SPACING FACTOR FOR FLT PT REGS
         B     LSTREG20            RETURN TO LIST REG MAINLINE
         EJECT
***********************************************************************
*                                                                     *
*  LIST REGISTER MAINPROCESS ROUTINE, AT ENTRY, THE FOLLOWING REGS    *
*  ARE INITIALIZED                                                    *
*        2  CURRENT REG NUMBER                                        *
*        4  LENGTH OF AN OUTPUT DATA FIELD                            *
*        5  PTR TO REG SAVE AREA FOR CURRENT REGISTER                 *
*        6  CURRENT BUFFER PTR                                        *
*  OTHER REGISTERS WITH CONSTANT USES ARE,                            *
*        3  PTR TO CONVERT OUTPUT AREA                                *
*                                                                     *
***********************************************************************
LSTREG50 DS    0H
         L     R3,CONAREA          SET UP A PTR TO CONAREA
LSTREG54 DS    0H
         SR    R0,R0               CLEAR REG 0 TO 0 THEN MAKE IT NEG
         BCTR  R0,NULL                 TO INDICATE CONVERT TO PRINTABLE
LSTREG56 DS    0H
         LA    R1,APDE             R1=ADDR OF ADDRESS PDE
         L     R15,TSTCONVT        R15=ADDR OF IKJEGCVT
         LCR   R1,R1               R1 NEG INDICATES ADDR CONVERSION
         BALR  R14,R15             GO CONVERT ADDR
         LTR   R15,R15             TEST RETURN CODE
         BNZ   LSTCVTRC            IF NON-ZERO, BRANCH
         IC    R15,CONLFLD(R3)     PICK UP LENGTH OF ADDRESS FIELD
         BCTR  R15,NULL            DECREMENT LENGTH FOR AN MVC INSTR
         EX    R15,DATAMOVE        MOVE ADDRESS TO BUFFER
         LA    R6,ONE(R15,R6)      INCREMENT BUF PTR PAST DATA
         ST    R5,VPDEPT           SET VALUE PDE TO ADDR OF REG CONTENT
         L     R15,TSTCONVT        R15=ADDR OF CONVERT ROUTINE
         LA    R1,VPDE             R1=ADDR OF VALUE PDE
         BALR  R14,R15             GO CONVERT REG CONTENTS
         LTR   R15,R15             TEST RETURN CODE
         BNZ   LSTCVTRC            IF NON-ZERO, BRANCH
         IC    R15,CONLFLD(R3)     PICK UP LENGTH OF CONVERTED DATA
         BCTR  R15,NULL            DECREMENT BY 1 FOR AN MVC INSTR
         EX    R15,REGMOVE         MOVE CONVERTED DATA TO BUFFER
         LA    R6,SP2(R4,R6)       INCREMENT BUF PTR PAST DATA
         C     R2,A2               IS ADDR JUST PROCESSED END OF RANGE
         BNL   LSTREG70            IF YES, BRANCH, AND TEST FOR WRAP
         AH    R2,REMAIN           INCREMENT REG NUMBER
         AH    R5,A1L              INCREMENT INPUT DATA PTR
LSTREG60 DS    0H
         ST    R2,A1               STORE ADDR OF NEXT REG TO LIST
         LA    R15,SP2+RADDRLEN(R4,R6)  CALCULATE PTR AFTER NXT FLD
         AH    R15,REMAIN2         ADD APPROPIATE SPACING FACTOR
         C     R15,ENDOGRP         WILL ANOTHER ADDR + DATA FIT IN BUF
         BH    LSTREG62            IF NOT, BRANCH
         AH    R6,REMAIN2          INCRE BUF PTR BY INTER-GROUP SPACE
         B     LSTREG56            GO PROCESS NEXT REG
         SPACE
LSTREG62 DS    0H
         BAL   R7,LSTIO            ELSE, GO OUTPUT BUFFER
         B     LSTREG54            GO LIST MORE REGS
LSTREG70 DS    0H
         TM    COMFLGS,WRAPSW      ELSE TEST FOR WRAP
         BNO   LSTREG80            IF NOT, LISTING IS DONE, BRANCH
         L     R5,REGSTART         ELSE GET REG SAVE START ADDR
         L     R15,PDE2USER        GET 2ND REG NUMBER GIVEN BY USER
         SR    R2,R2                   SET UP ADDR FOR REG 0
         ST    R15,A2                  SET ADDR2 TO LAST REG ADDR
         NI    COMFLGS,HEXFF-WRAPSW    TURN OFF WRAP SW
         B     LSTREG60            GO PROCESS REMAIN REGS
LSTREG80 DS    0H
         BAL   R7,LSTIO            GO OUTPUT LAST DATA
         B     LSTCC0              RETURN TO LIST MAINLINE
REGMOVE  MVC   SP2(NULL,R6),CONDATA(R3)   MOVES DATA TO BUFFER
         TITLE 'IKJEGLST, ''LIST'', COMMON INTERFACE WITH IKJEGIO'
***********************************************************************
*                                                                     *
*  THIS ROUTINE SETS UP THE PTRS AND CALLS IKJEGIO1 TO OUTPUT A LINE  *
*  OF DATA. AT ENTRY, THE FOLLOWING REGS ARE SET.                     *
*        R6  POINTS TO THE NEXT AVAILABLE BYTE IN THE BUFFER          *
*        R7  HAS THE RETURN POINT ADDRESS                             *
*                                                                     *
*  THE CONTENTS OF REGS 0, 1, 6, 14, AND 15 ARE MODIFIED BY THIS RTN  *
*                                                                     *
***********************************************************************
         SPACE
LSTIO    DS    0H
         LR    R15,R6              R15=PTR TO 'END OF DATA'+1
         L     R6,OUTBUF           R6=PTR TO BEGINNING OF BUF
         SR    R15,R6              CALCULATE LENGTH OF DATA
         STH   R15,F1STHALF(R6)    LNTH TO 1ST HALF WORD OF BUFFER
         SPACE
*  COMMON PORTION OF IO ROUTINE.
         SPACE
LSTIO1   DS    0H
         TM    TSTFLGS1,TSTPRINT+TSTFIRST  IS OUTPUT TO A DS 1ST TIME
         BM    FIRSTIO             IF OUTPUT TO DS 1ST TIME, BRANCH
         SR    R0,R0               IF NOT 1ST TIME, INDICATE SO BY R0=0
LSTIO4   DS    0H
         STM   R2,R3,WKWORDS       SAVE CONTENTS TO WORK REGS
         L     R2,DATAPR           OBTIAN DATA LINE ADDRESS FOR I/O
         LR    R3,R0               TRANSFER CONTENTS OF DSNAME PDE
         XC    LSTRETCD,LSTRETCD   SET THE RETURN CODE TO 0
         XC    TSTIOPRM,TSTIOPRM   ZERO OUT PARM FIELD FOR I/O CALL
         IKJEGSIO  DATA,DATAPTR=(R2),DSNAME=(R3), ISSUE I/O CALLING MAC*
               ID=LST20,MF=(E,TSTIOPRM)   RO FOR DATA LINE
         LM    R2,R3,WKWORDS       RESTORE WORK REGISTERS
         CH    R15,H16             TEST THE RTN CODE
         BL    LSTIO3              IF NOT SERIOUS CONTINUE
         ST    R15,LSTRETCD        SAVE THE RETURN CODE FOR MAINLINE
         B     LSTMN90             GO BACK TO MAINLINE
LSTIO3   DS    0H
         LTR   R15,R15             SEE IF PROCESSING SHOULD BE CONT'D
         BNZ   LSTMN90             IF NOT ZERO RETURN TO MAINLINE
         MVI   DATAOFF(R6),BLANK   MOVE A BLANK TO START OF DATA AREA
         MVC   DATAOFF+ONE(LSTBUFL,R6),DATAOFF(R6)     BLANK OUT BUFFER
         LA    R6,DATAOFF(R6)      INCRE BUF PTR PAST LL00 FIELD
         BR    R7                  RETURN TO PROCESSING
         SPACE
***********************************************************************
*                                                                     *
*  THIS ROUTINE IS ENTERED AT THIS POINT WITH R1=COMPLIMENT OF THE    *
*  ADDRESS OF THE TWO WORD LIST IF OUTPUT IS A MESSAGE.               *
*                                                                     *
***********************************************************************
LSTIO2   DS    0H
         L     R6,OUTBUF           SET R6 TO POINT AT OUTPUT BUF
         B     LSTIO1              GO TO COMMON PART OF IO ROUTINE
         SPACE
FIRSTIO  DS    0H
         L     R14,TSTANSPL        PICK UP BASE ADDR FOR PARSE DSECT
         USING IKJPARMD,R14        ADDRESSABILITY FOR THE PDL
         LA    R0,DSNAME           SET UP PTR TO THE DSNAME PDE
         OI    TSTFLGS1,TSTFIRST   SET FIRST TIME SWITCH TO 1
         DROP  R14
         B     LSTIO4              RETURN TO MAIN IO ROUTINE
         TITLE 'IKJEGLST, ''LIST'', GENERAL SUBROUTINES'
***********************************************************************
*                                                                     *
*  THIS CLOSED SUBROUTINE CHECKS SEGMENTS OF CORE FOR INSERTED BREAK- *
*  POINTS AND REPLACES THEM WITH THE ORIGINAL CONTENS OF THE LOCATION.*
*  THE ROUTINE MOVES THE NEXT 32 BYTES TO BE LISTED TO A WORKAREA AND *
*  SCANS THE BREAK ELEMENT QUEUE FOR ANY BREAK POINT SVC'S WITHIN THE *
*  32 BYTE FIELD. WHEN A BREAKPOINT SVC IS FOUND TO BE IN THE RANGE,  *
*  THE ORIGINAL INSTRUCTION IS MOVED (1ST 2 BYTES) INTO WORK AREA OVER*
*  THE BREAKPOINT SVC.  REGISTERS ARE SAVED AND RESTORED.             *
*                                                                     *
*  INPUT A1=ORIGINAL START ADDR OF DATA IN HOLD AREA                  *
*        VPDEPT=ADDR OF NEXT BYTE OF THE HOLD AREA TO BE LISTED.      *
*                                                                     *
***********************************************************************
         SPACE
LSTBPT   DS    0H
         SAVE  (14,12)             STANDARD SAVE
         SPACE
*  CALCULATE THE NEW DATA ADDRESS.
         SPACE
         L     R3,VPDEPT           GET ADDR OF NEXT BYTE OF HOLDAREA
         LA    R5,HOLDAREA         SET UP START ADDR OF HOLDING CORE
         SR    R3,R5               DETERMINE NUMBER OF BYTES USED
         A     R3,A1               INCRE INPUT CORE ADDR BY AMT LISTED
         LA    R4,LSTIBLK(R3)      ESTABLISH ADDR OF END OF NEXT BLK
         C     R4,ENDADR           IS END ADDR GREATER THAN HIGHEST
         BH    LSTBPT30            IF OUT OF CORE, BRANCH TO ADJUST RTN
         L     R0,A2               OBTAIN LAST ADDRESS
         SR    R0,R3               PREPARE TEST LESS THAN FULL
         CH    R0,H32              TEST 32 OR MORE BYTES LEFT
         BNL   MOVEMAX             IF 32 OR MORE BYTES LEFT
         LR    R1,R0               ESTAB NUMBER OF BYTES TO MOVE
         B     LSTBPT04            BRANCH TO MOVE ROUTINE
MOVEMAX  DS    0H                  BRANCHED TO 32 CAN BE MOVED
         LA    R1,LSTIBLK          USE STANDARD LENGTH FOR HOLD DATA
LSTBPT04 DS    0H
         EX    R1,HOLDMVC          MOVE DATA TO HOLDING AREA
         SPACE
*  IF THE DATA ADDRESS IS NOT ON A HALF WORD BOUNDARY, R0 WILL CONTAIN
*  A ONE (1), IF THE DATA ADDRESS IS ON A HALFWORD BOUNDARY, R0 WILL
*  CONTAIN A ZERO (0). THE CONTENTS OF R0 WILL THEN BE USED TO ADJUST
*  THE DATA ADDRESS AND THE HOLDAREA ADDRESS. THIS ADJUSTMENT IS TO
*  TAKE CARE OF THE CASE WHERE THE DATA START ADDRESS IS THE SECOND
*  BYTE OF A BREAKPOINT.
         SPACE
BLOW2    DS    0H                  ESTABLISH ADDR IF ABEND
         LA    R0,ONE              SET THE LOW ORDER BIT ON IN REG 0
         NR    R0,R3               TEST DATA ADDRESS FOR A HALFWORD BDY
         SR    R3,R0               ADJUST DATA START ADDRESS IF NEEDED
         SR    R5,R0               MAKE SAME CHANGE FOR HOLDAREA ADDR
         L     R6,BREAKTAB         GET PTR TO FIRST BREAK ELEMENT
         USING BRKELEM,R6          ADDRESSABILITY FOR BREAK ELEMENT
         LTR   R6,R6               IS THERE A 1ST BREAK ELEMENT
         BP    LSTBPT12            IF THERE IS A BREAK ELEMENT, BRANCH
         B     LSTBPT20            IF NONE, RETURN
         SPACE
LSTBPT08 DS    0H
         L     R6,BRKLINK          PICK UP FOREWARD PTR
         LTR   R6,R6               TEST FOR ANOTHER
         BNP   LSTBPT20            IF NO MORE, BRANCH
LSTBPT12 DS    0H
         C     R3,BRKADDR          COMPARE START ADDR TO BREAKPOINT
         BH    LSTBPT08            IF BRK-PT LOW, NOT IN RANGE, BRANCH
         C     R4,BRKADDR          COMPARE END ADDR TO BREAKPOINT
         BNL   LSTBPT40            IF END ADDR HI OR EQ, ADDR IN RANGE
LSTBPT20 DS    0H
         AR    R3,R0               RE-ADJUST DATA ADDRESS AS NEEDED
         AR    R5,R0               DO THE SAME FOR HOLD AREA ADDRESS.
         ST    R3,A1               SAVE ACTUAL CORE ADDR OF CUR DATA
         ST    R5,VPDEPT           RESET VALUE PDE TO PT AT HOLD AREA
         RETURN (14,12)            RETURN TO CALLER
         SPACE
LSTBPT30 DS    0H
         L     R1,ENDADR           PICK UP HIGHEST CORE ADDR
         LR    R4,R1               SET TOP ADDR AS TOP OF CORE
         SR    R1,R3               DETERMINE REMAINING LENGTH IN BYTES
         B     LSTBPT04            RETURN TO MAIN LSTBPT FLOW
         SPACE
***********************************************************************
*  IF A BREAK POINT IS FOUND IN THE RANGE, THE FOLLOWING CODE
*  WILL REPLACE THE BREAK POINT SVC WITH THE ORIGINAL INSTRUCTION
***********************************************************************
         SPACE
LSTBPT40 DS    0H
         L     R2,BRKADDR          R2=ADDR OF BREAKPOINT SVC
         SR    R2,R3               DETERMINE OFFSET INTO HOLD AREA,
         AR    R2,R5               ADD THE ADDR OF HOLDAREA
         SPACE
*  IF THE BREAK ELEMENT IS STILL ACTIVE, REPLACE THE BREAKPOINT SVC
*    WITH THE DATA FROM THE BREAK ELEMENT.
         SPACE
         MVC   ZERO(TWO,R2),BRKINST    REPLACE SAVED INSTR
         B     LSTBPT08            RETURN TO SEARCH LOOP
         SPACE
BLOW1    DS    0H                  ESTABLISH ADDR IF ABEND
HOLDMVC  MVC   HOLDAREA(NULL),ZERO(R3) MOVE SEGMENT OF CORE TO HOLD.
         DROP  R6
         EJECT
***********************************************************************
*                                                                     *
*  GENERAL SUBROUTINE FOR MOVING SYMBOLIC ADDRESSES TO THE OUTPUT BUF *
*        AT ENTRY,  R6 SHOULD POINT TO FIRST BYTE OF OUTPUT AREA      *
*                   R7 POINTS TO RETURN POINT.                        *
***********************************************************************
         SPACE
LSTSYM   DS    0H
         OI    APDE+(PDEFLG2-IKJPARMA),CTNAMFLG TURN ON 'QUALIFIED' SW
*  TURN RELATIVE ADDR FLAG ON, AND ABSOLUTE ADDR SW OFF
         XI    APDE+(PDEFLG4-IKJPARMA),RELADDR+ABSADDR
         LA    R2,A1               GET ADDR OF INPUT DATA PTR
         ST    R2,APDE+(PDEADRPT-IKJPARMA) PUT IT IN THE ADDRESS PDE
         L     R6,OUTBUF           GET PTR TO THE OUTPUT BUFFER
         LA    R6,DATAOFF(R6)      INCRE BUFFER PTR PAST LL00 FIELD
         MVI   ZERO(R6),BLANK    MOVE BLANK TO BUFFER     @ZA07140
         MVC   ONE(LSTBUFL-DATAOFF,R6),ZERO(R6) BLANK OUT @ZA07140
         BAL   R14,LSTAMV          GO MOVE THE ADDRESS TO THE BUFFER
         L     R15,A1              R15=START ADDR OF DATA
         ST    R15,PPTEMP          MAKE START OF DATA ADDR BASE FOR REL
         L     R3,CONAREA
         SR    R0,R0               R0=0
         BCTR  R0,NULL             MAKE NEG TO SHOW CONVERT TO PRINT
         BAL   R14,LSTBPT          GO CLEAR BREAKPOINT SVC'S FROM DATA
         BR    R7                  RETURN TO CALLER
         EJECT
***********************************************************************
*  THIS ROUTINE WILL ADD THE PRODUCT OF THE LENGTH AND MULTIPLICITY   *
*  TO THE START ADDRESS AND COMPARE THE SUM TO 'ENDADR'. IF THE       *
*  SUM EXCEEDS 'ENDADR', A NEW MULTIPLICITY IS CALCULATED AND SWITCH  *
*  'OUTCORE' IN COMFLGS IS SET, THE NUMBER OF BYTES NOT OUT           *
*  OF CORE IS PLACED 'LASTLEN', AND THE CALCULATED MULTIPLICITY IS    *
*  STORED IN 'A1M'.                                                   *
*  RETURN CODES---   4  IF 'NEW' MULTIPLICITY IS ZERO                 *
*                    0  FOR ALL OTHER CASES.                          *
***********************************************************************
LSTLMTCK DS    0H
         SAVE  (0,12)
         L     R2,A1               GET DATA START ADDR
         LH    R3,A1L              GET LENGTH FOR THIS REQUEST
         LA    R2,ZERO(ZERO,R2)    CLEAR HIGH BYTE FOR CALCULATION
         MH    R3,A1M              MULTIPLY  (LENGTH X MULTIPLICITY)
         AR    R3,R2               ADD START ADDR TO LENGTH OF REQUEST
         BCTR  R3,NULL             DECREMENT TO MAKE EXCLUSIVE
         ST    R3,A2               STORE 2ND ADDR FOR LATER USE
         C     R3,ENDADR           COMPARE POTENTIAL END ADDR TO TOP
         BH    LSTLMT20            IF REQUEST GOES OUT OF CORE, BRANCH
LSTLMT10 DS    0H
         SR    R15,R15             SET RETURN CODE TO ZERO
LSTLMT14 DS    0H
         RETURN  (0,12)
         SPACE
LSTLMT20 DS    0H
         L     R5,ENDADR           GET LAST MACHINE ADDRESS
         ST    R5,A2               STORE 2ND ADDR FOR LATER USE
         SR    R4,R4               CLEAR EVEN REG FOR DIVIDE
         LH    R3,A1L              GET LENGTH FOR THIS REQUEST
         SR    R5,R2               TOP ADDR - START ADDR
         LA    R5,ONE(ZERO,R5)     ADD ONE TO MAKE LASTLEN INCLUSIVE
         DR    R4,R3               DIVIDE BYTES IN CORE BY LENGTH
         STH   R5,A1M              SET NEW MULTIPLICITY
         STH   R4,LASTLEN          SAVE NO. OF BYTES IN CORE
         OI    COMFLGS,OUTCORE
         LTR   R5,R5               WAS REMAINING MULTI ZERO
         BNZ   LSTLMT10            IF NOT, BRANCH
         LA    R15,FOUR            SET RETURN CODE TO FOUR
         B     LSTLMT14            GO RETURN WITH A RC=4
         SPACE
         EJECT
***********************************************************************
*                                                                     *
*  GENERAL SUBROUTINE FOR MOVING ADDRESSES TO THE OUTPUT BUFFER.      *
*        AT ENTRY,  R6 SHOULD POINT TO THE NEXT AVAILABLE BUFFER BYTE *
*                   R8 SHOULD CONTAIN THE ADDRESS OF THE ADDR PDE.    *
*        AT-EXIT,   R6 CONTAINS THE UPDATED BUFFER PTR, AND           *
*                   THE OUTPUT BUFFER CONTAINS THE ADDRESS STRING.    *
*                                                                     *
***********************************************************************
LSTAMV   DS    0H
         SAVE  (14,12)             SAVE CALLERS REGS
         LA    R2,X'40'            PUT A BLANK IN REG2         @ZA00914
         STC   R2,0(R6)            PUT A BLANK IN BUFFER       @ZA00914
         MVC   ONE(7,R6),0(R6)     PROPAGATE BLANKS            @ZA00914
         TM    PDEFLG1,LDNAMFLG    WAS A LOADNAME USED
         BZ    LSTAMV04                IF NOT, BRANCH
         LH    R2,PDELEN1          PICK UP LENGTH OF LOAD NAME
         BCTR  R2,NULL                 DECREMENT BY 1 FOR MVC INSTR
         L     R15,PDELDNAM        PICK UP PTR TO LOAD NAME
         EX    R2,SYMMOVE          MOVE SYMBOL TO OUTPUT LOCATION
         LA    R6,ONE(R2,R6)       INCREMENT BUF PTR PAST LOADNAME
LSTAMV04 DS    0H
         TM    PDEFLG2,CTNAMFLG    WAS ENTRY NAME SPECIFIED
         BZ    LSTAMV08                IF NOT, BRANCH
         MVI   ZERO(R6),PERIOD     MOVE IN SEPARATOR
         LA    R6,L'PERIOD(R6)     INCREMENT BUF PTR PAST PREFIX
         LH    R2,PDELEN2          GET LENGTH OF ENTRY NAME AND
         BCTR  R2,NULL                 DECREMENT BY 1 FOR MVC INSTR
         L     R15,PDECTNAM        PICK UP PTR TO ENTRY NAME
         EX    R2,SYMMOVE          MOVE NAME TO OUTPUT AREA
         LA    R6,ONE(R2,R6)       INCREMENT BUF PTR PAST ENTRYNAME
         TM    PDEFLG4,CTONLY      IS ADDR TYPE STAND ALONE ENTRYNAME
         BO    LSTAMV16                IF STAND ALONE ENTRYNAME, BRANCH
         MVI   ZERO(R6),PERIOD     MOVE IN SEPARATOR
         LA    R6,L'PERIOD(R6)     INCREMENT BUF PTR PAST PREFIX
LSTAMV08 DS    0H
         LH    R2,PDELEN3          PICK UP LENGTH OF WYMBOL AND
         BCTR  R2,NULL                 DECREMENT BY 1 FOR MVC INSTR
         L     R15,PDEADRPT        R15=PTR TO SYMBOL
         EX    R2,SYMMOVE          MOVE SYMBOL TO OUTPUT AREA
         LA    R6,ONE(R2,R6)       INCREMENT BUF PTR PAST SYMBOL
LSTAMV16 DS    0H
         ST    R6,R6OFF(R13)       MODIFY REG 6 CONTENTS (IN SAVE AREA)
         RETURN (14,12)            RETRUN TO CALLER WITH HIS REGS
SYMMOVE  MVC   ZERO(NULL,R6),ZERO(R15)  FOR MOVING NAMES TO BUFFER
         TITLE 'IKJEGLST, ''LIST'', PARSE EXIT SUB-ROUTINES'
***********************************************************************
*                                                                     *
*  ENTRY POINT FOR LENGTH VALIDITY CHECK EXIT ROUTINE.                *
*                                                                     *
***********************************************************************
LSTVALEN DS    0H
         SAVE  (14,12)             SAVE PARSE REGS
         LA    R14,OFFSETL1(R15)   SET UP ADDR OF LNTH/MULTI ROUTINE
         SR    R4,R4               INDICATE LENGTH PARAMETER
         B     OFFSET1(R15)        GO TO COMMON LINK CONVENTION RTNJ
         SPACE
***********************************************************************
*                                                                     *
*  ENTRY POINT FOR MULTIPLICITY VALIDITY CHECK EXIT ROUTINE.          *
*                                                                     *
***********************************************************************
LSTVALMT DS    0H
         SAVE  (14,12)             SAVE PARSE REGS
         LA    R14,OFFSETM1(R15)   SET UP ADDR OF LNTH/MULTI ROUTINE
         LA    R4,TWO              INDICATE MULTIPLICITY PARAMETER
         B     OFFSET2(R15)        GO TO COMMON LINK CONVENTION RTN
         SPACE
***********************************************************************
*                                                                     *
*  ENTRY POINT FOR ADDRESS VALIDITY CHECK EXIT ROUTINE.               *
*                                                                     *
***********************************************************************
LSTVALAD SAVE  (14,12)             SAVE PARSE PREGS
         LA    R14,OFFSETAD(R15)   SET UP ADDR OF ADDRESS VALIDITY RTN
         SPACE
LSTVALCM DS    0H
OFFSET1  EQU   *-LSTVALEN
OFFSET2  EQU   *-LSTVALMT
         L     R12,FOUR(R1)        R12=PTR TO LIST'S SAVE AREA
         LR    R3,R1               SAVE REG1
         LM    R6,R12,R6OFF(R12)   RESTORE REQUIRED REGS OF LIST
         L     R2,REGSAVE3         PTR TO NEW SAVE AREA
         ST    R2,FOREPTR(R13)     FOREWARD CHAIN SAVE AREAS.
         ST    R13,BACKPTR(R2)     BACKWARD CHAIN SAVE AREAS.
         LR    R13,R2              SET NEW SAVE AREA
         OI    TSTFLGS4,TSTVALCK   TURN ON VALIDITY CHECK ROUTINE BIT
         SR    R0,R0               INDICATE CONVERT TO BINARY
         L     R8,OUTBUF           OBTAIN ADDRESS TO OUTBUF
         ST    R0,ZERO(R8)         INITIALIZE SECOND LEVEL LENGTH ZERO
         L     R8,ZERO(R3)         GET ADDR OF PDE
         BR    R14                 GO TO PROPER RTN
         EJECT
***********************************************************************
*                                                                     *
*  ADDRESS VALIDITY ROUTINE. AT ENTRY, R0=0, AND R2=PTR TO ADDR PDE.  *
*                                                                     *
***********************************************************************
LSTADR   DS    0H
OFFSETAD EQU   *-LSTVALAD
         SPACE
         USING IKJPARMA,R8         ADDRESSABILITY FOR THE ADDR PDE
         LCR   R1,R8               INDICATE ADDR CONVERSION
         L     R15,TSTCONVT        GET ADDR OF IKJEGCVT
         OI    TSTFLGS1,RANGESW    SET SW TO SHOW ADDR MAY BE A RANGE
         BALR  R14,R15             GO TO CONVERT ROUTINE
         LTR   R15,R15             TEST CONVERT RTN CODE
         BNZ   LSTADR12            IF NON-ZERO, BRANCH
         TM    PDE2FLG3,AFLG       WAS A SECOND ADDR GIVEN
         BO    LSTADR04            IF YES, BRANCH
         TM    PDE2FLG4,CTONLY     WAS A 2ND ADDR GIVEN AS ENTRY NAME
         BZ    LSTADR06            IF NO 2ND ADDRESS, BRANCH
LSTADR04 DS    0H
         TM    PDEFLG4,GENR+LFPR+SFPR  IS 1ST ADDR A REG TYPE
         BZ    LSTADR26            IF NOT, BRANCH
         CH    R0,PDEINDCT         IS 1ST REG ADDR INDIRECTED
         BNE   LSTADR26            IF INDIRECT, BRANCH, ADDR IS CORE
         SPACE
*  ADDRESS 1 IS A REG ADDRESS, NOW TEST ADDRESS 2.
         SPACE
         CH    R0,PDE2INDC         IS 2ND REG ADDR INDIRECTED
         BNE   LSTADR50            IF INDIRECT, ERROR, BRANCH
         CLC   PDEFLG4,PDE2FLG4    COMPARE TYPES FOR 1ST AND 2ND ADDRS
         BNE   LSTADR24            IF NOT EQ, ERROR, BRANCH
LSTADR06 DS    0H
         SR    R15,R15             SET RETURN CODE TO 0
LSTADR08 DS    0H
         L     R13,BACKPTR(R13)    PICK UP CALLERS SAVE AREA ADDRESS
         L     R1,R1OFF(R13)       PICK UP PTR TO PARM LIST FROM PARSE
         L     R8,OUTBUF           PICK UP ADDR OF OUTBUF/2ND LEV MSG
         LH    R7,ZERO(R8)         PICK UP MSG LENGTH
         LTR   R7,R7               SEE IF THERE IS A SECOND LEVEL MSG
         BZ    NO2NDLEV            IF NOT, BRANCH AROUND NEXT INST.
         ST    R8,EIGHT(ZERO,R1)   PASS PTR TO 2ND LEVEL MSG
NO2NDLEV DS    0H
         NI    TSTFLGS1,HEXFF-RANGESW  CLEAR RANGE SW FOR RE-USE
         NI    TSTFLGS4,HEXFF-TSTVALCK TURN OFF VALIDITY CHECK SWITCH
         RETURN (14,12),,RC=(15)   RETURN TO PARSE
         SPACE
LSTADR12 DS    0H
         C     R15,FSIXTEEN        WAS RETURN CODE A 16 OR 20
         BNL   LSTADR16            IF 16 OR 20, BRANCH
         TM    TSTFLGS1,RANGESW    WAS 1ST OR 2ND PDE IN ERROR
         LA    R1,PDEUSER          ANTICIPATE 1ST PDE IN ERROR
         BO    LSTADR14            IF 1ST ADDR IN ERROR, BRANCH
         LA    R1,PDE2USER         IF 2ND PDE IN ERROR, RE-INITIALIZE
LSTADR14 DS    0H
         SPACE
LSTADR15 DS    0H
         LA    R15,EIGHT           SET RETURN CODE TO 8.
         B     LSTADR08            BRANCH TO RETURN RTN
         SPACE
LSTADR16 DS    0H
         ST    R15,LSTRETCD        SAVE RC TO PASS BACK TO MAINLINE
         LA    R15,TWELVE          SET RC=12 TO PARSE
         B     LSTADR08            GO RETURN TO PARSE
         SPACE
LSTADR24 DS    0H
         TM    PDE2FLG4,GENR+SFPR+LFPR  IS ADDR 2 REGISTER TYPE
         BNM   LSTADR50            IF NOT REG TYPE, BRANCH
         LA    R6,M0219            OBTAIN MSG NUMBER FOR I/O CALL
         B     LSTADR70            GO TO MSG ROUTINE
         SPACE
*  IF ADDRESS 1 IS A CORE ADDRESS AND A RANGE WAS GIVEN, ADDRESS 2    *
*  MUST ALSO BE A CORE ADDRESS.                                       *
         SPACE
LSTADR26 DS    0H
         TM    PDE2FLG4,GENR+LFPR+SFPR  IS 2ND ADDR REG TYPE
         BZ    LSTADR30            IF NOT REG, BRANCH
         CH    R0,PDE2INDC         IF 2ND ADDR REG TYPE, IS IT INDIRECT
         BE    LSTADR50            IF 2ND ADDR REG TYPE, BRANCH
         SPACE
*  IF AN ADDRESS RANGE HAS BEEN SPECIFIED AND THE ADDRESSES ARE CORE  *
*  ADDRESS 1 MUST BE LESS THAN OR EQUAL TO ADDRESS 2.                 *
         SPACE
LSTADR30 DS    0H
         L     R3,PDEUSER          GET 1ST ADDR OR SI PTR (SYM-INFO)
         LTR   R3,R3               IS 1ST ADDR AN SI PTR
         BNM   LSTADR32            IF NOT AN SI PTR, BRANCH
         L     R3,SIDATAPT(R3)     GET ACTUAL DATA ADDR FROM SI BLK
LSTADR32 DS    0H
         LA    R3,ZERO(R3)         ZERO OUT HIGH ORDER BYTE
         L     R4,PDE2USER         GET 2ND ADDR OR SI PTR
         LTR   R4,R4               IS 2ND ADDR AN SI BLK PTR
         BNM   LSTADR36            IF NOT AN SI BLOCK PTR, BRANCH
         L     R4,SIDATAPT(R4)     GET ACTUAL DATA ADDRESS
LSTADR36 DS    0H
         LA    R4,ZERO(R4)         ZERO OUT HIGH ORDER BYTE
         CR    R3,R4               COMPARE DATA ADDR 1 WITH DATA ADDR2
         BNH   LSTADR06            IF ADDR 1 IS EQUAL OR HIGH, BRANCH
         SPACE
*  IF ADDRESS 2 IS LOWER THAN ADDRESS 1, THE RANGE IS INVALID AND AN  *
*  ERROR MESSAGE MUST BE ISSUED.                                      *
         SPACE
         LA    R6,M0221            OBTAIN MSG NUMBER FOR I/O CALL
         B     LSTADR70            GO TO MSG SETUP ROUTINE
         SPACE
LSTADR50 DS    0H
         LA    R6,M0220            OBTAIN MSG NUMBER FOR I/O CALL
         B     LSTADR70            GO TO MESSAGE SET UP ROUTINE
         SPACE
*  INVALID ADDRESS AND ADDRESS RANGE MESSAGE SETUP ROUITNE            *
*        AT ENTRY, R15 CONTAINS THE OFFSET TO THE DESIRED MSG LIST.
         SPACE
LSTADR70 DS    0H
         XC    TSTIOPRM,TSTIOPRM   ZERO OUT PARM FIELD FOR I/O CALL
         IKJEGSIO  MSG,FIRST=M0073,INST11=(APDE,(R8)), ISSUE I/O CALL- *
               SECOND=(R6),ID=LST20,MF=(E,TSTIOPRM)    ING MACRO
LSTADR86 DS    0H
         CH    R15,H16             TEST THE RTN CODE
         BL    LSTADR15            IF SUCCESSFUL CONTINUE WITH PROMPT
         B     LSTADR16            GO BACK TO MAINLINE THRUGH PARSE
         DROP  R8
         EJECT
***********************************************************************
*                                                                     *
*  LENGTH/MULTIPLICITY VALIDITY ROUTINE, AT ENTRY,                    *
*        R0=0, R2=PTR TO THE PDE, AND R4= EITHER 0 FOR LENGTH         *
*        VALIDITY CHECK, OR 2 FOR MULTIPLICITY VALIDITY CHECK.        *
*                                                                     *
***********************************************************************
         SPACE
LSTLM    DS    0H
OFFSETL1 EQU   *-LSTVALEN          OFFSET FROM LNTH VALIDCK E.P.
OFFSETM1 EQU   *-LSTVALMT          OFFSET FROM MULTIPLICITY VALIDCK EP
         LA    R1,VPDE             SET UP REG 1 TO CONVERT A VALUE
         MVC   VPDE(VPDELEN),ZERO(R8)  MOVE IDENT PDE TO WORKING CORE
         MVI   VPDET,HCODE         INDICATE TYPE IS FIXED PT HALFWORD
         L     R15,TSTCONVT        ADDR OF IKJEGCVT
         BALR  R14,R15             GO TO CONVERT RTN
         LTR   R15,R15             TEST RETURN CODE
         BNZ   LSTADR86            IF NON-ZERO, BRANCH, GO TEST RC
         L     R15,CONAREA         ADDR OF CONVERT OUTPUT AREA
         LA    R15,CONDATA(R15)    INCREMENT PTR PAST LENGTH FIELD
         LH    R0,ZERO(R15)        PICK UP CONVERTED VALUE
         CH    R0,H256             COMPARE ATTR TO MAX
         BH    LSTERR              IF HIGH, ERROR, BRANCH
         LTR   R0,R0               TEST FOR LENTH/MULTI EQ 0
         STH   R0,LMATTR(R4)       SAVE CONVERTED ATTRIBUTE
         BNZ   LSTADR06            IF LENTH/MULTI NON-ZERO, BRANCH
         SPACE
LSTERR   DS    0H
         LA    R5,I0084            GET INSERT NUMBER INTO REGISTER
         LTR   R4,R4               IS THE LENGTH BEING CHECKED
         BZ    LENERR              BRANCH IF SO
         LA    R5,I0083            GET INSERT NUMBER INTO REGISTER
LENERR   DS    0H
         XC    TSTIOPRM,TSTIOPRM   ZERO OUT PARM FIELD FOR I/O CALL
         IKJEGSIO  MSG,FIRST=M0017,INST11=(NUM,(R5)),  ISSUE I/O CALL- *
               SECOND=M0278,ID=LST20,MF=(E,TSTIOPRM)   ING MACRO
         CH    R15,H16             TEST THE RTN CODE
         BL    LSTADR15            IF SUCCESSFUL CONTINUE
         B     LSTADR16            RETURN TO MAINLINE THROUGH PARSE
         SPACE
DATAMOVE MVC   ZERO(NULL,R6),CONDATA(R3)  FOR MOVING DATA TO BUFFER
         EJECT
***********************************************************************
*
*        STAE RETRY ROUTINE
*
***********************************************************************
         SPACE 3
RETRY    DS    0H
         L     R4,CVTPTR           PTR TO CVT
         USING CVTDSECT,R4         ADDRESSABILITY FOR CVT
         L     R4,CVTTCBP          TCB PTR
         L     R4,FOUR(R4)         CURRENT TCB PTR
         DROP  R4
         USING TCB,R4              TCB ADDRESSABILITY
         L     R9,TCBTRN           TCOMTAB PTR
         OI    TSTFLGS4,TSTRERTN   TURN ON RETRY IN PROCESS SW
         L     R13,REGSAVE2        PTR TO SAVE AREA
         LM    R10,R12,R10OFF(R13)     RESTORE MODULE ADDRESSABILITY
         LA    R15,TWENTY          INDICATE ERROR RETURN
         ST    R15,LSTRETCD        SAVE RETURN CODE
         B     LSTMN90             RETURN
         EJECT
*****************************************************************
*
*  THIS ROUTINE IS ENTERED AT THIS POINT TO CK THE VALIDITY OF
*  THE CALCULATED STOP ADDRESS FOR THE LIST COMMAID.
*  REGS ARE SAVED AND RESTORED AND THE ROUTINE RETURNS TO CALLER
*  IF THE ADDRESS PROVES TO BE VALID; OTHERWISE, THE ROUTINE
*  BRANCHES TO PRINT MESSAGE AND RETURN TO MAINLINE.
*
*****************************************************************
ADDRCHK  DS    0H
         SAVE  (14,12)             STANDARD SAVE
         L     R6,PPTCB            EXTAB PTR TO PROB PROG TCB
         L     R7,A2               EXTAB PTR TO STOP ADDR
         IKJEGS9G  ADDRCHK,TCBADDR=(R6),VALUE=(R7),MF=(E,WKWORDS)
         C     R15,FEIGHT          RTN CODE (EIGHT)
         BL    GOODADDR            OK -- RETURN TO PROCESSING
         BH    ERR97               ERROR ENCOUNTERED IN SVC97
         SPACE
*  COMMON PARSE ERROR MESSAGE SETUP ROUTINE.
         SPACE
         XC    TSTIOPRM,TSTIOPRM   ZERO OUT PARM FIELD FOR I/O CALL
         IKJEGSIO  MSG,FIRST=M0018, ISSUE I/O CALLING FOR MSG          *
               SECOND=M0285,ID=LST20,MF=(E,TSTIOPRM)  CALLING MACRO
         CH    R15,H16             TEST THE RTN CODE
         BL    LSTMN90             IF SUCCESSFUL CONTINUE
ERR97    DS    0H
         ST    R15,LSTRETCD        SAVE THE RETURN CODE FOR MAINLINE
         B     LSTMN90             CLEAN UP, RTN TO CALLER I/O RC
GOODADDR RETURN (14,12)            RETURN TO PROCESSING
         TITLE 'IKJEGLST, ''LIST'', PARSE DISCRIPTOR MACROS'
IKJEGPMA IKJPARM
ADDR1 IKJPOSIT ADDRESS,LIST,RANGE,PROMPT='ADDRESS OR REGISTER',        *
               VALIDCK=LSTVALAD
TYPE     IKJKEYWD
         IKJNAME 'C'               CHARACTER FORMAT
         IKJNAME 'X'               HEXADECIMAL
         IKJNAME 'B'               BINARY
         IKJNAME 'F'               FIXED PT BINARY, FULLWORD
         IKJNAME 'H'               FIXED PT BINARY, HALFWORD
         IKJNAME 'E'               FLOATING PT, SINGLE PRECISION
         IKJNAME 'D'               FLOATING PT, DOUBLE PRECISION
         IKJNAME 'A'               ADDRESS CONSTANT, FULLWORD
         IKJNAME 'Y'               ADDRESS CONSTANT, HALFWORD
         IKJNAME 'S'               ADDRESS CONSTANT, BASE/DISPLACEMENT
         IKJNAME 'P'               PACKED DECIMAL
         IKJNAME 'Z'               ZONED DECIMAL
         IKJNAME 'I'               INSTRUCTION FORMAT
LATTR    IKJKEYWD
         IKJNAME 'LENGTH',SUBFLD=LENCD
MATTR    IKJKEYWD
         IKJNAME 'MULTIPLE',SUBFLD=MULCD
PRINT    IKJKEYWD
         IKJNAME 'PRINT',SUBFLD=DSNAM
LENCD    IKJSUBF
LENGTH   IKJIDENT 'LENGTH',MAXLNTH=3,FIRST=NUMERIC,OTHER=NUMERIC,      C
               PROMPT='LENGTH',VALIDCK=LSTVALEN
MULCD    IKJSUBF
MULTI    IKJIDENT 'MULTIPLICITY FACTOR',FIRST=NUMERIC,OTHER=NUMERIC,   C
               PROMPT='MULTIPLICITY FACTOR',VALIDCK=LSTVALMT
DSNAM    IKJSUBF
DSNAME   IKJPOSIT DSNAME,PROMPT='OUTPUT DATA SET NAME'
         IKJENDP
         TITLE 'IKJEGLST, ''LIST'', CONSTANTS AND DSECTS'
PARSEPCL DC    V(IKJEGPMA)         PTR TO PARSE PCL
RETRYAD  DC    A(RETRY)            PTR TO STAE RETRY CODE
         SPACE
XCTLLF  XCTL  ,SF=L                MODEL FOR LIST FORM OF XCTL MACRO
XCTLLEN  EQU   *-XCTLLF            LENGTH OF LIST FORM OF XCTL MACRO
         SPACE
FEIGHT   DC    F'8'                CONSTANT OF EIGHT GENERAL USE
FSIXTEEN DC    F'16'               CONSTANT OF 16, GENERAL USE
         SPACE
LENTH    DC    C'LENGTH+'          KEYWORD TO MOVE IN MESSAGE
MULTIP   DC    C'MULTIPLICITY+'             ''
         SPACE
SMTLABL  DS    0H                  SMT TEST LABEL FOR XCTL MACRO
LSA      DC    C'LSA'              CONSTANT USED BY MAINLINE BLDL RTNE
         SPACE
CONLEN   EQU   13                  LENGTH OF THE PREVIOUS CONSTANTS
         DS    0F
SPMASK   DC    X'01000000'         SUB-POOL NUMBER MASK FOR FREEMAIN
ENDADR   DC    X'00FFFFFF'         MAXIMUM CORE ADDRESS
IKJEGSPL IKJEGSPL RTRY=RETRY,ABNTB=LSTABEND,MODNM=IKJEGLST,TNM=LIST
SUPERZAP DC    50CL1'Z'            AREA FOR TEMP UPDATES
         SPACE
HONE     DC    H'1'                CONSTANT OF 1, GENERAL USE
H16      DC    H'16'               CONSTANT OF SIXTEEN, GENERAL USE
H32      DC    H'32'               CONSTANT OF THIRTY-TWO GENERAL USE
H256     DC    H'256'              CONSTANT OF 256, GENERAL USE
AFLEN    DC    A(ADDRLEN+SP1+SP1)  LENGTH OF ADDR FLD (+ 2 SPACES)
         SPACE 2
LSTABEND DS    0F                                              @ZA06225
         DC    AL1(97)             CODE FOR PROTECTION CHECK
         DC    AL3(BLOW1)          RESUME ADDRESS FOLLOWING
         DC    AL1(97)             CODE FOR PROTECTION CHECK
         DC    AL3(BLOW2)          RESUME ADDRESS FOLLOWING
         DC    AL1(97)             CODE FOR PROTECTION CHECK
         DC    AL3(LSTBPT04)       RESUME ADDRESS FOLLOWING
         DC    AL1(99)             CODE FOR LINK TO PARSE FAILED
         DC    AL3(PARSEBLO)       ADDRESS OF POTENTIAL ABEND
         DC    X'FF'               TABLE STOPPER
         SPACE 2
***********************************************************************
*  THIS TABLE CONVERTS THE NUMBER OF THE TYPE KEYWORD SPECIFIED, TO   *
*  A HEXADECIMAL CODE USED INTERNALLY BY TEST.                        *
*        THE FIRST CODE BYTE (X'04' FOR HEX) IS PICKED UP IF THE TYPE *
*        KEYWORD WAS NOT SPECIFIED AND THE PDE IS ZERO. THE TYPE CODE *
*        OF X'0C' IS NOT CURRENTLY USED BY THE ASSEMBLER AND IS USED  *
*        HERE FOR INSTRUCTION FORMAT, TYPE 'I'. THE ORDER OF THIS     *
*        TABLE DIRECTLY CORRESPONDS TO THE ORDER OF THE IKJNAME MACROS*
*        FOR THE TYPE KEYWORD.                                        *
         SPACE
TYPETBL  DS    0H
         DC    X'04'               CODE FOR HEX FORMAT, DEFAULT TYPE
         DC    X'00'                ''  ''  CHARACTER FORMAT
         DC    X'04'                ''  ''  HEXFORMAT, USER GIVEN
         DC    X'08'                ''  ''  BINARY FORMAT
         DC    X'10'                ''  ''  FIXED PT BINARY 'F'
         DC    X'14'                ''  ''    ''   ''   ''   'H'
         DC    X'18'                ''  ''  FLOATING PT 'E'
         DC    X'1C'                ''  ''     ''    '' 'D'(TYPE -DN-)
         DC    X'20'                ''  ''  A TYPE ADDRESS CONSTANT
         DC    X'24'                ''  ''  Y  ''    ''      ''
         DC    X'28'                ''  ''  S  ''    ''      ''
         DC    X'30'                ''  ''  PACKED DECIMAL FORMAT
         DC    X'34'                ''  ''  ZONED DECIMAL FORMAT
         DC    X'0C'                ''  ''  INSTRUCTION FORMAT, TYPE I
         EJECT
LSTWORK  DSECT
         SPACE
***********************************************************************
*                                                                     *
*  ---NOTICE---                                                       *
*                                                                     *
***** THERE IS A DUPLICATE OF THIS DSECT IN IKJEGLSA AND ANY CHANGES **
*****  TO THE DSECT MUST BE MADE IN BOTH MODULES.                    **
*                                                                     *
*  THIS DSECT MAPS A SECTION OF THE COMMON WORKING CORE POINTED TO    *
*  BY 'WORKAREA' IN TCOMTAB.                                          *
*                                                                     *
***********************************************************************
         SPACE
DWORK    DS    D                   DOUBLE WORD WORKAREA
         ORG   DWORK               USE WORK AREA FOR XCTL LIST
LXCTL1   DS    2A                  PROBLEM PROG PARAMETER LIST
PARSEPL  DS    7F                  PARSE CALLING PARAMETER LIST.
         ORG   PARSEPL             REUSE CORE USED BY PARSE PARM LIST
LSTRPT   DS    0H                  START OF SECTION REUSED FOR ADDR LST
APDE     DS    9F                  WORKING COPY OF THE ADDRESS PDE
A1       DS    A                   CONTAINS CURRENT ADDR OF INPUT
A1LMATTR DS    F                   LENGTH AND MULTIPLICITY FACTORS
         ORG   A1LMATTR            PLACE LNTH AND MULTI IN ONE FULLWORD
A1L      DS    H                   LENGTH
A1M      DS    H                   MULTPLICITY FACTOR
A1FLG    DS    X                   FLAG BYTE FOR ADDR1 INFORMATION
A1FPD    EQU   X'80'               FLOATING PT DBL
A1FPE    EQU   X'40'               FLOATING PT SINGLE
A1GEN    EQU   X'20'               GENERAL REG
A1REG    EQU   X'10'               ADDRESS 1 IS A REG.
         SPACE
A1ABS    EQU   X'00'               ADDR IS ABSOLUTE
A1SYM    EQU   X'03'               ADDR IS SYMBOLIC
A1REL    EQU   X'01'               ADDR IS RELATIVE
         SPACE
A1TYPE   DS    X                   CONTAINS TYPE CODE FOR ADDR1
REMAIN   DS    H                   REMAINDER
A2       DS    A                   SECOND ADDR IF A RANGE WAS GIVEN
ARTIFMUL DS    H                   VALUE OF ARTIFICIAL MULTIPLICITY
DATAINCR EQU   ARTIFMUL            NAME OF FIELD USED IN LIST REGS
REMAIN2  DS    H                   BACKUP COPY OF REMAINDER
REGSTART DS    F                   START ADDR OF REG SAVE AREA TO LIST
LSTRETCD DS    F                   HOLDS RETURN CODE
LASTLEN  DS    H                   CONTAINS REMAINDER FROM LSTLMTCK
COMFLGS  DS    X                   FLAG BYTES FOR PROCESS CONTROL
TWOADDRS EQU   X'80'               1 INDICATE ADDR RANGE
ARTIMSW  EQU   X'40'               1 INDICATE CONTROL IS ARTIFICIAL
NOINDENT EQU   X'20'               1 INDICATES DATA NOT TO BE INDENTED
SECOND   EQU   X'10'               1 INDICATES PROCESSING 2ND GROUP
WRAPSW   EQU   X'08'               1 INDICATES 2ND REG LOWER THAN 1ST
PARSEFLG EQU   X'04'               SW SHOWS IO REQUESTED BY PARSE EXIT
OUTCORE  EQU   X'02'               REQUEST EXTENDS OUT OF CORE
DATASIZE EQU   X'01'               SYMBOLIC FOR NUMBER OF HEX FLDS/GRP
         SPACE
*  THE FOLLOWING FIELDS DEFINE A VALUE PDE FOR CONVERTING DATA.
VPDE     DS    0F                  VALUE PDE FOR CONVERTING DATA
VPDEPT   DS    A                   PTR TO DATA
VPDEL    DS    H                   LENGTH OF DATA FOR CONVERSION
VPDEFLG  DS    X                   FLAGS
VPDET    DS    X                   HEX TYPE CODE FOR VALUE.
         SPACE
RPTSIZE  EQU   *-LSTRPT            LNTH OF REUSED SECTION.
LMATTR   DS    F                   LENGTH AND MULTIPLICITY FACTOR FLD'S
         ORG   LMATTR              PLACE LNTH AND MULTI IN ONE FULLWORD
BINLEN   DS    H                   CONVERTED LENGTH GIVEN BY USER
BINMUL   DS    H                   CONVERTED MLTPLCTY GIVEN BY USER
LXCTL    XCTL  ,SF=L               RESERVE SPACE FOR LIST FORM OF XCTL
ENDOBUF  DS    A                   CONTAINS MAX BUF ADDR + 1
ENDOGRP  DS    A                   CONTAINS GROUP STOP ADDRESS
DATAPR   DS    2F                  MSG PTR LIST FOR IKJEGIO1
         SPACE
TYPESAVE DS    X                   CONTAINS SPECIFIED OR DEFAULTED TYPE
RETRYSAV DS    AL3                 CONTAINS MAINLINES STAE RETRY ADDR
LSTFLGS  DS    X                   FLAG BYTES TO SAVE PARSE DATA
TYPEFLG  EQU   B'10000000'         SET TO ONE IF TYPE KEYWORD USED
LNTHFLG  EQU   B'01000000'         SET TO ONE IF LENGTH KEYWORD USED
MULTIFLG EQU   B'00100000'         SET TO ONE IF MULTIPLICITY GIVEN
         SPACE
         DS    X                   SPILL BYTE FOR HOLDAREA  ON ODD ADDR
         DS    0D                  ALIGN HOLDAREA
HOLDAREA DS    XL32                HOLDS DATA BEING CONVERTED CURRENTLY
WKWORDS  DS    3F                  3 FWDS-SVC97 DYNAMIC WK AREA
*                                  WHEN CALLED
STAELIST STAE  MF=L
         SPACE
LWLNTH   EQU   *-LSTWORK           LENGTH OF DSECT
         EJECT
         EJECT
         TCOMTAB
         SPACE 3
         IKJPARMA
APL      EQU   PDECHAIN-IKJPARMA   SYMBOLIC LENGTH OF AN ADDRESS PDE
         SPACE 3
         TSTCWORK
         EJECT
         BRKELEM
         SPACE 3
         IKJPPL
         EJECT
CVTDSECT DSECT
         CVT
         EJECT
         IKJTCB
         END
