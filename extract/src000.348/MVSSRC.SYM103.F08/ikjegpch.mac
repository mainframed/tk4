         TITLE 'IKJEGPCH, ''ASSIGN'' SUBCOMMAND OF TEST, INITIALIZE'
         COPY  IKJEGSIO
         EJECT
         MACRO
         VALUPDE
***********************************************************************
*                                                                     *
*        MAPPING DSECT FOR PDES FOR VALUES                            *
*                                                                     *
*        STATUS --  VERSION NO. 02                                    *
*                                                                     *
*        CHANGE LEVEL -- 00 - DATE 03/09/72                           *
*                                                                     *
***********************************************************************
VALUPDE  DSECT
VALUPTR  DS    F -                      POINTER TO CHARACTER STRING,
*                                       FIRST BYTE AFTER QUOTE
VALULNH  DS    H -                      LENGTH OF CHARACTER STRING,
*                                       EXCLUDING QUOTES
VALUFLG  DS    XL1 -                    FLAG
VALUBIT  EQU   B'10000000' -            BIT ON MEANS VALUE PRESENT
VALUTYPE DS    CL1 -                    TYPE CHARACTER (CHARACTER
*                                       PRECEDING QUOTE)
VALUCHAI DS    F -                      ADDRESS OF NEXT VALUE
*                                       PDE ON CHAIN
VALUPDL  EQU   *-VALUPDE -              LENGTH OF VALUE PDE
         MEND
         EJECT
***********************************************************************
*                                                                     *
* STATUS--                                                            *
*    CHANGE LEVEL 00, VERSION NUMBER 02, OS/VS2 (5/17/73)             *
*                                                                     *
* FUNCTION--                                                          *
*                                                                     *
*    IKJEGPCH IS THE FIRST OF TWO LOAD MODULES THAT PROCESS           *
*    THE ASSIGNMENT OF VALUES FUNCTION OF TEST.  THE ASSIGNMENT       *
*    FUNCTION MODIFIES VALUES IN MAIN STORAGE AND IN REGISTERS.       *
*                                                                     *
*    IKJEGPCH IS LINKED TO FROM IKJEGMNL WITH REGISTER NINE           *
*    POINTING TO THE TEST COMMUNICATION TABLE (TCOMTAB).  WORK        *
*    AREAS ARE INITIALIZED THAT WILL LATER BE USED BY IKJEGASN,       *
*    THE SECOND OF TWO LOAD MODULES THAT PROCESS THE ASSIGNMENT       *
*    FUNCTION.                                                        *
*                                                                     *
*    THE BUFFER IS SCANNED FOR THE SUBCOMMAND PARAMETERS AFTER        *
*    ISSUING A LINK TO IKJPARS.  IKJPARS IS USED TO BUILD             *
*    PARAMETER DESCRIPTOR ELEMENTS IN THE PARAMETER DESCRIPTOR        *
*    LIST.  THE VALUES SCANNED BY IKJPARS ARE VALIDITY CHECKED        *
*    WHEN IKJEGPCH IS ENTERED AT 1) PCHVALAD TO CHECK THE             *
*    SPECIFIED ADDRESS AND 2) PCHVALTP TO CHECK THE DATA TYPES        *
*    AND VALUES.                                                      *
*                                                                     *
*    IF THE SCAN IS SUCCESSFUL, A BRANCH TO IKJEGASN IS               *
*    ISSUED.  IF UNSUCCESSFUL, A RETURN CODE IS SET AND CONTROL       *
*    IS RETURNED TO IKJEGMNL WITH A BR 14.                            *
*                                                                     *
* ENTRY POINTS--                                                      *
*         IKJEGPCH  MAIN ENTRY POINT, ENTERED FROM IKJEGMNL           *
*         PCHVALTP  PARSE EXIT ROUTINE FOR VALIDITY CHECKING VALUES   *
*         PCHVALAD  PARSE EXIT ROUTINE FOR ADDRESS CONVERSION         *
*                                                                     *
* INPUT--                                                             *
*    THE SUBCOMMAND BUFFER AS ENTERED BY THE USER.                    *
*    REGISTER NINE POINTS TO THE TCOMTAB                              *
*                                                                     *
* OUTPUT--                                                            *
*    AREA 'PCHWORK' INITIALIZED TO PERFORM THE PATCH REQUESTED.       *
*    REGISTER FIFTEEN CONTAINS A RETURN CODE                          *
*                                                                     *
* EXTERNAL REFERENCES--                                               *
*         IKJEGCVT FOR CONVERSION OF ADDRESSES TO BINARY.             *
*         IKJEGI0  FOR OUTPUTTING MESSAGES.                           *
*         IKJPARSE FOR PARSING THE SUBCOMMAND STRING.                 *
*                                                                     *
* EXITS, NORMAL--                                                     *
*         BRANCH TO MODULE 'IKJEGASN'                                 *
*                                                                     *
* EXITS, ERROR--                                                      *
*         BRANCH REGISTER 14 TO CALLER WITH A RETURN CODE OF ZERO     *
*         IF AN ERROR OCCURED DURING PARSE OR CONVERT.                *
*         BRANCH REGISTER 14 TO CALLER WITH RETURN CODE SIXTEEN IF    *
*         AN ATTENTION IS SCHEDULED.                                  *
*         BRANCH REGISTER 14 RETURNING TO CALLER WITH A CONDITION CODE*
*         OF TWENTY (20) FROM THE STAE RETRY ROUTINE AFTER AN ABEND.  *
*         ALSO A 24 INDICATING THE ESTAE COULD NOT BE ISSUED          *
*                                                                     *
* TABLES/WORK AREAS --                                                *
*    1 TCOMTAB, POINTED AT BY REG 9 IS THE TEST COMMUNICATIONS TABLE  *
*    2 PCHWORK, A DESECT WHICH DESCRIBES PART OF THE COMMON WORKING   *
*    CORE MAINTAINED BY TEST AND POINTED AT BY HWORKAREA' IN TCOMTAB. *
*    3 PARAMETER DESCRIPTOR LIST (PDL) PREPARED BY IKJPARSE TO        *
*    DESCRIBE THE VARIOUS FIELDS OF THE PARSED SUBCOMMAND             *
*                                                                     *
* ATTRIBUTES--                                                        *
*    REENTRANT, REFRESHABLE, PROBLEM PROGRAM.                         *
*                                                                     *
* CHARACTER CODE DEPENDENCY--                                         *
*    OPERATION OF THIS MODULE REQUIRES AND DEPENDS ON THE BIT         *
*    PATTERNS AND BINARY VALUES OF THE EBCDIC CHARACTER SET.          *
*    THE DEPENDENCY IS IN TABLE 'PCHTRTBL'. OTHER PORTIONS OF         *
*    THIS MODULE REQUIRES ONLY REASSEMBLY FOR CHANGE OF CODE.         *
*                                                                     *
* NOTES--                                                             *
*    THIS MODULE REQUIRES THE STANDARD INSTRUCTION SET.               *
*                                                                     *
***********************************************************************
IKJEGPCH CSECT
         SPACE
* REGISTER EQUATES.
         SPACE
R0       EQU   0                   GENERAL USE AND PARAMETER REG
R1       EQU   1                   GENERAL USE AND PARAMETER REG
R2       EQU   2                   GENERAL USE REG
R3       EQU   3                   GENERAL USE REG
R4       EQU   4                   GENERAL USE REG
R5       EQU   5                   GENERAL USE REG
R6       EQU   6                   GENERAL USE REG
R7       EQU   7                   GENERAL USE REG
R8       EQU   8                   BASE REG FOR PDE'S
R9       EQU   9                   BASE REG FOR TCOMTAB, COMM. DSECT
R10      EQU   10                  INTERNAL LINK REG FOR THIS MODULE
R11      EQU   11                  BASE REG FOR THIS PROGRAM.
R12      EQU   12                  *
R13      EQU   13                  PTR TO CURRENT SAVE AREA.
R14      EQU   14                  GENERAL USE, AND RETURN ADDR REG
R15      EQU   15                  GENERAL USE, RETURN CODE, CALL REG
         SPACE 2
*  DATA EQUATES FOR OPERANDS OF IMMEDIATE TYPE INSTRUCTIONS.
         SPACE
CHARA    EQU   C'A'
CHARZ    EQU   C'Z'
NULL     EQU   0                   USED FOR BALR R,0 AND BCTR R,0.
ZERO     EQU   0
ONE      EQU   1                   SYMBOLIC FOR THE NUMBER 1
TWO      EQU   2                   SYMBOLIC FOR THE NUMBER '2'
FOUR     EQU   4
EIGHT    EQU   8
TWELVE   EQU   12                  SYMBOLIC FOR 12, USED AS AN RC
SIXTEEN  EQU   16
TWENTY   EQU   20                  VALUE FOR COMPARE
B24      EQU   24                  SHIFT VALUE
R5OFF    EQU   40                  OFFSET INTO SAVE AREA FOR REG 5
R6OFF    EQU   44                  OFFSET INTO SAVE AREA FOR REG 6
R10OFF   EQU   60                  OFFSET INTO SAVE AREA FOR R10
R1OFF    EQU   24                  OFFSET INTO SAVE AREA FOR R1
DEC0     EQU   C'0'
DEC1     EQU   C'1'                EBCDIC ONE FOR IMMEDIATE OPERANDS
DEC9     EQU   C'9'
LCE      EQU   X'85'               EBCDIC CODE FOR A LOWER CASE 'E'
UCE      EQU   C'E'                USED IN IMMEDIATE OPERANDS
PLUS     EQU   C'+'                USED IN IMMEDIATE OPERANDS
MINUS    EQU   C'-'                USED IN IMMEDIATE OPERANDS
QUOTE    EQU   C''''               USED FOR SCANNING CHAR STRINGS.
RPAREND  EQU   C')'                END DELIMITER FOR SCON
LOW      EQU   4                   SYMBOLIC FOR BR ON COND CODE 1
HIGH     EQU   2                   SYMBOLIC FOR BR ON COND CODE 2
HIGHMASK EQU   X'20'               MASK FOR BRANCH HIGH
LOEQMASK EQU   X'D0'               MASK FOR BRANCH LOW OR EQUAL
ODD      EQU   X'01'               FOR TESTING WHETHER AN ADDR IS ODD.
SIDATAPT EQU   0                   OFFSET INTO SYM-INFO BLOCK FOR DATA
M2OFFSET EQU   80                  OFFSET INTO BUFFER FOR 2ND LEVEL MSG
LL00IDL  EQU   14                  LENGTH OF LL00 AND ID FLDS OF MSG
         SPACE
FOREPTR  EQU   8                   OFFSET TO FOREWARD PTR IN SAVE AREA
BACKPTR  EQU   4                   OFFSET TO BACKWARD PTR IN SAVE AREA
         SPACE
HEXFF    EQU   X'FF'
*  SYMBOLIC OFFSETS INTO THE MESSAGE CSECT FOR VARIOUS MESSAGE
         SPACE
MSG101   EQU   101                 INVALID ADDRESS MSG
MSG279   EQU   279                 WRITE PROTECT
MSG212   EQU   212                 DATA FORMAT INCORRECT
MSG010   EQU   10                  VALUE BEGINNING---
MSG209   EQU   209                 DATA STRING CONTAINS
MSG210   EQU   210                 DATA STRING TO LONG
MSG211   EQU   211                 ABSOLUTE VALUE TO GREAT
MSG103   EQU   103                 NO CORE MESSAGE (NO SECOND LEVEL)
MSG104   EQU   104                 ASSIGNMENT FAILED--
MSG277   EQU   277                 PARSE RETURN CODE 12
INST6    EQU   6                   FIXED INSERT NO. 6 (ASSIGNMENT)
         EJECT
         TITLE 'IKJEGPCH, ''SET'' SUBCOMMAND OF TEST, INITIALIZATION'
***********************************************************************
*                                                                     *
*  BEGIN WITH THE STANDARD LINKAGE CONVENTIONS.                       *
*                                                                     *
***********************************************************************
         SAVE  (14,12),,*
         LR    R11,R15             PICK UP ENTRY POINT ADDR FOR BASE
         USING IKJEGPCH,R11
         USING TCOMTAB,R9
         L     R6,REGSAVE2         ADDR OF SAVE AREA
         ST    R6,FOREPTR(R13)     FORWARD AND BACKWARD CHAIN
         ST    R13,BACKPTR(R6)         THE SAVE AREAS.
         LR    R13,R6              SET PTR TO NEW SAVE AREA
         SPACE
         L     R10,WORKAREA        GET PTR TO WORKING CORE
         USING TSTCWORK,R10
         LA    R10,CWORKCMD        SET UP BASE OF SUB-CMD WORK CORE
         USING PCHWORK,R10
         XC    PCHWORK(LPCHWORK),PCHWORK  CLEAR THE CORE
*
*        ISSUE ESTAE MACRO
*
         STM   R10,R12,R10OFF(R13)      SAVE BASE PTR
         L     R2,TSTSTAE          R2= ADDR OF IKJEGSTA
         ESTAE (R2),CT,PARAM=PCHSPL,RECORD=YES,MF=(E,PCHWORK)
         LTR   R15,R15             TEST RETURN CODE
         BZ    STAEOK              CONTINUE IF ZERO
         STC   R15,TSTESTRC        SAVE THE RETURN CODE FOR MNL
         LA    R15,B24             R15= RETURN CODE 24
         B     PCHRET1A            PRINT ERROR MESSAGE IF SO
STAEOK   EQU   *
         SPACE
***********************************************************************
*                                                                     *
*  SET UP PARAMETER LIST FOR CALLING PARSE.                           *
*                                                                     *
***********************************************************************
         SPACE
         LA    R1,PPCL             PTR TO PARSE LIST
         USING PPL,R1              ADDRESSABILITY FOR LIST
         L     R2,TSTUPT           PTR TO UPT
         L     R3,TSTECT           PTR TO ECT
         L     R4,TSTCPECB         PTR TO P/P ECB
         STM   R2,R4,PPLUPT        PUT PTR TO UPT ECT ECB TO PARSE LIST
         L     R2,PARSEPCL         PTR TO PARSE PCL
         LA    R3,TSTANSPL         PTR TO ANSWER PLACE
         L     R4,INBUF            PTR TO INPUT BUFFER
         STM   R2,R4,PPLPCL        PUT PTR TO PARSE PCL INTO PARSE LIST
*                                  PUT PTR TO ANS PLACE INTO PARSE LIST
*                                  PUT PTR TO INPUT BUF INTO PARSE LIST
         SPACE
*  R6 SHOULD STILL CONTAIN THE SAVE AREA ADDRESS AT THIS POINT.
         SPACE
         ST    R6,PPLUWA           PUT INTO PARSE LIST
         DROP  R1
         SPACE
         LINK  EP=IKJPARS,ERRET=LINKFAIL      LINK TO THE PARSE RTN.
PARSEBLO EQU   *
         SPACE
***********************************************************************
*                                                                     *
*  TEST RETURN CODE FROM PARSE.                                       *
*       IF 0 FALL THRU AND SET UP TO GO TO IKJEGCVT TO CONVERT VALUE. *
*       IF NON-ZERO, GO ANALYZE FURTHER.                              *
*                                                                     *
***********************************************************************
         SPACE
         LTR   R15,R15             TEST RETURN CODE FROM PARSE.
* PLEASE NOTE THAT A BRANCH TABLE HAS BEEN USED IN LIEU OF NUMEROUS   *
* TESTS FOR RETURN CODE.                                              *
         BNZ   PARSRC(R15)         IF NON-ZERO, GO ANALYZE FURTHER.
         L     R8,TSTANSPL         GET PTR TO THE PDL
         USING IKJPARMD,R8
         MVC   VPDE(VALUPDL),VAL   COPY THE CURRENT VALUE PDE
         LA    R8,ADDR             SET UP A BASE REG FOR ADDR PDE
         USING IKJPARMA,R8
         TM    PDEFLG4,GENR+SFPR+LFPR  IS ADDRESS TYPE REGISTER
         BZ    PCH010              IF NOT REG, BRANCH
         NC    PDEINDCT,PDEINDCT   IF REG, IS IT INDIRECTED
         BNZ   PCH012              IF INDIRECTED, BRANCH
PCH010   EQU   *
         MVC   A1TYPE,PDEFLG4      MOVE ADDR TYPE TO WORKING CORE
PCH012   EQU   *
         L     R2,PDEUSER          GET RESOLVED ADDRESS OR SI PTR
         LTR   R2,R2               IS ADDR SYMBOLIC
         BNM   PCH018              IF NOT SYMBOLIC, BRANCH
         L     R2,SIDATAPT(R2)     GET ACTUAL ADDR FROM SI BLOCK
PCH018   EQU   *
         ST    R2,A1               SAVE RESOLVED ADDR IN WORKING CORE
         DROP  R8
         SPACE
*        AT THIS POINT CONTROL IS PASSED TO 'IKJEGASN', THE MAIN
*        PROCESSING MODULE FOR THE 'SET' SUBCOMMAND.
         L     R15,ASNVCON         R15= ADDR OF IKJEGASN ENTRY
         BR    R15                 PASS CONTROL TO IKJEGASN
         SPACE 2
*     RETURN TO MAINLINE IN AN ERROR CASE.
PCHRET1  EQU   *
         SPACE
*  TURN OFF SWITCHES USED BY PATCH, AND ISSUE ESTAE 0
         SPACE
         L     R15,PCHRETCD        PICK UP PRESET RETURN CODE.
PCHRET1A DS    0H                  RETURN TO MNL
         NI    TSTFLGS1,HEXFF-PCHLSTVL
         LR    R2,R15              SAVE THE RETURN CODE
         ESTAE 0                   REMOVE THE ESTAE
         NI    TSTFLGS4,HEXFF-TSTRERTN  TURN OFF ABEND SWITCH
         LR    R15,R2              RESTORE THE RETURN CODE
         L     R13,BACKPTR(R13)    GET ADDR OF PREVIOUS SAVE AREA.
         RETURN  (14,12),T,RC=(15) RETURN TO THE CALLER
         EJECT
PCHVALTP EQU   *
         SAVE  (14,12)
         LA    R14,OFFSETTP(R15)   SET UP CORRECT VALIDITY RTN ADDR.
* PLEASE NOTE THAT A BRANCH TABLE HAS BEEN USED IN LIEU OF NUMEROUS   *
* TESTS FOR CORRECT COMMON LINK ROUTINE.                              *
         B     OFFSET1(R15)        GO TO COMMON LINK CONVENTION RTN.
         SPACE
PCHVALAD EQU   *
         SAVE  (14,12)
         LA    R14,OFFSETAD(R15)   SET UP CORRECT VALIDITY RTN ADDR.
OFFSET1  EQU   *-PCHVALTP          OFFSET TO GET TO COMMON LINK RTN.
         L     R12,FOUR(R1)        R12=PTR TO LIST'S SAVE AREA
         LR    R3,R1               SAVE REG1
         LM    R6,R12,R6OFF(R12)   RESTORE REQUIRED REGS OF LIST
         L     R2,REGSAVE3         PTR TO NEW SAVE AREA
         ST    R2,FOREPTR(R13)     FOREWARD CHAIN SAVE AREAS.
         ST    R13,BACKPTR(R2)     BACKWARD CHAIN SAVE AREAS.
         LR    R13,R2              SET NEW SAVE AREA
         L     R1,ZERO(R3)         GET ADDR OF PDE TO VALIDITY CHECK.
         L     R2,OUTBUF           R2= ADDR OF OUTBUF
         XC    ZERO(FOUR,R2),ZERO(R2)    CLEAR FIRST WORD OF OUTBUF
         OI    TSTFLGS4,TSTVALCK   INDICATE WE ARE IN A VALIDITY CK
         BR    R14                 GO TO REQUESTED ROUTINE.
         SPACE 2
*  MAIN PORTION OF THE ADDRESS VALIDITY CHECKING ROUTINE.
         SPACE
OFFSETAD EQU   *-PCHVALAD          OFFSET FOR ADDR VALIDITY CHECK RTN.
         LCR   R1,R1               INDICATE REGISTER CONVERSION.
         L     R15,TSTCONVT        ADDR OF CONVERT ROUTINE FOR CALL.
         BALR  R14,R15             GO TO CONVERT ROUTINE.
         LTR   R15,R15             TEST THE RETURN CODE FROM CVT.
         BNZ   PRCNOTZ             IF RC FROM IKJEGCVT NON-ZERO, BRANCH
         SPACE
         L     R4,ZERO(ZERO,R3)    PICK UP PTR TO ADDRESS PDE
         ST    R4,APDEADDR         SAVE THE ADDR OFPDE FOR USE BY ASN
         USING IKJPARMA,R4         ESTABLISH ADDRESSABILITY
         TM    PDEFLG4,GENR+SFPR+LFPR  IS THIS ADDRESS A REGISTER
         BZ    TSTWRT              BRANCH IF IT IS NOT
         NC    PDEINDCT,PDEINDCT   IS REGISTER USED WITH INDIRECT
         BZ    RETTOPAR            BRANCH IF NOT
TSTWRT   TM    PDEFLG5,PDEWRITE    IS ADDRESS IN WRITE PROTECT STORAGE
         BZ    WRTMSG              INFORM THE USER IF SO
         DROP  R4                  FREE BASE REGISTER
RETTOPAR EQU    *
         NI    TSTFLGS4,HEXFF-TSTVALCK  TURN OFF VALIDITY CK SW
         L     R1,OUTBUF           R1= ADDR OF OUTBUF
         L     R13,BACKPTR(R13)    GET ADDR OF PREVIOUS SAVE AREA.
         L     R2,R1OFF(ZERO,R13)  GET THE ADDR OF PARSE PARM LIST
         OC    ZERO(FOUR,R1),ZERO(R1)  IS THE OUTBUF = ZERO
         BZ    RETCONT             CONTINUE THE EXIT
         ST    R1,EIGHT(R2)        PLACE ADDR IN PARSE PARM LIST
RETCONT  EQU   *                   EXIT TO PARSE
         RETURN (14,12),,RC=(15)   RETURN TO THE PARSE ROUTINE.
WRTMSG   EQU    *
         LA    R2,MSG101           R2= MSGNO 101
         LA    R3,MSG279           R3= SECOND LEVEL 279
         B     MSGOUTA             OUTPUT AN ADDRESS PDE
         SPACE
PRCNOTZ  EQU   *
         CH    R15,HSIXTEEN        IS RC 16 OR 20
         BNL   RET12               IF 16 OR 20, BRANCH
PRC8     EQU   *
         LA    R15,EIGHT           SET RC TO PARSE TO 8
         B     RETTOPAR            GO RETURN TO PARSE
RET12    EQU   *
         ST    R15,PCHRETCD        SAVE RETURN CODE FROM CVT
         LA    R15,TWELVE          SET RC TO 12 FOR PARSE
         B     RETTOPAR            GO RETURN TO PARSE
         EJECT
*  MAIN PORTION OF THE VALUE VALIDITY CHECKING ROUTINE.
         SPACE
OFFSETTP EQU   *-PCHVALTP          OFFSET FOR VALUE VALIDITY CHECK RTN.
         USING VALUPDE,R1
         TR    VALUTYPE(ONE),PCHTRTBL TRANSLATE TYPE TO UPPER CASE
         SR    R5,R5               INITIALIZE FOR LATER INSERT CHAR.
         CLI   VALUTYPE,CHARA      IS TYPE BELOW 'A' IN COLLATING SEQ
         BL    INVTYPE             IF YES, GO TO ERROR ROUTINE.
         CLI   VALUTYPE,CHARZ      IS TYPE ABOVE 'Z' IN COLLATING SEQ.
         BH    INVTYPE             IF YES, TO TO ERROR ROUTINE.
         IC    R5,VALUTYPE         PICK UP TYPE CHAR FROM PDE.
         STC   R5,TYPESAVE         SAVE CHARACTER USED FOR TYPE.
         LA    R14,TYPETBL(R5)     SET UP ADDR OF CORRESPONDING CODE.
         CLI   ZERO(R14),HEXFF     IS THE TYPE CODE X'FF'
         BE    INVTYPE             IF EQUAL, TYPE IS INVALID, BRANCH.
         IC    R5,ZERO(R14)        PICK UP HEX CODE FOR TYPE.
         STC   R5,VALUTYPE         STORE TYPE CODE IN VALUE PDE.
         LH    R2,VALULNH          R2=LENGTH OF DATA STRING.
         L     R6,VALUPTR          R6=ADDR OF DATA STRING
         LTR   R2,R2               IS THE STRING LNTH ZERO
         LR    R7,R1               SAVE PTR TO VALUE PDE IN R7.
         USING VALUPDE,R7
         BZ    INVTYPE             IF STRING LNTH 0,BRANCH
* PLEASE NOTE THAT A BRANCH TABLE HAS BEEN USED IN LIEU OF NUMEROUS   *
* TESTS FOR TYPE.                                                     *
         B     VBTABLE(R5)         BRANCH TO BRANCH TABLE OFFSET BY TYP
VBTABLE  EQU   *
         B     CVAL                CODE X'00' FOR CHAR
         B     XVAL                CODE X'04' FOR HEXADECIMAL
         B     BVAL                CODE X'08' FOR BINARY
         B     XVAL                CODE X'0C' THIS CODE NOT USED.
         B     FVAL                CODE X'10' FOR FULLWORD FIXED PT
         B     HVAL                CODE X'14' FOR HALFWORD FIXED PT
         B     EVAL                CODE X'18' FOR SHORT FLT PT
         B     DVAL                CODE X'1C' FOR LONG FLT PT
         B     AQVAL               CODE X'20' FOR A AND Q ADDR CNSTNTS
         B     YVAL                CODE X'24' FOR Y ADDR CONSTANTS
         B     SVAL                CODE X'28' FOR S ADDR CONSTANTS
         B     AQVAL               CODE X'2C' FOR V ADDR CONSTANTS
         B     PVAL                CODE X'30' FOR PACKED DECIMAL
         B     ZVAL                CODE X'34' FOR ZONED DECIMAL
         SPACE
VALOK    EQU   *
CVAL     EQU   *
         SR    R15,R15             SET THE RETURN CODE TO ZERO.
         B     RETTOPAR            GO RETURN TO PARSE.
         EJECT
***********************************************************************
*                                                                     *
*  THE FOLLOWING ROUTINES CHECK THE VALIDITY OF THE INPUT STRING      *
*  AGAINST THE REQUIREMENTS FOR THE PARTICULAR TYPE SPECIFIED.        *
*  AT ENTRY, THE REGISTERS ARE SET AS FOLLOWS.                        *
*        R1    PTR TO VALUE PDE                                       *
*        R2    LENGTH OF STRING                                       *
*        R5    TYPE CODE (IN HEX)                                     *
*        R6    PTR TO START OF STRING                                 *
*        R7    PTR TO VALUE PDE                                       *
*                                                                     *
***********************************************************************
         SPACE
FVAL     EQU   *
         LA    R5,FMAX             SET UP TPR TO MAX VALUE FOR F TYPE
         B     VALNUM              GO TO NUMERIC CHECK ROUTINE
HVAL     EQU   *
         LA    R5,HMAX             SET UP TPR TO MAX VALUE FOR H TYPE
         B     VALNUM              GO TO NUMERIC CHECK ROUTINE
AQVAL    EQU   *
         CLI   ZERO(R6),MINUS      A - SIGN  IS INVAL, CHECK FOR IT
         BE    INVCHAR             IF - SIGN, BRANCH TO ERROR ROUTINE
         B     FVAL                GO TO NUMERIC CHECK ROUTINE
YVAL     EQU   *
         CLI   ZERO(R6),MINUS      A - SIGN IS INVAL, CHECK FOR IT
         BE    INVCHAR             IF - SIGN, BRANCH TO ERROR ROUTINE
         B     HVAL                GO TO NUMERIC CHECK ROUTINE
         SPACE
*  THE FOLLOWING ROUTINE SETS UP FOR AND CALLS THE NUMERIC SCAN RTN.
*  IT THE CHECKS THAT THE VALUE DOESN'T EXCEED THE MAXIMUM.
         SPACE
VALNUM   EQU   *
         CLI   ZERO(R6),MINUS      IS CONSTANT PRECEDED BY A - SIGN
         BE    SIGNIST             IF YES, BRANCH
         CLI   ZERO(R6),PLUS       IF NOT A - SIGN, IS IT A + SIGN
         BNE   DIGITIST            IF NOT A SIGN, GO CHECK DIGITS
SIGNIST  EQU   *
         BCTR  R2,NULL             DECREMENT LENGTH 1 FOR SIGN
         LA    R6,ONE(R6)          INCREMENT STRING PTR PAST SIGN
DIGITIST EQU   *
         LR    R3,R2               SAVE LENGTH
         LR    R4,R6                   AND PTR TO START OF DATA
         BAL   R14,NUMSCAN         GO CERTIFY FIELD AS NUMERIC
         LTR   R15,R15             TEST RETURN CODE
         BNZ   INVCHAR             IF RC NON-ZERO, BRANCH TO ERROR RTN
         CH    R3,ZERO(R5)         CHECK LENGTH OF INPUT STRING
         BL    VALOK               LENGTH LESS THAN MAX, BRANCH
         BH    TOOBIG1             LENGTH GREATER THAN MAX, BRANCH
         SPACE
*  IF LENGTH EQUALS MAX, COMPARE TO MAX NUMBER FOR THIS CONSTANT TYPE
         SPACE
         BCTR  R3,NULL             DECREMENT LENGTH FOR CLC INSTR
         EX    R3,DATACLC1         COMPARE STRING TO MAX
         BL    VALOK               IF LOW, BRANCH, CONSTANT OK
         BH    TOOBIG2             IF HIGH, BRANCH, CONSTANT IN ERROR
         L     R6,VALUPTR          RESET PTR TO START OF VALUE STRING
         CLI   ZERO(R6),MINUS      IS THE FIRST CHAR A MINUS SIGN
         BE    VALOK               IF YES, VALUE IS OK
         B     TOOBIG2             IF NOT, BRANCH, CONSTANT IN ERROR
         SPACE 2
*  THE FOLLOWING ROUTINE CHECKS THE VALIDITY OF PACKED AND ZONED CONS
         SPACE
ZVAL     EQU   *
         LA    R5,ZMAX             SET UP PTR TO MAX LEN
         B     ZPVAL02             GO TO COMMON RTN
PVAL     EQU   *
         LA    R5,PMAX             SET UP PTR TO MAX LEN
ZPVAL02  EQU   *
         CLI   ZERO(R6),MINUS      IS THE FIRST CHAR A MINUS SIGN
         BE    ZPVAL04             IF - SIGN, BRANCH
         CLI   ZERO(R6),PLUS       IS THE FIRST CHAR A PLUS SIGN
         BNE   ZPVAL06             IF NOT SIGN, GO TEST FOR NUMBERS
ZPVAL04  EQU   *
         BCTR  R2,NULL             DECREMENT LENGTH FOR SIGN
         LA    R6,ONE(R6)          INCRE THE PTR PAST SIGN
ZPVAL06  EQU   *
         CH    R2,ZERO(R5)         IS LENGTH OK
         BH    TOOBIG1             IF TOO LONG, BRANCH TO ERROR
         BAL   R14,NUMSCAN         GO CHECK THAT STRING IS NUMERIC
         LTR   R15,R15             TEST RETURN CODE
         BZ    VALOK               IF RC=0, VALUE IS VALID
         B     INVCHAR             IF RC NON-ZERO, CONSTANT IN ERROR
         SPACE
XVAL     EQU   *
         LR    R4,R2               R4=INPUT STRING LENGTH
         CH    R4,XMAX             TEST LENGTH FOR MAX
         BH    TOOBIG1             IF GREATER THAN MAX, BRANCH TO ERR
         BCTR  R4,NULL             DECRE LNTH FOR TRT INSTR
         EX    R4,VTRT1            TRANSLATE AND TEST FOR VALID CHARS
         BZ    VALOK               IF CC=0, STRING IS VALID HEX
         B     INVCHAR             OTHERWISE, BRANCH TO ERROR
VTRT1    TRT   ZERO(NULL,R6),XTRTT  FOR TESTING FOR VALID HEX DIGITS
         SPACE
         SPACE
DVAL     EQU   *
         LA    R5,DMAX             SET UP PTRS TO MAX VALUES FOR D TYPE
         LA    R8,DMAXNEG          POINT TO CONSTANTS FOR NEG EXPONENT
         B     VALFPNUM            GO TO COMMON FLOATING PT NUM RTN.
         SPACE
EVAL     EQU   *
         LA    R5,EMAX             MAXIMUM VALUES FOR E TYPE
         LA    R8,DMAXNEG          POINT TO CONSTANTS FOR NEG EXPONENT
VALFPNUM EQU   *
         CLI   ZERO(R6),MINUS      DOES STRING BEGIN WITH A - SIGN
         BE    FPSIGN1             IF YES, BRANCH
         CLI   ZERO(R6),PLUS       DOES IT BEGIN WITH A + SIGN
         BNE   NOFPS1              IF NO SIGN, SKIP PTR ADJUSTMENT
FPSIGN1  EQU   *
         LA    R6,ONE(R6)          INCRE PTR PAST SIGN
         BCTR  R2,NULL             REDUCE LENGTH 1 FOR SIGN
NOFPS1   EQU   *
         LR    R4,R6               SAVE START OF NUMERIC FIELD IN R4
         LR    R3,R2               SAVE ADJUSTED LENGTH IN R3
         BAL   R14,NUMSCAN         GO SCAN FOR DECIMAL DIGITS
         LTR   R15,R15             TEST RETURN CODE
         BZ    FPEXP               IF ZERO, FIELD HAS NO EXPONENT
         CLI   ZERO(R6),LCE        WAS NON-NUMERIC CHAR A LOWER CASE E
         BE    FPEXP               IF YES, BRANCH
         CLI   ZERO(R6),UCE        WAS IT AN UPPER CASE E
         BNE   INVCHAR             IF NEITHER, BRANCH TO ERROR
         SPACE 2
***********************************************************************
* THE FOLLOWING CODE CHECKS THAT THE USER ENTERED VALUE IS NOT TOO    *
* LARGE OR TOO SMALL. THE PROBLEM THIS POSES IS CLEAR IF WE NOTE THAT,*
* FOR EXAMPLE, 1E+60,10E+59,100E+58 AND 1000E+57 ARE IDENTICAL VALUES.*
* FOR INTEGRAL VALUES THE EXPONENT PLUS THE LENGTH OF THE COEFFICIENT *
* MUST NOT EXCEED 76. IF THE SUM IS LESS THAN 76 THE VALUE IS VALID.  *
* IF THE SUM IS EXACTLY 76 THEN THE COEFFICIENT MUST BE CHECKED TO SEE*
* THAT THE VALUE ENTERED DOES NOT EXCEED 7.237005...E+75. FOR         *
* FRACTION VALUES IE VALUES WITH A NEGATIVE EXPONENT THE UNSIGNED     *
* EXPONENT MINUS THE COEFFICIENT LENGTH MUST NOT EXCEED 78. IF THE SUM*
* IS LESS THAN 78 THE VALUE IS VALID. IF THE SUM IS EXACTLY 78 THEN   *
* THE COEFFICIENT MUST BE CHECKED TO SEE THAT THE VALUE ENTERED IS    *
* GREATER THAN 5.397605...E-79. ONE ALSO MIGHT EXPECT THE SINGLE      *
* PRECISION POSITIVE LIMIT TO BE 7.2370055E+75. THE LIMIT IS LOWER    *
* BECAUSE THE FLOATING POINT CONVERSION ROUTINE IN IKJEGCVT ROUNDS    *
* THE RESULT.                                                         *
***********************************************************************
         SPACE 2
FPEXP    EQU   *
         SR    R3,R2               R3 IS NOW COEFFICIENT LENGTH
         BZ    INVFORMT            IF ZERO LENGTH PUT OUT MESSAGE
         LR    R15,R3              SAVE A COPY OF COEFFICIENT LENTH
         LR    R14,R4              SAVE START ADDR OF COEFFICIENT
VALCHK1  EQU   *
         CLI   ZERO(R4),DEC0       IS LEADING DIGIT A ZERO
         BNE   VALCHK3             IF NO BRANCH
         LA    R4,ONE(R4)          OTHERWISE POINT TO NEXT DIGIT
         BCT   R3,VALCHK1          IF MORE DIGITS CHECK NEXT DIGIT
         LR    R3,R15              RESTORE COEFFICIENT LENGTH
         LR    R4,R14              RESTORE COEFFICIENT START ADDR
VALCHK3  EQU   *
         CH    R3,ZERO(R5)         HOW LONG IS COEFFICIENT
         BH    TOOBIG1             IF TOO LONG PUT OUT MESSAGE
         LR    R0,R3               SAVE COEFFICIENT LENGTH
         LTR   R2,R2               WAS AN EXPONENT ENTERED
         BZ    VALOK               IF NO VALUE IS OKAY, BRANCH
         CLI   ONE(R6),MINUS       IS EXPONENT NEGATIVE
         BNE   PLUSEXP             IF NO SKIP CODE FOR FRACTION VALUE
         LCR   R3,R3               MAKE NEGATIVE
         B     VALCHK2             SKIP CODE FOR POSITIVE EXPONENT
PLUSEXP  EQU   *
         CLI   ONE(R6),PLUS        IS EXPONENT EXPLICITLY POSITIVE
         BNE   NOEXPSGN            IF NO SKIP CODE FOR AN EXPLICIT SIGN
VALCHK2  EQU   *
         LA    R6,ONE(R6)          INCREMENT FOR SIGN
         BCTR  R2,NULL             DECREMENT FOR SIGN
NOEXPSGN EQU   *
         LA    R6,ONE(R6)          INCREMENT FOR E
         BCTR  R2,NULL             DECREMENT FOR E
         CH    R2,TWO(R5)          HOW LONG IS EXPONENT
         BH    TOOBIG2             IF TOO LONG PUT OUT MESSAGE
         LR    R15,R2              SAVE EXPONENT LENGTH
         BCTR  R15,NULL            DECREMENT FOR EXECUTE
         EX    R15,DATAPACK        PACK THE EXPONENT
         BAL   R14,NUMSCAN         GO CHECK FOR NUMERIC DIGITS ONLY
         LTR   R15,R15             WERE THEY ALL NUMERIC
         BNZ   INVCHAR             IF NO PUT OUT MESSAGE
         CVB   R0,HOLDAREA+ONE     CONVERT EXPONENT TO BINARY
         AR    R0,R3               ADD (OR SUBTRACT) COEFFICIENT LENGTH
         LA    R5,FOUR(R5)         POINT TO POSITIVE CONSTANTS
         LA    R15,HIGHMASK        LOAD MASK FOR EXECUTION OF BRANCH
         LTR   R3,R3               IS EXPONENT NEGATIVE
         BNM   VALCHK4             IF NOT BRANCH
         LR    R5,R8               POINT TO NEGATIVE CONSTANTS
         LA    R15,LOEQMASK        LOAD MASK FOR BRANCH LOW OR EQUAL
VALCHK4  EQU   *
         CH    R0,ZERO(R5)         HOW LARGE IS EXPONENT
         BH    TOOBIG2             IF TOO LARGE PUT OUT MESSAGE
         BL    VALOK               IF LOWER THAN LIMIT VALUE IS OKAY
         LPR   R3,R3               MAKE COEFFICIENT LENGTH POSITIVE
         BCTR  R3,NULL             DECREMENT FOR COMPARISON TO LIMIT
         EX    R3,DATACLC1         COMPARE TO LIMITING COEFFICIENT
         EX    R15,BRANCH          BRANCH IF COEFFICIENT IS NOT VALID
         B     VALOK               OTHERWISE VALUE IS VALID
DATAPACK PACK  HOLDAREA+ONE(EIGHT),ZERO(ZERO,R6)
BRANCH   NOP   TOOBIG2
         SPACE
BVAL     EQU   *
         CH    R2,XMAX             TEST LENGTH, DOES IT EXCEED MAX
         BH    TOOBIG1             IF YES, BRANCH TO ERROR
BINVLOOP EQU   *
         CLI   ZERO(R6),DEC0       IS CURRENT CHAR A ZERO
         BE    BIN0                IF YES, BRANCH, CHAR IS VALID
         CLI   ZERO(R6),DEC1       IS CURRENT CHAR A ONE
         BNE   INVCHAR             IF NEITHER 0, NOR 1, CHAR INVALID
BIN0     EQU   *
         LA    R6,ONE(R6)          INCREMENT PTR TO NEXT CHAR
         BCT   R2,BINVLOOP         DECRE LNTH AND TEST FOR DONE
         B     VALOK               RETURN, ALL CHARS VALID
DATACLC1 CLC   ZERO(NULL,R4),TWO(R5)  COMPARES DIGIT STRINGS TO MAX
         SPACE 2
*  ROUTINE TO TEST VALIDITY OF S TYPE VALUES.
         SPACE
SVAL     EQU   *
         LA    R5,SMAX1            SET PTR TO SCON LIMITS
SCON04   EQU   *
         LR    R3,R2               SAVE A COPY OF ORIGINAL LNTH
         LR    R4,R6               SAVE A COPY OF DATA START ADDR
         BAL   R14,NUMSCAN         GO SCAN FOR VALID DIGITS
* PLEASE NOTE THAT A BRANCH TABLE HAS BEEN USED IN LIEU OF NUMEROUS   *
* TESTS FOR RETURN CODE.                                              *
         B     SCON06(R15)         USE RETURN CODE AS BRANCH INDEX
         SPACE
*  IF RETURN CODE IS ZERO, DATA DOES NOT CONTAIN PARENDS, AN ERROR.
         SPACE
SCON06   B     INVFORMT            IF RC=0, BRANCH
         SPACE
*  IF RETURN CODE IS 4, CHECK NON-NUMERIC FOR LEFT OR RIGHT PAREND
         SPACE
         SR    R3,R2               CALCULATE LNTH OF NUMERIC PORTION
         BZ    INVCHAR             IF NO NUMERICS, BRANCH
         CH    R3,ZERO(R5)         DOES LNTH EXCEED MAX
         BH    TOOBIG1             IF LNTH EXCEEDS MAX, BRANCH
         BL    SCON12              IF LNTH IS LESS THAN MAX, BRANCH
         SPACE
*  IF LENGTH EQUALS MAXIMUM, COMPARE VALUE TO MAX VALUE.
         SPACE
         BCTR  R3,NULL             DECREMENT LNTH FOR CLC INSTR
         EX    R3,DATACLC1         COMPARE DATA TO MAX VALUE
         BH    TOOBIG2             IF VALUE EXCEEDS MAX, BRANCH
SCON12   EQU   *
         CLC   ZERO(ONE,R6),SMAXL(R5) COMPARE NON-NUMERIC TO EXPECTED
         BNE   INVCHAR             IF NOT EXPECTED DELIMITER, BRANCH
         CLI   ZERO(R6),RPAREND    IS THIS THE FINAL DELIMITER
         LA    R5,SMAX2            INCRE LIMIT PTR TO REG LIMITS
         LA    R6,ONE(R6)          INCRE DATA PTR TO NEXT DATA BYTE
         BE    SCON20              IF FINAL DELIMITER, BRANCH OUT
         BCT   R2,SCON04           IF MORE CHARACTERS, BRANCH BACK
         B     INVCHAR             GO TO ERROR ROUTINE
         SPACE
SCON20   EQU   *
         BCT   R2,INVCHAR          IF MORE CHARACTERS, ERROR, BRANCH
         B     VALOK               OTHERWISE, VALUE IS OK, RETURN
         SPACE 2
INVFORMT EQU   *
         LA    R2,MSG010           R2= MSG NO 70 FIRST LEVEL
         LA    R3,MSG212           R3= MSG NO 212 SECOND LEVEL
         B     MSGOUTV             OUTPUT THE MESSAGE WITH VALUE PDE
         SPACE
INVCHAR  EQU   *
         LA    R2,MSG010           R2= MSG NUMBER 10 FIRST LEVEL
         LA    R3,MSG209           R3= MSG NUMBER 209 SECOND LEVEL
         B     MSGOUTV             OUTPUT THE MESSAGE WITH VALUE PDE
         SPACE
TOOBIG1  EQU   *
         LA    R2,MSG010           R2= MSG NUMBER 10 FIRST LEVEL
         LA    R3,MSG210           R3= MSG NUMBER 210 SECOND LEVEL
         B     MSGOUTV             OUTPUT THE MESSAGE WITH VALUE PDE
         SPACE
TOOBIG2  EQU   *
         LA    R2,MSG010           R2= MSG NUMBER 10 FIRST LEVEL
         LA    R3,MSG211           R3= MSG NUMBER 211 SECOND LEVEL
         B     MSGOUTV             OUTPUT THE MESSAGE WITH VALUE PDE
         EJECT
**********************************************************************
*        MESSAGE PORTION OF THE MODULE
**********************************************************************
         SPACE
MSGOUTA  DS    0H                  CALL IO TO OUTPUT MESSAGE
         XC    TSTIOPRM(L'TSTIOPRM),TSTIOPRM  CLEAR IO PARMETER AREA
         IKJEGSIO MSG,FIRST=(R2),SECOND=(R3),INST11=(APDE,APDEADDR),   *
               ID=PCH24,MF=(E,TSTIOPRM)     INVOKE IO...
         B     RETCKTAB(R15)       BRANCH ON THE RETUNR CODE
         SPACE
MSGOUTV  DS    0H                  CALL IO TO OUTPUT MESSAGE
         XC    TSTIOPRM(L'TSTIOPRM),TSTIOPRM  CLEAR IO PARMETER AREA
         IKJEGSIO MSG,FIRST=(R2),SECOND=(R3),INST11=(VPDE,(R7)),       *
               ID=PCH24,MF=(E,TSTIOPRM)     INVOKE IO...
         B     RETCKTAB(R15)       BRANCH ON THE RETUNR CODE
         SPACE
MSGOUTN  DS    0H                  FIXED INSERT IN THE FIRST MSG
         XC    TSTIOPRM(L'TSTIOPRM),TSTIOPRM CLEAR IO PARM AREA
         IKJEGSIO MSG,FIRST=(R2),SECOND=(R3),INST11=(NUM,(R4)),        *
               ID=PCH24,MF=(E,TSTIOPRM)  CALL IO
IOCHECK  DS    0H                  CHECK OUT RETURN CODES FROM IO
         CH    R15,HSIXTEEN        IS THE RETURN CODE 16, 20, 24
         BNL   PCHRET1A            RETURN TO MNL
         SR    R15,R15             ZERO R15
         B     PCHRET1A            RETURN TO MNL
         SPACE
LINKFAIL DS    0H                  LINK FAIL IO MESSAGE ROUTINE
         XC    TSTIOPRM(L'TSTIOPRM),TSTIOPRM  CLEAR IO PARM AREA
         LR    R3,R15              R3= RETURN CODE
         LR    R4,R1               R4= ABEND CODE
         IKJEGSIO SVCERR,SVC=6,ABENDRG=(R4),RC=(R3),                   *
               ID=PCH24,MF=(E,TSTIOPRM)   INVOKE IO
         B     IOCHECK             CHECK THE RETURN CODES
         SPACE
RETCKTAB DS    0H                  RETURN CODE FROM IO TABLE
         B     PRC8                ASK FOR A REENTER
         B     PRC8                ASK FOR A REENTER
         B     PRC8                ASK FOR A REENTER
         B     PRC8                ASK FOR A REENTER
         B     RET12               RETURN TO PARSE AND CLEAN UP
         B     RET12               RETURN TO PARSE AND CLEAN UP
         B     RET12               RETURN TO PARSE AND CLEAN UP
         EJECT
INVTYPE  EQU   *
         LA    R15,FOUR            SET RC=J SO PARSE WILL PROMPT
         B     RETTOPAR            GO RETURN TO PARSE.
CVTRC    EQU   *
         CH    R15,HSIXTEEN        IS THE RETURN CODE 16
         BE    PCHCC16             IF RC=16, BRANCH TO RC=16 RTN.
         B     PCHRET1             OTHERWISE, BRANCH TO WRAPUP RTN.
         SPACE 2
***********************************************************************
*                                                                     *
*  THE FOLLOWING ROUTINE CHECKS THAT EACH CHAR IN A STRING IS NUMERIC *
*        INPUT IS   R2 CONTAINS LENGTH OF STRING                      *
*                   R6 CONTAINS PTR TO START OF STRING                *
*                   R14 CONTAINS RETURN ADDRESS                       *
*                                                                     *
***********************************************************************
         SPACE
NUMSCAN  EQU   *
         LA    R15,FOUR            SET ERROR RETURN CODE
NUMSCAN2 EQU   *
         CLI   ZERO(R6),DEC0       IS CHAR EQ OR GT AN EBCDIC '0'
         BCR   LOW,R14             IF NOT, RETURN WITH RC=4
         CLI   ZERO(R6),DEC9       IS CHAR EQ OR LT AN EBCDIC '9'
         BCR   HIGH,R14            IF NOT, RETURN WITH RC=4
         LA    R6,ONE(R6)          INCREMENT PTR TO STRING
         BCT   R2,NUMSCAN2         DECREMENT LENGTH AND LOOP IF MORE
         SR    R15,R15             SET RETURN CODE TO 0
         BR    R14                 RETURN TO CALLER
         TITLE 'IKJEGPCH, ASSIGN SUBCOMMAND OF TEST, ERROR ROUTINES'
PCHCC16  EQU   *
         LA    R15,SIXTEEN         SETUP A RETURN CODE OF 16.
         ST    R15,PCHRETCD        STORE RETURN CODE IN RC FIELD.
         B     PCHRET1             GO RETURN TO CALLER
         ORG   *-4                 REUSE SPACE NOT NEEDED FOR RC=0
PARSRC   EQU   *
         ORG
         B     PARSRC04            RETURN CODE OF 4 ROUTINE.
         B     PCHCC16             GO SET RETURN CODE FOR ATTN DETECTED
         B     PARSRC12            GO TO ROUTINE FOR RC 12.
         B     PARSRC16            RETURN CODE IS 16
         B     PCHRET1             RETURN TO MAINLINE IMMEDIATELY
         SPACE
*  IF PARSE RETURN CODE WAS 4, ENTER HERE AFTER PARSE
         SPACE
PARSRC04 EQU   *
         OI    TSTFLGS4,TSTFLUSH   TELL MNLINE TO FLUSH STACK
         XR    R15,R15             ZERO RETURN CODE TO MNLINE
         ST    R15,PCHRETCD        STORE RETURN CODE IN RC FIELD
         B     PCHRET1             RETURN TO MNLINE
         SPACE
*  IF PARSE RETURN CODE WAS 12, ENTER HERE AFTER PARSE
         SPACE
PARSRC12 EQU   *
         LA    R4,INST6            R4= INSERT NO 6 (ASSIGNMENT)
         LA    R2,MSG104           R2= FIRST LEVEL MSG NO
         LA    R3,MSG277           R3= SECOND LEVEL MSG NO
         B     MSGOUTN             FIXED INSET IN FIRST LEVEL
         SPACE
*  IF THE RETURN CODE WAS 16, THIS ROUTINE IS BRANCHED TO AFTER PARSE.*
         SPACE
PARSRC16 EQU   *
*        ISSUE THE OUT OF CORE MESSAGE
         XC    TSTIOPRM(L'TSTIOPRM),TSTIOPRM  CLEAR IO WORK AREA
         LA    R2,MSG103           R2= 103 FIRST LEVEL MSG INDICATOR
         IKJEGSIO MSG,FIRST=(R2),ID=PCH24,MF=(E,TSTIOPRM)
         B     IOCHECK             RETURN TO MNL
         EJECT
***********************************************************************
*
*        STAE RETRY ROUTINE
*
***********************************************************************
         SPACE 3
RETRY    EQU   *
         L     R4,CVTPTR           PTR TO CVT
         USING CVT,R4              ADDRESSABILITY FOR CVT
         L     R4,CVTTCBP          TCB PTR
         L     R4,FOUR(R4)         CURRENT TCB PTR
         DROP  R4
         USING TCB,R4              TCB ADDRESSABILITY
         L     R9,TCBTRN           TCOMTAB PTR
         L     R13,REGSAVE2        PTR TO SAVE AREA
         LM    R10,R12,R10OFF(R13)     RESTORE MODULE ADDRESSABILITY
         LA    R15,TWENTY          INDICATE ERROR RETURN
*-*-*    NOTE IN BOTH CSECT'S (IKJEGPCH AND IKJEGASN) PCHRET1A WILL
*-*-*    EXIT TO IKJEGMNL WITH R15 AS THE RETURN CODE.
         B     PCHRET1A            RETURN
         TITLE 'IKJEGPCH, ASSIGN, CONSTANTS, DSECTS, AND PARSE MACROS'
         SPACE 2
****     ADDRESS CONSTANT FOR IKJEGASN
ASNVCON  DC    V(IKJEGASN)         ADDRESS OF IKJEGASN
         SPACE 2
HSIXTEEN DC    H'16'               USED TO TEST FOR RC=16
         SPACE
FMAX     DC    H'10'               MAX NUMBER OF CHAR IN F CONSTANT
         DC    C'2147483648'       MAX NUMBER FOR A,F,Q, AND V TYPES
HMAX     DC    H'5'                MAX NUMBER OF CHAR IN H CONSTANT
         DC    C'32768'            MAX NUMBER FOR H AND Y TYPES
ZMAX     DC    H'16'               MAX NUMBER OF DIGITS IN ZONED DATA
PMAX     DC    H'31'               MAX LENGTH FOR PACKED STRING
         SPACE
*  LIMITS FOR 'D' TYPE FLOATING POINT CONSTANTS.
         SPACE
DMAX     DC    H'17'               COEFFICIENT LENGTH LIMIT
         DC    H'2'                EXPONENT LENGTH LIMIT
         DC    H'76'               POSITIVE EXPONENT VALUE LIMIT
         DC    C'72370055773322621'     POS COEFFICIENT VALUE LIMIT
DMAXNEG  DC    H'78'               NEGATIVE EXPONENT VALUE LIMIT
         DC    C'53976053469340278'     NEG COEFFICIENT VALUE LIMIT
         SPACE
*  LIMITS FOR 'E' TYPE FLOATING POINT CONSTANTS.
         SPACE
EMAX     DC    H'8'                COEFFICIENT LENGTH LIMIT
         DC    H'2'                EXPONENT LENGTH LIMIT
         DC    H'76'               POSITIVE EXPONENT VALUE LIMIT
         DC    C'72370053'         POSITIVE COEFFICIENT VALUE LIMIT
         SPACE
XMAX     DC    H'64'               LIMITS FOR X, C, AND B TYPE CONSTANT
         SPACE
SMAX1    DC    H'4'                MAX LNTH FOR SCON DISPLACEMENT FLD
         DC    C'4095'             MAX VALUE FOR DISPLACEMENT
SMAXL    EQU   *-SMAX1             SYMBOLIC OFFSET TO DELIMITER
         DC    C'('                BEGIN DELIMITER FOR REG NUMBER
         SPACE
SMAX2    DC    H'2'                MAX LNTH FOR SCON REG NUMBER FLD
         DC    CL4'15'             MAX VALUE FOR SCON REG NUMBER
         DC    C')'                END DELIMITER FOR REG NUMBER
         SPACE
         SPACE
PARSEPCL DC    V(IKJEGPMB)         ADDRESS OF PARSE PARM CNTRL LIST
         SPACE
*        THE ABEND TABLE FOR PCH AND ASN
PCHABEND EQU   *
         DS    0F
         DC    AL1(97)             CODE FOR USER CAUSED PROTECTION CHK
         DC    VL3(PCHABND1)       ANTICIPATED ABEND ADDR FROM DATA MVC
         DC    AL1(99)             CODE FOR LINK TO PARSE FAILED
         DC    AL3(PARSEBLO)       ADDRESS OF POTENTIAL ABEND
         DC    X'FF'               TABLE STOPPER
         SPACE
PCHSPL   IKJEGSPL RTRY=RETRY,ABNTB=PCHABEND,MODNM=IKJEGPCH,            *
               TNM=ASSIGNMENT
         EJECT
         DS    0D
PCHTRTBL DC    256AL1(*-PCHTRTBL)  LOWER TO UPPER CASE TR TABLE
         ORG   PCHTRTBL+C'A'-X'40' SET LOCATION CTR TO LOWER CASE 'A'
         DC    (C'Z'-C'A'+1)AL1(*-PCHTRTBL+X'40')  DEFINES UPPER CASE
         ORG
         SPACE 2
***********************************************************************
*  THE FOLLOWING TABLE IS USED TO CHECK AND TO CONVERT THE ASSEMBLER  *
*  TYPE CODES FOR VALUES INTO A HEX CODE FOR INTERNAL PROCESSING. THIS*
*  CODE IS THE SAME AS THAT USED BY THE ASSEMBLER IN SYM RECORDS.     *
         SPACE
         ORG   *-C'A'              BACK UP LOC CTR TO ORGIN TABLE
TYPETBL  EQU   *
         ORG   *+C'A'              ONLY USE SPACE FOR UPPER CASE ALPHA
         DC    X'2008001C'         CODES FOR A, B, C, AND D TYPE CONS.
         DC    X'1810FF14'         CODES FOR E, F, INV, AND H CONS.
         DC    (C'P'-C'H'-1)X'FF'  CODES FOR INV'S BETWEEN H AND P
         DC    X'30'               CODE FOR P TYPE CONSTANTS.
         DC    (C'S'-C'P'-1)X'FF'  CODES FOR INV'S BETWEEN P AND S.
         DC    X'28FFFFFF'         CODE FOR S TYPE CONS AND 3 INVS.
         DC    X'FF042434'         CODES FOR INV, X, Y, AND Z CONS.
***********************************************************************
         SPACE 2
XTRTT    EQU   *
         DC    256X'01'            NON-ZERO VALUE FOR NON-HEX DIGITS
         ORG   XTRTT+C'A'-C' '     POSITION FOR LOWER CASE 'ABCDEF'
         DC    6AL1(0)             DEFINE LOWER CASE ABCDEF
         ORG   XTRTT+C'A'          POSITION FOR UPPER CASE 'ABCDEF'
         DC    6AL1(0)             DEFINE UPPER CASE ABCDEF
         ORG   XTRTT+C'0'          POSITION FOR DECIMAL DIGITS 0-9
         DC    10AL1(0)            DEFINE DECIMAL DIGITS 0-9
         DC    50C'Z'              MAINTENANCE AREA
         EJECT
*  PARSE MACROS
         SPACE
IKJEGPMB IKJPARM
ADDR     IKJPOSIT  ADDRESS,PROMPT='ADDRESS',VALIDCK=PCHVALAD
VAL      IKJPOSIT  VALUE,LIST,ASIS,PROMPT='VALUE',VALIDCK=PCHVALTP
         IKJENDP
         EJECT
*
*        FOLLOWING IS A MAP OF THE WORK AREA USED BY THE PATCH AND
*        ASSIGN MODULES. NOTE THEY MUST BE KEPT IDENTICAL.......
*
PCHWORK  DSECT
PPCL     DS    7F                  SPACE FOR PARSE PARM LIST
         SPACE
ADDRINCR DS    F                   FULLWORD TO HOLD CONSTANTS FOR REGS
MAXRADDR EQU   ADDRINCR+2          OFFSET FOR MAX REG NUMBER
PCHRETCD DS    F                   HOLDS CURRENT RETURN CODE
VPDE     DS    3F                  HOLDS CURRENT COPY OF THE VALUE PDE
A1       DS    F                   HOLDS CURRENT ADDR TO BE PATCHED
DUMMYPDE DS    3F                  RESERVE SPACE FOR COPY OF VALUE PDE.
A1L      DS    H                   HOLDS CURRENT STRING LNTH FOR 'C'
A1TYPE   DS    X                   CONTAINS TYPE ASSOCIATED WITH VALUE
         DS    AL3                 RESERVED
         DS    XL1                 RESERVED
         DS    0D
         ORG   *-1                 POSITION FOR LENGTH BYTE OF HOLDAREA
CONAREA1 DS    XL41                USED FOR ADDRESSING PURPOSES ONLY.
         ORG   CONAREA1            RE-USE SPACE FOR ACTUAL HOLDAREA
HOLDAREA DS    XL65                TEMP HOLD AREA FOR DATA CONVERSION
MSGPLIST DS    2F                  PARM LIST FOR CALLING IKJEGIO1.
TYPESAVE DS    C                   FOR SAVING USER SUPPLIED TYPE CODE
REGDATA  DS    F                   PATCH VALUE TO BE PLACED IN REGISTER
ASNSVCL  DS    3F                  3 WORD PARMETER LISTS
APDEADDR DS    F                   ADDR OF THE ADDR PDE
ASNFLGS1 DS    X                   FLAGS FOR USE BY ASN
LPCHWORK EQU   *-PCHWORK           LENGTH OF TOTAL DSECT.
         EJECT
         VALUPDE
         EJECT
         TCOMTAB
         TITLE 'IKJEGPCH, MESSAGE CSECT'
         EJECT
         IKJPARMA                  EXPAND THE ADDR PDE MAPPING DSECT
         SPACE 3
         TSTCWORK                  EXPAND TEST'S CORE MAPPING DSECT
         EJECT
CVT      DSECT
         CVT
         IKJTCB
         IKJPPL
         END
