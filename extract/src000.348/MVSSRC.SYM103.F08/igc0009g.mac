*30740007*************************************************************
         TITLE 'IGC0009G - BREAKPOINT PROCESSING PORTION'
         COPY  IKJEGSIO
         EJECT
IGC0009G CSECT
*A390600-391000                                                @YM00583
*A392600-393777                                                @YM00583
*A712500-714000                                                @YM04131
*C742522-742523,742533,783887-783957,784611                    @YM04131
*A717204-719620                                                @YM04107
*A361416,361554-361609,361944,36198,367000,793276              @YM07115
*C784445                                                       @YM06379
*C401722                                                       @YM07131
*A334500-335500                                                @ZA00823
*D212000-212500                                                @ZA00874
*A196200,196700                                                @ZA00889
*C447500,449000                                                @ZA02713
*A15860000,16060000-16070000,28210000,56660000,56670000        @ZA02953
*C20100000                                                     @ZA03232
*C274000,276500,515500-515700,517000,557600,557700             @ZA04126
*C153000                                                       @ZA06203
*D360000,458500-464000                                         @ZA05688
*A404510-404920,                                               @ZA05687
*A77200,448100-448200,496040-496300                            @ZA05687
*A476510-476940                                               @ZA06226
*A207340,218700,396100,396200,405700,553440 @ZA07138,@ZA09259,@ZA10462
*A078100-078200,516100-516420,513600,545600-545910            @ZA10530
*C078500,516600,531500,519500                                 @ZA10530
*A181100-181700                                               @ZA11325
*A395600-395900,416100-416400                                 @ZA11342
*A476537-476566                                               @ZA11359
*A767100,773100                                               @ZA17744
*A681700-681820,682900-683100,746500-746900,750300-750500     @ZA26084
*C683100,747000,753000,755100,756000-756300,756900,765000     @ZA26084
*C765900-766200,771300,771900-772500,776700,779100,           @ZA26084
*A782200-782300                                               @ZA26084
*A682502-682504,C682524                                       @ZA29216
*A715900,717400,719200,720700,844600,C772100                  @ZA31527
***********************************************************************
*                                                                     *
* STATUS --                                                           *
*                                                                     *
*    CHANGE LEVEL 00, OS/VS2 RELEASE 2  , 07/06/73                    *
*                                                                     *
* FUNCTION --                                                         *
*                                                                     *
*    THIS SVC ROUTINE IS A TYPE 3 SVC USED BY TSO TEST FOR TWO        *
*    PURPOSES -- (1) TO PASS CONTROL FROM THE PROGRAM BEING TESTED    *
*    TO TSO TEST AT PREDETERMINED LOCATIONS, AND (2) TO MODIFY        *
*    SYSTEM CONTROL BLOCKS (TCB, RB, ETC.) FOR TSO TEST.  THIS SVC    *
*    ROUTINE IS DIVIDED INTO TWO LOGICAL PARTS, ONE WHICH PROCESSES   *
*    A BREAKPOINT AND THE OTHER WHICH ACTS AS A SERVICE ROUTINE       *
*    FOR TSO TEST.                                                    *
*                                                                     *
* ENTRY POINTS --                                                     *
*                                                                     *
*         IGC0009G -- ENTRY POINT OF THIS SVC ROUTINE.                *
*                                                                     *
* INPUT --                                                            *
*                                                                     *
*    BREAKPOINT PROCESSING -- N/A                                     *
*                                                                     *
*    SERVICE ROUTINE PROCESSING --  REGISTER 1 POINTS TO A THREE      *
*    WORD PARAMETER LIST OF THE FOLLOWING FORMAT --                   *
*                                                                     *
*              ......................................                 *
*              .                                    .                 *
*           +0 . ADDRESS OF A TCB, PRB OR IRB       .                 *
*              ......................................                 *
*              .                                    .                 *
*           +4 . VALUE, OR ADDRESS OF VALUE         .                 *
*              ......................................                 *
*              .        .        .                  .                 *
*           +8 . FLAGS1 . FLAGS2 . REGISTER NUMBER  .                 *
*              ......................................                 *
*                                                                     *
* OUTPUT --                                                           *
*                                                                     *
*    BREAKPOINT PROCESSING -- N/A                                     *
*                                                                     *
*    SERVICE ROUTINE PROCESSING -- REGISTER 15 ALWAYS CONTAINS        *
*    A RETRUN CODE.  RETURN CODES ARE --                              *
*                                                                     *
*        0 --  SUCCESSFUL COMPLETION (FOR ADDRESS VALIDITY            *
*              CHECKING, ADDRESS IS BOTH READABLE AND WRITEABLE).     *
*        4 --  AN ERROR OCCURRED (FOR ADDRESS VALIDITY CHECKING,      *
*              ADDRESS IS ONLY READABLE).                             *
*        8 --  FOR ADDRESS VALIDITY CHECKING ONLY, ADDRESS IS         *
*              INVALID.                                               *
*        16 --  ONLY WHEN IO IS INVOKED AND AN ATTN OCCURS.           *
*        20 --  ONLY WHEN AN ABEND HAS OCCURED AND MY RETRY ROUTINE   *
*               RECOVERED                                             *
*        24 --  ONLY WHEN THE SVC WAS UNABLE TO ISSUE AN ESTAE.       *
*                                                                     *
* EXTERNAL REFERENCES --                                              *
*                                                                     *
*         IEA0VL00 - RESIDENT ADDRESS VALIDITY CHECK ROUTINE.         *
*                                                                     *
*    MACROS USED --                                                   *
*                                                                     *
*         BRKELEM  - BREAKPOINT ELEMENT.                              *
*         CVT      - COMMUNICATIONS VECTOR TABLE MAPPING MACRO.       *
*         FREEMAIN - RETURN MEMORY TO OPERATING SYSTEM.               *
*         GETMAIN  - GET MEMORY FROM OPERATING SYSTEM.                *
*         IKJEGS9G - INPUT PARAMETER LIST MAPPING MACRO.              *
*         IKJRB    - REQUEST BLOCK MAPPING MACRO.                     *
*         IKJTCB   - TASK CONTROL BLOCK MAPPING MACRO.                *
*         MODESET  - ENABLE/DISABLE INTERRUPTS.                       *
*         POST     - INDICATE EVENT COMPLETE.                         *
*         TCOMTAB  - TEST COMMUNICATION TABLE MAPPING MACRO.          *
*         WAIT     - WAIT ON EVENT TO COMPLETE.                       *
*                                                                     *
* EXITS, NORMAL  --                                                   *
*                                                                     *
*    FOR BOTH THE BREAKPOINT FUNCTION AND THE SERVICE ROUTINE         *
*    FUNCTION, RETURN IS MADE BY A BRANCH REGISTER ON REGISTER 14.    *
*                                                                     *
* EXITS, ERROR --                                                     *
*                                                                     *
*    FOR BOTH THE BREAKPOINT FUNCTION AND THE SERVICE ROUTINE         *
*    FUNCTION, RETURN IS MADE BY A BRANCH REGISTER ON REGISTER 14.    *
*                                                                     *
* TABLES/WORK AREAS --                                                *
*                                                                     *
*    THE FOLLOWING FIELDS IN THE TCB ARE UPDATED --                   *
*              TCBABF (TCBTCP)                                        *
*              TCBTRNB                                                *
*              TCBTSFLG (TCBATT)                                      *
*              TCBFRS                                                 *
*    THE FOLLOWING FIELDS IN THE USER'S PROGRAM PRB ARE UPDATED --    *
*              RBOPSW (RESUME ADDRESS PORTION ONLY)                   *
*              RBWCF                                                  *
*    THE FOLLOWING FIELDS IN SVC 97'S SVRB ARE UPDATED --             *
*              RBGRSAVE                                               *
*    THE FOLLOWING FIELDS IN TCOMTAB ARE UPDATED --                   *
*              TSTMTASK                                               *
*              TSTSVCQ                                                *
*              PPTCB                                                  *
*              ECBPP                                                  *
*    THE FOLLOWING FIELDS IN THE BRKELEM ARE UPDATED --               *
*              BRKCOUNT                                               *
*              BRKRB                                                  *
*                                                                     *
* ATTRIBUTES --                                                       *
*                                                                     *
*    PRIVILEGED, ENABLED, REENTRANT, REFRESHABLE                      *
*                                                                     *
* CHARACTER CODE DEPENDENCY --                                        *
*                                                                     *
*    THIS ROUTINE IS CHARACTER CODE INDEPENDENT.                      *
*                                                                     *
* NOTES --                                                            *
*                                                                     *
*    THIS SVC IS BROKEN INTO TWO PARTS --                             *
*    (1) THE BREAKPOINT FUNCTION STARTS AT LABEL 'IGC0009G'           *
*    (2) THE TEST SERVICE FUNCTION STARTS AT LABEL 'TSTSVC01'         *
*
* CHANGE-ACTIVITY -
*                 APAR OZ07138 - CHANGES TO PROVIDE MNL A POINTER
*                 TO THE POSTING SVRB. ECBPP+1 IS THE POINTER.
*                 IT IS IN TCOMTAB AND SERIALIZED AT THE TASK LEVEL
*                 VIA ENQ. ANY PRIOR SVRB POINTER IS SAVED IN THE
*                 SVRB WORKAREA AT WRKSVRBS AND RESTORED BEFORE
*                 THE DEQ AND RETURN.
*                 APAR OZ09259 - SAME AS ABOVE.
*                 APAR OZ10462 - SAME AS ABOVE.
*                 APAR OZ10530 - REWORKED ESTAE/RETRY ROUTINES TO
*                 ADHERE TO SPECIFIED REGISTER CONVENTIONS
*                 APAR OZ11342 - ADDED VALIDITY CHECKING OF S9GREGNO
*                 TO DEFEND AGAINST THE ''MALICIOUS'' USER
*                 APAR OZ11359 - ADDED FUNCTION TO CLEANUP ROUTINE
*                 WHICH FREEMAINS SP255 STG. IT ALSO WILL ZERO
*                 TCBTRN FOR ALL TCB'S IN TMP/TEST'S FAMILY.
*                 APAR OZ17744 - CHANGES TO PREVENT FIRST LENGTH FIELD
*                 OF FREEMAIN LIST TO BE OVERLAID BY ADDRESS OF THE   *
*                 126 TH SVB OR SVQ.
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        GENERAL PURPOSE REGISTER EQUATES.                            *
*                                                                     *
***********************************************************************
         SPACE 2
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
N63      EQU   63          DECIMAL CONSTANT                   @ZA05687
ONEK     EQU   1000        DECIMAL CONSTANT FOR GETMAIN      @ZA06226
SVQLEN   EQU   12          LENGTH OF IKJEGSVQ CONT BLK       @ZA06226
SVBLEN   EQU   36          LENGTH OF IKJEGSVB CONT BLK       @ZA06226
N500     EQU   500         INDEX VALUE                       @ZA06226
N4       EQU   4           OFFSET VALUE                      @ZA06226
N0       EQU   0           OFFSET VALUE                      @ZA06226
         EJECT
         BALR  R12,R0         ESTABLISH ADDRESSABILITY FOR THIS
         BCTR  R12,R0         BASE AND ENTRY POINT MUST      @ZA10530
         BCTR  R12,R0         COINCIDE FOR ESTAE/RETRY RTNS  @ZA10530
         USING IGC0009G,R12   SVC ROUTINE                    @ZA10530
         SPACE 2
         USING TCB,R4         ESTABLISH ADDRESSABILITY TO TCB.
         USING RBSECT,R5      ESTABLISH ADDRESSABILITY TO SVRB.
         USING PSA,R0         ESTABLISH ADDRESSABILITY TO PSA
         SPACE
***********************************************************************
*        ISSUE A GETMAIN FOR LATER USE AS A REGISTER SAVE AREA
***********************************************************************
         SPACE
         LR    R9,R14         SAVE REGISTER 14 FOR RETURN
         LA    R0,WRKLEN      R0= THE  LENGTH FOR THE GETMAIN
         L     R7,PSAAOLD     R7= ADDR OF THE ASCB
         LR    R8,R1          PRESERVE REG 1
         GETMAIN RU,LV=(0),BRANCH=YES  ISSUE GETMAIN REGISTER SAVEAREA
         LR    R3,R1          R3= ADDR'ABILITY TO WORKAREA
         USING S9GWORKA,R3    ESTABLISH ADDR'ABILITY TO WORKAREA
         XC    WRKSTART(WRKLEN),WRKSTART  CLEAR WORKAREA
         ST    R9,WRKREGRT    SAVE R14 ADDRESS
         MVC   S9GSPL(S9GSPLEN),S9GSPLST INIT PARMS FOR ESTAE  @ZA10530
         SPACE
***********************************************************************
*        ISSUE AN ESTAE FOR ABEND RECOVERY
***********************************************************************
         SPACE
         ESTAE S9GESTAE,CT,PARAM=S9GSPL,XCTL=NO,BRANCH=YES,            *
               SVEAREA=WRKREGSV,MF=(E,WRKESTAE)
         LTR   R15,R15        WAS THE ESTAE OK..
         BNZ   ESTAFAIL       NO IT FAILED....
         LR    R1,R8          SAVE PARM R1.
         OI    TCBTSFLG,TCBATT  DEFER ALLN WHILE THE SVC IS IN CONTROL.
         SPACE 2
***********************************************************************
*                                                                     *
*        CHECK THE TEST FLAG TO SEE IF THIS TASK IS UNDER TEST.       *
*                                                                     *
***********************************************************************
         SPACE
         SPACE
         ST    R4,WRKSVTCB    SAVE THE ADDR OF CALLERS TCB
         TM    TCBABF,TCBTCP  DETERMINE IF THIS TASK UNDER TEST.
         BZ    TSTSVC01       IF NOT, EXECUTE A TEST SERVICE.
*                             IF SO, PROCESS BREAKPOINT.
         SPACE 2
***********************************************************************
*                                                                     *
*        THIS SECTION, DOWN TO THE LABEL 'TSTSVC01', IS THE LOGIC     *
*        FOR THE SVC ACTING AS A BREAKPOINT SVC.                      *
*                                                                     *
*        TCBTRN FIELD OF TCB CONTAINS ADDRESS OF TCOMTAB.             *
*                                                                     *
*       FIRST WE CHECK THE VALIDITY OF THE CALLER.                    *
*                                                                     *
***********************************************************************
         SPACE 2
         SPACE
         L     R13,HIGHBYTE   MASK TO CLEAR HIGH ORDER BYTE.
         L     R7,TCBTRN      ADDRESS OF TCOMTAB.
         BAL   R11,KEYCK      VALIDITY CHECK STORAGE KEYS.
         L     R7,ECBTST-TCOMTAB(,R7) ADDRESS OF STORAGE BLOCK
*                             TO BE CHECKED.
         BAL   R11,KEYCK      VALIDITY CHECK STORAGE KEYS.
         L     R9,TCBTRN      BASE FOR TCOMTAB.
         USING TCOMTAB,R9     ESTABLISH ADDRESSABILITY TO TCOMTAB.
         SPACE
         BAL   R11,CHKPPRB    CHECK THE VALIDITY OF THE CALLERS RB.
         SPACE
         L     R11,RBLINK      R11=PRB ADDR,PP IN WHICH BREAK OCCURRED.
         L     R8,RBOPSW+X4-RBSECT(R11) R8=RESUME ADDR OF PP.
         NR    R8,R13         CLEAR HIGH BYTE.
         BCTR  R8,X0          R8=RESUME ADDR-2
         BCTR  R8,X0          *
         LA    R10,RETURN1    R14 ADDRESS IN R10.
QPSEUDO  EQU   *              Q. IS IT A PSEUDO BREAKPOINT
         LA    R1,TSTSVC      NORMAL PSEUDO BREAK CHECK.
         CR    R1,R8          Q. IS IT A MATCH.
         BE    PSEUDO         YES IT IS.
         LA    R1,PPEXIT      BR RETURN PSEUDO BREAKPOINT.
         CR    R1,R8          Q. IS IT A MATCH.
         BE    TSTPOST        YES IT IS.
         TM    TSTFLGS3,TSTGOSW   Q.IS THIS A SPECIAL BREAKPT.
         BO    TSTPOST        YES.  POST 'TEST'.
         L     R0,BREAKTAB    HEAD OF THE BREAK ELEMENT QUEUE.
         SPACE 2
BRKSRCH  EQU   *              BREAK ELEMENT SEARCH.
         LTR   R7,R0          MOVE AND TEST FOR LAST.
         USING BRKELEM,R7     BREAK ELEMENT ADDRESSABILITY.
         BCR   Z,R10          NO MORE. GO TO RETURN1.
         LA    R6,BRKINST+X6  IF IC MATCHES THIS REPOINT IC & RTRN.
         CLR   R6,R8          Q. IS IT A MATCH.
         BE    BRKRTURN       YES IT IS.  BRANCH.
         C     R8,BRKADDR     IF IC MATCHES,A BREAKPT HAS BEEN HIT.
         L     R0,BRKLINK     GET THE NEXT, MAYBE.
         BNE   BRKSRCH        NO MATCH. CHECK NEXT.
         SPACE 2
COUNT    EQU   *              CHECK THE BREAK COUNT.
         LH    R8,BRKCOUNT    Q. IS ACCUMULATOR ZERO.
         LTR   R8,R8          *
         ST    R11,BRKRB       PRB(IRB) ADDRESS TO BREAK ELEMENT.
         BNZ   DECREM         NO.DECREMENT AND ALLOW CONTINUATION
         MVC   BRKCOUNT(X2),BRKCOUNT+X2 YES,RESET ACCUMULATOR.
         B     TSTPOST        AND POST TEST,WAIT.
         SPACE 2
DECREM   EQU   *
         BCTR  R8,X0          MINUS ONE.
         STH   R8,BRKCOUNT    CONTENTS BACK TO ACCUMULATOR.
         SPACE 2
***********************************************************************
*                                                                     *
*        THIS SECTION CAUSES THE EXECUTION OF THE PROBLEM PROGRAM     *
*        TO RESUME BY POINTING THE RESUME PSW AT THE OVERLAID IN-     *
*        STRUCTION IN THE BREAK ELEMENT.IF THE INSTRUCTION IS BAL     *
*        OR BALR THE LINK REGISTER CONTENTS ARE SET IN THE SVRB       *
*        SAVE AREA.                                                   *
*                                                                     *
***********************************************************************
         SPACE 2
         LA    R0,BRKINST     SAVED INSTRUCTION ADDRESS
         TM    BRKFLGS,BALSW  Q.WAS ORIGINAL INSTR. BAL OR BALR.
         BZ    SETIC          SET IC IN RESUME PSW AND RETURN TO PP
         SPACE 2
BALBALR  EQU   *              SPECIAL CODE FOR BAL AND BALR
         SR    R0,R0          R0=ZERO
         TM    BRKINST,XC0    Q.DOES INSTRUCTION LENGTH EQUAL TWO.
         BZ    BALR           A.YES. HAS TO BE BALR.
         SPACE 2
BAL      EQU   *              A.NO. HAS TO BE BAL.
         L     R0,BRKINST     R0=THE BREAK INSTRUCTION
         LR    R1,R0          R1=THE BREAK INSTRUCTION
         N     R0,DISPMASK    R0=DISPLACEMENT
         N     R1,BASEMASK    R1=BASE REGISTER
         SRL   R1,N10         BASE REGISTER NUMBER X 4
         BZ    BALR           REG 0 IS IGNORED AS A BASE REG.
         AL    R0,RBGRSAVE(R1)  ADD BASE REGISTER ADDR. TO DISPL.
         SPACE 2
BALR     EQU   *              *
         L     R1,BRKINST     R1=ACTUAL BREAK INSTRUCTION
         N     R1,INDXMASK    R1=INDEX REGISTER OF BREAK INSTR.
         SRL   R1,N14         (INDEX REG X 4)
         BZ    LINKREG        REG 0 IS IGNORED AS AN INDEX REG
         AL    R0,RBGRSAVE(R1) ADD INDEX REG TO TOTAL.
         SPACE 2
LINKREG  EQU   *              SETUP THE LINK REGISTER.
         NR    R0,R13         CLEAR THE HIGH BYTE.
         LA    R8,X2          BALR INSTRUCTION LENGTH.
         TM    BRKINST,XC0    Q.IS THIS A BALR
         BZ    LINKBALR       YES, THIS IS A BALR
         SPACE 2
LINKBAL  EQU   *              *
         AR    R8,R8          BAL INSTRUCTION LENGTH.
         L     R11,RBLINK     R11= ADDR OF P. P. RB            @ZA06203
         LA    R6,RBSECT-RBPREFIX LENGTH OF RB PREFIX.
         SR    R11,R6          POINT TO PREFIX.
         MVI   RBINLNTH-RBPREFIX(R11),X04 SET INSTRUCTION LENGTH TO 4.
         AR    R11,R6          POINT TO STANDARD SECTION.
         SPACE 2
LINKBALR EQU   *              *
         MVC   RBOPSW+X5-RBSECT(X3,R11),BRKADDR+X1 APPEND TO ILC/CC/
*                             PROGMASK
         AL    R8,RBOPSW+X4-RBSECT(R11) VALUE FOR THE LINK REGISTER.
         L     R6,BRKINST     ACTUAL BREAK INSTRUCTIONN
         N     R6,LINKMASK    LINK REGISTER NUMBER
         ICM   R8,HIBYTE,X80  SET FLAG FOR BAL IN LINK REG
*                                                             @ZA02953
         SRL   R6,N18         (LINK REG NUMBER X 4)
         ST    R8,RBGRSAVE(R6) STORE LINK REG CONTENTS IN SAVEAREA.
         TM    BRKINST,XC0    IS THIS A BALR Q.Q.Q.
         BNZ   SETIC          NO.
         ICM   R8,HIBYTE,X40  SET FLAG IN LINK REG FOR BALR  @ZA02953
         ST    R8,RBGRSAVE(R6) STORE LINK REG                @ZA02953
         TM    BRKINST+X1,X0F IS IT A BALR Q.Q.Q.
         BNZ   SETIC          NO.SET THE IC
         LR    R0,R8          SETIC WITH LINK ADDRESS.
         SPACE 2
SETIC    EQU   *              SET IC IN RESUME PSW
         LR    R1,R0          RESUME ADDRESS.
         LA    R1,X0(,R1)     SET HIGH ORDER BYTE TO ZERO.
         ST    R1,RBOPSW-RBSECT+X4(,R11) RESET PSW IN RB.
         BR    R10            GO TO RETURN1
         SPACE 2
BRKRTURN EQU   *
         SH    R8,BACKUP2     R8=BREAK ELEMENT POINTER.
         TM    BRKINST-BRKELEM(R8),XC0  TEST FOR BREAK INSTR LENGTH.
         LA    R6,X6          INSTRUCTION LENGTH OF SIX.
         BO    OUT            YES IT'S SIX.
         LA    R6,X2          INSTRUCTION LENGTH OF TWO.
         BZ    OUT            YES IT'S TWO
         AR    R6,R6          INSTRUCTION LENGTH OF FOUR.
*                             IT'S FOUR.
         SPACE 2
OUT      EQU   *
         L     R0,BRKADDR-BRKELEM(R8)  ADDR OF ORIG BRKPOINT.
         AR    R0,R6          PLUS CLOBBERED INSTR.LENGTH.
         NR    R0,R13         CLEAR HIGH BYTE.
         B     SETIC          GO BACK TO PROBLEM PROGRAM.
         SPACE 2
***********************************************************************
*                                                                     *
*        RESTORE THE WAIT COUNT FIELD FOR A PSEUDO BREAKPOINT.        *
*                                                                     *
***********************************************************************
         SPACE 2
PSEUDO   EQU   *              IT'S A PSEUDO BREAK.
         MVC   RBWCF-RBSECT(X1,R11),TSTGOWCF  DITTO.
         TM    TSTFLGS3,TSTSTAI  IS THIS A STAI RETRY.
         BZ    TSTPOST        NO.
         OI    WRKFLGS1,WRKPSEUD  INDICATE NO ENQ WANTED    @ZA07137
         LM    R0,R1,RBGRSAVE GET R0 AND R1 PASSED.
         LTR   R0,R0          WAS SDWA PASSED ? Q.Q.Q.
         BNZ   PSEUDO1        NO. SKIP FREEMAIN.
         STM   R4,R2,WRKREGSV SAVE THE REGISTERS ACROSS FREE
         L     R0,SDWAIDNT-SDWA(,R1)  GET SPID + LEN OF SDWA  @ZA11325
         TM    SDWASPID-SDWA(R1),XFF  CHECK SUBPOOL OF SDWA   @ZA11325
         BNZ   FREESDWA       NOT ZERO USE CORRECT VALUE      @ZA11325
         O     R0,FOLDZERO    SPID = 0 FOLD TO 250            @ZA11325
FREESDWA EQU   *
         L     R7,PSAAOLD     R7= ADDR OF THE ASCB.
         FREEMAIN  R,LV=(0),A=(1),BRANCH=YES FREE S.D.W.A.
         LM    R4,R2,WRKREGSV RESTORE THE REGISTERS
         SPACE 2
PSEUDO1  EQU   *
         L     R1,REGSAVE2    REGSAVE2 POINTER.
         MVC   RBGRSAVE(N64),X0(R1)    RESTORE THE ABENDED REGS.
         SPACE 2
TSTPOST  EQU   *
         L     R1,RBOPSW+X4-RBSECT(R11)  DECREMENT THE IC BY TWO.
         BCTR  R1,X0          *
         BCTR  R1,X0          *
         ST    R1,RBOPSW+X4-RBSECT(R11)  CHANGE THE IC.
GO       EQU   *              POST/WAIT
         TM    TCBTRN,TCBTCP  HAS THE TEST BIT BEEN TURNED OFF.
         BCR   Z,R10          YES RETURN
         NR    R4,R13         CLEAR HIGH BYTE OF CALLERS TCB.
         NR    R5,R13         CLEAR HIGH BYTE.
         LA    R6,ECBPP       R6=PP ECB ADDR.
         SPACE
***********************************************************************
*        DO THE FOLLOWING;
*        1) FREE THE LOCAL LOCK, 2) ENQUE ON THE TEST ECB 'IKJTMPNM'
*           IS QNAME,USERID IS RNAME.
*        3) ENABLE FOR ATTN'S, 4)WAIT ON MNL.
***********************************************************************
         SPACE
S9GLOCKA EQU   *
         ST    R11,R11SAVE    SAVE R11 AROUND BAL              @ZA00889
         BAL   R11,LOCKRELE   RELEASE THE LOCAL LOCK
         L     R11,R11SAVE    RESTORE R11                      @ZA00889
S9GLOCKB EQU   *
         NR    R5,R13         CLEAR HIGH BYTE OF MY SVRB ADDR.
         TM    TSTFLGS2,TSTQUAL  IS QUALIFICATION IN PROCESS
         BO    NOENQ          DO NOT ENQ ON THE ELEMENT
         XC    WRKENQWK(L'WRKENQWK),WRKENQWK ZERO FLAG SECTION
         MVC   WRKENQ(L'SVCNQ),SVCNQ MOVE IN THE ENQ WORD
         LA    R2,WRKENQ      R2= ADDR OF THE ENQ ELEMENT
         L     R6,CVTPTR      GET ADDR OF CVT           @ZA07137
         L     R6,CVTTCBP-CVT(R6) GET ADDR OF TCB WORDS @ZA07137
         L     R6,X0(R6)      GET ADDR OF CURRENT TCB   @ZA07137
         L     R6,TCBJSCB-TCB(R6) GET ADDR OF JSCB      @ZA07137
         L     R6,JSCBPSCB-IEZJSCB(R6)   PSCB ADDR IN R6@ZA07137
         USING PSCB,R6        SET ADDRESSABILITY TO PSCB@ZA07137
         MVC   WRKNQRNM(7),PSCBUSER GET USID FOR RNAME  @ZA07137
         MVI   WRKNQRNM+7,C' ' CLEAR LAST RNAME BYTE    @ZA07137
         DROP  R6             DONE WITH PSCB            @ZA07137
         L     R6,TPLPTR      GET TPL ADDRESS           @ZA07137
         L     R6,TPLECT-TPL(R6) GET ECT ADDR FROM TPL  @ZA07137
         TM    ECTSWS2-ECT(R6),ECTTABND   Q - NEED ENQ  @ZA07137
         BNO   S9GDOENQ                  YES - GOTO ENQ @ZA07137
         TM    WRKFLGS1,WRKPSEUD       SEE IF PSEUDO BP @ZA07137
         BO    NOENQ                   YES, SKIP ENQ    @ZA07137
S9GDOENQ LA    R6,WRKNQRNM    POINT TO ENQ'S RNAME      @ZA07137
         MVC   WRKENQWK(LISTENQE),LISTENQF  CLEAR THE ENQ ELEMENT
         ST    R5,WRKECB      PLACE MY SVRB ADDR IN ECB        @ZA03232
         ENQ   ((2),(6),E,8),ECB=WRKECB,MF=(E,WRKENQWK)  ENQ ON ECBTST
         NI    TCBTSFLG,XFF-TCBATT  DO NOT DEFER INTERRUPTS
         LTR   R15,R15        IS THE RETURN CODE ZERO          @YM07115
         BZ    NOENQ          YES CONTINUE                     @YM07115
         SR    R1,R1          CLEAR R1                         @YM07115
         IC    R1,X3(R15)     OBTAIN THE RETURN CODE           @YM07115
         LA    R2,X4          R2= X4 FOR COMPARE               @YM07115
         CR    R1,R2          WAS THE RETURN CODE A 4          @YM07115
         BNE   NOENQ          NO THEREFORE CONTINUE            @YM07115
         LA    R1,WRKECB      R1= ADDR OF THE ECB              @YM07115
         WAIT  ECB=(1)        WAIT ON THE ECB                  @YM07115
NOENQ    DS    0H             CONTINUE BY POSTING MNL
         TM    WRKFLGS1,WRKPSEUD  WAS ECT BIT FOR ME@ZA07137
         BZ    NORESET            NO-LEAVE IT ALONE     @ZA07137
         L     R6,TPLPTR      GET TPL ADDRESS                @ZA07137
         L     R6,TPLECT-TPL(R6)  GET ECT ADDR FROM TPL      @ZA07137
         NI    ECTSWS2-ECT(R6),XFF-ECTTABND    RESET NO ENQ @ZA07137
NORESET  EQU   *                                            @ZA07137
         NI    TCBTSFLG,XFF-TCBATT  DO NOT DEFER INTERRUPTS
         NR    R4,R13         CLEAR HIGH BYTE OF CALLERS TCB.
         ST    R4,PPTCB       PPTCB=THIS TCB.
         NR    R5,R13         CLEAR HIGH BYTE.
         LA    R6,ECBPP       R6=PP ECB ADDR.
         MVC   WRKSVRBS(3),ECBPP+1 SAVE PRIOR SVRB POINTER     @ZA07138
*                                                              @ZA09259
*                                                              @ZA10462
         ST    R5,X0(R6)      PUT SVRB ADDR INTO ECBPP.
         NI    TSTFLGS2,XFF-TSTQUAL TURN OFF QUAL IN PROCESS
         L     R1,ECBTST      TEST ECB ADDRESS.
         LA    R1,X0(,R1)     ZERO HIGH ORDER BYTE
*        OI    TSTFLGS2,TOFFDEF  THIS FLAG IS USED TO TELL     @YM07115
*                             DO NOT SET FLAG PER APAR         @ZM00874
         POST  (1)            POST TEST ECB COMPLETE.
         C     R5,X0(R6)      HAVE WE BEEN POSTED
         BNE   NOWAIT         DONT GO INTO WAIT BYTE CLEARED
         WAIT  ECB=(6)        WAIT ON PP ECB.
         SPACE 2
NOWAIT   EQU   *
         NI    TSTFLGS2,XFF-TOFFDEF TURN OFF SYNCH FLAG        @YM07115
         OI    TCBTSFLG,TCBATT  DEFER ATTNS.
         STM   R4,R2,WRKREGSV SAVE THE REGS ACCROSS THE LOCK
S9GLOCK2 SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=(LOCAL,         *
               IGC0009G(S9GLOCK2))  OBTAIN THE LOCAL LOCK
         LM    R4,R2,WRKREGSV RESTORE THE REGISTERS.
         MVC   ECBPP+1(3),WRKSVRBS RESTORE OLD 97 RBPTR        @ZA07138
*                                                              @ZA09259
*                                                              @ZA10462
         L     R1,RBOPSW-RBSECT+X4(,R11) GET SECOND WORD OF PSW
         NR    R1,R13         CLEAR HIGH BYTE.
         SH    R1,BACKUP1     BACKUP TO BREAK ELEMENT.
         L     R0,BREAKTAB    GET THE FIRST ELEMENT,IF ONE.
         SPACE 2
BRKSRCH1 EQU   *              CHECK IF IC POINTS TO BREAK INSTRUCTION.
*                             IF SO,CHECK AND SEE IF BRKINST IS
*                             A BAL OR BALR.
*                             IF EITHER,TREAT IT SPECIAL.
*                             IF NOT, GO TO RETRUN1.
         LTR   R7,R0          MOVE AND TEST FOR LAST.
         BCR   Z,R10          IT'S THE LAST. GO TO RETURN
         CR    R1,R7          Q.DOES THE IC - 4 = A BREAK ELEMENT.
         L     R0,BRKLINK     GET THE NEXT ELEMENT ,IF ONE.
         BNE   BRKSRCH1       NO. LOOP.
         SPACE 2
FOUND1   EQU   *              GOT A MATCH.
         TM    BRKFLGS,BALSW  IS THIS A BAL OR BALR Q.Q.
         BO    BALBALR        YES. IT IS ONE OF THESE.
*                             GO TO SPECIAL PROCESSING OF BAL/BALR.
         SPACE 1
***********************************************************************
*        RETURN TO THE CALLER; FREE THE LOCK AND RELEASE THE ENQUE
***********************************************************************
         SPACE 1
RETURN1  EQU   *              *
         BAL   R11,LOCKRELE   RELEASE THE LOCAL LOCK
         SPACE
************************************************************** @YM00583
*        THE FOLLOWING BRANCH IS TO SEE IF RUN WAS THE LAST    @YM00583
*        COMMAND ENTERED. IF SO A DIFFERNET EXIT MUST BE TAKEN @YM00583
************************************************************** @YM00583
         SPACE
         TM    TSTFLGS1,RUNSW WAS RUN ENTERED                  @YM00583
         BO    RUNEXIT        YES THEREFORE USE ALTERNATE EXIT @YM00583
         SPACE
         LA    R6,WRKENQ      R6= ADDR OF THE ENQ ELEMENT
         LA    R2,WRKNQRNM   R2= ADDR OF RNAME FOR DEQ   @ZA07137
         MVC   WRKENQWK(LISTDEQE),LISTDEQF  CLEAR THE DEQ ELEMENT
         DEQ   ((6),(2),8),RET=HAVE,MF=(E,WRKENQWK)  DEQ ON ECBTST WORD
         LA    R0,WRKLEN      R0=LENGTH OF AREA TO FREED
         L     R2,WRKREGRT    R2= R14 ADDRESS
         FREEMAIN R,LV=(0),A=(3) ISSUE FREEMAIN OF WORKAREA
         ESTAE 0              CLEAR THE ESTAE
         NI    TSTFLGS4,XFF-TSTRERTN  TURN OFF ABEND SW
         NI    TCBTSFLG,XFF-TCBATT  DO NOT DEFER INTERRUPTS
         LR    R14,R2         R14= ADDR OF RETURN
         L     R15,RBGRS15    RESTORE R15 TO ORIGINAL VALUE
         LM    R0,R13,RBGRSAVE    RESTORE ALL REGS.
         BR    R14            RETURN.
         EJECT
************************************************************** @YM00583
*        THE FOLLOWING CODE IS ONLY FOR THE CONDITION WHEN RUN @YM00583
*        WAS ENTERED AS A SUBCOMMAND. IKJEGMNL IS WAITING ON US@YM00583
*        TO COMPLETE OUR USE OF TCOMTAB, NOW THAT WE ARE DONE  @YM00583
*        WITH TCOMTAB WE POST IKJEGMNL SO IKJEGMNL WILL FREE IT@YM00583
*        AND RETURN TO TMP. THE ESTAE IS REMOVED BEFORE THE POS@YM00583
*        AND THEREFORE AN ALTERNATE EXIT IS USED.              @YM00583
************************************************************** @YM00583
         SPACE
RUNEXIT  EQU   *              RUN COMMAND EXIT                 @YM00583
         ESTAE 0              CLEAR THE ESTAE                  @YM00583
         NI    TSTFLGS4,XFF-TSTRERTN  TURN OFF ABEND SW        @YM00583
         L     R1,ECBTST      TEST ECB ADDRESS.                @YM00583
         POST  (1)            POST TEST ECB COMPLETE.          @YM00583
         SPACE
         LA    R6,WRKENQ      R6= ADDR OF THE ENQ ELEMENT      @YM00583
        LA    R2,WRKNQRNM    R2= ADDR OF RNAME FOR DEQ      @ZA07137
         MVC   WRKENQWK(LISTDEQE),LISTDEQF  CLEAR THE DEQ ELEME@YM00583
         DEQ   ((6),(2),8),RET=HAVE,MF=(E,WRKENQWK)  DEQ ON    @YM00583
         LA    R0,WRKLEN      R0=LENGTH OF AREA TO FREED       @YM00583
         L     R2,WRKREGRT    R2= RETURN ADDRESS               @YM00583
         FREEMAIN R,LV=(0),A=(3) ISSUE FREEMAIN OF WORKAREA    @YM00583
         NI    TCBTSFLG,XFF-TCBATT  DO NOT DEFER INTERRUPTS    @YM0058
         LR    R14,R2         R14= ADDR OF RETURN              @YM00583
         L     R15,RBGRS15    RESTORE R15 TO ORIGINAL VALUE    @YM00583
         LM    R0,R13,RBGRSAVE    RESTORE ALL REGS.            @YM00583
         BR    R14            RETURN.                          @YM00583
         EJECT
KEYCK    EQU   *
         LR    R1,R7          R1= ADDR TO BE CHECKED.
         L     R8,FLCCVT      R8= ADDRESS OF THE CVT
         USING CVT,R8         ADDR'ABILITY TO THE CVT
         L     R15,CVT0VL00   ADDRESS OF RESIDENT VALIDITY CHECK
*                             ROUTINE.
         DROP  R8             RELEASE ADDR'ABILITY TO CVT
         SR    R2,R2          R2= ZERO NO RANGE INDICATOR..
         BALR  R14,R15        BRANCH TO VALIDITY CHECK ROUTINE.
         BNZ   RETURN1        ADDRESS NOT WRITEABLE, RETURN.
         BR    R11            RETURN ON LINK REGISTER.
         EJECT
***********************************************************************
*        THE SVC MUST VARIFY THAT THE PROGRAM IT IS SERVICING IS NOT  *
*        PRIVILDGED. (P.P. KEY NOT SUPERVISOR STATE, AND NOT AN SVRB) *
***********************************************************************
         SPACE
CHKPPRB  EQU   *
         LR    R7,R5          SAVE THE ADDR OF MY SVRB.
         L     R5,RBLINK      OBTAIN THE ADDR OF CALLERS RB.
         TM    RBSTAB1,RBFTP-RBFTIRB  WHAT KIND OF RB IS IT(PRB OR IRB)
         BNZ   PPRBFAIL       IT IS NOT A PRB OR IRB.
         TM    RBOPSW+X1,PSWPBIT  DETERMINE IF IN PP MODE
         BZ    PPRBFAIL       NOT IN PP MODE.
         TM    RBOPSW+X1,PSWPKEYF  IS THE PROTECT KEY ZWRO.
         BZ    PPRBFAIL       NO IT IS KEY 0-7
         LR    R5,R7          RESTORE MY RB POINTER
         BR    R11            ALL IS OK THEREFORE EXIT.
         SPACE
PPRBFAIL EQU   *              IF TEST IS RUNNING INDICATE ERROR
*                             ELSE JUST RETURN DOING NOTHING.
         BAL   R11,LOCKRELE   RELEASE THE LOCAL LOCK
         LR    R5,R7          RESTORE MY RB POINTER
         L     R15,IOVCON     R15= ADDR OF IO FOR MSG          @ZA04126
         MVC   TSTIOPRM(IOPRMLN),IOPRM  PLACE IO PARM LIST IN WORKAREA
         MVI   TSTIOPRM,MSGINDC  PLACE MSG INDICATOR IN THE LIST.
         L     R13,REGSAVE6   R13= SAVEAREA FOR IO.            @YM07131
         LA    R1,TSTIOPRM    R1= ADDR OF THE IO PARM LIST
         BALR  R14,R15        GO TO IO.                        @ZA04126
         OI    TSTFLGS4,TSTSVCAB  INDICATE TO MNL THERE WAS AN ERROR.
         L     R13,HIGHBYTE   MASK TO CLEAR HIGH ORDER BYTE.
         B     S9GLOCKB       EXIT AS ERROR WAS HANDLED.
         EJECT
LOCKRELE EQU   *              RELE THE LOCAL LOCK
         STM   R4,R2,WRKREGSV SAVE THE REGS ACROSS THE LOCK.
S9GLOCK1 SETLOCK RELEASE,TYPE=LOCAL,RELATED=(LOCAL,IGC0009G(S9GLOCK1))
         LM    R4,R2,WRKREGSV RESTORE THE REGS.
         BR    R11            RETURN TO THE CALLER
         EJECT
MSGINDC  EQU   X'02'          MESSAGE INDICATOR.
HIBYTE   EQU   8              MASK FOR ICM INST             @ZA02953
Z        EQU   8              ZERO CC.
X3       EQU   3              HEXIDECIMAL 3
X6       EQU   6              HEXIDECIMAL 6
N10      EQU   10             DECIMAL 10
N14      EQU   14             FOURTEEN
N18      EQU   18             EIGHTEEN
N64      EQU   64             SIXTY FOUR
X0F      EQU   X'0F'          HEXIDECIMAL 0F
X04      EQU   X'04'          HEXIDECIMAL 04
XC0      EQU   X'C0'          HEXIDECIMAL C0
XFF      EQU   X'FF'          HEXIDECIMAL FF
         SPACE 2
         DS    0F
FOLDZERO DC    AL1(250),AL3(0)   MASK FOR FOLDING SUBPOOL ID   @ZA11325
QGET     DC    AL1(250),AL3(8)   TSTSVCQ ELEMENT. SP=250 LV=8.
FB000000 DC    X'FB000000'    RESET MASK FOR TCBTRN            @ZA11359
DISPMASK DC    X'00000FFF'    DISPLACEMENT MASK.
BASEMASK DC    X'0000F000'    BASE REGISTER MASK.
INDXMASK DC    X'000F0000'    INDEX REGISTER MASK
LINKMASK DC    X'00F00000'    LINK REGISTER MASK
HIGHBYTE DC    X'00FFFFFF'    ADDRESS MASK.
SVCNQ    DC    CL8'IKJTMPNM'  THIS IS THE SVC (97, 61) ENQ LOCK
         SPACE 3
*        ISSUE THE LIST FORM OF THE ENQ..............
         SPACE
LISTENQF ENQ   (LISTENQF,LISTENQF,E,8),ECB=LISTENQF,MF=L
LISTENQE EQU   *-LISTENQF     LENGTH OF LIST FORM OF ENQ
         SPACE 3
*        ISSUE THE LIST FORM OF THE DEQ..............
         SPACE
LISTDEQF DEQ   (LISTDEQF,LISTDEQF,8),RET=HAVE,MF=L
LISTDEQE EQU   *-LISTDEQF     LENGTH OF LIST FORM OF DEQ
         SPACE 2
LISTFREE FREEMAIN L,SP=255,MF=L                               @ZA06226
FREELEN  EQU    *-LISTFREE                                    @ZA06226
         SPACE 2
IOPRM    IKJEGSIO  MSG,FIRST=M0004,SECOND=M0204,ID=S9G02,MF=(L)
IOPRMLN  EQU   *-IOPRM        GET THE LENGTH OF PARM LIST
         TITLE 'IGC0009G - SERVICE ROUTINE PROCESSING'
         SPACE 20
***********************************************************************
*                                                                     *
*        SERVICE ROUTINE FUNCTION.                                    *
*                                                                     *
***********************************************************************
         EJECT
TSTSVC01 EQU   *
         USING IKJEGS9G,R1    ESTABLISH ADDRESSABILITY TO INPUT
*                             PARAMETER LIST.
         USING TCB,R4         ESTABLISH ADDRESSABILITY TO TCB.
         USING RBSECT,R5      ESTABLISH ADDRESSABILITY TO SVRB.
         EJECT
***********************************************************************
*                                                                     *
*        GIVEN THE INPUT PARAMETER OF THE TCB ADDRESS, OR THE ADDRESS *
*        OF A PRB OR AN IRB, DETERMINE THAT THE PARAMETER IS IN FACT  *
*        A VALID ADDRESS FOR THE GIVEN TASK STRUCTURE.  AT THE        *
*        CONCLUSION OF THIS PROCESSING, REGISTER 6 CONTAINS THE       *
*        ADDRESS OF THE TCB TO BE ALTERED.                            *
*                                                                     *
***********************************************************************
         SPACE 2
         SR    R2,R2          CONSTANT ZERO.
         L     R6,TCBOTC      ADDRESS OF TMP/TEST TASK MOTHER TCB.
         DROP  R4
         USING TCB,R6         ESTABLISH ADDRESSABILITY TO TCB.
S9G11030 EQU   *
         C     R2,TCBLTC      DETERMINE IF A DAUGHTER TASK EXISTS
         BZ    S9G11050       IF NO DAUGHTER TASK, BRANCH TO
*                             CHECK SISTER TASK.
         L     R6,TCBLTC      ADDRESS OF DAUGHTER TASK TCB.
         B     S9G11070       IF A DAUGHTER TASK EXISTS, BRANCH
*                             TO CHECK IF ADDRESS MATCHES ADDRESS
*                             PASSED IN INPUT PARAMETER LIST.
S9G11050 EQU   *
         C     R2,TCBNTC      DETERMINE IF A SISTER TASK EXISTS.
         BZ    S9G11060       IF NO SISTER TASK, BRANCH TO GET
*                             ADDRESS OF OWNING TCB.
         L     R6,TCBNTC      ADDRESS OF SISTER TASK TCB.
         B     S9G11070       IF A SISTER TASK EXISTS, BRANCH TO
*                             CHECK IF ADDRESS MATCHES ADDRESS
*                             PASSED IN INPUT PARAMETER LIST.
S9G11060 EQU   *
         L     R6,TCBOTC      ADDRESS OF OWNING TASK WITH RESPECT
*                             TO CURRENT TCB.
         DROP  R6
         USING TCB,R4         RE-ESTABLISH ADDRESSABILITY TO
*                             ORIGINAL TCB.
         C     R6,TCBOTC      DETERMINE IF ENTIRE TCB QUEUE UNDER
*                             THE TMP/TEST TASK HAS BEEN SEARCHED
         BNE   S9G11050       IF SEARCH NOT COMPLETE, BRANCH TO
*                             CHECK FOR SISTER TASK.
         B     S9G12030       WHEN ENTIRE QUEUE HAS BEEN SEARCHED
*                             WITHOUT A MATCH, RETURN TO CALLER.
S9G11070 EQU   *
         SR    R7,R7          ZERO IN ORDER THAT SUBROUTINE MAY
*                             DETERMINE IF AN RB ADDRESS PASSED.
         C     R6,S9GTCBPT    DETERMINE IF TCB ADDRESS MATCHES
*                             THE ADDRESS PASSED IN INPUT
*                             PARAMETER LIST.
         BE    S9G12010       WHEN MATCH FOUND, BRANCH TO HONOR
*                             REQUEST.
         DROP  R4,R5
         USING TCB,R6         ESTABLISH ADDRESSABILITY TO TCB
*                             BEING CHECKED.
         USING RBSECT,R7      ESTABLISH ADDRESSABILITY TO RB
*                             QUEUE FOR TCB BEING CHECKED.
         L     R7,TCBRBP      ADDRESS OF MOST RECENT REQUEST.
         LA    R7,0(R7)       ZERO HI BYTE          @ZA00823
         LTR   R7,R7          HAS TASK COMPLETED ?  @ZA00823
         BZ    S9G11030       YES, GO CHECK NEXT TCB @ZA00823
S9G11090 EQU   *
         CLM   R7,X7,S9GTCBPT+X1 DETERMINE IF RB ADDRESS
*                             MATCHES THE ADDRESS PASSED IN
*                             INPUT PARAMETER LIST.
         BE    S9G12010       WHEN MATCH FOUND, BRANCH TO HONOR
*                             REQUEST.
         TM    RBSTAB2,RBTCBNXT DETERMINE IF END OF RB CHAIN.
         L     R7,RBLINK      ADDRESS OF PREVIOUS REQUEST.
         BZ    S9G11090       NOT END OF RB CHAIN, BRANCH TO
*                             CHECK NEXT REQUEST ON CHAIN.
         B     S9G11030       BRANCH TO CHECK CURRENT TCB.
         EJECT
***********************************************************************
*                                                                     *
*        WHEN TCB ADDRESS HAS BEEN VALIDATED, OBTAIN THE FLAGS        *
*        PASSED TO THE SVC WHICH DETERMINE THE FUNCTION.  BASED       *
*        UPON THE OPERATION SPECIFIED, BRANCH TO THE APPROPRIATE      *
*        PROCESSING SECTION TO MAKE THE MODIFICATIONS REQUIRED.       *
*                                                                     *
***********************************************************************
         SPACE 2
S9G12010 EQU   *
         L     R1,RBGRS1-RBSECT(,R5) RELOAD PARAMETER LIST PTR
         SR    R9,R9          ZERO REGISTER BEFORE INSERT.
         ICM   R9,X3,S9GFLGS1 OBTAIN BIT SETTINGS FOR
*                             FUNCTION TO BE PERFORMED.
         LA    R9,X1(R9,R9)   APPEND LOW ORDER ONE BIT TO FLAGS
         SLL   R9,X14(R0)     AND SHIFT INTO POSITION FOR TEST.
         BXH   R9,R9,S9G12030 BRANCH TO SET ERROR CODE IF SVC WAS
*                             NOT INVOKED BY MACRO INSTRUCTION.
         BXLE  R9,R9,S9G13010 FLAGS = X'C000' - BRANCH TO SET
*                             TCBTCP BIT TO B'1'.
         BXLE  R9,R9,S9G14010 FLAGS = X'A000' - BRANCH TO SET
*                             TCBTCP BIT TO B'0'.
         BXLE  R9,R9,S9G15010 FLAGS = X'9000' - BRANCH TO ALTER
*                             TCBTRN FIELD.
         BXLE  R9,R9,S9G16010 FLAGS = X'8800' - BRANCH TO ALTER
*                             PROGRAM RESUME ADDRESS
         BXLE  R9,R9,S9G17010 FLAGS = X'8400' - BRANCH TO ALTER
*                             A SPECIFIC GENERAL PURPOSE REIGSTER
         BXLE  R9,R9,S9G18010 FLAGS = X'8200' - BRANCH TO ALTER
*                             ALL GENERAL PURPOSE REGISTERS.
         BXLE  R9,R9,S9G19010 FLAGS = X'8100' - BRANCH TO ALTER
*                             A SPECIFIC FLOATING POINT REGISTER.
         BXLE  R9,R9,S9G20010 FLAGS = X'8080' - BRANCH TO SET RB
*                             WAIT COUNT TO ZERO.
         BXLE  R9,R9,S9G21010 FLAGS = X'8040' - BRANCH TO
*                             VALIDATE ADDRESS SPECIFIED.
        BXLE   R9,R9,S9G22010 FLAGS = X'8020' - BRANCH TO
*                             DEQ FOR TCB ADDR SPECIFIED  @ZA07137
        BXLE   R9,R9,S9G24010 FLAGS = X'8010' - BRANCH  TO    @ZA06226
*                             FREE SP 255 CORE FOR IGC0006A   @ZA06226
S9G12030 EQU   *
         LA    R15,X4(,R0)    SET ERROR RETURN CODE.
         B     S9G23020       RETURN TO CALLER.
         EJECT
***********************************************************************
*                                                                     *
*        TCB BELONGS TO A DAUGHTER OF THE TMP/TEST TASK.  INDICATE    *
*        SO BY SETTING THE TCBTCP BIT IN TCBABF TO '1'B.              *
*                                                                     *
***********************************************************************
         SPACE 2
S9G13010 EQU   *
         OI    TCBABF,TCBTCP  SET TEST CP BIT TO B'1'.
         B     S9G23010       BRANCH TO RETURN TO CALLER.
         SPACE 5
***********************************************************************
*                                                                     *
*        THE SPECIFIED TCB IS NOLONGER REQUIRED FOR TESTING.          *
*        INDICATE THE TERMINATION OF THE TEST SESSION BY SETTING      *
*        THE TCBTCP BIT IN TCBABF TO '0'B.                            *
*                                                                     *
***********************************************************************
         SPACE 2
S9G14010 EQU   *
         NI    TCBABF,X'FF'-TCBTCP SET TEST CP BIT TO B'0'.
         B     S9G23010       BRANCH TO RETURN TO CALLER.
         SPACE 5
***********************************************************************
*                                                                     *
*        FOR TSO, THE TCBTRNB FIELD OF THE TCB IS RESERVED FOR        *
*        THE TEST COMMAND PROCESSOR.  THROUGHOUT THE TEST SESSION,    *
*        THIS FIELD IS USED TO POINT TO THE TEST COMMUNICATION        *
*        TABLE.  THIS FUNCTION WILL PLACE THE ADDRESS OF TCOMTAB      *
*        IN THE TMP/TEST TCB AND ANY DAUGHTER TCB.                    *
*        THIS FUMCTION IS ALSO USED TO ZERO THE TCBTRNB FIELD ZA26084 *
*        WHEN TEST IS GOING AWAY(NORMALLY OR OTHERWISE).IT IS ZA26084 *
*        CALLED BY TEST RUN OR END SUBCOMMANDS OR BY THE TMP  ZA26084 *
*        STAE RETRY ROUTINE (IKJEFT07) ON A TMP FAILURE.      ZA26084 *
*                                                                     *
***********************************************************************
S9G15010 EQU   *
         MVC   TCBTRNB(L'TCBTRNB),S9GVALUE+X1  MOVE TEST COMM- ZA29216
*                                TABLE ADDRESS TO TCB.         ZA29216
         SR    R9,R9           ZERO THE REGISTER               ZA26084
         ICM   R9,7,TCBTRNB    GET TCOMTAB PTR IF PRESENT      ZA26084
         LTR   R9,R9           IS TCOMTAB ADDR IN THIS TCB?    ZA26084
         BZ    S9G23010        BRANCH TO RETURN TO CALLER      ZA29216
         NI    TSTFLGS4,XFF-TSTRERTN  TURN OFF ABEND SWITCH    ZA26084
         B     S9G23010       BRANCH TO RETURN TO CALLER.
***********************************************************************
*                                                                     *
*        THIS FUNCTION IS USED TO MODIFY THE RESUME ADDRESS IN THE    *
*        PROBLEM PROGRAM PRB.  WHENEVER THE USER SPECIFIES OTHER      *
*        THAN THE NEXT SEQUENTIAL INSTRUCTION IN A GO, RUN, OR        *
*        CALL SUBCOMMAND, THIS FUNCTION WILL PLACE THE INDICATED      *
*        ADDRESS IN THE PRB.                                          *
*                                                                     *
***********************************************************************
         SPACE 2
S9G16010 EQU   *
         BAL   R11,S9G30010   BRANCH TO ISOLATE RB ADDRESS.
S9G16020 EQU   *
         MVC   RBOPSW+X4(L'S9GVALUE),S9GVALUE RE-SET RESUME
*                             ADDRESS.
         B     S9G23010       BRANCH TO RETURN TO CALLER.
         EJECT
***********************************************************************
*                                                                     *
*        THIS FUNCTION IS USED TO MODIFY A SPECIFIC GENERAL           *
*        REGISTER.  THE MODIFICATION IS MADE IN THE SVRB              *
*        SAVE AREA SO THAT THE REGISTER CHANGE IS EFFECTIVE           *
*        UPON THIS SVC'S EXIT.                                        *
*                                                                     *
***********************************************************************
         SPACE 2
S9G17010 EQU   *
         LH    R8,S9GREGNO    GET REGISTER NUMBER TO BE CHANGED.
         SRL   R8,4           REMOVE VALID PORTION OF S9GREGNO @ZA11342
         OR    R8,R8          CHECK FOR INVALID SPECIFICATION  @ZA11342
         BNZ   S9G12030       IF INVALID - ERROR,EXIT          @ZA11342
         LH    R8,S9GREGNO    IF VALID RELOAD REGISTER NUMBER  @ZA11342
         SLL   R8,X2(R0)      MULTIPLY REGISTER NUMBER BY 4.
         L     R9,TCBTRN      GET POINTER TO TCOMTAB           @ZA07138
*                                                              @ZA09259
*                                                              @ZA10462
         L     R7,ECBPP       GET POINTER TO SVRB              @ZA07138
*                                                              @ZA09259
*                                                              @ZA10462
         LA    R8,RBGRSAVE(R8) COMPUTE ADDRESS FOR REGISTER IN
*                             RB SAVE AREA.
         MVC   X0(L'S9GVALUE,R8),S9GVALUE UPDATE REGISTER
*                             CONTENTS.
         B     S9G23010       BRANCH TO RETURN TO CALLER.
         EJECT
***********************************************************************
*                                                                     *
*        THIS FUNCTION IS USED TO MODIFY ALL GENERAL REGISTERS        *
*        FOR THE PROBLEM PROGRAM.  THE MODIFICATION IS MADE TO THE    *
*        SVRB SAVE AREA SO THAT THE CHANGED REGISTERS ARE EFFECTIVE   *
*        WHEN THIS SVC EXITS.                                         *
*                                                                     *
***********************************************************************
         SPACE 2
S9G18010 EQU   *
         L     R9,TCBTRN        GET ADDR OF TCOMTAB         @ZA05687
         OI    TSTFLGS1,S9GINTSW INDICATE INTERNAL REQUEST  @ZA05687
         BAL   R10,S9G21010     GO TEST FOR READABILITY     @ZA05687
         LA    R7,N63(R7)       GET ADDR OF END OF BUFFER   @ZA05687
         BAL   R10,READCHK      TEST END OF BUFF READABILITY@ZA05687
         SPACE 2
*    IF WE HAVE GOTTEN THIS FAR THE 64 BYTE BUFFER IS NOT   @ZA05687
*    IN FETCH PROTECTED STORAGE AND WE CAN CONTINUE.        @ZA05687
*       FIRST WE HAVE TO GO BACK TO KEY 0 (SET TO 8 BY THE  @ZA05687
*       VALIDITY CHECKER)                                   @ZA05687
*         THEN GET THE LOCAL LOCK BACK TO UPDATE THE         @ZA05687
*         SPECIFIED SVRB                                     @ZA05687
          SPACE  1
         BAL   R11,GETLOCK                                   @ZA05687
         NI    TSTFLGS1,XFF-S9GINTSW TURN OFF FLAG            @ZA05687
         L     R8,S9GVALUE    ADDRESS OF 64-BYTE SAVE AREA WHICH
*                             CONTAINS NEW REGISTER VALUES.
         L     R7,ECBPP       GET POINTER TO SVRB              @ZA07138
*                                                              @ZA09259
*                                                              @ZA10462
         MVC   RBGRSAVE(RBEXSAVE-RBGRSAVE),X0(R8) UPDATE ALL
*                             GENERAL REGISTERS.
         B     S9G23010       BRANCH TO RETURN TO CALLER.
         EJECT
***********************************************************************
*                                                                     *
*        THIS FUNCTION IS USED TO MODIFY FLOATING POINT REGISTERS     *
*        FOR THE PROBLEM PROGRAM.  SINGLE PRECISION REGISTERS ARE     *
*        DENOTED AS ODD REGISTER NUMBERS (1, 3, 5, 7) WHILE DOUBLE    *
*        PRECISION REGISTERS ARE DENOTED AS EVEN REGISTER NUMBERS     *
*        (0, 2, 4, 6).  AFTER IT IS DETERMINED WHICH KIND OF FLOAT-   *
*        ING POINT REGISTER IS TO BE MODIFIED, THE VALUE PASSED IS    *
*        PLACED IN THE APPROPRIATE LOCATION IN THE FLOATING POINT     *
*        REGISTER SAVE AREA, A PREFIX TO THE TCB.                     *
*                                                                     *
***********************************************************************
         SPACE 2
S9G19010 EQU   *
         LH    R8,S9GREGNO    OBTAIN REGISTER NUMBER TO BE
*                             CHANGED. PREFORM VALIDITY CHECK  @ZA11342
         SRL   R8,4           REMOVE VALID PORTION OF S9GREGNO @ZA11342
         OR    R8,R8          CHECK FOR INVALID SPECIFICATION  @ZA11342
         BNZ   S9G12030       IF INVALID - ERROR,EXIT          @ZA11342
         LH    R8,S9GREGNO    IF VALID RELOAD REGISTER NUMBER  @ZA11342
         LA    R9,X1(,R0)     CONSTANT 1.
         NR    R9,R8          TEST IF SINGLE OR DOUBLE PRECISION.
         BNZ   S9G19030       IF SINGLE PRECISION, BRANCH TO
*                             PROCESS.
         SLL   R8,X2(R0)      MULTIPLY REGISTER NUMBER BY 4.
         LA    R9,TCB-TCBFIX(,R0) DISPLACEMENT TO FLOATING POINT
*                             REGISTER SAVE AREA IN TCB.
         ST    R6,WRKTCBSA    SAVE TCB PTR                     @ZA31527
         SR    R6,R9          ADDRESS OF TCB PREFIX.
         LA    R6,X0(R8,R6)   ADDRESS TO BE UPDATED FOR THIS
*                             REGISTER.
         L     R9,S9GVALUE    ADDRESS OF NEW VALUE FOR REGISTER.
         MVC   X0(L'TCBFRS0,R6),X0(R9) UPDATE REGISTER CONTENTS.
         L     R6,WRKTCBSA    RESTORE TCB PTR                  @ZA31527
         B     S9G23010       BRANCH TO RETURN TO CALLER.
S9G19030 EQU   *
         BCTR  R8,R0          MAKE REGISTER NUMBER EVEN.
         SLL   R8,X2(R0)      MULTIPLY REIGSTER NUMBER BY 4.
         LA    R9,TCB-TCBFIX(,R0) DISPLACEMENT TO FLOATING POINT
*                             REGISTER SAVE AREA IN TCB.
         ST    R6,WRKTCBSA    SAVE TCB PTR FOR LATER USE       @ZA31527
         SR    R6,R9          ADDRESS OF TCB PREFIX.
         LA    R6,X0(R8,R6)   ADDRESS TO BE UPDATED FOR THIS
*                             REGISTER.
         L     R9,S9GVALUE    ADDRESS OF NEW VALUE FOR REGISTER.
         MVC   X0(L'TCBFRS0/X2,R6),X0(R9) UPDATE REGISTER CONTENT
         L     R6,WRKTCBSA    RESTORE TCB PTR                  @ZA31527
         B     S9G23010       BRANCH TO RETURN TO CALLER.
         EJECT
***********************************************************************
*                                                                     *
*        THIS FUNCTION IS USED TO ZERO THE WAIT COUNT IN THE          *
*        SPECIFIED PRB.                                               *
*                                                                     *
***********************************************************************
         SPACE 2
S9G20010 EQU   *
         BAL   R11,S9G30010   BRANCH TO ISOLATE RB ADDRESS.
S9G20020 EQU   *
         MVI   RBWCF,X0       ZERO WAIT COUNT FIELD.
         B     S9G23010       BRANCH TO RETURN TO CALLER.
         EJECT
***********************************************************************
*                                                                     *
*        THIS FUNCTION IS USED TO VALIDITY CHECK AN ADDRESS.          *
*        THE ADDRESS CHECKING FACILITY USED IS THE RESIDENT           *
*        ADDRESS VALIDITY CHECK ROUTINE POINTED TO BY THE CVT.        *
*                                                                     *
***********************************************************************
         SPACE 2
S9G21010 EQU   *
         L     R7,S9GVALUE    ADDRESS TO BE VALIDITY CHECKED.
         L     R9,TCBTRN      R9= ADDR OF TCOMTAB
         BAL   R11,LOCKRELE   DROP THE LOCAL LOCK.
         MODESET EXTKEY=RBT234,SAVEKEY=WRKOLDKY,WORKREG=8   MODESET
         SPACE
**********************************************************************
*        THE SUPPLIED ADDR FAILED IN THE VALIDITY CHECK ROUTINE, SEE
*        IF THE ADDR IS READ ONLY BY TRYING TO FETCH FROM IT. COVER THE
*        FETCH WITH AN ABEND INDICATOR AND ABEND TABLE ENTRY.
**********************************************************************
READCHK  EQU   *
         SR    R8,R8          SETUP R8 AS INDICATOR            @YM04107
         DROP  R6             DROP TCB ADDRESSABILITY.
         USING TCB,R4         ESTABLISH TCB ADDRESSABILITY
         OI    TSTFLGS1,TSTFIRST  TURN ON POSSIBLE ABEND SW.
         IC    R0,X0(R7)      TRY TO READ FROM THE ADDRESS IN QUESTION.
*                                                             @ZA02713
READABND EQU   *              EXPECTED ABEND TABLE ENTRY.
         TM    TSTFLGS1,S9GINTSW IS THIS AN INTERNAL REQUEST? @ZA05687
         BOR   R10            YES, RETURN READ ONLY REQUEST   @ZA05687
         LA    R8,X4          INDICATE AT LEAST READABLE       @YM04107
         OC    X0(X1,R7),X0(R7) NOW TRY TO WRITE               @ZA02713
WRITABND EQU   *              EXPECTED ABEND TABLE ENTRY.      @YM04107
         NI    TSTFLGS1,XFF-TSTFIRST  TURN OFF ABEND SWITCH.
         SR    R8,R8          SETUP R8  AS INDICATOR           @YM04107
         B     VLCKEXIT      RETURN CONTROL TO THE SYSTEM
         SPACE 2
S9G21050 EQU   *
         NI    TSTFLGS1,XFF-TSTFIRST  TURN OFF ABEND SWITCH.
         DROP  R4             DROP TCB ADDRESSABILITY.
         USING TCB,R6         ESTABLISH TCB ADDRESSABILITY
         LA    R1,X4          INDICATE NOT READ OR WRITE.      @YM04107
         CR    R8,R1          WHAT CAUSED THE ERROR            @YM04107
         BE    VLCKEXIT       RETURN                           @YM04107
         LA    R8,X8          INDICATE NOT READ OR WRITE.      @YM04107
VLCKEXIT EQU   *              EXIT                             @YM04107
         LR    R2,R8          R2= RETURN CODE.
         MODESET KEYADDR=WRKOLDKY,WORKREG=8 MODESET BACK
         B     S9G23030       EXIT .
         EJECT
         SPACE 5
S9G22010 EQU   *
         EJECT
***********************************************************************
*                                                                     *
*        EXIT.                                                        *
*                                                                     *
***********************************************************************
         SPACE 2
S9G23010 EQU   *
         SR    R15,R15        SET SUCCESSFUL RETURN CODE.
S9G23020 EQU   *
         BAL   R11,LOCKRELE   RELEASE THE LOCAL LOCK
S9G23025 EQU   *
         LR    R2,R15         PRESERVE R15 RETURN CODE
S9G23030 EQU   *              WHERE REG 2 CONTAINS RET CODE VAL CK ONLY
         LA    R0,WRKLEN      R0=LENGTH OF AREA TO FREED
         SPACE
         L     R4,WRKREGRT    R4= RETURN ADDRESS
         FREEMAIN R,LV=(0),A=(3) ISSUE FREEMAIN OF WORKAREA
         NI    TCBTSFLG,XFF-TCBATT  NO NEED TO DEFER ATTNS.
         ESTAE 0              CLEAR THE ESTAE
         SR    R9,R9          ZERO REG                         @ZA26084
         ICM   R9,7,TCBTRNB   R9= ADDR OF TCOMTAB IF THERE     @ZA26084
         LTR   R9,R9          WAS THERE AN ADDR IN TCB         @ZA26084
         BZ    S9G23035       NO...DONT CLOBBER PSA ?          @ZA26084
         NI    TSTFLGS4,XFF-TSTRERTN  TURN OFF ABEND SW
S9G23035 EQU   *                                               @ZA26084
         LR    R14,R4         R14= ADDR OF RETURN
         LR    R15,R2         RESTORE R15 RETURN CODE TO CALLER
         BR    R14            RETURN TO CALLER
***********************************************************************
*    THIS FUNCTION FREES ALL THE CORE GOTTEN IN SUBPOOL 255    @ZA06226
*        BY IGC0006A FOR SVB AND SVQ CONTROL BLOCKS            @ZA06226
*                                                              @ZA06226
***************************************************************@ZA06226
         SPACE 2
S9G24010 EQU   *                   SVC 97 CLEANUP FUNCTION     @ZA06226
         LR    R4,R6               GET TCB ADDR FOR BASE       @ZA26084
         DROP  R6                  DROP R6 FOR TIME BEING      @ZA26084
         USING TCB,R4              REBASE TCB                  @ZA26084
         LR    R7,R6               ZERO TCBTRN IN ALL TCBS     @ZA11359
         LA    R7,N0(R7)           SAVE TOP OF FAMILY QUEUE    @ZA11359
CLEARTRN EQU   *
         NC    TCBTRN(4),FB000000  ZERO ALL TEST INFO IN TCBTRN@ZA11359
         L     R8,TCBLTC           GET DAUGHTER IF ANY         @ZA11359
         LA    R8,N0(R8)           CLEAR HI BYTE               @ZA11359
         LTR   R8,R8               IS THERE A DAUGHTER         @ZA11359
         BZ    FINDSIS             NO DO SISTER'S FAMILY       @ZA11359
         LR    R4,R8               WAS DAUGHTER DO HER FAMILY  @ZA26084
         B     CLEARTRN            PROCESS NEXT GENERATION     @ZA11359
FINDSIS  EQU   *                   PROCESS SISTER              @ZA11359
         L     R8,TCBNTC           GET SISTER'S ADDR IF ANY    @ZA11359
         LA    R8,N0(R8)           CLEAR HI BYTE               @ZA11359
         LTR   R8,R8               IS THERE A SISTER           @ZA11359
         BZ    UPTOMOM             NO-GO UP TO MOTHER'S FAMILY @ZA11359
         LR    R4,R8               YES-DO SISTER'S FAMILY      @ZA26084
         B     CLEARTRN            GO PROCESS SISTER'S FAMILY  @ZA11359
UPTOMOM  L     R8,TCBOTC           GET MOTHER'S ADDRESS        @ZA11359
         LA    R4,N0(R8)           CLEAR HI BYTE               @ZA26084
         CR    R4,R7               IS MOTHER HEAD OF FAMILY    @ZA26084
         BNE   FINDSIS             NO- DO HER SISTER'S FAMILY  @ZA11359
         SR    R4,R4               CLEAR REG FOR USE           @Z260846
         L     R8,PSAAOLD          GET PTR TO ASCB             @ZA06226
         L     R8,ASCBASXB-ASCB(R8) GET ADDR OF AXCB           @ZA06226
         L     R8,ASXBLWA-ASXB(R8) GET ADDR OF LWA             @ZA06226
         L     R7,LWATEST-LWA(R8)  GET ADDR OF TEST WORD       @ZA06226
         LA    R7,0(R7)            ZERO HIGH BYTE              @ZA06226
         LTR   R7,R7               IS THE A POINTER TO A SVB   @ZA06226
         ST    R4,LWATEST-LWA(R8)  ZERO LWATEST PTR            @ZA26084
         BZ    S9G23010            NO, GO TO EXIT PROCESSING   @ZA06226
* AT THIS POINT WE KNOW THERE IS WORK TO DO                    @ZA06226
*    FIRST FREE THE LOCAL LOCK SO THAT SVCS CAN BE ISSUED      @ZA06226
*    THEN GET 1000 BYTES FOR A LIST TYPE FREEMAIN              @ZA06226
         SPACE 1
         BAL   R11,LOCKRELE        FREE LOCAL LOCK             @ZA06226
         SPACE 1
         GETMAIN RU,LV=ONEK        GET FREEMAIN LIST CORE      @ZA06226
         EJECT
         USING IKJEGSVQ,R7         ADDRESSABILITY TO SVQS      @ZA06226
         USING IKJEGSVB,R8         ADDRESSABILITY TO SVBS      @ZA06226
         LR    R9,R1               R9= ADDR LIST               @ZA06226
         SPACE 2
S9G24020 EQU   *                   SVQ LOOP                    @ZA06226
         LA    R7,N0(R7)           ZERO HI BYTE              @ZA06226
         LTR   R7,R7               IS THERE AN ADDR?           @ZA06226
         LA    R10,S9G24090        SET ADDR FOR RETURN         @ZA06226
         BZ    S9G24090            NO ADDR GO FREE CORE &      @ZA06226
*                                  RETURN                      @ZA06226
         ST    R7,N0(R4,R9)        PUT ADDR OF SVQ IN LIST     @ZA06226
         LA    R5,SVQLEN           LENGTH OF ONE SVQ BLOCK     @ZA06226
         ST    R5,N500(R4,R9)      PUT LENGTH OF SVQ IN LIST   @ZA26084
         LA    R4,N4(R4)           INCREMENT INDEX             @ZA26084
         CH    R4,FIVEHUND         IS R4 POINTING TO LAST      @ZA26084
*                                  ENTRY                       @ZA06226
         LA    R10,S9G24030        GET RETURN ADDR             @ZA06226
         BE    S9G24090            PAST END? GO FREE           @ZA17744
S9G24030 EQU   *                                               @ZA06226
         L     R8,SVQBLKPT         GET ADDR OF SVB BLOCK       @ZA06226
         LA    R8,N0(R8)           ZERO HI BYTE                @ZA06226
         LTR   R8,R8               IS THERE AN SVB BLOCK       @ZA06226
         LA    R11,S9G24040        RETURN ADDR IN R11          @ZA06226
         BNZ   S9G24050            YES, BRANCH TO PROCESS SVB  @ZA06226
S9G24040 EQU   *                                               @ZA06226
         L     R7,SVQLNKPT         GET NEXT SVQ BLOCK          @ZA06226
         B     S9G24020            ONCE AGAIN FROM THE TOP     @ZA06226
         SPACE 3
* THE FOLLOWING CODE WILL SEARCH THE SVB BLOCKS AND FREE THEM  @ZA06226
S9G24050 EQU   *                                               @ZA06226
         ST    R8,N0(R4,R9)        STORE ADDR IN LIST          @ZA26084
         LA    R5,SVBLEN           GET LENGTH OF SVB           @ZA06226
         ST    R5,N500(R4,R9)      STORE LENGTH IN LIST        @ZA26084
         LA    R4,N4(R4)           INCREMENT INDEX             @ZA31527
         CH    R4,FIVEHUND         ARE WE PAST THE END YET     @ZA26084
         LA    R10,S9G24060        ADDR FOR CORE RETURN        @ZA06226
         BE    S9G24090            YES, GO FREE THE CORE       @ZA17744
S9G24060 EQU   *                                               @ZA06226
         L     R8,SVBLNKPT         GET NEXT SVB BLOCK PTR      @ZA06226
         LA    R8,N0(R8)           ZERO HIGH BYTE              @ZA06226
         LTR   R8,R8               IS THE PTR ZERO             @ZA06226
         BNZ   S9G24050            NO, CONTINUE LOOP           @ZA06226
         BR    R11                 YES, GO BACK TO LOOK FOR    @ZA06226
*                                  NEXTSVQ                     @ZA06226
         EJECT
S9G24090 LTR   R4,R4               IS THIS FINAL CALL          @ZA26084
         BZ    S9G24095            YES, GO FREE LIST CORE      @ZA06226
         S     R4,FOUR             DECREMENT REG BY FOUR       @ZA26084
         LA    R1,N500(R9)         USE R1 FOR ARITHMETIC       @ZA06226
         AR    R1,R4               FIND END OF LENGTH LIST     @ZA26084
         OI    N0(R1),X'80'        TURN ON END OF LIST         @ZA06226
*                                  INDICATOR                   @ZA06226
         LA    R2,N500(R9)         GET START OF LENGTH LIST    @ZA06226
         MVC   WRKFREE(FREELEN),LISTFREE COPY LIST FORM        @ZA06226
         FREEMAIN LC,LA=(R2),A=(R9),MF=(E,WRKFREE) FREE A BUNCH OF CORE
         SPACE 1
         SR    R4,R4               RESET INDEX TO ZERO         @ZA26084
         BR    10                  RETURN TO CALLER            @ZA06226
         SPACE 2
* CLEAN UP LIST CORE AND GO AWAY                               @ZA06226
         SPACE 1
S9G24095 EQU   *                                               @ZA06226
         FREEMAIN RC,LV=ONEK,A=(R9)                            @ZA06226
         SR    R15,R15             ZERO RETURN CODE            @ZA06226
         B     S9G23025            GO TO CLEAN UP AND RETURN   @ZA06226
         DROP  R7
         DROP  R8
         DROP  R4                                              @ZA26084
         USING TCB,R6             REESTABLISH BASE FOR TCB     @ZA26084
         USING RBSECT,R7          REESTABLISH BASE FOR RB
*                                 RB'S ARE NOT REF IN PRIOR SECTION
         EJECT
***********************************************************************
*                                                                     *
*        THIS SUBROUTINE IS USED TO ISOLATE THE PRB TO BE MODIFIED.   *
*                                                                     *
***********************************************************************
         SPACE 2
S9G30010 EQU   *
         LTR   R7,R7          WAS AN RB ADDRESS OR A TCB ADDRESS
*                             PASSED AS AN INPUT PARAMETER.
         BNZ   S9G30070       IF AN RB ADDRESS PASSED, BRANCH TO
*                             DETERMINE STATUS OF RB.
         L     R7,TCBRBP      ADDRESS OF RB CHAIN FOR TCB PASSED.
S9G30030 EQU   *
         TM    RBSTAB1,RBFTP   CHECK IF THIS IS A PRB.
         BZ    S9G30070        IF A PRB, BRANCH TO DETERMINE
*                              STATUS.
         TM    RBSTAB1,RBFTP-RBFTIRB IS THIS RB OTHER THAN AN IRB
         BNZ   S9G30050        IF NOT AN IRB, BRANCH TO GET NEXT
*                              RB POINTER.
         TM    RBSTAB1,RBFTIRB IS THIS RB AN IRB.
         BO    S9G30070        IF AN IRB, BRANCH TO DETERMINE
*                              STATUS.
S9G30050 EQU   *
         TM    RBSTAB2,RBTCBNXT HAS END OF RB CHAIN BEEN REACHED.
         L     R7,RBLINK       GET POINTER TO NEXT RB ON CHAIN.
         BO    S9G12030        IF END OF CHAIN, BRANCH TO SET
*                              ERROR RETURN CODE AND EXIT.
         B     S9G30030        BRANCH TO EXAMINE THIS RB.
S9G30070 EQU   *
         TM    RBOPSW+X1,PSWPBIT DETERMINE IF PROGRAM IS RUNNING
*                              IN PROBLEM PROGRAM MODE.
         BZ    S9G12030        IF NOT IN PROBLEM PROGRAM MODE,
*                              BRANCH TO SET ERROR CODE AND EXIT.
         TM    RBOPSW+X1,PSWPKEYF DETERMINE IF PROGRAM HAS A
*                              PROTECT KEY OF ZERO.
         BZ    S9G12030        IF PROTECT KEY ZERO, BRANCH TO SET
*                              ERROR CODE AND EXIT.
         BR    R11             RETURN TO CALLER.
         EJECT
*********************************************************************
*                                                           @ZA05687*
*       HERE WE WILL MODESET TO THE ORIGINAL KEY            @ZA05687*
*       AND OBTAIN THE LOCAL LOCK FOR THOSE WHO HAVE LOST   @ZA05687*
*       IT AND ARE DESIROUS OF FINDING IT AGAIN             @ZA05687*
*                                                           @ZA05687*
*********************************************************************
         SPACE  2
GETLOCK  EQU   *                                            @ZA05687
         MODESET KEYADDR=WRKOLDKY,WORKREG=8 RETURN TO ORG KEY @ZA05687
         STM   R4,R2,WRKREGSV    SAVE REGS AROUND SETLOCK     @ZA05687
GOGETEM  SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=(LOCAL,         *
               IGC0009G(GOGETEM)) REOBTAIN THE LOCK           @ZA05687
         LM    R4,R2,WRKREGSV     RESTORE THE REGS            @ZA05687
         BR    R11                RETURN TO CALLER            @ZA05687
         EJECT
***********************************************************************
*                                                                     *
*        WE HAVE TO DETERMINE WHAT TO DO WITH THE ESTAE FAILURE.      *
*              1) IF TEST IS NOT RUNNING END THE SESSION.             *
*              2) IF TEST IS RUNNING RETURN WITH 24.                  *
*                                                                     *
***********************************************************************
         SPACE
ESTAFAIL DS    0H             ESTAE FAILLED.
         SPACE
         TM    TCBABF,TCBTCP  IS TEST RUNNING
         BZ    S9G08010       YES RETURN TO CALLER WITH 24.
         L     R9,TCBTRN      GET ADDR OF TCOMTAB
         USING TCOMTAB,R9     ADDRESSABILITY TO TCOMTAB
         OI    TSTFLGS4,TSTSVCAB  INDICATE TO MNL TO TERMINATE
         B     S9GLOCKA       POST MNL TO END TEST SESSION..
S9G08010 DS    0H             RETURN WITH 24.
         STC   R15,TSTESTRC   SAVE THE  RETURN CODE.
         LA    R15,RC24       REGISTER 15 = 24..
         B     S9G23020       RETURN.
         EJECT
***********************************************************************
*                                                                     *
*        THIS ROUTINE IS USED TO SYNCH TO IKJEGSTA FOR HANDLING ABENDS
*                                                                     *
***********************************************************************
         SPACE
S9GESTAE DS    0F             START OF DUMMY STA
         USING S9GESTAE,R15   RE-ESTABLISH ADDR'ABILITY        @YM04131
         L     R6,FLCCVT      R6= ADDR OF CVT                  @YM04131
         USING CVT,R6         ADDR'ABILITY TO CVT              @YM04131
         L     R6,CVTTCBP     R6= ADDR OF TCB                  @YM04131
         L     R6,X4(,R6)     R6= ADDR OF THE TCB              @YM04131
         USING TCB,R6         ADDRABILITY TO TCB               @YM04131
         L     R9,TCBTRN      R9= ADDR OF TCOMTAB
         LA    R9,N0(R9)      CLEAR FLAG BYTE LEAVING ADDRESS  @ZA11359
         LTR   R9,R9          IS TEST RUNNING.
         BZ    ESTAERR        NO TEST IS NOT IN CONTROL
         USING TCOMTAB,R9     ADDR'ABILITY TO TCOMTAB
         L     R15,STAEVCON   R15= ADDR OF IKJEGSTA            @ZA04126
         LR    R13,R14        SAVE RETURN ADDR AROUND BALR     @ZA04126
         BALR  R14,R15        TRANSFER CONTROL TO IKJEGSTA     @ZA04126
         LTR   R1,R1          IS A WORK AREA AVAIL??           @ZA04126
         BZR   R13            NO, RETURN SKIP SETRP            @ZA04126
         USING SDWA,R1        YES-SET ADDR'ABILITY             @ZA10530
         L     R3,SDWAPARM    GET WORK AREA FOR RETRY          @ZA10530
         ST    R3,SDWASR03    UPDTAE REG3 PTR FOR RETRY        @ZA10530
         ST    R9,SDWASR09    AND THE R9 PTR TO TCOMTAB        @ZA10530
         L     R12,X8(,R3)    RESET BASE REG 12                @ZA10530
         ST    R12,SDWASR12   AND UPDATE IN SDWA FOR RETRY     @ZA10530
         SETRP RETADDR=(R0),RECORD=NO,DUMP=NO,FRESDWA=YES,RC=4,        *
               RETREGS=YES                                     @ZA10530
         BR    R13            RETURN TO CALLER                 @ZA04126
         SPACE
ESTAERR  DS    0H             SOMETHING IS A MESS PERCOLATE..
         SR    R15,R15        CLEAR REG 15..
         BR    R14            EXIT TO CALLER
         DROP  R15,R6,R1      RELEASE ADDRABILITY              @YM04131
         EJECT
***********************************************************************
*                                                                     *
*        THIS ROUTINE IS THE RETRY ROUTINE OF IGC0009G                *
*        ON ENTRY ALL MY REGISTERS ARE VALID DUE TO SETRP.    @ZA10530*
*                                                                     *
***********************************************************************
         SPACE
S9GRETRY DS    0F             THE START OF THE RETRY ROUTINE
         SR    R15,R15        CLEAR RETURN CODE
         L     R4,WRKSVTCB    R4= ADDR OF CALLERS TCB.
         USING TCB,R4         ADDR'ABILITY TO THE TCB.
         TM    TCBABF,TCBTCP  DETERMINE IF THIS WAS A SERVICE
         BZ    SERVFAIL       YES A SERVICE FAILED.
         OI    TSTFLGS4,TSTSVCAB  INDICATE ABEND TO MNL.
         B     S9GLOCKB       POST MNL TO END TEST SESSION.
SERVFAIL DS    0H             RETURN WITH A 20.
         TM    TSTFLGS1,TSTFIRST  WAS THE ABEND EXPECTED.
         BO    S9G21050       THE ADDR IS BAD.
         LA    R15,RC20       R15 = 20, RETRY ROUTINE ENTERED.
         B     S9G23025       EXIT TO THE CALLER.
         EJECT
S9GSPLST IKJEGSPL RTRY=S9GRETRY,ABNTB=STAETAB,MODNM=IGC0009G,          *
               TNM=BREAKPOINT-SVC                              @ZA10530
S9GSPLEN EQU   *-S9GSPLST     LENGTH OF ESTAE PARM LIST.       @ZA10530
         SPACE
STAETAB  DS    0F             ABEND TABLE FOR IKJEGSTA
         DC    X'00'          INDICATE NO MESSAGE
         DC    AL3(READABND)  READ ONLY VALIDITY CHECK FAILED
         DC    X'00'          INDICATE NO MESSAGE
         DC    AL3(WRITABND)  WRIT ABEND VALIDITY CHECK FAILED
         DC    X'FF'          NO ENTRIES IN TABLE
         SPACE 2
DEQLIST  DEQ   (MAJQNAM,,,STEP),MF=L
         DS    0F
DQLSTLEN EQU   *-DEQLIST         LENGTH OF LIST FORM
MAJQNAM  DC    CL8'IKJTMPNM'     MAJOR NAME FOR DEQ           @ZA07137
         SPACE 5
EXIT     EQU   3              *
PSWPBIT  EQU   X'01'
PSWPKEYF EQU   X'80'
RC20     EQU   20             RETURN CODE 20.
RC24     EQU   24             RETURN CODE 24.
X0       EQU   0              OFFSET 0
X1       EQU   1              OFFSET 1
X2       EQU   2              OFFSET 2
X4       EQU   4              OFFSET 4
X14      EQU   14             OFFSET 14.
X5       EQU   5              OFFSET 5
X7       EQU   7              OFFSET 7
X8       EQU   8              OFFSET 8
SAVELN   EQU   80             LENGTH OF GETMAIN SAVE AREA
         EJECT
*******************************************************************
*        WORKAREA DSECT FOR IGC0009G
*******************************************************************
S9GWORKA DSECT
WRKSTART DS    0F             START OF THE WORKAREA
*        ***************************************************** @ZA10530
*        *  THE FOLLOWING CODE TO WRKREGSV MUST REMAIN AT    * @ZA10530
*        *  OFFSET ZERO INTO THIS WORK AREA DSECT            * @ZA10530
*        ***************************************************** @ZA10530
S9GSPL   DS    XL(S9GSPLEN)   ESTAE EXIT PARAMETER LIST        @ZA10530
WRKREGSV DS    18F            REGISTER SAVE AREA
WRKESTAE DS    4F             ESTAE WORKAREA
WRKREGRT DS    1F             SAVE AREA FOR R14 REGISTER
WRKSVTCB DS    1F             SAVE AREA FOR CALLERS TCB ADDR.
WRKENQ   DS    CL8            ENQ ELEMENT SAVEAREA
WRKOLDKY DS    1X             SAVE THE PROTECT KEY
WRKRESV  DS    3X             NOT USED.
WRKECB   DS    1F             ECB FOR ENQ RESOURCE WAIT        @YM07115
         ORG   WRKREGSV       BACK TO TOP OF WORKAREA
WRKENQPR DS    1F             PREFIX FOR ECB ADDRESS           @YM07115
WRKENQWK DS    0F             ENQ PARM LIST START
WRKENQFG DS    X              ENQ FLAGS (END OF LIST)
WRKENQTP DS    2X             ENQ TYPE INDICATOR
WRKENQRC DS    X              ENQ R14 CODE
         ORG   WRKREGSV       BACK TO TOP OF WORKAREA         @ZA07137
WRKDEQPR DS    1F             PREFIX FOR TCB ADDR             @ZA07137
WRKDEQWK DS    0F             START OF DEQ PARM LIST          @ZA07137
         ORG
         ORG   WRKREGSV                                       @ZA06226
WRKFREE DS    3F             FREEMAIN PARM LIST               @ZA06226
        ORG
WRKNQRNM DS    CL8                           RNAME GOES HERE  @ZA07137
S9GFLGS  DS    0F -                          SVC 97 FLAGS     @ZA07137
WRKFLGS1 DS    X  -                          1ST FLAG BYTE    @ZA07137
WRKPSEUD EQU   X'80'  -                      SVC97 IS PSEUDO  @ZA07137
*                                            BREAKPOINT       @ZA07137
WRKSVRBS DS    3X -                          PRIOR SVRB ADDR   @ZA07138
*                             FROM ECBPP IN TCOMTAB            @ZA09259
*                                                              @ZA10462
WRKTCBSA DS    1F                     TCB REG SAVE             @ZA31527
WRKLEN   EQU   *-WRKSTART     LENGTH OF THE SAVE AREA
         EJECT
         IKJEGS9G MF=D
         EJECT
         BRKELEM
IGC0009G CSECT
BACKUP1  DC    Y(BRKINST-BRKELEM)   VALUE TO BACKUP THE IC.
BACKUP2  DC    Y(BRKINST-BRKELEM+6)  VALUE TO BACKUP THE IC
         EJECT
IOVCON   DC    V(IKJEGIO)            ADDR OF MSG WRITER        @ZA04126
STAEVCON DC    V(IKJEGSTA)           ADDR OF ESTAE PROCESSOR   @ZA04126
         IKJTCB
S        EQU   TCBNTC-TCB     LAST ATTACHED SISTER TCB
M        EQU   TCBOTC-TCB     MOTHER TCB
D        EQU   TCBLTC-TCB     LAST ATTACHED DAUGHTER TCB
         EJECT
         TCOMTAB
         IKJTPL
         EJECT
         IKJRB
         EJECT
         CVT   DSECT=YES
         EJECT
         IHASCVT
         IEZJSCB
         IKJPSCB
         EJECT
         IKJECT
         EJECT
         IHAPSA
         EJECT
         IHASDWA
         EJECT
         IHAASCB
         EJECT
         IHAASXB
         EJECT
        IKJEFLWA
         EJECT
         SPACE 5
         IKJEGSVQ
         EJECT
         IKJEGSVB
          EJECT
IGC0009G CSECT
X40      DC    X'40'     FLAG FOR BALR LINK REG        @ZA02953
X80      DC    X'80'     FLAG FOR BAL  LINK REG        @ZA02953
         DS    0F
FOUR     DC    F'4'
FIVEHUND DC    H'500'
PATCHSP  DC    100C'Z'         PATCH AREA.
         END   IGC0009G
