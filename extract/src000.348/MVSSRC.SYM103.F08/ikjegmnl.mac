NL     TITLE 'IKJEGMNL - TSO TEST - MAINLINE MONITOR'
         COPY  IKJEGSIO
IKJEGMNL CSECT
         EXTRN IKJEGMMT
         EXTRN IKJEGSTA
         EJECT
*A596500-598500                                                @YM00583
*C640000                                                       @YM04132
*C215100-215300                                                @YM07109
*A76500,171600,171800,640100-640400                            @YM07115
*C7650002,64030002                                             @ZA02701
*     MOVE TOO MANY BYTES                                      @ZA20612
*C919500                                                       @Y30NQKK
***********************************************************************
*
* STATUS --
*    CHANGE LEVEL 00, VERSION NO. 03, VS2 RELEASE 3
*
* FUNCTION --
*    THIS MODULE RECEIVES CONTROL FROM THE INITIALIZATION MODULE
*    (IKJEGINT) OF THE TEST DEBUGGING PACKAGE OF TSO AS THE RESULT
*    OF AN XCTL.IT FINISHES INITIALIZATION AND IS THEREAFTER RE-
*    SPONSIBLE FOR THE ACQUISITION OF TEST COMMANDS FROM THE TER-
*    MINAL AND THE ROUTING OF CONTROL TO ONE OR ANOTHER OF THE VAR-
*    IOUS TEST COMMAND PROCESSORS OR TO THE PROGRAM BEING TESTED,
*    ACCORDING TO THE USER'S WISHES.
*
* ENTRY POINTS --
*    IKJEGMNL
*
* INPUT  --
*    TEST COMMUNICATION TABLE (TCOMTAB) POINTER IN GPR 9.
*
* OUTPUT --
*    NONE
*
* EXTERNAL REFERENCES --
*         IKJEGIO  FOR TERMINAL I/O (VIA IKJEGSIO MACRO)
*         IKJSCAN  TO SCAN THE SUBCOMMAND INPUT BUFFER
*         IKJDAIR  TO UNALLOCATE DATASETS ALLOCATED BY TEST OR THE PP
*         IKJEGSTA  IS MAINLINE'S ESTAE EXIT ROUTINE
*         IKJEGATN  IS MAINLINE'S ATTENTION EXIT ROUTINE
*         IKJEFT04  IS BOTH THE TMP'S AND MAINLINES' STAI EXIT ROUTINE
*
* EXITS, NORMAL --
*         LINK TO COMMAND PROCESSING PROGRAM
*         RETURN TO TMP ('END' OR 'RUN'),RETURN CODE=0
*
* EXITS, ERROR --
*         NONE
*
* TABLES/WORKAREAS --
*    TCOMTAB  POINTED AT BY REGISTER 9, IS THE COMMUNICATIONS TABLE FOR
*    THE TEST PROCESSOR
*
*    TPL  POINTED TO BY REGISTER 10 IS THE TEST PARAMETER LIST
*    THE TPL WAS PASSED TO INITIALIZATION BY THE TMP
*
*    WORKAREA POINTER IN TCOMTAB IS THE MAIN WORKAREA FOR MAINLINE.
*
* ATTRIBUTES --
*    RE-ENTRANT
*    REFRESHABLE
*
* CHARACTER CODE DEPENDENCY --
*    NONE
*
* NOTES --
*    REGISTER CONVENTIONS FOR MAINLINE ARE AS FOLLOWS
*    REG 9  TCOMTAB POINTER
*    REG 10  POSSIBLE SECOND BASE REGISTER
*    REG 11  ONLY USED FOR LINK REGISTER
*    REG 12 IS THE BASE REGISTER
*    REGISTER 0,1,14,15 ARE USED BY MOST SUBROUTINES BAL-ED TO.
*
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        GENERAL REGISTER EQUATES.                                    *
*                                                                     *
***********************************************************************
R0       EQU   0              REGISTER 0
R1       EQU   1              REGISTER 1
R2       EQU   2              REGISTER 2
R3       EQU   3              REGISTER 3
R4       EQU   4              REGISTER 4
R5       EQU   5              REGISTER 5
R6       EQU   6              REGISTER 6
R7       EQU   7              REGISTER 7
R8       EQU   8              REGISTER 8
R9       EQU   9              REGISTER 9
R10      EQU   10             REGISTER 10
R11      EQU   11             REGISTER 11
R12      EQU   12             REGISTER 12
R13      EQU   13             REGISTER 13
R14      EQU   14             REGISTER 14
R15      EQU   15             REGISTER 15
         EJECT
         SAVE  (14,12),,*     SAVE ENTRY REGISTERS.
         LR    R12,R15        SET-UP BASE REGISTER ADDRESS.
         LR    R9,R1           SAVE ADDRESS OF TCOMTAB.
         USING IKJEGMNL,R12   ESTABLISH ADDRESSABILITY FOR THIS
*                             CSECT
         LA    R10,4095(R12)  ADDRESS FOR SECOND BASE REG
         USING IKJEGMNL+4095,R10 ESTABLISH ADDRESSABILTY
         USING TCOMTAB,R9     ESTABLISH ADDRESSABILITY TO TCOMTAB
         L     R15,REGSAVE1   ADDRESS OF SAVE AREA.
         ST    R13,X4(,R15)   CROSS-CHAIN CURRENT AND PREVIOUS
         ST    R15,X8(,R13)   SAVE AREAS.
         LR    R13,R15        SET-UP SAVE AREA ADDRESS.
         EJECT
***********************************************************************
*                                                                     *
*        COMPLETE INITIALIZATION PHASE --                             *
*                                                                     *
*        1 --  STOP ALL SUBTASKS OPERATING UNDER THE TMP/TEST TCB     *
*        2 --  AUTOMATICALLY QUALIFY TO THE MODULE CURRENTLY          *
*              OPERATING UNDER TEST.                                  *
*        3 --  ADD A TERMINAL ELEMENT TO THE INPUT STACK FOR A        *
*              TASK THAT WAS TAKEN OVER FROM THE TMP.                 *
*                                                                     *
***********************************************************************
         SPACE 2
         SPACE 2
         BAL   R11,STOPALL    INSURE ALL TASKS ARE STOPED INIT @ZA02701
         SPACE 2
         BAL   R11,QUAL       AUTOMATIC QUALIFY FIRST TIME IN.
         SPACE 2
         BAL   R11,ADD        ADD AN ELEM TO THE STACK, IF NEEDED.
         EJECT
***********************************************************************
*                                                                     *
*        ESTABLISH AN ATTENTION EXIT FOR THE TEST COMMAND.            *
*        THE OUTPUT BUFFER AND LENGTH POINT TO THE TEST MODE          *
*        MESSAGE WHICH IS A PART OF THE IKJEGATN MODULE.  THE         *
*        INPUT BUFFER ADDRESS POINTS TO THE STANDARD TEST OUTPUT      *
*        BUFFER BUT SPECIFIES A LENGTH OF ZERO.  THIS ENABLES A       *
*        PUTGET WITH THE TERM OPTION TO GET THE LINE OF INPUT         *
*        DURING ATTENTION PROCESSING.  THE USER ADDRESS IS THE        *
*        ADDRESS OF TCOMTAB.                                          *
*                                                                     *
***********************************************************************
         SPACE 2
         L     R2,OUTBUF      DUMMY INPUT BUFFER ADDRESS.
         L     R3,MNLEGATN   ADDRESS OF ATTENTION EXIT ROUTINE.
         MVC   TSTSTAX(MNLSTAXL),MNLSTAX INITIALIZE STAX
*                             PARAMETER LIST.
         STAX  (R3),IBUF=((R2),),USADDR=(R9),REPLACE=NO,               X
               MF=(E,TSTSTAX) ACTIVATE TESTS ATTENTION EXIT.
         LTR   R15,R15        TEST FOR SUCCESSFUL COMPLETION.
         BZ    MNLISTAE       IF IF RETURN CODE = 0, BRANCH TO
*                             ESTABLISH STAE EXIT ROUTINE.
         LA    R1,RESTART1    SET THE RESTART ADDRESS.
         ST    R1,TSTRSTRT    DITTO
         BR    R1             GO TO RESTART1 AND CLEANUP.
         EJECT
***********************************************************************
*                                                                     *
*        ESTABLISH AN ABNORMAL END EXIT FOR THE TEST COMMAND.         *
*        IKJEGSTA PERFORMS ALL EXIT PROCESSING FOR THE TEST           *
*        COMMAND.  FOR ABENDS OCCURRING IN THE MAINLINE PORTION       *
*        OF TEST, ALL RETRYS WILL BE ATTEMPTED THROUGH IKJEGSTR       *
*        IN THIS MODULE.                                              *
*                                                                     *
***********************************************************************
         SPACE 2
MNLISTAE EQU   *
         XC    MNLSVCPL,MNLSVCPL CLEAR SVC PARAMETER LIST
         L     R15,TSTSTAE   R15=ADDR OF ESTAE EXIT ROUTINE
         ESTAE (R15),CT,PARAM=MNLSPL,XCTL=NO,RECORD=YES,               *
               MF=(E,MNLSVCPL)  ESTABLISH ABEND EXIT
         LTR   R15,R15        TEST FOR SUCCESSFUL COMPLETION.
         BZ    SCREQ1        SUCCESSFUL,CONTINUE
         LA    R1,SVC60NO    R1=ADDR OF SVC NUMBER
         BAL   R14,IOSVC     OUTPUT SVC ERROR MESSAGE
         B     ENDITERR      TERMINATE
         EJECT
***********************************************************************
*                                                                     *
*        THE FOLLOWING BEGINS THE MAIN PROCESS LOOP WHICH             *
*        INTERFACES BETWEEN THE TERMINAL, THE SUBCOMMAND              *
*        PROCESSOR, AND RETURN CODE CHECK UPON RETURN FROM A          *
*        SUBCOMMAND PROCESSOR.                                        *
*                                                                     *
*        1 --  FREE THE CURRENT INPUT BUFFER AND PDL, IF THEY         *
*              EXIST.                                                 *
*        2 --  DETERMINE IF A SUBCOMMAND IS IN CORE AND READY TO      *
*              BE PROCESSED.  INBUF WILL HAVE BEEN INITIALIZED        *
*              BY IKJEGATN.                                           *
*        3 --  DETERMINE IF A SUBCOMMAND IS TO BE PROCESSED FROM      *
*              A SUBCOMMAND CHAIN ENTERED ON AN AT SUBCOMMAND.        *
*              SUBCHAIN WILL HAVE BEEN INITIALIZED BY IKJEGCTL        *
*              WHEN A BREAKPOINT IS HIT.  WHEN SUBCHAIN IS NOT        *
*              ZERO, JUSTGET(CLOSED SUBROUTINE) IS CALLED TO RETRIEVE *
*              ONE SUBCOMMAND AT A TIME FROM THE CHAIN.               *
*        4 --  WHEN NEITHER OF THE ABOVE IS TRUE, INVOKE IKJEGSIO     *
*              TO PUT THE MODE MESSAGE AND TO GET A SUBCOMMAND.       *
*                                                                     *
***********************************************************************
         SPACE 2
SCREQ1   EQU   *
         BAL   R11,FREINBUF   FREE INBUF AND PDL IF ANY.
         SPACE 2
SCREQ    EQU   *
         NC    INBUF(L'INBUF),INBUF Q.IS A COMMAND IN STORAGE.
         BNZ   SCAN           YES,LINK TO COMMAND SCAN ROUTINE.
         SPACE 2
         NC    SUBCHAIN(L'SUBCHAIN),SUBCHAIN COMMAND CHAIN IN PROGRES
         BZ    SCREQ2        NO,GO ISSUE 'TEST' MODE MESSAGE
         L     R15,MNLEGMN1  YES, R15=ADDR OF PROCESSOR
         BALR  R14,R15       GO GET NEXT SUBCOMMAND
         LTR   R15,R15       SUCCESSFUL COMPLETION?
         BZ    SCREQ         YES, GO PROCESS SUBCOMMAND
* ISSUE 'GETMAIN SVC ERROR' MESSAGE
         LA    R1,SVC10NO    NO,GETMAIN ERROR OCCURRED
*                            R1=ADDR OF SVC NUMBER
         BAL   R14,IOSVC     GO ISSUE SVC ERROR MESSAGE
         B     ENDITERR      IGNORE RC'S AND TERMINATE
         SPACE 2
SCREQ2   EQU   *
         XC    TSTIOPRM(L'TSTIOPRM),TSTIOPRM  CLEAR IO PARM LIST
         TM    TSTFLGS2,TSTLDF WAS LDF LAST IN CONTROL?
         BZ    SCREQ2A       NO,BYPASS SPECIAL HANDLING
         OI    TSTFLGS1,TSTFIRST TELL IKJEGSTA TO RETURN CONTROL
         OI    TSTFLGS4,TSTESTAE TELL IKJEGSIO TO NOT SET ESTAE
SCREQ2A  EQU   *
* ISSUE 'TEST' MODE MESSAGE AND GET INPUT
         IKJEGSIO PTGT,FIRST=M0071,ID=MNL22,MF=(E,TSTIOPRM)
         NI    TSTFLGS4,XFF-TSTESTAE RESET NO ESTAE BIT
         NI    TSTFLGS1,XFF-TSTFIRST RESET IKJEGSTA RETURN BIT
         NI    TSTFLGS2,XFF-TSTLDF RESET LDF BIT
         LTR   R15,R15       TEST FOR ZERO RETURN FROM IO
         BZ    GOADD         NORMAL RETURN CONTINUE
         C     R15,ATTNCODE  IS ATTENTION IN EFFECT
         BE    ATTNPROC      YES GO PROCESS IT
         B     ENDITERR      CANNOT BE SURE OF VALIDITY OF
*                            'TEST' MESSAGE SO TERMINATE
         SPACE 2
GOADD    EQU   *
         BAL   R11,ADD        ADD A TERM ELEM TO THE STACK
         EJECT
***********************************************************************
*                                                                     *
*        PERFORM A CURSORY EXAMINATION OF THE INPUT BUFFER BY         *
*        FIRST CHECKING FOR A NULL LINE.  WHEN A NULL LINE WAS        *
*        ENTERED, IGNORE AND BRANCH TO FREE INPUT BUFFER.  FOR        *
*        OTHER THAN A NULL LINE, CHECK FOR AN ASSIGNMENT              *
*        SUBCOMMAND (AN EQUAL SIGN FOLLOWING THE SUBCOMMAND NAME)     *
*        IF AN ASSIGNMENT SUBCOMMAND IS FOUND, BLANK OUT THE          *
*        EQUAL SIGN AND SET-UP TO INVOKE IKJEGPCH.  OTHERWISE         *
*        PROCESSING WILL CONTINUE BY BRANCHING TO INVOKE IKJSCAN.     *
*                                                                     *
*        R2 -- CONSTANT 4 FOR COMPARISONS, ADDRESS OF SUBCOMMAND      *
*              NAME.                                                  *
*        R3 -- COUNTER OF NUMBER OF BYTES IN BUFFER, LENGTH OF        *
*              SUBCOMMAND NAME.                                       *
*        R4 -- POINTER TO CURRENT BYTE IN BUFFER.                     *
*        R5 -- ADDRESS OF LOAD MODULE NAME FOR ASSIGN.                *
*                                                                     *
***********************************************************************
         SPACE 2
SCAN     EQU   *
         L     R4,INBUF       ADDRESS OF INPUT BUFFER.
         LH    R3,X0(,R4)     LENGTH OF INPUT BUFFER.
         LA    R2,X4          CONSTANT OF FOUR.
         CR    R2,R3          CHECK IF THIS IS A NULL LINE.
         BE    SCREQ1         IF A NULL LINE, BRANCH TO FREE
*                             INPUT BUFFER.
LOOP0    EQU   *
         CLI   X4(R4),MNLBLANK CHECK FOR LEADING BLANK
         BNE   LOOP           IF NOT A LEADING BLANK, BRANCH TO
*                             CHECK FOR A ASSIGN SUBCOMMAND.
         LA    R4,X1(,R4)     INCREMENT BUFFER POINTER BY 1.
         BCT   R3,LOOP0       CHECK IF ANOTHER LEADING BLANK.
         B     SCREQ1         IF ALL BLANKS, BRANCH TO REQUEST A
*                             NEW LINE.
LOOP     EQU   *
         CLI   X4(R4),MNLBLANK CHECK FOR BLANK AS A DELIMITER.
         BE    MNLXX000       IF A BLANK ENCOUNTERED, NOT A
*                             ASSIGN SUBCOMMAND.
         CLI   X4(R4),MNLLPARN CHECK FOR A LEFT PARENTHESIS.
         BE    MNLXX000       IF LEFT PARENTHESIS ENCOUNTERED,
*                             NOT A ASSIGN SUBCOMMAND.
         CLI   X4(R4),MNLEQUAL CHECK FOR AN EQUAL SIGN.
         BE    SCPCH          IF AN EQUAL SIGN FOUND, BRANCH TO
*                             REMOVE.
         LA    R4,X1(,R4)     INCREMENT BUFFER POINTER BY 1.
         BCT   R3,LOOP        DECREMENT COUNTER, CONTINUE SEARCH.
         B     MNLXX000       NO SIGNIFICANT CHARACTERS FOUND,
*                             BRANCH TO INVOKE IKJSCAN.
SCPCH    EQU   *
         MVI   X4(R4),MNLBLANK BLANK OUT EQUAL SIGN FOR PARSE.
         L     R2,MNLEGPCH    ADDRESS OF ASSIGN ENTRY IN
*                             SUBCOMMAND TABLE.
         SR    R3,R3          ZERO LENGTH REGISTER TO INSURE
         IC    R3,SCDNAME(,R2) VALIDITY OF ONE BYTE LENGTH.
         LA    R5,SCDPCHLD(,R2) ADDRESS OF LOAD MODULE NAME FOR
*                             ASSIGN SUBCOMMAND.
         LA    R2,SCDSCPPN(,R2) SET REGISTER TO POINT TO COMMON
*                             SUBCOMMAND NAME.
         B     MNLXX170       BRANCH TO INVOKE ASSIGN SUBCOMMAND.
         EJECT
***********************************************************************
*                                                                     *
*        THE INPUT BUFFER CONTAINS A LINE OF INPUT WHICH IS NOT A     *
*        NULL LINE, A BLANK LINE, OR AN ASSIGNMENT SUBCOMMAND.        *
*        INVOKE THE COMMAND SCAN SERVICE ROUTINE (IKJSCAN) TO         *
*        SCAN THE INPUT BUFFER FOR THE SUBCOMMAND NAME.  UPON         *
*        RETURN FROM IKJSCAN, VALIDITY CHECK THE SPELLING OF THE      *
*        SUBCOMMAND ENTERED BY THE USER WITH ALL THOSE NAMES THAT     *
*        EXIST IN THE IBM TABLE AND THE USER TABLE.  WHEN A MATCH     *
*        IS FOUND, INVOKE THE MODULE INDICATED IN THE CURRENT         *
*        TABLE ENTRY.                                                 *
*                                                                     *
*        R2 -- FLAG WORD FOR IKJSCAN, ADDRESS OF SUBCOMMAND NAME      *
*              ENTERED BY USER.                                       *
*        R3 -- IKJSCAN OUTPUT AREA, LENGTH OF SUBCOMMAND NAME         *
*              ENTERED BY USER.                                       *
*        R4 -- ADDRESS OF INPUT BUFFER, LENGTH OF SUBCOMMAND NAME     *
*              OR ABBREVIATION IN CURRENT TABLE ENTRY.                *
*        R5 -- ADDRESS OF SUBCOMMAND NAME OR ABBREVIATION IN          *
*              CURRENT TABLE ENTRY, ADDRESS OF LOAD MODULE NAME.      *
*                                                                     *
***********************************************************************
         SPACE 2
MNLXX000 EQU   *
         L     R4,INBUF       ADDRESS OF CURRENT INPUT BUFFER.
         MVC   MNLSCPRM(L'TSTUPT+L'TSTECT+L'TSTCPECB),PARMLIST
*                             INITIALIZE POINTERS TO UPT, ECT AND
*                             ECB FOR IKJSCAN.
         LA    R2,MNLCSFLG    ADDRESS OF FLAG WORD FOR IKJSCAN.
         XC    MNLCSFLG(L'MNLCSFLG),MNLCSFLG ZERO FLAG WORD AND
         OI    MNLCSFLG,MNLNOCHK INDICATE NO SYNTAX CHECKING.
         LA    R3,MNLCSOA     ADDRESS OF TWO-WORD OUTPUT AREA.
         LINK  EP=IKJSCAN,PARAM=(,,,(R2),(R3),(R4)),ERRET=SCANERR,     X
               MF=(E,MNLSCPRM) INVOKE COMMAND SCAN ROUTINE.
         LTR   R15,R15        TEST FOR ZERO RETURN CODE.
         BNZ   TMPRTURN       IF NOT ZERO, BRANCH TO RETURN.
         NI    TSTFLGS3,XFF-NOPARMS RESET OPERAND FLAG.
         USING CSOA,R3        ESTABLISH ADDRESSABILITY TO CSOA.
         TM    CSOAFLG,CSOAVWP DETERMINE IF OPERANDS WERE ENTERED
         BO    MNLXX010       OPERANDS ENTERED, BRANCH TO
*                             VALIDATE SUBCOMMAND NAME.
         TM    CSOAFLG,CSOAVNP  TEST FOR VALID COMMAND.        @YM07115
         BZ    NOSHOW1        COMMAND INVALID MSG.             @YM07115
         OI    TSTFLGS3,NOPARMS INDICATE NO OPERANDS ENTERED.
MNLXX010 EQU   *
         L     R2,CSOACNM     ADDRESS OF SUBCOMMAND NAME.
         LH    R3,CSOALNM     LENGTH OF COMMAND NAME.
         DROP  R3
         SR    R4,R4          INITIALIZE REGISTER TO CONTAIN
*                             SUBCOMMAND NAME LENGTH.
         STH   R4,MNLCFLGS    ZERO FLAG BYTES.
         L     R5,MNLIBMTB    ADDRESS OF STANDARD SUBCOMMAND
*                             TABLE.
MNLXX030 EQU   *
         IC    R4,X0(,R5)     LENGTH OF CURRENT ENTRY IN
*                             SUBCOMMAND NAME TABLE.
         CR    R3,R4          DETERMINE IF THE LENGTH OF THE
*                             CURRENT TABLE ENTRY EQUALS THE
*                             LENGTH OF THE SUBCOMMAND ENTERED.
         BE    MNLXX090       IF LENGTHS ARE EQUAL, BRANCH TO
*                             COMPARE SUBCOMMAND NAMES.
         CLI   X0(R5),SCDTBEND CHECK FOR END OF TABLE.
         BE    MNLXX130       WHEN END OF TABLE HAS BEEN REACHED,
*                             BRANCH TO DETERMINE IF BOTH TABLES
*                             HAVE BEEN SEARCHED.
         XI    MNLCFLG1,MNLABBRV INDICATE A TEST FOR HALF OF A
*                             TABLE ENTRY.
         BNZ   MNLXX070       WHEN ABBREVIATION FLAG IS OFF,
*                             BRANCH TO COMPUTE A POINTER TO THE
*                             ABBREVIATION.
         LA    R5,SCDNXTNM(R4,R5) IF AN ABBREVIATION JUST USED,
*                             COMPUTE POINTER TO NEXT NAME IN
*                             TABLE.
         B     MNLXX030       BRANCH TO CHECK SUBCOMMAND AGAINST
*                             NEXT TABLE ENTRY.
MNLXX070 EQU   *
         LA    R5,SCDNXTAB(R4,R5) COMPUTE POINTER TO ABBREVIATION
*                             FOR CURRENT ENTRY.
         B     MNLXX030       BRANCH TO CHECK SUBCOMMAND NAME
*                             AGAINST ABBREVIATION.
MNLXX090 EQU   *
         BCTR  R4,X0          REDUCE LENGTH FOR COMPARISON.
         EX    R4,MNLCMDCK    DETERMINE IF SUBCOMMAND NAME
*                             ENTERED BY USER IS THE SAME AS THE
*                             CURRENT TABLE ENTRY.
         BE    MNLXX150       WHEN A MATCH IS FOUND, BRANCH TO
*                             INVOKE SUBCOMMAND PROCESSOR.
         XI    MNLCFLG1,MNLABBRV INDICATE A TEST FOR HALF OF A
*                             TABLE ENTRY.
         BNZ   MNLXX110       IF ABBREVIATION FLAG WAS OFF,
*                             BRANCH TO COMPUTE POINTER TO THE
*                             ABBREVIATION.
         LA    R5,SCDNXTNM+X1(R4,R5) OTHERWISE, COMPUTE A POINTER
*                             TO THE SUBCOMMAND NAME IN THE NEXT
*                             TABLE ENTRY.
         B     MNLXX030       BRANCH TO COMPARE LENGTH AGAINST
*                             CURRENT TABLE ENTRY.
MNLXX110 EQU   *
         LA    R5,SCDNXTAB+X1(R4,R5) COMPUTE ADDRESS OF THE
*                             ABBREVIATION FOR THIS ENTRY.
         B     MNLXX030       BRANCH TO COMPARE LENGTH AGAINST
*                             CURRENT ABBREVIATION.
MNLXX130 EQU   *
         XI    MNLCFLG2,MNLUSERT INDICATE A TABLE HAS BEEN
*                             SEARCHED AND TEST FOR WHICH TABLE.
         BZ    NOSHOW1        WHEN BOTH THE IBM TABLE AND THE
*                             USER TABLE HAVE BEEN SEARCHED,
*                             BRANCH TO PUT THE INVALID SUBCOM-
*                             MAND MESSAGE.
         L     R5,MNLUSRTB    ADDRESS OF USER SUBCOMMAND TABLE.
         B     MNLXX030       BRANCH TO RESUME SEARCH USING THE
*                             NEW SUBCOMMAND NAME TABLE.
MNLXX150 EQU   *
         LA    R5,SCDNXTAB+X1(R4,R5) POSSIBLE POINTER TO LOAD
*                             MODULE NAME IF THIS IS AN
*                             ABBREVIATION.
         TM    MNLCFLG1,MNLABBRV DETERMINE IF THIS WAS AN
*                             ABBREVIATION.
         BO    MNLXX170       IF AN ABBREVIATION, BRANCH TO
*                             INVOKE SUBCOMMAND PROCESSOR.
         IC    R4,SCDABBR(,R5) GET ABBREVIATION LENGTH.
         LA    R5,SCDABBRL(R4,R5) COMPUTE ADDRESS TO LOAD MODULE
*                             NAME.
MNLXX170 EQU   *
         BCTR  R3,X0          REDUCE SUBCOMMAND NAME LENGTH BY 1.
         L     R1,TSTECT      ADDRESS OF ECT.
         USING ECT,R1         ESTABLISH ADDRESSABILITY TO ECT.
         MVI   ECTSCMD,MNLBLANK BLANK OUT PREVIOUS SUBCOMMAND
         MVC   ECTSCMD+X1(L'ECTSCMD-X1),ECTSCMD NAME IN ECT.
         EX    R3,MNLSCDMV    MOVE CURRENT SUBCOMMAND NAME TO ECT.
         L    R15,ECTSCMD+X4  R15= LAST HALF COMMAND           @YM07109
         L    R1,ECTSCMD      R1= FIRST HALF COMMAND           @YM07109
         TSEVENT PPMODE       RECORD SUBCOMMAND TIME STAMP     @YM07109
         DROP  R1
         XC    MNLLINKL(L'MNLLINKL),MNLLINKL ZERO PARAMETER LIST
*                             FOR LINK MACRO EXPANSION.
         NI    TSTFLGS1,XFF-TSTFIRST-RANGESW SET FLAGS TO '0'B.
         NI    TSTFLGS3,XFF-SYMMESG SET FLAG TO '0'B.
         NI    TSTFLGS4,XFF-TSTVALCK TURN OFF VALIDITY CHECK BIT
         OI    TSTFLGS3,TSTLINK INDICATE THAT LINK TO SUBCOMMAND
*                             IS IN PROCESS (INDICATOR TO STAE).
         STM   R14,R12,N12(R13) SAVE REGISTERS FOR STAE RETRY.
         MVC   TSTRTYCD,X8(R5) SET UP SUBCOMMAND ID FIELD.
         LINK  EPLOC=(R5),SF=(E,MNLLINKL),ERRET=SUBCERR
* INVOKE SUBCOMMAND PROCESSOR
         EJECT
BLOWSC   EQU   *
         NI    TSTFLGS3,XFF-TSTLINK  RESET LINK ABEND BIT
         XC    TSTRSTRT(X4),TSTRSTRT  INSURE RESTART ADDR ZEROED
         NI    TSTFLGS2,XFF-TSTXCTL  RESET XCTL ABEND BIT
         NI    TSTFLGS1,XFF-TSTBUILD RESET BUILD BRKPT SWITCH
         SPACE
*        RETURN CODE CHECK
         SPACE
         B     HERE(R15)       BRANCH ACCORDING TO RETURN CODE.
HERE     EQU   *
         B     CLEAN          RC=0,GET ANOTHER COMMAND.
         B     IKJEGCTL       RC=4,'GO',GO TO CTL SUBROUTINE.
         B     TMPRTURN       RC=8,'END',FOLD UP TENT.
         B     RUNRTURN       RC=12,'RUN',FOLD UP TENT,NO DETACH.
         B     ATTNPROC       RC=16,ATTENTION INT. PROCESSING.
         B     STAERTRN       RETURN FROM A S.C. WHICH ABENDED.
         B     ESTAERR       RC=24 PROCESS ESTAE ERROR
CLEAN    EQU   *
         TM    TSTFLGS4,TSTFLUSH   Q. IS THERE A NEED TO FLUSH.
         BNO   CLEAN1         NO.
STAERTRN EQU   *
         NI    TSTFLGS4,XFF-TSTFLUSH  INSURE RESET OF FLAG.
         BAL   R11,FLUSH      TCLEARQ AND MAYBE STACK FLUSH.
CLEAN1   EQU   *
         TM    TSTFLGS1,ENDSW HAS EITHER 'RUN' OR 'END' BEEN ENTERED
         BO    TMPRTURN       YES.FOLD.
         L     R1,ECBTMPA     GET ATTENTION ECB.
         TM    X0(R1),TESTATTN  DID IKJEGATN POST Q.Q.Q.
         BO    ATTNPROC       YES. PROCESS THE ATTENTION REQUEST.
         B     SCREQ1          GET ANOTHER COMMAND.
ESTAERR  EQU   *             RC=24 RETURNED FROM SOME MODULE
         SR    R15,R15       ZERO REG 15
         IC    R15,TSTESTRC  PUT ESTAE RC IN R15
* ISSUE 'ESTAE SVC ERROR' MESSAGE
         LA    R1,SVC60NO    R1=ADDR OF SVC NUMBER
         BAL   R14,IOSVC     PUT OUT SVC ERROR MESSAGE
         LTR   R15,R15       TEST FOR ZERO RETURN CODE
         BZ    CLEAN         ZERO FOUND CONTINUE PROCESSING
         C     R15,ATTNCODE  IS ATTEN IN EFFECT
         BE    ATTNPROC      YES. GO PROCESS IT
ESTAERR1 EQU   *
* ISSUE 'TEST ENDED DUE TO ERROR' MESSAGE
         LA    R1,MSG1       R1=ADDR OF MESSAGE NUMBERS
         BAL   R14,IOMSG     PUT OUT MESSAGE
         B     TMPRTURN      IGNORE RC'S AND TERMINATE
         EJECT
***********************************************************************
*                                                                     *
*        CORE CLEAN-UP FOLLOWING EXECUTION OF A SUBCOMMAND.           *
*                                                                     *
*        1 --  FREE LAST INPUT BUFFER, POINTED TO BY INBUF,           *
*              UNLESS AN ATTENTION INTERRUPT HAS OCCURRED.            *
*        2 --  FREE LAST PDL RETURNED BY PARSE.                       *
*        3 --  FREE CHAIN OF SYMBOL INFORMATION BLOCKS IF SUCH        *
*              A CHAIN EXISTS.                                        *
*                                                                     *
***********************************************************************
         SPACE 2
FREINBUF EQU   *
         L     R1,ECBTMPA     POINT TO ATTN ECB
         TM    X0(R1),TESTATTN  HAS ATTENTION BEEN HIT Q.Q.Q.
         BO    PDLFREE        YES. DON'T FREE INPUT BUFFER.
         L     R1,INBUF       R1=ADDR OF BUFFER
         LTR   R1,R1          Q.IS INBUF ZERO.
         BZ    PDLFREE        YES, CHECK ON TSTANSPL.
         LH    R0,X0(,R1)     R0=LENGTH OF BUFFER FOR FREEMAIN
         XC    INBUF(L'INBUF),INBUF CLEAR INPUT BUFFER POINTER.
         FREEMAIN RC,LV=(0),A=(1),SP=1 FREE THE BUFFER.
         LTR   R15,R15       WAS FREEMAIN SUCCESSFUL
         BZ    PDLFREE       YES CONTINUE
* ISSUE 'FREEMAIN SVC ERROR' MESSAGE
         LA    R1,SVC120NO   R1=ADDR OF SVC NUMBER
         BAL   R14,IOSVC     PUT OUT SVC ERROR MESSAGE
* IGNORE RETURN CODES AND CONTINUE
         SPACE 2
PDLFREE  EQU   *
         IKJRLSA TSTANSPL     RELEASE THE PDL
         XC    TSTANSPL(L'TSTANSPL),TSTANSPL ZERO BEFORE FREEING
         SPACE 2
         L     R14,SICHAIN    ADDR OF HEAD OF CHAIN
         XC    SICHAIN(L'SICHAIN),SICHAIN ZERO IN CASE OF ABEND
LOOP4    EQU   *
         LTR   R1,R14         Q. END OF CHAIN.
         BCR   Z,R11          RETURN TO CALLER
         L     R14,SIBLINK(,R14) R14=ADDR OF NEXT SIB,IF ANY
         L     R0,MNLSIBLN    SIB CORE SUBPOOL AND LENGTH
         FREEMAIN  RC,LV=(0),A=(1),SP=1  FREE THIS SIB
         LTR   R15,R15       WAS FREEMAIN SUCCESSFUL
         BZ    LOOP4         YES CONTINUE
* ISSUE 'FREEMAIN SVC ERROR' MESSAGE
         LA    R1,SVC120NO   R1=ADDR OF SVC NUMBER
         BAL   R14,IOSVC     PUT OUT SVC ERROR MESSAGE
* IGNORE RETURN CODES AND CONTINUE
         B     LOOP4          LOOP ------
         EJECT
NOSHOW1  EQU   *
*        LINE RECEIVED DID NOT HAVE A VALID VERB AS THE FIRST FIELD.
*        WRITE A DIAGNOSTIC MESSAGE TO THE TERMINAL AND GET ANOTHER
*        LINE.
         SPACE
* ISSUE 'INVALID COMMAND' MESSAGE
* ISSUE 'COMMAND NOT SUPPORTED' MESSAGE
         LA    R1,MSG2       R1=ADDR OF MESSAGE NUMBERS
         BAL   R14,IOMSG     PUT OUT MESSAGES
         BAL   R11,IORETCK   GO TEST IO RETURN CODES
         B     SCREQ1        GET ANOTHER COMMAND.
         EJECT
ATTNPROC EQU   *
         TM    TSTFLGS1,ENDSW HAS EITHER 'RUN' OR 'END' BEEN ENTERED.
         BO    TMPRTURN       YES.FOLD.
         L     R1,ECBTMPA     R1=ATTENTION ECB ADDR.
         TM    X0(R1),TESTATTN Q.DID TEST POST ECB (X'48').
         BNO   ENDIT1         NO,FOLD UP TENT.
         XC    X0(X4,R1),X0(R1)  ZERO ATTENTION ECB.
         BAL   R11,PDLFREE    FREE PDL BUT NOT INPUT BUFFER.
         NI    TSTFLGS4,XFF-TSTFLUSH TURN OFF FLUSH SWITCH.
         B     SCREQ          PROCESS COMMAND RECEIVED.
         EJECT
IORETCK  EQU   *             IO RETURN CODE CHECK ROUTINE
         B     IORC0(R15)    USE RC AGAINST BRANCH TABLE
IORC0    EQU   *
         B     X0(R11)       RC=0 NORMAL RETURN CONTINUE
         B     X0(R11)       RC=4 IO ERROR TRY TO CONTINUE
         B     ESTAERR1      RC=8 SHOULD NEVER HAPPEN
         B     X0(R11)       RC=12 IO ERROR TRY TO CONTINUE
         B     ATTNPROC      RC=16 ATTN. GO PROCESS IT
         B     X0(R11)       RC=20 RETRY ENTERED TRY TO CONTINUE
* RC=24 ESTAE ERROR
         SR    R15,R15       ZERO REG 15
         IC    R15,TSTESTRC  PUT ESTAE RETURN CODE IN R15
* ISSUE 'ESTAE SVC ERROR' MESSAGE
         LA    R1,SVC10NO    R1=ADDR OF SVC NUMBER
         BAL   R14,IOSVC     PUT OUT SVC ERROR MESSAGE
         LTR   R15,R15       TEST FOR SUCCESSFUL COMPLETION
         BZ    X0(R11)       IO SUCCESSFUL.RETURN
         C     R15,ATTNCODE  IS ATTENTION IN EFFECT
         BE    ATTNPROC      YES PROCESS IT
         B     ESTAERR1      MESSAGE STILL BAD TERMINATE
         EJECT
***********************************************************************
*                                                                     *
*        USER PROGRAM CONTROL AND MONITORING SECTION.                 *
*                                                                     *
*        THIS SECTION OF CODE IS GIVEN CONTROL WHENEVER THE GO        *
*        SUBCOMMAND PROCESSOR HAS COMPLETED PROCESSING NORMALLY.      *
*        THE FUNCTION OF THIS SECTION OF CODE IS TO MAKE THE          *
*        USER PROGRAM DISPATCHABLE BY POSTING AN ECB AND TO PLACE     *
*        TEST IN THE WAIT STATE, WAITING ON ANY ONE OF A NUMBER       *
*        OF EVENTS.                                                   *
*                                                                     *
*        TO MAKE THE USER PROGRAM DISPATCHABLE AFTER EXECUTION OF     *
*        THE GO SUBCOMMAND PROCESSOR, THE FOLLOWING OCCUR --          *
*                                                                     *
*        1 --  THE INPUT BUFFER CONTAINING THE GO SUBCOMMAND IS       *
*               FREED.                                                *
*                                                                     *
*        2 --  TEST'S DISPATCHABILITY ECB IS ZEROED.                  *
*                                                                     *
*        3 --  A CHECK IS MADE TO DETERMINE IF A PSEUDO BREAK-        *
*              POINT IS TO BE DISPATCHED. IF SO, IT IS GIVEN          *
*              PRIORITY.                                              *
*                                                                     *
*        4 --  FOR OTHER THAN PSEUDO BREAKPOINTS, PROCESSING IS       *
*              RETURNED TO EITHER A SUBCOMMAND PROCESSOR OR TO        *
*              THE TMP IF AN ATTENTION INTERRUPT HAS OCCURRED         *
*              SINCE RETURN FROM GO.                                  *
*                                                                     *
*        5 --  THE TERMINAL IS REMOVED FROM THE INPUT STACK           *
*              AND THE USER PROGRAM IS POSTED.                        *
*                                                                     *
*        6 --  THE USER PROGRAM IS SET DISPATCHABLE AND TEST GOES     *
*              INTO THE WAIT STATE.                                   *
*                                                                     *
***********************************************************************
         SPACE 2
IKJEGCTL EQU   *
         BAL   R11,FREINBUF   CLEAN UP AFTER 'GO'.
         SPACE 2
         L     R2,ECBTST      R2=TEST DISPATCHABILITY ECB ADDR.
         XC    X0(X4,R2),X0(R2)  CLEAR TESTS ECB.
         SPACE 2
         OC    TSTGOPSW(L'TSTGOPSW),TSTGOPSW PSEUDO BREAK NEXT.
         BNZ   POST           YES. PSEUDO BREAK GETS PRIORITY.
         SPACE 2
         L     R1,ECBTMPA     POINT TO ATTN ECB
         TM    X0(R1),TESTATTN  HAS ATTENTION BEEN HIT Q.Q.Q.
         BO    ATTNPROC       PROCESS THE ATTENTION.
         SPACE 2
POST     EQU   *
         BAL   R11,REMOVE     REMOVE THE TERM ELEM OFF THE STACK
         POST  ECBPP          MAKE PROGRAM BEING TESTED DISPATCHABLE.
         SPACE 2
         SPACE 2
WAIT     EQU   *
         BAL   R11,START      START THE TASK OR TASKS.
         WAIT  ECBLIST=ECBLIST  TEST CREAKS TO A HALT.
         EJECT
***********************************************************************
*                                                                     *
*        DETERMINE WHICH EVENT OCCURRED TO BRING TEST OUT OF THE      *
*        WAIT STATE.                                                  *
*                                                                     *
*        1 --  IF THE STOP/MODIFY ECB IS POSTED, BRANCH TO CLEAN-     *
*              UP AND RETURN TO THE TMP.                              *
*                                                                     *
*        2 --  IF THE TEST DISPATCHABILITY ECB IS POSTED, PROCESS     *
*              FOR EITHER SVC 061 OR SVC 097.                         *
*                                                                     *
*        3 --  OTHERWISE, BRANCH TO CONTINUE CHECK FOR POSTED ECB     *
*                                                                     *
***********************************************************************
         SPACE 2
         BAL   R11,STOP       STOP THE TASK OR TASKS.
         SPACE 2
         L     R1,ECBLOG      CHECK IF STOP/MODIFY WAS ENTERED BY OP.
         TM    X0(R1),X40     *
         BZ    CKECBTST      NOT POSTED CHECK NEXT ECB
         B     ENDIT1        TERMINATE
         SPACE 2
CKECBTST EQU   *
         L     R1,ECBTST      TEST'S ECB.
         TM    X0(R1),TESTPOST Q.WAS TEST ECB POSTED(40 OR 44).
         BZ    STAICHK        NO,CHECK STAI ECB.
         BM    BKPNT          YES,POSTED BY SVC 97,PROCESS BREAKPOINT
         EJECT
***********************************************************************
*                                                                     *
*        POST BY SVC 61.                                              *
*        ECBTST POSTED COMPLETE WITH A X'44'.  COMPLETION CODE        *
*        PORTION OF ECBPP CONTAINS A POINTER TO THE SVC 061 SVRB.     *
*                                                                     *
*        1 --  IF SVC 061 HAS PLACED A VALID TCB ADDRESS IN ITS       *
*              EXTENDED SAVE AREA, ISSUE A GETMAIN FOR A SVC          *
*              INFORMATION BLOCK QUEUE CONTROL BLOCK AND COMPLETE     *
*                                                                     *
*        2 --  IF A DEFER BREAKPOINT QUEUE EXISTS, BRANCH TO          *
*              INVOKE THE AT SUBCOMMAND PROCESSOR TO ACTIVATE         *
*                             BREAKPOINTS IN THE MODULE JUST LOADED.  *
*                                                                     *
***********************************************************************
         SPACE 2
         L     R1,ECBPP       OBTAIN SVRB ADDRESS FOR SVC61.
         LM    R3,R4,RBEXSAVE-RBSECT(R1) GET THE TCB ADDR AND SVC
*                             INFO BLOCK POINTER.
         LTR   R3,R3          IF TCB ADDRESS IS ZERO, IGNORE.
         BZ    NOGET          BRANCH TO AVOID GETMAIN.
         SPACE 2
         L     R0,CORETRN     GETMAIN FOR A QUEUE CONTROL BLOCK.
         GETMAIN RC,LV=(0),SP=1     GET CORE FOR QUEUE CONTROL BLOCK.
         LTR   R15,R15       WAS GETMAIN SUCCESSFUL
         BZ    CONT1         YES CONTINUE
* ISSUE 'GETMAIN SVC ERROR' MESSAGE
         LA    R1,SVC10NO    R1=ADDR OF SVC NUMBER
         BAL   R14,IOSVC     PUT OUT SVC ERROR MESSAGE
         B     ENDITERR      TERMINATE AFTER RETURN FROM IO
CONT1    EQU   *
         MVC   X0(X4,R1),TSTTRN SAVE THE LINK FIELD.
         STM   R3,R4,X4(R1)   TCB ADDRESS AND SVC INFO BLOCK
*                             POINTER INTO QUEUE CONTROL BLOCK.
         ST    R1,TSTTRN      SAVE HEAD QUEUE CONTROL BLOCK ADDRESS.
         SPACE 2
NOGET    EQU   *
         OC    DEFERTAB(L'DEFERTAB),DEFERTAB DEFER BREAKPOINT PRESENT.
         BZ    IKJEGCTL       IF NOT, BRANCH TO RESUME PROCESSING.
         SPACE 2
         OI    TSTFLGS1,TSTBUILD SET SWITCH FOR IKJEGAT.
*                             CWORKCMD CONTAINS LOADNAME,LOADBGN.
         L     R2,MNLEGAT     ADDRESS OF AT ENTRY IN SUBCOMMAND
*                             TABLE.
         SR    R3,R3          ZERO LENGTH REGISTER TO INSURE
         IC    R3,SCDNAME(,R2) VALIDITY OF ONE BYTE LENGTH.
         LA    R5,SCDATLD(,R2) ADDRESS OF LOAD MODULE NAME FOR
*                             AT SUBCOMMAND.
         LA    R2,SCDSCPPN(,R2) SET REGISTER TO POINT TO COMMON
*                             SUBCOMMAND NAME.
         B     MNLXX170       BRANCH TO INVOKE AT SUBCOMMAND.
         EJECT
***********************************************************************
*                                                                     *
*        POST BY SVC 97.                                              *
*        ECBTST POSTED COMPLETE WITH A X'40'.  COMPLETION CODE        *
*        PORTION OF ECBPP CONTAINS A POINTER TO THE SVC 097 SVRB.     *
*                                                                     *
*        1 --  QUALIFY THE TCB AND PRB IN WHICH THE BREAKPOINT        *
*              OCCURRED.                                              *
*                                                                     *
*        2 --  REPLACE THE TERMINAL ON THE INPUT STACK.               *
*                                                                     *
*        3 --  DETERMINE IF A PSEUDO OR OTHER BREAKPOINT.             *
*                                                                     *
***********************************************************************
         SPACE 2
BKPNT    EQU   *
         TM    TSTFLGS4,TSTSVCAB DID SVC 97 ABEND?
         BZ    BKPT1         NO,CONTINUE
         LA    R1,MSG3       R1=ADDR OF MESSAGE NUMBERS
* ISSUE 'TEST ENDED DUE TO ERROR' MESSAGE
* ISSUE 'UNRECOVERABLE SVC ERROR' MESSAGE
         BAL   R14,IOMSG     PUT OUT MESSAGES
         B     ENDIT1        IGNORE IO RC'S AND TERMINATE
BKPT1    EQU   *
         BAL   R11,QUAL       REQUALIFY IF NECESSARY.
         SPACE 2
         BAL   R11,ADD        ADD A TERM ELEM TO THE STACK
         SPACE 2
         L     R4,TSTGOPSW    SET R1 FOR POSSIBLE PARAMETER TO SVC97
         LTR   R4,R4          Q. IST 'TSTGO' FIELD ZERO.
         BZ    BRKCHK         YES,TEST DID NOT SET THE BREAKPOINT.
         EJECT
***********************************************************************
*                                                                     *
*        WHEN TSTGOPSW IS NON-ZERO, A PSEUDO BREAKPOINT IS            *
*        INDICATED.                                                   *
*                                                                     *
*        1 --  DETERMINE IF BREAKPOINT IS IN A BREAK ELEMENT.  IF     *
*              PSEUDO BREAKPOINT IS NOT WITHIN A BREAK ELEMENT,       *
*              SET RESUME ADDRESS IN RB TO THE ADDRESS SPECIFIED      *
*              IN TSTGOPSW.                                           *
*                                                                     *
*        2 --  FOR A PSEUDO BREAKPOINT OCCURRING WITHIN A BREAK       *
*              ELEMENT, COMPUTE ADDRESS OF NEXT SEQUENTIAL            *
*              INSTRUCTION IN THE USER PROGRAM AND SET RESUME         *
*              ADDRESS IN RB ACCORDINGLY.                             *
*                                                                     *
*        3 --  DETERMINE IF IKJEGLDF WAS RUNNING UNDER THE USER       *
*              TCB.  IF SO, RESTORE USER PROGRAM REGISTERS AND        *
*              DELETE IKJEGLDF.  IN ALL CASES RETURN CONTROL TO       *
*              THE USER AT THE TERMINAL.                              *
*                                                                     *
***********************************************************************
         SPACE 2
         L     R5,BREAKTAB    GET THE BREAK ELEMENT QUEUE
LOOP6    EQU   *
         LTR   R5,R5          Q. HAVE ALL BREAK ELEMENTS BEEN CHECKED.
         BZ    PSEUDO1        YES. RESTORE THE SAVED I.C.
         SPACE 2
         USING BRKELEM,R5     BREAK ELEMENT ADDRESSABILITY
         LA    R0,BRKINST     OBTAIN BEGINNING OF INSTR. FIELD
         LA    R2,BRKINST+X6  OBTAIN END OF INSTR. FIELD.
         LA    R4,X0(,R4)     CLEAR HIGH BYTE OF TSTGO.
         CR    R4,R0          Q. IS IC WITHIN BREAK ELEMENT.
         BL    MISS           NO. BRANCH.
         CR    R4,R2          Q. IS IC WITHIN BREAK ELEMENT.
         BNH   HIT            YES. BRANCH
MISS     EQU   *
         L     R5,BRKLINK     GET NEXT ELEMENT , IF ONE.
         B     LOOP6          LOOP
HIT      EQU   *
         SR    R4,R0          COMPUTE OFFSET INTO BRKINST
         A     R4,BRKADDR     CREATE A NEW 'TSTGO' ADDRESS
         SPACE 2
PSEUDO1  EQU   *
         L     R5,PPTCB       ADDRESS OF USER TCB.
         IKJEGS9G OPSW,TCBADDR=(R5),VALUE=(R4),MF=(E,MNLSVCPL)
         SPACE 2
         LTR   R15,R15        CHECK RETURN CODE.
         BZ    PSEUDO2        IF ZERO, CONTINUE.
SVC97ERR EQU   *
         NI    TSTFLGS1,XFF-TSTBUILD INDICATE NO DEFER BKPT.
* ISSUE 'TEST ENDED DUE TO ERROR' MESSAGE
* ISSUE 'BREAKPOINT SVC ERROR CODE 4' MESSAGE
         LA    R1,MSG4       R1=ADDR OF MESSAGE NUMBERS
         BAL   R14,IOMSG     PUT OUT MESSAGES
         BAL   R11,IORETCK   TEST IO RETURN CODES
         B     PUTEND        TERMINATE.
         SPACE 2
PSEUDO2  EQU   *
         XC    TSTGOPSW(L'TSTGOPSW+L'TSTGOWCF+L'TSTRSVD2),TSTGOPSW
*                             ZERO OUT 'TSTGO' FOR NEXT USE.
         NI    TSTFLGS3,XFF-TSTSTAI  TURN OFF THE STAI BIT.
         TM    TSTFLGS2,TSTLDF  COMING FROM LOAD,DEL,GET,FREE.....
         BZ    SCREQ          NO. GET NEXT SUBCOMMAND.
         SPACE 2
         L     R2,WORKAREA    ADDRESSABILITY.
         LA    R2,CWORKLDF-TSTCWORK(,R2) GET PP REGS ADDRESS.
         L     R5,PPTCB       ADDRESS OF USER TCB.
         IKJEGS9G AGPR,TCBADDR=(R5),VALUE=(R2),MF=(E,MNLSVCPL)
         LTR   R15,R15        CHECK RETURN CODE.
         BNZ   SVC97ERR       IF NOT ZERO, PUT MESSAGE.
         SPACE 2
         DELETE EP=IKJEGLDF   DELETE PP PORTION.
         SPACE 2
         NI    TSTFLGS3,XFF-TSTLINK TURN OFF LINK ABEND BIT
         BAL   R11,DCBFREE    FREE THE DCB IF NOT IN OVERLAY.
         B     SCREQ          GET THE NEXT SUBCOMMAND.
         EJECT
DCBFREE  EQU   *
         L     R4,TSTDCB      GET THE Q OF DCBS.
         TM    TSTFLGS1,ENDSW IF ENDING CLOSE ALL DCBS AND FREE.
         BO    FREEDCB        'END' OR 'RUN' HAS BEEN ENTERED.
         LTR   R4,R4          HIGH BIT ON DON'T FREE,ZERO FIELD ALSO
         BCR   NEG+Z,R11      NEGATIVE OR ZERO....RETURN.
FREEDCB  EQU   *
         LTR   R4,R4          TEST FOR ZERO.
         BCR   Z,R11          IF ZERO RETURN.
         LA    R5,X4(,R4)     DCB ADDRESS.
         TM    DCBOFLGS(R5),X10 CHECK IF OPEN DCB.
         BZ    NOCLOSE        DCB ALREADY CLOSED.
         MVC   MNLCLOSE(CLLEN),CLFORM CLOSE LIST FORM TO WORKAREA.
         CLOSE ((R5)),MF=(E,MNLCLOSE) CLOSE.
NOCLOSE  EQU   *
         MVC   TSTDCB(L'TSTDCB),X0(R4) PUSH UP ON QUEUE
         FREEMAIN  RC,LV=100,A=(R4),SP=1 FREE DCB CORE.
         LTR   R15,R15       WAS FREEMAIN SUCCESSFUL
         BZ    DCBFREE       YES CONTINUE
* ISSUE 'FREEMAIN SVC ERROR' MESSAGE
         LA    R1,SVC120NO   R1=ADDR OF SVC NUMBER
         BAL   R14,IOSVC     PUT OUT SVC ERROR MESSAGE
* IGNORE RETURN CODES AND CONTINUE
         B     DCBFREE        GET THE NEXT DCB IF ONE....
         EJECT
***********************************************************************
*                                                                     *
*        ENTRY AT THIS LOCATION INDICATES THAT SVC 097 POSTED         *
*        IKJEGMNL AND THAT TSTGOPSW (IN TCOMTAB) IS ZERO.  THIS       *
*        SECTION OF CODE DETERMINES IF THE BREAKPOINT LOCATION IS     *
*        THE SAME AS A LOCATION IN ONE OF THE BREAKPOINT ELEMENTS     *
*        AND INFORMS THE USER.  IF THE BREAKPOINT LOCATION IS         *
*        UNKNOWN, A NORMAL TERMINATION MESSAGE IS PUT TO THE USER     *
*        AND THE USER PROGRAM RESUME ADDRESS IS UPDATED TO POINT      *
*        TO A SVC 003 INSTRUCTION IN THE CVT.                         *
*                                                                     *
*        1 --  DETERMINE IF BREAKPOINT LOCATION IS KNOWN.  IF NOT     *
*              UPDATE RB RESUME ADDRESS TO POINT TO SVC 003 IN        *
*              CVT, ISSUE NORMAL TERMINATION MESSAGE, AND BRANCH      *
*              TO GET NEW SUBCOMMAND.                                 *
*                                                                     *
*        2 --  IF BREAKPOINT LOCATION IS KNOWN, BUILD MESSAGE         *
*              INDICATING LOCATION OF BREAKPOINT AND PUT MESSAGE      *
*              TO USER IF NOTIFY WAS SPECIFIED ON AT SUBCOMMAND.      *
*              IF NONOTIFY WAS SPECIFIED OR AFTER MESSAGE IS PUT      *
*              TO THE TERMINAL, PLACE SUBCOMMAND CHAIN ADDRESS        *
*              FOR THIS BREAKPOINT IN TCOMTAB AND BRANCH TO GET       *
*              NEW SUBCOMMAND.                                        *
*                                                                     *
***********************************************************************
         SPACE 2
BRKCHK   EQU   *
         L     R4,ECBPP       R4=ADDR OF SVC 97 SVRB.
         L     R4,RBLINK-RBSECT(,R4) ADDRESS OF RB FOR
*                             BREAKPOINTED PROGRAM.
         L     R5,BREAKTAB    R5=HEAD OF BREAK ELEMENT QUEUE.
LOOP2A   EQU   *
         LTR   R5,R5          Q.ANY MORE BREAK ELEMENTS.
         BNZ   LOOP2B         SEE IF THE PP ENDED.
         SPACE 2
         L     R2,CVTPTR      ADDRESS OF THE CVT
         USING CVT,R2         ESTABLISH ADDRESSABILITY TO CVT.
         LA    R2,CVTEXIT     ADDRESS OF SVC 3 INSTR IN CVT
         DROP  R2
         L     R5,PPTCB       ADDRESS OF USER TCB.
         IKJEGS9G OPSW,TCBADDR=(R5),VALUE=(R2),MF=(E,MNLSVCPL)
         LTR   R15,R15        CHECK RETURN CODE.
         BNZ   SVC97ERR       IF NOT ZERO, PUT MESSAGE.
         SPACE 2
* ISSUE 'PROGRAM UNDER TEST HAS TERMINATED NORMALLY' MESSAGE
* ISSUE 'BREAKPOINTS ARE STILL VALID' MESSAGE
         LA    R1,MSG5       R1=ADDR OF MESSAGE NUMBERS
         BAL   R14,IOMSG     PUT OUT MESSAGES
         BAL   R11,IORETCK   TEST IO RETURN CODES
         B     SCREQ          ENTER COMMAND MODE.
         SPACE 2
         USING BRKELEM,R5     BREAK ELEMENT ADDRESSABILITY.
LOOP2B   EQU   *
         CLC   BRKADDR+X1(X3),RBOPSW+X5-RBSECT(R4) Q.THIS BREAK
*                             ELEMENT THE ONE.
         BE    ATLOC          YES,INITIALIZE CHAIN AND ENTER CMD MODE.
         L     R5,BRKLINK     NO,CHECK NEXT ELEMENT ON QUEUE.
         B     LOOP2A         *
         SPACE 2
* BUILD AND OUTPUT 'AT' MESSAGE WHEN BREAKPOINTS ARE FOUND
ATLOC    EQU   *
         L     R1,OUTBUF      R1=OUTPUT BUFFER ADDRESS.
         LA    R2,X4(,R1)     R2=IS TO BE CONSTRUCTED MSG PTR.
         LA    R4,X4         SET INITIAL MESSAGE LENGTH TO 4
         LA    R3,N160(,R1)   GET WORK ADDRESS FOR CONVERT.
         UNPK  X1(X5,R3),BRKDISP(X3)  MAKE DISPLACEMENT PRINTABLE.
         TR    X1(X4,R3),TABLE-XF0    *
         LA    R8,X4          4 BYTES OF OUTPUT FROM UNPK
ATLOOP   EQU   *
         CLI   X1(R3),XF0     CHECK IF LEADING ZERO.
         BNE   PUTPLUS        PUT A PLUS SIGN BEFORE OFFSET.
         MVC   X1(X3,R3),X2(R3)  SHIFT LEFT CHARACTER.
         BCT   R8,ATLOOP      CHECK FOR MORE LEADING ZEROS.
         B     ATNAME         BRKDISP EQUALS ZERO.
         SPACE 2
PUTPLUS  EQU   *
         MVI   X0(R3),PLUS    PUT A PLUS SIGN IN FRONT OF OFFSET
         LA    R8,X1(,R8)     ADD PLUS SIGN LENGTH.
         AR    R4,R8          UPDATE CURRENT LENGTH.
         EX    R8,MOVEAT      MOVE '+ (OFFSET)' TO OUTBUFFER.
         AR    R2,R8          UPDATE OUTBUFFER POINTER.
         MVC   X0(FROMLEN,R2),FROM  MOVE ' FROM ' TO OUTBUFFER.
         LA    R8,FROMLEN     GET LENGTH OF FROM DC
         AR    R2,R8          UPDATE OUTBUFFER POINTER.
         AR    R4,R8          UPDATE CURRENT LENGTH.
ATNAME   EQU   *
         EX    R4,MOVEAT      MOVE THE 'AT' MSG TO OUTBUFFER.
         L     R3,BRKNAME     GET THE ADDRESS STRING.
         LA    R7,MAXLEN      GET MAX. LENGTH TO PRINT.
         SR    R7,R4          R7=MAX.LENGTH-AT MSG LENGTH
         LH    R6,X0(,R3)     GET ADDR. STRING LENGTH.
         CR    R6,R7          DOES ADDR.STRING EXCEED MAX.LENGTH.
         BL    SKIP1          NO.GO TO SKIP1.
         LR    R6,R7          REPLACE WITH MAX. LENGTH.
SKIP1    EQU   *
         LTR   R6,R6          BE SURE LEN GT ZERO              @ZA20612
         LR    R11,R6         SAVE LENGTH AROUND BCTR INST     @ZA20612
         BZ    MOVEONE        IF ZERO DO NOT DECREMENT         @ZA20612
         BCTR  R6,R0          DECREMENT LENGTH FOR MOVE        @ZA20612
MOVEONE  EQU   *                                               @ZA20612
         LA    R3,X2(,R3)     POINT TO BRKNAME PLUS TWO
         EX    R6,MOVEAT      MOVE THE ADDRESS STRING TO OUTBUFFER
         LR    R6,R11         RESTORE LENGTH AFTER DECREMENT   @ZA20612
         AR    R4,R6          GET WHOLE MESSAGE LENGTH
         SLL   R4,N16         PUT LENGTH IN 1ST HALF WORD
         ST    R4,X0(,R1)     PUT LENGTH OF MESSAGE IN OUTBUFFER
         SPACE 2
         TM    BRKFLGS,BRKNONOT CHECK IF 'NONOTIFY'
         BO    NONOT          YES DON'T PRINT.
         LR    R4,R1         R4=ADDRESS OF OUTBUF
         XC    TSTIOPRM(L'TSTIOPRM),TSTIOPRM  CLEAR IO PARM LIST
* ISSUE 'AT' MESSAGE
         IKJEGSIO MSG,FIRST=M0006,INST11=(ADDR,(R4)),ID=MNL22,         *
               MF=(E,TSTIOPRM)
         BAL   R11,IORETCK   TEST IO RETURN CODES
NONOT    EQU   *
         MVC   SUBCHAIN(L'SUBCHAIN),BRKCHAIN PLACE CHAIN ADDRESS
*                             IN TCOMTAB.
         B     SCREQ          ENTER COMMAND MODE.
         EJECT
**********************************************************************
*                                                                     *
*        CONTINUE CHECKING TO DETERMINE THE EVENT WHICH TOOK TEST     *
*        OUT OF THE WAIT STATE.                                       *
*                                                                     *
*        1 --  DETERMINE IF THE STAI RB IS POSTED INDICATING          *
*              THAT THE USER PROGRAM HAS ABENDED.  IF SO, BRANCH      *
*              TO PROCESS ABEND.                                      *
*                                                                     *
*        2 --  IF STAI ECB IS NOT POSTED, ONLY REMAINING EVENT IS     *
*              NORMAL TERMINATION OF USER PROGRAM.  ISSUE A           *
*              MESSAGE THAT USER PROGRAM HAS TERMINATED AND           *
*              RETURN TO THE TMP.                                     *
*                                                                     *
***********************************************************************
         SPACE 2
STAICHK  EQU   *
         L     R3,ECBTMPS     ADDRESS OF STAI EXIT ECB.
         TM    X0(R3),POSTFLAG Q.IS STAI ECB POSTED.
         BNZ   STAICHK1       YES,GO PROCESS ABEND
* ISSUE 'PROGRAM UNDER TEST HAS TERMINATED' MESSAGE
* ISSUE 'BREAKPOINTS ARE NO LONGER VALID' MESSAGE
         LA    R1,MSG6       R1=ADDR OF MESSAGE NUMBERS
         BAL   R14,IOMSG     PUT OUT MESSAGES
         BAL   R11,IORETCK   TEST IO RETURN CODES
         B     ENDIT1         FOLD UP TENT.
         SPACE 5
***********************************************************************
*                                                                     *
*        USER PROGRAM HAS ABENDED.  ATTEMPT TO RECOVER ABEND AND      *
*        NOTIFY USER.                                                 *
*                                                                     *
*        1 --  OBTAIN ADDRESS OF TMP (MODULE IKJEFT04) MESSAGE        *
*              ROUTINE FROM ECB AND BRANCH TO PUT ENDED DUE TO        *
*              ERROR MESSAGE.                                         *
*                                                                     *
*        2 --  DETERMINE IF IKJEGLDF ABENDED WHILE RUNNING UNDER      *
*              USER TCB.  IF SO, INDICATE A SUBTASK ABEND AND         *
*              RETURN TO TMP STAI EXIT ROUTINE.                       *
*                                                                     *
*        3 --  STARTING WITH THE ABENDING TCB, LOOK FOR MOST          *
*              RECENT PRB WHICH ABENDED OR WHICH INVOKED THE          *
*              SUPERVISOR SERVICE WHICH ABENDED.  IF NONE FOUND,      *
*              ASSUME NOTHING LEFT TO TEST IF USER IS NOT MULTI-      *
*              TASKING.                                               *
*                                                                     *
*        4 --  ONCE A PRB IS FOUND, SAVE THE PRB REGISTERS IN         *
*              REGSAVE2 AND THE ABEND LOCATION OR PRB RESUME          *
*              ADDRESS IN TSTGOPSW.  INDICATE A RETRY ADDRESS OF      *
*              TSTSVC IN TCOMTAB, POST TMP STAI EXIT COMPLETE,        *
*              AND BRANCH TO WAIT ON PSEUDO BREAKPOINT TO BE HIT.     *
*                                                                     *
***********************************************************************
         SPACE 2
STAICHK1 EQU   *
         MVI   X0(R3),X0      CLEAR ECB.
         L     R3,X0(,R3)     LOAD THE ECB.
         LTR   R1,R3          PASS PARMS AND CHECK ADDRESS.
         BZ    SKIP111        DON'T GO.
         L     R15,X0(,R3)    PICK UP THE IKJEFT04 MSG PRINT RTN.
         BALR  R14,R15        PRINT 'ENDED DUE TO ERROR'
         SPACE 2
SKIP111  EQU   *
         TM    TSTFLGS2,TSTLDF  Q.DID LOAD,DELETE,GET OR FREE BOMB.
         L     R1,WORKAREA    GET REGS IF LDF ABENDED.
         L     R3,REGSAVE2    REGS TO GO TO REGSAVE2 FOR SVC.
         MVC   X0(N64,R3),CWORKLDF-TSTCWORK(R1) *
         BO    SKIP2          YES. WE HAVE PP REGS.
         SPACE 2
         L     R11,TPLPTR    GET TPL ADDRESS
         USING TPL,R11       GET TPL ADDRESSABILITY
         L     R7,TPLNTCB     GET THE ABENDED TCB.
         DROP  R11
         LA    R7,X0(,R7)     CLEAR THE HIGH BYTE.
         ST    R7,PPTCB       SAVE THE TCB FOR STATUS START.
         L     R6,TCBRBP-TCB(,R7) ADDRESS OF MOST RECENT RB,
*                             ASSUME PRB FOR STAI EXIT.
         TM    RBSTAB1-RBSECT(R6),RBFTP DETERMINE IF A PRB.
         BNZ   QRETRY         IF FIRST RB IS NOT A PRB, ERROR.
*                             BRANCH TO CHECK FOR MULTITASKING.
         TM    RBSTAB2-RBSECT(R6),RBTCBNXT CHECK IF LAST RB.
         BO    QRETRY         IF ONLY RB ON QUEUE, ERROR.
         L     R5,RBLINK-RBSECT(,R6) ADDRESS OF NEXT MOST RECENT
*                             RB, ASSUME SVRB FOR ABEND.
         TM    RBSTAB1-RBSECT(R5),RBFTSVRB DETERMINE IF A SVRB.
         BNO   QRETRY         IF NOT A SVRB, ERROR.
         TM    RBSTAB2-RBSECT(R5),RBTCBNXT CHECK IF LAST RB.
         BO    QRETRY         IF LAST RB ON QUEUE, ERROR.
         L     R4,RBLINK-RBSECT(,R5) ADDRESS OF NEXT MOST RECENT
*                             RB, ASSUME ABENDING PRB OR IRB.
         TM    RBSTAB1-RBSECT(R4),RBFTP-RBFTIRB DETERMINE IF A
*                             PRB OR AN IRB.
         BNZ   ABNDSVRB       IF NOT A PRB OR AN IRB, BRANCH TO
*                             CHECK FOR A SVRB.
         LR    R2,R5          SAVE ADDRESS OF PREVIOUS RB IN R2
         B     AOK            BRANCH TO SET PSEUDO BREAKPOINT.
         SPACE 2
ABNDSVRB EQU   *
         TM    RBSTAB2-RBSECT(R4),RBTCBNXT CHECK IF LAST RB.
         BO    QRETRY         IF LAST RB ON QUEUE, ERROR.
         TM    RBSTAB1-RBSECT(R4),RBFTSVRB DETERMINE IF SVRB.
         BNO   QRETRY         IF NOT A SVRB, ERROR.
         LA    R5,RBSECT-RBPREFIX(,R0) LENGTH OF RB PREFIX.
         SR    R4,R5          SET RB POINTER TO PREFIX.
         CLC   RBINTCOD-RBPREFIX(L'RBINTCOD,R4),ABEND DETERMINE
*                             IF THIS RB ABENDED.
         BNE   QRETRY         IF RB DID NOT ABEND, ERROR.
         AR    R4,R5          RESTORE RB POINTER TO BASIC SECTION
         SPACE 2
PRBLOOK  EQU   *
         LR    R2,R4          SAVE ADDRESS OF PREVIOUS RB IN R2
         L     R4,RBLINK-RBSECT(,R4) NEXT RB ON QUEUE.
         TM    RBSTAB1-RBSECT(R4),RBFTP-RBFTIRB DETERMINE IF PRB
*                             OR IRB NEXT ON QUEUE.
         BZ    AOK            IF A PRB OR IRB, BRANCH TO SET
*                             PSEUDO BREAKPOINT.
         TM    RBSTAB2-RBSECT(R4),RBTCBNXT CHECK IF LAST RB.
         BZ    PRBLOOK        IF NOT THE END OF THE RB QUEUE,
*                             CONTINUE SEARCH UNTIL A PRB (OR
*                             IRB) OR END OF QUEUE OCCURS.
         SPACE 2
QRETRY   EQU   *
         L     R5,TCBOTC-TCB(,R7)  GET THE MOTHER TCB.
         LA    R5,X0(,R5)     CLEAR THE HIGH BYTE.
         C     R5,TSTTCB      Q. IS THE MOTHER OF TPLNTCB TEST TCB.
         BNE   SOMTHING       SKIP THE NOTHING CODE.
* ISSUE 'NO ACTIVE PROGRAM LEFT' MESSAGE
         LA    R1,MSG7       R1=ADDR OF MESSAGE NUMBERS
         BAL   R14,IOMSG     PUT OUT MESSAGES
         BAL   R11,IORETCK   TEST IO RETURN CODES
         B     PUTEND         EXIT.
         SPACE 2
SOMTHING EQU   *
         ST    R5,PPTCB       SAVE THE MOTHER AND SET A PSEUDO BRKPT.
         L     R6,TCBRBP-TCB(,R5) GET THE FIRST RB .
LOOP7C   EQU   *
         TM    RBSTAB1-RBSECT(R6),RBFTSIRB Q.IS THIS A PRB(IRB)
         BZ    SETPSEUD       YES SET A PSEUDO BRKPT.
         L     R6,RBLINK-RBSECT(,R6)  GET THE NEXT RB.
         B     LOOP7C         LOOP UNTIL A PRB(IRB) IS FOUND.
         SPACE 2
SETPSEUD EQU   *
         MVC   TSTGOPSW(L'TSTGOPSW),RBOPSW+X4-RBSECT(R6) SAVE THE I.C.
         MVC   TSTGOWCF(L'TSTGOWCF),RBWCF-RBSECT(R6) SAVE THE WAIT
*                             COUNT.
         IKJEGS9G WCF,TCBADDR=(R6),MF=(E,MNLSVCPL)
         LTR   R15,R15        CHECK RETURN CODE.
         BNZ   SVC97ERR       IF NOT ZERO, PUT MESSAGE.
         SPACE 2
         LA    R5,TSTSVC      ADDRESS OF PSEUDO BREAKPT.
         IKJEGS9G OPSW,TCBADDR=(R6),VALUE=(R5),MF=(E,MNLSVCPL)
         LTR   R15,R15        CHECK RETURN CODE.
         BNZ   SVC97ERR       IF NOT ZERO, PUT MESSAGE.
         SPACE 2
         STATUS START,TCB=(R7) START THE ABENDED TCB.
         LA    R0,PPEXIT2     RETRY AT SVC 3
         B     STAIPOST       LET THE ABEND CONTINUE.
         SPACE 2
AOK      EQU   *
         MVC   X0(N64,R3),RBGRSAVE-RBSECT(R2)  SAVE THE REGISTERS.
         OC    TSTGOPSW(L'TSTGOPSW),RBABOPSW-RBSECT(R4)  SAVE ABEND
*                             ADDRESS.
         BNZ   SKIP2          SKIP THE NEXT BIT OF CODE.
         MVC   TSTGOPSW(L'TSTGOPSW),RBOPSW+X4-RBSECT(R4)  SET UP
*                             TEST GO.
SKIP2    EQU   *
         OI    TSTFLGS3,TSTSTAI  INDICATE THAT THE DAUGHTER ABENDED.
         LA    R0,TSTSVC      RETRY ADDRESS.
STAIPOST EQU   *
         L     R11,TPLPTR    GET TPL ADDRESS
         USING TPL,R11       GET TPL ADDRESSABILITY
         L     R1,TPLECT     GET ECT ADDR FROM TPL          @ZA07137
         OI    ECTSWS2-ECT(R1),ECTTABND   TELL TMP STAI     @ZA07137
*                            NOT TO DEQ                     @ZA07137
         L     R1,TPLNECB     POST ECB FOR THE TMP STAI EXIT RTN.
         DROP  R11
         O     R0,POST7F      POST STAI ECB WITH A '7F'
         POST  (1),(0)        POST STAI ECB WITH X'7F'.
         B     WAIT           ALLOW RECOVERY BY WAITING ON PSEUDO-
*                             BREAK TO OCCUR.
         EJECT
***********************************************************************
*                                                                     *
*        TERMINATION OF THE TEST SESSION.                             *
*                                                                     *
*        THIS SECTION OF CODE WILL TERMINATE THE TEST SESSION.        *
*        SYSTEM RESOURCES WHICH WERE ALLOCATED ARE CLEANED UP         *
*        AND CONTROL IS RETURNED TO THE TMP.                          *
*                                                                     *
*        1 --  THE TEST ATTENTION EXIT IS CANCELLED.  NOTE-- CARE     *
*              MUST BE EXERCISED NOT TO CANCEL THE TMP ATTENTION      *
*              EXIT.                                                  *
*                                                                     *
*        2 --  ANY OPEN DCB IS CLOSED AND FREEMAINED.                 *
*                                                                     *
*        3 --  DETERMINE IF AN IN-CORE SYMBOL TABLE EXISTS AND        *
*              FREEMAIN IF PRESENT.                                   *
*                                                                     *
*        4 --  DETERMINE IF TERMINATION IS DUE TO AN END OR A RUN     *
*              SUBCOMMAND.  IF END WAS ENTERED, POST TERMINATION      *
*              ECB COMPLETE WITH A X'40' AND STOP THE SUBTASK         *
*              AGAIN.  TMP WILL START AND DETACH SUBTASK NON-         *
*              DISPATCHABLE. POST THE USER PROGRAM.                   *
*                                                                     *
*        5 --  DETERMINE IF A QUEUE OF SVC INFORMATION BLOCKS         *
*              EXISTS AND FREEMAIN IF PRESENT.                        *
*                                                                     *
*        6 --  INVOKE IKJDAIR TO UNALLOCATE DATA SETS FOR USER'S      *
*              TCB.                                                   *
*                                                                     *
*        7 --  ISSUE SVC 097 TO ZERO THE TCBTRN FIELD IN THE TCB.     *
*                                                                     *
*        8 --  FREEMAIN THE TCOMTAB AND OTHER WORKAREAS.              *
*                                                                     *
***********************************************************************
         SPACE 2
TMPRTURN EQU   *
         L     R1,TPLPTR      GET TPL ADDRESS            @ZA07137
         L     R1,TPLECT-TPL(R1)  GET ECT ADDRESS        @ZA07137
         NI    ECTSWS2-ECT(R1),XFF-ECTTABND RESET NO DEQ @ZA07137
CANSTAX  LA    R1,RESTART1    IF ABEND DURING END PROCESSING
         ST    R1,TSTRSTRT    SET RESTART ADDRESS FOR STAE
         STAX
         SPACE 2
RESTART1 EQU   *
         LA    R1,RESTRT1A    SET NEXT RESTART ADDRESS FOR STAE RTRY
         ST    R1,TSTRSTRT    DITTO
         L     R1,ECBTMPA     POINT TO ATTN ECB
         NI    X0(R1),XFF-TESTATTN+X40  TURN OFF ONE BIT,IF ON
         BAL   R11,DCBFREE    FREE ALL THE DCBS.
         SPACE 2
RESTRT1A EQU   *
         LA    R1,RESTRT1B    SET NEXT RESTART ADDRESS FOR STAE RTRY
         ST    R1,TSTRSTRT    DITTO
         BAL   R11,FREINBUF   CLEAN UP AFTER CP.
         SPACE 2
RESTRT1B EQU   *
         LA    R1,RESTRT1D    SET NEXT RESTART ADDRESS FOR STAE RTRY
         ST    R1,TSTRSTRT    DITTO
         L     R2,SYMTABLE    R2=ADDR OF HEAD OF CHAIN.
         XC    SYMTABLE(L'SYMTABLE),SYMTABLE  ZERO IN CASE OF ABEND
LOOP5    EQU   *
         LTR   R2,R2          Q.END OF CHAIN.
         BZ    RESTRT1D       YES,FORTFAHREN MIT DER REINIGUNG.
         LR    R1,R2          NO,R1=SYMBOL ELEMENT ADDR FOR FREEMAIN.
         LA    R0,SYSMLEN     GET SYMBOL COMMON SECTION LENGTH
         AH    R0,SYMBLEN(,R1) GET SYMBOL BLOCK SIZE
         L     R2,SYMLINK(,R2) GET THE NEXT ONE.
         FREEMAIN RC,LV=(0),A=(1),SP=1  FREE THE SYMBOL ELEMENT.
         LTR   R15,R15       TEST FOR RC=0
         BZ    LOOP5         RC=0,CONTINUE
* ISSUE 'FREEMAIN SVC ERROR' MESSAGE
         LA    R1,SVC120NO   R1=ADDR OF SVC NUMBER
         BAL   R14,IOSVC     PUT OUT SVC ERROR MESSAGE
         B     LOOP5         IGNORE RETURN CODES AND CONTINUE TO
*                            CHECK FOR ANOTHER SYMBOL ELEMENT.
         SPACE 2
RESTRT1D EQU   *
         LA    R1,ENDIT2      SET NEXT RESTART ADDRESS FOR STA @YM00583
         ST    R1,TSTRSTRT    DITTO
         BAL   R11,REMOVE     REMOVE THE TERM ELEM OFF THE STACK
         TM    TSTFLGS1,RUNSW  SHOULD SUBTASK BE DETACHED.
         BNZ   ENDIT2         YES.DETACH AND WIPE OUT HIS REGI @YM00583
         L     R3,ECBTERM     TERMONATION ECB FOR THE SUBTASK.
         XC    X0(X4,R3),X0(R3)  ZERO THE COMPLETION.
         MVI   X0(R3),X40     SET TERMINATION ECB FOR DETACH.
         BAL   R11,STOPALL    FOR END, STOP TWICE - TMP WILL START
*                              ONCE AND DETACH TASK NON-DISPATCHABLE
         L     R11,TPLPTR             GET TPL ADDRESS      @ZA07137
         L     R11,TPLECT-TPL(R11)    GET ECT ADDRESS      @ZA07137
         OI    ECTSWS-ECT(R11),ECTATRM SET TMP STAI NO POST @ZA07137
         SPACE 2
ENDIT2   EQU   *
         LA    R1,RESTRT1F         SET NEXT RESTART ADDRESS FOR STAE
         ST    R1,TSTRSTRT         DITTO
         L     R2,TSTTRN      GET THE HEAD OF TRN QUEUE.
         XC    TSTTRN(L'TSTTRN),TSTTRN  ZERO FOR ABEND PROCESSING
LOOP3    LTR   R1,R2          LINK PTR OR HEAD.
         BZ    RESTRT1F       IF ZERO ...END OF QUEUE...
         L     R14,TSTTCB     LOAD TCB ADDR FOR SVC97   @ZA06226
         IKJEGS9G FREE,TCBADDR=(R14),VALUE=X0,MF=(E,MNLSVCPL)
         LTR   R15,R15       TEST FOR RC=0
         BZ    RESTRT1F      RC=0,CONTINUE
* ISSUE 'FREEMAIN SVC ERROR' MESSAGE
         LA    R1,SVC005NO   R1=ADDR OF SVC NUMBER
         BAL   R14,IOSVC     PUT OUT SVC ERROR MESSAGE
         SPACE 2
RESTRT1F EQU   *
         LA    R1,RESTART2    IF ABEND LINKING TO DAIR
         ST    R1,TSTRSTRT    SET RESTART ADDRESS FOR STAE
         L     R0,TSTTCB      TCB ADDRESS FOR DAIR LIST
         L     R1,WORKAREA    ADDRESSABILITY TO GENERAL WORKAREA.
         MVC   X0(LEN2C,R1),DAIR2C  UNALLOC TCB.
         ST    R0,X4(,R1)     TCB TO LIST.
         LA    R14,CWORKLDF-TSTCWORK(,R1) ADDR OF DAIR PARM LIST
         MVC   X0(N12,R14),PARMLIST  MOVE IN FIRST PORTION.
         L     R11,TPLPTR    GET TPL ADDRESS
         USING TPL,R11       GET TPL ADDRESSABILITY
         L     R0,TPLPSCB     PSCB TO SECOND PORTION.
         DROP  R11
         STM   R0,R1,N12(R14)  PSCB,DAIR PARMS TO LIST.
         LR    R1,R14         OBTAIN ADDRESSABILITY TO CWORKLDF
         LINK  EP=IKJDAIR     LINK TO DAIR
         SPACE 1                                               @YM00538
BLOWDAIR EQU   *
RESTART2 EQU   *
******* IGNORE DAIR RETURN CODES
         SPACE 1                                               @YM00538
*****    THE FOLLOWING CHANGE IS INSERTED TO FIX A PROBLEM IN  @YM00538
*****    THE DESIGN OF MAINLINE.  IF THE RUN SUBCOMMAND HAS    @YM00538
*****    BEEN ISSUED, MAINLINE WILL POST THE P.P. DISPATCH-    @YM00538
*****    ABILITY ECB AND WAIT ON SVC 97.  SVC 97 WILL IN TURN  @YM00538
*****    POST MAINLINE WHEN IT HAS FINISHED USE OF TCOMTAB.    @YM00538
*****    MAINLINE WILL THEN CONTINUE POOCESSING AND FREEMAIN   @YM00538
*****    TCOMTAB FROM SUBPOOL 1.                               @YM00538
         TM    TSTFLGS1,RUNSW IS IT THE RUN SUBCOMMAND         @YM00538
         BZ    RESTRT2B       NO, CONTINUE PROCESSING          @YM00538
         BAL   R11,START      SET SUBTASK DISPATCHABLE         @YM00538
         POST  ECBPP          POST PP DISPATCH. ECB            @YM00538
         L     R1,ECBTST      LOAD R1 WITH ADDR OF ECB         @YM00538
         XC    X0(X4,R1),X0(R1)  CLEAR THE ECB                 @YM00538
         WAIT  ECB=(R1)       WAIT FOR SVC 97                  @YM00538
         BAL   R11,STOP       SET SUBTASK NONDISPATCHABLE      @YM00538
         SPACE 2
RESTRT2B EQU   *
         LA    R1,RESTRT2A    SET NEXT RESTART ADDRESS FOR STAE RTRY
         ST    R1,TSTRSTRT    DITTO
         L     R5,TSTTCB      ADDRESS OF TMP/TEST TCB.
         IKJEGS9G TRN,TCBADDR=(R5),VALUE=X0,MF=(E,MNLSVCPL)
*****
*****    RETURN CODE CHECK IGNORED.
*****
         SPACE 2
RESTRT2A EQU   *
         ESTAE 0              REMOVE ABEND EXIT
         NI    TSTFLGS4,XFF-TSTRERTN TURN OFF RETRY SWITCH
         LR    R1,R9          R1=TCOMTAB ADDR FOR FREEMAIN.
         L     R0,MNLTCOML    LENGTH OF AREA TO BE FREED.
         L     R13,X4(R13)   RELOAD ADDRESS OF TMP SAVE AREA
         FREEMAIN RU,LV=(0),A=(1),SP=1 FREE TCOMTAB.
         SPACE 2
RESTART4 EQU   *
         RETURN (14,12),RC=0
         EJECT
***********************************************************************
*                                                                     *
*        SET SUBTASK NON-DISPATCHABLE SUBROUTINE.                     *
*                                                                     *
***********************************************************************
         SPACE 2
STOP     EQU   *
         NC    TSTGOPSW(L'TSTGOPSW),TSTGOPSW PSEUDO BREAKPOINT.
         BZ    STOPALL        NO. STOP THEM ALL.
         STATUS STOP,TCB=PPTCB  STOP ONLY ONE.
         BR    R11            RETURN.
         SPACE 2
STOPALL  EQU   *
         TM   TSTFLGS2,TOFFDEF  IS THE STATUS SYNCH INDICATOR  @YM07115
*                             ON FROM SVC 97..                 @YM07115
         NOP  STOPSYNH        YES ISSUE THE STATUS SYNCH       @ZA02701
         STATUS STOP          STOP THEM ALL.                   @YM07115
         BR    R11            RETURN.
         SPACE 2
STOPSYNH EQU   *
         STATUS STOP,SYNCH    STOP THEM ALL.                   @YM04132
         BR    R11            RETURN.
         SPACE 5
***********************************************************************
*                                                                     *
*        SET SUBTASK DISPATCHABLE SUBROUTINE.                         *
*                                                                     *
***********************************************************************
         SPACE 2
START    EQU   *
         NC    TSTGOPSW(L'TSTGOPSW),TSTGOPSW PSEUDO BREAKPOINT SET.Q.
         BZ    STARTALL       NO,START THEM ALL.
         STATUS START,TCB=PPTCB YES,START ONLY PP TCB.
         BR    R11            RETURN.
         SPACE 2
STARTALL EQU   *
         STATUS START         START THEM ALL.
         BR    R11            RETURN.
         EJECT
***********************************************************************
*                                                                     *
*        STACK MANIPULATION SUBROUTINE.                               *
*                                                                     *
*        A TERMINAL ELEMENT IS ADDED WHEN TEST INITIALLY              *
*        DETERMINES THAT INPUT IS FROM THE TERMINAL.  IKJEGIO,        *
*        UPON GETTING A RETURN CODE FROM PUTGET, TURNS ON A BIT       *
*        (TSTA IN TCOMTAB) INDICATING INPUT FROM THE TERMINAL.        *
*        IKJEGMNL WILL PLACE A TERMINAL ELEMENT ON THE STACK          *
*        WHILE TEST IS RUNNING AND WILL REMOVE IT UPON POSTING        *
*        THE PROBLEM PROGRAM.  WHEN TEST IS RUNNING FROM ELEMENTS     *
*        PLACED ON THE INPUT STACK, THIS OPERATION IS NOT DONE.       *
*                                                                     *
***********************************************************************
         SPACE 2
ADD      EQU   *
         SR    R0,R0          ZERO INDICATES 'ADD'
         TM    TSTFLGS4,TSTA  RUNNING FROM THE TERMINAL Q.Q.Q.
         BCR   Z,R11          NO. RETURN.
         TM    TSTFLGS4,TSTB  TERM ELEM ALREADY ADDED.
         BCR   ONES,R11       YES RETURN.
         B     LIKECODE       CONSERVE CODE.
         SPACE 2
REMOVE   EQU   *
         LA    R0,X1          ONE INDICATES 'REMOVE'
         TM    TSTFLGS4,TSTB  IS THERE AN ELEM TO REMOVE.
         BCR   Z,R11          NO. RETURN.
         SPACE 2
LIKECODE EQU   *
         MVC   MNLSRPRM(L'TSTUPT+L'TSTECT+L'TSTCPECB),PARMLIST
*                             INITIALIZE POINTERS TO UPT, ECT AND
*                             ECB FOR IKJSTCK.
         MVC   MNLSTPB(STACKLEN),STACKLST INITIALIZE STACK
*                             PARAMETER BLOCK.
         BCT   R0,ADD1        BRANCH IF REQUEST WAS FOR ADD
         STACK PARM=MNLSTPB,DELETE=TOP,MF=(E,MNLSRPRM) REMOVE          X
                              TERMINAL FROM STACK.
         NI    TSTFLGS4,XFF-TSTB  INDICATES NO ELEMENT.
         BR    R11            RETURN.
         SPACE 2
ADD1     EQU   *
         STACK PARM=MNLSTPB,TERM=*,MF=(E,MNLSRPRM) ADD TERMINAL        X
                              TO INPUT STACK.
         OI    TSTFLGS4,TSTB  INDICATE AN ELEMENT.
         BR    R11            RETURN.
         EJECT
***********************************************************************
*                                                                     *
*        STACK FLUSH SUBROUTINE.                                      *
*                                                                     *
***********************************************************************
         SPACE 2
FLUSH    EQU   *
         XC    SUBCHAIN(L'SUBCHAIN),SUBCHAIN ZERO SUBCOMMAND
*                             CHAIN POINTER FOR BREAK ELEMENT.
         SPACE 2
         TCLEARQ  INPUT
         TM    TSTFLGS4,TSTA  Q. IS TEST COMING OUT OF A STACK.
         BCR   ONES,R11       NO. RETURN TO CALLER.
         SPACE 2
         MVC   MNLSRPRM(L'TSTUPT+L'TSTECT+L'TSTCPECB),PARMLIST
*                             INITIALIZE POINTERS TO UPT, ECT AND
*                             ECB FOR IKJSTCK.
         MVC   MNLSTPB(STACKLEN),STACKLST INITIALIZE STACK
*                             PARAMETER BLOCK.
         STACK PARM=MNLSTPB,DELETE=ALL,MF=(E,MNLSRPRM) DELETE          X
                              ALL BUT FIRST ELEMENT FROM STACK.
         BR    R11            RETURN.
         EJECT
***********************************************************************
*                                                                     *
*        RUN SUBCOMMAND EXIT.                                         *
*                                                                     *
*        THIS SECTION OF CODE GAINS CONTROL AFTER THE RUN SUBCOM-     *
*        MAND PROCESSOR HAS COMPLETED.  SPECIAL PROCESSING IS         *
*        PERFORMED HERE THAT ALLOWS THE USER PROGRAM TO RESUME        *
*        NORMAL PROCESSING AND TO ALLOW TEST TO RETURN TO THE         *
*        TMP.                                                         *
*                                                                     *
*        1 --  SET-UP TO INVOKE THE END SUBCOMMAND PROCESSOR.         *
*              END WILL PERFORM PART OF TEST CLEAN-UP AND WILL        *
*              RETURN TO IKJEGMNL SO THAT NORMAL RETURN IS            *
*              POSSIBLE.                                              *
*                                                                     *
***********************************************************************
         SPACE 2
RUNRTURN EQU   *
ENDIT1   EQU   *
         OI    TSTFLGS1,ENDSW TURN ON ENDSW.
         L     R2,MNLEGEND    ADDRESS OF END ENTRY IN SUBCOMMAND
*                             TABLE.
         SR    R3,R3          ZERO LENGTH REGISTER TO INSURE
         IC    R3,SCDNAME(,R2) VALIDITY OF ONE BYTE LENGTH.
         LA    R5,SCDENDLD(,R2) ADDRESS OF LOAD MODULE NAME FOR
*                             END SUBCOMMAND.
         LA    R2,SCDSCPPN(,R2) SET REGISTER TO POINT TO COMMON
*                             SUBCOMMAND NAME.
         B     MNLXX170       BRANCH TO INVOKE END SUBCOMMAND.
         EJECT
***********************************************************************
*                                                                     *
*        QUALIFICATION SUBROUTINE.                                    *
*                                                                     *
*        AUTOMATIC QUALIFICATION TAKES PLACE WHEN A BREAKPOINT IS     *
*        HIT EITHER UNDER A NEW TCB OR UNDER A NEW RB.                *
*                                                                     *
*        1 --  LOCATE ADDRESS OF RB TO BE CHECKED.  THIS ADDRESS      *
*              IS USED TO UPDATE PPRB IN TCOMTAB.                     *
*                                                                     *
*        2 --  WHEN NEW RB IS (A) AN IRB, (B) A PRB FOR A STAE        *
*              EXIT ROUTINE, OR (C) THE CDE POINTED TO BY THE NEW     *
*              RB IS FOR THE SAME PROGRAM AT THE SAME ADDRESS,        *
*              QUALIFICATION IS EITHER NOT POSSIBLE OR NOT            *
*              NECESSARY.                                             *
*                                                                     *
*        3 --  TO QUALIFY A NEW RB, PLACE LOAD MODULE NAME AND        *
*              ADDRESS IN TCOMTAB AND INVALIDATE CSECT NAME.          *
*                                                                     *
***********************************************************************
         SPACE 2
QUAL     EQU   *
         L     R4,PPTCB       FIND CURRENT RB ADDRESS.
         L     R2,TCBRBP-TCB(,R4) *
         L     R1,RBLINK-RBSECT(,R2)  *
         LA    R1,X0(,R1)     CLEAR HIGH BYTE.
         L     R2,PPRB        GET LAST BREAKPOINTED RB.
         LA    R2,X0(,R2)     CLEAR HIGH BYTE.
         ST    R1,PPRB        SAVE THE NEW PRB ADDRESS.
         SPACE 2
         TM    RBSTAB1-RBSECT(R1),RBFTIRB Q.IS THIS AN IRB.
         BCR   ONES,R11       YES. DO NOT QUALIFY.
         SPACE 2
         L     R14,RBCDE-RBSECT(,R1) GET THE CDE POINTER.
         LA    R14,X0(,R14)   CLEAR THE HIGH BYTE.
         LTR   R14,R14        Q.IS THE CDE PTR. ZERO.
         BCR   Z,R11          YES. CANNOT AUTOMATICALLY QUALIFY.
         SPACE 2
         CR    R1,R2          Q.IS REQUALIFICATION NEEDED.
         LR    R2,R14         PUT THE CDE PTR INTO R2
         BNE   REQUAL         REQUALIFY TO THIS BREAKPOINTED RB
         SPACE 2
         CLC   TSTAQUAL(X8),CDNAME-CDENTRY(R2)  SAME NAME AS BEFORE.
         BNE   REQUAL         REQUALIFY AUTOMATICLY
         CLC   TSTAQUAL+X9(X3),CDENTPT-CDENTRY+X1(R2)  CHECK EPA-ES
         BCR   EQ,R11         SAME AS BEFORE. RETURN.
         SPACE 2
REQUAL   EQU   *
         MVC   TSTAQUAL(N12),CDNAME-CDENTRY(R2)  SAVE NAME AND EPA
         MVI   TSTCURCT,X0    ZERO CURRENT CSECT NAME.
         MVC   TSTCURLD(X8),CDNAME-CDENTRY(R2) REINITIALIZE CURRENT
*                             LOADNAME
         SPACE 2
MINOR    EQU   *
         TM    CDATTR-CDENTRY(R2),CDMIN IS IT A MINOR.
         LR    R14,R2         SAVE THE CDE ADDRESS
         L     R2,CDXLMJP-CDENTRY(,R2) WANT A MAJOR.
         BO    MINOR          NOT A MAJOR.
         L     R1,XTLNRFAC-XTLST(,R2) GET THE NUMBER OF EXTENTS.
         SLL   R1,X2          TIMES 4.
         L     R2,XTLMSBLA-XTLST(R1,R2)  GET THE MEMBER ADDRESS.
         TM    CDATTR2-CDENTRY(R14),CDOLY CHECK IF OVERLAY.
         BO    OVERLAY        YES. SPECIAL HANDLING.
         TM    CDATTR2-CDENTRY(R14),CDSPZ TEST IF OSLOADED
         BNO   SKIP6          NO --BRANCH
         LA    R2,N16(,R2)    ADD 16 TO BYPASS PREFIX.
SKIP6    EQU   *
         ST    R2,PPLOAD      RE-INITIALIZE PPLOAD.
         ST    R2,TSTSYMBA    DITTO.
         BR    R11            RETURN.
         SPACE 2
OVERLAY  EQU   *
*                             R2=ADDRESS OF SEGTAB CSECT.
         LR    R15,R2         SAVE THE EXTENT LIST ADDR.
         LA    R0,X4          SET INDEX,4 REGIONS MAX.
         SR    R14,R14        CLEAR FOR INSERT.
CKREGION EQU   *
         IC    R14,X8(,R2)    GET SEG NO. OF REGION
         TM    N10(R2),XFF    ARE THEIR ANY MORE REGIONS.
         BZ    LASTREGN       NO, GO FIGURE LEN OF SEGTAB.
         BCT   R0,SETNEXT1    YES, GO SET TO CHECK NEXT.
         SPACE 2
LASTREGN EQU   *
         SLL   R14,X2         MULTIPLY LAST SEG NO. BY 4.
         LA    R2,N24(R14,R15) XLADDR PLUS LENGTH OF SEGTAB.
*        AT THIS POINT R2'S LOW TWO BITS ARE ZERO.
         LA    R14,X4         ALIGN TO A DOUBLE WORD.
         NR    R14,R2         DITTO.
*        R14 RESULT IS EITHER 0 OR FOUR.
*        IF ON DOUBLE WORD BNDY 0 IS ADDED TO R2
*        IF NOT ON A DWORD BNDY 4 IS ADDED TO R2
         ALR   R2,R14         DITTO
         B     SKIP6          SAVE ROOT SEG ADDR.
SETNEXT1 EQU   *
         LA    R2,X2(,R2)     DITTO.
         B     CKREGION       LOOP.
         EJECT
*********************************************************************
*        THIS IS THE ESTAE RETRY ROUTINE FOR THE MAINLINE MODULE
*        OF TEST.
*********************************************************************
         SPACE
IKJEGSTR EQU   *
         DROP  R12
         USING *,R15           ESTABLISH ADDRESSABILITY
         L     R12,BASEAD     *
         DROP  R15            *
         USING IKJEGMNL,R12   REESTABLISH USING
         L     R7,CVTPTR      CVTPTR
         USING CVT,R7         ESTABLISH ADDRESSABILITY TO CVT.
         L     R8,CVTTCBP     NEW/CURRENT WORDS.
         DROP  R7
         L     R8,X4(,R8)     CURRENT TCB.
         L     R9,TCBTRN-TCB(R8)  TCOMTAB ADDRESS.
         L     R13,REGSAVE1   RESET R13
         LM    R2,R11,N28(R13) RESET R2-R11
         B     RETRY1        BRANCH AROUND CONSTANTS
BASEAD   DC    A(IKJEGMNL)    MAINLINE ENTRY POINT ADDRESS/BASE
RETRY1   EQU   *
         L     R3,TSTRSTRT   FETCH RESTART ADDRESS
         LTR   R3,R3         IS THERE ONE?
         BZ    RETRY2        NO,GO CHECK FOR END SWITCH
         B     REESTAE       GO ISSUE ESTAE
RETRY2   EQU   *
         TM    TSTFLGS1,ENDSW DID ABEND OCCUR AT 'END' TIME?
         BZ    RETRY3        NO,GO CHECK LINK BIT
         LA    R3,TMPRTURN   R3=WHERE TO GO AFTER ESTAE
         B     REESTAE       GO ISSUE ESTAE
RETRY3   EQU   *
         TM    TSTFLGS3,TSTLINK DID ABEND OCCUR AT LINK TO SC TIME?
         BO    RETRY4        YES,GO CHECK FOR PERCOLLATION
         TM    TSTFLGS2,TSTLDF DID IO AFTER LDF ABEND?
         BZ    RETRY3A       NO,CONTINUE
         NI    TSTFLGS1,XFF-TSTFIRST TURN OFF IKJEGSTA RETURN BIT
         NI    TSTFLGS2,XFF-TSTLDF TURN OFF LDF BIT
         NI    TSTFLGS4,XFF-TSTESTAE TURN OFF NO ESTAE BIT
         LA    R3,SCREQ2     R3=WHERE TO GO AFTER ESTAE
         B     REESTAE       GO ISSUE ESTAE
RETRY3A  EQU   *
         LA    R3,ENDITERR   RE=WHERE TO GO AFTER ESTAE
         B     REESTAE       GO ISSUE ESTAE
RETRY4   EQU   *
         TM    TSTFLGS4,TSTPERC HAS PERCOLLATION HAPPENED?
         BO    RETRY5        YES,SKIP LINK FAILED MESSAGE
         XC    TSTIOPRM(L'TSTIOPRM),TSTIOPRM CLEAR IO PARM LIST
* ISSUE 'LINK TO SUBCOMMAND FAILED' MESSAGE
         IKJEGSIO MSG,FIRST=M0104,INST11=(NUM,I0032),ID=MNL22,         *
               MF=(E,TSTIOPRM)
         BAL   R11,IORETCK   TEST IO RC'S
RETRY5   EQU   *
         NI    TSTFLGS4,XFF-TSTPERC TURN OFF PERCOLLATION BIT
         NI    TSTFLGS3,XFF-TSTLINK TURN OFF LINK BIT
         NI    TSTFLGS1,XFF-TSTPRINT-PCHLSTVL-RANGESW
         NI    TSTFLGS2,XFF-TSTXCTL TURN OFF XCTL BIT
         TM    TSTFLGS1,TSTBUILD IS BUILD SWITCH ON?
         BZ    RETRY6        NO,GO SET UP FOR NEW COMMAND
         LA    R3,BUILDON    R3=WHERE TO GO AFTER ESTAE
         B     REESTAE       GO ISSUE ESTAE
RETRY6   EQU   *
         LA    R3,SCREQ1     R3=WHERE TO GO AFTER ESTAE
REESTAE  EQU   *
         XC    MNLSVCPL,MNLSVCPL CLEAR SVC PARAMETER LIST
         L     R15,TSTSTAE   R15=ADDR OF ESTAE EXIT ROUTINE
         ESTAE (R15),OV,PARAM=MNLSPL,XCTL=NO,RECORD=YES,               *
               MF=(E,MNLSVCPL)  OVERLAY PREVIOUS ESTAE
         LTR   R15,R15       WAS ESTAE SUCCESSFUL?
         BNZ   TMPRTURN      NO,TERMINATE
         NI    TSTFLGS4,XFF-TSTRERTN YES,TURN OFF RETRY BIT
         BR    R3            GO WHERE R3 POINTS TO
BUILDON  NI    TSTFLGS1,XFF-TSTBUILD  CONTINUE PROCESSING
         B     IKJEGCTL       GO TO P.P.
PUTEND   EQU   *
         TM    TSTFLGS1,TSTBUILD  IS THIS A DEFER BREAK POINT
         BO    BUILDON        YES. IGNORE DEFER BREAK POINT.
ENDITERR EQU   *
         BAL   R11,FLUSH      TCLEARQ AND MAYBE STACK FLUSH.
         B     ENDIT1         GO THRU END PROCESSING.
         EJECT
******************* PROCESS ERRET FOR LINK'S **************************
SCANERR  EQU   *
         LR    R0,R1         LOAD ABEND CODE INTO R0
         LA    R1,SVC6NO1    R1=ADDR OF SVC NUMBER AND INSERT NUMBER
* ISSUE 'LINK SVC ERROR' MESSAGE
         BAL   R14,IOSVC1    PUT OUT SVC ERROR MESSAGE
         B     ENDITERR      TERMINATE
SUBCERR  EQU   *
         LA    R1,SVC6NO2    R1=ADDR OF SVC NUMBER
* ISSUE 'LINK SVC ERROR' MESSAGE
         BAL   R14,IOSVC     PUT OUT SVC ERROR MESSAGE
         BAL   R11,IORETCK   TEST IO RC'S
         SR    R15,R15       CLEAR R15
         B     BLOWSC        RETURN AS THOUGH LINK WAS SUCCESSFUL
         SPACE 2
         EJECT
* COMMON IO MACROS
IOSVC    EQU   *             COMMON SVC ERROR PROCESSOR
         XC    TSTIOPRM(L'TSTIOPRM),TSTIOPRM CLEAR IO PARM LIST
         ST    R14,MSAVE14   SAVE RETURN ADDRESS
         ST    R2,MSAVE234   SAVE R2 FOR REUSE
         LH    R2,X0(R1)     R2=SVC NUMBER
         IKJEGSIO SVCERR,SVC=(R2),RC=(R15),ID=MNL22,MF=(E,TSTIOPRM)
         L     R2,MSAVE234   RESET R2
         L     R14,MSAVE14   RESET RETURN REGISTER
         BR    R14           RETURN TO CALLER
IOSVC1   EQU   *             COMMON SVC ERROR PROCESSOR
         XC    TSTIOPRM(L'TSTIOPRM),TSTIOPRM CLEAR IO PARM LIST
         ST    R14,MSAVE14   SAVE RETURN ADDRESS
         STM   R2,R3,MSAVE234 SAVE R2-3 FOR REUSE
         LH    R2,X0(R1)     R2=SVC NUMBER
         LH    R3,X2(R1)     R3=INSERT NUMBER
         IKJEGSIO SVCERR,SVC=(R2),RC=(R15),ABENDRG=(R0),               *
               INST11=(NUM,(R3)),ID=MNL22,MF=(E,TSTIOPRM)
         LM    R2,R3,MSAVE234 RESET R2-3
         L     R14,MSAVE14   RESET RETURN REGISTER
         BR    R14           RETURN TO CALLER
IOMSG    EQU   *             COMMON MESSAGE PROCESSOR
         XC    TSTIOPRM(L'TSTIOPRM),TSTIOPRM CLEAR IO PARM LIST
         STM   R2,R3,MSAVE234 SAVE R2-3 FOR REUSE
         ST    R14,MSAVE14   SAVE RETURN ADDRESS
         LH    R2,X0(R1)     R2=FIRST LEVEL MESSAGE NUMBER
         LH    R3,X2(R1)     R3=SECOND LEVEL MESSAGE NUMBER
         IKJEGSIO MSG,FIRST=(R2),SECOND=(R3),ID=MNL22,MF=(E,TSTIOPRM)
         LM    R2,R3,MSAVE234 RESET R2-3
         L     R14,MSAVE14   RESET RETURN REGISTER
         BR    R14           RETURN TO CALLER
         EJECT
MNLCMDCK CLC   X0(*-*,R2),X1(R5)
MNLSCDMV MVC   ECTSCMD-ECT(*-*,R1),X0(R2)
MOVEAT   MVC   X0(X0,R2),X0(R3)  MOVE A PART OF AT MSG TO OUTBUF
***********************************************************************
*                                                                     *
*        CONSTANTS AND DSECTS                                         *
*                                                                     *
***********************************************************************
         SPACE 5
MNLEGMN1 DC    V(IKJEGMN1)   ENTRY TO SUBCOMMAND CHAIN PROCESSOR
MNLEGATN DC    V(IKJEGATN)   ATTENTION EXIT ROUTINE ENTRY POINT.
MNLSIBLN EQU   *              LENGTH=16  SIB CORE
ATTNCODE DC    A(16)          RETURN CODE ON ATTENTION INTERRUPT.
MNLTCOML DC    A(TCOMLEN+OUTBUFRL+CONAREAL+CWORKLEN+REGSAVEL)
*                             LENGTH OF TESTS WORK AREA.
CORETRN  DC    A(12)          CONTROL WORDS FOR SVC INFO BLKS.
         SPACE
MNLEGAT  DC    V(IKJEGAID)    AT'S ID
MNLEGEND DC    V(IKJEGEID)    END'S ID
MNLEGPCH DC    V(IKJEGPID)    ADDRESS OF ASSIGN ENTRY IN
*                             SUBCOMMAND TABLE.
MNLIBMTB DC    V(IKJEGSCD)    ADDRESS OF IBM TABLE OF TEST SUBCOMMANDS.
MNLUSRTB DC    V(IKJEGSCU)    ADDRESS OF USER TABLE OF SUBCOMMANDS.
POST7F   DC    X'3F000000'   POST CODE OF '7F'
TABLE    DC    C'0123456789ABCDEF' TABLE FOR TRANSLATE.
FROM     DC    C' FROM '      FROM
FROMLEN  EQU   *-FROM         FROM LENGTH
ABEND    DC    XL2'000D'      ABEND CONSTANT.
         SPACE
*        IC TABLE FOR ABENDS
         SPACE
MNLABTAB DS    0F             ABEND VECTOR TABLE FOR RESIDENT CODE.
         DC    AL1(DAIRCODE),AL3(BLOWDAIR)  LINK TO DAIR FAILED.
         DC    AL1(0),AL3(BLOWSC) WILL RETRY, NO MESSAGE PRINTED.
         DC    X'FFFF'        STOPPER.
SVC6NO1  DC    H'6'          SVC 6 NUMBER
         DC    H'43'         INSERT NUMBER FOR ...IKJSCAN...
SVC6NO2  DC    H'6'          SVC 6 NUMBER
SVC10NO  DC    H'10'         SVC 10 NUMBER
SVC60NO  DC    H'60'         SVC 60 NUMBER
SVC120NO DC    H'120'        SVC 120 NUMBER
SVC005NO DC    H'5'           SVC 5 (FREEMAIN)
MSG1     DC    H'100'        TEST ENDED DUE TO ERROR
         DC    H'0'          NO SECOND LEVEL MESSAGE
MSG2     DC    H'3'          INVALID COMMAND
         DC    H'200'        COMMAND NOT SUPPORTED
MSG3     DC    H'100'        TEST ENDED DUE TO ERROR
         DC    H'287'        UNRECOVERABLE SVC ERROR
MSG4     DC    H'100'        TEST ENDED DUE TO ERROR
         DC    H'273'        BREAKPOINT SVC ERROR CODE 4
MSG5     DC    H'5'          PROGRAM TERMINATED NORMALLY
         DC    H'201'        BREAKPOINTS ARE STILL VALID
MSG6     DC    H'7'          PROGRAM HAS TERMINATED
         DC    H'203'        BREAKPOINTS ARE NO LONGER VALID
MSG7     DC    H'1'          NO ACTIVE PROGRAM LEFT
         DC    H'0'          NOSECOND LEVEL MESSAGE
         EJECT
*        LIST FORMS
         SPACE
         IKJDAP2C
DA2CLEN  EQU   *              LENGTH
IKJEGMNL CSECT
DAIR2C   DC    (DA2CLEN-DAPB2C)X'0'  INITIALIZE BEFORE ORGS
         ORG   DA2CCD-DAPB2C+DAIR2C    *
         DC    XL2'002C'      CODE
         ORG   DA2CLEN-DAPB2C+DAIR2C   *
LEN2C    EQU   *-DAIR2C
         SPACE 5
MNLSTAX  DS    0F             LIST FORM OF STAX MACRO INSTRUCTION.
         STAX  0,OBUF=(IKJEGMMT,4),IBUF=(,0),MF=L
MNLSTAXL EQU   *-MNLSTAX      LENGTH OF MACRO LIST FORM.
         SPACE 5
CLFORM   CLOSE CLFORM,MF=L    *
CLLEN    EQU   *-CLFORM       LENGTH OF CLOSE L-FORM.
         SPACE 5
         SPACE 2
MNLSPL   IKJEGSPL RTRY=IKJEGSTR,ABNTB=MNLABTAB,MODNM=IKJEGMNL,         *
               TNM=MAINLINE     ESTAE PARAMETER LIST
         EJECT
*        EQUATES
         SPACE
DAIRCODE EQU   99             LINK TO DAIR FAILED
X0       EQU   0              HEXIDECIMAL 0
X1       EQU   1              HEXIDECIMAL 1
X2       EQU   2              HEXIDECIMAL 2
X3       EQU   3              HEXIDECIMAL 3
X4       EQU   4              HEXIDECIMAL 4
X5       EQU   5              HEXIDECIMAL 5
X6       EQU   6              HEXIDECIMAL 6
X7       EQU   7              HEXIDECIMAL 7
X8       EQU   8              HEXIDECIMAL 8
X9       EQU   9              HEXIDECIMAL 9
N0       EQU   0             NUMBER ZERO
N2       EQU   2             NUMBER 2
N4       EQU   4             NUMBER 4
N10      EQU   10             NUMBER 10
N12      EQU   12             TWELVE
N16      EQU   16             SIXTEEN
N20      EQU   20            TWENTY
N24      EQU   24             TWENTY FOUR.
N28      EQU   28             TWENTY EIGHT.
N48      EQU   48            NUMBER 48
N64      EQU   64             SIXTY FOUR.
N160     EQU   160            ONE SIXTY
N1       EQU   1             NUMBER 1
N4095    EQU   4095          NUMBER 4095
X10      EQU   X'10'
X40      EQU   X'40'          BLANK,POST FLAG,OR HEX 40
XF0      EQU   X'F0'          HEXIDECIMAL F0
XFF      EQU   X'FF'          HEXIDECIMAL FF
Z        EQU   8              ZERO CODITION CODE.
ONES     EQU   1              ONES CONDITION CODE.
TESTPOST EQU   X'44'          POST MASK FOR SVC 61 POST.
MAXLEN   EQU   154            *
POSTFLAG EQU   X'40'          NORMAL POST MASK.
HEX00    EQU   X'00'         VALUE OF X00
HEXFF    EQU   X'FF'         VALUE OF XFF
HEX4D    EQU   X'4D'         VALUE OF X4D-LEFT PAREN
HEX5D    EQU   X'5D'         VALUE OF X5D-RIGHT PAREN
HEX5E    EQU   X'5E'         VALUE OF X5E-SEMICOLON
HEX7D    EQU   X'7D'         VALUE OF X7D-SINGLE QUOTE
HEX40    EQU   X'40'         VALUE OF X40-BLANK
LEFTPREN EQU   B'00001000'   VALUE OF X08
FIRSTQSW EQU   B'00000100'   VALUE OF X04
         SPACE 5
STACKLST STACK MF=L
STACKLEN EQU   *-STACKLST
         SPACE 5
SYSMLEN  EQU   16             *
SYMBLEN  EQU   14             DISPLACEMENT INTO BLOCK
SYMLINK  EQU   0              LINK FIELD.
EQ       EQU   8              EQUAL CONDITION CODE.
NE       EQU   7              NE CONDITION CODE.
NZ       EQU   7              NZ CONDITION CODE.
NEG      EQU   4              NEGATIVE CONDITION.
PLUS     EQU   C'+'           PLUS SIGN
MNLLPARN EQU   C'('           LEFT PAREN
MNLEQUAL EQU   C'='           EQUAL SIGN
TESTATTN EQU   X'48'          TEST ATTN POST CODE.
MNLBLANK EQU   C' '           CHARACTER BLANK.
SIBLINK  EQU   12             *
DCBOFLGS EQU   48
         EJECT
IKJEGMN1 CSECT
************************************************************
** HERE WE PROCESS A SUBCOMMAND CHAIN. REGISTER2 WILL BE  **
** USED TO SCAN THE CHAIN. WE WILL LOOK FOR A SEMI-COLON  **
** OR ZEROS. WHEN A SEMI-COLON IS FOUND THIS INDICATES    **
** THE END OF ONE COMMAND. THIS COMMAND WILL BE PLACED    **
** INTO AN INBUF AREA GOTTEN WITH A GETMAIN. THE ADDRESS  **
** OF THE GETMAIN AREA IS PLACED INTO INBUF AND RETURN    **
** TO LABEL SCREQ.WHEN ZERO IS FOUND THIS INDICATES       **
** END OF THE CHAIN                                       **
************************************************************
         SAVE  (14,12),,*    SAVE REGISTERS IN TCOMTAB FOR REUSE
         USING IKJEGMN1,R12  ESTABLISH ADDRESSABILITY
         LR    R12,R15       SET BASE REGISTER
         XR    R3,R3         ZERO OUT R3 TO USE IT AS LENGTH COUNTER
         XR    R4,R4         WE NEED R4 TO ACT AS LENGTH COUNTER
         L     R2,SUBCHAIN   GET SUBCHAIN ADDRESS FROM TCOMTAB
         LA    R2,N2(R2)     INCREMENT R2 PASS LENGTH FIELD
         LR    R6,R2         PLACE BEGINNING ADDR OF CHAIN IN R6
A005000  EQU   *             EQUATE LABEL TO THS ADDRESS
         CLI   N0(R2),HEX00  CHECK TO SEE IF WE ARE AT THE END
         BNE   A00500        IF NOT AT END OF SUBCMD THEN BRANCH
         NI    TSTFLGS2,HEXFF-LEFTPREN TURN OFF LEFT PREN SW
         NI    TSTFLGS2,HEXFF-FIRSTQSW TURN OFF FIRST QUOTE SW
         B     A00519        BRANCH TO TERMINATE SUBCMD PROCESSING
A00500   EQU   *             EQUATE LABEL TO THIS ADDRESS
         CLI   N0(R2),HEX4D  DO WE HAVE A LEFT PARENTHESIS
         BNE   A00501        IF NOT THEN BRANCH TO CHECK SOME MORE
         TM    TSTFLGS2,FIRSTQSW SEE IF A FIRST QUOTE WAS FOUND
         BO    A00505        IF ON DONT KEEP COUNT OF THIS PAREN
         LA    R3,N1(R3)     KEEP A COUNT OF PARENS IN R3
         OI    TSTFLGS2,LEFTPREN TURN ON LEFT PARENTHESIS FOUND SW
         B     A00505        BRANCH TO INCREMENT POINTER AND COUNT
************************************************************
** THE SUBCOMMAND CHAIN IS SCANNED USING THIS SCAN        **
** WE CHECK FOR A SEMI-COLON,LEFT AND RIGHT PARENTHESIS   **
** AND END OF THE CHAIN. IF AN APOSTROPHY IS ENCOUNTERED  **
** SWITCHES ARE TURNED ON SO THAT SEMI-COLONS AND         **
** PARENTHESIS OCCURRING WITHIN THE APOSTROPHIES ARE      **
** DISREGARDED.                                           **
************************************************************
A00501   EQU   *             EQUATE LABEL TO THIS ADDRESS
         CLI   N0(R2),HEX5D  CHECK FOR A RIGHT PAREN
         BNE   A00502        IF NOT EQUAL TO ) THEN BRANCH
         TM    TSTFLGS2,FIRSTQSW  SEE IF A QUOTE HAS BEEN FOUND YET
         BO    A00505        IF ON THEN DISREGARD THIS PAREN
         TM    TSTFLGS2,LEFTPREN SEE IF A LEFT PREN SW EXIST
         BNO   A00505        IF IT DOESNT THEN BRANCH
         BCTR  R3,N0         DECREMENT REG3 BY ONE
         LTR   R3,R3         SEE IF LEFT AND RIGHT PARENS BALANCE
         BNZ   A00505        IF THEY DONT THEN BRANCH TO CHECK MORE
         NI    TSTFLGS2,HEXFF-LEFTPREN TURN OFF LEFT PREN SW SINCE
*                            RIGHT PARENTHESIS BALANCE IT OUT
         LA    R4,N1(R4)     INCREMENT LENGTH BY ONE
         LA    R2,N1(R2)     LETS SEE IF WE THIS IS THE LAST PAREN
         CLI   N0(R2),HEX00  CHECK FOR END OF CHAIN INDICATOR
         BE    A00519        IF WE ARE THEN BRANCH TO LEAVE
         BCTR  R2,N0         OTHERWISE BACK R2 UP ONE
         BCTR  R4,N0         RETURN R4 TO ORIGINAL VALUE
         B     A00505        BRANCH TO CONTINUE PROCESSING
A00502   EQU   *             EQUATE LABEL TO THIS ADDRESS
         CLI   N0(R2),HEX5E  CHECK FOR A SEMICOLON
         BNE   A00503        IF NOT A SEMICOLON THEN BRANCH
         TM    TSTFLGS2,FIRSTQSW SEE IF A QUOTE HAS BEEN FOUND YET
         BO    A00505        IF ON THEN SKIP THE FOLLOWING CODE
         TM    TSTFLGS2,LEFTPREN HAS A LEFT PARENTHESIS BEEN FOUND YET
         BO    A00505        IF ON BRANCH TO CONTINEU THE SCAN
         BCTR  R2,N0         DECREMENT R2 TO SIMULATE LENGTH FLD
         B     A00520        OTHERWISE BRANCH TO REMOVE SUBCOMD
A00503   EQU   *             EQUATE LABEL TO THIS ADDRESS
         TM    TSTFLGS2,FIRSTQSW SEE IF A QUOTE HAS BEEN FOUND YET
         BO    A00504        IF ON THEN LEAVE THIS CODE ALONE
         CLI   N0(R2),HEX7D  IF NOT ON THEN CHECK FOR A QUOTE
         BNE   A00505        IF NOT PRESENT THEN CONTINUE SCAN
         OI    TSTFLGS2,FIRSTQSW TURN ON A QUOTE FOUND SW
         B     A00505        BRANCH TO CONTINUE THE SCAN
A00504   EQU   *             EQUATE LABEL TO THIS ADDRESS
         CLI   N0(R2),HEX7D  CHECK FOR AN IMBEDDED QUOTE
         BNE   A00505        IF NOT ON THEN BRANCH TO CONTINUE SCAN
         LA    R4,N1(R4)     INCREMENT COUNT REG
         LA    R2,N1(R2)     INCREMENT SCAN REG
         CLI   N0(R2),HEX7D  CHECK FOR THE MATE OF THE FIRST
*                            IMBEDDED QUOTE THERE SHOULD BE ONE
         BE    A00505        IF THERE IS ONE THEN ALL IS OK BRANCH
*                            TO CONTINUE SCAN
         XI    TSTFLGS2,FIRSTQSW TURN OFF THE FIRST QUOTE SW
         B     A005000       BRANCH TO CONTINUE SCANNING
************************************************************
** IN THIS SCAN REGISTER 3 IS USED TO KEEP COUNT OF       **
** LEFT PARENTHESIS, REGISTER 4 IS USED TO RECORD THE     **
** LENGTH OF THE INDIVIDUAL COMMANDS IN THE CHAIN         **
** REGISTER 2 IS USED FOR SCANNING FOR THE VARIOUS        **
** INDICATORS (EG. SEMI-COLON), REGISTER 6 CONTAINS       **
** THE BEGINNING ADDRESS OF THE COMMAND. REGISTER         **
** 5 CONTAINS THE END ADDRESS OF THE CHAIN, REGISTER      **
** 8 CONTAINS THE LENGTH OF THE CHAIN, REGISTER 7         **
** IS USED FOR MISCELLANEOUS JOBS.                        **
************************************************************
A00505   EQU   *             EQUATE LABEL TO THIS ADDRESS
         LA    R4,N1(R4)     INCREMENT COUNT REG BY ONE
         LA    R2,N1(R2)     INCREMENT SCAN REG BY ONE
         B     A005000       BRANCH TO CONTINUE SCAN
A00519   EQU   *             EQUATE LABEL TO THIS ADDRESS
         XR    R2,R2         ZERO OUT REG2
A00520   EQU   *             EQUATE LABEL TO THIS ADDRESS
         ST    R2,SUBCHAIN   UPDATE SUBCHAIN POINTER IN
*                            TCOMTAB TO ADDRESS NEXT COMMAND
A00530   EQU   *             EQUATE LABEL TO THIS ADDRESS
         LTR   R4,R4         MAKE SURE WE HAVE A LENGTH FOR
*                            THE SUB-COMMAND
         BNZ   A00540        IF WE DO HAVE A CHAIN THEN BRANCH
         B     A00505        OTHERWISE BRANCH TO PROCESS NEXT CHAIN
*                            INSTRUCTION
A00540   EQU   *             EQUATE LABEL TO THIS ADDRESS
         LA    R4,N4(N0,R4)  ADD 4 BYTES TO REG4 FOR LL FIELD
         L     R1,WORKAREA   LOAD ADDR OF WORKAREA FROM
*                            TCOMTAB INTO REG1
         LA    R7,N48(R1)    PLACE ADDRESS FROM WORKAREA INTO
*                            REG4 FOR RETURN AREA FROM GETMAIN
         GETMAIN EC,LV=(4),A=(7),SP=1,MF=(E,(1))
*                            ISSUE A GETMAIN FOR INPUT BUF AREA
         LTR   R15,R15       TEST FOR SUCCESSFUL GETMAIN
         BNZ   A00600        CANNOT GET REQUESTED CORE,EXIT
         L     R1,N0(R7)     PLACE ADDR OF GOTTEN CORE IN REG1
         ST    R1,INBUF      PLACE INPUT ADDRESS INTO TCOMTAB AT
*                            INBUF
         BCTR  R4,N0         SUBTRACT ONE FROM REG4 SO AS NOT TO
*                            EXCEED INPUT BUFFER WHEN BLANKED OUT
         BCTR  R4,N0         DECREMENT FOR EXECUTE
         MVI   N0(R1),HEX40  PLACE A BLANK INTO FIRST BYTE OF AREA
         EX    R4,BLANKOUT   SPREAD THIS BLANK THRU ENTIRE AREA
         LA    R4,N2(N0,R4)  ADD1 TO R4 TO RESTORE TO ORIGINAL
         XC    N0(N4,R1),N0(R1) ZERO OUT FIRST 4 BYTES ON INPUT
         STH   R4,N0(R1)     PLACE LENGTH INTO FIRST 2 BYTES
*                            OF INPUT BUFFER
         LA    R7,N4         PLACE A 4 INTO REG7
         SR    R4,R7         SUBTRACT 4 BYTES FOR LENGTH
         BCTR  R4,N0         DECREMENT R4 BY 1
         EX    R4,A00702     MOVE COMMAND FROM SUB-COMMAND
*                            CHAIN TO INPUT BUFFER
A00600   EQU   *             EQUATE LABEL TO THIS ADDRESS
         RETURN (14,12),RC=(15)
BLANKOUT MVC   N1(N1,R1),N0(R1) BLANKS OUT GETMAIN AREA
A00702   MVC   N4(N1,R1),N0(R6)  MOVE SUB-COMMAND FROM CHAIN TO
*                            INPUT BUFFER
IKJEGMNL CSECT
         EJECT
         BRKELEM
         EJECT
         TSTCWORK
         EJECT
         TCOMTAB
PPEXIT2H EQU   PPEXIT+2       2ND HALF WORD OF PPEXIT
         SPACE
         ORG   TSTMNLWK       DEFINE MAINLINE WORK AREA.
MNLCFLGS DS    0A             CONTROL FLAGS.
MNLCFLG1 DS    X              FLAG BYTE 1.
MNLABBRV EQU   B'10000000'    ABBREVIATION FOR SUBCOMMAND NAME.
*              B'0XXXXXXX'    RESERVED BITS.
MNLCFLG2 DS    X              FLAG BYTE 2.
MNLUSERT EQU   B'10000000'    USER SUBCOMMAND TABLE CURRENTLY
*                             BEING SEARCHED.
*              B'0XXXXXXX'    RESERVED BITS.
MNLRSVD1 DS    H              RESERVED BYTES.
         ORG   TSTMNLWK
MNLSCPRM DS    CL24           SERVICE ROUTINE PARAMETER LIST.
MNLCSOA  DS    CL8            IKJSCAN OUTPUT AREA.
MNLCSFLG DS    F              IKJSCAN FLAG WORD.
MNLNOCHK EQU   B'10000000'    DO NOT SYNTAX CHECK COMMAND NAME.
*              B'0XXXXXXX'    RESERVED BITS.
         ORG   TSTMNLWK
MNLLINKL DS    CL12           LINK SVC PARAMETER LIST.
         ORG   TSTMNLWK
MNLCLOSE DS    F              CLOSE PARAMETER LIST.
         ORG   TSTMNLWK
MNLSVCPL DS    CL16           PARAMETER LIST FOR SVC 097.
         ORG   TSTMNLWK
MNLSRPRM DS    CL16          STACK PARM LIST PART 1
MNLSTPB  DS    CL8           STACK PARM LIST PART 2
         ORG   TSTMNLWK
MSAVE234 DS    3F            R2-4 SAVE AREA FOR IO
MSAVE14  DS    F             R14 SAVE AREA FOR IO
         EJECT
         IKJTPL
         EJECT
         IKJPSCB
         EJECT
         IKJTCB
         EJECT
         IKJECT
         EJECT
         IKJCSOA
         EJECT
         IKJCSPL
         EJECT
         IKJDAPL
         EJECT
         IKJRB
         EJECT
         IHACDE
         EJECT
         IHAXTLST
         EJECT
         CVT   DSECT=YES
         EJECT
         IKJEGSUB (ASSIGN,,IKJEGPCH),                                  X
               (AT,,IKJEGAT),                                          X
               (CALL,,IKJEGCAL),                                       X
               (COPY,C,IKJEGCPY),                                      X
               (DELETE,DEL,IKJEGDEL),                                  X
               (DROP,,IKJEGDRP),                                       X
               (END,,IKJEGEND),                                        X
               (EQUATE,EQ,IKJEGEQU),                                   X
               (FREEMAIN,FREE,IKJEGFRE),                               X
               (GETMAIN,GET,IKJEGGET),                                 X
               (GO,,IKJEGGO),                                          X
               (HELP,H,IKJEGCIV),                                      X
               (LIST,L,IKJEGLST),                                      X
               (LISTDCB,,IKJEGDCB),                                    X
               (LISTDEB,,IKJEGDEB),                                    X
               (LISTMAP,,IKJEGMAP),                                    X
               (LISTPSW,,IKJEGPSW),                                    X
               (LISTTCB,,IKJEGTCB),                                    X
               (LOAD,,IKJEGLOD),                                       X
               (OFF,,IKJEGOFF),                                        X
               (QUALIFY,Q,IKJEGQFY),                                   X
               (RUN,R,IKJEGRUN),                                       X
               (WHERE,W,IKJEGWHR),                                     X
               CSECT=IBM
         EJECT
         IKJEGSUB CSECT=USER
         EJECT
IKJEGMNL CSECT
         DS    0F            FORCE FULLWORD ALIGNMENT
MNLPATCH DC    50C'Z'        PATCH AREA
         END
