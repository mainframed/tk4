         TITLE 'IKJEGLDF, LOAD, DELETE, FREEMAIN, AND GETMAIN SUBCMNDS'
         COPY  IKJEGSIO
IKJEGLDF CSECT
*C127000,C151500,A151600                                        YA00064
*C529000                                                       @YM07111
***********************************************************************
*                                                                     *
* STATUS --                                                           *
*    CHANGE LEVEL 000, VERSION 02, OS/VS2                             *
*                                                                     *
* FUNCTION --                                                         *
*                                                                     *
*    LOAD SUBCOMMAND RESULTS IN AN ATTEMPT TO LOAD THE SPECIFIED      *
*    PROGRAM AS IF A LOAD MACRO WERE ISSUED BY THE PROBLEM PROGRAM.   *
*                                                                     *
*    DELETE SUBCOMMAND RESULTS IN THE ISSUING OF THE DELETE MACRO     *
*    IN BEHALF OF THE PROBLEM PROGRAM UNDER TEST.                     *
*                                                                     *
*    GETMAIN SUBCOMMAND RESULTS IN AN ATTEMPT TO ACQUIRE THE          *
*    SPECIFIED NUMBER OF BYTES FROM A USER SPECIFIED SUBPOOL. THE     *
*    MACRO IS ISSUED UNDER THE PROBLEM PROGRAM TASK                   *
*                                                                     *
*    FREEMAIN SUBCOMMAND RESULTS IN AN ATTEMPT TO FREE THE SPECIFIED  *
*    NUMBER OF BYTES FROM THE SPECIFIED SUBPOOL. THE MACRO IS ISSUED  *
*    UNDER THE PROBLEM PROGRAM TASK.                                  *
*                                                                     *
* ENTRY POINTS --                                                     *
*         IKJEGLOD IS THE ENTRY POINT FOR LOAD                        *
*         IKJEGDEL IS THE ENTRY POINT FOR DELETE                      *
*         IKJEGGET IS THE ENTRY POINT FOR GETMAIN                     *
*         IKJEGFRE IS THE ENTRY POINT FOR FREEMAIN                    *
*                                                                     *
* INPUT -- A POINTER TO TCOMTAB, THE COMMUNICATION TABLE, IS EXPECTED *
*    IN REGISTER 9  ALL INFORMATION NEEDED CAN BE ACCESSED IN TCOMTAB.*
*                                                                     *
* OUTPUT -- A LOAD SUBCOMMAND WILL RESULT IN THE LOADED AT ADDRESS    *
*    BEING PRINTED TO THE TERMINAL. A GETMAIN WILL RESULT IN THE      *
*    GETMAIN AREA ADDRESS BEING PRINTED. NEITHER DELETE NOR FREEMAIN  *
*    PRINT OTHER THAN DIAGNOSTIC MESSAGES.                            *
*                                                                     *
* EXTERNAL REFERENCES --                                              *
*         IKJEGPARS IS ENTERED TO SCAN THE SUBCOMMAND STRING AND      *
*         CHECK SYNTAX                                                *
*                                                                     *
*         IKJEGIO IS ENTERED TO PRINT MESSAGES TO THE TERMINAL        *
*                                                                     *
*         IKJEGCVT IS ENTERED IN FREEMAIN VALIDITY CHECK TO CONVERT   *
*         THE ADDRESS OF THE AREA TO BE FREED.                        *
*                                                                     *
* EXITS, NORMAL -- SINCE LOAD, DELETE, GETMAIN AND FREEMAIN ARE       *
*         ISSUED UNDER THE PROBLEM PROGRAM TCB, RETURN IS             *
*         ACCOMPLISHED VIA THE ADDRESS IN TSTGO IN TCOMTAB INSTEAD    *
*         OF THE NORMAL BR R14                                        *
*                                                                     *
* EXITS, ERROR -- NONE                                                *
*                                                                     *
* TABLES/WORK AREAS --                                                *
*    A GETMAIN AREA IS USED FOR THE DCB ASSOCIATED WITH THE DATASET   *
*    SPECIFIED IN THE LOAD SUBCOMMAND.                                *
*    THE WORKAREA POINTED TO IN TCOMTAB IS USED FOR ALL TEMPORARY     *
*    STORAGE                                                          *
*                                                                     *
* ATTRIBUTES --                                                       *
*    REFRESHABLE AND REENTRANT                                        *
*                                                                     *
* CHARACTER CODE DEPENDENCY --                                        *
*    REASSEMBLY MAY BE NEEDED FOR CHANGE OF CODE                      *
* NOTES --                                                            *
*    R12 IS BASE REG                                                  *
*    PLM = SY35-0004                                                  *
*    *     TSO COMMAND PROCESSOR LOGIC                                *
*    *     VOLUME III - TEST                                          *
***********************************************************************
         ENTRY IKJEGLOD
         ENTRY IKJEGDEL
         ENTRY IKJEGGET
         ENTRY IKJEGFRE
         USING TCOMTAB,R9     USE REG9 TO ADDRESS TCOMTAB DSECT
BASELOC  EQU   *             EQUATE LABEL TO THIS ADDRESS
IKJEGFRE EQU   *             EQUATE ENTRY POINT TO THIS ADDRESS
FREEMAIN EQU   *             EQUATE FREEMAIN ENTRY TO THIS ADDR
LOADLOAD SAVE  (14,12),,*    SAVE REGISTERS
         USING FREEMAIN,R15  USE REG15 AS BASE STARTING AT FREEMN
         L     R12,BASE      PLACE START ADDRESS OF PROG IN R12
         DROP  R15           REMOVE REG15 AS BASE REG
         USING BASELOC,R12   USE REG12 AS BASE REG
         B     FREEALL       BRANCH TO ROUTINE TO FREEMAIN
IKJEGDEL EQU   *             EQUATE ENTRY POINT TO THIS ADDRESS
DELETE   EQU   *             EQUATE DELETE ENTRY PTR TO THIS ADDR
         SAVE  (14,12)       SAVE REGISTERS
         USING DELETE,R15    USE REG15 AS BASE FROM DELETE
         L     R12,BASE      PLACE START ADDRESS OF PROG IN R12
         DROP  R15           REMOVE REG15 AS BASE REG
         USING BASELOC,R12   USE REG12 AS BASE REG
         B     DELETEIT      BRANCH TO ROUTINE TO DELETE PROG
IKJEGGET EQU   *             EQUATE ENTRY POINT TO THIS ADDRESS
GETMAIN  EQU   *             EQUATE GETMAIN ENTRY PTR TO THS ADDR
         SAVE  (14,12)       SAVE REGISTERS
         USING GETMAIN,R15   USE REG15 AS BASE START AT GETMAIN
         L     R12,BASE      PLACE START ADDRESS OF PROG IN R12
         DROP  R15           REMOVE REG15 AS BASE REG
         USING BASELOC,R12   USE REG12 AS BASE REG
         B     GETIT         BRANCH TO ROUTINE TO GETMAIN
IKJEGLOD EQU    *            EQUATE ENTRY POINT TO THIS ADDRESS
LOAD     EQU   *             EQUATE LOAD ENTRY PTR TO THIS ADDR
         SAVE  (14,12)       SAVE REGISTERS
         USING LOAD,R15      USE REG15 AS BASE WITH LOAD AS START
         L     R12,BASE      PLACE ADDRESS AT BASE
         DROP  R15           DROP REG 15 AS BASE
         USING BASELOC,R12   USE REG12 AS BASE START AT BASELOC
         EJECT
************************************************************
** THIS  CODE  WILL LOAD A SPECIFIED PROGRAM INTO CORE    **
** UNDER PROBLEM PROGRAM TCB. INITIALLY WE SAVE REGISTERS,**
** ESTABLISH FORWARD AND BACKWARD CHAINING OF REGISTERS & **
** ESTABLISH A BASE REGISTER FOR PROGRAM ADDRESSABILITY.  **
************************************************************
LOADIT   L     R4,REGSAVE2   GET ADDRESS OF MY SAVEAREA FROM TCOM
         ST    R4,@8(R13)    PLACE MY SAVE AREA INTO CALLER SAVEAREA
         ST    R13,@4(R4)    PLACE USER SAVE AREA INTO MY SAVE
         LR    R13,R4        PLACE MY SAVEAREA ADDR INTO R13
         LA    R10,STAELOAD  ACCESS ADDR OF STAE EXIT TAB
         L     R5,LOADPARS   PLACE ADDRESS OF PCL INTO REG 5
         LA    R11,I0023     LOAD-INSERT FOR POSS ERR MSG
         LA    R6,SPLISTLD   REG 6= ESTAE PARAMETER LIST
         BAL   R14,STAEPREP  TO EXPAND STAE MACRO + CALL PARSE
*                            NOTE: LOAD VALIDITY CHECK ROUTINE,
*                            'LOADVLCK', WILL GET CONTROL FROM PARSE.
         L     R10,TSTANSPL  PLACE ADDRESS OF PDE FROM PARSE IN R10
         USING D,R10         ESTABLISH PDL ADDRESSABILITY
         LA    R10,PARSE2    ACCESS PDE ADDRESS
         DROP  R10           DROP PDL ADDRESSABILITY
         USING PARDSECT,R10  ESTABLISH PDE ADDRESSABILITY
************************************************************
** A PARAMETER LIST WILL BE CONSTRUCTED FOR DAIR. DAIR    **
** WILL RETURN A DDNAME FOR THE PARTITIONED DATA SET THAT **
** CONTAINS THE PROGRAM WE ARE LOOKING FOR
************************************************************
         MVC   @4(LISTSIZE,R2),GETLIST FUTURE DCB EXPANSION AREA
         LA    R1,@4(R2)     ADDR OF LIST FORM INTO R1
         GETMAIN EC,LV=100,SP=1,A=(R2),MF=(E,(R1))  GET CORE FOR DCB
         LTR   R15,R15       TEST RETURN CODE
SMTGET01 DS    0H            TEST CASE TTTA7600
         BZ    A10100        BRANCH OF RET CODE = O
         LA    R4,TEN        REG 4 IMPLIES SVC 10 FAILED
         B     GETERR        OUTPUT ERROR MESSAGE
A10100   EQU   *
         L     R7,0(R2)      ACCESS ADDR OF GETMAIN AREA
         MVC   @0(@4,R7),TSTDCB ESTABLISH CHAIN ADDRESS
         ST    R7,TSTDCB     ESTABLISH NEW CHAIN PTR
         LA    R7,@4(R7)     INCREMENT PTR TO GETMAIN AREA
         L     R2,WORKAREA   ACCESS WORKAREA POINTER
         LA    R3,DSNMEPTR-TSTCWORK(R2) INITIALIZE BUFFER
         MVI   @2(R3),BLANK  INITIALIZE BUFFER
         MVC   @3(@43,R3),@2(R3) INITIALIZE BUFFER
         L     R6,DSNAMPTR   ACCESS PTR TO DSNAME
         LH    R5,LENGTH1    ACCESS LENGTH OF DSNAME
         STH   R5,@0(R3)     STORE LENGTH OF DSNAME
         BCTR  R5,R0         DECREMENT FOR EXECUTE
         EX    R5,MOVEDSN    MOVE DSNAME
         TM    FLAGS1,FULLQUAL Q.FULLY QUALIFIED DSNAME
         BO    TODAIR        A. IF SO, GO TO DAIR
         USING DFPL,R2       ESTABLISH ADDRESSABILITY
         USING DFPB,R7       ESTABLISH ADDRESSABILITY
         MVC   DFPLUPT(@4),TSTUPT  *****
         MVC   DFPLECT(@4),TSTECT      *
         MVC   DFPLECB(@4),TSTCPECB    *
         ST    R7,DFPLDFPB             * INITIALIZE
         ST    R3,DFPBDSN              *
         L     R4,TPLPTR               *   DEFAULT
         USING TPL,R4                  *
         MVC   DFPBPSCB(@4),TPLPSCB    * PARM BLOCK
         LA    R4,LOADQUAL             *
         ST    R4,DFPBQUAL             *
         MVI   DFPBCODE,DFPB00         *
         MVI   DFPBCNTL,DFPBUID        *
         LR    R1,R2                   *
         LA    R5,@6         SVC = 6 FOR LINKFAIL
         LA    R4,I0046      DFLT INSERT FOR POSS ERR MSG
         LINK  EP=IKJDFLT,ERRET=LINKFAIL          *****
BLOW10   EQU   *             RESUME ADDRESS FOR STAE
SMTDFLT  DS    0H            TEST CASE TTTA7600
         LA    R14,@24       FOR FUTURE COMPARISON
         CR    R14,R15       TEST ATTN
         LA    R15,@16       NEEDED IF ATTN WAS DETECTED
         BE    RET           RETURN TO MAINLINE
         DROP  R2            DROP DFPL ADDRESSABILITY
TODAIR   EQU   *             TO SET UP FOR DAIR
         LA    R1,DAIR-TSTCWORK(R2) ACCESS COMMAND PORTION
         USING DAPL,R1       ADDRESSABILITY FOR DAIR PARM BLOCK
         MVC   DAPLUPT(@4),TSTUPT UPT PTR FOR DAIR
         MVC   DAPLECT(@4),TSTECT ECT PTR FOR DAIR
         MVC   DAPLECB(@4),TSTCPECB PTR TO CP ECB FOR DAIR
         L     R4,TPLPTR     PLACE POINTER TO TMP INTO R4
         USING TPL,R4        USE REG4 TO ADDRESS TMP DSECT
         L     R3,TPLPSCB    GET PTR TO PROTECTED STEP CONTROL BLK
         ST    R3,DAPLPSCB    PUT PTR INTO PSCB FIELD OF DAIR
*                            PARAMETER LIST
         ST    R7,DAPLDAPB   PLACE POINTER TO DAIR PDE INTO PARM
         XC    @0(@76,R7),@0(R7) INITIALIZE FUTURE DAIR PARM BLOCK
         USING DAPB08,R7     ESTABLISH DAIR PARM BLOCK ADDRESSABILITY
         MVI   DA08DDN,BLANK MOVE BLANK INTO DDNAME FIELD
         MVC   DA08DDN+@1(@7),DA08DDN BLANK OUT DDNAME FIELD
         MVI   DA08UNIT,BLANK     BLANK CHAR INTO UNIT FIELD
         MVC   DA08UNIT+@1(@7),DA08UNIT BLANK OUT UNIT FIELD
         MVI   DA08SER,BLANK MOVE BLANK INTO SERIAL FIELD
         MVC   DA08SER+@1(@7),DA08SER BLANK OUT SERIAL FIELD
         MVI   DA08MNM,BLANK MOMOVE BLANK INTO MEMBER NAME FIELD
         MVC   DA08MNM+@1(@7),DA08MNM BLANK OUT MEMBER NAME FIELD
         MVC   DA08PSWD(@8),PASSWORD-TSTCWORK(R2) ACCESS PASSWORD
         OI    DA08DSP1,DA08SHR INDICATE DISP = SHR
         MVI   DA08CD+@1,HEX08 CODE TO DAIR
         DROP  R1            DROP DAIR PARM BLOCK ADDRESSABILITY
         LA    R3,DSNMEPTR-TSTCWORK(R2) ACCESS PTR TO DSNAME
         ST    R3,DA08PDSN   STORE DSN POINTER IN DAIR PARM BLOCK
         LA    R5,@6         SVC = 6 FOR LINKFAIL
         LA    R4,I0041      DAIR INSERT FOR POSS ERR MSG
         LINK  EP=IKJDAIR,ERRET=LINKFAIL  LINK TO DAIR
BLOW2    EQU   *             RESUME ADDR FOR STAE
SMTDAIR1 DS    0H            TEST CASE TTTA7600
         LTR   R0,R15        LOAD R0 WITH RETURN CODE AND TEST
         BZ    A10200        IFDAIR IS SUCCESSFUL THEN BRANCH
         BAL   R14,DAIRFL    TO DAIRFAIL ROUTINE
         BAL   R14,FREEDCB   TO FREE GETMAIN AREA
         B     A18000        BRANCH TO RETURN
DAIRFL   EQU   *             DAIR FAIL ROUTINE
         LR    R6,R14        SAVE RETURN ADDRESS
         L     R2,WORKAREA   ACCESS WORKAREA PTR
         LA    R11,PARMDRFL-TSTCWORK(R2) ACCESS DAIRFAIL PARAM LIST
         XC    @0(@20,R11),@0(R11) ZERO PARAMETER FIELD
         ST    R15,TMPRETC-TSTCWORK(R2) STORE RET CODE IN WORK AREA
         LA    R1,TMPRETC-TSTCWORK(R2) R1=ADDR OF RET CODE
         ST    R1,@4(R11)    2ND WORD OF PARAM LIST
         LA    R1,ONE        SET UP CALLER ID
         STH   R1,TMPCIDP-TSTCWORK(R2) STORE IN WORK AREA
         LA    R1,TMPCIDP-TSTCWORK(R2) R1=ADDR OF CALLER ID
         ST    R1,@12(R11)   4TH WORD OF PARAM LIST
         LA    R1,DAIR-TSTCWORK(R2) GET DAPL POINTER
         ST    R1,@0(R11)    1ST WORD OF PARAM LIST
         LA    R1,ZERO       SET UP MSG WRITER ENTRY
         ST    R1,MIDHOLD-TSTCWORK(R2) STORE IN WORK AREA
         LA    R1,MIDHOLD-TSTCWORK(R2) R1=ADDR MSG WRTR ENTRY
         ST    R1,@8(R11)    3RD WORD OF PARAMETER LIST
         LR    R1,R11        POINT TO PARAMETER LIST
         LA    R5,@6         SVC = 6 FOR LINKFAIL
         LA    R4,I0042      IKJEFF18-INSERT
         LINK  EP=IKJEFF18,ERRET=LINKFAIL LINK TO DAIRFAIL
         BR    R6            RETURN TO CALLER
* FREE DCB AREA
FREEDCB  EQU   *             FREEMAIN DCB AREA
         LR    R3,R14        SAVE RETURN ADDRESS
         L     R2,TSTDCB     ACCESS GETMAIN AREA ADDRESS
         L     R7,@0(R2)     ACCESS PREVIOUS CHAIN ADDRESS
         ST    R7,TSTDCB     RESTORE PREVIOUS CHAIN ADDRESS TO TSTDCB
         FREEMAIN  RC,LV=100,A=(R2),SP=1
         LTR   R15,R15       TEST RETURN CODE
         BZ    FREDCB1       ZERO-ALL OK
         LA    R4,@120       IMPLIES SVC 120 FAILED
         B     GETERR        OUTPUT ERROR MESSAGE
FREDCB1  BR    R3            RETURN TO CALLER
UNALLOC  EQU   *             TO CLOSE DCB AND UNALLOCATE DSNAME
         L     R7,TSTDCB     ACCESS DCB CHAIN ADDRESS
         LA    R7,@4(R7)     ACCESS PTR TO DCB
         LA    R6,@92(R7)    ADDR OF LIST FORM OF CLOSE
         LR    R3,R14        SAVE RETURN ADDR
         CLOSE ((R7)),MF=(E,(6))  CLOSE DCB
         L     R2,WORKAREA   ACCESS WORKAREA ADDRESS
         LA    R2,CWORKCMD-TSTCWORK(R2) ACCESS COMMAND PORTION
         USING DAPB2C,R2      ESTABLISH ADDRESSABILITY FOR DAIR PARM
         MVC   DA2CCD(@2),DAIR2C INSERT DAIR CODE INTO BLOCK
         MVC   DA2CFLG(@2),FLG2C SET FLAG
         XC    DA2CTCB(@4),DA2CTCB ZERO TCB ADDRESS PORTION
         L     R14,WORKAREA   ACCESS WORKAREA POINTER
         MVC   DA2CDDN(@8),DDNSAVE-TSTCWORK(R14) ACCESS DDNAME
         LA    R1,DAIR-TSTCWORK(R14) WORKAREA FOR DAPL
         USING DAPL,R1       ADDRESSABILITY FOR DAIR PARM BLOCK
         ST    R2,DAPLDAPB   PTR TO DAPB18
         MVC   DAPLUPT(@4),TSTUPT UPT PTR FOR DAIR
         MVC   DAPLECT(@4),TSTECT ECT PTR FOR DAIR
         MVC   DAPLECB(@4),TSTCPECB PTR OT CPECB FOR DAIR
         L     R5,TPLPTR     PLACE PTR TO TMP INTO R5
         USING TPL,R5        ADDRESSABILITY TO TMP DSECT
         L     R14,TPLPSCB   GET PTR TO PROTECTED STEP CONTROL BLOCK
         ST    R14,DAPLPSCB  PUT PTR INTO PSCB FIELD OF DAIR PARM
         DROP  R5            DROP TMP ADDRESSABILITY
         DROP  R1            DROP DAIR PARM ADDRESSABILITY
         LA    R5,@6         SVC = 6 FOR LINKFAIL
         LA    R4,I0041      DAIR INSERT FOR POSS ERR MSG
         LINK  EP=IKJDAIR,ERRET=LINKFAIL    UNALLOCATE DATA SET
BLOW9    EQU   *             STAE RESUME ADDRESS
SMTDAIR2 DS    0H            TEST CASE TTTA7600
         LTR   R15,R15       TEST RETURN CODE
         BZ    NODRFL        BRANCH AROUND DAIRFAIL
         BAL   R14,DAIRFL    TO DAIRFAIL ROUTINE
         L     R2,WORKAREA   ACCESS WORKAREA
         CLI   TASKSWF-TSTCWORK(R2),HEXFF  HAS TASK SW. OCCURRED
         BE    STAEOFF       YES, GO TO REMOVE ESTAE AND RETURN
         B     A18000        BRANCH TO RETURN
NODRFL   EQU   *             COME HERE IF DAIR WAS OK
         LR    R14,R3        RESTORE RETURN ADDRESS
         BR    R14           RETURN TO CALLER                   YA00064
         DROP  R2            DROP DAPB18 ADDRESSABILITY
A10200   EQU   *             EQUATE LABEL TO THIS ADDRESS
         L     R2,WORKAREA   ACCESS PTR TO WORKAREA
         LA    R2,DDNSAVE-TSTCWORK(R2) CREATE PTR TO DDNAME SAVE AREA
         LA    R6,DA08DDN    OBTAIN ADDRESS OF DDNAME FROM
         MVC    @0(@8,R2),@0(R6) MOVE DDNAME TO HOLD AREA
         LR    R1,R7         RESTORE STARTING ADDRESS OF DCB
         USING DSNDSECT,R4   USE REG4 TO ADDRESS DSECT
         MVC   @0(@88,R1),MYDCB MOVE DCB INTO GOTTEN CORE
         USING IHADCB,R1     USE DCB DSECT TO LOCATE LABELS
         MVC   DCBDDNAM,@0(R2) MOVE DDNAME INTO DCB
         MVC   @88(@4,R1),LFORM MOVE IN OPEN ROUTINE INTO DCB
         MVC   @92(@4,R1),CLFORM MOVE CLOSE LIST FORM TO NEW CORE
         LA    R6,@88(@0,R1) PLACE ADDR OF ELIST
         LR    R0,R1         PLACE POINTER TO DCB INTO R0
         OPEN  ((0)),MF=(E,(6)) OPEN DATA SET FOR BLDL MACRO
BLOW3    EQU   *             RESUME ADDR FOR STAE
SMTOPEN  DS    0H            TEST CASE TTTA7600
         USING IHADCB,R7     USE REG7 TO ADDRESS DCB
         TM    DCBOFLGS,HEX10 TEST IF OPEN WAS SUCCESSFUL
         BO    A13190        IF OPEN WAS SUCCESSFUL THEN BRANCH
         LA    R2,M0045      MSG-UNABLE TO LOAD PGM
         LA    R3,M0249      MSG-OPEN ERROR
         BAL   R6,MSG1       GO OUTPUT MESSAGES
         B     A18000        BRANCH TO PUT MSG OUT TO TERM
************************************************************
*  THE DCB HAS BEEN CREATED AND OPENED.                     *
*  THE BLDL MACRO WILL BE ISSUED                            *
*************************************************************
A13190   EQU   *             EQUATE LABEL TO THIS ADDRESS
         LH    R5,LENGTH2    GET LENGTH OF MEMBER NAME
         L     R6,MEMBERPT   PLACE POINTER TO MEMBER NAME IN R6
         L     R2,WORKAREA   ACCESS WORKAREA PTR
         LA    R11,CWORKCMD-TSTCWORK(R2)  FUTURE BLDL AREA
         MVC   @0(@4,R11),LSTDSCP PLACE LIST DESCRIPTOR INTO LIST
**************************************************************
**LIST DESCRIPTOR FIELD CONSIST OF 2 HALFWORDS.THE FIRST TWO**
**BYTES IS THE NUMBER OF ENTRIES,THE NEXT 2 BYTES IS THE    **
**LENGTH OF EACH ENTRY                                      **
**************************************************************
         MVI   @4(R11),HEX40 MOVE A BLANK INTO NAME FIELD
         MVC   @5(@7,R11),@4(R11) SPREAD THRU OUT ENTIRE AREA
         BCTR  R5,R0         PREPARE FOR EX INSTRUCTION
         EX    R5,MEMMOVE    MOVE MEMBER NAME TO LIST
         LR    R5,R11        PLACE ADDR OF LIST INTO REG5
         BLDL  (7),(5)       ISSUE BLDL MACRO TO COMPLETE LIST
         LTR   R15,R15       CHECK TO SEE IF BLDL FOUND MEMBER
SMTBLDL  DS    0H            TEST CASE
         BZ    A12020        IF BLDL SUCCESSFUL THEN BRANCH
         LR    R4,R15        SAVE RETURN CODE
         BAL   R14,UNALLOC   GO CLOSE AND UNALLOC DATASET       YA00064
         BAL   R14,FREEDCB   GO FREE GETMAIN DCB AREA           YA00064
         LA    R2,M0045      MSG-UNABLE TO LOAD PGM
         LA    R3,M0250      MSG-BLDL ERROR CODE 4
         LA    R14,@4        PUT 4 IN REGISTER
         CR    R14,R4        IS RET CODE = 4
         BNE   BLDL8         NO, NEED ERR CODE 8 MSG
         BAL   R6,MSG1       GO OUTPUT MESSAGES
         B     A18000        RETURN TO MAINLINE
BLDL8    LA    R3,M0297      MSG-BLDL ERROR CODE 8
         BAL   R6,MSG1       GO OUTPUT MESSAGES
         B     A18000        RETURN TO MAINLINE
************************************************************
**IF WE'VE MADE IT THIS FAR WE ARE READY TO LOAD THE      **
**ASKED FOR PROGRAM INTO CORE.TO DO THIS WE WILL USE THE  **
**LOAD MACRO                                              **
************************************************************
A12020   EQU   *             EQUATE LABEL TO THIS ADDRESS
         TM    @26(R5),HEX20 TEST OVERLAY BIT
         BZ    OVLY          BRANCH IF OVERLAY BIT OFF
         OI    TSTDCB,HEX80  INDICATE  OVERLAY IN TCOMTAB
OVLY     EQU   *
         LA    R10,I0023     LOAD-INSERT FOR POSS ERR MSG
         L     R2,WORKAREA   PTR TO WORKAREA
         ST    R10,MIDHOLD-TSTCWORK(R2) STORE LOAD INSERT
         BAL   R14,TASKSW    SWITCH TO PPTCB FROM TEST TCB
**********************************************************************
** WHEN WE RETURN TO THIS POINT WE ARE NOW FUNCTIONING AS           **
** PART OF THE PROBLEM PROGRAM AND NOT AS PART OF TEST.             **
**********************************************************************
CONTLOAD BAL   R14,PPSTAE          SETUP FOR STAE UNDER PRB PROG
         LA    R5,@4(R0,R5)  LOAD LIBRARY ADDR OF PROGRAM
         LOAD  DE=(5),DCB=(7),ERRET=LOADFAIL BRING IN REQSTED PROGRAM
BLOW4    EQU   *             RESUME ADDR FOR STAE
SMTLOAD1 DS    0H            TEST CASE
************************************************************
** THE REQUESTED PROGRAM HAS BEEN LOADED IN. THE ENTRY    **
** POINT OF THE PROGRAM,RETURNED IN REG0,MUST BE SAVED TO **
** BE PASSED ON TO THE  PROBLEM PROGRAM                   **
************************************************************
*                            INTO REG1
         LA    R2,M0049      MSG-ENTRY POINT AT ...
         LR    R4,R0         LOAD EPA IN REG 4
         BAL   R6,MSG5       GO OUTPUT MESSAGE
         B     STAEOFF       REMOVE STAE REQUEST AND RETURN
         USING DSNDSECT,R2   USE REG2 TO ADDRESS DSECT
         EJECT
************************************************************
**THIS IS THE ENTRY POINT FOR THE DELETE FUNCTION OF      **
**LDF. THIS SUB-COMMAND RESULTS IN A MODULE  BEING        **
**REMOVED FROM CORE                                       **
************************************************************
DELETEIT EQU   *             EQUATE DELETE ENTRY PTR TO THIS ADDR
         L     R4,REGSAVE2   PLACE ADDR OF MY SAVE AREA INTO R4
         ST    R13,@4(R4)    STORE USER SAVE AREA ADDR INTO MY SAVE
         LR    R13,R4        PLACE MY SAVE AREA ADDR INTO R13
         LA    R10,STAEDEL   ACCESS ADDR OF STAE EXIT TAB
         L     R5,PARSEDEL   ACCESS PCL POINTER
         LA    R11,I0024     DELETE-INSERT FOR ERR MSG
         LA    R6,SPLISTDL   REG 6 = ESTAE PARAMETER LIST
         BAL   R14,STAEPREP  TO EXPAND STAE MACRO
         L     R5,TSTANSPL   PLACE ADDRESS OF PDE IN R5
         USING C,R5          ESTABLISH PDL ADDRESSABILITY
         LA    R5,PARSE1     ACCESS PDE PTR
         DROP  R5            DROP PDL ADDRESSABILITY
         USING PRSDSECT,R5   ESTABLISH PDE ADDRESSABILITY
         L     R2,WORKAREA   GET ADDRESS OF WORKAREA
         MVI   CWORKCMD-TSTCWORK(R2),BLANK  PLACE A BLANK INTO BYTE 1
*                            OF WA TO PAD WITH BLANK FOR DELETE MACRO
         MVC   CWORKCMD-TSTCWORK+@1(@7,R2),CWORKCMD-TSTCWORK(R2)
         LH    R4,LEN2       LOAD LENGTH OF NAME INTO REG4
         BCTR  R4,R0         PREPARE FOR EX INSTRUCTION
         L     R5,DSNPTR     GET MEMBER NAME POINTER
         DROP  R5
         EX    R4,DELMOVE    MOVE MODULE NAME TO WORKAREA
         LA    R10,I0024     DELETE-INSERT FOR ERR MSG
         ST    R10,MIDHOLD-TSTCWORK(R2) STORE DELETE INSERT
************************************************************
** AFTER RETURNING FROM PARSE AND PLACING THE MODULE NAME **
** IN THE WORK AREA WE BRANCH TO SWITCH REGISTERS THEREBY **
** PUTTING US UNDER THE PROBLEM PROGRAM TCB AND NOT UNDER **
** THE TEST TCB                                           **
************************************************************
         BAL   R14,TASKSW    SWITCH TO PROB PROG TCB
         BAL   R14,PPSTAE    SET UP FOR STAE UNDER PRB PROG
************************************************************
** AT THIS POINT WE ARE READY TO DELETE THE NAMED MODULE  **
************************************************************
CONTDEL  DELETE EPLOC=CWORKCMD-TSTCWORK(R2)     DELETE MODULE
         LTR   R15,R15       CHECK TO SEE THAT DELETE WAS SUCCESSFUL
SMTDEL   DS    0H            TEST CASE
         BZ    STAEOFF       RETURN TO TEST
************************************************************
** THE MODULE TO BE DELETED CAN NOT BE FOUND WE THEREFORE **
** PUT OUT A MESSAGE INDICATING THIS AND THEN BRANCH TO   **
** PUT US BACK INTO TEST ROUTINE                          **
************************************************************
         LA    R2,M0058      MSG-DELETE FAILED
         LA    R3,M0251      MSG-PGM NOT ON LOAD LIST
         LA    R4,I0024      DELETE INSERT
         BAL   R6,MSG2       GO OUTPUT MESSAGES
         OI    TSTFLGS4,TSTFLUSH TELL MAINLINE TO FLUSH STACK
         B     STAEOFF       REMOVE STAE REQUEST AND RETURN
         EJECT
************************************************************
** THIS IS THE ENTRY POINT FOR A GETMAIN COMMAND. WE WILL **
** SAVE REGISTERS,ESTABLISH ADDRESSABILITY,THEN SWITCH    **
** OURSELVES FROM TEST TO THE PROBLEM PROGRAM TCB. ONCE   **
** THIS HAS BEEN ACCOMPLISHED WE WILL ISSUE A GETMAIN     **
** FOR THE REQUIRED CORE. WE THEN RETURN                  **
************************************************************
GETIT    EQU   *             EQUATE GETMAIN ENTRY TO THIS ADDR
         L     R4,REGSAVE2   PLACE ADDR OF MY SAVE AREA INTO R4
         ST    R13,@4(R4)    PLACE USER SAVEAREA ADDR INTO MY SAVE
         LR    R13,R4        PLACE MY SAVE AREA ADDR INTO R13
         LA    R10,STAEGET   ACCESS ADDR OF STAE EXIT TABLE
         L     R5,PCLGET     ACCESS POINTER TO PCL
         LA    R11,I0025     GETMAIN-INSERT FOR ERR MSG
         LA    R6,SPLISTGT   REG 6 = ESTAE PARAMETER LIST
         BAL   R14,STAEPREP  TO EXPAND STAE MACRO
         L     R3,TSTANSPL   PLACE ADDR TO PDE INTO R3
         USING B,R3          ESTABLISH PDL ADDRESSABILITY
         LA    R3,GETMAIN1   ACCESS PDE POINTER
         DROP  R3            DROP PDL ADDRESSABILITY
         USING IDENTGM,R3    ESTABLISH PDE ADDRESSABILITY
         L     R1,STRNGPTR   PLACE POINTER TO INTER IN R1
         LH    R6,LENDSNME   PLACE LENGTH OF OF INTEGER IN R6
         BCTR   R6,R0        DECREMENT R6 BY 1 FOR EXECUTE CMD
         EX    R6,A13000     PACK INTEGER INTO WORKAREA
         CVB   R4,@0(R2)     CONVERT INTEGER TO BINARY
         LTR   R4,R4         TEST GETMAIN COUNT
         BNZ   GETOK         COUNT NOT ZERO, BRANCH
         LA    R2,M0047      MSG-0 BYTES INVALID CNT
         LA    R3,ZERO       NO SECOND LEVEL MESSAGE
         BAL   R6,MSG1       GO OUTPUT MESSAGES
         B     A18000        RETURN TO MAINLINE
GETOK    L     R1,SPOINTER   PLACE SUBPOOL POINTER IN REG1
         LTR   R1,R1         SEE IF WE HAVE A SUBPOOL SPECIFIED
         BNZ   A13010        IF ENTERED THEN AVOID NEXT CODE
         SR    R5,R5         DEFAULT TO SUBPOOL ZERO
         B     A13020        BRANCH TO ISSUE GETMAIN TO SP=0
A13010   EQU   *             EQUATE LABEL TO THIS ADDRESS
         LH    R6,SPLENGTH   GET LENGTH OF INTEGER FROM PDE
         BCTR  R6,R0         DECREMENT R6 TO FIT EX INSTRUCTION
         EX    R6,A13000     PACK THIS NUMBER INTO WORKAREA
         CVB   R5,@0(R2)     CONVERT SUBPOOL INTEGER TO BINARY
A13020   EQU   *             EQUATE LABEL TO THIS ADDRESS
         XR    R7,R7         INDICATE EQUATE NOT SPECIFIED
         TM    EQUFLG,HEX80  TEST FOR PRESENCE OF EQUATE KEYWORD
         BNO   NOSYM         IF NO EQUATE KEYWORD, BRANCH
         L     R7,SYMTABLE   ACCESS PTR TO IN-CORE SYMBOL TABLE
         USING SYMDSECT,R7   ESTABLISH SYMTABLE ENTRY ADDRESSABILITY
CHKSYM   EQU   *
         LTR   R7,R7         TEST IF END OF CHAIN
         BZ    ENDSRCH       IF ZERO THEN SEARCH ENDED
         LH    R6,EQULEN     ACCESS LENGTH OF SYMBOL IN PDE
         LH    R8,SYMLNGTH   ACCESS LENGTH OF SYMTABLE ENTRY
         CR    R8,R6         COMPARE SYMBOL LENGTHS
         BNE   REINIT        GET NEXT SYMTAB ENTRY
         L     R8,EQUPTR     ACCESS PTR TO SYMBOL IN PDE
         BCTR  R6,R0         DECREMENT FOR EXECUTE
         EX    R6,SYMCOMP    TO COMPARE SYMBOLS
         BE    SKIPGTMN      DUPLICATE FOUND, BYPASS GETMAIN
REINIT   EQU   *
         L     R7,CHAIN      ACCESS PTR TO NEXT SYMTAB ENTRY
         B     CHKSYM        IF NOT, TEST FOR DUPLICATE
*
ENDSRCH  EQU   *
         LH    R6,EQULEN     ACCESS SYMBOL LENGTH
         LA    R7,@16(R6)    LENGTH OF FUTURE SYMTAB ENTRY
         LA    R2,CWORKCMD-TSTCWORK(R2) COMMAND PORTION OF WORKAREA
         MVC   @4(LISTSIZE,R2),GETLIST  LIST FORM OF GETMAIN
         LA    R1,@4(R2)     PTR TO LIST FORM
         GETMAIN EC,LV=(7),SP=1,A=(2),MF=(E,(1))  ISSUE GETMAIN
         LTR   R15,R15       TEST RETURN CODE
         BZ    ENTERSYM      IF RC=0, BRANCH
         LA    R4,TEN        IMPLIES SVC 10 FAILED
         B     GETERR        GO OUTPUT ERROR MSG
ENTERSYM EQU   *
         L     R8,SYMTABLE   ACCESS PTR TO LAST SYMTAB ENTRY
         L     R7,@0(R2)     ACCESS PTR TO FUTURE SYMTAB ENTRY
         ST    R8,CHAIN      STORE LATEST PTR IN FUTURE ENTRY
         ST    R7,SYMTABLE   FUTURE ENTRY BECOMES LATEST ENTRY
         STH   R6,SYMLNGTH   STORE SYMBOL LENGTH
         BCTR  R6,R0         DECREMENT FOR EXECUTE
         L     R8,EQUPTR     ACCESS PTR TO SYMBOL FROM PDE
         EX    R6,SYMMVC     MOVE SYMBOL
SKIPGTMN EQU   *
         MVI   SYMBOL,BLANK  MAKE SYMTABLE ENTRY INACTIVE IN CASE OF
*                            GETMAIN FAILURE
         IC    R6,@0(R8)     STORE FIRST CHARACTER IN R6
         MVC   ATTRTYPE(PARMSIZE),SYMPARM  MOVE IN CONSTANTS
         XC    ADDRSYM(@4),ADDRSYM ZERO CURRENT ADDRESS
NOSYM    EQU   *
         LA    R10,I0025     GETMAIN-INSERT FOR ERR MSG
         L     R2,WORKAREA   PTR TO WORKAREA
         ST    R10,MIDHOLD-TSTCWORK(R2) STORE GETMAIN INSERT
         BAL   R14,TASKSW    BRANCH TO SWITCH US TO THE PROBLEM PROG
*                            OF PDL IN REG2
CONTGET  EQU   *
************************************************************
** WHEN WE RETURN TO THIS POINT WE ARE NOW UNDER THE      **
** PROBLEM PROGRAM TASK AND NOT UNDER TEST. SINCE WE      **
** NEED OUR REGISTERS LATER,WE MUST SAVE THEM NOW IN      **
** REGSAVE3                                               **
************************************************************
************************************************************
**    REGISTER 4 = LENGTH OF CORE TO ISSUE GETMAIN        **
**    REGISTER 5 = SUBPOOL NUMBER TO GET CORE             **
**    REGISTER 1 = ADDRESS OF AREA FOR GETMAIN TO BUILD   **
**                 PARAMETER LIST IN BEFORE ISSUING SVC 10 *
************************************************************
         BAL   R14,PPSTAE    BRANCH TO STAE SETUP UNDER PPTCB
         LA    R2,CWORKCMD-TSTCWORK(R2) ACCESS COMMAND PORTION OF WRKA
         LA    R1,@4(R2)     PLACE ADDRESS OF LIST FORM IN R1
         MVC   @4(LISTSIZE,R2),GETLIST    MOVE LIST FORM INTO WA
         GETMAIN EC,LV=(4),SP=(5),A=(2),MF=(E,(1)) ISSUE CONDITIONAL
*                            GETMAIN WITH ADDRESS RETURN IN WORKAREA
         LTR   R15,R15       TEST IF GETMAIN WAS SUCCESSFUL
SMTGET02 DS    0H            TEST CASE
         BZ    A14001        IF SUCCESSFUL THEN BRANCH
         LA    R4,TEN        IMPLIES SVC 10 FAILED
         B     GETERR        GO OUTPUT ERROR MSG
A14001   EQU   *             EQUATE LABEL TO THIS ADDRESS
         LTR   R7,R7         TEST IF EQUATE SPECIFIED
         BZ    DONTEQU       SKIP EQUATE PROCESSING
         STC   R6,SYMBOL     ACTIVATE SYMTABLE ENTRY
         MVC   ADDRSYM(@4),@0(R2) ENTER EQUATED ADDRESS IN SYMTAB ENTRY
         DROP  R7
DONTEQU  EQU   *
         L     R4,@0(R2)     LOAD REG4 WITH ADDR OF STORAGE
         LA    R2,M0046      MSG-STORAGE AT ...
         BAL   R6,MSG5       GO OUTPUT MESSAGE
         B     STAEOFF       REMOVE STAE REQUEST AND RETURN
         EJECT
************************************************************
** THIS IS THE ENTRY POINT FOR A FREEMAIN COMMAND.WE      **
** WILL SAVE REGISTERS,ESTABLISH ADDRESSABILITY,THEN      **
** PARSE WILL SCAN OFF THE SUB-PARAMETERS. ONCE THIS      **
** HAS BEEN ACCOMPLISHED WE WILL SWITCH FROM TEST TO THE  **
** PROBLEM PROGRAM TASK TO ISSUE THE FREEMAIN             **
************************************************************
FREEALL  EQU   *             EQUATE FREEMAIN TO THIS ADDR
         L     R4,REGSAVE2   PLACE ADDRESS OF MY SAVEAREA INTO R4
         ST    R13,@4(R4)    PLACE ADDR OF USER SAVEAREA INTO MY AREA
         LR    R13,R4        PLACE MY SAVEAREA ADDR INTO R13
         LA    R10,STAEFREE  ACCESS ADDR OF STAE TABLE
         L     R5,PARSEIT    ACCESS POINTER TO PCL
         LA    R11,I0026     FREEMAIN-INSERT FOR POSSIBLE MSG
         LA    R6,SPLISTFR   REG 6= ESTAE PARAMETER LIST
         BAL   R14,STAEPREP  TO EXPAND STAE MACRO
         L     R10,TSTANSPL  PLACE ADDRESS OF PDE INTO R10
         USING A,R10         ESTABLISH PDL ADDRESSABILITY
         LA    R10,FREEMAN1  ACCESS PTR TO PDE
         DROP  R10           DROP PDL ADDRESSABILITY
************************************************************
** UPON RETURN FROM SWITCHING TO PROBLEM PROGRAM TASK,    **
** WE WILL ACCESS THE PDL POINTED TO BY REGISTER 10. THE  **
** LENGTH OF THE AREA TO BE FREED WILL BE IN EBCDIC AND   **
** MUST BE CONVERTED TO BINARY. THE ABSOLUTE ADDRESS      **
** WILL BE RETURNED BY CONVERT AND POINTED TO BY CONAREA  **
** IN TCOMTAB. A CHECK WILL BE MADE TO SEE IF A SUBPOOL   **
** WAS SPECIFIED. IF SO THIS TOO MUST BE CONVERTED TO     **
** BINARY                                                 **
************************************************************
         USING IDENTFM,R10   USE REG10 TO ADDRESS PDE
         L     R1,COREPTR    PLACE POINTER TO INTEGER IN R1
         LH    R6,LENGTHFM   GET LENGTH OF INTEGER INTO R6
         BCTR  R6,R0         DECREMENT LENGTH FOR EX INSTRUCTION
         EX    R6,A13000     PACK THIS INTO WORKAREA
         CVB   R0,@0(R2)     CONVERT THIS TO BINARY
         DROP  R10           DROP PDE ADDRESSABILITY
         L     R10,TSTANSPL  ACCESS PDL POINTER
         USING A,R10         ESTABLISH PDL ADDRESSABILITY
         SR    R7,R7         CLEAR REG 7 FOR SUBPOOL NUMB
         OC    FREEMAN3(@2),FREEMAN3 TEST IF SUBPOOL SPECIFIED
         BZ    A14012        IF NOT SPECIFIED, BRANCH
         LA    R10,FREEMAN4  ACCESS IDENT PDE
         DROP  R10           DROP PREVIOUS PDE ADDRESSABILITY
         USING IDENTFM,R10   ESTABLISH IDENT PDE ADDRESSABILITY
         L     R1,COREPTR    ACCESS PTR TO SUBPOOL STRING
************************************************************
** AT THIS TIME SUBPOOL WAS SPECIFIED SO WE MUST CONVERT  **
**    THE INTEGER TO BINARY                               **
************************************************************
         LH    R6,LENGTHFM   ACCESS LENGTH OF SUBPOOL STRING
         BCTR  R6,R0         DECREMENT LENGTH FOR EX INSTRUCTION
         EX    R6,A13000     PACK THIS VALUE INTO THE WORKAREA
         CVB   R4,@0(R2)     CONVERT THIS TO BINARY
         SLL   R4,@24        MOVE SUBPOOL TO HIGH ORDER BYTE
         LR    R7,R4         SUBPOOL NUMB TO REG 7
         SRL   R7,@24        RIGHT-JUST. IN REG 7
A14012   EQU   *             ENTER HERE IF NO SUBPOOL SPECIFIED
         DROP  R10           DROP PREVIOUS PDE ADDRESSABILITY
         L     R10,TSTANSPL  ACCESS ADDR OF PDL
         USING A,R10         ESTABLISH PDL ADDRESSABILITY
         LA    R10,FREEMAN2  ACCESS ADDR OF PDE
         DROP  R10           DROP PDL ADDRESSABILITY
         USING IKJPARMA,R10  ESTABLISH PDE ADDRESSABILITY
         L     R6,PDEUSER    ACCESS ADDR IN USERWORD
         LR    R4,R0         SAVE REGISTER ZERO
         LA    R10,I0026     FREEMAIN-INSERT FOR POSSIBLE MSG
         L     R2,WORKAREA   PTR TO WORKAREA
         ST    R10,MIDHOLD-TSTCWORK(R2) STORE FREEMAIN INSERT
         BAL   R14,TASKSW    SWITCH TO PROB PROG TCB
CONTFREE BAL   R14,PPSTAE    SETUP FOR STAE UNDER PRB PROG
         LR    R0,R4         RESTORE REGISTER 0
         LR    R1,R6         ACCESS ADDR IN USERWORD
         LA    R1,@0(R1)     CLEAR HIGH ORDER BYTE OF ADDRESS
         FREEMAIN RC,LV=(0),A=(1),SP=(R7)  ISSUE FREEMAIN
         LTR   R15,R15       TEST RETURN CODE
         BZ    CONTFRE1      BRANCH IF ALL OK
         LA    R4,@120       IMPLIES SVC 120 FAILED
         B     GETERR        GO OUTPUT ERROR MESSAGE
CONTFRE1 B     STAEOFF       REMOVE STAE REQUEST AND RETURN
         EJECT
************************************************************
** THIS ROUTINE WILL SWITCH US FROM TEST TCB WHICH WE ARE **
** NOW RUNNING UNDER TO PROBLEM PROGRAM TCB.SO THAT WE    **
** WILL LOAD THE PROGRAM UNDER THE PROBLEM PROGRAM. THIS  **
** IS ACCOMPLISHED BY PLACING OUR REGISTERS INTO THE SVRB **
** GENERAL PURPOSE SAVE AREA (RBGRSAVE) SO THAT WHEN      **
** CONTROL IS RETURNED TO THE PROBLEM PROGRAM OUR         **
** REGISTERS ARE LOADED. WE ALSO CHANGE THE LOCATION      **
** COUNTER FOUND IN RBOPSW OF THE PROGRAM REQUEST BLOCK   **
** SO THAT AFTER OUR REGISTERS HAVE REPLACED THE PROBLEM  **
** PROGRAMS REGISTERS CONTROL IS RETURNED BACK INTO THIS  **
** PROGRAM AT THE POINT WHERE WE WERE AFTER  BRANCHING    **
** TO THIS ROUTINE.                                       **
** IF A NON ZERO RETURN CODE IS ENCOUNTERED FROM SVC 97,  **
** RETURN IS MADE TO 4(R14).                              **
************************************************************
TASKSW   EQU   *
         L     R1,PPTCB      PLACE PROBLEM PROGRAM TCB ADDR
*                            INTO REG1
         L     R2,WORKAREA   ACCESS WORKAREA PTR
         LA    R11,CWORKLDF-TSTCWORK(R2) FUTURE RB REG SAVE AREA
         USING TCB,R1        USE REG1 TO ADDRESS TASK CONTROL BLK
         L     R1,TCBRBP     LOAD RB ADDRESS INTO REG1
         DROP  R1            DROP R1
         USING RBSECT,R1     USE REG1 TO ADDRESS REQUEST BLOCK
         MVC   @0(@64,R11),RBGRSAVE MOVE RB REG SAVE AREA INTO
*                            AREA FROM GETMAIN
         L     R1,RBLINK     PLACE ADDR OF NEXT RB INTO R1
         MVC   TSTGO(@4),RBOPSW+@4 MOVE INSTRUCTION COUNTER
*                            FROM RB INTO GETMAIN SAVE AREA
         DROP  R1            DROP R1
         L     R1,REGSAVE3   REGISTER SAVE AREA PARM FOR SVC
         STM   R0,R15,@0(R1) STORE REG INTO MY SAVE AREA
         LR    R4,R1         PLACE ADDR OF REG AREA IN R4
         L     R3,PPTCB      PLACE PROB PROG TCB ADDR INTO R1
         LR    R5,R14        SAVE RETURN ADDR ACROSS SVC.
* ISSUE SVC WHICH WILL PLACE MY REGISTERS INTO PROB PROG SVRB
         IKJEGS9G AGPR,TCBADDR=(R3),VALUE=(R4),MF=(E,(R2))
         LTR   R15,R15       CHECK RETURN CODE
         BZ    TASKCONT      CONTINUE IF ALL OK
TASKERR  EQU   *             SVC 97 ERROR PROCESSING
         LA    R2,@12        REG 2 IS 12 FOR COMPARISON
         CR    R15,R2        COMPARE 12 TO RET CODE
         BH    RET           IS GREATER THAN 12, BACK TO MNL
         B     SVCFAIL       IF 12 OR LESS, PUT OUT ERROR MSG
TASKCONT EQU   *             CONTINUE PROCESSING
*************************************************************
** AT THIS TIME WE SHOULD HAVE SWITCHED THE PROBLEM PROGRAM**
** REGISTERS WITH MY REGISTERS.NOW WE CHANGE THE           **
** INSTRUCTION COUNTER FOUND IN THE PRB                    **
*************************************************************
         LA    R5,0(R5)      CLEAR 1ST BYTE OF RESUME ADDRESS
************************************************************
**AT THIS POINT REG5 CONTAINS MY RETURN ADDRESS WITHIN THE**
**MAINLINE PORTION OF THIS PROGRAM. REG3 CONTAINS THE     **
**PROBLEM PROG TCB ADDRESS WHICH WILL BE SEARCHED FOR A   **
**PRB. ONCE FOUND THE RPOPSW FIELD WILL BE CHANGED TO     **
**CONTAIN MY RETURN ADDRESS                               **
************************************************************
         IKJEGS9G OPSW,TCBADDR=(R3),VALUE=(R5),MF=(E,(R2))
         LTR   R15,R15       CHECK RETURN CODE
         BNZ   TASKERR       SVC FAILED
*
         L     R3,PPRB        ACCESS ADDR OF NEW RB
         USING RBSECT,R3      USE REG3 TO ADDRESS REQUEST BLOCK
         MVC   TSTGO+@4(@1),RBWCF SAVE WAIT COUNT OF NEW RB
         DROP  R3             DROP REG3
         IKJEGS9G WCF,TCBADDR=(R3),MF=(E,(R2))
         LTR   R15,R15        CHECK RETURN CODE
         BNZ   TASKERR        SVC FAILED
*
         LA    R4,I0087      IKJEGLDF INSERT
         LA    R5,@8         SVC = 8 FOR LINKFAIL
         LOAD  EP=IKJEGLDF,ERRET=LINKFAIL  LOAD MYSELF
BLOW8    EQU   *              RESUME ADDR FOR STAE EXIT
SMTLOAD2 DS    0H             TEST CASE TTTA7600
         XR    R15,R15        ZERO REGISTER
         L     R3,OUTBUF      ACCESS PTR TO OUTBUF
         ST    R15,@0(R3)     STORE ZEROES IN BUFFER- NO MSG
         OI    TSTFLGS2,TSTLDF
         LA    R15,@4         PLACE SUCCESSFUL JOB RETURN CODE
*                             INTO REG15
         L     R13,REGSAVE1   RESTORE CALLERS SAVE AREA
         RETURN (14,12),RC=(15) RETURN TO MAINLINE TEST
         SPACE 1
SVCFAIL  LR    R4,R10        LOAD REG4 WITH INSERT
         LA    R2,M0104      MSG-... FAILED, CMMND SYS ERR
         LA    R3,M0283      MSG-SVC 97 RET CODE NONZERO
         BAL   R6,MSG2       GO OUTPUT MESSAGES
         B     A18000        RETURN TO MAINLINE
         EJECT
************************************************************
*
*          MISCELLANEOUS SUBROUTINES
*
******************************************************************
PPSTAE   EQU   *
         L     R1,WORKAREA         ACCESS WORKAREA PTR
         MVI   TASKSWF-TSTCWORK(R1),HEXFF  SET TASK SW INDICATOR ON
         MVC   @0(STAELEN,R1),LISTSTAE LIST FORM OF ESTAE MACRO
         LA    R10,STAEXIT         STAE EXIT ROUTINE
         LR    R3,R14              SAVE RETURN REGISTER
         ESTAE (R10),RECORD=YES,MF=(E,(R1))   ISSUE ESTAE
         LTR   R15,R15             TEST STAE RETURN CODE
         BZ    PPGOBACK            IF ZERO BRANCH AROUND MSG
         OI    TSTFLGS4,TSTESTAE   TURN ON TSTESTAE FOR IO
         LA    R2,M0103            MSG-NOT ENOUGH CORE
         LA    R3,ZERO             NO SECOND LEVEL MESSAGE
         BAL   R6,MSG1             GO OUTPUT MESSAGES
         NI    TSTFLGS4,HEXFF-TSTESTAE  TURN OFF TSTESTAE
         OI    TSTFLGS4,TSTFLUSH   TELL MAINLINE TO FLUSH STACK
         B     TSTSVC              RETURN VIA SVC
PPGOBACK EQU   *                   LOAD R2 AND RETURN
         LR    R14,R3              RESTORE RETURN REGISTER
         L     R2,WORKAREA         INIT REG 2 WITH WORKAREA
         BR    R14                 RETURN
******************************************************************
GETREGS  EQU   *
         L     R2,@16              ACCESS PTR TO CVT
         USING CVT,R2              ESTABLISH CVT ADDRESSABILITY
         L     R4,CVTTCBP          ACCESS TCB PTR
         L     R4,@4(R4)           ACCESS CURRENT TCB PTR
         USING TCB,R4              ESTABLISH TCB ADDRESSABILITY
         L     R9,TCBTRN           ACCESS PTR TO TCOMTAB
         DROP  R2                  DROP CVT  ADDRESSABILITY
         BR    R11                 RETURN TO CALLER
******************************************************************
STAEXIT  EQU   *                   STAE EXIT FOR PP
         USING STAEXIT,R15         USE ENTRY POINT AS BASE
         L     R12,BASE            START ADDR OF PROGRAM
         DROP  R15                 DROP ENTRY POINT ADDRESSABILITY
         USING BASELOC,R12         ESTABLISH PROGRAM ADDRESSABILITY
         BAL   R11,GETREGS         TO GET PTR TO TCOMTAB
         LR    R8,R14              SAVE RETURN ADDRESS
         LA    R7,M0058            MSG-... FAILED
         LA    R5,M0253            MSG-SYS ABEND CODE ...
         L     R2,WORKAREA         PTR TO WORKAREA
         LA    R3,MSGINSRT-TSTCWORK(R2)  ACCESS WORKAREA FOR INSERT
         UNPK  @0(@5,R3),TCBCMPC(@3)  PREPARE CODE FOR CONVERT
         TR    @0(@3,R3),TABLE-@240  CONVERT TO EBCDIC
         LA    R6,@7               MESSAGE INSERT LENGTH OF 7
         STH   R6,MSGINSHD-TSTCWORK(R2)  STORE MESSAGE LENGTH
         L     R4,MIDHOLD-TSTCWORK(R2) R4=INSERT FOR MSG
         BAL   R6,MSG6
         LA    R15,@4              SET RETURN CODE
         LA    R0,RETRY2           INDICATE ADDRESS OF RETRY RTN
         DROP  R4                  DROP TCB  ADDRESSABILITY
         OI    TSTFLGS4,TSTFLUSH   TELL MAINLINE TO FLUSH STACK
         BR    R8                  RETURN TO ABEND
******************************************************************
RETRY2   EQU   *
         USING RETRY2,R15          USE ENTRY POINT AS BASE
         L     R12,BASE            START ADDR OF PROGRAM
         DROP  R15                 DROP ENTRY POINT ADDRESSABILITY
         USING BASELOC,R12         ESTABLISH PROGRAM ADDRESSABILITY
         BAL   R11,GETREGS         TO GET PTR TO TCOMTAB
         B     STAEOFF             RETURN VIA SVC
******************************************************************
STAEOFF  EQU   *
         LR    R2,R15        SAVE RET CODE OVER ESTAE
         ESTAE 0             REMOVE ESTAE REQUEST
         LR    R15,R2        RESTORE RETURN CODE
         NI    TSTFLGS4,HEXFF-TSTRERTN  SHUT OFF RETRY FLAG
         B     TSTSVC        RETURN VIA SVC
******************************************************************
*  R5 = @ PCL
* R10 = @ STAE EXIT TAB
* R11 = POSSIBLE COMMAND SYSTEM ERROR MSG
******************************************************************
STAEPREP EQU   *             EXPAND STAE MACRO
         L     R2,WORKAREA   ACCESS ADDR OF WORKAREA
         MVI   TASKSWF-TSTCWORK(R2),HEX00  SET TASKSWITCH IND. OFF
         MVC   CWORKCMD-TSTCWORK(STAELEN,R2),LISTSTAE PUT STAE IN WKA
         LA    R1,CWORKCMD-TSTCWORK(R2)  PARAMETER TO STAE
         L     R10,TSTSTAE   ADDR OF STAE EXIT ROUTINE
         ST    R12,@68(R13)  SAVE BASE REGISTER
         LR    R3,R14        RETAIN RETURN ADDR IN REG 3
         LR    R8,R14        SAVE RETURN REGISTER
         ESTAE (R10),PARAM=(R6),RECORD=YES,MF=(E,(R1))  ISSUE ESTAE
         LTR   R15,R15       TEST FOR NON ZERO RETURN CODE
SMTSTAE  DS    0H            TEST CASE TTTA7600
         BZ    SETPARM       IF ZERO SETUP FOR PARSE
         STC   R15,TSTESTRC  STORE RETURN CODE FROM ESTAE
         LA    R15,@24       SEND RET CODE=24 TO MAINLINE
         B     RET1          BRANCH TO RETURN TO MAINLINE
SETPARM  EQU   *             SET UP PARAMETER LIST FOR PARSE
         LA    R1,CWORKCMD-TSTCWORK(R2) ACCESS COMMAND PORTION
         USING PPL,R1        ESTABLISH PPL ADDRESSABILITY
         MVC   PPLUPT(@4),TSTUPT PTR TO UPT FOR PARSE
         MVC   PPLECT(@4),TSTECT PTR TO ECT FOR PARSE
         MVC   PPLECB(@4),TSTCPECB PTR TO CP ECB FOR PARSE
         ST    R5,PPLPCL      PTR TO PCL FOR PARSE
         ST    R13,PPLUWA     PTR TO MY SAVE AREA
         LA    R3,TSTANSPL    ACCESS ADDR OF ANSWER PLACE
         ST    R3,PPLANS      PTR TO ANSWER PLACE FOR PARSE
         MVC   PPLCBUF(@4),INBUF PTR TO COMMAND BUFFER FOR PARSE
         DROP  R1            DROP PPL ADDRESSABILITY
         LA    R5,@6         SVC = 6 FOR LINKFAIL
         LA    R4,I0040      PARSE-INSERT FOR POSSIBLE MSG
         LINK  EP=IKJPARS,ERRET=LINKFAIL LINK TO PARS
BLOW1    EQU   *
SMTPARS  DS    0H            TEST CASE TTTA7600
         BAL   R14,CHKCDE    TO CHECK RETURN CODE
         LR    R14,R8        RESTORE RETRUN REGISTER
         BR    R14           RETURN TO COMMAND PROCESSING
CHKCDE   EQU   *
         B     RETCDTAB(R15) BRANCH ACCORDING TO CODE
RETCDTAB BR    R14           BRANCH BACK OF CODE = 0
         BR    R14           FOR ALIGNMENT PURPOSES
         B     RETCDE4       RETURN CODE = 4
         B     RETCDE8       RETURN CODE = 8
         B     RETCDE12      RETURN CODE = 12
         B     RETCDE16      RETURN CODE = 16
         B     RETCDE20      RETURN CODE = 20
*
RETCDE20 EQU   *             ENTER IF RETURN CODE = 20
         L     R15,CODESAVE-TSTCWORK(R2) ACCESS SAVED RETURN CODE
         LA    R14,@16       TO TEST RETURN CODE
         CR    R15,R14       TEST RETURN CODE
         BE    RET           RETURN 16 TO MAINLINE
         BH    SEND20        RETURN 20 TO MAINLINE
RETCDE4  EQU   *             ENTER FOR R. C. OF 4 (UNABLE TO PROMPT)
         OI    TSTFLGS4,TSTFLUSH TELL MNLINE TO FLUSH STACK
         XR    R15,R15       RETURN 0 TO MAINLINE
         B     RET           RETURN TO MAINLINE
SEND20   EQU   *
         LA    R15,@20       RETURN CODE OF 20 TO MAINLINE
         B     RET           RETURN TO MAINLINE
RETCDE12 EQU   *             ENTER IF PARSE RET CODE = 12
* INVALID PARMS FROM SUBCOMMAND
         LA    R3,M0277      MSG-PARSE ERROR CODE 12
         LA    R2,M0104      MSG-... FAILED COMMND SYS ERR
         LR    R4,R11        LOAD REG4 WITH INSERT
         BAL   R6,MSG2       GO OUTPUT MESSAGES
         B     A18000        RETURN TO MAINLINE
RETCDE16 EQU   *             ENTER IF R. C. = 16 (NO STORAGE FOR PDE)
         LA    R2,M0103      MSG-NOT ENOUGH MAIN STOR.
         LA    R3,ZERO       NO SECOND LEVEL MESSAGE
         BAL   R6,MSG1       GO OUTPUT MESSAGES
         B     A18000        COMMON MSG OUTPUT ROUTINE
RETCDE8  EQU   *             ENTER IF PARSE RET CODE = 8 (ATTENTION)
         LA    R15,@16       SET RETURN CODE TO MAINLINE
         B     RET           RETURN TO MAINLINE
******************************************************************
RETRY    EQU   *             STAE RETRY ENTRY POINT
         L     R2,@16        ACCESS PTR TO CVT
         USING CVT,R2        ESTABLISH CVT ADDRESSABILITY
         L     R3,CVTTCBP    ACCESS TCB PTR
         L     R3,@4(R3)     ACCESS CURRENT TCB PTR
         USING TCB,R3        ESTABLISH TCB ADDRESSABILITY
         L     R9,TCBTRN     PTR TO TCOMTAB
         L     R13,REGSAVE2  ACCESS SAVE AREA
         L     R12,@68(R13)  ACCESS BASE REGISTER
         DROP  R2            DROP CVT ADDRESSABILITY
         DROP  R3            DROP TCB ADDRESSABILITY
         NI    TSTFLGS2,HEXFF-TSTLDF TURN OF LDF FLAG
         LA    R15,@20       RETURN CODE TO MAINLINE
         OI    TSTFLGS4,TSTFLUSH   TELL MAINLINE TO FLUSH STACK
         B     RET           RETURN TO MAINLINE
******************************************************************
A18000   EQU   *             EQUATE LABEL TO THIS ADDRESS
         OI    TSTFLGS4,TSTFLUSH   TELL MAINLINE TO FLUSH STACK
         CH    R15,ATTNCODE  COMPARE RET CODE TO 16
         BNL   RET           RET WITH CODE NOT LESS 16
GOHOME   EQU   *
         SR    R15,R15       SEND BACK ZERO RETRUN CODE
RET      EQU   *             REMOVE ESTAE AND RETURN
         LR    R2,R15        SAVE RET CODE OVER ESTAE
         ESTAE 0             REMOVE ESTAE REQUEST
         LR    R15,R2        RESTORE RETURN CODE
         NI    TSTFLGS4,HEXFF-TSTRERTN  SHUT OFF RETRY FLAG
RET1     EQU   *             RETURN TO MAINLINE
         L     R13,@4(R13)   RESTORE SAVE AREA ADDR
         RETURN (14,12),RC=(15) RETURN TO CALLER
         EJECT
******************************************************************
*          VALIDITY CHECK ROUTINES FROM PARSE
*           (1) LOADVLCK - LOAD VALIDITY CHECK RTN
*           (2) ADDRVLCK - FREEMAIN VALIDITY CHECK RTN
******************************************************************
LOADVLCK EQU   *             LOAD VALIDITY CHECK ROUTINE
         SAVE  (14,12)       SAVE CALLERS REGISTERS
         DROP  R12           DROP R12 AS BASE REGISTER
         USING LOADVLCK,R15  USE ENTRY POINT AS BASE REGISTER
         L     R2,@4(R1)     PLACE ADDRESS IF MY SAVEAREA INTO R2
         LM    R3,R12,@32(R2) RELOAD MY REGISTERS FROM SAVEAREA
         DROP  R15           DROP R15 AS BASE REGISTER
         USING BASELOC,R12   USE REG12 AS BASE REGISTER
         L     R3,REGSAVE3   GET MY SAVE AREA ADDRESS FROM TCOMTAB
         ST    R13,@4(R3)    PLACE BACK POINTER INTO MY REG
         LR    R13,R3        POINT R13 TO MY REGISTERS SAVE
         SR    R14,R14       CLEAR REG 14
         L     R4,OUTBUF     ACCESS OUTBUF
         ST    R14,ZERO(R4)  CLEAR 1ST WORD OF OUTBUF
         L     R10,@0(R1)    ACCESS ADDRESS OF PDE
         USING PARDSECT,R10  ESTABLISH PDE ADDRESSABILITY
         L     R2,WORKAREA   ACCESS PTR TO WORKAREA
         TM    FLAGS2,HEX80  TEST FOR PRESENCE OF MEMBERNAME
         BNO   INVLDMSG      BRANCH TO PUT OUT DIAGNOSTIC
         MVI   PASSWORD-TSTCWORK(R2),BLANK MOVE IN BLANK
         MVC   PASSWORD-TSTCWORK+@1(@7,R2),PASSWORD-TSTCWORK(R2) BLANK
         TM    FLAGS3,HEX80  TEST FOR PRESENCE OF PASSWORD
         BNO   GOPARSE       BRANCH TO RETURN
         LH    R4,LENGTH3    ACCESS LENGTH OF PASSWORD
         BCTR  R4,R0         DECREMENT FOR EXECUTE
         L     R5,PSWRDPTR   ACCESS ADDR OF ADDR STRING
         EX    R4,MOVEPASS   PUT PASSWOR IN WORKAREA
GOPARSE  SR    R15,R15       ZERO RETURN CODE
         B     A16030        BRANCH TO RETURN
INVLDMSG EQU   *             PUT OUT DIAGNOSTIC MSG
         LA    R2,M0048      MSG-MEMBER NAME MISSING
         LA    R3,ZERO       NO SECOND LEVEL MESSAGE
         BAL   R6,MSG1       GO OUTPUT MESSAGES
         B     GOIO          GO CHECK RETURN CODE
         SPACE
ADDRVLCK EQU   *             FREEMAIN VALIDITY CHECK ROUTINE
         SAVE  (14,12)       SAVE REG
         DROP  R12           REMOVE REG12 AS BASE REG
         USING ADDRVLCK,R15  USE REG15 AS BASE REG
         L     R2,@4(R1)     PLACE ADDRESS OF MY SAVEAREA INTO R2
         LM    R3,R12,@32(R2) LOAD BACK MY REGISTERS FROM SAVEAREA
         DROP  R15           REMOVE REG15 AS BASE REG
         USING BASELOC,R12   USE REG12 AS BASE REG
         L     R3,REGSAVE3   GET MY SAVE AREA ADDRESS FROM TCOMTAB
         ST    R13,@4(R3)    PLACE BACK POINTER INTO MY REG
         LR    R13,R3        POINT R13 TO MY REGISTERS
         SR    R14,R14       CLEAR REG 14
         L     R4,OUTBUF     ACCESS OUTBUF
         ST    R14,ZERO(R4)  CLEAR 1ST WORD OF OUTBUF
         OI    TSTFLGS4,TSTVALCK SET VALIDITY FLAG ON FOR IO
         L     R10,@0(R1)    PLACE ADDRESS OF PDE INTO R10
         L     R2,WORKAREA   ACCESS PTR TO WORKAREA
         LA    R3,@8(R1)     CREATE PTR TO PARSE PARAM
         ST    R3,MSGADDR-TSTCWORK(R2) FUTURE PTR TO 2ND MSG
         USING IKJPARMA,R10    USE REG10 TO ADDRESS PDE
A15000   EQU   *             EQUATE LABEL TO THIS ADDRESS
         TM    PDEFLG2,CTNAMFLG SEE IF ENTRY NAME WAS SPECIFIED
         BNO   A15001        IF NOT THEN ALL OK SO FAR
         TM    PDEFLG4,SYMADDR+RELADDR TEST FOR SYMBOLIC/RELATIVE ADDR
         BM    A15010        IF ADDR THEN BRANCH
         LA    R1,M0252      MSG-INVALID QUAL ADDR
         B     ADDRMSG       BRANCH TO PUT ERROR MSG OUT
A15001   EQU   *             EQUATE LABEL TO THIS ADDRESS
         TM    PDEFLG4,SYMADDR  TEST FOR SYMBOLIC ADDR
         BO    A15010        BRANCH IF SYMBOL SPECIFIED
         TM    PDEFLG4,ABSCOMPL
         BZ    A15010        IF IT WAS THEN BRANCH TO GO TO CONVERT
A15002   EQU   *             EQUATE LABEL TO THIS ADDRESS
         TM    PDEFLG4,RELADDR  CHECK FORA A RELATIVE ADDRESS
         BNO   A15003        IF NOT RELATIVE THEN BRANCH
         B     A15010        BRANCH TO CONVERT ADDR AND CONTINUE
A15003   EQU   *             EQUATE LABEL TO THIS ADDRESS
         TM    PDEFLG4,GENR  CHECK FOR REGISTER NOTATION
         BNO   A15004        IF NOT REG NOTATION THEN BRANCH
         LH    R4,PDEINDCT   OTHERWISE LOAD INDIRECT COUNT INTO R4
         LTR   R4,R4         SEE IF INDIRECT COUNT WAS SPECIFIED
         BNZ   A16010        IF SPECIFIED THEN BRANCH ALL OK SO FAR
A15004   EQU   *             EQUATE LABEL TO THIS ADDRESS
         LA    R1,M0274      MSG-REG MUST BE INDRCT GEN REG
*                            THEREFORE LOAD ERROR MSG AND BRANCH
ADDRMSG  EQU   *             PREPARE INVALID ADDRESS MSG
         LA    R2,M0101      MSG-INVALID ADDRESS
         LR    R3,R1         REG3 IS SECOND LEVEL MSG
         LR    R4,R10        REG4 IS ADDRESS OF PDE
         BAL   R6,MSG3       GO OUTPUT MESSAGES
GOIO     L     R2,WORKAREA   ACCESS PTR TO WORKAREA
         ST    R15,CODESAVE-TSTCWORK(R2) STORE RETURN CODE
         CH    R15,ATTNCODE  COMPARE RET CODE TO 16
         LA    R15,@12       IF EQUAL RETURN CODE OF 16
         BNL   A16030        IF RETURN CODE EQUAL 16
         LA    R15,@8        TELL PARSE TO SIGNAL REENTER
A16030   EQU   *             EQUATE LABEL TO THIS ADDRESS
         L     R4,OUTBUF     ACCESS OUTBUF
         L     R4,ZERO(R4)   ACCESS 1ST WORD OF OUTBUF
         LTR   R4,R4         IS THERE A SECOND LEVEL MESSAGE
         BZ    PARSRET       NO, RETURN TO PARSE
         L     R8,WORKAREA   ACCESS WORKAREA POINTER
         L     R11,MSGADDR-TSTCWORK(R8) GET PTR TO PARSE PARM LIST
         MVC   @0(@4,R11),OUTBUF ADDR OF SECOND LEVEL MSG TO LIST
PARSRET  EQU   *             RETURN TO PARSE
         NI    TSTFLGS4,HEXFF-TSTVALCK SHUT OFF VALIDITY FLAG
         L     R13,@4(R13)   RESTORE USER REG
         L     R5,INBUF      PLACE INPUT BUFFER POINTER IN R5
         LA    R6,CWORKCMD-TSTCWORK(R2) COMMAND PORTION OFWORK @YM07111
        ST    R5,PPLCBUF-PPL(R6) RESTORE POINTER IN PARSE PARM LIST
         RETURN (14,12),RC=(15)     RETURN TO CALLER
A16010   EQU   *             EQUATE LABEL TO THIS ADDRESS
A15010   EQU   *             EQUATE LABEL TO THIS ADDRESS
         LR    R1,R10        PALCE POINTER TO PDE INTO R1
*                            CONVERT TO LOCATE
         LCR   R1,R1         LOAD COMPLIMENT OF R1 AS INDICATOR TO CVT
         L     R15,TSTCONVT  PLACE ADDR OF CONVERT INTO R15
         BALR  R14,R15       BRANCH TO CONVERT TO GET BINARY ADDR
         B     CONVTAB(R15)  BRANCH ACCORDING TO RETURN CODE
CONVTAB  B     CONTINUE      IF RETURN CODE = 0
         B     CONVMSG       IF RETURN CODE = 4
         B     SYMSTAE       IF RETURN CODE = 8
         B     SYMSTAE       IF RETURN CODE = 12
         B     SYMSTAE       IF RETURN CODE = 16
         B     SYMSTAE       IF RETURN CODE = 20
CONTINUE EQU   *             CONTINUE HERE IF RETURN CODE = 0
         L     R11,PDEUSER   ACCESS USERWORD
         LTR   R11,R11       DETERMINE IF SYMBOLIC ADDR
         LA    R11,@0(R11)   TURN HIERARCHY BIT
         BH    RESCHK        USERWORD NOT FROM SYM, BRANCH
         L     R11,@0(R11)   ACCESS SYMBOL
         ST    R11,PDEUSER   STORE ADDR IN USERWORD
RESCHK   EQU   *             RESUME CHECK PROCEDURE
         SR    R15,R15       PLACE ZERO RETURN CODE IN R15
         TM    PDEUSER+@3,HEX07 CHECK LOW ORDER BYTE OF BINARY
*                            ADDRESS FOR '000' TO SEE IF IT IS ON
*                            A DOUBLEWORD BOUNDARY
         BZ    A16030        IF ZERO THEN IT IS ON AN INTEGRAL BDY
         LA    R2,M0101      MSG-INVALID ADDRESS
         LA    R3,M0280      MSG-DOUBLEWORD BOUNDRY REQ.
         LR    R4,R10        ADDRESS INSERT TO REG4
         LA    R5,I0004      DOUBLE-INSERT
         BAL   R6,MSG4       GO OUTPUT MESSAGES
         B     GOIO          GO CHECK RETURN CODE
CONVMSG  EQU   *             ENTER HERE IF RETURN CODE = 4
         LA    R15,@8        SET RETURN CODE TO PARSE (PROMPT)
         B     A16030        RETURN TO PARSE
SYMSTAE  EQU   *             ENTER HERE IF RETURN CODE = 20
         L     R8,WORKAREA   ACCESS PTR TO WORKAREA
         ST    R15,CODESAVE-TSTCWORK(R8) STORE RETURN CODE
         LA    R15,@12       SET RETURN CODE TO PARSE
         B     A16030        RETURN TO PARSE
         EJECT
* THE FOLLOWING ARE MESSAGE OUTPUTTING ROUTINES
         SPACE
MSG1     XC    TSTIOPRM,TSTIOPRM CLEAR PARAMETER AREA
         IKJEGSIO MSG,FIRST=(R2),SECOND=(R3),ID=LDF17,                 *
               MF=(E,TSTIOPRM)  CALL IO
         BR    R6            RETURN
         SPACE
MSG2     XC    TSTIOPRM,TSTIOPRM CLEAR PARAMETER AREA
         IKJEGSIO MSG,FIRST=(R2),INST11=(NUM,(R4)),SECOND=(R3),        *
               ID=LDF17,MF=(E,TSTIOPRM)  CALL IO
         BR    R6            RETURN
         SPACE
MSG3     XC    TSTIOPRM,TSTIOPRM CLEAR PARAMETER AREA
         IKJEGSIO MSG,FIRST=(R2),INST11=(APDE,(R4)),SECOND=(R3),       *
               ID=LDF17,MF=(E,TSTIOPRM)  CALL IO
         BR    R6            RETURN
         SPACE
MSG4     XC    TSTIOPRM,TSTIOPRM CLEAR PARAMETER AREA
         IKJEGSIO MSG,FIRST=(R2),INST11=(APDE,(R4)),SECOND=(R3),       *
               INST21=(NUM,(R5)),ID=LDF17,MF=(E,TSTIOPRM) CALL IO
         BR    R6            RETURN
         SPACE
MSG5     XC    TSTIOPRM,TSTIOPRM CLEAR PARAMETER AREA
         IKJEGSIO MSG,FIRST=(R2),INST11=(REG,(R4)),ID=LDF17,           *
               MF=(E,TSTIOPRM)  CALL IO
         BR    R6            RETURN
         SPACE
MSG6     XC    TSTIOPRM,TSTIOPRM CLEAR PARAMETER AREA
         IKJEGSIO MSG,FIRST=(R7),INST11=(NUM,(R4)),SECOND=(R5),        *
               INST21=(ADDR,MSGINSHD-TSTCWORK(R2)),ID=LDF17,           *
               MF=(E,TSTIOPRM)  CALL IO
         BR    R6            RETURN
         SPACE
LINKFAIL LR    R2,R1         ABEND CODE TO REG 2
         LR    R3,R15        RET CODE TO REG 3
         XC    TSTIOPRM,TSTIOPRM CLEAR PARAMETER AREA
         IKJEGSIO SVCERR,SVC=(R5),ABENDRG=(R2),RC=(R3),                *
               INST11=(NUM,(R4)),ID=LDF17,MF=(E,TSTIOPRM)
TESTRC   L     R2,WORKAREA   ADDRESSABILITY TO WORKAREA
         CLI   TASKSWF-TSTCWORK(R2),HEXFF  TEST FOR TASK SWITCH
         BE    STAEOFF       YES, RETURN VIA TSTSVC
         CH    R15,ATTNCODE  IS RET CODE LESS THAN 16
         BNL   RET           NO, RETURN TO MAINLINE
         B     GOHOME        YES, RETURN TO MAINLINE, RC=0
         SPACE
GETERR   LR    R3,R15        RET CODE TO REG 3
         XC    TSTIOPRM,TSTIOPRM CLEAR PARAMETER AREA
         IKJEGSIO SVCERR,SVC=(R4),RC=(R3),                             *
               ID=LDF17,MF=(E,TSTIOPRM)  CALL IO
         B     TESTRC        BRANCH TO TEST RET CODE
         SPACE
LOADFAIL LR    R3,R15        RET CODE TO REG 3
         LR    R2,R1         ABEND CODE TO REG 2
         XC    TSTIOPRM,TSTIOPRM  CLEAR PARAMETER AREA
         IKJEGSIO SVCERR,SVC=8,ABENDRG=(R2),RC=(R3),                   *
               ID=LDF17,MF=(E,TSTIOPRM)  CALL IO
         B     TESTRC        BRANCH TO TEST RET CODE
         SPACE
SPLISTLD IKJEGSPL RTRY=RETRY,ABNTB=STAELOAD,MODNM=IKJEGLDF,            *
               TNM=LOAD      BUILD ESTAE PARAMETER LIST
SPLISTDL IKJEGSPL RTRY=RETRY,ABNTB=STAEDEL,MODNM=IKJEGLDF,             *
               TNM=DELETE    BUILD ESTAE PARAMETER LIST
SPLISTGT IKJEGSPL RTRY=RETRY,ABNTB=STAEGET,MODNM=IKJEGLDF,             *
               TNM=GETMAIN   BUILD ESTAE PARAMETER LIST
SPLISTFR IKJEGSPL RTRY=RETRY,ABNTB=STAEFREE,MODNM=IKJEGLDF,            *
               TNM=FREEMAIN  BUILD ESTAE PARAMETER LIST
         EJECT
MEMMOVE  MVC   @4(@1,R11),@0(R6) MOVE NAME INTO LIST
DELMOVE  MVC   CWORKCMD-TSTCWORK(@0,R2),@0(R5)  MOVE NAME TO WORKAREA
A13000   PACK  @0(@8,R2),@0(@1,R1) PACK INTEGER INTO WORKAREA
MOVEPASS MVC   PASSWORD-TSTCWORK(@1,R2),@0(R5) MOVE PASSWORD
MOVEDSN  MVC   @2(@1,R3),@0(R6) MOVE DSNAME FOR DEFAULT PARM BLOCK
         USING SYMDSECT,R7
SYMCOMP  CLC   SYMBOL(@1),@0(R8) COMPARE SYMBOLS
SYMMVC   MVC   SYMBOL(@0),@0(R8) MOVE SYMBOL FROM PDE TO SYMTABLE
PCLGET   DC    V(IKJEGGTM)   ADDR OF PCL DSECT FOR GETMAIN
PARSEIT  DC    V(IKJEGFRL)   ADDR OF PCL DSECT FOR FREEMAIN
PARSEDEL DC    V(IKJEGDLT)   ADDR OF PCL CSECT FOR DELETE
LOADPARS DC    V(IKJEGLDP)   ADDR OF PCL CSECT FOR LOAD
         SPACE 1
BASE     DC    A(BASELOC)    ADCON WHICH CONTAINS BEGINNING ADDRESS
REGCODE  DC    X'FF000000'   CODE FOR SVC 97
         DS    0F
LSTDSCP  DC    X'0001004C'   LIST DESCRIPTOR FIELD FOR BLDL LIST
         DS    0F
BYTEX04  DC    X'04000000'   CODE TO SVC 97
BYTEX08  DC    X'08000000'   HEX 08 TO TEST MASK WITH
BYTEX01  DC    X'01000000'   HEX 40 TO TEST MASK WITH
DAIR2C   DC    X'002C'       CODE TO DAIR
FLG2C    DC    X'0001'       DAIR FLAG TO INDICATE DDN NOT IN USE
ATTNCODE DC    H'16'         ATTENTION RETURN CODE
TABLE    DC    C'0123456789ABCDEF'  TRANSLATE TABLE
         SPACE 1
GETLIST  GETMAIN MF=L        LIST FORM OF THE GETMAIN MACRO
LISTSIZE EQU   *-GETLIST     GET ACTUAL SIZE OF THE LIST
         SPACE 1
MYDCB    DCB   DSORG=PO,MACRF=(R)
         SPACE 1
CLFORM   CLOSE (CLFORM),MF=L
         SPACE 1
LFORM    OPEN  (,(INPUT)),MF=L
         SPACE 3
CONSTANT DC    60C'Z'        PATCH AREA
         EJECT
************************************************************
*                                                          *
*                  PARSE MACROS FOR FREEMAIN               *
*                                                          *
************************************************************
IKJEGFRL IKJPARM  DSECT=A
         SPACE 1
FREEMAN1 IKJIDENT 'NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,PROMPT='INTEGER'
         SPACE 1
FREEMAN2 IKJPOSIT ADDRESS,PROMPT='ADDRESS',VALIDCK=ADDRVLCK
         SPACE 1
FREEMAN3 IKJKEYWD
         SPACE 1
         IKJNAME  'SP',SUBFLD=SUBPOOL
         SPACE 1
SUBPOOL IKJSUBF
         SPACE 1
FREEMAN4 IKJIDENT 'NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,                *
               PROMPT='SUBPOOL NUMBER'
         SPACE 1
         IKJENDP
         EJECT
************************************************************
*                                                          *
*                  PARSE MACROS FOR GETMAIN                *
*                                                          *
************************************************************
IKJEGGTM IKJPARM  DSECT=B
         SPACE 1
GETMAIN1 IKJIDENT 'NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,                *
               MAXLNTH=8,PROMPT='INTEGER'
         SPACE 1
GETMAIN2 IKJKEYWD
         SPACE 1
GETMAIN3 IKJNAME  'SP',SUBFLD=GETMAIN4
         SPACE 1
GETMAIN6 IKJKEYWD
         SPACE 1
GETMAIN7 IKJNAME    'EQUATE',SUBFLD=GETMAIN8
         SPACE 1
GETMAIN4 IKJSUBF
         SPACE 1
GETMAIN5 IKJIDENT 'NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,                J
               PROMPT='SUBPOOL NUMBER'
         SPACE 1
GETMAIN8 IKJSUBF
         SPACE 1
GETMAIN9 IKJIDENT   'SYMBOL',FIRST=ALPHA,OTHER=ALPHANUM,               *
               PROMPT='SYMBOL',MAXLNTH=8
         SPACE 1
         IKJENDP
         EJECT
************************************************************
*                                                          *
*                  PARSE MACROS FOR DELETE                 *
*                                                          *
************************************************************
IKJEGDLT IKJPARM  DSECT=C
         SPACE 1
PARSE1   IKJIDENT 'NAME',FIRST=ALPHA,OTHER=ALPHANUM,                   X
               PROMPT='PROGRAM NAME'
         SPACE 1
         IKJENDP
         EJECT
************************************************************
*                                                          *
*                  PARSE MACROS FOR LOAD                   *
*                                                          *
************************************************************
IKJEGLDP IKJPARM  DSECT=D
         SPACE 1
PARSE2   IKJPOSIT DSNAME,                                              J
               PROMPT='PROGRAM NAME AS FULLY QUALIFIED DSNAME',        X
               VALIDCK=LOADVLCK
         SPACE 1
         IKJENDP
         EJECT
************************************************************
*                                                          *
*                           EQUATES                        *
*                                                          *
************************************************************
R0       EQU   0             REG.  0
R1       EQU   1             REG.  1
R2       EQU   2             REG.  2
R3       EQU   3             REG.  3
R4       EQU   4             REG.  4
R5       EQU   5             REG.  5
R6       EQU   6             REG.  6
R7       EQU   7             REG.  7
R8       EQU   8             REG.  8
R9       EQU   9             REG.  9
R10      EQU   10            REG. 10
R11      EQU   11            REG. 11
R12      EQU   12            REG. 12
R13      EQU   13            REG. 13
R14      EQU   14            REG. 14
R15      EQU   15            REG. 15
CHANGEO  EQU   97            SVC 97
HEX01    EQU   X'01'         X'01'
F0       EQU   X'F0'         X'F0'
B7       EQU   X'B7'         X'B7'
BLANK    EQU   X'40'         X'40'
ZERO     EQU   0             EQUATE ZERO TO 0
@164     EQU   164           164
TWELVE   EQU   12            12
@64      EQU   64            64
@232     EQU   232           232
@20      EQU   20            20
SIXFOUR  EQU   64            64
TEN      EQU   10            10
ONE      EQU   1             1
@0       EQU   0             NO.  0
@1       EQU   1             NO.  1
@2       EQU   2             NO.  2
@3       EQU   3             NO.  3
@4       EQU   4             NO.  4
@5       EQU   5             NO.  5
@6       EQU   6             NO.  6
@7       EQU   7             NO.  7
@8       EQU   8             NO.  8
@9       EQU   9             NO.  9
@12      EQU   12            NO. 12
@13      EQU   13            NO. 13
@14      EQU   14            NO. 14
@16      EQU   16            NO. 16
@17      EQU   17            NO. 17
@152     EQU   152           NO. 152
@21      EQU   21            NO. 21
@22      EQU   22            NO. 22
@24      EQU   24            NO. 24
@26      EQU   26            NO. 26
@32      EQU   32            NO. 32
@33      EQU   33            NO. 33
@36      EQU   36            NO. 36
@38      EQU   38            NO. 38
@40      EQU   40            NO. 40
@43      EQU   43            NO. 43
@44      EQU   44            NO. 44
@52      EQU   52            NO. 52
@68      EQU   68            NO. 68
@76      EQU   76            NO. 76
@88      EQU   88            NO. 88
@92      EQU   92            NO. 92
@95      EQU   95            NO. 95
@96      EQU   96            NO. 96
@104     EQU   104           NO. 104
@108     EQU   108           NO. 108
@112     EQU   112           NO. 112
@116     EQU   116           NO. 116
@120     EQU   120           NO. 120
@124     EQU   124           NO. 124
@136     EQU   136           NO. 136
@140     EQU   140           NO. 140
@144     EQU   144           NO. 144
@148     EQU   148           NO. 148
@156     EQU   156           NO. 156
@240     EQU   240           NO. 240
FULLQUAL EQU   X'40'         X'40'
HEX00    EQU   X'00'         X'00'
HEX10    EQU   X'10'         X'10'
HEX08    EQU   X'08'         X'08'
HEX07    EQU   X'07'         X'07'
HEX20    EQU   X'20'         X'20'
HEXFF    EQU   X'FF'         X'FF'
HEX80    EQU   X'80'         X'80'
HEX40    EQU   X'40'         X'40'
HEX04    EQU   X'04'         X'04'
C8       EQU   C'8'          X'8'
PLUS     EQU   X'4E'         X'4E'
* THE FOLLOWING ARE FIRST LEVEL MESSAGE NUMB. EQUATES.
M0045    EQU   45            UNABLE TO LOAD PROGRAM
M0046    EQU   46            STORAGE AT ...
M0047    EQU   47            0 BYTES IS INVAL CNT FOR GETMAIN
M0048    EQU   48            MEMBER NAME MISSING, RESPECIFY
M0049    EQU   49            ENTRY POINT AT ...
M0058    EQU   58            ... FAILED
M0101    EQU   101           INVALID ADDRESS ...
M0103    EQU   103           NOT ENOUGH MAIN STORAGE
M0104    EQU   104           ... FAILED, COMMAND SYS. ERR.
* THE FOLLOWING ARE 2ND LEVEL MESSAGE NUMB. EQUATES.
M0249    EQU   249           OPEN ERROR
M0250    EQU   250           BLDL ERROR CODE 4
M0251    EQU   251           PROGRAM NOT ON LOAD LIST
M0252    EQU   252           INVALID QUALIFIED ADDRESS
M0253    EQU   253           SYSTEM ABEND CODE ...
M0274    EQU   274           REG NOT. MUST BE INDRCT GEN REG
M0277    EQU   277           PARSE ERROR CODE 12
M0280    EQU   280           DOUBLEWORD BOUNDARY REQUIRED
M0283    EQU   283           SVC 97 RET CODE NONZERO
M0297    EQU   297           BLDL ERROR CODE 8
* THE FOLLOWING ARE CONST MESSAGE INSERT EQUATES.
I0004    EQU   4             DOUBLE
I0023    EQU   23            LOAD
I0024    EQU   24            DELETE
I0025    EQU   25            GETMAIN
I0026    EQU   26            FREEMAIN
I0040    EQU   40            IKJPARS
I0041    EQU   41            IKJDAIR
I0046    EQU   46            IKJDFLT
I0042    EQU   42            IKJEFF18
I0087    EQU   87            IKJEGLDF
I0094    EQU   94            ESTAE CODE FOR ABEND
I0096    EQU   96            ESTAE CODE FOR ABEND
I0099    EQU   99            ESTAE CODE FOR ABEND
************************************************************
         EJECT
************************************************************
*                                                          *
*                          TCOMTAB DSECT MACRO GENERATED   *
*                                                          *
************************************************************
TCOMTAB  TCOMTAB             MACRO THAT GENERATES TCOMTAB
         EJECT
************************************************************
*                                                          *
*                         DCB DSECT                        *
*                                                          *
************************************************************
          DCBD  DEVD=DA       DCB DSECT
************************************************************
*                                                          *
*                    TMP DSECT                             *
*                                                          *
************************************************************
         IKJTPL
************************************************************
*                                                          *
*                     PDE DSECT FOR PARSE                  *
*                                                          *
************************************************************
PARDSECT DSECT               DSECT DEFINING PDE FOR PARSE
DSNAMPTR DS    CL4           POINTER TO DSNAME
LENGTH1  DS    CL2           LENGTH OF DSNAME
FLAGS1   DS    CL1           FLAGS
RESERVE1 DS    CL1           NOT USED
MEMBERPT DS    CL4           POINTER TO MEMBER
LENGTH2  DS    CL2           LENGTH OF MEMBER
FLAGS2   DS    CL1           FLAGS
RESERVE2 DS    CL1           NOT USED
PSWRDPTR DS    CL4           POINTER TO PASSWORD
LENGTH3  DS    CL2           LENGTH OF PASSWORD
FLAGS3   DS    CL1           FLAGS
RESRVE3  DS    CL1           NOT USED
*
         DS    0F
PRSDSECT DSECT               DSECT DEFINING DSECT FOR PARSE
DSNPTR   DS    CL4           POINTER TO DSNAME
LEN2     DS    CL2           LENGTH OF DSNAME
FLGS1    DS    CL1           FLAGS
RESRVE1  DS    CL1           NOT USED
************************************************************
*                                                          *
*       DSECT FOR PARAMETER CONTROL LIST PASSED TO PARSE   *
*                                                          *
************************************************************
         IKJPPL               DSECT DESCRIBING PCL TO BE PASSEC
         EJECT
         IKJDAPL              DSECT FOR DAIR PARM BLOCK
         IKJDAP08             DSECT FOR DAIR CODE 08
         IKJDAP2C             DSECT FOR DAIR CODE 2C
***********************************************************
*                                                         *
*       DSNAME DSECT POINTED TO BY DAIR ALLOCATION DSECT  *
*                                                         *
***********************************************************
DSNDSECT DSECT
LENGTHDN DS   CL2             LENGTH OF DSNAME FOR DAIR
NAME     DS   CL8             DSNAME FOR DAIR
         EJECT
************************************************************
*                                                          *
*                     REQUEST BLOCK DSECT                  *
*                                                          *
************************************************************
         IKJRB                RB DSECT
         EJECT
         IKJDFPL
         IKJDFPB
************************************************************
*                                                          *
*                          TCB DSECT                       *
*                                                          *
************************************************************
TCBDSECT IKJTCB               DSECT FOR TCB
        EJECT
************************************************************
**                                                        **
**   PARSE PDE DSECT FOR GETMAIN ENTRY POINT              **
**                                                        **
************************************************************
IDENTGM  DSECT               DSECT FOR IDENT PDE
STRNGPTR DS    A             POINTER TO INTEGER STRING
LENDSNME DS    CL2           LENGTH OF INTERGER STRING
FLAGS    DS    CL1           FLAGS
RESERVED DS    CL1           RESERVED
KEYWORD  DS    CL2           KEYWORD
EQUKYWD  DS    CL2           NUMBER OF KEYWORDS
SPOINTER DS    A             POINTER TO SUBPOOL INTEGER
SPLENGTH DS    CL2           LENGTH OF SP INTEGER
SPFLAGS  DS    CL1           FLAGS
SPRES    DS    CL1           RESERVED
EQUPTR   DS    A             PTR TO EQUATE SYMBOL
EQULEN   DS    H             LENGTH OF SYMBOL
EQUFLG   DS    X             FLAGS
EQURES   DS    X             RESERVED
*
         DS    0F
SYMDSECT DSECT               DSECT FOR SYMBOL TABLE
CHAIN    DS    A             PTR TO NEXT SYMTABLE ENTRY
ADDRSYM  DS    A             ADDRESS
ATTRTYPE DS    X             TYPE
ATTRMULT DS    CL3           MULT
ATTRLNTH DS    H             LENGTH
SYMLNGTH DS    H             LENGTH OF SYMBOL
SYMBOL   DS    CL8           SYMBOL
************************************************************
**                                                        **
**      PARSE PDE DSECT FOR FREEMANI ENTRY POINT          **
**                                                        **
************************************************************
IDENTFM  DSECT               DSECT FOR FREEMAIN PARSE PDE
COREPTR  DS    A             POINTER TO INTEGER
LENGTHFM DS    CL2           LENGTH OF INTEGER
FLAGSFM  DS    CL1           FLAGS
RESFM    DS    CL1           RESERVED
         IKJPARMA            ADDRESS PDE FOR PARSE
         EJECT
TSTCWORK TSTCWORK
DDNSAVE  EQU   CWORKCMD+@68
DAIR     EQU   CWORKCMD+@76
PASSWORD EQU   CWORKCMD+@96
CODESAVE EQU   CWORKCMD+@104
MSGHOLD  EQU   CWORKCMD+@108
MSGHOLD2 EQU   CWORKCMD+@112
MSGADDR  EQU   CWORKCMD+@116
PARMDRFL EQU   CWORKCMD+@120
MIDHOLD  EQU   CWORKCMD+@140
TMPRETC  EQU   CWORKCMD+@144
TMPCIDP  EQU   CWORKCMD+@148
TASKSWF  EQU   CWORKCMD+@152
DSNMEPTR EQU   CWORKCMD+@156
* THE FOLLOWING IS A FORMATTED MESSAGE INSERT FOR IO.
* THE SAME AREA IS USED AS FOR THE DAIL FAIL PARAMETER LIST.
MSGINSHD EQU   CWORKCMD+@120 MESSAGE INSERT HEADER
MSGINSRT EQU   CWORKCMD+@124 MESSAGE INSERT ITSELF
IKJEGLDF CSECT
         DS    0F             FOR ALIGNMENT PURPOSES
STAELOAD DC   AL1(I0099)      STAE CODE
         DC   AL3(BLOW1)      RESUME ADDRESS
         DC   AL1(I0099)      STAE CODE FOR DAIR LINK
         DC   AL3(BLOW2)      RESUME ADDRESS
         DC   AL1(I0096)      STAE CODE
         DC   AL3(BLOW3)      RESUME ADDRESS
         DC   AL1(I0094)      STAE CODE
         DC   AL3(BLOW4)      RESUME ADDRESS
         DC   AL1(I0094)      STAE CODE
         DC   AL3(BLOW8)      RESUME ADDRESS
         DC    AL1(I0099)     STAE CODE FOR DAIR LINK
         DC    AL3(BLOW9)     RESUME ADDRESS
         DC    AL1(I0099)     STAE CODE FOR DEFAULT LINK
         DC    AL3(BLOW10)    RESUME ADDRESS
         DC   X'FF'           END OF TABLE INDICATION
         DS   0F              FOR ALIGNMENT PURPOSES
STAEDEL  DC   AL1(I0099)      STAE CODE
         DC    AL3(BLOW1)     RESUME ADDRESS
         DC   AL1(I0094)      STAE CODE
         DC   AL3(BLOW8)      RESUME CODE
         DC   X'FF'           END OF TABLE INDICATOR
         DS   0F              FOR ALIGNMENT PURPOSES
STAEGET  DC   AL1(I0099)      STAE CODE
         DC    AL3(BLOW1)     RESUME ADDRESS
         DC   AL1(I0094)      STAE CODE
         DC   AL3(BLOW8)      RESUME ADDRESS
         DC   X'FF'           END OF TABLE INDICATOR
         DS   0F              FOR ALIGNMENT PURPOSES
STAEFREE DC   AL1(I0099)      STAE CODE
         DC    AL3(BLOW1)     RESUME ADDRESS
         DC   AL1(I0094)      STAE CODE
         DC   AL3(BLOW8)      RESUME ADDRESS
         DC   X'FF'           END OF TABLE INDICATOR
LOADQUAL DC   CL8'LOAD'       FOR DEFAULT PARM BLOCK
         DS   0F              FOR ALIGNMENT PURPOSES
LISTSTAE ESTAE MF=L           LIST FORM OF ESTAE
STAELEN  EQU   *-LISTSTAE     LENGTH OF LIST FORM OF ESTAE
SUBPOOL2 EQU  *
         DC   AL1(0)          SUBPOOL NUMBER
         DC   AL3(104)        LENGTH TO BE FREED
ARETRY   DC   A(RETRY)        ADDRESS OF STAE RETRY RTN
ARETRY1  EQU   ARETRY+@1
SYMPARM  DC    X'04'          DITTO
         DC    X'000001'      DITTO
         DC    H'4'           DITTO
PARMSIZE EQU   *-SYMPARM
         EJECT
         CVT   DSECT=YES
         END
